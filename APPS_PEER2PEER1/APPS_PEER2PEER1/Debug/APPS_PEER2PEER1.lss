
APPS_PEER2PEER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c04  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00005c04  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000984  20000070  00005c74  00010070  2**2
                  ALLOC
  3 .stack        00002004  200009f4  000065f8  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00032acb  00000000  00000000  00010126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f22  00000000  00000000  00042bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c306  00000000  00000000  00048b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b30  00000000  00000000  00054e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001070  00000000  00000000  00055949  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f0d2  00000000  00000000  000569b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018ec7  00000000  00000000  00075a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00085aa3  00000000  00000000  0008e952  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000225c  00000000  00000000  001143f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200029f8 	.word	0x200029f8
       4:	00001ec9 	.word	0x00001ec9
       8:	00001ec5 	.word	0x00001ec5
       c:	00001ec5 	.word	0x00001ec5
	...
      2c:	00001ec5 	.word	0x00001ec5
	...
      38:	00001ec5 	.word	0x00001ec5
      3c:	00001ec5 	.word	0x00001ec5
      40:	00001ec5 	.word	0x00001ec5
      44:	00001ec5 	.word	0x00001ec5
      48:	00001ec5 	.word	0x00001ec5
      4c:	00001ec5 	.word	0x00001ec5
      50:	00000359 	.word	0x00000359
      54:	00001ec5 	.word	0x00001ec5
      58:	00001ec5 	.word	0x00001ec5
      5c:	00001ec5 	.word	0x00001ec5
      60:	00001ec5 	.word	0x00001ec5
      64:	00000959 	.word	0x00000959
      68:	00000969 	.word	0x00000969
      6c:	00000979 	.word	0x00000979
      70:	00000989 	.word	0x00000989
      74:	00000999 	.word	0x00000999
      78:	000009a9 	.word	0x000009a9
      7c:	00001ec5 	.word	0x00001ec5
      80:	00001ec5 	.word	0x00001ec5
      84:	00001ec5 	.word	0x00001ec5
      88:	00001b65 	.word	0x00001b65
      8c:	00001b75 	.word	0x00001b75
      90:	00001b85 	.word	0x00001b85
	...
      9c:	00001ec5 	.word	0x00001ec5
      a0:	00001ec5 	.word	0x00001ec5
      a4:	00000000 	.word	0x00000000
      a8:	00001ec5 	.word	0x00001ec5
      ac:	00001ec5 	.word	0x00001ec5
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00005c04 	.word	0x00005c04

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00005c04 	.word	0x00005c04
     108:	20000074 	.word	0x20000074
     10c:	00005c04 	.word	0x00005c04
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	0000188d 	.word	0x0000188d
     140:	0000494d 	.word	0x0000494d
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     150:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_us+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     158:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15e:	e006      	b.n	16e <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     164:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     166:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_us+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000000 	.word	0x20000000
     178:	e000e010 	.word	0xe000e010

0000017c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     17c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <delay_cycles_ms+0x24>)
     180:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     182:	4a08      	ldr	r2, [pc, #32]	; (1a4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     184:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     186:	2180      	movs	r1, #128	; 0x80
     188:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     18a:	e006      	b.n	19a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     18c:	2c00      	cmp	r4, #0
     18e:	d004      	beq.n	19a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     190:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     192:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     194:	6813      	ldr	r3, [r2, #0]
     196:	420b      	tst	r3, r1
     198:	d0fc      	beq.n	194 <delay_cycles_ms+0x18>
     19a:	3801      	subs	r0, #1
     19c:	d2f6      	bcs.n	18c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     19e:	bd30      	pop	{r4, r5, pc}
     1a0:	20000004 	.word	0x20000004
     1a4:	e000e010 	.word	0xe000e010

000001a8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1a8:	4b0c      	ldr	r3, [pc, #48]	; (1dc <cpu_irq_enter_critical+0x34>)
     1aa:	681b      	ldr	r3, [r3, #0]
     1ac:	2b00      	cmp	r3, #0
     1ae:	d110      	bne.n	1d2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1b0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b4:	2b00      	cmp	r3, #0
     1b6:	d109      	bne.n	1cc <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     1b8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1be:	2200      	movs	r2, #0
     1c0:	4b07      	ldr	r3, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x38>)
     1c2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1c4:	2201      	movs	r2, #1
     1c6:	4b07      	ldr	r3, [pc, #28]	; (1e4 <cpu_irq_enter_critical+0x3c>)
     1c8:	701a      	strb	r2, [r3, #0]
     1ca:	e002      	b.n	1d2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1cc:	2200      	movs	r2, #0
     1ce:	4b05      	ldr	r3, [pc, #20]	; (1e4 <cpu_irq_enter_critical+0x3c>)
     1d0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1d2:	4b02      	ldr	r3, [pc, #8]	; (1dc <cpu_irq_enter_critical+0x34>)
     1d4:	681a      	ldr	r2, [r3, #0]
     1d6:	3201      	adds	r2, #1
     1d8:	601a      	str	r2, [r3, #0]
}
     1da:	4770      	bx	lr
     1dc:	2000008c 	.word	0x2000008c
     1e0:	20000008 	.word	0x20000008
     1e4:	20000090 	.word	0x20000090

000001e8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1e8:	4b08      	ldr	r3, [pc, #32]	; (20c <cpu_irq_leave_critical+0x24>)
     1ea:	681a      	ldr	r2, [r3, #0]
     1ec:	3a01      	subs	r2, #1
     1ee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f0:	681b      	ldr	r3, [r3, #0]
     1f2:	2b00      	cmp	r3, #0
     1f4:	d109      	bne.n	20a <cpu_irq_leave_critical+0x22>
     1f6:	4b06      	ldr	r3, [pc, #24]	; (210 <cpu_irq_leave_critical+0x28>)
     1f8:	781b      	ldrb	r3, [r3, #0]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d005      	beq.n	20a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1fe:	2201      	movs	r2, #1
     200:	4b04      	ldr	r3, [pc, #16]	; (214 <cpu_irq_leave_critical+0x2c>)
     202:	701a      	strb	r2, [r3, #0]
     204:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     208:	b662      	cpsie	i
	}
}
     20a:	4770      	bx	lr
     20c:	2000008c 	.word	0x2000008c
     210:	20000090 	.word	0x20000090
     214:	20000008 	.word	0x20000008

00000218 <system_board_init>:




void system_board_init(void)
{
     218:	b5f0      	push	{r4, r5, r6, r7, lr}
     21a:	4647      	mov	r7, r8
     21c:	b480      	push	{r7}
     21e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     220:	ac01      	add	r4, sp, #4
     222:	2601      	movs	r6, #1
     224:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     226:	2700      	movs	r7, #0
     228:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     22a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     22c:	2013      	movs	r0, #19
     22e:	1c21      	adds	r1, r4, #0
     230:	4d27      	ldr	r5, [pc, #156]	; (2d0 <system_board_init+0xb8>)
     232:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     234:	4a27      	ldr	r2, [pc, #156]	; (2d4 <system_board_init+0xbc>)
     236:	4690      	mov	r8, r2
     238:	2380      	movs	r3, #128	; 0x80
     23a:	031b      	lsls	r3, r3, #12
     23c:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     23e:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     240:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     242:	201c      	movs	r0, #28
     244:	1c21      	adds	r1, r4, #0
     246:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     248:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     24a:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     24c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     24e:	2052      	movs	r0, #82	; 0x52
     250:	1c21      	adds	r1, r4, #0
     252:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     254:	203e      	movs	r0, #62	; 0x3e
     256:	1c21      	adds	r1, r4, #0
     258:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     25a:	203f      	movs	r0, #63	; 0x3f
     25c:	1c21      	adds	r1, r4, #0
     25e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     260:	202f      	movs	r0, #47	; 0x2f
     262:	1c21      	adds	r1, r4, #0
     264:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     266:	2014      	movs	r0, #20
     268:	1c21      	adds	r1, r4, #0
     26a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	02d2      	lsls	r2, r2, #11
     270:	4b19      	ldr	r3, [pc, #100]	; (2d8 <system_board_init+0xc0>)
     272:	619a      	str	r2, [r3, #24]
     274:	3b80      	subs	r3, #128	; 0x80
     276:	2280      	movs	r2, #128	; 0x80
     278:	05d2      	lsls	r2, r2, #23
     27a:	619a      	str	r2, [r3, #24]
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	0612      	lsls	r2, r2, #24
     280:	619a      	str	r2, [r3, #24]
     282:	2280      	movs	r2, #128	; 0x80
     284:	0212      	lsls	r2, r2, #8
     286:	619a      	str	r2, [r3, #24]
     288:	2380      	movs	r3, #128	; 0x80
     28a:	035b      	lsls	r3, r3, #13
     28c:	4642      	mov	r2, r8
     28e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     290:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     292:	2053      	movs	r0, #83	; 0x53
     294:	1c21      	adds	r1, r4, #0
     296:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     298:	4b10      	ldr	r3, [pc, #64]	; (2dc <system_board_init+0xc4>)
     29a:	6a19      	ldr	r1, [r3, #32]
     29c:	2280      	movs	r2, #128	; 0x80
     29e:	0392      	lsls	r2, r2, #14
     2a0:	430a      	orrs	r2, r1
     2a2:	621a      	str	r2, [r3, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     2a4:	2204      	movs	r2, #4
     2a6:	4b0e      	ldr	r3, [pc, #56]	; (2e0 <system_board_init+0xc8>)
     2a8:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2aa:	466b      	mov	r3, sp
     2ac:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     2ae:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     2b0:	2305      	movs	r3, #5
     2b2:	466a      	mov	r2, sp
     2b4:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     2b6:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     2b8:	2009      	movs	r0, #9
     2ba:	4669      	mov	r1, sp
     2bc:	4c09      	ldr	r4, [pc, #36]	; (2e4 <system_board_init+0xcc>)
     2be:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     2c0:	200c      	movs	r0, #12
     2c2:	4669      	mov	r1, sp
     2c4:	47a0      	blx	r4
#endif

}
     2c6:	b002      	add	sp, #8
     2c8:	bc04      	pop	{r2}
     2ca:	4690      	mov	r8, r2
     2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	000004d9 	.word	0x000004d9
     2d4:	41004400 	.word	0x41004400
     2d8:	41004500 	.word	0x41004500
     2dc:	40000400 	.word	0x40000400
     2e0:	42005400 	.word	0x42005400
     2e4:	00001a81 	.word	0x00001a81

000002e8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2e8:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2ea:	2a00      	cmp	r2, #0
     2ec:	d10f      	bne.n	30e <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     2ee:	008b      	lsls	r3, r1, #2
     2f0:	4a08      	ldr	r2, [pc, #32]	; (314 <extint_register_callback+0x2c>)
     2f2:	589a      	ldr	r2, [r3, r2]
     2f4:	2a00      	cmp	r2, #0
     2f6:	d104      	bne.n	302 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
     2f8:	1c19      	adds	r1, r3, #0
     2fa:	4b06      	ldr	r3, [pc, #24]	; (314 <extint_register_callback+0x2c>)
     2fc:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     2fe:	2300      	movs	r3, #0
     300:	e005      	b.n	30e <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     302:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     304:	1a12      	subs	r2, r2, r0
     306:	1e50      	subs	r0, r2, #1
     308:	4182      	sbcs	r2, r0
     30a:	4252      	negs	r2, r2
     30c:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     30e:	1c18      	adds	r0, r3, #0
     310:	4770      	bx	lr
     312:	46c0      	nop			; (mov r8, r8)
     314:	2000087c 	.word	0x2000087c

00000318 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     318:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     31a:	2900      	cmp	r1, #0
     31c:	d107      	bne.n	32e <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     31e:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     320:	281f      	cmp	r0, #31
     322:	d800      	bhi.n	326 <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     324:	4b03      	ldr	r3, [pc, #12]	; (334 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     326:	2201      	movs	r2, #1
     328:	4082      	lsls	r2, r0
     32a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     32c:	2300      	movs	r3, #0
}
     32e:	1c18      	adds	r0, r3, #0
     330:	4770      	bx	lr
     332:	46c0      	nop			; (mov r8, r8)
     334:	40001800 	.word	0x40001800

00000338 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     338:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     33a:	2900      	cmp	r1, #0
     33c:	d107      	bne.n	34e <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     33e:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     340:	281f      	cmp	r0, #31
     342:	d800      	bhi.n	346 <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     346:	2201      	movs	r2, #1
     348:	4082      	lsls	r2, r0
     34a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     34c:	2300      	movs	r3, #0
}
     34e:	1c18      	adds	r0, r3, #0
     350:	4770      	bx	lr
     352:	46c0      	nop			; (mov r8, r8)
     354:	40001800 	.word	0x40001800

00000358 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     358:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     35a:	2200      	movs	r2, #0
     35c:	4b16      	ldr	r3, [pc, #88]	; (3b8 <EIC_Handler+0x60>)
     35e:	701a      	strb	r2, [r3, #0]
     360:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     362:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     364:	4d15      	ldr	r5, [pc, #84]	; (3bc <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     366:	4c14      	ldr	r4, [pc, #80]	; (3b8 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     368:	2b1f      	cmp	r3, #31
     36a:	d910      	bls.n	38e <EIC_Handler+0x36>
     36c:	e019      	b.n	3a2 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     36e:	4914      	ldr	r1, [pc, #80]	; (3c0 <EIC_Handler+0x68>)
     370:	e000      	b.n	374 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     372:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     374:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     376:	009b      	lsls	r3, r3, #2
     378:	595b      	ldr	r3, [r3, r5]
     37a:	2b00      	cmp	r3, #0
     37c:	d000      	beq.n	380 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     37e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     380:	7823      	ldrb	r3, [r4, #0]
     382:	3301      	adds	r3, #1
     384:	b2db      	uxtb	r3, r3
     386:	7023      	strb	r3, [r4, #0]
     388:	2b0f      	cmp	r3, #15
     38a:	d814      	bhi.n	3b6 <EIC_Handler+0x5e>
     38c:	e7ec      	b.n	368 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     38e:	1c32      	adds	r2, r6, #0
     390:	401a      	ands	r2, r3
     392:	2101      	movs	r1, #1
     394:	4091      	lsls	r1, r2
     396:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     398:	4909      	ldr	r1, [pc, #36]	; (3c0 <EIC_Handler+0x68>)
     39a:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     39c:	4211      	tst	r1, r2
     39e:	d1e6      	bne.n	36e <EIC_Handler+0x16>
     3a0:	e7ee      	b.n	380 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     3a2:	1c32      	adds	r2, r6, #0
     3a4:	401a      	ands	r2, r3
     3a6:	2101      	movs	r1, #1
     3a8:	4091      	lsls	r1, r2
     3aa:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     3ac:	2100      	movs	r1, #0
     3ae:	6909      	ldr	r1, [r1, #16]
     3b0:	4211      	tst	r1, r2
     3b2:	d1de      	bne.n	372 <EIC_Handler+0x1a>
     3b4:	e7e4      	b.n	380 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     3b6:	bd70      	pop	{r4, r5, r6, pc}
     3b8:	20000878 	.word	0x20000878
     3bc:	2000087c 	.word	0x2000087c
     3c0:	40001800 	.word	0x40001800

000003c4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     3c4:	4b05      	ldr	r3, [pc, #20]	; (3dc <_extint_enable+0x18>)
     3c6:	7819      	ldrb	r1, [r3, #0]
     3c8:	2202      	movs	r2, #2
     3ca:	430a      	orrs	r2, r1
     3cc:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3ce:	1c1a      	adds	r2, r3, #0
     3d0:	7853      	ldrb	r3, [r2, #1]
     3d2:	b25b      	sxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	dbfb      	blt.n	3d0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3d8:	4770      	bx	lr
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	40001800 	.word	0x40001800

000003e0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3e0:	b500      	push	{lr}
     3e2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3e4:	4b12      	ldr	r3, [pc, #72]	; (430 <_system_extint_init+0x50>)
     3e6:	6999      	ldr	r1, [r3, #24]
     3e8:	2240      	movs	r2, #64	; 0x40
     3ea:	430a      	orrs	r2, r1
     3ec:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3ee:	a901      	add	r1, sp, #4
     3f0:	2300      	movs	r3, #0
     3f2:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3f4:	2005      	movs	r0, #5
     3f6:	4b0f      	ldr	r3, [pc, #60]	; (434 <_system_extint_init+0x54>)
     3f8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3fa:	2005      	movs	r0, #5
     3fc:	4b0e      	ldr	r3, [pc, #56]	; (438 <_system_extint_init+0x58>)
     3fe:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     400:	4b0e      	ldr	r3, [pc, #56]	; (43c <_system_extint_init+0x5c>)
     402:	7819      	ldrb	r1, [r3, #0]
     404:	2201      	movs	r2, #1
     406:	430a      	orrs	r2, r1
     408:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     40a:	1c1a      	adds	r2, r3, #0
     40c:	7853      	ldrb	r3, [r2, #1]
     40e:	b25b      	sxtb	r3, r3
     410:	2b00      	cmp	r3, #0
     412:	dbfb      	blt.n	40c <_system_extint_init+0x2c>
     414:	4b0a      	ldr	r3, [pc, #40]	; (440 <_system_extint_init+0x60>)
     416:	1c19      	adds	r1, r3, #0
     418:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     41a:	2200      	movs	r2, #0
     41c:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     41e:	428b      	cmp	r3, r1
     420:	d1fc      	bne.n	41c <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     422:	2210      	movs	r2, #16
     424:	4b07      	ldr	r3, [pc, #28]	; (444 <_system_extint_init+0x64>)
     426:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     428:	4b07      	ldr	r3, [pc, #28]	; (448 <_system_extint_init+0x68>)
     42a:	4798      	blx	r3
}
     42c:	b003      	add	sp, #12
     42e:	bd00      	pop	{pc}
     430:	40000400 	.word	0x40000400
     434:	000019a5 	.word	0x000019a5
     438:	00001919 	.word	0x00001919
     43c:	40001800 	.word	0x40001800
     440:	2000087c 	.word	0x2000087c
     444:	e000e100 	.word	0xe000e100
     448:	000003c5 	.word	0x000003c5

0000044c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     44c:	2300      	movs	r3, #0
     44e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     450:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     452:	2201      	movs	r2, #1
     454:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     456:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     458:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     45a:	2302      	movs	r3, #2
     45c:	72c3      	strb	r3, [r0, #11]
}
     45e:	4770      	bx	lr

00000460 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     460:	b5f0      	push	{r4, r5, r6, r7, lr}
     462:	b083      	sub	sp, #12
     464:	1c05      	adds	r5, r0, #0
     466:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     468:	a901      	add	r1, sp, #4
     46a:	2300      	movs	r3, #0
     46c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     46e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     470:	6863      	ldr	r3, [r4, #4]
     472:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     474:	7a23      	ldrb	r3, [r4, #8]
     476:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     478:	7820      	ldrb	r0, [r4, #0]
     47a:	4b15      	ldr	r3, [pc, #84]	; (4d0 <extint_chan_set_config+0x70>)
     47c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     47e:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     480:	2d1f      	cmp	r5, #31
     482:	d800      	bhi.n	486 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     484:	4b13      	ldr	r3, [pc, #76]	; (4d4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     486:	2107      	movs	r1, #7
     488:	4029      	ands	r1, r5
     48a:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     48c:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     48e:	7aa2      	ldrb	r2, [r4, #10]
     490:	2a00      	cmp	r2, #0
     492:	d001      	beq.n	498 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     494:	2208      	movs	r2, #8
     496:	4310      	orrs	r0, r2
     498:	08ea      	lsrs	r2, r5, #3
     49a:	0092      	lsls	r2, r2, #2
     49c:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     49e:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     4a0:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     4a2:	270f      	movs	r7, #15
     4a4:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     4a6:	43be      	bics	r6, r7
     4a8:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     4aa:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     4ac:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     4ae:	7a62      	ldrb	r2, [r4, #9]
     4b0:	2a00      	cmp	r2, #0
     4b2:	d006      	beq.n	4c2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     4b4:	695a      	ldr	r2, [r3, #20]
     4b6:	2101      	movs	r1, #1
     4b8:	40a9      	lsls	r1, r5
     4ba:	1c0d      	adds	r5, r1, #0
     4bc:	4315      	orrs	r5, r2
     4be:	615d      	str	r5, [r3, #20]
     4c0:	e004      	b.n	4cc <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     4c2:	695a      	ldr	r2, [r3, #20]
     4c4:	2101      	movs	r1, #1
     4c6:	40a9      	lsls	r1, r5
     4c8:	438a      	bics	r2, r1
     4ca:	615a      	str	r2, [r3, #20]
	}
}
     4cc:	b003      	add	sp, #12
     4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4d0:	00001a81 	.word	0x00001a81
     4d4:	40001800 	.word	0x40001800

000004d8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4d8:	b500      	push	{lr}
     4da:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4dc:	ab01      	add	r3, sp, #4
     4de:	2280      	movs	r2, #128	; 0x80
     4e0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4e2:	780a      	ldrb	r2, [r1, #0]
     4e4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4e6:	784a      	ldrb	r2, [r1, #1]
     4e8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4ea:	788a      	ldrb	r2, [r1, #2]
     4ec:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4ee:	1c19      	adds	r1, r3, #0
     4f0:	4b01      	ldr	r3, [pc, #4]	; (4f8 <port_pin_set_config+0x20>)
     4f2:	4798      	blx	r3
}
     4f4:	b003      	add	sp, #12
     4f6:	bd00      	pop	{pc}
     4f8:	00001a81 	.word	0x00001a81

000004fc <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4fc:	b510      	push	{r4, lr}
     4fe:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     500:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     502:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     504:	4299      	cmp	r1, r3
     506:	d30c      	bcc.n	522 <_sercom_get_sync_baud_val+0x26>
     508:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     50a:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     50c:	1c60      	adds	r0, r4, #1
     50e:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     510:	428b      	cmp	r3, r1
     512:	d801      	bhi.n	518 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     514:	1c04      	adds	r4, r0, #0
     516:	e7f8      	b.n	50a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     518:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     51a:	2cff      	cmp	r4, #255	; 0xff
     51c:	d801      	bhi.n	522 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     51e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     520:	2000      	movs	r0, #0
	}
}
     522:	bd10      	pop	{r4, pc}
     524:	0000      	movs	r0, r0
	...

00000528 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     528:	b5f0      	push	{r4, r5, r6, r7, lr}
     52a:	465f      	mov	r7, fp
     52c:	4656      	mov	r6, sl
     52e:	464d      	mov	r5, r9
     530:	4644      	mov	r4, r8
     532:	b4f0      	push	{r4, r5, r6, r7}
     534:	b087      	sub	sp, #28
     536:	1c06      	adds	r6, r0, #0
     538:	1c0d      	adds	r5, r1, #0
     53a:	9204      	str	r2, [sp, #16]
     53c:	aa10      	add	r2, sp, #64	; 0x40
     53e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     540:	1c32      	adds	r2, r6, #0
     542:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     544:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     546:	428a      	cmp	r2, r1
     548:	d900      	bls.n	54c <_sercom_get_async_baud_val+0x24>
     54a:	e0b3      	b.n	6b4 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     54c:	2b00      	cmp	r3, #0
     54e:	d14b      	bne.n	5e8 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     550:	2100      	movs	r1, #0
     552:	1c32      	adds	r2, r6, #0
     554:	4c5e      	ldr	r4, [pc, #376]	; (6d0 <_sercom_get_async_baud_val+0x1a8>)
     556:	47a0      	blx	r4
     558:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     55a:	1c2e      	adds	r6, r5, #0
     55c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     55e:	2000      	movs	r0, #0
     560:	2100      	movs	r1, #0
     562:	2200      	movs	r2, #0
     564:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     566:	243f      	movs	r4, #63	; 0x3f
     568:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     56a:	2501      	movs	r5, #1
     56c:	46a8      	mov	r8, r5
     56e:	9002      	str	r0, [sp, #8]
     570:	9103      	str	r1, [sp, #12]
     572:	4661      	mov	r1, ip
     574:	3920      	subs	r1, #32
     576:	d403      	bmi.n	580 <_sercom_get_async_baud_val+0x58>
     578:	4640      	mov	r0, r8
     57a:	4088      	lsls	r0, r1
     57c:	4681      	mov	r9, r0
     57e:	e005      	b.n	58c <_sercom_get_async_baud_val+0x64>
     580:	2120      	movs	r1, #32
     582:	4665      	mov	r5, ip
     584:	1b4c      	subs	r4, r1, r5
     586:	4640      	mov	r0, r8
     588:	40e0      	lsrs	r0, r4
     58a:	4681      	mov	r9, r0
     58c:	4641      	mov	r1, r8
     58e:	4664      	mov	r4, ip
     590:	40a1      	lsls	r1, r4
     592:	468a      	mov	sl, r1

		r = r << 1;
     594:	1c10      	adds	r0, r2, #0
     596:	1c19      	adds	r1, r3, #0
     598:	1880      	adds	r0, r0, r2
     59a:	4159      	adcs	r1, r3
     59c:	1c02      	adds	r2, r0, #0
     59e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     5a0:	465d      	mov	r5, fp
     5a2:	464c      	mov	r4, r9
     5a4:	4225      	tst	r5, r4
     5a6:	d002      	beq.n	5ae <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     5a8:	4642      	mov	r2, r8
     5aa:	4302      	orrs	r2, r0
     5ac:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     5ae:	429f      	cmp	r7, r3
     5b0:	d80c      	bhi.n	5cc <_sercom_get_async_baud_val+0xa4>
     5b2:	d101      	bne.n	5b8 <_sercom_get_async_baud_val+0x90>
     5b4:	4296      	cmp	r6, r2
     5b6:	d809      	bhi.n	5cc <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     5b8:	1b92      	subs	r2, r2, r6
     5ba:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     5bc:	4650      	mov	r0, sl
     5be:	9d02      	ldr	r5, [sp, #8]
     5c0:	4328      	orrs	r0, r5
     5c2:	4649      	mov	r1, r9
     5c4:	9c03      	ldr	r4, [sp, #12]
     5c6:	4321      	orrs	r1, r4
     5c8:	9002      	str	r0, [sp, #8]
     5ca:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     5cc:	4665      	mov	r5, ip
     5ce:	3d01      	subs	r5, #1
     5d0:	46ac      	mov	ip, r5
     5d2:	d2ce      	bcs.n	572 <_sercom_get_async_baud_val+0x4a>
     5d4:	9802      	ldr	r0, [sp, #8]
     5d6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5d8:	4b3c      	ldr	r3, [pc, #240]	; (6cc <_sercom_get_async_baud_val+0x1a4>)
     5da:	4a3b      	ldr	r2, [pc, #236]	; (6c8 <_sercom_get_async_baud_val+0x1a0>)
     5dc:	1a12      	subs	r2, r2, r0
     5de:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     5e0:	0c12      	lsrs	r2, r2, #16
     5e2:	041b      	lsls	r3, r3, #16
     5e4:	431a      	orrs	r2, r3
     5e6:	e062      	b.n	6ae <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     5e8:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5ea:	2b01      	cmp	r3, #1
     5ec:	d15f      	bne.n	6ae <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     5ee:	0f4f      	lsrs	r7, r1, #29
     5f0:	46b9      	mov	r9, r7
     5f2:	00cd      	lsls	r5, r1, #3
     5f4:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     5f6:	2100      	movs	r1, #0
     5f8:	1c32      	adds	r2, r6, #0
     5fa:	2300      	movs	r3, #0
     5fc:	4c34      	ldr	r4, [pc, #208]	; (6d0 <_sercom_get_async_baud_val+0x1a8>)
     5fe:	47a0      	blx	r4
     600:	1c06      	adds	r6, r0, #0
     602:	1c0f      	adds	r7, r1, #0
     604:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     606:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     608:	9602      	str	r6, [sp, #8]
     60a:	9703      	str	r7, [sp, #12]
     60c:	469a      	mov	sl, r3
     60e:	4650      	mov	r0, sl
     610:	b2c0      	uxtb	r0, r0
     612:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     614:	2100      	movs	r1, #0
     616:	4688      	mov	r8, r1
     618:	2200      	movs	r2, #0
     61a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     61c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     61e:	1c27      	adds	r7, r4, #0
     620:	3f20      	subs	r7, #32
     622:	d403      	bmi.n	62c <_sercom_get_async_baud_val+0x104>
     624:	1c2e      	adds	r6, r5, #0
     626:	40be      	lsls	r6, r7
     628:	9601      	str	r6, [sp, #4]
     62a:	e004      	b.n	636 <_sercom_get_async_baud_val+0x10e>
     62c:	2020      	movs	r0, #32
     62e:	1b07      	subs	r7, r0, r4
     630:	1c29      	adds	r1, r5, #0
     632:	40f9      	lsrs	r1, r7
     634:	9101      	str	r1, [sp, #4]
     636:	1c2e      	adds	r6, r5, #0
     638:	40a6      	lsls	r6, r4
     63a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     63c:	1c10      	adds	r0, r2, #0
     63e:	1c19      	adds	r1, r3, #0
     640:	1880      	adds	r0, r0, r2
     642:	4159      	adcs	r1, r3
     644:	1c02      	adds	r2, r0, #0
     646:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     648:	465f      	mov	r7, fp
     64a:	4037      	ands	r7, r6
     64c:	46bc      	mov	ip, r7
     64e:	9e01      	ldr	r6, [sp, #4]
     650:	464f      	mov	r7, r9
     652:	403e      	ands	r6, r7
     654:	4667      	mov	r7, ip
     656:	433e      	orrs	r6, r7
     658:	d002      	beq.n	660 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     65a:	1c2a      	adds	r2, r5, #0
     65c:	4302      	orrs	r2, r0
     65e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     660:	9803      	ldr	r0, [sp, #12]
     662:	4298      	cmp	r0, r3
     664:	d80b      	bhi.n	67e <_sercom_get_async_baud_val+0x156>
     666:	d102      	bne.n	66e <_sercom_get_async_baud_val+0x146>
     668:	9902      	ldr	r1, [sp, #8]
     66a:	4291      	cmp	r1, r2
     66c:	d807      	bhi.n	67e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     66e:	9e02      	ldr	r6, [sp, #8]
     670:	9f03      	ldr	r7, [sp, #12]
     672:	1b92      	subs	r2, r2, r6
     674:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     676:	4647      	mov	r7, r8
     678:	9800      	ldr	r0, [sp, #0]
     67a:	4307      	orrs	r7, r0
     67c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     67e:	3c01      	subs	r4, #1
     680:	d2cd      	bcs.n	61e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     682:	4641      	mov	r1, r8
     684:	4652      	mov	r2, sl
     686:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     688:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     68a:	4c12      	ldr	r4, [pc, #72]	; (6d4 <_sercom_get_async_baud_val+0x1ac>)
     68c:	42a3      	cmp	r3, r4
     68e:	d908      	bls.n	6a2 <_sercom_get_async_baud_val+0x17a>
     690:	9a05      	ldr	r2, [sp, #20]
     692:	3201      	adds	r2, #1
     694:	b2d2      	uxtb	r2, r2
     696:	9205      	str	r2, [sp, #20]
     698:	2601      	movs	r6, #1
     69a:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     69c:	4657      	mov	r7, sl
     69e:	2f08      	cmp	r7, #8
     6a0:	d1b5      	bne.n	60e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6a2:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     6a4:	9805      	ldr	r0, [sp, #20]
     6a6:	2808      	cmp	r0, #8
     6a8:	d004      	beq.n	6b4 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     6aa:	0342      	lsls	r2, r0, #13
     6ac:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     6ae:	9c04      	ldr	r4, [sp, #16]
     6b0:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     6b2:	2400      	movs	r4, #0
}
     6b4:	1c20      	adds	r0, r4, #0
     6b6:	b007      	add	sp, #28
     6b8:	bc3c      	pop	{r2, r3, r4, r5}
     6ba:	4690      	mov	r8, r2
     6bc:	4699      	mov	r9, r3
     6be:	46a2      	mov	sl, r4
     6c0:	46ab      	mov	fp, r5
     6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	00000000 	.word	0x00000000
     6cc:	00000001 	.word	0x00000001
     6d0:	000049ed 	.word	0x000049ed
     6d4:	00001fff 	.word	0x00001fff

000006d8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6d8:	b510      	push	{r4, lr}
     6da:	b082      	sub	sp, #8
     6dc:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     6de:	4b0f      	ldr	r3, [pc, #60]	; (71c <sercom_set_gclk_generator+0x44>)
     6e0:	781b      	ldrb	r3, [r3, #0]
     6e2:	2b00      	cmp	r3, #0
     6e4:	d001      	beq.n	6ea <sercom_set_gclk_generator+0x12>
     6e6:	2900      	cmp	r1, #0
     6e8:	d00d      	beq.n	706 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     6ea:	a901      	add	r1, sp, #4
     6ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6ee:	2013      	movs	r0, #19
     6f0:	4b0b      	ldr	r3, [pc, #44]	; (720 <sercom_set_gclk_generator+0x48>)
     6f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6f4:	2013      	movs	r0, #19
     6f6:	4b0b      	ldr	r3, [pc, #44]	; (724 <sercom_set_gclk_generator+0x4c>)
     6f8:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     6fa:	4b08      	ldr	r3, [pc, #32]	; (71c <sercom_set_gclk_generator+0x44>)
     6fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6fe:	2201      	movs	r2, #1
     700:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     702:	2000      	movs	r0, #0
     704:	e007      	b.n	716 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <sercom_set_gclk_generator+0x44>)
     708:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     70a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     70c:	1b14      	subs	r4, r2, r4
     70e:	1e62      	subs	r2, r4, #1
     710:	4194      	sbcs	r4, r2
     712:	4264      	negs	r4, r4
     714:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     716:	b002      	add	sp, #8
     718:	bd10      	pop	{r4, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	20000094 	.word	0x20000094
     720:	000019a5 	.word	0x000019a5
     724:	00001919 	.word	0x00001919

00000728 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     728:	4b44      	ldr	r3, [pc, #272]	; (83c <_sercom_get_default_pad+0x114>)
     72a:	4298      	cmp	r0, r3
     72c:	d033      	beq.n	796 <_sercom_get_default_pad+0x6e>
     72e:	d806      	bhi.n	73e <_sercom_get_default_pad+0x16>
     730:	4b43      	ldr	r3, [pc, #268]	; (840 <_sercom_get_default_pad+0x118>)
     732:	4298      	cmp	r0, r3
     734:	d00d      	beq.n	752 <_sercom_get_default_pad+0x2a>
     736:	4b43      	ldr	r3, [pc, #268]	; (844 <_sercom_get_default_pad+0x11c>)
     738:	4298      	cmp	r0, r3
     73a:	d01b      	beq.n	774 <_sercom_get_default_pad+0x4c>
     73c:	e06f      	b.n	81e <_sercom_get_default_pad+0xf6>
     73e:	4b42      	ldr	r3, [pc, #264]	; (848 <_sercom_get_default_pad+0x120>)
     740:	4298      	cmp	r0, r3
     742:	d04a      	beq.n	7da <_sercom_get_default_pad+0xb2>
     744:	4b41      	ldr	r3, [pc, #260]	; (84c <_sercom_get_default_pad+0x124>)
     746:	4298      	cmp	r0, r3
     748:	d058      	beq.n	7fc <_sercom_get_default_pad+0xd4>
     74a:	4b41      	ldr	r3, [pc, #260]	; (850 <_sercom_get_default_pad+0x128>)
     74c:	4298      	cmp	r0, r3
     74e:	d166      	bne.n	81e <_sercom_get_default_pad+0xf6>
     750:	e032      	b.n	7b8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     752:	2901      	cmp	r1, #1
     754:	d065      	beq.n	822 <_sercom_get_default_pad+0xfa>
     756:	2900      	cmp	r1, #0
     758:	d004      	beq.n	764 <_sercom_get_default_pad+0x3c>
     75a:	2902      	cmp	r1, #2
     75c:	d006      	beq.n	76c <_sercom_get_default_pad+0x44>
     75e:	2903      	cmp	r1, #3
     760:	d006      	beq.n	770 <_sercom_get_default_pad+0x48>
     762:	e001      	b.n	768 <_sercom_get_default_pad+0x40>
     764:	483b      	ldr	r0, [pc, #236]	; (854 <_sercom_get_default_pad+0x12c>)
     766:	e067      	b.n	838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     768:	2000      	movs	r0, #0
     76a:	e065      	b.n	838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     76c:	483a      	ldr	r0, [pc, #232]	; (858 <_sercom_get_default_pad+0x130>)
     76e:	e063      	b.n	838 <_sercom_get_default_pad+0x110>
     770:	483a      	ldr	r0, [pc, #232]	; (85c <_sercom_get_default_pad+0x134>)
     772:	e061      	b.n	838 <_sercom_get_default_pad+0x110>
     774:	2901      	cmp	r1, #1
     776:	d056      	beq.n	826 <_sercom_get_default_pad+0xfe>
     778:	2900      	cmp	r1, #0
     77a:	d004      	beq.n	786 <_sercom_get_default_pad+0x5e>
     77c:	2902      	cmp	r1, #2
     77e:	d006      	beq.n	78e <_sercom_get_default_pad+0x66>
     780:	2903      	cmp	r1, #3
     782:	d006      	beq.n	792 <_sercom_get_default_pad+0x6a>
     784:	e001      	b.n	78a <_sercom_get_default_pad+0x62>
     786:	2003      	movs	r0, #3
     788:	e056      	b.n	838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     78a:	2000      	movs	r0, #0
     78c:	e054      	b.n	838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     78e:	4834      	ldr	r0, [pc, #208]	; (860 <_sercom_get_default_pad+0x138>)
     790:	e052      	b.n	838 <_sercom_get_default_pad+0x110>
     792:	4834      	ldr	r0, [pc, #208]	; (864 <_sercom_get_default_pad+0x13c>)
     794:	e050      	b.n	838 <_sercom_get_default_pad+0x110>
     796:	2901      	cmp	r1, #1
     798:	d047      	beq.n	82a <_sercom_get_default_pad+0x102>
     79a:	2900      	cmp	r1, #0
     79c:	d004      	beq.n	7a8 <_sercom_get_default_pad+0x80>
     79e:	2902      	cmp	r1, #2
     7a0:	d006      	beq.n	7b0 <_sercom_get_default_pad+0x88>
     7a2:	2903      	cmp	r1, #3
     7a4:	d006      	beq.n	7b4 <_sercom_get_default_pad+0x8c>
     7a6:	e001      	b.n	7ac <_sercom_get_default_pad+0x84>
     7a8:	482f      	ldr	r0, [pc, #188]	; (868 <_sercom_get_default_pad+0x140>)
     7aa:	e045      	b.n	838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7ac:	2000      	movs	r0, #0
     7ae:	e043      	b.n	838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7b0:	482e      	ldr	r0, [pc, #184]	; (86c <_sercom_get_default_pad+0x144>)
     7b2:	e041      	b.n	838 <_sercom_get_default_pad+0x110>
     7b4:	482e      	ldr	r0, [pc, #184]	; (870 <_sercom_get_default_pad+0x148>)
     7b6:	e03f      	b.n	838 <_sercom_get_default_pad+0x110>
     7b8:	2901      	cmp	r1, #1
     7ba:	d038      	beq.n	82e <_sercom_get_default_pad+0x106>
     7bc:	2900      	cmp	r1, #0
     7be:	d004      	beq.n	7ca <_sercom_get_default_pad+0xa2>
     7c0:	2902      	cmp	r1, #2
     7c2:	d006      	beq.n	7d2 <_sercom_get_default_pad+0xaa>
     7c4:	2903      	cmp	r1, #3
     7c6:	d006      	beq.n	7d6 <_sercom_get_default_pad+0xae>
     7c8:	e001      	b.n	7ce <_sercom_get_default_pad+0xa6>
     7ca:	482a      	ldr	r0, [pc, #168]	; (874 <_sercom_get_default_pad+0x14c>)
     7cc:	e034      	b.n	838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7ce:	2000      	movs	r0, #0
     7d0:	e032      	b.n	838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7d2:	4829      	ldr	r0, [pc, #164]	; (878 <_sercom_get_default_pad+0x150>)
     7d4:	e030      	b.n	838 <_sercom_get_default_pad+0x110>
     7d6:	4829      	ldr	r0, [pc, #164]	; (87c <_sercom_get_default_pad+0x154>)
     7d8:	e02e      	b.n	838 <_sercom_get_default_pad+0x110>
     7da:	2901      	cmp	r1, #1
     7dc:	d029      	beq.n	832 <_sercom_get_default_pad+0x10a>
     7de:	2900      	cmp	r1, #0
     7e0:	d004      	beq.n	7ec <_sercom_get_default_pad+0xc4>
     7e2:	2902      	cmp	r1, #2
     7e4:	d006      	beq.n	7f4 <_sercom_get_default_pad+0xcc>
     7e6:	2903      	cmp	r1, #3
     7e8:	d006      	beq.n	7f8 <_sercom_get_default_pad+0xd0>
     7ea:	e001      	b.n	7f0 <_sercom_get_default_pad+0xc8>
     7ec:	4824      	ldr	r0, [pc, #144]	; (880 <_sercom_get_default_pad+0x158>)
     7ee:	e023      	b.n	838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7f0:	2000      	movs	r0, #0
     7f2:	e021      	b.n	838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7f4:	4823      	ldr	r0, [pc, #140]	; (884 <_sercom_get_default_pad+0x15c>)
     7f6:	e01f      	b.n	838 <_sercom_get_default_pad+0x110>
     7f8:	4823      	ldr	r0, [pc, #140]	; (888 <_sercom_get_default_pad+0x160>)
     7fa:	e01d      	b.n	838 <_sercom_get_default_pad+0x110>
     7fc:	2901      	cmp	r1, #1
     7fe:	d01a      	beq.n	836 <_sercom_get_default_pad+0x10e>
     800:	2900      	cmp	r1, #0
     802:	d004      	beq.n	80e <_sercom_get_default_pad+0xe6>
     804:	2902      	cmp	r1, #2
     806:	d006      	beq.n	816 <_sercom_get_default_pad+0xee>
     808:	2903      	cmp	r1, #3
     80a:	d006      	beq.n	81a <_sercom_get_default_pad+0xf2>
     80c:	e001      	b.n	812 <_sercom_get_default_pad+0xea>
     80e:	481f      	ldr	r0, [pc, #124]	; (88c <_sercom_get_default_pad+0x164>)
     810:	e012      	b.n	838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     812:	2000      	movs	r0, #0
     814:	e010      	b.n	838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     816:	481e      	ldr	r0, [pc, #120]	; (890 <_sercom_get_default_pad+0x168>)
     818:	e00e      	b.n	838 <_sercom_get_default_pad+0x110>
     81a:	481e      	ldr	r0, [pc, #120]	; (894 <_sercom_get_default_pad+0x16c>)
     81c:	e00c      	b.n	838 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     81e:	2000      	movs	r0, #0
     820:	e00a      	b.n	838 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     822:	481d      	ldr	r0, [pc, #116]	; (898 <_sercom_get_default_pad+0x170>)
     824:	e008      	b.n	838 <_sercom_get_default_pad+0x110>
     826:	481d      	ldr	r0, [pc, #116]	; (89c <_sercom_get_default_pad+0x174>)
     828:	e006      	b.n	838 <_sercom_get_default_pad+0x110>
     82a:	481d      	ldr	r0, [pc, #116]	; (8a0 <_sercom_get_default_pad+0x178>)
     82c:	e004      	b.n	838 <_sercom_get_default_pad+0x110>
     82e:	481d      	ldr	r0, [pc, #116]	; (8a4 <_sercom_get_default_pad+0x17c>)
     830:	e002      	b.n	838 <_sercom_get_default_pad+0x110>
     832:	481d      	ldr	r0, [pc, #116]	; (8a8 <_sercom_get_default_pad+0x180>)
     834:	e000      	b.n	838 <_sercom_get_default_pad+0x110>
     836:	481d      	ldr	r0, [pc, #116]	; (8ac <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     838:	4770      	bx	lr
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	42001000 	.word	0x42001000
     840:	42000800 	.word	0x42000800
     844:	42000c00 	.word	0x42000c00
     848:	42001800 	.word	0x42001800
     84c:	42001c00 	.word	0x42001c00
     850:	42001400 	.word	0x42001400
     854:	00040003 	.word	0x00040003
     858:	00060003 	.word	0x00060003
     85c:	00070003 	.word	0x00070003
     860:	001e0003 	.word	0x001e0003
     864:	001f0003 	.word	0x001f0003
     868:	000c0002 	.word	0x000c0002
     86c:	000e0002 	.word	0x000e0002
     870:	000f0002 	.word	0x000f0002
     874:	00100003 	.word	0x00100003
     878:	00120003 	.word	0x00120003
     87c:	00130003 	.word	0x00130003
     880:	00530005 	.word	0x00530005
     884:	003e0005 	.word	0x003e0005
     888:	00520005 	.word	0x00520005
     88c:	00160003 	.word	0x00160003
     890:	00180003 	.word	0x00180003
     894:	00190003 	.word	0x00190003
     898:	00050003 	.word	0x00050003
     89c:	00010003 	.word	0x00010003
     8a0:	000d0002 	.word	0x000d0002
     8a4:	00110003 	.word	0x00110003
     8a8:	003f0005 	.word	0x003f0005
     8ac:	00170003 	.word	0x00170003

000008b0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8b0:	b570      	push	{r4, r5, r6, lr}
     8b2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8b4:	4a0c      	ldr	r2, [pc, #48]	; (8e8 <_sercom_get_sercom_inst_index+0x38>)
     8b6:	466b      	mov	r3, sp
     8b8:	ca70      	ldmia	r2!, {r4, r5, r6}
     8ba:	c370      	stmia	r3!, {r4, r5, r6}
     8bc:	ca32      	ldmia	r2!, {r1, r4, r5}
     8be:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8c0:	9e00      	ldr	r6, [sp, #0]
     8c2:	4286      	cmp	r6, r0
     8c4:	d006      	beq.n	8d4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8c6:	2301      	movs	r3, #1
     8c8:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8ca:	4669      	mov	r1, sp
     8cc:	5852      	ldr	r2, [r2, r1]
     8ce:	4282      	cmp	r2, r0
     8d0:	d103      	bne.n	8da <_sercom_get_sercom_inst_index+0x2a>
     8d2:	e000      	b.n	8d6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8d4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     8d6:	b2d8      	uxtb	r0, r3
     8d8:	e003      	b.n	8e2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8da:	3301      	adds	r3, #1
     8dc:	2b06      	cmp	r3, #6
     8de:	d1f3      	bne.n	8c8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     8e0:	2000      	movs	r0, #0
}
     8e2:	b006      	add	sp, #24
     8e4:	bd70      	pop	{r4, r5, r6, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	00005a20 	.word	0x00005a20

000008ec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     8ec:	4770      	bx	lr
     8ee:	46c0      	nop			; (mov r8, r8)

000008f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     8f2:	4b0a      	ldr	r3, [pc, #40]	; (91c <_sercom_set_handler+0x2c>)
     8f4:	781b      	ldrb	r3, [r3, #0]
     8f6:	2b00      	cmp	r3, #0
     8f8:	d10c      	bne.n	914 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8fa:	4f09      	ldr	r7, [pc, #36]	; (920 <_sercom_set_handler+0x30>)
     8fc:	4e09      	ldr	r6, [pc, #36]	; (924 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     8fe:	4d0a      	ldr	r5, [pc, #40]	; (928 <_sercom_set_handler+0x38>)
     900:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     902:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     904:	195a      	adds	r2, r3, r5
     906:	6014      	str	r4, [r2, #0]
     908:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     90a:	2b18      	cmp	r3, #24
     90c:	d1f9      	bne.n	902 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     90e:	2201      	movs	r2, #1
     910:	4b02      	ldr	r3, [pc, #8]	; (91c <_sercom_set_handler+0x2c>)
     912:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     914:	0080      	lsls	r0, r0, #2
     916:	4b02      	ldr	r3, [pc, #8]	; (920 <_sercom_set_handler+0x30>)
     918:	50c1      	str	r1, [r0, r3]
}
     91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     91c:	20000098 	.word	0x20000098
     920:	2000009c 	.word	0x2000009c
     924:	000008ed 	.word	0x000008ed
     928:	200008bc 	.word	0x200008bc

0000092c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     92c:	b510      	push	{r4, lr}
     92e:	b082      	sub	sp, #8
     930:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     932:	4668      	mov	r0, sp
     934:	4905      	ldr	r1, [pc, #20]	; (94c <_sercom_get_interrupt_vector+0x20>)
     936:	2206      	movs	r2, #6
     938:	4b05      	ldr	r3, [pc, #20]	; (950 <_sercom_get_interrupt_vector+0x24>)
     93a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     93c:	1c20      	adds	r0, r4, #0
     93e:	4b05      	ldr	r3, [pc, #20]	; (954 <_sercom_get_interrupt_vector+0x28>)
     940:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     942:	466b      	mov	r3, sp
     944:	5618      	ldrsb	r0, [r3, r0]
}
     946:	b002      	add	sp, #8
     948:	bd10      	pop	{r4, pc}
     94a:	46c0      	nop			; (mov r8, r8)
     94c:	00005a38 	.word	0x00005a38
     950:	00004a7d 	.word	0x00004a7d
     954:	000008b1 	.word	0x000008b1

00000958 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     958:	b508      	push	{r3, lr}
     95a:	4b02      	ldr	r3, [pc, #8]	; (964 <SERCOM0_Handler+0xc>)
     95c:	681b      	ldr	r3, [r3, #0]
     95e:	2000      	movs	r0, #0
     960:	4798      	blx	r3
     962:	bd08      	pop	{r3, pc}
     964:	2000009c 	.word	0x2000009c

00000968 <SERCOM1_Handler>:
     968:	b508      	push	{r3, lr}
     96a:	4b02      	ldr	r3, [pc, #8]	; (974 <SERCOM1_Handler+0xc>)
     96c:	685b      	ldr	r3, [r3, #4]
     96e:	2001      	movs	r0, #1
     970:	4798      	blx	r3
     972:	bd08      	pop	{r3, pc}
     974:	2000009c 	.word	0x2000009c

00000978 <SERCOM2_Handler>:
     978:	b508      	push	{r3, lr}
     97a:	4b02      	ldr	r3, [pc, #8]	; (984 <SERCOM2_Handler+0xc>)
     97c:	689b      	ldr	r3, [r3, #8]
     97e:	2002      	movs	r0, #2
     980:	4798      	blx	r3
     982:	bd08      	pop	{r3, pc}
     984:	2000009c 	.word	0x2000009c

00000988 <SERCOM3_Handler>:
     988:	b508      	push	{r3, lr}
     98a:	4b02      	ldr	r3, [pc, #8]	; (994 <SERCOM3_Handler+0xc>)
     98c:	68db      	ldr	r3, [r3, #12]
     98e:	2003      	movs	r0, #3
     990:	4798      	blx	r3
     992:	bd08      	pop	{r3, pc}
     994:	2000009c 	.word	0x2000009c

00000998 <SERCOM4_Handler>:
     998:	b508      	push	{r3, lr}
     99a:	4b02      	ldr	r3, [pc, #8]	; (9a4 <SERCOM4_Handler+0xc>)
     99c:	691b      	ldr	r3, [r3, #16]
     99e:	2004      	movs	r0, #4
     9a0:	4798      	blx	r3
     9a2:	bd08      	pop	{r3, pc}
     9a4:	2000009c 	.word	0x2000009c

000009a8 <SERCOM5_Handler>:
     9a8:	b508      	push	{r3, lr}
     9aa:	4b02      	ldr	r3, [pc, #8]	; (9b4 <SERCOM5_Handler+0xc>)
     9ac:	695b      	ldr	r3, [r3, #20]
     9ae:	2005      	movs	r0, #5
     9b0:	4798      	blx	r3
     9b2:	bd08      	pop	{r3, pc}
     9b4:	2000009c 	.word	0x2000009c

000009b8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ba:	465f      	mov	r7, fp
     9bc:	4656      	mov	r6, sl
     9be:	464d      	mov	r5, r9
     9c0:	4644      	mov	r4, r8
     9c2:	b4f0      	push	{r4, r5, r6, r7}
     9c4:	b089      	sub	sp, #36	; 0x24
     9c6:	1c07      	adds	r7, r0, #0
     9c8:	1c0d      	adds	r5, r1, #0
     9ca:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     9cc:	6039      	str	r1, [r7, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     9ce:	680b      	ldr	r3, [r1, #0]
     9d0:	0798      	lsls	r0, r3, #30
     9d2:	d400      	bmi.n	9d6 <spi_init+0x1e>
     9d4:	e08d      	b.n	af2 <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     9d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
     9d8:	9103      	str	r1, [sp, #12]
     9da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     9dc:	9204      	str	r2, [sp, #16]
     9de:	6b23      	ldr	r3, [r4, #48]	; 0x30
     9e0:	9305      	str	r3, [sp, #20]
     9e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
     9e4:	9006      	str	r0, [sp, #24]
     9e6:	2600      	movs	r6, #0

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9e8:	46b1      	mov	r9, r6
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     9ea:	221f      	movs	r2, #31
     9ec:	4690      	mov	r8, r2
     9ee:	b2f1      	uxtb	r1, r6
     9f0:	00b3      	lsls	r3, r6, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9f2:	aa03      	add	r2, sp, #12
     9f4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     9f6:	2800      	cmp	r0, #0
     9f8:	d102      	bne.n	a00 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9fa:	1c28      	adds	r0, r5, #0
     9fc:	4b8f      	ldr	r3, [pc, #572]	; (c3c <spi_init+0x284>)
     9fe:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     a00:	1c41      	adds	r1, r0, #1
     a02:	d029      	beq.n	a58 <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     a04:	0402      	lsls	r2, r0, #16
     a06:	0c12      	lsrs	r2, r2, #16
     a08:	4694      	mov	ip, r2
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     a0a:	0c03      	lsrs	r3, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a0c:	b2da      	uxtb	r2, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a0e:	4649      	mov	r1, r9
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a10:	0618      	lsls	r0, r3, #24
     a12:	d403      	bmi.n	a1c <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     a14:	0951      	lsrs	r1, r2, #5
     a16:	01c9      	lsls	r1, r1, #7
     a18:	4b89      	ldr	r3, [pc, #548]	; (c40 <spi_init+0x288>)
     a1a:	18c9      	adds	r1, r1, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     a1c:	4640      	mov	r0, r8
     a1e:	4010      	ands	r0, r2

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     a20:	180b      	adds	r3, r1, r0
     a22:	3340      	adds	r3, #64	; 0x40
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	469a      	mov	sl, r3
		return SYSTEM_PINMUX_GPIO;
     a28:	2380      	movs	r3, #128	; 0x80
     a2a:	469b      	mov	fp, r3
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     a2c:	4653      	mov	r3, sl
     a2e:	07db      	lsls	r3, r3, #31
     a30:	d50c      	bpl.n	a4c <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     a32:	0840      	lsrs	r0, r0, #1
     a34:	1809      	adds	r1, r1, r0
     a36:	3130      	adds	r1, #48	; 0x30
     a38:	780b      	ldrb	r3, [r1, #0]
     a3a:	b2db      	uxtb	r3, r3

	if (pin_index & 1) {
     a3c:	07d0      	lsls	r0, r2, #31
     a3e:	d502      	bpl.n	a46 <spi_init+0x8e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     a40:	091b      	lsrs	r3, r3, #4
     a42:	469b      	mov	fp, r3
     a44:	e002      	b.n	a4c <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     a46:	220f      	movs	r2, #15
     a48:	4013      	ands	r3, r2
     a4a:	469b      	mov	fp, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     a4c:	45dc      	cmp	ip, fp
     a4e:	d003      	beq.n	a58 <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     a50:	2300      	movs	r3, #0
     a52:	603b      	str	r3, [r7, #0]
			return STATUS_ERR_DENIED;
     a54:	201c      	movs	r0, #28
     a56:	e0ea      	b.n	c2e <spi_init+0x276>
     a58:	3601      	adds	r6, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a5a:	2e04      	cmp	r6, #4
     a5c:	d1c7      	bne.n	9ee <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     a5e:	2013      	movs	r0, #19
     a60:	4b78      	ldr	r3, [pc, #480]	; (c44 <spi_init+0x28c>)
     a62:	4798      	blx	r3
     a64:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a66:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     a68:	2600      	movs	r6, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a6a:	2b01      	cmp	r3, #1
     a6c:	d111      	bne.n	a92 <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
     a6e:	69a0      	ldr	r0, [r4, #24]
     a70:	aa02      	add	r2, sp, #8
     a72:	4b75      	ldr	r3, [pc, #468]	; (c48 <spi_init+0x290>)
     a74:	4798      	blx	r3
     a76:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     a78:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     a7a:	2b00      	cmp	r3, #0
     a7c:	d000      	beq.n	a80 <spi_init+0xc8>
     a7e:	e0d6      	b.n	c2e <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a80:	7b2b      	ldrb	r3, [r5, #12]
     a82:	b2db      	uxtb	r3, r3
     a84:	aa02      	add	r2, sp, #8
     a86:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     a88:	201c      	movs	r0, #28
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a8a:	429a      	cmp	r2, r3
     a8c:	d000      	beq.n	a90 <spi_init+0xd8>
     a8e:	e0ce      	b.n	c2e <spi_init+0x276>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     a90:	260c      	movs	r6, #12
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     a92:	68a2      	ldr	r2, [r4, #8]
     a94:	6861      	ldr	r1, [r4, #4]
     a96:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     a98:	68e3      	ldr	r3, [r4, #12]
     a9a:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a9c:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a9e:	7c23      	ldrb	r3, [r4, #16]

	if (config->run_in_standby) {
     aa0:	7c61      	ldrb	r1, [r4, #17]
     aa2:	2900      	cmp	r1, #0
     aa4:	d001      	beq.n	aaa <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     aa6:	2180      	movs	r1, #128	; 0x80
     aa8:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     aaa:	7ca1      	ldrb	r1, [r4, #18]
     aac:	2900      	cmp	r1, #0
     aae:	d002      	beq.n	ab6 <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     ab0:	2180      	movs	r1, #128	; 0x80
     ab2:	0289      	lsls	r1, r1, #10
     ab4:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     ab6:	7ce1      	ldrb	r1, [r4, #19]
     ab8:	2900      	cmp	r1, #0
     aba:	d002      	beq.n	ac2 <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     abc:	2180      	movs	r1, #128	; 0x80
     abe:	0089      	lsls	r1, r1, #2
     ac0:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     ac2:	7d21      	ldrb	r1, [r4, #20]
     ac4:	2900      	cmp	r1, #0
     ac6:	d002      	beq.n	ace <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     ac8:	2180      	movs	r1, #128	; 0x80
     aca:	0189      	lsls	r1, r1, #6
     acc:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     ace:	6829      	ldr	r1, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     ad0:	2002      	movs	r0, #2
     ad2:	4302      	orrs	r2, r0

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     ad4:	428a      	cmp	r2, r1
     ad6:	d108      	bne.n	aea <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
     ad8:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     ada:	429a      	cmp	r2, r3
     adc:	d105      	bne.n	aea <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     ade:	7823      	ldrb	r3, [r4, #0]
     ae0:	717b      	strb	r3, [r7, #5]
		module->character_size = config->character_size;
     ae2:	7c23      	ldrb	r3, [r4, #16]
     ae4:	71bb      	strb	r3, [r7, #6]
		return STATUS_OK;
     ae6:	2000      	movs	r0, #0
     ae8:	e0a1      	b.n	c2e <spi_init+0x276>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     aea:	2300      	movs	r3, #0
     aec:	603b      	str	r3, [r7, #0]

	return STATUS_ERR_DENIED;
     aee:	201c      	movs	r0, #28
     af0:	e09d      	b.n	c2e <spi_init+0x276>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     af2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     af4:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     af6:	07d9      	lsls	r1, r3, #31
     af8:	d500      	bpl.n	afc <spi_init+0x144>
     afa:	e098      	b.n	c2e <spi_init+0x276>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     afc:	1c28      	adds	r0, r5, #0
     afe:	4b53      	ldr	r3, [pc, #332]	; (c4c <spi_init+0x294>)
     b00:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b02:	4b53      	ldr	r3, [pc, #332]	; (c50 <spi_init+0x298>)
     b04:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b06:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b08:	2601      	movs	r6, #1
     b0a:	4096      	lsls	r6, r2
     b0c:	1c32      	adds	r2, r6, #0
     b0e:	430a      	orrs	r2, r1
     b10:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     b12:	a907      	add	r1, sp, #28
     b14:	2624      	movs	r6, #36	; 0x24
     b16:	5da3      	ldrb	r3, [r4, r6]
     b18:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b1a:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b1c:	b2c0      	uxtb	r0, r0
     b1e:	4680      	mov	r8, r0
     b20:	4b4c      	ldr	r3, [pc, #304]	; (c54 <spi_init+0x29c>)
     b22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b24:	4640      	mov	r0, r8
     b26:	4b4c      	ldr	r3, [pc, #304]	; (c58 <spi_init+0x2a0>)
     b28:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b2a:	5da0      	ldrb	r0, [r4, r6]
     b2c:	2100      	movs	r1, #0
     b2e:	4b4b      	ldr	r3, [pc, #300]	; (c5c <spi_init+0x2a4>)
     b30:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     b32:	7823      	ldrb	r3, [r4, #0]
     b34:	2b01      	cmp	r3, #1
     b36:	d103      	bne.n	b40 <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b38:	682a      	ldr	r2, [r5, #0]
     b3a:	230c      	movs	r3, #12
     b3c:	4313      	orrs	r3, r2
     b3e:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b40:	683e      	ldr	r6, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b42:	ab02      	add	r3, sp, #8
     b44:	2280      	movs	r2, #128	; 0x80
     b46:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b48:	2200      	movs	r2, #0
     b4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b4c:	2101      	movs	r1, #1
     b4e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     b50:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     b52:	7823      	ldrb	r3, [r4, #0]
     b54:	2b00      	cmp	r3, #0
     b56:	d101      	bne.n	b5c <spi_init+0x1a4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b58:	ab02      	add	r3, sp, #8
     b5a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     b5e:	9203      	str	r2, [sp, #12]
     b60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b62:	9304      	str	r3, [sp, #16]
     b64:	6b20      	ldr	r0, [r4, #48]	; 0x30
     b66:	9005      	str	r0, [sp, #20]
     b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
     b6a:	9106      	str	r1, [sp, #24]
     b6c:	2500      	movs	r5, #0
     b6e:	b2e9      	uxtb	r1, r5
     b70:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b72:	aa03      	add	r2, sp, #12
     b74:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     b76:	2800      	cmp	r0, #0
     b78:	d102      	bne.n	b80 <spi_init+0x1c8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b7a:	1c30      	adds	r0, r6, #0
     b7c:	4a2f      	ldr	r2, [pc, #188]	; (c3c <spi_init+0x284>)
     b7e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     b80:	1c43      	adds	r3, r0, #1
     b82:	d006      	beq.n	b92 <spi_init+0x1da>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b84:	4669      	mov	r1, sp
     b86:	7208      	strb	r0, [r1, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b88:	0c00      	lsrs	r0, r0, #16
     b8a:	b2c0      	uxtb	r0, r0
     b8c:	a902      	add	r1, sp, #8
     b8e:	4a34      	ldr	r2, [pc, #208]	; (c60 <spi_init+0x2a8>)
     b90:	4790      	blx	r2
     b92:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     b94:	2d04      	cmp	r5, #4
     b96:	d1ea      	bne.n	b6e <spi_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     b98:	7823      	ldrb	r3, [r4, #0]
     b9a:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     b9c:	7c23      	ldrb	r3, [r4, #16]
     b9e:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     ba0:	7ca3      	ldrb	r3, [r4, #18]
     ba2:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     ba4:	7d23      	ldrb	r3, [r4, #20]
     ba6:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     ba8:	2200      	movs	r2, #0
     baa:	466b      	mov	r3, sp
     bac:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     bae:	7823      	ldrb	r3, [r4, #0]
     bb0:	2b01      	cmp	r3, #1
     bb2:	d114      	bne.n	bde <spi_init+0x226>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bb4:	6838      	ldr	r0, [r7, #0]
     bb6:	4b25      	ldr	r3, [pc, #148]	; (c4c <spi_init+0x294>)
     bb8:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bba:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     bbc:	b2c0      	uxtb	r0, r0
     bbe:	4b21      	ldr	r3, [pc, #132]	; (c44 <spi_init+0x28c>)
     bc0:	4798      	blx	r3
     bc2:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     bc4:	69a0      	ldr	r0, [r4, #24]
     bc6:	466a      	mov	r2, sp
     bc8:	3206      	adds	r2, #6
     bca:	4b1f      	ldr	r3, [pc, #124]	; (c48 <spi_init+0x290>)
     bcc:	4798      	blx	r3
     bce:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     bd0:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     bd2:	2b00      	cmp	r3, #0
     bd4:	d12b      	bne.n	c2e <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     bd6:	466b      	mov	r3, sp
     bd8:	3306      	adds	r3, #6
     bda:	781b      	ldrb	r3, [r3, #0]
     bdc:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     bde:	68a2      	ldr	r2, [r4, #8]
     be0:	6863      	ldr	r3, [r4, #4]
     be2:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     be4:	68e0      	ldr	r0, [r4, #12]
     be6:	4302      	orrs	r2, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
     be8:	7c23      	ldrb	r3, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     bea:	7c61      	ldrb	r1, [r4, #17]
     bec:	2900      	cmp	r1, #0
     bee:	d103      	bne.n	bf8 <spi_init+0x240>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     bf0:	491c      	ldr	r1, [pc, #112]	; (c64 <spi_init+0x2ac>)
     bf2:	7889      	ldrb	r1, [r1, #2]
     bf4:	0788      	lsls	r0, r1, #30
     bf6:	d501      	bpl.n	bfc <spi_init+0x244>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     bf8:	2180      	movs	r1, #128	; 0x80
     bfa:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     bfc:	7ca1      	ldrb	r1, [r4, #18]
     bfe:	2900      	cmp	r1, #0
     c00:	d002      	beq.n	c08 <spi_init+0x250>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c02:	2180      	movs	r1, #128	; 0x80
     c04:	0289      	lsls	r1, r1, #10
     c06:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     c08:	7ce1      	ldrb	r1, [r4, #19]
     c0a:	2900      	cmp	r1, #0
     c0c:	d002      	beq.n	c14 <spi_init+0x25c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     c0e:	2180      	movs	r1, #128	; 0x80
     c10:	0089      	lsls	r1, r1, #2
     c12:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     c14:	7d21      	ldrb	r1, [r4, #20]
     c16:	2900      	cmp	r1, #0
     c18:	d002      	beq.n	c20 <spi_init+0x268>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     c1a:	2180      	movs	r1, #128	; 0x80
     c1c:	0189      	lsls	r1, r1, #6
     c1e:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     c20:	6831      	ldr	r1, [r6, #0]
     c22:	430a      	orrs	r2, r1
     c24:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     c26:	6872      	ldr	r2, [r6, #4]
     c28:	4313      	orrs	r3, r2
     c2a:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     c2c:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     c2e:	b009      	add	sp, #36	; 0x24
     c30:	bc3c      	pop	{r2, r3, r4, r5}
     c32:	4690      	mov	r8, r2
     c34:	4699      	mov	r9, r3
     c36:	46a2      	mov	sl, r4
     c38:	46ab      	mov	fp, r5
     c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c3c:	00000729 	.word	0x00000729
     c40:	41004400 	.word	0x41004400
     c44:	000019c1 	.word	0x000019c1
     c48:	000004fd 	.word	0x000004fd
     c4c:	000008b1 	.word	0x000008b1
     c50:	40000400 	.word	0x40000400
     c54:	000019a5 	.word	0x000019a5
     c58:	00001919 	.word	0x00001919
     c5c:	000006d9 	.word	0x000006d9
     c60:	00001a81 	.word	0x00001a81
     c64:	41002000 	.word	0x41002000

00000c68 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     c68:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c6a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     c6c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c6e:	2c01      	cmp	r4, #1
     c70:	d16c      	bne.n	d4c <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c72:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     c74:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c76:	2c00      	cmp	r4, #0
     c78:	d168      	bne.n	d4c <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     c7a:	2a00      	cmp	r2, #0
     c7c:	d057      	beq.n	d2e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     c7e:	784b      	ldrb	r3, [r1, #1]
     c80:	2b00      	cmp	r3, #0
     c82:	d044      	beq.n	d0e <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c84:	6802      	ldr	r2, [r0, #0]
     c86:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     c88:	07dc      	lsls	r4, r3, #31
     c8a:	d40f      	bmi.n	cac <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     c8c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c8e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c90:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c92:	2900      	cmp	r1, #0
     c94:	d103      	bne.n	c9e <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     c96:	095a      	lsrs	r2, r3, #5
     c98:	01d2      	lsls	r2, r2, #7
     c9a:	492d      	ldr	r1, [pc, #180]	; (d50 <spi_select_slave+0xe8>)
     c9c:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c9e:	211f      	movs	r1, #31
     ca0:	400b      	ands	r3, r1
     ca2:	2101      	movs	r1, #1
     ca4:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ca6:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     ca8:	2305      	movs	r3, #5
     caa:	e04f      	b.n	d4c <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     cac:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cae:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     cb0:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     cb2:	2c00      	cmp	r4, #0
     cb4:	d103      	bne.n	cbe <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     cb6:	095a      	lsrs	r2, r3, #5
     cb8:	01d2      	lsls	r2, r2, #7
     cba:	4c25      	ldr	r4, [pc, #148]	; (d50 <spi_select_slave+0xe8>)
     cbc:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cbe:	241f      	movs	r4, #31
     cc0:	4023      	ands	r3, r4
     cc2:	2401      	movs	r4, #1
     cc4:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     cc6:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     cc8:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cca:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ccc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     cce:	07d4      	lsls	r4, r2, #31
     cd0:	d500      	bpl.n	cd4 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cd2:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     cd4:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cd6:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     cd8:	2a00      	cmp	r2, #0
     cda:	d137      	bne.n	d4c <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cdc:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cde:	2104      	movs	r1, #4
     ce0:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     ce2:	420b      	tst	r3, r1
     ce4:	d0fc      	beq.n	ce0 <spi_select_slave+0x78>
     ce6:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     ce8:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     cea:	074c      	lsls	r4, r1, #29
     cec:	d52e      	bpl.n	d4c <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cee:	8b53      	ldrh	r3, [r2, #26]
     cf0:	0759      	lsls	r1, r3, #29
     cf2:	d503      	bpl.n	cfc <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     cf4:	8b51      	ldrh	r1, [r2, #26]
     cf6:	2304      	movs	r3, #4
     cf8:	430b      	orrs	r3, r1
     cfa:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cfc:	7983      	ldrb	r3, [r0, #6]
     cfe:	2b01      	cmp	r3, #1
     d00:	d102      	bne.n	d08 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     d02:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d04:	2300      	movs	r3, #0
     d06:	e021      	b.n	d4c <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d08:	6a93      	ldr	r3, [r2, #40]	; 0x28
     d0a:	2300      	movs	r3, #0
     d0c:	e01e      	b.n	d4c <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     d0e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d10:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d12:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d14:	2900      	cmp	r1, #0
     d16:	d103      	bne.n	d20 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     d18:	095a      	lsrs	r2, r3, #5
     d1a:	01d2      	lsls	r2, r2, #7
     d1c:	4c0c      	ldr	r4, [pc, #48]	; (d50 <spi_select_slave+0xe8>)
     d1e:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d20:	211f      	movs	r1, #31
     d22:	400b      	ands	r3, r1
     d24:	2101      	movs	r1, #1
     d26:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d28:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d2a:	2300      	movs	r3, #0
     d2c:	e00e      	b.n	d4c <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     d2e:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d30:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d32:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d34:	2900      	cmp	r1, #0
     d36:	d103      	bne.n	d40 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     d38:	095a      	lsrs	r2, r3, #5
     d3a:	01d2      	lsls	r2, r2, #7
     d3c:	4904      	ldr	r1, [pc, #16]	; (d50 <spi_select_slave+0xe8>)
     d3e:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d40:	211f      	movs	r1, #31
     d42:	400b      	ands	r3, r1
     d44:	2101      	movs	r1, #1
     d46:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d48:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     d4a:	2300      	movs	r3, #0
}
     d4c:	1c18      	adds	r0, r3, #0
     d4e:	bd10      	pop	{r4, pc}
     d50:	41004400 	.word	0x41004400

00000d54 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d54:	b5f0      	push	{r4, r5, r6, r7, lr}
     d56:	465f      	mov	r7, fp
     d58:	4656      	mov	r6, sl
     d5a:	464d      	mov	r5, r9
     d5c:	4644      	mov	r4, r8
     d5e:	b4f0      	push	{r4, r5, r6, r7}
     d60:	b091      	sub	sp, #68	; 0x44
     d62:	1c05      	adds	r5, r0, #0
     d64:	1c0c      	adds	r4, r1, #0
     d66:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d68:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d6a:	1c08      	adds	r0, r1, #0
     d6c:	4bad      	ldr	r3, [pc, #692]	; (1024 <usart_init+0x2d0>)
     d6e:	4798      	blx	r3
     d70:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d72:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d74:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d76:	07d9      	lsls	r1, r3, #31
     d78:	d500      	bpl.n	d7c <usart_init+0x28>
     d7a:	e14b      	b.n	1014 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d7c:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     d7e:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d80:	079f      	lsls	r7, r3, #30
     d82:	d500      	bpl.n	d86 <usart_init+0x32>
     d84:	e146      	b.n	1014 <usart_init+0x2c0>
     d86:	4ba8      	ldr	r3, [pc, #672]	; (1028 <usart_init+0x2d4>)
     d88:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d8a:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d8c:	2701      	movs	r7, #1
     d8e:	408f      	lsls	r7, r1
     d90:	1c39      	adds	r1, r7, #0
     d92:	4301      	orrs	r1, r0
     d94:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     d96:	a90f      	add	r1, sp, #60	; 0x3c
     d98:	272d      	movs	r7, #45	; 0x2d
     d9a:	5df3      	ldrb	r3, [r6, r7]
     d9c:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d9e:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     da0:	b2d2      	uxtb	r2, r2
     da2:	4690      	mov	r8, r2
     da4:	1c10      	adds	r0, r2, #0
     da6:	4ba1      	ldr	r3, [pc, #644]	; (102c <usart_init+0x2d8>)
     da8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     daa:	4640      	mov	r0, r8
     dac:	4ba0      	ldr	r3, [pc, #640]	; (1030 <usart_init+0x2dc>)
     dae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     db0:	5df0      	ldrb	r0, [r6, r7]
     db2:	2100      	movs	r1, #0
     db4:	4b9f      	ldr	r3, [pc, #636]	; (1034 <usart_init+0x2e0>)
     db6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     db8:	7af3      	ldrb	r3, [r6, #11]
     dba:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     dbc:	2324      	movs	r3, #36	; 0x24
     dbe:	5cf3      	ldrb	r3, [r6, r3]
     dc0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     dc2:	2325      	movs	r3, #37	; 0x25
     dc4:	5cf3      	ldrb	r3, [r6, r3]
     dc6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     dc8:	7ef3      	ldrb	r3, [r6, #27]
     dca:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     dcc:	7f33      	ldrb	r3, [r6, #28]
     dce:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dd0:	6829      	ldr	r1, [r5, #0]
     dd2:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     dd4:	1c08      	adds	r0, r1, #0
     dd6:	4b93      	ldr	r3, [pc, #588]	; (1024 <usart_init+0x2d0>)
     dd8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dda:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     ddc:	2200      	movs	r2, #0
     dde:	466b      	mov	r3, sp
     de0:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     de2:	8a32      	ldrh	r2, [r6, #16]
     de4:	9202      	str	r2, [sp, #8]
     de6:	2380      	movs	r3, #128	; 0x80
     de8:	01db      	lsls	r3, r3, #7
     dea:	429a      	cmp	r2, r3
     dec:	d021      	beq.n	e32 <usart_init+0xde>
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	01db      	lsls	r3, r3, #7
     df2:	429a      	cmp	r2, r3
     df4:	d804      	bhi.n	e00 <usart_init+0xac>
     df6:	2380      	movs	r3, #128	; 0x80
     df8:	019b      	lsls	r3, r3, #6
     dfa:	429a      	cmp	r2, r3
     dfc:	d011      	beq.n	e22 <usart_init+0xce>
     dfe:	e008      	b.n	e12 <usart_init+0xbe>
     e00:	23c0      	movs	r3, #192	; 0xc0
     e02:	01db      	lsls	r3, r3, #7
     e04:	9f02      	ldr	r7, [sp, #8]
     e06:	429f      	cmp	r7, r3
     e08:	d00f      	beq.n	e2a <usart_init+0xd6>
     e0a:	2380      	movs	r3, #128	; 0x80
     e0c:	021b      	lsls	r3, r3, #8
     e0e:	429f      	cmp	r7, r3
     e10:	d003      	beq.n	e1a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e12:	2710      	movs	r7, #16
     e14:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e16:	2700      	movs	r7, #0
     e18:	e00e      	b.n	e38 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e1a:	2703      	movs	r7, #3
     e1c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e1e:	2700      	movs	r7, #0
     e20:	e00a      	b.n	e38 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e22:	2710      	movs	r7, #16
     e24:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e26:	2701      	movs	r7, #1
     e28:	e006      	b.n	e38 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e2a:	2708      	movs	r7, #8
     e2c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e2e:	2701      	movs	r7, #1
     e30:	e002      	b.n	e38 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e32:	2708      	movs	r7, #8
     e34:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e36:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e38:	6831      	ldr	r1, [r6, #0]
     e3a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     e3c:	68f2      	ldr	r2, [r6, #12]
     e3e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e40:	6973      	ldr	r3, [r6, #20]
     e42:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e44:	7e31      	ldrb	r1, [r6, #24]
     e46:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e48:	2326      	movs	r3, #38	; 0x26
     e4a:	5cf3      	ldrb	r3, [r6, r3]
     e4c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     e4e:	6873      	ldr	r3, [r6, #4]
     e50:	2b00      	cmp	r3, #0
     e52:	d013      	beq.n	e7c <usart_init+0x128>
     e54:	2280      	movs	r2, #128	; 0x80
     e56:	0552      	lsls	r2, r2, #21
     e58:	4293      	cmp	r3, r2
     e5a:	d12e      	bne.n	eba <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e5c:	2327      	movs	r3, #39	; 0x27
     e5e:	5cf3      	ldrb	r3, [r6, r3]
     e60:	2b00      	cmp	r3, #0
     e62:	d12e      	bne.n	ec2 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e64:	6a37      	ldr	r7, [r6, #32]
     e66:	b2c0      	uxtb	r0, r0
     e68:	4b73      	ldr	r3, [pc, #460]	; (1038 <usart_init+0x2e4>)
     e6a:	4798      	blx	r3
     e6c:	1c01      	adds	r1, r0, #0
     e6e:	1c38      	adds	r0, r7, #0
     e70:	466a      	mov	r2, sp
     e72:	3226      	adds	r2, #38	; 0x26
     e74:	4b71      	ldr	r3, [pc, #452]	; (103c <usart_init+0x2e8>)
     e76:	4798      	blx	r3
     e78:	1c03      	adds	r3, r0, #0
     e7a:	e01f      	b.n	ebc <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     e7c:	2327      	movs	r3, #39	; 0x27
     e7e:	5cf3      	ldrb	r3, [r6, r3]
     e80:	2b00      	cmp	r3, #0
     e82:	d00a      	beq.n	e9a <usart_init+0x146>
				status_code =
     e84:	9a06      	ldr	r2, [sp, #24]
     e86:	9200      	str	r2, [sp, #0]
     e88:	6a30      	ldr	r0, [r6, #32]
     e8a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     e8c:	466a      	mov	r2, sp
     e8e:	3226      	adds	r2, #38	; 0x26
     e90:	1c3b      	adds	r3, r7, #0
     e92:	4f6b      	ldr	r7, [pc, #428]	; (1040 <usart_init+0x2ec>)
     e94:	47b8      	blx	r7
     e96:	1c03      	adds	r3, r0, #0
     e98:	e010      	b.n	ebc <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     e9a:	6a31      	ldr	r1, [r6, #32]
     e9c:	9107      	str	r1, [sp, #28]
     e9e:	b2c0      	uxtb	r0, r0
     ea0:	4b65      	ldr	r3, [pc, #404]	; (1038 <usart_init+0x2e4>)
     ea2:	4798      	blx	r3
     ea4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     ea6:	9a06      	ldr	r2, [sp, #24]
     ea8:	9200      	str	r2, [sp, #0]
     eaa:	9807      	ldr	r0, [sp, #28]
     eac:	466a      	mov	r2, sp
     eae:	3226      	adds	r2, #38	; 0x26
     eb0:	1c3b      	adds	r3, r7, #0
     eb2:	4f63      	ldr	r7, [pc, #396]	; (1040 <usart_init+0x2ec>)
     eb4:	47b8      	blx	r7
     eb6:	1c03      	adds	r3, r0, #0
     eb8:	e000      	b.n	ebc <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     eba:	2300      	movs	r3, #0
     ebc:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     ebe:	d000      	beq.n	ec2 <usart_init+0x16e>
     ec0:	e0a8      	b.n	1014 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     ec2:	7e73      	ldrb	r3, [r6, #25]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d002      	beq.n	ece <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ec8:	7eb3      	ldrb	r3, [r6, #26]
     eca:	4641      	mov	r1, r8
     ecc:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ece:	682a      	ldr	r2, [r5, #0]
     ed0:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ed2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     ed4:	2b00      	cmp	r3, #0
     ed6:	d1fc      	bne.n	ed2 <usart_init+0x17e>
     ed8:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     eda:	466b      	mov	r3, sp
     edc:	3326      	adds	r3, #38	; 0x26
     ede:	881b      	ldrh	r3, [r3, #0]
     ee0:	4642      	mov	r2, r8
     ee2:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ee4:	464b      	mov	r3, r9
     ee6:	9f03      	ldr	r7, [sp, #12]
     ee8:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     eea:	9f04      	ldr	r7, [sp, #16]
     eec:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     eee:	6871      	ldr	r1, [r6, #4]
     ef0:	430b      	orrs	r3, r1
		config->sample_rate |
     ef2:	9f02      	ldr	r7, [sp, #8]
     ef4:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ef6:	4652      	mov	r2, sl
     ef8:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     efa:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     efc:	4659      	mov	r1, fp
     efe:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     f00:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     f02:	2327      	movs	r3, #39	; 0x27
     f04:	5cf3      	ldrb	r3, [r6, r3]
     f06:	2b00      	cmp	r3, #0
     f08:	d101      	bne.n	f0e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     f0a:	2304      	movs	r3, #4
     f0c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f0e:	7e71      	ldrb	r1, [r6, #25]
     f10:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f12:	7f33      	ldrb	r3, [r6, #28]
     f14:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     f16:	4319      	orrs	r1, r3
     f18:	7af2      	ldrb	r2, [r6, #11]
     f1a:	7ab3      	ldrb	r3, [r6, #10]
     f1c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f1e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f20:	7f73      	ldrb	r3, [r6, #29]
     f22:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f24:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f26:	2324      	movs	r3, #36	; 0x24
     f28:	5cf3      	ldrb	r3, [r6, r3]
     f2a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f2c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f2e:	2325      	movs	r3, #37	; 0x25
     f30:	5cf3      	ldrb	r3, [r6, r3]
     f32:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     f34:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     f36:	8933      	ldrh	r3, [r6, #8]
     f38:	2bff      	cmp	r3, #255	; 0xff
     f3a:	d00b      	beq.n	f54 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f3c:	7ef2      	ldrb	r2, [r6, #27]
     f3e:	2a00      	cmp	r2, #0
     f40:	d003      	beq.n	f4a <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     f42:	22a0      	movs	r2, #160	; 0xa0
     f44:	04d2      	lsls	r2, r2, #19
     f46:	4317      	orrs	r7, r2
     f48:	e002      	b.n	f50 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f4a:	2280      	movs	r2, #128	; 0x80
     f4c:	0452      	lsls	r2, r2, #17
     f4e:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     f50:	4319      	orrs	r1, r3
     f52:	e005      	b.n	f60 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f54:	7ef3      	ldrb	r3, [r6, #27]
     f56:	2b00      	cmp	r3, #0
     f58:	d002      	beq.n	f60 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f5a:	2380      	movs	r3, #128	; 0x80
     f5c:	04db      	lsls	r3, r3, #19
     f5e:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f60:	232c      	movs	r3, #44	; 0x2c
     f62:	5cf3      	ldrb	r3, [r6, r3]
     f64:	2b00      	cmp	r3, #0
     f66:	d103      	bne.n	f70 <usart_init+0x21c>
     f68:	4b36      	ldr	r3, [pc, #216]	; (1044 <usart_init+0x2f0>)
     f6a:	789b      	ldrb	r3, [r3, #2]
     f6c:	079a      	lsls	r2, r3, #30
     f6e:	d501      	bpl.n	f74 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f70:	2380      	movs	r3, #128	; 0x80
     f72:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f74:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f76:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     f78:	2b00      	cmp	r3, #0
     f7a:	d1fc      	bne.n	f76 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f7c:	4643      	mov	r3, r8
     f7e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f80:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f82:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     f84:	2b00      	cmp	r3, #0
     f86:	d1fc      	bne.n	f82 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     f88:	4641      	mov	r1, r8
     f8a:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f8c:	ab0e      	add	r3, sp, #56	; 0x38
     f8e:	2280      	movs	r2, #128	; 0x80
     f90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f92:	2200      	movs	r2, #0
     f94:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     f96:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f98:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     f9a:	6b32      	ldr	r2, [r6, #48]	; 0x30
     f9c:	920a      	str	r2, [sp, #40]	; 0x28
     f9e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     fa0:	930b      	str	r3, [sp, #44]	; 0x2c
     fa2:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     fa4:	970c      	str	r7, [sp, #48]	; 0x30
     fa6:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     fa8:	960d      	str	r6, [sp, #52]	; 0x34
     faa:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fac:	ae0e      	add	r6, sp, #56	; 0x38
     fae:	b2f9      	uxtb	r1, r7
     fb0:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     fb2:	aa0a      	add	r2, sp, #40	; 0x28
     fb4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     fb6:	2800      	cmp	r0, #0
     fb8:	d102      	bne.n	fc0 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     fba:	1c20      	adds	r0, r4, #0
     fbc:	4a22      	ldr	r2, [pc, #136]	; (1048 <usart_init+0x2f4>)
     fbe:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     fc0:	1c43      	adds	r3, r0, #1
     fc2:	d005      	beq.n	fd0 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     fc4:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     fc6:	0c00      	lsrs	r0, r0, #16
     fc8:	b2c0      	uxtb	r0, r0
     fca:	1c31      	adds	r1, r6, #0
     fcc:	4a1f      	ldr	r2, [pc, #124]	; (104c <usart_init+0x2f8>)
     fce:	4790      	blx	r2
     fd0:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     fd2:	2f04      	cmp	r7, #4
     fd4:	d1eb      	bne.n	fae <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     fd6:	2300      	movs	r3, #0
     fd8:	60eb      	str	r3, [r5, #12]
     fda:	612b      	str	r3, [r5, #16]
     fdc:	616b      	str	r3, [r5, #20]
     fde:	61ab      	str	r3, [r5, #24]
     fe0:	61eb      	str	r3, [r5, #28]
     fe2:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     fe4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fe6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fe8:	2200      	movs	r2, #0
     fea:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fec:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fee:	2330      	movs	r3, #48	; 0x30
     ff0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ff2:	2331      	movs	r3, #49	; 0x31
     ff4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ff6:	2332      	movs	r3, #50	; 0x32
     ff8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ffa:	2333      	movs	r3, #51	; 0x33
     ffc:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ffe:	6828      	ldr	r0, [r5, #0]
    1000:	4b08      	ldr	r3, [pc, #32]	; (1024 <usart_init+0x2d0>)
    1002:	4798      	blx	r3
    1004:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1006:	4912      	ldr	r1, [pc, #72]	; (1050 <usart_init+0x2fc>)
    1008:	4b12      	ldr	r3, [pc, #72]	; (1054 <usart_init+0x300>)
    100a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    100c:	00a4      	lsls	r4, r4, #2
    100e:	4b12      	ldr	r3, [pc, #72]	; (1058 <usart_init+0x304>)
    1010:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1012:	2000      	movs	r0, #0
}
    1014:	b011      	add	sp, #68	; 0x44
    1016:	bc3c      	pop	{r2, r3, r4, r5}
    1018:	4690      	mov	r8, r2
    101a:	4699      	mov	r9, r3
    101c:	46a2      	mov	sl, r4
    101e:	46ab      	mov	fp, r5
    1020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	000008b1 	.word	0x000008b1
    1028:	40000400 	.word	0x40000400
    102c:	000019a5 	.word	0x000019a5
    1030:	00001919 	.word	0x00001919
    1034:	000006d9 	.word	0x000006d9
    1038:	000019c1 	.word	0x000019c1
    103c:	000004fd 	.word	0x000004fd
    1040:	00000529 	.word	0x00000529
    1044:	41002000 	.word	0x41002000
    1048:	00000729 	.word	0x00000729
    104c:	00001a81 	.word	0x00001a81
    1050:	00001101 	.word	0x00001101
    1054:	000008f1 	.word	0x000008f1
    1058:	200008bc 	.word	0x200008bc

0000105c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    105c:	b510      	push	{r4, lr}
    105e:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1060:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1062:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1064:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1066:	2c00      	cmp	r4, #0
    1068:	d00d      	beq.n	1086 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    106a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    106c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    106e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1070:	2a00      	cmp	r2, #0
    1072:	d108      	bne.n	1086 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1074:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1076:	2a00      	cmp	r2, #0
    1078:	d1fc      	bne.n	1074 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    107a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    107c:	2102      	movs	r1, #2
    107e:	7e1a      	ldrb	r2, [r3, #24]
    1080:	420a      	tst	r2, r1
    1082:	d0fc      	beq.n	107e <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1084:	2000      	movs	r0, #0
}
    1086:	bd10      	pop	{r4, pc}

00001088 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1088:	b510      	push	{r4, lr}
    108a:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    108c:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    108e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1090:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1092:	2a00      	cmp	r2, #0
    1094:	d033      	beq.n	10fe <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1096:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1098:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    109a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    109c:	2b00      	cmp	r3, #0
    109e:	d12e      	bne.n	10fe <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    10a0:	7e23      	ldrb	r3, [r4, #24]
    10a2:	075a      	lsls	r2, r3, #29
    10a4:	d52b      	bpl.n	10fe <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10a6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    10a8:	2b00      	cmp	r3, #0
    10aa:	d1fc      	bne.n	10a6 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    10ac:	8b63      	ldrh	r3, [r4, #26]
    10ae:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    10b0:	069a      	lsls	r2, r3, #26
    10b2:	d021      	beq.n	10f8 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    10b4:	079a      	lsls	r2, r3, #30
    10b6:	d503      	bpl.n	10c0 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    10b8:	2302      	movs	r3, #2
    10ba:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    10bc:	201a      	movs	r0, #26
    10be:	e01e      	b.n	10fe <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    10c0:	075a      	lsls	r2, r3, #29
    10c2:	d503      	bpl.n	10cc <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    10c4:	2304      	movs	r3, #4
    10c6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    10c8:	201e      	movs	r0, #30
    10ca:	e018      	b.n	10fe <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    10cc:	07da      	lsls	r2, r3, #31
    10ce:	d503      	bpl.n	10d8 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    10d0:	2301      	movs	r3, #1
    10d2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    10d4:	2013      	movs	r0, #19
    10d6:	e012      	b.n	10fe <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    10d8:	06da      	lsls	r2, r3, #27
    10da:	d505      	bpl.n	10e8 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    10dc:	8b62      	ldrh	r2, [r4, #26]
    10de:	2310      	movs	r3, #16
    10e0:	4313      	orrs	r3, r2
    10e2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    10e4:	2042      	movs	r0, #66	; 0x42
    10e6:	e00a      	b.n	10fe <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10e8:	069a      	lsls	r2, r3, #26
    10ea:	d505      	bpl.n	10f8 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    10ec:	8b62      	ldrh	r2, [r4, #26]
    10ee:	2320      	movs	r3, #32
    10f0:	4313      	orrs	r3, r2
    10f2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    10f4:	2041      	movs	r0, #65	; 0x41
    10f6:	e002      	b.n	10fe <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    10f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    10fa:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    10fc:	2000      	movs	r0, #0
}
    10fe:	bd10      	pop	{r4, pc}

00001100 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1102:	0080      	lsls	r0, r0, #2
    1104:	4b64      	ldr	r3, [pc, #400]	; (1298 <_usart_interrupt_handler+0x198>)
    1106:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1108:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    110a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    110c:	2b00      	cmp	r3, #0
    110e:	d1fc      	bne.n	110a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1110:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1112:	7da6      	ldrb	r6, [r4, #22]
    1114:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    1116:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1118:	5ceb      	ldrb	r3, [r5, r3]
    111a:	2230      	movs	r2, #48	; 0x30
    111c:	5caf      	ldrb	r7, [r5, r2]
    111e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1120:	07f1      	lsls	r1, r6, #31
    1122:	d520      	bpl.n	1166 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    1124:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1126:	b29b      	uxth	r3, r3
    1128:	2b00      	cmp	r3, #0
    112a:	d01a      	beq.n	1162 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    112c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    112e:	781a      	ldrb	r2, [r3, #0]
    1130:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1132:	1c59      	adds	r1, r3, #1
    1134:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1136:	7969      	ldrb	r1, [r5, #5]
    1138:	2901      	cmp	r1, #1
    113a:	d104      	bne.n	1146 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    113c:	7859      	ldrb	r1, [r3, #1]
    113e:	0209      	lsls	r1, r1, #8
    1140:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1142:	3302      	adds	r3, #2
    1144:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1146:	05d3      	lsls	r3, r2, #23
    1148:	0ddb      	lsrs	r3, r3, #23
    114a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    114c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    114e:	3b01      	subs	r3, #1
    1150:	b29b      	uxth	r3, r3
    1152:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1154:	2b00      	cmp	r3, #0
    1156:	d106      	bne.n	1166 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1158:	2301      	movs	r3, #1
    115a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    115c:	2302      	movs	r3, #2
    115e:	75a3      	strb	r3, [r4, #22]
    1160:	e001      	b.n	1166 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1162:	2301      	movs	r3, #1
    1164:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1166:	07b2      	lsls	r2, r6, #30
    1168:	d509      	bpl.n	117e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    116a:	2302      	movs	r3, #2
    116c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    116e:	2200      	movs	r2, #0
    1170:	2333      	movs	r3, #51	; 0x33
    1172:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1174:	07fb      	lsls	r3, r7, #31
    1176:	d502      	bpl.n	117e <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1178:	1c28      	adds	r0, r5, #0
    117a:	68e9      	ldr	r1, [r5, #12]
    117c:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    117e:	0772      	lsls	r2, r6, #29
    1180:	d56a      	bpl.n	1258 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    1182:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1184:	b29b      	uxth	r3, r3
    1186:	2b00      	cmp	r3, #0
    1188:	d064      	beq.n	1254 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    118a:	8b63      	ldrh	r3, [r4, #26]
    118c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    118e:	0719      	lsls	r1, r3, #28
    1190:	d402      	bmi.n	1198 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1192:	223f      	movs	r2, #63	; 0x3f
    1194:	4013      	ands	r3, r2
    1196:	e001      	b.n	119c <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1198:	2237      	movs	r2, #55	; 0x37
    119a:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    119c:	2b00      	cmp	r3, #0
    119e:	d037      	beq.n	1210 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    11a0:	079a      	lsls	r2, r3, #30
    11a2:	d507      	bpl.n	11b4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    11a4:	221a      	movs	r2, #26
    11a6:	2332      	movs	r3, #50	; 0x32
    11a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    11aa:	8b62      	ldrh	r2, [r4, #26]
    11ac:	2302      	movs	r3, #2
    11ae:	4313      	orrs	r3, r2
    11b0:	8363      	strh	r3, [r4, #26]
    11b2:	e027      	b.n	1204 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    11b4:	0759      	lsls	r1, r3, #29
    11b6:	d507      	bpl.n	11c8 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    11b8:	221e      	movs	r2, #30
    11ba:	2332      	movs	r3, #50	; 0x32
    11bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    11be:	8b62      	ldrh	r2, [r4, #26]
    11c0:	2304      	movs	r3, #4
    11c2:	4313      	orrs	r3, r2
    11c4:	8363      	strh	r3, [r4, #26]
    11c6:	e01d      	b.n	1204 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    11c8:	07da      	lsls	r2, r3, #31
    11ca:	d507      	bpl.n	11dc <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    11cc:	2213      	movs	r2, #19
    11ce:	2332      	movs	r3, #50	; 0x32
    11d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    11d2:	8b62      	ldrh	r2, [r4, #26]
    11d4:	2301      	movs	r3, #1
    11d6:	4313      	orrs	r3, r2
    11d8:	8363      	strh	r3, [r4, #26]
    11da:	e013      	b.n	1204 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    11dc:	06d9      	lsls	r1, r3, #27
    11de:	d507      	bpl.n	11f0 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    11e0:	2242      	movs	r2, #66	; 0x42
    11e2:	2332      	movs	r3, #50	; 0x32
    11e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    11e6:	8b62      	ldrh	r2, [r4, #26]
    11e8:	2310      	movs	r3, #16
    11ea:	4313      	orrs	r3, r2
    11ec:	8363      	strh	r3, [r4, #26]
    11ee:	e009      	b.n	1204 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    11f0:	2220      	movs	r2, #32
    11f2:	421a      	tst	r2, r3
    11f4:	d006      	beq.n	1204 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    11f6:	2241      	movs	r2, #65	; 0x41
    11f8:	2332      	movs	r3, #50	; 0x32
    11fa:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    11fc:	8b62      	ldrh	r2, [r4, #26]
    11fe:	2320      	movs	r3, #32
    1200:	4313      	orrs	r3, r2
    1202:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1204:	077a      	lsls	r2, r7, #29
    1206:	d527      	bpl.n	1258 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1208:	1c28      	adds	r0, r5, #0
    120a:	696b      	ldr	r3, [r5, #20]
    120c:	4798      	blx	r3
    120e:	e023      	b.n	1258 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1210:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1212:	05d2      	lsls	r2, r2, #23
    1214:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1216:	b2d3      	uxtb	r3, r2
    1218:	6a69      	ldr	r1, [r5, #36]	; 0x24
    121a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    121c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    121e:	1c59      	adds	r1, r3, #1
    1220:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1222:	7969      	ldrb	r1, [r5, #5]
    1224:	2901      	cmp	r1, #1
    1226:	d104      	bne.n	1232 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1228:	0a12      	lsrs	r2, r2, #8
    122a:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    122c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    122e:	3301      	adds	r3, #1
    1230:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1232:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1234:	3b01      	subs	r3, #1
    1236:	b29b      	uxth	r3, r3
    1238:	85ab      	strh	r3, [r5, #44]	; 0x2c
    123a:	2b00      	cmp	r3, #0
    123c:	d10c      	bne.n	1258 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    123e:	2304      	movs	r3, #4
    1240:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1242:	2200      	movs	r2, #0
    1244:	2332      	movs	r3, #50	; 0x32
    1246:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1248:	07ba      	lsls	r2, r7, #30
    124a:	d505      	bpl.n	1258 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    124c:	1c28      	adds	r0, r5, #0
    124e:	692b      	ldr	r3, [r5, #16]
    1250:	4798      	blx	r3
    1252:	e001      	b.n	1258 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1254:	2304      	movs	r3, #4
    1256:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1258:	06f1      	lsls	r1, r6, #27
    125a:	d507      	bpl.n	126c <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    125c:	2310      	movs	r3, #16
    125e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1260:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1262:	06fa      	lsls	r2, r7, #27
    1264:	d502      	bpl.n	126c <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1266:	1c28      	adds	r0, r5, #0
    1268:	69eb      	ldr	r3, [r5, #28]
    126a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    126c:	06b1      	lsls	r1, r6, #26
    126e:	d507      	bpl.n	1280 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1270:	2320      	movs	r3, #32
    1272:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1274:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1276:	073a      	lsls	r2, r7, #28
    1278:	d502      	bpl.n	1280 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    127a:	1c28      	adds	r0, r5, #0
    127c:	69ab      	ldr	r3, [r5, #24]
    127e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1280:	0731      	lsls	r1, r6, #28
    1282:	d507      	bpl.n	1294 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1284:	2308      	movs	r3, #8
    1286:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1288:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    128a:	06ba      	lsls	r2, r7, #26
    128c:	d502      	bpl.n	1294 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    128e:	6a2b      	ldr	r3, [r5, #32]
    1290:	1c28      	adds	r0, r5, #0
    1292:	4798      	blx	r3
		}
	}
#endif
}
    1294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	200008bc 	.word	0x200008bc

0000129c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    129c:	b508      	push	{r3, lr}
	switch (clock_source) {
    129e:	2808      	cmp	r0, #8
    12a0:	d834      	bhi.n	130c <system_clock_source_get_hz+0x70>
    12a2:	0080      	lsls	r0, r0, #2
    12a4:	4b1b      	ldr	r3, [pc, #108]	; (1314 <system_clock_source_get_hz+0x78>)
    12a6:	581b      	ldr	r3, [r3, r0]
    12a8:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    12aa:	2080      	movs	r0, #128	; 0x80
    12ac:	0200      	lsls	r0, r0, #8
    12ae:	e030      	b.n	1312 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    12b0:	4b19      	ldr	r3, [pc, #100]	; (1318 <system_clock_source_get_hz+0x7c>)
    12b2:	6918      	ldr	r0, [r3, #16]
    12b4:	e02d      	b.n	1312 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    12b6:	4b19      	ldr	r3, [pc, #100]	; (131c <system_clock_source_get_hz+0x80>)
    12b8:	6a18      	ldr	r0, [r3, #32]
    12ba:	0580      	lsls	r0, r0, #22
    12bc:	0f80      	lsrs	r0, r0, #30
    12be:	4b18      	ldr	r3, [pc, #96]	; (1320 <system_clock_source_get_hz+0x84>)
    12c0:	40c3      	lsrs	r3, r0
    12c2:	1c18      	adds	r0, r3, #0
    12c4:	e025      	b.n	1312 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    12c6:	4b14      	ldr	r3, [pc, #80]	; (1318 <system_clock_source_get_hz+0x7c>)
    12c8:	6958      	ldr	r0, [r3, #20]
    12ca:	e022      	b.n	1312 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    12cc:	4b12      	ldr	r3, [pc, #72]	; (1318 <system_clock_source_get_hz+0x7c>)
    12ce:	681b      	ldr	r3, [r3, #0]
    12d0:	2002      	movs	r0, #2
    12d2:	4018      	ands	r0, r3
    12d4:	d01d      	beq.n	1312 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12d6:	4911      	ldr	r1, [pc, #68]	; (131c <system_clock_source_get_hz+0x80>)
    12d8:	2210      	movs	r2, #16
    12da:	68cb      	ldr	r3, [r1, #12]
    12dc:	421a      	tst	r2, r3
    12de:	d0fc      	beq.n	12da <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    12e0:	4b0d      	ldr	r3, [pc, #52]	; (1318 <system_clock_source_get_hz+0x7c>)
    12e2:	681b      	ldr	r3, [r3, #0]
    12e4:	075a      	lsls	r2, r3, #29
    12e6:	d513      	bpl.n	1310 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12e8:	2000      	movs	r0, #0
    12ea:	4b0e      	ldr	r3, [pc, #56]	; (1324 <system_clock_source_get_hz+0x88>)
    12ec:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    12ee:	4b0a      	ldr	r3, [pc, #40]	; (1318 <system_clock_source_get_hz+0x7c>)
    12f0:	689b      	ldr	r3, [r3, #8]
    12f2:	041b      	lsls	r3, r3, #16
    12f4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12f6:	4358      	muls	r0, r3
    12f8:	e00b      	b.n	1312 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12fa:	2350      	movs	r3, #80	; 0x50
    12fc:	4a07      	ldr	r2, [pc, #28]	; (131c <system_clock_source_get_hz+0x80>)
    12fe:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1300:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1302:	075a      	lsls	r2, r3, #29
    1304:	d505      	bpl.n	1312 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1306:	4b04      	ldr	r3, [pc, #16]	; (1318 <system_clock_source_get_hz+0x7c>)
    1308:	68d8      	ldr	r0, [r3, #12]
    130a:	e002      	b.n	1312 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    130c:	2000      	movs	r0, #0
    130e:	e000      	b.n	1312 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1310:	4805      	ldr	r0, [pc, #20]	; (1328 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1312:	bd08      	pop	{r3, pc}
    1314:	00005a40 	.word	0x00005a40
    1318:	200000b4 	.word	0x200000b4
    131c:	40000800 	.word	0x40000800
    1320:	007a1200 	.word	0x007a1200
    1324:	000019c1 	.word	0x000019c1
    1328:	02dc6c00 	.word	0x02dc6c00

0000132c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    132c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    132e:	4b0c      	ldr	r3, [pc, #48]	; (1360 <system_clock_source_osc8m_set_config+0x34>)
    1330:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1332:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1334:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1336:	7840      	ldrb	r0, [r0, #1]
    1338:	2201      	movs	r2, #1
    133a:	4010      	ands	r0, r2
    133c:	0180      	lsls	r0, r0, #6
    133e:	2640      	movs	r6, #64	; 0x40
    1340:	43b4      	bics	r4, r6
    1342:	4304      	orrs	r4, r0
    1344:	402a      	ands	r2, r5
    1346:	01d0      	lsls	r0, r2, #7
    1348:	2280      	movs	r2, #128	; 0x80
    134a:	4394      	bics	r4, r2
    134c:	1c22      	adds	r2, r4, #0
    134e:	4302      	orrs	r2, r0
    1350:	2003      	movs	r0, #3
    1352:	4001      	ands	r1, r0
    1354:	0209      	lsls	r1, r1, #8
    1356:	4803      	ldr	r0, [pc, #12]	; (1364 <system_clock_source_osc8m_set_config+0x38>)
    1358:	4002      	ands	r2, r0
    135a:	430a      	orrs	r2, r1
    135c:	621a      	str	r2, [r3, #32]
}
    135e:	bd70      	pop	{r4, r5, r6, pc}
    1360:	40000800 	.word	0x40000800
    1364:	fffffcff 	.word	0xfffffcff

00001368 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1368:	b5f0      	push	{r4, r5, r6, r7, lr}
    136a:	464f      	mov	r7, r9
    136c:	4646      	mov	r6, r8
    136e:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1370:	4a19      	ldr	r2, [pc, #100]	; (13d8 <system_clock_source_osc32k_set_config+0x70>)
    1372:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1374:	7841      	ldrb	r1, [r0, #1]
    1376:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1378:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    137a:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    137c:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    137e:	7943      	ldrb	r3, [r0, #5]
    1380:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
    1382:	7880      	ldrb	r0, [r0, #2]
    1384:	2301      	movs	r3, #1
    1386:	4018      	ands	r0, r3
    1388:	0080      	lsls	r0, r0, #2
    138a:	2104      	movs	r1, #4
    138c:	438c      	bics	r4, r1
    138e:	4304      	orrs	r4, r0
    1390:	4660      	mov	r0, ip
    1392:	4018      	ands	r0, r3
    1394:	00c0      	lsls	r0, r0, #3
    1396:	2108      	movs	r1, #8
    1398:	438c      	bics	r4, r1
    139a:	4304      	orrs	r4, r0
    139c:	1c18      	adds	r0, r3, #0
    139e:	4038      	ands	r0, r7
    13a0:	0180      	lsls	r0, r0, #6
    13a2:	2740      	movs	r7, #64	; 0x40
    13a4:	43bc      	bics	r4, r7
    13a6:	4304      	orrs	r4, r0
    13a8:	1c18      	adds	r0, r3, #0
    13aa:	4030      	ands	r0, r6
    13ac:	01c0      	lsls	r0, r0, #7
    13ae:	2680      	movs	r6, #128	; 0x80
    13b0:	43b4      	bics	r4, r6
    13b2:	4304      	orrs	r4, r0
    13b4:	2007      	movs	r0, #7
    13b6:	4028      	ands	r0, r5
    13b8:	0200      	lsls	r0, r0, #8
    13ba:	4d08      	ldr	r5, [pc, #32]	; (13dc <system_clock_source_osc32k_set_config+0x74>)
    13bc:	402c      	ands	r4, r5
    13be:	4304      	orrs	r4, r0
    13c0:	4649      	mov	r1, r9
    13c2:	400b      	ands	r3, r1
    13c4:	0319      	lsls	r1, r3, #12
    13c6:	4806      	ldr	r0, [pc, #24]	; (13e0 <system_clock_source_osc32k_set_config+0x78>)
    13c8:	1c23      	adds	r3, r4, #0
    13ca:	4003      	ands	r3, r0
    13cc:	430b      	orrs	r3, r1
    13ce:	6193      	str	r3, [r2, #24]
}
    13d0:	bc0c      	pop	{r2, r3}
    13d2:	4690      	mov	r8, r2
    13d4:	4699      	mov	r9, r3
    13d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13d8:	40000800 	.word	0x40000800
    13dc:	fffff8ff 	.word	0xfffff8ff
    13e0:	ffffefff 	.word	0xffffefff

000013e4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    13e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13e6:	465f      	mov	r7, fp
    13e8:	4656      	mov	r6, sl
    13ea:	464d      	mov	r5, r9
    13ec:	4644      	mov	r4, r8
    13ee:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    13f0:	4a25      	ldr	r2, [pc, #148]	; (1488 <system_clock_source_xosc32k_set_config+0xa4>)
    13f2:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    13f4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    13f6:	7803      	ldrb	r3, [r0, #0]
    13f8:	4259      	negs	r1, r3
    13fa:	4159      	adcs	r1, r3
    13fc:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    13fe:	7883      	ldrb	r3, [r0, #2]
    1400:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1402:	78c1      	ldrb	r1, [r0, #3]
    1404:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1406:	7903      	ldrb	r3, [r0, #4]
    1408:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    140a:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    140c:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    140e:	7b81      	ldrb	r1, [r0, #14]
    1410:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1412:	6880      	ldr	r0, [r0, #8]
    1414:	4b1d      	ldr	r3, [pc, #116]	; (148c <system_clock_source_xosc32k_set_config+0xa8>)
    1416:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    1418:	2301      	movs	r3, #1
    141a:	4651      	mov	r1, sl
    141c:	0088      	lsls	r0, r1, #2
    141e:	2104      	movs	r1, #4
    1420:	438c      	bics	r4, r1
    1422:	4304      	orrs	r4, r0
    1424:	4648      	mov	r0, r9
    1426:	4018      	ands	r0, r3
    1428:	00c0      	lsls	r0, r0, #3
    142a:	2108      	movs	r1, #8
    142c:	438c      	bics	r4, r1
    142e:	4304      	orrs	r4, r0
    1430:	4640      	mov	r0, r8
    1432:	4018      	ands	r0, r3
    1434:	0100      	lsls	r0, r0, #4
    1436:	2110      	movs	r1, #16
    1438:	438c      	bics	r4, r1
    143a:	4304      	orrs	r4, r0
    143c:	4660      	mov	r0, ip
    143e:	4018      	ands	r0, r3
    1440:	0140      	lsls	r0, r0, #5
    1442:	2120      	movs	r1, #32
    1444:	438c      	bics	r4, r1
    1446:	4304      	orrs	r4, r0
    1448:	1c18      	adds	r0, r3, #0
    144a:	4038      	ands	r0, r7
    144c:	0180      	lsls	r0, r0, #6
    144e:	2740      	movs	r7, #64	; 0x40
    1450:	43bc      	bics	r4, r7
    1452:	4304      	orrs	r4, r0
    1454:	1c18      	adds	r0, r3, #0
    1456:	4030      	ands	r0, r6
    1458:	01c0      	lsls	r0, r0, #7
    145a:	2680      	movs	r6, #128	; 0x80
    145c:	43b4      	bics	r4, r6
    145e:	4304      	orrs	r4, r0
    1460:	2007      	movs	r0, #7
    1462:	4028      	ands	r0, r5
    1464:	0200      	lsls	r0, r0, #8
    1466:	4d0a      	ldr	r5, [pc, #40]	; (1490 <system_clock_source_xosc32k_set_config+0xac>)
    1468:	402c      	ands	r4, r5
    146a:	4304      	orrs	r4, r0
    146c:	4659      	mov	r1, fp
    146e:	400b      	ands	r3, r1
    1470:	0319      	lsls	r1, r3, #12
    1472:	4808      	ldr	r0, [pc, #32]	; (1494 <system_clock_source_xosc32k_set_config+0xb0>)
    1474:	1c23      	adds	r3, r4, #0
    1476:	4003      	ands	r3, r0
    1478:	430b      	orrs	r3, r1
    147a:	8293      	strh	r3, [r2, #20]
}
    147c:	bc3c      	pop	{r2, r3, r4, r5}
    147e:	4690      	mov	r8, r2
    1480:	4699      	mov	r9, r3
    1482:	46a2      	mov	sl, r4
    1484:	46ab      	mov	fp, r5
    1486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1488:	40000800 	.word	0x40000800
    148c:	200000b4 	.word	0x200000b4
    1490:	fffff8ff 	.word	0xfffff8ff
    1494:	ffffefff 	.word	0xffffefff

00001498 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1498:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    149a:	7a02      	ldrb	r2, [r0, #8]
    149c:	0692      	lsls	r2, r2, #26
    149e:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    14a0:	8943      	ldrh	r3, [r0, #10]
    14a2:	059b      	lsls	r3, r3, #22
    14a4:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    14a6:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    14a8:	4b15      	ldr	r3, [pc, #84]	; (1500 <system_clock_source_dfll_set_config+0x68>)
    14aa:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    14ac:	8881      	ldrh	r1, [r0, #4]
    14ae:	8842      	ldrh	r2, [r0, #2]
    14b0:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    14b2:	79c4      	ldrb	r4, [r0, #7]
    14b4:	7982      	ldrb	r2, [r0, #6]
    14b6:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    14b8:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    14ba:	7841      	ldrb	r1, [r0, #1]
    14bc:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    14be:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    14c0:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    14c2:	7803      	ldrb	r3, [r0, #0]
    14c4:	2b04      	cmp	r3, #4
    14c6:	d10f      	bne.n	14e8 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    14c8:	7b02      	ldrb	r2, [r0, #12]
    14ca:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    14cc:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    14ce:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    14d0:	89c3      	ldrh	r3, [r0, #14]
    14d2:	041b      	lsls	r3, r3, #16
    14d4:	490b      	ldr	r1, [pc, #44]	; (1504 <system_clock_source_dfll_set_config+0x6c>)
    14d6:	400b      	ands	r3, r1
    14d8:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    14da:	4b09      	ldr	r3, [pc, #36]	; (1500 <system_clock_source_dfll_set_config+0x68>)
    14dc:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    14de:	6819      	ldr	r1, [r3, #0]
    14e0:	2204      	movs	r2, #4
    14e2:	430a      	orrs	r2, r1
    14e4:	601a      	str	r2, [r3, #0]
    14e6:	e009      	b.n	14fc <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    14e8:	2b20      	cmp	r3, #32
    14ea:	d107      	bne.n	14fc <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    14ec:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    14ee:	4b04      	ldr	r3, [pc, #16]	; (1500 <system_clock_source_dfll_set_config+0x68>)
    14f0:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    14f2:	6819      	ldr	r1, [r3, #0]
    14f4:	2284      	movs	r2, #132	; 0x84
    14f6:	00d2      	lsls	r2, r2, #3
    14f8:	430a      	orrs	r2, r1
    14fa:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    14fc:	bd10      	pop	{r4, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	200000b4 	.word	0x200000b4
    1504:	03ff0000 	.word	0x03ff0000

00001508 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1508:	2808      	cmp	r0, #8
    150a:	d843      	bhi.n	1594 <system_clock_source_enable+0x8c>
    150c:	0080      	lsls	r0, r0, #2
    150e:	4b22      	ldr	r3, [pc, #136]	; (1598 <system_clock_source_enable+0x90>)
    1510:	581b      	ldr	r3, [r3, r0]
    1512:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1514:	2000      	movs	r0, #0
    1516:	e03e      	b.n	1596 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1518:	4b20      	ldr	r3, [pc, #128]	; (159c <system_clock_source_enable+0x94>)
    151a:	6a19      	ldr	r1, [r3, #32]
    151c:	2202      	movs	r2, #2
    151e:	430a      	orrs	r2, r1
    1520:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1522:	2000      	movs	r0, #0
    1524:	e037      	b.n	1596 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1526:	4b1d      	ldr	r3, [pc, #116]	; (159c <system_clock_source_enable+0x94>)
    1528:	6999      	ldr	r1, [r3, #24]
    152a:	2202      	movs	r2, #2
    152c:	430a      	orrs	r2, r1
    152e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1530:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1532:	e030      	b.n	1596 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1534:	4b19      	ldr	r3, [pc, #100]	; (159c <system_clock_source_enable+0x94>)
    1536:	8a19      	ldrh	r1, [r3, #16]
    1538:	2202      	movs	r2, #2
    153a:	430a      	orrs	r2, r1
    153c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    153e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1540:	e029      	b.n	1596 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1542:	4b16      	ldr	r3, [pc, #88]	; (159c <system_clock_source_enable+0x94>)
    1544:	8a99      	ldrh	r1, [r3, #20]
    1546:	2202      	movs	r2, #2
    1548:	430a      	orrs	r2, r1
    154a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    154c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    154e:	e022      	b.n	1596 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1550:	4b13      	ldr	r3, [pc, #76]	; (15a0 <system_clock_source_enable+0x98>)
    1552:	6819      	ldr	r1, [r3, #0]
    1554:	2202      	movs	r2, #2
    1556:	430a      	orrs	r2, r1
    1558:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    155a:	681a      	ldr	r2, [r3, #0]
    155c:	4b11      	ldr	r3, [pc, #68]	; (15a4 <system_clock_source_enable+0x9c>)
    155e:	401a      	ands	r2, r3
    1560:	4b0e      	ldr	r3, [pc, #56]	; (159c <system_clock_source_enable+0x94>)
    1562:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1564:	1c19      	adds	r1, r3, #0
    1566:	2210      	movs	r2, #16
    1568:	68cb      	ldr	r3, [r1, #12]
    156a:	421a      	tst	r2, r3
    156c:	d0fc      	beq.n	1568 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    156e:	4a0c      	ldr	r2, [pc, #48]	; (15a0 <system_clock_source_enable+0x98>)
    1570:	6891      	ldr	r1, [r2, #8]
    1572:	4b0a      	ldr	r3, [pc, #40]	; (159c <system_clock_source_enable+0x94>)
    1574:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1576:	6851      	ldr	r1, [r2, #4]
    1578:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    157a:	6812      	ldr	r2, [r2, #0]
    157c:	b292      	uxth	r2, r2
    157e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1580:	2000      	movs	r0, #0
    1582:	e008      	b.n	1596 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1584:	4a05      	ldr	r2, [pc, #20]	; (159c <system_clock_source_enable+0x94>)
    1586:	2344      	movs	r3, #68	; 0x44
    1588:	5cd0      	ldrb	r0, [r2, r3]
    158a:	2102      	movs	r1, #2
    158c:	4301      	orrs	r1, r0
    158e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1590:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1592:	e000      	b.n	1596 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1594:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1596:	4770      	bx	lr
    1598:	00005a64 	.word	0x00005a64
    159c:	40000800 	.word	0x40000800
    15a0:	200000b4 	.word	0x200000b4
    15a4:	0000ff7f 	.word	0x0000ff7f

000015a8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    15a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15aa:	4657      	mov	r7, sl
    15ac:	464e      	mov	r6, r9
    15ae:	4645      	mov	r5, r8
    15b0:	b4e0      	push	{r5, r6, r7}
    15b2:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    15b4:	22c2      	movs	r2, #194	; 0xc2
    15b6:	00d2      	lsls	r2, r2, #3
    15b8:	4b5e      	ldr	r3, [pc, #376]	; (1734 <system_clock_init+0x18c>)
    15ba:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    15bc:	4b5e      	ldr	r3, [pc, #376]	; (1738 <system_clock_init+0x190>)
    15be:	685a      	ldr	r2, [r3, #4]
    15c0:	211e      	movs	r1, #30
    15c2:	438a      	bics	r2, r1
    15c4:	2104      	movs	r1, #4
    15c6:	430a      	orrs	r2, r1
    15c8:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    15ca:	2203      	movs	r2, #3
    15cc:	ab01      	add	r3, sp, #4
    15ce:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15d0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    15d2:	4d5a      	ldr	r5, [pc, #360]	; (173c <system_clock_init+0x194>)
    15d4:	b2e0      	uxtb	r0, r4
    15d6:	a901      	add	r1, sp, #4
    15d8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15da:	3401      	adds	r4, #1
    15dc:	2c25      	cmp	r4, #37	; 0x25
    15de:	d1f9      	bne.n	15d4 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    15e0:	a80c      	add	r0, sp, #48	; 0x30
    15e2:	2300      	movs	r3, #0
    15e4:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    15e6:	2280      	movs	r2, #128	; 0x80
    15e8:	0212      	lsls	r2, r2, #8
    15ea:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    15ec:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    15ee:	2201      	movs	r2, #1
    15f0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    15f2:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    15f4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    15f6:	2106      	movs	r1, #6
    15f8:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    15fa:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    15fc:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    15fe:	4b50      	ldr	r3, [pc, #320]	; (1740 <system_clock_init+0x198>)
    1600:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1602:	2005      	movs	r0, #5
    1604:	4b4f      	ldr	r3, [pc, #316]	; (1744 <system_clock_init+0x19c>)
    1606:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1608:	494a      	ldr	r1, [pc, #296]	; (1734 <system_clock_init+0x18c>)
    160a:	2202      	movs	r2, #2
    160c:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    160e:	421a      	tst	r2, r3
    1610:	d0fc      	beq.n	160c <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1612:	4b48      	ldr	r3, [pc, #288]	; (1734 <system_clock_init+0x18c>)
    1614:	8a99      	ldrh	r1, [r3, #20]
    1616:	2280      	movs	r2, #128	; 0x80
    1618:	430a      	orrs	r2, r1
    161a:	829a      	strh	r2, [r3, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    161c:	4a4a      	ldr	r2, [pc, #296]	; (1748 <system_clock_init+0x1a0>)
    161e:	6811      	ldr	r1, [r2, #0]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1620:	04c9      	lsls	r1, r1, #19
    1622:	0e49      	lsrs	r1, r1, #25
    1624:	0409      	lsls	r1, r1, #16
    1626:	6998      	ldr	r0, [r3, #24]
    1628:	4a48      	ldr	r2, [pc, #288]	; (174c <system_clock_init+0x1a4>)
    162a:	4002      	ands	r2, r0
    162c:	430a      	orrs	r2, r1
    162e:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1630:	a80a      	add	r0, sp, #40	; 0x28
    1632:	2601      	movs	r6, #1
    1634:	7046      	strb	r6, [r0, #1]
	config->enable_32khz_output = true;
    1636:	7086      	strb	r6, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1638:	7106      	strb	r6, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    163a:	2407      	movs	r4, #7
    163c:	7004      	strb	r4, [r0, #0]
	config->write_once          = false;
    163e:	2200      	movs	r2, #0
    1640:	4690      	mov	r8, r2
    1642:	7142      	strb	r2, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1644:	70c6      	strb	r6, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1646:	4b42      	ldr	r3, [pc, #264]	; (1750 <system_clock_init+0x1a8>)
    1648:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    164a:	2004      	movs	r0, #4
    164c:	4f3d      	ldr	r7, [pc, #244]	; (1744 <system_clock_init+0x19c>)
    164e:	47b8      	blx	r7
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1650:	a805      	add	r0, sp, #20
    1652:	2500      	movs	r5, #0
    1654:	4642      	mov	r2, r8
    1656:	8042      	strh	r2, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1658:	8082      	strh	r2, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    165a:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    165c:	71c5      	strb	r5, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    165e:	7204      	strb	r4, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1660:	233f      	movs	r3, #63	; 0x3f
    1662:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1664:	2204      	movs	r2, #4
    1666:	4691      	mov	r9, r2
    1668:	7002      	strb	r2, [r0, #0]
	dfll_conf.on_demand      = false;
    166a:	7045      	strb	r5, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    166c:	22b7      	movs	r2, #183	; 0xb7
    166e:	00d2      	lsls	r2, r2, #3
    1670:	8202      	strh	r2, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1672:	7304      	strb	r4, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1674:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1676:	4b37      	ldr	r3, [pc, #220]	; (1754 <system_clock_init+0x1ac>)
    1678:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    167a:	a804      	add	r0, sp, #16
    167c:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    167e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1680:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1682:	4b35      	ldr	r3, [pc, #212]	; (1758 <system_clock_init+0x1b0>)
    1684:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1686:	2006      	movs	r0, #6
    1688:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    168a:	4b34      	ldr	r3, [pc, #208]	; (175c <system_clock_init+0x1b4>)
    168c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    168e:	ac01      	add	r4, sp, #4
    1690:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1692:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1694:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1696:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1698:	2305      	movs	r3, #5
    169a:	7023      	strb	r3, [r4, #0]
    169c:	2001      	movs	r0, #1
    169e:	1c21      	adds	r1, r4, #0
    16a0:	4b2f      	ldr	r3, [pc, #188]	; (1760 <system_clock_init+0x1b8>)
    16a2:	469a      	mov	sl, r3
    16a4:	4798      	blx	r3
    16a6:	2001      	movs	r0, #1
    16a8:	4a2e      	ldr	r2, [pc, #184]	; (1764 <system_clock_init+0x1bc>)
    16aa:	4690      	mov	r8, r2
    16ac:	4790      	blx	r2
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    16ae:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    16b0:	7265      	strb	r5, [r4, #9]
    16b2:	464b      	mov	r3, r9
    16b4:	7023      	strb	r3, [r4, #0]
    16b6:	2220      	movs	r2, #32
    16b8:	4691      	mov	r9, r2
    16ba:	6062      	str	r2, [r4, #4]
    16bc:	7226      	strb	r6, [r4, #8]
    16be:	2002      	movs	r0, #2
    16c0:	1c21      	adds	r1, r4, #0
    16c2:	47d0      	blx	sl
    16c4:	2002      	movs	r0, #2
    16c6:	47c0      	blx	r8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    16c8:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    16ca:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    16cc:	7265      	strb	r5, [r4, #9]
    16ce:	2303      	movs	r3, #3
    16d0:	7023      	strb	r3, [r4, #0]
    16d2:	464a      	mov	r2, r9
    16d4:	6062      	str	r2, [r4, #4]
    16d6:	2004      	movs	r0, #4
    16d8:	1c21      	adds	r1, r4, #0
    16da:	47d0      	blx	sl
    16dc:	2004      	movs	r0, #4
    16de:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    16e0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    16e2:	2000      	movs	r0, #0
    16e4:	1c21      	adds	r1, r4, #0
    16e6:	4b15      	ldr	r3, [pc, #84]	; (173c <system_clock_init+0x194>)
    16e8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    16ea:	2000      	movs	r0, #0
    16ec:	4b1e      	ldr	r3, [pc, #120]	; (1768 <system_clock_init+0x1c0>)
    16ee:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    16f0:	2007      	movs	r0, #7
    16f2:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16f4:	490f      	ldr	r1, [pc, #60]	; (1734 <system_clock_init+0x18c>)
    16f6:	22d0      	movs	r2, #208	; 0xd0
    16f8:	68cb      	ldr	r3, [r1, #12]
    16fa:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    16fc:	2bd0      	cmp	r3, #208	; 0xd0
    16fe:	d1fb      	bne.n	16f8 <system_clock_init+0x150>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1700:	4a1a      	ldr	r2, [pc, #104]	; (176c <system_clock_init+0x1c4>)
    1702:	2300      	movs	r3, #0
    1704:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1706:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1708:	7293      	strb	r3, [r2, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    170a:	a901      	add	r1, sp, #4
    170c:	2201      	movs	r2, #1
    170e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1710:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1712:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1714:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1716:	2307      	movs	r3, #7
    1718:	700b      	strb	r3, [r1, #0]
    171a:	2000      	movs	r0, #0
    171c:	4b10      	ldr	r3, [pc, #64]	; (1760 <system_clock_init+0x1b8>)
    171e:	4798      	blx	r3
    1720:	2000      	movs	r0, #0
    1722:	4b10      	ldr	r3, [pc, #64]	; (1764 <system_clock_init+0x1bc>)
    1724:	4798      	blx	r3
#endif
}
    1726:	b010      	add	sp, #64	; 0x40
    1728:	bc1c      	pop	{r2, r3, r4}
    172a:	4690      	mov	r8, r2
    172c:	4699      	mov	r9, r3
    172e:	46a2      	mov	sl, r4
    1730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	40000800 	.word	0x40000800
    1738:	41004000 	.word	0x41004000
    173c:	000019a5 	.word	0x000019a5
    1740:	000013e5 	.word	0x000013e5
    1744:	00001509 	.word	0x00001509
    1748:	00806024 	.word	0x00806024
    174c:	ff80ffff 	.word	0xff80ffff
    1750:	00001369 	.word	0x00001369
    1754:	00001499 	.word	0x00001499
    1758:	0000132d 	.word	0x0000132d
    175c:	00001771 	.word	0x00001771
    1760:	00001795 	.word	0x00001795
    1764:	00001849 	.word	0x00001849
    1768:	00001919 	.word	0x00001919
    176c:	40000400 	.word	0x40000400

00001770 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1770:	4b06      	ldr	r3, [pc, #24]	; (178c <system_gclk_init+0x1c>)
    1772:	6999      	ldr	r1, [r3, #24]
    1774:	2208      	movs	r2, #8
    1776:	430a      	orrs	r2, r1
    1778:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    177a:	2201      	movs	r2, #1
    177c:	4b04      	ldr	r3, [pc, #16]	; (1790 <system_gclk_init+0x20>)
    177e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1780:	1c19      	adds	r1, r3, #0
    1782:	780b      	ldrb	r3, [r1, #0]
    1784:	4213      	tst	r3, r2
    1786:	d1fc      	bne.n	1782 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1788:	4770      	bx	lr
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	40000400 	.word	0x40000400
    1790:	40000c00 	.word	0x40000c00

00001794 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1796:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1798:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    179a:	780d      	ldrb	r5, [r1, #0]
    179c:	022d      	lsls	r5, r5, #8
    179e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    17a0:	784b      	ldrb	r3, [r1, #1]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d002      	beq.n	17ac <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    17a6:	2380      	movs	r3, #128	; 0x80
    17a8:	02db      	lsls	r3, r3, #11
    17aa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    17ac:	7a4b      	ldrb	r3, [r1, #9]
    17ae:	2b00      	cmp	r3, #0
    17b0:	d002      	beq.n	17b8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    17b2:	2380      	movs	r3, #128	; 0x80
    17b4:	031b      	lsls	r3, r3, #12
    17b6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    17b8:	684c      	ldr	r4, [r1, #4]
    17ba:	2c01      	cmp	r4, #1
    17bc:	d917      	bls.n	17ee <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    17be:	1e63      	subs	r3, r4, #1
    17c0:	421c      	tst	r4, r3
    17c2:	d10f      	bne.n	17e4 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17c4:	2c02      	cmp	r4, #2
    17c6:	d906      	bls.n	17d6 <system_gclk_gen_set_config+0x42>
    17c8:	2302      	movs	r3, #2
    17ca:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    17cc:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    17ce:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17d0:	429c      	cmp	r4, r3
    17d2:	d8fb      	bhi.n	17cc <system_gclk_gen_set_config+0x38>
    17d4:	e000      	b.n	17d8 <system_gclk_gen_set_config+0x44>
    17d6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    17d8:	0217      	lsls	r7, r2, #8
    17da:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    17dc:	2380      	movs	r3, #128	; 0x80
    17de:	035b      	lsls	r3, r3, #13
    17e0:	431d      	orrs	r5, r3
    17e2:	e004      	b.n	17ee <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    17e4:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    17e6:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    17e8:	2380      	movs	r3, #128	; 0x80
    17ea:	029b      	lsls	r3, r3, #10
    17ec:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    17ee:	7a0b      	ldrb	r3, [r1, #8]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d002      	beq.n	17fa <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    17f4:	2380      	movs	r3, #128	; 0x80
    17f6:	039b      	lsls	r3, r3, #14
    17f8:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17fa:	4a0f      	ldr	r2, [pc, #60]	; (1838 <system_gclk_gen_set_config+0xa4>)
    17fc:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    17fe:	b25b      	sxtb	r3, r3
    1800:	2b00      	cmp	r3, #0
    1802:	dbfb      	blt.n	17fc <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1804:	4b0d      	ldr	r3, [pc, #52]	; (183c <system_gclk_gen_set_config+0xa8>)
    1806:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1808:	4b0d      	ldr	r3, [pc, #52]	; (1840 <system_gclk_gen_set_config+0xac>)
    180a:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    180c:	4a0a      	ldr	r2, [pc, #40]	; (1838 <system_gclk_gen_set_config+0xa4>)
    180e:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1810:	b25b      	sxtb	r3, r3
    1812:	2b00      	cmp	r3, #0
    1814:	dbfb      	blt.n	180e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1816:	4b08      	ldr	r3, [pc, #32]	; (1838 <system_gclk_gen_set_config+0xa4>)
    1818:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    181a:	1c1a      	adds	r2, r3, #0
    181c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    181e:	b25b      	sxtb	r3, r3
    1820:	2b00      	cmp	r3, #0
    1822:	dbfb      	blt.n	181c <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1824:	4b04      	ldr	r3, [pc, #16]	; (1838 <system_gclk_gen_set_config+0xa4>)
    1826:	6859      	ldr	r1, [r3, #4]
    1828:	2280      	movs	r2, #128	; 0x80
    182a:	0252      	lsls	r2, r2, #9
    182c:	400a      	ands	r2, r1
    182e:	4315      	orrs	r5, r2
    1830:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1832:	4b04      	ldr	r3, [pc, #16]	; (1844 <system_gclk_gen_set_config+0xb0>)
    1834:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1838:	40000c00 	.word	0x40000c00
    183c:	000001a9 	.word	0x000001a9
    1840:	40000c08 	.word	0x40000c08
    1844:	000001e9 	.word	0x000001e9

00001848 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1848:	b510      	push	{r4, lr}
    184a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    184c:	4a0b      	ldr	r2, [pc, #44]	; (187c <system_gclk_gen_enable+0x34>)
    184e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1850:	b25b      	sxtb	r3, r3
    1852:	2b00      	cmp	r3, #0
    1854:	dbfb      	blt.n	184e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1856:	4b0a      	ldr	r3, [pc, #40]	; (1880 <system_gclk_gen_enable+0x38>)
    1858:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    185a:	4b0a      	ldr	r3, [pc, #40]	; (1884 <system_gclk_gen_enable+0x3c>)
    185c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    185e:	4a07      	ldr	r2, [pc, #28]	; (187c <system_gclk_gen_enable+0x34>)
    1860:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1862:	b25b      	sxtb	r3, r3
    1864:	2b00      	cmp	r3, #0
    1866:	dbfb      	blt.n	1860 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1868:	4b04      	ldr	r3, [pc, #16]	; (187c <system_gclk_gen_enable+0x34>)
    186a:	6859      	ldr	r1, [r3, #4]
    186c:	2280      	movs	r2, #128	; 0x80
    186e:	0252      	lsls	r2, r2, #9
    1870:	430a      	orrs	r2, r1
    1872:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1874:	4b04      	ldr	r3, [pc, #16]	; (1888 <system_gclk_gen_enable+0x40>)
    1876:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1878:	bd10      	pop	{r4, pc}
    187a:	46c0      	nop			; (mov r8, r8)
    187c:	40000c00 	.word	0x40000c00
    1880:	000001a9 	.word	0x000001a9
    1884:	40000c04 	.word	0x40000c04
    1888:	000001e9 	.word	0x000001e9

0000188c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1890:	4a1a      	ldr	r2, [pc, #104]	; (18fc <system_gclk_gen_get_hz+0x70>)
    1892:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1894:	b25b      	sxtb	r3, r3
    1896:	2b00      	cmp	r3, #0
    1898:	dbfb      	blt.n	1892 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    189a:	4b19      	ldr	r3, [pc, #100]	; (1900 <system_gclk_gen_get_hz+0x74>)
    189c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    189e:	4b19      	ldr	r3, [pc, #100]	; (1904 <system_gclk_gen_get_hz+0x78>)
    18a0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18a2:	4a16      	ldr	r2, [pc, #88]	; (18fc <system_gclk_gen_get_hz+0x70>)
    18a4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    18a6:	b25b      	sxtb	r3, r3
    18a8:	2b00      	cmp	r3, #0
    18aa:	dbfb      	blt.n	18a4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    18ac:	4e13      	ldr	r6, [pc, #76]	; (18fc <system_gclk_gen_get_hz+0x70>)
    18ae:	6870      	ldr	r0, [r6, #4]
    18b0:	04c0      	lsls	r0, r0, #19
    18b2:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    18b4:	4b14      	ldr	r3, [pc, #80]	; (1908 <system_gclk_gen_get_hz+0x7c>)
    18b6:	4798      	blx	r3
    18b8:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18ba:	4b12      	ldr	r3, [pc, #72]	; (1904 <system_gclk_gen_get_hz+0x78>)
    18bc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    18be:	6876      	ldr	r6, [r6, #4]
    18c0:	02f6      	lsls	r6, r6, #11
    18c2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18c4:	4b11      	ldr	r3, [pc, #68]	; (190c <system_gclk_gen_get_hz+0x80>)
    18c6:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18c8:	4a0c      	ldr	r2, [pc, #48]	; (18fc <system_gclk_gen_get_hz+0x70>)
    18ca:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    18cc:	b25b      	sxtb	r3, r3
    18ce:	2b00      	cmp	r3, #0
    18d0:	dbfb      	blt.n	18ca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    18d2:	4b0a      	ldr	r3, [pc, #40]	; (18fc <system_gclk_gen_get_hz+0x70>)
    18d4:	689c      	ldr	r4, [r3, #8]
    18d6:	0a24      	lsrs	r4, r4, #8
    18d8:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18da:	4b0d      	ldr	r3, [pc, #52]	; (1910 <system_gclk_gen_get_hz+0x84>)
    18dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    18de:	2e00      	cmp	r6, #0
    18e0:	d107      	bne.n	18f2 <system_gclk_gen_get_hz+0x66>
    18e2:	2c01      	cmp	r4, #1
    18e4:	d907      	bls.n	18f6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    18e6:	1c28      	adds	r0, r5, #0
    18e8:	1c21      	adds	r1, r4, #0
    18ea:	4b0a      	ldr	r3, [pc, #40]	; (1914 <system_gclk_gen_get_hz+0x88>)
    18ec:	4798      	blx	r3
    18ee:	1c05      	adds	r5, r0, #0
    18f0:	e001      	b.n	18f6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    18f2:	3401      	adds	r4, #1
    18f4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    18f6:	1c28      	adds	r0, r5, #0
    18f8:	bd70      	pop	{r4, r5, r6, pc}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	40000c00 	.word	0x40000c00
    1900:	000001a9 	.word	0x000001a9
    1904:	40000c04 	.word	0x40000c04
    1908:	0000129d 	.word	0x0000129d
    190c:	40000c08 	.word	0x40000c08
    1910:	000001e9 	.word	0x000001e9
    1914:	0000494d 	.word	0x0000494d

00001918 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1918:	b510      	push	{r4, lr}
    191a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    191c:	4b06      	ldr	r3, [pc, #24]	; (1938 <system_gclk_chan_enable+0x20>)
    191e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1920:	4b06      	ldr	r3, [pc, #24]	; (193c <system_gclk_chan_enable+0x24>)
    1922:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1924:	4b06      	ldr	r3, [pc, #24]	; (1940 <system_gclk_chan_enable+0x28>)
    1926:	8859      	ldrh	r1, [r3, #2]
    1928:	2280      	movs	r2, #128	; 0x80
    192a:	01d2      	lsls	r2, r2, #7
    192c:	430a      	orrs	r2, r1
    192e:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <system_gclk_chan_enable+0x2c>)
    1932:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1934:	bd10      	pop	{r4, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	000001a9 	.word	0x000001a9
    193c:	40000c02 	.word	0x40000c02
    1940:	40000c00 	.word	0x40000c00
    1944:	000001e9 	.word	0x000001e9

00001948 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1948:	b510      	push	{r4, lr}
    194a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    194c:	4b0f      	ldr	r3, [pc, #60]	; (198c <system_gclk_chan_disable+0x44>)
    194e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1950:	4b0f      	ldr	r3, [pc, #60]	; (1990 <system_gclk_chan_disable+0x48>)
    1952:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1954:	4b0f      	ldr	r3, [pc, #60]	; (1994 <system_gclk_chan_disable+0x4c>)
    1956:	8858      	ldrh	r0, [r3, #2]
    1958:	0500      	lsls	r0, r0, #20
    195a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    195c:	8859      	ldrh	r1, [r3, #2]
    195e:	4a0e      	ldr	r2, [pc, #56]	; (1998 <system_gclk_chan_disable+0x50>)
    1960:	400a      	ands	r2, r1
    1962:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1964:	8859      	ldrh	r1, [r3, #2]
    1966:	4a0d      	ldr	r2, [pc, #52]	; (199c <system_gclk_chan_disable+0x54>)
    1968:	400a      	ands	r2, r1
    196a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    196c:	1c19      	adds	r1, r3, #0
    196e:	2280      	movs	r2, #128	; 0x80
    1970:	01d2      	lsls	r2, r2, #7
    1972:	884b      	ldrh	r3, [r1, #2]
    1974:	4213      	tst	r3, r2
    1976:	d1fc      	bne.n	1972 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1978:	4b06      	ldr	r3, [pc, #24]	; (1994 <system_gclk_chan_disable+0x4c>)
    197a:	0201      	lsls	r1, r0, #8
    197c:	8858      	ldrh	r0, [r3, #2]
    197e:	4a06      	ldr	r2, [pc, #24]	; (1998 <system_gclk_chan_disable+0x50>)
    1980:	4002      	ands	r2, r0
    1982:	430a      	orrs	r2, r1
    1984:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1986:	4b06      	ldr	r3, [pc, #24]	; (19a0 <system_gclk_chan_disable+0x58>)
    1988:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    198a:	bd10      	pop	{r4, pc}
    198c:	000001a9 	.word	0x000001a9
    1990:	40000c02 	.word	0x40000c02
    1994:	40000c00 	.word	0x40000c00
    1998:	fffff0ff 	.word	0xfffff0ff
    199c:	ffffbfff 	.word	0xffffbfff
    19a0:	000001e9 	.word	0x000001e9

000019a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    19a4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    19a6:	780c      	ldrb	r4, [r1, #0]
    19a8:	0224      	lsls	r4, r4, #8
    19aa:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    19ac:	4b02      	ldr	r3, [pc, #8]	; (19b8 <system_gclk_chan_set_config+0x14>)
    19ae:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    19b0:	b2a4      	uxth	r4, r4
    19b2:	4b02      	ldr	r3, [pc, #8]	; (19bc <system_gclk_chan_set_config+0x18>)
    19b4:	805c      	strh	r4, [r3, #2]
}
    19b6:	bd10      	pop	{r4, pc}
    19b8:	00001949 	.word	0x00001949
    19bc:	40000c00 	.word	0x40000c00

000019c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19c0:	b510      	push	{r4, lr}
    19c2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    19c4:	4b06      	ldr	r3, [pc, #24]	; (19e0 <system_gclk_chan_get_hz+0x20>)
    19c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19c8:	4b06      	ldr	r3, [pc, #24]	; (19e4 <system_gclk_chan_get_hz+0x24>)
    19ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    19cc:	4b06      	ldr	r3, [pc, #24]	; (19e8 <system_gclk_chan_get_hz+0x28>)
    19ce:	885c      	ldrh	r4, [r3, #2]
    19d0:	0524      	lsls	r4, r4, #20
    19d2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    19d4:	4b05      	ldr	r3, [pc, #20]	; (19ec <system_gclk_chan_get_hz+0x2c>)
    19d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    19d8:	1c20      	adds	r0, r4, #0
    19da:	4b05      	ldr	r3, [pc, #20]	; (19f0 <system_gclk_chan_get_hz+0x30>)
    19dc:	4798      	blx	r3
}
    19de:	bd10      	pop	{r4, pc}
    19e0:	000001a9 	.word	0x000001a9
    19e4:	40000c02 	.word	0x40000c02
    19e8:	40000c00 	.word	0x40000c00
    19ec:	000001e9 	.word	0x000001e9
    19f0:	0000188d 	.word	0x0000188d

000019f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    19f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    19f6:	78d3      	ldrb	r3, [r2, #3]
    19f8:	2b00      	cmp	r3, #0
    19fa:	d11e      	bne.n	1a3a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    19fc:	7813      	ldrb	r3, [r2, #0]
    19fe:	2b80      	cmp	r3, #128	; 0x80
    1a00:	d004      	beq.n	1a0c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a02:	061b      	lsls	r3, r3, #24
    1a04:	2480      	movs	r4, #128	; 0x80
    1a06:	0264      	lsls	r4, r4, #9
    1a08:	4323      	orrs	r3, r4
    1a0a:	e000      	b.n	1a0e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1a0c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a0e:	7854      	ldrb	r4, [r2, #1]
    1a10:	2502      	movs	r5, #2
    1a12:	43ac      	bics	r4, r5
    1a14:	d10a      	bne.n	1a2c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a16:	7894      	ldrb	r4, [r2, #2]
    1a18:	2c00      	cmp	r4, #0
    1a1a:	d103      	bne.n	1a24 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a1c:	2480      	movs	r4, #128	; 0x80
    1a1e:	02a4      	lsls	r4, r4, #10
    1a20:	4323      	orrs	r3, r4
    1a22:	e002      	b.n	1a2a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a24:	24c0      	movs	r4, #192	; 0xc0
    1a26:	02e4      	lsls	r4, r4, #11
    1a28:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a2a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a2c:	7854      	ldrb	r4, [r2, #1]
    1a2e:	3c01      	subs	r4, #1
    1a30:	2c01      	cmp	r4, #1
    1a32:	d804      	bhi.n	1a3e <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a34:	4c11      	ldr	r4, [pc, #68]	; (1a7c <_system_pinmux_config+0x88>)
    1a36:	4023      	ands	r3, r4
    1a38:	e001      	b.n	1a3e <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1a3a:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1a3c:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a3e:	040d      	lsls	r5, r1, #16
    1a40:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a42:	24a0      	movs	r4, #160	; 0xa0
    1a44:	05e4      	lsls	r4, r4, #23
    1a46:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a48:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a4a:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a4c:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a4e:	24d0      	movs	r4, #208	; 0xd0
    1a50:	0624      	lsls	r4, r4, #24
    1a52:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a54:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a56:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a58:	78d4      	ldrb	r4, [r2, #3]
    1a5a:	2c00      	cmp	r4, #0
    1a5c:	d10c      	bne.n	1a78 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a5e:	035c      	lsls	r4, r3, #13
    1a60:	d505      	bpl.n	1a6e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a62:	7893      	ldrb	r3, [r2, #2]
    1a64:	2b01      	cmp	r3, #1
    1a66:	d101      	bne.n	1a6c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1a68:	6181      	str	r1, [r0, #24]
    1a6a:	e000      	b.n	1a6e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1a6c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a6e:	7853      	ldrb	r3, [r2, #1]
    1a70:	3b01      	subs	r3, #1
    1a72:	2b01      	cmp	r3, #1
    1a74:	d800      	bhi.n	1a78 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1a76:	6081      	str	r1, [r0, #8]
		}
	}
}
    1a78:	bd30      	pop	{r4, r5, pc}
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	fffbffff 	.word	0xfffbffff

00001a80 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1a80:	b508      	push	{r3, lr}
    1a82:	1c03      	adds	r3, r0, #0
    1a84:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a86:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a88:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a8a:	2900      	cmp	r1, #0
    1a8c:	d103      	bne.n	1a96 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1a8e:	0958      	lsrs	r0, r3, #5
    1a90:	01c0      	lsls	r0, r0, #7
    1a92:	4904      	ldr	r1, [pc, #16]	; (1aa4 <system_pinmux_pin_set_config+0x24>)
    1a94:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1a96:	211f      	movs	r1, #31
    1a98:	400b      	ands	r3, r1
    1a9a:	2101      	movs	r1, #1
    1a9c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1a9e:	4b02      	ldr	r3, [pc, #8]	; (1aa8 <system_pinmux_pin_set_config+0x28>)
    1aa0:	4798      	blx	r3
}
    1aa2:	bd08      	pop	{r3, pc}
    1aa4:	41004400 	.word	0x41004400
    1aa8:	000019f5 	.word	0x000019f5

00001aac <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1aac:	4770      	bx	lr
    1aae:	46c0      	nop			; (mov r8, r8)

00001ab0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1ab0:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1ab2:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <system_init+0x14>)
    1ab4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1ab6:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <system_init+0x18>)
    1ab8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1aba:	4b04      	ldr	r3, [pc, #16]	; (1acc <system_init+0x1c>)
    1abc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1abe:	4b04      	ldr	r3, [pc, #16]	; (1ad0 <system_init+0x20>)
    1ac0:	4798      	blx	r3
}
    1ac2:	bd08      	pop	{r3, pc}
    1ac4:	000015a9 	.word	0x000015a9
    1ac8:	00000219 	.word	0x00000219
    1acc:	00001aad 	.word	0x00001aad
    1ad0:	000003e1 	.word	0x000003e1

00001ad4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1ad4:	1c93      	adds	r3, r2, #2
    1ad6:	009b      	lsls	r3, r3, #2
    1ad8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1ada:	2a02      	cmp	r2, #2
    1adc:	d104      	bne.n	1ae8 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1ade:	7e02      	ldrb	r2, [r0, #24]
    1ae0:	2310      	movs	r3, #16
    1ae2:	4313      	orrs	r3, r2
    1ae4:	7603      	strb	r3, [r0, #24]
    1ae6:	e00c      	b.n	1b02 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1ae8:	2a03      	cmp	r2, #3
    1aea:	d104      	bne.n	1af6 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1aec:	7e02      	ldrb	r2, [r0, #24]
    1aee:	2320      	movs	r3, #32
    1af0:	4313      	orrs	r3, r2
    1af2:	7603      	strb	r3, [r0, #24]
    1af4:	e005      	b.n	1b02 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1af6:	2301      	movs	r3, #1
    1af8:	4093      	lsls	r3, r2
    1afa:	1c1a      	adds	r2, r3, #0
    1afc:	7e03      	ldrb	r3, [r0, #24]
    1afe:	431a      	orrs	r2, r3
    1b00:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    1b02:	2000      	movs	r0, #0
    1b04:	4770      	bx	lr
    1b06:	46c0      	nop			; (mov r8, r8)

00001b08 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1b08:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1b0a:	0080      	lsls	r0, r0, #2
    1b0c:	4b14      	ldr	r3, [pc, #80]	; (1b60 <_tc_interrupt_handler+0x58>)
    1b0e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1b10:	6822      	ldr	r2, [r4, #0]
    1b12:	7b95      	ldrb	r5, [r2, #14]
    1b14:	7e23      	ldrb	r3, [r4, #24]
    1b16:	401d      	ands	r5, r3
    1b18:	7e63      	ldrb	r3, [r4, #25]
    1b1a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1b1c:	07eb      	lsls	r3, r5, #31
    1b1e:	d505      	bpl.n	1b2c <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1b20:	1c20      	adds	r0, r4, #0
    1b22:	68a2      	ldr	r2, [r4, #8]
    1b24:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1b26:	2301      	movs	r3, #1
    1b28:	6822      	ldr	r2, [r4, #0]
    1b2a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1b2c:	07ab      	lsls	r3, r5, #30
    1b2e:	d505      	bpl.n	1b3c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1b30:	1c20      	adds	r0, r4, #0
    1b32:	68e2      	ldr	r2, [r4, #12]
    1b34:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1b36:	2302      	movs	r3, #2
    1b38:	6822      	ldr	r2, [r4, #0]
    1b3a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1b3c:	06eb      	lsls	r3, r5, #27
    1b3e:	d505      	bpl.n	1b4c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1b40:	1c20      	adds	r0, r4, #0
    1b42:	6922      	ldr	r2, [r4, #16]
    1b44:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1b46:	2310      	movs	r3, #16
    1b48:	6822      	ldr	r2, [r4, #0]
    1b4a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1b4c:	06ab      	lsls	r3, r5, #26
    1b4e:	d505      	bpl.n	1b5c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1b50:	1c20      	adds	r0, r4, #0
    1b52:	6962      	ldr	r2, [r4, #20]
    1b54:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1b56:	6823      	ldr	r3, [r4, #0]
    1b58:	2220      	movs	r2, #32
    1b5a:	739a      	strb	r2, [r3, #14]
	}
}
    1b5c:	bd38      	pop	{r3, r4, r5, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	200008d4 	.word	0x200008d4

00001b64 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1b64:	b508      	push	{r3, lr}
    1b66:	2000      	movs	r0, #0
    1b68:	4b01      	ldr	r3, [pc, #4]	; (1b70 <TC3_Handler+0xc>)
    1b6a:	4798      	blx	r3
    1b6c:	bd08      	pop	{r3, pc}
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	00001b09 	.word	0x00001b09

00001b74 <TC4_Handler>:
    1b74:	b508      	push	{r3, lr}
    1b76:	2001      	movs	r0, #1
    1b78:	4b01      	ldr	r3, [pc, #4]	; (1b80 <TC4_Handler+0xc>)
    1b7a:	4798      	blx	r3
    1b7c:	bd08      	pop	{r3, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	00001b09 	.word	0x00001b09

00001b84 <TC5_Handler>:
    1b84:	b508      	push	{r3, lr}
    1b86:	2002      	movs	r0, #2
    1b88:	4b01      	ldr	r3, [pc, #4]	; (1b90 <TC5_Handler+0xc>)
    1b8a:	4798      	blx	r3
    1b8c:	bd08      	pop	{r3, pc}
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	00001b09 	.word	0x00001b09

00001b94 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1b94:	b570      	push	{r4, r5, r6, lr}
    1b96:	b084      	sub	sp, #16
    1b98:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1b9a:	ab01      	add	r3, sp, #4
    1b9c:	4a0a      	ldr	r2, [pc, #40]	; (1bc8 <_tc_get_inst_index+0x34>)
    1b9e:	ca70      	ldmia	r2!, {r4, r5, r6}
    1ba0:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1ba2:	9b01      	ldr	r3, [sp, #4]
    1ba4:	4283      	cmp	r3, r0
    1ba6:	d00a      	beq.n	1bbe <_tc_get_inst_index+0x2a>
    1ba8:	9c02      	ldr	r4, [sp, #8]
    1baa:	4284      	cmp	r4, r0
    1bac:	d005      	beq.n	1bba <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1bae:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1bb0:	9d03      	ldr	r5, [sp, #12]
    1bb2:	428d      	cmp	r5, r1
    1bb4:	d105      	bne.n	1bc2 <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1bb6:	2002      	movs	r0, #2
    1bb8:	e002      	b.n	1bc0 <_tc_get_inst_index+0x2c>
    1bba:	2001      	movs	r0, #1
    1bbc:	e000      	b.n	1bc0 <_tc_get_inst_index+0x2c>
    1bbe:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
    1bc0:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1bc2:	b004      	add	sp, #16
    1bc4:	bd70      	pop	{r4, r5, r6, pc}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	00005a88 	.word	0x00005a88

00001bcc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bce:	464f      	mov	r7, r9
    1bd0:	4646      	mov	r6, r8
    1bd2:	b4c0      	push	{r6, r7}
    1bd4:	b087      	sub	sp, #28
    1bd6:	1c04      	adds	r4, r0, #0
    1bd8:	1c0d      	adds	r5, r1, #0
    1bda:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1bdc:	1c08      	adds	r0, r1, #0
    1bde:	4b90      	ldr	r3, [pc, #576]	; (1e20 <tc_init+0x254>)
    1be0:	4798      	blx	r3
    1be2:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1be4:	4f8f      	ldr	r7, [pc, #572]	; (1e24 <tc_init+0x258>)
    1be6:	1c39      	adds	r1, r7, #0
    1be8:	310c      	adds	r1, #12
    1bea:	a805      	add	r0, sp, #20
    1bec:	2203      	movs	r2, #3
    1bee:	4e8e      	ldr	r6, [pc, #568]	; (1e28 <tc_init+0x25c>)
    1bf0:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1bf2:	1c39      	adds	r1, r7, #0
    1bf4:	3110      	adds	r1, #16
    1bf6:	a803      	add	r0, sp, #12
    1bf8:	2206      	movs	r2, #6
    1bfa:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1bfc:	2300      	movs	r3, #0
    1bfe:	60a3      	str	r3, [r4, #8]
    1c00:	60e3      	str	r3, [r4, #12]
    1c02:	6123      	str	r3, [r4, #16]
    1c04:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1c06:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1c08:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1c0a:	4648      	mov	r0, r9
    1c0c:	0082      	lsls	r2, r0, #2
    1c0e:	4b87      	ldr	r3, [pc, #540]	; (1e2c <tc_init+0x260>)
    1c10:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1c12:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1c14:	4641      	mov	r1, r8
    1c16:	788b      	ldrb	r3, [r1, #2]
    1c18:	2b08      	cmp	r3, #8
    1c1a:	d104      	bne.n	1c26 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c1c:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1c1e:	464a      	mov	r2, r9
    1c20:	07d2      	lsls	r2, r2, #31
    1c22:	d400      	bmi.n	1c26 <tc_init+0x5a>
    1c24:	e0f6      	b.n	1e14 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1c26:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1c28:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1c2a:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1c2c:	07d9      	lsls	r1, r3, #31
    1c2e:	d500      	bpl.n	1c32 <tc_init+0x66>
    1c30:	e0f0      	b.n	1e14 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1c32:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1c34:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1c36:	06da      	lsls	r2, r3, #27
    1c38:	d500      	bpl.n	1c3c <tc_init+0x70>
    1c3a:	e0eb      	b.n	1e14 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1c3c:	882b      	ldrh	r3, [r5, #0]
    1c3e:	0799      	lsls	r1, r3, #30
    1c40:	d500      	bpl.n	1c44 <tc_init+0x78>
    1c42:	e0e7      	b.n	1e14 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1c44:	4642      	mov	r2, r8
    1c46:	7c13      	ldrb	r3, [r2, #16]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d00c      	beq.n	1c66 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1c4c:	a902      	add	r1, sp, #8
    1c4e:	2301      	movs	r3, #1
    1c50:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1c52:	2200      	movs	r2, #0
    1c54:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1c56:	4640      	mov	r0, r8
    1c58:	6980      	ldr	r0, [r0, #24]
    1c5a:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1c5c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1c5e:	4642      	mov	r2, r8
    1c60:	7d10      	ldrb	r0, [r2, #20]
    1c62:	4b73      	ldr	r3, [pc, #460]	; (1e30 <tc_init+0x264>)
    1c64:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1c66:	4640      	mov	r0, r8
    1c68:	7f03      	ldrb	r3, [r0, #28]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d00b      	beq.n	1c86 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1c6e:	a902      	add	r1, sp, #8
    1c70:	2301      	movs	r3, #1
    1c72:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1c74:	2200      	movs	r2, #0
    1c76:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1c78:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1c7a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1c7c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1c7e:	6a03      	ldr	r3, [r0, #32]
    1c80:	b2d8      	uxtb	r0, r3
    1c82:	4b6b      	ldr	r3, [pc, #428]	; (1e30 <tc_init+0x264>)
    1c84:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1c86:	4b6b      	ldr	r3, [pc, #428]	; (1e34 <tc_init+0x268>)
    1c88:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1c8a:	4648      	mov	r0, r9
    1c8c:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1c8e:	a803      	add	r0, sp, #12
    1c90:	5a12      	ldrh	r2, [r2, r0]
    1c92:	430a      	orrs	r2, r1
    1c94:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1c96:	4641      	mov	r1, r8
    1c98:	788b      	ldrb	r3, [r1, #2]
    1c9a:	2b08      	cmp	r3, #8
    1c9c:	d108      	bne.n	1cb0 <tc_init+0xe4>
    1c9e:	4b65      	ldr	r3, [pc, #404]	; (1e34 <tc_init+0x268>)
    1ca0:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1ca2:	4648      	mov	r0, r9
    1ca4:	3001      	adds	r0, #1
    1ca6:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1ca8:	a903      	add	r1, sp, #12
    1caa:	5a41      	ldrh	r1, [r0, r1]
    1cac:	430a      	orrs	r2, r1
    1cae:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1cb0:	a901      	add	r1, sp, #4
    1cb2:	4642      	mov	r2, r8
    1cb4:	7813      	ldrb	r3, [r2, #0]
    1cb6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1cb8:	ab05      	add	r3, sp, #20
    1cba:	4648      	mov	r0, r9
    1cbc:	5c1e      	ldrb	r6, [r3, r0]
    1cbe:	1c30      	adds	r0, r6, #0
    1cc0:	4b5d      	ldr	r3, [pc, #372]	; (1e38 <tc_init+0x26c>)
    1cc2:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1cc4:	1c30      	adds	r0, r6, #0
    1cc6:	4b5d      	ldr	r3, [pc, #372]	; (1e3c <tc_init+0x270>)
    1cc8:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1cca:	4641      	mov	r1, r8
    1ccc:	8888      	ldrh	r0, [r1, #4]
    1cce:	890b      	ldrh	r3, [r1, #8]
    1cd0:	4303      	orrs	r3, r0
    1cd2:	7988      	ldrb	r0, [r1, #6]
    1cd4:	788a      	ldrb	r2, [r1, #2]
    1cd6:	4310      	orrs	r0, r2
    1cd8:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1cda:	784b      	ldrb	r3, [r1, #1]
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d002      	beq.n	1ce6 <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1ce0:	2380      	movs	r3, #128	; 0x80
    1ce2:	011b      	lsls	r3, r3, #4
    1ce4:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ce6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1ce8:	227f      	movs	r2, #127	; 0x7f
    1cea:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1cec:	4393      	bics	r3, r2
    1cee:	d1fc      	bne.n	1cea <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1cf0:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1cf2:	4642      	mov	r2, r8
    1cf4:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1cf6:	1e43      	subs	r3, r0, #1
    1cf8:	4198      	sbcs	r0, r3
    1cfa:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
    1cfc:	7b93      	ldrb	r3, [r2, #14]
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d001      	beq.n	1d06 <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1d02:	2301      	movs	r3, #1
    1d04:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d06:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d08:	227f      	movs	r2, #127	; 0x7f
    1d0a:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1d0c:	4393      	bics	r3, r2
    1d0e:	d1fc      	bne.n	1d0a <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1d10:	23ff      	movs	r3, #255	; 0xff
    1d12:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1d14:	2800      	cmp	r0, #0
    1d16:	d005      	beq.n	1d24 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d18:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d1a:	227f      	movs	r2, #127	; 0x7f
    1d1c:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1d1e:	4393      	bics	r3, r2
    1d20:	d1fc      	bne.n	1d1c <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1d22:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1d24:	4643      	mov	r3, r8
    1d26:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1d28:	7adb      	ldrb	r3, [r3, #11]
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d001      	beq.n	1d32 <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1d2e:	2310      	movs	r3, #16
    1d30:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1d32:	4641      	mov	r1, r8
    1d34:	7b0b      	ldrb	r3, [r1, #12]
    1d36:	2b00      	cmp	r3, #0
    1d38:	d001      	beq.n	1d3e <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1d3a:	2320      	movs	r3, #32
    1d3c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d3e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d40:	227f      	movs	r2, #127	; 0x7f
    1d42:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d44:	4393      	bics	r3, r2
    1d46:	d1fc      	bne.n	1d42 <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1d48:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d4a:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d4c:	217f      	movs	r1, #127	; 0x7f
    1d4e:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d50:	438b      	bics	r3, r1
    1d52:	d1fc      	bne.n	1d4e <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1d54:	7923      	ldrb	r3, [r4, #4]
    1d56:	2b04      	cmp	r3, #4
    1d58:	d005      	beq.n	1d66 <tc_init+0x19a>
    1d5a:	2b08      	cmp	r3, #8
    1d5c:	d041      	beq.n	1de2 <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1d5e:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1d60:	2b00      	cmp	r3, #0
    1d62:	d157      	bne.n	1e14 <tc_init+0x248>
    1d64:	e024      	b.n	1db0 <tc_init+0x1e4>
    1d66:	217f      	movs	r1, #127	; 0x7f
    1d68:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1d6a:	438b      	bics	r3, r1
    1d6c:	d1fc      	bne.n	1d68 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1d6e:	2328      	movs	r3, #40	; 0x28
    1d70:	4642      	mov	r2, r8
    1d72:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1d74:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d76:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d78:	227f      	movs	r2, #127	; 0x7f
    1d7a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1d7c:	4393      	bics	r3, r2
    1d7e:	d1fc      	bne.n	1d7a <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1d80:	2329      	movs	r3, #41	; 0x29
    1d82:	4640      	mov	r0, r8
    1d84:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1d86:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d88:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d8a:	227f      	movs	r2, #127	; 0x7f
    1d8c:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1d8e:	4393      	bics	r3, r2
    1d90:	d1fc      	bne.n	1d8c <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1d92:	232a      	movs	r3, #42	; 0x2a
    1d94:	4641      	mov	r1, r8
    1d96:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1d98:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d9a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d9c:	227f      	movs	r2, #127	; 0x7f
    1d9e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1da0:	4393      	bics	r3, r2
    1da2:	d1fc      	bne.n	1d9e <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1da4:	232b      	movs	r3, #43	; 0x2b
    1da6:	4642      	mov	r2, r8
    1da8:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1daa:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1dac:	2000      	movs	r0, #0
    1dae:	e031      	b.n	1e14 <tc_init+0x248>
    1db0:	217f      	movs	r1, #127	; 0x7f
    1db2:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1db4:	438b      	bics	r3, r1
    1db6:	d1fc      	bne.n	1db2 <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1db8:	4640      	mov	r0, r8
    1dba:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    1dbc:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1dbe:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dc0:	227f      	movs	r2, #127	; 0x7f
    1dc2:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1dc4:	4393      	bics	r3, r2
    1dc6:	d1fc      	bne.n	1dc2 <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1dc8:	4641      	mov	r1, r8
    1dca:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1dcc:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1dce:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dd0:	227f      	movs	r2, #127	; 0x7f
    1dd2:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1dd4:	4393      	bics	r3, r2
    1dd6:	d1fc      	bne.n	1dd2 <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1dd8:	4642      	mov	r2, r8
    1dda:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1ddc:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1dde:	2000      	movs	r0, #0
    1de0:	e018      	b.n	1e14 <tc_init+0x248>
    1de2:	217f      	movs	r1, #127	; 0x7f
    1de4:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1de6:	438b      	bics	r3, r1
    1de8:	d1fc      	bne.n	1de4 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1dea:	4643      	mov	r3, r8
    1dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1dee:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1df0:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1df2:	227f      	movs	r2, #127	; 0x7f
    1df4:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1df6:	4393      	bics	r3, r2
    1df8:	d1fc      	bne.n	1df4 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1dfa:	4640      	mov	r0, r8
    1dfc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1dfe:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1e00:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1e02:	227f      	movs	r2, #127	; 0x7f
    1e04:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1e06:	4393      	bics	r3, r2
    1e08:	d1fc      	bne.n	1e04 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1e0a:	4641      	mov	r1, r8
    1e0c:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1e0e:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1e10:	2000      	movs	r0, #0
    1e12:	e7ff      	b.n	1e14 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1e14:	b007      	add	sp, #28
    1e16:	bc0c      	pop	{r2, r3}
    1e18:	4690      	mov	r8, r2
    1e1a:	4699      	mov	r9, r3
    1e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	00001b95 	.word	0x00001b95
    1e24:	00005a88 	.word	0x00005a88
    1e28:	00004a7d 	.word	0x00004a7d
    1e2c:	200008d4 	.word	0x200008d4
    1e30:	00001a81 	.word	0x00001a81
    1e34:	40000400 	.word	0x40000400
    1e38:	000019a5 	.word	0x000019a5
    1e3c:	00001919 	.word	0x00001919

00001e40 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1e40:	6802      	ldr	r2, [r0, #0]
    1e42:	217f      	movs	r1, #127	; 0x7f
    1e44:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1e46:	438b      	bics	r3, r1
    1e48:	d1fc      	bne.n	1e44 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1e4a:	7903      	ldrb	r3, [r0, #4]
    1e4c:	2b04      	cmp	r3, #4
    1e4e:	d005      	beq.n	1e5c <tc_get_count_value+0x1c>
    1e50:	2b08      	cmp	r3, #8
    1e52:	d009      	beq.n	1e68 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1e54:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1e56:	2b00      	cmp	r3, #0
    1e58:	d108      	bne.n	1e6c <tc_get_count_value+0x2c>
    1e5a:	e002      	b.n	1e62 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1e5c:	7c10      	ldrb	r0, [r2, #16]
    1e5e:	b2c0      	uxtb	r0, r0
    1e60:	e004      	b.n	1e6c <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1e62:	8a10      	ldrh	r0, [r2, #16]
    1e64:	b280      	uxth	r0, r0
    1e66:	e001      	b.n	1e6c <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    1e68:	6910      	ldr	r0, [r2, #16]
    1e6a:	e7ff      	b.n	1e6c <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    1e6c:	4770      	bx	lr
    1e6e:	46c0      	nop			; (mov r8, r8)

00001e70 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1e70:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1e72:	6804      	ldr	r4, [r0, #0]
    1e74:	257f      	movs	r5, #127	; 0x7f
    1e76:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1e78:	43ab      	bics	r3, r5
    1e7a:	d1fc      	bne.n	1e76 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1e7c:	7903      	ldrb	r3, [r0, #4]
    1e7e:	2b04      	cmp	r3, #4
    1e80:	d005      	beq.n	1e8e <tc_set_compare_value+0x1e>
    1e82:	2b08      	cmp	r3, #8
    1e84:	d014      	beq.n	1eb0 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1e86:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d119      	bne.n	1ec0 <tc_set_compare_value+0x50>
    1e8c:	e007      	b.n	1e9e <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1e8e:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    1e90:	2901      	cmp	r1, #1
    1e92:	d815      	bhi.n	1ec0 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    1e94:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    1e96:	1861      	adds	r1, r4, r1
    1e98:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    1e9a:	2000      	movs	r0, #0
    1e9c:	e010      	b.n	1ec0 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1e9e:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    1ea0:	2901      	cmp	r1, #1
    1ea2:	d80d      	bhi.n	1ec0 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    1ea4:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    1ea6:	310c      	adds	r1, #12
    1ea8:	0049      	lsls	r1, r1, #1
    1eaa:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    1eac:	2000      	movs	r0, #0
    1eae:	e007      	b.n	1ec0 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1eb0:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    1eb2:	2901      	cmp	r1, #1
    1eb4:	d804      	bhi.n	1ec0 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    1eb6:	3106      	adds	r1, #6
    1eb8:	0089      	lsls	r1, r1, #2
    1eba:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    1ebc:	2000      	movs	r0, #0
    1ebe:	e7ff      	b.n	1ec0 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    1ec0:	bd30      	pop	{r4, r5, pc}
    1ec2:	46c0      	nop			; (mov r8, r8)

00001ec4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1ec4:	e7fe      	b.n	1ec4 <Dummy_Handler>
    1ec6:	46c0      	nop			; (mov r8, r8)

00001ec8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1ec8:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1eca:	4b1c      	ldr	r3, [pc, #112]	; (1f3c <Reset_Handler+0x74>)
    1ecc:	4a1c      	ldr	r2, [pc, #112]	; (1f40 <Reset_Handler+0x78>)
    1ece:	429a      	cmp	r2, r3
    1ed0:	d003      	beq.n	1eda <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1ed2:	4b1c      	ldr	r3, [pc, #112]	; (1f44 <Reset_Handler+0x7c>)
    1ed4:	4a19      	ldr	r2, [pc, #100]	; (1f3c <Reset_Handler+0x74>)
    1ed6:	429a      	cmp	r2, r3
    1ed8:	d304      	bcc.n	1ee4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1eda:	4b1b      	ldr	r3, [pc, #108]	; (1f48 <Reset_Handler+0x80>)
    1edc:	4a1b      	ldr	r2, [pc, #108]	; (1f4c <Reset_Handler+0x84>)
    1ede:	429a      	cmp	r2, r3
    1ee0:	d310      	bcc.n	1f04 <Reset_Handler+0x3c>
    1ee2:	e01b      	b.n	1f1c <Reset_Handler+0x54>
    1ee4:	4b1a      	ldr	r3, [pc, #104]	; (1f50 <Reset_Handler+0x88>)
    1ee6:	4817      	ldr	r0, [pc, #92]	; (1f44 <Reset_Handler+0x7c>)
    1ee8:	3003      	adds	r0, #3
    1eea:	1ac0      	subs	r0, r0, r3
    1eec:	0880      	lsrs	r0, r0, #2
    1eee:	3001      	adds	r0, #1
    1ef0:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1ef2:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1ef4:	4911      	ldr	r1, [pc, #68]	; (1f3c <Reset_Handler+0x74>)
    1ef6:	4a12      	ldr	r2, [pc, #72]	; (1f40 <Reset_Handler+0x78>)
    1ef8:	58d4      	ldr	r4, [r2, r3]
    1efa:	50cc      	str	r4, [r1, r3]
    1efc:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1efe:	4283      	cmp	r3, r0
    1f00:	d1fa      	bne.n	1ef8 <Reset_Handler+0x30>
    1f02:	e7ea      	b.n	1eda <Reset_Handler+0x12>
    1f04:	4b11      	ldr	r3, [pc, #68]	; (1f4c <Reset_Handler+0x84>)
    1f06:	1d1a      	adds	r2, r3, #4
    1f08:	490f      	ldr	r1, [pc, #60]	; (1f48 <Reset_Handler+0x80>)
    1f0a:	3103      	adds	r1, #3
    1f0c:	1a89      	subs	r1, r1, r2
    1f0e:	0889      	lsrs	r1, r1, #2
    1f10:	0089      	lsls	r1, r1, #2
    1f12:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1f14:	2100      	movs	r1, #0
    1f16:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1f18:	4293      	cmp	r3, r2
    1f1a:	d1fc      	bne.n	1f16 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f1c:	4b0d      	ldr	r3, [pc, #52]	; (1f54 <Reset_Handler+0x8c>)
    1f1e:	217f      	movs	r1, #127	; 0x7f
    1f20:	4a0d      	ldr	r2, [pc, #52]	; (1f58 <Reset_Handler+0x90>)
    1f22:	438a      	bics	r2, r1
    1f24:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1f26:	4b0d      	ldr	r3, [pc, #52]	; (1f5c <Reset_Handler+0x94>)
    1f28:	6859      	ldr	r1, [r3, #4]
    1f2a:	2280      	movs	r2, #128	; 0x80
    1f2c:	430a      	orrs	r2, r1
    1f2e:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1f30:	4b0b      	ldr	r3, [pc, #44]	; (1f60 <Reset_Handler+0x98>)
    1f32:	4798      	blx	r3

        /* Branch to main function */
        main();
    1f34:	4b0b      	ldr	r3, [pc, #44]	; (1f64 <Reset_Handler+0x9c>)
    1f36:	4798      	blx	r3
    1f38:	e7fe      	b.n	1f38 <Reset_Handler+0x70>
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	20000000 	.word	0x20000000
    1f40:	00005c04 	.word	0x00005c04
    1f44:	20000070 	.word	0x20000070
    1f48:	200009f4 	.word	0x200009f4
    1f4c:	20000070 	.word	0x20000070
    1f50:	20000004 	.word	0x20000004
    1f54:	e000ed00 	.word	0xe000ed00
    1f58:	00000000 	.word	0x00000000
    1f5c:	41004000 	.word	0x41004000
    1f60:	00004a31 	.word	0x00004a31
    1f64:	00004661 	.word	0x00004661

00001f68 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f6a:	4647      	mov	r7, r8
    1f6c:	b480      	push	{r7}
    1f6e:	1c0c      	adds	r4, r1, #0
    1f70:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1f72:	2800      	cmp	r0, #0
    1f74:	d10c      	bne.n	1f90 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    1f76:	2a00      	cmp	r2, #0
    1f78:	dd0d      	ble.n	1f96 <_read+0x2e>
    1f7a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1f7c:	4e09      	ldr	r6, [pc, #36]	; (1fa4 <_read+0x3c>)
    1f7e:	4d0a      	ldr	r5, [pc, #40]	; (1fa8 <_read+0x40>)
    1f80:	6830      	ldr	r0, [r6, #0]
    1f82:	1c21      	adds	r1, r4, #0
    1f84:	682b      	ldr	r3, [r5, #0]
    1f86:	4798      	blx	r3
		ptr++;
    1f88:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1f8a:	42bc      	cmp	r4, r7
    1f8c:	d1f8      	bne.n	1f80 <_read+0x18>
    1f8e:	e004      	b.n	1f9a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1f90:	2001      	movs	r0, #1
    1f92:	4240      	negs	r0, r0
    1f94:	e002      	b.n	1f9c <_read+0x34>
	}

	for (; len > 0; --len) {
    1f96:	2000      	movs	r0, #0
    1f98:	e000      	b.n	1f9c <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    1f9a:	4640      	mov	r0, r8
	}
	return nChars;
}
    1f9c:	bc04      	pop	{r2}
    1f9e:	4690      	mov	r8, r2
    1fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	200008e8 	.word	0x200008e8
    1fa8:	200008e0 	.word	0x200008e0

00001fac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fae:	4647      	mov	r7, r8
    1fb0:	b480      	push	{r7}
    1fb2:	1c0e      	adds	r6, r1, #0
    1fb4:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1fb6:	3801      	subs	r0, #1
    1fb8:	2802      	cmp	r0, #2
    1fba:	d810      	bhi.n	1fde <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1fbc:	2a00      	cmp	r2, #0
    1fbe:	d011      	beq.n	1fe4 <_write+0x38>
    1fc0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1fc2:	4b0d      	ldr	r3, [pc, #52]	; (1ff8 <_write+0x4c>)
    1fc4:	4698      	mov	r8, r3
    1fc6:	4f0d      	ldr	r7, [pc, #52]	; (1ffc <_write+0x50>)
    1fc8:	4643      	mov	r3, r8
    1fca:	6818      	ldr	r0, [r3, #0]
    1fcc:	5d31      	ldrb	r1, [r6, r4]
    1fce:	683b      	ldr	r3, [r7, #0]
    1fd0:	4798      	blx	r3
    1fd2:	2800      	cmp	r0, #0
    1fd4:	db08      	blt.n	1fe8 <_write+0x3c>
			return -1;
		}
		++nChars;
    1fd6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1fd8:	42a5      	cmp	r5, r4
    1fda:	d1f5      	bne.n	1fc8 <_write+0x1c>
    1fdc:	e007      	b.n	1fee <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1fde:	2001      	movs	r0, #1
    1fe0:	4240      	negs	r0, r0
    1fe2:	e005      	b.n	1ff0 <_write+0x44>
	}

	for (; len != 0; --len) {
    1fe4:	2000      	movs	r0, #0
    1fe6:	e003      	b.n	1ff0 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1fe8:	2001      	movs	r0, #1
    1fea:	4240      	negs	r0, r0
    1fec:	e000      	b.n	1ff0 <_write+0x44>
		}
		++nChars;
    1fee:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    1ff0:	bc04      	pop	{r2}
    1ff2:	4690      	mov	r8, r2
    1ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	200008e8 	.word	0x200008e8
    1ffc:	200008e4 	.word	0x200008e4

00002000 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2000:	4b06      	ldr	r3, [pc, #24]	; (201c <STACK_SIZE+0x1c>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	2b00      	cmp	r3, #0
    2006:	d102      	bne.n	200e <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    2008:	4a05      	ldr	r2, [pc, #20]	; (2020 <STACK_SIZE+0x20>)
    200a:	4b04      	ldr	r3, [pc, #16]	; (201c <STACK_SIZE+0x1c>)
    200c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    200e:	4a03      	ldr	r2, [pc, #12]	; (201c <STACK_SIZE+0x1c>)
    2010:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    2012:	1818      	adds	r0, r3, r0
    2014:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    2016:	1c18      	adds	r0, r3, #0
    2018:	4770      	bx	lr
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	200000cc 	.word	0x200000cc
    2020:	200029f8 	.word	0x200029f8

00002024 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    2024:	2001      	movs	r0, #1
}
    2026:	4240      	negs	r0, r0
    2028:	4770      	bx	lr
    202a:	46c0      	nop			; (mov r8, r8)

0000202c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    202c:	2380      	movs	r3, #128	; 0x80
    202e:	019b      	lsls	r3, r3, #6
    2030:	604b      	str	r3, [r1, #4]

	return 0;
}
    2032:	2000      	movs	r0, #0
    2034:	4770      	bx	lr
    2036:	46c0      	nop			; (mov r8, r8)

00002038 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2038:	2001      	movs	r0, #1
    203a:	4770      	bx	lr

0000203c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    203c:	2000      	movs	r0, #0
    203e:	4770      	bx	lr

00002040 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2040:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    2042:	490d      	ldr	r1, [pc, #52]	; (2078 <NWK_Init+0x38>)
    2044:	2300      	movs	r3, #0
    2046:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    2048:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    204a:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    204c:	2258      	movs	r2, #88	; 0x58
    204e:	528b      	strh	r3, [r1, r2]
    2050:	1c0b      	adds	r3, r1, #0
    2052:	3308      	adds	r3, #8
    2054:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2056:	2200      	movs	r2, #0
    2058:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    205a:	428b      	cmp	r3, r1
    205c:	d1fc      	bne.n	2058 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    205e:	4b07      	ldr	r3, [pc, #28]	; (207c <NWK_Init+0x3c>)
    2060:	4798      	blx	r3
	nwkRxInit();
    2062:	4b07      	ldr	r3, [pc, #28]	; (2080 <NWK_Init+0x40>)
    2064:	4798      	blx	r3
	nwkFrameInit();
    2066:	4b07      	ldr	r3, [pc, #28]	; (2084 <NWK_Init+0x44>)
    2068:	4798      	blx	r3
	nwkDataReqInit();
    206a:	4b07      	ldr	r3, [pc, #28]	; (2088 <NWK_Init+0x48>)
    206c:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    206e:	4b07      	ldr	r3, [pc, #28]	; (208c <NWK_Init+0x4c>)
    2070:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2072:	4b07      	ldr	r3, [pc, #28]	; (2090 <NWK_Init+0x50>)
    2074:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    2076:	bd08      	pop	{r3, pc}
    2078:	200008ec 	.word	0x200008ec
    207c:	00002f1d 	.word	0x00002f1d
    2080:	00002789 	.word	0x00002789
    2084:	000022b5 	.word	0x000022b5
    2088:	00002131 	.word	0x00002131
    208c:	000023a9 	.word	0x000023a9
    2090:	00002be9 	.word	0x00002be9

00002094 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    2094:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    2096:	4b02      	ldr	r3, [pc, #8]	; (20a0 <NWK_SetAddr+0xc>)
    2098:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    209a:	4b02      	ldr	r3, [pc, #8]	; (20a4 <NWK_SetAddr+0x10>)
    209c:	4798      	blx	r3
}
    209e:	bd08      	pop	{r3, pc}
    20a0:	200008ec 	.word	0x200008ec
    20a4:	00003345 	.word	0x00003345

000020a8 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    20a8:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    20aa:	4b02      	ldr	r3, [pc, #8]	; (20b4 <NWK_SetPanId+0xc>)
    20ac:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    20ae:	4b02      	ldr	r3, [pc, #8]	; (20b8 <NWK_SetPanId+0x10>)
    20b0:	4798      	blx	r3
}
    20b2:	bd08      	pop	{r3, pc}
    20b4:	200008ec 	.word	0x200008ec
    20b8:	00003325 	.word	0x00003325

000020bc <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    20bc:	3002      	adds	r0, #2
    20be:	0080      	lsls	r0, r0, #2
    20c0:	4b01      	ldr	r3, [pc, #4]	; (20c8 <NWK_OpenEndpoint+0xc>)
    20c2:	50c1      	str	r1, [r0, r3]
}
    20c4:	4770      	bx	lr
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	200008ec 	.word	0x200008ec

000020cc <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    20cc:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    20ce:	4b04      	ldr	r3, [pc, #16]	; (20e0 <NWK_TaskHandler+0x14>)
    20d0:	4798      	blx	r3
	nwkTxTaskHandler();
    20d2:	4b04      	ldr	r3, [pc, #16]	; (20e4 <NWK_TaskHandler+0x18>)
    20d4:	4798      	blx	r3
	nwkDataReqTaskHandler();
    20d6:	4b04      	ldr	r3, [pc, #16]	; (20e8 <NWK_TaskHandler+0x1c>)
    20d8:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    20da:	4b04      	ldr	r3, [pc, #16]	; (20ec <NWK_TaskHandler+0x20>)
    20dc:	4798      	blx	r3
#endif
}
    20de:	bd08      	pop	{r3, pc}
    20e0:	00002825 	.word	0x00002825
    20e4:	00003121 	.word	0x00003121
    20e8:	00002171 	.word	0x00002171
    20ec:	00002cdd 	.word	0x00002cdd

000020f0 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    20f0:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    20f2:	4b0d      	ldr	r3, [pc, #52]	; (2128 <nwkDataReqTxConf+0x38>)
    20f4:	681b      	ldr	r3, [r3, #0]
    20f6:	2b00      	cmp	r3, #0
    20f8:	d012      	beq.n	2120 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    20fa:	685a      	ldr	r2, [r3, #4]
    20fc:	4282      	cmp	r2, r0
    20fe:	d10c      	bne.n	211a <nwkDataReqTxConf+0x2a>
    2100:	e002      	b.n	2108 <nwkDataReqTxConf+0x18>
    2102:	685a      	ldr	r2, [r3, #4]
    2104:	4282      	cmp	r2, r0
    2106:	d108      	bne.n	211a <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    2108:	2285      	movs	r2, #133	; 0x85
    210a:	5c82      	ldrb	r2, [r0, r2]
    210c:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    210e:	2288      	movs	r2, #136	; 0x88
    2110:	5c82      	ldrb	r2, [r0, r2]
    2112:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2114:	2202      	movs	r2, #2
    2116:	721a      	strb	r2, [r3, #8]
			break;
    2118:	e002      	b.n	2120 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    211a:	681b      	ldr	r3, [r3, #0]
    211c:	2b00      	cmp	r3, #0
    211e:	d1f0      	bne.n	2102 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    2120:	4b02      	ldr	r3, [pc, #8]	; (212c <nwkDataReqTxConf+0x3c>)
    2122:	4798      	blx	r3
}
    2124:	bd08      	pop	{r3, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	200000d0 	.word	0x200000d0
    212c:	00002339 	.word	0x00002339

00002130 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2130:	2200      	movs	r2, #0
    2132:	4b01      	ldr	r3, [pc, #4]	; (2138 <nwkDataReqInit+0x8>)
    2134:	601a      	str	r2, [r3, #0]
}
    2136:	4770      	bx	lr
    2138:	200000d0 	.word	0x200000d0

0000213c <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    213c:	2300      	movs	r3, #0
    213e:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    2140:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    2142:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    2144:	4a08      	ldr	r2, [pc, #32]	; (2168 <NWK_DataReq+0x2c>)
    2146:	2358      	movs	r3, #88	; 0x58
    2148:	5ad1      	ldrh	r1, [r2, r3]
    214a:	3101      	adds	r1, #1
    214c:	52d1      	strh	r1, [r2, r3]

	if (NULL == nwkDataReqQueue) {
    214e:	4b07      	ldr	r3, [pc, #28]	; (216c <NWK_DataReq+0x30>)
    2150:	681b      	ldr	r3, [r3, #0]
    2152:	2b00      	cmp	r3, #0
    2154:	d103      	bne.n	215e <NWK_DataReq+0x22>
		req->next = NULL;
    2156:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2158:	4b04      	ldr	r3, [pc, #16]	; (216c <NWK_DataReq+0x30>)
    215a:	6018      	str	r0, [r3, #0]
    215c:	e002      	b.n	2164 <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    215e:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2160:	4b02      	ldr	r3, [pc, #8]	; (216c <NWK_DataReq+0x30>)
    2162:	6018      	str	r0, [r3, #0]
	}
}
    2164:	4770      	bx	lr
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	200008ec 	.word	0x200008ec
    216c:	200000d0 	.word	0x200000d0

00002170 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    2170:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2172:	4b4a      	ldr	r3, [pc, #296]	; (229c <nwkDataReqTaskHandler+0x12c>)
    2174:	681a      	ldr	r2, [r3, #0]
    2176:	2a00      	cmp	r2, #0
    2178:	d100      	bne.n	217c <nwkDataReqTaskHandler+0xc>
    217a:	e08d      	b.n	2298 <nwkDataReqTaskHandler+0x128>
    217c:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    217e:	7a23      	ldrb	r3, [r4, #8]
    2180:	2b00      	cmp	r3, #0
    2182:	d002      	beq.n	218a <nwkDataReqTaskHandler+0x1a>
    2184:	2b02      	cmp	r3, #2
    2186:	d06d      	beq.n	2264 <nwkDataReqTaskHandler+0xf4>
    2188:	e082      	b.n	2290 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    218a:	4b45      	ldr	r3, [pc, #276]	; (22a0 <nwkDataReqTaskHandler+0x130>)
    218c:	4798      	blx	r3
    218e:	1e05      	subs	r5, r0, #0
    2190:	d103      	bne.n	219a <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2192:	2302      	movs	r3, #2
    2194:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    2196:	7723      	strb	r3, [r4, #28]
    2198:	e07e      	b.n	2298 <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    219a:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    219c:	2201      	movs	r2, #1
    219e:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    21a0:	4b40      	ldr	r3, [pc, #256]	; (22a4 <nwkDataReqTaskHandler+0x134>)
    21a2:	2189      	movs	r1, #137	; 0x89
    21a4:	5443      	strb	r3, [r0, r1]
    21a6:	0a18      	lsrs	r0, r3, #8
    21a8:	218a      	movs	r1, #138	; 0x8a
    21aa:	5468      	strb	r0, [r5, r1]
    21ac:	0c18      	lsrs	r0, r3, #16
    21ae:	218b      	movs	r1, #139	; 0x8b
    21b0:	5468      	strb	r0, [r5, r1]
    21b2:	0e1b      	lsrs	r3, r3, #24
    21b4:	218c      	movs	r1, #140	; 0x8c
    21b6:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    21b8:	7ba0      	ldrb	r0, [r4, #14]
    21ba:	0880      	lsrs	r0, r0, #2
    21bc:	2301      	movs	r3, #1
    21be:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    21c0:	2188      	movs	r1, #136	; 0x88
    21c2:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    21c4:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    21c6:	4019      	ands	r1, r3
    21c8:	7ae8      	ldrb	r0, [r5, #11]
    21ca:	4390      	bics	r0, r2
    21cc:	1c02      	adds	r2, r0, #0
    21ce:	430a      	orrs	r2, r1
    21d0:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    21d2:	7ba1      	ldrb	r1, [r4, #14]
    21d4:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    21d6:	4019      	ands	r1, r3
    21d8:	0089      	lsls	r1, r1, #2
    21da:	b2d2      	uxtb	r2, r2
    21dc:	2004      	movs	r0, #4
    21de:	4382      	bics	r2, r0
    21e0:	430a      	orrs	r2, r1
    21e2:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    21e4:	7ba2      	ldrb	r2, [r4, #14]
    21e6:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    21e8:	4013      	ands	r3, r2
    21ea:	005a      	lsls	r2, r3, #1
    21ec:	7aeb      	ldrb	r3, [r5, #11]
    21ee:	2102      	movs	r1, #2
    21f0:	438b      	bics	r3, r1
    21f2:	4313      	orrs	r3, r2
    21f4:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    21f6:	4b2c      	ldr	r3, [pc, #176]	; (22a8 <nwkDataReqTaskHandler+0x138>)
    21f8:	791a      	ldrb	r2, [r3, #4]
    21fa:	3201      	adds	r2, #1
    21fc:	b2d2      	uxtb	r2, r2
    21fe:	711a      	strb	r2, [r3, #4]
    2200:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2202:	781a      	ldrb	r2, [r3, #0]
    2204:	736a      	strb	r2, [r5, #13]
    2206:	785b      	ldrb	r3, [r3, #1]
    2208:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    220a:	8963      	ldrh	r3, [r4, #10]
    220c:	7aa2      	ldrb	r2, [r4, #10]
    220e:	73ea      	strb	r2, [r5, #15]
    2210:	0a1b      	lsrs	r3, r3, #8
    2212:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    2214:	7b61      	ldrb	r1, [r4, #13]
    2216:	230f      	movs	r3, #15
    2218:	4019      	ands	r1, r3
    221a:	7c6a      	ldrb	r2, [r5, #17]
    221c:	200f      	movs	r0, #15
    221e:	4382      	bics	r2, r0
    2220:	430a      	orrs	r2, r1
    2222:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    2224:	7b22      	ldrb	r2, [r4, #12]
    2226:	0112      	lsls	r2, r2, #4
    2228:	7c69      	ldrb	r1, [r5, #17]
    222a:	400b      	ands	r3, r1
    222c:	4313      	orrs	r3, r2
    222e:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    2230:	2381      	movs	r3, #129	; 0x81
    2232:	5ceb      	ldrb	r3, [r5, r3]
    2234:	2282      	movs	r2, #130	; 0x82
    2236:	5ca8      	ldrb	r0, [r5, r2]
    2238:	0200      	lsls	r0, r0, #8
    223a:	4318      	orrs	r0, r3
    223c:	2383      	movs	r3, #131	; 0x83
    223e:	5ceb      	ldrb	r3, [r5, r3]
    2240:	041b      	lsls	r3, r3, #16
    2242:	4318      	orrs	r0, r3
    2244:	2384      	movs	r3, #132	; 0x84
    2246:	5ceb      	ldrb	r3, [r5, r3]
    2248:	061b      	lsls	r3, r3, #24
    224a:	4318      	orrs	r0, r3
    224c:	7d22      	ldrb	r2, [r4, #20]
    224e:	6921      	ldr	r1, [r4, #16]
    2250:	4b16      	ldr	r3, [pc, #88]	; (22ac <nwkDataReqTaskHandler+0x13c>)
    2252:	4798      	blx	r3
	frame->size += req->size;
    2254:	7d22      	ldrb	r2, [r4, #20]
    2256:	786b      	ldrb	r3, [r5, #1]
    2258:	18d3      	adds	r3, r2, r3
    225a:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    225c:	1c28      	adds	r0, r5, #0
    225e:	4b14      	ldr	r3, [pc, #80]	; (22b0 <nwkDataReqTaskHandler+0x140>)
    2260:	4798      	blx	r3
    2262:	e019      	b.n	2298 <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    2264:	4294      	cmp	r4, r2
    2266:	d103      	bne.n	2270 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    2268:	4b0c      	ldr	r3, [pc, #48]	; (229c <nwkDataReqTaskHandler+0x12c>)
    226a:	6822      	ldr	r2, [r4, #0]
    226c:	601a      	str	r2, [r3, #0]
    226e:	e006      	b.n	227e <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    2270:	6813      	ldr	r3, [r2, #0]
    2272:	429c      	cmp	r4, r3
    2274:	d001      	beq.n	227a <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    2276:	1c1a      	adds	r2, r3, #0
    2278:	e7fa      	b.n	2270 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    227a:	6823      	ldr	r3, [r4, #0]
    227c:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    227e:	4a0a      	ldr	r2, [pc, #40]	; (22a8 <nwkDataReqTaskHandler+0x138>)
    2280:	2358      	movs	r3, #88	; 0x58
    2282:	5ad1      	ldrh	r1, [r2, r3]
    2284:	3901      	subs	r1, #1
    2286:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    2288:	69a3      	ldr	r3, [r4, #24]
    228a:	1c20      	adds	r0, r4, #0
    228c:	4798      	blx	r3
    228e:	e003      	b.n	2298 <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2290:	6824      	ldr	r4, [r4, #0]
    2292:	2c00      	cmp	r4, #0
    2294:	d000      	beq.n	2298 <nwkDataReqTaskHandler+0x128>
    2296:	e772      	b.n	217e <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    2298:	bd38      	pop	{r3, r4, r5, pc}
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	200000d0 	.word	0x200000d0
    22a0:	000022c9 	.word	0x000022c9
    22a4:	000020f1 	.word	0x000020f1
    22a8:	200008ec 	.word	0x200008ec
    22ac:	00004a7d 	.word	0x00004a7d
    22b0:	00002f51 	.word	0x00002f51

000022b4 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    22b4:	4b03      	ldr	r3, [pc, #12]	; (22c4 <nwkFrameInit+0x10>)
    22b6:	2200      	movs	r2, #0
    22b8:	701a      	strb	r2, [r3, #0]
    22ba:	218d      	movs	r1, #141	; 0x8d
    22bc:	545a      	strb	r2, [r3, r1]
    22be:	0049      	lsls	r1, r1, #1
    22c0:	545a      	strb	r2, [r3, r1]
	}
}
    22c2:	4770      	bx	lr
    22c4:	200000d4 	.word	0x200000d4

000022c8 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    22c8:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    22ca:	4b18      	ldr	r3, [pc, #96]	; (232c <nwkFrameAlloc+0x64>)
    22cc:	781b      	ldrb	r3, [r3, #0]
    22ce:	2b00      	cmp	r3, #0
    22d0:	d00e      	beq.n	22f0 <nwkFrameAlloc+0x28>
    22d2:	238d      	movs	r3, #141	; 0x8d
    22d4:	4a15      	ldr	r2, [pc, #84]	; (232c <nwkFrameAlloc+0x64>)
    22d6:	5cd3      	ldrb	r3, [r2, r3]
    22d8:	2b00      	cmp	r3, #0
    22da:	d007      	beq.n	22ec <nwkFrameAlloc+0x24>
    22dc:	238d      	movs	r3, #141	; 0x8d
    22de:	005b      	lsls	r3, r3, #1
    22e0:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    22e2:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    22e4:	2b00      	cmp	r3, #0
    22e6:	d11f      	bne.n	2328 <nwkFrameAlloc+0x60>
    22e8:	2302      	movs	r3, #2
    22ea:	e002      	b.n	22f2 <nwkFrameAlloc+0x2a>
    22ec:	2301      	movs	r3, #1
    22ee:	e000      	b.n	22f2 <nwkFrameAlloc+0x2a>
    22f0:	2300      	movs	r3, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    22f2:	4e0e      	ldr	r6, [pc, #56]	; (232c <nwkFrameAlloc+0x64>)
    22f4:	258d      	movs	r5, #141	; 0x8d
    22f6:	435d      	muls	r5, r3
    22f8:	1974      	adds	r4, r6, r5
    22fa:	1c20      	adds	r0, r4, #0
    22fc:	2100      	movs	r1, #0
    22fe:	228d      	movs	r2, #141	; 0x8d
    2300:	4b0b      	ldr	r3, [pc, #44]	; (2330 <nwkFrameAlloc+0x68>)
    2302:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    2304:	2310      	movs	r3, #16
    2306:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    2308:	1c23      	adds	r3, r4, #0
    230a:	3380      	adds	r3, #128	; 0x80
    230c:	1c22      	adds	r2, r4, #0
    230e:	3212      	adds	r2, #18
    2310:	705a      	strb	r2, [r3, #1]
    2312:	0a11      	lsrs	r1, r2, #8
    2314:	7099      	strb	r1, [r3, #2]
    2316:	0c11      	lsrs	r1, r2, #16
    2318:	70d9      	strb	r1, [r3, #3]
    231a:	0e12      	lsrs	r2, r2, #24
    231c:	711a      	strb	r2, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    231e:	4a05      	ldr	r2, [pc, #20]	; (2334 <nwkFrameAlloc+0x6c>)
    2320:	2358      	movs	r3, #88	; 0x58
    2322:	5ad1      	ldrh	r1, [r2, r3]
    2324:	3101      	adds	r1, #1
    2326:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    2328:	1c20      	adds	r0, r4, #0
    232a:	bd70      	pop	{r4, r5, r6, pc}
    232c:	200000d4 	.word	0x200000d4
    2330:	00004a8f 	.word	0x00004a8f
    2334:	200008ec 	.word	0x200008ec

00002338 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2338:	2300      	movs	r3, #0
    233a:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    233c:	4a02      	ldr	r2, [pc, #8]	; (2348 <nwkFrameFree+0x10>)
    233e:	2358      	movs	r3, #88	; 0x58
    2340:	5ad1      	ldrh	r1, [r2, r3]
    2342:	3901      	subs	r1, #1
    2344:	52d1      	strh	r1, [r2, r3]
}
    2346:	4770      	bx	lr
    2348:	200008ec 	.word	0x200008ec

0000234c <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    234c:	2800      	cmp	r0, #0
    234e:	d006      	beq.n	235e <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2350:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2352:	4b0c      	ldr	r3, [pc, #48]	; (2384 <nwkFrameNext+0x38>)
    2354:	33a8      	adds	r3, #168	; 0xa8
    2356:	33ff      	adds	r3, #255	; 0xff
    2358:	4298      	cmp	r0, r3
    235a:	d301      	bcc.n	2360 <nwkFrameNext+0x14>
    235c:	e00f      	b.n	237e <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    235e:	4809      	ldr	r0, [pc, #36]	; (2384 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2360:	7803      	ldrb	r3, [r0, #0]
    2362:	2b00      	cmp	r3, #0
    2364:	d10c      	bne.n	2380 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2366:	4a07      	ldr	r2, [pc, #28]	; (2384 <nwkFrameNext+0x38>)
    2368:	32a8      	adds	r2, #168	; 0xa8
    236a:	32ff      	adds	r2, #255	; 0xff
    236c:	e002      	b.n	2374 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    236e:	7803      	ldrb	r3, [r0, #0]
    2370:	2b00      	cmp	r3, #0
    2372:	d105      	bne.n	2380 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2374:	308d      	adds	r0, #141	; 0x8d
    2376:	4290      	cmp	r0, r2
    2378:	d3f9      	bcc.n	236e <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    237a:	2000      	movs	r0, #0
    237c:	e000      	b.n	2380 <nwkFrameNext+0x34>
    237e:	2000      	movs	r0, #0
}
    2380:	4770      	bx	lr
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	200000d4 	.word	0x200000d4

00002388 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    2388:	2200      	movs	r2, #0
    238a:	2385      	movs	r3, #133	; 0x85
    238c:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    238e:	4b05      	ldr	r3, [pc, #20]	; (23a4 <nwkFrameCommandInit+0x1c>)
    2390:	791a      	ldrb	r2, [r3, #4]
    2392:	3201      	adds	r2, #1
    2394:	b2d2      	uxtb	r2, r2
    2396:	711a      	strb	r2, [r3, #4]
    2398:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    239a:	781a      	ldrb	r2, [r3, #0]
    239c:	7342      	strb	r2, [r0, #13]
    239e:	785b      	ldrb	r3, [r3, #1]
    23a0:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    23a2:	4770      	bx	lr
    23a4:	200008ec 	.word	0x200008ec

000023a8 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    23a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23aa:	4a09      	ldr	r2, [pc, #36]	; (23d0 <nwkRouteInit+0x28>)
    23ac:	3202      	adds	r2, #2
    23ae:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    23b0:	2701      	movs	r7, #1
    23b2:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    23b4:	4806      	ldr	r0, [pc, #24]	; (23d0 <nwkRouteInit+0x28>)
    23b6:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    23b8:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    23ba:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    23bc:	00d9      	lsls	r1, r3, #3
    23be:	5c0c      	ldrb	r4, [r1, r0]
    23c0:	43b4      	bics	r4, r6
    23c2:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    23c4:	7115      	strb	r5, [r2, #4]
    23c6:	3301      	adds	r3, #1
    23c8:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    23ca:	2b64      	cmp	r3, #100	; 0x64
    23cc:	d1f5      	bne.n	23ba <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    23ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23d0:	2000027c 	.word	0x2000027c

000023d4 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    23d4:	b570      	push	{r4, r5, r6, lr}
    23d6:	4a0b      	ldr	r2, [pc, #44]	; (2404 <NWK_RouteFindEntry+0x30>)
    23d8:	3202      	adds	r2, #2
    23da:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    23dc:	4e09      	ldr	r6, [pc, #36]	; (2404 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    23de:	8814      	ldrh	r4, [r2, #0]
    23e0:	4284      	cmp	r4, r0
    23e2:	d109      	bne.n	23f8 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    23e4:	00dc      	lsls	r4, r3, #3
    23e6:	5da4      	ldrb	r4, [r4, r6]
    23e8:	07a4      	lsls	r4, r4, #30
    23ea:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    23ec:	428c      	cmp	r4, r1
    23ee:	d103      	bne.n	23f8 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    23f0:	00dd      	lsls	r5, r3, #3
    23f2:	4804      	ldr	r0, [pc, #16]	; (2404 <NWK_RouteFindEntry+0x30>)
    23f4:	1940      	adds	r0, r0, r5
    23f6:	e004      	b.n	2402 <NWK_RouteFindEntry+0x2e>
    23f8:	3301      	adds	r3, #1
    23fa:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    23fc:	2b64      	cmp	r3, #100	; 0x64
    23fe:	d1ee      	bne.n	23de <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2400:	2000      	movs	r0, #0
}
    2402:	bd70      	pop	{r4, r5, r6, pc}
    2404:	2000027c 	.word	0x2000027c

00002408 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    2408:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    240a:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    240c:	4810      	ldr	r0, [pc, #64]	; (2450 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    240e:	24c8      	movs	r4, #200	; 0xc8
    2410:	00a4      	lsls	r4, r4, #2
    2412:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    2414:	7803      	ldrb	r3, [r0, #0]
    2416:	07dc      	lsls	r4, r3, #31
    2418:	d40b      	bmi.n	2432 <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    241a:	7983      	ldrb	r3, [r0, #6]
    241c:	2b00      	cmp	r3, #0
    241e:	d00c      	beq.n	243a <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    2420:	2a00      	cmp	r2, #0
    2422:	d003      	beq.n	242c <NWK_RouteNewEntry+0x24>
    2424:	7994      	ldrb	r4, [r2, #6]
    2426:	429c      	cmp	r4, r3
    2428:	d802      	bhi.n	2430 <NWK_RouteNewEntry+0x28>
    242a:	e002      	b.n	2432 <NWK_RouteNewEntry+0x2a>
    242c:	1c02      	adds	r2, r0, #0
    242e:	e000      	b.n	2432 <NWK_RouteNewEntry+0x2a>
    2430:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2432:	3008      	adds	r0, #8
    2434:	4288      	cmp	r0, r1
    2436:	d1ed      	bne.n	2414 <NWK_RouteNewEntry+0xc>
    2438:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    243a:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    243c:	2202      	movs	r2, #2
    243e:	4393      	bics	r3, r2
    2440:	220f      	movs	r2, #15
    2442:	4013      	ands	r3, r2
    2444:	2230      	movs	r2, #48	; 0x30
    2446:	4313      	orrs	r3, r2
    2448:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    244a:	2380      	movs	r3, #128	; 0x80
    244c:	7183      	strb	r3, [r0, #6]

	return entry;
}
    244e:	bd10      	pop	{r4, pc}
    2450:	2000027c 	.word	0x2000027c

00002454 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2454:	7803      	ldrb	r3, [r0, #0]
    2456:	07da      	lsls	r2, r3, #31
    2458:	d404      	bmi.n	2464 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    245a:	2301      	movs	r3, #1
    245c:	425b      	negs	r3, r3
    245e:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2460:	2300      	movs	r3, #0
    2462:	7183      	strb	r3, [r0, #6]
}
    2464:	4770      	bx	lr
    2466:	46c0      	nop			; (mov r8, r8)

00002468 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2468:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    246a:	4b04      	ldr	r3, [pc, #16]	; (247c <NWK_RouteNextHop+0x14>)
    246c:	4798      	blx	r3
	if (entry) {
    246e:	2800      	cmp	r0, #0
    2470:	d001      	beq.n	2476 <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    2472:	8880      	ldrh	r0, [r0, #4]
    2474:	e000      	b.n	2478 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    2476:	4802      	ldr	r0, [pc, #8]	; (2480 <NWK_RouteNextHop+0x18>)
}
    2478:	bd08      	pop	{r3, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	000023d5 	.word	0x000023d5
    2480:	0000ffff 	.word	0x0000ffff

00002484 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2484:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2486:	4b03      	ldr	r3, [pc, #12]	; (2494 <nwkRouteRemove+0x10>)
    2488:	4798      	blx	r3
	if (entry) {
    248a:	2800      	cmp	r0, #0
    248c:	d001      	beq.n	2492 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    248e:	4b02      	ldr	r3, [pc, #8]	; (2498 <nwkRouteRemove+0x14>)
    2490:	4798      	blx	r3
	}
}
    2492:	bd08      	pop	{r3, pc}
    2494:	000023d5 	.word	0x000023d5
    2498:	00002455 	.word	0x00002455

0000249c <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    249c:	b538      	push	{r3, r4, r5, lr}
    249e:	1c04      	adds	r4, r0, #0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    24a0:	7a42      	ldrb	r2, [r0, #9]
    24a2:	7a85      	ldrb	r5, [r0, #10]
    24a4:	022d      	lsls	r5, r5, #8
    24a6:	4315      	orrs	r5, r2
    24a8:	b22b      	sxth	r3, r5
    24aa:	2b00      	cmp	r3, #0
    24ac:	da05      	bge.n	24ba <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    24ae:	7b42      	ldrb	r2, [r0, #13]
    24b0:	7b83      	ldrb	r3, [r0, #14]
    24b2:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    24b4:	4313      	orrs	r3, r2
    24b6:	429d      	cmp	r5, r3
    24b8:	d141      	bne.n	253e <nwkRouteFrameReceived+0xa2>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    24ba:	7961      	ldrb	r1, [r4, #5]
    24bc:	79a2      	ldrb	r2, [r4, #6]
    24be:	0212      	lsls	r2, r2, #8
    24c0:	430a      	orrs	r2, r1
    24c2:	4b1f      	ldr	r3, [pc, #124]	; (2540 <nwkRouteFrameReceived+0xa4>)
    24c4:	429a      	cmp	r2, r3
    24c6:	d03a      	beq.n	253e <nwkRouteFrameReceived+0xa2>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    24c8:	7b62      	ldrb	r2, [r4, #13]
    24ca:	7ba0      	ldrb	r0, [r4, #14]
    24cc:	0200      	lsls	r0, r0, #8
    24ce:	4310      	orrs	r0, r2
    24d0:	2100      	movs	r1, #0
    24d2:	4b1c      	ldr	r3, [pc, #112]	; (2544 <nwkRouteFrameReceived+0xa8>)
    24d4:	4798      	blx	r3

	if (entry) {
    24d6:	2800      	cmp	r0, #0
    24d8:	d022      	beq.n	2520 <nwkRouteFrameReceived+0x84>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    24da:	79e1      	ldrb	r1, [r4, #7]
    24dc:	7a22      	ldrb	r2, [r4, #8]
    24de:	0212      	lsls	r2, r2, #8
    24e0:	430a      	orrs	r2, r1
    24e2:	2100      	movs	r1, #0
    24e4:	4b16      	ldr	r3, [pc, #88]	; (2540 <nwkRouteFrameReceived+0xa4>)
    24e6:	429a      	cmp	r2, r3
    24e8:	d108      	bne.n	24fc <nwkRouteFrameReceived+0x60>
				nwkIb.addr == header->nwkDstAddr);
    24ea:	7be2      	ldrb	r2, [r4, #15]
    24ec:	7c21      	ldrb	r1, [r4, #16]
    24ee:	0209      	lsls	r1, r1, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    24f0:	4b15      	ldr	r3, [pc, #84]	; (2548 <nwkRouteFrameReceived+0xac>)
    24f2:	881b      	ldrh	r3, [r3, #0]
    24f4:	4311      	orrs	r1, r2
    24f6:	1a59      	subs	r1, r3, r1
    24f8:	424b      	negs	r3, r1
    24fa:	4159      	adcs	r1, r3
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    24fc:	8883      	ldrh	r3, [r0, #4]
    24fe:	42ab      	cmp	r3, r5
    2500:	d004      	beq.n	250c <nwkRouteFrameReceived+0x70>
    2502:	2385      	movs	r3, #133	; 0x85
    2504:	5ce2      	ldrb	r2, [r4, r3]
    2506:	79c3      	ldrb	r3, [r0, #7]
    2508:	429a      	cmp	r2, r3
    250a:	d801      	bhi.n	2510 <nwkRouteFrameReceived+0x74>
				entry->lqi) || discovery) {
    250c:	2900      	cmp	r1, #0
    250e:	d013      	beq.n	2538 <nwkRouteFrameReceived+0x9c>
			entry->nextHopAddr = header->macSrcAddr;
    2510:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2512:	7803      	ldrb	r3, [r0, #0]
    2514:	220f      	movs	r2, #15
    2516:	4013      	ands	r3, r2
    2518:	2230      	movs	r2, #48	; 0x30
    251a:	4313      	orrs	r3, r2
    251c:	7003      	strb	r3, [r0, #0]
    251e:	e00b      	b.n	2538 <nwkRouteFrameReceived+0x9c>
		}
	} else {
		entry = NWK_RouteNewEntry();
    2520:	4b0a      	ldr	r3, [pc, #40]	; (254c <nwkRouteFrameReceived+0xb0>)
    2522:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    2524:	7b61      	ldrb	r1, [r4, #13]
    2526:	7ba2      	ldrb	r2, [r4, #14]
    2528:	0212      	lsls	r2, r2, #8
    252a:	430a      	orrs	r2, r1
    252c:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    252e:	7a62      	ldrb	r2, [r4, #9]
    2530:	7aa3      	ldrb	r3, [r4, #10]
    2532:	021b      	lsls	r3, r3, #8
    2534:	4313      	orrs	r3, r2
    2536:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    2538:	2385      	movs	r3, #133	; 0x85
    253a:	5ce3      	ldrb	r3, [r4, r3]
    253c:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    253e:	bd38      	pop	{r3, r4, r5, pc}
    2540:	0000ffff 	.word	0x0000ffff
    2544:	000023d5 	.word	0x000023d5
    2548:	200008ec 	.word	0x200008ec
    254c:	00002409 	.word	0x00002409

00002550 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    2550:	b510      	push	{r4, lr}
    2552:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    2554:	7bc3      	ldrb	r3, [r0, #15]
    2556:	7c00      	ldrb	r0, [r0, #16]
    2558:	0200      	lsls	r0, r0, #8
    255a:	4318      	orrs	r0, r3
    255c:	4b1b      	ldr	r3, [pc, #108]	; (25cc <nwkRouteFrameSent+0x7c>)
    255e:	4298      	cmp	r0, r3
    2560:	d032      	beq.n	25c8 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    2562:	7ae1      	ldrb	r1, [r4, #11]
    2564:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    2566:	0fc9      	lsrs	r1, r1, #31
    2568:	4b19      	ldr	r3, [pc, #100]	; (25d0 <nwkRouteFrameSent+0x80>)
    256a:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    256c:	2800      	cmp	r0, #0
    256e:	d02b      	beq.n	25c8 <nwkRouteFrameSent+0x78>
    2570:	7803      	ldrb	r3, [r0, #0]
    2572:	07da      	lsls	r2, r3, #31
    2574:	d428      	bmi.n	25c8 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2576:	2385      	movs	r3, #133	; 0x85
    2578:	5ce3      	ldrb	r3, [r4, r3]
    257a:	2b00      	cmp	r3, #0
    257c:	d117      	bne.n	25ae <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    257e:	7803      	ldrb	r3, [r0, #0]
    2580:	220f      	movs	r2, #15
    2582:	4013      	ands	r3, r2
    2584:	2230      	movs	r2, #48	; 0x30
    2586:	4313      	orrs	r3, r2
    2588:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    258a:	7983      	ldrb	r3, [r0, #6]
    258c:	3301      	adds	r3, #1
    258e:	b2db      	uxtb	r3, r3
    2590:	7183      	strb	r3, [r0, #6]
    2592:	2bff      	cmp	r3, #255	; 0xff
    2594:	d118      	bne.n	25c8 <nwkRouteFrameSent+0x78>
    2596:	490f      	ldr	r1, [pc, #60]	; (25d4 <nwkRouteFrameSent+0x84>)
    2598:	1d8b      	adds	r3, r1, #6
    259a:	4a0f      	ldr	r2, [pc, #60]	; (25d8 <nwkRouteFrameSent+0x88>)
    259c:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    259e:	781a      	ldrb	r2, [r3, #0]
    25a0:	0852      	lsrs	r2, r2, #1
    25a2:	3201      	adds	r2, #1
    25a4:	701a      	strb	r2, [r3, #0]
    25a6:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    25a8:	428b      	cmp	r3, r1
    25aa:	d1f8      	bne.n	259e <nwkRouteFrameSent+0x4e>
    25ac:	e00c      	b.n	25c8 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    25ae:	7802      	ldrb	r2, [r0, #0]
    25b0:	0913      	lsrs	r3, r2, #4
    25b2:	330f      	adds	r3, #15
    25b4:	210f      	movs	r1, #15
    25b6:	400b      	ands	r3, r1
    25b8:	011c      	lsls	r4, r3, #4
    25ba:	400a      	ands	r2, r1
    25bc:	4322      	orrs	r2, r4
    25be:	7002      	strb	r2, [r0, #0]
    25c0:	2b00      	cmp	r3, #0
    25c2:	d101      	bne.n	25c8 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    25c4:	4b05      	ldr	r3, [pc, #20]	; (25dc <nwkRouteFrameSent+0x8c>)
    25c6:	4798      	blx	r3
		}
	}
}
    25c8:	bd10      	pop	{r4, pc}
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	0000ffff 	.word	0x0000ffff
    25d0:	000023d5 	.word	0x000023d5
    25d4:	2000027c 	.word	0x2000027c
    25d8:	00000326 	.word	0x00000326
    25dc:	00002455 	.word	0x00002455

000025e0 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    25e0:	b510      	push	{r4, lr}
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    25e2:	7bc1      	ldrb	r1, [r0, #15]
    25e4:	7c03      	ldrb	r3, [r0, #16]
    25e6:	021b      	lsls	r3, r3, #8
    25e8:	430b      	orrs	r3, r1
    25ea:	4a0d      	ldr	r2, [pc, #52]	; (2620 <nwkRoutePrepareTx+0x40>)
    25ec:	4293      	cmp	r3, r2
    25ee:	d104      	bne.n	25fa <nwkRoutePrepareTx+0x1a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    25f0:	2301      	movs	r3, #1
    25f2:	425b      	negs	r3, r3
    25f4:	71c3      	strb	r3, [r0, #7]
    25f6:	7203      	strb	r3, [r0, #8]
    25f8:	e010      	b.n	261c <nwkRoutePrepareTx+0x3c>
	} else if (header->nwkFcf.linkLocal) {
    25fa:	7ac2      	ldrb	r2, [r0, #11]
    25fc:	0751      	lsls	r1, r2, #29
    25fe:	d503      	bpl.n	2608 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    2600:	71c3      	strb	r3, [r0, #7]
    2602:	0a1b      	lsrs	r3, r3, #8
    2604:	7203      	strb	r3, [r0, #8]
    2606:	e009      	b.n	261c <nwkRoutePrepareTx+0x3c>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    2608:	1c84      	adds	r4, r0, #2
    260a:	7ac1      	ldrb	r1, [r0, #11]
    260c:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    260e:	0fc9      	lsrs	r1, r1, #31
    2610:	1c18      	adds	r0, r3, #0
    2612:	4b04      	ldr	r3, [pc, #16]	; (2624 <nwkRoutePrepareTx+0x44>)
    2614:	4798      	blx	r3
    2616:	7160      	strb	r0, [r4, #5]
    2618:	0a00      	lsrs	r0, r0, #8
    261a:	71a0      	strb	r0, [r4, #6]
			nwkRouteDiscoveryRequest(frame);
		}

  #endif
	}
}
    261c:	bd10      	pop	{r4, pc}
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	0000ffff 	.word	0x0000ffff
    2624:	00002469 	.word	0x00002469

00002628 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    2628:	b5f0      	push	{r4, r5, r6, r7, lr}
    262a:	4647      	mov	r7, r8
    262c:	b480      	push	{r7}
    262e:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2630:	7bc2      	ldrb	r2, [r0, #15]
    2632:	7c06      	ldrb	r6, [r0, #16]
    2634:	0236      	lsls	r6, r6, #8
    2636:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    2638:	7ac7      	ldrb	r7, [r0, #11]
    263a:	073f      	lsls	r7, r7, #28
    263c:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    263e:	b2f9      	uxtb	r1, r7
    2640:	1c30      	adds	r0, r6, #0
    2642:	4b28      	ldr	r3, [pc, #160]	; (26e4 <nwkRouteFrame+0xbc>)
    2644:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    2646:	4b28      	ldr	r3, [pc, #160]	; (26e8 <nwkRouteFrame+0xc0>)
    2648:	4298      	cmp	r0, r3
    264a:	d00f      	beq.n	266c <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    264c:	2200      	movs	r2, #0
    264e:	2389      	movs	r3, #137	; 0x89
    2650:	54e2      	strb	r2, [r4, r3]
    2652:	238a      	movs	r3, #138	; 0x8a
    2654:	54e2      	strb	r2, [r4, r3]
    2656:	238b      	movs	r3, #139	; 0x8b
    2658:	54e2      	strb	r2, [r4, r3]
    265a:	238c      	movs	r3, #140	; 0x8c
    265c:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    265e:	2202      	movs	r2, #2
    2660:	2388      	movs	r3, #136	; 0x88
    2662:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    2664:	1c20      	adds	r0, r4, #0
    2666:	4b21      	ldr	r3, [pc, #132]	; (26ec <nwkRouteFrame+0xc4>)
    2668:	4798      	blx	r3
    266a:	e038      	b.n	26de <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    266c:	7b62      	ldrb	r2, [r4, #13]
    266e:	7ba3      	ldrb	r3, [r4, #14]
    2670:	021b      	lsls	r3, r3, #8
    2672:	4313      	orrs	r3, r2
    2674:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    2676:	4b1e      	ldr	r3, [pc, #120]	; (26f0 <nwkRouteFrame+0xc8>)
    2678:	4798      	blx	r3
    267a:	1e05      	subs	r5, r0, #0
    267c:	d02c      	beq.n	26d8 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    267e:	4b1d      	ldr	r3, [pc, #116]	; (26f4 <nwkRouteFrame+0xcc>)
    2680:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    2682:	786b      	ldrb	r3, [r5, #1]
    2684:	3306      	adds	r3, #6
    2686:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    2688:	2200      	movs	r2, #0
    268a:	2389      	movs	r3, #137	; 0x89
    268c:	54ea      	strb	r2, [r5, r3]
    268e:	238a      	movs	r3, #138	; 0x8a
    2690:	54ea      	strb	r2, [r5, r3]
    2692:	238b      	movs	r3, #139	; 0x8b
    2694:	54ea      	strb	r2, [r5, r3]
    2696:	238c      	movs	r3, #140	; 0x8c
    2698:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    269a:	21ff      	movs	r1, #255	; 0xff
    269c:	4643      	mov	r3, r8
    269e:	4019      	ands	r1, r3
    26a0:	73e9      	strb	r1, [r5, #15]
    26a2:	0a1a      	lsrs	r2, r3, #8
    26a4:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    26a6:	2381      	movs	r3, #129	; 0x81
    26a8:	5ce8      	ldrb	r0, [r5, r3]
    26aa:	2382      	movs	r3, #130	; 0x82
    26ac:	5ceb      	ldrb	r3, [r5, r3]
    26ae:	021b      	lsls	r3, r3, #8
    26b0:	4303      	orrs	r3, r0
    26b2:	2083      	movs	r0, #131	; 0x83
    26b4:	5c28      	ldrb	r0, [r5, r0]
    26b6:	0400      	lsls	r0, r0, #16
    26b8:	4303      	orrs	r3, r0
    26ba:	2084      	movs	r0, #132	; 0x84
    26bc:	5c28      	ldrb	r0, [r5, r0]
    26be:	0600      	lsls	r0, r0, #24
    26c0:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    26c2:	2001      	movs	r0, #1
    26c4:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    26c6:	7059      	strb	r1, [r3, #1]
    26c8:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    26ca:	70de      	strb	r6, [r3, #3]
    26cc:	0a36      	lsrs	r6, r6, #8
    26ce:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    26d0:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    26d2:	1c28      	adds	r0, r5, #0
    26d4:	4b05      	ldr	r3, [pc, #20]	; (26ec <nwkRouteFrame+0xc4>)
    26d6:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    26d8:	1c20      	adds	r0, r4, #0
    26da:	4b07      	ldr	r3, [pc, #28]	; (26f8 <nwkRouteFrame+0xd0>)
    26dc:	4798      	blx	r3
	}
}
    26de:	bc04      	pop	{r2}
    26e0:	4690      	mov	r8, r2
    26e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26e4:	00002469 	.word	0x00002469
    26e8:	0000ffff 	.word	0x0000ffff
    26ec:	00002f51 	.word	0x00002f51
    26f0:	000022c9 	.word	0x000022c9
    26f4:	00002389 	.word	0x00002389
    26f8:	00002339 	.word	0x00002339

000026fc <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    26fc:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    26fe:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2700:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2702:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2704:	2b06      	cmp	r3, #6
    2706:	d107      	bne.n	2718 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2708:	78d3      	ldrb	r3, [r2, #3]
    270a:	7910      	ldrb	r0, [r2, #4]
    270c:	0200      	lsls	r0, r0, #8
    270e:	4318      	orrs	r0, r3
    2710:	7951      	ldrb	r1, [r2, #5]
    2712:	4b02      	ldr	r3, [pc, #8]	; (271c <nwkRouteErrorReceived+0x20>)
    2714:	4798      	blx	r3

	return true;
    2716:	2001      	movs	r0, #1
}
    2718:	bd08      	pop	{r3, pc}
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	00002485 	.word	0x00002485

00002720 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2720:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    2722:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2724:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    2726:	2a00      	cmp	r2, #0
    2728:	d00f      	beq.n	274a <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    272a:	6882      	ldr	r2, [r0, #8]
    272c:	7813      	ldrb	r3, [r2, #0]
    272e:	2b00      	cmp	r3, #0
    2730:	d002      	beq.n	2738 <nwkRxSeriveDataInd+0x18>
    2732:	2b01      	cmp	r3, #1
    2734:	d004      	beq.n	2740 <nwkRxSeriveDataInd+0x20>
    2736:	e007      	b.n	2748 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2738:	4b05      	ldr	r3, [pc, #20]	; (2750 <nwkRxSeriveDataInd+0x30>)
    273a:	4798      	blx	r3
    273c:	1c03      	adds	r3, r0, #0
    273e:	e004      	b.n	274a <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2740:	4b04      	ldr	r3, [pc, #16]	; (2754 <nwkRxSeriveDataInd+0x34>)
    2742:	4798      	blx	r3
    2744:	1c03      	adds	r3, r0, #0
    2746:	e000      	b.n	274a <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    2748:	2300      	movs	r3, #0
	}
}
    274a:	1c18      	adds	r0, r3, #0
    274c:	bd08      	pop	{r3, pc}
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	0000309d 	.word	0x0000309d
    2754:	000026fd 	.word	0x000026fd

00002758 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2758:	b538      	push	{r3, r4, r5, lr}
    275a:	4909      	ldr	r1, [pc, #36]	; (2780 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    275c:	1d0b      	adds	r3, r1, #4
    275e:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2760:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2762:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2764:	781a      	ldrb	r2, [r3, #0]
    2766:	2a00      	cmp	r2, #0
    2768:	d002      	beq.n	2770 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    276a:	3a01      	subs	r2, #1
    276c:	701a      	strb	r2, [r3, #0]
			restart = true;
    276e:	1c2c      	adds	r4, r5, #0
    2770:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2772:	428b      	cmp	r3, r1
    2774:	d1f6      	bne.n	2764 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2776:	2c00      	cmp	r4, #0
    2778:	d001      	beq.n	277e <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    277a:	4b02      	ldr	r3, [pc, #8]	; (2784 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    277c:	4798      	blx	r3
	}
}
    277e:	bd38      	pop	{r3, r4, r5, pc}
    2780:	2000059c 	.word	0x2000059c
    2784:	00003601 	.word	0x00003601

00002788 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2788:	b508      	push	{r3, lr}
    278a:	490a      	ldr	r1, [pc, #40]	; (27b4 <nwkRxInit+0x2c>)
    278c:	1d0b      	adds	r3, r1, #4
    278e:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2790:	2200      	movs	r2, #0
    2792:	701a      	strb	r2, [r3, #0]
    2794:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2796:	428b      	cmp	r3, r1
    2798:	d1fb      	bne.n	2792 <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    279a:	4b07      	ldr	r3, [pc, #28]	; (27b8 <nwkRxInit+0x30>)
    279c:	2264      	movs	r2, #100	; 0x64
    279e:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    27a0:	2200      	movs	r2, #0
    27a2:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    27a4:	4a05      	ldr	r2, [pc, #20]	; (27bc <nwkRxInit+0x34>)
    27a6:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    27a8:	2000      	movs	r0, #0
    27aa:	4905      	ldr	r1, [pc, #20]	; (27c0 <nwkRxInit+0x38>)
    27ac:	4b05      	ldr	r3, [pc, #20]	; (27c4 <nwkRxInit+0x3c>)
    27ae:	4798      	blx	r3
}
    27b0:	bd08      	pop	{r3, pc}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	2000059c 	.word	0x2000059c
    27b8:	200005dc 	.word	0x200005dc
    27bc:	00002759 	.word	0x00002759
    27c0:	00002721 	.word	0x00002721
    27c4:	000020bd 	.word	0x000020bd

000027c8 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    27c8:	b510      	push	{r4, lr}
    27ca:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    27cc:	6803      	ldr	r3, [r0, #0]
    27ce:	785a      	ldrb	r2, [r3, #1]
    27d0:	2a88      	cmp	r2, #136	; 0x88
    27d2:	d11a      	bne.n	280a <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	2220      	movs	r2, #32
    27d8:	4393      	bics	r3, r2
    27da:	2b41      	cmp	r3, #65	; 0x41
    27dc:	d115      	bne.n	280a <PHY_DataInd+0x42>
    27de:	7903      	ldrb	r3, [r0, #4]
    27e0:	2b0f      	cmp	r3, #15
    27e2:	d912      	bls.n	280a <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    27e4:	4b09      	ldr	r3, [pc, #36]	; (280c <PHY_DataInd+0x44>)
    27e6:	4798      	blx	r3
    27e8:	2800      	cmp	r0, #0
    27ea:	d00e      	beq.n	280a <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    27ec:	2320      	movs	r3, #32
    27ee:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    27f0:	7923      	ldrb	r3, [r4, #4]
    27f2:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    27f4:	7962      	ldrb	r2, [r4, #5]
    27f6:	2385      	movs	r3, #133	; 0x85
    27f8:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    27fa:	79a2      	ldrb	r2, [r4, #6]
    27fc:	2386      	movs	r3, #134	; 0x86
    27fe:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    2800:	3002      	adds	r0, #2
    2802:	7922      	ldrb	r2, [r4, #4]
    2804:	6821      	ldr	r1, [r4, #0]
    2806:	4b02      	ldr	r3, [pc, #8]	; (2810 <PHY_DataInd+0x48>)
    2808:	4798      	blx	r3
}
    280a:	bd10      	pop	{r4, pc}
    280c:	000022c9 	.word	0x000022c9
    2810:	00004a7d 	.word	0x00004a7d

00002814 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    2814:	2900      	cmp	r1, #0
    2816:	d002      	beq.n	281e <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    2818:	2322      	movs	r3, #34	; 0x22
    281a:	7003      	strb	r3, [r0, #0]
    281c:	e001      	b.n	2822 <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    281e:	2324      	movs	r3, #36	; 0x24
    2820:	7003      	strb	r3, [r0, #0]
	}
}
    2822:	4770      	bx	lr

00002824 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    2824:	b5f0      	push	{r4, r5, r6, r7, lr}
    2826:	464f      	mov	r7, r9
    2828:	4646      	mov	r6, r8
    282a:	b4c0      	push	{r6, r7}
    282c:	b085      	sub	sp, #20
	NwkFrame_t *frame = NULL;
    282e:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2830:	4dd3      	ldr	r5, [pc, #844]	; (2b80 <nwkRxTaskHandler+0x35c>)
    2832:	48d4      	ldr	r0, [pc, #848]	; (2b84 <nwkRxTaskHandler+0x360>)
    2834:	4681      	mov	r9, r0
    2836:	203c      	movs	r0, #60	; 0x3c
    2838:	4481      	add	r9, r0
    283a:	e19a      	b.n	2b72 <nwkRxTaskHandler+0x34e>
		switch (frame->state) {
    283c:	7823      	ldrb	r3, [r4, #0]
    283e:	3b20      	subs	r3, #32
    2840:	b2da      	uxtb	r2, r3
    2842:	2a04      	cmp	r2, #4
    2844:	d900      	bls.n	2848 <nwkRxTaskHandler+0x24>
    2846:	e194      	b.n	2b72 <nwkRxTaskHandler+0x34e>
    2848:	0093      	lsls	r3, r2, #2
    284a:	4acf      	ldr	r2, [pc, #828]	; (2b88 <nwkRxTaskHandler+0x364>)
    284c:	58d3      	ldr	r3, [r2, r3]
    284e:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2850:	2324      	movs	r3, #36	; 0x24
    2852:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2854:	7ae3      	ldrb	r3, [r4, #11]
    2856:	0719      	lsls	r1, r3, #28
    2858:	d500      	bpl.n	285c <nwkRxTaskHandler+0x38>
    285a:	e18a      	b.n	2b72 <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    285c:	7961      	ldrb	r1, [r4, #5]
    285e:	79a2      	ldrb	r2, [r4, #6]
    2860:	0212      	lsls	r2, r2, #8
    2862:	430a      	orrs	r2, r1
    2864:	4bc9      	ldr	r3, [pc, #804]	; (2b8c <nwkRxTaskHandler+0x368>)
    2866:	429a      	cmp	r2, r3
    2868:	d114      	bne.n	2894 <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    286a:	7be2      	ldrb	r2, [r4, #15]
    286c:	7c23      	ldrb	r3, [r4, #16]
    286e:	021b      	lsls	r3, r3, #8
    2870:	4313      	orrs	r3, r2
    2872:	4ac7      	ldr	r2, [pc, #796]	; (2b90 <nwkRxTaskHandler+0x36c>)
    2874:	8812      	ldrh	r2, [r2, #0]
    2876:	429a      	cmp	r2, r3
    2878:	d003      	beq.n	2882 <nwkRxTaskHandler+0x5e>
    287a:	4ac4      	ldr	r2, [pc, #784]	; (2b8c <nwkRxTaskHandler+0x368>)
    287c:	4293      	cmp	r3, r2
    287e:	d000      	beq.n	2882 <nwkRxTaskHandler+0x5e>
    2880:	e177      	b.n	2b72 <nwkRxTaskHandler+0x34e>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2882:	7ae3      	ldrb	r3, [r4, #11]
    2884:	079a      	lsls	r2, r3, #30
    2886:	d502      	bpl.n	288e <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    2888:	2321      	movs	r3, #33	; 0x21
    288a:	7023      	strb	r3, [r4, #0]
    288c:	e171      	b.n	2b72 <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    288e:	2322      	movs	r3, #34	; 0x22
    2890:	7023      	strb	r3, [r4, #0]
    2892:	e16e      	b.n	2b72 <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2894:	7be1      	ldrb	r1, [r4, #15]
    2896:	7c22      	ldrb	r2, [r4, #16]
    2898:	0212      	lsls	r2, r2, #8
    289a:	430a      	orrs	r2, r1
    289c:	4bbb      	ldr	r3, [pc, #748]	; (2b8c <nwkRxTaskHandler+0x368>)
    289e:	429a      	cmp	r2, r3
    28a0:	d103      	bne.n	28aa <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    28a2:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    28a4:	07de      	lsls	r6, r3, #31
    28a6:	d500      	bpl.n	28aa <nwkRxTaskHandler+0x86>
    28a8:	e163      	b.n	2b72 <nwkRxTaskHandler+0x34e>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    28aa:	7b61      	ldrb	r1, [r4, #13]
    28ac:	7ba3      	ldrb	r3, [r4, #14]
    28ae:	021b      	lsls	r3, r3, #8
    28b0:	4ab7      	ldr	r2, [pc, #732]	; (2b90 <nwkRxTaskHandler+0x36c>)
    28b2:	8812      	ldrh	r2, [r2, #0]
    28b4:	430b      	orrs	r3, r1
    28b6:	429a      	cmp	r2, r3
    28b8:	d100      	bne.n	28bc <nwkRxTaskHandler+0x98>
    28ba:	e15a      	b.n	2b72 <nwkRxTaskHandler+0x34e>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    28bc:	1c20      	adds	r0, r4, #0
    28be:	4bb5      	ldr	r3, [pc, #724]	; (2b94 <nwkRxTaskHandler+0x370>)
    28c0:	4798      	blx	r3
    28c2:	4bb0      	ldr	r3, [pc, #704]	; (2b84 <nwkRxTaskHandler+0x360>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    28c4:	2700      	movs	r7, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    28c6:	1ca1      	adds	r1, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    28c8:	1c18      	adds	r0, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    28ca:	791a      	ldrb	r2, [r3, #4]
    28cc:	2a00      	cmp	r2, #0
    28ce:	d037      	beq.n	2940 <nwkRxTaskHandler+0x11c>
    28d0:	7ace      	ldrb	r6, [r1, #11]
    28d2:	7b0a      	ldrb	r2, [r1, #12]
    28d4:	0212      	lsls	r2, r2, #8
    28d6:	4690      	mov	r8, r2
    28d8:	881a      	ldrh	r2, [r3, #0]
    28da:	4694      	mov	ip, r2
    28dc:	4642      	mov	r2, r8
    28de:	4316      	orrs	r6, r2
    28e0:	45b4      	cmp	ip, r6
    28e2:	d12e      	bne.n	2942 <nwkRxTaskHandler+0x11e>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    28e4:	7b22      	ldrb	r2, [r4, #12]
    28e6:	789b      	ldrb	r3, [r3, #2]
    28e8:	1a9b      	subs	r3, r3, r2
    28ea:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    28ec:	2b07      	cmp	r3, #7
    28ee:	d81c      	bhi.n	292a <nwkRxTaskHandler+0x106>
				if (entry->mask & (1 << diff)) {
    28f0:	78c2      	ldrb	r2, [r0, #3]
    28f2:	1c11      	adds	r1, r2, #0
    28f4:	4119      	asrs	r1, r3
    28f6:	07ce      	lsls	r6, r1, #31
    28f8:	d512      	bpl.n	2920 <nwkRxTaskHandler+0xfc>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    28fa:	79e1      	ldrb	r1, [r4, #7]
    28fc:	7a23      	ldrb	r3, [r4, #8]
    28fe:	021b      	lsls	r3, r3, #8
    2900:	4aa3      	ldr	r2, [pc, #652]	; (2b90 <nwkRxTaskHandler+0x36c>)
    2902:	8812      	ldrh	r2, [r2, #0]
    2904:	430b      	orrs	r3, r1
    2906:	429a      	cmp	r2, r3
    2908:	d000      	beq.n	290c <nwkRxTaskHandler+0xe8>
    290a:	e132      	b.n	2b72 <nwkRxTaskHandler+0x34e>
						nwkRouteRemove(
    290c:	7be2      	ldrb	r2, [r4, #15]
    290e:	7c20      	ldrb	r0, [r4, #16]
    2910:	0200      	lsls	r0, r0, #8
    2912:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    2914:	7ae1      	ldrb	r1, [r4, #11]
    2916:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    2918:	0fc9      	lsrs	r1, r1, #31
    291a:	4b9f      	ldr	r3, [pc, #636]	; (2b98 <nwkRxTaskHandler+0x374>)
    291c:	4798      	blx	r3
    291e:	e128      	b.n	2b72 <nwkRxTaskHandler+0x34e>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2920:	2101      	movs	r1, #1
    2922:	4099      	lsls	r1, r3
    2924:	430a      	orrs	r2, r1
    2926:	70c2      	strb	r2, [r0, #3]
    2928:	e14e      	b.n	2bc8 <nwkRxTaskHandler+0x3a4>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    292a:	7082      	strb	r2, [r0, #2]
				entry->mask = (entry->mask << shift) | 1;
    292c:	78c2      	ldrb	r2, [r0, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    292e:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    2930:	b2db      	uxtb	r3, r3
    2932:	409a      	lsls	r2, r3
    2934:	2301      	movs	r3, #1
    2936:	4313      	orrs	r3, r2
    2938:	70c3      	strb	r3, [r0, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    293a:	231f      	movs	r3, #31
    293c:	7103      	strb	r3, [r0, #4]
    293e:	e143      	b.n	2bc8 <nwkRxTaskHandler+0x3a4>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2940:	1c1f      	adds	r7, r3, #0
    2942:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2944:	454b      	cmp	r3, r9
    2946:	d1bf      	bne.n	28c8 <nwkRxTaskHandler+0xa4>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2948:	2f00      	cmp	r7, #0
    294a:	d100      	bne.n	294e <nwkRxTaskHandler+0x12a>
    294c:	e111      	b.n	2b72 <nwkRxTaskHandler+0x34e>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    294e:	7b61      	ldrb	r1, [r4, #13]
    2950:	7ba2      	ldrb	r2, [r4, #14]
    2952:	0212      	lsls	r2, r2, #8
    2954:	430a      	orrs	r2, r1
    2956:	803a      	strh	r2, [r7, #0]
	freeEntry->seq = header->nwkSeq;
    2958:	7b23      	ldrb	r3, [r4, #12]
    295a:	70bb      	strb	r3, [r7, #2]
	freeEntry->mask = 1;
    295c:	2301      	movs	r3, #1
    295e:	70fb      	strb	r3, [r7, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2960:	231f      	movs	r3, #31
    2962:	713b      	strb	r3, [r7, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2964:	488d      	ldr	r0, [pc, #564]	; (2b9c <nwkRxTaskHandler+0x378>)
    2966:	4b8e      	ldr	r3, [pc, #568]	; (2ba0 <nwkRxTaskHandler+0x37c>)
    2968:	4798      	blx	r3
    296a:	e12d      	b.n	2bc8 <nwkRxTaskHandler+0x3a4>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    296c:	4b88      	ldr	r3, [pc, #544]	; (2b90 <nwkRxTaskHandler+0x36c>)
    296e:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    2970:	7be0      	ldrb	r0, [r4, #15]
    2972:	7c23      	ldrb	r3, [r4, #16]
    2974:	021b      	lsls	r3, r3, #8
    2976:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2978:	429a      	cmp	r2, r3
    297a:	d010      	beq.n	299e <nwkRxTaskHandler+0x17a>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    297c:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    297e:	074f      	lsls	r7, r1, #29
    2980:	d40a      	bmi.n	2998 <nwkRxTaskHandler+0x174>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    2982:	1c20      	adds	r0, r4, #0
    2984:	4b87      	ldr	r3, [pc, #540]	; (2ba4 <nwkRxTaskHandler+0x380>)
    2986:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2988:	4b81      	ldr	r3, [pc, #516]	; (2b90 <nwkRxTaskHandler+0x36c>)
    298a:	881a      	ldrh	r2, [r3, #0]
    298c:	7be0      	ldrb	r0, [r4, #15]
    298e:	7c23      	ldrb	r3, [r4, #16]
    2990:	021b      	lsls	r3, r3, #8
    2992:	4303      	orrs	r3, r0
    2994:	429a      	cmp	r2, r3
    2996:	d002      	beq.n	299e <nwkRxTaskHandler+0x17a>
    2998:	497c      	ldr	r1, [pc, #496]	; (2b8c <nwkRxTaskHandler+0x368>)
    299a:	428b      	cmp	r3, r1
    299c:	d108      	bne.n	29b0 <nwkRxTaskHandler+0x18c>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    299e:	7ae3      	ldrb	r3, [r4, #11]
    29a0:	0798      	lsls	r0, r3, #30
    29a2:	d502      	bpl.n	29aa <nwkRxTaskHandler+0x186>
				frame->state = NWK_RX_STATE_DECRYPT;
    29a4:	2321      	movs	r3, #33	; 0x21
    29a6:	7023      	strb	r3, [r4, #0]
    29a8:	e0e3      	b.n	2b72 <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    29aa:	2322      	movs	r3, #34	; 0x22
    29ac:	7023      	strb	r3, [r4, #0]
    29ae:	e0e0      	b.n	2b72 <nwkRxTaskHandler+0x34e>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    29b0:	79e1      	ldrb	r1, [r4, #7]
    29b2:	7a23      	ldrb	r3, [r4, #8]
    29b4:	021b      	lsls	r3, r3, #8
    29b6:	430b      	orrs	r3, r1
    29b8:	429a      	cmp	r2, r3
    29ba:	d000      	beq.n	29be <nwkRxTaskHandler+0x19a>
    29bc:	e0d9      	b.n	2b72 <nwkRxTaskHandler+0x34e>
			frame->state = NWK_RX_STATE_ROUTE;
    29be:	2323      	movs	r3, #35	; 0x23
    29c0:	7023      	strb	r3, [r4, #0]
    29c2:	e0d6      	b.n	2b72 <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    29c4:	1c20      	adds	r0, r4, #0
    29c6:	2100      	movs	r1, #0
    29c8:	4b77      	ldr	r3, [pc, #476]	; (2ba8 <nwkRxTaskHandler+0x384>)
    29ca:	4798      	blx	r3
		}
		break;
    29cc:	e0d1      	b.n	2b72 <nwkRxTaskHandler+0x34e>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    29ce:	2200      	movs	r2, #0
    29d0:	4b76      	ldr	r3, [pc, #472]	; (2bac <nwkRxTaskHandler+0x388>)
    29d2:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    29d4:	7c61      	ldrb	r1, [r4, #17]
    29d6:	0909      	lsrs	r1, r1, #4
    29d8:	b2ca      	uxtb	r2, r1
    29da:	3202      	adds	r2, #2
    29dc:	0092      	lsls	r2, r2, #2
    29de:	4b6c      	ldr	r3, [pc, #432]	; (2b90 <nwkRxTaskHandler+0x36c>)
    29e0:	58d2      	ldr	r2, [r2, r3]
    29e2:	2a00      	cmp	r2, #0
    29e4:	d05f      	beq.n	2aa6 <nwkRxTaskHandler+0x282>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    29e6:	1ca3      	adds	r3, r4, #2
    29e8:	7b67      	ldrb	r7, [r4, #13]
    29ea:	7ba0      	ldrb	r0, [r4, #14]
    29ec:	0200      	lsls	r0, r0, #8
    29ee:	4338      	orrs	r0, r7
    29f0:	4680      	mov	r8, r0
    29f2:	466e      	mov	r6, sp
    29f4:	8030      	strh	r0, [r6, #0]
	ind.dstAddr = header->nwkDstAddr;
    29f6:	7be0      	ldrb	r0, [r4, #15]
    29f8:	7c26      	ldrb	r6, [r4, #16]
    29fa:	0236      	lsls	r6, r6, #8
    29fc:	1c37      	adds	r7, r6, #0
    29fe:	4307      	orrs	r7, r0
    2a00:	4668      	mov	r0, sp
    2a02:	8047      	strh	r7, [r0, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    2a04:	7c66      	ldrb	r6, [r4, #17]
    2a06:	0736      	lsls	r6, r6, #28
    2a08:	0f36      	lsrs	r6, r6, #28
    2a0a:	7106      	strb	r6, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    2a0c:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    2a0e:	2181      	movs	r1, #129	; 0x81
    2a10:	5c61      	ldrb	r1, [r4, r1]
    2a12:	2082      	movs	r0, #130	; 0x82
    2a14:	5c26      	ldrb	r6, [r4, r0]
    2a16:	0236      	lsls	r6, r6, #8
    2a18:	4331      	orrs	r1, r6
    2a1a:	2083      	movs	r0, #131	; 0x83
    2a1c:	5c26      	ldrb	r6, [r4, r0]
    2a1e:	0436      	lsls	r6, r6, #16
    2a20:	4331      	orrs	r1, r6
    2a22:	2084      	movs	r0, #132	; 0x84
    2a24:	5c26      	ldrb	r6, [r4, r0]
    2a26:	0636      	lsls	r6, r6, #24
    2a28:	4331      	orrs	r1, r6
    2a2a:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    2a2c:	1a59      	subs	r1, r3, r1
    2a2e:	468c      	mov	ip, r1
    2a30:	7861      	ldrb	r1, [r4, #1]
    2a32:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    2a34:	4668      	mov	r0, sp
    2a36:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    2a38:	2185      	movs	r1, #133	; 0x85
    2a3a:	5c61      	ldrb	r1, [r4, r1]
    2a3c:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    2a3e:	2186      	movs	r1, #134	; 0x86
    2a40:	5c61      	ldrb	r1, [r4, r1]
    2a42:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2a44:	7ae3      	ldrb	r3, [r4, #11]
    2a46:	07d9      	lsls	r1, r3, #31
    2a48:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2a4a:	2602      	movs	r6, #2
    2a4c:	4033      	ands	r3, r6
    2a4e:	430b      	orrs	r3, r1
    2a50:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2a52:	7ae1      	ldrb	r1, [r4, #11]
    2a54:	0749      	lsls	r1, r1, #29
    2a56:	0fc9      	lsrs	r1, r1, #31
    2a58:	0149      	lsls	r1, r1, #5
    2a5a:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2a5c:	7ae1      	ldrb	r1, [r4, #11]
    2a5e:	0709      	lsls	r1, r1, #28
    2a60:	0fc9      	lsrs	r1, r1, #31
    2a62:	0189      	lsls	r1, r1, #6
    2a64:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2a66:	4952      	ldr	r1, [pc, #328]	; (2bb0 <nwkRxTaskHandler+0x38c>)
    2a68:	187f      	adds	r7, r7, r1
    2a6a:	4279      	negs	r1, r7
    2a6c:	414f      	adcs	r7, r1
    2a6e:	00bf      	lsls	r7, r7, #2
    2a70:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2a72:	7a67      	ldrb	r7, [r4, #9]
    2a74:	7aa1      	ldrb	r1, [r4, #10]
    2a76:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2a78:	4339      	orrs	r1, r7
    2a7a:	4646      	mov	r6, r8
    2a7c:	1a70      	subs	r0, r6, r1
    2a7e:	4241      	negs	r1, r0
    2a80:	4148      	adcs	r0, r1
    2a82:	00c0      	lsls	r0, r0, #3
    2a84:	4303      	orrs	r3, r0
    2a86:	466f      	mov	r7, sp
    2a88:	71bb      	strb	r3, [r7, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2a8a:	7960      	ldrb	r0, [r4, #5]
    2a8c:	79a1      	ldrb	r1, [r4, #6]
    2a8e:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2a90:	4301      	orrs	r1, r0
    2a92:	4847      	ldr	r0, [pc, #284]	; (2bb0 <nwkRxTaskHandler+0x38c>)
    2a94:	1809      	adds	r1, r1, r0
    2a96:	4248      	negs	r0, r1
    2a98:	4141      	adcs	r1, r0
    2a9a:	0109      	lsls	r1, r1, #4
    2a9c:	430b      	orrs	r3, r1
    2a9e:	71bb      	strb	r3, [r7, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2aa0:	4668      	mov	r0, sp
    2aa2:	4790      	blx	r2
    2aa4:	e000      	b.n	2aa8 <nwkRxTaskHandler+0x284>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2aa6:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2aa8:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    2aaa:	07db      	lsls	r3, r3, #31
    2aac:	17db      	asrs	r3, r3, #31
    2aae:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2ab0:	79e3      	ldrb	r3, [r4, #7]
    2ab2:	7a22      	ldrb	r2, [r4, #8]
    2ab4:	0212      	lsls	r2, r2, #8
    2ab6:	431a      	orrs	r2, r3
    2ab8:	4b34      	ldr	r3, [pc, #208]	; (2b8c <nwkRxTaskHandler+0x368>)
    2aba:	429a      	cmp	r2, r3
    2abc:	d10b      	bne.n	2ad6 <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2abe:	7be1      	ldrb	r1, [r4, #15]
    2ac0:	7c23      	ldrb	r3, [r4, #16]
    2ac2:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2ac4:	4a32      	ldr	r2, [pc, #200]	; (2b90 <nwkRxTaskHandler+0x36c>)
    2ac6:	8812      	ldrh	r2, [r2, #0]
    2ac8:	430b      	orrs	r3, r1
    2aca:	429a      	cmp	r2, r3
    2acc:	d103      	bne.n	2ad6 <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    2ace:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    2ad0:	0719      	lsls	r1, r3, #28
    2ad2:	d400      	bmi.n	2ad6 <nwkRxTaskHandler+0x2b2>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    2ad4:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    2ad6:	7963      	ldrb	r3, [r4, #5]
    2ad8:	79a2      	ldrb	r2, [r4, #6]
    2ada:	0212      	lsls	r2, r2, #8
    2adc:	431a      	orrs	r2, r3
    2ade:	4b2b      	ldr	r3, [pc, #172]	; (2b8c <nwkRxTaskHandler+0x368>)
    2ae0:	429a      	cmp	r2, r3
    2ae2:	d03c      	beq.n	2b5e <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2ae4:	4b2a      	ldr	r3, [pc, #168]	; (2b90 <nwkRxTaskHandler+0x36c>)
    2ae6:	881a      	ldrh	r2, [r3, #0]
    2ae8:	4b28      	ldr	r3, [pc, #160]	; (2b8c <nwkRxTaskHandler+0x368>)
    2aea:	429a      	cmp	r2, r3
    2aec:	d037      	beq.n	2b5e <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (ack) {
    2aee:	2800      	cmp	r0, #0
    2af0:	d035      	beq.n	2b5e <nwkRxTaskHandler+0x33a>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    2af2:	4b30      	ldr	r3, [pc, #192]	; (2bb4 <nwkRxTaskHandler+0x390>)
    2af4:	4798      	blx	r3
    2af6:	1e07      	subs	r7, r0, #0
    2af8:	d031      	beq.n	2b5e <nwkRxTaskHandler+0x33a>
		return;
	}

	nwkFrameCommandInit(ack);
    2afa:	4b2f      	ldr	r3, [pc, #188]	; (2bb8 <nwkRxTaskHandler+0x394>)
    2afc:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    2afe:	787b      	ldrb	r3, [r7, #1]
    2b00:	3303      	adds	r3, #3
    2b02:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    2b04:	2200      	movs	r2, #0
    2b06:	2389      	movs	r3, #137	; 0x89
    2b08:	54fa      	strb	r2, [r7, r3]
    2b0a:	238a      	movs	r3, #138	; 0x8a
    2b0c:	54fa      	strb	r2, [r7, r3]
    2b0e:	238b      	movs	r3, #139	; 0x8b
    2b10:	54fa      	strb	r2, [r7, r3]
    2b12:	238c      	movs	r3, #140	; 0x8c
    2b14:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2b16:	7ae2      	ldrb	r2, [r4, #11]
    2b18:	2302      	movs	r3, #2
    2b1a:	401a      	ands	r2, r3
    2b1c:	7afb      	ldrb	r3, [r7, #11]
    2b1e:	2102      	movs	r1, #2
    2b20:	438b      	bics	r3, r1
    2b22:	4313      	orrs	r3, r2
    2b24:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2b26:	7b62      	ldrb	r2, [r4, #13]
    2b28:	7ba3      	ldrb	r3, [r4, #14]
    2b2a:	73fa      	strb	r2, [r7, #15]
    2b2c:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    2b2e:	2381      	movs	r3, #129	; 0x81
    2b30:	5cfa      	ldrb	r2, [r7, r3]
    2b32:	2382      	movs	r3, #130	; 0x82
    2b34:	5cfb      	ldrb	r3, [r7, r3]
    2b36:	021b      	lsls	r3, r3, #8
    2b38:	4313      	orrs	r3, r2
    2b3a:	2283      	movs	r2, #131	; 0x83
    2b3c:	5cba      	ldrb	r2, [r7, r2]
    2b3e:	0412      	lsls	r2, r2, #16
    2b40:	4313      	orrs	r3, r2
    2b42:	2284      	movs	r2, #132	; 0x84
    2b44:	5cba      	ldrb	r2, [r7, r2]
    2b46:	0612      	lsls	r2, r2, #24
    2b48:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    2b4a:	2200      	movs	r2, #0
    2b4c:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    2b4e:	4a17      	ldr	r2, [pc, #92]	; (2bac <nwkRxTaskHandler+0x388>)
    2b50:	7812      	ldrb	r2, [r2, #0]
    2b52:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    2b54:	7b22      	ldrb	r2, [r4, #12]
    2b56:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    2b58:	1c38      	adds	r0, r7, #0
    2b5a:	4b18      	ldr	r3, [pc, #96]	; (2bbc <nwkRxTaskHandler+0x398>)
    2b5c:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    2b5e:	2324      	movs	r3, #36	; 0x24
    2b60:	7023      	strb	r3, [r4, #0]
    2b62:	e006      	b.n	2b72 <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    2b64:	1c20      	adds	r0, r4, #0
    2b66:	4b16      	ldr	r3, [pc, #88]	; (2bc0 <nwkRxTaskHandler+0x39c>)
    2b68:	4798      	blx	r3
		}
		break;
    2b6a:	e002      	b.n	2b72 <nwkRxTaskHandler+0x34e>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    2b6c:	1c20      	adds	r0, r4, #0
    2b6e:	4b15      	ldr	r3, [pc, #84]	; (2bc4 <nwkRxTaskHandler+0x3a0>)
    2b70:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2b72:	1c20      	adds	r0, r4, #0
    2b74:	47a8      	blx	r5
    2b76:	1e04      	subs	r4, r0, #0
    2b78:	d000      	beq.n	2b7c <nwkRxTaskHandler+0x358>
    2b7a:	e65f      	b.n	283c <nwkRxTaskHandler+0x18>
    2b7c:	e02d      	b.n	2bda <nwkRxTaskHandler+0x3b6>
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	0000234d 	.word	0x0000234d
    2b84:	2000059c 	.word	0x2000059c
    2b88:	00005aa0 	.word	0x00005aa0
    2b8c:	0000ffff 	.word	0x0000ffff
    2b90:	200008ec 	.word	0x200008ec
    2b94:	0000249d 	.word	0x0000249d
    2b98:	00002485 	.word	0x00002485
    2b9c:	200005dc 	.word	0x200005dc
    2ba0:	00003601 	.word	0x00003601
    2ba4:	00003011 	.word	0x00003011
    2ba8:	00002c15 	.word	0x00002c15
    2bac:	200005d8 	.word	0x200005d8
    2bb0:	ffff0001 	.word	0xffff0001
    2bb4:	000022c9 	.word	0x000022c9
    2bb8:	00002389 	.word	0x00002389
    2bbc:	00002f51 	.word	0x00002f51
    2bc0:	00002629 	.word	0x00002629
    2bc4:	00002339 	.word	0x00002339
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2bc8:	79e1      	ldrb	r1, [r4, #7]
    2bca:	7a22      	ldrb	r2, [r4, #8]
    2bcc:	0212      	lsls	r2, r2, #8
    2bce:	430a      	orrs	r2, r1
    2bd0:	4b04      	ldr	r3, [pc, #16]	; (2be4 <nwkRxTaskHandler+0x3c0>)
    2bd2:	429a      	cmp	r2, r3
    2bd4:	d000      	beq.n	2bd8 <nwkRxTaskHandler+0x3b4>
    2bd6:	e6d7      	b.n	2988 <nwkRxTaskHandler+0x164>
    2bd8:	e6c8      	b.n	296c <nwkRxTaskHandler+0x148>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    2bda:	b005      	add	sp, #20
    2bdc:	bc0c      	pop	{r2, r3}
    2bde:	4690      	mov	r8, r2
    2be0:	4699      	mov	r9, r3
    2be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2be4:	0000ffff 	.word	0x0000ffff

00002be8 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2be8:	2300      	movs	r3, #0
    2bea:	4a02      	ldr	r2, [pc, #8]	; (2bf4 <nwkSecurityInit+0xc>)
    2bec:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2bee:	4a02      	ldr	r2, [pc, #8]	; (2bf8 <nwkSecurityInit+0x10>)
    2bf0:	6013      	str	r3, [r2, #0]
}
    2bf2:	4770      	bx	lr
    2bf4:	200005f0 	.word	0x200005f0
    2bf8:	200005f4 	.word	0x200005f4

00002bfc <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    2bfc:	b508      	push	{r3, lr}
    2bfe:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    2c00:	4802      	ldr	r0, [pc, #8]	; (2c0c <NWK_SetSecurityKey+0x10>)
    2c02:	2210      	movs	r2, #16
    2c04:	4b02      	ldr	r3, [pc, #8]	; (2c10 <NWK_SetSecurityKey+0x14>)
    2c06:	4798      	blx	r3
}
    2c08:	bd08      	pop	{r3, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	20000934 	.word	0x20000934
    2c10:	00004a7d 	.word	0x00004a7d

00002c14 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    2c14:	2900      	cmp	r1, #0
    2c16:	d002      	beq.n	2c1e <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    2c18:	2330      	movs	r3, #48	; 0x30
    2c1a:	7003      	strb	r3, [r0, #0]
    2c1c:	e001      	b.n	2c22 <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    2c1e:	2331      	movs	r3, #49	; 0x31
    2c20:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    2c22:	4b02      	ldr	r3, [pc, #8]	; (2c2c <nwkSecurityProcess+0x18>)
    2c24:	781a      	ldrb	r2, [r3, #0]
    2c26:	3201      	adds	r2, #1
    2c28:	701a      	strb	r2, [r3, #0]
}
    2c2a:	4770      	bx	lr
    2c2c:	200005f0 	.word	0x200005f0

00002c30 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    2c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c32:	4647      	mov	r7, r8
    2c34:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2c36:	4b24      	ldr	r3, [pc, #144]	; (2cc8 <SYS_EncryptConf+0x98>)
    2c38:	681e      	ldr	r6, [r3, #0]
    2c3a:	4b24      	ldr	r3, [pc, #144]	; (2ccc <SYS_EncryptConf+0x9c>)
    2c3c:	781b      	ldrb	r3, [r3, #0]
    2c3e:	4698      	mov	r8, r3
    2c40:	2381      	movs	r3, #129	; 0x81
    2c42:	5cf3      	ldrb	r3, [r6, r3]
    2c44:	2282      	movs	r2, #130	; 0x82
    2c46:	5cb1      	ldrb	r1, [r6, r2]
    2c48:	0209      	lsls	r1, r1, #8
    2c4a:	4319      	orrs	r1, r3
    2c4c:	2383      	movs	r3, #131	; 0x83
    2c4e:	5cf4      	ldrb	r4, [r6, r3]
    2c50:	0424      	lsls	r4, r4, #16
    2c52:	4321      	orrs	r1, r4
    2c54:	2384      	movs	r3, #132	; 0x84
    2c56:	5cf4      	ldrb	r4, [r6, r3]
    2c58:	0624      	lsls	r4, r4, #24
    2c5a:	4321      	orrs	r1, r4
    2c5c:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    2c5e:	4b1c      	ldr	r3, [pc, #112]	; (2cd0 <SYS_EncryptConf+0xa0>)
    2c60:	781b      	ldrb	r3, [r3, #0]
    2c62:	469c      	mov	ip, r3
    2c64:	1c1f      	adds	r7, r3, #0
    2c66:	2b10      	cmp	r3, #16
    2c68:	d900      	bls.n	2c6c <SYS_EncryptConf+0x3c>
    2c6a:	2710      	movs	r7, #16
    2c6c:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2c6e:	2f00      	cmp	r7, #0
    2c70:	d016      	beq.n	2ca0 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    2c72:	4b18      	ldr	r3, [pc, #96]	; (2cd4 <SYS_EncryptConf+0xa4>)
    2c74:	781d      	ldrb	r5, [r3, #0]
    2c76:	1c0b      	adds	r3, r1, #0
    2c78:	4a17      	ldr	r2, [pc, #92]	; (2cd8 <SYS_EncryptConf+0xa8>)
    2c7a:	1e7c      	subs	r4, r7, #1
    2c7c:	b2e4      	uxtb	r4, r4
    2c7e:	190c      	adds	r4, r1, r4
    2c80:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    2c82:	7810      	ldrb	r0, [r2, #0]
    2c84:	7819      	ldrb	r1, [r3, #0]
    2c86:	4041      	eors	r1, r0
    2c88:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    2c8a:	2d00      	cmp	r5, #0
    2c8c:	d001      	beq.n	2c92 <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    2c8e:	7011      	strb	r1, [r2, #0]
    2c90:	e002      	b.n	2c98 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    2c92:	7810      	ldrb	r0, [r2, #0]
    2c94:	4041      	eors	r1, r0
    2c96:	7011      	strb	r1, [r2, #0]
    2c98:	3301      	adds	r3, #1
    2c9a:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2c9c:	42a3      	cmp	r3, r4
    2c9e:	d1f0      	bne.n	2c82 <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2ca0:	4643      	mov	r3, r8
    2ca2:	18fa      	adds	r2, r7, r3
    2ca4:	4b09      	ldr	r3, [pc, #36]	; (2ccc <SYS_EncryptConf+0x9c>)
    2ca6:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    2ca8:	4663      	mov	r3, ip
    2caa:	1bdf      	subs	r7, r3, r7
    2cac:	b2ff      	uxtb	r7, r7
    2cae:	4b08      	ldr	r3, [pc, #32]	; (2cd0 <SYS_EncryptConf+0xa0>)
    2cb0:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    2cb2:	2f00      	cmp	r7, #0
    2cb4:	d002      	beq.n	2cbc <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2cb6:	2332      	movs	r3, #50	; 0x32
    2cb8:	7033      	strb	r3, [r6, #0]
    2cba:	e001      	b.n	2cc0 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    2cbc:	2334      	movs	r3, #52	; 0x34
    2cbe:	7033      	strb	r3, [r6, #0]
	}
}
    2cc0:	bc04      	pop	{r2}
    2cc2:	4690      	mov	r8, r2
    2cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	200005f4 	.word	0x200005f4
    2ccc:	200005f8 	.word	0x200005f8
    2cd0:	200005f9 	.word	0x200005f9
    2cd4:	200005fa 	.word	0x200005fa
    2cd8:	200005fc 	.word	0x200005fc

00002cdc <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    2cdc:	b530      	push	{r4, r5, lr}
    2cde:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    2ce0:	4b56      	ldr	r3, [pc, #344]	; (2e3c <nwkSecurityTaskHandler+0x160>)
    2ce2:	781b      	ldrb	r3, [r3, #0]
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	d100      	bne.n	2cea <nwkSecurityTaskHandler+0xe>
    2ce8:	e0a5      	b.n	2e36 <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    2cea:	4b55      	ldr	r3, [pc, #340]	; (2e40 <nwkSecurityTaskHandler+0x164>)
    2cec:	681c      	ldr	r4, [r3, #0]
    2cee:	2c00      	cmp	r4, #0
    2cf0:	d100      	bne.n	2cf4 <nwkSecurityTaskHandler+0x18>
    2cf2:	e09b      	b.n	2e2c <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    2cf4:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    2cf6:	2b34      	cmp	r3, #52	; 0x34
    2cf8:	d145      	bne.n	2d86 <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2cfa:	2381      	movs	r3, #129	; 0x81
    2cfc:	5ce3      	ldrb	r3, [r4, r3]
    2cfe:	2282      	movs	r2, #130	; 0x82
    2d00:	5ca1      	ldrb	r1, [r4, r2]
    2d02:	0209      	lsls	r1, r1, #8
    2d04:	4319      	orrs	r1, r3
    2d06:	2383      	movs	r3, #131	; 0x83
    2d08:	5ce3      	ldrb	r3, [r4, r3]
    2d0a:	041b      	lsls	r3, r3, #16
    2d0c:	4319      	orrs	r1, r3
    2d0e:	2384      	movs	r3, #132	; 0x84
    2d10:	5ce3      	ldrb	r3, [r4, r3]
    2d12:	061b      	lsls	r3, r3, #24
    2d14:	4319      	orrs	r1, r3
    2d16:	4b4b      	ldr	r3, [pc, #300]	; (2e44 <nwkSecurityTaskHandler+0x168>)
    2d18:	781b      	ldrb	r3, [r3, #0]
    2d1a:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2d1c:	4b4a      	ldr	r3, [pc, #296]	; (2e48 <nwkSecurityTaskHandler+0x16c>)
    2d1e:	685d      	ldr	r5, [r3, #4]
    2d20:	681a      	ldr	r2, [r3, #0]
    2d22:	4055      	eors	r5, r2
    2d24:	689a      	ldr	r2, [r3, #8]
    2d26:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    2d28:	68db      	ldr	r3, [r3, #12]
    2d2a:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2d2c:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    2d2e:	4b47      	ldr	r3, [pc, #284]	; (2e4c <nwkSecurityTaskHandler+0x170>)
    2d30:	781b      	ldrb	r3, [r3, #0]
    2d32:	2b00      	cmp	r3, #0
    2d34:	d009      	beq.n	2d4a <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    2d36:	1c08      	adds	r0, r1, #0
    2d38:	4669      	mov	r1, sp
    2d3a:	2204      	movs	r2, #4
    2d3c:	4b44      	ldr	r3, [pc, #272]	; (2e50 <nwkSecurityTaskHandler+0x174>)
    2d3e:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    2d40:	7863      	ldrb	r3, [r4, #1]
    2d42:	3304      	adds	r3, #4
    2d44:	7063      	strb	r3, [r4, #1]
		return true;
    2d46:	2101      	movs	r1, #1
    2d48:	e008      	b.n	2d5c <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    2d4a:	a801      	add	r0, sp, #4
    2d4c:	2204      	movs	r2, #4
    2d4e:	4b40      	ldr	r3, [pc, #256]	; (2e50 <nwkSecurityTaskHandler+0x174>)
    2d50:	4798      	blx	r3
		return vmic == tmic;
    2d52:	9b01      	ldr	r3, [sp, #4]
    2d54:	1ae9      	subs	r1, r5, r3
    2d56:	424d      	negs	r5, r1
    2d58:	4169      	adcs	r1, r5
    2d5a:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    2d5c:	4b3b      	ldr	r3, [pc, #236]	; (2e4c <nwkSecurityTaskHandler+0x170>)
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d004      	beq.n	2d6e <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    2d64:	4b36      	ldr	r3, [pc, #216]	; (2e40 <nwkSecurityTaskHandler+0x164>)
    2d66:	6818      	ldr	r0, [r3, #0]
    2d68:	4b3a      	ldr	r3, [pc, #232]	; (2e54 <nwkSecurityTaskHandler+0x178>)
    2d6a:	4798      	blx	r3
    2d6c:	e003      	b.n	2d76 <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    2d6e:	4b34      	ldr	r3, [pc, #208]	; (2e40 <nwkSecurityTaskHandler+0x164>)
    2d70:	6818      	ldr	r0, [r3, #0]
    2d72:	4b39      	ldr	r3, [pc, #228]	; (2e58 <nwkSecurityTaskHandler+0x17c>)
    2d74:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    2d76:	2200      	movs	r2, #0
    2d78:	4b31      	ldr	r3, [pc, #196]	; (2e40 <nwkSecurityTaskHandler+0x164>)
    2d7a:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    2d7c:	4b2f      	ldr	r3, [pc, #188]	; (2e3c <nwkSecurityTaskHandler+0x160>)
    2d7e:	781a      	ldrb	r2, [r3, #0]
    2d80:	3a01      	subs	r2, #1
    2d82:	701a      	strb	r2, [r3, #0]
    2d84:	e057      	b.n	2e36 <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    2d86:	2b32      	cmp	r3, #50	; 0x32
    2d88:	d155      	bne.n	2e36 <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    2d8a:	2333      	movs	r3, #51	; 0x33
    2d8c:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    2d8e:	482e      	ldr	r0, [pc, #184]	; (2e48 <nwkSecurityTaskHandler+0x16c>)
    2d90:	4932      	ldr	r1, [pc, #200]	; (2e5c <nwkSecurityTaskHandler+0x180>)
    2d92:	4b33      	ldr	r3, [pc, #204]	; (2e60 <nwkSecurityTaskHandler+0x184>)
    2d94:	4798      	blx	r3
    2d96:	e04e      	b.n	2e36 <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    2d98:	7803      	ldrb	r3, [r0, #0]
    2d9a:	3b30      	subs	r3, #48	; 0x30
    2d9c:	2b01      	cmp	r3, #1
    2d9e:	d847      	bhi.n	2e30 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    2da0:	4b27      	ldr	r3, [pc, #156]	; (2e40 <nwkSecurityTaskHandler+0x164>)
    2da2:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    2da4:	4a28      	ldr	r2, [pc, #160]	; (2e48 <nwkSecurityTaskHandler+0x16c>)
    2da6:	7b01      	ldrb	r1, [r0, #12]
    2da8:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2daa:	7bc1      	ldrb	r1, [r0, #15]
    2dac:	7c04      	ldrb	r4, [r0, #16]
    2dae:	0224      	lsls	r4, r4, #8
    2db0:	430c      	orrs	r4, r1
    2db2:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    2db4:	7c41      	ldrb	r1, [r0, #17]
    2db6:	0909      	lsrs	r1, r1, #4
    2db8:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2dba:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2dbc:	7b41      	ldrb	r1, [r0, #13]
    2dbe:	7b84      	ldrb	r4, [r0, #14]
    2dc0:	0224      	lsls	r4, r4, #8
    2dc2:	430c      	orrs	r4, r1
    2dc4:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    2dc6:	7c41      	ldrb	r1, [r0, #17]
    2dc8:	0709      	lsls	r1, r1, #28
    2dca:	0f09      	lsrs	r1, r1, #28
    2dcc:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2dce:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    2dd0:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2dd2:	7944      	ldrb	r4, [r0, #5]
    2dd4:	7983      	ldrb	r3, [r0, #6]
    2dd6:	021b      	lsls	r3, r3, #8
    2dd8:	4323      	orrs	r3, r4
    2dda:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    2ddc:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2dde:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    2de0:	7803      	ldrb	r3, [r0, #0]
    2de2:	2b31      	cmp	r3, #49	; 0x31
    2de4:	d102      	bne.n	2dec <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    2de6:	7843      	ldrb	r3, [r0, #1]
    2de8:	3b04      	subs	r3, #4
    2dea:	7043      	strb	r3, [r0, #1]
    2dec:	1c83      	adds	r3, r0, #2
    2dee:	2281      	movs	r2, #129	; 0x81
    2df0:	5c81      	ldrb	r1, [r0, r2]
    2df2:	2282      	movs	r2, #130	; 0x82
    2df4:	5c82      	ldrb	r2, [r0, r2]
    2df6:	0212      	lsls	r2, r2, #8
    2df8:	430a      	orrs	r2, r1
    2dfa:	2183      	movs	r1, #131	; 0x83
    2dfc:	5c41      	ldrb	r1, [r0, r1]
    2dfe:	0409      	lsls	r1, r1, #16
    2e00:	430a      	orrs	r2, r1
    2e02:	2184      	movs	r1, #132	; 0x84
    2e04:	5c41      	ldrb	r1, [r0, r1]
    2e06:	0609      	lsls	r1, r1, #24
    2e08:	430a      	orrs	r2, r1
    2e0a:	1a9a      	subs	r2, r3, r2
    2e0c:	7843      	ldrb	r3, [r0, #1]
    2e0e:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    2e10:	4b14      	ldr	r3, [pc, #80]	; (2e64 <nwkSecurityTaskHandler+0x188>)
    2e12:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    2e14:	2200      	movs	r2, #0
    2e16:	4b0b      	ldr	r3, [pc, #44]	; (2e44 <nwkSecurityTaskHandler+0x168>)
    2e18:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    2e1a:	7802      	ldrb	r2, [r0, #0]
    2e1c:	3a30      	subs	r2, #48	; 0x30
    2e1e:	4253      	negs	r3, r2
    2e20:	415a      	adcs	r2, r3
    2e22:	4b0a      	ldr	r3, [pc, #40]	; (2e4c <nwkSecurityTaskHandler+0x170>)
    2e24:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2e26:	2332      	movs	r3, #50	; 0x32
    2e28:	7003      	strb	r3, [r0, #0]
    2e2a:	e004      	b.n	2e36 <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    2e2c:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2e2e:	4c0e      	ldr	r4, [pc, #56]	; (2e68 <nwkSecurityTaskHandler+0x18c>)
    2e30:	47a0      	blx	r4
    2e32:	2800      	cmp	r0, #0
    2e34:	d1b0      	bne.n	2d98 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    2e36:	b003      	add	sp, #12
    2e38:	bd30      	pop	{r4, r5, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	200005f0 	.word	0x200005f0
    2e40:	200005f4 	.word	0x200005f4
    2e44:	200005f8 	.word	0x200005f8
    2e48:	200005fc 	.word	0x200005fc
    2e4c:	200005fa 	.word	0x200005fa
    2e50:	00004a7d 	.word	0x00004a7d
    2e54:	000030d9 	.word	0x000030d9
    2e58:	00002815 	.word	0x00002815
    2e5c:	20000934 	.word	0x20000934
    2e60:	00003509 	.word	0x00003509
    2e64:	200005f9 	.word	0x200005f9
    2e68:	0000234d 	.word	0x0000234d

00002e6c <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e6e:	4647      	mov	r7, r8
    2e70:	b480      	push	{r7}
    2e72:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2e74:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2e76:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2e78:	4c0f      	ldr	r4, [pc, #60]	; (2eb8 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2e7a:	2686      	movs	r6, #134	; 0x86
    2e7c:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2e7e:	e010      	b.n	2ea2 <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2e80:	7803      	ldrb	r3, [r0, #0]
    2e82:	2b11      	cmp	r3, #17
    2e84:	d10d      	bne.n	2ea2 <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2e86:	5d82      	ldrb	r2, [r0, r6]
    2e88:	5d43      	ldrb	r3, [r0, r5]
    2e8a:	021b      	lsls	r3, r3, #8
    2e8c:	4313      	orrs	r3, r2
    2e8e:	3b01      	subs	r3, #1
    2e90:	b29b      	uxth	r3, r3
    2e92:	5583      	strb	r3, [r0, r6]
    2e94:	0a1a      	lsrs	r2, r3, #8
    2e96:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2e98:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d101      	bne.n	2ea2 <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    2e9e:	2313      	movs	r3, #19
    2ea0:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ea2:	47a0      	blx	r4
    2ea4:	2800      	cmp	r0, #0
    2ea6:	d1eb      	bne.n	2e80 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2ea8:	2f00      	cmp	r7, #0
    2eaa:	d002      	beq.n	2eb2 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    2eac:	4640      	mov	r0, r8
    2eae:	4b03      	ldr	r3, [pc, #12]	; (2ebc <nwkTxDelayTimerHandler+0x50>)
    2eb0:	4798      	blx	r3
	}
}
    2eb2:	bc04      	pop	{r2}
    2eb4:	4690      	mov	r8, r2
    2eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eb8:	0000234d 	.word	0x0000234d
    2ebc:	00003601 	.word	0x00003601

00002ec0 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ec2:	4647      	mov	r7, r8
    2ec4:	b480      	push	{r7}
    2ec6:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2ec8:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2eca:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ecc:	4c11      	ldr	r4, [pc, #68]	; (2f14 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2ece:	2686      	movs	r6, #134	; 0x86
    2ed0:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ed2:	e013      	b.n	2efc <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2ed4:	7803      	ldrb	r3, [r0, #0]
    2ed6:	2b16      	cmp	r3, #22
    2ed8:	d110      	bne.n	2efc <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2eda:	5d82      	ldrb	r2, [r0, r6]
    2edc:	5d43      	ldrb	r3, [r0, r5]
    2ede:	021b      	lsls	r3, r3, #8
    2ee0:	4313      	orrs	r3, r2
    2ee2:	3b01      	subs	r3, #1
    2ee4:	b29b      	uxth	r3, r3
    2ee6:	5583      	strb	r3, [r0, r6]
    2ee8:	0a1a      	lsrs	r2, r3, #8
    2eea:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2eec:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d104      	bne.n	2efc <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2ef2:	2317      	movs	r3, #23
    2ef4:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2ef6:	2210      	movs	r2, #16
    2ef8:	2385      	movs	r3, #133	; 0x85
    2efa:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2efc:	47a0      	blx	r4
    2efe:	2800      	cmp	r0, #0
    2f00:	d1e8      	bne.n	2ed4 <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2f02:	2f00      	cmp	r7, #0
    2f04:	d002      	beq.n	2f0c <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    2f06:	4640      	mov	r0, r8
    2f08:	4b03      	ldr	r3, [pc, #12]	; (2f18 <nwkTxAckWaitTimerHandler+0x58>)
    2f0a:	4798      	blx	r3
	}
}
    2f0c:	bc04      	pop	{r2}
    2f0e:	4690      	mov	r8, r2
    2f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	0000234d 	.word	0x0000234d
    2f18:	00003601 	.word	0x00003601

00002f1c <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    2f1c:	2200      	movs	r2, #0
    2f1e:	4b07      	ldr	r3, [pc, #28]	; (2f3c <nwkTxInit+0x20>)
    2f20:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2f22:	4b07      	ldr	r3, [pc, #28]	; (2f40 <nwkTxInit+0x24>)
    2f24:	2132      	movs	r1, #50	; 0x32
    2f26:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2f28:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2f2a:	4906      	ldr	r1, [pc, #24]	; (2f44 <nwkTxInit+0x28>)
    2f2c:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2f2e:	4b06      	ldr	r3, [pc, #24]	; (2f48 <nwkTxInit+0x2c>)
    2f30:	210a      	movs	r1, #10
    2f32:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2f34:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2f36:	4a05      	ldr	r2, [pc, #20]	; (2f4c <nwkTxInit+0x30>)
    2f38:	611a      	str	r2, [r3, #16]
}
    2f3a:	4770      	bx	lr
    2f3c:	20000620 	.word	0x20000620
    2f40:	2000060c 	.word	0x2000060c
    2f44:	00002ec1 	.word	0x00002ec1
    2f48:	20000624 	.word	0x20000624
    2f4c:	00002e6d 	.word	0x00002e6d

00002f50 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    2f50:	b510      	push	{r4, lr}
    2f52:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    2f54:	2388      	movs	r3, #136	; 0x88
    2f56:	5cc3      	ldrb	r3, [r0, r3]
    2f58:	0799      	lsls	r1, r3, #30
    2f5a:	d502      	bpl.n	2f62 <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    2f5c:	2212      	movs	r2, #18
    2f5e:	7002      	strb	r2, [r0, #0]
    2f60:	e007      	b.n	2f72 <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    2f62:	7ac2      	ldrb	r2, [r0, #11]
    2f64:	0791      	lsls	r1, r2, #30
    2f66:	d502      	bpl.n	2f6e <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    2f68:	2210      	movs	r2, #16
    2f6a:	7002      	strb	r2, [r0, #0]
    2f6c:	e001      	b.n	2f72 <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    2f6e:	2212      	movs	r2, #18
    2f70:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    2f72:	2100      	movs	r1, #0
    2f74:	2285      	movs	r2, #133	; 0x85
    2f76:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    2f78:	07da      	lsls	r2, r3, #31
    2f7a:	d504      	bpl.n	2f86 <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    2f7c:	2101      	movs	r1, #1
    2f7e:	4249      	negs	r1, r1
    2f80:	7161      	strb	r1, [r4, #5]
    2f82:	71a1      	strb	r1, [r4, #6]
    2f84:	e004      	b.n	2f90 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    2f86:	491e      	ldr	r1, [pc, #120]	; (3000 <nwkTxFrame+0xb0>)
    2f88:	7888      	ldrb	r0, [r1, #2]
    2f8a:	7160      	strb	r0, [r4, #5]
    2f8c:	78c9      	ldrb	r1, [r1, #3]
    2f8e:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    2f90:	2205      	movs	r2, #5
    2f92:	421a      	tst	r2, r3
    2f94:	d103      	bne.n	2f9e <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    2f96:	1c20      	adds	r0, r4, #0
    2f98:	4b1a      	ldr	r3, [pc, #104]	; (3004 <nwkTxFrame+0xb4>)
    2f9a:	4798      	blx	r3
    2f9c:	e003      	b.n	2fa6 <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    2f9e:	7be1      	ldrb	r1, [r4, #15]
    2fa0:	7c22      	ldrb	r2, [r4, #16]
    2fa2:	71e1      	strb	r1, [r4, #7]
    2fa4:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    2fa6:	4a16      	ldr	r2, [pc, #88]	; (3000 <nwkTxFrame+0xb0>)
    2fa8:	7811      	ldrb	r1, [r2, #0]
    2faa:	7261      	strb	r1, [r4, #9]
    2fac:	7851      	ldrb	r1, [r2, #1]
    2fae:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    2fb0:	7951      	ldrb	r1, [r2, #5]
    2fb2:	3101      	adds	r1, #1
    2fb4:	b2c9      	uxtb	r1, r1
    2fb6:	7151      	strb	r1, [r2, #5]
    2fb8:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    2fba:	79e1      	ldrb	r1, [r4, #7]
    2fbc:	7a22      	ldrb	r2, [r4, #8]
    2fbe:	0212      	lsls	r2, r2, #8
    2fc0:	430a      	orrs	r2, r1
    2fc2:	4b11      	ldr	r3, [pc, #68]	; (3008 <nwkTxFrame+0xb8>)
    2fc4:	429a      	cmp	r2, r3
    2fc6:	d110      	bne.n	2fea <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    2fc8:	2341      	movs	r3, #65	; 0x41
    2fca:	70a3      	strb	r3, [r4, #2]
    2fcc:	2378      	movs	r3, #120	; 0x78
    2fce:	425b      	negs	r3, r3
    2fd0:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2fd2:	4b0e      	ldr	r3, [pc, #56]	; (300c <nwkTxFrame+0xbc>)
    2fd4:	4798      	blx	r3
    2fd6:	2307      	movs	r3, #7
    2fd8:	4018      	ands	r0, r3
    2fda:	3001      	adds	r0, #1
    2fdc:	2386      	movs	r3, #134	; 0x86
    2fde:	54e0      	strb	r0, [r4, r3]
    2fe0:	0a00      	lsrs	r0, r0, #8
    2fe2:	b280      	uxth	r0, r0
    2fe4:	2387      	movs	r3, #135	; 0x87
    2fe6:	54e0      	strb	r0, [r4, r3]
    2fe8:	e009      	b.n	2ffe <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    2fea:	2361      	movs	r3, #97	; 0x61
    2fec:	70a3      	strb	r3, [r4, #2]
    2fee:	2378      	movs	r3, #120	; 0x78
    2ff0:	425b      	negs	r3, r3
    2ff2:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    2ff4:	2200      	movs	r2, #0
    2ff6:	2386      	movs	r3, #134	; 0x86
    2ff8:	54e2      	strb	r2, [r4, r3]
    2ffa:	2387      	movs	r3, #135	; 0x87
    2ffc:	54e2      	strb	r2, [r4, r3]
	}
}
    2ffe:	bd10      	pop	{r4, pc}
    3000:	200008ec 	.word	0x200008ec
    3004:	000025e1 	.word	0x000025e1
    3008:	0000ffff 	.word	0x0000ffff
    300c:	00004ad9 	.word	0x00004ad9

00003010 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    3010:	b538      	push	{r3, r4, r5, lr}
    3012:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    3014:	4b1d      	ldr	r3, [pc, #116]	; (308c <nwkTxBroadcastFrame+0x7c>)
    3016:	4798      	blx	r3
    3018:	1e04      	subs	r4, r0, #0
    301a:	d036      	beq.n	308a <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    301c:	2312      	movs	r3, #18
    301e:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    3020:	786b      	ldrb	r3, [r5, #1]
    3022:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    3024:	2200      	movs	r2, #0
    3026:	2385      	movs	r3, #133	; 0x85
    3028:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    302a:	4b19      	ldr	r3, [pc, #100]	; (3090 <nwkTxBroadcastFrame+0x80>)
    302c:	4798      	blx	r3
    302e:	2307      	movs	r3, #7
    3030:	4018      	ands	r0, r3
    3032:	3001      	adds	r0, #1
    3034:	2386      	movs	r3, #134	; 0x86
    3036:	54e0      	strb	r0, [r4, r3]
    3038:	0a00      	lsrs	r0, r0, #8
    303a:	b280      	uxth	r0, r0
    303c:	2387      	movs	r3, #135	; 0x87
    303e:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    3040:	2200      	movs	r2, #0
    3042:	2389      	movs	r3, #137	; 0x89
    3044:	54e2      	strb	r2, [r4, r3]
    3046:	238a      	movs	r3, #138	; 0x8a
    3048:	54e2      	strb	r2, [r4, r3]
    304a:	238b      	movs	r3, #139	; 0x8b
    304c:	54e2      	strb	r2, [r4, r3]
    304e:	238c      	movs	r3, #140	; 0x8c
    3050:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    3052:	1ca0      	adds	r0, r4, #2
    3054:	786a      	ldrb	r2, [r5, #1]
    3056:	1ca9      	adds	r1, r5, #2
    3058:	4b0e      	ldr	r3, [pc, #56]	; (3094 <nwkTxBroadcastFrame+0x84>)
    305a:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    305c:	2341      	movs	r3, #65	; 0x41
    305e:	70a3      	strb	r3, [r4, #2]
    3060:	2378      	movs	r3, #120	; 0x78
    3062:	425b      	negs	r3, r3
    3064:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    3066:	2301      	movs	r3, #1
    3068:	425b      	negs	r3, r3
    306a:	71e3      	strb	r3, [r4, #7]
    306c:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    306e:	796a      	ldrb	r2, [r5, #5]
    3070:	79ab      	ldrb	r3, [r5, #6]
    3072:	7162      	strb	r2, [r4, #5]
    3074:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    3076:	4b08      	ldr	r3, [pc, #32]	; (3098 <nwkTxBroadcastFrame+0x88>)
    3078:	781a      	ldrb	r2, [r3, #0]
    307a:	7262      	strb	r2, [r4, #9]
    307c:	785a      	ldrb	r2, [r3, #1]
    307e:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    3080:	795a      	ldrb	r2, [r3, #5]
    3082:	3201      	adds	r2, #1
    3084:	b2d2      	uxtb	r2, r2
    3086:	715a      	strb	r2, [r3, #5]
    3088:	7122      	strb	r2, [r4, #4]
}
    308a:	bd38      	pop	{r3, r4, r5, pc}
    308c:	000022c9 	.word	0x000022c9
    3090:	00004ad9 	.word	0x00004ad9
    3094:	00004a7d 	.word	0x00004a7d
    3098:	200008ec 	.word	0x200008ec

0000309c <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    309c:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    309e:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    30a0:	7b03      	ldrb	r3, [r0, #12]
		return false;
    30a2:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    30a4:	2b03      	cmp	r3, #3
    30a6:	d113      	bne.n	30d0 <nwkTxAckReceived+0x34>
    30a8:	e00d      	b.n	30c6 <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    30aa:	7803      	ldrb	r3, [r0, #0]
    30ac:	2b16      	cmp	r3, #22
    30ae:	d10c      	bne.n	30ca <nwkTxAckReceived+0x2e>
    30b0:	7b02      	ldrb	r2, [r0, #12]
    30b2:	786b      	ldrb	r3, [r5, #1]
    30b4:	429a      	cmp	r2, r3
    30b6:	d108      	bne.n	30ca <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    30b8:	2317      	movs	r3, #23
    30ba:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    30bc:	78aa      	ldrb	r2, [r5, #2]
    30be:	2388      	movs	r3, #136	; 0x88
    30c0:	54c2      	strb	r2, [r0, r3]
			return true;
    30c2:	2001      	movs	r0, #1
    30c4:	e004      	b.n	30d0 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    30c6:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    30c8:	4c02      	ldr	r4, [pc, #8]	; (30d4 <nwkTxAckReceived+0x38>)
    30ca:	47a0      	blx	r4
    30cc:	2800      	cmp	r0, #0
    30ce:	d1ec      	bne.n	30aa <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    30d0:	bd38      	pop	{r3, r4, r5, pc}
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	0000234d 	.word	0x0000234d

000030d8 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    30d8:	2312      	movs	r3, #18
    30da:	7003      	strb	r3, [r0, #0]
}
    30dc:	4770      	bx	lr
    30de:	46c0      	nop			; (mov r8, r8)

000030e0 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    30e0:	4b0d      	ldr	r3, [pc, #52]	; (3118 <PHY_DataConf+0x38>)
    30e2:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    30e4:	2801      	cmp	r0, #1
    30e6:	d009      	beq.n	30fc <PHY_DataConf+0x1c>
    30e8:	2800      	cmp	r0, #0
    30ea:	d003      	beq.n	30f4 <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    30ec:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    30ee:	2802      	cmp	r0, #2
    30f0:	d005      	beq.n	30fe <PHY_DataConf+0x1e>
    30f2:	e001      	b.n	30f8 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    30f4:	2200      	movs	r2, #0
    30f6:	e002      	b.n	30fe <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    30f8:	2201      	movs	r2, #1
    30fa:	e000      	b.n	30fe <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    30fc:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    30fe:	2185      	movs	r1, #133	; 0x85
    3100:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    3102:	2215      	movs	r2, #21
    3104:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    3106:	2200      	movs	r2, #0
    3108:	4b03      	ldr	r3, [pc, #12]	; (3118 <PHY_DataConf+0x38>)
    310a:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    310c:	4a03      	ldr	r2, [pc, #12]	; (311c <PHY_DataConf+0x3c>)
    310e:	2358      	movs	r3, #88	; 0x58
    3110:	5ad1      	ldrh	r1, [r2, r3]
    3112:	3901      	subs	r1, #1
    3114:	52d1      	strh	r1, [r2, r3]
}
    3116:	4770      	bx	lr
    3118:	20000620 	.word	0x20000620
    311c:	200008ec 	.word	0x200008ec

00003120 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    3120:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    3122:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    3124:	4d37      	ldr	r5, [pc, #220]	; (3204 <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    3126:	4e38      	ldr	r6, [pc, #224]	; (3208 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3128:	e066      	b.n	31f8 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    312a:	7823      	ldrb	r3, [r4, #0]
    312c:	3b10      	subs	r3, #16
    312e:	b2da      	uxtb	r2, r3
    3130:	2a07      	cmp	r2, #7
    3132:	d861      	bhi.n	31f8 <nwkTxTaskHandler+0xd8>
    3134:	0093      	lsls	r3, r2, #2
    3136:	58f3      	ldr	r3, [r6, r3]
    3138:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    313a:	1c20      	adds	r0, r4, #0
    313c:	2101      	movs	r1, #1
    313e:	4b33      	ldr	r3, [pc, #204]	; (320c <nwkTxTaskHandler+0xec>)
    3140:	4798      	blx	r3
		}
		break;
    3142:	e059      	b.n	31f8 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    3144:	2386      	movs	r3, #134	; 0x86
    3146:	5ce2      	ldrb	r2, [r4, r3]
    3148:	2387      	movs	r3, #135	; 0x87
    314a:	5ce3      	ldrb	r3, [r4, r3]
    314c:	021b      	lsls	r3, r3, #8
    314e:	4313      	orrs	r3, r2
    3150:	d005      	beq.n	315e <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    3152:	2311      	movs	r3, #17
    3154:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    3156:	482e      	ldr	r0, [pc, #184]	; (3210 <nwkTxTaskHandler+0xf0>)
    3158:	4b2e      	ldr	r3, [pc, #184]	; (3214 <nwkTxTaskHandler+0xf4>)
    315a:	4798      	blx	r3
    315c:	e04c      	b.n	31f8 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    315e:	2313      	movs	r3, #19
    3160:	7023      	strb	r3, [r4, #0]
    3162:	e049      	b.n	31f8 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    3164:	4b2c      	ldr	r3, [pc, #176]	; (3218 <nwkTxTaskHandler+0xf8>)
    3166:	681b      	ldr	r3, [r3, #0]
    3168:	2b00      	cmp	r3, #0
    316a:	d145      	bne.n	31f8 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    316c:	4b2a      	ldr	r3, [pc, #168]	; (3218 <nwkTxTaskHandler+0xf8>)
    316e:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    3170:	2314      	movs	r3, #20
    3172:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    3174:	1c60      	adds	r0, r4, #1
    3176:	4b29      	ldr	r3, [pc, #164]	; (321c <nwkTxTaskHandler+0xfc>)
    3178:	4798      	blx	r3
				nwkIb.lock++;
    317a:	4a29      	ldr	r2, [pc, #164]	; (3220 <nwkTxTaskHandler+0x100>)
    317c:	2358      	movs	r3, #88	; 0x58
    317e:	5ad1      	ldrh	r1, [r2, r3]
    3180:	3101      	adds	r1, #1
    3182:	52d1      	strh	r1, [r2, r3]
    3184:	e038      	b.n	31f8 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    3186:	2385      	movs	r3, #133	; 0x85
    3188:	5ce3      	ldrb	r3, [r4, r3]
    318a:	2b00      	cmp	r3, #0
    318c:	d119      	bne.n	31c2 <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    318e:	7b61      	ldrb	r1, [r4, #13]
    3190:	7ba3      	ldrb	r3, [r4, #14]
    3192:	021b      	lsls	r3, r3, #8
    3194:	4a22      	ldr	r2, [pc, #136]	; (3220 <nwkTxTaskHandler+0x100>)
    3196:	8812      	ldrh	r2, [r2, #0]
    3198:	430b      	orrs	r3, r1
    319a:	429a      	cmp	r2, r3
    319c:	d10e      	bne.n	31bc <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    319e:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    31a0:	07da      	lsls	r2, r3, #31
    31a2:	d50b      	bpl.n	31bc <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    31a4:	2316      	movs	r3, #22
    31a6:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    31a8:	2215      	movs	r2, #21
    31aa:	2386      	movs	r3, #134	; 0x86
    31ac:	54e2      	strb	r2, [r4, r3]
    31ae:	2200      	movs	r2, #0
    31b0:	2387      	movs	r3, #135	; 0x87
    31b2:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    31b4:	481b      	ldr	r0, [pc, #108]	; (3224 <nwkTxTaskHandler+0x104>)
    31b6:	4b17      	ldr	r3, [pc, #92]	; (3214 <nwkTxTaskHandler+0xf4>)
    31b8:	4798      	blx	r3
    31ba:	e01d      	b.n	31f8 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    31bc:	2317      	movs	r3, #23
    31be:	7023      	strb	r3, [r4, #0]
    31c0:	e01a      	b.n	31f8 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    31c2:	2317      	movs	r3, #23
    31c4:	7023      	strb	r3, [r4, #0]
    31c6:	e017      	b.n	31f8 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    31c8:	1c20      	adds	r0, r4, #0
    31ca:	4b17      	ldr	r3, [pc, #92]	; (3228 <nwkTxTaskHandler+0x108>)
    31cc:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    31ce:	2389      	movs	r3, #137	; 0x89
    31d0:	5ce2      	ldrb	r2, [r4, r3]
    31d2:	238a      	movs	r3, #138	; 0x8a
    31d4:	5ce3      	ldrb	r3, [r4, r3]
    31d6:	021b      	lsls	r3, r3, #8
    31d8:	4313      	orrs	r3, r2
    31da:	228b      	movs	r2, #139	; 0x8b
    31dc:	5ca2      	ldrb	r2, [r4, r2]
    31de:	0412      	lsls	r2, r2, #16
    31e0:	4313      	orrs	r3, r2
    31e2:	228c      	movs	r2, #140	; 0x8c
    31e4:	5ca2      	ldrb	r2, [r4, r2]
    31e6:	0612      	lsls	r2, r2, #24
    31e8:	4313      	orrs	r3, r2
    31ea:	d103      	bne.n	31f4 <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    31ec:	1c20      	adds	r0, r4, #0
    31ee:	4b0f      	ldr	r3, [pc, #60]	; (322c <nwkTxTaskHandler+0x10c>)
    31f0:	4798      	blx	r3
    31f2:	e001      	b.n	31f8 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    31f4:	1c20      	adds	r0, r4, #0
    31f6:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    31f8:	1c20      	adds	r0, r4, #0
    31fa:	47a8      	blx	r5
    31fc:	1e04      	subs	r4, r0, #0
    31fe:	d194      	bne.n	312a <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    3200:	bd70      	pop	{r4, r5, r6, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	0000234d 	.word	0x0000234d
    3208:	00005ab4 	.word	0x00005ab4
    320c:	00002c15 	.word	0x00002c15
    3210:	20000624 	.word	0x20000624
    3214:	00003601 	.word	0x00003601
    3218:	20000620 	.word	0x20000620
    321c:	00003395 	.word	0x00003395
    3220:	200008ec 	.word	0x200008ec
    3224:	2000060c 	.word	0x2000060c
    3228:	00002551 	.word	0x00002551
    322c:	00002339 	.word	0x00002339

00003230 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    3230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3232:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3234:	4f0b      	ldr	r7, [pc, #44]	; (3264 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3236:	4e0c      	ldr	r6, [pc, #48]	; (3268 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3238:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    323a:	2002      	movs	r0, #2
    323c:	2103      	movs	r1, #3
    323e:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3240:	2001      	movs	r0, #1
    3242:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3244:	4028      	ands	r0, r5
    3246:	2808      	cmp	r0, #8
    3248:	d1f7      	bne.n	323a <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    324a:	4f06      	ldr	r7, [pc, #24]	; (3264 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    324c:	4e06      	ldr	r6, [pc, #24]	; (3268 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    324e:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3250:	2002      	movs	r0, #2
    3252:	1c21      	adds	r1, r4, #0
    3254:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3256:	2001      	movs	r0, #1
    3258:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    325a:	4028      	ands	r0, r5
    325c:	4284      	cmp	r4, r0
    325e:	d1f7      	bne.n	3250 <phyTrxSetState+0x20>
}
    3260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	00003c31 	.word	0x00003c31
    3268:	00003b39 	.word	0x00003b39

0000326c <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    326c:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    326e:	2008      	movs	r0, #8
    3270:	4b06      	ldr	r3, [pc, #24]	; (328c <phySetRxState+0x20>)
    3272:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3274:	200f      	movs	r0, #15
    3276:	4b06      	ldr	r3, [pc, #24]	; (3290 <phySetRxState+0x24>)
    3278:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    327a:	4b06      	ldr	r3, [pc, #24]	; (3294 <phySetRxState+0x28>)
    327c:	781b      	ldrb	r3, [r3, #0]
    327e:	2b00      	cmp	r3, #0
    3280:	d002      	beq.n	3288 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    3282:	2016      	movs	r0, #22
    3284:	4b01      	ldr	r3, [pc, #4]	; (328c <phySetRxState+0x20>)
    3286:	4798      	blx	r3
	}
}
    3288:	bd08      	pop	{r3, pc}
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	00003231 	.word	0x00003231
    3290:	00003b39 	.word	0x00003b39
    3294:	200006b9 	.word	0x200006b9

00003298 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    3298:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    329a:	4b0e      	ldr	r3, [pc, #56]	; (32d4 <PHY_Init+0x3c>)
    329c:	4798      	blx	r3
	PhyReset();
    329e:	4b0e      	ldr	r3, [pc, #56]	; (32d8 <PHY_Init+0x40>)
    32a0:	4798      	blx	r3
	phyRxState = false;
    32a2:	2200      	movs	r2, #0
    32a4:	4b0d      	ldr	r3, [pc, #52]	; (32dc <PHY_Init+0x44>)
    32a6:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    32a8:	2201      	movs	r2, #1
    32aa:	4b0d      	ldr	r3, [pc, #52]	; (32e0 <PHY_Init+0x48>)
    32ac:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    32ae:	4e0d      	ldr	r6, [pc, #52]	; (32e4 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    32b0:	4d0d      	ldr	r5, [pc, #52]	; (32e8 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    32b2:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    32b4:	2002      	movs	r0, #2
    32b6:	2108      	movs	r1, #8
    32b8:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    32ba:	2001      	movs	r0, #1
    32bc:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    32be:	4020      	ands	r0, r4
    32c0:	2808      	cmp	r0, #8
    32c2:	d1f7      	bne.n	32b4 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    32c4:	2004      	movs	r0, #4
    32c6:	212e      	movs	r1, #46	; 0x2e
    32c8:	4c06      	ldr	r4, [pc, #24]	; (32e4 <PHY_Init+0x4c>)
    32ca:	47a0      	blx	r4
    32cc:	200c      	movs	r0, #12
    32ce:	21a0      	movs	r1, #160	; 0xa0
    32d0:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    32d2:	bd70      	pop	{r4, r5, r6, pc}
    32d4:	000039f9 	.word	0x000039f9
    32d8:	00003b09 	.word	0x00003b09
    32dc:	200006b9 	.word	0x200006b9
    32e0:	200006b8 	.word	0x200006b8
    32e4:	00003c31 	.word	0x00003c31
    32e8:	00003b39 	.word	0x00003b39

000032ec <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    32ec:	b508      	push	{r3, lr}
	phyRxState = rx;
    32ee:	4b02      	ldr	r3, [pc, #8]	; (32f8 <PHY_SetRxState+0xc>)
    32f0:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    32f2:	4b02      	ldr	r3, [pc, #8]	; (32fc <PHY_SetRxState+0x10>)
    32f4:	4798      	blx	r3
}
    32f6:	bd08      	pop	{r3, pc}
    32f8:	200006b9 	.word	0x200006b9
    32fc:	0000326d 	.word	0x0000326d

00003300 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    3300:	b510      	push	{r4, lr}
    3302:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3304:	2008      	movs	r0, #8
    3306:	4b05      	ldr	r3, [pc, #20]	; (331c <PHY_SetChannel+0x1c>)
    3308:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    330a:	231f      	movs	r3, #31
    330c:	1c01      	adds	r1, r0, #0
    330e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    3310:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3312:	b2e1      	uxtb	r1, r4
    3314:	2008      	movs	r0, #8
    3316:	4b02      	ldr	r3, [pc, #8]	; (3320 <PHY_SetChannel+0x20>)
    3318:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    331a:	bd10      	pop	{r4, pc}
    331c:	00003b39 	.word	0x00003b39
    3320:	00003c31 	.word	0x00003c31

00003324 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    3324:	b530      	push	{r4, r5, lr}
    3326:	b083      	sub	sp, #12
    3328:	466c      	mov	r4, sp
    332a:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    332c:	b2c1      	uxtb	r1, r0
    332e:	2022      	movs	r0, #34	; 0x22
    3330:	4d03      	ldr	r5, [pc, #12]	; (3340 <PHY_SetPanId+0x1c>)
    3332:	47a8      	blx	r5
    3334:	79e1      	ldrb	r1, [r4, #7]
    3336:	2023      	movs	r0, #35	; 0x23
    3338:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    333a:	b003      	add	sp, #12
    333c:	bd30      	pop	{r4, r5, pc}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	00003c31 	.word	0x00003c31

00003344 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    3344:	b570      	push	{r4, r5, r6, lr}
    3346:	b082      	sub	sp, #8
    3348:	466d      	mov	r5, sp
    334a:	80e8      	strh	r0, [r5, #6]
    334c:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    334e:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3350:	2020      	movs	r0, #32
    3352:	1c31      	adds	r1, r6, #0
    3354:	4c05      	ldr	r4, [pc, #20]	; (336c <PHY_SetShortAddr+0x28>)
    3356:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    3358:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    335a:	2021      	movs	r0, #33	; 0x21
    335c:	1c29      	adds	r1, r5, #0
    335e:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    3360:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3362:	b2f1      	uxtb	r1, r6
    3364:	202d      	movs	r0, #45	; 0x2d
    3366:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    3368:	b002      	add	sp, #8
    336a:	bd70      	pop	{r4, r5, r6, pc}
    336c:	00003c31 	.word	0x00003c31

00003370 <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    3370:	b510      	push	{r4, lr}
    3372:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3374:	2005      	movs	r0, #5
    3376:	4b05      	ldr	r3, [pc, #20]	; (338c <PHY_SetTxPower+0x1c>)
    3378:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    337a:	230f      	movs	r3, #15
    337c:	1c01      	adds	r1, r0, #0
    337e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    3380:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3382:	b2e1      	uxtb	r1, r4
    3384:	2005      	movs	r0, #5
    3386:	4b02      	ldr	r3, [pc, #8]	; (3390 <PHY_SetTxPower+0x20>)
    3388:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    338a:	bd10      	pop	{r4, pc}
    338c:	00003b39 	.word	0x00003b39
    3390:	00003c31 	.word	0x00003c31

00003394 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    3394:	b510      	push	{r4, lr}
    3396:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    3398:	2019      	movs	r0, #25
    339a:	4b0c      	ldr	r3, [pc, #48]	; (33cc <PHY_DataReq+0x38>)
    339c:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    339e:	200f      	movs	r0, #15
    33a0:	4b0b      	ldr	r3, [pc, #44]	; (33d0 <PHY_DataReq+0x3c>)
    33a2:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    33a4:	7821      	ldrb	r1, [r4, #0]
    33a6:	1c8b      	adds	r3, r1, #2
    33a8:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    33aa:	3101      	adds	r1, #1
    33ac:	b2c9      	uxtb	r1, r1
    33ae:	1c20      	adds	r0, r4, #0
    33b0:	4b08      	ldr	r3, [pc, #32]	; (33d4 <PHY_DataReq+0x40>)
    33b2:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    33b4:	2203      	movs	r2, #3
    33b6:	4b08      	ldr	r3, [pc, #32]	; (33d8 <PHY_DataReq+0x44>)
    33b8:	701a      	strb	r2, [r3, #0]
    33ba:	4b08      	ldr	r3, [pc, #32]	; (33dc <PHY_DataReq+0x48>)
    33bc:	2280      	movs	r2, #128	; 0x80
    33be:	0352      	lsls	r2, r2, #13
    33c0:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    33c6:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    33c8:	bd10      	pop	{r4, pc}
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	00003231 	.word	0x00003231
    33d0:	00003b39 	.word	0x00003b39
    33d4:	00003e6d 	.word	0x00003e6d
    33d8:	200006b8 	.word	0x200006b8
    33dc:	41004400 	.word	0x41004400

000033e0 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    33e0:	b510      	push	{r4, lr}
    33e2:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    33e4:	1c08      	adds	r0, r1, #0
    33e6:	2100      	movs	r1, #0
    33e8:	2200      	movs	r2, #0
    33ea:	4b05      	ldr	r3, [pc, #20]	; (3400 <PHY_EncryptReq+0x20>)
    33ec:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    33ee:	1c20      	adds	r0, r4, #0
    33f0:	2100      	movs	r1, #0
    33f2:	4b04      	ldr	r3, [pc, #16]	; (3404 <PHY_EncryptReq+0x24>)
    33f4:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    33f6:	1c20      	adds	r0, r4, #0
    33f8:	4b03      	ldr	r3, [pc, #12]	; (3408 <PHY_EncryptReq+0x28>)
    33fa:	4798      	blx	r3
}
    33fc:	bd10      	pop	{r4, pc}
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	00003891 	.word	0x00003891
    3404:	00003825 	.word	0x00003825
    3408:	000039c9 	.word	0x000039c9

0000340c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    340c:	b5f0      	push	{r4, r5, r6, r7, lr}
    340e:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    3410:	4b26      	ldr	r3, [pc, #152]	; (34ac <PHY_TaskHandler+0xa0>)
    3412:	781b      	ldrb	r3, [r3, #0]
    3414:	2b02      	cmp	r3, #2
    3416:	d046      	beq.n	34a6 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3418:	200f      	movs	r0, #15
    341a:	4b25      	ldr	r3, [pc, #148]	; (34b0 <PHY_TaskHandler+0xa4>)
    341c:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    341e:	0703      	lsls	r3, r0, #28
    3420:	d541      	bpl.n	34a6 <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    3422:	4b22      	ldr	r3, [pc, #136]	; (34ac <PHY_TaskHandler+0xa0>)
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	2b01      	cmp	r3, #1
    3428:	d124      	bne.n	3474 <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    342a:	2007      	movs	r0, #7
    342c:	4b20      	ldr	r3, [pc, #128]	; (34b0 <PHY_TaskHandler+0xa4>)
    342e:	4798      	blx	r3
    3430:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    3432:	466c      	mov	r4, sp
    3434:	3407      	adds	r4, #7
    3436:	1c20      	adds	r0, r4, #0
    3438:	2101      	movs	r1, #1
    343a:	4e1e      	ldr	r6, [pc, #120]	; (34b4 <PHY_TaskHandler+0xa8>)
    343c:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    343e:	4d1e      	ldr	r5, [pc, #120]	; (34b8 <PHY_TaskHandler+0xac>)
    3440:	7821      	ldrb	r1, [r4, #0]
    3442:	3102      	adds	r1, #2
    3444:	b2c9      	uxtb	r1, r1
    3446:	1c28      	adds	r0, r5, #0
    3448:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    344a:	a802      	add	r0, sp, #8
    344c:	1c6a      	adds	r2, r5, #1
    344e:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    3450:	7822      	ldrb	r2, [r4, #0]
    3452:	1e91      	subs	r1, r2, #2
    3454:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    3456:	18ad      	adds	r5, r5, r2
    3458:	786a      	ldrb	r2, [r5, #1]
    345a:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    345c:	3f5b      	subs	r7, #91	; 0x5b
    345e:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    3460:	4b16      	ldr	r3, [pc, #88]	; (34bc <PHY_TaskHandler+0xb0>)
    3462:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3464:	4d12      	ldr	r5, [pc, #72]	; (34b0 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3466:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3468:	2001      	movs	r0, #1
    346a:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    346c:	4020      	ands	r0, r4
    346e:	2816      	cmp	r0, #22
    3470:	d1fa      	bne.n	3468 <PHY_TaskHandler+0x5c>
    3472:	e018      	b.n	34a6 <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    3474:	2b03      	cmp	r3, #3
    3476:	d116      	bne.n	34a6 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3478:	2002      	movs	r0, #2
    347a:	4b0d      	ldr	r3, [pc, #52]	; (34b0 <PHY_TaskHandler+0xa4>)
    347c:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    347e:	0944      	lsrs	r4, r0, #5
    3480:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    3482:	2c00      	cmp	r4, #0
    3484:	d007      	beq.n	3496 <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    3486:	2c03      	cmp	r4, #3
    3488:	d004      	beq.n	3494 <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    348a:	3c05      	subs	r4, #5
    348c:	1e63      	subs	r3, r4, #1
    348e:	419c      	sbcs	r4, r3
    3490:	3402      	adds	r4, #2
    3492:	e000      	b.n	3496 <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    3494:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    3496:	4b0a      	ldr	r3, [pc, #40]	; (34c0 <PHY_TaskHandler+0xb4>)
    3498:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    349a:	2201      	movs	r2, #1
    349c:	4b03      	ldr	r3, [pc, #12]	; (34ac <PHY_TaskHandler+0xa0>)
    349e:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    34a0:	1c20      	adds	r0, r4, #0
    34a2:	4b08      	ldr	r3, [pc, #32]	; (34c4 <PHY_TaskHandler+0xb8>)
    34a4:	4798      	blx	r3
		}
	}
}
    34a6:	b005      	add	sp, #20
    34a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	200006b8 	.word	0x200006b8
    34b0:	00003b39 	.word	0x00003b39
    34b4:	00003d2d 	.word	0x00003d2d
    34b8:	20000638 	.word	0x20000638
    34bc:	000027c9 	.word	0x000027c9
    34c0:	0000326d 	.word	0x0000326d
    34c4:	000030e1 	.word	0x000030e1

000034c8 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    34c8:	b508      	push	{r3, lr}
	SYS_TimerInit();
    34ca:	4b04      	ldr	r3, [pc, #16]	; (34dc <SYS_Init+0x14>)
    34cc:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    34ce:	4b04      	ldr	r3, [pc, #16]	; (34e0 <SYS_Init+0x18>)
    34d0:	4798      	blx	r3
#endif
	PHY_Init();
    34d2:	4b04      	ldr	r3, [pc, #16]	; (34e4 <SYS_Init+0x1c>)
    34d4:	4798      	blx	r3
	NWK_Init();
    34d6:	4b04      	ldr	r3, [pc, #16]	; (34e8 <SYS_Init+0x20>)
    34d8:	4798      	blx	r3
}
    34da:	bd08      	pop	{r3, pc}
    34dc:	00003599 	.word	0x00003599
    34e0:	00003821 	.word	0x00003821
    34e4:	00003299 	.word	0x00003299
    34e8:	00002041 	.word	0x00002041

000034ec <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    34ec:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    34ee:	4b03      	ldr	r3, [pc, #12]	; (34fc <SYS_TaskHandler+0x10>)
    34f0:	4798      	blx	r3
	NWK_TaskHandler();
    34f2:	4b03      	ldr	r3, [pc, #12]	; (3500 <SYS_TaskHandler+0x14>)
    34f4:	4798      	blx	r3
	SYS_TimerTaskHandler();
    34f6:	4b03      	ldr	r3, [pc, #12]	; (3504 <SYS_TaskHandler+0x18>)
    34f8:	4798      	blx	r3
}
    34fa:	bd08      	pop	{r3, pc}
    34fc:	0000340d 	.word	0x0000340d
    3500:	000020cd 	.word	0x000020cd
    3504:	0000361d 	.word	0x0000361d

00003508 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    3508:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    350a:	4b02      	ldr	r3, [pc, #8]	; (3514 <SYS_EncryptReq+0xc>)
    350c:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    350e:	4b02      	ldr	r3, [pc, #8]	; (3518 <SYS_EncryptReq+0x10>)
    3510:	4798      	blx	r3
}
    3512:	bd08      	pop	{r3, pc}
    3514:	000033e1 	.word	0x000033e1
    3518:	00002c31 	.word	0x00002c31

0000351c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    351c:	b530      	push	{r4, r5, lr}
	if (timers) {
    351e:	4b15      	ldr	r3, [pc, #84]	; (3574 <placeTimer+0x58>)
    3520:	681d      	ldr	r5, [r3, #0]
    3522:	2d00      	cmp	r5, #0
    3524:	d01e      	beq.n	3564 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    3526:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    3528:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    352a:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    352c:	428a      	cmp	r2, r1
    352e:	d20a      	bcs.n	3546 <placeTimer+0x2a>
    3530:	e004      	b.n	353c <placeTimer+0x20>
    3532:	6859      	ldr	r1, [r3, #4]
    3534:	4291      	cmp	r1, r2
    3536:	d803      	bhi.n	3540 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3538:	1c1c      	adds	r4, r3, #0
    353a:	e004      	b.n	3546 <placeTimer+0x2a>
    353c:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    353e:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    3540:	1a89      	subs	r1, r1, r2
    3542:	6059      	str	r1, [r3, #4]
				break;
    3544:	e003      	b.n	354e <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    3546:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3548:	6823      	ldr	r3, [r4, #0]
    354a:	2b00      	cmp	r3, #0
    354c:	d1f1      	bne.n	3532 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    354e:	6042      	str	r2, [r0, #4]

		if (prev) {
    3550:	2c00      	cmp	r4, #0
    3552:	d003      	beq.n	355c <placeTimer+0x40>
			timer->next = prev->next;
    3554:	6823      	ldr	r3, [r4, #0]
    3556:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3558:	6020      	str	r0, [r4, #0]
    355a:	e009      	b.n	3570 <placeTimer+0x54>
		} else {
			timer->next = timers;
    355c:	6005      	str	r5, [r0, #0]
			timers = timer;
    355e:	4b05      	ldr	r3, [pc, #20]	; (3574 <placeTimer+0x58>)
    3560:	6018      	str	r0, [r3, #0]
    3562:	e005      	b.n	3570 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    3564:	2300      	movs	r3, #0
    3566:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3568:	6883      	ldr	r3, [r0, #8]
    356a:	6043      	str	r3, [r0, #4]
		timers = timer;
    356c:	4b01      	ldr	r3, [pc, #4]	; (3574 <placeTimer+0x58>)
    356e:	6018      	str	r0, [r3, #0]
	}
}
    3570:	bd30      	pop	{r4, r5, pc}
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	200006bc 	.word	0x200006bc

00003578 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    3578:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    357a:	4b04      	ldr	r3, [pc, #16]	; (358c <SYS_HwExpiry_Cb+0x14>)
    357c:	781a      	ldrb	r2, [r3, #0]
    357e:	3201      	adds	r2, #1
    3580:	b2d2      	uxtb	r2, r2
    3582:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3584:	4802      	ldr	r0, [pc, #8]	; (3590 <SYS_HwExpiry_Cb+0x18>)
    3586:	4b03      	ldr	r3, [pc, #12]	; (3594 <SYS_HwExpiry_Cb+0x1c>)
    3588:	4798      	blx	r3
}
    358a:	bd08      	pop	{r3, pc}
    358c:	20000948 	.word	0x20000948
    3590:	00002710 	.word	0x00002710
    3594:	00004851 	.word	0x00004851

00003598 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    3598:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    359a:	2400      	movs	r4, #0
    359c:	4b06      	ldr	r3, [pc, #24]	; (35b8 <SYS_TimerInit+0x20>)
    359e:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    35a0:	4806      	ldr	r0, [pc, #24]	; (35bc <SYS_TimerInit+0x24>)
    35a2:	4b07      	ldr	r3, [pc, #28]	; (35c0 <SYS_TimerInit+0x28>)
    35a4:	4798      	blx	r3
	common_tc_init();
    35a6:	4b07      	ldr	r3, [pc, #28]	; (35c4 <SYS_TimerInit+0x2c>)
    35a8:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    35aa:	4807      	ldr	r0, [pc, #28]	; (35c8 <SYS_TimerInit+0x30>)
    35ac:	4b07      	ldr	r3, [pc, #28]	; (35cc <SYS_TimerInit+0x34>)
    35ae:	4798      	blx	r3
	timers = NULL;
    35b0:	4b07      	ldr	r3, [pc, #28]	; (35d0 <SYS_TimerInit+0x38>)
    35b2:	601c      	str	r4, [r3, #0]
}
    35b4:	bd10      	pop	{r4, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	20000948 	.word	0x20000948
    35bc:	00003579 	.word	0x00003579
    35c0:	00004941 	.word	0x00004941
    35c4:	000048bd 	.word	0x000048bd
    35c8:	00002710 	.word	0x00002710
    35cc:	00004851 	.word	0x00004851
    35d0:	200006bc 	.word	0x200006bc

000035d4 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    35d4:	4b09      	ldr	r3, [pc, #36]	; (35fc <SYS_TimerStarted+0x28>)
    35d6:	681b      	ldr	r3, [r3, #0]
    35d8:	2b00      	cmp	r3, #0
    35da:	d009      	beq.n	35f0 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    35dc:	4283      	cmp	r3, r0
    35de:	d102      	bne.n	35e6 <SYS_TimerStarted+0x12>
    35e0:	e008      	b.n	35f4 <SYS_TimerStarted+0x20>
    35e2:	4298      	cmp	r0, r3
    35e4:	d008      	beq.n	35f8 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	2b00      	cmp	r3, #0
    35ea:	d1fa      	bne.n	35e2 <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    35ec:	2000      	movs	r0, #0
    35ee:	e004      	b.n	35fa <SYS_TimerStarted+0x26>
    35f0:	2000      	movs	r0, #0
    35f2:	e002      	b.n	35fa <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    35f4:	2001      	movs	r0, #1
    35f6:	e000      	b.n	35fa <SYS_TimerStarted+0x26>
    35f8:	2001      	movs	r0, #1
		}
	}
	return false;
}
    35fa:	4770      	bx	lr
    35fc:	200006bc 	.word	0x200006bc

00003600 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3600:	b510      	push	{r4, lr}
    3602:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    3604:	4b03      	ldr	r3, [pc, #12]	; (3614 <SYS_TimerStart+0x14>)
    3606:	4798      	blx	r3
    3608:	2800      	cmp	r0, #0
    360a:	d102      	bne.n	3612 <SYS_TimerStart+0x12>
		placeTimer(timer);
    360c:	1c20      	adds	r0, r4, #0
    360e:	4b02      	ldr	r3, [pc, #8]	; (3618 <SYS_TimerStart+0x18>)
    3610:	4798      	blx	r3
	}
}
    3612:	bd10      	pop	{r4, pc}
    3614:	000035d5 	.word	0x000035d5
    3618:	0000351d 	.word	0x0000351d

0000361c <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    361e:	4b1a      	ldr	r3, [pc, #104]	; (3688 <SYS_TimerTaskHandler+0x6c>)
    3620:	781b      	ldrb	r3, [r3, #0]
    3622:	2b00      	cmp	r3, #0
    3624:	d02f      	beq.n	3686 <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3626:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    362a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    362c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3630:	2100      	movs	r1, #0
    3632:	4b16      	ldr	r3, [pc, #88]	; (368c <SYS_TimerTaskHandler+0x70>)
    3634:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    3636:	4a14      	ldr	r2, [pc, #80]	; (3688 <SYS_TimerTaskHandler+0x6c>)
    3638:	7813      	ldrb	r3, [r2, #0]
    363a:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    363c:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    363e:	2800      	cmp	r0, #0
    3640:	d105      	bne.n	364e <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    3642:	2101      	movs	r1, #1
    3644:	4a11      	ldr	r2, [pc, #68]	; (368c <SYS_TimerTaskHandler+0x70>)
    3646:	7011      	strb	r1, [r2, #0]
    3648:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    364c:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    364e:	009d      	lsls	r5, r3, #2
    3650:	18ed      	adds	r5, r5, r3
    3652:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    3654:	4e0e      	ldr	r6, [pc, #56]	; (3690 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    3656:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3658:	e00d      	b.n	3676 <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    365a:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    365c:	6823      	ldr	r3, [r4, #0]
    365e:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3660:	7b23      	ldrb	r3, [r4, #12]
    3662:	2b01      	cmp	r3, #1
    3664:	d102      	bne.n	366c <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    3666:	1c20      	adds	r0, r4, #0
    3668:	4b0a      	ldr	r3, [pc, #40]	; (3694 <SYS_TimerTaskHandler+0x78>)
    366a:	4798      	blx	r3
		}
		if(timer->handler)
    366c:	6923      	ldr	r3, [r4, #16]
    366e:	2b00      	cmp	r3, #0
    3670:	d001      	beq.n	3676 <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    3672:	1c20      	adds	r0, r4, #0
    3674:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3676:	6834      	ldr	r4, [r6, #0]
    3678:	2c00      	cmp	r4, #0
    367a:	d004      	beq.n	3686 <SYS_TimerTaskHandler+0x6a>
    367c:	6863      	ldr	r3, [r4, #4]
    367e:	429d      	cmp	r5, r3
    3680:	d2eb      	bcs.n	365a <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    3682:	1b5d      	subs	r5, r3, r5
    3684:	6065      	str	r5, [r4, #4]
	}
}
    3686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3688:	20000948 	.word	0x20000948
    368c:	20000008 	.word	0x20000008
    3690:	200006bc 	.word	0x200006bc
    3694:	0000351d 	.word	0x0000351d

00003698 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    3698:	b508      	push	{r3, lr}
	tmr_cca_callback();
    369a:	4b01      	ldr	r3, [pc, #4]	; (36a0 <tc_cca_callback+0x8>)
    369c:	4798      	blx	r3
}
    369e:	bd08      	pop	{r3, pc}
    36a0:	00004925 	.word	0x00004925

000036a4 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    36a4:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    36a6:	4b01      	ldr	r3, [pc, #4]	; (36ac <tc_ovf_callback+0x8>)
    36a8:	4798      	blx	r3
}
    36aa:	bd08      	pop	{r3, pc}
    36ac:	000048dd 	.word	0x000048dd

000036b0 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    36b0:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    36b2:	4802      	ldr	r0, [pc, #8]	; (36bc <tmr_read_count+0xc>)
    36b4:	4b02      	ldr	r3, [pc, #8]	; (36c0 <tmr_read_count+0x10>)
    36b6:	4798      	blx	r3
    36b8:	b280      	uxth	r0, r0
}
    36ba:	bd08      	pop	{r3, pc}
    36bc:	20000980 	.word	0x20000980
    36c0:	00001e41 	.word	0x00001e41

000036c4 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    36c4:	4b03      	ldr	r3, [pc, #12]	; (36d4 <tmr_disable_cc_interrupt+0x10>)
    36c6:	2210      	movs	r2, #16
    36c8:	6819      	ldr	r1, [r3, #0]
    36ca:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    36cc:	7e59      	ldrb	r1, [r3, #25]
    36ce:	4391      	bics	r1, r2
    36d0:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    36d2:	4770      	bx	lr
    36d4:	20000980 	.word	0x20000980

000036d8 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    36d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    36da:	4c0a      	ldr	r4, [pc, #40]	; (3704 <tmr_enable_cc_interrupt+0x2c>)
    36dc:	6820      	ldr	r0, [r4, #0]
    36de:	4b0a      	ldr	r3, [pc, #40]	; (3708 <tmr_enable_cc_interrupt+0x30>)
    36e0:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    36e2:	4b0a      	ldr	r3, [pc, #40]	; (370c <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    36e4:	5c1b      	ldrb	r3, [r3, r0]
    36e6:	221f      	movs	r2, #31
    36e8:	401a      	ands	r2, r3
    36ea:	2301      	movs	r3, #1
    36ec:	4093      	lsls	r3, r2
    36ee:	1c1a      	adds	r2, r3, #0
    36f0:	4b07      	ldr	r3, [pc, #28]	; (3710 <tmr_enable_cc_interrupt+0x38>)
    36f2:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    36f4:	7e62      	ldrb	r2, [r4, #25]
    36f6:	2310      	movs	r3, #16
    36f8:	4313      	orrs	r3, r2
    36fa:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    36fc:	6823      	ldr	r3, [r4, #0]
    36fe:	2210      	movs	r2, #16
    3700:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    3702:	bd10      	pop	{r4, pc}
    3704:	20000980 	.word	0x20000980
    3708:	00001b95 	.word	0x00001b95
    370c:	00005ad4 	.word	0x00005ad4
    3710:	e000e100 	.word	0xe000e100

00003714 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    3714:	b508      	push	{r3, lr}
    3716:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    3718:	4802      	ldr	r0, [pc, #8]	; (3724 <tmr_write_cmpreg+0x10>)
    371a:	2100      	movs	r1, #0
    371c:	4b02      	ldr	r3, [pc, #8]	; (3728 <tmr_write_cmpreg+0x14>)
    371e:	4798      	blx	r3
			(uint32_t)compare_value);
}
    3720:	bd08      	pop	{r3, pc}
    3722:	46c0      	nop			; (mov r8, r8)
    3724:	20000980 	.word	0x20000980
    3728:	00001e71 	.word	0x00001e71

0000372c <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    372e:	464f      	mov	r7, r9
    3730:	4646      	mov	r6, r8
    3732:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3734:	4a2d      	ldr	r2, [pc, #180]	; (37ec <tmr_init+0xc0>)
    3736:	2300      	movs	r3, #0
    3738:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    373a:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    373c:	2100      	movs	r1, #0
    373e:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3740:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3742:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3744:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3746:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3748:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    374a:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    374c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    374e:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3750:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3752:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3754:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3756:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3758:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    375a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    375c:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    375e:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    3760:	2301      	movs	r3, #1
    3762:	425b      	negs	r3, r3
    3764:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    3766:	4c22      	ldr	r4, [pc, #136]	; (37f0 <tmr_init+0xc4>)
    3768:	1c20      	adds	r0, r4, #0
    376a:	4922      	ldr	r1, [pc, #136]	; (37f4 <tmr_init+0xc8>)
    376c:	4b22      	ldr	r3, [pc, #136]	; (37f8 <tmr_init+0xcc>)
    376e:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3770:	1c20      	adds	r0, r4, #0
    3772:	4922      	ldr	r1, [pc, #136]	; (37fc <tmr_init+0xd0>)
    3774:	2200      	movs	r2, #0
    3776:	4d22      	ldr	r5, [pc, #136]	; (3800 <tmr_init+0xd4>)
    3778:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    377a:	1c20      	adds	r0, r4, #0
    377c:	4921      	ldr	r1, [pc, #132]	; (3804 <tmr_init+0xd8>)
    377e:	2202      	movs	r2, #2
    3780:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3782:	6820      	ldr	r0, [r4, #0]
    3784:	4a20      	ldr	r2, [pc, #128]	; (3808 <tmr_init+0xdc>)
    3786:	4691      	mov	r9, r2
    3788:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    378a:	4b20      	ldr	r3, [pc, #128]	; (380c <tmr_init+0xe0>)
    378c:	4698      	mov	r8, r3
    378e:	5c1b      	ldrb	r3, [r3, r0]
    3790:	271f      	movs	r7, #31
    3792:	403b      	ands	r3, r7
    3794:	2501      	movs	r5, #1
    3796:	1c2a      	adds	r2, r5, #0
    3798:	409a      	lsls	r2, r3
    379a:	4e1d      	ldr	r6, [pc, #116]	; (3810 <tmr_init+0xe4>)
    379c:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    379e:	7e62      	ldrb	r2, [r4, #25]
    37a0:	2301      	movs	r3, #1
    37a2:	4313      	orrs	r3, r2
    37a4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    37a6:	6820      	ldr	r0, [r4, #0]
    37a8:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    37aa:	47c8      	blx	r9
    37ac:	4642      	mov	r2, r8
    37ae:	5c13      	ldrb	r3, [r2, r0]
    37b0:	401f      	ands	r7, r3
    37b2:	40bd      	lsls	r5, r7
    37b4:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    37b6:	7e62      	ldrb	r2, [r4, #25]
    37b8:	2310      	movs	r3, #16
    37ba:	4313      	orrs	r3, r2
    37bc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    37be:	6822      	ldr	r2, [r4, #0]
    37c0:	2310      	movs	r3, #16
    37c2:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    37c4:	217f      	movs	r1, #127	; 0x7f
    37c6:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    37c8:	438b      	bics	r3, r1
    37ca:	d1fc      	bne.n	37c6 <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    37cc:	8811      	ldrh	r1, [r2, #0]
    37ce:	2302      	movs	r3, #2
    37d0:	430b      	orrs	r3, r1
    37d2:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    37d4:	2000      	movs	r0, #0
    37d6:	4b0f      	ldr	r3, [pc, #60]	; (3814 <tmr_init+0xe8>)
    37d8:	4798      	blx	r3
    37da:	490f      	ldr	r1, [pc, #60]	; (3818 <tmr_init+0xec>)
    37dc:	4b0f      	ldr	r3, [pc, #60]	; (381c <tmr_init+0xf0>)
    37de:	4798      	blx	r3
	#endif
	return timer_multiplier;
    37e0:	b2c0      	uxtb	r0, r0
}
    37e2:	bc0c      	pop	{r2, r3}
    37e4:	4690      	mov	r8, r2
    37e6:	4699      	mov	r9, r3
    37e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	2000094c 	.word	0x2000094c
    37f0:	20000980 	.word	0x20000980
    37f4:	42002c00 	.word	0x42002c00
    37f8:	00001bcd 	.word	0x00001bcd
    37fc:	000036a5 	.word	0x000036a5
    3800:	00001ad5 	.word	0x00001ad5
    3804:	00003699 	.word	0x00003699
    3808:	00001b95 	.word	0x00001b95
    380c:	00005ad4 	.word	0x00005ad4
    3810:	e000e100 	.word	0xe000e100
    3814:	0000188d 	.word	0x0000188d
    3818:	000f4240 	.word	0x000f4240
    381c:	0000494d 	.word	0x0000494d

00003820 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    3820:	4770      	bx	lr
    3822:	46c0      	nop			; (mov r8, r8)

00003824 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    3824:	b538      	push	{r3, r4, r5, lr}
    3826:	1c03      	adds	r3, r0, #0
    3828:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    382a:	4c14      	ldr	r4, [pc, #80]	; (387c <sal_aes_wrrd+0x58>)
    382c:	1c60      	adds	r0, r4, #1
    382e:	1c19      	adds	r1, r3, #0
    3830:	2210      	movs	r2, #16
    3832:	4b13      	ldr	r3, [pc, #76]	; (3880 <sal_aes_wrrd+0x5c>)
    3834:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3836:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3838:	4b12      	ldr	r3, [pc, #72]	; (3884 <sal_aes_wrrd+0x60>)
    383a:	781b      	ldrb	r3, [r3, #0]
    383c:	2b00      	cmp	r3, #0
    383e:	d008      	beq.n	3852 <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3840:	2083      	movs	r0, #131	; 0x83
    3842:	490e      	ldr	r1, [pc, #56]	; (387c <sal_aes_wrrd+0x58>)
    3844:	2212      	movs	r2, #18
    3846:	4b10      	ldr	r3, [pc, #64]	; (3888 <sal_aes_wrrd+0x64>)
    3848:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    384a:	2200      	movs	r2, #0
    384c:	4b0d      	ldr	r3, [pc, #52]	; (3884 <sal_aes_wrrd+0x60>)
    384e:	701a      	strb	r2, [r3, #0]
    3850:	e005      	b.n	385e <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3852:	2084      	movs	r0, #132	; 0x84
    3854:	4909      	ldr	r1, [pc, #36]	; (387c <sal_aes_wrrd+0x58>)
    3856:	3101      	adds	r1, #1
    3858:	2211      	movs	r2, #17
    385a:	4b0b      	ldr	r3, [pc, #44]	; (3888 <sal_aes_wrrd+0x64>)
    385c:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    385e:	2d00      	cmp	r5, #0
    3860:	d005      	beq.n	386e <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    3862:	1c28      	adds	r0, r5, #0
    3864:	4905      	ldr	r1, [pc, #20]	; (387c <sal_aes_wrrd+0x58>)
    3866:	3101      	adds	r1, #1
    3868:	2210      	movs	r2, #16
    386a:	4b05      	ldr	r3, [pc, #20]	; (3880 <sal_aes_wrrd+0x5c>)
    386c:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    386e:	4b03      	ldr	r3, [pc, #12]	; (387c <sal_aes_wrrd+0x58>)
    3870:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    3872:	2018      	movs	r0, #24
    3874:	4b05      	ldr	r3, [pc, #20]	; (388c <sal_aes_wrrd+0x68>)
    3876:	4798      	blx	r3
}
    3878:	bd38      	pop	{r3, r4, r5, pc}
    387a:	46c0      	nop			; (mov r8, r8)
    387c:	200006e4 	.word	0x200006e4
    3880:	00004a7d 	.word	0x00004a7d
    3884:	200006f8 	.word	0x200006f8
    3888:	000042a5 	.word	0x000042a5
    388c:	00000151 	.word	0x00000151

00003890 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    3890:	b5f0      	push	{r4, r5, r6, r7, lr}
    3892:	4647      	mov	r7, r8
    3894:	b480      	push	{r7}
    3896:	b084      	sub	sp, #16
    3898:	1c05      	adds	r5, r0, #0
    389a:	1c0f      	adds	r7, r1, #0
    389c:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
    389e:	2800      	cmp	r0, #0
    38a0:	d017      	beq.n	38d2 <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    38a2:	2200      	movs	r2, #0
    38a4:	4b3e      	ldr	r3, [pc, #248]	; (39a0 <sal_aes_setup+0x110>)
    38a6:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    38a8:	2202      	movs	r2, #2
    38aa:	4b3e      	ldr	r3, [pc, #248]	; (39a4 <sal_aes_setup+0x114>)
    38ac:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    38ae:	483e      	ldr	r0, [pc, #248]	; (39a8 <sal_aes_setup+0x118>)
    38b0:	1c29      	adds	r1, r5, #0
    38b2:	2210      	movs	r2, #16
    38b4:	4b3d      	ldr	r3, [pc, #244]	; (39ac <sal_aes_setup+0x11c>)
    38b6:	4698      	mov	r8, r3
    38b8:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    38ba:	4e3d      	ldr	r6, [pc, #244]	; (39b0 <sal_aes_setup+0x120>)
    38bc:	2310      	movs	r3, #16
    38be:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    38c0:	1c70      	adds	r0, r6, #1
    38c2:	1c29      	adds	r1, r5, #0
    38c4:	2210      	movs	r2, #16
    38c6:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    38c8:	2083      	movs	r0, #131	; 0x83
    38ca:	1c31      	adds	r1, r6, #0
    38cc:	2211      	movs	r2, #17
    38ce:	4b39      	ldr	r3, [pc, #228]	; (39b4 <sal_aes_setup+0x124>)
    38d0:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    38d2:	2c00      	cmp	r4, #0
    38d4:	d002      	beq.n	38dc <sal_aes_setup+0x4c>
    38d6:	2c01      	cmp	r4, #1
    38d8:	d012      	beq.n	3900 <sal_aes_setup+0x70>
    38da:	e05a      	b.n	3992 <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    38dc:	4b31      	ldr	r3, [pc, #196]	; (39a4 <sal_aes_setup+0x114>)
    38de:	781b      	ldrb	r3, [r3, #0]
    38e0:	2b01      	cmp	r3, #1
    38e2:	d13d      	bne.n	3960 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    38e4:	4d32      	ldr	r5, [pc, #200]	; (39b0 <sal_aes_setup+0x120>)
    38e6:	2310      	movs	r3, #16
    38e8:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    38ea:	1c68      	adds	r0, r5, #1
    38ec:	492e      	ldr	r1, [pc, #184]	; (39a8 <sal_aes_setup+0x118>)
    38ee:	2210      	movs	r2, #16
    38f0:	4b2e      	ldr	r3, [pc, #184]	; (39ac <sal_aes_setup+0x11c>)
    38f2:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    38f4:	2083      	movs	r0, #131	; 0x83
    38f6:	1c29      	adds	r1, r5, #0
    38f8:	2211      	movs	r2, #17
    38fa:	4b2e      	ldr	r3, [pc, #184]	; (39b4 <sal_aes_setup+0x124>)
    38fc:	4798      	blx	r3
    38fe:	e02f      	b.n	3960 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    3900:	4b28      	ldr	r3, [pc, #160]	; (39a4 <sal_aes_setup+0x114>)
    3902:	781b      	ldrb	r3, [r3, #0]
    3904:	2b01      	cmp	r3, #1
    3906:	d02b      	beq.n	3960 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3908:	2210      	movs	r2, #16
    390a:	4b29      	ldr	r3, [pc, #164]	; (39b0 <sal_aes_setup+0x120>)
    390c:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    390e:	4b24      	ldr	r3, [pc, #144]	; (39a0 <sal_aes_setup+0x110>)
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	2b00      	cmp	r3, #0
    3914:	d116      	bne.n	3944 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3916:	4d26      	ldr	r5, [pc, #152]	; (39b0 <sal_aes_setup+0x120>)
    3918:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    391a:	2380      	movs	r3, #128	; 0x80
    391c:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    391e:	2201      	movs	r2, #1
    3920:	4b25      	ldr	r3, [pc, #148]	; (39b8 <sal_aes_setup+0x128>)
    3922:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    3924:	4668      	mov	r0, sp
    3926:	2100      	movs	r1, #0
    3928:	4b24      	ldr	r3, [pc, #144]	; (39bc <sal_aes_setup+0x12c>)
    392a:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    392c:	2310      	movs	r3, #16
    392e:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3930:	2083      	movs	r0, #131	; 0x83
    3932:	1c29      	adds	r1, r5, #0
    3934:	2201      	movs	r2, #1
    3936:	4b1f      	ldr	r3, [pc, #124]	; (39b4 <sal_aes_setup+0x124>)
    3938:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    393a:	2084      	movs	r0, #132	; 0x84
    393c:	4920      	ldr	r1, [pc, #128]	; (39c0 <sal_aes_setup+0x130>)
    393e:	2210      	movs	r2, #16
    3940:	4b20      	ldr	r3, [pc, #128]	; (39c4 <sal_aes_setup+0x134>)
    3942:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3944:	4d1a      	ldr	r5, [pc, #104]	; (39b0 <sal_aes_setup+0x120>)
    3946:	1c68      	adds	r0, r5, #1
    3948:	491d      	ldr	r1, [pc, #116]	; (39c0 <sal_aes_setup+0x130>)
    394a:	2210      	movs	r2, #16
    394c:	4b17      	ldr	r3, [pc, #92]	; (39ac <sal_aes_setup+0x11c>)
    394e:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3950:	2083      	movs	r0, #131	; 0x83
    3952:	1c29      	adds	r1, r5, #0
    3954:	2211      	movs	r2, #17
    3956:	4b17      	ldr	r3, [pc, #92]	; (39b4 <sal_aes_setup+0x124>)
    3958:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    395a:	4b11      	ldr	r3, [pc, #68]	; (39a0 <sal_aes_setup+0x110>)
    395c:	2201      	movs	r2, #1
    395e:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    3960:	4b10      	ldr	r3, [pc, #64]	; (39a4 <sal_aes_setup+0x114>)
    3962:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    3964:	2f00      	cmp	r7, #0
    3966:	d002      	beq.n	396e <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    3968:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    396a:	2f02      	cmp	r7, #2
    396c:	d113      	bne.n	3996 <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
    396e:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3970:	2308      	movs	r3, #8
    3972:	401c      	ands	r4, r3
    3974:	013f      	lsls	r7, r7, #4
    3976:	2370      	movs	r3, #112	; 0x70
    3978:	401f      	ands	r7, r3
    397a:	433c      	orrs	r4, r7
    397c:	4b0c      	ldr	r3, [pc, #48]	; (39b0 <sal_aes_setup+0x120>)
    397e:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    3980:	2780      	movs	r7, #128	; 0x80
    3982:	427f      	negs	r7, r7
    3984:	433c      	orrs	r4, r7
    3986:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    3988:	2201      	movs	r2, #1
    398a:	4b0b      	ldr	r3, [pc, #44]	; (39b8 <sal_aes_setup+0x128>)
    398c:	701a      	strb	r2, [r3, #0]

	return (true);
    398e:	2001      	movs	r0, #1
    3990:	e001      	b.n	3996 <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    3992:	2000      	movs	r0, #0
    3994:	e7ff      	b.n	3996 <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    3996:	b004      	add	sp, #16
    3998:	bc04      	pop	{r2}
    399a:	4690      	mov	r8, r2
    399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	200006c0 	.word	0x200006c0
    39a4:	20000009 	.word	0x20000009
    39a8:	200006d4 	.word	0x200006d4
    39ac:	00004a7d 	.word	0x00004a7d
    39b0:	200006e4 	.word	0x200006e4
    39b4:	00003f91 	.word	0x00003f91
    39b8:	200006f8 	.word	0x200006f8
    39bc:	00003825 	.word	0x00003825
    39c0:	200006c4 	.word	0x200006c4
    39c4:	00004109 	.word	0x00004109

000039c8 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    39c8:	b508      	push	{r3, lr}
    39ca:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    39cc:	2084      	movs	r0, #132	; 0x84
    39ce:	2210      	movs	r2, #16
    39d0:	4b01      	ldr	r3, [pc, #4]	; (39d8 <sal_aes_read+0x10>)
    39d2:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    39d4:	bd08      	pop	{r3, pc}
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	00004109 	.word	0x00004109

000039dc <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    39dc:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    39de:	2201      	movs	r2, #1
    39e0:	4b03      	ldr	r3, [pc, #12]	; (39f0 <AT86RFX_ISR+0x14>)
    39e2:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    39e4:	4b03      	ldr	r3, [pc, #12]	; (39f4 <AT86RFX_ISR+0x18>)
    39e6:	681b      	ldr	r3, [r3, #0]
    39e8:	2b00      	cmp	r3, #0
    39ea:	d000      	beq.n	39ee <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    39ec:	4798      	blx	r3
	}
}
    39ee:	bd08      	pop	{r3, pc}
    39f0:	40001800 	.word	0x40001800
    39f4:	200006fc 	.word	0x200006fc

000039f8 <trx_spi_init>:

void trx_spi_init(void)
{
    39f8:	b530      	push	{r4, r5, lr}
    39fa:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    39fc:	4a32      	ldr	r2, [pc, #200]	; (3ac8 <trx_spi_init+0xd0>)
    39fe:	2300      	movs	r3, #0
    3a00:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3a02:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3a04:	213f      	movs	r1, #63	; 0x3f
    3a06:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3a08:	4c30      	ldr	r4, [pc, #192]	; (3acc <trx_spi_init+0xd4>)
    3a0a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3a0c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3a0e:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3a10:	2201      	movs	r2, #1
    3a12:	4668      	mov	r0, sp
    3a14:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
    3a16:	7083      	strb	r3, [r0, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3a18:	7002      	strb	r2, [r0, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3a1a:	203f      	movs	r0, #63	; 0x3f
    3a1c:	4669      	mov	r1, sp
    3a1e:	4b2c      	ldr	r3, [pc, #176]	; (3ad0 <trx_spi_init+0xd8>)
    3a20:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3a22:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3a24:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3a26:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3a28:	2900      	cmp	r1, #0
    3a2a:	d103      	bne.n	3a34 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3a2c:	095a      	lsrs	r2, r3, #5
    3a2e:	01d2      	lsls	r2, r2, #7
    3a30:	4928      	ldr	r1, [pc, #160]	; (3ad4 <trx_spi_init+0xdc>)
    3a32:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3a34:	211f      	movs	r1, #31
    3a36:	400b      	ands	r3, r1
    3a38:	2101      	movs	r1, #1
    3a3a:	1c08      	adds	r0, r1, #0
    3a3c:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3a3e:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3a40:	4a25      	ldr	r2, [pc, #148]	; (3ad8 <trx_spi_init+0xe0>)
    3a42:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3a44:	2300      	movs	r3, #0
    3a46:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3a48:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3a4a:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    3a4c:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    3a4e:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3a50:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3a52:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3a54:	2124      	movs	r1, #36	; 0x24
    3a56:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3a58:	61d3      	str	r3, [r2, #28]
    3a5a:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3a5c:	2380      	movs	r3, #128	; 0x80
    3a5e:	025b      	lsls	r3, r3, #9
    3a60:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3a62:	4b1e      	ldr	r3, [pc, #120]	; (3adc <trx_spi_init+0xe4>)
    3a64:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3a66:	4b1e      	ldr	r3, [pc, #120]	; (3ae0 <trx_spi_init+0xe8>)
    3a68:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3a6a:	2301      	movs	r3, #1
    3a6c:	425b      	negs	r3, r3
    3a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3a70:	4b1c      	ldr	r3, [pc, #112]	; (3ae4 <trx_spi_init+0xec>)
    3a72:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3a74:	4b1c      	ldr	r3, [pc, #112]	; (3ae8 <trx_spi_init+0xf0>)
    3a76:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3a78:	4c1c      	ldr	r4, [pc, #112]	; (3aec <trx_spi_init+0xf4>)
    3a7a:	1c20      	adds	r0, r4, #0
    3a7c:	491c      	ldr	r1, [pc, #112]	; (3af0 <trx_spi_init+0xf8>)
    3a7e:	4b1d      	ldr	r3, [pc, #116]	; (3af4 <trx_spi_init+0xfc>)
    3a80:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a82:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3a84:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3a86:	2b00      	cmp	r3, #0
    3a88:	d1fc      	bne.n	3a84 <trx_spi_init+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3a8a:	6813      	ldr	r3, [r2, #0]
    3a8c:	2502      	movs	r5, #2
    3a8e:	432b      	orrs	r3, r5
    3a90:	6013      	str	r3, [r2, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    3a92:	ac01      	add	r4, sp, #4
    3a94:	1c20      	adds	r0, r4, #0
    3a96:	4b18      	ldr	r3, [pc, #96]	; (3af8 <trx_spi_init+0x100>)
    3a98:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    3a9a:	2320      	movs	r3, #32
    3a9c:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    3a9e:	2380      	movs	r3, #128	; 0x80
    3aa0:	039b      	lsls	r3, r3, #14
    3aa2:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    3aa4:	7225      	strb	r5, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    3aa6:	2301      	movs	r3, #1
    3aa8:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    3aaa:	2200      	movs	r2, #0
    3aac:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    3aae:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    3ab0:	2000      	movs	r0, #0
    3ab2:	1c21      	adds	r1, r4, #0
    3ab4:	4b11      	ldr	r3, [pc, #68]	; (3afc <trx_spi_init+0x104>)
    3ab6:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    3ab8:	4811      	ldr	r0, [pc, #68]	; (3b00 <trx_spi_init+0x108>)
    3aba:	2100      	movs	r1, #0
    3abc:	2200      	movs	r2, #0
    3abe:	4b11      	ldr	r3, [pc, #68]	; (3b04 <trx_spi_init+0x10c>)
    3ac0:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3ac2:	b005      	add	sp, #20
    3ac4:	bd30      	pop	{r4, r5, pc}
    3ac6:	46c0      	nop			; (mov r8, r8)
    3ac8:	200009a0 	.word	0x200009a0
    3acc:	200009a4 	.word	0x200009a4
    3ad0:	000004d9 	.word	0x000004d9
    3ad4:	41004400 	.word	0x41004400
    3ad8:	200009a8 	.word	0x200009a8
    3adc:	004c4b40 	.word	0x004c4b40
    3ae0:	00530005 	.word	0x00530005
    3ae4:	003e0005 	.word	0x003e0005
    3ae8:	00520005 	.word	0x00520005
    3aec:	200009e0 	.word	0x200009e0
    3af0:	42001800 	.word	0x42001800
    3af4:	000009b9 	.word	0x000009b9
    3af8:	0000044d 	.word	0x0000044d
    3afc:	00000461 	.word	0x00000461
    3b00:	000039dd 	.word	0x000039dd
    3b04:	000002e9 	.word	0x000002e9

00003b08 <PhyReset>:

void PhyReset(void)
{
    3b08:	b570      	push	{r4, r5, r6, lr}
    3b0a:	4b09      	ldr	r3, [pc, #36]	; (3b30 <PhyReset+0x28>)
    3b0c:	1c1c      	adds	r4, r3, #0
    3b0e:	3480      	adds	r4, #128	; 0x80
    3b10:	2580      	movs	r5, #128	; 0x80
    3b12:	022d      	lsls	r5, r5, #8
    3b14:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3b16:	2280      	movs	r2, #128	; 0x80
    3b18:	0352      	lsls	r2, r2, #13
    3b1a:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3b1c:	20a5      	movs	r0, #165	; 0xa5
    3b1e:	0040      	lsls	r0, r0, #1
    3b20:	4e04      	ldr	r6, [pc, #16]	; (3b34 <PhyReset+0x2c>)
    3b22:	47b0      	blx	r6
    3b24:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3b26:	200a      	movs	r0, #10
    3b28:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3b2a:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3b2c:	bd70      	pop	{r4, r5, r6, pc}
    3b2e:	46c0      	nop			; (mov r8, r8)
    3b30:	41004400 	.word	0x41004400
    3b34:	00000151 	.word	0x00000151

00003b38 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3b38:	b570      	push	{r4, r5, r6, lr}
    3b3a:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b3c:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3b40:	4263      	negs	r3, r4
    3b42:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3b44:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3b46:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b4a:	2200      	movs	r2, #0
    3b4c:	4b33      	ldr	r3, [pc, #204]	; (3c1c <trx_reg_read+0xe4>)
    3b4e:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3b50:	4d33      	ldr	r5, [pc, #204]	; (3c20 <trx_reg_read+0xe8>)
    3b52:	1c28      	adds	r0, r5, #0
    3b54:	4933      	ldr	r1, [pc, #204]	; (3c24 <trx_reg_read+0xec>)
    3b56:	2201      	movs	r2, #1
    3b58:	4b33      	ldr	r3, [pc, #204]	; (3c28 <trx_reg_read+0xf0>)
    3b5a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b5c:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b5e:	2101      	movs	r1, #1
    3b60:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3b62:	420a      	tst	r2, r1
    3b64:	d0fc      	beq.n	3b60 <trx_reg_read+0x28>
    3b66:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3b68:	07d1      	lsls	r1, r2, #31
    3b6a:	d502      	bpl.n	3b72 <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b6c:	2280      	movs	r2, #128	; 0x80
    3b6e:	4316      	orrs	r6, r2
    3b70:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b72:	2102      	movs	r1, #2
    3b74:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3b76:	420a      	tst	r2, r1
    3b78:	d0fc      	beq.n	3b74 <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b7a:	2104      	movs	r1, #4
    3b7c:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3b7e:	420a      	tst	r2, r1
    3b80:	d0fc      	beq.n	3b7c <trx_reg_read+0x44>
    3b82:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3b84:	0751      	lsls	r1, r2, #29
    3b86:	d514      	bpl.n	3bb2 <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b88:	8b5a      	ldrh	r2, [r3, #26]
    3b8a:	0751      	lsls	r1, r2, #29
    3b8c:	d503      	bpl.n	3b96 <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3b8e:	8b59      	ldrh	r1, [r3, #26]
    3b90:	2204      	movs	r2, #4
    3b92:	430a      	orrs	r2, r1
    3b94:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b96:	4a22      	ldr	r2, [pc, #136]	; (3c20 <trx_reg_read+0xe8>)
    3b98:	7992      	ldrb	r2, [r2, #6]
    3b9a:	2a01      	cmp	r2, #1
    3b9c:	d105      	bne.n	3baa <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ba0:	05c9      	lsls	r1, r1, #23
    3ba2:	0dc9      	lsrs	r1, r1, #23
    3ba4:	4a21      	ldr	r2, [pc, #132]	; (3c2c <trx_reg_read+0xf4>)
    3ba6:	8011      	strh	r1, [r2, #0]
    3ba8:	e003      	b.n	3bb2 <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3baa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3bac:	b2c9      	uxtb	r1, r1
    3bae:	4a1f      	ldr	r2, [pc, #124]	; (3c2c <trx_reg_read+0xf4>)
    3bb0:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bb2:	2101      	movs	r1, #1
    3bb4:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3bb6:	420a      	tst	r2, r1
    3bb8:	d0fc      	beq.n	3bb4 <trx_reg_read+0x7c>
    3bba:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3bbc:	07d1      	lsls	r1, r2, #31
    3bbe:	d501      	bpl.n	3bc4 <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3bc0:	2200      	movs	r2, #0
    3bc2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3bc4:	2102      	movs	r1, #2
    3bc6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3bc8:	420a      	tst	r2, r1
    3bca:	d0fc      	beq.n	3bc6 <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3bcc:	2104      	movs	r1, #4
    3bce:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    3bd0:	420a      	tst	r2, r1
    3bd2:	d0fc      	beq.n	3bce <trx_reg_read+0x96>
    3bd4:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    3bd6:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3bd8:	0751      	lsls	r1, r2, #29
    3bda:	d510      	bpl.n	3bfe <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3bdc:	8b5a      	ldrh	r2, [r3, #26]
    3bde:	0751      	lsls	r1, r2, #29
    3be0:	d503      	bpl.n	3bea <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3be2:	8b59      	ldrh	r1, [r3, #26]
    3be4:	2204      	movs	r2, #4
    3be6:	430a      	orrs	r2, r1
    3be8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bea:	4a0d      	ldr	r2, [pc, #52]	; (3c20 <trx_reg_read+0xe8>)
    3bec:	7992      	ldrb	r2, [r2, #6]
    3bee:	2a01      	cmp	r2, #1
    3bf0:	d103      	bne.n	3bfa <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3bf2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3bf4:	05ed      	lsls	r5, r5, #23
    3bf6:	0ded      	lsrs	r5, r5, #23
    3bf8:	e001      	b.n	3bfe <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3bfa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3bfc:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3bfe:	4808      	ldr	r0, [pc, #32]	; (3c20 <trx_reg_read+0xe8>)
    3c00:	4908      	ldr	r1, [pc, #32]	; (3c24 <trx_reg_read+0xec>)
    3c02:	2200      	movs	r2, #0
    3c04:	4b08      	ldr	r3, [pc, #32]	; (3c28 <trx_reg_read+0xf0>)
    3c06:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3c08:	2c00      	cmp	r4, #0
    3c0a:	d005      	beq.n	3c18 <trx_reg_read+0xe0>
		cpu_irq_enable();
    3c0c:	2201      	movs	r2, #1
    3c0e:	4b03      	ldr	r3, [pc, #12]	; (3c1c <trx_reg_read+0xe4>)
    3c10:	701a      	strb	r2, [r3, #0]
    3c12:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3c16:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3c18:	b2e8      	uxtb	r0, r5
}
    3c1a:	bd70      	pop	{r4, r5, r6, pc}
    3c1c:	20000008 	.word	0x20000008
    3c20:	200009e0 	.word	0x200009e0
    3c24:	200009a4 	.word	0x200009a4
    3c28:	00000c69 	.word	0x00000c69
    3c2c:	2000099c 	.word	0x2000099c

00003c30 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c32:	1c07      	adds	r7, r0, #0
    3c34:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c36:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3c3a:	4263      	negs	r3, r4
    3c3c:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3c3e:	b672      	cpsid	i
    3c40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c44:	2200      	movs	r2, #0
    3c46:	4b34      	ldr	r3, [pc, #208]	; (3d18 <trx_reg_write+0xe8>)
    3c48:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3c4a:	4e34      	ldr	r6, [pc, #208]	; (3d1c <trx_reg_write+0xec>)
    3c4c:	1c30      	adds	r0, r6, #0
    3c4e:	4934      	ldr	r1, [pc, #208]	; (3d20 <trx_reg_write+0xf0>)
    3c50:	2201      	movs	r2, #1
    3c52:	4b34      	ldr	r3, [pc, #208]	; (3d24 <trx_reg_write+0xf4>)
    3c54:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c56:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c58:	2101      	movs	r1, #1
    3c5a:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3c5c:	420a      	tst	r2, r1
    3c5e:	d0fc      	beq.n	3c5a <trx_reg_write+0x2a>
    3c60:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3c62:	07d1      	lsls	r1, r2, #31
    3c64:	d502      	bpl.n	3c6c <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c66:	22c0      	movs	r2, #192	; 0xc0
    3c68:	4317      	orrs	r7, r2
    3c6a:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c6c:	2102      	movs	r1, #2
    3c6e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3c70:	420a      	tst	r2, r1
    3c72:	d0fc      	beq.n	3c6e <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c74:	2104      	movs	r1, #4
    3c76:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c78:	420a      	tst	r2, r1
    3c7a:	d0fc      	beq.n	3c76 <trx_reg_write+0x46>
    3c7c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3c7e:	0751      	lsls	r1, r2, #29
    3c80:	d514      	bpl.n	3cac <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c82:	8b5a      	ldrh	r2, [r3, #26]
    3c84:	0751      	lsls	r1, r2, #29
    3c86:	d503      	bpl.n	3c90 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3c88:	8b59      	ldrh	r1, [r3, #26]
    3c8a:	2204      	movs	r2, #4
    3c8c:	430a      	orrs	r2, r1
    3c8e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c90:	4a22      	ldr	r2, [pc, #136]	; (3d1c <trx_reg_write+0xec>)
    3c92:	7992      	ldrb	r2, [r2, #6]
    3c94:	2a01      	cmp	r2, #1
    3c96:	d105      	bne.n	3ca4 <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c98:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c9a:	05c9      	lsls	r1, r1, #23
    3c9c:	0dc9      	lsrs	r1, r1, #23
    3c9e:	4a22      	ldr	r2, [pc, #136]	; (3d28 <trx_reg_write+0xf8>)
    3ca0:	8011      	strh	r1, [r2, #0]
    3ca2:	e003      	b.n	3cac <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ca4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ca6:	b2c9      	uxtb	r1, r1
    3ca8:	4a1f      	ldr	r2, [pc, #124]	; (3d28 <trx_reg_write+0xf8>)
    3caa:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3cac:	2001      	movs	r0, #1
    3cae:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3cb0:	4202      	tst	r2, r0
    3cb2:	d0fc      	beq.n	3cae <trx_reg_write+0x7e>
    3cb4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3cb6:	07d1      	lsls	r1, r2, #31
    3cb8:	d500      	bpl.n	3cbc <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cba:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cbc:	2102      	movs	r1, #2
    3cbe:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3cc0:	420a      	tst	r2, r1
    3cc2:	d0fc      	beq.n	3cbe <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cc4:	2104      	movs	r1, #4
    3cc6:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3cc8:	420a      	tst	r2, r1
    3cca:	d0fc      	beq.n	3cc6 <trx_reg_write+0x96>
    3ccc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3cce:	0751      	lsls	r1, r2, #29
    3cd0:	d514      	bpl.n	3cfc <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cd2:	8b5a      	ldrh	r2, [r3, #26]
    3cd4:	0751      	lsls	r1, r2, #29
    3cd6:	d503      	bpl.n	3ce0 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3cd8:	8b59      	ldrh	r1, [r3, #26]
    3cda:	2204      	movs	r2, #4
    3cdc:	430a      	orrs	r2, r1
    3cde:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ce0:	4a0e      	ldr	r2, [pc, #56]	; (3d1c <trx_reg_write+0xec>)
    3ce2:	7992      	ldrb	r2, [r2, #6]
    3ce4:	2a01      	cmp	r2, #1
    3ce6:	d105      	bne.n	3cf4 <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3cea:	05d2      	lsls	r2, r2, #23
    3cec:	0dd2      	lsrs	r2, r2, #23
    3cee:	4b0e      	ldr	r3, [pc, #56]	; (3d28 <trx_reg_write+0xf8>)
    3cf0:	801a      	strh	r2, [r3, #0]
    3cf2:	e003      	b.n	3cfc <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3cf6:	b2d2      	uxtb	r2, r2
    3cf8:	4b0b      	ldr	r3, [pc, #44]	; (3d28 <trx_reg_write+0xf8>)
    3cfa:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3cfc:	4807      	ldr	r0, [pc, #28]	; (3d1c <trx_reg_write+0xec>)
    3cfe:	4908      	ldr	r1, [pc, #32]	; (3d20 <trx_reg_write+0xf0>)
    3d00:	2200      	movs	r2, #0
    3d02:	4b08      	ldr	r3, [pc, #32]	; (3d24 <trx_reg_write+0xf4>)
    3d04:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3d06:	2c00      	cmp	r4, #0
    3d08:	d005      	beq.n	3d16 <trx_reg_write+0xe6>
		cpu_irq_enable();
    3d0a:	2201      	movs	r2, #1
    3d0c:	4b02      	ldr	r3, [pc, #8]	; (3d18 <trx_reg_write+0xe8>)
    3d0e:	701a      	strb	r2, [r3, #0]
    3d10:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3d14:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d18:	20000008 	.word	0x20000008
    3d1c:	200009e0 	.word	0x200009e0
    3d20:	200009a4 	.word	0x200009a4
    3d24:	00000c69 	.word	0x00000c69
    3d28:	2000099c 	.word	0x2000099c

00003d2c <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d2e:	465f      	mov	r7, fp
    3d30:	4656      	mov	r6, sl
    3d32:	464d      	mov	r5, r9
    3d34:	4644      	mov	r4, r8
    3d36:	b4f0      	push	{r4, r5, r6, r7}
    3d38:	b083      	sub	sp, #12
    3d3a:	1c06      	adds	r6, r0, #0
    3d3c:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d3e:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3d42:	4278      	negs	r0, r7
    3d44:	4178      	adcs	r0, r7
    3d46:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3d48:	b672      	cpsid	i
    3d4a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3d4e:	2200      	movs	r2, #0
    3d50:	4b41      	ldr	r3, [pc, #260]	; (3e58 <trx_frame_read+0x12c>)
    3d52:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3d54:	4d41      	ldr	r5, [pc, #260]	; (3e5c <trx_frame_read+0x130>)
    3d56:	1c28      	adds	r0, r5, #0
    3d58:	4941      	ldr	r1, [pc, #260]	; (3e60 <trx_frame_read+0x134>)
    3d5a:	2201      	movs	r2, #1
    3d5c:	4b41      	ldr	r3, [pc, #260]	; (3e64 <trx_frame_read+0x138>)
    3d5e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d60:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d62:	2101      	movs	r1, #1
    3d64:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3d66:	420a      	tst	r2, r1
    3d68:	d0fc      	beq.n	3d64 <trx_frame_read+0x38>
    3d6a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3d6c:	07d1      	lsls	r1, r2, #31
    3d6e:	d501      	bpl.n	3d74 <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d70:	2220      	movs	r2, #32
    3d72:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d74:	2102      	movs	r1, #2
    3d76:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3d78:	420a      	tst	r2, r1
    3d7a:	d0fc      	beq.n	3d76 <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d7c:	2004      	movs	r0, #4
    3d7e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3d80:	4202      	tst	r2, r0
    3d82:	d0fc      	beq.n	3d7e <trx_frame_read+0x52>
    3d84:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3d86:	0750      	lsls	r0, r2, #29
    3d88:	d50f      	bpl.n	3daa <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d8a:	8b5a      	ldrh	r2, [r3, #26]
    3d8c:	0751      	lsls	r1, r2, #29
    3d8e:	d503      	bpl.n	3d98 <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3d90:	8b59      	ldrh	r1, [r3, #26]
    3d92:	2204      	movs	r2, #4
    3d94:	430a      	orrs	r2, r1
    3d96:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d98:	4a30      	ldr	r2, [pc, #192]	; (3e5c <trx_frame_read+0x130>)
    3d9a:	7992      	ldrb	r2, [r2, #6]
    3d9c:	2a01      	cmp	r2, #1
    3d9e:	d109      	bne.n	3db4 <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3da2:	05d2      	lsls	r2, r2, #23
    3da4:	0dd2      	lsrs	r2, r2, #23
    3da6:	4b30      	ldr	r3, [pc, #192]	; (3e68 <trx_frame_read+0x13c>)
    3da8:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3daa:	1e63      	subs	r3, r4, #1
    3dac:	b2db      	uxtb	r3, r3
    3dae:	2c00      	cmp	r4, #0
    3db0:	d105      	bne.n	3dbe <trx_frame_read+0x92>
    3db2:	e03c      	b.n	3e2e <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3db6:	b2d2      	uxtb	r2, r2
    3db8:	4b2b      	ldr	r3, [pc, #172]	; (3e68 <trx_frame_read+0x13c>)
    3dba:	801a      	strh	r2, [r3, #0]
    3dbc:	e7f5      	b.n	3daa <trx_frame_read+0x7e>
    3dbe:	3301      	adds	r3, #1
    3dc0:	199b      	adds	r3, r3, r6
    3dc2:	4699      	mov	r9, r3
    3dc4:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3dc6:	4a25      	ldr	r2, [pc, #148]	; (3e5c <trx_frame_read+0x130>)
    3dc8:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3dca:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3dcc:	2300      	movs	r3, #0
    3dce:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3dd0:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3dd2:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3dd4:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3dd6:	2204      	movs	r2, #4
    3dd8:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3dda:	4642      	mov	r2, r8
    3ddc:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3dde:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3de0:	4222      	tst	r2, r4
    3de2:	d0fc      	beq.n	3dde <trx_frame_read+0xb2>
    3de4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3de6:	4222      	tst	r2, r4
    3de8:	d001      	beq.n	3dee <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3dea:	4652      	mov	r2, sl
    3dec:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3dee:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3df0:	422a      	tst	r2, r5
    3df2:	d0fc      	beq.n	3dee <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3df4:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3df6:	420a      	tst	r2, r1
    3df8:	d0fc      	beq.n	3df4 <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3dfa:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3dfc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3dfe:	420a      	tst	r2, r1
    3e00:	d011      	beq.n	3e26 <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e02:	8b5a      	ldrh	r2, [r3, #26]
    3e04:	420a      	tst	r2, r1
    3e06:	d004      	beq.n	3e12 <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3e08:	8b5a      	ldrh	r2, [r3, #26]
    3e0a:	4658      	mov	r0, fp
    3e0c:	4302      	orrs	r2, r0
    3e0e:	b292      	uxth	r2, r2
    3e10:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e12:	4812      	ldr	r0, [pc, #72]	; (3e5c <trx_frame_read+0x130>)
    3e14:	7982      	ldrb	r2, [r0, #6]
    3e16:	2a01      	cmp	r2, #1
    3e18:	d103      	bne.n	3e22 <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3e1c:	05c0      	lsls	r0, r0, #23
    3e1e:	0dc0      	lsrs	r0, r0, #23
    3e20:	e001      	b.n	3e26 <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e22:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3e24:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    3e26:	7030      	strb	r0, [r6, #0]
		data++;
    3e28:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3e2a:	454e      	cmp	r6, r9
    3e2c:	d1d5      	bne.n	3dda <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3e2e:	480b      	ldr	r0, [pc, #44]	; (3e5c <trx_frame_read+0x130>)
    3e30:	490b      	ldr	r1, [pc, #44]	; (3e60 <trx_frame_read+0x134>)
    3e32:	2200      	movs	r2, #0
    3e34:	4b0b      	ldr	r3, [pc, #44]	; (3e64 <trx_frame_read+0x138>)
    3e36:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3e38:	9901      	ldr	r1, [sp, #4]
    3e3a:	2900      	cmp	r1, #0
    3e3c:	d005      	beq.n	3e4a <trx_frame_read+0x11e>
		cpu_irq_enable();
    3e3e:	2201      	movs	r2, #1
    3e40:	4b05      	ldr	r3, [pc, #20]	; (3e58 <trx_frame_read+0x12c>)
    3e42:	701a      	strb	r2, [r3, #0]
    3e44:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3e48:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3e4a:	b003      	add	sp, #12
    3e4c:	bc3c      	pop	{r2, r3, r4, r5}
    3e4e:	4690      	mov	r8, r2
    3e50:	4699      	mov	r9, r3
    3e52:	46a2      	mov	sl, r4
    3e54:	46ab      	mov	fp, r5
    3e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e58:	20000008 	.word	0x20000008
    3e5c:	200009e0 	.word	0x200009e0
    3e60:	200009a4 	.word	0x200009a4
    3e64:	00000c69 	.word	0x00000c69
    3e68:	2000099c 	.word	0x2000099c

00003e6c <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e6e:	464f      	mov	r7, r9
    3e70:	4646      	mov	r6, r8
    3e72:	b4c0      	push	{r6, r7}
    3e74:	1c04      	adds	r4, r0, #0
    3e76:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e78:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3e7c:	4271      	negs	r1, r6
    3e7e:	4171      	adcs	r1, r6
    3e80:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3e82:	b672      	cpsid	i
    3e84:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e88:	2200      	movs	r2, #0
    3e8a:	4b3c      	ldr	r3, [pc, #240]	; (3f7c <trx_frame_write+0x110>)
    3e8c:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3e8e:	4f3c      	ldr	r7, [pc, #240]	; (3f80 <trx_frame_write+0x114>)
    3e90:	1c38      	adds	r0, r7, #0
    3e92:	493c      	ldr	r1, [pc, #240]	; (3f84 <trx_frame_write+0x118>)
    3e94:	2201      	movs	r2, #1
    3e96:	4b3c      	ldr	r3, [pc, #240]	; (3f88 <trx_frame_write+0x11c>)
    3e98:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e9a:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e9c:	2101      	movs	r1, #1
    3e9e:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3ea0:	420a      	tst	r2, r1
    3ea2:	d0fc      	beq.n	3e9e <trx_frame_write+0x32>
    3ea4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3ea6:	07d1      	lsls	r1, r2, #31
    3ea8:	d501      	bpl.n	3eae <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3eaa:	2260      	movs	r2, #96	; 0x60
    3eac:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3eae:	2102      	movs	r1, #2
    3eb0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3eb2:	420a      	tst	r2, r1
    3eb4:	d0fc      	beq.n	3eb0 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3eb6:	2104      	movs	r1, #4
    3eb8:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3eba:	420a      	tst	r2, r1
    3ebc:	d0fc      	beq.n	3eb8 <trx_frame_write+0x4c>
    3ebe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3ec0:	0751      	lsls	r1, r2, #29
    3ec2:	d50f      	bpl.n	3ee4 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ec4:	8b5a      	ldrh	r2, [r3, #26]
    3ec6:	0751      	lsls	r1, r2, #29
    3ec8:	d503      	bpl.n	3ed2 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3eca:	8b59      	ldrh	r1, [r3, #26]
    3ecc:	2204      	movs	r2, #4
    3ece:	430a      	orrs	r2, r1
    3ed0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ed2:	4a2b      	ldr	r2, [pc, #172]	; (3f80 <trx_frame_write+0x114>)
    3ed4:	7992      	ldrb	r2, [r2, #6]
    3ed6:	2a01      	cmp	r2, #1
    3ed8:	d10e      	bne.n	3ef8 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3eda:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3edc:	05c9      	lsls	r1, r1, #23
    3ede:	0dc9      	lsrs	r1, r1, #23
    3ee0:	4a2a      	ldr	r2, [pc, #168]	; (3f8c <trx_frame_write+0x120>)
    3ee2:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ee4:	4a26      	ldr	r2, [pc, #152]	; (3f80 <trx_frame_write+0x114>)
    3ee6:	7992      	ldrb	r2, [r2, #6]
    3ee8:	4690      	mov	r8, r2
    3eea:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3eec:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3eee:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ef0:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ef2:	2204      	movs	r2, #4
    3ef4:	4694      	mov	ip, r2
    3ef6:	e02b      	b.n	3f50 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ef8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3efa:	b2c9      	uxtb	r1, r1
    3efc:	4a23      	ldr	r2, [pc, #140]	; (3f8c <trx_frame_write+0x120>)
    3efe:	8011      	strh	r1, [r2, #0]
    3f00:	e7f0      	b.n	3ee4 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f02:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3f04:	423a      	tst	r2, r7
    3f06:	d0fc      	beq.n	3f02 <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    3f08:	7831      	ldrb	r1, [r6, #0]
    3f0a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3f0c:	423a      	tst	r2, r7
    3f0e:	d000      	beq.n	3f12 <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3f10:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3f12:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3f14:	4202      	tst	r2, r0
    3f16:	d0fc      	beq.n	3f12 <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3f18:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3f1a:	4222      	tst	r2, r4
    3f1c:	d0fc      	beq.n	3f18 <trx_frame_write+0xac>
    3f1e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3f20:	4222      	tst	r2, r4
    3f22:	d014      	beq.n	3f4e <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3f24:	8b5a      	ldrh	r2, [r3, #26]
    3f26:	4222      	tst	r2, r4
    3f28:	d004      	beq.n	3f34 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3f2a:	8b5a      	ldrh	r2, [r3, #26]
    3f2c:	4661      	mov	r1, ip
    3f2e:	430a      	orrs	r2, r1
    3f30:	b292      	uxth	r2, r2
    3f32:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f34:	4642      	mov	r2, r8
    3f36:	2a01      	cmp	r2, #1
    3f38:	d105      	bne.n	3f46 <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f3c:	05d2      	lsls	r2, r2, #23
    3f3e:	0dd2      	lsrs	r2, r2, #23
    3f40:	4912      	ldr	r1, [pc, #72]	; (3f8c <trx_frame_write+0x120>)
    3f42:	800a      	strh	r2, [r1, #0]
    3f44:	e003      	b.n	3f4e <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f48:	b2d2      	uxtb	r2, r2
    3f4a:	4910      	ldr	r1, [pc, #64]	; (3f8c <trx_frame_write+0x120>)
    3f4c:	800a      	strh	r2, [r1, #0]
    3f4e:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    3f50:	3d01      	subs	r5, #1
    3f52:	b2ed      	uxtb	r5, r5
    3f54:	2dff      	cmp	r5, #255	; 0xff
    3f56:	d1d4      	bne.n	3f02 <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3f58:	4809      	ldr	r0, [pc, #36]	; (3f80 <trx_frame_write+0x114>)
    3f5a:	490a      	ldr	r1, [pc, #40]	; (3f84 <trx_frame_write+0x118>)
    3f5c:	2200      	movs	r2, #0
    3f5e:	4b0a      	ldr	r3, [pc, #40]	; (3f88 <trx_frame_write+0x11c>)
    3f60:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3f62:	464a      	mov	r2, r9
    3f64:	2a00      	cmp	r2, #0
    3f66:	d005      	beq.n	3f74 <trx_frame_write+0x108>
		cpu_irq_enable();
    3f68:	2201      	movs	r2, #1
    3f6a:	4b04      	ldr	r3, [pc, #16]	; (3f7c <trx_frame_write+0x110>)
    3f6c:	701a      	strb	r2, [r3, #0]
    3f6e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3f72:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3f74:	bc0c      	pop	{r2, r3}
    3f76:	4690      	mov	r8, r2
    3f78:	4699      	mov	r9, r3
    3f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f7c:	20000008 	.word	0x20000008
    3f80:	200009e0 	.word	0x200009e0
    3f84:	200009a4 	.word	0x200009a4
    3f88:	00000c69 	.word	0x00000c69
    3f8c:	2000099c 	.word	0x2000099c

00003f90 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    3f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f92:	464f      	mov	r7, r9
    3f94:	4646      	mov	r6, r8
    3f96:	b4c0      	push	{r6, r7}
    3f98:	1c07      	adds	r7, r0, #0
    3f9a:	1c0c      	adds	r4, r1, #0
    3f9c:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f9e:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3fa2:	4271      	negs	r1, r6
    3fa4:	4171      	adcs	r1, r6
    3fa6:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3fa8:	b672      	cpsid	i
    3faa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3fae:	2200      	movs	r2, #0
    3fb0:	4b50      	ldr	r3, [pc, #320]	; (40f4 <trx_sram_write+0x164>)
    3fb2:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3fb4:	4e50      	ldr	r6, [pc, #320]	; (40f8 <trx_sram_write+0x168>)
    3fb6:	1c30      	adds	r0, r6, #0
    3fb8:	4950      	ldr	r1, [pc, #320]	; (40fc <trx_sram_write+0x16c>)
    3fba:	2201      	movs	r2, #1
    3fbc:	4b50      	ldr	r3, [pc, #320]	; (4100 <trx_sram_write+0x170>)
    3fbe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fc0:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3fc2:	2101      	movs	r1, #1
    3fc4:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3fc6:	420a      	tst	r2, r1
    3fc8:	d0fc      	beq.n	3fc4 <trx_sram_write+0x34>
    3fca:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3fcc:	07d1      	lsls	r1, r2, #31
    3fce:	d501      	bpl.n	3fd4 <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3fd0:	2240      	movs	r2, #64	; 0x40
    3fd2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3fd4:	2102      	movs	r1, #2
    3fd6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3fd8:	420a      	tst	r2, r1
    3fda:	d0fc      	beq.n	3fd6 <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3fdc:	2104      	movs	r1, #4
    3fde:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3fe0:	420a      	tst	r2, r1
    3fe2:	d0fc      	beq.n	3fde <trx_sram_write+0x4e>
    3fe4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3fe6:	0751      	lsls	r1, r2, #29
    3fe8:	d514      	bpl.n	4014 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3fea:	8b5a      	ldrh	r2, [r3, #26]
    3fec:	0751      	lsls	r1, r2, #29
    3fee:	d503      	bpl.n	3ff8 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ff0:	8b59      	ldrh	r1, [r3, #26]
    3ff2:	2204      	movs	r2, #4
    3ff4:	430a      	orrs	r2, r1
    3ff6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ff8:	4a3f      	ldr	r2, [pc, #252]	; (40f8 <trx_sram_write+0x168>)
    3ffa:	7992      	ldrb	r2, [r2, #6]
    3ffc:	2a01      	cmp	r2, #1
    3ffe:	d105      	bne.n	400c <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4000:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4002:	05c9      	lsls	r1, r1, #23
    4004:	0dc9      	lsrs	r1, r1, #23
    4006:	4a3f      	ldr	r2, [pc, #252]	; (4104 <trx_sram_write+0x174>)
    4008:	8011      	strh	r1, [r2, #0]
    400a:	e003      	b.n	4014 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    400c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    400e:	b2c9      	uxtb	r1, r1
    4010:	4a3c      	ldr	r2, [pc, #240]	; (4104 <trx_sram_write+0x174>)
    4012:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4014:	2101      	movs	r1, #1
    4016:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4018:	420a      	tst	r2, r1
    401a:	d0fc      	beq.n	4016 <trx_sram_write+0x86>
    401c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    401e:	07d1      	lsls	r1, r2, #31
    4020:	d500      	bpl.n	4024 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4022:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4024:	2102      	movs	r1, #2
    4026:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4028:	420a      	tst	r2, r1
    402a:	d0fc      	beq.n	4026 <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    402c:	2104      	movs	r1, #4
    402e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4030:	420a      	tst	r2, r1
    4032:	d0fc      	beq.n	402e <trx_sram_write+0x9e>
    4034:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4036:	0751      	lsls	r1, r2, #29
    4038:	d50f      	bpl.n	405a <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    403a:	8b5a      	ldrh	r2, [r3, #26]
    403c:	0751      	lsls	r1, r2, #29
    403e:	d503      	bpl.n	4048 <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4040:	8b59      	ldrh	r1, [r3, #26]
    4042:	2204      	movs	r2, #4
    4044:	430a      	orrs	r2, r1
    4046:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4048:	4a2b      	ldr	r2, [pc, #172]	; (40f8 <trx_sram_write+0x168>)
    404a:	7992      	ldrb	r2, [r2, #6]
    404c:	2a01      	cmp	r2, #1
    404e:	d10e      	bne.n	406e <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4050:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4052:	05c9      	lsls	r1, r1, #23
    4054:	0dc9      	lsrs	r1, r1, #23
    4056:	4a2b      	ldr	r2, [pc, #172]	; (4104 <trx_sram_write+0x174>)
    4058:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    405a:	4a27      	ldr	r2, [pc, #156]	; (40f8 <trx_sram_write+0x168>)
    405c:	7992      	ldrb	r2, [r2, #6]
    405e:	4690      	mov	r8, r2
    4060:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4062:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4064:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4066:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4068:	2204      	movs	r2, #4
    406a:	4694      	mov	ip, r2
    406c:	e02b      	b.n	40c6 <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    406e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4070:	b2c9      	uxtb	r1, r1
    4072:	4a24      	ldr	r2, [pc, #144]	; (4104 <trx_sram_write+0x174>)
    4074:	8011      	strh	r1, [r2, #0]
    4076:	e7f0      	b.n	405a <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4078:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    407a:	4238      	tst	r0, r7
    407c:	d0fc      	beq.n	4078 <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    407e:	7832      	ldrb	r2, [r6, #0]
    4080:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4082:	4238      	tst	r0, r7
    4084:	d000      	beq.n	4088 <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4086:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4088:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    408a:	4208      	tst	r0, r1
    408c:	d0fc      	beq.n	4088 <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    408e:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4090:	4220      	tst	r0, r4
    4092:	d0fc      	beq.n	408e <trx_sram_write+0xfe>
    4094:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4096:	4220      	tst	r0, r4
    4098:	d014      	beq.n	40c4 <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    409a:	8b58      	ldrh	r0, [r3, #26]
    409c:	4220      	tst	r0, r4
    409e:	d004      	beq.n	40aa <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    40a0:	8b58      	ldrh	r0, [r3, #26]
    40a2:	4662      	mov	r2, ip
    40a4:	4310      	orrs	r0, r2
    40a6:	b280      	uxth	r0, r0
    40a8:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    40aa:	4642      	mov	r2, r8
    40ac:	2a01      	cmp	r2, #1
    40ae:	d105      	bne.n	40bc <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    40b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    40b2:	05c0      	lsls	r0, r0, #23
    40b4:	0dc0      	lsrs	r0, r0, #23
    40b6:	4a13      	ldr	r2, [pc, #76]	; (4104 <trx_sram_write+0x174>)
    40b8:	8010      	strh	r0, [r2, #0]
    40ba:	e003      	b.n	40c4 <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    40bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    40be:	b2c0      	uxtb	r0, r0
    40c0:	4a10      	ldr	r2, [pc, #64]	; (4104 <trx_sram_write+0x174>)
    40c2:	8010      	strh	r0, [r2, #0]
    40c4:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    40c6:	3d01      	subs	r5, #1
    40c8:	b2ed      	uxtb	r5, r5
    40ca:	2dff      	cmp	r5, #255	; 0xff
    40cc:	d1d4      	bne.n	4078 <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    40ce:	480a      	ldr	r0, [pc, #40]	; (40f8 <trx_sram_write+0x168>)
    40d0:	490a      	ldr	r1, [pc, #40]	; (40fc <trx_sram_write+0x16c>)
    40d2:	2200      	movs	r2, #0
    40d4:	4b0a      	ldr	r3, [pc, #40]	; (4100 <trx_sram_write+0x170>)
    40d6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    40d8:	464b      	mov	r3, r9
    40da:	2b00      	cmp	r3, #0
    40dc:	d005      	beq.n	40ea <trx_sram_write+0x15a>
		cpu_irq_enable();
    40de:	2201      	movs	r2, #1
    40e0:	4b04      	ldr	r3, [pc, #16]	; (40f4 <trx_sram_write+0x164>)
    40e2:	701a      	strb	r2, [r3, #0]
    40e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    40e8:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    40ea:	bc0c      	pop	{r2, r3}
    40ec:	4690      	mov	r8, r2
    40ee:	4699      	mov	r9, r3
    40f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	20000008 	.word	0x20000008
    40f8:	200009e0 	.word	0x200009e0
    40fc:	200009a4 	.word	0x200009a4
    4100:	00000c69 	.word	0x00000c69
    4104:	2000099c 	.word	0x2000099c

00004108 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    4108:	b5f0      	push	{r4, r5, r6, r7, lr}
    410a:	465f      	mov	r7, fp
    410c:	4656      	mov	r6, sl
    410e:	464d      	mov	r5, r9
    4110:	4644      	mov	r4, r8
    4112:	b4f0      	push	{r4, r5, r6, r7}
    4114:	b083      	sub	sp, #12
    4116:	1c05      	adds	r5, r0, #0
    4118:	1c0e      	adds	r6, r1, #0
    411a:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    411c:	2001      	movs	r0, #1
    411e:	4b5b      	ldr	r3, [pc, #364]	; (428c <trx_sram_read+0x184>)
    4120:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4122:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4126:	4279      	negs	r1, r7
    4128:	4179      	adcs	r1, r7
    412a:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    412c:	b672      	cpsid	i
    412e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4132:	2200      	movs	r2, #0
    4134:	4b56      	ldr	r3, [pc, #344]	; (4290 <trx_sram_read+0x188>)
    4136:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4138:	4f56      	ldr	r7, [pc, #344]	; (4294 <trx_sram_read+0x18c>)
    413a:	1c38      	adds	r0, r7, #0
    413c:	4956      	ldr	r1, [pc, #344]	; (4298 <trx_sram_read+0x190>)
    413e:	2201      	movs	r2, #1
    4140:	4b56      	ldr	r3, [pc, #344]	; (429c <trx_sram_read+0x194>)
    4142:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4144:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4146:	2101      	movs	r1, #1
    4148:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    414a:	420a      	tst	r2, r1
    414c:	d0fc      	beq.n	4148 <trx_sram_read+0x40>
    414e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4150:	07d1      	lsls	r1, r2, #31
    4152:	d501      	bpl.n	4158 <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4154:	2200      	movs	r2, #0
    4156:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4158:	2102      	movs	r1, #2
    415a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    415c:	420a      	tst	r2, r1
    415e:	d0fc      	beq.n	415a <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4160:	2204      	movs	r2, #4
    4162:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4164:	4211      	tst	r1, r2
    4166:	d0fc      	beq.n	4162 <trx_sram_read+0x5a>
    4168:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    416a:	0751      	lsls	r1, r2, #29
    416c:	d514      	bpl.n	4198 <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    416e:	8b5a      	ldrh	r2, [r3, #26]
    4170:	0751      	lsls	r1, r2, #29
    4172:	d503      	bpl.n	417c <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4174:	8b59      	ldrh	r1, [r3, #26]
    4176:	2204      	movs	r2, #4
    4178:	430a      	orrs	r2, r1
    417a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    417c:	4a45      	ldr	r2, [pc, #276]	; (4294 <trx_sram_read+0x18c>)
    417e:	7992      	ldrb	r2, [r2, #6]
    4180:	2a01      	cmp	r2, #1
    4182:	d105      	bne.n	4190 <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4184:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4186:	05c9      	lsls	r1, r1, #23
    4188:	0dc9      	lsrs	r1, r1, #23
    418a:	4a45      	ldr	r2, [pc, #276]	; (42a0 <trx_sram_read+0x198>)
    418c:	8011      	strh	r1, [r2, #0]
    418e:	e003      	b.n	4198 <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4190:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4192:	b2c9      	uxtb	r1, r1
    4194:	4a42      	ldr	r2, [pc, #264]	; (42a0 <trx_sram_read+0x198>)
    4196:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4198:	2201      	movs	r2, #1
    419a:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    419c:	4211      	tst	r1, r2
    419e:	d0fc      	beq.n	419a <trx_sram_read+0x92>
    41a0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    41a2:	07d1      	lsls	r1, r2, #31
    41a4:	d500      	bpl.n	41a8 <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    41a6:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    41a8:	2202      	movs	r2, #2
    41aa:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    41ac:	4211      	tst	r1, r2
    41ae:	d0fc      	beq.n	41aa <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41b0:	2204      	movs	r2, #4
    41b2:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    41b4:	4211      	tst	r1, r2
    41b6:	d0fc      	beq.n	41b2 <trx_sram_read+0xaa>
    41b8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    41ba:	0751      	lsls	r1, r2, #29
    41bc:	d50f      	bpl.n	41de <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    41be:	8b5a      	ldrh	r2, [r3, #26]
    41c0:	0751      	lsls	r1, r2, #29
    41c2:	d503      	bpl.n	41cc <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    41c4:	8b59      	ldrh	r1, [r3, #26]
    41c6:	2204      	movs	r2, #4
    41c8:	430a      	orrs	r2, r1
    41ca:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    41cc:	4a31      	ldr	r2, [pc, #196]	; (4294 <trx_sram_read+0x18c>)
    41ce:	7992      	ldrb	r2, [r2, #6]
    41d0:	2a01      	cmp	r2, #1
    41d2:	d109      	bne.n	41e8 <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    41d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41d6:	05d2      	lsls	r2, r2, #23
    41d8:	0dd2      	lsrs	r2, r2, #23
    41da:	4b31      	ldr	r3, [pc, #196]	; (42a0 <trx_sram_read+0x198>)
    41dc:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    41de:	1e63      	subs	r3, r4, #1
    41e0:	b2db      	uxtb	r3, r3
    41e2:	2c00      	cmp	r4, #0
    41e4:	d105      	bne.n	41f2 <trx_sram_read+0xea>
    41e6:	e03b      	b.n	4260 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    41e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41ea:	b2d2      	uxtb	r2, r2
    41ec:	4b2c      	ldr	r3, [pc, #176]	; (42a0 <trx_sram_read+0x198>)
    41ee:	801a      	strh	r2, [r3, #0]
    41f0:	e7f5      	b.n	41de <trx_sram_read+0xd6>
    41f2:	3301      	adds	r3, #1
    41f4:	199b      	adds	r3, r3, r6
    41f6:	4699      	mov	r9, r3
    41f8:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41fa:	4a26      	ldr	r2, [pc, #152]	; (4294 <trx_sram_read+0x18c>)
    41fc:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    41fe:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4200:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4202:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4204:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4206:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4208:	2204      	movs	r2, #4
    420a:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    420c:	4642      	mov	r2, r8
    420e:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4210:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4212:	4222      	tst	r2, r4
    4214:	d0fc      	beq.n	4210 <trx_sram_read+0x108>
    4216:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4218:	4222      	tst	r2, r4
    421a:	d001      	beq.n	4220 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    421c:	4652      	mov	r2, sl
    421e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4220:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4222:	422a      	tst	r2, r5
    4224:	d0fc      	beq.n	4220 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4226:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4228:	4202      	tst	r2, r0
    422a:	d0fc      	beq.n	4226 <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    422c:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    422e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4230:	4202      	tst	r2, r0
    4232:	d011      	beq.n	4258 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4234:	8b5a      	ldrh	r2, [r3, #26]
    4236:	4202      	tst	r2, r0
    4238:	d004      	beq.n	4244 <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    423a:	8b5a      	ldrh	r2, [r3, #26]
    423c:	4659      	mov	r1, fp
    423e:	430a      	orrs	r2, r1
    4240:	b292      	uxth	r2, r2
    4242:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4244:	4913      	ldr	r1, [pc, #76]	; (4294 <trx_sram_read+0x18c>)
    4246:	798a      	ldrb	r2, [r1, #6]
    4248:	2a01      	cmp	r2, #1
    424a:	d103      	bne.n	4254 <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    424c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    424e:	05c9      	lsls	r1, r1, #23
    4250:	0dc9      	lsrs	r1, r1, #23
    4252:	e001      	b.n	4258 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4254:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4256:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    4258:	7031      	strb	r1, [r6, #0]
		data++;
    425a:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    425c:	454e      	cmp	r6, r9
    425e:	d1d5      	bne.n	420c <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4260:	480c      	ldr	r0, [pc, #48]	; (4294 <trx_sram_read+0x18c>)
    4262:	490d      	ldr	r1, [pc, #52]	; (4298 <trx_sram_read+0x190>)
    4264:	2200      	movs	r2, #0
    4266:	4b0d      	ldr	r3, [pc, #52]	; (429c <trx_sram_read+0x194>)
    4268:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    426a:	9a01      	ldr	r2, [sp, #4]
    426c:	2a00      	cmp	r2, #0
    426e:	d005      	beq.n	427c <trx_sram_read+0x174>
		cpu_irq_enable();
    4270:	2201      	movs	r2, #1
    4272:	4b07      	ldr	r3, [pc, #28]	; (4290 <trx_sram_read+0x188>)
    4274:	701a      	strb	r2, [r3, #0]
    4276:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    427a:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    427c:	b003      	add	sp, #12
    427e:	bc3c      	pop	{r2, r3, r4, r5}
    4280:	4690      	mov	r8, r2
    4282:	4699      	mov	r9, r3
    4284:	46a2      	mov	sl, r4
    4286:	46ab      	mov	fp, r5
    4288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	00000151 	.word	0x00000151
    4290:	20000008 	.word	0x20000008
    4294:	200009e0 	.word	0x200009e0
    4298:	200009a4 	.word	0x200009a4
    429c:	00000c69 	.word	0x00000c69
    42a0:	2000099c 	.word	0x2000099c

000042a4 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    42a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42a6:	465f      	mov	r7, fp
    42a8:	4656      	mov	r6, sl
    42aa:	464d      	mov	r5, r9
    42ac:	4644      	mov	r4, r8
    42ae:	b4f0      	push	{r4, r5, r6, r7}
    42b0:	b083      	sub	sp, #12
    42b2:	1c05      	adds	r5, r0, #0
    42b4:	4688      	mov	r8, r1
    42b6:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    42b8:	2001      	movs	r0, #1
    42ba:	4b83      	ldr	r3, [pc, #524]	; (44c8 <trx_aes_wrrd+0x224>)
    42bc:	4798      	blx	r3

	ENTER_TRX_REGION();
    42be:	2000      	movs	r0, #0
    42c0:	2100      	movs	r1, #0
    42c2:	4b82      	ldr	r3, [pc, #520]	; (44cc <trx_aes_wrrd+0x228>)
    42c4:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    42c6:	4e82      	ldr	r6, [pc, #520]	; (44d0 <trx_aes_wrrd+0x22c>)
    42c8:	1c30      	adds	r0, r6, #0
    42ca:	4982      	ldr	r1, [pc, #520]	; (44d4 <trx_aes_wrrd+0x230>)
    42cc:	2201      	movs	r2, #1
    42ce:	4b82      	ldr	r3, [pc, #520]	; (44d8 <trx_aes_wrrd+0x234>)
    42d0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42d2:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42d4:	2101      	movs	r1, #1
    42d6:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    42d8:	420a      	tst	r2, r1
    42da:	d0fc      	beq.n	42d6 <trx_aes_wrrd+0x32>
    42dc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    42de:	07d0      	lsls	r0, r2, #31
    42e0:	d501      	bpl.n	42e6 <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42e2:	2240      	movs	r2, #64	; 0x40
    42e4:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42e6:	2102      	movs	r1, #2
    42e8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    42ea:	420a      	tst	r2, r1
    42ec:	d0fc      	beq.n	42e8 <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42ee:	2104      	movs	r1, #4
    42f0:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    42f2:	420a      	tst	r2, r1
    42f4:	d0fc      	beq.n	42f0 <trx_aes_wrrd+0x4c>
    42f6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    42f8:	0751      	lsls	r1, r2, #29
    42fa:	d514      	bpl.n	4326 <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    42fc:	8b5a      	ldrh	r2, [r3, #26]
    42fe:	0756      	lsls	r6, r2, #29
    4300:	d503      	bpl.n	430a <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4302:	8b59      	ldrh	r1, [r3, #26]
    4304:	2204      	movs	r2, #4
    4306:	430a      	orrs	r2, r1
    4308:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    430a:	4a71      	ldr	r2, [pc, #452]	; (44d0 <trx_aes_wrrd+0x22c>)
    430c:	7992      	ldrb	r2, [r2, #6]
    430e:	2a01      	cmp	r2, #1
    4310:	d105      	bne.n	431e <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4312:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4314:	05c9      	lsls	r1, r1, #23
    4316:	0dc9      	lsrs	r1, r1, #23
    4318:	4a70      	ldr	r2, [pc, #448]	; (44dc <trx_aes_wrrd+0x238>)
    431a:	8011      	strh	r1, [r2, #0]
    431c:	e003      	b.n	4326 <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    431e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4320:	b2c9      	uxtb	r1, r1
    4322:	4a6e      	ldr	r2, [pc, #440]	; (44dc <trx_aes_wrrd+0x238>)
    4324:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4326:	2101      	movs	r1, #1
    4328:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    432a:	420a      	tst	r2, r1
    432c:	d0fc      	beq.n	4328 <trx_aes_wrrd+0x84>
    432e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4330:	07d0      	lsls	r0, r2, #31
    4332:	d500      	bpl.n	4336 <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4334:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4336:	2102      	movs	r1, #2
    4338:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    433a:	420a      	tst	r2, r1
    433c:	d0fc      	beq.n	4338 <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    433e:	2204      	movs	r2, #4
    4340:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4342:	4211      	tst	r1, r2
    4344:	d0fc      	beq.n	4340 <trx_aes_wrrd+0x9c>
    4346:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4348:	0751      	lsls	r1, r2, #29
    434a:	d514      	bpl.n	4376 <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    434c:	8b5a      	ldrh	r2, [r3, #26]
    434e:	0756      	lsls	r6, r2, #29
    4350:	d503      	bpl.n	435a <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4352:	8b59      	ldrh	r1, [r3, #26]
    4354:	2204      	movs	r2, #4
    4356:	430a      	orrs	r2, r1
    4358:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    435a:	4a5d      	ldr	r2, [pc, #372]	; (44d0 <trx_aes_wrrd+0x22c>)
    435c:	7992      	ldrb	r2, [r2, #6]
    435e:	2a01      	cmp	r2, #1
    4360:	d105      	bne.n	436e <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4362:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4364:	05c9      	lsls	r1, r1, #23
    4366:	0dc9      	lsrs	r1, r1, #23
    4368:	4a5c      	ldr	r2, [pc, #368]	; (44dc <trx_aes_wrrd+0x238>)
    436a:	8011      	strh	r1, [r2, #0]
    436c:	e003      	b.n	4376 <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    436e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4370:	b2c9      	uxtb	r1, r1
    4372:	4a5a      	ldr	r2, [pc, #360]	; (44dc <trx_aes_wrrd+0x238>)
    4374:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4376:	2201      	movs	r2, #1
    4378:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    437a:	4211      	tst	r1, r2
    437c:	d0fc      	beq.n	4378 <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    437e:	4640      	mov	r0, r8
    4380:	7801      	ldrb	r1, [r0, #0]
    4382:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4384:	07d6      	lsls	r6, r2, #31
    4386:	d500      	bpl.n	438a <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4388:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    438a:	2202      	movs	r2, #2
    438c:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    438e:	4211      	tst	r1, r2
    4390:	d0fc      	beq.n	438c <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4392:	2204      	movs	r2, #4
    4394:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4396:	4211      	tst	r1, r2
    4398:	d0fc      	beq.n	4394 <trx_aes_wrrd+0xf0>
    439a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    439c:	0750      	lsls	r0, r2, #29
    439e:	d50f      	bpl.n	43c0 <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43a0:	8b5a      	ldrh	r2, [r3, #26]
    43a2:	0751      	lsls	r1, r2, #29
    43a4:	d503      	bpl.n	43ae <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    43a6:	8b59      	ldrh	r1, [r3, #26]
    43a8:	2204      	movs	r2, #4
    43aa:	430a      	orrs	r2, r1
    43ac:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    43ae:	4a48      	ldr	r2, [pc, #288]	; (44d0 <trx_aes_wrrd+0x22c>)
    43b0:	7992      	ldrb	r2, [r2, #6]
    43b2:	2a01      	cmp	r2, #1
    43b4:	d108      	bne.n	43c8 <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    43b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43b8:	05d2      	lsls	r2, r2, #23
    43ba:	0dd2      	lsrs	r2, r2, #23
    43bc:	4b47      	ldr	r3, [pc, #284]	; (44dc <trx_aes_wrrd+0x238>)
    43be:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    43c0:	2100      	movs	r1, #0
    43c2:	2c00      	cmp	r4, #0
    43c4:	d047      	beq.n	4456 <trx_aes_wrrd+0x1b2>
    43c6:	e004      	b.n	43d2 <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    43ca:	b2d2      	uxtb	r2, r2
    43cc:	4b43      	ldr	r3, [pc, #268]	; (44dc <trx_aes_wrrd+0x238>)
    43ce:	801a      	strh	r2, [r3, #0]
    43d0:	e7f6      	b.n	43c0 <trx_aes_wrrd+0x11c>
    43d2:	4645      	mov	r5, r8
    43d4:	3c01      	subs	r4, #1
    43d6:	b2e4      	uxtb	r4, r4
    43d8:	9401      	str	r4, [sp, #4]
    43da:	1c23      	adds	r3, r4, #0
    43dc:	4443      	add	r3, r8
    43de:	3301      	adds	r3, #1
    43e0:	469b      	mov	fp, r3
    43e2:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43e4:	4b3a      	ldr	r3, [pc, #232]	; (44d0 <trx_aes_wrrd+0x22c>)
    43e6:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43e8:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43ea:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43ec:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43ee:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    43f0:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43f2:	4656      	mov	r6, sl
    43f4:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43f6:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    43f8:	4206      	tst	r6, r0
    43fa:	d0fc      	beq.n	43f6 <trx_aes_wrrd+0x152>
    43fc:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    43fe:	786e      	ldrb	r6, [r5, #1]
    4400:	46b3      	mov	fp, r6
    4402:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4404:	4206      	tst	r6, r0
    4406:	d001      	beq.n	440c <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4408:	465e      	mov	r6, fp
    440a:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    440c:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    440e:	4226      	tst	r6, r4
    4410:	d0fc      	beq.n	440c <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4412:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    4414:	4216      	tst	r6, r2
    4416:	d0fc      	beq.n	4412 <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4418:	464e      	mov	r6, r9
    441a:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    441c:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    441e:	4216      	tst	r6, r2
    4420:	d011      	beq.n	4446 <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4422:	8b59      	ldrh	r1, [r3, #26]
    4424:	4211      	tst	r1, r2
    4426:	d004      	beq.n	4432 <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4428:	8b59      	ldrh	r1, [r3, #26]
    442a:	2604      	movs	r6, #4
    442c:	4331      	orrs	r1, r6
    442e:	b289      	uxth	r1, r1
    4430:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4432:	4e27      	ldr	r6, [pc, #156]	; (44d0 <trx_aes_wrrd+0x22c>)
    4434:	79b1      	ldrb	r1, [r6, #6]
    4436:	2901      	cmp	r1, #1
    4438:	d103      	bne.n	4442 <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    443a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    443c:	05c9      	lsls	r1, r1, #23
    443e:	0dc9      	lsrs	r1, r1, #23
    4440:	e001      	b.n	4446 <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4442:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4444:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    4446:	4663      	mov	r3, ip
    4448:	7019      	strb	r1, [r3, #0]
    444a:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    444c:	42bd      	cmp	r5, r7
    444e:	d1d0      	bne.n	43f2 <trx_aes_wrrd+0x14e>
    4450:	9b01      	ldr	r3, [sp, #4]
    4452:	3301      	adds	r3, #1
    4454:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4456:	4b1e      	ldr	r3, [pc, #120]	; (44d0 <trx_aes_wrrd+0x22c>)
    4458:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    445a:	2001      	movs	r0, #1
    445c:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    445e:	4202      	tst	r2, r0
    4460:	d0fc      	beq.n	445c <trx_aes_wrrd+0x1b8>
    4462:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4464:	07d6      	lsls	r6, r2, #31
    4466:	d501      	bpl.n	446c <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4468:	2200      	movs	r2, #0
    446a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    446c:	2002      	movs	r0, #2
    446e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4470:	4202      	tst	r2, r0
    4472:	d0fc      	beq.n	446e <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4474:	2004      	movs	r0, #4
    4476:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    4478:	4202      	tst	r2, r0
    447a:	d0fc      	beq.n	4476 <trx_aes_wrrd+0x1d2>
    447c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    447e:	0750      	lsls	r0, r2, #29
    4480:	d510      	bpl.n	44a4 <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4482:	8b5a      	ldrh	r2, [r3, #26]
    4484:	0751      	lsls	r1, r2, #29
    4486:	d503      	bpl.n	4490 <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4488:	8b59      	ldrh	r1, [r3, #26]
    448a:	2204      	movs	r2, #4
    448c:	430a      	orrs	r2, r1
    448e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4490:	4a0f      	ldr	r2, [pc, #60]	; (44d0 <trx_aes_wrrd+0x22c>)
    4492:	7992      	ldrb	r2, [r2, #6]
    4494:	2a01      	cmp	r2, #1
    4496:	d103      	bne.n	44a0 <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4498:	6a99      	ldr	r1, [r3, #40]	; 0x28
    449a:	05c9      	lsls	r1, r1, #23
    449c:	0dc9      	lsrs	r1, r1, #23
    449e:	e001      	b.n	44a4 <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    44a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    44a2:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    44a4:	4642      	mov	r2, r8
    44a6:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    44a8:	4809      	ldr	r0, [pc, #36]	; (44d0 <trx_aes_wrrd+0x22c>)
    44aa:	490a      	ldr	r1, [pc, #40]	; (44d4 <trx_aes_wrrd+0x230>)
    44ac:	2200      	movs	r2, #0
    44ae:	4b0a      	ldr	r3, [pc, #40]	; (44d8 <trx_aes_wrrd+0x234>)
    44b0:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    44b2:	2000      	movs	r0, #0
    44b4:	2100      	movs	r1, #0
    44b6:	4b0a      	ldr	r3, [pc, #40]	; (44e0 <trx_aes_wrrd+0x23c>)
    44b8:	4798      	blx	r3
}
    44ba:	b003      	add	sp, #12
    44bc:	bc3c      	pop	{r2, r3, r4, r5}
    44be:	4690      	mov	r8, r2
    44c0:	4699      	mov	r9, r3
    44c2:	46a2      	mov	sl, r4
    44c4:	46ab      	mov	fp, r5
    44c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44c8:	00000151 	.word	0x00000151
    44cc:	00000339 	.word	0x00000339
    44d0:	200009e0 	.word	0x200009e0
    44d4:	200009a4 	.word	0x200009a4
    44d8:	00000c69 	.word	0x00000c69
    44dc:	2000099c 	.word	0x2000099c
    44e0:	00000319 	.word	0x00000319

000044e4 <appDataConf>:
/*************************************************************************//**
*****************************************************************************/

static void appDataConf(NWK_DataReq_t *req)
{
	if (NWK_SUCCESS_STATUS == req->status){
    44e4:	7f03      	ldrb	r3, [r0, #28]
    44e6:	2b00      	cmp	r3, #0
    44e8:	d106      	bne.n	44f8 <appDataConf+0x14>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    44ea:	2280      	movs	r2, #128	; 0x80
    44ec:	0312      	lsls	r2, r2, #12
    44ee:	4b03      	ldr	r3, [pc, #12]	; (44fc <appDataConf+0x18>)
    44f0:	61da      	str	r2, [r3, #28]
		LED_Toggle(LED0);
		appDataReqBusy = false;
    44f2:	2200      	movs	r2, #0
    44f4:	4b02      	ldr	r3, [pc, #8]	; (4500 <appDataConf+0x1c>)
    44f6:	701a      	strb	r2, [r3, #0]
	}
}
    44f8:	4770      	bx	lr
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	41004400 	.word	0x41004400
    4500:	200007cc 	.word	0x200007cc

00004504 <appTimerHandler>:
static void appTimerHandler(SYS_Timer_t *timer)
{
	//appSendData();
	//SYS_TimerStart(&appTimer);
	(void)timer;
}
    4504:	4770      	bx	lr
    4506:	46c0      	nop			; (mov r8, r8)

00004508 <appDataInd>:

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    4508:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < ind->size; i++) {
    450a:	7b03      	ldrb	r3, [r0, #12]
    450c:	2b00      	cmp	r3, #0
    450e:	d009      	beq.n	4524 <appDataInd+0x1c>
    4510:	2300      	movs	r3, #0
		rx_data[i] = ind->data[i];
    4512:	4907      	ldr	r1, [pc, #28]	; (4530 <appDataInd+0x28>)
    4514:	6884      	ldr	r4, [r0, #8]
    4516:	5ce2      	ldrb	r2, [r4, r3]
    4518:	54ca      	strb	r2, [r1, r3]

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    451a:	3301      	adds	r3, #1
    451c:	b2db      	uxtb	r3, r3
    451e:	7b02      	ldrb	r2, [r0, #12]
    4520:	429a      	cmp	r2, r3
    4522:	d8f7      	bhi.n	4514 <appDataInd+0xc>
		rx_data[i] = ind->data[i];
	}
	printf("%s",rx_data);
    4524:	4803      	ldr	r0, [pc, #12]	; (4534 <appDataInd+0x2c>)
    4526:	4902      	ldr	r1, [pc, #8]	; (4530 <appDataInd+0x28>)
    4528:	4b03      	ldr	r3, [pc, #12]	; (4538 <appDataInd+0x30>)
    452a:	4798      	blx	r3
	return true;
}
    452c:	2001      	movs	r0, #1
    452e:	bd10      	pop	{r4, pc}
    4530:	20000748 	.word	0x20000748
    4534:	00005ad8 	.word	0x00005ad8
    4538:	00004aa1 	.word	0x00004aa1

0000453c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    453c:	b570      	push	{r4, r5, r6, lr}
    453e:	b082      	sub	sp, #8
    4540:	1c05      	adds	r5, r0, #0
    4542:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    4544:	2200      	movs	r2, #0
    4546:	466b      	mov	r3, sp
    4548:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    454a:	4c06      	ldr	r4, [pc, #24]	; (4564 <usart_serial_getchar+0x28>)
    454c:	1c28      	adds	r0, r5, #0
    454e:	4669      	mov	r1, sp
    4550:	3106      	adds	r1, #6
    4552:	47a0      	blx	r4
    4554:	2800      	cmp	r0, #0
    4556:	d1f9      	bne.n	454c <usart_serial_getchar+0x10>

	*c = temp;
    4558:	466b      	mov	r3, sp
    455a:	3306      	adds	r3, #6
    455c:	881b      	ldrh	r3, [r3, #0]
    455e:	7033      	strb	r3, [r6, #0]
}
    4560:	b002      	add	sp, #8
    4562:	bd70      	pop	{r4, r5, r6, pc}
    4564:	00001089 	.word	0x00001089

00004568 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4568:	b570      	push	{r4, r5, r6, lr}
    456a:	1c06      	adds	r6, r0, #0
    456c:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    456e:	4c03      	ldr	r4, [pc, #12]	; (457c <usart_serial_putchar+0x14>)
    4570:	1c30      	adds	r0, r6, #0
    4572:	1c29      	adds	r1, r5, #0
    4574:	47a0      	blx	r4
    4576:	2800      	cmp	r0, #0
    4578:	d1fa      	bne.n	4570 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    457a:	bd70      	pop	{r4, r5, r6, pc}
    457c:	0000105d 	.word	0x0000105d

00004580 <appSendData>:
	}
}
/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
    4580:	b538      	push	{r3, r4, r5, lr}
	if (appDataReqBusy || 0 == appUartBufferPtr) {
    4582:	4b11      	ldr	r3, [pc, #68]	; (45c8 <appSendData+0x48>)
    4584:	781b      	ldrb	r3, [r3, #0]
    4586:	2b00      	cmp	r3, #0
    4588:	d11c      	bne.n	45c4 <appSendData+0x44>
    458a:	4b10      	ldr	r3, [pc, #64]	; (45cc <appSendData+0x4c>)
    458c:	781c      	ldrb	r4, [r3, #0]
    458e:	2c00      	cmp	r4, #0
    4590:	d018      	beq.n	45c4 <appSendData+0x44>
		return;
	}

	memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
    4592:	4d0f      	ldr	r5, [pc, #60]	; (45d0 <appSendData+0x50>)
    4594:	1c28      	adds	r0, r5, #0
    4596:	490f      	ldr	r1, [pc, #60]	; (45d4 <appSendData+0x54>)
    4598:	1c22      	adds	r2, r4, #0
    459a:	4b0f      	ldr	r3, [pc, #60]	; (45d8 <appSendData+0x58>)
    459c:	4798      	blx	r3

	appDataReq.dstAddr = 1;
    459e:	480f      	ldr	r0, [pc, #60]	; (45dc <appSendData+0x5c>)
    45a0:	2301      	movs	r3, #1
    45a2:	8143      	strh	r3, [r0, #10]
	appDataReq.dstEndpoint = APP_DST_ENDPOINT;
    45a4:	7303      	strb	r3, [r0, #12]
	appDataReq.srcEndpoint = APP_ENDPOINT;
    45a6:	2302      	movs	r3, #2
    45a8:	7343      	strb	r3, [r0, #13]
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    45aa:	7383      	strb	r3, [r0, #14]
	appDataReq.data = appDataReqBuffer;
    45ac:	6105      	str	r5, [r0, #16]
	appDataReq.size = appUartBufferPtr;
    45ae:	7504      	strb	r4, [r0, #20]
	appDataReq.confirm = appDataConf;
    45b0:	4b0b      	ldr	r3, [pc, #44]	; (45e0 <appSendData+0x60>)
    45b2:	6183      	str	r3, [r0, #24]
	NWK_DataReq(&appDataReq);
    45b4:	4b0b      	ldr	r3, [pc, #44]	; (45e4 <appSendData+0x64>)
    45b6:	4798      	blx	r3

	appUartBufferPtr = 0;
    45b8:	2200      	movs	r2, #0
    45ba:	4b04      	ldr	r3, [pc, #16]	; (45cc <appSendData+0x4c>)
    45bc:	701a      	strb	r2, [r3, #0]
	appDataReqBusy = true;
    45be:	4b02      	ldr	r3, [pc, #8]	; (45c8 <appSendData+0x48>)
    45c0:	2201      	movs	r2, #1
    45c2:	701a      	strb	r2, [r3, #0]
}
    45c4:	bd38      	pop	{r3, r4, r5, pc}
    45c6:	46c0      	nop			; (mov r8, r8)
    45c8:	200007cc 	.word	0x200007cc
    45cc:	2000075c 	.word	0x2000075c
    45d0:	200007d0 	.word	0x200007d0
    45d4:	20000760 	.word	0x20000760
    45d8:	00004a7d 	.word	0x00004a7d
    45dc:	2000083c 	.word	0x2000083c
    45e0:	000044e5 	.word	0x000044e5
    45e4:	0000213d 	.word	0x0000213d

000045e8 <extint_callback>:

/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */
static void extint_callback(void)
{
    45e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	delay_ms(120);
    45ea:	2078      	movs	r0, #120	; 0x78
    45ec:	4b13      	ldr	r3, [pc, #76]	; (463c <extint_callback+0x54>)
    45ee:	4798      	blx	r3
*****************************************************************************/
static void APP_TaskHandler(void)
{
	const char* tx_data = "this rocks";

	if(!appDataReqBusy){
    45f0:	4b13      	ldr	r3, [pc, #76]	; (4640 <extint_callback+0x58>)
    45f2:	781b      	ldrb	r3, [r3, #0]
    45f4:	2b00      	cmp	r3, #0
    45f6:	d117      	bne.n	4628 <extint_callback+0x40>
    45f8:	4c12      	ldr	r4, [pc, #72]	; (4644 <extint_callback+0x5c>)
    45fa:	1c27      	adds	r7, r4, #0
    45fc:	370b      	adds	r7, #11
		for (uint16_t i = 0; i < sizeof("this rocks"); i++) {
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    45fe:	4e12      	ldr	r6, [pc, #72]	; (4648 <extint_callback+0x60>)
				appSendData();
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    4600:	1c35      	adds	r5, r6, #0
{
	const char* tx_data = "this rocks";

	if(!appDataReqBusy){
		for (uint16_t i = 0; i < sizeof("this rocks"); i++) {
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    4602:	7833      	ldrb	r3, [r6, #0]
    4604:	2b69      	cmp	r3, #105	; 0x69
    4606:	d101      	bne.n	460c <extint_callback+0x24>
				appSendData();
    4608:	4b10      	ldr	r3, [pc, #64]	; (464c <extint_callback+0x64>)
    460a:	4798      	blx	r3
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    460c:	782b      	ldrb	r3, [r5, #0]
    460e:	2b68      	cmp	r3, #104	; 0x68
    4610:	d805      	bhi.n	461e <extint_callback+0x36>
				appUartBuffer[appUartBufferPtr++] = tx_data[i];
    4612:	1c59      	adds	r1, r3, #1
    4614:	4a0c      	ldr	r2, [pc, #48]	; (4648 <extint_callback+0x60>)
    4616:	7011      	strb	r1, [r2, #0]
    4618:	7821      	ldrb	r1, [r4, #0]
    461a:	4a0d      	ldr	r2, [pc, #52]	; (4650 <extint_callback+0x68>)
    461c:	54d1      	strb	r1, [r2, r3]
    461e:	3401      	adds	r4, #1
static void APP_TaskHandler(void)
{
	const char* tx_data = "this rocks";

	if(!appDataReqBusy){
		for (uint16_t i = 0; i < sizeof("this rocks"); i++) {
    4620:	42bc      	cmp	r4, r7
    4622:	d1ee      	bne.n	4602 <extint_callback+0x1a>

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
				appUartBuffer[appUartBufferPtr++] = tx_data[i];
			}
		}
		appSendData();
    4624:	4b09      	ldr	r3, [pc, #36]	; (464c <extint_callback+0x64>)
    4626:	4798      	blx	r3
 */
static void extint_callback(void)
{
	delay_ms(120);
	APP_TaskHandler();
	printf("It totally works right now!");
    4628:	480a      	ldr	r0, [pc, #40]	; (4654 <extint_callback+0x6c>)
    462a:	4c0b      	ldr	r4, [pc, #44]	; (4658 <extint_callback+0x70>)
    462c:	47a0      	blx	r4
	delay_ms(500);
    462e:	20fa      	movs	r0, #250	; 0xfa
    4630:	0040      	lsls	r0, r0, #1
    4632:	4b02      	ldr	r3, [pc, #8]	; (463c <extint_callback+0x54>)
    4634:	4798      	blx	r3
	uint8_t clear=0;
	printf("                                   ");
    4636:	4809      	ldr	r0, [pc, #36]	; (465c <extint_callback+0x74>)
    4638:	47a0      	blx	r4
}
    463a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    463c:	0000017d 	.word	0x0000017d
    4640:	200007cc 	.word	0x200007cc
    4644:	00005adc 	.word	0x00005adc
    4648:	2000075c 	.word	0x2000075c
    464c:	00004581 	.word	0x00004581
    4650:	20000760 	.word	0x20000760
    4654:	00005ae8 	.word	0x00005ae8
    4658:	00004aa1 	.word	0x00004aa1
    465c:	00005b04 	.word	0x00005b04

00004660 <main>:
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
}

int main(void)
{
    4660:	b5f0      	push	{r4, r5, r6, r7, lr}
    4662:	b091      	sub	sp, #68	; 0x44
	irq_initialize_vectors();
	#if SAMD || SAMR21
	system_init();
    4664:	4b53      	ldr	r3, [pc, #332]	; (47b4 <main+0x154>)
    4666:	4798      	blx	r3
	delay_init();
    4668:	4b53      	ldr	r3, [pc, #332]	; (47b8 <main+0x158>)
    466a:	4798      	blx	r3
	#else
	sysclk_init();
	board_init();
	#endif
	SYS_Init();
    466c:	4b53      	ldr	r3, [pc, #332]	; (47bc <main+0x15c>)
    466e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4670:	2380      	movs	r3, #128	; 0x80
    4672:	05db      	lsls	r3, r3, #23
    4674:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4676:	2300      	movs	r3, #0
    4678:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    467a:	22ff      	movs	r2, #255	; 0xff
    467c:	4668      	mov	r0, sp
    467e:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    4680:	2200      	movs	r2, #0
    4682:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4684:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    4686:	2196      	movs	r1, #150	; 0x96
    4688:	0189      	lsls	r1, r1, #6
    468a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    468c:	2601      	movs	r6, #1
    468e:	2124      	movs	r1, #36	; 0x24
    4690:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    4692:	2125      	movs	r1, #37	; 0x25
    4694:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    4696:	2126      	movs	r1, #38	; 0x26
    4698:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    469a:	2127      	movs	r1, #39	; 0x27
    469c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    469e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    46a0:	212c      	movs	r1, #44	; 0x2c
    46a2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    46a4:	212d      	movs	r1, #45	; 0x2d
    46a6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    46a8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    46aa:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    46ac:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    46ae:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    46b0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    46b2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    46b4:	2313      	movs	r3, #19
    46b6:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    46b8:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    46ba:	2380      	movs	r3, #128	; 0x80
    46bc:	035b      	lsls	r3, r3, #13
    46be:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    46c0:	4b3f      	ldr	r3, [pc, #252]	; (47c0 <main+0x160>)
    46c2:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    46c4:	4b3f      	ldr	r3, [pc, #252]	; (47c4 <main+0x164>)
    46c6:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    46c8:	2301      	movs	r3, #1
    46ca:	425b      	negs	r3, r3
    46cc:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    46ce:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    46d0:	4c3d      	ldr	r4, [pc, #244]	; (47c8 <main+0x168>)
    46d2:	4b3e      	ldr	r3, [pc, #248]	; (47cc <main+0x16c>)
    46d4:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    46d6:	4a3e      	ldr	r2, [pc, #248]	; (47d0 <main+0x170>)
    46d8:	4b3e      	ldr	r3, [pc, #248]	; (47d4 <main+0x174>)
    46da:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    46dc:	4a3e      	ldr	r2, [pc, #248]	; (47d8 <main+0x178>)
    46de:	4b3f      	ldr	r3, [pc, #252]	; (47dc <main+0x17c>)
    46e0:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    46e2:	1c20      	adds	r0, r4, #0
    46e4:	493e      	ldr	r1, [pc, #248]	; (47e0 <main+0x180>)
    46e6:	466a      	mov	r2, sp
    46e8:	4b3e      	ldr	r3, [pc, #248]	; (47e4 <main+0x184>)
    46ea:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    46ec:	4f3e      	ldr	r7, [pc, #248]	; (47e8 <main+0x188>)
    46ee:	683b      	ldr	r3, [r7, #0]
    46f0:	6898      	ldr	r0, [r3, #8]
    46f2:	2100      	movs	r1, #0
    46f4:	4d3d      	ldr	r5, [pc, #244]	; (47ec <main+0x18c>)
    46f6:	47a8      	blx	r5
	setbuf(stdin, NULL);
    46f8:	683b      	ldr	r3, [r7, #0]
    46fa:	6858      	ldr	r0, [r3, #4]
    46fc:	2100      	movs	r1, #0
    46fe:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4700:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4702:	1c28      	adds	r0, r5, #0
    4704:	4b3a      	ldr	r3, [pc, #232]	; (47f0 <main+0x190>)
    4706:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4708:	231f      	movs	r3, #31
    470a:	4018      	ands	r0, r3
    470c:	4086      	lsls	r6, r0
    470e:	4b39      	ldr	r3, [pc, #228]	; (47f4 <main+0x194>)
    4710:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4712:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4714:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4716:	2a00      	cmp	r2, #0
    4718:	d1fc      	bne.n	4714 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    471a:	682a      	ldr	r2, [r5, #0]
    471c:	2302      	movs	r3, #2
    471e:	4313      	orrs	r3, r2
    4720:	602b      	str	r3, [r5, #0]
 *  button state.
 */
static void configure_extint(void)
{
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    4722:	4668      	mov	r0, sp
    4724:	4b34      	ldr	r3, [pc, #208]	; (47f8 <main+0x198>)
    4726:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    4728:	231c      	movs	r3, #28
    472a:	9300      	str	r3, [sp, #0]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    472c:	2500      	movs	r5, #0
    472e:	9501      	str	r5, [sp, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    4730:	2303      	movs	r3, #3
    4732:	466a      	mov	r2, sp
    4734:	72d3      	strb	r3, [r2, #11]
	eint_chan_conf.filter_input_signal = true;
    4736:	2401      	movs	r4, #1
    4738:	7294      	strb	r4, [r2, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    473a:	2008      	movs	r0, #8
    473c:	4669      	mov	r1, sp
    473e:	4b2f      	ldr	r3, [pc, #188]	; (47fc <main+0x19c>)
    4740:	4798      	blx	r3
/** Configures and registers the External Interrupt callback function with the
 *  driver.
 */
static void configure_eic_callback(void)
{
	extint_register_callback(extint_callback,
    4742:	482f      	ldr	r0, [pc, #188]	; (4800 <main+0x1a0>)
    4744:	2108      	movs	r1, #8
    4746:	2200      	movs	r2, #0
    4748:	4b2e      	ldr	r3, [pc, #184]	; (4804 <main+0x1a4>)
    474a:	4798      	blx	r3
			BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    474c:	2008      	movs	r0, #8
    474e:	2100      	movs	r1, #0
    4750:	4b2d      	ldr	r3, [pc, #180]	; (4808 <main+0x1a8>)
    4752:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    4754:	4e2d      	ldr	r6, [pc, #180]	; (480c <main+0x1ac>)
    4756:	7034      	strb	r4, [r6, #0]
    4758:	f3bf 8f5f 	dmb	sy
    475c:	b662      	cpsie	i
	configure_eic_callback();
	
	/*Enable system interrupt*/
	system_interrupt_enable_global();
	
	printf("we made it");
    475e:	482c      	ldr	r0, [pc, #176]	; (4810 <main+0x1b0>)
    4760:	4b2c      	ldr	r3, [pc, #176]	; (4814 <main+0x1b4>)
    4762:	4798      	blx	r3
	//sio2host_init();
	cpu_irq_enable();
    4764:	7034      	strb	r4, [r6, #0]
    4766:	f3bf 8f5f 	dmb	sy
    476a:	b662      	cpsie	i

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    476c:	2280      	movs	r2, #128	; 0x80
    476e:	0312      	lsls	r2, r2, #12
    4770:	4b29      	ldr	r3, [pc, #164]	; (4818 <main+0x1b8>)
    4772:	615a      	str	r2, [r3, #20]

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    4774:	2002      	movs	r0, #2
    4776:	4b29      	ldr	r3, [pc, #164]	; (481c <main+0x1bc>)
    4778:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    477a:	4829      	ldr	r0, [pc, #164]	; (4820 <main+0x1c0>)
    477c:	4b29      	ldr	r3, [pc, #164]	; (4824 <main+0x1c4>)
    477e:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    4780:	200f      	movs	r0, #15
    4782:	4b29      	ldr	r3, [pc, #164]	; (4828 <main+0x1c8>)
    4784:	4798      	blx	r3
#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
#endif
	PHY_SetRxState(true);
    4786:	2001      	movs	r0, #1
    4788:	4b28      	ldr	r3, [pc, #160]	; (482c <main+0x1cc>)
    478a:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    478c:	2023      	movs	r0, #35	; 0x23
    478e:	4b28      	ldr	r3, [pc, #160]	; (4830 <main+0x1d0>)
    4790:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    4792:	4828      	ldr	r0, [pc, #160]	; (4834 <main+0x1d4>)
    4794:	4b28      	ldr	r3, [pc, #160]	; (4838 <main+0x1d8>)
    4796:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    4798:	2002      	movs	r0, #2
    479a:	4928      	ldr	r1, [pc, #160]	; (483c <main+0x1dc>)
    479c:	4b28      	ldr	r3, [pc, #160]	; (4840 <main+0x1e0>)
    479e:	4798      	blx	r3

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    47a0:	4b28      	ldr	r3, [pc, #160]	; (4844 <main+0x1e4>)
    47a2:	2214      	movs	r2, #20
    47a4:	609a      	str	r2, [r3, #8]
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    47a6:	731d      	strb	r5, [r3, #12]
	appTimer.handler = appTimerHandler;
    47a8:	4a27      	ldr	r2, [pc, #156]	; (4848 <main+0x1e8>)
    47aa:	611a      	str	r2, [r3, #16]
	LED_On(LED0);
	
	appInit();
	
	while (1) {
		SYS_TaskHandler();
    47ac:	4c27      	ldr	r4, [pc, #156]	; (484c <main+0x1ec>)
    47ae:	47a0      	blx	r4
    47b0:	e7fd      	b.n	47ae <main+0x14e>
    47b2:	46c0      	nop			; (mov r8, r8)
    47b4:	00001ab1 	.word	0x00001ab1
    47b8:	00000115 	.word	0x00000115
    47bc:	000034c9 	.word	0x000034c9
    47c0:	00040003 	.word	0x00040003
    47c4:	00050003 	.word	0x00050003
    47c8:	20000700 	.word	0x20000700
    47cc:	200008e8 	.word	0x200008e8
    47d0:	00004569 	.word	0x00004569
    47d4:	200008e4 	.word	0x200008e4
    47d8:	0000453d 	.word	0x0000453d
    47dc:	200008e0 	.word	0x200008e0
    47e0:	42000800 	.word	0x42000800
    47e4:	00000d55 	.word	0x00000d55
    47e8:	2000006c 	.word	0x2000006c
    47ec:	00004b51 	.word	0x00004b51
    47f0:	0000092d 	.word	0x0000092d
    47f4:	e000e100 	.word	0xe000e100
    47f8:	0000044d 	.word	0x0000044d
    47fc:	00000461 	.word	0x00000461
    4800:	000045e9 	.word	0x000045e9
    4804:	000002e9 	.word	0x000002e9
    4808:	00000319 	.word	0x00000319
    480c:	20000008 	.word	0x20000008
    4810:	00005b28 	.word	0x00005b28
    4814:	00004aa1 	.word	0x00004aa1
    4818:	41004400 	.word	0x41004400
    481c:	00002095 	.word	0x00002095
    4820:	00004567 	.word	0x00004567
    4824:	000020a9 	.word	0x000020a9
    4828:	00003301 	.word	0x00003301
    482c:	000032ed 	.word	0x000032ed
    4830:	00003371 	.word	0x00003371
    4834:	00005b34 	.word	0x00005b34
    4838:	00002bfd 	.word	0x00002bfd
    483c:	00004509 	.word	0x00004509
    4840:	000020bd 	.word	0x000020bd
    4844:	20000734 	.word	0x20000734
    4848:	00004505 	.word	0x00004505
    484c:	000034ed 	.word	0x000034ed

00004850 <common_tc_delay>:
    4850:	b510      	push	{r4, lr}
    4852:	1c04      	adds	r4, r0, #0
    4854:	4b13      	ldr	r3, [pc, #76]	; (48a4 <common_tc_delay+0x54>)
    4856:	4798      	blx	r3
    4858:	4b13      	ldr	r3, [pc, #76]	; (48a8 <common_tc_delay+0x58>)
    485a:	781a      	ldrb	r2, [r3, #0]
    485c:	4362      	muls	r2, r4
    485e:	1881      	adds	r1, r0, r2
    4860:	4b12      	ldr	r3, [pc, #72]	; (48ac <common_tc_delay+0x5c>)
    4862:	6059      	str	r1, [r3, #4]
    4864:	6859      	ldr	r1, [r3, #4]
    4866:	0c09      	lsrs	r1, r1, #16
    4868:	6059      	str	r1, [r3, #4]
    486a:	685b      	ldr	r3, [r3, #4]
    486c:	2b00      	cmp	r3, #0
    486e:	d007      	beq.n	4880 <common_tc_delay+0x30>
    4870:	4b0e      	ldr	r3, [pc, #56]	; (48ac <common_tc_delay+0x5c>)
    4872:	6859      	ldr	r1, [r3, #4]
    4874:	3201      	adds	r2, #1
    4876:	1880      	adds	r0, r0, r2
    4878:	8118      	strh	r0, [r3, #8]
    487a:	4b0d      	ldr	r3, [pc, #52]	; (48b0 <common_tc_delay+0x60>)
    487c:	4798      	blx	r3
    487e:	e004      	b.n	488a <common_tc_delay+0x3a>
    4880:	1882      	adds	r2, r0, r2
    4882:	4b0a      	ldr	r3, [pc, #40]	; (48ac <common_tc_delay+0x5c>)
    4884:	811a      	strh	r2, [r3, #8]
    4886:	4b0b      	ldr	r3, [pc, #44]	; (48b4 <common_tc_delay+0x64>)
    4888:	4798      	blx	r3
    488a:	4b08      	ldr	r3, [pc, #32]	; (48ac <common_tc_delay+0x5c>)
    488c:	891b      	ldrh	r3, [r3, #8]
    488e:	2b63      	cmp	r3, #99	; 0x63
    4890:	d802      	bhi.n	4898 <common_tc_delay+0x48>
    4892:	3364      	adds	r3, #100	; 0x64
    4894:	4a05      	ldr	r2, [pc, #20]	; (48ac <common_tc_delay+0x5c>)
    4896:	8113      	strh	r3, [r2, #8]
    4898:	4b04      	ldr	r3, [pc, #16]	; (48ac <common_tc_delay+0x5c>)
    489a:	8918      	ldrh	r0, [r3, #8]
    489c:	4b06      	ldr	r3, [pc, #24]	; (48b8 <common_tc_delay+0x68>)
    489e:	4798      	blx	r3
    48a0:	bd10      	pop	{r4, pc}
    48a2:	46c0      	nop			; (mov r8, r8)
    48a4:	000036b1 	.word	0x000036b1
    48a8:	200009ec 	.word	0x200009ec
    48ac:	2000085c 	.word	0x2000085c
    48b0:	000036c5 	.word	0x000036c5
    48b4:	000036d9 	.word	0x000036d9
    48b8:	00003715 	.word	0x00003715

000048bc <common_tc_init>:
    48bc:	b508      	push	{r3, lr}
    48be:	2200      	movs	r2, #0
    48c0:	4b03      	ldr	r3, [pc, #12]	; (48d0 <common_tc_init+0x14>)
    48c2:	701a      	strb	r2, [r3, #0]
    48c4:	4b03      	ldr	r3, [pc, #12]	; (48d4 <common_tc_init+0x18>)
    48c6:	4798      	blx	r3
    48c8:	4b03      	ldr	r3, [pc, #12]	; (48d8 <common_tc_init+0x1c>)
    48ca:	7018      	strb	r0, [r3, #0]
    48cc:	bd08      	pop	{r3, pc}
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	2000085c 	.word	0x2000085c
    48d4:	0000372d 	.word	0x0000372d
    48d8:	200009ec 	.word	0x200009ec

000048dc <tmr_ovf_callback>:
    48dc:	b508      	push	{r3, lr}
    48de:	4b0e      	ldr	r3, [pc, #56]	; (4918 <tmr_ovf_callback+0x3c>)
    48e0:	685b      	ldr	r3, [r3, #4]
    48e2:	2b00      	cmp	r3, #0
    48e4:	d007      	beq.n	48f6 <tmr_ovf_callback+0x1a>
    48e6:	4a0c      	ldr	r2, [pc, #48]	; (4918 <tmr_ovf_callback+0x3c>)
    48e8:	6853      	ldr	r3, [r2, #4]
    48ea:	3b01      	subs	r3, #1
    48ec:	6053      	str	r3, [r2, #4]
    48ee:	2b00      	cmp	r3, #0
    48f0:	d101      	bne.n	48f6 <tmr_ovf_callback+0x1a>
    48f2:	4b0a      	ldr	r3, [pc, #40]	; (491c <tmr_ovf_callback+0x40>)
    48f4:	4798      	blx	r3
    48f6:	4a08      	ldr	r2, [pc, #32]	; (4918 <tmr_ovf_callback+0x3c>)
    48f8:	7813      	ldrb	r3, [r2, #0]
    48fa:	3301      	adds	r3, #1
    48fc:	b2db      	uxtb	r3, r3
    48fe:	7013      	strb	r3, [r2, #0]
    4900:	4a07      	ldr	r2, [pc, #28]	; (4920 <tmr_ovf_callback+0x44>)
    4902:	7812      	ldrb	r2, [r2, #0]
    4904:	429a      	cmp	r2, r3
    4906:	d806      	bhi.n	4916 <tmr_ovf_callback+0x3a>
    4908:	4b03      	ldr	r3, [pc, #12]	; (4918 <tmr_ovf_callback+0x3c>)
    490a:	2200      	movs	r2, #0
    490c:	701a      	strb	r2, [r3, #0]
    490e:	68db      	ldr	r3, [r3, #12]
    4910:	2b00      	cmp	r3, #0
    4912:	d000      	beq.n	4916 <tmr_ovf_callback+0x3a>
    4914:	4798      	blx	r3
    4916:	bd08      	pop	{r3, pc}
    4918:	2000085c 	.word	0x2000085c
    491c:	000036d9 	.word	0x000036d9
    4920:	200009ec 	.word	0x200009ec

00004924 <tmr_cca_callback>:
    4924:	b508      	push	{r3, lr}
    4926:	4b04      	ldr	r3, [pc, #16]	; (4938 <tmr_cca_callback+0x14>)
    4928:	4798      	blx	r3
    492a:	4b04      	ldr	r3, [pc, #16]	; (493c <tmr_cca_callback+0x18>)
    492c:	691b      	ldr	r3, [r3, #16]
    492e:	2b00      	cmp	r3, #0
    4930:	d000      	beq.n	4934 <tmr_cca_callback+0x10>
    4932:	4798      	blx	r3
    4934:	bd08      	pop	{r3, pc}
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	000036c5 	.word	0x000036c5
    493c:	2000085c 	.word	0x2000085c

00004940 <set_common_tc_expiry_callback>:
    4940:	4b01      	ldr	r3, [pc, #4]	; (4948 <set_common_tc_expiry_callback+0x8>)
    4942:	6118      	str	r0, [r3, #16]
    4944:	4770      	bx	lr
    4946:	46c0      	nop			; (mov r8, r8)
    4948:	2000085c 	.word	0x2000085c

0000494c <__aeabi_uidiv>:
    494c:	2900      	cmp	r1, #0
    494e:	d034      	beq.n	49ba <.udivsi3_skip_div0_test+0x6a>

00004950 <.udivsi3_skip_div0_test>:
    4950:	2301      	movs	r3, #1
    4952:	2200      	movs	r2, #0
    4954:	b410      	push	{r4}
    4956:	4288      	cmp	r0, r1
    4958:	d32c      	bcc.n	49b4 <.udivsi3_skip_div0_test+0x64>
    495a:	2401      	movs	r4, #1
    495c:	0724      	lsls	r4, r4, #28
    495e:	42a1      	cmp	r1, r4
    4960:	d204      	bcs.n	496c <.udivsi3_skip_div0_test+0x1c>
    4962:	4281      	cmp	r1, r0
    4964:	d202      	bcs.n	496c <.udivsi3_skip_div0_test+0x1c>
    4966:	0109      	lsls	r1, r1, #4
    4968:	011b      	lsls	r3, r3, #4
    496a:	e7f8      	b.n	495e <.udivsi3_skip_div0_test+0xe>
    496c:	00e4      	lsls	r4, r4, #3
    496e:	42a1      	cmp	r1, r4
    4970:	d204      	bcs.n	497c <.udivsi3_skip_div0_test+0x2c>
    4972:	4281      	cmp	r1, r0
    4974:	d202      	bcs.n	497c <.udivsi3_skip_div0_test+0x2c>
    4976:	0049      	lsls	r1, r1, #1
    4978:	005b      	lsls	r3, r3, #1
    497a:	e7f8      	b.n	496e <.udivsi3_skip_div0_test+0x1e>
    497c:	4288      	cmp	r0, r1
    497e:	d301      	bcc.n	4984 <.udivsi3_skip_div0_test+0x34>
    4980:	1a40      	subs	r0, r0, r1
    4982:	431a      	orrs	r2, r3
    4984:	084c      	lsrs	r4, r1, #1
    4986:	42a0      	cmp	r0, r4
    4988:	d302      	bcc.n	4990 <.udivsi3_skip_div0_test+0x40>
    498a:	1b00      	subs	r0, r0, r4
    498c:	085c      	lsrs	r4, r3, #1
    498e:	4322      	orrs	r2, r4
    4990:	088c      	lsrs	r4, r1, #2
    4992:	42a0      	cmp	r0, r4
    4994:	d302      	bcc.n	499c <.udivsi3_skip_div0_test+0x4c>
    4996:	1b00      	subs	r0, r0, r4
    4998:	089c      	lsrs	r4, r3, #2
    499a:	4322      	orrs	r2, r4
    499c:	08cc      	lsrs	r4, r1, #3
    499e:	42a0      	cmp	r0, r4
    49a0:	d302      	bcc.n	49a8 <.udivsi3_skip_div0_test+0x58>
    49a2:	1b00      	subs	r0, r0, r4
    49a4:	08dc      	lsrs	r4, r3, #3
    49a6:	4322      	orrs	r2, r4
    49a8:	2800      	cmp	r0, #0
    49aa:	d003      	beq.n	49b4 <.udivsi3_skip_div0_test+0x64>
    49ac:	091b      	lsrs	r3, r3, #4
    49ae:	d001      	beq.n	49b4 <.udivsi3_skip_div0_test+0x64>
    49b0:	0909      	lsrs	r1, r1, #4
    49b2:	e7e3      	b.n	497c <.udivsi3_skip_div0_test+0x2c>
    49b4:	1c10      	adds	r0, r2, #0
    49b6:	bc10      	pop	{r4}
    49b8:	4770      	bx	lr
    49ba:	2800      	cmp	r0, #0
    49bc:	d001      	beq.n	49c2 <.udivsi3_skip_div0_test+0x72>
    49be:	2000      	movs	r0, #0
    49c0:	43c0      	mvns	r0, r0
    49c2:	b407      	push	{r0, r1, r2}
    49c4:	4802      	ldr	r0, [pc, #8]	; (49d0 <.udivsi3_skip_div0_test+0x80>)
    49c6:	a102      	add	r1, pc, #8	; (adr r1, 49d0 <.udivsi3_skip_div0_test+0x80>)
    49c8:	1840      	adds	r0, r0, r1
    49ca:	9002      	str	r0, [sp, #8]
    49cc:	bd03      	pop	{r0, r1, pc}
    49ce:	46c0      	nop			; (mov r8, r8)
    49d0:	00000019 	.word	0x00000019

000049d4 <__aeabi_uidivmod>:
    49d4:	2900      	cmp	r1, #0
    49d6:	d0f0      	beq.n	49ba <.udivsi3_skip_div0_test+0x6a>
    49d8:	b503      	push	{r0, r1, lr}
    49da:	f7ff ffb9 	bl	4950 <.udivsi3_skip_div0_test>
    49de:	bc0e      	pop	{r1, r2, r3}
    49e0:	4342      	muls	r2, r0
    49e2:	1a89      	subs	r1, r1, r2
    49e4:	4718      	bx	r3
    49e6:	46c0      	nop			; (mov r8, r8)

000049e8 <__aeabi_idiv0>:
    49e8:	4770      	bx	lr
    49ea:	46c0      	nop			; (mov r8, r8)

000049ec <__aeabi_lmul>:
    49ec:	469c      	mov	ip, r3
    49ee:	0403      	lsls	r3, r0, #16
    49f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49f2:	0c1b      	lsrs	r3, r3, #16
    49f4:	0417      	lsls	r7, r2, #16
    49f6:	0c3f      	lsrs	r7, r7, #16
    49f8:	0c15      	lsrs	r5, r2, #16
    49fa:	1c1e      	adds	r6, r3, #0
    49fc:	1c04      	adds	r4, r0, #0
    49fe:	0c00      	lsrs	r0, r0, #16
    4a00:	437e      	muls	r6, r7
    4a02:	436b      	muls	r3, r5
    4a04:	4347      	muls	r7, r0
    4a06:	4345      	muls	r5, r0
    4a08:	18fb      	adds	r3, r7, r3
    4a0a:	0c30      	lsrs	r0, r6, #16
    4a0c:	1818      	adds	r0, r3, r0
    4a0e:	4287      	cmp	r7, r0
    4a10:	d902      	bls.n	4a18 <__aeabi_lmul+0x2c>
    4a12:	2380      	movs	r3, #128	; 0x80
    4a14:	025b      	lsls	r3, r3, #9
    4a16:	18ed      	adds	r5, r5, r3
    4a18:	0c03      	lsrs	r3, r0, #16
    4a1a:	18ed      	adds	r5, r5, r3
    4a1c:	4663      	mov	r3, ip
    4a1e:	435c      	muls	r4, r3
    4a20:	434a      	muls	r2, r1
    4a22:	0436      	lsls	r6, r6, #16
    4a24:	0c36      	lsrs	r6, r6, #16
    4a26:	18a1      	adds	r1, r4, r2
    4a28:	0400      	lsls	r0, r0, #16
    4a2a:	1980      	adds	r0, r0, r6
    4a2c:	1949      	adds	r1, r1, r5
    4a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a30 <__libc_init_array>:
    4a30:	b570      	push	{r4, r5, r6, lr}
    4a32:	4b0e      	ldr	r3, [pc, #56]	; (4a6c <__libc_init_array+0x3c>)
    4a34:	4d0e      	ldr	r5, [pc, #56]	; (4a70 <__libc_init_array+0x40>)
    4a36:	2400      	movs	r4, #0
    4a38:	1aed      	subs	r5, r5, r3
    4a3a:	10ad      	asrs	r5, r5, #2
    4a3c:	1c1e      	adds	r6, r3, #0
    4a3e:	42ac      	cmp	r4, r5
    4a40:	d004      	beq.n	4a4c <__libc_init_array+0x1c>
    4a42:	00a3      	lsls	r3, r4, #2
    4a44:	58f3      	ldr	r3, [r6, r3]
    4a46:	4798      	blx	r3
    4a48:	3401      	adds	r4, #1
    4a4a:	e7f8      	b.n	4a3e <__libc_init_array+0xe>
    4a4c:	f001 f8ca 	bl	5be4 <_init>
    4a50:	4b08      	ldr	r3, [pc, #32]	; (4a74 <__libc_init_array+0x44>)
    4a52:	4d09      	ldr	r5, [pc, #36]	; (4a78 <__libc_init_array+0x48>)
    4a54:	2400      	movs	r4, #0
    4a56:	1aed      	subs	r5, r5, r3
    4a58:	10ad      	asrs	r5, r5, #2
    4a5a:	1c1e      	adds	r6, r3, #0
    4a5c:	42ac      	cmp	r4, r5
    4a5e:	d004      	beq.n	4a6a <__libc_init_array+0x3a>
    4a60:	00a3      	lsls	r3, r4, #2
    4a62:	58f3      	ldr	r3, [r6, r3]
    4a64:	4798      	blx	r3
    4a66:	3401      	adds	r4, #1
    4a68:	e7f8      	b.n	4a5c <__libc_init_array+0x2c>
    4a6a:	bd70      	pop	{r4, r5, r6, pc}
    4a6c:	00005bf0 	.word	0x00005bf0
    4a70:	00005bf0 	.word	0x00005bf0
    4a74:	00005bf0 	.word	0x00005bf0
    4a78:	00005bf4 	.word	0x00005bf4

00004a7c <memcpy>:
    4a7c:	b510      	push	{r4, lr}
    4a7e:	2300      	movs	r3, #0
    4a80:	4293      	cmp	r3, r2
    4a82:	d003      	beq.n	4a8c <memcpy+0x10>
    4a84:	5ccc      	ldrb	r4, [r1, r3]
    4a86:	54c4      	strb	r4, [r0, r3]
    4a88:	3301      	adds	r3, #1
    4a8a:	e7f9      	b.n	4a80 <memcpy+0x4>
    4a8c:	bd10      	pop	{r4, pc}

00004a8e <memset>:
    4a8e:	1c03      	adds	r3, r0, #0
    4a90:	1882      	adds	r2, r0, r2
    4a92:	4293      	cmp	r3, r2
    4a94:	d002      	beq.n	4a9c <memset+0xe>
    4a96:	7019      	strb	r1, [r3, #0]
    4a98:	3301      	adds	r3, #1
    4a9a:	e7fa      	b.n	4a92 <memset+0x4>
    4a9c:	4770      	bx	lr
	...

00004aa0 <iprintf>:
    4aa0:	b40f      	push	{r0, r1, r2, r3}
    4aa2:	4b0b      	ldr	r3, [pc, #44]	; (4ad0 <iprintf+0x30>)
    4aa4:	b513      	push	{r0, r1, r4, lr}
    4aa6:	681c      	ldr	r4, [r3, #0]
    4aa8:	2c00      	cmp	r4, #0
    4aaa:	d005      	beq.n	4ab8 <iprintf+0x18>
    4aac:	69a3      	ldr	r3, [r4, #24]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d102      	bne.n	4ab8 <iprintf+0x18>
    4ab2:	1c20      	adds	r0, r4, #0
    4ab4:	f000 fd6a 	bl	558c <__sinit>
    4ab8:	ab05      	add	r3, sp, #20
    4aba:	68a1      	ldr	r1, [r4, #8]
    4abc:	1c20      	adds	r0, r4, #0
    4abe:	9a04      	ldr	r2, [sp, #16]
    4ac0:	9301      	str	r3, [sp, #4]
    4ac2:	f000 f8fd 	bl	4cc0 <_vfiprintf_r>
    4ac6:	bc16      	pop	{r1, r2, r4}
    4ac8:	bc08      	pop	{r3}
    4aca:	b004      	add	sp, #16
    4acc:	4718      	bx	r3
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	2000006c 	.word	0x2000006c
    4ad4:	00000000 	.word	0x00000000

00004ad8 <rand>:
    4ad8:	4b17      	ldr	r3, [pc, #92]	; (4b38 <rand+0x60>)
    4ada:	b510      	push	{r4, lr}
    4adc:	681c      	ldr	r4, [r3, #0]
    4ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d115      	bne.n	4b10 <rand+0x38>
    4ae4:	2018      	movs	r0, #24
    4ae6:	f000 fe11 	bl	570c <malloc>
    4aea:	4b14      	ldr	r3, [pc, #80]	; (4b3c <rand+0x64>)
    4aec:	63a0      	str	r0, [r4, #56]	; 0x38
    4aee:	8003      	strh	r3, [r0, #0]
    4af0:	4b13      	ldr	r3, [pc, #76]	; (4b40 <rand+0x68>)
    4af2:	8043      	strh	r3, [r0, #2]
    4af4:	4b13      	ldr	r3, [pc, #76]	; (4b44 <rand+0x6c>)
    4af6:	8083      	strh	r3, [r0, #4]
    4af8:	4b13      	ldr	r3, [pc, #76]	; (4b48 <rand+0x70>)
    4afa:	80c3      	strh	r3, [r0, #6]
    4afc:	4b13      	ldr	r3, [pc, #76]	; (4b4c <rand+0x74>)
    4afe:	8103      	strh	r3, [r0, #8]
    4b00:	2305      	movs	r3, #5
    4b02:	8143      	strh	r3, [r0, #10]
    4b04:	230b      	movs	r3, #11
    4b06:	8183      	strh	r3, [r0, #12]
    4b08:	2201      	movs	r2, #1
    4b0a:	2300      	movs	r3, #0
    4b0c:	6102      	str	r2, [r0, #16]
    4b0e:	6143      	str	r3, [r0, #20]
    4b10:	4b08      	ldr	r3, [pc, #32]	; (4b34 <rand+0x5c>)
    4b12:	4a07      	ldr	r2, [pc, #28]	; (4b30 <rand+0x58>)
    4b14:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4b16:	6920      	ldr	r0, [r4, #16]
    4b18:	6961      	ldr	r1, [r4, #20]
    4b1a:	f7ff ff67 	bl	49ec <__aeabi_lmul>
    4b1e:	2201      	movs	r2, #1
    4b20:	2300      	movs	r3, #0
    4b22:	1880      	adds	r0, r0, r2
    4b24:	4159      	adcs	r1, r3
    4b26:	6120      	str	r0, [r4, #16]
    4b28:	6161      	str	r1, [r4, #20]
    4b2a:	0048      	lsls	r0, r1, #1
    4b2c:	0840      	lsrs	r0, r0, #1
    4b2e:	bd10      	pop	{r4, pc}
    4b30:	4c957f2d 	.word	0x4c957f2d
    4b34:	5851f42d 	.word	0x5851f42d
    4b38:	2000006c 	.word	0x2000006c
    4b3c:	0000330e 	.word	0x0000330e
    4b40:	ffffabcd 	.word	0xffffabcd
    4b44:	00001234 	.word	0x00001234
    4b48:	ffffe66d 	.word	0xffffe66d
    4b4c:	ffffdeec 	.word	0xffffdeec

00004b50 <setbuf>:
    4b50:	b508      	push	{r3, lr}
    4b52:	424a      	negs	r2, r1
    4b54:	414a      	adcs	r2, r1
    4b56:	2380      	movs	r3, #128	; 0x80
    4b58:	0052      	lsls	r2, r2, #1
    4b5a:	00db      	lsls	r3, r3, #3
    4b5c:	f000 f802 	bl	4b64 <setvbuf>
    4b60:	bd08      	pop	{r3, pc}
	...

00004b64 <setvbuf>:
    4b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b66:	1c1e      	adds	r6, r3, #0
    4b68:	4b3c      	ldr	r3, [pc, #240]	; (4c5c <setvbuf+0xf8>)
    4b6a:	1c04      	adds	r4, r0, #0
    4b6c:	681d      	ldr	r5, [r3, #0]
    4b6e:	1c0f      	adds	r7, r1, #0
    4b70:	9201      	str	r2, [sp, #4]
    4b72:	2d00      	cmp	r5, #0
    4b74:	d005      	beq.n	4b82 <setvbuf+0x1e>
    4b76:	69aa      	ldr	r2, [r5, #24]
    4b78:	2a00      	cmp	r2, #0
    4b7a:	d102      	bne.n	4b82 <setvbuf+0x1e>
    4b7c:	1c28      	adds	r0, r5, #0
    4b7e:	f000 fd05 	bl	558c <__sinit>
    4b82:	4b37      	ldr	r3, [pc, #220]	; (4c60 <setvbuf+0xfc>)
    4b84:	429c      	cmp	r4, r3
    4b86:	d101      	bne.n	4b8c <setvbuf+0x28>
    4b88:	686c      	ldr	r4, [r5, #4]
    4b8a:	e008      	b.n	4b9e <setvbuf+0x3a>
    4b8c:	4b35      	ldr	r3, [pc, #212]	; (4c64 <setvbuf+0x100>)
    4b8e:	429c      	cmp	r4, r3
    4b90:	d101      	bne.n	4b96 <setvbuf+0x32>
    4b92:	68ac      	ldr	r4, [r5, #8]
    4b94:	e003      	b.n	4b9e <setvbuf+0x3a>
    4b96:	4b34      	ldr	r3, [pc, #208]	; (4c68 <setvbuf+0x104>)
    4b98:	429c      	cmp	r4, r3
    4b9a:	d100      	bne.n	4b9e <setvbuf+0x3a>
    4b9c:	68ec      	ldr	r4, [r5, #12]
    4b9e:	9b01      	ldr	r3, [sp, #4]
    4ba0:	2b02      	cmp	r3, #2
    4ba2:	d857      	bhi.n	4c54 <setvbuf+0xf0>
    4ba4:	2e00      	cmp	r6, #0
    4ba6:	db55      	blt.n	4c54 <setvbuf+0xf0>
    4ba8:	1c28      	adds	r0, r5, #0
    4baa:	1c21      	adds	r1, r4, #0
    4bac:	f000 fc6e 	bl	548c <_fflush_r>
    4bb0:	2300      	movs	r3, #0
    4bb2:	6063      	str	r3, [r4, #4]
    4bb4:	61a3      	str	r3, [r4, #24]
    4bb6:	89a3      	ldrh	r3, [r4, #12]
    4bb8:	061a      	lsls	r2, r3, #24
    4bba:	d503      	bpl.n	4bc4 <setvbuf+0x60>
    4bbc:	1c28      	adds	r0, r5, #0
    4bbe:	6921      	ldr	r1, [r4, #16]
    4bc0:	f000 fdba 	bl	5738 <_free_r>
    4bc4:	89a3      	ldrh	r3, [r4, #12]
    4bc6:	2283      	movs	r2, #131	; 0x83
    4bc8:	4393      	bics	r3, r2
    4bca:	81a3      	strh	r3, [r4, #12]
    4bcc:	9b01      	ldr	r3, [sp, #4]
    4bce:	2b02      	cmp	r3, #2
    4bd0:	d013      	beq.n	4bfa <setvbuf+0x96>
    4bd2:	2f00      	cmp	r7, #0
    4bd4:	d125      	bne.n	4c22 <setvbuf+0xbe>
    4bd6:	2e00      	cmp	r6, #0
    4bd8:	d101      	bne.n	4bde <setvbuf+0x7a>
    4bda:	2680      	movs	r6, #128	; 0x80
    4bdc:	00f6      	lsls	r6, r6, #3
    4bde:	1c30      	adds	r0, r6, #0
    4be0:	f000 fd94 	bl	570c <malloc>
    4be4:	1e07      	subs	r7, r0, #0
    4be6:	d118      	bne.n	4c1a <setvbuf+0xb6>
    4be8:	2080      	movs	r0, #128	; 0x80
    4bea:	00c0      	lsls	r0, r0, #3
    4bec:	f000 fd8e 	bl	570c <malloc>
    4bf0:	1e07      	subs	r7, r0, #0
    4bf2:	d110      	bne.n	4c16 <setvbuf+0xb2>
    4bf4:	2001      	movs	r0, #1
    4bf6:	4240      	negs	r0, r0
    4bf8:	e000      	b.n	4bfc <setvbuf+0x98>
    4bfa:	2000      	movs	r0, #0
    4bfc:	89a3      	ldrh	r3, [r4, #12]
    4bfe:	2202      	movs	r2, #2
    4c00:	4313      	orrs	r3, r2
    4c02:	81a3      	strh	r3, [r4, #12]
    4c04:	2300      	movs	r3, #0
    4c06:	60a3      	str	r3, [r4, #8]
    4c08:	1c23      	adds	r3, r4, #0
    4c0a:	3347      	adds	r3, #71	; 0x47
    4c0c:	6023      	str	r3, [r4, #0]
    4c0e:	6123      	str	r3, [r4, #16]
    4c10:	2301      	movs	r3, #1
    4c12:	6163      	str	r3, [r4, #20]
    4c14:	e020      	b.n	4c58 <setvbuf+0xf4>
    4c16:	2680      	movs	r6, #128	; 0x80
    4c18:	00f6      	lsls	r6, r6, #3
    4c1a:	89a3      	ldrh	r3, [r4, #12]
    4c1c:	2280      	movs	r2, #128	; 0x80
    4c1e:	4313      	orrs	r3, r2
    4c20:	81a3      	strh	r3, [r4, #12]
    4c22:	9a01      	ldr	r2, [sp, #4]
    4c24:	2a01      	cmp	r2, #1
    4c26:	d104      	bne.n	4c32 <setvbuf+0xce>
    4c28:	89a3      	ldrh	r3, [r4, #12]
    4c2a:	4313      	orrs	r3, r2
    4c2c:	81a3      	strh	r3, [r4, #12]
    4c2e:	4273      	negs	r3, r6
    4c30:	61a3      	str	r3, [r4, #24]
    4c32:	4b0e      	ldr	r3, [pc, #56]	; (4c6c <setvbuf+0x108>)
    4c34:	2000      	movs	r0, #0
    4c36:	62ab      	str	r3, [r5, #40]	; 0x28
    4c38:	89a3      	ldrh	r3, [r4, #12]
    4c3a:	6027      	str	r7, [r4, #0]
    4c3c:	6127      	str	r7, [r4, #16]
    4c3e:	6166      	str	r6, [r4, #20]
    4c40:	071a      	lsls	r2, r3, #28
    4c42:	d509      	bpl.n	4c58 <setvbuf+0xf4>
    4c44:	2203      	movs	r2, #3
    4c46:	4013      	ands	r3, r2
    4c48:	425a      	negs	r2, r3
    4c4a:	4153      	adcs	r3, r2
    4c4c:	425b      	negs	r3, r3
    4c4e:	401e      	ands	r6, r3
    4c50:	60a6      	str	r6, [r4, #8]
    4c52:	e001      	b.n	4c58 <setvbuf+0xf4>
    4c54:	2001      	movs	r0, #1
    4c56:	4240      	negs	r0, r0
    4c58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	2000006c 	.word	0x2000006c
    4c60:	00005b84 	.word	0x00005b84
    4c64:	00005ba4 	.word	0x00005ba4
    4c68:	00005bc4 	.word	0x00005bc4
    4c6c:	000054e5 	.word	0x000054e5

00004c70 <__sfputc_r>:
    4c70:	6893      	ldr	r3, [r2, #8]
    4c72:	b510      	push	{r4, lr}
    4c74:	3b01      	subs	r3, #1
    4c76:	6093      	str	r3, [r2, #8]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	da05      	bge.n	4c88 <__sfputc_r+0x18>
    4c7c:	6994      	ldr	r4, [r2, #24]
    4c7e:	42a3      	cmp	r3, r4
    4c80:	db08      	blt.n	4c94 <__sfputc_r+0x24>
    4c82:	b2cb      	uxtb	r3, r1
    4c84:	2b0a      	cmp	r3, #10
    4c86:	d005      	beq.n	4c94 <__sfputc_r+0x24>
    4c88:	6813      	ldr	r3, [r2, #0]
    4c8a:	1c58      	adds	r0, r3, #1
    4c8c:	6010      	str	r0, [r2, #0]
    4c8e:	7019      	strb	r1, [r3, #0]
    4c90:	b2c8      	uxtb	r0, r1
    4c92:	e001      	b.n	4c98 <__sfputc_r+0x28>
    4c94:	f000 faa6 	bl	51e4 <__swbuf_r>
    4c98:	bd10      	pop	{r4, pc}

00004c9a <__sfputs_r>:
    4c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c9c:	1c06      	adds	r6, r0, #0
    4c9e:	1c0f      	adds	r7, r1, #0
    4ca0:	1c14      	adds	r4, r2, #0
    4ca2:	18d5      	adds	r5, r2, r3
    4ca4:	42ac      	cmp	r4, r5
    4ca6:	d008      	beq.n	4cba <__sfputs_r+0x20>
    4ca8:	7821      	ldrb	r1, [r4, #0]
    4caa:	1c30      	adds	r0, r6, #0
    4cac:	1c3a      	adds	r2, r7, #0
    4cae:	f7ff ffdf 	bl	4c70 <__sfputc_r>
    4cb2:	3401      	adds	r4, #1
    4cb4:	1c43      	adds	r3, r0, #1
    4cb6:	d1f5      	bne.n	4ca4 <__sfputs_r+0xa>
    4cb8:	e000      	b.n	4cbc <__sfputs_r+0x22>
    4cba:	2000      	movs	r0, #0
    4cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004cc0 <_vfiprintf_r>:
    4cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cc2:	b09f      	sub	sp, #124	; 0x7c
    4cc4:	1c06      	adds	r6, r0, #0
    4cc6:	1c0f      	adds	r7, r1, #0
    4cc8:	9203      	str	r2, [sp, #12]
    4cca:	9305      	str	r3, [sp, #20]
    4ccc:	2800      	cmp	r0, #0
    4cce:	d004      	beq.n	4cda <_vfiprintf_r+0x1a>
    4cd0:	6981      	ldr	r1, [r0, #24]
    4cd2:	2900      	cmp	r1, #0
    4cd4:	d101      	bne.n	4cda <_vfiprintf_r+0x1a>
    4cd6:	f000 fc59 	bl	558c <__sinit>
    4cda:	4b75      	ldr	r3, [pc, #468]	; (4eb0 <_vfiprintf_r+0x1f0>)
    4cdc:	429f      	cmp	r7, r3
    4cde:	d101      	bne.n	4ce4 <_vfiprintf_r+0x24>
    4ce0:	6877      	ldr	r7, [r6, #4]
    4ce2:	e008      	b.n	4cf6 <_vfiprintf_r+0x36>
    4ce4:	4b73      	ldr	r3, [pc, #460]	; (4eb4 <_vfiprintf_r+0x1f4>)
    4ce6:	429f      	cmp	r7, r3
    4ce8:	d101      	bne.n	4cee <_vfiprintf_r+0x2e>
    4cea:	68b7      	ldr	r7, [r6, #8]
    4cec:	e003      	b.n	4cf6 <_vfiprintf_r+0x36>
    4cee:	4b72      	ldr	r3, [pc, #456]	; (4eb8 <_vfiprintf_r+0x1f8>)
    4cf0:	429f      	cmp	r7, r3
    4cf2:	d100      	bne.n	4cf6 <_vfiprintf_r+0x36>
    4cf4:	68f7      	ldr	r7, [r6, #12]
    4cf6:	89bb      	ldrh	r3, [r7, #12]
    4cf8:	071a      	lsls	r2, r3, #28
    4cfa:	d50a      	bpl.n	4d12 <_vfiprintf_r+0x52>
    4cfc:	693b      	ldr	r3, [r7, #16]
    4cfe:	2b00      	cmp	r3, #0
    4d00:	d007      	beq.n	4d12 <_vfiprintf_r+0x52>
    4d02:	ad06      	add	r5, sp, #24
    4d04:	2300      	movs	r3, #0
    4d06:	616b      	str	r3, [r5, #20]
    4d08:	2320      	movs	r3, #32
    4d0a:	766b      	strb	r3, [r5, #25]
    4d0c:	2330      	movs	r3, #48	; 0x30
    4d0e:	76ab      	strb	r3, [r5, #26]
    4d10:	e03b      	b.n	4d8a <_vfiprintf_r+0xca>
    4d12:	1c30      	adds	r0, r6, #0
    4d14:	1c39      	adds	r1, r7, #0
    4d16:	f000 fabd 	bl	5294 <__swsetup_r>
    4d1a:	2800      	cmp	r0, #0
    4d1c:	d0f1      	beq.n	4d02 <_vfiprintf_r+0x42>
    4d1e:	2001      	movs	r0, #1
    4d20:	4240      	negs	r0, r0
    4d22:	e0c2      	b.n	4eaa <_vfiprintf_r+0x1ea>
    4d24:	9a05      	ldr	r2, [sp, #20]
    4d26:	1d11      	adds	r1, r2, #4
    4d28:	6812      	ldr	r2, [r2, #0]
    4d2a:	9105      	str	r1, [sp, #20]
    4d2c:	2a00      	cmp	r2, #0
    4d2e:	db76      	blt.n	4e1e <_vfiprintf_r+0x15e>
    4d30:	9209      	str	r2, [sp, #36]	; 0x24
    4d32:	3401      	adds	r4, #1
    4d34:	7823      	ldrb	r3, [r4, #0]
    4d36:	2b2e      	cmp	r3, #46	; 0x2e
    4d38:	d100      	bne.n	4d3c <_vfiprintf_r+0x7c>
    4d3a:	e081      	b.n	4e40 <_vfiprintf_r+0x180>
    4d3c:	7821      	ldrb	r1, [r4, #0]
    4d3e:	485f      	ldr	r0, [pc, #380]	; (4ebc <_vfiprintf_r+0x1fc>)
    4d40:	2203      	movs	r2, #3
    4d42:	f000 fced 	bl	5720 <memchr>
    4d46:	2800      	cmp	r0, #0
    4d48:	d007      	beq.n	4d5a <_vfiprintf_r+0x9a>
    4d4a:	495c      	ldr	r1, [pc, #368]	; (4ebc <_vfiprintf_r+0x1fc>)
    4d4c:	682a      	ldr	r2, [r5, #0]
    4d4e:	1a43      	subs	r3, r0, r1
    4d50:	2040      	movs	r0, #64	; 0x40
    4d52:	4098      	lsls	r0, r3
    4d54:	4310      	orrs	r0, r2
    4d56:	6028      	str	r0, [r5, #0]
    4d58:	3401      	adds	r4, #1
    4d5a:	7821      	ldrb	r1, [r4, #0]
    4d5c:	1c63      	adds	r3, r4, #1
    4d5e:	4858      	ldr	r0, [pc, #352]	; (4ec0 <_vfiprintf_r+0x200>)
    4d60:	2206      	movs	r2, #6
    4d62:	9303      	str	r3, [sp, #12]
    4d64:	7629      	strb	r1, [r5, #24]
    4d66:	f000 fcdb 	bl	5720 <memchr>
    4d6a:	2800      	cmp	r0, #0
    4d6c:	d100      	bne.n	4d70 <_vfiprintf_r+0xb0>
    4d6e:	e08a      	b.n	4e86 <_vfiprintf_r+0x1c6>
    4d70:	4b54      	ldr	r3, [pc, #336]	; (4ec4 <_vfiprintf_r+0x204>)
    4d72:	2b00      	cmp	r3, #0
    4d74:	d17e      	bne.n	4e74 <_vfiprintf_r+0x1b4>
    4d76:	9b05      	ldr	r3, [sp, #20]
    4d78:	2207      	movs	r2, #7
    4d7a:	3307      	adds	r3, #7
    4d7c:	4393      	bics	r3, r2
    4d7e:	3308      	adds	r3, #8
    4d80:	9305      	str	r3, [sp, #20]
    4d82:	696a      	ldr	r2, [r5, #20]
    4d84:	9904      	ldr	r1, [sp, #16]
    4d86:	1853      	adds	r3, r2, r1
    4d88:	616b      	str	r3, [r5, #20]
    4d8a:	9c03      	ldr	r4, [sp, #12]
    4d8c:	7823      	ldrb	r3, [r4, #0]
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d104      	bne.n	4d9c <_vfiprintf_r+0xdc>
    4d92:	9903      	ldr	r1, [sp, #12]
    4d94:	1a61      	subs	r1, r4, r1
    4d96:	9102      	str	r1, [sp, #8]
    4d98:	d010      	beq.n	4dbc <_vfiprintf_r+0xfc>
    4d9a:	e003      	b.n	4da4 <_vfiprintf_r+0xe4>
    4d9c:	2b25      	cmp	r3, #37	; 0x25
    4d9e:	d0f8      	beq.n	4d92 <_vfiprintf_r+0xd2>
    4da0:	3401      	adds	r4, #1
    4da2:	e7f3      	b.n	4d8c <_vfiprintf_r+0xcc>
    4da4:	1c30      	adds	r0, r6, #0
    4da6:	1c39      	adds	r1, r7, #0
    4da8:	9a03      	ldr	r2, [sp, #12]
    4daa:	9b02      	ldr	r3, [sp, #8]
    4dac:	f7ff ff75 	bl	4c9a <__sfputs_r>
    4db0:	3001      	adds	r0, #1
    4db2:	d075      	beq.n	4ea0 <_vfiprintf_r+0x1e0>
    4db4:	696a      	ldr	r2, [r5, #20]
    4db6:	9902      	ldr	r1, [sp, #8]
    4db8:	1853      	adds	r3, r2, r1
    4dba:	616b      	str	r3, [r5, #20]
    4dbc:	7823      	ldrb	r3, [r4, #0]
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d06e      	beq.n	4ea0 <_vfiprintf_r+0x1e0>
    4dc2:	2201      	movs	r2, #1
    4dc4:	4252      	negs	r2, r2
    4dc6:	606a      	str	r2, [r5, #4]
    4dc8:	466a      	mov	r2, sp
    4dca:	2300      	movs	r3, #0
    4dcc:	325b      	adds	r2, #91	; 0x5b
    4dce:	3401      	adds	r4, #1
    4dd0:	602b      	str	r3, [r5, #0]
    4dd2:	60eb      	str	r3, [r5, #12]
    4dd4:	60ab      	str	r3, [r5, #8]
    4dd6:	7013      	strb	r3, [r2, #0]
    4dd8:	65ab      	str	r3, [r5, #88]	; 0x58
    4dda:	7821      	ldrb	r1, [r4, #0]
    4ddc:	483a      	ldr	r0, [pc, #232]	; (4ec8 <_vfiprintf_r+0x208>)
    4dde:	2205      	movs	r2, #5
    4de0:	f000 fc9e 	bl	5720 <memchr>
    4de4:	2800      	cmp	r0, #0
    4de6:	d008      	beq.n	4dfa <_vfiprintf_r+0x13a>
    4de8:	4a37      	ldr	r2, [pc, #220]	; (4ec8 <_vfiprintf_r+0x208>)
    4dea:	3401      	adds	r4, #1
    4dec:	1a83      	subs	r3, r0, r2
    4dee:	2001      	movs	r0, #1
    4df0:	4098      	lsls	r0, r3
    4df2:	682b      	ldr	r3, [r5, #0]
    4df4:	4318      	orrs	r0, r3
    4df6:	6028      	str	r0, [r5, #0]
    4df8:	e7ef      	b.n	4dda <_vfiprintf_r+0x11a>
    4dfa:	682b      	ldr	r3, [r5, #0]
    4dfc:	06d9      	lsls	r1, r3, #27
    4dfe:	d503      	bpl.n	4e08 <_vfiprintf_r+0x148>
    4e00:	466a      	mov	r2, sp
    4e02:	2120      	movs	r1, #32
    4e04:	325b      	adds	r2, #91	; 0x5b
    4e06:	7011      	strb	r1, [r2, #0]
    4e08:	071a      	lsls	r2, r3, #28
    4e0a:	d503      	bpl.n	4e14 <_vfiprintf_r+0x154>
    4e0c:	466a      	mov	r2, sp
    4e0e:	212b      	movs	r1, #43	; 0x2b
    4e10:	325b      	adds	r2, #91	; 0x5b
    4e12:	7011      	strb	r1, [r2, #0]
    4e14:	7822      	ldrb	r2, [r4, #0]
    4e16:	2a2a      	cmp	r2, #42	; 0x2a
    4e18:	d084      	beq.n	4d24 <_vfiprintf_r+0x64>
    4e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4e1c:	e005      	b.n	4e2a <_vfiprintf_r+0x16a>
    4e1e:	4252      	negs	r2, r2
    4e20:	60ea      	str	r2, [r5, #12]
    4e22:	2202      	movs	r2, #2
    4e24:	4313      	orrs	r3, r2
    4e26:	602b      	str	r3, [r5, #0]
    4e28:	e783      	b.n	4d32 <_vfiprintf_r+0x72>
    4e2a:	7822      	ldrb	r2, [r4, #0]
    4e2c:	3a30      	subs	r2, #48	; 0x30
    4e2e:	2a09      	cmp	r2, #9
    4e30:	d804      	bhi.n	4e3c <_vfiprintf_r+0x17c>
    4e32:	210a      	movs	r1, #10
    4e34:	434b      	muls	r3, r1
    4e36:	3401      	adds	r4, #1
    4e38:	189b      	adds	r3, r3, r2
    4e3a:	e7f6      	b.n	4e2a <_vfiprintf_r+0x16a>
    4e3c:	9309      	str	r3, [sp, #36]	; 0x24
    4e3e:	e779      	b.n	4d34 <_vfiprintf_r+0x74>
    4e40:	7863      	ldrb	r3, [r4, #1]
    4e42:	2b2a      	cmp	r3, #42	; 0x2a
    4e44:	d109      	bne.n	4e5a <_vfiprintf_r+0x19a>
    4e46:	9b05      	ldr	r3, [sp, #20]
    4e48:	3402      	adds	r4, #2
    4e4a:	1d1a      	adds	r2, r3, #4
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	9205      	str	r2, [sp, #20]
    4e50:	2b00      	cmp	r3, #0
    4e52:	da0d      	bge.n	4e70 <_vfiprintf_r+0x1b0>
    4e54:	2301      	movs	r3, #1
    4e56:	425b      	negs	r3, r3
    4e58:	e00a      	b.n	4e70 <_vfiprintf_r+0x1b0>
    4e5a:	3401      	adds	r4, #1
    4e5c:	2300      	movs	r3, #0
    4e5e:	7822      	ldrb	r2, [r4, #0]
    4e60:	3a30      	subs	r2, #48	; 0x30
    4e62:	2a09      	cmp	r2, #9
    4e64:	d804      	bhi.n	4e70 <_vfiprintf_r+0x1b0>
    4e66:	210a      	movs	r1, #10
    4e68:	434b      	muls	r3, r1
    4e6a:	3401      	adds	r4, #1
    4e6c:	189b      	adds	r3, r3, r2
    4e6e:	e7f6      	b.n	4e5e <_vfiprintf_r+0x19e>
    4e70:	9307      	str	r3, [sp, #28]
    4e72:	e763      	b.n	4d3c <_vfiprintf_r+0x7c>
    4e74:	ab05      	add	r3, sp, #20
    4e76:	9300      	str	r3, [sp, #0]
    4e78:	1c30      	adds	r0, r6, #0
    4e7a:	1c29      	adds	r1, r5, #0
    4e7c:	1c3a      	adds	r2, r7, #0
    4e7e:	4b13      	ldr	r3, [pc, #76]	; (4ecc <_vfiprintf_r+0x20c>)
    4e80:	e000      	b.n	4e84 <_vfiprintf_r+0x1c4>
    4e82:	bf00      	nop
    4e84:	e007      	b.n	4e96 <_vfiprintf_r+0x1d6>
    4e86:	ab05      	add	r3, sp, #20
    4e88:	9300      	str	r3, [sp, #0]
    4e8a:	1c30      	adds	r0, r6, #0
    4e8c:	1c29      	adds	r1, r5, #0
    4e8e:	1c3a      	adds	r2, r7, #0
    4e90:	4b0e      	ldr	r3, [pc, #56]	; (4ecc <_vfiprintf_r+0x20c>)
    4e92:	f000 f891 	bl	4fb8 <_printf_i>
    4e96:	9004      	str	r0, [sp, #16]
    4e98:	9904      	ldr	r1, [sp, #16]
    4e9a:	3101      	adds	r1, #1
    4e9c:	d000      	beq.n	4ea0 <_vfiprintf_r+0x1e0>
    4e9e:	e770      	b.n	4d82 <_vfiprintf_r+0xc2>
    4ea0:	89bb      	ldrh	r3, [r7, #12]
    4ea2:	065a      	lsls	r2, r3, #25
    4ea4:	d500      	bpl.n	4ea8 <_vfiprintf_r+0x1e8>
    4ea6:	e73a      	b.n	4d1e <_vfiprintf_r+0x5e>
    4ea8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4eaa:	b01f      	add	sp, #124	; 0x7c
    4eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4eae:	46c0      	nop			; (mov r8, r8)
    4eb0:	00005b84 	.word	0x00005b84
    4eb4:	00005ba4 	.word	0x00005ba4
    4eb8:	00005bc4 	.word	0x00005bc4
    4ebc:	00005b56 	.word	0x00005b56
    4ec0:	00005b5a 	.word	0x00005b5a
    4ec4:	00000000 	.word	0x00000000
    4ec8:	00005b50 	.word	0x00005b50
    4ecc:	00004c9b 	.word	0x00004c9b

00004ed0 <_printf_common>:
    4ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ed2:	1c15      	adds	r5, r2, #0
    4ed4:	9301      	str	r3, [sp, #4]
    4ed6:	690a      	ldr	r2, [r1, #16]
    4ed8:	688b      	ldr	r3, [r1, #8]
    4eda:	1c06      	adds	r6, r0, #0
    4edc:	1c0c      	adds	r4, r1, #0
    4ede:	4293      	cmp	r3, r2
    4ee0:	da00      	bge.n	4ee4 <_printf_common+0x14>
    4ee2:	1c13      	adds	r3, r2, #0
    4ee4:	1c22      	adds	r2, r4, #0
    4ee6:	602b      	str	r3, [r5, #0]
    4ee8:	3243      	adds	r2, #67	; 0x43
    4eea:	7812      	ldrb	r2, [r2, #0]
    4eec:	2a00      	cmp	r2, #0
    4eee:	d001      	beq.n	4ef4 <_printf_common+0x24>
    4ef0:	3301      	adds	r3, #1
    4ef2:	602b      	str	r3, [r5, #0]
    4ef4:	6820      	ldr	r0, [r4, #0]
    4ef6:	0680      	lsls	r0, r0, #26
    4ef8:	d502      	bpl.n	4f00 <_printf_common+0x30>
    4efa:	682b      	ldr	r3, [r5, #0]
    4efc:	3302      	adds	r3, #2
    4efe:	602b      	str	r3, [r5, #0]
    4f00:	6821      	ldr	r1, [r4, #0]
    4f02:	2706      	movs	r7, #6
    4f04:	400f      	ands	r7, r1
    4f06:	d01f      	beq.n	4f48 <_printf_common+0x78>
    4f08:	1c23      	adds	r3, r4, #0
    4f0a:	3343      	adds	r3, #67	; 0x43
    4f0c:	781b      	ldrb	r3, [r3, #0]
    4f0e:	1e5a      	subs	r2, r3, #1
    4f10:	4193      	sbcs	r3, r2
    4f12:	6822      	ldr	r2, [r4, #0]
    4f14:	0692      	lsls	r2, r2, #26
    4f16:	d51f      	bpl.n	4f58 <_printf_common+0x88>
    4f18:	18e1      	adds	r1, r4, r3
    4f1a:	3140      	adds	r1, #64	; 0x40
    4f1c:	2030      	movs	r0, #48	; 0x30
    4f1e:	70c8      	strb	r0, [r1, #3]
    4f20:	1c21      	adds	r1, r4, #0
    4f22:	1c5a      	adds	r2, r3, #1
    4f24:	3145      	adds	r1, #69	; 0x45
    4f26:	7809      	ldrb	r1, [r1, #0]
    4f28:	18a2      	adds	r2, r4, r2
    4f2a:	3240      	adds	r2, #64	; 0x40
    4f2c:	3302      	adds	r3, #2
    4f2e:	70d1      	strb	r1, [r2, #3]
    4f30:	e012      	b.n	4f58 <_printf_common+0x88>
    4f32:	1c22      	adds	r2, r4, #0
    4f34:	1c30      	adds	r0, r6, #0
    4f36:	9901      	ldr	r1, [sp, #4]
    4f38:	3219      	adds	r2, #25
    4f3a:	2301      	movs	r3, #1
    4f3c:	9f08      	ldr	r7, [sp, #32]
    4f3e:	47b8      	blx	r7
    4f40:	3001      	adds	r0, #1
    4f42:	d011      	beq.n	4f68 <_printf_common+0x98>
    4f44:	9f00      	ldr	r7, [sp, #0]
    4f46:	3701      	adds	r7, #1
    4f48:	9700      	str	r7, [sp, #0]
    4f4a:	68e0      	ldr	r0, [r4, #12]
    4f4c:	6829      	ldr	r1, [r5, #0]
    4f4e:	9f00      	ldr	r7, [sp, #0]
    4f50:	1a43      	subs	r3, r0, r1
    4f52:	429f      	cmp	r7, r3
    4f54:	dbed      	blt.n	4f32 <_printf_common+0x62>
    4f56:	e7d7      	b.n	4f08 <_printf_common+0x38>
    4f58:	1c22      	adds	r2, r4, #0
    4f5a:	1c30      	adds	r0, r6, #0
    4f5c:	9901      	ldr	r1, [sp, #4]
    4f5e:	3243      	adds	r2, #67	; 0x43
    4f60:	9f08      	ldr	r7, [sp, #32]
    4f62:	47b8      	blx	r7
    4f64:	3001      	adds	r0, #1
    4f66:	d102      	bne.n	4f6e <_printf_common+0x9e>
    4f68:	2001      	movs	r0, #1
    4f6a:	4240      	negs	r0, r0
    4f6c:	e023      	b.n	4fb6 <_printf_common+0xe6>
    4f6e:	6820      	ldr	r0, [r4, #0]
    4f70:	2106      	movs	r1, #6
    4f72:	682b      	ldr	r3, [r5, #0]
    4f74:	68e2      	ldr	r2, [r4, #12]
    4f76:	4001      	ands	r1, r0
    4f78:	2500      	movs	r5, #0
    4f7a:	2904      	cmp	r1, #4
    4f7c:	d103      	bne.n	4f86 <_printf_common+0xb6>
    4f7e:	1ad5      	subs	r5, r2, r3
    4f80:	43eb      	mvns	r3, r5
    4f82:	17db      	asrs	r3, r3, #31
    4f84:	401d      	ands	r5, r3
    4f86:	68a2      	ldr	r2, [r4, #8]
    4f88:	6923      	ldr	r3, [r4, #16]
    4f8a:	429a      	cmp	r2, r3
    4f8c:	dd01      	ble.n	4f92 <_printf_common+0xc2>
    4f8e:	1ad3      	subs	r3, r2, r3
    4f90:	18ed      	adds	r5, r5, r3
    4f92:	2700      	movs	r7, #0
    4f94:	9700      	str	r7, [sp, #0]
    4f96:	9f00      	ldr	r7, [sp, #0]
    4f98:	42af      	cmp	r7, r5
    4f9a:	da0b      	bge.n	4fb4 <_printf_common+0xe4>
    4f9c:	1c22      	adds	r2, r4, #0
    4f9e:	1c30      	adds	r0, r6, #0
    4fa0:	9901      	ldr	r1, [sp, #4]
    4fa2:	321a      	adds	r2, #26
    4fa4:	2301      	movs	r3, #1
    4fa6:	9f08      	ldr	r7, [sp, #32]
    4fa8:	47b8      	blx	r7
    4faa:	3001      	adds	r0, #1
    4fac:	d0dc      	beq.n	4f68 <_printf_common+0x98>
    4fae:	9f00      	ldr	r7, [sp, #0]
    4fb0:	3701      	adds	r7, #1
    4fb2:	e7ef      	b.n	4f94 <_printf_common+0xc4>
    4fb4:	2000      	movs	r0, #0
    4fb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004fb8 <_printf_i>:
    4fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fba:	1c0d      	adds	r5, r1, #0
    4fbc:	b08b      	sub	sp, #44	; 0x2c
    4fbe:	3543      	adds	r5, #67	; 0x43
    4fc0:	9206      	str	r2, [sp, #24]
    4fc2:	9005      	str	r0, [sp, #20]
    4fc4:	9307      	str	r3, [sp, #28]
    4fc6:	9504      	str	r5, [sp, #16]
    4fc8:	7e0b      	ldrb	r3, [r1, #24]
    4fca:	1c0c      	adds	r4, r1, #0
    4fcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4fce:	2b6e      	cmp	r3, #110	; 0x6e
    4fd0:	d100      	bne.n	4fd4 <_printf_i+0x1c>
    4fd2:	e0a7      	b.n	5124 <_printf_i+0x16c>
    4fd4:	d811      	bhi.n	4ffa <_printf_i+0x42>
    4fd6:	2b63      	cmp	r3, #99	; 0x63
    4fd8:	d022      	beq.n	5020 <_printf_i+0x68>
    4fda:	d809      	bhi.n	4ff0 <_printf_i+0x38>
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d100      	bne.n	4fe2 <_printf_i+0x2a>
    4fe0:	e0b0      	b.n	5144 <_printf_i+0x18c>
    4fe2:	2b58      	cmp	r3, #88	; 0x58
    4fe4:	d000      	beq.n	4fe8 <_printf_i+0x30>
    4fe6:	e0c0      	b.n	516a <_printf_i+0x1b2>
    4fe8:	3145      	adds	r1, #69	; 0x45
    4fea:	700b      	strb	r3, [r1, #0]
    4fec:	4d7b      	ldr	r5, [pc, #492]	; (51dc <_printf_i+0x224>)
    4fee:	e04e      	b.n	508e <_printf_i+0xd6>
    4ff0:	2b64      	cmp	r3, #100	; 0x64
    4ff2:	d01c      	beq.n	502e <_printf_i+0x76>
    4ff4:	2b69      	cmp	r3, #105	; 0x69
    4ff6:	d01a      	beq.n	502e <_printf_i+0x76>
    4ff8:	e0b7      	b.n	516a <_printf_i+0x1b2>
    4ffa:	2b73      	cmp	r3, #115	; 0x73
    4ffc:	d100      	bne.n	5000 <_printf_i+0x48>
    4ffe:	e0a5      	b.n	514c <_printf_i+0x194>
    5000:	d809      	bhi.n	5016 <_printf_i+0x5e>
    5002:	2b6f      	cmp	r3, #111	; 0x6f
    5004:	d029      	beq.n	505a <_printf_i+0xa2>
    5006:	2b70      	cmp	r3, #112	; 0x70
    5008:	d000      	beq.n	500c <_printf_i+0x54>
    500a:	e0ae      	b.n	516a <_printf_i+0x1b2>
    500c:	680e      	ldr	r6, [r1, #0]
    500e:	2320      	movs	r3, #32
    5010:	4333      	orrs	r3, r6
    5012:	600b      	str	r3, [r1, #0]
    5014:	e036      	b.n	5084 <_printf_i+0xcc>
    5016:	2b75      	cmp	r3, #117	; 0x75
    5018:	d01f      	beq.n	505a <_printf_i+0xa2>
    501a:	2b78      	cmp	r3, #120	; 0x78
    501c:	d032      	beq.n	5084 <_printf_i+0xcc>
    501e:	e0a4      	b.n	516a <_printf_i+0x1b2>
    5020:	6813      	ldr	r3, [r2, #0]
    5022:	1c0d      	adds	r5, r1, #0
    5024:	1d19      	adds	r1, r3, #4
    5026:	3542      	adds	r5, #66	; 0x42
    5028:	6011      	str	r1, [r2, #0]
    502a:	681b      	ldr	r3, [r3, #0]
    502c:	e09f      	b.n	516e <_printf_i+0x1b6>
    502e:	6821      	ldr	r1, [r4, #0]
    5030:	6813      	ldr	r3, [r2, #0]
    5032:	060e      	lsls	r6, r1, #24
    5034:	d503      	bpl.n	503e <_printf_i+0x86>
    5036:	1d19      	adds	r1, r3, #4
    5038:	6011      	str	r1, [r2, #0]
    503a:	681e      	ldr	r6, [r3, #0]
    503c:	e005      	b.n	504a <_printf_i+0x92>
    503e:	0648      	lsls	r0, r1, #25
    5040:	d5f9      	bpl.n	5036 <_printf_i+0x7e>
    5042:	1d19      	adds	r1, r3, #4
    5044:	6011      	str	r1, [r2, #0]
    5046:	2100      	movs	r1, #0
    5048:	5e5e      	ldrsh	r6, [r3, r1]
    504a:	4b64      	ldr	r3, [pc, #400]	; (51dc <_printf_i+0x224>)
    504c:	2e00      	cmp	r6, #0
    504e:	da3b      	bge.n	50c8 <_printf_i+0x110>
    5050:	9d04      	ldr	r5, [sp, #16]
    5052:	222d      	movs	r2, #45	; 0x2d
    5054:	4276      	negs	r6, r6
    5056:	702a      	strb	r2, [r5, #0]
    5058:	e036      	b.n	50c8 <_printf_i+0x110>
    505a:	6821      	ldr	r1, [r4, #0]
    505c:	6813      	ldr	r3, [r2, #0]
    505e:	060e      	lsls	r6, r1, #24
    5060:	d503      	bpl.n	506a <_printf_i+0xb2>
    5062:	1d19      	adds	r1, r3, #4
    5064:	6011      	str	r1, [r2, #0]
    5066:	681e      	ldr	r6, [r3, #0]
    5068:	e004      	b.n	5074 <_printf_i+0xbc>
    506a:	0648      	lsls	r0, r1, #25
    506c:	d5f9      	bpl.n	5062 <_printf_i+0xaa>
    506e:	1d19      	adds	r1, r3, #4
    5070:	881e      	ldrh	r6, [r3, #0]
    5072:	6011      	str	r1, [r2, #0]
    5074:	4b59      	ldr	r3, [pc, #356]	; (51dc <_printf_i+0x224>)
    5076:	7e22      	ldrb	r2, [r4, #24]
    5078:	9303      	str	r3, [sp, #12]
    507a:	2708      	movs	r7, #8
    507c:	2a6f      	cmp	r2, #111	; 0x6f
    507e:	d01e      	beq.n	50be <_printf_i+0x106>
    5080:	270a      	movs	r7, #10
    5082:	e01c      	b.n	50be <_printf_i+0x106>
    5084:	1c23      	adds	r3, r4, #0
    5086:	2178      	movs	r1, #120	; 0x78
    5088:	3345      	adds	r3, #69	; 0x45
    508a:	4d55      	ldr	r5, [pc, #340]	; (51e0 <_printf_i+0x228>)
    508c:	7019      	strb	r1, [r3, #0]
    508e:	6811      	ldr	r1, [r2, #0]
    5090:	6823      	ldr	r3, [r4, #0]
    5092:	1d08      	adds	r0, r1, #4
    5094:	9503      	str	r5, [sp, #12]
    5096:	6010      	str	r0, [r2, #0]
    5098:	061e      	lsls	r6, r3, #24
    509a:	d501      	bpl.n	50a0 <_printf_i+0xe8>
    509c:	680e      	ldr	r6, [r1, #0]
    509e:	e002      	b.n	50a6 <_printf_i+0xee>
    50a0:	0658      	lsls	r0, r3, #25
    50a2:	d5fb      	bpl.n	509c <_printf_i+0xe4>
    50a4:	880e      	ldrh	r6, [r1, #0]
    50a6:	07d9      	lsls	r1, r3, #31
    50a8:	d502      	bpl.n	50b0 <_printf_i+0xf8>
    50aa:	2220      	movs	r2, #32
    50ac:	4313      	orrs	r3, r2
    50ae:	6023      	str	r3, [r4, #0]
    50b0:	2710      	movs	r7, #16
    50b2:	2e00      	cmp	r6, #0
    50b4:	d103      	bne.n	50be <_printf_i+0x106>
    50b6:	6822      	ldr	r2, [r4, #0]
    50b8:	2320      	movs	r3, #32
    50ba:	439a      	bics	r2, r3
    50bc:	6022      	str	r2, [r4, #0]
    50be:	1c23      	adds	r3, r4, #0
    50c0:	2200      	movs	r2, #0
    50c2:	3343      	adds	r3, #67	; 0x43
    50c4:	701a      	strb	r2, [r3, #0]
    50c6:	e001      	b.n	50cc <_printf_i+0x114>
    50c8:	9303      	str	r3, [sp, #12]
    50ca:	270a      	movs	r7, #10
    50cc:	6863      	ldr	r3, [r4, #4]
    50ce:	60a3      	str	r3, [r4, #8]
    50d0:	2b00      	cmp	r3, #0
    50d2:	db03      	blt.n	50dc <_printf_i+0x124>
    50d4:	6825      	ldr	r5, [r4, #0]
    50d6:	2204      	movs	r2, #4
    50d8:	4395      	bics	r5, r2
    50da:	6025      	str	r5, [r4, #0]
    50dc:	2e00      	cmp	r6, #0
    50de:	d102      	bne.n	50e6 <_printf_i+0x12e>
    50e0:	9d04      	ldr	r5, [sp, #16]
    50e2:	2b00      	cmp	r3, #0
    50e4:	d00e      	beq.n	5104 <_printf_i+0x14c>
    50e6:	9d04      	ldr	r5, [sp, #16]
    50e8:	1c30      	adds	r0, r6, #0
    50ea:	1c39      	adds	r1, r7, #0
    50ec:	f7ff fc72 	bl	49d4 <__aeabi_uidivmod>
    50f0:	9803      	ldr	r0, [sp, #12]
    50f2:	3d01      	subs	r5, #1
    50f4:	5c43      	ldrb	r3, [r0, r1]
    50f6:	1c30      	adds	r0, r6, #0
    50f8:	702b      	strb	r3, [r5, #0]
    50fa:	1c39      	adds	r1, r7, #0
    50fc:	f7ff fc26 	bl	494c <__aeabi_uidiv>
    5100:	1e06      	subs	r6, r0, #0
    5102:	d1f1      	bne.n	50e8 <_printf_i+0x130>
    5104:	2f08      	cmp	r7, #8
    5106:	d109      	bne.n	511c <_printf_i+0x164>
    5108:	6821      	ldr	r1, [r4, #0]
    510a:	07c9      	lsls	r1, r1, #31
    510c:	d506      	bpl.n	511c <_printf_i+0x164>
    510e:	6862      	ldr	r2, [r4, #4]
    5110:	6923      	ldr	r3, [r4, #16]
    5112:	429a      	cmp	r2, r3
    5114:	dc02      	bgt.n	511c <_printf_i+0x164>
    5116:	3d01      	subs	r5, #1
    5118:	2330      	movs	r3, #48	; 0x30
    511a:	702b      	strb	r3, [r5, #0]
    511c:	9e04      	ldr	r6, [sp, #16]
    511e:	1b73      	subs	r3, r6, r5
    5120:	6123      	str	r3, [r4, #16]
    5122:	e02a      	b.n	517a <_printf_i+0x1c2>
    5124:	6808      	ldr	r0, [r1, #0]
    5126:	6813      	ldr	r3, [r2, #0]
    5128:	6949      	ldr	r1, [r1, #20]
    512a:	0605      	lsls	r5, r0, #24
    512c:	d504      	bpl.n	5138 <_printf_i+0x180>
    512e:	1d18      	adds	r0, r3, #4
    5130:	6010      	str	r0, [r2, #0]
    5132:	681b      	ldr	r3, [r3, #0]
    5134:	6019      	str	r1, [r3, #0]
    5136:	e005      	b.n	5144 <_printf_i+0x18c>
    5138:	0646      	lsls	r6, r0, #25
    513a:	d5f8      	bpl.n	512e <_printf_i+0x176>
    513c:	1d18      	adds	r0, r3, #4
    513e:	6010      	str	r0, [r2, #0]
    5140:	681b      	ldr	r3, [r3, #0]
    5142:	8019      	strh	r1, [r3, #0]
    5144:	2300      	movs	r3, #0
    5146:	6123      	str	r3, [r4, #16]
    5148:	9d04      	ldr	r5, [sp, #16]
    514a:	e016      	b.n	517a <_printf_i+0x1c2>
    514c:	6813      	ldr	r3, [r2, #0]
    514e:	1d19      	adds	r1, r3, #4
    5150:	6011      	str	r1, [r2, #0]
    5152:	681d      	ldr	r5, [r3, #0]
    5154:	1c28      	adds	r0, r5, #0
    5156:	f000 fbe9 	bl	592c <strlen>
    515a:	6863      	ldr	r3, [r4, #4]
    515c:	6120      	str	r0, [r4, #16]
    515e:	4298      	cmp	r0, r3
    5160:	d900      	bls.n	5164 <_printf_i+0x1ac>
    5162:	6123      	str	r3, [r4, #16]
    5164:	6920      	ldr	r0, [r4, #16]
    5166:	6060      	str	r0, [r4, #4]
    5168:	e004      	b.n	5174 <_printf_i+0x1bc>
    516a:	1c25      	adds	r5, r4, #0
    516c:	3542      	adds	r5, #66	; 0x42
    516e:	702b      	strb	r3, [r5, #0]
    5170:	2301      	movs	r3, #1
    5172:	6123      	str	r3, [r4, #16]
    5174:	9e04      	ldr	r6, [sp, #16]
    5176:	2300      	movs	r3, #0
    5178:	7033      	strb	r3, [r6, #0]
    517a:	9e07      	ldr	r6, [sp, #28]
    517c:	9805      	ldr	r0, [sp, #20]
    517e:	9600      	str	r6, [sp, #0]
    5180:	1c21      	adds	r1, r4, #0
    5182:	aa09      	add	r2, sp, #36	; 0x24
    5184:	9b06      	ldr	r3, [sp, #24]
    5186:	f7ff fea3 	bl	4ed0 <_printf_common>
    518a:	3001      	adds	r0, #1
    518c:	d102      	bne.n	5194 <_printf_i+0x1dc>
    518e:	2001      	movs	r0, #1
    5190:	4240      	negs	r0, r0
    5192:	e021      	b.n	51d8 <_printf_i+0x220>
    5194:	1c2a      	adds	r2, r5, #0
    5196:	9805      	ldr	r0, [sp, #20]
    5198:	9906      	ldr	r1, [sp, #24]
    519a:	6923      	ldr	r3, [r4, #16]
    519c:	9d07      	ldr	r5, [sp, #28]
    519e:	47a8      	blx	r5
    51a0:	3001      	adds	r0, #1
    51a2:	d0f4      	beq.n	518e <_printf_i+0x1d6>
    51a4:	6826      	ldr	r6, [r4, #0]
    51a6:	07b6      	lsls	r6, r6, #30
    51a8:	d405      	bmi.n	51b6 <_printf_i+0x1fe>
    51aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51ac:	68e0      	ldr	r0, [r4, #12]
    51ae:	4298      	cmp	r0, r3
    51b0:	da12      	bge.n	51d8 <_printf_i+0x220>
    51b2:	1c18      	adds	r0, r3, #0
    51b4:	e010      	b.n	51d8 <_printf_i+0x220>
    51b6:	2500      	movs	r5, #0
    51b8:	68e0      	ldr	r0, [r4, #12]
    51ba:	9909      	ldr	r1, [sp, #36]	; 0x24
    51bc:	1a43      	subs	r3, r0, r1
    51be:	429d      	cmp	r5, r3
    51c0:	daf3      	bge.n	51aa <_printf_i+0x1f2>
    51c2:	1c22      	adds	r2, r4, #0
    51c4:	9805      	ldr	r0, [sp, #20]
    51c6:	9906      	ldr	r1, [sp, #24]
    51c8:	3219      	adds	r2, #25
    51ca:	2301      	movs	r3, #1
    51cc:	9e07      	ldr	r6, [sp, #28]
    51ce:	47b0      	blx	r6
    51d0:	3001      	adds	r0, #1
    51d2:	d0dc      	beq.n	518e <_printf_i+0x1d6>
    51d4:	3501      	adds	r5, #1
    51d6:	e7ef      	b.n	51b8 <_printf_i+0x200>
    51d8:	b00b      	add	sp, #44	; 0x2c
    51da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51dc:	00005b61 	.word	0x00005b61
    51e0:	00005b72 	.word	0x00005b72

000051e4 <__swbuf_r>:
    51e4:	b570      	push	{r4, r5, r6, lr}
    51e6:	1c05      	adds	r5, r0, #0
    51e8:	1c0e      	adds	r6, r1, #0
    51ea:	1c14      	adds	r4, r2, #0
    51ec:	2800      	cmp	r0, #0
    51ee:	d004      	beq.n	51fa <__swbuf_r+0x16>
    51f0:	6982      	ldr	r2, [r0, #24]
    51f2:	2a00      	cmp	r2, #0
    51f4:	d101      	bne.n	51fa <__swbuf_r+0x16>
    51f6:	f000 f9c9 	bl	558c <__sinit>
    51fa:	4b23      	ldr	r3, [pc, #140]	; (5288 <__swbuf_r+0xa4>)
    51fc:	429c      	cmp	r4, r3
    51fe:	d101      	bne.n	5204 <__swbuf_r+0x20>
    5200:	686c      	ldr	r4, [r5, #4]
    5202:	e008      	b.n	5216 <__swbuf_r+0x32>
    5204:	4b21      	ldr	r3, [pc, #132]	; (528c <__swbuf_r+0xa8>)
    5206:	429c      	cmp	r4, r3
    5208:	d101      	bne.n	520e <__swbuf_r+0x2a>
    520a:	68ac      	ldr	r4, [r5, #8]
    520c:	e003      	b.n	5216 <__swbuf_r+0x32>
    520e:	4b20      	ldr	r3, [pc, #128]	; (5290 <__swbuf_r+0xac>)
    5210:	429c      	cmp	r4, r3
    5212:	d100      	bne.n	5216 <__swbuf_r+0x32>
    5214:	68ec      	ldr	r4, [r5, #12]
    5216:	69a3      	ldr	r3, [r4, #24]
    5218:	60a3      	str	r3, [r4, #8]
    521a:	89a3      	ldrh	r3, [r4, #12]
    521c:	071a      	lsls	r2, r3, #28
    521e:	d50a      	bpl.n	5236 <__swbuf_r+0x52>
    5220:	6923      	ldr	r3, [r4, #16]
    5222:	2b00      	cmp	r3, #0
    5224:	d007      	beq.n	5236 <__swbuf_r+0x52>
    5226:	6822      	ldr	r2, [r4, #0]
    5228:	6923      	ldr	r3, [r4, #16]
    522a:	b2f6      	uxtb	r6, r6
    522c:	1ad0      	subs	r0, r2, r3
    522e:	6962      	ldr	r2, [r4, #20]
    5230:	4290      	cmp	r0, r2
    5232:	db0f      	blt.n	5254 <__swbuf_r+0x70>
    5234:	e008      	b.n	5248 <__swbuf_r+0x64>
    5236:	1c28      	adds	r0, r5, #0
    5238:	1c21      	adds	r1, r4, #0
    523a:	f000 f82b 	bl	5294 <__swsetup_r>
    523e:	2800      	cmp	r0, #0
    5240:	d0f1      	beq.n	5226 <__swbuf_r+0x42>
    5242:	2001      	movs	r0, #1
    5244:	4240      	negs	r0, r0
    5246:	e01d      	b.n	5284 <__swbuf_r+0xa0>
    5248:	1c28      	adds	r0, r5, #0
    524a:	1c21      	adds	r1, r4, #0
    524c:	f000 f91e 	bl	548c <_fflush_r>
    5250:	2800      	cmp	r0, #0
    5252:	d1f6      	bne.n	5242 <__swbuf_r+0x5e>
    5254:	68a3      	ldr	r3, [r4, #8]
    5256:	3001      	adds	r0, #1
    5258:	3b01      	subs	r3, #1
    525a:	60a3      	str	r3, [r4, #8]
    525c:	6823      	ldr	r3, [r4, #0]
    525e:	1c5a      	adds	r2, r3, #1
    5260:	6022      	str	r2, [r4, #0]
    5262:	701e      	strb	r6, [r3, #0]
    5264:	6963      	ldr	r3, [r4, #20]
    5266:	4298      	cmp	r0, r3
    5268:	d005      	beq.n	5276 <__swbuf_r+0x92>
    526a:	89a3      	ldrh	r3, [r4, #12]
    526c:	1c30      	adds	r0, r6, #0
    526e:	07da      	lsls	r2, r3, #31
    5270:	d508      	bpl.n	5284 <__swbuf_r+0xa0>
    5272:	2e0a      	cmp	r6, #10
    5274:	d106      	bne.n	5284 <__swbuf_r+0xa0>
    5276:	1c28      	adds	r0, r5, #0
    5278:	1c21      	adds	r1, r4, #0
    527a:	f000 f907 	bl	548c <_fflush_r>
    527e:	2800      	cmp	r0, #0
    5280:	d1df      	bne.n	5242 <__swbuf_r+0x5e>
    5282:	1c30      	adds	r0, r6, #0
    5284:	bd70      	pop	{r4, r5, r6, pc}
    5286:	46c0      	nop			; (mov r8, r8)
    5288:	00005b84 	.word	0x00005b84
    528c:	00005ba4 	.word	0x00005ba4
    5290:	00005bc4 	.word	0x00005bc4

00005294 <__swsetup_r>:
    5294:	4b34      	ldr	r3, [pc, #208]	; (5368 <__swsetup_r+0xd4>)
    5296:	b570      	push	{r4, r5, r6, lr}
    5298:	681d      	ldr	r5, [r3, #0]
    529a:	1c06      	adds	r6, r0, #0
    529c:	1c0c      	adds	r4, r1, #0
    529e:	2d00      	cmp	r5, #0
    52a0:	d005      	beq.n	52ae <__swsetup_r+0x1a>
    52a2:	69a9      	ldr	r1, [r5, #24]
    52a4:	2900      	cmp	r1, #0
    52a6:	d102      	bne.n	52ae <__swsetup_r+0x1a>
    52a8:	1c28      	adds	r0, r5, #0
    52aa:	f000 f96f 	bl	558c <__sinit>
    52ae:	4b2f      	ldr	r3, [pc, #188]	; (536c <__swsetup_r+0xd8>)
    52b0:	429c      	cmp	r4, r3
    52b2:	d101      	bne.n	52b8 <__swsetup_r+0x24>
    52b4:	686c      	ldr	r4, [r5, #4]
    52b6:	e008      	b.n	52ca <__swsetup_r+0x36>
    52b8:	4b2d      	ldr	r3, [pc, #180]	; (5370 <__swsetup_r+0xdc>)
    52ba:	429c      	cmp	r4, r3
    52bc:	d101      	bne.n	52c2 <__swsetup_r+0x2e>
    52be:	68ac      	ldr	r4, [r5, #8]
    52c0:	e003      	b.n	52ca <__swsetup_r+0x36>
    52c2:	4b2c      	ldr	r3, [pc, #176]	; (5374 <__swsetup_r+0xe0>)
    52c4:	429c      	cmp	r4, r3
    52c6:	d100      	bne.n	52ca <__swsetup_r+0x36>
    52c8:	68ec      	ldr	r4, [r5, #12]
    52ca:	89a2      	ldrh	r2, [r4, #12]
    52cc:	b293      	uxth	r3, r2
    52ce:	0719      	lsls	r1, r3, #28
    52d0:	d421      	bmi.n	5316 <__swsetup_r+0x82>
    52d2:	06d9      	lsls	r1, r3, #27
    52d4:	d405      	bmi.n	52e2 <__swsetup_r+0x4e>
    52d6:	2309      	movs	r3, #9
    52d8:	6033      	str	r3, [r6, #0]
    52da:	2340      	movs	r3, #64	; 0x40
    52dc:	431a      	orrs	r2, r3
    52de:	81a2      	strh	r2, [r4, #12]
    52e0:	e03f      	b.n	5362 <__swsetup_r+0xce>
    52e2:	075a      	lsls	r2, r3, #29
    52e4:	d513      	bpl.n	530e <__swsetup_r+0x7a>
    52e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    52e8:	2900      	cmp	r1, #0
    52ea:	d008      	beq.n	52fe <__swsetup_r+0x6a>
    52ec:	1c23      	adds	r3, r4, #0
    52ee:	3344      	adds	r3, #68	; 0x44
    52f0:	4299      	cmp	r1, r3
    52f2:	d002      	beq.n	52fa <__swsetup_r+0x66>
    52f4:	1c30      	adds	r0, r6, #0
    52f6:	f000 fa1f 	bl	5738 <_free_r>
    52fa:	2300      	movs	r3, #0
    52fc:	6363      	str	r3, [r4, #52]	; 0x34
    52fe:	89a3      	ldrh	r3, [r4, #12]
    5300:	2224      	movs	r2, #36	; 0x24
    5302:	4393      	bics	r3, r2
    5304:	81a3      	strh	r3, [r4, #12]
    5306:	2300      	movs	r3, #0
    5308:	6063      	str	r3, [r4, #4]
    530a:	6923      	ldr	r3, [r4, #16]
    530c:	6023      	str	r3, [r4, #0]
    530e:	89a3      	ldrh	r3, [r4, #12]
    5310:	2208      	movs	r2, #8
    5312:	4313      	orrs	r3, r2
    5314:	81a3      	strh	r3, [r4, #12]
    5316:	6921      	ldr	r1, [r4, #16]
    5318:	2900      	cmp	r1, #0
    531a:	d10b      	bne.n	5334 <__swsetup_r+0xa0>
    531c:	89a3      	ldrh	r3, [r4, #12]
    531e:	22a0      	movs	r2, #160	; 0xa0
    5320:	0092      	lsls	r2, r2, #2
    5322:	401a      	ands	r2, r3
    5324:	2380      	movs	r3, #128	; 0x80
    5326:	009b      	lsls	r3, r3, #2
    5328:	429a      	cmp	r2, r3
    532a:	d003      	beq.n	5334 <__swsetup_r+0xa0>
    532c:	1c30      	adds	r0, r6, #0
    532e:	1c21      	adds	r1, r4, #0
    5330:	f000 f99c 	bl	566c <__smakebuf_r>
    5334:	89a3      	ldrh	r3, [r4, #12]
    5336:	2201      	movs	r2, #1
    5338:	401a      	ands	r2, r3
    533a:	d005      	beq.n	5348 <__swsetup_r+0xb4>
    533c:	6961      	ldr	r1, [r4, #20]
    533e:	2200      	movs	r2, #0
    5340:	60a2      	str	r2, [r4, #8]
    5342:	424a      	negs	r2, r1
    5344:	61a2      	str	r2, [r4, #24]
    5346:	e003      	b.n	5350 <__swsetup_r+0xbc>
    5348:	0799      	lsls	r1, r3, #30
    534a:	d400      	bmi.n	534e <__swsetup_r+0xba>
    534c:	6962      	ldr	r2, [r4, #20]
    534e:	60a2      	str	r2, [r4, #8]
    5350:	6922      	ldr	r2, [r4, #16]
    5352:	2000      	movs	r0, #0
    5354:	4282      	cmp	r2, r0
    5356:	d106      	bne.n	5366 <__swsetup_r+0xd2>
    5358:	0619      	lsls	r1, r3, #24
    535a:	d504      	bpl.n	5366 <__swsetup_r+0xd2>
    535c:	2240      	movs	r2, #64	; 0x40
    535e:	4313      	orrs	r3, r2
    5360:	81a3      	strh	r3, [r4, #12]
    5362:	2001      	movs	r0, #1
    5364:	4240      	negs	r0, r0
    5366:	bd70      	pop	{r4, r5, r6, pc}
    5368:	2000006c 	.word	0x2000006c
    536c:	00005b84 	.word	0x00005b84
    5370:	00005ba4 	.word	0x00005ba4
    5374:	00005bc4 	.word	0x00005bc4

00005378 <__sflush_r>:
    5378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    537a:	898b      	ldrh	r3, [r1, #12]
    537c:	1c05      	adds	r5, r0, #0
    537e:	1c0c      	adds	r4, r1, #0
    5380:	0719      	lsls	r1, r3, #28
    5382:	d45e      	bmi.n	5442 <__sflush_r+0xca>
    5384:	6862      	ldr	r2, [r4, #4]
    5386:	2a00      	cmp	r2, #0
    5388:	dc02      	bgt.n	5390 <__sflush_r+0x18>
    538a:	6c27      	ldr	r7, [r4, #64]	; 0x40
    538c:	2f00      	cmp	r7, #0
    538e:	dd1a      	ble.n	53c6 <__sflush_r+0x4e>
    5390:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5392:	2f00      	cmp	r7, #0
    5394:	d017      	beq.n	53c6 <__sflush_r+0x4e>
    5396:	2200      	movs	r2, #0
    5398:	682e      	ldr	r6, [r5, #0]
    539a:	602a      	str	r2, [r5, #0]
    539c:	2280      	movs	r2, #128	; 0x80
    539e:	0152      	lsls	r2, r2, #5
    53a0:	401a      	ands	r2, r3
    53a2:	d001      	beq.n	53a8 <__sflush_r+0x30>
    53a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    53a6:	e015      	b.n	53d4 <__sflush_r+0x5c>
    53a8:	1c28      	adds	r0, r5, #0
    53aa:	6a21      	ldr	r1, [r4, #32]
    53ac:	2301      	movs	r3, #1
    53ae:	47b8      	blx	r7
    53b0:	1c02      	adds	r2, r0, #0
    53b2:	1c41      	adds	r1, r0, #1
    53b4:	d10e      	bne.n	53d4 <__sflush_r+0x5c>
    53b6:	682b      	ldr	r3, [r5, #0]
    53b8:	2b00      	cmp	r3, #0
    53ba:	d00b      	beq.n	53d4 <__sflush_r+0x5c>
    53bc:	2b1d      	cmp	r3, #29
    53be:	d001      	beq.n	53c4 <__sflush_r+0x4c>
    53c0:	2b16      	cmp	r3, #22
    53c2:	d102      	bne.n	53ca <__sflush_r+0x52>
    53c4:	602e      	str	r6, [r5, #0]
    53c6:	2000      	movs	r0, #0
    53c8:	e05e      	b.n	5488 <__sflush_r+0x110>
    53ca:	89a3      	ldrh	r3, [r4, #12]
    53cc:	2140      	movs	r1, #64	; 0x40
    53ce:	430b      	orrs	r3, r1
    53d0:	81a3      	strh	r3, [r4, #12]
    53d2:	e059      	b.n	5488 <__sflush_r+0x110>
    53d4:	89a3      	ldrh	r3, [r4, #12]
    53d6:	075f      	lsls	r7, r3, #29
    53d8:	d506      	bpl.n	53e8 <__sflush_r+0x70>
    53da:	6861      	ldr	r1, [r4, #4]
    53dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    53de:	1a52      	subs	r2, r2, r1
    53e0:	2b00      	cmp	r3, #0
    53e2:	d001      	beq.n	53e8 <__sflush_r+0x70>
    53e4:	6c27      	ldr	r7, [r4, #64]	; 0x40
    53e6:	1bd2      	subs	r2, r2, r7
    53e8:	1c28      	adds	r0, r5, #0
    53ea:	6a21      	ldr	r1, [r4, #32]
    53ec:	2300      	movs	r3, #0
    53ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    53f0:	47b8      	blx	r7
    53f2:	89a2      	ldrh	r2, [r4, #12]
    53f4:	1c41      	adds	r1, r0, #1
    53f6:	d106      	bne.n	5406 <__sflush_r+0x8e>
    53f8:	682b      	ldr	r3, [r5, #0]
    53fa:	2b00      	cmp	r3, #0
    53fc:	d003      	beq.n	5406 <__sflush_r+0x8e>
    53fe:	2b1d      	cmp	r3, #29
    5400:	d001      	beq.n	5406 <__sflush_r+0x8e>
    5402:	2b16      	cmp	r3, #22
    5404:	d119      	bne.n	543a <__sflush_r+0xc2>
    5406:	2300      	movs	r3, #0
    5408:	6063      	str	r3, [r4, #4]
    540a:	6923      	ldr	r3, [r4, #16]
    540c:	6023      	str	r3, [r4, #0]
    540e:	04d7      	lsls	r7, r2, #19
    5410:	d505      	bpl.n	541e <__sflush_r+0xa6>
    5412:	1c41      	adds	r1, r0, #1
    5414:	d102      	bne.n	541c <__sflush_r+0xa4>
    5416:	682a      	ldr	r2, [r5, #0]
    5418:	2a00      	cmp	r2, #0
    541a:	d100      	bne.n	541e <__sflush_r+0xa6>
    541c:	6560      	str	r0, [r4, #84]	; 0x54
    541e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5420:	602e      	str	r6, [r5, #0]
    5422:	2900      	cmp	r1, #0
    5424:	d0cf      	beq.n	53c6 <__sflush_r+0x4e>
    5426:	1c23      	adds	r3, r4, #0
    5428:	3344      	adds	r3, #68	; 0x44
    542a:	4299      	cmp	r1, r3
    542c:	d002      	beq.n	5434 <__sflush_r+0xbc>
    542e:	1c28      	adds	r0, r5, #0
    5430:	f000 f982 	bl	5738 <_free_r>
    5434:	2000      	movs	r0, #0
    5436:	6360      	str	r0, [r4, #52]	; 0x34
    5438:	e026      	b.n	5488 <__sflush_r+0x110>
    543a:	2340      	movs	r3, #64	; 0x40
    543c:	431a      	orrs	r2, r3
    543e:	81a2      	strh	r2, [r4, #12]
    5440:	e022      	b.n	5488 <__sflush_r+0x110>
    5442:	6926      	ldr	r6, [r4, #16]
    5444:	2e00      	cmp	r6, #0
    5446:	d0be      	beq.n	53c6 <__sflush_r+0x4e>
    5448:	6827      	ldr	r7, [r4, #0]
    544a:	2200      	movs	r2, #0
    544c:	1bbf      	subs	r7, r7, r6
    544e:	9701      	str	r7, [sp, #4]
    5450:	6026      	str	r6, [r4, #0]
    5452:	0799      	lsls	r1, r3, #30
    5454:	d100      	bne.n	5458 <__sflush_r+0xe0>
    5456:	6962      	ldr	r2, [r4, #20]
    5458:	60a2      	str	r2, [r4, #8]
    545a:	9f01      	ldr	r7, [sp, #4]
    545c:	2f00      	cmp	r7, #0
    545e:	ddb2      	ble.n	53c6 <__sflush_r+0x4e>
    5460:	1c28      	adds	r0, r5, #0
    5462:	6a21      	ldr	r1, [r4, #32]
    5464:	1c32      	adds	r2, r6, #0
    5466:	9b01      	ldr	r3, [sp, #4]
    5468:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    546a:	47b8      	blx	r7
    546c:	2800      	cmp	r0, #0
    546e:	dc06      	bgt.n	547e <__sflush_r+0x106>
    5470:	89a3      	ldrh	r3, [r4, #12]
    5472:	2240      	movs	r2, #64	; 0x40
    5474:	4313      	orrs	r3, r2
    5476:	2001      	movs	r0, #1
    5478:	81a3      	strh	r3, [r4, #12]
    547a:	4240      	negs	r0, r0
    547c:	e004      	b.n	5488 <__sflush_r+0x110>
    547e:	9f01      	ldr	r7, [sp, #4]
    5480:	1836      	adds	r6, r6, r0
    5482:	1a3f      	subs	r7, r7, r0
    5484:	9701      	str	r7, [sp, #4]
    5486:	e7e8      	b.n	545a <__sflush_r+0xe2>
    5488:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000548c <_fflush_r>:
    548c:	690a      	ldr	r2, [r1, #16]
    548e:	b538      	push	{r3, r4, r5, lr}
    5490:	1c05      	adds	r5, r0, #0
    5492:	1c0c      	adds	r4, r1, #0
    5494:	2a00      	cmp	r2, #0
    5496:	d101      	bne.n	549c <_fflush_r+0x10>
    5498:	2000      	movs	r0, #0
    549a:	e01c      	b.n	54d6 <_fflush_r+0x4a>
    549c:	2800      	cmp	r0, #0
    549e:	d004      	beq.n	54aa <_fflush_r+0x1e>
    54a0:	6983      	ldr	r3, [r0, #24]
    54a2:	2b00      	cmp	r3, #0
    54a4:	d101      	bne.n	54aa <_fflush_r+0x1e>
    54a6:	f000 f871 	bl	558c <__sinit>
    54aa:	4b0b      	ldr	r3, [pc, #44]	; (54d8 <_fflush_r+0x4c>)
    54ac:	429c      	cmp	r4, r3
    54ae:	d101      	bne.n	54b4 <_fflush_r+0x28>
    54b0:	686c      	ldr	r4, [r5, #4]
    54b2:	e008      	b.n	54c6 <_fflush_r+0x3a>
    54b4:	4b09      	ldr	r3, [pc, #36]	; (54dc <_fflush_r+0x50>)
    54b6:	429c      	cmp	r4, r3
    54b8:	d101      	bne.n	54be <_fflush_r+0x32>
    54ba:	68ac      	ldr	r4, [r5, #8]
    54bc:	e003      	b.n	54c6 <_fflush_r+0x3a>
    54be:	4b08      	ldr	r3, [pc, #32]	; (54e0 <_fflush_r+0x54>)
    54c0:	429c      	cmp	r4, r3
    54c2:	d100      	bne.n	54c6 <_fflush_r+0x3a>
    54c4:	68ec      	ldr	r4, [r5, #12]
    54c6:	220c      	movs	r2, #12
    54c8:	5ea3      	ldrsh	r3, [r4, r2]
    54ca:	2b00      	cmp	r3, #0
    54cc:	d0e4      	beq.n	5498 <_fflush_r+0xc>
    54ce:	1c28      	adds	r0, r5, #0
    54d0:	1c21      	adds	r1, r4, #0
    54d2:	f7ff ff51 	bl	5378 <__sflush_r>
    54d6:	bd38      	pop	{r3, r4, r5, pc}
    54d8:	00005b84 	.word	0x00005b84
    54dc:	00005ba4 	.word	0x00005ba4
    54e0:	00005bc4 	.word	0x00005bc4

000054e4 <_cleanup_r>:
    54e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54e6:	1c04      	adds	r4, r0, #0
    54e8:	1c07      	adds	r7, r0, #0
    54ea:	3448      	adds	r4, #72	; 0x48
    54ec:	2c00      	cmp	r4, #0
    54ee:	d012      	beq.n	5516 <_cleanup_r+0x32>
    54f0:	68a5      	ldr	r5, [r4, #8]
    54f2:	6866      	ldr	r6, [r4, #4]
    54f4:	3e01      	subs	r6, #1
    54f6:	d40c      	bmi.n	5512 <_cleanup_r+0x2e>
    54f8:	89ab      	ldrh	r3, [r5, #12]
    54fa:	2b01      	cmp	r3, #1
    54fc:	d907      	bls.n	550e <_cleanup_r+0x2a>
    54fe:	220e      	movs	r2, #14
    5500:	5eab      	ldrsh	r3, [r5, r2]
    5502:	3301      	adds	r3, #1
    5504:	d003      	beq.n	550e <_cleanup_r+0x2a>
    5506:	1c38      	adds	r0, r7, #0
    5508:	1c29      	adds	r1, r5, #0
    550a:	f7ff ffbf 	bl	548c <_fflush_r>
    550e:	3568      	adds	r5, #104	; 0x68
    5510:	e7f0      	b.n	54f4 <_cleanup_r+0x10>
    5512:	6824      	ldr	r4, [r4, #0]
    5514:	e7ea      	b.n	54ec <_cleanup_r+0x8>
    5516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005518 <std.isra.0>:
    5518:	2300      	movs	r3, #0
    551a:	b510      	push	{r4, lr}
    551c:	1c04      	adds	r4, r0, #0
    551e:	6003      	str	r3, [r0, #0]
    5520:	6043      	str	r3, [r0, #4]
    5522:	6083      	str	r3, [r0, #8]
    5524:	8181      	strh	r1, [r0, #12]
    5526:	6643      	str	r3, [r0, #100]	; 0x64
    5528:	81c2      	strh	r2, [r0, #14]
    552a:	6103      	str	r3, [r0, #16]
    552c:	6143      	str	r3, [r0, #20]
    552e:	6183      	str	r3, [r0, #24]
    5530:	1c19      	adds	r1, r3, #0
    5532:	2208      	movs	r2, #8
    5534:	305c      	adds	r0, #92	; 0x5c
    5536:	f7ff faaa 	bl	4a8e <memset>
    553a:	4b05      	ldr	r3, [pc, #20]	; (5550 <std.isra.0+0x38>)
    553c:	6224      	str	r4, [r4, #32]
    553e:	6263      	str	r3, [r4, #36]	; 0x24
    5540:	4b04      	ldr	r3, [pc, #16]	; (5554 <std.isra.0+0x3c>)
    5542:	62a3      	str	r3, [r4, #40]	; 0x28
    5544:	4b04      	ldr	r3, [pc, #16]	; (5558 <std.isra.0+0x40>)
    5546:	62e3      	str	r3, [r4, #44]	; 0x2c
    5548:	4b04      	ldr	r3, [pc, #16]	; (555c <std.isra.0+0x44>)
    554a:	6323      	str	r3, [r4, #48]	; 0x30
    554c:	bd10      	pop	{r4, pc}
    554e:	46c0      	nop			; (mov r8, r8)
    5550:	00005895 	.word	0x00005895
    5554:	000058bd 	.word	0x000058bd
    5558:	000058f5 	.word	0x000058f5
    555c:	00005921 	.word	0x00005921

00005560 <__sfmoreglue>:
    5560:	b570      	push	{r4, r5, r6, lr}
    5562:	1e4b      	subs	r3, r1, #1
    5564:	2568      	movs	r5, #104	; 0x68
    5566:	435d      	muls	r5, r3
    5568:	1c0e      	adds	r6, r1, #0
    556a:	1c29      	adds	r1, r5, #0
    556c:	3174      	adds	r1, #116	; 0x74
    556e:	f000 f92b 	bl	57c8 <_malloc_r>
    5572:	1e04      	subs	r4, r0, #0
    5574:	d008      	beq.n	5588 <__sfmoreglue+0x28>
    5576:	2100      	movs	r1, #0
    5578:	6001      	str	r1, [r0, #0]
    557a:	6046      	str	r6, [r0, #4]
    557c:	1c2a      	adds	r2, r5, #0
    557e:	300c      	adds	r0, #12
    5580:	60a0      	str	r0, [r4, #8]
    5582:	3268      	adds	r2, #104	; 0x68
    5584:	f7ff fa83 	bl	4a8e <memset>
    5588:	1c20      	adds	r0, r4, #0
    558a:	bd70      	pop	{r4, r5, r6, pc}

0000558c <__sinit>:
    558c:	6983      	ldr	r3, [r0, #24]
    558e:	b513      	push	{r0, r1, r4, lr}
    5590:	1c04      	adds	r4, r0, #0
    5592:	2b00      	cmp	r3, #0
    5594:	d127      	bne.n	55e6 <__sinit+0x5a>
    5596:	6483      	str	r3, [r0, #72]	; 0x48
    5598:	64c3      	str	r3, [r0, #76]	; 0x4c
    559a:	6503      	str	r3, [r0, #80]	; 0x50
    559c:	4b12      	ldr	r3, [pc, #72]	; (55e8 <__sinit+0x5c>)
    559e:	4a13      	ldr	r2, [pc, #76]	; (55ec <__sinit+0x60>)
    55a0:	681b      	ldr	r3, [r3, #0]
    55a2:	6282      	str	r2, [r0, #40]	; 0x28
    55a4:	4298      	cmp	r0, r3
    55a6:	d101      	bne.n	55ac <__sinit+0x20>
    55a8:	2301      	movs	r3, #1
    55aa:	6183      	str	r3, [r0, #24]
    55ac:	1c20      	adds	r0, r4, #0
    55ae:	f000 f81f 	bl	55f0 <__sfp>
    55b2:	6060      	str	r0, [r4, #4]
    55b4:	1c20      	adds	r0, r4, #0
    55b6:	f000 f81b 	bl	55f0 <__sfp>
    55ba:	60a0      	str	r0, [r4, #8]
    55bc:	1c20      	adds	r0, r4, #0
    55be:	f000 f817 	bl	55f0 <__sfp>
    55c2:	2104      	movs	r1, #4
    55c4:	60e0      	str	r0, [r4, #12]
    55c6:	2200      	movs	r2, #0
    55c8:	6860      	ldr	r0, [r4, #4]
    55ca:	f7ff ffa5 	bl	5518 <std.isra.0>
    55ce:	68a0      	ldr	r0, [r4, #8]
    55d0:	2109      	movs	r1, #9
    55d2:	2201      	movs	r2, #1
    55d4:	f7ff ffa0 	bl	5518 <std.isra.0>
    55d8:	68e0      	ldr	r0, [r4, #12]
    55da:	2112      	movs	r1, #18
    55dc:	2202      	movs	r2, #2
    55de:	f7ff ff9b 	bl	5518 <std.isra.0>
    55e2:	2301      	movs	r3, #1
    55e4:	61a3      	str	r3, [r4, #24]
    55e6:	bd13      	pop	{r0, r1, r4, pc}
    55e8:	00005b4c 	.word	0x00005b4c
    55ec:	000054e5 	.word	0x000054e5

000055f0 <__sfp>:
    55f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55f2:	4b1d      	ldr	r3, [pc, #116]	; (5668 <__sfp+0x78>)
    55f4:	1c07      	adds	r7, r0, #0
    55f6:	681e      	ldr	r6, [r3, #0]
    55f8:	69b2      	ldr	r2, [r6, #24]
    55fa:	2a00      	cmp	r2, #0
    55fc:	d102      	bne.n	5604 <__sfp+0x14>
    55fe:	1c30      	adds	r0, r6, #0
    5600:	f7ff ffc4 	bl	558c <__sinit>
    5604:	3648      	adds	r6, #72	; 0x48
    5606:	68b4      	ldr	r4, [r6, #8]
    5608:	6873      	ldr	r3, [r6, #4]
    560a:	3b01      	subs	r3, #1
    560c:	d405      	bmi.n	561a <__sfp+0x2a>
    560e:	220c      	movs	r2, #12
    5610:	5ea5      	ldrsh	r5, [r4, r2]
    5612:	2d00      	cmp	r5, #0
    5614:	d010      	beq.n	5638 <__sfp+0x48>
    5616:	3468      	adds	r4, #104	; 0x68
    5618:	e7f7      	b.n	560a <__sfp+0x1a>
    561a:	6833      	ldr	r3, [r6, #0]
    561c:	2b00      	cmp	r3, #0
    561e:	d106      	bne.n	562e <__sfp+0x3e>
    5620:	1c38      	adds	r0, r7, #0
    5622:	2104      	movs	r1, #4
    5624:	f7ff ff9c 	bl	5560 <__sfmoreglue>
    5628:	6030      	str	r0, [r6, #0]
    562a:	2800      	cmp	r0, #0
    562c:	d001      	beq.n	5632 <__sfp+0x42>
    562e:	6836      	ldr	r6, [r6, #0]
    5630:	e7e9      	b.n	5606 <__sfp+0x16>
    5632:	230c      	movs	r3, #12
    5634:	603b      	str	r3, [r7, #0]
    5636:	e016      	b.n	5666 <__sfp+0x76>
    5638:	2301      	movs	r3, #1
    563a:	425b      	negs	r3, r3
    563c:	81e3      	strh	r3, [r4, #14]
    563e:	1c20      	adds	r0, r4, #0
    5640:	2301      	movs	r3, #1
    5642:	81a3      	strh	r3, [r4, #12]
    5644:	6665      	str	r5, [r4, #100]	; 0x64
    5646:	6025      	str	r5, [r4, #0]
    5648:	60a5      	str	r5, [r4, #8]
    564a:	6065      	str	r5, [r4, #4]
    564c:	6125      	str	r5, [r4, #16]
    564e:	6165      	str	r5, [r4, #20]
    5650:	61a5      	str	r5, [r4, #24]
    5652:	305c      	adds	r0, #92	; 0x5c
    5654:	1c29      	adds	r1, r5, #0
    5656:	2208      	movs	r2, #8
    5658:	f7ff fa19 	bl	4a8e <memset>
    565c:	6365      	str	r5, [r4, #52]	; 0x34
    565e:	63a5      	str	r5, [r4, #56]	; 0x38
    5660:	64a5      	str	r5, [r4, #72]	; 0x48
    5662:	64e5      	str	r5, [r4, #76]	; 0x4c
    5664:	1c20      	adds	r0, r4, #0
    5666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5668:	00005b4c 	.word	0x00005b4c

0000566c <__smakebuf_r>:
    566c:	b5f0      	push	{r4, r5, r6, r7, lr}
    566e:	898b      	ldrh	r3, [r1, #12]
    5670:	b091      	sub	sp, #68	; 0x44
    5672:	1c05      	adds	r5, r0, #0
    5674:	1c0c      	adds	r4, r1, #0
    5676:	079a      	lsls	r2, r3, #30
    5678:	d425      	bmi.n	56c6 <__smakebuf_r+0x5a>
    567a:	230e      	movs	r3, #14
    567c:	5ec9      	ldrsh	r1, [r1, r3]
    567e:	2900      	cmp	r1, #0
    5680:	da06      	bge.n	5690 <__smakebuf_r+0x24>
    5682:	89a7      	ldrh	r7, [r4, #12]
    5684:	2380      	movs	r3, #128	; 0x80
    5686:	401f      	ands	r7, r3
    5688:	d00f      	beq.n	56aa <__smakebuf_r+0x3e>
    568a:	2700      	movs	r7, #0
    568c:	2640      	movs	r6, #64	; 0x40
    568e:	e00e      	b.n	56ae <__smakebuf_r+0x42>
    5690:	aa01      	add	r2, sp, #4
    5692:	f000 f979 	bl	5988 <_fstat_r>
    5696:	2800      	cmp	r0, #0
    5698:	dbf3      	blt.n	5682 <__smakebuf_r+0x16>
    569a:	9b02      	ldr	r3, [sp, #8]
    569c:	27f0      	movs	r7, #240	; 0xf0
    569e:	023f      	lsls	r7, r7, #8
    56a0:	4a18      	ldr	r2, [pc, #96]	; (5704 <__smakebuf_r+0x98>)
    56a2:	401f      	ands	r7, r3
    56a4:	18bf      	adds	r7, r7, r2
    56a6:	427b      	negs	r3, r7
    56a8:	415f      	adcs	r7, r3
    56aa:	2680      	movs	r6, #128	; 0x80
    56ac:	00f6      	lsls	r6, r6, #3
    56ae:	1c28      	adds	r0, r5, #0
    56b0:	1c31      	adds	r1, r6, #0
    56b2:	f000 f889 	bl	57c8 <_malloc_r>
    56b6:	2800      	cmp	r0, #0
    56b8:	d10c      	bne.n	56d4 <__smakebuf_r+0x68>
    56ba:	89a3      	ldrh	r3, [r4, #12]
    56bc:	059a      	lsls	r2, r3, #22
    56be:	d41f      	bmi.n	5700 <__smakebuf_r+0x94>
    56c0:	2202      	movs	r2, #2
    56c2:	4313      	orrs	r3, r2
    56c4:	81a3      	strh	r3, [r4, #12]
    56c6:	1c23      	adds	r3, r4, #0
    56c8:	3347      	adds	r3, #71	; 0x47
    56ca:	6023      	str	r3, [r4, #0]
    56cc:	6123      	str	r3, [r4, #16]
    56ce:	2301      	movs	r3, #1
    56d0:	6163      	str	r3, [r4, #20]
    56d2:	e015      	b.n	5700 <__smakebuf_r+0x94>
    56d4:	4b0c      	ldr	r3, [pc, #48]	; (5708 <__smakebuf_r+0x9c>)
    56d6:	2280      	movs	r2, #128	; 0x80
    56d8:	62ab      	str	r3, [r5, #40]	; 0x28
    56da:	89a3      	ldrh	r3, [r4, #12]
    56dc:	6020      	str	r0, [r4, #0]
    56de:	4313      	orrs	r3, r2
    56e0:	81a3      	strh	r3, [r4, #12]
    56e2:	6120      	str	r0, [r4, #16]
    56e4:	6166      	str	r6, [r4, #20]
    56e6:	2f00      	cmp	r7, #0
    56e8:	d00a      	beq.n	5700 <__smakebuf_r+0x94>
    56ea:	230e      	movs	r3, #14
    56ec:	5ee1      	ldrsh	r1, [r4, r3]
    56ee:	1c28      	adds	r0, r5, #0
    56f0:	f000 f95c 	bl	59ac <_isatty_r>
    56f4:	2800      	cmp	r0, #0
    56f6:	d003      	beq.n	5700 <__smakebuf_r+0x94>
    56f8:	89a3      	ldrh	r3, [r4, #12]
    56fa:	2201      	movs	r2, #1
    56fc:	4313      	orrs	r3, r2
    56fe:	81a3      	strh	r3, [r4, #12]
    5700:	b011      	add	sp, #68	; 0x44
    5702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5704:	ffffe000 	.word	0xffffe000
    5708:	000054e5 	.word	0x000054e5

0000570c <malloc>:
    570c:	b508      	push	{r3, lr}
    570e:	4b03      	ldr	r3, [pc, #12]	; (571c <malloc+0x10>)
    5710:	1c01      	adds	r1, r0, #0
    5712:	6818      	ldr	r0, [r3, #0]
    5714:	f000 f858 	bl	57c8 <_malloc_r>
    5718:	bd08      	pop	{r3, pc}
    571a:	46c0      	nop			; (mov r8, r8)
    571c:	2000006c 	.word	0x2000006c

00005720 <memchr>:
    5720:	b2c9      	uxtb	r1, r1
    5722:	1882      	adds	r2, r0, r2
    5724:	4290      	cmp	r0, r2
    5726:	d004      	beq.n	5732 <memchr+0x12>
    5728:	7803      	ldrb	r3, [r0, #0]
    572a:	428b      	cmp	r3, r1
    572c:	d002      	beq.n	5734 <memchr+0x14>
    572e:	3001      	adds	r0, #1
    5730:	e7f8      	b.n	5724 <memchr+0x4>
    5732:	2000      	movs	r0, #0
    5734:	4770      	bx	lr
	...

00005738 <_free_r>:
    5738:	b530      	push	{r4, r5, lr}
    573a:	2900      	cmp	r1, #0
    573c:	d040      	beq.n	57c0 <_free_r+0x88>
    573e:	3904      	subs	r1, #4
    5740:	680b      	ldr	r3, [r1, #0]
    5742:	2b00      	cmp	r3, #0
    5744:	da00      	bge.n	5748 <_free_r+0x10>
    5746:	18c9      	adds	r1, r1, r3
    5748:	4a1e      	ldr	r2, [pc, #120]	; (57c4 <_free_r+0x8c>)
    574a:	6813      	ldr	r3, [r2, #0]
    574c:	1c14      	adds	r4, r2, #0
    574e:	2b00      	cmp	r3, #0
    5750:	d102      	bne.n	5758 <_free_r+0x20>
    5752:	604b      	str	r3, [r1, #4]
    5754:	6011      	str	r1, [r2, #0]
    5756:	e033      	b.n	57c0 <_free_r+0x88>
    5758:	4299      	cmp	r1, r3
    575a:	d20f      	bcs.n	577c <_free_r+0x44>
    575c:	6808      	ldr	r0, [r1, #0]
    575e:	180a      	adds	r2, r1, r0
    5760:	429a      	cmp	r2, r3
    5762:	d105      	bne.n	5770 <_free_r+0x38>
    5764:	6813      	ldr	r3, [r2, #0]
    5766:	6852      	ldr	r2, [r2, #4]
    5768:	18c0      	adds	r0, r0, r3
    576a:	6008      	str	r0, [r1, #0]
    576c:	604a      	str	r2, [r1, #4]
    576e:	e000      	b.n	5772 <_free_r+0x3a>
    5770:	604b      	str	r3, [r1, #4]
    5772:	6021      	str	r1, [r4, #0]
    5774:	e024      	b.n	57c0 <_free_r+0x88>
    5776:	428a      	cmp	r2, r1
    5778:	d803      	bhi.n	5782 <_free_r+0x4a>
    577a:	1c13      	adds	r3, r2, #0
    577c:	685a      	ldr	r2, [r3, #4]
    577e:	2a00      	cmp	r2, #0
    5780:	d1f9      	bne.n	5776 <_free_r+0x3e>
    5782:	681d      	ldr	r5, [r3, #0]
    5784:	195c      	adds	r4, r3, r5
    5786:	428c      	cmp	r4, r1
    5788:	d10b      	bne.n	57a2 <_free_r+0x6a>
    578a:	6809      	ldr	r1, [r1, #0]
    578c:	1869      	adds	r1, r5, r1
    578e:	1858      	adds	r0, r3, r1
    5790:	6019      	str	r1, [r3, #0]
    5792:	4290      	cmp	r0, r2
    5794:	d114      	bne.n	57c0 <_free_r+0x88>
    5796:	6814      	ldr	r4, [r2, #0]
    5798:	6852      	ldr	r2, [r2, #4]
    579a:	1909      	adds	r1, r1, r4
    579c:	6019      	str	r1, [r3, #0]
    579e:	605a      	str	r2, [r3, #4]
    57a0:	e00e      	b.n	57c0 <_free_r+0x88>
    57a2:	428c      	cmp	r4, r1
    57a4:	d902      	bls.n	57ac <_free_r+0x74>
    57a6:	230c      	movs	r3, #12
    57a8:	6003      	str	r3, [r0, #0]
    57aa:	e009      	b.n	57c0 <_free_r+0x88>
    57ac:	6808      	ldr	r0, [r1, #0]
    57ae:	180c      	adds	r4, r1, r0
    57b0:	4294      	cmp	r4, r2
    57b2:	d103      	bne.n	57bc <_free_r+0x84>
    57b4:	6814      	ldr	r4, [r2, #0]
    57b6:	6852      	ldr	r2, [r2, #4]
    57b8:	1900      	adds	r0, r0, r4
    57ba:	6008      	str	r0, [r1, #0]
    57bc:	604a      	str	r2, [r1, #4]
    57be:	6059      	str	r1, [r3, #4]
    57c0:	bd30      	pop	{r4, r5, pc}
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	20000874 	.word	0x20000874

000057c8 <_malloc_r>:
    57c8:	b570      	push	{r4, r5, r6, lr}
    57ca:	2303      	movs	r3, #3
    57cc:	1ccd      	adds	r5, r1, #3
    57ce:	439d      	bics	r5, r3
    57d0:	3508      	adds	r5, #8
    57d2:	1c06      	adds	r6, r0, #0
    57d4:	2d0c      	cmp	r5, #12
    57d6:	d201      	bcs.n	57dc <_malloc_r+0x14>
    57d8:	250c      	movs	r5, #12
    57da:	e001      	b.n	57e0 <_malloc_r+0x18>
    57dc:	2d00      	cmp	r5, #0
    57de:	db3f      	blt.n	5860 <_malloc_r+0x98>
    57e0:	428d      	cmp	r5, r1
    57e2:	d33d      	bcc.n	5860 <_malloc_r+0x98>
    57e4:	4b20      	ldr	r3, [pc, #128]	; (5868 <_malloc_r+0xa0>)
    57e6:	681c      	ldr	r4, [r3, #0]
    57e8:	1c1a      	adds	r2, r3, #0
    57ea:	1c21      	adds	r1, r4, #0
    57ec:	2900      	cmp	r1, #0
    57ee:	d013      	beq.n	5818 <_malloc_r+0x50>
    57f0:	6808      	ldr	r0, [r1, #0]
    57f2:	1b43      	subs	r3, r0, r5
    57f4:	d40d      	bmi.n	5812 <_malloc_r+0x4a>
    57f6:	2b0b      	cmp	r3, #11
    57f8:	d902      	bls.n	5800 <_malloc_r+0x38>
    57fa:	600b      	str	r3, [r1, #0]
    57fc:	18cc      	adds	r4, r1, r3
    57fe:	e01e      	b.n	583e <_malloc_r+0x76>
    5800:	428c      	cmp	r4, r1
    5802:	d102      	bne.n	580a <_malloc_r+0x42>
    5804:	6863      	ldr	r3, [r4, #4]
    5806:	6013      	str	r3, [r2, #0]
    5808:	e01a      	b.n	5840 <_malloc_r+0x78>
    580a:	6848      	ldr	r0, [r1, #4]
    580c:	6060      	str	r0, [r4, #4]
    580e:	1c0c      	adds	r4, r1, #0
    5810:	e016      	b.n	5840 <_malloc_r+0x78>
    5812:	1c0c      	adds	r4, r1, #0
    5814:	6849      	ldr	r1, [r1, #4]
    5816:	e7e9      	b.n	57ec <_malloc_r+0x24>
    5818:	4c14      	ldr	r4, [pc, #80]	; (586c <_malloc_r+0xa4>)
    581a:	6820      	ldr	r0, [r4, #0]
    581c:	2800      	cmp	r0, #0
    581e:	d103      	bne.n	5828 <_malloc_r+0x60>
    5820:	1c30      	adds	r0, r6, #0
    5822:	f000 f825 	bl	5870 <_sbrk_r>
    5826:	6020      	str	r0, [r4, #0]
    5828:	1c30      	adds	r0, r6, #0
    582a:	1c29      	adds	r1, r5, #0
    582c:	f000 f820 	bl	5870 <_sbrk_r>
    5830:	1c43      	adds	r3, r0, #1
    5832:	d015      	beq.n	5860 <_malloc_r+0x98>
    5834:	1cc4      	adds	r4, r0, #3
    5836:	2303      	movs	r3, #3
    5838:	439c      	bics	r4, r3
    583a:	4284      	cmp	r4, r0
    583c:	d10a      	bne.n	5854 <_malloc_r+0x8c>
    583e:	6025      	str	r5, [r4, #0]
    5840:	1c20      	adds	r0, r4, #0
    5842:	300b      	adds	r0, #11
    5844:	2207      	movs	r2, #7
    5846:	1d23      	adds	r3, r4, #4
    5848:	4390      	bics	r0, r2
    584a:	1ac3      	subs	r3, r0, r3
    584c:	d00b      	beq.n	5866 <_malloc_r+0x9e>
    584e:	425a      	negs	r2, r3
    5850:	50e2      	str	r2, [r4, r3]
    5852:	e008      	b.n	5866 <_malloc_r+0x9e>
    5854:	1a21      	subs	r1, r4, r0
    5856:	1c30      	adds	r0, r6, #0
    5858:	f000 f80a 	bl	5870 <_sbrk_r>
    585c:	3001      	adds	r0, #1
    585e:	d1ee      	bne.n	583e <_malloc_r+0x76>
    5860:	230c      	movs	r3, #12
    5862:	6033      	str	r3, [r6, #0]
    5864:	2000      	movs	r0, #0
    5866:	bd70      	pop	{r4, r5, r6, pc}
    5868:	20000874 	.word	0x20000874
    586c:	20000870 	.word	0x20000870

00005870 <_sbrk_r>:
    5870:	b538      	push	{r3, r4, r5, lr}
    5872:	4c07      	ldr	r4, [pc, #28]	; (5890 <_sbrk_r+0x20>)
    5874:	2300      	movs	r3, #0
    5876:	1c05      	adds	r5, r0, #0
    5878:	1c08      	adds	r0, r1, #0
    587a:	6023      	str	r3, [r4, #0]
    587c:	f7fc fbc0 	bl	2000 <_sbrk>
    5880:	1c43      	adds	r3, r0, #1
    5882:	d103      	bne.n	588c <_sbrk_r+0x1c>
    5884:	6823      	ldr	r3, [r4, #0]
    5886:	2b00      	cmp	r3, #0
    5888:	d000      	beq.n	588c <_sbrk_r+0x1c>
    588a:	602b      	str	r3, [r5, #0]
    588c:	bd38      	pop	{r3, r4, r5, pc}
    588e:	46c0      	nop			; (mov r8, r8)
    5890:	200009f0 	.word	0x200009f0

00005894 <__sread>:
    5894:	b538      	push	{r3, r4, r5, lr}
    5896:	1c0c      	adds	r4, r1, #0
    5898:	250e      	movs	r5, #14
    589a:	5f49      	ldrsh	r1, [r1, r5]
    589c:	f000 f8ac 	bl	59f8 <_read_r>
    58a0:	2800      	cmp	r0, #0
    58a2:	db03      	blt.n	58ac <__sread+0x18>
    58a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    58a6:	1813      	adds	r3, r2, r0
    58a8:	6563      	str	r3, [r4, #84]	; 0x54
    58aa:	e003      	b.n	58b4 <__sread+0x20>
    58ac:	89a2      	ldrh	r2, [r4, #12]
    58ae:	4b02      	ldr	r3, [pc, #8]	; (58b8 <__sread+0x24>)
    58b0:	4013      	ands	r3, r2
    58b2:	81a3      	strh	r3, [r4, #12]
    58b4:	bd38      	pop	{r3, r4, r5, pc}
    58b6:	46c0      	nop			; (mov r8, r8)
    58b8:	ffffefff 	.word	0xffffefff

000058bc <__swrite>:
    58bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58be:	1c1e      	adds	r6, r3, #0
    58c0:	898b      	ldrh	r3, [r1, #12]
    58c2:	1c05      	adds	r5, r0, #0
    58c4:	1c0c      	adds	r4, r1, #0
    58c6:	1c17      	adds	r7, r2, #0
    58c8:	05da      	lsls	r2, r3, #23
    58ca:	d505      	bpl.n	58d8 <__swrite+0x1c>
    58cc:	230e      	movs	r3, #14
    58ce:	5ec9      	ldrsh	r1, [r1, r3]
    58d0:	2200      	movs	r2, #0
    58d2:	2302      	movs	r3, #2
    58d4:	f000 f87c 	bl	59d0 <_lseek_r>
    58d8:	89a2      	ldrh	r2, [r4, #12]
    58da:	4b05      	ldr	r3, [pc, #20]	; (58f0 <__swrite+0x34>)
    58dc:	1c28      	adds	r0, r5, #0
    58de:	4013      	ands	r3, r2
    58e0:	81a3      	strh	r3, [r4, #12]
    58e2:	220e      	movs	r2, #14
    58e4:	5ea1      	ldrsh	r1, [r4, r2]
    58e6:	1c33      	adds	r3, r6, #0
    58e8:	1c3a      	adds	r2, r7, #0
    58ea:	f000 f827 	bl	593c <_write_r>
    58ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58f0:	ffffefff 	.word	0xffffefff

000058f4 <__sseek>:
    58f4:	b538      	push	{r3, r4, r5, lr}
    58f6:	1c0c      	adds	r4, r1, #0
    58f8:	250e      	movs	r5, #14
    58fa:	5f49      	ldrsh	r1, [r1, r5]
    58fc:	f000 f868 	bl	59d0 <_lseek_r>
    5900:	89a3      	ldrh	r3, [r4, #12]
    5902:	1c42      	adds	r2, r0, #1
    5904:	d103      	bne.n	590e <__sseek+0x1a>
    5906:	4a05      	ldr	r2, [pc, #20]	; (591c <__sseek+0x28>)
    5908:	4013      	ands	r3, r2
    590a:	81a3      	strh	r3, [r4, #12]
    590c:	e004      	b.n	5918 <__sseek+0x24>
    590e:	2280      	movs	r2, #128	; 0x80
    5910:	0152      	lsls	r2, r2, #5
    5912:	4313      	orrs	r3, r2
    5914:	81a3      	strh	r3, [r4, #12]
    5916:	6560      	str	r0, [r4, #84]	; 0x54
    5918:	bd38      	pop	{r3, r4, r5, pc}
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	ffffefff 	.word	0xffffefff

00005920 <__sclose>:
    5920:	b508      	push	{r3, lr}
    5922:	230e      	movs	r3, #14
    5924:	5ec9      	ldrsh	r1, [r1, r3]
    5926:	f000 f81d 	bl	5964 <_close_r>
    592a:	bd08      	pop	{r3, pc}

0000592c <strlen>:
    592c:	2300      	movs	r3, #0
    592e:	5cc2      	ldrb	r2, [r0, r3]
    5930:	3301      	adds	r3, #1
    5932:	2a00      	cmp	r2, #0
    5934:	d1fb      	bne.n	592e <strlen+0x2>
    5936:	1e58      	subs	r0, r3, #1
    5938:	4770      	bx	lr
	...

0000593c <_write_r>:
    593c:	b538      	push	{r3, r4, r5, lr}
    593e:	4c08      	ldr	r4, [pc, #32]	; (5960 <_write_r+0x24>)
    5940:	1c05      	adds	r5, r0, #0
    5942:	2000      	movs	r0, #0
    5944:	6020      	str	r0, [r4, #0]
    5946:	1c08      	adds	r0, r1, #0
    5948:	1c11      	adds	r1, r2, #0
    594a:	1c1a      	adds	r2, r3, #0
    594c:	f7fc fb2e 	bl	1fac <_write>
    5950:	1c43      	adds	r3, r0, #1
    5952:	d103      	bne.n	595c <_write_r+0x20>
    5954:	6823      	ldr	r3, [r4, #0]
    5956:	2b00      	cmp	r3, #0
    5958:	d000      	beq.n	595c <_write_r+0x20>
    595a:	602b      	str	r3, [r5, #0]
    595c:	bd38      	pop	{r3, r4, r5, pc}
    595e:	46c0      	nop			; (mov r8, r8)
    5960:	200009f0 	.word	0x200009f0

00005964 <_close_r>:
    5964:	b538      	push	{r3, r4, r5, lr}
    5966:	4c07      	ldr	r4, [pc, #28]	; (5984 <_close_r+0x20>)
    5968:	2300      	movs	r3, #0
    596a:	1c05      	adds	r5, r0, #0
    596c:	1c08      	adds	r0, r1, #0
    596e:	6023      	str	r3, [r4, #0]
    5970:	f7fc fb58 	bl	2024 <_close>
    5974:	1c43      	adds	r3, r0, #1
    5976:	d103      	bne.n	5980 <_close_r+0x1c>
    5978:	6823      	ldr	r3, [r4, #0]
    597a:	2b00      	cmp	r3, #0
    597c:	d000      	beq.n	5980 <_close_r+0x1c>
    597e:	602b      	str	r3, [r5, #0]
    5980:	bd38      	pop	{r3, r4, r5, pc}
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	200009f0 	.word	0x200009f0

00005988 <_fstat_r>:
    5988:	b538      	push	{r3, r4, r5, lr}
    598a:	4c07      	ldr	r4, [pc, #28]	; (59a8 <_fstat_r+0x20>)
    598c:	2300      	movs	r3, #0
    598e:	1c05      	adds	r5, r0, #0
    5990:	1c08      	adds	r0, r1, #0
    5992:	1c11      	adds	r1, r2, #0
    5994:	6023      	str	r3, [r4, #0]
    5996:	f7fc fb49 	bl	202c <_fstat>
    599a:	1c43      	adds	r3, r0, #1
    599c:	d103      	bne.n	59a6 <_fstat_r+0x1e>
    599e:	6823      	ldr	r3, [r4, #0]
    59a0:	2b00      	cmp	r3, #0
    59a2:	d000      	beq.n	59a6 <_fstat_r+0x1e>
    59a4:	602b      	str	r3, [r5, #0]
    59a6:	bd38      	pop	{r3, r4, r5, pc}
    59a8:	200009f0 	.word	0x200009f0

000059ac <_isatty_r>:
    59ac:	b538      	push	{r3, r4, r5, lr}
    59ae:	4c07      	ldr	r4, [pc, #28]	; (59cc <_isatty_r+0x20>)
    59b0:	2300      	movs	r3, #0
    59b2:	1c05      	adds	r5, r0, #0
    59b4:	1c08      	adds	r0, r1, #0
    59b6:	6023      	str	r3, [r4, #0]
    59b8:	f7fc fb3e 	bl	2038 <_isatty>
    59bc:	1c43      	adds	r3, r0, #1
    59be:	d103      	bne.n	59c8 <_isatty_r+0x1c>
    59c0:	6823      	ldr	r3, [r4, #0]
    59c2:	2b00      	cmp	r3, #0
    59c4:	d000      	beq.n	59c8 <_isatty_r+0x1c>
    59c6:	602b      	str	r3, [r5, #0]
    59c8:	bd38      	pop	{r3, r4, r5, pc}
    59ca:	46c0      	nop			; (mov r8, r8)
    59cc:	200009f0 	.word	0x200009f0

000059d0 <_lseek_r>:
    59d0:	b538      	push	{r3, r4, r5, lr}
    59d2:	4c08      	ldr	r4, [pc, #32]	; (59f4 <_lseek_r+0x24>)
    59d4:	1c05      	adds	r5, r0, #0
    59d6:	2000      	movs	r0, #0
    59d8:	6020      	str	r0, [r4, #0]
    59da:	1c08      	adds	r0, r1, #0
    59dc:	1c11      	adds	r1, r2, #0
    59de:	1c1a      	adds	r2, r3, #0
    59e0:	f7fc fb2c 	bl	203c <_lseek>
    59e4:	1c43      	adds	r3, r0, #1
    59e6:	d103      	bne.n	59f0 <_lseek_r+0x20>
    59e8:	6823      	ldr	r3, [r4, #0]
    59ea:	2b00      	cmp	r3, #0
    59ec:	d000      	beq.n	59f0 <_lseek_r+0x20>
    59ee:	602b      	str	r3, [r5, #0]
    59f0:	bd38      	pop	{r3, r4, r5, pc}
    59f2:	46c0      	nop			; (mov r8, r8)
    59f4:	200009f0 	.word	0x200009f0

000059f8 <_read_r>:
    59f8:	b538      	push	{r3, r4, r5, lr}
    59fa:	4c08      	ldr	r4, [pc, #32]	; (5a1c <_read_r+0x24>)
    59fc:	1c05      	adds	r5, r0, #0
    59fe:	2000      	movs	r0, #0
    5a00:	6020      	str	r0, [r4, #0]
    5a02:	1c08      	adds	r0, r1, #0
    5a04:	1c11      	adds	r1, r2, #0
    5a06:	1c1a      	adds	r2, r3, #0
    5a08:	f7fc faae 	bl	1f68 <_read>
    5a0c:	1c43      	adds	r3, r0, #1
    5a0e:	d103      	bne.n	5a18 <_read_r+0x20>
    5a10:	6823      	ldr	r3, [r4, #0]
    5a12:	2b00      	cmp	r3, #0
    5a14:	d000      	beq.n	5a18 <_read_r+0x20>
    5a16:	602b      	str	r3, [r5, #0]
    5a18:	bd38      	pop	{r3, r4, r5, pc}
    5a1a:	46c0      	nop			; (mov r8, r8)
    5a1c:	200009f0 	.word	0x200009f0
    5a20:	42000800 	.word	0x42000800
    5a24:	42000c00 	.word	0x42000c00
    5a28:	42001000 	.word	0x42001000
    5a2c:	42001400 	.word	0x42001400
    5a30:	42001800 	.word	0x42001800
    5a34:	42001c00 	.word	0x42001c00
    5a38:	0c0b0a09 	.word	0x0c0b0a09
    5a3c:	00000e0d 	.word	0x00000e0d
    5a40:	000012b0 	.word	0x000012b0
    5a44:	0000130c 	.word	0x0000130c
    5a48:	0000130c 	.word	0x0000130c
    5a4c:	000012aa 	.word	0x000012aa
    5a50:	000012aa 	.word	0x000012aa
    5a54:	000012c6 	.word	0x000012c6
    5a58:	000012b6 	.word	0x000012b6
    5a5c:	000012cc 	.word	0x000012cc
    5a60:	000012fa 	.word	0x000012fa
    5a64:	00001534 	.word	0x00001534
    5a68:	00001594 	.word	0x00001594
    5a6c:	00001594 	.word	0x00001594
    5a70:	00001514 	.word	0x00001514
    5a74:	00001526 	.word	0x00001526
    5a78:	00001542 	.word	0x00001542
    5a7c:	00001518 	.word	0x00001518
    5a80:	00001550 	.word	0x00001550
    5a84:	00001584 	.word	0x00001584
    5a88:	42002c00 	.word	0x42002c00
    5a8c:	42003000 	.word	0x42003000
    5a90:	42003400 	.word	0x42003400
    5a94:	001c1c1b 	.word	0x001c1c1b
    5a98:	10000800 	.word	0x10000800
    5a9c:	00002000 	.word	0x00002000
    5aa0:	00002850 	.word	0x00002850
    5aa4:	000029c4 	.word	0x000029c4
    5aa8:	000029ce 	.word	0x000029ce
    5aac:	00002b64 	.word	0x00002b64
    5ab0:	00002b6c 	.word	0x00002b6c
    5ab4:	0000313a 	.word	0x0000313a
    5ab8:	000031f8 	.word	0x000031f8
    5abc:	00003144 	.word	0x00003144
    5ac0:	00003164 	.word	0x00003164
    5ac4:	000031f8 	.word	0x000031f8
    5ac8:	00003186 	.word	0x00003186
    5acc:	000031f8 	.word	0x000031f8
    5ad0:	000031c8 	.word	0x000031c8

00005ad4 <tc_interrupt_vectors.11766>:
    5ad4:	00141312 00007325 73696874 636f7220     ....%s..this roc
    5ae4:	0000736b 74207449 6c61746f 7720796c     ks..It totally w
    5af4:	736b726f 67697220 6e207468 0021776f     orks right now!.
    5b04:	20202020 20202020 20202020 20202020                     
    5b14:	20202020 20202020 20202020 20202020                     
    5b24:	00202020 6d206577 20656461 00007469        .we made it..
    5b34:	74736554 75636553 79746972 3079654b     TestSecurityKey0
    5b44:	00000000 00000043                       ....C...

00005b4c <_global_impure_ptr>:
    5b4c:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    5b5c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    5b6c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    5b7c:	64636261 00006665                       abcdef..

00005b84 <__sf_fake_stdin>:
	...

00005ba4 <__sf_fake_stdout>:
	...

00005bc4 <__sf_fake_stderr>:
	...

00005be4 <_init>:
    5be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5bea:	bc08      	pop	{r3}
    5bec:	469e      	mov	lr, r3
    5bee:	4770      	bx	lr

00005bf0 <__init_array_start>:
    5bf0:	000000dd 	.word	0x000000dd

00005bf4 <_fini>:
    5bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bf6:	46c0      	nop			; (mov r8, r8)
    5bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5bfa:	bc08      	pop	{r3}
    5bfc:	469e      	mov	lr, r3
    5bfe:	4770      	bx	lr

00005c00 <__fini_array_start>:
    5c00:	000000b5 	.word	0x000000b5
