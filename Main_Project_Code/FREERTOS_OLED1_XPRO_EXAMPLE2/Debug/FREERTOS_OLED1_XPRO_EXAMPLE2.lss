
FREERTOS_OLED1_XPRO_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002418  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00002418  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003c88  2000000c  00002424  0001000c  2**2
                  ALLOC
  3 .stack        00002004  20003c94  000060ac  0001000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014358  00000000  00000000  0001008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030d7  00000000  00000000  000243e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000619c  00000000  00000000  000274be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007c0  00000000  00000000  0002d65a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000778  00000000  00000000  0002de1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006e37  00000000  00000000  0002e592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f1f5  00000000  00000000  000353c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089061  00000000  00000000  000445be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001344  00000000  00000000  000cd620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20005c98 	.word	0x20005c98
       4:	000009a9 	.word	0x000009a9
       8:	000009a5 	.word	0x000009a5
       c:	000009a5 	.word	0x000009a5
	...
      2c:	00000b49 	.word	0x00000b49
	...
      38:	00000bb1 	.word	0x00000bb1
      3c:	00000bf5 	.word	0x00000bf5
      40:	000009a5 	.word	0x000009a5
      44:	000009a5 	.word	0x000009a5
      48:	000009a5 	.word	0x000009a5
      4c:	000009a5 	.word	0x000009a5
      50:	00000229 	.word	0x00000229
      54:	000009a5 	.word	0x000009a5
      58:	000009a5 	.word	0x000009a5
      5c:	000009a5 	.word	0x000009a5
      60:	000009a5 	.word	0x000009a5
      64:	000003bd 	.word	0x000003bd
      68:	000003cd 	.word	0x000003cd
      6c:	000003dd 	.word	0x000003dd
      70:	000003ed 	.word	0x000003ed
      74:	000003fd 	.word	0x000003fd
      78:	0000040d 	.word	0x0000040d
      7c:	000009a5 	.word	0x000009a5
      80:	000009a5 	.word	0x000009a5
      84:	000009a5 	.word	0x000009a5
      88:	000001f9 	.word	0x000001f9
      8c:	00000209 	.word	0x00000209
      90:	00000219 	.word	0x00000219
	...
      9c:	000009a5 	.word	0x000009a5
      a0:	000002e1 	.word	0x000002e1
      a4:	00000000 	.word	0x00000000
      a8:	000009a5 	.word	0x000009a5
      ac:	000009a5 	.word	0x000009a5
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00002418 	.word	0x00002418

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00002418 	.word	0x00002418
     108:	20000010 	.word	0x20000010
     10c:	00002418 	.word	0x00002418
     110:	00000000 	.word	0x00000000

00000114 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     114:	4b05      	ldr	r3, [pc, #20]	; (12c <_extint_enable+0x18>)
     116:	7819      	ldrb	r1, [r3, #0]
     118:	2202      	movs	r2, #2
     11a:	430a      	orrs	r2, r1
     11c:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     11e:	1c1a      	adds	r2, r3, #0
     120:	7853      	ldrb	r3, [r2, #1]
     122:	b25b      	sxtb	r3, r3
     124:	2b00      	cmp	r3, #0
     126:	dbfb      	blt.n	120 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     128:	4770      	bx	lr
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	40001800 	.word	0x40001800

00000130 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     130:	b500      	push	{lr}
     132:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     134:	4b12      	ldr	r3, [pc, #72]	; (180 <_system_extint_init+0x50>)
     136:	6999      	ldr	r1, [r3, #24]
     138:	2240      	movs	r2, #64	; 0x40
     13a:	430a      	orrs	r2, r1
     13c:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     13e:	a901      	add	r1, sp, #4
     140:	2300      	movs	r3, #0
     142:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     144:	2005      	movs	r0, #5
     146:	4b0f      	ldr	r3, [pc, #60]	; (184 <_system_extint_init+0x54>)
     148:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     14a:	2005      	movs	r0, #5
     14c:	4b0e      	ldr	r3, [pc, #56]	; (188 <_system_extint_init+0x58>)
     14e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     150:	4b0e      	ldr	r3, [pc, #56]	; (18c <_system_extint_init+0x5c>)
     152:	7819      	ldrb	r1, [r3, #0]
     154:	2201      	movs	r2, #1
     156:	430a      	orrs	r2, r1
     158:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     15a:	1c1a      	adds	r2, r3, #0
     15c:	7853      	ldrb	r3, [r2, #1]
     15e:	b25b      	sxtb	r3, r3
     160:	2b00      	cmp	r3, #0
     162:	dbfb      	blt.n	15c <_system_extint_init+0x2c>
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <_system_extint_init+0x60>)
     166:	1c19      	adds	r1, r3, #0
     168:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     16a:	2200      	movs	r2, #0
     16c:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     16e:	428b      	cmp	r3, r1
     170:	d1fc      	bne.n	16c <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     172:	2210      	movs	r2, #16
     174:	4b07      	ldr	r3, [pc, #28]	; (194 <_system_extint_init+0x64>)
     176:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     178:	4b07      	ldr	r3, [pc, #28]	; (198 <_system_extint_init+0x68>)
     17a:	4798      	blx	r3
}
     17c:	b003      	add	sp, #12
     17e:	bd00      	pop	{pc}
     180:	40000400 	.word	0x40000400
     184:	00000875 	.word	0x00000875
     188:	000007e9 	.word	0x000007e9
     18c:	40001800 	.word	0x40001800
     190:	20003c40 	.word	0x20003c40
     194:	e000e100 	.word	0xe000e100
     198:	00000115 	.word	0x00000115

0000019c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     19c:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     19e:	0080      	lsls	r0, r0, #2
     1a0:	4b14      	ldr	r3, [pc, #80]	; (1f4 <_tc_interrupt_handler+0x58>)
     1a2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     1a4:	6822      	ldr	r2, [r4, #0]
     1a6:	7b95      	ldrb	r5, [r2, #14]
     1a8:	7e23      	ldrb	r3, [r4, #24]
     1aa:	401d      	ands	r5, r3
     1ac:	7e63      	ldrb	r3, [r4, #25]
     1ae:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     1b0:	07eb      	lsls	r3, r5, #31
     1b2:	d505      	bpl.n	1c0 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     1b4:	1c20      	adds	r0, r4, #0
     1b6:	68a2      	ldr	r2, [r4, #8]
     1b8:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     1ba:	2301      	movs	r3, #1
     1bc:	6822      	ldr	r2, [r4, #0]
     1be:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     1c0:	07ab      	lsls	r3, r5, #30
     1c2:	d505      	bpl.n	1d0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     1c4:	1c20      	adds	r0, r4, #0
     1c6:	68e2      	ldr	r2, [r4, #12]
     1c8:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     1ca:	2302      	movs	r3, #2
     1cc:	6822      	ldr	r2, [r4, #0]
     1ce:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     1d0:	06eb      	lsls	r3, r5, #27
     1d2:	d505      	bpl.n	1e0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     1d4:	1c20      	adds	r0, r4, #0
     1d6:	6922      	ldr	r2, [r4, #16]
     1d8:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     1da:	2310      	movs	r3, #16
     1dc:	6822      	ldr	r2, [r4, #0]
     1de:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     1e0:	06ab      	lsls	r3, r5, #26
     1e2:	d505      	bpl.n	1f0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     1e4:	1c20      	adds	r0, r4, #0
     1e6:	6962      	ldr	r2, [r4, #20]
     1e8:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     1ea:	6823      	ldr	r3, [r4, #0]
     1ec:	2220      	movs	r2, #32
     1ee:	739a      	strb	r2, [r3, #14]
	}
}
     1f0:	bd38      	pop	{r3, r4, r5, pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	20003c80 	.word	0x20003c80

000001f8 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     1f8:	b508      	push	{r3, lr}
     1fa:	2000      	movs	r0, #0
     1fc:	4b01      	ldr	r3, [pc, #4]	; (204 <TC3_Handler+0xc>)
     1fe:	4798      	blx	r3
     200:	bd08      	pop	{r3, pc}
     202:	46c0      	nop			; (mov r8, r8)
     204:	0000019d 	.word	0x0000019d

00000208 <TC4_Handler>:
     208:	b508      	push	{r3, lr}
     20a:	2001      	movs	r0, #1
     20c:	4b01      	ldr	r3, [pc, #4]	; (214 <TC4_Handler+0xc>)
     20e:	4798      	blx	r3
     210:	bd08      	pop	{r3, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	0000019d 	.word	0x0000019d

00000218 <TC5_Handler>:
     218:	b508      	push	{r3, lr}
     21a:	2002      	movs	r0, #2
     21c:	4b01      	ldr	r3, [pc, #4]	; (224 <TC5_Handler+0xc>)
     21e:	4798      	blx	r3
     220:	bd08      	pop	{r3, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	0000019d 	.word	0x0000019d

00000228 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     228:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     22a:	2200      	movs	r2, #0
     22c:	4b16      	ldr	r3, [pc, #88]	; (288 <EIC_Handler+0x60>)
     22e:	701a      	strb	r2, [r3, #0]
     230:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     232:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     234:	4d15      	ldr	r5, [pc, #84]	; (28c <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     236:	4c14      	ldr	r4, [pc, #80]	; (288 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     238:	2b1f      	cmp	r3, #31
     23a:	d910      	bls.n	25e <EIC_Handler+0x36>
     23c:	e019      	b.n	272 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     23e:	4914      	ldr	r1, [pc, #80]	; (290 <EIC_Handler+0x68>)
     240:	e000      	b.n	244 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     242:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     244:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     246:	009b      	lsls	r3, r3, #2
     248:	595b      	ldr	r3, [r3, r5]
     24a:	2b00      	cmp	r3, #0
     24c:	d000      	beq.n	250 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     24e:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     250:	7823      	ldrb	r3, [r4, #0]
     252:	3301      	adds	r3, #1
     254:	b2db      	uxtb	r3, r3
     256:	7023      	strb	r3, [r4, #0]
     258:	2b0f      	cmp	r3, #15
     25a:	d814      	bhi.n	286 <EIC_Handler+0x5e>
     25c:	e7ec      	b.n	238 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     25e:	1c32      	adds	r2, r6, #0
     260:	401a      	ands	r2, r3
     262:	2101      	movs	r1, #1
     264:	4091      	lsls	r1, r2
     266:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     268:	4909      	ldr	r1, [pc, #36]	; (290 <EIC_Handler+0x68>)
     26a:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     26c:	4211      	tst	r1, r2
     26e:	d1e6      	bne.n	23e <EIC_Handler+0x16>
     270:	e7ee      	b.n	250 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     272:	1c32      	adds	r2, r6, #0
     274:	401a      	ands	r2, r3
     276:	2101      	movs	r1, #1
     278:	4091      	lsls	r1, r2
     27a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     27c:	2100      	movs	r1, #0
     27e:	6909      	ldr	r1, [r1, #16]
     280:	4211      	tst	r1, r2
     282:	d1de      	bne.n	242 <EIC_Handler+0x1a>
     284:	e7e4      	b.n	250 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     286:	bd70      	pop	{r4, r5, r6, pc}
     288:	20003c8c 	.word	0x20003c8c
     28c:	20003c40 	.word	0x20003c40
     290:	40001800 	.word	0x40001800

00000294 <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
     294:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
     296:	0080      	lsls	r0, r0, #2
     298:	4b10      	ldr	r3, [pc, #64]	; (2dc <_ac_interrupt_handler+0x48>)
     29a:	58c4      	ldr	r4, [r0, r3]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
     29c:	6822      	ldr	r2, [r4, #0]
     29e:	7995      	ldrb	r5, [r2, #6]
	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
     2a0:	7e23      	ldrb	r3, [r4, #24]
     2a2:	401d      	ands	r5, r3
     2a4:	7e63      	ldrb	r3, [r4, #25]
     2a6:	401d      	ands	r5, r3
			_ac_instance[instance_index]->hw->INTFLAG.reg &
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
     2a8:	07eb      	lsls	r3, r5, #31
     2aa:	d505      	bpl.n	2b8 <_ac_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
     2ac:	1c20      	adds	r0, r4, #0
     2ae:	6862      	ldr	r2, [r4, #4]
     2b0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
     2b2:	2301      	movs	r3, #1
     2b4:	6822      	ldr	r2, [r4, #0]
     2b6:	7193      	strb	r3, [r2, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
     2b8:	07ab      	lsls	r3, r5, #30
     2ba:	d505      	bpl.n	2c8 <_ac_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
     2bc:	1c20      	adds	r0, r4, #0
     2be:	68a2      	ldr	r2, [r4, #8]
     2c0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
     2c2:	2302      	movs	r3, #2
     2c4:	6822      	ldr	r2, [r4, #0]
     2c6:	7193      	strb	r3, [r2, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
     2c8:	06eb      	lsls	r3, r5, #27
     2ca:	d505      	bpl.n	2d8 <_ac_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
     2cc:	1c20      	adds	r0, r4, #0
     2ce:	6962      	ldr	r2, [r4, #20]
     2d0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
     2d2:	6823      	ldr	r3, [r4, #0]
     2d4:	2210      	movs	r2, #16
     2d6:	719a      	strb	r2, [r3, #6]
		(module->callback[AC_CALLBACK_WINDOW_1])(module);
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#endif /* (AC_NUM_CMP > 2) */
}
     2d8:	bd38      	pop	{r3, r4, r5, pc}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	20003c90 	.word	0x20003c90

000002e0 <AC_Handler>:
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
     2e0:	b508      	push	{r3, lr}
	_ac_interrupt_handler(0);
     2e2:	2000      	movs	r0, #0
     2e4:	4b01      	ldr	r3, [pc, #4]	; (2ec <AC_Handler+0xc>)
     2e6:	4798      	blx	r3
}
     2e8:	bd08      	pop	{r3, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	00000295 	.word	0x00000295

000002f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     2f0:	4b0c      	ldr	r3, [pc, #48]	; (324 <cpu_irq_enter_critical+0x34>)
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	2b00      	cmp	r3, #0
     2f6:	d110      	bne.n	31a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     2f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     2fc:	2b00      	cmp	r3, #0
     2fe:	d109      	bne.n	314 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     300:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     302:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     306:	2200      	movs	r2, #0
     308:	4b07      	ldr	r3, [pc, #28]	; (328 <cpu_irq_enter_critical+0x38>)
     30a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     30c:	2201      	movs	r2, #1
     30e:	4b07      	ldr	r3, [pc, #28]	; (32c <cpu_irq_enter_critical+0x3c>)
     310:	701a      	strb	r2, [r3, #0]
     312:	e002      	b.n	31a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     314:	2200      	movs	r2, #0
     316:	4b05      	ldr	r3, [pc, #20]	; (32c <cpu_irq_enter_critical+0x3c>)
     318:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     31a:	4b02      	ldr	r3, [pc, #8]	; (324 <cpu_irq_enter_critical+0x34>)
     31c:	681a      	ldr	r2, [r3, #0]
     31e:	3201      	adds	r2, #1
     320:	601a      	str	r2, [r3, #0]
}
     322:	4770      	bx	lr
     324:	20000028 	.word	0x20000028
     328:	20000000 	.word	0x20000000
     32c:	2000002c 	.word	0x2000002c

00000330 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     330:	4b08      	ldr	r3, [pc, #32]	; (354 <cpu_irq_leave_critical+0x24>)
     332:	681a      	ldr	r2, [r3, #0]
     334:	3a01      	subs	r2, #1
     336:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     338:	681b      	ldr	r3, [r3, #0]
     33a:	2b00      	cmp	r3, #0
     33c:	d109      	bne.n	352 <cpu_irq_leave_critical+0x22>
     33e:	4b06      	ldr	r3, [pc, #24]	; (358 <cpu_irq_leave_critical+0x28>)
     340:	781b      	ldrb	r3, [r3, #0]
     342:	2b00      	cmp	r3, #0
     344:	d005      	beq.n	352 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     346:	2201      	movs	r2, #1
     348:	4b04      	ldr	r3, [pc, #16]	; (35c <cpu_irq_leave_critical+0x2c>)
     34a:	701a      	strb	r2, [r3, #0]
     34c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     350:	b662      	cpsie	i
	}
}
     352:	4770      	bx	lr
     354:	20000028 	.word	0x20000028
     358:	2000002c 	.word	0x2000002c
     35c:	20000000 	.word	0x20000000

00000360 <system_board_init>:




void system_board_init(void)
{
     360:	b5f0      	push	{r4, r5, r6, r7, lr}
     362:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     364:	ac01      	add	r4, sp, #4
     366:	2501      	movs	r5, #1
     368:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     36a:	2700      	movs	r7, #0
     36c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     36e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     370:	2013      	movs	r0, #19
     372:	1c21      	adds	r1, r4, #0
     374:	4e06      	ldr	r6, [pc, #24]	; (390 <system_board_init+0x30>)
     376:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     378:	2280      	movs	r2, #128	; 0x80
     37a:	0312      	lsls	r2, r2, #12
     37c:	4b05      	ldr	r3, [pc, #20]	; (394 <system_board_init+0x34>)
     37e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     380:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     382:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     384:	201c      	movs	r0, #28
     386:	1c21      	adds	r1, r4, #0
     388:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     38a:	b003      	add	sp, #12
     38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	00000399 	.word	0x00000399
     394:	41004400 	.word	0x41004400

00000398 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     398:	b500      	push	{lr}
     39a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     39c:	ab01      	add	r3, sp, #4
     39e:	2280      	movs	r2, #128	; 0x80
     3a0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3a2:	780a      	ldrb	r2, [r1, #0]
     3a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3a6:	784a      	ldrb	r2, [r1, #1]
     3a8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3aa:	788a      	ldrb	r2, [r1, #2]
     3ac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3ae:	1c19      	adds	r1, r3, #0
     3b0:	4b01      	ldr	r3, [pc, #4]	; (3b8 <port_pin_set_config+0x20>)
     3b2:	4798      	blx	r3
}
     3b4:	b003      	add	sp, #12
     3b6:	bd00      	pop	{pc}
     3b8:	00000951 	.word	0x00000951

000003bc <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     3bc:	b508      	push	{r3, lr}
     3be:	4b02      	ldr	r3, [pc, #8]	; (3c8 <SERCOM0_Handler+0xc>)
     3c0:	681b      	ldr	r3, [r3, #0]
     3c2:	2000      	movs	r0, #0
     3c4:	4798      	blx	r3
     3c6:	bd08      	pop	{r3, pc}
     3c8:	20000030 	.word	0x20000030

000003cc <SERCOM1_Handler>:
     3cc:	b508      	push	{r3, lr}
     3ce:	4b02      	ldr	r3, [pc, #8]	; (3d8 <SERCOM1_Handler+0xc>)
     3d0:	685b      	ldr	r3, [r3, #4]
     3d2:	2001      	movs	r0, #1
     3d4:	4798      	blx	r3
     3d6:	bd08      	pop	{r3, pc}
     3d8:	20000030 	.word	0x20000030

000003dc <SERCOM2_Handler>:
     3dc:	b508      	push	{r3, lr}
     3de:	4b02      	ldr	r3, [pc, #8]	; (3e8 <SERCOM2_Handler+0xc>)
     3e0:	689b      	ldr	r3, [r3, #8]
     3e2:	2002      	movs	r0, #2
     3e4:	4798      	blx	r3
     3e6:	bd08      	pop	{r3, pc}
     3e8:	20000030 	.word	0x20000030

000003ec <SERCOM3_Handler>:
     3ec:	b508      	push	{r3, lr}
     3ee:	4b02      	ldr	r3, [pc, #8]	; (3f8 <SERCOM3_Handler+0xc>)
     3f0:	68db      	ldr	r3, [r3, #12]
     3f2:	2003      	movs	r0, #3
     3f4:	4798      	blx	r3
     3f6:	bd08      	pop	{r3, pc}
     3f8:	20000030 	.word	0x20000030

000003fc <SERCOM4_Handler>:
     3fc:	b508      	push	{r3, lr}
     3fe:	4b02      	ldr	r3, [pc, #8]	; (408 <SERCOM4_Handler+0xc>)
     400:	691b      	ldr	r3, [r3, #16]
     402:	2004      	movs	r0, #4
     404:	4798      	blx	r3
     406:	bd08      	pop	{r3, pc}
     408:	20000030 	.word	0x20000030

0000040c <SERCOM5_Handler>:
     40c:	b508      	push	{r3, lr}
     40e:	4b02      	ldr	r3, [pc, #8]	; (418 <SERCOM5_Handler+0xc>)
     410:	695b      	ldr	r3, [r3, #20]
     412:	2005      	movs	r0, #5
     414:	4798      	blx	r3
     416:	bd08      	pop	{r3, pc}
     418:	20000030 	.word	0x20000030

0000041c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     41c:	b508      	push	{r3, lr}
	switch (clock_source) {
     41e:	2808      	cmp	r0, #8
     420:	d834      	bhi.n	48c <system_clock_source_get_hz+0x70>
     422:	0080      	lsls	r0, r0, #2
     424:	4b1b      	ldr	r3, [pc, #108]	; (494 <system_clock_source_get_hz+0x78>)
     426:	581b      	ldr	r3, [r3, r0]
     428:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     42a:	2080      	movs	r0, #128	; 0x80
     42c:	0200      	lsls	r0, r0, #8
     42e:	e030      	b.n	492 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     430:	4b19      	ldr	r3, [pc, #100]	; (498 <system_clock_source_get_hz+0x7c>)
     432:	6918      	ldr	r0, [r3, #16]
     434:	e02d      	b.n	492 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     436:	4b19      	ldr	r3, [pc, #100]	; (49c <system_clock_source_get_hz+0x80>)
     438:	6a18      	ldr	r0, [r3, #32]
     43a:	0580      	lsls	r0, r0, #22
     43c:	0f80      	lsrs	r0, r0, #30
     43e:	4b18      	ldr	r3, [pc, #96]	; (4a0 <system_clock_source_get_hz+0x84>)
     440:	40c3      	lsrs	r3, r0
     442:	1c18      	adds	r0, r3, #0
     444:	e025      	b.n	492 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     446:	4b14      	ldr	r3, [pc, #80]	; (498 <system_clock_source_get_hz+0x7c>)
     448:	6958      	ldr	r0, [r3, #20]
     44a:	e022      	b.n	492 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     44c:	4b12      	ldr	r3, [pc, #72]	; (498 <system_clock_source_get_hz+0x7c>)
     44e:	681b      	ldr	r3, [r3, #0]
     450:	2002      	movs	r0, #2
     452:	4018      	ands	r0, r3
     454:	d01d      	beq.n	492 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     456:	4911      	ldr	r1, [pc, #68]	; (49c <system_clock_source_get_hz+0x80>)
     458:	2210      	movs	r2, #16
     45a:	68cb      	ldr	r3, [r1, #12]
     45c:	421a      	tst	r2, r3
     45e:	d0fc      	beq.n	45a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     460:	4b0d      	ldr	r3, [pc, #52]	; (498 <system_clock_source_get_hz+0x7c>)
     462:	681b      	ldr	r3, [r3, #0]
     464:	075a      	lsls	r2, r3, #29
     466:	d513      	bpl.n	490 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     468:	2000      	movs	r0, #0
     46a:	4b0e      	ldr	r3, [pc, #56]	; (4a4 <system_clock_source_get_hz+0x88>)
     46c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     46e:	4b0a      	ldr	r3, [pc, #40]	; (498 <system_clock_source_get_hz+0x7c>)
     470:	689b      	ldr	r3, [r3, #8]
     472:	041b      	lsls	r3, r3, #16
     474:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     476:	4358      	muls	r0, r3
     478:	e00b      	b.n	492 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     47a:	2350      	movs	r3, #80	; 0x50
     47c:	4a07      	ldr	r2, [pc, #28]	; (49c <system_clock_source_get_hz+0x80>)
     47e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     480:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     482:	075a      	lsls	r2, r3, #29
     484:	d505      	bpl.n	492 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     486:	4b04      	ldr	r3, [pc, #16]	; (498 <system_clock_source_get_hz+0x7c>)
     488:	68d8      	ldr	r0, [r3, #12]
     48a:	e002      	b.n	492 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
     48c:	2000      	movs	r0, #0
     48e:	e000      	b.n	492 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     490:	4805      	ldr	r0, [pc, #20]	; (4a8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     492:	bd08      	pop	{r3, pc}
     494:	00002330 	.word	0x00002330
     498:	20000048 	.word	0x20000048
     49c:	40000800 	.word	0x40000800
     4a0:	007a1200 	.word	0x007a1200
     4a4:	00000891 	.word	0x00000891
     4a8:	02dc6c00 	.word	0x02dc6c00

000004ac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     4ac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     4ae:	4b0c      	ldr	r3, [pc, #48]	; (4e0 <system_clock_source_osc8m_set_config+0x34>)
     4b0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     4b2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     4b4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     4b6:	7840      	ldrb	r0, [r0, #1]
     4b8:	2201      	movs	r2, #1
     4ba:	4010      	ands	r0, r2
     4bc:	0180      	lsls	r0, r0, #6
     4be:	2640      	movs	r6, #64	; 0x40
     4c0:	43b4      	bics	r4, r6
     4c2:	4304      	orrs	r4, r0
     4c4:	402a      	ands	r2, r5
     4c6:	01d0      	lsls	r0, r2, #7
     4c8:	2280      	movs	r2, #128	; 0x80
     4ca:	4394      	bics	r4, r2
     4cc:	1c22      	adds	r2, r4, #0
     4ce:	4302      	orrs	r2, r0
     4d0:	2003      	movs	r0, #3
     4d2:	4001      	ands	r1, r0
     4d4:	0209      	lsls	r1, r1, #8
     4d6:	4803      	ldr	r0, [pc, #12]	; (4e4 <system_clock_source_osc8m_set_config+0x38>)
     4d8:	4002      	ands	r2, r0
     4da:	430a      	orrs	r2, r1
     4dc:	621a      	str	r2, [r3, #32]
}
     4de:	bd70      	pop	{r4, r5, r6, pc}
     4e0:	40000800 	.word	0x40000800
     4e4:	fffffcff 	.word	0xfffffcff

000004e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     4e8:	2808      	cmp	r0, #8
     4ea:	d843      	bhi.n	574 <system_clock_source_enable+0x8c>
     4ec:	0080      	lsls	r0, r0, #2
     4ee:	4b22      	ldr	r3, [pc, #136]	; (578 <system_clock_source_enable+0x90>)
     4f0:	581b      	ldr	r3, [r3, r0]
     4f2:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     4f4:	2000      	movs	r0, #0
     4f6:	e03e      	b.n	576 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     4f8:	4b20      	ldr	r3, [pc, #128]	; (57c <system_clock_source_enable+0x94>)
     4fa:	6a19      	ldr	r1, [r3, #32]
     4fc:	2202      	movs	r2, #2
     4fe:	430a      	orrs	r2, r1
     500:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     502:	2000      	movs	r0, #0
     504:	e037      	b.n	576 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     506:	4b1d      	ldr	r3, [pc, #116]	; (57c <system_clock_source_enable+0x94>)
     508:	6999      	ldr	r1, [r3, #24]
     50a:	2202      	movs	r2, #2
     50c:	430a      	orrs	r2, r1
     50e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     510:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     512:	e030      	b.n	576 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     514:	4b19      	ldr	r3, [pc, #100]	; (57c <system_clock_source_enable+0x94>)
     516:	8a19      	ldrh	r1, [r3, #16]
     518:	2202      	movs	r2, #2
     51a:	430a      	orrs	r2, r1
     51c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     51e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     520:	e029      	b.n	576 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     522:	4b16      	ldr	r3, [pc, #88]	; (57c <system_clock_source_enable+0x94>)
     524:	8a99      	ldrh	r1, [r3, #20]
     526:	2202      	movs	r2, #2
     528:	430a      	orrs	r2, r1
     52a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     52c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     52e:	e022      	b.n	576 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     530:	4b13      	ldr	r3, [pc, #76]	; (580 <system_clock_source_enable+0x98>)
     532:	6819      	ldr	r1, [r3, #0]
     534:	2202      	movs	r2, #2
     536:	430a      	orrs	r2, r1
     538:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     53a:	681a      	ldr	r2, [r3, #0]
     53c:	4b11      	ldr	r3, [pc, #68]	; (584 <system_clock_source_enable+0x9c>)
     53e:	401a      	ands	r2, r3
     540:	4b0e      	ldr	r3, [pc, #56]	; (57c <system_clock_source_enable+0x94>)
     542:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     544:	1c19      	adds	r1, r3, #0
     546:	2210      	movs	r2, #16
     548:	68cb      	ldr	r3, [r1, #12]
     54a:	421a      	tst	r2, r3
     54c:	d0fc      	beq.n	548 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     54e:	4a0c      	ldr	r2, [pc, #48]	; (580 <system_clock_source_enable+0x98>)
     550:	6891      	ldr	r1, [r2, #8]
     552:	4b0a      	ldr	r3, [pc, #40]	; (57c <system_clock_source_enable+0x94>)
     554:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     556:	6851      	ldr	r1, [r2, #4]
     558:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     55a:	6812      	ldr	r2, [r2, #0]
     55c:	b292      	uxth	r2, r2
     55e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     560:	2000      	movs	r0, #0
     562:	e008      	b.n	576 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     564:	4a05      	ldr	r2, [pc, #20]	; (57c <system_clock_source_enable+0x94>)
     566:	2344      	movs	r3, #68	; 0x44
     568:	5cd0      	ldrb	r0, [r2, r3]
     56a:	2102      	movs	r1, #2
     56c:	4301      	orrs	r1, r0
     56e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     570:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     572:	e000      	b.n	576 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     574:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     576:	4770      	bx	lr
     578:	00002354 	.word	0x00002354
     57c:	40000800 	.word	0x40000800
     580:	20000048 	.word	0x20000048
     584:	0000ff7f 	.word	0x0000ff7f

00000588 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     588:	b5f0      	push	{r4, r5, r6, r7, lr}
     58a:	4647      	mov	r7, r8
     58c:	b480      	push	{r7}
     58e:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     590:	22c2      	movs	r2, #194	; 0xc2
     592:	00d2      	lsls	r2, r2, #3
     594:	4b21      	ldr	r3, [pc, #132]	; (61c <system_clock_init+0x94>)
     596:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     598:	4b21      	ldr	r3, [pc, #132]	; (620 <system_clock_init+0x98>)
     59a:	685a      	ldr	r2, [r3, #4]
     59c:	211e      	movs	r1, #30
     59e:	438a      	bics	r2, r1
     5a0:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     5a2:	2301      	movs	r3, #1
     5a4:	466a      	mov	r2, sp
     5a6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     5a8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     5aa:	4d1e      	ldr	r5, [pc, #120]	; (624 <system_clock_init+0x9c>)
     5ac:	b2e0      	uxtb	r0, r4
     5ae:	4669      	mov	r1, sp
     5b0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     5b2:	3401      	adds	r4, #1
     5b4:	2c25      	cmp	r4, #37	; 0x25
     5b6:	d1f9      	bne.n	5ac <system_clock_init+0x24>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     5b8:	a803      	add	r0, sp, #12
     5ba:	2400      	movs	r4, #0
     5bc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     5be:	2301      	movs	r3, #1
     5c0:	4698      	mov	r8, r3
     5c2:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     5c4:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     5c6:	4b18      	ldr	r3, [pc, #96]	; (628 <system_clock_init+0xa0>)
     5c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     5ca:	2006      	movs	r0, #6
     5cc:	4b17      	ldr	r3, [pc, #92]	; (62c <system_clock_init+0xa4>)
     5ce:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     5d0:	4b17      	ldr	r3, [pc, #92]	; (630 <system_clock_init+0xa8>)
     5d2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     5d4:	466b      	mov	r3, sp
     5d6:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     5d8:	2706      	movs	r7, #6
     5da:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
     5dc:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     5de:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     5e0:	2310      	movs	r3, #16
     5e2:	9301      	str	r3, [sp, #4]
     5e4:	2003      	movs	r0, #3
     5e6:	4669      	mov	r1, sp
     5e8:	4e12      	ldr	r6, [pc, #72]	; (634 <system_clock_init+0xac>)
     5ea:	47b0      	blx	r6
     5ec:	2003      	movs	r0, #3
     5ee:	4d12      	ldr	r5, [pc, #72]	; (638 <system_clock_init+0xb0>)
     5f0:	47a8      	blx	r5
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     5f2:	4b12      	ldr	r3, [pc, #72]	; (63c <system_clock_init+0xb4>)
     5f4:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     5f6:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     5f8:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     5fa:	4642      	mov	r2, r8
     5fc:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
     5fe:	466b      	mov	r3, sp
     600:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     602:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
     604:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     606:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     608:	2000      	movs	r0, #0
     60a:	4669      	mov	r1, sp
     60c:	47b0      	blx	r6
     60e:	2000      	movs	r0, #0
     610:	47a8      	blx	r5
#endif
}
     612:	b004      	add	sp, #16
     614:	bc04      	pop	{r2}
     616:	4690      	mov	r8, r2
     618:	bdf0      	pop	{r4, r5, r6, r7, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	40000800 	.word	0x40000800
     620:	41004000 	.word	0x41004000
     624:	00000875 	.word	0x00000875
     628:	000004ad 	.word	0x000004ad
     62c:	000004e9 	.word	0x000004e9
     630:	00000641 	.word	0x00000641
     634:	00000665 	.word	0x00000665
     638:	00000719 	.word	0x00000719
     63c:	40000400 	.word	0x40000400

00000640 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     640:	4b06      	ldr	r3, [pc, #24]	; (65c <system_gclk_init+0x1c>)
     642:	6999      	ldr	r1, [r3, #24]
     644:	2208      	movs	r2, #8
     646:	430a      	orrs	r2, r1
     648:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     64a:	2201      	movs	r2, #1
     64c:	4b04      	ldr	r3, [pc, #16]	; (660 <system_gclk_init+0x20>)
     64e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     650:	1c19      	adds	r1, r3, #0
     652:	780b      	ldrb	r3, [r1, #0]
     654:	4213      	tst	r3, r2
     656:	d1fc      	bne.n	652 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     658:	4770      	bx	lr
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	40000400 	.word	0x40000400
     660:	40000c00 	.word	0x40000c00

00000664 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     666:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     668:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     66a:	780d      	ldrb	r5, [r1, #0]
     66c:	022d      	lsls	r5, r5, #8
     66e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     670:	784b      	ldrb	r3, [r1, #1]
     672:	2b00      	cmp	r3, #0
     674:	d002      	beq.n	67c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     676:	2380      	movs	r3, #128	; 0x80
     678:	02db      	lsls	r3, r3, #11
     67a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     67c:	7a4b      	ldrb	r3, [r1, #9]
     67e:	2b00      	cmp	r3, #0
     680:	d002      	beq.n	688 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     682:	2380      	movs	r3, #128	; 0x80
     684:	031b      	lsls	r3, r3, #12
     686:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     688:	684c      	ldr	r4, [r1, #4]
     68a:	2c01      	cmp	r4, #1
     68c:	d917      	bls.n	6be <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     68e:	1e63      	subs	r3, r4, #1
     690:	421c      	tst	r4, r3
     692:	d10f      	bne.n	6b4 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     694:	2c02      	cmp	r4, #2
     696:	d906      	bls.n	6a6 <system_gclk_gen_set_config+0x42>
     698:	2302      	movs	r3, #2
     69a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     69c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     69e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     6a0:	429c      	cmp	r4, r3
     6a2:	d8fb      	bhi.n	69c <system_gclk_gen_set_config+0x38>
     6a4:	e000      	b.n	6a8 <system_gclk_gen_set_config+0x44>
     6a6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     6a8:	0217      	lsls	r7, r2, #8
     6aa:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     6ac:	2380      	movs	r3, #128	; 0x80
     6ae:	035b      	lsls	r3, r3, #13
     6b0:	431d      	orrs	r5, r3
     6b2:	e004      	b.n	6be <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     6b4:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     6b6:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     6b8:	2380      	movs	r3, #128	; 0x80
     6ba:	029b      	lsls	r3, r3, #10
     6bc:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     6be:	7a0b      	ldrb	r3, [r1, #8]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d002      	beq.n	6ca <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     6c4:	2380      	movs	r3, #128	; 0x80
     6c6:	039b      	lsls	r3, r3, #14
     6c8:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6ca:	4a0f      	ldr	r2, [pc, #60]	; (708 <system_gclk_gen_set_config+0xa4>)
     6cc:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
     6ce:	b25b      	sxtb	r3, r3
     6d0:	2b00      	cmp	r3, #0
     6d2:	dbfb      	blt.n	6cc <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     6d4:	4b0d      	ldr	r3, [pc, #52]	; (70c <system_gclk_gen_set_config+0xa8>)
     6d6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     6d8:	4b0d      	ldr	r3, [pc, #52]	; (710 <system_gclk_gen_set_config+0xac>)
     6da:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6dc:	4a0a      	ldr	r2, [pc, #40]	; (708 <system_gclk_gen_set_config+0xa4>)
     6de:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     6e0:	b25b      	sxtb	r3, r3
     6e2:	2b00      	cmp	r3, #0
     6e4:	dbfb      	blt.n	6de <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     6e6:	4b08      	ldr	r3, [pc, #32]	; (708 <system_gclk_gen_set_config+0xa4>)
     6e8:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6ea:	1c1a      	adds	r2, r3, #0
     6ec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
     6ee:	b25b      	sxtb	r3, r3
     6f0:	2b00      	cmp	r3, #0
     6f2:	dbfb      	blt.n	6ec <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     6f4:	4b04      	ldr	r3, [pc, #16]	; (708 <system_gclk_gen_set_config+0xa4>)
     6f6:	6859      	ldr	r1, [r3, #4]
     6f8:	2280      	movs	r2, #128	; 0x80
     6fa:	0252      	lsls	r2, r2, #9
     6fc:	400a      	ands	r2, r1
     6fe:	4315      	orrs	r5, r2
     700:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     702:	4b04      	ldr	r3, [pc, #16]	; (714 <system_gclk_gen_set_config+0xb0>)
     704:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     708:	40000c00 	.word	0x40000c00
     70c:	000002f1 	.word	0x000002f1
     710:	40000c08 	.word	0x40000c08
     714:	00000331 	.word	0x00000331

00000718 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     718:	b510      	push	{r4, lr}
     71a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     71c:	4a0b      	ldr	r2, [pc, #44]	; (74c <system_gclk_gen_enable+0x34>)
     71e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     720:	b25b      	sxtb	r3, r3
     722:	2b00      	cmp	r3, #0
     724:	dbfb      	blt.n	71e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     726:	4b0a      	ldr	r3, [pc, #40]	; (750 <system_gclk_gen_enable+0x38>)
     728:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     72a:	4b0a      	ldr	r3, [pc, #40]	; (754 <system_gclk_gen_enable+0x3c>)
     72c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     72e:	4a07      	ldr	r2, [pc, #28]	; (74c <system_gclk_gen_enable+0x34>)
     730:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     732:	b25b      	sxtb	r3, r3
     734:	2b00      	cmp	r3, #0
     736:	dbfb      	blt.n	730 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     738:	4b04      	ldr	r3, [pc, #16]	; (74c <system_gclk_gen_enable+0x34>)
     73a:	6859      	ldr	r1, [r3, #4]
     73c:	2280      	movs	r2, #128	; 0x80
     73e:	0252      	lsls	r2, r2, #9
     740:	430a      	orrs	r2, r1
     742:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     744:	4b04      	ldr	r3, [pc, #16]	; (758 <system_gclk_gen_enable+0x40>)
     746:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     748:	bd10      	pop	{r4, pc}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	40000c00 	.word	0x40000c00
     750:	000002f1 	.word	0x000002f1
     754:	40000c04 	.word	0x40000c04
     758:	00000331 	.word	0x00000331

0000075c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     760:	4a1a      	ldr	r2, [pc, #104]	; (7cc <system_gclk_gen_get_hz+0x70>)
     762:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     764:	b25b      	sxtb	r3, r3
     766:	2b00      	cmp	r3, #0
     768:	dbfb      	blt.n	762 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     76a:	4b19      	ldr	r3, [pc, #100]	; (7d0 <system_gclk_gen_get_hz+0x74>)
     76c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     76e:	4b19      	ldr	r3, [pc, #100]	; (7d4 <system_gclk_gen_get_hz+0x78>)
     770:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     772:	4a16      	ldr	r2, [pc, #88]	; (7cc <system_gclk_gen_get_hz+0x70>)
     774:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     776:	b25b      	sxtb	r3, r3
     778:	2b00      	cmp	r3, #0
     77a:	dbfb      	blt.n	774 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     77c:	4e13      	ldr	r6, [pc, #76]	; (7cc <system_gclk_gen_get_hz+0x70>)
     77e:	6870      	ldr	r0, [r6, #4]
     780:	04c0      	lsls	r0, r0, #19
     782:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     784:	4b14      	ldr	r3, [pc, #80]	; (7d8 <system_gclk_gen_get_hz+0x7c>)
     786:	4798      	blx	r3
     788:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     78a:	4b12      	ldr	r3, [pc, #72]	; (7d4 <system_gclk_gen_get_hz+0x78>)
     78c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     78e:	6876      	ldr	r6, [r6, #4]
     790:	02f6      	lsls	r6, r6, #11
     792:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     794:	4b11      	ldr	r3, [pc, #68]	; (7dc <system_gclk_gen_get_hz+0x80>)
     796:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     798:	4a0c      	ldr	r2, [pc, #48]	; (7cc <system_gclk_gen_get_hz+0x70>)
     79a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
     79c:	b25b      	sxtb	r3, r3
     79e:	2b00      	cmp	r3, #0
     7a0:	dbfb      	blt.n	79a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     7a2:	4b0a      	ldr	r3, [pc, #40]	; (7cc <system_gclk_gen_get_hz+0x70>)
     7a4:	689c      	ldr	r4, [r3, #8]
     7a6:	0a24      	lsrs	r4, r4, #8
     7a8:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     7aa:	4b0d      	ldr	r3, [pc, #52]	; (7e0 <system_gclk_gen_get_hz+0x84>)
     7ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     7ae:	2e00      	cmp	r6, #0
     7b0:	d107      	bne.n	7c2 <system_gclk_gen_get_hz+0x66>
     7b2:	2c01      	cmp	r4, #1
     7b4:	d907      	bls.n	7c6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     7b6:	1c28      	adds	r0, r5, #0
     7b8:	1c21      	adds	r1, r4, #0
     7ba:	4b0a      	ldr	r3, [pc, #40]	; (7e4 <system_gclk_gen_get_hz+0x88>)
     7bc:	4798      	blx	r3
     7be:	1c05      	adds	r5, r0, #0
     7c0:	e001      	b.n	7c6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     7c2:	3401      	adds	r4, #1
     7c4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     7c6:	1c28      	adds	r0, r5, #0
     7c8:	bd70      	pop	{r4, r5, r6, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	40000c00 	.word	0x40000c00
     7d0:	000002f1 	.word	0x000002f1
     7d4:	40000c04 	.word	0x40000c04
     7d8:	0000041d 	.word	0x0000041d
     7dc:	40000c08 	.word	0x40000c08
     7e0:	00000331 	.word	0x00000331
     7e4:	00002231 	.word	0x00002231

000007e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     7e8:	b510      	push	{r4, lr}
     7ea:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     7ec:	4b06      	ldr	r3, [pc, #24]	; (808 <system_gclk_chan_enable+0x20>)
     7ee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     7f0:	4b06      	ldr	r3, [pc, #24]	; (80c <system_gclk_chan_enable+0x24>)
     7f2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <system_gclk_chan_enable+0x28>)
     7f6:	8859      	ldrh	r1, [r3, #2]
     7f8:	2280      	movs	r2, #128	; 0x80
     7fa:	01d2      	lsls	r2, r2, #7
     7fc:	430a      	orrs	r2, r1
     7fe:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <system_gclk_chan_enable+0x2c>)
     802:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     804:	bd10      	pop	{r4, pc}
     806:	46c0      	nop			; (mov r8, r8)
     808:	000002f1 	.word	0x000002f1
     80c:	40000c02 	.word	0x40000c02
     810:	40000c00 	.word	0x40000c00
     814:	00000331 	.word	0x00000331

00000818 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     818:	b510      	push	{r4, lr}
     81a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     81c:	4b0f      	ldr	r3, [pc, #60]	; (85c <system_gclk_chan_disable+0x44>)
     81e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     820:	4b0f      	ldr	r3, [pc, #60]	; (860 <system_gclk_chan_disable+0x48>)
     822:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     824:	4b0f      	ldr	r3, [pc, #60]	; (864 <system_gclk_chan_disable+0x4c>)
     826:	8858      	ldrh	r0, [r3, #2]
     828:	0500      	lsls	r0, r0, #20
     82a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     82c:	8859      	ldrh	r1, [r3, #2]
     82e:	4a0e      	ldr	r2, [pc, #56]	; (868 <system_gclk_chan_disable+0x50>)
     830:	400a      	ands	r2, r1
     832:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     834:	8859      	ldrh	r1, [r3, #2]
     836:	4a0d      	ldr	r2, [pc, #52]	; (86c <system_gclk_chan_disable+0x54>)
     838:	400a      	ands	r2, r1
     83a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     83c:	1c19      	adds	r1, r3, #0
     83e:	2280      	movs	r2, #128	; 0x80
     840:	01d2      	lsls	r2, r2, #7
     842:	884b      	ldrh	r3, [r1, #2]
     844:	4213      	tst	r3, r2
     846:	d1fc      	bne.n	842 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <system_gclk_chan_disable+0x4c>)
     84a:	0201      	lsls	r1, r0, #8
     84c:	8858      	ldrh	r0, [r3, #2]
     84e:	4a06      	ldr	r2, [pc, #24]	; (868 <system_gclk_chan_disable+0x50>)
     850:	4002      	ands	r2, r0
     852:	430a      	orrs	r2, r1
     854:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     856:	4b06      	ldr	r3, [pc, #24]	; (870 <system_gclk_chan_disable+0x58>)
     858:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     85a:	bd10      	pop	{r4, pc}
     85c:	000002f1 	.word	0x000002f1
     860:	40000c02 	.word	0x40000c02
     864:	40000c00 	.word	0x40000c00
     868:	fffff0ff 	.word	0xfffff0ff
     86c:	ffffbfff 	.word	0xffffbfff
     870:	00000331 	.word	0x00000331

00000874 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     874:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     876:	780c      	ldrb	r4, [r1, #0]
     878:	0224      	lsls	r4, r4, #8
     87a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     87c:	4b02      	ldr	r3, [pc, #8]	; (888 <system_gclk_chan_set_config+0x14>)
     87e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     880:	b2a4      	uxth	r4, r4
     882:	4b02      	ldr	r3, [pc, #8]	; (88c <system_gclk_chan_set_config+0x18>)
     884:	805c      	strh	r4, [r3, #2]
}
     886:	bd10      	pop	{r4, pc}
     888:	00000819 	.word	0x00000819
     88c:	40000c00 	.word	0x40000c00

00000890 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     890:	b510      	push	{r4, lr}
     892:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     894:	4b06      	ldr	r3, [pc, #24]	; (8b0 <system_gclk_chan_get_hz+0x20>)
     896:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     898:	4b06      	ldr	r3, [pc, #24]	; (8b4 <system_gclk_chan_get_hz+0x24>)
     89a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     89c:	4b06      	ldr	r3, [pc, #24]	; (8b8 <system_gclk_chan_get_hz+0x28>)
     89e:	885c      	ldrh	r4, [r3, #2]
     8a0:	0524      	lsls	r4, r4, #20
     8a2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     8a4:	4b05      	ldr	r3, [pc, #20]	; (8bc <system_gclk_chan_get_hz+0x2c>)
     8a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     8a8:	1c20      	adds	r0, r4, #0
     8aa:	4b05      	ldr	r3, [pc, #20]	; (8c0 <system_gclk_chan_get_hz+0x30>)
     8ac:	4798      	blx	r3
}
     8ae:	bd10      	pop	{r4, pc}
     8b0:	000002f1 	.word	0x000002f1
     8b4:	40000c02 	.word	0x40000c02
     8b8:	40000c00 	.word	0x40000c00
     8bc:	00000331 	.word	0x00000331
     8c0:	0000075d 	.word	0x0000075d

000008c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     8c4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     8c6:	78d3      	ldrb	r3, [r2, #3]
     8c8:	2b00      	cmp	r3, #0
     8ca:	d11e      	bne.n	90a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     8cc:	7813      	ldrb	r3, [r2, #0]
     8ce:	2b80      	cmp	r3, #128	; 0x80
     8d0:	d004      	beq.n	8dc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     8d2:	061b      	lsls	r3, r3, #24
     8d4:	2480      	movs	r4, #128	; 0x80
     8d6:	0264      	lsls	r4, r4, #9
     8d8:	4323      	orrs	r3, r4
     8da:	e000      	b.n	8de <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     8dc:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     8de:	7854      	ldrb	r4, [r2, #1]
     8e0:	2502      	movs	r5, #2
     8e2:	43ac      	bics	r4, r5
     8e4:	d10a      	bne.n	8fc <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     8e6:	7894      	ldrb	r4, [r2, #2]
     8e8:	2c00      	cmp	r4, #0
     8ea:	d103      	bne.n	8f4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     8ec:	2480      	movs	r4, #128	; 0x80
     8ee:	02a4      	lsls	r4, r4, #10
     8f0:	4323      	orrs	r3, r4
     8f2:	e002      	b.n	8fa <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     8f4:	24c0      	movs	r4, #192	; 0xc0
     8f6:	02e4      	lsls	r4, r4, #11
     8f8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     8fa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     8fc:	7854      	ldrb	r4, [r2, #1]
     8fe:	3c01      	subs	r4, #1
     900:	2c01      	cmp	r4, #1
     902:	d804      	bhi.n	90e <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     904:	4c11      	ldr	r4, [pc, #68]	; (94c <_system_pinmux_config+0x88>)
     906:	4023      	ands	r3, r4
     908:	e001      	b.n	90e <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     90a:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     90c:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     90e:	040d      	lsls	r5, r1, #16
     910:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     912:	24a0      	movs	r4, #160	; 0xa0
     914:	05e4      	lsls	r4, r4, #23
     916:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     918:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     91a:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
     91c:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     91e:	24d0      	movs	r4, #208	; 0xd0
     920:	0624      	lsls	r4, r4, #24
     922:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     924:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     926:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     928:	78d4      	ldrb	r4, [r2, #3]
     92a:	2c00      	cmp	r4, #0
     92c:	d10c      	bne.n	948 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     92e:	035c      	lsls	r4, r3, #13
     930:	d505      	bpl.n	93e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     932:	7893      	ldrb	r3, [r2, #2]
     934:	2b01      	cmp	r3, #1
     936:	d101      	bne.n	93c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
     938:	6181      	str	r1, [r0, #24]
     93a:	e000      	b.n	93e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
     93c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     93e:	7853      	ldrb	r3, [r2, #1]
     940:	3b01      	subs	r3, #1
     942:	2b01      	cmp	r3, #1
     944:	d800      	bhi.n	948 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     946:	6081      	str	r1, [r0, #8]
		}
	}
}
     948:	bd30      	pop	{r4, r5, pc}
     94a:	46c0      	nop			; (mov r8, r8)
     94c:	fffbffff 	.word	0xfffbffff

00000950 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     950:	b508      	push	{r3, lr}
     952:	1c03      	adds	r3, r0, #0
     954:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     956:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     958:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     95a:	2900      	cmp	r1, #0
     95c:	d103      	bne.n	966 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     95e:	0958      	lsrs	r0, r3, #5
     960:	01c0      	lsls	r0, r0, #7
     962:	4904      	ldr	r1, [pc, #16]	; (974 <system_pinmux_pin_set_config+0x24>)
     964:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     966:	211f      	movs	r1, #31
     968:	400b      	ands	r3, r1
     96a:	2101      	movs	r1, #1
     96c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
     96e:	4b02      	ldr	r3, [pc, #8]	; (978 <system_pinmux_pin_set_config+0x28>)
     970:	4798      	blx	r3
}
     972:	bd08      	pop	{r3, pc}
     974:	41004400 	.word	0x41004400
     978:	000008c5 	.word	0x000008c5

0000097c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     97c:	4770      	bx	lr
     97e:	46c0      	nop			; (mov r8, r8)

00000980 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     980:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     982:	4b04      	ldr	r3, [pc, #16]	; (994 <system_init+0x14>)
     984:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     986:	4b04      	ldr	r3, [pc, #16]	; (998 <system_init+0x18>)
     988:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     98a:	4b04      	ldr	r3, [pc, #16]	; (99c <system_init+0x1c>)
     98c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     98e:	4b04      	ldr	r3, [pc, #16]	; (9a0 <system_init+0x20>)
     990:	4798      	blx	r3
}
     992:	bd08      	pop	{r3, pc}
     994:	00000589 	.word	0x00000589
     998:	00000361 	.word	0x00000361
     99c:	0000097d 	.word	0x0000097d
     9a0:	00000131 	.word	0x00000131

000009a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     9a4:	e7fe      	b.n	9a4 <Dummy_Handler>
     9a6:	46c0      	nop			; (mov r8, r8)

000009a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     9a8:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     9aa:	4b1c      	ldr	r3, [pc, #112]	; (a1c <Reset_Handler+0x74>)
     9ac:	4a1c      	ldr	r2, [pc, #112]	; (a20 <Reset_Handler+0x78>)
     9ae:	429a      	cmp	r2, r3
     9b0:	d003      	beq.n	9ba <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     9b2:	4b1c      	ldr	r3, [pc, #112]	; (a24 <Reset_Handler+0x7c>)
     9b4:	4a19      	ldr	r2, [pc, #100]	; (a1c <Reset_Handler+0x74>)
     9b6:	429a      	cmp	r2, r3
     9b8:	d304      	bcc.n	9c4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     9ba:	4b1b      	ldr	r3, [pc, #108]	; (a28 <Reset_Handler+0x80>)
     9bc:	4a1b      	ldr	r2, [pc, #108]	; (a2c <Reset_Handler+0x84>)
     9be:	429a      	cmp	r2, r3
     9c0:	d310      	bcc.n	9e4 <Reset_Handler+0x3c>
     9c2:	e01b      	b.n	9fc <Reset_Handler+0x54>
     9c4:	4b1a      	ldr	r3, [pc, #104]	; (a30 <Reset_Handler+0x88>)
     9c6:	4817      	ldr	r0, [pc, #92]	; (a24 <Reset_Handler+0x7c>)
     9c8:	3003      	adds	r0, #3
     9ca:	1ac0      	subs	r0, r0, r3
     9cc:	0880      	lsrs	r0, r0, #2
     9ce:	3001      	adds	r0, #1
     9d0:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     9d2:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
     9d4:	4911      	ldr	r1, [pc, #68]	; (a1c <Reset_Handler+0x74>)
     9d6:	4a12      	ldr	r2, [pc, #72]	; (a20 <Reset_Handler+0x78>)
     9d8:	58d4      	ldr	r4, [r2, r3]
     9da:	50cc      	str	r4, [r1, r3]
     9dc:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     9de:	4283      	cmp	r3, r0
     9e0:	d1fa      	bne.n	9d8 <Reset_Handler+0x30>
     9e2:	e7ea      	b.n	9ba <Reset_Handler+0x12>
     9e4:	4b11      	ldr	r3, [pc, #68]	; (a2c <Reset_Handler+0x84>)
     9e6:	1d1a      	adds	r2, r3, #4
     9e8:	490f      	ldr	r1, [pc, #60]	; (a28 <Reset_Handler+0x80>)
     9ea:	3103      	adds	r1, #3
     9ec:	1a89      	subs	r1, r1, r2
     9ee:	0889      	lsrs	r1, r1, #2
     9f0:	0089      	lsls	r1, r1, #2
     9f2:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
     9f4:	2100      	movs	r1, #0
     9f6:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     9f8:	4293      	cmp	r3, r2
     9fa:	d1fc      	bne.n	9f6 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     9fc:	4b0d      	ldr	r3, [pc, #52]	; (a34 <Reset_Handler+0x8c>)
     9fe:	217f      	movs	r1, #127	; 0x7f
     a00:	4a0d      	ldr	r2, [pc, #52]	; (a38 <Reset_Handler+0x90>)
     a02:	438a      	bics	r2, r1
     a04:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     a06:	4b0d      	ldr	r3, [pc, #52]	; (a3c <Reset_Handler+0x94>)
     a08:	6859      	ldr	r1, [r3, #4]
     a0a:	2280      	movs	r2, #128	; 0x80
     a0c:	430a      	orrs	r2, r1
     a0e:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
     a10:	4b0b      	ldr	r3, [pc, #44]	; (a40 <Reset_Handler+0x98>)
     a12:	4798      	blx	r3

        /* Branch to main function */
        main();
     a14:	4b0b      	ldr	r3, [pc, #44]	; (a44 <Reset_Handler+0x9c>)
     a16:	4798      	blx	r3
     a18:	e7fe      	b.n	a18 <Reset_Handler+0x70>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	20000000 	.word	0x20000000
     a20:	00002418 	.word	0x00002418
     a24:	2000000c 	.word	0x2000000c
     a28:	20003c94 	.word	0x20003c94
     a2c:	2000000c 	.word	0x2000000c
     a30:	20000004 	.word	0x20000004
     a34:	e000ed00 	.word	0xe000ed00
     a38:	00000000 	.word	0x00000000
     a3c:	41004000 	.word	0x41004000
     a40:	000022d1 	.word	0x000022d1
     a44:	00002215 	.word	0x00002215

00000a48 <xEventGroupCreate>:
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
     a48:	b510      	push	{r4, lr}
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     a4a:	2018      	movs	r0, #24
     a4c:	4b04      	ldr	r3, [pc, #16]	; (a60 <xEventGroupCreate+0x18>)
     a4e:	4798      	blx	r3
     a50:	1e04      	subs	r4, r0, #0
	if( pxEventBits != NULL )
     a52:	d003      	beq.n	a5c <xEventGroupCreate+0x14>
	{
		pxEventBits->uxEventBits = 0;
     a54:	2300      	movs	r3, #0
     a56:	c008      	stmia	r0!, {r3}
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     a58:	4b02      	ldr	r3, [pc, #8]	; (a64 <xEventGroupCreate+0x1c>)
     a5a:	4798      	blx	r3
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
}
     a5c:	1c20      	adds	r0, r4, #0
     a5e:	bd10      	pop	{r4, pc}
     a60:	00000c9d 	.word	0x00000c9d
     a64:	00000a69 	.word	0x00000a69

00000a68 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a68:	1c03      	adds	r3, r0, #0
     a6a:	3308      	adds	r3, #8
     a6c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     a6e:	2201      	movs	r2, #1
     a70:	4252      	negs	r2, r2
     a72:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a74:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a76:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a78:	2300      	movs	r3, #0
     a7a:	6003      	str	r3, [r0, #0]
}
     a7c:	4770      	bx	lr
     a7e:	46c0      	nop			; (mov r8, r8)

00000a80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     a80:	2300      	movs	r3, #0
     a82:	6103      	str	r3, [r0, #16]
}
     a84:	4770      	bx	lr
     a86:	46c0      	nop			; (mov r8, r8)

00000a88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     a88:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     a8a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a8c:	689a      	ldr	r2, [r3, #8]
     a8e:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     a90:	689a      	ldr	r2, [r3, #8]
     a92:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     a94:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     a96:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     a98:	6803      	ldr	r3, [r0, #0]
     a9a:	3301      	adds	r3, #1
     a9c:	6003      	str	r3, [r0, #0]
}
     a9e:	4770      	bx	lr

00000aa0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     aa0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     aa2:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     aa4:	1c02      	adds	r2, r0, #0
     aa6:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     aa8:	1c63      	adds	r3, r4, #1
     aaa:	d101      	bne.n	ab0 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     aac:	6902      	ldr	r2, [r0, #16]
     aae:	e005      	b.n	abc <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     ab0:	6853      	ldr	r3, [r2, #4]
     ab2:	681d      	ldr	r5, [r3, #0]
     ab4:	42ac      	cmp	r4, r5
     ab6:	d301      	bcc.n	abc <vListInsert+0x1c>
     ab8:	1c1a      	adds	r2, r3, #0
     aba:	e7f9      	b.n	ab0 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     abc:	6853      	ldr	r3, [r2, #4]
     abe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ac0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     ac2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     ac4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ac6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     ac8:	6803      	ldr	r3, [r0, #0]
     aca:	3301      	adds	r3, #1
     acc:	6003      	str	r3, [r0, #0]
}
     ace:	bd30      	pop	{r4, r5, pc}

00000ad0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     ad0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     ad2:	6842      	ldr	r2, [r0, #4]
     ad4:	6881      	ldr	r1, [r0, #8]
     ad6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     ad8:	6882      	ldr	r2, [r0, #8]
     ada:	6841      	ldr	r1, [r0, #4]
     adc:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     ade:	685a      	ldr	r2, [r3, #4]
     ae0:	4282      	cmp	r2, r0
     ae2:	d101      	bne.n	ae8 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     ae4:	6892      	ldr	r2, [r2, #8]
     ae6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     ae8:	2200      	movs	r2, #0
     aea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     aec:	6818      	ldr	r0, [r3, #0]
     aee:	3801      	subs	r0, #1
     af0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
     af2:	4770      	bx	lr

00000af4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     af4:	4b03      	ldr	r3, [pc, #12]	; (b04 <prvTaskExitError+0x10>)
     af6:	681b      	ldr	r3, [r3, #0]
     af8:	3301      	adds	r3, #1
     afa:	d001      	beq.n	b00 <prvTaskExitError+0xc>
     afc:	b672      	cpsid	i
     afe:	e7fe      	b.n	afe <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     b00:	b672      	cpsid	i
     b02:	e7fe      	b.n	b02 <prvTaskExitError+0xe>
     b04:	20000004 	.word	0x20000004

00000b08 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     b08:	4a06      	ldr	r2, [pc, #24]	; (b24 <pxCurrentTCBConst2>)
     b0a:	6813      	ldr	r3, [r2, #0]
     b0c:	6818      	ldr	r0, [r3, #0]
     b0e:	3020      	adds	r0, #32
     b10:	f380 8809 	msr	PSP, r0
     b14:	2002      	movs	r0, #2
     b16:	f380 8814 	msr	CONTROL, r0
     b1a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     b1c:	46ae      	mov	lr, r5
     b1e:	b662      	cpsie	i
     b20:	bd00      	pop	{pc}
     b22:	46c0      	nop			; (mov r8, r8)

00000b24 <pxCurrentTCBConst2>:
     b24:	20003bb4 	.word	0x20003bb4

00000b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     b28:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     b2a:	1f03      	subs	r3, r0, #4
     b2c:	2480      	movs	r4, #128	; 0x80
     b2e:	0464      	lsls	r4, r4, #17
     b30:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     b32:	3b04      	subs	r3, #4
     b34:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     b36:	3b04      	subs	r3, #4
     b38:	4902      	ldr	r1, [pc, #8]	; (b44 <pxPortInitialiseStack+0x1c>)
     b3a:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     b3c:	3b14      	subs	r3, #20
     b3e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
     b40:	3840      	subs	r0, #64	; 0x40
}
     b42:	bd10      	pop	{r4, pc}
     b44:	00000af5 	.word	0x00000af5

00000b48 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
     b48:	4770      	bx	lr
     b4a:	46c0      	nop			; (mov r8, r8)

00000b4c <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     b4c:	2280      	movs	r2, #128	; 0x80
     b4e:	0552      	lsls	r2, r2, #21
     b50:	4b03      	ldr	r3, [pc, #12]	; (b60 <vPortYield+0x14>)
     b52:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
     b54:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     b58:	f3bf 8f6f 	isb	sy
}
     b5c:	4770      	bx	lr
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	e000ed04 	.word	0xe000ed04

00000b64 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
     b64:	b672      	cpsid	i
    uxCriticalNesting++;
     b66:	4b04      	ldr	r3, [pc, #16]	; (b78 <vPortEnterCritical+0x14>)
     b68:	681a      	ldr	r2, [r3, #0]
     b6a:	3201      	adds	r2, #1
     b6c:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
     b6e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     b72:	f3bf 8f6f 	isb	sy
}
     b76:	4770      	bx	lr
     b78:	20000004 	.word	0x20000004

00000b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
     b7c:	4b06      	ldr	r3, [pc, #24]	; (b98 <vPortExitCritical+0x1c>)
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	2b00      	cmp	r3, #0
     b82:	d101      	bne.n	b88 <vPortExitCritical+0xc>
     b84:	b672      	cpsid	i
     b86:	e7fe      	b.n	b86 <vPortExitCritical+0xa>
    uxCriticalNesting--;
     b88:	3b01      	subs	r3, #1
     b8a:	4a03      	ldr	r2, [pc, #12]	; (b98 <vPortExitCritical+0x1c>)
     b8c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     b8e:	2b00      	cmp	r3, #0
     b90:	d100      	bne.n	b94 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     b92:	b662      	cpsie	i
    }
}
     b94:	4770      	bx	lr
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	20000004 	.word	0x20000004

00000b9c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     b9c:	f3ef 8010 	mrs	r0, PRIMASK
     ba0:	b672      	cpsid	i
     ba2:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
     ba4:	2000      	movs	r0, #0
     ba6:	46c0      	nop			; (mov r8, r8)

00000ba8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
     ba8:	f380 8810 	msr	PRIMASK, r0
     bac:	4770      	bx	lr
     bae:	46c0      	nop			; (mov r8, r8)

00000bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     bb0:	f3ef 8009 	mrs	r0, PSP
     bb4:	4b0e      	ldr	r3, [pc, #56]	; (bf0 <pxCurrentTCBConst>)
     bb6:	681a      	ldr	r2, [r3, #0]
     bb8:	3820      	subs	r0, #32
     bba:	6010      	str	r0, [r2, #0]
     bbc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     bbe:	4644      	mov	r4, r8
     bc0:	464d      	mov	r5, r9
     bc2:	4656      	mov	r6, sl
     bc4:	465f      	mov	r7, fp
     bc6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     bc8:	b508      	push	{r3, lr}
     bca:	b672      	cpsid	i
     bcc:	f000 ff12 	bl	19f4 <vTaskSwitchContext>
     bd0:	b662      	cpsie	i
     bd2:	bc0c      	pop	{r2, r3}
     bd4:	6811      	ldr	r1, [r2, #0]
     bd6:	6808      	ldr	r0, [r1, #0]
     bd8:	3010      	adds	r0, #16
     bda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     bdc:	46a0      	mov	r8, r4
     bde:	46a9      	mov	r9, r5
     be0:	46b2      	mov	sl, r6
     be2:	46bb      	mov	fp, r7
     be4:	f380 8809 	msr	PSP, r0
     be8:	3820      	subs	r0, #32
     bea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     bec:	4718      	bx	r3
     bee:	46c0      	nop			; (mov r8, r8)

00000bf0 <pxCurrentTCBConst>:
     bf0:	20003bb4 	.word	0x20003bb4

00000bf4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     bf4:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     bf6:	4b07      	ldr	r3, [pc, #28]	; (c14 <SysTick_Handler+0x20>)
     bf8:	4798      	blx	r3
     bfa:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     bfc:	4b06      	ldr	r3, [pc, #24]	; (c18 <SysTick_Handler+0x24>)
     bfe:	4798      	blx	r3
     c00:	2800      	cmp	r0, #0
     c02:	d003      	beq.n	c0c <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     c04:	2280      	movs	r2, #128	; 0x80
     c06:	0552      	lsls	r2, r2, #21
     c08:	4b04      	ldr	r3, [pc, #16]	; (c1c <SysTick_Handler+0x28>)
     c0a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     c0c:	1c20      	adds	r0, r4, #0
     c0e:	4b04      	ldr	r3, [pc, #16]	; (c20 <SysTick_Handler+0x2c>)
     c10:	4798      	blx	r3
}
     c12:	bd10      	pop	{r4, pc}
     c14:	00000b9d 	.word	0x00000b9d
     c18:	000016f1 	.word	0x000016f1
     c1c:	e000ed04 	.word	0xe000ed04
     c20:	00000ba9 	.word	0x00000ba9

00000c24 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
     c24:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
     c26:	2200      	movs	r2, #0
     c28:	4b07      	ldr	r3, [pc, #28]	; (c48 <vPortSetupTimerInterrupt+0x24>)
     c2a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     c2c:	2000      	movs	r0, #0
     c2e:	4b07      	ldr	r3, [pc, #28]	; (c4c <vPortSetupTimerInterrupt+0x28>)
     c30:	4798      	blx	r3
     c32:	21c8      	movs	r1, #200	; 0xc8
     c34:	4b06      	ldr	r3, [pc, #24]	; (c50 <vPortSetupTimerInterrupt+0x2c>)
     c36:	4798      	blx	r3
     c38:	3801      	subs	r0, #1
     c3a:	4b06      	ldr	r3, [pc, #24]	; (c54 <vPortSetupTimerInterrupt+0x30>)
     c3c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     c3e:	2207      	movs	r2, #7
     c40:	4b05      	ldr	r3, [pc, #20]	; (c58 <vPortSetupTimerInterrupt+0x34>)
     c42:	601a      	str	r2, [r3, #0]
}
     c44:	bd08      	pop	{r3, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	e000e018 	.word	0xe000e018
     c4c:	0000075d 	.word	0x0000075d
     c50:	00002231 	.word	0x00002231
     c54:	e000e014 	.word	0xe000e014
     c58:	e000e010 	.word	0xe000e010

00000c5c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     c5c:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     c5e:	4b0a      	ldr	r3, [pc, #40]	; (c88 <xPortStartScheduler+0x2c>)
     c60:	6819      	ldr	r1, [r3, #0]
     c62:	22ff      	movs	r2, #255	; 0xff
     c64:	0412      	lsls	r2, r2, #16
     c66:	430a      	orrs	r2, r1
     c68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     c6a:	6819      	ldr	r1, [r3, #0]
     c6c:	22ff      	movs	r2, #255	; 0xff
     c6e:	0612      	lsls	r2, r2, #24
     c70:	430a      	orrs	r2, r1
     c72:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
     c74:	4b05      	ldr	r3, [pc, #20]	; (c8c <xPortStartScheduler+0x30>)
     c76:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     c78:	2200      	movs	r2, #0
     c7a:	4b05      	ldr	r3, [pc, #20]	; (c90 <xPortStartScheduler+0x34>)
     c7c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     c7e:	4b05      	ldr	r3, [pc, #20]	; (c94 <xPortStartScheduler+0x38>)
     c80:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
     c82:	4b05      	ldr	r3, [pc, #20]	; (c98 <xPortStartScheduler+0x3c>)
     c84:	4798      	blx	r3
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	e000ed20 	.word	0xe000ed20
     c8c:	00000c25 	.word	0x00000c25
     c90:	20000004 	.word	0x20000004
     c94:	00000b09 	.word	0x00000b09
     c98:	00000af5 	.word	0x00000af5

00000c9c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     c9c:	b538      	push	{r3, r4, r5, lr}
     c9e:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     ca0:	0743      	lsls	r3, r0, #29
     ca2:	d002      	beq.n	caa <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     ca4:	2307      	movs	r3, #7
     ca6:	439c      	bics	r4, r3
     ca8:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
     caa:	4b10      	ldr	r3, [pc, #64]	; (cec <pvPortMalloc+0x50>)
     cac:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     cae:	4b10      	ldr	r3, [pc, #64]	; (cf0 <pvPortMalloc+0x54>)
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d105      	bne.n	cc2 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     cb6:	2307      	movs	r3, #7
     cb8:	4a0e      	ldr	r2, [pc, #56]	; (cf4 <pvPortMalloc+0x58>)
     cba:	3208      	adds	r2, #8
     cbc:	439a      	bics	r2, r3
     cbe:	4b0c      	ldr	r3, [pc, #48]	; (cf0 <pvPortMalloc+0x54>)
     cc0:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     cc2:	4b0d      	ldr	r3, [pc, #52]	; (cf8 <pvPortMalloc+0x5c>)
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	18e4      	adds	r4, r4, r3
     cc8:	4a0c      	ldr	r2, [pc, #48]	; (cfc <pvPortMalloc+0x60>)
     cca:	4294      	cmp	r4, r2
     ccc:	d807      	bhi.n	cde <pvPortMalloc+0x42>
     cce:	42a3      	cmp	r3, r4
     cd0:	d207      	bcs.n	ce2 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     cd2:	4a07      	ldr	r2, [pc, #28]	; (cf0 <pvPortMalloc+0x54>)
     cd4:	6815      	ldr	r5, [r2, #0]
     cd6:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     cd8:	4b07      	ldr	r3, [pc, #28]	; (cf8 <pvPortMalloc+0x5c>)
     cda:	601c      	str	r4, [r3, #0]
     cdc:	e002      	b.n	ce4 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     cde:	2500      	movs	r5, #0
     ce0:	e000      	b.n	ce4 <pvPortMalloc+0x48>
     ce2:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     ce4:	4b06      	ldr	r3, [pc, #24]	; (d00 <pvPortMalloc+0x64>)
     ce6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
     ce8:	1c28      	adds	r0, r5, #0
     cea:	bd38      	pop	{r3, r4, r5, pc}
     cec:	000016c1 	.word	0x000016c1
     cf0:	20003afc 	.word	0x20003afc
     cf4:	20000064 	.word	0x20000064
     cf8:	20000060 	.word	0x20000060
     cfc:	00003a8f 	.word	0x00003a8f
     d00:	0000181d 	.word	0x0000181d

00000d04 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     d04:	2800      	cmp	r0, #0
     d06:	d001      	beq.n	d0c <vPortFree+0x8>
     d08:	b672      	cpsid	i
     d0a:	e7fe      	b.n	d0a <vPortFree+0x6>
}
     d0c:	4770      	bx	lr
     d0e:	46c0      	nop			; (mov r8, r8)

00000d10 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     d10:	b538      	push	{r3, r4, r5, lr}
     d12:	1c04      	adds	r4, r0, #0
     d14:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     d16:	6c02      	ldr	r2, [r0, #64]	; 0x40
     d18:	2a00      	cmp	r2, #0
     d1a:	d108      	bne.n	d2e <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     d1c:	6801      	ldr	r1, [r0, #0]
     d1e:	2900      	cmp	r1, #0
     d20:	d12a      	bne.n	d78 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     d22:	6840      	ldr	r0, [r0, #4]
     d24:	4b16      	ldr	r3, [pc, #88]	; (d80 <prvCopyDataToQueue+0x70>)
     d26:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     d28:	2300      	movs	r3, #0
     d2a:	6063      	str	r3, [r4, #4]
     d2c:	e024      	b.n	d78 <prvCopyDataToQueue+0x68>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     d2e:	2d00      	cmp	r5, #0
     d30:	d10c      	bne.n	d4c <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     d32:	6880      	ldr	r0, [r0, #8]
     d34:	4b13      	ldr	r3, [pc, #76]	; (d84 <prvCopyDataToQueue+0x74>)
     d36:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     d38:	68a2      	ldr	r2, [r4, #8]
     d3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
     d3c:	1853      	adds	r3, r2, r1
     d3e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     d40:	6862      	ldr	r2, [r4, #4]
     d42:	4293      	cmp	r3, r2
     d44:	d318      	bcc.n	d78 <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     d46:	6823      	ldr	r3, [r4, #0]
     d48:	60a3      	str	r3, [r4, #8]
     d4a:	e015      	b.n	d78 <prvCopyDataToQueue+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     d4c:	68c0      	ldr	r0, [r0, #12]
     d4e:	4b0d      	ldr	r3, [pc, #52]	; (d84 <prvCopyDataToQueue+0x74>)
     d50:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     d52:	6c21      	ldr	r1, [r4, #64]	; 0x40
     d54:	424a      	negs	r2, r1
     d56:	68e1      	ldr	r1, [r4, #12]
     d58:	188b      	adds	r3, r1, r2
     d5a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     d5c:	6821      	ldr	r1, [r4, #0]
     d5e:	428b      	cmp	r3, r1
     d60:	d202      	bcs.n	d68 <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     d62:	6863      	ldr	r3, [r4, #4]
     d64:	189a      	adds	r2, r3, r2
     d66:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     d68:	2d02      	cmp	r5, #2
     d6a:	d105      	bne.n	d78 <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     d6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     d6e:	2b00      	cmp	r3, #0
     d70:	d002      	beq.n	d78 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
     d72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     d74:	3b01      	subs	r3, #1
     d76:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
     d78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     d7a:	3301      	adds	r3, #1
     d7c:	63a3      	str	r3, [r4, #56]	; 0x38
}
     d7e:	bd38      	pop	{r3, r4, r5, pc}
     d80:	00001cf5 	.word	0x00001cf5
     d84:	0000231d 	.word	0x0000231d

00000d88 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
     d88:	b510      	push	{r4, lr}
     d8a:	b082      	sub	sp, #8
     d8c:	9001      	str	r0, [sp, #4]
     d8e:	1c0a      	adds	r2, r1, #0
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     d90:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
     d92:	2c00      	cmp	r4, #0
     d94:	d101      	bne.n	d9a <prvNotifyQueueSetContainer+0x12>
     d96:	b672      	cpsid	i
     d98:	e7fe      	b.n	d98 <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     d9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     d9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     d9e:	4299      	cmp	r1, r3
     da0:	d301      	bcc.n	da6 <prvNotifyQueueSetContainer+0x1e>
     da2:	b672      	cpsid	i
     da4:	e7fe      	b.n	da4 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     da6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     da8:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     daa:	428b      	cmp	r3, r1
     dac:	d90d      	bls.n	dca <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     dae:	1c20      	adds	r0, r4, #0
     db0:	a901      	add	r1, sp, #4
     db2:	4b07      	ldr	r3, [pc, #28]	; (dd0 <prvNotifyQueueSetContainer+0x48>)
     db4:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     db6:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     dba:	2b00      	cmp	r3, #0
     dbc:	d005      	beq.n	dca <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     dbe:	1c20      	adds	r0, r4, #0
     dc0:	3024      	adds	r0, #36	; 0x24
     dc2:	4b04      	ldr	r3, [pc, #16]	; (dd4 <prvNotifyQueueSetContainer+0x4c>)
     dc4:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     dc6:	1e43      	subs	r3, r0, #1
     dc8:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
     dca:	b002      	add	sp, #8
     dcc:	bd10      	pop	{r4, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	00000d11 	.word	0x00000d11
     dd4:	00001b25 	.word	0x00001b25

00000dd8 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     dd8:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     dda:	6804      	ldr	r4, [r0, #0]
     ddc:	2c00      	cmp	r4, #0
     dde:	d00c      	beq.n	dfa <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     de0:	6c02      	ldr	r2, [r0, #64]	; 0x40
     de2:	68c5      	ldr	r5, [r0, #12]
     de4:	18ab      	adds	r3, r5, r2
     de6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     de8:	6845      	ldr	r5, [r0, #4]
     dea:	42ab      	cmp	r3, r5
     dec:	d300      	bcc.n	df0 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     dee:	60c4      	str	r4, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     df0:	68c3      	ldr	r3, [r0, #12]
     df2:	1c08      	adds	r0, r1, #0
     df4:	1c19      	adds	r1, r3, #0
     df6:	4b01      	ldr	r3, [pc, #4]	; (dfc <prvCopyDataFromQueue+0x24>)
     df8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     dfa:	bd38      	pop	{r3, r4, r5, pc}
     dfc:	0000231d 	.word	0x0000231d

00000e00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e02:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     e04:	4b23      	ldr	r3, [pc, #140]	; (e94 <prvUnlockQueue+0x94>)
     e06:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     e08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e0a:	2b00      	cmp	r3, #0
     e0c:	dd1c      	ble.n	e48 <prvUnlockQueue+0x48>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     e0e:	4e22      	ldr	r6, [pc, #136]	; (e98 <prvUnlockQueue+0x98>)
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     e10:	4d22      	ldr	r5, [pc, #136]	; (e9c <prvUnlockQueue+0x9c>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
     e12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     e14:	2b00      	cmp	r3, #0
     e16:	d007      	beq.n	e28 <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     e18:	1c20      	adds	r0, r4, #0
     e1a:	2100      	movs	r1, #0
     e1c:	47a8      	blx	r5
     e1e:	2801      	cmp	r0, #1
     e20:	d10c      	bne.n	e3c <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
     e22:	4b1f      	ldr	r3, [pc, #124]	; (ea0 <prvUnlockQueue+0xa0>)
     e24:	4798      	blx	r3
     e26:	e009      	b.n	e3c <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e2a:	2b00      	cmp	r3, #0
     e2c:	d00c      	beq.n	e48 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     e2e:	1c20      	adds	r0, r4, #0
     e30:	3024      	adds	r0, #36	; 0x24
     e32:	47b0      	blx	r6
     e34:	2800      	cmp	r0, #0
     e36:	d001      	beq.n	e3c <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
     e38:	4b19      	ldr	r3, [pc, #100]	; (ea0 <prvUnlockQueue+0xa0>)
     e3a:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
     e3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e3e:	3b01      	subs	r3, #1
     e40:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     e42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     e44:	2b00      	cmp	r3, #0
     e46:	dce4      	bgt.n	e12 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
     e48:	2301      	movs	r3, #1
     e4a:	425b      	negs	r3, r3
     e4c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
     e4e:	4b15      	ldr	r3, [pc, #84]	; (ea4 <prvUnlockQueue+0xa4>)
     e50:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     e52:	4b10      	ldr	r3, [pc, #64]	; (e94 <prvUnlockQueue+0x94>)
     e54:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     e56:	6c63      	ldr	r3, [r4, #68]	; 0x44
     e58:	2b00      	cmp	r3, #0
     e5a:	dd15      	ble.n	e88 <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e5c:	6923      	ldr	r3, [r4, #16]
     e5e:	2b00      	cmp	r3, #0
     e60:	d012      	beq.n	e88 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     e62:	1c27      	adds	r7, r4, #0
     e64:	3710      	adds	r7, #16
     e66:	4e0c      	ldr	r6, [pc, #48]	; (e98 <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
     e68:	4d0d      	ldr	r5, [pc, #52]	; (ea0 <prvUnlockQueue+0xa0>)
     e6a:	e002      	b.n	e72 <prvUnlockQueue+0x72>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e6c:	6923      	ldr	r3, [r4, #16]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00a      	beq.n	e88 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     e72:	1c38      	adds	r0, r7, #0
     e74:	47b0      	blx	r6
     e76:	2800      	cmp	r0, #0
     e78:	d000      	beq.n	e7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
     e7a:	47a8      	blx	r5
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
     e7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
     e7e:	3b01      	subs	r3, #1
     e80:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     e82:	6c63      	ldr	r3, [r4, #68]	; 0x44
     e84:	2b00      	cmp	r3, #0
     e86:	dcf1      	bgt.n	e6c <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     e88:	2301      	movs	r3, #1
     e8a:	425b      	negs	r3, r3
     e8c:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     e8e:	4b05      	ldr	r3, [pc, #20]	; (ea4 <prvUnlockQueue+0xa4>)
     e90:	4798      	blx	r3
}
     e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e94:	00000b65 	.word	0x00000b65
     e98:	00001b25 	.word	0x00001b25
     e9c:	00000d89 	.word	0x00000d89
     ea0:	00001c3d 	.word	0x00001c3d
     ea4:	00000b7d 	.word	0x00000b7d

00000ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     ea8:	b538      	push	{r3, r4, r5, lr}
     eaa:	1c04      	adds	r4, r0, #0
     eac:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     eae:	2800      	cmp	r0, #0
     eb0:	d101      	bne.n	eb6 <xQueueGenericReset+0xe>
     eb2:	b672      	cpsid	i
     eb4:	e7fe      	b.n	eb4 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
     eb6:	4b15      	ldr	r3, [pc, #84]	; (f0c <xQueueGenericReset+0x64>)
     eb8:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     eba:	6823      	ldr	r3, [r4, #0]
     ebc:	6c22      	ldr	r2, [r4, #64]	; 0x40
     ebe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
     ec0:	4350      	muls	r0, r2
     ec2:	1819      	adds	r1, r3, r0
     ec4:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     ec6:	2100      	movs	r1, #0
     ec8:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     eca:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     ecc:	1a82      	subs	r2, r0, r2
     ece:	189b      	adds	r3, r3, r2
     ed0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     ed2:	2301      	movs	r3, #1
     ed4:	425b      	negs	r3, r3
     ed6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     ed8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
     eda:	2d00      	cmp	r5, #0
     edc:	d10b      	bne.n	ef6 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     ede:	6921      	ldr	r1, [r4, #16]
     ee0:	2900      	cmp	r1, #0
     ee2:	d00f      	beq.n	f04 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     ee4:	1c20      	adds	r0, r4, #0
     ee6:	3010      	adds	r0, #16
     ee8:	4b09      	ldr	r3, [pc, #36]	; (f10 <xQueueGenericReset+0x68>)
     eea:	4798      	blx	r3
     eec:	2801      	cmp	r0, #1
     eee:	d109      	bne.n	f04 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
     ef0:	4b08      	ldr	r3, [pc, #32]	; (f14 <xQueueGenericReset+0x6c>)
     ef2:	4798      	blx	r3
     ef4:	e006      	b.n	f04 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     ef6:	1c20      	adds	r0, r4, #0
     ef8:	3010      	adds	r0, #16
     efa:	4d07      	ldr	r5, [pc, #28]	; (f18 <xQueueGenericReset+0x70>)
     efc:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     efe:	1c20      	adds	r0, r4, #0
     f00:	3024      	adds	r0, #36	; 0x24
     f02:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
     f04:	4b05      	ldr	r3, [pc, #20]	; (f1c <xQueueGenericReset+0x74>)
     f06:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     f08:	2001      	movs	r0, #1
     f0a:	bd38      	pop	{r3, r4, r5, pc}
     f0c:	00000b65 	.word	0x00000b65
     f10:	00001b25 	.word	0x00001b25
     f14:	00000b4d 	.word	0x00000b4d
     f18:	00000a69 	.word	0x00000a69
     f1c:	00000b7d 	.word	0x00000b7d

00000f20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
     f20:	b570      	push	{r4, r5, r6, lr}
     f22:	1c05      	adds	r5, r0, #0
     f24:	1c0e      	adds	r6, r1, #0
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
     f26:	2800      	cmp	r0, #0
     f28:	d011      	beq.n	f4e <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     f2a:	2050      	movs	r0, #80	; 0x50
     f2c:	4b0e      	ldr	r3, [pc, #56]	; (f68 <xQueueGenericCreate+0x48>)
     f2e:	4798      	blx	r3
     f30:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     f32:	d00c      	beq.n	f4e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     f34:	1c30      	adds	r0, r6, #0
     f36:	4368      	muls	r0, r5
     f38:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
     f3a:	4b0b      	ldr	r3, [pc, #44]	; (f68 <xQueueGenericCreate+0x48>)
     f3c:	4798      	blx	r3
     f3e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     f40:	2800      	cmp	r0, #0
     f42:	d106      	bne.n	f52 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     f44:	1c20      	adds	r0, r4, #0
     f46:	4b09      	ldr	r3, [pc, #36]	; (f6c <xQueueGenericCreate+0x4c>)
     f48:	4798      	blx	r3
     f4a:	e000      	b.n	f4e <xQueueGenericCreate+0x2e>
     f4c:	e7fe      	b.n	f4c <xQueueGenericCreate+0x2c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
     f4e:	b672      	cpsid	i
     f50:	e7fc      	b.n	f4c <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     f52:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     f54:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     f56:	1c20      	adds	r0, r4, #0
     f58:	2101      	movs	r1, #1
     f5a:	4b05      	ldr	r3, [pc, #20]	; (f70 <xQueueGenericCreate+0x50>)
     f5c:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
     f5e:	2300      	movs	r3, #0
     f60:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
     f62:	1c20      	adds	r0, r4, #0
     f64:	bd70      	pop	{r4, r5, r6, pc}
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	00000c9d 	.word	0x00000c9d
     f6c:	00000d05 	.word	0x00000d05
     f70:	00000ea9 	.word	0x00000ea9

00000f74 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     f74:	b5f0      	push	{r4, r5, r6, r7, lr}
     f76:	4657      	mov	r7, sl
     f78:	464e      	mov	r6, r9
     f7a:	4645      	mov	r5, r8
     f7c:	b4e0      	push	{r5, r6, r7}
     f7e:	b084      	sub	sp, #16
     f80:	1c04      	adds	r4, r0, #0
     f82:	1c0e      	adds	r6, r1, #0
     f84:	9201      	str	r2, [sp, #4]
     f86:	1c1d      	adds	r5, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     f88:	2800      	cmp	r0, #0
     f8a:	d101      	bne.n	f90 <xQueueGenericSend+0x1c>
     f8c:	b672      	cpsid	i
     f8e:	e7fe      	b.n	f8e <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     f90:	2900      	cmp	r1, #0
     f92:	d104      	bne.n	f9e <xQueueGenericSend+0x2a>
     f94:	6c02      	ldr	r2, [r0, #64]	; 0x40
     f96:	2a00      	cmp	r2, #0
     f98:	d001      	beq.n	f9e <xQueueGenericSend+0x2a>
     f9a:	b672      	cpsid	i
     f9c:	e7fe      	b.n	f9c <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     f9e:	2d02      	cmp	r5, #2
     fa0:	d104      	bne.n	fac <xQueueGenericSend+0x38>
     fa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     fa4:	2b01      	cmp	r3, #1
     fa6:	d001      	beq.n	fac <xQueueGenericSend+0x38>
     fa8:	b672      	cpsid	i
     faa:	e7fe      	b.n	faa <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     fac:	4b41      	ldr	r3, [pc, #260]	; (10b4 <xQueueGenericSend+0x140>)
     fae:	4798      	blx	r3
     fb0:	2800      	cmp	r0, #0
     fb2:	d102      	bne.n	fba <xQueueGenericSend+0x46>
     fb4:	9a01      	ldr	r2, [sp, #4]
     fb6:	2a00      	cmp	r2, #0
     fb8:	d103      	bne.n	fc2 <xQueueGenericSend+0x4e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     fba:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     fbc:	4b3e      	ldr	r3, [pc, #248]	; (10b8 <xQueueGenericSend+0x144>)
     fbe:	4698      	mov	r8, r3
     fc0:	e001      	b.n	fc6 <xQueueGenericSend+0x52>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     fc2:	b672      	cpsid	i
     fc4:	e7fe      	b.n	fc4 <xQueueGenericSend+0x50>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     fc6:	47c0      	blx	r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     fc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     fca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     fcc:	4293      	cmp	r3, r2
     fce:	d301      	bcc.n	fd4 <xQueueGenericSend+0x60>
     fd0:	2d02      	cmp	r5, #2
     fd2:	d11f      	bne.n	1014 <xQueueGenericSend+0xa0>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     fd4:	1c20      	adds	r0, r4, #0
     fd6:	1c31      	adds	r1, r6, #0
     fd8:	1c2a      	adds	r2, r5, #0
     fda:	4b38      	ldr	r3, [pc, #224]	; (10bc <xQueueGenericSend+0x148>)
     fdc:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
     fde:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     fe0:	2b00      	cmp	r3, #0
     fe2:	d008      	beq.n	ff6 <xQueueGenericSend+0x82>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     fe4:	1c20      	adds	r0, r4, #0
     fe6:	1c29      	adds	r1, r5, #0
     fe8:	4b35      	ldr	r3, [pc, #212]	; (10c0 <xQueueGenericSend+0x14c>)
     fea:	4798      	blx	r3
     fec:	2801      	cmp	r0, #1
     fee:	d10d      	bne.n	100c <xQueueGenericSend+0x98>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
     ff0:	4b34      	ldr	r3, [pc, #208]	; (10c4 <xQueueGenericSend+0x150>)
     ff2:	4798      	blx	r3
     ff4:	e00a      	b.n	100c <xQueueGenericSend+0x98>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     ff6:	6a62      	ldr	r2, [r4, #36]	; 0x24
     ff8:	2a00      	cmp	r2, #0
     ffa:	d007      	beq.n	100c <xQueueGenericSend+0x98>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     ffc:	1c20      	adds	r0, r4, #0
     ffe:	3024      	adds	r0, #36	; 0x24
    1000:	4b31      	ldr	r3, [pc, #196]	; (10c8 <xQueueGenericSend+0x154>)
    1002:	4798      	blx	r3
    1004:	2801      	cmp	r0, #1
    1006:	d101      	bne.n	100c <xQueueGenericSend+0x98>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    1008:	4b2e      	ldr	r3, [pc, #184]	; (10c4 <xQueueGenericSend+0x150>)
    100a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    100c:	4b2f      	ldr	r3, [pc, #188]	; (10cc <xQueueGenericSend+0x158>)
    100e:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1010:	2001      	movs	r0, #1
    1012:	e049      	b.n	10a8 <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1014:	9b01      	ldr	r3, [sp, #4]
    1016:	2b00      	cmp	r3, #0
    1018:	d103      	bne.n	1022 <xQueueGenericSend+0xae>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    101a:	4b2c      	ldr	r3, [pc, #176]	; (10cc <xQueueGenericSend+0x158>)
    101c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    101e:	2000      	movs	r0, #0
    1020:	e042      	b.n	10a8 <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
    1022:	2f00      	cmp	r7, #0
    1024:	d103      	bne.n	102e <xQueueGenericSend+0xba>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1026:	a802      	add	r0, sp, #8
    1028:	4a29      	ldr	r2, [pc, #164]	; (10d0 <xQueueGenericSend+0x15c>)
    102a:	4790      	blx	r2
					xEntryTimeSet = pdTRUE;
    102c:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    102e:	4b27      	ldr	r3, [pc, #156]	; (10cc <xQueueGenericSend+0x158>)
    1030:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1032:	4b28      	ldr	r3, [pc, #160]	; (10d4 <xQueueGenericSend+0x160>)
    1034:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1036:	4b20      	ldr	r3, [pc, #128]	; (10b8 <xQueueGenericSend+0x144>)
    1038:	4798      	blx	r3
    103a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    103c:	3301      	adds	r3, #1
    103e:	d101      	bne.n	1044 <xQueueGenericSend+0xd0>
    1040:	2300      	movs	r3, #0
    1042:	6463      	str	r3, [r4, #68]	; 0x44
    1044:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1046:	3301      	adds	r3, #1
    1048:	d101      	bne.n	104e <xQueueGenericSend+0xda>
    104a:	2300      	movs	r3, #0
    104c:	64a3      	str	r3, [r4, #72]	; 0x48
    104e:	4b1f      	ldr	r3, [pc, #124]	; (10cc <xQueueGenericSend+0x158>)
    1050:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1052:	a802      	add	r0, sp, #8
    1054:	a901      	add	r1, sp, #4
    1056:	4b20      	ldr	r3, [pc, #128]	; (10d8 <xQueueGenericSend+0x164>)
    1058:	4798      	blx	r3
    105a:	2800      	cmp	r0, #0
    105c:	d11e      	bne.n	109c <xQueueGenericSend+0x128>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    105e:	4b16      	ldr	r3, [pc, #88]	; (10b8 <xQueueGenericSend+0x144>)
    1060:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1062:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1064:	4692      	mov	sl, r2
    1066:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1068:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    106a:	4b18      	ldr	r3, [pc, #96]	; (10cc <xQueueGenericSend+0x158>)
    106c:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    106e:	45ca      	cmp	sl, r9
    1070:	d10e      	bne.n	1090 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1072:	1c20      	adds	r0, r4, #0
    1074:	3010      	adds	r0, #16
    1076:	9901      	ldr	r1, [sp, #4]
    1078:	4b18      	ldr	r3, [pc, #96]	; (10dc <xQueueGenericSend+0x168>)
    107a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    107c:	1c20      	adds	r0, r4, #0
    107e:	4b18      	ldr	r3, [pc, #96]	; (10e0 <xQueueGenericSend+0x16c>)
    1080:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1082:	4b18      	ldr	r3, [pc, #96]	; (10e4 <xQueueGenericSend+0x170>)
    1084:	4798      	blx	r3
    1086:	2800      	cmp	r0, #0
    1088:	d19d      	bne.n	fc6 <xQueueGenericSend+0x52>
				{
					portYIELD_WITHIN_API();
    108a:	4b0e      	ldr	r3, [pc, #56]	; (10c4 <xQueueGenericSend+0x150>)
    108c:	4798      	blx	r3
    108e:	e79a      	b.n	fc6 <xQueueGenericSend+0x52>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1090:	1c20      	adds	r0, r4, #0
    1092:	4b13      	ldr	r3, [pc, #76]	; (10e0 <xQueueGenericSend+0x16c>)
    1094:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1096:	4b13      	ldr	r3, [pc, #76]	; (10e4 <xQueueGenericSend+0x170>)
    1098:	4798      	blx	r3
    109a:	e794      	b.n	fc6 <xQueueGenericSend+0x52>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    109c:	1c20      	adds	r0, r4, #0
    109e:	4b10      	ldr	r3, [pc, #64]	; (10e0 <xQueueGenericSend+0x16c>)
    10a0:	4798      	blx	r3
			( void ) xTaskResumeAll();
    10a2:	4b10      	ldr	r3, [pc, #64]	; (10e4 <xQueueGenericSend+0x170>)
    10a4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    10a6:	2000      	movs	r0, #0
		}
	}
}
    10a8:	b004      	add	sp, #16
    10aa:	bc1c      	pop	{r2, r3, r4}
    10ac:	4690      	mov	r8, r2
    10ae:	4699      	mov	r9, r3
    10b0:	46a2      	mov	sl, r4
    10b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10b4:	00001c55 	.word	0x00001c55
    10b8:	00000b65 	.word	0x00000b65
    10bc:	00000d11 	.word	0x00000d11
    10c0:	00000d89 	.word	0x00000d89
    10c4:	00000b4d 	.word	0x00000b4d
    10c8:	00001b25 	.word	0x00001b25
    10cc:	00000b7d 	.word	0x00000b7d
    10d0:	00001bad 	.word	0x00001bad
    10d4:	000016c1 	.word	0x000016c1
    10d8:	00001bcd 	.word	0x00001bcd
    10dc:	00001a8d 	.word	0x00001a8d
    10e0:	00000e01 	.word	0x00000e01
    10e4:	0000181d 	.word	0x0000181d

000010e8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    10e8:	b538      	push	{r3, r4, r5, lr}
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    10ea:	2050      	movs	r0, #80	; 0x50
    10ec:	4b11      	ldr	r3, [pc, #68]	; (1134 <xQueueCreateMutex+0x4c>)
    10ee:	4798      	blx	r3
    10f0:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    10f2:	d001      	beq.n	10f8 <xQueueCreateMutex+0x10>
    10f4:	e002      	b.n	10fc <xQueueCreateMutex+0x14>
    10f6:	e7fe      	b.n	10f6 <xQueueCreateMutex+0xe>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
    10f8:	b672      	cpsid	i
    10fa:	e7fc      	b.n	10f6 <xQueueCreateMutex+0xe>
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    10fc:	2300      	movs	r3, #0
    10fe:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1100:	6003      	str	r3, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    1102:	6083      	str	r3, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
    1104:	60c3      	str	r3, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1106:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1108:	2201      	movs	r2, #1
    110a:	63c2      	str	r2, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    110c:	6403      	str	r3, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    110e:	4252      	negs	r2, r2
    1110:	6442      	str	r2, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    1112:	6482      	str	r2, [r0, #72]	; 0x48
			}
			#endif

			#if ( configUSE_QUEUE_SETS == 1 )
			{
				pxNewQueue->pxQueueSetContainer = NULL;
    1114:	64c3      	str	r3, [r0, #76]	; 0x4c
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1116:	3010      	adds	r0, #16
    1118:	4d07      	ldr	r5, [pc, #28]	; (1138 <xQueueCreateMutex+0x50>)
    111a:	47a8      	blx	r5
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    111c:	1c20      	adds	r0, r4, #0
    111e:	3024      	adds	r0, #36	; 0x24
    1120:	47a8      	blx	r5

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1122:	1c20      	adds	r0, r4, #0
    1124:	2100      	movs	r1, #0
    1126:	2200      	movs	r2, #0
    1128:	2300      	movs	r3, #0
    112a:	4d04      	ldr	r5, [pc, #16]	; (113c <xQueueCreateMutex+0x54>)
    112c:	47a8      	blx	r5
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    112e:	1c20      	adds	r0, r4, #0
    1130:	bd38      	pop	{r3, r4, r5, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	00000c9d 	.word	0x00000c9d
    1138:	00000a69 	.word	0x00000a69
    113c:	00000f75 	.word	0x00000f75

00001140 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1140:	b5f0      	push	{r4, r5, r6, r7, lr}
    1142:	4647      	mov	r7, r8
    1144:	b480      	push	{r7}
    1146:	1c04      	adds	r4, r0, #0
    1148:	4688      	mov	r8, r1
    114a:	1c16      	adds	r6, r2, #0
    114c:	1c1d      	adds	r5, r3, #0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    114e:	2800      	cmp	r0, #0
    1150:	d101      	bne.n	1156 <xQueueGenericSendFromISR+0x16>
    1152:	b672      	cpsid	i
    1154:	e7fe      	b.n	1154 <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1156:	2900      	cmp	r1, #0
    1158:	d104      	bne.n	1164 <xQueueGenericSendFromISR+0x24>
    115a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    115c:	2b00      	cmp	r3, #0
    115e:	d001      	beq.n	1164 <xQueueGenericSendFromISR+0x24>
    1160:	b672      	cpsid	i
    1162:	e7fe      	b.n	1162 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1164:	2d02      	cmp	r5, #2
    1166:	d133      	bne.n	11d0 <xQueueGenericSendFromISR+0x90>
    1168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    116a:	2a01      	cmp	r2, #1
    116c:	d039      	beq.n	11e2 <xQueueGenericSendFromISR+0xa2>
    116e:	b672      	cpsid	i
    1170:	e7fe      	b.n	1170 <xQueueGenericSendFromISR+0x30>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1172:	1c20      	adds	r0, r4, #0
    1174:	4641      	mov	r1, r8
    1176:	1c2a      	adds	r2, r5, #0
    1178:	4b20      	ldr	r3, [pc, #128]	; (11fc <xQueueGenericSendFromISR+0xbc>)
    117a:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    117c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    117e:	3301      	adds	r3, #1
    1180:	d11d      	bne.n	11be <xQueueGenericSendFromISR+0x7e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    1182:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1184:	2b00      	cmp	r3, #0
    1186:	d00b      	beq.n	11a0 <xQueueGenericSendFromISR+0x60>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1188:	1c20      	adds	r0, r4, #0
    118a:	1c29      	adds	r1, r5, #0
    118c:	4b1c      	ldr	r3, [pc, #112]	; (1200 <xQueueGenericSendFromISR+0xc0>)
    118e:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1190:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1192:	2801      	cmp	r0, #1
    1194:	d12a      	bne.n	11ec <xQueueGenericSendFromISR+0xac>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1196:	2e00      	cmp	r6, #0
    1198:	d016      	beq.n	11c8 <xQueueGenericSendFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    119a:	2301      	movs	r3, #1
    119c:	6033      	str	r3, [r6, #0]
    119e:	e025      	b.n	11ec <xQueueGenericSendFromISR+0xac>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    11a0:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    11a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    11a4:	2a00      	cmp	r2, #0
    11a6:	d021      	beq.n	11ec <xQueueGenericSendFromISR+0xac>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    11a8:	1c20      	adds	r0, r4, #0
    11aa:	3024      	adds	r0, #36	; 0x24
    11ac:	4b15      	ldr	r3, [pc, #84]	; (1204 <xQueueGenericSendFromISR+0xc4>)
    11ae:	4798      	blx	r3
    11b0:	2800      	cmp	r0, #0
    11b2:	d01b      	beq.n	11ec <xQueueGenericSendFromISR+0xac>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    11b4:	2e00      	cmp	r6, #0
    11b6:	d009      	beq.n	11cc <xQueueGenericSendFromISR+0x8c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    11b8:	2301      	movs	r3, #1
    11ba:	6033      	str	r3, [r6, #0]
    11bc:	e016      	b.n	11ec <xQueueGenericSendFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    11be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    11c0:	3301      	adds	r3, #1
    11c2:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    11c4:	2501      	movs	r5, #1
    11c6:	e011      	b.n	11ec <xQueueGenericSendFromISR+0xac>
    11c8:	2501      	movs	r5, #1
    11ca:	e00f      	b.n	11ec <xQueueGenericSendFromISR+0xac>
    11cc:	2501      	movs	r5, #1
    11ce:	e00d      	b.n	11ec <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    11d0:	4b0d      	ldr	r3, [pc, #52]	; (1208 <xQueueGenericSendFromISR+0xc8>)
    11d2:	4798      	blx	r3
    11d4:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    11d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    11d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    11da:	4293      	cmp	r3, r2
    11dc:	d3c9      	bcc.n	1172 <xQueueGenericSendFromISR+0x32>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    11de:	2500      	movs	r5, #0
    11e0:	e004      	b.n	11ec <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    11e2:	4b09      	ldr	r3, [pc, #36]	; (1208 <xQueueGenericSendFromISR+0xc8>)
    11e4:	4798      	blx	r3
    11e6:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    11e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    11ea:	e7c2      	b.n	1172 <xQueueGenericSendFromISR+0x32>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    11ec:	1c38      	adds	r0, r7, #0
    11ee:	4b07      	ldr	r3, [pc, #28]	; (120c <xQueueGenericSendFromISR+0xcc>)
    11f0:	4798      	blx	r3

	return xReturn;
}
    11f2:	1c28      	adds	r0, r5, #0
    11f4:	bc04      	pop	{r2}
    11f6:	4690      	mov	r8, r2
    11f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	00000d11 	.word	0x00000d11
    1200:	00000d89 	.word	0x00000d89
    1204:	00001b25 	.word	0x00001b25
    1208:	00000b9d 	.word	0x00000b9d
    120c:	00000ba9 	.word	0x00000ba9

00001210 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1210:	b5f0      	push	{r4, r5, r6, r7, lr}
    1212:	464f      	mov	r7, r9
    1214:	4646      	mov	r6, r8
    1216:	b4c0      	push	{r6, r7}
    1218:	b085      	sub	sp, #20
    121a:	1c04      	adds	r4, r0, #0
    121c:	1c0d      	adds	r5, r1, #0
    121e:	9201      	str	r2, [sp, #4]
    1220:	1c1f      	adds	r7, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1222:	2800      	cmp	r0, #0
    1224:	d101      	bne.n	122a <xQueueGenericReceive+0x1a>
    1226:	b672      	cpsid	i
    1228:	e7fe      	b.n	1228 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    122a:	2900      	cmp	r1, #0
    122c:	d104      	bne.n	1238 <xQueueGenericReceive+0x28>
    122e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1230:	2b00      	cmp	r3, #0
    1232:	d001      	beq.n	1238 <xQueueGenericReceive+0x28>
    1234:	b672      	cpsid	i
    1236:	e7fe      	b.n	1236 <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1238:	4b4a      	ldr	r3, [pc, #296]	; (1364 <xQueueGenericReceive+0x154>)
    123a:	4798      	blx	r3
    123c:	2800      	cmp	r0, #0
    123e:	d102      	bne.n	1246 <xQueueGenericReceive+0x36>
    1240:	9b01      	ldr	r3, [sp, #4]
    1242:	2b00      	cmp	r3, #0
    1244:	d103      	bne.n	124e <xQueueGenericReceive+0x3e>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1246:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1248:	4b47      	ldr	r3, [pc, #284]	; (1368 <xQueueGenericReceive+0x158>)
    124a:	4698      	mov	r8, r3
    124c:	e001      	b.n	1252 <xQueueGenericReceive+0x42>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    124e:	b672      	cpsid	i
    1250:	e7fe      	b.n	1250 <xQueueGenericReceive+0x40>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1252:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1256:	2b00      	cmp	r3, #0
    1258:	d02b      	beq.n	12b2 <xQueueGenericReceive+0xa2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    125a:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    125c:	1c20      	adds	r0, r4, #0
    125e:	1c29      	adds	r1, r5, #0
    1260:	4b42      	ldr	r3, [pc, #264]	; (136c <xQueueGenericReceive+0x15c>)
    1262:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    1264:	2f00      	cmp	r7, #0
    1266:	d114      	bne.n	1292 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    1268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    126a:	3b01      	subs	r3, #1
    126c:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    126e:	6823      	ldr	r3, [r4, #0]
    1270:	2b00      	cmp	r3, #0
    1272:	d102      	bne.n	127a <xQueueGenericReceive+0x6a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1274:	4b3e      	ldr	r3, [pc, #248]	; (1370 <xQueueGenericReceive+0x160>)
    1276:	4798      	blx	r3
    1278:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    127a:	6923      	ldr	r3, [r4, #16]
    127c:	2b00      	cmp	r3, #0
    127e:	d014      	beq.n	12aa <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1280:	1c20      	adds	r0, r4, #0
    1282:	3010      	adds	r0, #16
    1284:	4b3b      	ldr	r3, [pc, #236]	; (1374 <xQueueGenericReceive+0x164>)
    1286:	4798      	blx	r3
    1288:	2801      	cmp	r0, #1
    128a:	d10e      	bne.n	12aa <xQueueGenericReceive+0x9a>
						{
							queueYIELD_IF_USING_PREEMPTION();
    128c:	4b3a      	ldr	r3, [pc, #232]	; (1378 <xQueueGenericReceive+0x168>)
    128e:	4798      	blx	r3
    1290:	e00b      	b.n	12aa <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1292:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1294:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1296:	2b00      	cmp	r3, #0
    1298:	d007      	beq.n	12aa <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    129a:	1c20      	adds	r0, r4, #0
    129c:	3024      	adds	r0, #36	; 0x24
    129e:	4b35      	ldr	r3, [pc, #212]	; (1374 <xQueueGenericReceive+0x164>)
    12a0:	4798      	blx	r3
    12a2:	2800      	cmp	r0, #0
    12a4:	d001      	beq.n	12aa <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    12a6:	4b34      	ldr	r3, [pc, #208]	; (1378 <xQueueGenericReceive+0x168>)
    12a8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    12aa:	4b34      	ldr	r3, [pc, #208]	; (137c <xQueueGenericReceive+0x16c>)
    12ac:	4798      	blx	r3
				return pdPASS;
    12ae:	2001      	movs	r0, #1
    12b0:	e052      	b.n	1358 <xQueueGenericReceive+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    12b2:	9b01      	ldr	r3, [sp, #4]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d103      	bne.n	12c0 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    12b8:	4b30      	ldr	r3, [pc, #192]	; (137c <xQueueGenericReceive+0x16c>)
    12ba:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    12bc:	2000      	movs	r0, #0
    12be:	e04b      	b.n	1358 <xQueueGenericReceive+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    12c0:	2e00      	cmp	r6, #0
    12c2:	d103      	bne.n	12cc <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    12c4:	a802      	add	r0, sp, #8
    12c6:	4b2e      	ldr	r3, [pc, #184]	; (1380 <xQueueGenericReceive+0x170>)
    12c8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    12ca:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    12cc:	4b2b      	ldr	r3, [pc, #172]	; (137c <xQueueGenericReceive+0x16c>)
    12ce:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    12d0:	4b2c      	ldr	r3, [pc, #176]	; (1384 <xQueueGenericReceive+0x174>)
    12d2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    12d4:	4b24      	ldr	r3, [pc, #144]	; (1368 <xQueueGenericReceive+0x158>)
    12d6:	4798      	blx	r3
    12d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    12da:	3301      	adds	r3, #1
    12dc:	d101      	bne.n	12e2 <xQueueGenericReceive+0xd2>
    12de:	2300      	movs	r3, #0
    12e0:	6463      	str	r3, [r4, #68]	; 0x44
    12e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    12e4:	3301      	adds	r3, #1
    12e6:	d101      	bne.n	12ec <xQueueGenericReceive+0xdc>
    12e8:	2300      	movs	r3, #0
    12ea:	64a3      	str	r3, [r4, #72]	; 0x48
    12ec:	4b23      	ldr	r3, [pc, #140]	; (137c <xQueueGenericReceive+0x16c>)
    12ee:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    12f0:	a802      	add	r0, sp, #8
    12f2:	a901      	add	r1, sp, #4
    12f4:	4b24      	ldr	r3, [pc, #144]	; (1388 <xQueueGenericReceive+0x178>)
    12f6:	4798      	blx	r3
    12f8:	2800      	cmp	r0, #0
    12fa:	d127      	bne.n	134c <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    12fc:	4b1a      	ldr	r3, [pc, #104]	; (1368 <xQueueGenericReceive+0x158>)
    12fe:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1302:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1304:	4b1d      	ldr	r3, [pc, #116]	; (137c <xQueueGenericReceive+0x16c>)
    1306:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1308:	464b      	mov	r3, r9
    130a:	2b00      	cmp	r3, #0
    130c:	d118      	bne.n	1340 <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    130e:	6823      	ldr	r3, [r4, #0]
    1310:	2b00      	cmp	r3, #0
    1312:	d106      	bne.n	1322 <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
    1314:	4b14      	ldr	r3, [pc, #80]	; (1368 <xQueueGenericReceive+0x158>)
    1316:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1318:	6860      	ldr	r0, [r4, #4]
    131a:	4b1c      	ldr	r3, [pc, #112]	; (138c <xQueueGenericReceive+0x17c>)
    131c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    131e:	4b17      	ldr	r3, [pc, #92]	; (137c <xQueueGenericReceive+0x16c>)
    1320:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1322:	1c20      	adds	r0, r4, #0
    1324:	3024      	adds	r0, #36	; 0x24
    1326:	9901      	ldr	r1, [sp, #4]
    1328:	4b19      	ldr	r3, [pc, #100]	; (1390 <xQueueGenericReceive+0x180>)
    132a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    132c:	1c20      	adds	r0, r4, #0
    132e:	4b19      	ldr	r3, [pc, #100]	; (1394 <xQueueGenericReceive+0x184>)
    1330:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1332:	4b19      	ldr	r3, [pc, #100]	; (1398 <xQueueGenericReceive+0x188>)
    1334:	4798      	blx	r3
    1336:	2800      	cmp	r0, #0
    1338:	d18b      	bne.n	1252 <xQueueGenericReceive+0x42>
				{
					portYIELD_WITHIN_API();
    133a:	4b0f      	ldr	r3, [pc, #60]	; (1378 <xQueueGenericReceive+0x168>)
    133c:	4798      	blx	r3
    133e:	e788      	b.n	1252 <xQueueGenericReceive+0x42>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1340:	1c20      	adds	r0, r4, #0
    1342:	4b14      	ldr	r3, [pc, #80]	; (1394 <xQueueGenericReceive+0x184>)
    1344:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1346:	4b14      	ldr	r3, [pc, #80]	; (1398 <xQueueGenericReceive+0x188>)
    1348:	4798      	blx	r3
    134a:	e782      	b.n	1252 <xQueueGenericReceive+0x42>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    134c:	1c20      	adds	r0, r4, #0
    134e:	4b11      	ldr	r3, [pc, #68]	; (1394 <xQueueGenericReceive+0x184>)
    1350:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1352:	4b11      	ldr	r3, [pc, #68]	; (1398 <xQueueGenericReceive+0x188>)
    1354:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1356:	2000      	movs	r0, #0
		}
	}
}
    1358:	b005      	add	sp, #20
    135a:	bc0c      	pop	{r2, r3}
    135c:	4690      	mov	r8, r2
    135e:	4699      	mov	r9, r3
    1360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	00001c55 	.word	0x00001c55
    1368:	00000b65 	.word	0x00000b65
    136c:	00000dd9 	.word	0x00000dd9
    1370:	00001c49 	.word	0x00001c49
    1374:	00001b25 	.word	0x00001b25
    1378:	00000b4d 	.word	0x00000b4d
    137c:	00000b7d 	.word	0x00000b7d
    1380:	00001bad 	.word	0x00001bad
    1384:	000016c1 	.word	0x000016c1
    1388:	00001bcd 	.word	0x00001bcd
    138c:	00001c75 	.word	0x00001c75
    1390:	00001a8d 	.word	0x00001a8d
    1394:	00000e01 	.word	0x00000e01
    1398:	0000181d 	.word	0x0000181d

0000139c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    139c:	b538      	push	{r3, r4, r5, lr}
    139e:	1c04      	adds	r4, r0, #0
    13a0:	1c0d      	adds	r5, r1, #0
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    13a2:	4b0d      	ldr	r3, [pc, #52]	; (13d8 <vQueueWaitForMessageRestricted+0x3c>)
    13a4:	4798      	blx	r3
    13a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13a8:	3301      	adds	r3, #1
    13aa:	d101      	bne.n	13b0 <vQueueWaitForMessageRestricted+0x14>
    13ac:	2300      	movs	r3, #0
    13ae:	6463      	str	r3, [r4, #68]	; 0x44
    13b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    13b2:	3301      	adds	r3, #1
    13b4:	d101      	bne.n	13ba <vQueueWaitForMessageRestricted+0x1e>
    13b6:	2300      	movs	r3, #0
    13b8:	64a3      	str	r3, [r4, #72]	; 0x48
    13ba:	4b08      	ldr	r3, [pc, #32]	; (13dc <vQueueWaitForMessageRestricted+0x40>)
    13bc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    13be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    13c0:	2b00      	cmp	r3, #0
    13c2:	d104      	bne.n	13ce <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    13c4:	1c20      	adds	r0, r4, #0
    13c6:	3024      	adds	r0, #36	; 0x24
    13c8:	1c29      	adds	r1, r5, #0
    13ca:	4b05      	ldr	r3, [pc, #20]	; (13e0 <vQueueWaitForMessageRestricted+0x44>)
    13cc:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    13ce:	1c20      	adds	r0, r4, #0
    13d0:	4b04      	ldr	r3, [pc, #16]	; (13e4 <vQueueWaitForMessageRestricted+0x48>)
    13d2:	4798      	blx	r3
	}
    13d4:	bd38      	pop	{r3, r4, r5, pc}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00000b65 	.word	0x00000b65
    13dc:	00000b7d 	.word	0x00000b7d
    13e0:	00001ae5 	.word	0x00001ae5
    13e4:	00000e01 	.word	0x00000e01

000013e8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    13e8:	4b08      	ldr	r3, [pc, #32]	; (140c <prvResetNextTaskUnblockTime+0x24>)
    13ea:	681b      	ldr	r3, [r3, #0]
    13ec:	681b      	ldr	r3, [r3, #0]
    13ee:	2b00      	cmp	r3, #0
    13f0:	d104      	bne.n	13fc <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    13f2:	2201      	movs	r2, #1
    13f4:	4252      	negs	r2, r2
    13f6:	4b06      	ldr	r3, [pc, #24]	; (1410 <prvResetNextTaskUnblockTime+0x28>)
    13f8:	601a      	str	r2, [r3, #0]
    13fa:	e006      	b.n	140a <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    13fc:	4b03      	ldr	r3, [pc, #12]	; (140c <prvResetNextTaskUnblockTime+0x24>)
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    1402:	68db      	ldr	r3, [r3, #12]
    1404:	685a      	ldr	r2, [r3, #4]
    1406:	4b02      	ldr	r3, [pc, #8]	; (1410 <prvResetNextTaskUnblockTime+0x28>)
    1408:	601a      	str	r2, [r3, #0]
	}
}
    140a:	4770      	bx	lr
    140c:	20003b04 	.word	0x20003b04
    1410:	20000008 	.word	0x20000008

00001414 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    1414:	b510      	push	{r4, lr}
    1416:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1418:	4b0e      	ldr	r3, [pc, #56]	; (1454 <prvAddCurrentTaskToDelayedList+0x40>)
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    141e:	4b0e      	ldr	r3, [pc, #56]	; (1458 <prvAddCurrentTaskToDelayedList+0x44>)
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	4298      	cmp	r0, r3
    1424:	d207      	bcs.n	1436 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1426:	4b0d      	ldr	r3, [pc, #52]	; (145c <prvAddCurrentTaskToDelayedList+0x48>)
    1428:	6818      	ldr	r0, [r3, #0]
    142a:	4b0a      	ldr	r3, [pc, #40]	; (1454 <prvAddCurrentTaskToDelayedList+0x40>)
    142c:	6819      	ldr	r1, [r3, #0]
    142e:	3104      	adds	r1, #4
    1430:	4b0b      	ldr	r3, [pc, #44]	; (1460 <prvAddCurrentTaskToDelayedList+0x4c>)
    1432:	4798      	blx	r3
    1434:	e00c      	b.n	1450 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1436:	4b0b      	ldr	r3, [pc, #44]	; (1464 <prvAddCurrentTaskToDelayedList+0x50>)
    1438:	6818      	ldr	r0, [r3, #0]
    143a:	4b06      	ldr	r3, [pc, #24]	; (1454 <prvAddCurrentTaskToDelayedList+0x40>)
    143c:	6819      	ldr	r1, [r3, #0]
    143e:	3104      	adds	r1, #4
    1440:	4b07      	ldr	r3, [pc, #28]	; (1460 <prvAddCurrentTaskToDelayedList+0x4c>)
    1442:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1444:	4b08      	ldr	r3, [pc, #32]	; (1468 <prvAddCurrentTaskToDelayedList+0x54>)
    1446:	681b      	ldr	r3, [r3, #0]
    1448:	429c      	cmp	r4, r3
    144a:	d201      	bcs.n	1450 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    144c:	4b06      	ldr	r3, [pc, #24]	; (1468 <prvAddCurrentTaskToDelayedList+0x54>)
    144e:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1450:	bd10      	pop	{r4, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	20003bb4 	.word	0x20003bb4
    1458:	20003bd0 	.word	0x20003bd0
    145c:	20003bd4 	.word	0x20003bd4
    1460:	00000aa1 	.word	0x00000aa1
    1464:	20003b04 	.word	0x20003b04
    1468:	20000008 	.word	0x20000008

0000146c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    146e:	465f      	mov	r7, fp
    1470:	4656      	mov	r6, sl
    1472:	464d      	mov	r5, r9
    1474:	4644      	mov	r4, r8
    1476:	b4f0      	push	{r4, r5, r6, r7}
    1478:	1c07      	adds	r7, r0, #0
    147a:	1c0e      	adds	r6, r1, #0
    147c:	4691      	mov	r9, r2
    147e:	469a      	mov	sl, r3
    1480:	9d0a      	ldr	r5, [sp, #40]	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    1482:	2800      	cmp	r0, #0
    1484:	d101      	bne.n	148a <xTaskGenericCreate+0x1e>
    1486:	b672      	cpsid	i
    1488:	e7fe      	b.n	1488 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    148a:	2d04      	cmp	r5, #4
    148c:	d901      	bls.n	1492 <xTaskGenericCreate+0x26>
    148e:	b672      	cpsid	i
    1490:	e7fe      	b.n	1490 <xTaskGenericCreate+0x24>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    1492:	2040      	movs	r0, #64	; 0x40
    1494:	4b5b      	ldr	r3, [pc, #364]	; (1604 <xTaskGenericCreate+0x198>)
    1496:	4798      	blx	r3
    1498:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    149a:	d100      	bne.n	149e <xTaskGenericCreate+0x32>
    149c:	e0aa      	b.n	15f4 <xTaskGenericCreate+0x188>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    149e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14a0:	2a00      	cmp	r2, #0
    14a2:	d000      	beq.n	14a6 <xTaskGenericCreate+0x3a>
    14a4:	e092      	b.n	15cc <xTaskGenericCreate+0x160>
    14a6:	464b      	mov	r3, r9
    14a8:	0098      	lsls	r0, r3, #2
    14aa:	4b56      	ldr	r3, [pc, #344]	; (1604 <xTaskGenericCreate+0x198>)
    14ac:	4798      	blx	r3
    14ae:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    14b0:	2800      	cmp	r0, #0
    14b2:	d000      	beq.n	14b6 <xTaskGenericCreate+0x4a>
    14b4:	e08c      	b.n	15d0 <xTaskGenericCreate+0x164>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    14b6:	1c20      	adds	r0, r4, #0
    14b8:	4b53      	ldr	r3, [pc, #332]	; (1608 <xTaskGenericCreate+0x19c>)
    14ba:	4798      	blx	r3
    14bc:	e09a      	b.n	15f4 <xTaskGenericCreate+0x188>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    14be:	5cf1      	ldrb	r1, [r6, r3]
    14c0:	18e2      	adds	r2, r4, r3
    14c2:	3234      	adds	r2, #52	; 0x34
    14c4:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    14c6:	5cf2      	ldrb	r2, [r6, r3]
    14c8:	2a00      	cmp	r2, #0
    14ca:	d002      	beq.n	14d2 <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    14cc:	3301      	adds	r3, #1
    14ce:	2b08      	cmp	r3, #8
    14d0:	d1f5      	bne.n	14be <xTaskGenericCreate+0x52>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    14d2:	2200      	movs	r2, #0
    14d4:	233b      	movs	r3, #59	; 0x3b
    14d6:	54e2      	strb	r2, [r4, r3]
    14d8:	1e2e      	subs	r6, r5, #0
    14da:	2e04      	cmp	r6, #4
    14dc:	d900      	bls.n	14e0 <xTaskGenericCreate+0x74>
    14de:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    14e0:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    14e2:	63e6      	str	r6, [r4, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    14e4:	1d22      	adds	r2, r4, #4
    14e6:	4690      	mov	r8, r2
    14e8:	1c10      	adds	r0, r2, #0
    14ea:	4b48      	ldr	r3, [pc, #288]	; (160c <xTaskGenericCreate+0x1a0>)
    14ec:	4699      	mov	r9, r3
    14ee:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    14f0:	1c20      	adds	r0, r4, #0
    14f2:	3018      	adds	r0, #24
    14f4:	47c8      	blx	r9

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    14f6:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    14f8:	2305      	movs	r3, #5
    14fa:	1b9e      	subs	r6, r3, r6
    14fc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    14fe:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1500:	4658      	mov	r0, fp
    1502:	1c39      	adds	r1, r7, #0
    1504:	4652      	mov	r2, sl
    1506:	4b42      	ldr	r3, [pc, #264]	; (1610 <xTaskGenericCreate+0x1a4>)
    1508:	4798      	blx	r3
    150a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    150c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    150e:	2a00      	cmp	r2, #0
    1510:	d000      	beq.n	1514 <xTaskGenericCreate+0xa8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1512:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    1514:	4b3f      	ldr	r3, [pc, #252]	; (1614 <xTaskGenericCreate+0x1a8>)
    1516:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    1518:	4b3f      	ldr	r3, [pc, #252]	; (1618 <xTaskGenericCreate+0x1ac>)
    151a:	681a      	ldr	r2, [r3, #0]
    151c:	3201      	adds	r2, #1
    151e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    1520:	4b3e      	ldr	r3, [pc, #248]	; (161c <xTaskGenericCreate+0x1b0>)
    1522:	681b      	ldr	r3, [r3, #0]
    1524:	2b00      	cmp	r3, #0
    1526:	d123      	bne.n	1570 <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1528:	4b3c      	ldr	r3, [pc, #240]	; (161c <xTaskGenericCreate+0x1b0>)
    152a:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    152c:	4b3a      	ldr	r3, [pc, #232]	; (1618 <xTaskGenericCreate+0x1ac>)
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	2b01      	cmp	r3, #1
    1532:	d128      	bne.n	1586 <xTaskGenericCreate+0x11a>
    1534:	4e3a      	ldr	r6, [pc, #232]	; (1620 <xTaskGenericCreate+0x1b4>)
    1536:	2364      	movs	r3, #100	; 0x64
    1538:	199b      	adds	r3, r3, r6
    153a:	4699      	mov	r9, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    153c:	4f39      	ldr	r7, [pc, #228]	; (1624 <xTaskGenericCreate+0x1b8>)
    153e:	1c30      	adds	r0, r6, #0
    1540:	47b8      	blx	r7
    1542:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1544:	454e      	cmp	r6, r9
    1546:	d1fa      	bne.n	153e <xTaskGenericCreate+0xd2>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1548:	4a37      	ldr	r2, [pc, #220]	; (1628 <xTaskGenericCreate+0x1bc>)
    154a:	4691      	mov	r9, r2
    154c:	1c10      	adds	r0, r2, #0
    154e:	4e35      	ldr	r6, [pc, #212]	; (1624 <xTaskGenericCreate+0x1b8>)
    1550:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    1552:	4f36      	ldr	r7, [pc, #216]	; (162c <xTaskGenericCreate+0x1c0>)
    1554:	1c38      	adds	r0, r7, #0
    1556:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    1558:	4835      	ldr	r0, [pc, #212]	; (1630 <xTaskGenericCreate+0x1c4>)
    155a:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    155c:	4835      	ldr	r0, [pc, #212]	; (1634 <xTaskGenericCreate+0x1c8>)
    155e:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1560:	4835      	ldr	r0, [pc, #212]	; (1638 <xTaskGenericCreate+0x1cc>)
    1562:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1564:	4b35      	ldr	r3, [pc, #212]	; (163c <xTaskGenericCreate+0x1d0>)
    1566:	464a      	mov	r2, r9
    1568:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    156a:	4b35      	ldr	r3, [pc, #212]	; (1640 <xTaskGenericCreate+0x1d4>)
    156c:	601f      	str	r7, [r3, #0]
    156e:	e00a      	b.n	1586 <xTaskGenericCreate+0x11a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1570:	4b34      	ldr	r3, [pc, #208]	; (1644 <xTaskGenericCreate+0x1d8>)
    1572:	681b      	ldr	r3, [r3, #0]
    1574:	2b00      	cmp	r3, #0
    1576:	d106      	bne.n	1586 <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1578:	4b28      	ldr	r3, [pc, #160]	; (161c <xTaskGenericCreate+0x1b0>)
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    157e:	429d      	cmp	r5, r3
    1580:	d301      	bcc.n	1586 <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
    1582:	4b26      	ldr	r3, [pc, #152]	; (161c <xTaskGenericCreate+0x1b0>)
    1584:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    1586:	4b30      	ldr	r3, [pc, #192]	; (1648 <xTaskGenericCreate+0x1dc>)
    1588:	681a      	ldr	r2, [r3, #0]
    158a:	3201      	adds	r2, #1
    158c:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    158e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1590:	4a2e      	ldr	r2, [pc, #184]	; (164c <xTaskGenericCreate+0x1e0>)
    1592:	6812      	ldr	r2, [r2, #0]
    1594:	4293      	cmp	r3, r2
    1596:	d901      	bls.n	159c <xTaskGenericCreate+0x130>
    1598:	4a2c      	ldr	r2, [pc, #176]	; (164c <xTaskGenericCreate+0x1e0>)
    159a:	6013      	str	r3, [r2, #0]
    159c:	009a      	lsls	r2, r3, #2
    159e:	18d3      	adds	r3, r2, r3
    15a0:	009b      	lsls	r3, r3, #2
    15a2:	481f      	ldr	r0, [pc, #124]	; (1620 <xTaskGenericCreate+0x1b4>)
    15a4:	18c0      	adds	r0, r0, r3
    15a6:	4641      	mov	r1, r8
    15a8:	4b29      	ldr	r3, [pc, #164]	; (1650 <xTaskGenericCreate+0x1e4>)
    15aa:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    15ac:	4b29      	ldr	r3, [pc, #164]	; (1654 <xTaskGenericCreate+0x1e8>)
    15ae:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    15b0:	4b24      	ldr	r3, [pc, #144]	; (1644 <xTaskGenericCreate+0x1d8>)
    15b2:	681b      	ldr	r3, [r3, #0]
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    15b4:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    15b6:	2b00      	cmp	r3, #0
    15b8:	d01e      	beq.n	15f8 <xTaskGenericCreate+0x18c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    15ba:	4b18      	ldr	r3, [pc, #96]	; (161c <xTaskGenericCreate+0x1b0>)
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15c0:	429d      	cmp	r5, r3
    15c2:	d919      	bls.n	15f8 <xTaskGenericCreate+0x18c>
			{
				taskYIELD_IF_USING_PREEMPTION();
    15c4:	4b24      	ldr	r3, [pc, #144]	; (1658 <xTaskGenericCreate+0x1ec>)
    15c6:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    15c8:	2001      	movs	r0, #1
    15ca:	e015      	b.n	15f8 <xTaskGenericCreate+0x18c>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    15ce:	6303      	str	r3, [r0, #48]	; 0x30
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    15d0:	4a22      	ldr	r2, [pc, #136]	; (165c <xTaskGenericCreate+0x1f0>)
    15d2:	1c13      	adds	r3, r2, #0
    15d4:	444b      	add	r3, r9
    15d6:	009b      	lsls	r3, r3, #2
    15d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    15da:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    15dc:	2207      	movs	r2, #7
    15de:	4393      	bics	r3, r2
    15e0:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    15e2:	7832      	ldrb	r2, [r6, #0]
    15e4:	2334      	movs	r3, #52	; 0x34
    15e6:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    15e8:	7833      	ldrb	r3, [r6, #0]
    15ea:	2b00      	cmp	r3, #0
    15ec:	d100      	bne.n	15f0 <xTaskGenericCreate+0x184>
    15ee:	e770      	b.n	14d2 <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    15f0:	2301      	movs	r3, #1
    15f2:	e764      	b.n	14be <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    15f4:	2001      	movs	r0, #1
    15f6:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    15f8:	bc3c      	pop	{r2, r3, r4, r5}
    15fa:	4690      	mov	r8, r2
    15fc:	4699      	mov	r9, r3
    15fe:	46a2      	mov	sl, r4
    1600:	46ab      	mov	fp, r5
    1602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1604:	00000c9d 	.word	0x00000c9d
    1608:	00000d05 	.word	0x00000d05
    160c:	00000a81 	.word	0x00000a81
    1610:	00000b29 	.word	0x00000b29
    1614:	00000b65 	.word	0x00000b65
    1618:	20003bdc 	.word	0x20003bdc
    161c:	20003bb4 	.word	0x20003bb4
    1620:	20003b3c 	.word	0x20003b3c
    1624:	00000a69 	.word	0x00000a69
    1628:	20003b10 	.word	0x20003b10
    162c:	20003b24 	.word	0x20003b24
    1630:	20003bb8 	.word	0x20003bb8
    1634:	20003ba0 	.word	0x20003ba0
    1638:	20003be0 	.word	0x20003be0
    163c:	20003b04 	.word	0x20003b04
    1640:	20003bd4 	.word	0x20003bd4
    1644:	20003b08 	.word	0x20003b08
    1648:	20003bd8 	.word	0x20003bd8
    164c:	20003bf4 	.word	0x20003bf4
    1650:	00000a89 	.word	0x00000a89
    1654:	00000b7d 	.word	0x00000b7d
    1658:	00000b4d 	.word	0x00000b4d
    165c:	3fffffff 	.word	0x3fffffff

00001660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1660:	b510      	push	{r4, lr}
    1662:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    1664:	2300      	movs	r3, #0
    1666:	9300      	str	r3, [sp, #0]
    1668:	9301      	str	r3, [sp, #4]
    166a:	9302      	str	r3, [sp, #8]
    166c:	9303      	str	r3, [sp, #12]
    166e:	480d      	ldr	r0, [pc, #52]	; (16a4 <vTaskStartScheduler+0x44>)
    1670:	490d      	ldr	r1, [pc, #52]	; (16a8 <vTaskStartScheduler+0x48>)
    1672:	2264      	movs	r2, #100	; 0x64
    1674:	4c0d      	ldr	r4, [pc, #52]	; (16ac <vTaskStartScheduler+0x4c>)
    1676:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    1678:	2801      	cmp	r0, #1
    167a:	d10d      	bne.n	1698 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    167c:	4b0c      	ldr	r3, [pc, #48]	; (16b0 <vTaskStartScheduler+0x50>)
    167e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1680:	2801      	cmp	r0, #1
    1682:	d109      	bne.n	1698 <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1684:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    1686:	2201      	movs	r2, #1
    1688:	4b0a      	ldr	r3, [pc, #40]	; (16b4 <vTaskStartScheduler+0x54>)
    168a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    168c:	2200      	movs	r2, #0
    168e:	4b0a      	ldr	r3, [pc, #40]	; (16b8 <vTaskStartScheduler+0x58>)
    1690:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1692:	4b0a      	ldr	r3, [pc, #40]	; (16bc <vTaskStartScheduler+0x5c>)
    1694:	4798      	blx	r3
    1696:	e003      	b.n	16a0 <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    1698:	2800      	cmp	r0, #0
    169a:	d101      	bne.n	16a0 <vTaskStartScheduler+0x40>
    169c:	b672      	cpsid	i
    169e:	e7fe      	b.n	169e <vTaskStartScheduler+0x3e>
	}
}
    16a0:	b004      	add	sp, #16
    16a2:	bd10      	pop	{r4, pc}
    16a4:	00001971 	.word	0x00001971
    16a8:	00002378 	.word	0x00002378
    16ac:	0000146d 	.word	0x0000146d
    16b0:	00001df9 	.word	0x00001df9
    16b4:	20003b08 	.word	0x20003b08
    16b8:	20003bd0 	.word	0x20003bd0
    16bc:	00000c5d 	.word	0x00000c5d

000016c0 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    16c0:	4b02      	ldr	r3, [pc, #8]	; (16cc <vTaskSuspendAll+0xc>)
    16c2:	681a      	ldr	r2, [r3, #0]
    16c4:	3201      	adds	r2, #1
    16c6:	601a      	str	r2, [r3, #0]
}
    16c8:	4770      	bx	lr
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	20003bcc 	.word	0x20003bcc

000016d0 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    16d0:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    16d2:	4b04      	ldr	r3, [pc, #16]	; (16e4 <xTaskGetTickCount+0x14>)
    16d4:	4798      	blx	r3
	{
		xTicks = xTickCount;
    16d6:	4b04      	ldr	r3, [pc, #16]	; (16e8 <xTaskGetTickCount+0x18>)
    16d8:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    16da:	4b04      	ldr	r3, [pc, #16]	; (16ec <xTaskGetTickCount+0x1c>)
    16dc:	4798      	blx	r3

	return xTicks;
}
    16de:	1c20      	adds	r0, r4, #0
    16e0:	bd10      	pop	{r4, pc}
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	00000b65 	.word	0x00000b65
    16e8:	20003bd0 	.word	0x20003bd0
    16ec:	00000b7d 	.word	0x00000b7d

000016f0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    16f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f2:	4647      	mov	r7, r8
    16f4:	b480      	push	{r7}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    16f6:	4b3b      	ldr	r3, [pc, #236]	; (17e4 <xTaskIncrementTick+0xf4>)
    16f8:	681b      	ldr	r3, [r3, #0]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d161      	bne.n	17c2 <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    16fe:	4b3a      	ldr	r3, [pc, #232]	; (17e8 <xTaskIncrementTick+0xf8>)
    1700:	681a      	ldr	r2, [r3, #0]
    1702:	3201      	adds	r2, #1
    1704:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1706:	681f      	ldr	r7, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    1708:	2f00      	cmp	r7, #0
    170a:	d112      	bne.n	1732 <xTaskIncrementTick+0x42>
			{
				taskSWITCH_DELAYED_LISTS();
    170c:	4b37      	ldr	r3, [pc, #220]	; (17ec <xTaskIncrementTick+0xfc>)
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	2b00      	cmp	r3, #0
    1714:	d001      	beq.n	171a <xTaskIncrementTick+0x2a>
    1716:	b672      	cpsid	i
    1718:	e7fe      	b.n	1718 <xTaskIncrementTick+0x28>
    171a:	4a34      	ldr	r2, [pc, #208]	; (17ec <xTaskIncrementTick+0xfc>)
    171c:	6811      	ldr	r1, [r2, #0]
    171e:	4b34      	ldr	r3, [pc, #208]	; (17f0 <xTaskIncrementTick+0x100>)
    1720:	6818      	ldr	r0, [r3, #0]
    1722:	6010      	str	r0, [r2, #0]
    1724:	6019      	str	r1, [r3, #0]
    1726:	4b33      	ldr	r3, [pc, #204]	; (17f4 <xTaskIncrementTick+0x104>)
    1728:	681a      	ldr	r2, [r3, #0]
    172a:	3201      	adds	r2, #1
    172c:	601a      	str	r2, [r3, #0]
    172e:	4b32      	ldr	r3, [pc, #200]	; (17f8 <xTaskIncrementTick+0x108>)
    1730:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    1732:	4b32      	ldr	r3, [pc, #200]	; (17fc <xTaskIncrementTick+0x10c>)
    1734:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    1736:	2400      	movs	r4, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    1738:	429f      	cmp	r7, r3
    173a:	d337      	bcc.n	17ac <xTaskIncrementTick+0xbc>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    173c:	4e2b      	ldr	r6, [pc, #172]	; (17ec <xTaskIncrementTick+0xfc>)
    173e:	e000      	b.n	1742 <xTaskIncrementTick+0x52>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    1740:	2401      	movs	r4, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1742:	6833      	ldr	r3, [r6, #0]
    1744:	681b      	ldr	r3, [r3, #0]
    1746:	2b00      	cmp	r3, #0
    1748:	d104      	bne.n	1754 <xTaskIncrementTick+0x64>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    174a:	2201      	movs	r2, #1
    174c:	4252      	negs	r2, r2
    174e:	4b2b      	ldr	r3, [pc, #172]	; (17fc <xTaskIncrementTick+0x10c>)
    1750:	601a      	str	r2, [r3, #0]
						break;
    1752:	e02b      	b.n	17ac <xTaskIncrementTick+0xbc>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1754:	4a25      	ldr	r2, [pc, #148]	; (17ec <xTaskIncrementTick+0xfc>)
    1756:	6813      	ldr	r3, [r2, #0]
    1758:	68db      	ldr	r3, [r3, #12]
    175a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    175c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    175e:	429f      	cmp	r7, r3
    1760:	d202      	bcs.n	1768 <xTaskIncrementTick+0x78>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    1762:	4a26      	ldr	r2, [pc, #152]	; (17fc <xTaskIncrementTick+0x10c>)
    1764:	6013      	str	r3, [r2, #0]
							break;
    1766:	e021      	b.n	17ac <xTaskIncrementTick+0xbc>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1768:	1d2b      	adds	r3, r5, #4
    176a:	4698      	mov	r8, r3
    176c:	1c18      	adds	r0, r3, #0
    176e:	4a24      	ldr	r2, [pc, #144]	; (1800 <xTaskIncrementTick+0x110>)
    1770:	4790      	blx	r2

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1772:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1774:	2b00      	cmp	r3, #0
    1776:	d003      	beq.n	1780 <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1778:	1c28      	adds	r0, r5, #0
    177a:	3018      	adds	r0, #24
    177c:	4b20      	ldr	r3, [pc, #128]	; (1800 <xTaskIncrementTick+0x110>)
    177e:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    1780:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1782:	4a20      	ldr	r2, [pc, #128]	; (1804 <xTaskIncrementTick+0x114>)
    1784:	6812      	ldr	r2, [r2, #0]
    1786:	4293      	cmp	r3, r2
    1788:	d901      	bls.n	178e <xTaskIncrementTick+0x9e>
    178a:	4a1e      	ldr	r2, [pc, #120]	; (1804 <xTaskIncrementTick+0x114>)
    178c:	6013      	str	r3, [r2, #0]
    178e:	009a      	lsls	r2, r3, #2
    1790:	18d3      	adds	r3, r2, r3
    1792:	009b      	lsls	r3, r3, #2
    1794:	481c      	ldr	r0, [pc, #112]	; (1808 <xTaskIncrementTick+0x118>)
    1796:	18c0      	adds	r0, r0, r3
    1798:	4641      	mov	r1, r8
    179a:	4b1c      	ldr	r3, [pc, #112]	; (180c <xTaskIncrementTick+0x11c>)
    179c:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    179e:	4b1c      	ldr	r3, [pc, #112]	; (1810 <xTaskIncrementTick+0x120>)
    17a0:	681b      	ldr	r3, [r3, #0]
    17a2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    17a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17a6:	429a      	cmp	r2, r3
    17a8:	d2ca      	bcs.n	1740 <xTaskIncrementTick+0x50>
    17aa:	e7ca      	b.n	1742 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    17ac:	4b18      	ldr	r3, [pc, #96]	; (1810 <xTaskIncrementTick+0x120>)
    17ae:	681b      	ldr	r3, [r3, #0]
    17b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    17b2:	009a      	lsls	r2, r3, #2
    17b4:	18d3      	adds	r3, r2, r3
    17b6:	009b      	lsls	r3, r3, #2
    17b8:	4a13      	ldr	r2, [pc, #76]	; (1808 <xTaskIncrementTick+0x118>)
    17ba:	589b      	ldr	r3, [r3, r2]
    17bc:	2b01      	cmp	r3, #1
    17be:	d806      	bhi.n	17ce <xTaskIncrementTick+0xde>
    17c0:	e006      	b.n	17d0 <xTaskIncrementTick+0xe0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    17c2:	4b14      	ldr	r3, [pc, #80]	; (1814 <xTaskIncrementTick+0x124>)
    17c4:	681a      	ldr	r2, [r3, #0]
    17c6:	3201      	adds	r2, #1
    17c8:	601a      	str	r2, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    17ca:	2400      	movs	r4, #0
    17cc:	e000      	b.n	17d0 <xTaskIncrementTick+0xe0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    17ce:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    17d0:	4b11      	ldr	r3, [pc, #68]	; (1818 <xTaskIncrementTick+0x128>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d000      	beq.n	17da <xTaskIncrementTick+0xea>
		{
			xSwitchRequired = pdTRUE;
    17d8:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    17da:	1c20      	adds	r0, r4, #0
    17dc:	bc04      	pop	{r2}
    17de:	4690      	mov	r8, r2
    17e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17e2:	46c0      	nop			; (mov r8, r8)
    17e4:	20003bcc 	.word	0x20003bcc
    17e8:	20003bd0 	.word	0x20003bd0
    17ec:	20003b04 	.word	0x20003b04
    17f0:	20003bd4 	.word	0x20003bd4
    17f4:	20003b00 	.word	0x20003b00
    17f8:	000013e9 	.word	0x000013e9
    17fc:	20000008 	.word	0x20000008
    1800:	00000ad1 	.word	0x00000ad1
    1804:	20003bf4 	.word	0x20003bf4
    1808:	20003b3c 	.word	0x20003b3c
    180c:	00000a89 	.word	0x00000a89
    1810:	20003bb4 	.word	0x20003bb4
    1814:	20003b38 	.word	0x20003b38
    1818:	20003bf8 	.word	0x20003bf8

0000181c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    181e:	4b2f      	ldr	r3, [pc, #188]	; (18dc <xTaskResumeAll+0xc0>)
    1820:	681b      	ldr	r3, [r3, #0]
    1822:	2b00      	cmp	r3, #0
    1824:	d101      	bne.n	182a <xTaskResumeAll+0xe>
    1826:	b672      	cpsid	i
    1828:	e7fe      	b.n	1828 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    182a:	4b2d      	ldr	r3, [pc, #180]	; (18e0 <xTaskResumeAll+0xc4>)
    182c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    182e:	4b2b      	ldr	r3, [pc, #172]	; (18dc <xTaskResumeAll+0xc0>)
    1830:	681a      	ldr	r2, [r3, #0]
    1832:	3a01      	subs	r2, #1
    1834:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1836:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    1838:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    183a:	2b00      	cmp	r3, #0
    183c:	d149      	bne.n	18d2 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    183e:	4b29      	ldr	r3, [pc, #164]	; (18e4 <xTaskResumeAll+0xc8>)
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	2b00      	cmp	r3, #0
    1844:	d045      	beq.n	18d2 <xTaskResumeAll+0xb6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1846:	4d28      	ldr	r5, [pc, #160]	; (18e8 <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1848:	1c2f      	adds	r7, r5, #0
    184a:	e021      	b.n	1890 <xTaskResumeAll+0x74>
    184c:	68fb      	ldr	r3, [r7, #12]
    184e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1850:	1c20      	adds	r0, r4, #0
    1852:	3018      	adds	r0, #24
    1854:	4b25      	ldr	r3, [pc, #148]	; (18ec <xTaskResumeAll+0xd0>)
    1856:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1858:	1d26      	adds	r6, r4, #4
    185a:	1c30      	adds	r0, r6, #0
    185c:	4b23      	ldr	r3, [pc, #140]	; (18ec <xTaskResumeAll+0xd0>)
    185e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1862:	4a23      	ldr	r2, [pc, #140]	; (18f0 <xTaskResumeAll+0xd4>)
    1864:	6812      	ldr	r2, [r2, #0]
    1866:	4293      	cmp	r3, r2
    1868:	d901      	bls.n	186e <xTaskResumeAll+0x52>
    186a:	4a21      	ldr	r2, [pc, #132]	; (18f0 <xTaskResumeAll+0xd4>)
    186c:	6013      	str	r3, [r2, #0]
    186e:	009a      	lsls	r2, r3, #2
    1870:	18d3      	adds	r3, r2, r3
    1872:	009b      	lsls	r3, r3, #2
    1874:	481f      	ldr	r0, [pc, #124]	; (18f4 <xTaskResumeAll+0xd8>)
    1876:	18c0      	adds	r0, r0, r3
    1878:	1c31      	adds	r1, r6, #0
    187a:	4b1f      	ldr	r3, [pc, #124]	; (18f8 <xTaskResumeAll+0xdc>)
    187c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    187e:	4b1f      	ldr	r3, [pc, #124]	; (18fc <xTaskResumeAll+0xe0>)
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1886:	429a      	cmp	r2, r3
    1888:	d302      	bcc.n	1890 <xTaskResumeAll+0x74>
					{
						xYieldPending = pdTRUE;
    188a:	2201      	movs	r2, #1
    188c:	4b1c      	ldr	r3, [pc, #112]	; (1900 <xTaskResumeAll+0xe4>)
    188e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1890:	682b      	ldr	r3, [r5, #0]
    1892:	2b00      	cmp	r3, #0
    1894:	d1da      	bne.n	184c <xTaskResumeAll+0x30>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    1896:	4b1b      	ldr	r3, [pc, #108]	; (1904 <xTaskResumeAll+0xe8>)
    1898:	681b      	ldr	r3, [r3, #0]
    189a:	2b00      	cmp	r3, #0
    189c:	d011      	beq.n	18c2 <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    189e:	4b19      	ldr	r3, [pc, #100]	; (1904 <xTaskResumeAll+0xe8>)
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	2b00      	cmp	r3, #0
    18a4:	d00d      	beq.n	18c2 <xTaskResumeAll+0xa6>
					{
						if( xTaskIncrementTick() != pdFALSE )
    18a6:	4e18      	ldr	r6, [pc, #96]	; (1908 <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    18a8:	4d15      	ldr	r5, [pc, #84]	; (1900 <xTaskResumeAll+0xe4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    18aa:	4c16      	ldr	r4, [pc, #88]	; (1904 <xTaskResumeAll+0xe8>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    18ac:	47b0      	blx	r6
    18ae:	2800      	cmp	r0, #0
    18b0:	d001      	beq.n	18b6 <xTaskResumeAll+0x9a>
						{
							xYieldPending = pdTRUE;
    18b2:	2301      	movs	r3, #1
    18b4:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    18b6:	6823      	ldr	r3, [r4, #0]
    18b8:	3b01      	subs	r3, #1
    18ba:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    18bc:	6823      	ldr	r3, [r4, #0]
    18be:	2b00      	cmp	r3, #0
    18c0:	d1f4      	bne.n	18ac <xTaskResumeAll+0x90>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    18c2:	4b0f      	ldr	r3, [pc, #60]	; (1900 <xTaskResumeAll+0xe4>)
    18c4:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    18c6:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    18c8:	2b01      	cmp	r3, #1
    18ca:	d102      	bne.n	18d2 <xTaskResumeAll+0xb6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    18cc:	4b0f      	ldr	r3, [pc, #60]	; (190c <xTaskResumeAll+0xf0>)
    18ce:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    18d0:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    18d2:	4b0f      	ldr	r3, [pc, #60]	; (1910 <xTaskResumeAll+0xf4>)
    18d4:	4798      	blx	r3

	return xAlreadyYielded;
}
    18d6:	1c20      	adds	r0, r4, #0
    18d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	20003bcc 	.word	0x20003bcc
    18e0:	00000b65 	.word	0x00000b65
    18e4:	20003bdc 	.word	0x20003bdc
    18e8:	20003bb8 	.word	0x20003bb8
    18ec:	00000ad1 	.word	0x00000ad1
    18f0:	20003bf4 	.word	0x20003bf4
    18f4:	20003b3c 	.word	0x20003b3c
    18f8:	00000a89 	.word	0x00000a89
    18fc:	20003bb4 	.word	0x20003bb4
    1900:	20003bf8 	.word	0x20003bf8
    1904:	20003b38 	.word	0x20003b38
    1908:	000016f1 	.word	0x000016f1
    190c:	00000b4d 	.word	0x00000b4d
    1910:	00000b7d 	.word	0x00000b7d

00001914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1914:	b510      	push	{r4, lr}
    1916:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1918:	d016      	beq.n	1948 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    191a:	4b0d      	ldr	r3, [pc, #52]	; (1950 <vTaskDelay+0x3c>)
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	2b00      	cmp	r3, #0
    1920:	d001      	beq.n	1926 <vTaskDelay+0x12>
    1922:	b672      	cpsid	i
    1924:	e7fe      	b.n	1924 <vTaskDelay+0x10>
			vTaskSuspendAll();
    1926:	4b0b      	ldr	r3, [pc, #44]	; (1954 <vTaskDelay+0x40>)
    1928:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    192a:	4b0b      	ldr	r3, [pc, #44]	; (1958 <vTaskDelay+0x44>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1930:	4b0a      	ldr	r3, [pc, #40]	; (195c <vTaskDelay+0x48>)
    1932:	6818      	ldr	r0, [r3, #0]
    1934:	3004      	adds	r0, #4
    1936:	4b0a      	ldr	r3, [pc, #40]	; (1960 <vTaskDelay+0x4c>)
    1938:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    193a:	1c20      	adds	r0, r4, #0
    193c:	4b09      	ldr	r3, [pc, #36]	; (1964 <vTaskDelay+0x50>)
    193e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    1940:	4b09      	ldr	r3, [pc, #36]	; (1968 <vTaskDelay+0x54>)
    1942:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1944:	2800      	cmp	r0, #0
    1946:	d101      	bne.n	194c <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <vTaskDelay+0x58>)
    194a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    194c:	bd10      	pop	{r4, pc}
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	20003bcc 	.word	0x20003bcc
    1954:	000016c1 	.word	0x000016c1
    1958:	20003bd0 	.word	0x20003bd0
    195c:	20003bb4 	.word	0x20003bb4
    1960:	00000ad1 	.word	0x00000ad1
    1964:	00001415 	.word	0x00001415
    1968:	0000181d 	.word	0x0000181d
    196c:	00000b4d 	.word	0x00000b4d

00001970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1972:	4e15      	ldr	r6, [pc, #84]	; (19c8 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1974:	4f15      	ldr	r7, [pc, #84]	; (19cc <prvIdleTask+0x5c>)
    1976:	e01e      	b.n	19b6 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1978:	4b15      	ldr	r3, [pc, #84]	; (19d0 <prvIdleTask+0x60>)
    197a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    197c:	4b15      	ldr	r3, [pc, #84]	; (19d4 <prvIdleTask+0x64>)
    197e:	681c      	ldr	r4, [r3, #0]
			}
			( void ) xTaskResumeAll();
    1980:	4b15      	ldr	r3, [pc, #84]	; (19d8 <prvIdleTask+0x68>)
    1982:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    1984:	2c00      	cmp	r4, #0
    1986:	d016      	beq.n	19b6 <prvIdleTask+0x46>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1988:	4b14      	ldr	r3, [pc, #80]	; (19dc <prvIdleTask+0x6c>)
    198a:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    198c:	4b11      	ldr	r3, [pc, #68]	; (19d4 <prvIdleTask+0x64>)
    198e:	68db      	ldr	r3, [r3, #12]
    1990:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1992:	1d20      	adds	r0, r4, #4
    1994:	4b12      	ldr	r3, [pc, #72]	; (19e0 <prvIdleTask+0x70>)
    1996:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    1998:	4b12      	ldr	r3, [pc, #72]	; (19e4 <prvIdleTask+0x74>)
    199a:	681a      	ldr	r2, [r3, #0]
    199c:	3a01      	subs	r2, #1
    199e:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    19a0:	4b09      	ldr	r3, [pc, #36]	; (19c8 <prvIdleTask+0x58>)
    19a2:	681a      	ldr	r2, [r3, #0]
    19a4:	3a01      	subs	r2, #1
    19a6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    19a8:	4b0f      	ldr	r3, [pc, #60]	; (19e8 <prvIdleTask+0x78>)
    19aa:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    19ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
    19ae:	4d0f      	ldr	r5, [pc, #60]	; (19ec <prvIdleTask+0x7c>)
    19b0:	47a8      	blx	r5
		vPortFree( pxTCB );
    19b2:	1c20      	adds	r0, r4, #0
    19b4:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    19b6:	6833      	ldr	r3, [r6, #0]
    19b8:	2b00      	cmp	r3, #0
    19ba:	d1dd      	bne.n	1978 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    19bc:	683b      	ldr	r3, [r7, #0]
    19be:	2b01      	cmp	r3, #1
    19c0:	d9f9      	bls.n	19b6 <prvIdleTask+0x46>
			{
				taskYIELD();
    19c2:	4b0b      	ldr	r3, [pc, #44]	; (19f0 <prvIdleTask+0x80>)
    19c4:	4798      	blx	r3
    19c6:	e7f6      	b.n	19b6 <prvIdleTask+0x46>
    19c8:	20003b0c 	.word	0x20003b0c
    19cc:	20003b3c 	.word	0x20003b3c
    19d0:	000016c1 	.word	0x000016c1
    19d4:	20003ba0 	.word	0x20003ba0
    19d8:	0000181d 	.word	0x0000181d
    19dc:	00000b65 	.word	0x00000b65
    19e0:	00000ad1 	.word	0x00000ad1
    19e4:	20003bdc 	.word	0x20003bdc
    19e8:	00000b7d 	.word	0x00000b7d
    19ec:	00000d05 	.word	0x00000d05
    19f0:	00000b4d 	.word	0x00000b4d

000019f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    19f4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    19f6:	4b20      	ldr	r3, [pc, #128]	; (1a78 <vTaskSwitchContext+0x84>)
    19f8:	681b      	ldr	r3, [r3, #0]
    19fa:	2b00      	cmp	r3, #0
    19fc:	d003      	beq.n	1a06 <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    19fe:	2201      	movs	r2, #1
    1a00:	4b1e      	ldr	r3, [pc, #120]	; (1a7c <vTaskSwitchContext+0x88>)
    1a02:	601a      	str	r2, [r3, #0]
    1a04:	e036      	b.n	1a74 <vTaskSwitchContext+0x80>
	}
	else
	{
		xYieldPending = pdFALSE;
    1a06:	2200      	movs	r2, #0
    1a08:	4b1c      	ldr	r3, [pc, #112]	; (1a7c <vTaskSwitchContext+0x88>)
    1a0a:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    1a0c:	4b1c      	ldr	r3, [pc, #112]	; (1a80 <vTaskSwitchContext+0x8c>)
    1a0e:	681b      	ldr	r3, [r3, #0]
    1a10:	009a      	lsls	r2, r3, #2
    1a12:	18d3      	adds	r3, r2, r3
    1a14:	009b      	lsls	r3, r3, #2
    1a16:	4a1b      	ldr	r2, [pc, #108]	; (1a84 <vTaskSwitchContext+0x90>)
    1a18:	589b      	ldr	r3, [r3, r2]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d116      	bne.n	1a4c <vTaskSwitchContext+0x58>
    1a1e:	4b18      	ldr	r3, [pc, #96]	; (1a80 <vTaskSwitchContext+0x8c>)
    1a20:	681b      	ldr	r3, [r3, #0]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d105      	bne.n	1a32 <vTaskSwitchContext+0x3e>
    1a26:	e002      	b.n	1a2e <vTaskSwitchContext+0x3a>
    1a28:	6802      	ldr	r2, [r0, #0]
    1a2a:	2a00      	cmp	r2, #0
    1a2c:	d104      	bne.n	1a38 <vTaskSwitchContext+0x44>
    1a2e:	b672      	cpsid	i
    1a30:	e7fe      	b.n	1a30 <vTaskSwitchContext+0x3c>
    1a32:	4b13      	ldr	r3, [pc, #76]	; (1a80 <vTaskSwitchContext+0x8c>)
    1a34:	4c13      	ldr	r4, [pc, #76]	; (1a84 <vTaskSwitchContext+0x90>)
    1a36:	1c18      	adds	r0, r3, #0
    1a38:	681a      	ldr	r2, [r3, #0]
    1a3a:	3a01      	subs	r2, #1
    1a3c:	601a      	str	r2, [r3, #0]
    1a3e:	681a      	ldr	r2, [r3, #0]
    1a40:	0091      	lsls	r1, r2, #2
    1a42:	188a      	adds	r2, r1, r2
    1a44:	0092      	lsls	r2, r2, #2
    1a46:	5912      	ldr	r2, [r2, r4]
    1a48:	2a00      	cmp	r2, #0
    1a4a:	d0ed      	beq.n	1a28 <vTaskSwitchContext+0x34>
    1a4c:	4b0c      	ldr	r3, [pc, #48]	; (1a80 <vTaskSwitchContext+0x8c>)
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	009a      	lsls	r2, r3, #2
    1a52:	18d3      	adds	r3, r2, r3
    1a54:	009b      	lsls	r3, r3, #2
    1a56:	4a0b      	ldr	r2, [pc, #44]	; (1a84 <vTaskSwitchContext+0x90>)
    1a58:	18d3      	adds	r3, r2, r3
    1a5a:	685a      	ldr	r2, [r3, #4]
    1a5c:	6852      	ldr	r2, [r2, #4]
    1a5e:	605a      	str	r2, [r3, #4]
    1a60:	1c19      	adds	r1, r3, #0
    1a62:	3108      	adds	r1, #8
    1a64:	428a      	cmp	r2, r1
    1a66:	d101      	bne.n	1a6c <vTaskSwitchContext+0x78>
    1a68:	6852      	ldr	r2, [r2, #4]
    1a6a:	605a      	str	r2, [r3, #4]
    1a6c:	685b      	ldr	r3, [r3, #4]
    1a6e:	68da      	ldr	r2, [r3, #12]
    1a70:	4b05      	ldr	r3, [pc, #20]	; (1a88 <vTaskSwitchContext+0x94>)
    1a72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1a74:	bd10      	pop	{r4, pc}
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	20003bcc 	.word	0x20003bcc
    1a7c:	20003bf8 	.word	0x20003bf8
    1a80:	20003bf4 	.word	0x20003bf4
    1a84:	20003b3c 	.word	0x20003b3c
    1a88:	20003bb4 	.word	0x20003bb4

00001a8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1a8c:	b538      	push	{r3, r4, r5, lr}
    1a8e:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    1a90:	2800      	cmp	r0, #0
    1a92:	d101      	bne.n	1a98 <vTaskPlaceOnEventList+0xc>
    1a94:	b672      	cpsid	i
    1a96:	e7fe      	b.n	1a96 <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1a98:	4d0b      	ldr	r5, [pc, #44]	; (1ac8 <vTaskPlaceOnEventList+0x3c>)
    1a9a:	6829      	ldr	r1, [r5, #0]
    1a9c:	3118      	adds	r1, #24
    1a9e:	4b0b      	ldr	r3, [pc, #44]	; (1acc <vTaskPlaceOnEventList+0x40>)
    1aa0:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1aa2:	6828      	ldr	r0, [r5, #0]
    1aa4:	3004      	adds	r0, #4
    1aa6:	4b0a      	ldr	r3, [pc, #40]	; (1ad0 <vTaskPlaceOnEventList+0x44>)
    1aa8:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    1aaa:	1c63      	adds	r3, r4, #1
    1aac:	d106      	bne.n	1abc <vTaskPlaceOnEventList+0x30>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1aae:	4b06      	ldr	r3, [pc, #24]	; (1ac8 <vTaskPlaceOnEventList+0x3c>)
    1ab0:	6819      	ldr	r1, [r3, #0]
    1ab2:	3104      	adds	r1, #4
    1ab4:	4807      	ldr	r0, [pc, #28]	; (1ad4 <vTaskPlaceOnEventList+0x48>)
    1ab6:	4b08      	ldr	r3, [pc, #32]	; (1ad8 <vTaskPlaceOnEventList+0x4c>)
    1ab8:	4798      	blx	r3
    1aba:	e004      	b.n	1ac6 <vTaskPlaceOnEventList+0x3a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    1abc:	4b07      	ldr	r3, [pc, #28]	; (1adc <vTaskPlaceOnEventList+0x50>)
    1abe:	6818      	ldr	r0, [r3, #0]
    1ac0:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1ac2:	4b07      	ldr	r3, [pc, #28]	; (1ae0 <vTaskPlaceOnEventList+0x54>)
    1ac4:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1ac6:	bd38      	pop	{r3, r4, r5, pc}
    1ac8:	20003bb4 	.word	0x20003bb4
    1acc:	00000aa1 	.word	0x00000aa1
    1ad0:	00000ad1 	.word	0x00000ad1
    1ad4:	20003be0 	.word	0x20003be0
    1ad8:	00000a89 	.word	0x00000a89
    1adc:	20003bd0 	.word	0x20003bd0
    1ae0:	00001415 	.word	0x00001415

00001ae4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    1ae4:	b538      	push	{r3, r4, r5, lr}
    1ae6:	1c0d      	adds	r5, r1, #0
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    1ae8:	2800      	cmp	r0, #0
    1aea:	d101      	bne.n	1af0 <vTaskPlaceOnEventListRestricted+0xc>
    1aec:	b672      	cpsid	i
    1aee:	e7fe      	b.n	1aee <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1af0:	4c07      	ldr	r4, [pc, #28]	; (1b10 <vTaskPlaceOnEventListRestricted+0x2c>)
    1af2:	6821      	ldr	r1, [r4, #0]
    1af4:	3118      	adds	r1, #24
    1af6:	4b07      	ldr	r3, [pc, #28]	; (1b14 <vTaskPlaceOnEventListRestricted+0x30>)
    1af8:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1afa:	6820      	ldr	r0, [r4, #0]
    1afc:	3004      	adds	r0, #4
    1afe:	4b06      	ldr	r3, [pc, #24]	; (1b18 <vTaskPlaceOnEventListRestricted+0x34>)
    1b00:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    1b02:	4b06      	ldr	r3, [pc, #24]	; (1b1c <vTaskPlaceOnEventListRestricted+0x38>)
    1b04:	6818      	ldr	r0, [r3, #0]
    1b06:	1828      	adds	r0, r5, r0

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    1b08:	4b05      	ldr	r3, [pc, #20]	; (1b20 <vTaskPlaceOnEventListRestricted+0x3c>)
    1b0a:	4798      	blx	r3
	}
    1b0c:	bd38      	pop	{r3, r4, r5, pc}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	20003bb4 	.word	0x20003bb4
    1b14:	00000a89 	.word	0x00000a89
    1b18:	00000ad1 	.word	0x00000ad1
    1b1c:	20003bd0 	.word	0x20003bd0
    1b20:	00001415 	.word	0x00001415

00001b24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1b24:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1b26:	68c3      	ldr	r3, [r0, #12]
    1b28:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    1b2a:	2c00      	cmp	r4, #0
    1b2c:	d101      	bne.n	1b32 <xTaskRemoveFromEventList+0xe>
    1b2e:	b672      	cpsid	i
    1b30:	e7fe      	b.n	1b30 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1b32:	1c25      	adds	r5, r4, #0
    1b34:	3518      	adds	r5, #24
    1b36:	1c28      	adds	r0, r5, #0
    1b38:	4b14      	ldr	r3, [pc, #80]	; (1b8c <xTaskRemoveFromEventList+0x68>)
    1b3a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1b3c:	4b14      	ldr	r3, [pc, #80]	; (1b90 <xTaskRemoveFromEventList+0x6c>)
    1b3e:	681b      	ldr	r3, [r3, #0]
    1b40:	2b00      	cmp	r3, #0
    1b42:	d113      	bne.n	1b6c <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1b44:	1d25      	adds	r5, r4, #4
    1b46:	1c28      	adds	r0, r5, #0
    1b48:	4b10      	ldr	r3, [pc, #64]	; (1b8c <xTaskRemoveFromEventList+0x68>)
    1b4a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    1b4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1b4e:	4a11      	ldr	r2, [pc, #68]	; (1b94 <xTaskRemoveFromEventList+0x70>)
    1b50:	6812      	ldr	r2, [r2, #0]
    1b52:	4293      	cmp	r3, r2
    1b54:	d901      	bls.n	1b5a <xTaskRemoveFromEventList+0x36>
    1b56:	4a0f      	ldr	r2, [pc, #60]	; (1b94 <xTaskRemoveFromEventList+0x70>)
    1b58:	6013      	str	r3, [r2, #0]
    1b5a:	009a      	lsls	r2, r3, #2
    1b5c:	18d3      	adds	r3, r2, r3
    1b5e:	009b      	lsls	r3, r3, #2
    1b60:	480d      	ldr	r0, [pc, #52]	; (1b98 <xTaskRemoveFromEventList+0x74>)
    1b62:	18c0      	adds	r0, r0, r3
    1b64:	1c29      	adds	r1, r5, #0
    1b66:	4b0d      	ldr	r3, [pc, #52]	; (1b9c <xTaskRemoveFromEventList+0x78>)
    1b68:	4798      	blx	r3
    1b6a:	e003      	b.n	1b74 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1b6c:	480c      	ldr	r0, [pc, #48]	; (1ba0 <xTaskRemoveFromEventList+0x7c>)
    1b6e:	1c29      	adds	r1, r5, #0
    1b70:	4b0a      	ldr	r3, [pc, #40]	; (1b9c <xTaskRemoveFromEventList+0x78>)
    1b72:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1b74:	4b0b      	ldr	r3, [pc, #44]	; (1ba4 <xTaskRemoveFromEventList+0x80>)
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    1b7c:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1b7e:	429a      	cmp	r2, r3
    1b80:	d903      	bls.n	1b8a <xTaskRemoveFromEventList+0x66>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1b82:	2201      	movs	r2, #1
    1b84:	4b08      	ldr	r3, [pc, #32]	; (1ba8 <xTaskRemoveFromEventList+0x84>)
    1b86:	601a      	str	r2, [r3, #0]
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    1b88:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1b8a:	bd38      	pop	{r3, r4, r5, pc}
    1b8c:	00000ad1 	.word	0x00000ad1
    1b90:	20003bcc 	.word	0x20003bcc
    1b94:	20003bf4 	.word	0x20003bf4
    1b98:	20003b3c 	.word	0x20003b3c
    1b9c:	00000a89 	.word	0x00000a89
    1ba0:	20003bb8 	.word	0x20003bb8
    1ba4:	20003bb4 	.word	0x20003bb4
    1ba8:	20003bf8 	.word	0x20003bf8

00001bac <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    1bac:	2800      	cmp	r0, #0
    1bae:	d101      	bne.n	1bb4 <vTaskSetTimeOutState+0x8>
    1bb0:	b672      	cpsid	i
    1bb2:	e7fe      	b.n	1bb2 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1bb4:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <vTaskSetTimeOutState+0x18>)
    1bb6:	681b      	ldr	r3, [r3, #0]
    1bb8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1bba:	4b03      	ldr	r3, [pc, #12]	; (1bc8 <vTaskSetTimeOutState+0x1c>)
    1bbc:	681b      	ldr	r3, [r3, #0]
    1bbe:	6043      	str	r3, [r0, #4]
}
    1bc0:	4770      	bx	lr
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	20003b00 	.word	0x20003b00
    1bc8:	20003bd0 	.word	0x20003bd0

00001bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1bcc:	b570      	push	{r4, r5, r6, lr}
    1bce:	1c04      	adds	r4, r0, #0
    1bd0:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d101      	bne.n	1bda <xTaskCheckForTimeOut+0xe>
    1bd6:	b672      	cpsid	i
    1bd8:	e7fe      	b.n	1bd8 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    1bda:	2900      	cmp	r1, #0
    1bdc:	d101      	bne.n	1be2 <xTaskCheckForTimeOut+0x16>
    1bde:	b672      	cpsid	i
    1be0:	e7fe      	b.n	1be0 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    1be2:	4b11      	ldr	r3, [pc, #68]	; (1c28 <xTaskCheckForTimeOut+0x5c>)
    1be4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1be6:	4b11      	ldr	r3, [pc, #68]	; (1c2c <xTaskCheckForTimeOut+0x60>)
    1be8:	681a      	ldr	r2, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    1bea:	6833      	ldr	r3, [r6, #0]
    1bec:	1c58      	adds	r0, r3, #1
    1bee:	d015      	beq.n	1c1c <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1bf0:	490f      	ldr	r1, [pc, #60]	; (1c30 <xTaskCheckForTimeOut+0x64>)
    1bf2:	6809      	ldr	r1, [r1, #0]
    1bf4:	6820      	ldr	r0, [r4, #0]
    1bf6:	4288      	cmp	r0, r1
    1bf8:	d003      	beq.n	1c02 <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1bfa:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1bfc:	6861      	ldr	r1, [r4, #4]
    1bfe:	428a      	cmp	r2, r1
    1c00:	d20d      	bcs.n	1c1e <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    1c02:	6861      	ldr	r1, [r4, #4]
    1c04:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    1c06:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    1c08:	4283      	cmp	r3, r0
    1c0a:	d908      	bls.n	1c1e <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1c0c:	1a8a      	subs	r2, r1, r2
    1c0e:	18d3      	adds	r3, r2, r3
    1c10:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    1c12:	1c20      	adds	r0, r4, #0
    1c14:	4b07      	ldr	r3, [pc, #28]	; (1c34 <xTaskCheckForTimeOut+0x68>)
    1c16:	4798      	blx	r3
			xReturn = pdFALSE;
    1c18:	2500      	movs	r5, #0
    1c1a:	e000      	b.n	1c1e <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    1c1c:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    1c1e:	4b06      	ldr	r3, [pc, #24]	; (1c38 <xTaskCheckForTimeOut+0x6c>)
    1c20:	4798      	blx	r3

	return xReturn;
}
    1c22:	1c28      	adds	r0, r5, #0
    1c24:	bd70      	pop	{r4, r5, r6, pc}
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	00000b65 	.word	0x00000b65
    1c2c:	20003bd0 	.word	0x20003bd0
    1c30:	20003b00 	.word	0x20003b00
    1c34:	00001bad 	.word	0x00001bad
    1c38:	00000b7d 	.word	0x00000b7d

00001c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1c3c:	2201      	movs	r2, #1
    1c3e:	4b01      	ldr	r3, [pc, #4]	; (1c44 <vTaskMissedYield+0x8>)
    1c40:	601a      	str	r2, [r3, #0]
}
    1c42:	4770      	bx	lr
    1c44:	20003bf8 	.word	0x20003bf8

00001c48 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1c48:	4b01      	ldr	r3, [pc, #4]	; (1c50 <xTaskGetCurrentTaskHandle+0x8>)
    1c4a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    1c4c:	4770      	bx	lr
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	20003bb4 	.word	0x20003bb4

00001c54 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1c54:	4b05      	ldr	r3, [pc, #20]	; (1c6c <xTaskGetSchedulerState+0x18>)
    1c56:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1c58:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d004      	beq.n	1c68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c5e:	4b04      	ldr	r3, [pc, #16]	; (1c70 <xTaskGetSchedulerState+0x1c>)
    1c60:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
    1c62:	4243      	negs	r3, r0
    1c64:	4158      	adcs	r0, r3
    1c66:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    1c68:	4770      	bx	lr
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	20003b08 	.word	0x20003b08
    1c70:	20003bcc 	.word	0x20003bcc

00001c74 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    1c74:	b538      	push	{r3, r4, r5, lr}
    1c76:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    1c78:	d031      	beq.n	1cde <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1c7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1c7c:	4a18      	ldr	r2, [pc, #96]	; (1ce0 <vTaskPriorityInherit+0x6c>)
    1c7e:	6812      	ldr	r2, [r2, #0]
    1c80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1c82:	4293      	cmp	r3, r2
    1c84:	d22b      	bcs.n	1cde <vTaskPriorityInherit+0x6a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1c86:	6982      	ldr	r2, [r0, #24]
    1c88:	2a00      	cmp	r2, #0
    1c8a:	db05      	blt.n	1c98 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c8c:	4a14      	ldr	r2, [pc, #80]	; (1ce0 <vTaskPriorityInherit+0x6c>)
    1c8e:	6812      	ldr	r2, [r2, #0]
    1c90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1c92:	2105      	movs	r1, #5
    1c94:	1a8a      	subs	r2, r1, r2
    1c96:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1c98:	009a      	lsls	r2, r3, #2
    1c9a:	18d3      	adds	r3, r2, r3
    1c9c:	009b      	lsls	r3, r3, #2
    1c9e:	4a11      	ldr	r2, [pc, #68]	; (1ce4 <vTaskPriorityInherit+0x70>)
    1ca0:	18d3      	adds	r3, r2, r3
    1ca2:	6962      	ldr	r2, [r4, #20]
    1ca4:	429a      	cmp	r2, r3
    1ca6:	d116      	bne.n	1cd6 <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1ca8:	1d25      	adds	r5, r4, #4
    1caa:	1c28      	adds	r0, r5, #0
    1cac:	4b0e      	ldr	r3, [pc, #56]	; (1ce8 <vTaskPriorityInherit+0x74>)
    1cae:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1cb0:	4b0b      	ldr	r3, [pc, #44]	; (1ce0 <vTaskPriorityInherit+0x6c>)
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cb6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    1cb8:	4a0c      	ldr	r2, [pc, #48]	; (1cec <vTaskPriorityInherit+0x78>)
    1cba:	6812      	ldr	r2, [r2, #0]
    1cbc:	4293      	cmp	r3, r2
    1cbe:	d901      	bls.n	1cc4 <vTaskPriorityInherit+0x50>
    1cc0:	4a0a      	ldr	r2, [pc, #40]	; (1cec <vTaskPriorityInherit+0x78>)
    1cc2:	6013      	str	r3, [r2, #0]
    1cc4:	0098      	lsls	r0, r3, #2
    1cc6:	18c3      	adds	r3, r0, r3
    1cc8:	009b      	lsls	r3, r3, #2
    1cca:	4806      	ldr	r0, [pc, #24]	; (1ce4 <vTaskPriorityInherit+0x70>)
    1ccc:	18c0      	adds	r0, r0, r3
    1cce:	1c29      	adds	r1, r5, #0
    1cd0:	4b07      	ldr	r3, [pc, #28]	; (1cf0 <vTaskPriorityInherit+0x7c>)
    1cd2:	4798      	blx	r3
    1cd4:	e003      	b.n	1cde <vTaskPriorityInherit+0x6a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1cd6:	4b02      	ldr	r3, [pc, #8]	; (1ce0 <vTaskPriorityInherit+0x6c>)
    1cd8:	681b      	ldr	r3, [r3, #0]
    1cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1cde:	bd38      	pop	{r3, r4, r5, pc}
    1ce0:	20003bb4 	.word	0x20003bb4
    1ce4:	20003b3c 	.word	0x20003b3c
    1ce8:	00000ad1 	.word	0x00000ad1
    1cec:	20003bf4 	.word	0x20003bf4
    1cf0:	00000a89 	.word	0x00000a89

00001cf4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    1cf4:	b538      	push	{r3, r4, r5, lr}
    1cf6:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1cf8:	d01d      	beq.n	1d36 <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1cfa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1cfc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1cfe:	429a      	cmp	r2, r3
    1d00:	d019      	beq.n	1d36 <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1d02:	1d05      	adds	r5, r0, #4
    1d04:	1c28      	adds	r0, r5, #0
    1d06:	4b0c      	ldr	r3, [pc, #48]	; (1d38 <vTaskPriorityDisinherit+0x44>)
    1d08:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1d0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1d0c:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1d0e:	69a2      	ldr	r2, [r4, #24]
    1d10:	2a00      	cmp	r2, #0
    1d12:	db02      	blt.n	1d1a <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d14:	2205      	movs	r2, #5
    1d16:	1ad2      	subs	r2, r2, r3
    1d18:	61a2      	str	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    1d1a:	4a08      	ldr	r2, [pc, #32]	; (1d3c <vTaskPriorityDisinherit+0x48>)
    1d1c:	6812      	ldr	r2, [r2, #0]
    1d1e:	4293      	cmp	r3, r2
    1d20:	d901      	bls.n	1d26 <vTaskPriorityDisinherit+0x32>
    1d22:	4a06      	ldr	r2, [pc, #24]	; (1d3c <vTaskPriorityDisinherit+0x48>)
    1d24:	6013      	str	r3, [r2, #0]
    1d26:	0098      	lsls	r0, r3, #2
    1d28:	18c3      	adds	r3, r0, r3
    1d2a:	009b      	lsls	r3, r3, #2
    1d2c:	4804      	ldr	r0, [pc, #16]	; (1d40 <vTaskPriorityDisinherit+0x4c>)
    1d2e:	18c0      	adds	r0, r0, r3
    1d30:	1c29      	adds	r1, r5, #0
    1d32:	4b04      	ldr	r3, [pc, #16]	; (1d44 <vTaskPriorityDisinherit+0x50>)
    1d34:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1d36:	bd38      	pop	{r3, r4, r5, pc}
    1d38:	00000ad1 	.word	0x00000ad1
    1d3c:	20003bf4 	.word	0x20003bf4
    1d40:	20003b3c 	.word	0x20003b3c
    1d44:	00000a89 	.word	0x00000a89

00001d48 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    1d48:	b510      	push	{r4, lr}
    1d4a:	1c04      	adds	r4, r0, #0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1d4c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1d4e:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    1d50:	4291      	cmp	r1, r2
    1d52:	d80b      	bhi.n	1d6c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    1d54:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1d56:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    1d58:	69a3      	ldr	r3, [r4, #24]
    1d5a:	429a      	cmp	r2, r3
    1d5c:	d211      	bcs.n	1d82 <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1d5e:	4b09      	ldr	r3, [pc, #36]	; (1d84 <prvInsertTimerInActiveList+0x3c>)
    1d60:	6818      	ldr	r0, [r3, #0]
    1d62:	1d21      	adds	r1, r4, #4
    1d64:	4b08      	ldr	r3, [pc, #32]	; (1d88 <prvInsertTimerInActiveList+0x40>)
    1d66:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    1d68:	2000      	movs	r0, #0
    1d6a:	e00a      	b.n	1d82 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1d6c:	429a      	cmp	r2, r3
    1d6e:	d202      	bcs.n	1d76 <prvInsertTimerInActiveList+0x2e>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    1d70:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1d72:	4299      	cmp	r1, r3
    1d74:	d205      	bcs.n	1d82 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1d76:	4b05      	ldr	r3, [pc, #20]	; (1d8c <prvInsertTimerInActiveList+0x44>)
    1d78:	6818      	ldr	r0, [r3, #0]
    1d7a:	1d21      	adds	r1, r4, #4
    1d7c:	4b02      	ldr	r3, [pc, #8]	; (1d88 <prvInsertTimerInActiveList+0x40>)
    1d7e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    1d80:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    1d82:	bd10      	pop	{r4, pc}
    1d84:	20003c30 	.word	0x20003c30
    1d88:	00000aa1 	.word	0x00000aa1
    1d8c:	20003bfc 	.word	0x20003bfc

00001d90 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    1d90:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    1d92:	4b10      	ldr	r3, [pc, #64]	; (1dd4 <prvCheckForValidListAndQueue+0x44>)
    1d94:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    1d96:	4b10      	ldr	r3, [pc, #64]	; (1dd8 <prvCheckForValidListAndQueue+0x48>)
    1d98:	681b      	ldr	r3, [r3, #0]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d116      	bne.n	1dcc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    1d9e:	4d0f      	ldr	r5, [pc, #60]	; (1ddc <prvCheckForValidListAndQueue+0x4c>)
    1da0:	1c28      	adds	r0, r5, #0
    1da2:	4e0f      	ldr	r6, [pc, #60]	; (1de0 <prvCheckForValidListAndQueue+0x50>)
    1da4:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    1da6:	4c0f      	ldr	r4, [pc, #60]	; (1de4 <prvCheckForValidListAndQueue+0x54>)
    1da8:	1c20      	adds	r0, r4, #0
    1daa:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    1dac:	4b0e      	ldr	r3, [pc, #56]	; (1de8 <prvCheckForValidListAndQueue+0x58>)
    1dae:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    1db0:	4b0e      	ldr	r3, [pc, #56]	; (1dec <prvCheckForValidListAndQueue+0x5c>)
    1db2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1db4:	2002      	movs	r0, #2
    1db6:	210c      	movs	r1, #12
    1db8:	2200      	movs	r2, #0
    1dba:	4b0d      	ldr	r3, [pc, #52]	; (1df0 <prvCheckForValidListAndQueue+0x60>)
    1dbc:	4798      	blx	r3
			configASSERT( xTimerQueue );
    1dbe:	2800      	cmp	r0, #0
    1dc0:	d002      	beq.n	1dc8 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1dc2:	4b05      	ldr	r3, [pc, #20]	; (1dd8 <prvCheckForValidListAndQueue+0x48>)
    1dc4:	6018      	str	r0, [r3, #0]
    1dc6:	e001      	b.n	1dcc <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    1dc8:	b672      	cpsid	i
    1dca:	e7fe      	b.n	1dca <prvCheckForValidListAndQueue+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    1dcc:	4b09      	ldr	r3, [pc, #36]	; (1df4 <prvCheckForValidListAndQueue+0x64>)
    1dce:	4798      	blx	r3
}
    1dd0:	bd70      	pop	{r4, r5, r6, pc}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	00000b65 	.word	0x00000b65
    1dd8:	20003c2c 	.word	0x20003c2c
    1ddc:	20003c00 	.word	0x20003c00
    1de0:	00000a69 	.word	0x00000a69
    1de4:	20003c14 	.word	0x20003c14
    1de8:	20003bfc 	.word	0x20003bfc
    1dec:	20003c30 	.word	0x20003c30
    1df0:	00000f21 	.word	0x00000f21
    1df4:	00000b7d 	.word	0x00000b7d

00001df8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    1df8:	b510      	push	{r4, lr}
    1dfa:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    1dfc:	4b0b      	ldr	r3, [pc, #44]	; (1e2c <xTimerCreateTimerTask+0x34>)
    1dfe:	4798      	blx	r3

	if( xTimerQueue != NULL )
    1e00:	4b0b      	ldr	r3, [pc, #44]	; (1e30 <xTimerCreateTimerTask+0x38>)
    1e02:	681b      	ldr	r3, [r3, #0]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d00c      	beq.n	1e22 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    1e08:	2302      	movs	r3, #2
    1e0a:	9300      	str	r3, [sp, #0]
    1e0c:	2300      	movs	r3, #0
    1e0e:	9301      	str	r3, [sp, #4]
    1e10:	9302      	str	r3, [sp, #8]
    1e12:	9303      	str	r3, [sp, #12]
    1e14:	4807      	ldr	r0, [pc, #28]	; (1e34 <xTimerCreateTimerTask+0x3c>)
    1e16:	4908      	ldr	r1, [pc, #32]	; (1e38 <xTimerCreateTimerTask+0x40>)
    1e18:	2250      	movs	r2, #80	; 0x50
    1e1a:	4c08      	ldr	r4, [pc, #32]	; (1e3c <xTimerCreateTimerTask+0x44>)
    1e1c:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    1e1e:	2800      	cmp	r0, #0
    1e20:	d101      	bne.n	1e26 <xTimerCreateTimerTask+0x2e>
    1e22:	b672      	cpsid	i
    1e24:	e7fe      	b.n	1e24 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
    1e26:	b004      	add	sp, #16
    1e28:	bd10      	pop	{r4, pc}
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	00001d91 	.word	0x00001d91
    1e30:	20003c2c 	.word	0x20003c2c
    1e34:	00001f61 	.word	0x00001f61
    1e38:	000023a8 	.word	0x000023a8
    1e3c:	0000146d 	.word	0x0000146d

00001e40 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    1e40:	b510      	push	{r4, lr}
    1e42:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    1e44:	4c13      	ldr	r4, [pc, #76]	; (1e94 <xTimerGenericCommand+0x54>)
    1e46:	6824      	ldr	r4, [r4, #0]
    1e48:	2c00      	cmp	r4, #0
    1e4a:	d01f      	beq.n	1e8c <xTimerGenericCommand+0x4c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    1e4c:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1e4e:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    1e50:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1e52:	2905      	cmp	r1, #5
    1e54:	dc13      	bgt.n	1e7e <xTimerGenericCommand+0x3e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1e56:	4b10      	ldr	r3, [pc, #64]	; (1e98 <xTimerGenericCommand+0x58>)
    1e58:	4798      	blx	r3
    1e5a:	2802      	cmp	r0, #2
    1e5c:	d107      	bne.n	1e6e <xTimerGenericCommand+0x2e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1e5e:	4b0d      	ldr	r3, [pc, #52]	; (1e94 <xTimerGenericCommand+0x54>)
    1e60:	6818      	ldr	r0, [r3, #0]
    1e62:	a901      	add	r1, sp, #4
    1e64:	9a06      	ldr	r2, [sp, #24]
    1e66:	2300      	movs	r3, #0
    1e68:	4c0c      	ldr	r4, [pc, #48]	; (1e9c <xTimerGenericCommand+0x5c>)
    1e6a:	47a0      	blx	r4
    1e6c:	e00f      	b.n	1e8e <xTimerGenericCommand+0x4e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1e6e:	4b09      	ldr	r3, [pc, #36]	; (1e94 <xTimerGenericCommand+0x54>)
    1e70:	6818      	ldr	r0, [r3, #0]
    1e72:	a901      	add	r1, sp, #4
    1e74:	2200      	movs	r2, #0
    1e76:	2300      	movs	r3, #0
    1e78:	4c08      	ldr	r4, [pc, #32]	; (1e9c <xTimerGenericCommand+0x5c>)
    1e7a:	47a0      	blx	r4
    1e7c:	e007      	b.n	1e8e <xTimerGenericCommand+0x4e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1e7e:	1c20      	adds	r0, r4, #0
    1e80:	a901      	add	r1, sp, #4
    1e82:	1c1a      	adds	r2, r3, #0
    1e84:	2300      	movs	r3, #0
    1e86:	4c06      	ldr	r4, [pc, #24]	; (1ea0 <xTimerGenericCommand+0x60>)
    1e88:	47a0      	blx	r4
    1e8a:	e000      	b.n	1e8e <xTimerGenericCommand+0x4e>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    1e8c:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    1e8e:	b004      	add	sp, #16
    1e90:	bd10      	pop	{r4, pc}
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	20003c2c 	.word	0x20003c2c
    1e98:	00001c55 	.word	0x00001c55
    1e9c:	00000f75 	.word	0x00000f75
    1ea0:	00001141 	.word	0x00001141

00001ea4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ea6:	4657      	mov	r7, sl
    1ea8:	464e      	mov	r6, r9
    1eaa:	4645      	mov	r5, r8
    1eac:	b4e0      	push	{r5, r6, r7}
    1eae:	b082      	sub	sp, #8
    1eb0:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    1eb2:	4b24      	ldr	r3, [pc, #144]	; (1f44 <prvSampleTimeNow+0xa0>)
    1eb4:	4798      	blx	r3
    1eb6:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    1eb8:	4b23      	ldr	r3, [pc, #140]	; (1f48 <prvSampleTimeNow+0xa4>)
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	4298      	cmp	r0, r3
    1ebe:	d234      	bcs.n	1f2a <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1ec0:	4e22      	ldr	r6, [pc, #136]	; (1f4c <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1ec2:	4f23      	ldr	r7, [pc, #140]	; (1f50 <prvSampleTimeNow+0xac>)
    1ec4:	e024      	b.n	1f10 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1ec6:	68db      	ldr	r3, [r3, #12]
    1ec8:	6818      	ldr	r0, [r3, #0]
    1eca:	4682      	mov	sl, r0

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1ecc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1ece:	1d25      	adds	r5, r4, #4
    1ed0:	1c28      	adds	r0, r5, #0
    1ed2:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1ed4:	1c20      	adds	r0, r4, #0
    1ed6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ed8:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1eda:	69e2      	ldr	r2, [r4, #28]
    1edc:	2a01      	cmp	r2, #1
    1ede:	d117      	bne.n	1f10 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1ee0:	69a0      	ldr	r0, [r4, #24]
    1ee2:	1c03      	adds	r3, r0, #0
    1ee4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    1ee6:	4553      	cmp	r3, sl
    1ee8:	d907      	bls.n	1efa <prvSampleTimeNow+0x56>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1eea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1eec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1eee:	4b17      	ldr	r3, [pc, #92]	; (1f4c <prvSampleTimeNow+0xa8>)
    1ef0:	6818      	ldr	r0, [r3, #0]
    1ef2:	1c29      	adds	r1, r5, #0
    1ef4:	4b17      	ldr	r3, [pc, #92]	; (1f54 <prvSampleTimeNow+0xb0>)
    1ef6:	4798      	blx	r3
    1ef8:	e00a      	b.n	1f10 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1efa:	2300      	movs	r3, #0
    1efc:	9300      	str	r3, [sp, #0]
    1efe:	1c20      	adds	r0, r4, #0
    1f00:	2100      	movs	r1, #0
    1f02:	4652      	mov	r2, sl
    1f04:	4c14      	ldr	r4, [pc, #80]	; (1f58 <prvSampleTimeNow+0xb4>)
    1f06:	47a0      	blx	r4
				configASSERT( xResult );
    1f08:	2800      	cmp	r0, #0
    1f0a:	d101      	bne.n	1f10 <prvSampleTimeNow+0x6c>
    1f0c:	b672      	cpsid	i
    1f0e:	e7fe      	b.n	1f0e <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1f10:	6833      	ldr	r3, [r6, #0]
    1f12:	6818      	ldr	r0, [r3, #0]
    1f14:	2800      	cmp	r0, #0
    1f16:	d1d6      	bne.n	1ec6 <prvSampleTimeNow+0x22>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    1f18:	4a10      	ldr	r2, [pc, #64]	; (1f5c <prvSampleTimeNow+0xb8>)
    1f1a:	490c      	ldr	r1, [pc, #48]	; (1f4c <prvSampleTimeNow+0xa8>)
    1f1c:	6814      	ldr	r4, [r2, #0]
    1f1e:	600c      	str	r4, [r1, #0]
	pxOverflowTimerList = pxTemp;
    1f20:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    1f22:	2301      	movs	r3, #1
    1f24:	4648      	mov	r0, r9
    1f26:	6003      	str	r3, [r0, #0]
    1f28:	e002      	b.n	1f30 <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    1f2a:	2300      	movs	r3, #0
    1f2c:	4649      	mov	r1, r9
    1f2e:	600b      	str	r3, [r1, #0]
	}

	xLastTime = xTimeNow;
    1f30:	4b05      	ldr	r3, [pc, #20]	; (1f48 <prvSampleTimeNow+0xa4>)
    1f32:	4642      	mov	r2, r8
    1f34:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    1f36:	4640      	mov	r0, r8
    1f38:	b002      	add	sp, #8
    1f3a:	bc1c      	pop	{r2, r3, r4}
    1f3c:	4690      	mov	r8, r2
    1f3e:	4699      	mov	r9, r3
    1f40:	46a2      	mov	sl, r4
    1f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f44:	000016d1 	.word	0x000016d1
    1f48:	20003c28 	.word	0x20003c28
    1f4c:	20003bfc 	.word	0x20003bfc
    1f50:	00000ad1 	.word	0x00000ad1
    1f54:	00000aa1 	.word	0x00000aa1
    1f58:	00001e41 	.word	0x00001e41
    1f5c:	20003c30 	.word	0x20003c30

00001f60 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    1f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f62:	4647      	mov	r7, r8
    1f64:	b480      	push	{r7}
    1f66:	b086      	sub	sp, #24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1f68:	484e      	ldr	r0, [pc, #312]	; (20a4 <STACK_SIZE+0xa4>)
    1f6a:	4680      	mov	r8, r0
    1f6c:	4641      	mov	r1, r8
    1f6e:	680b      	ldr	r3, [r1, #0]
	if( *pxListWasEmpty == pdFALSE )
    1f70:	681a      	ldr	r2, [r3, #0]
    1f72:	2a00      	cmp	r2, #0
    1f74:	d100      	bne.n	1f78 <prvTimerTask+0x18>
    1f76:	e08a      	b.n	208e <STACK_SIZE+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1f78:	68db      	ldr	r3, [r3, #12]
    1f7a:	681c      	ldr	r4, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    1f7c:	4b4a      	ldr	r3, [pc, #296]	; (20a8 <STACK_SIZE+0xa8>)
    1f7e:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1f80:	a803      	add	r0, sp, #12
    1f82:	4b4a      	ldr	r3, [pc, #296]	; (20ac <STACK_SIZE+0xac>)
    1f84:	4798      	blx	r3
    1f86:	1c05      	adds	r5, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    1f88:	9b03      	ldr	r3, [sp, #12]
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d131      	bne.n	1ff2 <prvTimerTask+0x92>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1f8e:	4284      	cmp	r4, r0
    1f90:	d823      	bhi.n	1fda <prvTimerTask+0x7a>
			{
				( void ) xTaskResumeAll();
    1f92:	4b47      	ldr	r3, [pc, #284]	; (20b0 <STACK_SIZE+0xb0>)
    1f94:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1f96:	4b43      	ldr	r3, [pc, #268]	; (20a4 <STACK_SIZE+0xa4>)
    1f98:	681b      	ldr	r3, [r3, #0]
    1f9a:	68db      	ldr	r3, [r3, #12]
    1f9c:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1f9e:	1d30      	adds	r0, r6, #4
    1fa0:	4b44      	ldr	r3, [pc, #272]	; (20b4 <STACK_SIZE+0xb4>)
    1fa2:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1fa4:	69f7      	ldr	r7, [r6, #28]
    1fa6:	2f01      	cmp	r7, #1
    1fa8:	d113      	bne.n	1fd2 <prvTimerTask+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    1faa:	69b0      	ldr	r0, [r6, #24]
    1fac:	1821      	adds	r1, r4, r0
    1fae:	1c30      	adds	r0, r6, #0
    1fb0:	1c2a      	adds	r2, r5, #0
    1fb2:	1c23      	adds	r3, r4, #0
    1fb4:	4d40      	ldr	r5, [pc, #256]	; (20b8 <STACK_SIZE+0xb8>)
    1fb6:	47a8      	blx	r5
    1fb8:	2801      	cmp	r0, #1
    1fba:	d10a      	bne.n	1fd2 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1fbc:	2300      	movs	r3, #0
    1fbe:	9300      	str	r3, [sp, #0]
    1fc0:	1c30      	adds	r0, r6, #0
    1fc2:	2100      	movs	r1, #0
    1fc4:	1c22      	adds	r2, r4, #0
    1fc6:	4c3d      	ldr	r4, [pc, #244]	; (20bc <STACK_SIZE+0xbc>)
    1fc8:	47a0      	blx	r4
			configASSERT( xResult );
    1fca:	2800      	cmp	r0, #0
    1fcc:	d101      	bne.n	1fd2 <prvTimerTask+0x72>
    1fce:	b672      	cpsid	i
    1fd0:	e7fe      	b.n	1fd0 <prvTimerTask+0x70>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1fd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1fd4:	1c30      	adds	r0, r6, #0
    1fd6:	4798      	blx	r3
    1fd8:	e00d      	b.n	1ff6 <prvTimerTask+0x96>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    1fda:	4b39      	ldr	r3, [pc, #228]	; (20c0 <STACK_SIZE+0xc0>)
    1fdc:	6818      	ldr	r0, [r3, #0]
    1fde:	1b61      	subs	r1, r4, r5
    1fe0:	4b38      	ldr	r3, [pc, #224]	; (20c4 <STACK_SIZE+0xc4>)
    1fe2:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    1fe4:	4b32      	ldr	r3, [pc, #200]	; (20b0 <STACK_SIZE+0xb0>)
    1fe6:	4798      	blx	r3
    1fe8:	2800      	cmp	r0, #0
    1fea:	d104      	bne.n	1ff6 <prvTimerTask+0x96>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    1fec:	4b36      	ldr	r3, [pc, #216]	; (20c8 <STACK_SIZE+0xc8>)
    1fee:	4798      	blx	r3
    1ff0:	e001      	b.n	1ff6 <prvTimerTask+0x96>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    1ff2:	4b2f      	ldr	r3, [pc, #188]	; (20b0 <STACK_SIZE+0xb0>)
    1ff4:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1ff6:	4d32      	ldr	r5, [pc, #200]	; (20c0 <STACK_SIZE+0xc0>)
    1ff8:	4c34      	ldr	r4, [pc, #208]	; (20cc <STACK_SIZE+0xcc>)
    1ffa:	e040      	b.n	207e <STACK_SIZE+0x7e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1ffc:	9903      	ldr	r1, [sp, #12]
    1ffe:	2900      	cmp	r1, #0
    2000:	db3d      	blt.n	207e <STACK_SIZE+0x7e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2002:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2004:	6972      	ldr	r2, [r6, #20]
    2006:	2a00      	cmp	r2, #0
    2008:	d002      	beq.n	2010 <STACK_SIZE+0x10>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    200a:	1d30      	adds	r0, r6, #4
    200c:	4b29      	ldr	r3, [pc, #164]	; (20b4 <STACK_SIZE+0xb4>)
    200e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2010:	a802      	add	r0, sp, #8
    2012:	4b26      	ldr	r3, [pc, #152]	; (20ac <STACK_SIZE+0xac>)
    2014:	4798      	blx	r3
    2016:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    2018:	9f03      	ldr	r7, [sp, #12]
    201a:	2f09      	cmp	r7, #9
    201c:	d82f      	bhi.n	207e <STACK_SIZE+0x7e>
    201e:	00ba      	lsls	r2, r7, #2
    2020:	492b      	ldr	r1, [pc, #172]	; (20d0 <STACK_SIZE+0xd0>)
    2022:	588a      	ldr	r2, [r1, r2]
    2024:	4697      	mov	pc, r2
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    2026:	9f04      	ldr	r7, [sp, #16]
    2028:	69b2      	ldr	r2, [r6, #24]
    202a:	18b9      	adds	r1, r7, r2
    202c:	1c30      	adds	r0, r6, #0
    202e:	1c1a      	adds	r2, r3, #0
    2030:	1c3b      	adds	r3, r7, #0
    2032:	4f21      	ldr	r7, [pc, #132]	; (20b8 <STACK_SIZE+0xb8>)
    2034:	47b8      	blx	r7
    2036:	2801      	cmp	r0, #1
    2038:	d121      	bne.n	207e <STACK_SIZE+0x7e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    203a:	1c30      	adds	r0, r6, #0
    203c:	6a71      	ldr	r1, [r6, #36]	; 0x24
    203e:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2040:	69f2      	ldr	r2, [r6, #28]
    2042:	2a01      	cmp	r2, #1
    2044:	d11b      	bne.n	207e <STACK_SIZE+0x7e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2046:	69b3      	ldr	r3, [r6, #24]
    2048:	9f04      	ldr	r7, [sp, #16]
    204a:	19da      	adds	r2, r3, r7
    204c:	2300      	movs	r3, #0
    204e:	9300      	str	r3, [sp, #0]
    2050:	1c30      	adds	r0, r6, #0
    2052:	2100      	movs	r1, #0
    2054:	4e19      	ldr	r6, [pc, #100]	; (20bc <STACK_SIZE+0xbc>)
    2056:	47b0      	blx	r6
							configASSERT( xResult );
    2058:	2800      	cmp	r0, #0
    205a:	d110      	bne.n	207e <STACK_SIZE+0x7e>
    205c:	b672      	cpsid	i
    205e:	e7fe      	b.n	205e <STACK_SIZE+0x5e>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2060:	9904      	ldr	r1, [sp, #16]
    2062:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2064:	2900      	cmp	r1, #0
    2066:	d101      	bne.n	206c <STACK_SIZE+0x6c>
    2068:	b672      	cpsid	i
    206a:	e7fe      	b.n	206a <STACK_SIZE+0x6a>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    206c:	1859      	adds	r1, r3, r1
    206e:	1c30      	adds	r0, r6, #0
    2070:	1c1a      	adds	r2, r3, #0
    2072:	4e11      	ldr	r6, [pc, #68]	; (20b8 <STACK_SIZE+0xb8>)
    2074:	47b0      	blx	r6
    2076:	e002      	b.n	207e <STACK_SIZE+0x7e>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    2078:	1c30      	adds	r0, r6, #0
    207a:	4b16      	ldr	r3, [pc, #88]	; (20d4 <STACK_SIZE+0xd4>)
    207c:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    207e:	6828      	ldr	r0, [r5, #0]
    2080:	a903      	add	r1, sp, #12
    2082:	2200      	movs	r2, #0
    2084:	2300      	movs	r3, #0
    2086:	47a0      	blx	r4
    2088:	2800      	cmp	r0, #0
    208a:	d1b7      	bne.n	1ffc <prvTimerTask+0x9c>
    208c:	e76e      	b.n	1f6c <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    208e:	4806      	ldr	r0, [pc, #24]	; (20a8 <STACK_SIZE+0xa8>)
    2090:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2092:	a803      	add	r0, sp, #12
    2094:	4905      	ldr	r1, [pc, #20]	; (20ac <STACK_SIZE+0xac>)
    2096:	4788      	blx	r1
    2098:	1c05      	adds	r5, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    209a:	2400      	movs	r4, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    209c:	9a03      	ldr	r2, [sp, #12]
    209e:	42a2      	cmp	r2, r4
    20a0:	d09b      	beq.n	1fda <prvTimerTask+0x7a>
    20a2:	e7a6      	b.n	1ff2 <prvTimerTask+0x92>
    20a4:	20003bfc 	.word	0x20003bfc
    20a8:	000016c1 	.word	0x000016c1
    20ac:	00001ea5 	.word	0x00001ea5
    20b0:	0000181d 	.word	0x0000181d
    20b4:	00000ad1 	.word	0x00000ad1
    20b8:	00001d49 	.word	0x00001d49
    20bc:	00001e41 	.word	0x00001e41
    20c0:	20003c2c 	.word	0x20003c2c
    20c4:	0000139d 	.word	0x0000139d
    20c8:	00000b4d 	.word	0x00000b4d
    20cc:	00001211 	.word	0x00001211
    20d0:	00002380 	.word	0x00002380
    20d4:	00000d05 	.word	0x00000d05

000020d8 <systask_handler>:
static void open_close_task(void *params)
{
	vTaskDelay(OPEN_CLOSE_TASK_DELAY);
}
static void systask_handler(void *params)
{
    20d8:	b508      	push	{r3, lr}
	vTaskDelay(SYSTASK_HANDLER_DELAY);
    20da:	2006      	movs	r0, #6
    20dc:	4b01      	ldr	r3, [pc, #4]	; (20e4 <systask_handler+0xc>)
    20de:	4798      	blx	r3
    20e0:	bd08      	pop	{r3, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	00001915 	.word	0x00001915

000020e8 <open_close_task>:
{
	vTaskDelay(SAMPLE_TEMP_TASK_DELAY);
}

static void open_close_task(void *params)
{
    20e8:	b508      	push	{r3, lr}
	vTaskDelay(OPEN_CLOSE_TASK_DELAY);
    20ea:	2006      	movs	r0, #6
    20ec:	4b01      	ldr	r3, [pc, #4]	; (20f4 <open_close_task+0xc>)
    20ee:	4798      	blx	r3
}
    20f0:	bd08      	pop	{r3, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	00001915 	.word	0x00001915

000020f8 <sample_temp_task>:
{
	vTaskDelay(ANALYZE_DATA_TASK_DELAY);
}

static void sample_temp_task(void *params)
{
    20f8:	b508      	push	{r3, lr}
	vTaskDelay(SAMPLE_TEMP_TASK_DELAY);
    20fa:	2006      	movs	r0, #6
    20fc:	4b01      	ldr	r3, [pc, #4]	; (2104 <sample_temp_task+0xc>)
    20fe:	4798      	blx	r3
}
    2100:	bd08      	pop	{r3, pc}
    2102:	46c0      	nop			; (mov r8, r8)
    2104:	00001915 	.word	0x00001915

00002108 <analyze_data_task>:
{
	vTaskDelay(NEW_SENSOR_TASK_DELAY);
}

static void analyze_data_task(void *params)
{
    2108:	b508      	push	{r3, lr}
	vTaskDelay(ANALYZE_DATA_TASK_DELAY);
    210a:	2006      	movs	r0, #6
    210c:	4b01      	ldr	r3, [pc, #4]	; (2114 <analyze_data_task+0xc>)
    210e:	4798      	blx	r3
}
    2110:	bd08      	pop	{r3, pc}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	00001915 	.word	0x00001915

00002118 <new_sensor_task>:
{
	vTaskDelay(LCD_TASK_DELAY);
}

static void new_sensor_task(void *params)
{
    2118:	b508      	push	{r3, lr}
	vTaskDelay(NEW_SENSOR_TASK_DELAY);
    211a:	20c8      	movs	r0, #200	; 0xc8
    211c:	4b01      	ldr	r3, [pc, #4]	; (2124 <new_sensor_task+0xc>)
    211e:	4798      	blx	r3
}
    2120:	bd08      	pop	{r3, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	00001915 	.word	0x00001915

00002128 <lcd_task>:
			SYSTASK_HANDLER_PRIORITY,
			NULL);
}

static void lcd_task(void *params)
{
    2128:	b508      	push	{r3, lr}
	vTaskDelay(LCD_TASK_DELAY);
    212a:	200a      	movs	r0, #10
    212c:	4b01      	ldr	r3, [pc, #4]	; (2134 <lcd_task+0xc>)
    212e:	4798      	blx	r3
}
    2130:	bd08      	pop	{r3, pc}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	00001915 	.word	0x00001915

00002138 <tasks_init>:
static void open_close_task(void *params);
static void systask_handler(void *params);

//initialize the tasks
void tasks_init(void)
{
    2138:	b570      	push	{r4, r5, r6, lr}
    213a:	b084      	sub	sp, #16
	//mutexes
	lcd_mutex  = xSemaphoreCreateMutex();
    213c:	2001      	movs	r0, #1
    213e:	4c23      	ldr	r4, [pc, #140]	; (21cc <tasks_init+0x94>)
    2140:	47a0      	blx	r4
    2142:	4b23      	ldr	r3, [pc, #140]	; (21d0 <tasks_init+0x98>)
    2144:	6018      	str	r0, [r3, #0]
	wireless_mutex = xSemaphoreCreateMutex();
    2146:	2001      	movs	r0, #1
    2148:	47a0      	blx	r4
    214a:	4b22      	ldr	r3, [pc, #136]	; (21d4 <tasks_init+0x9c>)
    214c:	6018      	str	r0, [r3, #0]
	
	event_group = xEventGroupCreate();
    214e:	4b22      	ldr	r3, [pc, #136]	; (21d8 <tasks_init+0xa0>)
    2150:	4798      	blx	r3
    2152:	4b22      	ldr	r3, [pc, #136]	; (21dc <tasks_init+0xa4>)
    2154:	6018      	str	r0, [r3, #0]

	xTaskCreate(lcd_task,
    2156:	2601      	movs	r6, #1
    2158:	9600      	str	r6, [sp, #0]
    215a:	2400      	movs	r4, #0
    215c:	9401      	str	r4, [sp, #4]
    215e:	9402      	str	r4, [sp, #8]
    2160:	9403      	str	r4, [sp, #12]
    2162:	481f      	ldr	r0, [pc, #124]	; (21e0 <tasks_init+0xa8>)
    2164:	491f      	ldr	r1, [pc, #124]	; (21e4 <tasks_init+0xac>)
    2166:	2264      	movs	r2, #100	; 0x64
    2168:	2300      	movs	r3, #0
    216a:	4d1f      	ldr	r5, [pc, #124]	; (21e8 <tasks_init+0xb0>)
    216c:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			LCD_TASK_PRIORITY,
			NULL);

	xTaskCreate(new_sensor_task,
    216e:	9600      	str	r6, [sp, #0]
    2170:	9401      	str	r4, [sp, #4]
    2172:	9402      	str	r4, [sp, #8]
    2174:	9403      	str	r4, [sp, #12]
    2176:	481d      	ldr	r0, [pc, #116]	; (21ec <tasks_init+0xb4>)
    2178:	491d      	ldr	r1, [pc, #116]	; (21f0 <tasks_init+0xb8>)
    217a:	2264      	movs	r2, #100	; 0x64
    217c:	2300      	movs	r3, #0
    217e:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			NEW_SENSOR_TASK_PRIORITY,
			NULL);

	xTaskCreate(analyze_data_task,
    2180:	9600      	str	r6, [sp, #0]
    2182:	9401      	str	r4, [sp, #4]
    2184:	9402      	str	r4, [sp, #8]
    2186:	9403      	str	r4, [sp, #12]
    2188:	481a      	ldr	r0, [pc, #104]	; (21f4 <tasks_init+0xbc>)
    218a:	491b      	ldr	r1, [pc, #108]	; (21f8 <tasks_init+0xc0>)
    218c:	2264      	movs	r2, #100	; 0x64
    218e:	2300      	movs	r3, #0
    2190:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			ANALYZE_DATA_TASK_PRIORITY,
			NULL);

	xTaskCreate(sample_temp_task,
    2192:	9600      	str	r6, [sp, #0]
    2194:	9401      	str	r4, [sp, #4]
    2196:	9402      	str	r4, [sp, #8]
    2198:	9403      	str	r4, [sp, #12]
    219a:	4818      	ldr	r0, [pc, #96]	; (21fc <tasks_init+0xc4>)
    219c:	4918      	ldr	r1, [pc, #96]	; (2200 <tasks_init+0xc8>)
    219e:	2264      	movs	r2, #100	; 0x64
    21a0:	2300      	movs	r3, #0
    21a2:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			SAMPLE_TEMP_TASK_PRIORITY,
			NULL);

	xTaskCreate(open_close_task,
    21a4:	9600      	str	r6, [sp, #0]
    21a6:	9401      	str	r4, [sp, #4]
    21a8:	9402      	str	r4, [sp, #8]
    21aa:	9403      	str	r4, [sp, #12]
    21ac:	4815      	ldr	r0, [pc, #84]	; (2204 <tasks_init+0xcc>)
    21ae:	4916      	ldr	r1, [pc, #88]	; (2208 <tasks_init+0xd0>)
    21b0:	2264      	movs	r2, #100	; 0x64
    21b2:	2300      	movs	r3, #0
    21b4:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			OPEN_CLOSE_TASK_PRIORITY,
			NULL);
			
	xTaskCreate(systask_handler,
    21b6:	9600      	str	r6, [sp, #0]
    21b8:	9401      	str	r4, [sp, #4]
    21ba:	9402      	str	r4, [sp, #8]
    21bc:	9403      	str	r4, [sp, #12]
    21be:	4813      	ldr	r0, [pc, #76]	; (220c <tasks_init+0xd4>)
    21c0:	4913      	ldr	r1, [pc, #76]	; (2210 <tasks_init+0xd8>)
    21c2:	2264      	movs	r2, #100	; 0x64
    21c4:	2300      	movs	r3, #0
    21c6:	47a8      	blx	r5
			(const char *) "Systask Handler",
			configMINIMAL_STACK_SIZE,
			NULL,
			SYSTASK_HANDLER_PRIORITY,
			NULL);
}
    21c8:	b004      	add	sp, #16
    21ca:	bd70      	pop	{r4, r5, r6, pc}
    21cc:	000010e9 	.word	0x000010e9
    21d0:	20003c3c 	.word	0x20003c3c
    21d4:	20003c34 	.word	0x20003c34
    21d8:	00000a49 	.word	0x00000a49
    21dc:	20003c38 	.word	0x20003c38
    21e0:	00002129 	.word	0x00002129
    21e4:	000023b0 	.word	0x000023b0
    21e8:	0000146d 	.word	0x0000146d
    21ec:	00002119 	.word	0x00002119
    21f0:	000023b4 	.word	0x000023b4
    21f4:	00002109 	.word	0x00002109
    21f8:	000023c0 	.word	0x000023c0
    21fc:	000020f9 	.word	0x000020f9
    2200:	000023d0 	.word	0x000023d0
    2204:	000020e9 	.word	0x000020e9
    2208:	000023dc 	.word	0x000023dc
    220c:	000020d9 	.word	0x000020d9
    2210:	000023e8 	.word	0x000023e8

00002214 <main>:
#include <asf.h>
#include "demotasks.h"


int main (void)
{
    2214:	b508      	push	{r3, lr}
	system_init();
    2216:	4b03      	ldr	r3, [pc, #12]	; (2224 <main+0x10>)
    2218:	4798      	blx	r3
	//gfx_mono_init();

	// Initialize the demo..
	tasks_init();
    221a:	4b03      	ldr	r3, [pc, #12]	; (2228 <main+0x14>)
    221c:	4798      	blx	r3

	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    221e:	4b03      	ldr	r3, [pc, #12]	; (222c <main+0x18>)
    2220:	4798      	blx	r3
    2222:	e7fe      	b.n	2222 <main+0xe>
    2224:	00000981 	.word	0x00000981
    2228:	00002139 	.word	0x00002139
    222c:	00001661 	.word	0x00001661

00002230 <__aeabi_uidiv>:
    2230:	2900      	cmp	r1, #0
    2232:	d034      	beq.n	229e <.udivsi3_skip_div0_test+0x6a>

00002234 <.udivsi3_skip_div0_test>:
    2234:	2301      	movs	r3, #1
    2236:	2200      	movs	r2, #0
    2238:	b410      	push	{r4}
    223a:	4288      	cmp	r0, r1
    223c:	d32c      	bcc.n	2298 <.udivsi3_skip_div0_test+0x64>
    223e:	2401      	movs	r4, #1
    2240:	0724      	lsls	r4, r4, #28
    2242:	42a1      	cmp	r1, r4
    2244:	d204      	bcs.n	2250 <.udivsi3_skip_div0_test+0x1c>
    2246:	4281      	cmp	r1, r0
    2248:	d202      	bcs.n	2250 <.udivsi3_skip_div0_test+0x1c>
    224a:	0109      	lsls	r1, r1, #4
    224c:	011b      	lsls	r3, r3, #4
    224e:	e7f8      	b.n	2242 <.udivsi3_skip_div0_test+0xe>
    2250:	00e4      	lsls	r4, r4, #3
    2252:	42a1      	cmp	r1, r4
    2254:	d204      	bcs.n	2260 <.udivsi3_skip_div0_test+0x2c>
    2256:	4281      	cmp	r1, r0
    2258:	d202      	bcs.n	2260 <.udivsi3_skip_div0_test+0x2c>
    225a:	0049      	lsls	r1, r1, #1
    225c:	005b      	lsls	r3, r3, #1
    225e:	e7f8      	b.n	2252 <.udivsi3_skip_div0_test+0x1e>
    2260:	4288      	cmp	r0, r1
    2262:	d301      	bcc.n	2268 <.udivsi3_skip_div0_test+0x34>
    2264:	1a40      	subs	r0, r0, r1
    2266:	431a      	orrs	r2, r3
    2268:	084c      	lsrs	r4, r1, #1
    226a:	42a0      	cmp	r0, r4
    226c:	d302      	bcc.n	2274 <.udivsi3_skip_div0_test+0x40>
    226e:	1b00      	subs	r0, r0, r4
    2270:	085c      	lsrs	r4, r3, #1
    2272:	4322      	orrs	r2, r4
    2274:	088c      	lsrs	r4, r1, #2
    2276:	42a0      	cmp	r0, r4
    2278:	d302      	bcc.n	2280 <.udivsi3_skip_div0_test+0x4c>
    227a:	1b00      	subs	r0, r0, r4
    227c:	089c      	lsrs	r4, r3, #2
    227e:	4322      	orrs	r2, r4
    2280:	08cc      	lsrs	r4, r1, #3
    2282:	42a0      	cmp	r0, r4
    2284:	d302      	bcc.n	228c <.udivsi3_skip_div0_test+0x58>
    2286:	1b00      	subs	r0, r0, r4
    2288:	08dc      	lsrs	r4, r3, #3
    228a:	4322      	orrs	r2, r4
    228c:	2800      	cmp	r0, #0
    228e:	d003      	beq.n	2298 <.udivsi3_skip_div0_test+0x64>
    2290:	091b      	lsrs	r3, r3, #4
    2292:	d001      	beq.n	2298 <.udivsi3_skip_div0_test+0x64>
    2294:	0909      	lsrs	r1, r1, #4
    2296:	e7e3      	b.n	2260 <.udivsi3_skip_div0_test+0x2c>
    2298:	1c10      	adds	r0, r2, #0
    229a:	bc10      	pop	{r4}
    229c:	4770      	bx	lr
    229e:	2800      	cmp	r0, #0
    22a0:	d001      	beq.n	22a6 <.udivsi3_skip_div0_test+0x72>
    22a2:	2000      	movs	r0, #0
    22a4:	43c0      	mvns	r0, r0
    22a6:	b407      	push	{r0, r1, r2}
    22a8:	4802      	ldr	r0, [pc, #8]	; (22b4 <.udivsi3_skip_div0_test+0x80>)
    22aa:	a102      	add	r1, pc, #8	; (adr r1, 22b4 <.udivsi3_skip_div0_test+0x80>)
    22ac:	1840      	adds	r0, r0, r1
    22ae:	9002      	str	r0, [sp, #8]
    22b0:	bd03      	pop	{r0, r1, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	00000019 	.word	0x00000019

000022b8 <__aeabi_uidivmod>:
    22b8:	2900      	cmp	r1, #0
    22ba:	d0f0      	beq.n	229e <.udivsi3_skip_div0_test+0x6a>
    22bc:	b503      	push	{r0, r1, lr}
    22be:	f7ff ffb9 	bl	2234 <.udivsi3_skip_div0_test>
    22c2:	bc0e      	pop	{r1, r2, r3}
    22c4:	4342      	muls	r2, r0
    22c6:	1a89      	subs	r1, r1, r2
    22c8:	4718      	bx	r3
    22ca:	46c0      	nop			; (mov r8, r8)

000022cc <__aeabi_idiv0>:
    22cc:	4770      	bx	lr
    22ce:	46c0      	nop			; (mov r8, r8)

000022d0 <__libc_init_array>:
    22d0:	b570      	push	{r4, r5, r6, lr}
    22d2:	4b0e      	ldr	r3, [pc, #56]	; (230c <__libc_init_array+0x3c>)
    22d4:	4d0e      	ldr	r5, [pc, #56]	; (2310 <__libc_init_array+0x40>)
    22d6:	2400      	movs	r4, #0
    22d8:	1aed      	subs	r5, r5, r3
    22da:	10ad      	asrs	r5, r5, #2
    22dc:	1c1e      	adds	r6, r3, #0
    22de:	42ac      	cmp	r4, r5
    22e0:	d004      	beq.n	22ec <__libc_init_array+0x1c>
    22e2:	00a3      	lsls	r3, r4, #2
    22e4:	58f3      	ldr	r3, [r6, r3]
    22e6:	4798      	blx	r3
    22e8:	3401      	adds	r4, #1
    22ea:	e7f8      	b.n	22de <__libc_init_array+0xe>
    22ec:	f000 f884 	bl	23f8 <_init>
    22f0:	4b08      	ldr	r3, [pc, #32]	; (2314 <__libc_init_array+0x44>)
    22f2:	4d09      	ldr	r5, [pc, #36]	; (2318 <__libc_init_array+0x48>)
    22f4:	2400      	movs	r4, #0
    22f6:	1aed      	subs	r5, r5, r3
    22f8:	10ad      	asrs	r5, r5, #2
    22fa:	1c1e      	adds	r6, r3, #0
    22fc:	42ac      	cmp	r4, r5
    22fe:	d004      	beq.n	230a <__libc_init_array+0x3a>
    2300:	00a3      	lsls	r3, r4, #2
    2302:	58f3      	ldr	r3, [r6, r3]
    2304:	4798      	blx	r3
    2306:	3401      	adds	r4, #1
    2308:	e7f8      	b.n	22fc <__libc_init_array+0x2c>
    230a:	bd70      	pop	{r4, r5, r6, pc}
    230c:	00002404 	.word	0x00002404
    2310:	00002404 	.word	0x00002404
    2314:	00002404 	.word	0x00002404
    2318:	00002408 	.word	0x00002408

0000231c <memcpy>:
    231c:	b510      	push	{r4, lr}
    231e:	2300      	movs	r3, #0
    2320:	4293      	cmp	r3, r2
    2322:	d003      	beq.n	232c <memcpy+0x10>
    2324:	5ccc      	ldrb	r4, [r1, r3]
    2326:	54c4      	strb	r4, [r0, r3]
    2328:	3301      	adds	r3, #1
    232a:	e7f9      	b.n	2320 <memcpy+0x4>
    232c:	bd10      	pop	{r4, pc}
    232e:	0000      	movs	r0, r0
    2330:	00000430 	.word	0x00000430
    2334:	0000048c 	.word	0x0000048c
    2338:	0000048c 	.word	0x0000048c
    233c:	0000042a 	.word	0x0000042a
    2340:	0000042a 	.word	0x0000042a
    2344:	00000446 	.word	0x00000446
    2348:	00000436 	.word	0x00000436
    234c:	0000044c 	.word	0x0000044c
    2350:	0000047a 	.word	0x0000047a
    2354:	00000514 	.word	0x00000514
    2358:	00000574 	.word	0x00000574
    235c:	00000574 	.word	0x00000574
    2360:	000004f4 	.word	0x000004f4
    2364:	00000506 	.word	0x00000506
    2368:	00000522 	.word	0x00000522
    236c:	000004f8 	.word	0x000004f8
    2370:	00000530 	.word	0x00000530
    2374:	00000564 	.word	0x00000564
    2378:	454c4449 	.word	0x454c4449
    237c:	00000000 	.word	0x00000000
    2380:	00002026 	.word	0x00002026
    2384:	00002026 	.word	0x00002026
    2388:	00002026 	.word	0x00002026
    238c:	0000207e 	.word	0x0000207e
    2390:	00002060 	.word	0x00002060
    2394:	00002078 	.word	0x00002078
    2398:	00002026 	.word	0x00002026
    239c:	00002026 	.word	0x00002026
    23a0:	0000207e 	.word	0x0000207e
    23a4:	00002060 	.word	0x00002060
    23a8:	20726d54 	.word	0x20726d54
    23ac:	00637653 	.word	0x00637653
    23b0:	0044434c 	.word	0x0044434c
    23b4:	2077654e 	.word	0x2077654e
    23b8:	736e6553 	.word	0x736e6553
    23bc:	0000726f 	.word	0x0000726f
    23c0:	6c616e41 	.word	0x6c616e41
    23c4:	20657a79 	.word	0x20657a79
    23c8:	61746144 	.word	0x61746144
    23cc:	00000000 	.word	0x00000000
    23d0:	706d6153 	.word	0x706d6153
    23d4:	5420656c 	.word	0x5420656c
    23d8:	00706d65 	.word	0x00706d65
    23dc:	6e65704f 	.word	0x6e65704f
    23e0:	6f6c432f 	.word	0x6f6c432f
    23e4:	00006573 	.word	0x00006573
    23e8:	74737953 	.word	0x74737953
    23ec:	206b7361 	.word	0x206b7361
    23f0:	646e6148 	.word	0x646e6148
    23f4:	0072656c 	.word	0x0072656c

000023f8 <_init>:
    23f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    23fe:	bc08      	pop	{r3}
    2400:	469e      	mov	lr, r3
    2402:	4770      	bx	lr

00002404 <__init_array_start>:
    2404:	000000dd 	.word	0x000000dd

00002408 <_fini>:
    2408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    240e:	bc08      	pop	{r3}
    2410:	469e      	mov	lr, r3
    2412:	4770      	bx	lr

00002414 <__fini_array_start>:
    2414:	000000b5 	.word	0x000000b5
