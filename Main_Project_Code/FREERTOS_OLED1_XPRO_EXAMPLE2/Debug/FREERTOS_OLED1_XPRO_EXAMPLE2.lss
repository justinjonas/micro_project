
FREERTOS_OLED1_XPRO_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         00003ffc  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00003ffc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003cf8  20000070  0000406c  00010070  2**2
                  ALLOC
  3 .stack        00002000  20003d68  00007d64  00010070  2**0
=======
  0 .text         00003388  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00003388  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003ca4  20000070  000033f8  00010070  2**2
                  ALLOC
  3 .stack        00002004  20003d14  0000709c  00010070  2**0
>>>>>>> JJ's_Branch
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
  6 .debug_info   00020b49  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000421c  00000000  00000000  00030c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000083ec  00000000  00000000  00034e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000980  00000000  00000000  0003d244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009a0  00000000  00000000  0003dbc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008f42  00000000  00000000  0003e564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000135ad  00000000  00000000  000474a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008aa25  00000000  00000000  0005aa53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e54  00000000  00000000  000e5478  2**2
=======
  6 .debug_info   00014d31  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003440  00000000  00000000  00024e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000064e9  00000000  00000000  00028264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000860  00000000  00000000  0002e74d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007e8  00000000  00000000  0002efad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007b41  00000000  00000000  0002f795  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000105d9  00000000  00000000  000372d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000897fc  00000000  00000000  000478af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001aac  00000000  00000000  000d10ac  2**2
>>>>>>> JJ's_Branch
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
<<<<<<< HEAD
       0:	20005d68 	.word	0x20005d68
       4:	0000151d 	.word	0x0000151d
       8:	00001519 	.word	0x00001519
       c:	00001519 	.word	0x00001519
	...
      2c:	000016fd 	.word	0x000016fd
	...
      38:	00001765 	.word	0x00001765
      3c:	000017a9 	.word	0x000017a9
      40:	00001519 	.word	0x00001519
      44:	00001519 	.word	0x00001519
      48:	00001519 	.word	0x00001519
      4c:	00001519 	.word	0x00001519
      50:	000003f9 	.word	0x000003f9
      54:	00001519 	.word	0x00001519
      58:	00001519 	.word	0x00001519
      5c:	00001519 	.word	0x00001519
      60:	00001519 	.word	0x00001519
      64:	000009e9 	.word	0x000009e9
      68:	000009f9 	.word	0x000009f9
      6c:	00000a09 	.word	0x00000a09
      70:	00000a19 	.word	0x00000a19
      74:	00000a29 	.word	0x00000a29
      78:	00000a39 	.word	0x00000a39
      7c:	00001519 	.word	0x00001519
      80:	00001519 	.word	0x00001519
      84:	00001519 	.word	0x00001519
      88:	000003c9 	.word	0x000003c9
      8c:	000003d9 	.word	0x000003d9
      90:	000003e9 	.word	0x000003e9
	...
      9c:	00001519 	.word	0x00001519
      a0:	000004b1 	.word	0x000004b1
      a4:	00000000 	.word	0x00000000
      a8:	00001519 	.word	0x00001519
      ac:	00001519 	.word	0x00001519
=======
       0:	20005d18 	.word	0x20005d18
       4:	00000a41 	.word	0x00000a41
       8:	00000a3d 	.word	0x00000a3d
       c:	00000a3d 	.word	0x00000a3d
	...
      2c:	00000c21 	.word	0x00000c21
	...
      38:	00000c89 	.word	0x00000c89
      3c:	00000ccd 	.word	0x00000ccd
      40:	00000a3d 	.word	0x00000a3d
      44:	00000a3d 	.word	0x00000a3d
      48:	00000a3d 	.word	0x00000a3d
      4c:	00000a3d 	.word	0x00000a3d
      50:	000002c1 	.word	0x000002c1
      54:	00000a3d 	.word	0x00000a3d
      58:	00000a3d 	.word	0x00000a3d
      5c:	00000a3d 	.word	0x00000a3d
      60:	00000a3d 	.word	0x00000a3d
      64:	00000455 	.word	0x00000455
      68:	00000465 	.word	0x00000465
      6c:	00000475 	.word	0x00000475
      70:	00000485 	.word	0x00000485
      74:	00000495 	.word	0x00000495
      78:	000004a5 	.word	0x000004a5
      7c:	00000a3d 	.word	0x00000a3d
      80:	00000a3d 	.word	0x00000a3d
      84:	00000a3d 	.word	0x00000a3d
      88:	00000291 	.word	0x00000291
      8c:	000002a1 	.word	0x000002a1
      90:	000002b1 	.word	0x000002b1
	...
      9c:	00000a3d 	.word	0x00000a3d
      a0:	00000379 	.word	0x00000379
      a4:	00000000 	.word	0x00000000
      a8:	00000a3d 	.word	0x00000a3d
      ac:	00000a3d 	.word	0x00000a3d
>>>>>>> JJ's_Branch
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
<<<<<<< HEAD
      d8:	00003ffc 	.word	0x00003ffc
=======
      d8:	00003388 	.word	0x00003388
>>>>>>> JJ's_Branch

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
<<<<<<< HEAD
     104:	00003ffc 	.word	0x00003ffc
     108:	20000074 	.word	0x20000074
     10c:	00003ffc 	.word	0x00003ffc
=======
     104:	00003388 	.word	0x00003388
     108:	20000074 	.word	0x20000074
     10c:	00003388 	.word	0x00003388
>>>>>>> JJ's_Branch
     110:	00000000 	.word	0x00000000

00000114 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     114:	4b05      	ldr	r3, [pc, #20]	; (12c <_extint_enable+0x18>)
     116:	7819      	ldrb	r1, [r3, #0]
     118:	2202      	movs	r2, #2
     11a:	430a      	orrs	r2, r1
     11c:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     11e:	1c1a      	adds	r2, r3, #0
     120:	7853      	ldrb	r3, [r2, #1]
     122:	b25b      	sxtb	r3, r3
     124:	2b00      	cmp	r3, #0
     126:	dbfb      	blt.n	120 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     128:	4770      	bx	lr
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	40001800 	.word	0x40001800

00000130 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     130:	b500      	push	{lr}
     132:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     134:	4b12      	ldr	r3, [pc, #72]	; (180 <_system_extint_init+0x50>)
     136:	6999      	ldr	r1, [r3, #24]
     138:	2240      	movs	r2, #64	; 0x40
     13a:	430a      	orrs	r2, r1
     13c:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     13e:	a901      	add	r1, sp, #4
     140:	2300      	movs	r3, #0
     142:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     144:	2005      	movs	r0, #5
     146:	4b0f      	ldr	r3, [pc, #60]	; (184 <_system_extint_init+0x54>)
     148:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     14a:	2005      	movs	r0, #5
     14c:	4b0e      	ldr	r3, [pc, #56]	; (188 <_system_extint_init+0x58>)
     14e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     150:	4b0e      	ldr	r3, [pc, #56]	; (18c <_system_extint_init+0x5c>)
     152:	7819      	ldrb	r1, [r3, #0]
     154:	2201      	movs	r2, #1
     156:	430a      	orrs	r2, r1
     158:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     15a:	1c1a      	adds	r2, r3, #0
     15c:	7853      	ldrb	r3, [r2, #1]
     15e:	b25b      	sxtb	r3, r3
     160:	2b00      	cmp	r3, #0
     162:	dbfb      	blt.n	15c <_system_extint_init+0x2c>
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <_system_extint_init+0x60>)
     166:	1c19      	adds	r1, r3, #0
     168:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     16a:	2200      	movs	r2, #0
     16c:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     16e:	428b      	cmp	r3, r1
     170:	d1fc      	bne.n	16c <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     172:	2210      	movs	r2, #16
     174:	4b07      	ldr	r3, [pc, #28]	; (194 <_system_extint_init+0x64>)
     176:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     178:	4b07      	ldr	r3, [pc, #28]	; (198 <_system_extint_init+0x68>)
     17a:	4798      	blx	r3
}
     17c:	b003      	add	sp, #12
     17e:	bd00      	pop	{pc}
     180:	40000400 	.word	0x40000400
<<<<<<< HEAD
     184:	000013e9 	.word	0x000013e9
     188:	0000135d 	.word	0x0000135d
     18c:	40001800 	.word	0x40001800
     190:	20003cec 	.word	0x20003cec
=======
     184:	0000090d 	.word	0x0000090d
     188:	00000881 	.word	0x00000881
     18c:	40001800 	.word	0x40001800
     190:	20003cb0 	.word	0x20003cb0
>>>>>>> JJ's_Branch
     194:	e000e100 	.word	0xe000e100
     198:	00000115 	.word	0x00000115

0000019c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	4647      	mov	r7, r8
     1a0:	b480      	push	{r7}
     1a2:	1c0c      	adds	r4, r1, #0
     1a4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     1a6:	2800      	cmp	r0, #0
     1a8:	d10c      	bne.n	1c4 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     1aa:	2a00      	cmp	r2, #0
     1ac:	dd0d      	ble.n	1ca <_read+0x2e>
     1ae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     1b0:	4e09      	ldr	r6, [pc, #36]	; (1d8 <_read+0x3c>)
     1b2:	4d0a      	ldr	r5, [pc, #40]	; (1dc <_read+0x40>)
     1b4:	6830      	ldr	r0, [r6, #0]
     1b6:	1c21      	adds	r1, r4, #0
     1b8:	682b      	ldr	r3, [r5, #0]
     1ba:	4798      	blx	r3
		ptr++;
     1bc:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     1be:	42bc      	cmp	r4, r7
     1c0:	d1f8      	bne.n	1b4 <_read+0x18>
     1c2:	e004      	b.n	1ce <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     1c4:	2001      	movs	r0, #1
     1c6:	4240      	negs	r0, r0
     1c8:	e002      	b.n	1d0 <_read+0x34>
	}

	for (; len > 0; --len) {
     1ca:	2000      	movs	r0, #0
     1cc:	e000      	b.n	1d0 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     1ce:	4640      	mov	r0, r8
	}
	return nChars;
}
     1d0:	bc04      	pop	{r2}
     1d2:	4690      	mov	r8, r2
     1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1d6:	46c0      	nop			; (mov r8, r8)
<<<<<<< HEAD
     1d8:	20003d34 	.word	0x20003d34
     1dc:	20003d2c 	.word	0x20003d2c
=======
     1d8:	20003cf8 	.word	0x20003cf8
     1dc:	20003cf0 	.word	0x20003cf0
>>>>>>> JJ's_Branch

000001e0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e2:	4647      	mov	r7, r8
     1e4:	b480      	push	{r7}
     1e6:	1c0e      	adds	r6, r1, #0
     1e8:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     1ea:	3801      	subs	r0, #1
     1ec:	2802      	cmp	r0, #2
     1ee:	d810      	bhi.n	212 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     1f0:	2a00      	cmp	r2, #0
     1f2:	d011      	beq.n	218 <_write+0x38>
     1f4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     1f6:	4b0d      	ldr	r3, [pc, #52]	; (22c <_write+0x4c>)
     1f8:	4698      	mov	r8, r3
     1fa:	4f0d      	ldr	r7, [pc, #52]	; (230 <_write+0x50>)
     1fc:	4643      	mov	r3, r8
     1fe:	6818      	ldr	r0, [r3, #0]
     200:	5d31      	ldrb	r1, [r6, r4]
     202:	683b      	ldr	r3, [r7, #0]
     204:	4798      	blx	r3
     206:	2800      	cmp	r0, #0
     208:	db08      	blt.n	21c <_write+0x3c>
			return -1;
		}
		++nChars;
     20a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     20c:	42a5      	cmp	r5, r4
     20e:	d1f5      	bne.n	1fc <_write+0x1c>
     210:	e007      	b.n	222 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     212:	2001      	movs	r0, #1
     214:	4240      	negs	r0, r0
     216:	e005      	b.n	224 <_write+0x44>
	}

	for (; len != 0; --len) {
     218:	2000      	movs	r0, #0
     21a:	e003      	b.n	224 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     21c:	2001      	movs	r0, #1
     21e:	4240      	negs	r0, r0
     220:	e000      	b.n	224 <_write+0x44>
		}
		++nChars;
     222:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     224:	bc04      	pop	{r2}
     226:	4690      	mov	r8, r2
     228:	bdf0      	pop	{r4, r5, r6, r7, pc}
     22a:	46c0      	nop			; (mov r8, r8)
<<<<<<< HEAD
     22c:	20003d34 	.word	0x20003d34
     230:	20003d30 	.word	0x20003d30

00000234 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     234:	b570      	push	{r4, r5, r6, lr}
     236:	b082      	sub	sp, #8
     238:	1c05      	adds	r5, r0, #0
     23a:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     23c:	2200      	movs	r2, #0
     23e:	466b      	mov	r3, sp
     240:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     242:	4c06      	ldr	r4, [pc, #24]	; (25c <usart_serial_getchar+0x28>)
     244:	1c28      	adds	r0, r5, #0
     246:	4669      	mov	r1, sp
     248:	3106      	adds	r1, #6
     24a:	47a0      	blx	r4
     24c:	2800      	cmp	r0, #0
     24e:	d1f9      	bne.n	244 <usart_serial_getchar+0x10>

	*c = temp;
     250:	466b      	mov	r3, sp
     252:	3306      	adds	r3, #6
     254:	881b      	ldrh	r3, [r3, #0]
     256:	7033      	strb	r3, [r6, #0]
}
     258:	b002      	add	sp, #8
     25a:	bd70      	pop	{r4, r5, r6, pc}
     25c:	00000d7d 	.word	0x00000d7d

00000260 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     260:	b570      	push	{r4, r5, r6, lr}
     262:	1c06      	adds	r6, r0, #0
     264:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     266:	4c03      	ldr	r4, [pc, #12]	; (274 <usart_serial_putchar+0x14>)
     268:	1c30      	adds	r0, r6, #0
     26a:	1c29      	adds	r1, r5, #0
     26c:	47a0      	blx	r4
     26e:	2800      	cmp	r0, #0
     270:	d1fa      	bne.n	268 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     272:	bd70      	pop	{r4, r5, r6, pc}
     274:	00000d51 	.word	0x00000d51

00000278 <configure_console>:
#include "sio2host.h"
#include "stdio_serial.h"
#include "conf_sio2host.h"

void configure_console(void)
{
     278:	b5f0      	push	{r4, r5, r6, r7, lr}
     27a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     27c:	2380      	movs	r3, #128	; 0x80
     27e:	05db      	lsls	r3, r3, #23
     280:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     282:	2300      	movs	r3, #0
     284:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     286:	22ff      	movs	r2, #255	; 0xff
     288:	4668      	mov	r0, sp
     28a:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
     28c:	2200      	movs	r2, #0
     28e:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     290:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
     292:	2196      	movs	r1, #150	; 0x96
     294:	0189      	lsls	r1, r1, #6
     296:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     298:	2601      	movs	r6, #1
     29a:	2124      	movs	r1, #36	; 0x24
     29c:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
     29e:	2125      	movs	r1, #37	; 0x25
     2a0:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
     2a2:	2126      	movs	r1, #38	; 0x26
     2a4:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     2a6:	2127      	movs	r1, #39	; 0x27
     2a8:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     2aa:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     2ac:	212c      	movs	r1, #44	; 0x2c
     2ae:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     2b0:	212d      	movs	r1, #45	; 0x2d
     2b2:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     2b4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     2b6:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     2b8:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
     2ba:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
     2bc:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
     2be:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
     2c0:	2313      	movs	r3, #19
     2c2:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
     2c4:	7742      	strb	r2, [r0, #29]
	static struct usart_module cdc_uart_module;
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
     2c6:	2380      	movs	r3, #128	; 0x80
     2c8:	035b      	lsls	r3, r3, #13
     2ca:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
     2cc:	4b19      	ldr	r3, [pc, #100]	; (334 <configure_console+0xbc>)
     2ce:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
     2d0:	4b19      	ldr	r3, [pc, #100]	; (338 <configure_console+0xc0>)
     2d2:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
     2da:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     2dc:	4c17      	ldr	r4, [pc, #92]	; (33c <configure_console+0xc4>)
     2de:	4b18      	ldr	r3, [pc, #96]	; (340 <configure_console+0xc8>)
     2e0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     2e2:	4a18      	ldr	r2, [pc, #96]	; (344 <configure_console+0xcc>)
     2e4:	4b18      	ldr	r3, [pc, #96]	; (348 <configure_console+0xd0>)
     2e6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     2e8:	4a18      	ldr	r2, [pc, #96]	; (34c <configure_console+0xd4>)
     2ea:	4b19      	ldr	r3, [pc, #100]	; (350 <configure_console+0xd8>)
     2ec:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     2ee:	1c20      	adds	r0, r4, #0
     2f0:	4918      	ldr	r1, [pc, #96]	; (354 <configure_console+0xdc>)
     2f2:	466a      	mov	r2, sp
     2f4:	4b18      	ldr	r3, [pc, #96]	; (358 <configure_console+0xe0>)
     2f6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     2f8:	4f18      	ldr	r7, [pc, #96]	; (35c <configure_console+0xe4>)
     2fa:	683b      	ldr	r3, [r7, #0]
     2fc:	6898      	ldr	r0, [r3, #8]
     2fe:	2100      	movs	r1, #0
     300:	4d17      	ldr	r5, [pc, #92]	; (360 <configure_console+0xe8>)
     302:	47a8      	blx	r5
	setbuf(stdin, NULL);
     304:	683b      	ldr	r3, [r7, #0]
     306:	6858      	ldr	r0, [r3, #4]
     308:	2100      	movs	r1, #0
     30a:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     30c:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     30e:	1c28      	adds	r0, r5, #0
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <configure_console+0xec>)
     312:	4798      	blx	r3
     314:	231f      	movs	r3, #31
     316:	4018      	ands	r0, r3
     318:	4086      	lsls	r6, r0
     31a:	4b13      	ldr	r3, [pc, #76]	; (368 <configure_console+0xf0>)
     31c:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     31e:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     320:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     322:	2b00      	cmp	r3, #0
     324:	d1fc      	bne.n	320 <configure_console+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     326:	682a      	ldr	r2, [r5, #0]
     328:	2302      	movs	r3, #2
     32a:	4313      	orrs	r3, r2
     32c:	602b      	str	r3, [r5, #0]
	usart_conf.baudrate    = 9600;

	stdio_serial_init(&cdc_uart_module, USART_HOST, &usart_conf);
	usart_enable(&cdc_uart_module);
}
     32e:	b011      	add	sp, #68	; 0x44
     330:	bdf0      	pop	{r4, r5, r6, r7, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	00040003 	.word	0x00040003
     338:	00050003 	.word	0x00050003
     33c:	2000008c 	.word	0x2000008c
     340:	20003d34 	.word	0x20003d34
     344:	00000261 	.word	0x00000261
     348:	20003d30 	.word	0x20003d30
     34c:	00000235 	.word	0x00000235
     350:	20003d2c 	.word	0x20003d2c
     354:	42000800 	.word	0x42000800
     358:	00000a49 	.word	0x00000a49
     35c:	2000006c 	.word	0x2000006c
     360:	00002f81 	.word	0x00002f81
     364:	000009bd 	.word	0x000009bd
     368:	e000e100 	.word	0xe000e100

0000036c <_tc_interrupt_handler>:
=======
     22c:	20003cf8 	.word	0x20003cf8
     230:	20003cf4 	.word	0x20003cf4

00000234 <_tc_interrupt_handler>:
>>>>>>> JJ's_Branch
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
<<<<<<< HEAD
     36c:	b538      	push	{r3, r4, r5, lr}
=======
     234:	b538      	push	{r3, r4, r5, lr}
>>>>>>> JJ's_Branch
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
<<<<<<< HEAD
     36e:	0080      	lsls	r0, r0, #2
     370:	4b14      	ldr	r3, [pc, #80]	; (3c4 <_tc_interrupt_handler+0x58>)
     372:	58c4      	ldr	r4, [r0, r3]
=======
     236:	0080      	lsls	r0, r0, #2
     238:	4b14      	ldr	r3, [pc, #80]	; (28c <_tc_interrupt_handler+0x58>)
     23a:	58c4      	ldr	r4, [r0, r3]
>>>>>>> JJ's_Branch
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
<<<<<<< HEAD
     374:	6822      	ldr	r2, [r4, #0]
     376:	7b95      	ldrb	r5, [r2, #14]
     378:	7e23      	ldrb	r3, [r4, #24]
     37a:	401d      	ands	r5, r3
     37c:	7e63      	ldrb	r3, [r4, #25]
     37e:	401d      	ands	r5, r3
=======
     23c:	6822      	ldr	r2, [r4, #0]
     23e:	7b95      	ldrb	r5, [r2, #14]
     240:	7e23      	ldrb	r3, [r4, #24]
     242:	401d      	ands	r5, r3
     244:	7e63      	ldrb	r3, [r4, #25]
     246:	401d      	ands	r5, r3
>>>>>>> JJ's_Branch
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
<<<<<<< HEAD
     380:	07eb      	lsls	r3, r5, #31
     382:	d505      	bpl.n	390 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     384:	1c20      	adds	r0, r4, #0
     386:	68a2      	ldr	r2, [r4, #8]
     388:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     38a:	2301      	movs	r3, #1
     38c:	6822      	ldr	r2, [r4, #0]
     38e:	7393      	strb	r3, [r2, #14]
=======
     248:	07eb      	lsls	r3, r5, #31
     24a:	d505      	bpl.n	258 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     24c:	1c20      	adds	r0, r4, #0
     24e:	68a2      	ldr	r2, [r4, #8]
     250:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     252:	2301      	movs	r3, #1
     254:	6822      	ldr	r2, [r4, #0]
     256:	7393      	strb	r3, [r2, #14]
>>>>>>> JJ's_Branch
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
<<<<<<< HEAD
     390:	07ab      	lsls	r3, r5, #30
     392:	d505      	bpl.n	3a0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     394:	1c20      	adds	r0, r4, #0
     396:	68e2      	ldr	r2, [r4, #12]
     398:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     39a:	2302      	movs	r3, #2
     39c:	6822      	ldr	r2, [r4, #0]
     39e:	7393      	strb	r3, [r2, #14]
=======
     258:	07ab      	lsls	r3, r5, #30
     25a:	d505      	bpl.n	268 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     25c:	1c20      	adds	r0, r4, #0
     25e:	68e2      	ldr	r2, [r4, #12]
     260:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     262:	2302      	movs	r3, #2
     264:	6822      	ldr	r2, [r4, #0]
     266:	7393      	strb	r3, [r2, #14]
>>>>>>> JJ's_Branch
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
<<<<<<< HEAD
     3a0:	06eb      	lsls	r3, r5, #27
     3a2:	d505      	bpl.n	3b0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     3a4:	1c20      	adds	r0, r4, #0
     3a6:	6922      	ldr	r2, [r4, #16]
     3a8:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     3aa:	2310      	movs	r3, #16
     3ac:	6822      	ldr	r2, [r4, #0]
     3ae:	7393      	strb	r3, [r2, #14]
=======
     268:	06eb      	lsls	r3, r5, #27
     26a:	d505      	bpl.n	278 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     26c:	1c20      	adds	r0, r4, #0
     26e:	6922      	ldr	r2, [r4, #16]
     270:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     272:	2310      	movs	r3, #16
     274:	6822      	ldr	r2, [r4, #0]
     276:	7393      	strb	r3, [r2, #14]
>>>>>>> JJ's_Branch
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
<<<<<<< HEAD
     3b0:	06ab      	lsls	r3, r5, #26
     3b2:	d505      	bpl.n	3c0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     3b4:	1c20      	adds	r0, r4, #0
     3b6:	6962      	ldr	r2, [r4, #20]
     3b8:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     3ba:	6823      	ldr	r3, [r4, #0]
     3bc:	2220      	movs	r2, #32
     3be:	739a      	strb	r2, [r3, #14]
	}
}
     3c0:	bd38      	pop	{r3, r4, r5, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	20003d38 	.word	0x20003d38

000003c8 <TC3_Handler>:
=======
     278:	06ab      	lsls	r3, r5, #26
     27a:	d505      	bpl.n	288 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     27c:	1c20      	adds	r0, r4, #0
     27e:	6962      	ldr	r2, [r4, #20]
     280:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     282:	6823      	ldr	r3, [r4, #0]
     284:	2220      	movs	r2, #32
     286:	739a      	strb	r2, [r3, #14]
	}
}
     288:	bd38      	pop	{r3, r4, r5, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	20003cfc 	.word	0x20003cfc

00000290 <TC3_Handler>:
>>>>>>> JJ's_Branch
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
<<<<<<< HEAD
     3c8:	b508      	push	{r3, lr}
     3ca:	2000      	movs	r0, #0
     3cc:	4b01      	ldr	r3, [pc, #4]	; (3d4 <TC3_Handler+0xc>)
     3ce:	4798      	blx	r3
     3d0:	bd08      	pop	{r3, pc}
     3d2:	46c0      	nop			; (mov r8, r8)
     3d4:	0000036d 	.word	0x0000036d

000003d8 <TC4_Handler>:
     3d8:	b508      	push	{r3, lr}
     3da:	2001      	movs	r0, #1
     3dc:	4b01      	ldr	r3, [pc, #4]	; (3e4 <TC4_Handler+0xc>)
     3de:	4798      	blx	r3
     3e0:	bd08      	pop	{r3, pc}
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	0000036d 	.word	0x0000036d

000003e8 <TC5_Handler>:
     3e8:	b508      	push	{r3, lr}
     3ea:	2002      	movs	r0, #2
     3ec:	4b01      	ldr	r3, [pc, #4]	; (3f4 <TC5_Handler+0xc>)
     3ee:	4798      	blx	r3
     3f0:	bd08      	pop	{r3, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	0000036d 	.word	0x0000036d

000003f8 <EIC_Handler>:
=======
     290:	b508      	push	{r3, lr}
     292:	2000      	movs	r0, #0
     294:	4b01      	ldr	r3, [pc, #4]	; (29c <TC3_Handler+0xc>)
     296:	4798      	blx	r3
     298:	bd08      	pop	{r3, pc}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	00000235 	.word	0x00000235

000002a0 <TC4_Handler>:
     2a0:	b508      	push	{r3, lr}
     2a2:	2001      	movs	r0, #1
     2a4:	4b01      	ldr	r3, [pc, #4]	; (2ac <TC4_Handler+0xc>)
     2a6:	4798      	blx	r3
     2a8:	bd08      	pop	{r3, pc}
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	00000235 	.word	0x00000235

000002b0 <TC5_Handler>:
     2b0:	b508      	push	{r3, lr}
     2b2:	2002      	movs	r0, #2
     2b4:	4b01      	ldr	r3, [pc, #4]	; (2bc <TC5_Handler+0xc>)
     2b6:	4798      	blx	r3
     2b8:	bd08      	pop	{r3, pc}
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	00000235 	.word	0x00000235

000002c0 <EIC_Handler>:
>>>>>>> JJ's_Branch
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
<<<<<<< HEAD
     3f8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     3fa:	2200      	movs	r2, #0
     3fc:	4b16      	ldr	r3, [pc, #88]	; (458 <EIC_Handler+0x60>)
     3fe:	701a      	strb	r2, [r3, #0]
     400:	2300      	movs	r3, #0
=======
     2c0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     2c2:	2200      	movs	r2, #0
     2c4:	4b16      	ldr	r3, [pc, #88]	; (320 <EIC_Handler+0x60>)
     2c6:	701a      	strb	r2, [r3, #0]
     2c8:	2300      	movs	r3, #0
>>>>>>> JJ's_Branch
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
<<<<<<< HEAD
     402:	261f      	movs	r6, #31
=======
     2ca:	261f      	movs	r6, #31
>>>>>>> JJ's_Branch
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
<<<<<<< HEAD
     404:	4d15      	ldr	r5, [pc, #84]	; (45c <EIC_Handler+0x64>)
=======
     2cc:	4d15      	ldr	r5, [pc, #84]	; (324 <EIC_Handler+0x64>)
>>>>>>> JJ's_Branch

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
<<<<<<< HEAD
     406:	4c14      	ldr	r4, [pc, #80]	; (458 <EIC_Handler+0x60>)
=======
     2ce:	4c14      	ldr	r4, [pc, #80]	; (320 <EIC_Handler+0x60>)
>>>>>>> JJ's_Branch
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
<<<<<<< HEAD
     408:	2b1f      	cmp	r3, #31
     40a:	d910      	bls.n	42e <EIC_Handler+0x36>
     40c:	e019      	b.n	442 <EIC_Handler+0x4a>
=======
     2d0:	2b1f      	cmp	r3, #31
     2d2:	d910      	bls.n	2f6 <EIC_Handler+0x36>
     2d4:	e019      	b.n	30a <EIC_Handler+0x4a>
>>>>>>> JJ's_Branch
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
<<<<<<< HEAD
     40e:	4914      	ldr	r1, [pc, #80]	; (460 <EIC_Handler+0x68>)
     410:	e000      	b.n	414 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     412:	2100      	movs	r1, #0
=======
     2d6:	4914      	ldr	r1, [pc, #80]	; (328 <EIC_Handler+0x68>)
     2d8:	e000      	b.n	2dc <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     2da:	2100      	movs	r1, #0
>>>>>>> JJ's_Branch
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
<<<<<<< HEAD
     414:	610a      	str	r2, [r1, #16]
=======
     2dc:	610a      	str	r2, [r1, #16]
>>>>>>> JJ's_Branch
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
<<<<<<< HEAD
     416:	009b      	lsls	r3, r3, #2
     418:	595b      	ldr	r3, [r3, r5]
     41a:	2b00      	cmp	r3, #0
     41c:	d000      	beq.n	420 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     41e:	4798      	blx	r3
=======
     2de:	009b      	lsls	r3, r3, #2
     2e0:	595b      	ldr	r3, [r3, r5]
     2e2:	2b00      	cmp	r3, #0
     2e4:	d000      	beq.n	2e8 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2e6:	4798      	blx	r3
>>>>>>> JJ's_Branch

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
<<<<<<< HEAD
     420:	7823      	ldrb	r3, [r4, #0]
     422:	3301      	adds	r3, #1
     424:	b2db      	uxtb	r3, r3
     426:	7023      	strb	r3, [r4, #0]
     428:	2b0f      	cmp	r3, #15
     42a:	d814      	bhi.n	456 <EIC_Handler+0x5e>
     42c:	e7ec      	b.n	408 <EIC_Handler+0x10>
=======
     2e8:	7823      	ldrb	r3, [r4, #0]
     2ea:	3301      	adds	r3, #1
     2ec:	b2db      	uxtb	r3, r3
     2ee:	7023      	strb	r3, [r4, #0]
     2f0:	2b0f      	cmp	r3, #15
     2f2:	d814      	bhi.n	31e <EIC_Handler+0x5e>
     2f4:	e7ec      	b.n	2d0 <EIC_Handler+0x10>
>>>>>>> JJ's_Branch
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
<<<<<<< HEAD
     42e:	1c32      	adds	r2, r6, #0
     430:	401a      	ands	r2, r3
     432:	2101      	movs	r1, #1
     434:	4091      	lsls	r1, r2
     436:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     438:	4909      	ldr	r1, [pc, #36]	; (460 <EIC_Handler+0x68>)
     43a:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     43c:	4211      	tst	r1, r2
     43e:	d1e6      	bne.n	40e <EIC_Handler+0x16>
     440:	e7ee      	b.n	420 <EIC_Handler+0x28>
=======
     2f6:	1c32      	adds	r2, r6, #0
     2f8:	401a      	ands	r2, r3
     2fa:	2101      	movs	r1, #1
     2fc:	4091      	lsls	r1, r2
     2fe:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     300:	4909      	ldr	r1, [pc, #36]	; (328 <EIC_Handler+0x68>)
     302:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     304:	4211      	tst	r1, r2
     306:	d1e6      	bne.n	2d6 <EIC_Handler+0x16>
     308:	e7ee      	b.n	2e8 <EIC_Handler+0x28>
>>>>>>> JJ's_Branch
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
<<<<<<< HEAD
     442:	1c32      	adds	r2, r6, #0
     444:	401a      	ands	r2, r3
     446:	2101      	movs	r1, #1
     448:	4091      	lsls	r1, r2
     44a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     44c:	2100      	movs	r1, #0
     44e:	6909      	ldr	r1, [r1, #16]
     450:	4211      	tst	r1, r2
     452:	d1de      	bne.n	412 <EIC_Handler+0x1a>
     454:	e7e4      	b.n	420 <EIC_Handler+0x28>
=======
     30a:	1c32      	adds	r2, r6, #0
     30c:	401a      	ands	r2, r3
     30e:	2101      	movs	r1, #1
     310:	4091      	lsls	r1, r2
     312:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     314:	2100      	movs	r1, #0
     316:	6909      	ldr	r1, [r1, #16]
     318:	4211      	tst	r1, r2
     31a:	d1de      	bne.n	2da <EIC_Handler+0x1a>
     31c:	e7e4      	b.n	2e8 <EIC_Handler+0x28>
>>>>>>> JJ's_Branch
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
<<<<<<< HEAD
     456:	bd70      	pop	{r4, r5, r6, pc}
     458:	20003d44 	.word	0x20003d44
     45c:	20003cec 	.word	0x20003cec
     460:	40001800 	.word	0x40001800

00000464 <_ac_interrupt_handler>:
=======
     31e:	bd70      	pop	{r4, r5, r6, pc}
     320:	20003d08 	.word	0x20003d08
     324:	20003cb0 	.word	0x20003cb0
     328:	40001800 	.word	0x40001800

0000032c <_ac_interrupt_handler>:
>>>>>>> JJ's_Branch
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
<<<<<<< HEAD
     464:	b538      	push	{r3, r4, r5, lr}
=======
     32c:	b538      	push	{r3, r4, r5, lr}
>>>>>>> JJ's_Branch
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];
<<<<<<< HEAD
     466:	0080      	lsls	r0, r0, #2
     468:	4b10      	ldr	r3, [pc, #64]	; (4ac <_ac_interrupt_handler+0x48>)
     46a:	58c4      	ldr	r4, [r0, r3]
=======
     32e:	0080      	lsls	r0, r0, #2
     330:	4b10      	ldr	r3, [pc, #64]	; (374 <_ac_interrupt_handler+0x48>)
     332:	58c4      	ldr	r4, [r0, r3]
>>>>>>> JJ's_Branch

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
<<<<<<< HEAD
     46c:	6822      	ldr	r2, [r4, #0]
     46e:	7995      	ldrb	r5, [r2, #6]
=======
     334:	6822      	ldr	r2, [r4, #0]
     336:	7995      	ldrb	r5, [r2, #6]
>>>>>>> JJ's_Branch
	/* Get device instance from the look-up table */

	struct ac_module *module = _ac_instance[instance_index];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask =
<<<<<<< HEAD
     470:	7e23      	ldrb	r3, [r4, #24]
     472:	401d      	ands	r5, r3
     474:	7e63      	ldrb	r3, [r4, #25]
     476:	401d      	ands	r5, r3
=======
     338:	7e23      	ldrb	r3, [r4, #24]
     33a:	401d      	ands	r5, r3
     33c:	7e63      	ldrb	r3, [r4, #25]
     33e:	401d      	ands	r5, r3
>>>>>>> JJ's_Branch
			_ac_instance[instance_index]->hw->INTFLAG.reg &
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
<<<<<<< HEAD
     478:	07eb      	lsls	r3, r5, #31
     47a:	d505      	bpl.n	488 <_ac_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
     47c:	1c20      	adds	r0, r4, #0
     47e:	6862      	ldr	r2, [r4, #4]
     480:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
     482:	2301      	movs	r3, #1
     484:	6822      	ldr	r2, [r4, #0]
     486:	7193      	strb	r3, [r2, #6]
=======
     340:	07eb      	lsls	r3, r5, #31
     342:	d505      	bpl.n	350 <_ac_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
     344:	1c20      	adds	r0, r4, #0
     346:	6862      	ldr	r2, [r4, #4]
     348:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
     34a:	2301      	movs	r3, #1
     34c:	6822      	ldr	r2, [r4, #0]
     34e:	7193      	strb	r3, [r2, #6]
>>>>>>> JJ's_Branch
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
<<<<<<< HEAD
     488:	07ab      	lsls	r3, r5, #30
     48a:	d505      	bpl.n	498 <_ac_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
     48c:	1c20      	adds	r0, r4, #0
     48e:	68a2      	ldr	r2, [r4, #8]
     490:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
     492:	2302      	movs	r3, #2
     494:	6822      	ldr	r2, [r4, #0]
     496:	7193      	strb	r3, [r2, #6]
=======
     350:	07ab      	lsls	r3, r5, #30
     352:	d505      	bpl.n	360 <_ac_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
     354:	1c20      	adds	r0, r4, #0
     356:	68a2      	ldr	r2, [r4, #8]
     358:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
     35a:	2302      	movs	r3, #2
     35c:	6822      	ldr	r2, [r4, #0]
     35e:	7193      	strb	r3, [r2, #6]
>>>>>>> JJ's_Branch
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
<<<<<<< HEAD
     498:	06eb      	lsls	r3, r5, #27
     49a:	d505      	bpl.n	4a8 <_ac_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
     49c:	1c20      	adds	r0, r4, #0
     49e:	6962      	ldr	r2, [r4, #20]
     4a0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
     4a2:	6823      	ldr	r3, [r4, #0]
     4a4:	2210      	movs	r2, #16
     4a6:	719a      	strb	r2, [r3, #6]
=======
     360:	06eb      	lsls	r3, r5, #27
     362:	d505      	bpl.n	370 <_ac_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
     364:	1c20      	adds	r0, r4, #0
     366:	6962      	ldr	r2, [r4, #20]
     368:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
     36a:	6823      	ldr	r3, [r4, #0]
     36c:	2210      	movs	r2, #16
     36e:	719a      	strb	r2, [r3, #6]
>>>>>>> JJ's_Branch
		(module->callback[AC_CALLBACK_WINDOW_1])(module);
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#endif /* (AC_NUM_CMP > 2) */
}
<<<<<<< HEAD
     4a8:	bd38      	pop	{r3, r4, r5, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	20003d48 	.word	0x20003d48

000004b0 <AC_Handler>:
=======
     370:	bd38      	pop	{r3, r4, r5, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	20003d0c 	.word	0x20003d0c

00000378 <AC_Handler>:
>>>>>>> JJ's_Branch
/**
 * \internal ISR handler for AC
 */
#if (AC_INST_NUM == 1)
void AC_Handler(void)
{
<<<<<<< HEAD
     4b0:	b508      	push	{r3, lr}
	_ac_interrupt_handler(0);
     4b2:	2000      	movs	r0, #0
     4b4:	4b01      	ldr	r3, [pc, #4]	; (4bc <AC_Handler+0xc>)
     4b6:	4798      	blx	r3
}
     4b8:	bd08      	pop	{r3, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	00000465 	.word	0x00000465

000004c0 <cpu_irq_enter_critical>:
=======
     378:	b508      	push	{r3, lr}
	_ac_interrupt_handler(0);
     37a:	2000      	movs	r0, #0
     37c:	4b01      	ldr	r3, [pc, #4]	; (384 <AC_Handler+0xc>)
     37e:	4798      	blx	r3
}
     380:	bd08      	pop	{r3, pc}
     382:	46c0      	nop			; (mov r8, r8)
     384:	0000032d 	.word	0x0000032d

00000388 <cpu_irq_enter_critical>:
>>>>>>> JJ's_Branch
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
<<<<<<< HEAD
     4c0:	4b0c      	ldr	r3, [pc, #48]	; (4f4 <cpu_irq_enter_critical+0x34>)
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	2b00      	cmp	r3, #0
     4c6:	d110      	bne.n	4ea <cpu_irq_enter_critical+0x2a>
=======
     388:	4b0c      	ldr	r3, [pc, #48]	; (3bc <cpu_irq_enter_critical+0x34>)
     38a:	681b      	ldr	r3, [r3, #0]
     38c:	2b00      	cmp	r3, #0
     38e:	d110      	bne.n	3b2 <cpu_irq_enter_critical+0x2a>
>>>>>>> JJ's_Branch
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
<<<<<<< HEAD
     4c8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     4cc:	2b00      	cmp	r3, #0
     4ce:	d109      	bne.n	4e4 <cpu_irq_enter_critical+0x24>
=======
     390:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     394:	2b00      	cmp	r3, #0
     396:	d109      	bne.n	3ac <cpu_irq_enter_critical+0x24>
>>>>>>> JJ's_Branch
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
<<<<<<< HEAD
     4d0:	b672      	cpsid	i
=======
     398:	b672      	cpsid	i
>>>>>>> JJ's_Branch
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
<<<<<<< HEAD
     4d2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     4d6:	2200      	movs	r2, #0
     4d8:	4b07      	ldr	r3, [pc, #28]	; (4f8 <cpu_irq_enter_critical+0x38>)
     4da:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     4dc:	2201      	movs	r2, #1
     4de:	4b07      	ldr	r3, [pc, #28]	; (4fc <cpu_irq_enter_critical+0x3c>)
     4e0:	701a      	strb	r2, [r3, #0]
     4e2:	e002      	b.n	4ea <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     4e4:	2200      	movs	r2, #0
     4e6:	4b05      	ldr	r3, [pc, #20]	; (4fc <cpu_irq_enter_critical+0x3c>)
     4e8:	701a      	strb	r2, [r3, #0]
=======
     39a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     39e:	2200      	movs	r2, #0
     3a0:	4b07      	ldr	r3, [pc, #28]	; (3c0 <cpu_irq_enter_critical+0x38>)
     3a2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     3a4:	2201      	movs	r2, #1
     3a6:	4b07      	ldr	r3, [pc, #28]	; (3c4 <cpu_irq_enter_critical+0x3c>)
     3a8:	701a      	strb	r2, [r3, #0]
     3aa:	e002      	b.n	3b2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     3ac:	2200      	movs	r2, #0
     3ae:	4b05      	ldr	r3, [pc, #20]	; (3c4 <cpu_irq_enter_critical+0x3c>)
     3b0:	701a      	strb	r2, [r3, #0]
>>>>>>> JJ's_Branch
		}

	}

	cpu_irq_critical_section_counter++;
<<<<<<< HEAD
     4ea:	4b02      	ldr	r3, [pc, #8]	; (4f4 <cpu_irq_enter_critical+0x34>)
     4ec:	681a      	ldr	r2, [r3, #0]
     4ee:	3201      	adds	r2, #1
     4f0:	601a      	str	r2, [r3, #0]
}
     4f2:	4770      	bx	lr
     4f4:	200000c0 	.word	0x200000c0
     4f8:	20000000 	.word	0x20000000
     4fc:	200000c4 	.word	0x200000c4

00000500 <cpu_irq_leave_critical>:
=======
     3b2:	4b02      	ldr	r3, [pc, #8]	; (3bc <cpu_irq_enter_critical+0x34>)
     3b4:	681a      	ldr	r2, [r3, #0]
     3b6:	3201      	adds	r2, #1
     3b8:	601a      	str	r2, [r3, #0]
}
     3ba:	4770      	bx	lr
     3bc:	2000008c 	.word	0x2000008c
     3c0:	20000000 	.word	0x20000000
     3c4:	20000090 	.word	0x20000090

000003c8 <cpu_irq_leave_critical>:
>>>>>>> JJ's_Branch
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
<<<<<<< HEAD
     500:	4b08      	ldr	r3, [pc, #32]	; (524 <cpu_irq_leave_critical+0x24>)
     502:	681a      	ldr	r2, [r3, #0]
     504:	3a01      	subs	r2, #1
     506:	601a      	str	r2, [r3, #0]
=======
     3c8:	4b08      	ldr	r3, [pc, #32]	; (3ec <cpu_irq_leave_critical+0x24>)
     3ca:	681a      	ldr	r2, [r3, #0]
     3cc:	3a01      	subs	r2, #1
     3ce:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
<<<<<<< HEAD
     508:	681b      	ldr	r3, [r3, #0]
     50a:	2b00      	cmp	r3, #0
     50c:	d109      	bne.n	522 <cpu_irq_leave_critical+0x22>
     50e:	4b06      	ldr	r3, [pc, #24]	; (528 <cpu_irq_leave_critical+0x28>)
     510:	781b      	ldrb	r3, [r3, #0]
     512:	2b00      	cmp	r3, #0
     514:	d005      	beq.n	522 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     516:	2201      	movs	r2, #1
     518:	4b04      	ldr	r3, [pc, #16]	; (52c <cpu_irq_leave_critical+0x2c>)
     51a:	701a      	strb	r2, [r3, #0]
     51c:	f3bf 8f5f 	dmb	sy
=======
     3d0:	681b      	ldr	r3, [r3, #0]
     3d2:	2b00      	cmp	r3, #0
     3d4:	d109      	bne.n	3ea <cpu_irq_leave_critical+0x22>
     3d6:	4b06      	ldr	r3, [pc, #24]	; (3f0 <cpu_irq_leave_critical+0x28>)
     3d8:	781b      	ldrb	r3, [r3, #0]
     3da:	2b00      	cmp	r3, #0
     3dc:	d005      	beq.n	3ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     3de:	2201      	movs	r2, #1
     3e0:	4b04      	ldr	r3, [pc, #16]	; (3f4 <cpu_irq_leave_critical+0x2c>)
     3e2:	701a      	strb	r2, [r3, #0]
     3e4:	f3bf 8f5f 	dmb	sy
>>>>>>> JJ's_Branch
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
<<<<<<< HEAD
     520:	b662      	cpsie	i
	}
}
     522:	4770      	bx	lr
     524:	200000c0 	.word	0x200000c0
     528:	200000c4 	.word	0x200000c4
     52c:	20000000 	.word	0x20000000

00000530 <system_board_init>:
=======
     3e8:	b662      	cpsie	i
	}
}
     3ea:	4770      	bx	lr
     3ec:	2000008c 	.word	0x2000008c
     3f0:	20000090 	.word	0x20000090
     3f4:	20000000 	.word	0x20000000

000003f8 <system_board_init>:
>>>>>>> JJ's_Branch




void system_board_init(void)
{
<<<<<<< HEAD
     530:	b5f0      	push	{r4, r5, r6, r7, lr}
     532:	b083      	sub	sp, #12
=======
     3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3fa:	b083      	sub	sp, #12
>>>>>>> JJ's_Branch
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
<<<<<<< HEAD
     534:	ac01      	add	r4, sp, #4
     536:	2501      	movs	r5, #1
     538:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     53a:	2700      	movs	r7, #0
     53c:	70a7      	strb	r7, [r4, #2]
=======
     3fc:	ac01      	add	r4, sp, #4
     3fe:	2501      	movs	r5, #1
     400:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     402:	2700      	movs	r7, #0
     404:	70a7      	strb	r7, [r4, #2]
>>>>>>> JJ's_Branch
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
<<<<<<< HEAD
     53e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     540:	2013      	movs	r0, #19
     542:	1c21      	adds	r1, r4, #0
     544:	4e06      	ldr	r6, [pc, #24]	; (560 <system_board_init+0x30>)
     546:	47b0      	blx	r6
=======
     406:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     408:	2013      	movs	r0, #19
     40a:	1c21      	adds	r1, r4, #0
     40c:	4e06      	ldr	r6, [pc, #24]	; (428 <system_board_init+0x30>)
     40e:	47b0      	blx	r6
>>>>>>> JJ's_Branch
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
<<<<<<< HEAD
     548:	2280      	movs	r2, #128	; 0x80
     54a:	0312      	lsls	r2, r2, #12
     54c:	4b05      	ldr	r3, [pc, #20]	; (564 <system_board_init+0x34>)
     54e:	619a      	str	r2, [r3, #24]
=======
     410:	2280      	movs	r2, #128	; 0x80
     412:	0312      	lsls	r2, r2, #12
     414:	4b05      	ldr	r3, [pc, #20]	; (42c <system_board_init+0x34>)
     416:	619a      	str	r2, [r3, #24]
>>>>>>> JJ's_Branch
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
<<<<<<< HEAD
     550:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     552:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     554:	201c      	movs	r0, #28
     556:	1c21      	adds	r1, r4, #0
     558:	47b0      	blx	r6
=======
     418:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     41a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     41c:	201c      	movs	r0, #28
     41e:	1c21      	adds	r1, r4, #0
     420:	47b0      	blx	r6
>>>>>>> JJ's_Branch
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
<<<<<<< HEAD
     55a:	b003      	add	sp, #12
     55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	00000569 	.word	0x00000569
     564:	41004400 	.word	0x41004400

00000568 <port_pin_set_config>:
=======
     422:	b003      	add	sp, #12
     424:	bdf0      	pop	{r4, r5, r6, r7, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	00000431 	.word	0x00000431
     42c:	41004400 	.word	0x41004400

00000430 <port_pin_set_config>:
>>>>>>> JJ's_Branch
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
<<<<<<< HEAD
     568:	b500      	push	{lr}
     56a:	b083      	sub	sp, #12
=======
     430:	b500      	push	{lr}
     432:	b083      	sub	sp, #12
>>>>>>> JJ's_Branch
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
<<<<<<< HEAD
     56c:	ab01      	add	r3, sp, #4
     56e:	2280      	movs	r2, #128	; 0x80
     570:	701a      	strb	r2, [r3, #0]
=======
     434:	ab01      	add	r3, sp, #4
     436:	2280      	movs	r2, #128	; 0x80
     438:	701a      	strb	r2, [r3, #0]
>>>>>>> JJ's_Branch

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
<<<<<<< HEAD
     572:	780a      	ldrb	r2, [r1, #0]
     574:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     576:	784a      	ldrb	r2, [r1, #1]
     578:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     57a:	788a      	ldrb	r2, [r1, #2]
     57c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     57e:	1c19      	adds	r1, r3, #0
     580:	4b01      	ldr	r3, [pc, #4]	; (588 <port_pin_set_config+0x20>)
     582:	4798      	blx	r3
}
     584:	b003      	add	sp, #12
     586:	bd00      	pop	{pc}
     588:	000014c5 	.word	0x000014c5

0000058c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     58c:	b510      	push	{r4, lr}
     58e:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     590:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     592:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     594:	4299      	cmp	r1, r3
     596:	d30c      	bcc.n	5b2 <_sercom_get_sync_baud_val+0x26>
     598:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     59a:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     59c:	1c60      	adds	r0, r4, #1
     59e:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     5a0:	428b      	cmp	r3, r1
     5a2:	d801      	bhi.n	5a8 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     5a4:	1c04      	adds	r4, r0, #0
     5a6:	e7f8      	b.n	59a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5a8:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     5aa:	2cff      	cmp	r4, #255	; 0xff
     5ac:	d801      	bhi.n	5b2 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     5ae:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     5b0:	2000      	movs	r0, #0
	}
}
     5b2:	bd10      	pop	{r4, pc}
     5b4:	0000      	movs	r0, r0
	...

000005b8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ba:	465f      	mov	r7, fp
     5bc:	4656      	mov	r6, sl
     5be:	464d      	mov	r5, r9
     5c0:	4644      	mov	r4, r8
     5c2:	b4f0      	push	{r4, r5, r6, r7}
     5c4:	b087      	sub	sp, #28
     5c6:	1c06      	adds	r6, r0, #0
     5c8:	1c0d      	adds	r5, r1, #0
     5ca:	9204      	str	r2, [sp, #16]
     5cc:	aa10      	add	r2, sp, #64	; 0x40
     5ce:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     5d0:	1c32      	adds	r2, r6, #0
     5d2:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5d4:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     5d6:	428a      	cmp	r2, r1
     5d8:	d900      	bls.n	5dc <_sercom_get_async_baud_val+0x24>
     5da:	e0b3      	b.n	744 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     5dc:	2b00      	cmp	r3, #0
     5de:	d14b      	bne.n	678 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     5e0:	2100      	movs	r1, #0
     5e2:	1c32      	adds	r2, r6, #0
     5e4:	4c5e      	ldr	r4, [pc, #376]	; (760 <_sercom_get_async_baud_val+0x1a8>)
     5e6:	47a0      	blx	r4
     5e8:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     5ea:	1c2e      	adds	r6, r5, #0
     5ec:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     5ee:	2000      	movs	r0, #0
     5f0:	2100      	movs	r1, #0
     5f2:	2200      	movs	r2, #0
     5f4:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     5f6:	243f      	movs	r4, #63	; 0x3f
     5f8:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     5fa:	2501      	movs	r5, #1
     5fc:	46a8      	mov	r8, r5
     5fe:	9002      	str	r0, [sp, #8]
     600:	9103      	str	r1, [sp, #12]
     602:	4661      	mov	r1, ip
     604:	3920      	subs	r1, #32
     606:	d403      	bmi.n	610 <_sercom_get_async_baud_val+0x58>
     608:	4640      	mov	r0, r8
     60a:	4088      	lsls	r0, r1
     60c:	4681      	mov	r9, r0
     60e:	e005      	b.n	61c <_sercom_get_async_baud_val+0x64>
     610:	2120      	movs	r1, #32
     612:	4665      	mov	r5, ip
     614:	1b4c      	subs	r4, r1, r5
     616:	4640      	mov	r0, r8
     618:	40e0      	lsrs	r0, r4
     61a:	4681      	mov	r9, r0
     61c:	4641      	mov	r1, r8
     61e:	4664      	mov	r4, ip
     620:	40a1      	lsls	r1, r4
     622:	468a      	mov	sl, r1

		r = r << 1;
     624:	1c10      	adds	r0, r2, #0
     626:	1c19      	adds	r1, r3, #0
     628:	1880      	adds	r0, r0, r2
     62a:	4159      	adcs	r1, r3
     62c:	1c02      	adds	r2, r0, #0
     62e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     630:	465d      	mov	r5, fp
     632:	464c      	mov	r4, r9
     634:	4225      	tst	r5, r4
     636:	d002      	beq.n	63e <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     638:	4642      	mov	r2, r8
     63a:	4302      	orrs	r2, r0
     63c:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     63e:	429f      	cmp	r7, r3
     640:	d80c      	bhi.n	65c <_sercom_get_async_baud_val+0xa4>
     642:	d101      	bne.n	648 <_sercom_get_async_baud_val+0x90>
     644:	4296      	cmp	r6, r2
     646:	d809      	bhi.n	65c <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     648:	1b92      	subs	r2, r2, r6
     64a:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     64c:	4650      	mov	r0, sl
     64e:	9d02      	ldr	r5, [sp, #8]
     650:	4328      	orrs	r0, r5
     652:	4649      	mov	r1, r9
     654:	9c03      	ldr	r4, [sp, #12]
     656:	4321      	orrs	r1, r4
     658:	9002      	str	r0, [sp, #8]
     65a:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     65c:	4665      	mov	r5, ip
     65e:	3d01      	subs	r5, #1
     660:	46ac      	mov	ip, r5
     662:	d2ce      	bcs.n	602 <_sercom_get_async_baud_val+0x4a>
     664:	9802      	ldr	r0, [sp, #8]
     666:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     668:	4b3c      	ldr	r3, [pc, #240]	; (75c <_sercom_get_async_baud_val+0x1a4>)
     66a:	4a3b      	ldr	r2, [pc, #236]	; (758 <_sercom_get_async_baud_val+0x1a0>)
     66c:	1a12      	subs	r2, r2, r0
     66e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     670:	0c12      	lsrs	r2, r2, #16
     672:	041b      	lsls	r3, r3, #16
     674:	431a      	orrs	r2, r3
     676:	e062      	b.n	73e <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     678:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     67a:	2b01      	cmp	r3, #1
     67c:	d15f      	bne.n	73e <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     67e:	0f4f      	lsrs	r7, r1, #29
     680:	46b9      	mov	r9, r7
     682:	00cd      	lsls	r5, r1, #3
     684:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     686:	2100      	movs	r1, #0
     688:	1c32      	adds	r2, r6, #0
     68a:	2300      	movs	r3, #0
     68c:	4c34      	ldr	r4, [pc, #208]	; (760 <_sercom_get_async_baud_val+0x1a8>)
     68e:	47a0      	blx	r4
     690:	1c06      	adds	r6, r0, #0
     692:	1c0f      	adds	r7, r1, #0
     694:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     696:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     698:	9602      	str	r6, [sp, #8]
     69a:	9703      	str	r7, [sp, #12]
     69c:	469a      	mov	sl, r3
     69e:	4650      	mov	r0, sl
     6a0:	b2c0      	uxtb	r0, r0
     6a2:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6a4:	2100      	movs	r1, #0
     6a6:	4688      	mov	r8, r1
     6a8:	2200      	movs	r2, #0
     6aa:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     6ac:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     6ae:	1c27      	adds	r7, r4, #0
     6b0:	3f20      	subs	r7, #32
     6b2:	d403      	bmi.n	6bc <_sercom_get_async_baud_val+0x104>
     6b4:	1c2e      	adds	r6, r5, #0
     6b6:	40be      	lsls	r6, r7
     6b8:	9601      	str	r6, [sp, #4]
     6ba:	e004      	b.n	6c6 <_sercom_get_async_baud_val+0x10e>
     6bc:	2020      	movs	r0, #32
     6be:	1b07      	subs	r7, r0, r4
     6c0:	1c29      	adds	r1, r5, #0
     6c2:	40f9      	lsrs	r1, r7
     6c4:	9101      	str	r1, [sp, #4]
     6c6:	1c2e      	adds	r6, r5, #0
     6c8:	40a6      	lsls	r6, r4
     6ca:	9600      	str	r6, [sp, #0]

		r = r << 1;
     6cc:	1c10      	adds	r0, r2, #0
     6ce:	1c19      	adds	r1, r3, #0
     6d0:	1880      	adds	r0, r0, r2
     6d2:	4159      	adcs	r1, r3
     6d4:	1c02      	adds	r2, r0, #0
     6d6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     6d8:	465f      	mov	r7, fp
     6da:	4037      	ands	r7, r6
     6dc:	46bc      	mov	ip, r7
     6de:	9e01      	ldr	r6, [sp, #4]
     6e0:	464f      	mov	r7, r9
     6e2:	403e      	ands	r6, r7
     6e4:	4667      	mov	r7, ip
     6e6:	433e      	orrs	r6, r7
     6e8:	d002      	beq.n	6f0 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     6ea:	1c2a      	adds	r2, r5, #0
     6ec:	4302      	orrs	r2, r0
     6ee:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     6f0:	9803      	ldr	r0, [sp, #12]
     6f2:	4298      	cmp	r0, r3
     6f4:	d80b      	bhi.n	70e <_sercom_get_async_baud_val+0x156>
     6f6:	d102      	bne.n	6fe <_sercom_get_async_baud_val+0x146>
     6f8:	9902      	ldr	r1, [sp, #8]
     6fa:	4291      	cmp	r1, r2
     6fc:	d807      	bhi.n	70e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     6fe:	9e02      	ldr	r6, [sp, #8]
     700:	9f03      	ldr	r7, [sp, #12]
     702:	1b92      	subs	r2, r2, r6
     704:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     706:	4647      	mov	r7, r8
     708:	9800      	ldr	r0, [sp, #0]
     70a:	4307      	orrs	r7, r0
     70c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     70e:	3c01      	subs	r4, #1
     710:	d2cd      	bcs.n	6ae <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     712:	4641      	mov	r1, r8
     714:	4652      	mov	r2, sl
     716:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     718:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     71a:	4c12      	ldr	r4, [pc, #72]	; (764 <_sercom_get_async_baud_val+0x1ac>)
     71c:	42a3      	cmp	r3, r4
     71e:	d908      	bls.n	732 <_sercom_get_async_baud_val+0x17a>
     720:	9a05      	ldr	r2, [sp, #20]
     722:	3201      	adds	r2, #1
     724:	b2d2      	uxtb	r2, r2
     726:	9205      	str	r2, [sp, #20]
     728:	2601      	movs	r6, #1
     72a:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     72c:	4657      	mov	r7, sl
     72e:	2f08      	cmp	r7, #8
     730:	d1b5      	bne.n	69e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     732:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     734:	9805      	ldr	r0, [sp, #20]
     736:	2808      	cmp	r0, #8
     738:	d004      	beq.n	744 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     73a:	0342      	lsls	r2, r0, #13
     73c:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     73e:	9c04      	ldr	r4, [sp, #16]
     740:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     742:	2400      	movs	r4, #0
}
     744:	1c20      	adds	r0, r4, #0
     746:	b007      	add	sp, #28
     748:	bc3c      	pop	{r2, r3, r4, r5}
     74a:	4690      	mov	r8, r2
     74c:	4699      	mov	r9, r3
     74e:	46a2      	mov	sl, r4
     750:	46ab      	mov	fp, r5
     752:	bdf0      	pop	{r4, r5, r6, r7, pc}
     754:	46c0      	nop			; (mov r8, r8)
     756:	46c0      	nop			; (mov r8, r8)
     758:	00000000 	.word	0x00000000
     75c:	00000001 	.word	0x00000001
     760:	00002e99 	.word	0x00002e99
     764:	00001fff 	.word	0x00001fff

00000768 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     768:	b510      	push	{r4, lr}
     76a:	b082      	sub	sp, #8
     76c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     76e:	4b0f      	ldr	r3, [pc, #60]	; (7ac <sercom_set_gclk_generator+0x44>)
     770:	781b      	ldrb	r3, [r3, #0]
     772:	2b00      	cmp	r3, #0
     774:	d001      	beq.n	77a <sercom_set_gclk_generator+0x12>
     776:	2900      	cmp	r1, #0
     778:	d00d      	beq.n	796 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     77a:	a901      	add	r1, sp, #4
     77c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     77e:	2013      	movs	r0, #19
     780:	4b0b      	ldr	r3, [pc, #44]	; (7b0 <sercom_set_gclk_generator+0x48>)
     782:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     784:	2013      	movs	r0, #19
     786:	4b0b      	ldr	r3, [pc, #44]	; (7b4 <sercom_set_gclk_generator+0x4c>)
     788:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     78a:	4b08      	ldr	r3, [pc, #32]	; (7ac <sercom_set_gclk_generator+0x44>)
     78c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     78e:	2201      	movs	r2, #1
     790:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     792:	2000      	movs	r0, #0
     794:	e007      	b.n	7a6 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     796:	4b05      	ldr	r3, [pc, #20]	; (7ac <sercom_set_gclk_generator+0x44>)
     798:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     79a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     79c:	1b14      	subs	r4, r2, r4
     79e:	1e62      	subs	r2, r4, #1
     7a0:	4194      	sbcs	r4, r2
     7a2:	4264      	negs	r4, r4
     7a4:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     7a6:	b002      	add	sp, #8
     7a8:	bd10      	pop	{r4, pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	200000c8 	.word	0x200000c8
     7b0:	000013e9 	.word	0x000013e9
     7b4:	0000135d 	.word	0x0000135d

000007b8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     7b8:	4b44      	ldr	r3, [pc, #272]	; (8cc <_sercom_get_default_pad+0x114>)
     7ba:	4298      	cmp	r0, r3
     7bc:	d033      	beq.n	826 <_sercom_get_default_pad+0x6e>
     7be:	d806      	bhi.n	7ce <_sercom_get_default_pad+0x16>
     7c0:	4b43      	ldr	r3, [pc, #268]	; (8d0 <_sercom_get_default_pad+0x118>)
     7c2:	4298      	cmp	r0, r3
     7c4:	d00d      	beq.n	7e2 <_sercom_get_default_pad+0x2a>
     7c6:	4b43      	ldr	r3, [pc, #268]	; (8d4 <_sercom_get_default_pad+0x11c>)
     7c8:	4298      	cmp	r0, r3
     7ca:	d01b      	beq.n	804 <_sercom_get_default_pad+0x4c>
     7cc:	e06f      	b.n	8ae <_sercom_get_default_pad+0xf6>
     7ce:	4b42      	ldr	r3, [pc, #264]	; (8d8 <_sercom_get_default_pad+0x120>)
     7d0:	4298      	cmp	r0, r3
     7d2:	d04a      	beq.n	86a <_sercom_get_default_pad+0xb2>
     7d4:	4b41      	ldr	r3, [pc, #260]	; (8dc <_sercom_get_default_pad+0x124>)
     7d6:	4298      	cmp	r0, r3
     7d8:	d058      	beq.n	88c <_sercom_get_default_pad+0xd4>
     7da:	4b41      	ldr	r3, [pc, #260]	; (8e0 <_sercom_get_default_pad+0x128>)
     7dc:	4298      	cmp	r0, r3
     7de:	d166      	bne.n	8ae <_sercom_get_default_pad+0xf6>
     7e0:	e032      	b.n	848 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7e2:	2901      	cmp	r1, #1
     7e4:	d065      	beq.n	8b2 <_sercom_get_default_pad+0xfa>
     7e6:	2900      	cmp	r1, #0
     7e8:	d004      	beq.n	7f4 <_sercom_get_default_pad+0x3c>
     7ea:	2902      	cmp	r1, #2
     7ec:	d006      	beq.n	7fc <_sercom_get_default_pad+0x44>
     7ee:	2903      	cmp	r1, #3
     7f0:	d006      	beq.n	800 <_sercom_get_default_pad+0x48>
     7f2:	e001      	b.n	7f8 <_sercom_get_default_pad+0x40>
     7f4:	483b      	ldr	r0, [pc, #236]	; (8e4 <_sercom_get_default_pad+0x12c>)
     7f6:	e067      	b.n	8c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7f8:	2000      	movs	r0, #0
     7fa:	e065      	b.n	8c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7fc:	483a      	ldr	r0, [pc, #232]	; (8e8 <_sercom_get_default_pad+0x130>)
     7fe:	e063      	b.n	8c8 <_sercom_get_default_pad+0x110>
     800:	483a      	ldr	r0, [pc, #232]	; (8ec <_sercom_get_default_pad+0x134>)
     802:	e061      	b.n	8c8 <_sercom_get_default_pad+0x110>
     804:	2901      	cmp	r1, #1
     806:	d056      	beq.n	8b6 <_sercom_get_default_pad+0xfe>
     808:	2900      	cmp	r1, #0
     80a:	d004      	beq.n	816 <_sercom_get_default_pad+0x5e>
     80c:	2902      	cmp	r1, #2
     80e:	d006      	beq.n	81e <_sercom_get_default_pad+0x66>
     810:	2903      	cmp	r1, #3
     812:	d006      	beq.n	822 <_sercom_get_default_pad+0x6a>
     814:	e001      	b.n	81a <_sercom_get_default_pad+0x62>
     816:	2003      	movs	r0, #3
     818:	e056      	b.n	8c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     81a:	2000      	movs	r0, #0
     81c:	e054      	b.n	8c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     81e:	4834      	ldr	r0, [pc, #208]	; (8f0 <_sercom_get_default_pad+0x138>)
     820:	e052      	b.n	8c8 <_sercom_get_default_pad+0x110>
     822:	4834      	ldr	r0, [pc, #208]	; (8f4 <_sercom_get_default_pad+0x13c>)
     824:	e050      	b.n	8c8 <_sercom_get_default_pad+0x110>
     826:	2901      	cmp	r1, #1
     828:	d047      	beq.n	8ba <_sercom_get_default_pad+0x102>
     82a:	2900      	cmp	r1, #0
     82c:	d004      	beq.n	838 <_sercom_get_default_pad+0x80>
     82e:	2902      	cmp	r1, #2
     830:	d006      	beq.n	840 <_sercom_get_default_pad+0x88>
     832:	2903      	cmp	r1, #3
     834:	d006      	beq.n	844 <_sercom_get_default_pad+0x8c>
     836:	e001      	b.n	83c <_sercom_get_default_pad+0x84>
     838:	482f      	ldr	r0, [pc, #188]	; (8f8 <_sercom_get_default_pad+0x140>)
     83a:	e045      	b.n	8c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     83c:	2000      	movs	r0, #0
     83e:	e043      	b.n	8c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     840:	482e      	ldr	r0, [pc, #184]	; (8fc <_sercom_get_default_pad+0x144>)
     842:	e041      	b.n	8c8 <_sercom_get_default_pad+0x110>
     844:	482e      	ldr	r0, [pc, #184]	; (900 <_sercom_get_default_pad+0x148>)
     846:	e03f      	b.n	8c8 <_sercom_get_default_pad+0x110>
     848:	2901      	cmp	r1, #1
     84a:	d038      	beq.n	8be <_sercom_get_default_pad+0x106>
     84c:	2900      	cmp	r1, #0
     84e:	d004      	beq.n	85a <_sercom_get_default_pad+0xa2>
     850:	2902      	cmp	r1, #2
     852:	d006      	beq.n	862 <_sercom_get_default_pad+0xaa>
     854:	2903      	cmp	r1, #3
     856:	d006      	beq.n	866 <_sercom_get_default_pad+0xae>
     858:	e001      	b.n	85e <_sercom_get_default_pad+0xa6>
     85a:	482a      	ldr	r0, [pc, #168]	; (904 <_sercom_get_default_pad+0x14c>)
     85c:	e034      	b.n	8c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     85e:	2000      	movs	r0, #0
     860:	e032      	b.n	8c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     862:	4829      	ldr	r0, [pc, #164]	; (908 <_sercom_get_default_pad+0x150>)
     864:	e030      	b.n	8c8 <_sercom_get_default_pad+0x110>
     866:	4829      	ldr	r0, [pc, #164]	; (90c <_sercom_get_default_pad+0x154>)
     868:	e02e      	b.n	8c8 <_sercom_get_default_pad+0x110>
     86a:	2901      	cmp	r1, #1
     86c:	d029      	beq.n	8c2 <_sercom_get_default_pad+0x10a>
     86e:	2900      	cmp	r1, #0
     870:	d004      	beq.n	87c <_sercom_get_default_pad+0xc4>
     872:	2902      	cmp	r1, #2
     874:	d006      	beq.n	884 <_sercom_get_default_pad+0xcc>
     876:	2903      	cmp	r1, #3
     878:	d006      	beq.n	888 <_sercom_get_default_pad+0xd0>
     87a:	e001      	b.n	880 <_sercom_get_default_pad+0xc8>
     87c:	4824      	ldr	r0, [pc, #144]	; (910 <_sercom_get_default_pad+0x158>)
     87e:	e023      	b.n	8c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     880:	2000      	movs	r0, #0
     882:	e021      	b.n	8c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     884:	4823      	ldr	r0, [pc, #140]	; (914 <_sercom_get_default_pad+0x15c>)
     886:	e01f      	b.n	8c8 <_sercom_get_default_pad+0x110>
     888:	4823      	ldr	r0, [pc, #140]	; (918 <_sercom_get_default_pad+0x160>)
     88a:	e01d      	b.n	8c8 <_sercom_get_default_pad+0x110>
     88c:	2901      	cmp	r1, #1
     88e:	d01a      	beq.n	8c6 <_sercom_get_default_pad+0x10e>
     890:	2900      	cmp	r1, #0
     892:	d004      	beq.n	89e <_sercom_get_default_pad+0xe6>
     894:	2902      	cmp	r1, #2
     896:	d006      	beq.n	8a6 <_sercom_get_default_pad+0xee>
     898:	2903      	cmp	r1, #3
     89a:	d006      	beq.n	8aa <_sercom_get_default_pad+0xf2>
     89c:	e001      	b.n	8a2 <_sercom_get_default_pad+0xea>
     89e:	481f      	ldr	r0, [pc, #124]	; (91c <_sercom_get_default_pad+0x164>)
     8a0:	e012      	b.n	8c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     8a2:	2000      	movs	r0, #0
     8a4:	e010      	b.n	8c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8a6:	481e      	ldr	r0, [pc, #120]	; (920 <_sercom_get_default_pad+0x168>)
     8a8:	e00e      	b.n	8c8 <_sercom_get_default_pad+0x110>
     8aa:	481e      	ldr	r0, [pc, #120]	; (924 <_sercom_get_default_pad+0x16c>)
     8ac:	e00c      	b.n	8c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     8ae:	2000      	movs	r0, #0
     8b0:	e00a      	b.n	8c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8b2:	481d      	ldr	r0, [pc, #116]	; (928 <_sercom_get_default_pad+0x170>)
     8b4:	e008      	b.n	8c8 <_sercom_get_default_pad+0x110>
     8b6:	481d      	ldr	r0, [pc, #116]	; (92c <_sercom_get_default_pad+0x174>)
     8b8:	e006      	b.n	8c8 <_sercom_get_default_pad+0x110>
     8ba:	481d      	ldr	r0, [pc, #116]	; (930 <_sercom_get_default_pad+0x178>)
     8bc:	e004      	b.n	8c8 <_sercom_get_default_pad+0x110>
     8be:	481d      	ldr	r0, [pc, #116]	; (934 <_sercom_get_default_pad+0x17c>)
     8c0:	e002      	b.n	8c8 <_sercom_get_default_pad+0x110>
     8c2:	481d      	ldr	r0, [pc, #116]	; (938 <_sercom_get_default_pad+0x180>)
     8c4:	e000      	b.n	8c8 <_sercom_get_default_pad+0x110>
     8c6:	481d      	ldr	r0, [pc, #116]	; (93c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     8c8:	4770      	bx	lr
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	42001000 	.word	0x42001000
     8d0:	42000800 	.word	0x42000800
     8d4:	42000c00 	.word	0x42000c00
     8d8:	42001800 	.word	0x42001800
     8dc:	42001c00 	.word	0x42001c00
     8e0:	42001400 	.word	0x42001400
     8e4:	00040003 	.word	0x00040003
     8e8:	00060003 	.word	0x00060003
     8ec:	00070003 	.word	0x00070003
     8f0:	001e0003 	.word	0x001e0003
     8f4:	001f0003 	.word	0x001f0003
     8f8:	000c0002 	.word	0x000c0002
     8fc:	000e0002 	.word	0x000e0002
     900:	000f0002 	.word	0x000f0002
     904:	00100003 	.word	0x00100003
     908:	00120003 	.word	0x00120003
     90c:	00130003 	.word	0x00130003
     910:	00530005 	.word	0x00530005
     914:	003e0005 	.word	0x003e0005
     918:	00520005 	.word	0x00520005
     91c:	00160003 	.word	0x00160003
     920:	00180003 	.word	0x00180003
     924:	00190003 	.word	0x00190003
     928:	00050003 	.word	0x00050003
     92c:	00010003 	.word	0x00010003
     930:	000d0002 	.word	0x000d0002
     934:	00110003 	.word	0x00110003
     938:	003f0005 	.word	0x003f0005
     93c:	00170003 	.word	0x00170003

00000940 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     940:	b570      	push	{r4, r5, r6, lr}
     942:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     944:	4a0c      	ldr	r2, [pc, #48]	; (978 <_sercom_get_sercom_inst_index+0x38>)
     946:	466b      	mov	r3, sp
     948:	ca70      	ldmia	r2!, {r4, r5, r6}
     94a:	c370      	stmia	r3!, {r4, r5, r6}
     94c:	ca32      	ldmia	r2!, {r1, r4, r5}
     94e:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     950:	9e00      	ldr	r6, [sp, #0]
     952:	4286      	cmp	r6, r0
     954:	d006      	beq.n	964 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     956:	2301      	movs	r3, #1
     958:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     95a:	4669      	mov	r1, sp
     95c:	5852      	ldr	r2, [r2, r1]
     95e:	4282      	cmp	r2, r0
     960:	d103      	bne.n	96a <_sercom_get_sercom_inst_index+0x2a>
     962:	e000      	b.n	966 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     964:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     966:	b2d8      	uxtb	r0, r3
     968:	e003      	b.n	972 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     96a:	3301      	adds	r3, #1
     96c:	2b06      	cmp	r3, #6
     96e:	d1f3      	bne.n	958 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     970:	2000      	movs	r0, #0
}
     972:	b006      	add	sp, #24
     974:	bd70      	pop	{r4, r5, r6, pc}
     976:	46c0      	nop			; (mov r8, r8)
     978:	00003e50 	.word	0x00003e50

0000097c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     97c:	4770      	bx	lr
     97e:	46c0      	nop			; (mov r8, r8)

00000980 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     980:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     982:	4b0a      	ldr	r3, [pc, #40]	; (9ac <_sercom_set_handler+0x2c>)
     984:	781b      	ldrb	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d10c      	bne.n	9a4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     98a:	4f09      	ldr	r7, [pc, #36]	; (9b0 <_sercom_set_handler+0x30>)
     98c:	4e09      	ldr	r6, [pc, #36]	; (9b4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     98e:	4d0a      	ldr	r5, [pc, #40]	; (9b8 <_sercom_set_handler+0x38>)
     990:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     992:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     994:	195a      	adds	r2, r3, r5
     996:	6014      	str	r4, [r2, #0]
     998:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     99a:	2b18      	cmp	r3, #24
     99c:	d1f9      	bne.n	992 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     99e:	2201      	movs	r2, #1
     9a0:	4b02      	ldr	r3, [pc, #8]	; (9ac <_sercom_set_handler+0x2c>)
     9a2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     9a4:	0080      	lsls	r0, r0, #2
     9a6:	4b02      	ldr	r3, [pc, #8]	; (9b0 <_sercom_set_handler+0x30>)
     9a8:	50c1      	str	r1, [r0, r3]
}
     9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ac:	200000cc 	.word	0x200000cc
     9b0:	200000d0 	.word	0x200000d0
     9b4:	0000097d 	.word	0x0000097d
     9b8:	20003d4c 	.word	0x20003d4c

000009bc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     9bc:	b510      	push	{r4, lr}
     9be:	b082      	sub	sp, #8
     9c0:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9c2:	4668      	mov	r0, sp
     9c4:	4905      	ldr	r1, [pc, #20]	; (9dc <_sercom_get_interrupt_vector+0x20>)
     9c6:	2206      	movs	r2, #6
     9c8:	4b05      	ldr	r3, [pc, #20]	; (9e0 <_sercom_get_interrupt_vector+0x24>)
     9ca:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     9cc:	1c20      	adds	r0, r4, #0
     9ce:	4b05      	ldr	r3, [pc, #20]	; (9e4 <_sercom_get_interrupt_vector+0x28>)
     9d0:	4798      	blx	r3

=======
     43a:	780a      	ldrb	r2, [r1, #0]
     43c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     43e:	784a      	ldrb	r2, [r1, #1]
     440:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     442:	788a      	ldrb	r2, [r1, #2]
     444:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     446:	1c19      	adds	r1, r3, #0
     448:	4b01      	ldr	r3, [pc, #4]	; (450 <port_pin_set_config+0x20>)
     44a:	4798      	blx	r3
}
     44c:	b003      	add	sp, #12
     44e:	bd00      	pop	{pc}
     450:	000009e9 	.word	0x000009e9

00000454 <SERCOM0_Handler>:
>>>>>>> JJ's_Branch
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     9d2:	466b      	mov	r3, sp
     9d4:	5618      	ldrsb	r0, [r3, r0]
}
     9d6:	b002      	add	sp, #8
     9d8:	bd10      	pop	{r4, pc}
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	00003e68 	.word	0x00003e68
     9e0:	00002f29 	.word	0x00002f29
     9e4:	00000941 	.word	0x00000941

000009e8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
<<<<<<< HEAD
     9e8:	b508      	push	{r3, lr}
     9ea:	4b02      	ldr	r3, [pc, #8]	; (9f4 <SERCOM0_Handler+0xc>)
     9ec:	681b      	ldr	r3, [r3, #0]
     9ee:	2000      	movs	r0, #0
     9f0:	4798      	blx	r3
     9f2:	bd08      	pop	{r3, pc}
     9f4:	200000d0 	.word	0x200000d0

000009f8 <SERCOM1_Handler>:
     9f8:	b508      	push	{r3, lr}
     9fa:	4b02      	ldr	r3, [pc, #8]	; (a04 <SERCOM1_Handler+0xc>)
     9fc:	685b      	ldr	r3, [r3, #4]
     9fe:	2001      	movs	r0, #1
     a00:	4798      	blx	r3
     a02:	bd08      	pop	{r3, pc}
     a04:	200000d0 	.word	0x200000d0

00000a08 <SERCOM2_Handler>:
     a08:	b508      	push	{r3, lr}
     a0a:	4b02      	ldr	r3, [pc, #8]	; (a14 <SERCOM2_Handler+0xc>)
     a0c:	689b      	ldr	r3, [r3, #8]
     a0e:	2002      	movs	r0, #2
     a10:	4798      	blx	r3
     a12:	bd08      	pop	{r3, pc}
     a14:	200000d0 	.word	0x200000d0

00000a18 <SERCOM3_Handler>:
     a18:	b508      	push	{r3, lr}
     a1a:	4b02      	ldr	r3, [pc, #8]	; (a24 <SERCOM3_Handler+0xc>)
     a1c:	68db      	ldr	r3, [r3, #12]
     a1e:	2003      	movs	r0, #3
     a20:	4798      	blx	r3
     a22:	bd08      	pop	{r3, pc}
     a24:	200000d0 	.word	0x200000d0

00000a28 <SERCOM4_Handler>:
     a28:	b508      	push	{r3, lr}
     a2a:	4b02      	ldr	r3, [pc, #8]	; (a34 <SERCOM4_Handler+0xc>)
     a2c:	691b      	ldr	r3, [r3, #16]
     a2e:	2004      	movs	r0, #4
     a30:	4798      	blx	r3
     a32:	bd08      	pop	{r3, pc}
     a34:	200000d0 	.word	0x200000d0

00000a38 <SERCOM5_Handler>:
     a38:	b508      	push	{r3, lr}
     a3a:	4b02      	ldr	r3, [pc, #8]	; (a44 <SERCOM5_Handler+0xc>)
     a3c:	695b      	ldr	r3, [r3, #20]
     a3e:	2005      	movs	r0, #5
     a40:	4798      	blx	r3
     a42:	bd08      	pop	{r3, pc}
     a44:	200000d0 	.word	0x200000d0

00000a48 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a48:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4a:	465f      	mov	r7, fp
     a4c:	4656      	mov	r6, sl
     a4e:	464d      	mov	r5, r9
     a50:	4644      	mov	r4, r8
     a52:	b4f0      	push	{r4, r5, r6, r7}
     a54:	b091      	sub	sp, #68	; 0x44
     a56:	1c05      	adds	r5, r0, #0
     a58:	1c0c      	adds	r4, r1, #0
     a5a:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a5c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a5e:	1c08      	adds	r0, r1, #0
     a60:	4bad      	ldr	r3, [pc, #692]	; (d18 <usart_init+0x2d0>)
     a62:	4798      	blx	r3
     a64:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a66:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a68:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a6a:	07d9      	lsls	r1, r3, #31
     a6c:	d500      	bpl.n	a70 <usart_init+0x28>
     a6e:	e14b      	b.n	d08 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a70:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     a72:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a74:	079f      	lsls	r7, r3, #30
     a76:	d500      	bpl.n	a7a <usart_init+0x32>
     a78:	e146      	b.n	d08 <usart_init+0x2c0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a7a:	4ba8      	ldr	r3, [pc, #672]	; (d1c <usart_init+0x2d4>)
     a7c:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a7e:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a80:	2701      	movs	r7, #1
     a82:	408f      	lsls	r7, r1
     a84:	1c39      	adds	r1, r7, #0
     a86:	4301      	orrs	r1, r0
     a88:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     a8a:	a90f      	add	r1, sp, #60	; 0x3c
     a8c:	272d      	movs	r7, #45	; 0x2d
     a8e:	5df3      	ldrb	r3, [r6, r7]
     a90:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a92:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a94:	b2d2      	uxtb	r2, r2
     a96:	4690      	mov	r8, r2
     a98:	1c10      	adds	r0, r2, #0
     a9a:	4ba1      	ldr	r3, [pc, #644]	; (d20 <usart_init+0x2d8>)
     a9c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a9e:	4640      	mov	r0, r8
     aa0:	4ba0      	ldr	r3, [pc, #640]	; (d24 <usart_init+0x2dc>)
     aa2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     aa4:	5df0      	ldrb	r0, [r6, r7]
     aa6:	2100      	movs	r1, #0
     aa8:	4b9f      	ldr	r3, [pc, #636]	; (d28 <usart_init+0x2e0>)
     aaa:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     aac:	7af3      	ldrb	r3, [r6, #11]
     aae:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     ab0:	2324      	movs	r3, #36	; 0x24
     ab2:	5cf3      	ldrb	r3, [r6, r3]
     ab4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     ab6:	2325      	movs	r3, #37	; 0x25
     ab8:	5cf3      	ldrb	r3, [r6, r3]
     aba:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     abc:	7ef3      	ldrb	r3, [r6, #27]
     abe:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     ac0:	7f33      	ldrb	r3, [r6, #28]
     ac2:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ac4:	6829      	ldr	r1, [r5, #0]
     ac6:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ac8:	1c08      	adds	r0, r1, #0
     aca:	4b93      	ldr	r3, [pc, #588]	; (d18 <usart_init+0x2d0>)
     acc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ace:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     ad0:	2200      	movs	r2, #0
     ad2:	466b      	mov	r3, sp
     ad4:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     ad6:	8a32      	ldrh	r2, [r6, #16]
     ad8:	9202      	str	r2, [sp, #8]
     ada:	2380      	movs	r3, #128	; 0x80
     adc:	01db      	lsls	r3, r3, #7
     ade:	429a      	cmp	r2, r3
     ae0:	d021      	beq.n	b26 <usart_init+0xde>
     ae2:	2380      	movs	r3, #128	; 0x80
     ae4:	01db      	lsls	r3, r3, #7
     ae6:	429a      	cmp	r2, r3
     ae8:	d804      	bhi.n	af4 <usart_init+0xac>
     aea:	2380      	movs	r3, #128	; 0x80
     aec:	019b      	lsls	r3, r3, #6
     aee:	429a      	cmp	r2, r3
     af0:	d011      	beq.n	b16 <usart_init+0xce>
     af2:	e008      	b.n	b06 <usart_init+0xbe>
     af4:	23c0      	movs	r3, #192	; 0xc0
     af6:	01db      	lsls	r3, r3, #7
     af8:	9f02      	ldr	r7, [sp, #8]
     afa:	429f      	cmp	r7, r3
     afc:	d00f      	beq.n	b1e <usart_init+0xd6>
     afe:	2380      	movs	r3, #128	; 0x80
     b00:	021b      	lsls	r3, r3, #8
     b02:	429f      	cmp	r7, r3
     b04:	d003      	beq.n	b0e <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b06:	2710      	movs	r7, #16
     b08:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b0a:	2700      	movs	r7, #0
     b0c:	e00e      	b.n	b2c <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b0e:	2703      	movs	r7, #3
     b10:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b12:	2700      	movs	r7, #0
     b14:	e00a      	b.n	b2c <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b16:	2710      	movs	r7, #16
     b18:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b1a:	2701      	movs	r7, #1
     b1c:	e006      	b.n	b2c <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b1e:	2708      	movs	r7, #8
     b20:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b22:	2701      	movs	r7, #1
     b24:	e002      	b.n	b2c <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b26:	2708      	movs	r7, #8
     b28:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b2a:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b2c:	6831      	ldr	r1, [r6, #0]
     b2e:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     b30:	68f2      	ldr	r2, [r6, #12]
     b32:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     b34:	6973      	ldr	r3, [r6, #20]
     b36:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b38:	7e31      	ldrb	r1, [r6, #24]
     b3a:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b3c:	2326      	movs	r3, #38	; 0x26
     b3e:	5cf3      	ldrb	r3, [r6, r3]
     b40:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     b42:	6873      	ldr	r3, [r6, #4]
     b44:	2b00      	cmp	r3, #0
     b46:	d013      	beq.n	b70 <usart_init+0x128>
     b48:	2280      	movs	r2, #128	; 0x80
     b4a:	0552      	lsls	r2, r2, #21
     b4c:	4293      	cmp	r3, r2
     b4e:	d12e      	bne.n	bae <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     b50:	2327      	movs	r3, #39	; 0x27
     b52:	5cf3      	ldrb	r3, [r6, r3]
     b54:	2b00      	cmp	r3, #0
     b56:	d12e      	bne.n	bb6 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     b58:	6a37      	ldr	r7, [r6, #32]
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	4b73      	ldr	r3, [pc, #460]	; (d2c <usart_init+0x2e4>)
     b5e:	4798      	blx	r3
     b60:	1c01      	adds	r1, r0, #0
     b62:	1c38      	adds	r0, r7, #0
     b64:	466a      	mov	r2, sp
     b66:	3226      	adds	r2, #38	; 0x26
     b68:	4b71      	ldr	r3, [pc, #452]	; (d30 <usart_init+0x2e8>)
     b6a:	4798      	blx	r3
     b6c:	1c03      	adds	r3, r0, #0
     b6e:	e01f      	b.n	bb0 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     b70:	2327      	movs	r3, #39	; 0x27
     b72:	5cf3      	ldrb	r3, [r6, r3]
     b74:	2b00      	cmp	r3, #0
     b76:	d00a      	beq.n	b8e <usart_init+0x146>
				status_code =
     b78:	9a06      	ldr	r2, [sp, #24]
     b7a:	9200      	str	r2, [sp, #0]
     b7c:	6a30      	ldr	r0, [r6, #32]
     b7e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     b80:	466a      	mov	r2, sp
     b82:	3226      	adds	r2, #38	; 0x26
     b84:	1c3b      	adds	r3, r7, #0
     b86:	4f6b      	ldr	r7, [pc, #428]	; (d34 <usart_init+0x2ec>)
     b88:	47b8      	blx	r7
     b8a:	1c03      	adds	r3, r0, #0
     b8c:	e010      	b.n	bb0 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     b8e:	6a31      	ldr	r1, [r6, #32]
     b90:	9107      	str	r1, [sp, #28]
     b92:	b2c0      	uxtb	r0, r0
     b94:	4b65      	ldr	r3, [pc, #404]	; (d2c <usart_init+0x2e4>)
     b96:	4798      	blx	r3
     b98:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     b9a:	9a06      	ldr	r2, [sp, #24]
     b9c:	9200      	str	r2, [sp, #0]
     b9e:	9807      	ldr	r0, [sp, #28]
     ba0:	466a      	mov	r2, sp
     ba2:	3226      	adds	r2, #38	; 0x26
     ba4:	1c3b      	adds	r3, r7, #0
     ba6:	4f63      	ldr	r7, [pc, #396]	; (d34 <usart_init+0x2ec>)
     ba8:	47b8      	blx	r7
     baa:	1c03      	adds	r3, r0, #0
     bac:	e000      	b.n	bb0 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     bae:	2300      	movs	r3, #0
     bb0:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     bb2:	d000      	beq.n	bb6 <usart_init+0x16e>
     bb4:	e0a8      	b.n	d08 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     bb6:	7e73      	ldrb	r3, [r6, #25]
     bb8:	2b00      	cmp	r3, #0
     bba:	d002      	beq.n	bc2 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     bbc:	7eb3      	ldrb	r3, [r6, #26]
     bbe:	4641      	mov	r1, r8
     bc0:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bc2:	682a      	ldr	r2, [r5, #0]
     bc4:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bc6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     bc8:	2b00      	cmp	r3, #0
     bca:	d1fc      	bne.n	bc6 <usart_init+0x17e>
     bcc:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     bce:	466b      	mov	r3, sp
     bd0:	3326      	adds	r3, #38	; 0x26
     bd2:	881b      	ldrh	r3, [r3, #0]
     bd4:	4642      	mov	r2, r8
     bd6:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     bd8:	464b      	mov	r3, r9
     bda:	9f03      	ldr	r7, [sp, #12]
     bdc:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     bde:	9f04      	ldr	r7, [sp, #16]
     be0:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     be2:	6871      	ldr	r1, [r6, #4]
     be4:	430b      	orrs	r3, r1
		config->sample_rate |
     be6:	9f02      	ldr	r7, [sp, #8]
     be8:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bea:	4652      	mov	r2, sl
     bec:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     bee:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bf0:	4659      	mov	r1, fp
     bf2:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     bf4:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     bf6:	2327      	movs	r3, #39	; 0x27
     bf8:	5cf3      	ldrb	r3, [r6, r3]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d101      	bne.n	c02 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     bfe:	2304      	movs	r3, #4
     c00:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c02:	7e71      	ldrb	r1, [r6, #25]
     c04:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c06:	7f33      	ldrb	r3, [r6, #28]
     c08:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     c0a:	4319      	orrs	r1, r3
     c0c:	7af2      	ldrb	r2, [r6, #11]
     c0e:	7ab3      	ldrb	r3, [r6, #10]
     c10:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c12:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c14:	7f73      	ldrb	r3, [r6, #29]
     c16:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c18:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c1a:	2324      	movs	r3, #36	; 0x24
     c1c:	5cf3      	ldrb	r3, [r6, r3]
     c1e:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c20:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c22:	2325      	movs	r3, #37	; 0x25
     c24:	5cf3      	ldrb	r3, [r6, r3]
     c26:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     c28:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     c2a:	8933      	ldrh	r3, [r6, #8]
     c2c:	2bff      	cmp	r3, #255	; 0xff
     c2e:	d00b      	beq.n	c48 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c30:	7ef2      	ldrb	r2, [r6, #27]
     c32:	2a00      	cmp	r2, #0
     c34:	d003      	beq.n	c3e <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     c36:	22a0      	movs	r2, #160	; 0xa0
     c38:	04d2      	lsls	r2, r2, #19
     c3a:	4317      	orrs	r7, r2
     c3c:	e002      	b.n	c44 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c3e:	2280      	movs	r2, #128	; 0x80
     c40:	0452      	lsls	r2, r2, #17
     c42:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     c44:	4319      	orrs	r1, r3
     c46:	e005      	b.n	c54 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     c48:	7ef3      	ldrb	r3, [r6, #27]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d002      	beq.n	c54 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c4e:	2380      	movs	r3, #128	; 0x80
     c50:	04db      	lsls	r3, r3, #19
     c52:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     c54:	232c      	movs	r3, #44	; 0x2c
     c56:	5cf3      	ldrb	r3, [r6, r3]
     c58:	2b00      	cmp	r3, #0
     c5a:	d103      	bne.n	c64 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c5c:	4b36      	ldr	r3, [pc, #216]	; (d38 <usart_init+0x2f0>)
     c5e:	789b      	ldrb	r3, [r3, #2]
     c60:	079a      	lsls	r2, r3, #30
     c62:	d501      	bpl.n	c68 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c64:	2380      	movs	r3, #128	; 0x80
     c66:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c68:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c6a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     c6c:	2b00      	cmp	r3, #0
     c6e:	d1fc      	bne.n	c6a <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     c70:	4643      	mov	r3, r8
     c72:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     c74:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c76:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     c78:	2b00      	cmp	r3, #0
     c7a:	d1fc      	bne.n	c76 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     c7c:	4641      	mov	r1, r8
     c7e:	600f      	str	r7, [r1, #0]
     c80:	ab0e      	add	r3, sp, #56	; 0x38
     c82:	2280      	movs	r2, #128	; 0x80
     c84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c86:	2200      	movs	r2, #0
     c88:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c8a:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c8c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     c8e:	6b32      	ldr	r2, [r6, #48]	; 0x30
     c90:	920a      	str	r2, [sp, #40]	; 0x28
     c92:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c94:	930b      	str	r3, [sp, #44]	; 0x2c
     c96:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     c98:	970c      	str	r7, [sp, #48]	; 0x30
     c9a:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     c9c:	960d      	str	r6, [sp, #52]	; 0x34
     c9e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ca0:	ae0e      	add	r6, sp, #56	; 0x38
     ca2:	b2f9      	uxtb	r1, r7
     ca4:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ca6:	aa0a      	add	r2, sp, #40	; 0x28
     ca8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     caa:	2800      	cmp	r0, #0
     cac:	d102      	bne.n	cb4 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     cae:	1c20      	adds	r0, r4, #0
     cb0:	4a22      	ldr	r2, [pc, #136]	; (d3c <usart_init+0x2f4>)
     cb2:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     cb4:	1c43      	adds	r3, r0, #1
     cb6:	d005      	beq.n	cc4 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cb8:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cba:	0c00      	lsrs	r0, r0, #16
     cbc:	b2c0      	uxtb	r0, r0
     cbe:	1c31      	adds	r1, r6, #0
     cc0:	4a1f      	ldr	r2, [pc, #124]	; (d40 <usart_init+0x2f8>)
     cc2:	4790      	blx	r2
     cc4:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     cc6:	2f04      	cmp	r7, #4
     cc8:	d1eb      	bne.n	ca2 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     cca:	2300      	movs	r3, #0
     ccc:	60eb      	str	r3, [r5, #12]
     cce:	612b      	str	r3, [r5, #16]
     cd0:	616b      	str	r3, [r5, #20]
     cd2:	61ab      	str	r3, [r5, #24]
     cd4:	61eb      	str	r3, [r5, #28]
     cd6:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     cd8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     cda:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     cdc:	2200      	movs	r2, #0
     cde:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     ce0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     ce2:	2330      	movs	r3, #48	; 0x30
     ce4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ce6:	2331      	movs	r3, #49	; 0x31
     ce8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     cea:	2332      	movs	r3, #50	; 0x32
     cec:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     cee:	2333      	movs	r3, #51	; 0x33
     cf0:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     cf2:	6828      	ldr	r0, [r5, #0]
     cf4:	4b08      	ldr	r3, [pc, #32]	; (d18 <usart_init+0x2d0>)
     cf6:	4798      	blx	r3
     cf8:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     cfa:	4912      	ldr	r1, [pc, #72]	; (d44 <usart_init+0x2fc>)
     cfc:	4b12      	ldr	r3, [pc, #72]	; (d48 <usart_init+0x300>)
     cfe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     d00:	00a4      	lsls	r4, r4, #2
     d02:	4b12      	ldr	r3, [pc, #72]	; (d4c <usart_init+0x304>)
     d04:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     d06:	2000      	movs	r0, #0
}
     d08:	b011      	add	sp, #68	; 0x44
     d0a:	bc3c      	pop	{r2, r3, r4, r5}
     d0c:	4690      	mov	r8, r2
     d0e:	4699      	mov	r9, r3
     d10:	46a2      	mov	sl, r4
     d12:	46ab      	mov	fp, r5
     d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	00000941 	.word	0x00000941
     d1c:	40000400 	.word	0x40000400
     d20:	000013e9 	.word	0x000013e9
     d24:	0000135d 	.word	0x0000135d
     d28:	00000769 	.word	0x00000769
     d2c:	00001405 	.word	0x00001405
     d30:	0000058d 	.word	0x0000058d
     d34:	000005b9 	.word	0x000005b9
     d38:	41002000 	.word	0x41002000
     d3c:	000007b9 	.word	0x000007b9
     d40:	000014c5 	.word	0x000014c5
     d44:	00000df5 	.word	0x00000df5
     d48:	00000981 	.word	0x00000981
     d4c:	20003d4c 	.word	0x20003d4c

00000d50 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     d50:	b510      	push	{r4, lr}
     d52:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d54:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d56:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     d58:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d5a:	2c00      	cmp	r4, #0
     d5c:	d00d      	beq.n	d7a <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     d5e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
     d60:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     d62:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     d64:	2a00      	cmp	r2, #0
     d66:	d108      	bne.n	d7a <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d68:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d6a:	2a00      	cmp	r2, #0
     d6c:	d1fc      	bne.n	d68 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     d6e:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     d70:	2102      	movs	r1, #2
     d72:	7e1a      	ldrb	r2, [r3, #24]
     d74:	420a      	tst	r2, r1
     d76:	d0fc      	beq.n	d72 <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     d78:	2000      	movs	r0, #0
}
     d7a:	bd10      	pop	{r4, pc}

00000d7c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     d7c:	b510      	push	{r4, lr}
     d7e:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     d80:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     d82:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     d84:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     d86:	2a00      	cmp	r2, #0
     d88:	d033      	beq.n	df2 <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     d8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     d8c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     d8e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     d90:	2b00      	cmp	r3, #0
     d92:	d12e      	bne.n	df2 <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     d94:	7e23      	ldrb	r3, [r4, #24]
     d96:	075a      	lsls	r2, r3, #29
     d98:	d52b      	bpl.n	df2 <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d9a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     d9c:	2b00      	cmp	r3, #0
     d9e:	d1fc      	bne.n	d9a <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     da0:	8b63      	ldrh	r3, [r4, #26]
     da2:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     da4:	069a      	lsls	r2, r3, #26
     da6:	d021      	beq.n	dec <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     da8:	079a      	lsls	r2, r3, #30
     daa:	d503      	bpl.n	db4 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     dac:	2302      	movs	r3, #2
     dae:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     db0:	201a      	movs	r0, #26
     db2:	e01e      	b.n	df2 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     db4:	075a      	lsls	r2, r3, #29
     db6:	d503      	bpl.n	dc0 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     db8:	2304      	movs	r3, #4
     dba:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     dbc:	201e      	movs	r0, #30
     dbe:	e018      	b.n	df2 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     dc0:	07da      	lsls	r2, r3, #31
     dc2:	d503      	bpl.n	dcc <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     dc4:	2301      	movs	r3, #1
     dc6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     dc8:	2013      	movs	r0, #19
     dca:	e012      	b.n	df2 <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     dcc:	06da      	lsls	r2, r3, #27
     dce:	d505      	bpl.n	ddc <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     dd0:	8b62      	ldrh	r2, [r4, #26]
     dd2:	2310      	movs	r3, #16
     dd4:	4313      	orrs	r3, r2
     dd6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     dd8:	2042      	movs	r0, #66	; 0x42
     dda:	e00a      	b.n	df2 <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ddc:	069a      	lsls	r2, r3, #26
     dde:	d505      	bpl.n	dec <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     de0:	8b62      	ldrh	r2, [r4, #26]
     de2:	2320      	movs	r3, #32
     de4:	4313      	orrs	r3, r2
     de6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     de8:	2041      	movs	r0, #65	; 0x41
     dea:	e002      	b.n	df2 <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     dec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     dee:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     df0:	2000      	movs	r0, #0
}
     df2:	bd10      	pop	{r4, pc}

00000df4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     df6:	0080      	lsls	r0, r0, #2
     df8:	4b64      	ldr	r3, [pc, #400]	; (f8c <_usart_interrupt_handler+0x198>)
     dfa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     dfc:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     dfe:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     e00:	2b00      	cmp	r3, #0
     e02:	d1fc      	bne.n	dfe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     e04:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     e06:	7da6      	ldrb	r6, [r4, #22]
     e08:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     e0a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     e0c:	5ceb      	ldrb	r3, [r5, r3]
     e0e:	2230      	movs	r2, #48	; 0x30
     e10:	5caf      	ldrb	r7, [r5, r2]
     e12:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     e14:	07f1      	lsls	r1, r6, #31
     e16:	d520      	bpl.n	e5a <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
     e18:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e1a:	b29b      	uxth	r3, r3
     e1c:	2b00      	cmp	r3, #0
     e1e:	d01a      	beq.n	e56 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e20:	6aab      	ldr	r3, [r5, #40]	; 0x28
     e22:	781a      	ldrb	r2, [r3, #0]
     e24:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     e26:	1c59      	adds	r1, r3, #1
     e28:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e2a:	7969      	ldrb	r1, [r5, #5]
     e2c:	2901      	cmp	r1, #1
     e2e:	d104      	bne.n	e3a <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e30:	7859      	ldrb	r1, [r3, #1]
     e32:	0209      	lsls	r1, r1, #8
     e34:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     e36:	3302      	adds	r3, #2
     e38:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e3a:	05d3      	lsls	r3, r2, #23
     e3c:	0ddb      	lsrs	r3, r3, #23
     e3e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     e40:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e42:	3b01      	subs	r3, #1
     e44:	b29b      	uxth	r3, r3
     e46:	85eb      	strh	r3, [r5, #46]	; 0x2e
     e48:	2b00      	cmp	r3, #0
     e4a:	d106      	bne.n	e5a <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e4c:	2301      	movs	r3, #1
     e4e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     e50:	2302      	movs	r3, #2
     e52:	75a3      	strb	r3, [r4, #22]
     e54:	e001      	b.n	e5a <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e56:	2301      	movs	r3, #1
     e58:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e5a:	07b2      	lsls	r2, r6, #30
     e5c:	d509      	bpl.n	e72 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     e5e:	2302      	movs	r3, #2
     e60:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     e62:	2200      	movs	r2, #0
     e64:	2333      	movs	r3, #51	; 0x33
     e66:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     e68:	07fb      	lsls	r3, r7, #31
     e6a:	d502      	bpl.n	e72 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     e6c:	1c28      	adds	r0, r5, #0
     e6e:	68e9      	ldr	r1, [r5, #12]
     e70:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     e72:	0772      	lsls	r2, r6, #29
     e74:	d56a      	bpl.n	f4c <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
     e76:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     e78:	b29b      	uxth	r3, r3
     e7a:	2b00      	cmp	r3, #0
     e7c:	d064      	beq.n	f48 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e7e:	8b63      	ldrh	r3, [r4, #26]
     e80:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     e82:	0719      	lsls	r1, r3, #28
     e84:	d402      	bmi.n	e8c <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e86:	223f      	movs	r2, #63	; 0x3f
     e88:	4013      	ands	r3, r2
     e8a:	e001      	b.n	e90 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     e8c:	2237      	movs	r2, #55	; 0x37
     e8e:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     e90:	2b00      	cmp	r3, #0
     e92:	d037      	beq.n	f04 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     e94:	079a      	lsls	r2, r3, #30
     e96:	d507      	bpl.n	ea8 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     e98:	221a      	movs	r2, #26
     e9a:	2332      	movs	r3, #50	; 0x32
     e9c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     e9e:	8b62      	ldrh	r2, [r4, #26]
     ea0:	2302      	movs	r3, #2
     ea2:	4313      	orrs	r3, r2
     ea4:	8363      	strh	r3, [r4, #26]
     ea6:	e027      	b.n	ef8 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ea8:	0759      	lsls	r1, r3, #29
     eaa:	d507      	bpl.n	ebc <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     eac:	221e      	movs	r2, #30
     eae:	2332      	movs	r3, #50	; 0x32
     eb0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     eb2:	8b62      	ldrh	r2, [r4, #26]
     eb4:	2304      	movs	r3, #4
     eb6:	4313      	orrs	r3, r2
     eb8:	8363      	strh	r3, [r4, #26]
     eba:	e01d      	b.n	ef8 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ebc:	07da      	lsls	r2, r3, #31
     ebe:	d507      	bpl.n	ed0 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     ec0:	2213      	movs	r2, #19
     ec2:	2332      	movs	r3, #50	; 0x32
     ec4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     ec6:	8b62      	ldrh	r2, [r4, #26]
     ec8:	2301      	movs	r3, #1
     eca:	4313      	orrs	r3, r2
     ecc:	8363      	strh	r3, [r4, #26]
     ece:	e013      	b.n	ef8 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     ed0:	06d9      	lsls	r1, r3, #27
     ed2:	d507      	bpl.n	ee4 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     ed4:	2242      	movs	r2, #66	; 0x42
     ed6:	2332      	movs	r3, #50	; 0x32
     ed8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     eda:	8b62      	ldrh	r2, [r4, #26]
     edc:	2310      	movs	r3, #16
     ede:	4313      	orrs	r3, r2
     ee0:	8363      	strh	r3, [r4, #26]
     ee2:	e009      	b.n	ef8 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     ee4:	2220      	movs	r2, #32
     ee6:	421a      	tst	r2, r3
     ee8:	d006      	beq.n	ef8 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     eea:	2241      	movs	r2, #65	; 0x41
     eec:	2332      	movs	r3, #50	; 0x32
     eee:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     ef0:	8b62      	ldrh	r2, [r4, #26]
     ef2:	2320      	movs	r3, #32
     ef4:	4313      	orrs	r3, r2
     ef6:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     ef8:	077a      	lsls	r2, r7, #29
     efa:	d527      	bpl.n	f4c <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     efc:	1c28      	adds	r0, r5, #0
     efe:	696b      	ldr	r3, [r5, #20]
     f00:	4798      	blx	r3
     f02:	e023      	b.n	f4c <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     f04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     f06:	05d2      	lsls	r2, r2, #23
     f08:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     f0a:	b2d3      	uxtb	r3, r2
     f0c:	6a69      	ldr	r1, [r5, #36]	; 0x24
     f0e:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     f10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f12:	1c59      	adds	r1, r3, #1
     f14:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f16:	7969      	ldrb	r1, [r5, #5]
     f18:	2901      	cmp	r1, #1
     f1a:	d104      	bne.n	f26 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     f1c:	0a12      	lsrs	r2, r2, #8
     f1e:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     f20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f22:	3301      	adds	r3, #1
     f24:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     f26:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f28:	3b01      	subs	r3, #1
     f2a:	b29b      	uxth	r3, r3
     f2c:	85ab      	strh	r3, [r5, #44]	; 0x2c
     f2e:	2b00      	cmp	r3, #0
     f30:	d10c      	bne.n	f4c <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f32:	2304      	movs	r3, #4
     f34:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     f36:	2200      	movs	r2, #0
     f38:	2332      	movs	r3, #50	; 0x32
     f3a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     f3c:	07ba      	lsls	r2, r7, #30
     f3e:	d505      	bpl.n	f4c <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     f40:	1c28      	adds	r0, r5, #0
     f42:	692b      	ldr	r3, [r5, #16]
     f44:	4798      	blx	r3
     f46:	e001      	b.n	f4c <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f48:	2304      	movs	r3, #4
     f4a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     f4c:	06f1      	lsls	r1, r6, #27
     f4e:	d507      	bpl.n	f60 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     f50:	2310      	movs	r3, #16
     f52:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     f54:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     f56:	06fa      	lsls	r2, r7, #27
     f58:	d502      	bpl.n	f60 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     f5a:	1c28      	adds	r0, r5, #0
     f5c:	69eb      	ldr	r3, [r5, #28]
     f5e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     f60:	06b1      	lsls	r1, r6, #26
     f62:	d507      	bpl.n	f74 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     f64:	2320      	movs	r3, #32
     f66:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     f68:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     f6a:	073a      	lsls	r2, r7, #28
     f6c:	d502      	bpl.n	f74 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     f6e:	1c28      	adds	r0, r5, #0
     f70:	69ab      	ldr	r3, [r5, #24]
     f72:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     f74:	0731      	lsls	r1, r6, #28
     f76:	d507      	bpl.n	f88 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     f78:	2308      	movs	r3, #8
     f7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     f7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     f7e:	06ba      	lsls	r2, r7, #26
     f80:	d502      	bpl.n	f88 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     f82:	6a2b      	ldr	r3, [r5, #32]
     f84:	1c28      	adds	r0, r5, #0
     f86:	4798      	blx	r3
		}
	}
#endif
}
     f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20003d4c 	.word	0x20003d4c

00000f90 <system_clock_source_get_hz>:
=======
     454:	b508      	push	{r3, lr}
     456:	4b02      	ldr	r3, [pc, #8]	; (460 <SERCOM0_Handler+0xc>)
     458:	681b      	ldr	r3, [r3, #0]
     45a:	2000      	movs	r0, #0
     45c:	4798      	blx	r3
     45e:	bd08      	pop	{r3, pc}
     460:	20000094 	.word	0x20000094

00000464 <SERCOM1_Handler>:
     464:	b508      	push	{r3, lr}
     466:	4b02      	ldr	r3, [pc, #8]	; (470 <SERCOM1_Handler+0xc>)
     468:	685b      	ldr	r3, [r3, #4]
     46a:	2001      	movs	r0, #1
     46c:	4798      	blx	r3
     46e:	bd08      	pop	{r3, pc}
     470:	20000094 	.word	0x20000094

00000474 <SERCOM2_Handler>:
     474:	b508      	push	{r3, lr}
     476:	4b02      	ldr	r3, [pc, #8]	; (480 <SERCOM2_Handler+0xc>)
     478:	689b      	ldr	r3, [r3, #8]
     47a:	2002      	movs	r0, #2
     47c:	4798      	blx	r3
     47e:	bd08      	pop	{r3, pc}
     480:	20000094 	.word	0x20000094

00000484 <SERCOM3_Handler>:
     484:	b508      	push	{r3, lr}
     486:	4b02      	ldr	r3, [pc, #8]	; (490 <SERCOM3_Handler+0xc>)
     488:	68db      	ldr	r3, [r3, #12]
     48a:	2003      	movs	r0, #3
     48c:	4798      	blx	r3
     48e:	bd08      	pop	{r3, pc}
     490:	20000094 	.word	0x20000094

00000494 <SERCOM4_Handler>:
     494:	b508      	push	{r3, lr}
     496:	4b02      	ldr	r3, [pc, #8]	; (4a0 <SERCOM4_Handler+0xc>)
     498:	691b      	ldr	r3, [r3, #16]
     49a:	2004      	movs	r0, #4
     49c:	4798      	blx	r3
     49e:	bd08      	pop	{r3, pc}
     4a0:	20000094 	.word	0x20000094

000004a4 <SERCOM5_Handler>:
     4a4:	b508      	push	{r3, lr}
     4a6:	4b02      	ldr	r3, [pc, #8]	; (4b0 <SERCOM5_Handler+0xc>)
     4a8:	695b      	ldr	r3, [r3, #20]
     4aa:	2005      	movs	r0, #5
     4ac:	4798      	blx	r3
     4ae:	bd08      	pop	{r3, pc}
     4b0:	20000094 	.word	0x20000094

000004b4 <system_clock_source_get_hz>:
>>>>>>> JJ's_Branch
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
<<<<<<< HEAD
     f90:	b508      	push	{r3, lr}
	switch (clock_source) {
     f92:	2808      	cmp	r0, #8
     f94:	d834      	bhi.n	1000 <system_clock_source_get_hz+0x70>
     f96:	0080      	lsls	r0, r0, #2
     f98:	4b1b      	ldr	r3, [pc, #108]	; (1008 <system_clock_source_get_hz+0x78>)
     f9a:	581b      	ldr	r3, [r3, r0]
     f9c:	469f      	mov	pc, r3
=======
     4b4:	b508      	push	{r3, lr}
	switch (clock_source) {
     4b6:	2808      	cmp	r0, #8
     4b8:	d834      	bhi.n	524 <system_clock_source_get_hz+0x70>
     4ba:	0080      	lsls	r0, r0, #2
     4bc:	4b1b      	ldr	r3, [pc, #108]	; (52c <system_clock_source_get_hz+0x78>)
     4be:	581b      	ldr	r3, [r3, r0]
     4c0:	469f      	mov	pc, r3
>>>>>>> JJ's_Branch

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
<<<<<<< HEAD
     f9e:	2080      	movs	r0, #128	; 0x80
     fa0:	0200      	lsls	r0, r0, #8
     fa2:	e030      	b.n	1006 <system_clock_source_get_hz+0x76>
=======
     4c2:	2080      	movs	r0, #128	; 0x80
     4c4:	0200      	lsls	r0, r0, #8
     4c6:	e030      	b.n	52a <system_clock_source_get_hz+0x76>
>>>>>>> JJ's_Branch
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
<<<<<<< HEAD
     fa4:	4b19      	ldr	r3, [pc, #100]	; (100c <system_clock_source_get_hz+0x7c>)
     fa6:	6918      	ldr	r0, [r3, #16]
     fa8:	e02d      	b.n	1006 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     faa:	4b19      	ldr	r3, [pc, #100]	; (1010 <system_clock_source_get_hz+0x80>)
     fac:	6a18      	ldr	r0, [r3, #32]
     fae:	0580      	lsls	r0, r0, #22
     fb0:	0f80      	lsrs	r0, r0, #30
     fb2:	4b18      	ldr	r3, [pc, #96]	; (1014 <system_clock_source_get_hz+0x84>)
     fb4:	40c3      	lsrs	r3, r0
     fb6:	1c18      	adds	r0, r3, #0
     fb8:	e025      	b.n	1006 <system_clock_source_get_hz+0x76>
=======
     4c8:	4b19      	ldr	r3, [pc, #100]	; (530 <system_clock_source_get_hz+0x7c>)
     4ca:	6918      	ldr	r0, [r3, #16]
     4cc:	e02d      	b.n	52a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     4ce:	4b19      	ldr	r3, [pc, #100]	; (534 <system_clock_source_get_hz+0x80>)
     4d0:	6a18      	ldr	r0, [r3, #32]
     4d2:	0580      	lsls	r0, r0, #22
     4d4:	0f80      	lsrs	r0, r0, #30
     4d6:	4b18      	ldr	r3, [pc, #96]	; (538 <system_clock_source_get_hz+0x84>)
     4d8:	40c3      	lsrs	r3, r0
     4da:	1c18      	adds	r0, r3, #0
     4dc:	e025      	b.n	52a <system_clock_source_get_hz+0x76>
>>>>>>> JJ's_Branch

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
<<<<<<< HEAD
     fba:	4b14      	ldr	r3, [pc, #80]	; (100c <system_clock_source_get_hz+0x7c>)
     fbc:	6958      	ldr	r0, [r3, #20]
     fbe:	e022      	b.n	1006 <system_clock_source_get_hz+0x76>
=======
     4de:	4b14      	ldr	r3, [pc, #80]	; (530 <system_clock_source_get_hz+0x7c>)
     4e0:	6958      	ldr	r0, [r3, #20]
     4e2:	e022      	b.n	52a <system_clock_source_get_hz+0x76>
>>>>>>> JJ's_Branch

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
<<<<<<< HEAD
     fc0:	4b12      	ldr	r3, [pc, #72]	; (100c <system_clock_source_get_hz+0x7c>)
     fc2:	681b      	ldr	r3, [r3, #0]
     fc4:	2002      	movs	r0, #2
     fc6:	4018      	ands	r0, r3
     fc8:	d01d      	beq.n	1006 <system_clock_source_get_hz+0x76>
=======
     4e4:	4b12      	ldr	r3, [pc, #72]	; (530 <system_clock_source_get_hz+0x7c>)
     4e6:	681b      	ldr	r3, [r3, #0]
     4e8:	2002      	movs	r0, #2
     4ea:	4018      	ands	r0, r3
     4ec:	d01d      	beq.n	52a <system_clock_source_get_hz+0x76>
>>>>>>> JJ's_Branch
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
<<<<<<< HEAD
     fca:	4911      	ldr	r1, [pc, #68]	; (1010 <system_clock_source_get_hz+0x80>)
     fcc:	2210      	movs	r2, #16
     fce:	68cb      	ldr	r3, [r1, #12]
     fd0:	421a      	tst	r2, r3
     fd2:	d0fc      	beq.n	fce <system_clock_source_get_hz+0x3e>
=======
     4ee:	4911      	ldr	r1, [pc, #68]	; (534 <system_clock_source_get_hz+0x80>)
     4f0:	2210      	movs	r2, #16
     4f2:	68cb      	ldr	r3, [r1, #12]
     4f4:	421a      	tst	r2, r3
     4f6:	d0fc      	beq.n	4f2 <system_clock_source_get_hz+0x3e>
>>>>>>> JJ's_Branch

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
<<<<<<< HEAD
     fd4:	4b0d      	ldr	r3, [pc, #52]	; (100c <system_clock_source_get_hz+0x7c>)
     fd6:	681b      	ldr	r3, [r3, #0]
     fd8:	075a      	lsls	r2, r3, #29
     fda:	d513      	bpl.n	1004 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     fdc:	2000      	movs	r0, #0
     fde:	4b0e      	ldr	r3, [pc, #56]	; (1018 <system_clock_source_get_hz+0x88>)
     fe0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     fe2:	4b0a      	ldr	r3, [pc, #40]	; (100c <system_clock_source_get_hz+0x7c>)
     fe4:	689b      	ldr	r3, [r3, #8]
     fe6:	041b      	lsls	r3, r3, #16
     fe8:	0c1b      	lsrs	r3, r3, #16
=======
     4f8:	4b0d      	ldr	r3, [pc, #52]	; (530 <system_clock_source_get_hz+0x7c>)
     4fa:	681b      	ldr	r3, [r3, #0]
     4fc:	075a      	lsls	r2, r3, #29
     4fe:	d513      	bpl.n	528 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     500:	2000      	movs	r0, #0
     502:	4b0e      	ldr	r3, [pc, #56]	; (53c <system_clock_source_get_hz+0x88>)
     504:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     506:	4b0a      	ldr	r3, [pc, #40]	; (530 <system_clock_source_get_hz+0x7c>)
     508:	689b      	ldr	r3, [r3, #8]
     50a:	041b      	lsls	r3, r3, #16
     50c:	0c1b      	lsrs	r3, r3, #16
>>>>>>> JJ's_Branch
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
<<<<<<< HEAD
     fea:	4358      	muls	r0, r3
     fec:	e00b      	b.n	1006 <system_clock_source_get_hz+0x76>
=======
     50e:	4358      	muls	r0, r3
     510:	e00b      	b.n	52a <system_clock_source_get_hz+0x76>
>>>>>>> JJ's_Branch

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
<<<<<<< HEAD
     fee:	2350      	movs	r3, #80	; 0x50
     ff0:	4a07      	ldr	r2, [pc, #28]	; (1010 <system_clock_source_get_hz+0x80>)
     ff2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     ff4:	2000      	movs	r0, #0
=======
     512:	2350      	movs	r3, #80	; 0x50
     514:	4a07      	ldr	r2, [pc, #28]	; (534 <system_clock_source_get_hz+0x80>)
     516:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     518:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
<<<<<<< HEAD
     ff6:	075a      	lsls	r2, r3, #29
     ff8:	d505      	bpl.n	1006 <system_clock_source_get_hz+0x76>
=======
     51a:	075a      	lsls	r2, r3, #29
     51c:	d505      	bpl.n	52a <system_clock_source_get_hz+0x76>
>>>>>>> JJ's_Branch
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
<<<<<<< HEAD
     ffa:	4b04      	ldr	r3, [pc, #16]	; (100c <system_clock_source_get_hz+0x7c>)
     ffc:	68d8      	ldr	r0, [r3, #12]
     ffe:	e002      	b.n	1006 <system_clock_source_get_hz+0x76>
=======
     51e:	4b04      	ldr	r3, [pc, #16]	; (530 <system_clock_source_get_hz+0x7c>)
     520:	68d8      	ldr	r0, [r3, #12]
     522:	e002      	b.n	52a <system_clock_source_get_hz+0x76>
>>>>>>> JJ's_Branch
#endif

	default:
		return 0;
<<<<<<< HEAD
    1000:	2000      	movs	r0, #0
    1002:	e000      	b.n	1006 <system_clock_source_get_hz+0x76>
=======
     524:	2000      	movs	r0, #0
     526:	e000      	b.n	52a <system_clock_source_get_hz+0x76>
>>>>>>> JJ's_Branch
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
<<<<<<< HEAD
    1004:	4805      	ldr	r0, [pc, #20]	; (101c <system_clock_source_get_hz+0x8c>)
=======
     528:	4805      	ldr	r0, [pc, #20]	; (540 <system_clock_source_get_hz+0x8c>)
>>>>>>> JJ's_Branch
#endif

	default:
		return 0;
	}
}
<<<<<<< HEAD
    1006:	bd08      	pop	{r3, pc}
    1008:	00003e70 	.word	0x00003e70
    100c:	200000e8 	.word	0x200000e8
    1010:	40000800 	.word	0x40000800
    1014:	007a1200 	.word	0x007a1200
    1018:	00001405 	.word	0x00001405
    101c:	02dc6c00 	.word	0x02dc6c00

00001020 <system_clock_source_osc8m_set_config>:
=======
     52a:	bd08      	pop	{r3, pc}
     52c:	000031f8 	.word	0x000031f8
     530:	200000ac 	.word	0x200000ac
     534:	40000800 	.word	0x40000800
     538:	007a1200 	.word	0x007a1200
     53c:	00000929 	.word	0x00000929
     540:	02dc6c00 	.word	0x02dc6c00

00000544 <system_clock_source_osc8m_set_config>:
>>>>>>> JJ's_Branch
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
<<<<<<< HEAD
    1020:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1022:	4b0c      	ldr	r3, [pc, #48]	; (1054 <system_clock_source_osc8m_set_config+0x34>)
    1024:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1026:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1028:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    102a:	7840      	ldrb	r0, [r0, #1]
    102c:	2201      	movs	r2, #1
    102e:	4010      	ands	r0, r2
    1030:	0180      	lsls	r0, r0, #6
    1032:	2640      	movs	r6, #64	; 0x40
    1034:	43b4      	bics	r4, r6
    1036:	4304      	orrs	r4, r0
    1038:	402a      	ands	r2, r5
    103a:	01d0      	lsls	r0, r2, #7
    103c:	2280      	movs	r2, #128	; 0x80
    103e:	4394      	bics	r4, r2
    1040:	1c22      	adds	r2, r4, #0
    1042:	4302      	orrs	r2, r0
    1044:	2003      	movs	r0, #3
    1046:	4001      	ands	r1, r0
    1048:	0209      	lsls	r1, r1, #8
    104a:	4803      	ldr	r0, [pc, #12]	; (1058 <system_clock_source_osc8m_set_config+0x38>)
    104c:	4002      	ands	r2, r0
    104e:	430a      	orrs	r2, r1
    1050:	621a      	str	r2, [r3, #32]
}
    1052:	bd70      	pop	{r4, r5, r6, pc}
    1054:	40000800 	.word	0x40000800
    1058:	fffffcff 	.word	0xfffffcff

0000105c <system_clock_source_enable>:
=======
     544:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     546:	4b0c      	ldr	r3, [pc, #48]	; (578 <system_clock_source_osc8m_set_config+0x34>)
     548:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     54a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     54c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     54e:	7840      	ldrb	r0, [r0, #1]
     550:	2201      	movs	r2, #1
     552:	4010      	ands	r0, r2
     554:	0180      	lsls	r0, r0, #6
     556:	2640      	movs	r6, #64	; 0x40
     558:	43b4      	bics	r4, r6
     55a:	4304      	orrs	r4, r0
     55c:	402a      	ands	r2, r5
     55e:	01d0      	lsls	r0, r2, #7
     560:	2280      	movs	r2, #128	; 0x80
     562:	4394      	bics	r4, r2
     564:	1c22      	adds	r2, r4, #0
     566:	4302      	orrs	r2, r0
     568:	2003      	movs	r0, #3
     56a:	4001      	ands	r1, r0
     56c:	0209      	lsls	r1, r1, #8
     56e:	4803      	ldr	r0, [pc, #12]	; (57c <system_clock_source_osc8m_set_config+0x38>)
     570:	4002      	ands	r2, r0
     572:	430a      	orrs	r2, r1
     574:	621a      	str	r2, [r3, #32]
}
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	40000800 	.word	0x40000800
     57c:	fffffcff 	.word	0xfffffcff

00000580 <system_clock_source_enable>:
>>>>>>> JJ's_Branch
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
<<<<<<< HEAD
    105c:	2808      	cmp	r0, #8
    105e:	d843      	bhi.n	10e8 <system_clock_source_enable+0x8c>
    1060:	0080      	lsls	r0, r0, #2
    1062:	4b22      	ldr	r3, [pc, #136]	; (10ec <system_clock_source_enable+0x90>)
    1064:	581b      	ldr	r3, [r3, r0]
    1066:	469f      	mov	pc, r3
=======
     580:	2808      	cmp	r0, #8
     582:	d843      	bhi.n	60c <system_clock_source_enable+0x8c>
     584:	0080      	lsls	r0, r0, #2
     586:	4b22      	ldr	r3, [pc, #136]	; (610 <system_clock_source_enable+0x90>)
     588:	581b      	ldr	r3, [r3, r0]
     58a:	469f      	mov	pc, r3
>>>>>>> JJ's_Branch
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
<<<<<<< HEAD
    1068:	2000      	movs	r0, #0
    106a:	e03e      	b.n	10ea <system_clock_source_enable+0x8e>
=======
     58c:	2000      	movs	r0, #0
     58e:	e03e      	b.n	60e <system_clock_source_enable+0x8e>
>>>>>>> JJ's_Branch
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
<<<<<<< HEAD
    106c:	4b20      	ldr	r3, [pc, #128]	; (10f0 <system_clock_source_enable+0x94>)
    106e:	6a19      	ldr	r1, [r3, #32]
    1070:	2202      	movs	r2, #2
    1072:	430a      	orrs	r2, r1
    1074:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1076:	2000      	movs	r0, #0
    1078:	e037      	b.n	10ea <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    107a:	4b1d      	ldr	r3, [pc, #116]	; (10f0 <system_clock_source_enable+0x94>)
    107c:	6999      	ldr	r1, [r3, #24]
    107e:	2202      	movs	r2, #2
    1080:	430a      	orrs	r2, r1
    1082:	619a      	str	r2, [r3, #24]
=======
     590:	4b20      	ldr	r3, [pc, #128]	; (614 <system_clock_source_enable+0x94>)
     592:	6a19      	ldr	r1, [r3, #32]
     594:	2202      	movs	r2, #2
     596:	430a      	orrs	r2, r1
     598:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     59a:	2000      	movs	r0, #0
     59c:	e037      	b.n	60e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     59e:	4b1d      	ldr	r3, [pc, #116]	; (614 <system_clock_source_enable+0x94>)
     5a0:	6999      	ldr	r1, [r3, #24]
     5a2:	2202      	movs	r2, #2
     5a4:	430a      	orrs	r2, r1
     5a6:	619a      	str	r2, [r3, #24]
>>>>>>> JJ's_Branch
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
<<<<<<< HEAD
    1084:	2000      	movs	r0, #0
=======
     5a8:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
<<<<<<< HEAD
    1086:	e030      	b.n	10ea <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1088:	4b19      	ldr	r3, [pc, #100]	; (10f0 <system_clock_source_enable+0x94>)
    108a:	8a19      	ldrh	r1, [r3, #16]
    108c:	2202      	movs	r2, #2
    108e:	430a      	orrs	r2, r1
    1090:	821a      	strh	r2, [r3, #16]
=======
     5aa:	e030      	b.n	60e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     5ac:	4b19      	ldr	r3, [pc, #100]	; (614 <system_clock_source_enable+0x94>)
     5ae:	8a19      	ldrh	r1, [r3, #16]
     5b0:	2202      	movs	r2, #2
     5b2:	430a      	orrs	r2, r1
     5b4:	821a      	strh	r2, [r3, #16]
>>>>>>> JJ's_Branch
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
<<<<<<< HEAD
    1092:	2000      	movs	r0, #0
=======
     5b6:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
<<<<<<< HEAD
    1094:	e029      	b.n	10ea <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1096:	4b16      	ldr	r3, [pc, #88]	; (10f0 <system_clock_source_enable+0x94>)
    1098:	8a99      	ldrh	r1, [r3, #20]
    109a:	2202      	movs	r2, #2
    109c:	430a      	orrs	r2, r1
    109e:	829a      	strh	r2, [r3, #20]
=======
     5b8:	e029      	b.n	60e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     5ba:	4b16      	ldr	r3, [pc, #88]	; (614 <system_clock_source_enable+0x94>)
     5bc:	8a99      	ldrh	r1, [r3, #20]
     5be:	2202      	movs	r2, #2
     5c0:	430a      	orrs	r2, r1
     5c2:	829a      	strh	r2, [r3, #20]
>>>>>>> JJ's_Branch
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
<<<<<<< HEAD
    10a0:	2000      	movs	r0, #0
=======
     5c4:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
<<<<<<< HEAD
    10a2:	e022      	b.n	10ea <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    10a4:	4b13      	ldr	r3, [pc, #76]	; (10f4 <system_clock_source_enable+0x98>)
    10a6:	6819      	ldr	r1, [r3, #0]
    10a8:	2202      	movs	r2, #2
    10aa:	430a      	orrs	r2, r1
    10ac:	601a      	str	r2, [r3, #0]
=======
     5c6:	e022      	b.n	60e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     5c8:	4b13      	ldr	r3, [pc, #76]	; (618 <system_clock_source_enable+0x98>)
     5ca:	6819      	ldr	r1, [r3, #0]
     5cc:	2202      	movs	r2, #2
     5ce:	430a      	orrs	r2, r1
     5d0:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
<<<<<<< HEAD
    10ae:	681a      	ldr	r2, [r3, #0]
    10b0:	4b11      	ldr	r3, [pc, #68]	; (10f8 <system_clock_source_enable+0x9c>)
    10b2:	401a      	ands	r2, r3
    10b4:	4b0e      	ldr	r3, [pc, #56]	; (10f0 <system_clock_source_enable+0x94>)
    10b6:	849a      	strh	r2, [r3, #36]	; 0x24
=======
     5d2:	681a      	ldr	r2, [r3, #0]
     5d4:	4b11      	ldr	r3, [pc, #68]	; (61c <system_clock_source_enable+0x9c>)
     5d6:	401a      	ands	r2, r3
     5d8:	4b0e      	ldr	r3, [pc, #56]	; (614 <system_clock_source_enable+0x94>)
     5da:	849a      	strh	r2, [r3, #36]	; 0x24
>>>>>>> JJ's_Branch
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
<<<<<<< HEAD
    10b8:	1c19      	adds	r1, r3, #0
    10ba:	2210      	movs	r2, #16
    10bc:	68cb      	ldr	r3, [r1, #12]
    10be:	421a      	tst	r2, r3
    10c0:	d0fc      	beq.n	10bc <system_clock_source_enable+0x60>
=======
     5dc:	1c19      	adds	r1, r3, #0
     5de:	2210      	movs	r2, #16
     5e0:	68cb      	ldr	r3, [r1, #12]
     5e2:	421a      	tst	r2, r3
     5e4:	d0fc      	beq.n	5e0 <system_clock_source_enable+0x60>
>>>>>>> JJ's_Branch

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
<<<<<<< HEAD
    10c2:	4a0c      	ldr	r2, [pc, #48]	; (10f4 <system_clock_source_enable+0x98>)
    10c4:	6891      	ldr	r1, [r2, #8]
    10c6:	4b0a      	ldr	r3, [pc, #40]	; (10f0 <system_clock_source_enable+0x94>)
    10c8:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    10ca:	6851      	ldr	r1, [r2, #4]
    10cc:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    10ce:	6812      	ldr	r2, [r2, #0]
    10d0:	b292      	uxth	r2, r2
    10d2:	849a      	strh	r2, [r3, #36]	; 0x24
=======
     5e6:	4a0c      	ldr	r2, [pc, #48]	; (618 <system_clock_source_enable+0x98>)
     5e8:	6891      	ldr	r1, [r2, #8]
     5ea:	4b0a      	ldr	r3, [pc, #40]	; (614 <system_clock_source_enable+0x94>)
     5ec:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     5ee:	6851      	ldr	r1, [r2, #4]
     5f0:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     5f2:	6812      	ldr	r2, [r2, #0]
     5f4:	b292      	uxth	r2, r2
     5f6:	849a      	strh	r2, [r3, #36]	; 0x24
>>>>>>> JJ's_Branch
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
<<<<<<< HEAD
    10d4:	2000      	movs	r0, #0
    10d6:	e008      	b.n	10ea <system_clock_source_enable+0x8e>
=======
     5f8:	2000      	movs	r0, #0
     5fa:	e008      	b.n	60e <system_clock_source_enable+0x8e>
>>>>>>> JJ's_Branch
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
<<<<<<< HEAD
    10d8:	4a05      	ldr	r2, [pc, #20]	; (10f0 <system_clock_source_enable+0x94>)
    10da:	2344      	movs	r3, #68	; 0x44
    10dc:	5cd0      	ldrb	r0, [r2, r3]
    10de:	2102      	movs	r1, #2
    10e0:	4301      	orrs	r1, r0
    10e2:	54d1      	strb	r1, [r2, r3]
=======
     5fc:	4a05      	ldr	r2, [pc, #20]	; (614 <system_clock_source_enable+0x94>)
     5fe:	2344      	movs	r3, #68	; 0x44
     600:	5cd0      	ldrb	r0, [r2, r3]
     602:	2102      	movs	r1, #2
     604:	4301      	orrs	r1, r0
     606:	54d1      	strb	r1, [r2, r3]
>>>>>>> JJ's_Branch
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
<<<<<<< HEAD
    10e4:	2000      	movs	r0, #0
=======
     608:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
<<<<<<< HEAD
    10e6:	e000      	b.n	10ea <system_clock_source_enable+0x8e>
=======
     60a:	e000      	b.n	60e <system_clock_source_enable+0x8e>
>>>>>>> JJ's_Branch
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
<<<<<<< HEAD
    10e8:	2017      	movs	r0, #23
=======
     60c:	2017      	movs	r0, #23
>>>>>>> JJ's_Branch
	}

	return STATUS_OK;
}
<<<<<<< HEAD
    10ea:	4770      	bx	lr
    10ec:	00003e94 	.word	0x00003e94
    10f0:	40000800 	.word	0x40000800
    10f4:	200000e8 	.word	0x200000e8
    10f8:	0000ff7f 	.word	0x0000ff7f

000010fc <system_clock_init>:
=======
     60e:	4770      	bx	lr
     610:	0000321c 	.word	0x0000321c
     614:	40000800 	.word	0x40000800
     618:	200000ac 	.word	0x200000ac
     61c:	0000ff7f 	.word	0x0000ff7f

00000620 <system_clock_init>:
>>>>>>> JJ's_Branch
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
<<<<<<< HEAD
    10fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fe:	4647      	mov	r7, r8
    1100:	b480      	push	{r7}
    1102:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1104:	22c2      	movs	r2, #194	; 0xc2
    1106:	00d2      	lsls	r2, r2, #3
    1108:	4b21      	ldr	r3, [pc, #132]	; (1190 <system_clock_init+0x94>)
    110a:	609a      	str	r2, [r3, #8]
=======
     620:	b5f0      	push	{r4, r5, r6, r7, lr}
     622:	4647      	mov	r7, r8
     624:	b480      	push	{r7}
     626:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     628:	22c2      	movs	r2, #194	; 0xc2
     62a:	00d2      	lsls	r2, r2, #3
     62c:	4b21      	ldr	r3, [pc, #132]	; (6b4 <system_clock_init+0x94>)
     62e:	609a      	str	r2, [r3, #8]
>>>>>>> JJ's_Branch
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
<<<<<<< HEAD
    110c:	4b21      	ldr	r3, [pc, #132]	; (1194 <system_clock_init+0x98>)
    110e:	685a      	ldr	r2, [r3, #4]
    1110:	211e      	movs	r1, #30
    1112:	438a      	bics	r2, r1
    1114:	605a      	str	r2, [r3, #4]
=======
     630:	4b21      	ldr	r3, [pc, #132]	; (6b8 <system_clock_init+0x98>)
     632:	685a      	ldr	r2, [r3, #4]
     634:	211e      	movs	r1, #30
     636:	438a      	bics	r2, r1
     638:	605a      	str	r2, [r3, #4]
>>>>>>> JJ's_Branch
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
<<<<<<< HEAD
    1116:	2301      	movs	r3, #1
    1118:	466a      	mov	r2, sp
    111a:	7013      	strb	r3, [r2, #0]
=======
     63a:	2301      	movs	r3, #1
     63c:	466a      	mov	r2, sp
     63e:	7013      	strb	r3, [r2, #0]
>>>>>>> JJ's_Branch
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
<<<<<<< HEAD
    111c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    111e:	4d1e      	ldr	r5, [pc, #120]	; (1198 <system_clock_init+0x9c>)
    1120:	b2e0      	uxtb	r0, r4
    1122:	4669      	mov	r1, sp
    1124:	47a8      	blx	r5
=======
     640:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     642:	4d1e      	ldr	r5, [pc, #120]	; (6bc <system_clock_init+0x9c>)
     644:	b2e0      	uxtb	r0, r4
     646:	4669      	mov	r1, sp
     648:	47a8      	blx	r5
>>>>>>> JJ's_Branch
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
<<<<<<< HEAD
    1126:	3401      	adds	r4, #1
    1128:	2c25      	cmp	r4, #37	; 0x25
    112a:	d1f9      	bne.n	1120 <system_clock_init+0x24>
=======
     64a:	3401      	adds	r4, #1
     64c:	2c25      	cmp	r4, #37	; 0x25
     64e:	d1f9      	bne.n	644 <system_clock_init+0x24>
>>>>>>> JJ's_Branch
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
<<<<<<< HEAD
    112c:	a803      	add	r0, sp, #12
    112e:	2400      	movs	r4, #0
    1130:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1132:	2301      	movs	r3, #1
    1134:	4698      	mov	r8, r3
    1136:	7083      	strb	r3, [r0, #2]
=======
     650:	a803      	add	r0, sp, #12
     652:	2400      	movs	r4, #0
     654:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     656:	2301      	movs	r3, #1
     658:	4698      	mov	r8, r3
     65a:	7083      	strb	r3, [r0, #2]
>>>>>>> JJ's_Branch

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
<<<<<<< HEAD
    1138:	7004      	strb	r4, [r0, #0]
=======
     65c:	7004      	strb	r4, [r0, #0]
>>>>>>> JJ's_Branch
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
<<<<<<< HEAD
    113a:	4b18      	ldr	r3, [pc, #96]	; (119c <system_clock_init+0xa0>)
    113c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    113e:	2006      	movs	r0, #6
    1140:	4b17      	ldr	r3, [pc, #92]	; (11a0 <system_clock_init+0xa4>)
    1142:	4798      	blx	r3
=======
     65e:	4b18      	ldr	r3, [pc, #96]	; (6c0 <system_clock_init+0xa0>)
     660:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     662:	2006      	movs	r0, #6
     664:	4b17      	ldr	r3, [pc, #92]	; (6c4 <system_clock_init+0xa4>)
     666:	4798      	blx	r3
>>>>>>> JJ's_Branch


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
<<<<<<< HEAD
    1144:	4b17      	ldr	r3, [pc, #92]	; (11a4 <system_clock_init+0xa8>)
    1146:	4798      	blx	r3
=======
     668:	4b17      	ldr	r3, [pc, #92]	; (6c8 <system_clock_init+0xa8>)
     66a:	4798      	blx	r3
>>>>>>> JJ's_Branch
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
<<<<<<< HEAD
    1148:	466b      	mov	r3, sp
    114a:	705c      	strb	r4, [r3, #1]
=======
     66c:	466b      	mov	r3, sp
     66e:	705c      	strb	r4, [r3, #1]
>>>>>>> JJ's_Branch
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
<<<<<<< HEAD
    114c:	2706      	movs	r7, #6
    114e:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    1150:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1152:	725c      	strb	r4, [r3, #9]
=======
     670:	2706      	movs	r7, #6
     672:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
     674:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     676:	725c      	strb	r4, [r3, #9]
>>>>>>> JJ's_Branch

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
<<<<<<< HEAD
    1154:	2310      	movs	r3, #16
    1156:	9301      	str	r3, [sp, #4]
    1158:	2003      	movs	r0, #3
    115a:	4669      	mov	r1, sp
    115c:	4e12      	ldr	r6, [pc, #72]	; (11a8 <system_clock_init+0xac>)
    115e:	47b0      	blx	r6
    1160:	2003      	movs	r0, #3
    1162:	4d12      	ldr	r5, [pc, #72]	; (11ac <system_clock_init+0xb0>)
    1164:	47a8      	blx	r5
=======
     678:	2310      	movs	r3, #16
     67a:	9301      	str	r3, [sp, #4]
     67c:	2003      	movs	r0, #3
     67e:	4669      	mov	r1, sp
     680:	4e12      	ldr	r6, [pc, #72]	; (6cc <system_clock_init+0xac>)
     682:	47b0      	blx	r6
     684:	2003      	movs	r0, #3
     686:	4d12      	ldr	r5, [pc, #72]	; (6d0 <system_clock_init+0xb0>)
     688:	47a8      	blx	r5
>>>>>>> JJ's_Branch
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
<<<<<<< HEAD
    1166:	4b12      	ldr	r3, [pc, #72]	; (11b0 <system_clock_init+0xb4>)
    1168:	721c      	strb	r4, [r3, #8]
=======
     68a:	4b12      	ldr	r3, [pc, #72]	; (6d4 <system_clock_init+0xb4>)
     68c:	721c      	strb	r4, [r3, #8]
>>>>>>> JJ's_Branch
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
<<<<<<< HEAD
    116a:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    116c:	729c      	strb	r4, [r3, #10]
=======
     68e:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     690:	729c      	strb	r4, [r3, #10]
>>>>>>> JJ's_Branch
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
<<<<<<< HEAD
    116e:	4642      	mov	r2, r8
    1170:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    1172:	466b      	mov	r3, sp
    1174:	705c      	strb	r4, [r3, #1]
=======
     692:	4642      	mov	r2, r8
     694:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
     696:	466b      	mov	r3, sp
     698:	705c      	strb	r4, [r3, #1]
>>>>>>> JJ's_Branch
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
<<<<<<< HEAD
    1176:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    1178:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    117a:	725c      	strb	r4, [r3, #9]
=======
     69a:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
     69c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     69e:	725c      	strb	r4, [r3, #9]
>>>>>>> JJ's_Branch
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
<<<<<<< HEAD
    117c:	2000      	movs	r0, #0
    117e:	4669      	mov	r1, sp
    1180:	47b0      	blx	r6
    1182:	2000      	movs	r0, #0
    1184:	47a8      	blx	r5
#endif
}
    1186:	b004      	add	sp, #16
    1188:	bc04      	pop	{r2}
    118a:	4690      	mov	r8, r2
    118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	40000800 	.word	0x40000800
    1194:	41004000 	.word	0x41004000
    1198:	000013e9 	.word	0x000013e9
    119c:	00001021 	.word	0x00001021
    11a0:	0000105d 	.word	0x0000105d
    11a4:	000011b5 	.word	0x000011b5
    11a8:	000011d9 	.word	0x000011d9
    11ac:	0000128d 	.word	0x0000128d
    11b0:	40000400 	.word	0x40000400

000011b4 <system_gclk_init>:
=======
     6a0:	2000      	movs	r0, #0
     6a2:	4669      	mov	r1, sp
     6a4:	47b0      	blx	r6
     6a6:	2000      	movs	r0, #0
     6a8:	47a8      	blx	r5
#endif
}
     6aa:	b004      	add	sp, #16
     6ac:	bc04      	pop	{r2}
     6ae:	4690      	mov	r8, r2
     6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	40000800 	.word	0x40000800
     6b8:	41004000 	.word	0x41004000
     6bc:	0000090d 	.word	0x0000090d
     6c0:	00000545 	.word	0x00000545
     6c4:	00000581 	.word	0x00000581
     6c8:	000006d9 	.word	0x000006d9
     6cc:	000006fd 	.word	0x000006fd
     6d0:	000007b1 	.word	0x000007b1
     6d4:	40000400 	.word	0x40000400

000006d8 <system_gclk_init>:
>>>>>>> JJ's_Branch
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
<<<<<<< HEAD
    11b4:	4b06      	ldr	r3, [pc, #24]	; (11d0 <system_gclk_init+0x1c>)
    11b6:	6999      	ldr	r1, [r3, #24]
    11b8:	2208      	movs	r2, #8
    11ba:	430a      	orrs	r2, r1
    11bc:	619a      	str	r2, [r3, #24]
=======
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <system_gclk_init+0x1c>)
     6da:	6999      	ldr	r1, [r3, #24]
     6dc:	2208      	movs	r2, #8
     6de:	430a      	orrs	r2, r1
     6e0:	619a      	str	r2, [r3, #24]
>>>>>>> JJ's_Branch
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
<<<<<<< HEAD
    11be:	2201      	movs	r2, #1
    11c0:	4b04      	ldr	r3, [pc, #16]	; (11d4 <system_gclk_init+0x20>)
    11c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    11c4:	1c19      	adds	r1, r3, #0
    11c6:	780b      	ldrb	r3, [r1, #0]
    11c8:	4213      	tst	r3, r2
    11ca:	d1fc      	bne.n	11c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    11cc:	4770      	bx	lr
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	40000400 	.word	0x40000400
    11d4:	40000c00 	.word	0x40000c00

000011d8 <system_gclk_gen_set_config>:
=======
     6e2:	2201      	movs	r2, #1
     6e4:	4b04      	ldr	r3, [pc, #16]	; (6f8 <system_gclk_init+0x20>)
     6e6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     6e8:	1c19      	adds	r1, r3, #0
     6ea:	780b      	ldrb	r3, [r1, #0]
     6ec:	4213      	tst	r3, r2
     6ee:	d1fc      	bne.n	6ea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     6f0:	4770      	bx	lr
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	40000400 	.word	0x40000400
     6f8:	40000c00 	.word	0x40000c00

000006fc <system_gclk_gen_set_config>:
>>>>>>> JJ's_Branch
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
<<<<<<< HEAD
    11d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11da:	1c06      	adds	r6, r0, #0
=======
     6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6fe:	1c06      	adds	r6, r0, #0
>>>>>>> JJ's_Branch
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
<<<<<<< HEAD
    11dc:	1c07      	adds	r7, r0, #0
=======
     700:	1c07      	adds	r7, r0, #0
>>>>>>> JJ's_Branch
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
<<<<<<< HEAD
    11de:	780d      	ldrb	r5, [r1, #0]
    11e0:	022d      	lsls	r5, r5, #8
    11e2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    11e4:	784b      	ldrb	r3, [r1, #1]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d002      	beq.n	11f0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    11ea:	2380      	movs	r3, #128	; 0x80
    11ec:	02db      	lsls	r3, r3, #11
    11ee:	431d      	orrs	r5, r3
=======
     702:	780d      	ldrb	r5, [r1, #0]
     704:	022d      	lsls	r5, r5, #8
     706:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     708:	784b      	ldrb	r3, [r1, #1]
     70a:	2b00      	cmp	r3, #0
     70c:	d002      	beq.n	714 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     70e:	2380      	movs	r3, #128	; 0x80
     710:	02db      	lsls	r3, r3, #11
     712:	431d      	orrs	r5, r3
>>>>>>> JJ's_Branch
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
<<<<<<< HEAD
    11f0:	7a4b      	ldrb	r3, [r1, #9]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d002      	beq.n	11fc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    11f6:	2380      	movs	r3, #128	; 0x80
    11f8:	031b      	lsls	r3, r3, #12
    11fa:	431d      	orrs	r5, r3
=======
     714:	7a4b      	ldrb	r3, [r1, #9]
     716:	2b00      	cmp	r3, #0
     718:	d002      	beq.n	720 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     71a:	2380      	movs	r3, #128	; 0x80
     71c:	031b      	lsls	r3, r3, #12
     71e:	431d      	orrs	r5, r3
>>>>>>> JJ's_Branch
	}

	/* Set division factor */
	if (config->division_factor > 1) {
<<<<<<< HEAD
    11fc:	684c      	ldr	r4, [r1, #4]
    11fe:	2c01      	cmp	r4, #1
    1200:	d917      	bls.n	1232 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1202:	1e63      	subs	r3, r4, #1
    1204:	421c      	tst	r4, r3
    1206:	d10f      	bne.n	1228 <system_gclk_gen_set_config+0x50>
=======
     720:	684c      	ldr	r4, [r1, #4]
     722:	2c01      	cmp	r4, #1
     724:	d917      	bls.n	756 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     726:	1e63      	subs	r3, r4, #1
     728:	421c      	tst	r4, r3
     72a:	d10f      	bne.n	74c <system_gclk_gen_set_config+0x50>
>>>>>>> JJ's_Branch
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
<<<<<<< HEAD
    1208:	2c02      	cmp	r4, #2
    120a:	d906      	bls.n	121a <system_gclk_gen_set_config+0x42>
    120c:	2302      	movs	r3, #2
    120e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1210:	3201      	adds	r2, #1
=======
     72c:	2c02      	cmp	r4, #2
     72e:	d906      	bls.n	73e <system_gclk_gen_set_config+0x42>
     730:	2302      	movs	r3, #2
     732:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     734:	3201      	adds	r2, #1
>>>>>>> JJ's_Branch

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
<<<<<<< HEAD
    1212:	005b      	lsls	r3, r3, #1
=======
     736:	005b      	lsls	r3, r3, #1
>>>>>>> JJ's_Branch
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
<<<<<<< HEAD
    1214:	429c      	cmp	r4, r3
    1216:	d8fb      	bhi.n	1210 <system_gclk_gen_set_config+0x38>
    1218:	e000      	b.n	121c <system_gclk_gen_set_config+0x44>
    121a:	2200      	movs	r2, #0
=======
     738:	429c      	cmp	r4, r3
     73a:	d8fb      	bhi.n	734 <system_gclk_gen_set_config+0x38>
     73c:	e000      	b.n	740 <system_gclk_gen_set_config+0x44>
     73e:	2200      	movs	r2, #0
>>>>>>> JJ's_Branch
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
<<<<<<< HEAD
    121c:	0217      	lsls	r7, r2, #8
    121e:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1220:	2380      	movs	r3, #128	; 0x80
    1222:	035b      	lsls	r3, r3, #13
    1224:	431d      	orrs	r5, r3
    1226:	e004      	b.n	1232 <system_gclk_gen_set_config+0x5a>
=======
     740:	0217      	lsls	r7, r2, #8
     742:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     744:	2380      	movs	r3, #128	; 0x80
     746:	035b      	lsls	r3, r3, #13
     748:	431d      	orrs	r5, r3
     74a:	e004      	b.n	756 <system_gclk_gen_set_config+0x5a>
>>>>>>> JJ's_Branch
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
<<<<<<< HEAD
    1228:	0227      	lsls	r7, r4, #8
=======
     74c:	0227      	lsls	r7, r4, #8
>>>>>>> JJ's_Branch
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
<<<<<<< HEAD
    122a:	4337      	orrs	r7, r6
=======
     74e:	4337      	orrs	r7, r6
>>>>>>> JJ's_Branch
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
<<<<<<< HEAD
    122c:	2380      	movs	r3, #128	; 0x80
    122e:	029b      	lsls	r3, r3, #10
    1230:	431d      	orrs	r5, r3
=======
     750:	2380      	movs	r3, #128	; 0x80
     752:	029b      	lsls	r3, r3, #10
     754:	431d      	orrs	r5, r3
>>>>>>> JJ's_Branch
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
<<<<<<< HEAD
    1232:	7a0b      	ldrb	r3, [r1, #8]
    1234:	2b00      	cmp	r3, #0
    1236:	d002      	beq.n	123e <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1238:	2380      	movs	r3, #128	; 0x80
    123a:	039b      	lsls	r3, r3, #14
    123c:	431d      	orrs	r5, r3
=======
     756:	7a0b      	ldrb	r3, [r1, #8]
     758:	2b00      	cmp	r3, #0
     75a:	d002      	beq.n	762 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     75c:	2380      	movs	r3, #128	; 0x80
     75e:	039b      	lsls	r3, r3, #14
     760:	431d      	orrs	r5, r3
>>>>>>> JJ's_Branch
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
<<<<<<< HEAD
    123e:	4a0f      	ldr	r2, [pc, #60]	; (127c <system_gclk_gen_set_config+0xa4>)
    1240:	7853      	ldrb	r3, [r2, #1]
=======
     762:	4a0f      	ldr	r2, [pc, #60]	; (7a0 <system_gclk_gen_set_config+0xa4>)
     764:	7853      	ldrb	r3, [r2, #1]
>>>>>>> JJ's_Branch
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
<<<<<<< HEAD
    1242:	b25b      	sxtb	r3, r3
    1244:	2b00      	cmp	r3, #0
    1246:	dbfb      	blt.n	1240 <system_gclk_gen_set_config+0x68>
=======
     766:	b25b      	sxtb	r3, r3
     768:	2b00      	cmp	r3, #0
     76a:	dbfb      	blt.n	764 <system_gclk_gen_set_config+0x68>
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
<<<<<<< HEAD
    1248:	4b0d      	ldr	r3, [pc, #52]	; (1280 <system_gclk_gen_set_config+0xa8>)
    124a:	4798      	blx	r3
=======
     76c:	4b0d      	ldr	r3, [pc, #52]	; (7a4 <system_gclk_gen_set_config+0xa8>)
     76e:	4798      	blx	r3
>>>>>>> JJ's_Branch
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
<<<<<<< HEAD
    124c:	4b0d      	ldr	r3, [pc, #52]	; (1284 <system_gclk_gen_set_config+0xac>)
    124e:	701e      	strb	r6, [r3, #0]
=======
     770:	4b0d      	ldr	r3, [pc, #52]	; (7a8 <system_gclk_gen_set_config+0xac>)
     772:	701e      	strb	r6, [r3, #0]
>>>>>>> JJ's_Branch
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
<<<<<<< HEAD
    1250:	4a0a      	ldr	r2, [pc, #40]	; (127c <system_gclk_gen_set_config+0xa4>)
    1252:	7853      	ldrb	r3, [r2, #1]
=======
     774:	4a0a      	ldr	r2, [pc, #40]	; (7a0 <system_gclk_gen_set_config+0xa4>)
     776:	7853      	ldrb	r3, [r2, #1]
>>>>>>> JJ's_Branch

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
<<<<<<< HEAD
    1254:	b25b      	sxtb	r3, r3
    1256:	2b00      	cmp	r3, #0
    1258:	dbfb      	blt.n	1252 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    125a:	4b08      	ldr	r3, [pc, #32]	; (127c <system_gclk_gen_set_config+0xa4>)
    125c:	609f      	str	r7, [r3, #8]
=======
     778:	b25b      	sxtb	r3, r3
     77a:	2b00      	cmp	r3, #0
     77c:	dbfb      	blt.n	776 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     77e:	4b08      	ldr	r3, [pc, #32]	; (7a0 <system_gclk_gen_set_config+0xa4>)
     780:	609f      	str	r7, [r3, #8]
>>>>>>> JJ's_Branch
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
<<<<<<< HEAD
    125e:	1c1a      	adds	r2, r3, #0
    1260:	7853      	ldrb	r3, [r2, #1]
=======
     782:	1c1a      	adds	r2, r3, #0
     784:	7853      	ldrb	r3, [r2, #1]
>>>>>>> JJ's_Branch
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
<<<<<<< HEAD
    1262:	b25b      	sxtb	r3, r3
    1264:	2b00      	cmp	r3, #0
    1266:	dbfb      	blt.n	1260 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <system_gclk_gen_set_config+0xa4>)
    126a:	6859      	ldr	r1, [r3, #4]
    126c:	2280      	movs	r2, #128	; 0x80
    126e:	0252      	lsls	r2, r2, #9
    1270:	400a      	ands	r2, r1
    1272:	4315      	orrs	r5, r2
    1274:	605d      	str	r5, [r3, #4]
=======
     786:	b25b      	sxtb	r3, r3
     788:	2b00      	cmp	r3, #0
     78a:	dbfb      	blt.n	784 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     78c:	4b04      	ldr	r3, [pc, #16]	; (7a0 <system_gclk_gen_set_config+0xa4>)
     78e:	6859      	ldr	r1, [r3, #4]
     790:	2280      	movs	r2, #128	; 0x80
     792:	0252      	lsls	r2, r2, #9
     794:	400a      	ands	r2, r1
     796:	4315      	orrs	r5, r2
     798:	605d      	str	r5, [r3, #4]
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
<<<<<<< HEAD
    1276:	4b04      	ldr	r3, [pc, #16]	; (1288 <system_gclk_gen_set_config+0xb0>)
    1278:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    127c:	40000c00 	.word	0x40000c00
    1280:	000004c1 	.word	0x000004c1
    1284:	40000c08 	.word	0x40000c08
    1288:	00000501 	.word	0x00000501

0000128c <system_gclk_gen_enable>:
=======
     79a:	4b04      	ldr	r3, [pc, #16]	; (7ac <system_gclk_gen_set_config+0xb0>)
     79c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7a0:	40000c00 	.word	0x40000c00
     7a4:	00000389 	.word	0x00000389
     7a8:	40000c08 	.word	0x40000c08
     7ac:	000003c9 	.word	0x000003c9

000007b0 <system_gclk_gen_enable>:
>>>>>>> JJ's_Branch
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
<<<<<<< HEAD
    128c:	b510      	push	{r4, lr}
    128e:	1c04      	adds	r4, r0, #0
=======
     7b0:	b510      	push	{r4, lr}
     7b2:	1c04      	adds	r4, r0, #0
>>>>>>> JJ's_Branch
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
<<<<<<< HEAD
    1290:	4a0b      	ldr	r2, [pc, #44]	; (12c0 <system_gclk_gen_enable+0x34>)
    1292:	7853      	ldrb	r3, [r2, #1]
=======
     7b4:	4a0b      	ldr	r2, [pc, #44]	; (7e4 <system_gclk_gen_enable+0x34>)
     7b6:	7853      	ldrb	r3, [r2, #1]
>>>>>>> JJ's_Branch
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
<<<<<<< HEAD
    1294:	b25b      	sxtb	r3, r3
    1296:	2b00      	cmp	r3, #0
    1298:	dbfb      	blt.n	1292 <system_gclk_gen_enable+0x6>
=======
     7b8:	b25b      	sxtb	r3, r3
     7ba:	2b00      	cmp	r3, #0
     7bc:	dbfb      	blt.n	7b6 <system_gclk_gen_enable+0x6>
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
<<<<<<< HEAD
    129a:	4b0a      	ldr	r3, [pc, #40]	; (12c4 <system_gclk_gen_enable+0x38>)
    129c:	4798      	blx	r3
=======
     7be:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <system_gclk_gen_enable+0x38>)
     7c0:	4798      	blx	r3
>>>>>>> JJ's_Branch
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
<<<<<<< HEAD
    129e:	4b0a      	ldr	r3, [pc, #40]	; (12c8 <system_gclk_gen_enable+0x3c>)
    12a0:	701c      	strb	r4, [r3, #0]
=======
     7c2:	4b0a      	ldr	r3, [pc, #40]	; (7ec <system_gclk_gen_enable+0x3c>)
     7c4:	701c      	strb	r4, [r3, #0]
>>>>>>> JJ's_Branch
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
<<<<<<< HEAD
    12a2:	4a07      	ldr	r2, [pc, #28]	; (12c0 <system_gclk_gen_enable+0x34>)
    12a4:	7853      	ldrb	r3, [r2, #1]
=======
     7c6:	4a07      	ldr	r2, [pc, #28]	; (7e4 <system_gclk_gen_enable+0x34>)
     7c8:	7853      	ldrb	r3, [r2, #1]
>>>>>>> JJ's_Branch

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
<<<<<<< HEAD
    12a6:	b25b      	sxtb	r3, r3
    12a8:	2b00      	cmp	r3, #0
    12aa:	dbfb      	blt.n	12a4 <system_gclk_gen_enable+0x18>
=======
     7ca:	b25b      	sxtb	r3, r3
     7cc:	2b00      	cmp	r3, #0
     7ce:	dbfb      	blt.n	7c8 <system_gclk_gen_enable+0x18>
>>>>>>> JJ's_Branch
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
<<<<<<< HEAD
    12ac:	4b04      	ldr	r3, [pc, #16]	; (12c0 <system_gclk_gen_enable+0x34>)
    12ae:	6859      	ldr	r1, [r3, #4]
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	0252      	lsls	r2, r2, #9
    12b4:	430a      	orrs	r2, r1
    12b6:	605a      	str	r2, [r3, #4]
=======
     7d0:	4b04      	ldr	r3, [pc, #16]	; (7e4 <system_gclk_gen_enable+0x34>)
     7d2:	6859      	ldr	r1, [r3, #4]
     7d4:	2280      	movs	r2, #128	; 0x80
     7d6:	0252      	lsls	r2, r2, #9
     7d8:	430a      	orrs	r2, r1
     7da:	605a      	str	r2, [r3, #4]
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
<<<<<<< HEAD
    12b8:	4b04      	ldr	r3, [pc, #16]	; (12cc <system_gclk_gen_enable+0x40>)
    12ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12bc:	bd10      	pop	{r4, pc}
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	40000c00 	.word	0x40000c00
    12c4:	000004c1 	.word	0x000004c1
    12c8:	40000c04 	.word	0x40000c04
    12cc:	00000501 	.word	0x00000501

000012d0 <system_gclk_gen_get_hz>:
=======
     7dc:	4b04      	ldr	r3, [pc, #16]	; (7f0 <system_gclk_gen_enable+0x40>)
     7de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     7e0:	bd10      	pop	{r4, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	40000c00 	.word	0x40000c00
     7e8:	00000389 	.word	0x00000389
     7ec:	40000c04 	.word	0x40000c04
     7f0:	000003c9 	.word	0x000003c9

000007f4 <system_gclk_gen_get_hz>:
>>>>>>> JJ's_Branch
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
<<<<<<< HEAD
    12d0:	b570      	push	{r4, r5, r6, lr}
    12d2:	1c04      	adds	r4, r0, #0
=======
     7f4:	b570      	push	{r4, r5, r6, lr}
     7f6:	1c04      	adds	r4, r0, #0
>>>>>>> JJ's_Branch
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
<<<<<<< HEAD
    12d4:	4a1a      	ldr	r2, [pc, #104]	; (1340 <system_gclk_gen_get_hz+0x70>)
    12d6:	7853      	ldrb	r3, [r2, #1]
=======
     7f8:	4a1a      	ldr	r2, [pc, #104]	; (864 <system_gclk_gen_get_hz+0x70>)
     7fa:	7853      	ldrb	r3, [r2, #1]
>>>>>>> JJ's_Branch
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
<<<<<<< HEAD
    12d8:	b25b      	sxtb	r3, r3
    12da:	2b00      	cmp	r3, #0
    12dc:	dbfb      	blt.n	12d6 <system_gclk_gen_get_hz+0x6>
=======
     7fc:	b25b      	sxtb	r3, r3
     7fe:	2b00      	cmp	r3, #0
     800:	dbfb      	blt.n	7fa <system_gclk_gen_get_hz+0x6>
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
<<<<<<< HEAD
    12de:	4b19      	ldr	r3, [pc, #100]	; (1344 <system_gclk_gen_get_hz+0x74>)
    12e0:	4798      	blx	r3
=======
     802:	4b19      	ldr	r3, [pc, #100]	; (868 <system_gclk_gen_get_hz+0x74>)
     804:	4798      	blx	r3
>>>>>>> JJ's_Branch
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
<<<<<<< HEAD
    12e2:	4b19      	ldr	r3, [pc, #100]	; (1348 <system_gclk_gen_get_hz+0x78>)
    12e4:	701c      	strb	r4, [r3, #0]
=======
     806:	4b19      	ldr	r3, [pc, #100]	; (86c <system_gclk_gen_get_hz+0x78>)
     808:	701c      	strb	r4, [r3, #0]
>>>>>>> JJ's_Branch
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
<<<<<<< HEAD
    12e6:	4a16      	ldr	r2, [pc, #88]	; (1340 <system_gclk_gen_get_hz+0x70>)
    12e8:	7853      	ldrb	r3, [r2, #1]
=======
     80a:	4a16      	ldr	r2, [pc, #88]	; (864 <system_gclk_gen_get_hz+0x70>)
     80c:	7853      	ldrb	r3, [r2, #1]
>>>>>>> JJ's_Branch

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
<<<<<<< HEAD
    12ea:	b25b      	sxtb	r3, r3
    12ec:	2b00      	cmp	r3, #0
    12ee:	dbfb      	blt.n	12e8 <system_gclk_gen_get_hz+0x18>
=======
     80e:	b25b      	sxtb	r3, r3
     810:	2b00      	cmp	r3, #0
     812:	dbfb      	blt.n	80c <system_gclk_gen_get_hz+0x18>
>>>>>>> JJ's_Branch
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
<<<<<<< HEAD
    12f0:	4e13      	ldr	r6, [pc, #76]	; (1340 <system_gclk_gen_get_hz+0x70>)
    12f2:	6870      	ldr	r0, [r6, #4]
    12f4:	04c0      	lsls	r0, r0, #19
    12f6:	0ec0      	lsrs	r0, r0, #27
=======
     814:	4e13      	ldr	r6, [pc, #76]	; (864 <system_gclk_gen_get_hz+0x70>)
     816:	6870      	ldr	r0, [r6, #4]
     818:	04c0      	lsls	r0, r0, #19
     81a:	0ec0      	lsrs	r0, r0, #27
>>>>>>> JJ's_Branch
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
<<<<<<< HEAD
    12f8:	4b14      	ldr	r3, [pc, #80]	; (134c <system_gclk_gen_get_hz+0x7c>)
    12fa:	4798      	blx	r3
    12fc:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12fe:	4b12      	ldr	r3, [pc, #72]	; (1348 <system_gclk_gen_get_hz+0x78>)
    1300:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1302:	6876      	ldr	r6, [r6, #4]
    1304:	02f6      	lsls	r6, r6, #11
    1306:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1308:	4b11      	ldr	r3, [pc, #68]	; (1350 <system_gclk_gen_get_hz+0x80>)
    130a:	701c      	strb	r4, [r3, #0]
=======
     81c:	4b14      	ldr	r3, [pc, #80]	; (870 <system_gclk_gen_get_hz+0x7c>)
     81e:	4798      	blx	r3
     820:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     822:	4b12      	ldr	r3, [pc, #72]	; (86c <system_gclk_gen_get_hz+0x78>)
     824:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     826:	6876      	ldr	r6, [r6, #4]
     828:	02f6      	lsls	r6, r6, #11
     82a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     82c:	4b11      	ldr	r3, [pc, #68]	; (874 <system_gclk_gen_get_hz+0x80>)
     82e:	701c      	strb	r4, [r3, #0]
>>>>>>> JJ's_Branch
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
<<<<<<< HEAD
    130c:	4a0c      	ldr	r2, [pc, #48]	; (1340 <system_gclk_gen_get_hz+0x70>)
    130e:	7853      	ldrb	r3, [r2, #1]
=======
     830:	4a0c      	ldr	r2, [pc, #48]	; (864 <system_gclk_gen_get_hz+0x70>)
     832:	7853      	ldrb	r3, [r2, #1]
>>>>>>> JJ's_Branch

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
<<<<<<< HEAD
    1310:	b25b      	sxtb	r3, r3
    1312:	2b00      	cmp	r3, #0
    1314:	dbfb      	blt.n	130e <system_gclk_gen_get_hz+0x3e>
=======
     834:	b25b      	sxtb	r3, r3
     836:	2b00      	cmp	r3, #0
     838:	dbfb      	blt.n	832 <system_gclk_gen_get_hz+0x3e>
>>>>>>> JJ's_Branch
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
<<<<<<< HEAD
    1316:	4b0a      	ldr	r3, [pc, #40]	; (1340 <system_gclk_gen_get_hz+0x70>)
    1318:	689c      	ldr	r4, [r3, #8]
    131a:	0a24      	lsrs	r4, r4, #8
    131c:	b2a4      	uxth	r4, r4
=======
     83a:	4b0a      	ldr	r3, [pc, #40]	; (864 <system_gclk_gen_get_hz+0x70>)
     83c:	689c      	ldr	r4, [r3, #8]
     83e:	0a24      	lsrs	r4, r4, #8
     840:	b2a4      	uxth	r4, r4
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
<<<<<<< HEAD
    131e:	4b0d      	ldr	r3, [pc, #52]	; (1354 <system_gclk_gen_get_hz+0x84>)
    1320:	4798      	blx	r3
=======
     842:	4b0d      	ldr	r3, [pc, #52]	; (878 <system_gclk_gen_get_hz+0x84>)
     844:	4798      	blx	r3
>>>>>>> JJ's_Branch

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
<<<<<<< HEAD
    1322:	2e00      	cmp	r6, #0
    1324:	d107      	bne.n	1336 <system_gclk_gen_get_hz+0x66>
    1326:	2c01      	cmp	r4, #1
    1328:	d907      	bls.n	133a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    132a:	1c28      	adds	r0, r5, #0
    132c:	1c21      	adds	r1, r4, #0
    132e:	4b0a      	ldr	r3, [pc, #40]	; (1358 <system_gclk_gen_get_hz+0x88>)
    1330:	4798      	blx	r3
    1332:	1c05      	adds	r5, r0, #0
    1334:	e001      	b.n	133a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1336:	3401      	adds	r4, #1
    1338:	40e5      	lsrs	r5, r4
=======
     846:	2e00      	cmp	r6, #0
     848:	d107      	bne.n	85a <system_gclk_gen_get_hz+0x66>
     84a:	2c01      	cmp	r4, #1
     84c:	d907      	bls.n	85e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     84e:	1c28      	adds	r0, r5, #0
     850:	1c21      	adds	r1, r4, #0
     852:	4b0a      	ldr	r3, [pc, #40]	; (87c <system_gclk_gen_get_hz+0x88>)
     854:	4798      	blx	r3
     856:	1c05      	adds	r5, r0, #0
     858:	e001      	b.n	85e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     85a:	3401      	adds	r4, #1
     85c:	40e5      	lsrs	r5, r4
>>>>>>> JJ's_Branch
	}

	return gen_input_hz;
}
<<<<<<< HEAD
    133a:	1c28      	adds	r0, r5, #0
    133c:	bd70      	pop	{r4, r5, r6, pc}
    133e:	46c0      	nop			; (mov r8, r8)
    1340:	40000c00 	.word	0x40000c00
    1344:	000004c1 	.word	0x000004c1
    1348:	40000c04 	.word	0x40000c04
    134c:	00000f91 	.word	0x00000f91
    1350:	40000c08 	.word	0x40000c08
    1354:	00000501 	.word	0x00000501
    1358:	00002df9 	.word	0x00002df9

0000135c <system_gclk_chan_enable>:
=======
     85e:	1c28      	adds	r0, r5, #0
     860:	bd70      	pop	{r4, r5, r6, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	40000c00 	.word	0x40000c00
     868:	00000389 	.word	0x00000389
     86c:	40000c04 	.word	0x40000c04
     870:	000004b5 	.word	0x000004b5
     874:	40000c08 	.word	0x40000c08
     878:	000003c9 	.word	0x000003c9
     87c:	00002319 	.word	0x00002319

00000880 <system_gclk_chan_enable>:
>>>>>>> JJ's_Branch
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
<<<<<<< HEAD
    135c:	b510      	push	{r4, lr}
    135e:	1c04      	adds	r4, r0, #0
=======
     880:	b510      	push	{r4, lr}
     882:	1c04      	adds	r4, r0, #0
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
<<<<<<< HEAD
    1360:	4b06      	ldr	r3, [pc, #24]	; (137c <system_gclk_chan_enable+0x20>)
    1362:	4798      	blx	r3
=======
     884:	4b06      	ldr	r3, [pc, #24]	; (8a0 <system_gclk_chan_enable+0x20>)
     886:	4798      	blx	r3
>>>>>>> JJ's_Branch
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
<<<<<<< HEAD
    1364:	4b06      	ldr	r3, [pc, #24]	; (1380 <system_gclk_chan_enable+0x24>)
    1366:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <system_gclk_chan_enable+0x28>)
    136a:	8859      	ldrh	r1, [r3, #2]
    136c:	2280      	movs	r2, #128	; 0x80
    136e:	01d2      	lsls	r2, r2, #7
    1370:	430a      	orrs	r2, r1
    1372:	805a      	strh	r2, [r3, #2]
=======
     888:	4b06      	ldr	r3, [pc, #24]	; (8a4 <system_gclk_chan_enable+0x24>)
     88a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     88c:	4b06      	ldr	r3, [pc, #24]	; (8a8 <system_gclk_chan_enable+0x28>)
     88e:	8859      	ldrh	r1, [r3, #2]
     890:	2280      	movs	r2, #128	; 0x80
     892:	01d2      	lsls	r2, r2, #7
     894:	430a      	orrs	r2, r1
     896:	805a      	strh	r2, [r3, #2]
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
<<<<<<< HEAD
    1374:	4b04      	ldr	r3, [pc, #16]	; (1388 <system_gclk_chan_enable+0x2c>)
    1376:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1378:	bd10      	pop	{r4, pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	000004c1 	.word	0x000004c1
    1380:	40000c02 	.word	0x40000c02
    1384:	40000c00 	.word	0x40000c00
    1388:	00000501 	.word	0x00000501

0000138c <system_gclk_chan_disable>:
=======
     898:	4b04      	ldr	r3, [pc, #16]	; (8ac <system_gclk_chan_enable+0x2c>)
     89a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     89c:	bd10      	pop	{r4, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00000389 	.word	0x00000389
     8a4:	40000c02 	.word	0x40000c02
     8a8:	40000c00 	.word	0x40000c00
     8ac:	000003c9 	.word	0x000003c9

000008b0 <system_gclk_chan_disable>:
>>>>>>> JJ's_Branch
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
<<<<<<< HEAD
    138c:	b510      	push	{r4, lr}
    138e:	1c04      	adds	r4, r0, #0
=======
     8b0:	b510      	push	{r4, lr}
     8b2:	1c04      	adds	r4, r0, #0
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
<<<<<<< HEAD
    1390:	4b0f      	ldr	r3, [pc, #60]	; (13d0 <system_gclk_chan_disable+0x44>)
    1392:	4798      	blx	r3
=======
     8b4:	4b0f      	ldr	r3, [pc, #60]	; (8f4 <system_gclk_chan_disable+0x44>)
     8b6:	4798      	blx	r3
>>>>>>> JJ's_Branch
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
<<<<<<< HEAD
    1394:	4b0f      	ldr	r3, [pc, #60]	; (13d4 <system_gclk_chan_disable+0x48>)
    1396:	701c      	strb	r4, [r3, #0]
=======
     8b8:	4b0f      	ldr	r3, [pc, #60]	; (8f8 <system_gclk_chan_disable+0x48>)
     8ba:	701c      	strb	r4, [r3, #0]
>>>>>>> JJ's_Branch

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
<<<<<<< HEAD
    1398:	4b0f      	ldr	r3, [pc, #60]	; (13d8 <system_gclk_chan_disable+0x4c>)
    139a:	8858      	ldrh	r0, [r3, #2]
    139c:	0500      	lsls	r0, r0, #20
    139e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    13a0:	8859      	ldrh	r1, [r3, #2]
    13a2:	4a0e      	ldr	r2, [pc, #56]	; (13dc <system_gclk_chan_disable+0x50>)
    13a4:	400a      	ands	r2, r1
    13a6:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    13a8:	8859      	ldrh	r1, [r3, #2]
    13aa:	4a0d      	ldr	r2, [pc, #52]	; (13e0 <system_gclk_chan_disable+0x54>)
    13ac:	400a      	ands	r2, r1
    13ae:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    13b0:	1c19      	adds	r1, r3, #0
    13b2:	2280      	movs	r2, #128	; 0x80
    13b4:	01d2      	lsls	r2, r2, #7
    13b6:	884b      	ldrh	r3, [r1, #2]
    13b8:	4213      	tst	r3, r2
    13ba:	d1fc      	bne.n	13b6 <system_gclk_chan_disable+0x2a>
=======
     8bc:	4b0f      	ldr	r3, [pc, #60]	; (8fc <system_gclk_chan_disable+0x4c>)
     8be:	8858      	ldrh	r0, [r3, #2]
     8c0:	0500      	lsls	r0, r0, #20
     8c2:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     8c4:	8859      	ldrh	r1, [r3, #2]
     8c6:	4a0e      	ldr	r2, [pc, #56]	; (900 <system_gclk_chan_disable+0x50>)
     8c8:	400a      	ands	r2, r1
     8ca:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     8cc:	8859      	ldrh	r1, [r3, #2]
     8ce:	4a0d      	ldr	r2, [pc, #52]	; (904 <system_gclk_chan_disable+0x54>)
     8d0:	400a      	ands	r2, r1
     8d2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     8d4:	1c19      	adds	r1, r3, #0
     8d6:	2280      	movs	r2, #128	; 0x80
     8d8:	01d2      	lsls	r2, r2, #7
     8da:	884b      	ldrh	r3, [r1, #2]
     8dc:	4213      	tst	r3, r2
     8de:	d1fc      	bne.n	8da <system_gclk_chan_disable+0x2a>
>>>>>>> JJ's_Branch
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
<<<<<<< HEAD
    13bc:	4b06      	ldr	r3, [pc, #24]	; (13d8 <system_gclk_chan_disable+0x4c>)
    13be:	0201      	lsls	r1, r0, #8
    13c0:	8858      	ldrh	r0, [r3, #2]
    13c2:	4a06      	ldr	r2, [pc, #24]	; (13dc <system_gclk_chan_disable+0x50>)
    13c4:	4002      	ands	r2, r0
    13c6:	430a      	orrs	r2, r1
    13c8:	805a      	strh	r2, [r3, #2]
=======
     8e0:	4b06      	ldr	r3, [pc, #24]	; (8fc <system_gclk_chan_disable+0x4c>)
     8e2:	0201      	lsls	r1, r0, #8
     8e4:	8858      	ldrh	r0, [r3, #2]
     8e6:	4a06      	ldr	r2, [pc, #24]	; (900 <system_gclk_chan_disable+0x50>)
     8e8:	4002      	ands	r2, r0
     8ea:	430a      	orrs	r2, r1
     8ec:	805a      	strh	r2, [r3, #2]
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
<<<<<<< HEAD
    13ca:	4b06      	ldr	r3, [pc, #24]	; (13e4 <system_gclk_chan_disable+0x58>)
    13cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13ce:	bd10      	pop	{r4, pc}
    13d0:	000004c1 	.word	0x000004c1
    13d4:	40000c02 	.word	0x40000c02
    13d8:	40000c00 	.word	0x40000c00
    13dc:	fffff0ff 	.word	0xfffff0ff
    13e0:	ffffbfff 	.word	0xffffbfff
    13e4:	00000501 	.word	0x00000501

000013e8 <system_gclk_chan_set_config>:
=======
     8ee:	4b06      	ldr	r3, [pc, #24]	; (908 <system_gclk_chan_disable+0x58>)
     8f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     8f2:	bd10      	pop	{r4, pc}
     8f4:	00000389 	.word	0x00000389
     8f8:	40000c02 	.word	0x40000c02
     8fc:	40000c00 	.word	0x40000c00
     900:	fffff0ff 	.word	0xfffff0ff
     904:	ffffbfff 	.word	0xffffbfff
     908:	000003c9 	.word	0x000003c9

0000090c <system_gclk_chan_set_config>:
>>>>>>> JJ's_Branch
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
<<<<<<< HEAD
    13e8:	b510      	push	{r4, lr}
=======
     90c:	b510      	push	{r4, lr}
>>>>>>> JJ's_Branch

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
<<<<<<< HEAD
    13ea:	780c      	ldrb	r4, [r1, #0]
    13ec:	0224      	lsls	r4, r4, #8
    13ee:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    13f0:	4b02      	ldr	r3, [pc, #8]	; (13fc <system_gclk_chan_set_config+0x14>)
    13f2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    13f4:	b2a4      	uxth	r4, r4
    13f6:	4b02      	ldr	r3, [pc, #8]	; (1400 <system_gclk_chan_set_config+0x18>)
    13f8:	805c      	strh	r4, [r3, #2]
}
    13fa:	bd10      	pop	{r4, pc}
    13fc:	0000138d 	.word	0x0000138d
    1400:	40000c00 	.word	0x40000c00

00001404 <system_gclk_chan_get_hz>:
=======
     90e:	780c      	ldrb	r4, [r1, #0]
     910:	0224      	lsls	r4, r4, #8
     912:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     914:	4b02      	ldr	r3, [pc, #8]	; (920 <system_gclk_chan_set_config+0x14>)
     916:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     918:	b2a4      	uxth	r4, r4
     91a:	4b02      	ldr	r3, [pc, #8]	; (924 <system_gclk_chan_set_config+0x18>)
     91c:	805c      	strh	r4, [r3, #2]
}
     91e:	bd10      	pop	{r4, pc}
     920:	000008b1 	.word	0x000008b1
     924:	40000c00 	.word	0x40000c00

00000928 <system_gclk_chan_get_hz>:
>>>>>>> JJ's_Branch
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
<<<<<<< HEAD
    1404:	b510      	push	{r4, lr}
    1406:	1c04      	adds	r4, r0, #0
=======
     928:	b510      	push	{r4, lr}
     92a:	1c04      	adds	r4, r0, #0
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
<<<<<<< HEAD
    1408:	4b06      	ldr	r3, [pc, #24]	; (1424 <system_gclk_chan_get_hz+0x20>)
    140a:	4798      	blx	r3
=======
     92c:	4b06      	ldr	r3, [pc, #24]	; (948 <system_gclk_chan_get_hz+0x20>)
     92e:	4798      	blx	r3
>>>>>>> JJ's_Branch
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
<<<<<<< HEAD
    140c:	4b06      	ldr	r3, [pc, #24]	; (1428 <system_gclk_chan_get_hz+0x24>)
    140e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1410:	4b06      	ldr	r3, [pc, #24]	; (142c <system_gclk_chan_get_hz+0x28>)
    1412:	885c      	ldrh	r4, [r3, #2]
    1414:	0524      	lsls	r4, r4, #20
    1416:	0f24      	lsrs	r4, r4, #28
=======
     930:	4b06      	ldr	r3, [pc, #24]	; (94c <system_gclk_chan_get_hz+0x24>)
     932:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     934:	4b06      	ldr	r3, [pc, #24]	; (950 <system_gclk_chan_get_hz+0x28>)
     936:	885c      	ldrh	r4, [r3, #2]
     938:	0524      	lsls	r4, r4, #20
     93a:	0f24      	lsrs	r4, r4, #28
>>>>>>> JJ's_Branch
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
<<<<<<< HEAD
    1418:	4b05      	ldr	r3, [pc, #20]	; (1430 <system_gclk_chan_get_hz+0x2c>)
    141a:	4798      	blx	r3
=======
     93c:	4b05      	ldr	r3, [pc, #20]	; (954 <system_gclk_chan_get_hz+0x2c>)
     93e:	4798      	blx	r3
>>>>>>> JJ's_Branch

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
<<<<<<< HEAD
    141c:	1c20      	adds	r0, r4, #0
    141e:	4b05      	ldr	r3, [pc, #20]	; (1434 <system_gclk_chan_get_hz+0x30>)
    1420:	4798      	blx	r3
}
    1422:	bd10      	pop	{r4, pc}
    1424:	000004c1 	.word	0x000004c1
    1428:	40000c02 	.word	0x40000c02
    142c:	40000c00 	.word	0x40000c00
    1430:	00000501 	.word	0x00000501
    1434:	000012d1 	.word	0x000012d1

00001438 <_system_pinmux_config>:
=======
     940:	1c20      	adds	r0, r4, #0
     942:	4b05      	ldr	r3, [pc, #20]	; (958 <system_gclk_chan_get_hz+0x30>)
     944:	4798      	blx	r3
}
     946:	bd10      	pop	{r4, pc}
     948:	00000389 	.word	0x00000389
     94c:	40000c02 	.word	0x40000c02
     950:	40000c00 	.word	0x40000c00
     954:	000003c9 	.word	0x000003c9
     958:	000007f5 	.word	0x000007f5

0000095c <_system_pinmux_config>:
>>>>>>> JJ's_Branch
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
<<<<<<< HEAD
    1438:	b530      	push	{r4, r5, lr}
=======
     95c:	b530      	push	{r4, r5, lr}
>>>>>>> JJ's_Branch

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
<<<<<<< HEAD
    143a:	78d3      	ldrb	r3, [r2, #3]
    143c:	2b00      	cmp	r3, #0
    143e:	d11e      	bne.n	147e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1440:	7813      	ldrb	r3, [r2, #0]
    1442:	2b80      	cmp	r3, #128	; 0x80
    1444:	d004      	beq.n	1450 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1446:	061b      	lsls	r3, r3, #24
    1448:	2480      	movs	r4, #128	; 0x80
    144a:	0264      	lsls	r4, r4, #9
    144c:	4323      	orrs	r3, r4
    144e:	e000      	b.n	1452 <_system_pinmux_config+0x1a>
=======
     95e:	78d3      	ldrb	r3, [r2, #3]
     960:	2b00      	cmp	r3, #0
     962:	d11e      	bne.n	9a2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     964:	7813      	ldrb	r3, [r2, #0]
     966:	2b80      	cmp	r3, #128	; 0x80
     968:	d004      	beq.n	974 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     96a:	061b      	lsls	r3, r3, #24
     96c:	2480      	movs	r4, #128	; 0x80
     96e:	0264      	lsls	r4, r4, #9
     970:	4323      	orrs	r3, r4
     972:	e000      	b.n	976 <_system_pinmux_config+0x1a>
>>>>>>> JJ's_Branch
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
<<<<<<< HEAD
    1450:	2300      	movs	r3, #0
=======
     974:	2300      	movs	r3, #0
>>>>>>> JJ's_Branch
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
<<<<<<< HEAD
    1452:	7854      	ldrb	r4, [r2, #1]
    1454:	2502      	movs	r5, #2
    1456:	43ac      	bics	r4, r5
    1458:	d10a      	bne.n	1470 <_system_pinmux_config+0x38>
=======
     976:	7854      	ldrb	r4, [r2, #1]
     978:	2502      	movs	r5, #2
     97a:	43ac      	bics	r4, r5
     97c:	d10a      	bne.n	994 <_system_pinmux_config+0x38>
>>>>>>> JJ's_Branch
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
<<<<<<< HEAD
    145a:	7894      	ldrb	r4, [r2, #2]
    145c:	2c00      	cmp	r4, #0
    145e:	d103      	bne.n	1468 <_system_pinmux_config+0x30>
=======
     97e:	7894      	ldrb	r4, [r2, #2]
     980:	2c00      	cmp	r4, #0
     982:	d103      	bne.n	98c <_system_pinmux_config+0x30>
>>>>>>> JJ's_Branch

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
<<<<<<< HEAD
    1460:	2480      	movs	r4, #128	; 0x80
    1462:	02a4      	lsls	r4, r4, #10
    1464:	4323      	orrs	r3, r4
    1466:	e002      	b.n	146e <_system_pinmux_config+0x36>
=======
     984:	2480      	movs	r4, #128	; 0x80
     986:	02a4      	lsls	r4, r4, #10
     988:	4323      	orrs	r3, r4
     98a:	e002      	b.n	992 <_system_pinmux_config+0x36>
>>>>>>> JJ's_Branch

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
<<<<<<< HEAD
    1468:	24c0      	movs	r4, #192	; 0xc0
    146a:	02e4      	lsls	r4, r4, #11
    146c:	4323      	orrs	r3, r4
=======
     98c:	24c0      	movs	r4, #192	; 0xc0
     98e:	02e4      	lsls	r4, r4, #11
     990:	4323      	orrs	r3, r4
>>>>>>> JJ's_Branch
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
<<<<<<< HEAD
    146e:	6041      	str	r1, [r0, #4]
=======
     992:	6041      	str	r1, [r0, #4]
>>>>>>> JJ's_Branch
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
<<<<<<< HEAD
    1470:	7854      	ldrb	r4, [r2, #1]
    1472:	3c01      	subs	r4, #1
    1474:	2c01      	cmp	r4, #1
    1476:	d804      	bhi.n	1482 <_system_pinmux_config+0x4a>
=======
     994:	7854      	ldrb	r4, [r2, #1]
     996:	3c01      	subs	r4, #1
     998:	2c01      	cmp	r4, #1
     99a:	d804      	bhi.n	9a6 <_system_pinmux_config+0x4a>
>>>>>>> JJ's_Branch
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
<<<<<<< HEAD
    1478:	4c11      	ldr	r4, [pc, #68]	; (14c0 <_system_pinmux_config+0x88>)
    147a:	4023      	ands	r3, r4
    147c:	e001      	b.n	1482 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    147e:	6041      	str	r1, [r0, #4]
=======
     99c:	4c11      	ldr	r4, [pc, #68]	; (9e4 <_system_pinmux_config+0x88>)
     99e:	4023      	ands	r3, r4
     9a0:	e001      	b.n	9a6 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     9a2:	6041      	str	r1, [r0, #4]
>>>>>>> JJ's_Branch
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
<<<<<<< HEAD
    1480:	2300      	movs	r3, #0
=======
     9a4:	2300      	movs	r3, #0
>>>>>>> JJ's_Branch
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
<<<<<<< HEAD
    1482:	040d      	lsls	r5, r1, #16
    1484:	0c2d      	lsrs	r5, r5, #16
=======
     9a6:	040d      	lsls	r5, r1, #16
     9a8:	0c2d      	lsrs	r5, r5, #16
>>>>>>> JJ's_Branch
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
<<<<<<< HEAD
    1486:	24a0      	movs	r4, #160	; 0xa0
    1488:	05e4      	lsls	r4, r4, #23
    148a:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    148c:	431c      	orrs	r4, r3
=======
     9aa:	24a0      	movs	r4, #160	; 0xa0
     9ac:	05e4      	lsls	r4, r4, #23
     9ae:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     9b0:	431c      	orrs	r4, r3
>>>>>>> JJ's_Branch
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
<<<<<<< HEAD
    148e:	6284      	str	r4, [r0, #40]	; 0x28
=======
     9b2:	6284      	str	r4, [r0, #40]	; 0x28
>>>>>>> JJ's_Branch
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
<<<<<<< HEAD
    1490:	0c0d      	lsrs	r5, r1, #16
=======
     9b4:	0c0d      	lsrs	r5, r1, #16
>>>>>>> JJ's_Branch
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
<<<<<<< HEAD
    1492:	24d0      	movs	r4, #208	; 0xd0
    1494:	0624      	lsls	r4, r4, #24
    1496:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1498:	431c      	orrs	r4, r3
=======
     9b6:	24d0      	movs	r4, #208	; 0xd0
     9b8:	0624      	lsls	r4, r4, #24
     9ba:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     9bc:	431c      	orrs	r4, r3
>>>>>>> JJ's_Branch
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
<<<<<<< HEAD
    149a:	6284      	str	r4, [r0, #40]	; 0x28
=======
     9be:	6284      	str	r4, [r0, #40]	; 0x28
>>>>>>> JJ's_Branch
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
<<<<<<< HEAD
    149c:	78d4      	ldrb	r4, [r2, #3]
    149e:	2c00      	cmp	r4, #0
    14a0:	d10c      	bne.n	14bc <_system_pinmux_config+0x84>
=======
     9c0:	78d4      	ldrb	r4, [r2, #3]
     9c2:	2c00      	cmp	r4, #0
     9c4:	d10c      	bne.n	9e0 <_system_pinmux_config+0x84>
>>>>>>> JJ's_Branch
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
<<<<<<< HEAD
    14a2:	035c      	lsls	r4, r3, #13
    14a4:	d505      	bpl.n	14b2 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    14a6:	7893      	ldrb	r3, [r2, #2]
    14a8:	2b01      	cmp	r3, #1
    14aa:	d101      	bne.n	14b0 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    14ac:	6181      	str	r1, [r0, #24]
    14ae:	e000      	b.n	14b2 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    14b0:	6141      	str	r1, [r0, #20]
=======
     9c6:	035c      	lsls	r4, r3, #13
     9c8:	d505      	bpl.n	9d6 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     9ca:	7893      	ldrb	r3, [r2, #2]
     9cc:	2b01      	cmp	r3, #1
     9ce:	d101      	bne.n	9d4 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
     9d0:	6181      	str	r1, [r0, #24]
     9d2:	e000      	b.n	9d6 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
     9d4:	6141      	str	r1, [r0, #20]
>>>>>>> JJ's_Branch
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
<<<<<<< HEAD
    14b2:	7853      	ldrb	r3, [r2, #1]
    14b4:	3b01      	subs	r3, #1
    14b6:	2b01      	cmp	r3, #1
    14b8:	d800      	bhi.n	14bc <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    14ba:	6081      	str	r1, [r0, #8]
		}
	}
}
    14bc:	bd30      	pop	{r4, r5, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	fffbffff 	.word	0xfffbffff

000014c4 <system_pinmux_pin_set_config>:
=======
     9d6:	7853      	ldrb	r3, [r2, #1]
     9d8:	3b01      	subs	r3, #1
     9da:	2b01      	cmp	r3, #1
     9dc:	d800      	bhi.n	9e0 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     9de:	6081      	str	r1, [r0, #8]
		}
	}
}
     9e0:	bd30      	pop	{r4, r5, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	fffbffff 	.word	0xfffbffff

000009e8 <system_pinmux_pin_set_config>:
>>>>>>> JJ's_Branch
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
<<<<<<< HEAD
    14c4:	b508      	push	{r3, lr}
    14c6:	1c03      	adds	r3, r0, #0
    14c8:	1c0a      	adds	r2, r1, #0
=======
     9e8:	b508      	push	{r3, lr}
     9ea:	1c03      	adds	r3, r0, #0
     9ec:	1c0a      	adds	r2, r1, #0
>>>>>>> JJ's_Branch
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
<<<<<<< HEAD
    14ca:	09c1      	lsrs	r1, r0, #7
=======
     9ee:	09c1      	lsrs	r1, r0, #7
>>>>>>> JJ's_Branch
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
<<<<<<< HEAD
    14cc:	2000      	movs	r0, #0
=======
     9f0:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
<<<<<<< HEAD
    14ce:	2900      	cmp	r1, #0
    14d0:	d103      	bne.n	14da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    14d2:	0958      	lsrs	r0, r3, #5
    14d4:	01c0      	lsls	r0, r0, #7
    14d6:	4904      	ldr	r1, [pc, #16]	; (14e8 <system_pinmux_pin_set_config+0x24>)
    14d8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    14da:	211f      	movs	r1, #31
    14dc:	400b      	ands	r3, r1
    14de:	2101      	movs	r1, #1
    14e0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    14e2:	4b02      	ldr	r3, [pc, #8]	; (14ec <system_pinmux_pin_set_config+0x28>)
    14e4:	4798      	blx	r3
}
    14e6:	bd08      	pop	{r3, pc}
    14e8:	41004400 	.word	0x41004400
    14ec:	00001439 	.word	0x00001439

000014f0 <_system_dummy_init>:
=======
     9f2:	2900      	cmp	r1, #0
     9f4:	d103      	bne.n	9fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     9f6:	0958      	lsrs	r0, r3, #5
     9f8:	01c0      	lsls	r0, r0, #7
     9fa:	4904      	ldr	r1, [pc, #16]	; (a0c <system_pinmux_pin_set_config+0x24>)
     9fc:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     9fe:	211f      	movs	r1, #31
     a00:	400b      	ands	r3, r1
     a02:	2101      	movs	r1, #1
     a04:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
     a06:	4b02      	ldr	r3, [pc, #8]	; (a10 <system_pinmux_pin_set_config+0x28>)
     a08:	4798      	blx	r3
}
     a0a:	bd08      	pop	{r3, pc}
     a0c:	41004400 	.word	0x41004400
     a10:	0000095d 	.word	0x0000095d

00000a14 <_system_dummy_init>:
>>>>>>> JJ's_Branch
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
<<<<<<< HEAD
    14f0:	4770      	bx	lr
    14f2:	46c0      	nop			; (mov r8, r8)

000014f4 <system_init>:
=======
     a14:	4770      	bx	lr
     a16:	46c0      	nop			; (mov r8, r8)

00000a18 <system_init>:
>>>>>>> JJ's_Branch
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
<<<<<<< HEAD
    14f4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    14f6:	4b04      	ldr	r3, [pc, #16]	; (1508 <system_init+0x14>)
    14f8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    14fa:	4b04      	ldr	r3, [pc, #16]	; (150c <system_init+0x18>)
    14fc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    14fe:	4b04      	ldr	r3, [pc, #16]	; (1510 <system_init+0x1c>)
    1500:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1502:	4b04      	ldr	r3, [pc, #16]	; (1514 <system_init+0x20>)
    1504:	4798      	blx	r3
}
    1506:	bd08      	pop	{r3, pc}
    1508:	000010fd 	.word	0x000010fd
    150c:	00000531 	.word	0x00000531
    1510:	000014f1 	.word	0x000014f1
    1514:	00000131 	.word	0x00000131

00001518 <Dummy_Handler>:
=======
     a18:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     a1a:	4b04      	ldr	r3, [pc, #16]	; (a2c <system_init+0x14>)
     a1c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     a1e:	4b04      	ldr	r3, [pc, #16]	; (a30 <system_init+0x18>)
     a20:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     a22:	4b04      	ldr	r3, [pc, #16]	; (a34 <system_init+0x1c>)
     a24:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     a26:	4b04      	ldr	r3, [pc, #16]	; (a38 <system_init+0x20>)
     a28:	4798      	blx	r3
}
     a2a:	bd08      	pop	{r3, pc}
     a2c:	00000621 	.word	0x00000621
     a30:	000003f9 	.word	0x000003f9
     a34:	00000a15 	.word	0x00000a15
     a38:	00000131 	.word	0x00000131

00000a3c <Dummy_Handler>:
>>>>>>> JJ's_Branch

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
<<<<<<< HEAD
    1518:	e7fe      	b.n	1518 <Dummy_Handler>
    151a:	46c0      	nop			; (mov r8, r8)

0000151c <Reset_Handler>:
=======
     a3c:	e7fe      	b.n	a3c <Dummy_Handler>
     a3e:	46c0      	nop			; (mov r8, r8)

00000a40 <Reset_Handler>:
>>>>>>> JJ's_Branch
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
<<<<<<< HEAD
    151c:	b510      	push	{r4, lr}
=======
     a40:	b510      	push	{r4, lr}
>>>>>>> JJ's_Branch

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
<<<<<<< HEAD
    151e:	4b1c      	ldr	r3, [pc, #112]	; (1590 <Reset_Handler+0x74>)
    1520:	4a1c      	ldr	r2, [pc, #112]	; (1594 <Reset_Handler+0x78>)
    1522:	429a      	cmp	r2, r3
    1524:	d003      	beq.n	152e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1526:	4b1c      	ldr	r3, [pc, #112]	; (1598 <Reset_Handler+0x7c>)
    1528:	4a19      	ldr	r2, [pc, #100]	; (1590 <Reset_Handler+0x74>)
    152a:	429a      	cmp	r2, r3
    152c:	d304      	bcc.n	1538 <Reset_Handler+0x1c>
=======
     a42:	4b1c      	ldr	r3, [pc, #112]	; (ab4 <Reset_Handler+0x74>)
     a44:	4a1c      	ldr	r2, [pc, #112]	; (ab8 <Reset_Handler+0x78>)
     a46:	429a      	cmp	r2, r3
     a48:	d003      	beq.n	a52 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     a4a:	4b1c      	ldr	r3, [pc, #112]	; (abc <Reset_Handler+0x7c>)
     a4c:	4a19      	ldr	r2, [pc, #100]	; (ab4 <Reset_Handler+0x74>)
     a4e:	429a      	cmp	r2, r3
     a50:	d304      	bcc.n	a5c <Reset_Handler+0x1c>
>>>>>>> JJ's_Branch
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
<<<<<<< HEAD
    152e:	4b1b      	ldr	r3, [pc, #108]	; (159c <Reset_Handler+0x80>)
    1530:	4a1b      	ldr	r2, [pc, #108]	; (15a0 <Reset_Handler+0x84>)
    1532:	429a      	cmp	r2, r3
    1534:	d310      	bcc.n	1558 <Reset_Handler+0x3c>
    1536:	e01b      	b.n	1570 <Reset_Handler+0x54>
    1538:	4b1a      	ldr	r3, [pc, #104]	; (15a4 <Reset_Handler+0x88>)
    153a:	4817      	ldr	r0, [pc, #92]	; (1598 <Reset_Handler+0x7c>)
    153c:	3003      	adds	r0, #3
    153e:	1ac0      	subs	r0, r0, r3
    1540:	0880      	lsrs	r0, r0, #2
    1542:	3001      	adds	r0, #1
    1544:	0080      	lsls	r0, r0, #2
=======
     a52:	4b1b      	ldr	r3, [pc, #108]	; (ac0 <Reset_Handler+0x80>)
     a54:	4a1b      	ldr	r2, [pc, #108]	; (ac4 <Reset_Handler+0x84>)
     a56:	429a      	cmp	r2, r3
     a58:	d310      	bcc.n	a7c <Reset_Handler+0x3c>
     a5a:	e01b      	b.n	a94 <Reset_Handler+0x54>
     a5c:	4b1a      	ldr	r3, [pc, #104]	; (ac8 <Reset_Handler+0x88>)
     a5e:	4817      	ldr	r0, [pc, #92]	; (abc <Reset_Handler+0x7c>)
     a60:	3003      	adds	r0, #3
     a62:	1ac0      	subs	r0, r0, r3
     a64:	0880      	lsrs	r0, r0, #2
     a66:	3001      	adds	r0, #1
     a68:	0080      	lsls	r0, r0, #2
>>>>>>> JJ's_Branch
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
<<<<<<< HEAD
    1546:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1548:	4911      	ldr	r1, [pc, #68]	; (1590 <Reset_Handler+0x74>)
    154a:	4a12      	ldr	r2, [pc, #72]	; (1594 <Reset_Handler+0x78>)
    154c:	58d4      	ldr	r4, [r2, r3]
    154e:	50cc      	str	r4, [r1, r3]
    1550:	3304      	adds	r3, #4
=======
     a6a:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
     a6c:	4911      	ldr	r1, [pc, #68]	; (ab4 <Reset_Handler+0x74>)
     a6e:	4a12      	ldr	r2, [pc, #72]	; (ab8 <Reset_Handler+0x78>)
     a70:	58d4      	ldr	r4, [r2, r3]
     a72:	50cc      	str	r4, [r1, r3]
     a74:	3304      	adds	r3, #4
>>>>>>> JJ's_Branch
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
<<<<<<< HEAD
    1552:	4283      	cmp	r3, r0
    1554:	d1fa      	bne.n	154c <Reset_Handler+0x30>
    1556:	e7ea      	b.n	152e <Reset_Handler+0x12>
    1558:	4b11      	ldr	r3, [pc, #68]	; (15a0 <Reset_Handler+0x84>)
    155a:	1d1a      	adds	r2, r3, #4
    155c:	490f      	ldr	r1, [pc, #60]	; (159c <Reset_Handler+0x80>)
    155e:	3103      	adds	r1, #3
    1560:	1a89      	subs	r1, r1, r2
    1562:	0889      	lsrs	r1, r1, #2
    1564:	0089      	lsls	r1, r1, #2
    1566:	1852      	adds	r2, r2, r1
=======
     a76:	4283      	cmp	r3, r0
     a78:	d1fa      	bne.n	a70 <Reset_Handler+0x30>
     a7a:	e7ea      	b.n	a52 <Reset_Handler+0x12>
     a7c:	4b11      	ldr	r3, [pc, #68]	; (ac4 <Reset_Handler+0x84>)
     a7e:	1d1a      	adds	r2, r3, #4
     a80:	490f      	ldr	r1, [pc, #60]	; (ac0 <Reset_Handler+0x80>)
     a82:	3103      	adds	r1, #3
     a84:	1a89      	subs	r1, r1, r2
     a86:	0889      	lsrs	r1, r1, #2
     a88:	0089      	lsls	r1, r1, #2
     a8a:	1852      	adds	r2, r2, r1
>>>>>>> JJ's_Branch
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
<<<<<<< HEAD
    1568:	2100      	movs	r1, #0
    156a:	c302      	stmia	r3!, {r1}
=======
     a8c:	2100      	movs	r1, #0
     a8e:	c302      	stmia	r3!, {r1}
>>>>>>> JJ's_Branch
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
<<<<<<< HEAD
    156c:	4293      	cmp	r3, r2
    156e:	d1fc      	bne.n	156a <Reset_Handler+0x4e>
=======
     a90:	4293      	cmp	r3, r2
     a92:	d1fc      	bne.n	a8e <Reset_Handler+0x4e>
>>>>>>> JJ's_Branch
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
<<<<<<< HEAD
    1570:	4b0d      	ldr	r3, [pc, #52]	; (15a8 <Reset_Handler+0x8c>)
    1572:	217f      	movs	r1, #127	; 0x7f
    1574:	4a0d      	ldr	r2, [pc, #52]	; (15ac <Reset_Handler+0x90>)
    1576:	438a      	bics	r2, r1
    1578:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    157a:	4b0d      	ldr	r3, [pc, #52]	; (15b0 <Reset_Handler+0x94>)
    157c:	6859      	ldr	r1, [r3, #4]
    157e:	2280      	movs	r2, #128	; 0x80
    1580:	430a      	orrs	r2, r1
    1582:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1584:	4b0b      	ldr	r3, [pc, #44]	; (15b4 <Reset_Handler+0x98>)
    1586:	4798      	blx	r3

        /* Branch to main function */
        main();
    1588:	4b0b      	ldr	r3, [pc, #44]	; (15b8 <Reset_Handler+0x9c>)
    158a:	4798      	blx	r3
    158c:	e7fe      	b.n	158c <Reset_Handler+0x70>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	20000000 	.word	0x20000000
    1594:	00003ffc 	.word	0x00003ffc
    1598:	20000070 	.word	0x20000070
    159c:	20003d68 	.word	0x20003d68
    15a0:	20000070 	.word	0x20000070
    15a4:	20000004 	.word	0x20000004
    15a8:	e000ed00 	.word	0xe000ed00
    15ac:	00000000 	.word	0x00000000
    15b0:	41004000 	.word	0x41004000
    15b4:	00002edd 	.word	0x00002edd
    15b8:	00002ddd 	.word	0x00002ddd

000015bc <_sbrk>:
=======
     a94:	4b0d      	ldr	r3, [pc, #52]	; (acc <Reset_Handler+0x8c>)
     a96:	217f      	movs	r1, #127	; 0x7f
     a98:	4a0d      	ldr	r2, [pc, #52]	; (ad0 <Reset_Handler+0x90>)
     a9a:	438a      	bics	r2, r1
     a9c:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     a9e:	4b0d      	ldr	r3, [pc, #52]	; (ad4 <Reset_Handler+0x94>)
     aa0:	6859      	ldr	r1, [r3, #4]
     aa2:	2280      	movs	r2, #128	; 0x80
     aa4:	430a      	orrs	r2, r1
     aa6:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
     aa8:	4b0b      	ldr	r3, [pc, #44]	; (ad8 <Reset_Handler+0x98>)
     aaa:	4798      	blx	r3

        /* Branch to main function */
        main();
     aac:	4b0b      	ldr	r3, [pc, #44]	; (adc <Reset_Handler+0x9c>)
     aae:	4798      	blx	r3
     ab0:	e7fe      	b.n	ab0 <Reset_Handler+0x70>
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	20000000 	.word	0x20000000
     ab8:	00003388 	.word	0x00003388
     abc:	20000070 	.word	0x20000070
     ac0:	20003d14 	.word	0x20003d14
     ac4:	20000070 	.word	0x20000070
     ac8:	20000004 	.word	0x20000004
     acc:	e000ed00 	.word	0xe000ed00
     ad0:	00000000 	.word	0x00000000
     ad4:	41004000 	.word	0x41004000
     ad8:	000023b9 	.word	0x000023b9
     adc:	000022fd 	.word	0x000022fd

00000ae0 <_sbrk>:
>>>>>>> JJ's_Branch
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
<<<<<<< HEAD
    15bc:	4b06      	ldr	r3, [pc, #24]	; (15d8 <_sbrk+0x1c>)
    15be:	681b      	ldr	r3, [r3, #0]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d102      	bne.n	15ca <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    15c4:	4a05      	ldr	r2, [pc, #20]	; (15dc <_sbrk+0x20>)
    15c6:	4b04      	ldr	r3, [pc, #16]	; (15d8 <_sbrk+0x1c>)
    15c8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    15ca:	4a03      	ldr	r2, [pc, #12]	; (15d8 <_sbrk+0x1c>)
    15cc:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    15ce:	1818      	adds	r0, r3, r0
    15d0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    15d2:	1c18      	adds	r0, r3, #0
    15d4:	4770      	bx	lr
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	20000100 	.word	0x20000100
    15dc:	20005d68 	.word	0x20005d68

000015e0 <_close>:
=======
     ae0:	4b06      	ldr	r3, [pc, #24]	; (afc <_sbrk+0x1c>)
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	2b00      	cmp	r3, #0
     ae6:	d102      	bne.n	aee <_sbrk+0xe>
		heap = (unsigned char *)&_end;
     ae8:	4a05      	ldr	r2, [pc, #20]	; (b00 <_sbrk+0x20>)
     aea:	4b04      	ldr	r3, [pc, #16]	; (afc <_sbrk+0x1c>)
     aec:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
     aee:	4a03      	ldr	r2, [pc, #12]	; (afc <_sbrk+0x1c>)
     af0:	6813      	ldr	r3, [r2, #0]

	heap += incr;
     af2:	1818      	adds	r0, r3, r0
     af4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
     af6:	1c18      	adds	r0, r3, #0
     af8:	4770      	bx	lr
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	200000c4 	.word	0x200000c4
     b00:	20005d18 	.word	0x20005d18

00000b04 <_close>:
>>>>>>> JJ's_Branch
	return -1;
}

extern int _close(int file)
{
	return -1;
<<<<<<< HEAD
    15e0:	2001      	movs	r0, #1
}
    15e2:	4240      	negs	r0, r0
    15e4:	4770      	bx	lr
    15e6:	46c0      	nop			; (mov r8, r8)

000015e8 <_fstat>:
=======
     b04:	2001      	movs	r0, #1
}
     b06:	4240      	negs	r0, r0
     b08:	4770      	bx	lr
     b0a:	46c0      	nop			; (mov r8, r8)

00000b0c <_fstat>:
>>>>>>> JJ's_Branch

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
<<<<<<< HEAD
    15e8:	2380      	movs	r3, #128	; 0x80
    15ea:	019b      	lsls	r3, r3, #6
    15ec:	604b      	str	r3, [r1, #4]

	return 0;
}
    15ee:	2000      	movs	r0, #0
    15f0:	4770      	bx	lr
    15f2:	46c0      	nop			; (mov r8, r8)

000015f4 <_isatty>:
=======
     b0c:	2380      	movs	r3, #128	; 0x80
     b0e:	019b      	lsls	r3, r3, #6
     b10:	604b      	str	r3, [r1, #4]

	return 0;
}
     b12:	2000      	movs	r0, #0
     b14:	4770      	bx	lr
     b16:	46c0      	nop			; (mov r8, r8)

00000b18 <_isatty>:
>>>>>>> JJ's_Branch

extern int _isatty(int file)
{
	return 1;
}
<<<<<<< HEAD
    15f4:	2001      	movs	r0, #1
    15f6:	4770      	bx	lr

000015f8 <_lseek>:
=======
     b18:	2001      	movs	r0, #1
     b1a:	4770      	bx	lr

00000b1c <_lseek>:
>>>>>>> JJ's_Branch

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
<<<<<<< HEAD
    15f8:	2000      	movs	r0, #0
    15fa:	4770      	bx	lr

000015fc <xEventGroupCreate>:
=======
     b1c:	2000      	movs	r0, #0
     b1e:	4770      	bx	lr

00000b20 <xEventGroupCreate>:
>>>>>>> JJ's_Branch
static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits );

/*-----------------------------------------------------------*/

EventGroupHandle_t xEventGroupCreate( void )
{
<<<<<<< HEAD
    15fc:	b510      	push	{r4, lr}
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
    15fe:	2018      	movs	r0, #24
    1600:	4b04      	ldr	r3, [pc, #16]	; (1614 <xEventGroupCreate+0x18>)
    1602:	4798      	blx	r3
    1604:	1e04      	subs	r4, r0, #0
	if( pxEventBits != NULL )
    1606:	d003      	beq.n	1610 <xEventGroupCreate+0x14>
	{
		pxEventBits->uxEventBits = 0;
    1608:	2300      	movs	r3, #0
    160a:	c008      	stmia	r0!, {r3}
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    160c:	4b02      	ldr	r3, [pc, #8]	; (1618 <xEventGroupCreate+0x1c>)
    160e:	4798      	blx	r3
=======
     b20:	b510      	push	{r4, lr}
EventGroup_t *pxEventBits;

	pxEventBits = pvPortMalloc( sizeof( EventGroup_t ) );
     b22:	2018      	movs	r0, #24
     b24:	4b04      	ldr	r3, [pc, #16]	; (b38 <xEventGroupCreate+0x18>)
     b26:	4798      	blx	r3
     b28:	1e04      	subs	r4, r0, #0
	if( pxEventBits != NULL )
     b2a:	d003      	beq.n	b34 <xEventGroupCreate+0x14>
	{
		pxEventBits->uxEventBits = 0;
     b2c:	2300      	movs	r3, #0
     b2e:	c008      	stmia	r0!, {r3}
		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     b30:	4b02      	ldr	r3, [pc, #8]	; (b3c <xEventGroupCreate+0x1c>)
     b32:	4798      	blx	r3
>>>>>>> JJ's_Branch
	{
		traceEVENT_GROUP_CREATE_FAILED();
	}

	return ( EventGroupHandle_t ) pxEventBits;
}
<<<<<<< HEAD
    1610:	1c20      	adds	r0, r4, #0
    1612:	bd10      	pop	{r4, pc}
    1614:	00001851 	.word	0x00001851
    1618:	0000161d 	.word	0x0000161d

0000161c <vListInitialise>:
=======
     b34:	1c20      	adds	r0, r4, #0
     b36:	bd10      	pop	{r4, pc}
     b38:	00000d75 	.word	0x00000d75
     b3c:	00000b41 	.word	0x00000b41

00000b40 <vListInitialise>:
>>>>>>> JJ's_Branch
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
    161c:	1c03      	adds	r3, r0, #0
    161e:	3308      	adds	r3, #8
    1620:	6043      	str	r3, [r0, #4]
=======
     b40:	1c03      	adds	r3, r0, #0
     b42:	3308      	adds	r3, #8
     b44:	6043      	str	r3, [r0, #4]
>>>>>>> JJ's_Branch

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
    1622:	2201      	movs	r2, #1
    1624:	4252      	negs	r2, r2
    1626:	6082      	str	r2, [r0, #8]
=======
     b46:	2201      	movs	r2, #1
     b48:	4252      	negs	r2, r2
     b4a:	6082      	str	r2, [r0, #8]
>>>>>>> JJ's_Branch

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
    1628:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    162a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    162c:	2300      	movs	r3, #0
    162e:	6003      	str	r3, [r0, #0]
}
    1630:	4770      	bx	lr
    1632:	46c0      	nop			; (mov r8, r8)

00001634 <vListInitialiseItem>:
=======
     b4c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b4e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b50:	2300      	movs	r3, #0
     b52:	6003      	str	r3, [r0, #0]
}
     b54:	4770      	bx	lr
     b56:	46c0      	nop			; (mov r8, r8)

00000b58 <vListInitialiseItem>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
<<<<<<< HEAD
    1634:	2300      	movs	r3, #0
    1636:	6103      	str	r3, [r0, #16]
}
    1638:	4770      	bx	lr
    163a:	46c0      	nop			; (mov r8, r8)

0000163c <vListInsertEnd>:
=======
     b58:	2300      	movs	r3, #0
     b5a:	6103      	str	r3, [r0, #16]
}
     b5c:	4770      	bx	lr
     b5e:	46c0      	nop			; (mov r8, r8)

00000b60 <vListInsertEnd>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
<<<<<<< HEAD
    163c:	6843      	ldr	r3, [r0, #4]
=======
     b60:	6843      	ldr	r3, [r0, #4]
>>>>>>> JJ's_Branch

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
    163e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1640:	689a      	ldr	r2, [r3, #8]
    1642:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1644:	689a      	ldr	r2, [r3, #8]
    1646:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1648:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    164a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    164c:	6803      	ldr	r3, [r0, #0]
    164e:	3301      	adds	r3, #1
    1650:	6003      	str	r3, [r0, #0]
}
    1652:	4770      	bx	lr

00001654 <vListInsert>:
=======
     b62:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     b64:	689a      	ldr	r2, [r3, #8]
     b66:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     b68:	689a      	ldr	r2, [r3, #8]
     b6a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     b6c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b6e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     b70:	6803      	ldr	r3, [r0, #0]
     b72:	3301      	adds	r3, #1
     b74:	6003      	str	r3, [r0, #0]
}
     b76:	4770      	bx	lr

00000b78 <vListInsert>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
    1654:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1656:	680c      	ldr	r4, [r1, #0]
=======
     b78:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     b7a:	680c      	ldr	r4, [r1, #0]
>>>>>>> JJ's_Branch
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
    1658:	1c02      	adds	r2, r0, #0
    165a:	3208      	adds	r2, #8
=======
     b7c:	1c02      	adds	r2, r0, #0
     b7e:	3208      	adds	r2, #8
>>>>>>> JJ's_Branch
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
    165c:	1c63      	adds	r3, r4, #1
    165e:	d101      	bne.n	1664 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1660:	6902      	ldr	r2, [r0, #16]
    1662:	e005      	b.n	1670 <vListInsert+0x1c>
=======
     b80:	1c63      	adds	r3, r4, #1
     b82:	d101      	bne.n	b88 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     b84:	6902      	ldr	r2, [r0, #16]
     b86:	e005      	b.n	b94 <vListInsert+0x1c>
>>>>>>> JJ's_Branch
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
    1664:	6853      	ldr	r3, [r2, #4]
    1666:	681d      	ldr	r5, [r3, #0]
    1668:	42ac      	cmp	r4, r5
    166a:	d301      	bcc.n	1670 <vListInsert+0x1c>
    166c:	1c1a      	adds	r2, r3, #0
    166e:	e7f9      	b.n	1664 <vListInsert+0x10>
=======
     b88:	6853      	ldr	r3, [r2, #4]
     b8a:	681d      	ldr	r5, [r3, #0]
     b8c:	42ac      	cmp	r4, r5
     b8e:	d301      	bcc.n	b94 <vListInsert+0x1c>
     b90:	1c1a      	adds	r2, r3, #0
     b92:	e7f9      	b.n	b88 <vListInsert+0x10>
>>>>>>> JJ's_Branch
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
    1670:	6853      	ldr	r3, [r2, #4]
    1672:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1674:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1676:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    1678:	6051      	str	r1, [r2, #4]
=======
     b94:	6853      	ldr	r3, [r2, #4]
     b96:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b98:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     b9a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     b9c:	6051      	str	r1, [r2, #4]
>>>>>>> JJ's_Branch

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
<<<<<<< HEAD
    167a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    167c:	6803      	ldr	r3, [r0, #0]
    167e:	3301      	adds	r3, #1
    1680:	6003      	str	r3, [r0, #0]
}
    1682:	bd30      	pop	{r4, r5, pc}

00001684 <uxListRemove>:
=======
     b9e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     ba0:	6803      	ldr	r3, [r0, #0]
     ba2:	3301      	adds	r3, #1
     ba4:	6003      	str	r3, [r0, #0]
}
     ba6:	bd30      	pop	{r4, r5, pc}

00000ba8 <uxListRemove>:
>>>>>>> JJ's_Branch

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
<<<<<<< HEAD
    1684:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1686:	6842      	ldr	r2, [r0, #4]
    1688:	6881      	ldr	r1, [r0, #8]
    168a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    168c:	6882      	ldr	r2, [r0, #8]
    168e:	6841      	ldr	r1, [r0, #4]
    1690:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1692:	685a      	ldr	r2, [r3, #4]
    1694:	4282      	cmp	r2, r0
    1696:	d101      	bne.n	169c <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1698:	6892      	ldr	r2, [r2, #8]
    169a:	605a      	str	r2, [r3, #4]
=======
     ba8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     baa:	6842      	ldr	r2, [r0, #4]
     bac:	6881      	ldr	r1, [r0, #8]
     bae:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     bb0:	6882      	ldr	r2, [r0, #8]
     bb2:	6841      	ldr	r1, [r0, #4]
     bb4:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     bb6:	685a      	ldr	r2, [r3, #4]
     bb8:	4282      	cmp	r2, r0
     bba:	d101      	bne.n	bc0 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     bbc:	6892      	ldr	r2, [r2, #8]
     bbe:	605a      	str	r2, [r3, #4]
>>>>>>> JJ's_Branch
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
<<<<<<< HEAD
    169c:	2200      	movs	r2, #0
    169e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    16a0:	6818      	ldr	r0, [r3, #0]
    16a2:	3801      	subs	r0, #1
    16a4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    16a6:	4770      	bx	lr

000016a8 <prvTaskExitError>:
=======
     bc0:	2200      	movs	r2, #0
     bc2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     bc4:	6818      	ldr	r0, [r3, #0]
     bc6:	3801      	subs	r0, #1
     bc8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
     bca:	4770      	bx	lr

00000bcc <prvTaskExitError>:
>>>>>>> JJ's_Branch
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
    16a8:	4b03      	ldr	r3, [pc, #12]	; (16b8 <prvTaskExitError+0x10>)
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	3301      	adds	r3, #1
    16ae:	d001      	beq.n	16b4 <prvTaskExitError+0xc>
    16b0:	b672      	cpsid	i
    16b2:	e7fe      	b.n	16b2 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
    16b4:	b672      	cpsid	i
    16b6:	e7fe      	b.n	16b6 <prvTaskExitError+0xe>
    16b8:	20000004 	.word	0x20000004

000016bc <vPortStartFirstTask>:
=======
     bcc:	4b03      	ldr	r3, [pc, #12]	; (bdc <prvTaskExitError+0x10>)
     bce:	681b      	ldr	r3, [r3, #0]
     bd0:	3301      	adds	r3, #1
     bd2:	d001      	beq.n	bd8 <prvTaskExitError+0xc>
     bd4:	b672      	cpsid	i
     bd6:	e7fe      	b.n	bd6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     bd8:	b672      	cpsid	i
     bda:	e7fe      	b.n	bda <prvTaskExitError+0xe>
     bdc:	20000004 	.word	0x20000004

00000be0 <vPortStartFirstTask>:
>>>>>>> JJ's_Branch
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
<<<<<<< HEAD
    16bc:	4a06      	ldr	r2, [pc, #24]	; (16d8 <pxCurrentTCBConst2>)
    16be:	6813      	ldr	r3, [r2, #0]
    16c0:	6818      	ldr	r0, [r3, #0]
    16c2:	3020      	adds	r0, #32
    16c4:	f380 8809 	msr	PSP, r0
    16c8:	2002      	movs	r0, #2
    16ca:	f380 8814 	msr	CONTROL, r0
    16ce:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    16d0:	46ae      	mov	lr, r5
    16d2:	b662      	cpsie	i
    16d4:	bd00      	pop	{pc}
    16d6:	46c0      	nop			; (mov r8, r8)

000016d8 <pxCurrentTCBConst2>:
    16d8:	20003c58 	.word	0x20003c58

000016dc <pxPortInitialiseStack>:
=======
     be0:	4a06      	ldr	r2, [pc, #24]	; (bfc <pxCurrentTCBConst2>)
     be2:	6813      	ldr	r3, [r2, #0]
     be4:	6818      	ldr	r0, [r3, #0]
     be6:	3020      	adds	r0, #32
     be8:	f380 8809 	msr	PSP, r0
     bec:	2002      	movs	r0, #2
     bee:	f380 8814 	msr	CONTROL, r0
     bf2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     bf4:	46ae      	mov	lr, r5
     bf6:	b662      	cpsie	i
     bf8:	bd00      	pop	{pc}
     bfa:	46c0      	nop			; (mov r8, r8)

00000bfc <pxCurrentTCBConst2>:
     bfc:	20003c1c 	.word	0x20003c1c

00000c00 <pxPortInitialiseStack>:
>>>>>>> JJ's_Branch

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
    16dc:	b510      	push	{r4, lr}
=======
     c00:	b510      	push	{r4, lr}
>>>>>>> JJ's_Branch
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
<<<<<<< HEAD
    16de:	1f03      	subs	r3, r0, #4
    16e0:	2480      	movs	r4, #128	; 0x80
    16e2:	0464      	lsls	r4, r4, #17
    16e4:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    16e6:	3b04      	subs	r3, #4
    16e8:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    16ea:	3b04      	subs	r3, #4
    16ec:	4902      	ldr	r1, [pc, #8]	; (16f8 <pxPortInitialiseStack+0x1c>)
    16ee:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    16f0:	3b14      	subs	r3, #20
    16f2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
    16f4:	3840      	subs	r0, #64	; 0x40
}
    16f6:	bd10      	pop	{r4, pc}
    16f8:	000016a9 	.word	0x000016a9

000016fc <SVC_Handler>:
=======
     c02:	1f03      	subs	r3, r0, #4
     c04:	2480      	movs	r4, #128	; 0x80
     c06:	0464      	lsls	r4, r4, #17
     c08:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     c0a:	3b04      	subs	r3, #4
     c0c:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     c0e:	3b04      	subs	r3, #4
     c10:	4902      	ldr	r1, [pc, #8]	; (c1c <pxPortInitialiseStack+0x1c>)
     c12:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     c14:	3b14      	subs	r3, #20
     c16:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
     c18:	3840      	subs	r0, #64	; 0x40
}
     c1a:	bd10      	pop	{r4, pc}
     c1c:	00000bcd 	.word	0x00000bcd

00000c20 <SVC_Handler>:
>>>>>>> JJ's_Branch

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
<<<<<<< HEAD
    16fc:	4770      	bx	lr
    16fe:	46c0      	nop			; (mov r8, r8)

00001700 <vPortYield>:
=======
     c20:	4770      	bx	lr
     c22:	46c0      	nop			; (mov r8, r8)

00000c24 <vPortYield>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
<<<<<<< HEAD
    1700:	2280      	movs	r2, #128	; 0x80
    1702:	0552      	lsls	r2, r2, #21
    1704:	4b03      	ldr	r3, [pc, #12]	; (1714 <vPortYield+0x14>)
    1706:	601a      	str	r2, [r3, #0]
=======
     c24:	2280      	movs	r2, #128	; 0x80
     c26:	0552      	lsls	r2, r2, #21
     c28:	4b03      	ldr	r3, [pc, #12]	; (c38 <vPortYield+0x14>)
     c2a:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
<<<<<<< HEAD
    1708:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    170c:	f3bf 8f6f 	isb	sy
}
    1710:	4770      	bx	lr
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	e000ed04 	.word	0xe000ed04

00001718 <vPortEnterCritical>:
=======
     c2c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     c30:	f3bf 8f6f 	isb	sy
}
     c34:	4770      	bx	lr
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	e000ed04 	.word	0xe000ed04

00000c3c <vPortEnterCritical>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
<<<<<<< HEAD
    1718:	b672      	cpsid	i
    uxCriticalNesting++;
    171a:	4b04      	ldr	r3, [pc, #16]	; (172c <vPortEnterCritical+0x14>)
    171c:	681a      	ldr	r2, [r3, #0]
    171e:	3201      	adds	r2, #1
    1720:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    1722:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1726:	f3bf 8f6f 	isb	sy
}
    172a:	4770      	bx	lr
    172c:	20000004 	.word	0x20000004

00001730 <vPortExitCritical>:
=======
     c3c:	b672      	cpsid	i
    uxCriticalNesting++;
     c3e:	4b04      	ldr	r3, [pc, #16]	; (c50 <vPortEnterCritical+0x14>)
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	3201      	adds	r2, #1
     c44:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
     c46:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     c4a:	f3bf 8f6f 	isb	sy
}
     c4e:	4770      	bx	lr
     c50:	20000004 	.word	0x20000004

00000c54 <vPortExitCritical>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
<<<<<<< HEAD
    1730:	4b06      	ldr	r3, [pc, #24]	; (174c <vPortExitCritical+0x1c>)
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	2b00      	cmp	r3, #0
    1736:	d101      	bne.n	173c <vPortExitCritical+0xc>
    1738:	b672      	cpsid	i
    173a:	e7fe      	b.n	173a <vPortExitCritical+0xa>
    uxCriticalNesting--;
    173c:	3b01      	subs	r3, #1
    173e:	4a03      	ldr	r2, [pc, #12]	; (174c <vPortExitCritical+0x1c>)
    1740:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1742:	2b00      	cmp	r3, #0
    1744:	d100      	bne.n	1748 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
    1746:	b662      	cpsie	i
    }
}
    1748:	4770      	bx	lr
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	20000004 	.word	0x20000004

00001750 <ulSetInterruptMaskFromISR>:
=======
     c54:	4b06      	ldr	r3, [pc, #24]	; (c70 <vPortExitCritical+0x1c>)
     c56:	681b      	ldr	r3, [r3, #0]
     c58:	2b00      	cmp	r3, #0
     c5a:	d101      	bne.n	c60 <vPortExitCritical+0xc>
     c5c:	b672      	cpsid	i
     c5e:	e7fe      	b.n	c5e <vPortExitCritical+0xa>
    uxCriticalNesting--;
     c60:	3b01      	subs	r3, #1
     c62:	4a03      	ldr	r2, [pc, #12]	; (c70 <vPortExitCritical+0x1c>)
     c64:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     c66:	2b00      	cmp	r3, #0
     c68:	d100      	bne.n	c6c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     c6a:	b662      	cpsie	i
    }
}
     c6c:	4770      	bx	lr
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	20000004 	.word	0x20000004

00000c74 <ulSetInterruptMaskFromISR>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
<<<<<<< HEAD
    1750:	f3ef 8010 	mrs	r0, PRIMASK
    1754:	b672      	cpsid	i
    1756:	4770      	bx	lr
=======
     c74:	f3ef 8010 	mrs	r0, PRIMASK
     c78:	b672      	cpsid	i
     c7a:	4770      	bx	lr
>>>>>>> JJ's_Branch
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
<<<<<<< HEAD
    1758:	2000      	movs	r0, #0
    175a:	46c0      	nop			; (mov r8, r8)

0000175c <vClearInterruptMaskFromISR>:
=======
     c7c:	2000      	movs	r0, #0
     c7e:	46c0      	nop			; (mov r8, r8)

00000c80 <vClearInterruptMaskFromISR>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
<<<<<<< HEAD
    175c:	f380 8810 	msr	PRIMASK, r0
    1760:	4770      	bx	lr
    1762:	46c0      	nop			; (mov r8, r8)

00001764 <PendSV_Handler>:
=======
     c80:	f380 8810 	msr	PRIMASK, r0
     c84:	4770      	bx	lr
     c86:	46c0      	nop			; (mov r8, r8)

00000c88 <PendSV_Handler>:
>>>>>>> JJ's_Branch

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
    1764:	f3ef 8009 	mrs	r0, PSP
    1768:	4b0e      	ldr	r3, [pc, #56]	; (17a4 <pxCurrentTCBConst>)
    176a:	681a      	ldr	r2, [r3, #0]
    176c:	3820      	subs	r0, #32
    176e:	6010      	str	r0, [r2, #0]
    1770:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1772:	4644      	mov	r4, r8
    1774:	464d      	mov	r5, r9
    1776:	4656      	mov	r6, sl
    1778:	465f      	mov	r7, fp
    177a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    177c:	b508      	push	{r3, lr}
    177e:	b672      	cpsid	i
    1780:	f000 ff12 	bl	25a8 <vTaskSwitchContext>
    1784:	b662      	cpsie	i
    1786:	bc0c      	pop	{r2, r3}
    1788:	6811      	ldr	r1, [r2, #0]
    178a:	6808      	ldr	r0, [r1, #0]
    178c:	3010      	adds	r0, #16
    178e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1790:	46a0      	mov	r8, r4
    1792:	46a9      	mov	r9, r5
    1794:	46b2      	mov	sl, r6
    1796:	46bb      	mov	fp, r7
    1798:	f380 8809 	msr	PSP, r0
    179c:	3820      	subs	r0, #32
    179e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    17a0:	4718      	bx	r3
    17a2:	46c0      	nop			; (mov r8, r8)

000017a4 <pxCurrentTCBConst>:
    17a4:	20003c58 	.word	0x20003c58

000017a8 <SysTick_Handler>:
=======
     c88:	f3ef 8009 	mrs	r0, PSP
     c8c:	4b0e      	ldr	r3, [pc, #56]	; (cc8 <pxCurrentTCBConst>)
     c8e:	681a      	ldr	r2, [r3, #0]
     c90:	3820      	subs	r0, #32
     c92:	6010      	str	r0, [r2, #0]
     c94:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     c96:	4644      	mov	r4, r8
     c98:	464d      	mov	r5, r9
     c9a:	4656      	mov	r6, sl
     c9c:	465f      	mov	r7, fp
     c9e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     ca0:	b508      	push	{r3, lr}
     ca2:	b672      	cpsid	i
     ca4:	f000 ff12 	bl	1acc <vTaskSwitchContext>
     ca8:	b662      	cpsie	i
     caa:	bc0c      	pop	{r2, r3}
     cac:	6811      	ldr	r1, [r2, #0]
     cae:	6808      	ldr	r0, [r1, #0]
     cb0:	3010      	adds	r0, #16
     cb2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     cb4:	46a0      	mov	r8, r4
     cb6:	46a9      	mov	r9, r5
     cb8:	46b2      	mov	sl, r6
     cba:	46bb      	mov	fp, r7
     cbc:	f380 8809 	msr	PSP, r0
     cc0:	3820      	subs	r0, #32
     cc2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     cc4:	4718      	bx	r3
     cc6:	46c0      	nop			; (mov r8, r8)

00000cc8 <pxCurrentTCBConst>:
     cc8:	20003c1c 	.word	0x20003c1c

00000ccc <SysTick_Handler>:
>>>>>>> JJ's_Branch
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
    17a8:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    17aa:	4b07      	ldr	r3, [pc, #28]	; (17c8 <SysTick_Handler+0x20>)
    17ac:	4798      	blx	r3
    17ae:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    17b0:	4b06      	ldr	r3, [pc, #24]	; (17cc <SysTick_Handler+0x24>)
    17b2:	4798      	blx	r3
    17b4:	2800      	cmp	r0, #0
    17b6:	d003      	beq.n	17c0 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    17b8:	2280      	movs	r2, #128	; 0x80
    17ba:	0552      	lsls	r2, r2, #21
    17bc:	4b04      	ldr	r3, [pc, #16]	; (17d0 <SysTick_Handler+0x28>)
    17be:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    17c0:	1c20      	adds	r0, r4, #0
    17c2:	4b04      	ldr	r3, [pc, #16]	; (17d4 <SysTick_Handler+0x2c>)
    17c4:	4798      	blx	r3
}
    17c6:	bd10      	pop	{r4, pc}
    17c8:	00001751 	.word	0x00001751
    17cc:	000022a5 	.word	0x000022a5
    17d0:	e000ed04 	.word	0xe000ed04
    17d4:	0000175d 	.word	0x0000175d

000017d8 <vPortSetupTimerInterrupt>:
=======
     ccc:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     cce:	4b07      	ldr	r3, [pc, #28]	; (cec <SysTick_Handler+0x20>)
     cd0:	4798      	blx	r3
     cd2:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     cd4:	4b06      	ldr	r3, [pc, #24]	; (cf0 <SysTick_Handler+0x24>)
     cd6:	4798      	blx	r3
     cd8:	2800      	cmp	r0, #0
     cda:	d003      	beq.n	ce4 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     cdc:	2280      	movs	r2, #128	; 0x80
     cde:	0552      	lsls	r2, r2, #21
     ce0:	4b04      	ldr	r3, [pc, #16]	; (cf4 <SysTick_Handler+0x28>)
     ce2:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     ce4:	1c20      	adds	r0, r4, #0
     ce6:	4b04      	ldr	r3, [pc, #16]	; (cf8 <SysTick_Handler+0x2c>)
     ce8:	4798      	blx	r3
}
     cea:	bd10      	pop	{r4, pc}
     cec:	00000c75 	.word	0x00000c75
     cf0:	000017c9 	.word	0x000017c9
     cf4:	e000ed04 	.word	0xe000ed04
     cf8:	00000c81 	.word	0x00000c81

00000cfc <vPortSetupTimerInterrupt>:
>>>>>>> JJ's_Branch
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
    17d8:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    17da:	2200      	movs	r2, #0
    17dc:	4b07      	ldr	r3, [pc, #28]	; (17fc <vPortSetupTimerInterrupt+0x24>)
    17de:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    17e0:	2000      	movs	r0, #0
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <vPortSetupTimerInterrupt+0x28>)
    17e4:	4798      	blx	r3
    17e6:	21c8      	movs	r1, #200	; 0xc8
    17e8:	4b06      	ldr	r3, [pc, #24]	; (1804 <vPortSetupTimerInterrupt+0x2c>)
    17ea:	4798      	blx	r3
    17ec:	3801      	subs	r0, #1
    17ee:	4b06      	ldr	r3, [pc, #24]	; (1808 <vPortSetupTimerInterrupt+0x30>)
    17f0:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    17f2:	2207      	movs	r2, #7
    17f4:	4b05      	ldr	r3, [pc, #20]	; (180c <vPortSetupTimerInterrupt+0x34>)
    17f6:	601a      	str	r2, [r3, #0]
}
    17f8:	bd08      	pop	{r3, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	e000e018 	.word	0xe000e018
    1800:	000012d1 	.word	0x000012d1
    1804:	00002df9 	.word	0x00002df9
    1808:	e000e014 	.word	0xe000e014
    180c:	e000e010 	.word	0xe000e010

00001810 <xPortStartScheduler>:
=======
     cfc:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
     cfe:	2200      	movs	r2, #0
     d00:	4b07      	ldr	r3, [pc, #28]	; (d20 <vPortSetupTimerInterrupt+0x24>)
     d02:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     d04:	2000      	movs	r0, #0
     d06:	4b07      	ldr	r3, [pc, #28]	; (d24 <vPortSetupTimerInterrupt+0x28>)
     d08:	4798      	blx	r3
     d0a:	21c8      	movs	r1, #200	; 0xc8
     d0c:	4b06      	ldr	r3, [pc, #24]	; (d28 <vPortSetupTimerInterrupt+0x2c>)
     d0e:	4798      	blx	r3
     d10:	3801      	subs	r0, #1
     d12:	4b06      	ldr	r3, [pc, #24]	; (d2c <vPortSetupTimerInterrupt+0x30>)
     d14:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     d16:	2207      	movs	r2, #7
     d18:	4b05      	ldr	r3, [pc, #20]	; (d30 <vPortSetupTimerInterrupt+0x34>)
     d1a:	601a      	str	r2, [r3, #0]
}
     d1c:	bd08      	pop	{r3, pc}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	e000e018 	.word	0xe000e018
     d24:	000007f5 	.word	0x000007f5
     d28:	00002319 	.word	0x00002319
     d2c:	e000e014 	.word	0xe000e014
     d30:	e000e010 	.word	0xe000e010

00000d34 <xPortStartScheduler>:
>>>>>>> JJ's_Branch

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
    1810:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1812:	4b0a      	ldr	r3, [pc, #40]	; (183c <xPortStartScheduler+0x2c>)
    1814:	6819      	ldr	r1, [r3, #0]
    1816:	22ff      	movs	r2, #255	; 0xff
    1818:	0412      	lsls	r2, r2, #16
    181a:	430a      	orrs	r2, r1
    181c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    181e:	6819      	ldr	r1, [r3, #0]
    1820:	22ff      	movs	r2, #255	; 0xff
    1822:	0612      	lsls	r2, r2, #24
    1824:	430a      	orrs	r2, r1
    1826:	601a      	str	r2, [r3, #0]
=======
     d34:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     d36:	4b0a      	ldr	r3, [pc, #40]	; (d60 <xPortStartScheduler+0x2c>)
     d38:	6819      	ldr	r1, [r3, #0]
     d3a:	22ff      	movs	r2, #255	; 0xff
     d3c:	0412      	lsls	r2, r2, #16
     d3e:	430a      	orrs	r2, r1
     d40:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     d42:	6819      	ldr	r1, [r3, #0]
     d44:	22ff      	movs	r2, #255	; 0xff
     d46:	0612      	lsls	r2, r2, #24
     d48:	430a      	orrs	r2, r1
     d4a:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
    1828:	4b05      	ldr	r3, [pc, #20]	; (1840 <xPortStartScheduler+0x30>)
    182a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    182c:	2200      	movs	r2, #0
    182e:	4b05      	ldr	r3, [pc, #20]	; (1844 <xPortStartScheduler+0x34>)
    1830:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    1832:	4b05      	ldr	r3, [pc, #20]	; (1848 <xPortStartScheduler+0x38>)
    1834:	4798      	blx	r3
=======
     d4c:	4b05      	ldr	r3, [pc, #20]	; (d64 <xPortStartScheduler+0x30>)
     d4e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     d50:	2200      	movs	r2, #0
     d52:	4b05      	ldr	r3, [pc, #20]	; (d68 <xPortStartScheduler+0x34>)
     d54:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     d56:	4b05      	ldr	r3, [pc, #20]	; (d6c <xPortStartScheduler+0x38>)
     d58:	4798      	blx	r3
>>>>>>> JJ's_Branch

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
<<<<<<< HEAD
    1836:	4b05      	ldr	r3, [pc, #20]	; (184c <xPortStartScheduler+0x3c>)
    1838:	4798      	blx	r3
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	e000ed20 	.word	0xe000ed20
    1840:	000017d9 	.word	0x000017d9
    1844:	20000004 	.word	0x20000004
    1848:	000016bd 	.word	0x000016bd
    184c:	000016a9 	.word	0x000016a9

00001850 <pvPortMalloc>:
=======
     d5a:	4b05      	ldr	r3, [pc, #20]	; (d70 <xPortStartScheduler+0x3c>)
     d5c:	4798      	blx	r3
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	e000ed20 	.word	0xe000ed20
     d64:	00000cfd 	.word	0x00000cfd
     d68:	20000004 	.word	0x20000004
     d6c:	00000be1 	.word	0x00000be1
     d70:	00000bcd 	.word	0x00000bcd

00000d74 <pvPortMalloc>:
>>>>>>> JJ's_Branch
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
    1850:	b538      	push	{r3, r4, r5, lr}
    1852:	1c04      	adds	r4, r0, #0
=======
     d74:	b538      	push	{r3, r4, r5, lr}
     d76:	1c04      	adds	r4, r0, #0
>>>>>>> JJ's_Branch
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
<<<<<<< HEAD
    1854:	0743      	lsls	r3, r0, #29
    1856:	d002      	beq.n	185e <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1858:	2307      	movs	r3, #7
    185a:	439c      	bics	r4, r3
    185c:	3408      	adds	r4, #8
=======
     d78:	0743      	lsls	r3, r0, #29
     d7a:	d002      	beq.n	d82 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     d7c:	2307      	movs	r3, #7
     d7e:	439c      	bics	r4, r3
     d80:	3408      	adds	r4, #8
>>>>>>> JJ's_Branch
		}
	#endif

	vTaskSuspendAll();
<<<<<<< HEAD
    185e:	4b10      	ldr	r3, [pc, #64]	; (18a0 <pvPortMalloc+0x50>)
    1860:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1862:	4b10      	ldr	r3, [pc, #64]	; (18a4 <pvPortMalloc+0x54>)
    1864:	681b      	ldr	r3, [r3, #0]
    1866:	2b00      	cmp	r3, #0
    1868:	d105      	bne.n	1876 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    186a:	2307      	movs	r3, #7
    186c:	4a0e      	ldr	r2, [pc, #56]	; (18a8 <pvPortMalloc+0x58>)
    186e:	3208      	adds	r2, #8
    1870:	439a      	bics	r2, r3
    1872:	4b0c      	ldr	r3, [pc, #48]	; (18a4 <pvPortMalloc+0x54>)
    1874:	601a      	str	r2, [r3, #0]
=======
     d82:	4b10      	ldr	r3, [pc, #64]	; (dc4 <pvPortMalloc+0x50>)
     d84:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     d86:	4b10      	ldr	r3, [pc, #64]	; (dc8 <pvPortMalloc+0x54>)
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d105      	bne.n	d9a <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     d8e:	2307      	movs	r3, #7
     d90:	4a0e      	ldr	r2, [pc, #56]	; (dcc <pvPortMalloc+0x58>)
     d92:	3208      	adds	r2, #8
     d94:	439a      	bics	r2, r3
     d96:	4b0c      	ldr	r3, [pc, #48]	; (dc8 <pvPortMalloc+0x54>)
     d98:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
<<<<<<< HEAD
    1876:	4b0d      	ldr	r3, [pc, #52]	; (18ac <pvPortMalloc+0x5c>)
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	18e4      	adds	r4, r4, r3
    187c:	4a0c      	ldr	r2, [pc, #48]	; (18b0 <pvPortMalloc+0x60>)
    187e:	4294      	cmp	r4, r2
    1880:	d807      	bhi.n	1892 <pvPortMalloc+0x42>
    1882:	42a3      	cmp	r3, r4
    1884:	d207      	bcs.n	1896 <pvPortMalloc+0x46>
=======
     d9a:	4b0d      	ldr	r3, [pc, #52]	; (dd0 <pvPortMalloc+0x5c>)
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	18e4      	adds	r4, r4, r3
     da0:	4a0c      	ldr	r2, [pc, #48]	; (dd4 <pvPortMalloc+0x60>)
     da2:	4294      	cmp	r4, r2
     da4:	d807      	bhi.n	db6 <pvPortMalloc+0x42>
     da6:	42a3      	cmp	r3, r4
     da8:	d207      	bcs.n	dba <pvPortMalloc+0x46>
>>>>>>> JJ's_Branch
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
<<<<<<< HEAD
    1886:	4a07      	ldr	r2, [pc, #28]	; (18a4 <pvPortMalloc+0x54>)
    1888:	6815      	ldr	r5, [r2, #0]
    188a:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    188c:	4b07      	ldr	r3, [pc, #28]	; (18ac <pvPortMalloc+0x5c>)
    188e:	601c      	str	r4, [r3, #0]
    1890:	e002      	b.n	1898 <pvPortMalloc+0x48>
=======
     daa:	4a07      	ldr	r2, [pc, #28]	; (dc8 <pvPortMalloc+0x54>)
     dac:	6815      	ldr	r5, [r2, #0]
     dae:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     db0:	4b07      	ldr	r3, [pc, #28]	; (dd0 <pvPortMalloc+0x5c>)
     db2:	601c      	str	r4, [r3, #0]
     db4:	e002      	b.n	dbc <pvPortMalloc+0x48>
>>>>>>> JJ's_Branch

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
<<<<<<< HEAD
    1892:	2500      	movs	r5, #0
    1894:	e000      	b.n	1898 <pvPortMalloc+0x48>
    1896:	2500      	movs	r5, #0
=======
     db6:	2500      	movs	r5, #0
     db8:	e000      	b.n	dbc <pvPortMalloc+0x48>
     dba:	2500      	movs	r5, #0
>>>>>>> JJ's_Branch
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
    1898:	4b06      	ldr	r3, [pc, #24]	; (18b4 <pvPortMalloc+0x64>)
    189a:	4798      	blx	r3
=======
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <pvPortMalloc+0x64>)
     dbe:	4798      	blx	r3
>>>>>>> JJ's_Branch
		}
	}
	#endif

	return pvReturn;
}
<<<<<<< HEAD
    189c:	1c28      	adds	r0, r5, #0
    189e:	bd38      	pop	{r3, r4, r5, pc}
    18a0:	00002275 	.word	0x00002275
    18a4:	20003ba0 	.word	0x20003ba0
    18a8:	20000108 	.word	0x20000108
    18ac:	20000104 	.word	0x20000104
    18b0:	00003a8f 	.word	0x00003a8f
    18b4:	000023d1 	.word	0x000023d1

000018b8 <vPortFree>:
=======
     dc0:	1c28      	adds	r0, r5, #0
     dc2:	bd38      	pop	{r3, r4, r5, pc}
     dc4:	00001799 	.word	0x00001799
     dc8:	20003b64 	.word	0x20003b64
     dcc:	200000cc 	.word	0x200000cc
     dd0:	200000c8 	.word	0x200000c8
     dd4:	00003a8f 	.word	0x00003a8f
     dd8:	000018f5 	.word	0x000018f5

00000ddc <vPortFree>:
>>>>>>> JJ's_Branch
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
<<<<<<< HEAD
    18b8:	2800      	cmp	r0, #0
    18ba:	d001      	beq.n	18c0 <vPortFree+0x8>
    18bc:	b672      	cpsid	i
    18be:	e7fe      	b.n	18be <vPortFree+0x6>
}
    18c0:	4770      	bx	lr
    18c2:	46c0      	nop			; (mov r8, r8)

000018c4 <prvCopyDataToQueue>:
=======
     ddc:	2800      	cmp	r0, #0
     dde:	d001      	beq.n	de4 <vPortFree+0x8>
     de0:	b672      	cpsid	i
     de2:	e7fe      	b.n	de2 <vPortFree+0x6>
}
     de4:	4770      	bx	lr
     de6:	46c0      	nop			; (mov r8, r8)

00000de8 <prvCopyDataToQueue>:
>>>>>>> JJ's_Branch

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
    18c4:	b538      	push	{r3, r4, r5, lr}
    18c6:	1c04      	adds	r4, r0, #0
    18c8:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    18ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
    18cc:	2a00      	cmp	r2, #0
    18ce:	d108      	bne.n	18e2 <prvCopyDataToQueue+0x1e>
=======
     de8:	b538      	push	{r3, r4, r5, lr}
     dea:	1c04      	adds	r4, r0, #0
     dec:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     dee:	6c02      	ldr	r2, [r0, #64]	; 0x40
     df0:	2a00      	cmp	r2, #0
     df2:	d108      	bne.n	e06 <prvCopyDataToQueue+0x1e>
>>>>>>> JJ's_Branch
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
    18d0:	6801      	ldr	r1, [r0, #0]
    18d2:	2900      	cmp	r1, #0
    18d4:	d12a      	bne.n	192c <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    18d6:	6840      	ldr	r0, [r0, #4]
    18d8:	4b16      	ldr	r3, [pc, #88]	; (1934 <prvCopyDataToQueue+0x70>)
    18da:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    18dc:	2300      	movs	r3, #0
    18de:	6063      	str	r3, [r4, #4]
    18e0:	e024      	b.n	192c <prvCopyDataToQueue+0x68>
=======
     df4:	6801      	ldr	r1, [r0, #0]
     df6:	2900      	cmp	r1, #0
     df8:	d12a      	bne.n	e50 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     dfa:	6840      	ldr	r0, [r0, #4]
     dfc:	4b16      	ldr	r3, [pc, #88]	; (e58 <prvCopyDataToQueue+0x70>)
     dfe:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     e00:	2300      	movs	r3, #0
     e02:	6063      	str	r3, [r4, #4]
     e04:	e024      	b.n	e50 <prvCopyDataToQueue+0x68>
>>>>>>> JJ's_Branch
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
    18e2:	2d00      	cmp	r5, #0
    18e4:	d10c      	bne.n	1900 <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    18e6:	6880      	ldr	r0, [r0, #8]
    18e8:	4b13      	ldr	r3, [pc, #76]	; (1938 <prvCopyDataToQueue+0x74>)
    18ea:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    18ec:	68a2      	ldr	r2, [r4, #8]
    18ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
    18f0:	1853      	adds	r3, r2, r1
    18f2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    18f4:	6862      	ldr	r2, [r4, #4]
    18f6:	4293      	cmp	r3, r2
    18f8:	d318      	bcc.n	192c <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    18fa:	6823      	ldr	r3, [r4, #0]
    18fc:	60a3      	str	r3, [r4, #8]
    18fe:	e015      	b.n	192c <prvCopyDataToQueue+0x68>
=======
     e06:	2d00      	cmp	r5, #0
     e08:	d10c      	bne.n	e24 <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     e0a:	6880      	ldr	r0, [r0, #8]
     e0c:	4b13      	ldr	r3, [pc, #76]	; (e5c <prvCopyDataToQueue+0x74>)
     e0e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     e10:	68a2      	ldr	r2, [r4, #8]
     e12:	6c21      	ldr	r1, [r4, #64]	; 0x40
     e14:	1853      	adds	r3, r2, r1
     e16:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     e18:	6862      	ldr	r2, [r4, #4]
     e1a:	4293      	cmp	r3, r2
     e1c:	d318      	bcc.n	e50 <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     e1e:	6823      	ldr	r3, [r4, #0]
     e20:	60a3      	str	r3, [r4, #8]
     e22:	e015      	b.n	e50 <prvCopyDataToQueue+0x68>
>>>>>>> JJ's_Branch
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
    1900:	68c0      	ldr	r0, [r0, #12]
    1902:	4b0d      	ldr	r3, [pc, #52]	; (1938 <prvCopyDataToQueue+0x74>)
    1904:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1906:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1908:	424a      	negs	r2, r1
    190a:	68e1      	ldr	r1, [r4, #12]
    190c:	188b      	adds	r3, r1, r2
    190e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1910:	6821      	ldr	r1, [r4, #0]
    1912:	428b      	cmp	r3, r1
    1914:	d202      	bcs.n	191c <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1916:	6863      	ldr	r3, [r4, #4]
    1918:	189a      	adds	r2, r3, r2
    191a:	60e2      	str	r2, [r4, #12]
=======
     e24:	68c0      	ldr	r0, [r0, #12]
     e26:	4b0d      	ldr	r3, [pc, #52]	; (e5c <prvCopyDataToQueue+0x74>)
     e28:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     e2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
     e2c:	424a      	negs	r2, r1
     e2e:	68e1      	ldr	r1, [r4, #12]
     e30:	188b      	adds	r3, r1, r2
     e32:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     e34:	6821      	ldr	r1, [r4, #0]
     e36:	428b      	cmp	r3, r1
     e38:	d202      	bcs.n	e40 <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     e3a:	6863      	ldr	r3, [r4, #4]
     e3c:	189a      	adds	r2, r3, r2
     e3e:	60e2      	str	r2, [r4, #12]
>>>>>>> JJ's_Branch
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
    191c:	2d02      	cmp	r5, #2
    191e:	d105      	bne.n	192c <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1922:	2b00      	cmp	r3, #0
    1924:	d002      	beq.n	192c <prvCopyDataToQueue+0x68>
=======
     e40:	2d02      	cmp	r5, #2
     e42:	d105      	bne.n	e50 <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     e44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     e46:	2b00      	cmp	r3, #0
     e48:	d002      	beq.n	e50 <prvCopyDataToQueue+0x68>
>>>>>>> JJ's_Branch
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
<<<<<<< HEAD
    1926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1928:	3b01      	subs	r3, #1
    192a:	63a3      	str	r3, [r4, #56]	; 0x38
=======
     e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     e4c:	3b01      	subs	r3, #1
     e4e:	63a3      	str	r3, [r4, #56]	; 0x38
>>>>>>> JJ's_Branch
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
<<<<<<< HEAD
    192c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    192e:	3301      	adds	r3, #1
    1930:	63a3      	str	r3, [r4, #56]	; 0x38
}
    1932:	bd38      	pop	{r3, r4, r5, pc}
    1934:	000028a9 	.word	0x000028a9
    1938:	00002f29 	.word	0x00002f29

0000193c <prvNotifyQueueSetContainer>:
=======
     e50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     e52:	3301      	adds	r3, #1
     e54:	63a3      	str	r3, [r4, #56]	; 0x38
}
     e56:	bd38      	pop	{r3, r4, r5, pc}
     e58:	00001dcd 	.word	0x00001dcd
     e5c:	00002405 	.word	0x00002405

00000e60 <prvNotifyQueueSetContainer>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
<<<<<<< HEAD
    193c:	b510      	push	{r4, lr}
    193e:	b082      	sub	sp, #8
    1940:	9001      	str	r0, [sp, #4]
    1942:	1c0a      	adds	r2, r1, #0
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1944:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
=======
     e60:	b510      	push	{r4, lr}
     e62:	b082      	sub	sp, #8
     e64:	9001      	str	r0, [sp, #4]
     e66:	1c0a      	adds	r2, r1, #0
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     e68:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
>>>>>>> JJ's_Branch
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
<<<<<<< HEAD
    1946:	2c00      	cmp	r4, #0
    1948:	d101      	bne.n	194e <prvNotifyQueueSetContainer+0x12>
    194a:	b672      	cpsid	i
    194c:	e7fe      	b.n	194c <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    194e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1952:	4299      	cmp	r1, r3
    1954:	d301      	bcc.n	195a <prvNotifyQueueSetContainer+0x1e>
    1956:	b672      	cpsid	i
    1958:	e7fe      	b.n	1958 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    195a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
=======
     e6a:	2c00      	cmp	r4, #0
     e6c:	d101      	bne.n	e72 <prvNotifyQueueSetContainer+0x12>
     e6e:	b672      	cpsid	i
     e70:	e7fe      	b.n	e70 <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     e72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     e74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     e76:	4299      	cmp	r1, r3
     e78:	d301      	bcc.n	e7e <prvNotifyQueueSetContainer+0x1e>
     e7a:	b672      	cpsid	i
     e7c:	e7fe      	b.n	e7c <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     e7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
>>>>>>> JJ's_Branch
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
<<<<<<< HEAD
    195c:	2000      	movs	r0, #0
=======
     e80:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
<<<<<<< HEAD
    195e:	428b      	cmp	r3, r1
    1960:	d90d      	bls.n	197e <prvNotifyQueueSetContainer+0x42>
=======
     e82:	428b      	cmp	r3, r1
     e84:	d90d      	bls.n	ea2 <prvNotifyQueueSetContainer+0x42>
>>>>>>> JJ's_Branch
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
<<<<<<< HEAD
    1962:	1c20      	adds	r0, r4, #0
    1964:	a901      	add	r1, sp, #4
    1966:	4b07      	ldr	r3, [pc, #28]	; (1984 <prvNotifyQueueSetContainer+0x48>)
    1968:	4798      	blx	r3
=======
     e86:	1c20      	adds	r0, r4, #0
     e88:	a901      	add	r1, sp, #4
     e8a:	4b07      	ldr	r3, [pc, #28]	; (ea8 <prvNotifyQueueSetContainer+0x48>)
     e8c:	4798      	blx	r3
>>>>>>> JJ's_Branch
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
<<<<<<< HEAD
    196a:	2000      	movs	r0, #0
=======
     e8e:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
    196c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    196e:	2b00      	cmp	r3, #0
    1970:	d005      	beq.n	197e <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1972:	1c20      	adds	r0, r4, #0
    1974:	3024      	adds	r0, #36	; 0x24
    1976:	4b04      	ldr	r3, [pc, #16]	; (1988 <prvNotifyQueueSetContainer+0x4c>)
    1978:	4798      	blx	r3
=======
     e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e92:	2b00      	cmp	r3, #0
     e94:	d005      	beq.n	ea2 <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     e96:	1c20      	adds	r0, r4, #0
     e98:	3024      	adds	r0, #36	; 0x24
     e9a:	4b04      	ldr	r3, [pc, #16]	; (eac <prvNotifyQueueSetContainer+0x4c>)
     e9c:	4798      	blx	r3
>>>>>>> JJ's_Branch
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
<<<<<<< HEAD
    197a:	1e43      	subs	r3, r0, #1
    197c:	4198      	sbcs	r0, r3
=======
     e9e:	1e43      	subs	r3, r0, #1
     ea0:	4198      	sbcs	r0, r3
>>>>>>> JJ's_Branch
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
<<<<<<< HEAD
    197e:	b002      	add	sp, #8
    1980:	bd10      	pop	{r4, pc}
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	000018c5 	.word	0x000018c5
    1988:	000026d9 	.word	0x000026d9

0000198c <prvCopyDataFromQueue>:
=======
     ea2:	b002      	add	sp, #8
     ea4:	bd10      	pop	{r4, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00000de9 	.word	0x00000de9
     eac:	00001bfd 	.word	0x00001bfd

00000eb0 <prvCopyDataFromQueue>:
>>>>>>> JJ's_Branch
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
    198c:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    198e:	6804      	ldr	r4, [r0, #0]
    1990:	2c00      	cmp	r4, #0
    1992:	d00c      	beq.n	19ae <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1994:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1996:	68c5      	ldr	r5, [r0, #12]
    1998:	18ab      	adds	r3, r5, r2
    199a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    199c:	6845      	ldr	r5, [r0, #4]
    199e:	42ab      	cmp	r3, r5
    19a0:	d300      	bcc.n	19a4 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    19a2:	60c4      	str	r4, [r0, #12]
=======
     eb0:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     eb2:	6804      	ldr	r4, [r0, #0]
     eb4:	2c00      	cmp	r4, #0
     eb6:	d00c      	beq.n	ed2 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     eb8:	6c02      	ldr	r2, [r0, #64]	; 0x40
     eba:	68c5      	ldr	r5, [r0, #12]
     ebc:	18ab      	adds	r3, r5, r2
     ebe:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     ec0:	6845      	ldr	r5, [r0, #4]
     ec2:	42ab      	cmp	r3, r5
     ec4:	d300      	bcc.n	ec8 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     ec6:	60c4      	str	r4, [r0, #12]
>>>>>>> JJ's_Branch
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
<<<<<<< HEAD
    19a4:	68c3      	ldr	r3, [r0, #12]
    19a6:	1c08      	adds	r0, r1, #0
    19a8:	1c19      	adds	r1, r3, #0
    19aa:	4b01      	ldr	r3, [pc, #4]	; (19b0 <prvCopyDataFromQueue+0x24>)
    19ac:	4798      	blx	r3
=======
     ec8:	68c3      	ldr	r3, [r0, #12]
     eca:	1c08      	adds	r0, r1, #0
     ecc:	1c19      	adds	r1, r3, #0
     ece:	4b01      	ldr	r3, [pc, #4]	; (ed4 <prvCopyDataFromQueue+0x24>)
     ed0:	4798      	blx	r3
>>>>>>> JJ's_Branch
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
    19ae:	bd38      	pop	{r3, r4, r5, pc}
    19b0:	00002f29 	.word	0x00002f29

000019b4 <prvUnlockQueue>:
=======
     ed2:	bd38      	pop	{r3, r4, r5, pc}
     ed4:	00002405 	.word	0x00002405

00000ed8 <prvUnlockQueue>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
    19b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19b6:	1c04      	adds	r4, r0, #0
=======
     ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eda:	1c04      	adds	r4, r0, #0
>>>>>>> JJ's_Branch

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
    19b8:	4b23      	ldr	r3, [pc, #140]	; (1a48 <prvUnlockQueue+0x94>)
    19ba:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    19bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    19be:	2b00      	cmp	r3, #0
    19c0:	dd1c      	ble.n	19fc <prvUnlockQueue+0x48>
=======
     edc:	4b23      	ldr	r3, [pc, #140]	; (f6c <prvUnlockQueue+0x94>)
     ede:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     ee0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ee2:	2b00      	cmp	r3, #0
     ee4:	dd1c      	ble.n	f20 <prvUnlockQueue+0x48>
>>>>>>> JJ's_Branch
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
<<<<<<< HEAD
    19c2:	4e22      	ldr	r6, [pc, #136]	; (1a4c <prvUnlockQueue+0x98>)
=======
     ee6:	4e22      	ldr	r6, [pc, #136]	; (f70 <prvUnlockQueue+0x98>)
>>>>>>> JJ's_Branch
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
<<<<<<< HEAD
    19c4:	4d22      	ldr	r5, [pc, #136]	; (1a50 <prvUnlockQueue+0x9c>)
=======
     ee8:	4d22      	ldr	r5, [pc, #136]	; (f74 <prvUnlockQueue+0x9c>)
>>>>>>> JJ's_Branch
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
<<<<<<< HEAD
    19c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    19c8:	2b00      	cmp	r3, #0
    19ca:	d007      	beq.n	19dc <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    19cc:	1c20      	adds	r0, r4, #0
    19ce:	2100      	movs	r1, #0
    19d0:	47a8      	blx	r5
    19d2:	2801      	cmp	r0, #1
    19d4:	d10c      	bne.n	19f0 <prvUnlockQueue+0x3c>
=======
     eea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     eec:	2b00      	cmp	r3, #0
     eee:	d007      	beq.n	f00 <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     ef0:	1c20      	adds	r0, r4, #0
     ef2:	2100      	movs	r1, #0
     ef4:	47a8      	blx	r5
     ef6:	2801      	cmp	r0, #1
     ef8:	d10c      	bne.n	f14 <prvUnlockQueue+0x3c>
>>>>>>> JJ's_Branch
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
    19d6:	4b1f      	ldr	r3, [pc, #124]	; (1a54 <prvUnlockQueue+0xa0>)
    19d8:	4798      	blx	r3
    19da:	e009      	b.n	19f0 <prvUnlockQueue+0x3c>
=======
     efa:	4b1f      	ldr	r3, [pc, #124]	; (f78 <prvUnlockQueue+0xa0>)
     efc:	4798      	blx	r3
     efe:	e009      	b.n	f14 <prvUnlockQueue+0x3c>
>>>>>>> JJ's_Branch
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
    19dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    19de:	2b00      	cmp	r3, #0
    19e0:	d00c      	beq.n	19fc <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19e2:	1c20      	adds	r0, r4, #0
    19e4:	3024      	adds	r0, #36	; 0x24
    19e6:	47b0      	blx	r6
    19e8:	2800      	cmp	r0, #0
    19ea:	d001      	beq.n	19f0 <prvUnlockQueue+0x3c>
=======
     f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
     f02:	2b00      	cmp	r3, #0
     f04:	d00c      	beq.n	f20 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     f06:	1c20      	adds	r0, r4, #0
     f08:	3024      	adds	r0, #36	; 0x24
     f0a:	47b0      	blx	r6
     f0c:	2800      	cmp	r0, #0
     f0e:	d001      	beq.n	f14 <prvUnlockQueue+0x3c>
>>>>>>> JJ's_Branch
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
<<<<<<< HEAD
    19ec:	4b19      	ldr	r3, [pc, #100]	; (1a54 <prvUnlockQueue+0xa0>)
    19ee:	4798      	blx	r3
=======
     f10:	4b19      	ldr	r3, [pc, #100]	; (f78 <prvUnlockQueue+0xa0>)
     f12:	4798      	blx	r3
>>>>>>> JJ's_Branch
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
<<<<<<< HEAD
    19f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    19f2:	3b01      	subs	r3, #1
    19f4:	64a3      	str	r3, [r4, #72]	; 0x48
=======
     f14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     f16:	3b01      	subs	r3, #1
     f18:	64a3      	str	r3, [r4, #72]	; 0x48
>>>>>>> JJ's_Branch
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
    19f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    19f8:	2b00      	cmp	r3, #0
    19fa:	dce4      	bgt.n	19c6 <prvUnlockQueue+0x12>
=======
     f1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     f1c:	2b00      	cmp	r3, #0
     f1e:	dce4      	bgt.n	eea <prvUnlockQueue+0x12>
>>>>>>> JJ's_Branch
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
<<<<<<< HEAD
    19fc:	2301      	movs	r3, #1
    19fe:	425b      	negs	r3, r3
    1a00:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    1a02:	4b15      	ldr	r3, [pc, #84]	; (1a58 <prvUnlockQueue+0xa4>)
    1a04:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1a06:	4b10      	ldr	r3, [pc, #64]	; (1a48 <prvUnlockQueue+0x94>)
    1a08:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1a0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	dd15      	ble.n	1a3c <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a10:	6923      	ldr	r3, [r4, #16]
    1a12:	2b00      	cmp	r3, #0
    1a14:	d012      	beq.n	1a3c <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a16:	1c27      	adds	r7, r4, #0
    1a18:	3710      	adds	r7, #16
    1a1a:	4e0c      	ldr	r6, [pc, #48]	; (1a4c <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
    1a1c:	4d0d      	ldr	r5, [pc, #52]	; (1a54 <prvUnlockQueue+0xa0>)
    1a1e:	e002      	b.n	1a26 <prvUnlockQueue+0x72>
=======
     f20:	2301      	movs	r3, #1
     f22:	425b      	negs	r3, r3
     f24:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
     f26:	4b15      	ldr	r3, [pc, #84]	; (f7c <prvUnlockQueue+0xa4>)
     f28:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     f2a:	4b10      	ldr	r3, [pc, #64]	; (f6c <prvUnlockQueue+0x94>)
     f2c:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     f2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
     f30:	2b00      	cmp	r3, #0
     f32:	dd15      	ble.n	f60 <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     f34:	6923      	ldr	r3, [r4, #16]
     f36:	2b00      	cmp	r3, #0
     f38:	d012      	beq.n	f60 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     f3a:	1c27      	adds	r7, r4, #0
     f3c:	3710      	adds	r7, #16
     f3e:	4e0c      	ldr	r6, [pc, #48]	; (f70 <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
     f40:	4d0d      	ldr	r5, [pc, #52]	; (f78 <prvUnlockQueue+0xa0>)
     f42:	e002      	b.n	f4a <prvUnlockQueue+0x72>
>>>>>>> JJ's_Branch
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
    1a20:	6923      	ldr	r3, [r4, #16]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d00a      	beq.n	1a3c <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a26:	1c38      	adds	r0, r7, #0
    1a28:	47b0      	blx	r6
    1a2a:	2800      	cmp	r0, #0
    1a2c:	d000      	beq.n	1a30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    1a2e:	47a8      	blx	r5
=======
     f44:	6923      	ldr	r3, [r4, #16]
     f46:	2b00      	cmp	r3, #0
     f48:	d00a      	beq.n	f60 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     f4a:	1c38      	adds	r0, r7, #0
     f4c:	47b0      	blx	r6
     f4e:	2800      	cmp	r0, #0
     f50:	d000      	beq.n	f54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
     f52:	47a8      	blx	r5
>>>>>>> JJ's_Branch
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
<<<<<<< HEAD
    1a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1a32:	3b01      	subs	r3, #1
    1a34:	6463      	str	r3, [r4, #68]	; 0x44
=======
     f54:	6c63      	ldr	r3, [r4, #68]	; 0x44
     f56:	3b01      	subs	r3, #1
     f58:	6463      	str	r3, [r4, #68]	; 0x44
>>>>>>> JJ's_Branch
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
<<<<<<< HEAD
    1a36:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1a38:	2b00      	cmp	r3, #0
    1a3a:	dcf1      	bgt.n	1a20 <prvUnlockQueue+0x6c>
=======
     f5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
     f5c:	2b00      	cmp	r3, #0
     f5e:	dcf1      	bgt.n	f44 <prvUnlockQueue+0x6c>
>>>>>>> JJ's_Branch
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
<<<<<<< HEAD
    1a3c:	2301      	movs	r3, #1
    1a3e:	425b      	negs	r3, r3
    1a40:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    1a42:	4b05      	ldr	r3, [pc, #20]	; (1a58 <prvUnlockQueue+0xa4>)
    1a44:	4798      	blx	r3
}
    1a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a48:	00001719 	.word	0x00001719
    1a4c:	000026d9 	.word	0x000026d9
    1a50:	0000193d 	.word	0x0000193d
    1a54:	000027f1 	.word	0x000027f1
    1a58:	00001731 	.word	0x00001731

00001a5c <xQueueGenericReset>:
=======
     f60:	2301      	movs	r3, #1
     f62:	425b      	negs	r3, r3
     f64:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     f66:	4b05      	ldr	r3, [pc, #20]	; (f7c <prvUnlockQueue+0xa4>)
     f68:	4798      	blx	r3
}
     f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f6c:	00000c3d 	.word	0x00000c3d
     f70:	00001bfd 	.word	0x00001bfd
     f74:	00000e61 	.word	0x00000e61
     f78:	00001d15 	.word	0x00001d15
     f7c:	00000c55 	.word	0x00000c55

00000f80 <xQueueGenericReset>:
>>>>>>> JJ's_Branch
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
    1a5c:	b538      	push	{r3, r4, r5, lr}
    1a5e:	1c04      	adds	r4, r0, #0
    1a60:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1a62:	2800      	cmp	r0, #0
    1a64:	d101      	bne.n	1a6a <xQueueGenericReset+0xe>
    1a66:	b672      	cpsid	i
    1a68:	e7fe      	b.n	1a68 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
    1a6a:	4b15      	ldr	r3, [pc, #84]	; (1ac0 <xQueueGenericReset+0x64>)
    1a6c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1a6e:	6823      	ldr	r3, [r4, #0]
    1a70:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1a72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    1a74:	4350      	muls	r0, r2
    1a76:	1819      	adds	r1, r3, r0
    1a78:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1a7a:	2100      	movs	r1, #0
    1a7c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1a7e:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1a80:	1a82      	subs	r2, r0, r2
    1a82:	189b      	adds	r3, r3, r2
    1a84:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    1a86:	2301      	movs	r3, #1
    1a88:	425b      	negs	r3, r3
    1a8a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    1a8c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    1a8e:	2d00      	cmp	r5, #0
    1a90:	d10b      	bne.n	1aaa <xQueueGenericReset+0x4e>
=======
     f80:	b538      	push	{r3, r4, r5, lr}
     f82:	1c04      	adds	r4, r0, #0
     f84:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     f86:	2800      	cmp	r0, #0
     f88:	d101      	bne.n	f8e <xQueueGenericReset+0xe>
     f8a:	b672      	cpsid	i
     f8c:	e7fe      	b.n	f8c <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
     f8e:	4b15      	ldr	r3, [pc, #84]	; (fe4 <xQueueGenericReset+0x64>)
     f90:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     f92:	6823      	ldr	r3, [r4, #0]
     f94:	6c22      	ldr	r2, [r4, #64]	; 0x40
     f96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
     f98:	4350      	muls	r0, r2
     f9a:	1819      	adds	r1, r3, r0
     f9c:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     f9e:	2100      	movs	r1, #0
     fa0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     fa2:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     fa4:	1a82      	subs	r2, r0, r2
     fa6:	189b      	adds	r3, r3, r2
     fa8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     faa:	2301      	movs	r3, #1
     fac:	425b      	negs	r3, r3
     fae:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     fb0:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
     fb2:	2d00      	cmp	r5, #0
     fb4:	d10b      	bne.n	fce <xQueueGenericReset+0x4e>
>>>>>>> JJ's_Branch
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
    1a92:	6921      	ldr	r1, [r4, #16]
    1a94:	2900      	cmp	r1, #0
    1a96:	d00f      	beq.n	1ab8 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1a98:	1c20      	adds	r0, r4, #0
    1a9a:	3010      	adds	r0, #16
    1a9c:	4b09      	ldr	r3, [pc, #36]	; (1ac4 <xQueueGenericReset+0x68>)
    1a9e:	4798      	blx	r3
    1aa0:	2801      	cmp	r0, #1
    1aa2:	d109      	bne.n	1ab8 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1aa4:	4b08      	ldr	r3, [pc, #32]	; (1ac8 <xQueueGenericReset+0x6c>)
    1aa6:	4798      	blx	r3
    1aa8:	e006      	b.n	1ab8 <xQueueGenericReset+0x5c>
=======
     fb6:	6921      	ldr	r1, [r4, #16]
     fb8:	2900      	cmp	r1, #0
     fba:	d00f      	beq.n	fdc <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     fbc:	1c20      	adds	r0, r4, #0
     fbe:	3010      	adds	r0, #16
     fc0:	4b09      	ldr	r3, [pc, #36]	; (fe8 <xQueueGenericReset+0x68>)
     fc2:	4798      	blx	r3
     fc4:	2801      	cmp	r0, #1
     fc6:	d109      	bne.n	fdc <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
     fc8:	4b08      	ldr	r3, [pc, #32]	; (fec <xQueueGenericReset+0x6c>)
     fca:	4798      	blx	r3
     fcc:	e006      	b.n	fdc <xQueueGenericReset+0x5c>
>>>>>>> JJ's_Branch
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
    1aaa:	1c20      	adds	r0, r4, #0
    1aac:	3010      	adds	r0, #16
    1aae:	4d07      	ldr	r5, [pc, #28]	; (1acc <xQueueGenericReset+0x70>)
    1ab0:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1ab2:	1c20      	adds	r0, r4, #0
    1ab4:	3024      	adds	r0, #36	; 0x24
    1ab6:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    1ab8:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <xQueueGenericReset+0x74>)
    1aba:	4798      	blx	r3
=======
     fce:	1c20      	adds	r0, r4, #0
     fd0:	3010      	adds	r0, #16
     fd2:	4d07      	ldr	r5, [pc, #28]	; (ff0 <xQueueGenericReset+0x70>)
     fd4:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     fd6:	1c20      	adds	r0, r4, #0
     fd8:	3024      	adds	r0, #36	; 0x24
     fda:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
     fdc:	4b05      	ldr	r3, [pc, #20]	; (ff4 <xQueueGenericReset+0x74>)
     fde:	4798      	blx	r3
>>>>>>> JJ's_Branch

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
<<<<<<< HEAD
    1abc:	2001      	movs	r0, #1
    1abe:	bd38      	pop	{r3, r4, r5, pc}
    1ac0:	00001719 	.word	0x00001719
    1ac4:	000026d9 	.word	0x000026d9
    1ac8:	00001701 	.word	0x00001701
    1acc:	0000161d 	.word	0x0000161d
    1ad0:	00001731 	.word	0x00001731

00001ad4 <xQueueGenericCreate>:
=======
     fe0:	2001      	movs	r0, #1
     fe2:	bd38      	pop	{r3, r4, r5, pc}
     fe4:	00000c3d 	.word	0x00000c3d
     fe8:	00001bfd 	.word	0x00001bfd
     fec:	00000c25 	.word	0x00000c25
     ff0:	00000b41 	.word	0x00000b41
     ff4:	00000c55 	.word	0x00000c55

00000ff8 <xQueueGenericCreate>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
<<<<<<< HEAD
    1ad4:	b570      	push	{r4, r5, r6, lr}
    1ad6:	1c05      	adds	r5, r0, #0
    1ad8:	1c0e      	adds	r6, r1, #0
=======
     ff8:	b570      	push	{r4, r5, r6, lr}
     ffa:	1c05      	adds	r5, r0, #0
     ffc:	1c0e      	adds	r6, r1, #0
>>>>>>> JJ's_Branch
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
<<<<<<< HEAD
    1ada:	2800      	cmp	r0, #0
    1adc:	d011      	beq.n	1b02 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1ade:	2050      	movs	r0, #80	; 0x50
    1ae0:	4b0e      	ldr	r3, [pc, #56]	; (1b1c <xQueueGenericCreate+0x48>)
    1ae2:	4798      	blx	r3
    1ae4:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1ae6:	d00c      	beq.n	1b02 <xQueueGenericCreate+0x2e>
=======
     ffe:	2800      	cmp	r0, #0
    1000:	d011      	beq.n	1026 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1002:	2050      	movs	r0, #80	; 0x50
    1004:	4b0e      	ldr	r3, [pc, #56]	; (1040 <xQueueGenericCreate+0x48>)
    1006:	4798      	blx	r3
    1008:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    100a:	d00c      	beq.n	1026 <xQueueGenericCreate+0x2e>
>>>>>>> JJ's_Branch
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
    1ae8:	1c30      	adds	r0, r6, #0
    1aea:	4368      	muls	r0, r5
    1aec:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    1aee:	4b0b      	ldr	r3, [pc, #44]	; (1b1c <xQueueGenericCreate+0x48>)
    1af0:	4798      	blx	r3
    1af2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    1af4:	2800      	cmp	r0, #0
    1af6:	d106      	bne.n	1b06 <xQueueGenericCreate+0x32>
=======
    100c:	1c30      	adds	r0, r6, #0
    100e:	4368      	muls	r0, r5
    1010:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    1012:	4b0b      	ldr	r3, [pc, #44]	; (1040 <xQueueGenericCreate+0x48>)
    1014:	4798      	blx	r3
    1016:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    1018:	2800      	cmp	r0, #0
    101a:	d106      	bne.n	102a <xQueueGenericCreate+0x32>
>>>>>>> JJ's_Branch
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
<<<<<<< HEAD
    1af8:	1c20      	adds	r0, r4, #0
    1afa:	4b09      	ldr	r3, [pc, #36]	; (1b20 <xQueueGenericCreate+0x4c>)
    1afc:	4798      	blx	r3
    1afe:	e000      	b.n	1b02 <xQueueGenericCreate+0x2e>
    1b00:	e7fe      	b.n	1b00 <xQueueGenericCreate+0x2c>
=======
    101c:	1c20      	adds	r0, r4, #0
    101e:	4b09      	ldr	r3, [pc, #36]	; (1044 <xQueueGenericCreate+0x4c>)
    1020:	4798      	blx	r3
    1022:	e000      	b.n	1026 <xQueueGenericCreate+0x2e>
    1024:	e7fe      	b.n	1024 <xQueueGenericCreate+0x2c>
>>>>>>> JJ's_Branch
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
    1b02:	b672      	cpsid	i
    1b04:	e7fc      	b.n	1b00 <xQueueGenericCreate+0x2c>
=======
    1026:	b672      	cpsid	i
    1028:	e7fc      	b.n	1024 <xQueueGenericCreate+0x2c>
>>>>>>> JJ's_Branch
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
    1b06:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    1b08:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1b0a:	1c20      	adds	r0, r4, #0
    1b0c:	2101      	movs	r1, #1
    1b0e:	4b05      	ldr	r3, [pc, #20]	; (1b24 <xQueueGenericCreate+0x50>)
    1b10:	4798      	blx	r3
=======
    102a:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    102c:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    102e:	1c20      	adds	r0, r4, #0
    1030:	2101      	movs	r1, #1
    1032:	4b05      	ldr	r3, [pc, #20]	; (1048 <xQueueGenericCreate+0x50>)
    1034:	4798      	blx	r3
>>>>>>> JJ's_Branch
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
<<<<<<< HEAD
    1b12:	2300      	movs	r3, #0
    1b14:	64e3      	str	r3, [r4, #76]	; 0x4c
=======
    1036:	2300      	movs	r3, #0
    1038:	64e3      	str	r3, [r4, #76]	; 0x4c
>>>>>>> JJ's_Branch
	}

	configASSERT( xReturn );

	return xReturn;
}
<<<<<<< HEAD
    1b16:	1c20      	adds	r0, r4, #0
    1b18:	bd70      	pop	{r4, r5, r6, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	00001851 	.word	0x00001851
    1b20:	000018b9 	.word	0x000018b9
    1b24:	00001a5d 	.word	0x00001a5d

00001b28 <xQueueGenericSend>:
=======
    103a:	1c20      	adds	r0, r4, #0
    103c:	bd70      	pop	{r4, r5, r6, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	00000d75 	.word	0x00000d75
    1044:	00000ddd 	.word	0x00000ddd
    1048:	00000f81 	.word	0x00000f81

0000104c <xQueueGenericSend>:
>>>>>>> JJ's_Branch

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
    1b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b2a:	4657      	mov	r7, sl
    1b2c:	464e      	mov	r6, r9
    1b2e:	4645      	mov	r5, r8
    1b30:	b4e0      	push	{r5, r6, r7}
    1b32:	b084      	sub	sp, #16
    1b34:	1c04      	adds	r4, r0, #0
    1b36:	1c0e      	adds	r6, r1, #0
    1b38:	9201      	str	r2, [sp, #4]
    1b3a:	1c1d      	adds	r5, r3, #0
=======
    104c:	b5f0      	push	{r4, r5, r6, r7, lr}
    104e:	4657      	mov	r7, sl
    1050:	464e      	mov	r6, r9
    1052:	4645      	mov	r5, r8
    1054:	b4e0      	push	{r5, r6, r7}
    1056:	b084      	sub	sp, #16
    1058:	1c04      	adds	r4, r0, #0
    105a:	1c0e      	adds	r6, r1, #0
    105c:	9201      	str	r2, [sp, #4]
    105e:	1c1d      	adds	r5, r3, #0
>>>>>>> JJ's_Branch
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
<<<<<<< HEAD
    1b3c:	2800      	cmp	r0, #0
    1b3e:	d101      	bne.n	1b44 <xQueueGenericSend+0x1c>
    1b40:	b672      	cpsid	i
    1b42:	e7fe      	b.n	1b42 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1b44:	2900      	cmp	r1, #0
    1b46:	d104      	bne.n	1b52 <xQueueGenericSend+0x2a>
    1b48:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1b4a:	2a00      	cmp	r2, #0
    1b4c:	d001      	beq.n	1b52 <xQueueGenericSend+0x2a>
    1b4e:	b672      	cpsid	i
    1b50:	e7fe      	b.n	1b50 <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1b52:	2d02      	cmp	r5, #2
    1b54:	d104      	bne.n	1b60 <xQueueGenericSend+0x38>
    1b56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1b58:	2b01      	cmp	r3, #1
    1b5a:	d001      	beq.n	1b60 <xQueueGenericSend+0x38>
    1b5c:	b672      	cpsid	i
    1b5e:	e7fe      	b.n	1b5e <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1b60:	4b41      	ldr	r3, [pc, #260]	; (1c68 <xQueueGenericSend+0x140>)
    1b62:	4798      	blx	r3
    1b64:	2800      	cmp	r0, #0
    1b66:	d102      	bne.n	1b6e <xQueueGenericSend+0x46>
    1b68:	9a01      	ldr	r2, [sp, #4]
    1b6a:	2a00      	cmp	r2, #0
    1b6c:	d103      	bne.n	1b76 <xQueueGenericSend+0x4e>
=======
    1060:	2800      	cmp	r0, #0
    1062:	d101      	bne.n	1068 <xQueueGenericSend+0x1c>
    1064:	b672      	cpsid	i
    1066:	e7fe      	b.n	1066 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1068:	2900      	cmp	r1, #0
    106a:	d104      	bne.n	1076 <xQueueGenericSend+0x2a>
    106c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    106e:	2a00      	cmp	r2, #0
    1070:	d001      	beq.n	1076 <xQueueGenericSend+0x2a>
    1072:	b672      	cpsid	i
    1074:	e7fe      	b.n	1074 <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1076:	2d02      	cmp	r5, #2
    1078:	d104      	bne.n	1084 <xQueueGenericSend+0x38>
    107a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    107c:	2b01      	cmp	r3, #1
    107e:	d001      	beq.n	1084 <xQueueGenericSend+0x38>
    1080:	b672      	cpsid	i
    1082:	e7fe      	b.n	1082 <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1084:	4b41      	ldr	r3, [pc, #260]	; (118c <xQueueGenericSend+0x140>)
    1086:	4798      	blx	r3
    1088:	2800      	cmp	r0, #0
    108a:	d102      	bne.n	1092 <xQueueGenericSend+0x46>
    108c:	9a01      	ldr	r2, [sp, #4]
    108e:	2a00      	cmp	r2, #0
    1090:	d103      	bne.n	109a <xQueueGenericSend+0x4e>
>>>>>>> JJ's_Branch

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
    1b6e:	2700      	movs	r7, #0
=======
    1092:	2700      	movs	r7, #0
>>>>>>> JJ's_Branch
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
    1b70:	4b3e      	ldr	r3, [pc, #248]	; (1c6c <xQueueGenericSend+0x144>)
    1b72:	4698      	mov	r8, r3
    1b74:	e001      	b.n	1b7a <xQueueGenericSend+0x52>
=======
    1094:	4b3e      	ldr	r3, [pc, #248]	; (1190 <xQueueGenericSend+0x144>)
    1096:	4698      	mov	r8, r3
    1098:	e001      	b.n	109e <xQueueGenericSend+0x52>
>>>>>>> JJ's_Branch
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
    1b76:	b672      	cpsid	i
    1b78:	e7fe      	b.n	1b78 <xQueueGenericSend+0x50>
=======
    109a:	b672      	cpsid	i
    109c:	e7fe      	b.n	109c <xQueueGenericSend+0x50>
>>>>>>> JJ's_Branch
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
    1b7a:	47c0      	blx	r8
=======
    109e:	47c0      	blx	r8
>>>>>>> JJ's_Branch
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
    1b7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1b7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1b80:	4293      	cmp	r3, r2
    1b82:	d301      	bcc.n	1b88 <xQueueGenericSend+0x60>
    1b84:	2d02      	cmp	r5, #2
    1b86:	d11f      	bne.n	1bc8 <xQueueGenericSend+0xa0>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1b88:	1c20      	adds	r0, r4, #0
    1b8a:	1c31      	adds	r1, r6, #0
    1b8c:	1c2a      	adds	r2, r5, #0
    1b8e:	4b38      	ldr	r3, [pc, #224]	; (1c70 <xQueueGenericSend+0x148>)
    1b90:	4798      	blx	r3
=======
    10a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    10a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    10a4:	4293      	cmp	r3, r2
    10a6:	d301      	bcc.n	10ac <xQueueGenericSend+0x60>
    10a8:	2d02      	cmp	r5, #2
    10aa:	d11f      	bne.n	10ec <xQueueGenericSend+0xa0>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    10ac:	1c20      	adds	r0, r4, #0
    10ae:	1c31      	adds	r1, r6, #0
    10b0:	1c2a      	adds	r2, r5, #0
    10b2:	4b38      	ldr	r3, [pc, #224]	; (1194 <xQueueGenericSend+0x148>)
    10b4:	4798      	blx	r3
>>>>>>> JJ's_Branch

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
<<<<<<< HEAD
    1b92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1b94:	2b00      	cmp	r3, #0
    1b96:	d008      	beq.n	1baa <xQueueGenericSend+0x82>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1b98:	1c20      	adds	r0, r4, #0
    1b9a:	1c29      	adds	r1, r5, #0
    1b9c:	4b35      	ldr	r3, [pc, #212]	; (1c74 <xQueueGenericSend+0x14c>)
    1b9e:	4798      	blx	r3
    1ba0:	2801      	cmp	r0, #1
    1ba2:	d10d      	bne.n	1bc0 <xQueueGenericSend+0x98>
=======
    10b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    10b8:	2b00      	cmp	r3, #0
    10ba:	d008      	beq.n	10ce <xQueueGenericSend+0x82>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    10bc:	1c20      	adds	r0, r4, #0
    10be:	1c29      	adds	r1, r5, #0
    10c0:	4b35      	ldr	r3, [pc, #212]	; (1198 <xQueueGenericSend+0x14c>)
    10c2:	4798      	blx	r3
    10c4:	2801      	cmp	r0, #1
    10c6:	d10d      	bne.n	10e4 <xQueueGenericSend+0x98>
>>>>>>> JJ's_Branch
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
    1ba4:	4b34      	ldr	r3, [pc, #208]	; (1c78 <xQueueGenericSend+0x150>)
    1ba6:	4798      	blx	r3
    1ba8:	e00a      	b.n	1bc0 <xQueueGenericSend+0x98>
=======
    10c8:	4b34      	ldr	r3, [pc, #208]	; (119c <xQueueGenericSend+0x150>)
    10ca:	4798      	blx	r3
    10cc:	e00a      	b.n	10e4 <xQueueGenericSend+0x98>
>>>>>>> JJ's_Branch
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
    1baa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1bac:	2a00      	cmp	r2, #0
    1bae:	d007      	beq.n	1bc0 <xQueueGenericSend+0x98>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1bb0:	1c20      	adds	r0, r4, #0
    1bb2:	3024      	adds	r0, #36	; 0x24
    1bb4:	4b31      	ldr	r3, [pc, #196]	; (1c7c <xQueueGenericSend+0x154>)
    1bb6:	4798      	blx	r3
    1bb8:	2801      	cmp	r0, #1
    1bba:	d101      	bne.n	1bc0 <xQueueGenericSend+0x98>
=======
    10ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    10d0:	2a00      	cmp	r2, #0
    10d2:	d007      	beq.n	10e4 <xQueueGenericSend+0x98>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    10d4:	1c20      	adds	r0, r4, #0
    10d6:	3024      	adds	r0, #36	; 0x24
    10d8:	4b31      	ldr	r3, [pc, #196]	; (11a0 <xQueueGenericSend+0x154>)
    10da:	4798      	blx	r3
    10dc:	2801      	cmp	r0, #1
    10de:	d101      	bne.n	10e4 <xQueueGenericSend+0x98>
>>>>>>> JJ's_Branch
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
    1bbc:	4b2e      	ldr	r3, [pc, #184]	; (1c78 <xQueueGenericSend+0x150>)
    1bbe:	4798      	blx	r3
=======
    10e0:	4b2e      	ldr	r3, [pc, #184]	; (119c <xQueueGenericSend+0x150>)
    10e2:	4798      	blx	r3
>>>>>>> JJ's_Branch
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
    1bc0:	4b2f      	ldr	r3, [pc, #188]	; (1c80 <xQueueGenericSend+0x158>)
    1bc2:	4798      	blx	r3
=======
    10e4:	4b2f      	ldr	r3, [pc, #188]	; (11a4 <xQueueGenericSend+0x158>)
    10e6:	4798      	blx	r3
>>>>>>> JJ's_Branch

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
<<<<<<< HEAD
    1bc4:	2001      	movs	r0, #1
    1bc6:	e049      	b.n	1c5c <xQueueGenericSend+0x134>
=======
    10e8:	2001      	movs	r0, #1
    10ea:	e049      	b.n	1180 <xQueueGenericSend+0x134>
>>>>>>> JJ's_Branch
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d103      	bne.n	1bd6 <xQueueGenericSend+0xae>
=======
    10ec:	9b01      	ldr	r3, [sp, #4]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d103      	bne.n	10fa <xQueueGenericSend+0xae>
>>>>>>> JJ's_Branch
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
    1bce:	4b2c      	ldr	r3, [pc, #176]	; (1c80 <xQueueGenericSend+0x158>)
    1bd0:	4798      	blx	r3
=======
    10f2:	4b2c      	ldr	r3, [pc, #176]	; (11a4 <xQueueGenericSend+0x158>)
    10f4:	4798      	blx	r3
>>>>>>> JJ's_Branch

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
    1bd2:	2000      	movs	r0, #0
    1bd4:	e042      	b.n	1c5c <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
    1bd6:	2f00      	cmp	r7, #0
    1bd8:	d103      	bne.n	1be2 <xQueueGenericSend+0xba>
=======
    10f6:	2000      	movs	r0, #0
    10f8:	e042      	b.n	1180 <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
    10fa:	2f00      	cmp	r7, #0
    10fc:	d103      	bne.n	1106 <xQueueGenericSend+0xba>
>>>>>>> JJ's_Branch
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
    1bda:	a802      	add	r0, sp, #8
    1bdc:	4a29      	ldr	r2, [pc, #164]	; (1c84 <xQueueGenericSend+0x15c>)
    1bde:	4790      	blx	r2
					xEntryTimeSet = pdTRUE;
    1be0:	2701      	movs	r7, #1
=======
    10fe:	a802      	add	r0, sp, #8
    1100:	4a29      	ldr	r2, [pc, #164]	; (11a8 <xQueueGenericSend+0x15c>)
    1102:	4790      	blx	r2
					xEntryTimeSet = pdTRUE;
    1104:	2701      	movs	r7, #1
>>>>>>> JJ's_Branch
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
    1be2:	4b27      	ldr	r3, [pc, #156]	; (1c80 <xQueueGenericSend+0x158>)
    1be4:	4798      	blx	r3
=======
    1106:	4b27      	ldr	r3, [pc, #156]	; (11a4 <xQueueGenericSend+0x158>)
    1108:	4798      	blx	r3
>>>>>>> JJ's_Branch

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
    1be6:	4b28      	ldr	r3, [pc, #160]	; (1c88 <xQueueGenericSend+0x160>)
    1be8:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1bea:	4b20      	ldr	r3, [pc, #128]	; (1c6c <xQueueGenericSend+0x144>)
    1bec:	4798      	blx	r3
    1bee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1bf0:	3301      	adds	r3, #1
    1bf2:	d101      	bne.n	1bf8 <xQueueGenericSend+0xd0>
    1bf4:	2300      	movs	r3, #0
    1bf6:	6463      	str	r3, [r4, #68]	; 0x44
    1bf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1bfa:	3301      	adds	r3, #1
    1bfc:	d101      	bne.n	1c02 <xQueueGenericSend+0xda>
    1bfe:	2300      	movs	r3, #0
    1c00:	64a3      	str	r3, [r4, #72]	; 0x48
    1c02:	4b1f      	ldr	r3, [pc, #124]	; (1c80 <xQueueGenericSend+0x158>)
    1c04:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c06:	a802      	add	r0, sp, #8
    1c08:	a901      	add	r1, sp, #4
    1c0a:	4b20      	ldr	r3, [pc, #128]	; (1c8c <xQueueGenericSend+0x164>)
    1c0c:	4798      	blx	r3
    1c0e:	2800      	cmp	r0, #0
    1c10:	d11e      	bne.n	1c50 <xQueueGenericSend+0x128>
=======
    110a:	4b28      	ldr	r3, [pc, #160]	; (11ac <xQueueGenericSend+0x160>)
    110c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    110e:	4b20      	ldr	r3, [pc, #128]	; (1190 <xQueueGenericSend+0x144>)
    1110:	4798      	blx	r3
    1112:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1114:	3301      	adds	r3, #1
    1116:	d101      	bne.n	111c <xQueueGenericSend+0xd0>
    1118:	2300      	movs	r3, #0
    111a:	6463      	str	r3, [r4, #68]	; 0x44
    111c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    111e:	3301      	adds	r3, #1
    1120:	d101      	bne.n	1126 <xQueueGenericSend+0xda>
    1122:	2300      	movs	r3, #0
    1124:	64a3      	str	r3, [r4, #72]	; 0x48
    1126:	4b1f      	ldr	r3, [pc, #124]	; (11a4 <xQueueGenericSend+0x158>)
    1128:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    112a:	a802      	add	r0, sp, #8
    112c:	a901      	add	r1, sp, #4
    112e:	4b20      	ldr	r3, [pc, #128]	; (11b0 <xQueueGenericSend+0x164>)
    1130:	4798      	blx	r3
    1132:	2800      	cmp	r0, #0
    1134:	d11e      	bne.n	1174 <xQueueGenericSend+0x128>
>>>>>>> JJ's_Branch

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
<<<<<<< HEAD
    1c12:	4b16      	ldr	r3, [pc, #88]	; (1c6c <xQueueGenericSend+0x144>)
    1c14:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1c16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1c18:	4692      	mov	sl, r2
    1c1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1c1c:	4699      	mov	r9, r3
=======
    1136:	4b16      	ldr	r3, [pc, #88]	; (1190 <xQueueGenericSend+0x144>)
    1138:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    113a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    113c:	4692      	mov	sl, r2
    113e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1140:	4699      	mov	r9, r3
>>>>>>> JJ's_Branch
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
    1c1e:	4b18      	ldr	r3, [pc, #96]	; (1c80 <xQueueGenericSend+0x158>)
    1c20:	4798      	blx	r3
=======
    1142:	4b18      	ldr	r3, [pc, #96]	; (11a4 <xQueueGenericSend+0x158>)
    1144:	4798      	blx	r3
>>>>>>> JJ's_Branch
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
<<<<<<< HEAD
    1c22:	45ca      	cmp	sl, r9
    1c24:	d10e      	bne.n	1c44 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1c26:	1c20      	adds	r0, r4, #0
    1c28:	3010      	adds	r0, #16
    1c2a:	9901      	ldr	r1, [sp, #4]
    1c2c:	4b18      	ldr	r3, [pc, #96]	; (1c90 <xQueueGenericSend+0x168>)
    1c2e:	4798      	blx	r3
=======
    1146:	45ca      	cmp	sl, r9
    1148:	d10e      	bne.n	1168 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    114a:	1c20      	adds	r0, r4, #0
    114c:	3010      	adds	r0, #16
    114e:	9901      	ldr	r1, [sp, #4]
    1150:	4b18      	ldr	r3, [pc, #96]	; (11b4 <xQueueGenericSend+0x168>)
    1152:	4798      	blx	r3
>>>>>>> JJ's_Branch
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
    1c30:	1c20      	adds	r0, r4, #0
    1c32:	4b18      	ldr	r3, [pc, #96]	; (1c94 <xQueueGenericSend+0x16c>)
    1c34:	4798      	blx	r3
=======
    1154:	1c20      	adds	r0, r4, #0
    1156:	4b18      	ldr	r3, [pc, #96]	; (11b8 <xQueueGenericSend+0x16c>)
    1158:	4798      	blx	r3
>>>>>>> JJ's_Branch
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
    1c36:	4b18      	ldr	r3, [pc, #96]	; (1c98 <xQueueGenericSend+0x170>)
    1c38:	4798      	blx	r3
    1c3a:	2800      	cmp	r0, #0
    1c3c:	d19d      	bne.n	1b7a <xQueueGenericSend+0x52>
				{
					portYIELD_WITHIN_API();
    1c3e:	4b0e      	ldr	r3, [pc, #56]	; (1c78 <xQueueGenericSend+0x150>)
    1c40:	4798      	blx	r3
    1c42:	e79a      	b.n	1b7a <xQueueGenericSend+0x52>
=======
    115a:	4b18      	ldr	r3, [pc, #96]	; (11bc <xQueueGenericSend+0x170>)
    115c:	4798      	blx	r3
    115e:	2800      	cmp	r0, #0
    1160:	d19d      	bne.n	109e <xQueueGenericSend+0x52>
				{
					portYIELD_WITHIN_API();
    1162:	4b0e      	ldr	r3, [pc, #56]	; (119c <xQueueGenericSend+0x150>)
    1164:	4798      	blx	r3
    1166:	e79a      	b.n	109e <xQueueGenericSend+0x52>
>>>>>>> JJ's_Branch
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
    1c44:	1c20      	adds	r0, r4, #0
    1c46:	4b13      	ldr	r3, [pc, #76]	; (1c94 <xQueueGenericSend+0x16c>)
    1c48:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1c4a:	4b13      	ldr	r3, [pc, #76]	; (1c98 <xQueueGenericSend+0x170>)
    1c4c:	4798      	blx	r3
    1c4e:	e794      	b.n	1b7a <xQueueGenericSend+0x52>
=======
    1168:	1c20      	adds	r0, r4, #0
    116a:	4b13      	ldr	r3, [pc, #76]	; (11b8 <xQueueGenericSend+0x16c>)
    116c:	4798      	blx	r3
				( void ) xTaskResumeAll();
    116e:	4b13      	ldr	r3, [pc, #76]	; (11bc <xQueueGenericSend+0x170>)
    1170:	4798      	blx	r3
    1172:	e794      	b.n	109e <xQueueGenericSend+0x52>
>>>>>>> JJ's_Branch
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
    1c50:	1c20      	adds	r0, r4, #0
    1c52:	4b10      	ldr	r3, [pc, #64]	; (1c94 <xQueueGenericSend+0x16c>)
    1c54:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1c56:	4b10      	ldr	r3, [pc, #64]	; (1c98 <xQueueGenericSend+0x170>)
    1c58:	4798      	blx	r3
=======
    1174:	1c20      	adds	r0, r4, #0
    1176:	4b10      	ldr	r3, [pc, #64]	; (11b8 <xQueueGenericSend+0x16c>)
    1178:	4798      	blx	r3
			( void ) xTaskResumeAll();
    117a:	4b10      	ldr	r3, [pc, #64]	; (11bc <xQueueGenericSend+0x170>)
    117c:	4798      	blx	r3
>>>>>>> JJ's_Branch

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
<<<<<<< HEAD
    1c5a:	2000      	movs	r0, #0
		}
	}
}
    1c5c:	b004      	add	sp, #16
    1c5e:	bc1c      	pop	{r2, r3, r4}
    1c60:	4690      	mov	r8, r2
    1c62:	4699      	mov	r9, r3
    1c64:	46a2      	mov	sl, r4
    1c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c68:	00002809 	.word	0x00002809
    1c6c:	00001719 	.word	0x00001719
    1c70:	000018c5 	.word	0x000018c5
    1c74:	0000193d 	.word	0x0000193d
    1c78:	00001701 	.word	0x00001701
    1c7c:	000026d9 	.word	0x000026d9
    1c80:	00001731 	.word	0x00001731
    1c84:	00002761 	.word	0x00002761
    1c88:	00002275 	.word	0x00002275
    1c8c:	00002781 	.word	0x00002781
    1c90:	00002641 	.word	0x00002641
    1c94:	000019b5 	.word	0x000019b5
    1c98:	000023d1 	.word	0x000023d1

00001c9c <xQueueCreateMutex>:
=======
    117e:	2000      	movs	r0, #0
		}
	}
}
    1180:	b004      	add	sp, #16
    1182:	bc1c      	pop	{r2, r3, r4}
    1184:	4690      	mov	r8, r2
    1186:	4699      	mov	r9, r3
    1188:	46a2      	mov	sl, r4
    118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    118c:	00001d2d 	.word	0x00001d2d
    1190:	00000c3d 	.word	0x00000c3d
    1194:	00000de9 	.word	0x00000de9
    1198:	00000e61 	.word	0x00000e61
    119c:	00000c25 	.word	0x00000c25
    11a0:	00001bfd 	.word	0x00001bfd
    11a4:	00000c55 	.word	0x00000c55
    11a8:	00001c85 	.word	0x00001c85
    11ac:	00001799 	.word	0x00001799
    11b0:	00001ca5 	.word	0x00001ca5
    11b4:	00001b65 	.word	0x00001b65
    11b8:	00000ed9 	.word	0x00000ed9
    11bc:	000018f5 	.word	0x000018f5

000011c0 <xQueueCreateMutex>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
<<<<<<< HEAD
    1c9c:	b538      	push	{r3, r4, r5, lr}
=======
    11c0:	b538      	push	{r3, r4, r5, lr}
>>>>>>> JJ's_Branch
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
<<<<<<< HEAD
    1c9e:	2050      	movs	r0, #80	; 0x50
    1ca0:	4b11      	ldr	r3, [pc, #68]	; (1ce8 <xQueueCreateMutex+0x4c>)
    1ca2:	4798      	blx	r3
    1ca4:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1ca6:	d001      	beq.n	1cac <xQueueCreateMutex+0x10>
    1ca8:	e002      	b.n	1cb0 <xQueueCreateMutex+0x14>
    1caa:	e7fe      	b.n	1caa <xQueueCreateMutex+0xe>
=======
    11c2:	2050      	movs	r0, #80	; 0x50
    11c4:	4b11      	ldr	r3, [pc, #68]	; (120c <xQueueCreateMutex+0x4c>)
    11c6:	4798      	blx	r3
    11c8:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    11ca:	d001      	beq.n	11d0 <xQueueCreateMutex+0x10>
    11cc:	e002      	b.n	11d4 <xQueueCreateMutex+0x14>
    11ce:	e7fe      	b.n	11ce <xQueueCreateMutex+0xe>
>>>>>>> JJ's_Branch
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
<<<<<<< HEAD
    1cac:	b672      	cpsid	i
    1cae:	e7fc      	b.n	1caa <xQueueCreateMutex+0xe>
=======
    11d0:	b672      	cpsid	i
    11d2:	e7fc      	b.n	11ce <xQueueCreateMutex+0xe>
>>>>>>> JJ's_Branch
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
<<<<<<< HEAD
    1cb0:	2300      	movs	r3, #0
    1cb2:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1cb4:	6003      	str	r3, [r0, #0]
=======
    11d4:	2300      	movs	r3, #0
    11d6:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    11d8:	6003      	str	r3, [r0, #0]
>>>>>>> JJ's_Branch

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
<<<<<<< HEAD
    1cb6:	6083      	str	r3, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
    1cb8:	60c3      	str	r3, [r0, #12]
=======
    11da:	6083      	str	r3, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
    11dc:	60c3      	str	r3, [r0, #12]
>>>>>>> JJ's_Branch

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
<<<<<<< HEAD
    1cba:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    1cbc:	2201      	movs	r2, #1
    1cbe:	63c2      	str	r2, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    1cc0:	6403      	str	r3, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    1cc2:	4252      	negs	r2, r2
    1cc4:	6442      	str	r2, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    1cc6:	6482      	str	r2, [r0, #72]	; 0x48
=======
    11de:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    11e0:	2201      	movs	r2, #1
    11e2:	63c2      	str	r2, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    11e4:	6403      	str	r3, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    11e6:	4252      	negs	r2, r2
    11e8:	6442      	str	r2, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    11ea:	6482      	str	r2, [r0, #72]	; 0x48
>>>>>>> JJ's_Branch
			}
			#endif

			#if ( configUSE_QUEUE_SETS == 1 )
			{
				pxNewQueue->pxQueueSetContainer = NULL;
<<<<<<< HEAD
    1cc8:	64c3      	str	r3, [r0, #76]	; 0x4c
=======
    11ec:	64c3      	str	r3, [r0, #76]	; 0x4c
>>>>>>> JJ's_Branch
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
    1cca:	3010      	adds	r0, #16
    1ccc:	4d07      	ldr	r5, [pc, #28]	; (1cec <xQueueCreateMutex+0x50>)
    1cce:	47a8      	blx	r5
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1cd0:	1c20      	adds	r0, r4, #0
    1cd2:	3024      	adds	r0, #36	; 0x24
    1cd4:	47a8      	blx	r5
=======
    11ee:	3010      	adds	r0, #16
    11f0:	4d07      	ldr	r5, [pc, #28]	; (1210 <xQueueCreateMutex+0x50>)
    11f2:	47a8      	blx	r5
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    11f4:	1c20      	adds	r0, r4, #0
    11f6:	3024      	adds	r0, #36	; 0x24
    11f8:	47a8      	blx	r5
>>>>>>> JJ's_Branch

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
<<<<<<< HEAD
    1cd6:	1c20      	adds	r0, r4, #0
    1cd8:	2100      	movs	r1, #0
    1cda:	2200      	movs	r2, #0
    1cdc:	2300      	movs	r3, #0
    1cde:	4d04      	ldr	r5, [pc, #16]	; (1cf0 <xQueueCreateMutex+0x54>)
    1ce0:	47a8      	blx	r5
=======
    11fa:	1c20      	adds	r0, r4, #0
    11fc:	2100      	movs	r1, #0
    11fe:	2200      	movs	r2, #0
    1200:	2300      	movs	r3, #0
    1202:	4d04      	ldr	r5, [pc, #16]	; (1214 <xQueueCreateMutex+0x54>)
    1204:	47a8      	blx	r5
>>>>>>> JJ's_Branch
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
<<<<<<< HEAD
    1ce2:	1c20      	adds	r0, r4, #0
    1ce4:	bd38      	pop	{r3, r4, r5, pc}
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	00001851 	.word	0x00001851
    1cec:	0000161d 	.word	0x0000161d
    1cf0:	00001b29 	.word	0x00001b29

00001cf4 <xQueueGenericSendFromISR>:
=======
    1206:	1c20      	adds	r0, r4, #0
    1208:	bd38      	pop	{r3, r4, r5, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	00000d75 	.word	0x00000d75
    1210:	00000b41 	.word	0x00000b41
    1214:	0000104d 	.word	0x0000104d

00001218 <xQueueGenericSendFromISR>:
>>>>>>> JJ's_Branch

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
    1cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cf6:	4647      	mov	r7, r8
    1cf8:	b480      	push	{r7}
    1cfa:	1c04      	adds	r4, r0, #0
    1cfc:	4688      	mov	r8, r1
    1cfe:	1c16      	adds	r6, r2, #0
    1d00:	1c1d      	adds	r5, r3, #0
=======
    1218:	b5f0      	push	{r4, r5, r6, r7, lr}
    121a:	4647      	mov	r7, r8
    121c:	b480      	push	{r7}
    121e:	1c04      	adds	r4, r0, #0
    1220:	4688      	mov	r8, r1
    1222:	1c16      	adds	r6, r2, #0
    1224:	1c1d      	adds	r5, r3, #0
>>>>>>> JJ's_Branch
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
<<<<<<< HEAD
    1d02:	2800      	cmp	r0, #0
    1d04:	d101      	bne.n	1d0a <xQueueGenericSendFromISR+0x16>
    1d06:	b672      	cpsid	i
    1d08:	e7fe      	b.n	1d08 <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1d0a:	2900      	cmp	r1, #0
    1d0c:	d104      	bne.n	1d18 <xQueueGenericSendFromISR+0x24>
    1d0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1d10:	2b00      	cmp	r3, #0
    1d12:	d001      	beq.n	1d18 <xQueueGenericSendFromISR+0x24>
    1d14:	b672      	cpsid	i
    1d16:	e7fe      	b.n	1d16 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1d18:	2d02      	cmp	r5, #2
    1d1a:	d133      	bne.n	1d84 <xQueueGenericSendFromISR+0x90>
    1d1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1d1e:	2a01      	cmp	r2, #1
    1d20:	d039      	beq.n	1d96 <xQueueGenericSendFromISR+0xa2>
    1d22:	b672      	cpsid	i
    1d24:	e7fe      	b.n	1d24 <xQueueGenericSendFromISR+0x30>
=======
    1226:	2800      	cmp	r0, #0
    1228:	d101      	bne.n	122e <xQueueGenericSendFromISR+0x16>
    122a:	b672      	cpsid	i
    122c:	e7fe      	b.n	122c <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    122e:	2900      	cmp	r1, #0
    1230:	d104      	bne.n	123c <xQueueGenericSendFromISR+0x24>
    1232:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1234:	2b00      	cmp	r3, #0
    1236:	d001      	beq.n	123c <xQueueGenericSendFromISR+0x24>
    1238:	b672      	cpsid	i
    123a:	e7fe      	b.n	123a <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    123c:	2d02      	cmp	r5, #2
    123e:	d133      	bne.n	12a8 <xQueueGenericSendFromISR+0x90>
    1240:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1242:	2a01      	cmp	r2, #1
    1244:	d039      	beq.n	12ba <xQueueGenericSendFromISR+0xa2>
    1246:	b672      	cpsid	i
    1248:	e7fe      	b.n	1248 <xQueueGenericSendFromISR+0x30>
>>>>>>> JJ's_Branch
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
    1d26:	1c20      	adds	r0, r4, #0
    1d28:	4641      	mov	r1, r8
    1d2a:	1c2a      	adds	r2, r5, #0
    1d2c:	4b20      	ldr	r3, [pc, #128]	; (1db0 <xQueueGenericSendFromISR+0xbc>)
    1d2e:	4798      	blx	r3
=======
    124a:	1c20      	adds	r0, r4, #0
    124c:	4641      	mov	r1, r8
    124e:	1c2a      	adds	r2, r5, #0
    1250:	4b20      	ldr	r3, [pc, #128]	; (12d4 <xQueueGenericSendFromISR+0xbc>)
    1252:	4798      	blx	r3
>>>>>>> JJ's_Branch

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
<<<<<<< HEAD
    1d30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1d32:	3301      	adds	r3, #1
    1d34:	d11d      	bne.n	1d72 <xQueueGenericSendFromISR+0x7e>
=======
    1254:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1256:	3301      	adds	r3, #1
    1258:	d11d      	bne.n	1296 <xQueueGenericSendFromISR+0x7e>
>>>>>>> JJ's_Branch
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
<<<<<<< HEAD
    1d36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d00b      	beq.n	1d54 <xQueueGenericSendFromISR+0x60>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1d3c:	1c20      	adds	r0, r4, #0
    1d3e:	1c29      	adds	r1, r5, #0
    1d40:	4b1c      	ldr	r3, [pc, #112]	; (1db4 <xQueueGenericSendFromISR+0xc0>)
    1d42:	4798      	blx	r3
=======
    125a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    125c:	2b00      	cmp	r3, #0
    125e:	d00b      	beq.n	1278 <xQueueGenericSendFromISR+0x60>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1260:	1c20      	adds	r0, r4, #0
    1262:	1c29      	adds	r1, r5, #0
    1264:	4b1c      	ldr	r3, [pc, #112]	; (12d8 <xQueueGenericSendFromISR+0xc0>)
    1266:	4798      	blx	r3
>>>>>>> JJ's_Branch
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
<<<<<<< HEAD
    1d44:	2501      	movs	r5, #1
=======
    1268:	2501      	movs	r5, #1
>>>>>>> JJ's_Branch
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
<<<<<<< HEAD
    1d46:	2801      	cmp	r0, #1
    1d48:	d12a      	bne.n	1da0 <xQueueGenericSendFromISR+0xac>
=======
    126a:	2801      	cmp	r0, #1
    126c:	d12a      	bne.n	12c4 <xQueueGenericSendFromISR+0xac>
>>>>>>> JJ's_Branch
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
    1d4a:	2e00      	cmp	r6, #0
    1d4c:	d016      	beq.n	1d7c <xQueueGenericSendFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1d4e:	2301      	movs	r3, #1
    1d50:	6033      	str	r3, [r6, #0]
    1d52:	e025      	b.n	1da0 <xQueueGenericSendFromISR+0xac>
=======
    126e:	2e00      	cmp	r6, #0
    1270:	d016      	beq.n	12a0 <xQueueGenericSendFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1272:	2301      	movs	r3, #1
    1274:	6033      	str	r3, [r6, #0]
    1276:	e025      	b.n	12c4 <xQueueGenericSendFromISR+0xac>
>>>>>>> JJ's_Branch
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
<<<<<<< HEAD
    1d54:	2501      	movs	r5, #1
=======
    1278:	2501      	movs	r5, #1
>>>>>>> JJ's_Branch
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
    1d56:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1d58:	2a00      	cmp	r2, #0
    1d5a:	d021      	beq.n	1da0 <xQueueGenericSendFromISR+0xac>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d5c:	1c20      	adds	r0, r4, #0
    1d5e:	3024      	adds	r0, #36	; 0x24
    1d60:	4b15      	ldr	r3, [pc, #84]	; (1db8 <xQueueGenericSendFromISR+0xc4>)
    1d62:	4798      	blx	r3
    1d64:	2800      	cmp	r0, #0
    1d66:	d01b      	beq.n	1da0 <xQueueGenericSendFromISR+0xac>
=======
    127a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    127c:	2a00      	cmp	r2, #0
    127e:	d021      	beq.n	12c4 <xQueueGenericSendFromISR+0xac>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1280:	1c20      	adds	r0, r4, #0
    1282:	3024      	adds	r0, #36	; 0x24
    1284:	4b15      	ldr	r3, [pc, #84]	; (12dc <xQueueGenericSendFromISR+0xc4>)
    1286:	4798      	blx	r3
    1288:	2800      	cmp	r0, #0
    128a:	d01b      	beq.n	12c4 <xQueueGenericSendFromISR+0xac>
>>>>>>> JJ's_Branch
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
    1d68:	2e00      	cmp	r6, #0
    1d6a:	d009      	beq.n	1d80 <xQueueGenericSendFromISR+0x8c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    1d6c:	2301      	movs	r3, #1
    1d6e:	6033      	str	r3, [r6, #0]
    1d70:	e016      	b.n	1da0 <xQueueGenericSendFromISR+0xac>
=======
    128c:	2e00      	cmp	r6, #0
    128e:	d009      	beq.n	12a4 <xQueueGenericSendFromISR+0x8c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    1290:	2301      	movs	r3, #1
    1292:	6033      	str	r3, [r6, #0]
    1294:	e016      	b.n	12c4 <xQueueGenericSendFromISR+0xac>
>>>>>>> JJ's_Branch
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
<<<<<<< HEAD
    1d72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1d74:	3301      	adds	r3, #1
    1d76:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    1d78:	2501      	movs	r5, #1
    1d7a:	e011      	b.n	1da0 <xQueueGenericSendFromISR+0xac>
    1d7c:	2501      	movs	r5, #1
    1d7e:	e00f      	b.n	1da0 <xQueueGenericSendFromISR+0xac>
    1d80:	2501      	movs	r5, #1
    1d82:	e00d      	b.n	1da0 <xQueueGenericSendFromISR+0xac>
=======
    1296:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1298:	3301      	adds	r3, #1
    129a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    129c:	2501      	movs	r5, #1
    129e:	e011      	b.n	12c4 <xQueueGenericSendFromISR+0xac>
    12a0:	2501      	movs	r5, #1
    12a2:	e00f      	b.n	12c4 <xQueueGenericSendFromISR+0xac>
    12a4:	2501      	movs	r5, #1
    12a6:	e00d      	b.n	12c4 <xQueueGenericSendFromISR+0xac>
>>>>>>> JJ's_Branch
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
    1d84:	4b0d      	ldr	r3, [pc, #52]	; (1dbc <xQueueGenericSendFromISR+0xc8>)
    1d86:	4798      	blx	r3
    1d88:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1d8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1d8e:	4293      	cmp	r3, r2
    1d90:	d3c9      	bcc.n	1d26 <xQueueGenericSendFromISR+0x32>
=======
    12a8:	4b0d      	ldr	r3, [pc, #52]	; (12e0 <xQueueGenericSendFromISR+0xc8>)
    12aa:	4798      	blx	r3
    12ac:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    12ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    12b2:	4293      	cmp	r3, r2
    12b4:	d3c9      	bcc.n	124a <xQueueGenericSendFromISR+0x32>
>>>>>>> JJ's_Branch
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
    1d92:	2500      	movs	r5, #0
    1d94:	e004      	b.n	1da0 <xQueueGenericSendFromISR+0xac>
=======
    12b6:	2500      	movs	r5, #0
    12b8:	e004      	b.n	12c4 <xQueueGenericSendFromISR+0xac>
>>>>>>> JJ's_Branch
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
    1d96:	4b09      	ldr	r3, [pc, #36]	; (1dbc <xQueueGenericSendFromISR+0xc8>)
    1d98:	4798      	blx	r3
    1d9a:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1d9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d9e:	e7c2      	b.n	1d26 <xQueueGenericSendFromISR+0x32>
=======
    12ba:	4b09      	ldr	r3, [pc, #36]	; (12e0 <xQueueGenericSendFromISR+0xc8>)
    12bc:	4798      	blx	r3
    12be:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    12c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    12c2:	e7c2      	b.n	124a <xQueueGenericSendFromISR+0x32>
>>>>>>> JJ's_Branch
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
<<<<<<< HEAD
    1da0:	1c38      	adds	r0, r7, #0
    1da2:	4b07      	ldr	r3, [pc, #28]	; (1dc0 <xQueueGenericSendFromISR+0xcc>)
    1da4:	4798      	blx	r3

	return xReturn;
}
    1da6:	1c28      	adds	r0, r5, #0
    1da8:	bc04      	pop	{r2}
    1daa:	4690      	mov	r8, r2
    1dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	000018c5 	.word	0x000018c5
    1db4:	0000193d 	.word	0x0000193d
    1db8:	000026d9 	.word	0x000026d9
    1dbc:	00001751 	.word	0x00001751
    1dc0:	0000175d 	.word	0x0000175d

00001dc4 <xQueueGenericReceive>:
=======
    12c4:	1c38      	adds	r0, r7, #0
    12c6:	4b07      	ldr	r3, [pc, #28]	; (12e4 <xQueueGenericSendFromISR+0xcc>)
    12c8:	4798      	blx	r3

	return xReturn;
}
    12ca:	1c28      	adds	r0, r5, #0
    12cc:	bc04      	pop	{r2}
    12ce:	4690      	mov	r8, r2
    12d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d2:	46c0      	nop			; (mov r8, r8)
    12d4:	00000de9 	.word	0x00000de9
    12d8:	00000e61 	.word	0x00000e61
    12dc:	00001bfd 	.word	0x00001bfd
    12e0:	00000c75 	.word	0x00000c75
    12e4:	00000c81 	.word	0x00000c81

000012e8 <xQueueGenericReceive>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
<<<<<<< HEAD
    1dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dc6:	464f      	mov	r7, r9
    1dc8:	4646      	mov	r6, r8
    1dca:	b4c0      	push	{r6, r7}
    1dcc:	b085      	sub	sp, #20
    1dce:	1c04      	adds	r4, r0, #0
    1dd0:	1c0d      	adds	r5, r1, #0
    1dd2:	9201      	str	r2, [sp, #4]
    1dd4:	1c1f      	adds	r7, r3, #0
=======
    12e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ea:	464f      	mov	r7, r9
    12ec:	4646      	mov	r6, r8
    12ee:	b4c0      	push	{r6, r7}
    12f0:	b085      	sub	sp, #20
    12f2:	1c04      	adds	r4, r0, #0
    12f4:	1c0d      	adds	r5, r1, #0
    12f6:	9201      	str	r2, [sp, #4]
    12f8:	1c1f      	adds	r7, r3, #0
>>>>>>> JJ's_Branch
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
<<<<<<< HEAD
    1dd6:	2800      	cmp	r0, #0
    1dd8:	d101      	bne.n	1dde <xQueueGenericReceive+0x1a>
    1dda:	b672      	cpsid	i
    1ddc:	e7fe      	b.n	1ddc <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1dde:	2900      	cmp	r1, #0
    1de0:	d104      	bne.n	1dec <xQueueGenericReceive+0x28>
    1de2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1de4:	2b00      	cmp	r3, #0
    1de6:	d001      	beq.n	1dec <xQueueGenericReceive+0x28>
    1de8:	b672      	cpsid	i
    1dea:	e7fe      	b.n	1dea <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1dec:	4b4a      	ldr	r3, [pc, #296]	; (1f18 <xQueueGenericReceive+0x154>)
    1dee:	4798      	blx	r3
    1df0:	2800      	cmp	r0, #0
    1df2:	d102      	bne.n	1dfa <xQueueGenericReceive+0x36>
    1df4:	9b01      	ldr	r3, [sp, #4]
    1df6:	2b00      	cmp	r3, #0
    1df8:	d103      	bne.n	1e02 <xQueueGenericReceive+0x3e>
=======
    12fa:	2800      	cmp	r0, #0
    12fc:	d101      	bne.n	1302 <xQueueGenericReceive+0x1a>
    12fe:	b672      	cpsid	i
    1300:	e7fe      	b.n	1300 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1302:	2900      	cmp	r1, #0
    1304:	d104      	bne.n	1310 <xQueueGenericReceive+0x28>
    1306:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1308:	2b00      	cmp	r3, #0
    130a:	d001      	beq.n	1310 <xQueueGenericReceive+0x28>
    130c:	b672      	cpsid	i
    130e:	e7fe      	b.n	130e <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1310:	4b4a      	ldr	r3, [pc, #296]	; (143c <xQueueGenericReceive+0x154>)
    1312:	4798      	blx	r3
    1314:	2800      	cmp	r0, #0
    1316:	d102      	bne.n	131e <xQueueGenericReceive+0x36>
    1318:	9b01      	ldr	r3, [sp, #4]
    131a:	2b00      	cmp	r3, #0
    131c:	d103      	bne.n	1326 <xQueueGenericReceive+0x3e>
>>>>>>> JJ's_Branch
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
<<<<<<< HEAD
    1dfa:	2600      	movs	r6, #0
=======
    131e:	2600      	movs	r6, #0
>>>>>>> JJ's_Branch
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
    1dfc:	4b47      	ldr	r3, [pc, #284]	; (1f1c <xQueueGenericReceive+0x158>)
    1dfe:	4698      	mov	r8, r3
    1e00:	e001      	b.n	1e06 <xQueueGenericReceive+0x42>
=======
    1320:	4b47      	ldr	r3, [pc, #284]	; (1440 <xQueueGenericReceive+0x158>)
    1322:	4698      	mov	r8, r3
    1324:	e001      	b.n	132a <xQueueGenericReceive+0x42>
>>>>>>> JJ's_Branch

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
    1e02:	b672      	cpsid	i
    1e04:	e7fe      	b.n	1e04 <xQueueGenericReceive+0x40>
=======
    1326:	b672      	cpsid	i
    1328:	e7fe      	b.n	1328 <xQueueGenericReceive+0x40>
>>>>>>> JJ's_Branch
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
    1e06:	47c0      	blx	r8
=======
    132a:	47c0      	blx	r8
>>>>>>> JJ's_Branch
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
    1e08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d02b      	beq.n	1e66 <xQueueGenericReceive+0xa2>
=======
    132c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    132e:	2b00      	cmp	r3, #0
    1330:	d02b      	beq.n	138a <xQueueGenericReceive+0xa2>
>>>>>>> JJ's_Branch
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
<<<<<<< HEAD
    1e0e:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1e10:	1c20      	adds	r0, r4, #0
    1e12:	1c29      	adds	r1, r5, #0
    1e14:	4b42      	ldr	r3, [pc, #264]	; (1f20 <xQueueGenericReceive+0x15c>)
    1e16:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    1e18:	2f00      	cmp	r7, #0
    1e1a:	d114      	bne.n	1e46 <xQueueGenericReceive+0x82>
=======
    1332:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1334:	1c20      	adds	r0, r4, #0
    1336:	1c29      	adds	r1, r5, #0
    1338:	4b42      	ldr	r3, [pc, #264]	; (1444 <xQueueGenericReceive+0x15c>)
    133a:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    133c:	2f00      	cmp	r7, #0
    133e:	d114      	bne.n	136a <xQueueGenericReceive+0x82>
>>>>>>> JJ's_Branch
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
<<<<<<< HEAD
    1e1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1e1e:	3b01      	subs	r3, #1
    1e20:	63a3      	str	r3, [r4, #56]	; 0x38
=======
    1340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1342:	3b01      	subs	r3, #1
    1344:	63a3      	str	r3, [r4, #56]	; 0x38
>>>>>>> JJ's_Branch

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
    1e22:	6823      	ldr	r3, [r4, #0]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d102      	bne.n	1e2e <xQueueGenericReceive+0x6a>
=======
    1346:	6823      	ldr	r3, [r4, #0]
    1348:	2b00      	cmp	r3, #0
    134a:	d102      	bne.n	1352 <xQueueGenericReceive+0x6a>
>>>>>>> JJ's_Branch
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
<<<<<<< HEAD
    1e28:	4b3e      	ldr	r3, [pc, #248]	; (1f24 <xQueueGenericReceive+0x160>)
    1e2a:	4798      	blx	r3
    1e2c:	6060      	str	r0, [r4, #4]
=======
    134c:	4b3e      	ldr	r3, [pc, #248]	; (1448 <xQueueGenericReceive+0x160>)
    134e:	4798      	blx	r3
    1350:	6060      	str	r0, [r4, #4]
>>>>>>> JJ's_Branch
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
    1e2e:	6923      	ldr	r3, [r4, #16]
    1e30:	2b00      	cmp	r3, #0
    1e32:	d014      	beq.n	1e5e <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1e34:	1c20      	adds	r0, r4, #0
    1e36:	3010      	adds	r0, #16
    1e38:	4b3b      	ldr	r3, [pc, #236]	; (1f28 <xQueueGenericReceive+0x164>)
    1e3a:	4798      	blx	r3
    1e3c:	2801      	cmp	r0, #1
    1e3e:	d10e      	bne.n	1e5e <xQueueGenericReceive+0x9a>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1e40:	4b3a      	ldr	r3, [pc, #232]	; (1f2c <xQueueGenericReceive+0x168>)
    1e42:	4798      	blx	r3
    1e44:	e00b      	b.n	1e5e <xQueueGenericReceive+0x9a>
=======
    1352:	6923      	ldr	r3, [r4, #16]
    1354:	2b00      	cmp	r3, #0
    1356:	d014      	beq.n	1382 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1358:	1c20      	adds	r0, r4, #0
    135a:	3010      	adds	r0, #16
    135c:	4b3b      	ldr	r3, [pc, #236]	; (144c <xQueueGenericReceive+0x164>)
    135e:	4798      	blx	r3
    1360:	2801      	cmp	r0, #1
    1362:	d10e      	bne.n	1382 <xQueueGenericReceive+0x9a>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1364:	4b3a      	ldr	r3, [pc, #232]	; (1450 <xQueueGenericReceive+0x168>)
    1366:	4798      	blx	r3
    1368:	e00b      	b.n	1382 <xQueueGenericReceive+0x9a>
>>>>>>> JJ's_Branch
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
<<<<<<< HEAD
    1e46:	60e6      	str	r6, [r4, #12]
=======
    136a:	60e6      	str	r6, [r4, #12]
>>>>>>> JJ's_Branch

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
    1e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d007      	beq.n	1e5e <xQueueGenericReceive+0x9a>
=======
    136c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    136e:	2b00      	cmp	r3, #0
    1370:	d007      	beq.n	1382 <xQueueGenericReceive+0x9a>
>>>>>>> JJ's_Branch
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
<<<<<<< HEAD
    1e4e:	1c20      	adds	r0, r4, #0
    1e50:	3024      	adds	r0, #36	; 0x24
    1e52:	4b35      	ldr	r3, [pc, #212]	; (1f28 <xQueueGenericReceive+0x164>)
    1e54:	4798      	blx	r3
    1e56:	2800      	cmp	r0, #0
    1e58:	d001      	beq.n	1e5e <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1e5a:	4b34      	ldr	r3, [pc, #208]	; (1f2c <xQueueGenericReceive+0x168>)
    1e5c:	4798      	blx	r3
=======
    1372:	1c20      	adds	r0, r4, #0
    1374:	3024      	adds	r0, #36	; 0x24
    1376:	4b35      	ldr	r3, [pc, #212]	; (144c <xQueueGenericReceive+0x164>)
    1378:	4798      	blx	r3
    137a:	2800      	cmp	r0, #0
    137c:	d001      	beq.n	1382 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    137e:	4b34      	ldr	r3, [pc, #208]	; (1450 <xQueueGenericReceive+0x168>)
    1380:	4798      	blx	r3
>>>>>>> JJ's_Branch
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
    1e5e:	4b34      	ldr	r3, [pc, #208]	; (1f30 <xQueueGenericReceive+0x16c>)
    1e60:	4798      	blx	r3
				return pdPASS;
    1e62:	2001      	movs	r0, #1
    1e64:	e052      	b.n	1f0c <xQueueGenericReceive+0x148>
=======
    1382:	4b34      	ldr	r3, [pc, #208]	; (1454 <xQueueGenericReceive+0x16c>)
    1384:	4798      	blx	r3
				return pdPASS;
    1386:	2001      	movs	r0, #1
    1388:	e052      	b.n	1430 <xQueueGenericReceive+0x148>
>>>>>>> JJ's_Branch
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
    1e66:	9b01      	ldr	r3, [sp, #4]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d103      	bne.n	1e74 <xQueueGenericReceive+0xb0>
=======
    138a:	9b01      	ldr	r3, [sp, #4]
    138c:	2b00      	cmp	r3, #0
    138e:	d103      	bne.n	1398 <xQueueGenericReceive+0xb0>
>>>>>>> JJ's_Branch
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
    1e6c:	4b30      	ldr	r3, [pc, #192]	; (1f30 <xQueueGenericReceive+0x16c>)
    1e6e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1e70:	2000      	movs	r0, #0
    1e72:	e04b      	b.n	1f0c <xQueueGenericReceive+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    1e74:	2e00      	cmp	r6, #0
    1e76:	d103      	bne.n	1e80 <xQueueGenericReceive+0xbc>
=======
    1390:	4b30      	ldr	r3, [pc, #192]	; (1454 <xQueueGenericReceive+0x16c>)
    1392:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1394:	2000      	movs	r0, #0
    1396:	e04b      	b.n	1430 <xQueueGenericReceive+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    1398:	2e00      	cmp	r6, #0
    139a:	d103      	bne.n	13a4 <xQueueGenericReceive+0xbc>
>>>>>>> JJ's_Branch
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
    1e78:	a802      	add	r0, sp, #8
    1e7a:	4b2e      	ldr	r3, [pc, #184]	; (1f34 <xQueueGenericReceive+0x170>)
    1e7c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1e7e:	2601      	movs	r6, #1
=======
    139c:	a802      	add	r0, sp, #8
    139e:	4b2e      	ldr	r3, [pc, #184]	; (1458 <xQueueGenericReceive+0x170>)
    13a0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    13a2:	2601      	movs	r6, #1
>>>>>>> JJ's_Branch
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
    1e80:	4b2b      	ldr	r3, [pc, #172]	; (1f30 <xQueueGenericReceive+0x16c>)
    1e82:	4798      	blx	r3
=======
    13a4:	4b2b      	ldr	r3, [pc, #172]	; (1454 <xQueueGenericReceive+0x16c>)
    13a6:	4798      	blx	r3
>>>>>>> JJ's_Branch

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
    1e84:	4b2c      	ldr	r3, [pc, #176]	; (1f38 <xQueueGenericReceive+0x174>)
    1e86:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1e88:	4b24      	ldr	r3, [pc, #144]	; (1f1c <xQueueGenericReceive+0x158>)
    1e8a:	4798      	blx	r3
    1e8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1e8e:	3301      	adds	r3, #1
    1e90:	d101      	bne.n	1e96 <xQueueGenericReceive+0xd2>
    1e92:	2300      	movs	r3, #0
    1e94:	6463      	str	r3, [r4, #68]	; 0x44
    1e96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e98:	3301      	adds	r3, #1
    1e9a:	d101      	bne.n	1ea0 <xQueueGenericReceive+0xdc>
    1e9c:	2300      	movs	r3, #0
    1e9e:	64a3      	str	r3, [r4, #72]	; 0x48
    1ea0:	4b23      	ldr	r3, [pc, #140]	; (1f30 <xQueueGenericReceive+0x16c>)
    1ea2:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ea4:	a802      	add	r0, sp, #8
    1ea6:	a901      	add	r1, sp, #4
    1ea8:	4b24      	ldr	r3, [pc, #144]	; (1f3c <xQueueGenericReceive+0x178>)
    1eaa:	4798      	blx	r3
    1eac:	2800      	cmp	r0, #0
    1eae:	d127      	bne.n	1f00 <xQueueGenericReceive+0x13c>
=======
    13a8:	4b2c      	ldr	r3, [pc, #176]	; (145c <xQueueGenericReceive+0x174>)
    13aa:	4798      	blx	r3
		prvLockQueue( pxQueue );
    13ac:	4b24      	ldr	r3, [pc, #144]	; (1440 <xQueueGenericReceive+0x158>)
    13ae:	4798      	blx	r3
    13b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    13b2:	3301      	adds	r3, #1
    13b4:	d101      	bne.n	13ba <xQueueGenericReceive+0xd2>
    13b6:	2300      	movs	r3, #0
    13b8:	6463      	str	r3, [r4, #68]	; 0x44
    13ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    13bc:	3301      	adds	r3, #1
    13be:	d101      	bne.n	13c4 <xQueueGenericReceive+0xdc>
    13c0:	2300      	movs	r3, #0
    13c2:	64a3      	str	r3, [r4, #72]	; 0x48
    13c4:	4b23      	ldr	r3, [pc, #140]	; (1454 <xQueueGenericReceive+0x16c>)
    13c6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    13c8:	a802      	add	r0, sp, #8
    13ca:	a901      	add	r1, sp, #4
    13cc:	4b24      	ldr	r3, [pc, #144]	; (1460 <xQueueGenericReceive+0x178>)
    13ce:	4798      	blx	r3
    13d0:	2800      	cmp	r0, #0
    13d2:	d127      	bne.n	1424 <xQueueGenericReceive+0x13c>
>>>>>>> JJ's_Branch

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
<<<<<<< HEAD
    1eb0:	4b1a      	ldr	r3, [pc, #104]	; (1f1c <xQueueGenericReceive+0x158>)
    1eb2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1eb6:	4699      	mov	r9, r3
=======
    13d4:	4b1a      	ldr	r3, [pc, #104]	; (1440 <xQueueGenericReceive+0x158>)
    13d6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    13d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    13da:	4699      	mov	r9, r3
>>>>>>> JJ's_Branch
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
    1eb8:	4b1d      	ldr	r3, [pc, #116]	; (1f30 <xQueueGenericReceive+0x16c>)
    1eba:	4798      	blx	r3
=======
    13dc:	4b1d      	ldr	r3, [pc, #116]	; (1454 <xQueueGenericReceive+0x16c>)
    13de:	4798      	blx	r3
>>>>>>> JJ's_Branch
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
    1ebc:	464b      	mov	r3, r9
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	d118      	bne.n	1ef4 <xQueueGenericReceive+0x130>
=======
    13e0:	464b      	mov	r3, r9
    13e2:	2b00      	cmp	r3, #0
    13e4:	d118      	bne.n	1418 <xQueueGenericReceive+0x130>
>>>>>>> JJ's_Branch
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
    1ec2:	6823      	ldr	r3, [r4, #0]
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d106      	bne.n	1ed6 <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
    1ec8:	4b14      	ldr	r3, [pc, #80]	; (1f1c <xQueueGenericReceive+0x158>)
    1eca:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1ecc:	6860      	ldr	r0, [r4, #4]
    1ece:	4b1c      	ldr	r3, [pc, #112]	; (1f40 <xQueueGenericReceive+0x17c>)
    1ed0:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    1ed2:	4b17      	ldr	r3, [pc, #92]	; (1f30 <xQueueGenericReceive+0x16c>)
    1ed4:	4798      	blx	r3
=======
    13e6:	6823      	ldr	r3, [r4, #0]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d106      	bne.n	13fa <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
    13ec:	4b14      	ldr	r3, [pc, #80]	; (1440 <xQueueGenericReceive+0x158>)
    13ee:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    13f0:	6860      	ldr	r0, [r4, #4]
    13f2:	4b1c      	ldr	r3, [pc, #112]	; (1464 <xQueueGenericReceive+0x17c>)
    13f4:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    13f6:	4b17      	ldr	r3, [pc, #92]	; (1454 <xQueueGenericReceive+0x16c>)
    13f8:	4798      	blx	r3
>>>>>>> JJ's_Branch
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
<<<<<<< HEAD
    1ed6:	1c20      	adds	r0, r4, #0
    1ed8:	3024      	adds	r0, #36	; 0x24
    1eda:	9901      	ldr	r1, [sp, #4]
    1edc:	4b19      	ldr	r3, [pc, #100]	; (1f44 <xQueueGenericReceive+0x180>)
    1ede:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1ee0:	1c20      	adds	r0, r4, #0
    1ee2:	4b19      	ldr	r3, [pc, #100]	; (1f48 <xQueueGenericReceive+0x184>)
    1ee4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1ee6:	4b19      	ldr	r3, [pc, #100]	; (1f4c <xQueueGenericReceive+0x188>)
    1ee8:	4798      	blx	r3
    1eea:	2800      	cmp	r0, #0
    1eec:	d18b      	bne.n	1e06 <xQueueGenericReceive+0x42>
				{
					portYIELD_WITHIN_API();
    1eee:	4b0f      	ldr	r3, [pc, #60]	; (1f2c <xQueueGenericReceive+0x168>)
    1ef0:	4798      	blx	r3
    1ef2:	e788      	b.n	1e06 <xQueueGenericReceive+0x42>
=======
    13fa:	1c20      	adds	r0, r4, #0
    13fc:	3024      	adds	r0, #36	; 0x24
    13fe:	9901      	ldr	r1, [sp, #4]
    1400:	4b19      	ldr	r3, [pc, #100]	; (1468 <xQueueGenericReceive+0x180>)
    1402:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1404:	1c20      	adds	r0, r4, #0
    1406:	4b19      	ldr	r3, [pc, #100]	; (146c <xQueueGenericReceive+0x184>)
    1408:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    140a:	4b19      	ldr	r3, [pc, #100]	; (1470 <xQueueGenericReceive+0x188>)
    140c:	4798      	blx	r3
    140e:	2800      	cmp	r0, #0
    1410:	d18b      	bne.n	132a <xQueueGenericReceive+0x42>
				{
					portYIELD_WITHIN_API();
    1412:	4b0f      	ldr	r3, [pc, #60]	; (1450 <xQueueGenericReceive+0x168>)
    1414:	4798      	blx	r3
    1416:	e788      	b.n	132a <xQueueGenericReceive+0x42>
>>>>>>> JJ's_Branch
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
    1ef4:	1c20      	adds	r0, r4, #0
    1ef6:	4b14      	ldr	r3, [pc, #80]	; (1f48 <xQueueGenericReceive+0x184>)
    1ef8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1efa:	4b14      	ldr	r3, [pc, #80]	; (1f4c <xQueueGenericReceive+0x188>)
    1efc:	4798      	blx	r3
    1efe:	e782      	b.n	1e06 <xQueueGenericReceive+0x42>
=======
    1418:	1c20      	adds	r0, r4, #0
    141a:	4b14      	ldr	r3, [pc, #80]	; (146c <xQueueGenericReceive+0x184>)
    141c:	4798      	blx	r3
				( void ) xTaskResumeAll();
    141e:	4b14      	ldr	r3, [pc, #80]	; (1470 <xQueueGenericReceive+0x188>)
    1420:	4798      	blx	r3
    1422:	e782      	b.n	132a <xQueueGenericReceive+0x42>
>>>>>>> JJ's_Branch
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
    1f00:	1c20      	adds	r0, r4, #0
    1f02:	4b11      	ldr	r3, [pc, #68]	; (1f48 <xQueueGenericReceive+0x184>)
    1f04:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1f06:	4b11      	ldr	r3, [pc, #68]	; (1f4c <xQueueGenericReceive+0x188>)
    1f08:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1f0a:	2000      	movs	r0, #0
		}
	}
}
    1f0c:	b005      	add	sp, #20
    1f0e:	bc0c      	pop	{r2, r3}
    1f10:	4690      	mov	r8, r2
    1f12:	4699      	mov	r9, r3
    1f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	00002809 	.word	0x00002809
    1f1c:	00001719 	.word	0x00001719
    1f20:	0000198d 	.word	0x0000198d
    1f24:	000027fd 	.word	0x000027fd
    1f28:	000026d9 	.word	0x000026d9
    1f2c:	00001701 	.word	0x00001701
    1f30:	00001731 	.word	0x00001731
    1f34:	00002761 	.word	0x00002761
    1f38:	00002275 	.word	0x00002275
    1f3c:	00002781 	.word	0x00002781
    1f40:	00002829 	.word	0x00002829
    1f44:	00002641 	.word	0x00002641
    1f48:	000019b5 	.word	0x000019b5
    1f4c:	000023d1 	.word	0x000023d1

00001f50 <vQueueWaitForMessageRestricted>:
=======
    1424:	1c20      	adds	r0, r4, #0
    1426:	4b11      	ldr	r3, [pc, #68]	; (146c <xQueueGenericReceive+0x184>)
    1428:	4798      	blx	r3
			( void ) xTaskResumeAll();
    142a:	4b11      	ldr	r3, [pc, #68]	; (1470 <xQueueGenericReceive+0x188>)
    142c:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    142e:	2000      	movs	r0, #0
		}
	}
}
    1430:	b005      	add	sp, #20
    1432:	bc0c      	pop	{r2, r3}
    1434:	4690      	mov	r8, r2
    1436:	4699      	mov	r9, r3
    1438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00001d2d 	.word	0x00001d2d
    1440:	00000c3d 	.word	0x00000c3d
    1444:	00000eb1 	.word	0x00000eb1
    1448:	00001d21 	.word	0x00001d21
    144c:	00001bfd 	.word	0x00001bfd
    1450:	00000c25 	.word	0x00000c25
    1454:	00000c55 	.word	0x00000c55
    1458:	00001c85 	.word	0x00001c85
    145c:	00001799 	.word	0x00001799
    1460:	00001ca5 	.word	0x00001ca5
    1464:	00001d4d 	.word	0x00001d4d
    1468:	00001b65 	.word	0x00001b65
    146c:	00000ed9 	.word	0x00000ed9
    1470:	000018f5 	.word	0x000018f5

00001474 <vQueueWaitForMessageRestricted>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
<<<<<<< HEAD
    1f50:	b538      	push	{r3, r4, r5, lr}
    1f52:	1c04      	adds	r4, r0, #0
    1f54:	1c0d      	adds	r5, r1, #0
=======
    1474:	b538      	push	{r3, r4, r5, lr}
    1476:	1c04      	adds	r4, r0, #0
    1478:	1c0d      	adds	r5, r1, #0
>>>>>>> JJ's_Branch
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
    1f56:	4b0d      	ldr	r3, [pc, #52]	; (1f8c <vQueueWaitForMessageRestricted+0x3c>)
    1f58:	4798      	blx	r3
    1f5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1f5c:	3301      	adds	r3, #1
    1f5e:	d101      	bne.n	1f64 <vQueueWaitForMessageRestricted+0x14>
    1f60:	2300      	movs	r3, #0
    1f62:	6463      	str	r3, [r4, #68]	; 0x44
    1f64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1f66:	3301      	adds	r3, #1
    1f68:	d101      	bne.n	1f6e <vQueueWaitForMessageRestricted+0x1e>
    1f6a:	2300      	movs	r3, #0
    1f6c:	64a3      	str	r3, [r4, #72]	; 0x48
    1f6e:	4b08      	ldr	r3, [pc, #32]	; (1f90 <vQueueWaitForMessageRestricted+0x40>)
    1f70:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1f74:	2b00      	cmp	r3, #0
    1f76:	d104      	bne.n	1f82 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1f78:	1c20      	adds	r0, r4, #0
    1f7a:	3024      	adds	r0, #36	; 0x24
    1f7c:	1c29      	adds	r1, r5, #0
    1f7e:	4b05      	ldr	r3, [pc, #20]	; (1f94 <vQueueWaitForMessageRestricted+0x44>)
    1f80:	4798      	blx	r3
=======
    147a:	4b0d      	ldr	r3, [pc, #52]	; (14b0 <vQueueWaitForMessageRestricted+0x3c>)
    147c:	4798      	blx	r3
    147e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1480:	3301      	adds	r3, #1
    1482:	d101      	bne.n	1488 <vQueueWaitForMessageRestricted+0x14>
    1484:	2300      	movs	r3, #0
    1486:	6463      	str	r3, [r4, #68]	; 0x44
    1488:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    148a:	3301      	adds	r3, #1
    148c:	d101      	bne.n	1492 <vQueueWaitForMessageRestricted+0x1e>
    148e:	2300      	movs	r3, #0
    1490:	64a3      	str	r3, [r4, #72]	; 0x48
    1492:	4b08      	ldr	r3, [pc, #32]	; (14b4 <vQueueWaitForMessageRestricted+0x40>)
    1494:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1498:	2b00      	cmp	r3, #0
    149a:	d104      	bne.n	14a6 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    149c:	1c20      	adds	r0, r4, #0
    149e:	3024      	adds	r0, #36	; 0x24
    14a0:	1c29      	adds	r1, r5, #0
    14a2:	4b05      	ldr	r3, [pc, #20]	; (14b8 <vQueueWaitForMessageRestricted+0x44>)
    14a4:	4798      	blx	r3
>>>>>>> JJ's_Branch
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
    1f82:	1c20      	adds	r0, r4, #0
    1f84:	4b04      	ldr	r3, [pc, #16]	; (1f98 <vQueueWaitForMessageRestricted+0x48>)
    1f86:	4798      	blx	r3
	}
    1f88:	bd38      	pop	{r3, r4, r5, pc}
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	00001719 	.word	0x00001719
    1f90:	00001731 	.word	0x00001731
    1f94:	00002699 	.word	0x00002699
    1f98:	000019b5 	.word	0x000019b5

00001f9c <prvResetNextTaskUnblockTime>:
=======
    14a6:	1c20      	adds	r0, r4, #0
    14a8:	4b04      	ldr	r3, [pc, #16]	; (14bc <vQueueWaitForMessageRestricted+0x48>)
    14aa:	4798      	blx	r3
	}
    14ac:	bd38      	pop	{r3, r4, r5, pc}
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	00000c3d 	.word	0x00000c3d
    14b4:	00000c55 	.word	0x00000c55
    14b8:	00001bbd 	.word	0x00001bbd
    14bc:	00000ed9 	.word	0x00000ed9

000014c0 <prvResetNextTaskUnblockTime>:
>>>>>>> JJ's_Branch

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
    1f9c:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <prvResetNextTaskUnblockTime+0x24>)
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	681b      	ldr	r3, [r3, #0]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d104      	bne.n	1fb0 <prvResetNextTaskUnblockTime+0x14>
=======
    14c0:	4b08      	ldr	r3, [pc, #32]	; (14e4 <prvResetNextTaskUnblockTime+0x24>)
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	681b      	ldr	r3, [r3, #0]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d104      	bne.n	14d4 <prvResetNextTaskUnblockTime+0x14>
>>>>>>> JJ's_Branch
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
    1fa6:	2201      	movs	r2, #1
    1fa8:	4252      	negs	r2, r2
    1faa:	4b06      	ldr	r3, [pc, #24]	; (1fc4 <prvResetNextTaskUnblockTime+0x28>)
    1fac:	601a      	str	r2, [r3, #0]
    1fae:	e006      	b.n	1fbe <prvResetNextTaskUnblockTime+0x22>
=======
    14ca:	2201      	movs	r2, #1
    14cc:	4252      	negs	r2, r2
    14ce:	4b06      	ldr	r3, [pc, #24]	; (14e8 <prvResetNextTaskUnblockTime+0x28>)
    14d0:	601a      	str	r2, [r3, #0]
    14d2:	e006      	b.n	14e2 <prvResetNextTaskUnblockTime+0x22>
>>>>>>> JJ's_Branch
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
<<<<<<< HEAD
    1fb0:	4b03      	ldr	r3, [pc, #12]	; (1fc0 <prvResetNextTaskUnblockTime+0x24>)
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    1fb6:	68db      	ldr	r3, [r3, #12]
    1fb8:	685a      	ldr	r2, [r3, #4]
    1fba:	4b02      	ldr	r3, [pc, #8]	; (1fc4 <prvResetNextTaskUnblockTime+0x28>)
    1fbc:	601a      	str	r2, [r3, #0]
	}
}
    1fbe:	4770      	bx	lr
    1fc0:	20003ba8 	.word	0x20003ba8
    1fc4:	20000008 	.word	0x20000008

00001fc8 <prvAddCurrentTaskToDelayedList>:
=======
    14d4:	4b03      	ldr	r3, [pc, #12]	; (14e4 <prvResetNextTaskUnblockTime+0x24>)
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    14da:	68db      	ldr	r3, [r3, #12]
    14dc:	685a      	ldr	r2, [r3, #4]
    14de:	4b02      	ldr	r3, [pc, #8]	; (14e8 <prvResetNextTaskUnblockTime+0x28>)
    14e0:	601a      	str	r2, [r3, #0]
	}
}
    14e2:	4770      	bx	lr
    14e4:	20003b6c 	.word	0x20003b6c
    14e8:	20000008 	.word	0x20000008

000014ec <prvAddCurrentTaskToDelayedList>:
>>>>>>> JJ's_Branch
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
<<<<<<< HEAD
    1fc8:	b510      	push	{r4, lr}
    1fca:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1fcc:	4b0e      	ldr	r3, [pc, #56]	; (2008 <STACK_SIZE+0x8>)
    1fce:	681b      	ldr	r3, [r3, #0]
    1fd0:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    1fd2:	4b0e      	ldr	r3, [pc, #56]	; (200c <STACK_SIZE+0xc>)
    1fd4:	681b      	ldr	r3, [r3, #0]
    1fd6:	4298      	cmp	r0, r3
    1fd8:	d207      	bcs.n	1fea <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1fda:	4b0d      	ldr	r3, [pc, #52]	; (2010 <STACK_SIZE+0x10>)
    1fdc:	6818      	ldr	r0, [r3, #0]
    1fde:	4b0a      	ldr	r3, [pc, #40]	; (2008 <STACK_SIZE+0x8>)
    1fe0:	6819      	ldr	r1, [r3, #0]
    1fe2:	3104      	adds	r1, #4
    1fe4:	4b0b      	ldr	r3, [pc, #44]	; (2014 <STACK_SIZE+0x14>)
    1fe6:	4798      	blx	r3
    1fe8:	e00c      	b.n	2004 <STACK_SIZE+0x4>
=======
    14ec:	b510      	push	{r4, lr}
    14ee:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    14f0:	4b0e      	ldr	r3, [pc, #56]	; (152c <prvAddCurrentTaskToDelayedList+0x40>)
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    14f6:	4b0e      	ldr	r3, [pc, #56]	; (1530 <prvAddCurrentTaskToDelayedList+0x44>)
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	4298      	cmp	r0, r3
    14fc:	d207      	bcs.n	150e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    14fe:	4b0d      	ldr	r3, [pc, #52]	; (1534 <prvAddCurrentTaskToDelayedList+0x48>)
    1500:	6818      	ldr	r0, [r3, #0]
    1502:	4b0a      	ldr	r3, [pc, #40]	; (152c <prvAddCurrentTaskToDelayedList+0x40>)
    1504:	6819      	ldr	r1, [r3, #0]
    1506:	3104      	adds	r1, #4
    1508:	4b0b      	ldr	r3, [pc, #44]	; (1538 <prvAddCurrentTaskToDelayedList+0x4c>)
    150a:	4798      	blx	r3
    150c:	e00c      	b.n	1528 <prvAddCurrentTaskToDelayedList+0x3c>
>>>>>>> JJ's_Branch
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
<<<<<<< HEAD
    1fea:	4b0b      	ldr	r3, [pc, #44]	; (2018 <STACK_SIZE+0x18>)
    1fec:	6818      	ldr	r0, [r3, #0]
    1fee:	4b06      	ldr	r3, [pc, #24]	; (2008 <STACK_SIZE+0x8>)
    1ff0:	6819      	ldr	r1, [r3, #0]
    1ff2:	3104      	adds	r1, #4
    1ff4:	4b07      	ldr	r3, [pc, #28]	; (2014 <STACK_SIZE+0x14>)
    1ff6:	4798      	blx	r3
=======
    150e:	4b0b      	ldr	r3, [pc, #44]	; (153c <prvAddCurrentTaskToDelayedList+0x50>)
    1510:	6818      	ldr	r0, [r3, #0]
    1512:	4b06      	ldr	r3, [pc, #24]	; (152c <prvAddCurrentTaskToDelayedList+0x40>)
    1514:	6819      	ldr	r1, [r3, #0]
    1516:	3104      	adds	r1, #4
    1518:	4b07      	ldr	r3, [pc, #28]	; (1538 <prvAddCurrentTaskToDelayedList+0x4c>)
    151a:	4798      	blx	r3
>>>>>>> JJ's_Branch

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
<<<<<<< HEAD
    1ff8:	4b08      	ldr	r3, [pc, #32]	; (201c <STACK_SIZE+0x1c>)
    1ffa:	681b      	ldr	r3, [r3, #0]
    1ffc:	429c      	cmp	r4, r3
    1ffe:	d201      	bcs.n	2004 <STACK_SIZE+0x4>
		{
			xNextTaskUnblockTime = xTimeToWake;
    2000:	4b06      	ldr	r3, [pc, #24]	; (201c <STACK_SIZE+0x1c>)
    2002:	601c      	str	r4, [r3, #0]
=======
    151c:	4b08      	ldr	r3, [pc, #32]	; (1540 <prvAddCurrentTaskToDelayedList+0x54>)
    151e:	681b      	ldr	r3, [r3, #0]
    1520:	429c      	cmp	r4, r3
    1522:	d201      	bcs.n	1528 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1524:	4b06      	ldr	r3, [pc, #24]	; (1540 <prvAddCurrentTaskToDelayedList+0x54>)
    1526:	601c      	str	r4, [r3, #0]
>>>>>>> JJ's_Branch
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
    2004:	bd10      	pop	{r4, pc}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	20003c58 	.word	0x20003c58
    200c:	20003c74 	.word	0x20003c74
    2010:	20003c78 	.word	0x20003c78
    2014:	00001655 	.word	0x00001655
    2018:	20003ba8 	.word	0x20003ba8
    201c:	20000008 	.word	0x20000008

00002020 <xTaskGenericCreate>:
=======
    1528:	bd10      	pop	{r4, pc}
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	20003c1c 	.word	0x20003c1c
    1530:	20003c38 	.word	0x20003c38
    1534:	20003c3c 	.word	0x20003c3c
    1538:	00000b79 	.word	0x00000b79
    153c:	20003b6c 	.word	0x20003b6c
    1540:	20000008 	.word	0x20000008

00001544 <xTaskGenericCreate>:
>>>>>>> JJ's_Branch
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
<<<<<<< HEAD
    2020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2022:	465f      	mov	r7, fp
    2024:	4656      	mov	r6, sl
    2026:	464d      	mov	r5, r9
    2028:	4644      	mov	r4, r8
    202a:	b4f0      	push	{r4, r5, r6, r7}
    202c:	1c07      	adds	r7, r0, #0
    202e:	1c0e      	adds	r6, r1, #0
    2030:	4691      	mov	r9, r2
    2032:	469a      	mov	sl, r3
    2034:	9d0a      	ldr	r5, [sp, #40]	; 0x28
=======
    1544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1546:	465f      	mov	r7, fp
    1548:	4656      	mov	r6, sl
    154a:	464d      	mov	r5, r9
    154c:	4644      	mov	r4, r8
    154e:	b4f0      	push	{r4, r5, r6, r7}
    1550:	1c07      	adds	r7, r0, #0
    1552:	1c0e      	adds	r6, r1, #0
    1554:	4691      	mov	r9, r2
    1556:	469a      	mov	sl, r3
    1558:	9d0a      	ldr	r5, [sp, #40]	; 0x28
>>>>>>> JJ's_Branch
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
<<<<<<< HEAD
    2036:	2800      	cmp	r0, #0
    2038:	d101      	bne.n	203e <xTaskGenericCreate+0x1e>
    203a:	b672      	cpsid	i
    203c:	e7fe      	b.n	203c <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    203e:	2d04      	cmp	r5, #4
    2040:	d901      	bls.n	2046 <xTaskGenericCreate+0x26>
    2042:	b672      	cpsid	i
    2044:	e7fe      	b.n	2044 <xTaskGenericCreate+0x24>
=======
    155a:	2800      	cmp	r0, #0
    155c:	d101      	bne.n	1562 <xTaskGenericCreate+0x1e>
    155e:	b672      	cpsid	i
    1560:	e7fe      	b.n	1560 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    1562:	2d04      	cmp	r5, #4
    1564:	d901      	bls.n	156a <xTaskGenericCreate+0x26>
    1566:	b672      	cpsid	i
    1568:	e7fe      	b.n	1568 <xTaskGenericCreate+0x24>
>>>>>>> JJ's_Branch
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
<<<<<<< HEAD
    2046:	2040      	movs	r0, #64	; 0x40
    2048:	4b5b      	ldr	r3, [pc, #364]	; (21b8 <xTaskGenericCreate+0x198>)
    204a:	4798      	blx	r3
    204c:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    204e:	d100      	bne.n	2052 <xTaskGenericCreate+0x32>
    2050:	e0aa      	b.n	21a8 <xTaskGenericCreate+0x188>
=======
    156a:	2040      	movs	r0, #64	; 0x40
    156c:	4b5b      	ldr	r3, [pc, #364]	; (16dc <xTaskGenericCreate+0x198>)
    156e:	4798      	blx	r3
    1570:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    1572:	d100      	bne.n	1576 <xTaskGenericCreate+0x32>
    1574:	e0aa      	b.n	16cc <xTaskGenericCreate+0x188>
>>>>>>> JJ's_Branch
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
    2052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2054:	2a00      	cmp	r2, #0
    2056:	d000      	beq.n	205a <xTaskGenericCreate+0x3a>
    2058:	e092      	b.n	2180 <xTaskGenericCreate+0x160>
    205a:	464b      	mov	r3, r9
    205c:	0098      	lsls	r0, r3, #2
    205e:	4b56      	ldr	r3, [pc, #344]	; (21b8 <xTaskGenericCreate+0x198>)
    2060:	4798      	blx	r3
    2062:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    2064:	2800      	cmp	r0, #0
    2066:	d000      	beq.n	206a <xTaskGenericCreate+0x4a>
    2068:	e08c      	b.n	2184 <xTaskGenericCreate+0x164>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    206a:	1c20      	adds	r0, r4, #0
    206c:	4b53      	ldr	r3, [pc, #332]	; (21bc <xTaskGenericCreate+0x19c>)
    206e:	4798      	blx	r3
    2070:	e09a      	b.n	21a8 <xTaskGenericCreate+0x188>
=======
    1576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1578:	2a00      	cmp	r2, #0
    157a:	d000      	beq.n	157e <xTaskGenericCreate+0x3a>
    157c:	e092      	b.n	16a4 <xTaskGenericCreate+0x160>
    157e:	464b      	mov	r3, r9
    1580:	0098      	lsls	r0, r3, #2
    1582:	4b56      	ldr	r3, [pc, #344]	; (16dc <xTaskGenericCreate+0x198>)
    1584:	4798      	blx	r3
    1586:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    1588:	2800      	cmp	r0, #0
    158a:	d000      	beq.n	158e <xTaskGenericCreate+0x4a>
    158c:	e08c      	b.n	16a8 <xTaskGenericCreate+0x164>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    158e:	1c20      	adds	r0, r4, #0
    1590:	4b53      	ldr	r3, [pc, #332]	; (16e0 <xTaskGenericCreate+0x19c>)
    1592:	4798      	blx	r3
    1594:	e09a      	b.n	16cc <xTaskGenericCreate+0x188>
>>>>>>> JJ's_Branch
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
<<<<<<< HEAD
    2072:	5cf1      	ldrb	r1, [r6, r3]
    2074:	18e2      	adds	r2, r4, r3
    2076:	3234      	adds	r2, #52	; 0x34
    2078:	7011      	strb	r1, [r2, #0]
=======
    1596:	5cf1      	ldrb	r1, [r6, r3]
    1598:	18e2      	adds	r2, r4, r3
    159a:	3234      	adds	r2, #52	; 0x34
    159c:	7011      	strb	r1, [r2, #0]
>>>>>>> JJ's_Branch

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
<<<<<<< HEAD
    207a:	5cf2      	ldrb	r2, [r6, r3]
    207c:	2a00      	cmp	r2, #0
    207e:	d002      	beq.n	2086 <xTaskGenericCreate+0x66>
=======
    159e:	5cf2      	ldrb	r2, [r6, r3]
    15a0:	2a00      	cmp	r2, #0
    15a2:	d002      	beq.n	15aa <xTaskGenericCreate+0x66>
>>>>>>> JJ's_Branch
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
    2080:	3301      	adds	r3, #1
    2082:	2b08      	cmp	r3, #8
    2084:	d1f5      	bne.n	2072 <xTaskGenericCreate+0x52>
=======
    15a4:	3301      	adds	r3, #1
    15a6:	2b08      	cmp	r3, #8
    15a8:	d1f5      	bne.n	1596 <xTaskGenericCreate+0x52>
>>>>>>> JJ's_Branch
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
    2086:	2200      	movs	r2, #0
    2088:	233b      	movs	r3, #59	; 0x3b
    208a:	54e2      	strb	r2, [r4, r3]
    208c:	1e2e      	subs	r6, r5, #0
    208e:	2e04      	cmp	r6, #4
    2090:	d900      	bls.n	2094 <xTaskGenericCreate+0x74>
    2092:	2604      	movs	r6, #4
=======
    15aa:	2200      	movs	r2, #0
    15ac:	233b      	movs	r3, #59	; 0x3b
    15ae:	54e2      	strb	r2, [r4, r3]
    15b0:	1e2e      	subs	r6, r5, #0
    15b2:	2e04      	cmp	r6, #4
    15b4:	d900      	bls.n	15b8 <xTaskGenericCreate+0x74>
    15b6:	2604      	movs	r6, #4
>>>>>>> JJ's_Branch
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
<<<<<<< HEAD
    2094:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    2096:	63e6      	str	r6, [r4, #60]	; 0x3c
=======
    15b8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    15ba:	63e6      	str	r6, [r4, #60]	; 0x3c
>>>>>>> JJ's_Branch
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
<<<<<<< HEAD
    2098:	1d22      	adds	r2, r4, #4
    209a:	4690      	mov	r8, r2
    209c:	1c10      	adds	r0, r2, #0
    209e:	4b48      	ldr	r3, [pc, #288]	; (21c0 <xTaskGenericCreate+0x1a0>)
    20a0:	4699      	mov	r9, r3
    20a2:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    20a4:	1c20      	adds	r0, r4, #0
    20a6:	3018      	adds	r0, #24
    20a8:	47c8      	blx	r9
=======
    15bc:	1d22      	adds	r2, r4, #4
    15be:	4690      	mov	r8, r2
    15c0:	1c10      	adds	r0, r2, #0
    15c2:	4b48      	ldr	r3, [pc, #288]	; (16e4 <xTaskGenericCreate+0x1a0>)
    15c4:	4699      	mov	r9, r3
    15c6:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    15c8:	1c20      	adds	r0, r4, #0
    15ca:	3018      	adds	r0, #24
    15cc:	47c8      	blx	r9
>>>>>>> JJ's_Branch

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
<<<<<<< HEAD
    20aa:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    20ac:	2305      	movs	r3, #5
    20ae:	1b9e      	subs	r6, r3, r6
    20b0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    20b2:	6264      	str	r4, [r4, #36]	; 0x24
=======
    15ce:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15d0:	2305      	movs	r3, #5
    15d2:	1b9e      	subs	r6, r3, r6
    15d4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    15d6:	6264      	str	r4, [r4, #36]	; 0x24
>>>>>>> JJ's_Branch
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
    20b4:	4658      	mov	r0, fp
    20b6:	1c39      	adds	r1, r7, #0
    20b8:	4652      	mov	r2, sl
    20ba:	4b42      	ldr	r3, [pc, #264]	; (21c4 <xTaskGenericCreate+0x1a4>)
    20bc:	4798      	blx	r3
    20be:	6020      	str	r0, [r4, #0]
=======
    15d8:	4658      	mov	r0, fp
    15da:	1c39      	adds	r1, r7, #0
    15dc:	4652      	mov	r2, sl
    15de:	4b42      	ldr	r3, [pc, #264]	; (16e8 <xTaskGenericCreate+0x1a4>)
    15e0:	4798      	blx	r3
    15e2:	6020      	str	r0, [r4, #0]
>>>>>>> JJ's_Branch
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
<<<<<<< HEAD
    20c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    20c2:	2a00      	cmp	r2, #0
    20c4:	d000      	beq.n	20c8 <xTaskGenericCreate+0xa8>
=======
    15e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    15e6:	2a00      	cmp	r2, #0
    15e8:	d000      	beq.n	15ec <xTaskGenericCreate+0xa8>
>>>>>>> JJ's_Branch
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
    20c6:	6014      	str	r4, [r2, #0]
=======
    15ea:	6014      	str	r4, [r2, #0]
>>>>>>> JJ's_Branch
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
<<<<<<< HEAD
    20c8:	4b3f      	ldr	r3, [pc, #252]	; (21c8 <xTaskGenericCreate+0x1a8>)
    20ca:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    20cc:	4b3f      	ldr	r3, [pc, #252]	; (21cc <xTaskGenericCreate+0x1ac>)
    20ce:	681a      	ldr	r2, [r3, #0]
    20d0:	3201      	adds	r2, #1
    20d2:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    20d4:	4b3e      	ldr	r3, [pc, #248]	; (21d0 <xTaskGenericCreate+0x1b0>)
    20d6:	681b      	ldr	r3, [r3, #0]
    20d8:	2b00      	cmp	r3, #0
    20da:	d123      	bne.n	2124 <xTaskGenericCreate+0x104>
=======
    15ec:	4b3f      	ldr	r3, [pc, #252]	; (16ec <xTaskGenericCreate+0x1a8>)
    15ee:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    15f0:	4b3f      	ldr	r3, [pc, #252]	; (16f0 <xTaskGenericCreate+0x1ac>)
    15f2:	681a      	ldr	r2, [r3, #0]
    15f4:	3201      	adds	r2, #1
    15f6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    15f8:	4b3e      	ldr	r3, [pc, #248]	; (16f4 <xTaskGenericCreate+0x1b0>)
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	2b00      	cmp	r3, #0
    15fe:	d123      	bne.n	1648 <xTaskGenericCreate+0x104>
>>>>>>> JJ's_Branch
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
<<<<<<< HEAD
    20dc:	4b3c      	ldr	r3, [pc, #240]	; (21d0 <xTaskGenericCreate+0x1b0>)
    20de:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    20e0:	4b3a      	ldr	r3, [pc, #232]	; (21cc <xTaskGenericCreate+0x1ac>)
    20e2:	681b      	ldr	r3, [r3, #0]
    20e4:	2b01      	cmp	r3, #1
    20e6:	d128      	bne.n	213a <xTaskGenericCreate+0x11a>
    20e8:	4e3a      	ldr	r6, [pc, #232]	; (21d4 <xTaskGenericCreate+0x1b4>)
    20ea:	2364      	movs	r3, #100	; 0x64
    20ec:	199b      	adds	r3, r3, r6
    20ee:	4699      	mov	r9, r3
=======
    1600:	4b3c      	ldr	r3, [pc, #240]	; (16f4 <xTaskGenericCreate+0x1b0>)
    1602:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1604:	4b3a      	ldr	r3, [pc, #232]	; (16f0 <xTaskGenericCreate+0x1ac>)
    1606:	681b      	ldr	r3, [r3, #0]
    1608:	2b01      	cmp	r3, #1
    160a:	d128      	bne.n	165e <xTaskGenericCreate+0x11a>
    160c:	4e3a      	ldr	r6, [pc, #232]	; (16f8 <xTaskGenericCreate+0x1b4>)
    160e:	2364      	movs	r3, #100	; 0x64
    1610:	199b      	adds	r3, r3, r6
    1612:	4699      	mov	r9, r3
>>>>>>> JJ's_Branch
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
<<<<<<< HEAD
    20f0:	4f39      	ldr	r7, [pc, #228]	; (21d8 <xTaskGenericCreate+0x1b8>)
    20f2:	1c30      	adds	r0, r6, #0
    20f4:	47b8      	blx	r7
    20f6:	3614      	adds	r6, #20
=======
    1614:	4f39      	ldr	r7, [pc, #228]	; (16fc <xTaskGenericCreate+0x1b8>)
    1616:	1c30      	adds	r0, r6, #0
    1618:	47b8      	blx	r7
    161a:	3614      	adds	r6, #20
>>>>>>> JJ's_Branch

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
<<<<<<< HEAD
    20f8:	454e      	cmp	r6, r9
    20fa:	d1fa      	bne.n	20f2 <xTaskGenericCreate+0xd2>
=======
    161c:	454e      	cmp	r6, r9
    161e:	d1fa      	bne.n	1616 <xTaskGenericCreate+0xd2>
>>>>>>> JJ's_Branch
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
<<<<<<< HEAD
    20fc:	4a37      	ldr	r2, [pc, #220]	; (21dc <xTaskGenericCreate+0x1bc>)
    20fe:	4691      	mov	r9, r2
    2100:	1c10      	adds	r0, r2, #0
    2102:	4e35      	ldr	r6, [pc, #212]	; (21d8 <xTaskGenericCreate+0x1b8>)
    2104:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2106:	4f36      	ldr	r7, [pc, #216]	; (21e0 <xTaskGenericCreate+0x1c0>)
    2108:	1c38      	adds	r0, r7, #0
    210a:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    210c:	4835      	ldr	r0, [pc, #212]	; (21e4 <xTaskGenericCreate+0x1c4>)
    210e:	47b0      	blx	r6
=======
    1620:	4a37      	ldr	r2, [pc, #220]	; (1700 <xTaskGenericCreate+0x1bc>)
    1622:	4691      	mov	r9, r2
    1624:	1c10      	adds	r0, r2, #0
    1626:	4e35      	ldr	r6, [pc, #212]	; (16fc <xTaskGenericCreate+0x1b8>)
    1628:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    162a:	4f36      	ldr	r7, [pc, #216]	; (1704 <xTaskGenericCreate+0x1c0>)
    162c:	1c38      	adds	r0, r7, #0
    162e:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    1630:	4835      	ldr	r0, [pc, #212]	; (1708 <xTaskGenericCreate+0x1c4>)
    1632:	47b0      	blx	r6
>>>>>>> JJ's_Branch

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
    2110:	4835      	ldr	r0, [pc, #212]	; (21e8 <xTaskGenericCreate+0x1c8>)
    2112:	47b0      	blx	r6
=======
    1634:	4835      	ldr	r0, [pc, #212]	; (170c <xTaskGenericCreate+0x1c8>)
    1636:	47b0      	blx	r6
>>>>>>> JJ's_Branch
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
    2114:	4835      	ldr	r0, [pc, #212]	; (21ec <xTaskGenericCreate+0x1cc>)
    2116:	47b0      	blx	r6
=======
    1638:	4835      	ldr	r0, [pc, #212]	; (1710 <xTaskGenericCreate+0x1cc>)
    163a:	47b0      	blx	r6
>>>>>>> JJ's_Branch
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
    2118:	4b35      	ldr	r3, [pc, #212]	; (21f0 <xTaskGenericCreate+0x1d0>)
    211a:	464a      	mov	r2, r9
    211c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    211e:	4b35      	ldr	r3, [pc, #212]	; (21f4 <xTaskGenericCreate+0x1d4>)
    2120:	601f      	str	r7, [r3, #0]
    2122:	e00a      	b.n	213a <xTaskGenericCreate+0x11a>
=======
    163c:	4b35      	ldr	r3, [pc, #212]	; (1714 <xTaskGenericCreate+0x1d0>)
    163e:	464a      	mov	r2, r9
    1640:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1642:	4b35      	ldr	r3, [pc, #212]	; (1718 <xTaskGenericCreate+0x1d4>)
    1644:	601f      	str	r7, [r3, #0]
    1646:	e00a      	b.n	165e <xTaskGenericCreate+0x11a>
>>>>>>> JJ's_Branch
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
    2124:	4b34      	ldr	r3, [pc, #208]	; (21f8 <xTaskGenericCreate+0x1d8>)
    2126:	681b      	ldr	r3, [r3, #0]
    2128:	2b00      	cmp	r3, #0
    212a:	d106      	bne.n	213a <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    212c:	4b28      	ldr	r3, [pc, #160]	; (21d0 <xTaskGenericCreate+0x1b0>)
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2132:	429d      	cmp	r5, r3
    2134:	d301      	bcc.n	213a <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
    2136:	4b26      	ldr	r3, [pc, #152]	; (21d0 <xTaskGenericCreate+0x1b0>)
    2138:	601c      	str	r4, [r3, #0]
=======
    1648:	4b34      	ldr	r3, [pc, #208]	; (171c <xTaskGenericCreate+0x1d8>)
    164a:	681b      	ldr	r3, [r3, #0]
    164c:	2b00      	cmp	r3, #0
    164e:	d106      	bne.n	165e <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1650:	4b28      	ldr	r3, [pc, #160]	; (16f4 <xTaskGenericCreate+0x1b0>)
    1652:	681b      	ldr	r3, [r3, #0]
    1654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1656:	429d      	cmp	r5, r3
    1658:	d301      	bcc.n	165e <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
    165a:	4b26      	ldr	r3, [pc, #152]	; (16f4 <xTaskGenericCreate+0x1b0>)
    165c:	601c      	str	r4, [r3, #0]
>>>>>>> JJ's_Branch
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
<<<<<<< HEAD
    213a:	4b30      	ldr	r3, [pc, #192]	; (21fc <xTaskGenericCreate+0x1dc>)
    213c:	681a      	ldr	r2, [r3, #0]
    213e:	3201      	adds	r2, #1
    2140:	601a      	str	r2, [r3, #0]
=======
    165e:	4b30      	ldr	r3, [pc, #192]	; (1720 <xTaskGenericCreate+0x1dc>)
    1660:	681a      	ldr	r2, [r3, #0]
    1662:	3201      	adds	r2, #1
    1664:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
    2142:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2144:	4a2e      	ldr	r2, [pc, #184]	; (2200 <xTaskGenericCreate+0x1e0>)
    2146:	6812      	ldr	r2, [r2, #0]
    2148:	4293      	cmp	r3, r2
    214a:	d901      	bls.n	2150 <xTaskGenericCreate+0x130>
    214c:	4a2c      	ldr	r2, [pc, #176]	; (2200 <xTaskGenericCreate+0x1e0>)
    214e:	6013      	str	r3, [r2, #0]
    2150:	009a      	lsls	r2, r3, #2
    2152:	18d3      	adds	r3, r2, r3
    2154:	009b      	lsls	r3, r3, #2
    2156:	481f      	ldr	r0, [pc, #124]	; (21d4 <xTaskGenericCreate+0x1b4>)
    2158:	18c0      	adds	r0, r0, r3
    215a:	4641      	mov	r1, r8
    215c:	4b29      	ldr	r3, [pc, #164]	; (2204 <xTaskGenericCreate+0x1e4>)
    215e:	4798      	blx	r3
=======
    1666:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1668:	4a2e      	ldr	r2, [pc, #184]	; (1724 <xTaskGenericCreate+0x1e0>)
    166a:	6812      	ldr	r2, [r2, #0]
    166c:	4293      	cmp	r3, r2
    166e:	d901      	bls.n	1674 <xTaskGenericCreate+0x130>
    1670:	4a2c      	ldr	r2, [pc, #176]	; (1724 <xTaskGenericCreate+0x1e0>)
    1672:	6013      	str	r3, [r2, #0]
    1674:	009a      	lsls	r2, r3, #2
    1676:	18d3      	adds	r3, r2, r3
    1678:	009b      	lsls	r3, r3, #2
    167a:	481f      	ldr	r0, [pc, #124]	; (16f8 <xTaskGenericCreate+0x1b4>)
    167c:	18c0      	adds	r0, r0, r3
    167e:	4641      	mov	r1, r8
    1680:	4b29      	ldr	r3, [pc, #164]	; (1728 <xTaskGenericCreate+0x1e4>)
    1682:	4798      	blx	r3
>>>>>>> JJ's_Branch

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
    2160:	4b29      	ldr	r3, [pc, #164]	; (2208 <xTaskGenericCreate+0x1e8>)
    2162:	4798      	blx	r3
=======
    1684:	4b29      	ldr	r3, [pc, #164]	; (172c <xTaskGenericCreate+0x1e8>)
    1686:	4798      	blx	r3
>>>>>>> JJ's_Branch
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
<<<<<<< HEAD
    2164:	4b24      	ldr	r3, [pc, #144]	; (21f8 <xTaskGenericCreate+0x1d8>)
    2166:	681b      	ldr	r3, [r3, #0]
=======
    1688:	4b24      	ldr	r3, [pc, #144]	; (171c <xTaskGenericCreate+0x1d8>)
    168a:	681b      	ldr	r3, [r3, #0]
>>>>>>> JJ's_Branch
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
<<<<<<< HEAD
    2168:	2001      	movs	r0, #1
=======
    168c:	2001      	movs	r0, #1
>>>>>>> JJ's_Branch
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
<<<<<<< HEAD
    216a:	2b00      	cmp	r3, #0
    216c:	d01e      	beq.n	21ac <xTaskGenericCreate+0x18c>
=======
    168e:	2b00      	cmp	r3, #0
    1690:	d01e      	beq.n	16d0 <xTaskGenericCreate+0x18c>
>>>>>>> JJ's_Branch
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
<<<<<<< HEAD
    216e:	4b18      	ldr	r3, [pc, #96]	; (21d0 <xTaskGenericCreate+0x1b0>)
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2174:	429d      	cmp	r5, r3
    2176:	d919      	bls.n	21ac <xTaskGenericCreate+0x18c>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2178:	4b24      	ldr	r3, [pc, #144]	; (220c <xTaskGenericCreate+0x1ec>)
    217a:	4798      	blx	r3
=======
    1692:	4b18      	ldr	r3, [pc, #96]	; (16f4 <xTaskGenericCreate+0x1b0>)
    1694:	681b      	ldr	r3, [r3, #0]
    1696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1698:	429d      	cmp	r5, r3
    169a:	d919      	bls.n	16d0 <xTaskGenericCreate+0x18c>
			{
				taskYIELD_IF_USING_PREEMPTION();
    169c:	4b24      	ldr	r3, [pc, #144]	; (1730 <xTaskGenericCreate+0x1ec>)
    169e:	4798      	blx	r3
>>>>>>> JJ's_Branch
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
<<<<<<< HEAD
    217c:	2001      	movs	r0, #1
    217e:	e015      	b.n	21ac <xTaskGenericCreate+0x18c>
=======
    16a0:	2001      	movs	r0, #1
    16a2:	e015      	b.n	16d0 <xTaskGenericCreate+0x18c>
>>>>>>> JJ's_Branch
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
    2180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2182:	6303      	str	r3, [r0, #48]	; 0x30
=======
    16a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    16a6:	6303      	str	r3, [r0, #48]	; 0x30
>>>>>>> JJ's_Branch
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
<<<<<<< HEAD
    2184:	4a22      	ldr	r2, [pc, #136]	; (2210 <xTaskGenericCreate+0x1f0>)
    2186:	1c13      	adds	r3, r2, #0
    2188:	444b      	add	r3, r9
    218a:	009b      	lsls	r3, r3, #2
    218c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    218e:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    2190:	2207      	movs	r2, #7
    2192:	4393      	bics	r3, r2
    2194:	469b      	mov	fp, r3
=======
    16a8:	4a22      	ldr	r2, [pc, #136]	; (1734 <xTaskGenericCreate+0x1f0>)
    16aa:	1c13      	adds	r3, r2, #0
    16ac:	444b      	add	r3, r9
    16ae:	009b      	lsls	r3, r3, #2
    16b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    16b2:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    16b4:	2207      	movs	r2, #7
    16b6:	4393      	bics	r3, r2
    16b8:	469b      	mov	fp, r3
>>>>>>> JJ's_Branch
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
<<<<<<< HEAD
    2196:	7832      	ldrb	r2, [r6, #0]
    2198:	2334      	movs	r3, #52	; 0x34
    219a:	54e2      	strb	r2, [r4, r3]
=======
    16ba:	7832      	ldrb	r2, [r6, #0]
    16bc:	2334      	movs	r3, #52	; 0x34
    16be:	54e2      	strb	r2, [r4, r3]
>>>>>>> JJ's_Branch

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
<<<<<<< HEAD
    219c:	7833      	ldrb	r3, [r6, #0]
    219e:	2b00      	cmp	r3, #0
    21a0:	d100      	bne.n	21a4 <xTaskGenericCreate+0x184>
    21a2:	e770      	b.n	2086 <xTaskGenericCreate+0x66>
=======
    16c0:	7833      	ldrb	r3, [r6, #0]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d100      	bne.n	16c8 <xTaskGenericCreate+0x184>
    16c6:	e770      	b.n	15aa <xTaskGenericCreate+0x66>
>>>>>>> JJ's_Branch
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
    21a4:	2301      	movs	r3, #1
    21a6:	e764      	b.n	2072 <xTaskGenericCreate+0x52>
=======
    16c8:	2301      	movs	r3, #1
    16ca:	e764      	b.n	1596 <xTaskGenericCreate+0x52>
>>>>>>> JJ's_Branch
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
    21a8:	2001      	movs	r0, #1
    21aa:	4240      	negs	r0, r0
=======
    16cc:	2001      	movs	r0, #1
    16ce:	4240      	negs	r0, r0
>>>>>>> JJ's_Branch
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
<<<<<<< HEAD
    21ac:	bc3c      	pop	{r2, r3, r4, r5}
    21ae:	4690      	mov	r8, r2
    21b0:	4699      	mov	r9, r3
    21b2:	46a2      	mov	sl, r4
    21b4:	46ab      	mov	fp, r5
    21b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21b8:	00001851 	.word	0x00001851
    21bc:	000018b9 	.word	0x000018b9
    21c0:	00001635 	.word	0x00001635
    21c4:	000016dd 	.word	0x000016dd
    21c8:	00001719 	.word	0x00001719
    21cc:	20003c80 	.word	0x20003c80
    21d0:	20003c58 	.word	0x20003c58
    21d4:	20003be0 	.word	0x20003be0
    21d8:	0000161d 	.word	0x0000161d
    21dc:	20003bb4 	.word	0x20003bb4
    21e0:	20003bc8 	.word	0x20003bc8
    21e4:	20003c5c 	.word	0x20003c5c
    21e8:	20003c44 	.word	0x20003c44
    21ec:	20003c84 	.word	0x20003c84
    21f0:	20003ba8 	.word	0x20003ba8
    21f4:	20003c78 	.word	0x20003c78
    21f8:	20003bac 	.word	0x20003bac
    21fc:	20003c7c 	.word	0x20003c7c
    2200:	20003c98 	.word	0x20003c98
    2204:	0000163d 	.word	0x0000163d
    2208:	00001731 	.word	0x00001731
    220c:	00001701 	.word	0x00001701
    2210:	3fffffff 	.word	0x3fffffff

00002214 <vTaskStartScheduler>:
=======
    16d0:	bc3c      	pop	{r2, r3, r4, r5}
    16d2:	4690      	mov	r8, r2
    16d4:	4699      	mov	r9, r3
    16d6:	46a2      	mov	sl, r4
    16d8:	46ab      	mov	fp, r5
    16da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16dc:	00000d75 	.word	0x00000d75
    16e0:	00000ddd 	.word	0x00000ddd
    16e4:	00000b59 	.word	0x00000b59
    16e8:	00000c01 	.word	0x00000c01
    16ec:	00000c3d 	.word	0x00000c3d
    16f0:	20003c44 	.word	0x20003c44
    16f4:	20003c1c 	.word	0x20003c1c
    16f8:	20003ba4 	.word	0x20003ba4
    16fc:	00000b41 	.word	0x00000b41
    1700:	20003b78 	.word	0x20003b78
    1704:	20003b8c 	.word	0x20003b8c
    1708:	20003c20 	.word	0x20003c20
    170c:	20003c08 	.word	0x20003c08
    1710:	20003c48 	.word	0x20003c48
    1714:	20003b6c 	.word	0x20003b6c
    1718:	20003c3c 	.word	0x20003c3c
    171c:	20003b70 	.word	0x20003b70
    1720:	20003c40 	.word	0x20003c40
    1724:	20003c5c 	.word	0x20003c5c
    1728:	00000b61 	.word	0x00000b61
    172c:	00000c55 	.word	0x00000c55
    1730:	00000c25 	.word	0x00000c25
    1734:	3fffffff 	.word	0x3fffffff

00001738 <vTaskStartScheduler>:
>>>>>>> JJ's_Branch

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
    2214:	b510      	push	{r4, lr}
    2216:	b084      	sub	sp, #16
=======
    1738:	b510      	push	{r4, lr}
    173a:	b084      	sub	sp, #16
>>>>>>> JJ's_Branch
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
<<<<<<< HEAD
    2218:	2300      	movs	r3, #0
    221a:	9300      	str	r3, [sp, #0]
    221c:	9301      	str	r3, [sp, #4]
    221e:	9302      	str	r3, [sp, #8]
    2220:	9303      	str	r3, [sp, #12]
    2222:	480d      	ldr	r0, [pc, #52]	; (2258 <vTaskStartScheduler+0x44>)
    2224:	490d      	ldr	r1, [pc, #52]	; (225c <vTaskStartScheduler+0x48>)
    2226:	2264      	movs	r2, #100	; 0x64
    2228:	4c0d      	ldr	r4, [pc, #52]	; (2260 <vTaskStartScheduler+0x4c>)
    222a:	47a0      	blx	r4
=======
    173c:	2300      	movs	r3, #0
    173e:	9300      	str	r3, [sp, #0]
    1740:	9301      	str	r3, [sp, #4]
    1742:	9302      	str	r3, [sp, #8]
    1744:	9303      	str	r3, [sp, #12]
    1746:	480d      	ldr	r0, [pc, #52]	; (177c <vTaskStartScheduler+0x44>)
    1748:	490d      	ldr	r1, [pc, #52]	; (1780 <vTaskStartScheduler+0x48>)
    174a:	2264      	movs	r2, #100	; 0x64
    174c:	4c0d      	ldr	r4, [pc, #52]	; (1784 <vTaskStartScheduler+0x4c>)
    174e:	47a0      	blx	r4
>>>>>>> JJ's_Branch
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
    222c:	2801      	cmp	r0, #1
    222e:	d10d      	bne.n	224c <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    2230:	4b0c      	ldr	r3, [pc, #48]	; (2264 <vTaskStartScheduler+0x50>)
    2232:	4798      	blx	r3
=======
    1750:	2801      	cmp	r0, #1
    1752:	d10d      	bne.n	1770 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    1754:	4b0c      	ldr	r3, [pc, #48]	; (1788 <vTaskStartScheduler+0x50>)
    1756:	4798      	blx	r3
>>>>>>> JJ's_Branch
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
    2234:	2801      	cmp	r0, #1
    2236:	d109      	bne.n	224c <vTaskStartScheduler+0x38>
=======
    1758:	2801      	cmp	r0, #1
    175a:	d109      	bne.n	1770 <vTaskStartScheduler+0x38>
>>>>>>> JJ's_Branch
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
<<<<<<< HEAD
    2238:	b672      	cpsid	i
=======
    175c:	b672      	cpsid	i
>>>>>>> JJ's_Branch
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
<<<<<<< HEAD
    223a:	2201      	movs	r2, #1
    223c:	4b0a      	ldr	r3, [pc, #40]	; (2268 <vTaskStartScheduler+0x54>)
    223e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2240:	2200      	movs	r2, #0
    2242:	4b0a      	ldr	r3, [pc, #40]	; (226c <vTaskStartScheduler+0x58>)
    2244:	601a      	str	r2, [r3, #0]
=======
    175e:	2201      	movs	r2, #1
    1760:	4b0a      	ldr	r3, [pc, #40]	; (178c <vTaskStartScheduler+0x54>)
    1762:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    1764:	2200      	movs	r2, #0
    1766:	4b0a      	ldr	r3, [pc, #40]	; (1790 <vTaskStartScheduler+0x58>)
    1768:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
    2246:	4b0a      	ldr	r3, [pc, #40]	; (2270 <vTaskStartScheduler+0x5c>)
    2248:	4798      	blx	r3
    224a:	e003      	b.n	2254 <vTaskStartScheduler+0x40>
=======
    176a:	4b0a      	ldr	r3, [pc, #40]	; (1794 <vTaskStartScheduler+0x5c>)
    176c:	4798      	blx	r3
    176e:	e003      	b.n	1778 <vTaskStartScheduler+0x40>
>>>>>>> JJ's_Branch
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
<<<<<<< HEAD
    224c:	2800      	cmp	r0, #0
    224e:	d101      	bne.n	2254 <vTaskStartScheduler+0x40>
    2250:	b672      	cpsid	i
    2252:	e7fe      	b.n	2252 <vTaskStartScheduler+0x3e>
	}
}
    2254:	b004      	add	sp, #16
    2256:	bd10      	pop	{r4, pc}
    2258:	00002525 	.word	0x00002525
    225c:	00003eb8 	.word	0x00003eb8
    2260:	00002021 	.word	0x00002021
    2264:	000029ad 	.word	0x000029ad
    2268:	20003bac 	.word	0x20003bac
    226c:	20003c74 	.word	0x20003c74
    2270:	00001811 	.word	0x00001811

00002274 <vTaskSuspendAll>:
=======
    1770:	2800      	cmp	r0, #0
    1772:	d101      	bne.n	1778 <vTaskStartScheduler+0x40>
    1774:	b672      	cpsid	i
    1776:	e7fe      	b.n	1776 <vTaskStartScheduler+0x3e>
	}
}
    1778:	b004      	add	sp, #16
    177a:	bd10      	pop	{r4, pc}
    177c:	00001a49 	.word	0x00001a49
    1780:	00003240 	.word	0x00003240
    1784:	00001545 	.word	0x00001545
    1788:	00001ed1 	.word	0x00001ed1
    178c:	20003b70 	.word	0x20003b70
    1790:	20003c38 	.word	0x20003c38
    1794:	00000d35 	.word	0x00000d35

00001798 <vTaskSuspendAll>:
>>>>>>> JJ's_Branch
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< HEAD
    2274:	4b02      	ldr	r3, [pc, #8]	; (2280 <vTaskSuspendAll+0xc>)
    2276:	681a      	ldr	r2, [r3, #0]
    2278:	3201      	adds	r2, #1
    227a:	601a      	str	r2, [r3, #0]
}
    227c:	4770      	bx	lr
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	20003c70 	.word	0x20003c70

00002284 <xTaskGetTickCount>:
=======
    1798:	4b02      	ldr	r3, [pc, #8]	; (17a4 <vTaskSuspendAll+0xc>)
    179a:	681a      	ldr	r2, [r3, #0]
    179c:	3201      	adds	r2, #1
    179e:	601a      	str	r2, [r3, #0]
}
    17a0:	4770      	bx	lr
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	20003c34 	.word	0x20003c34

000017a8 <xTaskGetTickCount>:
>>>>>>> JJ's_Branch
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
    2284:	b510      	push	{r4, lr}
=======
    17a8:	b510      	push	{r4, lr}
>>>>>>> JJ's_Branch
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
    2286:	4b04      	ldr	r3, [pc, #16]	; (2298 <xTaskGetTickCount+0x14>)
    2288:	4798      	blx	r3
	{
		xTicks = xTickCount;
    228a:	4b04      	ldr	r3, [pc, #16]	; (229c <xTaskGetTickCount+0x18>)
    228c:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    228e:	4b04      	ldr	r3, [pc, #16]	; (22a0 <xTaskGetTickCount+0x1c>)
    2290:	4798      	blx	r3

	return xTicks;
}
    2292:	1c20      	adds	r0, r4, #0
    2294:	bd10      	pop	{r4, pc}
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	00001719 	.word	0x00001719
    229c:	20003c74 	.word	0x20003c74
    22a0:	00001731 	.word	0x00001731

000022a4 <xTaskIncrementTick>:
=======
    17aa:	4b04      	ldr	r3, [pc, #16]	; (17bc <xTaskGetTickCount+0x14>)
    17ac:	4798      	blx	r3
	{
		xTicks = xTickCount;
    17ae:	4b04      	ldr	r3, [pc, #16]	; (17c0 <xTaskGetTickCount+0x18>)
    17b0:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    17b2:	4b04      	ldr	r3, [pc, #16]	; (17c4 <xTaskGetTickCount+0x1c>)
    17b4:	4798      	blx	r3

	return xTicks;
}
    17b6:	1c20      	adds	r0, r4, #0
    17b8:	bd10      	pop	{r4, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	00000c3d 	.word	0x00000c3d
    17c0:	20003c38 	.word	0x20003c38
    17c4:	00000c55 	.word	0x00000c55

000017c8 <xTaskIncrementTick>:
>>>>>>> JJ's_Branch

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
    22a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22a6:	4647      	mov	r7, r8
    22a8:	b480      	push	{r7}
=======
    17c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ca:	4647      	mov	r7, r8
    17cc:	b480      	push	{r7}
>>>>>>> JJ's_Branch

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
    22aa:	4b3b      	ldr	r3, [pc, #236]	; (2398 <xTaskIncrementTick+0xf4>)
    22ac:	681b      	ldr	r3, [r3, #0]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d161      	bne.n	2376 <xTaskIncrementTick+0xd2>
=======
    17ce:	4b3b      	ldr	r3, [pc, #236]	; (18bc <xTaskIncrementTick+0xf4>)
    17d0:	681b      	ldr	r3, [r3, #0]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d161      	bne.n	189a <xTaskIncrementTick+0xd2>
>>>>>>> JJ's_Branch
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
<<<<<<< HEAD
    22b2:	4b3a      	ldr	r3, [pc, #232]	; (239c <xTaskIncrementTick+0xf8>)
    22b4:	681a      	ldr	r2, [r3, #0]
    22b6:	3201      	adds	r2, #1
    22b8:	601a      	str	r2, [r3, #0]
=======
    17d6:	4b3a      	ldr	r3, [pc, #232]	; (18c0 <xTaskIncrementTick+0xf8>)
    17d8:	681a      	ldr	r2, [r3, #0]
    17da:	3201      	adds	r2, #1
    17dc:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
<<<<<<< HEAD
    22ba:	681f      	ldr	r7, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    22bc:	2f00      	cmp	r7, #0
    22be:	d112      	bne.n	22e6 <xTaskIncrementTick+0x42>
			{
				taskSWITCH_DELAYED_LISTS();
    22c0:	4b37      	ldr	r3, [pc, #220]	; (23a0 <xTaskIncrementTick+0xfc>)
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	681b      	ldr	r3, [r3, #0]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d001      	beq.n	22ce <xTaskIncrementTick+0x2a>
    22ca:	b672      	cpsid	i
    22cc:	e7fe      	b.n	22cc <xTaskIncrementTick+0x28>
    22ce:	4a34      	ldr	r2, [pc, #208]	; (23a0 <xTaskIncrementTick+0xfc>)
    22d0:	6811      	ldr	r1, [r2, #0]
    22d2:	4b34      	ldr	r3, [pc, #208]	; (23a4 <xTaskIncrementTick+0x100>)
    22d4:	6818      	ldr	r0, [r3, #0]
    22d6:	6010      	str	r0, [r2, #0]
    22d8:	6019      	str	r1, [r3, #0]
    22da:	4b33      	ldr	r3, [pc, #204]	; (23a8 <xTaskIncrementTick+0x104>)
    22dc:	681a      	ldr	r2, [r3, #0]
    22de:	3201      	adds	r2, #1
    22e0:	601a      	str	r2, [r3, #0]
    22e2:	4b32      	ldr	r3, [pc, #200]	; (23ac <xTaskIncrementTick+0x108>)
    22e4:	4798      	blx	r3
=======
    17de:	681f      	ldr	r7, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    17e0:	2f00      	cmp	r7, #0
    17e2:	d112      	bne.n	180a <xTaskIncrementTick+0x42>
			{
				taskSWITCH_DELAYED_LISTS();
    17e4:	4b37      	ldr	r3, [pc, #220]	; (18c4 <xTaskIncrementTick+0xfc>)
    17e6:	681b      	ldr	r3, [r3, #0]
    17e8:	681b      	ldr	r3, [r3, #0]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d001      	beq.n	17f2 <xTaskIncrementTick+0x2a>
    17ee:	b672      	cpsid	i
    17f0:	e7fe      	b.n	17f0 <xTaskIncrementTick+0x28>
    17f2:	4a34      	ldr	r2, [pc, #208]	; (18c4 <xTaskIncrementTick+0xfc>)
    17f4:	6811      	ldr	r1, [r2, #0]
    17f6:	4b34      	ldr	r3, [pc, #208]	; (18c8 <xTaskIncrementTick+0x100>)
    17f8:	6818      	ldr	r0, [r3, #0]
    17fa:	6010      	str	r0, [r2, #0]
    17fc:	6019      	str	r1, [r3, #0]
    17fe:	4b33      	ldr	r3, [pc, #204]	; (18cc <xTaskIncrementTick+0x104>)
    1800:	681a      	ldr	r2, [r3, #0]
    1802:	3201      	adds	r2, #1
    1804:	601a      	str	r2, [r3, #0]
    1806:	4b32      	ldr	r3, [pc, #200]	; (18d0 <xTaskIncrementTick+0x108>)
    1808:	4798      	blx	r3
>>>>>>> JJ's_Branch

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
    22e6:	4b32      	ldr	r3, [pc, #200]	; (23b0 <xTaskIncrementTick+0x10c>)
    22e8:	681b      	ldr	r3, [r3, #0]
=======
    180a:	4b32      	ldr	r3, [pc, #200]	; (18d4 <xTaskIncrementTick+0x10c>)
    180c:	681b      	ldr	r3, [r3, #0]
>>>>>>> JJ's_Branch

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
<<<<<<< HEAD
    22ea:	2400      	movs	r4, #0
=======
    180e:	2400      	movs	r4, #0
>>>>>>> JJ's_Branch

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
    22ec:	429f      	cmp	r7, r3
    22ee:	d337      	bcc.n	2360 <xTaskIncrementTick+0xbc>
=======
    1810:	429f      	cmp	r7, r3
    1812:	d337      	bcc.n	1884 <xTaskIncrementTick+0xbc>
>>>>>>> JJ's_Branch
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
    22f0:	4e2b      	ldr	r6, [pc, #172]	; (23a0 <xTaskIncrementTick+0xfc>)
    22f2:	e000      	b.n	22f6 <xTaskIncrementTick+0x52>
=======
    1814:	4e2b      	ldr	r6, [pc, #172]	; (18c4 <xTaskIncrementTick+0xfc>)
    1816:	e000      	b.n	181a <xTaskIncrementTick+0x52>
>>>>>>> JJ's_Branch
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
<<<<<<< HEAD
    22f4:	2401      	movs	r4, #1
=======
    1818:	2401      	movs	r4, #1
>>>>>>> JJ's_Branch
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
    22f6:	6833      	ldr	r3, [r6, #0]
    22f8:	681b      	ldr	r3, [r3, #0]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d104      	bne.n	2308 <xTaskIncrementTick+0x64>
=======
    181a:	6833      	ldr	r3, [r6, #0]
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	2b00      	cmp	r3, #0
    1820:	d104      	bne.n	182c <xTaskIncrementTick+0x64>
>>>>>>> JJ's_Branch
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
    22fe:	2201      	movs	r2, #1
    2300:	4252      	negs	r2, r2
    2302:	4b2b      	ldr	r3, [pc, #172]	; (23b0 <xTaskIncrementTick+0x10c>)
    2304:	601a      	str	r2, [r3, #0]
						break;
    2306:	e02b      	b.n	2360 <xTaskIncrementTick+0xbc>
=======
    1822:	2201      	movs	r2, #1
    1824:	4252      	negs	r2, r2
    1826:	4b2b      	ldr	r3, [pc, #172]	; (18d4 <xTaskIncrementTick+0x10c>)
    1828:	601a      	str	r2, [r3, #0]
						break;
    182a:	e02b      	b.n	1884 <xTaskIncrementTick+0xbc>
>>>>>>> JJ's_Branch
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
<<<<<<< HEAD
    2308:	4a25      	ldr	r2, [pc, #148]	; (23a0 <xTaskIncrementTick+0xfc>)
    230a:	6813      	ldr	r3, [r2, #0]
    230c:	68db      	ldr	r3, [r3, #12]
    230e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2310:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    2312:	429f      	cmp	r7, r3
    2314:	d202      	bcs.n	231c <xTaskIncrementTick+0x78>
=======
    182c:	4a25      	ldr	r2, [pc, #148]	; (18c4 <xTaskIncrementTick+0xfc>)
    182e:	6813      	ldr	r3, [r2, #0]
    1830:	68db      	ldr	r3, [r3, #12]
    1832:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1834:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    1836:	429f      	cmp	r7, r3
    1838:	d202      	bcs.n	1840 <xTaskIncrementTick+0x78>
>>>>>>> JJ's_Branch
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
    2316:	4a26      	ldr	r2, [pc, #152]	; (23b0 <xTaskIncrementTick+0x10c>)
    2318:	6013      	str	r3, [r2, #0]
							break;
    231a:	e021      	b.n	2360 <xTaskIncrementTick+0xbc>
=======
    183a:	4a26      	ldr	r2, [pc, #152]	; (18d4 <xTaskIncrementTick+0x10c>)
    183c:	6013      	str	r3, [r2, #0]
							break;
    183e:	e021      	b.n	1884 <xTaskIncrementTick+0xbc>
>>>>>>> JJ's_Branch
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
<<<<<<< HEAD
    231c:	1d2b      	adds	r3, r5, #4
    231e:	4698      	mov	r8, r3
    2320:	1c18      	adds	r0, r3, #0
    2322:	4a24      	ldr	r2, [pc, #144]	; (23b4 <xTaskIncrementTick+0x110>)
    2324:	4790      	blx	r2
=======
    1840:	1d2b      	adds	r3, r5, #4
    1842:	4698      	mov	r8, r3
    1844:	1c18      	adds	r0, r3, #0
    1846:	4a24      	ldr	r2, [pc, #144]	; (18d8 <xTaskIncrementTick+0x110>)
    1848:	4790      	blx	r2
>>>>>>> JJ's_Branch

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
    2326:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2328:	2b00      	cmp	r3, #0
    232a:	d003      	beq.n	2334 <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    232c:	1c28      	adds	r0, r5, #0
    232e:	3018      	adds	r0, #24
    2330:	4b20      	ldr	r3, [pc, #128]	; (23b4 <xTaskIncrementTick+0x110>)
    2332:	4798      	blx	r3
=======
    184a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    184c:	2b00      	cmp	r3, #0
    184e:	d003      	beq.n	1858 <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1850:	1c28      	adds	r0, r5, #0
    1852:	3018      	adds	r0, #24
    1854:	4b20      	ldr	r3, [pc, #128]	; (18d8 <xTaskIncrementTick+0x110>)
    1856:	4798      	blx	r3
>>>>>>> JJ's_Branch
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
    2334:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2336:	4a20      	ldr	r2, [pc, #128]	; (23b8 <xTaskIncrementTick+0x114>)
    2338:	6812      	ldr	r2, [r2, #0]
    233a:	4293      	cmp	r3, r2
    233c:	d901      	bls.n	2342 <xTaskIncrementTick+0x9e>
    233e:	4a1e      	ldr	r2, [pc, #120]	; (23b8 <xTaskIncrementTick+0x114>)
    2340:	6013      	str	r3, [r2, #0]
    2342:	009a      	lsls	r2, r3, #2
    2344:	18d3      	adds	r3, r2, r3
    2346:	009b      	lsls	r3, r3, #2
    2348:	481c      	ldr	r0, [pc, #112]	; (23bc <xTaskIncrementTick+0x118>)
    234a:	18c0      	adds	r0, r0, r3
    234c:	4641      	mov	r1, r8
    234e:	4b1c      	ldr	r3, [pc, #112]	; (23c0 <xTaskIncrementTick+0x11c>)
    2350:	4798      	blx	r3
=======
    1858:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    185a:	4a20      	ldr	r2, [pc, #128]	; (18dc <xTaskIncrementTick+0x114>)
    185c:	6812      	ldr	r2, [r2, #0]
    185e:	4293      	cmp	r3, r2
    1860:	d901      	bls.n	1866 <xTaskIncrementTick+0x9e>
    1862:	4a1e      	ldr	r2, [pc, #120]	; (18dc <xTaskIncrementTick+0x114>)
    1864:	6013      	str	r3, [r2, #0]
    1866:	009a      	lsls	r2, r3, #2
    1868:	18d3      	adds	r3, r2, r3
    186a:	009b      	lsls	r3, r3, #2
    186c:	481c      	ldr	r0, [pc, #112]	; (18e0 <xTaskIncrementTick+0x118>)
    186e:	18c0      	adds	r0, r0, r3
    1870:	4641      	mov	r1, r8
    1872:	4b1c      	ldr	r3, [pc, #112]	; (18e4 <xTaskIncrementTick+0x11c>)
    1874:	4798      	blx	r3
>>>>>>> JJ's_Branch
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
    2352:	4b1c      	ldr	r3, [pc, #112]	; (23c4 <xTaskIncrementTick+0x120>)
    2354:	681b      	ldr	r3, [r3, #0]
    2356:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    235a:	429a      	cmp	r2, r3
    235c:	d2ca      	bcs.n	22f4 <xTaskIncrementTick+0x50>
    235e:	e7ca      	b.n	22f6 <xTaskIncrementTick+0x52>
=======
    1876:	4b1c      	ldr	r3, [pc, #112]	; (18e8 <xTaskIncrementTick+0x120>)
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    187e:	429a      	cmp	r2, r3
    1880:	d2ca      	bcs.n	1818 <xTaskIncrementTick+0x50>
    1882:	e7ca      	b.n	181a <xTaskIncrementTick+0x52>
>>>>>>> JJ's_Branch
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
    2360:	4b18      	ldr	r3, [pc, #96]	; (23c4 <xTaskIncrementTick+0x120>)
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2366:	009a      	lsls	r2, r3, #2
    2368:	18d3      	adds	r3, r2, r3
    236a:	009b      	lsls	r3, r3, #2
    236c:	4a13      	ldr	r2, [pc, #76]	; (23bc <xTaskIncrementTick+0x118>)
    236e:	589b      	ldr	r3, [r3, r2]
    2370:	2b01      	cmp	r3, #1
    2372:	d806      	bhi.n	2382 <xTaskIncrementTick+0xde>
    2374:	e006      	b.n	2384 <xTaskIncrementTick+0xe0>
=======
    1884:	4b18      	ldr	r3, [pc, #96]	; (18e8 <xTaskIncrementTick+0x120>)
    1886:	681b      	ldr	r3, [r3, #0]
    1888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    188a:	009a      	lsls	r2, r3, #2
    188c:	18d3      	adds	r3, r2, r3
    188e:	009b      	lsls	r3, r3, #2
    1890:	4a13      	ldr	r2, [pc, #76]	; (18e0 <xTaskIncrementTick+0x118>)
    1892:	589b      	ldr	r3, [r3, r2]
    1894:	2b01      	cmp	r3, #1
    1896:	d806      	bhi.n	18a6 <xTaskIncrementTick+0xde>
    1898:	e006      	b.n	18a8 <xTaskIncrementTick+0xe0>
>>>>>>> JJ's_Branch
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< HEAD
    2376:	4b14      	ldr	r3, [pc, #80]	; (23c8 <xTaskIncrementTick+0x124>)
    2378:	681a      	ldr	r2, [r3, #0]
    237a:	3201      	adds	r2, #1
    237c:	601a      	str	r2, [r3, #0]
=======
    189a:	4b14      	ldr	r3, [pc, #80]	; (18ec <xTaskIncrementTick+0x124>)
    189c:	681a      	ldr	r2, [r3, #0]
    189e:	3201      	adds	r2, #1
    18a0:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
<<<<<<< HEAD
    237e:	2400      	movs	r4, #0
    2380:	e000      	b.n	2384 <xTaskIncrementTick+0xe0>
=======
    18a2:	2400      	movs	r4, #0
    18a4:	e000      	b.n	18a8 <xTaskIncrementTick+0xe0>
>>>>>>> JJ's_Branch
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
<<<<<<< HEAD
    2382:	2401      	movs	r4, #1
=======
    18a6:	2401      	movs	r4, #1
>>>>>>> JJ's_Branch
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< HEAD
    2384:	4b11      	ldr	r3, [pc, #68]	; (23cc <xTaskIncrementTick+0x128>)
    2386:	681b      	ldr	r3, [r3, #0]
    2388:	2b00      	cmp	r3, #0
    238a:	d000      	beq.n	238e <xTaskIncrementTick+0xea>
		{
			xSwitchRequired = pdTRUE;
    238c:	2401      	movs	r4, #1
=======
    18a8:	4b11      	ldr	r3, [pc, #68]	; (18f0 <xTaskIncrementTick+0x128>)
    18aa:	681b      	ldr	r3, [r3, #0]
    18ac:	2b00      	cmp	r3, #0
    18ae:	d000      	beq.n	18b2 <xTaskIncrementTick+0xea>
		{
			xSwitchRequired = pdTRUE;
    18b0:	2401      	movs	r4, #1
>>>>>>> JJ's_Branch
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
<<<<<<< HEAD
    238e:	1c20      	adds	r0, r4, #0
    2390:	bc04      	pop	{r2}
    2392:	4690      	mov	r8, r2
    2394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	20003c70 	.word	0x20003c70
    239c:	20003c74 	.word	0x20003c74
    23a0:	20003ba8 	.word	0x20003ba8
    23a4:	20003c78 	.word	0x20003c78
    23a8:	20003ba4 	.word	0x20003ba4
    23ac:	00001f9d 	.word	0x00001f9d
    23b0:	20000008 	.word	0x20000008
    23b4:	00001685 	.word	0x00001685
    23b8:	20003c98 	.word	0x20003c98
    23bc:	20003be0 	.word	0x20003be0
    23c0:	0000163d 	.word	0x0000163d
    23c4:	20003c58 	.word	0x20003c58
    23c8:	20003bdc 	.word	0x20003bdc
    23cc:	20003c9c 	.word	0x20003c9c

000023d0 <xTaskResumeAll>:
=======
    18b2:	1c20      	adds	r0, r4, #0
    18b4:	bc04      	pop	{r2}
    18b6:	4690      	mov	r8, r2
    18b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	20003c34 	.word	0x20003c34
    18c0:	20003c38 	.word	0x20003c38
    18c4:	20003b6c 	.word	0x20003b6c
    18c8:	20003c3c 	.word	0x20003c3c
    18cc:	20003b68 	.word	0x20003b68
    18d0:	000014c1 	.word	0x000014c1
    18d4:	20000008 	.word	0x20000008
    18d8:	00000ba9 	.word	0x00000ba9
    18dc:	20003c5c 	.word	0x20003c5c
    18e0:	20003ba4 	.word	0x20003ba4
    18e4:	00000b61 	.word	0x00000b61
    18e8:	20003c1c 	.word	0x20003c1c
    18ec:	20003ba0 	.word	0x20003ba0
    18f0:	20003c60 	.word	0x20003c60

000018f4 <xTaskResumeAll>:
>>>>>>> JJ's_Branch

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
    23d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
=======
    18f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
>>>>>>> JJ's_Branch
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
    23d2:	4b2f      	ldr	r3, [pc, #188]	; (2490 <xTaskResumeAll+0xc0>)
    23d4:	681b      	ldr	r3, [r3, #0]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d101      	bne.n	23de <xTaskResumeAll+0xe>
    23da:	b672      	cpsid	i
    23dc:	e7fe      	b.n	23dc <xTaskResumeAll+0xc>
=======
    18f6:	4b2f      	ldr	r3, [pc, #188]	; (19b4 <xTaskResumeAll+0xc0>)
    18f8:	681b      	ldr	r3, [r3, #0]
    18fa:	2b00      	cmp	r3, #0
    18fc:	d101      	bne.n	1902 <xTaskResumeAll+0xe>
    18fe:	b672      	cpsid	i
    1900:	e7fe      	b.n	1900 <xTaskResumeAll+0xc>
>>>>>>> JJ's_Branch
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
    23de:	4b2d      	ldr	r3, [pc, #180]	; (2494 <xTaskResumeAll+0xc4>)
    23e0:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    23e2:	4b2b      	ldr	r3, [pc, #172]	; (2490 <xTaskResumeAll+0xc0>)
    23e4:	681a      	ldr	r2, [r3, #0]
    23e6:	3a01      	subs	r2, #1
    23e8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    23ea:	681b      	ldr	r3, [r3, #0]
=======
    1902:	4b2d      	ldr	r3, [pc, #180]	; (19b8 <xTaskResumeAll+0xc4>)
    1904:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    1906:	4b2b      	ldr	r3, [pc, #172]	; (19b4 <xTaskResumeAll+0xc0>)
    1908:	681a      	ldr	r2, [r3, #0]
    190a:	3a01      	subs	r2, #1
    190c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    190e:	681b      	ldr	r3, [r3, #0]
>>>>>>> JJ's_Branch
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
<<<<<<< HEAD
    23ec:	2400      	movs	r4, #0
=======
    1910:	2400      	movs	r4, #0
>>>>>>> JJ's_Branch
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
    23ee:	2b00      	cmp	r3, #0
    23f0:	d149      	bne.n	2486 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    23f2:	4b29      	ldr	r3, [pc, #164]	; (2498 <xTaskResumeAll+0xc8>)
    23f4:	681b      	ldr	r3, [r3, #0]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d045      	beq.n	2486 <xTaskResumeAll+0xb6>
=======
    1912:	2b00      	cmp	r3, #0
    1914:	d149      	bne.n	19aa <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1916:	4b29      	ldr	r3, [pc, #164]	; (19bc <xTaskResumeAll+0xc8>)
    1918:	681b      	ldr	r3, [r3, #0]
    191a:	2b00      	cmp	r3, #0
    191c:	d045      	beq.n	19aa <xTaskResumeAll+0xb6>
>>>>>>> JJ's_Branch
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
    23fa:	4d28      	ldr	r5, [pc, #160]	; (249c <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    23fc:	1c2f      	adds	r7, r5, #0
    23fe:	e021      	b.n	2444 <xTaskResumeAll+0x74>
    2400:	68fb      	ldr	r3, [r7, #12]
    2402:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2404:	1c20      	adds	r0, r4, #0
    2406:	3018      	adds	r0, #24
    2408:	4b25      	ldr	r3, [pc, #148]	; (24a0 <xTaskResumeAll+0xd0>)
    240a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    240c:	1d26      	adds	r6, r4, #4
    240e:	1c30      	adds	r0, r6, #0
    2410:	4b23      	ldr	r3, [pc, #140]	; (24a0 <xTaskResumeAll+0xd0>)
    2412:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2414:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2416:	4a23      	ldr	r2, [pc, #140]	; (24a4 <xTaskResumeAll+0xd4>)
    2418:	6812      	ldr	r2, [r2, #0]
    241a:	4293      	cmp	r3, r2
    241c:	d901      	bls.n	2422 <xTaskResumeAll+0x52>
    241e:	4a21      	ldr	r2, [pc, #132]	; (24a4 <xTaskResumeAll+0xd4>)
    2420:	6013      	str	r3, [r2, #0]
    2422:	009a      	lsls	r2, r3, #2
    2424:	18d3      	adds	r3, r2, r3
    2426:	009b      	lsls	r3, r3, #2
    2428:	481f      	ldr	r0, [pc, #124]	; (24a8 <xTaskResumeAll+0xd8>)
    242a:	18c0      	adds	r0, r0, r3
    242c:	1c31      	adds	r1, r6, #0
    242e:	4b1f      	ldr	r3, [pc, #124]	; (24ac <xTaskResumeAll+0xdc>)
    2430:	4798      	blx	r3
=======
    191e:	4d28      	ldr	r5, [pc, #160]	; (19c0 <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1920:	1c2f      	adds	r7, r5, #0
    1922:	e021      	b.n	1968 <xTaskResumeAll+0x74>
    1924:	68fb      	ldr	r3, [r7, #12]
    1926:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1928:	1c20      	adds	r0, r4, #0
    192a:	3018      	adds	r0, #24
    192c:	4b25      	ldr	r3, [pc, #148]	; (19c4 <xTaskResumeAll+0xd0>)
    192e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1930:	1d26      	adds	r6, r4, #4
    1932:	1c30      	adds	r0, r6, #0
    1934:	4b23      	ldr	r3, [pc, #140]	; (19c4 <xTaskResumeAll+0xd0>)
    1936:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    1938:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    193a:	4a23      	ldr	r2, [pc, #140]	; (19c8 <xTaskResumeAll+0xd4>)
    193c:	6812      	ldr	r2, [r2, #0]
    193e:	4293      	cmp	r3, r2
    1940:	d901      	bls.n	1946 <xTaskResumeAll+0x52>
    1942:	4a21      	ldr	r2, [pc, #132]	; (19c8 <xTaskResumeAll+0xd4>)
    1944:	6013      	str	r3, [r2, #0]
    1946:	009a      	lsls	r2, r3, #2
    1948:	18d3      	adds	r3, r2, r3
    194a:	009b      	lsls	r3, r3, #2
    194c:	481f      	ldr	r0, [pc, #124]	; (19cc <xTaskResumeAll+0xd8>)
    194e:	18c0      	adds	r0, r0, r3
    1950:	1c31      	adds	r1, r6, #0
    1952:	4b1f      	ldr	r3, [pc, #124]	; (19d0 <xTaskResumeAll+0xdc>)
    1954:	4798      	blx	r3
>>>>>>> JJ's_Branch

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
    2432:	4b1f      	ldr	r3, [pc, #124]	; (24b0 <xTaskResumeAll+0xe0>)
    2434:	681b      	ldr	r3, [r3, #0]
    2436:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    243a:	429a      	cmp	r2, r3
    243c:	d302      	bcc.n	2444 <xTaskResumeAll+0x74>
					{
						xYieldPending = pdTRUE;
    243e:	2201      	movs	r2, #1
    2440:	4b1c      	ldr	r3, [pc, #112]	; (24b4 <xTaskResumeAll+0xe4>)
    2442:	601a      	str	r2, [r3, #0]
=======
    1956:	4b1f      	ldr	r3, [pc, #124]	; (19d4 <xTaskResumeAll+0xe0>)
    1958:	681b      	ldr	r3, [r3, #0]
    195a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    195e:	429a      	cmp	r2, r3
    1960:	d302      	bcc.n	1968 <xTaskResumeAll+0x74>
					{
						xYieldPending = pdTRUE;
    1962:	2201      	movs	r2, #1
    1964:	4b1c      	ldr	r3, [pc, #112]	; (19d8 <xTaskResumeAll+0xe4>)
    1966:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
    2444:	682b      	ldr	r3, [r5, #0]
    2446:	2b00      	cmp	r3, #0
    2448:	d1da      	bne.n	2400 <xTaskResumeAll+0x30>
=======
    1968:	682b      	ldr	r3, [r5, #0]
    196a:	2b00      	cmp	r3, #0
    196c:	d1da      	bne.n	1924 <xTaskResumeAll+0x30>
>>>>>>> JJ's_Branch

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
<<<<<<< HEAD
    244a:	4b1b      	ldr	r3, [pc, #108]	; (24b8 <xTaskResumeAll+0xe8>)
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	2b00      	cmp	r3, #0
    2450:	d011      	beq.n	2476 <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    2452:	4b19      	ldr	r3, [pc, #100]	; (24b8 <xTaskResumeAll+0xe8>)
    2454:	681b      	ldr	r3, [r3, #0]
    2456:	2b00      	cmp	r3, #0
    2458:	d00d      	beq.n	2476 <xTaskResumeAll+0xa6>
					{
						if( xTaskIncrementTick() != pdFALSE )
    245a:	4e18      	ldr	r6, [pc, #96]	; (24bc <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    245c:	4d15      	ldr	r5, [pc, #84]	; (24b4 <xTaskResumeAll+0xe4>)
=======
    196e:	4b1b      	ldr	r3, [pc, #108]	; (19dc <xTaskResumeAll+0xe8>)
    1970:	681b      	ldr	r3, [r3, #0]
    1972:	2b00      	cmp	r3, #0
    1974:	d011      	beq.n	199a <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    1976:	4b19      	ldr	r3, [pc, #100]	; (19dc <xTaskResumeAll+0xe8>)
    1978:	681b      	ldr	r3, [r3, #0]
    197a:	2b00      	cmp	r3, #0
    197c:	d00d      	beq.n	199a <xTaskResumeAll+0xa6>
					{
						if( xTaskIncrementTick() != pdFALSE )
    197e:	4e18      	ldr	r6, [pc, #96]	; (19e0 <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    1980:	4d15      	ldr	r5, [pc, #84]	; (19d8 <xTaskResumeAll+0xe4>)
>>>>>>> JJ's_Branch
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
<<<<<<< HEAD
    245e:	4c16      	ldr	r4, [pc, #88]	; (24b8 <xTaskResumeAll+0xe8>)
=======
    1982:	4c16      	ldr	r4, [pc, #88]	; (19dc <xTaskResumeAll+0xe8>)
>>>>>>> JJ's_Branch
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
    2460:	47b0      	blx	r6
    2462:	2800      	cmp	r0, #0
    2464:	d001      	beq.n	246a <xTaskResumeAll+0x9a>
						{
							xYieldPending = pdTRUE;
    2466:	2301      	movs	r3, #1
    2468:	602b      	str	r3, [r5, #0]
=======
    1984:	47b0      	blx	r6
    1986:	2800      	cmp	r0, #0
    1988:	d001      	beq.n	198e <xTaskResumeAll+0x9a>
						{
							xYieldPending = pdTRUE;
    198a:	2301      	movs	r3, #1
    198c:	602b      	str	r3, [r5, #0]
>>>>>>> JJ's_Branch
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
<<<<<<< HEAD
    246a:	6823      	ldr	r3, [r4, #0]
    246c:	3b01      	subs	r3, #1
    246e:	6023      	str	r3, [r4, #0]
=======
    198e:	6823      	ldr	r3, [r4, #0]
    1990:	3b01      	subs	r3, #1
    1992:	6023      	str	r3, [r4, #0]
>>>>>>> JJ's_Branch
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
<<<<<<< HEAD
    2470:	6823      	ldr	r3, [r4, #0]
    2472:	2b00      	cmp	r3, #0
    2474:	d1f4      	bne.n	2460 <xTaskResumeAll+0x90>
=======
    1994:	6823      	ldr	r3, [r4, #0]
    1996:	2b00      	cmp	r3, #0
    1998:	d1f4      	bne.n	1984 <xTaskResumeAll+0x90>
>>>>>>> JJ's_Branch
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
<<<<<<< HEAD
    2476:	4b0f      	ldr	r3, [pc, #60]	; (24b4 <xTaskResumeAll+0xe4>)
    2478:	681b      	ldr	r3, [r3, #0]
=======
    199a:	4b0f      	ldr	r3, [pc, #60]	; (19d8 <xTaskResumeAll+0xe4>)
    199c:	681b      	ldr	r3, [r3, #0]
>>>>>>> JJ's_Branch
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
<<<<<<< HEAD
    247a:	2400      	movs	r4, #0
=======
    199e:	2400      	movs	r4, #0
>>>>>>> JJ's_Branch
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
<<<<<<< HEAD
    247c:	2b01      	cmp	r3, #1
    247e:	d102      	bne.n	2486 <xTaskResumeAll+0xb6>
=======
    19a0:	2b01      	cmp	r3, #1
    19a2:	d102      	bne.n	19aa <xTaskResumeAll+0xb6>
>>>>>>> JJ's_Branch
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
    2480:	4b0f      	ldr	r3, [pc, #60]	; (24c0 <xTaskResumeAll+0xf0>)
    2482:	4798      	blx	r3
=======
    19a4:	4b0f      	ldr	r3, [pc, #60]	; (19e4 <xTaskResumeAll+0xf0>)
    19a6:	4798      	blx	r3
>>>>>>> JJ's_Branch

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
    2484:	2401      	movs	r4, #1
=======
    19a8:	2401      	movs	r4, #1
>>>>>>> JJ's_Branch
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
    2486:	4b0f      	ldr	r3, [pc, #60]	; (24c4 <xTaskResumeAll+0xf4>)
    2488:	4798      	blx	r3

	return xAlreadyYielded;
}
    248a:	1c20      	adds	r0, r4, #0
    248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	20003c70 	.word	0x20003c70
    2494:	00001719 	.word	0x00001719
    2498:	20003c80 	.word	0x20003c80
    249c:	20003c5c 	.word	0x20003c5c
    24a0:	00001685 	.word	0x00001685
    24a4:	20003c98 	.word	0x20003c98
    24a8:	20003be0 	.word	0x20003be0
    24ac:	0000163d 	.word	0x0000163d
    24b0:	20003c58 	.word	0x20003c58
    24b4:	20003c9c 	.word	0x20003c9c
    24b8:	20003bdc 	.word	0x20003bdc
    24bc:	000022a5 	.word	0x000022a5
    24c0:	00001701 	.word	0x00001701
    24c4:	00001731 	.word	0x00001731

000024c8 <vTaskDelay>:
=======
    19aa:	4b0f      	ldr	r3, [pc, #60]	; (19e8 <xTaskResumeAll+0xf4>)
    19ac:	4798      	blx	r3

	return xAlreadyYielded;
}
    19ae:	1c20      	adds	r0, r4, #0
    19b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	20003c34 	.word	0x20003c34
    19b8:	00000c3d 	.word	0x00000c3d
    19bc:	20003c44 	.word	0x20003c44
    19c0:	20003c20 	.word	0x20003c20
    19c4:	00000ba9 	.word	0x00000ba9
    19c8:	20003c5c 	.word	0x20003c5c
    19cc:	20003ba4 	.word	0x20003ba4
    19d0:	00000b61 	.word	0x00000b61
    19d4:	20003c1c 	.word	0x20003c1c
    19d8:	20003c60 	.word	0x20003c60
    19dc:	20003ba0 	.word	0x20003ba0
    19e0:	000017c9 	.word	0x000017c9
    19e4:	00000c25 	.word	0x00000c25
    19e8:	00000c55 	.word	0x00000c55

000019ec <vTaskDelay>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
    24c8:	b510      	push	{r4, lr}
    24ca:	1e04      	subs	r4, r0, #0
=======
    19ec:	b510      	push	{r4, lr}
    19ee:	1e04      	subs	r4, r0, #0
>>>>>>> JJ's_Branch
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
<<<<<<< HEAD
    24cc:	d016      	beq.n	24fc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    24ce:	4b0d      	ldr	r3, [pc, #52]	; (2504 <vTaskDelay+0x3c>)
    24d0:	681b      	ldr	r3, [r3, #0]
    24d2:	2b00      	cmp	r3, #0
    24d4:	d001      	beq.n	24da <vTaskDelay+0x12>
    24d6:	b672      	cpsid	i
    24d8:	e7fe      	b.n	24d8 <vTaskDelay+0x10>
			vTaskSuspendAll();
    24da:	4b0b      	ldr	r3, [pc, #44]	; (2508 <vTaskDelay+0x40>)
    24dc:	4798      	blx	r3
=======
    19f0:	d016      	beq.n	1a20 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    19f2:	4b0d      	ldr	r3, [pc, #52]	; (1a28 <vTaskDelay+0x3c>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d001      	beq.n	19fe <vTaskDelay+0x12>
    19fa:	b672      	cpsid	i
    19fc:	e7fe      	b.n	19fc <vTaskDelay+0x10>
			vTaskSuspendAll();
    19fe:	4b0b      	ldr	r3, [pc, #44]	; (1a2c <vTaskDelay+0x40>)
    1a00:	4798      	blx	r3
>>>>>>> JJ's_Branch
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
<<<<<<< HEAD
    24de:	4b0b      	ldr	r3, [pc, #44]	; (250c <vTaskDelay+0x44>)
    24e0:	681b      	ldr	r3, [r3, #0]
    24e2:	18e4      	adds	r4, r4, r3
=======
    1a02:	4b0b      	ldr	r3, [pc, #44]	; (1a30 <vTaskDelay+0x44>)
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	18e4      	adds	r4, r4, r3
>>>>>>> JJ's_Branch

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
    24e4:	4b0a      	ldr	r3, [pc, #40]	; (2510 <vTaskDelay+0x48>)
    24e6:	6818      	ldr	r0, [r3, #0]
    24e8:	3004      	adds	r0, #4
    24ea:	4b0a      	ldr	r3, [pc, #40]	; (2514 <vTaskDelay+0x4c>)
    24ec:	4798      	blx	r3
=======
    1a08:	4b0a      	ldr	r3, [pc, #40]	; (1a34 <vTaskDelay+0x48>)
    1a0a:	6818      	ldr	r0, [r3, #0]
    1a0c:	3004      	adds	r0, #4
    1a0e:	4b0a      	ldr	r3, [pc, #40]	; (1a38 <vTaskDelay+0x4c>)
    1a10:	4798      	blx	r3
>>>>>>> JJ's_Branch
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
<<<<<<< HEAD
    24ee:	1c20      	adds	r0, r4, #0
    24f0:	4b09      	ldr	r3, [pc, #36]	; (2518 <vTaskDelay+0x50>)
    24f2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    24f4:	4b09      	ldr	r3, [pc, #36]	; (251c <vTaskDelay+0x54>)
    24f6:	4798      	blx	r3
=======
    1a12:	1c20      	adds	r0, r4, #0
    1a14:	4b09      	ldr	r3, [pc, #36]	; (1a3c <vTaskDelay+0x50>)
    1a16:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    1a18:	4b09      	ldr	r3, [pc, #36]	; (1a40 <vTaskDelay+0x54>)
    1a1a:	4798      	blx	r3
>>>>>>> JJ's_Branch
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
    24f8:	2800      	cmp	r0, #0
    24fa:	d101      	bne.n	2500 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    24fc:	4b08      	ldr	r3, [pc, #32]	; (2520 <vTaskDelay+0x58>)
    24fe:	4798      	blx	r3
=======
    1a1c:	2800      	cmp	r0, #0
    1a1e:	d101      	bne.n	1a24 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    1a20:	4b08      	ldr	r3, [pc, #32]	; (1a44 <vTaskDelay+0x58>)
    1a22:	4798      	blx	r3
>>>>>>> JJ's_Branch
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
    2500:	bd10      	pop	{r4, pc}
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	20003c70 	.word	0x20003c70
    2508:	00002275 	.word	0x00002275
    250c:	20003c74 	.word	0x20003c74
    2510:	20003c58 	.word	0x20003c58
    2514:	00001685 	.word	0x00001685
    2518:	00001fc9 	.word	0x00001fc9
    251c:	000023d1 	.word	0x000023d1
    2520:	00001701 	.word	0x00001701

00002524 <prvIdleTask>:
=======
    1a24:	bd10      	pop	{r4, pc}
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	20003c34 	.word	0x20003c34
    1a2c:	00001799 	.word	0x00001799
    1a30:	20003c38 	.word	0x20003c38
    1a34:	20003c1c 	.word	0x20003c1c
    1a38:	00000ba9 	.word	0x00000ba9
    1a3c:	000014ed 	.word	0x000014ed
    1a40:	000018f5 	.word	0x000018f5
    1a44:	00000c25 	.word	0x00000c25

00001a48 <prvIdleTask>:
>>>>>>> JJ's_Branch
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
    2524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
=======
    1a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
>>>>>>> JJ's_Branch
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
<<<<<<< HEAD
    2526:	4e15      	ldr	r6, [pc, #84]	; (257c <prvIdleTask+0x58>)
=======
    1a4a:	4e15      	ldr	r6, [pc, #84]	; (1aa0 <prvIdleTask+0x58>)
>>>>>>> JJ's_Branch

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
    2528:	4f15      	ldr	r7, [pc, #84]	; (2580 <prvIdleTask+0x5c>)
    252a:	e01e      	b.n	256a <prvIdleTask+0x46>
=======
    1a4c:	4f15      	ldr	r7, [pc, #84]	; (1aa4 <prvIdleTask+0x5c>)
    1a4e:	e01e      	b.n	1a8e <prvIdleTask+0x46>
>>>>>>> JJ's_Branch

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
<<<<<<< HEAD
    252c:	4b15      	ldr	r3, [pc, #84]	; (2584 <prvIdleTask+0x60>)
    252e:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2530:	4b15      	ldr	r3, [pc, #84]	; (2588 <prvIdleTask+0x64>)
    2532:	681c      	ldr	r4, [r3, #0]
			}
			( void ) xTaskResumeAll();
    2534:	4b15      	ldr	r3, [pc, #84]	; (258c <prvIdleTask+0x68>)
    2536:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    2538:	2c00      	cmp	r4, #0
    253a:	d016      	beq.n	256a <prvIdleTask+0x46>
=======
    1a50:	4b15      	ldr	r3, [pc, #84]	; (1aa8 <prvIdleTask+0x60>)
    1a52:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1a54:	4b15      	ldr	r3, [pc, #84]	; (1aac <prvIdleTask+0x64>)
    1a56:	681c      	ldr	r4, [r3, #0]
			}
			( void ) xTaskResumeAll();
    1a58:	4b15      	ldr	r3, [pc, #84]	; (1ab0 <prvIdleTask+0x68>)
    1a5a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    1a5c:	2c00      	cmp	r4, #0
    1a5e:	d016      	beq.n	1a8e <prvIdleTask+0x46>
>>>>>>> JJ's_Branch
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
<<<<<<< HEAD
    253c:	4b14      	ldr	r3, [pc, #80]	; (2590 <prvIdleTask+0x6c>)
    253e:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2540:	4b11      	ldr	r3, [pc, #68]	; (2588 <prvIdleTask+0x64>)
    2542:	68db      	ldr	r3, [r3, #12]
    2544:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2546:	1d20      	adds	r0, r4, #4
    2548:	4b12      	ldr	r3, [pc, #72]	; (2594 <prvIdleTask+0x70>)
    254a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    254c:	4b12      	ldr	r3, [pc, #72]	; (2598 <prvIdleTask+0x74>)
    254e:	681a      	ldr	r2, [r3, #0]
    2550:	3a01      	subs	r2, #1
    2552:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    2554:	4b09      	ldr	r3, [pc, #36]	; (257c <prvIdleTask+0x58>)
    2556:	681a      	ldr	r2, [r3, #0]
    2558:	3a01      	subs	r2, #1
    255a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    255c:	4b0f      	ldr	r3, [pc, #60]	; (259c <prvIdleTask+0x78>)
    255e:	4798      	blx	r3
=======
    1a60:	4b14      	ldr	r3, [pc, #80]	; (1ab4 <prvIdleTask+0x6c>)
    1a62:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1a64:	4b11      	ldr	r3, [pc, #68]	; (1aac <prvIdleTask+0x64>)
    1a66:	68db      	ldr	r3, [r3, #12]
    1a68:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1a6a:	1d20      	adds	r0, r4, #4
    1a6c:	4b12      	ldr	r3, [pc, #72]	; (1ab8 <prvIdleTask+0x70>)
    1a6e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    1a70:	4b12      	ldr	r3, [pc, #72]	; (1abc <prvIdleTask+0x74>)
    1a72:	681a      	ldr	r2, [r3, #0]
    1a74:	3a01      	subs	r2, #1
    1a76:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    1a78:	4b09      	ldr	r3, [pc, #36]	; (1aa0 <prvIdleTask+0x58>)
    1a7a:	681a      	ldr	r2, [r3, #0]
    1a7c:	3a01      	subs	r2, #1
    1a7e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    1a80:	4b0f      	ldr	r3, [pc, #60]	; (1ac0 <prvIdleTask+0x78>)
    1a82:	4798      	blx	r3
>>>>>>> JJ's_Branch
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
<<<<<<< HEAD
    2560:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2562:	4d0f      	ldr	r5, [pc, #60]	; (25a0 <prvIdleTask+0x7c>)
    2564:	47a8      	blx	r5
		vPortFree( pxTCB );
    2566:	1c20      	adds	r0, r4, #0
    2568:	47a8      	blx	r5
=======
    1a84:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1a86:	4d0f      	ldr	r5, [pc, #60]	; (1ac4 <prvIdleTask+0x7c>)
    1a88:	47a8      	blx	r5
		vPortFree( pxTCB );
    1a8a:	1c20      	adds	r0, r4, #0
    1a8c:	47a8      	blx	r5
>>>>>>> JJ's_Branch
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
<<<<<<< HEAD
    256a:	6833      	ldr	r3, [r6, #0]
    256c:	2b00      	cmp	r3, #0
    256e:	d1dd      	bne.n	252c <prvIdleTask+0x8>
=======
    1a8e:	6833      	ldr	r3, [r6, #0]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d1dd      	bne.n	1a50 <prvIdleTask+0x8>
>>>>>>> JJ's_Branch

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
    2570:	683b      	ldr	r3, [r7, #0]
    2572:	2b01      	cmp	r3, #1
    2574:	d9f9      	bls.n	256a <prvIdleTask+0x46>
			{
				taskYIELD();
    2576:	4b0b      	ldr	r3, [pc, #44]	; (25a4 <prvIdleTask+0x80>)
    2578:	4798      	blx	r3
    257a:	e7f6      	b.n	256a <prvIdleTask+0x46>
    257c:	20003bb0 	.word	0x20003bb0
    2580:	20003be0 	.word	0x20003be0
    2584:	00002275 	.word	0x00002275
    2588:	20003c44 	.word	0x20003c44
    258c:	000023d1 	.word	0x000023d1
    2590:	00001719 	.word	0x00001719
    2594:	00001685 	.word	0x00001685
    2598:	20003c80 	.word	0x20003c80
    259c:	00001731 	.word	0x00001731
    25a0:	000018b9 	.word	0x000018b9
    25a4:	00001701 	.word	0x00001701

000025a8 <vTaskSwitchContext>:
=======
    1a94:	683b      	ldr	r3, [r7, #0]
    1a96:	2b01      	cmp	r3, #1
    1a98:	d9f9      	bls.n	1a8e <prvIdleTask+0x46>
			{
				taskYIELD();
    1a9a:	4b0b      	ldr	r3, [pc, #44]	; (1ac8 <prvIdleTask+0x80>)
    1a9c:	4798      	blx	r3
    1a9e:	e7f6      	b.n	1a8e <prvIdleTask+0x46>
    1aa0:	20003b74 	.word	0x20003b74
    1aa4:	20003ba4 	.word	0x20003ba4
    1aa8:	00001799 	.word	0x00001799
    1aac:	20003c08 	.word	0x20003c08
    1ab0:	000018f5 	.word	0x000018f5
    1ab4:	00000c3d 	.word	0x00000c3d
    1ab8:	00000ba9 	.word	0x00000ba9
    1abc:	20003c44 	.word	0x20003c44
    1ac0:	00000c55 	.word	0x00000c55
    1ac4:	00000ddd 	.word	0x00000ddd
    1ac8:	00000c25 	.word	0x00000c25

00001acc <vTaskSwitchContext>:
>>>>>>> JJ's_Branch

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
    25a8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    25aa:	4b20      	ldr	r3, [pc, #128]	; (262c <vTaskSwitchContext+0x84>)
    25ac:	681b      	ldr	r3, [r3, #0]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d003      	beq.n	25ba <vTaskSwitchContext+0x12>
=======
    1acc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1ace:	4b20      	ldr	r3, [pc, #128]	; (1b50 <vTaskSwitchContext+0x84>)
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d003      	beq.n	1ade <vTaskSwitchContext+0x12>
>>>>>>> JJ's_Branch
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
    25b2:	2201      	movs	r2, #1
    25b4:	4b1e      	ldr	r3, [pc, #120]	; (2630 <vTaskSwitchContext+0x88>)
    25b6:	601a      	str	r2, [r3, #0]
    25b8:	e036      	b.n	2628 <vTaskSwitchContext+0x80>
=======
    1ad6:	2201      	movs	r2, #1
    1ad8:	4b1e      	ldr	r3, [pc, #120]	; (1b54 <vTaskSwitchContext+0x88>)
    1ada:	601a      	str	r2, [r3, #0]
    1adc:	e036      	b.n	1b4c <vTaskSwitchContext+0x80>
>>>>>>> JJ's_Branch
	}
	else
	{
		xYieldPending = pdFALSE;
<<<<<<< HEAD
    25ba:	2200      	movs	r2, #0
    25bc:	4b1c      	ldr	r3, [pc, #112]	; (2630 <vTaskSwitchContext+0x88>)
    25be:	601a      	str	r2, [r3, #0]
=======
    1ade:	2200      	movs	r2, #0
    1ae0:	4b1c      	ldr	r3, [pc, #112]	; (1b54 <vTaskSwitchContext+0x88>)
    1ae2:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
<<<<<<< HEAD
    25c0:	4b1c      	ldr	r3, [pc, #112]	; (2634 <vTaskSwitchContext+0x8c>)
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	009a      	lsls	r2, r3, #2
    25c6:	18d3      	adds	r3, r2, r3
    25c8:	009b      	lsls	r3, r3, #2
    25ca:	4a1b      	ldr	r2, [pc, #108]	; (2638 <vTaskSwitchContext+0x90>)
    25cc:	589b      	ldr	r3, [r3, r2]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d116      	bne.n	2600 <vTaskSwitchContext+0x58>
    25d2:	4b18      	ldr	r3, [pc, #96]	; (2634 <vTaskSwitchContext+0x8c>)
    25d4:	681b      	ldr	r3, [r3, #0]
    25d6:	2b00      	cmp	r3, #0
    25d8:	d105      	bne.n	25e6 <vTaskSwitchContext+0x3e>
    25da:	e002      	b.n	25e2 <vTaskSwitchContext+0x3a>
    25dc:	6802      	ldr	r2, [r0, #0]
    25de:	2a00      	cmp	r2, #0
    25e0:	d104      	bne.n	25ec <vTaskSwitchContext+0x44>
    25e2:	b672      	cpsid	i
    25e4:	e7fe      	b.n	25e4 <vTaskSwitchContext+0x3c>
    25e6:	4b13      	ldr	r3, [pc, #76]	; (2634 <vTaskSwitchContext+0x8c>)
    25e8:	4c13      	ldr	r4, [pc, #76]	; (2638 <vTaskSwitchContext+0x90>)
    25ea:	1c18      	adds	r0, r3, #0
    25ec:	681a      	ldr	r2, [r3, #0]
    25ee:	3a01      	subs	r2, #1
    25f0:	601a      	str	r2, [r3, #0]
    25f2:	681a      	ldr	r2, [r3, #0]
    25f4:	0091      	lsls	r1, r2, #2
    25f6:	188a      	adds	r2, r1, r2
    25f8:	0092      	lsls	r2, r2, #2
    25fa:	5912      	ldr	r2, [r2, r4]
    25fc:	2a00      	cmp	r2, #0
    25fe:	d0ed      	beq.n	25dc <vTaskSwitchContext+0x34>
    2600:	4b0c      	ldr	r3, [pc, #48]	; (2634 <vTaskSwitchContext+0x8c>)
    2602:	681b      	ldr	r3, [r3, #0]
    2604:	009a      	lsls	r2, r3, #2
    2606:	18d3      	adds	r3, r2, r3
    2608:	009b      	lsls	r3, r3, #2
    260a:	4a0b      	ldr	r2, [pc, #44]	; (2638 <vTaskSwitchContext+0x90>)
    260c:	18d3      	adds	r3, r2, r3
    260e:	685a      	ldr	r2, [r3, #4]
    2610:	6852      	ldr	r2, [r2, #4]
    2612:	605a      	str	r2, [r3, #4]
    2614:	1c19      	adds	r1, r3, #0
    2616:	3108      	adds	r1, #8
    2618:	428a      	cmp	r2, r1
    261a:	d101      	bne.n	2620 <vTaskSwitchContext+0x78>
    261c:	6852      	ldr	r2, [r2, #4]
    261e:	605a      	str	r2, [r3, #4]
    2620:	685b      	ldr	r3, [r3, #4]
    2622:	68da      	ldr	r2, [r3, #12]
    2624:	4b05      	ldr	r3, [pc, #20]	; (263c <vTaskSwitchContext+0x94>)
    2626:	601a      	str	r2, [r3, #0]
=======
    1ae4:	4b1c      	ldr	r3, [pc, #112]	; (1b58 <vTaskSwitchContext+0x8c>)
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	009a      	lsls	r2, r3, #2
    1aea:	18d3      	adds	r3, r2, r3
    1aec:	009b      	lsls	r3, r3, #2
    1aee:	4a1b      	ldr	r2, [pc, #108]	; (1b5c <vTaskSwitchContext+0x90>)
    1af0:	589b      	ldr	r3, [r3, r2]
    1af2:	2b00      	cmp	r3, #0
    1af4:	d116      	bne.n	1b24 <vTaskSwitchContext+0x58>
    1af6:	4b18      	ldr	r3, [pc, #96]	; (1b58 <vTaskSwitchContext+0x8c>)
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	2b00      	cmp	r3, #0
    1afc:	d105      	bne.n	1b0a <vTaskSwitchContext+0x3e>
    1afe:	e002      	b.n	1b06 <vTaskSwitchContext+0x3a>
    1b00:	6802      	ldr	r2, [r0, #0]
    1b02:	2a00      	cmp	r2, #0
    1b04:	d104      	bne.n	1b10 <vTaskSwitchContext+0x44>
    1b06:	b672      	cpsid	i
    1b08:	e7fe      	b.n	1b08 <vTaskSwitchContext+0x3c>
    1b0a:	4b13      	ldr	r3, [pc, #76]	; (1b58 <vTaskSwitchContext+0x8c>)
    1b0c:	4c13      	ldr	r4, [pc, #76]	; (1b5c <vTaskSwitchContext+0x90>)
    1b0e:	1c18      	adds	r0, r3, #0
    1b10:	681a      	ldr	r2, [r3, #0]
    1b12:	3a01      	subs	r2, #1
    1b14:	601a      	str	r2, [r3, #0]
    1b16:	681a      	ldr	r2, [r3, #0]
    1b18:	0091      	lsls	r1, r2, #2
    1b1a:	188a      	adds	r2, r1, r2
    1b1c:	0092      	lsls	r2, r2, #2
    1b1e:	5912      	ldr	r2, [r2, r4]
    1b20:	2a00      	cmp	r2, #0
    1b22:	d0ed      	beq.n	1b00 <vTaskSwitchContext+0x34>
    1b24:	4b0c      	ldr	r3, [pc, #48]	; (1b58 <vTaskSwitchContext+0x8c>)
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	009a      	lsls	r2, r3, #2
    1b2a:	18d3      	adds	r3, r2, r3
    1b2c:	009b      	lsls	r3, r3, #2
    1b2e:	4a0b      	ldr	r2, [pc, #44]	; (1b5c <vTaskSwitchContext+0x90>)
    1b30:	18d3      	adds	r3, r2, r3
    1b32:	685a      	ldr	r2, [r3, #4]
    1b34:	6852      	ldr	r2, [r2, #4]
    1b36:	605a      	str	r2, [r3, #4]
    1b38:	1c19      	adds	r1, r3, #0
    1b3a:	3108      	adds	r1, #8
    1b3c:	428a      	cmp	r2, r1
    1b3e:	d101      	bne.n	1b44 <vTaskSwitchContext+0x78>
    1b40:	6852      	ldr	r2, [r2, #4]
    1b42:	605a      	str	r2, [r3, #4]
    1b44:	685b      	ldr	r3, [r3, #4]
    1b46:	68da      	ldr	r2, [r3, #12]
    1b48:	4b05      	ldr	r3, [pc, #20]	; (1b60 <vTaskSwitchContext+0x94>)
    1b4a:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
    2628:	bd10      	pop	{r4, pc}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	20003c70 	.word	0x20003c70
    2630:	20003c9c 	.word	0x20003c9c
    2634:	20003c98 	.word	0x20003c98
    2638:	20003be0 	.word	0x20003be0
    263c:	20003c58 	.word	0x20003c58

00002640 <vTaskPlaceOnEventList>:
=======
    1b4c:	bd10      	pop	{r4, pc}
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	20003c34 	.word	0x20003c34
    1b54:	20003c60 	.word	0x20003c60
    1b58:	20003c5c 	.word	0x20003c5c
    1b5c:	20003ba4 	.word	0x20003ba4
    1b60:	20003c1c 	.word	0x20003c1c

00001b64 <vTaskPlaceOnEventList>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
    2640:	b538      	push	{r3, r4, r5, lr}
    2642:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    2644:	2800      	cmp	r0, #0
    2646:	d101      	bne.n	264c <vTaskPlaceOnEventList+0xc>
    2648:	b672      	cpsid	i
    264a:	e7fe      	b.n	264a <vTaskPlaceOnEventList+0xa>
=======
    1b64:	b538      	push	{r3, r4, r5, lr}
    1b66:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    1b68:	2800      	cmp	r0, #0
    1b6a:	d101      	bne.n	1b70 <vTaskPlaceOnEventList+0xc>
    1b6c:	b672      	cpsid	i
    1b6e:	e7fe      	b.n	1b6e <vTaskPlaceOnEventList+0xa>
>>>>>>> JJ's_Branch

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
    264c:	4d0b      	ldr	r5, [pc, #44]	; (267c <vTaskPlaceOnEventList+0x3c>)
    264e:	6829      	ldr	r1, [r5, #0]
    2650:	3118      	adds	r1, #24
    2652:	4b0b      	ldr	r3, [pc, #44]	; (2680 <vTaskPlaceOnEventList+0x40>)
    2654:	4798      	blx	r3
=======
    1b70:	4d0b      	ldr	r5, [pc, #44]	; (1ba0 <vTaskPlaceOnEventList+0x3c>)
    1b72:	6829      	ldr	r1, [r5, #0]
    1b74:	3118      	adds	r1, #24
    1b76:	4b0b      	ldr	r3, [pc, #44]	; (1ba4 <vTaskPlaceOnEventList+0x40>)
    1b78:	4798      	blx	r3
>>>>>>> JJ's_Branch

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
    2656:	6828      	ldr	r0, [r5, #0]
    2658:	3004      	adds	r0, #4
    265a:	4b0a      	ldr	r3, [pc, #40]	; (2684 <vTaskPlaceOnEventList+0x44>)
    265c:	4798      	blx	r3
=======
    1b7a:	6828      	ldr	r0, [r5, #0]
    1b7c:	3004      	adds	r0, #4
    1b7e:	4b0a      	ldr	r3, [pc, #40]	; (1ba8 <vTaskPlaceOnEventList+0x44>)
    1b80:	4798      	blx	r3
>>>>>>> JJ's_Branch
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
    265e:	1c63      	adds	r3, r4, #1
    2660:	d106      	bne.n	2670 <vTaskPlaceOnEventList+0x30>
=======
    1b82:	1c63      	adds	r3, r4, #1
    1b84:	d106      	bne.n	1b94 <vTaskPlaceOnEventList+0x30>
>>>>>>> JJ's_Branch
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
<<<<<<< HEAD
    2662:	4b06      	ldr	r3, [pc, #24]	; (267c <vTaskPlaceOnEventList+0x3c>)
    2664:	6819      	ldr	r1, [r3, #0]
    2666:	3104      	adds	r1, #4
    2668:	4807      	ldr	r0, [pc, #28]	; (2688 <vTaskPlaceOnEventList+0x48>)
    266a:	4b08      	ldr	r3, [pc, #32]	; (268c <vTaskPlaceOnEventList+0x4c>)
    266c:	4798      	blx	r3
    266e:	e004      	b.n	267a <vTaskPlaceOnEventList+0x3a>
=======
    1b86:	4b06      	ldr	r3, [pc, #24]	; (1ba0 <vTaskPlaceOnEventList+0x3c>)
    1b88:	6819      	ldr	r1, [r3, #0]
    1b8a:	3104      	adds	r1, #4
    1b8c:	4807      	ldr	r0, [pc, #28]	; (1bac <vTaskPlaceOnEventList+0x48>)
    1b8e:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <vTaskPlaceOnEventList+0x4c>)
    1b90:	4798      	blx	r3
    1b92:	e004      	b.n	1b9e <vTaskPlaceOnEventList+0x3a>
>>>>>>> JJ's_Branch
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
<<<<<<< HEAD
    2670:	4b07      	ldr	r3, [pc, #28]	; (2690 <vTaskPlaceOnEventList+0x50>)
    2672:	6818      	ldr	r0, [r3, #0]
    2674:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2676:	4b07      	ldr	r3, [pc, #28]	; (2694 <vTaskPlaceOnEventList+0x54>)
    2678:	4798      	blx	r3
=======
    1b94:	4b07      	ldr	r3, [pc, #28]	; (1bb4 <vTaskPlaceOnEventList+0x50>)
    1b96:	6818      	ldr	r0, [r3, #0]
    1b98:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1b9a:	4b07      	ldr	r3, [pc, #28]	; (1bb8 <vTaskPlaceOnEventList+0x54>)
    1b9c:	4798      	blx	r3
>>>>>>> JJ's_Branch
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
    267a:	bd38      	pop	{r3, r4, r5, pc}
    267c:	20003c58 	.word	0x20003c58
    2680:	00001655 	.word	0x00001655
    2684:	00001685 	.word	0x00001685
    2688:	20003c84 	.word	0x20003c84
    268c:	0000163d 	.word	0x0000163d
    2690:	20003c74 	.word	0x20003c74
    2694:	00001fc9 	.word	0x00001fc9

00002698 <vTaskPlaceOnEventListRestricted>:
=======
    1b9e:	bd38      	pop	{r3, r4, r5, pc}
    1ba0:	20003c1c 	.word	0x20003c1c
    1ba4:	00000b79 	.word	0x00000b79
    1ba8:	00000ba9 	.word	0x00000ba9
    1bac:	20003c48 	.word	0x20003c48
    1bb0:	00000b61 	.word	0x00000b61
    1bb4:	20003c38 	.word	0x20003c38
    1bb8:	000014ed 	.word	0x000014ed

00001bbc <vTaskPlaceOnEventListRestricted>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
<<<<<<< HEAD
    2698:	b538      	push	{r3, r4, r5, lr}
    269a:	1c0d      	adds	r5, r1, #0
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    269c:	2800      	cmp	r0, #0
    269e:	d101      	bne.n	26a4 <vTaskPlaceOnEventListRestricted+0xc>
    26a0:	b672      	cpsid	i
    26a2:	e7fe      	b.n	26a2 <vTaskPlaceOnEventListRestricted+0xa>
=======
    1bbc:	b538      	push	{r3, r4, r5, lr}
    1bbe:	1c0d      	adds	r5, r1, #0
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    1bc0:	2800      	cmp	r0, #0
    1bc2:	d101      	bne.n	1bc8 <vTaskPlaceOnEventListRestricted+0xc>
    1bc4:	b672      	cpsid	i
    1bc6:	e7fe      	b.n	1bc6 <vTaskPlaceOnEventListRestricted+0xa>
>>>>>>> JJ's_Branch

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
    26a4:	4c07      	ldr	r4, [pc, #28]	; (26c4 <vTaskPlaceOnEventListRestricted+0x2c>)
    26a6:	6821      	ldr	r1, [r4, #0]
    26a8:	3118      	adds	r1, #24
    26aa:	4b07      	ldr	r3, [pc, #28]	; (26c8 <vTaskPlaceOnEventListRestricted+0x30>)
    26ac:	4798      	blx	r3
=======
    1bc8:	4c07      	ldr	r4, [pc, #28]	; (1be8 <vTaskPlaceOnEventListRestricted+0x2c>)
    1bca:	6821      	ldr	r1, [r4, #0]
    1bcc:	3118      	adds	r1, #24
    1bce:	4b07      	ldr	r3, [pc, #28]	; (1bec <vTaskPlaceOnEventListRestricted+0x30>)
    1bd0:	4798      	blx	r3
>>>>>>> JJ's_Branch

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
    26ae:	6820      	ldr	r0, [r4, #0]
    26b0:	3004      	adds	r0, #4
    26b2:	4b06      	ldr	r3, [pc, #24]	; (26cc <vTaskPlaceOnEventListRestricted+0x34>)
    26b4:	4798      	blx	r3
=======
    1bd2:	6820      	ldr	r0, [r4, #0]
    1bd4:	3004      	adds	r0, #4
    1bd6:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <vTaskPlaceOnEventListRestricted+0x34>)
    1bd8:	4798      	blx	r3
>>>>>>> JJ's_Branch
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
<<<<<<< HEAD
    26b6:	4b06      	ldr	r3, [pc, #24]	; (26d0 <vTaskPlaceOnEventListRestricted+0x38>)
    26b8:	6818      	ldr	r0, [r3, #0]
    26ba:	1828      	adds	r0, r5, r0

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    26bc:	4b05      	ldr	r3, [pc, #20]	; (26d4 <vTaskPlaceOnEventListRestricted+0x3c>)
    26be:	4798      	blx	r3
	}
    26c0:	bd38      	pop	{r3, r4, r5, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	20003c58 	.word	0x20003c58
    26c8:	0000163d 	.word	0x0000163d
    26cc:	00001685 	.word	0x00001685
    26d0:	20003c74 	.word	0x20003c74
    26d4:	00001fc9 	.word	0x00001fc9

000026d8 <xTaskRemoveFromEventList>:
=======
    1bda:	4b06      	ldr	r3, [pc, #24]	; (1bf4 <vTaskPlaceOnEventListRestricted+0x38>)
    1bdc:	6818      	ldr	r0, [r3, #0]
    1bde:	1828      	adds	r0, r5, r0

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    1be0:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <vTaskPlaceOnEventListRestricted+0x3c>)
    1be2:	4798      	blx	r3
	}
    1be4:	bd38      	pop	{r3, r4, r5, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	20003c1c 	.word	0x20003c1c
    1bec:	00000b61 	.word	0x00000b61
    1bf0:	00000ba9 	.word	0x00000ba9
    1bf4:	20003c38 	.word	0x20003c38
    1bf8:	000014ed 	.word	0x000014ed

00001bfc <xTaskRemoveFromEventList>:
>>>>>>> JJ's_Branch

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
    26d8:	b538      	push	{r3, r4, r5, lr}
=======
    1bfc:	b538      	push	{r3, r4, r5, lr}
>>>>>>> JJ's_Branch
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
<<<<<<< HEAD
    26da:	68c3      	ldr	r3, [r0, #12]
    26dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    26de:	2c00      	cmp	r4, #0
    26e0:	d101      	bne.n	26e6 <xTaskRemoveFromEventList+0xe>
    26e2:	b672      	cpsid	i
    26e4:	e7fe      	b.n	26e4 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    26e6:	1c25      	adds	r5, r4, #0
    26e8:	3518      	adds	r5, #24
    26ea:	1c28      	adds	r0, r5, #0
    26ec:	4b14      	ldr	r3, [pc, #80]	; (2740 <xTaskRemoveFromEventList+0x68>)
    26ee:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    26f0:	4b14      	ldr	r3, [pc, #80]	; (2744 <xTaskRemoveFromEventList+0x6c>)
    26f2:	681b      	ldr	r3, [r3, #0]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d113      	bne.n	2720 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    26f8:	1d25      	adds	r5, r4, #4
    26fa:	1c28      	adds	r0, r5, #0
    26fc:	4b10      	ldr	r3, [pc, #64]	; (2740 <xTaskRemoveFromEventList+0x68>)
    26fe:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2700:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2702:	4a11      	ldr	r2, [pc, #68]	; (2748 <xTaskRemoveFromEventList+0x70>)
    2704:	6812      	ldr	r2, [r2, #0]
    2706:	4293      	cmp	r3, r2
    2708:	d901      	bls.n	270e <xTaskRemoveFromEventList+0x36>
    270a:	4a0f      	ldr	r2, [pc, #60]	; (2748 <xTaskRemoveFromEventList+0x70>)
    270c:	6013      	str	r3, [r2, #0]
    270e:	009a      	lsls	r2, r3, #2
    2710:	18d3      	adds	r3, r2, r3
    2712:	009b      	lsls	r3, r3, #2
    2714:	480d      	ldr	r0, [pc, #52]	; (274c <xTaskRemoveFromEventList+0x74>)
    2716:	18c0      	adds	r0, r0, r3
    2718:	1c29      	adds	r1, r5, #0
    271a:	4b0d      	ldr	r3, [pc, #52]	; (2750 <xTaskRemoveFromEventList+0x78>)
    271c:	4798      	blx	r3
    271e:	e003      	b.n	2728 <xTaskRemoveFromEventList+0x50>
=======
    1bfe:	68c3      	ldr	r3, [r0, #12]
    1c00:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    1c02:	2c00      	cmp	r4, #0
    1c04:	d101      	bne.n	1c0a <xTaskRemoveFromEventList+0xe>
    1c06:	b672      	cpsid	i
    1c08:	e7fe      	b.n	1c08 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1c0a:	1c25      	adds	r5, r4, #0
    1c0c:	3518      	adds	r5, #24
    1c0e:	1c28      	adds	r0, r5, #0
    1c10:	4b14      	ldr	r3, [pc, #80]	; (1c64 <xTaskRemoveFromEventList+0x68>)
    1c12:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1c14:	4b14      	ldr	r3, [pc, #80]	; (1c68 <xTaskRemoveFromEventList+0x6c>)
    1c16:	681b      	ldr	r3, [r3, #0]
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d113      	bne.n	1c44 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1c1c:	1d25      	adds	r5, r4, #4
    1c1e:	1c28      	adds	r0, r5, #0
    1c20:	4b10      	ldr	r3, [pc, #64]	; (1c64 <xTaskRemoveFromEventList+0x68>)
    1c22:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    1c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1c26:	4a11      	ldr	r2, [pc, #68]	; (1c6c <xTaskRemoveFromEventList+0x70>)
    1c28:	6812      	ldr	r2, [r2, #0]
    1c2a:	4293      	cmp	r3, r2
    1c2c:	d901      	bls.n	1c32 <xTaskRemoveFromEventList+0x36>
    1c2e:	4a0f      	ldr	r2, [pc, #60]	; (1c6c <xTaskRemoveFromEventList+0x70>)
    1c30:	6013      	str	r3, [r2, #0]
    1c32:	009a      	lsls	r2, r3, #2
    1c34:	18d3      	adds	r3, r2, r3
    1c36:	009b      	lsls	r3, r3, #2
    1c38:	480d      	ldr	r0, [pc, #52]	; (1c70 <xTaskRemoveFromEventList+0x74>)
    1c3a:	18c0      	adds	r0, r0, r3
    1c3c:	1c29      	adds	r1, r5, #0
    1c3e:	4b0d      	ldr	r3, [pc, #52]	; (1c74 <xTaskRemoveFromEventList+0x78>)
    1c40:	4798      	blx	r3
    1c42:	e003      	b.n	1c4c <xTaskRemoveFromEventList+0x50>
>>>>>>> JJ's_Branch
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
    2720:	480c      	ldr	r0, [pc, #48]	; (2754 <xTaskRemoveFromEventList+0x7c>)
    2722:	1c29      	adds	r1, r5, #0
    2724:	4b0a      	ldr	r3, [pc, #40]	; (2750 <xTaskRemoveFromEventList+0x78>)
    2726:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2728:	4b0b      	ldr	r3, [pc, #44]	; (2758 <xTaskRemoveFromEventList+0x80>)
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
=======
    1c44:	480c      	ldr	r0, [pc, #48]	; (1c78 <xTaskRemoveFromEventList+0x7c>)
    1c46:	1c29      	adds	r1, r5, #0
    1c48:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <xTaskRemoveFromEventList+0x78>)
    1c4a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1c4c:	4b0b      	ldr	r3, [pc, #44]	; (1c7c <xTaskRemoveFromEventList+0x80>)
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
>>>>>>> JJ's_Branch
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
    2730:	2000      	movs	r0, #0
=======
    1c54:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
<<<<<<< HEAD
    2732:	429a      	cmp	r2, r3
    2734:	d903      	bls.n	273e <xTaskRemoveFromEventList+0x66>
=======
    1c56:	429a      	cmp	r2, r3
    1c58:	d903      	bls.n	1c62 <xTaskRemoveFromEventList+0x66>
>>>>>>> JJ's_Branch
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
    2736:	2201      	movs	r2, #1
    2738:	4b08      	ldr	r3, [pc, #32]	; (275c <xTaskRemoveFromEventList+0x84>)
    273a:	601a      	str	r2, [r3, #0]
=======
    1c5a:	2201      	movs	r2, #1
    1c5c:	4b08      	ldr	r3, [pc, #32]	; (1c80 <xTaskRemoveFromEventList+0x84>)
    1c5e:	601a      	str	r2, [r3, #0]
>>>>>>> JJ's_Branch
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
    273c:	2001      	movs	r0, #1
=======
    1c60:	2001      	movs	r0, #1
>>>>>>> JJ's_Branch
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
<<<<<<< HEAD
    273e:	bd38      	pop	{r3, r4, r5, pc}
    2740:	00001685 	.word	0x00001685
    2744:	20003c70 	.word	0x20003c70
    2748:	20003c98 	.word	0x20003c98
    274c:	20003be0 	.word	0x20003be0
    2750:	0000163d 	.word	0x0000163d
    2754:	20003c5c 	.word	0x20003c5c
    2758:	20003c58 	.word	0x20003c58
    275c:	20003c9c 	.word	0x20003c9c

00002760 <vTaskSetTimeOutState>:
=======
    1c62:	bd38      	pop	{r3, r4, r5, pc}
    1c64:	00000ba9 	.word	0x00000ba9
    1c68:	20003c34 	.word	0x20003c34
    1c6c:	20003c5c 	.word	0x20003c5c
    1c70:	20003ba4 	.word	0x20003ba4
    1c74:	00000b61 	.word	0x00000b61
    1c78:	20003c20 	.word	0x20003c20
    1c7c:	20003c1c 	.word	0x20003c1c
    1c80:	20003c60 	.word	0x20003c60

00001c84 <vTaskSetTimeOutState>:
>>>>>>> JJ's_Branch
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
<<<<<<< HEAD
    2760:	2800      	cmp	r0, #0
    2762:	d101      	bne.n	2768 <vTaskSetTimeOutState+0x8>
    2764:	b672      	cpsid	i
    2766:	e7fe      	b.n	2766 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2768:	4b03      	ldr	r3, [pc, #12]	; (2778 <vTaskSetTimeOutState+0x18>)
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    276e:	4b03      	ldr	r3, [pc, #12]	; (277c <vTaskSetTimeOutState+0x1c>)
    2770:	681b      	ldr	r3, [r3, #0]
    2772:	6043      	str	r3, [r0, #4]
}
    2774:	4770      	bx	lr
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	20003ba4 	.word	0x20003ba4
    277c:	20003c74 	.word	0x20003c74

00002780 <xTaskCheckForTimeOut>:
=======
    1c84:	2800      	cmp	r0, #0
    1c86:	d101      	bne.n	1c8c <vTaskSetTimeOutState+0x8>
    1c88:	b672      	cpsid	i
    1c8a:	e7fe      	b.n	1c8a <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1c8c:	4b03      	ldr	r3, [pc, #12]	; (1c9c <vTaskSetTimeOutState+0x18>)
    1c8e:	681b      	ldr	r3, [r3, #0]
    1c90:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1c92:	4b03      	ldr	r3, [pc, #12]	; (1ca0 <vTaskSetTimeOutState+0x1c>)
    1c94:	681b      	ldr	r3, [r3, #0]
    1c96:	6043      	str	r3, [r0, #4]
}
    1c98:	4770      	bx	lr
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	20003b68 	.word	0x20003b68
    1ca0:	20003c38 	.word	0x20003c38

00001ca4 <xTaskCheckForTimeOut>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
    2780:	b570      	push	{r4, r5, r6, lr}
    2782:	1c04      	adds	r4, r0, #0
    2784:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    2786:	2800      	cmp	r0, #0
    2788:	d101      	bne.n	278e <xTaskCheckForTimeOut+0xe>
    278a:	b672      	cpsid	i
    278c:	e7fe      	b.n	278c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    278e:	2900      	cmp	r1, #0
    2790:	d101      	bne.n	2796 <xTaskCheckForTimeOut+0x16>
    2792:	b672      	cpsid	i
    2794:	e7fe      	b.n	2794 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    2796:	4b11      	ldr	r3, [pc, #68]	; (27dc <xTaskCheckForTimeOut+0x5c>)
    2798:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    279a:	4b11      	ldr	r3, [pc, #68]	; (27e0 <xTaskCheckForTimeOut+0x60>)
    279c:	681a      	ldr	r2, [r3, #0]
=======
    1ca4:	b570      	push	{r4, r5, r6, lr}
    1ca6:	1c04      	adds	r4, r0, #0
    1ca8:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    1caa:	2800      	cmp	r0, #0
    1cac:	d101      	bne.n	1cb2 <xTaskCheckForTimeOut+0xe>
    1cae:	b672      	cpsid	i
    1cb0:	e7fe      	b.n	1cb0 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    1cb2:	2900      	cmp	r1, #0
    1cb4:	d101      	bne.n	1cba <xTaskCheckForTimeOut+0x16>
    1cb6:	b672      	cpsid	i
    1cb8:	e7fe      	b.n	1cb8 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    1cba:	4b11      	ldr	r3, [pc, #68]	; (1d00 <xTaskCheckForTimeOut+0x5c>)
    1cbc:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    1cbe:	4b11      	ldr	r3, [pc, #68]	; (1d04 <xTaskCheckForTimeOut+0x60>)
    1cc0:	681a      	ldr	r2, [r3, #0]
>>>>>>> JJ's_Branch

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
    279e:	6833      	ldr	r3, [r6, #0]
    27a0:	1c58      	adds	r0, r3, #1
    27a2:	d015      	beq.n	27d0 <xTaskCheckForTimeOut+0x50>
=======
    1cc2:	6833      	ldr	r3, [r6, #0]
    1cc4:	1c58      	adds	r0, r3, #1
    1cc6:	d015      	beq.n	1cf4 <xTaskCheckForTimeOut+0x50>
>>>>>>> JJ's_Branch
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
    27a4:	490f      	ldr	r1, [pc, #60]	; (27e4 <xTaskCheckForTimeOut+0x64>)
    27a6:	6809      	ldr	r1, [r1, #0]
    27a8:	6820      	ldr	r0, [r4, #0]
    27aa:	4288      	cmp	r0, r1
    27ac:	d003      	beq.n	27b6 <xTaskCheckForTimeOut+0x36>
=======
    1cc8:	490f      	ldr	r1, [pc, #60]	; (1d08 <xTaskCheckForTimeOut+0x64>)
    1cca:	6809      	ldr	r1, [r1, #0]
    1ccc:	6820      	ldr	r0, [r4, #0]
    1cce:	4288      	cmp	r0, r1
    1cd0:	d003      	beq.n	1cda <xTaskCheckForTimeOut+0x36>
>>>>>>> JJ's_Branch
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
    27ae:	2501      	movs	r5, #1
=======
    1cd2:	2501      	movs	r5, #1
>>>>>>> JJ's_Branch
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
    27b0:	6861      	ldr	r1, [r4, #4]
    27b2:	428a      	cmp	r2, r1
    27b4:	d20d      	bcs.n	27d2 <xTaskCheckForTimeOut+0x52>
=======
    1cd4:	6861      	ldr	r1, [r4, #4]
    1cd6:	428a      	cmp	r2, r1
    1cd8:	d20d      	bcs.n	1cf6 <xTaskCheckForTimeOut+0x52>
>>>>>>> JJ's_Branch
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
<<<<<<< HEAD
    27b6:	6861      	ldr	r1, [r4, #4]
    27b8:	1a50      	subs	r0, r2, r1
=======
    1cda:	6861      	ldr	r1, [r4, #4]
    1cdc:	1a50      	subs	r0, r2, r1
>>>>>>> JJ's_Branch
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
<<<<<<< HEAD
    27ba:	2501      	movs	r5, #1
=======
    1cde:	2501      	movs	r5, #1
>>>>>>> JJ's_Branch
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
<<<<<<< HEAD
    27bc:	4283      	cmp	r3, r0
    27be:	d908      	bls.n	27d2 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    27c0:	1a8a      	subs	r2, r1, r2
    27c2:	18d3      	adds	r3, r2, r3
    27c4:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    27c6:	1c20      	adds	r0, r4, #0
    27c8:	4b07      	ldr	r3, [pc, #28]	; (27e8 <xTaskCheckForTimeOut+0x68>)
    27ca:	4798      	blx	r3
			xReturn = pdFALSE;
    27cc:	2500      	movs	r5, #0
    27ce:	e000      	b.n	27d2 <xTaskCheckForTimeOut+0x52>
=======
    1ce0:	4283      	cmp	r3, r0
    1ce2:	d908      	bls.n	1cf6 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    1ce4:	1a8a      	subs	r2, r1, r2
    1ce6:	18d3      	adds	r3, r2, r3
    1ce8:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    1cea:	1c20      	adds	r0, r4, #0
    1cec:	4b07      	ldr	r3, [pc, #28]	; (1d0c <xTaskCheckForTimeOut+0x68>)
    1cee:	4798      	blx	r3
			xReturn = pdFALSE;
    1cf0:	2500      	movs	r5, #0
    1cf2:	e000      	b.n	1cf6 <xTaskCheckForTimeOut+0x52>
>>>>>>> JJ's_Branch
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
<<<<<<< HEAD
    27d0:	2500      	movs	r5, #0
=======
    1cf4:	2500      	movs	r5, #0
>>>>>>> JJ's_Branch
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
    27d2:	4b06      	ldr	r3, [pc, #24]	; (27ec <xTaskCheckForTimeOut+0x6c>)
    27d4:	4798      	blx	r3

	return xReturn;
}
    27d6:	1c28      	adds	r0, r5, #0
    27d8:	bd70      	pop	{r4, r5, r6, pc}
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	00001719 	.word	0x00001719
    27e0:	20003c74 	.word	0x20003c74
    27e4:	20003ba4 	.word	0x20003ba4
    27e8:	00002761 	.word	0x00002761
    27ec:	00001731 	.word	0x00001731

000027f0 <vTaskMissedYield>:
=======
    1cf6:	4b06      	ldr	r3, [pc, #24]	; (1d10 <xTaskCheckForTimeOut+0x6c>)
    1cf8:	4798      	blx	r3

	return xReturn;
}
    1cfa:	1c28      	adds	r0, r5, #0
    1cfc:	bd70      	pop	{r4, r5, r6, pc}
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	00000c3d 	.word	0x00000c3d
    1d04:	20003c38 	.word	0x20003c38
    1d08:	20003b68 	.word	0x20003b68
    1d0c:	00001c85 	.word	0x00001c85
    1d10:	00000c55 	.word	0x00000c55

00001d14 <vTaskMissedYield>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
<<<<<<< HEAD
    27f0:	2201      	movs	r2, #1
    27f2:	4b01      	ldr	r3, [pc, #4]	; (27f8 <vTaskMissedYield+0x8>)
    27f4:	601a      	str	r2, [r3, #0]
}
    27f6:	4770      	bx	lr
    27f8:	20003c9c 	.word	0x20003c9c

000027fc <xTaskGetCurrentTaskHandle>:
=======
    1d14:	2201      	movs	r2, #1
    1d16:	4b01      	ldr	r3, [pc, #4]	; (1d1c <vTaskMissedYield+0x8>)
    1d18:	601a      	str	r2, [r3, #0]
}
    1d1a:	4770      	bx	lr
    1d1c:	20003c60 	.word	0x20003c60

00001d20 <xTaskGetCurrentTaskHandle>:
>>>>>>> JJ's_Branch
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
<<<<<<< HEAD
    27fc:	4b01      	ldr	r3, [pc, #4]	; (2804 <xTaskGetCurrentTaskHandle+0x8>)
    27fe:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    2800:	4770      	bx	lr
    2802:	46c0      	nop			; (mov r8, r8)
    2804:	20003c58 	.word	0x20003c58

00002808 <xTaskGetSchedulerState>:
=======
    1d20:	4b01      	ldr	r3, [pc, #4]	; (1d28 <xTaskGetCurrentTaskHandle+0x8>)
    1d22:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    1d24:	4770      	bx	lr
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	20003c1c 	.word	0x20003c1c

00001d2c <xTaskGetSchedulerState>:
>>>>>>> JJ's_Branch

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
    2808:	4b05      	ldr	r3, [pc, #20]	; (2820 <xTaskGetSchedulerState+0x18>)
    280a:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    280c:	2001      	movs	r0, #1
=======
    1d2c:	4b05      	ldr	r3, [pc, #20]	; (1d44 <xTaskGetSchedulerState+0x18>)
    1d2e:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1d30:	2001      	movs	r0, #1
>>>>>>> JJ's_Branch

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
    280e:	2b00      	cmp	r3, #0
    2810:	d004      	beq.n	281c <xTaskGetSchedulerState+0x14>
=======
    1d32:	2b00      	cmp	r3, #0
    1d34:	d004      	beq.n	1d40 <xTaskGetSchedulerState+0x14>
>>>>>>> JJ's_Branch
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
    2812:	4b04      	ldr	r3, [pc, #16]	; (2824 <xTaskGetSchedulerState+0x1c>)
    2814:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
    2816:	4243      	negs	r3, r0
    2818:	4158      	adcs	r0, r3
    281a:	0040      	lsls	r0, r0, #1
=======
    1d36:	4b04      	ldr	r3, [pc, #16]	; (1d48 <xTaskGetSchedulerState+0x1c>)
    1d38:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
    1d3a:	4243      	negs	r3, r0
    1d3c:	4158      	adcs	r0, r3
    1d3e:	0040      	lsls	r0, r0, #1
>>>>>>> JJ's_Branch
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
<<<<<<< HEAD
    281c:	4770      	bx	lr
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	20003bac 	.word	0x20003bac
    2824:	20003c70 	.word	0x20003c70

00002828 <vTaskPriorityInherit>:
=======
    1d40:	4770      	bx	lr
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	20003b70 	.word	0x20003b70
    1d48:	20003c34 	.word	0x20003c34

00001d4c <vTaskPriorityInherit>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
    2828:	b538      	push	{r3, r4, r5, lr}
    282a:	1e04      	subs	r4, r0, #0
=======
    1d4c:	b538      	push	{r3, r4, r5, lr}
    1d4e:	1e04      	subs	r4, r0, #0
>>>>>>> JJ's_Branch
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
<<<<<<< HEAD
    282c:	d031      	beq.n	2892 <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    282e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2830:	4a18      	ldr	r2, [pc, #96]	; (2894 <vTaskPriorityInherit+0x6c>)
    2832:	6812      	ldr	r2, [r2, #0]
    2834:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2836:	4293      	cmp	r3, r2
    2838:	d22b      	bcs.n	2892 <vTaskPriorityInherit+0x6a>
=======
    1d50:	d031      	beq.n	1db6 <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1d52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1d54:	4a18      	ldr	r2, [pc, #96]	; (1db8 <vTaskPriorityInherit+0x6c>)
    1d56:	6812      	ldr	r2, [r2, #0]
    1d58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1d5a:	4293      	cmp	r3, r2
    1d5c:	d22b      	bcs.n	1db6 <vTaskPriorityInherit+0x6a>
>>>>>>> JJ's_Branch
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
    283a:	6982      	ldr	r2, [r0, #24]
    283c:	2a00      	cmp	r2, #0
    283e:	db05      	blt.n	284c <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2840:	4a14      	ldr	r2, [pc, #80]	; (2894 <vTaskPriorityInherit+0x6c>)
    2842:	6812      	ldr	r2, [r2, #0]
    2844:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2846:	2105      	movs	r1, #5
    2848:	1a8a      	subs	r2, r1, r2
    284a:	6182      	str	r2, [r0, #24]
=======
    1d5e:	6982      	ldr	r2, [r0, #24]
    1d60:	2a00      	cmp	r2, #0
    1d62:	db05      	blt.n	1d70 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d64:	4a14      	ldr	r2, [pc, #80]	; (1db8 <vTaskPriorityInherit+0x6c>)
    1d66:	6812      	ldr	r2, [r2, #0]
    1d68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1d6a:	2105      	movs	r1, #5
    1d6c:	1a8a      	subs	r2, r1, r2
    1d6e:	6182      	str	r2, [r0, #24]
>>>>>>> JJ's_Branch
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
<<<<<<< HEAD
    284c:	009a      	lsls	r2, r3, #2
    284e:	18d3      	adds	r3, r2, r3
    2850:	009b      	lsls	r3, r3, #2
    2852:	4a11      	ldr	r2, [pc, #68]	; (2898 <vTaskPriorityInherit+0x70>)
    2854:	18d3      	adds	r3, r2, r3
    2856:	6962      	ldr	r2, [r4, #20]
    2858:	429a      	cmp	r2, r3
    285a:	d116      	bne.n	288a <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    285c:	1d25      	adds	r5, r4, #4
    285e:	1c28      	adds	r0, r5, #0
    2860:	4b0e      	ldr	r3, [pc, #56]	; (289c <vTaskPriorityInherit+0x74>)
    2862:	4798      	blx	r3
=======
    1d70:	009a      	lsls	r2, r3, #2
    1d72:	18d3      	adds	r3, r2, r3
    1d74:	009b      	lsls	r3, r3, #2
    1d76:	4a11      	ldr	r2, [pc, #68]	; (1dbc <vTaskPriorityInherit+0x70>)
    1d78:	18d3      	adds	r3, r2, r3
    1d7a:	6962      	ldr	r2, [r4, #20]
    1d7c:	429a      	cmp	r2, r3
    1d7e:	d116      	bne.n	1dae <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1d80:	1d25      	adds	r5, r4, #4
    1d82:	1c28      	adds	r0, r5, #0
    1d84:	4b0e      	ldr	r3, [pc, #56]	; (1dc0 <vTaskPriorityInherit+0x74>)
    1d86:	4798      	blx	r3
>>>>>>> JJ's_Branch
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
    2864:	4b0b      	ldr	r3, [pc, #44]	; (2894 <vTaskPriorityInherit+0x6c>)
    2866:	681b      	ldr	r3, [r3, #0]
    2868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    286a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    286c:	4a0c      	ldr	r2, [pc, #48]	; (28a0 <vTaskPriorityInherit+0x78>)
    286e:	6812      	ldr	r2, [r2, #0]
    2870:	4293      	cmp	r3, r2
    2872:	d901      	bls.n	2878 <vTaskPriorityInherit+0x50>
    2874:	4a0a      	ldr	r2, [pc, #40]	; (28a0 <vTaskPriorityInherit+0x78>)
    2876:	6013      	str	r3, [r2, #0]
    2878:	0098      	lsls	r0, r3, #2
    287a:	18c3      	adds	r3, r0, r3
    287c:	009b      	lsls	r3, r3, #2
    287e:	4806      	ldr	r0, [pc, #24]	; (2898 <vTaskPriorityInherit+0x70>)
    2880:	18c0      	adds	r0, r0, r3
    2882:	1c29      	adds	r1, r5, #0
    2884:	4b07      	ldr	r3, [pc, #28]	; (28a4 <vTaskPriorityInherit+0x7c>)
    2886:	4798      	blx	r3
    2888:	e003      	b.n	2892 <vTaskPriorityInherit+0x6a>
=======
    1d88:	4b0b      	ldr	r3, [pc, #44]	; (1db8 <vTaskPriorityInherit+0x6c>)
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d8e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    1d90:	4a0c      	ldr	r2, [pc, #48]	; (1dc4 <vTaskPriorityInherit+0x78>)
    1d92:	6812      	ldr	r2, [r2, #0]
    1d94:	4293      	cmp	r3, r2
    1d96:	d901      	bls.n	1d9c <vTaskPriorityInherit+0x50>
    1d98:	4a0a      	ldr	r2, [pc, #40]	; (1dc4 <vTaskPriorityInherit+0x78>)
    1d9a:	6013      	str	r3, [r2, #0]
    1d9c:	0098      	lsls	r0, r3, #2
    1d9e:	18c3      	adds	r3, r0, r3
    1da0:	009b      	lsls	r3, r3, #2
    1da2:	4806      	ldr	r0, [pc, #24]	; (1dbc <vTaskPriorityInherit+0x70>)
    1da4:	18c0      	adds	r0, r0, r3
    1da6:	1c29      	adds	r1, r5, #0
    1da8:	4b07      	ldr	r3, [pc, #28]	; (1dc8 <vTaskPriorityInherit+0x7c>)
    1daa:	4798      	blx	r3
    1dac:	e003      	b.n	1db6 <vTaskPriorityInherit+0x6a>
>>>>>>> JJ's_Branch
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
<<<<<<< HEAD
    288a:	4b02      	ldr	r3, [pc, #8]	; (2894 <vTaskPriorityInherit+0x6c>)
    288c:	681b      	ldr	r3, [r3, #0]
    288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2890:	62e3      	str	r3, [r4, #44]	; 0x2c
=======
    1dae:	4b02      	ldr	r3, [pc, #8]	; (1db8 <vTaskPriorityInherit+0x6c>)
    1db0:	681b      	ldr	r3, [r3, #0]
    1db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1db4:	62e3      	str	r3, [r4, #44]	; 0x2c
>>>>>>> JJ's_Branch
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
    2892:	bd38      	pop	{r3, r4, r5, pc}
    2894:	20003c58 	.word	0x20003c58
    2898:	20003be0 	.word	0x20003be0
    289c:	00001685 	.word	0x00001685
    28a0:	20003c98 	.word	0x20003c98
    28a4:	0000163d 	.word	0x0000163d

000028a8 <vTaskPriorityDisinherit>:
=======
    1db6:	bd38      	pop	{r3, r4, r5, pc}
    1db8:	20003c1c 	.word	0x20003c1c
    1dbc:	20003ba4 	.word	0x20003ba4
    1dc0:	00000ba9 	.word	0x00000ba9
    1dc4:	20003c5c 	.word	0x20003c5c
    1dc8:	00000b61 	.word	0x00000b61

00001dcc <vTaskPriorityDisinherit>:
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
    28a8:	b538      	push	{r3, r4, r5, lr}
    28aa:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    28ac:	d01d      	beq.n	28ea <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    28ae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    28b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    28b2:	429a      	cmp	r2, r3
    28b4:	d019      	beq.n	28ea <vTaskPriorityDisinherit+0x42>
=======
    1dcc:	b538      	push	{r3, r4, r5, lr}
    1dce:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1dd0:	d01d      	beq.n	1e0e <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1dd2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1dd4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1dd6:	429a      	cmp	r2, r3
    1dd8:	d019      	beq.n	1e0e <vTaskPriorityDisinherit+0x42>
>>>>>>> JJ's_Branch
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
    28b6:	1d05      	adds	r5, r0, #4
    28b8:	1c28      	adds	r0, r5, #0
    28ba:	4b0c      	ldr	r3, [pc, #48]	; (28ec <vTaskPriorityDisinherit+0x44>)
    28bc:	4798      	blx	r3
=======
    1dda:	1d05      	adds	r5, r0, #4
    1ddc:	1c28      	adds	r0, r5, #0
    1dde:	4b0c      	ldr	r3, [pc, #48]	; (1e10 <vTaskPriorityDisinherit+0x44>)
    1de0:	4798      	blx	r3
>>>>>>> JJ's_Branch
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
    28be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    28c0:	62e3      	str	r3, [r4, #44]	; 0x2c
=======
    1de2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1de4:	62e3      	str	r3, [r4, #44]	; 0x2c
>>>>>>> JJ's_Branch

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
<<<<<<< HEAD
    28c2:	69a2      	ldr	r2, [r4, #24]
    28c4:	2a00      	cmp	r2, #0
    28c6:	db02      	blt.n	28ce <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    28c8:	2205      	movs	r2, #5
    28ca:	1ad2      	subs	r2, r2, r3
    28cc:	61a2      	str	r2, [r4, #24]
=======
    1de6:	69a2      	ldr	r2, [r4, #24]
    1de8:	2a00      	cmp	r2, #0
    1dea:	db02      	blt.n	1df2 <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1dec:	2205      	movs	r2, #5
    1dee:	1ad2      	subs	r2, r2, r3
    1df0:	61a2      	str	r2, [r4, #24]
>>>>>>> JJ's_Branch
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
    28ce:	4a08      	ldr	r2, [pc, #32]	; (28f0 <vTaskPriorityDisinherit+0x48>)
    28d0:	6812      	ldr	r2, [r2, #0]
    28d2:	4293      	cmp	r3, r2
    28d4:	d901      	bls.n	28da <vTaskPriorityDisinherit+0x32>
    28d6:	4a06      	ldr	r2, [pc, #24]	; (28f0 <vTaskPriorityDisinherit+0x48>)
    28d8:	6013      	str	r3, [r2, #0]
    28da:	0098      	lsls	r0, r3, #2
    28dc:	18c3      	adds	r3, r0, r3
    28de:	009b      	lsls	r3, r3, #2
    28e0:	4804      	ldr	r0, [pc, #16]	; (28f4 <vTaskPriorityDisinherit+0x4c>)
    28e2:	18c0      	adds	r0, r0, r3
    28e4:	1c29      	adds	r1, r5, #0
    28e6:	4b04      	ldr	r3, [pc, #16]	; (28f8 <vTaskPriorityDisinherit+0x50>)
    28e8:	4798      	blx	r3
=======
    1df2:	4a08      	ldr	r2, [pc, #32]	; (1e14 <vTaskPriorityDisinherit+0x48>)
    1df4:	6812      	ldr	r2, [r2, #0]
    1df6:	4293      	cmp	r3, r2
    1df8:	d901      	bls.n	1dfe <vTaskPriorityDisinherit+0x32>
    1dfa:	4a06      	ldr	r2, [pc, #24]	; (1e14 <vTaskPriorityDisinherit+0x48>)
    1dfc:	6013      	str	r3, [r2, #0]
    1dfe:	0098      	lsls	r0, r3, #2
    1e00:	18c3      	adds	r3, r0, r3
    1e02:	009b      	lsls	r3, r3, #2
    1e04:	4804      	ldr	r0, [pc, #16]	; (1e18 <vTaskPriorityDisinherit+0x4c>)
    1e06:	18c0      	adds	r0, r0, r3
    1e08:	1c29      	adds	r1, r5, #0
    1e0a:	4b04      	ldr	r3, [pc, #16]	; (1e1c <vTaskPriorityDisinherit+0x50>)
    1e0c:	4798      	blx	r3
>>>>>>> JJ's_Branch
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
    28ea:	bd38      	pop	{r3, r4, r5, pc}
    28ec:	00001685 	.word	0x00001685
    28f0:	20003c98 	.word	0x20003c98
    28f4:	20003be0 	.word	0x20003be0
    28f8:	0000163d 	.word	0x0000163d

000028fc <prvInsertTimerInActiveList>:
=======
    1e0e:	bd38      	pop	{r3, r4, r5, pc}
    1e10:	00000ba9 	.word	0x00000ba9
    1e14:	20003c5c 	.word	0x20003c5c
    1e18:	20003ba4 	.word	0x20003ba4
    1e1c:	00000b61 	.word	0x00000b61

00001e20 <prvInsertTimerInActiveList>:
>>>>>>> JJ's_Branch
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
    28fc:	b510      	push	{r4, lr}
    28fe:	1c04      	adds	r4, r0, #0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2900:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2902:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    2904:	4291      	cmp	r1, r2
    2906:	d80b      	bhi.n	2920 <prvInsertTimerInActiveList+0x24>
=======
    1e20:	b510      	push	{r4, lr}
    1e22:	1c04      	adds	r4, r0, #0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1e24:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1e26:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    1e28:	4291      	cmp	r1, r2
    1e2a:	d80b      	bhi.n	1e44 <prvInsertTimerInActiveList+0x24>
>>>>>>> JJ's_Branch
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
<<<<<<< HEAD
    2908:	1ad2      	subs	r2, r2, r3
=======
    1e2c:	1ad2      	subs	r2, r2, r3
>>>>>>> JJ's_Branch
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
    290a:	2001      	movs	r0, #1
=======
    1e2e:	2001      	movs	r0, #1
>>>>>>> JJ's_Branch

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
<<<<<<< HEAD
    290c:	69a3      	ldr	r3, [r4, #24]
    290e:	429a      	cmp	r2, r3
    2910:	d211      	bcs.n	2936 <prvInsertTimerInActiveList+0x3a>
=======
    1e30:	69a3      	ldr	r3, [r4, #24]
    1e32:	429a      	cmp	r2, r3
    1e34:	d211      	bcs.n	1e5a <prvInsertTimerInActiveList+0x3a>
>>>>>>> JJ's_Branch
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
    2912:	4b09      	ldr	r3, [pc, #36]	; (2938 <prvInsertTimerInActiveList+0x3c>)
    2914:	6818      	ldr	r0, [r3, #0]
    2916:	1d21      	adds	r1, r4, #4
    2918:	4b08      	ldr	r3, [pc, #32]	; (293c <prvInsertTimerInActiveList+0x40>)
    291a:	4798      	blx	r3
=======
    1e36:	4b09      	ldr	r3, [pc, #36]	; (1e5c <prvInsertTimerInActiveList+0x3c>)
    1e38:	6818      	ldr	r0, [r3, #0]
    1e3a:	1d21      	adds	r1, r4, #4
    1e3c:	4b08      	ldr	r3, [pc, #32]	; (1e60 <prvInsertTimerInActiveList+0x40>)
    1e3e:	4798      	blx	r3
>>>>>>> JJ's_Branch
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
<<<<<<< HEAD
    291c:	2000      	movs	r0, #0
    291e:	e00a      	b.n	2936 <prvInsertTimerInActiveList+0x3a>
=======
    1e40:	2000      	movs	r0, #0
    1e42:	e00a      	b.n	1e5a <prvInsertTimerInActiveList+0x3a>
>>>>>>> JJ's_Branch
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
    2920:	429a      	cmp	r2, r3
    2922:	d202      	bcs.n	292a <prvInsertTimerInActiveList+0x2e>
=======
    1e44:	429a      	cmp	r2, r3
    1e46:	d202      	bcs.n	1e4e <prvInsertTimerInActiveList+0x2e>
>>>>>>> JJ's_Branch
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
    2924:	2001      	movs	r0, #1
=======
    1e48:	2001      	movs	r0, #1
>>>>>>> JJ's_Branch
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
    2926:	4299      	cmp	r1, r3
    2928:	d205      	bcs.n	2936 <prvInsertTimerInActiveList+0x3a>
=======
    1e4a:	4299      	cmp	r1, r3
    1e4c:	d205      	bcs.n	1e5a <prvInsertTimerInActiveList+0x3a>
>>>>>>> JJ's_Branch
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
    292a:	4b05      	ldr	r3, [pc, #20]	; (2940 <prvInsertTimerInActiveList+0x44>)
    292c:	6818      	ldr	r0, [r3, #0]
    292e:	1d21      	adds	r1, r4, #4
    2930:	4b02      	ldr	r3, [pc, #8]	; (293c <prvInsertTimerInActiveList+0x40>)
    2932:	4798      	blx	r3
=======
    1e4e:	4b05      	ldr	r3, [pc, #20]	; (1e64 <prvInsertTimerInActiveList+0x44>)
    1e50:	6818      	ldr	r0, [r3, #0]
    1e52:	1d21      	adds	r1, r4, #4
    1e54:	4b02      	ldr	r3, [pc, #8]	; (1e60 <prvInsertTimerInActiveList+0x40>)
    1e56:	4798      	blx	r3
>>>>>>> JJ's_Branch
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
<<<<<<< HEAD
    2934:	2000      	movs	r0, #0
=======
    1e58:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
<<<<<<< HEAD
    2936:	bd10      	pop	{r4, pc}
    2938:	20003cd4 	.word	0x20003cd4
    293c:	00001655 	.word	0x00001655
    2940:	20003ca0 	.word	0x20003ca0

00002944 <prvCheckForValidListAndQueue>:
=======
    1e5a:	bd10      	pop	{r4, pc}
    1e5c:	20003c98 	.word	0x20003c98
    1e60:	00000b79 	.word	0x00000b79
    1e64:	20003c64 	.word	0x20003c64

00001e68 <prvCheckForValidListAndQueue>:
>>>>>>> JJ's_Branch
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
    2944:	b570      	push	{r4, r5, r6, lr}
=======
    1e68:	b570      	push	{r4, r5, r6, lr}
>>>>>>> JJ's_Branch
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
    2946:	4b10      	ldr	r3, [pc, #64]	; (2988 <prvCheckForValidListAndQueue+0x44>)
    2948:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    294a:	4b10      	ldr	r3, [pc, #64]	; (298c <prvCheckForValidListAndQueue+0x48>)
    294c:	681b      	ldr	r3, [r3, #0]
    294e:	2b00      	cmp	r3, #0
    2950:	d116      	bne.n	2980 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    2952:	4d0f      	ldr	r5, [pc, #60]	; (2990 <prvCheckForValidListAndQueue+0x4c>)
    2954:	1c28      	adds	r0, r5, #0
    2956:	4e0f      	ldr	r6, [pc, #60]	; (2994 <prvCheckForValidListAndQueue+0x50>)
    2958:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    295a:	4c0f      	ldr	r4, [pc, #60]	; (2998 <prvCheckForValidListAndQueue+0x54>)
    295c:	1c20      	adds	r0, r4, #0
    295e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    2960:	4b0e      	ldr	r3, [pc, #56]	; (299c <prvCheckForValidListAndQueue+0x58>)
    2962:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    2964:	4b0e      	ldr	r3, [pc, #56]	; (29a0 <prvCheckForValidListAndQueue+0x5c>)
    2966:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2968:	2002      	movs	r0, #2
    296a:	210c      	movs	r1, #12
    296c:	2200      	movs	r2, #0
    296e:	4b0d      	ldr	r3, [pc, #52]	; (29a4 <prvCheckForValidListAndQueue+0x60>)
    2970:	4798      	blx	r3
			configASSERT( xTimerQueue );
    2972:	2800      	cmp	r0, #0
    2974:	d002      	beq.n	297c <prvCheckForValidListAndQueue+0x38>
=======
    1e6a:	4b10      	ldr	r3, [pc, #64]	; (1eac <prvCheckForValidListAndQueue+0x44>)
    1e6c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    1e6e:	4b10      	ldr	r3, [pc, #64]	; (1eb0 <prvCheckForValidListAndQueue+0x48>)
    1e70:	681b      	ldr	r3, [r3, #0]
    1e72:	2b00      	cmp	r3, #0
    1e74:	d116      	bne.n	1ea4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    1e76:	4d0f      	ldr	r5, [pc, #60]	; (1eb4 <prvCheckForValidListAndQueue+0x4c>)
    1e78:	1c28      	adds	r0, r5, #0
    1e7a:	4e0f      	ldr	r6, [pc, #60]	; (1eb8 <prvCheckForValidListAndQueue+0x50>)
    1e7c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    1e7e:	4c0f      	ldr	r4, [pc, #60]	; (1ebc <prvCheckForValidListAndQueue+0x54>)
    1e80:	1c20      	adds	r0, r4, #0
    1e82:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    1e84:	4b0e      	ldr	r3, [pc, #56]	; (1ec0 <prvCheckForValidListAndQueue+0x58>)
    1e86:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    1e88:	4b0e      	ldr	r3, [pc, #56]	; (1ec4 <prvCheckForValidListAndQueue+0x5c>)
    1e8a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1e8c:	2002      	movs	r0, #2
    1e8e:	210c      	movs	r1, #12
    1e90:	2200      	movs	r2, #0
    1e92:	4b0d      	ldr	r3, [pc, #52]	; (1ec8 <prvCheckForValidListAndQueue+0x60>)
    1e94:	4798      	blx	r3
			configASSERT( xTimerQueue );
    1e96:	2800      	cmp	r0, #0
    1e98:	d002      	beq.n	1ea0 <prvCheckForValidListAndQueue+0x38>
>>>>>>> JJ's_Branch
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
<<<<<<< HEAD
    2976:	4b05      	ldr	r3, [pc, #20]	; (298c <prvCheckForValidListAndQueue+0x48>)
    2978:	6018      	str	r0, [r3, #0]
    297a:	e001      	b.n	2980 <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    297c:	b672      	cpsid	i
    297e:	e7fe      	b.n	297e <prvCheckForValidListAndQueue+0x3a>
=======
    1e9a:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <prvCheckForValidListAndQueue+0x48>)
    1e9c:	6018      	str	r0, [r3, #0]
    1e9e:	e001      	b.n	1ea4 <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    1ea0:	b672      	cpsid	i
    1ea2:	e7fe      	b.n	1ea2 <prvCheckForValidListAndQueue+0x3a>
>>>>>>> JJ's_Branch
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
    2980:	4b09      	ldr	r3, [pc, #36]	; (29a8 <prvCheckForValidListAndQueue+0x64>)
    2982:	4798      	blx	r3
}
    2984:	bd70      	pop	{r4, r5, r6, pc}
    2986:	46c0      	nop			; (mov r8, r8)
    2988:	00001719 	.word	0x00001719
    298c:	20003cd0 	.word	0x20003cd0
    2990:	20003ca4 	.word	0x20003ca4
    2994:	0000161d 	.word	0x0000161d
    2998:	20003cb8 	.word	0x20003cb8
    299c:	20003ca0 	.word	0x20003ca0
    29a0:	20003cd4 	.word	0x20003cd4
    29a4:	00001ad5 	.word	0x00001ad5
    29a8:	00001731 	.word	0x00001731

000029ac <xTimerCreateTimerTask>:
=======
    1ea4:	4b09      	ldr	r3, [pc, #36]	; (1ecc <prvCheckForValidListAndQueue+0x64>)
    1ea6:	4798      	blx	r3
}
    1ea8:	bd70      	pop	{r4, r5, r6, pc}
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	00000c3d 	.word	0x00000c3d
    1eb0:	20003c94 	.word	0x20003c94
    1eb4:	20003c68 	.word	0x20003c68
    1eb8:	00000b41 	.word	0x00000b41
    1ebc:	20003c7c 	.word	0x20003c7c
    1ec0:	20003c64 	.word	0x20003c64
    1ec4:	20003c98 	.word	0x20003c98
    1ec8:	00000ff9 	.word	0x00000ff9
    1ecc:	00000c55 	.word	0x00000c55

00001ed0 <xTimerCreateTimerTask>:
>>>>>>> JJ's_Branch
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
    29ac:	b510      	push	{r4, lr}
    29ae:	b084      	sub	sp, #16
=======
    1ed0:	b510      	push	{r4, lr}
    1ed2:	b084      	sub	sp, #16
>>>>>>> JJ's_Branch

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
    29b0:	4b0b      	ldr	r3, [pc, #44]	; (29e0 <xTimerCreateTimerTask+0x34>)
    29b2:	4798      	blx	r3

	if( xTimerQueue != NULL )
    29b4:	4b0b      	ldr	r3, [pc, #44]	; (29e4 <xTimerCreateTimerTask+0x38>)
    29b6:	681b      	ldr	r3, [r3, #0]
    29b8:	2b00      	cmp	r3, #0
    29ba:	d00c      	beq.n	29d6 <xTimerCreateTimerTask+0x2a>
=======
    1ed4:	4b0b      	ldr	r3, [pc, #44]	; (1f04 <xTimerCreateTimerTask+0x34>)
    1ed6:	4798      	blx	r3

	if( xTimerQueue != NULL )
    1ed8:	4b0b      	ldr	r3, [pc, #44]	; (1f08 <xTimerCreateTimerTask+0x38>)
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d00c      	beq.n	1efa <xTimerCreateTimerTask+0x2a>
>>>>>>> JJ's_Branch
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
<<<<<<< HEAD
    29bc:	2302      	movs	r3, #2
    29be:	9300      	str	r3, [sp, #0]
    29c0:	2300      	movs	r3, #0
    29c2:	9301      	str	r3, [sp, #4]
    29c4:	9302      	str	r3, [sp, #8]
    29c6:	9303      	str	r3, [sp, #12]
    29c8:	4807      	ldr	r0, [pc, #28]	; (29e8 <xTimerCreateTimerTask+0x3c>)
    29ca:	4908      	ldr	r1, [pc, #32]	; (29ec <xTimerCreateTimerTask+0x40>)
    29cc:	2250      	movs	r2, #80	; 0x50
    29ce:	4c08      	ldr	r4, [pc, #32]	; (29f0 <xTimerCreateTimerTask+0x44>)
    29d0:	47a0      	blx	r4
=======
    1ee0:	2302      	movs	r3, #2
    1ee2:	9300      	str	r3, [sp, #0]
    1ee4:	2300      	movs	r3, #0
    1ee6:	9301      	str	r3, [sp, #4]
    1ee8:	9302      	str	r3, [sp, #8]
    1eea:	9303      	str	r3, [sp, #12]
    1eec:	4807      	ldr	r0, [pc, #28]	; (1f0c <xTimerCreateTimerTask+0x3c>)
    1eee:	4908      	ldr	r1, [pc, #32]	; (1f10 <xTimerCreateTimerTask+0x40>)
    1ef0:	2250      	movs	r2, #80	; 0x50
    1ef2:	4c08      	ldr	r4, [pc, #32]	; (1f14 <xTimerCreateTimerTask+0x44>)
    1ef4:	47a0      	blx	r4
>>>>>>> JJ's_Branch
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
    29d2:	2800      	cmp	r0, #0
    29d4:	d101      	bne.n	29da <xTimerCreateTimerTask+0x2e>
    29d6:	b672      	cpsid	i
    29d8:	e7fe      	b.n	29d8 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
    29da:	b004      	add	sp, #16
    29dc:	bd10      	pop	{r4, pc}
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	00002945 	.word	0x00002945
    29e4:	20003cd0 	.word	0x20003cd0
    29e8:	00002b15 	.word	0x00002b15
    29ec:	00003ee8 	.word	0x00003ee8
    29f0:	00002021 	.word	0x00002021

000029f4 <xTimerGenericCommand>:
=======
    1ef6:	2800      	cmp	r0, #0
    1ef8:	d101      	bne.n	1efe <xTimerCreateTimerTask+0x2e>
    1efa:	b672      	cpsid	i
    1efc:	e7fe      	b.n	1efc <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
    1efe:	b004      	add	sp, #16
    1f00:	bd10      	pop	{r4, pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	00001e69 	.word	0x00001e69
    1f08:	20003c94 	.word	0x20003c94
    1f0c:	00002039 	.word	0x00002039
    1f10:	00003270 	.word	0x00003270
    1f14:	00001545 	.word	0x00001545

00001f18 <xTimerGenericCommand>:
>>>>>>> JJ's_Branch
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
    29f4:	b510      	push	{r4, lr}
    29f6:	b084      	sub	sp, #16
=======
    1f18:	b510      	push	{r4, lr}
    1f1a:	b084      	sub	sp, #16
>>>>>>> JJ's_Branch
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
    29f8:	4c13      	ldr	r4, [pc, #76]	; (2a48 <xTimerGenericCommand+0x54>)
    29fa:	6824      	ldr	r4, [r4, #0]
    29fc:	2c00      	cmp	r4, #0
    29fe:	d01f      	beq.n	2a40 <xTimerGenericCommand+0x4c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2a00:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a02:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2a04:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a06:	2905      	cmp	r1, #5
    2a08:	dc13      	bgt.n	2a32 <xTimerGenericCommand+0x3e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2a0a:	4b10      	ldr	r3, [pc, #64]	; (2a4c <xTimerGenericCommand+0x58>)
    2a0c:	4798      	blx	r3
    2a0e:	2802      	cmp	r0, #2
    2a10:	d107      	bne.n	2a22 <xTimerGenericCommand+0x2e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2a12:	4b0d      	ldr	r3, [pc, #52]	; (2a48 <xTimerGenericCommand+0x54>)
    2a14:	6818      	ldr	r0, [r3, #0]
    2a16:	a901      	add	r1, sp, #4
    2a18:	9a06      	ldr	r2, [sp, #24]
    2a1a:	2300      	movs	r3, #0
    2a1c:	4c0c      	ldr	r4, [pc, #48]	; (2a50 <xTimerGenericCommand+0x5c>)
    2a1e:	47a0      	blx	r4
    2a20:	e00f      	b.n	2a42 <xTimerGenericCommand+0x4e>
=======
    1f1c:	4c13      	ldr	r4, [pc, #76]	; (1f6c <xTimerGenericCommand+0x54>)
    1f1e:	6824      	ldr	r4, [r4, #0]
    1f20:	2c00      	cmp	r4, #0
    1f22:	d01f      	beq.n	1f64 <xTimerGenericCommand+0x4c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    1f24:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1f26:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    1f28:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1f2a:	2905      	cmp	r1, #5
    1f2c:	dc13      	bgt.n	1f56 <xTimerGenericCommand+0x3e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1f2e:	4b10      	ldr	r3, [pc, #64]	; (1f70 <xTimerGenericCommand+0x58>)
    1f30:	4798      	blx	r3
    1f32:	2802      	cmp	r0, #2
    1f34:	d107      	bne.n	1f46 <xTimerGenericCommand+0x2e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1f36:	4b0d      	ldr	r3, [pc, #52]	; (1f6c <xTimerGenericCommand+0x54>)
    1f38:	6818      	ldr	r0, [r3, #0]
    1f3a:	a901      	add	r1, sp, #4
    1f3c:	9a06      	ldr	r2, [sp, #24]
    1f3e:	2300      	movs	r3, #0
    1f40:	4c0c      	ldr	r4, [pc, #48]	; (1f74 <xTimerGenericCommand+0x5c>)
    1f42:	47a0      	blx	r4
    1f44:	e00f      	b.n	1f66 <xTimerGenericCommand+0x4e>
>>>>>>> JJ's_Branch
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
    2a22:	4b09      	ldr	r3, [pc, #36]	; (2a48 <xTimerGenericCommand+0x54>)
    2a24:	6818      	ldr	r0, [r3, #0]
    2a26:	a901      	add	r1, sp, #4
    2a28:	2200      	movs	r2, #0
    2a2a:	2300      	movs	r3, #0
    2a2c:	4c08      	ldr	r4, [pc, #32]	; (2a50 <xTimerGenericCommand+0x5c>)
    2a2e:	47a0      	blx	r4
    2a30:	e007      	b.n	2a42 <xTimerGenericCommand+0x4e>
=======
    1f46:	4b09      	ldr	r3, [pc, #36]	; (1f6c <xTimerGenericCommand+0x54>)
    1f48:	6818      	ldr	r0, [r3, #0]
    1f4a:	a901      	add	r1, sp, #4
    1f4c:	2200      	movs	r2, #0
    1f4e:	2300      	movs	r3, #0
    1f50:	4c08      	ldr	r4, [pc, #32]	; (1f74 <xTimerGenericCommand+0x5c>)
    1f52:	47a0      	blx	r4
    1f54:	e007      	b.n	1f66 <xTimerGenericCommand+0x4e>
>>>>>>> JJ's_Branch
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
    2a32:	1c20      	adds	r0, r4, #0
    2a34:	a901      	add	r1, sp, #4
    2a36:	1c1a      	adds	r2, r3, #0
    2a38:	2300      	movs	r3, #0
    2a3a:	4c06      	ldr	r4, [pc, #24]	; (2a54 <xTimerGenericCommand+0x60>)
    2a3c:	47a0      	blx	r4
    2a3e:	e000      	b.n	2a42 <xTimerGenericCommand+0x4e>
=======
    1f56:	1c20      	adds	r0, r4, #0
    1f58:	a901      	add	r1, sp, #4
    1f5a:	1c1a      	adds	r2, r3, #0
    1f5c:	2300      	movs	r3, #0
    1f5e:	4c06      	ldr	r4, [pc, #24]	; (1f78 <xTimerGenericCommand+0x60>)
    1f60:	47a0      	blx	r4
    1f62:	e000      	b.n	1f66 <xTimerGenericCommand+0x4e>
>>>>>>> JJ's_Branch
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
<<<<<<< HEAD
    2a40:	2000      	movs	r0, #0
=======
    1f64:	2000      	movs	r0, #0
>>>>>>> JJ's_Branch
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
<<<<<<< HEAD
    2a42:	b004      	add	sp, #16
    2a44:	bd10      	pop	{r4, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	20003cd0 	.word	0x20003cd0
    2a4c:	00002809 	.word	0x00002809
    2a50:	00001b29 	.word	0x00001b29
    2a54:	00001cf5 	.word	0x00001cf5

00002a58 <prvSampleTimeNow>:
=======
    1f66:	b004      	add	sp, #16
    1f68:	bd10      	pop	{r4, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	20003c94 	.word	0x20003c94
    1f70:	00001d2d 	.word	0x00001d2d
    1f74:	0000104d 	.word	0x0000104d
    1f78:	00001219 	.word	0x00001219

00001f7c <prvSampleTimeNow>:
>>>>>>> JJ's_Branch
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
    2a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a5a:	4657      	mov	r7, sl
    2a5c:	464e      	mov	r6, r9
    2a5e:	4645      	mov	r5, r8
    2a60:	b4e0      	push	{r5, r6, r7}
    2a62:	b082      	sub	sp, #8
    2a64:	4681      	mov	r9, r0
=======
    1f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7e:	4657      	mov	r7, sl
    1f80:	464e      	mov	r6, r9
    1f82:	4645      	mov	r5, r8
    1f84:	b4e0      	push	{r5, r6, r7}
    1f86:	b082      	sub	sp, #8
    1f88:	4681      	mov	r9, r0
>>>>>>> JJ's_Branch
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
    2a66:	4b24      	ldr	r3, [pc, #144]	; (2af8 <prvSampleTimeNow+0xa0>)
    2a68:	4798      	blx	r3
    2a6a:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    2a6c:	4b23      	ldr	r3, [pc, #140]	; (2afc <prvSampleTimeNow+0xa4>)
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	4298      	cmp	r0, r3
    2a72:	d234      	bcs.n	2ade <prvSampleTimeNow+0x86>
=======
    1f8a:	4b24      	ldr	r3, [pc, #144]	; (201c <STACK_SIZE+0x1c>)
    1f8c:	4798      	blx	r3
    1f8e:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    1f90:	4b23      	ldr	r3, [pc, #140]	; (2020 <STACK_SIZE+0x20>)
    1f92:	681b      	ldr	r3, [r3, #0]
    1f94:	4298      	cmp	r0, r3
    1f96:	d234      	bcs.n	2002 <STACK_SIZE+0x2>
>>>>>>> JJ's_Branch

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
    2a74:	4e22      	ldr	r6, [pc, #136]	; (2b00 <prvSampleTimeNow+0xa8>)
=======
    1f98:	4e22      	ldr	r6, [pc, #136]	; (2024 <STACK_SIZE+0x24>)
>>>>>>> JJ's_Branch
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
    2a76:	4f23      	ldr	r7, [pc, #140]	; (2b04 <prvSampleTimeNow+0xac>)
    2a78:	e024      	b.n	2ac4 <prvSampleTimeNow+0x6c>
=======
    1f9a:	4f23      	ldr	r7, [pc, #140]	; (2028 <STACK_SIZE+0x28>)
    1f9c:	e024      	b.n	1fe8 <prvSampleTimeNow+0x6c>
>>>>>>> JJ's_Branch
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
<<<<<<< HEAD
    2a7a:	68db      	ldr	r3, [r3, #12]
    2a7c:	6818      	ldr	r0, [r3, #0]
    2a7e:	4682      	mov	sl, r0

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2a80:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a82:	1d25      	adds	r5, r4, #4
    2a84:	1c28      	adds	r0, r5, #0
    2a86:	47b8      	blx	r7
=======
    1f9e:	68db      	ldr	r3, [r3, #12]
    1fa0:	6818      	ldr	r0, [r3, #0]
    1fa2:	4682      	mov	sl, r0

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1fa4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1fa6:	1d25      	adds	r5, r4, #4
    1fa8:	1c28      	adds	r0, r5, #0
    1faa:	47b8      	blx	r7
>>>>>>> JJ's_Branch
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
    2a88:	1c20      	adds	r0, r4, #0
    2a8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2a8c:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2a8e:	69e2      	ldr	r2, [r4, #28]
    2a90:	2a01      	cmp	r2, #1
    2a92:	d117      	bne.n	2ac4 <prvSampleTimeNow+0x6c>
=======
    1fac:	1c20      	adds	r0, r4, #0
    1fae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1fb0:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    1fb2:	69e2      	ldr	r2, [r4, #28]
    1fb4:	2a01      	cmp	r2, #1
    1fb6:	d117      	bne.n	1fe8 <prvSampleTimeNow+0x6c>
>>>>>>> JJ's_Branch
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
    2a94:	69a0      	ldr	r0, [r4, #24]
    2a96:	1c03      	adds	r3, r0, #0
    2a98:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    2a9a:	4553      	cmp	r3, sl
    2a9c:	d907      	bls.n	2aae <prvSampleTimeNow+0x56>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a9e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2aa0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2aa2:	4b17      	ldr	r3, [pc, #92]	; (2b00 <prvSampleTimeNow+0xa8>)
    2aa4:	6818      	ldr	r0, [r3, #0]
    2aa6:	1c29      	adds	r1, r5, #0
    2aa8:	4b17      	ldr	r3, [pc, #92]	; (2b08 <prvSampleTimeNow+0xb0>)
    2aaa:	4798      	blx	r3
    2aac:	e00a      	b.n	2ac4 <prvSampleTimeNow+0x6c>
=======
    1fb8:	69a0      	ldr	r0, [r4, #24]
    1fba:	1c03      	adds	r3, r0, #0
    1fbc:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    1fbe:	4553      	cmp	r3, sl
    1fc0:	d907      	bls.n	1fd2 <prvSampleTimeNow+0x56>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1fc2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1fc4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1fc6:	4b17      	ldr	r3, [pc, #92]	; (2024 <STACK_SIZE+0x24>)
    1fc8:	6818      	ldr	r0, [r3, #0]
    1fca:	1c29      	adds	r1, r5, #0
    1fcc:	4b17      	ldr	r3, [pc, #92]	; (202c <STACK_SIZE+0x2c>)
    1fce:	4798      	blx	r3
    1fd0:	e00a      	b.n	1fe8 <prvSampleTimeNow+0x6c>
>>>>>>> JJ's_Branch
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
    2aae:	2300      	movs	r3, #0
    2ab0:	9300      	str	r3, [sp, #0]
    2ab2:	1c20      	adds	r0, r4, #0
    2ab4:	2100      	movs	r1, #0
    2ab6:	4652      	mov	r2, sl
    2ab8:	4c14      	ldr	r4, [pc, #80]	; (2b0c <prvSampleTimeNow+0xb4>)
    2aba:	47a0      	blx	r4
				configASSERT( xResult );
    2abc:	2800      	cmp	r0, #0
    2abe:	d101      	bne.n	2ac4 <prvSampleTimeNow+0x6c>
    2ac0:	b672      	cpsid	i
    2ac2:	e7fe      	b.n	2ac2 <prvSampleTimeNow+0x6a>
=======
    1fd2:	2300      	movs	r3, #0
    1fd4:	9300      	str	r3, [sp, #0]
    1fd6:	1c20      	adds	r0, r4, #0
    1fd8:	2100      	movs	r1, #0
    1fda:	4652      	mov	r2, sl
    1fdc:	4c14      	ldr	r4, [pc, #80]	; (2030 <STACK_SIZE+0x30>)
    1fde:	47a0      	blx	r4
				configASSERT( xResult );
    1fe0:	2800      	cmp	r0, #0
    1fe2:	d101      	bne.n	1fe8 <prvSampleTimeNow+0x6c>
    1fe4:	b672      	cpsid	i
    1fe6:	e7fe      	b.n	1fe6 <prvSampleTimeNow+0x6a>
>>>>>>> JJ's_Branch

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
    2ac4:	6833      	ldr	r3, [r6, #0]
    2ac6:	6818      	ldr	r0, [r3, #0]
    2ac8:	2800      	cmp	r0, #0
    2aca:	d1d6      	bne.n	2a7a <prvSampleTimeNow+0x22>
=======
    1fe8:	6833      	ldr	r3, [r6, #0]
    1fea:	6818      	ldr	r0, [r3, #0]
    1fec:	2800      	cmp	r0, #0
    1fee:	d1d6      	bne.n	1f9e <prvSampleTimeNow+0x22>
>>>>>>> JJ's_Branch
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
<<<<<<< HEAD
    2acc:	4a10      	ldr	r2, [pc, #64]	; (2b10 <prvSampleTimeNow+0xb8>)
    2ace:	490c      	ldr	r1, [pc, #48]	; (2b00 <prvSampleTimeNow+0xa8>)
    2ad0:	6814      	ldr	r4, [r2, #0]
    2ad2:	600c      	str	r4, [r1, #0]
	pxOverflowTimerList = pxTemp;
    2ad4:	6013      	str	r3, [r2, #0]
=======
    1ff0:	4a10      	ldr	r2, [pc, #64]	; (2034 <STACK_SIZE+0x34>)
    1ff2:	490c      	ldr	r1, [pc, #48]	; (2024 <STACK_SIZE+0x24>)
    1ff4:	6814      	ldr	r4, [r2, #0]
    1ff6:	600c      	str	r4, [r1, #0]
	pxOverflowTimerList = pxTemp;
    1ff8:	6013      	str	r3, [r2, #0]
>>>>>>> JJ's_Branch
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
<<<<<<< HEAD
    2ad6:	2301      	movs	r3, #1
    2ad8:	4648      	mov	r0, r9
    2ada:	6003      	str	r3, [r0, #0]
    2adc:	e002      	b.n	2ae4 <prvSampleTimeNow+0x8c>
=======
    1ffa:	2301      	movs	r3, #1
    1ffc:	4648      	mov	r0, r9
    1ffe:	6003      	str	r3, [r0, #0]
    2000:	e002      	b.n	2008 <STACK_SIZE+0x8>
>>>>>>> JJ's_Branch
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
    2ade:	2300      	movs	r3, #0
    2ae0:	4649      	mov	r1, r9
    2ae2:	600b      	str	r3, [r1, #0]
	}

	xLastTime = xTimeNow;
    2ae4:	4b05      	ldr	r3, [pc, #20]	; (2afc <prvSampleTimeNow+0xa4>)
    2ae6:	4642      	mov	r2, r8
    2ae8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    2aea:	4640      	mov	r0, r8
    2aec:	b002      	add	sp, #8
    2aee:	bc1c      	pop	{r2, r3, r4}
    2af0:	4690      	mov	r8, r2
    2af2:	4699      	mov	r9, r3
    2af4:	46a2      	mov	sl, r4
    2af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2af8:	00002285 	.word	0x00002285
    2afc:	20003ccc 	.word	0x20003ccc
    2b00:	20003ca0 	.word	0x20003ca0
    2b04:	00001685 	.word	0x00001685
    2b08:	00001655 	.word	0x00001655
    2b0c:	000029f5 	.word	0x000029f5
    2b10:	20003cd4 	.word	0x20003cd4

00002b14 <prvTimerTask>:
=======
    2002:	2300      	movs	r3, #0
    2004:	4649      	mov	r1, r9
    2006:	600b      	str	r3, [r1, #0]
	}

	xLastTime = xTimeNow;
    2008:	4b05      	ldr	r3, [pc, #20]	; (2020 <STACK_SIZE+0x20>)
    200a:	4642      	mov	r2, r8
    200c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    200e:	4640      	mov	r0, r8
    2010:	b002      	add	sp, #8
    2012:	bc1c      	pop	{r2, r3, r4}
    2014:	4690      	mov	r8, r2
    2016:	4699      	mov	r9, r3
    2018:	46a2      	mov	sl, r4
    201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    201c:	000017a9 	.word	0x000017a9
    2020:	20003c90 	.word	0x20003c90
    2024:	20003c64 	.word	0x20003c64
    2028:	00000ba9 	.word	0x00000ba9
    202c:	00000b79 	.word	0x00000b79
    2030:	00001f19 	.word	0x00001f19
    2034:	20003c98 	.word	0x20003c98

00002038 <prvTimerTask>:
>>>>>>> JJ's_Branch
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
<<<<<<< HEAD
    2b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b16:	4647      	mov	r7, r8
    2b18:	b480      	push	{r7}
    2b1a:	b086      	sub	sp, #24
=======
    2038:	b5f0      	push	{r4, r5, r6, r7, lr}
    203a:	4647      	mov	r7, r8
    203c:	b480      	push	{r7}
    203e:	b086      	sub	sp, #24
>>>>>>> JJ's_Branch
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
    2b1c:	484e      	ldr	r0, [pc, #312]	; (2c58 <prvTimerTask+0x144>)
    2b1e:	4680      	mov	r8, r0
    2b20:	4641      	mov	r1, r8
    2b22:	680b      	ldr	r3, [r1, #0]
	if( *pxListWasEmpty == pdFALSE )
    2b24:	681a      	ldr	r2, [r3, #0]
    2b26:	2a00      	cmp	r2, #0
    2b28:	d100      	bne.n	2b2c <prvTimerTask+0x18>
    2b2a:	e08a      	b.n	2c42 <prvTimerTask+0x12e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b2c:	68db      	ldr	r3, [r3, #12]
    2b2e:	681c      	ldr	r4, [r3, #0]
=======
    2040:	484e      	ldr	r0, [pc, #312]	; (217c <prvTimerTask+0x144>)
    2042:	4680      	mov	r8, r0
    2044:	4641      	mov	r1, r8
    2046:	680b      	ldr	r3, [r1, #0]
	if( *pxListWasEmpty == pdFALSE )
    2048:	681a      	ldr	r2, [r3, #0]
    204a:	2a00      	cmp	r2, #0
    204c:	d100      	bne.n	2050 <prvTimerTask+0x18>
    204e:	e08a      	b.n	2166 <prvTimerTask+0x12e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2050:	68db      	ldr	r3, [r3, #12]
    2052:	681c      	ldr	r4, [r3, #0]
>>>>>>> JJ's_Branch
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
    2b30:	4b4a      	ldr	r3, [pc, #296]	; (2c5c <prvTimerTask+0x148>)
    2b32:	4798      	blx	r3
=======
    2054:	4b4a      	ldr	r3, [pc, #296]	; (2180 <prvTimerTask+0x148>)
    2056:	4798      	blx	r3
>>>>>>> JJ's_Branch
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
    2b34:	a803      	add	r0, sp, #12
    2b36:	4b4a      	ldr	r3, [pc, #296]	; (2c60 <prvTimerTask+0x14c>)
    2b38:	4798      	blx	r3
    2b3a:	1c05      	adds	r5, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    2b3c:	9b03      	ldr	r3, [sp, #12]
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d131      	bne.n	2ba6 <prvTimerTask+0x92>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2b42:	4284      	cmp	r4, r0
    2b44:	d823      	bhi.n	2b8e <prvTimerTask+0x7a>
			{
				( void ) xTaskResumeAll();
    2b46:	4b47      	ldr	r3, [pc, #284]	; (2c64 <prvTimerTask+0x150>)
    2b48:	4798      	blx	r3
=======
    2058:	a803      	add	r0, sp, #12
    205a:	4b4a      	ldr	r3, [pc, #296]	; (2184 <prvTimerTask+0x14c>)
    205c:	4798      	blx	r3
    205e:	1c05      	adds	r5, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    2060:	9b03      	ldr	r3, [sp, #12]
    2062:	2b00      	cmp	r3, #0
    2064:	d131      	bne.n	20ca <prvTimerTask+0x92>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2066:	4284      	cmp	r4, r0
    2068:	d823      	bhi.n	20b2 <prvTimerTask+0x7a>
			{
				( void ) xTaskResumeAll();
    206a:	4b47      	ldr	r3, [pc, #284]	; (2188 <prvTimerTask+0x150>)
    206c:	4798      	blx	r3
>>>>>>> JJ's_Branch
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
<<<<<<< HEAD
    2b4a:	4b43      	ldr	r3, [pc, #268]	; (2c58 <prvTimerTask+0x144>)
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	68db      	ldr	r3, [r3, #12]
    2b50:	68de      	ldr	r6, [r3, #12]
=======
    206e:	4b43      	ldr	r3, [pc, #268]	; (217c <prvTimerTask+0x144>)
    2070:	681b      	ldr	r3, [r3, #0]
    2072:	68db      	ldr	r3, [r3, #12]
    2074:	68de      	ldr	r6, [r3, #12]
>>>>>>> JJ's_Branch

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
    2b52:	1d30      	adds	r0, r6, #4
    2b54:	4b44      	ldr	r3, [pc, #272]	; (2c68 <prvTimerTask+0x154>)
    2b56:	4798      	blx	r3
=======
    2076:	1d30      	adds	r0, r6, #4
    2078:	4b44      	ldr	r3, [pc, #272]	; (218c <prvTimerTask+0x154>)
    207a:	4798      	blx	r3
>>>>>>> JJ's_Branch
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
<<<<<<< HEAD
    2b58:	69f7      	ldr	r7, [r6, #28]
    2b5a:	2f01      	cmp	r7, #1
    2b5c:	d113      	bne.n	2b86 <prvTimerTask+0x72>
=======
    207c:	69f7      	ldr	r7, [r6, #28]
    207e:	2f01      	cmp	r7, #1
    2080:	d113      	bne.n	20aa <prvTimerTask+0x72>
>>>>>>> JJ's_Branch
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
<<<<<<< HEAD
    2b5e:	69b0      	ldr	r0, [r6, #24]
    2b60:	1821      	adds	r1, r4, r0
    2b62:	1c30      	adds	r0, r6, #0
    2b64:	1c2a      	adds	r2, r5, #0
    2b66:	1c23      	adds	r3, r4, #0
    2b68:	4d40      	ldr	r5, [pc, #256]	; (2c6c <prvTimerTask+0x158>)
    2b6a:	47a8      	blx	r5
    2b6c:	2801      	cmp	r0, #1
    2b6e:	d10a      	bne.n	2b86 <prvTimerTask+0x72>
=======
    2082:	69b0      	ldr	r0, [r6, #24]
    2084:	1821      	adds	r1, r4, r0
    2086:	1c30      	adds	r0, r6, #0
    2088:	1c2a      	adds	r2, r5, #0
    208a:	1c23      	adds	r3, r4, #0
    208c:	4d40      	ldr	r5, [pc, #256]	; (2190 <prvTimerTask+0x158>)
    208e:	47a8      	blx	r5
    2090:	2801      	cmp	r0, #1
    2092:	d10a      	bne.n	20aa <prvTimerTask+0x72>
>>>>>>> JJ's_Branch
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
    2b70:	2300      	movs	r3, #0
    2b72:	9300      	str	r3, [sp, #0]
    2b74:	1c30      	adds	r0, r6, #0
    2b76:	2100      	movs	r1, #0
    2b78:	1c22      	adds	r2, r4, #0
    2b7a:	4c3d      	ldr	r4, [pc, #244]	; (2c70 <prvTimerTask+0x15c>)
    2b7c:	47a0      	blx	r4
			configASSERT( xResult );
    2b7e:	2800      	cmp	r0, #0
    2b80:	d101      	bne.n	2b86 <prvTimerTask+0x72>
    2b82:	b672      	cpsid	i
    2b84:	e7fe      	b.n	2b84 <prvTimerTask+0x70>
=======
    2094:	2300      	movs	r3, #0
    2096:	9300      	str	r3, [sp, #0]
    2098:	1c30      	adds	r0, r6, #0
    209a:	2100      	movs	r1, #0
    209c:	1c22      	adds	r2, r4, #0
    209e:	4c3d      	ldr	r4, [pc, #244]	; (2194 <prvTimerTask+0x15c>)
    20a0:	47a0      	blx	r4
			configASSERT( xResult );
    20a2:	2800      	cmp	r0, #0
    20a4:	d101      	bne.n	20aa <prvTimerTask+0x72>
    20a6:	b672      	cpsid	i
    20a8:	e7fe      	b.n	20a8 <prvTimerTask+0x70>
>>>>>>> JJ's_Branch
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
    2b86:	6a73      	ldr	r3, [r6, #36]	; 0x24
    2b88:	1c30      	adds	r0, r6, #0
    2b8a:	4798      	blx	r3
    2b8c:	e00d      	b.n	2baa <prvTimerTask+0x96>
=======
    20aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
    20ac:	1c30      	adds	r0, r6, #0
    20ae:	4798      	blx	r3
    20b0:	e00d      	b.n	20ce <prvTimerTask+0x96>
>>>>>>> JJ's_Branch
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
<<<<<<< HEAD
    2b8e:	4b39      	ldr	r3, [pc, #228]	; (2c74 <prvTimerTask+0x160>)
    2b90:	6818      	ldr	r0, [r3, #0]
    2b92:	1b61      	subs	r1, r4, r5
    2b94:	4b38      	ldr	r3, [pc, #224]	; (2c78 <prvTimerTask+0x164>)
    2b96:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    2b98:	4b32      	ldr	r3, [pc, #200]	; (2c64 <prvTimerTask+0x150>)
    2b9a:	4798      	blx	r3
    2b9c:	2800      	cmp	r0, #0
    2b9e:	d104      	bne.n	2baa <prvTimerTask+0x96>
=======
    20b2:	4b39      	ldr	r3, [pc, #228]	; (2198 <prvTimerTask+0x160>)
    20b4:	6818      	ldr	r0, [r3, #0]
    20b6:	1b61      	subs	r1, r4, r5
    20b8:	4b38      	ldr	r3, [pc, #224]	; (219c <prvTimerTask+0x164>)
    20ba:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    20bc:	4b32      	ldr	r3, [pc, #200]	; (2188 <prvTimerTask+0x150>)
    20be:	4798      	blx	r3
    20c0:	2800      	cmp	r0, #0
    20c2:	d104      	bne.n	20ce <prvTimerTask+0x96>
>>>>>>> JJ's_Branch
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
<<<<<<< HEAD
    2ba0:	4b36      	ldr	r3, [pc, #216]	; (2c7c <prvTimerTask+0x168>)
    2ba2:	4798      	blx	r3
    2ba4:	e001      	b.n	2baa <prvTimerTask+0x96>
=======
    20c4:	4b36      	ldr	r3, [pc, #216]	; (21a0 <prvTimerTask+0x168>)
    20c6:	4798      	blx	r3
    20c8:	e001      	b.n	20ce <prvTimerTask+0x96>
>>>>>>> JJ's_Branch
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
<<<<<<< HEAD
    2ba6:	4b2f      	ldr	r3, [pc, #188]	; (2c64 <prvTimerTask+0x150>)
    2ba8:	4798      	blx	r3
=======
    20ca:	4b2f      	ldr	r3, [pc, #188]	; (2188 <prvTimerTask+0x150>)
    20cc:	4798      	blx	r3
>>>>>>> JJ's_Branch
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
    2baa:	4d32      	ldr	r5, [pc, #200]	; (2c74 <prvTimerTask+0x160>)
    2bac:	4c34      	ldr	r4, [pc, #208]	; (2c80 <prvTimerTask+0x16c>)
    2bae:	e040      	b.n	2c32 <prvTimerTask+0x11e>
=======
    20ce:	4d32      	ldr	r5, [pc, #200]	; (2198 <prvTimerTask+0x160>)
    20d0:	4c34      	ldr	r4, [pc, #208]	; (21a4 <prvTimerTask+0x16c>)
    20d2:	e040      	b.n	2156 <prvTimerTask+0x11e>
>>>>>>> JJ's_Branch
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
    2bb0:	9903      	ldr	r1, [sp, #12]
    2bb2:	2900      	cmp	r1, #0
    2bb4:	db3d      	blt.n	2c32 <prvTimerTask+0x11e>
=======
    20d4:	9903      	ldr	r1, [sp, #12]
    20d6:	2900      	cmp	r1, #0
    20d8:	db3d      	blt.n	2156 <prvTimerTask+0x11e>
>>>>>>> JJ's_Branch
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
    2bb6:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2bb8:	6972      	ldr	r2, [r6, #20]
    2bba:	2a00      	cmp	r2, #0
    2bbc:	d002      	beq.n	2bc4 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2bbe:	1d30      	adds	r0, r6, #4
    2bc0:	4b29      	ldr	r3, [pc, #164]	; (2c68 <prvTimerTask+0x154>)
    2bc2:	4798      	blx	r3
=======
    20da:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    20dc:	6972      	ldr	r2, [r6, #20]
    20de:	2a00      	cmp	r2, #0
    20e0:	d002      	beq.n	20e8 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    20e2:	1d30      	adds	r0, r6, #4
    20e4:	4b29      	ldr	r3, [pc, #164]	; (218c <prvTimerTask+0x154>)
    20e6:	4798      	blx	r3
>>>>>>> JJ's_Branch
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
    2bc4:	a802      	add	r0, sp, #8
    2bc6:	4b26      	ldr	r3, [pc, #152]	; (2c60 <prvTimerTask+0x14c>)
    2bc8:	4798      	blx	r3
    2bca:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    2bcc:	9f03      	ldr	r7, [sp, #12]
    2bce:	2f09      	cmp	r7, #9
    2bd0:	d82f      	bhi.n	2c32 <prvTimerTask+0x11e>
    2bd2:	00ba      	lsls	r2, r7, #2
    2bd4:	492b      	ldr	r1, [pc, #172]	; (2c84 <prvTimerTask+0x170>)
    2bd6:	588a      	ldr	r2, [r1, r2]
    2bd8:	4697      	mov	pc, r2
=======
    20e8:	a802      	add	r0, sp, #8
    20ea:	4b26      	ldr	r3, [pc, #152]	; (2184 <prvTimerTask+0x14c>)
    20ec:	4798      	blx	r3
    20ee:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    20f0:	9f03      	ldr	r7, [sp, #12]
    20f2:	2f09      	cmp	r7, #9
    20f4:	d82f      	bhi.n	2156 <prvTimerTask+0x11e>
    20f6:	00ba      	lsls	r2, r7, #2
    20f8:	492b      	ldr	r1, [pc, #172]	; (21a8 <prvTimerTask+0x170>)
    20fa:	588a      	ldr	r2, [r1, r2]
    20fc:	4697      	mov	pc, r2
>>>>>>> JJ's_Branch
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
<<<<<<< HEAD
    2bda:	9f04      	ldr	r7, [sp, #16]
    2bdc:	69b2      	ldr	r2, [r6, #24]
    2bde:	18b9      	adds	r1, r7, r2
    2be0:	1c30      	adds	r0, r6, #0
    2be2:	1c1a      	adds	r2, r3, #0
    2be4:	1c3b      	adds	r3, r7, #0
    2be6:	4f21      	ldr	r7, [pc, #132]	; (2c6c <prvTimerTask+0x158>)
    2be8:	47b8      	blx	r7
    2bea:	2801      	cmp	r0, #1
    2bec:	d121      	bne.n	2c32 <prvTimerTask+0x11e>
=======
    20fe:	9f04      	ldr	r7, [sp, #16]
    2100:	69b2      	ldr	r2, [r6, #24]
    2102:	18b9      	adds	r1, r7, r2
    2104:	1c30      	adds	r0, r6, #0
    2106:	1c1a      	adds	r2, r3, #0
    2108:	1c3b      	adds	r3, r7, #0
    210a:	4f21      	ldr	r7, [pc, #132]	; (2190 <prvTimerTask+0x158>)
    210c:	47b8      	blx	r7
    210e:	2801      	cmp	r0, #1
    2110:	d121      	bne.n	2156 <prvTimerTask+0x11e>
>>>>>>> JJ's_Branch
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
    2bee:	1c30      	adds	r0, r6, #0
    2bf0:	6a71      	ldr	r1, [r6, #36]	; 0x24
    2bf2:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2bf4:	69f2      	ldr	r2, [r6, #28]
    2bf6:	2a01      	cmp	r2, #1
    2bf8:	d11b      	bne.n	2c32 <prvTimerTask+0x11e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2bfa:	69b3      	ldr	r3, [r6, #24]
    2bfc:	9f04      	ldr	r7, [sp, #16]
    2bfe:	19da      	adds	r2, r3, r7
    2c00:	2300      	movs	r3, #0
    2c02:	9300      	str	r3, [sp, #0]
    2c04:	1c30      	adds	r0, r6, #0
    2c06:	2100      	movs	r1, #0
    2c08:	4e19      	ldr	r6, [pc, #100]	; (2c70 <prvTimerTask+0x15c>)
    2c0a:	47b0      	blx	r6
							configASSERT( xResult );
    2c0c:	2800      	cmp	r0, #0
    2c0e:	d110      	bne.n	2c32 <prvTimerTask+0x11e>
    2c10:	b672      	cpsid	i
    2c12:	e7fe      	b.n	2c12 <prvTimerTask+0xfe>
=======
    2112:	1c30      	adds	r0, r6, #0
    2114:	6a71      	ldr	r1, [r6, #36]	; 0x24
    2116:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2118:	69f2      	ldr	r2, [r6, #28]
    211a:	2a01      	cmp	r2, #1
    211c:	d11b      	bne.n	2156 <prvTimerTask+0x11e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    211e:	69b3      	ldr	r3, [r6, #24]
    2120:	9f04      	ldr	r7, [sp, #16]
    2122:	19da      	adds	r2, r3, r7
    2124:	2300      	movs	r3, #0
    2126:	9300      	str	r3, [sp, #0]
    2128:	1c30      	adds	r0, r6, #0
    212a:	2100      	movs	r1, #0
    212c:	4e19      	ldr	r6, [pc, #100]	; (2194 <prvTimerTask+0x15c>)
    212e:	47b0      	blx	r6
							configASSERT( xResult );
    2130:	2800      	cmp	r0, #0
    2132:	d110      	bne.n	2156 <prvTimerTask+0x11e>
    2134:	b672      	cpsid	i
    2136:	e7fe      	b.n	2136 <prvTimerTask+0xfe>
>>>>>>> JJ's_Branch
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
<<<<<<< HEAD
    2c14:	9904      	ldr	r1, [sp, #16]
    2c16:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2c18:	2900      	cmp	r1, #0
    2c1a:	d101      	bne.n	2c20 <prvTimerTask+0x10c>
    2c1c:	b672      	cpsid	i
    2c1e:	e7fe      	b.n	2c1e <prvTimerTask+0x10a>
=======
    2138:	9904      	ldr	r1, [sp, #16]
    213a:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    213c:	2900      	cmp	r1, #0
    213e:	d101      	bne.n	2144 <prvTimerTask+0x10c>
    2140:	b672      	cpsid	i
    2142:	e7fe      	b.n	2142 <prvTimerTask+0x10a>
>>>>>>> JJ's_Branch
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
    2c20:	1859      	adds	r1, r3, r1
    2c22:	1c30      	adds	r0, r6, #0
    2c24:	1c1a      	adds	r2, r3, #0
    2c26:	4e11      	ldr	r6, [pc, #68]	; (2c6c <prvTimerTask+0x158>)
    2c28:	47b0      	blx	r6
    2c2a:	e002      	b.n	2c32 <prvTimerTask+0x11e>
=======
    2144:	1859      	adds	r1, r3, r1
    2146:	1c30      	adds	r0, r6, #0
    2148:	1c1a      	adds	r2, r3, #0
    214a:	4e11      	ldr	r6, [pc, #68]	; (2190 <prvTimerTask+0x158>)
    214c:	47b0      	blx	r6
    214e:	e002      	b.n	2156 <prvTimerTask+0x11e>
>>>>>>> JJ's_Branch
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
<<<<<<< HEAD
    2c2c:	1c30      	adds	r0, r6, #0
    2c2e:	4b16      	ldr	r3, [pc, #88]	; (2c88 <prvTimerTask+0x174>)
    2c30:	4798      	blx	r3
=======
    2150:	1c30      	adds	r0, r6, #0
    2152:	4b16      	ldr	r3, [pc, #88]	; (21ac <prvTimerTask+0x174>)
    2154:	4798      	blx	r3
>>>>>>> JJ's_Branch
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
    2c32:	6828      	ldr	r0, [r5, #0]
    2c34:	a903      	add	r1, sp, #12
    2c36:	2200      	movs	r2, #0
    2c38:	2300      	movs	r3, #0
    2c3a:	47a0      	blx	r4
    2c3c:	2800      	cmp	r0, #0
    2c3e:	d1b7      	bne.n	2bb0 <prvTimerTask+0x9c>
    2c40:	e76e      	b.n	2b20 <prvTimerTask+0xc>
=======
    2156:	6828      	ldr	r0, [r5, #0]
    2158:	a903      	add	r1, sp, #12
    215a:	2200      	movs	r2, #0
    215c:	2300      	movs	r3, #0
    215e:	47a0      	blx	r4
    2160:	2800      	cmp	r0, #0
    2162:	d1b7      	bne.n	20d4 <prvTimerTask+0x9c>
    2164:	e76e      	b.n	2044 <prvTimerTask+0xc>
>>>>>>> JJ's_Branch
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
    2c42:	4806      	ldr	r0, [pc, #24]	; (2c5c <prvTimerTask+0x148>)
    2c44:	4780      	blx	r0
=======
    2166:	4806      	ldr	r0, [pc, #24]	; (2180 <prvTimerTask+0x148>)
    2168:	4780      	blx	r0
>>>>>>> JJ's_Branch
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
    2c46:	a803      	add	r0, sp, #12
    2c48:	4905      	ldr	r1, [pc, #20]	; (2c60 <prvTimerTask+0x14c>)
    2c4a:	4788      	blx	r1
    2c4c:	1c05      	adds	r5, r0, #0
=======
    216a:	a803      	add	r0, sp, #12
    216c:	4905      	ldr	r1, [pc, #20]	; (2184 <prvTimerTask+0x14c>)
    216e:	4788      	blx	r1
    2170:	1c05      	adds	r5, r0, #0
>>>>>>> JJ's_Branch
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
    2c4e:	2400      	movs	r4, #0
=======
    2172:	2400      	movs	r4, #0
>>>>>>> JJ's_Branch
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
<<<<<<< HEAD
    2c50:	9a03      	ldr	r2, [sp, #12]
    2c52:	42a2      	cmp	r2, r4
    2c54:	d09b      	beq.n	2b8e <prvTimerTask+0x7a>
    2c56:	e7a6      	b.n	2ba6 <prvTimerTask+0x92>
    2c58:	20003ca0 	.word	0x20003ca0
    2c5c:	00002275 	.word	0x00002275
    2c60:	00002a59 	.word	0x00002a59
    2c64:	000023d1 	.word	0x000023d1
    2c68:	00001685 	.word	0x00001685
    2c6c:	000028fd 	.word	0x000028fd
    2c70:	000029f5 	.word	0x000029f5
    2c74:	20003cd0 	.word	0x20003cd0
    2c78:	00001f51 	.word	0x00001f51
    2c7c:	00001701 	.word	0x00001701
    2c80:	00001dc5 	.word	0x00001dc5
    2c84:	00003ec0 	.word	0x00003ec0
    2c88:	000018b9 	.word	0x000018b9

00002c8c <systask_handler>:
=======
    2174:	9a03      	ldr	r2, [sp, #12]
    2176:	42a2      	cmp	r2, r4
    2178:	d09b      	beq.n	20b2 <prvTimerTask+0x7a>
    217a:	e7a6      	b.n	20ca <prvTimerTask+0x92>
    217c:	20003c64 	.word	0x20003c64
    2180:	00001799 	.word	0x00001799
    2184:	00001f7d 	.word	0x00001f7d
    2188:	000018f5 	.word	0x000018f5
    218c:	00000ba9 	.word	0x00000ba9
    2190:	00001e21 	.word	0x00001e21
    2194:	00001f19 	.word	0x00001f19
    2198:	20003c94 	.word	0x20003c94
    219c:	00001475 	.word	0x00001475
    21a0:	00000c25 	.word	0x00000c25
    21a4:	000012e9 	.word	0x000012e9
    21a8:	00003248 	.word	0x00003248
    21ac:	00000ddd 	.word	0x00000ddd

000021b0 <systask_handler>:
>>>>>>> JJ's_Branch
static void open_close_task(void *params)
{
	vTaskDelay(OPEN_CLOSE_TASK_DELAY);
}
static void systask_handler(void *params)
{
<<<<<<< HEAD
    2c8c:	b508      	push	{r3, lr}
	vTaskDelay(SYSTASK_HANDLER_DELAY);
    2c8e:	2006      	movs	r0, #6
    2c90:	4b01      	ldr	r3, [pc, #4]	; (2c98 <systask_handler+0xc>)
    2c92:	4798      	blx	r3
    2c94:	bd08      	pop	{r3, pc}
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	000024c9 	.word	0x000024c9

00002c9c <open_close_task>:
=======
    21b0:	b508      	push	{r3, lr}
	vTaskDelay(SYSTASK_HANDLER_DELAY);
    21b2:	2006      	movs	r0, #6
    21b4:	4b01      	ldr	r3, [pc, #4]	; (21bc <systask_handler+0xc>)
    21b6:	4798      	blx	r3
    21b8:	bd08      	pop	{r3, pc}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	000019ed 	.word	0x000019ed

000021c0 <open_close_task>:
>>>>>>> JJ's_Branch
{
	vTaskDelay(SAMPLE_TEMP_TASK_DELAY);
}

static void open_close_task(void *params)
{
<<<<<<< HEAD
    2c9c:	b508      	push	{r3, lr}
	vTaskDelay(OPEN_CLOSE_TASK_DELAY);
    2c9e:	2006      	movs	r0, #6
    2ca0:	4b01      	ldr	r3, [pc, #4]	; (2ca8 <open_close_task+0xc>)
    2ca2:	4798      	blx	r3
}
    2ca4:	bd08      	pop	{r3, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	000024c9 	.word	0x000024c9

00002cac <sample_temp_task>:
=======
    21c0:	b508      	push	{r3, lr}
	vTaskDelay(OPEN_CLOSE_TASK_DELAY);
    21c2:	2006      	movs	r0, #6
    21c4:	4b01      	ldr	r3, [pc, #4]	; (21cc <open_close_task+0xc>)
    21c6:	4798      	blx	r3
}
    21c8:	bd08      	pop	{r3, pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	000019ed 	.word	0x000019ed

000021d0 <sample_temp_task>:
>>>>>>> JJ's_Branch
{
	vTaskDelay(ANALYZE_DATA_TASK_DELAY);
}

static void sample_temp_task(void *params)
{
<<<<<<< HEAD
    2cac:	b508      	push	{r3, lr}
	vTaskDelay(SAMPLE_TEMP_TASK_DELAY);
    2cae:	2006      	movs	r0, #6
    2cb0:	4b01      	ldr	r3, [pc, #4]	; (2cb8 <sample_temp_task+0xc>)
    2cb2:	4798      	blx	r3
}
    2cb4:	bd08      	pop	{r3, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	000024c9 	.word	0x000024c9

00002cbc <analyze_data_task>:
=======
    21d0:	b508      	push	{r3, lr}
	vTaskDelay(SAMPLE_TEMP_TASK_DELAY);
    21d2:	2006      	movs	r0, #6
    21d4:	4b01      	ldr	r3, [pc, #4]	; (21dc <sample_temp_task+0xc>)
    21d6:	4798      	blx	r3
}
    21d8:	bd08      	pop	{r3, pc}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	000019ed 	.word	0x000019ed

000021e0 <analyze_data_task>:
>>>>>>> JJ's_Branch
{
	vTaskDelay(NEW_SENSOR_TASK_DELAY);
}

static void analyze_data_task(void *params)
{
<<<<<<< HEAD
    2cbc:	b508      	push	{r3, lr}
	vTaskDelay(ANALYZE_DATA_TASK_DELAY);
    2cbe:	2006      	movs	r0, #6
    2cc0:	4b01      	ldr	r3, [pc, #4]	; (2cc8 <analyze_data_task+0xc>)
    2cc2:	4798      	blx	r3
}
    2cc4:	bd08      	pop	{r3, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	000024c9 	.word	0x000024c9

00002ccc <new_sensor_task>:
	printf("goobers");
=======
    21e0:	b508      	push	{r3, lr}
	vTaskDelay(ANALYZE_DATA_TASK_DELAY);
    21e2:	2006      	movs	r0, #6
    21e4:	4b01      	ldr	r3, [pc, #4]	; (21ec <analyze_data_task+0xc>)
    21e6:	4798      	blx	r3
}
    21e8:	bd08      	pop	{r3, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	000019ed 	.word	0x000019ed

000021f0 <new_sensor_task>:
	printf("lcd_task");
>>>>>>> JJ's_Branch
	vTaskDelay(LCD_TASK_DELAY);
}

static void new_sensor_task(void *params)
{
<<<<<<< HEAD
    2ccc:	b508      	push	{r3, lr}
	vTaskDelay(NEW_SENSOR_TASK_DELAY);
    2cce:	20c8      	movs	r0, #200	; 0xc8
    2cd0:	4b01      	ldr	r3, [pc, #4]	; (2cd8 <new_sensor_task+0xc>)
    2cd2:	4798      	blx	r3
}
    2cd4:	bd08      	pop	{r3, pc}
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	000024c9 	.word	0x000024c9

00002cdc <lcd_task>:
=======
    21f0:	b508      	push	{r3, lr}
	vTaskDelay(NEW_SENSOR_TASK_DELAY);
    21f2:	20c8      	movs	r0, #200	; 0xc8
    21f4:	4b01      	ldr	r3, [pc, #4]	; (21fc <new_sensor_task+0xc>)
    21f6:	4798      	blx	r3
}
    21f8:	bd08      	pop	{r3, pc}
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	000019ed 	.word	0x000019ed

00002200 <lcd_task>:
>>>>>>> JJ's_Branch
			SYSTASK_HANDLER_PRIORITY,
			NULL);
}

static void lcd_task(void *params)
{
<<<<<<< HEAD
    2cdc:	b508      	push	{r3, lr}
	configure_console();
    2cde:	4b04      	ldr	r3, [pc, #16]	; (2cf0 <lcd_task+0x14>)
    2ce0:	4798      	blx	r3
	printf("goobers");
    2ce2:	4804      	ldr	r0, [pc, #16]	; (2cf4 <lcd_task+0x18>)
    2ce4:	4b04      	ldr	r3, [pc, #16]	; (2cf8 <lcd_task+0x1c>)
    2ce6:	4798      	blx	r3
	vTaskDelay(LCD_TASK_DELAY);
    2ce8:	200a      	movs	r0, #10
    2cea:	4b04      	ldr	r3, [pc, #16]	; (2cfc <lcd_task+0x20>)
    2cec:	4798      	blx	r3
}
    2cee:	bd08      	pop	{r3, pc}
    2cf0:	00000279 	.word	0x00000279
    2cf4:	00003ef0 	.word	0x00003ef0
    2cf8:	00002f4d 	.word	0x00002f4d
    2cfc:	000024c9 	.word	0x000024c9

00002d00 <tasks_init>:
=======
    2200:	b508      	push	{r3, lr}
	//putchar(128);
	//putchar(256);
	printf("lcd_task");
    2202:	4803      	ldr	r0, [pc, #12]	; (2210 <lcd_task+0x10>)
    2204:	4b03      	ldr	r3, [pc, #12]	; (2214 <lcd_task+0x14>)
    2206:	4798      	blx	r3
	vTaskDelay(LCD_TASK_DELAY);
    2208:	200a      	movs	r0, #10
    220a:	4b03      	ldr	r3, [pc, #12]	; (2218 <lcd_task+0x18>)
    220c:	4798      	blx	r3
}
    220e:	bd08      	pop	{r3, pc}
    2210:	00003278 	.word	0x00003278
    2214:	00002429 	.word	0x00002429
    2218:	000019ed 	.word	0x000019ed

0000221c <tasks_init>:
>>>>>>> JJ's_Branch
static void open_close_task(void *params);
static void systask_handler(void *params);

//initialize the tasks
void tasks_init(void)
{
<<<<<<< HEAD
    2d00:	b570      	push	{r4, r5, r6, lr}
    2d02:	b084      	sub	sp, #16
	//mutexes
	lcd_mutex  = xSemaphoreCreateMutex();
    2d04:	2001      	movs	r0, #1
    2d06:	4c23      	ldr	r4, [pc, #140]	; (2d94 <tasks_init+0x94>)
    2d08:	47a0      	blx	r4
    2d0a:	4b23      	ldr	r3, [pc, #140]	; (2d98 <tasks_init+0x98>)
    2d0c:	6018      	str	r0, [r3, #0]
	wireless_mutex = xSemaphoreCreateMutex();
    2d0e:	2001      	movs	r0, #1
    2d10:	47a0      	blx	r4
    2d12:	4b22      	ldr	r3, [pc, #136]	; (2d9c <tasks_init+0x9c>)
    2d14:	6018      	str	r0, [r3, #0]
	
	event_group = xEventGroupCreate();
    2d16:	4b22      	ldr	r3, [pc, #136]	; (2da0 <tasks_init+0xa0>)
    2d18:	4798      	blx	r3
    2d1a:	4b22      	ldr	r3, [pc, #136]	; (2da4 <tasks_init+0xa4>)
    2d1c:	6018      	str	r0, [r3, #0]

	xTaskCreate(lcd_task,
    2d1e:	2601      	movs	r6, #1
    2d20:	9600      	str	r6, [sp, #0]
    2d22:	2400      	movs	r4, #0
    2d24:	9401      	str	r4, [sp, #4]
    2d26:	9402      	str	r4, [sp, #8]
    2d28:	9403      	str	r4, [sp, #12]
    2d2a:	481f      	ldr	r0, [pc, #124]	; (2da8 <tasks_init+0xa8>)
    2d2c:	491f      	ldr	r1, [pc, #124]	; (2dac <tasks_init+0xac>)
    2d2e:	2264      	movs	r2, #100	; 0x64
    2d30:	2300      	movs	r3, #0
    2d32:	4d1f      	ldr	r5, [pc, #124]	; (2db0 <tasks_init+0xb0>)
    2d34:	47a8      	blx	r5
=======
    221c:	b570      	push	{r4, r5, r6, lr}
    221e:	b084      	sub	sp, #16
	//mutexes
	lcd_mutex  = xSemaphoreCreateMutex();
    2220:	2001      	movs	r0, #1
    2222:	4c24      	ldr	r4, [pc, #144]	; (22b4 <tasks_init+0x98>)
    2224:	47a0      	blx	r4
    2226:	4b24      	ldr	r3, [pc, #144]	; (22b8 <tasks_init+0x9c>)
    2228:	6018      	str	r0, [r3, #0]
	wireless_mutex = xSemaphoreCreateMutex();
    222a:	2001      	movs	r0, #1
    222c:	47a0      	blx	r4
    222e:	4b23      	ldr	r3, [pc, #140]	; (22bc <tasks_init+0xa0>)
    2230:	6018      	str	r0, [r3, #0]
	
	event_group = xEventGroupCreate();
    2232:	4b23      	ldr	r3, [pc, #140]	; (22c0 <tasks_init+0xa4>)
    2234:	4798      	blx	r3
    2236:	4b23      	ldr	r3, [pc, #140]	; (22c4 <tasks_init+0xa8>)
    2238:	6018      	str	r0, [r3, #0]

	xTaskCreate(lcd_task,
    223a:	2314      	movs	r3, #20
    223c:	9300      	str	r3, [sp, #0]
    223e:	2400      	movs	r4, #0
    2240:	9401      	str	r4, [sp, #4]
    2242:	9402      	str	r4, [sp, #8]
    2244:	9403      	str	r4, [sp, #12]
    2246:	4820      	ldr	r0, [pc, #128]	; (22c8 <tasks_init+0xac>)
    2248:	4920      	ldr	r1, [pc, #128]	; (22cc <tasks_init+0xb0>)
    224a:	2264      	movs	r2, #100	; 0x64
    224c:	2300      	movs	r3, #0
    224e:	4d20      	ldr	r5, [pc, #128]	; (22d0 <tasks_init+0xb4>)
    2250:	47a8      	blx	r5
>>>>>>> JJ's_Branch
			configMINIMAL_STACK_SIZE,
			NULL,
			LCD_TASK_PRIORITY,
			NULL);

	xTaskCreate(new_sensor_task,
<<<<<<< HEAD
    2d36:	9600      	str	r6, [sp, #0]
    2d38:	9401      	str	r4, [sp, #4]
    2d3a:	9402      	str	r4, [sp, #8]
    2d3c:	9403      	str	r4, [sp, #12]
    2d3e:	481d      	ldr	r0, [pc, #116]	; (2db4 <tasks_init+0xb4>)
    2d40:	491d      	ldr	r1, [pc, #116]	; (2db8 <tasks_init+0xb8>)
    2d42:	2264      	movs	r2, #100	; 0x64
    2d44:	2300      	movs	r3, #0
    2d46:	47a8      	blx	r5
=======
    2252:	2601      	movs	r6, #1
    2254:	9600      	str	r6, [sp, #0]
    2256:	9401      	str	r4, [sp, #4]
    2258:	9402      	str	r4, [sp, #8]
    225a:	9403      	str	r4, [sp, #12]
    225c:	481d      	ldr	r0, [pc, #116]	; (22d4 <tasks_init+0xb8>)
    225e:	491e      	ldr	r1, [pc, #120]	; (22d8 <tasks_init+0xbc>)
    2260:	2264      	movs	r2, #100	; 0x64
    2262:	2300      	movs	r3, #0
    2264:	47a8      	blx	r5
>>>>>>> JJ's_Branch
			configMINIMAL_STACK_SIZE,
			NULL,
			NEW_SENSOR_TASK_PRIORITY,
			NULL);

	xTaskCreate(analyze_data_task,
<<<<<<< HEAD
    2d48:	9600      	str	r6, [sp, #0]
    2d4a:	9401      	str	r4, [sp, #4]
    2d4c:	9402      	str	r4, [sp, #8]
    2d4e:	9403      	str	r4, [sp, #12]
    2d50:	481a      	ldr	r0, [pc, #104]	; (2dbc <tasks_init+0xbc>)
    2d52:	491b      	ldr	r1, [pc, #108]	; (2dc0 <tasks_init+0xc0>)
    2d54:	2264      	movs	r2, #100	; 0x64
    2d56:	2300      	movs	r3, #0
    2d58:	47a8      	blx	r5
=======
    2266:	9600      	str	r6, [sp, #0]
    2268:	9401      	str	r4, [sp, #4]
    226a:	9402      	str	r4, [sp, #8]
    226c:	9403      	str	r4, [sp, #12]
    226e:	481b      	ldr	r0, [pc, #108]	; (22dc <tasks_init+0xc0>)
    2270:	491b      	ldr	r1, [pc, #108]	; (22e0 <tasks_init+0xc4>)
    2272:	2264      	movs	r2, #100	; 0x64
    2274:	2300      	movs	r3, #0
    2276:	47a8      	blx	r5
>>>>>>> JJ's_Branch
			configMINIMAL_STACK_SIZE,
			NULL,
			ANALYZE_DATA_TASK_PRIORITY,
			NULL);

	xTaskCreate(sample_temp_task,
<<<<<<< HEAD
    2d5a:	9600      	str	r6, [sp, #0]
    2d5c:	9401      	str	r4, [sp, #4]
    2d5e:	9402      	str	r4, [sp, #8]
    2d60:	9403      	str	r4, [sp, #12]
    2d62:	4818      	ldr	r0, [pc, #96]	; (2dc4 <tasks_init+0xc4>)
    2d64:	4918      	ldr	r1, [pc, #96]	; (2dc8 <tasks_init+0xc8>)
    2d66:	2264      	movs	r2, #100	; 0x64
    2d68:	2300      	movs	r3, #0
    2d6a:	47a8      	blx	r5
=======
    2278:	9600      	str	r6, [sp, #0]
    227a:	9401      	str	r4, [sp, #4]
    227c:	9402      	str	r4, [sp, #8]
    227e:	9403      	str	r4, [sp, #12]
    2280:	4818      	ldr	r0, [pc, #96]	; (22e4 <tasks_init+0xc8>)
    2282:	4919      	ldr	r1, [pc, #100]	; (22e8 <tasks_init+0xcc>)
    2284:	2264      	movs	r2, #100	; 0x64
    2286:	2300      	movs	r3, #0
    2288:	47a8      	blx	r5
>>>>>>> JJ's_Branch
			configMINIMAL_STACK_SIZE,
			NULL,
			SAMPLE_TEMP_TASK_PRIORITY,
			NULL);

	xTaskCreate(open_close_task,
<<<<<<< HEAD
    2d6c:	9600      	str	r6, [sp, #0]
    2d6e:	9401      	str	r4, [sp, #4]
    2d70:	9402      	str	r4, [sp, #8]
    2d72:	9403      	str	r4, [sp, #12]
    2d74:	4815      	ldr	r0, [pc, #84]	; (2dcc <tasks_init+0xcc>)
    2d76:	4916      	ldr	r1, [pc, #88]	; (2dd0 <tasks_init+0xd0>)
    2d78:	2264      	movs	r2, #100	; 0x64
    2d7a:	2300      	movs	r3, #0
    2d7c:	47a8      	blx	r5
=======
    228a:	9600      	str	r6, [sp, #0]
    228c:	9401      	str	r4, [sp, #4]
    228e:	9402      	str	r4, [sp, #8]
    2290:	9403      	str	r4, [sp, #12]
    2292:	4816      	ldr	r0, [pc, #88]	; (22ec <tasks_init+0xd0>)
    2294:	4916      	ldr	r1, [pc, #88]	; (22f0 <tasks_init+0xd4>)
    2296:	2264      	movs	r2, #100	; 0x64
    2298:	2300      	movs	r3, #0
    229a:	47a8      	blx	r5
>>>>>>> JJ's_Branch
			configMINIMAL_STACK_SIZE,
			NULL,
			OPEN_CLOSE_TASK_PRIORITY,
			NULL);
			
	xTaskCreate(systask_handler,
<<<<<<< HEAD
    2d7e:	9600      	str	r6, [sp, #0]
    2d80:	9401      	str	r4, [sp, #4]
    2d82:	9402      	str	r4, [sp, #8]
    2d84:	9403      	str	r4, [sp, #12]
    2d86:	4813      	ldr	r0, [pc, #76]	; (2dd4 <tasks_init+0xd4>)
    2d88:	4913      	ldr	r1, [pc, #76]	; (2dd8 <tasks_init+0xd8>)
    2d8a:	2264      	movs	r2, #100	; 0x64
    2d8c:	2300      	movs	r3, #0
    2d8e:	47a8      	blx	r5
=======
    229c:	9600      	str	r6, [sp, #0]
    229e:	9401      	str	r4, [sp, #4]
    22a0:	9402      	str	r4, [sp, #8]
    22a2:	9403      	str	r4, [sp, #12]
    22a4:	4813      	ldr	r0, [pc, #76]	; (22f4 <tasks_init+0xd8>)
    22a6:	4914      	ldr	r1, [pc, #80]	; (22f8 <tasks_init+0xdc>)
    22a8:	2264      	movs	r2, #100	; 0x64
    22aa:	2300      	movs	r3, #0
    22ac:	47a8      	blx	r5
>>>>>>> JJ's_Branch
			(const char *) "Systask Handler",
			configMINIMAL_STACK_SIZE,
			NULL,
			SYSTASK_HANDLER_PRIORITY,
			NULL);
}
<<<<<<< HEAD
    2d90:	b004      	add	sp, #16
    2d92:	bd70      	pop	{r4, r5, r6, pc}
    2d94:	00001c9d 	.word	0x00001c9d
    2d98:	20003ce0 	.word	0x20003ce0
    2d9c:	20003cd8 	.word	0x20003cd8
    2da0:	000015fd 	.word	0x000015fd
    2da4:	20003cdc 	.word	0x20003cdc
    2da8:	00002cdd 	.word	0x00002cdd
    2dac:	00003ef8 	.word	0x00003ef8
    2db0:	00002021 	.word	0x00002021
    2db4:	00002ccd 	.word	0x00002ccd
    2db8:	00003efc 	.word	0x00003efc
    2dbc:	00002cbd 	.word	0x00002cbd
    2dc0:	00003f08 	.word	0x00003f08
    2dc4:	00002cad 	.word	0x00002cad
    2dc8:	00003f18 	.word	0x00003f18
    2dcc:	00002c9d 	.word	0x00002c9d
    2dd0:	00003f24 	.word	0x00003f24
    2dd4:	00002c8d 	.word	0x00002c8d
    2dd8:	00003f30 	.word	0x00003f30

00002ddc <main>:
    2ddc:	b508      	push	{r3, lr}
    2dde:	4b03      	ldr	r3, [pc, #12]	; (2dec <main+0x10>)
    2de0:	4798      	blx	r3
    2de2:	4b03      	ldr	r3, [pc, #12]	; (2df0 <main+0x14>)
    2de4:	4798      	blx	r3
    2de6:	4b03      	ldr	r3, [pc, #12]	; (2df4 <main+0x18>)
    2de8:	4798      	blx	r3
    2dea:	e7fe      	b.n	2dea <main+0xe>
    2dec:	000014f5 	.word	0x000014f5
    2df0:	00002d01 	.word	0x00002d01
    2df4:	00002215 	.word	0x00002215

00002df8 <__aeabi_uidiv>:
    2df8:	2900      	cmp	r1, #0
    2dfa:	d034      	beq.n	2e66 <.udivsi3_skip_div0_test+0x6a>

00002dfc <.udivsi3_skip_div0_test>:
    2dfc:	2301      	movs	r3, #1
    2dfe:	2200      	movs	r2, #0
    2e00:	b410      	push	{r4}
    2e02:	4288      	cmp	r0, r1
    2e04:	d32c      	bcc.n	2e60 <.udivsi3_skip_div0_test+0x64>
    2e06:	2401      	movs	r4, #1
    2e08:	0724      	lsls	r4, r4, #28
    2e0a:	42a1      	cmp	r1, r4
    2e0c:	d204      	bcs.n	2e18 <.udivsi3_skip_div0_test+0x1c>
    2e0e:	4281      	cmp	r1, r0
    2e10:	d202      	bcs.n	2e18 <.udivsi3_skip_div0_test+0x1c>
    2e12:	0109      	lsls	r1, r1, #4
    2e14:	011b      	lsls	r3, r3, #4
    2e16:	e7f8      	b.n	2e0a <.udivsi3_skip_div0_test+0xe>
    2e18:	00e4      	lsls	r4, r4, #3
    2e1a:	42a1      	cmp	r1, r4
    2e1c:	d204      	bcs.n	2e28 <.udivsi3_skip_div0_test+0x2c>
    2e1e:	4281      	cmp	r1, r0
    2e20:	d202      	bcs.n	2e28 <.udivsi3_skip_div0_test+0x2c>
    2e22:	0049      	lsls	r1, r1, #1
    2e24:	005b      	lsls	r3, r3, #1
    2e26:	e7f8      	b.n	2e1a <.udivsi3_skip_div0_test+0x1e>
    2e28:	4288      	cmp	r0, r1
    2e2a:	d301      	bcc.n	2e30 <.udivsi3_skip_div0_test+0x34>
    2e2c:	1a40      	subs	r0, r0, r1
    2e2e:	431a      	orrs	r2, r3
    2e30:	084c      	lsrs	r4, r1, #1
    2e32:	42a0      	cmp	r0, r4
    2e34:	d302      	bcc.n	2e3c <.udivsi3_skip_div0_test+0x40>
    2e36:	1b00      	subs	r0, r0, r4
    2e38:	085c      	lsrs	r4, r3, #1
    2e3a:	4322      	orrs	r2, r4
    2e3c:	088c      	lsrs	r4, r1, #2
    2e3e:	42a0      	cmp	r0, r4
    2e40:	d302      	bcc.n	2e48 <.udivsi3_skip_div0_test+0x4c>
    2e42:	1b00      	subs	r0, r0, r4
    2e44:	089c      	lsrs	r4, r3, #2
    2e46:	4322      	orrs	r2, r4
    2e48:	08cc      	lsrs	r4, r1, #3
    2e4a:	42a0      	cmp	r0, r4
    2e4c:	d302      	bcc.n	2e54 <.udivsi3_skip_div0_test+0x58>
    2e4e:	1b00      	subs	r0, r0, r4
    2e50:	08dc      	lsrs	r4, r3, #3
    2e52:	4322      	orrs	r2, r4
    2e54:	2800      	cmp	r0, #0
    2e56:	d003      	beq.n	2e60 <.udivsi3_skip_div0_test+0x64>
    2e58:	091b      	lsrs	r3, r3, #4
    2e5a:	d001      	beq.n	2e60 <.udivsi3_skip_div0_test+0x64>
    2e5c:	0909      	lsrs	r1, r1, #4
    2e5e:	e7e3      	b.n	2e28 <.udivsi3_skip_div0_test+0x2c>
    2e60:	1c10      	adds	r0, r2, #0
    2e62:	bc10      	pop	{r4}
    2e64:	4770      	bx	lr
    2e66:	2800      	cmp	r0, #0
    2e68:	d001      	beq.n	2e6e <.udivsi3_skip_div0_test+0x72>
    2e6a:	2000      	movs	r0, #0
    2e6c:	43c0      	mvns	r0, r0
    2e6e:	b407      	push	{r0, r1, r2}
    2e70:	4802      	ldr	r0, [pc, #8]	; (2e7c <.udivsi3_skip_div0_test+0x80>)
    2e72:	a102      	add	r1, pc, #8	; (adr r1, 2e7c <.udivsi3_skip_div0_test+0x80>)
    2e74:	1840      	adds	r0, r0, r1
    2e76:	9002      	str	r0, [sp, #8]
    2e78:	bd03      	pop	{r0, r1, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	00000019 	.word	0x00000019

00002e80 <__aeabi_uidivmod>:
    2e80:	2900      	cmp	r1, #0
    2e82:	d0f0      	beq.n	2e66 <.udivsi3_skip_div0_test+0x6a>
    2e84:	b503      	push	{r0, r1, lr}
    2e86:	f7ff ffb9 	bl	2dfc <.udivsi3_skip_div0_test>
    2e8a:	bc0e      	pop	{r1, r2, r3}
    2e8c:	4342      	muls	r2, r0
    2e8e:	1a89      	subs	r1, r1, r2
    2e90:	4718      	bx	r3
    2e92:	46c0      	nop			; (mov r8, r8)

00002e94 <__aeabi_idiv0>:
    2e94:	4770      	bx	lr
    2e96:	46c0      	nop			; (mov r8, r8)

00002e98 <__aeabi_lmul>:
    2e98:	469c      	mov	ip, r3
    2e9a:	0403      	lsls	r3, r0, #16
    2e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e9e:	0c1b      	lsrs	r3, r3, #16
    2ea0:	0417      	lsls	r7, r2, #16
    2ea2:	0c3f      	lsrs	r7, r7, #16
    2ea4:	0c15      	lsrs	r5, r2, #16
    2ea6:	1c1e      	adds	r6, r3, #0
    2ea8:	1c04      	adds	r4, r0, #0
    2eaa:	0c00      	lsrs	r0, r0, #16
    2eac:	437e      	muls	r6, r7
    2eae:	436b      	muls	r3, r5
    2eb0:	4347      	muls	r7, r0
    2eb2:	4345      	muls	r5, r0
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	0c30      	lsrs	r0, r6, #16
    2eb8:	1818      	adds	r0, r3, r0
    2eba:	4287      	cmp	r7, r0
    2ebc:	d902      	bls.n	2ec4 <__aeabi_lmul+0x2c>
    2ebe:	2380      	movs	r3, #128	; 0x80
    2ec0:	025b      	lsls	r3, r3, #9
    2ec2:	18ed      	adds	r5, r5, r3
    2ec4:	0c03      	lsrs	r3, r0, #16
    2ec6:	18ed      	adds	r5, r5, r3
    2ec8:	4663      	mov	r3, ip
    2eca:	435c      	muls	r4, r3
    2ecc:	434a      	muls	r2, r1
    2ece:	0436      	lsls	r6, r6, #16
    2ed0:	0c36      	lsrs	r6, r6, #16
    2ed2:	18a1      	adds	r1, r4, r2
    2ed4:	0400      	lsls	r0, r0, #16
    2ed6:	1980      	adds	r0, r0, r6
    2ed8:	1949      	adds	r1, r1, r5
    2eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002edc <__libc_init_array>:
    2edc:	b570      	push	{r4, r5, r6, lr}
    2ede:	4b0e      	ldr	r3, [pc, #56]	; (2f18 <__libc_init_array+0x3c>)
    2ee0:	4d0e      	ldr	r5, [pc, #56]	; (2f1c <__libc_init_array+0x40>)
    2ee2:	2400      	movs	r4, #0
    2ee4:	1aed      	subs	r5, r5, r3
    2ee6:	10ad      	asrs	r5, r5, #2
    2ee8:	1c1e      	adds	r6, r3, #0
    2eea:	42ac      	cmp	r4, r5
    2eec:	d004      	beq.n	2ef8 <__libc_init_array+0x1c>
    2eee:	00a3      	lsls	r3, r4, #2
    2ef0:	58f3      	ldr	r3, [r6, r3]
    2ef2:	4798      	blx	r3
    2ef4:	3401      	adds	r4, #1
    2ef6:	e7f8      	b.n	2eea <__libc_init_array+0xe>
    2ef8:	f001 f870 	bl	3fdc <_init>
    2efc:	4b08      	ldr	r3, [pc, #32]	; (2f20 <__libc_init_array+0x44>)
    2efe:	4d09      	ldr	r5, [pc, #36]	; (2f24 <__libc_init_array+0x48>)
    2f00:	2400      	movs	r4, #0
    2f02:	1aed      	subs	r5, r5, r3
    2f04:	10ad      	asrs	r5, r5, #2
    2f06:	1c1e      	adds	r6, r3, #0
    2f08:	42ac      	cmp	r4, r5
    2f0a:	d004      	beq.n	2f16 <__libc_init_array+0x3a>
    2f0c:	00a3      	lsls	r3, r4, #2
    2f0e:	58f3      	ldr	r3, [r6, r3]
    2f10:	4798      	blx	r3
    2f12:	3401      	adds	r4, #1
    2f14:	e7f8      	b.n	2f08 <__libc_init_array+0x2c>
    2f16:	bd70      	pop	{r4, r5, r6, pc}
    2f18:	00003fe8 	.word	0x00003fe8
    2f1c:	00003fe8 	.word	0x00003fe8
    2f20:	00003fe8 	.word	0x00003fe8
    2f24:	00003fec 	.word	0x00003fec

00002f28 <memcpy>:
    2f28:	b510      	push	{r4, lr}
    2f2a:	2300      	movs	r3, #0
    2f2c:	4293      	cmp	r3, r2
    2f2e:	d003      	beq.n	2f38 <memcpy+0x10>
    2f30:	5ccc      	ldrb	r4, [r1, r3]
    2f32:	54c4      	strb	r4, [r0, r3]
    2f34:	3301      	adds	r3, #1
    2f36:	e7f9      	b.n	2f2c <memcpy+0x4>
    2f38:	bd10      	pop	{r4, pc}

00002f3a <memset>:
    2f3a:	1c03      	adds	r3, r0, #0
    2f3c:	1882      	adds	r2, r0, r2
    2f3e:	4293      	cmp	r3, r2
    2f40:	d002      	beq.n	2f48 <memset+0xe>
    2f42:	7019      	strb	r1, [r3, #0]
    2f44:	3301      	adds	r3, #1
    2f46:	e7fa      	b.n	2f3e <memset+0x4>
    2f48:	4770      	bx	lr
	...

00002f4c <iprintf>:
    2f4c:	b40f      	push	{r0, r1, r2, r3}
    2f4e:	4b0b      	ldr	r3, [pc, #44]	; (2f7c <iprintf+0x30>)
    2f50:	b513      	push	{r0, r1, r4, lr}
    2f52:	681c      	ldr	r4, [r3, #0]
    2f54:	2c00      	cmp	r4, #0
    2f56:	d005      	beq.n	2f64 <iprintf+0x18>
    2f58:	69a3      	ldr	r3, [r4, #24]
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d102      	bne.n	2f64 <iprintf+0x18>
    2f5e:	1c20      	adds	r0, r4, #0
    2f60:	f000 fd2c 	bl	39bc <__sinit>
    2f64:	ab05      	add	r3, sp, #20
    2f66:	68a1      	ldr	r1, [r4, #8]
    2f68:	1c20      	adds	r0, r4, #0
    2f6a:	9a04      	ldr	r2, [sp, #16]
    2f6c:	9301      	str	r3, [sp, #4]
    2f6e:	f000 f8bf 	bl	30f0 <_vfiprintf_r>
    2f72:	bc16      	pop	{r1, r2, r4}
    2f74:	bc08      	pop	{r3}
    2f76:	b004      	add	sp, #16
    2f78:	4718      	bx	r3
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	2000006c 	.word	0x2000006c

00002f80 <setbuf>:
    2f80:	b508      	push	{r3, lr}
    2f82:	424a      	negs	r2, r1
    2f84:	414a      	adcs	r2, r1
    2f86:	2380      	movs	r3, #128	; 0x80
    2f88:	0052      	lsls	r2, r2, #1
    2f8a:	00db      	lsls	r3, r3, #3
    2f8c:	f000 f802 	bl	2f94 <setvbuf>
    2f90:	bd08      	pop	{r3, pc}
	...

00002f94 <setvbuf>:
    2f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f96:	1c1e      	adds	r6, r3, #0
    2f98:	4b3c      	ldr	r3, [pc, #240]	; (308c <setvbuf+0xf8>)
    2f9a:	1c04      	adds	r4, r0, #0
    2f9c:	681d      	ldr	r5, [r3, #0]
    2f9e:	1c0f      	adds	r7, r1, #0
    2fa0:	9201      	str	r2, [sp, #4]
    2fa2:	2d00      	cmp	r5, #0
    2fa4:	d005      	beq.n	2fb2 <setvbuf+0x1e>
    2fa6:	69aa      	ldr	r2, [r5, #24]
    2fa8:	2a00      	cmp	r2, #0
    2faa:	d102      	bne.n	2fb2 <setvbuf+0x1e>
    2fac:	1c28      	adds	r0, r5, #0
    2fae:	f000 fd05 	bl	39bc <__sinit>
    2fb2:	4b37      	ldr	r3, [pc, #220]	; (3090 <setvbuf+0xfc>)
    2fb4:	429c      	cmp	r4, r3
    2fb6:	d101      	bne.n	2fbc <setvbuf+0x28>
    2fb8:	686c      	ldr	r4, [r5, #4]
    2fba:	e008      	b.n	2fce <setvbuf+0x3a>
    2fbc:	4b35      	ldr	r3, [pc, #212]	; (3094 <setvbuf+0x100>)
    2fbe:	429c      	cmp	r4, r3
    2fc0:	d101      	bne.n	2fc6 <setvbuf+0x32>
    2fc2:	68ac      	ldr	r4, [r5, #8]
    2fc4:	e003      	b.n	2fce <setvbuf+0x3a>
    2fc6:	4b34      	ldr	r3, [pc, #208]	; (3098 <setvbuf+0x104>)
    2fc8:	429c      	cmp	r4, r3
    2fca:	d100      	bne.n	2fce <setvbuf+0x3a>
    2fcc:	68ec      	ldr	r4, [r5, #12]
    2fce:	9b01      	ldr	r3, [sp, #4]
    2fd0:	2b02      	cmp	r3, #2
    2fd2:	d857      	bhi.n	3084 <setvbuf+0xf0>
    2fd4:	2e00      	cmp	r6, #0
    2fd6:	db55      	blt.n	3084 <setvbuf+0xf0>
    2fd8:	1c28      	adds	r0, r5, #0
    2fda:	1c21      	adds	r1, r4, #0
    2fdc:	f000 fc6e 	bl	38bc <_fflush_r>
    2fe0:	2300      	movs	r3, #0
    2fe2:	6063      	str	r3, [r4, #4]
    2fe4:	61a3      	str	r3, [r4, #24]
    2fe6:	89a3      	ldrh	r3, [r4, #12]
    2fe8:	061a      	lsls	r2, r3, #24
    2fea:	d503      	bpl.n	2ff4 <setvbuf+0x60>
    2fec:	1c28      	adds	r0, r5, #0
    2fee:	6921      	ldr	r1, [r4, #16]
    2ff0:	f000 fdba 	bl	3b68 <_free_r>
    2ff4:	89a3      	ldrh	r3, [r4, #12]
    2ff6:	2283      	movs	r2, #131	; 0x83
    2ff8:	4393      	bics	r3, r2
    2ffa:	81a3      	strh	r3, [r4, #12]
    2ffc:	9b01      	ldr	r3, [sp, #4]
    2ffe:	2b02      	cmp	r3, #2
    3000:	d013      	beq.n	302a <setvbuf+0x96>
    3002:	2f00      	cmp	r7, #0
    3004:	d125      	bne.n	3052 <setvbuf+0xbe>
    3006:	2e00      	cmp	r6, #0
    3008:	d101      	bne.n	300e <setvbuf+0x7a>
    300a:	2680      	movs	r6, #128	; 0x80
    300c:	00f6      	lsls	r6, r6, #3
    300e:	1c30      	adds	r0, r6, #0
    3010:	f000 fd94 	bl	3b3c <malloc>
    3014:	1e07      	subs	r7, r0, #0
    3016:	d118      	bne.n	304a <setvbuf+0xb6>
    3018:	2080      	movs	r0, #128	; 0x80
    301a:	00c0      	lsls	r0, r0, #3
    301c:	f000 fd8e 	bl	3b3c <malloc>
    3020:	1e07      	subs	r7, r0, #0
    3022:	d110      	bne.n	3046 <setvbuf+0xb2>
    3024:	2001      	movs	r0, #1
    3026:	4240      	negs	r0, r0
    3028:	e000      	b.n	302c <setvbuf+0x98>
    302a:	2000      	movs	r0, #0
    302c:	89a3      	ldrh	r3, [r4, #12]
    302e:	2202      	movs	r2, #2
    3030:	4313      	orrs	r3, r2
    3032:	81a3      	strh	r3, [r4, #12]
    3034:	2300      	movs	r3, #0
    3036:	60a3      	str	r3, [r4, #8]
    3038:	1c23      	adds	r3, r4, #0
    303a:	3347      	adds	r3, #71	; 0x47
    303c:	6023      	str	r3, [r4, #0]
    303e:	6123      	str	r3, [r4, #16]
    3040:	2301      	movs	r3, #1
    3042:	6163      	str	r3, [r4, #20]
    3044:	e020      	b.n	3088 <setvbuf+0xf4>
    3046:	2680      	movs	r6, #128	; 0x80
    3048:	00f6      	lsls	r6, r6, #3
    304a:	89a3      	ldrh	r3, [r4, #12]
    304c:	2280      	movs	r2, #128	; 0x80
    304e:	4313      	orrs	r3, r2
    3050:	81a3      	strh	r3, [r4, #12]
    3052:	9a01      	ldr	r2, [sp, #4]
    3054:	2a01      	cmp	r2, #1
    3056:	d104      	bne.n	3062 <setvbuf+0xce>
    3058:	89a3      	ldrh	r3, [r4, #12]
    305a:	4313      	orrs	r3, r2
    305c:	81a3      	strh	r3, [r4, #12]
    305e:	4273      	negs	r3, r6
    3060:	61a3      	str	r3, [r4, #24]
    3062:	4b0e      	ldr	r3, [pc, #56]	; (309c <setvbuf+0x108>)
    3064:	2000      	movs	r0, #0
    3066:	62ab      	str	r3, [r5, #40]	; 0x28
    3068:	89a3      	ldrh	r3, [r4, #12]
    306a:	6027      	str	r7, [r4, #0]
    306c:	6127      	str	r7, [r4, #16]
    306e:	6166      	str	r6, [r4, #20]
    3070:	071a      	lsls	r2, r3, #28
    3072:	d509      	bpl.n	3088 <setvbuf+0xf4>
    3074:	2203      	movs	r2, #3
    3076:	4013      	ands	r3, r2
    3078:	425a      	negs	r2, r3
    307a:	4153      	adcs	r3, r2
    307c:	425b      	negs	r3, r3
    307e:	401e      	ands	r6, r3
    3080:	60a6      	str	r6, [r4, #8]
    3082:	e001      	b.n	3088 <setvbuf+0xf4>
    3084:	2001      	movs	r0, #1
    3086:	4240      	negs	r0, r0
    3088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    308a:	46c0      	nop			; (mov r8, r8)
    308c:	2000006c 	.word	0x2000006c
    3090:	00003f7c 	.word	0x00003f7c
    3094:	00003f9c 	.word	0x00003f9c
    3098:	00003fbc 	.word	0x00003fbc
    309c:	00003915 	.word	0x00003915

000030a0 <__sfputc_r>:
    30a0:	6893      	ldr	r3, [r2, #8]
    30a2:	b510      	push	{r4, lr}
    30a4:	3b01      	subs	r3, #1
    30a6:	6093      	str	r3, [r2, #8]
    30a8:	2b00      	cmp	r3, #0
    30aa:	da05      	bge.n	30b8 <__sfputc_r+0x18>
    30ac:	6994      	ldr	r4, [r2, #24]
    30ae:	42a3      	cmp	r3, r4
    30b0:	db08      	blt.n	30c4 <__sfputc_r+0x24>
    30b2:	b2cb      	uxtb	r3, r1
    30b4:	2b0a      	cmp	r3, #10
    30b6:	d005      	beq.n	30c4 <__sfputc_r+0x24>
    30b8:	6813      	ldr	r3, [r2, #0]
    30ba:	1c58      	adds	r0, r3, #1
    30bc:	6010      	str	r0, [r2, #0]
    30be:	7019      	strb	r1, [r3, #0]
    30c0:	b2c8      	uxtb	r0, r1
    30c2:	e001      	b.n	30c8 <__sfputc_r+0x28>
    30c4:	f000 faa6 	bl	3614 <__swbuf_r>
    30c8:	bd10      	pop	{r4, pc}

000030ca <__sfputs_r>:
    30ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30cc:	1c06      	adds	r6, r0, #0
    30ce:	1c0f      	adds	r7, r1, #0
    30d0:	1c14      	adds	r4, r2, #0
    30d2:	18d5      	adds	r5, r2, r3
    30d4:	42ac      	cmp	r4, r5
    30d6:	d008      	beq.n	30ea <__sfputs_r+0x20>
    30d8:	7821      	ldrb	r1, [r4, #0]
    30da:	1c30      	adds	r0, r6, #0
    30dc:	1c3a      	adds	r2, r7, #0
    30de:	f7ff ffdf 	bl	30a0 <__sfputc_r>
    30e2:	3401      	adds	r4, #1
    30e4:	1c43      	adds	r3, r0, #1
    30e6:	d1f5      	bne.n	30d4 <__sfputs_r+0xa>
    30e8:	e000      	b.n	30ec <__sfputs_r+0x22>
    30ea:	2000      	movs	r0, #0
    30ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000030f0 <_vfiprintf_r>:
    30f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30f2:	b09f      	sub	sp, #124	; 0x7c
    30f4:	1c06      	adds	r6, r0, #0
    30f6:	1c0f      	adds	r7, r1, #0
    30f8:	9203      	str	r2, [sp, #12]
    30fa:	9305      	str	r3, [sp, #20]
    30fc:	2800      	cmp	r0, #0
    30fe:	d004      	beq.n	310a <_vfiprintf_r+0x1a>
    3100:	6981      	ldr	r1, [r0, #24]
    3102:	2900      	cmp	r1, #0
    3104:	d101      	bne.n	310a <_vfiprintf_r+0x1a>
    3106:	f000 fc59 	bl	39bc <__sinit>
    310a:	4b75      	ldr	r3, [pc, #468]	; (32e0 <_vfiprintf_r+0x1f0>)
    310c:	429f      	cmp	r7, r3
    310e:	d101      	bne.n	3114 <_vfiprintf_r+0x24>
    3110:	6877      	ldr	r7, [r6, #4]
    3112:	e008      	b.n	3126 <_vfiprintf_r+0x36>
    3114:	4b73      	ldr	r3, [pc, #460]	; (32e4 <_vfiprintf_r+0x1f4>)
    3116:	429f      	cmp	r7, r3
    3118:	d101      	bne.n	311e <_vfiprintf_r+0x2e>
    311a:	68b7      	ldr	r7, [r6, #8]
    311c:	e003      	b.n	3126 <_vfiprintf_r+0x36>
    311e:	4b72      	ldr	r3, [pc, #456]	; (32e8 <_vfiprintf_r+0x1f8>)
    3120:	429f      	cmp	r7, r3
    3122:	d100      	bne.n	3126 <_vfiprintf_r+0x36>
    3124:	68f7      	ldr	r7, [r6, #12]
    3126:	89bb      	ldrh	r3, [r7, #12]
    3128:	071a      	lsls	r2, r3, #28
    312a:	d50a      	bpl.n	3142 <_vfiprintf_r+0x52>
    312c:	693b      	ldr	r3, [r7, #16]
    312e:	2b00      	cmp	r3, #0
    3130:	d007      	beq.n	3142 <_vfiprintf_r+0x52>
    3132:	ad06      	add	r5, sp, #24
    3134:	2300      	movs	r3, #0
    3136:	616b      	str	r3, [r5, #20]
    3138:	2320      	movs	r3, #32
    313a:	766b      	strb	r3, [r5, #25]
    313c:	2330      	movs	r3, #48	; 0x30
    313e:	76ab      	strb	r3, [r5, #26]
    3140:	e03b      	b.n	31ba <_vfiprintf_r+0xca>
    3142:	1c30      	adds	r0, r6, #0
    3144:	1c39      	adds	r1, r7, #0
    3146:	f000 fabd 	bl	36c4 <__swsetup_r>
    314a:	2800      	cmp	r0, #0
    314c:	d0f1      	beq.n	3132 <_vfiprintf_r+0x42>
    314e:	2001      	movs	r0, #1
    3150:	4240      	negs	r0, r0
    3152:	e0c2      	b.n	32da <_vfiprintf_r+0x1ea>
    3154:	9a05      	ldr	r2, [sp, #20]
    3156:	1d11      	adds	r1, r2, #4
    3158:	6812      	ldr	r2, [r2, #0]
    315a:	9105      	str	r1, [sp, #20]
    315c:	2a00      	cmp	r2, #0
    315e:	db76      	blt.n	324e <_vfiprintf_r+0x15e>
    3160:	9209      	str	r2, [sp, #36]	; 0x24
    3162:	3401      	adds	r4, #1
    3164:	7823      	ldrb	r3, [r4, #0]
    3166:	2b2e      	cmp	r3, #46	; 0x2e
    3168:	d100      	bne.n	316c <_vfiprintf_r+0x7c>
    316a:	e081      	b.n	3270 <_vfiprintf_r+0x180>
    316c:	7821      	ldrb	r1, [r4, #0]
    316e:	485f      	ldr	r0, [pc, #380]	; (32ec <_vfiprintf_r+0x1fc>)
    3170:	2203      	movs	r2, #3
    3172:	f000 fced 	bl	3b50 <memchr>
    3176:	2800      	cmp	r0, #0
    3178:	d007      	beq.n	318a <_vfiprintf_r+0x9a>
    317a:	495c      	ldr	r1, [pc, #368]	; (32ec <_vfiprintf_r+0x1fc>)
    317c:	682a      	ldr	r2, [r5, #0]
    317e:	1a43      	subs	r3, r0, r1
    3180:	2040      	movs	r0, #64	; 0x40
    3182:	4098      	lsls	r0, r3
    3184:	4310      	orrs	r0, r2
    3186:	6028      	str	r0, [r5, #0]
    3188:	3401      	adds	r4, #1
    318a:	7821      	ldrb	r1, [r4, #0]
    318c:	1c63      	adds	r3, r4, #1
    318e:	4858      	ldr	r0, [pc, #352]	; (32f0 <_vfiprintf_r+0x200>)
    3190:	2206      	movs	r2, #6
    3192:	9303      	str	r3, [sp, #12]
    3194:	7629      	strb	r1, [r5, #24]
    3196:	f000 fcdb 	bl	3b50 <memchr>
    319a:	2800      	cmp	r0, #0
    319c:	d100      	bne.n	31a0 <_vfiprintf_r+0xb0>
    319e:	e08a      	b.n	32b6 <_vfiprintf_r+0x1c6>
    31a0:	4b54      	ldr	r3, [pc, #336]	; (32f4 <_vfiprintf_r+0x204>)
    31a2:	2b00      	cmp	r3, #0
    31a4:	d17e      	bne.n	32a4 <_vfiprintf_r+0x1b4>
    31a6:	9b05      	ldr	r3, [sp, #20]
    31a8:	2207      	movs	r2, #7
    31aa:	3307      	adds	r3, #7
    31ac:	4393      	bics	r3, r2
    31ae:	3308      	adds	r3, #8
    31b0:	9305      	str	r3, [sp, #20]
    31b2:	696a      	ldr	r2, [r5, #20]
    31b4:	9904      	ldr	r1, [sp, #16]
    31b6:	1853      	adds	r3, r2, r1
    31b8:	616b      	str	r3, [r5, #20]
    31ba:	9c03      	ldr	r4, [sp, #12]
    31bc:	7823      	ldrb	r3, [r4, #0]
    31be:	2b00      	cmp	r3, #0
    31c0:	d104      	bne.n	31cc <_vfiprintf_r+0xdc>
    31c2:	9903      	ldr	r1, [sp, #12]
    31c4:	1a61      	subs	r1, r4, r1
    31c6:	9102      	str	r1, [sp, #8]
    31c8:	d010      	beq.n	31ec <_vfiprintf_r+0xfc>
    31ca:	e003      	b.n	31d4 <_vfiprintf_r+0xe4>
    31cc:	2b25      	cmp	r3, #37	; 0x25
    31ce:	d0f8      	beq.n	31c2 <_vfiprintf_r+0xd2>
    31d0:	3401      	adds	r4, #1
    31d2:	e7f3      	b.n	31bc <_vfiprintf_r+0xcc>
    31d4:	1c30      	adds	r0, r6, #0
    31d6:	1c39      	adds	r1, r7, #0
    31d8:	9a03      	ldr	r2, [sp, #12]
    31da:	9b02      	ldr	r3, [sp, #8]
    31dc:	f7ff ff75 	bl	30ca <__sfputs_r>
    31e0:	3001      	adds	r0, #1
    31e2:	d075      	beq.n	32d0 <_vfiprintf_r+0x1e0>
    31e4:	696a      	ldr	r2, [r5, #20]
    31e6:	9902      	ldr	r1, [sp, #8]
    31e8:	1853      	adds	r3, r2, r1
    31ea:	616b      	str	r3, [r5, #20]
    31ec:	7823      	ldrb	r3, [r4, #0]
    31ee:	2b00      	cmp	r3, #0
    31f0:	d06e      	beq.n	32d0 <_vfiprintf_r+0x1e0>
    31f2:	2201      	movs	r2, #1
    31f4:	4252      	negs	r2, r2
    31f6:	606a      	str	r2, [r5, #4]
    31f8:	466a      	mov	r2, sp
    31fa:	2300      	movs	r3, #0
    31fc:	325b      	adds	r2, #91	; 0x5b
    31fe:	3401      	adds	r4, #1
    3200:	602b      	str	r3, [r5, #0]
    3202:	60eb      	str	r3, [r5, #12]
    3204:	60ab      	str	r3, [r5, #8]
    3206:	7013      	strb	r3, [r2, #0]
    3208:	65ab      	str	r3, [r5, #88]	; 0x58
    320a:	7821      	ldrb	r1, [r4, #0]
    320c:	483a      	ldr	r0, [pc, #232]	; (32f8 <_vfiprintf_r+0x208>)
    320e:	2205      	movs	r2, #5
    3210:	f000 fc9e 	bl	3b50 <memchr>
    3214:	2800      	cmp	r0, #0
    3216:	d008      	beq.n	322a <_vfiprintf_r+0x13a>
    3218:	4a37      	ldr	r2, [pc, #220]	; (32f8 <_vfiprintf_r+0x208>)
    321a:	3401      	adds	r4, #1
    321c:	1a83      	subs	r3, r0, r2
    321e:	2001      	movs	r0, #1
    3220:	4098      	lsls	r0, r3
    3222:	682b      	ldr	r3, [r5, #0]
    3224:	4318      	orrs	r0, r3
    3226:	6028      	str	r0, [r5, #0]
    3228:	e7ef      	b.n	320a <_vfiprintf_r+0x11a>
    322a:	682b      	ldr	r3, [r5, #0]
    322c:	06d9      	lsls	r1, r3, #27
    322e:	d503      	bpl.n	3238 <_vfiprintf_r+0x148>
    3230:	466a      	mov	r2, sp
    3232:	2120      	movs	r1, #32
    3234:	325b      	adds	r2, #91	; 0x5b
    3236:	7011      	strb	r1, [r2, #0]
    3238:	071a      	lsls	r2, r3, #28
    323a:	d503      	bpl.n	3244 <_vfiprintf_r+0x154>
    323c:	466a      	mov	r2, sp
    323e:	212b      	movs	r1, #43	; 0x2b
    3240:	325b      	adds	r2, #91	; 0x5b
    3242:	7011      	strb	r1, [r2, #0]
    3244:	7822      	ldrb	r2, [r4, #0]
    3246:	2a2a      	cmp	r2, #42	; 0x2a
    3248:	d084      	beq.n	3154 <_vfiprintf_r+0x64>
    324a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    324c:	e005      	b.n	325a <_vfiprintf_r+0x16a>
    324e:	4252      	negs	r2, r2
    3250:	60ea      	str	r2, [r5, #12]
    3252:	2202      	movs	r2, #2
    3254:	4313      	orrs	r3, r2
    3256:	602b      	str	r3, [r5, #0]
    3258:	e783      	b.n	3162 <_vfiprintf_r+0x72>
    325a:	7822      	ldrb	r2, [r4, #0]
    325c:	3a30      	subs	r2, #48	; 0x30
    325e:	2a09      	cmp	r2, #9
    3260:	d804      	bhi.n	326c <_vfiprintf_r+0x17c>
    3262:	210a      	movs	r1, #10
    3264:	434b      	muls	r3, r1
    3266:	3401      	adds	r4, #1
    3268:	189b      	adds	r3, r3, r2
    326a:	e7f6      	b.n	325a <_vfiprintf_r+0x16a>
    326c:	9309      	str	r3, [sp, #36]	; 0x24
    326e:	e779      	b.n	3164 <_vfiprintf_r+0x74>
    3270:	7863      	ldrb	r3, [r4, #1]
    3272:	2b2a      	cmp	r3, #42	; 0x2a
    3274:	d109      	bne.n	328a <_vfiprintf_r+0x19a>
    3276:	9b05      	ldr	r3, [sp, #20]
    3278:	3402      	adds	r4, #2
    327a:	1d1a      	adds	r2, r3, #4
    327c:	681b      	ldr	r3, [r3, #0]
    327e:	9205      	str	r2, [sp, #20]
    3280:	2b00      	cmp	r3, #0
    3282:	da0d      	bge.n	32a0 <_vfiprintf_r+0x1b0>
    3284:	2301      	movs	r3, #1
    3286:	425b      	negs	r3, r3
    3288:	e00a      	b.n	32a0 <_vfiprintf_r+0x1b0>
    328a:	3401      	adds	r4, #1
    328c:	2300      	movs	r3, #0
    328e:	7822      	ldrb	r2, [r4, #0]
    3290:	3a30      	subs	r2, #48	; 0x30
    3292:	2a09      	cmp	r2, #9
    3294:	d804      	bhi.n	32a0 <_vfiprintf_r+0x1b0>
    3296:	210a      	movs	r1, #10
    3298:	434b      	muls	r3, r1
    329a:	3401      	adds	r4, #1
    329c:	189b      	adds	r3, r3, r2
    329e:	e7f6      	b.n	328e <_vfiprintf_r+0x19e>
    32a0:	9307      	str	r3, [sp, #28]
    32a2:	e763      	b.n	316c <_vfiprintf_r+0x7c>
    32a4:	ab05      	add	r3, sp, #20
    32a6:	9300      	str	r3, [sp, #0]
    32a8:	1c30      	adds	r0, r6, #0
    32aa:	1c29      	adds	r1, r5, #0
    32ac:	1c3a      	adds	r2, r7, #0
    32ae:	4b13      	ldr	r3, [pc, #76]	; (32fc <_vfiprintf_r+0x20c>)
    32b0:	e000      	b.n	32b4 <_vfiprintf_r+0x1c4>
    32b2:	bf00      	nop
    32b4:	e007      	b.n	32c6 <_vfiprintf_r+0x1d6>
    32b6:	ab05      	add	r3, sp, #20
    32b8:	9300      	str	r3, [sp, #0]
    32ba:	1c30      	adds	r0, r6, #0
    32bc:	1c29      	adds	r1, r5, #0
    32be:	1c3a      	adds	r2, r7, #0
    32c0:	4b0e      	ldr	r3, [pc, #56]	; (32fc <_vfiprintf_r+0x20c>)
    32c2:	f000 f891 	bl	33e8 <_printf_i>
    32c6:	9004      	str	r0, [sp, #16]
    32c8:	9904      	ldr	r1, [sp, #16]
    32ca:	3101      	adds	r1, #1
    32cc:	d000      	beq.n	32d0 <_vfiprintf_r+0x1e0>
    32ce:	e770      	b.n	31b2 <_vfiprintf_r+0xc2>
    32d0:	89bb      	ldrh	r3, [r7, #12]
    32d2:	065a      	lsls	r2, r3, #25
    32d4:	d500      	bpl.n	32d8 <_vfiprintf_r+0x1e8>
    32d6:	e73a      	b.n	314e <_vfiprintf_r+0x5e>
    32d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    32da:	b01f      	add	sp, #124	; 0x7c
    32dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	00003f7c 	.word	0x00003f7c
    32e4:	00003f9c 	.word	0x00003f9c
    32e8:	00003fbc 	.word	0x00003fbc
    32ec:	00003f4e 	.word	0x00003f4e
    32f0:	00003f52 	.word	0x00003f52
    32f4:	00000000 	.word	0x00000000
    32f8:	00003f48 	.word	0x00003f48
    32fc:	000030cb 	.word	0x000030cb

00003300 <_printf_common>:
    3300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3302:	1c15      	adds	r5, r2, #0
    3304:	9301      	str	r3, [sp, #4]
    3306:	690a      	ldr	r2, [r1, #16]
    3308:	688b      	ldr	r3, [r1, #8]
    330a:	1c06      	adds	r6, r0, #0
    330c:	1c0c      	adds	r4, r1, #0
    330e:	4293      	cmp	r3, r2
    3310:	da00      	bge.n	3314 <_printf_common+0x14>
    3312:	1c13      	adds	r3, r2, #0
    3314:	1c22      	adds	r2, r4, #0
    3316:	602b      	str	r3, [r5, #0]
    3318:	3243      	adds	r2, #67	; 0x43
    331a:	7812      	ldrb	r2, [r2, #0]
    331c:	2a00      	cmp	r2, #0
    331e:	d001      	beq.n	3324 <_printf_common+0x24>
    3320:	3301      	adds	r3, #1
    3322:	602b      	str	r3, [r5, #0]
    3324:	6820      	ldr	r0, [r4, #0]
    3326:	0680      	lsls	r0, r0, #26
    3328:	d502      	bpl.n	3330 <_printf_common+0x30>
    332a:	682b      	ldr	r3, [r5, #0]
    332c:	3302      	adds	r3, #2
    332e:	602b      	str	r3, [r5, #0]
    3330:	6821      	ldr	r1, [r4, #0]
    3332:	2706      	movs	r7, #6
    3334:	400f      	ands	r7, r1
    3336:	d01f      	beq.n	3378 <_printf_common+0x78>
    3338:	1c23      	adds	r3, r4, #0
    333a:	3343      	adds	r3, #67	; 0x43
    333c:	781b      	ldrb	r3, [r3, #0]
    333e:	1e5a      	subs	r2, r3, #1
    3340:	4193      	sbcs	r3, r2
    3342:	6822      	ldr	r2, [r4, #0]
    3344:	0692      	lsls	r2, r2, #26
    3346:	d51f      	bpl.n	3388 <_printf_common+0x88>
    3348:	18e1      	adds	r1, r4, r3
    334a:	3140      	adds	r1, #64	; 0x40
    334c:	2030      	movs	r0, #48	; 0x30
    334e:	70c8      	strb	r0, [r1, #3]
    3350:	1c21      	adds	r1, r4, #0
    3352:	1c5a      	adds	r2, r3, #1
    3354:	3145      	adds	r1, #69	; 0x45
    3356:	7809      	ldrb	r1, [r1, #0]
    3358:	18a2      	adds	r2, r4, r2
    335a:	3240      	adds	r2, #64	; 0x40
    335c:	3302      	adds	r3, #2
    335e:	70d1      	strb	r1, [r2, #3]
    3360:	e012      	b.n	3388 <_printf_common+0x88>
    3362:	1c22      	adds	r2, r4, #0
    3364:	1c30      	adds	r0, r6, #0
    3366:	9901      	ldr	r1, [sp, #4]
    3368:	3219      	adds	r2, #25
    336a:	2301      	movs	r3, #1
    336c:	9f08      	ldr	r7, [sp, #32]
    336e:	47b8      	blx	r7
    3370:	3001      	adds	r0, #1
    3372:	d011      	beq.n	3398 <_printf_common+0x98>
    3374:	9f00      	ldr	r7, [sp, #0]
    3376:	3701      	adds	r7, #1
    3378:	9700      	str	r7, [sp, #0]
    337a:	68e0      	ldr	r0, [r4, #12]
    337c:	6829      	ldr	r1, [r5, #0]
    337e:	9f00      	ldr	r7, [sp, #0]
    3380:	1a43      	subs	r3, r0, r1
    3382:	429f      	cmp	r7, r3
    3384:	dbed      	blt.n	3362 <_printf_common+0x62>
    3386:	e7d7      	b.n	3338 <_printf_common+0x38>
    3388:	1c22      	adds	r2, r4, #0
    338a:	1c30      	adds	r0, r6, #0
    338c:	9901      	ldr	r1, [sp, #4]
    338e:	3243      	adds	r2, #67	; 0x43
    3390:	9f08      	ldr	r7, [sp, #32]
    3392:	47b8      	blx	r7
    3394:	3001      	adds	r0, #1
    3396:	d102      	bne.n	339e <_printf_common+0x9e>
    3398:	2001      	movs	r0, #1
    339a:	4240      	negs	r0, r0
    339c:	e023      	b.n	33e6 <_printf_common+0xe6>
    339e:	6820      	ldr	r0, [r4, #0]
    33a0:	2106      	movs	r1, #6
    33a2:	682b      	ldr	r3, [r5, #0]
    33a4:	68e2      	ldr	r2, [r4, #12]
    33a6:	4001      	ands	r1, r0
    33a8:	2500      	movs	r5, #0
    33aa:	2904      	cmp	r1, #4
    33ac:	d103      	bne.n	33b6 <_printf_common+0xb6>
    33ae:	1ad5      	subs	r5, r2, r3
    33b0:	43eb      	mvns	r3, r5
    33b2:	17db      	asrs	r3, r3, #31
    33b4:	401d      	ands	r5, r3
    33b6:	68a2      	ldr	r2, [r4, #8]
    33b8:	6923      	ldr	r3, [r4, #16]
    33ba:	429a      	cmp	r2, r3
    33bc:	dd01      	ble.n	33c2 <_printf_common+0xc2>
    33be:	1ad3      	subs	r3, r2, r3
    33c0:	18ed      	adds	r5, r5, r3
    33c2:	2700      	movs	r7, #0
    33c4:	9700      	str	r7, [sp, #0]
    33c6:	9f00      	ldr	r7, [sp, #0]
    33c8:	42af      	cmp	r7, r5
    33ca:	da0b      	bge.n	33e4 <_printf_common+0xe4>
    33cc:	1c22      	adds	r2, r4, #0
    33ce:	1c30      	adds	r0, r6, #0
    33d0:	9901      	ldr	r1, [sp, #4]
    33d2:	321a      	adds	r2, #26
    33d4:	2301      	movs	r3, #1
    33d6:	9f08      	ldr	r7, [sp, #32]
    33d8:	47b8      	blx	r7
    33da:	3001      	adds	r0, #1
    33dc:	d0dc      	beq.n	3398 <_printf_common+0x98>
    33de:	9f00      	ldr	r7, [sp, #0]
    33e0:	3701      	adds	r7, #1
    33e2:	e7ef      	b.n	33c4 <_printf_common+0xc4>
    33e4:	2000      	movs	r0, #0
    33e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000033e8 <_printf_i>:
    33e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ea:	1c0d      	adds	r5, r1, #0
    33ec:	b08b      	sub	sp, #44	; 0x2c
    33ee:	3543      	adds	r5, #67	; 0x43
    33f0:	9206      	str	r2, [sp, #24]
    33f2:	9005      	str	r0, [sp, #20]
    33f4:	9307      	str	r3, [sp, #28]
    33f6:	9504      	str	r5, [sp, #16]
    33f8:	7e0b      	ldrb	r3, [r1, #24]
    33fa:	1c0c      	adds	r4, r1, #0
    33fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    33fe:	2b6e      	cmp	r3, #110	; 0x6e
    3400:	d100      	bne.n	3404 <_printf_i+0x1c>
    3402:	e0a7      	b.n	3554 <_printf_i+0x16c>
    3404:	d811      	bhi.n	342a <_printf_i+0x42>
    3406:	2b63      	cmp	r3, #99	; 0x63
    3408:	d022      	beq.n	3450 <_printf_i+0x68>
    340a:	d809      	bhi.n	3420 <_printf_i+0x38>
    340c:	2b00      	cmp	r3, #0
    340e:	d100      	bne.n	3412 <_printf_i+0x2a>
    3410:	e0b0      	b.n	3574 <_printf_i+0x18c>
    3412:	2b58      	cmp	r3, #88	; 0x58
    3414:	d000      	beq.n	3418 <_printf_i+0x30>
    3416:	e0c0      	b.n	359a <_printf_i+0x1b2>
    3418:	3145      	adds	r1, #69	; 0x45
    341a:	700b      	strb	r3, [r1, #0]
    341c:	4d7b      	ldr	r5, [pc, #492]	; (360c <_printf_i+0x224>)
    341e:	e04e      	b.n	34be <_printf_i+0xd6>
    3420:	2b64      	cmp	r3, #100	; 0x64
    3422:	d01c      	beq.n	345e <_printf_i+0x76>
    3424:	2b69      	cmp	r3, #105	; 0x69
    3426:	d01a      	beq.n	345e <_printf_i+0x76>
    3428:	e0b7      	b.n	359a <_printf_i+0x1b2>
    342a:	2b73      	cmp	r3, #115	; 0x73
    342c:	d100      	bne.n	3430 <_printf_i+0x48>
    342e:	e0a5      	b.n	357c <_printf_i+0x194>
    3430:	d809      	bhi.n	3446 <_printf_i+0x5e>
    3432:	2b6f      	cmp	r3, #111	; 0x6f
    3434:	d029      	beq.n	348a <_printf_i+0xa2>
    3436:	2b70      	cmp	r3, #112	; 0x70
    3438:	d000      	beq.n	343c <_printf_i+0x54>
    343a:	e0ae      	b.n	359a <_printf_i+0x1b2>
    343c:	680e      	ldr	r6, [r1, #0]
    343e:	2320      	movs	r3, #32
    3440:	4333      	orrs	r3, r6
    3442:	600b      	str	r3, [r1, #0]
    3444:	e036      	b.n	34b4 <_printf_i+0xcc>
    3446:	2b75      	cmp	r3, #117	; 0x75
    3448:	d01f      	beq.n	348a <_printf_i+0xa2>
    344a:	2b78      	cmp	r3, #120	; 0x78
    344c:	d032      	beq.n	34b4 <_printf_i+0xcc>
    344e:	e0a4      	b.n	359a <_printf_i+0x1b2>
    3450:	6813      	ldr	r3, [r2, #0]
    3452:	1c0d      	adds	r5, r1, #0
    3454:	1d19      	adds	r1, r3, #4
    3456:	3542      	adds	r5, #66	; 0x42
    3458:	6011      	str	r1, [r2, #0]
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	e09f      	b.n	359e <_printf_i+0x1b6>
    345e:	6821      	ldr	r1, [r4, #0]
    3460:	6813      	ldr	r3, [r2, #0]
    3462:	060e      	lsls	r6, r1, #24
    3464:	d503      	bpl.n	346e <_printf_i+0x86>
    3466:	1d19      	adds	r1, r3, #4
    3468:	6011      	str	r1, [r2, #0]
    346a:	681e      	ldr	r6, [r3, #0]
    346c:	e005      	b.n	347a <_printf_i+0x92>
    346e:	0648      	lsls	r0, r1, #25
    3470:	d5f9      	bpl.n	3466 <_printf_i+0x7e>
    3472:	1d19      	adds	r1, r3, #4
    3474:	6011      	str	r1, [r2, #0]
    3476:	2100      	movs	r1, #0
    3478:	5e5e      	ldrsh	r6, [r3, r1]
    347a:	4b64      	ldr	r3, [pc, #400]	; (360c <_printf_i+0x224>)
    347c:	2e00      	cmp	r6, #0
    347e:	da3b      	bge.n	34f8 <_printf_i+0x110>
    3480:	9d04      	ldr	r5, [sp, #16]
    3482:	222d      	movs	r2, #45	; 0x2d
    3484:	4276      	negs	r6, r6
    3486:	702a      	strb	r2, [r5, #0]
    3488:	e036      	b.n	34f8 <_printf_i+0x110>
    348a:	6821      	ldr	r1, [r4, #0]
    348c:	6813      	ldr	r3, [r2, #0]
    348e:	060e      	lsls	r6, r1, #24
    3490:	d503      	bpl.n	349a <_printf_i+0xb2>
    3492:	1d19      	adds	r1, r3, #4
    3494:	6011      	str	r1, [r2, #0]
    3496:	681e      	ldr	r6, [r3, #0]
    3498:	e004      	b.n	34a4 <_printf_i+0xbc>
    349a:	0648      	lsls	r0, r1, #25
    349c:	d5f9      	bpl.n	3492 <_printf_i+0xaa>
    349e:	1d19      	adds	r1, r3, #4
    34a0:	881e      	ldrh	r6, [r3, #0]
    34a2:	6011      	str	r1, [r2, #0]
    34a4:	4b59      	ldr	r3, [pc, #356]	; (360c <_printf_i+0x224>)
    34a6:	7e22      	ldrb	r2, [r4, #24]
    34a8:	9303      	str	r3, [sp, #12]
    34aa:	2708      	movs	r7, #8
    34ac:	2a6f      	cmp	r2, #111	; 0x6f
    34ae:	d01e      	beq.n	34ee <_printf_i+0x106>
    34b0:	270a      	movs	r7, #10
    34b2:	e01c      	b.n	34ee <_printf_i+0x106>
    34b4:	1c23      	adds	r3, r4, #0
    34b6:	2178      	movs	r1, #120	; 0x78
    34b8:	3345      	adds	r3, #69	; 0x45
    34ba:	4d55      	ldr	r5, [pc, #340]	; (3610 <_printf_i+0x228>)
    34bc:	7019      	strb	r1, [r3, #0]
    34be:	6811      	ldr	r1, [r2, #0]
    34c0:	6823      	ldr	r3, [r4, #0]
    34c2:	1d08      	adds	r0, r1, #4
    34c4:	9503      	str	r5, [sp, #12]
    34c6:	6010      	str	r0, [r2, #0]
    34c8:	061e      	lsls	r6, r3, #24
    34ca:	d501      	bpl.n	34d0 <_printf_i+0xe8>
    34cc:	680e      	ldr	r6, [r1, #0]
    34ce:	e002      	b.n	34d6 <_printf_i+0xee>
    34d0:	0658      	lsls	r0, r3, #25
    34d2:	d5fb      	bpl.n	34cc <_printf_i+0xe4>
    34d4:	880e      	ldrh	r6, [r1, #0]
    34d6:	07d9      	lsls	r1, r3, #31
    34d8:	d502      	bpl.n	34e0 <_printf_i+0xf8>
    34da:	2220      	movs	r2, #32
    34dc:	4313      	orrs	r3, r2
    34de:	6023      	str	r3, [r4, #0]
    34e0:	2710      	movs	r7, #16
    34e2:	2e00      	cmp	r6, #0
    34e4:	d103      	bne.n	34ee <_printf_i+0x106>
    34e6:	6822      	ldr	r2, [r4, #0]
    34e8:	2320      	movs	r3, #32
    34ea:	439a      	bics	r2, r3
    34ec:	6022      	str	r2, [r4, #0]
    34ee:	1c23      	adds	r3, r4, #0
    34f0:	2200      	movs	r2, #0
    34f2:	3343      	adds	r3, #67	; 0x43
    34f4:	701a      	strb	r2, [r3, #0]
    34f6:	e001      	b.n	34fc <_printf_i+0x114>
    34f8:	9303      	str	r3, [sp, #12]
    34fa:	270a      	movs	r7, #10
    34fc:	6863      	ldr	r3, [r4, #4]
    34fe:	60a3      	str	r3, [r4, #8]
    3500:	2b00      	cmp	r3, #0
    3502:	db03      	blt.n	350c <_printf_i+0x124>
    3504:	6825      	ldr	r5, [r4, #0]
    3506:	2204      	movs	r2, #4
    3508:	4395      	bics	r5, r2
    350a:	6025      	str	r5, [r4, #0]
    350c:	2e00      	cmp	r6, #0
    350e:	d102      	bne.n	3516 <_printf_i+0x12e>
    3510:	9d04      	ldr	r5, [sp, #16]
    3512:	2b00      	cmp	r3, #0
    3514:	d00e      	beq.n	3534 <_printf_i+0x14c>
    3516:	9d04      	ldr	r5, [sp, #16]
    3518:	1c30      	adds	r0, r6, #0
    351a:	1c39      	adds	r1, r7, #0
    351c:	f7ff fcb0 	bl	2e80 <__aeabi_uidivmod>
    3520:	9803      	ldr	r0, [sp, #12]
    3522:	3d01      	subs	r5, #1
    3524:	5c43      	ldrb	r3, [r0, r1]
    3526:	1c30      	adds	r0, r6, #0
    3528:	702b      	strb	r3, [r5, #0]
    352a:	1c39      	adds	r1, r7, #0
    352c:	f7ff fc64 	bl	2df8 <__aeabi_uidiv>
    3530:	1e06      	subs	r6, r0, #0
    3532:	d1f1      	bne.n	3518 <_printf_i+0x130>
    3534:	2f08      	cmp	r7, #8
    3536:	d109      	bne.n	354c <_printf_i+0x164>
    3538:	6821      	ldr	r1, [r4, #0]
    353a:	07c9      	lsls	r1, r1, #31
    353c:	d506      	bpl.n	354c <_printf_i+0x164>
    353e:	6862      	ldr	r2, [r4, #4]
    3540:	6923      	ldr	r3, [r4, #16]
    3542:	429a      	cmp	r2, r3
    3544:	dc02      	bgt.n	354c <_printf_i+0x164>
    3546:	3d01      	subs	r5, #1
    3548:	2330      	movs	r3, #48	; 0x30
    354a:	702b      	strb	r3, [r5, #0]
    354c:	9e04      	ldr	r6, [sp, #16]
    354e:	1b73      	subs	r3, r6, r5
    3550:	6123      	str	r3, [r4, #16]
    3552:	e02a      	b.n	35aa <_printf_i+0x1c2>
    3554:	6808      	ldr	r0, [r1, #0]
    3556:	6813      	ldr	r3, [r2, #0]
    3558:	6949      	ldr	r1, [r1, #20]
    355a:	0605      	lsls	r5, r0, #24
    355c:	d504      	bpl.n	3568 <_printf_i+0x180>
    355e:	1d18      	adds	r0, r3, #4
    3560:	6010      	str	r0, [r2, #0]
    3562:	681b      	ldr	r3, [r3, #0]
    3564:	6019      	str	r1, [r3, #0]
    3566:	e005      	b.n	3574 <_printf_i+0x18c>
    3568:	0646      	lsls	r6, r0, #25
    356a:	d5f8      	bpl.n	355e <_printf_i+0x176>
    356c:	1d18      	adds	r0, r3, #4
    356e:	6010      	str	r0, [r2, #0]
    3570:	681b      	ldr	r3, [r3, #0]
    3572:	8019      	strh	r1, [r3, #0]
    3574:	2300      	movs	r3, #0
    3576:	6123      	str	r3, [r4, #16]
    3578:	9d04      	ldr	r5, [sp, #16]
    357a:	e016      	b.n	35aa <_printf_i+0x1c2>
    357c:	6813      	ldr	r3, [r2, #0]
    357e:	1d19      	adds	r1, r3, #4
    3580:	6011      	str	r1, [r2, #0]
    3582:	681d      	ldr	r5, [r3, #0]
    3584:	1c28      	adds	r0, r5, #0
    3586:	f000 fbe9 	bl	3d5c <strlen>
    358a:	6863      	ldr	r3, [r4, #4]
    358c:	6120      	str	r0, [r4, #16]
    358e:	4298      	cmp	r0, r3
    3590:	d900      	bls.n	3594 <_printf_i+0x1ac>
    3592:	6123      	str	r3, [r4, #16]
    3594:	6920      	ldr	r0, [r4, #16]
    3596:	6060      	str	r0, [r4, #4]
    3598:	e004      	b.n	35a4 <_printf_i+0x1bc>
    359a:	1c25      	adds	r5, r4, #0
    359c:	3542      	adds	r5, #66	; 0x42
    359e:	702b      	strb	r3, [r5, #0]
    35a0:	2301      	movs	r3, #1
    35a2:	6123      	str	r3, [r4, #16]
    35a4:	9e04      	ldr	r6, [sp, #16]
    35a6:	2300      	movs	r3, #0
    35a8:	7033      	strb	r3, [r6, #0]
    35aa:	9e07      	ldr	r6, [sp, #28]
    35ac:	9805      	ldr	r0, [sp, #20]
    35ae:	9600      	str	r6, [sp, #0]
    35b0:	1c21      	adds	r1, r4, #0
    35b2:	aa09      	add	r2, sp, #36	; 0x24
    35b4:	9b06      	ldr	r3, [sp, #24]
    35b6:	f7ff fea3 	bl	3300 <_printf_common>
    35ba:	3001      	adds	r0, #1
    35bc:	d102      	bne.n	35c4 <_printf_i+0x1dc>
    35be:	2001      	movs	r0, #1
    35c0:	4240      	negs	r0, r0
    35c2:	e021      	b.n	3608 <_printf_i+0x220>
    35c4:	1c2a      	adds	r2, r5, #0
    35c6:	9805      	ldr	r0, [sp, #20]
    35c8:	9906      	ldr	r1, [sp, #24]
    35ca:	6923      	ldr	r3, [r4, #16]
    35cc:	9d07      	ldr	r5, [sp, #28]
    35ce:	47a8      	blx	r5
    35d0:	3001      	adds	r0, #1
    35d2:	d0f4      	beq.n	35be <_printf_i+0x1d6>
    35d4:	6826      	ldr	r6, [r4, #0]
    35d6:	07b6      	lsls	r6, r6, #30
    35d8:	d405      	bmi.n	35e6 <_printf_i+0x1fe>
    35da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    35dc:	68e0      	ldr	r0, [r4, #12]
    35de:	4298      	cmp	r0, r3
    35e0:	da12      	bge.n	3608 <_printf_i+0x220>
    35e2:	1c18      	adds	r0, r3, #0
    35e4:	e010      	b.n	3608 <_printf_i+0x220>
    35e6:	2500      	movs	r5, #0
    35e8:	68e0      	ldr	r0, [r4, #12]
    35ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    35ec:	1a43      	subs	r3, r0, r1
    35ee:	429d      	cmp	r5, r3
    35f0:	daf3      	bge.n	35da <_printf_i+0x1f2>
    35f2:	1c22      	adds	r2, r4, #0
    35f4:	9805      	ldr	r0, [sp, #20]
    35f6:	9906      	ldr	r1, [sp, #24]
    35f8:	3219      	adds	r2, #25
    35fa:	2301      	movs	r3, #1
    35fc:	9e07      	ldr	r6, [sp, #28]
    35fe:	47b0      	blx	r6
    3600:	3001      	adds	r0, #1
    3602:	d0dc      	beq.n	35be <_printf_i+0x1d6>
    3604:	3501      	adds	r5, #1
    3606:	e7ef      	b.n	35e8 <_printf_i+0x200>
    3608:	b00b      	add	sp, #44	; 0x2c
    360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    360c:	00003f59 	.word	0x00003f59
    3610:	00003f6a 	.word	0x00003f6a

00003614 <__swbuf_r>:
    3614:	b570      	push	{r4, r5, r6, lr}
    3616:	1c05      	adds	r5, r0, #0
    3618:	1c0e      	adds	r6, r1, #0
    361a:	1c14      	adds	r4, r2, #0
    361c:	2800      	cmp	r0, #0
    361e:	d004      	beq.n	362a <__swbuf_r+0x16>
    3620:	6982      	ldr	r2, [r0, #24]
    3622:	2a00      	cmp	r2, #0
    3624:	d101      	bne.n	362a <__swbuf_r+0x16>
    3626:	f000 f9c9 	bl	39bc <__sinit>
    362a:	4b23      	ldr	r3, [pc, #140]	; (36b8 <__swbuf_r+0xa4>)
    362c:	429c      	cmp	r4, r3
    362e:	d101      	bne.n	3634 <__swbuf_r+0x20>
    3630:	686c      	ldr	r4, [r5, #4]
    3632:	e008      	b.n	3646 <__swbuf_r+0x32>
    3634:	4b21      	ldr	r3, [pc, #132]	; (36bc <__swbuf_r+0xa8>)
    3636:	429c      	cmp	r4, r3
    3638:	d101      	bne.n	363e <__swbuf_r+0x2a>
    363a:	68ac      	ldr	r4, [r5, #8]
    363c:	e003      	b.n	3646 <__swbuf_r+0x32>
    363e:	4b20      	ldr	r3, [pc, #128]	; (36c0 <__swbuf_r+0xac>)
    3640:	429c      	cmp	r4, r3
    3642:	d100      	bne.n	3646 <__swbuf_r+0x32>
    3644:	68ec      	ldr	r4, [r5, #12]
    3646:	69a3      	ldr	r3, [r4, #24]
    3648:	60a3      	str	r3, [r4, #8]
    364a:	89a3      	ldrh	r3, [r4, #12]
    364c:	071a      	lsls	r2, r3, #28
    364e:	d50a      	bpl.n	3666 <__swbuf_r+0x52>
    3650:	6923      	ldr	r3, [r4, #16]
    3652:	2b00      	cmp	r3, #0
    3654:	d007      	beq.n	3666 <__swbuf_r+0x52>
    3656:	6822      	ldr	r2, [r4, #0]
    3658:	6923      	ldr	r3, [r4, #16]
    365a:	b2f6      	uxtb	r6, r6
    365c:	1ad0      	subs	r0, r2, r3
    365e:	6962      	ldr	r2, [r4, #20]
    3660:	4290      	cmp	r0, r2
    3662:	db0f      	blt.n	3684 <__swbuf_r+0x70>
    3664:	e008      	b.n	3678 <__swbuf_r+0x64>
    3666:	1c28      	adds	r0, r5, #0
    3668:	1c21      	adds	r1, r4, #0
    366a:	f000 f82b 	bl	36c4 <__swsetup_r>
    366e:	2800      	cmp	r0, #0
    3670:	d0f1      	beq.n	3656 <__swbuf_r+0x42>
    3672:	2001      	movs	r0, #1
    3674:	4240      	negs	r0, r0
    3676:	e01d      	b.n	36b4 <__swbuf_r+0xa0>
    3678:	1c28      	adds	r0, r5, #0
    367a:	1c21      	adds	r1, r4, #0
    367c:	f000 f91e 	bl	38bc <_fflush_r>
    3680:	2800      	cmp	r0, #0
    3682:	d1f6      	bne.n	3672 <__swbuf_r+0x5e>
    3684:	68a3      	ldr	r3, [r4, #8]
    3686:	3001      	adds	r0, #1
    3688:	3b01      	subs	r3, #1
    368a:	60a3      	str	r3, [r4, #8]
    368c:	6823      	ldr	r3, [r4, #0]
    368e:	1c5a      	adds	r2, r3, #1
    3690:	6022      	str	r2, [r4, #0]
    3692:	701e      	strb	r6, [r3, #0]
    3694:	6963      	ldr	r3, [r4, #20]
    3696:	4298      	cmp	r0, r3
    3698:	d005      	beq.n	36a6 <__swbuf_r+0x92>
    369a:	89a3      	ldrh	r3, [r4, #12]
    369c:	1c30      	adds	r0, r6, #0
    369e:	07da      	lsls	r2, r3, #31
    36a0:	d508      	bpl.n	36b4 <__swbuf_r+0xa0>
    36a2:	2e0a      	cmp	r6, #10
    36a4:	d106      	bne.n	36b4 <__swbuf_r+0xa0>
    36a6:	1c28      	adds	r0, r5, #0
    36a8:	1c21      	adds	r1, r4, #0
    36aa:	f000 f907 	bl	38bc <_fflush_r>
    36ae:	2800      	cmp	r0, #0
    36b0:	d1df      	bne.n	3672 <__swbuf_r+0x5e>
    36b2:	1c30      	adds	r0, r6, #0
    36b4:	bd70      	pop	{r4, r5, r6, pc}
    36b6:	46c0      	nop			; (mov r8, r8)
    36b8:	00003f7c 	.word	0x00003f7c
    36bc:	00003f9c 	.word	0x00003f9c
    36c0:	00003fbc 	.word	0x00003fbc

000036c4 <__swsetup_r>:
    36c4:	4b34      	ldr	r3, [pc, #208]	; (3798 <__swsetup_r+0xd4>)
    36c6:	b570      	push	{r4, r5, r6, lr}
    36c8:	681d      	ldr	r5, [r3, #0]
    36ca:	1c06      	adds	r6, r0, #0
    36cc:	1c0c      	adds	r4, r1, #0
    36ce:	2d00      	cmp	r5, #0
    36d0:	d005      	beq.n	36de <__swsetup_r+0x1a>
    36d2:	69a9      	ldr	r1, [r5, #24]
    36d4:	2900      	cmp	r1, #0
    36d6:	d102      	bne.n	36de <__swsetup_r+0x1a>
    36d8:	1c28      	adds	r0, r5, #0
    36da:	f000 f96f 	bl	39bc <__sinit>
    36de:	4b2f      	ldr	r3, [pc, #188]	; (379c <__swsetup_r+0xd8>)
    36e0:	429c      	cmp	r4, r3
    36e2:	d101      	bne.n	36e8 <__swsetup_r+0x24>
    36e4:	686c      	ldr	r4, [r5, #4]
    36e6:	e008      	b.n	36fa <__swsetup_r+0x36>
    36e8:	4b2d      	ldr	r3, [pc, #180]	; (37a0 <__swsetup_r+0xdc>)
    36ea:	429c      	cmp	r4, r3
    36ec:	d101      	bne.n	36f2 <__swsetup_r+0x2e>
    36ee:	68ac      	ldr	r4, [r5, #8]
    36f0:	e003      	b.n	36fa <__swsetup_r+0x36>
    36f2:	4b2c      	ldr	r3, [pc, #176]	; (37a4 <__swsetup_r+0xe0>)
    36f4:	429c      	cmp	r4, r3
    36f6:	d100      	bne.n	36fa <__swsetup_r+0x36>
    36f8:	68ec      	ldr	r4, [r5, #12]
    36fa:	89a2      	ldrh	r2, [r4, #12]
    36fc:	b293      	uxth	r3, r2
    36fe:	0719      	lsls	r1, r3, #28
    3700:	d421      	bmi.n	3746 <__swsetup_r+0x82>
    3702:	06d9      	lsls	r1, r3, #27
    3704:	d405      	bmi.n	3712 <__swsetup_r+0x4e>
    3706:	2309      	movs	r3, #9
    3708:	6033      	str	r3, [r6, #0]
    370a:	2340      	movs	r3, #64	; 0x40
    370c:	431a      	orrs	r2, r3
    370e:	81a2      	strh	r2, [r4, #12]
    3710:	e03f      	b.n	3792 <__swsetup_r+0xce>
    3712:	075a      	lsls	r2, r3, #29
    3714:	d513      	bpl.n	373e <__swsetup_r+0x7a>
    3716:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3718:	2900      	cmp	r1, #0
    371a:	d008      	beq.n	372e <__swsetup_r+0x6a>
    371c:	1c23      	adds	r3, r4, #0
    371e:	3344      	adds	r3, #68	; 0x44
    3720:	4299      	cmp	r1, r3
    3722:	d002      	beq.n	372a <__swsetup_r+0x66>
    3724:	1c30      	adds	r0, r6, #0
    3726:	f000 fa1f 	bl	3b68 <_free_r>
    372a:	2300      	movs	r3, #0
    372c:	6363      	str	r3, [r4, #52]	; 0x34
    372e:	89a3      	ldrh	r3, [r4, #12]
    3730:	2224      	movs	r2, #36	; 0x24
    3732:	4393      	bics	r3, r2
    3734:	81a3      	strh	r3, [r4, #12]
    3736:	2300      	movs	r3, #0
    3738:	6063      	str	r3, [r4, #4]
    373a:	6923      	ldr	r3, [r4, #16]
    373c:	6023      	str	r3, [r4, #0]
    373e:	89a3      	ldrh	r3, [r4, #12]
    3740:	2208      	movs	r2, #8
    3742:	4313      	orrs	r3, r2
    3744:	81a3      	strh	r3, [r4, #12]
    3746:	6921      	ldr	r1, [r4, #16]
    3748:	2900      	cmp	r1, #0
    374a:	d10b      	bne.n	3764 <__swsetup_r+0xa0>
    374c:	89a3      	ldrh	r3, [r4, #12]
    374e:	22a0      	movs	r2, #160	; 0xa0
    3750:	0092      	lsls	r2, r2, #2
    3752:	401a      	ands	r2, r3
    3754:	2380      	movs	r3, #128	; 0x80
    3756:	009b      	lsls	r3, r3, #2
    3758:	429a      	cmp	r2, r3
    375a:	d003      	beq.n	3764 <__swsetup_r+0xa0>
    375c:	1c30      	adds	r0, r6, #0
    375e:	1c21      	adds	r1, r4, #0
    3760:	f000 f99c 	bl	3a9c <__smakebuf_r>
    3764:	89a3      	ldrh	r3, [r4, #12]
    3766:	2201      	movs	r2, #1
    3768:	401a      	ands	r2, r3
    376a:	d005      	beq.n	3778 <__swsetup_r+0xb4>
    376c:	6961      	ldr	r1, [r4, #20]
    376e:	2200      	movs	r2, #0
    3770:	60a2      	str	r2, [r4, #8]
    3772:	424a      	negs	r2, r1
    3774:	61a2      	str	r2, [r4, #24]
    3776:	e003      	b.n	3780 <__swsetup_r+0xbc>
    3778:	0799      	lsls	r1, r3, #30
    377a:	d400      	bmi.n	377e <__swsetup_r+0xba>
    377c:	6962      	ldr	r2, [r4, #20]
    377e:	60a2      	str	r2, [r4, #8]
    3780:	6922      	ldr	r2, [r4, #16]
    3782:	2000      	movs	r0, #0
    3784:	4282      	cmp	r2, r0
    3786:	d106      	bne.n	3796 <__swsetup_r+0xd2>
    3788:	0619      	lsls	r1, r3, #24
    378a:	d504      	bpl.n	3796 <__swsetup_r+0xd2>
    378c:	2240      	movs	r2, #64	; 0x40
    378e:	4313      	orrs	r3, r2
    3790:	81a3      	strh	r3, [r4, #12]
    3792:	2001      	movs	r0, #1
    3794:	4240      	negs	r0, r0
    3796:	bd70      	pop	{r4, r5, r6, pc}
    3798:	2000006c 	.word	0x2000006c
    379c:	00003f7c 	.word	0x00003f7c
    37a0:	00003f9c 	.word	0x00003f9c
    37a4:	00003fbc 	.word	0x00003fbc

000037a8 <__sflush_r>:
    37a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    37aa:	898b      	ldrh	r3, [r1, #12]
    37ac:	1c05      	adds	r5, r0, #0
    37ae:	1c0c      	adds	r4, r1, #0
    37b0:	0719      	lsls	r1, r3, #28
    37b2:	d45e      	bmi.n	3872 <__sflush_r+0xca>
    37b4:	6862      	ldr	r2, [r4, #4]
    37b6:	2a00      	cmp	r2, #0
    37b8:	dc02      	bgt.n	37c0 <__sflush_r+0x18>
    37ba:	6c27      	ldr	r7, [r4, #64]	; 0x40
    37bc:	2f00      	cmp	r7, #0
    37be:	dd1a      	ble.n	37f6 <__sflush_r+0x4e>
    37c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    37c2:	2f00      	cmp	r7, #0
    37c4:	d017      	beq.n	37f6 <__sflush_r+0x4e>
    37c6:	2200      	movs	r2, #0
    37c8:	682e      	ldr	r6, [r5, #0]
    37ca:	602a      	str	r2, [r5, #0]
    37cc:	2280      	movs	r2, #128	; 0x80
    37ce:	0152      	lsls	r2, r2, #5
    37d0:	401a      	ands	r2, r3
    37d2:	d001      	beq.n	37d8 <__sflush_r+0x30>
    37d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    37d6:	e015      	b.n	3804 <__sflush_r+0x5c>
    37d8:	1c28      	adds	r0, r5, #0
    37da:	6a21      	ldr	r1, [r4, #32]
    37dc:	2301      	movs	r3, #1
    37de:	47b8      	blx	r7
    37e0:	1c02      	adds	r2, r0, #0
    37e2:	1c41      	adds	r1, r0, #1
    37e4:	d10e      	bne.n	3804 <__sflush_r+0x5c>
    37e6:	682b      	ldr	r3, [r5, #0]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d00b      	beq.n	3804 <__sflush_r+0x5c>
    37ec:	2b1d      	cmp	r3, #29
    37ee:	d001      	beq.n	37f4 <__sflush_r+0x4c>
    37f0:	2b16      	cmp	r3, #22
    37f2:	d102      	bne.n	37fa <__sflush_r+0x52>
    37f4:	602e      	str	r6, [r5, #0]
    37f6:	2000      	movs	r0, #0
    37f8:	e05e      	b.n	38b8 <__sflush_r+0x110>
    37fa:	89a3      	ldrh	r3, [r4, #12]
    37fc:	2140      	movs	r1, #64	; 0x40
    37fe:	430b      	orrs	r3, r1
    3800:	81a3      	strh	r3, [r4, #12]
    3802:	e059      	b.n	38b8 <__sflush_r+0x110>
    3804:	89a3      	ldrh	r3, [r4, #12]
    3806:	075f      	lsls	r7, r3, #29
    3808:	d506      	bpl.n	3818 <__sflush_r+0x70>
    380a:	6861      	ldr	r1, [r4, #4]
    380c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    380e:	1a52      	subs	r2, r2, r1
    3810:	2b00      	cmp	r3, #0
    3812:	d001      	beq.n	3818 <__sflush_r+0x70>
    3814:	6c27      	ldr	r7, [r4, #64]	; 0x40
    3816:	1bd2      	subs	r2, r2, r7
    3818:	1c28      	adds	r0, r5, #0
    381a:	6a21      	ldr	r1, [r4, #32]
    381c:	2300      	movs	r3, #0
    381e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3820:	47b8      	blx	r7
    3822:	89a2      	ldrh	r2, [r4, #12]
    3824:	1c41      	adds	r1, r0, #1
    3826:	d106      	bne.n	3836 <__sflush_r+0x8e>
    3828:	682b      	ldr	r3, [r5, #0]
    382a:	2b00      	cmp	r3, #0
    382c:	d003      	beq.n	3836 <__sflush_r+0x8e>
    382e:	2b1d      	cmp	r3, #29
    3830:	d001      	beq.n	3836 <__sflush_r+0x8e>
    3832:	2b16      	cmp	r3, #22
    3834:	d119      	bne.n	386a <__sflush_r+0xc2>
    3836:	2300      	movs	r3, #0
    3838:	6063      	str	r3, [r4, #4]
    383a:	6923      	ldr	r3, [r4, #16]
    383c:	6023      	str	r3, [r4, #0]
    383e:	04d7      	lsls	r7, r2, #19
    3840:	d505      	bpl.n	384e <__sflush_r+0xa6>
    3842:	1c41      	adds	r1, r0, #1
    3844:	d102      	bne.n	384c <__sflush_r+0xa4>
    3846:	682a      	ldr	r2, [r5, #0]
    3848:	2a00      	cmp	r2, #0
    384a:	d100      	bne.n	384e <__sflush_r+0xa6>
    384c:	6560      	str	r0, [r4, #84]	; 0x54
    384e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3850:	602e      	str	r6, [r5, #0]
    3852:	2900      	cmp	r1, #0
    3854:	d0cf      	beq.n	37f6 <__sflush_r+0x4e>
    3856:	1c23      	adds	r3, r4, #0
    3858:	3344      	adds	r3, #68	; 0x44
    385a:	4299      	cmp	r1, r3
    385c:	d002      	beq.n	3864 <__sflush_r+0xbc>
    385e:	1c28      	adds	r0, r5, #0
    3860:	f000 f982 	bl	3b68 <_free_r>
    3864:	2000      	movs	r0, #0
    3866:	6360      	str	r0, [r4, #52]	; 0x34
    3868:	e026      	b.n	38b8 <__sflush_r+0x110>
    386a:	2340      	movs	r3, #64	; 0x40
    386c:	431a      	orrs	r2, r3
    386e:	81a2      	strh	r2, [r4, #12]
    3870:	e022      	b.n	38b8 <__sflush_r+0x110>
    3872:	6926      	ldr	r6, [r4, #16]
    3874:	2e00      	cmp	r6, #0
    3876:	d0be      	beq.n	37f6 <__sflush_r+0x4e>
    3878:	6827      	ldr	r7, [r4, #0]
    387a:	2200      	movs	r2, #0
    387c:	1bbf      	subs	r7, r7, r6
    387e:	9701      	str	r7, [sp, #4]
    3880:	6026      	str	r6, [r4, #0]
    3882:	0799      	lsls	r1, r3, #30
    3884:	d100      	bne.n	3888 <__sflush_r+0xe0>
    3886:	6962      	ldr	r2, [r4, #20]
    3888:	60a2      	str	r2, [r4, #8]
    388a:	9f01      	ldr	r7, [sp, #4]
    388c:	2f00      	cmp	r7, #0
    388e:	ddb2      	ble.n	37f6 <__sflush_r+0x4e>
    3890:	1c28      	adds	r0, r5, #0
    3892:	6a21      	ldr	r1, [r4, #32]
    3894:	1c32      	adds	r2, r6, #0
    3896:	9b01      	ldr	r3, [sp, #4]
    3898:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    389a:	47b8      	blx	r7
    389c:	2800      	cmp	r0, #0
    389e:	dc06      	bgt.n	38ae <__sflush_r+0x106>
    38a0:	89a3      	ldrh	r3, [r4, #12]
    38a2:	2240      	movs	r2, #64	; 0x40
    38a4:	4313      	orrs	r3, r2
    38a6:	2001      	movs	r0, #1
    38a8:	81a3      	strh	r3, [r4, #12]
    38aa:	4240      	negs	r0, r0
    38ac:	e004      	b.n	38b8 <__sflush_r+0x110>
    38ae:	9f01      	ldr	r7, [sp, #4]
    38b0:	1836      	adds	r6, r6, r0
    38b2:	1a3f      	subs	r7, r7, r0
    38b4:	9701      	str	r7, [sp, #4]
    38b6:	e7e8      	b.n	388a <__sflush_r+0xe2>
    38b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000038bc <_fflush_r>:
    38bc:	690a      	ldr	r2, [r1, #16]
    38be:	b538      	push	{r3, r4, r5, lr}
    38c0:	1c05      	adds	r5, r0, #0
    38c2:	1c0c      	adds	r4, r1, #0
    38c4:	2a00      	cmp	r2, #0
    38c6:	d101      	bne.n	38cc <_fflush_r+0x10>
    38c8:	2000      	movs	r0, #0
    38ca:	e01c      	b.n	3906 <_fflush_r+0x4a>
    38cc:	2800      	cmp	r0, #0
    38ce:	d004      	beq.n	38da <_fflush_r+0x1e>
    38d0:	6983      	ldr	r3, [r0, #24]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d101      	bne.n	38da <_fflush_r+0x1e>
    38d6:	f000 f871 	bl	39bc <__sinit>
    38da:	4b0b      	ldr	r3, [pc, #44]	; (3908 <_fflush_r+0x4c>)
    38dc:	429c      	cmp	r4, r3
    38de:	d101      	bne.n	38e4 <_fflush_r+0x28>
    38e0:	686c      	ldr	r4, [r5, #4]
    38e2:	e008      	b.n	38f6 <_fflush_r+0x3a>
    38e4:	4b09      	ldr	r3, [pc, #36]	; (390c <_fflush_r+0x50>)
    38e6:	429c      	cmp	r4, r3
    38e8:	d101      	bne.n	38ee <_fflush_r+0x32>
    38ea:	68ac      	ldr	r4, [r5, #8]
    38ec:	e003      	b.n	38f6 <_fflush_r+0x3a>
    38ee:	4b08      	ldr	r3, [pc, #32]	; (3910 <_fflush_r+0x54>)
    38f0:	429c      	cmp	r4, r3
    38f2:	d100      	bne.n	38f6 <_fflush_r+0x3a>
    38f4:	68ec      	ldr	r4, [r5, #12]
    38f6:	220c      	movs	r2, #12
    38f8:	5ea3      	ldrsh	r3, [r4, r2]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d0e4      	beq.n	38c8 <_fflush_r+0xc>
    38fe:	1c28      	adds	r0, r5, #0
    3900:	1c21      	adds	r1, r4, #0
    3902:	f7ff ff51 	bl	37a8 <__sflush_r>
    3906:	bd38      	pop	{r3, r4, r5, pc}
    3908:	00003f7c 	.word	0x00003f7c
    390c:	00003f9c 	.word	0x00003f9c
    3910:	00003fbc 	.word	0x00003fbc

00003914 <_cleanup_r>:
    3914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3916:	1c04      	adds	r4, r0, #0
    3918:	1c07      	adds	r7, r0, #0
    391a:	3448      	adds	r4, #72	; 0x48
    391c:	2c00      	cmp	r4, #0
    391e:	d012      	beq.n	3946 <_cleanup_r+0x32>
    3920:	68a5      	ldr	r5, [r4, #8]
    3922:	6866      	ldr	r6, [r4, #4]
    3924:	3e01      	subs	r6, #1
    3926:	d40c      	bmi.n	3942 <_cleanup_r+0x2e>
    3928:	89ab      	ldrh	r3, [r5, #12]
    392a:	2b01      	cmp	r3, #1
    392c:	d907      	bls.n	393e <_cleanup_r+0x2a>
    392e:	220e      	movs	r2, #14
    3930:	5eab      	ldrsh	r3, [r5, r2]
    3932:	3301      	adds	r3, #1
    3934:	d003      	beq.n	393e <_cleanup_r+0x2a>
    3936:	1c38      	adds	r0, r7, #0
    3938:	1c29      	adds	r1, r5, #0
    393a:	f7ff ffbf 	bl	38bc <_fflush_r>
    393e:	3568      	adds	r5, #104	; 0x68
    3940:	e7f0      	b.n	3924 <_cleanup_r+0x10>
    3942:	6824      	ldr	r4, [r4, #0]
    3944:	e7ea      	b.n	391c <_cleanup_r+0x8>
    3946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003948 <std.isra.0>:
    3948:	2300      	movs	r3, #0
    394a:	b510      	push	{r4, lr}
    394c:	1c04      	adds	r4, r0, #0
    394e:	6003      	str	r3, [r0, #0]
    3950:	6043      	str	r3, [r0, #4]
    3952:	6083      	str	r3, [r0, #8]
    3954:	8181      	strh	r1, [r0, #12]
    3956:	6643      	str	r3, [r0, #100]	; 0x64
    3958:	81c2      	strh	r2, [r0, #14]
    395a:	6103      	str	r3, [r0, #16]
    395c:	6143      	str	r3, [r0, #20]
    395e:	6183      	str	r3, [r0, #24]
    3960:	1c19      	adds	r1, r3, #0
    3962:	2208      	movs	r2, #8
    3964:	305c      	adds	r0, #92	; 0x5c
    3966:	f7ff fae8 	bl	2f3a <memset>
    396a:	4b05      	ldr	r3, [pc, #20]	; (3980 <std.isra.0+0x38>)
    396c:	6224      	str	r4, [r4, #32]
    396e:	6263      	str	r3, [r4, #36]	; 0x24
    3970:	4b04      	ldr	r3, [pc, #16]	; (3984 <std.isra.0+0x3c>)
    3972:	62a3      	str	r3, [r4, #40]	; 0x28
    3974:	4b04      	ldr	r3, [pc, #16]	; (3988 <std.isra.0+0x40>)
    3976:	62e3      	str	r3, [r4, #44]	; 0x2c
    3978:	4b04      	ldr	r3, [pc, #16]	; (398c <std.isra.0+0x44>)
    397a:	6323      	str	r3, [r4, #48]	; 0x30
    397c:	bd10      	pop	{r4, pc}
    397e:	46c0      	nop			; (mov r8, r8)
    3980:	00003cc5 	.word	0x00003cc5
    3984:	00003ced 	.word	0x00003ced
    3988:	00003d25 	.word	0x00003d25
    398c:	00003d51 	.word	0x00003d51

00003990 <__sfmoreglue>:
    3990:	b570      	push	{r4, r5, r6, lr}
    3992:	1e4b      	subs	r3, r1, #1
    3994:	2568      	movs	r5, #104	; 0x68
    3996:	435d      	muls	r5, r3
    3998:	1c0e      	adds	r6, r1, #0
    399a:	1c29      	adds	r1, r5, #0
    399c:	3174      	adds	r1, #116	; 0x74
    399e:	f000 f92b 	bl	3bf8 <_malloc_r>
    39a2:	1e04      	subs	r4, r0, #0
    39a4:	d008      	beq.n	39b8 <__sfmoreglue+0x28>
    39a6:	2100      	movs	r1, #0
    39a8:	6001      	str	r1, [r0, #0]
    39aa:	6046      	str	r6, [r0, #4]
    39ac:	1c2a      	adds	r2, r5, #0
    39ae:	300c      	adds	r0, #12
    39b0:	60a0      	str	r0, [r4, #8]
    39b2:	3268      	adds	r2, #104	; 0x68
    39b4:	f7ff fac1 	bl	2f3a <memset>
    39b8:	1c20      	adds	r0, r4, #0
    39ba:	bd70      	pop	{r4, r5, r6, pc}

000039bc <__sinit>:
    39bc:	6983      	ldr	r3, [r0, #24]
    39be:	b513      	push	{r0, r1, r4, lr}
    39c0:	1c04      	adds	r4, r0, #0
    39c2:	2b00      	cmp	r3, #0
    39c4:	d127      	bne.n	3a16 <__sinit+0x5a>
    39c6:	6483      	str	r3, [r0, #72]	; 0x48
    39c8:	64c3      	str	r3, [r0, #76]	; 0x4c
    39ca:	6503      	str	r3, [r0, #80]	; 0x50
    39cc:	4b12      	ldr	r3, [pc, #72]	; (3a18 <__sinit+0x5c>)
    39ce:	4a13      	ldr	r2, [pc, #76]	; (3a1c <__sinit+0x60>)
    39d0:	681b      	ldr	r3, [r3, #0]
    39d2:	6282      	str	r2, [r0, #40]	; 0x28
    39d4:	4298      	cmp	r0, r3
    39d6:	d101      	bne.n	39dc <__sinit+0x20>
    39d8:	2301      	movs	r3, #1
    39da:	6183      	str	r3, [r0, #24]
    39dc:	1c20      	adds	r0, r4, #0
    39de:	f000 f81f 	bl	3a20 <__sfp>
    39e2:	6060      	str	r0, [r4, #4]
    39e4:	1c20      	adds	r0, r4, #0
    39e6:	f000 f81b 	bl	3a20 <__sfp>
    39ea:	60a0      	str	r0, [r4, #8]
    39ec:	1c20      	adds	r0, r4, #0
    39ee:	f000 f817 	bl	3a20 <__sfp>
    39f2:	2104      	movs	r1, #4
    39f4:	60e0      	str	r0, [r4, #12]
    39f6:	2200      	movs	r2, #0
    39f8:	6860      	ldr	r0, [r4, #4]
    39fa:	f7ff ffa5 	bl	3948 <std.isra.0>
    39fe:	68a0      	ldr	r0, [r4, #8]
    3a00:	2109      	movs	r1, #9
    3a02:	2201      	movs	r2, #1
    3a04:	f7ff ffa0 	bl	3948 <std.isra.0>
    3a08:	68e0      	ldr	r0, [r4, #12]
    3a0a:	2112      	movs	r1, #18
    3a0c:	2202      	movs	r2, #2
    3a0e:	f7ff ff9b 	bl	3948 <std.isra.0>
    3a12:	2301      	movs	r3, #1
    3a14:	61a3      	str	r3, [r4, #24]
    3a16:	bd13      	pop	{r0, r1, r4, pc}
    3a18:	00003f44 	.word	0x00003f44
    3a1c:	00003915 	.word	0x00003915

00003a20 <__sfp>:
    3a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a22:	4b1d      	ldr	r3, [pc, #116]	; (3a98 <__sfp+0x78>)
    3a24:	1c07      	adds	r7, r0, #0
    3a26:	681e      	ldr	r6, [r3, #0]
    3a28:	69b2      	ldr	r2, [r6, #24]
    3a2a:	2a00      	cmp	r2, #0
    3a2c:	d102      	bne.n	3a34 <__sfp+0x14>
    3a2e:	1c30      	adds	r0, r6, #0
    3a30:	f7ff ffc4 	bl	39bc <__sinit>
    3a34:	3648      	adds	r6, #72	; 0x48
    3a36:	68b4      	ldr	r4, [r6, #8]
    3a38:	6873      	ldr	r3, [r6, #4]
    3a3a:	3b01      	subs	r3, #1
    3a3c:	d405      	bmi.n	3a4a <__sfp+0x2a>
    3a3e:	220c      	movs	r2, #12
    3a40:	5ea5      	ldrsh	r5, [r4, r2]
    3a42:	2d00      	cmp	r5, #0
    3a44:	d010      	beq.n	3a68 <__sfp+0x48>
    3a46:	3468      	adds	r4, #104	; 0x68
    3a48:	e7f7      	b.n	3a3a <__sfp+0x1a>
    3a4a:	6833      	ldr	r3, [r6, #0]
    3a4c:	2b00      	cmp	r3, #0
    3a4e:	d106      	bne.n	3a5e <__sfp+0x3e>
    3a50:	1c38      	adds	r0, r7, #0
    3a52:	2104      	movs	r1, #4
    3a54:	f7ff ff9c 	bl	3990 <__sfmoreglue>
    3a58:	6030      	str	r0, [r6, #0]
    3a5a:	2800      	cmp	r0, #0
    3a5c:	d001      	beq.n	3a62 <__sfp+0x42>
    3a5e:	6836      	ldr	r6, [r6, #0]
    3a60:	e7e9      	b.n	3a36 <__sfp+0x16>
    3a62:	230c      	movs	r3, #12
    3a64:	603b      	str	r3, [r7, #0]
    3a66:	e016      	b.n	3a96 <__sfp+0x76>
    3a68:	2301      	movs	r3, #1
    3a6a:	425b      	negs	r3, r3
    3a6c:	81e3      	strh	r3, [r4, #14]
    3a6e:	1c20      	adds	r0, r4, #0
    3a70:	2301      	movs	r3, #1
    3a72:	81a3      	strh	r3, [r4, #12]
    3a74:	6665      	str	r5, [r4, #100]	; 0x64
    3a76:	6025      	str	r5, [r4, #0]
    3a78:	60a5      	str	r5, [r4, #8]
    3a7a:	6065      	str	r5, [r4, #4]
    3a7c:	6125      	str	r5, [r4, #16]
    3a7e:	6165      	str	r5, [r4, #20]
    3a80:	61a5      	str	r5, [r4, #24]
    3a82:	305c      	adds	r0, #92	; 0x5c
    3a84:	1c29      	adds	r1, r5, #0
    3a86:	2208      	movs	r2, #8
    3a88:	f7ff fa57 	bl	2f3a <memset>
    3a8c:	6365      	str	r5, [r4, #52]	; 0x34
    3a8e:	63a5      	str	r5, [r4, #56]	; 0x38
    3a90:	64a5      	str	r5, [r4, #72]	; 0x48
    3a92:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a94:	1c20      	adds	r0, r4, #0
    3a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a98:	00003f44 	.word	0x00003f44

00003a9c <__smakebuf_r>:
    3a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a9e:	898b      	ldrh	r3, [r1, #12]
    3aa0:	b091      	sub	sp, #68	; 0x44
    3aa2:	1c05      	adds	r5, r0, #0
    3aa4:	1c0c      	adds	r4, r1, #0
    3aa6:	079a      	lsls	r2, r3, #30
    3aa8:	d425      	bmi.n	3af6 <__smakebuf_r+0x5a>
    3aaa:	230e      	movs	r3, #14
    3aac:	5ec9      	ldrsh	r1, [r1, r3]
    3aae:	2900      	cmp	r1, #0
    3ab0:	da06      	bge.n	3ac0 <__smakebuf_r+0x24>
    3ab2:	89a7      	ldrh	r7, [r4, #12]
    3ab4:	2380      	movs	r3, #128	; 0x80
    3ab6:	401f      	ands	r7, r3
    3ab8:	d00f      	beq.n	3ada <__smakebuf_r+0x3e>
    3aba:	2700      	movs	r7, #0
    3abc:	2640      	movs	r6, #64	; 0x40
    3abe:	e00e      	b.n	3ade <__smakebuf_r+0x42>
    3ac0:	aa01      	add	r2, sp, #4
    3ac2:	f000 f979 	bl	3db8 <_fstat_r>
    3ac6:	2800      	cmp	r0, #0
    3ac8:	dbf3      	blt.n	3ab2 <__smakebuf_r+0x16>
    3aca:	9b02      	ldr	r3, [sp, #8]
    3acc:	27f0      	movs	r7, #240	; 0xf0
    3ace:	023f      	lsls	r7, r7, #8
    3ad0:	4a18      	ldr	r2, [pc, #96]	; (3b34 <__smakebuf_r+0x98>)
    3ad2:	401f      	ands	r7, r3
    3ad4:	18bf      	adds	r7, r7, r2
    3ad6:	427b      	negs	r3, r7
    3ad8:	415f      	adcs	r7, r3
    3ada:	2680      	movs	r6, #128	; 0x80
    3adc:	00f6      	lsls	r6, r6, #3
    3ade:	1c28      	adds	r0, r5, #0
    3ae0:	1c31      	adds	r1, r6, #0
    3ae2:	f000 f889 	bl	3bf8 <_malloc_r>
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d10c      	bne.n	3b04 <__smakebuf_r+0x68>
    3aea:	89a3      	ldrh	r3, [r4, #12]
    3aec:	059a      	lsls	r2, r3, #22
    3aee:	d41f      	bmi.n	3b30 <__smakebuf_r+0x94>
    3af0:	2202      	movs	r2, #2
    3af2:	4313      	orrs	r3, r2
    3af4:	81a3      	strh	r3, [r4, #12]
    3af6:	1c23      	adds	r3, r4, #0
    3af8:	3347      	adds	r3, #71	; 0x47
    3afa:	6023      	str	r3, [r4, #0]
    3afc:	6123      	str	r3, [r4, #16]
    3afe:	2301      	movs	r3, #1
    3b00:	6163      	str	r3, [r4, #20]
    3b02:	e015      	b.n	3b30 <__smakebuf_r+0x94>
    3b04:	4b0c      	ldr	r3, [pc, #48]	; (3b38 <__smakebuf_r+0x9c>)
    3b06:	2280      	movs	r2, #128	; 0x80
    3b08:	62ab      	str	r3, [r5, #40]	; 0x28
    3b0a:	89a3      	ldrh	r3, [r4, #12]
    3b0c:	6020      	str	r0, [r4, #0]
    3b0e:	4313      	orrs	r3, r2
    3b10:	81a3      	strh	r3, [r4, #12]
    3b12:	6120      	str	r0, [r4, #16]
    3b14:	6166      	str	r6, [r4, #20]
    3b16:	2f00      	cmp	r7, #0
    3b18:	d00a      	beq.n	3b30 <__smakebuf_r+0x94>
    3b1a:	230e      	movs	r3, #14
    3b1c:	5ee1      	ldrsh	r1, [r4, r3]
    3b1e:	1c28      	adds	r0, r5, #0
    3b20:	f000 f95c 	bl	3ddc <_isatty_r>
    3b24:	2800      	cmp	r0, #0
    3b26:	d003      	beq.n	3b30 <__smakebuf_r+0x94>
    3b28:	89a3      	ldrh	r3, [r4, #12]
    3b2a:	2201      	movs	r2, #1
    3b2c:	4313      	orrs	r3, r2
    3b2e:	81a3      	strh	r3, [r4, #12]
    3b30:	b011      	add	sp, #68	; 0x44
    3b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b34:	ffffe000 	.word	0xffffe000
    3b38:	00003915 	.word	0x00003915

00003b3c <malloc>:
    3b3c:	b508      	push	{r3, lr}
    3b3e:	4b03      	ldr	r3, [pc, #12]	; (3b4c <malloc+0x10>)
    3b40:	1c01      	adds	r1, r0, #0
    3b42:	6818      	ldr	r0, [r3, #0]
    3b44:	f000 f858 	bl	3bf8 <_malloc_r>
    3b48:	bd08      	pop	{r3, pc}
    3b4a:	46c0      	nop			; (mov r8, r8)
    3b4c:	2000006c 	.word	0x2000006c

00003b50 <memchr>:
    3b50:	b2c9      	uxtb	r1, r1
    3b52:	1882      	adds	r2, r0, r2
    3b54:	4290      	cmp	r0, r2
    3b56:	d004      	beq.n	3b62 <memchr+0x12>
    3b58:	7803      	ldrb	r3, [r0, #0]
    3b5a:	428b      	cmp	r3, r1
    3b5c:	d002      	beq.n	3b64 <memchr+0x14>
    3b5e:	3001      	adds	r0, #1
    3b60:	e7f8      	b.n	3b54 <memchr+0x4>
    3b62:	2000      	movs	r0, #0
    3b64:	4770      	bx	lr
	...

00003b68 <_free_r>:
    3b68:	b530      	push	{r4, r5, lr}
    3b6a:	2900      	cmp	r1, #0
    3b6c:	d040      	beq.n	3bf0 <_free_r+0x88>
    3b6e:	3904      	subs	r1, #4
    3b70:	680b      	ldr	r3, [r1, #0]
    3b72:	2b00      	cmp	r3, #0
    3b74:	da00      	bge.n	3b78 <_free_r+0x10>
    3b76:	18c9      	adds	r1, r1, r3
    3b78:	4a1e      	ldr	r2, [pc, #120]	; (3bf4 <_free_r+0x8c>)
    3b7a:	6813      	ldr	r3, [r2, #0]
    3b7c:	1c14      	adds	r4, r2, #0
    3b7e:	2b00      	cmp	r3, #0
    3b80:	d102      	bne.n	3b88 <_free_r+0x20>
    3b82:	604b      	str	r3, [r1, #4]
    3b84:	6011      	str	r1, [r2, #0]
    3b86:	e033      	b.n	3bf0 <_free_r+0x88>
    3b88:	4299      	cmp	r1, r3
    3b8a:	d20f      	bcs.n	3bac <_free_r+0x44>
    3b8c:	6808      	ldr	r0, [r1, #0]
    3b8e:	180a      	adds	r2, r1, r0
    3b90:	429a      	cmp	r2, r3
    3b92:	d105      	bne.n	3ba0 <_free_r+0x38>
    3b94:	6813      	ldr	r3, [r2, #0]
    3b96:	6852      	ldr	r2, [r2, #4]
    3b98:	18c0      	adds	r0, r0, r3
    3b9a:	6008      	str	r0, [r1, #0]
    3b9c:	604a      	str	r2, [r1, #4]
    3b9e:	e000      	b.n	3ba2 <_free_r+0x3a>
    3ba0:	604b      	str	r3, [r1, #4]
    3ba2:	6021      	str	r1, [r4, #0]
    3ba4:	e024      	b.n	3bf0 <_free_r+0x88>
    3ba6:	428a      	cmp	r2, r1
    3ba8:	d803      	bhi.n	3bb2 <_free_r+0x4a>
    3baa:	1c13      	adds	r3, r2, #0
    3bac:	685a      	ldr	r2, [r3, #4]
    3bae:	2a00      	cmp	r2, #0
    3bb0:	d1f9      	bne.n	3ba6 <_free_r+0x3e>
    3bb2:	681d      	ldr	r5, [r3, #0]
    3bb4:	195c      	adds	r4, r3, r5
    3bb6:	428c      	cmp	r4, r1
    3bb8:	d10b      	bne.n	3bd2 <_free_r+0x6a>
    3bba:	6809      	ldr	r1, [r1, #0]
    3bbc:	1869      	adds	r1, r5, r1
    3bbe:	1858      	adds	r0, r3, r1
    3bc0:	6019      	str	r1, [r3, #0]
    3bc2:	4290      	cmp	r0, r2
    3bc4:	d114      	bne.n	3bf0 <_free_r+0x88>
    3bc6:	6814      	ldr	r4, [r2, #0]
    3bc8:	6852      	ldr	r2, [r2, #4]
    3bca:	1909      	adds	r1, r1, r4
    3bcc:	6019      	str	r1, [r3, #0]
    3bce:	605a      	str	r2, [r3, #4]
    3bd0:	e00e      	b.n	3bf0 <_free_r+0x88>
    3bd2:	428c      	cmp	r4, r1
    3bd4:	d902      	bls.n	3bdc <_free_r+0x74>
    3bd6:	230c      	movs	r3, #12
    3bd8:	6003      	str	r3, [r0, #0]
    3bda:	e009      	b.n	3bf0 <_free_r+0x88>
    3bdc:	6808      	ldr	r0, [r1, #0]
    3bde:	180c      	adds	r4, r1, r0
    3be0:	4294      	cmp	r4, r2
    3be2:	d103      	bne.n	3bec <_free_r+0x84>
    3be4:	6814      	ldr	r4, [r2, #0]
    3be6:	6852      	ldr	r2, [r2, #4]
    3be8:	1900      	adds	r0, r0, r4
    3bea:	6008      	str	r0, [r1, #0]
    3bec:	604a      	str	r2, [r1, #4]
    3bee:	6059      	str	r1, [r3, #4]
    3bf0:	bd30      	pop	{r4, r5, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	20003ce8 	.word	0x20003ce8

00003bf8 <_malloc_r>:
    3bf8:	b570      	push	{r4, r5, r6, lr}
    3bfa:	2303      	movs	r3, #3
    3bfc:	1ccd      	adds	r5, r1, #3
    3bfe:	439d      	bics	r5, r3
    3c00:	3508      	adds	r5, #8
    3c02:	1c06      	adds	r6, r0, #0
    3c04:	2d0c      	cmp	r5, #12
    3c06:	d201      	bcs.n	3c0c <_malloc_r+0x14>
    3c08:	250c      	movs	r5, #12
    3c0a:	e001      	b.n	3c10 <_malloc_r+0x18>
    3c0c:	2d00      	cmp	r5, #0
    3c0e:	db3f      	blt.n	3c90 <_malloc_r+0x98>
    3c10:	428d      	cmp	r5, r1
    3c12:	d33d      	bcc.n	3c90 <_malloc_r+0x98>
    3c14:	4b20      	ldr	r3, [pc, #128]	; (3c98 <_malloc_r+0xa0>)
    3c16:	681c      	ldr	r4, [r3, #0]
    3c18:	1c1a      	adds	r2, r3, #0
    3c1a:	1c21      	adds	r1, r4, #0
    3c1c:	2900      	cmp	r1, #0
    3c1e:	d013      	beq.n	3c48 <_malloc_r+0x50>
    3c20:	6808      	ldr	r0, [r1, #0]
    3c22:	1b43      	subs	r3, r0, r5
    3c24:	d40d      	bmi.n	3c42 <_malloc_r+0x4a>
    3c26:	2b0b      	cmp	r3, #11
    3c28:	d902      	bls.n	3c30 <_malloc_r+0x38>
    3c2a:	600b      	str	r3, [r1, #0]
    3c2c:	18cc      	adds	r4, r1, r3
    3c2e:	e01e      	b.n	3c6e <_malloc_r+0x76>
    3c30:	428c      	cmp	r4, r1
    3c32:	d102      	bne.n	3c3a <_malloc_r+0x42>
    3c34:	6863      	ldr	r3, [r4, #4]
    3c36:	6013      	str	r3, [r2, #0]
    3c38:	e01a      	b.n	3c70 <_malloc_r+0x78>
    3c3a:	6848      	ldr	r0, [r1, #4]
    3c3c:	6060      	str	r0, [r4, #4]
    3c3e:	1c0c      	adds	r4, r1, #0
    3c40:	e016      	b.n	3c70 <_malloc_r+0x78>
    3c42:	1c0c      	adds	r4, r1, #0
    3c44:	6849      	ldr	r1, [r1, #4]
    3c46:	e7e9      	b.n	3c1c <_malloc_r+0x24>
    3c48:	4c14      	ldr	r4, [pc, #80]	; (3c9c <_malloc_r+0xa4>)
    3c4a:	6820      	ldr	r0, [r4, #0]
    3c4c:	2800      	cmp	r0, #0
    3c4e:	d103      	bne.n	3c58 <_malloc_r+0x60>
    3c50:	1c30      	adds	r0, r6, #0
    3c52:	f000 f825 	bl	3ca0 <_sbrk_r>
    3c56:	6020      	str	r0, [r4, #0]
    3c58:	1c30      	adds	r0, r6, #0
    3c5a:	1c29      	adds	r1, r5, #0
    3c5c:	f000 f820 	bl	3ca0 <_sbrk_r>
    3c60:	1c43      	adds	r3, r0, #1
    3c62:	d015      	beq.n	3c90 <_malloc_r+0x98>
    3c64:	1cc4      	adds	r4, r0, #3
    3c66:	2303      	movs	r3, #3
    3c68:	439c      	bics	r4, r3
    3c6a:	4284      	cmp	r4, r0
    3c6c:	d10a      	bne.n	3c84 <_malloc_r+0x8c>
    3c6e:	6025      	str	r5, [r4, #0]
    3c70:	1c20      	adds	r0, r4, #0
    3c72:	300b      	adds	r0, #11
    3c74:	2207      	movs	r2, #7
    3c76:	1d23      	adds	r3, r4, #4
    3c78:	4390      	bics	r0, r2
    3c7a:	1ac3      	subs	r3, r0, r3
    3c7c:	d00b      	beq.n	3c96 <_malloc_r+0x9e>
    3c7e:	425a      	negs	r2, r3
    3c80:	50e2      	str	r2, [r4, r3]
    3c82:	e008      	b.n	3c96 <_malloc_r+0x9e>
    3c84:	1a21      	subs	r1, r4, r0
    3c86:	1c30      	adds	r0, r6, #0
    3c88:	f000 f80a 	bl	3ca0 <_sbrk_r>
    3c8c:	3001      	adds	r0, #1
    3c8e:	d1ee      	bne.n	3c6e <_malloc_r+0x76>
    3c90:	230c      	movs	r3, #12
    3c92:	6033      	str	r3, [r6, #0]
    3c94:	2000      	movs	r0, #0
    3c96:	bd70      	pop	{r4, r5, r6, pc}
    3c98:	20003ce8 	.word	0x20003ce8
    3c9c:	20003ce4 	.word	0x20003ce4

00003ca0 <_sbrk_r>:
    3ca0:	b538      	push	{r3, r4, r5, lr}
    3ca2:	4c07      	ldr	r4, [pc, #28]	; (3cc0 <_sbrk_r+0x20>)
    3ca4:	2300      	movs	r3, #0
    3ca6:	1c05      	adds	r5, r0, #0
    3ca8:	1c08      	adds	r0, r1, #0
    3caa:	6023      	str	r3, [r4, #0]
    3cac:	f7fd fc86 	bl	15bc <_sbrk>
    3cb0:	1c43      	adds	r3, r0, #1
    3cb2:	d103      	bne.n	3cbc <_sbrk_r+0x1c>
    3cb4:	6823      	ldr	r3, [r4, #0]
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d000      	beq.n	3cbc <_sbrk_r+0x1c>
    3cba:	602b      	str	r3, [r5, #0]
    3cbc:	bd38      	pop	{r3, r4, r5, pc}
    3cbe:	46c0      	nop			; (mov r8, r8)
    3cc0:	20003d64 	.word	0x20003d64

00003cc4 <__sread>:
    3cc4:	b538      	push	{r3, r4, r5, lr}
    3cc6:	1c0c      	adds	r4, r1, #0
    3cc8:	250e      	movs	r5, #14
    3cca:	5f49      	ldrsh	r1, [r1, r5]
    3ccc:	f000 f8ac 	bl	3e28 <_read_r>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	db03      	blt.n	3cdc <__sread+0x18>
    3cd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3cd6:	1813      	adds	r3, r2, r0
    3cd8:	6563      	str	r3, [r4, #84]	; 0x54
    3cda:	e003      	b.n	3ce4 <__sread+0x20>
    3cdc:	89a2      	ldrh	r2, [r4, #12]
    3cde:	4b02      	ldr	r3, [pc, #8]	; (3ce8 <__sread+0x24>)
    3ce0:	4013      	ands	r3, r2
    3ce2:	81a3      	strh	r3, [r4, #12]
    3ce4:	bd38      	pop	{r3, r4, r5, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	ffffefff 	.word	0xffffefff

00003cec <__swrite>:
    3cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cee:	1c1e      	adds	r6, r3, #0
    3cf0:	898b      	ldrh	r3, [r1, #12]
    3cf2:	1c05      	adds	r5, r0, #0
    3cf4:	1c0c      	adds	r4, r1, #0
    3cf6:	1c17      	adds	r7, r2, #0
    3cf8:	05da      	lsls	r2, r3, #23
    3cfa:	d505      	bpl.n	3d08 <__swrite+0x1c>
    3cfc:	230e      	movs	r3, #14
    3cfe:	5ec9      	ldrsh	r1, [r1, r3]
    3d00:	2200      	movs	r2, #0
    3d02:	2302      	movs	r3, #2
    3d04:	f000 f87c 	bl	3e00 <_lseek_r>
    3d08:	89a2      	ldrh	r2, [r4, #12]
    3d0a:	4b05      	ldr	r3, [pc, #20]	; (3d20 <__swrite+0x34>)
    3d0c:	1c28      	adds	r0, r5, #0
    3d0e:	4013      	ands	r3, r2
    3d10:	81a3      	strh	r3, [r4, #12]
    3d12:	220e      	movs	r2, #14
    3d14:	5ea1      	ldrsh	r1, [r4, r2]
    3d16:	1c33      	adds	r3, r6, #0
    3d18:	1c3a      	adds	r2, r7, #0
    3d1a:	f000 f827 	bl	3d6c <_write_r>
    3d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d20:	ffffefff 	.word	0xffffefff

00003d24 <__sseek>:
    3d24:	b538      	push	{r3, r4, r5, lr}
    3d26:	1c0c      	adds	r4, r1, #0
    3d28:	250e      	movs	r5, #14
    3d2a:	5f49      	ldrsh	r1, [r1, r5]
    3d2c:	f000 f868 	bl	3e00 <_lseek_r>
    3d30:	89a3      	ldrh	r3, [r4, #12]
    3d32:	1c42      	adds	r2, r0, #1
    3d34:	d103      	bne.n	3d3e <__sseek+0x1a>
    3d36:	4a05      	ldr	r2, [pc, #20]	; (3d4c <__sseek+0x28>)
    3d38:	4013      	ands	r3, r2
    3d3a:	81a3      	strh	r3, [r4, #12]
    3d3c:	e004      	b.n	3d48 <__sseek+0x24>
    3d3e:	2280      	movs	r2, #128	; 0x80
    3d40:	0152      	lsls	r2, r2, #5
    3d42:	4313      	orrs	r3, r2
    3d44:	81a3      	strh	r3, [r4, #12]
    3d46:	6560      	str	r0, [r4, #84]	; 0x54
    3d48:	bd38      	pop	{r3, r4, r5, pc}
    3d4a:	46c0      	nop			; (mov r8, r8)
    3d4c:	ffffefff 	.word	0xffffefff

00003d50 <__sclose>:
    3d50:	b508      	push	{r3, lr}
    3d52:	230e      	movs	r3, #14
    3d54:	5ec9      	ldrsh	r1, [r1, r3]
    3d56:	f000 f81d 	bl	3d94 <_close_r>
    3d5a:	bd08      	pop	{r3, pc}

00003d5c <strlen>:
    3d5c:	2300      	movs	r3, #0
    3d5e:	5cc2      	ldrb	r2, [r0, r3]
    3d60:	3301      	adds	r3, #1
    3d62:	2a00      	cmp	r2, #0
    3d64:	d1fb      	bne.n	3d5e <strlen+0x2>
    3d66:	1e58      	subs	r0, r3, #1
    3d68:	4770      	bx	lr
	...

00003d6c <_write_r>:
    3d6c:	b538      	push	{r3, r4, r5, lr}
    3d6e:	4c08      	ldr	r4, [pc, #32]	; (3d90 <_write_r+0x24>)
    3d70:	1c05      	adds	r5, r0, #0
    3d72:	2000      	movs	r0, #0
    3d74:	6020      	str	r0, [r4, #0]
    3d76:	1c08      	adds	r0, r1, #0
    3d78:	1c11      	adds	r1, r2, #0
    3d7a:	1c1a      	adds	r2, r3, #0
    3d7c:	f7fc fa30 	bl	1e0 <_write>
    3d80:	1c43      	adds	r3, r0, #1
    3d82:	d103      	bne.n	3d8c <_write_r+0x20>
    3d84:	6823      	ldr	r3, [r4, #0]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d000      	beq.n	3d8c <_write_r+0x20>
    3d8a:	602b      	str	r3, [r5, #0]
    3d8c:	bd38      	pop	{r3, r4, r5, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	20003d64 	.word	0x20003d64

00003d94 <_close_r>:
    3d94:	b538      	push	{r3, r4, r5, lr}
    3d96:	4c07      	ldr	r4, [pc, #28]	; (3db4 <_close_r+0x20>)
    3d98:	2300      	movs	r3, #0
    3d9a:	1c05      	adds	r5, r0, #0
    3d9c:	1c08      	adds	r0, r1, #0
    3d9e:	6023      	str	r3, [r4, #0]
    3da0:	f7fd fc1e 	bl	15e0 <_close>
    3da4:	1c43      	adds	r3, r0, #1
    3da6:	d103      	bne.n	3db0 <_close_r+0x1c>
    3da8:	6823      	ldr	r3, [r4, #0]
    3daa:	2b00      	cmp	r3, #0
    3dac:	d000      	beq.n	3db0 <_close_r+0x1c>
    3dae:	602b      	str	r3, [r5, #0]
    3db0:	bd38      	pop	{r3, r4, r5, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	20003d64 	.word	0x20003d64

00003db8 <_fstat_r>:
    3db8:	b538      	push	{r3, r4, r5, lr}
    3dba:	4c07      	ldr	r4, [pc, #28]	; (3dd8 <_fstat_r+0x20>)
    3dbc:	2300      	movs	r3, #0
    3dbe:	1c05      	adds	r5, r0, #0
    3dc0:	1c08      	adds	r0, r1, #0
    3dc2:	1c11      	adds	r1, r2, #0
    3dc4:	6023      	str	r3, [r4, #0]
    3dc6:	f7fd fc0f 	bl	15e8 <_fstat>
    3dca:	1c43      	adds	r3, r0, #1
    3dcc:	d103      	bne.n	3dd6 <_fstat_r+0x1e>
    3dce:	6823      	ldr	r3, [r4, #0]
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d000      	beq.n	3dd6 <_fstat_r+0x1e>
    3dd4:	602b      	str	r3, [r5, #0]
    3dd6:	bd38      	pop	{r3, r4, r5, pc}
    3dd8:	20003d64 	.word	0x20003d64

00003ddc <_isatty_r>:
    3ddc:	b538      	push	{r3, r4, r5, lr}
    3dde:	4c07      	ldr	r4, [pc, #28]	; (3dfc <_isatty_r+0x20>)
    3de0:	2300      	movs	r3, #0
    3de2:	1c05      	adds	r5, r0, #0
    3de4:	1c08      	adds	r0, r1, #0
    3de6:	6023      	str	r3, [r4, #0]
    3de8:	f7fd fc04 	bl	15f4 <_isatty>
    3dec:	1c43      	adds	r3, r0, #1
    3dee:	d103      	bne.n	3df8 <_isatty_r+0x1c>
    3df0:	6823      	ldr	r3, [r4, #0]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d000      	beq.n	3df8 <_isatty_r+0x1c>
    3df6:	602b      	str	r3, [r5, #0]
    3df8:	bd38      	pop	{r3, r4, r5, pc}
    3dfa:	46c0      	nop			; (mov r8, r8)
    3dfc:	20003d64 	.word	0x20003d64

00003e00 <_lseek_r>:
    3e00:	b538      	push	{r3, r4, r5, lr}
    3e02:	4c08      	ldr	r4, [pc, #32]	; (3e24 <_lseek_r+0x24>)
    3e04:	1c05      	adds	r5, r0, #0
    3e06:	2000      	movs	r0, #0
    3e08:	6020      	str	r0, [r4, #0]
    3e0a:	1c08      	adds	r0, r1, #0
    3e0c:	1c11      	adds	r1, r2, #0
    3e0e:	1c1a      	adds	r2, r3, #0
    3e10:	f7fd fbf2 	bl	15f8 <_lseek>
    3e14:	1c43      	adds	r3, r0, #1
    3e16:	d103      	bne.n	3e20 <_lseek_r+0x20>
    3e18:	6823      	ldr	r3, [r4, #0]
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d000      	beq.n	3e20 <_lseek_r+0x20>
    3e1e:	602b      	str	r3, [r5, #0]
    3e20:	bd38      	pop	{r3, r4, r5, pc}
    3e22:	46c0      	nop			; (mov r8, r8)
    3e24:	20003d64 	.word	0x20003d64

00003e28 <_read_r>:
    3e28:	b538      	push	{r3, r4, r5, lr}
    3e2a:	4c08      	ldr	r4, [pc, #32]	; (3e4c <_read_r+0x24>)
    3e2c:	1c05      	adds	r5, r0, #0
    3e2e:	2000      	movs	r0, #0
    3e30:	6020      	str	r0, [r4, #0]
    3e32:	1c08      	adds	r0, r1, #0
    3e34:	1c11      	adds	r1, r2, #0
    3e36:	1c1a      	adds	r2, r3, #0
    3e38:	f7fc f9b0 	bl	19c <_read>
    3e3c:	1c43      	adds	r3, r0, #1
    3e3e:	d103      	bne.n	3e48 <_read_r+0x20>
    3e40:	6823      	ldr	r3, [r4, #0]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d000      	beq.n	3e48 <_read_r+0x20>
    3e46:	602b      	str	r3, [r5, #0]
    3e48:	bd38      	pop	{r3, r4, r5, pc}
    3e4a:	46c0      	nop			; (mov r8, r8)
    3e4c:	20003d64 	.word	0x20003d64
    3e50:	42000800 	.word	0x42000800
    3e54:	42000c00 	.word	0x42000c00
    3e58:	42001000 	.word	0x42001000
    3e5c:	42001400 	.word	0x42001400
    3e60:	42001800 	.word	0x42001800
    3e64:	42001c00 	.word	0x42001c00
    3e68:	0c0b0a09 	.word	0x0c0b0a09
    3e6c:	00000e0d 	.word	0x00000e0d
    3e70:	00000fa4 	.word	0x00000fa4
    3e74:	00001000 	.word	0x00001000
    3e78:	00001000 	.word	0x00001000
    3e7c:	00000f9e 	.word	0x00000f9e
    3e80:	00000f9e 	.word	0x00000f9e
    3e84:	00000fba 	.word	0x00000fba
    3e88:	00000faa 	.word	0x00000faa
    3e8c:	00000fc0 	.word	0x00000fc0
    3e90:	00000fee 	.word	0x00000fee
    3e94:	00001088 	.word	0x00001088
    3e98:	000010e8 	.word	0x000010e8
    3e9c:	000010e8 	.word	0x000010e8
    3ea0:	00001068 	.word	0x00001068
    3ea4:	0000107a 	.word	0x0000107a
    3ea8:	00001096 	.word	0x00001096
    3eac:	0000106c 	.word	0x0000106c
    3eb0:	000010a4 	.word	0x000010a4
    3eb4:	000010d8 	.word	0x000010d8
    3eb8:	454c4449 	.word	0x454c4449
    3ebc:	00000000 	.word	0x00000000
    3ec0:	00002bda 	.word	0x00002bda
    3ec4:	00002bda 	.word	0x00002bda
    3ec8:	00002bda 	.word	0x00002bda
    3ecc:	00002c32 	.word	0x00002c32
    3ed0:	00002c14 	.word	0x00002c14
    3ed4:	00002c2c 	.word	0x00002c2c
    3ed8:	00002bda 	.word	0x00002bda
    3edc:	00002bda 	.word	0x00002bda
    3ee0:	00002c32 	.word	0x00002c32
    3ee4:	00002c14 	.word	0x00002c14
    3ee8:	20726d54 	.word	0x20726d54
    3eec:	00637653 	.word	0x00637653
    3ef0:	626f6f67 	.word	0x626f6f67
    3ef4:	00737265 	.word	0x00737265
    3ef8:	0044434c 	.word	0x0044434c
    3efc:	2077654e 	.word	0x2077654e
    3f00:	736e6553 	.word	0x736e6553
    3f04:	0000726f 	.word	0x0000726f
    3f08:	6c616e41 	.word	0x6c616e41
    3f0c:	20657a79 	.word	0x20657a79
    3f10:	61746144 	.word	0x61746144
    3f14:	00000000 	.word	0x00000000
    3f18:	706d6153 	.word	0x706d6153
    3f1c:	5420656c 	.word	0x5420656c
    3f20:	00706d65 	.word	0x00706d65
    3f24:	6e65704f 	.word	0x6e65704f
    3f28:	6f6c432f 	.word	0x6f6c432f
    3f2c:	00006573 	.word	0x00006573
    3f30:	74737953 	.word	0x74737953
    3f34:	206b7361 	.word	0x206b7361
    3f38:	646e6148 	.word	0x646e6148
    3f3c:	0072656c 	.word	0x0072656c
    3f40:	00000043 	.word	0x00000043

00003f44 <_global_impure_ptr>:
    3f44:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    3f54:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    3f64:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    3f74:	64636261 00006665                       abcdef..

00003f7c <__sf_fake_stdin>:
	...

00003f9c <__sf_fake_stdout>:
	...

00003fbc <__sf_fake_stderr>:
	...

00003fdc <_init>:
    3fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3fe2:	bc08      	pop	{r3}
    3fe4:	469e      	mov	lr, r3
    3fe6:	4770      	bx	lr

00003fe8 <__init_array_start>:
    3fe8:	000000dd 	.word	0x000000dd

00003fec <_fini>:
    3fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3ff2:	bc08      	pop	{r3}
    3ff4:	469e      	mov	lr, r3
    3ff6:	4770      	bx	lr

00003ff8 <__fini_array_start>:
    3ff8:	000000b5 	.word	0x000000b5
=======
    22ae:	b004      	add	sp, #16
    22b0:	bd70      	pop	{r4, r5, r6, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	000011c1 	.word	0x000011c1
    22b8:	20003ca4 	.word	0x20003ca4
    22bc:	20003c9c 	.word	0x20003c9c
    22c0:	00000b21 	.word	0x00000b21
    22c4:	20003ca0 	.word	0x20003ca0
    22c8:	00002201 	.word	0x00002201
    22cc:	00003284 	.word	0x00003284
    22d0:	00001545 	.word	0x00001545
    22d4:	000021f1 	.word	0x000021f1
    22d8:	00003288 	.word	0x00003288
    22dc:	000021e1 	.word	0x000021e1
    22e0:	00003294 	.word	0x00003294
    22e4:	000021d1 	.word	0x000021d1
    22e8:	000032a4 	.word	0x000032a4
    22ec:	000021c1 	.word	0x000021c1
    22f0:	000032b0 	.word	0x000032b0
    22f4:	000021b1 	.word	0x000021b1
    22f8:	000032bc 	.word	0x000032bc

000022fc <main>:

uint8_t* TEMP_QUEUE;
uint8_t* REGISTER_QUEUE;

int main (void)
{
    22fc:	b508      	push	{r3, lr}
	system_init();
    22fe:	4b03      	ldr	r3, [pc, #12]	; (230c <main+0x10>)
    2300:	4798      	blx	r3
	//gfx_mono_init();

	// Initialize the demo..
	tasks_init();
    2302:	4b03      	ldr	r3, [pc, #12]	; (2310 <main+0x14>)
    2304:	4798      	blx	r3

	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    2306:	4b03      	ldr	r3, [pc, #12]	; (2314 <main+0x18>)
    2308:	4798      	blx	r3
    230a:	e7fe      	b.n	230a <main+0xe>
    230c:	00000a19 	.word	0x00000a19
    2310:	0000221d 	.word	0x0000221d
    2314:	00001739 	.word	0x00001739

00002318 <__aeabi_uidiv>:
    2318:	2900      	cmp	r1, #0
    231a:	d034      	beq.n	2386 <.udivsi3_skip_div0_test+0x6a>

0000231c <.udivsi3_skip_div0_test>:
    231c:	2301      	movs	r3, #1
    231e:	2200      	movs	r2, #0
    2320:	b410      	push	{r4}
    2322:	4288      	cmp	r0, r1
    2324:	d32c      	bcc.n	2380 <.udivsi3_skip_div0_test+0x64>
    2326:	2401      	movs	r4, #1
    2328:	0724      	lsls	r4, r4, #28
    232a:	42a1      	cmp	r1, r4
    232c:	d204      	bcs.n	2338 <.udivsi3_skip_div0_test+0x1c>
    232e:	4281      	cmp	r1, r0
    2330:	d202      	bcs.n	2338 <.udivsi3_skip_div0_test+0x1c>
    2332:	0109      	lsls	r1, r1, #4
    2334:	011b      	lsls	r3, r3, #4
    2336:	e7f8      	b.n	232a <.udivsi3_skip_div0_test+0xe>
    2338:	00e4      	lsls	r4, r4, #3
    233a:	42a1      	cmp	r1, r4
    233c:	d204      	bcs.n	2348 <.udivsi3_skip_div0_test+0x2c>
    233e:	4281      	cmp	r1, r0
    2340:	d202      	bcs.n	2348 <.udivsi3_skip_div0_test+0x2c>
    2342:	0049      	lsls	r1, r1, #1
    2344:	005b      	lsls	r3, r3, #1
    2346:	e7f8      	b.n	233a <.udivsi3_skip_div0_test+0x1e>
    2348:	4288      	cmp	r0, r1
    234a:	d301      	bcc.n	2350 <.udivsi3_skip_div0_test+0x34>
    234c:	1a40      	subs	r0, r0, r1
    234e:	431a      	orrs	r2, r3
    2350:	084c      	lsrs	r4, r1, #1
    2352:	42a0      	cmp	r0, r4
    2354:	d302      	bcc.n	235c <.udivsi3_skip_div0_test+0x40>
    2356:	1b00      	subs	r0, r0, r4
    2358:	085c      	lsrs	r4, r3, #1
    235a:	4322      	orrs	r2, r4
    235c:	088c      	lsrs	r4, r1, #2
    235e:	42a0      	cmp	r0, r4
    2360:	d302      	bcc.n	2368 <.udivsi3_skip_div0_test+0x4c>
    2362:	1b00      	subs	r0, r0, r4
    2364:	089c      	lsrs	r4, r3, #2
    2366:	4322      	orrs	r2, r4
    2368:	08cc      	lsrs	r4, r1, #3
    236a:	42a0      	cmp	r0, r4
    236c:	d302      	bcc.n	2374 <.udivsi3_skip_div0_test+0x58>
    236e:	1b00      	subs	r0, r0, r4
    2370:	08dc      	lsrs	r4, r3, #3
    2372:	4322      	orrs	r2, r4
    2374:	2800      	cmp	r0, #0
    2376:	d003      	beq.n	2380 <.udivsi3_skip_div0_test+0x64>
    2378:	091b      	lsrs	r3, r3, #4
    237a:	d001      	beq.n	2380 <.udivsi3_skip_div0_test+0x64>
    237c:	0909      	lsrs	r1, r1, #4
    237e:	e7e3      	b.n	2348 <.udivsi3_skip_div0_test+0x2c>
    2380:	1c10      	adds	r0, r2, #0
    2382:	bc10      	pop	{r4}
    2384:	4770      	bx	lr
    2386:	2800      	cmp	r0, #0
    2388:	d001      	beq.n	238e <.udivsi3_skip_div0_test+0x72>
    238a:	2000      	movs	r0, #0
    238c:	43c0      	mvns	r0, r0
    238e:	b407      	push	{r0, r1, r2}
    2390:	4802      	ldr	r0, [pc, #8]	; (239c <.udivsi3_skip_div0_test+0x80>)
    2392:	a102      	add	r1, pc, #8	; (adr r1, 239c <.udivsi3_skip_div0_test+0x80>)
    2394:	1840      	adds	r0, r0, r1
    2396:	9002      	str	r0, [sp, #8]
    2398:	bd03      	pop	{r0, r1, pc}
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	00000019 	.word	0x00000019

000023a0 <__aeabi_uidivmod>:
    23a0:	2900      	cmp	r1, #0
    23a2:	d0f0      	beq.n	2386 <.udivsi3_skip_div0_test+0x6a>
    23a4:	b503      	push	{r0, r1, lr}
    23a6:	f7ff ffb9 	bl	231c <.udivsi3_skip_div0_test>
    23aa:	bc0e      	pop	{r1, r2, r3}
    23ac:	4342      	muls	r2, r0
    23ae:	1a89      	subs	r1, r1, r2
    23b0:	4718      	bx	r3
    23b2:	46c0      	nop			; (mov r8, r8)

000023b4 <__aeabi_idiv0>:
    23b4:	4770      	bx	lr
    23b6:	46c0      	nop			; (mov r8, r8)

000023b8 <__libc_init_array>:
    23b8:	b570      	push	{r4, r5, r6, lr}
    23ba:	4b0e      	ldr	r3, [pc, #56]	; (23f4 <__libc_init_array+0x3c>)
    23bc:	4d0e      	ldr	r5, [pc, #56]	; (23f8 <__libc_init_array+0x40>)
    23be:	2400      	movs	r4, #0
    23c0:	1aed      	subs	r5, r5, r3
    23c2:	10ad      	asrs	r5, r5, #2
    23c4:	1c1e      	adds	r6, r3, #0
    23c6:	42ac      	cmp	r4, r5
    23c8:	d004      	beq.n	23d4 <__libc_init_array+0x1c>
    23ca:	00a3      	lsls	r3, r4, #2
    23cc:	58f3      	ldr	r3, [r6, r3]
    23ce:	4798      	blx	r3
    23d0:	3401      	adds	r4, #1
    23d2:	e7f8      	b.n	23c6 <__libc_init_array+0xe>
    23d4:	f000 ffc8 	bl	3368 <_init>
    23d8:	4b08      	ldr	r3, [pc, #32]	; (23fc <__libc_init_array+0x44>)
    23da:	4d09      	ldr	r5, [pc, #36]	; (2400 <__libc_init_array+0x48>)
    23dc:	2400      	movs	r4, #0
    23de:	1aed      	subs	r5, r5, r3
    23e0:	10ad      	asrs	r5, r5, #2
    23e2:	1c1e      	adds	r6, r3, #0
    23e4:	42ac      	cmp	r4, r5
    23e6:	d004      	beq.n	23f2 <__libc_init_array+0x3a>
    23e8:	00a3      	lsls	r3, r4, #2
    23ea:	58f3      	ldr	r3, [r6, r3]
    23ec:	4798      	blx	r3
    23ee:	3401      	adds	r4, #1
    23f0:	e7f8      	b.n	23e4 <__libc_init_array+0x2c>
    23f2:	bd70      	pop	{r4, r5, r6, pc}
    23f4:	00003374 	.word	0x00003374
    23f8:	00003374 	.word	0x00003374
    23fc:	00003374 	.word	0x00003374
    2400:	00003378 	.word	0x00003378

00002404 <memcpy>:
    2404:	b510      	push	{r4, lr}
    2406:	2300      	movs	r3, #0
    2408:	4293      	cmp	r3, r2
    240a:	d003      	beq.n	2414 <memcpy+0x10>
    240c:	5ccc      	ldrb	r4, [r1, r3]
    240e:	54c4      	strb	r4, [r0, r3]
    2410:	3301      	adds	r3, #1
    2412:	e7f9      	b.n	2408 <memcpy+0x4>
    2414:	bd10      	pop	{r4, pc}

00002416 <memset>:
    2416:	1c03      	adds	r3, r0, #0
    2418:	1882      	adds	r2, r0, r2
    241a:	4293      	cmp	r3, r2
    241c:	d002      	beq.n	2424 <memset+0xe>
    241e:	7019      	strb	r1, [r3, #0]
    2420:	3301      	adds	r3, #1
    2422:	e7fa      	b.n	241a <memset+0x4>
    2424:	4770      	bx	lr
	...

00002428 <iprintf>:
    2428:	b40f      	push	{r0, r1, r2, r3}
    242a:	4b0b      	ldr	r3, [pc, #44]	; (2458 <iprintf+0x30>)
    242c:	b513      	push	{r0, r1, r4, lr}
    242e:	681c      	ldr	r4, [r3, #0]
    2430:	2c00      	cmp	r4, #0
    2432:	d005      	beq.n	2440 <iprintf+0x18>
    2434:	69a3      	ldr	r3, [r4, #24]
    2436:	2b00      	cmp	r3, #0
    2438:	d102      	bne.n	2440 <iprintf+0x18>
    243a:	1c20      	adds	r0, r4, #0
    243c:	f000 fc9c 	bl	2d78 <__sinit>
    2440:	ab05      	add	r3, sp, #20
    2442:	68a1      	ldr	r1, [r4, #8]
    2444:	1c20      	adds	r0, r4, #0
    2446:	9a04      	ldr	r2, [sp, #16]
    2448:	9301      	str	r3, [sp, #4]
    244a:	f000 f82f 	bl	24ac <_vfiprintf_r>
    244e:	bc16      	pop	{r1, r2, r4}
    2450:	bc08      	pop	{r3}
    2452:	b004      	add	sp, #16
    2454:	4718      	bx	r3
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	2000006c 	.word	0x2000006c

0000245c <__sfputc_r>:
    245c:	6893      	ldr	r3, [r2, #8]
    245e:	b510      	push	{r4, lr}
    2460:	3b01      	subs	r3, #1
    2462:	6093      	str	r3, [r2, #8]
    2464:	2b00      	cmp	r3, #0
    2466:	da05      	bge.n	2474 <__sfputc_r+0x18>
    2468:	6994      	ldr	r4, [r2, #24]
    246a:	42a3      	cmp	r3, r4
    246c:	db08      	blt.n	2480 <__sfputc_r+0x24>
    246e:	b2cb      	uxtb	r3, r1
    2470:	2b0a      	cmp	r3, #10
    2472:	d005      	beq.n	2480 <__sfputc_r+0x24>
    2474:	6813      	ldr	r3, [r2, #0]
    2476:	1c58      	adds	r0, r3, #1
    2478:	6010      	str	r0, [r2, #0]
    247a:	7019      	strb	r1, [r3, #0]
    247c:	b2c8      	uxtb	r0, r1
    247e:	e001      	b.n	2484 <__sfputc_r+0x28>
    2480:	f000 faa6 	bl	29d0 <__swbuf_r>
    2484:	bd10      	pop	{r4, pc}

00002486 <__sfputs_r>:
    2486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2488:	1c06      	adds	r6, r0, #0
    248a:	1c0f      	adds	r7, r1, #0
    248c:	1c14      	adds	r4, r2, #0
    248e:	18d5      	adds	r5, r2, r3
    2490:	42ac      	cmp	r4, r5
    2492:	d008      	beq.n	24a6 <__sfputs_r+0x20>
    2494:	7821      	ldrb	r1, [r4, #0]
    2496:	1c30      	adds	r0, r6, #0
    2498:	1c3a      	adds	r2, r7, #0
    249a:	f7ff ffdf 	bl	245c <__sfputc_r>
    249e:	3401      	adds	r4, #1
    24a0:	1c43      	adds	r3, r0, #1
    24a2:	d1f5      	bne.n	2490 <__sfputs_r+0xa>
    24a4:	e000      	b.n	24a8 <__sfputs_r+0x22>
    24a6:	2000      	movs	r0, #0
    24a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000024ac <_vfiprintf_r>:
    24ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ae:	b09f      	sub	sp, #124	; 0x7c
    24b0:	1c06      	adds	r6, r0, #0
    24b2:	1c0f      	adds	r7, r1, #0
    24b4:	9203      	str	r2, [sp, #12]
    24b6:	9305      	str	r3, [sp, #20]
    24b8:	2800      	cmp	r0, #0
    24ba:	d004      	beq.n	24c6 <_vfiprintf_r+0x1a>
    24bc:	6981      	ldr	r1, [r0, #24]
    24be:	2900      	cmp	r1, #0
    24c0:	d101      	bne.n	24c6 <_vfiprintf_r+0x1a>
    24c2:	f000 fc59 	bl	2d78 <__sinit>
    24c6:	4b75      	ldr	r3, [pc, #468]	; (269c <_vfiprintf_r+0x1f0>)
    24c8:	429f      	cmp	r7, r3
    24ca:	d101      	bne.n	24d0 <_vfiprintf_r+0x24>
    24cc:	6877      	ldr	r7, [r6, #4]
    24ce:	e008      	b.n	24e2 <_vfiprintf_r+0x36>
    24d0:	4b73      	ldr	r3, [pc, #460]	; (26a0 <_vfiprintf_r+0x1f4>)
    24d2:	429f      	cmp	r7, r3
    24d4:	d101      	bne.n	24da <_vfiprintf_r+0x2e>
    24d6:	68b7      	ldr	r7, [r6, #8]
    24d8:	e003      	b.n	24e2 <_vfiprintf_r+0x36>
    24da:	4b72      	ldr	r3, [pc, #456]	; (26a4 <_vfiprintf_r+0x1f8>)
    24dc:	429f      	cmp	r7, r3
    24de:	d100      	bne.n	24e2 <_vfiprintf_r+0x36>
    24e0:	68f7      	ldr	r7, [r6, #12]
    24e2:	89bb      	ldrh	r3, [r7, #12]
    24e4:	071a      	lsls	r2, r3, #28
    24e6:	d50a      	bpl.n	24fe <_vfiprintf_r+0x52>
    24e8:	693b      	ldr	r3, [r7, #16]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d007      	beq.n	24fe <_vfiprintf_r+0x52>
    24ee:	ad06      	add	r5, sp, #24
    24f0:	2300      	movs	r3, #0
    24f2:	616b      	str	r3, [r5, #20]
    24f4:	2320      	movs	r3, #32
    24f6:	766b      	strb	r3, [r5, #25]
    24f8:	2330      	movs	r3, #48	; 0x30
    24fa:	76ab      	strb	r3, [r5, #26]
    24fc:	e03b      	b.n	2576 <_vfiprintf_r+0xca>
    24fe:	1c30      	adds	r0, r6, #0
    2500:	1c39      	adds	r1, r7, #0
    2502:	f000 fabd 	bl	2a80 <__swsetup_r>
    2506:	2800      	cmp	r0, #0
    2508:	d0f1      	beq.n	24ee <_vfiprintf_r+0x42>
    250a:	2001      	movs	r0, #1
    250c:	4240      	negs	r0, r0
    250e:	e0c2      	b.n	2696 <_vfiprintf_r+0x1ea>
    2510:	9a05      	ldr	r2, [sp, #20]
    2512:	1d11      	adds	r1, r2, #4
    2514:	6812      	ldr	r2, [r2, #0]
    2516:	9105      	str	r1, [sp, #20]
    2518:	2a00      	cmp	r2, #0
    251a:	db76      	blt.n	260a <_vfiprintf_r+0x15e>
    251c:	9209      	str	r2, [sp, #36]	; 0x24
    251e:	3401      	adds	r4, #1
    2520:	7823      	ldrb	r3, [r4, #0]
    2522:	2b2e      	cmp	r3, #46	; 0x2e
    2524:	d100      	bne.n	2528 <_vfiprintf_r+0x7c>
    2526:	e081      	b.n	262c <_vfiprintf_r+0x180>
    2528:	7821      	ldrb	r1, [r4, #0]
    252a:	485f      	ldr	r0, [pc, #380]	; (26a8 <_vfiprintf_r+0x1fc>)
    252c:	2203      	movs	r2, #3
    252e:	f000 fce3 	bl	2ef8 <memchr>
    2532:	2800      	cmp	r0, #0
    2534:	d007      	beq.n	2546 <_vfiprintf_r+0x9a>
    2536:	495c      	ldr	r1, [pc, #368]	; (26a8 <_vfiprintf_r+0x1fc>)
    2538:	682a      	ldr	r2, [r5, #0]
    253a:	1a43      	subs	r3, r0, r1
    253c:	2040      	movs	r0, #64	; 0x40
    253e:	4098      	lsls	r0, r3
    2540:	4310      	orrs	r0, r2
    2542:	6028      	str	r0, [r5, #0]
    2544:	3401      	adds	r4, #1
    2546:	7821      	ldrb	r1, [r4, #0]
    2548:	1c63      	adds	r3, r4, #1
    254a:	4858      	ldr	r0, [pc, #352]	; (26ac <_vfiprintf_r+0x200>)
    254c:	2206      	movs	r2, #6
    254e:	9303      	str	r3, [sp, #12]
    2550:	7629      	strb	r1, [r5, #24]
    2552:	f000 fcd1 	bl	2ef8 <memchr>
    2556:	2800      	cmp	r0, #0
    2558:	d100      	bne.n	255c <_vfiprintf_r+0xb0>
    255a:	e08a      	b.n	2672 <_vfiprintf_r+0x1c6>
    255c:	4b54      	ldr	r3, [pc, #336]	; (26b0 <_vfiprintf_r+0x204>)
    255e:	2b00      	cmp	r3, #0
    2560:	d17e      	bne.n	2660 <_vfiprintf_r+0x1b4>
    2562:	9b05      	ldr	r3, [sp, #20]
    2564:	2207      	movs	r2, #7
    2566:	3307      	adds	r3, #7
    2568:	4393      	bics	r3, r2
    256a:	3308      	adds	r3, #8
    256c:	9305      	str	r3, [sp, #20]
    256e:	696a      	ldr	r2, [r5, #20]
    2570:	9904      	ldr	r1, [sp, #16]
    2572:	1853      	adds	r3, r2, r1
    2574:	616b      	str	r3, [r5, #20]
    2576:	9c03      	ldr	r4, [sp, #12]
    2578:	7823      	ldrb	r3, [r4, #0]
    257a:	2b00      	cmp	r3, #0
    257c:	d104      	bne.n	2588 <_vfiprintf_r+0xdc>
    257e:	9903      	ldr	r1, [sp, #12]
    2580:	1a61      	subs	r1, r4, r1
    2582:	9102      	str	r1, [sp, #8]
    2584:	d010      	beq.n	25a8 <_vfiprintf_r+0xfc>
    2586:	e003      	b.n	2590 <_vfiprintf_r+0xe4>
    2588:	2b25      	cmp	r3, #37	; 0x25
    258a:	d0f8      	beq.n	257e <_vfiprintf_r+0xd2>
    258c:	3401      	adds	r4, #1
    258e:	e7f3      	b.n	2578 <_vfiprintf_r+0xcc>
    2590:	1c30      	adds	r0, r6, #0
    2592:	1c39      	adds	r1, r7, #0
    2594:	9a03      	ldr	r2, [sp, #12]
    2596:	9b02      	ldr	r3, [sp, #8]
    2598:	f7ff ff75 	bl	2486 <__sfputs_r>
    259c:	3001      	adds	r0, #1
    259e:	d075      	beq.n	268c <_vfiprintf_r+0x1e0>
    25a0:	696a      	ldr	r2, [r5, #20]
    25a2:	9902      	ldr	r1, [sp, #8]
    25a4:	1853      	adds	r3, r2, r1
    25a6:	616b      	str	r3, [r5, #20]
    25a8:	7823      	ldrb	r3, [r4, #0]
    25aa:	2b00      	cmp	r3, #0
    25ac:	d06e      	beq.n	268c <_vfiprintf_r+0x1e0>
    25ae:	2201      	movs	r2, #1
    25b0:	4252      	negs	r2, r2
    25b2:	606a      	str	r2, [r5, #4]
    25b4:	466a      	mov	r2, sp
    25b6:	2300      	movs	r3, #0
    25b8:	325b      	adds	r2, #91	; 0x5b
    25ba:	3401      	adds	r4, #1
    25bc:	602b      	str	r3, [r5, #0]
    25be:	60eb      	str	r3, [r5, #12]
    25c0:	60ab      	str	r3, [r5, #8]
    25c2:	7013      	strb	r3, [r2, #0]
    25c4:	65ab      	str	r3, [r5, #88]	; 0x58
    25c6:	7821      	ldrb	r1, [r4, #0]
    25c8:	483a      	ldr	r0, [pc, #232]	; (26b4 <_vfiprintf_r+0x208>)
    25ca:	2205      	movs	r2, #5
    25cc:	f000 fc94 	bl	2ef8 <memchr>
    25d0:	2800      	cmp	r0, #0
    25d2:	d008      	beq.n	25e6 <_vfiprintf_r+0x13a>
    25d4:	4a37      	ldr	r2, [pc, #220]	; (26b4 <_vfiprintf_r+0x208>)
    25d6:	3401      	adds	r4, #1
    25d8:	1a83      	subs	r3, r0, r2
    25da:	2001      	movs	r0, #1
    25dc:	4098      	lsls	r0, r3
    25de:	682b      	ldr	r3, [r5, #0]
    25e0:	4318      	orrs	r0, r3
    25e2:	6028      	str	r0, [r5, #0]
    25e4:	e7ef      	b.n	25c6 <_vfiprintf_r+0x11a>
    25e6:	682b      	ldr	r3, [r5, #0]
    25e8:	06d9      	lsls	r1, r3, #27
    25ea:	d503      	bpl.n	25f4 <_vfiprintf_r+0x148>
    25ec:	466a      	mov	r2, sp
    25ee:	2120      	movs	r1, #32
    25f0:	325b      	adds	r2, #91	; 0x5b
    25f2:	7011      	strb	r1, [r2, #0]
    25f4:	071a      	lsls	r2, r3, #28
    25f6:	d503      	bpl.n	2600 <_vfiprintf_r+0x154>
    25f8:	466a      	mov	r2, sp
    25fa:	212b      	movs	r1, #43	; 0x2b
    25fc:	325b      	adds	r2, #91	; 0x5b
    25fe:	7011      	strb	r1, [r2, #0]
    2600:	7822      	ldrb	r2, [r4, #0]
    2602:	2a2a      	cmp	r2, #42	; 0x2a
    2604:	d084      	beq.n	2510 <_vfiprintf_r+0x64>
    2606:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2608:	e005      	b.n	2616 <_vfiprintf_r+0x16a>
    260a:	4252      	negs	r2, r2
    260c:	60ea      	str	r2, [r5, #12]
    260e:	2202      	movs	r2, #2
    2610:	4313      	orrs	r3, r2
    2612:	602b      	str	r3, [r5, #0]
    2614:	e783      	b.n	251e <_vfiprintf_r+0x72>
    2616:	7822      	ldrb	r2, [r4, #0]
    2618:	3a30      	subs	r2, #48	; 0x30
    261a:	2a09      	cmp	r2, #9
    261c:	d804      	bhi.n	2628 <_vfiprintf_r+0x17c>
    261e:	210a      	movs	r1, #10
    2620:	434b      	muls	r3, r1
    2622:	3401      	adds	r4, #1
    2624:	189b      	adds	r3, r3, r2
    2626:	e7f6      	b.n	2616 <_vfiprintf_r+0x16a>
    2628:	9309      	str	r3, [sp, #36]	; 0x24
    262a:	e779      	b.n	2520 <_vfiprintf_r+0x74>
    262c:	7863      	ldrb	r3, [r4, #1]
    262e:	2b2a      	cmp	r3, #42	; 0x2a
    2630:	d109      	bne.n	2646 <_vfiprintf_r+0x19a>
    2632:	9b05      	ldr	r3, [sp, #20]
    2634:	3402      	adds	r4, #2
    2636:	1d1a      	adds	r2, r3, #4
    2638:	681b      	ldr	r3, [r3, #0]
    263a:	9205      	str	r2, [sp, #20]
    263c:	2b00      	cmp	r3, #0
    263e:	da0d      	bge.n	265c <_vfiprintf_r+0x1b0>
    2640:	2301      	movs	r3, #1
    2642:	425b      	negs	r3, r3
    2644:	e00a      	b.n	265c <_vfiprintf_r+0x1b0>
    2646:	3401      	adds	r4, #1
    2648:	2300      	movs	r3, #0
    264a:	7822      	ldrb	r2, [r4, #0]
    264c:	3a30      	subs	r2, #48	; 0x30
    264e:	2a09      	cmp	r2, #9
    2650:	d804      	bhi.n	265c <_vfiprintf_r+0x1b0>
    2652:	210a      	movs	r1, #10
    2654:	434b      	muls	r3, r1
    2656:	3401      	adds	r4, #1
    2658:	189b      	adds	r3, r3, r2
    265a:	e7f6      	b.n	264a <_vfiprintf_r+0x19e>
    265c:	9307      	str	r3, [sp, #28]
    265e:	e763      	b.n	2528 <_vfiprintf_r+0x7c>
    2660:	ab05      	add	r3, sp, #20
    2662:	9300      	str	r3, [sp, #0]
    2664:	1c30      	adds	r0, r6, #0
    2666:	1c29      	adds	r1, r5, #0
    2668:	1c3a      	adds	r2, r7, #0
    266a:	4b13      	ldr	r3, [pc, #76]	; (26b8 <_vfiprintf_r+0x20c>)
    266c:	e000      	b.n	2670 <_vfiprintf_r+0x1c4>
    266e:	bf00      	nop
    2670:	e007      	b.n	2682 <_vfiprintf_r+0x1d6>
    2672:	ab05      	add	r3, sp, #20
    2674:	9300      	str	r3, [sp, #0]
    2676:	1c30      	adds	r0, r6, #0
    2678:	1c29      	adds	r1, r5, #0
    267a:	1c3a      	adds	r2, r7, #0
    267c:	4b0e      	ldr	r3, [pc, #56]	; (26b8 <_vfiprintf_r+0x20c>)
    267e:	f000 f891 	bl	27a4 <_printf_i>
    2682:	9004      	str	r0, [sp, #16]
    2684:	9904      	ldr	r1, [sp, #16]
    2686:	3101      	adds	r1, #1
    2688:	d000      	beq.n	268c <_vfiprintf_r+0x1e0>
    268a:	e770      	b.n	256e <_vfiprintf_r+0xc2>
    268c:	89bb      	ldrh	r3, [r7, #12]
    268e:	065a      	lsls	r2, r3, #25
    2690:	d500      	bpl.n	2694 <_vfiprintf_r+0x1e8>
    2692:	e73a      	b.n	250a <_vfiprintf_r+0x5e>
    2694:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2696:	b01f      	add	sp, #124	; 0x7c
    2698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	00003308 	.word	0x00003308
    26a0:	00003328 	.word	0x00003328
    26a4:	00003348 	.word	0x00003348
    26a8:	000032da 	.word	0x000032da
    26ac:	000032de 	.word	0x000032de
    26b0:	00000000 	.word	0x00000000
    26b4:	000032d4 	.word	0x000032d4
    26b8:	00002487 	.word	0x00002487

000026bc <_printf_common>:
    26bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26be:	1c15      	adds	r5, r2, #0
    26c0:	9301      	str	r3, [sp, #4]
    26c2:	690a      	ldr	r2, [r1, #16]
    26c4:	688b      	ldr	r3, [r1, #8]
    26c6:	1c06      	adds	r6, r0, #0
    26c8:	1c0c      	adds	r4, r1, #0
    26ca:	4293      	cmp	r3, r2
    26cc:	da00      	bge.n	26d0 <_printf_common+0x14>
    26ce:	1c13      	adds	r3, r2, #0
    26d0:	1c22      	adds	r2, r4, #0
    26d2:	602b      	str	r3, [r5, #0]
    26d4:	3243      	adds	r2, #67	; 0x43
    26d6:	7812      	ldrb	r2, [r2, #0]
    26d8:	2a00      	cmp	r2, #0
    26da:	d001      	beq.n	26e0 <_printf_common+0x24>
    26dc:	3301      	adds	r3, #1
    26de:	602b      	str	r3, [r5, #0]
    26e0:	6820      	ldr	r0, [r4, #0]
    26e2:	0680      	lsls	r0, r0, #26
    26e4:	d502      	bpl.n	26ec <_printf_common+0x30>
    26e6:	682b      	ldr	r3, [r5, #0]
    26e8:	3302      	adds	r3, #2
    26ea:	602b      	str	r3, [r5, #0]
    26ec:	6821      	ldr	r1, [r4, #0]
    26ee:	2706      	movs	r7, #6
    26f0:	400f      	ands	r7, r1
    26f2:	d01f      	beq.n	2734 <_printf_common+0x78>
    26f4:	1c23      	adds	r3, r4, #0
    26f6:	3343      	adds	r3, #67	; 0x43
    26f8:	781b      	ldrb	r3, [r3, #0]
    26fa:	1e5a      	subs	r2, r3, #1
    26fc:	4193      	sbcs	r3, r2
    26fe:	6822      	ldr	r2, [r4, #0]
    2700:	0692      	lsls	r2, r2, #26
    2702:	d51f      	bpl.n	2744 <_printf_common+0x88>
    2704:	18e1      	adds	r1, r4, r3
    2706:	3140      	adds	r1, #64	; 0x40
    2708:	2030      	movs	r0, #48	; 0x30
    270a:	70c8      	strb	r0, [r1, #3]
    270c:	1c21      	adds	r1, r4, #0
    270e:	1c5a      	adds	r2, r3, #1
    2710:	3145      	adds	r1, #69	; 0x45
    2712:	7809      	ldrb	r1, [r1, #0]
    2714:	18a2      	adds	r2, r4, r2
    2716:	3240      	adds	r2, #64	; 0x40
    2718:	3302      	adds	r3, #2
    271a:	70d1      	strb	r1, [r2, #3]
    271c:	e012      	b.n	2744 <_printf_common+0x88>
    271e:	1c22      	adds	r2, r4, #0
    2720:	1c30      	adds	r0, r6, #0
    2722:	9901      	ldr	r1, [sp, #4]
    2724:	3219      	adds	r2, #25
    2726:	2301      	movs	r3, #1
    2728:	9f08      	ldr	r7, [sp, #32]
    272a:	47b8      	blx	r7
    272c:	3001      	adds	r0, #1
    272e:	d011      	beq.n	2754 <_printf_common+0x98>
    2730:	9f00      	ldr	r7, [sp, #0]
    2732:	3701      	adds	r7, #1
    2734:	9700      	str	r7, [sp, #0]
    2736:	68e0      	ldr	r0, [r4, #12]
    2738:	6829      	ldr	r1, [r5, #0]
    273a:	9f00      	ldr	r7, [sp, #0]
    273c:	1a43      	subs	r3, r0, r1
    273e:	429f      	cmp	r7, r3
    2740:	dbed      	blt.n	271e <_printf_common+0x62>
    2742:	e7d7      	b.n	26f4 <_printf_common+0x38>
    2744:	1c22      	adds	r2, r4, #0
    2746:	1c30      	adds	r0, r6, #0
    2748:	9901      	ldr	r1, [sp, #4]
    274a:	3243      	adds	r2, #67	; 0x43
    274c:	9f08      	ldr	r7, [sp, #32]
    274e:	47b8      	blx	r7
    2750:	3001      	adds	r0, #1
    2752:	d102      	bne.n	275a <_printf_common+0x9e>
    2754:	2001      	movs	r0, #1
    2756:	4240      	negs	r0, r0
    2758:	e023      	b.n	27a2 <_printf_common+0xe6>
    275a:	6820      	ldr	r0, [r4, #0]
    275c:	2106      	movs	r1, #6
    275e:	682b      	ldr	r3, [r5, #0]
    2760:	68e2      	ldr	r2, [r4, #12]
    2762:	4001      	ands	r1, r0
    2764:	2500      	movs	r5, #0
    2766:	2904      	cmp	r1, #4
    2768:	d103      	bne.n	2772 <_printf_common+0xb6>
    276a:	1ad5      	subs	r5, r2, r3
    276c:	43eb      	mvns	r3, r5
    276e:	17db      	asrs	r3, r3, #31
    2770:	401d      	ands	r5, r3
    2772:	68a2      	ldr	r2, [r4, #8]
    2774:	6923      	ldr	r3, [r4, #16]
    2776:	429a      	cmp	r2, r3
    2778:	dd01      	ble.n	277e <_printf_common+0xc2>
    277a:	1ad3      	subs	r3, r2, r3
    277c:	18ed      	adds	r5, r5, r3
    277e:	2700      	movs	r7, #0
    2780:	9700      	str	r7, [sp, #0]
    2782:	9f00      	ldr	r7, [sp, #0]
    2784:	42af      	cmp	r7, r5
    2786:	da0b      	bge.n	27a0 <_printf_common+0xe4>
    2788:	1c22      	adds	r2, r4, #0
    278a:	1c30      	adds	r0, r6, #0
    278c:	9901      	ldr	r1, [sp, #4]
    278e:	321a      	adds	r2, #26
    2790:	2301      	movs	r3, #1
    2792:	9f08      	ldr	r7, [sp, #32]
    2794:	47b8      	blx	r7
    2796:	3001      	adds	r0, #1
    2798:	d0dc      	beq.n	2754 <_printf_common+0x98>
    279a:	9f00      	ldr	r7, [sp, #0]
    279c:	3701      	adds	r7, #1
    279e:	e7ef      	b.n	2780 <_printf_common+0xc4>
    27a0:	2000      	movs	r0, #0
    27a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000027a4 <_printf_i>:
    27a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a6:	1c0d      	adds	r5, r1, #0
    27a8:	b08b      	sub	sp, #44	; 0x2c
    27aa:	3543      	adds	r5, #67	; 0x43
    27ac:	9206      	str	r2, [sp, #24]
    27ae:	9005      	str	r0, [sp, #20]
    27b0:	9307      	str	r3, [sp, #28]
    27b2:	9504      	str	r5, [sp, #16]
    27b4:	7e0b      	ldrb	r3, [r1, #24]
    27b6:	1c0c      	adds	r4, r1, #0
    27b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    27ba:	2b6e      	cmp	r3, #110	; 0x6e
    27bc:	d100      	bne.n	27c0 <_printf_i+0x1c>
    27be:	e0a7      	b.n	2910 <_printf_i+0x16c>
    27c0:	d811      	bhi.n	27e6 <_printf_i+0x42>
    27c2:	2b63      	cmp	r3, #99	; 0x63
    27c4:	d022      	beq.n	280c <_printf_i+0x68>
    27c6:	d809      	bhi.n	27dc <_printf_i+0x38>
    27c8:	2b00      	cmp	r3, #0
    27ca:	d100      	bne.n	27ce <_printf_i+0x2a>
    27cc:	e0b0      	b.n	2930 <_printf_i+0x18c>
    27ce:	2b58      	cmp	r3, #88	; 0x58
    27d0:	d000      	beq.n	27d4 <_printf_i+0x30>
    27d2:	e0c0      	b.n	2956 <_printf_i+0x1b2>
    27d4:	3145      	adds	r1, #69	; 0x45
    27d6:	700b      	strb	r3, [r1, #0]
    27d8:	4d7b      	ldr	r5, [pc, #492]	; (29c8 <_printf_i+0x224>)
    27da:	e04e      	b.n	287a <_printf_i+0xd6>
    27dc:	2b64      	cmp	r3, #100	; 0x64
    27de:	d01c      	beq.n	281a <_printf_i+0x76>
    27e0:	2b69      	cmp	r3, #105	; 0x69
    27e2:	d01a      	beq.n	281a <_printf_i+0x76>
    27e4:	e0b7      	b.n	2956 <_printf_i+0x1b2>
    27e6:	2b73      	cmp	r3, #115	; 0x73
    27e8:	d100      	bne.n	27ec <_printf_i+0x48>
    27ea:	e0a5      	b.n	2938 <_printf_i+0x194>
    27ec:	d809      	bhi.n	2802 <_printf_i+0x5e>
    27ee:	2b6f      	cmp	r3, #111	; 0x6f
    27f0:	d029      	beq.n	2846 <_printf_i+0xa2>
    27f2:	2b70      	cmp	r3, #112	; 0x70
    27f4:	d000      	beq.n	27f8 <_printf_i+0x54>
    27f6:	e0ae      	b.n	2956 <_printf_i+0x1b2>
    27f8:	680e      	ldr	r6, [r1, #0]
    27fa:	2320      	movs	r3, #32
    27fc:	4333      	orrs	r3, r6
    27fe:	600b      	str	r3, [r1, #0]
    2800:	e036      	b.n	2870 <_printf_i+0xcc>
    2802:	2b75      	cmp	r3, #117	; 0x75
    2804:	d01f      	beq.n	2846 <_printf_i+0xa2>
    2806:	2b78      	cmp	r3, #120	; 0x78
    2808:	d032      	beq.n	2870 <_printf_i+0xcc>
    280a:	e0a4      	b.n	2956 <_printf_i+0x1b2>
    280c:	6813      	ldr	r3, [r2, #0]
    280e:	1c0d      	adds	r5, r1, #0
    2810:	1d19      	adds	r1, r3, #4
    2812:	3542      	adds	r5, #66	; 0x42
    2814:	6011      	str	r1, [r2, #0]
    2816:	681b      	ldr	r3, [r3, #0]
    2818:	e09f      	b.n	295a <_printf_i+0x1b6>
    281a:	6821      	ldr	r1, [r4, #0]
    281c:	6813      	ldr	r3, [r2, #0]
    281e:	060e      	lsls	r6, r1, #24
    2820:	d503      	bpl.n	282a <_printf_i+0x86>
    2822:	1d19      	adds	r1, r3, #4
    2824:	6011      	str	r1, [r2, #0]
    2826:	681e      	ldr	r6, [r3, #0]
    2828:	e005      	b.n	2836 <_printf_i+0x92>
    282a:	0648      	lsls	r0, r1, #25
    282c:	d5f9      	bpl.n	2822 <_printf_i+0x7e>
    282e:	1d19      	adds	r1, r3, #4
    2830:	6011      	str	r1, [r2, #0]
    2832:	2100      	movs	r1, #0
    2834:	5e5e      	ldrsh	r6, [r3, r1]
    2836:	4b64      	ldr	r3, [pc, #400]	; (29c8 <_printf_i+0x224>)
    2838:	2e00      	cmp	r6, #0
    283a:	da3b      	bge.n	28b4 <_printf_i+0x110>
    283c:	9d04      	ldr	r5, [sp, #16]
    283e:	222d      	movs	r2, #45	; 0x2d
    2840:	4276      	negs	r6, r6
    2842:	702a      	strb	r2, [r5, #0]
    2844:	e036      	b.n	28b4 <_printf_i+0x110>
    2846:	6821      	ldr	r1, [r4, #0]
    2848:	6813      	ldr	r3, [r2, #0]
    284a:	060e      	lsls	r6, r1, #24
    284c:	d503      	bpl.n	2856 <_printf_i+0xb2>
    284e:	1d19      	adds	r1, r3, #4
    2850:	6011      	str	r1, [r2, #0]
    2852:	681e      	ldr	r6, [r3, #0]
    2854:	e004      	b.n	2860 <_printf_i+0xbc>
    2856:	0648      	lsls	r0, r1, #25
    2858:	d5f9      	bpl.n	284e <_printf_i+0xaa>
    285a:	1d19      	adds	r1, r3, #4
    285c:	881e      	ldrh	r6, [r3, #0]
    285e:	6011      	str	r1, [r2, #0]
    2860:	4b59      	ldr	r3, [pc, #356]	; (29c8 <_printf_i+0x224>)
    2862:	7e22      	ldrb	r2, [r4, #24]
    2864:	9303      	str	r3, [sp, #12]
    2866:	2708      	movs	r7, #8
    2868:	2a6f      	cmp	r2, #111	; 0x6f
    286a:	d01e      	beq.n	28aa <_printf_i+0x106>
    286c:	270a      	movs	r7, #10
    286e:	e01c      	b.n	28aa <_printf_i+0x106>
    2870:	1c23      	adds	r3, r4, #0
    2872:	2178      	movs	r1, #120	; 0x78
    2874:	3345      	adds	r3, #69	; 0x45
    2876:	4d55      	ldr	r5, [pc, #340]	; (29cc <_printf_i+0x228>)
    2878:	7019      	strb	r1, [r3, #0]
    287a:	6811      	ldr	r1, [r2, #0]
    287c:	6823      	ldr	r3, [r4, #0]
    287e:	1d08      	adds	r0, r1, #4
    2880:	9503      	str	r5, [sp, #12]
    2882:	6010      	str	r0, [r2, #0]
    2884:	061e      	lsls	r6, r3, #24
    2886:	d501      	bpl.n	288c <_printf_i+0xe8>
    2888:	680e      	ldr	r6, [r1, #0]
    288a:	e002      	b.n	2892 <_printf_i+0xee>
    288c:	0658      	lsls	r0, r3, #25
    288e:	d5fb      	bpl.n	2888 <_printf_i+0xe4>
    2890:	880e      	ldrh	r6, [r1, #0]
    2892:	07d9      	lsls	r1, r3, #31
    2894:	d502      	bpl.n	289c <_printf_i+0xf8>
    2896:	2220      	movs	r2, #32
    2898:	4313      	orrs	r3, r2
    289a:	6023      	str	r3, [r4, #0]
    289c:	2710      	movs	r7, #16
    289e:	2e00      	cmp	r6, #0
    28a0:	d103      	bne.n	28aa <_printf_i+0x106>
    28a2:	6822      	ldr	r2, [r4, #0]
    28a4:	2320      	movs	r3, #32
    28a6:	439a      	bics	r2, r3
    28a8:	6022      	str	r2, [r4, #0]
    28aa:	1c23      	adds	r3, r4, #0
    28ac:	2200      	movs	r2, #0
    28ae:	3343      	adds	r3, #67	; 0x43
    28b0:	701a      	strb	r2, [r3, #0]
    28b2:	e001      	b.n	28b8 <_printf_i+0x114>
    28b4:	9303      	str	r3, [sp, #12]
    28b6:	270a      	movs	r7, #10
    28b8:	6863      	ldr	r3, [r4, #4]
    28ba:	60a3      	str	r3, [r4, #8]
    28bc:	2b00      	cmp	r3, #0
    28be:	db03      	blt.n	28c8 <_printf_i+0x124>
    28c0:	6825      	ldr	r5, [r4, #0]
    28c2:	2204      	movs	r2, #4
    28c4:	4395      	bics	r5, r2
    28c6:	6025      	str	r5, [r4, #0]
    28c8:	2e00      	cmp	r6, #0
    28ca:	d102      	bne.n	28d2 <_printf_i+0x12e>
    28cc:	9d04      	ldr	r5, [sp, #16]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d00e      	beq.n	28f0 <_printf_i+0x14c>
    28d2:	9d04      	ldr	r5, [sp, #16]
    28d4:	1c30      	adds	r0, r6, #0
    28d6:	1c39      	adds	r1, r7, #0
    28d8:	f7ff fd62 	bl	23a0 <__aeabi_uidivmod>
    28dc:	9803      	ldr	r0, [sp, #12]
    28de:	3d01      	subs	r5, #1
    28e0:	5c43      	ldrb	r3, [r0, r1]
    28e2:	1c30      	adds	r0, r6, #0
    28e4:	702b      	strb	r3, [r5, #0]
    28e6:	1c39      	adds	r1, r7, #0
    28e8:	f7ff fd16 	bl	2318 <__aeabi_uidiv>
    28ec:	1e06      	subs	r6, r0, #0
    28ee:	d1f1      	bne.n	28d4 <_printf_i+0x130>
    28f0:	2f08      	cmp	r7, #8
    28f2:	d109      	bne.n	2908 <_printf_i+0x164>
    28f4:	6821      	ldr	r1, [r4, #0]
    28f6:	07c9      	lsls	r1, r1, #31
    28f8:	d506      	bpl.n	2908 <_printf_i+0x164>
    28fa:	6862      	ldr	r2, [r4, #4]
    28fc:	6923      	ldr	r3, [r4, #16]
    28fe:	429a      	cmp	r2, r3
    2900:	dc02      	bgt.n	2908 <_printf_i+0x164>
    2902:	3d01      	subs	r5, #1
    2904:	2330      	movs	r3, #48	; 0x30
    2906:	702b      	strb	r3, [r5, #0]
    2908:	9e04      	ldr	r6, [sp, #16]
    290a:	1b73      	subs	r3, r6, r5
    290c:	6123      	str	r3, [r4, #16]
    290e:	e02a      	b.n	2966 <_printf_i+0x1c2>
    2910:	6808      	ldr	r0, [r1, #0]
    2912:	6813      	ldr	r3, [r2, #0]
    2914:	6949      	ldr	r1, [r1, #20]
    2916:	0605      	lsls	r5, r0, #24
    2918:	d504      	bpl.n	2924 <_printf_i+0x180>
    291a:	1d18      	adds	r0, r3, #4
    291c:	6010      	str	r0, [r2, #0]
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	6019      	str	r1, [r3, #0]
    2922:	e005      	b.n	2930 <_printf_i+0x18c>
    2924:	0646      	lsls	r6, r0, #25
    2926:	d5f8      	bpl.n	291a <_printf_i+0x176>
    2928:	1d18      	adds	r0, r3, #4
    292a:	6010      	str	r0, [r2, #0]
    292c:	681b      	ldr	r3, [r3, #0]
    292e:	8019      	strh	r1, [r3, #0]
    2930:	2300      	movs	r3, #0
    2932:	6123      	str	r3, [r4, #16]
    2934:	9d04      	ldr	r5, [sp, #16]
    2936:	e016      	b.n	2966 <_printf_i+0x1c2>
    2938:	6813      	ldr	r3, [r2, #0]
    293a:	1d19      	adds	r1, r3, #4
    293c:	6011      	str	r1, [r2, #0]
    293e:	681d      	ldr	r5, [r3, #0]
    2940:	1c28      	adds	r0, r5, #0
    2942:	f000 fbdf 	bl	3104 <strlen>
    2946:	6863      	ldr	r3, [r4, #4]
    2948:	6120      	str	r0, [r4, #16]
    294a:	4298      	cmp	r0, r3
    294c:	d900      	bls.n	2950 <_printf_i+0x1ac>
    294e:	6123      	str	r3, [r4, #16]
    2950:	6920      	ldr	r0, [r4, #16]
    2952:	6060      	str	r0, [r4, #4]
    2954:	e004      	b.n	2960 <_printf_i+0x1bc>
    2956:	1c25      	adds	r5, r4, #0
    2958:	3542      	adds	r5, #66	; 0x42
    295a:	702b      	strb	r3, [r5, #0]
    295c:	2301      	movs	r3, #1
    295e:	6123      	str	r3, [r4, #16]
    2960:	9e04      	ldr	r6, [sp, #16]
    2962:	2300      	movs	r3, #0
    2964:	7033      	strb	r3, [r6, #0]
    2966:	9e07      	ldr	r6, [sp, #28]
    2968:	9805      	ldr	r0, [sp, #20]
    296a:	9600      	str	r6, [sp, #0]
    296c:	1c21      	adds	r1, r4, #0
    296e:	aa09      	add	r2, sp, #36	; 0x24
    2970:	9b06      	ldr	r3, [sp, #24]
    2972:	f7ff fea3 	bl	26bc <_printf_common>
    2976:	3001      	adds	r0, #1
    2978:	d102      	bne.n	2980 <_printf_i+0x1dc>
    297a:	2001      	movs	r0, #1
    297c:	4240      	negs	r0, r0
    297e:	e021      	b.n	29c4 <_printf_i+0x220>
    2980:	1c2a      	adds	r2, r5, #0
    2982:	9805      	ldr	r0, [sp, #20]
    2984:	9906      	ldr	r1, [sp, #24]
    2986:	6923      	ldr	r3, [r4, #16]
    2988:	9d07      	ldr	r5, [sp, #28]
    298a:	47a8      	blx	r5
    298c:	3001      	adds	r0, #1
    298e:	d0f4      	beq.n	297a <_printf_i+0x1d6>
    2990:	6826      	ldr	r6, [r4, #0]
    2992:	07b6      	lsls	r6, r6, #30
    2994:	d405      	bmi.n	29a2 <_printf_i+0x1fe>
    2996:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2998:	68e0      	ldr	r0, [r4, #12]
    299a:	4298      	cmp	r0, r3
    299c:	da12      	bge.n	29c4 <_printf_i+0x220>
    299e:	1c18      	adds	r0, r3, #0
    29a0:	e010      	b.n	29c4 <_printf_i+0x220>
    29a2:	2500      	movs	r5, #0
    29a4:	68e0      	ldr	r0, [r4, #12]
    29a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    29a8:	1a43      	subs	r3, r0, r1
    29aa:	429d      	cmp	r5, r3
    29ac:	daf3      	bge.n	2996 <_printf_i+0x1f2>
    29ae:	1c22      	adds	r2, r4, #0
    29b0:	9805      	ldr	r0, [sp, #20]
    29b2:	9906      	ldr	r1, [sp, #24]
    29b4:	3219      	adds	r2, #25
    29b6:	2301      	movs	r3, #1
    29b8:	9e07      	ldr	r6, [sp, #28]
    29ba:	47b0      	blx	r6
    29bc:	3001      	adds	r0, #1
    29be:	d0dc      	beq.n	297a <_printf_i+0x1d6>
    29c0:	3501      	adds	r5, #1
    29c2:	e7ef      	b.n	29a4 <_printf_i+0x200>
    29c4:	b00b      	add	sp, #44	; 0x2c
    29c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29c8:	000032e5 	.word	0x000032e5
    29cc:	000032f6 	.word	0x000032f6

000029d0 <__swbuf_r>:
    29d0:	b570      	push	{r4, r5, r6, lr}
    29d2:	1c05      	adds	r5, r0, #0
    29d4:	1c0e      	adds	r6, r1, #0
    29d6:	1c14      	adds	r4, r2, #0
    29d8:	2800      	cmp	r0, #0
    29da:	d004      	beq.n	29e6 <__swbuf_r+0x16>
    29dc:	6982      	ldr	r2, [r0, #24]
    29de:	2a00      	cmp	r2, #0
    29e0:	d101      	bne.n	29e6 <__swbuf_r+0x16>
    29e2:	f000 f9c9 	bl	2d78 <__sinit>
    29e6:	4b23      	ldr	r3, [pc, #140]	; (2a74 <__swbuf_r+0xa4>)
    29e8:	429c      	cmp	r4, r3
    29ea:	d101      	bne.n	29f0 <__swbuf_r+0x20>
    29ec:	686c      	ldr	r4, [r5, #4]
    29ee:	e008      	b.n	2a02 <__swbuf_r+0x32>
    29f0:	4b21      	ldr	r3, [pc, #132]	; (2a78 <__swbuf_r+0xa8>)
    29f2:	429c      	cmp	r4, r3
    29f4:	d101      	bne.n	29fa <__swbuf_r+0x2a>
    29f6:	68ac      	ldr	r4, [r5, #8]
    29f8:	e003      	b.n	2a02 <__swbuf_r+0x32>
    29fa:	4b20      	ldr	r3, [pc, #128]	; (2a7c <__swbuf_r+0xac>)
    29fc:	429c      	cmp	r4, r3
    29fe:	d100      	bne.n	2a02 <__swbuf_r+0x32>
    2a00:	68ec      	ldr	r4, [r5, #12]
    2a02:	69a3      	ldr	r3, [r4, #24]
    2a04:	60a3      	str	r3, [r4, #8]
    2a06:	89a3      	ldrh	r3, [r4, #12]
    2a08:	071a      	lsls	r2, r3, #28
    2a0a:	d50a      	bpl.n	2a22 <__swbuf_r+0x52>
    2a0c:	6923      	ldr	r3, [r4, #16]
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d007      	beq.n	2a22 <__swbuf_r+0x52>
    2a12:	6822      	ldr	r2, [r4, #0]
    2a14:	6923      	ldr	r3, [r4, #16]
    2a16:	b2f6      	uxtb	r6, r6
    2a18:	1ad0      	subs	r0, r2, r3
    2a1a:	6962      	ldr	r2, [r4, #20]
    2a1c:	4290      	cmp	r0, r2
    2a1e:	db0f      	blt.n	2a40 <__swbuf_r+0x70>
    2a20:	e008      	b.n	2a34 <__swbuf_r+0x64>
    2a22:	1c28      	adds	r0, r5, #0
    2a24:	1c21      	adds	r1, r4, #0
    2a26:	f000 f82b 	bl	2a80 <__swsetup_r>
    2a2a:	2800      	cmp	r0, #0
    2a2c:	d0f1      	beq.n	2a12 <__swbuf_r+0x42>
    2a2e:	2001      	movs	r0, #1
    2a30:	4240      	negs	r0, r0
    2a32:	e01d      	b.n	2a70 <__swbuf_r+0xa0>
    2a34:	1c28      	adds	r0, r5, #0
    2a36:	1c21      	adds	r1, r4, #0
    2a38:	f000 f91e 	bl	2c78 <_fflush_r>
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d1f6      	bne.n	2a2e <__swbuf_r+0x5e>
    2a40:	68a3      	ldr	r3, [r4, #8]
    2a42:	3001      	adds	r0, #1
    2a44:	3b01      	subs	r3, #1
    2a46:	60a3      	str	r3, [r4, #8]
    2a48:	6823      	ldr	r3, [r4, #0]
    2a4a:	1c5a      	adds	r2, r3, #1
    2a4c:	6022      	str	r2, [r4, #0]
    2a4e:	701e      	strb	r6, [r3, #0]
    2a50:	6963      	ldr	r3, [r4, #20]
    2a52:	4298      	cmp	r0, r3
    2a54:	d005      	beq.n	2a62 <__swbuf_r+0x92>
    2a56:	89a3      	ldrh	r3, [r4, #12]
    2a58:	1c30      	adds	r0, r6, #0
    2a5a:	07da      	lsls	r2, r3, #31
    2a5c:	d508      	bpl.n	2a70 <__swbuf_r+0xa0>
    2a5e:	2e0a      	cmp	r6, #10
    2a60:	d106      	bne.n	2a70 <__swbuf_r+0xa0>
    2a62:	1c28      	adds	r0, r5, #0
    2a64:	1c21      	adds	r1, r4, #0
    2a66:	f000 f907 	bl	2c78 <_fflush_r>
    2a6a:	2800      	cmp	r0, #0
    2a6c:	d1df      	bne.n	2a2e <__swbuf_r+0x5e>
    2a6e:	1c30      	adds	r0, r6, #0
    2a70:	bd70      	pop	{r4, r5, r6, pc}
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	00003308 	.word	0x00003308
    2a78:	00003328 	.word	0x00003328
    2a7c:	00003348 	.word	0x00003348

00002a80 <__swsetup_r>:
    2a80:	4b34      	ldr	r3, [pc, #208]	; (2b54 <__swsetup_r+0xd4>)
    2a82:	b570      	push	{r4, r5, r6, lr}
    2a84:	681d      	ldr	r5, [r3, #0]
    2a86:	1c06      	adds	r6, r0, #0
    2a88:	1c0c      	adds	r4, r1, #0
    2a8a:	2d00      	cmp	r5, #0
    2a8c:	d005      	beq.n	2a9a <__swsetup_r+0x1a>
    2a8e:	69a9      	ldr	r1, [r5, #24]
    2a90:	2900      	cmp	r1, #0
    2a92:	d102      	bne.n	2a9a <__swsetup_r+0x1a>
    2a94:	1c28      	adds	r0, r5, #0
    2a96:	f000 f96f 	bl	2d78 <__sinit>
    2a9a:	4b2f      	ldr	r3, [pc, #188]	; (2b58 <__swsetup_r+0xd8>)
    2a9c:	429c      	cmp	r4, r3
    2a9e:	d101      	bne.n	2aa4 <__swsetup_r+0x24>
    2aa0:	686c      	ldr	r4, [r5, #4]
    2aa2:	e008      	b.n	2ab6 <__swsetup_r+0x36>
    2aa4:	4b2d      	ldr	r3, [pc, #180]	; (2b5c <__swsetup_r+0xdc>)
    2aa6:	429c      	cmp	r4, r3
    2aa8:	d101      	bne.n	2aae <__swsetup_r+0x2e>
    2aaa:	68ac      	ldr	r4, [r5, #8]
    2aac:	e003      	b.n	2ab6 <__swsetup_r+0x36>
    2aae:	4b2c      	ldr	r3, [pc, #176]	; (2b60 <__swsetup_r+0xe0>)
    2ab0:	429c      	cmp	r4, r3
    2ab2:	d100      	bne.n	2ab6 <__swsetup_r+0x36>
    2ab4:	68ec      	ldr	r4, [r5, #12]
    2ab6:	89a2      	ldrh	r2, [r4, #12]
    2ab8:	b293      	uxth	r3, r2
    2aba:	0719      	lsls	r1, r3, #28
    2abc:	d421      	bmi.n	2b02 <__swsetup_r+0x82>
    2abe:	06d9      	lsls	r1, r3, #27
    2ac0:	d405      	bmi.n	2ace <__swsetup_r+0x4e>
    2ac2:	2309      	movs	r3, #9
    2ac4:	6033      	str	r3, [r6, #0]
    2ac6:	2340      	movs	r3, #64	; 0x40
    2ac8:	431a      	orrs	r2, r3
    2aca:	81a2      	strh	r2, [r4, #12]
    2acc:	e03f      	b.n	2b4e <__swsetup_r+0xce>
    2ace:	075a      	lsls	r2, r3, #29
    2ad0:	d513      	bpl.n	2afa <__swsetup_r+0x7a>
    2ad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2ad4:	2900      	cmp	r1, #0
    2ad6:	d008      	beq.n	2aea <__swsetup_r+0x6a>
    2ad8:	1c23      	adds	r3, r4, #0
    2ada:	3344      	adds	r3, #68	; 0x44
    2adc:	4299      	cmp	r1, r3
    2ade:	d002      	beq.n	2ae6 <__swsetup_r+0x66>
    2ae0:	1c30      	adds	r0, r6, #0
    2ae2:	f000 fa15 	bl	2f10 <_free_r>
    2ae6:	2300      	movs	r3, #0
    2ae8:	6363      	str	r3, [r4, #52]	; 0x34
    2aea:	89a3      	ldrh	r3, [r4, #12]
    2aec:	2224      	movs	r2, #36	; 0x24
    2aee:	4393      	bics	r3, r2
    2af0:	81a3      	strh	r3, [r4, #12]
    2af2:	2300      	movs	r3, #0
    2af4:	6063      	str	r3, [r4, #4]
    2af6:	6923      	ldr	r3, [r4, #16]
    2af8:	6023      	str	r3, [r4, #0]
    2afa:	89a3      	ldrh	r3, [r4, #12]
    2afc:	2208      	movs	r2, #8
    2afe:	4313      	orrs	r3, r2
    2b00:	81a3      	strh	r3, [r4, #12]
    2b02:	6921      	ldr	r1, [r4, #16]
    2b04:	2900      	cmp	r1, #0
    2b06:	d10b      	bne.n	2b20 <__swsetup_r+0xa0>
    2b08:	89a3      	ldrh	r3, [r4, #12]
    2b0a:	22a0      	movs	r2, #160	; 0xa0
    2b0c:	0092      	lsls	r2, r2, #2
    2b0e:	401a      	ands	r2, r3
    2b10:	2380      	movs	r3, #128	; 0x80
    2b12:	009b      	lsls	r3, r3, #2
    2b14:	429a      	cmp	r2, r3
    2b16:	d003      	beq.n	2b20 <__swsetup_r+0xa0>
    2b18:	1c30      	adds	r0, r6, #0
    2b1a:	1c21      	adds	r1, r4, #0
    2b1c:	f000 f99c 	bl	2e58 <__smakebuf_r>
    2b20:	89a3      	ldrh	r3, [r4, #12]
    2b22:	2201      	movs	r2, #1
    2b24:	401a      	ands	r2, r3
    2b26:	d005      	beq.n	2b34 <__swsetup_r+0xb4>
    2b28:	6961      	ldr	r1, [r4, #20]
    2b2a:	2200      	movs	r2, #0
    2b2c:	60a2      	str	r2, [r4, #8]
    2b2e:	424a      	negs	r2, r1
    2b30:	61a2      	str	r2, [r4, #24]
    2b32:	e003      	b.n	2b3c <__swsetup_r+0xbc>
    2b34:	0799      	lsls	r1, r3, #30
    2b36:	d400      	bmi.n	2b3a <__swsetup_r+0xba>
    2b38:	6962      	ldr	r2, [r4, #20]
    2b3a:	60a2      	str	r2, [r4, #8]
    2b3c:	6922      	ldr	r2, [r4, #16]
    2b3e:	2000      	movs	r0, #0
    2b40:	4282      	cmp	r2, r0
    2b42:	d106      	bne.n	2b52 <__swsetup_r+0xd2>
    2b44:	0619      	lsls	r1, r3, #24
    2b46:	d504      	bpl.n	2b52 <__swsetup_r+0xd2>
    2b48:	2240      	movs	r2, #64	; 0x40
    2b4a:	4313      	orrs	r3, r2
    2b4c:	81a3      	strh	r3, [r4, #12]
    2b4e:	2001      	movs	r0, #1
    2b50:	4240      	negs	r0, r0
    2b52:	bd70      	pop	{r4, r5, r6, pc}
    2b54:	2000006c 	.word	0x2000006c
    2b58:	00003308 	.word	0x00003308
    2b5c:	00003328 	.word	0x00003328
    2b60:	00003348 	.word	0x00003348

00002b64 <__sflush_r>:
    2b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2b66:	898b      	ldrh	r3, [r1, #12]
    2b68:	1c05      	adds	r5, r0, #0
    2b6a:	1c0c      	adds	r4, r1, #0
    2b6c:	0719      	lsls	r1, r3, #28
    2b6e:	d45e      	bmi.n	2c2e <__sflush_r+0xca>
    2b70:	6862      	ldr	r2, [r4, #4]
    2b72:	2a00      	cmp	r2, #0
    2b74:	dc02      	bgt.n	2b7c <__sflush_r+0x18>
    2b76:	6c27      	ldr	r7, [r4, #64]	; 0x40
    2b78:	2f00      	cmp	r7, #0
    2b7a:	dd1a      	ble.n	2bb2 <__sflush_r+0x4e>
    2b7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2b7e:	2f00      	cmp	r7, #0
    2b80:	d017      	beq.n	2bb2 <__sflush_r+0x4e>
    2b82:	2200      	movs	r2, #0
    2b84:	682e      	ldr	r6, [r5, #0]
    2b86:	602a      	str	r2, [r5, #0]
    2b88:	2280      	movs	r2, #128	; 0x80
    2b8a:	0152      	lsls	r2, r2, #5
    2b8c:	401a      	ands	r2, r3
    2b8e:	d001      	beq.n	2b94 <__sflush_r+0x30>
    2b90:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2b92:	e015      	b.n	2bc0 <__sflush_r+0x5c>
    2b94:	1c28      	adds	r0, r5, #0
    2b96:	6a21      	ldr	r1, [r4, #32]
    2b98:	2301      	movs	r3, #1
    2b9a:	47b8      	blx	r7
    2b9c:	1c02      	adds	r2, r0, #0
    2b9e:	1c41      	adds	r1, r0, #1
    2ba0:	d10e      	bne.n	2bc0 <__sflush_r+0x5c>
    2ba2:	682b      	ldr	r3, [r5, #0]
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d00b      	beq.n	2bc0 <__sflush_r+0x5c>
    2ba8:	2b1d      	cmp	r3, #29
    2baa:	d001      	beq.n	2bb0 <__sflush_r+0x4c>
    2bac:	2b16      	cmp	r3, #22
    2bae:	d102      	bne.n	2bb6 <__sflush_r+0x52>
    2bb0:	602e      	str	r6, [r5, #0]
    2bb2:	2000      	movs	r0, #0
    2bb4:	e05e      	b.n	2c74 <__sflush_r+0x110>
    2bb6:	89a3      	ldrh	r3, [r4, #12]
    2bb8:	2140      	movs	r1, #64	; 0x40
    2bba:	430b      	orrs	r3, r1
    2bbc:	81a3      	strh	r3, [r4, #12]
    2bbe:	e059      	b.n	2c74 <__sflush_r+0x110>
    2bc0:	89a3      	ldrh	r3, [r4, #12]
    2bc2:	075f      	lsls	r7, r3, #29
    2bc4:	d506      	bpl.n	2bd4 <__sflush_r+0x70>
    2bc6:	6861      	ldr	r1, [r4, #4]
    2bc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2bca:	1a52      	subs	r2, r2, r1
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d001      	beq.n	2bd4 <__sflush_r+0x70>
    2bd0:	6c27      	ldr	r7, [r4, #64]	; 0x40
    2bd2:	1bd2      	subs	r2, r2, r7
    2bd4:	1c28      	adds	r0, r5, #0
    2bd6:	6a21      	ldr	r1, [r4, #32]
    2bd8:	2300      	movs	r3, #0
    2bda:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2bdc:	47b8      	blx	r7
    2bde:	89a2      	ldrh	r2, [r4, #12]
    2be0:	1c41      	adds	r1, r0, #1
    2be2:	d106      	bne.n	2bf2 <__sflush_r+0x8e>
    2be4:	682b      	ldr	r3, [r5, #0]
    2be6:	2b00      	cmp	r3, #0
    2be8:	d003      	beq.n	2bf2 <__sflush_r+0x8e>
    2bea:	2b1d      	cmp	r3, #29
    2bec:	d001      	beq.n	2bf2 <__sflush_r+0x8e>
    2bee:	2b16      	cmp	r3, #22
    2bf0:	d119      	bne.n	2c26 <__sflush_r+0xc2>
    2bf2:	2300      	movs	r3, #0
    2bf4:	6063      	str	r3, [r4, #4]
    2bf6:	6923      	ldr	r3, [r4, #16]
    2bf8:	6023      	str	r3, [r4, #0]
    2bfa:	04d7      	lsls	r7, r2, #19
    2bfc:	d505      	bpl.n	2c0a <__sflush_r+0xa6>
    2bfe:	1c41      	adds	r1, r0, #1
    2c00:	d102      	bne.n	2c08 <__sflush_r+0xa4>
    2c02:	682a      	ldr	r2, [r5, #0]
    2c04:	2a00      	cmp	r2, #0
    2c06:	d100      	bne.n	2c0a <__sflush_r+0xa6>
    2c08:	6560      	str	r0, [r4, #84]	; 0x54
    2c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2c0c:	602e      	str	r6, [r5, #0]
    2c0e:	2900      	cmp	r1, #0
    2c10:	d0cf      	beq.n	2bb2 <__sflush_r+0x4e>
    2c12:	1c23      	adds	r3, r4, #0
    2c14:	3344      	adds	r3, #68	; 0x44
    2c16:	4299      	cmp	r1, r3
    2c18:	d002      	beq.n	2c20 <__sflush_r+0xbc>
    2c1a:	1c28      	adds	r0, r5, #0
    2c1c:	f000 f978 	bl	2f10 <_free_r>
    2c20:	2000      	movs	r0, #0
    2c22:	6360      	str	r0, [r4, #52]	; 0x34
    2c24:	e026      	b.n	2c74 <__sflush_r+0x110>
    2c26:	2340      	movs	r3, #64	; 0x40
    2c28:	431a      	orrs	r2, r3
    2c2a:	81a2      	strh	r2, [r4, #12]
    2c2c:	e022      	b.n	2c74 <__sflush_r+0x110>
    2c2e:	6926      	ldr	r6, [r4, #16]
    2c30:	2e00      	cmp	r6, #0
    2c32:	d0be      	beq.n	2bb2 <__sflush_r+0x4e>
    2c34:	6827      	ldr	r7, [r4, #0]
    2c36:	2200      	movs	r2, #0
    2c38:	1bbf      	subs	r7, r7, r6
    2c3a:	9701      	str	r7, [sp, #4]
    2c3c:	6026      	str	r6, [r4, #0]
    2c3e:	0799      	lsls	r1, r3, #30
    2c40:	d100      	bne.n	2c44 <__sflush_r+0xe0>
    2c42:	6962      	ldr	r2, [r4, #20]
    2c44:	60a2      	str	r2, [r4, #8]
    2c46:	9f01      	ldr	r7, [sp, #4]
    2c48:	2f00      	cmp	r7, #0
    2c4a:	ddb2      	ble.n	2bb2 <__sflush_r+0x4e>
    2c4c:	1c28      	adds	r0, r5, #0
    2c4e:	6a21      	ldr	r1, [r4, #32]
    2c50:	1c32      	adds	r2, r6, #0
    2c52:	9b01      	ldr	r3, [sp, #4]
    2c54:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    2c56:	47b8      	blx	r7
    2c58:	2800      	cmp	r0, #0
    2c5a:	dc06      	bgt.n	2c6a <__sflush_r+0x106>
    2c5c:	89a3      	ldrh	r3, [r4, #12]
    2c5e:	2240      	movs	r2, #64	; 0x40
    2c60:	4313      	orrs	r3, r2
    2c62:	2001      	movs	r0, #1
    2c64:	81a3      	strh	r3, [r4, #12]
    2c66:	4240      	negs	r0, r0
    2c68:	e004      	b.n	2c74 <__sflush_r+0x110>
    2c6a:	9f01      	ldr	r7, [sp, #4]
    2c6c:	1836      	adds	r6, r6, r0
    2c6e:	1a3f      	subs	r7, r7, r0
    2c70:	9701      	str	r7, [sp, #4]
    2c72:	e7e8      	b.n	2c46 <__sflush_r+0xe2>
    2c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002c78 <_fflush_r>:
    2c78:	690a      	ldr	r2, [r1, #16]
    2c7a:	b538      	push	{r3, r4, r5, lr}
    2c7c:	1c05      	adds	r5, r0, #0
    2c7e:	1c0c      	adds	r4, r1, #0
    2c80:	2a00      	cmp	r2, #0
    2c82:	d101      	bne.n	2c88 <_fflush_r+0x10>
    2c84:	2000      	movs	r0, #0
    2c86:	e01c      	b.n	2cc2 <_fflush_r+0x4a>
    2c88:	2800      	cmp	r0, #0
    2c8a:	d004      	beq.n	2c96 <_fflush_r+0x1e>
    2c8c:	6983      	ldr	r3, [r0, #24]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d101      	bne.n	2c96 <_fflush_r+0x1e>
    2c92:	f000 f871 	bl	2d78 <__sinit>
    2c96:	4b0b      	ldr	r3, [pc, #44]	; (2cc4 <_fflush_r+0x4c>)
    2c98:	429c      	cmp	r4, r3
    2c9a:	d101      	bne.n	2ca0 <_fflush_r+0x28>
    2c9c:	686c      	ldr	r4, [r5, #4]
    2c9e:	e008      	b.n	2cb2 <_fflush_r+0x3a>
    2ca0:	4b09      	ldr	r3, [pc, #36]	; (2cc8 <_fflush_r+0x50>)
    2ca2:	429c      	cmp	r4, r3
    2ca4:	d101      	bne.n	2caa <_fflush_r+0x32>
    2ca6:	68ac      	ldr	r4, [r5, #8]
    2ca8:	e003      	b.n	2cb2 <_fflush_r+0x3a>
    2caa:	4b08      	ldr	r3, [pc, #32]	; (2ccc <_fflush_r+0x54>)
    2cac:	429c      	cmp	r4, r3
    2cae:	d100      	bne.n	2cb2 <_fflush_r+0x3a>
    2cb0:	68ec      	ldr	r4, [r5, #12]
    2cb2:	220c      	movs	r2, #12
    2cb4:	5ea3      	ldrsh	r3, [r4, r2]
    2cb6:	2b00      	cmp	r3, #0
    2cb8:	d0e4      	beq.n	2c84 <_fflush_r+0xc>
    2cba:	1c28      	adds	r0, r5, #0
    2cbc:	1c21      	adds	r1, r4, #0
    2cbe:	f7ff ff51 	bl	2b64 <__sflush_r>
    2cc2:	bd38      	pop	{r3, r4, r5, pc}
    2cc4:	00003308 	.word	0x00003308
    2cc8:	00003328 	.word	0x00003328
    2ccc:	00003348 	.word	0x00003348

00002cd0 <_cleanup_r>:
    2cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cd2:	1c04      	adds	r4, r0, #0
    2cd4:	1c07      	adds	r7, r0, #0
    2cd6:	3448      	adds	r4, #72	; 0x48
    2cd8:	2c00      	cmp	r4, #0
    2cda:	d012      	beq.n	2d02 <_cleanup_r+0x32>
    2cdc:	68a5      	ldr	r5, [r4, #8]
    2cde:	6866      	ldr	r6, [r4, #4]
    2ce0:	3e01      	subs	r6, #1
    2ce2:	d40c      	bmi.n	2cfe <_cleanup_r+0x2e>
    2ce4:	89ab      	ldrh	r3, [r5, #12]
    2ce6:	2b01      	cmp	r3, #1
    2ce8:	d907      	bls.n	2cfa <_cleanup_r+0x2a>
    2cea:	220e      	movs	r2, #14
    2cec:	5eab      	ldrsh	r3, [r5, r2]
    2cee:	3301      	adds	r3, #1
    2cf0:	d003      	beq.n	2cfa <_cleanup_r+0x2a>
    2cf2:	1c38      	adds	r0, r7, #0
    2cf4:	1c29      	adds	r1, r5, #0
    2cf6:	f7ff ffbf 	bl	2c78 <_fflush_r>
    2cfa:	3568      	adds	r5, #104	; 0x68
    2cfc:	e7f0      	b.n	2ce0 <_cleanup_r+0x10>
    2cfe:	6824      	ldr	r4, [r4, #0]
    2d00:	e7ea      	b.n	2cd8 <_cleanup_r+0x8>
    2d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002d04 <std.isra.0>:
    2d04:	2300      	movs	r3, #0
    2d06:	b510      	push	{r4, lr}
    2d08:	1c04      	adds	r4, r0, #0
    2d0a:	6003      	str	r3, [r0, #0]
    2d0c:	6043      	str	r3, [r0, #4]
    2d0e:	6083      	str	r3, [r0, #8]
    2d10:	8181      	strh	r1, [r0, #12]
    2d12:	6643      	str	r3, [r0, #100]	; 0x64
    2d14:	81c2      	strh	r2, [r0, #14]
    2d16:	6103      	str	r3, [r0, #16]
    2d18:	6143      	str	r3, [r0, #20]
    2d1a:	6183      	str	r3, [r0, #24]
    2d1c:	1c19      	adds	r1, r3, #0
    2d1e:	2208      	movs	r2, #8
    2d20:	305c      	adds	r0, #92	; 0x5c
    2d22:	f7ff fb78 	bl	2416 <memset>
    2d26:	4b05      	ldr	r3, [pc, #20]	; (2d3c <std.isra.0+0x38>)
    2d28:	6224      	str	r4, [r4, #32]
    2d2a:	6263      	str	r3, [r4, #36]	; 0x24
    2d2c:	4b04      	ldr	r3, [pc, #16]	; (2d40 <std.isra.0+0x3c>)
    2d2e:	62a3      	str	r3, [r4, #40]	; 0x28
    2d30:	4b04      	ldr	r3, [pc, #16]	; (2d44 <std.isra.0+0x40>)
    2d32:	62e3      	str	r3, [r4, #44]	; 0x2c
    2d34:	4b04      	ldr	r3, [pc, #16]	; (2d48 <std.isra.0+0x44>)
    2d36:	6323      	str	r3, [r4, #48]	; 0x30
    2d38:	bd10      	pop	{r4, pc}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	0000306d 	.word	0x0000306d
    2d40:	00003095 	.word	0x00003095
    2d44:	000030cd 	.word	0x000030cd
    2d48:	000030f9 	.word	0x000030f9

00002d4c <__sfmoreglue>:
    2d4c:	b570      	push	{r4, r5, r6, lr}
    2d4e:	1e4b      	subs	r3, r1, #1
    2d50:	2568      	movs	r5, #104	; 0x68
    2d52:	435d      	muls	r5, r3
    2d54:	1c0e      	adds	r6, r1, #0
    2d56:	1c29      	adds	r1, r5, #0
    2d58:	3174      	adds	r1, #116	; 0x74
    2d5a:	f000 f921 	bl	2fa0 <_malloc_r>
    2d5e:	1e04      	subs	r4, r0, #0
    2d60:	d008      	beq.n	2d74 <__sfmoreglue+0x28>
    2d62:	2100      	movs	r1, #0
    2d64:	6001      	str	r1, [r0, #0]
    2d66:	6046      	str	r6, [r0, #4]
    2d68:	1c2a      	adds	r2, r5, #0
    2d6a:	300c      	adds	r0, #12
    2d6c:	60a0      	str	r0, [r4, #8]
    2d6e:	3268      	adds	r2, #104	; 0x68
    2d70:	f7ff fb51 	bl	2416 <memset>
    2d74:	1c20      	adds	r0, r4, #0
    2d76:	bd70      	pop	{r4, r5, r6, pc}

00002d78 <__sinit>:
    2d78:	6983      	ldr	r3, [r0, #24]
    2d7a:	b513      	push	{r0, r1, r4, lr}
    2d7c:	1c04      	adds	r4, r0, #0
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d127      	bne.n	2dd2 <__sinit+0x5a>
    2d82:	6483      	str	r3, [r0, #72]	; 0x48
    2d84:	64c3      	str	r3, [r0, #76]	; 0x4c
    2d86:	6503      	str	r3, [r0, #80]	; 0x50
    2d88:	4b12      	ldr	r3, [pc, #72]	; (2dd4 <__sinit+0x5c>)
    2d8a:	4a13      	ldr	r2, [pc, #76]	; (2dd8 <__sinit+0x60>)
    2d8c:	681b      	ldr	r3, [r3, #0]
    2d8e:	6282      	str	r2, [r0, #40]	; 0x28
    2d90:	4298      	cmp	r0, r3
    2d92:	d101      	bne.n	2d98 <__sinit+0x20>
    2d94:	2301      	movs	r3, #1
    2d96:	6183      	str	r3, [r0, #24]
    2d98:	1c20      	adds	r0, r4, #0
    2d9a:	f000 f81f 	bl	2ddc <__sfp>
    2d9e:	6060      	str	r0, [r4, #4]
    2da0:	1c20      	adds	r0, r4, #0
    2da2:	f000 f81b 	bl	2ddc <__sfp>
    2da6:	60a0      	str	r0, [r4, #8]
    2da8:	1c20      	adds	r0, r4, #0
    2daa:	f000 f817 	bl	2ddc <__sfp>
    2dae:	2104      	movs	r1, #4
    2db0:	60e0      	str	r0, [r4, #12]
    2db2:	2200      	movs	r2, #0
    2db4:	6860      	ldr	r0, [r4, #4]
    2db6:	f7ff ffa5 	bl	2d04 <std.isra.0>
    2dba:	68a0      	ldr	r0, [r4, #8]
    2dbc:	2109      	movs	r1, #9
    2dbe:	2201      	movs	r2, #1
    2dc0:	f7ff ffa0 	bl	2d04 <std.isra.0>
    2dc4:	68e0      	ldr	r0, [r4, #12]
    2dc6:	2112      	movs	r1, #18
    2dc8:	2202      	movs	r2, #2
    2dca:	f7ff ff9b 	bl	2d04 <std.isra.0>
    2dce:	2301      	movs	r3, #1
    2dd0:	61a3      	str	r3, [r4, #24]
    2dd2:	bd13      	pop	{r0, r1, r4, pc}
    2dd4:	000032d0 	.word	0x000032d0
    2dd8:	00002cd1 	.word	0x00002cd1

00002ddc <__sfp>:
    2ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dde:	4b1d      	ldr	r3, [pc, #116]	; (2e54 <__sfp+0x78>)
    2de0:	1c07      	adds	r7, r0, #0
    2de2:	681e      	ldr	r6, [r3, #0]
    2de4:	69b2      	ldr	r2, [r6, #24]
    2de6:	2a00      	cmp	r2, #0
    2de8:	d102      	bne.n	2df0 <__sfp+0x14>
    2dea:	1c30      	adds	r0, r6, #0
    2dec:	f7ff ffc4 	bl	2d78 <__sinit>
    2df0:	3648      	adds	r6, #72	; 0x48
    2df2:	68b4      	ldr	r4, [r6, #8]
    2df4:	6873      	ldr	r3, [r6, #4]
    2df6:	3b01      	subs	r3, #1
    2df8:	d405      	bmi.n	2e06 <__sfp+0x2a>
    2dfa:	220c      	movs	r2, #12
    2dfc:	5ea5      	ldrsh	r5, [r4, r2]
    2dfe:	2d00      	cmp	r5, #0
    2e00:	d010      	beq.n	2e24 <__sfp+0x48>
    2e02:	3468      	adds	r4, #104	; 0x68
    2e04:	e7f7      	b.n	2df6 <__sfp+0x1a>
    2e06:	6833      	ldr	r3, [r6, #0]
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d106      	bne.n	2e1a <__sfp+0x3e>
    2e0c:	1c38      	adds	r0, r7, #0
    2e0e:	2104      	movs	r1, #4
    2e10:	f7ff ff9c 	bl	2d4c <__sfmoreglue>
    2e14:	6030      	str	r0, [r6, #0]
    2e16:	2800      	cmp	r0, #0
    2e18:	d001      	beq.n	2e1e <__sfp+0x42>
    2e1a:	6836      	ldr	r6, [r6, #0]
    2e1c:	e7e9      	b.n	2df2 <__sfp+0x16>
    2e1e:	230c      	movs	r3, #12
    2e20:	603b      	str	r3, [r7, #0]
    2e22:	e016      	b.n	2e52 <__sfp+0x76>
    2e24:	2301      	movs	r3, #1
    2e26:	425b      	negs	r3, r3
    2e28:	81e3      	strh	r3, [r4, #14]
    2e2a:	1c20      	adds	r0, r4, #0
    2e2c:	2301      	movs	r3, #1
    2e2e:	81a3      	strh	r3, [r4, #12]
    2e30:	6665      	str	r5, [r4, #100]	; 0x64
    2e32:	6025      	str	r5, [r4, #0]
    2e34:	60a5      	str	r5, [r4, #8]
    2e36:	6065      	str	r5, [r4, #4]
    2e38:	6125      	str	r5, [r4, #16]
    2e3a:	6165      	str	r5, [r4, #20]
    2e3c:	61a5      	str	r5, [r4, #24]
    2e3e:	305c      	adds	r0, #92	; 0x5c
    2e40:	1c29      	adds	r1, r5, #0
    2e42:	2208      	movs	r2, #8
    2e44:	f7ff fae7 	bl	2416 <memset>
    2e48:	6365      	str	r5, [r4, #52]	; 0x34
    2e4a:	63a5      	str	r5, [r4, #56]	; 0x38
    2e4c:	64a5      	str	r5, [r4, #72]	; 0x48
    2e4e:	64e5      	str	r5, [r4, #76]	; 0x4c
    2e50:	1c20      	adds	r0, r4, #0
    2e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e54:	000032d0 	.word	0x000032d0

00002e58 <__smakebuf_r>:
    2e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e5a:	898b      	ldrh	r3, [r1, #12]
    2e5c:	b091      	sub	sp, #68	; 0x44
    2e5e:	1c05      	adds	r5, r0, #0
    2e60:	1c0c      	adds	r4, r1, #0
    2e62:	079a      	lsls	r2, r3, #30
    2e64:	d425      	bmi.n	2eb2 <__smakebuf_r+0x5a>
    2e66:	230e      	movs	r3, #14
    2e68:	5ec9      	ldrsh	r1, [r1, r3]
    2e6a:	2900      	cmp	r1, #0
    2e6c:	da06      	bge.n	2e7c <__smakebuf_r+0x24>
    2e6e:	89a7      	ldrh	r7, [r4, #12]
    2e70:	2380      	movs	r3, #128	; 0x80
    2e72:	401f      	ands	r7, r3
    2e74:	d00f      	beq.n	2e96 <__smakebuf_r+0x3e>
    2e76:	2700      	movs	r7, #0
    2e78:	2640      	movs	r6, #64	; 0x40
    2e7a:	e00e      	b.n	2e9a <__smakebuf_r+0x42>
    2e7c:	aa01      	add	r2, sp, #4
    2e7e:	f000 f96f 	bl	3160 <_fstat_r>
    2e82:	2800      	cmp	r0, #0
    2e84:	dbf3      	blt.n	2e6e <__smakebuf_r+0x16>
    2e86:	9b02      	ldr	r3, [sp, #8]
    2e88:	27f0      	movs	r7, #240	; 0xf0
    2e8a:	023f      	lsls	r7, r7, #8
    2e8c:	4a18      	ldr	r2, [pc, #96]	; (2ef0 <__smakebuf_r+0x98>)
    2e8e:	401f      	ands	r7, r3
    2e90:	18bf      	adds	r7, r7, r2
    2e92:	427b      	negs	r3, r7
    2e94:	415f      	adcs	r7, r3
    2e96:	2680      	movs	r6, #128	; 0x80
    2e98:	00f6      	lsls	r6, r6, #3
    2e9a:	1c28      	adds	r0, r5, #0
    2e9c:	1c31      	adds	r1, r6, #0
    2e9e:	f000 f87f 	bl	2fa0 <_malloc_r>
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d10c      	bne.n	2ec0 <__smakebuf_r+0x68>
    2ea6:	89a3      	ldrh	r3, [r4, #12]
    2ea8:	059a      	lsls	r2, r3, #22
    2eaa:	d41f      	bmi.n	2eec <__smakebuf_r+0x94>
    2eac:	2202      	movs	r2, #2
    2eae:	4313      	orrs	r3, r2
    2eb0:	81a3      	strh	r3, [r4, #12]
    2eb2:	1c23      	adds	r3, r4, #0
    2eb4:	3347      	adds	r3, #71	; 0x47
    2eb6:	6023      	str	r3, [r4, #0]
    2eb8:	6123      	str	r3, [r4, #16]
    2eba:	2301      	movs	r3, #1
    2ebc:	6163      	str	r3, [r4, #20]
    2ebe:	e015      	b.n	2eec <__smakebuf_r+0x94>
    2ec0:	4b0c      	ldr	r3, [pc, #48]	; (2ef4 <__smakebuf_r+0x9c>)
    2ec2:	2280      	movs	r2, #128	; 0x80
    2ec4:	62ab      	str	r3, [r5, #40]	; 0x28
    2ec6:	89a3      	ldrh	r3, [r4, #12]
    2ec8:	6020      	str	r0, [r4, #0]
    2eca:	4313      	orrs	r3, r2
    2ecc:	81a3      	strh	r3, [r4, #12]
    2ece:	6120      	str	r0, [r4, #16]
    2ed0:	6166      	str	r6, [r4, #20]
    2ed2:	2f00      	cmp	r7, #0
    2ed4:	d00a      	beq.n	2eec <__smakebuf_r+0x94>
    2ed6:	230e      	movs	r3, #14
    2ed8:	5ee1      	ldrsh	r1, [r4, r3]
    2eda:	1c28      	adds	r0, r5, #0
    2edc:	f000 f952 	bl	3184 <_isatty_r>
    2ee0:	2800      	cmp	r0, #0
    2ee2:	d003      	beq.n	2eec <__smakebuf_r+0x94>
    2ee4:	89a3      	ldrh	r3, [r4, #12]
    2ee6:	2201      	movs	r2, #1
    2ee8:	4313      	orrs	r3, r2
    2eea:	81a3      	strh	r3, [r4, #12]
    2eec:	b011      	add	sp, #68	; 0x44
    2eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ef0:	ffffe000 	.word	0xffffe000
    2ef4:	00002cd1 	.word	0x00002cd1

00002ef8 <memchr>:
    2ef8:	b2c9      	uxtb	r1, r1
    2efa:	1882      	adds	r2, r0, r2
    2efc:	4290      	cmp	r0, r2
    2efe:	d004      	beq.n	2f0a <memchr+0x12>
    2f00:	7803      	ldrb	r3, [r0, #0]
    2f02:	428b      	cmp	r3, r1
    2f04:	d002      	beq.n	2f0c <memchr+0x14>
    2f06:	3001      	adds	r0, #1
    2f08:	e7f8      	b.n	2efc <memchr+0x4>
    2f0a:	2000      	movs	r0, #0
    2f0c:	4770      	bx	lr
	...

00002f10 <_free_r>:
    2f10:	b530      	push	{r4, r5, lr}
    2f12:	2900      	cmp	r1, #0
    2f14:	d040      	beq.n	2f98 <_free_r+0x88>
    2f16:	3904      	subs	r1, #4
    2f18:	680b      	ldr	r3, [r1, #0]
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	da00      	bge.n	2f20 <_free_r+0x10>
    2f1e:	18c9      	adds	r1, r1, r3
    2f20:	4a1e      	ldr	r2, [pc, #120]	; (2f9c <_free_r+0x8c>)
    2f22:	6813      	ldr	r3, [r2, #0]
    2f24:	1c14      	adds	r4, r2, #0
    2f26:	2b00      	cmp	r3, #0
    2f28:	d102      	bne.n	2f30 <_free_r+0x20>
    2f2a:	604b      	str	r3, [r1, #4]
    2f2c:	6011      	str	r1, [r2, #0]
    2f2e:	e033      	b.n	2f98 <_free_r+0x88>
    2f30:	4299      	cmp	r1, r3
    2f32:	d20f      	bcs.n	2f54 <_free_r+0x44>
    2f34:	6808      	ldr	r0, [r1, #0]
    2f36:	180a      	adds	r2, r1, r0
    2f38:	429a      	cmp	r2, r3
    2f3a:	d105      	bne.n	2f48 <_free_r+0x38>
    2f3c:	6813      	ldr	r3, [r2, #0]
    2f3e:	6852      	ldr	r2, [r2, #4]
    2f40:	18c0      	adds	r0, r0, r3
    2f42:	6008      	str	r0, [r1, #0]
    2f44:	604a      	str	r2, [r1, #4]
    2f46:	e000      	b.n	2f4a <_free_r+0x3a>
    2f48:	604b      	str	r3, [r1, #4]
    2f4a:	6021      	str	r1, [r4, #0]
    2f4c:	e024      	b.n	2f98 <_free_r+0x88>
    2f4e:	428a      	cmp	r2, r1
    2f50:	d803      	bhi.n	2f5a <_free_r+0x4a>
    2f52:	1c13      	adds	r3, r2, #0
    2f54:	685a      	ldr	r2, [r3, #4]
    2f56:	2a00      	cmp	r2, #0
    2f58:	d1f9      	bne.n	2f4e <_free_r+0x3e>
    2f5a:	681d      	ldr	r5, [r3, #0]
    2f5c:	195c      	adds	r4, r3, r5
    2f5e:	428c      	cmp	r4, r1
    2f60:	d10b      	bne.n	2f7a <_free_r+0x6a>
    2f62:	6809      	ldr	r1, [r1, #0]
    2f64:	1869      	adds	r1, r5, r1
    2f66:	1858      	adds	r0, r3, r1
    2f68:	6019      	str	r1, [r3, #0]
    2f6a:	4290      	cmp	r0, r2
    2f6c:	d114      	bne.n	2f98 <_free_r+0x88>
    2f6e:	6814      	ldr	r4, [r2, #0]
    2f70:	6852      	ldr	r2, [r2, #4]
    2f72:	1909      	adds	r1, r1, r4
    2f74:	6019      	str	r1, [r3, #0]
    2f76:	605a      	str	r2, [r3, #4]
    2f78:	e00e      	b.n	2f98 <_free_r+0x88>
    2f7a:	428c      	cmp	r4, r1
    2f7c:	d902      	bls.n	2f84 <_free_r+0x74>
    2f7e:	230c      	movs	r3, #12
    2f80:	6003      	str	r3, [r0, #0]
    2f82:	e009      	b.n	2f98 <_free_r+0x88>
    2f84:	6808      	ldr	r0, [r1, #0]
    2f86:	180c      	adds	r4, r1, r0
    2f88:	4294      	cmp	r4, r2
    2f8a:	d103      	bne.n	2f94 <_free_r+0x84>
    2f8c:	6814      	ldr	r4, [r2, #0]
    2f8e:	6852      	ldr	r2, [r2, #4]
    2f90:	1900      	adds	r0, r0, r4
    2f92:	6008      	str	r0, [r1, #0]
    2f94:	604a      	str	r2, [r1, #4]
    2f96:	6059      	str	r1, [r3, #4]
    2f98:	bd30      	pop	{r4, r5, pc}
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	20003cac 	.word	0x20003cac

00002fa0 <_malloc_r>:
    2fa0:	b570      	push	{r4, r5, r6, lr}
    2fa2:	2303      	movs	r3, #3
    2fa4:	1ccd      	adds	r5, r1, #3
    2fa6:	439d      	bics	r5, r3
    2fa8:	3508      	adds	r5, #8
    2faa:	1c06      	adds	r6, r0, #0
    2fac:	2d0c      	cmp	r5, #12
    2fae:	d201      	bcs.n	2fb4 <_malloc_r+0x14>
    2fb0:	250c      	movs	r5, #12
    2fb2:	e001      	b.n	2fb8 <_malloc_r+0x18>
    2fb4:	2d00      	cmp	r5, #0
    2fb6:	db3f      	blt.n	3038 <_malloc_r+0x98>
    2fb8:	428d      	cmp	r5, r1
    2fba:	d33d      	bcc.n	3038 <_malloc_r+0x98>
    2fbc:	4b20      	ldr	r3, [pc, #128]	; (3040 <_malloc_r+0xa0>)
    2fbe:	681c      	ldr	r4, [r3, #0]
    2fc0:	1c1a      	adds	r2, r3, #0
    2fc2:	1c21      	adds	r1, r4, #0
    2fc4:	2900      	cmp	r1, #0
    2fc6:	d013      	beq.n	2ff0 <_malloc_r+0x50>
    2fc8:	6808      	ldr	r0, [r1, #0]
    2fca:	1b43      	subs	r3, r0, r5
    2fcc:	d40d      	bmi.n	2fea <_malloc_r+0x4a>
    2fce:	2b0b      	cmp	r3, #11
    2fd0:	d902      	bls.n	2fd8 <_malloc_r+0x38>
    2fd2:	600b      	str	r3, [r1, #0]
    2fd4:	18cc      	adds	r4, r1, r3
    2fd6:	e01e      	b.n	3016 <_malloc_r+0x76>
    2fd8:	428c      	cmp	r4, r1
    2fda:	d102      	bne.n	2fe2 <_malloc_r+0x42>
    2fdc:	6863      	ldr	r3, [r4, #4]
    2fde:	6013      	str	r3, [r2, #0]
    2fe0:	e01a      	b.n	3018 <_malloc_r+0x78>
    2fe2:	6848      	ldr	r0, [r1, #4]
    2fe4:	6060      	str	r0, [r4, #4]
    2fe6:	1c0c      	adds	r4, r1, #0
    2fe8:	e016      	b.n	3018 <_malloc_r+0x78>
    2fea:	1c0c      	adds	r4, r1, #0
    2fec:	6849      	ldr	r1, [r1, #4]
    2fee:	e7e9      	b.n	2fc4 <_malloc_r+0x24>
    2ff0:	4c14      	ldr	r4, [pc, #80]	; (3044 <_malloc_r+0xa4>)
    2ff2:	6820      	ldr	r0, [r4, #0]
    2ff4:	2800      	cmp	r0, #0
    2ff6:	d103      	bne.n	3000 <_malloc_r+0x60>
    2ff8:	1c30      	adds	r0, r6, #0
    2ffa:	f000 f825 	bl	3048 <_sbrk_r>
    2ffe:	6020      	str	r0, [r4, #0]
    3000:	1c30      	adds	r0, r6, #0
    3002:	1c29      	adds	r1, r5, #0
    3004:	f000 f820 	bl	3048 <_sbrk_r>
    3008:	1c43      	adds	r3, r0, #1
    300a:	d015      	beq.n	3038 <_malloc_r+0x98>
    300c:	1cc4      	adds	r4, r0, #3
    300e:	2303      	movs	r3, #3
    3010:	439c      	bics	r4, r3
    3012:	4284      	cmp	r4, r0
    3014:	d10a      	bne.n	302c <_malloc_r+0x8c>
    3016:	6025      	str	r5, [r4, #0]
    3018:	1c20      	adds	r0, r4, #0
    301a:	300b      	adds	r0, #11
    301c:	2207      	movs	r2, #7
    301e:	1d23      	adds	r3, r4, #4
    3020:	4390      	bics	r0, r2
    3022:	1ac3      	subs	r3, r0, r3
    3024:	d00b      	beq.n	303e <_malloc_r+0x9e>
    3026:	425a      	negs	r2, r3
    3028:	50e2      	str	r2, [r4, r3]
    302a:	e008      	b.n	303e <_malloc_r+0x9e>
    302c:	1a21      	subs	r1, r4, r0
    302e:	1c30      	adds	r0, r6, #0
    3030:	f000 f80a 	bl	3048 <_sbrk_r>
    3034:	3001      	adds	r0, #1
    3036:	d1ee      	bne.n	3016 <_malloc_r+0x76>
    3038:	230c      	movs	r3, #12
    303a:	6033      	str	r3, [r6, #0]
    303c:	2000      	movs	r0, #0
    303e:	bd70      	pop	{r4, r5, r6, pc}
    3040:	20003cac 	.word	0x20003cac
    3044:	20003ca8 	.word	0x20003ca8

00003048 <_sbrk_r>:
    3048:	b538      	push	{r3, r4, r5, lr}
    304a:	4c07      	ldr	r4, [pc, #28]	; (3068 <_sbrk_r+0x20>)
    304c:	2300      	movs	r3, #0
    304e:	1c05      	adds	r5, r0, #0
    3050:	1c08      	adds	r0, r1, #0
    3052:	6023      	str	r3, [r4, #0]
    3054:	f7fd fd44 	bl	ae0 <_sbrk>
    3058:	1c43      	adds	r3, r0, #1
    305a:	d103      	bne.n	3064 <_sbrk_r+0x1c>
    305c:	6823      	ldr	r3, [r4, #0]
    305e:	2b00      	cmp	r3, #0
    3060:	d000      	beq.n	3064 <_sbrk_r+0x1c>
    3062:	602b      	str	r3, [r5, #0]
    3064:	bd38      	pop	{r3, r4, r5, pc}
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	20003d10 	.word	0x20003d10

0000306c <__sread>:
    306c:	b538      	push	{r3, r4, r5, lr}
    306e:	1c0c      	adds	r4, r1, #0
    3070:	250e      	movs	r5, #14
    3072:	5f49      	ldrsh	r1, [r1, r5]
    3074:	f000 f8ac 	bl	31d0 <_read_r>
    3078:	2800      	cmp	r0, #0
    307a:	db03      	blt.n	3084 <__sread+0x18>
    307c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    307e:	1813      	adds	r3, r2, r0
    3080:	6563      	str	r3, [r4, #84]	; 0x54
    3082:	e003      	b.n	308c <__sread+0x20>
    3084:	89a2      	ldrh	r2, [r4, #12]
    3086:	4b02      	ldr	r3, [pc, #8]	; (3090 <__sread+0x24>)
    3088:	4013      	ands	r3, r2
    308a:	81a3      	strh	r3, [r4, #12]
    308c:	bd38      	pop	{r3, r4, r5, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	ffffefff 	.word	0xffffefff

00003094 <__swrite>:
    3094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3096:	1c1e      	adds	r6, r3, #0
    3098:	898b      	ldrh	r3, [r1, #12]
    309a:	1c05      	adds	r5, r0, #0
    309c:	1c0c      	adds	r4, r1, #0
    309e:	1c17      	adds	r7, r2, #0
    30a0:	05da      	lsls	r2, r3, #23
    30a2:	d505      	bpl.n	30b0 <__swrite+0x1c>
    30a4:	230e      	movs	r3, #14
    30a6:	5ec9      	ldrsh	r1, [r1, r3]
    30a8:	2200      	movs	r2, #0
    30aa:	2302      	movs	r3, #2
    30ac:	f000 f87c 	bl	31a8 <_lseek_r>
    30b0:	89a2      	ldrh	r2, [r4, #12]
    30b2:	4b05      	ldr	r3, [pc, #20]	; (30c8 <__swrite+0x34>)
    30b4:	1c28      	adds	r0, r5, #0
    30b6:	4013      	ands	r3, r2
    30b8:	81a3      	strh	r3, [r4, #12]
    30ba:	220e      	movs	r2, #14
    30bc:	5ea1      	ldrsh	r1, [r4, r2]
    30be:	1c33      	adds	r3, r6, #0
    30c0:	1c3a      	adds	r2, r7, #0
    30c2:	f000 f827 	bl	3114 <_write_r>
    30c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30c8:	ffffefff 	.word	0xffffefff

000030cc <__sseek>:
    30cc:	b538      	push	{r3, r4, r5, lr}
    30ce:	1c0c      	adds	r4, r1, #0
    30d0:	250e      	movs	r5, #14
    30d2:	5f49      	ldrsh	r1, [r1, r5]
    30d4:	f000 f868 	bl	31a8 <_lseek_r>
    30d8:	89a3      	ldrh	r3, [r4, #12]
    30da:	1c42      	adds	r2, r0, #1
    30dc:	d103      	bne.n	30e6 <__sseek+0x1a>
    30de:	4a05      	ldr	r2, [pc, #20]	; (30f4 <__sseek+0x28>)
    30e0:	4013      	ands	r3, r2
    30e2:	81a3      	strh	r3, [r4, #12]
    30e4:	e004      	b.n	30f0 <__sseek+0x24>
    30e6:	2280      	movs	r2, #128	; 0x80
    30e8:	0152      	lsls	r2, r2, #5
    30ea:	4313      	orrs	r3, r2
    30ec:	81a3      	strh	r3, [r4, #12]
    30ee:	6560      	str	r0, [r4, #84]	; 0x54
    30f0:	bd38      	pop	{r3, r4, r5, pc}
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	ffffefff 	.word	0xffffefff

000030f8 <__sclose>:
    30f8:	b508      	push	{r3, lr}
    30fa:	230e      	movs	r3, #14
    30fc:	5ec9      	ldrsh	r1, [r1, r3]
    30fe:	f000 f81d 	bl	313c <_close_r>
    3102:	bd08      	pop	{r3, pc}

00003104 <strlen>:
    3104:	2300      	movs	r3, #0
    3106:	5cc2      	ldrb	r2, [r0, r3]
    3108:	3301      	adds	r3, #1
    310a:	2a00      	cmp	r2, #0
    310c:	d1fb      	bne.n	3106 <strlen+0x2>
    310e:	1e58      	subs	r0, r3, #1
    3110:	4770      	bx	lr
	...

00003114 <_write_r>:
    3114:	b538      	push	{r3, r4, r5, lr}
    3116:	4c08      	ldr	r4, [pc, #32]	; (3138 <_write_r+0x24>)
    3118:	1c05      	adds	r5, r0, #0
    311a:	2000      	movs	r0, #0
    311c:	6020      	str	r0, [r4, #0]
    311e:	1c08      	adds	r0, r1, #0
    3120:	1c11      	adds	r1, r2, #0
    3122:	1c1a      	adds	r2, r3, #0
    3124:	f7fd f85c 	bl	1e0 <_write>
    3128:	1c43      	adds	r3, r0, #1
    312a:	d103      	bne.n	3134 <_write_r+0x20>
    312c:	6823      	ldr	r3, [r4, #0]
    312e:	2b00      	cmp	r3, #0
    3130:	d000      	beq.n	3134 <_write_r+0x20>
    3132:	602b      	str	r3, [r5, #0]
    3134:	bd38      	pop	{r3, r4, r5, pc}
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	20003d10 	.word	0x20003d10

0000313c <_close_r>:
    313c:	b538      	push	{r3, r4, r5, lr}
    313e:	4c07      	ldr	r4, [pc, #28]	; (315c <_close_r+0x20>)
    3140:	2300      	movs	r3, #0
    3142:	1c05      	adds	r5, r0, #0
    3144:	1c08      	adds	r0, r1, #0
    3146:	6023      	str	r3, [r4, #0]
    3148:	f7fd fcdc 	bl	b04 <_close>
    314c:	1c43      	adds	r3, r0, #1
    314e:	d103      	bne.n	3158 <_close_r+0x1c>
    3150:	6823      	ldr	r3, [r4, #0]
    3152:	2b00      	cmp	r3, #0
    3154:	d000      	beq.n	3158 <_close_r+0x1c>
    3156:	602b      	str	r3, [r5, #0]
    3158:	bd38      	pop	{r3, r4, r5, pc}
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	20003d10 	.word	0x20003d10

00003160 <_fstat_r>:
    3160:	b538      	push	{r3, r4, r5, lr}
    3162:	4c07      	ldr	r4, [pc, #28]	; (3180 <_fstat_r+0x20>)
    3164:	2300      	movs	r3, #0
    3166:	1c05      	adds	r5, r0, #0
    3168:	1c08      	adds	r0, r1, #0
    316a:	1c11      	adds	r1, r2, #0
    316c:	6023      	str	r3, [r4, #0]
    316e:	f7fd fccd 	bl	b0c <_fstat>
    3172:	1c43      	adds	r3, r0, #1
    3174:	d103      	bne.n	317e <_fstat_r+0x1e>
    3176:	6823      	ldr	r3, [r4, #0]
    3178:	2b00      	cmp	r3, #0
    317a:	d000      	beq.n	317e <_fstat_r+0x1e>
    317c:	602b      	str	r3, [r5, #0]
    317e:	bd38      	pop	{r3, r4, r5, pc}
    3180:	20003d10 	.word	0x20003d10

00003184 <_isatty_r>:
    3184:	b538      	push	{r3, r4, r5, lr}
    3186:	4c07      	ldr	r4, [pc, #28]	; (31a4 <_isatty_r+0x20>)
    3188:	2300      	movs	r3, #0
    318a:	1c05      	adds	r5, r0, #0
    318c:	1c08      	adds	r0, r1, #0
    318e:	6023      	str	r3, [r4, #0]
    3190:	f7fd fcc2 	bl	b18 <_isatty>
    3194:	1c43      	adds	r3, r0, #1
    3196:	d103      	bne.n	31a0 <_isatty_r+0x1c>
    3198:	6823      	ldr	r3, [r4, #0]
    319a:	2b00      	cmp	r3, #0
    319c:	d000      	beq.n	31a0 <_isatty_r+0x1c>
    319e:	602b      	str	r3, [r5, #0]
    31a0:	bd38      	pop	{r3, r4, r5, pc}
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	20003d10 	.word	0x20003d10

000031a8 <_lseek_r>:
    31a8:	b538      	push	{r3, r4, r5, lr}
    31aa:	4c08      	ldr	r4, [pc, #32]	; (31cc <_lseek_r+0x24>)
    31ac:	1c05      	adds	r5, r0, #0
    31ae:	2000      	movs	r0, #0
    31b0:	6020      	str	r0, [r4, #0]
    31b2:	1c08      	adds	r0, r1, #0
    31b4:	1c11      	adds	r1, r2, #0
    31b6:	1c1a      	adds	r2, r3, #0
    31b8:	f7fd fcb0 	bl	b1c <_lseek>
    31bc:	1c43      	adds	r3, r0, #1
    31be:	d103      	bne.n	31c8 <_lseek_r+0x20>
    31c0:	6823      	ldr	r3, [r4, #0]
    31c2:	2b00      	cmp	r3, #0
    31c4:	d000      	beq.n	31c8 <_lseek_r+0x20>
    31c6:	602b      	str	r3, [r5, #0]
    31c8:	bd38      	pop	{r3, r4, r5, pc}
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	20003d10 	.word	0x20003d10

000031d0 <_read_r>:
    31d0:	b538      	push	{r3, r4, r5, lr}
    31d2:	4c08      	ldr	r4, [pc, #32]	; (31f4 <_read_r+0x24>)
    31d4:	1c05      	adds	r5, r0, #0
    31d6:	2000      	movs	r0, #0
    31d8:	6020      	str	r0, [r4, #0]
    31da:	1c08      	adds	r0, r1, #0
    31dc:	1c11      	adds	r1, r2, #0
    31de:	1c1a      	adds	r2, r3, #0
    31e0:	f7fc ffdc 	bl	19c <_read>
    31e4:	1c43      	adds	r3, r0, #1
    31e6:	d103      	bne.n	31f0 <_read_r+0x20>
    31e8:	6823      	ldr	r3, [r4, #0]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d000      	beq.n	31f0 <_read_r+0x20>
    31ee:	602b      	str	r3, [r5, #0]
    31f0:	bd38      	pop	{r3, r4, r5, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	20003d10 	.word	0x20003d10
    31f8:	000004c8 	.word	0x000004c8
    31fc:	00000524 	.word	0x00000524
    3200:	00000524 	.word	0x00000524
    3204:	000004c2 	.word	0x000004c2
    3208:	000004c2 	.word	0x000004c2
    320c:	000004de 	.word	0x000004de
    3210:	000004ce 	.word	0x000004ce
    3214:	000004e4 	.word	0x000004e4
    3218:	00000512 	.word	0x00000512
    321c:	000005ac 	.word	0x000005ac
    3220:	0000060c 	.word	0x0000060c
    3224:	0000060c 	.word	0x0000060c
    3228:	0000058c 	.word	0x0000058c
    322c:	0000059e 	.word	0x0000059e
    3230:	000005ba 	.word	0x000005ba
    3234:	00000590 	.word	0x00000590
    3238:	000005c8 	.word	0x000005c8
    323c:	000005fc 	.word	0x000005fc
    3240:	454c4449 	.word	0x454c4449
    3244:	00000000 	.word	0x00000000
    3248:	000020fe 	.word	0x000020fe
    324c:	000020fe 	.word	0x000020fe
    3250:	000020fe 	.word	0x000020fe
    3254:	00002156 	.word	0x00002156
    3258:	00002138 	.word	0x00002138
    325c:	00002150 	.word	0x00002150
    3260:	000020fe 	.word	0x000020fe
    3264:	000020fe 	.word	0x000020fe
    3268:	00002156 	.word	0x00002156
    326c:	00002138 	.word	0x00002138
    3270:	20726d54 	.word	0x20726d54
    3274:	00637653 	.word	0x00637653
    3278:	5f64636c 	.word	0x5f64636c
    327c:	6b736174 	.word	0x6b736174
    3280:	00000000 	.word	0x00000000
    3284:	0044434c 	.word	0x0044434c
    3288:	2077654e 	.word	0x2077654e
    328c:	736e6553 	.word	0x736e6553
    3290:	0000726f 	.word	0x0000726f
    3294:	6c616e41 	.word	0x6c616e41
    3298:	20657a79 	.word	0x20657a79
    329c:	61746144 	.word	0x61746144
    32a0:	00000000 	.word	0x00000000
    32a4:	706d6153 	.word	0x706d6153
    32a8:	5420656c 	.word	0x5420656c
    32ac:	00706d65 	.word	0x00706d65
    32b0:	6e65704f 	.word	0x6e65704f
    32b4:	6f6c432f 	.word	0x6f6c432f
    32b8:	00006573 	.word	0x00006573
    32bc:	74737953 	.word	0x74737953
    32c0:	206b7361 	.word	0x206b7361
    32c4:	646e6148 	.word	0x646e6148
    32c8:	0072656c 	.word	0x0072656c
    32cc:	00000043 	.word	0x00000043

000032d0 <_global_impure_ptr>:
    32d0:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    32e0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    32f0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    3300:	64636261 00006665                       abcdef..

00003308 <__sf_fake_stdin>:
	...

00003328 <__sf_fake_stdout>:
	...

00003348 <__sf_fake_stderr>:
	...

00003368 <_init>:
    3368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    336e:	bc08      	pop	{r3}
    3370:	469e      	mov	lr, r3
    3372:	4770      	bx	lr

00003374 <__init_array_start>:
    3374:	000000dd 	.word	0x000000dd

00003378 <_fini>:
    3378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    337e:	bc08      	pop	{r3}
    3380:	469e      	mov	lr, r3
    3382:	4770      	bx	lr

00003384 <__fini_array_start>:
    3384:	000000b5 	.word	0x000000b5
>>>>>>> JJ's_Branch
