
Kozy_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a08  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000098  20000000  00006a08  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004450  20000098  00006aa0  00010098  2**2
                  ALLOC
  3 .stack        00002000  200044e8  0000aef0  00010098  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003895c  00000000  00000000  0001014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006b86  00000000  00000000  00048aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000faa9  00000000  00000000  0004f630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ef8  00000000  00000000  0005f0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001698  00000000  00000000  0005ffd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ef50  00000000  00000000  00061669  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001c5c9  00000000  00000000  000805b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008bfca  00000000  00000000  0009cb82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c80  00000000  00000000  00128b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200064e8 	.word	0x200064e8
       4:	00004ff5 	.word	0x00004ff5
       8:	00004ff1 	.word	0x00004ff1
       c:	00004ff1 	.word	0x00004ff1
	...
      2c:	00000a11 	.word	0x00000a11
	...
      38:	00000a79 	.word	0x00000a79
      3c:	00000abd 	.word	0x00000abd
      40:	00004ff1 	.word	0x00004ff1
      44:	00004ff1 	.word	0x00004ff1
      48:	00004ff1 	.word	0x00004ff1
      4c:	00004ff1 	.word	0x00004ff1
      50:	000048ed 	.word	0x000048ed
      54:	00004ff1 	.word	0x00004ff1
      58:	00004ff1 	.word	0x00004ff1
      5c:	00004ff1 	.word	0x00004ff1
      60:	00004ff1 	.word	0x00004ff1
      64:	0000481d 	.word	0x0000481d
      68:	0000482d 	.word	0x0000482d
      6c:	0000483d 	.word	0x0000483d
      70:	0000484d 	.word	0x0000484d
      74:	0000485d 	.word	0x0000485d
      78:	0000486d 	.word	0x0000486d
      7c:	00004ff1 	.word	0x00004ff1
      80:	00004ff1 	.word	0x00004ff1
      84:	00004ff1 	.word	0x00004ff1
      88:	00003d55 	.word	0x00003d55
      8c:	00003d65 	.word	0x00003d65
      90:	00003d75 	.word	0x00003d75
	...
      9c:	00004ff1 	.word	0x00004ff1
      a0:	00004ff1 	.word	0x00004ff1
      a4:	00000000 	.word	0x00000000
      a8:	00004ff1 	.word	0x00004ff1
      ac:	00004ff1 	.word	0x00004ff1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000098 	.word	0x20000098
      d4:	00000000 	.word	0x00000000
      d8:	00006a08 	.word	0x00006a08

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00006a08 	.word	0x00006a08
     108:	2000009c 	.word	0x2000009c
     10c:	00006a08 	.word	0x00006a08
     110:	00000000 	.word	0x00000000

00000114 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     114:	4b05      	ldr	r3, [pc, #20]	; (12c <_extint_enable+0x18>)
     116:	7819      	ldrb	r1, [r3, #0]
     118:	2202      	movs	r2, #2
     11a:	430a      	orrs	r2, r1
     11c:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     11e:	1c1a      	adds	r2, r3, #0
     120:	7853      	ldrb	r3, [r2, #1]
     122:	b25b      	sxtb	r3, r3
     124:	2b00      	cmp	r3, #0
     126:	dbfb      	blt.n	120 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     128:	4770      	bx	lr
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	40001800 	.word	0x40001800

00000130 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     130:	b500      	push	{lr}
     132:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     134:	4b12      	ldr	r3, [pc, #72]	; (180 <_system_extint_init+0x50>)
     136:	6999      	ldr	r1, [r3, #24]
     138:	2240      	movs	r2, #64	; 0x40
     13a:	430a      	orrs	r2, r1
     13c:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     13e:	a901      	add	r1, sp, #4
     140:	2300      	movs	r3, #0
     142:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     144:	2005      	movs	r0, #5
     146:	4b0f      	ldr	r3, [pc, #60]	; (184 <_system_extint_init+0x54>)
     148:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     14a:	2005      	movs	r0, #5
     14c:	4b0e      	ldr	r3, [pc, #56]	; (188 <_system_extint_init+0x58>)
     14e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     150:	4b0e      	ldr	r3, [pc, #56]	; (18c <_system_extint_init+0x5c>)
     152:	7819      	ldrb	r1, [r3, #0]
     154:	2201      	movs	r2, #1
     156:	430a      	orrs	r2, r1
     158:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     15a:	1c1a      	adds	r2, r3, #0
     15c:	7853      	ldrb	r3, [r2, #1]
     15e:	b25b      	sxtb	r3, r3
     160:	2b00      	cmp	r3, #0
     162:	dbfb      	blt.n	15c <_system_extint_init+0x2c>
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <_system_extint_init+0x60>)
     166:	1c19      	adds	r1, r3, #0
     168:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     16a:	2200      	movs	r2, #0
     16c:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     16e:	428b      	cmp	r3, r1
     170:	d1fc      	bne.n	16c <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     172:	2210      	movs	r2, #16
     174:	4b07      	ldr	r3, [pc, #28]	; (194 <_system_extint_init+0x64>)
     176:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     178:	4b07      	ldr	r3, [pc, #28]	; (198 <_system_extint_init+0x68>)
     17a:	4798      	blx	r3
}
     17c:	b003      	add	sp, #12
     17e:	bd00      	pop	{pc}
     180:	40000400 	.word	0x40000400
     184:	00004ec1 	.word	0x00004ec1
     188:	00004e35 	.word	0x00004e35
     18c:	40001800 	.word	0x40001800
     190:	20004330 	.word	0x20004330
     194:	e000e100 	.word	0xe000e100
     198:	00000115 	.word	0x00000115

0000019c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     19c:	2300      	movs	r3, #0
     19e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     1a0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     1a2:	2201      	movs	r2, #1
     1a4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     1a6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     1a8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     1aa:	2302      	movs	r3, #2
     1ac:	72c3      	strb	r3, [r0, #11]
}
     1ae:	4770      	bx	lr

000001b0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1b2:	b083      	sub	sp, #12
     1b4:	1c05      	adds	r5, r0, #0
     1b6:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b8:	a901      	add	r1, sp, #4
     1ba:	2300      	movs	r3, #0
     1bc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1be:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     1c0:	6863      	ldr	r3, [r4, #4]
     1c2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     1c4:	7a23      	ldrb	r3, [r4, #8]
     1c6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     1c8:	7820      	ldrb	r0, [r4, #0]
     1ca:	4b15      	ldr	r3, [pc, #84]	; (220 <extint_chan_set_config+0x70>)
     1cc:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     1ce:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     1d0:	2d1f      	cmp	r5, #31
     1d2:	d800      	bhi.n	1d6 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     1d4:	4b13      	ldr	r3, [pc, #76]	; (224 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     1d6:	2107      	movs	r1, #7
     1d8:	4029      	ands	r1, r5
     1da:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     1dc:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     1de:	7aa2      	ldrb	r2, [r4, #10]
     1e0:	2a00      	cmp	r2, #0
     1e2:	d001      	beq.n	1e8 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     1e4:	2208      	movs	r2, #8
     1e6:	4310      	orrs	r0, r2
     1e8:	08ea      	lsrs	r2, r5, #3
     1ea:	0092      	lsls	r2, r2, #2
     1ec:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1ee:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     1f0:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1f2:	270f      	movs	r7, #15
     1f4:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1f6:	43be      	bics	r6, r7
     1f8:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1fa:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1fc:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     1fe:	7a62      	ldrb	r2, [r4, #9]
     200:	2a00      	cmp	r2, #0
     202:	d006      	beq.n	212 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     204:	695a      	ldr	r2, [r3, #20]
     206:	2101      	movs	r1, #1
     208:	40a9      	lsls	r1, r5
     20a:	1c0d      	adds	r5, r1, #0
     20c:	4315      	orrs	r5, r2
     20e:	615d      	str	r5, [r3, #20]
     210:	e004      	b.n	21c <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     212:	695a      	ldr	r2, [r3, #20]
     214:	2101      	movs	r1, #1
     216:	40a9      	lsls	r1, r5
     218:	438a      	bics	r2, r1
     21a:	615a      	str	r2, [r3, #20]
	}
}
     21c:	b003      	add	sp, #12
     21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     220:	00004f9d 	.word	0x00004f9d
     224:	40001800 	.word	0x40001800

00000228 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     228:	b510      	push	{r4, lr}
     22a:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     22c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     22e:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     230:	4299      	cmp	r1, r3
     232:	d30c      	bcc.n	24e <_sercom_get_sync_baud_val+0x26>
     234:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     236:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     238:	1c60      	adds	r0, r4, #1
     23a:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     23c:	428b      	cmp	r3, r1
     23e:	d801      	bhi.n	244 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     240:	1c04      	adds	r4, r0, #0
     242:	e7f8      	b.n	236 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     244:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     246:	2cff      	cmp	r4, #255	; 0xff
     248:	d801      	bhi.n	24e <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     24a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     24c:	2000      	movs	r0, #0
	}
}
     24e:	bd10      	pop	{r4, pc}

00000250 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     250:	b5f0      	push	{r4, r5, r6, r7, lr}
     252:	465f      	mov	r7, fp
     254:	4656      	mov	r6, sl
     256:	464d      	mov	r5, r9
     258:	4644      	mov	r4, r8
     25a:	b4f0      	push	{r4, r5, r6, r7}
     25c:	b087      	sub	sp, #28
     25e:	1c06      	adds	r6, r0, #0
     260:	1c0d      	adds	r5, r1, #0
     262:	9204      	str	r2, [sp, #16]
     264:	aa10      	add	r2, sp, #64	; 0x40
     266:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     268:	1c32      	adds	r2, r6, #0
     26a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     26c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     26e:	428a      	cmp	r2, r1
     270:	d900      	bls.n	274 <_sercom_get_async_baud_val+0x24>
     272:	e0b3      	b.n	3dc <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     274:	2b00      	cmp	r3, #0
     276:	d14b      	bne.n	310 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     278:	2100      	movs	r1, #0
     27a:	1c32      	adds	r2, r6, #0
     27c:	4c5e      	ldr	r4, [pc, #376]	; (3f8 <_sercom_get_async_baud_val+0x1a8>)
     27e:	47a0      	blx	r4
     280:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     282:	1c2e      	adds	r6, r5, #0
     284:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     286:	2000      	movs	r0, #0
     288:	2100      	movs	r1, #0
     28a:	2200      	movs	r2, #0
     28c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     28e:	243f      	movs	r4, #63	; 0x3f
     290:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     292:	2501      	movs	r5, #1
     294:	46a8      	mov	r8, r5
     296:	9002      	str	r0, [sp, #8]
     298:	9103      	str	r1, [sp, #12]
     29a:	4661      	mov	r1, ip
     29c:	3920      	subs	r1, #32
     29e:	d403      	bmi.n	2a8 <_sercom_get_async_baud_val+0x58>
     2a0:	4640      	mov	r0, r8
     2a2:	4088      	lsls	r0, r1
     2a4:	4681      	mov	r9, r0
     2a6:	e005      	b.n	2b4 <_sercom_get_async_baud_val+0x64>
     2a8:	2120      	movs	r1, #32
     2aa:	4665      	mov	r5, ip
     2ac:	1b4c      	subs	r4, r1, r5
     2ae:	4640      	mov	r0, r8
     2b0:	40e0      	lsrs	r0, r4
     2b2:	4681      	mov	r9, r0
     2b4:	4641      	mov	r1, r8
     2b6:	4664      	mov	r4, ip
     2b8:	40a1      	lsls	r1, r4
     2ba:	468a      	mov	sl, r1

		r = r << 1;
     2bc:	1c10      	adds	r0, r2, #0
     2be:	1c19      	adds	r1, r3, #0
     2c0:	1880      	adds	r0, r0, r2
     2c2:	4159      	adcs	r1, r3
     2c4:	1c02      	adds	r2, r0, #0
     2c6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     2c8:	465d      	mov	r5, fp
     2ca:	464c      	mov	r4, r9
     2cc:	4225      	tst	r5, r4
     2ce:	d002      	beq.n	2d6 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     2d0:	4642      	mov	r2, r8
     2d2:	4302      	orrs	r2, r0
     2d4:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     2d6:	429f      	cmp	r7, r3
     2d8:	d80c      	bhi.n	2f4 <_sercom_get_async_baud_val+0xa4>
     2da:	d101      	bne.n	2e0 <_sercom_get_async_baud_val+0x90>
     2dc:	4296      	cmp	r6, r2
     2de:	d809      	bhi.n	2f4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     2e0:	1b92      	subs	r2, r2, r6
     2e2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     2e4:	4650      	mov	r0, sl
     2e6:	9d02      	ldr	r5, [sp, #8]
     2e8:	4328      	orrs	r0, r5
     2ea:	4649      	mov	r1, r9
     2ec:	9c03      	ldr	r4, [sp, #12]
     2ee:	4321      	orrs	r1, r4
     2f0:	9002      	str	r0, [sp, #8]
     2f2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     2f4:	4665      	mov	r5, ip
     2f6:	3d01      	subs	r5, #1
     2f8:	46ac      	mov	ip, r5
     2fa:	d2ce      	bcs.n	29a <_sercom_get_async_baud_val+0x4a>
     2fc:	9802      	ldr	r0, [sp, #8]
     2fe:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     300:	4b3c      	ldr	r3, [pc, #240]	; (3f4 <_sercom_get_async_baud_val+0x1a4>)
     302:	4a3b      	ldr	r2, [pc, #236]	; (3f0 <_sercom_get_async_baud_val+0x1a0>)
     304:	1a12      	subs	r2, r2, r0
     306:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     308:	0c12      	lsrs	r2, r2, #16
     30a:	041b      	lsls	r3, r3, #16
     30c:	431a      	orrs	r2, r3
     30e:	e062      	b.n	3d6 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     310:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     312:	2b01      	cmp	r3, #1
     314:	d15f      	bne.n	3d6 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     316:	0f4f      	lsrs	r7, r1, #29
     318:	46b9      	mov	r9, r7
     31a:	00cd      	lsls	r5, r1, #3
     31c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     31e:	2100      	movs	r1, #0
     320:	1c32      	adds	r2, r6, #0
     322:	2300      	movs	r3, #0
     324:	4c34      	ldr	r4, [pc, #208]	; (3f8 <_sercom_get_async_baud_val+0x1a8>)
     326:	47a0      	blx	r4
     328:	1c06      	adds	r6, r0, #0
     32a:	1c0f      	adds	r7, r1, #0
     32c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     32e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     330:	9602      	str	r6, [sp, #8]
     332:	9703      	str	r7, [sp, #12]
     334:	469a      	mov	sl, r3
     336:	4650      	mov	r0, sl
     338:	b2c0      	uxtb	r0, r0
     33a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     33c:	2100      	movs	r1, #0
     33e:	4688      	mov	r8, r1
     340:	2200      	movs	r2, #0
     342:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     344:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     346:	1c27      	adds	r7, r4, #0
     348:	3f20      	subs	r7, #32
     34a:	d403      	bmi.n	354 <_sercom_get_async_baud_val+0x104>
     34c:	1c2e      	adds	r6, r5, #0
     34e:	40be      	lsls	r6, r7
     350:	9601      	str	r6, [sp, #4]
     352:	e004      	b.n	35e <_sercom_get_async_baud_val+0x10e>
     354:	2020      	movs	r0, #32
     356:	1b07      	subs	r7, r0, r4
     358:	1c29      	adds	r1, r5, #0
     35a:	40f9      	lsrs	r1, r7
     35c:	9101      	str	r1, [sp, #4]
     35e:	1c2e      	adds	r6, r5, #0
     360:	40a6      	lsls	r6, r4
     362:	9600      	str	r6, [sp, #0]

		r = r << 1;
     364:	1c10      	adds	r0, r2, #0
     366:	1c19      	adds	r1, r3, #0
     368:	1880      	adds	r0, r0, r2
     36a:	4159      	adcs	r1, r3
     36c:	1c02      	adds	r2, r0, #0
     36e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     370:	465f      	mov	r7, fp
     372:	4037      	ands	r7, r6
     374:	46bc      	mov	ip, r7
     376:	9e01      	ldr	r6, [sp, #4]
     378:	464f      	mov	r7, r9
     37a:	403e      	ands	r6, r7
     37c:	4667      	mov	r7, ip
     37e:	433e      	orrs	r6, r7
     380:	d002      	beq.n	388 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     382:	1c2a      	adds	r2, r5, #0
     384:	4302      	orrs	r2, r0
     386:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     388:	9803      	ldr	r0, [sp, #12]
     38a:	4298      	cmp	r0, r3
     38c:	d80b      	bhi.n	3a6 <_sercom_get_async_baud_val+0x156>
     38e:	d102      	bne.n	396 <_sercom_get_async_baud_val+0x146>
     390:	9902      	ldr	r1, [sp, #8]
     392:	4291      	cmp	r1, r2
     394:	d807      	bhi.n	3a6 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     396:	9e02      	ldr	r6, [sp, #8]
     398:	9f03      	ldr	r7, [sp, #12]
     39a:	1b92      	subs	r2, r2, r6
     39c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     39e:	4647      	mov	r7, r8
     3a0:	9800      	ldr	r0, [sp, #0]
     3a2:	4307      	orrs	r7, r0
     3a4:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     3a6:	3c01      	subs	r4, #1
     3a8:	d2cd      	bcs.n	346 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     3aa:	4641      	mov	r1, r8
     3ac:	4652      	mov	r2, sl
     3ae:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     3b0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     3b2:	4c12      	ldr	r4, [pc, #72]	; (3fc <_sercom_get_async_baud_val+0x1ac>)
     3b4:	42a3      	cmp	r3, r4
     3b6:	d908      	bls.n	3ca <_sercom_get_async_baud_val+0x17a>
     3b8:	9a05      	ldr	r2, [sp, #20]
     3ba:	3201      	adds	r2, #1
     3bc:	b2d2      	uxtb	r2, r2
     3be:	9205      	str	r2, [sp, #20]
     3c0:	2601      	movs	r6, #1
     3c2:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     3c4:	4657      	mov	r7, sl
     3c6:	2f08      	cmp	r7, #8
     3c8:	d1b5      	bne.n	336 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ca:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     3cc:	9805      	ldr	r0, [sp, #20]
     3ce:	2808      	cmp	r0, #8
     3d0:	d004      	beq.n	3dc <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     3d2:	0342      	lsls	r2, r0, #13
     3d4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     3d6:	9c04      	ldr	r4, [sp, #16]
     3d8:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     3da:	2400      	movs	r4, #0
}
     3dc:	1c20      	adds	r0, r4, #0
     3de:	b007      	add	sp, #28
     3e0:	bc3c      	pop	{r2, r3, r4, r5}
     3e2:	4690      	mov	r8, r2
     3e4:	4699      	mov	r9, r3
     3e6:	46a2      	mov	sl, r4
     3e8:	46ab      	mov	fp, r5
     3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ec:	46c0      	nop			; (mov r8, r8)
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	00000000 	.word	0x00000000
     3f4:	00000001 	.word	0x00000001
     3f8:	000057e9 	.word	0x000057e9
     3fc:	00001fff 	.word	0x00001fff

00000400 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     400:	b510      	push	{r4, lr}
     402:	b082      	sub	sp, #8
     404:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     406:	4b0f      	ldr	r3, [pc, #60]	; (444 <sercom_set_gclk_generator+0x44>)
     408:	781b      	ldrb	r3, [r3, #0]
     40a:	2b00      	cmp	r3, #0
     40c:	d001      	beq.n	412 <sercom_set_gclk_generator+0x12>
     40e:	2900      	cmp	r1, #0
     410:	d00d      	beq.n	42e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     412:	a901      	add	r1, sp, #4
     414:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     416:	2013      	movs	r0, #19
     418:	4b0b      	ldr	r3, [pc, #44]	; (448 <sercom_set_gclk_generator+0x48>)
     41a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     41c:	2013      	movs	r0, #19
     41e:	4b0b      	ldr	r3, [pc, #44]	; (44c <sercom_set_gclk_generator+0x4c>)
     420:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     422:	4b08      	ldr	r3, [pc, #32]	; (444 <sercom_set_gclk_generator+0x44>)
     424:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     426:	2201      	movs	r2, #1
     428:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     42a:	2000      	movs	r0, #0
     42c:	e007      	b.n	43e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     42e:	4b05      	ldr	r3, [pc, #20]	; (444 <sercom_set_gclk_generator+0x44>)
     430:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     432:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     434:	1b14      	subs	r4, r2, r4
     436:	1e62      	subs	r2, r4, #1
     438:	4194      	sbcs	r4, r2
     43a:	4264      	negs	r4, r4
     43c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     43e:	b002      	add	sp, #8
     440:	bd10      	pop	{r4, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	200000b4 	.word	0x200000b4
     448:	00004ec1 	.word	0x00004ec1
     44c:	00004e35 	.word	0x00004e35

00000450 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     450:	4b44      	ldr	r3, [pc, #272]	; (564 <_sercom_get_default_pad+0x114>)
     452:	4298      	cmp	r0, r3
     454:	d033      	beq.n	4be <_sercom_get_default_pad+0x6e>
     456:	d806      	bhi.n	466 <_sercom_get_default_pad+0x16>
     458:	4b43      	ldr	r3, [pc, #268]	; (568 <_sercom_get_default_pad+0x118>)
     45a:	4298      	cmp	r0, r3
     45c:	d00d      	beq.n	47a <_sercom_get_default_pad+0x2a>
     45e:	4b43      	ldr	r3, [pc, #268]	; (56c <_sercom_get_default_pad+0x11c>)
     460:	4298      	cmp	r0, r3
     462:	d01b      	beq.n	49c <_sercom_get_default_pad+0x4c>
     464:	e06f      	b.n	546 <_sercom_get_default_pad+0xf6>
     466:	4b42      	ldr	r3, [pc, #264]	; (570 <_sercom_get_default_pad+0x120>)
     468:	4298      	cmp	r0, r3
     46a:	d04a      	beq.n	502 <_sercom_get_default_pad+0xb2>
     46c:	4b41      	ldr	r3, [pc, #260]	; (574 <_sercom_get_default_pad+0x124>)
     46e:	4298      	cmp	r0, r3
     470:	d058      	beq.n	524 <_sercom_get_default_pad+0xd4>
     472:	4b41      	ldr	r3, [pc, #260]	; (578 <_sercom_get_default_pad+0x128>)
     474:	4298      	cmp	r0, r3
     476:	d166      	bne.n	546 <_sercom_get_default_pad+0xf6>
     478:	e032      	b.n	4e0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     47a:	2901      	cmp	r1, #1
     47c:	d065      	beq.n	54a <_sercom_get_default_pad+0xfa>
     47e:	2900      	cmp	r1, #0
     480:	d004      	beq.n	48c <_sercom_get_default_pad+0x3c>
     482:	2902      	cmp	r1, #2
     484:	d006      	beq.n	494 <_sercom_get_default_pad+0x44>
     486:	2903      	cmp	r1, #3
     488:	d006      	beq.n	498 <_sercom_get_default_pad+0x48>
     48a:	e001      	b.n	490 <_sercom_get_default_pad+0x40>
     48c:	483b      	ldr	r0, [pc, #236]	; (57c <_sercom_get_default_pad+0x12c>)
     48e:	e067      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     490:	2000      	movs	r0, #0
     492:	e065      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     494:	483a      	ldr	r0, [pc, #232]	; (580 <_sercom_get_default_pad+0x130>)
     496:	e063      	b.n	560 <_sercom_get_default_pad+0x110>
     498:	483a      	ldr	r0, [pc, #232]	; (584 <_sercom_get_default_pad+0x134>)
     49a:	e061      	b.n	560 <_sercom_get_default_pad+0x110>
     49c:	2901      	cmp	r1, #1
     49e:	d056      	beq.n	54e <_sercom_get_default_pad+0xfe>
     4a0:	2900      	cmp	r1, #0
     4a2:	d004      	beq.n	4ae <_sercom_get_default_pad+0x5e>
     4a4:	2902      	cmp	r1, #2
     4a6:	d006      	beq.n	4b6 <_sercom_get_default_pad+0x66>
     4a8:	2903      	cmp	r1, #3
     4aa:	d006      	beq.n	4ba <_sercom_get_default_pad+0x6a>
     4ac:	e001      	b.n	4b2 <_sercom_get_default_pad+0x62>
     4ae:	2003      	movs	r0, #3
     4b0:	e056      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4b2:	2000      	movs	r0, #0
     4b4:	e054      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4b6:	4834      	ldr	r0, [pc, #208]	; (588 <_sercom_get_default_pad+0x138>)
     4b8:	e052      	b.n	560 <_sercom_get_default_pad+0x110>
     4ba:	4834      	ldr	r0, [pc, #208]	; (58c <_sercom_get_default_pad+0x13c>)
     4bc:	e050      	b.n	560 <_sercom_get_default_pad+0x110>
     4be:	2901      	cmp	r1, #1
     4c0:	d047      	beq.n	552 <_sercom_get_default_pad+0x102>
     4c2:	2900      	cmp	r1, #0
     4c4:	d004      	beq.n	4d0 <_sercom_get_default_pad+0x80>
     4c6:	2902      	cmp	r1, #2
     4c8:	d006      	beq.n	4d8 <_sercom_get_default_pad+0x88>
     4ca:	2903      	cmp	r1, #3
     4cc:	d006      	beq.n	4dc <_sercom_get_default_pad+0x8c>
     4ce:	e001      	b.n	4d4 <_sercom_get_default_pad+0x84>
     4d0:	482f      	ldr	r0, [pc, #188]	; (590 <_sercom_get_default_pad+0x140>)
     4d2:	e045      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4d4:	2000      	movs	r0, #0
     4d6:	e043      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4d8:	482e      	ldr	r0, [pc, #184]	; (594 <_sercom_get_default_pad+0x144>)
     4da:	e041      	b.n	560 <_sercom_get_default_pad+0x110>
     4dc:	482e      	ldr	r0, [pc, #184]	; (598 <_sercom_get_default_pad+0x148>)
     4de:	e03f      	b.n	560 <_sercom_get_default_pad+0x110>
     4e0:	2901      	cmp	r1, #1
     4e2:	d038      	beq.n	556 <_sercom_get_default_pad+0x106>
     4e4:	2900      	cmp	r1, #0
     4e6:	d004      	beq.n	4f2 <_sercom_get_default_pad+0xa2>
     4e8:	2902      	cmp	r1, #2
     4ea:	d006      	beq.n	4fa <_sercom_get_default_pad+0xaa>
     4ec:	2903      	cmp	r1, #3
     4ee:	d006      	beq.n	4fe <_sercom_get_default_pad+0xae>
     4f0:	e001      	b.n	4f6 <_sercom_get_default_pad+0xa6>
     4f2:	482a      	ldr	r0, [pc, #168]	; (59c <_sercom_get_default_pad+0x14c>)
     4f4:	e034      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4f6:	2000      	movs	r0, #0
     4f8:	e032      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4fa:	4829      	ldr	r0, [pc, #164]	; (5a0 <_sercom_get_default_pad+0x150>)
     4fc:	e030      	b.n	560 <_sercom_get_default_pad+0x110>
     4fe:	4829      	ldr	r0, [pc, #164]	; (5a4 <_sercom_get_default_pad+0x154>)
     500:	e02e      	b.n	560 <_sercom_get_default_pad+0x110>
     502:	2901      	cmp	r1, #1
     504:	d029      	beq.n	55a <_sercom_get_default_pad+0x10a>
     506:	2900      	cmp	r1, #0
     508:	d004      	beq.n	514 <_sercom_get_default_pad+0xc4>
     50a:	2902      	cmp	r1, #2
     50c:	d006      	beq.n	51c <_sercom_get_default_pad+0xcc>
     50e:	2903      	cmp	r1, #3
     510:	d006      	beq.n	520 <_sercom_get_default_pad+0xd0>
     512:	e001      	b.n	518 <_sercom_get_default_pad+0xc8>
     514:	4824      	ldr	r0, [pc, #144]	; (5a8 <_sercom_get_default_pad+0x158>)
     516:	e023      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     518:	2000      	movs	r0, #0
     51a:	e021      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     51c:	4823      	ldr	r0, [pc, #140]	; (5ac <_sercom_get_default_pad+0x15c>)
     51e:	e01f      	b.n	560 <_sercom_get_default_pad+0x110>
     520:	4823      	ldr	r0, [pc, #140]	; (5b0 <_sercom_get_default_pad+0x160>)
     522:	e01d      	b.n	560 <_sercom_get_default_pad+0x110>
     524:	2901      	cmp	r1, #1
     526:	d01a      	beq.n	55e <_sercom_get_default_pad+0x10e>
     528:	2900      	cmp	r1, #0
     52a:	d004      	beq.n	536 <_sercom_get_default_pad+0xe6>
     52c:	2902      	cmp	r1, #2
     52e:	d006      	beq.n	53e <_sercom_get_default_pad+0xee>
     530:	2903      	cmp	r1, #3
     532:	d006      	beq.n	542 <_sercom_get_default_pad+0xf2>
     534:	e001      	b.n	53a <_sercom_get_default_pad+0xea>
     536:	481f      	ldr	r0, [pc, #124]	; (5b4 <_sercom_get_default_pad+0x164>)
     538:	e012      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     53a:	2000      	movs	r0, #0
     53c:	e010      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     53e:	481e      	ldr	r0, [pc, #120]	; (5b8 <_sercom_get_default_pad+0x168>)
     540:	e00e      	b.n	560 <_sercom_get_default_pad+0x110>
     542:	481e      	ldr	r0, [pc, #120]	; (5bc <_sercom_get_default_pad+0x16c>)
     544:	e00c      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     546:	2000      	movs	r0, #0
     548:	e00a      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     54a:	481d      	ldr	r0, [pc, #116]	; (5c0 <_sercom_get_default_pad+0x170>)
     54c:	e008      	b.n	560 <_sercom_get_default_pad+0x110>
     54e:	481d      	ldr	r0, [pc, #116]	; (5c4 <_sercom_get_default_pad+0x174>)
     550:	e006      	b.n	560 <_sercom_get_default_pad+0x110>
     552:	481d      	ldr	r0, [pc, #116]	; (5c8 <_sercom_get_default_pad+0x178>)
     554:	e004      	b.n	560 <_sercom_get_default_pad+0x110>
     556:	481d      	ldr	r0, [pc, #116]	; (5cc <_sercom_get_default_pad+0x17c>)
     558:	e002      	b.n	560 <_sercom_get_default_pad+0x110>
     55a:	481d      	ldr	r0, [pc, #116]	; (5d0 <_sercom_get_default_pad+0x180>)
     55c:	e000      	b.n	560 <_sercom_get_default_pad+0x110>
     55e:	481d      	ldr	r0, [pc, #116]	; (5d4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     560:	4770      	bx	lr
     562:	46c0      	nop			; (mov r8, r8)
     564:	42001000 	.word	0x42001000
     568:	42000800 	.word	0x42000800
     56c:	42000c00 	.word	0x42000c00
     570:	42001800 	.word	0x42001800
     574:	42001c00 	.word	0x42001c00
     578:	42001400 	.word	0x42001400
     57c:	00040003 	.word	0x00040003
     580:	00060003 	.word	0x00060003
     584:	00070003 	.word	0x00070003
     588:	001e0003 	.word	0x001e0003
     58c:	001f0003 	.word	0x001f0003
     590:	000c0002 	.word	0x000c0002
     594:	000e0002 	.word	0x000e0002
     598:	000f0002 	.word	0x000f0002
     59c:	00100003 	.word	0x00100003
     5a0:	00120003 	.word	0x00120003
     5a4:	00130003 	.word	0x00130003
     5a8:	00530005 	.word	0x00530005
     5ac:	003e0005 	.word	0x003e0005
     5b0:	00520005 	.word	0x00520005
     5b4:	00160003 	.word	0x00160003
     5b8:	00180003 	.word	0x00180003
     5bc:	00190003 	.word	0x00190003
     5c0:	00050003 	.word	0x00050003
     5c4:	00010003 	.word	0x00010003
     5c8:	000d0002 	.word	0x000d0002
     5cc:	00110003 	.word	0x00110003
     5d0:	003f0005 	.word	0x003f0005
     5d4:	00170003 	.word	0x00170003

000005d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5dc:	4a0c      	ldr	r2, [pc, #48]	; (610 <_sercom_get_sercom_inst_index+0x38>)
     5de:	466b      	mov	r3, sp
     5e0:	ca70      	ldmia	r2!, {r4, r5, r6}
     5e2:	c370      	stmia	r3!, {r4, r5, r6}
     5e4:	ca32      	ldmia	r2!, {r1, r4, r5}
     5e6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5e8:	9e00      	ldr	r6, [sp, #0]
     5ea:	4286      	cmp	r6, r0
     5ec:	d006      	beq.n	5fc <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5ee:	2301      	movs	r3, #1
     5f0:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5f2:	4669      	mov	r1, sp
     5f4:	5852      	ldr	r2, [r2, r1]
     5f6:	4282      	cmp	r2, r0
     5f8:	d103      	bne.n	602 <_sercom_get_sercom_inst_index+0x2a>
     5fa:	e000      	b.n	5fe <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5fc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     5fe:	b2d8      	uxtb	r0, r3
     600:	e003      	b.n	60a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     602:	3301      	adds	r3, #1
     604:	2b06      	cmp	r3, #6
     606:	d1f3      	bne.n	5f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     608:	2000      	movs	r0, #0
}
     60a:	b006      	add	sp, #24
     60c:	bd70      	pop	{r4, r5, r6, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	00006818 	.word	0x00006818

00000614 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	b084      	sub	sp, #16
     618:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     61a:	ab01      	add	r3, sp, #4
     61c:	4a0a      	ldr	r2, [pc, #40]	; (648 <_tc_get_inst_index+0x34>)
     61e:	ca70      	ldmia	r2!, {r4, r5, r6}
     620:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     622:	9b01      	ldr	r3, [sp, #4]
     624:	4283      	cmp	r3, r0
     626:	d00a      	beq.n	63e <_tc_get_inst_index+0x2a>
     628:	9c02      	ldr	r4, [sp, #8]
     62a:	4284      	cmp	r4, r0
     62c:	d005      	beq.n	63a <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     62e:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     630:	9d03      	ldr	r5, [sp, #12]
     632:	428d      	cmp	r5, r1
     634:	d105      	bne.n	642 <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     636:	2002      	movs	r0, #2
     638:	e002      	b.n	640 <_tc_get_inst_index+0x2c>
     63a:	2001      	movs	r0, #1
     63c:	e000      	b.n	640 <_tc_get_inst_index+0x2c>
     63e:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
     640:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     642:	b004      	add	sp, #16
     644:	bd70      	pop	{r4, r5, r6, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	00006830 	.word	0x00006830

0000064c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     64c:	b5f0      	push	{r4, r5, r6, r7, lr}
     64e:	464f      	mov	r7, r9
     650:	4646      	mov	r6, r8
     652:	b4c0      	push	{r6, r7}
     654:	b087      	sub	sp, #28
     656:	1c04      	adds	r4, r0, #0
     658:	1c0d      	adds	r5, r1, #0
     65a:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     65c:	1c08      	adds	r0, r1, #0
     65e:	4b90      	ldr	r3, [pc, #576]	; (8a0 <tc_init+0x254>)
     660:	4798      	blx	r3
     662:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     664:	4f8f      	ldr	r7, [pc, #572]	; (8a4 <tc_init+0x258>)
     666:	1c39      	adds	r1, r7, #0
     668:	310c      	adds	r1, #12
     66a:	a805      	add	r0, sp, #20
     66c:	2203      	movs	r2, #3
     66e:	4e8e      	ldr	r6, [pc, #568]	; (8a8 <tc_init+0x25c>)
     670:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     672:	1c39      	adds	r1, r7, #0
     674:	3110      	adds	r1, #16
     676:	a803      	add	r0, sp, #12
     678:	2206      	movs	r2, #6
     67a:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     67c:	2300      	movs	r3, #0
     67e:	60a3      	str	r3, [r4, #8]
     680:	60e3      	str	r3, [r4, #12]
     682:	6123      	str	r3, [r4, #16]
     684:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     686:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     688:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     68a:	4648      	mov	r0, r9
     68c:	0082      	lsls	r2, r0, #2
     68e:	4b87      	ldr	r3, [pc, #540]	; (8ac <tc_init+0x260>)
     690:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     692:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     694:	4641      	mov	r1, r8
     696:	788b      	ldrb	r3, [r1, #2]
     698:	2b08      	cmp	r3, #8
     69a:	d104      	bne.n	6a6 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     69c:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     69e:	464a      	mov	r2, r9
     6a0:	07d2      	lsls	r2, r2, #31
     6a2:	d400      	bmi.n	6a6 <tc_init+0x5a>
     6a4:	e0f6      	b.n	894 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     6a6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6a8:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     6aa:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6ac:	07d9      	lsls	r1, r3, #31
     6ae:	d500      	bpl.n	6b2 <tc_init+0x66>
     6b0:	e0f0      	b.n	894 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6b2:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     6b4:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6b6:	06da      	lsls	r2, r3, #27
     6b8:	d500      	bpl.n	6bc <tc_init+0x70>
     6ba:	e0eb      	b.n	894 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     6bc:	882b      	ldrh	r3, [r5, #0]
     6be:	0799      	lsls	r1, r3, #30
     6c0:	d500      	bpl.n	6c4 <tc_init+0x78>
     6c2:	e0e7      	b.n	894 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     6c4:	4642      	mov	r2, r8
     6c6:	7c13      	ldrb	r3, [r2, #16]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d00c      	beq.n	6e6 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6cc:	a902      	add	r1, sp, #8
     6ce:	2301      	movs	r3, #1
     6d0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     6d2:	2200      	movs	r2, #0
     6d4:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     6d6:	4640      	mov	r0, r8
     6d8:	6980      	ldr	r0, [r0, #24]
     6da:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     6dc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     6de:	4642      	mov	r2, r8
     6e0:	7d10      	ldrb	r0, [r2, #20]
     6e2:	4b73      	ldr	r3, [pc, #460]	; (8b0 <tc_init+0x264>)
     6e4:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     6e6:	4640      	mov	r0, r8
     6e8:	7f03      	ldrb	r3, [r0, #28]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d00b      	beq.n	706 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6ee:	a902      	add	r1, sp, #8
     6f0:	2301      	movs	r3, #1
     6f2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     6f4:	2200      	movs	r2, #0
     6f6:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     6f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
     6fa:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     6fc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     6fe:	6a03      	ldr	r3, [r0, #32]
     700:	b2d8      	uxtb	r0, r3
     702:	4b6b      	ldr	r3, [pc, #428]	; (8b0 <tc_init+0x264>)
     704:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     706:	4b6b      	ldr	r3, [pc, #428]	; (8b4 <tc_init+0x268>)
     708:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     70a:	4648      	mov	r0, r9
     70c:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     70e:	a803      	add	r0, sp, #12
     710:	5a12      	ldrh	r2, [r2, r0]
     712:	430a      	orrs	r2, r1
     714:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     716:	4641      	mov	r1, r8
     718:	788b      	ldrb	r3, [r1, #2]
     71a:	2b08      	cmp	r3, #8
     71c:	d108      	bne.n	730 <tc_init+0xe4>
     71e:	4b65      	ldr	r3, [pc, #404]	; (8b4 <tc_init+0x268>)
     720:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     722:	4648      	mov	r0, r9
     724:	3001      	adds	r0, #1
     726:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     728:	a903      	add	r1, sp, #12
     72a:	5a41      	ldrh	r1, [r0, r1]
     72c:	430a      	orrs	r2, r1
     72e:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
     730:	a901      	add	r1, sp, #4
     732:	4642      	mov	r2, r8
     734:	7813      	ldrb	r3, [r2, #0]
     736:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     738:	ab05      	add	r3, sp, #20
     73a:	4648      	mov	r0, r9
     73c:	5c1e      	ldrb	r6, [r3, r0]
     73e:	1c30      	adds	r0, r6, #0
     740:	4b5d      	ldr	r3, [pc, #372]	; (8b8 <tc_init+0x26c>)
     742:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     744:	1c30      	adds	r0, r6, #0
     746:	4b5d      	ldr	r3, [pc, #372]	; (8bc <tc_init+0x270>)
     748:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
     74a:	4641      	mov	r1, r8
     74c:	8888      	ldrh	r0, [r1, #4]
     74e:	890b      	ldrh	r3, [r1, #8]
     750:	4303      	orrs	r3, r0
     752:	7988      	ldrb	r0, [r1, #6]
     754:	788a      	ldrb	r2, [r1, #2]
     756:	4310      	orrs	r0, r2
     758:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     75a:	784b      	ldrb	r3, [r1, #1]
     75c:	2b00      	cmp	r3, #0
     75e:	d002      	beq.n	766 <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     760:	2380      	movs	r3, #128	; 0x80
     762:	011b      	lsls	r3, r3, #4
     764:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     766:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     768:	227f      	movs	r2, #127	; 0x7f
     76a:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     76c:	4393      	bics	r3, r2
     76e:	d1fc      	bne.n	76a <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     770:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     772:	4642      	mov	r2, r8
     774:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     776:	1e43      	subs	r3, r0, #1
     778:	4198      	sbcs	r0, r3
     77a:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
     77c:	7b93      	ldrb	r3, [r2, #14]
     77e:	2b00      	cmp	r3, #0
     780:	d001      	beq.n	786 <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     782:	2301      	movs	r3, #1
     784:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     786:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     788:	227f      	movs	r2, #127	; 0x7f
     78a:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     78c:	4393      	bics	r3, r2
     78e:	d1fc      	bne.n	78a <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     790:	23ff      	movs	r3, #255	; 0xff
     792:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     794:	2800      	cmp	r0, #0
     796:	d005      	beq.n	7a4 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     798:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     79a:	227f      	movs	r2, #127	; 0x7f
     79c:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
     79e:	4393      	bics	r3, r2
     7a0:	d1fc      	bne.n	79c <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     7a2:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     7a4:	4643      	mov	r3, r8
     7a6:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     7a8:	7adb      	ldrb	r3, [r3, #11]
     7aa:	2b00      	cmp	r3, #0
     7ac:	d001      	beq.n	7b2 <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     7ae:	2310      	movs	r3, #16
     7b0:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     7b2:	4641      	mov	r1, r8
     7b4:	7b0b      	ldrb	r3, [r1, #12]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d001      	beq.n	7be <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     7ba:	2320      	movs	r3, #32
     7bc:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7be:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7c0:	227f      	movs	r2, #127	; 0x7f
     7c2:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     7c4:	4393      	bics	r3, r2
     7c6:	d1fc      	bne.n	7c2 <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     7c8:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7ca:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7cc:	217f      	movs	r1, #127	; 0x7f
     7ce:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     7d0:	438b      	bics	r3, r1
     7d2:	d1fc      	bne.n	7ce <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     7d4:	7923      	ldrb	r3, [r4, #4]
     7d6:	2b04      	cmp	r3, #4
     7d8:	d005      	beq.n	7e6 <tc_init+0x19a>
     7da:	2b08      	cmp	r3, #8
     7dc:	d041      	beq.n	862 <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     7de:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     7e0:	2b00      	cmp	r3, #0
     7e2:	d157      	bne.n	894 <tc_init+0x248>
     7e4:	e024      	b.n	830 <tc_init+0x1e4>
     7e6:	217f      	movs	r1, #127	; 0x7f
     7e8:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     7ea:	438b      	bics	r3, r1
     7ec:	d1fc      	bne.n	7e8 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     7ee:	2328      	movs	r3, #40	; 0x28
     7f0:	4642      	mov	r2, r8
     7f2:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     7f4:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7f6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7f8:	227f      	movs	r2, #127	; 0x7f
     7fa:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     7fc:	4393      	bics	r3, r2
     7fe:	d1fc      	bne.n	7fa <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     800:	2329      	movs	r3, #41	; 0x29
     802:	4640      	mov	r0, r8
     804:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     806:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     808:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     80a:	227f      	movs	r2, #127	; 0x7f
     80c:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     80e:	4393      	bics	r3, r2
     810:	d1fc      	bne.n	80c <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     812:	232a      	movs	r3, #42	; 0x2a
     814:	4641      	mov	r1, r8
     816:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     818:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     81a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     81c:	227f      	movs	r2, #127	; 0x7f
     81e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     820:	4393      	bics	r3, r2
     822:	d1fc      	bne.n	81e <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     824:	232b      	movs	r3, #43	; 0x2b
     826:	4642      	mov	r2, r8
     828:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     82a:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     82c:	2000      	movs	r0, #0
     82e:	e031      	b.n	894 <tc_init+0x248>
     830:	217f      	movs	r1, #127	; 0x7f
     832:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     834:	438b      	bics	r3, r1
     836:	d1fc      	bne.n	832 <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     838:	4640      	mov	r0, r8
     83a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
     83c:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     83e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     840:	227f      	movs	r2, #127	; 0x7f
     842:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
     844:	4393      	bics	r3, r2
     846:	d1fc      	bne.n	842 <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     848:	4641      	mov	r1, r8
     84a:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     84c:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     84e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     850:	227f      	movs	r2, #127	; 0x7f
     852:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     854:	4393      	bics	r3, r2
     856:	d1fc      	bne.n	852 <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     858:	4642      	mov	r2, r8
     85a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     85c:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     85e:	2000      	movs	r0, #0
     860:	e018      	b.n	894 <tc_init+0x248>
     862:	217f      	movs	r1, #127	; 0x7f
     864:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     866:	438b      	bics	r3, r1
     868:	d1fc      	bne.n	864 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     86a:	4643      	mov	r3, r8
     86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     86e:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     870:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     872:	227f      	movs	r2, #127	; 0x7f
     874:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
     876:	4393      	bics	r3, r2
     878:	d1fc      	bne.n	874 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     87a:	4640      	mov	r0, r8
     87c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     87e:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     880:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     882:	227f      	movs	r2, #127	; 0x7f
     884:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     886:	4393      	bics	r3, r2
     888:	d1fc      	bne.n	884 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     88a:	4641      	mov	r1, r8
     88c:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     88e:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     890:	2000      	movs	r0, #0
     892:	e7ff      	b.n	894 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     894:	b007      	add	sp, #28
     896:	bc0c      	pop	{r2, r3}
     898:	4690      	mov	r8, r2
     89a:	4699      	mov	r9, r3
     89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00000615 	.word	0x00000615
     8a4:	00006830 	.word	0x00006830
     8a8:	00005879 	.word	0x00005879
     8ac:	200044ac 	.word	0x200044ac
     8b0:	00004f9d 	.word	0x00004f9d
     8b4:	40000400 	.word	0x40000400
     8b8:	00004ec1 	.word	0x00004ec1
     8bc:	00004e35 	.word	0x00004e35

000008c0 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     8c0:	6802      	ldr	r2, [r0, #0]
     8c2:	217f      	movs	r1, #127	; 0x7f
     8c4:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     8c6:	438b      	bics	r3, r1
     8c8:	d1fc      	bne.n	8c4 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     8ca:	7903      	ldrb	r3, [r0, #4]
     8cc:	2b04      	cmp	r3, #4
     8ce:	d005      	beq.n	8dc <tc_get_count_value+0x1c>
     8d0:	2b08      	cmp	r3, #8
     8d2:	d009      	beq.n	8e8 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     8d4:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     8d6:	2b00      	cmp	r3, #0
     8d8:	d108      	bne.n	8ec <tc_get_count_value+0x2c>
     8da:	e002      	b.n	8e2 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     8dc:	7c10      	ldrb	r0, [r2, #16]
     8de:	b2c0      	uxtb	r0, r0
     8e0:	e004      	b.n	8ec <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     8e2:	8a10      	ldrh	r0, [r2, #16]
     8e4:	b280      	uxth	r0, r0
     8e6:	e001      	b.n	8ec <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
     8e8:	6910      	ldr	r0, [r2, #16]
     8ea:	e7ff      	b.n	8ec <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
     8ec:	4770      	bx	lr
     8ee:	46c0      	nop			; (mov r8, r8)

000008f0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     8f0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     8f2:	6804      	ldr	r4, [r0, #0]
     8f4:	257f      	movs	r5, #127	; 0x7f
     8f6:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
     8f8:	43ab      	bics	r3, r5
     8fa:	d1fc      	bne.n	8f6 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     8fc:	7903      	ldrb	r3, [r0, #4]
     8fe:	2b04      	cmp	r3, #4
     900:	d005      	beq.n	90e <tc_set_compare_value+0x1e>
     902:	2b08      	cmp	r3, #8
     904:	d014      	beq.n	930 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     906:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     908:	2b00      	cmp	r3, #0
     90a:	d119      	bne.n	940 <tc_set_compare_value+0x50>
     90c:	e007      	b.n	91e <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     90e:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
     910:	2901      	cmp	r1, #1
     912:	d815      	bhi.n	940 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
     914:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
     916:	1861      	adds	r1, r4, r1
     918:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
     91a:	2000      	movs	r0, #0
     91c:	e010      	b.n	940 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     91e:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
     920:	2901      	cmp	r1, #1
     922:	d80d      	bhi.n	940 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
     924:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
     926:	310c      	adds	r1, #12
     928:	0049      	lsls	r1, r1, #1
     92a:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
     92c:	2000      	movs	r0, #0
     92e:	e007      	b.n	940 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     930:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
     932:	2901      	cmp	r1, #1
     934:	d804      	bhi.n	940 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
     936:	3106      	adds	r1, #6
     938:	0089      	lsls	r1, r1, #2
     93a:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
     93c:	2000      	movs	r0, #0
     93e:	e7ff      	b.n	940 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
     940:	bd30      	pop	{r4, r5, pc}
     942:	46c0      	nop			; (mov r8, r8)

00000944 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     944:	b5f0      	push	{r4, r5, r6, r7, lr}
     946:	4647      	mov	r7, r8
     948:	b480      	push	{r7}
     94a:	1c0c      	adds	r4, r1, #0
     94c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     94e:	2800      	cmp	r0, #0
     950:	d10c      	bne.n	96c <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     952:	2a00      	cmp	r2, #0
     954:	dd0d      	ble.n	972 <_read+0x2e>
     956:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     958:	4e09      	ldr	r6, [pc, #36]	; (980 <_read+0x3c>)
     95a:	4d0a      	ldr	r5, [pc, #40]	; (984 <_read+0x40>)
     95c:	6830      	ldr	r0, [r6, #0]
     95e:	1c21      	adds	r1, r4, #0
     960:	682b      	ldr	r3, [r5, #0]
     962:	4798      	blx	r3
		ptr++;
     964:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     966:	42bc      	cmp	r4, r7
     968:	d1f8      	bne.n	95c <_read+0x18>
     96a:	e004      	b.n	976 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     96c:	2001      	movs	r0, #1
     96e:	4240      	negs	r0, r0
     970:	e002      	b.n	978 <_read+0x34>
	}

	for (; len > 0; --len) {
     972:	2000      	movs	r0, #0
     974:	e000      	b.n	978 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     976:	4640      	mov	r0, r8
	}
	return nChars;
}
     978:	bc04      	pop	{r2}
     97a:	4690      	mov	r8, r2
     97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	20004378 	.word	0x20004378
     984:	20004370 	.word	0x20004370

00000988 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	4647      	mov	r7, r8
     98c:	b480      	push	{r7}
     98e:	1c0e      	adds	r6, r1, #0
     990:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     992:	3801      	subs	r0, #1
     994:	2802      	cmp	r0, #2
     996:	d810      	bhi.n	9ba <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     998:	2a00      	cmp	r2, #0
     99a:	d011      	beq.n	9c0 <_write+0x38>
     99c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     99e:	4b0d      	ldr	r3, [pc, #52]	; (9d4 <_write+0x4c>)
     9a0:	4698      	mov	r8, r3
     9a2:	4f0d      	ldr	r7, [pc, #52]	; (9d8 <_write+0x50>)
     9a4:	4643      	mov	r3, r8
     9a6:	6818      	ldr	r0, [r3, #0]
     9a8:	5d31      	ldrb	r1, [r6, r4]
     9aa:	683b      	ldr	r3, [r7, #0]
     9ac:	4798      	blx	r3
     9ae:	2800      	cmp	r0, #0
     9b0:	db08      	blt.n	9c4 <_write+0x3c>
			return -1;
		}
		++nChars;
     9b2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     9b4:	42a5      	cmp	r5, r4
     9b6:	d1f5      	bne.n	9a4 <_write+0x1c>
     9b8:	e007      	b.n	9ca <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     9ba:	2001      	movs	r0, #1
     9bc:	4240      	negs	r0, r0
     9be:	e005      	b.n	9cc <_write+0x44>
	}

	for (; len != 0; --len) {
     9c0:	2000      	movs	r0, #0
     9c2:	e003      	b.n	9cc <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     9c4:	2001      	movs	r0, #1
     9c6:	4240      	negs	r0, r0
     9c8:	e000      	b.n	9cc <_write+0x44>
		}
		++nChars;
     9ca:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     9cc:	bc04      	pop	{r2}
     9ce:	4690      	mov	r8, r2
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	20004378 	.word	0x20004378
     9d8:	20004374 	.word	0x20004374

000009dc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     9dc:	4b03      	ldr	r3, [pc, #12]	; (9ec <prvTaskExitError+0x10>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	3301      	adds	r3, #1
     9e2:	d001      	beq.n	9e8 <prvTaskExitError+0xc>
     9e4:	b672      	cpsid	i
     9e6:	e7fe      	b.n	9e6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     9e8:	b672      	cpsid	i
     9ea:	e7fe      	b.n	9ea <prvTaskExitError+0xe>
     9ec:	20000000 	.word	0x20000000

000009f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     9f0:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     9f2:	1f03      	subs	r3, r0, #4
     9f4:	2480      	movs	r4, #128	; 0x80
     9f6:	0464      	lsls	r4, r4, #17
     9f8:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     9fa:	3b04      	subs	r3, #4
     9fc:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     9fe:	3b04      	subs	r3, #4
     a00:	4902      	ldr	r1, [pc, #8]	; (a0c <pxPortInitialiseStack+0x1c>)
     a02:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     a04:	3b14      	subs	r3, #20
     a06:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
     a08:	3840      	subs	r0, #64	; 0x40
}
     a0a:	bd10      	pop	{r4, pc}
     a0c:	000009dd 	.word	0x000009dd

00000a10 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
     a10:	4770      	bx	lr
     a12:	46c0      	nop			; (mov r8, r8)

00000a14 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     a14:	2280      	movs	r2, #128	; 0x80
     a16:	0552      	lsls	r2, r2, #21
     a18:	4b03      	ldr	r3, [pc, #12]	; (a28 <vPortYield+0x14>)
     a1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
     a1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     a20:	f3bf 8f6f 	isb	sy
}
     a24:	4770      	bx	lr
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	e000ed04 	.word	0xe000ed04

00000a2c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
     a2c:	b672      	cpsid	i
    uxCriticalNesting++;
     a2e:	4b04      	ldr	r3, [pc, #16]	; (a40 <vPortEnterCritical+0x14>)
     a30:	681a      	ldr	r2, [r3, #0]
     a32:	3201      	adds	r2, #1
     a34:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
     a36:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     a3a:	f3bf 8f6f 	isb	sy
}
     a3e:	4770      	bx	lr
     a40:	20000000 	.word	0x20000000

00000a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
     a44:	4b06      	ldr	r3, [pc, #24]	; (a60 <vPortExitCritical+0x1c>)
     a46:	681b      	ldr	r3, [r3, #0]
     a48:	2b00      	cmp	r3, #0
     a4a:	d101      	bne.n	a50 <vPortExitCritical+0xc>
     a4c:	b672      	cpsid	i
     a4e:	e7fe      	b.n	a4e <vPortExitCritical+0xa>
    uxCriticalNesting--;
     a50:	3b01      	subs	r3, #1
     a52:	4a03      	ldr	r2, [pc, #12]	; (a60 <vPortExitCritical+0x1c>)
     a54:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     a56:	2b00      	cmp	r3, #0
     a58:	d100      	bne.n	a5c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     a5a:	b662      	cpsie	i
    }
}
     a5c:	4770      	bx	lr
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	20000000 	.word	0x20000000

00000a64 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     a64:	f3ef 8010 	mrs	r0, PRIMASK
     a68:	b672      	cpsid	i
     a6a:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
     a6c:	2000      	movs	r0, #0
     a6e:	46c0      	nop			; (mov r8, r8)

00000a70 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
     a70:	f380 8810 	msr	PRIMASK, r0
     a74:	4770      	bx	lr
     a76:	46c0      	nop			; (mov r8, r8)

00000a78 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     a78:	f3ef 8009 	mrs	r0, PSP
     a7c:	4b0e      	ldr	r3, [pc, #56]	; (ab8 <pxCurrentTCBConst>)
     a7e:	681a      	ldr	r2, [r3, #0]
     a80:	3820      	subs	r0, #32
     a82:	6010      	str	r0, [r2, #0]
     a84:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     a86:	4644      	mov	r4, r8
     a88:	464d      	mov	r5, r9
     a8a:	4656      	mov	r6, sl
     a8c:	465f      	mov	r7, fp
     a8e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     a90:	b508      	push	{r3, lr}
     a92:	b672      	cpsid	i
     a94:	f002 ff8c 	bl	39b0 <vTaskSwitchContext>
     a98:	b662      	cpsie	i
     a9a:	bc0c      	pop	{r2, r3}
     a9c:	6811      	ldr	r1, [r2, #0]
     a9e:	6808      	ldr	r0, [r1, #0]
     aa0:	3010      	adds	r0, #16
     aa2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     aa4:	46a0      	mov	r8, r4
     aa6:	46a9      	mov	r9, r5
     aa8:	46b2      	mov	sl, r6
     aaa:	46bb      	mov	fp, r7
     aac:	f380 8809 	msr	PSP, r0
     ab0:	3820      	subs	r0, #32
     ab2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     ab4:	4718      	bx	r3
     ab6:	46c0      	nop			; (mov r8, r8)

00000ab8 <pxCurrentTCBConst>:
     ab8:	20004238 	.word	0x20004238

00000abc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     abc:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     abe:	4b07      	ldr	r3, [pc, #28]	; (adc <SysTick_Handler+0x20>)
     ac0:	4798      	blx	r3
     ac2:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     ac4:	4b06      	ldr	r3, [pc, #24]	; (ae0 <SysTick_Handler+0x24>)
     ac6:	4798      	blx	r3
     ac8:	2800      	cmp	r0, #0
     aca:	d003      	beq.n	ad4 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     acc:	2280      	movs	r2, #128	; 0x80
     ace:	0552      	lsls	r2, r2, #21
     ad0:	4b04      	ldr	r3, [pc, #16]	; (ae4 <SysTick_Handler+0x28>)
     ad2:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     ad4:	1c20      	adds	r0, r4, #0
     ad6:	4b04      	ldr	r3, [pc, #16]	; (ae8 <SysTick_Handler+0x2c>)
     ad8:	4798      	blx	r3
}
     ada:	bd10      	pop	{r4, pc}
     adc:	00000a65 	.word	0x00000a65
     ae0:	00003731 	.word	0x00003731
     ae4:	e000ed04 	.word	0xe000ed04
     ae8:	00000a71 	.word	0x00000a71

00000aec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     aec:	b538      	push	{r3, r4, r5, lr}
     aee:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     af0:	0743      	lsls	r3, r0, #29
     af2:	d002      	beq.n	afa <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     af4:	2307      	movs	r3, #7
     af6:	439c      	bics	r4, r3
     af8:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
     afa:	4b10      	ldr	r3, [pc, #64]	; (b3c <pvPortMalloc+0x50>)
     afc:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     afe:	4b10      	ldr	r3, [pc, #64]	; (b40 <pvPortMalloc+0x54>)
     b00:	681b      	ldr	r3, [r3, #0]
     b02:	2b00      	cmp	r3, #0
     b04:	d105      	bne.n	b12 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     b06:	2307      	movs	r3, #7
     b08:	4a0e      	ldr	r2, [pc, #56]	; (b44 <pvPortMalloc+0x58>)
     b0a:	3208      	adds	r2, #8
     b0c:	439a      	bics	r2, r3
     b0e:	4b0c      	ldr	r3, [pc, #48]	; (b40 <pvPortMalloc+0x54>)
     b10:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     b12:	4b0d      	ldr	r3, [pc, #52]	; (b48 <pvPortMalloc+0x5c>)
     b14:	681b      	ldr	r3, [r3, #0]
     b16:	18e4      	adds	r4, r4, r3
     b18:	4a0c      	ldr	r2, [pc, #48]	; (b4c <pvPortMalloc+0x60>)
     b1a:	4294      	cmp	r4, r2
     b1c:	d807      	bhi.n	b2e <pvPortMalloc+0x42>
     b1e:	42a3      	cmp	r3, r4
     b20:	d207      	bcs.n	b32 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     b22:	4a07      	ldr	r2, [pc, #28]	; (b40 <pvPortMalloc+0x54>)
     b24:	6815      	ldr	r5, [r2, #0]
     b26:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     b28:	4b07      	ldr	r3, [pc, #28]	; (b48 <pvPortMalloc+0x5c>)
     b2a:	601c      	str	r4, [r3, #0]
     b2c:	e002      	b.n	b34 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     b2e:	2500      	movs	r5, #0
     b30:	e000      	b.n	b34 <pvPortMalloc+0x48>
     b32:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     b34:	4b06      	ldr	r3, [pc, #24]	; (b50 <pvPortMalloc+0x64>)
     b36:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
     b38:	1c28      	adds	r0, r5, #0
     b3a:	bd38      	pop	{r3, r4, r5, pc}
     b3c:	00003721 	.word	0x00003721
     b40:	20003b54 	.word	0x20003b54
     b44:	200000bc 	.word	0x200000bc
     b48:	200000b8 	.word	0x200000b8
     b4c:	00003a8f 	.word	0x00003a8f
     b50:	0000385d 	.word	0x0000385d

00000b54 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     b54:	2800      	cmp	r0, #0
     b56:	d001      	beq.n	b5c <vPortFree+0x8>
     b58:	b672      	cpsid	i
     b5a:	e7fe      	b.n	b5a <vPortFree+0x6>
}
     b5c:	4770      	bx	lr
     b5e:	46c0      	nop			; (mov r8, r8)

00000b60 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
     b60:	4770      	bx	lr
     b62:	46c0      	nop			; (mov r8, r8)

00000b64 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
     b64:	b538      	push	{r3, r4, r5, lr}
     b66:	1c03      	adds	r3, r0, #0
     b68:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
     b6a:	4c14      	ldr	r4, [pc, #80]	; (bbc <sal_aes_wrrd+0x58>)
     b6c:	1c60      	adds	r0, r4, #1
     b6e:	1c19      	adds	r1, r3, #0
     b70:	2210      	movs	r2, #16
     b72:	4b13      	ldr	r3, [pc, #76]	; (bc0 <sal_aes_wrrd+0x5c>)
     b74:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
     b76:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
     b78:	4b12      	ldr	r3, [pc, #72]	; (bc4 <sal_aes_wrrd+0x60>)
     b7a:	781b      	ldrb	r3, [r3, #0]
     b7c:	2b00      	cmp	r3, #0
     b7e:	d008      	beq.n	b92 <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
     b80:	2083      	movs	r0, #131	; 0x83
     b82:	490e      	ldr	r1, [pc, #56]	; (bbc <sal_aes_wrrd+0x58>)
     b84:	2212      	movs	r2, #18
     b86:	4b10      	ldr	r3, [pc, #64]	; (bc8 <sal_aes_wrrd+0x64>)
     b88:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
     b8a:	2200      	movs	r2, #0
     b8c:	4b0d      	ldr	r3, [pc, #52]	; (bc4 <sal_aes_wrrd+0x60>)
     b8e:	701a      	strb	r2, [r3, #0]
     b90:	e005      	b.n	b9e <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
     b92:	2084      	movs	r0, #132	; 0x84
     b94:	4909      	ldr	r1, [pc, #36]	; (bbc <sal_aes_wrrd+0x58>)
     b96:	3101      	adds	r1, #1
     b98:	2211      	movs	r2, #17
     b9a:	4b0b      	ldr	r3, [pc, #44]	; (bc8 <sal_aes_wrrd+0x64>)
     b9c:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
     b9e:	2d00      	cmp	r5, #0
     ba0:	d005      	beq.n	bae <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
     ba2:	1c28      	adds	r0, r5, #0
     ba4:	4905      	ldr	r1, [pc, #20]	; (bbc <sal_aes_wrrd+0x58>)
     ba6:	3101      	adds	r1, #1
     ba8:	2210      	movs	r2, #16
     baa:	4b05      	ldr	r3, [pc, #20]	; (bc0 <sal_aes_wrrd+0x5c>)
     bac:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
     bae:	4b03      	ldr	r3, [pc, #12]	; (bbc <sal_aes_wrrd+0x58>)
     bb0:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
     bb2:	2018      	movs	r0, #24
     bb4:	4b05      	ldr	r3, [pc, #20]	; (bcc <sal_aes_wrrd+0x68>)
     bb6:	4798      	blx	r3
}
     bb8:	bd38      	pop	{r3, r4, r5, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	20003b7c 	.word	0x20003b7c
     bc0:	00005879 	.word	0x00005879
     bc4:	20003b90 	.word	0x20003b90
     bc8:	000015f9 	.word	0x000015f9
     bcc:	00004995 	.word	0x00004995

00000bd0 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
     bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd2:	4647      	mov	r7, r8
     bd4:	b480      	push	{r7}
     bd6:	b084      	sub	sp, #16
     bd8:	1c05      	adds	r5, r0, #0
     bda:	1c0f      	adds	r7, r1, #0
     bdc:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
     bde:	2800      	cmp	r0, #0
     be0:	d017      	beq.n	c12 <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
     be2:	2200      	movs	r2, #0
     be4:	4b3e      	ldr	r3, [pc, #248]	; (ce0 <sal_aes_setup+0x110>)
     be6:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
     be8:	2202      	movs	r2, #2
     bea:	4b3e      	ldr	r3, [pc, #248]	; (ce4 <sal_aes_setup+0x114>)
     bec:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
     bee:	483e      	ldr	r0, [pc, #248]	; (ce8 <sal_aes_setup+0x118>)
     bf0:	1c29      	adds	r1, r5, #0
     bf2:	2210      	movs	r2, #16
     bf4:	4b3d      	ldr	r3, [pc, #244]	; (cec <sal_aes_setup+0x11c>)
     bf6:	4698      	mov	r8, r3
     bf8:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
     bfa:	4e3d      	ldr	r6, [pc, #244]	; (cf0 <sal_aes_setup+0x120>)
     bfc:	2310      	movs	r3, #16
     bfe:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
     c00:	1c70      	adds	r0, r6, #1
     c02:	1c29      	adds	r1, r5, #0
     c04:	2210      	movs	r2, #16
     c06:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
     c08:	2083      	movs	r0, #131	; 0x83
     c0a:	1c31      	adds	r1, r6, #0
     c0c:	2211      	movs	r2, #17
     c0e:	4b39      	ldr	r3, [pc, #228]	; (cf4 <sal_aes_setup+0x124>)
     c10:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
     c12:	2c00      	cmp	r4, #0
     c14:	d002      	beq.n	c1c <sal_aes_setup+0x4c>
     c16:	2c01      	cmp	r4, #1
     c18:	d012      	beq.n	c40 <sal_aes_setup+0x70>
     c1a:	e05a      	b.n	cd2 <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
     c1c:	4b31      	ldr	r3, [pc, #196]	; (ce4 <sal_aes_setup+0x114>)
     c1e:	781b      	ldrb	r3, [r3, #0]
     c20:	2b01      	cmp	r3, #1
     c22:	d13d      	bne.n	ca0 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
     c24:	4d32      	ldr	r5, [pc, #200]	; (cf0 <sal_aes_setup+0x120>)
     c26:	2310      	movs	r3, #16
     c28:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
     c2a:	1c68      	adds	r0, r5, #1
     c2c:	492e      	ldr	r1, [pc, #184]	; (ce8 <sal_aes_setup+0x118>)
     c2e:	2210      	movs	r2, #16
     c30:	4b2e      	ldr	r3, [pc, #184]	; (cec <sal_aes_setup+0x11c>)
     c32:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
     c34:	2083      	movs	r0, #131	; 0x83
     c36:	1c29      	adds	r1, r5, #0
     c38:	2211      	movs	r2, #17
     c3a:	4b2e      	ldr	r3, [pc, #184]	; (cf4 <sal_aes_setup+0x124>)
     c3c:	4798      	blx	r3
     c3e:	e02f      	b.n	ca0 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
     c40:	4b28      	ldr	r3, [pc, #160]	; (ce4 <sal_aes_setup+0x114>)
     c42:	781b      	ldrb	r3, [r3, #0]
     c44:	2b01      	cmp	r3, #1
     c46:	d02b      	beq.n	ca0 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
     c48:	2210      	movs	r2, #16
     c4a:	4b29      	ldr	r3, [pc, #164]	; (cf0 <sal_aes_setup+0x120>)
     c4c:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
     c4e:	4b24      	ldr	r3, [pc, #144]	; (ce0 <sal_aes_setup+0x110>)
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b00      	cmp	r3, #0
     c54:	d116      	bne.n	c84 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
     c56:	4d26      	ldr	r5, [pc, #152]	; (cf0 <sal_aes_setup+0x120>)
     c58:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
     c5a:	2380      	movs	r3, #128	; 0x80
     c5c:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
     c5e:	2201      	movs	r2, #1
     c60:	4b25      	ldr	r3, [pc, #148]	; (cf8 <sal_aes_setup+0x128>)
     c62:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
     c64:	4668      	mov	r0, sp
     c66:	2100      	movs	r1, #0
     c68:	4b24      	ldr	r3, [pc, #144]	; (cfc <sal_aes_setup+0x12c>)
     c6a:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
     c6c:	2310      	movs	r3, #16
     c6e:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
     c70:	2083      	movs	r0, #131	; 0x83
     c72:	1c29      	adds	r1, r5, #0
     c74:	2201      	movs	r2, #1
     c76:	4b1f      	ldr	r3, [pc, #124]	; (cf4 <sal_aes_setup+0x124>)
     c78:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
     c7a:	2084      	movs	r0, #132	; 0x84
     c7c:	4920      	ldr	r1, [pc, #128]	; (d00 <sal_aes_setup+0x130>)
     c7e:	2210      	movs	r2, #16
     c80:	4b20      	ldr	r3, [pc, #128]	; (d04 <sal_aes_setup+0x134>)
     c82:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
     c84:	4d1a      	ldr	r5, [pc, #104]	; (cf0 <sal_aes_setup+0x120>)
     c86:	1c68      	adds	r0, r5, #1
     c88:	491d      	ldr	r1, [pc, #116]	; (d00 <sal_aes_setup+0x130>)
     c8a:	2210      	movs	r2, #16
     c8c:	4b17      	ldr	r3, [pc, #92]	; (cec <sal_aes_setup+0x11c>)
     c8e:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
     c90:	2083      	movs	r0, #131	; 0x83
     c92:	1c29      	adds	r1, r5, #0
     c94:	2211      	movs	r2, #17
     c96:	4b17      	ldr	r3, [pc, #92]	; (cf4 <sal_aes_setup+0x124>)
     c98:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
     c9a:	4b11      	ldr	r3, [pc, #68]	; (ce0 <sal_aes_setup+0x110>)
     c9c:	2201      	movs	r2, #1
     c9e:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
     ca0:	4b10      	ldr	r3, [pc, #64]	; (ce4 <sal_aes_setup+0x114>)
     ca2:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
     ca4:	2f00      	cmp	r7, #0
     ca6:	d002      	beq.n	cae <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
     ca8:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
     caa:	2f02      	cmp	r7, #2
     cac:	d113      	bne.n	cd6 <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
     cae:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
     cb0:	2308      	movs	r3, #8
     cb2:	401c      	ands	r4, r3
     cb4:	013f      	lsls	r7, r7, #4
     cb6:	2370      	movs	r3, #112	; 0x70
     cb8:	401f      	ands	r7, r3
     cba:	433c      	orrs	r4, r7
     cbc:	4b0c      	ldr	r3, [pc, #48]	; (cf0 <sal_aes_setup+0x120>)
     cbe:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
     cc0:	2780      	movs	r7, #128	; 0x80
     cc2:	427f      	negs	r7, r7
     cc4:	433c      	orrs	r4, r7
     cc6:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
     cc8:	2201      	movs	r2, #1
     cca:	4b0b      	ldr	r3, [pc, #44]	; (cf8 <sal_aes_setup+0x128>)
     ccc:	701a      	strb	r2, [r3, #0]

	return (true);
     cce:	2001      	movs	r0, #1
     cd0:	e001      	b.n	cd6 <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
     cd2:	2000      	movs	r0, #0
     cd4:	e7ff      	b.n	cd6 <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
     cd6:	b004      	add	sp, #16
     cd8:	bc04      	pop	{r2}
     cda:	4690      	mov	r8, r2
     cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	20003b58 	.word	0x20003b58
     ce4:	20000004 	.word	0x20000004
     ce8:	20003b6c 	.word	0x20003b6c
     cec:	00005879 	.word	0x00005879
     cf0:	20003b7c 	.word	0x20003b7c
     cf4:	000012e5 	.word	0x000012e5
     cf8:	20003b90 	.word	0x20003b90
     cfc:	00000b65 	.word	0x00000b65
     d00:	20003b5c 	.word	0x20003b5c
     d04:	0000145d 	.word	0x0000145d

00000d08 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
     d08:	b508      	push	{r3, lr}
     d0a:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
     d0c:	2084      	movs	r0, #132	; 0x84
     d0e:	2210      	movs	r2, #16
     d10:	4b01      	ldr	r3, [pc, #4]	; (d18 <sal_aes_read+0x10>)
     d12:	4798      	blx	r3
			AES_BLOCKSIZE);
}
     d14:	bd08      	pop	{r3, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	0000145d 	.word	0x0000145d

00000d1c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
     d1c:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     d1e:	2201      	movs	r2, #1
     d20:	4b03      	ldr	r3, [pc, #12]	; (d30 <AT86RFX_ISR+0x14>)
     d22:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
     d24:	4b03      	ldr	r3, [pc, #12]	; (d34 <AT86RFX_ISR+0x18>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	2b00      	cmp	r3, #0
     d2a:	d000      	beq.n	d2e <AT86RFX_ISR+0x12>
		irq_hdl_trx();
     d2c:	4798      	blx	r3
	}
}
     d2e:	bd08      	pop	{r3, pc}
     d30:	40001800 	.word	0x40001800
     d34:	20003b94 	.word	0x20003b94

00000d38 <trx_spi_init>:

void trx_spi_init(void)
{
     d38:	b5f0      	push	{r4, r5, r6, r7, lr}
     d3a:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
     d3c:	4a35      	ldr	r2, [pc, #212]	; (e14 <trx_spi_init+0xdc>)
     d3e:	2300      	movs	r3, #0
     d40:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     d42:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
     d44:	213f      	movs	r1, #63	; 0x3f
     d46:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     d48:	4c33      	ldr	r4, [pc, #204]	; (e18 <trx_spi_init+0xe0>)
     d4a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
     d4c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     d4e:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     d50:	2201      	movs	r2, #1
     d52:	4669      	mov	r1, sp
     d54:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     d56:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     d58:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     d5a:	203f      	movs	r0, #63	; 0x3f
     d5c:	4b2f      	ldr	r3, [pc, #188]	; (e1c <trx_spi_init+0xe4>)
     d5e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     d60:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d62:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d64:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d66:	2900      	cmp	r1, #0
     d68:	d103      	bne.n	d72 <trx_spi_init+0x3a>
		return &(ports[port_index]->Group[group_index]);
     d6a:	095a      	lsrs	r2, r3, #5
     d6c:	01d2      	lsls	r2, r2, #7
     d6e:	492c      	ldr	r1, [pc, #176]	; (e20 <trx_spi_init+0xe8>)
     d70:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d72:	271f      	movs	r7, #31
     d74:	403b      	ands	r3, r7
     d76:	2401      	movs	r4, #1
     d78:	1c21      	adds	r1, r4, #0
     d7a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d7c:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     d7e:	4a29      	ldr	r2, [pc, #164]	; (e24 <trx_spi_init+0xec>)
     d80:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     d82:	2300      	movs	r3, #0
     d84:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     d86:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     d88:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     d8a:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     d8c:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     d8e:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     d90:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     d92:	2124      	movs	r1, #36	; 0x24
     d94:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     d96:	61d3      	str	r3, [r2, #28]
     d98:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
     d9a:	2380      	movs	r3, #128	; 0x80
     d9c:	025b      	lsls	r3, r3, #9
     d9e:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
     da0:	4b21      	ldr	r3, [pc, #132]	; (e28 <trx_spi_init+0xf0>)
     da2:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
     da4:	4b21      	ldr	r3, [pc, #132]	; (e2c <trx_spi_init+0xf4>)
     da6:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
     da8:	2301      	movs	r3, #1
     daa:	425b      	negs	r3, r3
     dac:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
     dae:	4b20      	ldr	r3, [pc, #128]	; (e30 <trx_spi_init+0xf8>)
     db0:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
     db2:	4b20      	ldr	r3, [pc, #128]	; (e34 <trx_spi_init+0xfc>)
     db4:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
     db6:	4e20      	ldr	r6, [pc, #128]	; (e38 <trx_spi_init+0x100>)
     db8:	1c30      	adds	r0, r6, #0
     dba:	4920      	ldr	r1, [pc, #128]	; (e3c <trx_spi_init+0x104>)
     dbc:	4b20      	ldr	r3, [pc, #128]	; (e40 <trx_spi_init+0x108>)
     dbe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     dc0:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     dc2:	1c28      	adds	r0, r5, #0
     dc4:	4b1f      	ldr	r3, [pc, #124]	; (e44 <trx_spi_init+0x10c>)
     dc6:	4798      	blx	r3
     dc8:	4007      	ands	r7, r0
     dca:	40bc      	lsls	r4, r7
     dcc:	4b1e      	ldr	r3, [pc, #120]	; (e48 <trx_spi_init+0x110>)
     dce:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     dd0:	6832      	ldr	r2, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     dd2:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     dd4:	2b00      	cmp	r3, #0
     dd6:	d1fc      	bne.n	dd2 <trx_spi_init+0x9a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     dd8:	682b      	ldr	r3, [r5, #0]
     dda:	2602      	movs	r6, #2
     ddc:	4333      	orrs	r3, r6
     dde:	602b      	str	r3, [r5, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
     de0:	ac01      	add	r4, sp, #4
     de2:	1c20      	adds	r0, r4, #0
     de4:	4b19      	ldr	r3, [pc, #100]	; (e4c <trx_spi_init+0x114>)
     de6:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
     de8:	2320      	movs	r3, #32
     dea:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
     dec:	2380      	movs	r3, #128	; 0x80
     dee:	039b      	lsls	r3, r3, #14
     df0:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
     df2:	7226      	strb	r6, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
     df4:	2301      	movs	r3, #1
     df6:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
     df8:	2200      	movs	r2, #0
     dfa:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
     dfc:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
     dfe:	2000      	movs	r0, #0
     e00:	1c21      	adds	r1, r4, #0
     e02:	4b13      	ldr	r3, [pc, #76]	; (e50 <trx_spi_init+0x118>)
     e04:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
     e06:	4813      	ldr	r0, [pc, #76]	; (e54 <trx_spi_init+0x11c>)
     e08:	2100      	movs	r1, #0
     e0a:	2200      	movs	r2, #0
     e0c:	4b12      	ldr	r3, [pc, #72]	; (e58 <trx_spi_init+0x120>)
     e0e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
     e10:	b005      	add	sp, #20
     e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e14:	20004380 	.word	0x20004380
     e18:	20004384 	.word	0x20004384
     e1c:	00004a69 	.word	0x00004a69
     e20:	41004400 	.word	0x41004400
     e24:	20004388 	.word	0x20004388
     e28:	003d0900 	.word	0x003d0900
     e2c:	00530005 	.word	0x00530005
     e30:	003e0005 	.word	0x003e0005
     e34:	00520005 	.word	0x00520005
     e38:	200043c0 	.word	0x200043c0
     e3c:	42001800 	.word	0x42001800
     e40:	000042cd 	.word	0x000042cd
     e44:	000047f1 	.word	0x000047f1
     e48:	e000e100 	.word	0xe000e100
     e4c:	0000019d 	.word	0x0000019d
     e50:	000001b1 	.word	0x000001b1
     e54:	00000d1d 	.word	0x00000d1d
     e58:	0000487d 	.word	0x0000487d

00000e5c <PhyReset>:

void PhyReset(void)
{
     e5c:	b570      	push	{r4, r5, r6, lr}
     e5e:	4b09      	ldr	r3, [pc, #36]	; (e84 <PhyReset+0x28>)
     e60:	1c1c      	adds	r4, r3, #0
     e62:	3480      	adds	r4, #128	; 0x80
     e64:	2580      	movs	r5, #128	; 0x80
     e66:	022d      	lsls	r5, r5, #8
     e68:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     e6a:	2280      	movs	r2, #128	; 0x80
     e6c:	0352      	lsls	r2, r2, #13
     e6e:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
     e70:	20a5      	movs	r0, #165	; 0xa5
     e72:	0040      	lsls	r0, r0, #1
     e74:	4e04      	ldr	r6, [pc, #16]	; (e88 <PhyReset+0x2c>)
     e76:	47b0      	blx	r6
     e78:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
     e7a:	200a      	movs	r0, #10
     e7c:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e7e:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
     e80:	bd70      	pop	{r4, r5, r6, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	41004400 	.word	0x41004400
     e88:	00004995 	.word	0x00004995

00000e8c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
     e8c:	b570      	push	{r4, r5, r6, lr}
     e8e:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e90:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     e94:	4263      	negs	r3, r4
     e96:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     e98:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     e9a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     e9e:	2200      	movs	r2, #0
     ea0:	4b33      	ldr	r3, [pc, #204]	; (f70 <trx_reg_read+0xe4>)
     ea2:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
     ea4:	4d33      	ldr	r5, [pc, #204]	; (f74 <trx_reg_read+0xe8>)
     ea6:	1c28      	adds	r0, r5, #0
     ea8:	4933      	ldr	r1, [pc, #204]	; (f78 <trx_reg_read+0xec>)
     eaa:	2201      	movs	r2, #1
     eac:	4b33      	ldr	r3, [pc, #204]	; (f7c <trx_reg_read+0xf0>)
     eae:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     eb0:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     eb2:	2101      	movs	r1, #1
     eb4:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
     eb6:	420a      	tst	r2, r1
     eb8:	d0fc      	beq.n	eb4 <trx_reg_read+0x28>
     eba:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     ebc:	07d1      	lsls	r1, r2, #31
     ebe:	d502      	bpl.n	ec6 <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ec0:	2280      	movs	r2, #128	; 0x80
     ec2:	4316      	orrs	r6, r2
     ec4:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ec6:	2102      	movs	r1, #2
     ec8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
     eca:	420a      	tst	r2, r1
     ecc:	d0fc      	beq.n	ec8 <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ece:	2104      	movs	r1, #4
     ed0:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
     ed2:	420a      	tst	r2, r1
     ed4:	d0fc      	beq.n	ed0 <trx_reg_read+0x44>
     ed6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     ed8:	0751      	lsls	r1, r2, #29
     eda:	d514      	bpl.n	f06 <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     edc:	8b5a      	ldrh	r2, [r3, #26]
     ede:	0751      	lsls	r1, r2, #29
     ee0:	d503      	bpl.n	eea <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     ee2:	8b59      	ldrh	r1, [r3, #26]
     ee4:	2204      	movs	r2, #4
     ee6:	430a      	orrs	r2, r1
     ee8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eea:	4a22      	ldr	r2, [pc, #136]	; (f74 <trx_reg_read+0xe8>)
     eec:	7992      	ldrb	r2, [r2, #6]
     eee:	2a01      	cmp	r2, #1
     ef0:	d105      	bne.n	efe <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     ef2:	6a99      	ldr	r1, [r3, #40]	; 0x28
     ef4:	05c9      	lsls	r1, r1, #23
     ef6:	0dc9      	lsrs	r1, r1, #23
     ef8:	4a21      	ldr	r2, [pc, #132]	; (f80 <trx_reg_read+0xf4>)
     efa:	8011      	strh	r1, [r2, #0]
     efc:	e003      	b.n	f06 <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     efe:	6a99      	ldr	r1, [r3, #40]	; 0x28
     f00:	b2c9      	uxtb	r1, r1
     f02:	4a1f      	ldr	r2, [pc, #124]	; (f80 <trx_reg_read+0xf4>)
     f04:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     f06:	2101      	movs	r1, #1
     f08:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
     f0a:	420a      	tst	r2, r1
     f0c:	d0fc      	beq.n	f08 <trx_reg_read+0x7c>
     f0e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     f10:	07d1      	lsls	r1, r2, #31
     f12:	d501      	bpl.n	f18 <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     f14:	2200      	movs	r2, #0
     f16:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     f18:	2102      	movs	r1, #2
     f1a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
     f1c:	420a      	tst	r2, r1
     f1e:	d0fc      	beq.n	f1a <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     f20:	2104      	movs	r1, #4
     f22:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
     f24:	420a      	tst	r2, r1
     f26:	d0fc      	beq.n	f22 <trx_reg_read+0x96>
     f28:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
     f2a:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     f2c:	0751      	lsls	r1, r2, #29
     f2e:	d510      	bpl.n	f52 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f30:	8b5a      	ldrh	r2, [r3, #26]
     f32:	0751      	lsls	r1, r2, #29
     f34:	d503      	bpl.n	f3e <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     f36:	8b59      	ldrh	r1, [r3, #26]
     f38:	2204      	movs	r2, #4
     f3a:	430a      	orrs	r2, r1
     f3c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f3e:	4a0d      	ldr	r2, [pc, #52]	; (f74 <trx_reg_read+0xe8>)
     f40:	7992      	ldrb	r2, [r2, #6]
     f42:	2a01      	cmp	r2, #1
     f44:	d103      	bne.n	f4e <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f46:	6a9d      	ldr	r5, [r3, #40]	; 0x28
     f48:	05ed      	lsls	r5, r5, #23
     f4a:	0ded      	lsrs	r5, r5, #23
     f4c:	e001      	b.n	f52 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f4e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
     f50:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
     f52:	4808      	ldr	r0, [pc, #32]	; (f74 <trx_reg_read+0xe8>)
     f54:	4908      	ldr	r1, [pc, #32]	; (f78 <trx_reg_read+0xec>)
     f56:	2200      	movs	r2, #0
     f58:	4b08      	ldr	r3, [pc, #32]	; (f7c <trx_reg_read+0xf0>)
     f5a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     f5c:	2c00      	cmp	r4, #0
     f5e:	d005      	beq.n	f6c <trx_reg_read+0xe0>
		cpu_irq_enable();
     f60:	2201      	movs	r2, #1
     f62:	4b03      	ldr	r3, [pc, #12]	; (f70 <trx_reg_read+0xe4>)
     f64:	701a      	strb	r2, [r3, #0]
     f66:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     f6a:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
     f6c:	b2e8      	uxtb	r0, r5
}
     f6e:	bd70      	pop	{r4, r5, r6, pc}
     f70:	20000014 	.word	0x20000014
     f74:	200043c0 	.word	0x200043c0
     f78:	20004384 	.word	0x20004384
     f7c:	000044e5 	.word	0x000044e5
     f80:	2000437c 	.word	0x2000437c

00000f84 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
     f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f86:	1c07      	adds	r7, r0, #0
     f88:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f8a:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     f8e:	4263      	negs	r3, r4
     f90:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     f92:	b672      	cpsid	i
     f94:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     f98:	2200      	movs	r2, #0
     f9a:	4b34      	ldr	r3, [pc, #208]	; (106c <trx_reg_write+0xe8>)
     f9c:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
     f9e:	4e34      	ldr	r6, [pc, #208]	; (1070 <trx_reg_write+0xec>)
     fa0:	1c30      	adds	r0, r6, #0
     fa2:	4934      	ldr	r1, [pc, #208]	; (1074 <trx_reg_write+0xf0>)
     fa4:	2201      	movs	r2, #1
     fa6:	4b34      	ldr	r3, [pc, #208]	; (1078 <trx_reg_write+0xf4>)
     fa8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     faa:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fac:	2101      	movs	r1, #1
     fae:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
     fb0:	420a      	tst	r2, r1
     fb2:	d0fc      	beq.n	fae <trx_reg_write+0x2a>
     fb4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     fb6:	07d1      	lsls	r1, r2, #31
     fb8:	d502      	bpl.n	fc0 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fba:	22c0      	movs	r2, #192	; 0xc0
     fbc:	4317      	orrs	r7, r2
     fbe:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     fc0:	2102      	movs	r1, #2
     fc2:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
     fc4:	420a      	tst	r2, r1
     fc6:	d0fc      	beq.n	fc2 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fc8:	2104      	movs	r1, #4
     fca:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
     fcc:	420a      	tst	r2, r1
     fce:	d0fc      	beq.n	fca <trx_reg_write+0x46>
     fd0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     fd2:	0751      	lsls	r1, r2, #29
     fd4:	d514      	bpl.n	1000 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     fd6:	8b5a      	ldrh	r2, [r3, #26]
     fd8:	0751      	lsls	r1, r2, #29
     fda:	d503      	bpl.n	fe4 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     fdc:	8b59      	ldrh	r1, [r3, #26]
     fde:	2204      	movs	r2, #4
     fe0:	430a      	orrs	r2, r1
     fe2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fe4:	4a22      	ldr	r2, [pc, #136]	; (1070 <trx_reg_write+0xec>)
     fe6:	7992      	ldrb	r2, [r2, #6]
     fe8:	2a01      	cmp	r2, #1
     fea:	d105      	bne.n	ff8 <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     fec:	6a99      	ldr	r1, [r3, #40]	; 0x28
     fee:	05c9      	lsls	r1, r1, #23
     ff0:	0dc9      	lsrs	r1, r1, #23
     ff2:	4a22      	ldr	r2, [pc, #136]	; (107c <trx_reg_write+0xf8>)
     ff4:	8011      	strh	r1, [r2, #0]
     ff6:	e003      	b.n	1000 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ff8:	6a99      	ldr	r1, [r3, #40]	; 0x28
     ffa:	b2c9      	uxtb	r1, r1
     ffc:	4a1f      	ldr	r2, [pc, #124]	; (107c <trx_reg_write+0xf8>)
     ffe:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1000:	2001      	movs	r0, #1
    1002:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    1004:	4202      	tst	r2, r0
    1006:	d0fc      	beq.n	1002 <trx_reg_write+0x7e>
    1008:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    100a:	07d1      	lsls	r1, r2, #31
    100c:	d500      	bpl.n	1010 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    100e:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1010:	2102      	movs	r1, #2
    1012:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    1014:	420a      	tst	r2, r1
    1016:	d0fc      	beq.n	1012 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1018:	2104      	movs	r1, #4
    101a:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    101c:	420a      	tst	r2, r1
    101e:	d0fc      	beq.n	101a <trx_reg_write+0x96>
    1020:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1022:	0751      	lsls	r1, r2, #29
    1024:	d514      	bpl.n	1050 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1026:	8b5a      	ldrh	r2, [r3, #26]
    1028:	0751      	lsls	r1, r2, #29
    102a:	d503      	bpl.n	1034 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    102c:	8b59      	ldrh	r1, [r3, #26]
    102e:	2204      	movs	r2, #4
    1030:	430a      	orrs	r2, r1
    1032:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1034:	4a0e      	ldr	r2, [pc, #56]	; (1070 <trx_reg_write+0xec>)
    1036:	7992      	ldrb	r2, [r2, #6]
    1038:	2a01      	cmp	r2, #1
    103a:	d105      	bne.n	1048 <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    103c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    103e:	05d2      	lsls	r2, r2, #23
    1040:	0dd2      	lsrs	r2, r2, #23
    1042:	4b0e      	ldr	r3, [pc, #56]	; (107c <trx_reg_write+0xf8>)
    1044:	801a      	strh	r2, [r3, #0]
    1046:	e003      	b.n	1050 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    104a:	b2d2      	uxtb	r2, r2
    104c:	4b0b      	ldr	r3, [pc, #44]	; (107c <trx_reg_write+0xf8>)
    104e:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    1050:	4807      	ldr	r0, [pc, #28]	; (1070 <trx_reg_write+0xec>)
    1052:	4908      	ldr	r1, [pc, #32]	; (1074 <trx_reg_write+0xf0>)
    1054:	2200      	movs	r2, #0
    1056:	4b08      	ldr	r3, [pc, #32]	; (1078 <trx_reg_write+0xf4>)
    1058:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    105a:	2c00      	cmp	r4, #0
    105c:	d005      	beq.n	106a <trx_reg_write+0xe6>
		cpu_irq_enable();
    105e:	2201      	movs	r2, #1
    1060:	4b02      	ldr	r3, [pc, #8]	; (106c <trx_reg_write+0xe8>)
    1062:	701a      	strb	r2, [r3, #0]
    1064:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1068:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    106a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    106c:	20000014 	.word	0x20000014
    1070:	200043c0 	.word	0x200043c0
    1074:	20004384 	.word	0x20004384
    1078:	000044e5 	.word	0x000044e5
    107c:	2000437c 	.word	0x2000437c

00001080 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    1080:	b5f0      	push	{r4, r5, r6, r7, lr}
    1082:	465f      	mov	r7, fp
    1084:	4656      	mov	r6, sl
    1086:	464d      	mov	r5, r9
    1088:	4644      	mov	r4, r8
    108a:	b4f0      	push	{r4, r5, r6, r7}
    108c:	b083      	sub	sp, #12
    108e:	1c06      	adds	r6, r0, #0
    1090:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1092:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    1096:	4278      	negs	r0, r7
    1098:	4178      	adcs	r0, r7
    109a:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    109c:	b672      	cpsid	i
    109e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    10a2:	2200      	movs	r2, #0
    10a4:	4b41      	ldr	r3, [pc, #260]	; (11ac <trx_frame_read+0x12c>)
    10a6:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    10a8:	4d41      	ldr	r5, [pc, #260]	; (11b0 <trx_frame_read+0x130>)
    10aa:	1c28      	adds	r0, r5, #0
    10ac:	4941      	ldr	r1, [pc, #260]	; (11b4 <trx_frame_read+0x134>)
    10ae:	2201      	movs	r2, #1
    10b0:	4b41      	ldr	r3, [pc, #260]	; (11b8 <trx_frame_read+0x138>)
    10b2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    10b4:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    10b6:	2101      	movs	r1, #1
    10b8:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    10ba:	420a      	tst	r2, r1
    10bc:	d0fc      	beq.n	10b8 <trx_frame_read+0x38>
    10be:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    10c0:	07d1      	lsls	r1, r2, #31
    10c2:	d501      	bpl.n	10c8 <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    10c4:	2220      	movs	r2, #32
    10c6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    10c8:	2102      	movs	r1, #2
    10ca:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    10cc:	420a      	tst	r2, r1
    10ce:	d0fc      	beq.n	10ca <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    10d0:	2004      	movs	r0, #4
    10d2:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    10d4:	4202      	tst	r2, r0
    10d6:	d0fc      	beq.n	10d2 <trx_frame_read+0x52>
    10d8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    10da:	0750      	lsls	r0, r2, #29
    10dc:	d50f      	bpl.n	10fe <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    10de:	8b5a      	ldrh	r2, [r3, #26]
    10e0:	0751      	lsls	r1, r2, #29
    10e2:	d503      	bpl.n	10ec <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    10e4:	8b59      	ldrh	r1, [r3, #26]
    10e6:	2204      	movs	r2, #4
    10e8:	430a      	orrs	r2, r1
    10ea:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10ec:	4a30      	ldr	r2, [pc, #192]	; (11b0 <trx_frame_read+0x130>)
    10ee:	7992      	ldrb	r2, [r2, #6]
    10f0:	2a01      	cmp	r2, #1
    10f2:	d109      	bne.n	1108 <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    10f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    10f6:	05d2      	lsls	r2, r2, #23
    10f8:	0dd2      	lsrs	r2, r2, #23
    10fa:	4b30      	ldr	r3, [pc, #192]	; (11bc <trx_frame_read+0x13c>)
    10fc:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    10fe:	1e63      	subs	r3, r4, #1
    1100:	b2db      	uxtb	r3, r3
    1102:	2c00      	cmp	r4, #0
    1104:	d105      	bne.n	1112 <trx_frame_read+0x92>
    1106:	e03c      	b.n	1182 <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    110a:	b2d2      	uxtb	r2, r2
    110c:	4b2b      	ldr	r3, [pc, #172]	; (11bc <trx_frame_read+0x13c>)
    110e:	801a      	strh	r2, [r3, #0]
    1110:	e7f5      	b.n	10fe <trx_frame_read+0x7e>
    1112:	3301      	adds	r3, #1
    1114:	199b      	adds	r3, r3, r6
    1116:	4699      	mov	r9, r3
    1118:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    111a:	4a25      	ldr	r2, [pc, #148]	; (11b0 <trx_frame_read+0x130>)
    111c:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    111e:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1120:	2300      	movs	r3, #0
    1122:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1124:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1126:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1128:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    112a:	2204      	movs	r2, #4
    112c:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    112e:	4642      	mov	r2, r8
    1130:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1132:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    1134:	4222      	tst	r2, r4
    1136:	d0fc      	beq.n	1132 <trx_frame_read+0xb2>
    1138:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    113a:	4222      	tst	r2, r4
    113c:	d001      	beq.n	1142 <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    113e:	4652      	mov	r2, sl
    1140:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1142:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    1144:	422a      	tst	r2, r5
    1146:	d0fc      	beq.n	1142 <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1148:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    114a:	420a      	tst	r2, r1
    114c:	d0fc      	beq.n	1148 <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    114e:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1150:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1152:	420a      	tst	r2, r1
    1154:	d011      	beq.n	117a <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1156:	8b5a      	ldrh	r2, [r3, #26]
    1158:	420a      	tst	r2, r1
    115a:	d004      	beq.n	1166 <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    115c:	8b5a      	ldrh	r2, [r3, #26]
    115e:	4658      	mov	r0, fp
    1160:	4302      	orrs	r2, r0
    1162:	b292      	uxth	r2, r2
    1164:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1166:	4812      	ldr	r0, [pc, #72]	; (11b0 <trx_frame_read+0x130>)
    1168:	7982      	ldrb	r2, [r0, #6]
    116a:	2a01      	cmp	r2, #1
    116c:	d103      	bne.n	1176 <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    116e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1170:	05c0      	lsls	r0, r0, #23
    1172:	0dc0      	lsrs	r0, r0, #23
    1174:	e001      	b.n	117a <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1176:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1178:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    117a:	7030      	strb	r0, [r6, #0]
		data++;
    117c:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    117e:	454e      	cmp	r6, r9
    1180:	d1d5      	bne.n	112e <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    1182:	480b      	ldr	r0, [pc, #44]	; (11b0 <trx_frame_read+0x130>)
    1184:	490b      	ldr	r1, [pc, #44]	; (11b4 <trx_frame_read+0x134>)
    1186:	2200      	movs	r2, #0
    1188:	4b0b      	ldr	r3, [pc, #44]	; (11b8 <trx_frame_read+0x138>)
    118a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    118c:	9901      	ldr	r1, [sp, #4]
    118e:	2900      	cmp	r1, #0
    1190:	d005      	beq.n	119e <trx_frame_read+0x11e>
		cpu_irq_enable();
    1192:	2201      	movs	r2, #1
    1194:	4b05      	ldr	r3, [pc, #20]	; (11ac <trx_frame_read+0x12c>)
    1196:	701a      	strb	r2, [r3, #0]
    1198:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    119c:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    119e:	b003      	add	sp, #12
    11a0:	bc3c      	pop	{r2, r3, r4, r5}
    11a2:	4690      	mov	r8, r2
    11a4:	4699      	mov	r9, r3
    11a6:	46a2      	mov	sl, r4
    11a8:	46ab      	mov	fp, r5
    11aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11ac:	20000014 	.word	0x20000014
    11b0:	200043c0 	.word	0x200043c0
    11b4:	20004384 	.word	0x20004384
    11b8:	000044e5 	.word	0x000044e5
    11bc:	2000437c 	.word	0x2000437c

000011c0 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    11c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11c2:	464f      	mov	r7, r9
    11c4:	4646      	mov	r6, r8
    11c6:	b4c0      	push	{r6, r7}
    11c8:	1c04      	adds	r4, r0, #0
    11ca:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11cc:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    11d0:	4271      	negs	r1, r6
    11d2:	4171      	adcs	r1, r6
    11d4:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    11d6:	b672      	cpsid	i
    11d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    11dc:	2200      	movs	r2, #0
    11de:	4b3c      	ldr	r3, [pc, #240]	; (12d0 <trx_frame_write+0x110>)
    11e0:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    11e2:	4f3c      	ldr	r7, [pc, #240]	; (12d4 <trx_frame_write+0x114>)
    11e4:	1c38      	adds	r0, r7, #0
    11e6:	493c      	ldr	r1, [pc, #240]	; (12d8 <trx_frame_write+0x118>)
    11e8:	2201      	movs	r2, #1
    11ea:	4b3c      	ldr	r3, [pc, #240]	; (12dc <trx_frame_write+0x11c>)
    11ec:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11ee:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    11f0:	2101      	movs	r1, #1
    11f2:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    11f4:	420a      	tst	r2, r1
    11f6:	d0fc      	beq.n	11f2 <trx_frame_write+0x32>
    11f8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    11fa:	07d1      	lsls	r1, r2, #31
    11fc:	d501      	bpl.n	1202 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    11fe:	2260      	movs	r2, #96	; 0x60
    1200:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1202:	2102      	movs	r1, #2
    1204:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    1206:	420a      	tst	r2, r1
    1208:	d0fc      	beq.n	1204 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    120a:	2104      	movs	r1, #4
    120c:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    120e:	420a      	tst	r2, r1
    1210:	d0fc      	beq.n	120c <trx_frame_write+0x4c>
    1212:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1214:	0751      	lsls	r1, r2, #29
    1216:	d50f      	bpl.n	1238 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1218:	8b5a      	ldrh	r2, [r3, #26]
    121a:	0751      	lsls	r1, r2, #29
    121c:	d503      	bpl.n	1226 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    121e:	8b59      	ldrh	r1, [r3, #26]
    1220:	2204      	movs	r2, #4
    1222:	430a      	orrs	r2, r1
    1224:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1226:	4a2b      	ldr	r2, [pc, #172]	; (12d4 <trx_frame_write+0x114>)
    1228:	7992      	ldrb	r2, [r2, #6]
    122a:	2a01      	cmp	r2, #1
    122c:	d10e      	bne.n	124c <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    122e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1230:	05c9      	lsls	r1, r1, #23
    1232:	0dc9      	lsrs	r1, r1, #23
    1234:	4a2a      	ldr	r2, [pc, #168]	; (12e0 <trx_frame_write+0x120>)
    1236:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1238:	4a26      	ldr	r2, [pc, #152]	; (12d4 <trx_frame_write+0x114>)
    123a:	7992      	ldrb	r2, [r2, #6]
    123c:	4690      	mov	r8, r2
    123e:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1240:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1242:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1244:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1246:	2204      	movs	r2, #4
    1248:	4694      	mov	ip, r2
    124a:	e02b      	b.n	12a4 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    124c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    124e:	b2c9      	uxtb	r1, r1
    1250:	4a23      	ldr	r2, [pc, #140]	; (12e0 <trx_frame_write+0x120>)
    1252:	8011      	strh	r1, [r2, #0]
    1254:	e7f0      	b.n	1238 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1256:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    1258:	423a      	tst	r2, r7
    125a:	d0fc      	beq.n	1256 <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    125c:	7831      	ldrb	r1, [r6, #0]
    125e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1260:	423a      	tst	r2, r7
    1262:	d000      	beq.n	1266 <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1264:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1266:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    1268:	4202      	tst	r2, r0
    126a:	d0fc      	beq.n	1266 <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    126c:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    126e:	4222      	tst	r2, r4
    1270:	d0fc      	beq.n	126c <trx_frame_write+0xac>
    1272:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1274:	4222      	tst	r2, r4
    1276:	d014      	beq.n	12a2 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1278:	8b5a      	ldrh	r2, [r3, #26]
    127a:	4222      	tst	r2, r4
    127c:	d004      	beq.n	1288 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    127e:	8b5a      	ldrh	r2, [r3, #26]
    1280:	4661      	mov	r1, ip
    1282:	430a      	orrs	r2, r1
    1284:	b292      	uxth	r2, r2
    1286:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1288:	4642      	mov	r2, r8
    128a:	2a01      	cmp	r2, #1
    128c:	d105      	bne.n	129a <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    128e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1290:	05d2      	lsls	r2, r2, #23
    1292:	0dd2      	lsrs	r2, r2, #23
    1294:	4912      	ldr	r1, [pc, #72]	; (12e0 <trx_frame_write+0x120>)
    1296:	800a      	strh	r2, [r1, #0]
    1298:	e003      	b.n	12a2 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    129a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    129c:	b2d2      	uxtb	r2, r2
    129e:	4910      	ldr	r1, [pc, #64]	; (12e0 <trx_frame_write+0x120>)
    12a0:	800a      	strh	r2, [r1, #0]
    12a2:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    12a4:	3d01      	subs	r5, #1
    12a6:	b2ed      	uxtb	r5, r5
    12a8:	2dff      	cmp	r5, #255	; 0xff
    12aa:	d1d4      	bne.n	1256 <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    12ac:	4809      	ldr	r0, [pc, #36]	; (12d4 <trx_frame_write+0x114>)
    12ae:	490a      	ldr	r1, [pc, #40]	; (12d8 <trx_frame_write+0x118>)
    12b0:	2200      	movs	r2, #0
    12b2:	4b0a      	ldr	r3, [pc, #40]	; (12dc <trx_frame_write+0x11c>)
    12b4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    12b6:	464a      	mov	r2, r9
    12b8:	2a00      	cmp	r2, #0
    12ba:	d005      	beq.n	12c8 <trx_frame_write+0x108>
		cpu_irq_enable();
    12bc:	2201      	movs	r2, #1
    12be:	4b04      	ldr	r3, [pc, #16]	; (12d0 <trx_frame_write+0x110>)
    12c0:	701a      	strb	r2, [r3, #0]
    12c2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    12c6:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    12c8:	bc0c      	pop	{r2, r3}
    12ca:	4690      	mov	r8, r2
    12cc:	4699      	mov	r9, r3
    12ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12d0:	20000014 	.word	0x20000014
    12d4:	200043c0 	.word	0x200043c0
    12d8:	20004384 	.word	0x20004384
    12dc:	000044e5 	.word	0x000044e5
    12e0:	2000437c 	.word	0x2000437c

000012e4 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    12e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12e6:	464f      	mov	r7, r9
    12e8:	4646      	mov	r6, r8
    12ea:	b4c0      	push	{r6, r7}
    12ec:	1c07      	adds	r7, r0, #0
    12ee:	1c0c      	adds	r4, r1, #0
    12f0:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    12f2:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    12f6:	4271      	negs	r1, r6
    12f8:	4171      	adcs	r1, r6
    12fa:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    12fc:	b672      	cpsid	i
    12fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1302:	2200      	movs	r2, #0
    1304:	4b50      	ldr	r3, [pc, #320]	; (1448 <trx_sram_write+0x164>)
    1306:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    1308:	4e50      	ldr	r6, [pc, #320]	; (144c <trx_sram_write+0x168>)
    130a:	1c30      	adds	r0, r6, #0
    130c:	4950      	ldr	r1, [pc, #320]	; (1450 <trx_sram_write+0x16c>)
    130e:	2201      	movs	r2, #1
    1310:	4b50      	ldr	r3, [pc, #320]	; (1454 <trx_sram_write+0x170>)
    1312:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1314:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1316:	2101      	movs	r1, #1
    1318:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    131a:	420a      	tst	r2, r1
    131c:	d0fc      	beq.n	1318 <trx_sram_write+0x34>
    131e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1320:	07d1      	lsls	r1, r2, #31
    1322:	d501      	bpl.n	1328 <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1324:	2240      	movs	r2, #64	; 0x40
    1326:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1328:	2102      	movs	r1, #2
    132a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    132c:	420a      	tst	r2, r1
    132e:	d0fc      	beq.n	132a <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1330:	2104      	movs	r1, #4
    1332:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1334:	420a      	tst	r2, r1
    1336:	d0fc      	beq.n	1332 <trx_sram_write+0x4e>
    1338:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    133a:	0751      	lsls	r1, r2, #29
    133c:	d514      	bpl.n	1368 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    133e:	8b5a      	ldrh	r2, [r3, #26]
    1340:	0751      	lsls	r1, r2, #29
    1342:	d503      	bpl.n	134c <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1344:	8b59      	ldrh	r1, [r3, #26]
    1346:	2204      	movs	r2, #4
    1348:	430a      	orrs	r2, r1
    134a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    134c:	4a3f      	ldr	r2, [pc, #252]	; (144c <trx_sram_write+0x168>)
    134e:	7992      	ldrb	r2, [r2, #6]
    1350:	2a01      	cmp	r2, #1
    1352:	d105      	bne.n	1360 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1354:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1356:	05c9      	lsls	r1, r1, #23
    1358:	0dc9      	lsrs	r1, r1, #23
    135a:	4a3f      	ldr	r2, [pc, #252]	; (1458 <trx_sram_write+0x174>)
    135c:	8011      	strh	r1, [r2, #0]
    135e:	e003      	b.n	1368 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1360:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1362:	b2c9      	uxtb	r1, r1
    1364:	4a3c      	ldr	r2, [pc, #240]	; (1458 <trx_sram_write+0x174>)
    1366:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1368:	2101      	movs	r1, #1
    136a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    136c:	420a      	tst	r2, r1
    136e:	d0fc      	beq.n	136a <trx_sram_write+0x86>
    1370:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1372:	07d1      	lsls	r1, r2, #31
    1374:	d500      	bpl.n	1378 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1376:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1378:	2102      	movs	r1, #2
    137a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    137c:	420a      	tst	r2, r1
    137e:	d0fc      	beq.n	137a <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1380:	2104      	movs	r1, #4
    1382:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1384:	420a      	tst	r2, r1
    1386:	d0fc      	beq.n	1382 <trx_sram_write+0x9e>
    1388:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    138a:	0751      	lsls	r1, r2, #29
    138c:	d50f      	bpl.n	13ae <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    138e:	8b5a      	ldrh	r2, [r3, #26]
    1390:	0751      	lsls	r1, r2, #29
    1392:	d503      	bpl.n	139c <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1394:	8b59      	ldrh	r1, [r3, #26]
    1396:	2204      	movs	r2, #4
    1398:	430a      	orrs	r2, r1
    139a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    139c:	4a2b      	ldr	r2, [pc, #172]	; (144c <trx_sram_write+0x168>)
    139e:	7992      	ldrb	r2, [r2, #6]
    13a0:	2a01      	cmp	r2, #1
    13a2:	d10e      	bne.n	13c2 <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    13a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    13a6:	05c9      	lsls	r1, r1, #23
    13a8:	0dc9      	lsrs	r1, r1, #23
    13aa:	4a2b      	ldr	r2, [pc, #172]	; (1458 <trx_sram_write+0x174>)
    13ac:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13ae:	4a27      	ldr	r2, [pc, #156]	; (144c <trx_sram_write+0x168>)
    13b0:	7992      	ldrb	r2, [r2, #6]
    13b2:	4690      	mov	r8, r2
    13b4:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13b6:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13b8:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13ba:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    13bc:	2204      	movs	r2, #4
    13be:	4694      	mov	ip, r2
    13c0:	e02b      	b.n	141a <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    13c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    13c4:	b2c9      	uxtb	r1, r1
    13c6:	4a24      	ldr	r2, [pc, #144]	; (1458 <trx_sram_write+0x174>)
    13c8:	8011      	strh	r1, [r2, #0]
    13ca:	e7f0      	b.n	13ae <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13cc:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    13ce:	4238      	tst	r0, r7
    13d0:	d0fc      	beq.n	13cc <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    13d2:	7832      	ldrb	r2, [r6, #0]
    13d4:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    13d6:	4238      	tst	r0, r7
    13d8:	d000      	beq.n	13dc <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    13da:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13dc:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    13de:	4208      	tst	r0, r1
    13e0:	d0fc      	beq.n	13dc <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    13e2:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    13e4:	4220      	tst	r0, r4
    13e6:	d0fc      	beq.n	13e2 <trx_sram_write+0xfe>
    13e8:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    13ea:	4220      	tst	r0, r4
    13ec:	d014      	beq.n	1418 <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    13ee:	8b58      	ldrh	r0, [r3, #26]
    13f0:	4220      	tst	r0, r4
    13f2:	d004      	beq.n	13fe <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    13f4:	8b58      	ldrh	r0, [r3, #26]
    13f6:	4662      	mov	r2, ip
    13f8:	4310      	orrs	r0, r2
    13fa:	b280      	uxth	r0, r0
    13fc:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13fe:	4642      	mov	r2, r8
    1400:	2a01      	cmp	r2, #1
    1402:	d105      	bne.n	1410 <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1404:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1406:	05c0      	lsls	r0, r0, #23
    1408:	0dc0      	lsrs	r0, r0, #23
    140a:	4a13      	ldr	r2, [pc, #76]	; (1458 <trx_sram_write+0x174>)
    140c:	8010      	strh	r0, [r2, #0]
    140e:	e003      	b.n	1418 <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1410:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1412:	b2c0      	uxtb	r0, r0
    1414:	4a10      	ldr	r2, [pc, #64]	; (1458 <trx_sram_write+0x174>)
    1416:	8010      	strh	r0, [r2, #0]
    1418:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    141a:	3d01      	subs	r5, #1
    141c:	b2ed      	uxtb	r5, r5
    141e:	2dff      	cmp	r5, #255	; 0xff
    1420:	d1d4      	bne.n	13cc <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    1422:	480a      	ldr	r0, [pc, #40]	; (144c <trx_sram_write+0x168>)
    1424:	490a      	ldr	r1, [pc, #40]	; (1450 <trx_sram_write+0x16c>)
    1426:	2200      	movs	r2, #0
    1428:	4b0a      	ldr	r3, [pc, #40]	; (1454 <trx_sram_write+0x170>)
    142a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    142c:	464b      	mov	r3, r9
    142e:	2b00      	cmp	r3, #0
    1430:	d005      	beq.n	143e <trx_sram_write+0x15a>
		cpu_irq_enable();
    1432:	2201      	movs	r2, #1
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <trx_sram_write+0x164>)
    1436:	701a      	strb	r2, [r3, #0]
    1438:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    143c:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    143e:	bc0c      	pop	{r2, r3}
    1440:	4690      	mov	r8, r2
    1442:	4699      	mov	r9, r3
    1444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	20000014 	.word	0x20000014
    144c:	200043c0 	.word	0x200043c0
    1450:	20004384 	.word	0x20004384
    1454:	000044e5 	.word	0x000044e5
    1458:	2000437c 	.word	0x2000437c

0000145c <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    145c:	b5f0      	push	{r4, r5, r6, r7, lr}
    145e:	465f      	mov	r7, fp
    1460:	4656      	mov	r6, sl
    1462:	464d      	mov	r5, r9
    1464:	4644      	mov	r4, r8
    1466:	b4f0      	push	{r4, r5, r6, r7}
    1468:	b083      	sub	sp, #12
    146a:	1c05      	adds	r5, r0, #0
    146c:	1c0e      	adds	r6, r1, #0
    146e:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    1470:	2001      	movs	r0, #1
    1472:	4b5b      	ldr	r3, [pc, #364]	; (15e0 <trx_sram_read+0x184>)
    1474:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1476:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    147a:	4279      	negs	r1, r7
    147c:	4179      	adcs	r1, r7
    147e:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1480:	b672      	cpsid	i
    1482:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1486:	2200      	movs	r2, #0
    1488:	4b56      	ldr	r3, [pc, #344]	; (15e4 <trx_sram_read+0x188>)
    148a:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    148c:	4f56      	ldr	r7, [pc, #344]	; (15e8 <trx_sram_read+0x18c>)
    148e:	1c38      	adds	r0, r7, #0
    1490:	4956      	ldr	r1, [pc, #344]	; (15ec <trx_sram_read+0x190>)
    1492:	2201      	movs	r2, #1
    1494:	4b56      	ldr	r3, [pc, #344]	; (15f0 <trx_sram_read+0x194>)
    1496:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1498:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    149a:	2101      	movs	r1, #1
    149c:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    149e:	420a      	tst	r2, r1
    14a0:	d0fc      	beq.n	149c <trx_sram_read+0x40>
    14a2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    14a4:	07d1      	lsls	r1, r2, #31
    14a6:	d501      	bpl.n	14ac <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14a8:	2200      	movs	r2, #0
    14aa:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    14ac:	2102      	movs	r1, #2
    14ae:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    14b0:	420a      	tst	r2, r1
    14b2:	d0fc      	beq.n	14ae <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14b4:	2204      	movs	r2, #4
    14b6:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    14b8:	4211      	tst	r1, r2
    14ba:	d0fc      	beq.n	14b6 <trx_sram_read+0x5a>
    14bc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    14be:	0751      	lsls	r1, r2, #29
    14c0:	d514      	bpl.n	14ec <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14c2:	8b5a      	ldrh	r2, [r3, #26]
    14c4:	0751      	lsls	r1, r2, #29
    14c6:	d503      	bpl.n	14d0 <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    14c8:	8b59      	ldrh	r1, [r3, #26]
    14ca:	2204      	movs	r2, #4
    14cc:	430a      	orrs	r2, r1
    14ce:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14d0:	4a45      	ldr	r2, [pc, #276]	; (15e8 <trx_sram_read+0x18c>)
    14d2:	7992      	ldrb	r2, [r2, #6]
    14d4:	2a01      	cmp	r2, #1
    14d6:	d105      	bne.n	14e4 <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    14da:	05c9      	lsls	r1, r1, #23
    14dc:	0dc9      	lsrs	r1, r1, #23
    14de:	4a45      	ldr	r2, [pc, #276]	; (15f4 <trx_sram_read+0x198>)
    14e0:	8011      	strh	r1, [r2, #0]
    14e2:	e003      	b.n	14ec <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    14e6:	b2c9      	uxtb	r1, r1
    14e8:	4a42      	ldr	r2, [pc, #264]	; (15f4 <trx_sram_read+0x198>)
    14ea:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14ec:	2201      	movs	r2, #1
    14ee:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    14f0:	4211      	tst	r1, r2
    14f2:	d0fc      	beq.n	14ee <trx_sram_read+0x92>
    14f4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    14f6:	07d1      	lsls	r1, r2, #31
    14f8:	d500      	bpl.n	14fc <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14fa:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    14fc:	2202      	movs	r2, #2
    14fe:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    1500:	4211      	tst	r1, r2
    1502:	d0fc      	beq.n	14fe <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1504:	2204      	movs	r2, #4
    1506:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1508:	4211      	tst	r1, r2
    150a:	d0fc      	beq.n	1506 <trx_sram_read+0xaa>
    150c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    150e:	0751      	lsls	r1, r2, #29
    1510:	d50f      	bpl.n	1532 <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1512:	8b5a      	ldrh	r2, [r3, #26]
    1514:	0751      	lsls	r1, r2, #29
    1516:	d503      	bpl.n	1520 <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1518:	8b59      	ldrh	r1, [r3, #26]
    151a:	2204      	movs	r2, #4
    151c:	430a      	orrs	r2, r1
    151e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1520:	4a31      	ldr	r2, [pc, #196]	; (15e8 <trx_sram_read+0x18c>)
    1522:	7992      	ldrb	r2, [r2, #6]
    1524:	2a01      	cmp	r2, #1
    1526:	d109      	bne.n	153c <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    152a:	05d2      	lsls	r2, r2, #23
    152c:	0dd2      	lsrs	r2, r2, #23
    152e:	4b31      	ldr	r3, [pc, #196]	; (15f4 <trx_sram_read+0x198>)
    1530:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    1532:	1e63      	subs	r3, r4, #1
    1534:	b2db      	uxtb	r3, r3
    1536:	2c00      	cmp	r4, #0
    1538:	d105      	bne.n	1546 <trx_sram_read+0xea>
    153a:	e03b      	b.n	15b4 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    153e:	b2d2      	uxtb	r2, r2
    1540:	4b2c      	ldr	r3, [pc, #176]	; (15f4 <trx_sram_read+0x198>)
    1542:	801a      	strh	r2, [r3, #0]
    1544:	e7f5      	b.n	1532 <trx_sram_read+0xd6>
    1546:	3301      	adds	r3, #1
    1548:	199b      	adds	r3, r3, r6
    154a:	4699      	mov	r9, r3
    154c:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    154e:	4a26      	ldr	r2, [pc, #152]	; (15e8 <trx_sram_read+0x18c>)
    1550:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1552:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1554:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1556:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1558:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    155a:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    155c:	2204      	movs	r2, #4
    155e:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1560:	4642      	mov	r2, r8
    1562:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1564:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    1566:	4222      	tst	r2, r4
    1568:	d0fc      	beq.n	1564 <trx_sram_read+0x108>
    156a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    156c:	4222      	tst	r2, r4
    156e:	d001      	beq.n	1574 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1570:	4652      	mov	r2, sl
    1572:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1574:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    1576:	422a      	tst	r2, r5
    1578:	d0fc      	beq.n	1574 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    157a:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    157c:	4202      	tst	r2, r0
    157e:	d0fc      	beq.n	157a <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1580:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1582:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1584:	4202      	tst	r2, r0
    1586:	d011      	beq.n	15ac <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1588:	8b5a      	ldrh	r2, [r3, #26]
    158a:	4202      	tst	r2, r0
    158c:	d004      	beq.n	1598 <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    158e:	8b5a      	ldrh	r2, [r3, #26]
    1590:	4659      	mov	r1, fp
    1592:	430a      	orrs	r2, r1
    1594:	b292      	uxth	r2, r2
    1596:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1598:	4913      	ldr	r1, [pc, #76]	; (15e8 <trx_sram_read+0x18c>)
    159a:	798a      	ldrb	r2, [r1, #6]
    159c:	2a01      	cmp	r2, #1
    159e:	d103      	bne.n	15a8 <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    15a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    15a2:	05c9      	lsls	r1, r1, #23
    15a4:	0dc9      	lsrs	r1, r1, #23
    15a6:	e001      	b.n	15ac <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    15a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    15aa:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    15ac:	7031      	strb	r1, [r6, #0]
		data++;
    15ae:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    15b0:	454e      	cmp	r6, r9
    15b2:	d1d5      	bne.n	1560 <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    15b4:	480c      	ldr	r0, [pc, #48]	; (15e8 <trx_sram_read+0x18c>)
    15b6:	490d      	ldr	r1, [pc, #52]	; (15ec <trx_sram_read+0x190>)
    15b8:	2200      	movs	r2, #0
    15ba:	4b0d      	ldr	r3, [pc, #52]	; (15f0 <trx_sram_read+0x194>)
    15bc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    15be:	9a01      	ldr	r2, [sp, #4]
    15c0:	2a00      	cmp	r2, #0
    15c2:	d005      	beq.n	15d0 <trx_sram_read+0x174>
		cpu_irq_enable();
    15c4:	2201      	movs	r2, #1
    15c6:	4b07      	ldr	r3, [pc, #28]	; (15e4 <trx_sram_read+0x188>)
    15c8:	701a      	strb	r2, [r3, #0]
    15ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    15ce:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    15d0:	b003      	add	sp, #12
    15d2:	bc3c      	pop	{r2, r3, r4, r5}
    15d4:	4690      	mov	r8, r2
    15d6:	4699      	mov	r9, r3
    15d8:	46a2      	mov	sl, r4
    15da:	46ab      	mov	fp, r5
    15dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	00004995 	.word	0x00004995
    15e4:	20000014 	.word	0x20000014
    15e8:	200043c0 	.word	0x200043c0
    15ec:	20004384 	.word	0x20004384
    15f0:	000044e5 	.word	0x000044e5
    15f4:	2000437c 	.word	0x2000437c

000015f8 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    15f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fa:	465f      	mov	r7, fp
    15fc:	4656      	mov	r6, sl
    15fe:	464d      	mov	r5, r9
    1600:	4644      	mov	r4, r8
    1602:	b4f0      	push	{r4, r5, r6, r7}
    1604:	b083      	sub	sp, #12
    1606:	1c05      	adds	r5, r0, #0
    1608:	4688      	mov	r8, r1
    160a:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    160c:	2001      	movs	r0, #1
    160e:	4b83      	ldr	r3, [pc, #524]	; (181c <trx_aes_wrrd+0x224>)
    1610:	4798      	blx	r3

	ENTER_TRX_REGION();
    1612:	2000      	movs	r0, #0
    1614:	2100      	movs	r1, #0
    1616:	4b82      	ldr	r3, [pc, #520]	; (1820 <trx_aes_wrrd+0x228>)
    1618:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    161a:	4e82      	ldr	r6, [pc, #520]	; (1824 <trx_aes_wrrd+0x22c>)
    161c:	1c30      	adds	r0, r6, #0
    161e:	4982      	ldr	r1, [pc, #520]	; (1828 <trx_aes_wrrd+0x230>)
    1620:	2201      	movs	r2, #1
    1622:	4b82      	ldr	r3, [pc, #520]	; (182c <trx_aes_wrrd+0x234>)
    1624:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1626:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1628:	2101      	movs	r1, #1
    162a:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    162c:	420a      	tst	r2, r1
    162e:	d0fc      	beq.n	162a <trx_aes_wrrd+0x32>
    1630:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1632:	07d0      	lsls	r0, r2, #31
    1634:	d501      	bpl.n	163a <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1636:	2240      	movs	r2, #64	; 0x40
    1638:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    163a:	2102      	movs	r1, #2
    163c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    163e:	420a      	tst	r2, r1
    1640:	d0fc      	beq.n	163c <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1642:	2104      	movs	r1, #4
    1644:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1646:	420a      	tst	r2, r1
    1648:	d0fc      	beq.n	1644 <trx_aes_wrrd+0x4c>
    164a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    164c:	0751      	lsls	r1, r2, #29
    164e:	d514      	bpl.n	167a <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1650:	8b5a      	ldrh	r2, [r3, #26]
    1652:	0756      	lsls	r6, r2, #29
    1654:	d503      	bpl.n	165e <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1656:	8b59      	ldrh	r1, [r3, #26]
    1658:	2204      	movs	r2, #4
    165a:	430a      	orrs	r2, r1
    165c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    165e:	4a71      	ldr	r2, [pc, #452]	; (1824 <trx_aes_wrrd+0x22c>)
    1660:	7992      	ldrb	r2, [r2, #6]
    1662:	2a01      	cmp	r2, #1
    1664:	d105      	bne.n	1672 <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1666:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1668:	05c9      	lsls	r1, r1, #23
    166a:	0dc9      	lsrs	r1, r1, #23
    166c:	4a70      	ldr	r2, [pc, #448]	; (1830 <trx_aes_wrrd+0x238>)
    166e:	8011      	strh	r1, [r2, #0]
    1670:	e003      	b.n	167a <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1672:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1674:	b2c9      	uxtb	r1, r1
    1676:	4a6e      	ldr	r2, [pc, #440]	; (1830 <trx_aes_wrrd+0x238>)
    1678:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    167a:	2101      	movs	r1, #1
    167c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    167e:	420a      	tst	r2, r1
    1680:	d0fc      	beq.n	167c <trx_aes_wrrd+0x84>
    1682:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1684:	07d0      	lsls	r0, r2, #31
    1686:	d500      	bpl.n	168a <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1688:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    168a:	2102      	movs	r1, #2
    168c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    168e:	420a      	tst	r2, r1
    1690:	d0fc      	beq.n	168c <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1692:	2204      	movs	r2, #4
    1694:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    1696:	4211      	tst	r1, r2
    1698:	d0fc      	beq.n	1694 <trx_aes_wrrd+0x9c>
    169a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    169c:	0751      	lsls	r1, r2, #29
    169e:	d514      	bpl.n	16ca <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    16a0:	8b5a      	ldrh	r2, [r3, #26]
    16a2:	0756      	lsls	r6, r2, #29
    16a4:	d503      	bpl.n	16ae <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    16a6:	8b59      	ldrh	r1, [r3, #26]
    16a8:	2204      	movs	r2, #4
    16aa:	430a      	orrs	r2, r1
    16ac:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16ae:	4a5d      	ldr	r2, [pc, #372]	; (1824 <trx_aes_wrrd+0x22c>)
    16b0:	7992      	ldrb	r2, [r2, #6]
    16b2:	2a01      	cmp	r2, #1
    16b4:	d105      	bne.n	16c2 <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    16b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    16b8:	05c9      	lsls	r1, r1, #23
    16ba:	0dc9      	lsrs	r1, r1, #23
    16bc:	4a5c      	ldr	r2, [pc, #368]	; (1830 <trx_aes_wrrd+0x238>)
    16be:	8011      	strh	r1, [r2, #0]
    16c0:	e003      	b.n	16ca <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    16c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    16c4:	b2c9      	uxtb	r1, r1
    16c6:	4a5a      	ldr	r2, [pc, #360]	; (1830 <trx_aes_wrrd+0x238>)
    16c8:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    16ca:	2201      	movs	r2, #1
    16cc:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    16ce:	4211      	tst	r1, r2
    16d0:	d0fc      	beq.n	16cc <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    16d2:	4640      	mov	r0, r8
    16d4:	7801      	ldrb	r1, [r0, #0]
    16d6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    16d8:	07d6      	lsls	r6, r2, #31
    16da:	d500      	bpl.n	16de <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    16dc:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    16de:	2202      	movs	r2, #2
    16e0:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    16e2:	4211      	tst	r1, r2
    16e4:	d0fc      	beq.n	16e0 <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    16e6:	2204      	movs	r2, #4
    16e8:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    16ea:	4211      	tst	r1, r2
    16ec:	d0fc      	beq.n	16e8 <trx_aes_wrrd+0xf0>
    16ee:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    16f0:	0750      	lsls	r0, r2, #29
    16f2:	d50f      	bpl.n	1714 <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    16f4:	8b5a      	ldrh	r2, [r3, #26]
    16f6:	0751      	lsls	r1, r2, #29
    16f8:	d503      	bpl.n	1702 <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    16fa:	8b59      	ldrh	r1, [r3, #26]
    16fc:	2204      	movs	r2, #4
    16fe:	430a      	orrs	r2, r1
    1700:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1702:	4a48      	ldr	r2, [pc, #288]	; (1824 <trx_aes_wrrd+0x22c>)
    1704:	7992      	ldrb	r2, [r2, #6]
    1706:	2a01      	cmp	r2, #1
    1708:	d108      	bne.n	171c <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    170a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    170c:	05d2      	lsls	r2, r2, #23
    170e:	0dd2      	lsrs	r2, r2, #23
    1710:	4b47      	ldr	r3, [pc, #284]	; (1830 <trx_aes_wrrd+0x238>)
    1712:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    1714:	2100      	movs	r1, #0
    1716:	2c00      	cmp	r4, #0
    1718:	d047      	beq.n	17aa <trx_aes_wrrd+0x1b2>
    171a:	e004      	b.n	1726 <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    171c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    171e:	b2d2      	uxtb	r2, r2
    1720:	4b43      	ldr	r3, [pc, #268]	; (1830 <trx_aes_wrrd+0x238>)
    1722:	801a      	strh	r2, [r3, #0]
    1724:	e7f6      	b.n	1714 <trx_aes_wrrd+0x11c>
    1726:	4645      	mov	r5, r8
    1728:	3c01      	subs	r4, #1
    172a:	b2e4      	uxtb	r4, r4
    172c:	9401      	str	r4, [sp, #4]
    172e:	1c23      	adds	r3, r4, #0
    1730:	4443      	add	r3, r8
    1732:	3301      	adds	r3, #1
    1734:	469b      	mov	fp, r3
    1736:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1738:	4b3a      	ldr	r3, [pc, #232]	; (1824 <trx_aes_wrrd+0x22c>)
    173a:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    173c:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    173e:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1740:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1742:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1744:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1746:	4656      	mov	r6, sl
    1748:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    174a:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    174c:	4206      	tst	r6, r0
    174e:	d0fc      	beq.n	174a <trx_aes_wrrd+0x152>
    1750:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    1752:	786e      	ldrb	r6, [r5, #1]
    1754:	46b3      	mov	fp, r6
    1756:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1758:	4206      	tst	r6, r0
    175a:	d001      	beq.n	1760 <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    175c:	465e      	mov	r6, fp
    175e:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1760:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    1762:	4226      	tst	r6, r4
    1764:	d0fc      	beq.n	1760 <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1766:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    1768:	4216      	tst	r6, r2
    176a:	d0fc      	beq.n	1766 <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    176c:	464e      	mov	r6, r9
    176e:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1770:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1772:	4216      	tst	r6, r2
    1774:	d011      	beq.n	179a <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1776:	8b59      	ldrh	r1, [r3, #26]
    1778:	4211      	tst	r1, r2
    177a:	d004      	beq.n	1786 <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    177c:	8b59      	ldrh	r1, [r3, #26]
    177e:	2604      	movs	r6, #4
    1780:	4331      	orrs	r1, r6
    1782:	b289      	uxth	r1, r1
    1784:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1786:	4e27      	ldr	r6, [pc, #156]	; (1824 <trx_aes_wrrd+0x22c>)
    1788:	79b1      	ldrb	r1, [r6, #6]
    178a:	2901      	cmp	r1, #1
    178c:	d103      	bne.n	1796 <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    178e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1790:	05c9      	lsls	r1, r1, #23
    1792:	0dc9      	lsrs	r1, r1, #23
    1794:	e001      	b.n	179a <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1796:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1798:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    179a:	4663      	mov	r3, ip
    179c:	7019      	strb	r1, [r3, #0]
    179e:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    17a0:	42bd      	cmp	r5, r7
    17a2:	d1d0      	bne.n	1746 <trx_aes_wrrd+0x14e>
    17a4:	9b01      	ldr	r3, [sp, #4]
    17a6:	3301      	adds	r3, #1
    17a8:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    17aa:	4b1e      	ldr	r3, [pc, #120]	; (1824 <trx_aes_wrrd+0x22c>)
    17ac:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17ae:	2001      	movs	r0, #1
    17b0:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    17b2:	4202      	tst	r2, r0
    17b4:	d0fc      	beq.n	17b0 <trx_aes_wrrd+0x1b8>
    17b6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    17b8:	07d6      	lsls	r6, r2, #31
    17ba:	d501      	bpl.n	17c0 <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    17bc:	2200      	movs	r2, #0
    17be:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    17c0:	2002      	movs	r0, #2
    17c2:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    17c4:	4202      	tst	r2, r0
    17c6:	d0fc      	beq.n	17c2 <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    17c8:	2004      	movs	r0, #4
    17ca:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    17cc:	4202      	tst	r2, r0
    17ce:	d0fc      	beq.n	17ca <trx_aes_wrrd+0x1d2>
    17d0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    17d2:	0750      	lsls	r0, r2, #29
    17d4:	d510      	bpl.n	17f8 <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    17d6:	8b5a      	ldrh	r2, [r3, #26]
    17d8:	0751      	lsls	r1, r2, #29
    17da:	d503      	bpl.n	17e4 <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    17dc:	8b59      	ldrh	r1, [r3, #26]
    17de:	2204      	movs	r2, #4
    17e0:	430a      	orrs	r2, r1
    17e2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    17e4:	4a0f      	ldr	r2, [pc, #60]	; (1824 <trx_aes_wrrd+0x22c>)
    17e6:	7992      	ldrb	r2, [r2, #6]
    17e8:	2a01      	cmp	r2, #1
    17ea:	d103      	bne.n	17f4 <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    17ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
    17ee:	05c9      	lsls	r1, r1, #23
    17f0:	0dc9      	lsrs	r1, r1, #23
    17f2:	e001      	b.n	17f8 <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    17f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    17f6:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    17f8:	4642      	mov	r2, r8
    17fa:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    17fc:	4809      	ldr	r0, [pc, #36]	; (1824 <trx_aes_wrrd+0x22c>)
    17fe:	490a      	ldr	r1, [pc, #40]	; (1828 <trx_aes_wrrd+0x230>)
    1800:	2200      	movs	r2, #0
    1802:	4b0a      	ldr	r3, [pc, #40]	; (182c <trx_aes_wrrd+0x234>)
    1804:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    1806:	2000      	movs	r0, #0
    1808:	2100      	movs	r1, #0
    180a:	4b0a      	ldr	r3, [pc, #40]	; (1834 <trx_aes_wrrd+0x23c>)
    180c:	4798      	blx	r3
}
    180e:	b003      	add	sp, #12
    1810:	bc3c      	pop	{r2, r3, r4, r5}
    1812:	4690      	mov	r8, r2
    1814:	4699      	mov	r9, r3
    1816:	46a2      	mov	sl, r4
    1818:	46ab      	mov	fp, r5
    181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    181c:	00004995 	.word	0x00004995
    1820:	000048cd 	.word	0x000048cd
    1824:	200043c0 	.word	0x200043c0
    1828:	20004384 	.word	0x20004384
    182c:	000044e5 	.word	0x000044e5
    1830:	2000437c 	.word	0x2000437c
    1834:	000048ad 	.word	0x000048ad

00001838 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    1838:	b508      	push	{r3, lr}
	tmr_cca_callback();
    183a:	4b01      	ldr	r3, [pc, #4]	; (1840 <tc_cca_callback+0x8>)
    183c:	4798      	blx	r3
}
    183e:	bd08      	pop	{r3, pc}
    1840:	00005661 	.word	0x00005661

00001844 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    1844:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    1846:	4b01      	ldr	r3, [pc, #4]	; (184c <tc_ovf_callback+0x8>)
    1848:	4798      	blx	r3
}
    184a:	bd08      	pop	{r3, pc}
    184c:	00005619 	.word	0x00005619

00001850 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    1850:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    1852:	4802      	ldr	r0, [pc, #8]	; (185c <tmr_read_count+0xc>)
    1854:	4b02      	ldr	r3, [pc, #8]	; (1860 <tmr_read_count+0x10>)
    1856:	4798      	blx	r3
    1858:	b280      	uxth	r0, r0
}
    185a:	bd08      	pop	{r3, pc}
    185c:	20004430 	.word	0x20004430
    1860:	000008c1 	.word	0x000008c1

00001864 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    1864:	4b03      	ldr	r3, [pc, #12]	; (1874 <tmr_disable_cc_interrupt+0x10>)
    1866:	2210      	movs	r2, #16
    1868:	6819      	ldr	r1, [r3, #0]
    186a:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    186c:	7e59      	ldrb	r1, [r3, #25]
    186e:	4391      	bics	r1, r2
    1870:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    1872:	4770      	bx	lr
    1874:	20004430 	.word	0x20004430

00001878 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    1878:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    187a:	4c0a      	ldr	r4, [pc, #40]	; (18a4 <tmr_enable_cc_interrupt+0x2c>)
    187c:	6820      	ldr	r0, [r4, #0]
    187e:	4b0a      	ldr	r3, [pc, #40]	; (18a8 <tmr_enable_cc_interrupt+0x30>)
    1880:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1882:	4b0a      	ldr	r3, [pc, #40]	; (18ac <tmr_enable_cc_interrupt+0x34>)
    1884:	5c1b      	ldrb	r3, [r3, r0]
    1886:	221f      	movs	r2, #31
    1888:	401a      	ands	r2, r3
    188a:	2301      	movs	r3, #1
    188c:	4093      	lsls	r3, r2
    188e:	1c1a      	adds	r2, r3, #0
    1890:	4b07      	ldr	r3, [pc, #28]	; (18b0 <tmr_enable_cc_interrupt+0x38>)
    1892:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1894:	7e62      	ldrb	r2, [r4, #25]
    1896:	2310      	movs	r3, #16
    1898:	4313      	orrs	r3, r2
    189a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    189c:	6823      	ldr	r3, [r4, #0]
    189e:	2210      	movs	r2, #16
    18a0:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    18a2:	bd10      	pop	{r4, pc}
    18a4:	20004430 	.word	0x20004430
    18a8:	00000615 	.word	0x00000615
    18ac:	00006848 	.word	0x00006848
    18b0:	e000e100 	.word	0xe000e100

000018b4 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    18b4:	b508      	push	{r3, lr}
    18b6:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    18b8:	4802      	ldr	r0, [pc, #8]	; (18c4 <tmr_write_cmpreg+0x10>)
    18ba:	2100      	movs	r1, #0
    18bc:	4b02      	ldr	r3, [pc, #8]	; (18c8 <tmr_write_cmpreg+0x14>)
    18be:	4798      	blx	r3
			(uint32_t)compare_value);
}
    18c0:	bd08      	pop	{r3, pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	20004430 	.word	0x20004430
    18c8:	000008f1 	.word	0x000008f1

000018cc <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    18cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ce:	464f      	mov	r7, r9
    18d0:	4646      	mov	r6, r8
    18d2:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    18d4:	4a2d      	ldr	r2, [pc, #180]	; (198c <tmr_init+0xc0>)
    18d6:	2300      	movs	r3, #0
    18d8:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    18da:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    18dc:	2100      	movs	r1, #0
    18de:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    18e0:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    18e2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    18e4:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    18e6:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    18e8:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    18ea:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    18ec:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    18ee:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    18f0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    18f2:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    18f4:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    18f6:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    18f8:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    18fa:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    18fc:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    18fe:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    1900:	2301      	movs	r3, #1
    1902:	425b      	negs	r3, r3
    1904:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    1906:	4c22      	ldr	r4, [pc, #136]	; (1990 <tmr_init+0xc4>)
    1908:	1c20      	adds	r0, r4, #0
    190a:	4922      	ldr	r1, [pc, #136]	; (1994 <tmr_init+0xc8>)
    190c:	4b22      	ldr	r3, [pc, #136]	; (1998 <tmr_init+0xcc>)
    190e:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    1910:	1c20      	adds	r0, r4, #0
    1912:	4922      	ldr	r1, [pc, #136]	; (199c <tmr_init+0xd0>)
    1914:	2200      	movs	r2, #0
    1916:	4d22      	ldr	r5, [pc, #136]	; (19a0 <tmr_init+0xd4>)
    1918:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    191a:	1c20      	adds	r0, r4, #0
    191c:	4921      	ldr	r1, [pc, #132]	; (19a4 <tmr_init+0xd8>)
    191e:	2202      	movs	r2, #2
    1920:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1922:	6820      	ldr	r0, [r4, #0]
    1924:	4a20      	ldr	r2, [pc, #128]	; (19a8 <tmr_init+0xdc>)
    1926:	4691      	mov	r9, r2
    1928:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    192a:	4b20      	ldr	r3, [pc, #128]	; (19ac <tmr_init+0xe0>)
    192c:	4698      	mov	r8, r3
    192e:	5c1b      	ldrb	r3, [r3, r0]
    1930:	271f      	movs	r7, #31
    1932:	403b      	ands	r3, r7
    1934:	2501      	movs	r5, #1
    1936:	1c2a      	adds	r2, r5, #0
    1938:	409a      	lsls	r2, r3
    193a:	4e1d      	ldr	r6, [pc, #116]	; (19b0 <tmr_init+0xe4>)
    193c:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    193e:	7e62      	ldrb	r2, [r4, #25]
    1940:	2301      	movs	r3, #1
    1942:	4313      	orrs	r3, r2
    1944:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1946:	6820      	ldr	r0, [r4, #0]
    1948:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    194a:	47c8      	blx	r9
    194c:	4642      	mov	r2, r8
    194e:	5c13      	ldrb	r3, [r2, r0]
    1950:	401f      	ands	r7, r3
    1952:	40bd      	lsls	r5, r7
    1954:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1956:	7e62      	ldrb	r2, [r4, #25]
    1958:	2310      	movs	r3, #16
    195a:	4313      	orrs	r3, r2
    195c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    195e:	6822      	ldr	r2, [r4, #0]
    1960:	2310      	movs	r3, #16
    1962:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1964:	217f      	movs	r1, #127	; 0x7f
    1966:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    1968:	438b      	bics	r3, r1
    196a:	d1fc      	bne.n	1966 <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    196c:	8811      	ldrh	r1, [r2, #0]
    196e:	2302      	movs	r3, #2
    1970:	430b      	orrs	r3, r1
    1972:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    1974:	2000      	movs	r0, #0
    1976:	4b0f      	ldr	r3, [pc, #60]	; (19b4 <tmr_init+0xe8>)
    1978:	4798      	blx	r3
    197a:	490f      	ldr	r1, [pc, #60]	; (19b8 <tmr_init+0xec>)
    197c:	4b0f      	ldr	r3, [pc, #60]	; (19bc <tmr_init+0xf0>)
    197e:	4798      	blx	r3
	#endif
	return timer_multiplier;
    1980:	b2c0      	uxtb	r0, r0
}
    1982:	bc0c      	pop	{r2, r3}
    1984:	4690      	mov	r8, r2
    1986:	4699      	mov	r9, r3
    1988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	200043fc 	.word	0x200043fc
    1990:	20004430 	.word	0x20004430
    1994:	42002c00 	.word	0x42002c00
    1998:	0000064d 	.word	0x0000064d
    199c:	00001845 	.word	0x00001845
    19a0:	00003cc5 	.word	0x00003cc5
    19a4:	00001839 	.word	0x00001839
    19a8:	00000615 	.word	0x00000615
    19ac:	00006848 	.word	0x00006848
    19b0:	e000e100 	.word	0xe000e100
    19b4:	00004da9 	.word	0x00004da9
    19b8:	000f4240 	.word	0x000f4240
    19bc:	00005689 	.word	0x00005689

000019c0 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    19c0:	b508      	push	{r3, lr}
	SYS_TimerInit();
    19c2:	4b04      	ldr	r3, [pc, #16]	; (19d4 <SYS_Init+0x14>)
    19c4:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    19c6:	4b04      	ldr	r3, [pc, #16]	; (19d8 <SYS_Init+0x18>)
    19c8:	4798      	blx	r3
#endif
	PHY_Init();
    19ca:	4b04      	ldr	r3, [pc, #16]	; (19dc <SYS_Init+0x1c>)
    19cc:	4798      	blx	r3
	NWK_Init();
    19ce:	4b04      	ldr	r3, [pc, #16]	; (19e0 <SYS_Init+0x20>)
    19d0:	4798      	blx	r3
}
    19d2:	bd08      	pop	{r3, pc}
    19d4:	00001a91 	.word	0x00001a91
    19d8:	00000b61 	.word	0x00000b61
    19dc:	00001bf9 	.word	0x00001bf9
    19e0:	00001e29 	.word	0x00001e29

000019e4 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    19e4:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    19e6:	4b03      	ldr	r3, [pc, #12]	; (19f4 <SYS_TaskHandler+0x10>)
    19e8:	4798      	blx	r3
	NWK_TaskHandler();
    19ea:	4b03      	ldr	r3, [pc, #12]	; (19f8 <SYS_TaskHandler+0x14>)
    19ec:	4798      	blx	r3
	SYS_TimerTaskHandler();
    19ee:	4b03      	ldr	r3, [pc, #12]	; (19fc <SYS_TaskHandler+0x18>)
    19f0:	4798      	blx	r3
}
    19f2:	bd08      	pop	{r3, pc}
    19f4:	00001d6d 	.word	0x00001d6d
    19f8:	00001eb5 	.word	0x00001eb5
    19fc:	00001b15 	.word	0x00001b15

00001a00 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    1a00:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    1a02:	4b02      	ldr	r3, [pc, #8]	; (1a0c <SYS_EncryptReq+0xc>)
    1a04:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    1a06:	4b02      	ldr	r3, [pc, #8]	; (1a10 <SYS_EncryptReq+0x10>)
    1a08:	4798      	blx	r3
}
    1a0a:	bd08      	pop	{r3, pc}
    1a0c:	00001d41 	.word	0x00001d41
    1a10:	00002a19 	.word	0x00002a19

00001a14 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1a14:	b530      	push	{r4, r5, lr}
	if (timers) {
    1a16:	4b15      	ldr	r3, [pc, #84]	; (1a6c <placeTimer+0x58>)
    1a18:	681d      	ldr	r5, [r3, #0]
    1a1a:	2d00      	cmp	r5, #0
    1a1c:	d01e      	beq.n	1a5c <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    1a1e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    1a20:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1a22:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    1a24:	428a      	cmp	r2, r1
    1a26:	d20a      	bcs.n	1a3e <placeTimer+0x2a>
    1a28:	e004      	b.n	1a34 <placeTimer+0x20>
    1a2a:	6859      	ldr	r1, [r3, #4]
    1a2c:	4291      	cmp	r1, r2
    1a2e:	d803      	bhi.n	1a38 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1a30:	1c1c      	adds	r4, r3, #0
    1a32:	e004      	b.n	1a3e <placeTimer+0x2a>
    1a34:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    1a36:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    1a38:	1a89      	subs	r1, r1, r2
    1a3a:	6059      	str	r1, [r3, #4]
				break;
    1a3c:	e003      	b.n	1a46 <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    1a3e:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1a40:	6823      	ldr	r3, [r4, #0]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d1f1      	bne.n	1a2a <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    1a46:	6042      	str	r2, [r0, #4]

		if (prev) {
    1a48:	2c00      	cmp	r4, #0
    1a4a:	d003      	beq.n	1a54 <placeTimer+0x40>
			timer->next = prev->next;
    1a4c:	6823      	ldr	r3, [r4, #0]
    1a4e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    1a50:	6020      	str	r0, [r4, #0]
    1a52:	e009      	b.n	1a68 <placeTimer+0x54>
		} else {
			timer->next = timers;
    1a54:	6005      	str	r5, [r0, #0]
			timers = timer;
    1a56:	4b05      	ldr	r3, [pc, #20]	; (1a6c <placeTimer+0x58>)
    1a58:	6018      	str	r0, [r3, #0]
    1a5a:	e005      	b.n	1a68 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    1a5c:	2300      	movs	r3, #0
    1a5e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    1a60:	6883      	ldr	r3, [r0, #8]
    1a62:	6043      	str	r3, [r0, #4]
		timers = timer;
    1a64:	4b01      	ldr	r3, [pc, #4]	; (1a6c <placeTimer+0x58>)
    1a66:	6018      	str	r0, [r3, #0]
	}
}
    1a68:	bd30      	pop	{r4, r5, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	20003b98 	.word	0x20003b98

00001a70 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    1a70:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    1a72:	4b04      	ldr	r3, [pc, #16]	; (1a84 <SYS_HwExpiry_Cb+0x14>)
    1a74:	781a      	ldrb	r2, [r3, #0]
    1a76:	3201      	adds	r2, #1
    1a78:	b2d2      	uxtb	r2, r2
    1a7a:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1a7c:	4802      	ldr	r0, [pc, #8]	; (1a88 <SYS_HwExpiry_Cb+0x18>)
    1a7e:	4b03      	ldr	r3, [pc, #12]	; (1a8c <SYS_HwExpiry_Cb+0x1c>)
    1a80:	4798      	blx	r3
}
    1a82:	bd08      	pop	{r3, pc}
    1a84:	2000444c 	.word	0x2000444c
    1a88:	00002710 	.word	0x00002710
    1a8c:	0000558d 	.word	0x0000558d

00001a90 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    1a90:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    1a92:	2400      	movs	r4, #0
    1a94:	4b06      	ldr	r3, [pc, #24]	; (1ab0 <SYS_TimerInit+0x20>)
    1a96:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    1a98:	4806      	ldr	r0, [pc, #24]	; (1ab4 <SYS_TimerInit+0x24>)
    1a9a:	4b07      	ldr	r3, [pc, #28]	; (1ab8 <SYS_TimerInit+0x28>)
    1a9c:	4798      	blx	r3
	common_tc_init();
    1a9e:	4b07      	ldr	r3, [pc, #28]	; (1abc <SYS_TimerInit+0x2c>)
    1aa0:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1aa2:	4807      	ldr	r0, [pc, #28]	; (1ac0 <SYS_TimerInit+0x30>)
    1aa4:	4b07      	ldr	r3, [pc, #28]	; (1ac4 <SYS_TimerInit+0x34>)
    1aa6:	4798      	blx	r3
	timers = NULL;
    1aa8:	4b07      	ldr	r3, [pc, #28]	; (1ac8 <SYS_TimerInit+0x38>)
    1aaa:	601c      	str	r4, [r3, #0]
}
    1aac:	bd10      	pop	{r4, pc}
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	2000444c 	.word	0x2000444c
    1ab4:	00001a71 	.word	0x00001a71
    1ab8:	0000567d 	.word	0x0000567d
    1abc:	000055f9 	.word	0x000055f9
    1ac0:	00002710 	.word	0x00002710
    1ac4:	0000558d 	.word	0x0000558d
    1ac8:	20003b98 	.word	0x20003b98

00001acc <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1acc:	4b09      	ldr	r3, [pc, #36]	; (1af4 <SYS_TimerStarted+0x28>)
    1ace:	681b      	ldr	r3, [r3, #0]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d009      	beq.n	1ae8 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    1ad4:	4283      	cmp	r3, r0
    1ad6:	d102      	bne.n	1ade <SYS_TimerStarted+0x12>
    1ad8:	e008      	b.n	1aec <SYS_TimerStarted+0x20>
    1ada:	4298      	cmp	r0, r3
    1adc:	d008      	beq.n	1af0 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d1fa      	bne.n	1ada <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1ae4:	2000      	movs	r0, #0
    1ae6:	e004      	b.n	1af2 <SYS_TimerStarted+0x26>
    1ae8:	2000      	movs	r0, #0
    1aea:	e002      	b.n	1af2 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    1aec:	2001      	movs	r0, #1
    1aee:	e000      	b.n	1af2 <SYS_TimerStarted+0x26>
    1af0:	2001      	movs	r0, #1
		}
	}
	return false;
}
    1af2:	4770      	bx	lr
    1af4:	20003b98 	.word	0x20003b98

00001af8 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1af8:	b510      	push	{r4, lr}
    1afa:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    1afc:	4b03      	ldr	r3, [pc, #12]	; (1b0c <SYS_TimerStart+0x14>)
    1afe:	4798      	blx	r3
    1b00:	2800      	cmp	r0, #0
    1b02:	d102      	bne.n	1b0a <SYS_TimerStart+0x12>
		placeTimer(timer);
    1b04:	1c20      	adds	r0, r4, #0
    1b06:	4b02      	ldr	r3, [pc, #8]	; (1b10 <SYS_TimerStart+0x18>)
    1b08:	4798      	blx	r3
	}
}
    1b0a:	bd10      	pop	{r4, pc}
    1b0c:	00001acd 	.word	0x00001acd
    1b10:	00001a15 	.word	0x00001a15

00001b14 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    1b16:	4b1a      	ldr	r3, [pc, #104]	; (1b80 <SYS_TimerTaskHandler+0x6c>)
    1b18:	781b      	ldrb	r3, [r3, #0]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d02f      	beq.n	1b7e <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b1e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1b22:	b672      	cpsid	i
    1b24:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1b28:	2100      	movs	r1, #0
    1b2a:	4b16      	ldr	r3, [pc, #88]	; (1b84 <SYS_TimerTaskHandler+0x70>)
    1b2c:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1b2e:	4a14      	ldr	r2, [pc, #80]	; (1b80 <SYS_TimerTaskHandler+0x6c>)
    1b30:	7813      	ldrb	r3, [r2, #0]
    1b32:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    1b34:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1b36:	2800      	cmp	r0, #0
    1b38:	d105      	bne.n	1b46 <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    1b3a:	2101      	movs	r1, #1
    1b3c:	4a11      	ldr	r2, [pc, #68]	; (1b84 <SYS_TimerTaskHandler+0x70>)
    1b3e:	7011      	strb	r1, [r2, #0]
    1b40:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1b44:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    1b46:	009d      	lsls	r5, r3, #2
    1b48:	18ed      	adds	r5, r5, r3
    1b4a:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    1b4c:	4e0e      	ldr	r6, [pc, #56]	; (1b88 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    1b4e:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    1b50:	e00d      	b.n	1b6e <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    1b52:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    1b54:	6823      	ldr	r3, [r4, #0]
    1b56:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    1b58:	7b23      	ldrb	r3, [r4, #12]
    1b5a:	2b01      	cmp	r3, #1
    1b5c:	d102      	bne.n	1b64 <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    1b5e:	1c20      	adds	r0, r4, #0
    1b60:	4b0a      	ldr	r3, [pc, #40]	; (1b8c <SYS_TimerTaskHandler+0x78>)
    1b62:	4798      	blx	r3
		}
		if(timer->handler)
    1b64:	6923      	ldr	r3, [r4, #16]
    1b66:	2b00      	cmp	r3, #0
    1b68:	d001      	beq.n	1b6e <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    1b6a:	1c20      	adds	r0, r4, #0
    1b6c:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    1b6e:	6834      	ldr	r4, [r6, #0]
    1b70:	2c00      	cmp	r4, #0
    1b72:	d004      	beq.n	1b7e <SYS_TimerTaskHandler+0x6a>
    1b74:	6863      	ldr	r3, [r4, #4]
    1b76:	429d      	cmp	r5, r3
    1b78:	d2eb      	bcs.n	1b52 <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    1b7a:	1b5d      	subs	r5, r3, r5
    1b7c:	6065      	str	r5, [r4, #4]
	}
}
    1b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b80:	2000444c 	.word	0x2000444c
    1b84:	20000014 	.word	0x20000014
    1b88:	20003b98 	.word	0x20003b98
    1b8c:	00001a15 	.word	0x00001a15

00001b90 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    1b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b92:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1b94:	4f0b      	ldr	r7, [pc, #44]	; (1bc4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1b96:	4e0c      	ldr	r6, [pc, #48]	; (1bc8 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1b98:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1b9a:	2002      	movs	r0, #2
    1b9c:	2103      	movs	r1, #3
    1b9e:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1ba0:	2001      	movs	r0, #1
    1ba2:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1ba4:	4028      	ands	r0, r5
    1ba6:	2808      	cmp	r0, #8
    1ba8:	d1f7      	bne.n	1b9a <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1baa:	4f06      	ldr	r7, [pc, #24]	; (1bc4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1bac:	4e06      	ldr	r6, [pc, #24]	; (1bc8 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1bae:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1bb0:	2002      	movs	r0, #2
    1bb2:	1c21      	adds	r1, r4, #0
    1bb4:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1bb6:	2001      	movs	r0, #1
    1bb8:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1bba:	4028      	ands	r0, r5
    1bbc:	4284      	cmp	r4, r0
    1bbe:	d1f7      	bne.n	1bb0 <phyTrxSetState+0x20>
}
    1bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	00000f85 	.word	0x00000f85
    1bc8:	00000e8d 	.word	0x00000e8d

00001bcc <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    1bcc:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    1bce:	2008      	movs	r0, #8
    1bd0:	4b06      	ldr	r3, [pc, #24]	; (1bec <phySetRxState+0x20>)
    1bd2:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1bd4:	200f      	movs	r0, #15
    1bd6:	4b06      	ldr	r3, [pc, #24]	; (1bf0 <phySetRxState+0x24>)
    1bd8:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    1bda:	4b06      	ldr	r3, [pc, #24]	; (1bf4 <phySetRxState+0x28>)
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	2b00      	cmp	r3, #0
    1be0:	d002      	beq.n	1be8 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    1be2:	2016      	movs	r0, #22
    1be4:	4b01      	ldr	r3, [pc, #4]	; (1bec <phySetRxState+0x20>)
    1be6:	4798      	blx	r3
	}
}
    1be8:	bd08      	pop	{r3, pc}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	00001b91 	.word	0x00001b91
    1bf0:	00000e8d 	.word	0x00000e8d
    1bf4:	20003c1d 	.word	0x20003c1d

00001bf8 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    1bf8:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    1bfa:	4b0e      	ldr	r3, [pc, #56]	; (1c34 <PHY_Init+0x3c>)
    1bfc:	4798      	blx	r3
	PhyReset();
    1bfe:	4b0e      	ldr	r3, [pc, #56]	; (1c38 <PHY_Init+0x40>)
    1c00:	4798      	blx	r3
	phyRxState = false;
    1c02:	2200      	movs	r2, #0
    1c04:	4b0d      	ldr	r3, [pc, #52]	; (1c3c <PHY_Init+0x44>)
    1c06:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    1c08:	2201      	movs	r2, #1
    1c0a:	4b0d      	ldr	r3, [pc, #52]	; (1c40 <PHY_Init+0x48>)
    1c0c:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c0e:	4e0d      	ldr	r6, [pc, #52]	; (1c44 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c10:	4d0d      	ldr	r5, [pc, #52]	; (1c48 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1c12:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c14:	2002      	movs	r0, #2
    1c16:	2108      	movs	r1, #8
    1c18:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c1a:	2001      	movs	r0, #1
    1c1c:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1c1e:	4020      	ands	r0, r4
    1c20:	2808      	cmp	r0, #8
    1c22:	d1f7      	bne.n	1c14 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c24:	2004      	movs	r0, #4
    1c26:	212e      	movs	r1, #46	; 0x2e
    1c28:	4c06      	ldr	r4, [pc, #24]	; (1c44 <PHY_Init+0x4c>)
    1c2a:	47a0      	blx	r4
    1c2c:	200c      	movs	r0, #12
    1c2e:	2180      	movs	r1, #128	; 0x80
    1c30:	47a0      	blx	r4
	phyWriteRegister(TRX_CTRL_1_REG,
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG, (1 << RX_SAFE_MODE));
}
    1c32:	bd70      	pop	{r4, r5, r6, pc}
    1c34:	00000d39 	.word	0x00000d39
    1c38:	00000e5d 	.word	0x00000e5d
    1c3c:	20003c1d 	.word	0x20003c1d
    1c40:	20003c1c 	.word	0x20003c1c
    1c44:	00000f85 	.word	0x00000f85
    1c48:	00000e8d 	.word	0x00000e8d

00001c4c <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    1c4c:	b508      	push	{r3, lr}
	phyRxState = rx;
    1c4e:	4b02      	ldr	r3, [pc, #8]	; (1c58 <PHY_SetRxState+0xc>)
    1c50:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    1c52:	4b02      	ldr	r3, [pc, #8]	; (1c5c <PHY_SetRxState+0x10>)
    1c54:	4798      	blx	r3
}
    1c56:	bd08      	pop	{r3, pc}
    1c58:	20003c1d 	.word	0x20003c1d
    1c5c:	00001bcd 	.word	0x00001bcd

00001c60 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    1c60:	b510      	push	{r4, lr}
    1c62:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1c64:	2008      	movs	r0, #8
    1c66:	4b05      	ldr	r3, [pc, #20]	; (1c7c <PHY_SetChannel+0x1c>)
    1c68:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    1c6a:	231f      	movs	r3, #31
    1c6c:	1c01      	adds	r1, r0, #0
    1c6e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    1c70:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c72:	b2e1      	uxtb	r1, r4
    1c74:	2008      	movs	r0, #8
    1c76:	4b02      	ldr	r3, [pc, #8]	; (1c80 <PHY_SetChannel+0x20>)
    1c78:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    1c7a:	bd10      	pop	{r4, pc}
    1c7c:	00000e8d 	.word	0x00000e8d
    1c80:	00000f85 	.word	0x00000f85

00001c84 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    1c84:	b530      	push	{r4, r5, lr}
    1c86:	b083      	sub	sp, #12
    1c88:	466c      	mov	r4, sp
    1c8a:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1c8c:	b2c1      	uxtb	r1, r0
    1c8e:	2022      	movs	r0, #34	; 0x22
    1c90:	4d03      	ldr	r5, [pc, #12]	; (1ca0 <PHY_SetPanId+0x1c>)
    1c92:	47a8      	blx	r5
    1c94:	79e1      	ldrb	r1, [r4, #7]
    1c96:	2023      	movs	r0, #35	; 0x23
    1c98:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    1c9a:	b003      	add	sp, #12
    1c9c:	bd30      	pop	{r4, r5, pc}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	00000f85 	.word	0x00000f85

00001ca4 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    1ca4:	b570      	push	{r4, r5, r6, lr}
    1ca6:	b082      	sub	sp, #8
    1ca8:	466d      	mov	r5, sp
    1caa:	80e8      	strh	r0, [r5, #6]
    1cac:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    1cae:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1cb0:	2020      	movs	r0, #32
    1cb2:	1c31      	adds	r1, r6, #0
    1cb4:	4c05      	ldr	r4, [pc, #20]	; (1ccc <PHY_SetShortAddr+0x28>)
    1cb6:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    1cb8:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1cba:	2021      	movs	r0, #33	; 0x21
    1cbc:	1c29      	adds	r1, r5, #0
    1cbe:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    1cc0:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1cc2:	b2f1      	uxtb	r1, r6
    1cc4:	202d      	movs	r0, #45	; 0x2d
    1cc6:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    1cc8:	b002      	add	sp, #8
    1cca:	bd70      	pop	{r4, r5, r6, pc}
    1ccc:	00000f85 	.word	0x00000f85

00001cd0 <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    1cd0:	b510      	push	{r4, lr}
    1cd2:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1cd4:	2005      	movs	r0, #5
    1cd6:	4b05      	ldr	r3, [pc, #20]	; (1cec <PHY_SetTxPower+0x1c>)
    1cd8:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    1cda:	230f      	movs	r3, #15
    1cdc:	1c01      	adds	r1, r0, #0
    1cde:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    1ce0:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1ce2:	b2e1      	uxtb	r1, r4
    1ce4:	2005      	movs	r0, #5
    1ce6:	4b02      	ldr	r3, [pc, #8]	; (1cf0 <PHY_SetTxPower+0x20>)
    1ce8:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    1cea:	bd10      	pop	{r4, pc}
    1cec:	00000e8d 	.word	0x00000e8d
    1cf0:	00000f85 	.word	0x00000f85

00001cf4 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    1cf4:	b510      	push	{r4, lr}
    1cf6:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1cf8:	2019      	movs	r0, #25
    1cfa:	4b0c      	ldr	r3, [pc, #48]	; (1d2c <PHY_DataReq+0x38>)
    1cfc:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1cfe:	200f      	movs	r0, #15
    1d00:	4b0b      	ldr	r3, [pc, #44]	; (1d30 <PHY_DataReq+0x3c>)
    1d02:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    1d04:	7821      	ldrb	r1, [r4, #0]
    1d06:	1c8b      	adds	r3, r1, #2
    1d08:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    1d0a:	3101      	adds	r1, #1
    1d0c:	b2c9      	uxtb	r1, r1
    1d0e:	1c20      	adds	r0, r4, #0
    1d10:	4b08      	ldr	r3, [pc, #32]	; (1d34 <PHY_DataReq+0x40>)
    1d12:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    1d14:	2203      	movs	r2, #3
    1d16:	4b08      	ldr	r3, [pc, #32]	; (1d38 <PHY_DataReq+0x44>)
    1d18:	701a      	strb	r2, [r3, #0]
    1d1a:	4b08      	ldr	r3, [pc, #32]	; (1d3c <PHY_DataReq+0x48>)
    1d1c:	2280      	movs	r2, #128	; 0x80
    1d1e:	0352      	lsls	r2, r2, #13
    1d20:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d26:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    1d28:	bd10      	pop	{r4, pc}
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	00001b91 	.word	0x00001b91
    1d30:	00000e8d 	.word	0x00000e8d
    1d34:	000011c1 	.word	0x000011c1
    1d38:	20003c1c 	.word	0x20003c1c
    1d3c:	41004400 	.word	0x41004400

00001d40 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    1d40:	b510      	push	{r4, lr}
    1d42:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    1d44:	1c08      	adds	r0, r1, #0
    1d46:	2100      	movs	r1, #0
    1d48:	2200      	movs	r2, #0
    1d4a:	4b05      	ldr	r3, [pc, #20]	; (1d60 <PHY_EncryptReq+0x20>)
    1d4c:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    1d4e:	1c20      	adds	r0, r4, #0
    1d50:	2100      	movs	r1, #0
    1d52:	4b04      	ldr	r3, [pc, #16]	; (1d64 <PHY_EncryptReq+0x24>)
    1d54:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    1d56:	1c20      	adds	r0, r4, #0
    1d58:	4b03      	ldr	r3, [pc, #12]	; (1d68 <PHY_EncryptReq+0x28>)
    1d5a:	4798      	blx	r3
}
    1d5c:	bd10      	pop	{r4, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	00000bd1 	.word	0x00000bd1
    1d64:	00000b65 	.word	0x00000b65
    1d68:	00000d09 	.word	0x00000d09

00001d6c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d6e:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    1d70:	4b26      	ldr	r3, [pc, #152]	; (1e0c <PHY_TaskHandler+0xa0>)
    1d72:	781b      	ldrb	r3, [r3, #0]
    1d74:	2b02      	cmp	r3, #2
    1d76:	d046      	beq.n	1e06 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1d78:	200f      	movs	r0, #15
    1d7a:	4b25      	ldr	r3, [pc, #148]	; (1e10 <PHY_TaskHandler+0xa4>)
    1d7c:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    1d7e:	0703      	lsls	r3, r0, #28
    1d80:	d541      	bpl.n	1e06 <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    1d82:	4b22      	ldr	r3, [pc, #136]	; (1e0c <PHY_TaskHandler+0xa0>)
    1d84:	781b      	ldrb	r3, [r3, #0]
    1d86:	2b01      	cmp	r3, #1
    1d88:	d124      	bne.n	1dd4 <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1d8a:	2007      	movs	r0, #7
    1d8c:	4b20      	ldr	r3, [pc, #128]	; (1e10 <PHY_TaskHandler+0xa4>)
    1d8e:	4798      	blx	r3
    1d90:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    1d92:	466c      	mov	r4, sp
    1d94:	3407      	adds	r4, #7
    1d96:	1c20      	adds	r0, r4, #0
    1d98:	2101      	movs	r1, #1
    1d9a:	4e1e      	ldr	r6, [pc, #120]	; (1e14 <PHY_TaskHandler+0xa8>)
    1d9c:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    1d9e:	4d1e      	ldr	r5, [pc, #120]	; (1e18 <PHY_TaskHandler+0xac>)
    1da0:	7821      	ldrb	r1, [r4, #0]
    1da2:	3102      	adds	r1, #2
    1da4:	b2c9      	uxtb	r1, r1
    1da6:	1c28      	adds	r0, r5, #0
    1da8:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    1daa:	a802      	add	r0, sp, #8
    1dac:	1c6a      	adds	r2, r5, #1
    1dae:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    1db0:	7822      	ldrb	r2, [r4, #0]
    1db2:	1e91      	subs	r1, r2, #2
    1db4:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    1db6:	18ad      	adds	r5, r5, r2
    1db8:	786a      	ldrb	r2, [r5, #1]
    1dba:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    1dbc:	3f5b      	subs	r7, #91	; 0x5b
    1dbe:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    1dc0:	4b16      	ldr	r3, [pc, #88]	; (1e1c <PHY_TaskHandler+0xb0>)
    1dc2:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1dc4:	4d12      	ldr	r5, [pc, #72]	; (1e10 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    1dc6:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1dc8:	2001      	movs	r0, #1
    1dca:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    1dcc:	4020      	ands	r0, r4
    1dce:	2816      	cmp	r0, #22
    1dd0:	d1fa      	bne.n	1dc8 <PHY_TaskHandler+0x5c>
    1dd2:	e018      	b.n	1e06 <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    1dd4:	2b03      	cmp	r3, #3
    1dd6:	d116      	bne.n	1e06 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1dd8:	2002      	movs	r0, #2
    1dda:	4b0d      	ldr	r3, [pc, #52]	; (1e10 <PHY_TaskHandler+0xa4>)
    1ddc:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    1dde:	0944      	lsrs	r4, r0, #5
    1de0:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    1de2:	2c00      	cmp	r4, #0
    1de4:	d007      	beq.n	1df6 <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1de6:	2c03      	cmp	r4, #3
    1de8:	d004      	beq.n	1df4 <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    1dea:	3c05      	subs	r4, #5
    1dec:	1e63      	subs	r3, r4, #1
    1dee:	419c      	sbcs	r4, r3
    1df0:	3402      	adds	r4, #2
    1df2:	e000      	b.n	1df6 <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1df4:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    1df6:	4b0a      	ldr	r3, [pc, #40]	; (1e20 <PHY_TaskHandler+0xb4>)
    1df8:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    1dfa:	2201      	movs	r2, #1
    1dfc:	4b03      	ldr	r3, [pc, #12]	; (1e0c <PHY_TaskHandler+0xa0>)
    1dfe:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    1e00:	1c20      	adds	r0, r4, #0
    1e02:	4b08      	ldr	r3, [pc, #32]	; (1e24 <PHY_TaskHandler+0xb8>)
    1e04:	4798      	blx	r3
		}
	}
}
    1e06:	b005      	add	sp, #20
    1e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	20003c1c 	.word	0x20003c1c
    1e10:	00000e8d 	.word	0x00000e8d
    1e14:	00001081 	.word	0x00001081
    1e18:	20003b9c 	.word	0x20003b9c
    1e1c:	000025b1 	.word	0x000025b1
    1e20:	00001bcd 	.word	0x00001bcd
    1e24:	00002ec9 	.word	0x00002ec9

00001e28 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    1e28:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    1e2a:	490d      	ldr	r1, [pc, #52]	; (1e60 <NWK_Init+0x38>)
    1e2c:	2300      	movs	r3, #0
    1e2e:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    1e30:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    1e32:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    1e34:	2258      	movs	r2, #88	; 0x58
    1e36:	528b      	strh	r3, [r1, r2]
    1e38:	1c0b      	adds	r3, r1, #0
    1e3a:	3308      	adds	r3, #8
    1e3c:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    1e3e:	2200      	movs	r2, #0
    1e40:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    1e42:	428b      	cmp	r3, r1
    1e44:	d1fc      	bne.n	1e40 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    1e46:	4b07      	ldr	r3, [pc, #28]	; (1e64 <NWK_Init+0x3c>)
    1e48:	4798      	blx	r3
	nwkRxInit();
    1e4a:	4b07      	ldr	r3, [pc, #28]	; (1e68 <NWK_Init+0x40>)
    1e4c:	4798      	blx	r3
	nwkFrameInit();
    1e4e:	4b07      	ldr	r3, [pc, #28]	; (1e6c <NWK_Init+0x44>)
    1e50:	4798      	blx	r3
	nwkDataReqInit();
    1e52:	4b07      	ldr	r3, [pc, #28]	; (1e70 <NWK_Init+0x48>)
    1e54:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    1e56:	4b07      	ldr	r3, [pc, #28]	; (1e74 <NWK_Init+0x4c>)
    1e58:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    1e5a:	4b07      	ldr	r3, [pc, #28]	; (1e78 <NWK_Init+0x50>)
    1e5c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    1e5e:	bd08      	pop	{r3, pc}
    1e60:	20004450 	.word	0x20004450
    1e64:	00002d05 	.word	0x00002d05
    1e68:	00002571 	.word	0x00002571
    1e6c:	0000209d 	.word	0x0000209d
    1e70:	00001f19 	.word	0x00001f19
    1e74:	00002191 	.word	0x00002191
    1e78:	000029d1 	.word	0x000029d1

00001e7c <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    1e7c:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    1e7e:	4b02      	ldr	r3, [pc, #8]	; (1e88 <NWK_SetAddr+0xc>)
    1e80:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    1e82:	4b02      	ldr	r3, [pc, #8]	; (1e8c <NWK_SetAddr+0x10>)
    1e84:	4798      	blx	r3
}
    1e86:	bd08      	pop	{r3, pc}
    1e88:	20004450 	.word	0x20004450
    1e8c:	00001ca5 	.word	0x00001ca5

00001e90 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    1e90:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    1e92:	4b02      	ldr	r3, [pc, #8]	; (1e9c <NWK_SetPanId+0xc>)
    1e94:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    1e96:	4b02      	ldr	r3, [pc, #8]	; (1ea0 <NWK_SetPanId+0x10>)
    1e98:	4798      	blx	r3
}
    1e9a:	bd08      	pop	{r3, pc}
    1e9c:	20004450 	.word	0x20004450
    1ea0:	00001c85 	.word	0x00001c85

00001ea4 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    1ea4:	3002      	adds	r0, #2
    1ea6:	0080      	lsls	r0, r0, #2
    1ea8:	4b01      	ldr	r3, [pc, #4]	; (1eb0 <NWK_OpenEndpoint+0xc>)
    1eaa:	50c1      	str	r1, [r0, r3]
}
    1eac:	4770      	bx	lr
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	20004450 	.word	0x20004450

00001eb4 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    1eb4:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    1eb6:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <NWK_TaskHandler+0x14>)
    1eb8:	4798      	blx	r3
	nwkTxTaskHandler();
    1eba:	4b04      	ldr	r3, [pc, #16]	; (1ecc <NWK_TaskHandler+0x18>)
    1ebc:	4798      	blx	r3
	nwkDataReqTaskHandler();
    1ebe:	4b04      	ldr	r3, [pc, #16]	; (1ed0 <NWK_TaskHandler+0x1c>)
    1ec0:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    1ec2:	4b04      	ldr	r3, [pc, #16]	; (1ed4 <NWK_TaskHandler+0x20>)
    1ec4:	4798      	blx	r3
#endif
}
    1ec6:	bd08      	pop	{r3, pc}
    1ec8:	0000260d 	.word	0x0000260d
    1ecc:	00002f09 	.word	0x00002f09
    1ed0:	00001f59 	.word	0x00001f59
    1ed4:	00002ac5 	.word	0x00002ac5

00001ed8 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    1ed8:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1eda:	4b0d      	ldr	r3, [pc, #52]	; (1f10 <nwkDataReqTxConf+0x38>)
    1edc:	681b      	ldr	r3, [r3, #0]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d012      	beq.n	1f08 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    1ee2:	685a      	ldr	r2, [r3, #4]
    1ee4:	4282      	cmp	r2, r0
    1ee6:	d10c      	bne.n	1f02 <nwkDataReqTxConf+0x2a>
    1ee8:	e002      	b.n	1ef0 <nwkDataReqTxConf+0x18>
    1eea:	685a      	ldr	r2, [r3, #4]
    1eec:	4282      	cmp	r2, r0
    1eee:	d108      	bne.n	1f02 <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    1ef0:	2285      	movs	r2, #133	; 0x85
    1ef2:	5c82      	ldrb	r2, [r0, r2]
    1ef4:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    1ef6:	2288      	movs	r2, #136	; 0x88
    1ef8:	5c82      	ldrb	r2, [r0, r2]
    1efa:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1efc:	2202      	movs	r2, #2
    1efe:	721a      	strb	r2, [r3, #8]
			break;
    1f00:	e002      	b.n	1f08 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	2b00      	cmp	r3, #0
    1f06:	d1f0      	bne.n	1eea <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    1f08:	4b02      	ldr	r3, [pc, #8]	; (1f14 <nwkDataReqTxConf+0x3c>)
    1f0a:	4798      	blx	r3
}
    1f0c:	bd08      	pop	{r3, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	20003c20 	.word	0x20003c20
    1f14:	00002121 	.word	0x00002121

00001f18 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    1f18:	2200      	movs	r2, #0
    1f1a:	4b01      	ldr	r3, [pc, #4]	; (1f20 <nwkDataReqInit+0x8>)
    1f1c:	601a      	str	r2, [r3, #0]
}
    1f1e:	4770      	bx	lr
    1f20:	20003c20 	.word	0x20003c20

00001f24 <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    1f24:	2300      	movs	r3, #0
    1f26:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    1f28:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    1f2a:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    1f2c:	4a08      	ldr	r2, [pc, #32]	; (1f50 <NWK_DataReq+0x2c>)
    1f2e:	2358      	movs	r3, #88	; 0x58
    1f30:	5ad1      	ldrh	r1, [r2, r3]
    1f32:	3101      	adds	r1, #1
    1f34:	52d1      	strh	r1, [r2, r3]

	if (NULL == nwkDataReqQueue) {
    1f36:	4b07      	ldr	r3, [pc, #28]	; (1f54 <NWK_DataReq+0x30>)
    1f38:	681b      	ldr	r3, [r3, #0]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d103      	bne.n	1f46 <NWK_DataReq+0x22>
		req->next = NULL;
    1f3e:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    1f40:	4b04      	ldr	r3, [pc, #16]	; (1f54 <NWK_DataReq+0x30>)
    1f42:	6018      	str	r0, [r3, #0]
    1f44:	e002      	b.n	1f4c <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    1f46:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    1f48:	4b02      	ldr	r3, [pc, #8]	; (1f54 <NWK_DataReq+0x30>)
    1f4a:	6018      	str	r0, [r3, #0]
	}
}
    1f4c:	4770      	bx	lr
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	20004450 	.word	0x20004450
    1f54:	20003c20 	.word	0x20003c20

00001f58 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    1f58:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1f5a:	4b4a      	ldr	r3, [pc, #296]	; (2084 <STACK_SIZE+0x84>)
    1f5c:	681a      	ldr	r2, [r3, #0]
    1f5e:	2a00      	cmp	r2, #0
    1f60:	d100      	bne.n	1f64 <nwkDataReqTaskHandler+0xc>
    1f62:	e08d      	b.n	2080 <STACK_SIZE+0x80>
    1f64:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    1f66:	7a23      	ldrb	r3, [r4, #8]
    1f68:	2b00      	cmp	r3, #0
    1f6a:	d002      	beq.n	1f72 <nwkDataReqTaskHandler+0x1a>
    1f6c:	2b02      	cmp	r3, #2
    1f6e:	d06d      	beq.n	204c <STACK_SIZE+0x4c>
    1f70:	e082      	b.n	2078 <STACK_SIZE+0x78>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    1f72:	4b45      	ldr	r3, [pc, #276]	; (2088 <STACK_SIZE+0x88>)
    1f74:	4798      	blx	r3
    1f76:	1e05      	subs	r5, r0, #0
    1f78:	d103      	bne.n	1f82 <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1f7a:	2302      	movs	r3, #2
    1f7c:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    1f7e:	7723      	strb	r3, [r4, #28]
    1f80:	e07e      	b.n	2080 <STACK_SIZE+0x80>
		return;
	}

	req->frame = frame;
    1f82:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1f84:	2201      	movs	r2, #1
    1f86:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    1f88:	4b40      	ldr	r3, [pc, #256]	; (208c <STACK_SIZE+0x8c>)
    1f8a:	2189      	movs	r1, #137	; 0x89
    1f8c:	5443      	strb	r3, [r0, r1]
    1f8e:	0a18      	lsrs	r0, r3, #8
    1f90:	218a      	movs	r1, #138	; 0x8a
    1f92:	5468      	strb	r0, [r5, r1]
    1f94:	0c18      	lsrs	r0, r3, #16
    1f96:	218b      	movs	r1, #139	; 0x8b
    1f98:	5468      	strb	r0, [r5, r1]
    1f9a:	0e1b      	lsrs	r3, r3, #24
    1f9c:	218c      	movs	r1, #140	; 0x8c
    1f9e:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    1fa0:	7ba0      	ldrb	r0, [r4, #14]
    1fa2:	0880      	lsrs	r0, r0, #2
    1fa4:	2301      	movs	r3, #1
    1fa6:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    1fa8:	2188      	movs	r1, #136	; 0x88
    1faa:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    1fac:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    1fae:	4019      	ands	r1, r3
    1fb0:	7ae8      	ldrb	r0, [r5, #11]
    1fb2:	4390      	bics	r0, r2
    1fb4:	1c02      	adds	r2, r0, #0
    1fb6:	430a      	orrs	r2, r1
    1fb8:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    1fba:	7ba1      	ldrb	r1, [r4, #14]
    1fbc:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    1fbe:	4019      	ands	r1, r3
    1fc0:	0089      	lsls	r1, r1, #2
    1fc2:	b2d2      	uxtb	r2, r2
    1fc4:	2004      	movs	r0, #4
    1fc6:	4382      	bics	r2, r0
    1fc8:	430a      	orrs	r2, r1
    1fca:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    1fcc:	7ba2      	ldrb	r2, [r4, #14]
    1fce:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    1fd0:	4013      	ands	r3, r2
    1fd2:	005a      	lsls	r2, r3, #1
    1fd4:	7aeb      	ldrb	r3, [r5, #11]
    1fd6:	2102      	movs	r1, #2
    1fd8:	438b      	bics	r3, r1
    1fda:	4313      	orrs	r3, r2
    1fdc:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1fde:	4b2c      	ldr	r3, [pc, #176]	; (2090 <STACK_SIZE+0x90>)
    1fe0:	791a      	ldrb	r2, [r3, #4]
    1fe2:	3201      	adds	r2, #1
    1fe4:	b2d2      	uxtb	r2, r2
    1fe6:	711a      	strb	r2, [r3, #4]
    1fe8:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    1fea:	781a      	ldrb	r2, [r3, #0]
    1fec:	736a      	strb	r2, [r5, #13]
    1fee:	785b      	ldrb	r3, [r3, #1]
    1ff0:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    1ff2:	8963      	ldrh	r3, [r4, #10]
    1ff4:	7aa2      	ldrb	r2, [r4, #10]
    1ff6:	73ea      	strb	r2, [r5, #15]
    1ff8:	0a1b      	lsrs	r3, r3, #8
    1ffa:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    1ffc:	7b61      	ldrb	r1, [r4, #13]
    1ffe:	230f      	movs	r3, #15
    2000:	4019      	ands	r1, r3
    2002:	7c6a      	ldrb	r2, [r5, #17]
    2004:	200f      	movs	r0, #15
    2006:	4382      	bics	r2, r0
    2008:	430a      	orrs	r2, r1
    200a:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    200c:	7b22      	ldrb	r2, [r4, #12]
    200e:	0112      	lsls	r2, r2, #4
    2010:	7c69      	ldrb	r1, [r5, #17]
    2012:	400b      	ands	r3, r1
    2014:	4313      	orrs	r3, r2
    2016:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    2018:	2381      	movs	r3, #129	; 0x81
    201a:	5ceb      	ldrb	r3, [r5, r3]
    201c:	2282      	movs	r2, #130	; 0x82
    201e:	5ca8      	ldrb	r0, [r5, r2]
    2020:	0200      	lsls	r0, r0, #8
    2022:	4318      	orrs	r0, r3
    2024:	2383      	movs	r3, #131	; 0x83
    2026:	5ceb      	ldrb	r3, [r5, r3]
    2028:	041b      	lsls	r3, r3, #16
    202a:	4318      	orrs	r0, r3
    202c:	2384      	movs	r3, #132	; 0x84
    202e:	5ceb      	ldrb	r3, [r5, r3]
    2030:	061b      	lsls	r3, r3, #24
    2032:	4318      	orrs	r0, r3
    2034:	7d22      	ldrb	r2, [r4, #20]
    2036:	6921      	ldr	r1, [r4, #16]
    2038:	4b16      	ldr	r3, [pc, #88]	; (2094 <STACK_SIZE+0x94>)
    203a:	4798      	blx	r3
	frame->size += req->size;
    203c:	7d22      	ldrb	r2, [r4, #20]
    203e:	786b      	ldrb	r3, [r5, #1]
    2040:	18d3      	adds	r3, r2, r3
    2042:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    2044:	1c28      	adds	r0, r5, #0
    2046:	4b14      	ldr	r3, [pc, #80]	; (2098 <STACK_SIZE+0x98>)
    2048:	4798      	blx	r3
    204a:	e019      	b.n	2080 <STACK_SIZE+0x80>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    204c:	4294      	cmp	r4, r2
    204e:	d103      	bne.n	2058 <STACK_SIZE+0x58>
		nwkDataReqQueue = nwkDataReqQueue->next;
    2050:	4b0c      	ldr	r3, [pc, #48]	; (2084 <STACK_SIZE+0x84>)
    2052:	6822      	ldr	r2, [r4, #0]
    2054:	601a      	str	r2, [r3, #0]
    2056:	e006      	b.n	2066 <STACK_SIZE+0x66>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    2058:	6813      	ldr	r3, [r2, #0]
    205a:	429c      	cmp	r4, r3
    205c:	d001      	beq.n	2062 <STACK_SIZE+0x62>
			prev = prev->next;
    205e:	1c1a      	adds	r2, r3, #0
    2060:	e7fa      	b.n	2058 <STACK_SIZE+0x58>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    2062:	6823      	ldr	r3, [r4, #0]
    2064:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    2066:	4a0a      	ldr	r2, [pc, #40]	; (2090 <STACK_SIZE+0x90>)
    2068:	2358      	movs	r3, #88	; 0x58
    206a:	5ad1      	ldrh	r1, [r2, r3]
    206c:	3901      	subs	r1, #1
    206e:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    2070:	69a3      	ldr	r3, [r4, #24]
    2072:	1c20      	adds	r0, r4, #0
    2074:	4798      	blx	r3
    2076:	e003      	b.n	2080 <STACK_SIZE+0x80>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2078:	6824      	ldr	r4, [r4, #0]
    207a:	2c00      	cmp	r4, #0
    207c:	d000      	beq.n	2080 <STACK_SIZE+0x80>
    207e:	e772      	b.n	1f66 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    2080:	bd38      	pop	{r3, r4, r5, pc}
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	20003c20 	.word	0x20003c20
    2088:	000020b1 	.word	0x000020b1
    208c:	00001ed9 	.word	0x00001ed9
    2090:	20004450 	.word	0x20004450
    2094:	00005879 	.word	0x00005879
    2098:	00002d39 	.word	0x00002d39

0000209c <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    209c:	4b03      	ldr	r3, [pc, #12]	; (20ac <nwkFrameInit+0x10>)
    209e:	2200      	movs	r2, #0
    20a0:	701a      	strb	r2, [r3, #0]
    20a2:	218d      	movs	r1, #141	; 0x8d
    20a4:	545a      	strb	r2, [r3, r1]
    20a6:	0049      	lsls	r1, r1, #1
    20a8:	545a      	strb	r2, [r3, r1]
	}
}
    20aa:	4770      	bx	lr
    20ac:	20003c24 	.word	0x20003c24

000020b0 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    20b0:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    20b2:	4b18      	ldr	r3, [pc, #96]	; (2114 <nwkFrameAlloc+0x64>)
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d00e      	beq.n	20d8 <nwkFrameAlloc+0x28>
    20ba:	238d      	movs	r3, #141	; 0x8d
    20bc:	4a15      	ldr	r2, [pc, #84]	; (2114 <nwkFrameAlloc+0x64>)
    20be:	5cd3      	ldrb	r3, [r2, r3]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d007      	beq.n	20d4 <nwkFrameAlloc+0x24>
    20c4:	238d      	movs	r3, #141	; 0x8d
    20c6:	005b      	lsls	r3, r3, #1
    20c8:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    20ca:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    20cc:	2b00      	cmp	r3, #0
    20ce:	d11f      	bne.n	2110 <nwkFrameAlloc+0x60>
    20d0:	2302      	movs	r3, #2
    20d2:	e002      	b.n	20da <nwkFrameAlloc+0x2a>
    20d4:	2301      	movs	r3, #1
    20d6:	e000      	b.n	20da <nwkFrameAlloc+0x2a>
    20d8:	2300      	movs	r3, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    20da:	4e0e      	ldr	r6, [pc, #56]	; (2114 <nwkFrameAlloc+0x64>)
    20dc:	258d      	movs	r5, #141	; 0x8d
    20de:	435d      	muls	r5, r3
    20e0:	1974      	adds	r4, r6, r5
    20e2:	1c20      	adds	r0, r4, #0
    20e4:	2100      	movs	r1, #0
    20e6:	228d      	movs	r2, #141	; 0x8d
    20e8:	4b0b      	ldr	r3, [pc, #44]	; (2118 <nwkFrameAlloc+0x68>)
    20ea:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    20ec:	2310      	movs	r3, #16
    20ee:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    20f0:	1c23      	adds	r3, r4, #0
    20f2:	3380      	adds	r3, #128	; 0x80
    20f4:	1c22      	adds	r2, r4, #0
    20f6:	3212      	adds	r2, #18
    20f8:	705a      	strb	r2, [r3, #1]
    20fa:	0a11      	lsrs	r1, r2, #8
    20fc:	7099      	strb	r1, [r3, #2]
    20fe:	0c11      	lsrs	r1, r2, #16
    2100:	70d9      	strb	r1, [r3, #3]
    2102:	0e12      	lsrs	r2, r2, #24
    2104:	711a      	strb	r2, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    2106:	4a05      	ldr	r2, [pc, #20]	; (211c <nwkFrameAlloc+0x6c>)
    2108:	2358      	movs	r3, #88	; 0x58
    210a:	5ad1      	ldrh	r1, [r2, r3]
    210c:	3101      	adds	r1, #1
    210e:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    2110:	1c20      	adds	r0, r4, #0
    2112:	bd70      	pop	{r4, r5, r6, pc}
    2114:	20003c24 	.word	0x20003c24
    2118:	0000588b 	.word	0x0000588b
    211c:	20004450 	.word	0x20004450

00002120 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2120:	2300      	movs	r3, #0
    2122:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2124:	4a02      	ldr	r2, [pc, #8]	; (2130 <nwkFrameFree+0x10>)
    2126:	2358      	movs	r3, #88	; 0x58
    2128:	5ad1      	ldrh	r1, [r2, r3]
    212a:	3901      	subs	r1, #1
    212c:	52d1      	strh	r1, [r2, r3]
}
    212e:	4770      	bx	lr
    2130:	20004450 	.word	0x20004450

00002134 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2134:	2800      	cmp	r0, #0
    2136:	d006      	beq.n	2146 <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2138:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    213a:	4b0c      	ldr	r3, [pc, #48]	; (216c <nwkFrameNext+0x38>)
    213c:	33a8      	adds	r3, #168	; 0xa8
    213e:	33ff      	adds	r3, #255	; 0xff
    2140:	4298      	cmp	r0, r3
    2142:	d301      	bcc.n	2148 <nwkFrameNext+0x14>
    2144:	e00f      	b.n	2166 <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    2146:	4809      	ldr	r0, [pc, #36]	; (216c <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2148:	7803      	ldrb	r3, [r0, #0]
    214a:	2b00      	cmp	r3, #0
    214c:	d10c      	bne.n	2168 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    214e:	4a07      	ldr	r2, [pc, #28]	; (216c <nwkFrameNext+0x38>)
    2150:	32a8      	adds	r2, #168	; 0xa8
    2152:	32ff      	adds	r2, #255	; 0xff
    2154:	e002      	b.n	215c <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2156:	7803      	ldrb	r3, [r0, #0]
    2158:	2b00      	cmp	r3, #0
    215a:	d105      	bne.n	2168 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    215c:	308d      	adds	r0, #141	; 0x8d
    215e:	4290      	cmp	r0, r2
    2160:	d3f9      	bcc.n	2156 <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    2162:	2000      	movs	r0, #0
    2164:	e000      	b.n	2168 <nwkFrameNext+0x34>
    2166:	2000      	movs	r0, #0
}
    2168:	4770      	bx	lr
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	20003c24 	.word	0x20003c24

00002170 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    2170:	2200      	movs	r2, #0
    2172:	2385      	movs	r3, #133	; 0x85
    2174:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    2176:	4b05      	ldr	r3, [pc, #20]	; (218c <nwkFrameCommandInit+0x1c>)
    2178:	791a      	ldrb	r2, [r3, #4]
    217a:	3201      	adds	r2, #1
    217c:	b2d2      	uxtb	r2, r2
    217e:	711a      	strb	r2, [r3, #4]
    2180:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    2182:	781a      	ldrb	r2, [r3, #0]
    2184:	7342      	strb	r2, [r0, #13]
    2186:	785b      	ldrb	r3, [r3, #1]
    2188:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    218a:	4770      	bx	lr
    218c:	20004450 	.word	0x20004450

00002190 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2190:	b5f0      	push	{r4, r5, r6, r7, lr}
    2192:	4a09      	ldr	r2, [pc, #36]	; (21b8 <nwkRouteInit+0x28>)
    2194:	3202      	adds	r2, #2
    2196:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2198:	2701      	movs	r7, #1
    219a:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    219c:	4806      	ldr	r0, [pc, #24]	; (21b8 <nwkRouteInit+0x28>)
    219e:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    21a0:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    21a2:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    21a4:	00d9      	lsls	r1, r3, #3
    21a6:	5c0c      	ldrb	r4, [r1, r0]
    21a8:	43b4      	bics	r4, r6
    21aa:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    21ac:	7115      	strb	r5, [r2, #4]
    21ae:	3301      	adds	r3, #1
    21b0:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    21b2:	2b64      	cmp	r3, #100	; 0x64
    21b4:	d1f5      	bne.n	21a2 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    21b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21b8:	20003dcc 	.word	0x20003dcc

000021bc <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    21bc:	b570      	push	{r4, r5, r6, lr}
    21be:	4a0b      	ldr	r2, [pc, #44]	; (21ec <NWK_RouteFindEntry+0x30>)
    21c0:	3202      	adds	r2, #2
    21c2:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    21c4:	4e09      	ldr	r6, [pc, #36]	; (21ec <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    21c6:	8814      	ldrh	r4, [r2, #0]
    21c8:	4284      	cmp	r4, r0
    21ca:	d109      	bne.n	21e0 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    21cc:	00dc      	lsls	r4, r3, #3
    21ce:	5da4      	ldrb	r4, [r4, r6]
    21d0:	07a4      	lsls	r4, r4, #30
    21d2:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    21d4:	428c      	cmp	r4, r1
    21d6:	d103      	bne.n	21e0 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    21d8:	00dd      	lsls	r5, r3, #3
    21da:	4804      	ldr	r0, [pc, #16]	; (21ec <NWK_RouteFindEntry+0x30>)
    21dc:	1940      	adds	r0, r0, r5
    21de:	e004      	b.n	21ea <NWK_RouteFindEntry+0x2e>
    21e0:	3301      	adds	r3, #1
    21e2:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    21e4:	2b64      	cmp	r3, #100	; 0x64
    21e6:	d1ee      	bne.n	21c6 <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    21e8:	2000      	movs	r0, #0
}
    21ea:	bd70      	pop	{r4, r5, r6, pc}
    21ec:	20003dcc 	.word	0x20003dcc

000021f0 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    21f0:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    21f2:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    21f4:	4810      	ldr	r0, [pc, #64]	; (2238 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    21f6:	24c8      	movs	r4, #200	; 0xc8
    21f8:	00a4      	lsls	r4, r4, #2
    21fa:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    21fc:	7803      	ldrb	r3, [r0, #0]
    21fe:	07dc      	lsls	r4, r3, #31
    2200:	d40b      	bmi.n	221a <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    2202:	7983      	ldrb	r3, [r0, #6]
    2204:	2b00      	cmp	r3, #0
    2206:	d00c      	beq.n	2222 <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    2208:	2a00      	cmp	r2, #0
    220a:	d003      	beq.n	2214 <NWK_RouteNewEntry+0x24>
    220c:	7994      	ldrb	r4, [r2, #6]
    220e:	429c      	cmp	r4, r3
    2210:	d802      	bhi.n	2218 <NWK_RouteNewEntry+0x28>
    2212:	e002      	b.n	221a <NWK_RouteNewEntry+0x2a>
    2214:	1c02      	adds	r2, r0, #0
    2216:	e000      	b.n	221a <NWK_RouteNewEntry+0x2a>
    2218:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    221a:	3008      	adds	r0, #8
    221c:	4288      	cmp	r0, r1
    221e:	d1ed      	bne.n	21fc <NWK_RouteNewEntry+0xc>
    2220:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    2222:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2224:	2202      	movs	r2, #2
    2226:	4393      	bics	r3, r2
    2228:	220f      	movs	r2, #15
    222a:	4013      	ands	r3, r2
    222c:	2230      	movs	r2, #48	; 0x30
    222e:	4313      	orrs	r3, r2
    2230:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2232:	2380      	movs	r3, #128	; 0x80
    2234:	7183      	strb	r3, [r0, #6]

	return entry;
}
    2236:	bd10      	pop	{r4, pc}
    2238:	20003dcc 	.word	0x20003dcc

0000223c <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    223c:	7803      	ldrb	r3, [r0, #0]
    223e:	07da      	lsls	r2, r3, #31
    2240:	d404      	bmi.n	224c <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2242:	2301      	movs	r3, #1
    2244:	425b      	negs	r3, r3
    2246:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2248:	2300      	movs	r3, #0
    224a:	7183      	strb	r3, [r0, #6]
}
    224c:	4770      	bx	lr
    224e:	46c0      	nop			; (mov r8, r8)

00002250 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2250:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2252:	4b04      	ldr	r3, [pc, #16]	; (2264 <NWK_RouteNextHop+0x14>)
    2254:	4798      	blx	r3
	if (entry) {
    2256:	2800      	cmp	r0, #0
    2258:	d001      	beq.n	225e <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    225a:	8880      	ldrh	r0, [r0, #4]
    225c:	e000      	b.n	2260 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    225e:	4802      	ldr	r0, [pc, #8]	; (2268 <NWK_RouteNextHop+0x18>)
}
    2260:	bd08      	pop	{r3, pc}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	000021bd 	.word	0x000021bd
    2268:	0000ffff 	.word	0x0000ffff

0000226c <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    226c:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    226e:	4b03      	ldr	r3, [pc, #12]	; (227c <nwkRouteRemove+0x10>)
    2270:	4798      	blx	r3
	if (entry) {
    2272:	2800      	cmp	r0, #0
    2274:	d001      	beq.n	227a <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    2276:	4b02      	ldr	r3, [pc, #8]	; (2280 <nwkRouteRemove+0x14>)
    2278:	4798      	blx	r3
	}
}
    227a:	bd08      	pop	{r3, pc}
    227c:	000021bd 	.word	0x000021bd
    2280:	0000223d 	.word	0x0000223d

00002284 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    2284:	b538      	push	{r3, r4, r5, lr}
    2286:	1c04      	adds	r4, r0, #0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    2288:	7a42      	ldrb	r2, [r0, #9]
    228a:	7a85      	ldrb	r5, [r0, #10]
    228c:	022d      	lsls	r5, r5, #8
    228e:	4315      	orrs	r5, r2
    2290:	b22b      	sxth	r3, r5
    2292:	2b00      	cmp	r3, #0
    2294:	da05      	bge.n	22a2 <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    2296:	7b42      	ldrb	r2, [r0, #13]
    2298:	7b83      	ldrb	r3, [r0, #14]
    229a:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    229c:	4313      	orrs	r3, r2
    229e:	429d      	cmp	r5, r3
    22a0:	d141      	bne.n	2326 <nwkRouteFrameReceived+0xa2>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    22a2:	7961      	ldrb	r1, [r4, #5]
    22a4:	79a2      	ldrb	r2, [r4, #6]
    22a6:	0212      	lsls	r2, r2, #8
    22a8:	430a      	orrs	r2, r1
    22aa:	4b1f      	ldr	r3, [pc, #124]	; (2328 <nwkRouteFrameReceived+0xa4>)
    22ac:	429a      	cmp	r2, r3
    22ae:	d03a      	beq.n	2326 <nwkRouteFrameReceived+0xa2>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    22b0:	7b62      	ldrb	r2, [r4, #13]
    22b2:	7ba0      	ldrb	r0, [r4, #14]
    22b4:	0200      	lsls	r0, r0, #8
    22b6:	4310      	orrs	r0, r2
    22b8:	2100      	movs	r1, #0
    22ba:	4b1c      	ldr	r3, [pc, #112]	; (232c <nwkRouteFrameReceived+0xa8>)
    22bc:	4798      	blx	r3

	if (entry) {
    22be:	2800      	cmp	r0, #0
    22c0:	d022      	beq.n	2308 <nwkRouteFrameReceived+0x84>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    22c2:	79e1      	ldrb	r1, [r4, #7]
    22c4:	7a22      	ldrb	r2, [r4, #8]
    22c6:	0212      	lsls	r2, r2, #8
    22c8:	430a      	orrs	r2, r1
    22ca:	2100      	movs	r1, #0
    22cc:	4b16      	ldr	r3, [pc, #88]	; (2328 <nwkRouteFrameReceived+0xa4>)
    22ce:	429a      	cmp	r2, r3
    22d0:	d108      	bne.n	22e4 <nwkRouteFrameReceived+0x60>
				nwkIb.addr == header->nwkDstAddr);
    22d2:	7be2      	ldrb	r2, [r4, #15]
    22d4:	7c21      	ldrb	r1, [r4, #16]
    22d6:	0209      	lsls	r1, r1, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    22d8:	4b15      	ldr	r3, [pc, #84]	; (2330 <nwkRouteFrameReceived+0xac>)
    22da:	881b      	ldrh	r3, [r3, #0]
    22dc:	4311      	orrs	r1, r2
    22de:	1a59      	subs	r1, r3, r1
    22e0:	424b      	negs	r3, r1
    22e2:	4159      	adcs	r1, r3
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    22e4:	8883      	ldrh	r3, [r0, #4]
    22e6:	42ab      	cmp	r3, r5
    22e8:	d004      	beq.n	22f4 <nwkRouteFrameReceived+0x70>
    22ea:	2385      	movs	r3, #133	; 0x85
    22ec:	5ce2      	ldrb	r2, [r4, r3]
    22ee:	79c3      	ldrb	r3, [r0, #7]
    22f0:	429a      	cmp	r2, r3
    22f2:	d801      	bhi.n	22f8 <nwkRouteFrameReceived+0x74>
				entry->lqi) || discovery) {
    22f4:	2900      	cmp	r1, #0
    22f6:	d013      	beq.n	2320 <nwkRouteFrameReceived+0x9c>
			entry->nextHopAddr = header->macSrcAddr;
    22f8:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    22fa:	7803      	ldrb	r3, [r0, #0]
    22fc:	220f      	movs	r2, #15
    22fe:	4013      	ands	r3, r2
    2300:	2230      	movs	r2, #48	; 0x30
    2302:	4313      	orrs	r3, r2
    2304:	7003      	strb	r3, [r0, #0]
    2306:	e00b      	b.n	2320 <nwkRouteFrameReceived+0x9c>
		}
	} else {
		entry = NWK_RouteNewEntry();
    2308:	4b0a      	ldr	r3, [pc, #40]	; (2334 <nwkRouteFrameReceived+0xb0>)
    230a:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    230c:	7b61      	ldrb	r1, [r4, #13]
    230e:	7ba2      	ldrb	r2, [r4, #14]
    2310:	0212      	lsls	r2, r2, #8
    2312:	430a      	orrs	r2, r1
    2314:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    2316:	7a62      	ldrb	r2, [r4, #9]
    2318:	7aa3      	ldrb	r3, [r4, #10]
    231a:	021b      	lsls	r3, r3, #8
    231c:	4313      	orrs	r3, r2
    231e:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    2320:	2385      	movs	r3, #133	; 0x85
    2322:	5ce3      	ldrb	r3, [r4, r3]
    2324:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    2326:	bd38      	pop	{r3, r4, r5, pc}
    2328:	0000ffff 	.word	0x0000ffff
    232c:	000021bd 	.word	0x000021bd
    2330:	20004450 	.word	0x20004450
    2334:	000021f1 	.word	0x000021f1

00002338 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    2338:	b510      	push	{r4, lr}
    233a:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    233c:	7bc3      	ldrb	r3, [r0, #15]
    233e:	7c00      	ldrb	r0, [r0, #16]
    2340:	0200      	lsls	r0, r0, #8
    2342:	4318      	orrs	r0, r3
    2344:	4b1b      	ldr	r3, [pc, #108]	; (23b4 <nwkRouteFrameSent+0x7c>)
    2346:	4298      	cmp	r0, r3
    2348:	d032      	beq.n	23b0 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    234a:	7ae1      	ldrb	r1, [r4, #11]
    234c:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    234e:	0fc9      	lsrs	r1, r1, #31
    2350:	4b19      	ldr	r3, [pc, #100]	; (23b8 <nwkRouteFrameSent+0x80>)
    2352:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    2354:	2800      	cmp	r0, #0
    2356:	d02b      	beq.n	23b0 <nwkRouteFrameSent+0x78>
    2358:	7803      	ldrb	r3, [r0, #0]
    235a:	07da      	lsls	r2, r3, #31
    235c:	d428      	bmi.n	23b0 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    235e:	2385      	movs	r3, #133	; 0x85
    2360:	5ce3      	ldrb	r3, [r4, r3]
    2362:	2b00      	cmp	r3, #0
    2364:	d117      	bne.n	2396 <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2366:	7803      	ldrb	r3, [r0, #0]
    2368:	220f      	movs	r2, #15
    236a:	4013      	ands	r3, r2
    236c:	2230      	movs	r2, #48	; 0x30
    236e:	4313      	orrs	r3, r2
    2370:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    2372:	7983      	ldrb	r3, [r0, #6]
    2374:	3301      	adds	r3, #1
    2376:	b2db      	uxtb	r3, r3
    2378:	7183      	strb	r3, [r0, #6]
    237a:	2bff      	cmp	r3, #255	; 0xff
    237c:	d118      	bne.n	23b0 <nwkRouteFrameSent+0x78>
    237e:	490f      	ldr	r1, [pc, #60]	; (23bc <nwkRouteFrameSent+0x84>)
    2380:	1d8b      	adds	r3, r1, #6
    2382:	4a0f      	ldr	r2, [pc, #60]	; (23c0 <nwkRouteFrameSent+0x88>)
    2384:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    2386:	781a      	ldrb	r2, [r3, #0]
    2388:	0852      	lsrs	r2, r2, #1
    238a:	3201      	adds	r2, #1
    238c:	701a      	strb	r2, [r3, #0]
    238e:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2390:	428b      	cmp	r3, r1
    2392:	d1f8      	bne.n	2386 <nwkRouteFrameSent+0x4e>
    2394:	e00c      	b.n	23b0 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    2396:	7802      	ldrb	r2, [r0, #0]
    2398:	0913      	lsrs	r3, r2, #4
    239a:	330f      	adds	r3, #15
    239c:	210f      	movs	r1, #15
    239e:	400b      	ands	r3, r1
    23a0:	011c      	lsls	r4, r3, #4
    23a2:	400a      	ands	r2, r1
    23a4:	4322      	orrs	r2, r4
    23a6:	7002      	strb	r2, [r0, #0]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d101      	bne.n	23b0 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    23ac:	4b05      	ldr	r3, [pc, #20]	; (23c4 <nwkRouteFrameSent+0x8c>)
    23ae:	4798      	blx	r3
		}
	}
}
    23b0:	bd10      	pop	{r4, pc}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	0000ffff 	.word	0x0000ffff
    23b8:	000021bd 	.word	0x000021bd
    23bc:	20003dcc 	.word	0x20003dcc
    23c0:	00000326 	.word	0x00000326
    23c4:	0000223d 	.word	0x0000223d

000023c8 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    23c8:	b510      	push	{r4, lr}
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    23ca:	7bc1      	ldrb	r1, [r0, #15]
    23cc:	7c03      	ldrb	r3, [r0, #16]
    23ce:	021b      	lsls	r3, r3, #8
    23d0:	430b      	orrs	r3, r1
    23d2:	4a0d      	ldr	r2, [pc, #52]	; (2408 <nwkRoutePrepareTx+0x40>)
    23d4:	4293      	cmp	r3, r2
    23d6:	d104      	bne.n	23e2 <nwkRoutePrepareTx+0x1a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    23d8:	2301      	movs	r3, #1
    23da:	425b      	negs	r3, r3
    23dc:	71c3      	strb	r3, [r0, #7]
    23de:	7203      	strb	r3, [r0, #8]
    23e0:	e010      	b.n	2404 <nwkRoutePrepareTx+0x3c>
	} else if (header->nwkFcf.linkLocal) {
    23e2:	7ac2      	ldrb	r2, [r0, #11]
    23e4:	0751      	lsls	r1, r2, #29
    23e6:	d503      	bpl.n	23f0 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    23e8:	71c3      	strb	r3, [r0, #7]
    23ea:	0a1b      	lsrs	r3, r3, #8
    23ec:	7203      	strb	r3, [r0, #8]
    23ee:	e009      	b.n	2404 <nwkRoutePrepareTx+0x3c>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    23f0:	1c84      	adds	r4, r0, #2
    23f2:	7ac1      	ldrb	r1, [r0, #11]
    23f4:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    23f6:	0fc9      	lsrs	r1, r1, #31
    23f8:	1c18      	adds	r0, r3, #0
    23fa:	4b04      	ldr	r3, [pc, #16]	; (240c <nwkRoutePrepareTx+0x44>)
    23fc:	4798      	blx	r3
    23fe:	7160      	strb	r0, [r4, #5]
    2400:	0a00      	lsrs	r0, r0, #8
    2402:	71a0      	strb	r0, [r4, #6]
			nwkRouteDiscoveryRequest(frame);
		}

  #endif
	}
}
    2404:	bd10      	pop	{r4, pc}
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	0000ffff 	.word	0x0000ffff
    240c:	00002251 	.word	0x00002251

00002410 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    2410:	b5f0      	push	{r4, r5, r6, r7, lr}
    2412:	4647      	mov	r7, r8
    2414:	b480      	push	{r7}
    2416:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2418:	7bc2      	ldrb	r2, [r0, #15]
    241a:	7c06      	ldrb	r6, [r0, #16]
    241c:	0236      	lsls	r6, r6, #8
    241e:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    2420:	7ac7      	ldrb	r7, [r0, #11]
    2422:	073f      	lsls	r7, r7, #28
    2424:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2426:	b2f9      	uxtb	r1, r7
    2428:	1c30      	adds	r0, r6, #0
    242a:	4b28      	ldr	r3, [pc, #160]	; (24cc <nwkRouteFrame+0xbc>)
    242c:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    242e:	4b28      	ldr	r3, [pc, #160]	; (24d0 <nwkRouteFrame+0xc0>)
    2430:	4298      	cmp	r0, r3
    2432:	d00f      	beq.n	2454 <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    2434:	2200      	movs	r2, #0
    2436:	2389      	movs	r3, #137	; 0x89
    2438:	54e2      	strb	r2, [r4, r3]
    243a:	238a      	movs	r3, #138	; 0x8a
    243c:	54e2      	strb	r2, [r4, r3]
    243e:	238b      	movs	r3, #139	; 0x8b
    2440:	54e2      	strb	r2, [r4, r3]
    2442:	238c      	movs	r3, #140	; 0x8c
    2444:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    2446:	2202      	movs	r2, #2
    2448:	2388      	movs	r3, #136	; 0x88
    244a:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    244c:	1c20      	adds	r0, r4, #0
    244e:	4b21      	ldr	r3, [pc, #132]	; (24d4 <nwkRouteFrame+0xc4>)
    2450:	4798      	blx	r3
    2452:	e038      	b.n	24c6 <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    2454:	7b62      	ldrb	r2, [r4, #13]
    2456:	7ba3      	ldrb	r3, [r4, #14]
    2458:	021b      	lsls	r3, r3, #8
    245a:	4313      	orrs	r3, r2
    245c:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    245e:	4b1e      	ldr	r3, [pc, #120]	; (24d8 <nwkRouteFrame+0xc8>)
    2460:	4798      	blx	r3
    2462:	1e05      	subs	r5, r0, #0
    2464:	d02c      	beq.n	24c0 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    2466:	4b1d      	ldr	r3, [pc, #116]	; (24dc <nwkRouteFrame+0xcc>)
    2468:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    246a:	786b      	ldrb	r3, [r5, #1]
    246c:	3306      	adds	r3, #6
    246e:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    2470:	2200      	movs	r2, #0
    2472:	2389      	movs	r3, #137	; 0x89
    2474:	54ea      	strb	r2, [r5, r3]
    2476:	238a      	movs	r3, #138	; 0x8a
    2478:	54ea      	strb	r2, [r5, r3]
    247a:	238b      	movs	r3, #139	; 0x8b
    247c:	54ea      	strb	r2, [r5, r3]
    247e:	238c      	movs	r3, #140	; 0x8c
    2480:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    2482:	21ff      	movs	r1, #255	; 0xff
    2484:	4643      	mov	r3, r8
    2486:	4019      	ands	r1, r3
    2488:	73e9      	strb	r1, [r5, #15]
    248a:	0a1a      	lsrs	r2, r3, #8
    248c:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    248e:	2381      	movs	r3, #129	; 0x81
    2490:	5ce8      	ldrb	r0, [r5, r3]
    2492:	2382      	movs	r3, #130	; 0x82
    2494:	5ceb      	ldrb	r3, [r5, r3]
    2496:	021b      	lsls	r3, r3, #8
    2498:	4303      	orrs	r3, r0
    249a:	2083      	movs	r0, #131	; 0x83
    249c:	5c28      	ldrb	r0, [r5, r0]
    249e:	0400      	lsls	r0, r0, #16
    24a0:	4303      	orrs	r3, r0
    24a2:	2084      	movs	r0, #132	; 0x84
    24a4:	5c28      	ldrb	r0, [r5, r0]
    24a6:	0600      	lsls	r0, r0, #24
    24a8:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    24aa:	2001      	movs	r0, #1
    24ac:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    24ae:	7059      	strb	r1, [r3, #1]
    24b0:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    24b2:	70de      	strb	r6, [r3, #3]
    24b4:	0a36      	lsrs	r6, r6, #8
    24b6:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    24b8:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    24ba:	1c28      	adds	r0, r5, #0
    24bc:	4b05      	ldr	r3, [pc, #20]	; (24d4 <nwkRouteFrame+0xc4>)
    24be:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    24c0:	1c20      	adds	r0, r4, #0
    24c2:	4b07      	ldr	r3, [pc, #28]	; (24e0 <nwkRouteFrame+0xd0>)
    24c4:	4798      	blx	r3
	}
}
    24c6:	bc04      	pop	{r2}
    24c8:	4690      	mov	r8, r2
    24ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24cc:	00002251 	.word	0x00002251
    24d0:	0000ffff 	.word	0x0000ffff
    24d4:	00002d39 	.word	0x00002d39
    24d8:	000020b1 	.word	0x000020b1
    24dc:	00002171 	.word	0x00002171
    24e0:	00002121 	.word	0x00002121

000024e4 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    24e4:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    24e6:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    24e8:	7b03      	ldrb	r3, [r0, #12]
		return false;
    24ea:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    24ec:	2b06      	cmp	r3, #6
    24ee:	d107      	bne.n	2500 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    24f0:	78d3      	ldrb	r3, [r2, #3]
    24f2:	7910      	ldrb	r0, [r2, #4]
    24f4:	0200      	lsls	r0, r0, #8
    24f6:	4318      	orrs	r0, r3
    24f8:	7951      	ldrb	r1, [r2, #5]
    24fa:	4b02      	ldr	r3, [pc, #8]	; (2504 <nwkRouteErrorReceived+0x20>)
    24fc:	4798      	blx	r3

	return true;
    24fe:	2001      	movs	r0, #1
}
    2500:	bd08      	pop	{r3, pc}
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	0000226d 	.word	0x0000226d

00002508 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2508:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    250a:	7b02      	ldrb	r2, [r0, #12]
		return false;
    250c:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    250e:	2a00      	cmp	r2, #0
    2510:	d00f      	beq.n	2532 <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    2512:	6882      	ldr	r2, [r0, #8]
    2514:	7813      	ldrb	r3, [r2, #0]
    2516:	2b00      	cmp	r3, #0
    2518:	d002      	beq.n	2520 <nwkRxSeriveDataInd+0x18>
    251a:	2b01      	cmp	r3, #1
    251c:	d004      	beq.n	2528 <nwkRxSeriveDataInd+0x20>
    251e:	e007      	b.n	2530 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2520:	4b05      	ldr	r3, [pc, #20]	; (2538 <nwkRxSeriveDataInd+0x30>)
    2522:	4798      	blx	r3
    2524:	1c03      	adds	r3, r0, #0
    2526:	e004      	b.n	2532 <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2528:	4b04      	ldr	r3, [pc, #16]	; (253c <nwkRxSeriveDataInd+0x34>)
    252a:	4798      	blx	r3
    252c:	1c03      	adds	r3, r0, #0
    252e:	e000      	b.n	2532 <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    2530:	2300      	movs	r3, #0
	}
}
    2532:	1c18      	adds	r0, r3, #0
    2534:	bd08      	pop	{r3, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	00002e85 	.word	0x00002e85
    253c:	000024e5 	.word	0x000024e5

00002540 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2540:	b538      	push	{r3, r4, r5, lr}
    2542:	4909      	ldr	r1, [pc, #36]	; (2568 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    2544:	1d0b      	adds	r3, r1, #4
    2546:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2548:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    254a:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    254c:	781a      	ldrb	r2, [r3, #0]
    254e:	2a00      	cmp	r2, #0
    2550:	d002      	beq.n	2558 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2552:	3a01      	subs	r2, #1
    2554:	701a      	strb	r2, [r3, #0]
			restart = true;
    2556:	1c2c      	adds	r4, r5, #0
    2558:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    255a:	428b      	cmp	r3, r1
    255c:	d1f6      	bne.n	254c <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    255e:	2c00      	cmp	r4, #0
    2560:	d001      	beq.n	2566 <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    2562:	4b02      	ldr	r3, [pc, #8]	; (256c <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    2564:	4798      	blx	r3
	}
}
    2566:	bd38      	pop	{r3, r4, r5, pc}
    2568:	200040ec 	.word	0x200040ec
    256c:	00001af9 	.word	0x00001af9

00002570 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2570:	b508      	push	{r3, lr}
    2572:	490a      	ldr	r1, [pc, #40]	; (259c <nwkRxInit+0x2c>)
    2574:	1d0b      	adds	r3, r1, #4
    2576:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2578:	2200      	movs	r2, #0
    257a:	701a      	strb	r2, [r3, #0]
    257c:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    257e:	428b      	cmp	r3, r1
    2580:	d1fb      	bne.n	257a <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2582:	4b07      	ldr	r3, [pc, #28]	; (25a0 <nwkRxInit+0x30>)
    2584:	2264      	movs	r2, #100	; 0x64
    2586:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2588:	2200      	movs	r2, #0
    258a:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    258c:	4a05      	ldr	r2, [pc, #20]	; (25a4 <nwkRxInit+0x34>)
    258e:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2590:	2000      	movs	r0, #0
    2592:	4905      	ldr	r1, [pc, #20]	; (25a8 <nwkRxInit+0x38>)
    2594:	4b05      	ldr	r3, [pc, #20]	; (25ac <nwkRxInit+0x3c>)
    2596:	4798      	blx	r3
}
    2598:	bd08      	pop	{r3, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	200040ec 	.word	0x200040ec
    25a0:	2000412c 	.word	0x2000412c
    25a4:	00002541 	.word	0x00002541
    25a8:	00002509 	.word	0x00002509
    25ac:	00001ea5 	.word	0x00001ea5

000025b0 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    25b0:	b510      	push	{r4, lr}
    25b2:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    25b4:	6803      	ldr	r3, [r0, #0]
    25b6:	785a      	ldrb	r2, [r3, #1]
    25b8:	2a88      	cmp	r2, #136	; 0x88
    25ba:	d11a      	bne.n	25f2 <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    25bc:	781b      	ldrb	r3, [r3, #0]
    25be:	2220      	movs	r2, #32
    25c0:	4393      	bics	r3, r2
    25c2:	2b41      	cmp	r3, #65	; 0x41
    25c4:	d115      	bne.n	25f2 <PHY_DataInd+0x42>
    25c6:	7903      	ldrb	r3, [r0, #4]
    25c8:	2b0f      	cmp	r3, #15
    25ca:	d912      	bls.n	25f2 <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    25cc:	4b09      	ldr	r3, [pc, #36]	; (25f4 <PHY_DataInd+0x44>)
    25ce:	4798      	blx	r3
    25d0:	2800      	cmp	r0, #0
    25d2:	d00e      	beq.n	25f2 <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    25d4:	2320      	movs	r3, #32
    25d6:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    25d8:	7923      	ldrb	r3, [r4, #4]
    25da:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    25dc:	7962      	ldrb	r2, [r4, #5]
    25de:	2385      	movs	r3, #133	; 0x85
    25e0:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    25e2:	79a2      	ldrb	r2, [r4, #6]
    25e4:	2386      	movs	r3, #134	; 0x86
    25e6:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    25e8:	3002      	adds	r0, #2
    25ea:	7922      	ldrb	r2, [r4, #4]
    25ec:	6821      	ldr	r1, [r4, #0]
    25ee:	4b02      	ldr	r3, [pc, #8]	; (25f8 <PHY_DataInd+0x48>)
    25f0:	4798      	blx	r3
}
    25f2:	bd10      	pop	{r4, pc}
    25f4:	000020b1 	.word	0x000020b1
    25f8:	00005879 	.word	0x00005879

000025fc <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    25fc:	2900      	cmp	r1, #0
    25fe:	d002      	beq.n	2606 <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    2600:	2322      	movs	r3, #34	; 0x22
    2602:	7003      	strb	r3, [r0, #0]
    2604:	e001      	b.n	260a <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    2606:	2324      	movs	r3, #36	; 0x24
    2608:	7003      	strb	r3, [r0, #0]
	}
}
    260a:	4770      	bx	lr

0000260c <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    260c:	b5f0      	push	{r4, r5, r6, r7, lr}
    260e:	464f      	mov	r7, r9
    2610:	4646      	mov	r6, r8
    2612:	b4c0      	push	{r6, r7}
    2614:	b085      	sub	sp, #20
	NwkFrame_t *frame = NULL;
    2616:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2618:	4dd3      	ldr	r5, [pc, #844]	; (2968 <nwkRxTaskHandler+0x35c>)
    261a:	48d4      	ldr	r0, [pc, #848]	; (296c <nwkRxTaskHandler+0x360>)
    261c:	4681      	mov	r9, r0
    261e:	203c      	movs	r0, #60	; 0x3c
    2620:	4481      	add	r9, r0
    2622:	e19a      	b.n	295a <nwkRxTaskHandler+0x34e>
		switch (frame->state) {
    2624:	7823      	ldrb	r3, [r4, #0]
    2626:	3b20      	subs	r3, #32
    2628:	b2da      	uxtb	r2, r3
    262a:	2a04      	cmp	r2, #4
    262c:	d900      	bls.n	2630 <nwkRxTaskHandler+0x24>
    262e:	e194      	b.n	295a <nwkRxTaskHandler+0x34e>
    2630:	0093      	lsls	r3, r2, #2
    2632:	4acf      	ldr	r2, [pc, #828]	; (2970 <nwkRxTaskHandler+0x364>)
    2634:	58d3      	ldr	r3, [r2, r3]
    2636:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2638:	2324      	movs	r3, #36	; 0x24
    263a:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    263c:	7ae3      	ldrb	r3, [r4, #11]
    263e:	0719      	lsls	r1, r3, #28
    2640:	d500      	bpl.n	2644 <nwkRxTaskHandler+0x38>
    2642:	e18a      	b.n	295a <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2644:	7961      	ldrb	r1, [r4, #5]
    2646:	79a2      	ldrb	r2, [r4, #6]
    2648:	0212      	lsls	r2, r2, #8
    264a:	430a      	orrs	r2, r1
    264c:	4bc9      	ldr	r3, [pc, #804]	; (2974 <nwkRxTaskHandler+0x368>)
    264e:	429a      	cmp	r2, r3
    2650:	d114      	bne.n	267c <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2652:	7be2      	ldrb	r2, [r4, #15]
    2654:	7c23      	ldrb	r3, [r4, #16]
    2656:	021b      	lsls	r3, r3, #8
    2658:	4313      	orrs	r3, r2
    265a:	4ac7      	ldr	r2, [pc, #796]	; (2978 <nwkRxTaskHandler+0x36c>)
    265c:	8812      	ldrh	r2, [r2, #0]
    265e:	429a      	cmp	r2, r3
    2660:	d003      	beq.n	266a <nwkRxTaskHandler+0x5e>
    2662:	4ac4      	ldr	r2, [pc, #784]	; (2974 <nwkRxTaskHandler+0x368>)
    2664:	4293      	cmp	r3, r2
    2666:	d000      	beq.n	266a <nwkRxTaskHandler+0x5e>
    2668:	e177      	b.n	295a <nwkRxTaskHandler+0x34e>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    266a:	7ae3      	ldrb	r3, [r4, #11]
    266c:	079a      	lsls	r2, r3, #30
    266e:	d502      	bpl.n	2676 <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    2670:	2321      	movs	r3, #33	; 0x21
    2672:	7023      	strb	r3, [r4, #0]
    2674:	e171      	b.n	295a <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2676:	2322      	movs	r3, #34	; 0x22
    2678:	7023      	strb	r3, [r4, #0]
    267a:	e16e      	b.n	295a <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    267c:	7be1      	ldrb	r1, [r4, #15]
    267e:	7c22      	ldrb	r2, [r4, #16]
    2680:	0212      	lsls	r2, r2, #8
    2682:	430a      	orrs	r2, r1
    2684:	4bbb      	ldr	r3, [pc, #748]	; (2974 <nwkRxTaskHandler+0x368>)
    2686:	429a      	cmp	r2, r3
    2688:	d103      	bne.n	2692 <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    268a:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    268c:	07de      	lsls	r6, r3, #31
    268e:	d500      	bpl.n	2692 <nwkRxTaskHandler+0x86>
    2690:	e163      	b.n	295a <nwkRxTaskHandler+0x34e>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    2692:	7b61      	ldrb	r1, [r4, #13]
    2694:	7ba3      	ldrb	r3, [r4, #14]
    2696:	021b      	lsls	r3, r3, #8
    2698:	4ab7      	ldr	r2, [pc, #732]	; (2978 <nwkRxTaskHandler+0x36c>)
    269a:	8812      	ldrh	r2, [r2, #0]
    269c:	430b      	orrs	r3, r1
    269e:	429a      	cmp	r2, r3
    26a0:	d100      	bne.n	26a4 <nwkRxTaskHandler+0x98>
    26a2:	e15a      	b.n	295a <nwkRxTaskHandler+0x34e>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    26a4:	1c20      	adds	r0, r4, #0
    26a6:	4bb5      	ldr	r3, [pc, #724]	; (297c <nwkRxTaskHandler+0x370>)
    26a8:	4798      	blx	r3
    26aa:	4bb0      	ldr	r3, [pc, #704]	; (296c <nwkRxTaskHandler+0x360>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    26ac:	2700      	movs	r7, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    26ae:	1ca1      	adds	r1, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    26b0:	1c18      	adds	r0, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    26b2:	791a      	ldrb	r2, [r3, #4]
    26b4:	2a00      	cmp	r2, #0
    26b6:	d037      	beq.n	2728 <nwkRxTaskHandler+0x11c>
    26b8:	7ace      	ldrb	r6, [r1, #11]
    26ba:	7b0a      	ldrb	r2, [r1, #12]
    26bc:	0212      	lsls	r2, r2, #8
    26be:	4690      	mov	r8, r2
    26c0:	881a      	ldrh	r2, [r3, #0]
    26c2:	4694      	mov	ip, r2
    26c4:	4642      	mov	r2, r8
    26c6:	4316      	orrs	r6, r2
    26c8:	45b4      	cmp	ip, r6
    26ca:	d12e      	bne.n	272a <nwkRxTaskHandler+0x11e>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    26cc:	7b22      	ldrb	r2, [r4, #12]
    26ce:	789b      	ldrb	r3, [r3, #2]
    26d0:	1a9b      	subs	r3, r3, r2
    26d2:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    26d4:	2b07      	cmp	r3, #7
    26d6:	d81c      	bhi.n	2712 <nwkRxTaskHandler+0x106>
				if (entry->mask & (1 << diff)) {
    26d8:	78c2      	ldrb	r2, [r0, #3]
    26da:	1c11      	adds	r1, r2, #0
    26dc:	4119      	asrs	r1, r3
    26de:	07ce      	lsls	r6, r1, #31
    26e0:	d512      	bpl.n	2708 <nwkRxTaskHandler+0xfc>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    26e2:	79e1      	ldrb	r1, [r4, #7]
    26e4:	7a23      	ldrb	r3, [r4, #8]
    26e6:	021b      	lsls	r3, r3, #8
    26e8:	4aa3      	ldr	r2, [pc, #652]	; (2978 <nwkRxTaskHandler+0x36c>)
    26ea:	8812      	ldrh	r2, [r2, #0]
    26ec:	430b      	orrs	r3, r1
    26ee:	429a      	cmp	r2, r3
    26f0:	d000      	beq.n	26f4 <nwkRxTaskHandler+0xe8>
    26f2:	e132      	b.n	295a <nwkRxTaskHandler+0x34e>
						nwkRouteRemove(
    26f4:	7be2      	ldrb	r2, [r4, #15]
    26f6:	7c20      	ldrb	r0, [r4, #16]
    26f8:	0200      	lsls	r0, r0, #8
    26fa:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    26fc:	7ae1      	ldrb	r1, [r4, #11]
    26fe:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    2700:	0fc9      	lsrs	r1, r1, #31
    2702:	4b9f      	ldr	r3, [pc, #636]	; (2980 <nwkRxTaskHandler+0x374>)
    2704:	4798      	blx	r3
    2706:	e128      	b.n	295a <nwkRxTaskHandler+0x34e>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2708:	2101      	movs	r1, #1
    270a:	4099      	lsls	r1, r3
    270c:	430a      	orrs	r2, r1
    270e:	70c2      	strb	r2, [r0, #3]
    2710:	e14e      	b.n	29b0 <nwkRxTaskHandler+0x3a4>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    2712:	7082      	strb	r2, [r0, #2]
				entry->mask = (entry->mask << shift) | 1;
    2714:	78c2      	ldrb	r2, [r0, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    2716:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    2718:	b2db      	uxtb	r3, r3
    271a:	409a      	lsls	r2, r3
    271c:	2301      	movs	r3, #1
    271e:	4313      	orrs	r3, r2
    2720:	70c3      	strb	r3, [r0, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    2722:	231f      	movs	r3, #31
    2724:	7103      	strb	r3, [r0, #4]
    2726:	e143      	b.n	29b0 <nwkRxTaskHandler+0x3a4>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2728:	1c1f      	adds	r7, r3, #0
    272a:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    272c:	454b      	cmp	r3, r9
    272e:	d1bf      	bne.n	26b0 <nwkRxTaskHandler+0xa4>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2730:	2f00      	cmp	r7, #0
    2732:	d100      	bne.n	2736 <nwkRxTaskHandler+0x12a>
    2734:	e111      	b.n	295a <nwkRxTaskHandler+0x34e>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    2736:	7b61      	ldrb	r1, [r4, #13]
    2738:	7ba2      	ldrb	r2, [r4, #14]
    273a:	0212      	lsls	r2, r2, #8
    273c:	430a      	orrs	r2, r1
    273e:	803a      	strh	r2, [r7, #0]
	freeEntry->seq = header->nwkSeq;
    2740:	7b23      	ldrb	r3, [r4, #12]
    2742:	70bb      	strb	r3, [r7, #2]
	freeEntry->mask = 1;
    2744:	2301      	movs	r3, #1
    2746:	70fb      	strb	r3, [r7, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2748:	231f      	movs	r3, #31
    274a:	713b      	strb	r3, [r7, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    274c:	488d      	ldr	r0, [pc, #564]	; (2984 <nwkRxTaskHandler+0x378>)
    274e:	4b8e      	ldr	r3, [pc, #568]	; (2988 <nwkRxTaskHandler+0x37c>)
    2750:	4798      	blx	r3
    2752:	e12d      	b.n	29b0 <nwkRxTaskHandler+0x3a4>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2754:	4b88      	ldr	r3, [pc, #544]	; (2978 <nwkRxTaskHandler+0x36c>)
    2756:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    2758:	7be0      	ldrb	r0, [r4, #15]
    275a:	7c23      	ldrb	r3, [r4, #16]
    275c:	021b      	lsls	r3, r3, #8
    275e:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2760:	429a      	cmp	r2, r3
    2762:	d010      	beq.n	2786 <nwkRxTaskHandler+0x17a>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    2764:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    2766:	074f      	lsls	r7, r1, #29
    2768:	d40a      	bmi.n	2780 <nwkRxTaskHandler+0x174>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    276a:	1c20      	adds	r0, r4, #0
    276c:	4b87      	ldr	r3, [pc, #540]	; (298c <nwkRxTaskHandler+0x380>)
    276e:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2770:	4b81      	ldr	r3, [pc, #516]	; (2978 <nwkRxTaskHandler+0x36c>)
    2772:	881a      	ldrh	r2, [r3, #0]
    2774:	7be0      	ldrb	r0, [r4, #15]
    2776:	7c23      	ldrb	r3, [r4, #16]
    2778:	021b      	lsls	r3, r3, #8
    277a:	4303      	orrs	r3, r0
    277c:	429a      	cmp	r2, r3
    277e:	d002      	beq.n	2786 <nwkRxTaskHandler+0x17a>
    2780:	497c      	ldr	r1, [pc, #496]	; (2974 <nwkRxTaskHandler+0x368>)
    2782:	428b      	cmp	r3, r1
    2784:	d108      	bne.n	2798 <nwkRxTaskHandler+0x18c>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2786:	7ae3      	ldrb	r3, [r4, #11]
    2788:	0798      	lsls	r0, r3, #30
    278a:	d502      	bpl.n	2792 <nwkRxTaskHandler+0x186>
				frame->state = NWK_RX_STATE_DECRYPT;
    278c:	2321      	movs	r3, #33	; 0x21
    278e:	7023      	strb	r3, [r4, #0]
    2790:	e0e3      	b.n	295a <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2792:	2322      	movs	r3, #34	; 0x22
    2794:	7023      	strb	r3, [r4, #0]
    2796:	e0e0      	b.n	295a <nwkRxTaskHandler+0x34e>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2798:	79e1      	ldrb	r1, [r4, #7]
    279a:	7a23      	ldrb	r3, [r4, #8]
    279c:	021b      	lsls	r3, r3, #8
    279e:	430b      	orrs	r3, r1
    27a0:	429a      	cmp	r2, r3
    27a2:	d000      	beq.n	27a6 <nwkRxTaskHandler+0x19a>
    27a4:	e0d9      	b.n	295a <nwkRxTaskHandler+0x34e>
			frame->state = NWK_RX_STATE_ROUTE;
    27a6:	2323      	movs	r3, #35	; 0x23
    27a8:	7023      	strb	r3, [r4, #0]
    27aa:	e0d6      	b.n	295a <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    27ac:	1c20      	adds	r0, r4, #0
    27ae:	2100      	movs	r1, #0
    27b0:	4b77      	ldr	r3, [pc, #476]	; (2990 <nwkRxTaskHandler+0x384>)
    27b2:	4798      	blx	r3
		}
		break;
    27b4:	e0d1      	b.n	295a <nwkRxTaskHandler+0x34e>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    27b6:	2200      	movs	r2, #0
    27b8:	4b76      	ldr	r3, [pc, #472]	; (2994 <nwkRxTaskHandler+0x388>)
    27ba:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    27bc:	7c61      	ldrb	r1, [r4, #17]
    27be:	0909      	lsrs	r1, r1, #4
    27c0:	b2ca      	uxtb	r2, r1
    27c2:	3202      	adds	r2, #2
    27c4:	0092      	lsls	r2, r2, #2
    27c6:	4b6c      	ldr	r3, [pc, #432]	; (2978 <nwkRxTaskHandler+0x36c>)
    27c8:	58d2      	ldr	r2, [r2, r3]
    27ca:	2a00      	cmp	r2, #0
    27cc:	d05f      	beq.n	288e <nwkRxTaskHandler+0x282>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    27ce:	1ca3      	adds	r3, r4, #2
    27d0:	7b67      	ldrb	r7, [r4, #13]
    27d2:	7ba0      	ldrb	r0, [r4, #14]
    27d4:	0200      	lsls	r0, r0, #8
    27d6:	4338      	orrs	r0, r7
    27d8:	4680      	mov	r8, r0
    27da:	466e      	mov	r6, sp
    27dc:	8030      	strh	r0, [r6, #0]
	ind.dstAddr = header->nwkDstAddr;
    27de:	7be0      	ldrb	r0, [r4, #15]
    27e0:	7c26      	ldrb	r6, [r4, #16]
    27e2:	0236      	lsls	r6, r6, #8
    27e4:	1c37      	adds	r7, r6, #0
    27e6:	4307      	orrs	r7, r0
    27e8:	4668      	mov	r0, sp
    27ea:	8047      	strh	r7, [r0, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    27ec:	7c66      	ldrb	r6, [r4, #17]
    27ee:	0736      	lsls	r6, r6, #28
    27f0:	0f36      	lsrs	r6, r6, #28
    27f2:	7106      	strb	r6, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    27f4:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    27f6:	2181      	movs	r1, #129	; 0x81
    27f8:	5c61      	ldrb	r1, [r4, r1]
    27fa:	2082      	movs	r0, #130	; 0x82
    27fc:	5c26      	ldrb	r6, [r4, r0]
    27fe:	0236      	lsls	r6, r6, #8
    2800:	4331      	orrs	r1, r6
    2802:	2083      	movs	r0, #131	; 0x83
    2804:	5c26      	ldrb	r6, [r4, r0]
    2806:	0436      	lsls	r6, r6, #16
    2808:	4331      	orrs	r1, r6
    280a:	2084      	movs	r0, #132	; 0x84
    280c:	5c26      	ldrb	r6, [r4, r0]
    280e:	0636      	lsls	r6, r6, #24
    2810:	4331      	orrs	r1, r6
    2812:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    2814:	1a59      	subs	r1, r3, r1
    2816:	468c      	mov	ip, r1
    2818:	7861      	ldrb	r1, [r4, #1]
    281a:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    281c:	4668      	mov	r0, sp
    281e:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    2820:	2185      	movs	r1, #133	; 0x85
    2822:	5c61      	ldrb	r1, [r4, r1]
    2824:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    2826:	2186      	movs	r1, #134	; 0x86
    2828:	5c61      	ldrb	r1, [r4, r1]
    282a:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    282c:	7ae3      	ldrb	r3, [r4, #11]
    282e:	07d9      	lsls	r1, r3, #31
    2830:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2832:	2602      	movs	r6, #2
    2834:	4033      	ands	r3, r6
    2836:	430b      	orrs	r3, r1
    2838:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    283a:	7ae1      	ldrb	r1, [r4, #11]
    283c:	0749      	lsls	r1, r1, #29
    283e:	0fc9      	lsrs	r1, r1, #31
    2840:	0149      	lsls	r1, r1, #5
    2842:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2844:	7ae1      	ldrb	r1, [r4, #11]
    2846:	0709      	lsls	r1, r1, #28
    2848:	0fc9      	lsrs	r1, r1, #31
    284a:	0189      	lsls	r1, r1, #6
    284c:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    284e:	4952      	ldr	r1, [pc, #328]	; (2998 <nwkRxTaskHandler+0x38c>)
    2850:	187f      	adds	r7, r7, r1
    2852:	4279      	negs	r1, r7
    2854:	414f      	adcs	r7, r1
    2856:	00bf      	lsls	r7, r7, #2
    2858:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    285a:	7a67      	ldrb	r7, [r4, #9]
    285c:	7aa1      	ldrb	r1, [r4, #10]
    285e:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2860:	4339      	orrs	r1, r7
    2862:	4646      	mov	r6, r8
    2864:	1a70      	subs	r0, r6, r1
    2866:	4241      	negs	r1, r0
    2868:	4148      	adcs	r0, r1
    286a:	00c0      	lsls	r0, r0, #3
    286c:	4303      	orrs	r3, r0
    286e:	466f      	mov	r7, sp
    2870:	71bb      	strb	r3, [r7, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2872:	7960      	ldrb	r0, [r4, #5]
    2874:	79a1      	ldrb	r1, [r4, #6]
    2876:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2878:	4301      	orrs	r1, r0
    287a:	4847      	ldr	r0, [pc, #284]	; (2998 <nwkRxTaskHandler+0x38c>)
    287c:	1809      	adds	r1, r1, r0
    287e:	4248      	negs	r0, r1
    2880:	4141      	adcs	r1, r0
    2882:	0109      	lsls	r1, r1, #4
    2884:	430b      	orrs	r3, r1
    2886:	71bb      	strb	r3, [r7, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2888:	4668      	mov	r0, sp
    288a:	4790      	blx	r2
    288c:	e000      	b.n	2890 <nwkRxTaskHandler+0x284>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    288e:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2890:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    2892:	07db      	lsls	r3, r3, #31
    2894:	17db      	asrs	r3, r3, #31
    2896:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2898:	79e3      	ldrb	r3, [r4, #7]
    289a:	7a22      	ldrb	r2, [r4, #8]
    289c:	0212      	lsls	r2, r2, #8
    289e:	431a      	orrs	r2, r3
    28a0:	4b34      	ldr	r3, [pc, #208]	; (2974 <nwkRxTaskHandler+0x368>)
    28a2:	429a      	cmp	r2, r3
    28a4:	d10b      	bne.n	28be <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
    28a6:	7be1      	ldrb	r1, [r4, #15]
    28a8:	7c23      	ldrb	r3, [r4, #16]
    28aa:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    28ac:	4a32      	ldr	r2, [pc, #200]	; (2978 <nwkRxTaskHandler+0x36c>)
    28ae:	8812      	ldrh	r2, [r2, #0]
    28b0:	430b      	orrs	r3, r1
    28b2:	429a      	cmp	r2, r3
    28b4:	d103      	bne.n	28be <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    28b6:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    28b8:	0719      	lsls	r1, r3, #28
    28ba:	d400      	bmi.n	28be <nwkRxTaskHandler+0x2b2>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    28bc:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    28be:	7963      	ldrb	r3, [r4, #5]
    28c0:	79a2      	ldrb	r2, [r4, #6]
    28c2:	0212      	lsls	r2, r2, #8
    28c4:	431a      	orrs	r2, r3
    28c6:	4b2b      	ldr	r3, [pc, #172]	; (2974 <nwkRxTaskHandler+0x368>)
    28c8:	429a      	cmp	r2, r3
    28ca:	d03c      	beq.n	2946 <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    28cc:	4b2a      	ldr	r3, [pc, #168]	; (2978 <nwkRxTaskHandler+0x36c>)
    28ce:	881a      	ldrh	r2, [r3, #0]
    28d0:	4b28      	ldr	r3, [pc, #160]	; (2974 <nwkRxTaskHandler+0x368>)
    28d2:	429a      	cmp	r2, r3
    28d4:	d037      	beq.n	2946 <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (ack) {
    28d6:	2800      	cmp	r0, #0
    28d8:	d035      	beq.n	2946 <nwkRxTaskHandler+0x33a>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    28da:	4b30      	ldr	r3, [pc, #192]	; (299c <nwkRxTaskHandler+0x390>)
    28dc:	4798      	blx	r3
    28de:	1e07      	subs	r7, r0, #0
    28e0:	d031      	beq.n	2946 <nwkRxTaskHandler+0x33a>
		return;
	}

	nwkFrameCommandInit(ack);
    28e2:	4b2f      	ldr	r3, [pc, #188]	; (29a0 <nwkRxTaskHandler+0x394>)
    28e4:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    28e6:	787b      	ldrb	r3, [r7, #1]
    28e8:	3303      	adds	r3, #3
    28ea:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    28ec:	2200      	movs	r2, #0
    28ee:	2389      	movs	r3, #137	; 0x89
    28f0:	54fa      	strb	r2, [r7, r3]
    28f2:	238a      	movs	r3, #138	; 0x8a
    28f4:	54fa      	strb	r2, [r7, r3]
    28f6:	238b      	movs	r3, #139	; 0x8b
    28f8:	54fa      	strb	r2, [r7, r3]
    28fa:	238c      	movs	r3, #140	; 0x8c
    28fc:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    28fe:	7ae2      	ldrb	r2, [r4, #11]
    2900:	2302      	movs	r3, #2
    2902:	401a      	ands	r2, r3
    2904:	7afb      	ldrb	r3, [r7, #11]
    2906:	2102      	movs	r1, #2
    2908:	438b      	bics	r3, r1
    290a:	4313      	orrs	r3, r2
    290c:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    290e:	7b62      	ldrb	r2, [r4, #13]
    2910:	7ba3      	ldrb	r3, [r4, #14]
    2912:	73fa      	strb	r2, [r7, #15]
    2914:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    2916:	2381      	movs	r3, #129	; 0x81
    2918:	5cfa      	ldrb	r2, [r7, r3]
    291a:	2382      	movs	r3, #130	; 0x82
    291c:	5cfb      	ldrb	r3, [r7, r3]
    291e:	021b      	lsls	r3, r3, #8
    2920:	4313      	orrs	r3, r2
    2922:	2283      	movs	r2, #131	; 0x83
    2924:	5cba      	ldrb	r2, [r7, r2]
    2926:	0412      	lsls	r2, r2, #16
    2928:	4313      	orrs	r3, r2
    292a:	2284      	movs	r2, #132	; 0x84
    292c:	5cba      	ldrb	r2, [r7, r2]
    292e:	0612      	lsls	r2, r2, #24
    2930:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    2932:	2200      	movs	r2, #0
    2934:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    2936:	4a17      	ldr	r2, [pc, #92]	; (2994 <nwkRxTaskHandler+0x388>)
    2938:	7812      	ldrb	r2, [r2, #0]
    293a:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    293c:	7b22      	ldrb	r2, [r4, #12]
    293e:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    2940:	1c38      	adds	r0, r7, #0
    2942:	4b18      	ldr	r3, [pc, #96]	; (29a4 <nwkRxTaskHandler+0x398>)
    2944:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    2946:	2324      	movs	r3, #36	; 0x24
    2948:	7023      	strb	r3, [r4, #0]
    294a:	e006      	b.n	295a <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    294c:	1c20      	adds	r0, r4, #0
    294e:	4b16      	ldr	r3, [pc, #88]	; (29a8 <nwkRxTaskHandler+0x39c>)
    2950:	4798      	blx	r3
		}
		break;
    2952:	e002      	b.n	295a <nwkRxTaskHandler+0x34e>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    2954:	1c20      	adds	r0, r4, #0
    2956:	4b15      	ldr	r3, [pc, #84]	; (29ac <nwkRxTaskHandler+0x3a0>)
    2958:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    295a:	1c20      	adds	r0, r4, #0
    295c:	47a8      	blx	r5
    295e:	1e04      	subs	r4, r0, #0
    2960:	d000      	beq.n	2964 <nwkRxTaskHandler+0x358>
    2962:	e65f      	b.n	2624 <nwkRxTaskHandler+0x18>
    2964:	e02d      	b.n	29c2 <nwkRxTaskHandler+0x3b6>
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	00002135 	.word	0x00002135
    296c:	200040ec 	.word	0x200040ec
    2970:	0000684c 	.word	0x0000684c
    2974:	0000ffff 	.word	0x0000ffff
    2978:	20004450 	.word	0x20004450
    297c:	00002285 	.word	0x00002285
    2980:	0000226d 	.word	0x0000226d
    2984:	2000412c 	.word	0x2000412c
    2988:	00001af9 	.word	0x00001af9
    298c:	00002df9 	.word	0x00002df9
    2990:	000029fd 	.word	0x000029fd
    2994:	20004128 	.word	0x20004128
    2998:	ffff0001 	.word	0xffff0001
    299c:	000020b1 	.word	0x000020b1
    29a0:	00002171 	.word	0x00002171
    29a4:	00002d39 	.word	0x00002d39
    29a8:	00002411 	.word	0x00002411
    29ac:	00002121 	.word	0x00002121
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    29b0:	79e1      	ldrb	r1, [r4, #7]
    29b2:	7a22      	ldrb	r2, [r4, #8]
    29b4:	0212      	lsls	r2, r2, #8
    29b6:	430a      	orrs	r2, r1
    29b8:	4b04      	ldr	r3, [pc, #16]	; (29cc <nwkRxTaskHandler+0x3c0>)
    29ba:	429a      	cmp	r2, r3
    29bc:	d000      	beq.n	29c0 <nwkRxTaskHandler+0x3b4>
    29be:	e6d7      	b.n	2770 <nwkRxTaskHandler+0x164>
    29c0:	e6c8      	b.n	2754 <nwkRxTaskHandler+0x148>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    29c2:	b005      	add	sp, #20
    29c4:	bc0c      	pop	{r2, r3}
    29c6:	4690      	mov	r8, r2
    29c8:	4699      	mov	r9, r3
    29ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29cc:	0000ffff 	.word	0x0000ffff

000029d0 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    29d0:	2300      	movs	r3, #0
    29d2:	4a02      	ldr	r2, [pc, #8]	; (29dc <nwkSecurityInit+0xc>)
    29d4:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    29d6:	4a02      	ldr	r2, [pc, #8]	; (29e0 <nwkSecurityInit+0x10>)
    29d8:	6013      	str	r3, [r2, #0]
}
    29da:	4770      	bx	lr
    29dc:	20004140 	.word	0x20004140
    29e0:	20004144 	.word	0x20004144

000029e4 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    29e4:	b508      	push	{r3, lr}
    29e6:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    29e8:	4802      	ldr	r0, [pc, #8]	; (29f4 <NWK_SetSecurityKey+0x10>)
    29ea:	2210      	movs	r2, #16
    29ec:	4b02      	ldr	r3, [pc, #8]	; (29f8 <NWK_SetSecurityKey+0x14>)
    29ee:	4798      	blx	r3
}
    29f0:	bd08      	pop	{r3, pc}
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	20004498 	.word	0x20004498
    29f8:	00005879 	.word	0x00005879

000029fc <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    29fc:	2900      	cmp	r1, #0
    29fe:	d002      	beq.n	2a06 <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    2a00:	2330      	movs	r3, #48	; 0x30
    2a02:	7003      	strb	r3, [r0, #0]
    2a04:	e001      	b.n	2a0a <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    2a06:	2331      	movs	r3, #49	; 0x31
    2a08:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    2a0a:	4b02      	ldr	r3, [pc, #8]	; (2a14 <nwkSecurityProcess+0x18>)
    2a0c:	781a      	ldrb	r2, [r3, #0]
    2a0e:	3201      	adds	r2, #1
    2a10:	701a      	strb	r2, [r3, #0]
}
    2a12:	4770      	bx	lr
    2a14:	20004140 	.word	0x20004140

00002a18 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    2a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a1a:	4647      	mov	r7, r8
    2a1c:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2a1e:	4b24      	ldr	r3, [pc, #144]	; (2ab0 <SYS_EncryptConf+0x98>)
    2a20:	681e      	ldr	r6, [r3, #0]
    2a22:	4b24      	ldr	r3, [pc, #144]	; (2ab4 <SYS_EncryptConf+0x9c>)
    2a24:	781b      	ldrb	r3, [r3, #0]
    2a26:	4698      	mov	r8, r3
    2a28:	2381      	movs	r3, #129	; 0x81
    2a2a:	5cf3      	ldrb	r3, [r6, r3]
    2a2c:	2282      	movs	r2, #130	; 0x82
    2a2e:	5cb1      	ldrb	r1, [r6, r2]
    2a30:	0209      	lsls	r1, r1, #8
    2a32:	4319      	orrs	r1, r3
    2a34:	2383      	movs	r3, #131	; 0x83
    2a36:	5cf4      	ldrb	r4, [r6, r3]
    2a38:	0424      	lsls	r4, r4, #16
    2a3a:	4321      	orrs	r1, r4
    2a3c:	2384      	movs	r3, #132	; 0x84
    2a3e:	5cf4      	ldrb	r4, [r6, r3]
    2a40:	0624      	lsls	r4, r4, #24
    2a42:	4321      	orrs	r1, r4
    2a44:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    2a46:	4b1c      	ldr	r3, [pc, #112]	; (2ab8 <SYS_EncryptConf+0xa0>)
    2a48:	781b      	ldrb	r3, [r3, #0]
    2a4a:	469c      	mov	ip, r3
    2a4c:	1c1f      	adds	r7, r3, #0
    2a4e:	2b10      	cmp	r3, #16
    2a50:	d900      	bls.n	2a54 <SYS_EncryptConf+0x3c>
    2a52:	2710      	movs	r7, #16
    2a54:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2a56:	2f00      	cmp	r7, #0
    2a58:	d016      	beq.n	2a88 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    2a5a:	4b18      	ldr	r3, [pc, #96]	; (2abc <SYS_EncryptConf+0xa4>)
    2a5c:	781d      	ldrb	r5, [r3, #0]
    2a5e:	1c0b      	adds	r3, r1, #0
    2a60:	4a17      	ldr	r2, [pc, #92]	; (2ac0 <SYS_EncryptConf+0xa8>)
    2a62:	1e7c      	subs	r4, r7, #1
    2a64:	b2e4      	uxtb	r4, r4
    2a66:	190c      	adds	r4, r1, r4
    2a68:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    2a6a:	7810      	ldrb	r0, [r2, #0]
    2a6c:	7819      	ldrb	r1, [r3, #0]
    2a6e:	4041      	eors	r1, r0
    2a70:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    2a72:	2d00      	cmp	r5, #0
    2a74:	d001      	beq.n	2a7a <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    2a76:	7011      	strb	r1, [r2, #0]
    2a78:	e002      	b.n	2a80 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    2a7a:	7810      	ldrb	r0, [r2, #0]
    2a7c:	4041      	eors	r1, r0
    2a7e:	7011      	strb	r1, [r2, #0]
    2a80:	3301      	adds	r3, #1
    2a82:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2a84:	42a3      	cmp	r3, r4
    2a86:	d1f0      	bne.n	2a6a <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2a88:	4643      	mov	r3, r8
    2a8a:	18fa      	adds	r2, r7, r3
    2a8c:	4b09      	ldr	r3, [pc, #36]	; (2ab4 <SYS_EncryptConf+0x9c>)
    2a8e:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    2a90:	4663      	mov	r3, ip
    2a92:	1bdf      	subs	r7, r3, r7
    2a94:	b2ff      	uxtb	r7, r7
    2a96:	4b08      	ldr	r3, [pc, #32]	; (2ab8 <SYS_EncryptConf+0xa0>)
    2a98:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    2a9a:	2f00      	cmp	r7, #0
    2a9c:	d002      	beq.n	2aa4 <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2a9e:	2332      	movs	r3, #50	; 0x32
    2aa0:	7033      	strb	r3, [r6, #0]
    2aa2:	e001      	b.n	2aa8 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    2aa4:	2334      	movs	r3, #52	; 0x34
    2aa6:	7033      	strb	r3, [r6, #0]
	}
}
    2aa8:	bc04      	pop	{r2}
    2aaa:	4690      	mov	r8, r2
    2aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	20004144 	.word	0x20004144
    2ab4:	20004148 	.word	0x20004148
    2ab8:	20004149 	.word	0x20004149
    2abc:	2000414a 	.word	0x2000414a
    2ac0:	2000414c 	.word	0x2000414c

00002ac4 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    2ac4:	b530      	push	{r4, r5, lr}
    2ac6:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    2ac8:	4b56      	ldr	r3, [pc, #344]	; (2c24 <nwkSecurityTaskHandler+0x160>)
    2aca:	781b      	ldrb	r3, [r3, #0]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d100      	bne.n	2ad2 <nwkSecurityTaskHandler+0xe>
    2ad0:	e0a5      	b.n	2c1e <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    2ad2:	4b55      	ldr	r3, [pc, #340]	; (2c28 <nwkSecurityTaskHandler+0x164>)
    2ad4:	681c      	ldr	r4, [r3, #0]
    2ad6:	2c00      	cmp	r4, #0
    2ad8:	d100      	bne.n	2adc <nwkSecurityTaskHandler+0x18>
    2ada:	e09b      	b.n	2c14 <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    2adc:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    2ade:	2b34      	cmp	r3, #52	; 0x34
    2ae0:	d145      	bne.n	2b6e <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2ae2:	2381      	movs	r3, #129	; 0x81
    2ae4:	5ce3      	ldrb	r3, [r4, r3]
    2ae6:	2282      	movs	r2, #130	; 0x82
    2ae8:	5ca1      	ldrb	r1, [r4, r2]
    2aea:	0209      	lsls	r1, r1, #8
    2aec:	4319      	orrs	r1, r3
    2aee:	2383      	movs	r3, #131	; 0x83
    2af0:	5ce3      	ldrb	r3, [r4, r3]
    2af2:	041b      	lsls	r3, r3, #16
    2af4:	4319      	orrs	r1, r3
    2af6:	2384      	movs	r3, #132	; 0x84
    2af8:	5ce3      	ldrb	r3, [r4, r3]
    2afa:	061b      	lsls	r3, r3, #24
    2afc:	4319      	orrs	r1, r3
    2afe:	4b4b      	ldr	r3, [pc, #300]	; (2c2c <nwkSecurityTaskHandler+0x168>)
    2b00:	781b      	ldrb	r3, [r3, #0]
    2b02:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2b04:	4b4a      	ldr	r3, [pc, #296]	; (2c30 <nwkSecurityTaskHandler+0x16c>)
    2b06:	685d      	ldr	r5, [r3, #4]
    2b08:	681a      	ldr	r2, [r3, #0]
    2b0a:	4055      	eors	r5, r2
    2b0c:	689a      	ldr	r2, [r3, #8]
    2b0e:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    2b10:	68db      	ldr	r3, [r3, #12]
    2b12:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2b14:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    2b16:	4b47      	ldr	r3, [pc, #284]	; (2c34 <nwkSecurityTaskHandler+0x170>)
    2b18:	781b      	ldrb	r3, [r3, #0]
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	d009      	beq.n	2b32 <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    2b1e:	1c08      	adds	r0, r1, #0
    2b20:	4669      	mov	r1, sp
    2b22:	2204      	movs	r2, #4
    2b24:	4b44      	ldr	r3, [pc, #272]	; (2c38 <nwkSecurityTaskHandler+0x174>)
    2b26:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    2b28:	7863      	ldrb	r3, [r4, #1]
    2b2a:	3304      	adds	r3, #4
    2b2c:	7063      	strb	r3, [r4, #1]
		return true;
    2b2e:	2101      	movs	r1, #1
    2b30:	e008      	b.n	2b44 <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    2b32:	a801      	add	r0, sp, #4
    2b34:	2204      	movs	r2, #4
    2b36:	4b40      	ldr	r3, [pc, #256]	; (2c38 <nwkSecurityTaskHandler+0x174>)
    2b38:	4798      	blx	r3
		return vmic == tmic;
    2b3a:	9b01      	ldr	r3, [sp, #4]
    2b3c:	1ae9      	subs	r1, r5, r3
    2b3e:	424d      	negs	r5, r1
    2b40:	4169      	adcs	r1, r5
    2b42:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    2b44:	4b3b      	ldr	r3, [pc, #236]	; (2c34 <nwkSecurityTaskHandler+0x170>)
    2b46:	781b      	ldrb	r3, [r3, #0]
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d004      	beq.n	2b56 <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    2b4c:	4b36      	ldr	r3, [pc, #216]	; (2c28 <nwkSecurityTaskHandler+0x164>)
    2b4e:	6818      	ldr	r0, [r3, #0]
    2b50:	4b3a      	ldr	r3, [pc, #232]	; (2c3c <nwkSecurityTaskHandler+0x178>)
    2b52:	4798      	blx	r3
    2b54:	e003      	b.n	2b5e <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    2b56:	4b34      	ldr	r3, [pc, #208]	; (2c28 <nwkSecurityTaskHandler+0x164>)
    2b58:	6818      	ldr	r0, [r3, #0]
    2b5a:	4b39      	ldr	r3, [pc, #228]	; (2c40 <nwkSecurityTaskHandler+0x17c>)
    2b5c:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    2b5e:	2200      	movs	r2, #0
    2b60:	4b31      	ldr	r3, [pc, #196]	; (2c28 <nwkSecurityTaskHandler+0x164>)
    2b62:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    2b64:	4b2f      	ldr	r3, [pc, #188]	; (2c24 <nwkSecurityTaskHandler+0x160>)
    2b66:	781a      	ldrb	r2, [r3, #0]
    2b68:	3a01      	subs	r2, #1
    2b6a:	701a      	strb	r2, [r3, #0]
    2b6c:	e057      	b.n	2c1e <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    2b6e:	2b32      	cmp	r3, #50	; 0x32
    2b70:	d155      	bne.n	2c1e <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    2b72:	2333      	movs	r3, #51	; 0x33
    2b74:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    2b76:	482e      	ldr	r0, [pc, #184]	; (2c30 <nwkSecurityTaskHandler+0x16c>)
    2b78:	4932      	ldr	r1, [pc, #200]	; (2c44 <nwkSecurityTaskHandler+0x180>)
    2b7a:	4b33      	ldr	r3, [pc, #204]	; (2c48 <nwkSecurityTaskHandler+0x184>)
    2b7c:	4798      	blx	r3
    2b7e:	e04e      	b.n	2c1e <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    2b80:	7803      	ldrb	r3, [r0, #0]
    2b82:	3b30      	subs	r3, #48	; 0x30
    2b84:	2b01      	cmp	r3, #1
    2b86:	d847      	bhi.n	2c18 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    2b88:	4b27      	ldr	r3, [pc, #156]	; (2c28 <nwkSecurityTaskHandler+0x164>)
    2b8a:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    2b8c:	4a28      	ldr	r2, [pc, #160]	; (2c30 <nwkSecurityTaskHandler+0x16c>)
    2b8e:	7b01      	ldrb	r1, [r0, #12]
    2b90:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2b92:	7bc1      	ldrb	r1, [r0, #15]
    2b94:	7c04      	ldrb	r4, [r0, #16]
    2b96:	0224      	lsls	r4, r4, #8
    2b98:	430c      	orrs	r4, r1
    2b9a:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    2b9c:	7c41      	ldrb	r1, [r0, #17]
    2b9e:	0909      	lsrs	r1, r1, #4
    2ba0:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2ba2:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2ba4:	7b41      	ldrb	r1, [r0, #13]
    2ba6:	7b84      	ldrb	r4, [r0, #14]
    2ba8:	0224      	lsls	r4, r4, #8
    2baa:	430c      	orrs	r4, r1
    2bac:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    2bae:	7c41      	ldrb	r1, [r0, #17]
    2bb0:	0709      	lsls	r1, r1, #28
    2bb2:	0f09      	lsrs	r1, r1, #28
    2bb4:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2bb6:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    2bb8:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2bba:	7944      	ldrb	r4, [r0, #5]
    2bbc:	7983      	ldrb	r3, [r0, #6]
    2bbe:	021b      	lsls	r3, r3, #8
    2bc0:	4323      	orrs	r3, r4
    2bc2:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    2bc4:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2bc6:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    2bc8:	7803      	ldrb	r3, [r0, #0]
    2bca:	2b31      	cmp	r3, #49	; 0x31
    2bcc:	d102      	bne.n	2bd4 <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    2bce:	7843      	ldrb	r3, [r0, #1]
    2bd0:	3b04      	subs	r3, #4
    2bd2:	7043      	strb	r3, [r0, #1]
    2bd4:	1c83      	adds	r3, r0, #2
    2bd6:	2281      	movs	r2, #129	; 0x81
    2bd8:	5c81      	ldrb	r1, [r0, r2]
    2bda:	2282      	movs	r2, #130	; 0x82
    2bdc:	5c82      	ldrb	r2, [r0, r2]
    2bde:	0212      	lsls	r2, r2, #8
    2be0:	430a      	orrs	r2, r1
    2be2:	2183      	movs	r1, #131	; 0x83
    2be4:	5c41      	ldrb	r1, [r0, r1]
    2be6:	0409      	lsls	r1, r1, #16
    2be8:	430a      	orrs	r2, r1
    2bea:	2184      	movs	r1, #132	; 0x84
    2bec:	5c41      	ldrb	r1, [r0, r1]
    2bee:	0609      	lsls	r1, r1, #24
    2bf0:	430a      	orrs	r2, r1
    2bf2:	1a9a      	subs	r2, r3, r2
    2bf4:	7843      	ldrb	r3, [r0, #1]
    2bf6:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    2bf8:	4b14      	ldr	r3, [pc, #80]	; (2c4c <nwkSecurityTaskHandler+0x188>)
    2bfa:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    2bfc:	2200      	movs	r2, #0
    2bfe:	4b0b      	ldr	r3, [pc, #44]	; (2c2c <nwkSecurityTaskHandler+0x168>)
    2c00:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    2c02:	7802      	ldrb	r2, [r0, #0]
    2c04:	3a30      	subs	r2, #48	; 0x30
    2c06:	4253      	negs	r3, r2
    2c08:	415a      	adcs	r2, r3
    2c0a:	4b0a      	ldr	r3, [pc, #40]	; (2c34 <nwkSecurityTaskHandler+0x170>)
    2c0c:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2c0e:	2332      	movs	r3, #50	; 0x32
    2c10:	7003      	strb	r3, [r0, #0]
    2c12:	e004      	b.n	2c1e <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    2c14:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c16:	4c0e      	ldr	r4, [pc, #56]	; (2c50 <nwkSecurityTaskHandler+0x18c>)
    2c18:	47a0      	blx	r4
    2c1a:	2800      	cmp	r0, #0
    2c1c:	d1b0      	bne.n	2b80 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    2c1e:	b003      	add	sp, #12
    2c20:	bd30      	pop	{r4, r5, pc}
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	20004140 	.word	0x20004140
    2c28:	20004144 	.word	0x20004144
    2c2c:	20004148 	.word	0x20004148
    2c30:	2000414c 	.word	0x2000414c
    2c34:	2000414a 	.word	0x2000414a
    2c38:	00005879 	.word	0x00005879
    2c3c:	00002ec1 	.word	0x00002ec1
    2c40:	000025fd 	.word	0x000025fd
    2c44:	20004498 	.word	0x20004498
    2c48:	00001a01 	.word	0x00001a01
    2c4c:	20004149 	.word	0x20004149
    2c50:	00002135 	.word	0x00002135

00002c54 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c56:	4647      	mov	r7, r8
    2c58:	b480      	push	{r7}
    2c5a:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2c5c:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2c5e:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c60:	4c0f      	ldr	r4, [pc, #60]	; (2ca0 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c62:	2686      	movs	r6, #134	; 0x86
    2c64:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c66:	e010      	b.n	2c8a <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2c68:	7803      	ldrb	r3, [r0, #0]
    2c6a:	2b11      	cmp	r3, #17
    2c6c:	d10d      	bne.n	2c8a <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2c6e:	5d82      	ldrb	r2, [r0, r6]
    2c70:	5d43      	ldrb	r3, [r0, r5]
    2c72:	021b      	lsls	r3, r3, #8
    2c74:	4313      	orrs	r3, r2
    2c76:	3b01      	subs	r3, #1
    2c78:	b29b      	uxth	r3, r3
    2c7a:	5583      	strb	r3, [r0, r6]
    2c7c:	0a1a      	lsrs	r2, r3, #8
    2c7e:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2c80:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2c82:	2b00      	cmp	r3, #0
    2c84:	d101      	bne.n	2c8a <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    2c86:	2313      	movs	r3, #19
    2c88:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2c8a:	47a0      	blx	r4
    2c8c:	2800      	cmp	r0, #0
    2c8e:	d1eb      	bne.n	2c68 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2c90:	2f00      	cmp	r7, #0
    2c92:	d002      	beq.n	2c9a <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    2c94:	4640      	mov	r0, r8
    2c96:	4b03      	ldr	r3, [pc, #12]	; (2ca4 <nwkTxDelayTimerHandler+0x50>)
    2c98:	4798      	blx	r3
	}
}
    2c9a:	bc04      	pop	{r2}
    2c9c:	4690      	mov	r8, r2
    2c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ca0:	00002135 	.word	0x00002135
    2ca4:	00001af9 	.word	0x00001af9

00002ca8 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2caa:	4647      	mov	r7, r8
    2cac:	b480      	push	{r7}
    2cae:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2cb0:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2cb2:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cb4:	4c11      	ldr	r4, [pc, #68]	; (2cfc <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2cb6:	2686      	movs	r6, #134	; 0x86
    2cb8:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2cba:	e013      	b.n	2ce4 <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2cbc:	7803      	ldrb	r3, [r0, #0]
    2cbe:	2b16      	cmp	r3, #22
    2cc0:	d110      	bne.n	2ce4 <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2cc2:	5d82      	ldrb	r2, [r0, r6]
    2cc4:	5d43      	ldrb	r3, [r0, r5]
    2cc6:	021b      	lsls	r3, r3, #8
    2cc8:	4313      	orrs	r3, r2
    2cca:	3b01      	subs	r3, #1
    2ccc:	b29b      	uxth	r3, r3
    2cce:	5583      	strb	r3, [r0, r6]
    2cd0:	0a1a      	lsrs	r2, r3, #8
    2cd2:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2cd4:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d104      	bne.n	2ce4 <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2cda:	2317      	movs	r3, #23
    2cdc:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2cde:	2210      	movs	r2, #16
    2ce0:	2385      	movs	r3, #133	; 0x85
    2ce2:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ce4:	47a0      	blx	r4
    2ce6:	2800      	cmp	r0, #0
    2ce8:	d1e8      	bne.n	2cbc <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2cea:	2f00      	cmp	r7, #0
    2cec:	d002      	beq.n	2cf4 <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    2cee:	4640      	mov	r0, r8
    2cf0:	4b03      	ldr	r3, [pc, #12]	; (2d00 <nwkTxAckWaitTimerHandler+0x58>)
    2cf2:	4798      	blx	r3
	}
}
    2cf4:	bc04      	pop	{r2}
    2cf6:	4690      	mov	r8, r2
    2cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	00002135 	.word	0x00002135
    2d00:	00001af9 	.word	0x00001af9

00002d04 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    2d04:	2200      	movs	r2, #0
    2d06:	4b07      	ldr	r3, [pc, #28]	; (2d24 <nwkTxInit+0x20>)
    2d08:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2d0a:	4b07      	ldr	r3, [pc, #28]	; (2d28 <nwkTxInit+0x24>)
    2d0c:	2132      	movs	r1, #50	; 0x32
    2d0e:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2d10:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2d12:	4906      	ldr	r1, [pc, #24]	; (2d2c <nwkTxInit+0x28>)
    2d14:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2d16:	4b06      	ldr	r3, [pc, #24]	; (2d30 <nwkTxInit+0x2c>)
    2d18:	210a      	movs	r1, #10
    2d1a:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2d1c:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2d1e:	4a05      	ldr	r2, [pc, #20]	; (2d34 <nwkTxInit+0x30>)
    2d20:	611a      	str	r2, [r3, #16]
}
    2d22:	4770      	bx	lr
    2d24:	20004170 	.word	0x20004170
    2d28:	2000415c 	.word	0x2000415c
    2d2c:	00002ca9 	.word	0x00002ca9
    2d30:	20004174 	.word	0x20004174
    2d34:	00002c55 	.word	0x00002c55

00002d38 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    2d38:	b510      	push	{r4, lr}
    2d3a:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    2d3c:	2388      	movs	r3, #136	; 0x88
    2d3e:	5cc3      	ldrb	r3, [r0, r3]
    2d40:	0799      	lsls	r1, r3, #30
    2d42:	d502      	bpl.n	2d4a <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    2d44:	2212      	movs	r2, #18
    2d46:	7002      	strb	r2, [r0, #0]
    2d48:	e007      	b.n	2d5a <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    2d4a:	7ac2      	ldrb	r2, [r0, #11]
    2d4c:	0791      	lsls	r1, r2, #30
    2d4e:	d502      	bpl.n	2d56 <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    2d50:	2210      	movs	r2, #16
    2d52:	7002      	strb	r2, [r0, #0]
    2d54:	e001      	b.n	2d5a <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    2d56:	2212      	movs	r2, #18
    2d58:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    2d5a:	2100      	movs	r1, #0
    2d5c:	2285      	movs	r2, #133	; 0x85
    2d5e:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    2d60:	07da      	lsls	r2, r3, #31
    2d62:	d504      	bpl.n	2d6e <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    2d64:	2101      	movs	r1, #1
    2d66:	4249      	negs	r1, r1
    2d68:	7161      	strb	r1, [r4, #5]
    2d6a:	71a1      	strb	r1, [r4, #6]
    2d6c:	e004      	b.n	2d78 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    2d6e:	491e      	ldr	r1, [pc, #120]	; (2de8 <nwkTxFrame+0xb0>)
    2d70:	7888      	ldrb	r0, [r1, #2]
    2d72:	7160      	strb	r0, [r4, #5]
    2d74:	78c9      	ldrb	r1, [r1, #3]
    2d76:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    2d78:	2205      	movs	r2, #5
    2d7a:	421a      	tst	r2, r3
    2d7c:	d103      	bne.n	2d86 <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    2d7e:	1c20      	adds	r0, r4, #0
    2d80:	4b1a      	ldr	r3, [pc, #104]	; (2dec <nwkTxFrame+0xb4>)
    2d82:	4798      	blx	r3
    2d84:	e003      	b.n	2d8e <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    2d86:	7be1      	ldrb	r1, [r4, #15]
    2d88:	7c22      	ldrb	r2, [r4, #16]
    2d8a:	71e1      	strb	r1, [r4, #7]
    2d8c:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    2d8e:	4a16      	ldr	r2, [pc, #88]	; (2de8 <nwkTxFrame+0xb0>)
    2d90:	7811      	ldrb	r1, [r2, #0]
    2d92:	7261      	strb	r1, [r4, #9]
    2d94:	7851      	ldrb	r1, [r2, #1]
    2d96:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    2d98:	7951      	ldrb	r1, [r2, #5]
    2d9a:	3101      	adds	r1, #1
    2d9c:	b2c9      	uxtb	r1, r1
    2d9e:	7151      	strb	r1, [r2, #5]
    2da0:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    2da2:	79e1      	ldrb	r1, [r4, #7]
    2da4:	7a22      	ldrb	r2, [r4, #8]
    2da6:	0212      	lsls	r2, r2, #8
    2da8:	430a      	orrs	r2, r1
    2daa:	4b11      	ldr	r3, [pc, #68]	; (2df0 <nwkTxFrame+0xb8>)
    2dac:	429a      	cmp	r2, r3
    2dae:	d110      	bne.n	2dd2 <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    2db0:	2341      	movs	r3, #65	; 0x41
    2db2:	70a3      	strb	r3, [r4, #2]
    2db4:	2378      	movs	r3, #120	; 0x78
    2db6:	425b      	negs	r3, r3
    2db8:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2dba:	4b0e      	ldr	r3, [pc, #56]	; (2df4 <nwkTxFrame+0xbc>)
    2dbc:	4798      	blx	r3
    2dbe:	2307      	movs	r3, #7
    2dc0:	4018      	ands	r0, r3
    2dc2:	3001      	adds	r0, #1
    2dc4:	2386      	movs	r3, #134	; 0x86
    2dc6:	54e0      	strb	r0, [r4, r3]
    2dc8:	0a00      	lsrs	r0, r0, #8
    2dca:	b280      	uxth	r0, r0
    2dcc:	2387      	movs	r3, #135	; 0x87
    2dce:	54e0      	strb	r0, [r4, r3]
    2dd0:	e009      	b.n	2de6 <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    2dd2:	2361      	movs	r3, #97	; 0x61
    2dd4:	70a3      	strb	r3, [r4, #2]
    2dd6:	2378      	movs	r3, #120	; 0x78
    2dd8:	425b      	negs	r3, r3
    2dda:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    2ddc:	2200      	movs	r2, #0
    2dde:	2386      	movs	r3, #134	; 0x86
    2de0:	54e2      	strb	r2, [r4, r3]
    2de2:	2387      	movs	r3, #135	; 0x87
    2de4:	54e2      	strb	r2, [r4, r3]
	}
}
    2de6:	bd10      	pop	{r4, pc}
    2de8:	20004450 	.word	0x20004450
    2dec:	000023c9 	.word	0x000023c9
    2df0:	0000ffff 	.word	0x0000ffff
    2df4:	000058d1 	.word	0x000058d1

00002df8 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    2df8:	b538      	push	{r3, r4, r5, lr}
    2dfa:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    2dfc:	4b1d      	ldr	r3, [pc, #116]	; (2e74 <nwkTxBroadcastFrame+0x7c>)
    2dfe:	4798      	blx	r3
    2e00:	1e04      	subs	r4, r0, #0
    2e02:	d036      	beq.n	2e72 <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    2e04:	2312      	movs	r3, #18
    2e06:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    2e08:	786b      	ldrb	r3, [r5, #1]
    2e0a:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    2e0c:	2200      	movs	r2, #0
    2e0e:	2385      	movs	r3, #133	; 0x85
    2e10:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2e12:	4b19      	ldr	r3, [pc, #100]	; (2e78 <nwkTxBroadcastFrame+0x80>)
    2e14:	4798      	blx	r3
    2e16:	2307      	movs	r3, #7
    2e18:	4018      	ands	r0, r3
    2e1a:	3001      	adds	r0, #1
    2e1c:	2386      	movs	r3, #134	; 0x86
    2e1e:	54e0      	strb	r0, [r4, r3]
    2e20:	0a00      	lsrs	r0, r0, #8
    2e22:	b280      	uxth	r0, r0
    2e24:	2387      	movs	r3, #135	; 0x87
    2e26:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    2e28:	2200      	movs	r2, #0
    2e2a:	2389      	movs	r3, #137	; 0x89
    2e2c:	54e2      	strb	r2, [r4, r3]
    2e2e:	238a      	movs	r3, #138	; 0x8a
    2e30:	54e2      	strb	r2, [r4, r3]
    2e32:	238b      	movs	r3, #139	; 0x8b
    2e34:	54e2      	strb	r2, [r4, r3]
    2e36:	238c      	movs	r3, #140	; 0x8c
    2e38:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    2e3a:	1ca0      	adds	r0, r4, #2
    2e3c:	786a      	ldrb	r2, [r5, #1]
    2e3e:	1ca9      	adds	r1, r5, #2
    2e40:	4b0e      	ldr	r3, [pc, #56]	; (2e7c <nwkTxBroadcastFrame+0x84>)
    2e42:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    2e44:	2341      	movs	r3, #65	; 0x41
    2e46:	70a3      	strb	r3, [r4, #2]
    2e48:	2378      	movs	r3, #120	; 0x78
    2e4a:	425b      	negs	r3, r3
    2e4c:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    2e4e:	2301      	movs	r3, #1
    2e50:	425b      	negs	r3, r3
    2e52:	71e3      	strb	r3, [r4, #7]
    2e54:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    2e56:	796a      	ldrb	r2, [r5, #5]
    2e58:	79ab      	ldrb	r3, [r5, #6]
    2e5a:	7162      	strb	r2, [r4, #5]
    2e5c:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    2e5e:	4b08      	ldr	r3, [pc, #32]	; (2e80 <nwkTxBroadcastFrame+0x88>)
    2e60:	781a      	ldrb	r2, [r3, #0]
    2e62:	7262      	strb	r2, [r4, #9]
    2e64:	785a      	ldrb	r2, [r3, #1]
    2e66:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    2e68:	795a      	ldrb	r2, [r3, #5]
    2e6a:	3201      	adds	r2, #1
    2e6c:	b2d2      	uxtb	r2, r2
    2e6e:	715a      	strb	r2, [r3, #5]
    2e70:	7122      	strb	r2, [r4, #4]
}
    2e72:	bd38      	pop	{r3, r4, r5, pc}
    2e74:	000020b1 	.word	0x000020b1
    2e78:	000058d1 	.word	0x000058d1
    2e7c:	00005879 	.word	0x00005879
    2e80:	20004450 	.word	0x20004450

00002e84 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2e84:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2e86:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2e88:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2e8a:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2e8c:	2b03      	cmp	r3, #3
    2e8e:	d113      	bne.n	2eb8 <nwkTxAckReceived+0x34>
    2e90:	e00d      	b.n	2eae <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2e92:	7803      	ldrb	r3, [r0, #0]
    2e94:	2b16      	cmp	r3, #22
    2e96:	d10c      	bne.n	2eb2 <nwkTxAckReceived+0x2e>
    2e98:	7b02      	ldrb	r2, [r0, #12]
    2e9a:	786b      	ldrb	r3, [r5, #1]
    2e9c:	429a      	cmp	r2, r3
    2e9e:	d108      	bne.n	2eb2 <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2ea0:	2317      	movs	r3, #23
    2ea2:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2ea4:	78aa      	ldrb	r2, [r5, #2]
    2ea6:	2388      	movs	r3, #136	; 0x88
    2ea8:	54c2      	strb	r2, [r0, r3]
			return true;
    2eaa:	2001      	movs	r0, #1
    2eac:	e004      	b.n	2eb8 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2eae:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2eb0:	4c02      	ldr	r4, [pc, #8]	; (2ebc <nwkTxAckReceived+0x38>)
    2eb2:	47a0      	blx	r4
    2eb4:	2800      	cmp	r0, #0
    2eb6:	d1ec      	bne.n	2e92 <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    2eb8:	bd38      	pop	{r3, r4, r5, pc}
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	00002135 	.word	0x00002135

00002ec0 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    2ec0:	2312      	movs	r3, #18
    2ec2:	7003      	strb	r3, [r0, #0]
}
    2ec4:	4770      	bx	lr
    2ec6:	46c0      	nop			; (mov r8, r8)

00002ec8 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2ec8:	4b0d      	ldr	r3, [pc, #52]	; (2f00 <PHY_DataConf+0x38>)
    2eca:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    2ecc:	2801      	cmp	r0, #1
    2ece:	d009      	beq.n	2ee4 <PHY_DataConf+0x1c>
    2ed0:	2800      	cmp	r0, #0
    2ed2:	d003      	beq.n	2edc <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    2ed4:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    2ed6:	2802      	cmp	r0, #2
    2ed8:	d005      	beq.n	2ee6 <PHY_DataConf+0x1e>
    2eda:	e001      	b.n	2ee0 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    2edc:	2200      	movs	r2, #0
    2ede:	e002      	b.n	2ee6 <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    2ee0:	2201      	movs	r2, #1
    2ee2:	e000      	b.n	2ee6 <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    2ee4:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2ee6:	2185      	movs	r1, #133	; 0x85
    2ee8:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    2eea:	2215      	movs	r2, #21
    2eec:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    2eee:	2200      	movs	r2, #0
    2ef0:	4b03      	ldr	r3, [pc, #12]	; (2f00 <PHY_DataConf+0x38>)
    2ef2:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    2ef4:	4a03      	ldr	r2, [pc, #12]	; (2f04 <PHY_DataConf+0x3c>)
    2ef6:	2358      	movs	r3, #88	; 0x58
    2ef8:	5ad1      	ldrh	r1, [r2, r3]
    2efa:	3901      	subs	r1, #1
    2efc:	52d1      	strh	r1, [r2, r3]
}
    2efe:	4770      	bx	lr
    2f00:	20004170 	.word	0x20004170
    2f04:	20004450 	.word	0x20004450

00002f08 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    2f08:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    2f0a:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2f0c:	4d37      	ldr	r5, [pc, #220]	; (2fec <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    2f0e:	4e38      	ldr	r6, [pc, #224]	; (2ff0 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2f10:	e066      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    2f12:	7823      	ldrb	r3, [r4, #0]
    2f14:	3b10      	subs	r3, #16
    2f16:	b2da      	uxtb	r2, r3
    2f18:	2a07      	cmp	r2, #7
    2f1a:	d861      	bhi.n	2fe0 <nwkTxTaskHandler+0xd8>
    2f1c:	0093      	lsls	r3, r2, #2
    2f1e:	58f3      	ldr	r3, [r6, r3]
    2f20:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    2f22:	1c20      	adds	r0, r4, #0
    2f24:	2101      	movs	r1, #1
    2f26:	4b33      	ldr	r3, [pc, #204]	; (2ff4 <nwkTxTaskHandler+0xec>)
    2f28:	4798      	blx	r3
		}
		break;
    2f2a:	e059      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    2f2c:	2386      	movs	r3, #134	; 0x86
    2f2e:	5ce2      	ldrb	r2, [r4, r3]
    2f30:	2387      	movs	r3, #135	; 0x87
    2f32:	5ce3      	ldrb	r3, [r4, r3]
    2f34:	021b      	lsls	r3, r3, #8
    2f36:	4313      	orrs	r3, r2
    2f38:	d005      	beq.n	2f46 <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    2f3a:	2311      	movs	r3, #17
    2f3c:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    2f3e:	482e      	ldr	r0, [pc, #184]	; (2ff8 <nwkTxTaskHandler+0xf0>)
    2f40:	4b2e      	ldr	r3, [pc, #184]	; (2ffc <nwkTxTaskHandler+0xf4>)
    2f42:	4798      	blx	r3
    2f44:	e04c      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    2f46:	2313      	movs	r3, #19
    2f48:	7023      	strb	r3, [r4, #0]
    2f4a:	e049      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    2f4c:	4b2c      	ldr	r3, [pc, #176]	; (3000 <nwkTxTaskHandler+0xf8>)
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	2b00      	cmp	r3, #0
    2f52:	d145      	bne.n	2fe0 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    2f54:	4b2a      	ldr	r3, [pc, #168]	; (3000 <nwkTxTaskHandler+0xf8>)
    2f56:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2f58:	2314      	movs	r3, #20
    2f5a:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    2f5c:	1c60      	adds	r0, r4, #1
    2f5e:	4b29      	ldr	r3, [pc, #164]	; (3004 <nwkTxTaskHandler+0xfc>)
    2f60:	4798      	blx	r3
				nwkIb.lock++;
    2f62:	4a29      	ldr	r2, [pc, #164]	; (3008 <nwkTxTaskHandler+0x100>)
    2f64:	2358      	movs	r3, #88	; 0x58
    2f66:	5ad1      	ldrh	r1, [r2, r3]
    2f68:	3101      	adds	r1, #1
    2f6a:	52d1      	strh	r1, [r2, r3]
    2f6c:	e038      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2f6e:	2385      	movs	r3, #133	; 0x85
    2f70:	5ce3      	ldrb	r3, [r4, r3]
    2f72:	2b00      	cmp	r3, #0
    2f74:	d119      	bne.n	2faa <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    2f76:	7b61      	ldrb	r1, [r4, #13]
    2f78:	7ba3      	ldrb	r3, [r4, #14]
    2f7a:	021b      	lsls	r3, r3, #8
    2f7c:	4a22      	ldr	r2, [pc, #136]	; (3008 <nwkTxTaskHandler+0x100>)
    2f7e:	8812      	ldrh	r2, [r2, #0]
    2f80:	430b      	orrs	r3, r1
    2f82:	429a      	cmp	r2, r3
    2f84:	d10e      	bne.n	2fa4 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    2f86:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    2f88:	07da      	lsls	r2, r3, #31
    2f8a:	d50b      	bpl.n	2fa4 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    2f8c:	2316      	movs	r3, #22
    2f8e:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2f90:	2215      	movs	r2, #21
    2f92:	2386      	movs	r3, #134	; 0x86
    2f94:	54e2      	strb	r2, [r4, r3]
    2f96:	2200      	movs	r2, #0
    2f98:	2387      	movs	r3, #135	; 0x87
    2f9a:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    2f9c:	481b      	ldr	r0, [pc, #108]	; (300c <nwkTxTaskHandler+0x104>)
    2f9e:	4b17      	ldr	r3, [pc, #92]	; (2ffc <nwkTxTaskHandler+0xf4>)
    2fa0:	4798      	blx	r3
    2fa2:	e01d      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    2fa4:	2317      	movs	r3, #23
    2fa6:	7023      	strb	r3, [r4, #0]
    2fa8:	e01a      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    2faa:	2317      	movs	r3, #23
    2fac:	7023      	strb	r3, [r4, #0]
    2fae:	e017      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    2fb0:	1c20      	adds	r0, r4, #0
    2fb2:	4b17      	ldr	r3, [pc, #92]	; (3010 <nwkTxTaskHandler+0x108>)
    2fb4:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    2fb6:	2389      	movs	r3, #137	; 0x89
    2fb8:	5ce2      	ldrb	r2, [r4, r3]
    2fba:	238a      	movs	r3, #138	; 0x8a
    2fbc:	5ce3      	ldrb	r3, [r4, r3]
    2fbe:	021b      	lsls	r3, r3, #8
    2fc0:	4313      	orrs	r3, r2
    2fc2:	228b      	movs	r2, #139	; 0x8b
    2fc4:	5ca2      	ldrb	r2, [r4, r2]
    2fc6:	0412      	lsls	r2, r2, #16
    2fc8:	4313      	orrs	r3, r2
    2fca:	228c      	movs	r2, #140	; 0x8c
    2fcc:	5ca2      	ldrb	r2, [r4, r2]
    2fce:	0612      	lsls	r2, r2, #24
    2fd0:	4313      	orrs	r3, r2
    2fd2:	d103      	bne.n	2fdc <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    2fd4:	1c20      	adds	r0, r4, #0
    2fd6:	4b0f      	ldr	r3, [pc, #60]	; (3014 <nwkTxTaskHandler+0x10c>)
    2fd8:	4798      	blx	r3
    2fda:	e001      	b.n	2fe0 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    2fdc:	1c20      	adds	r0, r4, #0
    2fde:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2fe0:	1c20      	adds	r0, r4, #0
    2fe2:	47a8      	blx	r5
    2fe4:	1e04      	subs	r4, r0, #0
    2fe6:	d194      	bne.n	2f12 <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    2fe8:	bd70      	pop	{r4, r5, r6, pc}
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	00002135 	.word	0x00002135
    2ff0:	00006860 	.word	0x00006860
    2ff4:	000029fd 	.word	0x000029fd
    2ff8:	20004174 	.word	0x20004174
    2ffc:	00001af9 	.word	0x00001af9
    3000:	20004170 	.word	0x20004170
    3004:	00001cf5 	.word	0x00001cf5
    3008:	20004450 	.word	0x20004450
    300c:	2000415c 	.word	0x2000415c
    3010:	00002339 	.word	0x00002339
    3014:	00002121 	.word	0x00002121

00003018 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3018:	1c03      	adds	r3, r0, #0
    301a:	3308      	adds	r3, #8
    301c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    301e:	2201      	movs	r2, #1
    3020:	4252      	negs	r2, r2
    3022:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3024:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3026:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3028:	2300      	movs	r3, #0
    302a:	6003      	str	r3, [r0, #0]
}
    302c:	4770      	bx	lr
    302e:	46c0      	nop			; (mov r8, r8)

00003030 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3030:	2300      	movs	r3, #0
    3032:	6103      	str	r3, [r0, #16]
}
    3034:	4770      	bx	lr
    3036:	46c0      	nop			; (mov r8, r8)

00003038 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    3038:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    303a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    303c:	689a      	ldr	r2, [r3, #8]
    303e:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3040:	689a      	ldr	r2, [r3, #8]
    3042:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    3044:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3046:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3048:	6803      	ldr	r3, [r0, #0]
    304a:	3301      	adds	r3, #1
    304c:	6003      	str	r3, [r0, #0]
}
    304e:	4770      	bx	lr

00003050 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3050:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3052:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3054:	1c02      	adds	r2, r0, #0
    3056:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3058:	1c63      	adds	r3, r4, #1
    305a:	d101      	bne.n	3060 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    305c:	6902      	ldr	r2, [r0, #16]
    305e:	e005      	b.n	306c <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3060:	6853      	ldr	r3, [r2, #4]
    3062:	681d      	ldr	r5, [r3, #0]
    3064:	42ac      	cmp	r4, r5
    3066:	d301      	bcc.n	306c <vListInsert+0x1c>
    3068:	1c1a      	adds	r2, r3, #0
    306a:	e7f9      	b.n	3060 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    306c:	6853      	ldr	r3, [r2, #4]
    306e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3070:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3072:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    3074:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3076:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    3078:	6803      	ldr	r3, [r0, #0]
    307a:	3301      	adds	r3, #1
    307c:	6003      	str	r3, [r0, #0]
}
    307e:	bd30      	pop	{r4, r5, pc}

00003080 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    3080:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3082:	6842      	ldr	r2, [r0, #4]
    3084:	6881      	ldr	r1, [r0, #8]
    3086:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3088:	6882      	ldr	r2, [r0, #8]
    308a:	6841      	ldr	r1, [r0, #4]
    308c:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    308e:	685a      	ldr	r2, [r3, #4]
    3090:	4282      	cmp	r2, r0
    3092:	d101      	bne.n	3098 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3094:	6892      	ldr	r2, [r2, #8]
    3096:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3098:	2200      	movs	r2, #0
    309a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    309c:	6818      	ldr	r0, [r3, #0]
    309e:	3801      	subs	r0, #1
    30a0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    30a2:	4770      	bx	lr

000030a4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    30a4:	b538      	push	{r3, r4, r5, lr}
    30a6:	1c04      	adds	r4, r0, #0
    30a8:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    30aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
    30ac:	2a00      	cmp	r2, #0
    30ae:	d108      	bne.n	30c2 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    30b0:	6801      	ldr	r1, [r0, #0]
    30b2:	2900      	cmp	r1, #0
    30b4:	d12a      	bne.n	310c <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    30b6:	6840      	ldr	r0, [r0, #4]
    30b8:	4b16      	ldr	r3, [pc, #88]	; (3114 <prvCopyDataToQueue+0x70>)
    30ba:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    30bc:	2300      	movs	r3, #0
    30be:	6063      	str	r3, [r4, #4]
    30c0:	e024      	b.n	310c <prvCopyDataToQueue+0x68>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    30c2:	2d00      	cmp	r5, #0
    30c4:	d10c      	bne.n	30e0 <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    30c6:	6880      	ldr	r0, [r0, #8]
    30c8:	4b13      	ldr	r3, [pc, #76]	; (3118 <prvCopyDataToQueue+0x74>)
    30ca:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    30cc:	68a2      	ldr	r2, [r4, #8]
    30ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
    30d0:	1853      	adds	r3, r2, r1
    30d2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    30d4:	6862      	ldr	r2, [r4, #4]
    30d6:	4293      	cmp	r3, r2
    30d8:	d318      	bcc.n	310c <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    30da:	6823      	ldr	r3, [r4, #0]
    30dc:	60a3      	str	r3, [r4, #8]
    30de:	e015      	b.n	310c <prvCopyDataToQueue+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    30e0:	68c0      	ldr	r0, [r0, #12]
    30e2:	4b0d      	ldr	r3, [pc, #52]	; (3118 <prvCopyDataToQueue+0x74>)
    30e4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    30e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    30e8:	424a      	negs	r2, r1
    30ea:	68e1      	ldr	r1, [r4, #12]
    30ec:	188b      	adds	r3, r1, r2
    30ee:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    30f0:	6821      	ldr	r1, [r4, #0]
    30f2:	428b      	cmp	r3, r1
    30f4:	d202      	bcs.n	30fc <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    30f6:	6863      	ldr	r3, [r4, #4]
    30f8:	189a      	adds	r2, r3, r2
    30fa:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    30fc:	2d02      	cmp	r5, #2
    30fe:	d105      	bne.n	310c <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3102:	2b00      	cmp	r3, #0
    3104:	d002      	beq.n	310c <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    3106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3108:	3b01      	subs	r3, #1
    310a:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    310c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    310e:	3301      	adds	r3, #1
    3110:	63a3      	str	r3, [r4, #56]	; 0x38
}
    3112:	bd38      	pop	{r3, r4, r5, pc}
    3114:	00003c71 	.word	0x00003c71
    3118:	00005879 	.word	0x00005879

0000311c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    311c:	b510      	push	{r4, lr}
    311e:	b082      	sub	sp, #8
    3120:	9001      	str	r0, [sp, #4]
    3122:	1c0a      	adds	r2, r1, #0
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    3124:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    3126:	2c00      	cmp	r4, #0
    3128:	d101      	bne.n	312e <prvNotifyQueueSetContainer+0x12>
    312a:	b672      	cpsid	i
    312c:	e7fe      	b.n	312c <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    312e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3132:	4299      	cmp	r1, r3
    3134:	d301      	bcc.n	313a <prvNotifyQueueSetContainer+0x1e>
    3136:	b672      	cpsid	i
    3138:	e7fe      	b.n	3138 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    313a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    313c:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    313e:	428b      	cmp	r3, r1
    3140:	d90d      	bls.n	315e <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    3142:	1c20      	adds	r0, r4, #0
    3144:	a901      	add	r1, sp, #4
    3146:	4b07      	ldr	r3, [pc, #28]	; (3164 <prvNotifyQueueSetContainer+0x48>)
    3148:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    314a:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    314c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    314e:	2b00      	cmp	r3, #0
    3150:	d005      	beq.n	315e <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    3152:	1c20      	adds	r0, r4, #0
    3154:	3024      	adds	r0, #36	; 0x24
    3156:	4b04      	ldr	r3, [pc, #16]	; (3168 <prvNotifyQueueSetContainer+0x4c>)
    3158:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    315a:	1e43      	subs	r3, r0, #1
    315c:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    315e:	b002      	add	sp, #8
    3160:	bd10      	pop	{r4, pc}
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	000030a5 	.word	0x000030a5
    3168:	00003aa1 	.word	0x00003aa1

0000316c <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    316c:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    316e:	6804      	ldr	r4, [r0, #0]
    3170:	2c00      	cmp	r4, #0
    3172:	d00c      	beq.n	318e <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3174:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3176:	68c5      	ldr	r5, [r0, #12]
    3178:	18ab      	adds	r3, r5, r2
    317a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    317c:	6845      	ldr	r5, [r0, #4]
    317e:	42ab      	cmp	r3, r5
    3180:	d300      	bcc.n	3184 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3182:	60c4      	str	r4, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3184:	68c3      	ldr	r3, [r0, #12]
    3186:	1c08      	adds	r0, r1, #0
    3188:	1c19      	adds	r1, r3, #0
    318a:	4b01      	ldr	r3, [pc, #4]	; (3190 <prvCopyDataFromQueue+0x24>)
    318c:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    318e:	bd38      	pop	{r3, r4, r5, pc}
    3190:	00005879 	.word	0x00005879

00003194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    3194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3196:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3198:	4b23      	ldr	r3, [pc, #140]	; (3228 <prvUnlockQueue+0x94>)
    319a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    319c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    319e:	2b00      	cmp	r3, #0
    31a0:	dd1c      	ble.n	31dc <prvUnlockQueue+0x48>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31a2:	4e22      	ldr	r6, [pc, #136]	; (322c <prvUnlockQueue+0x98>)
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    31a4:	4d22      	ldr	r5, [pc, #136]	; (3230 <prvUnlockQueue+0x9c>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    31a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    31a8:	2b00      	cmp	r3, #0
    31aa:	d007      	beq.n	31bc <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    31ac:	1c20      	adds	r0, r4, #0
    31ae:	2100      	movs	r1, #0
    31b0:	47a8      	blx	r5
    31b2:	2801      	cmp	r0, #1
    31b4:	d10c      	bne.n	31d0 <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    31b6:	4b1f      	ldr	r3, [pc, #124]	; (3234 <prvUnlockQueue+0xa0>)
    31b8:	4798      	blx	r3
    31ba:	e009      	b.n	31d0 <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31be:	2b00      	cmp	r3, #0
    31c0:	d00c      	beq.n	31dc <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31c2:	1c20      	adds	r0, r4, #0
    31c4:	3024      	adds	r0, #36	; 0x24
    31c6:	47b0      	blx	r6
    31c8:	2800      	cmp	r0, #0
    31ca:	d001      	beq.n	31d0 <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    31cc:	4b19      	ldr	r3, [pc, #100]	; (3234 <prvUnlockQueue+0xa0>)
    31ce:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    31d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    31d2:	3b01      	subs	r3, #1
    31d4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    31d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    31d8:	2b00      	cmp	r3, #0
    31da:	dce4      	bgt.n	31a6 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    31dc:	2301      	movs	r3, #1
    31de:	425b      	negs	r3, r3
    31e0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    31e2:	4b15      	ldr	r3, [pc, #84]	; (3238 <prvUnlockQueue+0xa4>)
    31e4:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    31e6:	4b10      	ldr	r3, [pc, #64]	; (3228 <prvUnlockQueue+0x94>)
    31e8:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    31ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
    31ec:	2b00      	cmp	r3, #0
    31ee:	dd15      	ble.n	321c <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31f0:	6923      	ldr	r3, [r4, #16]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d012      	beq.n	321c <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    31f6:	1c27      	adds	r7, r4, #0
    31f8:	3710      	adds	r7, #16
    31fa:	4e0c      	ldr	r6, [pc, #48]	; (322c <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
    31fc:	4d0d      	ldr	r5, [pc, #52]	; (3234 <prvUnlockQueue+0xa0>)
    31fe:	e002      	b.n	3206 <prvUnlockQueue+0x72>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3200:	6923      	ldr	r3, [r4, #16]
    3202:	2b00      	cmp	r3, #0
    3204:	d00a      	beq.n	321c <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3206:	1c38      	adds	r0, r7, #0
    3208:	47b0      	blx	r6
    320a:	2800      	cmp	r0, #0
    320c:	d000      	beq.n	3210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    320e:	47a8      	blx	r5
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    3210:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3212:	3b01      	subs	r3, #1
    3214:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3216:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3218:	2b00      	cmp	r3, #0
    321a:	dcf1      	bgt.n	3200 <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    321c:	2301      	movs	r3, #1
    321e:	425b      	negs	r3, r3
    3220:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    3222:	4b05      	ldr	r3, [pc, #20]	; (3238 <prvUnlockQueue+0xa4>)
    3224:	4798      	blx	r3
}
    3226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3228:	00000a2d 	.word	0x00000a2d
    322c:	00003aa1 	.word	0x00003aa1
    3230:	0000311d 	.word	0x0000311d
    3234:	00003bb9 	.word	0x00003bb9
    3238:	00000a45 	.word	0x00000a45

0000323c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    323c:	b538      	push	{r3, r4, r5, lr}
    323e:	1c04      	adds	r4, r0, #0
    3240:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    3242:	2800      	cmp	r0, #0
    3244:	d101      	bne.n	324a <xQueueGenericReset+0xe>
    3246:	b672      	cpsid	i
    3248:	e7fe      	b.n	3248 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
    324a:	4b15      	ldr	r3, [pc, #84]	; (32a0 <xQueueGenericReset+0x64>)
    324c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    324e:	6823      	ldr	r3, [r4, #0]
    3250:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3252:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3254:	4350      	muls	r0, r2
    3256:	1819      	adds	r1, r3, r0
    3258:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    325a:	2100      	movs	r1, #0
    325c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    325e:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    3260:	1a82      	subs	r2, r0, r2
    3262:	189b      	adds	r3, r3, r2
    3264:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3266:	2301      	movs	r3, #1
    3268:	425b      	negs	r3, r3
    326a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    326c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    326e:	2d00      	cmp	r5, #0
    3270:	d10b      	bne.n	328a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3272:	6921      	ldr	r1, [r4, #16]
    3274:	2900      	cmp	r1, #0
    3276:	d00f      	beq.n	3298 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3278:	1c20      	adds	r0, r4, #0
    327a:	3010      	adds	r0, #16
    327c:	4b09      	ldr	r3, [pc, #36]	; (32a4 <xQueueGenericReset+0x68>)
    327e:	4798      	blx	r3
    3280:	2801      	cmp	r0, #1
    3282:	d109      	bne.n	3298 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    3284:	4b08      	ldr	r3, [pc, #32]	; (32a8 <xQueueGenericReset+0x6c>)
    3286:	4798      	blx	r3
    3288:	e006      	b.n	3298 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    328a:	1c20      	adds	r0, r4, #0
    328c:	3010      	adds	r0, #16
    328e:	4d07      	ldr	r5, [pc, #28]	; (32ac <xQueueGenericReset+0x70>)
    3290:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3292:	1c20      	adds	r0, r4, #0
    3294:	3024      	adds	r0, #36	; 0x24
    3296:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    3298:	4b05      	ldr	r3, [pc, #20]	; (32b0 <xQueueGenericReset+0x74>)
    329a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    329c:	2001      	movs	r0, #1
    329e:	bd38      	pop	{r3, r4, r5, pc}
    32a0:	00000a2d 	.word	0x00000a2d
    32a4:	00003aa1 	.word	0x00003aa1
    32a8:	00000a15 	.word	0x00000a15
    32ac:	00003019 	.word	0x00003019
    32b0:	00000a45 	.word	0x00000a45

000032b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    32b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32b6:	1c05      	adds	r5, r0, #0
    32b8:	1c0e      	adds	r6, r1, #0
    32ba:	1c17      	adds	r7, r2, #0
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    32bc:	2800      	cmp	r0, #0
    32be:	d011      	beq.n	32e4 <xQueueGenericCreate+0x30>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    32c0:	2058      	movs	r0, #88	; 0x58
    32c2:	4b0f      	ldr	r3, [pc, #60]	; (3300 <xQueueGenericCreate+0x4c>)
    32c4:	4798      	blx	r3
    32c6:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    32c8:	d00c      	beq.n	32e4 <xQueueGenericCreate+0x30>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    32ca:	1c30      	adds	r0, r6, #0
    32cc:	4368      	muls	r0, r5
    32ce:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    32d0:	4b0b      	ldr	r3, [pc, #44]	; (3300 <xQueueGenericCreate+0x4c>)
    32d2:	4798      	blx	r3
    32d4:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    32d6:	2800      	cmp	r0, #0
    32d8:	d106      	bne.n	32e8 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    32da:	1c20      	adds	r0, r4, #0
    32dc:	4b09      	ldr	r3, [pc, #36]	; (3304 <xQueueGenericCreate+0x50>)
    32de:	4798      	blx	r3
    32e0:	e000      	b.n	32e4 <xQueueGenericCreate+0x30>
    32e2:	e7fe      	b.n	32e2 <xQueueGenericCreate+0x2e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    32e4:	b672      	cpsid	i
    32e6:	e7fc      	b.n	32e2 <xQueueGenericCreate+0x2e>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    32e8:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    32ea:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    32ec:	1c20      	adds	r0, r4, #0
    32ee:	2101      	movs	r1, #1
    32f0:	4b05      	ldr	r3, [pc, #20]	; (3308 <xQueueGenericCreate+0x54>)
    32f2:	4798      	blx	r3

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
    32f4:	2350      	movs	r3, #80	; 0x50
    32f6:	54e7      	strb	r7, [r4, r3]
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    32f8:	2300      	movs	r3, #0
    32fa:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
    32fc:	1c20      	adds	r0, r4, #0
    32fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3300:	00000aed 	.word	0x00000aed
    3304:	00000b55 	.word	0x00000b55
    3308:	0000323d 	.word	0x0000323d

0000330c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    330c:	b5f0      	push	{r4, r5, r6, r7, lr}
    330e:	464f      	mov	r7, r9
    3310:	4646      	mov	r6, r8
    3312:	b4c0      	push	{r6, r7}
    3314:	b085      	sub	sp, #20
    3316:	1c04      	adds	r4, r0, #0
    3318:	1c0d      	adds	r5, r1, #0
    331a:	9201      	str	r2, [sp, #4]
    331c:	1c1f      	adds	r7, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    331e:	2800      	cmp	r0, #0
    3320:	d101      	bne.n	3326 <xQueueGenericReceive+0x1a>
    3322:	b672      	cpsid	i
    3324:	e7fe      	b.n	3324 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3326:	2900      	cmp	r1, #0
    3328:	d104      	bne.n	3334 <xQueueGenericReceive+0x28>
    332a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    332c:	2b00      	cmp	r3, #0
    332e:	d001      	beq.n	3334 <xQueueGenericReceive+0x28>
    3330:	b672      	cpsid	i
    3332:	e7fe      	b.n	3332 <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3334:	4b4a      	ldr	r3, [pc, #296]	; (3460 <xQueueGenericReceive+0x154>)
    3336:	4798      	blx	r3
    3338:	2800      	cmp	r0, #0
    333a:	d102      	bne.n	3342 <xQueueGenericReceive+0x36>
    333c:	9b01      	ldr	r3, [sp, #4]
    333e:	2b00      	cmp	r3, #0
    3340:	d103      	bne.n	334a <xQueueGenericReceive+0x3e>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3342:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3344:	4b47      	ldr	r3, [pc, #284]	; (3464 <xQueueGenericReceive+0x158>)
    3346:	4698      	mov	r8, r3
    3348:	e001      	b.n	334e <xQueueGenericReceive+0x42>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    334a:	b672      	cpsid	i
    334c:	e7fe      	b.n	334c <xQueueGenericReceive+0x40>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    334e:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3352:	2b00      	cmp	r3, #0
    3354:	d02b      	beq.n	33ae <xQueueGenericReceive+0xa2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3356:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3358:	1c20      	adds	r0, r4, #0
    335a:	1c29      	adds	r1, r5, #0
    335c:	4b42      	ldr	r3, [pc, #264]	; (3468 <xQueueGenericReceive+0x15c>)
    335e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    3360:	2f00      	cmp	r7, #0
    3362:	d114      	bne.n	338e <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    3364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3366:	3b01      	subs	r3, #1
    3368:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    336a:	6823      	ldr	r3, [r4, #0]
    336c:	2b00      	cmp	r3, #0
    336e:	d102      	bne.n	3376 <xQueueGenericReceive+0x6a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3370:	4b3e      	ldr	r3, [pc, #248]	; (346c <xQueueGenericReceive+0x160>)
    3372:	4798      	blx	r3
    3374:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3376:	6923      	ldr	r3, [r4, #16]
    3378:	2b00      	cmp	r3, #0
    337a:	d014      	beq.n	33a6 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    337c:	1c20      	adds	r0, r4, #0
    337e:	3010      	adds	r0, #16
    3380:	4b3b      	ldr	r3, [pc, #236]	; (3470 <xQueueGenericReceive+0x164>)
    3382:	4798      	blx	r3
    3384:	2801      	cmp	r0, #1
    3386:	d10e      	bne.n	33a6 <xQueueGenericReceive+0x9a>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3388:	4b3a      	ldr	r3, [pc, #232]	; (3474 <xQueueGenericReceive+0x168>)
    338a:	4798      	blx	r3
    338c:	e00b      	b.n	33a6 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    338e:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3390:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3392:	2b00      	cmp	r3, #0
    3394:	d007      	beq.n	33a6 <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3396:	1c20      	adds	r0, r4, #0
    3398:	3024      	adds	r0, #36	; 0x24
    339a:	4b35      	ldr	r3, [pc, #212]	; (3470 <xQueueGenericReceive+0x164>)
    339c:	4798      	blx	r3
    339e:	2800      	cmp	r0, #0
    33a0:	d001      	beq.n	33a6 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    33a2:	4b34      	ldr	r3, [pc, #208]	; (3474 <xQueueGenericReceive+0x168>)
    33a4:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    33a6:	4b34      	ldr	r3, [pc, #208]	; (3478 <xQueueGenericReceive+0x16c>)
    33a8:	4798      	blx	r3
				return pdPASS;
    33aa:	2001      	movs	r0, #1
    33ac:	e052      	b.n	3454 <xQueueGenericReceive+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    33ae:	9b01      	ldr	r3, [sp, #4]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d103      	bne.n	33bc <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    33b4:	4b30      	ldr	r3, [pc, #192]	; (3478 <xQueueGenericReceive+0x16c>)
    33b6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    33b8:	2000      	movs	r0, #0
    33ba:	e04b      	b.n	3454 <xQueueGenericReceive+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    33bc:	2e00      	cmp	r6, #0
    33be:	d103      	bne.n	33c8 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    33c0:	a802      	add	r0, sp, #8
    33c2:	4b2e      	ldr	r3, [pc, #184]	; (347c <xQueueGenericReceive+0x170>)
    33c4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    33c6:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    33c8:	4b2b      	ldr	r3, [pc, #172]	; (3478 <xQueueGenericReceive+0x16c>)
    33ca:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    33cc:	4b2c      	ldr	r3, [pc, #176]	; (3480 <xQueueGenericReceive+0x174>)
    33ce:	4798      	blx	r3
		prvLockQueue( pxQueue );
    33d0:	4b24      	ldr	r3, [pc, #144]	; (3464 <xQueueGenericReceive+0x158>)
    33d2:	4798      	blx	r3
    33d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    33d6:	3301      	adds	r3, #1
    33d8:	d101      	bne.n	33de <xQueueGenericReceive+0xd2>
    33da:	2300      	movs	r3, #0
    33dc:	6463      	str	r3, [r4, #68]	; 0x44
    33de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    33e0:	3301      	adds	r3, #1
    33e2:	d101      	bne.n	33e8 <xQueueGenericReceive+0xdc>
    33e4:	2300      	movs	r3, #0
    33e6:	64a3      	str	r3, [r4, #72]	; 0x48
    33e8:	4b23      	ldr	r3, [pc, #140]	; (3478 <xQueueGenericReceive+0x16c>)
    33ea:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    33ec:	a802      	add	r0, sp, #8
    33ee:	a901      	add	r1, sp, #4
    33f0:	4b24      	ldr	r3, [pc, #144]	; (3484 <xQueueGenericReceive+0x178>)
    33f2:	4798      	blx	r3
    33f4:	2800      	cmp	r0, #0
    33f6:	d127      	bne.n	3448 <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    33f8:	4b1a      	ldr	r3, [pc, #104]	; (3464 <xQueueGenericReceive+0x158>)
    33fa:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    33fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    33fe:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3400:	4b1d      	ldr	r3, [pc, #116]	; (3478 <xQueueGenericReceive+0x16c>)
    3402:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3404:	464b      	mov	r3, r9
    3406:	2b00      	cmp	r3, #0
    3408:	d118      	bne.n	343c <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    340a:	6823      	ldr	r3, [r4, #0]
    340c:	2b00      	cmp	r3, #0
    340e:	d106      	bne.n	341e <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
    3410:	4b14      	ldr	r3, [pc, #80]	; (3464 <xQueueGenericReceive+0x158>)
    3412:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3414:	6860      	ldr	r0, [r4, #4]
    3416:	4b1c      	ldr	r3, [pc, #112]	; (3488 <xQueueGenericReceive+0x17c>)
    3418:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    341a:	4b17      	ldr	r3, [pc, #92]	; (3478 <xQueueGenericReceive+0x16c>)
    341c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    341e:	1c20      	adds	r0, r4, #0
    3420:	3024      	adds	r0, #36	; 0x24
    3422:	9901      	ldr	r1, [sp, #4]
    3424:	4b19      	ldr	r3, [pc, #100]	; (348c <xQueueGenericReceive+0x180>)
    3426:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3428:	1c20      	adds	r0, r4, #0
    342a:	4b19      	ldr	r3, [pc, #100]	; (3490 <xQueueGenericReceive+0x184>)
    342c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    342e:	4b19      	ldr	r3, [pc, #100]	; (3494 <xQueueGenericReceive+0x188>)
    3430:	4798      	blx	r3
    3432:	2800      	cmp	r0, #0
    3434:	d18b      	bne.n	334e <xQueueGenericReceive+0x42>
				{
					portYIELD_WITHIN_API();
    3436:	4b0f      	ldr	r3, [pc, #60]	; (3474 <xQueueGenericReceive+0x168>)
    3438:	4798      	blx	r3
    343a:	e788      	b.n	334e <xQueueGenericReceive+0x42>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    343c:	1c20      	adds	r0, r4, #0
    343e:	4b14      	ldr	r3, [pc, #80]	; (3490 <xQueueGenericReceive+0x184>)
    3440:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3442:	4b14      	ldr	r3, [pc, #80]	; (3494 <xQueueGenericReceive+0x188>)
    3444:	4798      	blx	r3
    3446:	e782      	b.n	334e <xQueueGenericReceive+0x42>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3448:	1c20      	adds	r0, r4, #0
    344a:	4b11      	ldr	r3, [pc, #68]	; (3490 <xQueueGenericReceive+0x184>)
    344c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    344e:	4b11      	ldr	r3, [pc, #68]	; (3494 <xQueueGenericReceive+0x188>)
    3450:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3452:	2000      	movs	r0, #0
		}
	}
}
    3454:	b005      	add	sp, #20
    3456:	bc0c      	pop	{r2, r3}
    3458:	4690      	mov	r8, r2
    345a:	4699      	mov	r9, r3
    345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	00003bd1 	.word	0x00003bd1
    3464:	00000a2d 	.word	0x00000a2d
    3468:	0000316d 	.word	0x0000316d
    346c:	00003bc5 	.word	0x00003bc5
    3470:	00003aa1 	.word	0x00003aa1
    3474:	00000a15 	.word	0x00000a15
    3478:	00000a45 	.word	0x00000a45
    347c:	00003b29 	.word	0x00003b29
    3480:	00003721 	.word	0x00003721
    3484:	00003b49 	.word	0x00003b49
    3488:	00003bf1 	.word	0x00003bf1
    348c:	00003a49 	.word	0x00003a49
    3490:	00003195 	.word	0x00003195
    3494:	0000385d 	.word	0x0000385d

00003498 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3498:	4b08      	ldr	r3, [pc, #32]	; (34bc <prvResetNextTaskUnblockTime+0x24>)
    349a:	681b      	ldr	r3, [r3, #0]
    349c:	681b      	ldr	r3, [r3, #0]
    349e:	2b00      	cmp	r3, #0
    34a0:	d104      	bne.n	34ac <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    34a2:	2201      	movs	r2, #1
    34a4:	4252      	negs	r2, r2
    34a6:	4b06      	ldr	r3, [pc, #24]	; (34c0 <prvResetNextTaskUnblockTime+0x28>)
    34a8:	601a      	str	r2, [r3, #0]
    34aa:	e006      	b.n	34ba <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    34ac:	4b03      	ldr	r3, [pc, #12]	; (34bc <prvResetNextTaskUnblockTime+0x24>)
    34ae:	681b      	ldr	r3, [r3, #0]
    34b0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    34b2:	68db      	ldr	r3, [r3, #12]
    34b4:	685a      	ldr	r2, [r3, #4]
    34b6:	4b02      	ldr	r3, [pc, #8]	; (34c0 <prvResetNextTaskUnblockTime+0x28>)
    34b8:	601a      	str	r2, [r3, #0]
	}
}
    34ba:	4770      	bx	lr
    34bc:	2000418c 	.word	0x2000418c
    34c0:	20000008 	.word	0x20000008

000034c4 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    34c4:	b510      	push	{r4, lr}
    34c6:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    34c8:	4b0e      	ldr	r3, [pc, #56]	; (3504 <prvAddCurrentTaskToDelayedList+0x40>)
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    34ce:	4b0e      	ldr	r3, [pc, #56]	; (3508 <prvAddCurrentTaskToDelayedList+0x44>)
    34d0:	681b      	ldr	r3, [r3, #0]
    34d2:	4298      	cmp	r0, r3
    34d4:	d207      	bcs.n	34e6 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    34d6:	4b0d      	ldr	r3, [pc, #52]	; (350c <prvAddCurrentTaskToDelayedList+0x48>)
    34d8:	6818      	ldr	r0, [r3, #0]
    34da:	4b0a      	ldr	r3, [pc, #40]	; (3504 <prvAddCurrentTaskToDelayedList+0x40>)
    34dc:	6819      	ldr	r1, [r3, #0]
    34de:	3104      	adds	r1, #4
    34e0:	4b0b      	ldr	r3, [pc, #44]	; (3510 <prvAddCurrentTaskToDelayedList+0x4c>)
    34e2:	4798      	blx	r3
    34e4:	e00c      	b.n	3500 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    34e6:	4b0b      	ldr	r3, [pc, #44]	; (3514 <prvAddCurrentTaskToDelayedList+0x50>)
    34e8:	6818      	ldr	r0, [r3, #0]
    34ea:	4b06      	ldr	r3, [pc, #24]	; (3504 <prvAddCurrentTaskToDelayedList+0x40>)
    34ec:	6819      	ldr	r1, [r3, #0]
    34ee:	3104      	adds	r1, #4
    34f0:	4b07      	ldr	r3, [pc, #28]	; (3510 <prvAddCurrentTaskToDelayedList+0x4c>)
    34f2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    34f4:	4b08      	ldr	r3, [pc, #32]	; (3518 <prvAddCurrentTaskToDelayedList+0x54>)
    34f6:	681b      	ldr	r3, [r3, #0]
    34f8:	429c      	cmp	r4, r3
    34fa:	d201      	bcs.n	3500 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    34fc:	4b06      	ldr	r3, [pc, #24]	; (3518 <prvAddCurrentTaskToDelayedList+0x54>)
    34fe:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    3500:	bd10      	pop	{r4, pc}
    3502:	46c0      	nop			; (mov r8, r8)
    3504:	20004238 	.word	0x20004238
    3508:	20004254 	.word	0x20004254
    350c:	20004258 	.word	0x20004258
    3510:	00003051 	.word	0x00003051
    3514:	2000418c 	.word	0x2000418c
    3518:	20000008 	.word	0x20000008

0000351c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    351e:	465f      	mov	r7, fp
    3520:	4656      	mov	r6, sl
    3522:	464d      	mov	r5, r9
    3524:	4644      	mov	r4, r8
    3526:	b4f0      	push	{r4, r5, r6, r7}
    3528:	1c07      	adds	r7, r0, #0
    352a:	1c0e      	adds	r6, r1, #0
    352c:	4691      	mov	r9, r2
    352e:	469a      	mov	sl, r3
    3530:	9d0a      	ldr	r5, [sp, #40]	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    3532:	2800      	cmp	r0, #0
    3534:	d101      	bne.n	353a <xTaskGenericCreate+0x1e>
    3536:	b672      	cpsid	i
    3538:	e7fe      	b.n	3538 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    353a:	2d04      	cmp	r5, #4
    353c:	d901      	bls.n	3542 <xTaskGenericCreate+0x26>
    353e:	b672      	cpsid	i
    3540:	e7fe      	b.n	3540 <xTaskGenericCreate+0x24>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    3542:	2048      	movs	r0, #72	; 0x48
    3544:	4b5e      	ldr	r3, [pc, #376]	; (36c0 <xTaskGenericCreate+0x1a4>)
    3546:	4798      	blx	r3
    3548:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    354a:	d100      	bne.n	354e <xTaskGenericCreate+0x32>
    354c:	e0af      	b.n	36ae <xTaskGenericCreate+0x192>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    354e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3550:	2a00      	cmp	r2, #0
    3552:	d000      	beq.n	3556 <xTaskGenericCreate+0x3a>
    3554:	e0a7      	b.n	36a6 <xTaskGenericCreate+0x18a>
    3556:	464b      	mov	r3, r9
    3558:	0098      	lsls	r0, r3, #2
    355a:	4b59      	ldr	r3, [pc, #356]	; (36c0 <xTaskGenericCreate+0x1a4>)
    355c:	4798      	blx	r3
    355e:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    3560:	2800      	cmp	r0, #0
    3562:	d103      	bne.n	356c <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    3564:	1c20      	adds	r0, r4, #0
    3566:	4b57      	ldr	r3, [pc, #348]	; (36c4 <xTaskGenericCreate+0x1a8>)
    3568:	4798      	blx	r3
    356a:	e0a0      	b.n	36ae <xTaskGenericCreate+0x192>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    356c:	464b      	mov	r3, r9
    356e:	009a      	lsls	r2, r3, #2
    3570:	21a5      	movs	r1, #165	; 0xa5
    3572:	4b55      	ldr	r3, [pc, #340]	; (36c8 <xTaskGenericCreate+0x1ac>)
    3574:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    3576:	4a55      	ldr	r2, [pc, #340]	; (36cc <xTaskGenericCreate+0x1b0>)
    3578:	1c13      	adds	r3, r2, #0
    357a:	444b      	add	r3, r9
    357c:	009b      	lsls	r3, r3, #2
    357e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    3580:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    3582:	2207      	movs	r2, #7
    3584:	4393      	bics	r3, r2
    3586:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3588:	7832      	ldrb	r2, [r6, #0]
    358a:	2334      	movs	r3, #52	; 0x34
    358c:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    358e:	7833      	ldrb	r3, [r6, #0]
    3590:	2b00      	cmp	r3, #0
    3592:	d00a      	beq.n	35aa <xTaskGenericCreate+0x8e>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3594:	2301      	movs	r3, #1
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    3596:	5cf1      	ldrb	r1, [r6, r3]
    3598:	18e2      	adds	r2, r4, r3
    359a:	3234      	adds	r2, #52	; 0x34
    359c:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    359e:	5cf2      	ldrb	r2, [r6, r3]
    35a0:	2a00      	cmp	r2, #0
    35a2:	d002      	beq.n	35aa <xTaskGenericCreate+0x8e>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    35a4:	3301      	adds	r3, #1
    35a6:	2b08      	cmp	r3, #8
    35a8:	d1f5      	bne.n	3596 <xTaskGenericCreate+0x7a>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    35aa:	2200      	movs	r2, #0
    35ac:	233b      	movs	r3, #59	; 0x3b
    35ae:	54e2      	strb	r2, [r4, r3]
    35b0:	1e2e      	subs	r6, r5, #0
    35b2:	2e04      	cmp	r6, #4
    35b4:	d900      	bls.n	35b8 <xTaskGenericCreate+0x9c>
    35b6:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    35b8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    35ba:	6466      	str	r6, [r4, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    35bc:	1d23      	adds	r3, r4, #4
    35be:	4698      	mov	r8, r3
    35c0:	1c18      	adds	r0, r3, #0
    35c2:	4a43      	ldr	r2, [pc, #268]	; (36d0 <xTaskGenericCreate+0x1b4>)
    35c4:	4691      	mov	r9, r2
    35c6:	4790      	blx	r2
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    35c8:	1c20      	adds	r0, r4, #0
    35ca:	3018      	adds	r0, #24
    35cc:	47c8      	blx	r9

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    35ce:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35d0:	2305      	movs	r3, #5
    35d2:	1b9e      	subs	r6, r3, r6
    35d4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    35d6:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    35d8:	4658      	mov	r0, fp
    35da:	1c39      	adds	r1, r7, #0
    35dc:	4652      	mov	r2, sl
    35de:	4b3d      	ldr	r3, [pc, #244]	; (36d4 <xTaskGenericCreate+0x1b8>)
    35e0:	4798      	blx	r3
    35e2:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    35e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    35e6:	2b00      	cmp	r3, #0
    35e8:	d000      	beq.n	35ec <xTaskGenericCreate+0xd0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    35ea:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    35ec:	4b3a      	ldr	r3, [pc, #232]	; (36d8 <xTaskGenericCreate+0x1bc>)
    35ee:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    35f0:	4b3a      	ldr	r3, [pc, #232]	; (36dc <xTaskGenericCreate+0x1c0>)
    35f2:	681a      	ldr	r2, [r3, #0]
    35f4:	3201      	adds	r2, #1
    35f6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    35f8:	4b39      	ldr	r3, [pc, #228]	; (36e0 <xTaskGenericCreate+0x1c4>)
    35fa:	681b      	ldr	r3, [r3, #0]
    35fc:	2b00      	cmp	r3, #0
    35fe:	d123      	bne.n	3648 <xTaskGenericCreate+0x12c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3600:	4b37      	ldr	r3, [pc, #220]	; (36e0 <xTaskGenericCreate+0x1c4>)
    3602:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3604:	4b35      	ldr	r3, [pc, #212]	; (36dc <xTaskGenericCreate+0x1c0>)
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	2b01      	cmp	r3, #1
    360a:	d128      	bne.n	365e <xTaskGenericCreate+0x142>
    360c:	4e35      	ldr	r6, [pc, #212]	; (36e4 <xTaskGenericCreate+0x1c8>)
    360e:	2264      	movs	r2, #100	; 0x64
    3610:	1992      	adds	r2, r2, r6
    3612:	4691      	mov	r9, r2
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3614:	4f34      	ldr	r7, [pc, #208]	; (36e8 <xTaskGenericCreate+0x1cc>)
    3616:	1c30      	adds	r0, r6, #0
    3618:	47b8      	blx	r7
    361a:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    361c:	454e      	cmp	r6, r9
    361e:	d1fa      	bne.n	3616 <xTaskGenericCreate+0xfa>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3620:	4b32      	ldr	r3, [pc, #200]	; (36ec <xTaskGenericCreate+0x1d0>)
    3622:	4699      	mov	r9, r3
    3624:	1c18      	adds	r0, r3, #0
    3626:	4e30      	ldr	r6, [pc, #192]	; (36e8 <xTaskGenericCreate+0x1cc>)
    3628:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    362a:	4f31      	ldr	r7, [pc, #196]	; (36f0 <xTaskGenericCreate+0x1d4>)
    362c:	1c38      	adds	r0, r7, #0
    362e:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    3630:	4830      	ldr	r0, [pc, #192]	; (36f4 <xTaskGenericCreate+0x1d8>)
    3632:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3634:	4830      	ldr	r0, [pc, #192]	; (36f8 <xTaskGenericCreate+0x1dc>)
    3636:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    3638:	4830      	ldr	r0, [pc, #192]	; (36fc <xTaskGenericCreate+0x1e0>)
    363a:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    363c:	4b30      	ldr	r3, [pc, #192]	; (3700 <xTaskGenericCreate+0x1e4>)
    363e:	464a      	mov	r2, r9
    3640:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3642:	4b30      	ldr	r3, [pc, #192]	; (3704 <xTaskGenericCreate+0x1e8>)
    3644:	601f      	str	r7, [r3, #0]
    3646:	e00a      	b.n	365e <xTaskGenericCreate+0x142>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3648:	4b2f      	ldr	r3, [pc, #188]	; (3708 <xTaskGenericCreate+0x1ec>)
    364a:	681b      	ldr	r3, [r3, #0]
    364c:	2b00      	cmp	r3, #0
    364e:	d106      	bne.n	365e <xTaskGenericCreate+0x142>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3650:	4b23      	ldr	r3, [pc, #140]	; (36e0 <xTaskGenericCreate+0x1c4>)
    3652:	681b      	ldr	r3, [r3, #0]
    3654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3656:	429d      	cmp	r5, r3
    3658:	d301      	bcc.n	365e <xTaskGenericCreate+0x142>
					{
						pxCurrentTCB = pxNewTCB;
    365a:	4b21      	ldr	r3, [pc, #132]	; (36e0 <xTaskGenericCreate+0x1c4>)
    365c:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    365e:	4a2b      	ldr	r2, [pc, #172]	; (370c <xTaskGenericCreate+0x1f0>)
    3660:	6813      	ldr	r3, [r2, #0]
    3662:	3301      	adds	r3, #1
    3664:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    3666:	63e3      	str	r3, [r4, #60]	; 0x3c
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    3668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    366a:	4a29      	ldr	r2, [pc, #164]	; (3710 <xTaskGenericCreate+0x1f4>)
    366c:	6812      	ldr	r2, [r2, #0]
    366e:	4293      	cmp	r3, r2
    3670:	d901      	bls.n	3676 <xTaskGenericCreate+0x15a>
    3672:	4a27      	ldr	r2, [pc, #156]	; (3710 <xTaskGenericCreate+0x1f4>)
    3674:	6013      	str	r3, [r2, #0]
    3676:	009a      	lsls	r2, r3, #2
    3678:	18d3      	adds	r3, r2, r3
    367a:	009b      	lsls	r3, r3, #2
    367c:	4819      	ldr	r0, [pc, #100]	; (36e4 <xTaskGenericCreate+0x1c8>)
    367e:	18c0      	adds	r0, r0, r3
    3680:	4641      	mov	r1, r8
    3682:	4b24      	ldr	r3, [pc, #144]	; (3714 <xTaskGenericCreate+0x1f8>)
    3684:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3686:	4b24      	ldr	r3, [pc, #144]	; (3718 <xTaskGenericCreate+0x1fc>)
    3688:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    368a:	4b1f      	ldr	r3, [pc, #124]	; (3708 <xTaskGenericCreate+0x1ec>)
    368c:	681b      	ldr	r3, [r3, #0]
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    368e:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    3690:	2b00      	cmp	r3, #0
    3692:	d00e      	beq.n	36b2 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3694:	4b12      	ldr	r3, [pc, #72]	; (36e0 <xTaskGenericCreate+0x1c4>)
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    369a:	429d      	cmp	r5, r3
    369c:	d909      	bls.n	36b2 <xTaskGenericCreate+0x196>
			{
				taskYIELD_IF_USING_PREEMPTION();
    369e:	4b1f      	ldr	r3, [pc, #124]	; (371c <xTaskGenericCreate+0x200>)
    36a0:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    36a2:	2001      	movs	r0, #1
    36a4:	e005      	b.n	36b2 <xTaskGenericCreate+0x196>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    36a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    36a8:	6303      	str	r3, [r0, #48]	; 0x30
    36aa:	1c18      	adds	r0, r3, #0
    36ac:	e75e      	b.n	356c <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    36ae:	2001      	movs	r0, #1
    36b0:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    36b2:	bc3c      	pop	{r2, r3, r4, r5}
    36b4:	4690      	mov	r8, r2
    36b6:	4699      	mov	r9, r3
    36b8:	46a2      	mov	sl, r4
    36ba:	46ab      	mov	fp, r5
    36bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36be:	46c0      	nop			; (mov r8, r8)
    36c0:	00000aed 	.word	0x00000aed
    36c4:	00000b55 	.word	0x00000b55
    36c8:	0000588b 	.word	0x0000588b
    36cc:	3fffffff 	.word	0x3fffffff
    36d0:	00003031 	.word	0x00003031
    36d4:	000009f1 	.word	0x000009f1
    36d8:	00000a2d 	.word	0x00000a2d
    36dc:	20004260 	.word	0x20004260
    36e0:	20004238 	.word	0x20004238
    36e4:	200041c0 	.word	0x200041c0
    36e8:	00003019 	.word	0x00003019
    36ec:	20004194 	.word	0x20004194
    36f0:	200041a8 	.word	0x200041a8
    36f4:	2000423c 	.word	0x2000423c
    36f8:	20004224 	.word	0x20004224
    36fc:	20004264 	.word	0x20004264
    3700:	2000418c 	.word	0x2000418c
    3704:	20004258 	.word	0x20004258
    3708:	20004190 	.word	0x20004190
    370c:	2000425c 	.word	0x2000425c
    3710:	20004278 	.word	0x20004278
    3714:	00003039 	.word	0x00003039
    3718:	00000a45 	.word	0x00000a45
    371c:	00000a15 	.word	0x00000a15

00003720 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3720:	4b02      	ldr	r3, [pc, #8]	; (372c <vTaskSuspendAll+0xc>)
    3722:	681a      	ldr	r2, [r3, #0]
    3724:	3201      	adds	r2, #1
    3726:	601a      	str	r2, [r3, #0]
}
    3728:	4770      	bx	lr
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	20004250 	.word	0x20004250

00003730 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    3730:	b5f0      	push	{r4, r5, r6, r7, lr}
    3732:	4647      	mov	r7, r8
    3734:	b480      	push	{r7}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3736:	4b3b      	ldr	r3, [pc, #236]	; (3824 <xTaskIncrementTick+0xf4>)
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	2b00      	cmp	r3, #0
    373c:	d161      	bne.n	3802 <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    373e:	4b3a      	ldr	r3, [pc, #232]	; (3828 <xTaskIncrementTick+0xf8>)
    3740:	681a      	ldr	r2, [r3, #0]
    3742:	3201      	adds	r2, #1
    3744:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3746:	681f      	ldr	r7, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    3748:	2f00      	cmp	r7, #0
    374a:	d112      	bne.n	3772 <xTaskIncrementTick+0x42>
			{
				taskSWITCH_DELAYED_LISTS();
    374c:	4b37      	ldr	r3, [pc, #220]	; (382c <xTaskIncrementTick+0xfc>)
    374e:	681b      	ldr	r3, [r3, #0]
    3750:	681b      	ldr	r3, [r3, #0]
    3752:	2b00      	cmp	r3, #0
    3754:	d001      	beq.n	375a <xTaskIncrementTick+0x2a>
    3756:	b672      	cpsid	i
    3758:	e7fe      	b.n	3758 <xTaskIncrementTick+0x28>
    375a:	4a34      	ldr	r2, [pc, #208]	; (382c <xTaskIncrementTick+0xfc>)
    375c:	6811      	ldr	r1, [r2, #0]
    375e:	4b34      	ldr	r3, [pc, #208]	; (3830 <xTaskIncrementTick+0x100>)
    3760:	6818      	ldr	r0, [r3, #0]
    3762:	6010      	str	r0, [r2, #0]
    3764:	6019      	str	r1, [r3, #0]
    3766:	4b33      	ldr	r3, [pc, #204]	; (3834 <xTaskIncrementTick+0x104>)
    3768:	681a      	ldr	r2, [r3, #0]
    376a:	3201      	adds	r2, #1
    376c:	601a      	str	r2, [r3, #0]
    376e:	4b32      	ldr	r3, [pc, #200]	; (3838 <xTaskIncrementTick+0x108>)
    3770:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3772:	4b32      	ldr	r3, [pc, #200]	; (383c <xTaskIncrementTick+0x10c>)
    3774:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3776:	2400      	movs	r4, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    3778:	429f      	cmp	r7, r3
    377a:	d337      	bcc.n	37ec <xTaskIncrementTick+0xbc>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    377c:	4e2b      	ldr	r6, [pc, #172]	; (382c <xTaskIncrementTick+0xfc>)
    377e:	e000      	b.n	3782 <xTaskIncrementTick+0x52>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    3780:	2401      	movs	r4, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3782:	6833      	ldr	r3, [r6, #0]
    3784:	681b      	ldr	r3, [r3, #0]
    3786:	2b00      	cmp	r3, #0
    3788:	d104      	bne.n	3794 <xTaskIncrementTick+0x64>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    378a:	2201      	movs	r2, #1
    378c:	4252      	negs	r2, r2
    378e:	4b2b      	ldr	r3, [pc, #172]	; (383c <xTaskIncrementTick+0x10c>)
    3790:	601a      	str	r2, [r3, #0]
						break;
    3792:	e02b      	b.n	37ec <xTaskIncrementTick+0xbc>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3794:	4a25      	ldr	r2, [pc, #148]	; (382c <xTaskIncrementTick+0xfc>)
    3796:	6813      	ldr	r3, [r2, #0]
    3798:	68db      	ldr	r3, [r3, #12]
    379a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    379c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    379e:	429f      	cmp	r7, r3
    37a0:	d202      	bcs.n	37a8 <xTaskIncrementTick+0x78>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    37a2:	4a26      	ldr	r2, [pc, #152]	; (383c <xTaskIncrementTick+0x10c>)
    37a4:	6013      	str	r3, [r2, #0]
							break;
    37a6:	e021      	b.n	37ec <xTaskIncrementTick+0xbc>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    37a8:	1d2b      	adds	r3, r5, #4
    37aa:	4698      	mov	r8, r3
    37ac:	1c18      	adds	r0, r3, #0
    37ae:	4a24      	ldr	r2, [pc, #144]	; (3840 <xTaskIncrementTick+0x110>)
    37b0:	4790      	blx	r2

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    37b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    37b4:	2b00      	cmp	r3, #0
    37b6:	d003      	beq.n	37c0 <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    37b8:	1c28      	adds	r0, r5, #0
    37ba:	3018      	adds	r0, #24
    37bc:	4b20      	ldr	r3, [pc, #128]	; (3840 <xTaskIncrementTick+0x110>)
    37be:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    37c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    37c2:	4a20      	ldr	r2, [pc, #128]	; (3844 <xTaskIncrementTick+0x114>)
    37c4:	6812      	ldr	r2, [r2, #0]
    37c6:	4293      	cmp	r3, r2
    37c8:	d901      	bls.n	37ce <xTaskIncrementTick+0x9e>
    37ca:	4a1e      	ldr	r2, [pc, #120]	; (3844 <xTaskIncrementTick+0x114>)
    37cc:	6013      	str	r3, [r2, #0]
    37ce:	009a      	lsls	r2, r3, #2
    37d0:	18d3      	adds	r3, r2, r3
    37d2:	009b      	lsls	r3, r3, #2
    37d4:	481c      	ldr	r0, [pc, #112]	; (3848 <xTaskIncrementTick+0x118>)
    37d6:	18c0      	adds	r0, r0, r3
    37d8:	4641      	mov	r1, r8
    37da:	4b1c      	ldr	r3, [pc, #112]	; (384c <xTaskIncrementTick+0x11c>)
    37dc:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    37de:	4b1c      	ldr	r3, [pc, #112]	; (3850 <xTaskIncrementTick+0x120>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    37e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    37e6:	429a      	cmp	r2, r3
    37e8:	d2ca      	bcs.n	3780 <xTaskIncrementTick+0x50>
    37ea:	e7ca      	b.n	3782 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    37ec:	4b18      	ldr	r3, [pc, #96]	; (3850 <xTaskIncrementTick+0x120>)
    37ee:	681b      	ldr	r3, [r3, #0]
    37f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    37f2:	009a      	lsls	r2, r3, #2
    37f4:	18d3      	adds	r3, r2, r3
    37f6:	009b      	lsls	r3, r3, #2
    37f8:	4a13      	ldr	r2, [pc, #76]	; (3848 <xTaskIncrementTick+0x118>)
    37fa:	589b      	ldr	r3, [r3, r2]
    37fc:	2b01      	cmp	r3, #1
    37fe:	d806      	bhi.n	380e <xTaskIncrementTick+0xde>
    3800:	e006      	b.n	3810 <xTaskIncrementTick+0xe0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    3802:	4b14      	ldr	r3, [pc, #80]	; (3854 <xTaskIncrementTick+0x124>)
    3804:	681a      	ldr	r2, [r3, #0]
    3806:	3201      	adds	r2, #1
    3808:	601a      	str	r2, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    380a:	2400      	movs	r4, #0
    380c:	e000      	b.n	3810 <xTaskIncrementTick+0xe0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    380e:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3810:	4b11      	ldr	r3, [pc, #68]	; (3858 <xTaskIncrementTick+0x128>)
    3812:	681b      	ldr	r3, [r3, #0]
    3814:	2b00      	cmp	r3, #0
    3816:	d000      	beq.n	381a <xTaskIncrementTick+0xea>
		{
			xSwitchRequired = pdTRUE;
    3818:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    381a:	1c20      	adds	r0, r4, #0
    381c:	bc04      	pop	{r2}
    381e:	4690      	mov	r8, r2
    3820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	20004250 	.word	0x20004250
    3828:	20004254 	.word	0x20004254
    382c:	2000418c 	.word	0x2000418c
    3830:	20004258 	.word	0x20004258
    3834:	20004188 	.word	0x20004188
    3838:	00003499 	.word	0x00003499
    383c:	20000008 	.word	0x20000008
    3840:	00003081 	.word	0x00003081
    3844:	20004278 	.word	0x20004278
    3848:	200041c0 	.word	0x200041c0
    384c:	00003039 	.word	0x00003039
    3850:	20004238 	.word	0x20004238
    3854:	200041bc 	.word	0x200041bc
    3858:	2000427c 	.word	0x2000427c

0000385c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    385e:	4b2f      	ldr	r3, [pc, #188]	; (391c <xTaskResumeAll+0xc0>)
    3860:	681b      	ldr	r3, [r3, #0]
    3862:	2b00      	cmp	r3, #0
    3864:	d101      	bne.n	386a <xTaskResumeAll+0xe>
    3866:	b672      	cpsid	i
    3868:	e7fe      	b.n	3868 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    386a:	4b2d      	ldr	r3, [pc, #180]	; (3920 <xTaskResumeAll+0xc4>)
    386c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    386e:	4b2b      	ldr	r3, [pc, #172]	; (391c <xTaskResumeAll+0xc0>)
    3870:	681a      	ldr	r2, [r3, #0]
    3872:	3a01      	subs	r2, #1
    3874:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3876:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3878:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    387a:	2b00      	cmp	r3, #0
    387c:	d149      	bne.n	3912 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    387e:	4b29      	ldr	r3, [pc, #164]	; (3924 <xTaskResumeAll+0xc8>)
    3880:	681b      	ldr	r3, [r3, #0]
    3882:	2b00      	cmp	r3, #0
    3884:	d045      	beq.n	3912 <xTaskResumeAll+0xb6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3886:	4d28      	ldr	r5, [pc, #160]	; (3928 <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3888:	1c2f      	adds	r7, r5, #0
    388a:	e021      	b.n	38d0 <xTaskResumeAll+0x74>
    388c:	68fb      	ldr	r3, [r7, #12]
    388e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3890:	1c20      	adds	r0, r4, #0
    3892:	3018      	adds	r0, #24
    3894:	4b25      	ldr	r3, [pc, #148]	; (392c <xTaskResumeAll+0xd0>)
    3896:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    3898:	1d26      	adds	r6, r4, #4
    389a:	1c30      	adds	r0, r6, #0
    389c:	4b23      	ldr	r3, [pc, #140]	; (392c <xTaskResumeAll+0xd0>)
    389e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    38a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    38a2:	4a23      	ldr	r2, [pc, #140]	; (3930 <xTaskResumeAll+0xd4>)
    38a4:	6812      	ldr	r2, [r2, #0]
    38a6:	4293      	cmp	r3, r2
    38a8:	d901      	bls.n	38ae <xTaskResumeAll+0x52>
    38aa:	4a21      	ldr	r2, [pc, #132]	; (3930 <xTaskResumeAll+0xd4>)
    38ac:	6013      	str	r3, [r2, #0]
    38ae:	009a      	lsls	r2, r3, #2
    38b0:	18d3      	adds	r3, r2, r3
    38b2:	009b      	lsls	r3, r3, #2
    38b4:	481f      	ldr	r0, [pc, #124]	; (3934 <xTaskResumeAll+0xd8>)
    38b6:	18c0      	adds	r0, r0, r3
    38b8:	1c31      	adds	r1, r6, #0
    38ba:	4b1f      	ldr	r3, [pc, #124]	; (3938 <xTaskResumeAll+0xdc>)
    38bc:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    38be:	4b1f      	ldr	r3, [pc, #124]	; (393c <xTaskResumeAll+0xe0>)
    38c0:	681b      	ldr	r3, [r3, #0]
    38c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    38c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38c6:	429a      	cmp	r2, r3
    38c8:	d302      	bcc.n	38d0 <xTaskResumeAll+0x74>
					{
						xYieldPending = pdTRUE;
    38ca:	2201      	movs	r2, #1
    38cc:	4b1c      	ldr	r3, [pc, #112]	; (3940 <xTaskResumeAll+0xe4>)
    38ce:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    38d0:	682b      	ldr	r3, [r5, #0]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d1da      	bne.n	388c <xTaskResumeAll+0x30>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    38d6:	4b1b      	ldr	r3, [pc, #108]	; (3944 <xTaskResumeAll+0xe8>)
    38d8:	681b      	ldr	r3, [r3, #0]
    38da:	2b00      	cmp	r3, #0
    38dc:	d011      	beq.n	3902 <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    38de:	4b19      	ldr	r3, [pc, #100]	; (3944 <xTaskResumeAll+0xe8>)
    38e0:	681b      	ldr	r3, [r3, #0]
    38e2:	2b00      	cmp	r3, #0
    38e4:	d00d      	beq.n	3902 <xTaskResumeAll+0xa6>
					{
						if( xTaskIncrementTick() != pdFALSE )
    38e6:	4e18      	ldr	r6, [pc, #96]	; (3948 <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    38e8:	4d15      	ldr	r5, [pc, #84]	; (3940 <xTaskResumeAll+0xe4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    38ea:	4c16      	ldr	r4, [pc, #88]	; (3944 <xTaskResumeAll+0xe8>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    38ec:	47b0      	blx	r6
    38ee:	2800      	cmp	r0, #0
    38f0:	d001      	beq.n	38f6 <xTaskResumeAll+0x9a>
						{
							xYieldPending = pdTRUE;
    38f2:	2301      	movs	r3, #1
    38f4:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    38f6:	6823      	ldr	r3, [r4, #0]
    38f8:	3b01      	subs	r3, #1
    38fa:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    38fc:	6823      	ldr	r3, [r4, #0]
    38fe:	2b00      	cmp	r3, #0
    3900:	d1f4      	bne.n	38ec <xTaskResumeAll+0x90>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3902:	4b0f      	ldr	r3, [pc, #60]	; (3940 <xTaskResumeAll+0xe4>)
    3904:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    3906:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    3908:	2b01      	cmp	r3, #1
    390a:	d102      	bne.n	3912 <xTaskResumeAll+0xb6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    390c:	4b0f      	ldr	r3, [pc, #60]	; (394c <xTaskResumeAll+0xf0>)
    390e:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3910:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3912:	4b0f      	ldr	r3, [pc, #60]	; (3950 <xTaskResumeAll+0xf4>)
    3914:	4798      	blx	r3

	return xAlreadyYielded;
}
    3916:	1c20      	adds	r0, r4, #0
    3918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	20004250 	.word	0x20004250
    3920:	00000a2d 	.word	0x00000a2d
    3924:	20004260 	.word	0x20004260
    3928:	2000423c 	.word	0x2000423c
    392c:	00003081 	.word	0x00003081
    3930:	20004278 	.word	0x20004278
    3934:	200041c0 	.word	0x200041c0
    3938:	00003039 	.word	0x00003039
    393c:	20004238 	.word	0x20004238
    3940:	2000427c 	.word	0x2000427c
    3944:	200041bc 	.word	0x200041bc
    3948:	00003731 	.word	0x00003731
    394c:	00000a15 	.word	0x00000a15
    3950:	00000a45 	.word	0x00000a45

00003954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    3954:	b510      	push	{r4, lr}
    3956:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    3958:	d016      	beq.n	3988 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    395a:	4b0d      	ldr	r3, [pc, #52]	; (3990 <vTaskDelay+0x3c>)
    395c:	681b      	ldr	r3, [r3, #0]
    395e:	2b00      	cmp	r3, #0
    3960:	d001      	beq.n	3966 <vTaskDelay+0x12>
    3962:	b672      	cpsid	i
    3964:	e7fe      	b.n	3964 <vTaskDelay+0x10>
			vTaskSuspendAll();
    3966:	4b0b      	ldr	r3, [pc, #44]	; (3994 <vTaskDelay+0x40>)
    3968:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    396a:	4b0b      	ldr	r3, [pc, #44]	; (3998 <vTaskDelay+0x44>)
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3970:	4b0a      	ldr	r3, [pc, #40]	; (399c <vTaskDelay+0x48>)
    3972:	6818      	ldr	r0, [r3, #0]
    3974:	3004      	adds	r0, #4
    3976:	4b0a      	ldr	r3, [pc, #40]	; (39a0 <vTaskDelay+0x4c>)
    3978:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    397a:	1c20      	adds	r0, r4, #0
    397c:	4b09      	ldr	r3, [pc, #36]	; (39a4 <vTaskDelay+0x50>)
    397e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    3980:	4b09      	ldr	r3, [pc, #36]	; (39a8 <vTaskDelay+0x54>)
    3982:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3984:	2800      	cmp	r0, #0
    3986:	d101      	bne.n	398c <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    3988:	4b08      	ldr	r3, [pc, #32]	; (39ac <vTaskDelay+0x58>)
    398a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    398c:	bd10      	pop	{r4, pc}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	20004250 	.word	0x20004250
    3994:	00003721 	.word	0x00003721
    3998:	20004254 	.word	0x20004254
    399c:	20004238 	.word	0x20004238
    39a0:	00003081 	.word	0x00003081
    39a4:	000034c5 	.word	0x000034c5
    39a8:	0000385d 	.word	0x0000385d
    39ac:	00000a15 	.word	0x00000a15

000039b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    39b0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    39b2:	4b20      	ldr	r3, [pc, #128]	; (3a34 <vTaskSwitchContext+0x84>)
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d003      	beq.n	39c2 <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    39ba:	2201      	movs	r2, #1
    39bc:	4b1e      	ldr	r3, [pc, #120]	; (3a38 <vTaskSwitchContext+0x88>)
    39be:	601a      	str	r2, [r3, #0]
    39c0:	e036      	b.n	3a30 <vTaskSwitchContext+0x80>
	}
	else
	{
		xYieldPending = pdFALSE;
    39c2:	2200      	movs	r2, #0
    39c4:	4b1c      	ldr	r3, [pc, #112]	; (3a38 <vTaskSwitchContext+0x88>)
    39c6:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    39c8:	4b1c      	ldr	r3, [pc, #112]	; (3a3c <vTaskSwitchContext+0x8c>)
    39ca:	681b      	ldr	r3, [r3, #0]
    39cc:	009a      	lsls	r2, r3, #2
    39ce:	18d3      	adds	r3, r2, r3
    39d0:	009b      	lsls	r3, r3, #2
    39d2:	4a1b      	ldr	r2, [pc, #108]	; (3a40 <vTaskSwitchContext+0x90>)
    39d4:	589b      	ldr	r3, [r3, r2]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d116      	bne.n	3a08 <vTaskSwitchContext+0x58>
    39da:	4b18      	ldr	r3, [pc, #96]	; (3a3c <vTaskSwitchContext+0x8c>)
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	2b00      	cmp	r3, #0
    39e0:	d105      	bne.n	39ee <vTaskSwitchContext+0x3e>
    39e2:	e002      	b.n	39ea <vTaskSwitchContext+0x3a>
    39e4:	6802      	ldr	r2, [r0, #0]
    39e6:	2a00      	cmp	r2, #0
    39e8:	d104      	bne.n	39f4 <vTaskSwitchContext+0x44>
    39ea:	b672      	cpsid	i
    39ec:	e7fe      	b.n	39ec <vTaskSwitchContext+0x3c>
    39ee:	4b13      	ldr	r3, [pc, #76]	; (3a3c <vTaskSwitchContext+0x8c>)
    39f0:	4c13      	ldr	r4, [pc, #76]	; (3a40 <vTaskSwitchContext+0x90>)
    39f2:	1c18      	adds	r0, r3, #0
    39f4:	681a      	ldr	r2, [r3, #0]
    39f6:	3a01      	subs	r2, #1
    39f8:	601a      	str	r2, [r3, #0]
    39fa:	681a      	ldr	r2, [r3, #0]
    39fc:	0091      	lsls	r1, r2, #2
    39fe:	188a      	adds	r2, r1, r2
    3a00:	0092      	lsls	r2, r2, #2
    3a02:	5912      	ldr	r2, [r2, r4]
    3a04:	2a00      	cmp	r2, #0
    3a06:	d0ed      	beq.n	39e4 <vTaskSwitchContext+0x34>
    3a08:	4b0c      	ldr	r3, [pc, #48]	; (3a3c <vTaskSwitchContext+0x8c>)
    3a0a:	681b      	ldr	r3, [r3, #0]
    3a0c:	009a      	lsls	r2, r3, #2
    3a0e:	18d3      	adds	r3, r2, r3
    3a10:	009b      	lsls	r3, r3, #2
    3a12:	4a0b      	ldr	r2, [pc, #44]	; (3a40 <vTaskSwitchContext+0x90>)
    3a14:	18d3      	adds	r3, r2, r3
    3a16:	685a      	ldr	r2, [r3, #4]
    3a18:	6852      	ldr	r2, [r2, #4]
    3a1a:	605a      	str	r2, [r3, #4]
    3a1c:	1c19      	adds	r1, r3, #0
    3a1e:	3108      	adds	r1, #8
    3a20:	428a      	cmp	r2, r1
    3a22:	d101      	bne.n	3a28 <vTaskSwitchContext+0x78>
    3a24:	6852      	ldr	r2, [r2, #4]
    3a26:	605a      	str	r2, [r3, #4]
    3a28:	685b      	ldr	r3, [r3, #4]
    3a2a:	68da      	ldr	r2, [r3, #12]
    3a2c:	4b05      	ldr	r3, [pc, #20]	; (3a44 <vTaskSwitchContext+0x94>)
    3a2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3a30:	bd10      	pop	{r4, pc}
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	20004250 	.word	0x20004250
    3a38:	2000427c 	.word	0x2000427c
    3a3c:	20004278 	.word	0x20004278
    3a40:	200041c0 	.word	0x200041c0
    3a44:	20004238 	.word	0x20004238

00003a48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3a48:	b538      	push	{r3, r4, r5, lr}
    3a4a:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    3a4c:	2800      	cmp	r0, #0
    3a4e:	d101      	bne.n	3a54 <vTaskPlaceOnEventList+0xc>
    3a50:	b672      	cpsid	i
    3a52:	e7fe      	b.n	3a52 <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3a54:	4d0b      	ldr	r5, [pc, #44]	; (3a84 <vTaskPlaceOnEventList+0x3c>)
    3a56:	6829      	ldr	r1, [r5, #0]
    3a58:	3118      	adds	r1, #24
    3a5a:	4b0b      	ldr	r3, [pc, #44]	; (3a88 <vTaskPlaceOnEventList+0x40>)
    3a5c:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3a5e:	6828      	ldr	r0, [r5, #0]
    3a60:	3004      	adds	r0, #4
    3a62:	4b0a      	ldr	r3, [pc, #40]	; (3a8c <vTaskPlaceOnEventList+0x44>)
    3a64:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3a66:	1c63      	adds	r3, r4, #1
    3a68:	d106      	bne.n	3a78 <vTaskPlaceOnEventList+0x30>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    3a6a:	4b06      	ldr	r3, [pc, #24]	; (3a84 <vTaskPlaceOnEventList+0x3c>)
    3a6c:	6819      	ldr	r1, [r3, #0]
    3a6e:	3104      	adds	r1, #4
    3a70:	4807      	ldr	r0, [pc, #28]	; (3a90 <vTaskPlaceOnEventList+0x48>)
    3a72:	4b08      	ldr	r3, [pc, #32]	; (3a94 <vTaskPlaceOnEventList+0x4c>)
    3a74:	4798      	blx	r3
    3a76:	e004      	b.n	3a82 <vTaskPlaceOnEventList+0x3a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    3a78:	4b07      	ldr	r3, [pc, #28]	; (3a98 <vTaskPlaceOnEventList+0x50>)
    3a7a:	6818      	ldr	r0, [r3, #0]
    3a7c:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    3a7e:	4b07      	ldr	r3, [pc, #28]	; (3a9c <vTaskPlaceOnEventList+0x54>)
    3a80:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3a82:	bd38      	pop	{r3, r4, r5, pc}
    3a84:	20004238 	.word	0x20004238
    3a88:	00003051 	.word	0x00003051
    3a8c:	00003081 	.word	0x00003081
    3a90:	20004264 	.word	0x20004264
    3a94:	00003039 	.word	0x00003039
    3a98:	20004254 	.word	0x20004254
    3a9c:	000034c5 	.word	0x000034c5

00003aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3aa0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3aa2:	68c3      	ldr	r3, [r0, #12]
    3aa4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    3aa6:	2c00      	cmp	r4, #0
    3aa8:	d101      	bne.n	3aae <xTaskRemoveFromEventList+0xe>
    3aaa:	b672      	cpsid	i
    3aac:	e7fe      	b.n	3aac <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3aae:	1c25      	adds	r5, r4, #0
    3ab0:	3518      	adds	r5, #24
    3ab2:	1c28      	adds	r0, r5, #0
    3ab4:	4b14      	ldr	r3, [pc, #80]	; (3b08 <xTaskRemoveFromEventList+0x68>)
    3ab6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3ab8:	4b14      	ldr	r3, [pc, #80]	; (3b0c <xTaskRemoveFromEventList+0x6c>)
    3aba:	681b      	ldr	r3, [r3, #0]
    3abc:	2b00      	cmp	r3, #0
    3abe:	d113      	bne.n	3ae8 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3ac0:	1d25      	adds	r5, r4, #4
    3ac2:	1c28      	adds	r0, r5, #0
    3ac4:	4b10      	ldr	r3, [pc, #64]	; (3b08 <xTaskRemoveFromEventList+0x68>)
    3ac6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    3ac8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3aca:	4a11      	ldr	r2, [pc, #68]	; (3b10 <xTaskRemoveFromEventList+0x70>)
    3acc:	6812      	ldr	r2, [r2, #0]
    3ace:	4293      	cmp	r3, r2
    3ad0:	d901      	bls.n	3ad6 <xTaskRemoveFromEventList+0x36>
    3ad2:	4a0f      	ldr	r2, [pc, #60]	; (3b10 <xTaskRemoveFromEventList+0x70>)
    3ad4:	6013      	str	r3, [r2, #0]
    3ad6:	009a      	lsls	r2, r3, #2
    3ad8:	18d3      	adds	r3, r2, r3
    3ada:	009b      	lsls	r3, r3, #2
    3adc:	480d      	ldr	r0, [pc, #52]	; (3b14 <xTaskRemoveFromEventList+0x74>)
    3ade:	18c0      	adds	r0, r0, r3
    3ae0:	1c29      	adds	r1, r5, #0
    3ae2:	4b0d      	ldr	r3, [pc, #52]	; (3b18 <xTaskRemoveFromEventList+0x78>)
    3ae4:	4798      	blx	r3
    3ae6:	e003      	b.n	3af0 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3ae8:	480c      	ldr	r0, [pc, #48]	; (3b1c <xTaskRemoveFromEventList+0x7c>)
    3aea:	1c29      	adds	r1, r5, #0
    3aec:	4b0a      	ldr	r3, [pc, #40]	; (3b18 <xTaskRemoveFromEventList+0x78>)
    3aee:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3af0:	4b0b      	ldr	r3, [pc, #44]	; (3b20 <xTaskRemoveFromEventList+0x80>)
    3af2:	681b      	ldr	r3, [r3, #0]
    3af4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    3af8:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3afa:	429a      	cmp	r2, r3
    3afc:	d903      	bls.n	3b06 <xTaskRemoveFromEventList+0x66>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3afe:	2201      	movs	r2, #1
    3b00:	4b08      	ldr	r3, [pc, #32]	; (3b24 <xTaskRemoveFromEventList+0x84>)
    3b02:	601a      	str	r2, [r3, #0]
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3b04:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    3b06:	bd38      	pop	{r3, r4, r5, pc}
    3b08:	00003081 	.word	0x00003081
    3b0c:	20004250 	.word	0x20004250
    3b10:	20004278 	.word	0x20004278
    3b14:	200041c0 	.word	0x200041c0
    3b18:	00003039 	.word	0x00003039
    3b1c:	2000423c 	.word	0x2000423c
    3b20:	20004238 	.word	0x20004238
    3b24:	2000427c 	.word	0x2000427c

00003b28 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    3b28:	2800      	cmp	r0, #0
    3b2a:	d101      	bne.n	3b30 <vTaskSetTimeOutState+0x8>
    3b2c:	b672      	cpsid	i
    3b2e:	e7fe      	b.n	3b2e <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3b30:	4b03      	ldr	r3, [pc, #12]	; (3b40 <vTaskSetTimeOutState+0x18>)
    3b32:	681b      	ldr	r3, [r3, #0]
    3b34:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3b36:	4b03      	ldr	r3, [pc, #12]	; (3b44 <vTaskSetTimeOutState+0x1c>)
    3b38:	681b      	ldr	r3, [r3, #0]
    3b3a:	6043      	str	r3, [r0, #4]
}
    3b3c:	4770      	bx	lr
    3b3e:	46c0      	nop			; (mov r8, r8)
    3b40:	20004188 	.word	0x20004188
    3b44:	20004254 	.word	0x20004254

00003b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3b48:	b570      	push	{r4, r5, r6, lr}
    3b4a:	1c04      	adds	r4, r0, #0
    3b4c:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    3b4e:	2800      	cmp	r0, #0
    3b50:	d101      	bne.n	3b56 <xTaskCheckForTimeOut+0xe>
    3b52:	b672      	cpsid	i
    3b54:	e7fe      	b.n	3b54 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    3b56:	2900      	cmp	r1, #0
    3b58:	d101      	bne.n	3b5e <xTaskCheckForTimeOut+0x16>
    3b5a:	b672      	cpsid	i
    3b5c:	e7fe      	b.n	3b5c <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    3b5e:	4b11      	ldr	r3, [pc, #68]	; (3ba4 <xTaskCheckForTimeOut+0x5c>)
    3b60:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3b62:	4b11      	ldr	r3, [pc, #68]	; (3ba8 <xTaskCheckForTimeOut+0x60>)
    3b64:	681a      	ldr	r2, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    3b66:	6833      	ldr	r3, [r6, #0]
    3b68:	1c58      	adds	r0, r3, #1
    3b6a:	d015      	beq.n	3b98 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3b6c:	490f      	ldr	r1, [pc, #60]	; (3bac <xTaskCheckForTimeOut+0x64>)
    3b6e:	6809      	ldr	r1, [r1, #0]
    3b70:	6820      	ldr	r0, [r4, #0]
    3b72:	4288      	cmp	r0, r1
    3b74:	d003      	beq.n	3b7e <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    3b76:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3b78:	6861      	ldr	r1, [r4, #4]
    3b7a:	428a      	cmp	r2, r1
    3b7c:	d20d      	bcs.n	3b9a <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    3b7e:	6861      	ldr	r1, [r4, #4]
    3b80:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    3b82:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    3b84:	4283      	cmp	r3, r0
    3b86:	d908      	bls.n	3b9a <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    3b88:	1a8a      	subs	r2, r1, r2
    3b8a:	18d3      	adds	r3, r2, r3
    3b8c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    3b8e:	1c20      	adds	r0, r4, #0
    3b90:	4b07      	ldr	r3, [pc, #28]	; (3bb0 <xTaskCheckForTimeOut+0x68>)
    3b92:	4798      	blx	r3
			xReturn = pdFALSE;
    3b94:	2500      	movs	r5, #0
    3b96:	e000      	b.n	3b9a <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    3b98:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    3b9a:	4b06      	ldr	r3, [pc, #24]	; (3bb4 <xTaskCheckForTimeOut+0x6c>)
    3b9c:	4798      	blx	r3

	return xReturn;
}
    3b9e:	1c28      	adds	r0, r5, #0
    3ba0:	bd70      	pop	{r4, r5, r6, pc}
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	00000a2d 	.word	0x00000a2d
    3ba8:	20004254 	.word	0x20004254
    3bac:	20004188 	.word	0x20004188
    3bb0:	00003b29 	.word	0x00003b29
    3bb4:	00000a45 	.word	0x00000a45

00003bb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    3bb8:	2201      	movs	r2, #1
    3bba:	4b01      	ldr	r3, [pc, #4]	; (3bc0 <vTaskMissedYield+0x8>)
    3bbc:	601a      	str	r2, [r3, #0]
}
    3bbe:	4770      	bx	lr
    3bc0:	2000427c 	.word	0x2000427c

00003bc4 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    3bc4:	4b01      	ldr	r3, [pc, #4]	; (3bcc <xTaskGetCurrentTaskHandle+0x8>)
    3bc6:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    3bc8:	4770      	bx	lr
    3bca:	46c0      	nop			; (mov r8, r8)
    3bcc:	20004238 	.word	0x20004238

00003bd0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3bd0:	4b05      	ldr	r3, [pc, #20]	; (3be8 <xTaskGetSchedulerState+0x18>)
    3bd2:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    3bd4:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	d004      	beq.n	3be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3bda:	4b04      	ldr	r3, [pc, #16]	; (3bec <xTaskGetSchedulerState+0x1c>)
    3bdc:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
    3bde:	4243      	negs	r3, r0
    3be0:	4158      	adcs	r0, r3
    3be2:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    3be4:	4770      	bx	lr
    3be6:	46c0      	nop			; (mov r8, r8)
    3be8:	20004190 	.word	0x20004190
    3bec:	20004250 	.word	0x20004250

00003bf0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    3bf0:	b538      	push	{r3, r4, r5, lr}
    3bf2:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    3bf4:	d031      	beq.n	3c5a <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    3bf6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3bf8:	4a18      	ldr	r2, [pc, #96]	; (3c5c <vTaskPriorityInherit+0x6c>)
    3bfa:	6812      	ldr	r2, [r2, #0]
    3bfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3bfe:	4293      	cmp	r3, r2
    3c00:	d22b      	bcs.n	3c5a <vTaskPriorityInherit+0x6a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3c02:	6982      	ldr	r2, [r0, #24]
    3c04:	2a00      	cmp	r2, #0
    3c06:	db05      	blt.n	3c14 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c08:	4a14      	ldr	r2, [pc, #80]	; (3c5c <vTaskPriorityInherit+0x6c>)
    3c0a:	6812      	ldr	r2, [r2, #0]
    3c0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3c0e:	2105      	movs	r1, #5
    3c10:	1a8a      	subs	r2, r1, r2
    3c12:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3c14:	009a      	lsls	r2, r3, #2
    3c16:	18d3      	adds	r3, r2, r3
    3c18:	009b      	lsls	r3, r3, #2
    3c1a:	4a11      	ldr	r2, [pc, #68]	; (3c60 <vTaskPriorityInherit+0x70>)
    3c1c:	18d3      	adds	r3, r2, r3
    3c1e:	6962      	ldr	r2, [r4, #20]
    3c20:	429a      	cmp	r2, r3
    3c22:	d116      	bne.n	3c52 <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3c24:	1d25      	adds	r5, r4, #4
    3c26:	1c28      	adds	r0, r5, #0
    3c28:	4b0e      	ldr	r3, [pc, #56]	; (3c64 <vTaskPriorityInherit+0x74>)
    3c2a:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3c2c:	4b0b      	ldr	r3, [pc, #44]	; (3c5c <vTaskPriorityInherit+0x6c>)
    3c2e:	681b      	ldr	r3, [r3, #0]
    3c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c32:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    3c34:	4a0c      	ldr	r2, [pc, #48]	; (3c68 <vTaskPriorityInherit+0x78>)
    3c36:	6812      	ldr	r2, [r2, #0]
    3c38:	4293      	cmp	r3, r2
    3c3a:	d901      	bls.n	3c40 <vTaskPriorityInherit+0x50>
    3c3c:	4a0a      	ldr	r2, [pc, #40]	; (3c68 <vTaskPriorityInherit+0x78>)
    3c3e:	6013      	str	r3, [r2, #0]
    3c40:	0098      	lsls	r0, r3, #2
    3c42:	18c3      	adds	r3, r0, r3
    3c44:	009b      	lsls	r3, r3, #2
    3c46:	4806      	ldr	r0, [pc, #24]	; (3c60 <vTaskPriorityInherit+0x70>)
    3c48:	18c0      	adds	r0, r0, r3
    3c4a:	1c29      	adds	r1, r5, #0
    3c4c:	4b07      	ldr	r3, [pc, #28]	; (3c6c <vTaskPriorityInherit+0x7c>)
    3c4e:	4798      	blx	r3
    3c50:	e003      	b.n	3c5a <vTaskPriorityInherit+0x6a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3c52:	4b02      	ldr	r3, [pc, #8]	; (3c5c <vTaskPriorityInherit+0x6c>)
    3c54:	681b      	ldr	r3, [r3, #0]
    3c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c58:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3c5a:	bd38      	pop	{r3, r4, r5, pc}
    3c5c:	20004238 	.word	0x20004238
    3c60:	200041c0 	.word	0x200041c0
    3c64:	00003081 	.word	0x00003081
    3c68:	20004278 	.word	0x20004278
    3c6c:	00003039 	.word	0x00003039

00003c70 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    3c70:	b538      	push	{r3, r4, r5, lr}
    3c72:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    3c74:	d01d      	beq.n	3cb2 <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3c76:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3c78:	6c43      	ldr	r3, [r0, #68]	; 0x44
    3c7a:	429a      	cmp	r2, r3
    3c7c:	d019      	beq.n	3cb2 <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3c7e:	1d05      	adds	r5, r0, #4
    3c80:	1c28      	adds	r0, r5, #0
    3c82:	4b0c      	ldr	r3, [pc, #48]	; (3cb4 <vTaskPriorityDisinherit+0x44>)
    3c84:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3c86:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3c88:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3c8a:	69a2      	ldr	r2, [r4, #24]
    3c8c:	2a00      	cmp	r2, #0
    3c8e:	db02      	blt.n	3c96 <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c90:	2205      	movs	r2, #5
    3c92:	1ad2      	subs	r2, r2, r3
    3c94:	61a2      	str	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    3c96:	4a08      	ldr	r2, [pc, #32]	; (3cb8 <vTaskPriorityDisinherit+0x48>)
    3c98:	6812      	ldr	r2, [r2, #0]
    3c9a:	4293      	cmp	r3, r2
    3c9c:	d901      	bls.n	3ca2 <vTaskPriorityDisinherit+0x32>
    3c9e:	4a06      	ldr	r2, [pc, #24]	; (3cb8 <vTaskPriorityDisinherit+0x48>)
    3ca0:	6013      	str	r3, [r2, #0]
    3ca2:	0098      	lsls	r0, r3, #2
    3ca4:	18c3      	adds	r3, r0, r3
    3ca6:	009b      	lsls	r3, r3, #2
    3ca8:	4804      	ldr	r0, [pc, #16]	; (3cbc <vTaskPriorityDisinherit+0x4c>)
    3caa:	18c0      	adds	r0, r0, r3
    3cac:	1c29      	adds	r1, r5, #0
    3cae:	4b04      	ldr	r3, [pc, #16]	; (3cc0 <vTaskPriorityDisinherit+0x50>)
    3cb0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3cb2:	bd38      	pop	{r3, r4, r5, pc}
    3cb4:	00003081 	.word	0x00003081
    3cb8:	20004278 	.word	0x20004278
    3cbc:	200041c0 	.word	0x200041c0
    3cc0:	00003039 	.word	0x00003039

00003cc4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3cc4:	1c93      	adds	r3, r2, #2
    3cc6:	009b      	lsls	r3, r3, #2
    3cc8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    3cca:	2a02      	cmp	r2, #2
    3ccc:	d104      	bne.n	3cd8 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    3cce:	7e02      	ldrb	r2, [r0, #24]
    3cd0:	2310      	movs	r3, #16
    3cd2:	4313      	orrs	r3, r2
    3cd4:	7603      	strb	r3, [r0, #24]
    3cd6:	e00c      	b.n	3cf2 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    3cd8:	2a03      	cmp	r2, #3
    3cda:	d104      	bne.n	3ce6 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    3cdc:	7e02      	ldrb	r2, [r0, #24]
    3cde:	2320      	movs	r3, #32
    3ce0:	4313      	orrs	r3, r2
    3ce2:	7603      	strb	r3, [r0, #24]
    3ce4:	e005      	b.n	3cf2 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    3ce6:	2301      	movs	r3, #1
    3ce8:	4093      	lsls	r3, r2
    3cea:	1c1a      	adds	r2, r3, #0
    3cec:	7e03      	ldrb	r3, [r0, #24]
    3cee:	431a      	orrs	r2, r3
    3cf0:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    3cf2:	2000      	movs	r0, #0
    3cf4:	4770      	bx	lr
    3cf6:	46c0      	nop			; (mov r8, r8)

00003cf8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3cf8:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    3cfa:	0080      	lsls	r0, r0, #2
    3cfc:	4b14      	ldr	r3, [pc, #80]	; (3d50 <_tc_interrupt_handler+0x58>)
    3cfe:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3d00:	6822      	ldr	r2, [r4, #0]
    3d02:	7b95      	ldrb	r5, [r2, #14]
    3d04:	7e23      	ldrb	r3, [r4, #24]
    3d06:	401d      	ands	r5, r3
    3d08:	7e63      	ldrb	r3, [r4, #25]
    3d0a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    3d0c:	07eb      	lsls	r3, r5, #31
    3d0e:	d505      	bpl.n	3d1c <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3d10:	1c20      	adds	r0, r4, #0
    3d12:	68a2      	ldr	r2, [r4, #8]
    3d14:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3d16:	2301      	movs	r3, #1
    3d18:	6822      	ldr	r2, [r4, #0]
    3d1a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    3d1c:	07ab      	lsls	r3, r5, #30
    3d1e:	d505      	bpl.n	3d2c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    3d20:	1c20      	adds	r0, r4, #0
    3d22:	68e2      	ldr	r2, [r4, #12]
    3d24:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3d26:	2302      	movs	r3, #2
    3d28:	6822      	ldr	r2, [r4, #0]
    3d2a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    3d2c:	06eb      	lsls	r3, r5, #27
    3d2e:	d505      	bpl.n	3d3c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    3d30:	1c20      	adds	r0, r4, #0
    3d32:	6922      	ldr	r2, [r4, #16]
    3d34:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    3d36:	2310      	movs	r3, #16
    3d38:	6822      	ldr	r2, [r4, #0]
    3d3a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    3d3c:	06ab      	lsls	r3, r5, #26
    3d3e:	d505      	bpl.n	3d4c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    3d40:	1c20      	adds	r0, r4, #0
    3d42:	6962      	ldr	r2, [r4, #20]
    3d44:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    3d46:	6823      	ldr	r3, [r4, #0]
    3d48:	2220      	movs	r2, #32
    3d4a:	739a      	strb	r2, [r3, #14]
	}
}
    3d4c:	bd38      	pop	{r3, r4, r5, pc}
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	200044ac 	.word	0x200044ac

00003d54 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    3d54:	b508      	push	{r3, lr}
    3d56:	2000      	movs	r0, #0
    3d58:	4b01      	ldr	r3, [pc, #4]	; (3d60 <TC3_Handler+0xc>)
    3d5a:	4798      	blx	r3
    3d5c:	bd08      	pop	{r3, pc}
    3d5e:	46c0      	nop			; (mov r8, r8)
    3d60:	00003cf9 	.word	0x00003cf9

00003d64 <TC4_Handler>:
    3d64:	b508      	push	{r3, lr}
    3d66:	2001      	movs	r0, #1
    3d68:	4b01      	ldr	r3, [pc, #4]	; (3d70 <TC4_Handler+0xc>)
    3d6a:	4798      	blx	r3
    3d6c:	bd08      	pop	{r3, pc}
    3d6e:	46c0      	nop			; (mov r8, r8)
    3d70:	00003cf9 	.word	0x00003cf9

00003d74 <TC5_Handler>:
    3d74:	b508      	push	{r3, lr}
    3d76:	2002      	movs	r0, #2
    3d78:	4b01      	ldr	r3, [pc, #4]	; (3d80 <TC5_Handler+0xc>)
    3d7a:	4798      	blx	r3
    3d7c:	bd08      	pop	{r3, pc}
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	00003cf9 	.word	0x00003cf9

00003d84 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d86:	465f      	mov	r7, fp
    3d88:	4656      	mov	r6, sl
    3d8a:	464d      	mov	r5, r9
    3d8c:	4644      	mov	r4, r8
    3d8e:	b4f0      	push	{r4, r5, r6, r7}
    3d90:	b091      	sub	sp, #68	; 0x44
    3d92:	1c05      	adds	r5, r0, #0
    3d94:	1c0c      	adds	r4, r1, #0
    3d96:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3d98:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3d9a:	1c08      	adds	r0, r1, #0
    3d9c:	4bad      	ldr	r3, [pc, #692]	; (4054 <usart_init+0x2d0>)
    3d9e:	4798      	blx	r3
    3da0:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3da2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3da4:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3da6:	07d9      	lsls	r1, r3, #31
    3da8:	d500      	bpl.n	3dac <usart_init+0x28>
    3daa:	e14b      	b.n	4044 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3dac:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3dae:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3db0:	079f      	lsls	r7, r3, #30
    3db2:	d500      	bpl.n	3db6 <usart_init+0x32>
    3db4:	e146      	b.n	4044 <usart_init+0x2c0>
    3db6:	4ba8      	ldr	r3, [pc, #672]	; (4058 <usart_init+0x2d4>)
    3db8:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3dba:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3dbc:	2701      	movs	r7, #1
    3dbe:	408f      	lsls	r7, r1
    3dc0:	1c39      	adds	r1, r7, #0
    3dc2:	4301      	orrs	r1, r0
    3dc4:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3dc6:	a90f      	add	r1, sp, #60	; 0x3c
    3dc8:	272d      	movs	r7, #45	; 0x2d
    3dca:	5df3      	ldrb	r3, [r6, r7]
    3dcc:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3dce:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3dd0:	b2d2      	uxtb	r2, r2
    3dd2:	4690      	mov	r8, r2
    3dd4:	1c10      	adds	r0, r2, #0
    3dd6:	4ba1      	ldr	r3, [pc, #644]	; (405c <usart_init+0x2d8>)
    3dd8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3dda:	4640      	mov	r0, r8
    3ddc:	4ba0      	ldr	r3, [pc, #640]	; (4060 <usart_init+0x2dc>)
    3dde:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3de0:	5df0      	ldrb	r0, [r6, r7]
    3de2:	2100      	movs	r1, #0
    3de4:	4b9f      	ldr	r3, [pc, #636]	; (4064 <usart_init+0x2e0>)
    3de6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    3de8:	7af3      	ldrb	r3, [r6, #11]
    3dea:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    3dec:	2324      	movs	r3, #36	; 0x24
    3dee:	5cf3      	ldrb	r3, [r6, r3]
    3df0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3df2:	2325      	movs	r3, #37	; 0x25
    3df4:	5cf3      	ldrb	r3, [r6, r3]
    3df6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    3df8:	7ef3      	ldrb	r3, [r6, #27]
    3dfa:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3dfc:	7f33      	ldrb	r3, [r6, #28]
    3dfe:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e00:	6829      	ldr	r1, [r5, #0]
    3e02:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3e04:	1c08      	adds	r0, r1, #0
    3e06:	4b93      	ldr	r3, [pc, #588]	; (4054 <usart_init+0x2d0>)
    3e08:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3e0a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    3e0c:	2200      	movs	r2, #0
    3e0e:	466b      	mov	r3, sp
    3e10:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3e12:	8a32      	ldrh	r2, [r6, #16]
    3e14:	9202      	str	r2, [sp, #8]
    3e16:	2380      	movs	r3, #128	; 0x80
    3e18:	01db      	lsls	r3, r3, #7
    3e1a:	429a      	cmp	r2, r3
    3e1c:	d021      	beq.n	3e62 <usart_init+0xde>
    3e1e:	2380      	movs	r3, #128	; 0x80
    3e20:	01db      	lsls	r3, r3, #7
    3e22:	429a      	cmp	r2, r3
    3e24:	d804      	bhi.n	3e30 <usart_init+0xac>
    3e26:	2380      	movs	r3, #128	; 0x80
    3e28:	019b      	lsls	r3, r3, #6
    3e2a:	429a      	cmp	r2, r3
    3e2c:	d011      	beq.n	3e52 <usart_init+0xce>
    3e2e:	e008      	b.n	3e42 <usart_init+0xbe>
    3e30:	23c0      	movs	r3, #192	; 0xc0
    3e32:	01db      	lsls	r3, r3, #7
    3e34:	9f02      	ldr	r7, [sp, #8]
    3e36:	429f      	cmp	r7, r3
    3e38:	d00f      	beq.n	3e5a <usart_init+0xd6>
    3e3a:	2380      	movs	r3, #128	; 0x80
    3e3c:	021b      	lsls	r3, r3, #8
    3e3e:	429f      	cmp	r7, r3
    3e40:	d003      	beq.n	3e4a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3e42:	2710      	movs	r7, #16
    3e44:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3e46:	2700      	movs	r7, #0
    3e48:	e00e      	b.n	3e68 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3e4a:	2703      	movs	r7, #3
    3e4c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3e4e:	2700      	movs	r7, #0
    3e50:	e00a      	b.n	3e68 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3e52:	2710      	movs	r7, #16
    3e54:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3e56:	2701      	movs	r7, #1
    3e58:	e006      	b.n	3e68 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3e5a:	2708      	movs	r7, #8
    3e5c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3e5e:	2701      	movs	r7, #1
    3e60:	e002      	b.n	3e68 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3e62:	2708      	movs	r7, #8
    3e64:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3e66:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3e68:	6831      	ldr	r1, [r6, #0]
    3e6a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    3e6c:	68f2      	ldr	r2, [r6, #12]
    3e6e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3e70:	6973      	ldr	r3, [r6, #20]
    3e72:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3e74:	7e31      	ldrb	r1, [r6, #24]
    3e76:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3e78:	2326      	movs	r3, #38	; 0x26
    3e7a:	5cf3      	ldrb	r3, [r6, r3]
    3e7c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    3e7e:	6873      	ldr	r3, [r6, #4]
    3e80:	2b00      	cmp	r3, #0
    3e82:	d013      	beq.n	3eac <usart_init+0x128>
    3e84:	2280      	movs	r2, #128	; 0x80
    3e86:	0552      	lsls	r2, r2, #21
    3e88:	4293      	cmp	r3, r2
    3e8a:	d12e      	bne.n	3eea <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3e8c:	2327      	movs	r3, #39	; 0x27
    3e8e:	5cf3      	ldrb	r3, [r6, r3]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d12e      	bne.n	3ef2 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3e94:	6a37      	ldr	r7, [r6, #32]
    3e96:	b2c0      	uxtb	r0, r0
    3e98:	4b73      	ldr	r3, [pc, #460]	; (4068 <usart_init+0x2e4>)
    3e9a:	4798      	blx	r3
    3e9c:	1c01      	adds	r1, r0, #0
    3e9e:	1c38      	adds	r0, r7, #0
    3ea0:	466a      	mov	r2, sp
    3ea2:	3226      	adds	r2, #38	; 0x26
    3ea4:	4b71      	ldr	r3, [pc, #452]	; (406c <usart_init+0x2e8>)
    3ea6:	4798      	blx	r3
    3ea8:	1c03      	adds	r3, r0, #0
    3eaa:	e01f      	b.n	3eec <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3eac:	2327      	movs	r3, #39	; 0x27
    3eae:	5cf3      	ldrb	r3, [r6, r3]
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	d00a      	beq.n	3eca <usart_init+0x146>
				status_code =
    3eb4:	9a06      	ldr	r2, [sp, #24]
    3eb6:	9200      	str	r2, [sp, #0]
    3eb8:	6a30      	ldr	r0, [r6, #32]
    3eba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3ebc:	466a      	mov	r2, sp
    3ebe:	3226      	adds	r2, #38	; 0x26
    3ec0:	1c3b      	adds	r3, r7, #0
    3ec2:	4f6b      	ldr	r7, [pc, #428]	; (4070 <usart_init+0x2ec>)
    3ec4:	47b8      	blx	r7
    3ec6:	1c03      	adds	r3, r0, #0
    3ec8:	e010      	b.n	3eec <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    3eca:	6a31      	ldr	r1, [r6, #32]
    3ecc:	9107      	str	r1, [sp, #28]
    3ece:	b2c0      	uxtb	r0, r0
    3ed0:	4b65      	ldr	r3, [pc, #404]	; (4068 <usart_init+0x2e4>)
    3ed2:	4798      	blx	r3
    3ed4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    3ed6:	9a06      	ldr	r2, [sp, #24]
    3ed8:	9200      	str	r2, [sp, #0]
    3eda:	9807      	ldr	r0, [sp, #28]
    3edc:	466a      	mov	r2, sp
    3ede:	3226      	adds	r2, #38	; 0x26
    3ee0:	1c3b      	adds	r3, r7, #0
    3ee2:	4f63      	ldr	r7, [pc, #396]	; (4070 <usart_init+0x2ec>)
    3ee4:	47b8      	blx	r7
    3ee6:	1c03      	adds	r3, r0, #0
    3ee8:	e000      	b.n	3eec <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    3eea:	2300      	movs	r3, #0
    3eec:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    3eee:	d000      	beq.n	3ef2 <usart_init+0x16e>
    3ef0:	e0a8      	b.n	4044 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    3ef2:	7e73      	ldrb	r3, [r6, #25]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d002      	beq.n	3efe <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3ef8:	7eb3      	ldrb	r3, [r6, #26]
    3efa:	4641      	mov	r1, r8
    3efc:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3efe:	682a      	ldr	r2, [r5, #0]
    3f00:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3f02:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    3f04:	2b00      	cmp	r3, #0
    3f06:	d1fc      	bne.n	3f02 <usart_init+0x17e>
    3f08:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3f0a:	466b      	mov	r3, sp
    3f0c:	3326      	adds	r3, #38	; 0x26
    3f0e:	881b      	ldrh	r3, [r3, #0]
    3f10:	4642      	mov	r2, r8
    3f12:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3f14:	464b      	mov	r3, r9
    3f16:	9f03      	ldr	r7, [sp, #12]
    3f18:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    3f1a:	9f04      	ldr	r7, [sp, #16]
    3f1c:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3f1e:	6871      	ldr	r1, [r6, #4]
    3f20:	430b      	orrs	r3, r1
		config->sample_rate |
    3f22:	9f02      	ldr	r7, [sp, #8]
    3f24:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3f26:	4652      	mov	r2, sl
    3f28:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3f2a:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3f2c:	4659      	mov	r1, fp
    3f2e:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    3f30:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    3f32:	2327      	movs	r3, #39	; 0x27
    3f34:	5cf3      	ldrb	r3, [r6, r3]
    3f36:	2b00      	cmp	r3, #0
    3f38:	d101      	bne.n	3f3e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3f3a:	2304      	movs	r3, #4
    3f3c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3f3e:	7e71      	ldrb	r1, [r6, #25]
    3f40:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3f42:	7f33      	ldrb	r3, [r6, #28]
    3f44:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    3f46:	4319      	orrs	r1, r3
    3f48:	7af2      	ldrb	r2, [r6, #11]
    3f4a:	7ab3      	ldrb	r3, [r6, #10]
    3f4c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3f4e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3f50:	7f73      	ldrb	r3, [r6, #29]
    3f52:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3f54:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3f56:	2324      	movs	r3, #36	; 0x24
    3f58:	5cf3      	ldrb	r3, [r6, r3]
    3f5a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3f5c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3f5e:	2325      	movs	r3, #37	; 0x25
    3f60:	5cf3      	ldrb	r3, [r6, r3]
    3f62:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    3f64:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3f66:	8933      	ldrh	r3, [r6, #8]
    3f68:	2bff      	cmp	r3, #255	; 0xff
    3f6a:	d00b      	beq.n	3f84 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    3f6c:	7ef2      	ldrb	r2, [r6, #27]
    3f6e:	2a00      	cmp	r2, #0
    3f70:	d003      	beq.n	3f7a <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    3f72:	22a0      	movs	r2, #160	; 0xa0
    3f74:	04d2      	lsls	r2, r2, #19
    3f76:	4317      	orrs	r7, r2
    3f78:	e002      	b.n	3f80 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3f7a:	2280      	movs	r2, #128	; 0x80
    3f7c:	0452      	lsls	r2, r2, #17
    3f7e:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    3f80:	4319      	orrs	r1, r3
    3f82:	e005      	b.n	3f90 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    3f84:	7ef3      	ldrb	r3, [r6, #27]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d002      	beq.n	3f90 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3f8a:	2380      	movs	r3, #128	; 0x80
    3f8c:	04db      	lsls	r3, r3, #19
    3f8e:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3f90:	232c      	movs	r3, #44	; 0x2c
    3f92:	5cf3      	ldrb	r3, [r6, r3]
    3f94:	2b00      	cmp	r3, #0
    3f96:	d103      	bne.n	3fa0 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3f98:	4b36      	ldr	r3, [pc, #216]	; (4074 <usart_init+0x2f0>)
    3f9a:	789b      	ldrb	r3, [r3, #2]
    3f9c:	079a      	lsls	r2, r3, #30
    3f9e:	d501      	bpl.n	3fa4 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3fa0:	2380      	movs	r3, #128	; 0x80
    3fa2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3fa4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3fa6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d1fc      	bne.n	3fa6 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3fac:	4643      	mov	r3, r8
    3fae:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3fb0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3fb2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	d1fc      	bne.n	3fb2 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3fb8:	4641      	mov	r1, r8
    3fba:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3fbc:	ab0e      	add	r3, sp, #56	; 0x38
    3fbe:	2280      	movs	r2, #128	; 0x80
    3fc0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3fc2:	2200      	movs	r2, #0
    3fc4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    3fc6:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3fc8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    3fca:	6b32      	ldr	r2, [r6, #48]	; 0x30
    3fcc:	920a      	str	r2, [sp, #40]	; 0x28
    3fce:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3fd0:	930b      	str	r3, [sp, #44]	; 0x2c
    3fd2:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    3fd4:	970c      	str	r7, [sp, #48]	; 0x30
    3fd6:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    3fd8:	960d      	str	r6, [sp, #52]	; 0x34
    3fda:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3fdc:	ae0e      	add	r6, sp, #56	; 0x38
    3fde:	b2f9      	uxtb	r1, r7
    3fe0:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3fe2:	aa0a      	add	r2, sp, #40	; 0x28
    3fe4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3fe6:	2800      	cmp	r0, #0
    3fe8:	d102      	bne.n	3ff0 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3fea:	1c20      	adds	r0, r4, #0
    3fec:	4a22      	ldr	r2, [pc, #136]	; (4078 <usart_init+0x2f4>)
    3fee:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3ff0:	1c43      	adds	r3, r0, #1
    3ff2:	d005      	beq.n	4000 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3ff4:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3ff6:	0c00      	lsrs	r0, r0, #16
    3ff8:	b2c0      	uxtb	r0, r0
    3ffa:	1c31      	adds	r1, r6, #0
    3ffc:	4a1f      	ldr	r2, [pc, #124]	; (407c <usart_init+0x2f8>)
    3ffe:	4790      	blx	r2
    4000:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4002:	2f04      	cmp	r7, #4
    4004:	d1eb      	bne.n	3fde <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    4006:	2300      	movs	r3, #0
    4008:	60eb      	str	r3, [r5, #12]
    400a:	612b      	str	r3, [r5, #16]
    400c:	616b      	str	r3, [r5, #20]
    400e:	61ab      	str	r3, [r5, #24]
    4010:	61eb      	str	r3, [r5, #28]
    4012:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    4014:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4016:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4018:	2200      	movs	r2, #0
    401a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    401c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    401e:	2330      	movs	r3, #48	; 0x30
    4020:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4022:	2331      	movs	r3, #49	; 0x31
    4024:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4026:	2332      	movs	r3, #50	; 0x32
    4028:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    402a:	2333      	movs	r3, #51	; 0x33
    402c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    402e:	6828      	ldr	r0, [r5, #0]
    4030:	4b08      	ldr	r3, [pc, #32]	; (4054 <usart_init+0x2d0>)
    4032:	4798      	blx	r3
    4034:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4036:	4912      	ldr	r1, [pc, #72]	; (4080 <usart_init+0x2fc>)
    4038:	4b12      	ldr	r3, [pc, #72]	; (4084 <usart_init+0x300>)
    403a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    403c:	00a4      	lsls	r4, r4, #2
    403e:	4b12      	ldr	r3, [pc, #72]	; (4088 <usart_init+0x304>)
    4040:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    4042:	2000      	movs	r0, #0
}
    4044:	b011      	add	sp, #68	; 0x44
    4046:	bc3c      	pop	{r2, r3, r4, r5}
    4048:	4690      	mov	r8, r2
    404a:	4699      	mov	r9, r3
    404c:	46a2      	mov	sl, r4
    404e:	46ab      	mov	fp, r5
    4050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4052:	46c0      	nop			; (mov r8, r8)
    4054:	000005d9 	.word	0x000005d9
    4058:	40000400 	.word	0x40000400
    405c:	00004ec1 	.word	0x00004ec1
    4060:	00004e35 	.word	0x00004e35
    4064:	00000401 	.word	0x00000401
    4068:	00004edd 	.word	0x00004edd
    406c:	00000229 	.word	0x00000229
    4070:	00000251 	.word	0x00000251
    4074:	41002000 	.word	0x41002000
    4078:	00000451 	.word	0x00000451
    407c:	00004f9d 	.word	0x00004f9d
    4080:	00004131 	.word	0x00004131
    4084:	000047b5 	.word	0x000047b5
    4088:	200044bc 	.word	0x200044bc

0000408c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    408c:	b510      	push	{r4, lr}
    408e:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4090:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4092:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    4094:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4096:	2c00      	cmp	r4, #0
    4098:	d00d      	beq.n	40b6 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    409a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    409c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    409e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    40a0:	2a00      	cmp	r2, #0
    40a2:	d108      	bne.n	40b6 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    40a4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    40a6:	2a00      	cmp	r2, #0
    40a8:	d1fc      	bne.n	40a4 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    40aa:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    40ac:	2102      	movs	r1, #2
    40ae:	7e1a      	ldrb	r2, [r3, #24]
    40b0:	420a      	tst	r2, r1
    40b2:	d0fc      	beq.n	40ae <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    40b4:	2000      	movs	r0, #0
}
    40b6:	bd10      	pop	{r4, pc}

000040b8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    40b8:	b510      	push	{r4, lr}
    40ba:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    40bc:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    40be:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    40c0:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    40c2:	2a00      	cmp	r2, #0
    40c4:	d033      	beq.n	412e <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    40c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    40c8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    40ca:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    40cc:	2b00      	cmp	r3, #0
    40ce:	d12e      	bne.n	412e <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    40d0:	7e23      	ldrb	r3, [r4, #24]
    40d2:	075a      	lsls	r2, r3, #29
    40d4:	d52b      	bpl.n	412e <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    40d6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    40d8:	2b00      	cmp	r3, #0
    40da:	d1fc      	bne.n	40d6 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    40dc:	8b63      	ldrh	r3, [r4, #26]
    40de:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    40e0:	069a      	lsls	r2, r3, #26
    40e2:	d021      	beq.n	4128 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    40e4:	079a      	lsls	r2, r3, #30
    40e6:	d503      	bpl.n	40f0 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    40e8:	2302      	movs	r3, #2
    40ea:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    40ec:	201a      	movs	r0, #26
    40ee:	e01e      	b.n	412e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    40f0:	075a      	lsls	r2, r3, #29
    40f2:	d503      	bpl.n	40fc <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    40f4:	2304      	movs	r3, #4
    40f6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    40f8:	201e      	movs	r0, #30
    40fa:	e018      	b.n	412e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    40fc:	07da      	lsls	r2, r3, #31
    40fe:	d503      	bpl.n	4108 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4100:	2301      	movs	r3, #1
    4102:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    4104:	2013      	movs	r0, #19
    4106:	e012      	b.n	412e <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4108:	06da      	lsls	r2, r3, #27
    410a:	d505      	bpl.n	4118 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    410c:	8b62      	ldrh	r2, [r4, #26]
    410e:	2310      	movs	r3, #16
    4110:	4313      	orrs	r3, r2
    4112:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    4114:	2042      	movs	r0, #66	; 0x42
    4116:	e00a      	b.n	412e <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4118:	069a      	lsls	r2, r3, #26
    411a:	d505      	bpl.n	4128 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    411c:	8b62      	ldrh	r2, [r4, #26]
    411e:	2320      	movs	r3, #32
    4120:	4313      	orrs	r3, r2
    4122:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    4124:	2041      	movs	r0, #65	; 0x41
    4126:	e002      	b.n	412e <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    4128:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    412a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    412c:	2000      	movs	r0, #0
}
    412e:	bd10      	pop	{r4, pc}

00004130 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4132:	0080      	lsls	r0, r0, #2
    4134:	4b64      	ldr	r3, [pc, #400]	; (42c8 <_usart_interrupt_handler+0x198>)
    4136:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4138:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    413a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    413c:	2b00      	cmp	r3, #0
    413e:	d1fc      	bne.n	413a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4140:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4142:	7da6      	ldrb	r6, [r4, #22]
    4144:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    4146:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    4148:	5ceb      	ldrb	r3, [r5, r3]
    414a:	2230      	movs	r2, #48	; 0x30
    414c:	5caf      	ldrb	r7, [r5, r2]
    414e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4150:	07f1      	lsls	r1, r6, #31
    4152:	d520      	bpl.n	4196 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    4154:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4156:	b29b      	uxth	r3, r3
    4158:	2b00      	cmp	r3, #0
    415a:	d01a      	beq.n	4192 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    415c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    415e:	781a      	ldrb	r2, [r3, #0]
    4160:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4162:	1c59      	adds	r1, r3, #1
    4164:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4166:	7969      	ldrb	r1, [r5, #5]
    4168:	2901      	cmp	r1, #1
    416a:	d104      	bne.n	4176 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    416c:	7859      	ldrb	r1, [r3, #1]
    416e:	0209      	lsls	r1, r1, #8
    4170:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    4172:	3302      	adds	r3, #2
    4174:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4176:	05d3      	lsls	r3, r2, #23
    4178:	0ddb      	lsrs	r3, r3, #23
    417a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    417c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    417e:	3b01      	subs	r3, #1
    4180:	b29b      	uxth	r3, r3
    4182:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4184:	2b00      	cmp	r3, #0
    4186:	d106      	bne.n	4196 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4188:	2301      	movs	r3, #1
    418a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    418c:	2302      	movs	r3, #2
    418e:	75a3      	strb	r3, [r4, #22]
    4190:	e001      	b.n	4196 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4192:	2301      	movs	r3, #1
    4194:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4196:	07b2      	lsls	r2, r6, #30
    4198:	d509      	bpl.n	41ae <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    419a:	2302      	movs	r3, #2
    419c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    419e:	2200      	movs	r2, #0
    41a0:	2333      	movs	r3, #51	; 0x33
    41a2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    41a4:	07fb      	lsls	r3, r7, #31
    41a6:	d502      	bpl.n	41ae <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    41a8:	1c28      	adds	r0, r5, #0
    41aa:	68e9      	ldr	r1, [r5, #12]
    41ac:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    41ae:	0772      	lsls	r2, r6, #29
    41b0:	d56a      	bpl.n	4288 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    41b2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    41b4:	b29b      	uxth	r3, r3
    41b6:	2b00      	cmp	r3, #0
    41b8:	d064      	beq.n	4284 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    41ba:	8b63      	ldrh	r3, [r4, #26]
    41bc:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    41be:	0719      	lsls	r1, r3, #28
    41c0:	d402      	bmi.n	41c8 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    41c2:	223f      	movs	r2, #63	; 0x3f
    41c4:	4013      	ands	r3, r2
    41c6:	e001      	b.n	41cc <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    41c8:	2237      	movs	r2, #55	; 0x37
    41ca:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    41cc:	2b00      	cmp	r3, #0
    41ce:	d037      	beq.n	4240 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    41d0:	079a      	lsls	r2, r3, #30
    41d2:	d507      	bpl.n	41e4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    41d4:	221a      	movs	r2, #26
    41d6:	2332      	movs	r3, #50	; 0x32
    41d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    41da:	8b62      	ldrh	r2, [r4, #26]
    41dc:	2302      	movs	r3, #2
    41de:	4313      	orrs	r3, r2
    41e0:	8363      	strh	r3, [r4, #26]
    41e2:	e027      	b.n	4234 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    41e4:	0759      	lsls	r1, r3, #29
    41e6:	d507      	bpl.n	41f8 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    41e8:	221e      	movs	r2, #30
    41ea:	2332      	movs	r3, #50	; 0x32
    41ec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    41ee:	8b62      	ldrh	r2, [r4, #26]
    41f0:	2304      	movs	r3, #4
    41f2:	4313      	orrs	r3, r2
    41f4:	8363      	strh	r3, [r4, #26]
    41f6:	e01d      	b.n	4234 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    41f8:	07da      	lsls	r2, r3, #31
    41fa:	d507      	bpl.n	420c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    41fc:	2213      	movs	r2, #19
    41fe:	2332      	movs	r3, #50	; 0x32
    4200:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    4202:	8b62      	ldrh	r2, [r4, #26]
    4204:	2301      	movs	r3, #1
    4206:	4313      	orrs	r3, r2
    4208:	8363      	strh	r3, [r4, #26]
    420a:	e013      	b.n	4234 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    420c:	06d9      	lsls	r1, r3, #27
    420e:	d507      	bpl.n	4220 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    4210:	2242      	movs	r2, #66	; 0x42
    4212:	2332      	movs	r3, #50	; 0x32
    4214:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    4216:	8b62      	ldrh	r2, [r4, #26]
    4218:	2310      	movs	r3, #16
    421a:	4313      	orrs	r3, r2
    421c:	8363      	strh	r3, [r4, #26]
    421e:	e009      	b.n	4234 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4220:	2220      	movs	r2, #32
    4222:	421a      	tst	r2, r3
    4224:	d006      	beq.n	4234 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4226:	2241      	movs	r2, #65	; 0x41
    4228:	2332      	movs	r3, #50	; 0x32
    422a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    422c:	8b62      	ldrh	r2, [r4, #26]
    422e:	2320      	movs	r3, #32
    4230:	4313      	orrs	r3, r2
    4232:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4234:	077a      	lsls	r2, r7, #29
    4236:	d527      	bpl.n	4288 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4238:	1c28      	adds	r0, r5, #0
    423a:	696b      	ldr	r3, [r5, #20]
    423c:	4798      	blx	r3
    423e:	e023      	b.n	4288 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4240:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    4242:	05d2      	lsls	r2, r2, #23
    4244:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4246:	b2d3      	uxtb	r3, r2
    4248:	6a69      	ldr	r1, [r5, #36]	; 0x24
    424a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    424c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    424e:	1c59      	adds	r1, r3, #1
    4250:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4252:	7969      	ldrb	r1, [r5, #5]
    4254:	2901      	cmp	r1, #1
    4256:	d104      	bne.n	4262 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4258:	0a12      	lsrs	r2, r2, #8
    425a:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    425c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    425e:	3301      	adds	r3, #1
    4260:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4262:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4264:	3b01      	subs	r3, #1
    4266:	b29b      	uxth	r3, r3
    4268:	85ab      	strh	r3, [r5, #44]	; 0x2c
    426a:	2b00      	cmp	r3, #0
    426c:	d10c      	bne.n	4288 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    426e:	2304      	movs	r3, #4
    4270:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4272:	2200      	movs	r2, #0
    4274:	2332      	movs	r3, #50	; 0x32
    4276:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4278:	07ba      	lsls	r2, r7, #30
    427a:	d505      	bpl.n	4288 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    427c:	1c28      	adds	r0, r5, #0
    427e:	692b      	ldr	r3, [r5, #16]
    4280:	4798      	blx	r3
    4282:	e001      	b.n	4288 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4284:	2304      	movs	r3, #4
    4286:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4288:	06f1      	lsls	r1, r6, #27
    428a:	d507      	bpl.n	429c <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    428c:	2310      	movs	r3, #16
    428e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4290:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4292:	06fa      	lsls	r2, r7, #27
    4294:	d502      	bpl.n	429c <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4296:	1c28      	adds	r0, r5, #0
    4298:	69eb      	ldr	r3, [r5, #28]
    429a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    429c:	06b1      	lsls	r1, r6, #26
    429e:	d507      	bpl.n	42b0 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    42a0:	2320      	movs	r3, #32
    42a2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    42a4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    42a6:	073a      	lsls	r2, r7, #28
    42a8:	d502      	bpl.n	42b0 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    42aa:	1c28      	adds	r0, r5, #0
    42ac:	69ab      	ldr	r3, [r5, #24]
    42ae:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    42b0:	0731      	lsls	r1, r6, #28
    42b2:	d507      	bpl.n	42c4 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    42b4:	2308      	movs	r3, #8
    42b6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    42b8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    42ba:	06ba      	lsls	r2, r7, #26
    42bc:	d502      	bpl.n	42c4 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    42be:	6a2b      	ldr	r3, [r5, #32]
    42c0:	1c28      	adds	r0, r5, #0
    42c2:	4798      	blx	r3
		}
	}
#endif
}
    42c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	200044bc 	.word	0x200044bc

000042cc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    42cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ce:	4647      	mov	r7, r8
    42d0:	b480      	push	{r7}
    42d2:	b088      	sub	sp, #32
    42d4:	1c05      	adds	r5, r0, #0
    42d6:	1c0c      	adds	r4, r1, #0
    42d8:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    42da:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    42dc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    42de:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    42e0:	079a      	lsls	r2, r3, #30
    42e2:	d500      	bpl.n	42e6 <spi_init+0x1a>
    42e4:	e0df      	b.n	44a6 <spi_init+0x1da>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    42e6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    42e8:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    42ea:	07da      	lsls	r2, r3, #31
    42ec:	d500      	bpl.n	42f0 <spi_init+0x24>
    42ee:	e0da      	b.n	44a6 <spi_init+0x1da>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    42f0:	1c08      	adds	r0, r1, #0
    42f2:	4b6f      	ldr	r3, [pc, #444]	; (44b0 <spi_init+0x1e4>)
    42f4:	4798      	blx	r3
    42f6:	4b6f      	ldr	r3, [pc, #444]	; (44b4 <spi_init+0x1e8>)
    42f8:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    42fa:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    42fc:	2701      	movs	r7, #1
    42fe:	4097      	lsls	r7, r2
    4300:	1c3a      	adds	r2, r7, #0
    4302:	430a      	orrs	r2, r1
    4304:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    4306:	a907      	add	r1, sp, #28
    4308:	2724      	movs	r7, #36	; 0x24
    430a:	5df3      	ldrb	r3, [r6, r7]
    430c:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    430e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4310:	b2c0      	uxtb	r0, r0
    4312:	4680      	mov	r8, r0
    4314:	4b68      	ldr	r3, [pc, #416]	; (44b8 <spi_init+0x1ec>)
    4316:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4318:	4640      	mov	r0, r8
    431a:	4b68      	ldr	r3, [pc, #416]	; (44bc <spi_init+0x1f0>)
    431c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    431e:	5df0      	ldrb	r0, [r6, r7]
    4320:	2100      	movs	r1, #0
    4322:	4b67      	ldr	r3, [pc, #412]	; (44c0 <spi_init+0x1f4>)
    4324:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4326:	7833      	ldrb	r3, [r6, #0]
    4328:	2b01      	cmp	r3, #1
    432a:	d103      	bne.n	4334 <spi_init+0x68>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    432c:	6822      	ldr	r2, [r4, #0]
    432e:	230c      	movs	r3, #12
    4330:	4313      	orrs	r3, r2
    4332:	6023      	str	r3, [r4, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    4334:	7833      	ldrb	r3, [r6, #0]
    4336:	2b00      	cmp	r3, #0
    4338:	d000      	beq.n	433c <spi_init+0x70>
    433a:	e0b1      	b.n	44a0 <spi_init+0x1d4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    433c:	6822      	ldr	r2, [r4, #0]
    433e:	2308      	movs	r3, #8
    4340:	4313      	orrs	r3, r2
    4342:	6023      	str	r3, [r4, #0]
    4344:	e0ac      	b.n	44a0 <spi_init+0x1d4>
    4346:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    4348:	60d1      	str	r1, [r2, #12]
    434a:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    434c:	2b1c      	cmp	r3, #28
    434e:	d1fa      	bne.n	4346 <spi_init+0x7a>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    4350:	2300      	movs	r3, #0
    4352:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4354:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4356:	2400      	movs	r4, #0
    4358:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    435a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    435c:	2336      	movs	r3, #54	; 0x36
    435e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4360:	2337      	movs	r3, #55	; 0x37
    4362:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4364:	2338      	movs	r3, #56	; 0x38
    4366:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4368:	2303      	movs	r3, #3
    436a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    436c:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    436e:	6828      	ldr	r0, [r5, #0]
    4370:	4b4f      	ldr	r3, [pc, #316]	; (44b0 <spi_init+0x1e4>)
    4372:	4798      	blx	r3
    4374:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4376:	4953      	ldr	r1, [pc, #332]	; (44c4 <spi_init+0x1f8>)
    4378:	4b53      	ldr	r3, [pc, #332]	; (44c8 <spi_init+0x1fc>)
    437a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    437c:	00bf      	lsls	r7, r7, #2
    437e:	4b53      	ldr	r3, [pc, #332]	; (44cc <spi_init+0x200>)
    4380:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4382:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4384:	ab02      	add	r3, sp, #8
    4386:	2280      	movs	r2, #128	; 0x80
    4388:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    438a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    438c:	2201      	movs	r2, #1
    438e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4390:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    4392:	7833      	ldrb	r3, [r6, #0]
    4394:	2b00      	cmp	r3, #0
    4396:	d102      	bne.n	439e <spi_init+0xd2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4398:	2200      	movs	r2, #0
    439a:	ab02      	add	r3, sp, #8
    439c:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    439e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    43a0:	9303      	str	r3, [sp, #12]
    43a2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    43a4:	9004      	str	r0, [sp, #16]
    43a6:	6b32      	ldr	r2, [r6, #48]	; 0x30
    43a8:	9205      	str	r2, [sp, #20]
    43aa:	6b73      	ldr	r3, [r6, #52]	; 0x34
    43ac:	9306      	str	r3, [sp, #24]
    43ae:	2400      	movs	r4, #0
    43b0:	b2e1      	uxtb	r1, r4
    43b2:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    43b4:	aa03      	add	r2, sp, #12
    43b6:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    43b8:	2800      	cmp	r0, #0
    43ba:	d102      	bne.n	43c2 <spi_init+0xf6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    43bc:	1c38      	adds	r0, r7, #0
    43be:	4a44      	ldr	r2, [pc, #272]	; (44d0 <spi_init+0x204>)
    43c0:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    43c2:	1c43      	adds	r3, r0, #1
    43c4:	d006      	beq.n	43d4 <spi_init+0x108>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    43c6:	466a      	mov	r2, sp
    43c8:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    43ca:	0c00      	lsrs	r0, r0, #16
    43cc:	b2c0      	uxtb	r0, r0
    43ce:	a902      	add	r1, sp, #8
    43d0:	4b40      	ldr	r3, [pc, #256]	; (44d4 <spi_init+0x208>)
    43d2:	4798      	blx	r3
    43d4:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    43d6:	2c04      	cmp	r4, #4
    43d8:	d1ea      	bne.n	43b0 <spi_init+0xe4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    43da:	7833      	ldrb	r3, [r6, #0]
    43dc:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    43de:	7c33      	ldrb	r3, [r6, #16]
    43e0:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    43e2:	7cb3      	ldrb	r3, [r6, #18]
    43e4:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    43e6:	7d33      	ldrb	r3, [r6, #20]
    43e8:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    43ea:	2200      	movs	r2, #0
    43ec:	466b      	mov	r3, sp
    43ee:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    43f0:	7833      	ldrb	r3, [r6, #0]
    43f2:	2b01      	cmp	r3, #1
    43f4:	d114      	bne.n	4420 <spi_init+0x154>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    43f6:	6828      	ldr	r0, [r5, #0]
    43f8:	4b2d      	ldr	r3, [pc, #180]	; (44b0 <spi_init+0x1e4>)
    43fa:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    43fc:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    43fe:	b2c0      	uxtb	r0, r0
    4400:	4b35      	ldr	r3, [pc, #212]	; (44d8 <spi_init+0x20c>)
    4402:	4798      	blx	r3
    4404:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4406:	69b0      	ldr	r0, [r6, #24]
    4408:	466a      	mov	r2, sp
    440a:	3206      	adds	r2, #6
    440c:	4b33      	ldr	r3, [pc, #204]	; (44dc <spi_init+0x210>)
    440e:	4798      	blx	r3
    4410:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4412:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4414:	2b00      	cmp	r3, #0
    4416:	d146      	bne.n	44a6 <spi_init+0x1da>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    4418:	466b      	mov	r3, sp
    441a:	3306      	adds	r3, #6
    441c:	781b      	ldrb	r3, [r3, #0]
    441e:	733b      	strb	r3, [r7, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    4420:	7833      	ldrb	r3, [r6, #0]
    4422:	2b00      	cmp	r3, #0
    4424:	d10f      	bne.n	4446 <spi_init+0x17a>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    4426:	69b1      	ldr	r1, [r6, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    4428:	8bb3      	ldrh	r3, [r6, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    442a:	6a78      	ldr	r0, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    442c:	7ff4      	ldrb	r4, [r6, #31]
    442e:	0424      	lsls	r4, r4, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4430:	7fb2      	ldrb	r2, [r6, #30]
    4432:	4322      	orrs	r2, r4

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    4434:	4302      	orrs	r2, r0
    4436:	627a      	str	r2, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    4438:	2220      	movs	r2, #32
    443a:	5cb2      	ldrb	r2, [r6, r2]
    443c:	2a00      	cmp	r2, #0
    443e:	d004      	beq.n	444a <spi_init+0x17e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    4440:	2240      	movs	r2, #64	; 0x40
    4442:	4313      	orrs	r3, r2
    4444:	e001      	b.n	444a <spi_init+0x17e>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4446:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4448:	2100      	movs	r1, #0
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    444a:	68b2      	ldr	r2, [r6, #8]
    444c:	6870      	ldr	r0, [r6, #4]
    444e:	4302      	orrs	r2, r0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4450:	68f0      	ldr	r0, [r6, #12]
    4452:	4302      	orrs	r2, r0

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4454:	430a      	orrs	r2, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4456:	7c31      	ldrb	r1, [r6, #16]
    4458:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    445a:	7c71      	ldrb	r1, [r6, #17]
    445c:	2900      	cmp	r1, #0
    445e:	d103      	bne.n	4468 <spi_init+0x19c>
    4460:	491f      	ldr	r1, [pc, #124]	; (44e0 <spi_init+0x214>)
    4462:	7889      	ldrb	r1, [r1, #2]
    4464:	0788      	lsls	r0, r1, #30
    4466:	d501      	bpl.n	446c <spi_init+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4468:	2180      	movs	r1, #128	; 0x80
    446a:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    446c:	7cb1      	ldrb	r1, [r6, #18]
    446e:	2900      	cmp	r1, #0
    4470:	d002      	beq.n	4478 <spi_init+0x1ac>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4472:	2180      	movs	r1, #128	; 0x80
    4474:	0289      	lsls	r1, r1, #10
    4476:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4478:	7cf1      	ldrb	r1, [r6, #19]
    447a:	2900      	cmp	r1, #0
    447c:	d002      	beq.n	4484 <spi_init+0x1b8>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    447e:	2180      	movs	r1, #128	; 0x80
    4480:	0089      	lsls	r1, r1, #2
    4482:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4484:	7d31      	ldrb	r1, [r6, #20]
    4486:	2900      	cmp	r1, #0
    4488:	d002      	beq.n	4490 <spi_init+0x1c4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    448a:	2180      	movs	r1, #128	; 0x80
    448c:	0189      	lsls	r1, r1, #6
    448e:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4490:	6839      	ldr	r1, [r7, #0]
    4492:	430a      	orrs	r2, r1
    4494:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    4496:	687a      	ldr	r2, [r7, #4]
    4498:	4313      	orrs	r3, r2
    449a:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    449c:	2000      	movs	r0, #0
    449e:	e002      	b.n	44a6 <spi_init+0x1da>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    44a0:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    44a2:	2100      	movs	r1, #0
    44a4:	e74f      	b.n	4346 <spi_init+0x7a>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    44a6:	b008      	add	sp, #32
    44a8:	bc04      	pop	{r2}
    44aa:	4690      	mov	r8, r2
    44ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	000005d9 	.word	0x000005d9
    44b4:	40000400 	.word	0x40000400
    44b8:	00004ec1 	.word	0x00004ec1
    44bc:	00004e35 	.word	0x00004e35
    44c0:	00000401 	.word	0x00000401
    44c4:	000045d1 	.word	0x000045d1
    44c8:	000047b5 	.word	0x000047b5
    44cc:	200044bc 	.word	0x200044bc
    44d0:	00000451 	.word	0x00000451
    44d4:	00004f9d 	.word	0x00004f9d
    44d8:	00004edd 	.word	0x00004edd
    44dc:	00000229 	.word	0x00000229
    44e0:	41002000 	.word	0x41002000

000044e4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    44e4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    44e6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    44e8:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    44ea:	2c01      	cmp	r4, #1
    44ec:	d16c      	bne.n	45c8 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    44ee:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    44f0:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    44f2:	2c00      	cmp	r4, #0
    44f4:	d168      	bne.n	45c8 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
    44f6:	2a00      	cmp	r2, #0
    44f8:	d057      	beq.n	45aa <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    44fa:	784b      	ldrb	r3, [r1, #1]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d044      	beq.n	458a <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4500:	6802      	ldr	r2, [r0, #0]
    4502:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4504:	07dc      	lsls	r4, r3, #31
    4506:	d40f      	bmi.n	4528 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4508:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    450a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    450c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    450e:	2900      	cmp	r1, #0
    4510:	d103      	bne.n	451a <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
    4512:	095a      	lsrs	r2, r3, #5
    4514:	01d2      	lsls	r2, r2, #7
    4516:	492d      	ldr	r1, [pc, #180]	; (45cc <spi_select_slave+0xe8>)
    4518:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    451a:	211f      	movs	r1, #31
    451c:	400b      	ands	r3, r1
    451e:	2101      	movs	r1, #1
    4520:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4522:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    4524:	2305      	movs	r3, #5
    4526:	e04f      	b.n	45c8 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4528:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    452a:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    452c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    452e:	2c00      	cmp	r4, #0
    4530:	d103      	bne.n	453a <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
    4532:	095a      	lsrs	r2, r3, #5
    4534:	01d2      	lsls	r2, r2, #7
    4536:	4c25      	ldr	r4, [pc, #148]	; (45cc <spi_select_slave+0xe8>)
    4538:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    453a:	241f      	movs	r4, #31
    453c:	4023      	ands	r3, r4
    453e:	2401      	movs	r4, #1
    4540:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4542:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    4544:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4546:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4548:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    454a:	07d4      	lsls	r4, r2, #31
    454c:	d500      	bpl.n	4550 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    454e:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    4550:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    4552:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    4554:	2a00      	cmp	r2, #0
    4556:	d137      	bne.n	45c8 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4558:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    455a:	2104      	movs	r1, #4
    455c:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    455e:	420b      	tst	r3, r1
    4560:	d0fc      	beq.n	455c <spi_select_slave+0x78>
    4562:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    4564:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4566:	074c      	lsls	r4, r1, #29
    4568:	d52e      	bpl.n	45c8 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    456a:	8b53      	ldrh	r3, [r2, #26]
    456c:	0759      	lsls	r1, r3, #29
    456e:	d503      	bpl.n	4578 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4570:	8b51      	ldrh	r1, [r2, #26]
    4572:	2304      	movs	r3, #4
    4574:	430b      	orrs	r3, r1
    4576:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4578:	7983      	ldrb	r3, [r0, #6]
    457a:	2b01      	cmp	r3, #1
    457c:	d102      	bne.n	4584 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    457e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4580:	2300      	movs	r3, #0
    4582:	e021      	b.n	45c8 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4584:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4586:	2300      	movs	r3, #0
    4588:	e01e      	b.n	45c8 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    458a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    458c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    458e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4590:	2900      	cmp	r1, #0
    4592:	d103      	bne.n	459c <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
    4594:	095a      	lsrs	r2, r3, #5
    4596:	01d2      	lsls	r2, r2, #7
    4598:	4c0c      	ldr	r4, [pc, #48]	; (45cc <spi_select_slave+0xe8>)
    459a:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    459c:	211f      	movs	r1, #31
    459e:	400b      	ands	r3, r1
    45a0:	2101      	movs	r1, #1
    45a2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    45a4:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    45a6:	2300      	movs	r3, #0
    45a8:	e00e      	b.n	45c8 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    45aa:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    45ac:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    45ae:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    45b0:	2900      	cmp	r1, #0
    45b2:	d103      	bne.n	45bc <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
    45b4:	095a      	lsrs	r2, r3, #5
    45b6:	01d2      	lsls	r2, r2, #7
    45b8:	4904      	ldr	r1, [pc, #16]	; (45cc <spi_select_slave+0xe8>)
    45ba:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    45bc:	211f      	movs	r1, #31
    45be:	400b      	ands	r3, r1
    45c0:	2101      	movs	r1, #1
    45c2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    45c4:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    45c6:	2300      	movs	r3, #0
}
    45c8:	1c18      	adds	r0, r3, #0
    45ca:	bd10      	pop	{r4, pc}
    45cc:	41004400 	.word	0x41004400

000045d0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    45d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    45d2:	0080      	lsls	r0, r0, #2
    45d4:	4b74      	ldr	r3, [pc, #464]	; (47a8 <_spi_interrupt_handler+0x1d8>)
    45d6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    45d8:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    45da:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    45dc:	5ce3      	ldrb	r3, [r4, r3]
    45de:	2237      	movs	r2, #55	; 0x37
    45e0:	5ca7      	ldrb	r7, [r4, r2]
    45e2:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    45e4:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    45e6:	7dae      	ldrb	r6, [r5, #22]
    45e8:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    45ea:	07f1      	lsls	r1, r6, #31
    45ec:	d549      	bpl.n	4682 <_spi_interrupt_handler+0xb2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    45ee:	7963      	ldrb	r3, [r4, #5]
    45f0:	2b01      	cmp	r3, #1
    45f2:	d116      	bne.n	4622 <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
    45f4:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    45f6:	2b00      	cmp	r3, #0
    45f8:	d10f      	bne.n	461a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    45fa:	4b6c      	ldr	r3, [pc, #432]	; (47ac <_spi_interrupt_handler+0x1dc>)
    45fc:	881b      	ldrh	r3, [r3, #0]
    45fe:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4600:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4602:	3b01      	subs	r3, #1
    4604:	b29b      	uxth	r3, r3
    4606:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    4608:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    460a:	b29b      	uxth	r3, r3
    460c:	2b00      	cmp	r3, #0
    460e:	d101      	bne.n	4614 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4610:	2301      	movs	r3, #1
    4612:	752b      	strb	r3, [r5, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4614:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    4616:	2b01      	cmp	r3, #1
    4618:	d103      	bne.n	4622 <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    461a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    461c:	2b00      	cmp	r3, #0
    461e:	d105      	bne.n	462c <_spi_interrupt_handler+0x5c>
    4620:	e02f      	b.n	4682 <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    4622:	2b00      	cmp	r3, #0
    4624:	d12d      	bne.n	4682 <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
    4626:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    4628:	2b00      	cmp	r3, #0
    462a:	d02a      	beq.n	4682 <_spi_interrupt_handler+0xb2>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    462c:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    462e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4630:	7819      	ldrb	r1, [r3, #0]
    4632:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4634:	1c58      	adds	r0, r3, #1
    4636:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4638:	79a0      	ldrb	r0, [r4, #6]
    463a:	2801      	cmp	r0, #1
    463c:	d104      	bne.n	4648 <_spi_interrupt_handler+0x78>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    463e:	7858      	ldrb	r0, [r3, #1]
    4640:	0200      	lsls	r0, r0, #8
    4642:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4644:	3302      	adds	r3, #2
    4646:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4648:	05cb      	lsls	r3, r1, #23
    464a:	0ddb      	lsrs	r3, r3, #23
    464c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    464e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4650:	3b01      	subs	r3, #1
    4652:	b29b      	uxth	r3, r3
    4654:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    4656:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4658:	b29b      	uxth	r3, r3
    465a:	2b00      	cmp	r3, #0
    465c:	d111      	bne.n	4682 <_spi_interrupt_handler+0xb2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    465e:	2301      	movs	r3, #1
    4660:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4662:	7a63      	ldrb	r3, [r4, #9]
    4664:	2b01      	cmp	r3, #1
    4666:	d10c      	bne.n	4682 <_spi_interrupt_handler+0xb2>
    4668:	79e3      	ldrb	r3, [r4, #7]
    466a:	2b00      	cmp	r3, #0
    466c:	d109      	bne.n	4682 <_spi_interrupt_handler+0xb2>
						!(module->receiver_enabled)) {
					/* Buffer sent with receiver disabled */
					module->dir = SPI_DIRECTION_IDLE;
    466e:	2303      	movs	r3, #3
    4670:	7263      	strb	r3, [r4, #9]
					module->status = STATUS_OK;
    4672:	2200      	movs	r2, #0
    4674:	2338      	movs	r3, #56	; 0x38
    4676:	54e2      	strb	r2, [r4, r3]
					/* Run callback if registered and enabled */
					if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4678:	07fa      	lsls	r2, r7, #31
    467a:	d502      	bpl.n	4682 <_spi_interrupt_handler+0xb2>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
									(module);
    467c:	1c20      	adds	r0, r4, #0
    467e:	68e3      	ldr	r3, [r4, #12]
    4680:	4798      	blx	r3
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4682:	0771      	lsls	r1, r6, #29
    4684:	d561      	bpl.n	474a <_spi_interrupt_handler+0x17a>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4686:	8b6b      	ldrh	r3, [r5, #26]
    4688:	075a      	lsls	r2, r3, #29
    468a:	d514      	bpl.n	46b6 <_spi_interrupt_handler+0xe6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    468c:	7a63      	ldrb	r3, [r4, #9]
    468e:	2b01      	cmp	r3, #1
    4690:	d00b      	beq.n	46aa <_spi_interrupt_handler+0xda>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4692:	221e      	movs	r2, #30
    4694:	2338      	movs	r3, #56	; 0x38
    4696:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4698:	2303      	movs	r3, #3
    469a:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    469c:	2305      	movs	r3, #5
    469e:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    46a0:	073b      	lsls	r3, r7, #28
    46a2:	d502      	bpl.n	46aa <_spi_interrupt_handler+0xda>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    46a4:	1c20      	adds	r0, r4, #0
    46a6:	69a1      	ldr	r1, [r4, #24]
    46a8:	4788      	blx	r1
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    46aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    46ac:	8b6a      	ldrh	r2, [r5, #26]
    46ae:	2304      	movs	r3, #4
    46b0:	4313      	orrs	r3, r2
    46b2:	836b      	strh	r3, [r5, #26]
    46b4:	e049      	b.n	474a <_spi_interrupt_handler+0x17a>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    46b6:	7a63      	ldrb	r3, [r4, #9]
    46b8:	2b01      	cmp	r3, #1
    46ba:	d116      	bne.n	46ea <_spi_interrupt_handler+0x11a>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    46bc:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    46be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    46c0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    46c2:	3b01      	subs	r3, #1
    46c4:	b29b      	uxth	r3, r3
    46c6:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    46c8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    46ca:	b29b      	uxth	r3, r3
    46cc:	2b00      	cmp	r3, #0
    46ce:	d13c      	bne.n	474a <_spi_interrupt_handler+0x17a>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    46d0:	2304      	movs	r3, #4
    46d2:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
    46d4:	2200      	movs	r2, #0
    46d6:	2338      	movs	r3, #56	; 0x38
    46d8:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    46da:	2303      	movs	r3, #3
    46dc:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    46de:	07fa      	lsls	r2, r7, #31
    46e0:	d533      	bpl.n	474a <_spi_interrupt_handler+0x17a>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    46e2:	1c20      	adds	r0, r4, #0
    46e4:	68e3      	ldr	r3, [r4, #12]
    46e6:	4798      	blx	r3
    46e8:	e02f      	b.n	474a <_spi_interrupt_handler+0x17a>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    46ea:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    46ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    46ee:	05d2      	lsls	r2, r2, #23
    46f0:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    46f2:	b2d3      	uxtb	r3, r2
    46f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    46f6:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    46f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    46fa:	1c59      	adds	r1, r3, #1
    46fc:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46fe:	79a1      	ldrb	r1, [r4, #6]
    4700:	2901      	cmp	r1, #1
    4702:	d104      	bne.n	470e <_spi_interrupt_handler+0x13e>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4704:	0a12      	lsrs	r2, r2, #8
    4706:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    470a:	3301      	adds	r3, #1
    470c:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    470e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4710:	3b01      	subs	r3, #1
    4712:	b29b      	uxth	r3, r3
    4714:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4716:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4718:	b29b      	uxth	r3, r3
    471a:	2b00      	cmp	r3, #0
    471c:	d115      	bne.n	474a <_spi_interrupt_handler+0x17a>
					module->status = STATUS_OK;
    471e:	2200      	movs	r2, #0
    4720:	2338      	movs	r3, #56	; 0x38
    4722:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4724:	2304      	movs	r3, #4
    4726:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4728:	7a63      	ldrb	r3, [r4, #9]
    472a:	2b02      	cmp	r3, #2
    472c:	d105      	bne.n	473a <_spi_interrupt_handler+0x16a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    472e:	077a      	lsls	r2, r7, #29
    4730:	d50b      	bpl.n	474a <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4732:	1c20      	adds	r0, r4, #0
    4734:	6963      	ldr	r3, [r4, #20]
    4736:	4798      	blx	r3
    4738:	e007      	b.n	474a <_spi_interrupt_handler+0x17a>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    473a:	7a63      	ldrb	r3, [r4, #9]
    473c:	2b00      	cmp	r3, #0
    473e:	d104      	bne.n	474a <_spi_interrupt_handler+0x17a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4740:	07b9      	lsls	r1, r7, #30
    4742:	d502      	bpl.n	474a <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4744:	1c20      	adds	r0, r4, #0
    4746:	6922      	ldr	r2, [r4, #16]
    4748:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    474a:	07b3      	lsls	r3, r6, #30
    474c:	d513      	bpl.n	4776 <_spi_interrupt_handler+0x1a6>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    474e:	7963      	ldrb	r3, [r4, #5]
    4750:	2b00      	cmp	r3, #0
    4752:	d110      	bne.n	4776 <_spi_interrupt_handler+0x1a6>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    4754:	2307      	movs	r3, #7
    4756:	752b      	strb	r3, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4758:	2302      	movs	r3, #2
    475a:	762b      	strb	r3, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    475c:	2303      	movs	r3, #3
    475e:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    4760:	2300      	movs	r3, #0
    4762:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    4764:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    4766:	2338      	movs	r3, #56	; 0x38
    4768:	2200      	movs	r2, #0
    476a:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    476c:	06f9      	lsls	r1, r7, #27
    476e:	d502      	bpl.n	4776 <_spi_interrupt_handler+0x1a6>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
					(module);
    4770:	1c20      	adds	r0, r4, #0
    4772:	69e2      	ldr	r2, [r4, #28]
    4774:	4790      	blx	r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    4776:	0733      	lsls	r3, r6, #28
    4778:	d50a      	bpl.n	4790 <_spi_interrupt_handler+0x1c0>
			if (module->mode == SPI_MODE_SLAVE) {
    477a:	7963      	ldrb	r3, [r4, #5]
    477c:	2b00      	cmp	r3, #0
    477e:	d107      	bne.n	4790 <_spi_interrupt_handler+0x1c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    4780:	2308      	movs	r3, #8
    4782:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    4784:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    4786:	06b9      	lsls	r1, r7, #26
    4788:	d502      	bpl.n	4790 <_spi_interrupt_handler+0x1c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    478a:	1c20      	adds	r0, r4, #0
    478c:	6a22      	ldr	r2, [r4, #32]
    478e:	4790      	blx	r2
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4790:	09f6      	lsrs	r6, r6, #7
    4792:	d007      	beq.n	47a4 <_spi_interrupt_handler+0x1d4>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4794:	2380      	movs	r3, #128	; 0x80
    4796:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4798:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    479a:	067b      	lsls	r3, r7, #25
    479c:	d502      	bpl.n	47a4 <_spi_interrupt_handler+0x1d4>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    479e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    47a0:	1c20      	adds	r0, r4, #0
    47a2:	4798      	blx	r3
		}
	}
#  endif
}
    47a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47a6:	46c0      	nop			; (mov r8, r8)
    47a8:	200044bc 	.word	0x200044bc
    47ac:	200044b8 	.word	0x200044b8

000047b0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    47b0:	4770      	bx	lr
    47b2:	46c0      	nop			; (mov r8, r8)

000047b4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    47b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    47b6:	4b0a      	ldr	r3, [pc, #40]	; (47e0 <_sercom_set_handler+0x2c>)
    47b8:	781b      	ldrb	r3, [r3, #0]
    47ba:	2b00      	cmp	r3, #0
    47bc:	d10c      	bne.n	47d8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    47be:	4f09      	ldr	r7, [pc, #36]	; (47e4 <_sercom_set_handler+0x30>)
    47c0:	4e09      	ldr	r6, [pc, #36]	; (47e8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    47c2:	4d0a      	ldr	r5, [pc, #40]	; (47ec <_sercom_set_handler+0x38>)
    47c4:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    47c6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    47c8:	195a      	adds	r2, r3, r5
    47ca:	6014      	str	r4, [r2, #0]
    47cc:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    47ce:	2b18      	cmp	r3, #24
    47d0:	d1f9      	bne.n	47c6 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    47d2:	2201      	movs	r2, #1
    47d4:	4b02      	ldr	r3, [pc, #8]	; (47e0 <_sercom_set_handler+0x2c>)
    47d6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    47d8:	0080      	lsls	r0, r0, #2
    47da:	4b02      	ldr	r3, [pc, #8]	; (47e4 <_sercom_set_handler+0x30>)
    47dc:	50c1      	str	r1, [r0, r3]
}
    47de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47e0:	20004280 	.word	0x20004280
    47e4:	20004284 	.word	0x20004284
    47e8:	000047b1 	.word	0x000047b1
    47ec:	200044bc 	.word	0x200044bc

000047f0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    47f0:	b510      	push	{r4, lr}
    47f2:	b082      	sub	sp, #8
    47f4:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    47f6:	4668      	mov	r0, sp
    47f8:	4905      	ldr	r1, [pc, #20]	; (4810 <_sercom_get_interrupt_vector+0x20>)
    47fa:	2206      	movs	r2, #6
    47fc:	4b05      	ldr	r3, [pc, #20]	; (4814 <_sercom_get_interrupt_vector+0x24>)
    47fe:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4800:	1c20      	adds	r0, r4, #0
    4802:	4b05      	ldr	r3, [pc, #20]	; (4818 <_sercom_get_interrupt_vector+0x28>)
    4804:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4806:	466b      	mov	r3, sp
    4808:	5618      	ldrsb	r0, [r3, r0]
}
    480a:	b002      	add	sp, #8
    480c:	bd10      	pop	{r4, pc}
    480e:	46c0      	nop			; (mov r8, r8)
    4810:	00006880 	.word	0x00006880
    4814:	00005879 	.word	0x00005879
    4818:	000005d9 	.word	0x000005d9

0000481c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    481c:	b508      	push	{r3, lr}
    481e:	4b02      	ldr	r3, [pc, #8]	; (4828 <SERCOM0_Handler+0xc>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	2000      	movs	r0, #0
    4824:	4798      	blx	r3
    4826:	bd08      	pop	{r3, pc}
    4828:	20004284 	.word	0x20004284

0000482c <SERCOM1_Handler>:
    482c:	b508      	push	{r3, lr}
    482e:	4b02      	ldr	r3, [pc, #8]	; (4838 <SERCOM1_Handler+0xc>)
    4830:	685b      	ldr	r3, [r3, #4]
    4832:	2001      	movs	r0, #1
    4834:	4798      	blx	r3
    4836:	bd08      	pop	{r3, pc}
    4838:	20004284 	.word	0x20004284

0000483c <SERCOM2_Handler>:
    483c:	b508      	push	{r3, lr}
    483e:	4b02      	ldr	r3, [pc, #8]	; (4848 <SERCOM2_Handler+0xc>)
    4840:	689b      	ldr	r3, [r3, #8]
    4842:	2002      	movs	r0, #2
    4844:	4798      	blx	r3
    4846:	bd08      	pop	{r3, pc}
    4848:	20004284 	.word	0x20004284

0000484c <SERCOM3_Handler>:
    484c:	b508      	push	{r3, lr}
    484e:	4b02      	ldr	r3, [pc, #8]	; (4858 <SERCOM3_Handler+0xc>)
    4850:	68db      	ldr	r3, [r3, #12]
    4852:	2003      	movs	r0, #3
    4854:	4798      	blx	r3
    4856:	bd08      	pop	{r3, pc}
    4858:	20004284 	.word	0x20004284

0000485c <SERCOM4_Handler>:
    485c:	b508      	push	{r3, lr}
    485e:	4b02      	ldr	r3, [pc, #8]	; (4868 <SERCOM4_Handler+0xc>)
    4860:	691b      	ldr	r3, [r3, #16]
    4862:	2004      	movs	r0, #4
    4864:	4798      	blx	r3
    4866:	bd08      	pop	{r3, pc}
    4868:	20004284 	.word	0x20004284

0000486c <SERCOM5_Handler>:
    486c:	b508      	push	{r3, lr}
    486e:	4b02      	ldr	r3, [pc, #8]	; (4878 <SERCOM5_Handler+0xc>)
    4870:	695b      	ldr	r3, [r3, #20]
    4872:	2005      	movs	r0, #5
    4874:	4798      	blx	r3
    4876:	bd08      	pop	{r3, pc}
    4878:	20004284 	.word	0x20004284

0000487c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    487c:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    487e:	2a00      	cmp	r2, #0
    4880:	d10f      	bne.n	48a2 <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    4882:	008b      	lsls	r3, r1, #2
    4884:	4a08      	ldr	r2, [pc, #32]	; (48a8 <extint_register_callback+0x2c>)
    4886:	589a      	ldr	r2, [r3, r2]
    4888:	2a00      	cmp	r2, #0
    488a:	d104      	bne.n	4896 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
    488c:	1c19      	adds	r1, r3, #0
    488e:	4b06      	ldr	r3, [pc, #24]	; (48a8 <extint_register_callback+0x2c>)
    4890:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    4892:	2300      	movs	r3, #0
    4894:	e005      	b.n	48a2 <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    4896:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    4898:	1a12      	subs	r2, r2, r0
    489a:	1e50      	subs	r0, r2, #1
    489c:	4182      	sbcs	r2, r0
    489e:	4252      	negs	r2, r2
    48a0:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    48a2:	1c18      	adds	r0, r3, #0
    48a4:	4770      	bx	lr
    48a6:	46c0      	nop			; (mov r8, r8)
    48a8:	20004330 	.word	0x20004330

000048ac <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    48ac:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    48ae:	2900      	cmp	r1, #0
    48b0:	d107      	bne.n	48c2 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    48b2:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    48b4:	281f      	cmp	r0, #31
    48b6:	d800      	bhi.n	48ba <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    48b8:	4b03      	ldr	r3, [pc, #12]	; (48c8 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    48ba:	2201      	movs	r2, #1
    48bc:	4082      	lsls	r2, r0
    48be:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    48c0:	2300      	movs	r3, #0
}
    48c2:	1c18      	adds	r0, r3, #0
    48c4:	4770      	bx	lr
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	40001800 	.word	0x40001800

000048cc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    48cc:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    48ce:	2900      	cmp	r1, #0
    48d0:	d107      	bne.n	48e2 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    48d2:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    48d4:	281f      	cmp	r0, #31
    48d6:	d800      	bhi.n	48da <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    48d8:	4b03      	ldr	r3, [pc, #12]	; (48e8 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    48da:	2201      	movs	r2, #1
    48dc:	4082      	lsls	r2, r0
    48de:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    48e0:	2300      	movs	r3, #0
}
    48e2:	1c18      	adds	r0, r3, #0
    48e4:	4770      	bx	lr
    48e6:	46c0      	nop			; (mov r8, r8)
    48e8:	40001800 	.word	0x40001800

000048ec <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    48ec:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    48ee:	2200      	movs	r2, #0
    48f0:	4b16      	ldr	r3, [pc, #88]	; (494c <EIC_Handler+0x60>)
    48f2:	701a      	strb	r2, [r3, #0]
    48f4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    48f6:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    48f8:	4d15      	ldr	r5, [pc, #84]	; (4950 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    48fa:	4c14      	ldr	r4, [pc, #80]	; (494c <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    48fc:	2b1f      	cmp	r3, #31
    48fe:	d910      	bls.n	4922 <EIC_Handler+0x36>
    4900:	e019      	b.n	4936 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    4902:	4914      	ldr	r1, [pc, #80]	; (4954 <EIC_Handler+0x68>)
    4904:	e000      	b.n	4908 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
    4906:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4908:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    490a:	009b      	lsls	r3, r3, #2
    490c:	595b      	ldr	r3, [r3, r5]
    490e:	2b00      	cmp	r3, #0
    4910:	d000      	beq.n	4914 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4912:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4914:	7823      	ldrb	r3, [r4, #0]
    4916:	3301      	adds	r3, #1
    4918:	b2db      	uxtb	r3, r3
    491a:	7023      	strb	r3, [r4, #0]
    491c:	2b0f      	cmp	r3, #15
    491e:	d814      	bhi.n	494a <EIC_Handler+0x5e>
    4920:	e7ec      	b.n	48fc <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4922:	1c32      	adds	r2, r6, #0
    4924:	401a      	ands	r2, r3
    4926:	2101      	movs	r1, #1
    4928:	4091      	lsls	r1, r2
    492a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    492c:	4909      	ldr	r1, [pc, #36]	; (4954 <EIC_Handler+0x68>)
    492e:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4930:	4211      	tst	r1, r2
    4932:	d1e6      	bne.n	4902 <EIC_Handler+0x16>
    4934:	e7ee      	b.n	4914 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4936:	1c32      	adds	r2, r6, #0
    4938:	401a      	ands	r2, r3
    493a:	2101      	movs	r1, #1
    493c:	4091      	lsls	r1, r2
    493e:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    4940:	2100      	movs	r1, #0
    4942:	6909      	ldr	r1, [r1, #16]
    4944:	4211      	tst	r1, r2
    4946:	d1de      	bne.n	4906 <EIC_Handler+0x1a>
    4948:	e7e4      	b.n	4914 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    494a:	bd70      	pop	{r4, r5, r6, pc}
    494c:	200044d4 	.word	0x200044d4
    4950:	20004330 	.word	0x20004330
    4954:	40001800 	.word	0x40001800

00004958 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4958:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    495a:	2000      	movs	r0, #0
    495c:	4b08      	ldr	r3, [pc, #32]	; (4980 <delay_init+0x28>)
    495e:	4798      	blx	r3
	cycles_per_ms /= 1000;
    4960:	4c08      	ldr	r4, [pc, #32]	; (4984 <delay_init+0x2c>)
    4962:	21fa      	movs	r1, #250	; 0xfa
    4964:	0089      	lsls	r1, r1, #2
    4966:	47a0      	blx	r4
    4968:	4b07      	ldr	r3, [pc, #28]	; (4988 <delay_init+0x30>)
    496a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    496c:	21fa      	movs	r1, #250	; 0xfa
    496e:	0089      	lsls	r1, r1, #2
    4970:	47a0      	blx	r4
    4972:	4b06      	ldr	r3, [pc, #24]	; (498c <delay_init+0x34>)
    4974:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4976:	2205      	movs	r2, #5
    4978:	4b05      	ldr	r3, [pc, #20]	; (4990 <delay_init+0x38>)
    497a:	601a      	str	r2, [r3, #0]
}
    497c:	bd10      	pop	{r4, pc}
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	00004da9 	.word	0x00004da9
    4984:	00005689 	.word	0x00005689
    4988:	20000010 	.word	0x20000010
    498c:	2000000c 	.word	0x2000000c
    4990:	e000e010 	.word	0xe000e010

00004994 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    4994:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    4996:	4b08      	ldr	r3, [pc, #32]	; (49b8 <delay_cycles_us+0x24>)
    4998:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    499a:	4a08      	ldr	r2, [pc, #32]	; (49bc <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    499c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    499e:	2180      	movs	r1, #128	; 0x80
    49a0:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    49a2:	e006      	b.n	49b2 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    49a4:	2c00      	cmp	r4, #0
    49a6:	d004      	beq.n	49b2 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    49a8:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    49aa:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    49ac:	6813      	ldr	r3, [r2, #0]
    49ae:	420b      	tst	r3, r1
    49b0:	d0fc      	beq.n	49ac <delay_cycles_us+0x18>
    49b2:	3801      	subs	r0, #1
    49b4:	d2f6      	bcs.n	49a4 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    49b6:	bd30      	pop	{r4, r5, pc}
    49b8:	2000000c 	.word	0x2000000c
    49bc:	e000e010 	.word	0xe000e010

000049c0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    49c0:	4b0c      	ldr	r3, [pc, #48]	; (49f4 <cpu_irq_enter_critical+0x34>)
    49c2:	681b      	ldr	r3, [r3, #0]
    49c4:	2b00      	cmp	r3, #0
    49c6:	d110      	bne.n	49ea <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    49c8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    49cc:	2b00      	cmp	r3, #0
    49ce:	d109      	bne.n	49e4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    49d0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    49d2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    49d6:	2200      	movs	r2, #0
    49d8:	4b07      	ldr	r3, [pc, #28]	; (49f8 <cpu_irq_enter_critical+0x38>)
    49da:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    49dc:	2201      	movs	r2, #1
    49de:	4b07      	ldr	r3, [pc, #28]	; (49fc <cpu_irq_enter_critical+0x3c>)
    49e0:	701a      	strb	r2, [r3, #0]
    49e2:	e002      	b.n	49ea <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    49e4:	2200      	movs	r2, #0
    49e6:	4b05      	ldr	r3, [pc, #20]	; (49fc <cpu_irq_enter_critical+0x3c>)
    49e8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    49ea:	4b02      	ldr	r3, [pc, #8]	; (49f4 <cpu_irq_enter_critical+0x34>)
    49ec:	681a      	ldr	r2, [r3, #0]
    49ee:	3201      	adds	r2, #1
    49f0:	601a      	str	r2, [r3, #0]
}
    49f2:	4770      	bx	lr
    49f4:	2000429c 	.word	0x2000429c
    49f8:	20000014 	.word	0x20000014
    49fc:	200042a0 	.word	0x200042a0

00004a00 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4a00:	4b08      	ldr	r3, [pc, #32]	; (4a24 <cpu_irq_leave_critical+0x24>)
    4a02:	681a      	ldr	r2, [r3, #0]
    4a04:	3a01      	subs	r2, #1
    4a06:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4a08:	681b      	ldr	r3, [r3, #0]
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d109      	bne.n	4a22 <cpu_irq_leave_critical+0x22>
    4a0e:	4b06      	ldr	r3, [pc, #24]	; (4a28 <cpu_irq_leave_critical+0x28>)
    4a10:	781b      	ldrb	r3, [r3, #0]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d005      	beq.n	4a22 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4a16:	2201      	movs	r2, #1
    4a18:	4b04      	ldr	r3, [pc, #16]	; (4a2c <cpu_irq_leave_critical+0x2c>)
    4a1a:	701a      	strb	r2, [r3, #0]
    4a1c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4a20:	b662      	cpsie	i
	}
}
    4a22:	4770      	bx	lr
    4a24:	2000429c 	.word	0x2000429c
    4a28:	200042a0 	.word	0x200042a0
    4a2c:	20000014 	.word	0x20000014

00004a30 <system_board_init>:




void system_board_init(void)
{
    4a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a32:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4a34:	ac01      	add	r4, sp, #4
    4a36:	2501      	movs	r5, #1
    4a38:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4a3a:	2700      	movs	r7, #0
    4a3c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4a3e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4a40:	2013      	movs	r0, #19
    4a42:	1c21      	adds	r1, r4, #0
    4a44:	4e06      	ldr	r6, [pc, #24]	; (4a60 <system_board_init+0x30>)
    4a46:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4a48:	2280      	movs	r2, #128	; 0x80
    4a4a:	0312      	lsls	r2, r2, #12
    4a4c:	4b05      	ldr	r3, [pc, #20]	; (4a64 <system_board_init+0x34>)
    4a4e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4a50:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4a52:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4a54:	201c      	movs	r0, #28
    4a56:	1c21      	adds	r1, r4, #0
    4a58:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    4a5a:	b003      	add	sp, #12
    4a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a5e:	46c0      	nop			; (mov r8, r8)
    4a60:	00004a69 	.word	0x00004a69
    4a64:	41004400 	.word	0x41004400

00004a68 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4a68:	b500      	push	{lr}
    4a6a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4a6c:	ab01      	add	r3, sp, #4
    4a6e:	2280      	movs	r2, #128	; 0x80
    4a70:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4a72:	780a      	ldrb	r2, [r1, #0]
    4a74:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4a76:	784a      	ldrb	r2, [r1, #1]
    4a78:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4a7a:	788a      	ldrb	r2, [r1, #2]
    4a7c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4a7e:	1c19      	adds	r1, r3, #0
    4a80:	4b01      	ldr	r3, [pc, #4]	; (4a88 <port_pin_set_config+0x20>)
    4a82:	4798      	blx	r3
}
    4a84:	b003      	add	sp, #12
    4a86:	bd00      	pop	{pc}
    4a88:	00004f9d 	.word	0x00004f9d

00004a8c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4a8c:	b508      	push	{r3, lr}
	switch (clock_source) {
    4a8e:	2808      	cmp	r0, #8
    4a90:	d834      	bhi.n	4afc <system_clock_source_get_hz+0x70>
    4a92:	0080      	lsls	r0, r0, #2
    4a94:	4b1b      	ldr	r3, [pc, #108]	; (4b04 <system_clock_source_get_hz+0x78>)
    4a96:	581b      	ldr	r3, [r3, r0]
    4a98:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4a9a:	2080      	movs	r0, #128	; 0x80
    4a9c:	0200      	lsls	r0, r0, #8
    4a9e:	e030      	b.n	4b02 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4aa0:	4b19      	ldr	r3, [pc, #100]	; (4b08 <system_clock_source_get_hz+0x7c>)
    4aa2:	6918      	ldr	r0, [r3, #16]
    4aa4:	e02d      	b.n	4b02 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4aa6:	4b19      	ldr	r3, [pc, #100]	; (4b0c <system_clock_source_get_hz+0x80>)
    4aa8:	6a18      	ldr	r0, [r3, #32]
    4aaa:	0580      	lsls	r0, r0, #22
    4aac:	0f80      	lsrs	r0, r0, #30
    4aae:	4b18      	ldr	r3, [pc, #96]	; (4b10 <system_clock_source_get_hz+0x84>)
    4ab0:	40c3      	lsrs	r3, r0
    4ab2:	1c18      	adds	r0, r3, #0
    4ab4:	e025      	b.n	4b02 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4ab6:	4b14      	ldr	r3, [pc, #80]	; (4b08 <system_clock_source_get_hz+0x7c>)
    4ab8:	6958      	ldr	r0, [r3, #20]
    4aba:	e022      	b.n	4b02 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4abc:	4b12      	ldr	r3, [pc, #72]	; (4b08 <system_clock_source_get_hz+0x7c>)
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	2002      	movs	r0, #2
    4ac2:	4018      	ands	r0, r3
    4ac4:	d01d      	beq.n	4b02 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4ac6:	4911      	ldr	r1, [pc, #68]	; (4b0c <system_clock_source_get_hz+0x80>)
    4ac8:	2210      	movs	r2, #16
    4aca:	68cb      	ldr	r3, [r1, #12]
    4acc:	421a      	tst	r2, r3
    4ace:	d0fc      	beq.n	4aca <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4ad0:	4b0d      	ldr	r3, [pc, #52]	; (4b08 <system_clock_source_get_hz+0x7c>)
    4ad2:	681b      	ldr	r3, [r3, #0]
    4ad4:	075a      	lsls	r2, r3, #29
    4ad6:	d513      	bpl.n	4b00 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4ad8:	2000      	movs	r0, #0
    4ada:	4b0e      	ldr	r3, [pc, #56]	; (4b14 <system_clock_source_get_hz+0x88>)
    4adc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4ade:	4b0a      	ldr	r3, [pc, #40]	; (4b08 <system_clock_source_get_hz+0x7c>)
    4ae0:	689b      	ldr	r3, [r3, #8]
    4ae2:	041b      	lsls	r3, r3, #16
    4ae4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4ae6:	4358      	muls	r0, r3
    4ae8:	e00b      	b.n	4b02 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4aea:	2350      	movs	r3, #80	; 0x50
    4aec:	4a07      	ldr	r2, [pc, #28]	; (4b0c <system_clock_source_get_hz+0x80>)
    4aee:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4af0:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4af2:	075a      	lsls	r2, r3, #29
    4af4:	d505      	bpl.n	4b02 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    4af6:	4b04      	ldr	r3, [pc, #16]	; (4b08 <system_clock_source_get_hz+0x7c>)
    4af8:	68d8      	ldr	r0, [r3, #12]
    4afa:	e002      	b.n	4b02 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    4afc:	2000      	movs	r0, #0
    4afe:	e000      	b.n	4b02 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4b00:	4805      	ldr	r0, [pc, #20]	; (4b18 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    4b02:	bd08      	pop	{r3, pc}
    4b04:	00006888 	.word	0x00006888
    4b08:	200042a4 	.word	0x200042a4
    4b0c:	40000800 	.word	0x40000800
    4b10:	007a1200 	.word	0x007a1200
    4b14:	00004edd 	.word	0x00004edd
    4b18:	02dc6c00 	.word	0x02dc6c00

00004b1c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4b1c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4b1e:	4b0c      	ldr	r3, [pc, #48]	; (4b50 <system_clock_source_osc8m_set_config+0x34>)
    4b20:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4b22:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4b24:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4b26:	7840      	ldrb	r0, [r0, #1]
    4b28:	2201      	movs	r2, #1
    4b2a:	4010      	ands	r0, r2
    4b2c:	0180      	lsls	r0, r0, #6
    4b2e:	2640      	movs	r6, #64	; 0x40
    4b30:	43b4      	bics	r4, r6
    4b32:	4304      	orrs	r4, r0
    4b34:	402a      	ands	r2, r5
    4b36:	01d0      	lsls	r0, r2, #7
    4b38:	2280      	movs	r2, #128	; 0x80
    4b3a:	4394      	bics	r4, r2
    4b3c:	1c22      	adds	r2, r4, #0
    4b3e:	4302      	orrs	r2, r0
    4b40:	2003      	movs	r0, #3
    4b42:	4001      	ands	r1, r0
    4b44:	0209      	lsls	r1, r1, #8
    4b46:	4803      	ldr	r0, [pc, #12]	; (4b54 <system_clock_source_osc8m_set_config+0x38>)
    4b48:	4002      	ands	r2, r0
    4b4a:	430a      	orrs	r2, r1
    4b4c:	621a      	str	r2, [r3, #32]
}
    4b4e:	bd70      	pop	{r4, r5, r6, pc}
    4b50:	40000800 	.word	0x40000800
    4b54:	fffffcff 	.word	0xfffffcff

00004b58 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4b58:	2808      	cmp	r0, #8
    4b5a:	d843      	bhi.n	4be4 <system_clock_source_enable+0x8c>
    4b5c:	0080      	lsls	r0, r0, #2
    4b5e:	4b22      	ldr	r3, [pc, #136]	; (4be8 <system_clock_source_enable+0x90>)
    4b60:	581b      	ldr	r3, [r3, r0]
    4b62:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4b64:	2000      	movs	r0, #0
    4b66:	e03e      	b.n	4be6 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4b68:	4b20      	ldr	r3, [pc, #128]	; (4bec <system_clock_source_enable+0x94>)
    4b6a:	6a19      	ldr	r1, [r3, #32]
    4b6c:	2202      	movs	r2, #2
    4b6e:	430a      	orrs	r2, r1
    4b70:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4b72:	2000      	movs	r0, #0
    4b74:	e037      	b.n	4be6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4b76:	4b1d      	ldr	r3, [pc, #116]	; (4bec <system_clock_source_enable+0x94>)
    4b78:	6999      	ldr	r1, [r3, #24]
    4b7a:	2202      	movs	r2, #2
    4b7c:	430a      	orrs	r2, r1
    4b7e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4b80:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    4b82:	e030      	b.n	4be6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4b84:	4b19      	ldr	r3, [pc, #100]	; (4bec <system_clock_source_enable+0x94>)
    4b86:	8a19      	ldrh	r1, [r3, #16]
    4b88:	2202      	movs	r2, #2
    4b8a:	430a      	orrs	r2, r1
    4b8c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4b8e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    4b90:	e029      	b.n	4be6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4b92:	4b16      	ldr	r3, [pc, #88]	; (4bec <system_clock_source_enable+0x94>)
    4b94:	8a99      	ldrh	r1, [r3, #20]
    4b96:	2202      	movs	r2, #2
    4b98:	430a      	orrs	r2, r1
    4b9a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4b9c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    4b9e:	e022      	b.n	4be6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4ba0:	4b13      	ldr	r3, [pc, #76]	; (4bf0 <system_clock_source_enable+0x98>)
    4ba2:	6819      	ldr	r1, [r3, #0]
    4ba4:	2202      	movs	r2, #2
    4ba6:	430a      	orrs	r2, r1
    4ba8:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    4baa:	681a      	ldr	r2, [r3, #0]
    4bac:	4b11      	ldr	r3, [pc, #68]	; (4bf4 <system_clock_source_enable+0x9c>)
    4bae:	401a      	ands	r2, r3
    4bb0:	4b0e      	ldr	r3, [pc, #56]	; (4bec <system_clock_source_enable+0x94>)
    4bb2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4bb4:	1c19      	adds	r1, r3, #0
    4bb6:	2210      	movs	r2, #16
    4bb8:	68cb      	ldr	r3, [r1, #12]
    4bba:	421a      	tst	r2, r3
    4bbc:	d0fc      	beq.n	4bb8 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4bbe:	4a0c      	ldr	r2, [pc, #48]	; (4bf0 <system_clock_source_enable+0x98>)
    4bc0:	6891      	ldr	r1, [r2, #8]
    4bc2:	4b0a      	ldr	r3, [pc, #40]	; (4bec <system_clock_source_enable+0x94>)
    4bc4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4bc6:	6851      	ldr	r1, [r2, #4]
    4bc8:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4bca:	6812      	ldr	r2, [r2, #0]
    4bcc:	b292      	uxth	r2, r2
    4bce:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bd0:	2000      	movs	r0, #0
    4bd2:	e008      	b.n	4be6 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4bd4:	4a05      	ldr	r2, [pc, #20]	; (4bec <system_clock_source_enable+0x94>)
    4bd6:	2344      	movs	r3, #68	; 0x44
    4bd8:	5cd0      	ldrb	r0, [r2, r3]
    4bda:	2102      	movs	r1, #2
    4bdc:	4301      	orrs	r1, r0
    4bde:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4be0:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    4be2:	e000      	b.n	4be6 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4be4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    4be6:	4770      	bx	lr
    4be8:	000068ac 	.word	0x000068ac
    4bec:	40000800 	.word	0x40000800
    4bf0:	200042a4 	.word	0x200042a4
    4bf4:	0000ff7f 	.word	0x0000ff7f

00004bf8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4bf8:	b530      	push	{r4, r5, lr}
    4bfa:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4bfc:	22c2      	movs	r2, #194	; 0xc2
    4bfe:	00d2      	lsls	r2, r2, #3
    4c00:	4b19      	ldr	r3, [pc, #100]	; (4c68 <system_clock_init+0x70>)
    4c02:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4c04:	4b19      	ldr	r3, [pc, #100]	; (4c6c <system_clock_init+0x74>)
    4c06:	685a      	ldr	r2, [r3, #4]
    4c08:	211e      	movs	r1, #30
    4c0a:	438a      	bics	r2, r1
    4c0c:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    4c0e:	2301      	movs	r3, #1
    4c10:	466a      	mov	r2, sp
    4c12:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4c14:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4c16:	4d16      	ldr	r5, [pc, #88]	; (4c70 <system_clock_init+0x78>)
    4c18:	b2e0      	uxtb	r0, r4
    4c1a:	4669      	mov	r1, sp
    4c1c:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4c1e:	3401      	adds	r4, #1
    4c20:	2c25      	cmp	r4, #37	; 0x25
    4c22:	d1f9      	bne.n	4c18 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    4c24:	a803      	add	r0, sp, #12
    4c26:	2400      	movs	r4, #0
    4c28:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    4c2a:	2501      	movs	r5, #1
    4c2c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4c2e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4c30:	4b10      	ldr	r3, [pc, #64]	; (4c74 <system_clock_init+0x7c>)
    4c32:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4c34:	2006      	movs	r0, #6
    4c36:	4b10      	ldr	r3, [pc, #64]	; (4c78 <system_clock_init+0x80>)
    4c38:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4c3a:	4b10      	ldr	r3, [pc, #64]	; (4c7c <system_clock_init+0x84>)
    4c3c:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4c3e:	4b10      	ldr	r3, [pc, #64]	; (4c80 <system_clock_init+0x88>)
    4c40:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4c42:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4c44:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4c46:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    4c48:	466b      	mov	r3, sp
    4c4a:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4c4c:	2306      	movs	r3, #6
    4c4e:	466a      	mov	r2, sp
    4c50:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    4c52:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    4c54:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4c56:	2000      	movs	r0, #0
    4c58:	4669      	mov	r1, sp
    4c5a:	4b0a      	ldr	r3, [pc, #40]	; (4c84 <system_clock_init+0x8c>)
    4c5c:	4798      	blx	r3
    4c5e:	2000      	movs	r0, #0
    4c60:	4b09      	ldr	r3, [pc, #36]	; (4c88 <system_clock_init+0x90>)
    4c62:	4798      	blx	r3
#endif
}
    4c64:	b005      	add	sp, #20
    4c66:	bd30      	pop	{r4, r5, pc}
    4c68:	40000800 	.word	0x40000800
    4c6c:	41004000 	.word	0x41004000
    4c70:	00004ec1 	.word	0x00004ec1
    4c74:	00004b1d 	.word	0x00004b1d
    4c78:	00004b59 	.word	0x00004b59
    4c7c:	00004c8d 	.word	0x00004c8d
    4c80:	40000400 	.word	0x40000400
    4c84:	00004cb1 	.word	0x00004cb1
    4c88:	00004d65 	.word	0x00004d65

00004c8c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4c8c:	4b06      	ldr	r3, [pc, #24]	; (4ca8 <system_gclk_init+0x1c>)
    4c8e:	6999      	ldr	r1, [r3, #24]
    4c90:	2208      	movs	r2, #8
    4c92:	430a      	orrs	r2, r1
    4c94:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4c96:	2201      	movs	r2, #1
    4c98:	4b04      	ldr	r3, [pc, #16]	; (4cac <system_gclk_init+0x20>)
    4c9a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4c9c:	1c19      	adds	r1, r3, #0
    4c9e:	780b      	ldrb	r3, [r1, #0]
    4ca0:	4213      	tst	r3, r2
    4ca2:	d1fc      	bne.n	4c9e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4ca4:	4770      	bx	lr
    4ca6:	46c0      	nop			; (mov r8, r8)
    4ca8:	40000400 	.word	0x40000400
    4cac:	40000c00 	.word	0x40000c00

00004cb0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cb2:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4cb4:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4cb6:	780d      	ldrb	r5, [r1, #0]
    4cb8:	022d      	lsls	r5, r5, #8
    4cba:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4cbc:	784b      	ldrb	r3, [r1, #1]
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	d002      	beq.n	4cc8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4cc2:	2380      	movs	r3, #128	; 0x80
    4cc4:	02db      	lsls	r3, r3, #11
    4cc6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4cc8:	7a4b      	ldrb	r3, [r1, #9]
    4cca:	2b00      	cmp	r3, #0
    4ccc:	d002      	beq.n	4cd4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4cce:	2380      	movs	r3, #128	; 0x80
    4cd0:	031b      	lsls	r3, r3, #12
    4cd2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4cd4:	684c      	ldr	r4, [r1, #4]
    4cd6:	2c01      	cmp	r4, #1
    4cd8:	d917      	bls.n	4d0a <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4cda:	1e63      	subs	r3, r4, #1
    4cdc:	421c      	tst	r4, r3
    4cde:	d10f      	bne.n	4d00 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4ce0:	2c02      	cmp	r4, #2
    4ce2:	d906      	bls.n	4cf2 <system_gclk_gen_set_config+0x42>
    4ce4:	2302      	movs	r3, #2
    4ce6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4ce8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4cea:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4cec:	429c      	cmp	r4, r3
    4cee:	d8fb      	bhi.n	4ce8 <system_gclk_gen_set_config+0x38>
    4cf0:	e000      	b.n	4cf4 <system_gclk_gen_set_config+0x44>
    4cf2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4cf4:	0217      	lsls	r7, r2, #8
    4cf6:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4cf8:	2380      	movs	r3, #128	; 0x80
    4cfa:	035b      	lsls	r3, r3, #13
    4cfc:	431d      	orrs	r5, r3
    4cfe:	e004      	b.n	4d0a <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4d00:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4d02:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4d04:	2380      	movs	r3, #128	; 0x80
    4d06:	029b      	lsls	r3, r3, #10
    4d08:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4d0a:	7a0b      	ldrb	r3, [r1, #8]
    4d0c:	2b00      	cmp	r3, #0
    4d0e:	d002      	beq.n	4d16 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4d10:	2380      	movs	r3, #128	; 0x80
    4d12:	039b      	lsls	r3, r3, #14
    4d14:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4d16:	4a0f      	ldr	r2, [pc, #60]	; (4d54 <system_gclk_gen_set_config+0xa4>)
    4d18:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    4d1a:	b25b      	sxtb	r3, r3
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	dbfb      	blt.n	4d18 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4d20:	4b0d      	ldr	r3, [pc, #52]	; (4d58 <system_gclk_gen_set_config+0xa8>)
    4d22:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4d24:	4b0d      	ldr	r3, [pc, #52]	; (4d5c <system_gclk_gen_set_config+0xac>)
    4d26:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4d28:	4a0a      	ldr	r2, [pc, #40]	; (4d54 <system_gclk_gen_set_config+0xa4>)
    4d2a:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4d2c:	b25b      	sxtb	r3, r3
    4d2e:	2b00      	cmp	r3, #0
    4d30:	dbfb      	blt.n	4d2a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4d32:	4b08      	ldr	r3, [pc, #32]	; (4d54 <system_gclk_gen_set_config+0xa4>)
    4d34:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4d36:	1c1a      	adds	r2, r3, #0
    4d38:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    4d3a:	b25b      	sxtb	r3, r3
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	dbfb      	blt.n	4d38 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4d40:	4b04      	ldr	r3, [pc, #16]	; (4d54 <system_gclk_gen_set_config+0xa4>)
    4d42:	6859      	ldr	r1, [r3, #4]
    4d44:	2280      	movs	r2, #128	; 0x80
    4d46:	0252      	lsls	r2, r2, #9
    4d48:	400a      	ands	r2, r1
    4d4a:	4315      	orrs	r5, r2
    4d4c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4d4e:	4b04      	ldr	r3, [pc, #16]	; (4d60 <system_gclk_gen_set_config+0xb0>)
    4d50:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d54:	40000c00 	.word	0x40000c00
    4d58:	000049c1 	.word	0x000049c1
    4d5c:	40000c08 	.word	0x40000c08
    4d60:	00004a01 	.word	0x00004a01

00004d64 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4d64:	b510      	push	{r4, lr}
    4d66:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4d68:	4a0b      	ldr	r2, [pc, #44]	; (4d98 <system_gclk_gen_enable+0x34>)
    4d6a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4d6c:	b25b      	sxtb	r3, r3
    4d6e:	2b00      	cmp	r3, #0
    4d70:	dbfb      	blt.n	4d6a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4d72:	4b0a      	ldr	r3, [pc, #40]	; (4d9c <system_gclk_gen_enable+0x38>)
    4d74:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4d76:	4b0a      	ldr	r3, [pc, #40]	; (4da0 <system_gclk_gen_enable+0x3c>)
    4d78:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4d7a:	4a07      	ldr	r2, [pc, #28]	; (4d98 <system_gclk_gen_enable+0x34>)
    4d7c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4d7e:	b25b      	sxtb	r3, r3
    4d80:	2b00      	cmp	r3, #0
    4d82:	dbfb      	blt.n	4d7c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4d84:	4b04      	ldr	r3, [pc, #16]	; (4d98 <system_gclk_gen_enable+0x34>)
    4d86:	6859      	ldr	r1, [r3, #4]
    4d88:	2280      	movs	r2, #128	; 0x80
    4d8a:	0252      	lsls	r2, r2, #9
    4d8c:	430a      	orrs	r2, r1
    4d8e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4d90:	4b04      	ldr	r3, [pc, #16]	; (4da4 <system_gclk_gen_enable+0x40>)
    4d92:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4d94:	bd10      	pop	{r4, pc}
    4d96:	46c0      	nop			; (mov r8, r8)
    4d98:	40000c00 	.word	0x40000c00
    4d9c:	000049c1 	.word	0x000049c1
    4da0:	40000c04 	.word	0x40000c04
    4da4:	00004a01 	.word	0x00004a01

00004da8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4da8:	b570      	push	{r4, r5, r6, lr}
    4daa:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4dac:	4a1a      	ldr	r2, [pc, #104]	; (4e18 <system_gclk_gen_get_hz+0x70>)
    4dae:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4db0:	b25b      	sxtb	r3, r3
    4db2:	2b00      	cmp	r3, #0
    4db4:	dbfb      	blt.n	4dae <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4db6:	4b19      	ldr	r3, [pc, #100]	; (4e1c <system_gclk_gen_get_hz+0x74>)
    4db8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4dba:	4b19      	ldr	r3, [pc, #100]	; (4e20 <system_gclk_gen_get_hz+0x78>)
    4dbc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4dbe:	4a16      	ldr	r2, [pc, #88]	; (4e18 <system_gclk_gen_get_hz+0x70>)
    4dc0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4dc2:	b25b      	sxtb	r3, r3
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	dbfb      	blt.n	4dc0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4dc8:	4e13      	ldr	r6, [pc, #76]	; (4e18 <system_gclk_gen_get_hz+0x70>)
    4dca:	6870      	ldr	r0, [r6, #4]
    4dcc:	04c0      	lsls	r0, r0, #19
    4dce:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4dd0:	4b14      	ldr	r3, [pc, #80]	; (4e24 <system_gclk_gen_get_hz+0x7c>)
    4dd2:	4798      	blx	r3
    4dd4:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4dd6:	4b12      	ldr	r3, [pc, #72]	; (4e20 <system_gclk_gen_get_hz+0x78>)
    4dd8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4dda:	6876      	ldr	r6, [r6, #4]
    4ddc:	02f6      	lsls	r6, r6, #11
    4dde:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4de0:	4b11      	ldr	r3, [pc, #68]	; (4e28 <system_gclk_gen_get_hz+0x80>)
    4de2:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4de4:	4a0c      	ldr	r2, [pc, #48]	; (4e18 <system_gclk_gen_get_hz+0x70>)
    4de6:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    4de8:	b25b      	sxtb	r3, r3
    4dea:	2b00      	cmp	r3, #0
    4dec:	dbfb      	blt.n	4de6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4dee:	4b0a      	ldr	r3, [pc, #40]	; (4e18 <system_gclk_gen_get_hz+0x70>)
    4df0:	689c      	ldr	r4, [r3, #8]
    4df2:	0a24      	lsrs	r4, r4, #8
    4df4:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4df6:	4b0d      	ldr	r3, [pc, #52]	; (4e2c <system_gclk_gen_get_hz+0x84>)
    4df8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4dfa:	2e00      	cmp	r6, #0
    4dfc:	d107      	bne.n	4e0e <system_gclk_gen_get_hz+0x66>
    4dfe:	2c01      	cmp	r4, #1
    4e00:	d907      	bls.n	4e12 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4e02:	1c28      	adds	r0, r5, #0
    4e04:	1c21      	adds	r1, r4, #0
    4e06:	4b0a      	ldr	r3, [pc, #40]	; (4e30 <system_gclk_gen_get_hz+0x88>)
    4e08:	4798      	blx	r3
    4e0a:	1c05      	adds	r5, r0, #0
    4e0c:	e001      	b.n	4e12 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4e0e:	3401      	adds	r4, #1
    4e10:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    4e12:	1c28      	adds	r0, r5, #0
    4e14:	bd70      	pop	{r4, r5, r6, pc}
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	40000c00 	.word	0x40000c00
    4e1c:	000049c1 	.word	0x000049c1
    4e20:	40000c04 	.word	0x40000c04
    4e24:	00004a8d 	.word	0x00004a8d
    4e28:	40000c08 	.word	0x40000c08
    4e2c:	00004a01 	.word	0x00004a01
    4e30:	00005689 	.word	0x00005689

00004e34 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4e34:	b510      	push	{r4, lr}
    4e36:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4e38:	4b06      	ldr	r3, [pc, #24]	; (4e54 <system_gclk_chan_enable+0x20>)
    4e3a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4e3c:	4b06      	ldr	r3, [pc, #24]	; (4e58 <system_gclk_chan_enable+0x24>)
    4e3e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4e40:	4b06      	ldr	r3, [pc, #24]	; (4e5c <system_gclk_chan_enable+0x28>)
    4e42:	8859      	ldrh	r1, [r3, #2]
    4e44:	2280      	movs	r2, #128	; 0x80
    4e46:	01d2      	lsls	r2, r2, #7
    4e48:	430a      	orrs	r2, r1
    4e4a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4e4c:	4b04      	ldr	r3, [pc, #16]	; (4e60 <system_gclk_chan_enable+0x2c>)
    4e4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4e50:	bd10      	pop	{r4, pc}
    4e52:	46c0      	nop			; (mov r8, r8)
    4e54:	000049c1 	.word	0x000049c1
    4e58:	40000c02 	.word	0x40000c02
    4e5c:	40000c00 	.word	0x40000c00
    4e60:	00004a01 	.word	0x00004a01

00004e64 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4e64:	b510      	push	{r4, lr}
    4e66:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4e68:	4b0f      	ldr	r3, [pc, #60]	; (4ea8 <system_gclk_chan_disable+0x44>)
    4e6a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4e6c:	4b0f      	ldr	r3, [pc, #60]	; (4eac <system_gclk_chan_disable+0x48>)
    4e6e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4e70:	4b0f      	ldr	r3, [pc, #60]	; (4eb0 <system_gclk_chan_disable+0x4c>)
    4e72:	8858      	ldrh	r0, [r3, #2]
    4e74:	0500      	lsls	r0, r0, #20
    4e76:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4e78:	8859      	ldrh	r1, [r3, #2]
    4e7a:	4a0e      	ldr	r2, [pc, #56]	; (4eb4 <system_gclk_chan_disable+0x50>)
    4e7c:	400a      	ands	r2, r1
    4e7e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4e80:	8859      	ldrh	r1, [r3, #2]
    4e82:	4a0d      	ldr	r2, [pc, #52]	; (4eb8 <system_gclk_chan_disable+0x54>)
    4e84:	400a      	ands	r2, r1
    4e86:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4e88:	1c19      	adds	r1, r3, #0
    4e8a:	2280      	movs	r2, #128	; 0x80
    4e8c:	01d2      	lsls	r2, r2, #7
    4e8e:	884b      	ldrh	r3, [r1, #2]
    4e90:	4213      	tst	r3, r2
    4e92:	d1fc      	bne.n	4e8e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4e94:	4b06      	ldr	r3, [pc, #24]	; (4eb0 <system_gclk_chan_disable+0x4c>)
    4e96:	0201      	lsls	r1, r0, #8
    4e98:	8858      	ldrh	r0, [r3, #2]
    4e9a:	4a06      	ldr	r2, [pc, #24]	; (4eb4 <system_gclk_chan_disable+0x50>)
    4e9c:	4002      	ands	r2, r0
    4e9e:	430a      	orrs	r2, r1
    4ea0:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4ea2:	4b06      	ldr	r3, [pc, #24]	; (4ebc <system_gclk_chan_disable+0x58>)
    4ea4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4ea6:	bd10      	pop	{r4, pc}
    4ea8:	000049c1 	.word	0x000049c1
    4eac:	40000c02 	.word	0x40000c02
    4eb0:	40000c00 	.word	0x40000c00
    4eb4:	fffff0ff 	.word	0xfffff0ff
    4eb8:	ffffbfff 	.word	0xffffbfff
    4ebc:	00004a01 	.word	0x00004a01

00004ec0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4ec0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4ec2:	780c      	ldrb	r4, [r1, #0]
    4ec4:	0224      	lsls	r4, r4, #8
    4ec6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4ec8:	4b02      	ldr	r3, [pc, #8]	; (4ed4 <system_gclk_chan_set_config+0x14>)
    4eca:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4ecc:	b2a4      	uxth	r4, r4
    4ece:	4b02      	ldr	r3, [pc, #8]	; (4ed8 <system_gclk_chan_set_config+0x18>)
    4ed0:	805c      	strh	r4, [r3, #2]
}
    4ed2:	bd10      	pop	{r4, pc}
    4ed4:	00004e65 	.word	0x00004e65
    4ed8:	40000c00 	.word	0x40000c00

00004edc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4edc:	b510      	push	{r4, lr}
    4ede:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4ee0:	4b06      	ldr	r3, [pc, #24]	; (4efc <system_gclk_chan_get_hz+0x20>)
    4ee2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4ee4:	4b06      	ldr	r3, [pc, #24]	; (4f00 <system_gclk_chan_get_hz+0x24>)
    4ee6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4ee8:	4b06      	ldr	r3, [pc, #24]	; (4f04 <system_gclk_chan_get_hz+0x28>)
    4eea:	885c      	ldrh	r4, [r3, #2]
    4eec:	0524      	lsls	r4, r4, #20
    4eee:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4ef0:	4b05      	ldr	r3, [pc, #20]	; (4f08 <system_gclk_chan_get_hz+0x2c>)
    4ef2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4ef4:	1c20      	adds	r0, r4, #0
    4ef6:	4b05      	ldr	r3, [pc, #20]	; (4f0c <system_gclk_chan_get_hz+0x30>)
    4ef8:	4798      	blx	r3
}
    4efa:	bd10      	pop	{r4, pc}
    4efc:	000049c1 	.word	0x000049c1
    4f00:	40000c02 	.word	0x40000c02
    4f04:	40000c00 	.word	0x40000c00
    4f08:	00004a01 	.word	0x00004a01
    4f0c:	00004da9 	.word	0x00004da9

00004f10 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4f10:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4f12:	78d3      	ldrb	r3, [r2, #3]
    4f14:	2b00      	cmp	r3, #0
    4f16:	d11e      	bne.n	4f56 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4f18:	7813      	ldrb	r3, [r2, #0]
    4f1a:	2b80      	cmp	r3, #128	; 0x80
    4f1c:	d004      	beq.n	4f28 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4f1e:	061b      	lsls	r3, r3, #24
    4f20:	2480      	movs	r4, #128	; 0x80
    4f22:	0264      	lsls	r4, r4, #9
    4f24:	4323      	orrs	r3, r4
    4f26:	e000      	b.n	4f2a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4f28:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4f2a:	7854      	ldrb	r4, [r2, #1]
    4f2c:	2502      	movs	r5, #2
    4f2e:	43ac      	bics	r4, r5
    4f30:	d10a      	bne.n	4f48 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4f32:	7894      	ldrb	r4, [r2, #2]
    4f34:	2c00      	cmp	r4, #0
    4f36:	d103      	bne.n	4f40 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4f38:	2480      	movs	r4, #128	; 0x80
    4f3a:	02a4      	lsls	r4, r4, #10
    4f3c:	4323      	orrs	r3, r4
    4f3e:	e002      	b.n	4f46 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4f40:	24c0      	movs	r4, #192	; 0xc0
    4f42:	02e4      	lsls	r4, r4, #11
    4f44:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4f46:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4f48:	7854      	ldrb	r4, [r2, #1]
    4f4a:	3c01      	subs	r4, #1
    4f4c:	2c01      	cmp	r4, #1
    4f4e:	d804      	bhi.n	4f5a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4f50:	4c11      	ldr	r4, [pc, #68]	; (4f98 <_system_pinmux_config+0x88>)
    4f52:	4023      	ands	r3, r4
    4f54:	e001      	b.n	4f5a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4f56:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4f58:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4f5a:	040d      	lsls	r5, r1, #16
    4f5c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4f5e:	24a0      	movs	r4, #160	; 0xa0
    4f60:	05e4      	lsls	r4, r4, #23
    4f62:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4f64:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4f66:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4f68:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4f6a:	24d0      	movs	r4, #208	; 0xd0
    4f6c:	0624      	lsls	r4, r4, #24
    4f6e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4f70:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4f72:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4f74:	78d4      	ldrb	r4, [r2, #3]
    4f76:	2c00      	cmp	r4, #0
    4f78:	d10c      	bne.n	4f94 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4f7a:	035c      	lsls	r4, r3, #13
    4f7c:	d505      	bpl.n	4f8a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4f7e:	7893      	ldrb	r3, [r2, #2]
    4f80:	2b01      	cmp	r3, #1
    4f82:	d101      	bne.n	4f88 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    4f84:	6181      	str	r1, [r0, #24]
    4f86:	e000      	b.n	4f8a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    4f88:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4f8a:	7853      	ldrb	r3, [r2, #1]
    4f8c:	3b01      	subs	r3, #1
    4f8e:	2b01      	cmp	r3, #1
    4f90:	d800      	bhi.n	4f94 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4f92:	6081      	str	r1, [r0, #8]
		}
	}
}
    4f94:	bd30      	pop	{r4, r5, pc}
    4f96:	46c0      	nop			; (mov r8, r8)
    4f98:	fffbffff 	.word	0xfffbffff

00004f9c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4f9c:	b508      	push	{r3, lr}
    4f9e:	1c03      	adds	r3, r0, #0
    4fa0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4fa2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4fa4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4fa6:	2900      	cmp	r1, #0
    4fa8:	d103      	bne.n	4fb2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4faa:	0958      	lsrs	r0, r3, #5
    4fac:	01c0      	lsls	r0, r0, #7
    4fae:	4904      	ldr	r1, [pc, #16]	; (4fc0 <system_pinmux_pin_set_config+0x24>)
    4fb0:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4fb2:	211f      	movs	r1, #31
    4fb4:	400b      	ands	r3, r1
    4fb6:	2101      	movs	r1, #1
    4fb8:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    4fba:	4b02      	ldr	r3, [pc, #8]	; (4fc4 <system_pinmux_pin_set_config+0x28>)
    4fbc:	4798      	blx	r3
}
    4fbe:	bd08      	pop	{r3, pc}
    4fc0:	41004400 	.word	0x41004400
    4fc4:	00004f11 	.word	0x00004f11

00004fc8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4fc8:	4770      	bx	lr
    4fca:	46c0      	nop			; (mov r8, r8)

00004fcc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4fcc:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4fce:	4b04      	ldr	r3, [pc, #16]	; (4fe0 <system_init+0x14>)
    4fd0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4fd2:	4b04      	ldr	r3, [pc, #16]	; (4fe4 <system_init+0x18>)
    4fd4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4fd6:	4b04      	ldr	r3, [pc, #16]	; (4fe8 <system_init+0x1c>)
    4fd8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4fda:	4b04      	ldr	r3, [pc, #16]	; (4fec <system_init+0x20>)
    4fdc:	4798      	blx	r3
}
    4fde:	bd08      	pop	{r3, pc}
    4fe0:	00004bf9 	.word	0x00004bf9
    4fe4:	00004a31 	.word	0x00004a31
    4fe8:	00004fc9 	.word	0x00004fc9
    4fec:	00000131 	.word	0x00000131

00004ff0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4ff0:	e7fe      	b.n	4ff0 <Dummy_Handler>
    4ff2:	46c0      	nop			; (mov r8, r8)

00004ff4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    4ff4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    4ff6:	4b1c      	ldr	r3, [pc, #112]	; (5068 <Reset_Handler+0x74>)
    4ff8:	4a1c      	ldr	r2, [pc, #112]	; (506c <Reset_Handler+0x78>)
    4ffa:	429a      	cmp	r2, r3
    4ffc:	d003      	beq.n	5006 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    4ffe:	4b1c      	ldr	r3, [pc, #112]	; (5070 <Reset_Handler+0x7c>)
    5000:	4a19      	ldr	r2, [pc, #100]	; (5068 <Reset_Handler+0x74>)
    5002:	429a      	cmp	r2, r3
    5004:	d304      	bcc.n	5010 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5006:	4b1b      	ldr	r3, [pc, #108]	; (5074 <Reset_Handler+0x80>)
    5008:	4a1b      	ldr	r2, [pc, #108]	; (5078 <Reset_Handler+0x84>)
    500a:	429a      	cmp	r2, r3
    500c:	d310      	bcc.n	5030 <Reset_Handler+0x3c>
    500e:	e01b      	b.n	5048 <Reset_Handler+0x54>
    5010:	4b1a      	ldr	r3, [pc, #104]	; (507c <Reset_Handler+0x88>)
    5012:	4817      	ldr	r0, [pc, #92]	; (5070 <Reset_Handler+0x7c>)
    5014:	3003      	adds	r0, #3
    5016:	1ac0      	subs	r0, r0, r3
    5018:	0880      	lsrs	r0, r0, #2
    501a:	3001      	adds	r0, #1
    501c:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    501e:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    5020:	4911      	ldr	r1, [pc, #68]	; (5068 <Reset_Handler+0x74>)
    5022:	4a12      	ldr	r2, [pc, #72]	; (506c <Reset_Handler+0x78>)
    5024:	58d4      	ldr	r4, [r2, r3]
    5026:	50cc      	str	r4, [r1, r3]
    5028:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    502a:	4283      	cmp	r3, r0
    502c:	d1fa      	bne.n	5024 <Reset_Handler+0x30>
    502e:	e7ea      	b.n	5006 <Reset_Handler+0x12>
    5030:	4b11      	ldr	r3, [pc, #68]	; (5078 <Reset_Handler+0x84>)
    5032:	1d1a      	adds	r2, r3, #4
    5034:	490f      	ldr	r1, [pc, #60]	; (5074 <Reset_Handler+0x80>)
    5036:	3103      	adds	r1, #3
    5038:	1a89      	subs	r1, r1, r2
    503a:	0889      	lsrs	r1, r1, #2
    503c:	0089      	lsls	r1, r1, #2
    503e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    5040:	2100      	movs	r1, #0
    5042:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5044:	4293      	cmp	r3, r2
    5046:	d1fc      	bne.n	5042 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5048:	4b0d      	ldr	r3, [pc, #52]	; (5080 <Reset_Handler+0x8c>)
    504a:	217f      	movs	r1, #127	; 0x7f
    504c:	4a0d      	ldr	r2, [pc, #52]	; (5084 <Reset_Handler+0x90>)
    504e:	438a      	bics	r2, r1
    5050:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5052:	4b0d      	ldr	r3, [pc, #52]	; (5088 <Reset_Handler+0x94>)
    5054:	6859      	ldr	r1, [r3, #4]
    5056:	2280      	movs	r2, #128	; 0x80
    5058:	430a      	orrs	r2, r1
    505a:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    505c:	4b0b      	ldr	r3, [pc, #44]	; (508c <Reset_Handler+0x98>)
    505e:	4798      	blx	r3

        /* Branch to main function */
        main();
    5060:	4b0b      	ldr	r3, [pc, #44]	; (5090 <Reset_Handler+0x9c>)
    5062:	4798      	blx	r3
    5064:	e7fe      	b.n	5064 <Reset_Handler+0x70>
    5066:	46c0      	nop			; (mov r8, r8)
    5068:	20000000 	.word	0x20000000
    506c:	00006a08 	.word	0x00006a08
    5070:	20000098 	.word	0x20000098
    5074:	200044e8 	.word	0x200044e8
    5078:	20000098 	.word	0x20000098
    507c:	20000004 	.word	0x20000004
    5080:	e000ed00 	.word	0xe000ed00
    5084:	00000000 	.word	0x00000000
    5088:	41004000 	.word	0x41004000
    508c:	0000582d 	.word	0x0000582d
    5090:	0000535d 	.word	0x0000535d

00005094 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5094:	4b06      	ldr	r3, [pc, #24]	; (50b0 <_sbrk+0x1c>)
    5096:	681b      	ldr	r3, [r3, #0]
    5098:	2b00      	cmp	r3, #0
    509a:	d102      	bne.n	50a2 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    509c:	4a05      	ldr	r2, [pc, #20]	; (50b4 <_sbrk+0x20>)
    509e:	4b04      	ldr	r3, [pc, #16]	; (50b0 <_sbrk+0x1c>)
    50a0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    50a2:	4a03      	ldr	r2, [pc, #12]	; (50b0 <_sbrk+0x1c>)
    50a4:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    50a6:	1818      	adds	r0, r3, r0
    50a8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    50aa:	1c18      	adds	r0, r3, #0
    50ac:	4770      	bx	lr
    50ae:	46c0      	nop			; (mov r8, r8)
    50b0:	200042bc 	.word	0x200042bc
    50b4:	200064e8 	.word	0x200064e8

000050b8 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    50b8:	2001      	movs	r0, #1
}
    50ba:	4240      	negs	r0, r0
    50bc:	4770      	bx	lr
    50be:	46c0      	nop			; (mov r8, r8)

000050c0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    50c0:	2380      	movs	r3, #128	; 0x80
    50c2:	019b      	lsls	r3, r3, #6
    50c4:	604b      	str	r3, [r1, #4]

	return 0;
}
    50c6:	2000      	movs	r0, #0
    50c8:	4770      	bx	lr
    50ca:	46c0      	nop			; (mov r8, r8)

000050cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    50cc:	2001      	movs	r0, #1
    50ce:	4770      	bx	lr

000050d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    50d0:	2000      	movs	r0, #0
    50d2:	4770      	bx	lr

000050d4 <send_packet_conf>:
//}


void send_packet_conf(NWK_DataReq_t *req)
{
	if (NWK_SUCCESS_STATUS == req->status){
    50d4:	7f03      	ldrb	r3, [r0, #28]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d103      	bne.n	50e2 <send_packet_conf+0xe>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    50da:	2280      	movs	r2, #128	; 0x80
    50dc:	0312      	lsls	r2, r2, #12
    50de:	4b01      	ldr	r3, [pc, #4]	; (50e4 <send_packet_conf+0x10>)
    50e0:	61da      	str	r2, [r3, #28]
		LED_Toggle(LED0);
		//release the semaphore ;
	}
}
    50e2:	4770      	bx	lr
    50e4:	41004400 	.word	0x41004400

000050e8 <wireless_refresh>:
		vTaskDelay(xDelay);
	}
}

static void wireless_refresh(void *params)
{
    50e8:	b538      	push	{r3, r4, r5, lr}
	const uint16_t xDelay = 10;

	while(1)
	{
		SYS_TaskHandler();	//needs to run as often as possible for wireless stuffs
    50ea:	4d03      	ldr	r5, [pc, #12]	; (50f8 <wireless_refresh+0x10>)
		vTaskDelay(xDelay);
    50ec:	4c03      	ldr	r4, [pc, #12]	; (50fc <wireless_refresh+0x14>)
{
	const uint16_t xDelay = 10;

	while(1)
	{
		SYS_TaskHandler();	//needs to run as often as possible for wireless stuffs
    50ee:	47a8      	blx	r5
		vTaskDelay(xDelay);
    50f0:	200a      	movs	r0, #10
    50f2:	47a0      	blx	r4
    50f4:	e7fb      	b.n	50ee <wireless_refresh+0x6>
    50f6:	46c0      	nop			; (mov r8, r8)
    50f8:	000019e5 	.word	0x000019e5
    50fc:	00003955 	.word	0x00003955

00005100 <new_sensor_task>:
		vTaskDelay(xDelay);
	}
}

static void new_sensor_task(void *params)
{
    5100:	b538      	push	{r3, r4, r5, lr}
	//this task will periodically run and add any new temperature sensors that get connected
	const uint16_t xDelay = 1000;

	while(1)
	{
		vTaskDelay(xDelay);
    5102:	25fa      	movs	r5, #250	; 0xfa
    5104:	00ad      	lsls	r5, r5, #2
    5106:	4c02      	ldr	r4, [pc, #8]	; (5110 <new_sensor_task+0x10>)
    5108:	1c28      	adds	r0, r5, #0
    510a:	47a0      	blx	r4
    510c:	e7fc      	b.n	5108 <new_sensor_task+0x8>
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	00003955 	.word	0x00003955

00005114 <analyze_temp_data>:
		vTaskDelay(xDelay);
	}
}

static void analyze_temp_data(void *params)
{
    5114:	b5f0      	push	{r4, r5, r6, r7, lr}
    5116:	b083      	sub	sp, #12
	
	struct wireless_packet packet_received;

	while(1)
	{
		if(xQueueReceive(TEMP_QUEUE, &packet_received, 100))
    5118:	4e0b      	ldr	r6, [pc, #44]	; (5148 <analyze_temp_data+0x34>)
    511a:	4d0c      	ldr	r5, [pc, #48]	; (514c <analyze_temp_data+0x38>)
			roomTemp = packet_received.data;
    511c:	4f0c      	ldr	r7, [pc, #48]	; (5150 <analyze_temp_data+0x3c>)
	
	struct wireless_packet packet_received;

	while(1)
	{
		if(xQueueReceive(TEMP_QUEUE, &packet_received, 100))
    511e:	6830      	ldr	r0, [r6, #0]
    5120:	4669      	mov	r1, sp
    5122:	2264      	movs	r2, #100	; 0x64
    5124:	2300      	movs	r3, #0
    5126:	47a8      	blx	r5
    5128:	2800      	cmp	r0, #0
    512a:	d001      	beq.n	5130 <analyze_temp_data+0x1c>
			roomTemp = packet_received.data;
    512c:	9b00      	ldr	r3, [sp, #0]
    512e:	603b      	str	r3, [r7, #0]
			
		//debugging
		roomSelection++;
		roomSelection%=99;
    5130:	4c08      	ldr	r4, [pc, #32]	; (5154 <analyze_temp_data+0x40>)
	{
		if(xQueueReceive(TEMP_QUEUE, &packet_received, 100))
			roomTemp = packet_received.data;
			
		//debugging
		roomSelection++;
    5132:	6820      	ldr	r0, [r4, #0]
    5134:	3001      	adds	r0, #1
		roomSelection%=99;
    5136:	2163      	movs	r1, #99	; 0x63
    5138:	4b07      	ldr	r3, [pc, #28]	; (5158 <analyze_temp_data+0x44>)
    513a:	4798      	blx	r3
    513c:	6021      	str	r1, [r4, #0]
		
		/* Block for xDelay ms */
		vTaskDelay(xDelay);
    513e:	20fa      	movs	r0, #250	; 0xfa
    5140:	0040      	lsls	r0, r0, #1
    5142:	4b06      	ldr	r3, [pc, #24]	; (515c <analyze_temp_data+0x48>)
    5144:	4798      	blx	r3
	}
    5146:	e7ea      	b.n	511e <analyze_temp_data+0xa>
    5148:	200044d8 	.word	0x200044d8
    514c:	0000330d 	.word	0x0000330d
    5150:	20000028 	.word	0x20000028
    5154:	2000002c 	.word	0x2000002c
    5158:	000057d1 	.word	0x000057d1
    515c:	00003955 	.word	0x00003955

00005160 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	b082      	sub	sp, #8
    5164:	1c05      	adds	r5, r0, #0
    5166:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    5168:	2200      	movs	r2, #0
    516a:	466b      	mov	r3, sp
    516c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    516e:	4c06      	ldr	r4, [pc, #24]	; (5188 <usart_serial_getchar+0x28>)
    5170:	1c28      	adds	r0, r5, #0
    5172:	4669      	mov	r1, sp
    5174:	3106      	adds	r1, #6
    5176:	47a0      	blx	r4
    5178:	2800      	cmp	r0, #0
    517a:	d1f9      	bne.n	5170 <usart_serial_getchar+0x10>

	*c = temp;
    517c:	466b      	mov	r3, sp
    517e:	3306      	adds	r3, #6
    5180:	881b      	ldrh	r3, [r3, #0]
    5182:	7033      	strb	r3, [r6, #0]
}
    5184:	b002      	add	sp, #8
    5186:	bd70      	pop	{r4, r5, r6, pc}
    5188:	000040b9 	.word	0x000040b9

0000518c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    518c:	b570      	push	{r4, r5, r6, lr}
    518e:	1c06      	adds	r6, r0, #0
    5190:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    5192:	4c03      	ldr	r4, [pc, #12]	; (51a0 <usart_serial_putchar+0x14>)
    5194:	1c30      	adds	r0, r6, #0
    5196:	1c29      	adds	r1, r5, #0
    5198:	47a0      	blx	r4
    519a:	2800      	cmp	r0, #0
    519c:	d1fa      	bne.n	5194 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    519e:	bd70      	pop	{r4, r5, r6, pc}
    51a0:	0000408d 	.word	0x0000408d

000051a4 <extint_callback>:

/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */
static void extint_callback(void)
{
    51a4:	b508      	push	{r3, lr}
	roomTemp++;
    51a6:	4b04      	ldr	r3, [pc, #16]	; (51b8 <extint_callback+0x14>)
    51a8:	681a      	ldr	r2, [r3, #0]
    51aa:	3201      	adds	r2, #1
    51ac:	601a      	str	r2, [r3, #0]
	//dataToSend.data = 1;
	//dataToSend.dst_addr = REGISTER_ADDR;
	//dataToSend.sender_addr = APP_ADDR;
	//dataToSend.size = sizeof(char);
	//send_packet(dataToSend);
	printf("button");
    51ae:	4803      	ldr	r0, [pc, #12]	; (51bc <extint_callback+0x18>)
    51b0:	4b03      	ldr	r3, [pc, #12]	; (51c0 <extint_callback+0x1c>)
    51b2:	4798      	blx	r3
}
    51b4:	bd08      	pop	{r3, pc}
    51b6:	46c0      	nop			; (mov r8, r8)
    51b8:	20000028 	.word	0x20000028
    51bc:	000068d0 	.word	0x000068d0
    51c0:	0000589d 	.word	0x0000589d

000051c4 <updateDisplay>:
	stdio_serial_init(&cdc_uart_module, USART_HOST, &usart_conf);
	usart_enable(&cdc_uart_module);
}

void updateDisplay(void)
{
    51c4:	b510      	push	{r4, lr}
    51c6:	b084      	sub	sp, #16
	//clear the display
	//set cursor to beginning
	putchar(254);
    51c8:	4b35      	ldr	r3, [pc, #212]	; (52a0 <updateDisplay+0xdc>)
    51ca:	6818      	ldr	r0, [r3, #0]
    51cc:	6882      	ldr	r2, [r0, #8]
    51ce:	6893      	ldr	r3, [r2, #8]
    51d0:	3b01      	subs	r3, #1
    51d2:	6093      	str	r3, [r2, #8]
    51d4:	2b00      	cmp	r3, #0
    51d6:	da19      	bge.n	520c <updateDisplay+0x48>
    51d8:	6882      	ldr	r2, [r0, #8]
    51da:	6891      	ldr	r1, [r2, #8]
    51dc:	6993      	ldr	r3, [r2, #24]
    51de:	4299      	cmp	r1, r3
    51e0:	db10      	blt.n	5204 <updateDisplay+0x40>
    51e2:	6813      	ldr	r3, [r2, #0]
    51e4:	22fe      	movs	r2, #254	; 0xfe
    51e6:	701a      	strb	r2, [r3, #0]
    51e8:	4b2d      	ldr	r3, [pc, #180]	; (52a0 <updateDisplay+0xdc>)
    51ea:	6818      	ldr	r0, [r3, #0]
    51ec:	6882      	ldr	r2, [r0, #8]
    51ee:	6813      	ldr	r3, [r2, #0]
    51f0:	7819      	ldrb	r1, [r3, #0]
    51f2:	290a      	cmp	r1, #10
    51f4:	d002      	beq.n	51fc <updateDisplay+0x38>
    51f6:	3301      	adds	r3, #1
    51f8:	6013      	str	r3, [r2, #0]
    51fa:	e011      	b.n	5220 <updateDisplay+0x5c>
    51fc:	210a      	movs	r1, #10
    51fe:	4b29      	ldr	r3, [pc, #164]	; (52a4 <updateDisplay+0xe0>)
    5200:	4798      	blx	r3
    5202:	e00d      	b.n	5220 <updateDisplay+0x5c>
    5204:	21fe      	movs	r1, #254	; 0xfe
    5206:	4b27      	ldr	r3, [pc, #156]	; (52a4 <updateDisplay+0xe0>)
    5208:	4798      	blx	r3
    520a:	e009      	b.n	5220 <updateDisplay+0x5c>
    520c:	6883      	ldr	r3, [r0, #8]
    520e:	681b      	ldr	r3, [r3, #0]
    5210:	22fe      	movs	r2, #254	; 0xfe
    5212:	701a      	strb	r2, [r3, #0]
    5214:	4b22      	ldr	r3, [pc, #136]	; (52a0 <updateDisplay+0xdc>)
    5216:	681b      	ldr	r3, [r3, #0]
    5218:	689b      	ldr	r3, [r3, #8]
    521a:	681a      	ldr	r2, [r3, #0]
    521c:	3201      	adds	r2, #1
    521e:	601a      	str	r2, [r3, #0]
	putchar(128);
    5220:	4b1f      	ldr	r3, [pc, #124]	; (52a0 <updateDisplay+0xdc>)
    5222:	6818      	ldr	r0, [r3, #0]
    5224:	6882      	ldr	r2, [r0, #8]
    5226:	6893      	ldr	r3, [r2, #8]
    5228:	3b01      	subs	r3, #1
    522a:	6093      	str	r3, [r2, #8]
    522c:	2b00      	cmp	r3, #0
    522e:	da19      	bge.n	5264 <updateDisplay+0xa0>
    5230:	6882      	ldr	r2, [r0, #8]
    5232:	6891      	ldr	r1, [r2, #8]
    5234:	6993      	ldr	r3, [r2, #24]
    5236:	4299      	cmp	r1, r3
    5238:	db10      	blt.n	525c <updateDisplay+0x98>
    523a:	6813      	ldr	r3, [r2, #0]
    523c:	2280      	movs	r2, #128	; 0x80
    523e:	701a      	strb	r2, [r3, #0]
    5240:	4b17      	ldr	r3, [pc, #92]	; (52a0 <updateDisplay+0xdc>)
    5242:	6818      	ldr	r0, [r3, #0]
    5244:	6882      	ldr	r2, [r0, #8]
    5246:	6813      	ldr	r3, [r2, #0]
    5248:	7819      	ldrb	r1, [r3, #0]
    524a:	290a      	cmp	r1, #10
    524c:	d002      	beq.n	5254 <updateDisplay+0x90>
    524e:	3301      	adds	r3, #1
    5250:	6013      	str	r3, [r2, #0]
    5252:	e011      	b.n	5278 <updateDisplay+0xb4>
    5254:	210a      	movs	r1, #10
    5256:	4b13      	ldr	r3, [pc, #76]	; (52a4 <updateDisplay+0xe0>)
    5258:	4798      	blx	r3
    525a:	e00d      	b.n	5278 <updateDisplay+0xb4>
    525c:	2180      	movs	r1, #128	; 0x80
    525e:	4b11      	ldr	r3, [pc, #68]	; (52a4 <updateDisplay+0xe0>)
    5260:	4798      	blx	r3
    5262:	e009      	b.n	5278 <updateDisplay+0xb4>
    5264:	6883      	ldr	r3, [r0, #8]
    5266:	681b      	ldr	r3, [r3, #0]
    5268:	2280      	movs	r2, #128	; 0x80
    526a:	701a      	strb	r2, [r3, #0]
    526c:	4b0c      	ldr	r3, [pc, #48]	; (52a0 <updateDisplay+0xdc>)
    526e:	681b      	ldr	r3, [r3, #0]
    5270:	689b      	ldr	r3, [r3, #8]
    5272:	681a      	ldr	r2, [r3, #0]
    5274:	3201      	adds	r2, #1
    5276:	601a      	str	r2, [r3, #0]
	//update display
	printf("Mode:%s  Rm:%2dTarget:%2d%c %2d%c %c", mode, roomSelection, targetTemp, degree, roomTemp, degree, ventStatus);
    5278:	4b0b      	ldr	r3, [pc, #44]	; (52a8 <updateDisplay+0xe4>)
    527a:	7819      	ldrb	r1, [r3, #0]
    527c:	4b0b      	ldr	r3, [pc, #44]	; (52ac <updateDisplay+0xe8>)
    527e:	681a      	ldr	r2, [r3, #0]
    5280:	4b0b      	ldr	r3, [pc, #44]	; (52b0 <updateDisplay+0xec>)
    5282:	681b      	ldr	r3, [r3, #0]
    5284:	9100      	str	r1, [sp, #0]
    5286:	480b      	ldr	r0, [pc, #44]	; (52b4 <updateDisplay+0xf0>)
    5288:	6800      	ldr	r0, [r0, #0]
    528a:	9001      	str	r0, [sp, #4]
    528c:	9102      	str	r1, [sp, #8]
    528e:	490a      	ldr	r1, [pc, #40]	; (52b8 <updateDisplay+0xf4>)
    5290:	7809      	ldrb	r1, [r1, #0]
    5292:	9103      	str	r1, [sp, #12]
    5294:	4809      	ldr	r0, [pc, #36]	; (52bc <updateDisplay+0xf8>)
    5296:	490a      	ldr	r1, [pc, #40]	; (52c0 <updateDisplay+0xfc>)
    5298:	4c0a      	ldr	r4, [pc, #40]	; (52c4 <updateDisplay+0x100>)
    529a:	47a0      	blx	r4
}
    529c:	b004      	add	sp, #16
    529e:	bd10      	pop	{r4, pc}
    52a0:	20000094 	.word	0x20000094
    52a4:	00005fdd 	.word	0x00005fdd
    52a8:	20000030 	.word	0x20000030
    52ac:	2000002c 	.word	0x2000002c
    52b0:	20000018 	.word	0x20000018
    52b4:	20000028 	.word	0x20000028
    52b8:	2000001c 	.word	0x2000001c
    52bc:	000068d8 	.word	0x000068d8
    52c0:	20000020 	.word	0x20000020
    52c4:	0000589d 	.word	0x0000589d

000052c8 <lcd_task>:
}

//Tasks

static void lcd_task(void *params)
{
    52c8:	b538      	push	{r3, r4, r5, lr}
	const uint16_t xDelay = 250;
	while(1)
	{
		updateDisplay();
    52ca:	4d03      	ldr	r5, [pc, #12]	; (52d8 <lcd_task+0x10>)
		
		vTaskDelay(xDelay);
    52cc:	4c03      	ldr	r4, [pc, #12]	; (52dc <lcd_task+0x14>)
static void lcd_task(void *params)
{
	const uint16_t xDelay = 250;
	while(1)
	{
		updateDisplay();
    52ce:	47a8      	blx	r5
		
		vTaskDelay(xDelay);
    52d0:	20fa      	movs	r0, #250	; 0xfa
    52d2:	47a0      	blx	r4
    52d4:	e7fb      	b.n	52ce <lcd_task+0x6>
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	000051c5 	.word	0x000051c5
    52dc:	00003955 	.word	0x00003955

000052e0 <wireless_init>:
	//update display
	printf("Mode:%s  Rm:%2dTarget:%2d%c %2d%c %c", mode, roomSelection, targetTemp, degree, roomTemp, degree, ventStatus);
}

void wireless_init(void)
{
    52e0:	b508      	push	{r3, lr}
	NWK_SetAddr(APP_ADDR);
    52e2:	2000      	movs	r0, #0
    52e4:	4b08      	ldr	r3, [pc, #32]	; (5308 <wireless_init+0x28>)
    52e6:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    52e8:	4808      	ldr	r0, [pc, #32]	; (530c <wireless_init+0x2c>)
    52ea:	4b09      	ldr	r3, [pc, #36]	; (5310 <wireless_init+0x30>)
    52ec:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    52ee:	200f      	movs	r0, #15
    52f0:	4b08      	ldr	r3, [pc, #32]	; (5314 <wireless_init+0x34>)
    52f2:	4798      	blx	r3
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    52f4:	2001      	movs	r0, #1
    52f6:	4b08      	ldr	r3, [pc, #32]	; (5318 <wireless_init+0x38>)
    52f8:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    52fa:	2023      	movs	r0, #35	; 0x23
    52fc:	4b07      	ldr	r3, [pc, #28]	; (531c <wireless_init+0x3c>)
    52fe:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    5300:	4807      	ldr	r0, [pc, #28]	; (5320 <wireless_init+0x40>)
    5302:	4b08      	ldr	r3, [pc, #32]	; (5324 <wireless_init+0x44>)
    5304:	4798      	blx	r3
	//NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
}
    5306:	bd08      	pop	{r3, pc}
    5308:	00001e7d 	.word	0x00001e7d
    530c:	00004567 	.word	0x00004567
    5310:	00001e91 	.word	0x00001e91
    5314:	00001c61 	.word	0x00001c61
    5318:	00001c4d 	.word	0x00001c4d
    531c:	00001cd1 	.word	0x00001cd1
    5320:	00006900 	.word	0x00006900
    5324:	000029e5 	.word	0x000029e5

00005328 <send_packet>:

//We will need to sent the struct of the payload and know where to send it to
// TODO: Change the endpoint, destination addr, and the data payload to send
void send_packet(struct wireless_packet packet)
{
    5328:	b500      	push	{lr}
    532a:	b083      	sub	sp, #12
    532c:	0a0a      	lsrs	r2, r1, #8
    532e:	b2d2      	uxtb	r2, r2
	//NWK_DataReq_t appDataReq;

	appDataReq.dstAddr = packet.dst_addr;
    5330:	4b07      	ldr	r3, [pc, #28]	; (5350 <send_packet+0x28>)
    5332:	815a      	strh	r2, [r3, #10]
	appDataReq.dstEndpoint = packet.dst_addr;
    5334:	731a      	strb	r2, [r3, #12]
	appDataReq.srcEndpoint = APP_ENDPOINT;
    5336:	2201      	movs	r2, #1
    5338:	735a      	strb	r2, [r3, #13]
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    533a:	2202      	movs	r2, #2
    533c:	739a      	strb	r2, [r3, #14]
	appDataReq.data = packet.data;
    533e:	6118      	str	r0, [r3, #16]
	appDataReq.size = packet.size;
    5340:	7519      	strb	r1, [r3, #20]
	appDataReq.confirm = send_packet_conf;
    5342:	4a04      	ldr	r2, [pc, #16]	; (5354 <send_packet+0x2c>)
    5344:	619a      	str	r2, [r3, #24]
	NWK_DataReq(&appDataReq);
    5346:	1c18      	adds	r0, r3, #0
    5348:	4b03      	ldr	r3, [pc, #12]	; (5358 <send_packet+0x30>)
    534a:	4798      	blx	r3

}
    534c:	b003      	add	sp, #12
    534e:	bd00      	pop	{pc}
    5350:	200042f4 	.word	0x200042f4
    5354:	000050d5 	.word	0x000050d5
    5358:	00001f25 	.word	0x00001f25

0000535c <main>:
static void configure_eic_callback(void);			//button press stuff
static void extint_callback(void);					//button press stuff
static void configure_extint(void);					//button press stuff

int main (void)
{
    535c:	b5f0      	push	{r4, r5, r6, r7, lr}
    535e:	464f      	mov	r7, r9
    5360:	4646      	mov	r6, r8
    5362:	b4c0      	push	{r6, r7}
    5364:	b097      	sub	sp, #92	; 0x5c
	irq_initialize_vectors();
	system_init();
    5366:	4b63      	ldr	r3, [pc, #396]	; (54f4 <main+0x198>)
    5368:	4798      	blx	r3
	delay_init();
    536a:	4b63      	ldr	r3, [pc, #396]	; (54f8 <main+0x19c>)
    536c:	4798      	blx	r3
	//board_init();
	//wireless_sys_init();
	SYS_Init();
    536e:	4b63      	ldr	r3, [pc, #396]	; (54fc <main+0x1a0>)
    5370:	4798      	blx	r3
	wireless_init();
    5372:	4b63      	ldr	r3, [pc, #396]	; (5500 <main+0x1a4>)
    5374:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5376:	aa04      	add	r2, sp, #16
    5378:	2380      	movs	r3, #128	; 0x80
    537a:	05db      	lsls	r3, r3, #23
    537c:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    537e:	2300      	movs	r3, #0
    5380:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    5382:	21ff      	movs	r1, #255	; 0xff
    5384:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    5386:	2100      	movs	r1, #0
    5388:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    538a:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    538c:	2096      	movs	r0, #150	; 0x96
    538e:	0180      	lsls	r0, r0, #6
    5390:	6210      	str	r0, [r2, #32]
	config->receiver_enable  = true;
    5392:	2601      	movs	r6, #1
    5394:	2024      	movs	r0, #36	; 0x24
    5396:	5416      	strb	r6, [r2, r0]
	config->transmitter_enable = true;
    5398:	2025      	movs	r0, #37	; 0x25
    539a:	5416      	strb	r6, [r2, r0]
	config->clock_polarity_inverted = false;
    539c:	2026      	movs	r0, #38	; 0x26
    539e:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    53a0:	2027      	movs	r0, #39	; 0x27
    53a2:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    53a4:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    53a6:	202c      	movs	r0, #44	; 0x2c
    53a8:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    53aa:	202d      	movs	r0, #45	; 0x2d
    53ac:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    53ae:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    53b0:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    53b2:	76d3      	strb	r3, [r2, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    53b4:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    53b6:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    53b8:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                        = 19;
    53ba:	2313      	movs	r3, #19
    53bc:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    53be:	7751      	strb	r1, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    53c0:	2380      	movs	r3, #128	; 0x80
    53c2:	035b      	lsls	r3, r3, #13
    53c4:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    53c6:	4b4f      	ldr	r3, [pc, #316]	; (5504 <main+0x1a8>)
    53c8:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    53ca:	4b4f      	ldr	r3, [pc, #316]	; (5508 <main+0x1ac>)
    53cc:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    53ce:	2301      	movs	r3, #1
    53d0:	425b      	negs	r3, r3
    53d2:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    53d4:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    53d6:	4c4d      	ldr	r4, [pc, #308]	; (550c <main+0x1b0>)
    53d8:	4b4d      	ldr	r3, [pc, #308]	; (5510 <main+0x1b4>)
    53da:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    53dc:	494d      	ldr	r1, [pc, #308]	; (5514 <main+0x1b8>)
    53de:	4b4e      	ldr	r3, [pc, #312]	; (5518 <main+0x1bc>)
    53e0:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    53e2:	494e      	ldr	r1, [pc, #312]	; (551c <main+0x1c0>)
    53e4:	4b4e      	ldr	r3, [pc, #312]	; (5520 <main+0x1c4>)
    53e6:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    53e8:	1c20      	adds	r0, r4, #0
    53ea:	494e      	ldr	r1, [pc, #312]	; (5524 <main+0x1c8>)
    53ec:	4b4e      	ldr	r3, [pc, #312]	; (5528 <main+0x1cc>)
    53ee:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    53f0:	4f4e      	ldr	r7, [pc, #312]	; (552c <main+0x1d0>)
    53f2:	683b      	ldr	r3, [r7, #0]
    53f4:	6898      	ldr	r0, [r3, #8]
    53f6:	2100      	movs	r1, #0
    53f8:	4d4d      	ldr	r5, [pc, #308]	; (5530 <main+0x1d4>)
    53fa:	47a8      	blx	r5
	setbuf(stdin, NULL);
    53fc:	683b      	ldr	r3, [r7, #0]
    53fe:	6858      	ldr	r0, [r3, #4]
    5400:	2100      	movs	r1, #0
    5402:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5404:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5406:	1c28      	adds	r0, r5, #0
    5408:	4b4a      	ldr	r3, [pc, #296]	; (5534 <main+0x1d8>)
    540a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    540c:	231f      	movs	r3, #31
    540e:	4018      	ands	r0, r3
    5410:	4086      	lsls	r6, r0
    5412:	4b49      	ldr	r3, [pc, #292]	; (5538 <main+0x1dc>)
    5414:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5416:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5418:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    541a:	2a00      	cmp	r2, #0
    541c:	d1fc      	bne.n	5418 <main+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    541e:	682b      	ldr	r3, [r5, #0]
    5420:	2202      	movs	r2, #2
    5422:	4691      	mov	r9, r2
    5424:	4313      	orrs	r3, r2
    5426:	602b      	str	r3, [r5, #0]
 *  button state.
 */
static void configure_extint(void)
{
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    5428:	ae04      	add	r6, sp, #16
    542a:	1c30      	adds	r0, r6, #0
    542c:	4b43      	ldr	r3, [pc, #268]	; (553c <main+0x1e0>)
    542e:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    5430:	231c      	movs	r3, #28
    5432:	9304      	str	r3, [sp, #16]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    5434:	2400      	movs	r4, #0
    5436:	6074      	str	r4, [r6, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    5438:	2303      	movs	r3, #3
    543a:	4698      	mov	r8, r3
    543c:	72f3      	strb	r3, [r6, #11]
	eint_chan_conf.filter_input_signal = true;
    543e:	2501      	movs	r5, #1
    5440:	72b5      	strb	r5, [r6, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    5442:	2008      	movs	r0, #8
    5444:	1c31      	adds	r1, r6, #0
    5446:	4b3e      	ldr	r3, [pc, #248]	; (5540 <main+0x1e4>)
    5448:	4798      	blx	r3
/** Configures and registers the External Interrupt callback function with the
 *  driver.
 */
static void configure_eic_callback(void)
{
	extint_register_callback(extint_callback,
    544a:	483e      	ldr	r0, [pc, #248]	; (5544 <main+0x1e8>)
    544c:	2108      	movs	r1, #8
    544e:	2200      	movs	r2, #0
    5450:	4b3d      	ldr	r3, [pc, #244]	; (5548 <main+0x1ec>)
    5452:	4798      	blx	r3
			BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    5454:	2008      	movs	r0, #8
    5456:	2100      	movs	r1, #0
    5458:	4b3c      	ldr	r3, [pc, #240]	; (554c <main+0x1f0>)
    545a:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    545c:	4e3c      	ldr	r6, [pc, #240]	; (5550 <main+0x1f4>)
    545e:	7035      	strb	r5, [r6, #0]
    5460:	f3bf 8f5f 	dmb	sy
    5464:	b662      	cpsie	i
	wireless_init();
	configure_console();
	configure_extint();
	configure_eic_callback();
	system_interrupt_enable_global();
	TEMP_QUEUE = xQueueCreate( 15, sizeof(struct wireless_packet) );
    5466:	200f      	movs	r0, #15
    5468:	2108      	movs	r1, #8
    546a:	2200      	movs	r2, #0
    546c:	4f39      	ldr	r7, [pc, #228]	; (5554 <main+0x1f8>)
    546e:	47b8      	blx	r7
    5470:	4b39      	ldr	r3, [pc, #228]	; (5558 <main+0x1fc>)
    5472:	6018      	str	r0, [r3, #0]
	REGISTER_QUEUE = xQueueCreate( 15, sizeof(struct wireless_packet) );
    5474:	200f      	movs	r0, #15
    5476:	2108      	movs	r1, #8
    5478:	2200      	movs	r2, #0
    547a:	47b8      	blx	r7
    547c:	4b37      	ldr	r3, [pc, #220]	; (555c <main+0x200>)
    547e:	6018      	str	r0, [r3, #0]
	taskENABLE_INTERRUPTS();
    5480:	b662      	cpsie	i
	cpu_irq_enable();
    5482:	7035      	strb	r5, [r6, #0]
    5484:	f3bf 8f5f 	dmb	sy
    5488:	b662      	cpsie	i

	
	xTaskCreate(lcd_task,
    548a:	2780      	movs	r7, #128	; 0x80
    548c:	00bf      	lsls	r7, r7, #2
    548e:	464b      	mov	r3, r9
    5490:	9300      	str	r3, [sp, #0]
    5492:	9401      	str	r4, [sp, #4]
    5494:	9402      	str	r4, [sp, #8]
    5496:	9403      	str	r4, [sp, #12]
    5498:	4831      	ldr	r0, [pc, #196]	; (5560 <main+0x204>)
    549a:	4932      	ldr	r1, [pc, #200]	; (5564 <main+0x208>)
    549c:	1c3a      	adds	r2, r7, #0
    549e:	2300      	movs	r3, #0
    54a0:	4e31      	ldr	r6, [pc, #196]	; (5568 <main+0x20c>)
    54a2:	47b0      	blx	r6
		512,
		NULL,
		2,
		NULL);

	xTaskCreate(analyze_temp_data,
    54a4:	9500      	str	r5, [sp, #0]
    54a6:	9401      	str	r4, [sp, #4]
    54a8:	9402      	str	r4, [sp, #8]
    54aa:	9403      	str	r4, [sp, #12]
    54ac:	482f      	ldr	r0, [pc, #188]	; (556c <main+0x210>)
    54ae:	4930      	ldr	r1, [pc, #192]	; (5570 <main+0x214>)
    54b0:	2280      	movs	r2, #128	; 0x80
    54b2:	00d2      	lsls	r2, r2, #3
    54b4:	2300      	movs	r3, #0
    54b6:	47b0      	blx	r6
		1024,
		NULL,
		1,
		NULL);

	 xTaskCreate(new_sensor_task,
    54b8:	9500      	str	r5, [sp, #0]
    54ba:	9401      	str	r4, [sp, #4]
    54bc:	9402      	str	r4, [sp, #8]
    54be:	9403      	str	r4, [sp, #12]
    54c0:	482c      	ldr	r0, [pc, #176]	; (5574 <main+0x218>)
    54c2:	492d      	ldr	r1, [pc, #180]	; (5578 <main+0x21c>)
    54c4:	1c3a      	adds	r2, r7, #0
    54c6:	2300      	movs	r3, #0
    54c8:	47b0      	blx	r6
	 	512,
	 	NULL,
	 	1,
	 	NULL);

	xTaskCreate(wireless_refresh,
    54ca:	9500      	str	r5, [sp, #0]
    54cc:	9401      	str	r4, [sp, #4]
    54ce:	9402      	str	r4, [sp, #8]
    54d0:	9403      	str	r4, [sp, #12]
    54d2:	482a      	ldr	r0, [pc, #168]	; (557c <main+0x220>)
    54d4:	492a      	ldr	r1, [pc, #168]	; (5580 <main+0x224>)
    54d6:	1c3a      	adds	r2, r7, #0
    54d8:	2300      	movs	r3, #0
    54da:	47b0      	blx	r6
	
	//vTaskStartScheduler();
	
	struct wireless_packet dataToSend;
	
	dataToSend.data = 1;
    54dc:	ab14      	add	r3, sp, #80	; 0x50
	dataToSend.dst_addr = REGISTER_ADDR;
    54de:	4642      	mov	r2, r8
    54e0:	715a      	strb	r2, [r3, #5]
	dataToSend.sender_addr = APP_ADDR;
    54e2:	719c      	strb	r4, [r3, #6]
	dataToSend.size = sizeof(char);
    54e4:	711d      	strb	r5, [r3, #4]
	send_packet(dataToSend);
    54e6:	2001      	movs	r0, #1
    54e8:	9915      	ldr	r1, [sp, #84]	; 0x54
    54ea:	4b26      	ldr	r3, [pc, #152]	; (5584 <main+0x228>)
    54ec:	4798      	blx	r3
	
	while(1){
		SYS_TaskHandler();
    54ee:	4c26      	ldr	r4, [pc, #152]	; (5588 <main+0x22c>)
    54f0:	47a0      	blx	r4
    54f2:	e7fd      	b.n	54f0 <main+0x194>
    54f4:	00004fcd 	.word	0x00004fcd
    54f8:	00004959 	.word	0x00004959
    54fc:	000019c1 	.word	0x000019c1
    5500:	000052e1 	.word	0x000052e1
    5504:	00040003 	.word	0x00040003
    5508:	00050003 	.word	0x00050003
    550c:	200042c0 	.word	0x200042c0
    5510:	20004378 	.word	0x20004378
    5514:	0000518d 	.word	0x0000518d
    5518:	20004374 	.word	0x20004374
    551c:	00005161 	.word	0x00005161
    5520:	20004370 	.word	0x20004370
    5524:	42000800 	.word	0x42000800
    5528:	00003d85 	.word	0x00003d85
    552c:	20000094 	.word	0x20000094
    5530:	00005949 	.word	0x00005949
    5534:	000047f1 	.word	0x000047f1
    5538:	e000e100 	.word	0xe000e100
    553c:	0000019d 	.word	0x0000019d
    5540:	000001b1 	.word	0x000001b1
    5544:	000051a5 	.word	0x000051a5
    5548:	0000487d 	.word	0x0000487d
    554c:	000048ad 	.word	0x000048ad
    5550:	20000014 	.word	0x20000014
    5554:	000032b5 	.word	0x000032b5
    5558:	200044d8 	.word	0x200044d8
    555c:	200044dc 	.word	0x200044dc
    5560:	000052c9 	.word	0x000052c9
    5564:	00006914 	.word	0x00006914
    5568:	0000351d 	.word	0x0000351d
    556c:	00005115 	.word	0x00005115
    5570:	00006918 	.word	0x00006918
    5574:	00005101 	.word	0x00005101
    5578:	0000692c 	.word	0x0000692c
    557c:	000050e9 	.word	0x000050e9
    5580:	00006938 	.word	0x00006938
    5584:	00005329 	.word	0x00005329
    5588:	000019e5 	.word	0x000019e5

0000558c <common_tc_delay>:
    558c:	b510      	push	{r4, lr}
    558e:	1c04      	adds	r4, r0, #0
    5590:	4b13      	ldr	r3, [pc, #76]	; (55e0 <common_tc_delay+0x54>)
    5592:	4798      	blx	r3
    5594:	4b13      	ldr	r3, [pc, #76]	; (55e4 <common_tc_delay+0x58>)
    5596:	781a      	ldrb	r2, [r3, #0]
    5598:	4362      	muls	r2, r4
    559a:	1881      	adds	r1, r0, r2
    559c:	4b12      	ldr	r3, [pc, #72]	; (55e8 <common_tc_delay+0x5c>)
    559e:	6059      	str	r1, [r3, #4]
    55a0:	6859      	ldr	r1, [r3, #4]
    55a2:	0c09      	lsrs	r1, r1, #16
    55a4:	6059      	str	r1, [r3, #4]
    55a6:	685b      	ldr	r3, [r3, #4]
    55a8:	2b00      	cmp	r3, #0
    55aa:	d007      	beq.n	55bc <common_tc_delay+0x30>
    55ac:	4b0e      	ldr	r3, [pc, #56]	; (55e8 <common_tc_delay+0x5c>)
    55ae:	6859      	ldr	r1, [r3, #4]
    55b0:	3201      	adds	r2, #1
    55b2:	1880      	adds	r0, r0, r2
    55b4:	8118      	strh	r0, [r3, #8]
    55b6:	4b0d      	ldr	r3, [pc, #52]	; (55ec <common_tc_delay+0x60>)
    55b8:	4798      	blx	r3
    55ba:	e004      	b.n	55c6 <common_tc_delay+0x3a>
    55bc:	1882      	adds	r2, r0, r2
    55be:	4b0a      	ldr	r3, [pc, #40]	; (55e8 <common_tc_delay+0x5c>)
    55c0:	811a      	strh	r2, [r3, #8]
    55c2:	4b0b      	ldr	r3, [pc, #44]	; (55f0 <common_tc_delay+0x64>)
    55c4:	4798      	blx	r3
    55c6:	4b08      	ldr	r3, [pc, #32]	; (55e8 <common_tc_delay+0x5c>)
    55c8:	891b      	ldrh	r3, [r3, #8]
    55ca:	2b63      	cmp	r3, #99	; 0x63
    55cc:	d802      	bhi.n	55d4 <common_tc_delay+0x48>
    55ce:	3364      	adds	r3, #100	; 0x64
    55d0:	4a05      	ldr	r2, [pc, #20]	; (55e8 <common_tc_delay+0x5c>)
    55d2:	8113      	strh	r3, [r2, #8]
    55d4:	4b04      	ldr	r3, [pc, #16]	; (55e8 <common_tc_delay+0x5c>)
    55d6:	8918      	ldrh	r0, [r3, #8]
    55d8:	4b06      	ldr	r3, [pc, #24]	; (55f4 <common_tc_delay+0x68>)
    55da:	4798      	blx	r3
    55dc:	bd10      	pop	{r4, pc}
    55de:	46c0      	nop			; (mov r8, r8)
    55e0:	00001851 	.word	0x00001851
    55e4:	200044e0 	.word	0x200044e0
    55e8:	20004314 	.word	0x20004314
    55ec:	00001865 	.word	0x00001865
    55f0:	00001879 	.word	0x00001879
    55f4:	000018b5 	.word	0x000018b5

000055f8 <common_tc_init>:
    55f8:	b508      	push	{r3, lr}
    55fa:	2200      	movs	r2, #0
    55fc:	4b03      	ldr	r3, [pc, #12]	; (560c <common_tc_init+0x14>)
    55fe:	701a      	strb	r2, [r3, #0]
    5600:	4b03      	ldr	r3, [pc, #12]	; (5610 <common_tc_init+0x18>)
    5602:	4798      	blx	r3
    5604:	4b03      	ldr	r3, [pc, #12]	; (5614 <common_tc_init+0x1c>)
    5606:	7018      	strb	r0, [r3, #0]
    5608:	bd08      	pop	{r3, pc}
    560a:	46c0      	nop			; (mov r8, r8)
    560c:	20004314 	.word	0x20004314
    5610:	000018cd 	.word	0x000018cd
    5614:	200044e0 	.word	0x200044e0

00005618 <tmr_ovf_callback>:
    5618:	b508      	push	{r3, lr}
    561a:	4b0e      	ldr	r3, [pc, #56]	; (5654 <tmr_ovf_callback+0x3c>)
    561c:	685b      	ldr	r3, [r3, #4]
    561e:	2b00      	cmp	r3, #0
    5620:	d007      	beq.n	5632 <tmr_ovf_callback+0x1a>
    5622:	4a0c      	ldr	r2, [pc, #48]	; (5654 <tmr_ovf_callback+0x3c>)
    5624:	6853      	ldr	r3, [r2, #4]
    5626:	3b01      	subs	r3, #1
    5628:	6053      	str	r3, [r2, #4]
    562a:	2b00      	cmp	r3, #0
    562c:	d101      	bne.n	5632 <tmr_ovf_callback+0x1a>
    562e:	4b0a      	ldr	r3, [pc, #40]	; (5658 <tmr_ovf_callback+0x40>)
    5630:	4798      	blx	r3
    5632:	4a08      	ldr	r2, [pc, #32]	; (5654 <tmr_ovf_callback+0x3c>)
    5634:	7813      	ldrb	r3, [r2, #0]
    5636:	3301      	adds	r3, #1
    5638:	b2db      	uxtb	r3, r3
    563a:	7013      	strb	r3, [r2, #0]
    563c:	4a07      	ldr	r2, [pc, #28]	; (565c <tmr_ovf_callback+0x44>)
    563e:	7812      	ldrb	r2, [r2, #0]
    5640:	429a      	cmp	r2, r3
    5642:	d806      	bhi.n	5652 <tmr_ovf_callback+0x3a>
    5644:	4b03      	ldr	r3, [pc, #12]	; (5654 <tmr_ovf_callback+0x3c>)
    5646:	2200      	movs	r2, #0
    5648:	701a      	strb	r2, [r3, #0]
    564a:	68db      	ldr	r3, [r3, #12]
    564c:	2b00      	cmp	r3, #0
    564e:	d000      	beq.n	5652 <tmr_ovf_callback+0x3a>
    5650:	4798      	blx	r3
    5652:	bd08      	pop	{r3, pc}
    5654:	20004314 	.word	0x20004314
    5658:	00001879 	.word	0x00001879
    565c:	200044e0 	.word	0x200044e0

00005660 <tmr_cca_callback>:
    5660:	b508      	push	{r3, lr}
    5662:	4b04      	ldr	r3, [pc, #16]	; (5674 <tmr_cca_callback+0x14>)
    5664:	4798      	blx	r3
    5666:	4b04      	ldr	r3, [pc, #16]	; (5678 <tmr_cca_callback+0x18>)
    5668:	691b      	ldr	r3, [r3, #16]
    566a:	2b00      	cmp	r3, #0
    566c:	d000      	beq.n	5670 <tmr_cca_callback+0x10>
    566e:	4798      	blx	r3
    5670:	bd08      	pop	{r3, pc}
    5672:	46c0      	nop			; (mov r8, r8)
    5674:	00001865 	.word	0x00001865
    5678:	20004314 	.word	0x20004314

0000567c <set_common_tc_expiry_callback>:
    567c:	4b01      	ldr	r3, [pc, #4]	; (5684 <set_common_tc_expiry_callback+0x8>)
    567e:	6118      	str	r0, [r3, #16]
    5680:	4770      	bx	lr
    5682:	46c0      	nop			; (mov r8, r8)
    5684:	20004314 	.word	0x20004314

00005688 <__aeabi_uidiv>:
    5688:	2900      	cmp	r1, #0
    568a:	d034      	beq.n	56f6 <.udivsi3_skip_div0_test+0x6a>

0000568c <.udivsi3_skip_div0_test>:
    568c:	2301      	movs	r3, #1
    568e:	2200      	movs	r2, #0
    5690:	b410      	push	{r4}
    5692:	4288      	cmp	r0, r1
    5694:	d32c      	bcc.n	56f0 <.udivsi3_skip_div0_test+0x64>
    5696:	2401      	movs	r4, #1
    5698:	0724      	lsls	r4, r4, #28
    569a:	42a1      	cmp	r1, r4
    569c:	d204      	bcs.n	56a8 <.udivsi3_skip_div0_test+0x1c>
    569e:	4281      	cmp	r1, r0
    56a0:	d202      	bcs.n	56a8 <.udivsi3_skip_div0_test+0x1c>
    56a2:	0109      	lsls	r1, r1, #4
    56a4:	011b      	lsls	r3, r3, #4
    56a6:	e7f8      	b.n	569a <.udivsi3_skip_div0_test+0xe>
    56a8:	00e4      	lsls	r4, r4, #3
    56aa:	42a1      	cmp	r1, r4
    56ac:	d204      	bcs.n	56b8 <.udivsi3_skip_div0_test+0x2c>
    56ae:	4281      	cmp	r1, r0
    56b0:	d202      	bcs.n	56b8 <.udivsi3_skip_div0_test+0x2c>
    56b2:	0049      	lsls	r1, r1, #1
    56b4:	005b      	lsls	r3, r3, #1
    56b6:	e7f8      	b.n	56aa <.udivsi3_skip_div0_test+0x1e>
    56b8:	4288      	cmp	r0, r1
    56ba:	d301      	bcc.n	56c0 <.udivsi3_skip_div0_test+0x34>
    56bc:	1a40      	subs	r0, r0, r1
    56be:	431a      	orrs	r2, r3
    56c0:	084c      	lsrs	r4, r1, #1
    56c2:	42a0      	cmp	r0, r4
    56c4:	d302      	bcc.n	56cc <.udivsi3_skip_div0_test+0x40>
    56c6:	1b00      	subs	r0, r0, r4
    56c8:	085c      	lsrs	r4, r3, #1
    56ca:	4322      	orrs	r2, r4
    56cc:	088c      	lsrs	r4, r1, #2
    56ce:	42a0      	cmp	r0, r4
    56d0:	d302      	bcc.n	56d8 <.udivsi3_skip_div0_test+0x4c>
    56d2:	1b00      	subs	r0, r0, r4
    56d4:	089c      	lsrs	r4, r3, #2
    56d6:	4322      	orrs	r2, r4
    56d8:	08cc      	lsrs	r4, r1, #3
    56da:	42a0      	cmp	r0, r4
    56dc:	d302      	bcc.n	56e4 <.udivsi3_skip_div0_test+0x58>
    56de:	1b00      	subs	r0, r0, r4
    56e0:	08dc      	lsrs	r4, r3, #3
    56e2:	4322      	orrs	r2, r4
    56e4:	2800      	cmp	r0, #0
    56e6:	d003      	beq.n	56f0 <.udivsi3_skip_div0_test+0x64>
    56e8:	091b      	lsrs	r3, r3, #4
    56ea:	d001      	beq.n	56f0 <.udivsi3_skip_div0_test+0x64>
    56ec:	0909      	lsrs	r1, r1, #4
    56ee:	e7e3      	b.n	56b8 <.udivsi3_skip_div0_test+0x2c>
    56f0:	1c10      	adds	r0, r2, #0
    56f2:	bc10      	pop	{r4}
    56f4:	4770      	bx	lr
    56f6:	2800      	cmp	r0, #0
    56f8:	d001      	beq.n	56fe <.udivsi3_skip_div0_test+0x72>
    56fa:	2000      	movs	r0, #0
    56fc:	43c0      	mvns	r0, r0
    56fe:	b407      	push	{r0, r1, r2}
    5700:	4802      	ldr	r0, [pc, #8]	; (570c <.udivsi3_skip_div0_test+0x80>)
    5702:	a102      	add	r1, pc, #8	; (adr r1, 570c <.udivsi3_skip_div0_test+0x80>)
    5704:	1840      	adds	r0, r0, r1
    5706:	9002      	str	r0, [sp, #8]
    5708:	bd03      	pop	{r0, r1, pc}
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	000000d9 	.word	0x000000d9

00005710 <__aeabi_uidivmod>:
    5710:	2900      	cmp	r1, #0
    5712:	d0f0      	beq.n	56f6 <.udivsi3_skip_div0_test+0x6a>
    5714:	b503      	push	{r0, r1, lr}
    5716:	f7ff ffb9 	bl	568c <.udivsi3_skip_div0_test>
    571a:	bc0e      	pop	{r1, r2, r3}
    571c:	4342      	muls	r2, r0
    571e:	1a89      	subs	r1, r1, r2
    5720:	4718      	bx	r3
    5722:	46c0      	nop			; (mov r8, r8)

00005724 <__aeabi_idiv>:
    5724:	2900      	cmp	r1, #0
    5726:	d041      	beq.n	57ac <.divsi3_skip_div0_test+0x84>

00005728 <.divsi3_skip_div0_test>:
    5728:	b410      	push	{r4}
    572a:	1c04      	adds	r4, r0, #0
    572c:	404c      	eors	r4, r1
    572e:	46a4      	mov	ip, r4
    5730:	2301      	movs	r3, #1
    5732:	2200      	movs	r2, #0
    5734:	2900      	cmp	r1, #0
    5736:	d500      	bpl.n	573a <.divsi3_skip_div0_test+0x12>
    5738:	4249      	negs	r1, r1
    573a:	2800      	cmp	r0, #0
    573c:	d500      	bpl.n	5740 <.divsi3_skip_div0_test+0x18>
    573e:	4240      	negs	r0, r0
    5740:	4288      	cmp	r0, r1
    5742:	d32c      	bcc.n	579e <.divsi3_skip_div0_test+0x76>
    5744:	2401      	movs	r4, #1
    5746:	0724      	lsls	r4, r4, #28
    5748:	42a1      	cmp	r1, r4
    574a:	d204      	bcs.n	5756 <.divsi3_skip_div0_test+0x2e>
    574c:	4281      	cmp	r1, r0
    574e:	d202      	bcs.n	5756 <.divsi3_skip_div0_test+0x2e>
    5750:	0109      	lsls	r1, r1, #4
    5752:	011b      	lsls	r3, r3, #4
    5754:	e7f8      	b.n	5748 <.divsi3_skip_div0_test+0x20>
    5756:	00e4      	lsls	r4, r4, #3
    5758:	42a1      	cmp	r1, r4
    575a:	d204      	bcs.n	5766 <.divsi3_skip_div0_test+0x3e>
    575c:	4281      	cmp	r1, r0
    575e:	d202      	bcs.n	5766 <.divsi3_skip_div0_test+0x3e>
    5760:	0049      	lsls	r1, r1, #1
    5762:	005b      	lsls	r3, r3, #1
    5764:	e7f8      	b.n	5758 <.divsi3_skip_div0_test+0x30>
    5766:	4288      	cmp	r0, r1
    5768:	d301      	bcc.n	576e <.divsi3_skip_div0_test+0x46>
    576a:	1a40      	subs	r0, r0, r1
    576c:	431a      	orrs	r2, r3
    576e:	084c      	lsrs	r4, r1, #1
    5770:	42a0      	cmp	r0, r4
    5772:	d302      	bcc.n	577a <.divsi3_skip_div0_test+0x52>
    5774:	1b00      	subs	r0, r0, r4
    5776:	085c      	lsrs	r4, r3, #1
    5778:	4322      	orrs	r2, r4
    577a:	088c      	lsrs	r4, r1, #2
    577c:	42a0      	cmp	r0, r4
    577e:	d302      	bcc.n	5786 <.divsi3_skip_div0_test+0x5e>
    5780:	1b00      	subs	r0, r0, r4
    5782:	089c      	lsrs	r4, r3, #2
    5784:	4322      	orrs	r2, r4
    5786:	08cc      	lsrs	r4, r1, #3
    5788:	42a0      	cmp	r0, r4
    578a:	d302      	bcc.n	5792 <.divsi3_skip_div0_test+0x6a>
    578c:	1b00      	subs	r0, r0, r4
    578e:	08dc      	lsrs	r4, r3, #3
    5790:	4322      	orrs	r2, r4
    5792:	2800      	cmp	r0, #0
    5794:	d003      	beq.n	579e <.divsi3_skip_div0_test+0x76>
    5796:	091b      	lsrs	r3, r3, #4
    5798:	d001      	beq.n	579e <.divsi3_skip_div0_test+0x76>
    579a:	0909      	lsrs	r1, r1, #4
    579c:	e7e3      	b.n	5766 <.divsi3_skip_div0_test+0x3e>
    579e:	1c10      	adds	r0, r2, #0
    57a0:	4664      	mov	r4, ip
    57a2:	2c00      	cmp	r4, #0
    57a4:	d500      	bpl.n	57a8 <.divsi3_skip_div0_test+0x80>
    57a6:	4240      	negs	r0, r0
    57a8:	bc10      	pop	{r4}
    57aa:	4770      	bx	lr
    57ac:	2800      	cmp	r0, #0
    57ae:	d006      	beq.n	57be <.divsi3_skip_div0_test+0x96>
    57b0:	db03      	blt.n	57ba <.divsi3_skip_div0_test+0x92>
    57b2:	2000      	movs	r0, #0
    57b4:	43c0      	mvns	r0, r0
    57b6:	0840      	lsrs	r0, r0, #1
    57b8:	e001      	b.n	57be <.divsi3_skip_div0_test+0x96>
    57ba:	2080      	movs	r0, #128	; 0x80
    57bc:	0600      	lsls	r0, r0, #24
    57be:	b407      	push	{r0, r1, r2}
    57c0:	4802      	ldr	r0, [pc, #8]	; (57cc <.divsi3_skip_div0_test+0xa4>)
    57c2:	a102      	add	r1, pc, #8	; (adr r1, 57cc <.divsi3_skip_div0_test+0xa4>)
    57c4:	1840      	adds	r0, r0, r1
    57c6:	9002      	str	r0, [sp, #8]
    57c8:	bd03      	pop	{r0, r1, pc}
    57ca:	46c0      	nop			; (mov r8, r8)
    57cc:	00000019 	.word	0x00000019

000057d0 <__aeabi_idivmod>:
    57d0:	2900      	cmp	r1, #0
    57d2:	d0eb      	beq.n	57ac <.divsi3_skip_div0_test+0x84>
    57d4:	b503      	push	{r0, r1, lr}
    57d6:	f7ff ffa7 	bl	5728 <.divsi3_skip_div0_test>
    57da:	bc0e      	pop	{r1, r2, r3}
    57dc:	4342      	muls	r2, r0
    57de:	1a89      	subs	r1, r1, r2
    57e0:	4718      	bx	r3
    57e2:	46c0      	nop			; (mov r8, r8)

000057e4 <__aeabi_idiv0>:
    57e4:	4770      	bx	lr
    57e6:	46c0      	nop			; (mov r8, r8)

000057e8 <__aeabi_lmul>:
    57e8:	469c      	mov	ip, r3
    57ea:	0403      	lsls	r3, r0, #16
    57ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ee:	0c1b      	lsrs	r3, r3, #16
    57f0:	0417      	lsls	r7, r2, #16
    57f2:	0c3f      	lsrs	r7, r7, #16
    57f4:	0c15      	lsrs	r5, r2, #16
    57f6:	1c1e      	adds	r6, r3, #0
    57f8:	1c04      	adds	r4, r0, #0
    57fa:	0c00      	lsrs	r0, r0, #16
    57fc:	437e      	muls	r6, r7
    57fe:	436b      	muls	r3, r5
    5800:	4347      	muls	r7, r0
    5802:	4345      	muls	r5, r0
    5804:	18fb      	adds	r3, r7, r3
    5806:	0c30      	lsrs	r0, r6, #16
    5808:	1818      	adds	r0, r3, r0
    580a:	4287      	cmp	r7, r0
    580c:	d902      	bls.n	5814 <__aeabi_lmul+0x2c>
    580e:	2380      	movs	r3, #128	; 0x80
    5810:	025b      	lsls	r3, r3, #9
    5812:	18ed      	adds	r5, r5, r3
    5814:	0c03      	lsrs	r3, r0, #16
    5816:	18ed      	adds	r5, r5, r3
    5818:	4663      	mov	r3, ip
    581a:	435c      	muls	r4, r3
    581c:	434a      	muls	r2, r1
    581e:	0436      	lsls	r6, r6, #16
    5820:	0c36      	lsrs	r6, r6, #16
    5822:	18a1      	adds	r1, r4, r2
    5824:	0400      	lsls	r0, r0, #16
    5826:	1980      	adds	r0, r0, r6
    5828:	1949      	adds	r1, r1, r5
    582a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000582c <__libc_init_array>:
    582c:	b570      	push	{r4, r5, r6, lr}
    582e:	4b0e      	ldr	r3, [pc, #56]	; (5868 <__libc_init_array+0x3c>)
    5830:	4d0e      	ldr	r5, [pc, #56]	; (586c <__libc_init_array+0x40>)
    5832:	2400      	movs	r4, #0
    5834:	1aed      	subs	r5, r5, r3
    5836:	10ad      	asrs	r5, r5, #2
    5838:	1c1e      	adds	r6, r3, #0
    583a:	42ac      	cmp	r4, r5
    583c:	d004      	beq.n	5848 <__libc_init_array+0x1c>
    583e:	00a3      	lsls	r3, r4, #2
    5840:	58f3      	ldr	r3, [r6, r3]
    5842:	4798      	blx	r3
    5844:	3401      	adds	r4, #1
    5846:	e7f8      	b.n	583a <__libc_init_array+0xe>
    5848:	f001 f8ce 	bl	69e8 <_init>
    584c:	4b08      	ldr	r3, [pc, #32]	; (5870 <__libc_init_array+0x44>)
    584e:	4d09      	ldr	r5, [pc, #36]	; (5874 <__libc_init_array+0x48>)
    5850:	2400      	movs	r4, #0
    5852:	1aed      	subs	r5, r5, r3
    5854:	10ad      	asrs	r5, r5, #2
    5856:	1c1e      	adds	r6, r3, #0
    5858:	42ac      	cmp	r4, r5
    585a:	d004      	beq.n	5866 <__libc_init_array+0x3a>
    585c:	00a3      	lsls	r3, r4, #2
    585e:	58f3      	ldr	r3, [r6, r3]
    5860:	4798      	blx	r3
    5862:	3401      	adds	r4, #1
    5864:	e7f8      	b.n	5858 <__libc_init_array+0x2c>
    5866:	bd70      	pop	{r4, r5, r6, pc}
    5868:	000069f4 	.word	0x000069f4
    586c:	000069f4 	.word	0x000069f4
    5870:	000069f4 	.word	0x000069f4
    5874:	000069f8 	.word	0x000069f8

00005878 <memcpy>:
    5878:	b510      	push	{r4, lr}
    587a:	2300      	movs	r3, #0
    587c:	4293      	cmp	r3, r2
    587e:	d003      	beq.n	5888 <memcpy+0x10>
    5880:	5ccc      	ldrb	r4, [r1, r3]
    5882:	54c4      	strb	r4, [r0, r3]
    5884:	3301      	adds	r3, #1
    5886:	e7f9      	b.n	587c <memcpy+0x4>
    5888:	bd10      	pop	{r4, pc}

0000588a <memset>:
    588a:	1c03      	adds	r3, r0, #0
    588c:	1882      	adds	r2, r0, r2
    588e:	4293      	cmp	r3, r2
    5890:	d002      	beq.n	5898 <memset+0xe>
    5892:	7019      	strb	r1, [r3, #0]
    5894:	3301      	adds	r3, #1
    5896:	e7fa      	b.n	588e <memset+0x4>
    5898:	4770      	bx	lr
	...

0000589c <iprintf>:
    589c:	b40f      	push	{r0, r1, r2, r3}
    589e:	4b0b      	ldr	r3, [pc, #44]	; (58cc <iprintf+0x30>)
    58a0:	b513      	push	{r0, r1, r4, lr}
    58a2:	681c      	ldr	r4, [r3, #0]
    58a4:	2c00      	cmp	r4, #0
    58a6:	d005      	beq.n	58b4 <iprintf+0x18>
    58a8:	69a3      	ldr	r3, [r4, #24]
    58aa:	2b00      	cmp	r3, #0
    58ac:	d102      	bne.n	58b4 <iprintf+0x18>
    58ae:	1c20      	adds	r0, r4, #0
    58b0:	f000 fd68 	bl	6384 <__sinit>
    58b4:	ab05      	add	r3, sp, #20
    58b6:	68a1      	ldr	r1, [r4, #8]
    58b8:	1c20      	adds	r0, r4, #0
    58ba:	9a04      	ldr	r2, [sp, #16]
    58bc:	9301      	str	r3, [sp, #4]
    58be:	f000 f8fb 	bl	5ab8 <_vfiprintf_r>
    58c2:	bc16      	pop	{r1, r2, r4}
    58c4:	bc08      	pop	{r3}
    58c6:	b004      	add	sp, #16
    58c8:	4718      	bx	r3
    58ca:	46c0      	nop			; (mov r8, r8)
    58cc:	20000094 	.word	0x20000094

000058d0 <rand>:
    58d0:	4b17      	ldr	r3, [pc, #92]	; (5930 <rand+0x60>)
    58d2:	b510      	push	{r4, lr}
    58d4:	681c      	ldr	r4, [r3, #0]
    58d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    58d8:	2b00      	cmp	r3, #0
    58da:	d115      	bne.n	5908 <rand+0x38>
    58dc:	2018      	movs	r0, #24
    58de:	f000 fe11 	bl	6504 <malloc>
    58e2:	4b14      	ldr	r3, [pc, #80]	; (5934 <rand+0x64>)
    58e4:	63a0      	str	r0, [r4, #56]	; 0x38
    58e6:	8003      	strh	r3, [r0, #0]
    58e8:	4b13      	ldr	r3, [pc, #76]	; (5938 <rand+0x68>)
    58ea:	8043      	strh	r3, [r0, #2]
    58ec:	4b13      	ldr	r3, [pc, #76]	; (593c <rand+0x6c>)
    58ee:	8083      	strh	r3, [r0, #4]
    58f0:	4b13      	ldr	r3, [pc, #76]	; (5940 <rand+0x70>)
    58f2:	80c3      	strh	r3, [r0, #6]
    58f4:	4b13      	ldr	r3, [pc, #76]	; (5944 <rand+0x74>)
    58f6:	8103      	strh	r3, [r0, #8]
    58f8:	2305      	movs	r3, #5
    58fa:	8143      	strh	r3, [r0, #10]
    58fc:	230b      	movs	r3, #11
    58fe:	8183      	strh	r3, [r0, #12]
    5900:	2201      	movs	r2, #1
    5902:	2300      	movs	r3, #0
    5904:	6102      	str	r2, [r0, #16]
    5906:	6143      	str	r3, [r0, #20]
    5908:	4b08      	ldr	r3, [pc, #32]	; (592c <rand+0x5c>)
    590a:	4a07      	ldr	r2, [pc, #28]	; (5928 <rand+0x58>)
    590c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    590e:	6920      	ldr	r0, [r4, #16]
    5910:	6961      	ldr	r1, [r4, #20]
    5912:	f7ff ff69 	bl	57e8 <__aeabi_lmul>
    5916:	2201      	movs	r2, #1
    5918:	2300      	movs	r3, #0
    591a:	1880      	adds	r0, r0, r2
    591c:	4159      	adcs	r1, r3
    591e:	6120      	str	r0, [r4, #16]
    5920:	6161      	str	r1, [r4, #20]
    5922:	0048      	lsls	r0, r1, #1
    5924:	0840      	lsrs	r0, r0, #1
    5926:	bd10      	pop	{r4, pc}
    5928:	4c957f2d 	.word	0x4c957f2d
    592c:	5851f42d 	.word	0x5851f42d
    5930:	20000094 	.word	0x20000094
    5934:	0000330e 	.word	0x0000330e
    5938:	ffffabcd 	.word	0xffffabcd
    593c:	00001234 	.word	0x00001234
    5940:	ffffe66d 	.word	0xffffe66d
    5944:	ffffdeec 	.word	0xffffdeec

00005948 <setbuf>:
    5948:	b508      	push	{r3, lr}
    594a:	424a      	negs	r2, r1
    594c:	414a      	adcs	r2, r1
    594e:	2380      	movs	r3, #128	; 0x80
    5950:	0052      	lsls	r2, r2, #1
    5952:	00db      	lsls	r3, r3, #3
    5954:	f000 f802 	bl	595c <setvbuf>
    5958:	bd08      	pop	{r3, pc}
	...

0000595c <setvbuf>:
    595c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    595e:	1c1e      	adds	r6, r3, #0
    5960:	4b3c      	ldr	r3, [pc, #240]	; (5a54 <setvbuf+0xf8>)
    5962:	1c04      	adds	r4, r0, #0
    5964:	681d      	ldr	r5, [r3, #0]
    5966:	1c0f      	adds	r7, r1, #0
    5968:	9201      	str	r2, [sp, #4]
    596a:	2d00      	cmp	r5, #0
    596c:	d005      	beq.n	597a <setvbuf+0x1e>
    596e:	69aa      	ldr	r2, [r5, #24]
    5970:	2a00      	cmp	r2, #0
    5972:	d102      	bne.n	597a <setvbuf+0x1e>
    5974:	1c28      	adds	r0, r5, #0
    5976:	f000 fd05 	bl	6384 <__sinit>
    597a:	4b37      	ldr	r3, [pc, #220]	; (5a58 <setvbuf+0xfc>)
    597c:	429c      	cmp	r4, r3
    597e:	d101      	bne.n	5984 <setvbuf+0x28>
    5980:	686c      	ldr	r4, [r5, #4]
    5982:	e008      	b.n	5996 <setvbuf+0x3a>
    5984:	4b35      	ldr	r3, [pc, #212]	; (5a5c <setvbuf+0x100>)
    5986:	429c      	cmp	r4, r3
    5988:	d101      	bne.n	598e <setvbuf+0x32>
    598a:	68ac      	ldr	r4, [r5, #8]
    598c:	e003      	b.n	5996 <setvbuf+0x3a>
    598e:	4b34      	ldr	r3, [pc, #208]	; (5a60 <setvbuf+0x104>)
    5990:	429c      	cmp	r4, r3
    5992:	d100      	bne.n	5996 <setvbuf+0x3a>
    5994:	68ec      	ldr	r4, [r5, #12]
    5996:	9b01      	ldr	r3, [sp, #4]
    5998:	2b02      	cmp	r3, #2
    599a:	d857      	bhi.n	5a4c <setvbuf+0xf0>
    599c:	2e00      	cmp	r6, #0
    599e:	db55      	blt.n	5a4c <setvbuf+0xf0>
    59a0:	1c28      	adds	r0, r5, #0
    59a2:	1c21      	adds	r1, r4, #0
    59a4:	f000 fc6e 	bl	6284 <_fflush_r>
    59a8:	2300      	movs	r3, #0
    59aa:	6063      	str	r3, [r4, #4]
    59ac:	61a3      	str	r3, [r4, #24]
    59ae:	89a3      	ldrh	r3, [r4, #12]
    59b0:	061a      	lsls	r2, r3, #24
    59b2:	d503      	bpl.n	59bc <setvbuf+0x60>
    59b4:	1c28      	adds	r0, r5, #0
    59b6:	6921      	ldr	r1, [r4, #16]
    59b8:	f000 fdba 	bl	6530 <_free_r>
    59bc:	89a3      	ldrh	r3, [r4, #12]
    59be:	2283      	movs	r2, #131	; 0x83
    59c0:	4393      	bics	r3, r2
    59c2:	81a3      	strh	r3, [r4, #12]
    59c4:	9b01      	ldr	r3, [sp, #4]
    59c6:	2b02      	cmp	r3, #2
    59c8:	d013      	beq.n	59f2 <setvbuf+0x96>
    59ca:	2f00      	cmp	r7, #0
    59cc:	d125      	bne.n	5a1a <setvbuf+0xbe>
    59ce:	2e00      	cmp	r6, #0
    59d0:	d101      	bne.n	59d6 <setvbuf+0x7a>
    59d2:	2680      	movs	r6, #128	; 0x80
    59d4:	00f6      	lsls	r6, r6, #3
    59d6:	1c30      	adds	r0, r6, #0
    59d8:	f000 fd94 	bl	6504 <malloc>
    59dc:	1e07      	subs	r7, r0, #0
    59de:	d118      	bne.n	5a12 <setvbuf+0xb6>
    59e0:	2080      	movs	r0, #128	; 0x80
    59e2:	00c0      	lsls	r0, r0, #3
    59e4:	f000 fd8e 	bl	6504 <malloc>
    59e8:	1e07      	subs	r7, r0, #0
    59ea:	d110      	bne.n	5a0e <setvbuf+0xb2>
    59ec:	2001      	movs	r0, #1
    59ee:	4240      	negs	r0, r0
    59f0:	e000      	b.n	59f4 <setvbuf+0x98>
    59f2:	2000      	movs	r0, #0
    59f4:	89a3      	ldrh	r3, [r4, #12]
    59f6:	2202      	movs	r2, #2
    59f8:	4313      	orrs	r3, r2
    59fa:	81a3      	strh	r3, [r4, #12]
    59fc:	2300      	movs	r3, #0
    59fe:	60a3      	str	r3, [r4, #8]
    5a00:	1c23      	adds	r3, r4, #0
    5a02:	3347      	adds	r3, #71	; 0x47
    5a04:	6023      	str	r3, [r4, #0]
    5a06:	6123      	str	r3, [r4, #16]
    5a08:	2301      	movs	r3, #1
    5a0a:	6163      	str	r3, [r4, #20]
    5a0c:	e020      	b.n	5a50 <setvbuf+0xf4>
    5a0e:	2680      	movs	r6, #128	; 0x80
    5a10:	00f6      	lsls	r6, r6, #3
    5a12:	89a3      	ldrh	r3, [r4, #12]
    5a14:	2280      	movs	r2, #128	; 0x80
    5a16:	4313      	orrs	r3, r2
    5a18:	81a3      	strh	r3, [r4, #12]
    5a1a:	9a01      	ldr	r2, [sp, #4]
    5a1c:	2a01      	cmp	r2, #1
    5a1e:	d104      	bne.n	5a2a <setvbuf+0xce>
    5a20:	89a3      	ldrh	r3, [r4, #12]
    5a22:	4313      	orrs	r3, r2
    5a24:	81a3      	strh	r3, [r4, #12]
    5a26:	4273      	negs	r3, r6
    5a28:	61a3      	str	r3, [r4, #24]
    5a2a:	4b0e      	ldr	r3, [pc, #56]	; (5a64 <setvbuf+0x108>)
    5a2c:	2000      	movs	r0, #0
    5a2e:	62ab      	str	r3, [r5, #40]	; 0x28
    5a30:	89a3      	ldrh	r3, [r4, #12]
    5a32:	6027      	str	r7, [r4, #0]
    5a34:	6127      	str	r7, [r4, #16]
    5a36:	6166      	str	r6, [r4, #20]
    5a38:	071a      	lsls	r2, r3, #28
    5a3a:	d509      	bpl.n	5a50 <setvbuf+0xf4>
    5a3c:	2203      	movs	r2, #3
    5a3e:	4013      	ands	r3, r2
    5a40:	425a      	negs	r2, r3
    5a42:	4153      	adcs	r3, r2
    5a44:	425b      	negs	r3, r3
    5a46:	401e      	ands	r6, r3
    5a48:	60a6      	str	r6, [r4, #8]
    5a4a:	e001      	b.n	5a50 <setvbuf+0xf4>
    5a4c:	2001      	movs	r0, #1
    5a4e:	4240      	negs	r0, r0
    5a50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	20000094 	.word	0x20000094
    5a58:	00006988 	.word	0x00006988
    5a5c:	000069a8 	.word	0x000069a8
    5a60:	000069c8 	.word	0x000069c8
    5a64:	000062dd 	.word	0x000062dd

00005a68 <__sfputc_r>:
    5a68:	6893      	ldr	r3, [r2, #8]
    5a6a:	b510      	push	{r4, lr}
    5a6c:	3b01      	subs	r3, #1
    5a6e:	6093      	str	r3, [r2, #8]
    5a70:	2b00      	cmp	r3, #0
    5a72:	da05      	bge.n	5a80 <__sfputc_r+0x18>
    5a74:	6994      	ldr	r4, [r2, #24]
    5a76:	42a3      	cmp	r3, r4
    5a78:	db08      	blt.n	5a8c <__sfputc_r+0x24>
    5a7a:	b2cb      	uxtb	r3, r1
    5a7c:	2b0a      	cmp	r3, #10
    5a7e:	d005      	beq.n	5a8c <__sfputc_r+0x24>
    5a80:	6813      	ldr	r3, [r2, #0]
    5a82:	1c58      	adds	r0, r3, #1
    5a84:	6010      	str	r0, [r2, #0]
    5a86:	7019      	strb	r1, [r3, #0]
    5a88:	b2c8      	uxtb	r0, r1
    5a8a:	e001      	b.n	5a90 <__sfputc_r+0x28>
    5a8c:	f000 faa6 	bl	5fdc <__swbuf_r>
    5a90:	bd10      	pop	{r4, pc}

00005a92 <__sfputs_r>:
    5a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a94:	1c06      	adds	r6, r0, #0
    5a96:	1c0f      	adds	r7, r1, #0
    5a98:	1c14      	adds	r4, r2, #0
    5a9a:	18d5      	adds	r5, r2, r3
    5a9c:	42ac      	cmp	r4, r5
    5a9e:	d008      	beq.n	5ab2 <__sfputs_r+0x20>
    5aa0:	7821      	ldrb	r1, [r4, #0]
    5aa2:	1c30      	adds	r0, r6, #0
    5aa4:	1c3a      	adds	r2, r7, #0
    5aa6:	f7ff ffdf 	bl	5a68 <__sfputc_r>
    5aaa:	3401      	adds	r4, #1
    5aac:	1c43      	adds	r3, r0, #1
    5aae:	d1f5      	bne.n	5a9c <__sfputs_r+0xa>
    5ab0:	e000      	b.n	5ab4 <__sfputs_r+0x22>
    5ab2:	2000      	movs	r0, #0
    5ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005ab8 <_vfiprintf_r>:
    5ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aba:	b09f      	sub	sp, #124	; 0x7c
    5abc:	1c06      	adds	r6, r0, #0
    5abe:	1c0f      	adds	r7, r1, #0
    5ac0:	9203      	str	r2, [sp, #12]
    5ac2:	9305      	str	r3, [sp, #20]
    5ac4:	2800      	cmp	r0, #0
    5ac6:	d004      	beq.n	5ad2 <_vfiprintf_r+0x1a>
    5ac8:	6981      	ldr	r1, [r0, #24]
    5aca:	2900      	cmp	r1, #0
    5acc:	d101      	bne.n	5ad2 <_vfiprintf_r+0x1a>
    5ace:	f000 fc59 	bl	6384 <__sinit>
    5ad2:	4b75      	ldr	r3, [pc, #468]	; (5ca8 <_vfiprintf_r+0x1f0>)
    5ad4:	429f      	cmp	r7, r3
    5ad6:	d101      	bne.n	5adc <_vfiprintf_r+0x24>
    5ad8:	6877      	ldr	r7, [r6, #4]
    5ada:	e008      	b.n	5aee <_vfiprintf_r+0x36>
    5adc:	4b73      	ldr	r3, [pc, #460]	; (5cac <_vfiprintf_r+0x1f4>)
    5ade:	429f      	cmp	r7, r3
    5ae0:	d101      	bne.n	5ae6 <_vfiprintf_r+0x2e>
    5ae2:	68b7      	ldr	r7, [r6, #8]
    5ae4:	e003      	b.n	5aee <_vfiprintf_r+0x36>
    5ae6:	4b72      	ldr	r3, [pc, #456]	; (5cb0 <_vfiprintf_r+0x1f8>)
    5ae8:	429f      	cmp	r7, r3
    5aea:	d100      	bne.n	5aee <_vfiprintf_r+0x36>
    5aec:	68f7      	ldr	r7, [r6, #12]
    5aee:	89bb      	ldrh	r3, [r7, #12]
    5af0:	071a      	lsls	r2, r3, #28
    5af2:	d50a      	bpl.n	5b0a <_vfiprintf_r+0x52>
    5af4:	693b      	ldr	r3, [r7, #16]
    5af6:	2b00      	cmp	r3, #0
    5af8:	d007      	beq.n	5b0a <_vfiprintf_r+0x52>
    5afa:	ad06      	add	r5, sp, #24
    5afc:	2300      	movs	r3, #0
    5afe:	616b      	str	r3, [r5, #20]
    5b00:	2320      	movs	r3, #32
    5b02:	766b      	strb	r3, [r5, #25]
    5b04:	2330      	movs	r3, #48	; 0x30
    5b06:	76ab      	strb	r3, [r5, #26]
    5b08:	e03b      	b.n	5b82 <_vfiprintf_r+0xca>
    5b0a:	1c30      	adds	r0, r6, #0
    5b0c:	1c39      	adds	r1, r7, #0
    5b0e:	f000 fabd 	bl	608c <__swsetup_r>
    5b12:	2800      	cmp	r0, #0
    5b14:	d0f1      	beq.n	5afa <_vfiprintf_r+0x42>
    5b16:	2001      	movs	r0, #1
    5b18:	4240      	negs	r0, r0
    5b1a:	e0c2      	b.n	5ca2 <_vfiprintf_r+0x1ea>
    5b1c:	9a05      	ldr	r2, [sp, #20]
    5b1e:	1d11      	adds	r1, r2, #4
    5b20:	6812      	ldr	r2, [r2, #0]
    5b22:	9105      	str	r1, [sp, #20]
    5b24:	2a00      	cmp	r2, #0
    5b26:	db76      	blt.n	5c16 <_vfiprintf_r+0x15e>
    5b28:	9209      	str	r2, [sp, #36]	; 0x24
    5b2a:	3401      	adds	r4, #1
    5b2c:	7823      	ldrb	r3, [r4, #0]
    5b2e:	2b2e      	cmp	r3, #46	; 0x2e
    5b30:	d100      	bne.n	5b34 <_vfiprintf_r+0x7c>
    5b32:	e081      	b.n	5c38 <_vfiprintf_r+0x180>
    5b34:	7821      	ldrb	r1, [r4, #0]
    5b36:	485f      	ldr	r0, [pc, #380]	; (5cb4 <_vfiprintf_r+0x1fc>)
    5b38:	2203      	movs	r2, #3
    5b3a:	f000 fced 	bl	6518 <memchr>
    5b3e:	2800      	cmp	r0, #0
    5b40:	d007      	beq.n	5b52 <_vfiprintf_r+0x9a>
    5b42:	495c      	ldr	r1, [pc, #368]	; (5cb4 <_vfiprintf_r+0x1fc>)
    5b44:	682a      	ldr	r2, [r5, #0]
    5b46:	1a43      	subs	r3, r0, r1
    5b48:	2040      	movs	r0, #64	; 0x40
    5b4a:	4098      	lsls	r0, r3
    5b4c:	4310      	orrs	r0, r2
    5b4e:	6028      	str	r0, [r5, #0]
    5b50:	3401      	adds	r4, #1
    5b52:	7821      	ldrb	r1, [r4, #0]
    5b54:	1c63      	adds	r3, r4, #1
    5b56:	4858      	ldr	r0, [pc, #352]	; (5cb8 <_vfiprintf_r+0x200>)
    5b58:	2206      	movs	r2, #6
    5b5a:	9303      	str	r3, [sp, #12]
    5b5c:	7629      	strb	r1, [r5, #24]
    5b5e:	f000 fcdb 	bl	6518 <memchr>
    5b62:	2800      	cmp	r0, #0
    5b64:	d100      	bne.n	5b68 <_vfiprintf_r+0xb0>
    5b66:	e08a      	b.n	5c7e <_vfiprintf_r+0x1c6>
    5b68:	4b54      	ldr	r3, [pc, #336]	; (5cbc <_vfiprintf_r+0x204>)
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d17e      	bne.n	5c6c <_vfiprintf_r+0x1b4>
    5b6e:	9b05      	ldr	r3, [sp, #20]
    5b70:	2207      	movs	r2, #7
    5b72:	3307      	adds	r3, #7
    5b74:	4393      	bics	r3, r2
    5b76:	3308      	adds	r3, #8
    5b78:	9305      	str	r3, [sp, #20]
    5b7a:	696a      	ldr	r2, [r5, #20]
    5b7c:	9904      	ldr	r1, [sp, #16]
    5b7e:	1853      	adds	r3, r2, r1
    5b80:	616b      	str	r3, [r5, #20]
    5b82:	9c03      	ldr	r4, [sp, #12]
    5b84:	7823      	ldrb	r3, [r4, #0]
    5b86:	2b00      	cmp	r3, #0
    5b88:	d104      	bne.n	5b94 <_vfiprintf_r+0xdc>
    5b8a:	9903      	ldr	r1, [sp, #12]
    5b8c:	1a61      	subs	r1, r4, r1
    5b8e:	9102      	str	r1, [sp, #8]
    5b90:	d010      	beq.n	5bb4 <_vfiprintf_r+0xfc>
    5b92:	e003      	b.n	5b9c <_vfiprintf_r+0xe4>
    5b94:	2b25      	cmp	r3, #37	; 0x25
    5b96:	d0f8      	beq.n	5b8a <_vfiprintf_r+0xd2>
    5b98:	3401      	adds	r4, #1
    5b9a:	e7f3      	b.n	5b84 <_vfiprintf_r+0xcc>
    5b9c:	1c30      	adds	r0, r6, #0
    5b9e:	1c39      	adds	r1, r7, #0
    5ba0:	9a03      	ldr	r2, [sp, #12]
    5ba2:	9b02      	ldr	r3, [sp, #8]
    5ba4:	f7ff ff75 	bl	5a92 <__sfputs_r>
    5ba8:	3001      	adds	r0, #1
    5baa:	d075      	beq.n	5c98 <_vfiprintf_r+0x1e0>
    5bac:	696a      	ldr	r2, [r5, #20]
    5bae:	9902      	ldr	r1, [sp, #8]
    5bb0:	1853      	adds	r3, r2, r1
    5bb2:	616b      	str	r3, [r5, #20]
    5bb4:	7823      	ldrb	r3, [r4, #0]
    5bb6:	2b00      	cmp	r3, #0
    5bb8:	d06e      	beq.n	5c98 <_vfiprintf_r+0x1e0>
    5bba:	2201      	movs	r2, #1
    5bbc:	4252      	negs	r2, r2
    5bbe:	606a      	str	r2, [r5, #4]
    5bc0:	466a      	mov	r2, sp
    5bc2:	2300      	movs	r3, #0
    5bc4:	325b      	adds	r2, #91	; 0x5b
    5bc6:	3401      	adds	r4, #1
    5bc8:	602b      	str	r3, [r5, #0]
    5bca:	60eb      	str	r3, [r5, #12]
    5bcc:	60ab      	str	r3, [r5, #8]
    5bce:	7013      	strb	r3, [r2, #0]
    5bd0:	65ab      	str	r3, [r5, #88]	; 0x58
    5bd2:	7821      	ldrb	r1, [r4, #0]
    5bd4:	483a      	ldr	r0, [pc, #232]	; (5cc0 <_vfiprintf_r+0x208>)
    5bd6:	2205      	movs	r2, #5
    5bd8:	f000 fc9e 	bl	6518 <memchr>
    5bdc:	2800      	cmp	r0, #0
    5bde:	d008      	beq.n	5bf2 <_vfiprintf_r+0x13a>
    5be0:	4a37      	ldr	r2, [pc, #220]	; (5cc0 <_vfiprintf_r+0x208>)
    5be2:	3401      	adds	r4, #1
    5be4:	1a83      	subs	r3, r0, r2
    5be6:	2001      	movs	r0, #1
    5be8:	4098      	lsls	r0, r3
    5bea:	682b      	ldr	r3, [r5, #0]
    5bec:	4318      	orrs	r0, r3
    5bee:	6028      	str	r0, [r5, #0]
    5bf0:	e7ef      	b.n	5bd2 <_vfiprintf_r+0x11a>
    5bf2:	682b      	ldr	r3, [r5, #0]
    5bf4:	06d9      	lsls	r1, r3, #27
    5bf6:	d503      	bpl.n	5c00 <_vfiprintf_r+0x148>
    5bf8:	466a      	mov	r2, sp
    5bfa:	2120      	movs	r1, #32
    5bfc:	325b      	adds	r2, #91	; 0x5b
    5bfe:	7011      	strb	r1, [r2, #0]
    5c00:	071a      	lsls	r2, r3, #28
    5c02:	d503      	bpl.n	5c0c <_vfiprintf_r+0x154>
    5c04:	466a      	mov	r2, sp
    5c06:	212b      	movs	r1, #43	; 0x2b
    5c08:	325b      	adds	r2, #91	; 0x5b
    5c0a:	7011      	strb	r1, [r2, #0]
    5c0c:	7822      	ldrb	r2, [r4, #0]
    5c0e:	2a2a      	cmp	r2, #42	; 0x2a
    5c10:	d084      	beq.n	5b1c <_vfiprintf_r+0x64>
    5c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c14:	e005      	b.n	5c22 <_vfiprintf_r+0x16a>
    5c16:	4252      	negs	r2, r2
    5c18:	60ea      	str	r2, [r5, #12]
    5c1a:	2202      	movs	r2, #2
    5c1c:	4313      	orrs	r3, r2
    5c1e:	602b      	str	r3, [r5, #0]
    5c20:	e783      	b.n	5b2a <_vfiprintf_r+0x72>
    5c22:	7822      	ldrb	r2, [r4, #0]
    5c24:	3a30      	subs	r2, #48	; 0x30
    5c26:	2a09      	cmp	r2, #9
    5c28:	d804      	bhi.n	5c34 <_vfiprintf_r+0x17c>
    5c2a:	210a      	movs	r1, #10
    5c2c:	434b      	muls	r3, r1
    5c2e:	3401      	adds	r4, #1
    5c30:	189b      	adds	r3, r3, r2
    5c32:	e7f6      	b.n	5c22 <_vfiprintf_r+0x16a>
    5c34:	9309      	str	r3, [sp, #36]	; 0x24
    5c36:	e779      	b.n	5b2c <_vfiprintf_r+0x74>
    5c38:	7863      	ldrb	r3, [r4, #1]
    5c3a:	2b2a      	cmp	r3, #42	; 0x2a
    5c3c:	d109      	bne.n	5c52 <_vfiprintf_r+0x19a>
    5c3e:	9b05      	ldr	r3, [sp, #20]
    5c40:	3402      	adds	r4, #2
    5c42:	1d1a      	adds	r2, r3, #4
    5c44:	681b      	ldr	r3, [r3, #0]
    5c46:	9205      	str	r2, [sp, #20]
    5c48:	2b00      	cmp	r3, #0
    5c4a:	da0d      	bge.n	5c68 <_vfiprintf_r+0x1b0>
    5c4c:	2301      	movs	r3, #1
    5c4e:	425b      	negs	r3, r3
    5c50:	e00a      	b.n	5c68 <_vfiprintf_r+0x1b0>
    5c52:	3401      	adds	r4, #1
    5c54:	2300      	movs	r3, #0
    5c56:	7822      	ldrb	r2, [r4, #0]
    5c58:	3a30      	subs	r2, #48	; 0x30
    5c5a:	2a09      	cmp	r2, #9
    5c5c:	d804      	bhi.n	5c68 <_vfiprintf_r+0x1b0>
    5c5e:	210a      	movs	r1, #10
    5c60:	434b      	muls	r3, r1
    5c62:	3401      	adds	r4, #1
    5c64:	189b      	adds	r3, r3, r2
    5c66:	e7f6      	b.n	5c56 <_vfiprintf_r+0x19e>
    5c68:	9307      	str	r3, [sp, #28]
    5c6a:	e763      	b.n	5b34 <_vfiprintf_r+0x7c>
    5c6c:	ab05      	add	r3, sp, #20
    5c6e:	9300      	str	r3, [sp, #0]
    5c70:	1c30      	adds	r0, r6, #0
    5c72:	1c29      	adds	r1, r5, #0
    5c74:	1c3a      	adds	r2, r7, #0
    5c76:	4b13      	ldr	r3, [pc, #76]	; (5cc4 <_vfiprintf_r+0x20c>)
    5c78:	e000      	b.n	5c7c <_vfiprintf_r+0x1c4>
    5c7a:	bf00      	nop
    5c7c:	e007      	b.n	5c8e <_vfiprintf_r+0x1d6>
    5c7e:	ab05      	add	r3, sp, #20
    5c80:	9300      	str	r3, [sp, #0]
    5c82:	1c30      	adds	r0, r6, #0
    5c84:	1c29      	adds	r1, r5, #0
    5c86:	1c3a      	adds	r2, r7, #0
    5c88:	4b0e      	ldr	r3, [pc, #56]	; (5cc4 <_vfiprintf_r+0x20c>)
    5c8a:	f000 f891 	bl	5db0 <_printf_i>
    5c8e:	9004      	str	r0, [sp, #16]
    5c90:	9904      	ldr	r1, [sp, #16]
    5c92:	3101      	adds	r1, #1
    5c94:	d000      	beq.n	5c98 <_vfiprintf_r+0x1e0>
    5c96:	e770      	b.n	5b7a <_vfiprintf_r+0xc2>
    5c98:	89bb      	ldrh	r3, [r7, #12]
    5c9a:	065a      	lsls	r2, r3, #25
    5c9c:	d500      	bpl.n	5ca0 <_vfiprintf_r+0x1e8>
    5c9e:	e73a      	b.n	5b16 <_vfiprintf_r+0x5e>
    5ca0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5ca2:	b01f      	add	sp, #124	; 0x7c
    5ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ca6:	46c0      	nop			; (mov r8, r8)
    5ca8:	00006988 	.word	0x00006988
    5cac:	000069a8 	.word	0x000069a8
    5cb0:	000069c8 	.word	0x000069c8
    5cb4:	0000695a 	.word	0x0000695a
    5cb8:	0000695e 	.word	0x0000695e
    5cbc:	00000000 	.word	0x00000000
    5cc0:	00006954 	.word	0x00006954
    5cc4:	00005a93 	.word	0x00005a93

00005cc8 <_printf_common>:
    5cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5cca:	1c15      	adds	r5, r2, #0
    5ccc:	9301      	str	r3, [sp, #4]
    5cce:	690a      	ldr	r2, [r1, #16]
    5cd0:	688b      	ldr	r3, [r1, #8]
    5cd2:	1c06      	adds	r6, r0, #0
    5cd4:	1c0c      	adds	r4, r1, #0
    5cd6:	4293      	cmp	r3, r2
    5cd8:	da00      	bge.n	5cdc <_printf_common+0x14>
    5cda:	1c13      	adds	r3, r2, #0
    5cdc:	1c22      	adds	r2, r4, #0
    5cde:	602b      	str	r3, [r5, #0]
    5ce0:	3243      	adds	r2, #67	; 0x43
    5ce2:	7812      	ldrb	r2, [r2, #0]
    5ce4:	2a00      	cmp	r2, #0
    5ce6:	d001      	beq.n	5cec <_printf_common+0x24>
    5ce8:	3301      	adds	r3, #1
    5cea:	602b      	str	r3, [r5, #0]
    5cec:	6820      	ldr	r0, [r4, #0]
    5cee:	0680      	lsls	r0, r0, #26
    5cf0:	d502      	bpl.n	5cf8 <_printf_common+0x30>
    5cf2:	682b      	ldr	r3, [r5, #0]
    5cf4:	3302      	adds	r3, #2
    5cf6:	602b      	str	r3, [r5, #0]
    5cf8:	6821      	ldr	r1, [r4, #0]
    5cfa:	2706      	movs	r7, #6
    5cfc:	400f      	ands	r7, r1
    5cfe:	d01f      	beq.n	5d40 <_printf_common+0x78>
    5d00:	1c23      	adds	r3, r4, #0
    5d02:	3343      	adds	r3, #67	; 0x43
    5d04:	781b      	ldrb	r3, [r3, #0]
    5d06:	1e5a      	subs	r2, r3, #1
    5d08:	4193      	sbcs	r3, r2
    5d0a:	6822      	ldr	r2, [r4, #0]
    5d0c:	0692      	lsls	r2, r2, #26
    5d0e:	d51f      	bpl.n	5d50 <_printf_common+0x88>
    5d10:	18e1      	adds	r1, r4, r3
    5d12:	3140      	adds	r1, #64	; 0x40
    5d14:	2030      	movs	r0, #48	; 0x30
    5d16:	70c8      	strb	r0, [r1, #3]
    5d18:	1c21      	adds	r1, r4, #0
    5d1a:	1c5a      	adds	r2, r3, #1
    5d1c:	3145      	adds	r1, #69	; 0x45
    5d1e:	7809      	ldrb	r1, [r1, #0]
    5d20:	18a2      	adds	r2, r4, r2
    5d22:	3240      	adds	r2, #64	; 0x40
    5d24:	3302      	adds	r3, #2
    5d26:	70d1      	strb	r1, [r2, #3]
    5d28:	e012      	b.n	5d50 <_printf_common+0x88>
    5d2a:	1c22      	adds	r2, r4, #0
    5d2c:	1c30      	adds	r0, r6, #0
    5d2e:	9901      	ldr	r1, [sp, #4]
    5d30:	3219      	adds	r2, #25
    5d32:	2301      	movs	r3, #1
    5d34:	9f08      	ldr	r7, [sp, #32]
    5d36:	47b8      	blx	r7
    5d38:	3001      	adds	r0, #1
    5d3a:	d011      	beq.n	5d60 <_printf_common+0x98>
    5d3c:	9f00      	ldr	r7, [sp, #0]
    5d3e:	3701      	adds	r7, #1
    5d40:	9700      	str	r7, [sp, #0]
    5d42:	68e0      	ldr	r0, [r4, #12]
    5d44:	6829      	ldr	r1, [r5, #0]
    5d46:	9f00      	ldr	r7, [sp, #0]
    5d48:	1a43      	subs	r3, r0, r1
    5d4a:	429f      	cmp	r7, r3
    5d4c:	dbed      	blt.n	5d2a <_printf_common+0x62>
    5d4e:	e7d7      	b.n	5d00 <_printf_common+0x38>
    5d50:	1c22      	adds	r2, r4, #0
    5d52:	1c30      	adds	r0, r6, #0
    5d54:	9901      	ldr	r1, [sp, #4]
    5d56:	3243      	adds	r2, #67	; 0x43
    5d58:	9f08      	ldr	r7, [sp, #32]
    5d5a:	47b8      	blx	r7
    5d5c:	3001      	adds	r0, #1
    5d5e:	d102      	bne.n	5d66 <_printf_common+0x9e>
    5d60:	2001      	movs	r0, #1
    5d62:	4240      	negs	r0, r0
    5d64:	e023      	b.n	5dae <_printf_common+0xe6>
    5d66:	6820      	ldr	r0, [r4, #0]
    5d68:	2106      	movs	r1, #6
    5d6a:	682b      	ldr	r3, [r5, #0]
    5d6c:	68e2      	ldr	r2, [r4, #12]
    5d6e:	4001      	ands	r1, r0
    5d70:	2500      	movs	r5, #0
    5d72:	2904      	cmp	r1, #4
    5d74:	d103      	bne.n	5d7e <_printf_common+0xb6>
    5d76:	1ad5      	subs	r5, r2, r3
    5d78:	43eb      	mvns	r3, r5
    5d7a:	17db      	asrs	r3, r3, #31
    5d7c:	401d      	ands	r5, r3
    5d7e:	68a2      	ldr	r2, [r4, #8]
    5d80:	6923      	ldr	r3, [r4, #16]
    5d82:	429a      	cmp	r2, r3
    5d84:	dd01      	ble.n	5d8a <_printf_common+0xc2>
    5d86:	1ad3      	subs	r3, r2, r3
    5d88:	18ed      	adds	r5, r5, r3
    5d8a:	2700      	movs	r7, #0
    5d8c:	9700      	str	r7, [sp, #0]
    5d8e:	9f00      	ldr	r7, [sp, #0]
    5d90:	42af      	cmp	r7, r5
    5d92:	da0b      	bge.n	5dac <_printf_common+0xe4>
    5d94:	1c22      	adds	r2, r4, #0
    5d96:	1c30      	adds	r0, r6, #0
    5d98:	9901      	ldr	r1, [sp, #4]
    5d9a:	321a      	adds	r2, #26
    5d9c:	2301      	movs	r3, #1
    5d9e:	9f08      	ldr	r7, [sp, #32]
    5da0:	47b8      	blx	r7
    5da2:	3001      	adds	r0, #1
    5da4:	d0dc      	beq.n	5d60 <_printf_common+0x98>
    5da6:	9f00      	ldr	r7, [sp, #0]
    5da8:	3701      	adds	r7, #1
    5daa:	e7ef      	b.n	5d8c <_printf_common+0xc4>
    5dac:	2000      	movs	r0, #0
    5dae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005db0 <_printf_i>:
    5db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5db2:	1c0d      	adds	r5, r1, #0
    5db4:	b08b      	sub	sp, #44	; 0x2c
    5db6:	3543      	adds	r5, #67	; 0x43
    5db8:	9206      	str	r2, [sp, #24]
    5dba:	9005      	str	r0, [sp, #20]
    5dbc:	9307      	str	r3, [sp, #28]
    5dbe:	9504      	str	r5, [sp, #16]
    5dc0:	7e0b      	ldrb	r3, [r1, #24]
    5dc2:	1c0c      	adds	r4, r1, #0
    5dc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5dc6:	2b6e      	cmp	r3, #110	; 0x6e
    5dc8:	d100      	bne.n	5dcc <_printf_i+0x1c>
    5dca:	e0a7      	b.n	5f1c <_printf_i+0x16c>
    5dcc:	d811      	bhi.n	5df2 <_printf_i+0x42>
    5dce:	2b63      	cmp	r3, #99	; 0x63
    5dd0:	d022      	beq.n	5e18 <_printf_i+0x68>
    5dd2:	d809      	bhi.n	5de8 <_printf_i+0x38>
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d100      	bne.n	5dda <_printf_i+0x2a>
    5dd8:	e0b0      	b.n	5f3c <_printf_i+0x18c>
    5dda:	2b58      	cmp	r3, #88	; 0x58
    5ddc:	d000      	beq.n	5de0 <_printf_i+0x30>
    5dde:	e0c0      	b.n	5f62 <_printf_i+0x1b2>
    5de0:	3145      	adds	r1, #69	; 0x45
    5de2:	700b      	strb	r3, [r1, #0]
    5de4:	4d7b      	ldr	r5, [pc, #492]	; (5fd4 <_printf_i+0x224>)
    5de6:	e04e      	b.n	5e86 <_printf_i+0xd6>
    5de8:	2b64      	cmp	r3, #100	; 0x64
    5dea:	d01c      	beq.n	5e26 <_printf_i+0x76>
    5dec:	2b69      	cmp	r3, #105	; 0x69
    5dee:	d01a      	beq.n	5e26 <_printf_i+0x76>
    5df0:	e0b7      	b.n	5f62 <_printf_i+0x1b2>
    5df2:	2b73      	cmp	r3, #115	; 0x73
    5df4:	d100      	bne.n	5df8 <_printf_i+0x48>
    5df6:	e0a5      	b.n	5f44 <_printf_i+0x194>
    5df8:	d809      	bhi.n	5e0e <_printf_i+0x5e>
    5dfa:	2b6f      	cmp	r3, #111	; 0x6f
    5dfc:	d029      	beq.n	5e52 <_printf_i+0xa2>
    5dfe:	2b70      	cmp	r3, #112	; 0x70
    5e00:	d000      	beq.n	5e04 <_printf_i+0x54>
    5e02:	e0ae      	b.n	5f62 <_printf_i+0x1b2>
    5e04:	680e      	ldr	r6, [r1, #0]
    5e06:	2320      	movs	r3, #32
    5e08:	4333      	orrs	r3, r6
    5e0a:	600b      	str	r3, [r1, #0]
    5e0c:	e036      	b.n	5e7c <_printf_i+0xcc>
    5e0e:	2b75      	cmp	r3, #117	; 0x75
    5e10:	d01f      	beq.n	5e52 <_printf_i+0xa2>
    5e12:	2b78      	cmp	r3, #120	; 0x78
    5e14:	d032      	beq.n	5e7c <_printf_i+0xcc>
    5e16:	e0a4      	b.n	5f62 <_printf_i+0x1b2>
    5e18:	6813      	ldr	r3, [r2, #0]
    5e1a:	1c0d      	adds	r5, r1, #0
    5e1c:	1d19      	adds	r1, r3, #4
    5e1e:	3542      	adds	r5, #66	; 0x42
    5e20:	6011      	str	r1, [r2, #0]
    5e22:	681b      	ldr	r3, [r3, #0]
    5e24:	e09f      	b.n	5f66 <_printf_i+0x1b6>
    5e26:	6821      	ldr	r1, [r4, #0]
    5e28:	6813      	ldr	r3, [r2, #0]
    5e2a:	060e      	lsls	r6, r1, #24
    5e2c:	d503      	bpl.n	5e36 <_printf_i+0x86>
    5e2e:	1d19      	adds	r1, r3, #4
    5e30:	6011      	str	r1, [r2, #0]
    5e32:	681e      	ldr	r6, [r3, #0]
    5e34:	e005      	b.n	5e42 <_printf_i+0x92>
    5e36:	0648      	lsls	r0, r1, #25
    5e38:	d5f9      	bpl.n	5e2e <_printf_i+0x7e>
    5e3a:	1d19      	adds	r1, r3, #4
    5e3c:	6011      	str	r1, [r2, #0]
    5e3e:	2100      	movs	r1, #0
    5e40:	5e5e      	ldrsh	r6, [r3, r1]
    5e42:	4b64      	ldr	r3, [pc, #400]	; (5fd4 <_printf_i+0x224>)
    5e44:	2e00      	cmp	r6, #0
    5e46:	da3b      	bge.n	5ec0 <_printf_i+0x110>
    5e48:	9d04      	ldr	r5, [sp, #16]
    5e4a:	222d      	movs	r2, #45	; 0x2d
    5e4c:	4276      	negs	r6, r6
    5e4e:	702a      	strb	r2, [r5, #0]
    5e50:	e036      	b.n	5ec0 <_printf_i+0x110>
    5e52:	6821      	ldr	r1, [r4, #0]
    5e54:	6813      	ldr	r3, [r2, #0]
    5e56:	060e      	lsls	r6, r1, #24
    5e58:	d503      	bpl.n	5e62 <_printf_i+0xb2>
    5e5a:	1d19      	adds	r1, r3, #4
    5e5c:	6011      	str	r1, [r2, #0]
    5e5e:	681e      	ldr	r6, [r3, #0]
    5e60:	e004      	b.n	5e6c <_printf_i+0xbc>
    5e62:	0648      	lsls	r0, r1, #25
    5e64:	d5f9      	bpl.n	5e5a <_printf_i+0xaa>
    5e66:	1d19      	adds	r1, r3, #4
    5e68:	881e      	ldrh	r6, [r3, #0]
    5e6a:	6011      	str	r1, [r2, #0]
    5e6c:	4b59      	ldr	r3, [pc, #356]	; (5fd4 <_printf_i+0x224>)
    5e6e:	7e22      	ldrb	r2, [r4, #24]
    5e70:	9303      	str	r3, [sp, #12]
    5e72:	2708      	movs	r7, #8
    5e74:	2a6f      	cmp	r2, #111	; 0x6f
    5e76:	d01e      	beq.n	5eb6 <_printf_i+0x106>
    5e78:	270a      	movs	r7, #10
    5e7a:	e01c      	b.n	5eb6 <_printf_i+0x106>
    5e7c:	1c23      	adds	r3, r4, #0
    5e7e:	2178      	movs	r1, #120	; 0x78
    5e80:	3345      	adds	r3, #69	; 0x45
    5e82:	4d55      	ldr	r5, [pc, #340]	; (5fd8 <_printf_i+0x228>)
    5e84:	7019      	strb	r1, [r3, #0]
    5e86:	6811      	ldr	r1, [r2, #0]
    5e88:	6823      	ldr	r3, [r4, #0]
    5e8a:	1d08      	adds	r0, r1, #4
    5e8c:	9503      	str	r5, [sp, #12]
    5e8e:	6010      	str	r0, [r2, #0]
    5e90:	061e      	lsls	r6, r3, #24
    5e92:	d501      	bpl.n	5e98 <_printf_i+0xe8>
    5e94:	680e      	ldr	r6, [r1, #0]
    5e96:	e002      	b.n	5e9e <_printf_i+0xee>
    5e98:	0658      	lsls	r0, r3, #25
    5e9a:	d5fb      	bpl.n	5e94 <_printf_i+0xe4>
    5e9c:	880e      	ldrh	r6, [r1, #0]
    5e9e:	07d9      	lsls	r1, r3, #31
    5ea0:	d502      	bpl.n	5ea8 <_printf_i+0xf8>
    5ea2:	2220      	movs	r2, #32
    5ea4:	4313      	orrs	r3, r2
    5ea6:	6023      	str	r3, [r4, #0]
    5ea8:	2710      	movs	r7, #16
    5eaa:	2e00      	cmp	r6, #0
    5eac:	d103      	bne.n	5eb6 <_printf_i+0x106>
    5eae:	6822      	ldr	r2, [r4, #0]
    5eb0:	2320      	movs	r3, #32
    5eb2:	439a      	bics	r2, r3
    5eb4:	6022      	str	r2, [r4, #0]
    5eb6:	1c23      	adds	r3, r4, #0
    5eb8:	2200      	movs	r2, #0
    5eba:	3343      	adds	r3, #67	; 0x43
    5ebc:	701a      	strb	r2, [r3, #0]
    5ebe:	e001      	b.n	5ec4 <_printf_i+0x114>
    5ec0:	9303      	str	r3, [sp, #12]
    5ec2:	270a      	movs	r7, #10
    5ec4:	6863      	ldr	r3, [r4, #4]
    5ec6:	60a3      	str	r3, [r4, #8]
    5ec8:	2b00      	cmp	r3, #0
    5eca:	db03      	blt.n	5ed4 <_printf_i+0x124>
    5ecc:	6825      	ldr	r5, [r4, #0]
    5ece:	2204      	movs	r2, #4
    5ed0:	4395      	bics	r5, r2
    5ed2:	6025      	str	r5, [r4, #0]
    5ed4:	2e00      	cmp	r6, #0
    5ed6:	d102      	bne.n	5ede <_printf_i+0x12e>
    5ed8:	9d04      	ldr	r5, [sp, #16]
    5eda:	2b00      	cmp	r3, #0
    5edc:	d00e      	beq.n	5efc <_printf_i+0x14c>
    5ede:	9d04      	ldr	r5, [sp, #16]
    5ee0:	1c30      	adds	r0, r6, #0
    5ee2:	1c39      	adds	r1, r7, #0
    5ee4:	f7ff fc14 	bl	5710 <__aeabi_uidivmod>
    5ee8:	9803      	ldr	r0, [sp, #12]
    5eea:	3d01      	subs	r5, #1
    5eec:	5c43      	ldrb	r3, [r0, r1]
    5eee:	1c30      	adds	r0, r6, #0
    5ef0:	702b      	strb	r3, [r5, #0]
    5ef2:	1c39      	adds	r1, r7, #0
    5ef4:	f7ff fbc8 	bl	5688 <__aeabi_uidiv>
    5ef8:	1e06      	subs	r6, r0, #0
    5efa:	d1f1      	bne.n	5ee0 <_printf_i+0x130>
    5efc:	2f08      	cmp	r7, #8
    5efe:	d109      	bne.n	5f14 <_printf_i+0x164>
    5f00:	6821      	ldr	r1, [r4, #0]
    5f02:	07c9      	lsls	r1, r1, #31
    5f04:	d506      	bpl.n	5f14 <_printf_i+0x164>
    5f06:	6862      	ldr	r2, [r4, #4]
    5f08:	6923      	ldr	r3, [r4, #16]
    5f0a:	429a      	cmp	r2, r3
    5f0c:	dc02      	bgt.n	5f14 <_printf_i+0x164>
    5f0e:	3d01      	subs	r5, #1
    5f10:	2330      	movs	r3, #48	; 0x30
    5f12:	702b      	strb	r3, [r5, #0]
    5f14:	9e04      	ldr	r6, [sp, #16]
    5f16:	1b73      	subs	r3, r6, r5
    5f18:	6123      	str	r3, [r4, #16]
    5f1a:	e02a      	b.n	5f72 <_printf_i+0x1c2>
    5f1c:	6808      	ldr	r0, [r1, #0]
    5f1e:	6813      	ldr	r3, [r2, #0]
    5f20:	6949      	ldr	r1, [r1, #20]
    5f22:	0605      	lsls	r5, r0, #24
    5f24:	d504      	bpl.n	5f30 <_printf_i+0x180>
    5f26:	1d18      	adds	r0, r3, #4
    5f28:	6010      	str	r0, [r2, #0]
    5f2a:	681b      	ldr	r3, [r3, #0]
    5f2c:	6019      	str	r1, [r3, #0]
    5f2e:	e005      	b.n	5f3c <_printf_i+0x18c>
    5f30:	0646      	lsls	r6, r0, #25
    5f32:	d5f8      	bpl.n	5f26 <_printf_i+0x176>
    5f34:	1d18      	adds	r0, r3, #4
    5f36:	6010      	str	r0, [r2, #0]
    5f38:	681b      	ldr	r3, [r3, #0]
    5f3a:	8019      	strh	r1, [r3, #0]
    5f3c:	2300      	movs	r3, #0
    5f3e:	6123      	str	r3, [r4, #16]
    5f40:	9d04      	ldr	r5, [sp, #16]
    5f42:	e016      	b.n	5f72 <_printf_i+0x1c2>
    5f44:	6813      	ldr	r3, [r2, #0]
    5f46:	1d19      	adds	r1, r3, #4
    5f48:	6011      	str	r1, [r2, #0]
    5f4a:	681d      	ldr	r5, [r3, #0]
    5f4c:	1c28      	adds	r0, r5, #0
    5f4e:	f000 fbe9 	bl	6724 <strlen>
    5f52:	6863      	ldr	r3, [r4, #4]
    5f54:	6120      	str	r0, [r4, #16]
    5f56:	4298      	cmp	r0, r3
    5f58:	d900      	bls.n	5f5c <_printf_i+0x1ac>
    5f5a:	6123      	str	r3, [r4, #16]
    5f5c:	6920      	ldr	r0, [r4, #16]
    5f5e:	6060      	str	r0, [r4, #4]
    5f60:	e004      	b.n	5f6c <_printf_i+0x1bc>
    5f62:	1c25      	adds	r5, r4, #0
    5f64:	3542      	adds	r5, #66	; 0x42
    5f66:	702b      	strb	r3, [r5, #0]
    5f68:	2301      	movs	r3, #1
    5f6a:	6123      	str	r3, [r4, #16]
    5f6c:	9e04      	ldr	r6, [sp, #16]
    5f6e:	2300      	movs	r3, #0
    5f70:	7033      	strb	r3, [r6, #0]
    5f72:	9e07      	ldr	r6, [sp, #28]
    5f74:	9805      	ldr	r0, [sp, #20]
    5f76:	9600      	str	r6, [sp, #0]
    5f78:	1c21      	adds	r1, r4, #0
    5f7a:	aa09      	add	r2, sp, #36	; 0x24
    5f7c:	9b06      	ldr	r3, [sp, #24]
    5f7e:	f7ff fea3 	bl	5cc8 <_printf_common>
    5f82:	3001      	adds	r0, #1
    5f84:	d102      	bne.n	5f8c <_printf_i+0x1dc>
    5f86:	2001      	movs	r0, #1
    5f88:	4240      	negs	r0, r0
    5f8a:	e021      	b.n	5fd0 <_printf_i+0x220>
    5f8c:	1c2a      	adds	r2, r5, #0
    5f8e:	9805      	ldr	r0, [sp, #20]
    5f90:	9906      	ldr	r1, [sp, #24]
    5f92:	6923      	ldr	r3, [r4, #16]
    5f94:	9d07      	ldr	r5, [sp, #28]
    5f96:	47a8      	blx	r5
    5f98:	3001      	adds	r0, #1
    5f9a:	d0f4      	beq.n	5f86 <_printf_i+0x1d6>
    5f9c:	6826      	ldr	r6, [r4, #0]
    5f9e:	07b6      	lsls	r6, r6, #30
    5fa0:	d405      	bmi.n	5fae <_printf_i+0x1fe>
    5fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5fa4:	68e0      	ldr	r0, [r4, #12]
    5fa6:	4298      	cmp	r0, r3
    5fa8:	da12      	bge.n	5fd0 <_printf_i+0x220>
    5faa:	1c18      	adds	r0, r3, #0
    5fac:	e010      	b.n	5fd0 <_printf_i+0x220>
    5fae:	2500      	movs	r5, #0
    5fb0:	68e0      	ldr	r0, [r4, #12]
    5fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
    5fb4:	1a43      	subs	r3, r0, r1
    5fb6:	429d      	cmp	r5, r3
    5fb8:	daf3      	bge.n	5fa2 <_printf_i+0x1f2>
    5fba:	1c22      	adds	r2, r4, #0
    5fbc:	9805      	ldr	r0, [sp, #20]
    5fbe:	9906      	ldr	r1, [sp, #24]
    5fc0:	3219      	adds	r2, #25
    5fc2:	2301      	movs	r3, #1
    5fc4:	9e07      	ldr	r6, [sp, #28]
    5fc6:	47b0      	blx	r6
    5fc8:	3001      	adds	r0, #1
    5fca:	d0dc      	beq.n	5f86 <_printf_i+0x1d6>
    5fcc:	3501      	adds	r5, #1
    5fce:	e7ef      	b.n	5fb0 <_printf_i+0x200>
    5fd0:	b00b      	add	sp, #44	; 0x2c
    5fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fd4:	00006965 	.word	0x00006965
    5fd8:	00006976 	.word	0x00006976

00005fdc <__swbuf_r>:
    5fdc:	b570      	push	{r4, r5, r6, lr}
    5fde:	1c05      	adds	r5, r0, #0
    5fe0:	1c0e      	adds	r6, r1, #0
    5fe2:	1c14      	adds	r4, r2, #0
    5fe4:	2800      	cmp	r0, #0
    5fe6:	d004      	beq.n	5ff2 <__swbuf_r+0x16>
    5fe8:	6982      	ldr	r2, [r0, #24]
    5fea:	2a00      	cmp	r2, #0
    5fec:	d101      	bne.n	5ff2 <__swbuf_r+0x16>
    5fee:	f000 f9c9 	bl	6384 <__sinit>
    5ff2:	4b23      	ldr	r3, [pc, #140]	; (6080 <__swbuf_r+0xa4>)
    5ff4:	429c      	cmp	r4, r3
    5ff6:	d101      	bne.n	5ffc <__swbuf_r+0x20>
    5ff8:	686c      	ldr	r4, [r5, #4]
    5ffa:	e008      	b.n	600e <__swbuf_r+0x32>
    5ffc:	4b21      	ldr	r3, [pc, #132]	; (6084 <__swbuf_r+0xa8>)
    5ffe:	429c      	cmp	r4, r3
    6000:	d101      	bne.n	6006 <__swbuf_r+0x2a>
    6002:	68ac      	ldr	r4, [r5, #8]
    6004:	e003      	b.n	600e <__swbuf_r+0x32>
    6006:	4b20      	ldr	r3, [pc, #128]	; (6088 <__swbuf_r+0xac>)
    6008:	429c      	cmp	r4, r3
    600a:	d100      	bne.n	600e <__swbuf_r+0x32>
    600c:	68ec      	ldr	r4, [r5, #12]
    600e:	69a3      	ldr	r3, [r4, #24]
    6010:	60a3      	str	r3, [r4, #8]
    6012:	89a3      	ldrh	r3, [r4, #12]
    6014:	071a      	lsls	r2, r3, #28
    6016:	d50a      	bpl.n	602e <__swbuf_r+0x52>
    6018:	6923      	ldr	r3, [r4, #16]
    601a:	2b00      	cmp	r3, #0
    601c:	d007      	beq.n	602e <__swbuf_r+0x52>
    601e:	6822      	ldr	r2, [r4, #0]
    6020:	6923      	ldr	r3, [r4, #16]
    6022:	b2f6      	uxtb	r6, r6
    6024:	1ad0      	subs	r0, r2, r3
    6026:	6962      	ldr	r2, [r4, #20]
    6028:	4290      	cmp	r0, r2
    602a:	db0f      	blt.n	604c <__swbuf_r+0x70>
    602c:	e008      	b.n	6040 <__swbuf_r+0x64>
    602e:	1c28      	adds	r0, r5, #0
    6030:	1c21      	adds	r1, r4, #0
    6032:	f000 f82b 	bl	608c <__swsetup_r>
    6036:	2800      	cmp	r0, #0
    6038:	d0f1      	beq.n	601e <__swbuf_r+0x42>
    603a:	2001      	movs	r0, #1
    603c:	4240      	negs	r0, r0
    603e:	e01d      	b.n	607c <__swbuf_r+0xa0>
    6040:	1c28      	adds	r0, r5, #0
    6042:	1c21      	adds	r1, r4, #0
    6044:	f000 f91e 	bl	6284 <_fflush_r>
    6048:	2800      	cmp	r0, #0
    604a:	d1f6      	bne.n	603a <__swbuf_r+0x5e>
    604c:	68a3      	ldr	r3, [r4, #8]
    604e:	3001      	adds	r0, #1
    6050:	3b01      	subs	r3, #1
    6052:	60a3      	str	r3, [r4, #8]
    6054:	6823      	ldr	r3, [r4, #0]
    6056:	1c5a      	adds	r2, r3, #1
    6058:	6022      	str	r2, [r4, #0]
    605a:	701e      	strb	r6, [r3, #0]
    605c:	6963      	ldr	r3, [r4, #20]
    605e:	4298      	cmp	r0, r3
    6060:	d005      	beq.n	606e <__swbuf_r+0x92>
    6062:	89a3      	ldrh	r3, [r4, #12]
    6064:	1c30      	adds	r0, r6, #0
    6066:	07da      	lsls	r2, r3, #31
    6068:	d508      	bpl.n	607c <__swbuf_r+0xa0>
    606a:	2e0a      	cmp	r6, #10
    606c:	d106      	bne.n	607c <__swbuf_r+0xa0>
    606e:	1c28      	adds	r0, r5, #0
    6070:	1c21      	adds	r1, r4, #0
    6072:	f000 f907 	bl	6284 <_fflush_r>
    6076:	2800      	cmp	r0, #0
    6078:	d1df      	bne.n	603a <__swbuf_r+0x5e>
    607a:	1c30      	adds	r0, r6, #0
    607c:	bd70      	pop	{r4, r5, r6, pc}
    607e:	46c0      	nop			; (mov r8, r8)
    6080:	00006988 	.word	0x00006988
    6084:	000069a8 	.word	0x000069a8
    6088:	000069c8 	.word	0x000069c8

0000608c <__swsetup_r>:
    608c:	4b34      	ldr	r3, [pc, #208]	; (6160 <__swsetup_r+0xd4>)
    608e:	b570      	push	{r4, r5, r6, lr}
    6090:	681d      	ldr	r5, [r3, #0]
    6092:	1c06      	adds	r6, r0, #0
    6094:	1c0c      	adds	r4, r1, #0
    6096:	2d00      	cmp	r5, #0
    6098:	d005      	beq.n	60a6 <__swsetup_r+0x1a>
    609a:	69a9      	ldr	r1, [r5, #24]
    609c:	2900      	cmp	r1, #0
    609e:	d102      	bne.n	60a6 <__swsetup_r+0x1a>
    60a0:	1c28      	adds	r0, r5, #0
    60a2:	f000 f96f 	bl	6384 <__sinit>
    60a6:	4b2f      	ldr	r3, [pc, #188]	; (6164 <__swsetup_r+0xd8>)
    60a8:	429c      	cmp	r4, r3
    60aa:	d101      	bne.n	60b0 <__swsetup_r+0x24>
    60ac:	686c      	ldr	r4, [r5, #4]
    60ae:	e008      	b.n	60c2 <__swsetup_r+0x36>
    60b0:	4b2d      	ldr	r3, [pc, #180]	; (6168 <__swsetup_r+0xdc>)
    60b2:	429c      	cmp	r4, r3
    60b4:	d101      	bne.n	60ba <__swsetup_r+0x2e>
    60b6:	68ac      	ldr	r4, [r5, #8]
    60b8:	e003      	b.n	60c2 <__swsetup_r+0x36>
    60ba:	4b2c      	ldr	r3, [pc, #176]	; (616c <__swsetup_r+0xe0>)
    60bc:	429c      	cmp	r4, r3
    60be:	d100      	bne.n	60c2 <__swsetup_r+0x36>
    60c0:	68ec      	ldr	r4, [r5, #12]
    60c2:	89a2      	ldrh	r2, [r4, #12]
    60c4:	b293      	uxth	r3, r2
    60c6:	0719      	lsls	r1, r3, #28
    60c8:	d421      	bmi.n	610e <__swsetup_r+0x82>
    60ca:	06d9      	lsls	r1, r3, #27
    60cc:	d405      	bmi.n	60da <__swsetup_r+0x4e>
    60ce:	2309      	movs	r3, #9
    60d0:	6033      	str	r3, [r6, #0]
    60d2:	2340      	movs	r3, #64	; 0x40
    60d4:	431a      	orrs	r2, r3
    60d6:	81a2      	strh	r2, [r4, #12]
    60d8:	e03f      	b.n	615a <__swsetup_r+0xce>
    60da:	075a      	lsls	r2, r3, #29
    60dc:	d513      	bpl.n	6106 <__swsetup_r+0x7a>
    60de:	6b61      	ldr	r1, [r4, #52]	; 0x34
    60e0:	2900      	cmp	r1, #0
    60e2:	d008      	beq.n	60f6 <__swsetup_r+0x6a>
    60e4:	1c23      	adds	r3, r4, #0
    60e6:	3344      	adds	r3, #68	; 0x44
    60e8:	4299      	cmp	r1, r3
    60ea:	d002      	beq.n	60f2 <__swsetup_r+0x66>
    60ec:	1c30      	adds	r0, r6, #0
    60ee:	f000 fa1f 	bl	6530 <_free_r>
    60f2:	2300      	movs	r3, #0
    60f4:	6363      	str	r3, [r4, #52]	; 0x34
    60f6:	89a3      	ldrh	r3, [r4, #12]
    60f8:	2224      	movs	r2, #36	; 0x24
    60fa:	4393      	bics	r3, r2
    60fc:	81a3      	strh	r3, [r4, #12]
    60fe:	2300      	movs	r3, #0
    6100:	6063      	str	r3, [r4, #4]
    6102:	6923      	ldr	r3, [r4, #16]
    6104:	6023      	str	r3, [r4, #0]
    6106:	89a3      	ldrh	r3, [r4, #12]
    6108:	2208      	movs	r2, #8
    610a:	4313      	orrs	r3, r2
    610c:	81a3      	strh	r3, [r4, #12]
    610e:	6921      	ldr	r1, [r4, #16]
    6110:	2900      	cmp	r1, #0
    6112:	d10b      	bne.n	612c <__swsetup_r+0xa0>
    6114:	89a3      	ldrh	r3, [r4, #12]
    6116:	22a0      	movs	r2, #160	; 0xa0
    6118:	0092      	lsls	r2, r2, #2
    611a:	401a      	ands	r2, r3
    611c:	2380      	movs	r3, #128	; 0x80
    611e:	009b      	lsls	r3, r3, #2
    6120:	429a      	cmp	r2, r3
    6122:	d003      	beq.n	612c <__swsetup_r+0xa0>
    6124:	1c30      	adds	r0, r6, #0
    6126:	1c21      	adds	r1, r4, #0
    6128:	f000 f99c 	bl	6464 <__smakebuf_r>
    612c:	89a3      	ldrh	r3, [r4, #12]
    612e:	2201      	movs	r2, #1
    6130:	401a      	ands	r2, r3
    6132:	d005      	beq.n	6140 <__swsetup_r+0xb4>
    6134:	6961      	ldr	r1, [r4, #20]
    6136:	2200      	movs	r2, #0
    6138:	60a2      	str	r2, [r4, #8]
    613a:	424a      	negs	r2, r1
    613c:	61a2      	str	r2, [r4, #24]
    613e:	e003      	b.n	6148 <__swsetup_r+0xbc>
    6140:	0799      	lsls	r1, r3, #30
    6142:	d400      	bmi.n	6146 <__swsetup_r+0xba>
    6144:	6962      	ldr	r2, [r4, #20]
    6146:	60a2      	str	r2, [r4, #8]
    6148:	6922      	ldr	r2, [r4, #16]
    614a:	2000      	movs	r0, #0
    614c:	4282      	cmp	r2, r0
    614e:	d106      	bne.n	615e <__swsetup_r+0xd2>
    6150:	0619      	lsls	r1, r3, #24
    6152:	d504      	bpl.n	615e <__swsetup_r+0xd2>
    6154:	2240      	movs	r2, #64	; 0x40
    6156:	4313      	orrs	r3, r2
    6158:	81a3      	strh	r3, [r4, #12]
    615a:	2001      	movs	r0, #1
    615c:	4240      	negs	r0, r0
    615e:	bd70      	pop	{r4, r5, r6, pc}
    6160:	20000094 	.word	0x20000094
    6164:	00006988 	.word	0x00006988
    6168:	000069a8 	.word	0x000069a8
    616c:	000069c8 	.word	0x000069c8

00006170 <__sflush_r>:
    6170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6172:	898b      	ldrh	r3, [r1, #12]
    6174:	1c05      	adds	r5, r0, #0
    6176:	1c0c      	adds	r4, r1, #0
    6178:	0719      	lsls	r1, r3, #28
    617a:	d45e      	bmi.n	623a <__sflush_r+0xca>
    617c:	6862      	ldr	r2, [r4, #4]
    617e:	2a00      	cmp	r2, #0
    6180:	dc02      	bgt.n	6188 <__sflush_r+0x18>
    6182:	6c27      	ldr	r7, [r4, #64]	; 0x40
    6184:	2f00      	cmp	r7, #0
    6186:	dd1a      	ble.n	61be <__sflush_r+0x4e>
    6188:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    618a:	2f00      	cmp	r7, #0
    618c:	d017      	beq.n	61be <__sflush_r+0x4e>
    618e:	2200      	movs	r2, #0
    6190:	682e      	ldr	r6, [r5, #0]
    6192:	602a      	str	r2, [r5, #0]
    6194:	2280      	movs	r2, #128	; 0x80
    6196:	0152      	lsls	r2, r2, #5
    6198:	401a      	ands	r2, r3
    619a:	d001      	beq.n	61a0 <__sflush_r+0x30>
    619c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    619e:	e015      	b.n	61cc <__sflush_r+0x5c>
    61a0:	1c28      	adds	r0, r5, #0
    61a2:	6a21      	ldr	r1, [r4, #32]
    61a4:	2301      	movs	r3, #1
    61a6:	47b8      	blx	r7
    61a8:	1c02      	adds	r2, r0, #0
    61aa:	1c41      	adds	r1, r0, #1
    61ac:	d10e      	bne.n	61cc <__sflush_r+0x5c>
    61ae:	682b      	ldr	r3, [r5, #0]
    61b0:	2b00      	cmp	r3, #0
    61b2:	d00b      	beq.n	61cc <__sflush_r+0x5c>
    61b4:	2b1d      	cmp	r3, #29
    61b6:	d001      	beq.n	61bc <__sflush_r+0x4c>
    61b8:	2b16      	cmp	r3, #22
    61ba:	d102      	bne.n	61c2 <__sflush_r+0x52>
    61bc:	602e      	str	r6, [r5, #0]
    61be:	2000      	movs	r0, #0
    61c0:	e05e      	b.n	6280 <__sflush_r+0x110>
    61c2:	89a3      	ldrh	r3, [r4, #12]
    61c4:	2140      	movs	r1, #64	; 0x40
    61c6:	430b      	orrs	r3, r1
    61c8:	81a3      	strh	r3, [r4, #12]
    61ca:	e059      	b.n	6280 <__sflush_r+0x110>
    61cc:	89a3      	ldrh	r3, [r4, #12]
    61ce:	075f      	lsls	r7, r3, #29
    61d0:	d506      	bpl.n	61e0 <__sflush_r+0x70>
    61d2:	6861      	ldr	r1, [r4, #4]
    61d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    61d6:	1a52      	subs	r2, r2, r1
    61d8:	2b00      	cmp	r3, #0
    61da:	d001      	beq.n	61e0 <__sflush_r+0x70>
    61dc:	6c27      	ldr	r7, [r4, #64]	; 0x40
    61de:	1bd2      	subs	r2, r2, r7
    61e0:	1c28      	adds	r0, r5, #0
    61e2:	6a21      	ldr	r1, [r4, #32]
    61e4:	2300      	movs	r3, #0
    61e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    61e8:	47b8      	blx	r7
    61ea:	89a2      	ldrh	r2, [r4, #12]
    61ec:	1c41      	adds	r1, r0, #1
    61ee:	d106      	bne.n	61fe <__sflush_r+0x8e>
    61f0:	682b      	ldr	r3, [r5, #0]
    61f2:	2b00      	cmp	r3, #0
    61f4:	d003      	beq.n	61fe <__sflush_r+0x8e>
    61f6:	2b1d      	cmp	r3, #29
    61f8:	d001      	beq.n	61fe <__sflush_r+0x8e>
    61fa:	2b16      	cmp	r3, #22
    61fc:	d119      	bne.n	6232 <__sflush_r+0xc2>
    61fe:	2300      	movs	r3, #0
    6200:	6063      	str	r3, [r4, #4]
    6202:	6923      	ldr	r3, [r4, #16]
    6204:	6023      	str	r3, [r4, #0]
    6206:	04d7      	lsls	r7, r2, #19
    6208:	d505      	bpl.n	6216 <__sflush_r+0xa6>
    620a:	1c41      	adds	r1, r0, #1
    620c:	d102      	bne.n	6214 <__sflush_r+0xa4>
    620e:	682a      	ldr	r2, [r5, #0]
    6210:	2a00      	cmp	r2, #0
    6212:	d100      	bne.n	6216 <__sflush_r+0xa6>
    6214:	6560      	str	r0, [r4, #84]	; 0x54
    6216:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6218:	602e      	str	r6, [r5, #0]
    621a:	2900      	cmp	r1, #0
    621c:	d0cf      	beq.n	61be <__sflush_r+0x4e>
    621e:	1c23      	adds	r3, r4, #0
    6220:	3344      	adds	r3, #68	; 0x44
    6222:	4299      	cmp	r1, r3
    6224:	d002      	beq.n	622c <__sflush_r+0xbc>
    6226:	1c28      	adds	r0, r5, #0
    6228:	f000 f982 	bl	6530 <_free_r>
    622c:	2000      	movs	r0, #0
    622e:	6360      	str	r0, [r4, #52]	; 0x34
    6230:	e026      	b.n	6280 <__sflush_r+0x110>
    6232:	2340      	movs	r3, #64	; 0x40
    6234:	431a      	orrs	r2, r3
    6236:	81a2      	strh	r2, [r4, #12]
    6238:	e022      	b.n	6280 <__sflush_r+0x110>
    623a:	6926      	ldr	r6, [r4, #16]
    623c:	2e00      	cmp	r6, #0
    623e:	d0be      	beq.n	61be <__sflush_r+0x4e>
    6240:	6827      	ldr	r7, [r4, #0]
    6242:	2200      	movs	r2, #0
    6244:	1bbf      	subs	r7, r7, r6
    6246:	9701      	str	r7, [sp, #4]
    6248:	6026      	str	r6, [r4, #0]
    624a:	0799      	lsls	r1, r3, #30
    624c:	d100      	bne.n	6250 <__sflush_r+0xe0>
    624e:	6962      	ldr	r2, [r4, #20]
    6250:	60a2      	str	r2, [r4, #8]
    6252:	9f01      	ldr	r7, [sp, #4]
    6254:	2f00      	cmp	r7, #0
    6256:	ddb2      	ble.n	61be <__sflush_r+0x4e>
    6258:	1c28      	adds	r0, r5, #0
    625a:	6a21      	ldr	r1, [r4, #32]
    625c:	1c32      	adds	r2, r6, #0
    625e:	9b01      	ldr	r3, [sp, #4]
    6260:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    6262:	47b8      	blx	r7
    6264:	2800      	cmp	r0, #0
    6266:	dc06      	bgt.n	6276 <__sflush_r+0x106>
    6268:	89a3      	ldrh	r3, [r4, #12]
    626a:	2240      	movs	r2, #64	; 0x40
    626c:	4313      	orrs	r3, r2
    626e:	2001      	movs	r0, #1
    6270:	81a3      	strh	r3, [r4, #12]
    6272:	4240      	negs	r0, r0
    6274:	e004      	b.n	6280 <__sflush_r+0x110>
    6276:	9f01      	ldr	r7, [sp, #4]
    6278:	1836      	adds	r6, r6, r0
    627a:	1a3f      	subs	r7, r7, r0
    627c:	9701      	str	r7, [sp, #4]
    627e:	e7e8      	b.n	6252 <__sflush_r+0xe2>
    6280:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006284 <_fflush_r>:
    6284:	690a      	ldr	r2, [r1, #16]
    6286:	b538      	push	{r3, r4, r5, lr}
    6288:	1c05      	adds	r5, r0, #0
    628a:	1c0c      	adds	r4, r1, #0
    628c:	2a00      	cmp	r2, #0
    628e:	d101      	bne.n	6294 <_fflush_r+0x10>
    6290:	2000      	movs	r0, #0
    6292:	e01c      	b.n	62ce <_fflush_r+0x4a>
    6294:	2800      	cmp	r0, #0
    6296:	d004      	beq.n	62a2 <_fflush_r+0x1e>
    6298:	6983      	ldr	r3, [r0, #24]
    629a:	2b00      	cmp	r3, #0
    629c:	d101      	bne.n	62a2 <_fflush_r+0x1e>
    629e:	f000 f871 	bl	6384 <__sinit>
    62a2:	4b0b      	ldr	r3, [pc, #44]	; (62d0 <_fflush_r+0x4c>)
    62a4:	429c      	cmp	r4, r3
    62a6:	d101      	bne.n	62ac <_fflush_r+0x28>
    62a8:	686c      	ldr	r4, [r5, #4]
    62aa:	e008      	b.n	62be <_fflush_r+0x3a>
    62ac:	4b09      	ldr	r3, [pc, #36]	; (62d4 <_fflush_r+0x50>)
    62ae:	429c      	cmp	r4, r3
    62b0:	d101      	bne.n	62b6 <_fflush_r+0x32>
    62b2:	68ac      	ldr	r4, [r5, #8]
    62b4:	e003      	b.n	62be <_fflush_r+0x3a>
    62b6:	4b08      	ldr	r3, [pc, #32]	; (62d8 <_fflush_r+0x54>)
    62b8:	429c      	cmp	r4, r3
    62ba:	d100      	bne.n	62be <_fflush_r+0x3a>
    62bc:	68ec      	ldr	r4, [r5, #12]
    62be:	220c      	movs	r2, #12
    62c0:	5ea3      	ldrsh	r3, [r4, r2]
    62c2:	2b00      	cmp	r3, #0
    62c4:	d0e4      	beq.n	6290 <_fflush_r+0xc>
    62c6:	1c28      	adds	r0, r5, #0
    62c8:	1c21      	adds	r1, r4, #0
    62ca:	f7ff ff51 	bl	6170 <__sflush_r>
    62ce:	bd38      	pop	{r3, r4, r5, pc}
    62d0:	00006988 	.word	0x00006988
    62d4:	000069a8 	.word	0x000069a8
    62d8:	000069c8 	.word	0x000069c8

000062dc <_cleanup_r>:
    62dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62de:	1c04      	adds	r4, r0, #0
    62e0:	1c07      	adds	r7, r0, #0
    62e2:	3448      	adds	r4, #72	; 0x48
    62e4:	2c00      	cmp	r4, #0
    62e6:	d012      	beq.n	630e <_cleanup_r+0x32>
    62e8:	68a5      	ldr	r5, [r4, #8]
    62ea:	6866      	ldr	r6, [r4, #4]
    62ec:	3e01      	subs	r6, #1
    62ee:	d40c      	bmi.n	630a <_cleanup_r+0x2e>
    62f0:	89ab      	ldrh	r3, [r5, #12]
    62f2:	2b01      	cmp	r3, #1
    62f4:	d907      	bls.n	6306 <_cleanup_r+0x2a>
    62f6:	220e      	movs	r2, #14
    62f8:	5eab      	ldrsh	r3, [r5, r2]
    62fa:	3301      	adds	r3, #1
    62fc:	d003      	beq.n	6306 <_cleanup_r+0x2a>
    62fe:	1c38      	adds	r0, r7, #0
    6300:	1c29      	adds	r1, r5, #0
    6302:	f7ff ffbf 	bl	6284 <_fflush_r>
    6306:	3568      	adds	r5, #104	; 0x68
    6308:	e7f0      	b.n	62ec <_cleanup_r+0x10>
    630a:	6824      	ldr	r4, [r4, #0]
    630c:	e7ea      	b.n	62e4 <_cleanup_r+0x8>
    630e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006310 <std.isra.0>:
    6310:	2300      	movs	r3, #0
    6312:	b510      	push	{r4, lr}
    6314:	1c04      	adds	r4, r0, #0
    6316:	6003      	str	r3, [r0, #0]
    6318:	6043      	str	r3, [r0, #4]
    631a:	6083      	str	r3, [r0, #8]
    631c:	8181      	strh	r1, [r0, #12]
    631e:	6643      	str	r3, [r0, #100]	; 0x64
    6320:	81c2      	strh	r2, [r0, #14]
    6322:	6103      	str	r3, [r0, #16]
    6324:	6143      	str	r3, [r0, #20]
    6326:	6183      	str	r3, [r0, #24]
    6328:	1c19      	adds	r1, r3, #0
    632a:	2208      	movs	r2, #8
    632c:	305c      	adds	r0, #92	; 0x5c
    632e:	f7ff faac 	bl	588a <memset>
    6332:	4b05      	ldr	r3, [pc, #20]	; (6348 <std.isra.0+0x38>)
    6334:	6224      	str	r4, [r4, #32]
    6336:	6263      	str	r3, [r4, #36]	; 0x24
    6338:	4b04      	ldr	r3, [pc, #16]	; (634c <std.isra.0+0x3c>)
    633a:	62a3      	str	r3, [r4, #40]	; 0x28
    633c:	4b04      	ldr	r3, [pc, #16]	; (6350 <std.isra.0+0x40>)
    633e:	62e3      	str	r3, [r4, #44]	; 0x2c
    6340:	4b04      	ldr	r3, [pc, #16]	; (6354 <std.isra.0+0x44>)
    6342:	6323      	str	r3, [r4, #48]	; 0x30
    6344:	bd10      	pop	{r4, pc}
    6346:	46c0      	nop			; (mov r8, r8)
    6348:	0000668d 	.word	0x0000668d
    634c:	000066b5 	.word	0x000066b5
    6350:	000066ed 	.word	0x000066ed
    6354:	00006719 	.word	0x00006719

00006358 <__sfmoreglue>:
    6358:	b570      	push	{r4, r5, r6, lr}
    635a:	1e4b      	subs	r3, r1, #1
    635c:	2568      	movs	r5, #104	; 0x68
    635e:	435d      	muls	r5, r3
    6360:	1c0e      	adds	r6, r1, #0
    6362:	1c29      	adds	r1, r5, #0
    6364:	3174      	adds	r1, #116	; 0x74
    6366:	f000 f92b 	bl	65c0 <_malloc_r>
    636a:	1e04      	subs	r4, r0, #0
    636c:	d008      	beq.n	6380 <__sfmoreglue+0x28>
    636e:	2100      	movs	r1, #0
    6370:	6001      	str	r1, [r0, #0]
    6372:	6046      	str	r6, [r0, #4]
    6374:	1c2a      	adds	r2, r5, #0
    6376:	300c      	adds	r0, #12
    6378:	60a0      	str	r0, [r4, #8]
    637a:	3268      	adds	r2, #104	; 0x68
    637c:	f7ff fa85 	bl	588a <memset>
    6380:	1c20      	adds	r0, r4, #0
    6382:	bd70      	pop	{r4, r5, r6, pc}

00006384 <__sinit>:
    6384:	6983      	ldr	r3, [r0, #24]
    6386:	b513      	push	{r0, r1, r4, lr}
    6388:	1c04      	adds	r4, r0, #0
    638a:	2b00      	cmp	r3, #0
    638c:	d127      	bne.n	63de <__sinit+0x5a>
    638e:	6483      	str	r3, [r0, #72]	; 0x48
    6390:	64c3      	str	r3, [r0, #76]	; 0x4c
    6392:	6503      	str	r3, [r0, #80]	; 0x50
    6394:	4b12      	ldr	r3, [pc, #72]	; (63e0 <__sinit+0x5c>)
    6396:	4a13      	ldr	r2, [pc, #76]	; (63e4 <__sinit+0x60>)
    6398:	681b      	ldr	r3, [r3, #0]
    639a:	6282      	str	r2, [r0, #40]	; 0x28
    639c:	4298      	cmp	r0, r3
    639e:	d101      	bne.n	63a4 <__sinit+0x20>
    63a0:	2301      	movs	r3, #1
    63a2:	6183      	str	r3, [r0, #24]
    63a4:	1c20      	adds	r0, r4, #0
    63a6:	f000 f81f 	bl	63e8 <__sfp>
    63aa:	6060      	str	r0, [r4, #4]
    63ac:	1c20      	adds	r0, r4, #0
    63ae:	f000 f81b 	bl	63e8 <__sfp>
    63b2:	60a0      	str	r0, [r4, #8]
    63b4:	1c20      	adds	r0, r4, #0
    63b6:	f000 f817 	bl	63e8 <__sfp>
    63ba:	2104      	movs	r1, #4
    63bc:	60e0      	str	r0, [r4, #12]
    63be:	2200      	movs	r2, #0
    63c0:	6860      	ldr	r0, [r4, #4]
    63c2:	f7ff ffa5 	bl	6310 <std.isra.0>
    63c6:	68a0      	ldr	r0, [r4, #8]
    63c8:	2109      	movs	r1, #9
    63ca:	2201      	movs	r2, #1
    63cc:	f7ff ffa0 	bl	6310 <std.isra.0>
    63d0:	68e0      	ldr	r0, [r4, #12]
    63d2:	2112      	movs	r1, #18
    63d4:	2202      	movs	r2, #2
    63d6:	f7ff ff9b 	bl	6310 <std.isra.0>
    63da:	2301      	movs	r3, #1
    63dc:	61a3      	str	r3, [r4, #24]
    63de:	bd13      	pop	{r0, r1, r4, pc}
    63e0:	00006950 	.word	0x00006950
    63e4:	000062dd 	.word	0x000062dd

000063e8 <__sfp>:
    63e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63ea:	4b1d      	ldr	r3, [pc, #116]	; (6460 <__sfp+0x78>)
    63ec:	1c07      	adds	r7, r0, #0
    63ee:	681e      	ldr	r6, [r3, #0]
    63f0:	69b2      	ldr	r2, [r6, #24]
    63f2:	2a00      	cmp	r2, #0
    63f4:	d102      	bne.n	63fc <__sfp+0x14>
    63f6:	1c30      	adds	r0, r6, #0
    63f8:	f7ff ffc4 	bl	6384 <__sinit>
    63fc:	3648      	adds	r6, #72	; 0x48
    63fe:	68b4      	ldr	r4, [r6, #8]
    6400:	6873      	ldr	r3, [r6, #4]
    6402:	3b01      	subs	r3, #1
    6404:	d405      	bmi.n	6412 <__sfp+0x2a>
    6406:	220c      	movs	r2, #12
    6408:	5ea5      	ldrsh	r5, [r4, r2]
    640a:	2d00      	cmp	r5, #0
    640c:	d010      	beq.n	6430 <__sfp+0x48>
    640e:	3468      	adds	r4, #104	; 0x68
    6410:	e7f7      	b.n	6402 <__sfp+0x1a>
    6412:	6833      	ldr	r3, [r6, #0]
    6414:	2b00      	cmp	r3, #0
    6416:	d106      	bne.n	6426 <__sfp+0x3e>
    6418:	1c38      	adds	r0, r7, #0
    641a:	2104      	movs	r1, #4
    641c:	f7ff ff9c 	bl	6358 <__sfmoreglue>
    6420:	6030      	str	r0, [r6, #0]
    6422:	2800      	cmp	r0, #0
    6424:	d001      	beq.n	642a <__sfp+0x42>
    6426:	6836      	ldr	r6, [r6, #0]
    6428:	e7e9      	b.n	63fe <__sfp+0x16>
    642a:	230c      	movs	r3, #12
    642c:	603b      	str	r3, [r7, #0]
    642e:	e016      	b.n	645e <__sfp+0x76>
    6430:	2301      	movs	r3, #1
    6432:	425b      	negs	r3, r3
    6434:	81e3      	strh	r3, [r4, #14]
    6436:	1c20      	adds	r0, r4, #0
    6438:	2301      	movs	r3, #1
    643a:	81a3      	strh	r3, [r4, #12]
    643c:	6665      	str	r5, [r4, #100]	; 0x64
    643e:	6025      	str	r5, [r4, #0]
    6440:	60a5      	str	r5, [r4, #8]
    6442:	6065      	str	r5, [r4, #4]
    6444:	6125      	str	r5, [r4, #16]
    6446:	6165      	str	r5, [r4, #20]
    6448:	61a5      	str	r5, [r4, #24]
    644a:	305c      	adds	r0, #92	; 0x5c
    644c:	1c29      	adds	r1, r5, #0
    644e:	2208      	movs	r2, #8
    6450:	f7ff fa1b 	bl	588a <memset>
    6454:	6365      	str	r5, [r4, #52]	; 0x34
    6456:	63a5      	str	r5, [r4, #56]	; 0x38
    6458:	64a5      	str	r5, [r4, #72]	; 0x48
    645a:	64e5      	str	r5, [r4, #76]	; 0x4c
    645c:	1c20      	adds	r0, r4, #0
    645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6460:	00006950 	.word	0x00006950

00006464 <__smakebuf_r>:
    6464:	b5f0      	push	{r4, r5, r6, r7, lr}
    6466:	898b      	ldrh	r3, [r1, #12]
    6468:	b091      	sub	sp, #68	; 0x44
    646a:	1c05      	adds	r5, r0, #0
    646c:	1c0c      	adds	r4, r1, #0
    646e:	079a      	lsls	r2, r3, #30
    6470:	d425      	bmi.n	64be <__smakebuf_r+0x5a>
    6472:	230e      	movs	r3, #14
    6474:	5ec9      	ldrsh	r1, [r1, r3]
    6476:	2900      	cmp	r1, #0
    6478:	da06      	bge.n	6488 <__smakebuf_r+0x24>
    647a:	89a7      	ldrh	r7, [r4, #12]
    647c:	2380      	movs	r3, #128	; 0x80
    647e:	401f      	ands	r7, r3
    6480:	d00f      	beq.n	64a2 <__smakebuf_r+0x3e>
    6482:	2700      	movs	r7, #0
    6484:	2640      	movs	r6, #64	; 0x40
    6486:	e00e      	b.n	64a6 <__smakebuf_r+0x42>
    6488:	aa01      	add	r2, sp, #4
    648a:	f000 f979 	bl	6780 <_fstat_r>
    648e:	2800      	cmp	r0, #0
    6490:	dbf3      	blt.n	647a <__smakebuf_r+0x16>
    6492:	9b02      	ldr	r3, [sp, #8]
    6494:	27f0      	movs	r7, #240	; 0xf0
    6496:	023f      	lsls	r7, r7, #8
    6498:	4a18      	ldr	r2, [pc, #96]	; (64fc <__smakebuf_r+0x98>)
    649a:	401f      	ands	r7, r3
    649c:	18bf      	adds	r7, r7, r2
    649e:	427b      	negs	r3, r7
    64a0:	415f      	adcs	r7, r3
    64a2:	2680      	movs	r6, #128	; 0x80
    64a4:	00f6      	lsls	r6, r6, #3
    64a6:	1c28      	adds	r0, r5, #0
    64a8:	1c31      	adds	r1, r6, #0
    64aa:	f000 f889 	bl	65c0 <_malloc_r>
    64ae:	2800      	cmp	r0, #0
    64b0:	d10c      	bne.n	64cc <__smakebuf_r+0x68>
    64b2:	89a3      	ldrh	r3, [r4, #12]
    64b4:	059a      	lsls	r2, r3, #22
    64b6:	d41f      	bmi.n	64f8 <__smakebuf_r+0x94>
    64b8:	2202      	movs	r2, #2
    64ba:	4313      	orrs	r3, r2
    64bc:	81a3      	strh	r3, [r4, #12]
    64be:	1c23      	adds	r3, r4, #0
    64c0:	3347      	adds	r3, #71	; 0x47
    64c2:	6023      	str	r3, [r4, #0]
    64c4:	6123      	str	r3, [r4, #16]
    64c6:	2301      	movs	r3, #1
    64c8:	6163      	str	r3, [r4, #20]
    64ca:	e015      	b.n	64f8 <__smakebuf_r+0x94>
    64cc:	4b0c      	ldr	r3, [pc, #48]	; (6500 <__smakebuf_r+0x9c>)
    64ce:	2280      	movs	r2, #128	; 0x80
    64d0:	62ab      	str	r3, [r5, #40]	; 0x28
    64d2:	89a3      	ldrh	r3, [r4, #12]
    64d4:	6020      	str	r0, [r4, #0]
    64d6:	4313      	orrs	r3, r2
    64d8:	81a3      	strh	r3, [r4, #12]
    64da:	6120      	str	r0, [r4, #16]
    64dc:	6166      	str	r6, [r4, #20]
    64de:	2f00      	cmp	r7, #0
    64e0:	d00a      	beq.n	64f8 <__smakebuf_r+0x94>
    64e2:	230e      	movs	r3, #14
    64e4:	5ee1      	ldrsh	r1, [r4, r3]
    64e6:	1c28      	adds	r0, r5, #0
    64e8:	f000 f95c 	bl	67a4 <_isatty_r>
    64ec:	2800      	cmp	r0, #0
    64ee:	d003      	beq.n	64f8 <__smakebuf_r+0x94>
    64f0:	89a3      	ldrh	r3, [r4, #12]
    64f2:	2201      	movs	r2, #1
    64f4:	4313      	orrs	r3, r2
    64f6:	81a3      	strh	r3, [r4, #12]
    64f8:	b011      	add	sp, #68	; 0x44
    64fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64fc:	ffffe000 	.word	0xffffe000
    6500:	000062dd 	.word	0x000062dd

00006504 <malloc>:
    6504:	b508      	push	{r3, lr}
    6506:	4b03      	ldr	r3, [pc, #12]	; (6514 <malloc+0x10>)
    6508:	1c01      	adds	r1, r0, #0
    650a:	6818      	ldr	r0, [r3, #0]
    650c:	f000 f858 	bl	65c0 <_malloc_r>
    6510:	bd08      	pop	{r3, pc}
    6512:	46c0      	nop			; (mov r8, r8)
    6514:	20000094 	.word	0x20000094

00006518 <memchr>:
    6518:	b2c9      	uxtb	r1, r1
    651a:	1882      	adds	r2, r0, r2
    651c:	4290      	cmp	r0, r2
    651e:	d004      	beq.n	652a <memchr+0x12>
    6520:	7803      	ldrb	r3, [r0, #0]
    6522:	428b      	cmp	r3, r1
    6524:	d002      	beq.n	652c <memchr+0x14>
    6526:	3001      	adds	r0, #1
    6528:	e7f8      	b.n	651c <memchr+0x4>
    652a:	2000      	movs	r0, #0
    652c:	4770      	bx	lr
	...

00006530 <_free_r>:
    6530:	b530      	push	{r4, r5, lr}
    6532:	2900      	cmp	r1, #0
    6534:	d040      	beq.n	65b8 <_free_r+0x88>
    6536:	3904      	subs	r1, #4
    6538:	680b      	ldr	r3, [r1, #0]
    653a:	2b00      	cmp	r3, #0
    653c:	da00      	bge.n	6540 <_free_r+0x10>
    653e:	18c9      	adds	r1, r1, r3
    6540:	4a1e      	ldr	r2, [pc, #120]	; (65bc <_free_r+0x8c>)
    6542:	6813      	ldr	r3, [r2, #0]
    6544:	1c14      	adds	r4, r2, #0
    6546:	2b00      	cmp	r3, #0
    6548:	d102      	bne.n	6550 <_free_r+0x20>
    654a:	604b      	str	r3, [r1, #4]
    654c:	6011      	str	r1, [r2, #0]
    654e:	e033      	b.n	65b8 <_free_r+0x88>
    6550:	4299      	cmp	r1, r3
    6552:	d20f      	bcs.n	6574 <_free_r+0x44>
    6554:	6808      	ldr	r0, [r1, #0]
    6556:	180a      	adds	r2, r1, r0
    6558:	429a      	cmp	r2, r3
    655a:	d105      	bne.n	6568 <_free_r+0x38>
    655c:	6813      	ldr	r3, [r2, #0]
    655e:	6852      	ldr	r2, [r2, #4]
    6560:	18c0      	adds	r0, r0, r3
    6562:	6008      	str	r0, [r1, #0]
    6564:	604a      	str	r2, [r1, #4]
    6566:	e000      	b.n	656a <_free_r+0x3a>
    6568:	604b      	str	r3, [r1, #4]
    656a:	6021      	str	r1, [r4, #0]
    656c:	e024      	b.n	65b8 <_free_r+0x88>
    656e:	428a      	cmp	r2, r1
    6570:	d803      	bhi.n	657a <_free_r+0x4a>
    6572:	1c13      	adds	r3, r2, #0
    6574:	685a      	ldr	r2, [r3, #4]
    6576:	2a00      	cmp	r2, #0
    6578:	d1f9      	bne.n	656e <_free_r+0x3e>
    657a:	681d      	ldr	r5, [r3, #0]
    657c:	195c      	adds	r4, r3, r5
    657e:	428c      	cmp	r4, r1
    6580:	d10b      	bne.n	659a <_free_r+0x6a>
    6582:	6809      	ldr	r1, [r1, #0]
    6584:	1869      	adds	r1, r5, r1
    6586:	1858      	adds	r0, r3, r1
    6588:	6019      	str	r1, [r3, #0]
    658a:	4290      	cmp	r0, r2
    658c:	d114      	bne.n	65b8 <_free_r+0x88>
    658e:	6814      	ldr	r4, [r2, #0]
    6590:	6852      	ldr	r2, [r2, #4]
    6592:	1909      	adds	r1, r1, r4
    6594:	6019      	str	r1, [r3, #0]
    6596:	605a      	str	r2, [r3, #4]
    6598:	e00e      	b.n	65b8 <_free_r+0x88>
    659a:	428c      	cmp	r4, r1
    659c:	d902      	bls.n	65a4 <_free_r+0x74>
    659e:	230c      	movs	r3, #12
    65a0:	6003      	str	r3, [r0, #0]
    65a2:	e009      	b.n	65b8 <_free_r+0x88>
    65a4:	6808      	ldr	r0, [r1, #0]
    65a6:	180c      	adds	r4, r1, r0
    65a8:	4294      	cmp	r4, r2
    65aa:	d103      	bne.n	65b4 <_free_r+0x84>
    65ac:	6814      	ldr	r4, [r2, #0]
    65ae:	6852      	ldr	r2, [r2, #4]
    65b0:	1900      	adds	r0, r0, r4
    65b2:	6008      	str	r0, [r1, #0]
    65b4:	604a      	str	r2, [r1, #4]
    65b6:	6059      	str	r1, [r3, #4]
    65b8:	bd30      	pop	{r4, r5, pc}
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	2000432c 	.word	0x2000432c

000065c0 <_malloc_r>:
    65c0:	b570      	push	{r4, r5, r6, lr}
    65c2:	2303      	movs	r3, #3
    65c4:	1ccd      	adds	r5, r1, #3
    65c6:	439d      	bics	r5, r3
    65c8:	3508      	adds	r5, #8
    65ca:	1c06      	adds	r6, r0, #0
    65cc:	2d0c      	cmp	r5, #12
    65ce:	d201      	bcs.n	65d4 <_malloc_r+0x14>
    65d0:	250c      	movs	r5, #12
    65d2:	e001      	b.n	65d8 <_malloc_r+0x18>
    65d4:	2d00      	cmp	r5, #0
    65d6:	db3f      	blt.n	6658 <_malloc_r+0x98>
    65d8:	428d      	cmp	r5, r1
    65da:	d33d      	bcc.n	6658 <_malloc_r+0x98>
    65dc:	4b20      	ldr	r3, [pc, #128]	; (6660 <_malloc_r+0xa0>)
    65de:	681c      	ldr	r4, [r3, #0]
    65e0:	1c1a      	adds	r2, r3, #0
    65e2:	1c21      	adds	r1, r4, #0
    65e4:	2900      	cmp	r1, #0
    65e6:	d013      	beq.n	6610 <_malloc_r+0x50>
    65e8:	6808      	ldr	r0, [r1, #0]
    65ea:	1b43      	subs	r3, r0, r5
    65ec:	d40d      	bmi.n	660a <_malloc_r+0x4a>
    65ee:	2b0b      	cmp	r3, #11
    65f0:	d902      	bls.n	65f8 <_malloc_r+0x38>
    65f2:	600b      	str	r3, [r1, #0]
    65f4:	18cc      	adds	r4, r1, r3
    65f6:	e01e      	b.n	6636 <_malloc_r+0x76>
    65f8:	428c      	cmp	r4, r1
    65fa:	d102      	bne.n	6602 <_malloc_r+0x42>
    65fc:	6863      	ldr	r3, [r4, #4]
    65fe:	6013      	str	r3, [r2, #0]
    6600:	e01a      	b.n	6638 <_malloc_r+0x78>
    6602:	6848      	ldr	r0, [r1, #4]
    6604:	6060      	str	r0, [r4, #4]
    6606:	1c0c      	adds	r4, r1, #0
    6608:	e016      	b.n	6638 <_malloc_r+0x78>
    660a:	1c0c      	adds	r4, r1, #0
    660c:	6849      	ldr	r1, [r1, #4]
    660e:	e7e9      	b.n	65e4 <_malloc_r+0x24>
    6610:	4c14      	ldr	r4, [pc, #80]	; (6664 <_malloc_r+0xa4>)
    6612:	6820      	ldr	r0, [r4, #0]
    6614:	2800      	cmp	r0, #0
    6616:	d103      	bne.n	6620 <_malloc_r+0x60>
    6618:	1c30      	adds	r0, r6, #0
    661a:	f000 f825 	bl	6668 <_sbrk_r>
    661e:	6020      	str	r0, [r4, #0]
    6620:	1c30      	adds	r0, r6, #0
    6622:	1c29      	adds	r1, r5, #0
    6624:	f000 f820 	bl	6668 <_sbrk_r>
    6628:	1c43      	adds	r3, r0, #1
    662a:	d015      	beq.n	6658 <_malloc_r+0x98>
    662c:	1cc4      	adds	r4, r0, #3
    662e:	2303      	movs	r3, #3
    6630:	439c      	bics	r4, r3
    6632:	4284      	cmp	r4, r0
    6634:	d10a      	bne.n	664c <_malloc_r+0x8c>
    6636:	6025      	str	r5, [r4, #0]
    6638:	1c20      	adds	r0, r4, #0
    663a:	300b      	adds	r0, #11
    663c:	2207      	movs	r2, #7
    663e:	1d23      	adds	r3, r4, #4
    6640:	4390      	bics	r0, r2
    6642:	1ac3      	subs	r3, r0, r3
    6644:	d00b      	beq.n	665e <_malloc_r+0x9e>
    6646:	425a      	negs	r2, r3
    6648:	50e2      	str	r2, [r4, r3]
    664a:	e008      	b.n	665e <_malloc_r+0x9e>
    664c:	1a21      	subs	r1, r4, r0
    664e:	1c30      	adds	r0, r6, #0
    6650:	f000 f80a 	bl	6668 <_sbrk_r>
    6654:	3001      	adds	r0, #1
    6656:	d1ee      	bne.n	6636 <_malloc_r+0x76>
    6658:	230c      	movs	r3, #12
    665a:	6033      	str	r3, [r6, #0]
    665c:	2000      	movs	r0, #0
    665e:	bd70      	pop	{r4, r5, r6, pc}
    6660:	2000432c 	.word	0x2000432c
    6664:	20004328 	.word	0x20004328

00006668 <_sbrk_r>:
    6668:	b538      	push	{r3, r4, r5, lr}
    666a:	4c07      	ldr	r4, [pc, #28]	; (6688 <_sbrk_r+0x20>)
    666c:	2300      	movs	r3, #0
    666e:	1c05      	adds	r5, r0, #0
    6670:	1c08      	adds	r0, r1, #0
    6672:	6023      	str	r3, [r4, #0]
    6674:	f7fe fd0e 	bl	5094 <_sbrk>
    6678:	1c43      	adds	r3, r0, #1
    667a:	d103      	bne.n	6684 <_sbrk_r+0x1c>
    667c:	6823      	ldr	r3, [r4, #0]
    667e:	2b00      	cmp	r3, #0
    6680:	d000      	beq.n	6684 <_sbrk_r+0x1c>
    6682:	602b      	str	r3, [r5, #0]
    6684:	bd38      	pop	{r3, r4, r5, pc}
    6686:	46c0      	nop			; (mov r8, r8)
    6688:	200044e4 	.word	0x200044e4

0000668c <__sread>:
    668c:	b538      	push	{r3, r4, r5, lr}
    668e:	1c0c      	adds	r4, r1, #0
    6690:	250e      	movs	r5, #14
    6692:	5f49      	ldrsh	r1, [r1, r5]
    6694:	f000 f8ac 	bl	67f0 <_read_r>
    6698:	2800      	cmp	r0, #0
    669a:	db03      	blt.n	66a4 <__sread+0x18>
    669c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    669e:	1813      	adds	r3, r2, r0
    66a0:	6563      	str	r3, [r4, #84]	; 0x54
    66a2:	e003      	b.n	66ac <__sread+0x20>
    66a4:	89a2      	ldrh	r2, [r4, #12]
    66a6:	4b02      	ldr	r3, [pc, #8]	; (66b0 <__sread+0x24>)
    66a8:	4013      	ands	r3, r2
    66aa:	81a3      	strh	r3, [r4, #12]
    66ac:	bd38      	pop	{r3, r4, r5, pc}
    66ae:	46c0      	nop			; (mov r8, r8)
    66b0:	ffffefff 	.word	0xffffefff

000066b4 <__swrite>:
    66b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66b6:	1c1e      	adds	r6, r3, #0
    66b8:	898b      	ldrh	r3, [r1, #12]
    66ba:	1c05      	adds	r5, r0, #0
    66bc:	1c0c      	adds	r4, r1, #0
    66be:	1c17      	adds	r7, r2, #0
    66c0:	05da      	lsls	r2, r3, #23
    66c2:	d505      	bpl.n	66d0 <__swrite+0x1c>
    66c4:	230e      	movs	r3, #14
    66c6:	5ec9      	ldrsh	r1, [r1, r3]
    66c8:	2200      	movs	r2, #0
    66ca:	2302      	movs	r3, #2
    66cc:	f000 f87c 	bl	67c8 <_lseek_r>
    66d0:	89a2      	ldrh	r2, [r4, #12]
    66d2:	4b05      	ldr	r3, [pc, #20]	; (66e8 <__swrite+0x34>)
    66d4:	1c28      	adds	r0, r5, #0
    66d6:	4013      	ands	r3, r2
    66d8:	81a3      	strh	r3, [r4, #12]
    66da:	220e      	movs	r2, #14
    66dc:	5ea1      	ldrsh	r1, [r4, r2]
    66de:	1c33      	adds	r3, r6, #0
    66e0:	1c3a      	adds	r2, r7, #0
    66e2:	f000 f827 	bl	6734 <_write_r>
    66e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    66e8:	ffffefff 	.word	0xffffefff

000066ec <__sseek>:
    66ec:	b538      	push	{r3, r4, r5, lr}
    66ee:	1c0c      	adds	r4, r1, #0
    66f0:	250e      	movs	r5, #14
    66f2:	5f49      	ldrsh	r1, [r1, r5]
    66f4:	f000 f868 	bl	67c8 <_lseek_r>
    66f8:	89a3      	ldrh	r3, [r4, #12]
    66fa:	1c42      	adds	r2, r0, #1
    66fc:	d103      	bne.n	6706 <__sseek+0x1a>
    66fe:	4a05      	ldr	r2, [pc, #20]	; (6714 <__sseek+0x28>)
    6700:	4013      	ands	r3, r2
    6702:	81a3      	strh	r3, [r4, #12]
    6704:	e004      	b.n	6710 <__sseek+0x24>
    6706:	2280      	movs	r2, #128	; 0x80
    6708:	0152      	lsls	r2, r2, #5
    670a:	4313      	orrs	r3, r2
    670c:	81a3      	strh	r3, [r4, #12]
    670e:	6560      	str	r0, [r4, #84]	; 0x54
    6710:	bd38      	pop	{r3, r4, r5, pc}
    6712:	46c0      	nop			; (mov r8, r8)
    6714:	ffffefff 	.word	0xffffefff

00006718 <__sclose>:
    6718:	b508      	push	{r3, lr}
    671a:	230e      	movs	r3, #14
    671c:	5ec9      	ldrsh	r1, [r1, r3]
    671e:	f000 f81d 	bl	675c <_close_r>
    6722:	bd08      	pop	{r3, pc}

00006724 <strlen>:
    6724:	2300      	movs	r3, #0
    6726:	5cc2      	ldrb	r2, [r0, r3]
    6728:	3301      	adds	r3, #1
    672a:	2a00      	cmp	r2, #0
    672c:	d1fb      	bne.n	6726 <strlen+0x2>
    672e:	1e58      	subs	r0, r3, #1
    6730:	4770      	bx	lr
	...

00006734 <_write_r>:
    6734:	b538      	push	{r3, r4, r5, lr}
    6736:	4c08      	ldr	r4, [pc, #32]	; (6758 <_write_r+0x24>)
    6738:	1c05      	adds	r5, r0, #0
    673a:	2000      	movs	r0, #0
    673c:	6020      	str	r0, [r4, #0]
    673e:	1c08      	adds	r0, r1, #0
    6740:	1c11      	adds	r1, r2, #0
    6742:	1c1a      	adds	r2, r3, #0
    6744:	f7fa f920 	bl	988 <_write>
    6748:	1c43      	adds	r3, r0, #1
    674a:	d103      	bne.n	6754 <_write_r+0x20>
    674c:	6823      	ldr	r3, [r4, #0]
    674e:	2b00      	cmp	r3, #0
    6750:	d000      	beq.n	6754 <_write_r+0x20>
    6752:	602b      	str	r3, [r5, #0]
    6754:	bd38      	pop	{r3, r4, r5, pc}
    6756:	46c0      	nop			; (mov r8, r8)
    6758:	200044e4 	.word	0x200044e4

0000675c <_close_r>:
    675c:	b538      	push	{r3, r4, r5, lr}
    675e:	4c07      	ldr	r4, [pc, #28]	; (677c <_close_r+0x20>)
    6760:	2300      	movs	r3, #0
    6762:	1c05      	adds	r5, r0, #0
    6764:	1c08      	adds	r0, r1, #0
    6766:	6023      	str	r3, [r4, #0]
    6768:	f7fe fca6 	bl	50b8 <_close>
    676c:	1c43      	adds	r3, r0, #1
    676e:	d103      	bne.n	6778 <_close_r+0x1c>
    6770:	6823      	ldr	r3, [r4, #0]
    6772:	2b00      	cmp	r3, #0
    6774:	d000      	beq.n	6778 <_close_r+0x1c>
    6776:	602b      	str	r3, [r5, #0]
    6778:	bd38      	pop	{r3, r4, r5, pc}
    677a:	46c0      	nop			; (mov r8, r8)
    677c:	200044e4 	.word	0x200044e4

00006780 <_fstat_r>:
    6780:	b538      	push	{r3, r4, r5, lr}
    6782:	4c07      	ldr	r4, [pc, #28]	; (67a0 <_fstat_r+0x20>)
    6784:	2300      	movs	r3, #0
    6786:	1c05      	adds	r5, r0, #0
    6788:	1c08      	adds	r0, r1, #0
    678a:	1c11      	adds	r1, r2, #0
    678c:	6023      	str	r3, [r4, #0]
    678e:	f7fe fc97 	bl	50c0 <_fstat>
    6792:	1c43      	adds	r3, r0, #1
    6794:	d103      	bne.n	679e <_fstat_r+0x1e>
    6796:	6823      	ldr	r3, [r4, #0]
    6798:	2b00      	cmp	r3, #0
    679a:	d000      	beq.n	679e <_fstat_r+0x1e>
    679c:	602b      	str	r3, [r5, #0]
    679e:	bd38      	pop	{r3, r4, r5, pc}
    67a0:	200044e4 	.word	0x200044e4

000067a4 <_isatty_r>:
    67a4:	b538      	push	{r3, r4, r5, lr}
    67a6:	4c07      	ldr	r4, [pc, #28]	; (67c4 <_isatty_r+0x20>)
    67a8:	2300      	movs	r3, #0
    67aa:	1c05      	adds	r5, r0, #0
    67ac:	1c08      	adds	r0, r1, #0
    67ae:	6023      	str	r3, [r4, #0]
    67b0:	f7fe fc8c 	bl	50cc <_isatty>
    67b4:	1c43      	adds	r3, r0, #1
    67b6:	d103      	bne.n	67c0 <_isatty_r+0x1c>
    67b8:	6823      	ldr	r3, [r4, #0]
    67ba:	2b00      	cmp	r3, #0
    67bc:	d000      	beq.n	67c0 <_isatty_r+0x1c>
    67be:	602b      	str	r3, [r5, #0]
    67c0:	bd38      	pop	{r3, r4, r5, pc}
    67c2:	46c0      	nop			; (mov r8, r8)
    67c4:	200044e4 	.word	0x200044e4

000067c8 <_lseek_r>:
    67c8:	b538      	push	{r3, r4, r5, lr}
    67ca:	4c08      	ldr	r4, [pc, #32]	; (67ec <_lseek_r+0x24>)
    67cc:	1c05      	adds	r5, r0, #0
    67ce:	2000      	movs	r0, #0
    67d0:	6020      	str	r0, [r4, #0]
    67d2:	1c08      	adds	r0, r1, #0
    67d4:	1c11      	adds	r1, r2, #0
    67d6:	1c1a      	adds	r2, r3, #0
    67d8:	f7fe fc7a 	bl	50d0 <_lseek>
    67dc:	1c43      	adds	r3, r0, #1
    67de:	d103      	bne.n	67e8 <_lseek_r+0x20>
    67e0:	6823      	ldr	r3, [r4, #0]
    67e2:	2b00      	cmp	r3, #0
    67e4:	d000      	beq.n	67e8 <_lseek_r+0x20>
    67e6:	602b      	str	r3, [r5, #0]
    67e8:	bd38      	pop	{r3, r4, r5, pc}
    67ea:	46c0      	nop			; (mov r8, r8)
    67ec:	200044e4 	.word	0x200044e4

000067f0 <_read_r>:
    67f0:	b538      	push	{r3, r4, r5, lr}
    67f2:	4c08      	ldr	r4, [pc, #32]	; (6814 <_read_r+0x24>)
    67f4:	1c05      	adds	r5, r0, #0
    67f6:	2000      	movs	r0, #0
    67f8:	6020      	str	r0, [r4, #0]
    67fa:	1c08      	adds	r0, r1, #0
    67fc:	1c11      	adds	r1, r2, #0
    67fe:	1c1a      	adds	r2, r3, #0
    6800:	f7fa f8a0 	bl	944 <_read>
    6804:	1c43      	adds	r3, r0, #1
    6806:	d103      	bne.n	6810 <_read_r+0x20>
    6808:	6823      	ldr	r3, [r4, #0]
    680a:	2b00      	cmp	r3, #0
    680c:	d000      	beq.n	6810 <_read_r+0x20>
    680e:	602b      	str	r3, [r5, #0]
    6810:	bd38      	pop	{r3, r4, r5, pc}
    6812:	46c0      	nop			; (mov r8, r8)
    6814:	200044e4 	.word	0x200044e4
    6818:	42000800 	.word	0x42000800
    681c:	42000c00 	.word	0x42000c00
    6820:	42001000 	.word	0x42001000
    6824:	42001400 	.word	0x42001400
    6828:	42001800 	.word	0x42001800
    682c:	42001c00 	.word	0x42001c00
    6830:	42002c00 	.word	0x42002c00
    6834:	42003000 	.word	0x42003000
    6838:	42003400 	.word	0x42003400
    683c:	001c1c1b 	.word	0x001c1c1b
    6840:	10000800 	.word	0x10000800
    6844:	00002000 	.word	0x00002000

00006848 <tc_interrupt_vectors.11766>:
    6848:	00141312 00002638 000027ac 000027b6     ....8&...'...'..
    6858:	0000294c 00002954 00002f22 00002fe0     L)..T).."/.../..
    6868:	00002f2c 00002f4c 00002fe0 00002f6e     ,/..L/.../..n/..
    6878:	00002fe0 00002fb0 0c0b0a09 00000e0d     ./.../..........
    6888:	00004aa0 00004afc 00004afc 00004a9a     .J...J...J...J..
    6898:	00004a9a 00004ab6 00004aa6 00004abc     .J...J...J...J..
    68a8:	00004aea 00004b84 00004be4 00004be4     .J...K...K...K..
    68b8:	00004b64 00004b76 00004b92 00004b68     dK..vK...K..hK..
    68c8:	00004ba0 00004bd4 74747562 00006e6f     .K...K..button..
    68d8:	65646f4d 2073253a 3a6d5220 54643225     Mode:%s  Rm:%2dT
    68e8:	65677261 32253a74 20632564 25643225     arget:%2d%c %2d%
    68f8:	63252063 00000000 74736554 75636553     c %c....TestSecu
    6908:	79746972 3079654b 00000000 0044434c     rityKey0....LCD.
    6918:	6c616e41 20657a79 706d6554 74614420     Analyze Temp Dat
    6928:	00000061 2077656e 736e6573 0000726f     a...new sensor..
    6938:	65726957 7373656c 66655220 68736572     Wireless Refresh
    6948:	00000000 00000043                       ....C...

00006950 <_global_impure_ptr>:
    6950:	20000034 2b302d23 6c680020 6665004c     4.. #-0+ .hlL.ef
    6960:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    6970:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    6980:	64636261 00006665                       abcdef..

00006988 <__sf_fake_stdin>:
	...

000069a8 <__sf_fake_stdout>:
	...

000069c8 <__sf_fake_stderr>:
	...

000069e8 <_init>:
    69e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    69ee:	bc08      	pop	{r3}
    69f0:	469e      	mov	lr, r3
    69f2:	4770      	bx	lr

000069f4 <__init_array_start>:
    69f4:	000000dd 	.word	0x000000dd

000069f8 <_fini>:
    69f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69fa:	46c0      	nop			; (mov r8, r8)
    69fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    69fe:	bc08      	pop	{r3}
    6a00:	469e      	mov	lr, r3
    6a02:	4770      	bx	lr

00006a04 <__fini_array_start>:
    6a04:	000000b5 	.word	0x000000b5
