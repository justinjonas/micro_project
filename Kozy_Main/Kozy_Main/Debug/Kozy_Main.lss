
Kozy_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000060c0  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20000000  000060c0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000101c  20000088  00006148  00010088  2**2
                  ALLOC
  3 .stack        00002004  200010a4  00007164  00010088  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010088  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  000100b0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003b69c  00000000  00000000  0001013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006b00  00000000  00000000  0004b7da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000dfab  00000000  00000000  000522da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c30  00000000  00000000  00060285  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013c8  00000000  00000000  00060eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f598  00000000  00000000  0006227d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b6a7  00000000  00000000  00081815  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00086ee6  00000000  00000000  0009cebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002504  00000000  00000000  00123da4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200030a8 	.word	0x200030a8
       4:	000044b5 	.word	0x000044b5
       8:	000044b1 	.word	0x000044b1
       c:	000044b1 	.word	0x000044b1
	...
      2c:	000044b1 	.word	0x000044b1
	...
      38:	000044b1 	.word	0x000044b1
      3c:	000044b1 	.word	0x000044b1
      40:	000044b1 	.word	0x000044b1
      44:	000044b1 	.word	0x000044b1
      48:	000044b1 	.word	0x000044b1
      4c:	000044b1 	.word	0x000044b1
      50:	00001b1d 	.word	0x00001b1d
      54:	000044b1 	.word	0x000044b1
      58:	000044b1 	.word	0x000044b1
      5c:	000044b1 	.word	0x000044b1
      60:	000044b1 	.word	0x000044b1
      64:	00001a6d 	.word	0x00001a6d
      68:	00001a7d 	.word	0x00001a7d
      6c:	00001a8d 	.word	0x00001a8d
      70:	00001a9d 	.word	0x00001a9d
      74:	00001aad 	.word	0x00001aad
      78:	00001abd 	.word	0x00001abd
      7c:	000044b1 	.word	0x000044b1
      80:	000044b1 	.word	0x000044b1
      84:	000044b1 	.word	0x000044b1
      88:	000010c1 	.word	0x000010c1
      8c:	000010d1 	.word	0x000010d1
      90:	000010e1 	.word	0x000010e1
	...
      9c:	00000591 	.word	0x00000591
      a0:	000044b1 	.word	0x000044b1
      a4:	00000000 	.word	0x00000000
      a8:	000044b1 	.word	0x000044b1
      ac:	000044b1 	.word	0x000044b1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000088 	.word	0x20000088
      d4:	00000000 	.word	0x00000000
      d8:	000060c0 	.word	0x000060c0

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	000060c0 	.word	0x000060c0
     108:	2000008c 	.word	0x2000008c
     10c:	000060c0 	.word	0x000060c0
     110:	00000000 	.word	0x00000000

00000114 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     114:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     116:	2200      	movs	r2, #0
     118:	2300      	movs	r3, #0
     11a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     11c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     11e:	2100      	movs	r1, #0
     120:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     122:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     124:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     126:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     128:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     12a:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
     12c:	2406      	movs	r4, #6
     12e:	7304      	strb	r4, [r0, #12]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     130:	24c0      	movs	r4, #192	; 0xc0
     132:	0164      	lsls	r4, r4, #5
     134:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     136:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     138:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     13a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     13c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     13e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     140:	242a      	movs	r4, #42	; 0x2a
     142:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     144:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     146:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     148:	2424      	movs	r4, #36	; 0x24
     14a:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     14c:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     14e:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     150:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     152:	232b      	movs	r3, #43	; 0x2b
     154:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     156:	232c      	movs	r3, #44	; 0x2c
     158:	54c1      	strb	r1, [r0, r3]
}
     15a:	bd10      	pop	{r4, pc}

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	465f      	mov	r7, fp
     160:	4656      	mov	r6, sl
     162:	464d      	mov	r5, r9
     164:	4644      	mov	r4, r8
     166:	b4f0      	push	{r4, r5, r6, r7}
     168:	b099      	sub	sp, #100	; 0x64
     16a:	1c06      	adds	r6, r0, #0
     16c:	1c14      	adds	r4, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     16e:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     170:	4bba      	ldr	r3, [pc, #744]	; (45c <adc_init+0x300>)
     172:	6a18      	ldr	r0, [r3, #32]
     174:	2280      	movs	r2, #128	; 0x80
     176:	0252      	lsls	r2, r2, #9
     178:	4302      	orrs	r2, r0
     17a:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17c:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17e:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     180:	07da      	lsls	r2, r3, #31
     182:	d500      	bpl.n	186 <adc_init+0x2a>
     184:	e1f4      	b.n	570 <adc_init+0x414>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     186:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     188:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18a:	0799      	lsls	r1, r3, #30
     18c:	d500      	bpl.n	190 <adc_init+0x34>
     18e:	e1ef      	b.n	570 <adc_init+0x414>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     190:	7863      	ldrb	r3, [r4, #1]
     192:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <adc_init+0x3e>
     198:	e1da      	b.n	550 <adc_init+0x3f4>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     19a:	4bb1      	ldr	r3, [pc, #708]	; (460 <adc_init+0x304>)
     19c:	6c19      	ldr	r1, [r3, #64]	; 0x40
     19e:	2204      	movs	r2, #4
     1a0:	430a      	orrs	r2, r1
     1a2:	641a      	str	r2, [r3, #64]	; 0x40
     1a4:	e1d4      	b.n	550 <adc_init+0x3f4>
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1a6:	7d23      	ldrb	r3, [r4, #20]
     1a8:	2b00      	cmp	r3, #0
     1aa:	d102      	bne.n	1b2 <adc_init+0x56>
			!config->freerunning) {
		module_inst->software_trigger = true;
     1ac:	2301      	movs	r3, #1
     1ae:	7773      	strb	r3, [r6, #29]
     1b0:	e001      	b.n	1b6 <adc_init+0x5a>
	} else {
		module_inst->software_trigger = false;
     1b2:	2300      	movs	r3, #0
     1b4:	7773      	strb	r3, [r6, #29]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     1b6:	6832      	ldr	r2, [r6, #0]
     1b8:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     1ba:	7823      	ldrb	r3, [r4, #0]
     1bc:	4668      	mov	r0, sp
     1be:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1c0:	201e      	movs	r0, #30
     1c2:	a902      	add	r1, sp, #8
     1c4:	4ba7      	ldr	r3, [pc, #668]	; (464 <adc_init+0x308>)
     1c6:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1c8:	201e      	movs	r0, #30
     1ca:	4ba7      	ldr	r3, [pc, #668]	; (468 <adc_init+0x30c>)
     1cc:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     1ce:	232c      	movs	r3, #44	; 0x2c
     1d0:	5ce3      	ldrb	r3, [r4, r3]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d042      	beq.n	25c <adc_init+0x100>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1d6:	222b      	movs	r2, #43	; 0x2b
     1d8:	5ca5      	ldrb	r5, [r4, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     1da:	7b21      	ldrb	r1, [r4, #12]
     1dc:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     1de:	194a      	adds	r2, r1, r5
     1e0:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     1e2:	18d3      	adds	r3, r2, r3
     1e4:	b2db      	uxtb	r3, r3
     1e6:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     1e8:	429a      	cmp	r2, r3
     1ea:	d221      	bcs.n	230 <adc_init+0xd4>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     1ec:	4a9f      	ldr	r2, [pc, #636]	; (46c <adc_init+0x310>)
     1ee:	4693      	mov	fp, r2
     1f0:	4b9f      	ldr	r3, [pc, #636]	; (470 <adc_init+0x314>)
     1f2:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     1f4:	270f      	movs	r7, #15
     1f6:	402f      	ands	r7, r5
     1f8:	7b23      	ldrb	r3, [r4, #12]
     1fa:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     1fc:	a804      	add	r0, sp, #16
     1fe:	4659      	mov	r1, fp
     200:	2250      	movs	r2, #80	; 0x50
     202:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     204:	2f13      	cmp	r7, #19
     206:	d80c      	bhi.n	222 <adc_init+0xc6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     208:	00bf      	lsls	r7, r7, #2
     20a:	ab04      	add	r3, sp, #16
     20c:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     20e:	a903      	add	r1, sp, #12
     210:	2300      	movs	r3, #0
     212:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     214:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     216:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     218:	2301      	movs	r3, #1
     21a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     21c:	b2c0      	uxtb	r0, r0
     21e:	4a95      	ldr	r2, [pc, #596]	; (474 <adc_init+0x318>)
     220:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     222:	3501      	adds	r5, #1
     224:	b2ed      	uxtb	r5, r5
     226:	4640      	mov	r0, r8
     228:	1943      	adds	r3, r0, r5
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     22a:	b2db      	uxtb	r3, r3
     22c:	454b      	cmp	r3, r9
     22e:	d3e1      	bcc.n	1f4 <adc_init+0x98>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     230:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     232:	a804      	add	r0, sp, #16
     234:	498d      	ldr	r1, [pc, #564]	; (46c <adc_init+0x310>)
     236:	2250      	movs	r2, #80	; 0x50
     238:	4b8d      	ldr	r3, [pc, #564]	; (470 <adc_init+0x314>)
     23a:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     23c:	2d13      	cmp	r5, #19
     23e:	d837      	bhi.n	2b0 <adc_init+0x154>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     240:	00ad      	lsls	r5, r5, #2
     242:	ab04      	add	r3, sp, #16
     244:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     246:	a903      	add	r1, sp, #12
     248:	2300      	movs	r3, #0
     24a:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     24c:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     24e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     250:	2301      	movs	r3, #1
     252:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     254:	b2c0      	uxtb	r0, r0
     256:	4b87      	ldr	r3, [pc, #540]	; (474 <adc_init+0x318>)
     258:	4798      	blx	r3
     25a:	e029      	b.n	2b0 <adc_init+0x154>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     25c:	7b25      	ldrb	r5, [r4, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     25e:	a804      	add	r0, sp, #16
     260:	4982      	ldr	r1, [pc, #520]	; (46c <adc_init+0x310>)
     262:	2250      	movs	r2, #80	; 0x50
     264:	4b82      	ldr	r3, [pc, #520]	; (470 <adc_init+0x314>)
     266:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     268:	2d13      	cmp	r5, #19
     26a:	d80c      	bhi.n	286 <adc_init+0x12a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     26c:	00ad      	lsls	r5, r5, #2
     26e:	ab04      	add	r3, sp, #16
     270:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     272:	a903      	add	r1, sp, #12
     274:	2300      	movs	r3, #0
     276:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     278:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     27a:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     27c:	2301      	movs	r3, #1
     27e:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     280:	b2c0      	uxtb	r0, r0
     282:	4b7c      	ldr	r3, [pc, #496]	; (474 <adc_init+0x318>)
     284:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     286:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     288:	a804      	add	r0, sp, #16
     28a:	4978      	ldr	r1, [pc, #480]	; (46c <adc_init+0x310>)
     28c:	2250      	movs	r2, #80	; 0x50
     28e:	4b78      	ldr	r3, [pc, #480]	; (470 <adc_init+0x314>)
     290:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     292:	2d13      	cmp	r5, #19
     294:	d80c      	bhi.n	2b0 <adc_init+0x154>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     296:	00ad      	lsls	r5, r5, #2
     298:	ab04      	add	r3, sp, #16
     29a:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     29c:	a903      	add	r1, sp, #12
     29e:	2300      	movs	r3, #0
     2a0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2a2:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2a4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2a6:	2301      	movs	r3, #1
     2a8:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     2aa:	b2c0      	uxtb	r0, r0
     2ac:	4b71      	ldr	r3, [pc, #452]	; (474 <adc_init+0x318>)
     2ae:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2b0:	7d63      	ldrb	r3, [r4, #21]
     2b2:	009b      	lsls	r3, r3, #2
     2b4:	b2db      	uxtb	r3, r3
     2b6:	9901      	ldr	r1, [sp, #4]
     2b8:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2ba:	7da3      	ldrb	r3, [r4, #22]
     2bc:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     2be:	7862      	ldrb	r2, [r4, #1]
     2c0:	4313      	orrs	r3, r2
     2c2:	b2db      	uxtb	r3, r3
     2c4:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     2c6:	7923      	ldrb	r3, [r4, #4]
     2c8:	2b34      	cmp	r3, #52	; 0x34
     2ca:	d900      	bls.n	2ce <adc_init+0x172>
     2cc:	e13e      	b.n	54c <adc_init+0x3f0>
     2ce:	009b      	lsls	r3, r3, #2
     2d0:	4a69      	ldr	r2, [pc, #420]	; (478 <adc_init+0x31c>)
     2d2:	58d3      	ldr	r3, [r2, r3]
     2d4:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     2d6:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2d8:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     2da:	2301      	movs	r3, #1
     2dc:	e01a      	b.n	314 <adc_init+0x1b8>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     2de:	7c63      	ldrb	r3, [r4, #17]
		accumulate = config->accumulate_samples;
     2e0:	7c22      	ldrb	r2, [r4, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2e2:	2510      	movs	r5, #16
     2e4:	e016      	b.n	314 <adc_init+0x1b8>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     2e6:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2e8:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     2ea:	2301      	movs	r3, #1
     2ec:	e012      	b.n	314 <adc_init+0x1b8>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     2ee:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2f0:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     2f2:	2300      	movs	r3, #0
     2f4:	e00e      	b.n	314 <adc_init+0x1b8>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2f6:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     2f8:	2530      	movs	r5, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     2fa:	2300      	movs	r3, #0
     2fc:	e00a      	b.n	314 <adc_init+0x1b8>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2fe:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     300:	2520      	movs	r5, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     302:	2300      	movs	r3, #0
     304:	e006      	b.n	314 <adc_init+0x1b8>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     306:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     308:	2500      	movs	r5, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     30a:	2300      	movs	r3, #0
     30c:	e002      	b.n	314 <adc_init+0x1b8>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     30e:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     310:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     312:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     314:	011b      	lsls	r3, r3, #4
     316:	2170      	movs	r1, #112	; 0x70
     318:	400b      	ands	r3, r1
     31a:	4313      	orrs	r3, r2
     31c:	9a01      	ldr	r2, [sp, #4]
     31e:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     320:	7de3      	ldrb	r3, [r4, #23]
		return STATUS_ERR_INVALID_ARG;
     322:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     324:	2b3f      	cmp	r3, #63	; 0x3f
     326:	d900      	bls.n	32a <adc_init+0x1ce>
     328:	e122      	b.n	570 <adc_init+0x414>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     32a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     32c:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     32e:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     330:	b25b      	sxtb	r3, r3
     332:	2b00      	cmp	r3, #0
     334:	dbfb      	blt.n	32e <adc_init+0x1d2>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     336:	7ce2      	ldrb	r2, [r4, #19]
     338:	8863      	ldrh	r3, [r4, #2]
     33a:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     33c:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     33e:	5ca2      	ldrb	r2, [r4, r2]
     340:	00d2      	lsls	r2, r2, #3
     342:	4313      	orrs	r3, r2
     344:	7d22      	ldrb	r2, [r4, #20]
     346:	0092      	lsls	r2, r2, #2
     348:	4313      	orrs	r3, r2
     34a:	7ca2      	ldrb	r2, [r4, #18]
     34c:	0052      	lsls	r2, r2, #1
     34e:	4313      	orrs	r3, r2
     350:	432b      	orrs	r3, r5
     352:	9801      	ldr	r0, [sp, #4]
     354:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     356:	7e23      	ldrb	r3, [r4, #24]
     358:	2b00      	cmp	r3, #0
     35a:	d101      	bne.n	360 <adc_init+0x204>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     35c:	6831      	ldr	r1, [r6, #0]
     35e:	e095      	b.n	48c <adc_init+0x330>
		switch (resolution) {
     360:	2d10      	cmp	r5, #16
     362:	d05b      	beq.n	41c <adc_init+0x2c0>
     364:	d802      	bhi.n	36c <adc_init+0x210>
     366:	2d00      	cmp	r5, #0
     368:	d038      	beq.n	3dc <adc_init+0x280>
     36a:	e7f7      	b.n	35c <adc_init+0x200>
     36c:	2d20      	cmp	r5, #32
     36e:	d019      	beq.n	3a4 <adc_init+0x248>
     370:	2d30      	cmp	r5, #48	; 0x30
     372:	d1f3      	bne.n	35c <adc_init+0x200>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     374:	7ce2      	ldrb	r2, [r4, #19]
     376:	2a00      	cmp	r2, #0
     378:	d00a      	beq.n	390 <adc_init+0x234>
					(config->window.window_lower_value > 127 ||
     37a:	69e2      	ldr	r2, [r4, #28]
     37c:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     37e:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     380:	2aff      	cmp	r2, #255	; 0xff
     382:	d900      	bls.n	386 <adc_init+0x22a>
     384:	e0f4      	b.n	570 <adc_init+0x414>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     386:	6a22      	ldr	r2, [r4, #32]
     388:	3280      	adds	r2, #128	; 0x80
     38a:	2aff      	cmp	r2, #255	; 0xff
     38c:	d900      	bls.n	390 <adc_init+0x234>
     38e:	e0ef      	b.n	570 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     390:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     392:	69e1      	ldr	r1, [r4, #28]
     394:	29ff      	cmp	r1, #255	; 0xff
     396:	dd00      	ble.n	39a <adc_init+0x23e>
     398:	e0ea      	b.n	570 <adc_init+0x414>
     39a:	6a22      	ldr	r2, [r4, #32]
     39c:	2aff      	cmp	r2, #255	; 0xff
     39e:	dd00      	ble.n	3a2 <adc_init+0x246>
     3a0:	e0e6      	b.n	570 <adc_init+0x414>
     3a2:	e7db      	b.n	35c <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     3a4:	7ce2      	ldrb	r2, [r4, #19]
     3a6:	2a00      	cmp	r2, #0
     3a8:	d00d      	beq.n	3c6 <adc_init+0x26a>
					(config->window.window_lower_value > 511 ||
     3aa:	69e0      	ldr	r0, [r4, #28]
     3ac:	2280      	movs	r2, #128	; 0x80
     3ae:	0092      	lsls	r2, r2, #2
     3b0:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3b2:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     3b4:	4a31      	ldr	r2, [pc, #196]	; (47c <adc_init+0x320>)
     3b6:	4291      	cmp	r1, r2
     3b8:	d900      	bls.n	3bc <adc_init+0x260>
     3ba:	e0d9      	b.n	570 <adc_init+0x414>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     3bc:	4a30      	ldr	r2, [pc, #192]	; (480 <adc_init+0x324>)
     3be:	6a21      	ldr	r1, [r4, #32]
     3c0:	4291      	cmp	r1, r2
     3c2:	db00      	blt.n	3c6 <adc_init+0x26a>
     3c4:	e0d4      	b.n	570 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3c6:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     3c8:	4a2c      	ldr	r2, [pc, #176]	; (47c <adc_init+0x320>)
     3ca:	69e1      	ldr	r1, [r4, #28]
     3cc:	4291      	cmp	r1, r2
     3ce:	dd00      	ble.n	3d2 <adc_init+0x276>
     3d0:	e0ce      	b.n	570 <adc_init+0x414>
     3d2:	6a21      	ldr	r1, [r4, #32]
     3d4:	4291      	cmp	r1, r2
     3d6:	dd00      	ble.n	3da <adc_init+0x27e>
     3d8:	e0ca      	b.n	570 <adc_init+0x414>
     3da:	e7bf      	b.n	35c <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     3dc:	7ce2      	ldrb	r2, [r4, #19]
     3de:	2a00      	cmp	r2, #0
     3e0:	d011      	beq.n	406 <adc_init+0x2aa>
					(config->window.window_lower_value > 2047 ||
     3e2:	69e2      	ldr	r2, [r4, #28]
     3e4:	2080      	movs	r0, #128	; 0x80
     3e6:	0100      	lsls	r0, r0, #4
     3e8:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3ea:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     3ec:	4a25      	ldr	r2, [pc, #148]	; (484 <adc_init+0x328>)
     3ee:	4291      	cmp	r1, r2
     3f0:	d900      	bls.n	3f4 <adc_init+0x298>
     3f2:	e0bd      	b.n	570 <adc_init+0x414>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     3f4:	6a22      	ldr	r2, [r4, #32]
     3f6:	2080      	movs	r0, #128	; 0x80
     3f8:	0100      	lsls	r0, r0, #4
     3fa:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3fc:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     3fe:	4a21      	ldr	r2, [pc, #132]	; (484 <adc_init+0x328>)
     400:	4291      	cmp	r1, r2
     402:	d900      	bls.n	406 <adc_init+0x2aa>
     404:	e0b4      	b.n	570 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     406:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     408:	4a1e      	ldr	r2, [pc, #120]	; (484 <adc_init+0x328>)
     40a:	69e1      	ldr	r1, [r4, #28]
     40c:	4291      	cmp	r1, r2
     40e:	dd00      	ble.n	412 <adc_init+0x2b6>
     410:	e0ae      	b.n	570 <adc_init+0x414>
     412:	6a21      	ldr	r1, [r4, #32]
     414:	4291      	cmp	r1, r2
     416:	dd00      	ble.n	41a <adc_init+0x2be>
     418:	e0aa      	b.n	570 <adc_init+0x414>
     41a:	e79f      	b.n	35c <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     41c:	7ce2      	ldrb	r2, [r4, #19]
     41e:	2a00      	cmp	r2, #0
     420:	d011      	beq.n	446 <adc_init+0x2ea>
					(config->window.window_lower_value > 32767 ||
     422:	69e2      	ldr	r2, [r4, #28]
     424:	2080      	movs	r0, #128	; 0x80
     426:	0200      	lsls	r0, r0, #8
     428:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     42a:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     42c:	4a16      	ldr	r2, [pc, #88]	; (488 <adc_init+0x32c>)
     42e:	4291      	cmp	r1, r2
     430:	d900      	bls.n	434 <adc_init+0x2d8>
     432:	e09d      	b.n	570 <adc_init+0x414>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     434:	6a22      	ldr	r2, [r4, #32]
     436:	2080      	movs	r0, #128	; 0x80
     438:	0200      	lsls	r0, r0, #8
     43a:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     43c:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     43e:	4a12      	ldr	r2, [pc, #72]	; (488 <adc_init+0x32c>)
     440:	4291      	cmp	r1, r2
     442:	d900      	bls.n	446 <adc_init+0x2ea>
     444:	e094      	b.n	570 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     446:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     448:	4a0f      	ldr	r2, [pc, #60]	; (488 <adc_init+0x32c>)
     44a:	69e1      	ldr	r1, [r4, #28]
     44c:	4291      	cmp	r1, r2
     44e:	dd00      	ble.n	452 <adc_init+0x2f6>
     450:	e08e      	b.n	570 <adc_init+0x414>
     452:	6a21      	ldr	r1, [r4, #32]
     454:	4291      	cmp	r1, r2
     456:	dd00      	ble.n	45a <adc_init+0x2fe>
     458:	e08a      	b.n	570 <adc_init+0x414>
     45a:	e77f      	b.n	35c <adc_init+0x200>
     45c:	40000400 	.word	0x40000400
     460:	40000800 	.word	0x40000800
     464:	00004381 	.word	0x00004381
     468:	000042f5 	.word	0x000042f5
     46c:	00005eb0 	.word	0x00005eb0
     470:	00004e25 	.word	0x00004e25
     474:	0000445d 	.word	0x0000445d
     478:	00005ddc 	.word	0x00005ddc
     47c:	000003ff 	.word	0x000003ff
     480:	fffffe01 	.word	0xfffffe01
     484:	00000fff 	.word	0x00000fff
     488:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     48c:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     48e:	b252      	sxtb	r2, r2
     490:	2a00      	cmp	r2, #0
     492:	dbfb      	blt.n	48c <adc_init+0x330>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     494:	9a01      	ldr	r2, [sp, #4]
     496:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     498:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     49a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     49c:	b25b      	sxtb	r3, r3
     49e:	2b00      	cmp	r3, #0
     4a0:	dbfb      	blt.n	49a <adc_init+0x33e>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     4a2:	8ba3      	ldrh	r3, [r4, #28]
     4a4:	9801      	ldr	r0, [sp, #4]
     4a6:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     4a8:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4aa:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     4ac:	b25b      	sxtb	r3, r3
     4ae:	2b00      	cmp	r3, #0
     4b0:	dbfb      	blt.n	4aa <adc_init+0x34e>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     4b2:	8c23      	ldrh	r3, [r4, #32]
     4b4:	9901      	ldr	r1, [sp, #4]
     4b6:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     4b8:	232c      	movs	r3, #44	; 0x2c
     4ba:	5ce3      	ldrb	r3, [r4, r3]
	if (inputs_to_scan > 0) {
     4bc:	2b00      	cmp	r3, #0
     4be:	d004      	beq.n	4ca <adc_init+0x36e>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     4c0:	3b01      	subs	r3, #1
     4c2:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     4c4:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     4c6:	2b0f      	cmp	r3, #15
     4c8:	d852      	bhi.n	570 <adc_init+0x414>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     4ca:	222b      	movs	r2, #43	; 0x2b
     4cc:	5ca2      	ldrb	r2, [r4, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     4ce:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     4d0:	2a0f      	cmp	r2, #15
     4d2:	d84d      	bhi.n	570 <adc_init+0x414>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     4d4:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4d6:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
     4d8:	b240      	sxtb	r0, r0
     4da:	2800      	cmp	r0, #0
     4dc:	dbfb      	blt.n	4d6 <adc_init+0x37a>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4de:	89e0      	ldrh	r0, [r4, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     4e0:	7b21      	ldrb	r1, [r4, #12]
			config->gain_factor |
     4e2:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     4e4:	68a0      	ldr	r0, [r4, #8]
     4e6:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
     4e8:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     4ea:	430a      	orrs	r2, r1
     4ec:	041b      	lsls	r3, r3, #16
			config->negative_input |
     4ee:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     4f0:	9901      	ldr	r1, [sp, #4]
     4f2:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     4f4:	232a      	movs	r3, #42	; 0x2a
     4f6:	5ce3      	ldrb	r3, [r4, r3]
     4f8:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     4fa:	230f      	movs	r3, #15
     4fc:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     4fe:	2324      	movs	r3, #36	; 0x24
     500:	5ce3      	ldrb	r3, [r4, r3]
     502:	2b00      	cmp	r3, #0
     504:	d010      	beq.n	528 <adc_init+0x3cc>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     506:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
     508:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     50a:	4a1d      	ldr	r2, [pc, #116]	; (580 <adc_init+0x424>)
     50c:	4293      	cmp	r3, r2
     50e:	d82f      	bhi.n	570 <adc_init+0x414>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     510:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     512:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     514:	2080      	movs	r0, #128	; 0x80
     516:	0100      	lsls	r0, r0, #4
     518:	1819      	adds	r1, r3, r0
     51a:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     51c:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     51e:	4a18      	ldr	r2, [pc, #96]	; (580 <adc_init+0x424>)
     520:	4291      	cmp	r1, r2
     522:	d825      	bhi.n	570 <adc_init+0x414>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     524:	9901      	ldr	r1, [sp, #4]
     526:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     528:	4b16      	ldr	r3, [pc, #88]	; (584 <adc_init+0x428>)
     52a:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     52c:	0152      	lsls	r2, r2, #5
     52e:	23e0      	movs	r3, #224	; 0xe0
     530:	00db      	lsls	r3, r3, #3
     532:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     534:	4b14      	ldr	r3, [pc, #80]	; (588 <adc_init+0x42c>)
     536:	6858      	ldr	r0, [r3, #4]
     538:	0141      	lsls	r1, r0, #5
     53a:	681b      	ldr	r3, [r3, #0]
     53c:	0edb      	lsrs	r3, r3, #27
     53e:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     540:	b2db      	uxtb	r3, r3
     542:	4313      	orrs	r3, r2
     544:	9901      	ldr	r1, [sp, #4]
     546:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     548:	2000      	movs	r0, #0
     54a:	e011      	b.n	570 <adc_init+0x414>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     54c:	2017      	movs	r0, #23
     54e:	e00f      	b.n	570 <adc_init+0x414>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     550:	2300      	movs	r3, #0
     552:	60b3      	str	r3, [r6, #8]
     554:	60f3      	str	r3, [r6, #12]
     556:	6133      	str	r3, [r6, #16]
	};

	module_inst->registered_callback_mask = 0;
     558:	76b3      	strb	r3, [r6, #26]
	module_inst->enabled_callback_mask = 0;
     55a:	76f3      	strb	r3, [r6, #27]
	module_inst->remaining_conversions = 0;
     55c:	8333      	strh	r3, [r6, #24]
	module_inst->job_status = STATUS_OK;
     55e:	7733      	strb	r3, [r6, #28]

	_adc_instances[0] = module_inst;
     560:	4b0a      	ldr	r3, [pc, #40]	; (58c <adc_init+0x430>)
     562:	601e      	str	r6, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     564:	232a      	movs	r3, #42	; 0x2a
     566:	5ce3      	ldrb	r3, [r4, r3]
     568:	2b00      	cmp	r3, #0
     56a:	d100      	bne.n	56e <adc_init+0x412>
     56c:	e61b      	b.n	1a6 <adc_init+0x4a>
     56e:	e620      	b.n	1b2 <adc_init+0x56>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     570:	b019      	add	sp, #100	; 0x64
     572:	bc3c      	pop	{r2, r3, r4, r5}
     574:	4690      	mov	r8, r2
     576:	4699      	mov	r9, r3
     578:	46a2      	mov	sl, r4
     57a:	46ab      	mov	fp, r5
     57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	00000fff 	.word	0x00000fff
     584:	00806024 	.word	0x00806024
     588:	00806020 	.word	0x00806020
     58c:	20000c50 	.word	0x20000c50

00000590 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     590:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     592:	4b2d      	ldr	r3, [pc, #180]	; (648 <ADC_Handler+0xb8>)
     594:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     596:	6823      	ldr	r3, [r4, #0]
     598:	7e1d      	ldrb	r5, [r3, #24]
     59a:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     59c:	07e9      	lsls	r1, r5, #31
     59e:	d535      	bpl.n	60c <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     5a0:	7ee2      	ldrb	r2, [r4, #27]
     5a2:	07d1      	lsls	r1, r2, #31
     5a4:	d532      	bpl.n	60c <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     5a6:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     5a8:	07d1      	lsls	r1, r2, #31
     5aa:	d52f      	bpl.n	60c <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     5ac:	2201      	movs	r2, #1
     5ae:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     5b0:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5b2:	7e53      	ldrb	r3, [r2, #25]

			while (adc_is_syncing(module)) {
     5b4:	b25b      	sxtb	r3, r3
     5b6:	2b00      	cmp	r3, #0
     5b8:	dbfb      	blt.n	5b2 <ADC_Handler+0x22>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     5ba:	6963      	ldr	r3, [r4, #20]
     5bc:	1c99      	adds	r1, r3, #2
     5be:	6161      	str	r1, [r4, #20]
     5c0:	8b52      	ldrh	r2, [r2, #26]
     5c2:	b292      	uxth	r2, r2
     5c4:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     5c6:	8b23      	ldrh	r3, [r4, #24]
     5c8:	3b01      	subs	r3, #1
     5ca:	b29b      	uxth	r3, r3
     5cc:	8323      	strh	r3, [r4, #24]
     5ce:	2b00      	cmp	r3, #0
     5d0:	d011      	beq.n	5f6 <ADC_Handler+0x66>
				if (module->software_trigger == true) {
     5d2:	7f63      	ldrb	r3, [r4, #29]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d019      	beq.n	60c <ADC_Handler+0x7c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     5d8:	6823      	ldr	r3, [r4, #0]
     5da:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
     5dc:	b252      	sxtb	r2, r2
     5de:	2a00      	cmp	r2, #0
     5e0:	dbfb      	blt.n	5da <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     5e2:	7b19      	ldrb	r1, [r3, #12]
     5e4:	2202      	movs	r2, #2
     5e6:	430a      	orrs	r2, r1
     5e8:	731a      	strb	r2, [r3, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     5ea:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     5ec:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     5ee:	b25b      	sxtb	r3, r3
     5f0:	2b00      	cmp	r3, #0
     5f2:	dbfb      	blt.n	5ec <ADC_Handler+0x5c>
     5f4:	e00a      	b.n	60c <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     5f6:	7f23      	ldrb	r3, [r4, #28]
     5f8:	2b05      	cmp	r3, #5
     5fa:	d107      	bne.n	60c <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     5fc:	2300      	movs	r3, #0
     5fe:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     600:	2301      	movs	r3, #1
     602:	6822      	ldr	r2, [r4, #0]
     604:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     606:	1c20      	adds	r0, r4, #0
     608:	68a3      	ldr	r3, [r4, #8]
     60a:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     60c:	0769      	lsls	r1, r5, #29
     60e:	d50b      	bpl.n	628 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     610:	2304      	movs	r3, #4
     612:	6822      	ldr	r2, [r4, #0]
     614:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     616:	7ee3      	ldrb	r3, [r4, #27]
     618:	0799      	lsls	r1, r3, #30
     61a:	d505      	bpl.n	628 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     61c:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     61e:	079a      	lsls	r2, r3, #30
     620:	d502      	bpl.n	628 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     622:	1c20      	adds	r0, r4, #0
     624:	68e3      	ldr	r3, [r4, #12]
     626:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     628:	07a9      	lsls	r1, r5, #30
     62a:	d50b      	bpl.n	644 <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     62c:	2302      	movs	r3, #2
     62e:	6822      	ldr	r2, [r4, #0]
     630:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     632:	7ee3      	ldrb	r3, [r4, #27]
     634:	0759      	lsls	r1, r3, #29
     636:	d505      	bpl.n	644 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     638:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     63a:	075a      	lsls	r2, r3, #29
     63c:	d502      	bpl.n	644 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     63e:	6923      	ldr	r3, [r4, #16]
     640:	1c20      	adds	r0, r4, #0
     642:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     644:	bd38      	pop	{r3, r4, r5, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	20000c50 	.word	0x20000c50

0000064c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     64c:	4b05      	ldr	r3, [pc, #20]	; (664 <_extint_enable+0x18>)
     64e:	7819      	ldrb	r1, [r3, #0]
     650:	2202      	movs	r2, #2
     652:	430a      	orrs	r2, r1
     654:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     656:	1c1a      	adds	r2, r3, #0
     658:	7853      	ldrb	r3, [r2, #1]
     65a:	b25b      	sxtb	r3, r3
     65c:	2b00      	cmp	r3, #0
     65e:	dbfb      	blt.n	658 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     660:	4770      	bx	lr
     662:	46c0      	nop			; (mov r8, r8)
     664:	40001800 	.word	0x40001800

00000668 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     668:	b500      	push	{lr}
     66a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     66c:	4b12      	ldr	r3, [pc, #72]	; (6b8 <_system_extint_init+0x50>)
     66e:	6999      	ldr	r1, [r3, #24]
     670:	2240      	movs	r2, #64	; 0x40
     672:	430a      	orrs	r2, r1
     674:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     676:	a901      	add	r1, sp, #4
     678:	2300      	movs	r3, #0
     67a:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     67c:	2005      	movs	r0, #5
     67e:	4b0f      	ldr	r3, [pc, #60]	; (6bc <_system_extint_init+0x54>)
     680:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     682:	2005      	movs	r0, #5
     684:	4b0e      	ldr	r3, [pc, #56]	; (6c0 <_system_extint_init+0x58>)
     686:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     688:	4b0e      	ldr	r3, [pc, #56]	; (6c4 <_system_extint_init+0x5c>)
     68a:	7819      	ldrb	r1, [r3, #0]
     68c:	2201      	movs	r2, #1
     68e:	430a      	orrs	r2, r1
     690:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     692:	1c1a      	adds	r2, r3, #0
     694:	7853      	ldrb	r3, [r2, #1]
     696:	b25b      	sxtb	r3, r3
     698:	2b00      	cmp	r3, #0
     69a:	dbfb      	blt.n	694 <_system_extint_init+0x2c>
     69c:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <_system_extint_init+0x60>)
     69e:	1c19      	adds	r1, r3, #0
     6a0:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     6a2:	2200      	movs	r2, #0
     6a4:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     6a6:	428b      	cmp	r3, r1
     6a8:	d1fc      	bne.n	6a4 <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6aa:	2210      	movs	r2, #16
     6ac:	4b07      	ldr	r3, [pc, #28]	; (6cc <_system_extint_init+0x64>)
     6ae:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     6b0:	4b07      	ldr	r3, [pc, #28]	; (6d0 <_system_extint_init+0x68>)
     6b2:	4798      	blx	r3
}
     6b4:	b003      	add	sp, #12
     6b6:	bd00      	pop	{pc}
     6b8:	40000400 	.word	0x40000400
     6bc:	00004381 	.word	0x00004381
     6c0:	000042f5 	.word	0x000042f5
     6c4:	40001800 	.word	0x40001800
     6c8:	20000c54 	.word	0x20000c54
     6cc:	e000e100 	.word	0xe000e100
     6d0:	0000064d 	.word	0x0000064d

000006d4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     6d4:	2300      	movs	r3, #0
     6d6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     6d8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     6da:	2201      	movs	r2, #1
     6dc:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     6de:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     6e0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     6e2:	2302      	movs	r3, #2
     6e4:	72c3      	strb	r3, [r0, #11]
}
     6e6:	4770      	bx	lr

000006e8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ea:	b083      	sub	sp, #12
     6ec:	1c05      	adds	r5, r0, #0
     6ee:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6f0:	a901      	add	r1, sp, #4
     6f2:	2300      	movs	r3, #0
     6f4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     6f6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     6f8:	6863      	ldr	r3, [r4, #4]
     6fa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     6fc:	7a23      	ldrb	r3, [r4, #8]
     6fe:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     700:	7820      	ldrb	r0, [r4, #0]
     702:	4b15      	ldr	r3, [pc, #84]	; (758 <extint_chan_set_config+0x70>)
     704:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     706:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     708:	2d1f      	cmp	r5, #31
     70a:	d800      	bhi.n	70e <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     70c:	4b13      	ldr	r3, [pc, #76]	; (75c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     70e:	2107      	movs	r1, #7
     710:	4029      	ands	r1, r5
     712:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     714:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     716:	7aa2      	ldrb	r2, [r4, #10]
     718:	2a00      	cmp	r2, #0
     71a:	d001      	beq.n	720 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     71c:	2208      	movs	r2, #8
     71e:	4310      	orrs	r0, r2
     720:	08ea      	lsrs	r2, r5, #3
     722:	0092      	lsls	r2, r2, #2
     724:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     726:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     728:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     72a:	270f      	movs	r7, #15
     72c:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     72e:	43be      	bics	r6, r7
     730:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     732:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     734:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     736:	7a62      	ldrb	r2, [r4, #9]
     738:	2a00      	cmp	r2, #0
     73a:	d006      	beq.n	74a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     73c:	695a      	ldr	r2, [r3, #20]
     73e:	2101      	movs	r1, #1
     740:	40a9      	lsls	r1, r5
     742:	1c0d      	adds	r5, r1, #0
     744:	4315      	orrs	r5, r2
     746:	615d      	str	r5, [r3, #20]
     748:	e004      	b.n	754 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     74a:	695a      	ldr	r2, [r3, #20]
     74c:	2101      	movs	r1, #1
     74e:	40a9      	lsls	r1, r5
     750:	438a      	bics	r2, r1
     752:	615a      	str	r2, [r3, #20]
	}
}
     754:	b003      	add	sp, #12
     756:	bdf0      	pop	{r4, r5, r6, r7, pc}
     758:	0000445d 	.word	0x0000445d
     75c:	40001800 	.word	0x40001800

00000760 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     760:	b510      	push	{r4, lr}
     762:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     764:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     766:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     768:	4299      	cmp	r1, r3
     76a:	d30c      	bcc.n	786 <_sercom_get_sync_baud_val+0x26>
     76c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     76e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     770:	1c60      	adds	r0, r4, #1
     772:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     774:	428b      	cmp	r3, r1
     776:	d801      	bhi.n	77c <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     778:	1c04      	adds	r4, r0, #0
     77a:	e7f8      	b.n	76e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     77c:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     77e:	2cff      	cmp	r4, #255	; 0xff
     780:	d801      	bhi.n	786 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     782:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     784:	2000      	movs	r0, #0
	}
}
     786:	bd10      	pop	{r4, pc}

00000788 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     788:	b5f0      	push	{r4, r5, r6, r7, lr}
     78a:	465f      	mov	r7, fp
     78c:	4656      	mov	r6, sl
     78e:	464d      	mov	r5, r9
     790:	4644      	mov	r4, r8
     792:	b4f0      	push	{r4, r5, r6, r7}
     794:	b087      	sub	sp, #28
     796:	1c06      	adds	r6, r0, #0
     798:	1c0d      	adds	r5, r1, #0
     79a:	9204      	str	r2, [sp, #16]
     79c:	aa10      	add	r2, sp, #64	; 0x40
     79e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7a0:	1c32      	adds	r2, r6, #0
     7a2:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7a4:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7a6:	428a      	cmp	r2, r1
     7a8:	d900      	bls.n	7ac <_sercom_get_async_baud_val+0x24>
     7aa:	e0b3      	b.n	914 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     7ac:	2b00      	cmp	r3, #0
     7ae:	d14b      	bne.n	848 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     7b0:	2100      	movs	r1, #0
     7b2:	1c32      	adds	r2, r6, #0
     7b4:	4c5e      	ldr	r4, [pc, #376]	; (930 <_sercom_get_async_baud_val+0x1a8>)
     7b6:	47a0      	blx	r4
     7b8:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     7ba:	1c2e      	adds	r6, r5, #0
     7bc:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     7be:	2000      	movs	r0, #0
     7c0:	2100      	movs	r1, #0
     7c2:	2200      	movs	r2, #0
     7c4:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     7c6:	243f      	movs	r4, #63	; 0x3f
     7c8:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     7ca:	2501      	movs	r5, #1
     7cc:	46a8      	mov	r8, r5
     7ce:	9002      	str	r0, [sp, #8]
     7d0:	9103      	str	r1, [sp, #12]
     7d2:	4661      	mov	r1, ip
     7d4:	3920      	subs	r1, #32
     7d6:	d403      	bmi.n	7e0 <_sercom_get_async_baud_val+0x58>
     7d8:	4640      	mov	r0, r8
     7da:	4088      	lsls	r0, r1
     7dc:	4681      	mov	r9, r0
     7de:	e005      	b.n	7ec <_sercom_get_async_baud_val+0x64>
     7e0:	2120      	movs	r1, #32
     7e2:	4665      	mov	r5, ip
     7e4:	1b4c      	subs	r4, r1, r5
     7e6:	4640      	mov	r0, r8
     7e8:	40e0      	lsrs	r0, r4
     7ea:	4681      	mov	r9, r0
     7ec:	4641      	mov	r1, r8
     7ee:	4664      	mov	r4, ip
     7f0:	40a1      	lsls	r1, r4
     7f2:	468a      	mov	sl, r1

		r = r << 1;
     7f4:	1c10      	adds	r0, r2, #0
     7f6:	1c19      	adds	r1, r3, #0
     7f8:	1880      	adds	r0, r0, r2
     7fa:	4159      	adcs	r1, r3
     7fc:	1c02      	adds	r2, r0, #0
     7fe:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     800:	465d      	mov	r5, fp
     802:	464c      	mov	r4, r9
     804:	4225      	tst	r5, r4
     806:	d002      	beq.n	80e <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     808:	4642      	mov	r2, r8
     80a:	4302      	orrs	r2, r0
     80c:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     80e:	429f      	cmp	r7, r3
     810:	d80c      	bhi.n	82c <_sercom_get_async_baud_val+0xa4>
     812:	d101      	bne.n	818 <_sercom_get_async_baud_val+0x90>
     814:	4296      	cmp	r6, r2
     816:	d809      	bhi.n	82c <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     818:	1b92      	subs	r2, r2, r6
     81a:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     81c:	4650      	mov	r0, sl
     81e:	9d02      	ldr	r5, [sp, #8]
     820:	4328      	orrs	r0, r5
     822:	4649      	mov	r1, r9
     824:	9c03      	ldr	r4, [sp, #12]
     826:	4321      	orrs	r1, r4
     828:	9002      	str	r0, [sp, #8]
     82a:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     82c:	4665      	mov	r5, ip
     82e:	3d01      	subs	r5, #1
     830:	46ac      	mov	ip, r5
     832:	d2ce      	bcs.n	7d2 <_sercom_get_async_baud_val+0x4a>
     834:	9802      	ldr	r0, [sp, #8]
     836:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     838:	4b3c      	ldr	r3, [pc, #240]	; (92c <_sercom_get_async_baud_val+0x1a4>)
     83a:	4a3b      	ldr	r2, [pc, #236]	; (928 <_sercom_get_async_baud_val+0x1a0>)
     83c:	1a12      	subs	r2, r2, r0
     83e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     840:	0c12      	lsrs	r2, r2, #16
     842:	041b      	lsls	r3, r3, #16
     844:	431a      	orrs	r2, r3
     846:	e062      	b.n	90e <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     848:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     84a:	2b01      	cmp	r3, #1
     84c:	d15f      	bne.n	90e <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     84e:	0f4f      	lsrs	r7, r1, #29
     850:	46b9      	mov	r9, r7
     852:	00cd      	lsls	r5, r1, #3
     854:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     856:	2100      	movs	r1, #0
     858:	1c32      	adds	r2, r6, #0
     85a:	2300      	movs	r3, #0
     85c:	4c34      	ldr	r4, [pc, #208]	; (930 <_sercom_get_async_baud_val+0x1a8>)
     85e:	47a0      	blx	r4
     860:	1c06      	adds	r6, r0, #0
     862:	1c0f      	adds	r7, r1, #0
     864:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     866:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     868:	9602      	str	r6, [sp, #8]
     86a:	9703      	str	r7, [sp, #12]
     86c:	469a      	mov	sl, r3
     86e:	4650      	mov	r0, sl
     870:	b2c0      	uxtb	r0, r0
     872:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     874:	2100      	movs	r1, #0
     876:	4688      	mov	r8, r1
     878:	2200      	movs	r2, #0
     87a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     87c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     87e:	1c27      	adds	r7, r4, #0
     880:	3f20      	subs	r7, #32
     882:	d403      	bmi.n	88c <_sercom_get_async_baud_val+0x104>
     884:	1c2e      	adds	r6, r5, #0
     886:	40be      	lsls	r6, r7
     888:	9601      	str	r6, [sp, #4]
     88a:	e004      	b.n	896 <_sercom_get_async_baud_val+0x10e>
     88c:	2020      	movs	r0, #32
     88e:	1b07      	subs	r7, r0, r4
     890:	1c29      	adds	r1, r5, #0
     892:	40f9      	lsrs	r1, r7
     894:	9101      	str	r1, [sp, #4]
     896:	1c2e      	adds	r6, r5, #0
     898:	40a6      	lsls	r6, r4
     89a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     89c:	1c10      	adds	r0, r2, #0
     89e:	1c19      	adds	r1, r3, #0
     8a0:	1880      	adds	r0, r0, r2
     8a2:	4159      	adcs	r1, r3
     8a4:	1c02      	adds	r2, r0, #0
     8a6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     8a8:	465f      	mov	r7, fp
     8aa:	4037      	ands	r7, r6
     8ac:	46bc      	mov	ip, r7
     8ae:	9e01      	ldr	r6, [sp, #4]
     8b0:	464f      	mov	r7, r9
     8b2:	403e      	ands	r6, r7
     8b4:	4667      	mov	r7, ip
     8b6:	433e      	orrs	r6, r7
     8b8:	d002      	beq.n	8c0 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     8ba:	1c2a      	adds	r2, r5, #0
     8bc:	4302      	orrs	r2, r0
     8be:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     8c0:	9803      	ldr	r0, [sp, #12]
     8c2:	4298      	cmp	r0, r3
     8c4:	d80b      	bhi.n	8de <_sercom_get_async_baud_val+0x156>
     8c6:	d102      	bne.n	8ce <_sercom_get_async_baud_val+0x146>
     8c8:	9902      	ldr	r1, [sp, #8]
     8ca:	4291      	cmp	r1, r2
     8cc:	d807      	bhi.n	8de <_sercom_get_async_baud_val+0x156>
			r = r - d;
     8ce:	9e02      	ldr	r6, [sp, #8]
     8d0:	9f03      	ldr	r7, [sp, #12]
     8d2:	1b92      	subs	r2, r2, r6
     8d4:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     8d6:	4647      	mov	r7, r8
     8d8:	9800      	ldr	r0, [sp, #0]
     8da:	4307      	orrs	r7, r0
     8dc:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     8de:	3c01      	subs	r4, #1
     8e0:	d2cd      	bcs.n	87e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     8e2:	4641      	mov	r1, r8
     8e4:	4652      	mov	r2, sl
     8e6:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     8e8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     8ea:	4c12      	ldr	r4, [pc, #72]	; (934 <_sercom_get_async_baud_val+0x1ac>)
     8ec:	42a3      	cmp	r3, r4
     8ee:	d908      	bls.n	902 <_sercom_get_async_baud_val+0x17a>
     8f0:	9a05      	ldr	r2, [sp, #20]
     8f2:	3201      	adds	r2, #1
     8f4:	b2d2      	uxtb	r2, r2
     8f6:	9205      	str	r2, [sp, #20]
     8f8:	2601      	movs	r6, #1
     8fa:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     8fc:	4657      	mov	r7, sl
     8fe:	2f08      	cmp	r7, #8
     900:	d1b5      	bne.n	86e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     902:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     904:	9805      	ldr	r0, [sp, #20]
     906:	2808      	cmp	r0, #8
     908:	d004      	beq.n	914 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     90a:	0342      	lsls	r2, r0, #13
     90c:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     90e:	9c04      	ldr	r4, [sp, #16]
     910:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     912:	2400      	movs	r4, #0
}
     914:	1c20      	adds	r0, r4, #0
     916:	b007      	add	sp, #28
     918:	bc3c      	pop	{r2, r3, r4, r5}
     91a:	4690      	mov	r8, r2
     91c:	4699      	mov	r9, r3
     91e:	46a2      	mov	sl, r4
     920:	46ab      	mov	fp, r5
     922:	bdf0      	pop	{r4, r5, r6, r7, pc}
     924:	46c0      	nop			; (mov r8, r8)
     926:	46c0      	nop			; (mov r8, r8)
     928:	00000000 	.word	0x00000000
     92c:	00000001 	.word	0x00000001
     930:	00004d95 	.word	0x00004d95
     934:	00001fff 	.word	0x00001fff

00000938 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     938:	b510      	push	{r4, lr}
     93a:	b082      	sub	sp, #8
     93c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     93e:	4b0f      	ldr	r3, [pc, #60]	; (97c <sercom_set_gclk_generator+0x44>)
     940:	781b      	ldrb	r3, [r3, #0]
     942:	2b00      	cmp	r3, #0
     944:	d001      	beq.n	94a <sercom_set_gclk_generator+0x12>
     946:	2900      	cmp	r1, #0
     948:	d00d      	beq.n	966 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     94a:	a901      	add	r1, sp, #4
     94c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     94e:	2013      	movs	r0, #19
     950:	4b0b      	ldr	r3, [pc, #44]	; (980 <sercom_set_gclk_generator+0x48>)
     952:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     954:	2013      	movs	r0, #19
     956:	4b0b      	ldr	r3, [pc, #44]	; (984 <sercom_set_gclk_generator+0x4c>)
     958:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     95a:	4b08      	ldr	r3, [pc, #32]	; (97c <sercom_set_gclk_generator+0x44>)
     95c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     95e:	2201      	movs	r2, #1
     960:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     962:	2000      	movs	r0, #0
     964:	e007      	b.n	976 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     966:	4b05      	ldr	r3, [pc, #20]	; (97c <sercom_set_gclk_generator+0x44>)
     968:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     96a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     96c:	1b14      	subs	r4, r2, r4
     96e:	1e62      	subs	r2, r4, #1
     970:	4194      	sbcs	r4, r2
     972:	4264      	negs	r4, r4
     974:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     976:	b002      	add	sp, #8
     978:	bd10      	pop	{r4, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	200000a4 	.word	0x200000a4
     980:	00004381 	.word	0x00004381
     984:	000042f5 	.word	0x000042f5

00000988 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     988:	4b44      	ldr	r3, [pc, #272]	; (a9c <_sercom_get_default_pad+0x114>)
     98a:	4298      	cmp	r0, r3
     98c:	d033      	beq.n	9f6 <_sercom_get_default_pad+0x6e>
     98e:	d806      	bhi.n	99e <_sercom_get_default_pad+0x16>
     990:	4b43      	ldr	r3, [pc, #268]	; (aa0 <_sercom_get_default_pad+0x118>)
     992:	4298      	cmp	r0, r3
     994:	d00d      	beq.n	9b2 <_sercom_get_default_pad+0x2a>
     996:	4b43      	ldr	r3, [pc, #268]	; (aa4 <_sercom_get_default_pad+0x11c>)
     998:	4298      	cmp	r0, r3
     99a:	d01b      	beq.n	9d4 <_sercom_get_default_pad+0x4c>
     99c:	e06f      	b.n	a7e <_sercom_get_default_pad+0xf6>
     99e:	4b42      	ldr	r3, [pc, #264]	; (aa8 <_sercom_get_default_pad+0x120>)
     9a0:	4298      	cmp	r0, r3
     9a2:	d04a      	beq.n	a3a <_sercom_get_default_pad+0xb2>
     9a4:	4b41      	ldr	r3, [pc, #260]	; (aac <_sercom_get_default_pad+0x124>)
     9a6:	4298      	cmp	r0, r3
     9a8:	d058      	beq.n	a5c <_sercom_get_default_pad+0xd4>
     9aa:	4b41      	ldr	r3, [pc, #260]	; (ab0 <_sercom_get_default_pad+0x128>)
     9ac:	4298      	cmp	r0, r3
     9ae:	d166      	bne.n	a7e <_sercom_get_default_pad+0xf6>
     9b0:	e032      	b.n	a18 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9b2:	2901      	cmp	r1, #1
     9b4:	d065      	beq.n	a82 <_sercom_get_default_pad+0xfa>
     9b6:	2900      	cmp	r1, #0
     9b8:	d004      	beq.n	9c4 <_sercom_get_default_pad+0x3c>
     9ba:	2902      	cmp	r1, #2
     9bc:	d006      	beq.n	9cc <_sercom_get_default_pad+0x44>
     9be:	2903      	cmp	r1, #3
     9c0:	d006      	beq.n	9d0 <_sercom_get_default_pad+0x48>
     9c2:	e001      	b.n	9c8 <_sercom_get_default_pad+0x40>
     9c4:	483b      	ldr	r0, [pc, #236]	; (ab4 <_sercom_get_default_pad+0x12c>)
     9c6:	e067      	b.n	a98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9c8:	2000      	movs	r0, #0
     9ca:	e065      	b.n	a98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9cc:	483a      	ldr	r0, [pc, #232]	; (ab8 <_sercom_get_default_pad+0x130>)
     9ce:	e063      	b.n	a98 <_sercom_get_default_pad+0x110>
     9d0:	483a      	ldr	r0, [pc, #232]	; (abc <_sercom_get_default_pad+0x134>)
     9d2:	e061      	b.n	a98 <_sercom_get_default_pad+0x110>
     9d4:	2901      	cmp	r1, #1
     9d6:	d056      	beq.n	a86 <_sercom_get_default_pad+0xfe>
     9d8:	2900      	cmp	r1, #0
     9da:	d004      	beq.n	9e6 <_sercom_get_default_pad+0x5e>
     9dc:	2902      	cmp	r1, #2
     9de:	d006      	beq.n	9ee <_sercom_get_default_pad+0x66>
     9e0:	2903      	cmp	r1, #3
     9e2:	d006      	beq.n	9f2 <_sercom_get_default_pad+0x6a>
     9e4:	e001      	b.n	9ea <_sercom_get_default_pad+0x62>
     9e6:	2003      	movs	r0, #3
     9e8:	e056      	b.n	a98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     9ea:	2000      	movs	r0, #0
     9ec:	e054      	b.n	a98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ee:	4834      	ldr	r0, [pc, #208]	; (ac0 <_sercom_get_default_pad+0x138>)
     9f0:	e052      	b.n	a98 <_sercom_get_default_pad+0x110>
     9f2:	4834      	ldr	r0, [pc, #208]	; (ac4 <_sercom_get_default_pad+0x13c>)
     9f4:	e050      	b.n	a98 <_sercom_get_default_pad+0x110>
     9f6:	2901      	cmp	r1, #1
     9f8:	d047      	beq.n	a8a <_sercom_get_default_pad+0x102>
     9fa:	2900      	cmp	r1, #0
     9fc:	d004      	beq.n	a08 <_sercom_get_default_pad+0x80>
     9fe:	2902      	cmp	r1, #2
     a00:	d006      	beq.n	a10 <_sercom_get_default_pad+0x88>
     a02:	2903      	cmp	r1, #3
     a04:	d006      	beq.n	a14 <_sercom_get_default_pad+0x8c>
     a06:	e001      	b.n	a0c <_sercom_get_default_pad+0x84>
     a08:	482f      	ldr	r0, [pc, #188]	; (ac8 <_sercom_get_default_pad+0x140>)
     a0a:	e045      	b.n	a98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     a0c:	2000      	movs	r0, #0
     a0e:	e043      	b.n	a98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a10:	482e      	ldr	r0, [pc, #184]	; (acc <_sercom_get_default_pad+0x144>)
     a12:	e041      	b.n	a98 <_sercom_get_default_pad+0x110>
     a14:	482e      	ldr	r0, [pc, #184]	; (ad0 <_sercom_get_default_pad+0x148>)
     a16:	e03f      	b.n	a98 <_sercom_get_default_pad+0x110>
     a18:	2901      	cmp	r1, #1
     a1a:	d038      	beq.n	a8e <_sercom_get_default_pad+0x106>
     a1c:	2900      	cmp	r1, #0
     a1e:	d004      	beq.n	a2a <_sercom_get_default_pad+0xa2>
     a20:	2902      	cmp	r1, #2
     a22:	d006      	beq.n	a32 <_sercom_get_default_pad+0xaa>
     a24:	2903      	cmp	r1, #3
     a26:	d006      	beq.n	a36 <_sercom_get_default_pad+0xae>
     a28:	e001      	b.n	a2e <_sercom_get_default_pad+0xa6>
     a2a:	482a      	ldr	r0, [pc, #168]	; (ad4 <_sercom_get_default_pad+0x14c>)
     a2c:	e034      	b.n	a98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     a2e:	2000      	movs	r0, #0
     a30:	e032      	b.n	a98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a32:	4829      	ldr	r0, [pc, #164]	; (ad8 <_sercom_get_default_pad+0x150>)
     a34:	e030      	b.n	a98 <_sercom_get_default_pad+0x110>
     a36:	4829      	ldr	r0, [pc, #164]	; (adc <_sercom_get_default_pad+0x154>)
     a38:	e02e      	b.n	a98 <_sercom_get_default_pad+0x110>
     a3a:	2901      	cmp	r1, #1
     a3c:	d029      	beq.n	a92 <_sercom_get_default_pad+0x10a>
     a3e:	2900      	cmp	r1, #0
     a40:	d004      	beq.n	a4c <_sercom_get_default_pad+0xc4>
     a42:	2902      	cmp	r1, #2
     a44:	d006      	beq.n	a54 <_sercom_get_default_pad+0xcc>
     a46:	2903      	cmp	r1, #3
     a48:	d006      	beq.n	a58 <_sercom_get_default_pad+0xd0>
     a4a:	e001      	b.n	a50 <_sercom_get_default_pad+0xc8>
     a4c:	4824      	ldr	r0, [pc, #144]	; (ae0 <_sercom_get_default_pad+0x158>)
     a4e:	e023      	b.n	a98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     a50:	2000      	movs	r0, #0
     a52:	e021      	b.n	a98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a54:	4823      	ldr	r0, [pc, #140]	; (ae4 <_sercom_get_default_pad+0x15c>)
     a56:	e01f      	b.n	a98 <_sercom_get_default_pad+0x110>
     a58:	4823      	ldr	r0, [pc, #140]	; (ae8 <_sercom_get_default_pad+0x160>)
     a5a:	e01d      	b.n	a98 <_sercom_get_default_pad+0x110>
     a5c:	2901      	cmp	r1, #1
     a5e:	d01a      	beq.n	a96 <_sercom_get_default_pad+0x10e>
     a60:	2900      	cmp	r1, #0
     a62:	d004      	beq.n	a6e <_sercom_get_default_pad+0xe6>
     a64:	2902      	cmp	r1, #2
     a66:	d006      	beq.n	a76 <_sercom_get_default_pad+0xee>
     a68:	2903      	cmp	r1, #3
     a6a:	d006      	beq.n	a7a <_sercom_get_default_pad+0xf2>
     a6c:	e001      	b.n	a72 <_sercom_get_default_pad+0xea>
     a6e:	481f      	ldr	r0, [pc, #124]	; (aec <_sercom_get_default_pad+0x164>)
     a70:	e012      	b.n	a98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     a72:	2000      	movs	r0, #0
     a74:	e010      	b.n	a98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a76:	481e      	ldr	r0, [pc, #120]	; (af0 <_sercom_get_default_pad+0x168>)
     a78:	e00e      	b.n	a98 <_sercom_get_default_pad+0x110>
     a7a:	481e      	ldr	r0, [pc, #120]	; (af4 <_sercom_get_default_pad+0x16c>)
     a7c:	e00c      	b.n	a98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     a7e:	2000      	movs	r0, #0
     a80:	e00a      	b.n	a98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a82:	481d      	ldr	r0, [pc, #116]	; (af8 <_sercom_get_default_pad+0x170>)
     a84:	e008      	b.n	a98 <_sercom_get_default_pad+0x110>
     a86:	481d      	ldr	r0, [pc, #116]	; (afc <_sercom_get_default_pad+0x174>)
     a88:	e006      	b.n	a98 <_sercom_get_default_pad+0x110>
     a8a:	481d      	ldr	r0, [pc, #116]	; (b00 <_sercom_get_default_pad+0x178>)
     a8c:	e004      	b.n	a98 <_sercom_get_default_pad+0x110>
     a8e:	481d      	ldr	r0, [pc, #116]	; (b04 <_sercom_get_default_pad+0x17c>)
     a90:	e002      	b.n	a98 <_sercom_get_default_pad+0x110>
     a92:	481d      	ldr	r0, [pc, #116]	; (b08 <_sercom_get_default_pad+0x180>)
     a94:	e000      	b.n	a98 <_sercom_get_default_pad+0x110>
     a96:	481d      	ldr	r0, [pc, #116]	; (b0c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     a98:	4770      	bx	lr
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	42001000 	.word	0x42001000
     aa0:	42000800 	.word	0x42000800
     aa4:	42000c00 	.word	0x42000c00
     aa8:	42001800 	.word	0x42001800
     aac:	42001c00 	.word	0x42001c00
     ab0:	42001400 	.word	0x42001400
     ab4:	00040003 	.word	0x00040003
     ab8:	00060003 	.word	0x00060003
     abc:	00070003 	.word	0x00070003
     ac0:	001e0003 	.word	0x001e0003
     ac4:	001f0003 	.word	0x001f0003
     ac8:	000c0002 	.word	0x000c0002
     acc:	000e0002 	.word	0x000e0002
     ad0:	000f0002 	.word	0x000f0002
     ad4:	00100003 	.word	0x00100003
     ad8:	00120003 	.word	0x00120003
     adc:	00130003 	.word	0x00130003
     ae0:	00530005 	.word	0x00530005
     ae4:	003e0005 	.word	0x003e0005
     ae8:	00520005 	.word	0x00520005
     aec:	00160003 	.word	0x00160003
     af0:	00180003 	.word	0x00180003
     af4:	00190003 	.word	0x00190003
     af8:	00050003 	.word	0x00050003
     afc:	00010003 	.word	0x00010003
     b00:	000d0002 	.word	0x000d0002
     b04:	00110003 	.word	0x00110003
     b08:	003f0005 	.word	0x003f0005
     b0c:	00170003 	.word	0x00170003

00000b10 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b10:	b570      	push	{r4, r5, r6, lr}
     b12:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b14:	4a0c      	ldr	r2, [pc, #48]	; (b48 <_sercom_get_sercom_inst_index+0x38>)
     b16:	466b      	mov	r3, sp
     b18:	ca70      	ldmia	r2!, {r4, r5, r6}
     b1a:	c370      	stmia	r3!, {r4, r5, r6}
     b1c:	ca32      	ldmia	r2!, {r1, r4, r5}
     b1e:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b20:	9e00      	ldr	r6, [sp, #0]
     b22:	4286      	cmp	r6, r0
     b24:	d006      	beq.n	b34 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b26:	2301      	movs	r3, #1
     b28:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b2a:	4669      	mov	r1, sp
     b2c:	5852      	ldr	r2, [r2, r1]
     b2e:	4282      	cmp	r2, r0
     b30:	d103      	bne.n	b3a <_sercom_get_sercom_inst_index+0x2a>
     b32:	e000      	b.n	b36 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b34:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     b36:	b2d8      	uxtb	r0, r3
     b38:	e003      	b.n	b42 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b3a:	3301      	adds	r3, #1
     b3c:	2b06      	cmp	r3, #6
     b3e:	d1f3      	bne.n	b28 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     b40:	2000      	movs	r0, #0
}
     b42:	b006      	add	sp, #24
     b44:	bd70      	pop	{r4, r5, r6, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	00005f00 	.word	0x00005f00

00000b4c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b4e:	4647      	mov	r7, r8
     b50:	b480      	push	{r7}
     b52:	b088      	sub	sp, #32
     b54:	1c05      	adds	r5, r0, #0
     b56:	1c0c      	adds	r4, r1, #0
     b58:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     b5a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     b5c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     b5e:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     b60:	079a      	lsls	r2, r3, #30
     b62:	d500      	bpl.n	b66 <spi_init+0x1a>
     b64:	e0df      	b.n	d26 <spi_init+0x1da>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b66:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     b68:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     b6a:	07da      	lsls	r2, r3, #31
     b6c:	d500      	bpl.n	b70 <spi_init+0x24>
     b6e:	e0da      	b.n	d26 <spi_init+0x1da>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b70:	1c08      	adds	r0, r1, #0
     b72:	4b6f      	ldr	r3, [pc, #444]	; (d30 <spi_init+0x1e4>)
     b74:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b76:	4b6f      	ldr	r3, [pc, #444]	; (d34 <spi_init+0x1e8>)
     b78:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b7a:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b7c:	2701      	movs	r7, #1
     b7e:	4097      	lsls	r7, r2
     b80:	1c3a      	adds	r2, r7, #0
     b82:	430a      	orrs	r2, r1
     b84:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     b86:	a907      	add	r1, sp, #28
     b88:	2724      	movs	r7, #36	; 0x24
     b8a:	5df3      	ldrb	r3, [r6, r7]
     b8c:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b8e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b90:	b2c0      	uxtb	r0, r0
     b92:	4680      	mov	r8, r0
     b94:	4b68      	ldr	r3, [pc, #416]	; (d38 <spi_init+0x1ec>)
     b96:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b98:	4640      	mov	r0, r8
     b9a:	4b68      	ldr	r3, [pc, #416]	; (d3c <spi_init+0x1f0>)
     b9c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b9e:	5df0      	ldrb	r0, [r6, r7]
     ba0:	2100      	movs	r1, #0
     ba2:	4b67      	ldr	r3, [pc, #412]	; (d40 <spi_init+0x1f4>)
     ba4:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     ba6:	7833      	ldrb	r3, [r6, #0]
     ba8:	2b01      	cmp	r3, #1
     baa:	d103      	bne.n	bb4 <spi_init+0x68>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     bac:	6822      	ldr	r2, [r4, #0]
     bae:	230c      	movs	r3, #12
     bb0:	4313      	orrs	r3, r2
     bb2:	6023      	str	r3, [r4, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     bb4:	7833      	ldrb	r3, [r6, #0]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d000      	beq.n	bbc <spi_init+0x70>
     bba:	e0b1      	b.n	d20 <spi_init+0x1d4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     bbc:	6822      	ldr	r2, [r4, #0]
     bbe:	2308      	movs	r3, #8
     bc0:	4313      	orrs	r3, r2
     bc2:	6023      	str	r3, [r4, #0]
     bc4:	e0ac      	b.n	d20 <spi_init+0x1d4>
     bc6:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     bc8:	60d1      	str	r1, [r2, #12]
     bca:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     bcc:	2b1c      	cmp	r3, #28
     bce:	d1fa      	bne.n	bc6 <spi_init+0x7a>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     bd0:	2300      	movs	r3, #0
     bd2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     bd4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     bd6:	2400      	movs	r4, #0
     bd8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     bda:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     bdc:	2336      	movs	r3, #54	; 0x36
     bde:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     be0:	2337      	movs	r3, #55	; 0x37
     be2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     be4:	2338      	movs	r3, #56	; 0x38
     be6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     be8:	2303      	movs	r3, #3
     bea:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     bec:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     bee:	6828      	ldr	r0, [r5, #0]
     bf0:	4b4f      	ldr	r3, [pc, #316]	; (d30 <spi_init+0x1e4>)
     bf2:	4798      	blx	r3
     bf4:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     bf6:	4953      	ldr	r1, [pc, #332]	; (d44 <spi_init+0x1f8>)
     bf8:	4b53      	ldr	r3, [pc, #332]	; (d48 <spi_init+0x1fc>)
     bfa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     bfc:	00bf      	lsls	r7, r7, #2
     bfe:	4b53      	ldr	r3, [pc, #332]	; (d4c <spi_init+0x200>)
     c00:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c02:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c04:	ab02      	add	r3, sp, #8
     c06:	2280      	movs	r2, #128	; 0x80
     c08:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c0a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c0c:	2201      	movs	r2, #1
     c0e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     c10:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     c12:	7833      	ldrb	r3, [r6, #0]
     c14:	2b00      	cmp	r3, #0
     c16:	d102      	bne.n	c1e <spi_init+0xd2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c18:	2200      	movs	r2, #0
     c1a:	ab02      	add	r3, sp, #8
     c1c:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     c1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     c20:	9303      	str	r3, [sp, #12]
     c22:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     c24:	9004      	str	r0, [sp, #16]
     c26:	6b32      	ldr	r2, [r6, #48]	; 0x30
     c28:	9205      	str	r2, [sp, #20]
     c2a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c2c:	9306      	str	r3, [sp, #24]
     c2e:	2400      	movs	r4, #0
     c30:	b2e1      	uxtb	r1, r4
     c32:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c34:	aa03      	add	r2, sp, #12
     c36:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     c38:	2800      	cmp	r0, #0
     c3a:	d102      	bne.n	c42 <spi_init+0xf6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c3c:	1c38      	adds	r0, r7, #0
     c3e:	4a44      	ldr	r2, [pc, #272]	; (d50 <spi_init+0x204>)
     c40:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     c42:	1c43      	adds	r3, r0, #1
     c44:	d006      	beq.n	c54 <spi_init+0x108>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c46:	466a      	mov	r2, sp
     c48:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c4a:	0c00      	lsrs	r0, r0, #16
     c4c:	b2c0      	uxtb	r0, r0
     c4e:	a902      	add	r1, sp, #8
     c50:	4b40      	ldr	r3, [pc, #256]	; (d54 <spi_init+0x208>)
     c52:	4798      	blx	r3
     c54:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     c56:	2c04      	cmp	r4, #4
     c58:	d1ea      	bne.n	c30 <spi_init+0xe4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     c5a:	7833      	ldrb	r3, [r6, #0]
     c5c:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     c5e:	7c33      	ldrb	r3, [r6, #16]
     c60:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     c62:	7cb3      	ldrb	r3, [r6, #18]
     c64:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     c66:	7d33      	ldrb	r3, [r6, #20]
     c68:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     c6a:	2200      	movs	r2, #0
     c6c:	466b      	mov	r3, sp
     c6e:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     c70:	7833      	ldrb	r3, [r6, #0]
     c72:	2b01      	cmp	r3, #1
     c74:	d114      	bne.n	ca0 <spi_init+0x154>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c76:	6828      	ldr	r0, [r5, #0]
     c78:	4b2d      	ldr	r3, [pc, #180]	; (d30 <spi_init+0x1e4>)
     c7a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c7c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     c7e:	b2c0      	uxtb	r0, r0
     c80:	4b35      	ldr	r3, [pc, #212]	; (d58 <spi_init+0x20c>)
     c82:	4798      	blx	r3
     c84:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     c86:	69b0      	ldr	r0, [r6, #24]
     c88:	466a      	mov	r2, sp
     c8a:	3206      	adds	r2, #6
     c8c:	4b33      	ldr	r3, [pc, #204]	; (d5c <spi_init+0x210>)
     c8e:	4798      	blx	r3
     c90:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     c92:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     c94:	2b00      	cmp	r3, #0
     c96:	d146      	bne.n	d26 <spi_init+0x1da>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     c98:	466b      	mov	r3, sp
     c9a:	3306      	adds	r3, #6
     c9c:	781b      	ldrb	r3, [r3, #0]
     c9e:	733b      	strb	r3, [r7, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     ca0:	7833      	ldrb	r3, [r6, #0]
     ca2:	2b00      	cmp	r3, #0
     ca4:	d10f      	bne.n	cc6 <spi_init+0x17a>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     ca6:	69b1      	ldr	r1, [r6, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     ca8:	8bb3      	ldrh	r3, [r6, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     cac:	7ff4      	ldrb	r4, [r6, #31]
     cae:	0424      	lsls	r4, r4, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     cb0:	7fb2      	ldrb	r2, [r6, #30]
     cb2:	4322      	orrs	r2, r4

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     cb4:	4302      	orrs	r2, r0
     cb6:	627a      	str	r2, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     cb8:	2220      	movs	r2, #32
     cba:	5cb2      	ldrb	r2, [r6, r2]
     cbc:	2a00      	cmp	r2, #0
     cbe:	d004      	beq.n	cca <spi_init+0x17e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     cc0:	2240      	movs	r2, #64	; 0x40
     cc2:	4313      	orrs	r3, r2
     cc4:	e001      	b.n	cca <spi_init+0x17e>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     cc6:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     cc8:	2100      	movs	r1, #0
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     cca:	68b2      	ldr	r2, [r6, #8]
     ccc:	6870      	ldr	r0, [r6, #4]
     cce:	4302      	orrs	r2, r0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     cd0:	68f0      	ldr	r0, [r6, #12]
     cd2:	4302      	orrs	r2, r0

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     cd4:	430a      	orrs	r2, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
     cd6:	7c31      	ldrb	r1, [r6, #16]
     cd8:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     cda:	7c71      	ldrb	r1, [r6, #17]
     cdc:	2900      	cmp	r1, #0
     cde:	d103      	bne.n	ce8 <spi_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ce0:	491f      	ldr	r1, [pc, #124]	; (d60 <spi_init+0x214>)
     ce2:	7889      	ldrb	r1, [r1, #2]
     ce4:	0788      	lsls	r0, r1, #30
     ce6:	d501      	bpl.n	cec <spi_init+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     ce8:	2180      	movs	r1, #128	; 0x80
     cea:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     cec:	7cb1      	ldrb	r1, [r6, #18]
     cee:	2900      	cmp	r1, #0
     cf0:	d002      	beq.n	cf8 <spi_init+0x1ac>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     cf2:	2180      	movs	r1, #128	; 0x80
     cf4:	0289      	lsls	r1, r1, #10
     cf6:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     cf8:	7cf1      	ldrb	r1, [r6, #19]
     cfa:	2900      	cmp	r1, #0
     cfc:	d002      	beq.n	d04 <spi_init+0x1b8>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     cfe:	2180      	movs	r1, #128	; 0x80
     d00:	0089      	lsls	r1, r1, #2
     d02:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     d04:	7d31      	ldrb	r1, [r6, #20]
     d06:	2900      	cmp	r1, #0
     d08:	d002      	beq.n	d10 <spi_init+0x1c4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     d0a:	2180      	movs	r1, #128	; 0x80
     d0c:	0189      	lsls	r1, r1, #6
     d0e:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     d10:	6839      	ldr	r1, [r7, #0]
     d12:	430a      	orrs	r2, r1
     d14:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     d16:	687a      	ldr	r2, [r7, #4]
     d18:	4313      	orrs	r3, r2
     d1a:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
     d1c:	2000      	movs	r0, #0
     d1e:	e002      	b.n	d26 <spi_init+0x1da>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     d20:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     d22:	2100      	movs	r1, #0
     d24:	e74f      	b.n	bc6 <spi_init+0x7a>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     d26:	b008      	add	sp, #32
     d28:	bc04      	pop	{r2}
     d2a:	4690      	mov	r8, r2
     d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	00000b11 	.word	0x00000b11
     d34:	40000400 	.word	0x40000400
     d38:	00004381 	.word	0x00004381
     d3c:	000042f5 	.word	0x000042f5
     d40:	00000939 	.word	0x00000939
     d44:	00000e51 	.word	0x00000e51
     d48:	00001a05 	.word	0x00001a05
     d4c:	20000cb0 	.word	0x20000cb0
     d50:	00000989 	.word	0x00000989
     d54:	0000445d 	.word	0x0000445d
     d58:	0000439d 	.word	0x0000439d
     d5c:	00000761 	.word	0x00000761
     d60:	41002000 	.word	0x41002000

00000d64 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     d64:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d66:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     d68:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d6a:	2c01      	cmp	r4, #1
     d6c:	d16c      	bne.n	e48 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     d6e:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d70:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     d72:	2c00      	cmp	r4, #0
     d74:	d168      	bne.n	e48 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     d76:	2a00      	cmp	r2, #0
     d78:	d057      	beq.n	e2a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     d7a:	784b      	ldrb	r3, [r1, #1]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d044      	beq.n	e0a <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d80:	6802      	ldr	r2, [r0, #0]
     d82:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     d84:	07dc      	lsls	r4, r3, #31
     d86:	d40f      	bmi.n	da8 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     d88:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d8a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d8c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d8e:	2900      	cmp	r1, #0
     d90:	d103      	bne.n	d9a <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     d92:	095a      	lsrs	r2, r3, #5
     d94:	01d2      	lsls	r2, r2, #7
     d96:	492d      	ldr	r1, [pc, #180]	; (e4c <spi_select_slave+0xe8>)
     d98:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d9a:	211f      	movs	r1, #31
     d9c:	400b      	ands	r3, r1
     d9e:	2101      	movs	r1, #1
     da0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     da2:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     da4:	2305      	movs	r3, #5
     da6:	e04f      	b.n	e48 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     da8:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     daa:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     dac:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dae:	2c00      	cmp	r4, #0
     db0:	d103      	bne.n	dba <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     db2:	095a      	lsrs	r2, r3, #5
     db4:	01d2      	lsls	r2, r2, #7
     db6:	4c25      	ldr	r4, [pc, #148]	; (e4c <spi_select_slave+0xe8>)
     db8:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dba:	241f      	movs	r4, #31
     dbc:	4023      	ands	r3, r4
     dbe:	2401      	movs	r4, #1
     dc0:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     dc2:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     dc4:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     dc6:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dc8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     dca:	07d4      	lsls	r4, r2, #31
     dcc:	d500      	bpl.n	dd0 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     dce:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     dd0:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     dd2:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     dd4:	2a00      	cmp	r2, #0
     dd6:	d137      	bne.n	e48 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     dd8:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     dda:	2104      	movs	r1, #4
     ddc:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     dde:	420b      	tst	r3, r1
     de0:	d0fc      	beq.n	ddc <spi_select_slave+0x78>
     de2:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     de4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     de6:	074c      	lsls	r4, r1, #29
     de8:	d52e      	bpl.n	e48 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     dea:	8b53      	ldrh	r3, [r2, #26]
     dec:	0759      	lsls	r1, r3, #29
     dee:	d503      	bpl.n	df8 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     df0:	8b51      	ldrh	r1, [r2, #26]
     df2:	2304      	movs	r3, #4
     df4:	430b      	orrs	r3, r1
     df6:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     df8:	7983      	ldrb	r3, [r0, #6]
     dfa:	2b01      	cmp	r3, #1
     dfc:	d102      	bne.n	e04 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     dfe:	6a93      	ldr	r3, [r2, #40]	; 0x28
     e00:	2300      	movs	r3, #0
     e02:	e021      	b.n	e48 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e04:	6a93      	ldr	r3, [r2, #40]	; 0x28
     e06:	2300      	movs	r3, #0
     e08:	e01e      	b.n	e48 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     e0a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e0c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e0e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e10:	2900      	cmp	r1, #0
     e12:	d103      	bne.n	e1c <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     e14:	095a      	lsrs	r2, r3, #5
     e16:	01d2      	lsls	r2, r2, #7
     e18:	4c0c      	ldr	r4, [pc, #48]	; (e4c <spi_select_slave+0xe8>)
     e1a:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e1c:	211f      	movs	r1, #31
     e1e:	400b      	ands	r3, r1
     e20:	2101      	movs	r1, #1
     e22:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     e24:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     e26:	2300      	movs	r3, #0
     e28:	e00e      	b.n	e48 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     e2a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e2c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     e2e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     e30:	2900      	cmp	r1, #0
     e32:	d103      	bne.n	e3c <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     e34:	095a      	lsrs	r2, r3, #5
     e36:	01d2      	lsls	r2, r2, #7
     e38:	4904      	ldr	r1, [pc, #16]	; (e4c <spi_select_slave+0xe8>)
     e3a:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e3c:	211f      	movs	r1, #31
     e3e:	400b      	ands	r3, r1
     e40:	2101      	movs	r1, #1
     e42:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e44:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     e46:	2300      	movs	r3, #0
}
     e48:	1c18      	adds	r0, r3, #0
     e4a:	bd10      	pop	{r4, pc}
     e4c:	41004400 	.word	0x41004400

00000e50 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     e52:	0080      	lsls	r0, r0, #2
     e54:	4b74      	ldr	r3, [pc, #464]	; (1028 <_spi_interrupt_handler+0x1d8>)
     e56:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     e58:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     e5a:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     e5c:	5ce3      	ldrb	r3, [r4, r3]
     e5e:	2237      	movs	r2, #55	; 0x37
     e60:	5ca7      	ldrb	r7, [r4, r2]
     e62:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     e64:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     e66:	7dae      	ldrb	r6, [r5, #22]
     e68:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     e6a:	07f1      	lsls	r1, r6, #31
     e6c:	d549      	bpl.n	f02 <_spi_interrupt_handler+0xb2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     e6e:	7963      	ldrb	r3, [r4, #5]
     e70:	2b01      	cmp	r3, #1
     e72:	d116      	bne.n	ea2 <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
     e74:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     e76:	2b00      	cmp	r3, #0
     e78:	d10f      	bne.n	e9a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     e7a:	4b6c      	ldr	r3, [pc, #432]	; (102c <_spi_interrupt_handler+0x1dc>)
     e7c:	881b      	ldrh	r3, [r3, #0]
     e7e:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     e80:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     e82:	3b01      	subs	r3, #1
     e84:	b29b      	uxth	r3, r3
     e86:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
     e88:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     e8a:	b29b      	uxth	r3, r3
     e8c:	2b00      	cmp	r3, #0
     e8e:	d101      	bne.n	e94 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     e90:	2301      	movs	r3, #1
     e92:	752b      	strb	r3, [r5, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     e94:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
     e96:	2b01      	cmp	r3, #1
     e98:	d103      	bne.n	ea2 <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     e9a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     e9c:	2b00      	cmp	r3, #0
     e9e:	d105      	bne.n	eac <_spi_interrupt_handler+0x5c>
     ea0:	e02f      	b.n	f02 <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     ea2:	2b00      	cmp	r3, #0
     ea4:	d12d      	bne.n	f02 <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
     ea6:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     ea8:	2b00      	cmp	r3, #0
     eaa:	d02a      	beq.n	f02 <_spi_interrupt_handler+0xb2>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     eac:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     eb0:	7819      	ldrb	r1, [r3, #0]
     eb2:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     eb4:	1c58      	adds	r0, r3, #1
     eb6:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eb8:	79a0      	ldrb	r0, [r4, #6]
     eba:	2801      	cmp	r0, #1
     ebc:	d104      	bne.n	ec8 <_spi_interrupt_handler+0x78>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     ebe:	7858      	ldrb	r0, [r3, #1]
     ec0:	0200      	lsls	r0, r0, #8
     ec2:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     ec4:	3302      	adds	r3, #2
     ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     ec8:	05cb      	lsls	r3, r1, #23
     eca:	0ddb      	lsrs	r3, r3, #23
     ecc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     ece:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     ed0:	3b01      	subs	r3, #1
     ed2:	b29b      	uxth	r3, r3
     ed4:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     ed6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     ed8:	b29b      	uxth	r3, r3
     eda:	2b00      	cmp	r3, #0
     edc:	d111      	bne.n	f02 <_spi_interrupt_handler+0xb2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     ede:	2301      	movs	r3, #1
     ee0:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     ee2:	7a63      	ldrb	r3, [r4, #9]
     ee4:	2b01      	cmp	r3, #1
     ee6:	d10c      	bne.n	f02 <_spi_interrupt_handler+0xb2>
     ee8:	79e3      	ldrb	r3, [r4, #7]
     eea:	2b00      	cmp	r3, #0
     eec:	d109      	bne.n	f02 <_spi_interrupt_handler+0xb2>
						!(module->receiver_enabled)) {
					/* Buffer sent with receiver disabled */
					module->dir = SPI_DIRECTION_IDLE;
     eee:	2303      	movs	r3, #3
     ef0:	7263      	strb	r3, [r4, #9]
					module->status = STATUS_OK;
     ef2:	2200      	movs	r2, #0
     ef4:	2338      	movs	r3, #56	; 0x38
     ef6:	54e2      	strb	r2, [r4, r3]
					/* Run callback if registered and enabled */
					if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     ef8:	07fa      	lsls	r2, r7, #31
     efa:	d502      	bpl.n	f02 <_spi_interrupt_handler+0xb2>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
									(module);
     efc:	1c20      	adds	r0, r4, #0
     efe:	68e3      	ldr	r3, [r4, #12]
     f00:	4798      	blx	r3
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     f02:	0771      	lsls	r1, r6, #29
     f04:	d561      	bpl.n	fca <_spi_interrupt_handler+0x17a>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f06:	8b6b      	ldrh	r3, [r5, #26]
     f08:	075a      	lsls	r2, r3, #29
     f0a:	d514      	bpl.n	f36 <_spi_interrupt_handler+0xe6>
			if (module->dir != SPI_DIRECTION_WRITE) {
     f0c:	7a63      	ldrb	r3, [r4, #9]
     f0e:	2b01      	cmp	r3, #1
     f10:	d00b      	beq.n	f2a <_spi_interrupt_handler+0xda>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     f12:	221e      	movs	r2, #30
     f14:	2338      	movs	r3, #56	; 0x38
     f16:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     f18:	2303      	movs	r3, #3
     f1a:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     f1c:	2305      	movs	r3, #5
     f1e:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     f20:	073b      	lsls	r3, r7, #28
     f22:	d502      	bpl.n	f2a <_spi_interrupt_handler+0xda>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     f24:	1c20      	adds	r0, r4, #0
     f26:	69a1      	ldr	r1, [r4, #24]
     f28:	4788      	blx	r1
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     f2a:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     f2c:	8b6a      	ldrh	r2, [r5, #26]
     f2e:	2304      	movs	r3, #4
     f30:	4313      	orrs	r3, r2
     f32:	836b      	strh	r3, [r5, #26]
     f34:	e049      	b.n	fca <_spi_interrupt_handler+0x17a>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     f36:	7a63      	ldrb	r3, [r4, #9]
     f38:	2b01      	cmp	r3, #1
     f3a:	d116      	bne.n	f6a <_spi_interrupt_handler+0x11a>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     f3c:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     f40:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     f42:	3b01      	subs	r3, #1
     f44:	b29b      	uxth	r3, r3
     f46:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
     f48:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     f4a:	b29b      	uxth	r3, r3
     f4c:	2b00      	cmp	r3, #0
     f4e:	d13c      	bne.n	fca <_spi_interrupt_handler+0x17a>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     f50:	2304      	movs	r3, #4
     f52:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
     f54:	2200      	movs	r2, #0
     f56:	2338      	movs	r3, #56	; 0x38
     f58:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     f5a:	2303      	movs	r3, #3
     f5c:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     f5e:	07fa      	lsls	r2, r7, #31
     f60:	d533      	bpl.n	fca <_spi_interrupt_handler+0x17a>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     f62:	1c20      	adds	r0, r4, #0
     f64:	68e3      	ldr	r3, [r4, #12]
     f66:	4798      	blx	r3
     f68:	e02f      	b.n	fca <_spi_interrupt_handler+0x17a>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     f6a:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f6e:	05d2      	lsls	r2, r2, #23
     f70:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     f72:	b2d3      	uxtb	r3, r2
     f74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     f76:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     f78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f7a:	1c59      	adds	r1, r3, #1
     f7c:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f7e:	79a1      	ldrb	r1, [r4, #6]
     f80:	2901      	cmp	r1, #1
     f82:	d104      	bne.n	f8e <_spi_interrupt_handler+0x13e>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     f84:	0a12      	lsrs	r2, r2, #8
     f86:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     f88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f8a:	3301      	adds	r3, #1
     f8c:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     f8e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     f90:	3b01      	subs	r3, #1
     f92:	b29b      	uxth	r3, r3
     f94:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     f96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     f98:	b29b      	uxth	r3, r3
     f9a:	2b00      	cmp	r3, #0
     f9c:	d115      	bne.n	fca <_spi_interrupt_handler+0x17a>
					module->status = STATUS_OK;
     f9e:	2200      	movs	r2, #0
     fa0:	2338      	movs	r3, #56	; 0x38
     fa2:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     fa4:	2304      	movs	r3, #4
     fa6:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     fa8:	7a63      	ldrb	r3, [r4, #9]
     faa:	2b02      	cmp	r3, #2
     fac:	d105      	bne.n	fba <_spi_interrupt_handler+0x16a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     fae:	077a      	lsls	r2, r7, #29
     fb0:	d50b      	bpl.n	fca <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     fb2:	1c20      	adds	r0, r4, #0
     fb4:	6963      	ldr	r3, [r4, #20]
     fb6:	4798      	blx	r3
     fb8:	e007      	b.n	fca <_spi_interrupt_handler+0x17a>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     fba:	7a63      	ldrb	r3, [r4, #9]
     fbc:	2b00      	cmp	r3, #0
     fbe:	d104      	bne.n	fca <_spi_interrupt_handler+0x17a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     fc0:	07b9      	lsls	r1, r7, #30
     fc2:	d502      	bpl.n	fca <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     fc4:	1c20      	adds	r0, r4, #0
     fc6:	6922      	ldr	r2, [r4, #16]
     fc8:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     fca:	07b3      	lsls	r3, r6, #30
     fcc:	d513      	bpl.n	ff6 <_spi_interrupt_handler+0x1a6>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     fce:	7963      	ldrb	r3, [r4, #5]
     fd0:	2b00      	cmp	r3, #0
     fd2:	d110      	bne.n	ff6 <_spi_interrupt_handler+0x1a6>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     fd4:	2307      	movs	r3, #7
     fd6:	752b      	strb	r3, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     fd8:	2302      	movs	r3, #2
     fda:	762b      	strb	r3, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     fdc:	2303      	movs	r3, #3
     fde:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     fe0:	2300      	movs	r3, #0
     fe2:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     fe4:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     fe6:	2338      	movs	r3, #56	; 0x38
     fe8:	2200      	movs	r2, #0
     fea:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     fec:	06f9      	lsls	r1, r7, #27
     fee:	d502      	bpl.n	ff6 <_spi_interrupt_handler+0x1a6>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
					(module);
     ff0:	1c20      	adds	r0, r4, #0
     ff2:	69e2      	ldr	r2, [r4, #28]
     ff4:	4790      	blx	r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     ff6:	0733      	lsls	r3, r6, #28
     ff8:	d50a      	bpl.n	1010 <_spi_interrupt_handler+0x1c0>
			if (module->mode == SPI_MODE_SLAVE) {
     ffa:	7963      	ldrb	r3, [r4, #5]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d107      	bne.n	1010 <_spi_interrupt_handler+0x1c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1000:	2308      	movs	r3, #8
    1002:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1004:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1006:	06b9      	lsls	r1, r7, #26
    1008:	d502      	bpl.n	1010 <_spi_interrupt_handler+0x1c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    100a:	1c20      	adds	r0, r4, #0
    100c:	6a22      	ldr	r2, [r4, #32]
    100e:	4790      	blx	r2
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1010:	09f6      	lsrs	r6, r6, #7
    1012:	d007      	beq.n	1024 <_spi_interrupt_handler+0x1d4>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1014:	2380      	movs	r3, #128	; 0x80
    1016:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1018:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    101a:	067b      	lsls	r3, r7, #25
    101c:	d502      	bpl.n	1024 <_spi_interrupt_handler+0x1d4>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    101e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1020:	1c20      	adds	r0, r4, #0
    1022:	4798      	blx	r3
		}
	}
#  endif
}
    1024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	20000cb0 	.word	0x20000cb0
    102c:	20000c94 	.word	0x20000c94

00001030 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1030:	1c93      	adds	r3, r2, #2
    1032:	009b      	lsls	r3, r3, #2
    1034:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1036:	2a02      	cmp	r2, #2
    1038:	d104      	bne.n	1044 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    103a:	7e02      	ldrb	r2, [r0, #24]
    103c:	2310      	movs	r3, #16
    103e:	4313      	orrs	r3, r2
    1040:	7603      	strb	r3, [r0, #24]
    1042:	e00c      	b.n	105e <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1044:	2a03      	cmp	r2, #3
    1046:	d104      	bne.n	1052 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1048:	7e02      	ldrb	r2, [r0, #24]
    104a:	2320      	movs	r3, #32
    104c:	4313      	orrs	r3, r2
    104e:	7603      	strb	r3, [r0, #24]
    1050:	e005      	b.n	105e <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1052:	2301      	movs	r3, #1
    1054:	4093      	lsls	r3, r2
    1056:	1c1a      	adds	r2, r3, #0
    1058:	7e03      	ldrb	r3, [r0, #24]
    105a:	431a      	orrs	r2, r3
    105c:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    105e:	2000      	movs	r0, #0
    1060:	4770      	bx	lr
    1062:	46c0      	nop			; (mov r8, r8)

00001064 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1064:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1066:	0080      	lsls	r0, r0, #2
    1068:	4b14      	ldr	r3, [pc, #80]	; (10bc <_tc_interrupt_handler+0x58>)
    106a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    106c:	6822      	ldr	r2, [r4, #0]
    106e:	7b95      	ldrb	r5, [r2, #14]
    1070:	7e23      	ldrb	r3, [r4, #24]
    1072:	401d      	ands	r5, r3
    1074:	7e63      	ldrb	r3, [r4, #25]
    1076:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1078:	07eb      	lsls	r3, r5, #31
    107a:	d505      	bpl.n	1088 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    107c:	1c20      	adds	r0, r4, #0
    107e:	68a2      	ldr	r2, [r4, #8]
    1080:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1082:	2301      	movs	r3, #1
    1084:	6822      	ldr	r2, [r4, #0]
    1086:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1088:	07ab      	lsls	r3, r5, #30
    108a:	d505      	bpl.n	1098 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    108c:	1c20      	adds	r0, r4, #0
    108e:	68e2      	ldr	r2, [r4, #12]
    1090:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1092:	2302      	movs	r3, #2
    1094:	6822      	ldr	r2, [r4, #0]
    1096:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1098:	06eb      	lsls	r3, r5, #27
    109a:	d505      	bpl.n	10a8 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    109c:	1c20      	adds	r0, r4, #0
    109e:	6922      	ldr	r2, [r4, #16]
    10a0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    10a2:	2310      	movs	r3, #16
    10a4:	6822      	ldr	r2, [r4, #0]
    10a6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    10a8:	06ab      	lsls	r3, r5, #26
    10aa:	d505      	bpl.n	10b8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    10ac:	1c20      	adds	r0, r4, #0
    10ae:	6962      	ldr	r2, [r4, #20]
    10b0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    10b2:	6823      	ldr	r3, [r4, #0]
    10b4:	2220      	movs	r2, #32
    10b6:	739a      	strb	r2, [r3, #14]
	}
}
    10b8:	bd38      	pop	{r3, r4, r5, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	20000c98 	.word	0x20000c98

000010c0 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    10c0:	b508      	push	{r3, lr}
    10c2:	2000      	movs	r0, #0
    10c4:	4b01      	ldr	r3, [pc, #4]	; (10cc <TC3_Handler+0xc>)
    10c6:	4798      	blx	r3
    10c8:	bd08      	pop	{r3, pc}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	00001065 	.word	0x00001065

000010d0 <TC4_Handler>:
    10d0:	b508      	push	{r3, lr}
    10d2:	2001      	movs	r0, #1
    10d4:	4b01      	ldr	r3, [pc, #4]	; (10dc <TC4_Handler+0xc>)
    10d6:	4798      	blx	r3
    10d8:	bd08      	pop	{r3, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00001065 	.word	0x00001065

000010e0 <TC5_Handler>:
    10e0:	b508      	push	{r3, lr}
    10e2:	2002      	movs	r0, #2
    10e4:	4b01      	ldr	r3, [pc, #4]	; (10ec <TC5_Handler+0xc>)
    10e6:	4798      	blx	r3
    10e8:	bd08      	pop	{r3, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	00001065 	.word	0x00001065

000010f0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    10f0:	b570      	push	{r4, r5, r6, lr}
    10f2:	b084      	sub	sp, #16
    10f4:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    10f6:	ab01      	add	r3, sp, #4
    10f8:	4a0a      	ldr	r2, [pc, #40]	; (1124 <_tc_get_inst_index+0x34>)
    10fa:	ca70      	ldmia	r2!, {r4, r5, r6}
    10fc:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    10fe:	9b01      	ldr	r3, [sp, #4]
    1100:	4283      	cmp	r3, r0
    1102:	d00a      	beq.n	111a <_tc_get_inst_index+0x2a>
    1104:	9c02      	ldr	r4, [sp, #8]
    1106:	4284      	cmp	r4, r0
    1108:	d005      	beq.n	1116 <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    110a:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    110c:	9d03      	ldr	r5, [sp, #12]
    110e:	428d      	cmp	r5, r1
    1110:	d105      	bne.n	111e <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1112:	2002      	movs	r0, #2
    1114:	e002      	b.n	111c <_tc_get_inst_index+0x2c>
    1116:	2001      	movs	r0, #1
    1118:	e000      	b.n	111c <_tc_get_inst_index+0x2c>
    111a:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
    111c:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    111e:	b004      	add	sp, #16
    1120:	bd70      	pop	{r4, r5, r6, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	00005f18 	.word	0x00005f18

00001128 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1128:	b5f0      	push	{r4, r5, r6, r7, lr}
    112a:	464f      	mov	r7, r9
    112c:	4646      	mov	r6, r8
    112e:	b4c0      	push	{r6, r7}
    1130:	b087      	sub	sp, #28
    1132:	1c04      	adds	r4, r0, #0
    1134:	1c0d      	adds	r5, r1, #0
    1136:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1138:	1c08      	adds	r0, r1, #0
    113a:	4b90      	ldr	r3, [pc, #576]	; (137c <tc_init+0x254>)
    113c:	4798      	blx	r3
    113e:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1140:	4f8f      	ldr	r7, [pc, #572]	; (1380 <tc_init+0x258>)
    1142:	1c39      	adds	r1, r7, #0
    1144:	310c      	adds	r1, #12
    1146:	a805      	add	r0, sp, #20
    1148:	2203      	movs	r2, #3
    114a:	4e8e      	ldr	r6, [pc, #568]	; (1384 <tc_init+0x25c>)
    114c:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    114e:	1c39      	adds	r1, r7, #0
    1150:	3110      	adds	r1, #16
    1152:	a803      	add	r0, sp, #12
    1154:	2206      	movs	r2, #6
    1156:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1158:	2300      	movs	r3, #0
    115a:	60a3      	str	r3, [r4, #8]
    115c:	60e3      	str	r3, [r4, #12]
    115e:	6123      	str	r3, [r4, #16]
    1160:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1162:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1164:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1166:	4648      	mov	r0, r9
    1168:	0082      	lsls	r2, r0, #2
    116a:	4b87      	ldr	r3, [pc, #540]	; (1388 <tc_init+0x260>)
    116c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    116e:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1170:	4641      	mov	r1, r8
    1172:	788b      	ldrb	r3, [r1, #2]
    1174:	2b08      	cmp	r3, #8
    1176:	d104      	bne.n	1182 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1178:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    117a:	464a      	mov	r2, r9
    117c:	07d2      	lsls	r2, r2, #31
    117e:	d400      	bmi.n	1182 <tc_init+0x5a>
    1180:	e0f6      	b.n	1370 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1182:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1184:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1186:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1188:	07d9      	lsls	r1, r3, #31
    118a:	d500      	bpl.n	118e <tc_init+0x66>
    118c:	e0f0      	b.n	1370 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    118e:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1190:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1192:	06da      	lsls	r2, r3, #27
    1194:	d500      	bpl.n	1198 <tc_init+0x70>
    1196:	e0eb      	b.n	1370 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1198:	882b      	ldrh	r3, [r5, #0]
    119a:	0799      	lsls	r1, r3, #30
    119c:	d500      	bpl.n	11a0 <tc_init+0x78>
    119e:	e0e7      	b.n	1370 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    11a0:	4642      	mov	r2, r8
    11a2:	7c13      	ldrb	r3, [r2, #16]
    11a4:	2b00      	cmp	r3, #0
    11a6:	d00c      	beq.n	11c2 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11a8:	a902      	add	r1, sp, #8
    11aa:	2301      	movs	r3, #1
    11ac:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    11ae:	2200      	movs	r2, #0
    11b0:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    11b2:	4640      	mov	r0, r8
    11b4:	6980      	ldr	r0, [r0, #24]
    11b6:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    11b8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    11ba:	4642      	mov	r2, r8
    11bc:	7d10      	ldrb	r0, [r2, #20]
    11be:	4b73      	ldr	r3, [pc, #460]	; (138c <tc_init+0x264>)
    11c0:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    11c2:	4640      	mov	r0, r8
    11c4:	7f03      	ldrb	r3, [r0, #28]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d00b      	beq.n	11e2 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11ca:	a902      	add	r1, sp, #8
    11cc:	2301      	movs	r3, #1
    11ce:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    11d0:	2200      	movs	r2, #0
    11d2:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    11d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
    11d6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    11d8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    11da:	6a03      	ldr	r3, [r0, #32]
    11dc:	b2d8      	uxtb	r0, r3
    11de:	4b6b      	ldr	r3, [pc, #428]	; (138c <tc_init+0x264>)
    11e0:	4798      	blx	r3
    11e2:	4b6b      	ldr	r3, [pc, #428]	; (1390 <tc_init+0x268>)
    11e4:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    11e6:	4648      	mov	r0, r9
    11e8:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    11ea:	a803      	add	r0, sp, #12
    11ec:	5a12      	ldrh	r2, [r2, r0]
    11ee:	430a      	orrs	r2, r1
    11f0:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    11f2:	4641      	mov	r1, r8
    11f4:	788b      	ldrb	r3, [r1, #2]
    11f6:	2b08      	cmp	r3, #8
    11f8:	d108      	bne.n	120c <tc_init+0xe4>
    11fa:	4b65      	ldr	r3, [pc, #404]	; (1390 <tc_init+0x268>)
    11fc:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    11fe:	4648      	mov	r0, r9
    1200:	3001      	adds	r0, #1
    1202:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1204:	a903      	add	r1, sp, #12
    1206:	5a41      	ldrh	r1, [r0, r1]
    1208:	430a      	orrs	r2, r1
    120a:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    120c:	a901      	add	r1, sp, #4
    120e:	4642      	mov	r2, r8
    1210:	7813      	ldrb	r3, [r2, #0]
    1212:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1214:	ab05      	add	r3, sp, #20
    1216:	4648      	mov	r0, r9
    1218:	5c1e      	ldrb	r6, [r3, r0]
    121a:	1c30      	adds	r0, r6, #0
    121c:	4b5d      	ldr	r3, [pc, #372]	; (1394 <tc_init+0x26c>)
    121e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1220:	1c30      	adds	r0, r6, #0
    1222:	4b5d      	ldr	r3, [pc, #372]	; (1398 <tc_init+0x270>)
    1224:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1226:	4641      	mov	r1, r8
    1228:	8888      	ldrh	r0, [r1, #4]
    122a:	890b      	ldrh	r3, [r1, #8]
    122c:	4303      	orrs	r3, r0
    122e:	7988      	ldrb	r0, [r1, #6]
    1230:	788a      	ldrb	r2, [r1, #2]
    1232:	4310      	orrs	r0, r2
    1234:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1236:	784b      	ldrb	r3, [r1, #1]
    1238:	2b00      	cmp	r3, #0
    123a:	d002      	beq.n	1242 <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    123c:	2380      	movs	r3, #128	; 0x80
    123e:	011b      	lsls	r3, r3, #4
    1240:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1242:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1244:	227f      	movs	r2, #127	; 0x7f
    1246:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1248:	4393      	bics	r3, r2
    124a:	d1fc      	bne.n	1246 <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    124c:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    124e:	4642      	mov	r2, r8
    1250:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1252:	1e43      	subs	r3, r0, #1
    1254:	4198      	sbcs	r0, r3
    1256:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
    1258:	7b93      	ldrb	r3, [r2, #14]
    125a:	2b00      	cmp	r3, #0
    125c:	d001      	beq.n	1262 <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    125e:	2301      	movs	r3, #1
    1260:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1262:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1264:	227f      	movs	r2, #127	; 0x7f
    1266:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1268:	4393      	bics	r3, r2
    126a:	d1fc      	bne.n	1266 <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    126c:	23ff      	movs	r3, #255	; 0xff
    126e:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1270:	2800      	cmp	r0, #0
    1272:	d005      	beq.n	1280 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1274:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1276:	227f      	movs	r2, #127	; 0x7f
    1278:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    127a:	4393      	bics	r3, r2
    127c:	d1fc      	bne.n	1278 <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    127e:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1280:	4643      	mov	r3, r8
    1282:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1284:	7adb      	ldrb	r3, [r3, #11]
    1286:	2b00      	cmp	r3, #0
    1288:	d001      	beq.n	128e <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    128a:	2310      	movs	r3, #16
    128c:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    128e:	4641      	mov	r1, r8
    1290:	7b0b      	ldrb	r3, [r1, #12]
    1292:	2b00      	cmp	r3, #0
    1294:	d001      	beq.n	129a <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1296:	2320      	movs	r3, #32
    1298:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    129a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    129c:	227f      	movs	r2, #127	; 0x7f
    129e:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    12a0:	4393      	bics	r3, r2
    12a2:	d1fc      	bne.n	129e <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    12a4:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12a6:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12a8:	217f      	movs	r1, #127	; 0x7f
    12aa:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    12ac:	438b      	bics	r3, r1
    12ae:	d1fc      	bne.n	12aa <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    12b0:	7923      	ldrb	r3, [r4, #4]
    12b2:	2b04      	cmp	r3, #4
    12b4:	d005      	beq.n	12c2 <tc_init+0x19a>
    12b6:	2b08      	cmp	r3, #8
    12b8:	d041      	beq.n	133e <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    12ba:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    12bc:	2b00      	cmp	r3, #0
    12be:	d157      	bne.n	1370 <tc_init+0x248>
    12c0:	e024      	b.n	130c <tc_init+0x1e4>
    12c2:	217f      	movs	r1, #127	; 0x7f
    12c4:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    12c6:	438b      	bics	r3, r1
    12c8:	d1fc      	bne.n	12c4 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    12ca:	2328      	movs	r3, #40	; 0x28
    12cc:	4642      	mov	r2, r8
    12ce:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    12d0:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12d2:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12d4:	227f      	movs	r2, #127	; 0x7f
    12d6:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    12d8:	4393      	bics	r3, r2
    12da:	d1fc      	bne.n	12d6 <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    12dc:	2329      	movs	r3, #41	; 0x29
    12de:	4640      	mov	r0, r8
    12e0:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    12e2:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12e4:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12e6:	227f      	movs	r2, #127	; 0x7f
    12e8:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    12ea:	4393      	bics	r3, r2
    12ec:	d1fc      	bne.n	12e8 <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    12ee:	232a      	movs	r3, #42	; 0x2a
    12f0:	4641      	mov	r1, r8
    12f2:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    12f4:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12f6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12f8:	227f      	movs	r2, #127	; 0x7f
    12fa:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    12fc:	4393      	bics	r3, r2
    12fe:	d1fc      	bne.n	12fa <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1300:	232b      	movs	r3, #43	; 0x2b
    1302:	4642      	mov	r2, r8
    1304:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1306:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1308:	2000      	movs	r0, #0
    130a:	e031      	b.n	1370 <tc_init+0x248>
    130c:	217f      	movs	r1, #127	; 0x7f
    130e:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1310:	438b      	bics	r3, r1
    1312:	d1fc      	bne.n	130e <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1314:	4640      	mov	r0, r8
    1316:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    1318:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    131a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    131c:	227f      	movs	r2, #127	; 0x7f
    131e:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1320:	4393      	bics	r3, r2
    1322:	d1fc      	bne.n	131e <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1324:	4641      	mov	r1, r8
    1326:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1328:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    132a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    132c:	227f      	movs	r2, #127	; 0x7f
    132e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1330:	4393      	bics	r3, r2
    1332:	d1fc      	bne.n	132e <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1334:	4642      	mov	r2, r8
    1336:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1338:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    133a:	2000      	movs	r0, #0
    133c:	e018      	b.n	1370 <tc_init+0x248>
    133e:	217f      	movs	r1, #127	; 0x7f
    1340:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1342:	438b      	bics	r3, r1
    1344:	d1fc      	bne.n	1340 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1346:	4643      	mov	r3, r8
    1348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    134a:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    134c:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    134e:	227f      	movs	r2, #127	; 0x7f
    1350:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1352:	4393      	bics	r3, r2
    1354:	d1fc      	bne.n	1350 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1356:	4640      	mov	r0, r8
    1358:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    135a:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    135c:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    135e:	227f      	movs	r2, #127	; 0x7f
    1360:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1362:	4393      	bics	r3, r2
    1364:	d1fc      	bne.n	1360 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1366:	4641      	mov	r1, r8
    1368:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    136a:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    136c:	2000      	movs	r0, #0
    136e:	e7ff      	b.n	1370 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1370:	b007      	add	sp, #28
    1372:	bc0c      	pop	{r2, r3}
    1374:	4690      	mov	r8, r2
    1376:	4699      	mov	r9, r3
    1378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	000010f1 	.word	0x000010f1
    1380:	00005f18 	.word	0x00005f18
    1384:	00004e25 	.word	0x00004e25
    1388:	20000c98 	.word	0x20000c98
    138c:	0000445d 	.word	0x0000445d
    1390:	40000400 	.word	0x40000400
    1394:	00004381 	.word	0x00004381
    1398:	000042f5 	.word	0x000042f5

0000139c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    139c:	6802      	ldr	r2, [r0, #0]
    139e:	217f      	movs	r1, #127	; 0x7f
    13a0:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    13a2:	438b      	bics	r3, r1
    13a4:	d1fc      	bne.n	13a0 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    13a6:	7903      	ldrb	r3, [r0, #4]
    13a8:	2b04      	cmp	r3, #4
    13aa:	d005      	beq.n	13b8 <tc_get_count_value+0x1c>
    13ac:	2b08      	cmp	r3, #8
    13ae:	d009      	beq.n	13c4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    13b0:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    13b2:	2b00      	cmp	r3, #0
    13b4:	d108      	bne.n	13c8 <tc_get_count_value+0x2c>
    13b6:	e002      	b.n	13be <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    13b8:	7c10      	ldrb	r0, [r2, #16]
    13ba:	b2c0      	uxtb	r0, r0
    13bc:	e004      	b.n	13c8 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    13be:	8a10      	ldrh	r0, [r2, #16]
    13c0:	b280      	uxth	r0, r0
    13c2:	e001      	b.n	13c8 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    13c4:	6910      	ldr	r0, [r2, #16]
    13c6:	e7ff      	b.n	13c8 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    13c8:	4770      	bx	lr
    13ca:	46c0      	nop			; (mov r8, r8)

000013cc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    13cc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    13ce:	6804      	ldr	r4, [r0, #0]
    13d0:	257f      	movs	r5, #127	; 0x7f
    13d2:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    13d4:	43ab      	bics	r3, r5
    13d6:	d1fc      	bne.n	13d2 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    13d8:	7903      	ldrb	r3, [r0, #4]
    13da:	2b04      	cmp	r3, #4
    13dc:	d005      	beq.n	13ea <tc_set_compare_value+0x1e>
    13de:	2b08      	cmp	r3, #8
    13e0:	d014      	beq.n	140c <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    13e2:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    13e4:	2b00      	cmp	r3, #0
    13e6:	d119      	bne.n	141c <tc_set_compare_value+0x50>
    13e8:	e007      	b.n	13fa <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    13ea:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    13ec:	2901      	cmp	r1, #1
    13ee:	d815      	bhi.n	141c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    13f0:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    13f2:	1861      	adds	r1, r4, r1
    13f4:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    13f6:	2000      	movs	r0, #0
    13f8:	e010      	b.n	141c <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    13fa:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    13fc:	2901      	cmp	r1, #1
    13fe:	d80d      	bhi.n	141c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    1400:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    1402:	310c      	adds	r1, #12
    1404:	0049      	lsls	r1, r1, #1
    1406:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    1408:	2000      	movs	r0, #0
    140a:	e007      	b.n	141c <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    140c:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    140e:	2901      	cmp	r1, #1
    1410:	d804      	bhi.n	141c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    1412:	3106      	adds	r1, #6
    1414:	0089      	lsls	r1, r1, #2
    1416:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    1418:	2000      	movs	r0, #0
    141a:	e7ff      	b.n	141c <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    141c:	bd30      	pop	{r4, r5, pc}
    141e:	46c0      	nop			; (mov r8, r8)

00001420 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1420:	b5f0      	push	{r4, r5, r6, r7, lr}
    1422:	4647      	mov	r7, r8
    1424:	b480      	push	{r7}
    1426:	1c0c      	adds	r4, r1, #0
    1428:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    142a:	2800      	cmp	r0, #0
    142c:	d10c      	bne.n	1448 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    142e:	2a00      	cmp	r2, #0
    1430:	dd0d      	ble.n	144e <_read+0x2e>
    1432:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1434:	4e09      	ldr	r6, [pc, #36]	; (145c <_read+0x3c>)
    1436:	4d0a      	ldr	r5, [pc, #40]	; (1460 <_read+0x40>)
    1438:	6830      	ldr	r0, [r6, #0]
    143a:	1c21      	adds	r1, r4, #0
    143c:	682b      	ldr	r3, [r5, #0]
    143e:	4798      	blx	r3
		ptr++;
    1440:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1442:	42bc      	cmp	r4, r7
    1444:	d1f8      	bne.n	1438 <_read+0x18>
    1446:	e004      	b.n	1452 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1448:	2001      	movs	r0, #1
    144a:	4240      	negs	r0, r0
    144c:	e002      	b.n	1454 <_read+0x34>
	}

	for (; len > 0; --len) {
    144e:	2000      	movs	r0, #0
    1450:	e000      	b.n	1454 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    1452:	4640      	mov	r0, r8
	}
	return nChars;
}
    1454:	bc04      	pop	{r2}
    1456:	4690      	mov	r8, r2
    1458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	20000cac 	.word	0x20000cac
    1460:	20000ca4 	.word	0x20000ca4

00001464 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1464:	b5f0      	push	{r4, r5, r6, r7, lr}
    1466:	4647      	mov	r7, r8
    1468:	b480      	push	{r7}
    146a:	1c0e      	adds	r6, r1, #0
    146c:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    146e:	3801      	subs	r0, #1
    1470:	2802      	cmp	r0, #2
    1472:	d810      	bhi.n	1496 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1474:	2a00      	cmp	r2, #0
    1476:	d011      	beq.n	149c <_write+0x38>
    1478:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    147a:	4b0d      	ldr	r3, [pc, #52]	; (14b0 <_write+0x4c>)
    147c:	4698      	mov	r8, r3
    147e:	4f0d      	ldr	r7, [pc, #52]	; (14b4 <_write+0x50>)
    1480:	4643      	mov	r3, r8
    1482:	6818      	ldr	r0, [r3, #0]
    1484:	5d31      	ldrb	r1, [r6, r4]
    1486:	683b      	ldr	r3, [r7, #0]
    1488:	4798      	blx	r3
    148a:	2800      	cmp	r0, #0
    148c:	db08      	blt.n	14a0 <_write+0x3c>
			return -1;
		}
		++nChars;
    148e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1490:	42a5      	cmp	r5, r4
    1492:	d1f5      	bne.n	1480 <_write+0x1c>
    1494:	e007      	b.n	14a6 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1496:	2001      	movs	r0, #1
    1498:	4240      	negs	r0, r0
    149a:	e005      	b.n	14a8 <_write+0x44>
	}

	for (; len != 0; --len) {
    149c:	2000      	movs	r0, #0
    149e:	e003      	b.n	14a8 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    14a0:	2001      	movs	r0, #1
    14a2:	4240      	negs	r0, r0
    14a4:	e000      	b.n	14a8 <_write+0x44>
		}
		++nChars;
    14a6:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    14a8:	bc04      	pop	{r2}
    14aa:	4690      	mov	r8, r2
    14ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	20000cac 	.word	0x20000cac
    14b4:	20000ca8 	.word	0x20000ca8

000014b8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    14b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ba:	465f      	mov	r7, fp
    14bc:	4656      	mov	r6, sl
    14be:	464d      	mov	r5, r9
    14c0:	4644      	mov	r4, r8
    14c2:	b4f0      	push	{r4, r5, r6, r7}
    14c4:	b091      	sub	sp, #68	; 0x44
    14c6:	1c05      	adds	r5, r0, #0
    14c8:	1c0c      	adds	r4, r1, #0
    14ca:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    14cc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14ce:	1c08      	adds	r0, r1, #0
    14d0:	4bad      	ldr	r3, [pc, #692]	; (1788 <usart_init+0x2d0>)
    14d2:	4798      	blx	r3
    14d4:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14d6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    14d8:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14da:	07d9      	lsls	r1, r3, #31
    14dc:	d500      	bpl.n	14e0 <usart_init+0x28>
    14de:	e14b      	b.n	1778 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14e0:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    14e2:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14e4:	079f      	lsls	r7, r3, #30
    14e6:	d500      	bpl.n	14ea <usart_init+0x32>
    14e8:	e146      	b.n	1778 <usart_init+0x2c0>
    14ea:	4ba8      	ldr	r3, [pc, #672]	; (178c <usart_init+0x2d4>)
    14ec:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14ee:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14f0:	2701      	movs	r7, #1
    14f2:	408f      	lsls	r7, r1
    14f4:	1c39      	adds	r1, r7, #0
    14f6:	4301      	orrs	r1, r0
    14f8:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    14fa:	a90f      	add	r1, sp, #60	; 0x3c
    14fc:	272d      	movs	r7, #45	; 0x2d
    14fe:	5df3      	ldrb	r3, [r6, r7]
    1500:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1502:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1504:	b2d2      	uxtb	r2, r2
    1506:	4690      	mov	r8, r2
    1508:	1c10      	adds	r0, r2, #0
    150a:	4ba1      	ldr	r3, [pc, #644]	; (1790 <usart_init+0x2d8>)
    150c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    150e:	4640      	mov	r0, r8
    1510:	4ba0      	ldr	r3, [pc, #640]	; (1794 <usart_init+0x2dc>)
    1512:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1514:	5df0      	ldrb	r0, [r6, r7]
    1516:	2100      	movs	r1, #0
    1518:	4b9f      	ldr	r3, [pc, #636]	; (1798 <usart_init+0x2e0>)
    151a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    151c:	7af3      	ldrb	r3, [r6, #11]
    151e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1520:	2324      	movs	r3, #36	; 0x24
    1522:	5cf3      	ldrb	r3, [r6, r3]
    1524:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1526:	2325      	movs	r3, #37	; 0x25
    1528:	5cf3      	ldrb	r3, [r6, r3]
    152a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    152c:	7ef3      	ldrb	r3, [r6, #27]
    152e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1530:	7f33      	ldrb	r3, [r6, #28]
    1532:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1534:	6829      	ldr	r1, [r5, #0]
    1536:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1538:	1c08      	adds	r0, r1, #0
    153a:	4b93      	ldr	r3, [pc, #588]	; (1788 <usart_init+0x2d0>)
    153c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    153e:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    1540:	2200      	movs	r2, #0
    1542:	466b      	mov	r3, sp
    1544:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1546:	8a32      	ldrh	r2, [r6, #16]
    1548:	9202      	str	r2, [sp, #8]
    154a:	2380      	movs	r3, #128	; 0x80
    154c:	01db      	lsls	r3, r3, #7
    154e:	429a      	cmp	r2, r3
    1550:	d021      	beq.n	1596 <usart_init+0xde>
    1552:	2380      	movs	r3, #128	; 0x80
    1554:	01db      	lsls	r3, r3, #7
    1556:	429a      	cmp	r2, r3
    1558:	d804      	bhi.n	1564 <usart_init+0xac>
    155a:	2380      	movs	r3, #128	; 0x80
    155c:	019b      	lsls	r3, r3, #6
    155e:	429a      	cmp	r2, r3
    1560:	d011      	beq.n	1586 <usart_init+0xce>
    1562:	e008      	b.n	1576 <usart_init+0xbe>
    1564:	23c0      	movs	r3, #192	; 0xc0
    1566:	01db      	lsls	r3, r3, #7
    1568:	9f02      	ldr	r7, [sp, #8]
    156a:	429f      	cmp	r7, r3
    156c:	d00f      	beq.n	158e <usart_init+0xd6>
    156e:	2380      	movs	r3, #128	; 0x80
    1570:	021b      	lsls	r3, r3, #8
    1572:	429f      	cmp	r7, r3
    1574:	d003      	beq.n	157e <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1576:	2710      	movs	r7, #16
    1578:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    157a:	2700      	movs	r7, #0
    157c:	e00e      	b.n	159c <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    157e:	2703      	movs	r7, #3
    1580:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1582:	2700      	movs	r7, #0
    1584:	e00a      	b.n	159c <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1586:	2710      	movs	r7, #16
    1588:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    158a:	2701      	movs	r7, #1
    158c:	e006      	b.n	159c <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    158e:	2708      	movs	r7, #8
    1590:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1592:	2701      	movs	r7, #1
    1594:	e002      	b.n	159c <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1596:	2708      	movs	r7, #8
    1598:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    159a:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    159c:	6831      	ldr	r1, [r6, #0]
    159e:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    15a0:	68f2      	ldr	r2, [r6, #12]
    15a2:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    15a4:	6973      	ldr	r3, [r6, #20]
    15a6:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15a8:	7e31      	ldrb	r1, [r6, #24]
    15aa:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15ac:	2326      	movs	r3, #38	; 0x26
    15ae:	5cf3      	ldrb	r3, [r6, r3]
    15b0:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    15b2:	6873      	ldr	r3, [r6, #4]
    15b4:	2b00      	cmp	r3, #0
    15b6:	d013      	beq.n	15e0 <usart_init+0x128>
    15b8:	2280      	movs	r2, #128	; 0x80
    15ba:	0552      	lsls	r2, r2, #21
    15bc:	4293      	cmp	r3, r2
    15be:	d12e      	bne.n	161e <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    15c0:	2327      	movs	r3, #39	; 0x27
    15c2:	5cf3      	ldrb	r3, [r6, r3]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d12e      	bne.n	1626 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    15c8:	6a37      	ldr	r7, [r6, #32]
    15ca:	b2c0      	uxtb	r0, r0
    15cc:	4b73      	ldr	r3, [pc, #460]	; (179c <usart_init+0x2e4>)
    15ce:	4798      	blx	r3
    15d0:	1c01      	adds	r1, r0, #0
    15d2:	1c38      	adds	r0, r7, #0
    15d4:	466a      	mov	r2, sp
    15d6:	3226      	adds	r2, #38	; 0x26
    15d8:	4b71      	ldr	r3, [pc, #452]	; (17a0 <usart_init+0x2e8>)
    15da:	4798      	blx	r3
    15dc:	1c03      	adds	r3, r0, #0
    15de:	e01f      	b.n	1620 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    15e0:	2327      	movs	r3, #39	; 0x27
    15e2:	5cf3      	ldrb	r3, [r6, r3]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d00a      	beq.n	15fe <usart_init+0x146>
				status_code =
    15e8:	9a06      	ldr	r2, [sp, #24]
    15ea:	9200      	str	r2, [sp, #0]
    15ec:	6a30      	ldr	r0, [r6, #32]
    15ee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    15f0:	466a      	mov	r2, sp
    15f2:	3226      	adds	r2, #38	; 0x26
    15f4:	1c3b      	adds	r3, r7, #0
    15f6:	4f6b      	ldr	r7, [pc, #428]	; (17a4 <usart_init+0x2ec>)
    15f8:	47b8      	blx	r7
    15fa:	1c03      	adds	r3, r0, #0
    15fc:	e010      	b.n	1620 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    15fe:	6a31      	ldr	r1, [r6, #32]
    1600:	9107      	str	r1, [sp, #28]
    1602:	b2c0      	uxtb	r0, r0
    1604:	4b65      	ldr	r3, [pc, #404]	; (179c <usart_init+0x2e4>)
    1606:	4798      	blx	r3
    1608:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    160a:	9a06      	ldr	r2, [sp, #24]
    160c:	9200      	str	r2, [sp, #0]
    160e:	9807      	ldr	r0, [sp, #28]
    1610:	466a      	mov	r2, sp
    1612:	3226      	adds	r2, #38	; 0x26
    1614:	1c3b      	adds	r3, r7, #0
    1616:	4f63      	ldr	r7, [pc, #396]	; (17a4 <usart_init+0x2ec>)
    1618:	47b8      	blx	r7
    161a:	1c03      	adds	r3, r0, #0
    161c:	e000      	b.n	1620 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    161e:	2300      	movs	r3, #0
    1620:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1622:	d000      	beq.n	1626 <usart_init+0x16e>
    1624:	e0a8      	b.n	1778 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1626:	7e73      	ldrb	r3, [r6, #25]
    1628:	2b00      	cmp	r3, #0
    162a:	d002      	beq.n	1632 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    162c:	7eb3      	ldrb	r3, [r6, #26]
    162e:	4641      	mov	r1, r8
    1630:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1632:	682a      	ldr	r2, [r5, #0]
    1634:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1636:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1638:	2b00      	cmp	r3, #0
    163a:	d1fc      	bne.n	1636 <usart_init+0x17e>
    163c:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    163e:	466b      	mov	r3, sp
    1640:	3326      	adds	r3, #38	; 0x26
    1642:	881b      	ldrh	r3, [r3, #0]
    1644:	4642      	mov	r2, r8
    1646:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1648:	464b      	mov	r3, r9
    164a:	9f03      	ldr	r7, [sp, #12]
    164c:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    164e:	9f04      	ldr	r7, [sp, #16]
    1650:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1652:	6871      	ldr	r1, [r6, #4]
    1654:	430b      	orrs	r3, r1
		config->sample_rate |
    1656:	9f02      	ldr	r7, [sp, #8]
    1658:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    165a:	4652      	mov	r2, sl
    165c:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    165e:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1660:	4659      	mov	r1, fp
    1662:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1664:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1666:	2327      	movs	r3, #39	; 0x27
    1668:	5cf3      	ldrb	r3, [r6, r3]
    166a:	2b00      	cmp	r3, #0
    166c:	d101      	bne.n	1672 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    166e:	2304      	movs	r3, #4
    1670:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1672:	7e71      	ldrb	r1, [r6, #25]
    1674:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1676:	7f33      	ldrb	r3, [r6, #28]
    1678:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    167a:	4319      	orrs	r1, r3
    167c:	7af2      	ldrb	r2, [r6, #11]
    167e:	7ab3      	ldrb	r3, [r6, #10]
    1680:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1682:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1684:	7f73      	ldrb	r3, [r6, #29]
    1686:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1688:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    168a:	2324      	movs	r3, #36	; 0x24
    168c:	5cf3      	ldrb	r3, [r6, r3]
    168e:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1690:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1692:	2325      	movs	r3, #37	; 0x25
    1694:	5cf3      	ldrb	r3, [r6, r3]
    1696:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1698:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    169a:	8933      	ldrh	r3, [r6, #8]
    169c:	2bff      	cmp	r3, #255	; 0xff
    169e:	d00b      	beq.n	16b8 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    16a0:	7ef2      	ldrb	r2, [r6, #27]
    16a2:	2a00      	cmp	r2, #0
    16a4:	d003      	beq.n	16ae <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    16a6:	22a0      	movs	r2, #160	; 0xa0
    16a8:	04d2      	lsls	r2, r2, #19
    16aa:	4317      	orrs	r7, r2
    16ac:	e002      	b.n	16b4 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    16ae:	2280      	movs	r2, #128	; 0x80
    16b0:	0452      	lsls	r2, r2, #17
    16b2:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    16b4:	4319      	orrs	r1, r3
    16b6:	e005      	b.n	16c4 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    16b8:	7ef3      	ldrb	r3, [r6, #27]
    16ba:	2b00      	cmp	r3, #0
    16bc:	d002      	beq.n	16c4 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    16be:	2380      	movs	r3, #128	; 0x80
    16c0:	04db      	lsls	r3, r3, #19
    16c2:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    16c4:	232c      	movs	r3, #44	; 0x2c
    16c6:	5cf3      	ldrb	r3, [r6, r3]
    16c8:	2b00      	cmp	r3, #0
    16ca:	d103      	bne.n	16d4 <usart_init+0x21c>
    16cc:	4b36      	ldr	r3, [pc, #216]	; (17a8 <usart_init+0x2f0>)
    16ce:	789b      	ldrb	r3, [r3, #2]
    16d0:	079a      	lsls	r2, r3, #30
    16d2:	d501      	bpl.n	16d8 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    16d4:	2380      	movs	r3, #128	; 0x80
    16d6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16d8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16da:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    16dc:	2b00      	cmp	r3, #0
    16de:	d1fc      	bne.n	16da <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    16e0:	4643      	mov	r3, r8
    16e2:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16e4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    16e6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    16e8:	2b00      	cmp	r3, #0
    16ea:	d1fc      	bne.n	16e6 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    16ec:	4641      	mov	r1, r8
    16ee:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16f0:	ab0e      	add	r3, sp, #56	; 0x38
    16f2:	2280      	movs	r2, #128	; 0x80
    16f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16f6:	2200      	movs	r2, #0
    16f8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    16fa:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16fc:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    16fe:	6b32      	ldr	r2, [r6, #48]	; 0x30
    1700:	920a      	str	r2, [sp, #40]	; 0x28
    1702:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1704:	930b      	str	r3, [sp, #44]	; 0x2c
    1706:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    1708:	970c      	str	r7, [sp, #48]	; 0x30
    170a:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    170c:	960d      	str	r6, [sp, #52]	; 0x34
    170e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1710:	ae0e      	add	r6, sp, #56	; 0x38
    1712:	b2f9      	uxtb	r1, r7
    1714:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1716:	aa0a      	add	r2, sp, #40	; 0x28
    1718:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    171a:	2800      	cmp	r0, #0
    171c:	d102      	bne.n	1724 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    171e:	1c20      	adds	r0, r4, #0
    1720:	4a22      	ldr	r2, [pc, #136]	; (17ac <usart_init+0x2f4>)
    1722:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1724:	1c43      	adds	r3, r0, #1
    1726:	d005      	beq.n	1734 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1728:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    172a:	0c00      	lsrs	r0, r0, #16
    172c:	b2c0      	uxtb	r0, r0
    172e:	1c31      	adds	r1, r6, #0
    1730:	4a1f      	ldr	r2, [pc, #124]	; (17b0 <usart_init+0x2f8>)
    1732:	4790      	blx	r2
    1734:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1736:	2f04      	cmp	r7, #4
    1738:	d1eb      	bne.n	1712 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    173a:	2300      	movs	r3, #0
    173c:	60eb      	str	r3, [r5, #12]
    173e:	612b      	str	r3, [r5, #16]
    1740:	616b      	str	r3, [r5, #20]
    1742:	61ab      	str	r3, [r5, #24]
    1744:	61eb      	str	r3, [r5, #28]
    1746:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1748:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    174a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    174c:	2200      	movs	r2, #0
    174e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1750:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1752:	2330      	movs	r3, #48	; 0x30
    1754:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1756:	2331      	movs	r3, #49	; 0x31
    1758:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    175a:	2332      	movs	r3, #50	; 0x32
    175c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    175e:	2333      	movs	r3, #51	; 0x33
    1760:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1762:	6828      	ldr	r0, [r5, #0]
    1764:	4b08      	ldr	r3, [pc, #32]	; (1788 <usart_init+0x2d0>)
    1766:	4798      	blx	r3
    1768:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    176a:	4912      	ldr	r1, [pc, #72]	; (17b4 <usart_init+0x2fc>)
    176c:	4b12      	ldr	r3, [pc, #72]	; (17b8 <usart_init+0x300>)
    176e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1770:	00a4      	lsls	r4, r4, #2
    1772:	4b12      	ldr	r3, [pc, #72]	; (17bc <usart_init+0x304>)
    1774:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1776:	2000      	movs	r0, #0
}
    1778:	b011      	add	sp, #68	; 0x44
    177a:	bc3c      	pop	{r2, r3, r4, r5}
    177c:	4690      	mov	r8, r2
    177e:	4699      	mov	r9, r3
    1780:	46a2      	mov	sl, r4
    1782:	46ab      	mov	fp, r5
    1784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	00000b11 	.word	0x00000b11
    178c:	40000400 	.word	0x40000400
    1790:	00004381 	.word	0x00004381
    1794:	000042f5 	.word	0x000042f5
    1798:	00000939 	.word	0x00000939
    179c:	0000439d 	.word	0x0000439d
    17a0:	00000761 	.word	0x00000761
    17a4:	00000789 	.word	0x00000789
    17a8:	41002000 	.word	0x41002000
    17ac:	00000989 	.word	0x00000989
    17b0:	0000445d 	.word	0x0000445d
    17b4:	00001865 	.word	0x00001865
    17b8:	00001a05 	.word	0x00001a05
    17bc:	20000cb0 	.word	0x20000cb0

000017c0 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    17c0:	b510      	push	{r4, lr}
    17c2:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17c4:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    17c6:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    17c8:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    17ca:	2c00      	cmp	r4, #0
    17cc:	d00d      	beq.n	17ea <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    17ce:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    17d0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    17d2:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    17d4:	2a00      	cmp	r2, #0
    17d6:	d108      	bne.n	17ea <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    17d8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    17da:	2a00      	cmp	r2, #0
    17dc:	d1fc      	bne.n	17d8 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    17de:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    17e0:	2102      	movs	r1, #2
    17e2:	7e1a      	ldrb	r2, [r3, #24]
    17e4:	420a      	tst	r2, r1
    17e6:	d0fc      	beq.n	17e2 <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    17e8:	2000      	movs	r0, #0
}
    17ea:	bd10      	pop	{r4, pc}

000017ec <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    17ec:	b510      	push	{r4, lr}
    17ee:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    17f0:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17f2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    17f4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    17f6:	2a00      	cmp	r2, #0
    17f8:	d033      	beq.n	1862 <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    17fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    17fc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    17fe:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1800:	2b00      	cmp	r3, #0
    1802:	d12e      	bne.n	1862 <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1804:	7e23      	ldrb	r3, [r4, #24]
    1806:	075a      	lsls	r2, r3, #29
    1808:	d52b      	bpl.n	1862 <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    180a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    180c:	2b00      	cmp	r3, #0
    180e:	d1fc      	bne.n	180a <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1810:	8b63      	ldrh	r3, [r4, #26]
    1812:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1814:	069a      	lsls	r2, r3, #26
    1816:	d021      	beq.n	185c <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1818:	079a      	lsls	r2, r3, #30
    181a:	d503      	bpl.n	1824 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    181c:	2302      	movs	r3, #2
    181e:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    1820:	201a      	movs	r0, #26
    1822:	e01e      	b.n	1862 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1824:	075a      	lsls	r2, r3, #29
    1826:	d503      	bpl.n	1830 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1828:	2304      	movs	r3, #4
    182a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    182c:	201e      	movs	r0, #30
    182e:	e018      	b.n	1862 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1830:	07da      	lsls	r2, r3, #31
    1832:	d503      	bpl.n	183c <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1834:	2301      	movs	r3, #1
    1836:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1838:	2013      	movs	r0, #19
    183a:	e012      	b.n	1862 <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    183c:	06da      	lsls	r2, r3, #27
    183e:	d505      	bpl.n	184c <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1840:	8b62      	ldrh	r2, [r4, #26]
    1842:	2310      	movs	r3, #16
    1844:	4313      	orrs	r3, r2
    1846:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1848:	2042      	movs	r0, #66	; 0x42
    184a:	e00a      	b.n	1862 <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    184c:	069a      	lsls	r2, r3, #26
    184e:	d505      	bpl.n	185c <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1850:	8b62      	ldrh	r2, [r4, #26]
    1852:	2320      	movs	r3, #32
    1854:	4313      	orrs	r3, r2
    1856:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1858:	2041      	movs	r0, #65	; 0x41
    185a:	e002      	b.n	1862 <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    185c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    185e:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1860:	2000      	movs	r0, #0
}
    1862:	bd10      	pop	{r4, pc}

00001864 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1866:	0080      	lsls	r0, r0, #2
    1868:	4b64      	ldr	r3, [pc, #400]	; (19fc <_usart_interrupt_handler+0x198>)
    186a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    186c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    186e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1870:	2b00      	cmp	r3, #0
    1872:	d1fc      	bne.n	186e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1874:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1876:	7da6      	ldrb	r6, [r4, #22]
    1878:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    187a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    187c:	5ceb      	ldrb	r3, [r5, r3]
    187e:	2230      	movs	r2, #48	; 0x30
    1880:	5caf      	ldrb	r7, [r5, r2]
    1882:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1884:	07f1      	lsls	r1, r6, #31
    1886:	d520      	bpl.n	18ca <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    1888:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    188a:	b29b      	uxth	r3, r3
    188c:	2b00      	cmp	r3, #0
    188e:	d01a      	beq.n	18c6 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1890:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1892:	781a      	ldrb	r2, [r3, #0]
    1894:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1896:	1c59      	adds	r1, r3, #1
    1898:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    189a:	7969      	ldrb	r1, [r5, #5]
    189c:	2901      	cmp	r1, #1
    189e:	d104      	bne.n	18aa <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18a0:	7859      	ldrb	r1, [r3, #1]
    18a2:	0209      	lsls	r1, r1, #8
    18a4:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    18a6:	3302      	adds	r3, #2
    18a8:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    18aa:	05d3      	lsls	r3, r2, #23
    18ac:	0ddb      	lsrs	r3, r3, #23
    18ae:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    18b0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18b2:	3b01      	subs	r3, #1
    18b4:	b29b      	uxth	r3, r3
    18b6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    18b8:	2b00      	cmp	r3, #0
    18ba:	d106      	bne.n	18ca <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18bc:	2301      	movs	r3, #1
    18be:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    18c0:	2302      	movs	r3, #2
    18c2:	75a3      	strb	r3, [r4, #22]
    18c4:	e001      	b.n	18ca <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18c6:	2301      	movs	r3, #1
    18c8:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    18ca:	07b2      	lsls	r2, r6, #30
    18cc:	d509      	bpl.n	18e2 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    18ce:	2302      	movs	r3, #2
    18d0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    18d2:	2200      	movs	r2, #0
    18d4:	2333      	movs	r3, #51	; 0x33
    18d6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    18d8:	07fb      	lsls	r3, r7, #31
    18da:	d502      	bpl.n	18e2 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    18dc:	1c28      	adds	r0, r5, #0
    18de:	68e9      	ldr	r1, [r5, #12]
    18e0:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    18e2:	0772      	lsls	r2, r6, #29
    18e4:	d56a      	bpl.n	19bc <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    18e6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    18e8:	b29b      	uxth	r3, r3
    18ea:	2b00      	cmp	r3, #0
    18ec:	d064      	beq.n	19b8 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18ee:	8b63      	ldrh	r3, [r4, #26]
    18f0:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    18f2:	0719      	lsls	r1, r3, #28
    18f4:	d402      	bmi.n	18fc <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    18f6:	223f      	movs	r2, #63	; 0x3f
    18f8:	4013      	ands	r3, r2
    18fa:	e001      	b.n	1900 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    18fc:	2237      	movs	r2, #55	; 0x37
    18fe:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1900:	2b00      	cmp	r3, #0
    1902:	d037      	beq.n	1974 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1904:	079a      	lsls	r2, r3, #30
    1906:	d507      	bpl.n	1918 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1908:	221a      	movs	r2, #26
    190a:	2332      	movs	r3, #50	; 0x32
    190c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    190e:	8b62      	ldrh	r2, [r4, #26]
    1910:	2302      	movs	r3, #2
    1912:	4313      	orrs	r3, r2
    1914:	8363      	strh	r3, [r4, #26]
    1916:	e027      	b.n	1968 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1918:	0759      	lsls	r1, r3, #29
    191a:	d507      	bpl.n	192c <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    191c:	221e      	movs	r2, #30
    191e:	2332      	movs	r3, #50	; 0x32
    1920:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1922:	8b62      	ldrh	r2, [r4, #26]
    1924:	2304      	movs	r3, #4
    1926:	4313      	orrs	r3, r2
    1928:	8363      	strh	r3, [r4, #26]
    192a:	e01d      	b.n	1968 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    192c:	07da      	lsls	r2, r3, #31
    192e:	d507      	bpl.n	1940 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1930:	2213      	movs	r2, #19
    1932:	2332      	movs	r3, #50	; 0x32
    1934:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1936:	8b62      	ldrh	r2, [r4, #26]
    1938:	2301      	movs	r3, #1
    193a:	4313      	orrs	r3, r2
    193c:	8363      	strh	r3, [r4, #26]
    193e:	e013      	b.n	1968 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1940:	06d9      	lsls	r1, r3, #27
    1942:	d507      	bpl.n	1954 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1944:	2242      	movs	r2, #66	; 0x42
    1946:	2332      	movs	r3, #50	; 0x32
    1948:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    194a:	8b62      	ldrh	r2, [r4, #26]
    194c:	2310      	movs	r3, #16
    194e:	4313      	orrs	r3, r2
    1950:	8363      	strh	r3, [r4, #26]
    1952:	e009      	b.n	1968 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1954:	2220      	movs	r2, #32
    1956:	421a      	tst	r2, r3
    1958:	d006      	beq.n	1968 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    195a:	2241      	movs	r2, #65	; 0x41
    195c:	2332      	movs	r3, #50	; 0x32
    195e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1960:	8b62      	ldrh	r2, [r4, #26]
    1962:	2320      	movs	r3, #32
    1964:	4313      	orrs	r3, r2
    1966:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1968:	077a      	lsls	r2, r7, #29
    196a:	d527      	bpl.n	19bc <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    196c:	1c28      	adds	r0, r5, #0
    196e:	696b      	ldr	r3, [r5, #20]
    1970:	4798      	blx	r3
    1972:	e023      	b.n	19bc <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1974:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1976:	05d2      	lsls	r2, r2, #23
    1978:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    197a:	b2d3      	uxtb	r3, r2
    197c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    197e:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1980:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1982:	1c59      	adds	r1, r3, #1
    1984:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1986:	7969      	ldrb	r1, [r5, #5]
    1988:	2901      	cmp	r1, #1
    198a:	d104      	bne.n	1996 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    198c:	0a12      	lsrs	r2, r2, #8
    198e:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1990:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1992:	3301      	adds	r3, #1
    1994:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1996:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1998:	3b01      	subs	r3, #1
    199a:	b29b      	uxth	r3, r3
    199c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    199e:	2b00      	cmp	r3, #0
    19a0:	d10c      	bne.n	19bc <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19a2:	2304      	movs	r3, #4
    19a4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    19a6:	2200      	movs	r2, #0
    19a8:	2332      	movs	r3, #50	; 0x32
    19aa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    19ac:	07ba      	lsls	r2, r7, #30
    19ae:	d505      	bpl.n	19bc <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    19b0:	1c28      	adds	r0, r5, #0
    19b2:	692b      	ldr	r3, [r5, #16]
    19b4:	4798      	blx	r3
    19b6:	e001      	b.n	19bc <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19b8:	2304      	movs	r3, #4
    19ba:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    19bc:	06f1      	lsls	r1, r6, #27
    19be:	d507      	bpl.n	19d0 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    19c0:	2310      	movs	r3, #16
    19c2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    19c4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    19c6:	06fa      	lsls	r2, r7, #27
    19c8:	d502      	bpl.n	19d0 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    19ca:	1c28      	adds	r0, r5, #0
    19cc:	69eb      	ldr	r3, [r5, #28]
    19ce:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    19d0:	06b1      	lsls	r1, r6, #26
    19d2:	d507      	bpl.n	19e4 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    19d4:	2320      	movs	r3, #32
    19d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    19d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    19da:	073a      	lsls	r2, r7, #28
    19dc:	d502      	bpl.n	19e4 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    19de:	1c28      	adds	r0, r5, #0
    19e0:	69ab      	ldr	r3, [r5, #24]
    19e2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    19e4:	0731      	lsls	r1, r6, #28
    19e6:	d507      	bpl.n	19f8 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    19e8:	2308      	movs	r3, #8
    19ea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    19ec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    19ee:	06ba      	lsls	r2, r7, #26
    19f0:	d502      	bpl.n	19f8 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    19f2:	6a2b      	ldr	r3, [r5, #32]
    19f4:	1c28      	adds	r0, r5, #0
    19f6:	4798      	blx	r3
		}
	}
#endif
}
    19f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	20000cb0 	.word	0x20000cb0

00001a00 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1a00:	4770      	bx	lr
    1a02:	46c0      	nop			; (mov r8, r8)

00001a04 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1a04:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    1a06:	4b0a      	ldr	r3, [pc, #40]	; (1a30 <_sercom_set_handler+0x2c>)
    1a08:	781b      	ldrb	r3, [r3, #0]
    1a0a:	2b00      	cmp	r3, #0
    1a0c:	d10c      	bne.n	1a28 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a0e:	4f09      	ldr	r7, [pc, #36]	; (1a34 <_sercom_set_handler+0x30>)
    1a10:	4e09      	ldr	r6, [pc, #36]	; (1a38 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1a12:	4d0a      	ldr	r5, [pc, #40]	; (1a3c <_sercom_set_handler+0x38>)
    1a14:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a16:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1a18:	195a      	adds	r2, r3, r5
    1a1a:	6014      	str	r4, [r2, #0]
    1a1c:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a1e:	2b18      	cmp	r3, #24
    1a20:	d1f9      	bne.n	1a16 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    1a22:	2201      	movs	r2, #1
    1a24:	4b02      	ldr	r3, [pc, #8]	; (1a30 <_sercom_set_handler+0x2c>)
    1a26:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1a28:	0080      	lsls	r0, r0, #2
    1a2a:	4b02      	ldr	r3, [pc, #8]	; (1a34 <_sercom_set_handler+0x30>)
    1a2c:	50c1      	str	r1, [r0, r3]
}
    1a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a30:	200000a8 	.word	0x200000a8
    1a34:	200000ac 	.word	0x200000ac
    1a38:	00001a01 	.word	0x00001a01
    1a3c:	20000cb0 	.word	0x20000cb0

00001a40 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1a40:	b510      	push	{r4, lr}
    1a42:	b082      	sub	sp, #8
    1a44:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1a46:	4668      	mov	r0, sp
    1a48:	4905      	ldr	r1, [pc, #20]	; (1a60 <_sercom_get_interrupt_vector+0x20>)
    1a4a:	2206      	movs	r2, #6
    1a4c:	4b05      	ldr	r3, [pc, #20]	; (1a64 <_sercom_get_interrupt_vector+0x24>)
    1a4e:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1a50:	1c20      	adds	r0, r4, #0
    1a52:	4b05      	ldr	r3, [pc, #20]	; (1a68 <_sercom_get_interrupt_vector+0x28>)
    1a54:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1a56:	466b      	mov	r3, sp
    1a58:	5618      	ldrsb	r0, [r3, r0]
}
    1a5a:	b002      	add	sp, #8
    1a5c:	bd10      	pop	{r4, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	00005f30 	.word	0x00005f30
    1a64:	00004e25 	.word	0x00004e25
    1a68:	00000b11 	.word	0x00000b11

00001a6c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1a6c:	b508      	push	{r3, lr}
    1a6e:	4b02      	ldr	r3, [pc, #8]	; (1a78 <SERCOM0_Handler+0xc>)
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	2000      	movs	r0, #0
    1a74:	4798      	blx	r3
    1a76:	bd08      	pop	{r3, pc}
    1a78:	200000ac 	.word	0x200000ac

00001a7c <SERCOM1_Handler>:
    1a7c:	b508      	push	{r3, lr}
    1a7e:	4b02      	ldr	r3, [pc, #8]	; (1a88 <SERCOM1_Handler+0xc>)
    1a80:	685b      	ldr	r3, [r3, #4]
    1a82:	2001      	movs	r0, #1
    1a84:	4798      	blx	r3
    1a86:	bd08      	pop	{r3, pc}
    1a88:	200000ac 	.word	0x200000ac

00001a8c <SERCOM2_Handler>:
    1a8c:	b508      	push	{r3, lr}
    1a8e:	4b02      	ldr	r3, [pc, #8]	; (1a98 <SERCOM2_Handler+0xc>)
    1a90:	689b      	ldr	r3, [r3, #8]
    1a92:	2002      	movs	r0, #2
    1a94:	4798      	blx	r3
    1a96:	bd08      	pop	{r3, pc}
    1a98:	200000ac 	.word	0x200000ac

00001a9c <SERCOM3_Handler>:
    1a9c:	b508      	push	{r3, lr}
    1a9e:	4b02      	ldr	r3, [pc, #8]	; (1aa8 <SERCOM3_Handler+0xc>)
    1aa0:	68db      	ldr	r3, [r3, #12]
    1aa2:	2003      	movs	r0, #3
    1aa4:	4798      	blx	r3
    1aa6:	bd08      	pop	{r3, pc}
    1aa8:	200000ac 	.word	0x200000ac

00001aac <SERCOM4_Handler>:
    1aac:	b508      	push	{r3, lr}
    1aae:	4b02      	ldr	r3, [pc, #8]	; (1ab8 <SERCOM4_Handler+0xc>)
    1ab0:	691b      	ldr	r3, [r3, #16]
    1ab2:	2004      	movs	r0, #4
    1ab4:	4798      	blx	r3
    1ab6:	bd08      	pop	{r3, pc}
    1ab8:	200000ac 	.word	0x200000ac

00001abc <SERCOM5_Handler>:
    1abc:	b508      	push	{r3, lr}
    1abe:	4b02      	ldr	r3, [pc, #8]	; (1ac8 <SERCOM5_Handler+0xc>)
    1ac0:	695b      	ldr	r3, [r3, #20]
    1ac2:	2005      	movs	r0, #5
    1ac4:	4798      	blx	r3
    1ac6:	bd08      	pop	{r3, pc}
    1ac8:	200000ac 	.word	0x200000ac

00001acc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1acc:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1ace:	2a00      	cmp	r2, #0
    1ad0:	d10f      	bne.n	1af2 <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    1ad2:	008b      	lsls	r3, r1, #2
    1ad4:	4a08      	ldr	r2, [pc, #32]	; (1af8 <extint_register_callback+0x2c>)
    1ad6:	589a      	ldr	r2, [r3, r2]
    1ad8:	2a00      	cmp	r2, #0
    1ada:	d104      	bne.n	1ae6 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
    1adc:	1c19      	adds	r1, r3, #0
    1ade:	4b06      	ldr	r3, [pc, #24]	; (1af8 <extint_register_callback+0x2c>)
    1ae0:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    1ae2:	2300      	movs	r3, #0
    1ae4:	e005      	b.n	1af2 <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1ae6:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1ae8:	1a12      	subs	r2, r2, r0
    1aea:	1e50      	subs	r0, r2, #1
    1aec:	4182      	sbcs	r2, r0
    1aee:	4252      	negs	r2, r2
    1af0:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1af2:	1c18      	adds	r0, r3, #0
    1af4:	4770      	bx	lr
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	20000c54 	.word	0x20000c54

00001afc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1afc:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1afe:	2900      	cmp	r1, #0
    1b00:	d107      	bne.n	1b12 <extint_chan_enable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    1b02:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1b04:	281f      	cmp	r0, #31
    1b06:	d800      	bhi.n	1b0a <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1b08:	4b03      	ldr	r3, [pc, #12]	; (1b18 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    1b0a:	2201      	movs	r2, #1
    1b0c:	4082      	lsls	r2, r0
    1b0e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1b10:	2300      	movs	r3, #0
}
    1b12:	1c18      	adds	r0, r3, #0
    1b14:	4770      	bx	lr
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	40001800 	.word	0x40001800

00001b1c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1b1c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1b1e:	2200      	movs	r2, #0
    1b20:	4b16      	ldr	r3, [pc, #88]	; (1b7c <EIC_Handler+0x60>)
    1b22:	701a      	strb	r2, [r3, #0]
    1b24:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1b26:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1b28:	4d15      	ldr	r5, [pc, #84]	; (1b80 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1b2a:	4c14      	ldr	r4, [pc, #80]	; (1b7c <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    1b2c:	2b1f      	cmp	r3, #31
    1b2e:	d910      	bls.n	1b52 <EIC_Handler+0x36>
    1b30:	e019      	b.n	1b66 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1b32:	4914      	ldr	r1, [pc, #80]	; (1b84 <EIC_Handler+0x68>)
    1b34:	e000      	b.n	1b38 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
    1b36:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1b38:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1b3a:	009b      	lsls	r3, r3, #2
    1b3c:	595b      	ldr	r3, [r3, r5]
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d000      	beq.n	1b44 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1b42:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1b44:	7823      	ldrb	r3, [r4, #0]
    1b46:	3301      	adds	r3, #1
    1b48:	b2db      	uxtb	r3, r3
    1b4a:	7023      	strb	r3, [r4, #0]
    1b4c:	2b0f      	cmp	r3, #15
    1b4e:	d814      	bhi.n	1b7a <EIC_Handler+0x5e>
    1b50:	e7ec      	b.n	1b2c <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1b52:	1c32      	adds	r2, r6, #0
    1b54:	401a      	ands	r2, r3
    1b56:	2101      	movs	r1, #1
    1b58:	4091      	lsls	r1, r2
    1b5a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    1b5c:	4909      	ldr	r1, [pc, #36]	; (1b84 <EIC_Handler+0x68>)
    1b5e:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1b60:	4211      	tst	r1, r2
    1b62:	d1e6      	bne.n	1b32 <EIC_Handler+0x16>
    1b64:	e7ee      	b.n	1b44 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1b66:	1c32      	adds	r2, r6, #0
    1b68:	401a      	ands	r2, r3
    1b6a:	2101      	movs	r1, #1
    1b6c:	4091      	lsls	r1, r2
    1b6e:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    1b70:	2100      	movs	r1, #0
    1b72:	6909      	ldr	r1, [r1, #16]
    1b74:	4211      	tst	r1, r2
    1b76:	d1de      	bne.n	1b36 <EIC_Handler+0x1a>
    1b78:	e7e4      	b.n	1b44 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    1b7a:	bd70      	pop	{r4, r5, r6, pc}
    1b7c:	20000cc8 	.word	0x20000cc8
    1b80:	20000c54 	.word	0x20000c54
    1b84:	40001800 	.word	0x40001800

00001b88 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1b88:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1b8a:	2000      	movs	r0, #0
    1b8c:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <delay_init+0x28>)
    1b8e:	4798      	blx	r3
	cycles_per_ms /= 1000;
    1b90:	4c08      	ldr	r4, [pc, #32]	; (1bb4 <delay_init+0x2c>)
    1b92:	21fa      	movs	r1, #250	; 0xfa
    1b94:	0089      	lsls	r1, r1, #2
    1b96:	47a0      	blx	r4
    1b98:	4b07      	ldr	r3, [pc, #28]	; (1bb8 <delay_init+0x30>)
    1b9a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1b9c:	21fa      	movs	r1, #250	; 0xfa
    1b9e:	0089      	lsls	r1, r1, #2
    1ba0:	47a0      	blx	r4
    1ba2:	4b06      	ldr	r3, [pc, #24]	; (1bbc <delay_init+0x34>)
    1ba4:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1ba6:	2205      	movs	r2, #5
    1ba8:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <delay_init+0x38>)
    1baa:	601a      	str	r2, [r3, #0]
}
    1bac:	bd10      	pop	{r4, pc}
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	00004269 	.word	0x00004269
    1bb4:	00004c35 	.word	0x00004c35
    1bb8:	20000004 	.word	0x20000004
    1bbc:	20000000 	.word	0x20000000
    1bc0:	e000e010 	.word	0xe000e010

00001bc4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1bc4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1bc6:	4b08      	ldr	r3, [pc, #32]	; (1be8 <delay_cycles_us+0x24>)
    1bc8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1bca:	4a08      	ldr	r2, [pc, #32]	; (1bec <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1bcc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1bce:	2180      	movs	r1, #128	; 0x80
    1bd0:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    1bd2:	e006      	b.n	1be2 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    1bd4:	2c00      	cmp	r4, #0
    1bd6:	d004      	beq.n	1be2 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    1bd8:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1bda:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1bdc:	6813      	ldr	r3, [r2, #0]
    1bde:	420b      	tst	r3, r1
    1be0:	d0fc      	beq.n	1bdc <delay_cycles_us+0x18>
    1be2:	3801      	subs	r0, #1
    1be4:	d2f6      	bcs.n	1bd4 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    1be6:	bd30      	pop	{r4, r5, pc}
    1be8:	20000000 	.word	0x20000000
    1bec:	e000e010 	.word	0xe000e010

00001bf0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1bf0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1bf2:	4b08      	ldr	r3, [pc, #32]	; (1c14 <delay_cycles_ms+0x24>)
    1bf4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1bf6:	4a08      	ldr	r2, [pc, #32]	; (1c18 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1bf8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1bfa:	2180      	movs	r1, #128	; 0x80
    1bfc:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    1bfe:	e006      	b.n	1c0e <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    1c00:	2c00      	cmp	r4, #0
    1c02:	d004      	beq.n	1c0e <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    1c04:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1c06:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1c08:	6813      	ldr	r3, [r2, #0]
    1c0a:	420b      	tst	r3, r1
    1c0c:	d0fc      	beq.n	1c08 <delay_cycles_ms+0x18>
    1c0e:	3801      	subs	r0, #1
    1c10:	d2f6      	bcs.n	1c00 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    1c12:	bd30      	pop	{r4, r5, pc}
    1c14:	20000004 	.word	0x20000004
    1c18:	e000e010 	.word	0xe000e010

00001c1c <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    1c1c:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    1c1e:	490e      	ldr	r1, [pc, #56]	; (1c58 <NWK_Init+0x3c>)
    1c20:	2300      	movs	r3, #0
    1c22:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    1c24:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    1c26:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    1c28:	2258      	movs	r2, #88	; 0x58
    1c2a:	528b      	strh	r3, [r1, r2]
    1c2c:	1c0b      	adds	r3, r1, #0
    1c2e:	3308      	adds	r3, #8
    1c30:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    1c32:	2200      	movs	r2, #0
    1c34:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    1c36:	428b      	cmp	r3, r1
    1c38:	d1fc      	bne.n	1c34 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    1c3a:	4b08      	ldr	r3, [pc, #32]	; (1c5c <NWK_Init+0x40>)
    1c3c:	4798      	blx	r3
	nwkRxInit();
    1c3e:	4b08      	ldr	r3, [pc, #32]	; (1c60 <NWK_Init+0x44>)
    1c40:	4798      	blx	r3
	nwkFrameInit();
    1c42:	4b08      	ldr	r3, [pc, #32]	; (1c64 <NWK_Init+0x48>)
    1c44:	4798      	blx	r3
	nwkDataReqInit();
    1c46:	4b08      	ldr	r3, [pc, #32]	; (1c68 <NWK_Init+0x4c>)
    1c48:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    1c4a:	4b08      	ldr	r3, [pc, #32]	; (1c6c <NWK_Init+0x50>)
    1c4c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    1c4e:	4b08      	ldr	r3, [pc, #32]	; (1c70 <NWK_Init+0x54>)
    1c50:	4798      	blx	r3
#ifdef NWK_ENABLE_MULTICAST
	nwkGroupInit();
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
    1c52:	4b08      	ldr	r3, [pc, #32]	; (1c74 <NWK_Init+0x58>)
    1c54:	4798      	blx	r3
#endif
}
    1c56:	bd08      	pop	{r3, pc}
    1c58:	20000ccc 	.word	0x20000ccc
    1c5c:	00002f5d 	.word	0x00002f5d
    1c60:	000027bd 	.word	0x000027bd
    1c64:	00001e65 	.word	0x00001e65
    1c68:	00001d15 	.word	0x00001d15
    1c6c:	00001f65 	.word	0x00001f65
    1c70:	00002c29 	.word	0x00002c29
    1c74:	000024e1 	.word	0x000024e1

00001c78 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    1c78:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    1c7a:	4b02      	ldr	r3, [pc, #8]	; (1c84 <NWK_SetAddr+0xc>)
    1c7c:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    1c7e:	4b02      	ldr	r3, [pc, #8]	; (1c88 <NWK_SetAddr+0x10>)
    1c80:	4798      	blx	r3
}
    1c82:	bd08      	pop	{r3, pc}
    1c84:	20000ccc 	.word	0x20000ccc
    1c88:	00003391 	.word	0x00003391

00001c8c <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    1c8c:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    1c8e:	4b02      	ldr	r3, [pc, #8]	; (1c98 <NWK_SetPanId+0xc>)
    1c90:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    1c92:	4b02      	ldr	r3, [pc, #8]	; (1c9c <NWK_SetPanId+0x10>)
    1c94:	4798      	blx	r3
}
    1c96:	bd08      	pop	{r3, pc}
    1c98:	20000ccc 	.word	0x20000ccc
    1c9c:	00003371 	.word	0x00003371

00001ca0 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    1ca0:	3002      	adds	r0, #2
    1ca2:	0080      	lsls	r0, r0, #2
    1ca4:	4b01      	ldr	r3, [pc, #4]	; (1cac <NWK_OpenEndpoint+0xc>)
    1ca6:	50c1      	str	r1, [r0, r3]
}
    1ca8:	4770      	bx	lr
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	20000ccc 	.word	0x20000ccc

00001cb0 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    1cb0:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    1cb2:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <NWK_TaskHandler+0x14>)
    1cb4:	4798      	blx	r3
	nwkTxTaskHandler();
    1cb6:	4b04      	ldr	r3, [pc, #16]	; (1cc8 <NWK_TaskHandler+0x18>)
    1cb8:	4798      	blx	r3
	nwkDataReqTaskHandler();
    1cba:	4b04      	ldr	r3, [pc, #16]	; (1ccc <NWK_TaskHandler+0x1c>)
    1cbc:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    1cbe:	4b04      	ldr	r3, [pc, #16]	; (1cd0 <NWK_TaskHandler+0x20>)
    1cc0:	4798      	blx	r3
#endif
}
    1cc2:	bd08      	pop	{r3, pc}
    1cc4:	00002859 	.word	0x00002859
    1cc8:	0000316d 	.word	0x0000316d
    1ccc:	00001d21 	.word	0x00001d21
    1cd0:	00002d1d 	.word	0x00002d1d

00001cd4 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    1cd4:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1cd6:	4b0d      	ldr	r3, [pc, #52]	; (1d0c <nwkDataReqTxConf+0x38>)
    1cd8:	681b      	ldr	r3, [r3, #0]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d012      	beq.n	1d04 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    1cde:	685a      	ldr	r2, [r3, #4]
    1ce0:	4282      	cmp	r2, r0
    1ce2:	d10c      	bne.n	1cfe <nwkDataReqTxConf+0x2a>
    1ce4:	e002      	b.n	1cec <nwkDataReqTxConf+0x18>
    1ce6:	685a      	ldr	r2, [r3, #4]
    1ce8:	4282      	cmp	r2, r0
    1cea:	d108      	bne.n	1cfe <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    1cec:	2285      	movs	r2, #133	; 0x85
    1cee:	5c82      	ldrb	r2, [r0, r2]
    1cf0:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    1cf2:	2288      	movs	r2, #136	; 0x88
    1cf4:	5c82      	ldrb	r2, [r0, r2]
    1cf6:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1cf8:	2202      	movs	r2, #2
    1cfa:	721a      	strb	r2, [r3, #8]
			break;
    1cfc:	e002      	b.n	1d04 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1cfe:	681b      	ldr	r3, [r3, #0]
    1d00:	2b00      	cmp	r3, #0
    1d02:	d1f0      	bne.n	1ce6 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    1d04:	4b02      	ldr	r3, [pc, #8]	; (1d10 <nwkDataReqTxConf+0x3c>)
    1d06:	4798      	blx	r3
}
    1d08:	bd08      	pop	{r3, pc}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	200000c4 	.word	0x200000c4
    1d10:	00001ef1 	.word	0x00001ef1

00001d14 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    1d14:	2200      	movs	r2, #0
    1d16:	4b01      	ldr	r3, [pc, #4]	; (1d1c <nwkDataReqInit+0x8>)
    1d18:	601a      	str	r2, [r3, #0]
}
    1d1a:	4770      	bx	lr
    1d1c:	200000c4 	.word	0x200000c4

00001d20 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    1d20:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1d22:	4b4a      	ldr	r3, [pc, #296]	; (1e4c <nwkDataReqTaskHandler+0x12c>)
    1d24:	681a      	ldr	r2, [r3, #0]
    1d26:	2a00      	cmp	r2, #0
    1d28:	d100      	bne.n	1d2c <nwkDataReqTaskHandler+0xc>
    1d2a:	e08d      	b.n	1e48 <nwkDataReqTaskHandler+0x128>
    1d2c:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    1d2e:	7a23      	ldrb	r3, [r4, #8]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d002      	beq.n	1d3a <nwkDataReqTaskHandler+0x1a>
    1d34:	2b02      	cmp	r3, #2
    1d36:	d06d      	beq.n	1e14 <nwkDataReqTaskHandler+0xf4>
    1d38:	e082      	b.n	1e40 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    1d3a:	4b45      	ldr	r3, [pc, #276]	; (1e50 <nwkDataReqTaskHandler+0x130>)
    1d3c:	4798      	blx	r3
    1d3e:	1e05      	subs	r5, r0, #0
    1d40:	d103      	bne.n	1d4a <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1d42:	2302      	movs	r3, #2
    1d44:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    1d46:	7723      	strb	r3, [r4, #28]
    1d48:	e07e      	b.n	1e48 <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    1d4a:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1d4c:	2201      	movs	r2, #1
    1d4e:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    1d50:	4b40      	ldr	r3, [pc, #256]	; (1e54 <nwkDataReqTaskHandler+0x134>)
    1d52:	2189      	movs	r1, #137	; 0x89
    1d54:	5443      	strb	r3, [r0, r1]
    1d56:	0a18      	lsrs	r0, r3, #8
    1d58:	218a      	movs	r1, #138	; 0x8a
    1d5a:	5468      	strb	r0, [r5, r1]
    1d5c:	0c18      	lsrs	r0, r3, #16
    1d5e:	218b      	movs	r1, #139	; 0x8b
    1d60:	5468      	strb	r0, [r5, r1]
    1d62:	0e1b      	lsrs	r3, r3, #24
    1d64:	218c      	movs	r1, #140	; 0x8c
    1d66:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    1d68:	7ba0      	ldrb	r0, [r4, #14]
    1d6a:	0880      	lsrs	r0, r0, #2
    1d6c:	2301      	movs	r3, #1
    1d6e:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    1d70:	2188      	movs	r1, #136	; 0x88
    1d72:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    1d74:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    1d76:	4019      	ands	r1, r3
    1d78:	7ae8      	ldrb	r0, [r5, #11]
    1d7a:	4390      	bics	r0, r2
    1d7c:	1c02      	adds	r2, r0, #0
    1d7e:	430a      	orrs	r2, r1
    1d80:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    1d82:	7ba1      	ldrb	r1, [r4, #14]
    1d84:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    1d86:	4019      	ands	r1, r3
    1d88:	0089      	lsls	r1, r1, #2
    1d8a:	b2d2      	uxtb	r2, r2
    1d8c:	2004      	movs	r0, #4
    1d8e:	4382      	bics	r2, r0
    1d90:	430a      	orrs	r2, r1
    1d92:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    1d94:	7ba2      	ldrb	r2, [r4, #14]
    1d96:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    1d98:	4013      	ands	r3, r2
    1d9a:	005a      	lsls	r2, r3, #1
    1d9c:	7aeb      	ldrb	r3, [r5, #11]
    1d9e:	2102      	movs	r1, #2
    1da0:	438b      	bics	r3, r1
    1da2:	4313      	orrs	r3, r2
    1da4:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1da6:	4b2c      	ldr	r3, [pc, #176]	; (1e58 <nwkDataReqTaskHandler+0x138>)
    1da8:	791a      	ldrb	r2, [r3, #4]
    1daa:	3201      	adds	r2, #1
    1dac:	b2d2      	uxtb	r2, r2
    1dae:	711a      	strb	r2, [r3, #4]
    1db0:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    1db2:	781a      	ldrb	r2, [r3, #0]
    1db4:	736a      	strb	r2, [r5, #13]
    1db6:	785b      	ldrb	r3, [r3, #1]
    1db8:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    1dba:	8963      	ldrh	r3, [r4, #10]
    1dbc:	7aa2      	ldrb	r2, [r4, #10]
    1dbe:	73ea      	strb	r2, [r5, #15]
    1dc0:	0a1b      	lsrs	r3, r3, #8
    1dc2:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    1dc4:	7b61      	ldrb	r1, [r4, #13]
    1dc6:	230f      	movs	r3, #15
    1dc8:	4019      	ands	r1, r3
    1dca:	7c6a      	ldrb	r2, [r5, #17]
    1dcc:	200f      	movs	r0, #15
    1dce:	4382      	bics	r2, r0
    1dd0:	430a      	orrs	r2, r1
    1dd2:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    1dd4:	7b22      	ldrb	r2, [r4, #12]
    1dd6:	0112      	lsls	r2, r2, #4
    1dd8:	7c69      	ldrb	r1, [r5, #17]
    1dda:	400b      	ands	r3, r1
    1ddc:	4313      	orrs	r3, r2
    1dde:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    1de0:	2381      	movs	r3, #129	; 0x81
    1de2:	5ceb      	ldrb	r3, [r5, r3]
    1de4:	2282      	movs	r2, #130	; 0x82
    1de6:	5ca8      	ldrb	r0, [r5, r2]
    1de8:	0200      	lsls	r0, r0, #8
    1dea:	4318      	orrs	r0, r3
    1dec:	2383      	movs	r3, #131	; 0x83
    1dee:	5ceb      	ldrb	r3, [r5, r3]
    1df0:	041b      	lsls	r3, r3, #16
    1df2:	4318      	orrs	r0, r3
    1df4:	2384      	movs	r3, #132	; 0x84
    1df6:	5ceb      	ldrb	r3, [r5, r3]
    1df8:	061b      	lsls	r3, r3, #24
    1dfa:	4318      	orrs	r0, r3
    1dfc:	7d22      	ldrb	r2, [r4, #20]
    1dfe:	6921      	ldr	r1, [r4, #16]
    1e00:	4b16      	ldr	r3, [pc, #88]	; (1e5c <nwkDataReqTaskHandler+0x13c>)
    1e02:	4798      	blx	r3
	frame->size += req->size;
    1e04:	7d22      	ldrb	r2, [r4, #20]
    1e06:	786b      	ldrb	r3, [r5, #1]
    1e08:	18d3      	adds	r3, r2, r3
    1e0a:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    1e0c:	1c28      	adds	r0, r5, #0
    1e0e:	4b14      	ldr	r3, [pc, #80]	; (1e60 <nwkDataReqTaskHandler+0x140>)
    1e10:	4798      	blx	r3
    1e12:	e019      	b.n	1e48 <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    1e14:	4294      	cmp	r4, r2
    1e16:	d103      	bne.n	1e20 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    1e18:	4b0c      	ldr	r3, [pc, #48]	; (1e4c <nwkDataReqTaskHandler+0x12c>)
    1e1a:	6822      	ldr	r2, [r4, #0]
    1e1c:	601a      	str	r2, [r3, #0]
    1e1e:	e006      	b.n	1e2e <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    1e20:	6813      	ldr	r3, [r2, #0]
    1e22:	429c      	cmp	r4, r3
    1e24:	d001      	beq.n	1e2a <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    1e26:	1c1a      	adds	r2, r3, #0
    1e28:	e7fa      	b.n	1e20 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    1e2a:	6823      	ldr	r3, [r4, #0]
    1e2c:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    1e2e:	4a0a      	ldr	r2, [pc, #40]	; (1e58 <nwkDataReqTaskHandler+0x138>)
    1e30:	2358      	movs	r3, #88	; 0x58
    1e32:	5ad1      	ldrh	r1, [r2, r3]
    1e34:	3901      	subs	r1, #1
    1e36:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    1e38:	69a3      	ldr	r3, [r4, #24]
    1e3a:	1c20      	adds	r0, r4, #0
    1e3c:	4798      	blx	r3
    1e3e:	e003      	b.n	1e48 <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1e40:	6824      	ldr	r4, [r4, #0]
    1e42:	2c00      	cmp	r4, #0
    1e44:	d000      	beq.n	1e48 <nwkDataReqTaskHandler+0x128>
    1e46:	e772      	b.n	1d2e <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    1e48:	bd38      	pop	{r3, r4, r5, pc}
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	200000c4 	.word	0x200000c4
    1e50:	00001e81 	.word	0x00001e81
    1e54:	00001cd5 	.word	0x00001cd5
    1e58:	20000ccc 	.word	0x20000ccc
    1e5c:	00004e25 	.word	0x00004e25
    1e60:	00002f91 	.word	0x00002f91

00001e64 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1e64:	4b04      	ldr	r3, [pc, #16]	; (1e78 <nwkFrameInit+0x14>)
    1e66:	4a05      	ldr	r2, [pc, #20]	; (1e7c <nwkFrameInit+0x18>)
    1e68:	1899      	adds	r1, r3, r2
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1e6a:	2200      	movs	r2, #0
    1e6c:	701a      	strb	r2, [r3, #0]
    1e6e:	338d      	adds	r3, #141	; 0x8d
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    1e70:	428b      	cmp	r3, r1
    1e72:	d1fb      	bne.n	1e6c <nwkFrameInit+0x8>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	200000c8 	.word	0x200000c8
    1e7c:	00000582 	.word	0x00000582

00001e80 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    1e80:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    1e82:	4b18      	ldr	r3, [pc, #96]	; (1ee4 <nwkFrameAlloc+0x64>)
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d007      	beq.n	1e9a <nwkFrameAlloc+0x1a>
    1e8a:	4a16      	ldr	r2, [pc, #88]	; (1ee4 <nwkFrameAlloc+0x64>)
    1e8c:	328d      	adds	r2, #141	; 0x8d
    1e8e:	2301      	movs	r3, #1
    1e90:	1c18      	adds	r0, r3, #0
    1e92:	7811      	ldrb	r1, [r2, #0]
    1e94:	2900      	cmp	r1, #0
    1e96:	d11d      	bne.n	1ed4 <nwkFrameAlloc+0x54>
    1e98:	e000      	b.n	1e9c <nwkFrameAlloc+0x1c>
    1e9a:	2000      	movs	r0, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1e9c:	4e11      	ldr	r6, [pc, #68]	; (1ee4 <nwkFrameAlloc+0x64>)
    1e9e:	258d      	movs	r5, #141	; 0x8d
    1ea0:	4345      	muls	r5, r0
    1ea2:	1974      	adds	r4, r6, r5
    1ea4:	1c20      	adds	r0, r4, #0
    1ea6:	2100      	movs	r1, #0
    1ea8:	228d      	movs	r2, #141	; 0x8d
    1eaa:	4b0f      	ldr	r3, [pc, #60]	; (1ee8 <nwkFrameAlloc+0x68>)
    1eac:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1eae:	2310      	movs	r3, #16
    1eb0:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    1eb2:	1c23      	adds	r3, r4, #0
    1eb4:	3380      	adds	r3, #128	; 0x80
    1eb6:	1c20      	adds	r0, r4, #0
    1eb8:	3012      	adds	r0, #18
    1eba:	7058      	strb	r0, [r3, #1]
    1ebc:	0a02      	lsrs	r2, r0, #8
    1ebe:	709a      	strb	r2, [r3, #2]
    1ec0:	0c02      	lsrs	r2, r0, #16
    1ec2:	70da      	strb	r2, [r3, #3]
    1ec4:	0e00      	lsrs	r0, r0, #24
    1ec6:	7118      	strb	r0, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    1ec8:	4a08      	ldr	r2, [pc, #32]	; (1eec <nwkFrameAlloc+0x6c>)
    1eca:	2358      	movs	r3, #88	; 0x58
    1ecc:	5ad1      	ldrh	r1, [r2, r3]
    1ece:	3101      	adds	r1, #1
    1ed0:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
    1ed2:	e004      	b.n	1ede <nwkFrameAlloc+0x5e>
    1ed4:	3301      	adds	r3, #1
    1ed6:	328d      	adds	r2, #141	; 0x8d
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    1ed8:	2b0a      	cmp	r3, #10
    1eda:	d1d9      	bne.n	1e90 <nwkFrameAlloc+0x10>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    1edc:	2400      	movs	r4, #0
}
    1ede:	1c20      	adds	r0, r4, #0
    1ee0:	bd70      	pop	{r4, r5, r6, pc}
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	200000c8 	.word	0x200000c8
    1ee8:	00004e37 	.word	0x00004e37
    1eec:	20000ccc 	.word	0x20000ccc

00001ef0 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    1ef0:	2300      	movs	r3, #0
    1ef2:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    1ef4:	4a02      	ldr	r2, [pc, #8]	; (1f00 <nwkFrameFree+0x10>)
    1ef6:	2358      	movs	r3, #88	; 0x58
    1ef8:	5ad1      	ldrh	r1, [r2, r3]
    1efa:	3901      	subs	r1, #1
    1efc:	52d1      	strh	r1, [r2, r3]
}
    1efe:	4770      	bx	lr
    1f00:	20000ccc 	.word	0x20000ccc

00001f04 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    1f04:	2800      	cmp	r0, #0
    1f06:	d006      	beq.n	1f16 <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    1f08:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1f0a:	4b0c      	ldr	r3, [pc, #48]	; (1f3c <nwkFrameNext+0x38>)
    1f0c:	4a0c      	ldr	r2, [pc, #48]	; (1f40 <nwkFrameNext+0x3c>)
    1f0e:	189b      	adds	r3, r3, r2
    1f10:	4298      	cmp	r0, r3
    1f12:	d301      	bcc.n	1f18 <nwkFrameNext+0x14>
    1f14:	e00f      	b.n	1f36 <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    1f16:	4809      	ldr	r0, [pc, #36]	; (1f3c <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1f18:	7803      	ldrb	r3, [r0, #0]
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	d10c      	bne.n	1f38 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1f1e:	4a07      	ldr	r2, [pc, #28]	; (1f3c <nwkFrameNext+0x38>)
    1f20:	4b07      	ldr	r3, [pc, #28]	; (1f40 <nwkFrameNext+0x3c>)
    1f22:	18d2      	adds	r2, r2, r3
    1f24:	e002      	b.n	1f2c <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1f26:	7803      	ldrb	r3, [r0, #0]
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d105      	bne.n	1f38 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1f2c:	308d      	adds	r0, #141	; 0x8d
    1f2e:	4290      	cmp	r0, r2
    1f30:	d3f9      	bcc.n	1f26 <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    1f32:	2000      	movs	r0, #0
    1f34:	e000      	b.n	1f38 <nwkFrameNext+0x34>
    1f36:	2000      	movs	r0, #0
}
    1f38:	4770      	bx	lr
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	200000c8 	.word	0x200000c8
    1f40:	00000582 	.word	0x00000582

00001f44 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    1f44:	2200      	movs	r2, #0
    1f46:	2385      	movs	r3, #133	; 0x85
    1f48:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1f4a:	4b05      	ldr	r3, [pc, #20]	; (1f60 <nwkFrameCommandInit+0x1c>)
    1f4c:	791a      	ldrb	r2, [r3, #4]
    1f4e:	3201      	adds	r2, #1
    1f50:	b2d2      	uxtb	r2, r2
    1f52:	711a      	strb	r2, [r3, #4]
    1f54:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    1f56:	781a      	ldrb	r2, [r3, #0]
    1f58:	7342      	strb	r2, [r0, #13]
    1f5a:	785b      	ldrb	r3, [r3, #1]
    1f5c:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    1f5e:	4770      	bx	lr
    1f60:	20000ccc 	.word	0x20000ccc

00001f64 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    1f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f66:	4a09      	ldr	r2, [pc, #36]	; (1f8c <nwkRouteInit+0x28>)
    1f68:	3202      	adds	r2, #2
    1f6a:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1f6c:	2701      	movs	r7, #1
    1f6e:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    1f70:	4806      	ldr	r0, [pc, #24]	; (1f8c <nwkRouteInit+0x28>)
    1f72:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    1f74:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1f76:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    1f78:	00d9      	lsls	r1, r3, #3
    1f7a:	5c0c      	ldrb	r4, [r1, r0]
    1f7c:	43b4      	bics	r4, r6
    1f7e:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    1f80:	7115      	strb	r5, [r2, #4]
    1f82:	3301      	adds	r3, #1
    1f84:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1f86:	2b64      	cmp	r3, #100	; 0x64
    1f88:	d1f5      	bne.n	1f76 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    1f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f8c:	2000064c 	.word	0x2000064c

00001f90 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    1f90:	b570      	push	{r4, r5, r6, lr}
    1f92:	4a0b      	ldr	r2, [pc, #44]	; (1fc0 <NWK_RouteFindEntry+0x30>)
    1f94:	3202      	adds	r2, #2
    1f96:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    1f98:	4e09      	ldr	r6, [pc, #36]	; (1fc0 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1f9a:	8814      	ldrh	r4, [r2, #0]
    1f9c:	4284      	cmp	r4, r0
    1f9e:	d109      	bne.n	1fb4 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    1fa0:	00dc      	lsls	r4, r3, #3
    1fa2:	5da4      	ldrb	r4, [r4, r6]
    1fa4:	07a4      	lsls	r4, r4, #30
    1fa6:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1fa8:	428c      	cmp	r4, r1
    1faa:	d103      	bne.n	1fb4 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    1fac:	00dd      	lsls	r5, r3, #3
    1fae:	4804      	ldr	r0, [pc, #16]	; (1fc0 <NWK_RouteFindEntry+0x30>)
    1fb0:	1940      	adds	r0, r0, r5
    1fb2:	e004      	b.n	1fbe <NWK_RouteFindEntry+0x2e>
    1fb4:	3301      	adds	r3, #1
    1fb6:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1fb8:	2b64      	cmp	r3, #100	; 0x64
    1fba:	d1ee      	bne.n	1f9a <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    1fbc:	2000      	movs	r0, #0
}
    1fbe:	bd70      	pop	{r4, r5, r6, pc}
    1fc0:	2000064c 	.word	0x2000064c

00001fc4 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    1fc4:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    1fc6:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    1fc8:	4810      	ldr	r0, [pc, #64]	; (200c <STACK_SIZE+0xc>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    1fca:	24c8      	movs	r4, #200	; 0xc8
    1fcc:	00a4      	lsls	r4, r4, #2
    1fce:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    1fd0:	7803      	ldrb	r3, [r0, #0]
    1fd2:	07dc      	lsls	r4, r3, #31
    1fd4:	d40b      	bmi.n	1fee <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    1fd6:	7983      	ldrb	r3, [r0, #6]
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d00c      	beq.n	1ff6 <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    1fdc:	2a00      	cmp	r2, #0
    1fde:	d003      	beq.n	1fe8 <NWK_RouteNewEntry+0x24>
    1fe0:	7994      	ldrb	r4, [r2, #6]
    1fe2:	429c      	cmp	r4, r3
    1fe4:	d802      	bhi.n	1fec <NWK_RouteNewEntry+0x28>
    1fe6:	e002      	b.n	1fee <NWK_RouteNewEntry+0x2a>
    1fe8:	1c02      	adds	r2, r0, #0
    1fea:	e000      	b.n	1fee <NWK_RouteNewEntry+0x2a>
    1fec:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    1fee:	3008      	adds	r0, #8
    1ff0:	4288      	cmp	r0, r1
    1ff2:	d1ed      	bne.n	1fd0 <NWK_RouteNewEntry+0xc>
    1ff4:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    1ff6:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1ff8:	2202      	movs	r2, #2
    1ffa:	4393      	bics	r3, r2
    1ffc:	220f      	movs	r2, #15
    1ffe:	4013      	ands	r3, r2
    2000:	2230      	movs	r2, #48	; 0x30
    2002:	4313      	orrs	r3, r2
    2004:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2006:	2380      	movs	r3, #128	; 0x80
    2008:	7183      	strb	r3, [r0, #6]

	return entry;
}
    200a:	bd10      	pop	{r4, pc}
    200c:	2000064c 	.word	0x2000064c

00002010 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2010:	7803      	ldrb	r3, [r0, #0]
    2012:	07da      	lsls	r2, r3, #31
    2014:	d404      	bmi.n	2020 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2016:	2301      	movs	r3, #1
    2018:	425b      	negs	r3, r3
    201a:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    201c:	2300      	movs	r3, #0
    201e:	7183      	strb	r3, [r0, #6]
}
    2020:	4770      	bx	lr
    2022:	46c0      	nop			; (mov r8, r8)

00002024 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2024:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2026:	4b04      	ldr	r3, [pc, #16]	; (2038 <NWK_RouteNextHop+0x14>)
    2028:	4798      	blx	r3
	if (entry) {
    202a:	2800      	cmp	r0, #0
    202c:	d001      	beq.n	2032 <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    202e:	8880      	ldrh	r0, [r0, #4]
    2030:	e000      	b.n	2034 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    2032:	4802      	ldr	r0, [pc, #8]	; (203c <NWK_RouteNextHop+0x18>)
}
    2034:	bd08      	pop	{r3, pc}
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	00001f91 	.word	0x00001f91
    203c:	0000ffff 	.word	0x0000ffff

00002040 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop,
		uint8_t lqi)
{
    2040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2042:	1c06      	adds	r6, r0, #0
    2044:	1c0d      	adds	r5, r1, #0
    2046:	1c14      	adds	r4, r2, #0
    2048:	1c1f      	adds	r7, r3, #0
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    204a:	4b0c      	ldr	r3, [pc, #48]	; (207c <nwkRouteUpdateEntry+0x3c>)
    204c:	4798      	blx	r3

	if (NULL == entry) {
    204e:	2800      	cmp	r0, #0
    2050:	d101      	bne.n	2056 <nwkRouteUpdateEntry+0x16>
		entry = NWK_RouteNewEntry();
    2052:	4b0b      	ldr	r3, [pc, #44]	; (2080 <nwkRouteUpdateEntry+0x40>)
    2054:	4798      	blx	r3
	}

	entry->dstAddr = dst;
    2056:	8046      	strh	r6, [r0, #2]
	entry->nextHopAddr = nextHop;
    2058:	8084      	strh	r4, [r0, #4]
	entry->multicast = multicast;
    205a:	2301      	movs	r3, #1
    205c:	401d      	ands	r5, r3
    205e:	006b      	lsls	r3, r5, #1
    2060:	7805      	ldrb	r5, [r0, #0]
    2062:	2202      	movs	r2, #2
    2064:	4395      	bics	r5, r2
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2066:	431d      	orrs	r5, r3
    2068:	230f      	movs	r3, #15
    206a:	401d      	ands	r5, r3
    206c:	2330      	movs	r3, #48	; 0x30
    206e:	431d      	orrs	r5, r3
    2070:	7005      	strb	r5, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2072:	2380      	movs	r3, #128	; 0x80
    2074:	7183      	strb	r3, [r0, #6]
	entry->lqi = lqi;
    2076:	71c7      	strb	r7, [r0, #7]
}
    2078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	00001f91 	.word	0x00001f91
    2080:	00001fc5 	.word	0x00001fc5

00002084 <nwkRouteRemove>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2084:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2086:	4b03      	ldr	r3, [pc, #12]	; (2094 <nwkRouteRemove+0x10>)
    2088:	4798      	blx	r3
	if (entry) {
    208a:	2800      	cmp	r0, #0
    208c:	d001      	beq.n	2092 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    208e:	4b02      	ldr	r3, [pc, #8]	; (2098 <nwkRouteRemove+0x14>)
    2090:	4798      	blx	r3
	}
}
    2092:	bd08      	pop	{r3, pc}
    2094:	00001f91 	.word	0x00001f91
    2098:	00002011 	.word	0x00002011

0000209c <nwkRouteFrameReceived>:

	entry->lqi = frame->rx.lqi;
#else
	(void)frame;
#endif
}
    209c:	4770      	bx	lr
    209e:	46c0      	nop			; (mov r8, r8)

000020a0 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    20a0:	b510      	push	{r4, lr}
    20a2:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    20a4:	7bc3      	ldrb	r3, [r0, #15]
    20a6:	7c00      	ldrb	r0, [r0, #16]
    20a8:	0200      	lsls	r0, r0, #8
    20aa:	4318      	orrs	r0, r3
    20ac:	4b1b      	ldr	r3, [pc, #108]	; (211c <nwkRouteFrameSent+0x7c>)
    20ae:	4298      	cmp	r0, r3
    20b0:	d032      	beq.n	2118 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    20b2:	7ae1      	ldrb	r1, [r4, #11]
    20b4:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    20b6:	0fc9      	lsrs	r1, r1, #31
    20b8:	4b19      	ldr	r3, [pc, #100]	; (2120 <nwkRouteFrameSent+0x80>)
    20ba:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    20bc:	2800      	cmp	r0, #0
    20be:	d02b      	beq.n	2118 <nwkRouteFrameSent+0x78>
    20c0:	7803      	ldrb	r3, [r0, #0]
    20c2:	07da      	lsls	r2, r3, #31
    20c4:	d428      	bmi.n	2118 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    20c6:	2385      	movs	r3, #133	; 0x85
    20c8:	5ce3      	ldrb	r3, [r4, r3]
    20ca:	2b00      	cmp	r3, #0
    20cc:	d117      	bne.n	20fe <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    20ce:	7803      	ldrb	r3, [r0, #0]
    20d0:	220f      	movs	r2, #15
    20d2:	4013      	ands	r3, r2
    20d4:	2230      	movs	r2, #48	; 0x30
    20d6:	4313      	orrs	r3, r2
    20d8:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    20da:	7983      	ldrb	r3, [r0, #6]
    20dc:	3301      	adds	r3, #1
    20de:	b2db      	uxtb	r3, r3
    20e0:	7183      	strb	r3, [r0, #6]
    20e2:	2bff      	cmp	r3, #255	; 0xff
    20e4:	d118      	bne.n	2118 <nwkRouteFrameSent+0x78>
    20e6:	490f      	ldr	r1, [pc, #60]	; (2124 <nwkRouteFrameSent+0x84>)
    20e8:	1d8b      	adds	r3, r1, #6
    20ea:	4a0f      	ldr	r2, [pc, #60]	; (2128 <nwkRouteFrameSent+0x88>)
    20ec:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    20ee:	781a      	ldrb	r2, [r3, #0]
    20f0:	0852      	lsrs	r2, r2, #1
    20f2:	3201      	adds	r2, #1
    20f4:	701a      	strb	r2, [r3, #0]
    20f6:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    20f8:	428b      	cmp	r3, r1
    20fa:	d1f8      	bne.n	20ee <nwkRouteFrameSent+0x4e>
    20fc:	e00c      	b.n	2118 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    20fe:	7802      	ldrb	r2, [r0, #0]
    2100:	0913      	lsrs	r3, r2, #4
    2102:	330f      	adds	r3, #15
    2104:	210f      	movs	r1, #15
    2106:	400b      	ands	r3, r1
    2108:	011c      	lsls	r4, r3, #4
    210a:	400a      	ands	r2, r1
    210c:	4322      	orrs	r2, r4
    210e:	7002      	strb	r2, [r0, #0]
    2110:	2b00      	cmp	r3, #0
    2112:	d101      	bne.n	2118 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    2114:	4b05      	ldr	r3, [pc, #20]	; (212c <nwkRouteFrameSent+0x8c>)
    2116:	4798      	blx	r3
		}
	}
}
    2118:	bd10      	pop	{r4, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	0000ffff 	.word	0x0000ffff
    2120:	00001f91 	.word	0x00001f91
    2124:	2000064c 	.word	0x2000064c
    2128:	00000326 	.word	0x00000326
    212c:	00002011 	.word	0x00002011

00002130 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    2130:	b538      	push	{r3, r4, r5, lr}
    2132:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    2134:	7bc2      	ldrb	r2, [r0, #15]
    2136:	7c00      	ldrb	r0, [r0, #16]
    2138:	0200      	lsls	r0, r0, #8
    213a:	4310      	orrs	r0, r2
    213c:	4b0e      	ldr	r3, [pc, #56]	; (2178 <nwkRoutePrepareTx+0x48>)
    213e:	4298      	cmp	r0, r3
    2140:	d104      	bne.n	214c <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    2142:	2301      	movs	r3, #1
    2144:	425b      	negs	r3, r3
    2146:	71e3      	strb	r3, [r4, #7]
    2148:	7223      	strb	r3, [r4, #8]
    214a:	e014      	b.n	2176 <nwkRoutePrepareTx+0x46>
	} else if (header->nwkFcf.linkLocal) {
    214c:	7ae3      	ldrb	r3, [r4, #11]
    214e:	075a      	lsls	r2, r3, #29
    2150:	d503      	bpl.n	215a <nwkRoutePrepareTx+0x2a>
		header->macDstAddr = header->nwkDstAddr;
    2152:	71e0      	strb	r0, [r4, #7]
    2154:	0a00      	lsrs	r0, r0, #8
    2156:	7220      	strb	r0, [r4, #8]
    2158:	e00d      	b.n	2176 <nwkRoutePrepareTx+0x46>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    215a:	7ae1      	ldrb	r1, [r4, #11]
    215c:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    215e:	0fc9      	lsrs	r1, r1, #31
    2160:	4b06      	ldr	r3, [pc, #24]	; (217c <nwkRoutePrepareTx+0x4c>)
    2162:	4798      	blx	r3
    2164:	71e0      	strb	r0, [r4, #7]
    2166:	0a03      	lsrs	r3, r0, #8
    2168:	7223      	strb	r3, [r4, #8]
				header->nwkFcf.multicast);

  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
    216a:	4b03      	ldr	r3, [pc, #12]	; (2178 <nwkRoutePrepareTx+0x48>)
    216c:	4298      	cmp	r0, r3
    216e:	d102      	bne.n	2176 <nwkRoutePrepareTx+0x46>
			nwkRouteDiscoveryRequest(frame);
    2170:	1c20      	adds	r0, r4, #0
    2172:	4b03      	ldr	r3, [pc, #12]	; (2180 <nwkRoutePrepareTx+0x50>)
    2174:	4798      	blx	r3
		}

  #endif
	}
}
    2176:	bd38      	pop	{r3, r4, r5, pc}
    2178:	0000ffff 	.word	0x0000ffff
    217c:	00002025 	.word	0x00002025
    2180:	0000250d 	.word	0x0000250d

00002184 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    2184:	b5f0      	push	{r4, r5, r6, r7, lr}
    2186:	4647      	mov	r7, r8
    2188:	b480      	push	{r7}
    218a:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    218c:	7bc2      	ldrb	r2, [r0, #15]
    218e:	7c06      	ldrb	r6, [r0, #16]
    2190:	0236      	lsls	r6, r6, #8
    2192:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    2194:	7ac7      	ldrb	r7, [r0, #11]
    2196:	073f      	lsls	r7, r7, #28
    2198:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    219a:	b2f9      	uxtb	r1, r7
    219c:	1c30      	adds	r0, r6, #0
    219e:	4b28      	ldr	r3, [pc, #160]	; (2240 <nwkRouteFrame+0xbc>)
    21a0:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    21a2:	4b28      	ldr	r3, [pc, #160]	; (2244 <nwkRouteFrame+0xc0>)
    21a4:	4298      	cmp	r0, r3
    21a6:	d00f      	beq.n	21c8 <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    21a8:	2200      	movs	r2, #0
    21aa:	2389      	movs	r3, #137	; 0x89
    21ac:	54e2      	strb	r2, [r4, r3]
    21ae:	238a      	movs	r3, #138	; 0x8a
    21b0:	54e2      	strb	r2, [r4, r3]
    21b2:	238b      	movs	r3, #139	; 0x8b
    21b4:	54e2      	strb	r2, [r4, r3]
    21b6:	238c      	movs	r3, #140	; 0x8c
    21b8:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    21ba:	2202      	movs	r2, #2
    21bc:	2388      	movs	r3, #136	; 0x88
    21be:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    21c0:	1c20      	adds	r0, r4, #0
    21c2:	4b21      	ldr	r3, [pc, #132]	; (2248 <nwkRouteFrame+0xc4>)
    21c4:	4798      	blx	r3
    21c6:	e038      	b.n	223a <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    21c8:	7b62      	ldrb	r2, [r4, #13]
    21ca:	7ba3      	ldrb	r3, [r4, #14]
    21cc:	021b      	lsls	r3, r3, #8
    21ce:	4313      	orrs	r3, r2
    21d0:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    21d2:	4b1e      	ldr	r3, [pc, #120]	; (224c <nwkRouteFrame+0xc8>)
    21d4:	4798      	blx	r3
    21d6:	1e05      	subs	r5, r0, #0
    21d8:	d02c      	beq.n	2234 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    21da:	4b1d      	ldr	r3, [pc, #116]	; (2250 <nwkRouteFrame+0xcc>)
    21dc:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    21de:	786b      	ldrb	r3, [r5, #1]
    21e0:	3306      	adds	r3, #6
    21e2:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    21e4:	2200      	movs	r2, #0
    21e6:	2389      	movs	r3, #137	; 0x89
    21e8:	54ea      	strb	r2, [r5, r3]
    21ea:	238a      	movs	r3, #138	; 0x8a
    21ec:	54ea      	strb	r2, [r5, r3]
    21ee:	238b      	movs	r3, #139	; 0x8b
    21f0:	54ea      	strb	r2, [r5, r3]
    21f2:	238c      	movs	r3, #140	; 0x8c
    21f4:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    21f6:	21ff      	movs	r1, #255	; 0xff
    21f8:	4643      	mov	r3, r8
    21fa:	4019      	ands	r1, r3
    21fc:	73e9      	strb	r1, [r5, #15]
    21fe:	0a1a      	lsrs	r2, r3, #8
    2200:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    2202:	2381      	movs	r3, #129	; 0x81
    2204:	5ce8      	ldrb	r0, [r5, r3]
    2206:	2382      	movs	r3, #130	; 0x82
    2208:	5ceb      	ldrb	r3, [r5, r3]
    220a:	021b      	lsls	r3, r3, #8
    220c:	4303      	orrs	r3, r0
    220e:	2083      	movs	r0, #131	; 0x83
    2210:	5c28      	ldrb	r0, [r5, r0]
    2212:	0400      	lsls	r0, r0, #16
    2214:	4303      	orrs	r3, r0
    2216:	2084      	movs	r0, #132	; 0x84
    2218:	5c28      	ldrb	r0, [r5, r0]
    221a:	0600      	lsls	r0, r0, #24
    221c:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    221e:	2001      	movs	r0, #1
    2220:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    2222:	7059      	strb	r1, [r3, #1]
    2224:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    2226:	70de      	strb	r6, [r3, #3]
    2228:	0a36      	lsrs	r6, r6, #8
    222a:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    222c:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    222e:	1c28      	adds	r0, r5, #0
    2230:	4b05      	ldr	r3, [pc, #20]	; (2248 <nwkRouteFrame+0xc4>)
    2232:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    2234:	1c20      	adds	r0, r4, #0
    2236:	4b07      	ldr	r3, [pc, #28]	; (2254 <nwkRouteFrame+0xd0>)
    2238:	4798      	blx	r3
	}
}
    223a:	bc04      	pop	{r2}
    223c:	4690      	mov	r8, r2
    223e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2240:	00002025 	.word	0x00002025
    2244:	0000ffff 	.word	0x0000ffff
    2248:	00002f91 	.word	0x00002f91
    224c:	00001e81 	.word	0x00001e81
    2250:	00001f45 	.word	0x00001f45
    2254:	00001ef1 	.word	0x00001ef1

00002258 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2258:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    225a:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    225c:	7b03      	ldrb	r3, [r0, #12]
		return false;
    225e:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2260:	2b06      	cmp	r3, #6
    2262:	d107      	bne.n	2274 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2264:	78d3      	ldrb	r3, [r2, #3]
    2266:	7910      	ldrb	r0, [r2, #4]
    2268:	0200      	lsls	r0, r0, #8
    226a:	4318      	orrs	r0, r3
    226c:	7951      	ldrb	r1, [r2, #5]
    226e:	4b02      	ldr	r3, [pc, #8]	; (2278 <nwkRouteErrorReceived+0x20>)
    2270:	4798      	blx	r3

	return true;
    2272:	2001      	movs	r0, #1
}
    2274:	bd08      	pop	{r3, pc}
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	00002085 	.word	0x00002085

0000227c <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
    227c:	b5f0      	push	{r4, r5, r6, r7, lr}
    227e:	4b0d      	ldr	r3, [pc, #52]	; (22b4 <nwkRouteDiscoveryFindEntry+0x38>)
    2280:	2400      	movs	r4, #0
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    2282:	895d      	ldrh	r5, [r3, #10]
    2284:	2d00      	cmp	r5, #0
    2286:	d00e      	beq.n	22a6 <nwkRouteDiscoveryFindEntry+0x2a>
    2288:	881d      	ldrh	r5, [r3, #0]
    228a:	4285      	cmp	r5, r0
    228c:	d10b      	bne.n	22a6 <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    228e:	885d      	ldrh	r5, [r3, #2]
    2290:	428d      	cmp	r5, r1
    2292:	d108      	bne.n	22a6 <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    2294:	791d      	ldrb	r5, [r3, #4]
    2296:	4295      	cmp	r5, r2
    2298:	d105      	bne.n	22a6 <nwkRouteDiscoveryFindEntry+0x2a>
				nwkRouteDiscoveryTable[i].multicast ==
				multicast) {
			return &nwkRouteDiscoveryTable[i];
    229a:	0063      	lsls	r3, r4, #1
    229c:	191f      	adds	r7, r3, r4
    229e:	00bf      	lsls	r7, r7, #2
    22a0:	4804      	ldr	r0, [pc, #16]	; (22b4 <nwkRouteDiscoveryFindEntry+0x38>)
    22a2:	19c0      	adds	r0, r0, r7
    22a4:	e004      	b.n	22b0 <nwkRouteDiscoveryFindEntry+0x34>
    22a6:	3401      	adds	r4, #1
    22a8:	330c      	adds	r3, #12
/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    22aa:	2c05      	cmp	r4, #5
    22ac:	d1e9      	bne.n	2282 <nwkRouteDiscoveryFindEntry+0x6>
				multicast) {
			return &nwkRouteDiscoveryTable[i];
		}
	}

	return NULL;
    22ae:	2000      	movs	r0, #0
}
    22b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	20000980 	.word	0x20000980

000022b8 <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    22b8:	b510      	push	{r4, lr}
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    22ba:	4b11      	ldr	r3, [pc, #68]	; (2300 <nwkRouteDiscoveryNewEntry+0x48>)
    22bc:	895b      	ldrh	r3, [r3, #10]
    22be:	2b00      	cmp	r3, #0
    22c0:	d007      	beq.n	22d2 <nwkRouteDiscoveryNewEntry+0x1a>
    22c2:	4a0f      	ldr	r2, [pc, #60]	; (2300 <nwkRouteDiscoveryNewEntry+0x48>)
    22c4:	3216      	adds	r2, #22
    22c6:	2301      	movs	r3, #1
    22c8:	1c18      	adds	r0, r3, #0
    22ca:	8811      	ldrh	r1, [r2, #0]
    22cc:	2900      	cmp	r1, #0
    22ce:	d110      	bne.n	22f2 <nwkRouteDiscoveryNewEntry+0x3a>
    22d0:	e000      	b.n	22d4 <nwkRouteDiscoveryNewEntry+0x1c>
    22d2:	2000      	movs	r0, #0
			entry = &nwkRouteDiscoveryTable[i];
    22d4:	0044      	lsls	r4, r0, #1
    22d6:	1820      	adds	r0, r4, r0
    22d8:	0080      	lsls	r0, r0, #2
    22da:	4c09      	ldr	r4, [pc, #36]	; (2300 <nwkRouteDiscoveryNewEntry+0x48>)
    22dc:	1824      	adds	r4, r4, r0
			break;
		}
	}

	if (entry) {
		entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    22de:	2300      	movs	r3, #0
    22e0:	7223      	strb	r3, [r4, #8]
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    22e2:	7263      	strb	r3, [r4, #9]
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    22e4:	23fa      	movs	r3, #250	; 0xfa
    22e6:	009b      	lsls	r3, r3, #2
    22e8:	8163      	strh	r3, [r4, #10]
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
    22ea:	4806      	ldr	r0, [pc, #24]	; (2304 <nwkRouteDiscoveryNewEntry+0x4c>)
    22ec:	4b06      	ldr	r3, [pc, #24]	; (2308 <nwkRouteDiscoveryNewEntry+0x50>)
    22ee:	4798      	blx	r3
    22f0:	e004      	b.n	22fc <nwkRouteDiscoveryNewEntry+0x44>
    22f2:	3301      	adds	r3, #1
    22f4:	320c      	adds	r2, #12
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    22f6:	2b05      	cmp	r3, #5
    22f8:	d1e6      	bne.n	22c8 <nwkRouteDiscoveryNewEntry+0x10>

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;
    22fa:	2400      	movs	r4, #0
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
	}

	return entry;
}
    22fc:	1c20      	adds	r0, r4, #0
    22fe:	bd10      	pop	{r4, pc}
    2300:	20000980 	.word	0x20000980
    2304:	2000096c 	.word	0x2000096c
    2308:	00003699 	.word	0x00003699

0000230c <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    230e:	465f      	mov	r7, fp
    2310:	4656      	mov	r6, sl
    2312:	464d      	mov	r5, r9
    2314:	4644      	mov	r4, r8
    2316:	b4f0      	push	{r4, r5, r6, r7}
    2318:	4683      	mov	fp, r0
    231a:	4b26      	ldr	r3, [pc, #152]	; (23b4 <nwkRouteDiscoveryTimerHandler+0xa8>)
    231c:	1c1c      	adds	r4, r3, #0
    231e:	340a      	adds	r4, #10
    2320:	1c1d      	adds	r5, r3, #0
    2322:	333c      	adds	r3, #60	; 0x3c
    2324:	4698      	mov	r8, r3
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;
    2326:	2700      	movs	r7, #0
    2328:	1c22      	adds	r2, r4, #0

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		entry = &nwkRouteDiscoveryTable[i];

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
    232a:	8823      	ldrh	r3, [r4, #0]
    232c:	2b64      	cmp	r3, #100	; 0x64
    232e:	d903      	bls.n	2338 <nwkRouteDiscoveryTimerHandler+0x2c>
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    2330:	3b64      	subs	r3, #100	; 0x64
    2332:	8023      	strh	r3, [r4, #0]
			restart = true;
    2334:	2701      	movs	r7, #1
    2336:	e02d      	b.n	2394 <nwkRouteDiscoveryTimerHandler+0x88>
		} else {
			entry->timeout = 0;
    2338:	2300      	movs	r3, #0
    233a:	8023      	strh	r3, [r4, #0]
    233c:	46aa      	mov	sl, r5

			if (entry->srcAddr == nwkIb.addr) {
    233e:	8829      	ldrh	r1, [r5, #0]
    2340:	481d      	ldr	r0, [pc, #116]	; (23b8 <nwkRouteDiscoveryTimerHandler+0xac>)
    2342:	8803      	ldrh	r3, [r0, #0]
    2344:	4299      	cmp	r1, r3
    2346:	d125      	bne.n	2394 <nwkRouteDiscoveryTimerHandler+0x88>
    2348:	3a01      	subs	r2, #1
				nwkRouteDiscoveryDone(entry,
						entry->reverseLinkQuality >
    234a:	7812      	ldrb	r2, [r2, #0]
    234c:	4691      	mov	r9, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;
    234e:	2600      	movs	r6, #0
    2350:	e01b      	b.n	238a <nwkRouteDiscoveryTimerHandler+0x7e>

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
    2352:	7833      	ldrb	r3, [r6, #0]
    2354:	2b40      	cmp	r3, #64	; 0x40
    2356:	d118      	bne.n	238a <nwkRouteDiscoveryTimerHandler+0x7e>
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    2358:	7bf1      	ldrb	r1, [r6, #15]
    235a:	7c33      	ldrb	r3, [r6, #16]
    235c:	021b      	lsls	r3, r3, #8
    235e:	4650      	mov	r0, sl
    2360:	8842      	ldrh	r2, [r0, #2]
    2362:	430b      	orrs	r3, r1
    2364:	429a      	cmp	r2, r3
    2366:	d110      	bne.n	238a <nwkRouteDiscoveryTimerHandler+0x7e>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
    2368:	7af3      	ldrb	r3, [r6, #11]
    236a:	071b      	lsls	r3, r3, #28
	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    236c:	7902      	ldrb	r2, [r0, #4]
    236e:	0fdb      	lsrs	r3, r3, #31
    2370:	429a      	cmp	r2, r3
    2372:	d10a      	bne.n	238a <nwkRouteDiscoveryTimerHandler+0x7e>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
			continue;
		}

		if (status) {
    2374:	4649      	mov	r1, r9
    2376:	2900      	cmp	r1, #0
    2378:	d003      	beq.n	2382 <nwkRouteDiscoveryTimerHandler+0x76>
			nwkTxFrame(frame);
    237a:	1c30      	adds	r0, r6, #0
    237c:	4b0f      	ldr	r3, [pc, #60]	; (23bc <nwkRouteDiscoveryTimerHandler+0xb0>)
    237e:	4798      	blx	r3
    2380:	e003      	b.n	238a <nwkRouteDiscoveryTimerHandler+0x7e>
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    2382:	1c30      	adds	r0, r6, #0
    2384:	2111      	movs	r1, #17
    2386:	4b0e      	ldr	r3, [pc, #56]	; (23c0 <nwkRouteDiscoveryTimerHandler+0xb4>)
    2388:	4798      	blx	r3
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    238a:	1c30      	adds	r0, r6, #0
    238c:	490d      	ldr	r1, [pc, #52]	; (23c4 <nwkRouteDiscoveryTimerHandler+0xb8>)
    238e:	4788      	blx	r1
    2390:	1e06      	subs	r6, r0, #0
    2392:	d1de      	bne.n	2352 <nwkRouteDiscoveryTimerHandler+0x46>
    2394:	340c      	adds	r4, #12
    2396:	350c      	adds	r5, #12
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    2398:	4545      	cmp	r5, r8
    239a:	d1c5      	bne.n	2328 <nwkRouteDiscoveryTimerHandler+0x1c>
						0);
			}
		}
	}

	if (restart) {
    239c:	2f00      	cmp	r7, #0
    239e:	d002      	beq.n	23a6 <nwkRouteDiscoveryTimerHandler+0x9a>
		SYS_TimerStart(timer);
    23a0:	4658      	mov	r0, fp
    23a2:	4b09      	ldr	r3, [pc, #36]	; (23c8 <nwkRouteDiscoveryTimerHandler+0xbc>)
    23a4:	4798      	blx	r3
	}
}
    23a6:	bc3c      	pop	{r2, r3, r4, r5}
    23a8:	4690      	mov	r8, r2
    23aa:	4699      	mov	r9, r3
    23ac:	46a2      	mov	sl, r4
    23ae:	46ab      	mov	fp, r5
    23b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	20000980 	.word	0x20000980
    23b8:	20000ccc 	.word	0x20000ccc
    23bc:	00002f91 	.word	0x00002f91
    23c0:	00003119 	.word	0x00003119
    23c4:	00001f05 	.word	0x00001f05
    23c8:	00003699 	.word	0x00003699

000023cc <nwkRouteDiscoverySendRequest>:

/*************************************************************************//**
*****************************************************************************/
static bool nwkRouteDiscoverySendRequest(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t lq)
{
    23cc:	b570      	push	{r4, r5, r6, lr}
    23ce:	1c05      	adds	r5, r0, #0
    23d0:	1c0e      	adds	r6, r1, #0
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    23d2:	4b1e      	ldr	r3, [pc, #120]	; (244c <nwkRouteDiscoverySendRequest+0x80>)
    23d4:	4798      	blx	r3
    23d6:	1e04      	subs	r4, r0, #0
    23d8:	d036      	beq.n	2448 <nwkRouteDiscoverySendRequest+0x7c>
		return false;
	}

	nwkFrameCommandInit(req);
    23da:	4b1d      	ldr	r3, [pc, #116]	; (2450 <nwkRouteDiscoverySendRequest+0x84>)
    23dc:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteRequest_t);
    23de:	7863      	ldrb	r3, [r4, #1]
    23e0:	3307      	adds	r3, #7
    23e2:	7063      	strb	r3, [r4, #1]
	req->tx.confirm = NULL;
    23e4:	2200      	movs	r2, #0
    23e6:	2389      	movs	r3, #137	; 0x89
    23e8:	54e2      	strb	r2, [r4, r3]
    23ea:	238a      	movs	r3, #138	; 0x8a
    23ec:	54e2      	strb	r2, [r4, r3]
    23ee:	238b      	movs	r3, #139	; 0x8b
    23f0:	54e2      	strb	r2, [r4, r3]
    23f2:	238c      	movs	r3, #140	; 0x8c
    23f4:	54e2      	strb	r2, [r4, r3]

	req->header.nwkFcf.linkLocal = 1;
    23f6:	7ae2      	ldrb	r2, [r4, #11]
    23f8:	2304      	movs	r3, #4
    23fa:	4313      	orrs	r3, r2
    23fc:	72e3      	strb	r3, [r4, #11]
	req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    23fe:	2301      	movs	r3, #1
    2400:	425b      	negs	r3, r3
    2402:	73e3      	strb	r3, [r4, #15]
    2404:	7423      	strb	r3, [r4, #16]

	command = (NwkCommandRouteRequest_t *)req->payload;
    2406:	2381      	movs	r3, #129	; 0x81
    2408:	5ce2      	ldrb	r2, [r4, r3]
    240a:	2382      	movs	r3, #130	; 0x82
    240c:	5ce3      	ldrb	r3, [r4, r3]
    240e:	021b      	lsls	r3, r3, #8
    2410:	4313      	orrs	r3, r2
    2412:	2283      	movs	r2, #131	; 0x83
    2414:	5ca2      	ldrb	r2, [r4, r2]
    2416:	0412      	lsls	r2, r2, #16
    2418:	4313      	orrs	r3, r2
    241a:	2284      	movs	r2, #132	; 0x84
    241c:	5ca2      	ldrb	r2, [r4, r2]
    241e:	0612      	lsls	r2, r2, #24
    2420:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_REQUEST;
    2422:	2202      	movs	r2, #2
    2424:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    2426:	882a      	ldrh	r2, [r5, #0]
    2428:	705a      	strb	r2, [r3, #1]
    242a:	0a12      	lsrs	r2, r2, #8
    242c:	709a      	strb	r2, [r3, #2]
	command->dstAddr = entry->dstAddr;
    242e:	886a      	ldrh	r2, [r5, #2]
    2430:	78a9      	ldrb	r1, [r5, #2]
    2432:	70d9      	strb	r1, [r3, #3]
    2434:	0a12      	lsrs	r2, r2, #8
    2436:	711a      	strb	r2, [r3, #4]
	command->multicast = entry->multicast;
    2438:	792a      	ldrb	r2, [r5, #4]
    243a:	715a      	strb	r2, [r3, #5]
	command->linkQuality = lq;
    243c:	719e      	strb	r6, [r3, #6]

	nwkTxFrame(req);
    243e:	1c20      	adds	r0, r4, #0
    2440:	4b04      	ldr	r3, [pc, #16]	; (2454 <nwkRouteDiscoverySendRequest+0x88>)
    2442:	4798      	blx	r3

	return true;
    2444:	2001      	movs	r0, #1
    2446:	e000      	b.n	244a <nwkRouteDiscoverySendRequest+0x7e>
{
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
		return false;
    2448:	2000      	movs	r0, #0
	command->linkQuality = lq;

	nwkTxFrame(req);

	return true;
}
    244a:	bd70      	pop	{r4, r5, r6, pc}
    244c:	00001e81 	.word	0x00001e81
    2450:	00001f45 	.word	0x00001f45
    2454:	00002f91 	.word	0x00002f91

00002458 <nwkRouteDiscoverySendReply>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoverySendReply(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t flq, uint8_t rlq)
{
    2458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    245a:	1c05      	adds	r5, r0, #0
    245c:	1c0f      	adds	r7, r1, #0
    245e:	1c16      	adds	r6, r2, #0
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    2460:	4b1c      	ldr	r3, [pc, #112]	; (24d4 <nwkRouteDiscoverySendReply+0x7c>)
    2462:	4798      	blx	r3
    2464:	1e04      	subs	r4, r0, #0
    2466:	d034      	beq.n	24d2 <nwkRouteDiscoverySendReply+0x7a>
		return;
	}

	nwkFrameCommandInit(req);
    2468:	4b1b      	ldr	r3, [pc, #108]	; (24d8 <nwkRouteDiscoverySendReply+0x80>)
    246a:	4798      	blx	r3

	req->size += sizeof(NwkCommandRouteReply_t);
    246c:	7863      	ldrb	r3, [r4, #1]
    246e:	3308      	adds	r3, #8
    2470:	7063      	strb	r3, [r4, #1]
	req->tx.confirm = NULL;
    2472:	2200      	movs	r2, #0
    2474:	2389      	movs	r3, #137	; 0x89
    2476:	54e2      	strb	r2, [r4, r3]
    2478:	238a      	movs	r3, #138	; 0x8a
    247a:	54e2      	strb	r2, [r4, r3]
    247c:	238b      	movs	r3, #139	; 0x8b
    247e:	54e2      	strb	r2, [r4, r3]
    2480:	238c      	movs	r3, #140	; 0x8c
    2482:	54e2      	strb	r2, [r4, r3]
	req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    2484:	2204      	movs	r2, #4
    2486:	2388      	movs	r3, #136	; 0x88
    2488:	54e2      	strb	r2, [r4, r3]

	req->header.nwkDstAddr = entry->senderAddr;
    248a:	88eb      	ldrh	r3, [r5, #6]
    248c:	73e3      	strb	r3, [r4, #15]
    248e:	0a1b      	lsrs	r3, r3, #8
    2490:	7423      	strb	r3, [r4, #16]

	command = (NwkCommandRouteReply_t *)req->payload;
    2492:	2381      	movs	r3, #129	; 0x81
    2494:	5ce2      	ldrb	r2, [r4, r3]
    2496:	2382      	movs	r3, #130	; 0x82
    2498:	5ce3      	ldrb	r3, [r4, r3]
    249a:	021b      	lsls	r3, r3, #8
    249c:	4313      	orrs	r3, r2
    249e:	2283      	movs	r2, #131	; 0x83
    24a0:	5ca2      	ldrb	r2, [r4, r2]
    24a2:	0412      	lsls	r2, r2, #16
    24a4:	4313      	orrs	r3, r2
    24a6:	2284      	movs	r2, #132	; 0x84
    24a8:	5ca2      	ldrb	r2, [r4, r2]
    24aa:	0612      	lsls	r2, r2, #24
    24ac:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ROUTE_REPLY;
    24ae:	2203      	movs	r2, #3
    24b0:	701a      	strb	r2, [r3, #0]
	command->srcAddr = entry->srcAddr;
    24b2:	8828      	ldrh	r0, [r5, #0]
    24b4:	7058      	strb	r0, [r3, #1]
    24b6:	0a00      	lsrs	r0, r0, #8
    24b8:	7098      	strb	r0, [r3, #2]
	command->dstAddr = entry->dstAddr;
    24ba:	886a      	ldrh	r2, [r5, #2]
    24bc:	78a9      	ldrb	r1, [r5, #2]
    24be:	70d9      	strb	r1, [r3, #3]
    24c0:	0a12      	lsrs	r2, r2, #8
    24c2:	711a      	strb	r2, [r3, #4]
	command->multicast = entry->multicast;
    24c4:	792a      	ldrb	r2, [r5, #4]
    24c6:	715a      	strb	r2, [r3, #5]
	command->forwardLinkQuality = flq;
    24c8:	719f      	strb	r7, [r3, #6]
	command->reverseLinkQuality = rlq;
    24ca:	71de      	strb	r6, [r3, #7]

	nwkTxFrame(req);
    24cc:	1c20      	adds	r0, r4, #0
    24ce:	4b03      	ldr	r3, [pc, #12]	; (24dc <nwkRouteDiscoverySendReply+0x84>)
    24d0:	4798      	blx	r3
}
    24d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24d4:	00001e81 	.word	0x00001e81
    24d8:	00001f45 	.word	0x00001f45
    24dc:	00002f91 	.word	0x00002f91

000024e0 <nwkRouteDiscoveryInit>:
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		nwkRouteDiscoveryTable[i].timeout = 0;
    24e0:	4b07      	ldr	r3, [pc, #28]	; (2500 <nwkRouteDiscoveryInit+0x20>)
    24e2:	2200      	movs	r2, #0
    24e4:	815a      	strh	r2, [r3, #10]
    24e6:	82da      	strh	r2, [r3, #22]
    24e8:	845a      	strh	r2, [r3, #34]	; 0x22
    24ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    24ec:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    24ee:	4b05      	ldr	r3, [pc, #20]	; (2504 <nwkRouteDiscoveryInit+0x24>)
    24f0:	2264      	movs	r2, #100	; 0x64
    24f2:	609a      	str	r2, [r3, #8]
	nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    24f4:	2200      	movs	r2, #0
    24f6:	731a      	strb	r2, [r3, #12]
	nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    24f8:	4a03      	ldr	r2, [pc, #12]	; (2508 <nwkRouteDiscoveryInit+0x28>)
    24fa:	611a      	str	r2, [r3, #16]
}
    24fc:	4770      	bx	lr
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	20000980 	.word	0x20000980
    2504:	2000096c 	.word	0x2000096c
    2508:	0000230d 	.word	0x0000230d

0000250c <nwkRouteDiscoveryRequest>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
    250c:	b510      	push	{r4, lr}
    250e:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    2510:	4b17      	ldr	r3, [pc, #92]	; (2570 <nwkRouteDiscoveryRequest+0x64>)
    2512:	8818      	ldrh	r0, [r3, #0]
    2514:	7be2      	ldrb	r2, [r4, #15]
    2516:	7c21      	ldrb	r1, [r4, #16]
    2518:	0209      	lsls	r1, r1, #8
    251a:	4311      	orrs	r1, r2
			header->nwkFcf.multicast);
    251c:	7ae2      	ldrb	r2, [r4, #11]
    251e:	0712      	lsls	r2, r2, #28
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    2520:	0fd2      	lsrs	r2, r2, #31
    2522:	4b14      	ldr	r3, [pc, #80]	; (2574 <nwkRouteDiscoveryRequest+0x68>)
    2524:	4798      	blx	r3
			header->nwkFcf.multicast);

	if (entry) {
    2526:	2800      	cmp	r0, #0
    2528:	d002      	beq.n	2530 <nwkRouteDiscoveryRequest+0x24>
		frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    252a:	2340      	movs	r3, #64	; 0x40
    252c:	7023      	strb	r3, [r4, #0]
		return;
    252e:	e01e      	b.n	256e <nwkRouteDiscoveryRequest+0x62>
	}

	entry = nwkRouteDiscoveryNewEntry();
    2530:	4b11      	ldr	r3, [pc, #68]	; (2578 <nwkRouteDiscoveryRequest+0x6c>)
    2532:	4798      	blx	r3

	if (entry) {
    2534:	2800      	cmp	r0, #0
    2536:	d016      	beq.n	2566 <nwkRouteDiscoveryRequest+0x5a>
		entry->srcAddr = nwkIb.addr;
    2538:	4b0d      	ldr	r3, [pc, #52]	; (2570 <nwkRouteDiscoveryRequest+0x64>)
    253a:	881b      	ldrh	r3, [r3, #0]
    253c:	8003      	strh	r3, [r0, #0]
		entry->dstAddr = header->nwkDstAddr;
    253e:	7be1      	ldrb	r1, [r4, #15]
    2540:	7c22      	ldrb	r2, [r4, #16]
    2542:	0212      	lsls	r2, r2, #8
    2544:	430a      	orrs	r2, r1
    2546:	8042      	strh	r2, [r0, #2]
		entry->multicast = header->nwkFcf.multicast;
    2548:	7ae3      	ldrb	r3, [r4, #11]
    254a:	071b      	lsls	r3, r3, #28
    254c:	0fdb      	lsrs	r3, r3, #31
    254e:	7103      	strb	r3, [r0, #4]
		entry->senderAddr = NWK_BROADCAST_ADDR;
    2550:	2301      	movs	r3, #1
    2552:	425b      	negs	r3, r3
    2554:	80c3      	strh	r3, [r0, #6]

		if (nwkRouteDiscoverySendRequest(entry,
    2556:	21ff      	movs	r1, #255	; 0xff
    2558:	4b08      	ldr	r3, [pc, #32]	; (257c <nwkRouteDiscoveryRequest+0x70>)
    255a:	4798      	blx	r3
    255c:	2800      	cmp	r0, #0
    255e:	d002      	beq.n	2566 <nwkRouteDiscoveryRequest+0x5a>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY)) {
			frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    2560:	2340      	movs	r3, #64	; 0x40
    2562:	7023      	strb	r3, [r4, #0]
			return;
    2564:	e003      	b.n	256e <nwkRouteDiscoveryRequest+0x62>
		}
	}

	nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    2566:	1c20      	adds	r0, r4, #0
    2568:	2111      	movs	r1, #17
    256a:	4b05      	ldr	r3, [pc, #20]	; (2580 <nwkRouteDiscoveryRequest+0x74>)
    256c:	4798      	blx	r3
}
    256e:	bd10      	pop	{r4, pc}
    2570:	20000ccc 	.word	0x20000ccc
    2574:	0000227d 	.word	0x0000227d
    2578:	000022b9 	.word	0x000022b9
    257c:	000023cd 	.word	0x000023cd
    2580:	00003119 	.word	0x00003119

00002584 <nwkRouteDiscoveryRequestReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
    2584:	b5f0      	push	{r4, r5, r6, r7, lr}
    2586:	4647      	mov	r7, r8
    2588:	b480      	push	{r7}
    258a:	1c05      	adds	r5, r0, #0
	NwkCommandRouteRequest_t *command
    258c:	6884      	ldr	r4, [r0, #8]
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    258e:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2590:	2000      	movs	r0, #0
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    2592:	2b07      	cmp	r3, #7
    2594:	d169      	bne.n	266a <nwkRouteDiscoveryRequestReceived+0xe6>
		reply = true;
	}

#endif

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
    2596:	7962      	ldrb	r2, [r4, #5]
    2598:	2a00      	cmp	r2, #0
    259a:	d15b      	bne.n	2654 <nwkRouteDiscoveryRequestReceived+0xd0>
    259c:	4b34      	ldr	r3, [pc, #208]	; (2670 <nwkRouteDiscoveryRequestReceived+0xec>)
    259e:	881b      	ldrh	r3, [r3, #0]
    25a0:	78e0      	ldrb	r0, [r4, #3]
    25a2:	7921      	ldrb	r1, [r4, #4]
    25a4:	0209      	lsls	r1, r1, #8
    25a6:	4301      	orrs	r1, r0
    25a8:	1ac9      	subs	r1, r1, r3
    25aa:	4248      	negs	r0, r1
    25ac:	4141      	adcs	r1, r0
    25ae:	b2c9      	uxtb	r1, r1
    25b0:	4688      	mov	r8, r1
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    25b2:	7861      	ldrb	r1, [r4, #1]
    25b4:	78a0      	ldrb	r0, [r4, #2]
    25b6:	0200      	lsls	r0, r0, #8
    25b8:	4308      	orrs	r0, r1
    25ba:	4283      	cmp	r3, r0
    25bc:	d042      	beq.n	2644 <nwkRouteDiscoveryRequestReceived+0xc0>
		return true;
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    25be:	4641      	mov	r1, r8
    25c0:	2900      	cmp	r1, #0
    25c2:	d102      	bne.n	25ca <nwkRouteDiscoveryRequestReceived+0x46>
    25c4:	b21b      	sxth	r3, r3
    25c6:	2b00      	cmp	r3, #0
    25c8:	db3e      	blt.n	2648 <nwkRouteDiscoveryRequestReceived+0xc4>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    25ca:	79a3      	ldrb	r3, [r4, #6]
    25cc:	7b6f      	ldrb	r7, [r5, #13]
    25ce:	435f      	muls	r7, r3
    25d0:	0a3f      	lsrs	r7, r7, #8
		return true;
	}

	linkQuality = nwkRouteDiscoveryUpdateLq(command->linkQuality, ind->lqi);

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    25d2:	78e3      	ldrb	r3, [r4, #3]
    25d4:	7921      	ldrb	r1, [r4, #4]
    25d6:	0209      	lsls	r1, r1, #8
    25d8:	4319      	orrs	r1, r3
    25da:	4b26      	ldr	r3, [pc, #152]	; (2674 <nwkRouteDiscoveryRequestReceived+0xf0>)
    25dc:	4798      	blx	r3
    25de:	1e06      	subs	r6, r0, #0
			command->multicast);

	if (entry) {
    25e0:	d004      	beq.n	25ec <nwkRouteDiscoveryRequestReceived+0x68>
		if (linkQuality <= entry->forwardLinkQuality) {
    25e2:	7a03      	ldrb	r3, [r0, #8]
			return true;
    25e4:	2001      	movs	r0, #1

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
			command->multicast);

	if (entry) {
		if (linkQuality <= entry->forwardLinkQuality) {
    25e6:	42bb      	cmp	r3, r7
    25e8:	d304      	bcc.n	25f4 <nwkRouteDiscoveryRequestReceived+0x70>
    25ea:	e03e      	b.n	266a <nwkRouteDiscoveryRequestReceived+0xe6>
			return true;
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
    25ec:	4b22      	ldr	r3, [pc, #136]	; (2678 <nwkRouteDiscoveryRequestReceived+0xf4>)
    25ee:	4798      	blx	r3
    25f0:	1e06      	subs	r6, r0, #0
    25f2:	d02b      	beq.n	264c <nwkRouteDiscoveryRequestReceived+0xc8>
			return true;
		}
	}

	entry->srcAddr = command->srcAddr;
    25f4:	7862      	ldrb	r2, [r4, #1]
    25f6:	78a3      	ldrb	r3, [r4, #2]
    25f8:	021b      	lsls	r3, r3, #8
    25fa:	4313      	orrs	r3, r2
    25fc:	8033      	strh	r3, [r6, #0]
	entry->dstAddr = command->dstAddr;
    25fe:	78e2      	ldrb	r2, [r4, #3]
    2600:	7923      	ldrb	r3, [r4, #4]
    2602:	021b      	lsls	r3, r3, #8
    2604:	4313      	orrs	r3, r2
    2606:	8073      	strh	r3, [r6, #2]
	entry->multicast = command->multicast;
    2608:	7963      	ldrb	r3, [r4, #5]
    260a:	7133      	strb	r3, [r6, #4]
	entry->senderAddr = ind->srcAddr;
    260c:	882b      	ldrh	r3, [r5, #0]
    260e:	80f3      	strh	r3, [r6, #6]
	entry->forwardLinkQuality = linkQuality;
    2610:	7237      	strb	r7, [r6, #8]

	if (reply) {
    2612:	4643      	mov	r3, r8
    2614:	2b00      	cmp	r3, #0
    2616:	d00f      	beq.n	2638 <nwkRouteDiscoveryRequestReceived+0xb4>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
    2618:	7863      	ldrb	r3, [r4, #1]
    261a:	78a0      	ldrb	r0, [r4, #2]
    261c:	0200      	lsls	r0, r0, #8
    261e:	4318      	orrs	r0, r3
    2620:	882a      	ldrh	r2, [r5, #0]
    2622:	2100      	movs	r1, #0
    2624:	1c3b      	adds	r3, r7, #0
    2626:	4c15      	ldr	r4, [pc, #84]	; (267c <nwkRouteDiscoveryRequestReceived+0xf8>)
    2628:	47a0      	blx	r4
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
    262a:	1c30      	adds	r0, r6, #0
    262c:	1c39      	adds	r1, r7, #0
    262e:	22ff      	movs	r2, #255	; 0xff
    2630:	4b13      	ldr	r3, [pc, #76]	; (2680 <nwkRouteDiscoveryRequestReceived+0xfc>)
    2632:	4798      	blx	r3
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
    2634:	2001      	movs	r0, #1
    2636:	e018      	b.n	266a <nwkRouteDiscoveryRequestReceived+0xe6>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
    2638:	1c30      	adds	r0, r6, #0
    263a:	1c39      	adds	r1, r7, #0
    263c:	4b11      	ldr	r3, [pc, #68]	; (2684 <nwkRouteDiscoveryRequestReceived+0x100>)
    263e:	4798      	blx	r3
	}

	return true;
    2640:	2001      	movs	r0, #1
    2642:	e012      	b.n	266a <nwkRouteDiscoveryRequestReceived+0xe6>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    2644:	2001      	movs	r0, #1
    2646:	e010      	b.n	266a <nwkRouteDiscoveryRequestReceived+0xe6>
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
		return true;
    2648:	2001      	movs	r0, #1
    264a:	e00e      	b.n	266a <nwkRouteDiscoveryRequestReceived+0xe6>
		if (linkQuality <= entry->forwardLinkQuality) {
			return true;
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
			return true;
    264c:	2001      	movs	r0, #1
    264e:	e00c      	b.n	266a <nwkRouteDiscoveryRequestReceived+0xe6>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    2650:	2001      	movs	r0, #1
    2652:	e00a      	b.n	266a <nwkRouteDiscoveryRequestReceived+0xe6>

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    2654:	7863      	ldrb	r3, [r4, #1]
    2656:	78a0      	ldrb	r0, [r4, #2]
    2658:	0200      	lsls	r0, r0, #8
    265a:	4318      	orrs	r0, r3
    265c:	4b04      	ldr	r3, [pc, #16]	; (2670 <nwkRouteDiscoveryRequestReceived+0xec>)
    265e:	881b      	ldrh	r3, [r3, #0]
    2660:	4298      	cmp	r0, r3
    2662:	d0f5      	beq.n	2650 <nwkRouteDiscoveryRequestReceived+0xcc>
{
	NwkCommandRouteRequest_t *command
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;
    2664:	2100      	movs	r1, #0
    2666:	4688      	mov	r8, r1
    2668:	e7ac      	b.n	25c4 <nwkRouteDiscoveryRequestReceived+0x40>
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
}
    266a:	bc04      	pop	{r2}
    266c:	4690      	mov	r8, r2
    266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2670:	20000ccc 	.word	0x20000ccc
    2674:	0000227d 	.word	0x0000227d
    2678:	000022b9 	.word	0x000022b9
    267c:	00002041 	.word	0x00002041
    2680:	00002459 	.word	0x00002459
    2684:	000023cd 	.word	0x000023cd

00002688 <nwkRouteDiscoveryReplyReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
    2688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    268a:	1c05      	adds	r5, r0, #0
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    268c:	6884      	ldr	r4, [r0, #8]
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    268e:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2690:	2000      	movs	r0, #0
{
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    2692:	2b08      	cmp	r3, #8
    2694:	d143      	bne.n	271e <nwkRouteDiscoveryReplyReceived+0x96>
		return false;
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    2696:	7863      	ldrb	r3, [r4, #1]
    2698:	78a0      	ldrb	r0, [r4, #2]
    269a:	0200      	lsls	r0, r0, #8
    269c:	4318      	orrs	r0, r3
    269e:	78e3      	ldrb	r3, [r4, #3]
    26a0:	7921      	ldrb	r1, [r4, #4]
    26a2:	0209      	lsls	r1, r1, #8
    26a4:	4319      	orrs	r1, r3
    26a6:	7962      	ldrb	r2, [r4, #5]
    26a8:	4b1d      	ldr	r3, [pc, #116]	; (2720 <nwkRouteDiscoveryReplyReceived+0x98>)
    26aa:	4798      	blx	r3
    26ac:	1c06      	adds	r6, r0, #0
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
    26ae:	79e3      	ldrb	r3, [r4, #7]
    26b0:	7b6a      	ldrb	r2, [r5, #13]
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    26b2:	2800      	cmp	r0, #0
    26b4:	d032      	beq.n	271c <nwkRouteDiscoveryReplyReceived+0x94>
    26b6:	79a1      	ldrb	r1, [r4, #6]
    26b8:	7a47      	ldrb	r7, [r0, #9]
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    26ba:	2001      	movs	r0, #1
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    26bc:	428f      	cmp	r7, r1
    26be:	d22e      	bcs.n	271e <nwkRouteDiscoveryReplyReceived+0x96>
		entry->reverseLinkQuality = command->forwardLinkQuality;
    26c0:	7271      	strb	r1, [r6, #9]

		if (command->srcAddr == nwkIb.addr) {
    26c2:	7867      	ldrb	r7, [r4, #1]
    26c4:	78a1      	ldrb	r1, [r4, #2]
    26c6:	0209      	lsls	r1, r1, #8
    26c8:	4816      	ldr	r0, [pc, #88]	; (2724 <nwkRouteDiscoveryReplyReceived+0x9c>)
    26ca:	8800      	ldrh	r0, [r0, #0]
    26cc:	4339      	orrs	r1, r7
    26ce:	4288      	cmp	r0, r1
    26d0:	d10a      	bne.n	26e8 <nwkRouteDiscoveryReplyReceived+0x60>
			nwkRouteUpdateEntry(command->dstAddr,
    26d2:	78e3      	ldrb	r3, [r4, #3]
    26d4:	7920      	ldrb	r0, [r4, #4]
    26d6:	0200      	lsls	r0, r0, #8
    26d8:	4318      	orrs	r0, r3
    26da:	7961      	ldrb	r1, [r4, #5]
    26dc:	882a      	ldrh	r2, [r5, #0]
    26de:	79a3      	ldrb	r3, [r4, #6]
    26e0:	4c11      	ldr	r4, [pc, #68]	; (2728 <nwkRouteDiscoveryReplyReceived+0xa0>)
    26e2:	47a0      	blx	r4
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    26e4:	2001      	movs	r0, #1
    26e6:	e01a      	b.n	271e <nwkRouteDiscoveryReplyReceived+0x96>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    26e8:	4353      	muls	r3, r2
    26ea:	0a1f      	lsrs	r7, r3, #8
			nwkRouteUpdateEntry(command->dstAddr,
					command->multicast, ind->srcAddr,
					command->forwardLinkQuality);
			/* nwkRouteDiscoveryDone(entry, true); */
		} else {
			nwkRouteUpdateEntry(command->dstAddr,
    26ec:	78e3      	ldrb	r3, [r4, #3]
    26ee:	7920      	ldrb	r0, [r4, #4]
    26f0:	0200      	lsls	r0, r0, #8
    26f2:	4318      	orrs	r0, r3
    26f4:	7961      	ldrb	r1, [r4, #5]
    26f6:	882a      	ldrh	r2, [r5, #0]
    26f8:	1c3b      	adds	r3, r7, #0
    26fa:	4d0b      	ldr	r5, [pc, #44]	; (2728 <nwkRouteDiscoveryReplyReceived+0xa0>)
    26fc:	47a8      	blx	r5
					command->multicast, ind->srcAddr,
					linkQuality);
			nwkRouteUpdateEntry(command->srcAddr, 0,
    26fe:	7863      	ldrb	r3, [r4, #1]
    2700:	78a0      	ldrb	r0, [r4, #2]
    2702:	0200      	lsls	r0, r0, #8
    2704:	4318      	orrs	r0, r3
    2706:	88f2      	ldrh	r2, [r6, #6]
    2708:	7a33      	ldrb	r3, [r6, #8]
    270a:	2100      	movs	r1, #0
    270c:	47a8      	blx	r5
					entry->senderAddr,
					entry->forwardLinkQuality);
			nwkRouteDiscoverySendReply(entry,
    270e:	79a1      	ldrb	r1, [r4, #6]
    2710:	1c30      	adds	r0, r6, #0
    2712:	1c3a      	adds	r2, r7, #0
    2714:	4b05      	ldr	r3, [pc, #20]	; (272c <nwkRouteDiscoveryReplyReceived+0xa4>)
    2716:	4798      	blx	r3
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    2718:	2001      	movs	r0, #1
    271a:	e000      	b.n	271e <nwkRouteDiscoveryReplyReceived+0x96>
    271c:	2001      	movs	r0, #1
}
    271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2720:	0000227d 	.word	0x0000227d
    2724:	20000ccc 	.word	0x20000ccc
    2728:	00002041 	.word	0x00002041
    272c:	00002459 	.word	0x00002459

00002730 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2730:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    2732:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2734:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    2736:	2a00      	cmp	r2, #0
    2738:	d01b      	beq.n	2772 <nwkRxSeriveDataInd+0x42>
		return false;
	}

	switch (ind->data[0]) {
    273a:	6882      	ldr	r2, [r0, #8]
    273c:	7813      	ldrb	r3, [r2, #0]
    273e:	2b01      	cmp	r3, #1
    2740:	d00a      	beq.n	2758 <nwkRxSeriveDataInd+0x28>
    2742:	2b00      	cmp	r3, #0
    2744:	d004      	beq.n	2750 <nwkRxSeriveDataInd+0x20>
    2746:	2b02      	cmp	r3, #2
    2748:	d00a      	beq.n	2760 <nwkRxSeriveDataInd+0x30>
    274a:	2b03      	cmp	r3, #3
    274c:	d00c      	beq.n	2768 <nwkRxSeriveDataInd+0x38>
    274e:	e00f      	b.n	2770 <nwkRxSeriveDataInd+0x40>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2750:	4b09      	ldr	r3, [pc, #36]	; (2778 <nwkRxSeriveDataInd+0x48>)
    2752:	4798      	blx	r3
    2754:	1c03      	adds	r3, r0, #0
    2756:	e00c      	b.n	2772 <nwkRxSeriveDataInd+0x42>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2758:	4b08      	ldr	r3, [pc, #32]	; (277c <nwkRxSeriveDataInd+0x4c>)
    275a:	4798      	blx	r3
    275c:	1c03      	adds	r3, r0, #0
    275e:	e008      	b.n	2772 <nwkRxSeriveDataInd+0x42>

#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	case NWK_COMMAND_ROUTE_REQUEST:
		return nwkRouteDiscoveryRequestReceived(ind);
    2760:	4b07      	ldr	r3, [pc, #28]	; (2780 <nwkRxSeriveDataInd+0x50>)
    2762:	4798      	blx	r3
    2764:	1c03      	adds	r3, r0, #0
    2766:	e004      	b.n	2772 <nwkRxSeriveDataInd+0x42>

	case NWK_COMMAND_ROUTE_REPLY:
		return nwkRouteDiscoveryReplyReceived(ind);
    2768:	4b06      	ldr	r3, [pc, #24]	; (2784 <nwkRxSeriveDataInd+0x54>)
    276a:	4798      	blx	r3
    276c:	1c03      	adds	r3, r0, #0
    276e:	e000      	b.n	2772 <nwkRxSeriveDataInd+0x42>

#endif

	default:
		return false;
    2770:	2300      	movs	r3, #0
	}
}
    2772:	1c18      	adds	r0, r3, #0
    2774:	bd08      	pop	{r3, pc}
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	000030dd 	.word	0x000030dd
    277c:	00002259 	.word	0x00002259
    2780:	00002585 	.word	0x00002585
    2784:	00002689 	.word	0x00002689

00002788 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2788:	b538      	push	{r3, r4, r5, lr}
    278a:	490a      	ldr	r1, [pc, #40]	; (27b4 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    278c:	1d0b      	adds	r3, r1, #4
    278e:	3131      	adds	r1, #49	; 0x31
    2790:	31ff      	adds	r1, #255	; 0xff
	bool restart = false;
    2792:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2794:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2796:	781a      	ldrb	r2, [r3, #0]
    2798:	2a00      	cmp	r2, #0
    279a:	d002      	beq.n	27a2 <nwkRxDuplicateRejectionTimerHandler+0x1a>
			nwkRxDuplicateRejectionTable[i].ttl--;
    279c:	3a01      	subs	r2, #1
    279e:	701a      	strb	r2, [r3, #0]
			restart = true;
    27a0:	1c2c      	adds	r4, r5, #0
    27a2:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    27a4:	428b      	cmp	r3, r1
    27a6:	d1f6      	bne.n	2796 <nwkRxDuplicateRejectionTimerHandler+0xe>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    27a8:	2c00      	cmp	r4, #0
    27aa:	d001      	beq.n	27b0 <nwkRxDuplicateRejectionTimerHandler+0x28>
		SYS_TimerStart(timer);
    27ac:	4b02      	ldr	r3, [pc, #8]	; (27b8 <nwkRxDuplicateRejectionTimerHandler+0x30>)
    27ae:	4798      	blx	r3
	}
}
    27b0:	bd38      	pop	{r3, r4, r5, pc}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	200009bc 	.word	0x200009bc
    27b8:	00003699 	.word	0x00003699

000027bc <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    27bc:	b508      	push	{r3, lr}
    27be:	490a      	ldr	r1, [pc, #40]	; (27e8 <nwkRxInit+0x2c>)
    27c0:	1d0b      	adds	r3, r1, #4
    27c2:	3131      	adds	r1, #49	; 0x31
    27c4:	31ff      	adds	r1, #255	; 0xff
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    27c6:	2200      	movs	r2, #0
    27c8:	701a      	strb	r2, [r3, #0]
    27ca:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    27cc:	428b      	cmp	r3, r1
    27ce:	d1fb      	bne.n	27c8 <nwkRxInit+0xc>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    27d0:	4b06      	ldr	r3, [pc, #24]	; (27ec <nwkRxInit+0x30>)
    27d2:	2264      	movs	r2, #100	; 0x64
    27d4:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    27d6:	2200      	movs	r2, #0
    27d8:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    27da:	4a05      	ldr	r2, [pc, #20]	; (27f0 <nwkRxInit+0x34>)
    27dc:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    27de:	2000      	movs	r0, #0
    27e0:	4904      	ldr	r1, [pc, #16]	; (27f4 <nwkRxInit+0x38>)
    27e2:	4b05      	ldr	r3, [pc, #20]	; (27f8 <nwkRxInit+0x3c>)
    27e4:	4798      	blx	r3
}
    27e6:	bd08      	pop	{r3, pc}
    27e8:	200009bc 	.word	0x200009bc
    27ec:	20000aec 	.word	0x20000aec
    27f0:	00002789 	.word	0x00002789
    27f4:	00002731 	.word	0x00002731
    27f8:	00001ca1 	.word	0x00001ca1

000027fc <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    27fc:	b510      	push	{r4, lr}
    27fe:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    2800:	6803      	ldr	r3, [r0, #0]
    2802:	785a      	ldrb	r2, [r3, #1]
    2804:	2a88      	cmp	r2, #136	; 0x88
    2806:	d11a      	bne.n	283e <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    2808:	781b      	ldrb	r3, [r3, #0]
    280a:	2220      	movs	r2, #32
    280c:	4393      	bics	r3, r2
    280e:	2b41      	cmp	r3, #65	; 0x41
    2810:	d115      	bne.n	283e <PHY_DataInd+0x42>
    2812:	7903      	ldrb	r3, [r0, #4]
    2814:	2b0f      	cmp	r3, #15
    2816:	d912      	bls.n	283e <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    2818:	4b09      	ldr	r3, [pc, #36]	; (2840 <PHY_DataInd+0x44>)
    281a:	4798      	blx	r3
    281c:	2800      	cmp	r0, #0
    281e:	d00e      	beq.n	283e <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    2820:	2320      	movs	r3, #32
    2822:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    2824:	7923      	ldrb	r3, [r4, #4]
    2826:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    2828:	7962      	ldrb	r2, [r4, #5]
    282a:	2385      	movs	r3, #133	; 0x85
    282c:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    282e:	79a2      	ldrb	r2, [r4, #6]
    2830:	2386      	movs	r3, #134	; 0x86
    2832:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    2834:	3002      	adds	r0, #2
    2836:	7922      	ldrb	r2, [r4, #4]
    2838:	6821      	ldr	r1, [r4, #0]
    283a:	4b02      	ldr	r3, [pc, #8]	; (2844 <PHY_DataInd+0x48>)
    283c:	4798      	blx	r3
}
    283e:	bd10      	pop	{r4, pc}
    2840:	00001e81 	.word	0x00001e81
    2844:	00004e25 	.word	0x00004e25

00002848 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    2848:	2900      	cmp	r1, #0
    284a:	d002      	beq.n	2852 <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    284c:	2322      	movs	r3, #34	; 0x22
    284e:	7003      	strb	r3, [r0, #0]
    2850:	e001      	b.n	2856 <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    2852:	2324      	movs	r3, #36	; 0x24
    2854:	7003      	strb	r3, [r0, #0]
	}
}
    2856:	4770      	bx	lr

00002858 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    2858:	b5f0      	push	{r4, r5, r6, r7, lr}
    285a:	4657      	mov	r7, sl
    285c:	464e      	mov	r6, r9
    285e:	4645      	mov	r5, r8
    2860:	b4e0      	push	{r5, r6, r7}
    2862:	b084      	sub	sp, #16
	NwkFrame_t *frame = NULL;
    2864:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2866:	4dd5      	ldr	r5, [pc, #852]	; (2bbc <nwkRxTaskHandler+0x364>)
    2868:	4ed5      	ldr	r6, [pc, #852]	; (2bc0 <nwkRxTaskHandler+0x368>)
    286a:	362d      	adds	r6, #45	; 0x2d
    286c:	36ff      	adds	r6, #255	; 0xff
    286e:	e19f      	b.n	2bb0 <nwkRxTaskHandler+0x358>
		switch (frame->state) {
    2870:	7823      	ldrb	r3, [r4, #0]
    2872:	3b20      	subs	r3, #32
    2874:	b2da      	uxtb	r2, r3
    2876:	2a04      	cmp	r2, #4
    2878:	d900      	bls.n	287c <nwkRxTaskHandler+0x24>
    287a:	e199      	b.n	2bb0 <nwkRxTaskHandler+0x358>
    287c:	0093      	lsls	r3, r2, #2
    287e:	4ad1      	ldr	r2, [pc, #836]	; (2bc4 <nwkRxTaskHandler+0x36c>)
    2880:	58d3      	ldr	r3, [r2, r3]
    2882:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2884:	2324      	movs	r3, #36	; 0x24
    2886:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2888:	7ae3      	ldrb	r3, [r4, #11]
    288a:	0718      	lsls	r0, r3, #28
    288c:	d500      	bpl.n	2890 <nwkRxTaskHandler+0x38>
    288e:	e18f      	b.n	2bb0 <nwkRxTaskHandler+0x358>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2890:	7961      	ldrb	r1, [r4, #5]
    2892:	79a2      	ldrb	r2, [r4, #6]
    2894:	0212      	lsls	r2, r2, #8
    2896:	430a      	orrs	r2, r1
    2898:	4bcb      	ldr	r3, [pc, #812]	; (2bc8 <nwkRxTaskHandler+0x370>)
    289a:	429a      	cmp	r2, r3
    289c:	d114      	bne.n	28c8 <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    289e:	7be2      	ldrb	r2, [r4, #15]
    28a0:	7c23      	ldrb	r3, [r4, #16]
    28a2:	021b      	lsls	r3, r3, #8
    28a4:	4313      	orrs	r3, r2
    28a6:	4ac9      	ldr	r2, [pc, #804]	; (2bcc <nwkRxTaskHandler+0x374>)
    28a8:	8812      	ldrh	r2, [r2, #0]
    28aa:	429a      	cmp	r2, r3
    28ac:	d003      	beq.n	28b6 <nwkRxTaskHandler+0x5e>
    28ae:	4ac6      	ldr	r2, [pc, #792]	; (2bc8 <nwkRxTaskHandler+0x370>)
    28b0:	4293      	cmp	r3, r2
    28b2:	d000      	beq.n	28b6 <nwkRxTaskHandler+0x5e>
    28b4:	e17c      	b.n	2bb0 <nwkRxTaskHandler+0x358>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    28b6:	7ae3      	ldrb	r3, [r4, #11]
    28b8:	0799      	lsls	r1, r3, #30
    28ba:	d502      	bpl.n	28c2 <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    28bc:	2321      	movs	r3, #33	; 0x21
    28be:	7023      	strb	r3, [r4, #0]
    28c0:	e176      	b.n	2bb0 <nwkRxTaskHandler+0x358>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    28c2:	2322      	movs	r3, #34	; 0x22
    28c4:	7023      	strb	r3, [r4, #0]
    28c6:	e173      	b.n	2bb0 <nwkRxTaskHandler+0x358>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    28c8:	7be1      	ldrb	r1, [r4, #15]
    28ca:	7c22      	ldrb	r2, [r4, #16]
    28cc:	0212      	lsls	r2, r2, #8
    28ce:	430a      	orrs	r2, r1
    28d0:	4bbd      	ldr	r3, [pc, #756]	; (2bc8 <nwkRxTaskHandler+0x370>)
    28d2:	429a      	cmp	r2, r3
    28d4:	d103      	bne.n	28de <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    28d6:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    28d8:	07da      	lsls	r2, r3, #31
    28da:	d500      	bpl.n	28de <nwkRxTaskHandler+0x86>
    28dc:	e168      	b.n	2bb0 <nwkRxTaskHandler+0x358>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    28de:	7b61      	ldrb	r1, [r4, #13]
    28e0:	7ba3      	ldrb	r3, [r4, #14]
    28e2:	021b      	lsls	r3, r3, #8
    28e4:	4ab9      	ldr	r2, [pc, #740]	; (2bcc <nwkRxTaskHandler+0x374>)
    28e6:	8812      	ldrh	r2, [r2, #0]
    28e8:	430b      	orrs	r3, r1
    28ea:	429a      	cmp	r2, r3
    28ec:	d100      	bne.n	28f0 <nwkRxTaskHandler+0x98>
    28ee:	e15f      	b.n	2bb0 <nwkRxTaskHandler+0x358>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    28f0:	1c20      	adds	r0, r4, #0
    28f2:	4bb7      	ldr	r3, [pc, #732]	; (2bd0 <nwkRxTaskHandler+0x378>)
    28f4:	4798      	blx	r3
    28f6:	4bb2      	ldr	r3, [pc, #712]	; (2bc0 <nwkRxTaskHandler+0x368>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    28f8:	2700      	movs	r7, #0
    28fa:	46b8      	mov	r8, r7

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    28fc:	1ca0      	adds	r0, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    28fe:	1c19      	adds	r1, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2900:	791a      	ldrb	r2, [r3, #4]
    2902:	2a00      	cmp	r2, #0
    2904:	d037      	beq.n	2976 <nwkRxTaskHandler+0x11e>
    2906:	7ac2      	ldrb	r2, [r0, #11]
    2908:	7b07      	ldrb	r7, [r0, #12]
    290a:	023f      	lsls	r7, r7, #8
    290c:	46bc      	mov	ip, r7
    290e:	881f      	ldrh	r7, [r3, #0]
    2910:	46ba      	mov	sl, r7
    2912:	4667      	mov	r7, ip
    2914:	433a      	orrs	r2, r7
    2916:	4592      	cmp	sl, r2
    2918:	d12e      	bne.n	2978 <nwkRxTaskHandler+0x120>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    291a:	7b22      	ldrb	r2, [r4, #12]
    291c:	789b      	ldrb	r3, [r3, #2]
    291e:	1a9b      	subs	r3, r3, r2
    2920:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    2922:	2b07      	cmp	r3, #7
    2924:	d81c      	bhi.n	2960 <nwkRxTaskHandler+0x108>
				if (entry->mask & (1 << diff)) {
    2926:	78ca      	ldrb	r2, [r1, #3]
    2928:	1c10      	adds	r0, r2, #0
    292a:	4118      	asrs	r0, r3
    292c:	07c7      	lsls	r7, r0, #31
    292e:	d512      	bpl.n	2956 <nwkRxTaskHandler+0xfe>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    2930:	79e1      	ldrb	r1, [r4, #7]
    2932:	7a23      	ldrb	r3, [r4, #8]
    2934:	021b      	lsls	r3, r3, #8
    2936:	4aa5      	ldr	r2, [pc, #660]	; (2bcc <nwkRxTaskHandler+0x374>)
    2938:	8812      	ldrh	r2, [r2, #0]
    293a:	430b      	orrs	r3, r1
    293c:	429a      	cmp	r2, r3
    293e:	d000      	beq.n	2942 <nwkRxTaskHandler+0xea>
    2940:	e136      	b.n	2bb0 <nwkRxTaskHandler+0x358>
						nwkRouteRemove(
    2942:	7be2      	ldrb	r2, [r4, #15]
    2944:	7c20      	ldrb	r0, [r4, #16]
    2946:	0200      	lsls	r0, r0, #8
    2948:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    294a:	7ae1      	ldrb	r1, [r4, #11]
    294c:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    294e:	0fc9      	lsrs	r1, r1, #31
    2950:	4ba0      	ldr	r3, [pc, #640]	; (2bd4 <nwkRxTaskHandler+0x37c>)
    2952:	4798      	blx	r3
    2954:	e12c      	b.n	2bb0 <nwkRxTaskHandler+0x358>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2956:	2001      	movs	r0, #1
    2958:	4098      	lsls	r0, r3
    295a:	4302      	orrs	r2, r0
    295c:	70ca      	strb	r2, [r1, #3]
    295e:	e151      	b.n	2c04 <nwkRxTaskHandler+0x3ac>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    2960:	708a      	strb	r2, [r1, #2]
				entry->mask = (entry->mask << shift) | 1;
    2962:	78ca      	ldrb	r2, [r1, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    2964:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    2966:	b2db      	uxtb	r3, r3
    2968:	409a      	lsls	r2, r3
    296a:	2301      	movs	r3, #1
    296c:	4313      	orrs	r3, r2
    296e:	70cb      	strb	r3, [r1, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    2970:	2315      	movs	r3, #21
    2972:	710b      	strb	r3, [r1, #4]
    2974:	e146      	b.n	2c04 <nwkRxTaskHandler+0x3ac>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2976:	4698      	mov	r8, r3
    2978:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    297a:	42b3      	cmp	r3, r6
    297c:	d1bf      	bne.n	28fe <nwkRxTaskHandler+0xa6>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    297e:	4640      	mov	r0, r8
    2980:	2800      	cmp	r0, #0
    2982:	d100      	bne.n	2986 <nwkRxTaskHandler+0x12e>
    2984:	e114      	b.n	2bb0 <nwkRxTaskHandler+0x358>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    2986:	7b61      	ldrb	r1, [r4, #13]
    2988:	7ba2      	ldrb	r2, [r4, #14]
    298a:	0212      	lsls	r2, r2, #8
    298c:	430a      	orrs	r2, r1
    298e:	8002      	strh	r2, [r0, #0]
	freeEntry->seq = header->nwkSeq;
    2990:	7b23      	ldrb	r3, [r4, #12]
    2992:	7083      	strb	r3, [r0, #2]
	freeEntry->mask = 1;
    2994:	2301      	movs	r3, #1
    2996:	70c3      	strb	r3, [r0, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2998:	2315      	movs	r3, #21
    299a:	7103      	strb	r3, [r0, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    299c:	488e      	ldr	r0, [pc, #568]	; (2bd8 <nwkRxTaskHandler+0x380>)
    299e:	4b8f      	ldr	r3, [pc, #572]	; (2bdc <nwkRxTaskHandler+0x384>)
    29a0:	4798      	blx	r3
    29a2:	e12f      	b.n	2c04 <nwkRxTaskHandler+0x3ac>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    29a4:	4b89      	ldr	r3, [pc, #548]	; (2bcc <nwkRxTaskHandler+0x374>)
    29a6:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    29a8:	7be0      	ldrb	r0, [r4, #15]
    29aa:	7c23      	ldrb	r3, [r4, #16]
    29ac:	021b      	lsls	r3, r3, #8
    29ae:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    29b0:	429a      	cmp	r2, r3
    29b2:	d010      	beq.n	29d6 <nwkRxTaskHandler+0x17e>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    29b4:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    29b6:	074f      	lsls	r7, r1, #29
    29b8:	d40a      	bmi.n	29d0 <nwkRxTaskHandler+0x178>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    29ba:	1c20      	adds	r0, r4, #0
    29bc:	4b88      	ldr	r3, [pc, #544]	; (2be0 <nwkRxTaskHandler+0x388>)
    29be:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    29c0:	4b82      	ldr	r3, [pc, #520]	; (2bcc <nwkRxTaskHandler+0x374>)
    29c2:	881a      	ldrh	r2, [r3, #0]
    29c4:	7be0      	ldrb	r0, [r4, #15]
    29c6:	7c23      	ldrb	r3, [r4, #16]
    29c8:	021b      	lsls	r3, r3, #8
    29ca:	4303      	orrs	r3, r0
    29cc:	429a      	cmp	r2, r3
    29ce:	d002      	beq.n	29d6 <nwkRxTaskHandler+0x17e>
    29d0:	497d      	ldr	r1, [pc, #500]	; (2bc8 <nwkRxTaskHandler+0x370>)
    29d2:	428b      	cmp	r3, r1
    29d4:	d108      	bne.n	29e8 <nwkRxTaskHandler+0x190>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    29d6:	7ae3      	ldrb	r3, [r4, #11]
    29d8:	0798      	lsls	r0, r3, #30
    29da:	d502      	bpl.n	29e2 <nwkRxTaskHandler+0x18a>
				frame->state = NWK_RX_STATE_DECRYPT;
    29dc:	2321      	movs	r3, #33	; 0x21
    29de:	7023      	strb	r3, [r4, #0]
    29e0:	e0e6      	b.n	2bb0 <nwkRxTaskHandler+0x358>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    29e2:	2322      	movs	r3, #34	; 0x22
    29e4:	7023      	strb	r3, [r4, #0]
    29e6:	e0e3      	b.n	2bb0 <nwkRxTaskHandler+0x358>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    29e8:	79e1      	ldrb	r1, [r4, #7]
    29ea:	7a23      	ldrb	r3, [r4, #8]
    29ec:	021b      	lsls	r3, r3, #8
    29ee:	430b      	orrs	r3, r1
    29f0:	429a      	cmp	r2, r3
    29f2:	d000      	beq.n	29f6 <nwkRxTaskHandler+0x19e>
    29f4:	e0dc      	b.n	2bb0 <nwkRxTaskHandler+0x358>
			frame->state = NWK_RX_STATE_ROUTE;
    29f6:	2323      	movs	r3, #35	; 0x23
    29f8:	7023      	strb	r3, [r4, #0]
    29fa:	e0d9      	b.n	2bb0 <nwkRxTaskHandler+0x358>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    29fc:	1c20      	adds	r0, r4, #0
    29fe:	2100      	movs	r1, #0
    2a00:	4b78      	ldr	r3, [pc, #480]	; (2be4 <nwkRxTaskHandler+0x38c>)
    2a02:	4798      	blx	r3
		}
		break;
    2a04:	e0d4      	b.n	2bb0 <nwkRxTaskHandler+0x358>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    2a06:	2200      	movs	r2, #0
    2a08:	4b77      	ldr	r3, [pc, #476]	; (2be8 <nwkRxTaskHandler+0x390>)
    2a0a:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    2a0c:	7c61      	ldrb	r1, [r4, #17]
    2a0e:	0909      	lsrs	r1, r1, #4
    2a10:	b2ca      	uxtb	r2, r1
    2a12:	3202      	adds	r2, #2
    2a14:	0092      	lsls	r2, r2, #2
    2a16:	4b6d      	ldr	r3, [pc, #436]	; (2bcc <nwkRxTaskHandler+0x374>)
    2a18:	58d2      	ldr	r2, [r2, r3]
    2a1a:	2a00      	cmp	r2, #0
    2a1c:	d062      	beq.n	2ae4 <nwkRxTaskHandler+0x28c>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    2a1e:	1ca3      	adds	r3, r4, #2
    2a20:	7b67      	ldrb	r7, [r4, #13]
    2a22:	7ba0      	ldrb	r0, [r4, #14]
    2a24:	0200      	lsls	r0, r0, #8
    2a26:	4338      	orrs	r0, r7
    2a28:	4680      	mov	r8, r0
    2a2a:	466f      	mov	r7, sp
    2a2c:	8038      	strh	r0, [r7, #0]
	ind.dstAddr = header->nwkDstAddr;
    2a2e:	7be7      	ldrb	r7, [r4, #15]
    2a30:	7c20      	ldrb	r0, [r4, #16]
    2a32:	0200      	lsls	r0, r0, #8
    2a34:	4307      	orrs	r7, r0
    2a36:	46b9      	mov	r9, r7
    2a38:	1c38      	adds	r0, r7, #0
    2a3a:	466f      	mov	r7, sp
    2a3c:	8078      	strh	r0, [r7, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    2a3e:	7c67      	ldrb	r7, [r4, #17]
    2a40:	073f      	lsls	r7, r7, #28
    2a42:	0f3f      	lsrs	r7, r7, #28
    2a44:	4668      	mov	r0, sp
    2a46:	7107      	strb	r7, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    2a48:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    2a4a:	2181      	movs	r1, #129	; 0x81
    2a4c:	5c61      	ldrb	r1, [r4, r1]
    2a4e:	2082      	movs	r0, #130	; 0x82
    2a50:	5c27      	ldrb	r7, [r4, r0]
    2a52:	023f      	lsls	r7, r7, #8
    2a54:	4339      	orrs	r1, r7
    2a56:	2083      	movs	r0, #131	; 0x83
    2a58:	5c27      	ldrb	r7, [r4, r0]
    2a5a:	043f      	lsls	r7, r7, #16
    2a5c:	4339      	orrs	r1, r7
    2a5e:	2084      	movs	r0, #132	; 0x84
    2a60:	5c27      	ldrb	r7, [r4, r0]
    2a62:	063f      	lsls	r7, r7, #24
    2a64:	4339      	orrs	r1, r7
    2a66:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    2a68:	1a59      	subs	r1, r3, r1
    2a6a:	468c      	mov	ip, r1
    2a6c:	7861      	ldrb	r1, [r4, #1]
    2a6e:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    2a70:	4668      	mov	r0, sp
    2a72:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    2a74:	2185      	movs	r1, #133	; 0x85
    2a76:	5c61      	ldrb	r1, [r4, r1]
    2a78:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    2a7a:	2186      	movs	r1, #134	; 0x86
    2a7c:	5c61      	ldrb	r1, [r4, r1]
    2a7e:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2a80:	7ae3      	ldrb	r3, [r4, #11]
    2a82:	07d9      	lsls	r1, r3, #31
    2a84:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2a86:	2702      	movs	r7, #2
    2a88:	403b      	ands	r3, r7
    2a8a:	430b      	orrs	r3, r1
    2a8c:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2a8e:	7ae1      	ldrb	r1, [r4, #11]
    2a90:	0749      	lsls	r1, r1, #29
    2a92:	0fc9      	lsrs	r1, r1, #31
    2a94:	0149      	lsls	r1, r1, #5
    2a96:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2a98:	7ae1      	ldrb	r1, [r4, #11]
    2a9a:	0709      	lsls	r1, r1, #28
    2a9c:	0fc9      	lsrs	r1, r1, #31
    2a9e:	0189      	lsls	r1, r1, #6
    2aa0:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2aa2:	4952      	ldr	r1, [pc, #328]	; (2bec <nwkRxTaskHandler+0x394>)
    2aa4:	1c0f      	adds	r7, r1, #0
    2aa6:	444f      	add	r7, r9
    2aa8:	4279      	negs	r1, r7
    2aaa:	414f      	adcs	r7, r1
    2aac:	00bf      	lsls	r7, r7, #2
    2aae:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2ab0:	7a67      	ldrb	r7, [r4, #9]
    2ab2:	7aa1      	ldrb	r1, [r4, #10]
    2ab4:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2ab6:	4339      	orrs	r1, r7
    2ab8:	4647      	mov	r7, r8
    2aba:	1a78      	subs	r0, r7, r1
    2abc:	4241      	negs	r1, r0
    2abe:	4148      	adcs	r0, r1
    2ac0:	00c0      	lsls	r0, r0, #3
    2ac2:	4303      	orrs	r3, r0
    2ac4:	4668      	mov	r0, sp
    2ac6:	7183      	strb	r3, [r0, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2ac8:	7960      	ldrb	r0, [r4, #5]
    2aca:	79a1      	ldrb	r1, [r4, #6]
    2acc:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2ace:	4301      	orrs	r1, r0
    2ad0:	4f46      	ldr	r7, [pc, #280]	; (2bec <nwkRxTaskHandler+0x394>)
    2ad2:	19c9      	adds	r1, r1, r7
    2ad4:	4248      	negs	r0, r1
    2ad6:	4141      	adcs	r1, r0
    2ad8:	0109      	lsls	r1, r1, #4
    2ada:	430b      	orrs	r3, r1
    2adc:	4668      	mov	r0, sp
    2ade:	7183      	strb	r3, [r0, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2ae0:	4790      	blx	r2
    2ae2:	e000      	b.n	2ae6 <nwkRxTaskHandler+0x28e>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2ae4:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2ae6:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    2ae8:	07db      	lsls	r3, r3, #31
    2aea:	17db      	asrs	r3, r3, #31
    2aec:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2aee:	79e3      	ldrb	r3, [r4, #7]
    2af0:	7a22      	ldrb	r2, [r4, #8]
    2af2:	0212      	lsls	r2, r2, #8
    2af4:	431a      	orrs	r2, r3
    2af6:	4b34      	ldr	r3, [pc, #208]	; (2bc8 <nwkRxTaskHandler+0x370>)
    2af8:	429a      	cmp	r2, r3
    2afa:	d10b      	bne.n	2b14 <nwkRxTaskHandler+0x2bc>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2afc:	7be1      	ldrb	r1, [r4, #15]
    2afe:	7c23      	ldrb	r3, [r4, #16]
    2b00:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2b02:	4a32      	ldr	r2, [pc, #200]	; (2bcc <nwkRxTaskHandler+0x374>)
    2b04:	8812      	ldrh	r2, [r2, #0]
    2b06:	430b      	orrs	r3, r1
    2b08:	429a      	cmp	r2, r3
    2b0a:	d103      	bne.n	2b14 <nwkRxTaskHandler+0x2bc>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    2b0c:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    2b0e:	0719      	lsls	r1, r3, #28
    2b10:	d400      	bmi.n	2b14 <nwkRxTaskHandler+0x2bc>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    2b12:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    2b14:	7963      	ldrb	r3, [r4, #5]
    2b16:	79a2      	ldrb	r2, [r4, #6]
    2b18:	0212      	lsls	r2, r2, #8
    2b1a:	431a      	orrs	r2, r3
    2b1c:	4b2a      	ldr	r3, [pc, #168]	; (2bc8 <nwkRxTaskHandler+0x370>)
    2b1e:	429a      	cmp	r2, r3
    2b20:	d03c      	beq.n	2b9c <nwkRxTaskHandler+0x344>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2b22:	4b2a      	ldr	r3, [pc, #168]	; (2bcc <nwkRxTaskHandler+0x374>)
    2b24:	881a      	ldrh	r2, [r3, #0]
    2b26:	4b28      	ldr	r3, [pc, #160]	; (2bc8 <nwkRxTaskHandler+0x370>)
    2b28:	429a      	cmp	r2, r3
    2b2a:	d037      	beq.n	2b9c <nwkRxTaskHandler+0x344>
		ack = false;
	}

	if (ack) {
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d035      	beq.n	2b9c <nwkRxTaskHandler+0x344>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    2b30:	4b2f      	ldr	r3, [pc, #188]	; (2bf0 <nwkRxTaskHandler+0x398>)
    2b32:	4798      	blx	r3
    2b34:	1e07      	subs	r7, r0, #0
    2b36:	d031      	beq.n	2b9c <nwkRxTaskHandler+0x344>
		return;
	}

	nwkFrameCommandInit(ack);
    2b38:	4b2e      	ldr	r3, [pc, #184]	; (2bf4 <nwkRxTaskHandler+0x39c>)
    2b3a:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    2b3c:	787b      	ldrb	r3, [r7, #1]
    2b3e:	3303      	adds	r3, #3
    2b40:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    2b42:	2200      	movs	r2, #0
    2b44:	2389      	movs	r3, #137	; 0x89
    2b46:	54fa      	strb	r2, [r7, r3]
    2b48:	238a      	movs	r3, #138	; 0x8a
    2b4a:	54fa      	strb	r2, [r7, r3]
    2b4c:	238b      	movs	r3, #139	; 0x8b
    2b4e:	54fa      	strb	r2, [r7, r3]
    2b50:	238c      	movs	r3, #140	; 0x8c
    2b52:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2b54:	7ae2      	ldrb	r2, [r4, #11]
    2b56:	2302      	movs	r3, #2
    2b58:	401a      	ands	r2, r3
    2b5a:	7afb      	ldrb	r3, [r7, #11]
    2b5c:	2102      	movs	r1, #2
    2b5e:	438b      	bics	r3, r1
    2b60:	4313      	orrs	r3, r2
    2b62:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2b64:	7b62      	ldrb	r2, [r4, #13]
    2b66:	7ba3      	ldrb	r3, [r4, #14]
    2b68:	73fa      	strb	r2, [r7, #15]
    2b6a:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    2b6c:	2381      	movs	r3, #129	; 0x81
    2b6e:	5cfa      	ldrb	r2, [r7, r3]
    2b70:	2382      	movs	r3, #130	; 0x82
    2b72:	5cfb      	ldrb	r3, [r7, r3]
    2b74:	021b      	lsls	r3, r3, #8
    2b76:	4313      	orrs	r3, r2
    2b78:	2283      	movs	r2, #131	; 0x83
    2b7a:	5cba      	ldrb	r2, [r7, r2]
    2b7c:	0412      	lsls	r2, r2, #16
    2b7e:	4313      	orrs	r3, r2
    2b80:	2284      	movs	r2, #132	; 0x84
    2b82:	5cba      	ldrb	r2, [r7, r2]
    2b84:	0612      	lsls	r2, r2, #24
    2b86:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    2b88:	2200      	movs	r2, #0
    2b8a:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    2b8c:	4a16      	ldr	r2, [pc, #88]	; (2be8 <nwkRxTaskHandler+0x390>)
    2b8e:	7812      	ldrb	r2, [r2, #0]
    2b90:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    2b92:	7b22      	ldrb	r2, [r4, #12]
    2b94:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    2b96:	1c38      	adds	r0, r7, #0
    2b98:	4b17      	ldr	r3, [pc, #92]	; (2bf8 <nwkRxTaskHandler+0x3a0>)
    2b9a:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    2b9c:	2324      	movs	r3, #36	; 0x24
    2b9e:	7023      	strb	r3, [r4, #0]
    2ba0:	e006      	b.n	2bb0 <nwkRxTaskHandler+0x358>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    2ba2:	1c20      	adds	r0, r4, #0
    2ba4:	4b15      	ldr	r3, [pc, #84]	; (2bfc <nwkRxTaskHandler+0x3a4>)
    2ba6:	4798      	blx	r3
		}
		break;
    2ba8:	e002      	b.n	2bb0 <nwkRxTaskHandler+0x358>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    2baa:	1c20      	adds	r0, r4, #0
    2bac:	4b14      	ldr	r3, [pc, #80]	; (2c00 <nwkRxTaskHandler+0x3a8>)
    2bae:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2bb0:	1c20      	adds	r0, r4, #0
    2bb2:	47a8      	blx	r5
    2bb4:	1e04      	subs	r4, r0, #0
    2bb6:	d000      	beq.n	2bba <nwkRxTaskHandler+0x362>
    2bb8:	e65a      	b.n	2870 <nwkRxTaskHandler+0x18>
    2bba:	e02c      	b.n	2c16 <nwkRxTaskHandler+0x3be>
    2bbc:	00001f05 	.word	0x00001f05
    2bc0:	200009bc 	.word	0x200009bc
    2bc4:	00005f38 	.word	0x00005f38
    2bc8:	0000ffff 	.word	0x0000ffff
    2bcc:	20000ccc 	.word	0x20000ccc
    2bd0:	0000209d 	.word	0x0000209d
    2bd4:	00002085 	.word	0x00002085
    2bd8:	20000aec 	.word	0x20000aec
    2bdc:	00003699 	.word	0x00003699
    2be0:	00003051 	.word	0x00003051
    2be4:	00002c55 	.word	0x00002c55
    2be8:	20000ae8 	.word	0x20000ae8
    2bec:	ffff0001 	.word	0xffff0001
    2bf0:	00001e81 	.word	0x00001e81
    2bf4:	00001f45 	.word	0x00001f45
    2bf8:	00002f91 	.word	0x00002f91
    2bfc:	00002185 	.word	0x00002185
    2c00:	00001ef1 	.word	0x00001ef1
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2c04:	79e1      	ldrb	r1, [r4, #7]
    2c06:	7a22      	ldrb	r2, [r4, #8]
    2c08:	0212      	lsls	r2, r2, #8
    2c0a:	430a      	orrs	r2, r1
    2c0c:	4b05      	ldr	r3, [pc, #20]	; (2c24 <nwkRxTaskHandler+0x3cc>)
    2c0e:	429a      	cmp	r2, r3
    2c10:	d000      	beq.n	2c14 <nwkRxTaskHandler+0x3bc>
    2c12:	e6d5      	b.n	29c0 <nwkRxTaskHandler+0x168>
    2c14:	e6c6      	b.n	29a4 <nwkRxTaskHandler+0x14c>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    2c16:	b004      	add	sp, #16
    2c18:	bc1c      	pop	{r2, r3, r4}
    2c1a:	4690      	mov	r8, r2
    2c1c:	4699      	mov	r9, r3
    2c1e:	46a2      	mov	sl, r4
    2c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	0000ffff 	.word	0x0000ffff

00002c28 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2c28:	2300      	movs	r3, #0
    2c2a:	4a02      	ldr	r2, [pc, #8]	; (2c34 <nwkSecurityInit+0xc>)
    2c2c:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2c2e:	4a02      	ldr	r2, [pc, #8]	; (2c38 <nwkSecurityInit+0x10>)
    2c30:	6013      	str	r3, [r2, #0]
}
    2c32:	4770      	bx	lr
    2c34:	20000b00 	.word	0x20000b00
    2c38:	20000b04 	.word	0x20000b04

00002c3c <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    2c3c:	b508      	push	{r3, lr}
    2c3e:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    2c40:	4802      	ldr	r0, [pc, #8]	; (2c4c <NWK_SetSecurityKey+0x10>)
    2c42:	2210      	movs	r2, #16
    2c44:	4b02      	ldr	r3, [pc, #8]	; (2c50 <NWK_SetSecurityKey+0x14>)
    2c46:	4798      	blx	r3
}
    2c48:	bd08      	pop	{r3, pc}
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	20000d14 	.word	0x20000d14
    2c50:	00004e25 	.word	0x00004e25

00002c54 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    2c54:	2900      	cmp	r1, #0
    2c56:	d002      	beq.n	2c5e <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    2c58:	2330      	movs	r3, #48	; 0x30
    2c5a:	7003      	strb	r3, [r0, #0]
    2c5c:	e001      	b.n	2c62 <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    2c5e:	2331      	movs	r3, #49	; 0x31
    2c60:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    2c62:	4b02      	ldr	r3, [pc, #8]	; (2c6c <nwkSecurityProcess+0x18>)
    2c64:	781a      	ldrb	r2, [r3, #0]
    2c66:	3201      	adds	r2, #1
    2c68:	701a      	strb	r2, [r3, #0]
}
    2c6a:	4770      	bx	lr
    2c6c:	20000b00 	.word	0x20000b00

00002c70 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    2c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c72:	4647      	mov	r7, r8
    2c74:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2c76:	4b24      	ldr	r3, [pc, #144]	; (2d08 <SYS_EncryptConf+0x98>)
    2c78:	681e      	ldr	r6, [r3, #0]
    2c7a:	4b24      	ldr	r3, [pc, #144]	; (2d0c <SYS_EncryptConf+0x9c>)
    2c7c:	781b      	ldrb	r3, [r3, #0]
    2c7e:	4698      	mov	r8, r3
    2c80:	2381      	movs	r3, #129	; 0x81
    2c82:	5cf3      	ldrb	r3, [r6, r3]
    2c84:	2282      	movs	r2, #130	; 0x82
    2c86:	5cb1      	ldrb	r1, [r6, r2]
    2c88:	0209      	lsls	r1, r1, #8
    2c8a:	4319      	orrs	r1, r3
    2c8c:	2383      	movs	r3, #131	; 0x83
    2c8e:	5cf4      	ldrb	r4, [r6, r3]
    2c90:	0424      	lsls	r4, r4, #16
    2c92:	4321      	orrs	r1, r4
    2c94:	2384      	movs	r3, #132	; 0x84
    2c96:	5cf4      	ldrb	r4, [r6, r3]
    2c98:	0624      	lsls	r4, r4, #24
    2c9a:	4321      	orrs	r1, r4
    2c9c:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    2c9e:	4b1c      	ldr	r3, [pc, #112]	; (2d10 <SYS_EncryptConf+0xa0>)
    2ca0:	781b      	ldrb	r3, [r3, #0]
    2ca2:	469c      	mov	ip, r3
    2ca4:	1c1f      	adds	r7, r3, #0
    2ca6:	2b10      	cmp	r3, #16
    2ca8:	d900      	bls.n	2cac <SYS_EncryptConf+0x3c>
    2caa:	2710      	movs	r7, #16
    2cac:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2cae:	2f00      	cmp	r7, #0
    2cb0:	d016      	beq.n	2ce0 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    2cb2:	4b18      	ldr	r3, [pc, #96]	; (2d14 <SYS_EncryptConf+0xa4>)
    2cb4:	781d      	ldrb	r5, [r3, #0]
    2cb6:	1c0b      	adds	r3, r1, #0
    2cb8:	4a17      	ldr	r2, [pc, #92]	; (2d18 <SYS_EncryptConf+0xa8>)
    2cba:	1e7c      	subs	r4, r7, #1
    2cbc:	b2e4      	uxtb	r4, r4
    2cbe:	190c      	adds	r4, r1, r4
    2cc0:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    2cc2:	7810      	ldrb	r0, [r2, #0]
    2cc4:	7819      	ldrb	r1, [r3, #0]
    2cc6:	4041      	eors	r1, r0
    2cc8:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    2cca:	2d00      	cmp	r5, #0
    2ccc:	d001      	beq.n	2cd2 <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    2cce:	7011      	strb	r1, [r2, #0]
    2cd0:	e002      	b.n	2cd8 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    2cd2:	7810      	ldrb	r0, [r2, #0]
    2cd4:	4041      	eors	r1, r0
    2cd6:	7011      	strb	r1, [r2, #0]
    2cd8:	3301      	adds	r3, #1
    2cda:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2cdc:	42a3      	cmp	r3, r4
    2cde:	d1f0      	bne.n	2cc2 <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2ce0:	4643      	mov	r3, r8
    2ce2:	18fa      	adds	r2, r7, r3
    2ce4:	4b09      	ldr	r3, [pc, #36]	; (2d0c <SYS_EncryptConf+0x9c>)
    2ce6:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    2ce8:	4663      	mov	r3, ip
    2cea:	1bdf      	subs	r7, r3, r7
    2cec:	b2ff      	uxtb	r7, r7
    2cee:	4b08      	ldr	r3, [pc, #32]	; (2d10 <SYS_EncryptConf+0xa0>)
    2cf0:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    2cf2:	2f00      	cmp	r7, #0
    2cf4:	d002      	beq.n	2cfc <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2cf6:	2332      	movs	r3, #50	; 0x32
    2cf8:	7033      	strb	r3, [r6, #0]
    2cfa:	e001      	b.n	2d00 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    2cfc:	2334      	movs	r3, #52	; 0x34
    2cfe:	7033      	strb	r3, [r6, #0]
	}
}
    2d00:	bc04      	pop	{r2}
    2d02:	4690      	mov	r8, r2
    2d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	20000b04 	.word	0x20000b04
    2d0c:	20000b08 	.word	0x20000b08
    2d10:	20000b09 	.word	0x20000b09
    2d14:	20000b0a 	.word	0x20000b0a
    2d18:	20000b0c 	.word	0x20000b0c

00002d1c <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    2d1c:	b530      	push	{r4, r5, lr}
    2d1e:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    2d20:	4b56      	ldr	r3, [pc, #344]	; (2e7c <nwkSecurityTaskHandler+0x160>)
    2d22:	781b      	ldrb	r3, [r3, #0]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d100      	bne.n	2d2a <nwkSecurityTaskHandler+0xe>
    2d28:	e0a5      	b.n	2e76 <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    2d2a:	4b55      	ldr	r3, [pc, #340]	; (2e80 <nwkSecurityTaskHandler+0x164>)
    2d2c:	681c      	ldr	r4, [r3, #0]
    2d2e:	2c00      	cmp	r4, #0
    2d30:	d100      	bne.n	2d34 <nwkSecurityTaskHandler+0x18>
    2d32:	e09b      	b.n	2e6c <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    2d34:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    2d36:	2b34      	cmp	r3, #52	; 0x34
    2d38:	d145      	bne.n	2dc6 <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2d3a:	2381      	movs	r3, #129	; 0x81
    2d3c:	5ce3      	ldrb	r3, [r4, r3]
    2d3e:	2282      	movs	r2, #130	; 0x82
    2d40:	5ca1      	ldrb	r1, [r4, r2]
    2d42:	0209      	lsls	r1, r1, #8
    2d44:	4319      	orrs	r1, r3
    2d46:	2383      	movs	r3, #131	; 0x83
    2d48:	5ce3      	ldrb	r3, [r4, r3]
    2d4a:	041b      	lsls	r3, r3, #16
    2d4c:	4319      	orrs	r1, r3
    2d4e:	2384      	movs	r3, #132	; 0x84
    2d50:	5ce3      	ldrb	r3, [r4, r3]
    2d52:	061b      	lsls	r3, r3, #24
    2d54:	4319      	orrs	r1, r3
    2d56:	4b4b      	ldr	r3, [pc, #300]	; (2e84 <nwkSecurityTaskHandler+0x168>)
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2d5c:	4b4a      	ldr	r3, [pc, #296]	; (2e88 <nwkSecurityTaskHandler+0x16c>)
    2d5e:	685d      	ldr	r5, [r3, #4]
    2d60:	681a      	ldr	r2, [r3, #0]
    2d62:	4055      	eors	r5, r2
    2d64:	689a      	ldr	r2, [r3, #8]
    2d66:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    2d68:	68db      	ldr	r3, [r3, #12]
    2d6a:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2d6c:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    2d6e:	4b47      	ldr	r3, [pc, #284]	; (2e8c <nwkSecurityTaskHandler+0x170>)
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d009      	beq.n	2d8a <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    2d76:	1c08      	adds	r0, r1, #0
    2d78:	4669      	mov	r1, sp
    2d7a:	2204      	movs	r2, #4
    2d7c:	4b44      	ldr	r3, [pc, #272]	; (2e90 <nwkSecurityTaskHandler+0x174>)
    2d7e:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    2d80:	7863      	ldrb	r3, [r4, #1]
    2d82:	3304      	adds	r3, #4
    2d84:	7063      	strb	r3, [r4, #1]
		return true;
    2d86:	2101      	movs	r1, #1
    2d88:	e008      	b.n	2d9c <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    2d8a:	a801      	add	r0, sp, #4
    2d8c:	2204      	movs	r2, #4
    2d8e:	4b40      	ldr	r3, [pc, #256]	; (2e90 <nwkSecurityTaskHandler+0x174>)
    2d90:	4798      	blx	r3
		return vmic == tmic;
    2d92:	9b01      	ldr	r3, [sp, #4]
    2d94:	1ae9      	subs	r1, r5, r3
    2d96:	424d      	negs	r5, r1
    2d98:	4169      	adcs	r1, r5
    2d9a:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    2d9c:	4b3b      	ldr	r3, [pc, #236]	; (2e8c <nwkSecurityTaskHandler+0x170>)
    2d9e:	781b      	ldrb	r3, [r3, #0]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d004      	beq.n	2dae <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    2da4:	4b36      	ldr	r3, [pc, #216]	; (2e80 <nwkSecurityTaskHandler+0x164>)
    2da6:	6818      	ldr	r0, [r3, #0]
    2da8:	4b3a      	ldr	r3, [pc, #232]	; (2e94 <nwkSecurityTaskHandler+0x178>)
    2daa:	4798      	blx	r3
    2dac:	e003      	b.n	2db6 <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    2dae:	4b34      	ldr	r3, [pc, #208]	; (2e80 <nwkSecurityTaskHandler+0x164>)
    2db0:	6818      	ldr	r0, [r3, #0]
    2db2:	4b39      	ldr	r3, [pc, #228]	; (2e98 <nwkSecurityTaskHandler+0x17c>)
    2db4:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    2db6:	2200      	movs	r2, #0
    2db8:	4b31      	ldr	r3, [pc, #196]	; (2e80 <nwkSecurityTaskHandler+0x164>)
    2dba:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    2dbc:	4b2f      	ldr	r3, [pc, #188]	; (2e7c <nwkSecurityTaskHandler+0x160>)
    2dbe:	781a      	ldrb	r2, [r3, #0]
    2dc0:	3a01      	subs	r2, #1
    2dc2:	701a      	strb	r2, [r3, #0]
    2dc4:	e057      	b.n	2e76 <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    2dc6:	2b32      	cmp	r3, #50	; 0x32
    2dc8:	d155      	bne.n	2e76 <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    2dca:	2333      	movs	r3, #51	; 0x33
    2dcc:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    2dce:	482e      	ldr	r0, [pc, #184]	; (2e88 <nwkSecurityTaskHandler+0x16c>)
    2dd0:	4932      	ldr	r1, [pc, #200]	; (2e9c <nwkSecurityTaskHandler+0x180>)
    2dd2:	4b33      	ldr	r3, [pc, #204]	; (2ea0 <nwkSecurityTaskHandler+0x184>)
    2dd4:	4798      	blx	r3
    2dd6:	e04e      	b.n	2e76 <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    2dd8:	7803      	ldrb	r3, [r0, #0]
    2dda:	3b30      	subs	r3, #48	; 0x30
    2ddc:	2b01      	cmp	r3, #1
    2dde:	d847      	bhi.n	2e70 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    2de0:	4b27      	ldr	r3, [pc, #156]	; (2e80 <nwkSecurityTaskHandler+0x164>)
    2de2:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    2de4:	4a28      	ldr	r2, [pc, #160]	; (2e88 <nwkSecurityTaskHandler+0x16c>)
    2de6:	7b01      	ldrb	r1, [r0, #12]
    2de8:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2dea:	7bc1      	ldrb	r1, [r0, #15]
    2dec:	7c04      	ldrb	r4, [r0, #16]
    2dee:	0224      	lsls	r4, r4, #8
    2df0:	430c      	orrs	r4, r1
    2df2:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    2df4:	7c41      	ldrb	r1, [r0, #17]
    2df6:	0909      	lsrs	r1, r1, #4
    2df8:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2dfa:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2dfc:	7b41      	ldrb	r1, [r0, #13]
    2dfe:	7b84      	ldrb	r4, [r0, #14]
    2e00:	0224      	lsls	r4, r4, #8
    2e02:	430c      	orrs	r4, r1
    2e04:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    2e06:	7c41      	ldrb	r1, [r0, #17]
    2e08:	0709      	lsls	r1, r1, #28
    2e0a:	0f09      	lsrs	r1, r1, #28
    2e0c:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2e0e:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    2e10:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2e12:	7944      	ldrb	r4, [r0, #5]
    2e14:	7983      	ldrb	r3, [r0, #6]
    2e16:	021b      	lsls	r3, r3, #8
    2e18:	4323      	orrs	r3, r4
    2e1a:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    2e1c:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2e1e:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    2e20:	7803      	ldrb	r3, [r0, #0]
    2e22:	2b31      	cmp	r3, #49	; 0x31
    2e24:	d102      	bne.n	2e2c <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    2e26:	7843      	ldrb	r3, [r0, #1]
    2e28:	3b04      	subs	r3, #4
    2e2a:	7043      	strb	r3, [r0, #1]
    2e2c:	1c83      	adds	r3, r0, #2
    2e2e:	2281      	movs	r2, #129	; 0x81
    2e30:	5c81      	ldrb	r1, [r0, r2]
    2e32:	2282      	movs	r2, #130	; 0x82
    2e34:	5c82      	ldrb	r2, [r0, r2]
    2e36:	0212      	lsls	r2, r2, #8
    2e38:	430a      	orrs	r2, r1
    2e3a:	2183      	movs	r1, #131	; 0x83
    2e3c:	5c41      	ldrb	r1, [r0, r1]
    2e3e:	0409      	lsls	r1, r1, #16
    2e40:	430a      	orrs	r2, r1
    2e42:	2184      	movs	r1, #132	; 0x84
    2e44:	5c41      	ldrb	r1, [r0, r1]
    2e46:	0609      	lsls	r1, r1, #24
    2e48:	430a      	orrs	r2, r1
    2e4a:	1a9a      	subs	r2, r3, r2
    2e4c:	7843      	ldrb	r3, [r0, #1]
    2e4e:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    2e50:	4b14      	ldr	r3, [pc, #80]	; (2ea4 <nwkSecurityTaskHandler+0x188>)
    2e52:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    2e54:	2200      	movs	r2, #0
    2e56:	4b0b      	ldr	r3, [pc, #44]	; (2e84 <nwkSecurityTaskHandler+0x168>)
    2e58:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    2e5a:	7802      	ldrb	r2, [r0, #0]
    2e5c:	3a30      	subs	r2, #48	; 0x30
    2e5e:	4253      	negs	r3, r2
    2e60:	415a      	adcs	r2, r3
    2e62:	4b0a      	ldr	r3, [pc, #40]	; (2e8c <nwkSecurityTaskHandler+0x170>)
    2e64:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2e66:	2332      	movs	r3, #50	; 0x32
    2e68:	7003      	strb	r3, [r0, #0]
    2e6a:	e004      	b.n	2e76 <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    2e6c:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2e6e:	4c0e      	ldr	r4, [pc, #56]	; (2ea8 <nwkSecurityTaskHandler+0x18c>)
    2e70:	47a0      	blx	r4
    2e72:	2800      	cmp	r0, #0
    2e74:	d1b0      	bne.n	2dd8 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    2e76:	b003      	add	sp, #12
    2e78:	bd30      	pop	{r4, r5, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	20000b00 	.word	0x20000b00
    2e80:	20000b04 	.word	0x20000b04
    2e84:	20000b08 	.word	0x20000b08
    2e88:	20000b0c 	.word	0x20000b0c
    2e8c:	20000b0a 	.word	0x20000b0a
    2e90:	00004e25 	.word	0x00004e25
    2e94:	00003125 	.word	0x00003125
    2e98:	00002849 	.word	0x00002849
    2e9c:	20000d14 	.word	0x20000d14
    2ea0:	00003585 	.word	0x00003585
    2ea4:	20000b09 	.word	0x20000b09
    2ea8:	00001f05 	.word	0x00001f05

00002eac <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eae:	4647      	mov	r7, r8
    2eb0:	b480      	push	{r7}
    2eb2:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2eb4:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2eb6:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2eb8:	4c0f      	ldr	r4, [pc, #60]	; (2ef8 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2eba:	2686      	movs	r6, #134	; 0x86
    2ebc:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ebe:	e010      	b.n	2ee2 <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2ec0:	7803      	ldrb	r3, [r0, #0]
    2ec2:	2b11      	cmp	r3, #17
    2ec4:	d10d      	bne.n	2ee2 <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2ec6:	5d82      	ldrb	r2, [r0, r6]
    2ec8:	5d43      	ldrb	r3, [r0, r5]
    2eca:	021b      	lsls	r3, r3, #8
    2ecc:	4313      	orrs	r3, r2
    2ece:	3b01      	subs	r3, #1
    2ed0:	b29b      	uxth	r3, r3
    2ed2:	5583      	strb	r3, [r0, r6]
    2ed4:	0a1a      	lsrs	r2, r3, #8
    2ed6:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2ed8:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2eda:	2b00      	cmp	r3, #0
    2edc:	d101      	bne.n	2ee2 <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    2ede:	2313      	movs	r3, #19
    2ee0:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ee2:	47a0      	blx	r4
    2ee4:	2800      	cmp	r0, #0
    2ee6:	d1eb      	bne.n	2ec0 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2ee8:	2f00      	cmp	r7, #0
    2eea:	d002      	beq.n	2ef2 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    2eec:	4640      	mov	r0, r8
    2eee:	4b03      	ldr	r3, [pc, #12]	; (2efc <nwkTxDelayTimerHandler+0x50>)
    2ef0:	4798      	blx	r3
	}
}
    2ef2:	bc04      	pop	{r2}
    2ef4:	4690      	mov	r8, r2
    2ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ef8:	00001f05 	.word	0x00001f05
    2efc:	00003699 	.word	0x00003699

00002f00 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f02:	4647      	mov	r7, r8
    2f04:	b480      	push	{r7}
    2f06:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2f08:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2f0a:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2f0c:	4c11      	ldr	r4, [pc, #68]	; (2f54 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2f0e:	2686      	movs	r6, #134	; 0x86
    2f10:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2f12:	e013      	b.n	2f3c <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2f14:	7803      	ldrb	r3, [r0, #0]
    2f16:	2b16      	cmp	r3, #22
    2f18:	d110      	bne.n	2f3c <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2f1a:	5d82      	ldrb	r2, [r0, r6]
    2f1c:	5d43      	ldrb	r3, [r0, r5]
    2f1e:	021b      	lsls	r3, r3, #8
    2f20:	4313      	orrs	r3, r2
    2f22:	3b01      	subs	r3, #1
    2f24:	b29b      	uxth	r3, r3
    2f26:	5583      	strb	r3, [r0, r6]
    2f28:	0a1a      	lsrs	r2, r3, #8
    2f2a:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2f2c:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2f2e:	2b00      	cmp	r3, #0
    2f30:	d104      	bne.n	2f3c <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2f32:	2317      	movs	r3, #23
    2f34:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2f36:	2210      	movs	r2, #16
    2f38:	2385      	movs	r3, #133	; 0x85
    2f3a:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2f3c:	47a0      	blx	r4
    2f3e:	2800      	cmp	r0, #0
    2f40:	d1e8      	bne.n	2f14 <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2f42:	2f00      	cmp	r7, #0
    2f44:	d002      	beq.n	2f4c <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    2f46:	4640      	mov	r0, r8
    2f48:	4b03      	ldr	r3, [pc, #12]	; (2f58 <nwkTxAckWaitTimerHandler+0x58>)
    2f4a:	4798      	blx	r3
	}
}
    2f4c:	bc04      	pop	{r2}
    2f4e:	4690      	mov	r8, r2
    2f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	00001f05 	.word	0x00001f05
    2f58:	00003699 	.word	0x00003699

00002f5c <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    2f5c:	2200      	movs	r2, #0
    2f5e:	4b07      	ldr	r3, [pc, #28]	; (2f7c <nwkTxInit+0x20>)
    2f60:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2f62:	4b07      	ldr	r3, [pc, #28]	; (2f80 <nwkTxInit+0x24>)
    2f64:	2132      	movs	r1, #50	; 0x32
    2f66:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2f68:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2f6a:	4906      	ldr	r1, [pc, #24]	; (2f84 <nwkTxInit+0x28>)
    2f6c:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2f6e:	4b06      	ldr	r3, [pc, #24]	; (2f88 <nwkTxInit+0x2c>)
    2f70:	210a      	movs	r1, #10
    2f72:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2f74:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2f76:	4a05      	ldr	r2, [pc, #20]	; (2f8c <nwkTxInit+0x30>)
    2f78:	611a      	str	r2, [r3, #16]
}
    2f7a:	4770      	bx	lr
    2f7c:	20000b30 	.word	0x20000b30
    2f80:	20000b1c 	.word	0x20000b1c
    2f84:	00002f01 	.word	0x00002f01
    2f88:	20000b34 	.word	0x20000b34
    2f8c:	00002ead 	.word	0x00002ead

00002f90 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    2f90:	b510      	push	{r4, lr}
    2f92:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    2f94:	2388      	movs	r3, #136	; 0x88
    2f96:	5cc3      	ldrb	r3, [r0, r3]
    2f98:	0799      	lsls	r1, r3, #30
    2f9a:	d502      	bpl.n	2fa2 <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    2f9c:	2212      	movs	r2, #18
    2f9e:	7002      	strb	r2, [r0, #0]
    2fa0:	e007      	b.n	2fb2 <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    2fa2:	7ac2      	ldrb	r2, [r0, #11]
    2fa4:	0791      	lsls	r1, r2, #30
    2fa6:	d502      	bpl.n	2fae <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    2fa8:	2210      	movs	r2, #16
    2faa:	7002      	strb	r2, [r0, #0]
    2fac:	e001      	b.n	2fb2 <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    2fae:	2212      	movs	r2, #18
    2fb0:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    2fb2:	2100      	movs	r1, #0
    2fb4:	2285      	movs	r2, #133	; 0x85
    2fb6:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    2fb8:	07da      	lsls	r2, r3, #31
    2fba:	d504      	bpl.n	2fc6 <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    2fbc:	2101      	movs	r1, #1
    2fbe:	4249      	negs	r1, r1
    2fc0:	7161      	strb	r1, [r4, #5]
    2fc2:	71a1      	strb	r1, [r4, #6]
    2fc4:	e004      	b.n	2fd0 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    2fc6:	491e      	ldr	r1, [pc, #120]	; (3040 <nwkTxFrame+0xb0>)
    2fc8:	7888      	ldrb	r0, [r1, #2]
    2fca:	7160      	strb	r0, [r4, #5]
    2fcc:	78c9      	ldrb	r1, [r1, #3]
    2fce:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    2fd0:	2205      	movs	r2, #5
    2fd2:	421a      	tst	r2, r3
    2fd4:	d103      	bne.n	2fde <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    2fd6:	1c20      	adds	r0, r4, #0
    2fd8:	4b1a      	ldr	r3, [pc, #104]	; (3044 <nwkTxFrame+0xb4>)
    2fda:	4798      	blx	r3
    2fdc:	e003      	b.n	2fe6 <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    2fde:	7be1      	ldrb	r1, [r4, #15]
    2fe0:	7c22      	ldrb	r2, [r4, #16]
    2fe2:	71e1      	strb	r1, [r4, #7]
    2fe4:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    2fe6:	4a16      	ldr	r2, [pc, #88]	; (3040 <nwkTxFrame+0xb0>)
    2fe8:	7811      	ldrb	r1, [r2, #0]
    2fea:	7261      	strb	r1, [r4, #9]
    2fec:	7851      	ldrb	r1, [r2, #1]
    2fee:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    2ff0:	7951      	ldrb	r1, [r2, #5]
    2ff2:	3101      	adds	r1, #1
    2ff4:	b2c9      	uxtb	r1, r1
    2ff6:	7151      	strb	r1, [r2, #5]
    2ff8:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    2ffa:	79e1      	ldrb	r1, [r4, #7]
    2ffc:	7a22      	ldrb	r2, [r4, #8]
    2ffe:	0212      	lsls	r2, r2, #8
    3000:	430a      	orrs	r2, r1
    3002:	4b11      	ldr	r3, [pc, #68]	; (3048 <nwkTxFrame+0xb8>)
    3004:	429a      	cmp	r2, r3
    3006:	d110      	bne.n	302a <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    3008:	2341      	movs	r3, #65	; 0x41
    300a:	70a3      	strb	r3, [r4, #2]
    300c:	2378      	movs	r3, #120	; 0x78
    300e:	425b      	negs	r3, r3
    3010:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3012:	4b0e      	ldr	r3, [pc, #56]	; (304c <nwkTxFrame+0xbc>)
    3014:	4798      	blx	r3
    3016:	2307      	movs	r3, #7
    3018:	4018      	ands	r0, r3
    301a:	3001      	adds	r0, #1
    301c:	2386      	movs	r3, #134	; 0x86
    301e:	54e0      	strb	r0, [r4, r3]
    3020:	0a00      	lsrs	r0, r0, #8
    3022:	b280      	uxth	r0, r0
    3024:	2387      	movs	r3, #135	; 0x87
    3026:	54e0      	strb	r0, [r4, r3]
    3028:	e009      	b.n	303e <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    302a:	2361      	movs	r3, #97	; 0x61
    302c:	70a3      	strb	r3, [r4, #2]
    302e:	2378      	movs	r3, #120	; 0x78
    3030:	425b      	negs	r3, r3
    3032:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    3034:	2200      	movs	r2, #0
    3036:	2386      	movs	r3, #134	; 0x86
    3038:	54e2      	strb	r2, [r4, r3]
    303a:	2387      	movs	r3, #135	; 0x87
    303c:	54e2      	strb	r2, [r4, r3]
	}
}
    303e:	bd10      	pop	{r4, pc}
    3040:	20000ccc 	.word	0x20000ccc
    3044:	00002131 	.word	0x00002131
    3048:	0000ffff 	.word	0x0000ffff
    304c:	00004e81 	.word	0x00004e81

00003050 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    3050:	b538      	push	{r3, r4, r5, lr}
    3052:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    3054:	4b1d      	ldr	r3, [pc, #116]	; (30cc <nwkTxBroadcastFrame+0x7c>)
    3056:	4798      	blx	r3
    3058:	1e04      	subs	r4, r0, #0
    305a:	d036      	beq.n	30ca <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    305c:	2312      	movs	r3, #18
    305e:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    3060:	786b      	ldrb	r3, [r5, #1]
    3062:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    3064:	2200      	movs	r2, #0
    3066:	2385      	movs	r3, #133	; 0x85
    3068:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    306a:	4b19      	ldr	r3, [pc, #100]	; (30d0 <nwkTxBroadcastFrame+0x80>)
    306c:	4798      	blx	r3
    306e:	2307      	movs	r3, #7
    3070:	4018      	ands	r0, r3
    3072:	3001      	adds	r0, #1
    3074:	2386      	movs	r3, #134	; 0x86
    3076:	54e0      	strb	r0, [r4, r3]
    3078:	0a00      	lsrs	r0, r0, #8
    307a:	b280      	uxth	r0, r0
    307c:	2387      	movs	r3, #135	; 0x87
    307e:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    3080:	2200      	movs	r2, #0
    3082:	2389      	movs	r3, #137	; 0x89
    3084:	54e2      	strb	r2, [r4, r3]
    3086:	238a      	movs	r3, #138	; 0x8a
    3088:	54e2      	strb	r2, [r4, r3]
    308a:	238b      	movs	r3, #139	; 0x8b
    308c:	54e2      	strb	r2, [r4, r3]
    308e:	238c      	movs	r3, #140	; 0x8c
    3090:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    3092:	1ca0      	adds	r0, r4, #2
    3094:	786a      	ldrb	r2, [r5, #1]
    3096:	1ca9      	adds	r1, r5, #2
    3098:	4b0e      	ldr	r3, [pc, #56]	; (30d4 <nwkTxBroadcastFrame+0x84>)
    309a:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    309c:	2341      	movs	r3, #65	; 0x41
    309e:	70a3      	strb	r3, [r4, #2]
    30a0:	2378      	movs	r3, #120	; 0x78
    30a2:	425b      	negs	r3, r3
    30a4:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    30a6:	2301      	movs	r3, #1
    30a8:	425b      	negs	r3, r3
    30aa:	71e3      	strb	r3, [r4, #7]
    30ac:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    30ae:	796a      	ldrb	r2, [r5, #5]
    30b0:	79ab      	ldrb	r3, [r5, #6]
    30b2:	7162      	strb	r2, [r4, #5]
    30b4:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    30b6:	4b08      	ldr	r3, [pc, #32]	; (30d8 <nwkTxBroadcastFrame+0x88>)
    30b8:	781a      	ldrb	r2, [r3, #0]
    30ba:	7262      	strb	r2, [r4, #9]
    30bc:	785a      	ldrb	r2, [r3, #1]
    30be:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    30c0:	795a      	ldrb	r2, [r3, #5]
    30c2:	3201      	adds	r2, #1
    30c4:	b2d2      	uxtb	r2, r2
    30c6:	715a      	strb	r2, [r3, #5]
    30c8:	7122      	strb	r2, [r4, #4]
}
    30ca:	bd38      	pop	{r3, r4, r5, pc}
    30cc:	00001e81 	.word	0x00001e81
    30d0:	00004e81 	.word	0x00004e81
    30d4:	00004e25 	.word	0x00004e25
    30d8:	20000ccc 	.word	0x20000ccc

000030dc <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    30dc:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    30de:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    30e0:	7b03      	ldrb	r3, [r0, #12]
		return false;
    30e2:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    30e4:	2b03      	cmp	r3, #3
    30e6:	d113      	bne.n	3110 <nwkTxAckReceived+0x34>
    30e8:	e00d      	b.n	3106 <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    30ea:	7803      	ldrb	r3, [r0, #0]
    30ec:	2b16      	cmp	r3, #22
    30ee:	d10c      	bne.n	310a <nwkTxAckReceived+0x2e>
    30f0:	7b02      	ldrb	r2, [r0, #12]
    30f2:	786b      	ldrb	r3, [r5, #1]
    30f4:	429a      	cmp	r2, r3
    30f6:	d108      	bne.n	310a <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    30f8:	2317      	movs	r3, #23
    30fa:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    30fc:	78aa      	ldrb	r2, [r5, #2]
    30fe:	2388      	movs	r3, #136	; 0x88
    3100:	54c2      	strb	r2, [r0, r3]
			return true;
    3102:	2001      	movs	r0, #1
    3104:	e004      	b.n	3110 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    3106:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3108:	4c02      	ldr	r4, [pc, #8]	; (3114 <nwkTxAckReceived+0x38>)
    310a:	47a0      	blx	r4
    310c:	2800      	cmp	r0, #0
    310e:	d1ec      	bne.n	30ea <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    3110:	bd38      	pop	{r3, r4, r5, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	00001f05 	.word	0x00001f05

00003118 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    3118:	2317      	movs	r3, #23
    311a:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    311c:	2385      	movs	r3, #133	; 0x85
    311e:	54c1      	strb	r1, [r0, r3]
}
    3120:	4770      	bx	lr
    3122:	46c0      	nop			; (mov r8, r8)

00003124 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    3124:	2312      	movs	r3, #18
    3126:	7003      	strb	r3, [r0, #0]
}
    3128:	4770      	bx	lr
    312a:	46c0      	nop			; (mov r8, r8)

0000312c <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    312c:	4b0d      	ldr	r3, [pc, #52]	; (3164 <PHY_DataConf+0x38>)
    312e:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    3130:	2801      	cmp	r0, #1
    3132:	d009      	beq.n	3148 <PHY_DataConf+0x1c>
    3134:	2800      	cmp	r0, #0
    3136:	d003      	beq.n	3140 <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    3138:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    313a:	2802      	cmp	r0, #2
    313c:	d005      	beq.n	314a <PHY_DataConf+0x1e>
    313e:	e001      	b.n	3144 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    3140:	2200      	movs	r2, #0
    3142:	e002      	b.n	314a <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    3144:	2201      	movs	r2, #1
    3146:	e000      	b.n	314a <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    3148:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    314a:	2185      	movs	r1, #133	; 0x85
    314c:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    314e:	2215      	movs	r2, #21
    3150:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    3152:	2200      	movs	r2, #0
    3154:	4b03      	ldr	r3, [pc, #12]	; (3164 <PHY_DataConf+0x38>)
    3156:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    3158:	4a03      	ldr	r2, [pc, #12]	; (3168 <PHY_DataConf+0x3c>)
    315a:	2358      	movs	r3, #88	; 0x58
    315c:	5ad1      	ldrh	r1, [r2, r3]
    315e:	3901      	subs	r1, #1
    3160:	52d1      	strh	r1, [r2, r3]
}
    3162:	4770      	bx	lr
    3164:	20000b30 	.word	0x20000b30
    3168:	20000ccc 	.word	0x20000ccc

0000316c <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    316c:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    316e:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    3170:	4d37      	ldr	r5, [pc, #220]	; (3250 <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    3172:	4e38      	ldr	r6, [pc, #224]	; (3254 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3174:	e066      	b.n	3244 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    3176:	7823      	ldrb	r3, [r4, #0]
    3178:	3b10      	subs	r3, #16
    317a:	b2da      	uxtb	r2, r3
    317c:	2a07      	cmp	r2, #7
    317e:	d861      	bhi.n	3244 <nwkTxTaskHandler+0xd8>
    3180:	0093      	lsls	r3, r2, #2
    3182:	58f3      	ldr	r3, [r6, r3]
    3184:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    3186:	1c20      	adds	r0, r4, #0
    3188:	2101      	movs	r1, #1
    318a:	4b33      	ldr	r3, [pc, #204]	; (3258 <nwkTxTaskHandler+0xec>)
    318c:	4798      	blx	r3
		}
		break;
    318e:	e059      	b.n	3244 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    3190:	2386      	movs	r3, #134	; 0x86
    3192:	5ce2      	ldrb	r2, [r4, r3]
    3194:	2387      	movs	r3, #135	; 0x87
    3196:	5ce3      	ldrb	r3, [r4, r3]
    3198:	021b      	lsls	r3, r3, #8
    319a:	4313      	orrs	r3, r2
    319c:	d005      	beq.n	31aa <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    319e:	2311      	movs	r3, #17
    31a0:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    31a2:	482e      	ldr	r0, [pc, #184]	; (325c <nwkTxTaskHandler+0xf0>)
    31a4:	4b2e      	ldr	r3, [pc, #184]	; (3260 <nwkTxTaskHandler+0xf4>)
    31a6:	4798      	blx	r3
    31a8:	e04c      	b.n	3244 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    31aa:	2313      	movs	r3, #19
    31ac:	7023      	strb	r3, [r4, #0]
    31ae:	e049      	b.n	3244 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    31b0:	4b2c      	ldr	r3, [pc, #176]	; (3264 <nwkTxTaskHandler+0xf8>)
    31b2:	681b      	ldr	r3, [r3, #0]
    31b4:	2b00      	cmp	r3, #0
    31b6:	d145      	bne.n	3244 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    31b8:	4b2a      	ldr	r3, [pc, #168]	; (3264 <nwkTxTaskHandler+0xf8>)
    31ba:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    31bc:	2314      	movs	r3, #20
    31be:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    31c0:	1c60      	adds	r0, r4, #1
    31c2:	4b29      	ldr	r3, [pc, #164]	; (3268 <nwkTxTaskHandler+0xfc>)
    31c4:	4798      	blx	r3
				nwkIb.lock++;
    31c6:	4a29      	ldr	r2, [pc, #164]	; (326c <nwkTxTaskHandler+0x100>)
    31c8:	2358      	movs	r3, #88	; 0x58
    31ca:	5ad1      	ldrh	r1, [r2, r3]
    31cc:	3101      	adds	r1, #1
    31ce:	52d1      	strh	r1, [r2, r3]
    31d0:	e038      	b.n	3244 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    31d2:	2385      	movs	r3, #133	; 0x85
    31d4:	5ce3      	ldrb	r3, [r4, r3]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d119      	bne.n	320e <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    31da:	7b61      	ldrb	r1, [r4, #13]
    31dc:	7ba3      	ldrb	r3, [r4, #14]
    31de:	021b      	lsls	r3, r3, #8
    31e0:	4a22      	ldr	r2, [pc, #136]	; (326c <nwkTxTaskHandler+0x100>)
    31e2:	8812      	ldrh	r2, [r2, #0]
    31e4:	430b      	orrs	r3, r1
    31e6:	429a      	cmp	r2, r3
    31e8:	d10e      	bne.n	3208 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    31ea:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    31ec:	07da      	lsls	r2, r3, #31
    31ee:	d50b      	bpl.n	3208 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    31f0:	2316      	movs	r3, #22
    31f2:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    31f4:	2215      	movs	r2, #21
    31f6:	2386      	movs	r3, #134	; 0x86
    31f8:	54e2      	strb	r2, [r4, r3]
    31fa:	2200      	movs	r2, #0
    31fc:	2387      	movs	r3, #135	; 0x87
    31fe:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    3200:	481b      	ldr	r0, [pc, #108]	; (3270 <nwkTxTaskHandler+0x104>)
    3202:	4b17      	ldr	r3, [pc, #92]	; (3260 <nwkTxTaskHandler+0xf4>)
    3204:	4798      	blx	r3
    3206:	e01d      	b.n	3244 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    3208:	2317      	movs	r3, #23
    320a:	7023      	strb	r3, [r4, #0]
    320c:	e01a      	b.n	3244 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    320e:	2317      	movs	r3, #23
    3210:	7023      	strb	r3, [r4, #0]
    3212:	e017      	b.n	3244 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    3214:	1c20      	adds	r0, r4, #0
    3216:	4b17      	ldr	r3, [pc, #92]	; (3274 <nwkTxTaskHandler+0x108>)
    3218:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    321a:	2389      	movs	r3, #137	; 0x89
    321c:	5ce2      	ldrb	r2, [r4, r3]
    321e:	238a      	movs	r3, #138	; 0x8a
    3220:	5ce3      	ldrb	r3, [r4, r3]
    3222:	021b      	lsls	r3, r3, #8
    3224:	4313      	orrs	r3, r2
    3226:	228b      	movs	r2, #139	; 0x8b
    3228:	5ca2      	ldrb	r2, [r4, r2]
    322a:	0412      	lsls	r2, r2, #16
    322c:	4313      	orrs	r3, r2
    322e:	228c      	movs	r2, #140	; 0x8c
    3230:	5ca2      	ldrb	r2, [r4, r2]
    3232:	0612      	lsls	r2, r2, #24
    3234:	4313      	orrs	r3, r2
    3236:	d103      	bne.n	3240 <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    3238:	1c20      	adds	r0, r4, #0
    323a:	4b0f      	ldr	r3, [pc, #60]	; (3278 <nwkTxTaskHandler+0x10c>)
    323c:	4798      	blx	r3
    323e:	e001      	b.n	3244 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    3240:	1c20      	adds	r0, r4, #0
    3242:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3244:	1c20      	adds	r0, r4, #0
    3246:	47a8      	blx	r5
    3248:	1e04      	subs	r4, r0, #0
    324a:	d194      	bne.n	3176 <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    324c:	bd70      	pop	{r4, r5, r6, pc}
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	00001f05 	.word	0x00001f05
    3254:	00005f4c 	.word	0x00005f4c
    3258:	00002c55 	.word	0x00002c55
    325c:	20000b34 	.word	0x20000b34
    3260:	00003699 	.word	0x00003699
    3264:	20000b30 	.word	0x20000b30
    3268:	000033e1 	.word	0x000033e1
    326c:	20000ccc 	.word	0x20000ccc
    3270:	20000b1c 	.word	0x20000b1c
    3274:	000020a1 	.word	0x000020a1
    3278:	00001ef1 	.word	0x00001ef1

0000327c <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    327e:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3280:	4f0b      	ldr	r7, [pc, #44]	; (32b0 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3282:	4e0c      	ldr	r6, [pc, #48]	; (32b4 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3284:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3286:	2002      	movs	r0, #2
    3288:	2103      	movs	r1, #3
    328a:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    328c:	2001      	movs	r0, #1
    328e:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3290:	4028      	ands	r0, r5
    3292:	2808      	cmp	r0, #8
    3294:	d1f7      	bne.n	3286 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3296:	4f06      	ldr	r7, [pc, #24]	; (32b0 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3298:	4e06      	ldr	r6, [pc, #24]	; (32b4 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    329a:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    329c:	2002      	movs	r0, #2
    329e:	1c21      	adds	r1, r4, #0
    32a0:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    32a2:	2001      	movs	r0, #1
    32a4:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    32a6:	4028      	ands	r0, r5
    32a8:	4284      	cmp	r4, r0
    32aa:	d1f7      	bne.n	329c <phyTrxSetState+0x20>
}
    32ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	00003b21 	.word	0x00003b21
    32b4:	00003a29 	.word	0x00003a29

000032b8 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    32b8:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    32ba:	2008      	movs	r0, #8
    32bc:	4b06      	ldr	r3, [pc, #24]	; (32d8 <phySetRxState+0x20>)
    32be:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    32c0:	200f      	movs	r0, #15
    32c2:	4b06      	ldr	r3, [pc, #24]	; (32dc <phySetRxState+0x24>)
    32c4:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    32c6:	4b06      	ldr	r3, [pc, #24]	; (32e0 <phySetRxState+0x28>)
    32c8:	781b      	ldrb	r3, [r3, #0]
    32ca:	2b00      	cmp	r3, #0
    32cc:	d002      	beq.n	32d4 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    32ce:	2016      	movs	r0, #22
    32d0:	4b01      	ldr	r3, [pc, #4]	; (32d8 <phySetRxState+0x20>)
    32d2:	4798      	blx	r3
	}
}
    32d4:	bd08      	pop	{r3, pc}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	0000327d 	.word	0x0000327d
    32dc:	00003a29 	.word	0x00003a29
    32e0:	20000bc9 	.word	0x20000bc9

000032e4 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    32e4:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    32e6:	4b0e      	ldr	r3, [pc, #56]	; (3320 <PHY_Init+0x3c>)
    32e8:	4798      	blx	r3
	PhyReset();
    32ea:	4b0e      	ldr	r3, [pc, #56]	; (3324 <PHY_Init+0x40>)
    32ec:	4798      	blx	r3
	phyRxState = false;
    32ee:	2200      	movs	r2, #0
    32f0:	4b0d      	ldr	r3, [pc, #52]	; (3328 <PHY_Init+0x44>)
    32f2:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    32f4:	2201      	movs	r2, #1
    32f6:	4b0d      	ldr	r3, [pc, #52]	; (332c <PHY_Init+0x48>)
    32f8:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    32fa:	4e0d      	ldr	r6, [pc, #52]	; (3330 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    32fc:	4d0d      	ldr	r5, [pc, #52]	; (3334 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    32fe:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3300:	2002      	movs	r0, #2
    3302:	2108      	movs	r1, #8
    3304:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3306:	2001      	movs	r0, #1
    3308:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    330a:	4020      	ands	r0, r4
    330c:	2808      	cmp	r0, #8
    330e:	d1f7      	bne.n	3300 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3310:	2004      	movs	r0, #4
    3312:	212e      	movs	r1, #46	; 0x2e
    3314:	4c06      	ldr	r4, [pc, #24]	; (3330 <PHY_Init+0x4c>)
    3316:	47a0      	blx	r4
    3318:	200c      	movs	r0, #12
    331a:	2180      	movs	r1, #128	; 0x80
    331c:	47a0      	blx	r4
	phyWriteRegister(TRX_CTRL_1_REG,
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG, (1 << RX_SAFE_MODE));
}
    331e:	bd70      	pop	{r4, r5, r6, pc}
    3320:	000038d5 	.word	0x000038d5
    3324:	000039f9 	.word	0x000039f9
    3328:	20000bc9 	.word	0x20000bc9
    332c:	20000bc8 	.word	0x20000bc8
    3330:	00003b21 	.word	0x00003b21
    3334:	00003a29 	.word	0x00003a29

00003338 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    3338:	b508      	push	{r3, lr}
	phyRxState = rx;
    333a:	4b02      	ldr	r3, [pc, #8]	; (3344 <PHY_SetRxState+0xc>)
    333c:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    333e:	4b02      	ldr	r3, [pc, #8]	; (3348 <PHY_SetRxState+0x10>)
    3340:	4798      	blx	r3
}
    3342:	bd08      	pop	{r3, pc}
    3344:	20000bc9 	.word	0x20000bc9
    3348:	000032b9 	.word	0x000032b9

0000334c <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    334c:	b510      	push	{r4, lr}
    334e:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3350:	2008      	movs	r0, #8
    3352:	4b05      	ldr	r3, [pc, #20]	; (3368 <PHY_SetChannel+0x1c>)
    3354:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    3356:	231f      	movs	r3, #31
    3358:	1c01      	adds	r1, r0, #0
    335a:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    335c:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    335e:	b2e1      	uxtb	r1, r4
    3360:	2008      	movs	r0, #8
    3362:	4b02      	ldr	r3, [pc, #8]	; (336c <PHY_SetChannel+0x20>)
    3364:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    3366:	bd10      	pop	{r4, pc}
    3368:	00003a29 	.word	0x00003a29
    336c:	00003b21 	.word	0x00003b21

00003370 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    3370:	b530      	push	{r4, r5, lr}
    3372:	b083      	sub	sp, #12
    3374:	466c      	mov	r4, sp
    3376:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3378:	b2c1      	uxtb	r1, r0
    337a:	2022      	movs	r0, #34	; 0x22
    337c:	4d03      	ldr	r5, [pc, #12]	; (338c <PHY_SetPanId+0x1c>)
    337e:	47a8      	blx	r5
    3380:	79e1      	ldrb	r1, [r4, #7]
    3382:	2023      	movs	r0, #35	; 0x23
    3384:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    3386:	b003      	add	sp, #12
    3388:	bd30      	pop	{r4, r5, pc}
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	00003b21 	.word	0x00003b21

00003390 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    3390:	b570      	push	{r4, r5, r6, lr}
    3392:	b082      	sub	sp, #8
    3394:	466d      	mov	r5, sp
    3396:	80e8      	strh	r0, [r5, #6]
    3398:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    339a:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    339c:	2020      	movs	r0, #32
    339e:	1c31      	adds	r1, r6, #0
    33a0:	4c05      	ldr	r4, [pc, #20]	; (33b8 <PHY_SetShortAddr+0x28>)
    33a2:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    33a4:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    33a6:	2021      	movs	r0, #33	; 0x21
    33a8:	1c29      	adds	r1, r5, #0
    33aa:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    33ac:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    33ae:	b2f1      	uxtb	r1, r6
    33b0:	202d      	movs	r0, #45	; 0x2d
    33b2:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    33b4:	b002      	add	sp, #8
    33b6:	bd70      	pop	{r4, r5, r6, pc}
    33b8:	00003b21 	.word	0x00003b21

000033bc <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    33bc:	b510      	push	{r4, lr}
    33be:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    33c0:	2005      	movs	r0, #5
    33c2:	4b05      	ldr	r3, [pc, #20]	; (33d8 <PHY_SetTxPower+0x1c>)
    33c4:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    33c6:	230f      	movs	r3, #15
    33c8:	1c01      	adds	r1, r0, #0
    33ca:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    33cc:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    33ce:	b2e1      	uxtb	r1, r4
    33d0:	2005      	movs	r0, #5
    33d2:	4b02      	ldr	r3, [pc, #8]	; (33dc <PHY_SetTxPower+0x20>)
    33d4:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    33d6:	bd10      	pop	{r4, pc}
    33d8:	00003a29 	.word	0x00003a29
    33dc:	00003b21 	.word	0x00003b21

000033e0 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    33e0:	b510      	push	{r4, lr}
    33e2:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    33e4:	2019      	movs	r0, #25
    33e6:	4b0c      	ldr	r3, [pc, #48]	; (3418 <PHY_DataReq+0x38>)
    33e8:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    33ea:	200f      	movs	r0, #15
    33ec:	4b0b      	ldr	r3, [pc, #44]	; (341c <PHY_DataReq+0x3c>)
    33ee:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    33f0:	7821      	ldrb	r1, [r4, #0]
    33f2:	1c8b      	adds	r3, r1, #2
    33f4:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    33f6:	3101      	adds	r1, #1
    33f8:	b2c9      	uxtb	r1, r1
    33fa:	1c20      	adds	r0, r4, #0
    33fc:	4b08      	ldr	r3, [pc, #32]	; (3420 <PHY_DataReq+0x40>)
    33fe:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    3400:	2203      	movs	r2, #3
    3402:	4b08      	ldr	r3, [pc, #32]	; (3424 <PHY_DataReq+0x44>)
    3404:	701a      	strb	r2, [r3, #0]
    3406:	4b08      	ldr	r3, [pc, #32]	; (3428 <PHY_DataReq+0x48>)
    3408:	2280      	movs	r2, #128	; 0x80
    340a:	0352      	lsls	r2, r2, #13
    340c:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3412:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    3414:	bd10      	pop	{r4, pc}
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	0000327d 	.word	0x0000327d
    341c:	00003a29 	.word	0x00003a29
    3420:	00003d5d 	.word	0x00003d5d
    3424:	20000bc8 	.word	0x20000bc8
    3428:	41004400 	.word	0x41004400

0000342c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    342c:	b5f0      	push	{r4, r5, r6, r7, lr}
    342e:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    3430:	4b26      	ldr	r3, [pc, #152]	; (34cc <PHY_TaskHandler+0xa0>)
    3432:	781b      	ldrb	r3, [r3, #0]
    3434:	2b02      	cmp	r3, #2
    3436:	d046      	beq.n	34c6 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3438:	200f      	movs	r0, #15
    343a:	4b25      	ldr	r3, [pc, #148]	; (34d0 <PHY_TaskHandler+0xa4>)
    343c:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    343e:	0703      	lsls	r3, r0, #28
    3440:	d541      	bpl.n	34c6 <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    3442:	4b22      	ldr	r3, [pc, #136]	; (34cc <PHY_TaskHandler+0xa0>)
    3444:	781b      	ldrb	r3, [r3, #0]
    3446:	2b01      	cmp	r3, #1
    3448:	d124      	bne.n	3494 <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    344a:	2007      	movs	r0, #7
    344c:	4b20      	ldr	r3, [pc, #128]	; (34d0 <PHY_TaskHandler+0xa4>)
    344e:	4798      	blx	r3
    3450:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    3452:	466c      	mov	r4, sp
    3454:	3407      	adds	r4, #7
    3456:	1c20      	adds	r0, r4, #0
    3458:	2101      	movs	r1, #1
    345a:	4e1e      	ldr	r6, [pc, #120]	; (34d4 <PHY_TaskHandler+0xa8>)
    345c:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    345e:	4d1e      	ldr	r5, [pc, #120]	; (34d8 <PHY_TaskHandler+0xac>)
    3460:	7821      	ldrb	r1, [r4, #0]
    3462:	3102      	adds	r1, #2
    3464:	b2c9      	uxtb	r1, r1
    3466:	1c28      	adds	r0, r5, #0
    3468:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    346a:	a802      	add	r0, sp, #8
    346c:	1c6a      	adds	r2, r5, #1
    346e:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    3470:	7822      	ldrb	r2, [r4, #0]
    3472:	1e91      	subs	r1, r2, #2
    3474:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    3476:	18ad      	adds	r5, r5, r2
    3478:	786a      	ldrb	r2, [r5, #1]
    347a:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    347c:	3f5b      	subs	r7, #91	; 0x5b
    347e:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    3480:	4b16      	ldr	r3, [pc, #88]	; (34dc <PHY_TaskHandler+0xb0>)
    3482:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3484:	4d12      	ldr	r5, [pc, #72]	; (34d0 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3486:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3488:	2001      	movs	r0, #1
    348a:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    348c:	4020      	ands	r0, r4
    348e:	2816      	cmp	r0, #22
    3490:	d1fa      	bne.n	3488 <PHY_TaskHandler+0x5c>
    3492:	e018      	b.n	34c6 <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    3494:	2b03      	cmp	r3, #3
    3496:	d116      	bne.n	34c6 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3498:	2002      	movs	r0, #2
    349a:	4b0d      	ldr	r3, [pc, #52]	; (34d0 <PHY_TaskHandler+0xa4>)
    349c:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    349e:	0944      	lsrs	r4, r0, #5
    34a0:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    34a2:	2c00      	cmp	r4, #0
    34a4:	d007      	beq.n	34b6 <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    34a6:	2c03      	cmp	r4, #3
    34a8:	d004      	beq.n	34b4 <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    34aa:	3c05      	subs	r4, #5
    34ac:	1e63      	subs	r3, r4, #1
    34ae:	419c      	sbcs	r4, r3
    34b0:	3402      	adds	r4, #2
    34b2:	e000      	b.n	34b6 <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    34b4:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    34b6:	4b0a      	ldr	r3, [pc, #40]	; (34e0 <PHY_TaskHandler+0xb4>)
    34b8:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    34ba:	2201      	movs	r2, #1
    34bc:	4b03      	ldr	r3, [pc, #12]	; (34cc <PHY_TaskHandler+0xa0>)
    34be:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    34c0:	1c20      	adds	r0, r4, #0
    34c2:	4b08      	ldr	r3, [pc, #32]	; (34e4 <PHY_TaskHandler+0xb8>)
    34c4:	4798      	blx	r3
		}
	}
}
    34c6:	b005      	add	sp, #20
    34c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	20000bc8 	.word	0x20000bc8
    34d0:	00003a29 	.word	0x00003a29
    34d4:	00003c1d 	.word	0x00003c1d
    34d8:	20000b48 	.word	0x20000b48
    34dc:	000027fd 	.word	0x000027fd
    34e0:	000032b9 	.word	0x000032b9
    34e4:	0000312d 	.word	0x0000312d

000034e8 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    34e8:	b508      	push	{r3, lr}
	SYS_TimerInit();
    34ea:	4b03      	ldr	r3, [pc, #12]	; (34f8 <SYS_Init+0x10>)
    34ec:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
#endif
	PHY_Init();
    34ee:	4b03      	ldr	r3, [pc, #12]	; (34fc <SYS_Init+0x14>)
    34f0:	4798      	blx	r3
	NWK_Init();
    34f2:	4b03      	ldr	r3, [pc, #12]	; (3500 <SYS_Init+0x18>)
    34f4:	4798      	blx	r3
}
    34f6:	bd08      	pop	{r3, pc}
    34f8:	00003631 	.word	0x00003631
    34fc:	000032e5 	.word	0x000032e5
    3500:	00001c1d 	.word	0x00001c1d

00003504 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    3504:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    3506:	4b03      	ldr	r3, [pc, #12]	; (3514 <SYS_TaskHandler+0x10>)
    3508:	4798      	blx	r3
	NWK_TaskHandler();
    350a:	4b03      	ldr	r3, [pc, #12]	; (3518 <SYS_TaskHandler+0x14>)
    350c:	4798      	blx	r3
	SYS_TimerTaskHandler();
    350e:	4b03      	ldr	r3, [pc, #12]	; (351c <SYS_TaskHandler+0x18>)
    3510:	4798      	blx	r3
}
    3512:	bd08      	pop	{r3, pc}
    3514:	0000342d 	.word	0x0000342d
    3518:	00001cb1 	.word	0x00001cb1
    351c:	000036b5 	.word	0x000036b5

00003520 <xtea>:
#if SYS_SECURITY_MODE == 1

/*************************************************************************//**
*****************************************************************************/
static void xtea(uint32_t text[2], uint32_t const key[4])
{
    3520:	b5f0      	push	{r4, r5, r6, r7, lr}
    3522:	464f      	mov	r7, r9
    3524:	4646      	mov	r6, r8
    3526:	b4c0      	push	{r6, r7}
    3528:	4684      	mov	ip, r0
	uint32_t t0 = text[0];
    352a:	6804      	ldr	r4, [r0, #0]
	uint32_t t1 = text[1];
    352c:	6842      	ldr	r2, [r0, #4]
	uint32_t sum = 0;
    352e:	2300      	movs	r3, #0
	uint32_t delta = 0x9e3779b9;

	for (uint8_t i = 0; i < 32; i++) {
		t0 += (((t1 << 4) ^ (t1 >> 5)) + t1) ^ (sum + key[sum & 3]);
    3530:	2503      	movs	r5, #3
	uint32_t t0 = text[0];
	uint32_t t1 = text[1];
	uint32_t sum = 0;
	uint32_t delta = 0x9e3779b9;

	for (uint8_t i = 0; i < 32; i++) {
    3532:	4812      	ldr	r0, [pc, #72]	; (357c <xtea+0x5c>)
    3534:	4681      	mov	r9, r0
		t0 += (((t1 << 4) ^ (t1 >> 5)) + t1) ^ (sum + key[sum & 3]);
    3536:	1c2e      	adds	r6, r5, #0
    3538:	401e      	ands	r6, r3
    353a:	00b6      	lsls	r6, r6, #2
    353c:	5877      	ldr	r7, [r6, r1]
    353e:	19df      	adds	r7, r3, r7
    3540:	0956      	lsrs	r6, r2, #5
    3542:	46b0      	mov	r8, r6
    3544:	0116      	lsls	r6, r2, #4
    3546:	4640      	mov	r0, r8
    3548:	4046      	eors	r6, r0
    354a:	18b6      	adds	r6, r6, r2
    354c:	407e      	eors	r6, r7
    354e:	19a4      	adds	r4, r4, r6
		sum += delta;
    3550:	4e0b      	ldr	r6, [pc, #44]	; (3580 <xtea+0x60>)
    3552:	199b      	adds	r3, r3, r6
		t1
			+= (((t0 <<
				4) ^
				(t0 >> 5)) + t0) ^ (sum + key[(sum >> 11) & 3]);
    3554:	0967      	lsrs	r7, r4, #5

	for (uint8_t i = 0; i < 32; i++) {
		t0 += (((t1 << 4) ^ (t1 >> 5)) + t1) ^ (sum + key[sum & 3]);
		sum += delta;
		t1
			+= (((t0 <<
    3556:	0126      	lsls	r6, r4, #4
				4) ^
    3558:	407e      	eors	r6, r7
				(t0 >> 5)) + t0) ^ (sum + key[(sum >> 11) & 3]);
    355a:	1936      	adds	r6, r6, r4
    355c:	0adf      	lsrs	r7, r3, #11
    355e:	402f      	ands	r7, r5
    3560:	00bf      	lsls	r7, r7, #2
    3562:	587f      	ldr	r7, [r7, r1]
    3564:	19df      	adds	r7, r3, r7
    3566:	407e      	eors	r6, r7

	for (uint8_t i = 0; i < 32; i++) {
		t0 += (((t1 << 4) ^ (t1 >> 5)) + t1) ^ (sum + key[sum & 3]);
		sum += delta;
		t1
			+= (((t0 <<
    3568:	1992      	adds	r2, r2, r6
	uint32_t t0 = text[0];
	uint32_t t1 = text[1];
	uint32_t sum = 0;
	uint32_t delta = 0x9e3779b9;

	for (uint8_t i = 0; i < 32; i++) {
    356a:	454b      	cmp	r3, r9
    356c:	d1e3      	bne.n	3536 <xtea+0x16>
		t1
			+= (((t0 <<
				4) ^
				(t0 >> 5)) + t0) ^ (sum + key[(sum >> 11) & 3]);
	}
	text[0] = t0;
    356e:	4660      	mov	r0, ip
    3570:	6004      	str	r4, [r0, #0]
	text[1] = t1;
    3572:	6042      	str	r2, [r0, #4]
}
    3574:	bc0c      	pop	{r2, r3}
    3576:	4690      	mov	r8, r2
    3578:	4699      	mov	r9, r3
    357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    357c:	c6ef3720 	.word	0xc6ef3720
    3580:	9e3779b9 	.word	0x9e3779b9

00003584 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    3584:	b570      	push	{r4, r5, r6, lr}
    3586:	1c04      	adds	r4, r0, #0
    3588:	1c0e      	adds	r6, r1, #0
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);

#elif SYS_SECURITY_MODE == 1
	xtea(&text[0], key);
    358a:	4d08      	ldr	r5, [pc, #32]	; (35ac <SYS_EncryptReq+0x28>)
    358c:	47a8      	blx	r5
	text[2] ^= text[0];
    358e:	68a3      	ldr	r3, [r4, #8]
    3590:	6822      	ldr	r2, [r4, #0]
    3592:	4053      	eors	r3, r2
    3594:	60a3      	str	r3, [r4, #8]
	text[3] ^= text[1];
    3596:	68e3      	ldr	r3, [r4, #12]
    3598:	6862      	ldr	r2, [r4, #4]
    359a:	4053      	eors	r3, r2
    359c:	60e3      	str	r3, [r4, #12]
	xtea(&text[2], key);
    359e:	1c20      	adds	r0, r4, #0
    35a0:	3008      	adds	r0, #8
    35a2:	1c31      	adds	r1, r6, #0
    35a4:	47a8      	blx	r5
#endif

	SYS_EncryptConf();
    35a6:	4b02      	ldr	r3, [pc, #8]	; (35b0 <SYS_EncryptReq+0x2c>)
    35a8:	4798      	blx	r3
}
    35aa:	bd70      	pop	{r4, r5, r6, pc}
    35ac:	00003521 	.word	0x00003521
    35b0:	00002c71 	.word	0x00002c71

000035b4 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    35b4:	b530      	push	{r4, r5, lr}
	if (timers) {
    35b6:	4b15      	ldr	r3, [pc, #84]	; (360c <placeTimer+0x58>)
    35b8:	681d      	ldr	r5, [r3, #0]
    35ba:	2d00      	cmp	r5, #0
    35bc:	d01e      	beq.n	35fc <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    35be:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    35c0:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    35c2:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    35c4:	428a      	cmp	r2, r1
    35c6:	d20a      	bcs.n	35de <placeTimer+0x2a>
    35c8:	e004      	b.n	35d4 <placeTimer+0x20>
    35ca:	6859      	ldr	r1, [r3, #4]
    35cc:	4291      	cmp	r1, r2
    35ce:	d803      	bhi.n	35d8 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    35d0:	1c1c      	adds	r4, r3, #0
    35d2:	e004      	b.n	35de <placeTimer+0x2a>
    35d4:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    35d6:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    35d8:	1a89      	subs	r1, r1, r2
    35da:	6059      	str	r1, [r3, #4]
				break;
    35dc:	e003      	b.n	35e6 <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    35de:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    35e0:	6823      	ldr	r3, [r4, #0]
    35e2:	2b00      	cmp	r3, #0
    35e4:	d1f1      	bne.n	35ca <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    35e6:	6042      	str	r2, [r0, #4]

		if (prev) {
    35e8:	2c00      	cmp	r4, #0
    35ea:	d003      	beq.n	35f4 <placeTimer+0x40>
			timer->next = prev->next;
    35ec:	6823      	ldr	r3, [r4, #0]
    35ee:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    35f0:	6020      	str	r0, [r4, #0]
    35f2:	e009      	b.n	3608 <placeTimer+0x54>
		} else {
			timer->next = timers;
    35f4:	6005      	str	r5, [r0, #0]
			timers = timer;
    35f6:	4b05      	ldr	r3, [pc, #20]	; (360c <placeTimer+0x58>)
    35f8:	6018      	str	r0, [r3, #0]
    35fa:	e005      	b.n	3608 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    35fc:	2300      	movs	r3, #0
    35fe:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3600:	6883      	ldr	r3, [r0, #8]
    3602:	6043      	str	r3, [r0, #4]
		timers = timer;
    3604:	4b01      	ldr	r3, [pc, #4]	; (360c <placeTimer+0x58>)
    3606:	6018      	str	r0, [r3, #0]
	}
}
    3608:	bd30      	pop	{r4, r5, pc}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	20000bcc 	.word	0x20000bcc

00003610 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    3610:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    3612:	4b04      	ldr	r3, [pc, #16]	; (3624 <SYS_HwExpiry_Cb+0x14>)
    3614:	781a      	ldrb	r2, [r3, #0]
    3616:	3201      	adds	r2, #1
    3618:	b2d2      	uxtb	r2, r2
    361a:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    361c:	4802      	ldr	r0, [pc, #8]	; (3628 <SYS_HwExpiry_Cb+0x18>)
    361e:	4b03      	ldr	r3, [pc, #12]	; (362c <SYS_HwExpiry_Cb+0x1c>)
    3620:	4798      	blx	r3
}
    3622:	bd08      	pop	{r3, pc}
    3624:	20000d28 	.word	0x20000d28
    3628:	00002710 	.word	0x00002710
    362c:	00004b39 	.word	0x00004b39

00003630 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    3630:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    3632:	2400      	movs	r4, #0
    3634:	4b06      	ldr	r3, [pc, #24]	; (3650 <SYS_TimerInit+0x20>)
    3636:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3638:	4806      	ldr	r0, [pc, #24]	; (3654 <SYS_TimerInit+0x24>)
    363a:	4b07      	ldr	r3, [pc, #28]	; (3658 <SYS_TimerInit+0x28>)
    363c:	4798      	blx	r3
	common_tc_init();
    363e:	4b07      	ldr	r3, [pc, #28]	; (365c <SYS_TimerInit+0x2c>)
    3640:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3642:	4807      	ldr	r0, [pc, #28]	; (3660 <SYS_TimerInit+0x30>)
    3644:	4b07      	ldr	r3, [pc, #28]	; (3664 <SYS_TimerInit+0x34>)
    3646:	4798      	blx	r3
	timers = NULL;
    3648:	4b07      	ldr	r3, [pc, #28]	; (3668 <SYS_TimerInit+0x38>)
    364a:	601c      	str	r4, [r3, #0]
}
    364c:	bd10      	pop	{r4, pc}
    364e:	46c0      	nop			; (mov r8, r8)
    3650:	20000d28 	.word	0x20000d28
    3654:	00003611 	.word	0x00003611
    3658:	00004c29 	.word	0x00004c29
    365c:	00004ba5 	.word	0x00004ba5
    3660:	00002710 	.word	0x00002710
    3664:	00004b39 	.word	0x00004b39
    3668:	20000bcc 	.word	0x20000bcc

0000366c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    366c:	4b09      	ldr	r3, [pc, #36]	; (3694 <SYS_TimerStarted+0x28>)
    366e:	681b      	ldr	r3, [r3, #0]
    3670:	2b00      	cmp	r3, #0
    3672:	d009      	beq.n	3688 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    3674:	4283      	cmp	r3, r0
    3676:	d102      	bne.n	367e <SYS_TimerStarted+0x12>
    3678:	e008      	b.n	368c <SYS_TimerStarted+0x20>
    367a:	4298      	cmp	r0, r3
    367c:	d008      	beq.n	3690 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    367e:	681b      	ldr	r3, [r3, #0]
    3680:	2b00      	cmp	r3, #0
    3682:	d1fa      	bne.n	367a <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    3684:	2000      	movs	r0, #0
    3686:	e004      	b.n	3692 <SYS_TimerStarted+0x26>
    3688:	2000      	movs	r0, #0
    368a:	e002      	b.n	3692 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    368c:	2001      	movs	r0, #1
    368e:	e000      	b.n	3692 <SYS_TimerStarted+0x26>
    3690:	2001      	movs	r0, #1
		}
	}
	return false;
}
    3692:	4770      	bx	lr
    3694:	20000bcc 	.word	0x20000bcc

00003698 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3698:	b510      	push	{r4, lr}
    369a:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    369c:	4b03      	ldr	r3, [pc, #12]	; (36ac <SYS_TimerStart+0x14>)
    369e:	4798      	blx	r3
    36a0:	2800      	cmp	r0, #0
    36a2:	d102      	bne.n	36aa <SYS_TimerStart+0x12>
		placeTimer(timer);
    36a4:	1c20      	adds	r0, r4, #0
    36a6:	4b02      	ldr	r3, [pc, #8]	; (36b0 <SYS_TimerStart+0x18>)
    36a8:	4798      	blx	r3
	}
}
    36aa:	bd10      	pop	{r4, pc}
    36ac:	0000366d 	.word	0x0000366d
    36b0:	000035b5 	.word	0x000035b5

000036b4 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    36b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    36b6:	4b1a      	ldr	r3, [pc, #104]	; (3720 <SYS_TimerTaskHandler+0x6c>)
    36b8:	781b      	ldrb	r3, [r3, #0]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d02f      	beq.n	371e <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    36be:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    36c2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    36c4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    36c8:	2100      	movs	r1, #0
    36ca:	4b16      	ldr	r3, [pc, #88]	; (3724 <SYS_TimerTaskHandler+0x70>)
    36cc:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    36ce:	4a14      	ldr	r2, [pc, #80]	; (3720 <SYS_TimerTaskHandler+0x6c>)
    36d0:	7813      	ldrb	r3, [r2, #0]
    36d2:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    36d4:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    36d6:	2800      	cmp	r0, #0
    36d8:	d105      	bne.n	36e6 <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    36da:	2101      	movs	r1, #1
    36dc:	4a11      	ldr	r2, [pc, #68]	; (3724 <SYS_TimerTaskHandler+0x70>)
    36de:	7011      	strb	r1, [r2, #0]
    36e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    36e4:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    36e6:	009d      	lsls	r5, r3, #2
    36e8:	18ed      	adds	r5, r5, r3
    36ea:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    36ec:	4e0e      	ldr	r6, [pc, #56]	; (3728 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    36ee:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    36f0:	e00d      	b.n	370e <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    36f2:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    36f4:	6823      	ldr	r3, [r4, #0]
    36f6:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    36f8:	7b23      	ldrb	r3, [r4, #12]
    36fa:	2b01      	cmp	r3, #1
    36fc:	d102      	bne.n	3704 <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    36fe:	1c20      	adds	r0, r4, #0
    3700:	4b0a      	ldr	r3, [pc, #40]	; (372c <SYS_TimerTaskHandler+0x78>)
    3702:	4798      	blx	r3
		}
		if(timer->handler)
    3704:	6923      	ldr	r3, [r4, #16]
    3706:	2b00      	cmp	r3, #0
    3708:	d001      	beq.n	370e <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    370a:	1c20      	adds	r0, r4, #0
    370c:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    370e:	6834      	ldr	r4, [r6, #0]
    3710:	2c00      	cmp	r4, #0
    3712:	d004      	beq.n	371e <SYS_TimerTaskHandler+0x6a>
    3714:	6863      	ldr	r3, [r4, #4]
    3716:	429d      	cmp	r5, r3
    3718:	d2eb      	bcs.n	36f2 <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    371a:	1b5d      	subs	r5, r3, r5
    371c:	6065      	str	r5, [r4, #4]
	}
}
    371e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3720:	20000d28 	.word	0x20000d28
    3724:	20000008 	.word	0x20000008
    3728:	20000bcc 	.word	0x20000bcc
    372c:	000035b5 	.word	0x000035b5

00003730 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    3730:	b508      	push	{r3, lr}
	tmr_cca_callback();
    3732:	4b01      	ldr	r3, [pc, #4]	; (3738 <tc_cca_callback+0x8>)
    3734:	4798      	blx	r3
}
    3736:	bd08      	pop	{r3, pc}
    3738:	00004c0d 	.word	0x00004c0d

0000373c <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    373c:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    373e:	4b01      	ldr	r3, [pc, #4]	; (3744 <tc_ovf_callback+0x8>)
    3740:	4798      	blx	r3
}
    3742:	bd08      	pop	{r3, pc}
    3744:	00004bc5 	.word	0x00004bc5

00003748 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    3748:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    374a:	4802      	ldr	r0, [pc, #8]	; (3754 <tmr_read_count+0xc>)
    374c:	4b02      	ldr	r3, [pc, #8]	; (3758 <tmr_read_count+0x10>)
    374e:	4798      	blx	r3
    3750:	b280      	uxth	r0, r0
}
    3752:	bd08      	pop	{r3, pc}
    3754:	20000d60 	.word	0x20000d60
    3758:	0000139d 	.word	0x0000139d

0000375c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    375c:	4b03      	ldr	r3, [pc, #12]	; (376c <tmr_disable_cc_interrupt+0x10>)
    375e:	2210      	movs	r2, #16
    3760:	6819      	ldr	r1, [r3, #0]
    3762:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    3764:	7e59      	ldrb	r1, [r3, #25]
    3766:	4391      	bics	r1, r2
    3768:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    376a:	4770      	bx	lr
    376c:	20000d60 	.word	0x20000d60

00003770 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    3770:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3772:	4c0a      	ldr	r4, [pc, #40]	; (379c <tmr_enable_cc_interrupt+0x2c>)
    3774:	6820      	ldr	r0, [r4, #0]
    3776:	4b0a      	ldr	r3, [pc, #40]	; (37a0 <tmr_enable_cc_interrupt+0x30>)
    3778:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    377a:	4b0a      	ldr	r3, [pc, #40]	; (37a4 <tmr_enable_cc_interrupt+0x34>)
    377c:	5c1b      	ldrb	r3, [r3, r0]
    377e:	221f      	movs	r2, #31
    3780:	401a      	ands	r2, r3
    3782:	2301      	movs	r3, #1
    3784:	4093      	lsls	r3, r2
    3786:	1c1a      	adds	r2, r3, #0
    3788:	4b07      	ldr	r3, [pc, #28]	; (37a8 <tmr_enable_cc_interrupt+0x38>)
    378a:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    378c:	7e62      	ldrb	r2, [r4, #25]
    378e:	2310      	movs	r3, #16
    3790:	4313      	orrs	r3, r2
    3792:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3794:	6823      	ldr	r3, [r4, #0]
    3796:	2210      	movs	r2, #16
    3798:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    379a:	bd10      	pop	{r4, pc}
    379c:	20000d60 	.word	0x20000d60
    37a0:	000010f1 	.word	0x000010f1
    37a4:	00005f6c 	.word	0x00005f6c
    37a8:	e000e100 	.word	0xe000e100

000037ac <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    37ac:	b508      	push	{r3, lr}
    37ae:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    37b0:	4802      	ldr	r0, [pc, #8]	; (37bc <tmr_write_cmpreg+0x10>)
    37b2:	2100      	movs	r1, #0
    37b4:	4b02      	ldr	r3, [pc, #8]	; (37c0 <tmr_write_cmpreg+0x14>)
    37b6:	4798      	blx	r3
			(uint32_t)compare_value);
}
    37b8:	bd08      	pop	{r3, pc}
    37ba:	46c0      	nop			; (mov r8, r8)
    37bc:	20000d60 	.word	0x20000d60
    37c0:	000013cd 	.word	0x000013cd

000037c4 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    37c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37c6:	464f      	mov	r7, r9
    37c8:	4646      	mov	r6, r8
    37ca:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    37cc:	4a2d      	ldr	r2, [pc, #180]	; (3884 <tmr_init+0xc0>)
    37ce:	2300      	movs	r3, #0
    37d0:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    37d2:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    37d4:	2100      	movs	r1, #0
    37d6:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    37d8:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    37da:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    37dc:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    37de:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    37e0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    37e2:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    37e4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    37e6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    37e8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    37ea:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    37ec:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    37ee:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    37f0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    37f2:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    37f4:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    37f6:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    37f8:	2301      	movs	r3, #1
    37fa:	425b      	negs	r3, r3
    37fc:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    37fe:	4c22      	ldr	r4, [pc, #136]	; (3888 <tmr_init+0xc4>)
    3800:	1c20      	adds	r0, r4, #0
    3802:	4922      	ldr	r1, [pc, #136]	; (388c <tmr_init+0xc8>)
    3804:	4b22      	ldr	r3, [pc, #136]	; (3890 <tmr_init+0xcc>)
    3806:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3808:	1c20      	adds	r0, r4, #0
    380a:	4922      	ldr	r1, [pc, #136]	; (3894 <tmr_init+0xd0>)
    380c:	2200      	movs	r2, #0
    380e:	4d22      	ldr	r5, [pc, #136]	; (3898 <tmr_init+0xd4>)
    3810:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    3812:	1c20      	adds	r0, r4, #0
    3814:	4921      	ldr	r1, [pc, #132]	; (389c <tmr_init+0xd8>)
    3816:	2202      	movs	r2, #2
    3818:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    381a:	6820      	ldr	r0, [r4, #0]
    381c:	4a20      	ldr	r2, [pc, #128]	; (38a0 <tmr_init+0xdc>)
    381e:	4691      	mov	r9, r2
    3820:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3822:	4b20      	ldr	r3, [pc, #128]	; (38a4 <tmr_init+0xe0>)
    3824:	4698      	mov	r8, r3
    3826:	5c1b      	ldrb	r3, [r3, r0]
    3828:	271f      	movs	r7, #31
    382a:	403b      	ands	r3, r7
    382c:	2501      	movs	r5, #1
    382e:	1c2a      	adds	r2, r5, #0
    3830:	409a      	lsls	r2, r3
    3832:	4e1d      	ldr	r6, [pc, #116]	; (38a8 <tmr_init+0xe4>)
    3834:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    3836:	7e62      	ldrb	r2, [r4, #25]
    3838:	2301      	movs	r3, #1
    383a:	4313      	orrs	r3, r2
    383c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    383e:	6820      	ldr	r0, [r4, #0]
    3840:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3842:	47c8      	blx	r9
    3844:	4642      	mov	r2, r8
    3846:	5c13      	ldrb	r3, [r2, r0]
    3848:	401f      	ands	r7, r3
    384a:	40bd      	lsls	r5, r7
    384c:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    384e:	7e62      	ldrb	r2, [r4, #25]
    3850:	2310      	movs	r3, #16
    3852:	4313      	orrs	r3, r2
    3854:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3856:	6822      	ldr	r2, [r4, #0]
    3858:	2310      	movs	r3, #16
    385a:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    385c:	217f      	movs	r1, #127	; 0x7f
    385e:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3860:	438b      	bics	r3, r1
    3862:	d1fc      	bne.n	385e <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3864:	8811      	ldrh	r1, [r2, #0]
    3866:	2302      	movs	r3, #2
    3868:	430b      	orrs	r3, r1
    386a:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    386c:	2000      	movs	r0, #0
    386e:	4b0f      	ldr	r3, [pc, #60]	; (38ac <tmr_init+0xe8>)
    3870:	4798      	blx	r3
    3872:	490f      	ldr	r1, [pc, #60]	; (38b0 <tmr_init+0xec>)
    3874:	4b0f      	ldr	r3, [pc, #60]	; (38b4 <tmr_init+0xf0>)
    3876:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3878:	b2c0      	uxtb	r0, r0
}
    387a:	bc0c      	pop	{r2, r3}
    387c:	4690      	mov	r8, r2
    387e:	4699      	mov	r9, r3
    3880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3882:	46c0      	nop			; (mov r8, r8)
    3884:	20000d2c 	.word	0x20000d2c
    3888:	20000d60 	.word	0x20000d60
    388c:	42002c00 	.word	0x42002c00
    3890:	00001129 	.word	0x00001129
    3894:	0000373d 	.word	0x0000373d
    3898:	00001031 	.word	0x00001031
    389c:	00003731 	.word	0x00003731
    38a0:	000010f1 	.word	0x000010f1
    38a4:	00005f6c 	.word	0x00005f6c
    38a8:	e000e100 	.word	0xe000e100
    38ac:	00004269 	.word	0x00004269
    38b0:	000f4240 	.word	0x000f4240
    38b4:	00004c35 	.word	0x00004c35

000038b8 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    38b8:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    38ba:	2201      	movs	r2, #1
    38bc:	4b03      	ldr	r3, [pc, #12]	; (38cc <AT86RFX_ISR+0x14>)
    38be:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    38c0:	4b03      	ldr	r3, [pc, #12]	; (38d0 <AT86RFX_ISR+0x18>)
    38c2:	681b      	ldr	r3, [r3, #0]
    38c4:	2b00      	cmp	r3, #0
    38c6:	d000      	beq.n	38ca <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    38c8:	4798      	blx	r3
	}
}
    38ca:	bd08      	pop	{r3, pc}
    38cc:	40001800 	.word	0x40001800
    38d0:	20000bd0 	.word	0x20000bd0

000038d4 <trx_spi_init>:

void trx_spi_init(void)
{
    38d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38d6:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    38d8:	4a35      	ldr	r2, [pc, #212]	; (39b0 <trx_spi_init+0xdc>)
    38da:	2300      	movs	r3, #0
    38dc:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    38de:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    38e0:	213f      	movs	r1, #63	; 0x3f
    38e2:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    38e4:	4c33      	ldr	r4, [pc, #204]	; (39b4 <trx_spi_init+0xe0>)
    38e6:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    38e8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    38ea:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    38ec:	2201      	movs	r2, #1
    38ee:	4669      	mov	r1, sp
    38f0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    38f2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    38f4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    38f6:	203f      	movs	r0, #63	; 0x3f
    38f8:	4b2f      	ldr	r3, [pc, #188]	; (39b8 <trx_spi_init+0xe4>)
    38fa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    38fc:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    38fe:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3900:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3902:	2900      	cmp	r1, #0
    3904:	d103      	bne.n	390e <trx_spi_init+0x3a>
		return &(ports[port_index]->Group[group_index]);
    3906:	095a      	lsrs	r2, r3, #5
    3908:	01d2      	lsls	r2, r2, #7
    390a:	492c      	ldr	r1, [pc, #176]	; (39bc <trx_spi_init+0xe8>)
    390c:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    390e:	271f      	movs	r7, #31
    3910:	403b      	ands	r3, r7
    3912:	2401      	movs	r4, #1
    3914:	1c21      	adds	r1, r4, #0
    3916:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3918:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    391a:	4a29      	ldr	r2, [pc, #164]	; (39c0 <trx_spi_init+0xec>)
    391c:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    391e:	2300      	movs	r3, #0
    3920:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3922:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3924:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    3926:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    3928:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    392a:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    392c:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    392e:	2124      	movs	r1, #36	; 0x24
    3930:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3932:	61d3      	str	r3, [r2, #28]
    3934:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3936:	2380      	movs	r3, #128	; 0x80
    3938:	025b      	lsls	r3, r3, #9
    393a:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    393c:	4b21      	ldr	r3, [pc, #132]	; (39c4 <trx_spi_init+0xf0>)
    393e:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3940:	4b21      	ldr	r3, [pc, #132]	; (39c8 <trx_spi_init+0xf4>)
    3942:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3944:	2301      	movs	r3, #1
    3946:	425b      	negs	r3, r3
    3948:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    394a:	4b20      	ldr	r3, [pc, #128]	; (39cc <trx_spi_init+0xf8>)
    394c:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    394e:	4b20      	ldr	r3, [pc, #128]	; (39d0 <trx_spi_init+0xfc>)
    3950:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3952:	4e20      	ldr	r6, [pc, #128]	; (39d4 <trx_spi_init+0x100>)
    3954:	1c30      	adds	r0, r6, #0
    3956:	4920      	ldr	r1, [pc, #128]	; (39d8 <trx_spi_init+0x104>)
    3958:	4b20      	ldr	r3, [pc, #128]	; (39dc <trx_spi_init+0x108>)
    395a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    395c:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    395e:	1c28      	adds	r0, r5, #0
    3960:	4b1f      	ldr	r3, [pc, #124]	; (39e0 <trx_spi_init+0x10c>)
    3962:	4798      	blx	r3
    3964:	4007      	ands	r7, r0
    3966:	40bc      	lsls	r4, r7
    3968:	4b1e      	ldr	r3, [pc, #120]	; (39e4 <trx_spi_init+0x110>)
    396a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    396c:	6832      	ldr	r2, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    396e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3970:	2b00      	cmp	r3, #0
    3972:	d1fc      	bne.n	396e <trx_spi_init+0x9a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3974:	682b      	ldr	r3, [r5, #0]
    3976:	2602      	movs	r6, #2
    3978:	4333      	orrs	r3, r6
    397a:	602b      	str	r3, [r5, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    397c:	ac01      	add	r4, sp, #4
    397e:	1c20      	adds	r0, r4, #0
    3980:	4b19      	ldr	r3, [pc, #100]	; (39e8 <trx_spi_init+0x114>)
    3982:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    3984:	2320      	movs	r3, #32
    3986:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    3988:	2380      	movs	r3, #128	; 0x80
    398a:	039b      	lsls	r3, r3, #14
    398c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    398e:	7226      	strb	r6, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    3990:	2301      	movs	r3, #1
    3992:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    3994:	2200      	movs	r2, #0
    3996:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    3998:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    399a:	2000      	movs	r0, #0
    399c:	1c21      	adds	r1, r4, #0
    399e:	4b13      	ldr	r3, [pc, #76]	; (39ec <trx_spi_init+0x118>)
    39a0:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    39a2:	4813      	ldr	r0, [pc, #76]	; (39f0 <trx_spi_init+0x11c>)
    39a4:	2100      	movs	r1, #0
    39a6:	2200      	movs	r2, #0
    39a8:	4b12      	ldr	r3, [pc, #72]	; (39f4 <trx_spi_init+0x120>)
    39aa:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    39ac:	b005      	add	sp, #20
    39ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39b0:	20000d80 	.word	0x20000d80
    39b4:	20000d84 	.word	0x20000d84
    39b8:	00003f29 	.word	0x00003f29
    39bc:	41004400 	.word	0x41004400
    39c0:	20000d88 	.word	0x20000d88
    39c4:	003d0900 	.word	0x003d0900
    39c8:	00530005 	.word	0x00530005
    39cc:	003e0005 	.word	0x003e0005
    39d0:	00520005 	.word	0x00520005
    39d4:	20000dc0 	.word	0x20000dc0
    39d8:	42001800 	.word	0x42001800
    39dc:	00000b4d 	.word	0x00000b4d
    39e0:	00001a41 	.word	0x00001a41
    39e4:	e000e100 	.word	0xe000e100
    39e8:	000006d5 	.word	0x000006d5
    39ec:	000006e9 	.word	0x000006e9
    39f0:	000038b9 	.word	0x000038b9
    39f4:	00001acd 	.word	0x00001acd

000039f8 <PhyReset>:

void PhyReset(void)
{
    39f8:	b570      	push	{r4, r5, r6, lr}
    39fa:	4b09      	ldr	r3, [pc, #36]	; (3a20 <PhyReset+0x28>)
    39fc:	1c1c      	adds	r4, r3, #0
    39fe:	3480      	adds	r4, #128	; 0x80
    3a00:	2580      	movs	r5, #128	; 0x80
    3a02:	022d      	lsls	r5, r5, #8
    3a04:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3a06:	2280      	movs	r2, #128	; 0x80
    3a08:	0352      	lsls	r2, r2, #13
    3a0a:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3a0c:	20a5      	movs	r0, #165	; 0xa5
    3a0e:	0040      	lsls	r0, r0, #1
    3a10:	4e04      	ldr	r6, [pc, #16]	; (3a24 <PhyReset+0x2c>)
    3a12:	47b0      	blx	r6
    3a14:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3a16:	200a      	movs	r0, #10
    3a18:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3a1a:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3a1c:	bd70      	pop	{r4, r5, r6, pc}
    3a1e:	46c0      	nop			; (mov r8, r8)
    3a20:	41004400 	.word	0x41004400
    3a24:	00001bc5 	.word	0x00001bc5

00003a28 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3a28:	b570      	push	{r4, r5, r6, lr}
    3a2a:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a2c:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3a30:	4263      	negs	r3, r4
    3a32:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3a34:	b672      	cpsid	i
    3a36:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3a3a:	2200      	movs	r2, #0
    3a3c:	4b33      	ldr	r3, [pc, #204]	; (3b0c <trx_reg_read+0xe4>)
    3a3e:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3a40:	4d33      	ldr	r5, [pc, #204]	; (3b10 <trx_reg_read+0xe8>)
    3a42:	1c28      	adds	r0, r5, #0
    3a44:	4933      	ldr	r1, [pc, #204]	; (3b14 <trx_reg_read+0xec>)
    3a46:	2201      	movs	r2, #1
    3a48:	4b33      	ldr	r3, [pc, #204]	; (3b18 <trx_reg_read+0xf0>)
    3a4a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a4c:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a4e:	2101      	movs	r1, #1
    3a50:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3a52:	420a      	tst	r2, r1
    3a54:	d0fc      	beq.n	3a50 <trx_reg_read+0x28>
    3a56:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3a58:	07d1      	lsls	r1, r2, #31
    3a5a:	d502      	bpl.n	3a62 <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a5c:	2280      	movs	r2, #128	; 0x80
    3a5e:	4316      	orrs	r6, r2
    3a60:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a62:	2102      	movs	r1, #2
    3a64:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3a66:	420a      	tst	r2, r1
    3a68:	d0fc      	beq.n	3a64 <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a6a:	2104      	movs	r1, #4
    3a6c:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3a6e:	420a      	tst	r2, r1
    3a70:	d0fc      	beq.n	3a6c <trx_reg_read+0x44>
    3a72:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3a74:	0751      	lsls	r1, r2, #29
    3a76:	d514      	bpl.n	3aa2 <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a78:	8b5a      	ldrh	r2, [r3, #26]
    3a7a:	0751      	lsls	r1, r2, #29
    3a7c:	d503      	bpl.n	3a86 <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3a7e:	8b59      	ldrh	r1, [r3, #26]
    3a80:	2204      	movs	r2, #4
    3a82:	430a      	orrs	r2, r1
    3a84:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a86:	4a22      	ldr	r2, [pc, #136]	; (3b10 <trx_reg_read+0xe8>)
    3a88:	7992      	ldrb	r2, [r2, #6]
    3a8a:	2a01      	cmp	r2, #1
    3a8c:	d105      	bne.n	3a9a <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3a8e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3a90:	05c9      	lsls	r1, r1, #23
    3a92:	0dc9      	lsrs	r1, r1, #23
    3a94:	4a21      	ldr	r2, [pc, #132]	; (3b1c <trx_reg_read+0xf4>)
    3a96:	8011      	strh	r1, [r2, #0]
    3a98:	e003      	b.n	3aa2 <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3a9c:	b2c9      	uxtb	r1, r1
    3a9e:	4a1f      	ldr	r2, [pc, #124]	; (3b1c <trx_reg_read+0xf4>)
    3aa0:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3aa2:	2101      	movs	r1, #1
    3aa4:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3aa6:	420a      	tst	r2, r1
    3aa8:	d0fc      	beq.n	3aa4 <trx_reg_read+0x7c>
    3aaa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3aac:	07d1      	lsls	r1, r2, #31
    3aae:	d501      	bpl.n	3ab4 <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ab0:	2200      	movs	r2, #0
    3ab2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ab4:	2102      	movs	r1, #2
    3ab6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3ab8:	420a      	tst	r2, r1
    3aba:	d0fc      	beq.n	3ab6 <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3abc:	2104      	movs	r1, #4
    3abe:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    3ac0:	420a      	tst	r2, r1
    3ac2:	d0fc      	beq.n	3abe <trx_reg_read+0x96>
    3ac4:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    3ac6:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3ac8:	0751      	lsls	r1, r2, #29
    3aca:	d510      	bpl.n	3aee <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3acc:	8b5a      	ldrh	r2, [r3, #26]
    3ace:	0751      	lsls	r1, r2, #29
    3ad0:	d503      	bpl.n	3ada <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ad2:	8b59      	ldrh	r1, [r3, #26]
    3ad4:	2204      	movs	r2, #4
    3ad6:	430a      	orrs	r2, r1
    3ad8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ada:	4a0d      	ldr	r2, [pc, #52]	; (3b10 <trx_reg_read+0xe8>)
    3adc:	7992      	ldrb	r2, [r2, #6]
    3ade:	2a01      	cmp	r2, #1
    3ae0:	d103      	bne.n	3aea <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ae2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3ae4:	05ed      	lsls	r5, r5, #23
    3ae6:	0ded      	lsrs	r5, r5, #23
    3ae8:	e001      	b.n	3aee <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3aea:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3aec:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3aee:	4808      	ldr	r0, [pc, #32]	; (3b10 <trx_reg_read+0xe8>)
    3af0:	4908      	ldr	r1, [pc, #32]	; (3b14 <trx_reg_read+0xec>)
    3af2:	2200      	movs	r2, #0
    3af4:	4b08      	ldr	r3, [pc, #32]	; (3b18 <trx_reg_read+0xf0>)
    3af6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3af8:	2c00      	cmp	r4, #0
    3afa:	d005      	beq.n	3b08 <trx_reg_read+0xe0>
		cpu_irq_enable();
    3afc:	2201      	movs	r2, #1
    3afe:	4b03      	ldr	r3, [pc, #12]	; (3b0c <trx_reg_read+0xe4>)
    3b00:	701a      	strb	r2, [r3, #0]
    3b02:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3b06:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3b08:	b2e8      	uxtb	r0, r5
}
    3b0a:	bd70      	pop	{r4, r5, r6, pc}
    3b0c:	20000008 	.word	0x20000008
    3b10:	20000dc0 	.word	0x20000dc0
    3b14:	20000d84 	.word	0x20000d84
    3b18:	00000d65 	.word	0x00000d65
    3b1c:	20000d7c 	.word	0x20000d7c

00003b20 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b22:	1c07      	adds	r7, r0, #0
    3b24:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b26:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3b2a:	4263      	negs	r3, r4
    3b2c:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3b2e:	b672      	cpsid	i
    3b30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b34:	2200      	movs	r2, #0
    3b36:	4b34      	ldr	r3, [pc, #208]	; (3c08 <trx_reg_write+0xe8>)
    3b38:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3b3a:	4e34      	ldr	r6, [pc, #208]	; (3c0c <trx_reg_write+0xec>)
    3b3c:	1c30      	adds	r0, r6, #0
    3b3e:	4934      	ldr	r1, [pc, #208]	; (3c10 <trx_reg_write+0xf0>)
    3b40:	2201      	movs	r2, #1
    3b42:	4b34      	ldr	r3, [pc, #208]	; (3c14 <trx_reg_write+0xf4>)
    3b44:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b46:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b48:	2101      	movs	r1, #1
    3b4a:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3b4c:	420a      	tst	r2, r1
    3b4e:	d0fc      	beq.n	3b4a <trx_reg_write+0x2a>
    3b50:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3b52:	07d1      	lsls	r1, r2, #31
    3b54:	d502      	bpl.n	3b5c <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b56:	22c0      	movs	r2, #192	; 0xc0
    3b58:	4317      	orrs	r7, r2
    3b5a:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b5c:	2102      	movs	r1, #2
    3b5e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3b60:	420a      	tst	r2, r1
    3b62:	d0fc      	beq.n	3b5e <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b64:	2104      	movs	r1, #4
    3b66:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3b68:	420a      	tst	r2, r1
    3b6a:	d0fc      	beq.n	3b66 <trx_reg_write+0x46>
    3b6c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3b6e:	0751      	lsls	r1, r2, #29
    3b70:	d514      	bpl.n	3b9c <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b72:	8b5a      	ldrh	r2, [r3, #26]
    3b74:	0751      	lsls	r1, r2, #29
    3b76:	d503      	bpl.n	3b80 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3b78:	8b59      	ldrh	r1, [r3, #26]
    3b7a:	2204      	movs	r2, #4
    3b7c:	430a      	orrs	r2, r1
    3b7e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b80:	4a22      	ldr	r2, [pc, #136]	; (3c0c <trx_reg_write+0xec>)
    3b82:	7992      	ldrb	r2, [r2, #6]
    3b84:	2a01      	cmp	r2, #1
    3b86:	d105      	bne.n	3b94 <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b88:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3b8a:	05c9      	lsls	r1, r1, #23
    3b8c:	0dc9      	lsrs	r1, r1, #23
    3b8e:	4a22      	ldr	r2, [pc, #136]	; (3c18 <trx_reg_write+0xf8>)
    3b90:	8011      	strh	r1, [r2, #0]
    3b92:	e003      	b.n	3b9c <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b94:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3b96:	b2c9      	uxtb	r1, r1
    3b98:	4a1f      	ldr	r2, [pc, #124]	; (3c18 <trx_reg_write+0xf8>)
    3b9a:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b9c:	2001      	movs	r0, #1
    3b9e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3ba0:	4202      	tst	r2, r0
    3ba2:	d0fc      	beq.n	3b9e <trx_reg_write+0x7e>
    3ba4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3ba6:	07d1      	lsls	r1, r2, #31
    3ba8:	d500      	bpl.n	3bac <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3baa:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3bac:	2102      	movs	r1, #2
    3bae:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3bb0:	420a      	tst	r2, r1
    3bb2:	d0fc      	beq.n	3bae <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3bb4:	2104      	movs	r1, #4
    3bb6:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3bb8:	420a      	tst	r2, r1
    3bba:	d0fc      	beq.n	3bb6 <trx_reg_write+0x96>
    3bbc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3bbe:	0751      	lsls	r1, r2, #29
    3bc0:	d514      	bpl.n	3bec <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3bc2:	8b5a      	ldrh	r2, [r3, #26]
    3bc4:	0751      	lsls	r1, r2, #29
    3bc6:	d503      	bpl.n	3bd0 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3bc8:	8b59      	ldrh	r1, [r3, #26]
    3bca:	2204      	movs	r2, #4
    3bcc:	430a      	orrs	r2, r1
    3bce:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bd0:	4a0e      	ldr	r2, [pc, #56]	; (3c0c <trx_reg_write+0xec>)
    3bd2:	7992      	ldrb	r2, [r2, #6]
    3bd4:	2a01      	cmp	r2, #1
    3bd6:	d105      	bne.n	3be4 <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3bda:	05d2      	lsls	r2, r2, #23
    3bdc:	0dd2      	lsrs	r2, r2, #23
    3bde:	4b0e      	ldr	r3, [pc, #56]	; (3c18 <trx_reg_write+0xf8>)
    3be0:	801a      	strh	r2, [r3, #0]
    3be2:	e003      	b.n	3bec <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3be6:	b2d2      	uxtb	r2, r2
    3be8:	4b0b      	ldr	r3, [pc, #44]	; (3c18 <trx_reg_write+0xf8>)
    3bea:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3bec:	4807      	ldr	r0, [pc, #28]	; (3c0c <trx_reg_write+0xec>)
    3bee:	4908      	ldr	r1, [pc, #32]	; (3c10 <trx_reg_write+0xf0>)
    3bf0:	2200      	movs	r2, #0
    3bf2:	4b08      	ldr	r3, [pc, #32]	; (3c14 <trx_reg_write+0xf4>)
    3bf4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3bf6:	2c00      	cmp	r4, #0
    3bf8:	d005      	beq.n	3c06 <trx_reg_write+0xe6>
		cpu_irq_enable();
    3bfa:	2201      	movs	r2, #1
    3bfc:	4b02      	ldr	r3, [pc, #8]	; (3c08 <trx_reg_write+0xe8>)
    3bfe:	701a      	strb	r2, [r3, #0]
    3c00:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3c04:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c08:	20000008 	.word	0x20000008
    3c0c:	20000dc0 	.word	0x20000dc0
    3c10:	20000d84 	.word	0x20000d84
    3c14:	00000d65 	.word	0x00000d65
    3c18:	20000d7c 	.word	0x20000d7c

00003c1c <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c1e:	465f      	mov	r7, fp
    3c20:	4656      	mov	r6, sl
    3c22:	464d      	mov	r5, r9
    3c24:	4644      	mov	r4, r8
    3c26:	b4f0      	push	{r4, r5, r6, r7}
    3c28:	b083      	sub	sp, #12
    3c2a:	1c06      	adds	r6, r0, #0
    3c2c:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c2e:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3c32:	4278      	negs	r0, r7
    3c34:	4178      	adcs	r0, r7
    3c36:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3c38:	b672      	cpsid	i
    3c3a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c3e:	2200      	movs	r2, #0
    3c40:	4b41      	ldr	r3, [pc, #260]	; (3d48 <trx_frame_read+0x12c>)
    3c42:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3c44:	4d41      	ldr	r5, [pc, #260]	; (3d4c <trx_frame_read+0x130>)
    3c46:	1c28      	adds	r0, r5, #0
    3c48:	4941      	ldr	r1, [pc, #260]	; (3d50 <trx_frame_read+0x134>)
    3c4a:	2201      	movs	r2, #1
    3c4c:	4b41      	ldr	r3, [pc, #260]	; (3d54 <trx_frame_read+0x138>)
    3c4e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c50:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c52:	2101      	movs	r1, #1
    3c54:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3c56:	420a      	tst	r2, r1
    3c58:	d0fc      	beq.n	3c54 <trx_frame_read+0x38>
    3c5a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3c5c:	07d1      	lsls	r1, r2, #31
    3c5e:	d501      	bpl.n	3c64 <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c60:	2220      	movs	r2, #32
    3c62:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c64:	2102      	movs	r1, #2
    3c66:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3c68:	420a      	tst	r2, r1
    3c6a:	d0fc      	beq.n	3c66 <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c6c:	2004      	movs	r0, #4
    3c6e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c70:	4202      	tst	r2, r0
    3c72:	d0fc      	beq.n	3c6e <trx_frame_read+0x52>
    3c74:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3c76:	0750      	lsls	r0, r2, #29
    3c78:	d50f      	bpl.n	3c9a <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c7a:	8b5a      	ldrh	r2, [r3, #26]
    3c7c:	0751      	lsls	r1, r2, #29
    3c7e:	d503      	bpl.n	3c88 <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3c80:	8b59      	ldrh	r1, [r3, #26]
    3c82:	2204      	movs	r2, #4
    3c84:	430a      	orrs	r2, r1
    3c86:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c88:	4a30      	ldr	r2, [pc, #192]	; (3d4c <trx_frame_read+0x130>)
    3c8a:	7992      	ldrb	r2, [r2, #6]
    3c8c:	2a01      	cmp	r2, #1
    3c8e:	d109      	bne.n	3ca4 <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c92:	05d2      	lsls	r2, r2, #23
    3c94:	0dd2      	lsrs	r2, r2, #23
    3c96:	4b30      	ldr	r3, [pc, #192]	; (3d58 <trx_frame_read+0x13c>)
    3c98:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3c9a:	1e63      	subs	r3, r4, #1
    3c9c:	b2db      	uxtb	r3, r3
    3c9e:	2c00      	cmp	r4, #0
    3ca0:	d105      	bne.n	3cae <trx_frame_read+0x92>
    3ca2:	e03c      	b.n	3d1e <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ca6:	b2d2      	uxtb	r2, r2
    3ca8:	4b2b      	ldr	r3, [pc, #172]	; (3d58 <trx_frame_read+0x13c>)
    3caa:	801a      	strh	r2, [r3, #0]
    3cac:	e7f5      	b.n	3c9a <trx_frame_read+0x7e>
    3cae:	3301      	adds	r3, #1
    3cb0:	199b      	adds	r3, r3, r6
    3cb2:	4699      	mov	r9, r3
    3cb4:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3cb6:	4a25      	ldr	r2, [pc, #148]	; (3d4c <trx_frame_read+0x130>)
    3cb8:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3cba:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cbc:	2300      	movs	r3, #0
    3cbe:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cc0:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cc2:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3cc4:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3cc6:	2204      	movs	r2, #4
    3cc8:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3cca:	4642      	mov	r2, r8
    3ccc:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3cce:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3cd0:	4222      	tst	r2, r4
    3cd2:	d0fc      	beq.n	3cce <trx_frame_read+0xb2>
    3cd4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3cd6:	4222      	tst	r2, r4
    3cd8:	d001      	beq.n	3cde <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cda:	4652      	mov	r2, sl
    3cdc:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3cde:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3ce0:	422a      	tst	r2, r5
    3ce2:	d0fc      	beq.n	3cde <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ce4:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3ce6:	420a      	tst	r2, r1
    3ce8:	d0fc      	beq.n	3ce4 <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3cea:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3cee:	420a      	tst	r2, r1
    3cf0:	d011      	beq.n	3d16 <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cf2:	8b5a      	ldrh	r2, [r3, #26]
    3cf4:	420a      	tst	r2, r1
    3cf6:	d004      	beq.n	3d02 <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3cf8:	8b5a      	ldrh	r2, [r3, #26]
    3cfa:	4658      	mov	r0, fp
    3cfc:	4302      	orrs	r2, r0
    3cfe:	b292      	uxth	r2, r2
    3d00:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d02:	4812      	ldr	r0, [pc, #72]	; (3d4c <trx_frame_read+0x130>)
    3d04:	7982      	ldrb	r2, [r0, #6]
    3d06:	2a01      	cmp	r2, #1
    3d08:	d103      	bne.n	3d12 <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3d0c:	05c0      	lsls	r0, r0, #23
    3d0e:	0dc0      	lsrs	r0, r0, #23
    3d10:	e001      	b.n	3d16 <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d12:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3d14:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    3d16:	7030      	strb	r0, [r6, #0]
		data++;
    3d18:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3d1a:	454e      	cmp	r6, r9
    3d1c:	d1d5      	bne.n	3cca <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3d1e:	480b      	ldr	r0, [pc, #44]	; (3d4c <trx_frame_read+0x130>)
    3d20:	490b      	ldr	r1, [pc, #44]	; (3d50 <trx_frame_read+0x134>)
    3d22:	2200      	movs	r2, #0
    3d24:	4b0b      	ldr	r3, [pc, #44]	; (3d54 <trx_frame_read+0x138>)
    3d26:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3d28:	9901      	ldr	r1, [sp, #4]
    3d2a:	2900      	cmp	r1, #0
    3d2c:	d005      	beq.n	3d3a <trx_frame_read+0x11e>
		cpu_irq_enable();
    3d2e:	2201      	movs	r2, #1
    3d30:	4b05      	ldr	r3, [pc, #20]	; (3d48 <trx_frame_read+0x12c>)
    3d32:	701a      	strb	r2, [r3, #0]
    3d34:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3d38:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3d3a:	b003      	add	sp, #12
    3d3c:	bc3c      	pop	{r2, r3, r4, r5}
    3d3e:	4690      	mov	r8, r2
    3d40:	4699      	mov	r9, r3
    3d42:	46a2      	mov	sl, r4
    3d44:	46ab      	mov	fp, r5
    3d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d48:	20000008 	.word	0x20000008
    3d4c:	20000dc0 	.word	0x20000dc0
    3d50:	20000d84 	.word	0x20000d84
    3d54:	00000d65 	.word	0x00000d65
    3d58:	20000d7c 	.word	0x20000d7c

00003d5c <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d5e:	464f      	mov	r7, r9
    3d60:	4646      	mov	r6, r8
    3d62:	b4c0      	push	{r6, r7}
    3d64:	1c04      	adds	r4, r0, #0
    3d66:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d68:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3d6c:	4271      	negs	r1, r6
    3d6e:	4171      	adcs	r1, r6
    3d70:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3d72:	b672      	cpsid	i
    3d74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3d78:	2200      	movs	r2, #0
    3d7a:	4b3c      	ldr	r3, [pc, #240]	; (3e6c <trx_frame_write+0x110>)
    3d7c:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3d7e:	4f3c      	ldr	r7, [pc, #240]	; (3e70 <trx_frame_write+0x114>)
    3d80:	1c38      	adds	r0, r7, #0
    3d82:	493c      	ldr	r1, [pc, #240]	; (3e74 <trx_frame_write+0x118>)
    3d84:	2201      	movs	r2, #1
    3d86:	4b3c      	ldr	r3, [pc, #240]	; (3e78 <trx_frame_write+0x11c>)
    3d88:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d8a:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d8c:	2101      	movs	r1, #1
    3d8e:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3d90:	420a      	tst	r2, r1
    3d92:	d0fc      	beq.n	3d8e <trx_frame_write+0x32>
    3d94:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3d96:	07d1      	lsls	r1, r2, #31
    3d98:	d501      	bpl.n	3d9e <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d9a:	2260      	movs	r2, #96	; 0x60
    3d9c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d9e:	2102      	movs	r1, #2
    3da0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3da2:	420a      	tst	r2, r1
    3da4:	d0fc      	beq.n	3da0 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3da6:	2104      	movs	r1, #4
    3da8:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3daa:	420a      	tst	r2, r1
    3dac:	d0fc      	beq.n	3da8 <trx_frame_write+0x4c>
    3dae:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3db0:	0751      	lsls	r1, r2, #29
    3db2:	d50f      	bpl.n	3dd4 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3db4:	8b5a      	ldrh	r2, [r3, #26]
    3db6:	0751      	lsls	r1, r2, #29
    3db8:	d503      	bpl.n	3dc2 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3dba:	8b59      	ldrh	r1, [r3, #26]
    3dbc:	2204      	movs	r2, #4
    3dbe:	430a      	orrs	r2, r1
    3dc0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3dc2:	4a2b      	ldr	r2, [pc, #172]	; (3e70 <trx_frame_write+0x114>)
    3dc4:	7992      	ldrb	r2, [r2, #6]
    3dc6:	2a01      	cmp	r2, #1
    3dc8:	d10e      	bne.n	3de8 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3dca:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3dcc:	05c9      	lsls	r1, r1, #23
    3dce:	0dc9      	lsrs	r1, r1, #23
    3dd0:	4a2a      	ldr	r2, [pc, #168]	; (3e7c <trx_frame_write+0x120>)
    3dd2:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3dd4:	4a26      	ldr	r2, [pc, #152]	; (3e70 <trx_frame_write+0x114>)
    3dd6:	7992      	ldrb	r2, [r2, #6]
    3dd8:	4690      	mov	r8, r2
    3dda:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ddc:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3dde:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3de0:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3de2:	2204      	movs	r2, #4
    3de4:	4694      	mov	ip, r2
    3de6:	e02b      	b.n	3e40 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3de8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3dea:	b2c9      	uxtb	r1, r1
    3dec:	4a23      	ldr	r2, [pc, #140]	; (3e7c <trx_frame_write+0x120>)
    3dee:	8011      	strh	r1, [r2, #0]
    3df0:	e7f0      	b.n	3dd4 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3df2:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3df4:	423a      	tst	r2, r7
    3df6:	d0fc      	beq.n	3df2 <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    3df8:	7831      	ldrb	r1, [r6, #0]
    3dfa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3dfc:	423a      	tst	r2, r7
    3dfe:	d000      	beq.n	3e02 <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e00:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e02:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3e04:	4202      	tst	r2, r0
    3e06:	d0fc      	beq.n	3e02 <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e08:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3e0a:	4222      	tst	r2, r4
    3e0c:	d0fc      	beq.n	3e08 <trx_frame_write+0xac>
    3e0e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3e10:	4222      	tst	r2, r4
    3e12:	d014      	beq.n	3e3e <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e14:	8b5a      	ldrh	r2, [r3, #26]
    3e16:	4222      	tst	r2, r4
    3e18:	d004      	beq.n	3e24 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3e1a:	8b5a      	ldrh	r2, [r3, #26]
    3e1c:	4661      	mov	r1, ip
    3e1e:	430a      	orrs	r2, r1
    3e20:	b292      	uxth	r2, r2
    3e22:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e24:	4642      	mov	r2, r8
    3e26:	2a01      	cmp	r2, #1
    3e28:	d105      	bne.n	3e36 <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e2c:	05d2      	lsls	r2, r2, #23
    3e2e:	0dd2      	lsrs	r2, r2, #23
    3e30:	4912      	ldr	r1, [pc, #72]	; (3e7c <trx_frame_write+0x120>)
    3e32:	800a      	strh	r2, [r1, #0]
    3e34:	e003      	b.n	3e3e <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e38:	b2d2      	uxtb	r2, r2
    3e3a:	4910      	ldr	r1, [pc, #64]	; (3e7c <trx_frame_write+0x120>)
    3e3c:	800a      	strh	r2, [r1, #0]
    3e3e:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    3e40:	3d01      	subs	r5, #1
    3e42:	b2ed      	uxtb	r5, r5
    3e44:	2dff      	cmp	r5, #255	; 0xff
    3e46:	d1d4      	bne.n	3df2 <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3e48:	4809      	ldr	r0, [pc, #36]	; (3e70 <trx_frame_write+0x114>)
    3e4a:	490a      	ldr	r1, [pc, #40]	; (3e74 <trx_frame_write+0x118>)
    3e4c:	2200      	movs	r2, #0
    3e4e:	4b0a      	ldr	r3, [pc, #40]	; (3e78 <trx_frame_write+0x11c>)
    3e50:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3e52:	464a      	mov	r2, r9
    3e54:	2a00      	cmp	r2, #0
    3e56:	d005      	beq.n	3e64 <trx_frame_write+0x108>
		cpu_irq_enable();
    3e58:	2201      	movs	r2, #1
    3e5a:	4b04      	ldr	r3, [pc, #16]	; (3e6c <trx_frame_write+0x110>)
    3e5c:	701a      	strb	r2, [r3, #0]
    3e5e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3e62:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3e64:	bc0c      	pop	{r2, r3}
    3e66:	4690      	mov	r8, r2
    3e68:	4699      	mov	r9, r3
    3e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e6c:	20000008 	.word	0x20000008
    3e70:	20000dc0 	.word	0x20000dc0
    3e74:	20000d84 	.word	0x20000d84
    3e78:	00000d65 	.word	0x00000d65
    3e7c:	20000d7c 	.word	0x20000d7c

00003e80 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3e80:	4b0c      	ldr	r3, [pc, #48]	; (3eb4 <cpu_irq_enter_critical+0x34>)
    3e82:	681b      	ldr	r3, [r3, #0]
    3e84:	2b00      	cmp	r3, #0
    3e86:	d110      	bne.n	3eaa <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e88:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d109      	bne.n	3ea4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3e90:	b672      	cpsid	i
    3e92:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3e96:	2200      	movs	r2, #0
    3e98:	4b07      	ldr	r3, [pc, #28]	; (3eb8 <cpu_irq_enter_critical+0x38>)
    3e9a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3e9c:	2201      	movs	r2, #1
    3e9e:	4b07      	ldr	r3, [pc, #28]	; (3ebc <cpu_irq_enter_critical+0x3c>)
    3ea0:	701a      	strb	r2, [r3, #0]
    3ea2:	e002      	b.n	3eaa <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3ea4:	2200      	movs	r2, #0
    3ea6:	4b05      	ldr	r3, [pc, #20]	; (3ebc <cpu_irq_enter_critical+0x3c>)
    3ea8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3eaa:	4b02      	ldr	r3, [pc, #8]	; (3eb4 <cpu_irq_enter_critical+0x34>)
    3eac:	681a      	ldr	r2, [r3, #0]
    3eae:	3201      	adds	r2, #1
    3eb0:	601a      	str	r2, [r3, #0]
}
    3eb2:	4770      	bx	lr
    3eb4:	20000bd4 	.word	0x20000bd4
    3eb8:	20000008 	.word	0x20000008
    3ebc:	20000bd8 	.word	0x20000bd8

00003ec0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3ec0:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <cpu_irq_leave_critical+0x24>)
    3ec2:	681a      	ldr	r2, [r3, #0]
    3ec4:	3a01      	subs	r2, #1
    3ec6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3ec8:	681b      	ldr	r3, [r3, #0]
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d109      	bne.n	3ee2 <cpu_irq_leave_critical+0x22>
    3ece:	4b06      	ldr	r3, [pc, #24]	; (3ee8 <cpu_irq_leave_critical+0x28>)
    3ed0:	781b      	ldrb	r3, [r3, #0]
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d005      	beq.n	3ee2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3ed6:	2201      	movs	r2, #1
    3ed8:	4b04      	ldr	r3, [pc, #16]	; (3eec <cpu_irq_leave_critical+0x2c>)
    3eda:	701a      	strb	r2, [r3, #0]
    3edc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3ee0:	b662      	cpsie	i
	}
}
    3ee2:	4770      	bx	lr
    3ee4:	20000bd4 	.word	0x20000bd4
    3ee8:	20000bd8 	.word	0x20000bd8
    3eec:	20000008 	.word	0x20000008

00003ef0 <system_board_init>:




void system_board_init(void)
{
    3ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ef2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3ef4:	ac01      	add	r4, sp, #4
    3ef6:	2501      	movs	r5, #1
    3ef8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3efa:	2700      	movs	r7, #0
    3efc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3efe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3f00:	2013      	movs	r0, #19
    3f02:	1c21      	adds	r1, r4, #0
    3f04:	4e06      	ldr	r6, [pc, #24]	; (3f20 <system_board_init+0x30>)
    3f06:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3f08:	2280      	movs	r2, #128	; 0x80
    3f0a:	0312      	lsls	r2, r2, #12
    3f0c:	4b05      	ldr	r3, [pc, #20]	; (3f24 <system_board_init+0x34>)
    3f0e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3f10:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3f12:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3f14:	201c      	movs	r0, #28
    3f16:	1c21      	adds	r1, r4, #0
    3f18:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    3f1a:	b003      	add	sp, #12
    3f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	00003f29 	.word	0x00003f29
    3f24:	41004400 	.word	0x41004400

00003f28 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3f28:	b500      	push	{lr}
    3f2a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3f2c:	ab01      	add	r3, sp, #4
    3f2e:	2280      	movs	r2, #128	; 0x80
    3f30:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3f32:	780a      	ldrb	r2, [r1, #0]
    3f34:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3f36:	784a      	ldrb	r2, [r1, #1]
    3f38:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3f3a:	788a      	ldrb	r2, [r1, #2]
    3f3c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3f3e:	1c19      	adds	r1, r3, #0
    3f40:	4b01      	ldr	r3, [pc, #4]	; (3f48 <port_pin_set_config+0x20>)
    3f42:	4798      	blx	r3
}
    3f44:	b003      	add	sp, #12
    3f46:	bd00      	pop	{pc}
    3f48:	0000445d 	.word	0x0000445d

00003f4c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3f4c:	b508      	push	{r3, lr}
	switch (clock_source) {
    3f4e:	2808      	cmp	r0, #8
    3f50:	d834      	bhi.n	3fbc <system_clock_source_get_hz+0x70>
    3f52:	0080      	lsls	r0, r0, #2
    3f54:	4b1b      	ldr	r3, [pc, #108]	; (3fc4 <system_clock_source_get_hz+0x78>)
    3f56:	581b      	ldr	r3, [r3, r0]
    3f58:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3f5a:	2080      	movs	r0, #128	; 0x80
    3f5c:	0200      	lsls	r0, r0, #8
    3f5e:	e030      	b.n	3fc2 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3f60:	4b19      	ldr	r3, [pc, #100]	; (3fc8 <system_clock_source_get_hz+0x7c>)
    3f62:	6918      	ldr	r0, [r3, #16]
    3f64:	e02d      	b.n	3fc2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3f66:	4b19      	ldr	r3, [pc, #100]	; (3fcc <system_clock_source_get_hz+0x80>)
    3f68:	6a18      	ldr	r0, [r3, #32]
    3f6a:	0580      	lsls	r0, r0, #22
    3f6c:	0f80      	lsrs	r0, r0, #30
    3f6e:	4b18      	ldr	r3, [pc, #96]	; (3fd0 <system_clock_source_get_hz+0x84>)
    3f70:	40c3      	lsrs	r3, r0
    3f72:	1c18      	adds	r0, r3, #0
    3f74:	e025      	b.n	3fc2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3f76:	4b14      	ldr	r3, [pc, #80]	; (3fc8 <system_clock_source_get_hz+0x7c>)
    3f78:	6958      	ldr	r0, [r3, #20]
    3f7a:	e022      	b.n	3fc2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3f7c:	4b12      	ldr	r3, [pc, #72]	; (3fc8 <system_clock_source_get_hz+0x7c>)
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	2002      	movs	r0, #2
    3f82:	4018      	ands	r0, r3
    3f84:	d01d      	beq.n	3fc2 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3f86:	4911      	ldr	r1, [pc, #68]	; (3fcc <system_clock_source_get_hz+0x80>)
    3f88:	2210      	movs	r2, #16
    3f8a:	68cb      	ldr	r3, [r1, #12]
    3f8c:	421a      	tst	r2, r3
    3f8e:	d0fc      	beq.n	3f8a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3f90:	4b0d      	ldr	r3, [pc, #52]	; (3fc8 <system_clock_source_get_hz+0x7c>)
    3f92:	681b      	ldr	r3, [r3, #0]
    3f94:	075a      	lsls	r2, r3, #29
    3f96:	d513      	bpl.n	3fc0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3f98:	2000      	movs	r0, #0
    3f9a:	4b0e      	ldr	r3, [pc, #56]	; (3fd4 <system_clock_source_get_hz+0x88>)
    3f9c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3f9e:	4b0a      	ldr	r3, [pc, #40]	; (3fc8 <system_clock_source_get_hz+0x7c>)
    3fa0:	689b      	ldr	r3, [r3, #8]
    3fa2:	041b      	lsls	r3, r3, #16
    3fa4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3fa6:	4358      	muls	r0, r3
    3fa8:	e00b      	b.n	3fc2 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3faa:	2350      	movs	r3, #80	; 0x50
    3fac:	4a07      	ldr	r2, [pc, #28]	; (3fcc <system_clock_source_get_hz+0x80>)
    3fae:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3fb0:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3fb2:	075a      	lsls	r2, r3, #29
    3fb4:	d505      	bpl.n	3fc2 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3fb6:	4b04      	ldr	r3, [pc, #16]	; (3fc8 <system_clock_source_get_hz+0x7c>)
    3fb8:	68d8      	ldr	r0, [r3, #12]
    3fba:	e002      	b.n	3fc2 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    3fbc:	2000      	movs	r0, #0
    3fbe:	e000      	b.n	3fc2 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3fc0:	4805      	ldr	r0, [pc, #20]	; (3fd8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    3fc2:	bd08      	pop	{r3, pc}
    3fc4:	00005f70 	.word	0x00005f70
    3fc8:	20000bdc 	.word	0x20000bdc
    3fcc:	40000800 	.word	0x40000800
    3fd0:	007a1200 	.word	0x007a1200
    3fd4:	0000439d 	.word	0x0000439d
    3fd8:	02dc6c00 	.word	0x02dc6c00

00003fdc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3fdc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3fde:	4b0c      	ldr	r3, [pc, #48]	; (4010 <system_clock_source_osc8m_set_config+0x34>)
    3fe0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3fe2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3fe4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3fe6:	7840      	ldrb	r0, [r0, #1]
    3fe8:	2201      	movs	r2, #1
    3fea:	4010      	ands	r0, r2
    3fec:	0180      	lsls	r0, r0, #6
    3fee:	2640      	movs	r6, #64	; 0x40
    3ff0:	43b4      	bics	r4, r6
    3ff2:	4304      	orrs	r4, r0
    3ff4:	402a      	ands	r2, r5
    3ff6:	01d0      	lsls	r0, r2, #7
    3ff8:	2280      	movs	r2, #128	; 0x80
    3ffa:	4394      	bics	r4, r2
    3ffc:	1c22      	adds	r2, r4, #0
    3ffe:	4302      	orrs	r2, r0
    4000:	2003      	movs	r0, #3
    4002:	4001      	ands	r1, r0
    4004:	0209      	lsls	r1, r1, #8
    4006:	4803      	ldr	r0, [pc, #12]	; (4014 <system_clock_source_osc8m_set_config+0x38>)
    4008:	4002      	ands	r2, r0
    400a:	430a      	orrs	r2, r1
    400c:	621a      	str	r2, [r3, #32]
}
    400e:	bd70      	pop	{r4, r5, r6, pc}
    4010:	40000800 	.word	0x40000800
    4014:	fffffcff 	.word	0xfffffcff

00004018 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4018:	2808      	cmp	r0, #8
    401a:	d843      	bhi.n	40a4 <system_clock_source_enable+0x8c>
    401c:	0080      	lsls	r0, r0, #2
    401e:	4b22      	ldr	r3, [pc, #136]	; (40a8 <system_clock_source_enable+0x90>)
    4020:	581b      	ldr	r3, [r3, r0]
    4022:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4024:	2000      	movs	r0, #0
    4026:	e03e      	b.n	40a6 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4028:	4b20      	ldr	r3, [pc, #128]	; (40ac <system_clock_source_enable+0x94>)
    402a:	6a19      	ldr	r1, [r3, #32]
    402c:	2202      	movs	r2, #2
    402e:	430a      	orrs	r2, r1
    4030:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4032:	2000      	movs	r0, #0
    4034:	e037      	b.n	40a6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4036:	4b1d      	ldr	r3, [pc, #116]	; (40ac <system_clock_source_enable+0x94>)
    4038:	6999      	ldr	r1, [r3, #24]
    403a:	2202      	movs	r2, #2
    403c:	430a      	orrs	r2, r1
    403e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4040:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    4042:	e030      	b.n	40a6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4044:	4b19      	ldr	r3, [pc, #100]	; (40ac <system_clock_source_enable+0x94>)
    4046:	8a19      	ldrh	r1, [r3, #16]
    4048:	2202      	movs	r2, #2
    404a:	430a      	orrs	r2, r1
    404c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    404e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    4050:	e029      	b.n	40a6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4052:	4b16      	ldr	r3, [pc, #88]	; (40ac <system_clock_source_enable+0x94>)
    4054:	8a99      	ldrh	r1, [r3, #20]
    4056:	2202      	movs	r2, #2
    4058:	430a      	orrs	r2, r1
    405a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    405c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    405e:	e022      	b.n	40a6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4060:	4b13      	ldr	r3, [pc, #76]	; (40b0 <system_clock_source_enable+0x98>)
    4062:	6819      	ldr	r1, [r3, #0]
    4064:	2202      	movs	r2, #2
    4066:	430a      	orrs	r2, r1
    4068:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    406a:	681a      	ldr	r2, [r3, #0]
    406c:	4b11      	ldr	r3, [pc, #68]	; (40b4 <system_clock_source_enable+0x9c>)
    406e:	401a      	ands	r2, r3
    4070:	4b0e      	ldr	r3, [pc, #56]	; (40ac <system_clock_source_enable+0x94>)
    4072:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4074:	1c19      	adds	r1, r3, #0
    4076:	2210      	movs	r2, #16
    4078:	68cb      	ldr	r3, [r1, #12]
    407a:	421a      	tst	r2, r3
    407c:	d0fc      	beq.n	4078 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    407e:	4a0c      	ldr	r2, [pc, #48]	; (40b0 <system_clock_source_enable+0x98>)
    4080:	6891      	ldr	r1, [r2, #8]
    4082:	4b0a      	ldr	r3, [pc, #40]	; (40ac <system_clock_source_enable+0x94>)
    4084:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4086:	6851      	ldr	r1, [r2, #4]
    4088:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    408a:	6812      	ldr	r2, [r2, #0]
    408c:	b292      	uxth	r2, r2
    408e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4090:	2000      	movs	r0, #0
    4092:	e008      	b.n	40a6 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4094:	4a05      	ldr	r2, [pc, #20]	; (40ac <system_clock_source_enable+0x94>)
    4096:	2344      	movs	r3, #68	; 0x44
    4098:	5cd0      	ldrb	r0, [r2, r3]
    409a:	2102      	movs	r1, #2
    409c:	4301      	orrs	r1, r0
    409e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    40a0:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    40a2:	e000      	b.n	40a6 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    40a4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    40a6:	4770      	bx	lr
    40a8:	00005f94 	.word	0x00005f94
    40ac:	40000800 	.word	0x40000800
    40b0:	20000bdc 	.word	0x20000bdc
    40b4:	0000ff7f 	.word	0x0000ff7f

000040b8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    40b8:	b530      	push	{r4, r5, lr}
    40ba:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    40bc:	22c2      	movs	r2, #194	; 0xc2
    40be:	00d2      	lsls	r2, r2, #3
    40c0:	4b19      	ldr	r3, [pc, #100]	; (4128 <system_clock_init+0x70>)
    40c2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    40c4:	4b19      	ldr	r3, [pc, #100]	; (412c <system_clock_init+0x74>)
    40c6:	685a      	ldr	r2, [r3, #4]
    40c8:	211e      	movs	r1, #30
    40ca:	438a      	bics	r2, r1
    40cc:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    40ce:	2301      	movs	r3, #1
    40d0:	466a      	mov	r2, sp
    40d2:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    40d4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    40d6:	4d16      	ldr	r5, [pc, #88]	; (4130 <system_clock_init+0x78>)
    40d8:	b2e0      	uxtb	r0, r4
    40da:	4669      	mov	r1, sp
    40dc:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    40de:	3401      	adds	r4, #1
    40e0:	2c25      	cmp	r4, #37	; 0x25
    40e2:	d1f9      	bne.n	40d8 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    40e4:	a803      	add	r0, sp, #12
    40e6:	2400      	movs	r4, #0
    40e8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    40ea:	2501      	movs	r5, #1
    40ec:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    40ee:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    40f0:	4b10      	ldr	r3, [pc, #64]	; (4134 <system_clock_init+0x7c>)
    40f2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    40f4:	2006      	movs	r0, #6
    40f6:	4b10      	ldr	r3, [pc, #64]	; (4138 <system_clock_init+0x80>)
    40f8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    40fa:	4b10      	ldr	r3, [pc, #64]	; (413c <system_clock_init+0x84>)
    40fc:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    40fe:	4b10      	ldr	r3, [pc, #64]	; (4140 <system_clock_init+0x88>)
    4100:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4102:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4104:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4106:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    4108:	466b      	mov	r3, sp
    410a:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    410c:	2306      	movs	r3, #6
    410e:	466a      	mov	r2, sp
    4110:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    4112:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    4114:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4116:	2000      	movs	r0, #0
    4118:	4669      	mov	r1, sp
    411a:	4b0a      	ldr	r3, [pc, #40]	; (4144 <system_clock_init+0x8c>)
    411c:	4798      	blx	r3
    411e:	2000      	movs	r0, #0
    4120:	4b09      	ldr	r3, [pc, #36]	; (4148 <system_clock_init+0x90>)
    4122:	4798      	blx	r3
#endif
}
    4124:	b005      	add	sp, #20
    4126:	bd30      	pop	{r4, r5, pc}
    4128:	40000800 	.word	0x40000800
    412c:	41004000 	.word	0x41004000
    4130:	00004381 	.word	0x00004381
    4134:	00003fdd 	.word	0x00003fdd
    4138:	00004019 	.word	0x00004019
    413c:	0000414d 	.word	0x0000414d
    4140:	40000400 	.word	0x40000400
    4144:	00004171 	.word	0x00004171
    4148:	00004225 	.word	0x00004225

0000414c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    414c:	4b06      	ldr	r3, [pc, #24]	; (4168 <system_gclk_init+0x1c>)
    414e:	6999      	ldr	r1, [r3, #24]
    4150:	2208      	movs	r2, #8
    4152:	430a      	orrs	r2, r1
    4154:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4156:	2201      	movs	r2, #1
    4158:	4b04      	ldr	r3, [pc, #16]	; (416c <system_gclk_init+0x20>)
    415a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    415c:	1c19      	adds	r1, r3, #0
    415e:	780b      	ldrb	r3, [r1, #0]
    4160:	4213      	tst	r3, r2
    4162:	d1fc      	bne.n	415e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4164:	4770      	bx	lr
    4166:	46c0      	nop			; (mov r8, r8)
    4168:	40000400 	.word	0x40000400
    416c:	40000c00 	.word	0x40000c00

00004170 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4172:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4174:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4176:	780d      	ldrb	r5, [r1, #0]
    4178:	022d      	lsls	r5, r5, #8
    417a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    417c:	784b      	ldrb	r3, [r1, #1]
    417e:	2b00      	cmp	r3, #0
    4180:	d002      	beq.n	4188 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4182:	2380      	movs	r3, #128	; 0x80
    4184:	02db      	lsls	r3, r3, #11
    4186:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4188:	7a4b      	ldrb	r3, [r1, #9]
    418a:	2b00      	cmp	r3, #0
    418c:	d002      	beq.n	4194 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    418e:	2380      	movs	r3, #128	; 0x80
    4190:	031b      	lsls	r3, r3, #12
    4192:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4194:	684c      	ldr	r4, [r1, #4]
    4196:	2c01      	cmp	r4, #1
    4198:	d917      	bls.n	41ca <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    419a:	1e63      	subs	r3, r4, #1
    419c:	421c      	tst	r4, r3
    419e:	d10f      	bne.n	41c0 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    41a0:	2c02      	cmp	r4, #2
    41a2:	d906      	bls.n	41b2 <system_gclk_gen_set_config+0x42>
    41a4:	2302      	movs	r3, #2
    41a6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    41a8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    41aa:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    41ac:	429c      	cmp	r4, r3
    41ae:	d8fb      	bhi.n	41a8 <system_gclk_gen_set_config+0x38>
    41b0:	e000      	b.n	41b4 <system_gclk_gen_set_config+0x44>
    41b2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    41b4:	0217      	lsls	r7, r2, #8
    41b6:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    41b8:	2380      	movs	r3, #128	; 0x80
    41ba:	035b      	lsls	r3, r3, #13
    41bc:	431d      	orrs	r5, r3
    41be:	e004      	b.n	41ca <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    41c0:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    41c2:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    41c4:	2380      	movs	r3, #128	; 0x80
    41c6:	029b      	lsls	r3, r3, #10
    41c8:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    41ca:	7a0b      	ldrb	r3, [r1, #8]
    41cc:	2b00      	cmp	r3, #0
    41ce:	d002      	beq.n	41d6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    41d0:	2380      	movs	r3, #128	; 0x80
    41d2:	039b      	lsls	r3, r3, #14
    41d4:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    41d6:	4a0f      	ldr	r2, [pc, #60]	; (4214 <system_gclk_gen_set_config+0xa4>)
    41d8:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    41da:	b25b      	sxtb	r3, r3
    41dc:	2b00      	cmp	r3, #0
    41de:	dbfb      	blt.n	41d8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    41e0:	4b0d      	ldr	r3, [pc, #52]	; (4218 <system_gclk_gen_set_config+0xa8>)
    41e2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    41e4:	4b0d      	ldr	r3, [pc, #52]	; (421c <system_gclk_gen_set_config+0xac>)
    41e6:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    41e8:	4a0a      	ldr	r2, [pc, #40]	; (4214 <system_gclk_gen_set_config+0xa4>)
    41ea:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    41ec:	b25b      	sxtb	r3, r3
    41ee:	2b00      	cmp	r3, #0
    41f0:	dbfb      	blt.n	41ea <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    41f2:	4b08      	ldr	r3, [pc, #32]	; (4214 <system_gclk_gen_set_config+0xa4>)
    41f4:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    41f6:	1c1a      	adds	r2, r3, #0
    41f8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    41fa:	b25b      	sxtb	r3, r3
    41fc:	2b00      	cmp	r3, #0
    41fe:	dbfb      	blt.n	41f8 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4200:	4b04      	ldr	r3, [pc, #16]	; (4214 <system_gclk_gen_set_config+0xa4>)
    4202:	6859      	ldr	r1, [r3, #4]
    4204:	2280      	movs	r2, #128	; 0x80
    4206:	0252      	lsls	r2, r2, #9
    4208:	400a      	ands	r2, r1
    420a:	4315      	orrs	r5, r2
    420c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    420e:	4b04      	ldr	r3, [pc, #16]	; (4220 <system_gclk_gen_set_config+0xb0>)
    4210:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4214:	40000c00 	.word	0x40000c00
    4218:	00003e81 	.word	0x00003e81
    421c:	40000c08 	.word	0x40000c08
    4220:	00003ec1 	.word	0x00003ec1

00004224 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4224:	b510      	push	{r4, lr}
    4226:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4228:	4a0b      	ldr	r2, [pc, #44]	; (4258 <system_gclk_gen_enable+0x34>)
    422a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    422c:	b25b      	sxtb	r3, r3
    422e:	2b00      	cmp	r3, #0
    4230:	dbfb      	blt.n	422a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4232:	4b0a      	ldr	r3, [pc, #40]	; (425c <system_gclk_gen_enable+0x38>)
    4234:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4236:	4b0a      	ldr	r3, [pc, #40]	; (4260 <system_gclk_gen_enable+0x3c>)
    4238:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    423a:	4a07      	ldr	r2, [pc, #28]	; (4258 <system_gclk_gen_enable+0x34>)
    423c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    423e:	b25b      	sxtb	r3, r3
    4240:	2b00      	cmp	r3, #0
    4242:	dbfb      	blt.n	423c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4244:	4b04      	ldr	r3, [pc, #16]	; (4258 <system_gclk_gen_enable+0x34>)
    4246:	6859      	ldr	r1, [r3, #4]
    4248:	2280      	movs	r2, #128	; 0x80
    424a:	0252      	lsls	r2, r2, #9
    424c:	430a      	orrs	r2, r1
    424e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4250:	4b04      	ldr	r3, [pc, #16]	; (4264 <system_gclk_gen_enable+0x40>)
    4252:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4254:	bd10      	pop	{r4, pc}
    4256:	46c0      	nop			; (mov r8, r8)
    4258:	40000c00 	.word	0x40000c00
    425c:	00003e81 	.word	0x00003e81
    4260:	40000c04 	.word	0x40000c04
    4264:	00003ec1 	.word	0x00003ec1

00004268 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4268:	b570      	push	{r4, r5, r6, lr}
    426a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    426c:	4a1a      	ldr	r2, [pc, #104]	; (42d8 <system_gclk_gen_get_hz+0x70>)
    426e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4270:	b25b      	sxtb	r3, r3
    4272:	2b00      	cmp	r3, #0
    4274:	dbfb      	blt.n	426e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4276:	4b19      	ldr	r3, [pc, #100]	; (42dc <system_gclk_gen_get_hz+0x74>)
    4278:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    427a:	4b19      	ldr	r3, [pc, #100]	; (42e0 <system_gclk_gen_get_hz+0x78>)
    427c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    427e:	4a16      	ldr	r2, [pc, #88]	; (42d8 <system_gclk_gen_get_hz+0x70>)
    4280:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4282:	b25b      	sxtb	r3, r3
    4284:	2b00      	cmp	r3, #0
    4286:	dbfb      	blt.n	4280 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4288:	4e13      	ldr	r6, [pc, #76]	; (42d8 <system_gclk_gen_get_hz+0x70>)
    428a:	6870      	ldr	r0, [r6, #4]
    428c:	04c0      	lsls	r0, r0, #19
    428e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4290:	4b14      	ldr	r3, [pc, #80]	; (42e4 <system_gclk_gen_get_hz+0x7c>)
    4292:	4798      	blx	r3
    4294:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4296:	4b12      	ldr	r3, [pc, #72]	; (42e0 <system_gclk_gen_get_hz+0x78>)
    4298:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    429a:	6876      	ldr	r6, [r6, #4]
    429c:	02f6      	lsls	r6, r6, #11
    429e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    42a0:	4b11      	ldr	r3, [pc, #68]	; (42e8 <system_gclk_gen_get_hz+0x80>)
    42a2:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    42a4:	4a0c      	ldr	r2, [pc, #48]	; (42d8 <system_gclk_gen_get_hz+0x70>)
    42a6:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    42a8:	b25b      	sxtb	r3, r3
    42aa:	2b00      	cmp	r3, #0
    42ac:	dbfb      	blt.n	42a6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    42ae:	4b0a      	ldr	r3, [pc, #40]	; (42d8 <system_gclk_gen_get_hz+0x70>)
    42b0:	689c      	ldr	r4, [r3, #8]
    42b2:	0a24      	lsrs	r4, r4, #8
    42b4:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    42b6:	4b0d      	ldr	r3, [pc, #52]	; (42ec <system_gclk_gen_get_hz+0x84>)
    42b8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    42ba:	2e00      	cmp	r6, #0
    42bc:	d107      	bne.n	42ce <system_gclk_gen_get_hz+0x66>
    42be:	2c01      	cmp	r4, #1
    42c0:	d907      	bls.n	42d2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    42c2:	1c28      	adds	r0, r5, #0
    42c4:	1c21      	adds	r1, r4, #0
    42c6:	4b0a      	ldr	r3, [pc, #40]	; (42f0 <system_gclk_gen_get_hz+0x88>)
    42c8:	4798      	blx	r3
    42ca:	1c05      	adds	r5, r0, #0
    42cc:	e001      	b.n	42d2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    42ce:	3401      	adds	r4, #1
    42d0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    42d2:	1c28      	adds	r0, r5, #0
    42d4:	bd70      	pop	{r4, r5, r6, pc}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	40000c00 	.word	0x40000c00
    42dc:	00003e81 	.word	0x00003e81
    42e0:	40000c04 	.word	0x40000c04
    42e4:	00003f4d 	.word	0x00003f4d
    42e8:	40000c08 	.word	0x40000c08
    42ec:	00003ec1 	.word	0x00003ec1
    42f0:	00004c35 	.word	0x00004c35

000042f4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    42f4:	b510      	push	{r4, lr}
    42f6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    42f8:	4b06      	ldr	r3, [pc, #24]	; (4314 <system_gclk_chan_enable+0x20>)
    42fa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    42fc:	4b06      	ldr	r3, [pc, #24]	; (4318 <system_gclk_chan_enable+0x24>)
    42fe:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4300:	4b06      	ldr	r3, [pc, #24]	; (431c <system_gclk_chan_enable+0x28>)
    4302:	8859      	ldrh	r1, [r3, #2]
    4304:	2280      	movs	r2, #128	; 0x80
    4306:	01d2      	lsls	r2, r2, #7
    4308:	430a      	orrs	r2, r1
    430a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    430c:	4b04      	ldr	r3, [pc, #16]	; (4320 <system_gclk_chan_enable+0x2c>)
    430e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4310:	bd10      	pop	{r4, pc}
    4312:	46c0      	nop			; (mov r8, r8)
    4314:	00003e81 	.word	0x00003e81
    4318:	40000c02 	.word	0x40000c02
    431c:	40000c00 	.word	0x40000c00
    4320:	00003ec1 	.word	0x00003ec1

00004324 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4324:	b510      	push	{r4, lr}
    4326:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4328:	4b0f      	ldr	r3, [pc, #60]	; (4368 <system_gclk_chan_disable+0x44>)
    432a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    432c:	4b0f      	ldr	r3, [pc, #60]	; (436c <system_gclk_chan_disable+0x48>)
    432e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4330:	4b0f      	ldr	r3, [pc, #60]	; (4370 <system_gclk_chan_disable+0x4c>)
    4332:	8858      	ldrh	r0, [r3, #2]
    4334:	0500      	lsls	r0, r0, #20
    4336:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4338:	8859      	ldrh	r1, [r3, #2]
    433a:	4a0e      	ldr	r2, [pc, #56]	; (4374 <system_gclk_chan_disable+0x50>)
    433c:	400a      	ands	r2, r1
    433e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4340:	8859      	ldrh	r1, [r3, #2]
    4342:	4a0d      	ldr	r2, [pc, #52]	; (4378 <system_gclk_chan_disable+0x54>)
    4344:	400a      	ands	r2, r1
    4346:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4348:	1c19      	adds	r1, r3, #0
    434a:	2280      	movs	r2, #128	; 0x80
    434c:	01d2      	lsls	r2, r2, #7
    434e:	884b      	ldrh	r3, [r1, #2]
    4350:	4213      	tst	r3, r2
    4352:	d1fc      	bne.n	434e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4354:	4b06      	ldr	r3, [pc, #24]	; (4370 <system_gclk_chan_disable+0x4c>)
    4356:	0201      	lsls	r1, r0, #8
    4358:	8858      	ldrh	r0, [r3, #2]
    435a:	4a06      	ldr	r2, [pc, #24]	; (4374 <system_gclk_chan_disable+0x50>)
    435c:	4002      	ands	r2, r0
    435e:	430a      	orrs	r2, r1
    4360:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4362:	4b06      	ldr	r3, [pc, #24]	; (437c <system_gclk_chan_disable+0x58>)
    4364:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4366:	bd10      	pop	{r4, pc}
    4368:	00003e81 	.word	0x00003e81
    436c:	40000c02 	.word	0x40000c02
    4370:	40000c00 	.word	0x40000c00
    4374:	fffff0ff 	.word	0xfffff0ff
    4378:	ffffbfff 	.word	0xffffbfff
    437c:	00003ec1 	.word	0x00003ec1

00004380 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4380:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4382:	780c      	ldrb	r4, [r1, #0]
    4384:	0224      	lsls	r4, r4, #8
    4386:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4388:	4b02      	ldr	r3, [pc, #8]	; (4394 <system_gclk_chan_set_config+0x14>)
    438a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    438c:	b2a4      	uxth	r4, r4
    438e:	4b02      	ldr	r3, [pc, #8]	; (4398 <system_gclk_chan_set_config+0x18>)
    4390:	805c      	strh	r4, [r3, #2]
}
    4392:	bd10      	pop	{r4, pc}
    4394:	00004325 	.word	0x00004325
    4398:	40000c00 	.word	0x40000c00

0000439c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    439c:	b510      	push	{r4, lr}
    439e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    43a0:	4b06      	ldr	r3, [pc, #24]	; (43bc <system_gclk_chan_get_hz+0x20>)
    43a2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    43a4:	4b06      	ldr	r3, [pc, #24]	; (43c0 <system_gclk_chan_get_hz+0x24>)
    43a6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    43a8:	4b06      	ldr	r3, [pc, #24]	; (43c4 <system_gclk_chan_get_hz+0x28>)
    43aa:	885c      	ldrh	r4, [r3, #2]
    43ac:	0524      	lsls	r4, r4, #20
    43ae:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    43b0:	4b05      	ldr	r3, [pc, #20]	; (43c8 <system_gclk_chan_get_hz+0x2c>)
    43b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    43b4:	1c20      	adds	r0, r4, #0
    43b6:	4b05      	ldr	r3, [pc, #20]	; (43cc <system_gclk_chan_get_hz+0x30>)
    43b8:	4798      	blx	r3
}
    43ba:	bd10      	pop	{r4, pc}
    43bc:	00003e81 	.word	0x00003e81
    43c0:	40000c02 	.word	0x40000c02
    43c4:	40000c00 	.word	0x40000c00
    43c8:	00003ec1 	.word	0x00003ec1
    43cc:	00004269 	.word	0x00004269

000043d0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    43d0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    43d2:	78d3      	ldrb	r3, [r2, #3]
    43d4:	2b00      	cmp	r3, #0
    43d6:	d11e      	bne.n	4416 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    43d8:	7813      	ldrb	r3, [r2, #0]
    43da:	2b80      	cmp	r3, #128	; 0x80
    43dc:	d004      	beq.n	43e8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    43de:	061b      	lsls	r3, r3, #24
    43e0:	2480      	movs	r4, #128	; 0x80
    43e2:	0264      	lsls	r4, r4, #9
    43e4:	4323      	orrs	r3, r4
    43e6:	e000      	b.n	43ea <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    43e8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    43ea:	7854      	ldrb	r4, [r2, #1]
    43ec:	2502      	movs	r5, #2
    43ee:	43ac      	bics	r4, r5
    43f0:	d10a      	bne.n	4408 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    43f2:	7894      	ldrb	r4, [r2, #2]
    43f4:	2c00      	cmp	r4, #0
    43f6:	d103      	bne.n	4400 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    43f8:	2480      	movs	r4, #128	; 0x80
    43fa:	02a4      	lsls	r4, r4, #10
    43fc:	4323      	orrs	r3, r4
    43fe:	e002      	b.n	4406 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4400:	24c0      	movs	r4, #192	; 0xc0
    4402:	02e4      	lsls	r4, r4, #11
    4404:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4406:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4408:	7854      	ldrb	r4, [r2, #1]
    440a:	3c01      	subs	r4, #1
    440c:	2c01      	cmp	r4, #1
    440e:	d804      	bhi.n	441a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4410:	4c11      	ldr	r4, [pc, #68]	; (4458 <_system_pinmux_config+0x88>)
    4412:	4023      	ands	r3, r4
    4414:	e001      	b.n	441a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    4416:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    4418:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    441a:	040d      	lsls	r5, r1, #16
    441c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    441e:	24a0      	movs	r4, #160	; 0xa0
    4420:	05e4      	lsls	r4, r4, #23
    4422:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4424:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4426:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4428:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    442a:	24d0      	movs	r4, #208	; 0xd0
    442c:	0624      	lsls	r4, r4, #24
    442e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4430:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4432:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4434:	78d4      	ldrb	r4, [r2, #3]
    4436:	2c00      	cmp	r4, #0
    4438:	d10c      	bne.n	4454 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    443a:	035c      	lsls	r4, r3, #13
    443c:	d505      	bpl.n	444a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    443e:	7893      	ldrb	r3, [r2, #2]
    4440:	2b01      	cmp	r3, #1
    4442:	d101      	bne.n	4448 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    4444:	6181      	str	r1, [r0, #24]
    4446:	e000      	b.n	444a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    4448:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    444a:	7853      	ldrb	r3, [r2, #1]
    444c:	3b01      	subs	r3, #1
    444e:	2b01      	cmp	r3, #1
    4450:	d800      	bhi.n	4454 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    4452:	6081      	str	r1, [r0, #8]
		}
	}
}
    4454:	bd30      	pop	{r4, r5, pc}
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	fffbffff 	.word	0xfffbffff

0000445c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    445c:	b508      	push	{r3, lr}
    445e:	1c03      	adds	r3, r0, #0
    4460:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4462:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4464:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4466:	2900      	cmp	r1, #0
    4468:	d103      	bne.n	4472 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    446a:	0958      	lsrs	r0, r3, #5
    446c:	01c0      	lsls	r0, r0, #7
    446e:	4904      	ldr	r1, [pc, #16]	; (4480 <system_pinmux_pin_set_config+0x24>)
    4470:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4472:	211f      	movs	r1, #31
    4474:	400b      	ands	r3, r1
    4476:	2101      	movs	r1, #1
    4478:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    447a:	4b02      	ldr	r3, [pc, #8]	; (4484 <system_pinmux_pin_set_config+0x28>)
    447c:	4798      	blx	r3
}
    447e:	bd08      	pop	{r3, pc}
    4480:	41004400 	.word	0x41004400
    4484:	000043d1 	.word	0x000043d1

00004488 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4488:	4770      	bx	lr
    448a:	46c0      	nop			; (mov r8, r8)

0000448c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    448c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    448e:	4b04      	ldr	r3, [pc, #16]	; (44a0 <system_init+0x14>)
    4490:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4492:	4b04      	ldr	r3, [pc, #16]	; (44a4 <system_init+0x18>)
    4494:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4496:	4b04      	ldr	r3, [pc, #16]	; (44a8 <system_init+0x1c>)
    4498:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    449a:	4b04      	ldr	r3, [pc, #16]	; (44ac <system_init+0x20>)
    449c:	4798      	blx	r3
}
    449e:	bd08      	pop	{r3, pc}
    44a0:	000040b9 	.word	0x000040b9
    44a4:	00003ef1 	.word	0x00003ef1
    44a8:	00004489 	.word	0x00004489
    44ac:	00000669 	.word	0x00000669

000044b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    44b0:	e7fe      	b.n	44b0 <Dummy_Handler>
    44b2:	46c0      	nop			; (mov r8, r8)

000044b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    44b4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    44b6:	4b1c      	ldr	r3, [pc, #112]	; (4528 <Reset_Handler+0x74>)
    44b8:	4a1c      	ldr	r2, [pc, #112]	; (452c <Reset_Handler+0x78>)
    44ba:	429a      	cmp	r2, r3
    44bc:	d003      	beq.n	44c6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    44be:	4b1c      	ldr	r3, [pc, #112]	; (4530 <Reset_Handler+0x7c>)
    44c0:	4a19      	ldr	r2, [pc, #100]	; (4528 <Reset_Handler+0x74>)
    44c2:	429a      	cmp	r2, r3
    44c4:	d304      	bcc.n	44d0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    44c6:	4b1b      	ldr	r3, [pc, #108]	; (4534 <Reset_Handler+0x80>)
    44c8:	4a1b      	ldr	r2, [pc, #108]	; (4538 <Reset_Handler+0x84>)
    44ca:	429a      	cmp	r2, r3
    44cc:	d310      	bcc.n	44f0 <Reset_Handler+0x3c>
    44ce:	e01b      	b.n	4508 <Reset_Handler+0x54>
    44d0:	4b1a      	ldr	r3, [pc, #104]	; (453c <Reset_Handler+0x88>)
    44d2:	4817      	ldr	r0, [pc, #92]	; (4530 <Reset_Handler+0x7c>)
    44d4:	3003      	adds	r0, #3
    44d6:	1ac0      	subs	r0, r0, r3
    44d8:	0880      	lsrs	r0, r0, #2
    44da:	3001      	adds	r0, #1
    44dc:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    44de:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    44e0:	4911      	ldr	r1, [pc, #68]	; (4528 <Reset_Handler+0x74>)
    44e2:	4a12      	ldr	r2, [pc, #72]	; (452c <Reset_Handler+0x78>)
    44e4:	58d4      	ldr	r4, [r2, r3]
    44e6:	50cc      	str	r4, [r1, r3]
    44e8:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    44ea:	4283      	cmp	r3, r0
    44ec:	d1fa      	bne.n	44e4 <Reset_Handler+0x30>
    44ee:	e7ea      	b.n	44c6 <Reset_Handler+0x12>
    44f0:	4b11      	ldr	r3, [pc, #68]	; (4538 <Reset_Handler+0x84>)
    44f2:	1d1a      	adds	r2, r3, #4
    44f4:	490f      	ldr	r1, [pc, #60]	; (4534 <Reset_Handler+0x80>)
    44f6:	3103      	adds	r1, #3
    44f8:	1a89      	subs	r1, r1, r2
    44fa:	0889      	lsrs	r1, r1, #2
    44fc:	0089      	lsls	r1, r1, #2
    44fe:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    4500:	2100      	movs	r1, #0
    4502:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    4504:	4293      	cmp	r3, r2
    4506:	d1fc      	bne.n	4502 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4508:	4b0d      	ldr	r3, [pc, #52]	; (4540 <Reset_Handler+0x8c>)
    450a:	217f      	movs	r1, #127	; 0x7f
    450c:	4a0d      	ldr	r2, [pc, #52]	; (4544 <Reset_Handler+0x90>)
    450e:	438a      	bics	r2, r1
    4510:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    4512:	4b0d      	ldr	r3, [pc, #52]	; (4548 <Reset_Handler+0x94>)
    4514:	6859      	ldr	r1, [r3, #4]
    4516:	2280      	movs	r2, #128	; 0x80
    4518:	430a      	orrs	r2, r1
    451a:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    451c:	4b0b      	ldr	r3, [pc, #44]	; (454c <Reset_Handler+0x98>)
    451e:	4798      	blx	r3

        /* Branch to main function */
        main();
    4520:	4b0b      	ldr	r3, [pc, #44]	; (4550 <Reset_Handler+0x9c>)
    4522:	4798      	blx	r3
    4524:	e7fe      	b.n	4524 <Reset_Handler+0x70>
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	20000000 	.word	0x20000000
    452c:	000060c0 	.word	0x000060c0
    4530:	20000088 	.word	0x20000088
    4534:	200010a4 	.word	0x200010a4
    4538:	20000088 	.word	0x20000088
    453c:	20000004 	.word	0x20000004
    4540:	e000ed00 	.word	0xe000ed00
    4544:	00000000 	.word	0x00000000
    4548:	41004000 	.word	0x41004000
    454c:	00004dd9 	.word	0x00004dd9
    4550:	00004761 	.word	0x00004761

00004554 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4554:	4b06      	ldr	r3, [pc, #24]	; (4570 <_sbrk+0x1c>)
    4556:	681b      	ldr	r3, [r3, #0]
    4558:	2b00      	cmp	r3, #0
    455a:	d102      	bne.n	4562 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    455c:	4a05      	ldr	r2, [pc, #20]	; (4574 <_sbrk+0x20>)
    455e:	4b04      	ldr	r3, [pc, #16]	; (4570 <_sbrk+0x1c>)
    4560:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4562:	4a03      	ldr	r2, [pc, #12]	; (4570 <_sbrk+0x1c>)
    4564:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    4566:	1818      	adds	r0, r3, r0
    4568:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    456a:	1c18      	adds	r0, r3, #0
    456c:	4770      	bx	lr
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	20000bf4 	.word	0x20000bf4
    4574:	200030a8 	.word	0x200030a8

00004578 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    4578:	2001      	movs	r0, #1
}
    457a:	4240      	negs	r0, r0
    457c:	4770      	bx	lr
    457e:	46c0      	nop			; (mov r8, r8)

00004580 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4580:	2380      	movs	r3, #128	; 0x80
    4582:	019b      	lsls	r3, r3, #6
    4584:	604b      	str	r3, [r1, #4]

	return 0;
}
    4586:	2000      	movs	r0, #0
    4588:	4770      	bx	lr
    458a:	46c0      	nop			; (mov r8, r8)

0000458c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    458c:	2001      	movs	r0, #1
    458e:	4770      	bx	lr

00004590 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4590:	2000      	movs	r0, #0
    4592:	4770      	bx	lr

00004594 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4594:	b570      	push	{r4, r5, r6, lr}
    4596:	b082      	sub	sp, #8
    4598:	1c05      	adds	r5, r0, #0
    459a:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    459c:	2200      	movs	r2, #0
    459e:	466b      	mov	r3, sp
    45a0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    45a2:	4c06      	ldr	r4, [pc, #24]	; (45bc <usart_serial_getchar+0x28>)
    45a4:	1c28      	adds	r0, r5, #0
    45a6:	4669      	mov	r1, sp
    45a8:	3106      	adds	r1, #6
    45aa:	47a0      	blx	r4
    45ac:	2800      	cmp	r0, #0
    45ae:	d1f9      	bne.n	45a4 <usart_serial_getchar+0x10>

	*c = temp;
    45b0:	466b      	mov	r3, sp
    45b2:	3306      	adds	r3, #6
    45b4:	881b      	ldrh	r3, [r3, #0]
    45b6:	7033      	strb	r3, [r6, #0]
}
    45b8:	b002      	add	sp, #8
    45ba:	bd70      	pop	{r4, r5, r6, pc}
    45bc:	000017ed 	.word	0x000017ed

000045c0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    45c0:	b570      	push	{r4, r5, r6, lr}
    45c2:	1c06      	adds	r6, r0, #0
    45c4:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    45c6:	4c03      	ldr	r4, [pc, #12]	; (45d4 <usart_serial_putchar+0x14>)
    45c8:	1c30      	adds	r0, r6, #0
    45ca:	1c29      	adds	r1, r5, #0
    45cc:	47a0      	blx	r4
    45ce:	2800      	cmp	r0, #0
    45d0:	d1fa      	bne.n	45c8 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    45d2:	bd70      	pop	{r4, r5, r6, pc}
    45d4:	000017c1 	.word	0x000017c1

000045d8 <extint_callback>:

/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */
static void extint_callback(void)
{
    45d8:	b508      	push	{r3, lr}
	if(targetTemp > 85){
    45da:	4b0d      	ldr	r3, [pc, #52]	; (4610 <extint_callback+0x38>)
    45dc:	681b      	ldr	r3, [r3, #0]
    45de:	2b55      	cmp	r3, #85	; 0x55
    45e0:	dd11      	ble.n	4606 <extint_callback+0x2e>
		targetTemp = 60;
    45e2:	223c      	movs	r2, #60	; 0x3c
    45e4:	4b0a      	ldr	r3, [pc, #40]	; (4610 <extint_callback+0x38>)
    45e6:	601a      	str	r2, [r3, #0]
		if(!strcmp(mode,HEAT))
    45e8:	4b0a      	ldr	r3, [pc, #40]	; (4614 <extint_callback+0x3c>)
    45ea:	6818      	ldr	r0, [r3, #0]
    45ec:	490a      	ldr	r1, [pc, #40]	; (4618 <extint_callback+0x40>)
    45ee:	4b0b      	ldr	r3, [pc, #44]	; (461c <extint_callback+0x44>)
    45f0:	4798      	blx	r3
    45f2:	2800      	cmp	r0, #0
    45f4:	d103      	bne.n	45fe <extint_callback+0x26>
			mode = COOL;
    45f6:	4a0a      	ldr	r2, [pc, #40]	; (4620 <extint_callback+0x48>)
    45f8:	4b06      	ldr	r3, [pc, #24]	; (4614 <extint_callback+0x3c>)
    45fa:	601a      	str	r2, [r3, #0]
    45fc:	e006      	b.n	460c <extint_callback+0x34>
		else
			mode = HEAT;
    45fe:	4a06      	ldr	r2, [pc, #24]	; (4618 <extint_callback+0x40>)
    4600:	4b04      	ldr	r3, [pc, #16]	; (4614 <extint_callback+0x3c>)
    4602:	601a      	str	r2, [r3, #0]
    4604:	e002      	b.n	460c <extint_callback+0x34>
	}
	else{
		targetTemp++;
    4606:	3301      	adds	r3, #1
    4608:	4a01      	ldr	r2, [pc, #4]	; (4610 <extint_callback+0x38>)
    460a:	6013      	str	r3, [r2, #0]
	}
}
    460c:	bd08      	pop	{r3, pc}
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	2000000c 	.word	0x2000000c
    4614:	20000014 	.word	0x20000014
    4618:	00005fb8 	.word	0x00005fb8
    461c:	00005019 	.word	0x00005019
    4620:	00005fc0 	.word	0x00005fc0

00004624 <open_register>:
		}
	}
}

void open_register(void)
{
    4624:	b570      	push	{r4, r5, r6, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4626:	4c07      	ldr	r4, [pc, #28]	; (4644 <open_register+0x20>)
    4628:	2680      	movs	r6, #128	; 0x80
    462a:	02f6      	lsls	r6, r6, #11
    462c:	6166      	str	r6, [r4, #20]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    462e:	2580      	movs	r5, #128	; 0x80
    4630:	032d      	lsls	r5, r5, #12
    4632:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(GPIO_1, false);
	port_pin_set_output_level(GPIO_2, true);
	delay_ms(300);
    4634:	2096      	movs	r0, #150	; 0x96
    4636:	0040      	lsls	r0, r0, #1
    4638:	4b03      	ldr	r3, [pc, #12]	; (4648 <open_register+0x24>)
    463a:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    463c:	6166      	str	r6, [r4, #20]
    463e:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(GPIO_1, false);
	port_pin_set_output_level(GPIO_2, false);
}
    4640:	bd70      	pop	{r4, r5, r6, pc}
    4642:	46c0      	nop			; (mov r8, r8)
    4644:	41004400 	.word	0x41004400
    4648:	00001bf1 	.word	0x00001bf1

0000464c <close_register>:

void close_register(void)
{
    464c:	b570      	push	{r4, r5, r6, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    464e:	4c07      	ldr	r4, [pc, #28]	; (466c <close_register+0x20>)
    4650:	2680      	movs	r6, #128	; 0x80
    4652:	02f6      	lsls	r6, r6, #11
    4654:	61a6      	str	r6, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4656:	2580      	movs	r5, #128	; 0x80
    4658:	032d      	lsls	r5, r5, #12
    465a:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(GPIO_1, true);
	port_pin_set_output_level(GPIO_2, false);
	delay_ms(300);
    465c:	2096      	movs	r0, #150	; 0x96
    465e:	0040      	lsls	r0, r0, #1
    4660:	4b03      	ldr	r3, [pc, #12]	; (4670 <close_register+0x24>)
    4662:	4798      	blx	r3
    4664:	6166      	str	r6, [r4, #20]
    4666:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(GPIO_1, false);
	port_pin_set_output_level(GPIO_2, false);
}
    4668:	bd70      	pop	{r4, r5, r6, pc}
    466a:	46c0      	nop			; (mov r8, r8)
    466c:	41004400 	.word	0x41004400
    4670:	00001bf1 	.word	0x00001bf1

00004674 <configure_adc>:
		}
}


void configure_adc(void)
{
    4674:	b510      	push	{r4, lr}
    4676:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	//! [setup_config]


	//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
    4678:	4668      	mov	r0, sp
    467a:	4b13      	ldr	r3, [pc, #76]	; (46c8 <configure_adc+0x54>)
    467c:	4798      	blx	r3
	//! [setup_config_defaults]

	config_adc.reference =  ADC_REFERENCE_INT1V;	//ADC_REFERENCE_INTVCC0;		//reference voltage on pin 9: PA04
    467e:	2300      	movs	r3, #0
    4680:	466a      	mov	r2, sp
    4682:	7053      	strb	r3, [r2, #1]
	config_adc.resolution = ADC_RESOLUTION_12BIT;			//12 bit resolution
    4684:	7113      	strb	r3, [r2, #4]
	config_adc.divide_result = ADC_DIVIDE_RESULT_DISABLE;	//Don't divide result register after accumulation
    4686:	7453      	strb	r3, [r2, #17]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN10;	//voltage positive input on pin 10: PA05
    4688:	230a      	movs	r3, #10
    468a:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_PIN7;	//voltage negative input as internal ground : PA06
    468c:	23e0      	movs	r3, #224	; 0xe0
    468e:	00db      	lsls	r3, r3, #3
    4690:	81d3      	strh	r3, [r2, #14]

	//! [setup_set_config]
	adc_init(&adc_instance, ADC, &config_adc);
    4692:	4c0e      	ldr	r4, [pc, #56]	; (46cc <configure_adc+0x58>)
    4694:	1c20      	adds	r0, r4, #0
    4696:	490e      	ldr	r1, [pc, #56]	; (46d0 <configure_adc+0x5c>)
    4698:	4b0e      	ldr	r3, [pc, #56]	; (46d4 <configure_adc+0x60>)
    469a:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    469c:	6823      	ldr	r3, [r4, #0]
    469e:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    46a0:	b252      	sxtb	r2, r2
    46a2:	2a00      	cmp	r2, #0
    46a4:	dbfb      	blt.n	469e <configure_adc+0x2a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    46a6:	2180      	movs	r1, #128	; 0x80
    46a8:	0409      	lsls	r1, r1, #16
    46aa:	4a0b      	ldr	r2, [pc, #44]	; (46d8 <configure_adc+0x64>)
    46ac:	6011      	str	r1, [r2, #0]

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    46ae:	7819      	ldrb	r1, [r3, #0]
    46b0:	2202      	movs	r2, #2
    46b2:	430a      	orrs	r2, r1
    46b4:	701a      	strb	r2, [r3, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    46b6:	4b05      	ldr	r3, [pc, #20]	; (46cc <configure_adc+0x58>)
    46b8:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    46ba:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    46bc:	b25b      	sxtb	r3, r3
    46be:	2b00      	cmp	r3, #0
    46c0:	dbfb      	blt.n	46ba <configure_adc+0x46>


	//! [setup_enable]
	adc_enable(&adc_instance);
	//! [setup_enable]
}
    46c2:	b00c      	add	sp, #48	; 0x30
    46c4:	bd10      	pop	{r4, pc}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	00000115 	.word	0x00000115
    46cc:	2000107c 	.word	0x2000107c
    46d0:	42004000 	.word	0x42004000
    46d4:	0000015d 	.word	0x0000015d
    46d8:	e000e100 	.word	0xe000e100

000046dc <pin_init>:


void pin_init(void)
{
    46dc:	b530      	push	{r4, r5, lr}
    46de:	b083      	sub	sp, #12
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    46e0:	ac01      	add	r4, sp, #4
    46e2:	2300      	movs	r3, #0
    46e4:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;

	port_get_config_defaults(&config_port_pin);

	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    46e6:	2301      	movs	r3, #1
    46e8:	7023      	strb	r3, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    46ea:	2302      	movs	r3, #2
    46ec:	7063      	strb	r3, [r4, #1]

	port_pin_set_config(GPIO_1, &config_port_pin);
    46ee:	2012      	movs	r0, #18
    46f0:	1c21      	adds	r1, r4, #0
    46f2:	4d07      	ldr	r5, [pc, #28]	; (4710 <pin_init+0x34>)
    46f4:	47a8      	blx	r5

	port_pin_set_config(GPIO_2, &config_port_pin);
    46f6:	2013      	movs	r0, #19
    46f8:	1c21      	adds	r1, r4, #0
    46fa:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    46fc:	4b05      	ldr	r3, [pc, #20]	; (4714 <pin_init+0x38>)
    46fe:	2280      	movs	r2, #128	; 0x80
    4700:	02d2      	lsls	r2, r2, #11
    4702:	615a      	str	r2, [r3, #20]
    4704:	2280      	movs	r2, #128	; 0x80
    4706:	0312      	lsls	r2, r2, #12
    4708:	615a      	str	r2, [r3, #20]
		
	port_pin_set_output_level(GPIO_1, false);
	port_pin_set_output_level(GPIO_2, false);
}
    470a:	b003      	add	sp, #12
    470c:	bd30      	pop	{r4, r5, pc}
    470e:	46c0      	nop			; (mov r8, r8)
    4710:	00003f29 	.word	0x00003f29
    4714:	41004400 	.word	0x41004400

00004718 <wireless_init>:
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
}

void wireless_init(void)
{
    4718:	b508      	push	{r3, lr}
	NWK_SetAddr(APP_ADDR);
    471a:	2000      	movs	r0, #0
    471c:	4b08      	ldr	r3, [pc, #32]	; (4740 <wireless_init+0x28>)
    471e:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    4720:	4808      	ldr	r0, [pc, #32]	; (4744 <wireless_init+0x2c>)
    4722:	4b09      	ldr	r3, [pc, #36]	; (4748 <wireless_init+0x30>)
    4724:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    4726:	200f      	movs	r0, #15
    4728:	4b08      	ldr	r3, [pc, #32]	; (474c <wireless_init+0x34>)
    472a:	4798      	blx	r3
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    472c:	2001      	movs	r0, #1
    472e:	4b08      	ldr	r3, [pc, #32]	; (4750 <wireless_init+0x38>)
    4730:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    4732:	2023      	movs	r0, #35	; 0x23
    4734:	4b07      	ldr	r3, [pc, #28]	; (4754 <wireless_init+0x3c>)
    4736:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    4738:	4807      	ldr	r0, [pc, #28]	; (4758 <wireless_init+0x40>)
    473a:	4b08      	ldr	r3, [pc, #32]	; (475c <wireless_init+0x44>)
    473c:	4798      	blx	r3
	//NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
}
    473e:	bd08      	pop	{r3, pc}
    4740:	00001c79 	.word	0x00001c79
    4744:	00001239 	.word	0x00001239
    4748:	00001c8d 	.word	0x00001c8d
    474c:	0000334d 	.word	0x0000334d
    4750:	00003339 	.word	0x00003339
    4754:	000033bd 	.word	0x000033bd
    4758:	00005fc8 	.word	0x00005fc8
    475c:	00002c3d 	.word	0x00002c3d

00004760 <main>:
void send_packet(struct wireless_packet packet);	//Sends data based on the struct passed in with packet
static bool appDataInd(NWK_DataInd_t *ind);			//Callback function when a packet is received
void send_packet_conf(NWK_DataReq_t *req);			//Callback function for a confirmed sent packet

int main (void)
{
    4760:	b5f0      	push	{r4, r5, r6, r7, lr}
    4762:	465f      	mov	r7, fp
    4764:	4656      	mov	r6, sl
    4766:	464d      	mov	r5, r9
    4768:	4644      	mov	r4, r8
    476a:	b4f0      	push	{r4, r5, r6, r7}
    476c:	b095      	sub	sp, #84	; 0x54
	system_init();
    476e:	4bc3      	ldr	r3, [pc, #780]	; (4a7c <main+0x31c>)
    4770:	4798      	blx	r3
	delay_init();
    4772:	4bc3      	ldr	r3, [pc, #780]	; (4a80 <main+0x320>)
    4774:	4798      	blx	r3
	board_init();
    4776:	4bc3      	ldr	r3, [pc, #780]	; (4a84 <main+0x324>)
    4778:	4798      	blx	r3
	SYS_Init();
    477a:	4bc3      	ldr	r3, [pc, #780]	; (4a88 <main+0x328>)
    477c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    477e:	aa04      	add	r2, sp, #16
    4780:	2380      	movs	r3, #128	; 0x80
    4782:	05db      	lsls	r3, r3, #23
    4784:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4786:	2300      	movs	r3, #0
    4788:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    478a:	21ff      	movs	r1, #255	; 0xff
    478c:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    478e:	2100      	movs	r1, #0
    4790:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4792:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    4794:	2096      	movs	r0, #150	; 0x96
    4796:	0180      	lsls	r0, r0, #6
    4798:	6210      	str	r0, [r2, #32]
	config->receiver_enable  = true;
    479a:	2501      	movs	r5, #1
    479c:	2024      	movs	r0, #36	; 0x24
    479e:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    47a0:	2025      	movs	r0, #37	; 0x25
    47a2:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    47a4:	2026      	movs	r0, #38	; 0x26
    47a6:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    47a8:	2027      	movs	r0, #39	; 0x27
    47aa:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    47ac:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    47ae:	202c      	movs	r0, #44	; 0x2c
    47b0:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    47b2:	202d      	movs	r0, #45	; 0x2d
    47b4:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    47b6:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    47b8:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    47ba:	76d3      	strb	r3, [r2, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    47bc:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    47be:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    47c0:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                        = 19;
    47c2:	2313      	movs	r3, #19
    47c4:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    47c6:	7751      	strb	r1, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    47c8:	2380      	movs	r3, #128	; 0x80
    47ca:	035b      	lsls	r3, r3, #13
    47cc:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    47ce:	4baf      	ldr	r3, [pc, #700]	; (4a8c <main+0x32c>)
    47d0:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    47d2:	4baf      	ldr	r3, [pc, #700]	; (4a90 <main+0x330>)
    47d4:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    47d6:	2301      	movs	r3, #1
    47d8:	425b      	negs	r3, r3
    47da:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    47dc:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    47de:	4cad      	ldr	r4, [pc, #692]	; (4a94 <main+0x334>)
    47e0:	4bad      	ldr	r3, [pc, #692]	; (4a98 <main+0x338>)
    47e2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    47e4:	49ad      	ldr	r1, [pc, #692]	; (4a9c <main+0x33c>)
    47e6:	4bae      	ldr	r3, [pc, #696]	; (4aa0 <main+0x340>)
    47e8:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    47ea:	49ae      	ldr	r1, [pc, #696]	; (4aa4 <main+0x344>)
    47ec:	4bae      	ldr	r3, [pc, #696]	; (4aa8 <main+0x348>)
    47ee:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    47f0:	1c20      	adds	r0, r4, #0
    47f2:	49ae      	ldr	r1, [pc, #696]	; (4aac <main+0x34c>)
    47f4:	4bae      	ldr	r3, [pc, #696]	; (4ab0 <main+0x350>)
    47f6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    47f8:	4fae      	ldr	r7, [pc, #696]	; (4ab4 <main+0x354>)
    47fa:	683b      	ldr	r3, [r7, #0]
    47fc:	6898      	ldr	r0, [r3, #8]
    47fe:	2100      	movs	r1, #0
    4800:	4ead      	ldr	r6, [pc, #692]	; (4ab8 <main+0x358>)
    4802:	47b0      	blx	r6
	setbuf(stdin, NULL);
    4804:	683b      	ldr	r3, [r7, #0]
    4806:	6858      	ldr	r0, [r3, #4]
    4808:	2100      	movs	r1, #0
    480a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    480c:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    480e:	1c30      	adds	r0, r6, #0
    4810:	4baa      	ldr	r3, [pc, #680]	; (4abc <main+0x35c>)
    4812:	4798      	blx	r3
    4814:	231f      	movs	r3, #31
    4816:	4018      	ands	r0, r3
    4818:	4085      	lsls	r5, r0
    481a:	4ba9      	ldr	r3, [pc, #676]	; (4ac0 <main+0x360>)
    481c:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    481e:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4820:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4822:	2a00      	cmp	r2, #0
    4824:	d1fc      	bne.n	4820 <main+0xc0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4826:	6833      	ldr	r3, [r6, #0]
    4828:	2502      	movs	r5, #2
    482a:	432b      	orrs	r3, r5
    482c:	6033      	str	r3, [r6, #0]
	system_init();
	delay_init();
	board_init();
	SYS_Init();
	configure_console();
	wireless_init();
    482e:	4ba5      	ldr	r3, [pc, #660]	; (4ac4 <main+0x364>)
    4830:	4798      	blx	r3
 *  button state.
 */
static void configure_extint(void)
{
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    4832:	ac04      	add	r4, sp, #16
    4834:	1c20      	adds	r0, r4, #0
    4836:	4ba4      	ldr	r3, [pc, #656]	; (4ac8 <main+0x368>)
    4838:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    483a:	231c      	movs	r3, #28
    483c:	9304      	str	r3, [sp, #16]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    483e:	2300      	movs	r3, #0
    4840:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    4842:	2703      	movs	r7, #3
    4844:	72e7      	strb	r7, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    4846:	2601      	movs	r6, #1
    4848:	72a6      	strb	r6, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    484a:	2008      	movs	r0, #8
    484c:	1c21      	adds	r1, r4, #0
    484e:	4b9f      	ldr	r3, [pc, #636]	; (4acc <main+0x36c>)
    4850:	4798      	blx	r3
/** Configures and registers the External Interrupt callback function with the
 *  driver.
 */
static void configure_eic_callback(void)
{
	extint_register_callback(extint_callback,
    4852:	489f      	ldr	r0, [pc, #636]	; (4ad0 <main+0x370>)
    4854:	2108      	movs	r1, #8
    4856:	2200      	movs	r2, #0
    4858:	4b9e      	ldr	r3, [pc, #632]	; (4ad4 <main+0x374>)
    485a:	4798      	blx	r3
			BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    485c:	2008      	movs	r0, #8
    485e:	2100      	movs	r1, #0
    4860:	4b9d      	ldr	r3, [pc, #628]	; (4ad8 <main+0x378>)
    4862:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    4864:	4b9d      	ldr	r3, [pc, #628]	; (4adc <main+0x37c>)
    4866:	701e      	strb	r6, [r3, #0]
    4868:	f3bf 8f5f 	dmb	sy
    486c:	b662      	cpsie	i
	irq_initialize_vectors();
	configure_extint();
	configure_eic_callback();
	system_interrupt_enable_global();
	
	cpu_irq_enable();
    486e:	701e      	strb	r6, [r3, #0]
    4870:	f3bf 8f5f 	dmb	sy
    4874:	b662      	cpsie	i
	port_pin_set_output_level(GPIO_2, false);
}

static void rooms_init(void)
{
	numberOfRooms = 2;
    4876:	4b9a      	ldr	r3, [pc, #616]	; (4ae0 <main+0x380>)
    4878:	601d      	str	r5, [r3, #0]
	rooms[0].registerAddress = 3;
    487a:	4b9a      	ldr	r3, [pc, #616]	; (4ae4 <main+0x384>)
    487c:	705f      	strb	r7, [r3, #1]
	rooms[0].registerStatus = 'X';
    487e:	2258      	movs	r2, #88	; 0x58
    4880:	721a      	strb	r2, [r3, #8]
	rooms[0].roomNumber = 1;
    4882:	605e      	str	r6, [r3, #4]
	rooms[0].temp = 70;
    4884:	2146      	movs	r1, #70	; 0x46
    4886:	60d9      	str	r1, [r3, #12]
	rooms[0].tempSensorAddress = 2;
    4888:	701d      	strb	r5, [r3, #0]
	rooms[1].registerAddress = 5;
    488a:	2105      	movs	r1, #5
    488c:	7459      	strb	r1, [r3, #17]
	rooms[1].registerStatus = 'X';
    488e:	761a      	strb	r2, [r3, #24]
	rooms[1].roomNumber = 2;
    4890:	615d      	str	r5, [r3, #20]
	rooms[1].temp = 68;
    4892:	2244      	movs	r2, #68	; 0x44
    4894:	61da      	str	r2, [r3, #28]
	rooms[1].tempSensorAddress = 4;
    4896:	2204      	movs	r2, #4
    4898:	741a      	strb	r2, [r3, #16]
	configure_eic_callback();
	system_interrupt_enable_global();
	
	cpu_irq_enable();
	rooms_init();
	pin_init();
    489a:	4b93      	ldr	r3, [pc, #588]	; (4ae8 <main+0x388>)
    489c:	4798      	blx	r3
	configure_adc();
    489e:	4b93      	ldr	r3, [pc, #588]	; (4aec <main+0x38c>)
    48a0:	4798      	blx	r3
	
	while(1)
	{
		SYS_TaskHandler();
    48a2:	4993      	ldr	r1, [pc, #588]	; (4af0 <main+0x390>)
    48a4:	468b      	mov	fp, r1
	avg_temp = 0;
}

static void update_register_task(void)
{	
	for(int i = 0; i < numberOfRooms-1; i++)
    48a6:	4a8e      	ldr	r2, [pc, #568]	; (4ae0 <main+0x380>)
    48a8:	4692      	mov	sl, r2
	pin_init();
	configure_adc();
	
	while(1)
	{
		SYS_TaskHandler();
    48aa:	47d8      	blx	fp
	avg_temp = 0;
}

static void update_register_task(void)
{	
	for(int i = 0; i < numberOfRooms-1; i++)
    48ac:	4653      	mov	r3, sl
    48ae:	681e      	ldr	r6, [r3, #0]
    48b0:	1e73      	subs	r3, r6, #1
    48b2:	2b00      	cmp	r3, #0
    48b4:	dd49      	ble.n	494a <main+0x1ea>
    48b6:	4c8f      	ldr	r4, [pc, #572]	; (4af4 <main+0x394>)
    48b8:	2500      	movs	r5, #0
	{
		if(!strcmp(mode,COOL)){
    48ba:	498f      	ldr	r1, [pc, #572]	; (4af8 <main+0x398>)
    48bc:	4689      	mov	r9, r1
    48be:	4a8f      	ldr	r2, [pc, #572]	; (4afc <main+0x39c>)
    48c0:	4690      	mov	r8, r2
    48c2:	4f8f      	ldr	r7, [pc, #572]	; (4b00 <main+0x3a0>)
    48c4:	464b      	mov	r3, r9
    48c6:	681e      	ldr	r6, [r3, #0]
    48c8:	1c30      	adds	r0, r6, #0
    48ca:	4641      	mov	r1, r8
    48cc:	47b8      	blx	r7
    48ce:	2800      	cmp	r0, #0
    48d0:	d117      	bne.n	4902 <main+0x1a2>
    48d2:	1c21      	adds	r1, r4, #0
			if(rooms[i].temp > targetTemp && rooms[i].registerStatus == 'X'){
    48d4:	6862      	ldr	r2, [r4, #4]
    48d6:	4b8b      	ldr	r3, [pc, #556]	; (4b04 <main+0x3a4>)
    48d8:	681b      	ldr	r3, [r3, #0]
    48da:	429a      	cmp	r2, r3
    48dc:	dd07      	ble.n	48ee <main+0x18e>
    48de:	7820      	ldrb	r0, [r4, #0]
    48e0:	2858      	cmp	r0, #88	; 0x58
    48e2:	d104      	bne.n	48ee <main+0x18e>
				rooms[i].registerStatus = 'O';
    48e4:	234f      	movs	r3, #79	; 0x4f
    48e6:	7023      	strb	r3, [r4, #0]
				open_register();
    48e8:	4b87      	ldr	r3, [pc, #540]	; (4b08 <main+0x3a8>)
    48ea:	4798      	blx	r3
    48ec:	e026      	b.n	493c <main+0x1dc>
			}else if(rooms[i].temp < targetTemp && rooms[i].registerStatus == 'O'){
    48ee:	429a      	cmp	r2, r3
    48f0:	da24      	bge.n	493c <main+0x1dc>
    48f2:	780b      	ldrb	r3, [r1, #0]
    48f4:	2b4f      	cmp	r3, #79	; 0x4f
    48f6:	d121      	bne.n	493c <main+0x1dc>
				rooms[i].registerStatus = 'X';
    48f8:	2358      	movs	r3, #88	; 0x58
    48fa:	700b      	strb	r3, [r1, #0]
				close_register();
    48fc:	4b83      	ldr	r3, [pc, #524]	; (4b0c <main+0x3ac>)
    48fe:	4798      	blx	r3
    4900:	e01c      	b.n	493c <main+0x1dc>
			}
		}
		else if(!strcmp(mode,HEAT)){
    4902:	1c30      	adds	r0, r6, #0
    4904:	4982      	ldr	r1, [pc, #520]	; (4b10 <main+0x3b0>)
    4906:	4b7e      	ldr	r3, [pc, #504]	; (4b00 <main+0x3a0>)
    4908:	4798      	blx	r3
    490a:	2800      	cmp	r0, #0
    490c:	d116      	bne.n	493c <main+0x1dc>
    490e:	1c21      	adds	r1, r4, #0
			if(rooms[i].temp < targetTemp && rooms[i].registerStatus == 'X'){
    4910:	6862      	ldr	r2, [r4, #4]
    4912:	4b7c      	ldr	r3, [pc, #496]	; (4b04 <main+0x3a4>)
    4914:	681b      	ldr	r3, [r3, #0]
    4916:	429a      	cmp	r2, r3
    4918:	da07      	bge.n	492a <main+0x1ca>
    491a:	7820      	ldrb	r0, [r4, #0]
    491c:	2858      	cmp	r0, #88	; 0x58
    491e:	d104      	bne.n	492a <main+0x1ca>
				rooms[i].registerStatus = 'O';
    4920:	234f      	movs	r3, #79	; 0x4f
    4922:	7023      	strb	r3, [r4, #0]
				open_register();
    4924:	4b78      	ldr	r3, [pc, #480]	; (4b08 <main+0x3a8>)
    4926:	4798      	blx	r3
    4928:	e008      	b.n	493c <main+0x1dc>
			}else if(rooms[i].temp > targetTemp && rooms[i].registerStatus == 'O'){
    492a:	429a      	cmp	r2, r3
    492c:	dd06      	ble.n	493c <main+0x1dc>
    492e:	780b      	ldrb	r3, [r1, #0]
    4930:	2b4f      	cmp	r3, #79	; 0x4f
    4932:	d103      	bne.n	493c <main+0x1dc>
				rooms[i].registerStatus = 'X';
    4934:	2358      	movs	r3, #88	; 0x58
    4936:	700b      	strb	r3, [r1, #0]
				close_register();
    4938:	4b74      	ldr	r3, [pc, #464]	; (4b0c <main+0x3ac>)
    493a:	4798      	blx	r3
	avg_temp = 0;
}

static void update_register_task(void)
{	
	for(int i = 0; i < numberOfRooms-1; i++)
    493c:	3501      	adds	r5, #1
    493e:	4b68      	ldr	r3, [pc, #416]	; (4ae0 <main+0x380>)
    4940:	681e      	ldr	r6, [r3, #0]
    4942:	3410      	adds	r4, #16
    4944:	1e73      	subs	r3, r6, #1
    4946:	429d      	cmp	r5, r3
    4948:	dbbc      	blt.n	48c4 <main+0x164>

		adc_clear_status(&adc_instance,adc_get_status(&adc_instance));
		adc_start_conversion(&adc_instance);
		avg_temp += far;
	}
	rooms[0].temp = avg_temp/5;
    494a:	2200      	movs	r2, #0
    494c:	4b65      	ldr	r3, [pc, #404]	; (4ae4 <main+0x384>)
    494e:	60da      	str	r2, [r3, #12]

//Functions

static void cycle_room_task(void)
{	
	if( tick % 100 == 0 )
    4950:	4b70      	ldr	r3, [pc, #448]	; (4b14 <main+0x3b4>)
    4952:	681c      	ldr	r4, [r3, #0]
    4954:	1c20      	adds	r0, r4, #0
    4956:	2164      	movs	r1, #100	; 0x64
    4958:	4b6f      	ldr	r3, [pc, #444]	; (4b18 <main+0x3b8>)
    495a:	4798      	blx	r3
    495c:	2900      	cmp	r1, #0
    495e:	d116      	bne.n	498e <main+0x22e>
	{		
		roomTemp=rooms[roomSelection-1].temp;
    4960:	4b6e      	ldr	r3, [pc, #440]	; (4b1c <main+0x3bc>)
    4962:	681b      	ldr	r3, [r3, #0]
    4964:	3b01      	subs	r3, #1
    4966:	011b      	lsls	r3, r3, #4
    4968:	4a5e      	ldr	r2, [pc, #376]	; (4ae4 <main+0x384>)
    496a:	18d3      	adds	r3, r2, r3
    496c:	4a6c      	ldr	r2, [pc, #432]	; (4b20 <main+0x3c0>)
    496e:	68d9      	ldr	r1, [r3, #12]
    4970:	6011      	str	r1, [r2, #0]
		ventStatus=rooms[roomSelection-1].registerStatus;
    4972:	7a19      	ldrb	r1, [r3, #8]
    4974:	4a6b      	ldr	r2, [pc, #428]	; (4b24 <main+0x3c4>)
    4976:	7011      	strb	r1, [r2, #0]
		roomSelection=rooms[roomSelection-1].roomNumber;
    4978:	685b      	ldr	r3, [r3, #4]

		if( roomSelection-1 < numberOfRooms)
    497a:	1e5a      	subs	r2, r3, #1
    497c:	42b2      	cmp	r2, r6
    497e:	da03      	bge.n	4988 <main+0x228>
			roomSelection++;
    4980:	3301      	adds	r3, #1
    4982:	4a66      	ldr	r2, [pc, #408]	; (4b1c <main+0x3bc>)
    4984:	6013      	str	r3, [r2, #0]
    4986:	e002      	b.n	498e <main+0x22e>
		else
			roomSelection = 0;
    4988:	2200      	movs	r2, #0
    498a:	4b64      	ldr	r3, [pc, #400]	; (4b1c <main+0x3bc>)
    498c:	601a      	str	r2, [r3, #0]
	}
}

void updateDisplay(void)
{
	if( tick % 10 == 0 )
    498e:	1c20      	adds	r0, r4, #0
    4990:	210a      	movs	r1, #10
    4992:	4b61      	ldr	r3, [pc, #388]	; (4b18 <main+0x3b8>)
    4994:	4798      	blx	r3
    4996:	2900      	cmp	r1, #0
    4998:	d16a      	bne.n	4a70 <main+0x310>
	{
		//clear the display
		//set cursor to beginning
		putchar(254);
    499a:	4b46      	ldr	r3, [pc, #280]	; (4ab4 <main+0x354>)
    499c:	6818      	ldr	r0, [r3, #0]
    499e:	6882      	ldr	r2, [r0, #8]
    49a0:	6893      	ldr	r3, [r2, #8]
    49a2:	3b01      	subs	r3, #1
    49a4:	6093      	str	r3, [r2, #8]
    49a6:	2b00      	cmp	r3, #0
    49a8:	da19      	bge.n	49de <main+0x27e>
    49aa:	6882      	ldr	r2, [r0, #8]
    49ac:	6893      	ldr	r3, [r2, #8]
    49ae:	6994      	ldr	r4, [r2, #24]
    49b0:	42a3      	cmp	r3, r4
    49b2:	db10      	blt.n	49d6 <main+0x276>
    49b4:	6813      	ldr	r3, [r2, #0]
    49b6:	22fe      	movs	r2, #254	; 0xfe
    49b8:	701a      	strb	r2, [r3, #0]
    49ba:	4b3e      	ldr	r3, [pc, #248]	; (4ab4 <main+0x354>)
    49bc:	6818      	ldr	r0, [r3, #0]
    49be:	6882      	ldr	r2, [r0, #8]
    49c0:	6813      	ldr	r3, [r2, #0]
    49c2:	7819      	ldrb	r1, [r3, #0]
    49c4:	290a      	cmp	r1, #10
    49c6:	d002      	beq.n	49ce <main+0x26e>
    49c8:	3301      	adds	r3, #1
    49ca:	6013      	str	r3, [r2, #0]
    49cc:	e011      	b.n	49f2 <main+0x292>
    49ce:	210a      	movs	r1, #10
    49d0:	4b55      	ldr	r3, [pc, #340]	; (4b28 <main+0x3c8>)
    49d2:	4798      	blx	r3
    49d4:	e00d      	b.n	49f2 <main+0x292>
    49d6:	21fe      	movs	r1, #254	; 0xfe
    49d8:	4b53      	ldr	r3, [pc, #332]	; (4b28 <main+0x3c8>)
    49da:	4798      	blx	r3
    49dc:	e009      	b.n	49f2 <main+0x292>
    49de:	6883      	ldr	r3, [r0, #8]
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	22fe      	movs	r2, #254	; 0xfe
    49e4:	701a      	strb	r2, [r3, #0]
    49e6:	4b33      	ldr	r3, [pc, #204]	; (4ab4 <main+0x354>)
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	689b      	ldr	r3, [r3, #8]
    49ec:	681a      	ldr	r2, [r3, #0]
    49ee:	3201      	adds	r2, #1
    49f0:	601a      	str	r2, [r3, #0]
		putchar(128);
    49f2:	4b30      	ldr	r3, [pc, #192]	; (4ab4 <main+0x354>)
    49f4:	6818      	ldr	r0, [r3, #0]
    49f6:	6882      	ldr	r2, [r0, #8]
    49f8:	6893      	ldr	r3, [r2, #8]
    49fa:	3b01      	subs	r3, #1
    49fc:	6093      	str	r3, [r2, #8]
    49fe:	2b00      	cmp	r3, #0
    4a00:	da19      	bge.n	4a36 <main+0x2d6>
    4a02:	6882      	ldr	r2, [r0, #8]
    4a04:	6891      	ldr	r1, [r2, #8]
    4a06:	6993      	ldr	r3, [r2, #24]
    4a08:	4299      	cmp	r1, r3
    4a0a:	db10      	blt.n	4a2e <main+0x2ce>
    4a0c:	6813      	ldr	r3, [r2, #0]
    4a0e:	2280      	movs	r2, #128	; 0x80
    4a10:	701a      	strb	r2, [r3, #0]
    4a12:	4b28      	ldr	r3, [pc, #160]	; (4ab4 <main+0x354>)
    4a14:	6818      	ldr	r0, [r3, #0]
    4a16:	6882      	ldr	r2, [r0, #8]
    4a18:	6813      	ldr	r3, [r2, #0]
    4a1a:	7819      	ldrb	r1, [r3, #0]
    4a1c:	290a      	cmp	r1, #10
    4a1e:	d002      	beq.n	4a26 <main+0x2c6>
    4a20:	3301      	adds	r3, #1
    4a22:	6013      	str	r3, [r2, #0]
    4a24:	e011      	b.n	4a4a <main+0x2ea>
    4a26:	210a      	movs	r1, #10
    4a28:	4b3f      	ldr	r3, [pc, #252]	; (4b28 <main+0x3c8>)
    4a2a:	4798      	blx	r3
    4a2c:	e00d      	b.n	4a4a <main+0x2ea>
    4a2e:	2180      	movs	r1, #128	; 0x80
    4a30:	4b3d      	ldr	r3, [pc, #244]	; (4b28 <main+0x3c8>)
    4a32:	4798      	blx	r3
    4a34:	e009      	b.n	4a4a <main+0x2ea>
    4a36:	6883      	ldr	r3, [r0, #8]
    4a38:	681b      	ldr	r3, [r3, #0]
    4a3a:	2280      	movs	r2, #128	; 0x80
    4a3c:	701a      	strb	r2, [r3, #0]
    4a3e:	4b1d      	ldr	r3, [pc, #116]	; (4ab4 <main+0x354>)
    4a40:	681b      	ldr	r3, [r3, #0]
    4a42:	689b      	ldr	r3, [r3, #8]
    4a44:	681a      	ldr	r2, [r3, #0]
    4a46:	3201      	adds	r2, #1
    4a48:	601a      	str	r2, [r3, #0]
		//update display
		printf("Mode:%s  Rm:%2dTarget:%2d%c %2d%c %c", mode, roomSelection, targetTemp, degree, roomTemp, degree, ventStatus);
    4a4a:	4b38      	ldr	r3, [pc, #224]	; (4b2c <main+0x3cc>)
    4a4c:	7818      	ldrb	r0, [r3, #0]
    4a4e:	4b2a      	ldr	r3, [pc, #168]	; (4af8 <main+0x398>)
    4a50:	6819      	ldr	r1, [r3, #0]
    4a52:	4b32      	ldr	r3, [pc, #200]	; (4b1c <main+0x3bc>)
    4a54:	681a      	ldr	r2, [r3, #0]
    4a56:	4b2b      	ldr	r3, [pc, #172]	; (4b04 <main+0x3a4>)
    4a58:	681b      	ldr	r3, [r3, #0]
    4a5a:	9000      	str	r0, [sp, #0]
    4a5c:	4c30      	ldr	r4, [pc, #192]	; (4b20 <main+0x3c0>)
    4a5e:	6824      	ldr	r4, [r4, #0]
    4a60:	9401      	str	r4, [sp, #4]
    4a62:	9002      	str	r0, [sp, #8]
    4a64:	482f      	ldr	r0, [pc, #188]	; (4b24 <main+0x3c4>)
    4a66:	7800      	ldrb	r0, [r0, #0]
    4a68:	9003      	str	r0, [sp, #12]
    4a6a:	4831      	ldr	r0, [pc, #196]	; (4b30 <main+0x3d0>)
    4a6c:	4c31      	ldr	r4, [pc, #196]	; (4b34 <main+0x3d4>)
    4a6e:	47a0      	blx	r4
		SYS_TaskHandler();
		update_register_task();
		read_temp_task();
		cycle_room_task();
		updateDisplay();
		tick++;
    4a70:	4b28      	ldr	r3, [pc, #160]	; (4b14 <main+0x3b4>)
    4a72:	681a      	ldr	r2, [r3, #0]
    4a74:	3201      	adds	r2, #1
    4a76:	601a      	str	r2, [r3, #0]
	}
    4a78:	e717      	b.n	48aa <main+0x14a>
    4a7a:	46c0      	nop			; (mov r8, r8)
    4a7c:	0000448d 	.word	0x0000448d
    4a80:	00001b89 	.word	0x00001b89
    4a84:	00003ef1 	.word	0x00003ef1
    4a88:	000034e9 	.word	0x000034e9
    4a8c:	00040003 	.word	0x00040003
    4a90:	00050003 	.word	0x00050003
    4a94:	20000c00 	.word	0x20000c00
    4a98:	20000cac 	.word	0x20000cac
    4a9c:	000045c1 	.word	0x000045c1
    4aa0:	20000ca8 	.word	0x20000ca8
    4aa4:	00004595 	.word	0x00004595
    4aa8:	20000ca4 	.word	0x20000ca4
    4aac:	42000800 	.word	0x42000800
    4ab0:	000014b9 	.word	0x000014b9
    4ab4:	20000084 	.word	0x20000084
    4ab8:	00004ef9 	.word	0x00004ef9
    4abc:	00001a41 	.word	0x00001a41
    4ac0:	e000e100 	.word	0xe000e100
    4ac4:	00004719 	.word	0x00004719
    4ac8:	000006d5 	.word	0x000006d5
    4acc:	000006e9 	.word	0x000006e9
    4ad0:	000045d9 	.word	0x000045d9
    4ad4:	00001acd 	.word	0x00001acd
    4ad8:	00001afd 	.word	0x00001afd
    4adc:	20000008 	.word	0x20000008
    4ae0:	20000bfc 	.word	0x20000bfc
    4ae4:	20000dfc 	.word	0x20000dfc
    4ae8:	000046dd 	.word	0x000046dd
    4aec:	00004675 	.word	0x00004675
    4af0:	00003505 	.word	0x00003505
    4af4:	20000e04 	.word	0x20000e04
    4af8:	20000014 	.word	0x20000014
    4afc:	00005fc0 	.word	0x00005fc0
    4b00:	00005019 	.word	0x00005019
    4b04:	2000000c 	.word	0x2000000c
    4b08:	00004625 	.word	0x00004625
    4b0c:	0000464d 	.word	0x0000464d
    4b10:	00005fb8 	.word	0x00005fb8
    4b14:	20000bf8 	.word	0x20000bf8
    4b18:	00004d7d 	.word	0x00004d7d
    4b1c:	2000001c 	.word	0x2000001c
    4b20:	20000018 	.word	0x20000018
    4b24:	20000010 	.word	0x20000010
    4b28:	000055a1 	.word	0x000055a1
    4b2c:	20000020 	.word	0x20000020
    4b30:	00005fdc 	.word	0x00005fdc
    4b34:	00004e49 	.word	0x00004e49

00004b38 <common_tc_delay>:
    4b38:	b510      	push	{r4, lr}
    4b3a:	1c04      	adds	r4, r0, #0
    4b3c:	4b13      	ldr	r3, [pc, #76]	; (4b8c <common_tc_delay+0x54>)
    4b3e:	4798      	blx	r3
    4b40:	4b13      	ldr	r3, [pc, #76]	; (4b90 <common_tc_delay+0x58>)
    4b42:	781a      	ldrb	r2, [r3, #0]
    4b44:	4362      	muls	r2, r4
    4b46:	1881      	adds	r1, r0, r2
    4b48:	4b12      	ldr	r3, [pc, #72]	; (4b94 <common_tc_delay+0x5c>)
    4b4a:	6059      	str	r1, [r3, #4]
    4b4c:	6859      	ldr	r1, [r3, #4]
    4b4e:	0c09      	lsrs	r1, r1, #16
    4b50:	6059      	str	r1, [r3, #4]
    4b52:	685b      	ldr	r3, [r3, #4]
    4b54:	2b00      	cmp	r3, #0
    4b56:	d007      	beq.n	4b68 <common_tc_delay+0x30>
    4b58:	4b0e      	ldr	r3, [pc, #56]	; (4b94 <common_tc_delay+0x5c>)
    4b5a:	6859      	ldr	r1, [r3, #4]
    4b5c:	3201      	adds	r2, #1
    4b5e:	1880      	adds	r0, r0, r2
    4b60:	8118      	strh	r0, [r3, #8]
    4b62:	4b0d      	ldr	r3, [pc, #52]	; (4b98 <common_tc_delay+0x60>)
    4b64:	4798      	blx	r3
    4b66:	e004      	b.n	4b72 <common_tc_delay+0x3a>
    4b68:	1882      	adds	r2, r0, r2
    4b6a:	4b0a      	ldr	r3, [pc, #40]	; (4b94 <common_tc_delay+0x5c>)
    4b6c:	811a      	strh	r2, [r3, #8]
    4b6e:	4b0b      	ldr	r3, [pc, #44]	; (4b9c <common_tc_delay+0x64>)
    4b70:	4798      	blx	r3
    4b72:	4b08      	ldr	r3, [pc, #32]	; (4b94 <common_tc_delay+0x5c>)
    4b74:	891b      	ldrh	r3, [r3, #8]
    4b76:	2b63      	cmp	r3, #99	; 0x63
    4b78:	d802      	bhi.n	4b80 <common_tc_delay+0x48>
    4b7a:	3364      	adds	r3, #100	; 0x64
    4b7c:	4a05      	ldr	r2, [pc, #20]	; (4b94 <common_tc_delay+0x5c>)
    4b7e:	8113      	strh	r3, [r2, #8]
    4b80:	4b04      	ldr	r3, [pc, #16]	; (4b94 <common_tc_delay+0x5c>)
    4b82:	8918      	ldrh	r0, [r3, #8]
    4b84:	4b06      	ldr	r3, [pc, #24]	; (4ba0 <common_tc_delay+0x68>)
    4b86:	4798      	blx	r3
    4b88:	bd10      	pop	{r4, pc}
    4b8a:	46c0      	nop			; (mov r8, r8)
    4b8c:	00003749 	.word	0x00003749
    4b90:	2000109c 	.word	0x2000109c
    4b94:	20000c34 	.word	0x20000c34
    4b98:	0000375d 	.word	0x0000375d
    4b9c:	00003771 	.word	0x00003771
    4ba0:	000037ad 	.word	0x000037ad

00004ba4 <common_tc_init>:
    4ba4:	b508      	push	{r3, lr}
    4ba6:	2200      	movs	r2, #0
    4ba8:	4b03      	ldr	r3, [pc, #12]	; (4bb8 <common_tc_init+0x14>)
    4baa:	701a      	strb	r2, [r3, #0]
    4bac:	4b03      	ldr	r3, [pc, #12]	; (4bbc <common_tc_init+0x18>)
    4bae:	4798      	blx	r3
    4bb0:	4b03      	ldr	r3, [pc, #12]	; (4bc0 <common_tc_init+0x1c>)
    4bb2:	7018      	strb	r0, [r3, #0]
    4bb4:	bd08      	pop	{r3, pc}
    4bb6:	46c0      	nop			; (mov r8, r8)
    4bb8:	20000c34 	.word	0x20000c34
    4bbc:	000037c5 	.word	0x000037c5
    4bc0:	2000109c 	.word	0x2000109c

00004bc4 <tmr_ovf_callback>:
    4bc4:	b508      	push	{r3, lr}
    4bc6:	4b0e      	ldr	r3, [pc, #56]	; (4c00 <tmr_ovf_callback+0x3c>)
    4bc8:	685b      	ldr	r3, [r3, #4]
    4bca:	2b00      	cmp	r3, #0
    4bcc:	d007      	beq.n	4bde <tmr_ovf_callback+0x1a>
    4bce:	4a0c      	ldr	r2, [pc, #48]	; (4c00 <tmr_ovf_callback+0x3c>)
    4bd0:	6853      	ldr	r3, [r2, #4]
    4bd2:	3b01      	subs	r3, #1
    4bd4:	6053      	str	r3, [r2, #4]
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	d101      	bne.n	4bde <tmr_ovf_callback+0x1a>
    4bda:	4b0a      	ldr	r3, [pc, #40]	; (4c04 <tmr_ovf_callback+0x40>)
    4bdc:	4798      	blx	r3
    4bde:	4a08      	ldr	r2, [pc, #32]	; (4c00 <tmr_ovf_callback+0x3c>)
    4be0:	7813      	ldrb	r3, [r2, #0]
    4be2:	3301      	adds	r3, #1
    4be4:	b2db      	uxtb	r3, r3
    4be6:	7013      	strb	r3, [r2, #0]
    4be8:	4a07      	ldr	r2, [pc, #28]	; (4c08 <tmr_ovf_callback+0x44>)
    4bea:	7812      	ldrb	r2, [r2, #0]
    4bec:	429a      	cmp	r2, r3
    4bee:	d806      	bhi.n	4bfe <tmr_ovf_callback+0x3a>
    4bf0:	4b03      	ldr	r3, [pc, #12]	; (4c00 <tmr_ovf_callback+0x3c>)
    4bf2:	2200      	movs	r2, #0
    4bf4:	701a      	strb	r2, [r3, #0]
    4bf6:	68db      	ldr	r3, [r3, #12]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d000      	beq.n	4bfe <tmr_ovf_callback+0x3a>
    4bfc:	4798      	blx	r3
    4bfe:	bd08      	pop	{r3, pc}
    4c00:	20000c34 	.word	0x20000c34
    4c04:	00003771 	.word	0x00003771
    4c08:	2000109c 	.word	0x2000109c

00004c0c <tmr_cca_callback>:
    4c0c:	b508      	push	{r3, lr}
    4c0e:	4b04      	ldr	r3, [pc, #16]	; (4c20 <tmr_cca_callback+0x14>)
    4c10:	4798      	blx	r3
    4c12:	4b04      	ldr	r3, [pc, #16]	; (4c24 <tmr_cca_callback+0x18>)
    4c14:	691b      	ldr	r3, [r3, #16]
    4c16:	2b00      	cmp	r3, #0
    4c18:	d000      	beq.n	4c1c <tmr_cca_callback+0x10>
    4c1a:	4798      	blx	r3
    4c1c:	bd08      	pop	{r3, pc}
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	0000375d 	.word	0x0000375d
    4c24:	20000c34 	.word	0x20000c34

00004c28 <set_common_tc_expiry_callback>:
    4c28:	4b01      	ldr	r3, [pc, #4]	; (4c30 <set_common_tc_expiry_callback+0x8>)
    4c2a:	6118      	str	r0, [r3, #16]
    4c2c:	4770      	bx	lr
    4c2e:	46c0      	nop			; (mov r8, r8)
    4c30:	20000c34 	.word	0x20000c34

00004c34 <__aeabi_uidiv>:
    4c34:	2900      	cmp	r1, #0
    4c36:	d034      	beq.n	4ca2 <.udivsi3_skip_div0_test+0x6a>

00004c38 <.udivsi3_skip_div0_test>:
    4c38:	2301      	movs	r3, #1
    4c3a:	2200      	movs	r2, #0
    4c3c:	b410      	push	{r4}
    4c3e:	4288      	cmp	r0, r1
    4c40:	d32c      	bcc.n	4c9c <.udivsi3_skip_div0_test+0x64>
    4c42:	2401      	movs	r4, #1
    4c44:	0724      	lsls	r4, r4, #28
    4c46:	42a1      	cmp	r1, r4
    4c48:	d204      	bcs.n	4c54 <.udivsi3_skip_div0_test+0x1c>
    4c4a:	4281      	cmp	r1, r0
    4c4c:	d202      	bcs.n	4c54 <.udivsi3_skip_div0_test+0x1c>
    4c4e:	0109      	lsls	r1, r1, #4
    4c50:	011b      	lsls	r3, r3, #4
    4c52:	e7f8      	b.n	4c46 <.udivsi3_skip_div0_test+0xe>
    4c54:	00e4      	lsls	r4, r4, #3
    4c56:	42a1      	cmp	r1, r4
    4c58:	d204      	bcs.n	4c64 <.udivsi3_skip_div0_test+0x2c>
    4c5a:	4281      	cmp	r1, r0
    4c5c:	d202      	bcs.n	4c64 <.udivsi3_skip_div0_test+0x2c>
    4c5e:	0049      	lsls	r1, r1, #1
    4c60:	005b      	lsls	r3, r3, #1
    4c62:	e7f8      	b.n	4c56 <.udivsi3_skip_div0_test+0x1e>
    4c64:	4288      	cmp	r0, r1
    4c66:	d301      	bcc.n	4c6c <.udivsi3_skip_div0_test+0x34>
    4c68:	1a40      	subs	r0, r0, r1
    4c6a:	431a      	orrs	r2, r3
    4c6c:	084c      	lsrs	r4, r1, #1
    4c6e:	42a0      	cmp	r0, r4
    4c70:	d302      	bcc.n	4c78 <.udivsi3_skip_div0_test+0x40>
    4c72:	1b00      	subs	r0, r0, r4
    4c74:	085c      	lsrs	r4, r3, #1
    4c76:	4322      	orrs	r2, r4
    4c78:	088c      	lsrs	r4, r1, #2
    4c7a:	42a0      	cmp	r0, r4
    4c7c:	d302      	bcc.n	4c84 <.udivsi3_skip_div0_test+0x4c>
    4c7e:	1b00      	subs	r0, r0, r4
    4c80:	089c      	lsrs	r4, r3, #2
    4c82:	4322      	orrs	r2, r4
    4c84:	08cc      	lsrs	r4, r1, #3
    4c86:	42a0      	cmp	r0, r4
    4c88:	d302      	bcc.n	4c90 <.udivsi3_skip_div0_test+0x58>
    4c8a:	1b00      	subs	r0, r0, r4
    4c8c:	08dc      	lsrs	r4, r3, #3
    4c8e:	4322      	orrs	r2, r4
    4c90:	2800      	cmp	r0, #0
    4c92:	d003      	beq.n	4c9c <.udivsi3_skip_div0_test+0x64>
    4c94:	091b      	lsrs	r3, r3, #4
    4c96:	d001      	beq.n	4c9c <.udivsi3_skip_div0_test+0x64>
    4c98:	0909      	lsrs	r1, r1, #4
    4c9a:	e7e3      	b.n	4c64 <.udivsi3_skip_div0_test+0x2c>
    4c9c:	1c10      	adds	r0, r2, #0
    4c9e:	bc10      	pop	{r4}
    4ca0:	4770      	bx	lr
    4ca2:	2800      	cmp	r0, #0
    4ca4:	d001      	beq.n	4caa <.udivsi3_skip_div0_test+0x72>
    4ca6:	2000      	movs	r0, #0
    4ca8:	43c0      	mvns	r0, r0
    4caa:	b407      	push	{r0, r1, r2}
    4cac:	4802      	ldr	r0, [pc, #8]	; (4cb8 <.udivsi3_skip_div0_test+0x80>)
    4cae:	a102      	add	r1, pc, #8	; (adr r1, 4cb8 <.udivsi3_skip_div0_test+0x80>)
    4cb0:	1840      	adds	r0, r0, r1
    4cb2:	9002      	str	r0, [sp, #8]
    4cb4:	bd03      	pop	{r0, r1, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	000000d9 	.word	0x000000d9

00004cbc <__aeabi_uidivmod>:
    4cbc:	2900      	cmp	r1, #0
    4cbe:	d0f0      	beq.n	4ca2 <.udivsi3_skip_div0_test+0x6a>
    4cc0:	b503      	push	{r0, r1, lr}
    4cc2:	f7ff ffb9 	bl	4c38 <.udivsi3_skip_div0_test>
    4cc6:	bc0e      	pop	{r1, r2, r3}
    4cc8:	4342      	muls	r2, r0
    4cca:	1a89      	subs	r1, r1, r2
    4ccc:	4718      	bx	r3
    4cce:	46c0      	nop			; (mov r8, r8)

00004cd0 <__aeabi_idiv>:
    4cd0:	2900      	cmp	r1, #0
    4cd2:	d041      	beq.n	4d58 <.divsi3_skip_div0_test+0x84>

00004cd4 <.divsi3_skip_div0_test>:
    4cd4:	b410      	push	{r4}
    4cd6:	1c04      	adds	r4, r0, #0
    4cd8:	404c      	eors	r4, r1
    4cda:	46a4      	mov	ip, r4
    4cdc:	2301      	movs	r3, #1
    4cde:	2200      	movs	r2, #0
    4ce0:	2900      	cmp	r1, #0
    4ce2:	d500      	bpl.n	4ce6 <.divsi3_skip_div0_test+0x12>
    4ce4:	4249      	negs	r1, r1
    4ce6:	2800      	cmp	r0, #0
    4ce8:	d500      	bpl.n	4cec <.divsi3_skip_div0_test+0x18>
    4cea:	4240      	negs	r0, r0
    4cec:	4288      	cmp	r0, r1
    4cee:	d32c      	bcc.n	4d4a <.divsi3_skip_div0_test+0x76>
    4cf0:	2401      	movs	r4, #1
    4cf2:	0724      	lsls	r4, r4, #28
    4cf4:	42a1      	cmp	r1, r4
    4cf6:	d204      	bcs.n	4d02 <.divsi3_skip_div0_test+0x2e>
    4cf8:	4281      	cmp	r1, r0
    4cfa:	d202      	bcs.n	4d02 <.divsi3_skip_div0_test+0x2e>
    4cfc:	0109      	lsls	r1, r1, #4
    4cfe:	011b      	lsls	r3, r3, #4
    4d00:	e7f8      	b.n	4cf4 <.divsi3_skip_div0_test+0x20>
    4d02:	00e4      	lsls	r4, r4, #3
    4d04:	42a1      	cmp	r1, r4
    4d06:	d204      	bcs.n	4d12 <.divsi3_skip_div0_test+0x3e>
    4d08:	4281      	cmp	r1, r0
    4d0a:	d202      	bcs.n	4d12 <.divsi3_skip_div0_test+0x3e>
    4d0c:	0049      	lsls	r1, r1, #1
    4d0e:	005b      	lsls	r3, r3, #1
    4d10:	e7f8      	b.n	4d04 <.divsi3_skip_div0_test+0x30>
    4d12:	4288      	cmp	r0, r1
    4d14:	d301      	bcc.n	4d1a <.divsi3_skip_div0_test+0x46>
    4d16:	1a40      	subs	r0, r0, r1
    4d18:	431a      	orrs	r2, r3
    4d1a:	084c      	lsrs	r4, r1, #1
    4d1c:	42a0      	cmp	r0, r4
    4d1e:	d302      	bcc.n	4d26 <.divsi3_skip_div0_test+0x52>
    4d20:	1b00      	subs	r0, r0, r4
    4d22:	085c      	lsrs	r4, r3, #1
    4d24:	4322      	orrs	r2, r4
    4d26:	088c      	lsrs	r4, r1, #2
    4d28:	42a0      	cmp	r0, r4
    4d2a:	d302      	bcc.n	4d32 <.divsi3_skip_div0_test+0x5e>
    4d2c:	1b00      	subs	r0, r0, r4
    4d2e:	089c      	lsrs	r4, r3, #2
    4d30:	4322      	orrs	r2, r4
    4d32:	08cc      	lsrs	r4, r1, #3
    4d34:	42a0      	cmp	r0, r4
    4d36:	d302      	bcc.n	4d3e <.divsi3_skip_div0_test+0x6a>
    4d38:	1b00      	subs	r0, r0, r4
    4d3a:	08dc      	lsrs	r4, r3, #3
    4d3c:	4322      	orrs	r2, r4
    4d3e:	2800      	cmp	r0, #0
    4d40:	d003      	beq.n	4d4a <.divsi3_skip_div0_test+0x76>
    4d42:	091b      	lsrs	r3, r3, #4
    4d44:	d001      	beq.n	4d4a <.divsi3_skip_div0_test+0x76>
    4d46:	0909      	lsrs	r1, r1, #4
    4d48:	e7e3      	b.n	4d12 <.divsi3_skip_div0_test+0x3e>
    4d4a:	1c10      	adds	r0, r2, #0
    4d4c:	4664      	mov	r4, ip
    4d4e:	2c00      	cmp	r4, #0
    4d50:	d500      	bpl.n	4d54 <.divsi3_skip_div0_test+0x80>
    4d52:	4240      	negs	r0, r0
    4d54:	bc10      	pop	{r4}
    4d56:	4770      	bx	lr
    4d58:	2800      	cmp	r0, #0
    4d5a:	d006      	beq.n	4d6a <.divsi3_skip_div0_test+0x96>
    4d5c:	db03      	blt.n	4d66 <.divsi3_skip_div0_test+0x92>
    4d5e:	2000      	movs	r0, #0
    4d60:	43c0      	mvns	r0, r0
    4d62:	0840      	lsrs	r0, r0, #1
    4d64:	e001      	b.n	4d6a <.divsi3_skip_div0_test+0x96>
    4d66:	2080      	movs	r0, #128	; 0x80
    4d68:	0600      	lsls	r0, r0, #24
    4d6a:	b407      	push	{r0, r1, r2}
    4d6c:	4802      	ldr	r0, [pc, #8]	; (4d78 <.divsi3_skip_div0_test+0xa4>)
    4d6e:	a102      	add	r1, pc, #8	; (adr r1, 4d78 <.divsi3_skip_div0_test+0xa4>)
    4d70:	1840      	adds	r0, r0, r1
    4d72:	9002      	str	r0, [sp, #8]
    4d74:	bd03      	pop	{r0, r1, pc}
    4d76:	46c0      	nop			; (mov r8, r8)
    4d78:	00000019 	.word	0x00000019

00004d7c <__aeabi_idivmod>:
    4d7c:	2900      	cmp	r1, #0
    4d7e:	d0eb      	beq.n	4d58 <.divsi3_skip_div0_test+0x84>
    4d80:	b503      	push	{r0, r1, lr}
    4d82:	f7ff ffa7 	bl	4cd4 <.divsi3_skip_div0_test>
    4d86:	bc0e      	pop	{r1, r2, r3}
    4d88:	4342      	muls	r2, r0
    4d8a:	1a89      	subs	r1, r1, r2
    4d8c:	4718      	bx	r3
    4d8e:	46c0      	nop			; (mov r8, r8)

00004d90 <__aeabi_idiv0>:
    4d90:	4770      	bx	lr
    4d92:	46c0      	nop			; (mov r8, r8)

00004d94 <__aeabi_lmul>:
    4d94:	469c      	mov	ip, r3
    4d96:	0403      	lsls	r3, r0, #16
    4d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d9a:	0c1b      	lsrs	r3, r3, #16
    4d9c:	0417      	lsls	r7, r2, #16
    4d9e:	0c3f      	lsrs	r7, r7, #16
    4da0:	0c15      	lsrs	r5, r2, #16
    4da2:	1c1e      	adds	r6, r3, #0
    4da4:	1c04      	adds	r4, r0, #0
    4da6:	0c00      	lsrs	r0, r0, #16
    4da8:	437e      	muls	r6, r7
    4daa:	436b      	muls	r3, r5
    4dac:	4347      	muls	r7, r0
    4dae:	4345      	muls	r5, r0
    4db0:	18fb      	adds	r3, r7, r3
    4db2:	0c30      	lsrs	r0, r6, #16
    4db4:	1818      	adds	r0, r3, r0
    4db6:	4287      	cmp	r7, r0
    4db8:	d902      	bls.n	4dc0 <__aeabi_lmul+0x2c>
    4dba:	2380      	movs	r3, #128	; 0x80
    4dbc:	025b      	lsls	r3, r3, #9
    4dbe:	18ed      	adds	r5, r5, r3
    4dc0:	0c03      	lsrs	r3, r0, #16
    4dc2:	18ed      	adds	r5, r5, r3
    4dc4:	4663      	mov	r3, ip
    4dc6:	435c      	muls	r4, r3
    4dc8:	434a      	muls	r2, r1
    4dca:	0436      	lsls	r6, r6, #16
    4dcc:	0c36      	lsrs	r6, r6, #16
    4dce:	18a1      	adds	r1, r4, r2
    4dd0:	0400      	lsls	r0, r0, #16
    4dd2:	1980      	adds	r0, r0, r6
    4dd4:	1949      	adds	r1, r1, r5
    4dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004dd8 <__libc_init_array>:
    4dd8:	b570      	push	{r4, r5, r6, lr}
    4dda:	4b0e      	ldr	r3, [pc, #56]	; (4e14 <__libc_init_array+0x3c>)
    4ddc:	4d0e      	ldr	r5, [pc, #56]	; (4e18 <__libc_init_array+0x40>)
    4dde:	2400      	movs	r4, #0
    4de0:	1aed      	subs	r5, r5, r3
    4de2:	10ad      	asrs	r5, r5, #2
    4de4:	1c1e      	adds	r6, r3, #0
    4de6:	42ac      	cmp	r4, r5
    4de8:	d004      	beq.n	4df4 <__libc_init_array+0x1c>
    4dea:	00a3      	lsls	r3, r4, #2
    4dec:	58f3      	ldr	r3, [r6, r3]
    4dee:	4798      	blx	r3
    4df0:	3401      	adds	r4, #1
    4df2:	e7f8      	b.n	4de6 <__libc_init_array+0xe>
    4df4:	f001 f954 	bl	60a0 <_init>
    4df8:	4b08      	ldr	r3, [pc, #32]	; (4e1c <__libc_init_array+0x44>)
    4dfa:	4d09      	ldr	r5, [pc, #36]	; (4e20 <__libc_init_array+0x48>)
    4dfc:	2400      	movs	r4, #0
    4dfe:	1aed      	subs	r5, r5, r3
    4e00:	10ad      	asrs	r5, r5, #2
    4e02:	1c1e      	adds	r6, r3, #0
    4e04:	42ac      	cmp	r4, r5
    4e06:	d004      	beq.n	4e12 <__libc_init_array+0x3a>
    4e08:	00a3      	lsls	r3, r4, #2
    4e0a:	58f3      	ldr	r3, [r6, r3]
    4e0c:	4798      	blx	r3
    4e0e:	3401      	adds	r4, #1
    4e10:	e7f8      	b.n	4e04 <__libc_init_array+0x2c>
    4e12:	bd70      	pop	{r4, r5, r6, pc}
    4e14:	000060ac 	.word	0x000060ac
    4e18:	000060ac 	.word	0x000060ac
    4e1c:	000060ac 	.word	0x000060ac
    4e20:	000060b0 	.word	0x000060b0

00004e24 <memcpy>:
    4e24:	b510      	push	{r4, lr}
    4e26:	2300      	movs	r3, #0
    4e28:	4293      	cmp	r3, r2
    4e2a:	d003      	beq.n	4e34 <memcpy+0x10>
    4e2c:	5ccc      	ldrb	r4, [r1, r3]
    4e2e:	54c4      	strb	r4, [r0, r3]
    4e30:	3301      	adds	r3, #1
    4e32:	e7f9      	b.n	4e28 <memcpy+0x4>
    4e34:	bd10      	pop	{r4, pc}

00004e36 <memset>:
    4e36:	1c03      	adds	r3, r0, #0
    4e38:	1882      	adds	r2, r0, r2
    4e3a:	4293      	cmp	r3, r2
    4e3c:	d002      	beq.n	4e44 <memset+0xe>
    4e3e:	7019      	strb	r1, [r3, #0]
    4e40:	3301      	adds	r3, #1
    4e42:	e7fa      	b.n	4e3a <memset+0x4>
    4e44:	4770      	bx	lr
	...

00004e48 <iprintf>:
    4e48:	b40f      	push	{r0, r1, r2, r3}
    4e4a:	4b0b      	ldr	r3, [pc, #44]	; (4e78 <iprintf+0x30>)
    4e4c:	b513      	push	{r0, r1, r4, lr}
    4e4e:	681c      	ldr	r4, [r3, #0]
    4e50:	2c00      	cmp	r4, #0
    4e52:	d005      	beq.n	4e60 <iprintf+0x18>
    4e54:	69a3      	ldr	r3, [r4, #24]
    4e56:	2b00      	cmp	r3, #0
    4e58:	d102      	bne.n	4e60 <iprintf+0x18>
    4e5a:	1c20      	adds	r0, r4, #0
    4e5c:	f000 fd74 	bl	5948 <__sinit>
    4e60:	ab05      	add	r3, sp, #20
    4e62:	68a1      	ldr	r1, [r4, #8]
    4e64:	1c20      	adds	r0, r4, #0
    4e66:	9a04      	ldr	r2, [sp, #16]
    4e68:	9301      	str	r3, [sp, #4]
    4e6a:	f000 f907 	bl	507c <_vfiprintf_r>
    4e6e:	bc16      	pop	{r1, r2, r4}
    4e70:	bc08      	pop	{r3}
    4e72:	b004      	add	sp, #16
    4e74:	4718      	bx	r3
    4e76:	46c0      	nop			; (mov r8, r8)
    4e78:	20000084 	.word	0x20000084
    4e7c:	00000000 	.word	0x00000000

00004e80 <rand>:
    4e80:	4b17      	ldr	r3, [pc, #92]	; (4ee0 <rand+0x60>)
    4e82:	b510      	push	{r4, lr}
    4e84:	681c      	ldr	r4, [r3, #0]
    4e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d115      	bne.n	4eb8 <rand+0x38>
    4e8c:	2018      	movs	r0, #24
    4e8e:	f000 fe1b 	bl	5ac8 <malloc>
    4e92:	4b14      	ldr	r3, [pc, #80]	; (4ee4 <rand+0x64>)
    4e94:	63a0      	str	r0, [r4, #56]	; 0x38
    4e96:	8003      	strh	r3, [r0, #0]
    4e98:	4b13      	ldr	r3, [pc, #76]	; (4ee8 <rand+0x68>)
    4e9a:	8043      	strh	r3, [r0, #2]
    4e9c:	4b13      	ldr	r3, [pc, #76]	; (4eec <rand+0x6c>)
    4e9e:	8083      	strh	r3, [r0, #4]
    4ea0:	4b13      	ldr	r3, [pc, #76]	; (4ef0 <rand+0x70>)
    4ea2:	80c3      	strh	r3, [r0, #6]
    4ea4:	4b13      	ldr	r3, [pc, #76]	; (4ef4 <rand+0x74>)
    4ea6:	8103      	strh	r3, [r0, #8]
    4ea8:	2305      	movs	r3, #5
    4eaa:	8143      	strh	r3, [r0, #10]
    4eac:	230b      	movs	r3, #11
    4eae:	8183      	strh	r3, [r0, #12]
    4eb0:	2201      	movs	r2, #1
    4eb2:	2300      	movs	r3, #0
    4eb4:	6102      	str	r2, [r0, #16]
    4eb6:	6143      	str	r3, [r0, #20]
    4eb8:	4b08      	ldr	r3, [pc, #32]	; (4edc <rand+0x5c>)
    4eba:	4a07      	ldr	r2, [pc, #28]	; (4ed8 <rand+0x58>)
    4ebc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4ebe:	6920      	ldr	r0, [r4, #16]
    4ec0:	6961      	ldr	r1, [r4, #20]
    4ec2:	f7ff ff67 	bl	4d94 <__aeabi_lmul>
    4ec6:	2201      	movs	r2, #1
    4ec8:	2300      	movs	r3, #0
    4eca:	1880      	adds	r0, r0, r2
    4ecc:	4159      	adcs	r1, r3
    4ece:	6120      	str	r0, [r4, #16]
    4ed0:	6161      	str	r1, [r4, #20]
    4ed2:	0048      	lsls	r0, r1, #1
    4ed4:	0840      	lsrs	r0, r0, #1
    4ed6:	bd10      	pop	{r4, pc}
    4ed8:	4c957f2d 	.word	0x4c957f2d
    4edc:	5851f42d 	.word	0x5851f42d
    4ee0:	20000084 	.word	0x20000084
    4ee4:	0000330e 	.word	0x0000330e
    4ee8:	ffffabcd 	.word	0xffffabcd
    4eec:	00001234 	.word	0x00001234
    4ef0:	ffffe66d 	.word	0xffffe66d
    4ef4:	ffffdeec 	.word	0xffffdeec

00004ef8 <setbuf>:
    4ef8:	b508      	push	{r3, lr}
    4efa:	424a      	negs	r2, r1
    4efc:	414a      	adcs	r2, r1
    4efe:	2380      	movs	r3, #128	; 0x80
    4f00:	0052      	lsls	r2, r2, #1
    4f02:	00db      	lsls	r3, r3, #3
    4f04:	f000 f802 	bl	4f0c <setvbuf>
    4f08:	bd08      	pop	{r3, pc}
	...

00004f0c <setvbuf>:
    4f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f0e:	1c1e      	adds	r6, r3, #0
    4f10:	4b3c      	ldr	r3, [pc, #240]	; (5004 <setvbuf+0xf8>)
    4f12:	1c04      	adds	r4, r0, #0
    4f14:	681d      	ldr	r5, [r3, #0]
    4f16:	1c0f      	adds	r7, r1, #0
    4f18:	9201      	str	r2, [sp, #4]
    4f1a:	2d00      	cmp	r5, #0
    4f1c:	d005      	beq.n	4f2a <setvbuf+0x1e>
    4f1e:	69aa      	ldr	r2, [r5, #24]
    4f20:	2a00      	cmp	r2, #0
    4f22:	d102      	bne.n	4f2a <setvbuf+0x1e>
    4f24:	1c28      	adds	r0, r5, #0
    4f26:	f000 fd0f 	bl	5948 <__sinit>
    4f2a:	4b37      	ldr	r3, [pc, #220]	; (5008 <setvbuf+0xfc>)
    4f2c:	429c      	cmp	r4, r3
    4f2e:	d101      	bne.n	4f34 <setvbuf+0x28>
    4f30:	686c      	ldr	r4, [r5, #4]
    4f32:	e008      	b.n	4f46 <setvbuf+0x3a>
    4f34:	4b35      	ldr	r3, [pc, #212]	; (500c <setvbuf+0x100>)
    4f36:	429c      	cmp	r4, r3
    4f38:	d101      	bne.n	4f3e <setvbuf+0x32>
    4f3a:	68ac      	ldr	r4, [r5, #8]
    4f3c:	e003      	b.n	4f46 <setvbuf+0x3a>
    4f3e:	4b34      	ldr	r3, [pc, #208]	; (5010 <setvbuf+0x104>)
    4f40:	429c      	cmp	r4, r3
    4f42:	d100      	bne.n	4f46 <setvbuf+0x3a>
    4f44:	68ec      	ldr	r4, [r5, #12]
    4f46:	9b01      	ldr	r3, [sp, #4]
    4f48:	2b02      	cmp	r3, #2
    4f4a:	d857      	bhi.n	4ffc <setvbuf+0xf0>
    4f4c:	2e00      	cmp	r6, #0
    4f4e:	db55      	blt.n	4ffc <setvbuf+0xf0>
    4f50:	1c28      	adds	r0, r5, #0
    4f52:	1c21      	adds	r1, r4, #0
    4f54:	f000 fc78 	bl	5848 <_fflush_r>
    4f58:	2300      	movs	r3, #0
    4f5a:	6063      	str	r3, [r4, #4]
    4f5c:	61a3      	str	r3, [r4, #24]
    4f5e:	89a3      	ldrh	r3, [r4, #12]
    4f60:	061a      	lsls	r2, r3, #24
    4f62:	d503      	bpl.n	4f6c <setvbuf+0x60>
    4f64:	1c28      	adds	r0, r5, #0
    4f66:	6921      	ldr	r1, [r4, #16]
    4f68:	f000 fdc4 	bl	5af4 <_free_r>
    4f6c:	89a3      	ldrh	r3, [r4, #12]
    4f6e:	2283      	movs	r2, #131	; 0x83
    4f70:	4393      	bics	r3, r2
    4f72:	81a3      	strh	r3, [r4, #12]
    4f74:	9b01      	ldr	r3, [sp, #4]
    4f76:	2b02      	cmp	r3, #2
    4f78:	d013      	beq.n	4fa2 <setvbuf+0x96>
    4f7a:	2f00      	cmp	r7, #0
    4f7c:	d125      	bne.n	4fca <setvbuf+0xbe>
    4f7e:	2e00      	cmp	r6, #0
    4f80:	d101      	bne.n	4f86 <setvbuf+0x7a>
    4f82:	2680      	movs	r6, #128	; 0x80
    4f84:	00f6      	lsls	r6, r6, #3
    4f86:	1c30      	adds	r0, r6, #0
    4f88:	f000 fd9e 	bl	5ac8 <malloc>
    4f8c:	1e07      	subs	r7, r0, #0
    4f8e:	d118      	bne.n	4fc2 <setvbuf+0xb6>
    4f90:	2080      	movs	r0, #128	; 0x80
    4f92:	00c0      	lsls	r0, r0, #3
    4f94:	f000 fd98 	bl	5ac8 <malloc>
    4f98:	1e07      	subs	r7, r0, #0
    4f9a:	d110      	bne.n	4fbe <setvbuf+0xb2>
    4f9c:	2001      	movs	r0, #1
    4f9e:	4240      	negs	r0, r0
    4fa0:	e000      	b.n	4fa4 <setvbuf+0x98>
    4fa2:	2000      	movs	r0, #0
    4fa4:	89a3      	ldrh	r3, [r4, #12]
    4fa6:	2202      	movs	r2, #2
    4fa8:	4313      	orrs	r3, r2
    4faa:	81a3      	strh	r3, [r4, #12]
    4fac:	2300      	movs	r3, #0
    4fae:	60a3      	str	r3, [r4, #8]
    4fb0:	1c23      	adds	r3, r4, #0
    4fb2:	3347      	adds	r3, #71	; 0x47
    4fb4:	6023      	str	r3, [r4, #0]
    4fb6:	6123      	str	r3, [r4, #16]
    4fb8:	2301      	movs	r3, #1
    4fba:	6163      	str	r3, [r4, #20]
    4fbc:	e020      	b.n	5000 <setvbuf+0xf4>
    4fbe:	2680      	movs	r6, #128	; 0x80
    4fc0:	00f6      	lsls	r6, r6, #3
    4fc2:	89a3      	ldrh	r3, [r4, #12]
    4fc4:	2280      	movs	r2, #128	; 0x80
    4fc6:	4313      	orrs	r3, r2
    4fc8:	81a3      	strh	r3, [r4, #12]
    4fca:	9a01      	ldr	r2, [sp, #4]
    4fcc:	2a01      	cmp	r2, #1
    4fce:	d104      	bne.n	4fda <setvbuf+0xce>
    4fd0:	89a3      	ldrh	r3, [r4, #12]
    4fd2:	4313      	orrs	r3, r2
    4fd4:	81a3      	strh	r3, [r4, #12]
    4fd6:	4273      	negs	r3, r6
    4fd8:	61a3      	str	r3, [r4, #24]
    4fda:	4b0e      	ldr	r3, [pc, #56]	; (5014 <setvbuf+0x108>)
    4fdc:	2000      	movs	r0, #0
    4fde:	62ab      	str	r3, [r5, #40]	; 0x28
    4fe0:	89a3      	ldrh	r3, [r4, #12]
    4fe2:	6027      	str	r7, [r4, #0]
    4fe4:	6127      	str	r7, [r4, #16]
    4fe6:	6166      	str	r6, [r4, #20]
    4fe8:	071a      	lsls	r2, r3, #28
    4fea:	d509      	bpl.n	5000 <setvbuf+0xf4>
    4fec:	2203      	movs	r2, #3
    4fee:	4013      	ands	r3, r2
    4ff0:	425a      	negs	r2, r3
    4ff2:	4153      	adcs	r3, r2
    4ff4:	425b      	negs	r3, r3
    4ff6:	401e      	ands	r6, r3
    4ff8:	60a6      	str	r6, [r4, #8]
    4ffa:	e001      	b.n	5000 <setvbuf+0xf4>
    4ffc:	2001      	movs	r0, #1
    4ffe:	4240      	negs	r0, r0
    5000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	20000084 	.word	0x20000084
    5008:	00006040 	.word	0x00006040
    500c:	00006060 	.word	0x00006060
    5010:	00006080 	.word	0x00006080
    5014:	000058a1 	.word	0x000058a1

00005018 <strcmp>:
    5018:	7802      	ldrb	r2, [r0, #0]
    501a:	780b      	ldrb	r3, [r1, #0]
    501c:	3001      	adds	r0, #1
    501e:	3101      	adds	r1, #1
    5020:	2a00      	cmp	r2, #0
    5022:	d001      	beq.n	5028 <strcmp+0x10>
    5024:	429a      	cmp	r2, r3
    5026:	d0f7      	beq.n	5018 <strcmp>
    5028:	1ad0      	subs	r0, r2, r3
    502a:	4770      	bx	lr

0000502c <__sfputc_r>:
    502c:	6893      	ldr	r3, [r2, #8]
    502e:	b510      	push	{r4, lr}
    5030:	3b01      	subs	r3, #1
    5032:	6093      	str	r3, [r2, #8]
    5034:	2b00      	cmp	r3, #0
    5036:	da05      	bge.n	5044 <__sfputc_r+0x18>
    5038:	6994      	ldr	r4, [r2, #24]
    503a:	42a3      	cmp	r3, r4
    503c:	db08      	blt.n	5050 <__sfputc_r+0x24>
    503e:	b2cb      	uxtb	r3, r1
    5040:	2b0a      	cmp	r3, #10
    5042:	d005      	beq.n	5050 <__sfputc_r+0x24>
    5044:	6813      	ldr	r3, [r2, #0]
    5046:	1c58      	adds	r0, r3, #1
    5048:	6010      	str	r0, [r2, #0]
    504a:	7019      	strb	r1, [r3, #0]
    504c:	b2c8      	uxtb	r0, r1
    504e:	e001      	b.n	5054 <__sfputc_r+0x28>
    5050:	f000 faa6 	bl	55a0 <__swbuf_r>
    5054:	bd10      	pop	{r4, pc}

00005056 <__sfputs_r>:
    5056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5058:	1c06      	adds	r6, r0, #0
    505a:	1c0f      	adds	r7, r1, #0
    505c:	1c14      	adds	r4, r2, #0
    505e:	18d5      	adds	r5, r2, r3
    5060:	42ac      	cmp	r4, r5
    5062:	d008      	beq.n	5076 <__sfputs_r+0x20>
    5064:	7821      	ldrb	r1, [r4, #0]
    5066:	1c30      	adds	r0, r6, #0
    5068:	1c3a      	adds	r2, r7, #0
    506a:	f7ff ffdf 	bl	502c <__sfputc_r>
    506e:	3401      	adds	r4, #1
    5070:	1c43      	adds	r3, r0, #1
    5072:	d1f5      	bne.n	5060 <__sfputs_r+0xa>
    5074:	e000      	b.n	5078 <__sfputs_r+0x22>
    5076:	2000      	movs	r0, #0
    5078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000507c <_vfiprintf_r>:
    507c:	b5f0      	push	{r4, r5, r6, r7, lr}
    507e:	b09f      	sub	sp, #124	; 0x7c
    5080:	1c06      	adds	r6, r0, #0
    5082:	1c0f      	adds	r7, r1, #0
    5084:	9203      	str	r2, [sp, #12]
    5086:	9305      	str	r3, [sp, #20]
    5088:	2800      	cmp	r0, #0
    508a:	d004      	beq.n	5096 <_vfiprintf_r+0x1a>
    508c:	6981      	ldr	r1, [r0, #24]
    508e:	2900      	cmp	r1, #0
    5090:	d101      	bne.n	5096 <_vfiprintf_r+0x1a>
    5092:	f000 fc59 	bl	5948 <__sinit>
    5096:	4b75      	ldr	r3, [pc, #468]	; (526c <_vfiprintf_r+0x1f0>)
    5098:	429f      	cmp	r7, r3
    509a:	d101      	bne.n	50a0 <_vfiprintf_r+0x24>
    509c:	6877      	ldr	r7, [r6, #4]
    509e:	e008      	b.n	50b2 <_vfiprintf_r+0x36>
    50a0:	4b73      	ldr	r3, [pc, #460]	; (5270 <_vfiprintf_r+0x1f4>)
    50a2:	429f      	cmp	r7, r3
    50a4:	d101      	bne.n	50aa <_vfiprintf_r+0x2e>
    50a6:	68b7      	ldr	r7, [r6, #8]
    50a8:	e003      	b.n	50b2 <_vfiprintf_r+0x36>
    50aa:	4b72      	ldr	r3, [pc, #456]	; (5274 <_vfiprintf_r+0x1f8>)
    50ac:	429f      	cmp	r7, r3
    50ae:	d100      	bne.n	50b2 <_vfiprintf_r+0x36>
    50b0:	68f7      	ldr	r7, [r6, #12]
    50b2:	89bb      	ldrh	r3, [r7, #12]
    50b4:	071a      	lsls	r2, r3, #28
    50b6:	d50a      	bpl.n	50ce <_vfiprintf_r+0x52>
    50b8:	693b      	ldr	r3, [r7, #16]
    50ba:	2b00      	cmp	r3, #0
    50bc:	d007      	beq.n	50ce <_vfiprintf_r+0x52>
    50be:	ad06      	add	r5, sp, #24
    50c0:	2300      	movs	r3, #0
    50c2:	616b      	str	r3, [r5, #20]
    50c4:	2320      	movs	r3, #32
    50c6:	766b      	strb	r3, [r5, #25]
    50c8:	2330      	movs	r3, #48	; 0x30
    50ca:	76ab      	strb	r3, [r5, #26]
    50cc:	e03b      	b.n	5146 <_vfiprintf_r+0xca>
    50ce:	1c30      	adds	r0, r6, #0
    50d0:	1c39      	adds	r1, r7, #0
    50d2:	f000 fabd 	bl	5650 <__swsetup_r>
    50d6:	2800      	cmp	r0, #0
    50d8:	d0f1      	beq.n	50be <_vfiprintf_r+0x42>
    50da:	2001      	movs	r0, #1
    50dc:	4240      	negs	r0, r0
    50de:	e0c2      	b.n	5266 <_vfiprintf_r+0x1ea>
    50e0:	9a05      	ldr	r2, [sp, #20]
    50e2:	1d11      	adds	r1, r2, #4
    50e4:	6812      	ldr	r2, [r2, #0]
    50e6:	9105      	str	r1, [sp, #20]
    50e8:	2a00      	cmp	r2, #0
    50ea:	db76      	blt.n	51da <_vfiprintf_r+0x15e>
    50ec:	9209      	str	r2, [sp, #36]	; 0x24
    50ee:	3401      	adds	r4, #1
    50f0:	7823      	ldrb	r3, [r4, #0]
    50f2:	2b2e      	cmp	r3, #46	; 0x2e
    50f4:	d100      	bne.n	50f8 <_vfiprintf_r+0x7c>
    50f6:	e081      	b.n	51fc <_vfiprintf_r+0x180>
    50f8:	7821      	ldrb	r1, [r4, #0]
    50fa:	485f      	ldr	r0, [pc, #380]	; (5278 <_vfiprintf_r+0x1fc>)
    50fc:	2203      	movs	r2, #3
    50fe:	f000 fced 	bl	5adc <memchr>
    5102:	2800      	cmp	r0, #0
    5104:	d007      	beq.n	5116 <_vfiprintf_r+0x9a>
    5106:	495c      	ldr	r1, [pc, #368]	; (5278 <_vfiprintf_r+0x1fc>)
    5108:	682a      	ldr	r2, [r5, #0]
    510a:	1a43      	subs	r3, r0, r1
    510c:	2040      	movs	r0, #64	; 0x40
    510e:	4098      	lsls	r0, r3
    5110:	4310      	orrs	r0, r2
    5112:	6028      	str	r0, [r5, #0]
    5114:	3401      	adds	r4, #1
    5116:	7821      	ldrb	r1, [r4, #0]
    5118:	1c63      	adds	r3, r4, #1
    511a:	4858      	ldr	r0, [pc, #352]	; (527c <_vfiprintf_r+0x200>)
    511c:	2206      	movs	r2, #6
    511e:	9303      	str	r3, [sp, #12]
    5120:	7629      	strb	r1, [r5, #24]
    5122:	f000 fcdb 	bl	5adc <memchr>
    5126:	2800      	cmp	r0, #0
    5128:	d100      	bne.n	512c <_vfiprintf_r+0xb0>
    512a:	e08a      	b.n	5242 <_vfiprintf_r+0x1c6>
    512c:	4b54      	ldr	r3, [pc, #336]	; (5280 <_vfiprintf_r+0x204>)
    512e:	2b00      	cmp	r3, #0
    5130:	d17e      	bne.n	5230 <_vfiprintf_r+0x1b4>
    5132:	9b05      	ldr	r3, [sp, #20]
    5134:	2207      	movs	r2, #7
    5136:	3307      	adds	r3, #7
    5138:	4393      	bics	r3, r2
    513a:	3308      	adds	r3, #8
    513c:	9305      	str	r3, [sp, #20]
    513e:	696a      	ldr	r2, [r5, #20]
    5140:	9904      	ldr	r1, [sp, #16]
    5142:	1853      	adds	r3, r2, r1
    5144:	616b      	str	r3, [r5, #20]
    5146:	9c03      	ldr	r4, [sp, #12]
    5148:	7823      	ldrb	r3, [r4, #0]
    514a:	2b00      	cmp	r3, #0
    514c:	d104      	bne.n	5158 <_vfiprintf_r+0xdc>
    514e:	9903      	ldr	r1, [sp, #12]
    5150:	1a61      	subs	r1, r4, r1
    5152:	9102      	str	r1, [sp, #8]
    5154:	d010      	beq.n	5178 <_vfiprintf_r+0xfc>
    5156:	e003      	b.n	5160 <_vfiprintf_r+0xe4>
    5158:	2b25      	cmp	r3, #37	; 0x25
    515a:	d0f8      	beq.n	514e <_vfiprintf_r+0xd2>
    515c:	3401      	adds	r4, #1
    515e:	e7f3      	b.n	5148 <_vfiprintf_r+0xcc>
    5160:	1c30      	adds	r0, r6, #0
    5162:	1c39      	adds	r1, r7, #0
    5164:	9a03      	ldr	r2, [sp, #12]
    5166:	9b02      	ldr	r3, [sp, #8]
    5168:	f7ff ff75 	bl	5056 <__sfputs_r>
    516c:	3001      	adds	r0, #1
    516e:	d075      	beq.n	525c <_vfiprintf_r+0x1e0>
    5170:	696a      	ldr	r2, [r5, #20]
    5172:	9902      	ldr	r1, [sp, #8]
    5174:	1853      	adds	r3, r2, r1
    5176:	616b      	str	r3, [r5, #20]
    5178:	7823      	ldrb	r3, [r4, #0]
    517a:	2b00      	cmp	r3, #0
    517c:	d06e      	beq.n	525c <_vfiprintf_r+0x1e0>
    517e:	2201      	movs	r2, #1
    5180:	4252      	negs	r2, r2
    5182:	606a      	str	r2, [r5, #4]
    5184:	466a      	mov	r2, sp
    5186:	2300      	movs	r3, #0
    5188:	325b      	adds	r2, #91	; 0x5b
    518a:	3401      	adds	r4, #1
    518c:	602b      	str	r3, [r5, #0]
    518e:	60eb      	str	r3, [r5, #12]
    5190:	60ab      	str	r3, [r5, #8]
    5192:	7013      	strb	r3, [r2, #0]
    5194:	65ab      	str	r3, [r5, #88]	; 0x58
    5196:	7821      	ldrb	r1, [r4, #0]
    5198:	483a      	ldr	r0, [pc, #232]	; (5284 <_vfiprintf_r+0x208>)
    519a:	2205      	movs	r2, #5
    519c:	f000 fc9e 	bl	5adc <memchr>
    51a0:	2800      	cmp	r0, #0
    51a2:	d008      	beq.n	51b6 <_vfiprintf_r+0x13a>
    51a4:	4a37      	ldr	r2, [pc, #220]	; (5284 <_vfiprintf_r+0x208>)
    51a6:	3401      	adds	r4, #1
    51a8:	1a83      	subs	r3, r0, r2
    51aa:	2001      	movs	r0, #1
    51ac:	4098      	lsls	r0, r3
    51ae:	682b      	ldr	r3, [r5, #0]
    51b0:	4318      	orrs	r0, r3
    51b2:	6028      	str	r0, [r5, #0]
    51b4:	e7ef      	b.n	5196 <_vfiprintf_r+0x11a>
    51b6:	682b      	ldr	r3, [r5, #0]
    51b8:	06d9      	lsls	r1, r3, #27
    51ba:	d503      	bpl.n	51c4 <_vfiprintf_r+0x148>
    51bc:	466a      	mov	r2, sp
    51be:	2120      	movs	r1, #32
    51c0:	325b      	adds	r2, #91	; 0x5b
    51c2:	7011      	strb	r1, [r2, #0]
    51c4:	071a      	lsls	r2, r3, #28
    51c6:	d503      	bpl.n	51d0 <_vfiprintf_r+0x154>
    51c8:	466a      	mov	r2, sp
    51ca:	212b      	movs	r1, #43	; 0x2b
    51cc:	325b      	adds	r2, #91	; 0x5b
    51ce:	7011      	strb	r1, [r2, #0]
    51d0:	7822      	ldrb	r2, [r4, #0]
    51d2:	2a2a      	cmp	r2, #42	; 0x2a
    51d4:	d084      	beq.n	50e0 <_vfiprintf_r+0x64>
    51d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    51d8:	e005      	b.n	51e6 <_vfiprintf_r+0x16a>
    51da:	4252      	negs	r2, r2
    51dc:	60ea      	str	r2, [r5, #12]
    51de:	2202      	movs	r2, #2
    51e0:	4313      	orrs	r3, r2
    51e2:	602b      	str	r3, [r5, #0]
    51e4:	e783      	b.n	50ee <_vfiprintf_r+0x72>
    51e6:	7822      	ldrb	r2, [r4, #0]
    51e8:	3a30      	subs	r2, #48	; 0x30
    51ea:	2a09      	cmp	r2, #9
    51ec:	d804      	bhi.n	51f8 <_vfiprintf_r+0x17c>
    51ee:	210a      	movs	r1, #10
    51f0:	434b      	muls	r3, r1
    51f2:	3401      	adds	r4, #1
    51f4:	189b      	adds	r3, r3, r2
    51f6:	e7f6      	b.n	51e6 <_vfiprintf_r+0x16a>
    51f8:	9309      	str	r3, [sp, #36]	; 0x24
    51fa:	e779      	b.n	50f0 <_vfiprintf_r+0x74>
    51fc:	7863      	ldrb	r3, [r4, #1]
    51fe:	2b2a      	cmp	r3, #42	; 0x2a
    5200:	d109      	bne.n	5216 <_vfiprintf_r+0x19a>
    5202:	9b05      	ldr	r3, [sp, #20]
    5204:	3402      	adds	r4, #2
    5206:	1d1a      	adds	r2, r3, #4
    5208:	681b      	ldr	r3, [r3, #0]
    520a:	9205      	str	r2, [sp, #20]
    520c:	2b00      	cmp	r3, #0
    520e:	da0d      	bge.n	522c <_vfiprintf_r+0x1b0>
    5210:	2301      	movs	r3, #1
    5212:	425b      	negs	r3, r3
    5214:	e00a      	b.n	522c <_vfiprintf_r+0x1b0>
    5216:	3401      	adds	r4, #1
    5218:	2300      	movs	r3, #0
    521a:	7822      	ldrb	r2, [r4, #0]
    521c:	3a30      	subs	r2, #48	; 0x30
    521e:	2a09      	cmp	r2, #9
    5220:	d804      	bhi.n	522c <_vfiprintf_r+0x1b0>
    5222:	210a      	movs	r1, #10
    5224:	434b      	muls	r3, r1
    5226:	3401      	adds	r4, #1
    5228:	189b      	adds	r3, r3, r2
    522a:	e7f6      	b.n	521a <_vfiprintf_r+0x19e>
    522c:	9307      	str	r3, [sp, #28]
    522e:	e763      	b.n	50f8 <_vfiprintf_r+0x7c>
    5230:	ab05      	add	r3, sp, #20
    5232:	9300      	str	r3, [sp, #0]
    5234:	1c30      	adds	r0, r6, #0
    5236:	1c29      	adds	r1, r5, #0
    5238:	1c3a      	adds	r2, r7, #0
    523a:	4b13      	ldr	r3, [pc, #76]	; (5288 <_vfiprintf_r+0x20c>)
    523c:	e000      	b.n	5240 <_vfiprintf_r+0x1c4>
    523e:	bf00      	nop
    5240:	e007      	b.n	5252 <_vfiprintf_r+0x1d6>
    5242:	ab05      	add	r3, sp, #20
    5244:	9300      	str	r3, [sp, #0]
    5246:	1c30      	adds	r0, r6, #0
    5248:	1c29      	adds	r1, r5, #0
    524a:	1c3a      	adds	r2, r7, #0
    524c:	4b0e      	ldr	r3, [pc, #56]	; (5288 <_vfiprintf_r+0x20c>)
    524e:	f000 f891 	bl	5374 <_printf_i>
    5252:	9004      	str	r0, [sp, #16]
    5254:	9904      	ldr	r1, [sp, #16]
    5256:	3101      	adds	r1, #1
    5258:	d000      	beq.n	525c <_vfiprintf_r+0x1e0>
    525a:	e770      	b.n	513e <_vfiprintf_r+0xc2>
    525c:	89bb      	ldrh	r3, [r7, #12]
    525e:	065a      	lsls	r2, r3, #25
    5260:	d500      	bpl.n	5264 <_vfiprintf_r+0x1e8>
    5262:	e73a      	b.n	50da <_vfiprintf_r+0x5e>
    5264:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5266:	b01f      	add	sp, #124	; 0x7c
    5268:	bdf0      	pop	{r4, r5, r6, r7, pc}
    526a:	46c0      	nop			; (mov r8, r8)
    526c:	00006040 	.word	0x00006040
    5270:	00006060 	.word	0x00006060
    5274:	00006080 	.word	0x00006080
    5278:	00006012 	.word	0x00006012
    527c:	00006016 	.word	0x00006016
    5280:	00000000 	.word	0x00000000
    5284:	0000600c 	.word	0x0000600c
    5288:	00005057 	.word	0x00005057

0000528c <_printf_common>:
    528c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    528e:	1c15      	adds	r5, r2, #0
    5290:	9301      	str	r3, [sp, #4]
    5292:	690a      	ldr	r2, [r1, #16]
    5294:	688b      	ldr	r3, [r1, #8]
    5296:	1c06      	adds	r6, r0, #0
    5298:	1c0c      	adds	r4, r1, #0
    529a:	4293      	cmp	r3, r2
    529c:	da00      	bge.n	52a0 <_printf_common+0x14>
    529e:	1c13      	adds	r3, r2, #0
    52a0:	1c22      	adds	r2, r4, #0
    52a2:	602b      	str	r3, [r5, #0]
    52a4:	3243      	adds	r2, #67	; 0x43
    52a6:	7812      	ldrb	r2, [r2, #0]
    52a8:	2a00      	cmp	r2, #0
    52aa:	d001      	beq.n	52b0 <_printf_common+0x24>
    52ac:	3301      	adds	r3, #1
    52ae:	602b      	str	r3, [r5, #0]
    52b0:	6820      	ldr	r0, [r4, #0]
    52b2:	0680      	lsls	r0, r0, #26
    52b4:	d502      	bpl.n	52bc <_printf_common+0x30>
    52b6:	682b      	ldr	r3, [r5, #0]
    52b8:	3302      	adds	r3, #2
    52ba:	602b      	str	r3, [r5, #0]
    52bc:	6821      	ldr	r1, [r4, #0]
    52be:	2706      	movs	r7, #6
    52c0:	400f      	ands	r7, r1
    52c2:	d01f      	beq.n	5304 <_printf_common+0x78>
    52c4:	1c23      	adds	r3, r4, #0
    52c6:	3343      	adds	r3, #67	; 0x43
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	1e5a      	subs	r2, r3, #1
    52cc:	4193      	sbcs	r3, r2
    52ce:	6822      	ldr	r2, [r4, #0]
    52d0:	0692      	lsls	r2, r2, #26
    52d2:	d51f      	bpl.n	5314 <_printf_common+0x88>
    52d4:	18e1      	adds	r1, r4, r3
    52d6:	3140      	adds	r1, #64	; 0x40
    52d8:	2030      	movs	r0, #48	; 0x30
    52da:	70c8      	strb	r0, [r1, #3]
    52dc:	1c21      	adds	r1, r4, #0
    52de:	1c5a      	adds	r2, r3, #1
    52e0:	3145      	adds	r1, #69	; 0x45
    52e2:	7809      	ldrb	r1, [r1, #0]
    52e4:	18a2      	adds	r2, r4, r2
    52e6:	3240      	adds	r2, #64	; 0x40
    52e8:	3302      	adds	r3, #2
    52ea:	70d1      	strb	r1, [r2, #3]
    52ec:	e012      	b.n	5314 <_printf_common+0x88>
    52ee:	1c22      	adds	r2, r4, #0
    52f0:	1c30      	adds	r0, r6, #0
    52f2:	9901      	ldr	r1, [sp, #4]
    52f4:	3219      	adds	r2, #25
    52f6:	2301      	movs	r3, #1
    52f8:	9f08      	ldr	r7, [sp, #32]
    52fa:	47b8      	blx	r7
    52fc:	3001      	adds	r0, #1
    52fe:	d011      	beq.n	5324 <_printf_common+0x98>
    5300:	9f00      	ldr	r7, [sp, #0]
    5302:	3701      	adds	r7, #1
    5304:	9700      	str	r7, [sp, #0]
    5306:	68e0      	ldr	r0, [r4, #12]
    5308:	6829      	ldr	r1, [r5, #0]
    530a:	9f00      	ldr	r7, [sp, #0]
    530c:	1a43      	subs	r3, r0, r1
    530e:	429f      	cmp	r7, r3
    5310:	dbed      	blt.n	52ee <_printf_common+0x62>
    5312:	e7d7      	b.n	52c4 <_printf_common+0x38>
    5314:	1c22      	adds	r2, r4, #0
    5316:	1c30      	adds	r0, r6, #0
    5318:	9901      	ldr	r1, [sp, #4]
    531a:	3243      	adds	r2, #67	; 0x43
    531c:	9f08      	ldr	r7, [sp, #32]
    531e:	47b8      	blx	r7
    5320:	3001      	adds	r0, #1
    5322:	d102      	bne.n	532a <_printf_common+0x9e>
    5324:	2001      	movs	r0, #1
    5326:	4240      	negs	r0, r0
    5328:	e023      	b.n	5372 <_printf_common+0xe6>
    532a:	6820      	ldr	r0, [r4, #0]
    532c:	2106      	movs	r1, #6
    532e:	682b      	ldr	r3, [r5, #0]
    5330:	68e2      	ldr	r2, [r4, #12]
    5332:	4001      	ands	r1, r0
    5334:	2500      	movs	r5, #0
    5336:	2904      	cmp	r1, #4
    5338:	d103      	bne.n	5342 <_printf_common+0xb6>
    533a:	1ad5      	subs	r5, r2, r3
    533c:	43eb      	mvns	r3, r5
    533e:	17db      	asrs	r3, r3, #31
    5340:	401d      	ands	r5, r3
    5342:	68a2      	ldr	r2, [r4, #8]
    5344:	6923      	ldr	r3, [r4, #16]
    5346:	429a      	cmp	r2, r3
    5348:	dd01      	ble.n	534e <_printf_common+0xc2>
    534a:	1ad3      	subs	r3, r2, r3
    534c:	18ed      	adds	r5, r5, r3
    534e:	2700      	movs	r7, #0
    5350:	9700      	str	r7, [sp, #0]
    5352:	9f00      	ldr	r7, [sp, #0]
    5354:	42af      	cmp	r7, r5
    5356:	da0b      	bge.n	5370 <_printf_common+0xe4>
    5358:	1c22      	adds	r2, r4, #0
    535a:	1c30      	adds	r0, r6, #0
    535c:	9901      	ldr	r1, [sp, #4]
    535e:	321a      	adds	r2, #26
    5360:	2301      	movs	r3, #1
    5362:	9f08      	ldr	r7, [sp, #32]
    5364:	47b8      	blx	r7
    5366:	3001      	adds	r0, #1
    5368:	d0dc      	beq.n	5324 <_printf_common+0x98>
    536a:	9f00      	ldr	r7, [sp, #0]
    536c:	3701      	adds	r7, #1
    536e:	e7ef      	b.n	5350 <_printf_common+0xc4>
    5370:	2000      	movs	r0, #0
    5372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005374 <_printf_i>:
    5374:	b5f0      	push	{r4, r5, r6, r7, lr}
    5376:	1c0d      	adds	r5, r1, #0
    5378:	b08b      	sub	sp, #44	; 0x2c
    537a:	3543      	adds	r5, #67	; 0x43
    537c:	9206      	str	r2, [sp, #24]
    537e:	9005      	str	r0, [sp, #20]
    5380:	9307      	str	r3, [sp, #28]
    5382:	9504      	str	r5, [sp, #16]
    5384:	7e0b      	ldrb	r3, [r1, #24]
    5386:	1c0c      	adds	r4, r1, #0
    5388:	9a10      	ldr	r2, [sp, #64]	; 0x40
    538a:	2b6e      	cmp	r3, #110	; 0x6e
    538c:	d100      	bne.n	5390 <_printf_i+0x1c>
    538e:	e0a7      	b.n	54e0 <_printf_i+0x16c>
    5390:	d811      	bhi.n	53b6 <_printf_i+0x42>
    5392:	2b63      	cmp	r3, #99	; 0x63
    5394:	d022      	beq.n	53dc <_printf_i+0x68>
    5396:	d809      	bhi.n	53ac <_printf_i+0x38>
    5398:	2b00      	cmp	r3, #0
    539a:	d100      	bne.n	539e <_printf_i+0x2a>
    539c:	e0b0      	b.n	5500 <_printf_i+0x18c>
    539e:	2b58      	cmp	r3, #88	; 0x58
    53a0:	d000      	beq.n	53a4 <_printf_i+0x30>
    53a2:	e0c0      	b.n	5526 <_printf_i+0x1b2>
    53a4:	3145      	adds	r1, #69	; 0x45
    53a6:	700b      	strb	r3, [r1, #0]
    53a8:	4d7b      	ldr	r5, [pc, #492]	; (5598 <_printf_i+0x224>)
    53aa:	e04e      	b.n	544a <_printf_i+0xd6>
    53ac:	2b64      	cmp	r3, #100	; 0x64
    53ae:	d01c      	beq.n	53ea <_printf_i+0x76>
    53b0:	2b69      	cmp	r3, #105	; 0x69
    53b2:	d01a      	beq.n	53ea <_printf_i+0x76>
    53b4:	e0b7      	b.n	5526 <_printf_i+0x1b2>
    53b6:	2b73      	cmp	r3, #115	; 0x73
    53b8:	d100      	bne.n	53bc <_printf_i+0x48>
    53ba:	e0a5      	b.n	5508 <_printf_i+0x194>
    53bc:	d809      	bhi.n	53d2 <_printf_i+0x5e>
    53be:	2b6f      	cmp	r3, #111	; 0x6f
    53c0:	d029      	beq.n	5416 <_printf_i+0xa2>
    53c2:	2b70      	cmp	r3, #112	; 0x70
    53c4:	d000      	beq.n	53c8 <_printf_i+0x54>
    53c6:	e0ae      	b.n	5526 <_printf_i+0x1b2>
    53c8:	680e      	ldr	r6, [r1, #0]
    53ca:	2320      	movs	r3, #32
    53cc:	4333      	orrs	r3, r6
    53ce:	600b      	str	r3, [r1, #0]
    53d0:	e036      	b.n	5440 <_printf_i+0xcc>
    53d2:	2b75      	cmp	r3, #117	; 0x75
    53d4:	d01f      	beq.n	5416 <_printf_i+0xa2>
    53d6:	2b78      	cmp	r3, #120	; 0x78
    53d8:	d032      	beq.n	5440 <_printf_i+0xcc>
    53da:	e0a4      	b.n	5526 <_printf_i+0x1b2>
    53dc:	6813      	ldr	r3, [r2, #0]
    53de:	1c0d      	adds	r5, r1, #0
    53e0:	1d19      	adds	r1, r3, #4
    53e2:	3542      	adds	r5, #66	; 0x42
    53e4:	6011      	str	r1, [r2, #0]
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	e09f      	b.n	552a <_printf_i+0x1b6>
    53ea:	6821      	ldr	r1, [r4, #0]
    53ec:	6813      	ldr	r3, [r2, #0]
    53ee:	060e      	lsls	r6, r1, #24
    53f0:	d503      	bpl.n	53fa <_printf_i+0x86>
    53f2:	1d19      	adds	r1, r3, #4
    53f4:	6011      	str	r1, [r2, #0]
    53f6:	681e      	ldr	r6, [r3, #0]
    53f8:	e005      	b.n	5406 <_printf_i+0x92>
    53fa:	0648      	lsls	r0, r1, #25
    53fc:	d5f9      	bpl.n	53f2 <_printf_i+0x7e>
    53fe:	1d19      	adds	r1, r3, #4
    5400:	6011      	str	r1, [r2, #0]
    5402:	2100      	movs	r1, #0
    5404:	5e5e      	ldrsh	r6, [r3, r1]
    5406:	4b64      	ldr	r3, [pc, #400]	; (5598 <_printf_i+0x224>)
    5408:	2e00      	cmp	r6, #0
    540a:	da3b      	bge.n	5484 <_printf_i+0x110>
    540c:	9d04      	ldr	r5, [sp, #16]
    540e:	222d      	movs	r2, #45	; 0x2d
    5410:	4276      	negs	r6, r6
    5412:	702a      	strb	r2, [r5, #0]
    5414:	e036      	b.n	5484 <_printf_i+0x110>
    5416:	6821      	ldr	r1, [r4, #0]
    5418:	6813      	ldr	r3, [r2, #0]
    541a:	060e      	lsls	r6, r1, #24
    541c:	d503      	bpl.n	5426 <_printf_i+0xb2>
    541e:	1d19      	adds	r1, r3, #4
    5420:	6011      	str	r1, [r2, #0]
    5422:	681e      	ldr	r6, [r3, #0]
    5424:	e004      	b.n	5430 <_printf_i+0xbc>
    5426:	0648      	lsls	r0, r1, #25
    5428:	d5f9      	bpl.n	541e <_printf_i+0xaa>
    542a:	1d19      	adds	r1, r3, #4
    542c:	881e      	ldrh	r6, [r3, #0]
    542e:	6011      	str	r1, [r2, #0]
    5430:	4b59      	ldr	r3, [pc, #356]	; (5598 <_printf_i+0x224>)
    5432:	7e22      	ldrb	r2, [r4, #24]
    5434:	9303      	str	r3, [sp, #12]
    5436:	2708      	movs	r7, #8
    5438:	2a6f      	cmp	r2, #111	; 0x6f
    543a:	d01e      	beq.n	547a <_printf_i+0x106>
    543c:	270a      	movs	r7, #10
    543e:	e01c      	b.n	547a <_printf_i+0x106>
    5440:	1c23      	adds	r3, r4, #0
    5442:	2178      	movs	r1, #120	; 0x78
    5444:	3345      	adds	r3, #69	; 0x45
    5446:	4d55      	ldr	r5, [pc, #340]	; (559c <_printf_i+0x228>)
    5448:	7019      	strb	r1, [r3, #0]
    544a:	6811      	ldr	r1, [r2, #0]
    544c:	6823      	ldr	r3, [r4, #0]
    544e:	1d08      	adds	r0, r1, #4
    5450:	9503      	str	r5, [sp, #12]
    5452:	6010      	str	r0, [r2, #0]
    5454:	061e      	lsls	r6, r3, #24
    5456:	d501      	bpl.n	545c <_printf_i+0xe8>
    5458:	680e      	ldr	r6, [r1, #0]
    545a:	e002      	b.n	5462 <_printf_i+0xee>
    545c:	0658      	lsls	r0, r3, #25
    545e:	d5fb      	bpl.n	5458 <_printf_i+0xe4>
    5460:	880e      	ldrh	r6, [r1, #0]
    5462:	07d9      	lsls	r1, r3, #31
    5464:	d502      	bpl.n	546c <_printf_i+0xf8>
    5466:	2220      	movs	r2, #32
    5468:	4313      	orrs	r3, r2
    546a:	6023      	str	r3, [r4, #0]
    546c:	2710      	movs	r7, #16
    546e:	2e00      	cmp	r6, #0
    5470:	d103      	bne.n	547a <_printf_i+0x106>
    5472:	6822      	ldr	r2, [r4, #0]
    5474:	2320      	movs	r3, #32
    5476:	439a      	bics	r2, r3
    5478:	6022      	str	r2, [r4, #0]
    547a:	1c23      	adds	r3, r4, #0
    547c:	2200      	movs	r2, #0
    547e:	3343      	adds	r3, #67	; 0x43
    5480:	701a      	strb	r2, [r3, #0]
    5482:	e001      	b.n	5488 <_printf_i+0x114>
    5484:	9303      	str	r3, [sp, #12]
    5486:	270a      	movs	r7, #10
    5488:	6863      	ldr	r3, [r4, #4]
    548a:	60a3      	str	r3, [r4, #8]
    548c:	2b00      	cmp	r3, #0
    548e:	db03      	blt.n	5498 <_printf_i+0x124>
    5490:	6825      	ldr	r5, [r4, #0]
    5492:	2204      	movs	r2, #4
    5494:	4395      	bics	r5, r2
    5496:	6025      	str	r5, [r4, #0]
    5498:	2e00      	cmp	r6, #0
    549a:	d102      	bne.n	54a2 <_printf_i+0x12e>
    549c:	9d04      	ldr	r5, [sp, #16]
    549e:	2b00      	cmp	r3, #0
    54a0:	d00e      	beq.n	54c0 <_printf_i+0x14c>
    54a2:	9d04      	ldr	r5, [sp, #16]
    54a4:	1c30      	adds	r0, r6, #0
    54a6:	1c39      	adds	r1, r7, #0
    54a8:	f7ff fc08 	bl	4cbc <__aeabi_uidivmod>
    54ac:	9803      	ldr	r0, [sp, #12]
    54ae:	3d01      	subs	r5, #1
    54b0:	5c43      	ldrb	r3, [r0, r1]
    54b2:	1c30      	adds	r0, r6, #0
    54b4:	702b      	strb	r3, [r5, #0]
    54b6:	1c39      	adds	r1, r7, #0
    54b8:	f7ff fbbc 	bl	4c34 <__aeabi_uidiv>
    54bc:	1e06      	subs	r6, r0, #0
    54be:	d1f1      	bne.n	54a4 <_printf_i+0x130>
    54c0:	2f08      	cmp	r7, #8
    54c2:	d109      	bne.n	54d8 <_printf_i+0x164>
    54c4:	6821      	ldr	r1, [r4, #0]
    54c6:	07c9      	lsls	r1, r1, #31
    54c8:	d506      	bpl.n	54d8 <_printf_i+0x164>
    54ca:	6862      	ldr	r2, [r4, #4]
    54cc:	6923      	ldr	r3, [r4, #16]
    54ce:	429a      	cmp	r2, r3
    54d0:	dc02      	bgt.n	54d8 <_printf_i+0x164>
    54d2:	3d01      	subs	r5, #1
    54d4:	2330      	movs	r3, #48	; 0x30
    54d6:	702b      	strb	r3, [r5, #0]
    54d8:	9e04      	ldr	r6, [sp, #16]
    54da:	1b73      	subs	r3, r6, r5
    54dc:	6123      	str	r3, [r4, #16]
    54de:	e02a      	b.n	5536 <_printf_i+0x1c2>
    54e0:	6808      	ldr	r0, [r1, #0]
    54e2:	6813      	ldr	r3, [r2, #0]
    54e4:	6949      	ldr	r1, [r1, #20]
    54e6:	0605      	lsls	r5, r0, #24
    54e8:	d504      	bpl.n	54f4 <_printf_i+0x180>
    54ea:	1d18      	adds	r0, r3, #4
    54ec:	6010      	str	r0, [r2, #0]
    54ee:	681b      	ldr	r3, [r3, #0]
    54f0:	6019      	str	r1, [r3, #0]
    54f2:	e005      	b.n	5500 <_printf_i+0x18c>
    54f4:	0646      	lsls	r6, r0, #25
    54f6:	d5f8      	bpl.n	54ea <_printf_i+0x176>
    54f8:	1d18      	adds	r0, r3, #4
    54fa:	6010      	str	r0, [r2, #0]
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	8019      	strh	r1, [r3, #0]
    5500:	2300      	movs	r3, #0
    5502:	6123      	str	r3, [r4, #16]
    5504:	9d04      	ldr	r5, [sp, #16]
    5506:	e016      	b.n	5536 <_printf_i+0x1c2>
    5508:	6813      	ldr	r3, [r2, #0]
    550a:	1d19      	adds	r1, r3, #4
    550c:	6011      	str	r1, [r2, #0]
    550e:	681d      	ldr	r5, [r3, #0]
    5510:	1c28      	adds	r0, r5, #0
    5512:	f000 fbe9 	bl	5ce8 <strlen>
    5516:	6863      	ldr	r3, [r4, #4]
    5518:	6120      	str	r0, [r4, #16]
    551a:	4298      	cmp	r0, r3
    551c:	d900      	bls.n	5520 <_printf_i+0x1ac>
    551e:	6123      	str	r3, [r4, #16]
    5520:	6920      	ldr	r0, [r4, #16]
    5522:	6060      	str	r0, [r4, #4]
    5524:	e004      	b.n	5530 <_printf_i+0x1bc>
    5526:	1c25      	adds	r5, r4, #0
    5528:	3542      	adds	r5, #66	; 0x42
    552a:	702b      	strb	r3, [r5, #0]
    552c:	2301      	movs	r3, #1
    552e:	6123      	str	r3, [r4, #16]
    5530:	9e04      	ldr	r6, [sp, #16]
    5532:	2300      	movs	r3, #0
    5534:	7033      	strb	r3, [r6, #0]
    5536:	9e07      	ldr	r6, [sp, #28]
    5538:	9805      	ldr	r0, [sp, #20]
    553a:	9600      	str	r6, [sp, #0]
    553c:	1c21      	adds	r1, r4, #0
    553e:	aa09      	add	r2, sp, #36	; 0x24
    5540:	9b06      	ldr	r3, [sp, #24]
    5542:	f7ff fea3 	bl	528c <_printf_common>
    5546:	3001      	adds	r0, #1
    5548:	d102      	bne.n	5550 <_printf_i+0x1dc>
    554a:	2001      	movs	r0, #1
    554c:	4240      	negs	r0, r0
    554e:	e021      	b.n	5594 <_printf_i+0x220>
    5550:	1c2a      	adds	r2, r5, #0
    5552:	9805      	ldr	r0, [sp, #20]
    5554:	9906      	ldr	r1, [sp, #24]
    5556:	6923      	ldr	r3, [r4, #16]
    5558:	9d07      	ldr	r5, [sp, #28]
    555a:	47a8      	blx	r5
    555c:	3001      	adds	r0, #1
    555e:	d0f4      	beq.n	554a <_printf_i+0x1d6>
    5560:	6826      	ldr	r6, [r4, #0]
    5562:	07b6      	lsls	r6, r6, #30
    5564:	d405      	bmi.n	5572 <_printf_i+0x1fe>
    5566:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5568:	68e0      	ldr	r0, [r4, #12]
    556a:	4298      	cmp	r0, r3
    556c:	da12      	bge.n	5594 <_printf_i+0x220>
    556e:	1c18      	adds	r0, r3, #0
    5570:	e010      	b.n	5594 <_printf_i+0x220>
    5572:	2500      	movs	r5, #0
    5574:	68e0      	ldr	r0, [r4, #12]
    5576:	9909      	ldr	r1, [sp, #36]	; 0x24
    5578:	1a43      	subs	r3, r0, r1
    557a:	429d      	cmp	r5, r3
    557c:	daf3      	bge.n	5566 <_printf_i+0x1f2>
    557e:	1c22      	adds	r2, r4, #0
    5580:	9805      	ldr	r0, [sp, #20]
    5582:	9906      	ldr	r1, [sp, #24]
    5584:	3219      	adds	r2, #25
    5586:	2301      	movs	r3, #1
    5588:	9e07      	ldr	r6, [sp, #28]
    558a:	47b0      	blx	r6
    558c:	3001      	adds	r0, #1
    558e:	d0dc      	beq.n	554a <_printf_i+0x1d6>
    5590:	3501      	adds	r5, #1
    5592:	e7ef      	b.n	5574 <_printf_i+0x200>
    5594:	b00b      	add	sp, #44	; 0x2c
    5596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5598:	0000601d 	.word	0x0000601d
    559c:	0000602e 	.word	0x0000602e

000055a0 <__swbuf_r>:
    55a0:	b570      	push	{r4, r5, r6, lr}
    55a2:	1c05      	adds	r5, r0, #0
    55a4:	1c0e      	adds	r6, r1, #0
    55a6:	1c14      	adds	r4, r2, #0
    55a8:	2800      	cmp	r0, #0
    55aa:	d004      	beq.n	55b6 <__swbuf_r+0x16>
    55ac:	6982      	ldr	r2, [r0, #24]
    55ae:	2a00      	cmp	r2, #0
    55b0:	d101      	bne.n	55b6 <__swbuf_r+0x16>
    55b2:	f000 f9c9 	bl	5948 <__sinit>
    55b6:	4b23      	ldr	r3, [pc, #140]	; (5644 <__swbuf_r+0xa4>)
    55b8:	429c      	cmp	r4, r3
    55ba:	d101      	bne.n	55c0 <__swbuf_r+0x20>
    55bc:	686c      	ldr	r4, [r5, #4]
    55be:	e008      	b.n	55d2 <__swbuf_r+0x32>
    55c0:	4b21      	ldr	r3, [pc, #132]	; (5648 <__swbuf_r+0xa8>)
    55c2:	429c      	cmp	r4, r3
    55c4:	d101      	bne.n	55ca <__swbuf_r+0x2a>
    55c6:	68ac      	ldr	r4, [r5, #8]
    55c8:	e003      	b.n	55d2 <__swbuf_r+0x32>
    55ca:	4b20      	ldr	r3, [pc, #128]	; (564c <__swbuf_r+0xac>)
    55cc:	429c      	cmp	r4, r3
    55ce:	d100      	bne.n	55d2 <__swbuf_r+0x32>
    55d0:	68ec      	ldr	r4, [r5, #12]
    55d2:	69a3      	ldr	r3, [r4, #24]
    55d4:	60a3      	str	r3, [r4, #8]
    55d6:	89a3      	ldrh	r3, [r4, #12]
    55d8:	071a      	lsls	r2, r3, #28
    55da:	d50a      	bpl.n	55f2 <__swbuf_r+0x52>
    55dc:	6923      	ldr	r3, [r4, #16]
    55de:	2b00      	cmp	r3, #0
    55e0:	d007      	beq.n	55f2 <__swbuf_r+0x52>
    55e2:	6822      	ldr	r2, [r4, #0]
    55e4:	6923      	ldr	r3, [r4, #16]
    55e6:	b2f6      	uxtb	r6, r6
    55e8:	1ad0      	subs	r0, r2, r3
    55ea:	6962      	ldr	r2, [r4, #20]
    55ec:	4290      	cmp	r0, r2
    55ee:	db0f      	blt.n	5610 <__swbuf_r+0x70>
    55f0:	e008      	b.n	5604 <__swbuf_r+0x64>
    55f2:	1c28      	adds	r0, r5, #0
    55f4:	1c21      	adds	r1, r4, #0
    55f6:	f000 f82b 	bl	5650 <__swsetup_r>
    55fa:	2800      	cmp	r0, #0
    55fc:	d0f1      	beq.n	55e2 <__swbuf_r+0x42>
    55fe:	2001      	movs	r0, #1
    5600:	4240      	negs	r0, r0
    5602:	e01d      	b.n	5640 <__swbuf_r+0xa0>
    5604:	1c28      	adds	r0, r5, #0
    5606:	1c21      	adds	r1, r4, #0
    5608:	f000 f91e 	bl	5848 <_fflush_r>
    560c:	2800      	cmp	r0, #0
    560e:	d1f6      	bne.n	55fe <__swbuf_r+0x5e>
    5610:	68a3      	ldr	r3, [r4, #8]
    5612:	3001      	adds	r0, #1
    5614:	3b01      	subs	r3, #1
    5616:	60a3      	str	r3, [r4, #8]
    5618:	6823      	ldr	r3, [r4, #0]
    561a:	1c5a      	adds	r2, r3, #1
    561c:	6022      	str	r2, [r4, #0]
    561e:	701e      	strb	r6, [r3, #0]
    5620:	6963      	ldr	r3, [r4, #20]
    5622:	4298      	cmp	r0, r3
    5624:	d005      	beq.n	5632 <__swbuf_r+0x92>
    5626:	89a3      	ldrh	r3, [r4, #12]
    5628:	1c30      	adds	r0, r6, #0
    562a:	07da      	lsls	r2, r3, #31
    562c:	d508      	bpl.n	5640 <__swbuf_r+0xa0>
    562e:	2e0a      	cmp	r6, #10
    5630:	d106      	bne.n	5640 <__swbuf_r+0xa0>
    5632:	1c28      	adds	r0, r5, #0
    5634:	1c21      	adds	r1, r4, #0
    5636:	f000 f907 	bl	5848 <_fflush_r>
    563a:	2800      	cmp	r0, #0
    563c:	d1df      	bne.n	55fe <__swbuf_r+0x5e>
    563e:	1c30      	adds	r0, r6, #0
    5640:	bd70      	pop	{r4, r5, r6, pc}
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	00006040 	.word	0x00006040
    5648:	00006060 	.word	0x00006060
    564c:	00006080 	.word	0x00006080

00005650 <__swsetup_r>:
    5650:	4b34      	ldr	r3, [pc, #208]	; (5724 <__swsetup_r+0xd4>)
    5652:	b570      	push	{r4, r5, r6, lr}
    5654:	681d      	ldr	r5, [r3, #0]
    5656:	1c06      	adds	r6, r0, #0
    5658:	1c0c      	adds	r4, r1, #0
    565a:	2d00      	cmp	r5, #0
    565c:	d005      	beq.n	566a <__swsetup_r+0x1a>
    565e:	69a9      	ldr	r1, [r5, #24]
    5660:	2900      	cmp	r1, #0
    5662:	d102      	bne.n	566a <__swsetup_r+0x1a>
    5664:	1c28      	adds	r0, r5, #0
    5666:	f000 f96f 	bl	5948 <__sinit>
    566a:	4b2f      	ldr	r3, [pc, #188]	; (5728 <__swsetup_r+0xd8>)
    566c:	429c      	cmp	r4, r3
    566e:	d101      	bne.n	5674 <__swsetup_r+0x24>
    5670:	686c      	ldr	r4, [r5, #4]
    5672:	e008      	b.n	5686 <__swsetup_r+0x36>
    5674:	4b2d      	ldr	r3, [pc, #180]	; (572c <__swsetup_r+0xdc>)
    5676:	429c      	cmp	r4, r3
    5678:	d101      	bne.n	567e <__swsetup_r+0x2e>
    567a:	68ac      	ldr	r4, [r5, #8]
    567c:	e003      	b.n	5686 <__swsetup_r+0x36>
    567e:	4b2c      	ldr	r3, [pc, #176]	; (5730 <__swsetup_r+0xe0>)
    5680:	429c      	cmp	r4, r3
    5682:	d100      	bne.n	5686 <__swsetup_r+0x36>
    5684:	68ec      	ldr	r4, [r5, #12]
    5686:	89a2      	ldrh	r2, [r4, #12]
    5688:	b293      	uxth	r3, r2
    568a:	0719      	lsls	r1, r3, #28
    568c:	d421      	bmi.n	56d2 <__swsetup_r+0x82>
    568e:	06d9      	lsls	r1, r3, #27
    5690:	d405      	bmi.n	569e <__swsetup_r+0x4e>
    5692:	2309      	movs	r3, #9
    5694:	6033      	str	r3, [r6, #0]
    5696:	2340      	movs	r3, #64	; 0x40
    5698:	431a      	orrs	r2, r3
    569a:	81a2      	strh	r2, [r4, #12]
    569c:	e03f      	b.n	571e <__swsetup_r+0xce>
    569e:	075a      	lsls	r2, r3, #29
    56a0:	d513      	bpl.n	56ca <__swsetup_r+0x7a>
    56a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    56a4:	2900      	cmp	r1, #0
    56a6:	d008      	beq.n	56ba <__swsetup_r+0x6a>
    56a8:	1c23      	adds	r3, r4, #0
    56aa:	3344      	adds	r3, #68	; 0x44
    56ac:	4299      	cmp	r1, r3
    56ae:	d002      	beq.n	56b6 <__swsetup_r+0x66>
    56b0:	1c30      	adds	r0, r6, #0
    56b2:	f000 fa1f 	bl	5af4 <_free_r>
    56b6:	2300      	movs	r3, #0
    56b8:	6363      	str	r3, [r4, #52]	; 0x34
    56ba:	89a3      	ldrh	r3, [r4, #12]
    56bc:	2224      	movs	r2, #36	; 0x24
    56be:	4393      	bics	r3, r2
    56c0:	81a3      	strh	r3, [r4, #12]
    56c2:	2300      	movs	r3, #0
    56c4:	6063      	str	r3, [r4, #4]
    56c6:	6923      	ldr	r3, [r4, #16]
    56c8:	6023      	str	r3, [r4, #0]
    56ca:	89a3      	ldrh	r3, [r4, #12]
    56cc:	2208      	movs	r2, #8
    56ce:	4313      	orrs	r3, r2
    56d0:	81a3      	strh	r3, [r4, #12]
    56d2:	6921      	ldr	r1, [r4, #16]
    56d4:	2900      	cmp	r1, #0
    56d6:	d10b      	bne.n	56f0 <__swsetup_r+0xa0>
    56d8:	89a3      	ldrh	r3, [r4, #12]
    56da:	22a0      	movs	r2, #160	; 0xa0
    56dc:	0092      	lsls	r2, r2, #2
    56de:	401a      	ands	r2, r3
    56e0:	2380      	movs	r3, #128	; 0x80
    56e2:	009b      	lsls	r3, r3, #2
    56e4:	429a      	cmp	r2, r3
    56e6:	d003      	beq.n	56f0 <__swsetup_r+0xa0>
    56e8:	1c30      	adds	r0, r6, #0
    56ea:	1c21      	adds	r1, r4, #0
    56ec:	f000 f99c 	bl	5a28 <__smakebuf_r>
    56f0:	89a3      	ldrh	r3, [r4, #12]
    56f2:	2201      	movs	r2, #1
    56f4:	401a      	ands	r2, r3
    56f6:	d005      	beq.n	5704 <__swsetup_r+0xb4>
    56f8:	6961      	ldr	r1, [r4, #20]
    56fa:	2200      	movs	r2, #0
    56fc:	60a2      	str	r2, [r4, #8]
    56fe:	424a      	negs	r2, r1
    5700:	61a2      	str	r2, [r4, #24]
    5702:	e003      	b.n	570c <__swsetup_r+0xbc>
    5704:	0799      	lsls	r1, r3, #30
    5706:	d400      	bmi.n	570a <__swsetup_r+0xba>
    5708:	6962      	ldr	r2, [r4, #20]
    570a:	60a2      	str	r2, [r4, #8]
    570c:	6922      	ldr	r2, [r4, #16]
    570e:	2000      	movs	r0, #0
    5710:	4282      	cmp	r2, r0
    5712:	d106      	bne.n	5722 <__swsetup_r+0xd2>
    5714:	0619      	lsls	r1, r3, #24
    5716:	d504      	bpl.n	5722 <__swsetup_r+0xd2>
    5718:	2240      	movs	r2, #64	; 0x40
    571a:	4313      	orrs	r3, r2
    571c:	81a3      	strh	r3, [r4, #12]
    571e:	2001      	movs	r0, #1
    5720:	4240      	negs	r0, r0
    5722:	bd70      	pop	{r4, r5, r6, pc}
    5724:	20000084 	.word	0x20000084
    5728:	00006040 	.word	0x00006040
    572c:	00006060 	.word	0x00006060
    5730:	00006080 	.word	0x00006080

00005734 <__sflush_r>:
    5734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5736:	898b      	ldrh	r3, [r1, #12]
    5738:	1c05      	adds	r5, r0, #0
    573a:	1c0c      	adds	r4, r1, #0
    573c:	0719      	lsls	r1, r3, #28
    573e:	d45e      	bmi.n	57fe <__sflush_r+0xca>
    5740:	6862      	ldr	r2, [r4, #4]
    5742:	2a00      	cmp	r2, #0
    5744:	dc02      	bgt.n	574c <__sflush_r+0x18>
    5746:	6c27      	ldr	r7, [r4, #64]	; 0x40
    5748:	2f00      	cmp	r7, #0
    574a:	dd1a      	ble.n	5782 <__sflush_r+0x4e>
    574c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    574e:	2f00      	cmp	r7, #0
    5750:	d017      	beq.n	5782 <__sflush_r+0x4e>
    5752:	2200      	movs	r2, #0
    5754:	682e      	ldr	r6, [r5, #0]
    5756:	602a      	str	r2, [r5, #0]
    5758:	2280      	movs	r2, #128	; 0x80
    575a:	0152      	lsls	r2, r2, #5
    575c:	401a      	ands	r2, r3
    575e:	d001      	beq.n	5764 <__sflush_r+0x30>
    5760:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5762:	e015      	b.n	5790 <__sflush_r+0x5c>
    5764:	1c28      	adds	r0, r5, #0
    5766:	6a21      	ldr	r1, [r4, #32]
    5768:	2301      	movs	r3, #1
    576a:	47b8      	blx	r7
    576c:	1c02      	adds	r2, r0, #0
    576e:	1c41      	adds	r1, r0, #1
    5770:	d10e      	bne.n	5790 <__sflush_r+0x5c>
    5772:	682b      	ldr	r3, [r5, #0]
    5774:	2b00      	cmp	r3, #0
    5776:	d00b      	beq.n	5790 <__sflush_r+0x5c>
    5778:	2b1d      	cmp	r3, #29
    577a:	d001      	beq.n	5780 <__sflush_r+0x4c>
    577c:	2b16      	cmp	r3, #22
    577e:	d102      	bne.n	5786 <__sflush_r+0x52>
    5780:	602e      	str	r6, [r5, #0]
    5782:	2000      	movs	r0, #0
    5784:	e05e      	b.n	5844 <__sflush_r+0x110>
    5786:	89a3      	ldrh	r3, [r4, #12]
    5788:	2140      	movs	r1, #64	; 0x40
    578a:	430b      	orrs	r3, r1
    578c:	81a3      	strh	r3, [r4, #12]
    578e:	e059      	b.n	5844 <__sflush_r+0x110>
    5790:	89a3      	ldrh	r3, [r4, #12]
    5792:	075f      	lsls	r7, r3, #29
    5794:	d506      	bpl.n	57a4 <__sflush_r+0x70>
    5796:	6861      	ldr	r1, [r4, #4]
    5798:	6b63      	ldr	r3, [r4, #52]	; 0x34
    579a:	1a52      	subs	r2, r2, r1
    579c:	2b00      	cmp	r3, #0
    579e:	d001      	beq.n	57a4 <__sflush_r+0x70>
    57a0:	6c27      	ldr	r7, [r4, #64]	; 0x40
    57a2:	1bd2      	subs	r2, r2, r7
    57a4:	1c28      	adds	r0, r5, #0
    57a6:	6a21      	ldr	r1, [r4, #32]
    57a8:	2300      	movs	r3, #0
    57aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    57ac:	47b8      	blx	r7
    57ae:	89a2      	ldrh	r2, [r4, #12]
    57b0:	1c41      	adds	r1, r0, #1
    57b2:	d106      	bne.n	57c2 <__sflush_r+0x8e>
    57b4:	682b      	ldr	r3, [r5, #0]
    57b6:	2b00      	cmp	r3, #0
    57b8:	d003      	beq.n	57c2 <__sflush_r+0x8e>
    57ba:	2b1d      	cmp	r3, #29
    57bc:	d001      	beq.n	57c2 <__sflush_r+0x8e>
    57be:	2b16      	cmp	r3, #22
    57c0:	d119      	bne.n	57f6 <__sflush_r+0xc2>
    57c2:	2300      	movs	r3, #0
    57c4:	6063      	str	r3, [r4, #4]
    57c6:	6923      	ldr	r3, [r4, #16]
    57c8:	6023      	str	r3, [r4, #0]
    57ca:	04d7      	lsls	r7, r2, #19
    57cc:	d505      	bpl.n	57da <__sflush_r+0xa6>
    57ce:	1c41      	adds	r1, r0, #1
    57d0:	d102      	bne.n	57d8 <__sflush_r+0xa4>
    57d2:	682a      	ldr	r2, [r5, #0]
    57d4:	2a00      	cmp	r2, #0
    57d6:	d100      	bne.n	57da <__sflush_r+0xa6>
    57d8:	6560      	str	r0, [r4, #84]	; 0x54
    57da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    57dc:	602e      	str	r6, [r5, #0]
    57de:	2900      	cmp	r1, #0
    57e0:	d0cf      	beq.n	5782 <__sflush_r+0x4e>
    57e2:	1c23      	adds	r3, r4, #0
    57e4:	3344      	adds	r3, #68	; 0x44
    57e6:	4299      	cmp	r1, r3
    57e8:	d002      	beq.n	57f0 <__sflush_r+0xbc>
    57ea:	1c28      	adds	r0, r5, #0
    57ec:	f000 f982 	bl	5af4 <_free_r>
    57f0:	2000      	movs	r0, #0
    57f2:	6360      	str	r0, [r4, #52]	; 0x34
    57f4:	e026      	b.n	5844 <__sflush_r+0x110>
    57f6:	2340      	movs	r3, #64	; 0x40
    57f8:	431a      	orrs	r2, r3
    57fa:	81a2      	strh	r2, [r4, #12]
    57fc:	e022      	b.n	5844 <__sflush_r+0x110>
    57fe:	6926      	ldr	r6, [r4, #16]
    5800:	2e00      	cmp	r6, #0
    5802:	d0be      	beq.n	5782 <__sflush_r+0x4e>
    5804:	6827      	ldr	r7, [r4, #0]
    5806:	2200      	movs	r2, #0
    5808:	1bbf      	subs	r7, r7, r6
    580a:	9701      	str	r7, [sp, #4]
    580c:	6026      	str	r6, [r4, #0]
    580e:	0799      	lsls	r1, r3, #30
    5810:	d100      	bne.n	5814 <__sflush_r+0xe0>
    5812:	6962      	ldr	r2, [r4, #20]
    5814:	60a2      	str	r2, [r4, #8]
    5816:	9f01      	ldr	r7, [sp, #4]
    5818:	2f00      	cmp	r7, #0
    581a:	ddb2      	ble.n	5782 <__sflush_r+0x4e>
    581c:	1c28      	adds	r0, r5, #0
    581e:	6a21      	ldr	r1, [r4, #32]
    5820:	1c32      	adds	r2, r6, #0
    5822:	9b01      	ldr	r3, [sp, #4]
    5824:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    5826:	47b8      	blx	r7
    5828:	2800      	cmp	r0, #0
    582a:	dc06      	bgt.n	583a <__sflush_r+0x106>
    582c:	89a3      	ldrh	r3, [r4, #12]
    582e:	2240      	movs	r2, #64	; 0x40
    5830:	4313      	orrs	r3, r2
    5832:	2001      	movs	r0, #1
    5834:	81a3      	strh	r3, [r4, #12]
    5836:	4240      	negs	r0, r0
    5838:	e004      	b.n	5844 <__sflush_r+0x110>
    583a:	9f01      	ldr	r7, [sp, #4]
    583c:	1836      	adds	r6, r6, r0
    583e:	1a3f      	subs	r7, r7, r0
    5840:	9701      	str	r7, [sp, #4]
    5842:	e7e8      	b.n	5816 <__sflush_r+0xe2>
    5844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005848 <_fflush_r>:
    5848:	690a      	ldr	r2, [r1, #16]
    584a:	b538      	push	{r3, r4, r5, lr}
    584c:	1c05      	adds	r5, r0, #0
    584e:	1c0c      	adds	r4, r1, #0
    5850:	2a00      	cmp	r2, #0
    5852:	d101      	bne.n	5858 <_fflush_r+0x10>
    5854:	2000      	movs	r0, #0
    5856:	e01c      	b.n	5892 <_fflush_r+0x4a>
    5858:	2800      	cmp	r0, #0
    585a:	d004      	beq.n	5866 <_fflush_r+0x1e>
    585c:	6983      	ldr	r3, [r0, #24]
    585e:	2b00      	cmp	r3, #0
    5860:	d101      	bne.n	5866 <_fflush_r+0x1e>
    5862:	f000 f871 	bl	5948 <__sinit>
    5866:	4b0b      	ldr	r3, [pc, #44]	; (5894 <_fflush_r+0x4c>)
    5868:	429c      	cmp	r4, r3
    586a:	d101      	bne.n	5870 <_fflush_r+0x28>
    586c:	686c      	ldr	r4, [r5, #4]
    586e:	e008      	b.n	5882 <_fflush_r+0x3a>
    5870:	4b09      	ldr	r3, [pc, #36]	; (5898 <_fflush_r+0x50>)
    5872:	429c      	cmp	r4, r3
    5874:	d101      	bne.n	587a <_fflush_r+0x32>
    5876:	68ac      	ldr	r4, [r5, #8]
    5878:	e003      	b.n	5882 <_fflush_r+0x3a>
    587a:	4b08      	ldr	r3, [pc, #32]	; (589c <_fflush_r+0x54>)
    587c:	429c      	cmp	r4, r3
    587e:	d100      	bne.n	5882 <_fflush_r+0x3a>
    5880:	68ec      	ldr	r4, [r5, #12]
    5882:	220c      	movs	r2, #12
    5884:	5ea3      	ldrsh	r3, [r4, r2]
    5886:	2b00      	cmp	r3, #0
    5888:	d0e4      	beq.n	5854 <_fflush_r+0xc>
    588a:	1c28      	adds	r0, r5, #0
    588c:	1c21      	adds	r1, r4, #0
    588e:	f7ff ff51 	bl	5734 <__sflush_r>
    5892:	bd38      	pop	{r3, r4, r5, pc}
    5894:	00006040 	.word	0x00006040
    5898:	00006060 	.word	0x00006060
    589c:	00006080 	.word	0x00006080

000058a0 <_cleanup_r>:
    58a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58a2:	1c04      	adds	r4, r0, #0
    58a4:	1c07      	adds	r7, r0, #0
    58a6:	3448      	adds	r4, #72	; 0x48
    58a8:	2c00      	cmp	r4, #0
    58aa:	d012      	beq.n	58d2 <_cleanup_r+0x32>
    58ac:	68a5      	ldr	r5, [r4, #8]
    58ae:	6866      	ldr	r6, [r4, #4]
    58b0:	3e01      	subs	r6, #1
    58b2:	d40c      	bmi.n	58ce <_cleanup_r+0x2e>
    58b4:	89ab      	ldrh	r3, [r5, #12]
    58b6:	2b01      	cmp	r3, #1
    58b8:	d907      	bls.n	58ca <_cleanup_r+0x2a>
    58ba:	220e      	movs	r2, #14
    58bc:	5eab      	ldrsh	r3, [r5, r2]
    58be:	3301      	adds	r3, #1
    58c0:	d003      	beq.n	58ca <_cleanup_r+0x2a>
    58c2:	1c38      	adds	r0, r7, #0
    58c4:	1c29      	adds	r1, r5, #0
    58c6:	f7ff ffbf 	bl	5848 <_fflush_r>
    58ca:	3568      	adds	r5, #104	; 0x68
    58cc:	e7f0      	b.n	58b0 <_cleanup_r+0x10>
    58ce:	6824      	ldr	r4, [r4, #0]
    58d0:	e7ea      	b.n	58a8 <_cleanup_r+0x8>
    58d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000058d4 <std.isra.0>:
    58d4:	2300      	movs	r3, #0
    58d6:	b510      	push	{r4, lr}
    58d8:	1c04      	adds	r4, r0, #0
    58da:	6003      	str	r3, [r0, #0]
    58dc:	6043      	str	r3, [r0, #4]
    58de:	6083      	str	r3, [r0, #8]
    58e0:	8181      	strh	r1, [r0, #12]
    58e2:	6643      	str	r3, [r0, #100]	; 0x64
    58e4:	81c2      	strh	r2, [r0, #14]
    58e6:	6103      	str	r3, [r0, #16]
    58e8:	6143      	str	r3, [r0, #20]
    58ea:	6183      	str	r3, [r0, #24]
    58ec:	1c19      	adds	r1, r3, #0
    58ee:	2208      	movs	r2, #8
    58f0:	305c      	adds	r0, #92	; 0x5c
    58f2:	f7ff faa0 	bl	4e36 <memset>
    58f6:	4b05      	ldr	r3, [pc, #20]	; (590c <std.isra.0+0x38>)
    58f8:	6224      	str	r4, [r4, #32]
    58fa:	6263      	str	r3, [r4, #36]	; 0x24
    58fc:	4b04      	ldr	r3, [pc, #16]	; (5910 <std.isra.0+0x3c>)
    58fe:	62a3      	str	r3, [r4, #40]	; 0x28
    5900:	4b04      	ldr	r3, [pc, #16]	; (5914 <std.isra.0+0x40>)
    5902:	62e3      	str	r3, [r4, #44]	; 0x2c
    5904:	4b04      	ldr	r3, [pc, #16]	; (5918 <std.isra.0+0x44>)
    5906:	6323      	str	r3, [r4, #48]	; 0x30
    5908:	bd10      	pop	{r4, pc}
    590a:	46c0      	nop			; (mov r8, r8)
    590c:	00005c51 	.word	0x00005c51
    5910:	00005c79 	.word	0x00005c79
    5914:	00005cb1 	.word	0x00005cb1
    5918:	00005cdd 	.word	0x00005cdd

0000591c <__sfmoreglue>:
    591c:	b570      	push	{r4, r5, r6, lr}
    591e:	1e4b      	subs	r3, r1, #1
    5920:	2568      	movs	r5, #104	; 0x68
    5922:	435d      	muls	r5, r3
    5924:	1c0e      	adds	r6, r1, #0
    5926:	1c29      	adds	r1, r5, #0
    5928:	3174      	adds	r1, #116	; 0x74
    592a:	f000 f92b 	bl	5b84 <_malloc_r>
    592e:	1e04      	subs	r4, r0, #0
    5930:	d008      	beq.n	5944 <__sfmoreglue+0x28>
    5932:	2100      	movs	r1, #0
    5934:	6001      	str	r1, [r0, #0]
    5936:	6046      	str	r6, [r0, #4]
    5938:	1c2a      	adds	r2, r5, #0
    593a:	300c      	adds	r0, #12
    593c:	60a0      	str	r0, [r4, #8]
    593e:	3268      	adds	r2, #104	; 0x68
    5940:	f7ff fa79 	bl	4e36 <memset>
    5944:	1c20      	adds	r0, r4, #0
    5946:	bd70      	pop	{r4, r5, r6, pc}

00005948 <__sinit>:
    5948:	6983      	ldr	r3, [r0, #24]
    594a:	b513      	push	{r0, r1, r4, lr}
    594c:	1c04      	adds	r4, r0, #0
    594e:	2b00      	cmp	r3, #0
    5950:	d127      	bne.n	59a2 <__sinit+0x5a>
    5952:	6483      	str	r3, [r0, #72]	; 0x48
    5954:	64c3      	str	r3, [r0, #76]	; 0x4c
    5956:	6503      	str	r3, [r0, #80]	; 0x50
    5958:	4b12      	ldr	r3, [pc, #72]	; (59a4 <__sinit+0x5c>)
    595a:	4a13      	ldr	r2, [pc, #76]	; (59a8 <__sinit+0x60>)
    595c:	681b      	ldr	r3, [r3, #0]
    595e:	6282      	str	r2, [r0, #40]	; 0x28
    5960:	4298      	cmp	r0, r3
    5962:	d101      	bne.n	5968 <__sinit+0x20>
    5964:	2301      	movs	r3, #1
    5966:	6183      	str	r3, [r0, #24]
    5968:	1c20      	adds	r0, r4, #0
    596a:	f000 f81f 	bl	59ac <__sfp>
    596e:	6060      	str	r0, [r4, #4]
    5970:	1c20      	adds	r0, r4, #0
    5972:	f000 f81b 	bl	59ac <__sfp>
    5976:	60a0      	str	r0, [r4, #8]
    5978:	1c20      	adds	r0, r4, #0
    597a:	f000 f817 	bl	59ac <__sfp>
    597e:	2104      	movs	r1, #4
    5980:	60e0      	str	r0, [r4, #12]
    5982:	2200      	movs	r2, #0
    5984:	6860      	ldr	r0, [r4, #4]
    5986:	f7ff ffa5 	bl	58d4 <std.isra.0>
    598a:	68a0      	ldr	r0, [r4, #8]
    598c:	2109      	movs	r1, #9
    598e:	2201      	movs	r2, #1
    5990:	f7ff ffa0 	bl	58d4 <std.isra.0>
    5994:	68e0      	ldr	r0, [r4, #12]
    5996:	2112      	movs	r1, #18
    5998:	2202      	movs	r2, #2
    599a:	f7ff ff9b 	bl	58d4 <std.isra.0>
    599e:	2301      	movs	r3, #1
    59a0:	61a3      	str	r3, [r4, #24]
    59a2:	bd13      	pop	{r0, r1, r4, pc}
    59a4:	00006008 	.word	0x00006008
    59a8:	000058a1 	.word	0x000058a1

000059ac <__sfp>:
    59ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59ae:	4b1d      	ldr	r3, [pc, #116]	; (5a24 <__sfp+0x78>)
    59b0:	1c07      	adds	r7, r0, #0
    59b2:	681e      	ldr	r6, [r3, #0]
    59b4:	69b2      	ldr	r2, [r6, #24]
    59b6:	2a00      	cmp	r2, #0
    59b8:	d102      	bne.n	59c0 <__sfp+0x14>
    59ba:	1c30      	adds	r0, r6, #0
    59bc:	f7ff ffc4 	bl	5948 <__sinit>
    59c0:	3648      	adds	r6, #72	; 0x48
    59c2:	68b4      	ldr	r4, [r6, #8]
    59c4:	6873      	ldr	r3, [r6, #4]
    59c6:	3b01      	subs	r3, #1
    59c8:	d405      	bmi.n	59d6 <__sfp+0x2a>
    59ca:	220c      	movs	r2, #12
    59cc:	5ea5      	ldrsh	r5, [r4, r2]
    59ce:	2d00      	cmp	r5, #0
    59d0:	d010      	beq.n	59f4 <__sfp+0x48>
    59d2:	3468      	adds	r4, #104	; 0x68
    59d4:	e7f7      	b.n	59c6 <__sfp+0x1a>
    59d6:	6833      	ldr	r3, [r6, #0]
    59d8:	2b00      	cmp	r3, #0
    59da:	d106      	bne.n	59ea <__sfp+0x3e>
    59dc:	1c38      	adds	r0, r7, #0
    59de:	2104      	movs	r1, #4
    59e0:	f7ff ff9c 	bl	591c <__sfmoreglue>
    59e4:	6030      	str	r0, [r6, #0]
    59e6:	2800      	cmp	r0, #0
    59e8:	d001      	beq.n	59ee <__sfp+0x42>
    59ea:	6836      	ldr	r6, [r6, #0]
    59ec:	e7e9      	b.n	59c2 <__sfp+0x16>
    59ee:	230c      	movs	r3, #12
    59f0:	603b      	str	r3, [r7, #0]
    59f2:	e016      	b.n	5a22 <__sfp+0x76>
    59f4:	2301      	movs	r3, #1
    59f6:	425b      	negs	r3, r3
    59f8:	81e3      	strh	r3, [r4, #14]
    59fa:	1c20      	adds	r0, r4, #0
    59fc:	2301      	movs	r3, #1
    59fe:	81a3      	strh	r3, [r4, #12]
    5a00:	6665      	str	r5, [r4, #100]	; 0x64
    5a02:	6025      	str	r5, [r4, #0]
    5a04:	60a5      	str	r5, [r4, #8]
    5a06:	6065      	str	r5, [r4, #4]
    5a08:	6125      	str	r5, [r4, #16]
    5a0a:	6165      	str	r5, [r4, #20]
    5a0c:	61a5      	str	r5, [r4, #24]
    5a0e:	305c      	adds	r0, #92	; 0x5c
    5a10:	1c29      	adds	r1, r5, #0
    5a12:	2208      	movs	r2, #8
    5a14:	f7ff fa0f 	bl	4e36 <memset>
    5a18:	6365      	str	r5, [r4, #52]	; 0x34
    5a1a:	63a5      	str	r5, [r4, #56]	; 0x38
    5a1c:	64a5      	str	r5, [r4, #72]	; 0x48
    5a1e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5a20:	1c20      	adds	r0, r4, #0
    5a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a24:	00006008 	.word	0x00006008

00005a28 <__smakebuf_r>:
    5a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a2a:	898b      	ldrh	r3, [r1, #12]
    5a2c:	b091      	sub	sp, #68	; 0x44
    5a2e:	1c05      	adds	r5, r0, #0
    5a30:	1c0c      	adds	r4, r1, #0
    5a32:	079a      	lsls	r2, r3, #30
    5a34:	d425      	bmi.n	5a82 <__smakebuf_r+0x5a>
    5a36:	230e      	movs	r3, #14
    5a38:	5ec9      	ldrsh	r1, [r1, r3]
    5a3a:	2900      	cmp	r1, #0
    5a3c:	da06      	bge.n	5a4c <__smakebuf_r+0x24>
    5a3e:	89a7      	ldrh	r7, [r4, #12]
    5a40:	2380      	movs	r3, #128	; 0x80
    5a42:	401f      	ands	r7, r3
    5a44:	d00f      	beq.n	5a66 <__smakebuf_r+0x3e>
    5a46:	2700      	movs	r7, #0
    5a48:	2640      	movs	r6, #64	; 0x40
    5a4a:	e00e      	b.n	5a6a <__smakebuf_r+0x42>
    5a4c:	aa01      	add	r2, sp, #4
    5a4e:	f000 f979 	bl	5d44 <_fstat_r>
    5a52:	2800      	cmp	r0, #0
    5a54:	dbf3      	blt.n	5a3e <__smakebuf_r+0x16>
    5a56:	9b02      	ldr	r3, [sp, #8]
    5a58:	27f0      	movs	r7, #240	; 0xf0
    5a5a:	023f      	lsls	r7, r7, #8
    5a5c:	4a18      	ldr	r2, [pc, #96]	; (5ac0 <__smakebuf_r+0x98>)
    5a5e:	401f      	ands	r7, r3
    5a60:	18bf      	adds	r7, r7, r2
    5a62:	427b      	negs	r3, r7
    5a64:	415f      	adcs	r7, r3
    5a66:	2680      	movs	r6, #128	; 0x80
    5a68:	00f6      	lsls	r6, r6, #3
    5a6a:	1c28      	adds	r0, r5, #0
    5a6c:	1c31      	adds	r1, r6, #0
    5a6e:	f000 f889 	bl	5b84 <_malloc_r>
    5a72:	2800      	cmp	r0, #0
    5a74:	d10c      	bne.n	5a90 <__smakebuf_r+0x68>
    5a76:	89a3      	ldrh	r3, [r4, #12]
    5a78:	059a      	lsls	r2, r3, #22
    5a7a:	d41f      	bmi.n	5abc <__smakebuf_r+0x94>
    5a7c:	2202      	movs	r2, #2
    5a7e:	4313      	orrs	r3, r2
    5a80:	81a3      	strh	r3, [r4, #12]
    5a82:	1c23      	adds	r3, r4, #0
    5a84:	3347      	adds	r3, #71	; 0x47
    5a86:	6023      	str	r3, [r4, #0]
    5a88:	6123      	str	r3, [r4, #16]
    5a8a:	2301      	movs	r3, #1
    5a8c:	6163      	str	r3, [r4, #20]
    5a8e:	e015      	b.n	5abc <__smakebuf_r+0x94>
    5a90:	4b0c      	ldr	r3, [pc, #48]	; (5ac4 <__smakebuf_r+0x9c>)
    5a92:	2280      	movs	r2, #128	; 0x80
    5a94:	62ab      	str	r3, [r5, #40]	; 0x28
    5a96:	89a3      	ldrh	r3, [r4, #12]
    5a98:	6020      	str	r0, [r4, #0]
    5a9a:	4313      	orrs	r3, r2
    5a9c:	81a3      	strh	r3, [r4, #12]
    5a9e:	6120      	str	r0, [r4, #16]
    5aa0:	6166      	str	r6, [r4, #20]
    5aa2:	2f00      	cmp	r7, #0
    5aa4:	d00a      	beq.n	5abc <__smakebuf_r+0x94>
    5aa6:	230e      	movs	r3, #14
    5aa8:	5ee1      	ldrsh	r1, [r4, r3]
    5aaa:	1c28      	adds	r0, r5, #0
    5aac:	f000 f95c 	bl	5d68 <_isatty_r>
    5ab0:	2800      	cmp	r0, #0
    5ab2:	d003      	beq.n	5abc <__smakebuf_r+0x94>
    5ab4:	89a3      	ldrh	r3, [r4, #12]
    5ab6:	2201      	movs	r2, #1
    5ab8:	4313      	orrs	r3, r2
    5aba:	81a3      	strh	r3, [r4, #12]
    5abc:	b011      	add	sp, #68	; 0x44
    5abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ac0:	ffffe000 	.word	0xffffe000
    5ac4:	000058a1 	.word	0x000058a1

00005ac8 <malloc>:
    5ac8:	b508      	push	{r3, lr}
    5aca:	4b03      	ldr	r3, [pc, #12]	; (5ad8 <malloc+0x10>)
    5acc:	1c01      	adds	r1, r0, #0
    5ace:	6818      	ldr	r0, [r3, #0]
    5ad0:	f000 f858 	bl	5b84 <_malloc_r>
    5ad4:	bd08      	pop	{r3, pc}
    5ad6:	46c0      	nop			; (mov r8, r8)
    5ad8:	20000084 	.word	0x20000084

00005adc <memchr>:
    5adc:	b2c9      	uxtb	r1, r1
    5ade:	1882      	adds	r2, r0, r2
    5ae0:	4290      	cmp	r0, r2
    5ae2:	d004      	beq.n	5aee <memchr+0x12>
    5ae4:	7803      	ldrb	r3, [r0, #0]
    5ae6:	428b      	cmp	r3, r1
    5ae8:	d002      	beq.n	5af0 <memchr+0x14>
    5aea:	3001      	adds	r0, #1
    5aec:	e7f8      	b.n	5ae0 <memchr+0x4>
    5aee:	2000      	movs	r0, #0
    5af0:	4770      	bx	lr
	...

00005af4 <_free_r>:
    5af4:	b530      	push	{r4, r5, lr}
    5af6:	2900      	cmp	r1, #0
    5af8:	d040      	beq.n	5b7c <_free_r+0x88>
    5afa:	3904      	subs	r1, #4
    5afc:	680b      	ldr	r3, [r1, #0]
    5afe:	2b00      	cmp	r3, #0
    5b00:	da00      	bge.n	5b04 <_free_r+0x10>
    5b02:	18c9      	adds	r1, r1, r3
    5b04:	4a1e      	ldr	r2, [pc, #120]	; (5b80 <_free_r+0x8c>)
    5b06:	6813      	ldr	r3, [r2, #0]
    5b08:	1c14      	adds	r4, r2, #0
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	d102      	bne.n	5b14 <_free_r+0x20>
    5b0e:	604b      	str	r3, [r1, #4]
    5b10:	6011      	str	r1, [r2, #0]
    5b12:	e033      	b.n	5b7c <_free_r+0x88>
    5b14:	4299      	cmp	r1, r3
    5b16:	d20f      	bcs.n	5b38 <_free_r+0x44>
    5b18:	6808      	ldr	r0, [r1, #0]
    5b1a:	180a      	adds	r2, r1, r0
    5b1c:	429a      	cmp	r2, r3
    5b1e:	d105      	bne.n	5b2c <_free_r+0x38>
    5b20:	6813      	ldr	r3, [r2, #0]
    5b22:	6852      	ldr	r2, [r2, #4]
    5b24:	18c0      	adds	r0, r0, r3
    5b26:	6008      	str	r0, [r1, #0]
    5b28:	604a      	str	r2, [r1, #4]
    5b2a:	e000      	b.n	5b2e <_free_r+0x3a>
    5b2c:	604b      	str	r3, [r1, #4]
    5b2e:	6021      	str	r1, [r4, #0]
    5b30:	e024      	b.n	5b7c <_free_r+0x88>
    5b32:	428a      	cmp	r2, r1
    5b34:	d803      	bhi.n	5b3e <_free_r+0x4a>
    5b36:	1c13      	adds	r3, r2, #0
    5b38:	685a      	ldr	r2, [r3, #4]
    5b3a:	2a00      	cmp	r2, #0
    5b3c:	d1f9      	bne.n	5b32 <_free_r+0x3e>
    5b3e:	681d      	ldr	r5, [r3, #0]
    5b40:	195c      	adds	r4, r3, r5
    5b42:	428c      	cmp	r4, r1
    5b44:	d10b      	bne.n	5b5e <_free_r+0x6a>
    5b46:	6809      	ldr	r1, [r1, #0]
    5b48:	1869      	adds	r1, r5, r1
    5b4a:	1858      	adds	r0, r3, r1
    5b4c:	6019      	str	r1, [r3, #0]
    5b4e:	4290      	cmp	r0, r2
    5b50:	d114      	bne.n	5b7c <_free_r+0x88>
    5b52:	6814      	ldr	r4, [r2, #0]
    5b54:	6852      	ldr	r2, [r2, #4]
    5b56:	1909      	adds	r1, r1, r4
    5b58:	6019      	str	r1, [r3, #0]
    5b5a:	605a      	str	r2, [r3, #4]
    5b5c:	e00e      	b.n	5b7c <_free_r+0x88>
    5b5e:	428c      	cmp	r4, r1
    5b60:	d902      	bls.n	5b68 <_free_r+0x74>
    5b62:	230c      	movs	r3, #12
    5b64:	6003      	str	r3, [r0, #0]
    5b66:	e009      	b.n	5b7c <_free_r+0x88>
    5b68:	6808      	ldr	r0, [r1, #0]
    5b6a:	180c      	adds	r4, r1, r0
    5b6c:	4294      	cmp	r4, r2
    5b6e:	d103      	bne.n	5b78 <_free_r+0x84>
    5b70:	6814      	ldr	r4, [r2, #0]
    5b72:	6852      	ldr	r2, [r2, #4]
    5b74:	1900      	adds	r0, r0, r4
    5b76:	6008      	str	r0, [r1, #0]
    5b78:	604a      	str	r2, [r1, #4]
    5b7a:	6059      	str	r1, [r3, #4]
    5b7c:	bd30      	pop	{r4, r5, pc}
    5b7e:	46c0      	nop			; (mov r8, r8)
    5b80:	20000c4c 	.word	0x20000c4c

00005b84 <_malloc_r>:
    5b84:	b570      	push	{r4, r5, r6, lr}
    5b86:	2303      	movs	r3, #3
    5b88:	1ccd      	adds	r5, r1, #3
    5b8a:	439d      	bics	r5, r3
    5b8c:	3508      	adds	r5, #8
    5b8e:	1c06      	adds	r6, r0, #0
    5b90:	2d0c      	cmp	r5, #12
    5b92:	d201      	bcs.n	5b98 <_malloc_r+0x14>
    5b94:	250c      	movs	r5, #12
    5b96:	e001      	b.n	5b9c <_malloc_r+0x18>
    5b98:	2d00      	cmp	r5, #0
    5b9a:	db3f      	blt.n	5c1c <_malloc_r+0x98>
    5b9c:	428d      	cmp	r5, r1
    5b9e:	d33d      	bcc.n	5c1c <_malloc_r+0x98>
    5ba0:	4b20      	ldr	r3, [pc, #128]	; (5c24 <_malloc_r+0xa0>)
    5ba2:	681c      	ldr	r4, [r3, #0]
    5ba4:	1c1a      	adds	r2, r3, #0
    5ba6:	1c21      	adds	r1, r4, #0
    5ba8:	2900      	cmp	r1, #0
    5baa:	d013      	beq.n	5bd4 <_malloc_r+0x50>
    5bac:	6808      	ldr	r0, [r1, #0]
    5bae:	1b43      	subs	r3, r0, r5
    5bb0:	d40d      	bmi.n	5bce <_malloc_r+0x4a>
    5bb2:	2b0b      	cmp	r3, #11
    5bb4:	d902      	bls.n	5bbc <_malloc_r+0x38>
    5bb6:	600b      	str	r3, [r1, #0]
    5bb8:	18cc      	adds	r4, r1, r3
    5bba:	e01e      	b.n	5bfa <_malloc_r+0x76>
    5bbc:	428c      	cmp	r4, r1
    5bbe:	d102      	bne.n	5bc6 <_malloc_r+0x42>
    5bc0:	6863      	ldr	r3, [r4, #4]
    5bc2:	6013      	str	r3, [r2, #0]
    5bc4:	e01a      	b.n	5bfc <_malloc_r+0x78>
    5bc6:	6848      	ldr	r0, [r1, #4]
    5bc8:	6060      	str	r0, [r4, #4]
    5bca:	1c0c      	adds	r4, r1, #0
    5bcc:	e016      	b.n	5bfc <_malloc_r+0x78>
    5bce:	1c0c      	adds	r4, r1, #0
    5bd0:	6849      	ldr	r1, [r1, #4]
    5bd2:	e7e9      	b.n	5ba8 <_malloc_r+0x24>
    5bd4:	4c14      	ldr	r4, [pc, #80]	; (5c28 <_malloc_r+0xa4>)
    5bd6:	6820      	ldr	r0, [r4, #0]
    5bd8:	2800      	cmp	r0, #0
    5bda:	d103      	bne.n	5be4 <_malloc_r+0x60>
    5bdc:	1c30      	adds	r0, r6, #0
    5bde:	f000 f825 	bl	5c2c <_sbrk_r>
    5be2:	6020      	str	r0, [r4, #0]
    5be4:	1c30      	adds	r0, r6, #0
    5be6:	1c29      	adds	r1, r5, #0
    5be8:	f000 f820 	bl	5c2c <_sbrk_r>
    5bec:	1c43      	adds	r3, r0, #1
    5bee:	d015      	beq.n	5c1c <_malloc_r+0x98>
    5bf0:	1cc4      	adds	r4, r0, #3
    5bf2:	2303      	movs	r3, #3
    5bf4:	439c      	bics	r4, r3
    5bf6:	4284      	cmp	r4, r0
    5bf8:	d10a      	bne.n	5c10 <_malloc_r+0x8c>
    5bfa:	6025      	str	r5, [r4, #0]
    5bfc:	1c20      	adds	r0, r4, #0
    5bfe:	300b      	adds	r0, #11
    5c00:	2207      	movs	r2, #7
    5c02:	1d23      	adds	r3, r4, #4
    5c04:	4390      	bics	r0, r2
    5c06:	1ac3      	subs	r3, r0, r3
    5c08:	d00b      	beq.n	5c22 <_malloc_r+0x9e>
    5c0a:	425a      	negs	r2, r3
    5c0c:	50e2      	str	r2, [r4, r3]
    5c0e:	e008      	b.n	5c22 <_malloc_r+0x9e>
    5c10:	1a21      	subs	r1, r4, r0
    5c12:	1c30      	adds	r0, r6, #0
    5c14:	f000 f80a 	bl	5c2c <_sbrk_r>
    5c18:	3001      	adds	r0, #1
    5c1a:	d1ee      	bne.n	5bfa <_malloc_r+0x76>
    5c1c:	230c      	movs	r3, #12
    5c1e:	6033      	str	r3, [r6, #0]
    5c20:	2000      	movs	r0, #0
    5c22:	bd70      	pop	{r4, r5, r6, pc}
    5c24:	20000c4c 	.word	0x20000c4c
    5c28:	20000c48 	.word	0x20000c48

00005c2c <_sbrk_r>:
    5c2c:	b538      	push	{r3, r4, r5, lr}
    5c2e:	4c07      	ldr	r4, [pc, #28]	; (5c4c <_sbrk_r+0x20>)
    5c30:	2300      	movs	r3, #0
    5c32:	1c05      	adds	r5, r0, #0
    5c34:	1c08      	adds	r0, r1, #0
    5c36:	6023      	str	r3, [r4, #0]
    5c38:	f7fe fc8c 	bl	4554 <_sbrk>
    5c3c:	1c43      	adds	r3, r0, #1
    5c3e:	d103      	bne.n	5c48 <_sbrk_r+0x1c>
    5c40:	6823      	ldr	r3, [r4, #0]
    5c42:	2b00      	cmp	r3, #0
    5c44:	d000      	beq.n	5c48 <_sbrk_r+0x1c>
    5c46:	602b      	str	r3, [r5, #0]
    5c48:	bd38      	pop	{r3, r4, r5, pc}
    5c4a:	46c0      	nop			; (mov r8, r8)
    5c4c:	200010a0 	.word	0x200010a0

00005c50 <__sread>:
    5c50:	b538      	push	{r3, r4, r5, lr}
    5c52:	1c0c      	adds	r4, r1, #0
    5c54:	250e      	movs	r5, #14
    5c56:	5f49      	ldrsh	r1, [r1, r5]
    5c58:	f000 f8ac 	bl	5db4 <_read_r>
    5c5c:	2800      	cmp	r0, #0
    5c5e:	db03      	blt.n	5c68 <__sread+0x18>
    5c60:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5c62:	1813      	adds	r3, r2, r0
    5c64:	6563      	str	r3, [r4, #84]	; 0x54
    5c66:	e003      	b.n	5c70 <__sread+0x20>
    5c68:	89a2      	ldrh	r2, [r4, #12]
    5c6a:	4b02      	ldr	r3, [pc, #8]	; (5c74 <__sread+0x24>)
    5c6c:	4013      	ands	r3, r2
    5c6e:	81a3      	strh	r3, [r4, #12]
    5c70:	bd38      	pop	{r3, r4, r5, pc}
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	ffffefff 	.word	0xffffefff

00005c78 <__swrite>:
    5c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c7a:	1c1e      	adds	r6, r3, #0
    5c7c:	898b      	ldrh	r3, [r1, #12]
    5c7e:	1c05      	adds	r5, r0, #0
    5c80:	1c0c      	adds	r4, r1, #0
    5c82:	1c17      	adds	r7, r2, #0
    5c84:	05da      	lsls	r2, r3, #23
    5c86:	d505      	bpl.n	5c94 <__swrite+0x1c>
    5c88:	230e      	movs	r3, #14
    5c8a:	5ec9      	ldrsh	r1, [r1, r3]
    5c8c:	2200      	movs	r2, #0
    5c8e:	2302      	movs	r3, #2
    5c90:	f000 f87c 	bl	5d8c <_lseek_r>
    5c94:	89a2      	ldrh	r2, [r4, #12]
    5c96:	4b05      	ldr	r3, [pc, #20]	; (5cac <__swrite+0x34>)
    5c98:	1c28      	adds	r0, r5, #0
    5c9a:	4013      	ands	r3, r2
    5c9c:	81a3      	strh	r3, [r4, #12]
    5c9e:	220e      	movs	r2, #14
    5ca0:	5ea1      	ldrsh	r1, [r4, r2]
    5ca2:	1c33      	adds	r3, r6, #0
    5ca4:	1c3a      	adds	r2, r7, #0
    5ca6:	f000 f827 	bl	5cf8 <_write_r>
    5caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cac:	ffffefff 	.word	0xffffefff

00005cb0 <__sseek>:
    5cb0:	b538      	push	{r3, r4, r5, lr}
    5cb2:	1c0c      	adds	r4, r1, #0
    5cb4:	250e      	movs	r5, #14
    5cb6:	5f49      	ldrsh	r1, [r1, r5]
    5cb8:	f000 f868 	bl	5d8c <_lseek_r>
    5cbc:	89a3      	ldrh	r3, [r4, #12]
    5cbe:	1c42      	adds	r2, r0, #1
    5cc0:	d103      	bne.n	5cca <__sseek+0x1a>
    5cc2:	4a05      	ldr	r2, [pc, #20]	; (5cd8 <__sseek+0x28>)
    5cc4:	4013      	ands	r3, r2
    5cc6:	81a3      	strh	r3, [r4, #12]
    5cc8:	e004      	b.n	5cd4 <__sseek+0x24>
    5cca:	2280      	movs	r2, #128	; 0x80
    5ccc:	0152      	lsls	r2, r2, #5
    5cce:	4313      	orrs	r3, r2
    5cd0:	81a3      	strh	r3, [r4, #12]
    5cd2:	6560      	str	r0, [r4, #84]	; 0x54
    5cd4:	bd38      	pop	{r3, r4, r5, pc}
    5cd6:	46c0      	nop			; (mov r8, r8)
    5cd8:	ffffefff 	.word	0xffffefff

00005cdc <__sclose>:
    5cdc:	b508      	push	{r3, lr}
    5cde:	230e      	movs	r3, #14
    5ce0:	5ec9      	ldrsh	r1, [r1, r3]
    5ce2:	f000 f81d 	bl	5d20 <_close_r>
    5ce6:	bd08      	pop	{r3, pc}

00005ce8 <strlen>:
    5ce8:	2300      	movs	r3, #0
    5cea:	5cc2      	ldrb	r2, [r0, r3]
    5cec:	3301      	adds	r3, #1
    5cee:	2a00      	cmp	r2, #0
    5cf0:	d1fb      	bne.n	5cea <strlen+0x2>
    5cf2:	1e58      	subs	r0, r3, #1
    5cf4:	4770      	bx	lr
	...

00005cf8 <_write_r>:
    5cf8:	b538      	push	{r3, r4, r5, lr}
    5cfa:	4c08      	ldr	r4, [pc, #32]	; (5d1c <_write_r+0x24>)
    5cfc:	1c05      	adds	r5, r0, #0
    5cfe:	2000      	movs	r0, #0
    5d00:	6020      	str	r0, [r4, #0]
    5d02:	1c08      	adds	r0, r1, #0
    5d04:	1c11      	adds	r1, r2, #0
    5d06:	1c1a      	adds	r2, r3, #0
    5d08:	f7fb fbac 	bl	1464 <_write>
    5d0c:	1c43      	adds	r3, r0, #1
    5d0e:	d103      	bne.n	5d18 <_write_r+0x20>
    5d10:	6823      	ldr	r3, [r4, #0]
    5d12:	2b00      	cmp	r3, #0
    5d14:	d000      	beq.n	5d18 <_write_r+0x20>
    5d16:	602b      	str	r3, [r5, #0]
    5d18:	bd38      	pop	{r3, r4, r5, pc}
    5d1a:	46c0      	nop			; (mov r8, r8)
    5d1c:	200010a0 	.word	0x200010a0

00005d20 <_close_r>:
    5d20:	b538      	push	{r3, r4, r5, lr}
    5d22:	4c07      	ldr	r4, [pc, #28]	; (5d40 <_close_r+0x20>)
    5d24:	2300      	movs	r3, #0
    5d26:	1c05      	adds	r5, r0, #0
    5d28:	1c08      	adds	r0, r1, #0
    5d2a:	6023      	str	r3, [r4, #0]
    5d2c:	f7fe fc24 	bl	4578 <_close>
    5d30:	1c43      	adds	r3, r0, #1
    5d32:	d103      	bne.n	5d3c <_close_r+0x1c>
    5d34:	6823      	ldr	r3, [r4, #0]
    5d36:	2b00      	cmp	r3, #0
    5d38:	d000      	beq.n	5d3c <_close_r+0x1c>
    5d3a:	602b      	str	r3, [r5, #0]
    5d3c:	bd38      	pop	{r3, r4, r5, pc}
    5d3e:	46c0      	nop			; (mov r8, r8)
    5d40:	200010a0 	.word	0x200010a0

00005d44 <_fstat_r>:
    5d44:	b538      	push	{r3, r4, r5, lr}
    5d46:	4c07      	ldr	r4, [pc, #28]	; (5d64 <_fstat_r+0x20>)
    5d48:	2300      	movs	r3, #0
    5d4a:	1c05      	adds	r5, r0, #0
    5d4c:	1c08      	adds	r0, r1, #0
    5d4e:	1c11      	adds	r1, r2, #0
    5d50:	6023      	str	r3, [r4, #0]
    5d52:	f7fe fc15 	bl	4580 <_fstat>
    5d56:	1c43      	adds	r3, r0, #1
    5d58:	d103      	bne.n	5d62 <_fstat_r+0x1e>
    5d5a:	6823      	ldr	r3, [r4, #0]
    5d5c:	2b00      	cmp	r3, #0
    5d5e:	d000      	beq.n	5d62 <_fstat_r+0x1e>
    5d60:	602b      	str	r3, [r5, #0]
    5d62:	bd38      	pop	{r3, r4, r5, pc}
    5d64:	200010a0 	.word	0x200010a0

00005d68 <_isatty_r>:
    5d68:	b538      	push	{r3, r4, r5, lr}
    5d6a:	4c07      	ldr	r4, [pc, #28]	; (5d88 <_isatty_r+0x20>)
    5d6c:	2300      	movs	r3, #0
    5d6e:	1c05      	adds	r5, r0, #0
    5d70:	1c08      	adds	r0, r1, #0
    5d72:	6023      	str	r3, [r4, #0]
    5d74:	f7fe fc0a 	bl	458c <_isatty>
    5d78:	1c43      	adds	r3, r0, #1
    5d7a:	d103      	bne.n	5d84 <_isatty_r+0x1c>
    5d7c:	6823      	ldr	r3, [r4, #0]
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d000      	beq.n	5d84 <_isatty_r+0x1c>
    5d82:	602b      	str	r3, [r5, #0]
    5d84:	bd38      	pop	{r3, r4, r5, pc}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	200010a0 	.word	0x200010a0

00005d8c <_lseek_r>:
    5d8c:	b538      	push	{r3, r4, r5, lr}
    5d8e:	4c08      	ldr	r4, [pc, #32]	; (5db0 <_lseek_r+0x24>)
    5d90:	1c05      	adds	r5, r0, #0
    5d92:	2000      	movs	r0, #0
    5d94:	6020      	str	r0, [r4, #0]
    5d96:	1c08      	adds	r0, r1, #0
    5d98:	1c11      	adds	r1, r2, #0
    5d9a:	1c1a      	adds	r2, r3, #0
    5d9c:	f7fe fbf8 	bl	4590 <_lseek>
    5da0:	1c43      	adds	r3, r0, #1
    5da2:	d103      	bne.n	5dac <_lseek_r+0x20>
    5da4:	6823      	ldr	r3, [r4, #0]
    5da6:	2b00      	cmp	r3, #0
    5da8:	d000      	beq.n	5dac <_lseek_r+0x20>
    5daa:	602b      	str	r3, [r5, #0]
    5dac:	bd38      	pop	{r3, r4, r5, pc}
    5dae:	46c0      	nop			; (mov r8, r8)
    5db0:	200010a0 	.word	0x200010a0

00005db4 <_read_r>:
    5db4:	b538      	push	{r3, r4, r5, lr}
    5db6:	4c08      	ldr	r4, [pc, #32]	; (5dd8 <_read_r+0x24>)
    5db8:	1c05      	adds	r5, r0, #0
    5dba:	2000      	movs	r0, #0
    5dbc:	6020      	str	r0, [r4, #0]
    5dbe:	1c08      	adds	r0, r1, #0
    5dc0:	1c11      	adds	r1, r2, #0
    5dc2:	1c1a      	adds	r2, r3, #0
    5dc4:	f7fb fb2c 	bl	1420 <_read>
    5dc8:	1c43      	adds	r3, r0, #1
    5dca:	d103      	bne.n	5dd4 <_read_r+0x20>
    5dcc:	6823      	ldr	r3, [r4, #0]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	d000      	beq.n	5dd4 <_read_r+0x20>
    5dd2:	602b      	str	r3, [r5, #0]
    5dd4:	bd38      	pop	{r3, r4, r5, pc}
    5dd6:	46c0      	nop			; (mov r8, r8)
    5dd8:	200010a0 	.word	0x200010a0
    5ddc:	00000306 	.word	0x00000306
    5de0:	0000054c 	.word	0x0000054c
    5de4:	0000054c 	.word	0x0000054c
    5de8:	0000054c 	.word	0x0000054c
    5dec:	0000054c 	.word	0x0000054c
    5df0:	0000054c 	.word	0x0000054c
    5df4:	0000054c 	.word	0x0000054c
    5df8:	0000054c 	.word	0x0000054c
    5dfc:	0000054c 	.word	0x0000054c
    5e00:	0000054c 	.word	0x0000054c
    5e04:	0000054c 	.word	0x0000054c
    5e08:	0000054c 	.word	0x0000054c
    5e0c:	0000054c 	.word	0x0000054c
    5e10:	0000054c 	.word	0x0000054c
    5e14:	0000054c 	.word	0x0000054c
    5e18:	0000054c 	.word	0x0000054c
    5e1c:	000002ee 	.word	0x000002ee
    5e20:	0000054c 	.word	0x0000054c
    5e24:	0000054c 	.word	0x0000054c
    5e28:	0000054c 	.word	0x0000054c
    5e2c:	0000054c 	.word	0x0000054c
    5e30:	0000054c 	.word	0x0000054c
    5e34:	0000054c 	.word	0x0000054c
    5e38:	0000054c 	.word	0x0000054c
    5e3c:	0000054c 	.word	0x0000054c
    5e40:	0000054c 	.word	0x0000054c
    5e44:	0000054c 	.word	0x0000054c
    5e48:	0000054c 	.word	0x0000054c
    5e4c:	0000054c 	.word	0x0000054c
    5e50:	0000054c 	.word	0x0000054c
    5e54:	0000054c 	.word	0x0000054c
    5e58:	0000054c 	.word	0x0000054c
    5e5c:	000002fe 	.word	0x000002fe
    5e60:	0000054c 	.word	0x0000054c
    5e64:	0000054c 	.word	0x0000054c
    5e68:	0000054c 	.word	0x0000054c
    5e6c:	0000054c 	.word	0x0000054c
    5e70:	0000054c 	.word	0x0000054c
    5e74:	0000054c 	.word	0x0000054c
    5e78:	0000054c 	.word	0x0000054c
    5e7c:	0000054c 	.word	0x0000054c
    5e80:	0000054c 	.word	0x0000054c
    5e84:	0000054c 	.word	0x0000054c
    5e88:	0000054c 	.word	0x0000054c
    5e8c:	0000054c 	.word	0x0000054c
    5e90:	0000054c 	.word	0x0000054c
    5e94:	0000054c 	.word	0x0000054c
    5e98:	0000054c 	.word	0x0000054c
    5e9c:	000002f6 	.word	0x000002f6
    5ea0:	000002d6 	.word	0x000002d6
    5ea4:	0000030e 	.word	0x0000030e
    5ea8:	000002e6 	.word	0x000002e6
    5eac:	000002de 	.word	0x000002de
    5eb0:	0000ffff 	.word	0x0000ffff
    5eb4:	0000ffff 	.word	0x0000ffff
    5eb8:	0000ffff 	.word	0x0000ffff
    5ebc:	0000ffff 	.word	0x0000ffff
    5ec0:	00000004 	.word	0x00000004
    5ec4:	00000005 	.word	0x00000005
    5ec8:	00000006 	.word	0x00000006
    5ecc:	00000007 	.word	0x00000007
    5ed0:	0000ffff 	.word	0x0000ffff
    5ed4:	0000ffff 	.word	0x0000ffff
    5ed8:	00000022 	.word	0x00000022
    5edc:	00000023 	.word	0x00000023
    5ee0:	0000ffff 	.word	0x0000ffff
    5ee4:	0000ffff 	.word	0x0000ffff
    5ee8:	0000ffff 	.word	0x0000ffff
    5eec:	0000ffff 	.word	0x0000ffff
    5ef0:	00000008 	.word	0x00000008
    5ef4:	00000009 	.word	0x00000009
    5ef8:	0000ffff 	.word	0x0000ffff
    5efc:	0000ffff 	.word	0x0000ffff
    5f00:	42000800 	.word	0x42000800
    5f04:	42000c00 	.word	0x42000c00
    5f08:	42001000 	.word	0x42001000
    5f0c:	42001400 	.word	0x42001400
    5f10:	42001800 	.word	0x42001800
    5f14:	42001c00 	.word	0x42001c00
    5f18:	42002c00 	.word	0x42002c00
    5f1c:	42003000 	.word	0x42003000
    5f20:	42003400 	.word	0x42003400
    5f24:	001c1c1b 	.word	0x001c1c1b
    5f28:	10000800 	.word	0x10000800
    5f2c:	00002000 	.word	0x00002000
    5f30:	0c0b0a09 	.word	0x0c0b0a09
    5f34:	00000e0d 	.word	0x00000e0d
    5f38:	00002884 	.word	0x00002884
    5f3c:	000029fc 	.word	0x000029fc
    5f40:	00002a06 	.word	0x00002a06
    5f44:	00002ba2 	.word	0x00002ba2
    5f48:	00002baa 	.word	0x00002baa
    5f4c:	00003186 	.word	0x00003186
    5f50:	00003244 	.word	0x00003244
    5f54:	00003190 	.word	0x00003190
    5f58:	000031b0 	.word	0x000031b0
    5f5c:	00003244 	.word	0x00003244
    5f60:	000031d2 	.word	0x000031d2
    5f64:	00003244 	.word	0x00003244
    5f68:	00003214 	.word	0x00003214

00005f6c <tc_interrupt_vectors.11766>:
    5f6c:	00141312 00003f60 00003fbc 00003fbc     ....`?...?...?..
    5f7c:	00003f5a 00003f5a 00003f76 00003f66     Z?..Z?..v?..f?..
    5f8c:	00003f7c 00003faa 00004044 000040a4     |?...?..D@...@..
    5f9c:	000040a4 00004024 00004036 00004052     .@..$@..6@..R@..
    5fac:	00004028 00004060 00004094 74616568     (@..`@...@..heat
    5fbc:	00000000 6c6f6f63 00000000 74736554     ....cool....Test
    5fcc:	75636553 79746972 3079654b 00000000     SecurityKey0....
    5fdc:	65646f4d 2073253a 3a6d5220 54643225     Mode:%s  Rm:%2dT
    5fec:	65677261 32253a74 20632564 25643225     arget:%2d%c %2d%
    5ffc:	63252063 00000000 00000043              c %c....C...

00006008 <_global_impure_ptr>:
    6008:	20000024 2b302d23 6c680020 6665004c     $.. #-0+ .hlL.ef
    6018:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    6028:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    6038:	64636261 00006665                       abcdef..

00006040 <__sf_fake_stdin>:
	...

00006060 <__sf_fake_stdout>:
	...

00006080 <__sf_fake_stderr>:
	...

000060a0 <_init>:
    60a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60a2:	46c0      	nop			; (mov r8, r8)
    60a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    60a6:	bc08      	pop	{r3}
    60a8:	469e      	mov	lr, r3
    60aa:	4770      	bx	lr

000060ac <__init_array_start>:
    60ac:	000000dd 	.word	0x000000dd

000060b0 <_fini>:
    60b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60b2:	46c0      	nop			; (mov r8, r8)
    60b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    60b6:	bc08      	pop	{r3}
    60b8:	469e      	mov	lr, r3
    60ba:	4770      	bx	lr

000060bc <__fini_array_start>:
    60bc:	000000b5 	.word	0x000000b5
