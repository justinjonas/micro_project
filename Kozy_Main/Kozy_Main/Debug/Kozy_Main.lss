
Kozy_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059a0  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  000059a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b3c  20000078  00005a18  00010078  2**2
                  ALLOC
  3 .stack        00002004  20000bb4  00006554  00010078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   000370d2  00000000  00000000  0001012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006506  00000000  00000000  00047200  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d2fa  00000000  00000000  0004d706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bc8  00000000  00000000  0005aa00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001328  00000000  00000000  0005b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000d2fb  00000000  00000000  0005c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001aae9  00000000  00000000  00069beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00086182  00000000  00000000  000846d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002378  00000000  00000000  0010a858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002bb8 	.word	0x20002bb8
       4:	0000427d 	.word	0x0000427d
       8:	00004279 	.word	0x00004279
       c:	00004279 	.word	0x00004279
	...
      2c:	00004279 	.word	0x00004279
	...
      38:	00004279 	.word	0x00004279
      3c:	00004279 	.word	0x00004279
      40:	00004279 	.word	0x00004279
      44:	00004279 	.word	0x00004279
      48:	00004279 	.word	0x00004279
      4c:	00004279 	.word	0x00004279
      50:	000016c5 	.word	0x000016c5
      54:	00004279 	.word	0x00004279
      58:	00004279 	.word	0x00004279
      5c:	00004279 	.word	0x00004279
      60:	00004279 	.word	0x00004279
      64:	000015f5 	.word	0x000015f5
      68:	00001605 	.word	0x00001605
      6c:	00001615 	.word	0x00001615
      70:	00001625 	.word	0x00001625
      74:	00001635 	.word	0x00001635
      78:	00001645 	.word	0x00001645
      7c:	00004279 	.word	0x00004279
      80:	00004279 	.word	0x00004279
      84:	00004279 	.word	0x00004279
      88:	00000c49 	.word	0x00000c49
      8c:	00000c59 	.word	0x00000c59
      90:	00000c69 	.word	0x00000c69
	...
      9c:	00000115 	.word	0x00000115
      a0:	00004279 	.word	0x00004279
      a4:	00000000 	.word	0x00000000
      a8:	00004279 	.word	0x00004279
      ac:	00004279 	.word	0x00004279
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	000059a0 	.word	0x000059a0

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	000059a0 	.word	0x000059a0
     108:	2000007c 	.word	0x2000007c
     10c:	000059a0 	.word	0x000059a0
     110:	00000000 	.word	0x00000000

00000114 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     114:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     116:	4b2d      	ldr	r3, [pc, #180]	; (1cc <ADC_Handler+0xb8>)
     118:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     11a:	6823      	ldr	r3, [r4, #0]
     11c:	7e1d      	ldrb	r5, [r3, #24]
     11e:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     120:	07e9      	lsls	r1, r5, #31
     122:	d535      	bpl.n	190 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     124:	7ee2      	ldrb	r2, [r4, #27]
     126:	07d1      	lsls	r1, r2, #31
     128:	d532      	bpl.n	190 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     12a:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     12c:	07d1      	lsls	r1, r2, #31
     12e:	d52f      	bpl.n	190 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     130:	2201      	movs	r2, #1
     132:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     134:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     136:	7e53      	ldrb	r3, [r2, #25]

			while (adc_is_syncing(module)) {
     138:	b25b      	sxtb	r3, r3
     13a:	2b00      	cmp	r3, #0
     13c:	dbfb      	blt.n	136 <ADC_Handler+0x22>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     13e:	6963      	ldr	r3, [r4, #20]
     140:	1c99      	adds	r1, r3, #2
     142:	6161      	str	r1, [r4, #20]
     144:	8b52      	ldrh	r2, [r2, #26]
     146:	b292      	uxth	r2, r2
     148:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     14a:	8b23      	ldrh	r3, [r4, #24]
     14c:	3b01      	subs	r3, #1
     14e:	b29b      	uxth	r3, r3
     150:	8323      	strh	r3, [r4, #24]
     152:	2b00      	cmp	r3, #0
     154:	d011      	beq.n	17a <ADC_Handler+0x66>
				if (module->software_trigger == true) {
     156:	7f63      	ldrb	r3, [r4, #29]
     158:	2b00      	cmp	r3, #0
     15a:	d019      	beq.n	190 <ADC_Handler+0x7c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     15c:	6823      	ldr	r3, [r4, #0]
     15e:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
     160:	b252      	sxtb	r2, r2
     162:	2a00      	cmp	r2, #0
     164:	dbfb      	blt.n	15e <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     166:	7b19      	ldrb	r1, [r3, #12]
     168:	2202      	movs	r2, #2
     16a:	430a      	orrs	r2, r1
     16c:	731a      	strb	r2, [r3, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     16e:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     170:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     172:	b25b      	sxtb	r3, r3
     174:	2b00      	cmp	r3, #0
     176:	dbfb      	blt.n	170 <ADC_Handler+0x5c>
     178:	e00a      	b.n	190 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     17a:	7f23      	ldrb	r3, [r4, #28]
     17c:	2b05      	cmp	r3, #5
     17e:	d107      	bne.n	190 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     180:	2300      	movs	r3, #0
     182:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     184:	2301      	movs	r3, #1
     186:	6822      	ldr	r2, [r4, #0]
     188:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     18a:	1c20      	adds	r0, r4, #0
     18c:	68a3      	ldr	r3, [r4, #8]
     18e:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     190:	0769      	lsls	r1, r5, #29
     192:	d50b      	bpl.n	1ac <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     194:	2304      	movs	r3, #4
     196:	6822      	ldr	r2, [r4, #0]
     198:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     19a:	7ee3      	ldrb	r3, [r4, #27]
     19c:	0799      	lsls	r1, r3, #30
     19e:	d505      	bpl.n	1ac <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     1a0:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     1a2:	079a      	lsls	r2, r3, #30
     1a4:	d502      	bpl.n	1ac <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     1a6:	1c20      	adds	r0, r4, #0
     1a8:	68e3      	ldr	r3, [r4, #12]
     1aa:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     1ac:	07a9      	lsls	r1, r5, #30
     1ae:	d50b      	bpl.n	1c8 <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     1b0:	2302      	movs	r3, #2
     1b2:	6822      	ldr	r2, [r4, #0]
     1b4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1b6:	7ee3      	ldrb	r3, [r4, #27]
     1b8:	0759      	lsls	r1, r3, #29
     1ba:	d505      	bpl.n	1c8 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     1bc:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1be:	075a      	lsls	r2, r3, #29
     1c0:	d502      	bpl.n	1c8 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1c2:	6923      	ldr	r3, [r4, #16]
     1c4:	1c20      	adds	r0, r4, #0
     1c6:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     1c8:	bd38      	pop	{r3, r4, r5, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	20000760 	.word	0x20000760

000001d0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     1d0:	4b05      	ldr	r3, [pc, #20]	; (1e8 <_extint_enable+0x18>)
     1d2:	7819      	ldrb	r1, [r3, #0]
     1d4:	2202      	movs	r2, #2
     1d6:	430a      	orrs	r2, r1
     1d8:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1da:	1c1a      	adds	r2, r3, #0
     1dc:	7853      	ldrb	r3, [r2, #1]
     1de:	b25b      	sxtb	r3, r3
     1e0:	2b00      	cmp	r3, #0
     1e2:	dbfb      	blt.n	1dc <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     1e4:	4770      	bx	lr
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	40001800 	.word	0x40001800

000001ec <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     1ec:	b500      	push	{lr}
     1ee:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1f0:	4b12      	ldr	r3, [pc, #72]	; (23c <_system_extint_init+0x50>)
     1f2:	6999      	ldr	r1, [r3, #24]
     1f4:	2240      	movs	r2, #64	; 0x40
     1f6:	430a      	orrs	r2, r1
     1f8:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1fa:	a901      	add	r1, sp, #4
     1fc:	2300      	movs	r3, #0
     1fe:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     200:	2005      	movs	r0, #5
     202:	4b0f      	ldr	r3, [pc, #60]	; (240 <_system_extint_init+0x54>)
     204:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     206:	2005      	movs	r0, #5
     208:	4b0e      	ldr	r3, [pc, #56]	; (244 <_system_extint_init+0x58>)
     20a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     20c:	4b0e      	ldr	r3, [pc, #56]	; (248 <_system_extint_init+0x5c>)
     20e:	7819      	ldrb	r1, [r3, #0]
     210:	2201      	movs	r2, #1
     212:	430a      	orrs	r2, r1
     214:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     216:	1c1a      	adds	r2, r3, #0
     218:	7853      	ldrb	r3, [r2, #1]
     21a:	b25b      	sxtb	r3, r3
     21c:	2b00      	cmp	r3, #0
     21e:	dbfb      	blt.n	218 <_system_extint_init+0x2c>
     220:	4b0a      	ldr	r3, [pc, #40]	; (24c <_system_extint_init+0x60>)
     222:	1c19      	adds	r1, r3, #0
     224:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     226:	2200      	movs	r2, #0
     228:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     22a:	428b      	cmp	r3, r1
     22c:	d1fc      	bne.n	228 <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     22e:	2210      	movs	r2, #16
     230:	4b07      	ldr	r3, [pc, #28]	; (250 <_system_extint_init+0x64>)
     232:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     234:	4b07      	ldr	r3, [pc, #28]	; (254 <_system_extint_init+0x68>)
     236:	4798      	blx	r3
}
     238:	b003      	add	sp, #12
     23a:	bd00      	pop	{pc}
     23c:	40000400 	.word	0x40000400
     240:	00004149 	.word	0x00004149
     244:	000040bd 	.word	0x000040bd
     248:	40001800 	.word	0x40001800
     24c:	20000764 	.word	0x20000764
     250:	e000e100 	.word	0xe000e100
     254:	000001d1 	.word	0x000001d1

00000258 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     258:	2300      	movs	r3, #0
     25a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     25c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     25e:	2201      	movs	r2, #1
     260:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     262:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     264:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     266:	2302      	movs	r3, #2
     268:	72c3      	strb	r3, [r0, #11]
}
     26a:	4770      	bx	lr

0000026c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     26c:	b5f0      	push	{r4, r5, r6, r7, lr}
     26e:	b083      	sub	sp, #12
     270:	1c05      	adds	r5, r0, #0
     272:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     274:	a901      	add	r1, sp, #4
     276:	2300      	movs	r3, #0
     278:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     27a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     27c:	6863      	ldr	r3, [r4, #4]
     27e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     280:	7a23      	ldrb	r3, [r4, #8]
     282:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     284:	7820      	ldrb	r0, [r4, #0]
     286:	4b15      	ldr	r3, [pc, #84]	; (2dc <extint_chan_set_config+0x70>)
     288:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     28a:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     28c:	2d1f      	cmp	r5, #31
     28e:	d800      	bhi.n	292 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     290:	4b13      	ldr	r3, [pc, #76]	; (2e0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     292:	2107      	movs	r1, #7
     294:	4029      	ands	r1, r5
     296:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     298:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     29a:	7aa2      	ldrb	r2, [r4, #10]
     29c:	2a00      	cmp	r2, #0
     29e:	d001      	beq.n	2a4 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     2a0:	2208      	movs	r2, #8
     2a2:	4310      	orrs	r0, r2
     2a4:	08ea      	lsrs	r2, r5, #3
     2a6:	0092      	lsls	r2, r2, #2
     2a8:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     2aa:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     2ac:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     2ae:	270f      	movs	r7, #15
     2b0:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     2b2:	43be      	bics	r6, r7
     2b4:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     2b6:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     2b8:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     2ba:	7a62      	ldrb	r2, [r4, #9]
     2bc:	2a00      	cmp	r2, #0
     2be:	d006      	beq.n	2ce <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     2c0:	695a      	ldr	r2, [r3, #20]
     2c2:	2101      	movs	r1, #1
     2c4:	40a9      	lsls	r1, r5
     2c6:	1c0d      	adds	r5, r1, #0
     2c8:	4315      	orrs	r5, r2
     2ca:	615d      	str	r5, [r3, #20]
     2cc:	e004      	b.n	2d8 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     2ce:	695a      	ldr	r2, [r3, #20]
     2d0:	2101      	movs	r1, #1
     2d2:	40a9      	lsls	r1, r5
     2d4:	438a      	bics	r2, r1
     2d6:	615a      	str	r2, [r3, #20]
	}
}
     2d8:	b003      	add	sp, #12
     2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2dc:	00004225 	.word	0x00004225
     2e0:	40001800 	.word	0x40001800

000002e4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     2e4:	b510      	push	{r4, lr}
     2e6:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     2e8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2ea:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     2ec:	4299      	cmp	r1, r3
     2ee:	d30c      	bcc.n	30a <_sercom_get_sync_baud_val+0x26>
     2f0:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     2f2:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     2f4:	1c60      	adds	r0, r4, #1
     2f6:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     2f8:	428b      	cmp	r3, r1
     2fa:	d801      	bhi.n	300 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     2fc:	1c04      	adds	r4, r0, #0
     2fe:	e7f8      	b.n	2f2 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     300:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     302:	2cff      	cmp	r4, #255	; 0xff
     304:	d801      	bhi.n	30a <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     306:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     308:	2000      	movs	r0, #0
	}
}
     30a:	bd10      	pop	{r4, pc}
     30c:	0000      	movs	r0, r0
	...

00000310 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     310:	b5f0      	push	{r4, r5, r6, r7, lr}
     312:	465f      	mov	r7, fp
     314:	4656      	mov	r6, sl
     316:	464d      	mov	r5, r9
     318:	4644      	mov	r4, r8
     31a:	b4f0      	push	{r4, r5, r6, r7}
     31c:	b087      	sub	sp, #28
     31e:	1c06      	adds	r6, r0, #0
     320:	1c0d      	adds	r5, r1, #0
     322:	9204      	str	r2, [sp, #16]
     324:	aa10      	add	r2, sp, #64	; 0x40
     326:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     328:	1c32      	adds	r2, r6, #0
     32a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     32c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     32e:	428a      	cmp	r2, r1
     330:	d900      	bls.n	334 <_sercom_get_async_baud_val+0x24>
     332:	e0b3      	b.n	49c <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     334:	2b00      	cmp	r3, #0
     336:	d14b      	bne.n	3d0 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     338:	2100      	movs	r1, #0
     33a:	1c32      	adds	r2, r6, #0
     33c:	4c5e      	ldr	r4, [pc, #376]	; (4b8 <_sercom_get_async_baud_val+0x1a8>)
     33e:	47a0      	blx	r4
     340:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     342:	1c2e      	adds	r6, r5, #0
     344:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     346:	2000      	movs	r0, #0
     348:	2100      	movs	r1, #0
     34a:	2200      	movs	r2, #0
     34c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     34e:	243f      	movs	r4, #63	; 0x3f
     350:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     352:	2501      	movs	r5, #1
     354:	46a8      	mov	r8, r5
     356:	9002      	str	r0, [sp, #8]
     358:	9103      	str	r1, [sp, #12]
     35a:	4661      	mov	r1, ip
     35c:	3920      	subs	r1, #32
     35e:	d403      	bmi.n	368 <_sercom_get_async_baud_val+0x58>
     360:	4640      	mov	r0, r8
     362:	4088      	lsls	r0, r1
     364:	4681      	mov	r9, r0
     366:	e005      	b.n	374 <_sercom_get_async_baud_val+0x64>
     368:	2120      	movs	r1, #32
     36a:	4665      	mov	r5, ip
     36c:	1b4c      	subs	r4, r1, r5
     36e:	4640      	mov	r0, r8
     370:	40e0      	lsrs	r0, r4
     372:	4681      	mov	r9, r0
     374:	4641      	mov	r1, r8
     376:	4664      	mov	r4, ip
     378:	40a1      	lsls	r1, r4
     37a:	468a      	mov	sl, r1

		r = r << 1;
     37c:	1c10      	adds	r0, r2, #0
     37e:	1c19      	adds	r1, r3, #0
     380:	1880      	adds	r0, r0, r2
     382:	4159      	adcs	r1, r3
     384:	1c02      	adds	r2, r0, #0
     386:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     388:	465d      	mov	r5, fp
     38a:	464c      	mov	r4, r9
     38c:	4225      	tst	r5, r4
     38e:	d002      	beq.n	396 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     390:	4642      	mov	r2, r8
     392:	4302      	orrs	r2, r0
     394:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     396:	429f      	cmp	r7, r3
     398:	d80c      	bhi.n	3b4 <_sercom_get_async_baud_val+0xa4>
     39a:	d101      	bne.n	3a0 <_sercom_get_async_baud_val+0x90>
     39c:	4296      	cmp	r6, r2
     39e:	d809      	bhi.n	3b4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     3a0:	1b92      	subs	r2, r2, r6
     3a2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     3a4:	4650      	mov	r0, sl
     3a6:	9d02      	ldr	r5, [sp, #8]
     3a8:	4328      	orrs	r0, r5
     3aa:	4649      	mov	r1, r9
     3ac:	9c03      	ldr	r4, [sp, #12]
     3ae:	4321      	orrs	r1, r4
     3b0:	9002      	str	r0, [sp, #8]
     3b2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     3b4:	4665      	mov	r5, ip
     3b6:	3d01      	subs	r5, #1
     3b8:	46ac      	mov	ip, r5
     3ba:	d2ce      	bcs.n	35a <_sercom_get_async_baud_val+0x4a>
     3bc:	9802      	ldr	r0, [sp, #8]
     3be:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3c0:	4b3c      	ldr	r3, [pc, #240]	; (4b4 <_sercom_get_async_baud_val+0x1a4>)
     3c2:	4a3b      	ldr	r2, [pc, #236]	; (4b0 <_sercom_get_async_baud_val+0x1a0>)
     3c4:	1a12      	subs	r2, r2, r0
     3c6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3c8:	0c12      	lsrs	r2, r2, #16
     3ca:	041b      	lsls	r3, r3, #16
     3cc:	431a      	orrs	r2, r3
     3ce:	e062      	b.n	496 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     3d0:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3d2:	2b01      	cmp	r3, #1
     3d4:	d15f      	bne.n	496 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     3d6:	0f4f      	lsrs	r7, r1, #29
     3d8:	46b9      	mov	r9, r7
     3da:	00cd      	lsls	r5, r1, #3
     3dc:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     3de:	2100      	movs	r1, #0
     3e0:	1c32      	adds	r2, r6, #0
     3e2:	2300      	movs	r3, #0
     3e4:	4c34      	ldr	r4, [pc, #208]	; (4b8 <_sercom_get_async_baud_val+0x1a8>)
     3e6:	47a0      	blx	r4
     3e8:	1c06      	adds	r6, r0, #0
     3ea:	1c0f      	adds	r7, r1, #0
     3ec:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     3ee:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     3f0:	9602      	str	r6, [sp, #8]
     3f2:	9703      	str	r7, [sp, #12]
     3f4:	469a      	mov	sl, r3
     3f6:	4650      	mov	r0, sl
     3f8:	b2c0      	uxtb	r0, r0
     3fa:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     3fc:	2100      	movs	r1, #0
     3fe:	4688      	mov	r8, r1
     400:	2200      	movs	r2, #0
     402:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     404:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     406:	1c27      	adds	r7, r4, #0
     408:	3f20      	subs	r7, #32
     40a:	d403      	bmi.n	414 <_sercom_get_async_baud_val+0x104>
     40c:	1c2e      	adds	r6, r5, #0
     40e:	40be      	lsls	r6, r7
     410:	9601      	str	r6, [sp, #4]
     412:	e004      	b.n	41e <_sercom_get_async_baud_val+0x10e>
     414:	2020      	movs	r0, #32
     416:	1b07      	subs	r7, r0, r4
     418:	1c29      	adds	r1, r5, #0
     41a:	40f9      	lsrs	r1, r7
     41c:	9101      	str	r1, [sp, #4]
     41e:	1c2e      	adds	r6, r5, #0
     420:	40a6      	lsls	r6, r4
     422:	9600      	str	r6, [sp, #0]

		r = r << 1;
     424:	1c10      	adds	r0, r2, #0
     426:	1c19      	adds	r1, r3, #0
     428:	1880      	adds	r0, r0, r2
     42a:	4159      	adcs	r1, r3
     42c:	1c02      	adds	r2, r0, #0
     42e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     430:	465f      	mov	r7, fp
     432:	4037      	ands	r7, r6
     434:	46bc      	mov	ip, r7
     436:	9e01      	ldr	r6, [sp, #4]
     438:	464f      	mov	r7, r9
     43a:	403e      	ands	r6, r7
     43c:	4667      	mov	r7, ip
     43e:	433e      	orrs	r6, r7
     440:	d002      	beq.n	448 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     442:	1c2a      	adds	r2, r5, #0
     444:	4302      	orrs	r2, r0
     446:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     448:	9803      	ldr	r0, [sp, #12]
     44a:	4298      	cmp	r0, r3
     44c:	d80b      	bhi.n	466 <_sercom_get_async_baud_val+0x156>
     44e:	d102      	bne.n	456 <_sercom_get_async_baud_val+0x146>
     450:	9902      	ldr	r1, [sp, #8]
     452:	4291      	cmp	r1, r2
     454:	d807      	bhi.n	466 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     456:	9e02      	ldr	r6, [sp, #8]
     458:	9f03      	ldr	r7, [sp, #12]
     45a:	1b92      	subs	r2, r2, r6
     45c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     45e:	4647      	mov	r7, r8
     460:	9800      	ldr	r0, [sp, #0]
     462:	4307      	orrs	r7, r0
     464:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     466:	3c01      	subs	r4, #1
     468:	d2cd      	bcs.n	406 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     46a:	4641      	mov	r1, r8
     46c:	4652      	mov	r2, sl
     46e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     470:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     472:	4c12      	ldr	r4, [pc, #72]	; (4bc <_sercom_get_async_baud_val+0x1ac>)
     474:	42a3      	cmp	r3, r4
     476:	d908      	bls.n	48a <_sercom_get_async_baud_val+0x17a>
     478:	9a05      	ldr	r2, [sp, #20]
     47a:	3201      	adds	r2, #1
     47c:	b2d2      	uxtb	r2, r2
     47e:	9205      	str	r2, [sp, #20]
     480:	2601      	movs	r6, #1
     482:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     484:	4657      	mov	r7, sl
     486:	2f08      	cmp	r7, #8
     488:	d1b5      	bne.n	3f6 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     48a:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     48c:	9805      	ldr	r0, [sp, #20]
     48e:	2808      	cmp	r0, #8
     490:	d004      	beq.n	49c <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     492:	0342      	lsls	r2, r0, #13
     494:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     496:	9c04      	ldr	r4, [sp, #16]
     498:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     49a:	2400      	movs	r4, #0
}
     49c:	1c20      	adds	r0, r4, #0
     49e:	b007      	add	sp, #28
     4a0:	bc3c      	pop	{r2, r3, r4, r5}
     4a2:	4690      	mov	r8, r2
     4a4:	4699      	mov	r9, r3
     4a6:	46a2      	mov	sl, r4
     4a8:	46ab      	mov	fp, r5
     4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ac:	46c0      	nop			; (mov r8, r8)
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	00000000 	.word	0x00000000
     4b4:	00000001 	.word	0x00000001
     4b8:	000047b5 	.word	0x000047b5
     4bc:	00001fff 	.word	0x00001fff

000004c0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4c0:	b510      	push	{r4, lr}
     4c2:	b082      	sub	sp, #8
     4c4:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     4c6:	4b0f      	ldr	r3, [pc, #60]	; (504 <sercom_set_gclk_generator+0x44>)
     4c8:	781b      	ldrb	r3, [r3, #0]
     4ca:	2b00      	cmp	r3, #0
     4cc:	d001      	beq.n	4d2 <sercom_set_gclk_generator+0x12>
     4ce:	2900      	cmp	r1, #0
     4d0:	d00d      	beq.n	4ee <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     4d2:	a901      	add	r1, sp, #4
     4d4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4d6:	2013      	movs	r0, #19
     4d8:	4b0b      	ldr	r3, [pc, #44]	; (508 <sercom_set_gclk_generator+0x48>)
     4da:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4dc:	2013      	movs	r0, #19
     4de:	4b0b      	ldr	r3, [pc, #44]	; (50c <sercom_set_gclk_generator+0x4c>)
     4e0:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     4e2:	4b08      	ldr	r3, [pc, #32]	; (504 <sercom_set_gclk_generator+0x44>)
     4e4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     4e6:	2201      	movs	r2, #1
     4e8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     4ea:	2000      	movs	r0, #0
     4ec:	e007      	b.n	4fe <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     4ee:	4b05      	ldr	r3, [pc, #20]	; (504 <sercom_set_gclk_generator+0x44>)
     4f0:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     4f2:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     4f4:	1b14      	subs	r4, r2, r4
     4f6:	1e62      	subs	r2, r4, #1
     4f8:	4194      	sbcs	r4, r2
     4fa:	4264      	negs	r4, r4
     4fc:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     4fe:	b002      	add	sp, #8
     500:	bd10      	pop	{r4, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	20000094 	.word	0x20000094
     508:	00004149 	.word	0x00004149
     50c:	000040bd 	.word	0x000040bd

00000510 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     510:	4b44      	ldr	r3, [pc, #272]	; (624 <_sercom_get_default_pad+0x114>)
     512:	4298      	cmp	r0, r3
     514:	d033      	beq.n	57e <_sercom_get_default_pad+0x6e>
     516:	d806      	bhi.n	526 <_sercom_get_default_pad+0x16>
     518:	4b43      	ldr	r3, [pc, #268]	; (628 <_sercom_get_default_pad+0x118>)
     51a:	4298      	cmp	r0, r3
     51c:	d00d      	beq.n	53a <_sercom_get_default_pad+0x2a>
     51e:	4b43      	ldr	r3, [pc, #268]	; (62c <_sercom_get_default_pad+0x11c>)
     520:	4298      	cmp	r0, r3
     522:	d01b      	beq.n	55c <_sercom_get_default_pad+0x4c>
     524:	e06f      	b.n	606 <_sercom_get_default_pad+0xf6>
     526:	4b42      	ldr	r3, [pc, #264]	; (630 <_sercom_get_default_pad+0x120>)
     528:	4298      	cmp	r0, r3
     52a:	d04a      	beq.n	5c2 <_sercom_get_default_pad+0xb2>
     52c:	4b41      	ldr	r3, [pc, #260]	; (634 <_sercom_get_default_pad+0x124>)
     52e:	4298      	cmp	r0, r3
     530:	d058      	beq.n	5e4 <_sercom_get_default_pad+0xd4>
     532:	4b41      	ldr	r3, [pc, #260]	; (638 <_sercom_get_default_pad+0x128>)
     534:	4298      	cmp	r0, r3
     536:	d166      	bne.n	606 <_sercom_get_default_pad+0xf6>
     538:	e032      	b.n	5a0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     53a:	2901      	cmp	r1, #1
     53c:	d065      	beq.n	60a <_sercom_get_default_pad+0xfa>
     53e:	2900      	cmp	r1, #0
     540:	d004      	beq.n	54c <_sercom_get_default_pad+0x3c>
     542:	2902      	cmp	r1, #2
     544:	d006      	beq.n	554 <_sercom_get_default_pad+0x44>
     546:	2903      	cmp	r1, #3
     548:	d006      	beq.n	558 <_sercom_get_default_pad+0x48>
     54a:	e001      	b.n	550 <_sercom_get_default_pad+0x40>
     54c:	483b      	ldr	r0, [pc, #236]	; (63c <_sercom_get_default_pad+0x12c>)
     54e:	e067      	b.n	620 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     550:	2000      	movs	r0, #0
     552:	e065      	b.n	620 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     554:	483a      	ldr	r0, [pc, #232]	; (640 <_sercom_get_default_pad+0x130>)
     556:	e063      	b.n	620 <_sercom_get_default_pad+0x110>
     558:	483a      	ldr	r0, [pc, #232]	; (644 <_sercom_get_default_pad+0x134>)
     55a:	e061      	b.n	620 <_sercom_get_default_pad+0x110>
     55c:	2901      	cmp	r1, #1
     55e:	d056      	beq.n	60e <_sercom_get_default_pad+0xfe>
     560:	2900      	cmp	r1, #0
     562:	d004      	beq.n	56e <_sercom_get_default_pad+0x5e>
     564:	2902      	cmp	r1, #2
     566:	d006      	beq.n	576 <_sercom_get_default_pad+0x66>
     568:	2903      	cmp	r1, #3
     56a:	d006      	beq.n	57a <_sercom_get_default_pad+0x6a>
     56c:	e001      	b.n	572 <_sercom_get_default_pad+0x62>
     56e:	2003      	movs	r0, #3
     570:	e056      	b.n	620 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     572:	2000      	movs	r0, #0
     574:	e054      	b.n	620 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     576:	4834      	ldr	r0, [pc, #208]	; (648 <_sercom_get_default_pad+0x138>)
     578:	e052      	b.n	620 <_sercom_get_default_pad+0x110>
     57a:	4834      	ldr	r0, [pc, #208]	; (64c <_sercom_get_default_pad+0x13c>)
     57c:	e050      	b.n	620 <_sercom_get_default_pad+0x110>
     57e:	2901      	cmp	r1, #1
     580:	d047      	beq.n	612 <_sercom_get_default_pad+0x102>
     582:	2900      	cmp	r1, #0
     584:	d004      	beq.n	590 <_sercom_get_default_pad+0x80>
     586:	2902      	cmp	r1, #2
     588:	d006      	beq.n	598 <_sercom_get_default_pad+0x88>
     58a:	2903      	cmp	r1, #3
     58c:	d006      	beq.n	59c <_sercom_get_default_pad+0x8c>
     58e:	e001      	b.n	594 <_sercom_get_default_pad+0x84>
     590:	482f      	ldr	r0, [pc, #188]	; (650 <_sercom_get_default_pad+0x140>)
     592:	e045      	b.n	620 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     594:	2000      	movs	r0, #0
     596:	e043      	b.n	620 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     598:	482e      	ldr	r0, [pc, #184]	; (654 <_sercom_get_default_pad+0x144>)
     59a:	e041      	b.n	620 <_sercom_get_default_pad+0x110>
     59c:	482e      	ldr	r0, [pc, #184]	; (658 <_sercom_get_default_pad+0x148>)
     59e:	e03f      	b.n	620 <_sercom_get_default_pad+0x110>
     5a0:	2901      	cmp	r1, #1
     5a2:	d038      	beq.n	616 <_sercom_get_default_pad+0x106>
     5a4:	2900      	cmp	r1, #0
     5a6:	d004      	beq.n	5b2 <_sercom_get_default_pad+0xa2>
     5a8:	2902      	cmp	r1, #2
     5aa:	d006      	beq.n	5ba <_sercom_get_default_pad+0xaa>
     5ac:	2903      	cmp	r1, #3
     5ae:	d006      	beq.n	5be <_sercom_get_default_pad+0xae>
     5b0:	e001      	b.n	5b6 <_sercom_get_default_pad+0xa6>
     5b2:	482a      	ldr	r0, [pc, #168]	; (65c <_sercom_get_default_pad+0x14c>)
     5b4:	e034      	b.n	620 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5b6:	2000      	movs	r0, #0
     5b8:	e032      	b.n	620 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ba:	4829      	ldr	r0, [pc, #164]	; (660 <_sercom_get_default_pad+0x150>)
     5bc:	e030      	b.n	620 <_sercom_get_default_pad+0x110>
     5be:	4829      	ldr	r0, [pc, #164]	; (664 <_sercom_get_default_pad+0x154>)
     5c0:	e02e      	b.n	620 <_sercom_get_default_pad+0x110>
     5c2:	2901      	cmp	r1, #1
     5c4:	d029      	beq.n	61a <_sercom_get_default_pad+0x10a>
     5c6:	2900      	cmp	r1, #0
     5c8:	d004      	beq.n	5d4 <_sercom_get_default_pad+0xc4>
     5ca:	2902      	cmp	r1, #2
     5cc:	d006      	beq.n	5dc <_sercom_get_default_pad+0xcc>
     5ce:	2903      	cmp	r1, #3
     5d0:	d006      	beq.n	5e0 <_sercom_get_default_pad+0xd0>
     5d2:	e001      	b.n	5d8 <_sercom_get_default_pad+0xc8>
     5d4:	4824      	ldr	r0, [pc, #144]	; (668 <_sercom_get_default_pad+0x158>)
     5d6:	e023      	b.n	620 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5d8:	2000      	movs	r0, #0
     5da:	e021      	b.n	620 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5dc:	4823      	ldr	r0, [pc, #140]	; (66c <_sercom_get_default_pad+0x15c>)
     5de:	e01f      	b.n	620 <_sercom_get_default_pad+0x110>
     5e0:	4823      	ldr	r0, [pc, #140]	; (670 <_sercom_get_default_pad+0x160>)
     5e2:	e01d      	b.n	620 <_sercom_get_default_pad+0x110>
     5e4:	2901      	cmp	r1, #1
     5e6:	d01a      	beq.n	61e <_sercom_get_default_pad+0x10e>
     5e8:	2900      	cmp	r1, #0
     5ea:	d004      	beq.n	5f6 <_sercom_get_default_pad+0xe6>
     5ec:	2902      	cmp	r1, #2
     5ee:	d006      	beq.n	5fe <_sercom_get_default_pad+0xee>
     5f0:	2903      	cmp	r1, #3
     5f2:	d006      	beq.n	602 <_sercom_get_default_pad+0xf2>
     5f4:	e001      	b.n	5fa <_sercom_get_default_pad+0xea>
     5f6:	481f      	ldr	r0, [pc, #124]	; (674 <_sercom_get_default_pad+0x164>)
     5f8:	e012      	b.n	620 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5fa:	2000      	movs	r0, #0
     5fc:	e010      	b.n	620 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5fe:	481e      	ldr	r0, [pc, #120]	; (678 <_sercom_get_default_pad+0x168>)
     600:	e00e      	b.n	620 <_sercom_get_default_pad+0x110>
     602:	481e      	ldr	r0, [pc, #120]	; (67c <_sercom_get_default_pad+0x16c>)
     604:	e00c      	b.n	620 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     606:	2000      	movs	r0, #0
     608:	e00a      	b.n	620 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     60a:	481d      	ldr	r0, [pc, #116]	; (680 <_sercom_get_default_pad+0x170>)
     60c:	e008      	b.n	620 <_sercom_get_default_pad+0x110>
     60e:	481d      	ldr	r0, [pc, #116]	; (684 <_sercom_get_default_pad+0x174>)
     610:	e006      	b.n	620 <_sercom_get_default_pad+0x110>
     612:	481d      	ldr	r0, [pc, #116]	; (688 <_sercom_get_default_pad+0x178>)
     614:	e004      	b.n	620 <_sercom_get_default_pad+0x110>
     616:	481d      	ldr	r0, [pc, #116]	; (68c <_sercom_get_default_pad+0x17c>)
     618:	e002      	b.n	620 <_sercom_get_default_pad+0x110>
     61a:	481d      	ldr	r0, [pc, #116]	; (690 <_sercom_get_default_pad+0x180>)
     61c:	e000      	b.n	620 <_sercom_get_default_pad+0x110>
     61e:	481d      	ldr	r0, [pc, #116]	; (694 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     620:	4770      	bx	lr
     622:	46c0      	nop			; (mov r8, r8)
     624:	42001000 	.word	0x42001000
     628:	42000800 	.word	0x42000800
     62c:	42000c00 	.word	0x42000c00
     630:	42001800 	.word	0x42001800
     634:	42001c00 	.word	0x42001c00
     638:	42001400 	.word	0x42001400
     63c:	00040003 	.word	0x00040003
     640:	00060003 	.word	0x00060003
     644:	00070003 	.word	0x00070003
     648:	001e0003 	.word	0x001e0003
     64c:	001f0003 	.word	0x001f0003
     650:	000c0002 	.word	0x000c0002
     654:	000e0002 	.word	0x000e0002
     658:	000f0002 	.word	0x000f0002
     65c:	00100003 	.word	0x00100003
     660:	00120003 	.word	0x00120003
     664:	00130003 	.word	0x00130003
     668:	00530005 	.word	0x00530005
     66c:	003e0005 	.word	0x003e0005
     670:	00520005 	.word	0x00520005
     674:	00160003 	.word	0x00160003
     678:	00180003 	.word	0x00180003
     67c:	00190003 	.word	0x00190003
     680:	00050003 	.word	0x00050003
     684:	00010003 	.word	0x00010003
     688:	000d0002 	.word	0x000d0002
     68c:	00110003 	.word	0x00110003
     690:	003f0005 	.word	0x003f0005
     694:	00170003 	.word	0x00170003

00000698 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     698:	b570      	push	{r4, r5, r6, lr}
     69a:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     69c:	4a0c      	ldr	r2, [pc, #48]	; (6d0 <_sercom_get_sercom_inst_index+0x38>)
     69e:	466b      	mov	r3, sp
     6a0:	ca70      	ldmia	r2!, {r4, r5, r6}
     6a2:	c370      	stmia	r3!, {r4, r5, r6}
     6a4:	ca32      	ldmia	r2!, {r1, r4, r5}
     6a6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6a8:	9e00      	ldr	r6, [sp, #0]
     6aa:	4286      	cmp	r6, r0
     6ac:	d006      	beq.n	6bc <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6ae:	2301      	movs	r3, #1
     6b0:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6b2:	4669      	mov	r1, sp
     6b4:	5852      	ldr	r2, [r2, r1]
     6b6:	4282      	cmp	r2, r0
     6b8:	d103      	bne.n	6c2 <_sercom_get_sercom_inst_index+0x2a>
     6ba:	e000      	b.n	6be <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6bc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     6be:	b2d8      	uxtb	r0, r3
     6c0:	e003      	b.n	6ca <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6c2:	3301      	adds	r3, #1
     6c4:	2b06      	cmp	r3, #6
     6c6:	d1f3      	bne.n	6b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     6c8:	2000      	movs	r0, #0
}
     6ca:	b006      	add	sp, #24
     6cc:	bd70      	pop	{r4, r5, r6, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	000057fc 	.word	0x000057fc

000006d4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d6:	4647      	mov	r7, r8
     6d8:	b480      	push	{r7}
     6da:	b088      	sub	sp, #32
     6dc:	1c05      	adds	r5, r0, #0
     6de:	1c0c      	adds	r4, r1, #0
     6e0:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     6e2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     6e4:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     6e6:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     6e8:	079a      	lsls	r2, r3, #30
     6ea:	d500      	bpl.n	6ee <spi_init+0x1a>
     6ec:	e0df      	b.n	8ae <spi_init+0x1da>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     6ee:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     6f0:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     6f2:	07da      	lsls	r2, r3, #31
     6f4:	d500      	bpl.n	6f8 <spi_init+0x24>
     6f6:	e0da      	b.n	8ae <spi_init+0x1da>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6f8:	1c08      	adds	r0, r1, #0
     6fa:	4b6f      	ldr	r3, [pc, #444]	; (8b8 <spi_init+0x1e4>)
     6fc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6fe:	4b6f      	ldr	r3, [pc, #444]	; (8bc <spi_init+0x1e8>)
     700:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     702:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     704:	2701      	movs	r7, #1
     706:	4097      	lsls	r7, r2
     708:	1c3a      	adds	r2, r7, #0
     70a:	430a      	orrs	r2, r1
     70c:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     70e:	a907      	add	r1, sp, #28
     710:	2724      	movs	r7, #36	; 0x24
     712:	5df3      	ldrb	r3, [r6, r7]
     714:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     716:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     718:	b2c0      	uxtb	r0, r0
     71a:	4680      	mov	r8, r0
     71c:	4b68      	ldr	r3, [pc, #416]	; (8c0 <spi_init+0x1ec>)
     71e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     720:	4640      	mov	r0, r8
     722:	4b68      	ldr	r3, [pc, #416]	; (8c4 <spi_init+0x1f0>)
     724:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     726:	5df0      	ldrb	r0, [r6, r7]
     728:	2100      	movs	r1, #0
     72a:	4b67      	ldr	r3, [pc, #412]	; (8c8 <spi_init+0x1f4>)
     72c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     72e:	7833      	ldrb	r3, [r6, #0]
     730:	2b01      	cmp	r3, #1
     732:	d103      	bne.n	73c <spi_init+0x68>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     734:	6822      	ldr	r2, [r4, #0]
     736:	230c      	movs	r3, #12
     738:	4313      	orrs	r3, r2
     73a:	6023      	str	r3, [r4, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     73c:	7833      	ldrb	r3, [r6, #0]
     73e:	2b00      	cmp	r3, #0
     740:	d000      	beq.n	744 <spi_init+0x70>
     742:	e0b1      	b.n	8a8 <spi_init+0x1d4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     744:	6822      	ldr	r2, [r4, #0]
     746:	2308      	movs	r3, #8
     748:	4313      	orrs	r3, r2
     74a:	6023      	str	r3, [r4, #0]
     74c:	e0ac      	b.n	8a8 <spi_init+0x1d4>
     74e:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     750:	60d1      	str	r1, [r2, #12]
     752:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     754:	2b1c      	cmp	r3, #28
     756:	d1fa      	bne.n	74e <spi_init+0x7a>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     758:	2300      	movs	r3, #0
     75a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     75c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     75e:	2400      	movs	r4, #0
     760:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     762:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     764:	2336      	movs	r3, #54	; 0x36
     766:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     768:	2337      	movs	r3, #55	; 0x37
     76a:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     76c:	2338      	movs	r3, #56	; 0x38
     76e:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     770:	2303      	movs	r3, #3
     772:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     774:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     776:	6828      	ldr	r0, [r5, #0]
     778:	4b4f      	ldr	r3, [pc, #316]	; (8b8 <spi_init+0x1e4>)
     77a:	4798      	blx	r3
     77c:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     77e:	4953      	ldr	r1, [pc, #332]	; (8cc <spi_init+0x1f8>)
     780:	4b53      	ldr	r3, [pc, #332]	; (8d0 <spi_init+0x1fc>)
     782:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     784:	00bf      	lsls	r7, r7, #2
     786:	4b53      	ldr	r3, [pc, #332]	; (8d4 <spi_init+0x200>)
     788:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     78a:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     78c:	ab02      	add	r3, sp, #8
     78e:	2280      	movs	r2, #128	; 0x80
     790:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     792:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     794:	2201      	movs	r2, #1
     796:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     798:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     79a:	7833      	ldrb	r3, [r6, #0]
     79c:	2b00      	cmp	r3, #0
     79e:	d102      	bne.n	7a6 <spi_init+0xd2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7a0:	2200      	movs	r2, #0
     7a2:	ab02      	add	r3, sp, #8
     7a4:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     7a6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     7a8:	9303      	str	r3, [sp, #12]
     7aa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     7ac:	9004      	str	r0, [sp, #16]
     7ae:	6b32      	ldr	r2, [r6, #48]	; 0x30
     7b0:	9205      	str	r2, [sp, #20]
     7b2:	6b73      	ldr	r3, [r6, #52]	; 0x34
     7b4:	9306      	str	r3, [sp, #24]
     7b6:	2400      	movs	r4, #0
     7b8:	b2e1      	uxtb	r1, r4
     7ba:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7bc:	aa03      	add	r2, sp, #12
     7be:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     7c0:	2800      	cmp	r0, #0
     7c2:	d102      	bne.n	7ca <spi_init+0xf6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7c4:	1c38      	adds	r0, r7, #0
     7c6:	4a44      	ldr	r2, [pc, #272]	; (8d8 <spi_init+0x204>)
     7c8:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     7ca:	1c43      	adds	r3, r0, #1
     7cc:	d006      	beq.n	7dc <spi_init+0x108>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7ce:	466a      	mov	r2, sp
     7d0:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7d2:	0c00      	lsrs	r0, r0, #16
     7d4:	b2c0      	uxtb	r0, r0
     7d6:	a902      	add	r1, sp, #8
     7d8:	4b40      	ldr	r3, [pc, #256]	; (8dc <spi_init+0x208>)
     7da:	4798      	blx	r3
     7dc:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     7de:	2c04      	cmp	r4, #4
     7e0:	d1ea      	bne.n	7b8 <spi_init+0xe4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     7e2:	7833      	ldrb	r3, [r6, #0]
     7e4:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     7e6:	7c33      	ldrb	r3, [r6, #16]
     7e8:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     7ea:	7cb3      	ldrb	r3, [r6, #18]
     7ec:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     7ee:	7d33      	ldrb	r3, [r6, #20]
     7f0:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     7f2:	2200      	movs	r2, #0
     7f4:	466b      	mov	r3, sp
     7f6:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     7f8:	7833      	ldrb	r3, [r6, #0]
     7fa:	2b01      	cmp	r3, #1
     7fc:	d114      	bne.n	828 <spi_init+0x154>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7fe:	6828      	ldr	r0, [r5, #0]
     800:	4b2d      	ldr	r3, [pc, #180]	; (8b8 <spi_init+0x1e4>)
     802:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     804:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     806:	b2c0      	uxtb	r0, r0
     808:	4b35      	ldr	r3, [pc, #212]	; (8e0 <spi_init+0x20c>)
     80a:	4798      	blx	r3
     80c:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     80e:	69b0      	ldr	r0, [r6, #24]
     810:	466a      	mov	r2, sp
     812:	3206      	adds	r2, #6
     814:	4b33      	ldr	r3, [pc, #204]	; (8e4 <spi_init+0x210>)
     816:	4798      	blx	r3
     818:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     81a:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     81c:	2b00      	cmp	r3, #0
     81e:	d146      	bne.n	8ae <spi_init+0x1da>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     820:	466b      	mov	r3, sp
     822:	3306      	adds	r3, #6
     824:	781b      	ldrb	r3, [r3, #0]
     826:	733b      	strb	r3, [r7, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     828:	7833      	ldrb	r3, [r6, #0]
     82a:	2b00      	cmp	r3, #0
     82c:	d10f      	bne.n	84e <spi_init+0x17a>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     82e:	69b1      	ldr	r1, [r6, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     830:	8bb3      	ldrh	r3, [r6, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     832:	6a78      	ldr	r0, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     834:	7ff4      	ldrb	r4, [r6, #31]
     836:	0424      	lsls	r4, r4, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     838:	7fb2      	ldrb	r2, [r6, #30]
     83a:	4322      	orrs	r2, r4

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     83c:	4302      	orrs	r2, r0
     83e:	627a      	str	r2, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
     840:	2220      	movs	r2, #32
     842:	5cb2      	ldrb	r2, [r6, r2]
     844:	2a00      	cmp	r2, #0
     846:	d004      	beq.n	852 <spi_init+0x17e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     848:	2240      	movs	r2, #64	; 0x40
     84a:	4313      	orrs	r3, r2
     84c:	e001      	b.n	852 <spi_init+0x17e>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     84e:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     850:	2100      	movs	r1, #0
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     852:	68b2      	ldr	r2, [r6, #8]
     854:	6870      	ldr	r0, [r6, #4]
     856:	4302      	orrs	r2, r0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     858:	68f0      	ldr	r0, [r6, #12]
     85a:	4302      	orrs	r2, r0

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     85c:	430a      	orrs	r2, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
     85e:	7c31      	ldrb	r1, [r6, #16]
     860:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     862:	7c71      	ldrb	r1, [r6, #17]
     864:	2900      	cmp	r1, #0
     866:	d103      	bne.n	870 <spi_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     868:	491f      	ldr	r1, [pc, #124]	; (8e8 <spi_init+0x214>)
     86a:	7889      	ldrb	r1, [r1, #2]
     86c:	0788      	lsls	r0, r1, #30
     86e:	d501      	bpl.n	874 <spi_init+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     870:	2180      	movs	r1, #128	; 0x80
     872:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     874:	7cb1      	ldrb	r1, [r6, #18]
     876:	2900      	cmp	r1, #0
     878:	d002      	beq.n	880 <spi_init+0x1ac>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     87a:	2180      	movs	r1, #128	; 0x80
     87c:	0289      	lsls	r1, r1, #10
     87e:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     880:	7cf1      	ldrb	r1, [r6, #19]
     882:	2900      	cmp	r1, #0
     884:	d002      	beq.n	88c <spi_init+0x1b8>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     886:	2180      	movs	r1, #128	; 0x80
     888:	0089      	lsls	r1, r1, #2
     88a:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     88c:	7d31      	ldrb	r1, [r6, #20]
     88e:	2900      	cmp	r1, #0
     890:	d002      	beq.n	898 <spi_init+0x1c4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     892:	2180      	movs	r1, #128	; 0x80
     894:	0189      	lsls	r1, r1, #6
     896:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     898:	6839      	ldr	r1, [r7, #0]
     89a:	430a      	orrs	r2, r1
     89c:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     89e:	687a      	ldr	r2, [r7, #4]
     8a0:	4313      	orrs	r3, r2
     8a2:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
     8a4:	2000      	movs	r0, #0
     8a6:	e002      	b.n	8ae <spi_init+0x1da>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     8a8:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     8aa:	2100      	movs	r1, #0
     8ac:	e74f      	b.n	74e <spi_init+0x7a>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     8ae:	b008      	add	sp, #32
     8b0:	bc04      	pop	{r2}
     8b2:	4690      	mov	r8, r2
     8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	00000699 	.word	0x00000699
     8bc:	40000400 	.word	0x40000400
     8c0:	00004149 	.word	0x00004149
     8c4:	000040bd 	.word	0x000040bd
     8c8:	000004c1 	.word	0x000004c1
     8cc:	000009d9 	.word	0x000009d9
     8d0:	0000158d 	.word	0x0000158d
     8d4:	200007c0 	.word	0x200007c0
     8d8:	00000511 	.word	0x00000511
     8dc:	00004225 	.word	0x00004225
     8e0:	00004165 	.word	0x00004165
     8e4:	000002e5 	.word	0x000002e5
     8e8:	41002000 	.word	0x41002000

000008ec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     8ec:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     8ee:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     8f0:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     8f2:	2c01      	cmp	r4, #1
     8f4:	d16c      	bne.n	9d0 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     8f6:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     8f8:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     8fa:	2c00      	cmp	r4, #0
     8fc:	d168      	bne.n	9d0 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     8fe:	2a00      	cmp	r2, #0
     900:	d057      	beq.n	9b2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     902:	784b      	ldrb	r3, [r1, #1]
     904:	2b00      	cmp	r3, #0
     906:	d044      	beq.n	992 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     908:	6802      	ldr	r2, [r0, #0]
     90a:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     90c:	07dc      	lsls	r4, r3, #31
     90e:	d40f      	bmi.n	930 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     910:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     912:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     914:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     916:	2900      	cmp	r1, #0
     918:	d103      	bne.n	922 <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     91a:	095a      	lsrs	r2, r3, #5
     91c:	01d2      	lsls	r2, r2, #7
     91e:	492d      	ldr	r1, [pc, #180]	; (9d4 <spi_select_slave+0xe8>)
     920:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     922:	211f      	movs	r1, #31
     924:	400b      	ands	r3, r1
     926:	2101      	movs	r1, #1
     928:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     92a:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     92c:	2305      	movs	r3, #5
     92e:	e04f      	b.n	9d0 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     930:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     932:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     934:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     936:	2c00      	cmp	r4, #0
     938:	d103      	bne.n	942 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     93a:	095a      	lsrs	r2, r3, #5
     93c:	01d2      	lsls	r2, r2, #7
     93e:	4c25      	ldr	r4, [pc, #148]	; (9d4 <spi_select_slave+0xe8>)
     940:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     942:	241f      	movs	r4, #31
     944:	4023      	ands	r3, r4
     946:	2401      	movs	r4, #1
     948:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     94a:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     94c:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     94e:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     950:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     952:	07d4      	lsls	r4, r2, #31
     954:	d500      	bpl.n	958 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     956:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     958:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     95a:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     95c:	2a00      	cmp	r2, #0
     95e:	d137      	bne.n	9d0 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     960:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     962:	2104      	movs	r1, #4
     964:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     966:	420b      	tst	r3, r1
     968:	d0fc      	beq.n	964 <spi_select_slave+0x78>
     96a:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     96c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     96e:	074c      	lsls	r4, r1, #29
     970:	d52e      	bpl.n	9d0 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     972:	8b53      	ldrh	r3, [r2, #26]
     974:	0759      	lsls	r1, r3, #29
     976:	d503      	bpl.n	980 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     978:	8b51      	ldrh	r1, [r2, #26]
     97a:	2304      	movs	r3, #4
     97c:	430b      	orrs	r3, r1
     97e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     980:	7983      	ldrb	r3, [r0, #6]
     982:	2b01      	cmp	r3, #1
     984:	d102      	bne.n	98c <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     986:	6a93      	ldr	r3, [r2, #40]	; 0x28
     988:	2300      	movs	r3, #0
     98a:	e021      	b.n	9d0 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     98c:	6a93      	ldr	r3, [r2, #40]	; 0x28
     98e:	2300      	movs	r3, #0
     990:	e01e      	b.n	9d0 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     992:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     994:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     996:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     998:	2900      	cmp	r1, #0
     99a:	d103      	bne.n	9a4 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     99c:	095a      	lsrs	r2, r3, #5
     99e:	01d2      	lsls	r2, r2, #7
     9a0:	4c0c      	ldr	r4, [pc, #48]	; (9d4 <spi_select_slave+0xe8>)
     9a2:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9a4:	211f      	movs	r1, #31
     9a6:	400b      	ands	r3, r1
     9a8:	2101      	movs	r1, #1
     9aa:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     9ac:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     9ae:	2300      	movs	r3, #0
     9b0:	e00e      	b.n	9d0 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     9b2:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9b4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9b6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9b8:	2900      	cmp	r1, #0
     9ba:	d103      	bne.n	9c4 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     9bc:	095a      	lsrs	r2, r3, #5
     9be:	01d2      	lsls	r2, r2, #7
     9c0:	4904      	ldr	r1, [pc, #16]	; (9d4 <spi_select_slave+0xe8>)
     9c2:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9c4:	211f      	movs	r1, #31
     9c6:	400b      	ands	r3, r1
     9c8:	2101      	movs	r1, #1
     9ca:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     9cc:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     9ce:	2300      	movs	r3, #0
}
     9d0:	1c18      	adds	r0, r3, #0
     9d2:	bd10      	pop	{r4, pc}
     9d4:	41004400 	.word	0x41004400

000009d8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     9da:	0080      	lsls	r0, r0, #2
     9dc:	4b74      	ldr	r3, [pc, #464]	; (bb0 <_spi_interrupt_handler+0x1d8>)
     9de:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     9e0:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     9e2:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     9e4:	5ce3      	ldrb	r3, [r4, r3]
     9e6:	2237      	movs	r2, #55	; 0x37
     9e8:	5ca7      	ldrb	r7, [r4, r2]
     9ea:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     9ec:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     9ee:	7dae      	ldrb	r6, [r5, #22]
     9f0:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     9f2:	07f1      	lsls	r1, r6, #31
     9f4:	d549      	bpl.n	a8a <_spi_interrupt_handler+0xb2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     9f6:	7963      	ldrb	r3, [r4, #5]
     9f8:	2b01      	cmp	r3, #1
     9fa:	d116      	bne.n	a2a <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
     9fc:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     9fe:	2b00      	cmp	r3, #0
     a00:	d10f      	bne.n	a22 <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     a02:	4b6c      	ldr	r3, [pc, #432]	; (bb4 <_spi_interrupt_handler+0x1dc>)
     a04:	881b      	ldrh	r3, [r3, #0]
     a06:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     a08:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     a0a:	3b01      	subs	r3, #1
     a0c:	b29b      	uxth	r3, r3
     a0e:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
     a10:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     a12:	b29b      	uxth	r3, r3
     a14:	2b00      	cmp	r3, #0
     a16:	d101      	bne.n	a1c <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     a18:	2301      	movs	r3, #1
     a1a:	752b      	strb	r3, [r5, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     a1c:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
     a1e:	2b01      	cmp	r3, #1
     a20:	d103      	bne.n	a2a <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     a22:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     a24:	2b00      	cmp	r3, #0
     a26:	d105      	bne.n	a34 <_spi_interrupt_handler+0x5c>
     a28:	e02f      	b.n	a8a <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     a2a:	2b00      	cmp	r3, #0
     a2c:	d12d      	bne.n	a8a <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
     a2e:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     a30:	2b00      	cmp	r3, #0
     a32:	d02a      	beq.n	a8a <_spi_interrupt_handler+0xb2>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     a34:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     a36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a38:	7819      	ldrb	r1, [r3, #0]
     a3a:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     a3c:	1c58      	adds	r0, r3, #1
     a3e:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a40:	79a0      	ldrb	r0, [r4, #6]
     a42:	2801      	cmp	r0, #1
     a44:	d104      	bne.n	a50 <_spi_interrupt_handler+0x78>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     a46:	7858      	ldrb	r0, [r3, #1]
     a48:	0200      	lsls	r0, r0, #8
     a4a:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     a4c:	3302      	adds	r3, #2
     a4e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     a50:	05cb      	lsls	r3, r1, #23
     a52:	0ddb      	lsrs	r3, r3, #23
     a54:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     a56:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     a58:	3b01      	subs	r3, #1
     a5a:	b29b      	uxth	r3, r3
     a5c:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     a5e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     a60:	b29b      	uxth	r3, r3
     a62:	2b00      	cmp	r3, #0
     a64:	d111      	bne.n	a8a <_spi_interrupt_handler+0xb2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     a66:	2301      	movs	r3, #1
     a68:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     a6a:	7a63      	ldrb	r3, [r4, #9]
     a6c:	2b01      	cmp	r3, #1
     a6e:	d10c      	bne.n	a8a <_spi_interrupt_handler+0xb2>
     a70:	79e3      	ldrb	r3, [r4, #7]
     a72:	2b00      	cmp	r3, #0
     a74:	d109      	bne.n	a8a <_spi_interrupt_handler+0xb2>
						!(module->receiver_enabled)) {
					/* Buffer sent with receiver disabled */
					module->dir = SPI_DIRECTION_IDLE;
     a76:	2303      	movs	r3, #3
     a78:	7263      	strb	r3, [r4, #9]
					module->status = STATUS_OK;
     a7a:	2200      	movs	r2, #0
     a7c:	2338      	movs	r3, #56	; 0x38
     a7e:	54e2      	strb	r2, [r4, r3]
					/* Run callback if registered and enabled */
					if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     a80:	07fa      	lsls	r2, r7, #31
     a82:	d502      	bpl.n	a8a <_spi_interrupt_handler+0xb2>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
									(module);
     a84:	1c20      	adds	r0, r4, #0
     a86:	68e3      	ldr	r3, [r4, #12]
     a88:	4798      	blx	r3
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     a8a:	0771      	lsls	r1, r6, #29
     a8c:	d561      	bpl.n	b52 <_spi_interrupt_handler+0x17a>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a8e:	8b6b      	ldrh	r3, [r5, #26]
     a90:	075a      	lsls	r2, r3, #29
     a92:	d514      	bpl.n	abe <_spi_interrupt_handler+0xe6>
			if (module->dir != SPI_DIRECTION_WRITE) {
     a94:	7a63      	ldrb	r3, [r4, #9]
     a96:	2b01      	cmp	r3, #1
     a98:	d00b      	beq.n	ab2 <_spi_interrupt_handler+0xda>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     a9a:	221e      	movs	r2, #30
     a9c:	2338      	movs	r3, #56	; 0x38
     a9e:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     aa0:	2303      	movs	r3, #3
     aa2:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     aa4:	2305      	movs	r3, #5
     aa6:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     aa8:	073b      	lsls	r3, r7, #28
     aaa:	d502      	bpl.n	ab2 <_spi_interrupt_handler+0xda>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     aac:	1c20      	adds	r0, r4, #0
     aae:	69a1      	ldr	r1, [r4, #24]
     ab0:	4788      	blx	r1
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     ab2:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     ab4:	8b6a      	ldrh	r2, [r5, #26]
     ab6:	2304      	movs	r3, #4
     ab8:	4313      	orrs	r3, r2
     aba:	836b      	strh	r3, [r5, #26]
     abc:	e049      	b.n	b52 <_spi_interrupt_handler+0x17a>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     abe:	7a63      	ldrb	r3, [r4, #9]
     ac0:	2b01      	cmp	r3, #1
     ac2:	d116      	bne.n	af2 <_spi_interrupt_handler+0x11a>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ac4:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     ac8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     aca:	3b01      	subs	r3, #1
     acc:	b29b      	uxth	r3, r3
     ace:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
     ad0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     ad2:	b29b      	uxth	r3, r3
     ad4:	2b00      	cmp	r3, #0
     ad6:	d13c      	bne.n	b52 <_spi_interrupt_handler+0x17a>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     ad8:	2304      	movs	r3, #4
     ada:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
     adc:	2200      	movs	r2, #0
     ade:	2338      	movs	r3, #56	; 0x38
     ae0:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     ae2:	2303      	movs	r3, #3
     ae4:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     ae6:	07fa      	lsls	r2, r7, #31
     ae8:	d533      	bpl.n	b52 <_spi_interrupt_handler+0x17a>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     aea:	1c20      	adds	r0, r4, #0
     aec:	68e3      	ldr	r3, [r4, #12]
     aee:	4798      	blx	r3
     af0:	e02f      	b.n	b52 <_spi_interrupt_handler+0x17a>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     af2:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     af6:	05d2      	lsls	r2, r2, #23
     af8:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     afa:	b2d3      	uxtb	r3, r2
     afc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     afe:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     b00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b02:	1c59      	adds	r1, r3, #1
     b04:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b06:	79a1      	ldrb	r1, [r4, #6]
     b08:	2901      	cmp	r1, #1
     b0a:	d104      	bne.n	b16 <_spi_interrupt_handler+0x13e>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     b0c:	0a12      	lsrs	r2, r2, #8
     b0e:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     b10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b12:	3301      	adds	r3, #1
     b14:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     b16:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     b18:	3b01      	subs	r3, #1
     b1a:	b29b      	uxth	r3, r3
     b1c:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     b1e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     b20:	b29b      	uxth	r3, r3
     b22:	2b00      	cmp	r3, #0
     b24:	d115      	bne.n	b52 <_spi_interrupt_handler+0x17a>
					module->status = STATUS_OK;
     b26:	2200      	movs	r2, #0
     b28:	2338      	movs	r3, #56	; 0x38
     b2a:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     b2c:	2304      	movs	r3, #4
     b2e:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     b30:	7a63      	ldrb	r3, [r4, #9]
     b32:	2b02      	cmp	r3, #2
     b34:	d105      	bne.n	b42 <_spi_interrupt_handler+0x16a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     b36:	077a      	lsls	r2, r7, #29
     b38:	d50b      	bpl.n	b52 <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     b3a:	1c20      	adds	r0, r4, #0
     b3c:	6963      	ldr	r3, [r4, #20]
     b3e:	4798      	blx	r3
     b40:	e007      	b.n	b52 <_spi_interrupt_handler+0x17a>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     b42:	7a63      	ldrb	r3, [r4, #9]
     b44:	2b00      	cmp	r3, #0
     b46:	d104      	bne.n	b52 <_spi_interrupt_handler+0x17a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     b48:	07b9      	lsls	r1, r7, #30
     b4a:	d502      	bpl.n	b52 <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     b4c:	1c20      	adds	r0, r4, #0
     b4e:	6922      	ldr	r2, [r4, #16]
     b50:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     b52:	07b3      	lsls	r3, r6, #30
     b54:	d513      	bpl.n	b7e <_spi_interrupt_handler+0x1a6>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     b56:	7963      	ldrb	r3, [r4, #5]
     b58:	2b00      	cmp	r3, #0
     b5a:	d110      	bne.n	b7e <_spi_interrupt_handler+0x1a6>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     b5c:	2307      	movs	r3, #7
     b5e:	752b      	strb	r3, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     b60:	2302      	movs	r3, #2
     b62:	762b      	strb	r3, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     b64:	2303      	movs	r3, #3
     b66:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     b68:	2300      	movs	r3, #0
     b6a:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     b6c:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     b6e:	2338      	movs	r3, #56	; 0x38
     b70:	2200      	movs	r2, #0
     b72:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     b74:	06f9      	lsls	r1, r7, #27
     b76:	d502      	bpl.n	b7e <_spi_interrupt_handler+0x1a6>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
					(module);
     b78:	1c20      	adds	r0, r4, #0
     b7a:	69e2      	ldr	r2, [r4, #28]
     b7c:	4790      	blx	r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     b7e:	0733      	lsls	r3, r6, #28
     b80:	d50a      	bpl.n	b98 <_spi_interrupt_handler+0x1c0>
			if (module->mode == SPI_MODE_SLAVE) {
     b82:	7963      	ldrb	r3, [r4, #5]
     b84:	2b00      	cmp	r3, #0
     b86:	d107      	bne.n	b98 <_spi_interrupt_handler+0x1c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     b88:	2308      	movs	r3, #8
     b8a:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     b8c:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     b8e:	06b9      	lsls	r1, r7, #26
     b90:	d502      	bpl.n	b98 <_spi_interrupt_handler+0x1c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     b92:	1c20      	adds	r0, r4, #0
     b94:	6a22      	ldr	r2, [r4, #32]
     b96:	4790      	blx	r2
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     b98:	09f6      	lsrs	r6, r6, #7
     b9a:	d007      	beq.n	bac <_spi_interrupt_handler+0x1d4>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     b9c:	2380      	movs	r3, #128	; 0x80
     b9e:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     ba0:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     ba2:	067b      	lsls	r3, r7, #25
     ba4:	d502      	bpl.n	bac <_spi_interrupt_handler+0x1d4>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
     ba8:	1c20      	adds	r0, r4, #0
     baa:	4798      	blx	r3
		}
	}
#  endif
}
     bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	200007c0 	.word	0x200007c0
     bb4:	200007a4 	.word	0x200007a4

00000bb8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     bb8:	1c93      	adds	r3, r2, #2
     bba:	009b      	lsls	r3, r3, #2
     bbc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     bbe:	2a02      	cmp	r2, #2
     bc0:	d104      	bne.n	bcc <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     bc2:	7e02      	ldrb	r2, [r0, #24]
     bc4:	2310      	movs	r3, #16
     bc6:	4313      	orrs	r3, r2
     bc8:	7603      	strb	r3, [r0, #24]
     bca:	e00c      	b.n	be6 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     bcc:	2a03      	cmp	r2, #3
     bce:	d104      	bne.n	bda <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     bd0:	7e02      	ldrb	r2, [r0, #24]
     bd2:	2320      	movs	r3, #32
     bd4:	4313      	orrs	r3, r2
     bd6:	7603      	strb	r3, [r0, #24]
     bd8:	e005      	b.n	be6 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     bda:	2301      	movs	r3, #1
     bdc:	4093      	lsls	r3, r2
     bde:	1c1a      	adds	r2, r3, #0
     be0:	7e03      	ldrb	r3, [r0, #24]
     be2:	431a      	orrs	r2, r3
     be4:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
     be6:	2000      	movs	r0, #0
     be8:	4770      	bx	lr
     bea:	46c0      	nop			; (mov r8, r8)

00000bec <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     bec:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     bee:	0080      	lsls	r0, r0, #2
     bf0:	4b14      	ldr	r3, [pc, #80]	; (c44 <_tc_interrupt_handler+0x58>)
     bf2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     bf4:	6822      	ldr	r2, [r4, #0]
     bf6:	7b95      	ldrb	r5, [r2, #14]
     bf8:	7e23      	ldrb	r3, [r4, #24]
     bfa:	401d      	ands	r5, r3
     bfc:	7e63      	ldrb	r3, [r4, #25]
     bfe:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     c00:	07eb      	lsls	r3, r5, #31
     c02:	d505      	bpl.n	c10 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     c04:	1c20      	adds	r0, r4, #0
     c06:	68a2      	ldr	r2, [r4, #8]
     c08:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     c0a:	2301      	movs	r3, #1
     c0c:	6822      	ldr	r2, [r4, #0]
     c0e:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     c10:	07ab      	lsls	r3, r5, #30
     c12:	d505      	bpl.n	c20 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     c14:	1c20      	adds	r0, r4, #0
     c16:	68e2      	ldr	r2, [r4, #12]
     c18:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     c1a:	2302      	movs	r3, #2
     c1c:	6822      	ldr	r2, [r4, #0]
     c1e:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     c20:	06eb      	lsls	r3, r5, #27
     c22:	d505      	bpl.n	c30 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     c24:	1c20      	adds	r0, r4, #0
     c26:	6922      	ldr	r2, [r4, #16]
     c28:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     c2a:	2310      	movs	r3, #16
     c2c:	6822      	ldr	r2, [r4, #0]
     c2e:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     c30:	06ab      	lsls	r3, r5, #26
     c32:	d505      	bpl.n	c40 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     c34:	1c20      	adds	r0, r4, #0
     c36:	6962      	ldr	r2, [r4, #20]
     c38:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     c3a:	6823      	ldr	r3, [r4, #0]
     c3c:	2220      	movs	r2, #32
     c3e:	739a      	strb	r2, [r3, #14]
	}
}
     c40:	bd38      	pop	{r3, r4, r5, pc}
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	200007a8 	.word	0x200007a8

00000c48 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     c48:	b508      	push	{r3, lr}
     c4a:	2000      	movs	r0, #0
     c4c:	4b01      	ldr	r3, [pc, #4]	; (c54 <TC3_Handler+0xc>)
     c4e:	4798      	blx	r3
     c50:	bd08      	pop	{r3, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	00000bed 	.word	0x00000bed

00000c58 <TC4_Handler>:
     c58:	b508      	push	{r3, lr}
     c5a:	2001      	movs	r0, #1
     c5c:	4b01      	ldr	r3, [pc, #4]	; (c64 <TC4_Handler+0xc>)
     c5e:	4798      	blx	r3
     c60:	bd08      	pop	{r3, pc}
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	00000bed 	.word	0x00000bed

00000c68 <TC5_Handler>:
     c68:	b508      	push	{r3, lr}
     c6a:	2002      	movs	r0, #2
     c6c:	4b01      	ldr	r3, [pc, #4]	; (c74 <TC5_Handler+0xc>)
     c6e:	4798      	blx	r3
     c70:	bd08      	pop	{r3, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	00000bed 	.word	0x00000bed

00000c78 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     c78:	b570      	push	{r4, r5, r6, lr}
     c7a:	b084      	sub	sp, #16
     c7c:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     c7e:	ab01      	add	r3, sp, #4
     c80:	4a0a      	ldr	r2, [pc, #40]	; (cac <_tc_get_inst_index+0x34>)
     c82:	ca70      	ldmia	r2!, {r4, r5, r6}
     c84:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     c86:	9b01      	ldr	r3, [sp, #4]
     c88:	4283      	cmp	r3, r0
     c8a:	d00a      	beq.n	ca2 <_tc_get_inst_index+0x2a>
     c8c:	9c02      	ldr	r4, [sp, #8]
     c8e:	4284      	cmp	r4, r0
     c90:	d005      	beq.n	c9e <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     c92:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     c94:	9d03      	ldr	r5, [sp, #12]
     c96:	428d      	cmp	r5, r1
     c98:	d105      	bne.n	ca6 <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c9a:	2002      	movs	r0, #2
     c9c:	e002      	b.n	ca4 <_tc_get_inst_index+0x2c>
     c9e:	2001      	movs	r0, #1
     ca0:	e000      	b.n	ca4 <_tc_get_inst_index+0x2c>
     ca2:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
     ca4:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     ca6:	b004      	add	sp, #16
     ca8:	bd70      	pop	{r4, r5, r6, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	00005814 	.word	0x00005814

00000cb0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb2:	464f      	mov	r7, r9
     cb4:	4646      	mov	r6, r8
     cb6:	b4c0      	push	{r6, r7}
     cb8:	b087      	sub	sp, #28
     cba:	1c04      	adds	r4, r0, #0
     cbc:	1c0d      	adds	r5, r1, #0
     cbe:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     cc0:	1c08      	adds	r0, r1, #0
     cc2:	4b90      	ldr	r3, [pc, #576]	; (f04 <tc_init+0x254>)
     cc4:	4798      	blx	r3
     cc6:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     cc8:	4f8f      	ldr	r7, [pc, #572]	; (f08 <tc_init+0x258>)
     cca:	1c39      	adds	r1, r7, #0
     ccc:	310c      	adds	r1, #12
     cce:	a805      	add	r0, sp, #20
     cd0:	2203      	movs	r2, #3
     cd2:	4e8e      	ldr	r6, [pc, #568]	; (f0c <tc_init+0x25c>)
     cd4:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     cd6:	1c39      	adds	r1, r7, #0
     cd8:	3110      	adds	r1, #16
     cda:	a803      	add	r0, sp, #12
     cdc:	2206      	movs	r2, #6
     cde:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     ce0:	2300      	movs	r3, #0
     ce2:	60a3      	str	r3, [r4, #8]
     ce4:	60e3      	str	r3, [r4, #12]
     ce6:	6123      	str	r3, [r4, #16]
     ce8:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     cea:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     cec:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     cee:	4648      	mov	r0, r9
     cf0:	0082      	lsls	r2, r0, #2
     cf2:	4b87      	ldr	r3, [pc, #540]	; (f10 <tc_init+0x260>)
     cf4:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     cf6:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     cf8:	4641      	mov	r1, r8
     cfa:	788b      	ldrb	r3, [r1, #2]
     cfc:	2b08      	cmp	r3, #8
     cfe:	d104      	bne.n	d0a <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d00:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     d02:	464a      	mov	r2, r9
     d04:	07d2      	lsls	r2, r2, #31
     d06:	d400      	bmi.n	d0a <tc_init+0x5a>
     d08:	e0f6      	b.n	ef8 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     d0a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     d0c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     d0e:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     d10:	07d9      	lsls	r1, r3, #31
     d12:	d500      	bpl.n	d16 <tc_init+0x66>
     d14:	e0f0      	b.n	ef8 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     d16:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     d18:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     d1a:	06da      	lsls	r2, r3, #27
     d1c:	d500      	bpl.n	d20 <tc_init+0x70>
     d1e:	e0eb      	b.n	ef8 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     d20:	882b      	ldrh	r3, [r5, #0]
     d22:	0799      	lsls	r1, r3, #30
     d24:	d500      	bpl.n	d28 <tc_init+0x78>
     d26:	e0e7      	b.n	ef8 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     d28:	4642      	mov	r2, r8
     d2a:	7c13      	ldrb	r3, [r2, #16]
     d2c:	2b00      	cmp	r3, #0
     d2e:	d00c      	beq.n	d4a <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d30:	a902      	add	r1, sp, #8
     d32:	2301      	movs	r3, #1
     d34:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     d36:	2200      	movs	r2, #0
     d38:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     d3a:	4640      	mov	r0, r8
     d3c:	6980      	ldr	r0, [r0, #24]
     d3e:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d40:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     d42:	4642      	mov	r2, r8
     d44:	7d10      	ldrb	r0, [r2, #20]
     d46:	4b73      	ldr	r3, [pc, #460]	; (f14 <tc_init+0x264>)
     d48:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     d4a:	4640      	mov	r0, r8
     d4c:	7f03      	ldrb	r3, [r0, #28]
     d4e:	2b00      	cmp	r3, #0
     d50:	d00b      	beq.n	d6a <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d52:	a902      	add	r1, sp, #8
     d54:	2301      	movs	r3, #1
     d56:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     d58:	2200      	movs	r2, #0
     d5a:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     d5c:	6a42      	ldr	r2, [r0, #36]	; 0x24
     d5e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     d60:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     d62:	6a03      	ldr	r3, [r0, #32]
     d64:	b2d8      	uxtb	r0, r3
     d66:	4b6b      	ldr	r3, [pc, #428]	; (f14 <tc_init+0x264>)
     d68:	4798      	blx	r3
     d6a:	4b6b      	ldr	r3, [pc, #428]	; (f18 <tc_init+0x268>)
     d6c:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     d6e:	4648      	mov	r0, r9
     d70:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     d72:	a803      	add	r0, sp, #12
     d74:	5a12      	ldrh	r2, [r2, r0]
     d76:	430a      	orrs	r2, r1
     d78:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     d7a:	4641      	mov	r1, r8
     d7c:	788b      	ldrb	r3, [r1, #2]
     d7e:	2b08      	cmp	r3, #8
     d80:	d108      	bne.n	d94 <tc_init+0xe4>
     d82:	4b65      	ldr	r3, [pc, #404]	; (f18 <tc_init+0x268>)
     d84:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     d86:	4648      	mov	r0, r9
     d88:	3001      	adds	r0, #1
     d8a:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     d8c:	a903      	add	r1, sp, #12
     d8e:	5a41      	ldrh	r1, [r0, r1]
     d90:	430a      	orrs	r2, r1
     d92:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
     d94:	a901      	add	r1, sp, #4
     d96:	4642      	mov	r2, r8
     d98:	7813      	ldrb	r3, [r2, #0]
     d9a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     d9c:	ab05      	add	r3, sp, #20
     d9e:	4648      	mov	r0, r9
     da0:	5c1e      	ldrb	r6, [r3, r0]
     da2:	1c30      	adds	r0, r6, #0
     da4:	4b5d      	ldr	r3, [pc, #372]	; (f1c <tc_init+0x26c>)
     da6:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     da8:	1c30      	adds	r0, r6, #0
     daa:	4b5d      	ldr	r3, [pc, #372]	; (f20 <tc_init+0x270>)
     dac:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
     dae:	4641      	mov	r1, r8
     db0:	8888      	ldrh	r0, [r1, #4]
     db2:	890b      	ldrh	r3, [r1, #8]
     db4:	4303      	orrs	r3, r0
     db6:	7988      	ldrb	r0, [r1, #6]
     db8:	788a      	ldrb	r2, [r1, #2]
     dba:	4310      	orrs	r0, r2
     dbc:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     dbe:	784b      	ldrb	r3, [r1, #1]
     dc0:	2b00      	cmp	r3, #0
     dc2:	d002      	beq.n	dca <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     dc4:	2380      	movs	r3, #128	; 0x80
     dc6:	011b      	lsls	r3, r3, #4
     dc8:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     dca:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     dcc:	227f      	movs	r2, #127	; 0x7f
     dce:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     dd0:	4393      	bics	r3, r2
     dd2:	d1fc      	bne.n	dce <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     dd4:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     dd6:	4642      	mov	r2, r8
     dd8:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     dda:	1e43      	subs	r3, r0, #1
     ddc:	4198      	sbcs	r0, r3
     dde:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
     de0:	7b93      	ldrb	r3, [r2, #14]
     de2:	2b00      	cmp	r3, #0
     de4:	d001      	beq.n	dea <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     de6:	2301      	movs	r3, #1
     de8:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     dea:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     dec:	227f      	movs	r2, #127	; 0x7f
     dee:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     df0:	4393      	bics	r3, r2
     df2:	d1fc      	bne.n	dee <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     df4:	23ff      	movs	r3, #255	; 0xff
     df6:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     df8:	2800      	cmp	r0, #0
     dfa:	d005      	beq.n	e08 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     dfc:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     dfe:	227f      	movs	r2, #127	; 0x7f
     e00:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
     e02:	4393      	bics	r3, r2
     e04:	d1fc      	bne.n	e00 <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     e06:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     e08:	4643      	mov	r3, r8
     e0a:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     e0c:	7adb      	ldrb	r3, [r3, #11]
     e0e:	2b00      	cmp	r3, #0
     e10:	d001      	beq.n	e16 <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     e12:	2310      	movs	r3, #16
     e14:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     e16:	4641      	mov	r1, r8
     e18:	7b0b      	ldrb	r3, [r1, #12]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d001      	beq.n	e22 <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     e1e:	2320      	movs	r3, #32
     e20:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e22:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e24:	227f      	movs	r2, #127	; 0x7f
     e26:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     e28:	4393      	bics	r3, r2
     e2a:	d1fc      	bne.n	e26 <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     e2c:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e2e:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e30:	217f      	movs	r1, #127	; 0x7f
     e32:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     e34:	438b      	bics	r3, r1
     e36:	d1fc      	bne.n	e32 <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     e38:	7923      	ldrb	r3, [r4, #4]
     e3a:	2b04      	cmp	r3, #4
     e3c:	d005      	beq.n	e4a <tc_init+0x19a>
     e3e:	2b08      	cmp	r3, #8
     e40:	d041      	beq.n	ec6 <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     e42:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     e44:	2b00      	cmp	r3, #0
     e46:	d157      	bne.n	ef8 <tc_init+0x248>
     e48:	e024      	b.n	e94 <tc_init+0x1e4>
     e4a:	217f      	movs	r1, #127	; 0x7f
     e4c:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     e4e:	438b      	bics	r3, r1
     e50:	d1fc      	bne.n	e4c <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     e52:	2328      	movs	r3, #40	; 0x28
     e54:	4642      	mov	r2, r8
     e56:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     e58:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e5a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e5c:	227f      	movs	r2, #127	; 0x7f
     e5e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     e60:	4393      	bics	r3, r2
     e62:	d1fc      	bne.n	e5e <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     e64:	2329      	movs	r3, #41	; 0x29
     e66:	4640      	mov	r0, r8
     e68:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     e6a:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e6c:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e6e:	227f      	movs	r2, #127	; 0x7f
     e70:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     e72:	4393      	bics	r3, r2
     e74:	d1fc      	bne.n	e70 <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     e76:	232a      	movs	r3, #42	; 0x2a
     e78:	4641      	mov	r1, r8
     e7a:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     e7c:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e7e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e80:	227f      	movs	r2, #127	; 0x7f
     e82:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     e84:	4393      	bics	r3, r2
     e86:	d1fc      	bne.n	e82 <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     e88:	232b      	movs	r3, #43	; 0x2b
     e8a:	4642      	mov	r2, r8
     e8c:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     e8e:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     e90:	2000      	movs	r0, #0
     e92:	e031      	b.n	ef8 <tc_init+0x248>
     e94:	217f      	movs	r1, #127	; 0x7f
     e96:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     e98:	438b      	bics	r3, r1
     e9a:	d1fc      	bne.n	e96 <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     e9c:	4640      	mov	r0, r8
     e9e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
     ea0:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ea2:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     ea4:	227f      	movs	r2, #127	; 0x7f
     ea6:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
     ea8:	4393      	bics	r3, r2
     eaa:	d1fc      	bne.n	ea6 <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     eac:	4641      	mov	r1, r8
     eae:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     eb0:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     eb2:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     eb4:	227f      	movs	r2, #127	; 0x7f
     eb6:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     eb8:	4393      	bics	r3, r2
     eba:	d1fc      	bne.n	eb6 <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     ebc:	4642      	mov	r2, r8
     ebe:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     ec0:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     ec2:	2000      	movs	r0, #0
     ec4:	e018      	b.n	ef8 <tc_init+0x248>
     ec6:	217f      	movs	r1, #127	; 0x7f
     ec8:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     eca:	438b      	bics	r3, r1
     ecc:	d1fc      	bne.n	ec8 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     ece:	4643      	mov	r3, r8
     ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ed2:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ed4:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     ed6:	227f      	movs	r2, #127	; 0x7f
     ed8:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
     eda:	4393      	bics	r3, r2
     edc:	d1fc      	bne.n	ed8 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     ede:	4640      	mov	r0, r8
     ee0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     ee2:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ee4:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     ee6:	227f      	movs	r2, #127	; 0x7f
     ee8:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     eea:	4393      	bics	r3, r2
     eec:	d1fc      	bne.n	ee8 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     eee:	4641      	mov	r1, r8
     ef0:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     ef2:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     ef4:	2000      	movs	r0, #0
     ef6:	e7ff      	b.n	ef8 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     ef8:	b007      	add	sp, #28
     efa:	bc0c      	pop	{r2, r3}
     efc:	4690      	mov	r8, r2
     efe:	4699      	mov	r9, r3
     f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	00000c79 	.word	0x00000c79
     f08:	00005814 	.word	0x00005814
     f0c:	00004845 	.word	0x00004845
     f10:	200007a8 	.word	0x200007a8
     f14:	00004225 	.word	0x00004225
     f18:	40000400 	.word	0x40000400
     f1c:	00004149 	.word	0x00004149
     f20:	000040bd 	.word	0x000040bd

00000f24 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     f24:	6802      	ldr	r2, [r0, #0]
     f26:	217f      	movs	r1, #127	; 0x7f
     f28:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     f2a:	438b      	bics	r3, r1
     f2c:	d1fc      	bne.n	f28 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     f2e:	7903      	ldrb	r3, [r0, #4]
     f30:	2b04      	cmp	r3, #4
     f32:	d005      	beq.n	f40 <tc_get_count_value+0x1c>
     f34:	2b08      	cmp	r3, #8
     f36:	d009      	beq.n	f4c <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     f38:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     f3a:	2b00      	cmp	r3, #0
     f3c:	d108      	bne.n	f50 <tc_get_count_value+0x2c>
     f3e:	e002      	b.n	f46 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     f40:	7c10      	ldrb	r0, [r2, #16]
     f42:	b2c0      	uxtb	r0, r0
     f44:	e004      	b.n	f50 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     f46:	8a10      	ldrh	r0, [r2, #16]
     f48:	b280      	uxth	r0, r0
     f4a:	e001      	b.n	f50 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
     f4c:	6910      	ldr	r0, [r2, #16]
     f4e:	e7ff      	b.n	f50 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
     f50:	4770      	bx	lr
     f52:	46c0      	nop			; (mov r8, r8)

00000f54 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     f54:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     f56:	6804      	ldr	r4, [r0, #0]
     f58:	257f      	movs	r5, #127	; 0x7f
     f5a:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
     f5c:	43ab      	bics	r3, r5
     f5e:	d1fc      	bne.n	f5a <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     f60:	7903      	ldrb	r3, [r0, #4]
     f62:	2b04      	cmp	r3, #4
     f64:	d005      	beq.n	f72 <tc_set_compare_value+0x1e>
     f66:	2b08      	cmp	r3, #8
     f68:	d014      	beq.n	f94 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     f6a:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     f6c:	2b00      	cmp	r3, #0
     f6e:	d119      	bne.n	fa4 <tc_set_compare_value+0x50>
     f70:	e007      	b.n	f82 <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     f72:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
     f74:	2901      	cmp	r1, #1
     f76:	d815      	bhi.n	fa4 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
     f78:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
     f7a:	1861      	adds	r1, r4, r1
     f7c:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
     f7e:	2000      	movs	r0, #0
     f80:	e010      	b.n	fa4 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     f82:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
     f84:	2901      	cmp	r1, #1
     f86:	d80d      	bhi.n	fa4 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
     f88:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
     f8a:	310c      	adds	r1, #12
     f8c:	0049      	lsls	r1, r1, #1
     f8e:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
     f90:	2000      	movs	r0, #0
     f92:	e007      	b.n	fa4 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     f94:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
     f96:	2901      	cmp	r1, #1
     f98:	d804      	bhi.n	fa4 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
     f9a:	3106      	adds	r1, #6
     f9c:	0089      	lsls	r1, r1, #2
     f9e:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
     fa0:	2000      	movs	r0, #0
     fa2:	e7ff      	b.n	fa4 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
     fa4:	bd30      	pop	{r4, r5, pc}
     fa6:	46c0      	nop			; (mov r8, r8)

00000fa8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     faa:	4647      	mov	r7, r8
     fac:	b480      	push	{r7}
     fae:	1c0c      	adds	r4, r1, #0
     fb0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     fb2:	2800      	cmp	r0, #0
     fb4:	d10c      	bne.n	fd0 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     fb6:	2a00      	cmp	r2, #0
     fb8:	dd0d      	ble.n	fd6 <_read+0x2e>
     fba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     fbc:	4e09      	ldr	r6, [pc, #36]	; (fe4 <_read+0x3c>)
     fbe:	4d0a      	ldr	r5, [pc, #40]	; (fe8 <_read+0x40>)
     fc0:	6830      	ldr	r0, [r6, #0]
     fc2:	1c21      	adds	r1, r4, #0
     fc4:	682b      	ldr	r3, [r5, #0]
     fc6:	4798      	blx	r3
		ptr++;
     fc8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     fca:	42bc      	cmp	r4, r7
     fcc:	d1f8      	bne.n	fc0 <_read+0x18>
     fce:	e004      	b.n	fda <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     fd0:	2001      	movs	r0, #1
     fd2:	4240      	negs	r0, r0
     fd4:	e002      	b.n	fdc <_read+0x34>
	}

	for (; len > 0; --len) {
     fd6:	2000      	movs	r0, #0
     fd8:	e000      	b.n	fdc <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     fda:	4640      	mov	r0, r8
	}
	return nChars;
}
     fdc:	bc04      	pop	{r2}
     fde:	4690      	mov	r8, r2
     fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	200007bc 	.word	0x200007bc
     fe8:	200007b4 	.word	0x200007b4

00000fec <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     fec:	b5f0      	push	{r4, r5, r6, r7, lr}
     fee:	4647      	mov	r7, r8
     ff0:	b480      	push	{r7}
     ff2:	1c0e      	adds	r6, r1, #0
     ff4:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     ff6:	3801      	subs	r0, #1
     ff8:	2802      	cmp	r0, #2
     ffa:	d810      	bhi.n	101e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     ffc:	2a00      	cmp	r2, #0
     ffe:	d011      	beq.n	1024 <_write+0x38>
    1000:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1002:	4b0d      	ldr	r3, [pc, #52]	; (1038 <_write+0x4c>)
    1004:	4698      	mov	r8, r3
    1006:	4f0d      	ldr	r7, [pc, #52]	; (103c <_write+0x50>)
    1008:	4643      	mov	r3, r8
    100a:	6818      	ldr	r0, [r3, #0]
    100c:	5d31      	ldrb	r1, [r6, r4]
    100e:	683b      	ldr	r3, [r7, #0]
    1010:	4798      	blx	r3
    1012:	2800      	cmp	r0, #0
    1014:	db08      	blt.n	1028 <_write+0x3c>
			return -1;
		}
		++nChars;
    1016:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1018:	42a5      	cmp	r5, r4
    101a:	d1f5      	bne.n	1008 <_write+0x1c>
    101c:	e007      	b.n	102e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    101e:	2001      	movs	r0, #1
    1020:	4240      	negs	r0, r0
    1022:	e005      	b.n	1030 <_write+0x44>
	}

	for (; len != 0; --len) {
    1024:	2000      	movs	r0, #0
    1026:	e003      	b.n	1030 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1028:	2001      	movs	r0, #1
    102a:	4240      	negs	r0, r0
    102c:	e000      	b.n	1030 <_write+0x44>
		}
		++nChars;
    102e:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    1030:	bc04      	pop	{r2}
    1032:	4690      	mov	r8, r2
    1034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	200007bc 	.word	0x200007bc
    103c:	200007b8 	.word	0x200007b8

00001040 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1040:	b5f0      	push	{r4, r5, r6, r7, lr}
    1042:	465f      	mov	r7, fp
    1044:	4656      	mov	r6, sl
    1046:	464d      	mov	r5, r9
    1048:	4644      	mov	r4, r8
    104a:	b4f0      	push	{r4, r5, r6, r7}
    104c:	b091      	sub	sp, #68	; 0x44
    104e:	1c05      	adds	r5, r0, #0
    1050:	1c0c      	adds	r4, r1, #0
    1052:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1054:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1056:	1c08      	adds	r0, r1, #0
    1058:	4bad      	ldr	r3, [pc, #692]	; (1310 <usart_init+0x2d0>)
    105a:	4798      	blx	r3
    105c:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    105e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1060:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1062:	07d9      	lsls	r1, r3, #31
    1064:	d500      	bpl.n	1068 <usart_init+0x28>
    1066:	e14b      	b.n	1300 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1068:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    106a:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    106c:	079f      	lsls	r7, r3, #30
    106e:	d500      	bpl.n	1072 <usart_init+0x32>
    1070:	e146      	b.n	1300 <usart_init+0x2c0>
    1072:	4ba8      	ldr	r3, [pc, #672]	; (1314 <usart_init+0x2d4>)
    1074:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1076:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1078:	2701      	movs	r7, #1
    107a:	408f      	lsls	r7, r1
    107c:	1c39      	adds	r1, r7, #0
    107e:	4301      	orrs	r1, r0
    1080:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1082:	a90f      	add	r1, sp, #60	; 0x3c
    1084:	272d      	movs	r7, #45	; 0x2d
    1086:	5df3      	ldrb	r3, [r6, r7]
    1088:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    108a:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    108c:	b2d2      	uxtb	r2, r2
    108e:	4690      	mov	r8, r2
    1090:	1c10      	adds	r0, r2, #0
    1092:	4ba1      	ldr	r3, [pc, #644]	; (1318 <usart_init+0x2d8>)
    1094:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1096:	4640      	mov	r0, r8
    1098:	4ba0      	ldr	r3, [pc, #640]	; (131c <usart_init+0x2dc>)
    109a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    109c:	5df0      	ldrb	r0, [r6, r7]
    109e:	2100      	movs	r1, #0
    10a0:	4b9f      	ldr	r3, [pc, #636]	; (1320 <usart_init+0x2e0>)
    10a2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    10a4:	7af3      	ldrb	r3, [r6, #11]
    10a6:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    10a8:	2324      	movs	r3, #36	; 0x24
    10aa:	5cf3      	ldrb	r3, [r6, r3]
    10ac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    10ae:	2325      	movs	r3, #37	; 0x25
    10b0:	5cf3      	ldrb	r3, [r6, r3]
    10b2:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    10b4:	7ef3      	ldrb	r3, [r6, #27]
    10b6:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    10b8:	7f33      	ldrb	r3, [r6, #28]
    10ba:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10bc:	6829      	ldr	r1, [r5, #0]
    10be:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10c0:	1c08      	adds	r0, r1, #0
    10c2:	4b93      	ldr	r3, [pc, #588]	; (1310 <usart_init+0x2d0>)
    10c4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10c6:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    10c8:	2200      	movs	r2, #0
    10ca:	466b      	mov	r3, sp
    10cc:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    10ce:	8a32      	ldrh	r2, [r6, #16]
    10d0:	9202      	str	r2, [sp, #8]
    10d2:	2380      	movs	r3, #128	; 0x80
    10d4:	01db      	lsls	r3, r3, #7
    10d6:	429a      	cmp	r2, r3
    10d8:	d021      	beq.n	111e <usart_init+0xde>
    10da:	2380      	movs	r3, #128	; 0x80
    10dc:	01db      	lsls	r3, r3, #7
    10de:	429a      	cmp	r2, r3
    10e0:	d804      	bhi.n	10ec <usart_init+0xac>
    10e2:	2380      	movs	r3, #128	; 0x80
    10e4:	019b      	lsls	r3, r3, #6
    10e6:	429a      	cmp	r2, r3
    10e8:	d011      	beq.n	110e <usart_init+0xce>
    10ea:	e008      	b.n	10fe <usart_init+0xbe>
    10ec:	23c0      	movs	r3, #192	; 0xc0
    10ee:	01db      	lsls	r3, r3, #7
    10f0:	9f02      	ldr	r7, [sp, #8]
    10f2:	429f      	cmp	r7, r3
    10f4:	d00f      	beq.n	1116 <usart_init+0xd6>
    10f6:	2380      	movs	r3, #128	; 0x80
    10f8:	021b      	lsls	r3, r3, #8
    10fa:	429f      	cmp	r7, r3
    10fc:	d003      	beq.n	1106 <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10fe:	2710      	movs	r7, #16
    1100:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1102:	2700      	movs	r7, #0
    1104:	e00e      	b.n	1124 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1106:	2703      	movs	r7, #3
    1108:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    110a:	2700      	movs	r7, #0
    110c:	e00a      	b.n	1124 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    110e:	2710      	movs	r7, #16
    1110:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1112:	2701      	movs	r7, #1
    1114:	e006      	b.n	1124 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1116:	2708      	movs	r7, #8
    1118:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    111a:	2701      	movs	r7, #1
    111c:	e002      	b.n	1124 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    111e:	2708      	movs	r7, #8
    1120:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1122:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1124:	6831      	ldr	r1, [r6, #0]
    1126:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    1128:	68f2      	ldr	r2, [r6, #12]
    112a:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    112c:	6973      	ldr	r3, [r6, #20]
    112e:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1130:	7e31      	ldrb	r1, [r6, #24]
    1132:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1134:	2326      	movs	r3, #38	; 0x26
    1136:	5cf3      	ldrb	r3, [r6, r3]
    1138:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    113a:	6873      	ldr	r3, [r6, #4]
    113c:	2b00      	cmp	r3, #0
    113e:	d013      	beq.n	1168 <usart_init+0x128>
    1140:	2280      	movs	r2, #128	; 0x80
    1142:	0552      	lsls	r2, r2, #21
    1144:	4293      	cmp	r3, r2
    1146:	d12e      	bne.n	11a6 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1148:	2327      	movs	r3, #39	; 0x27
    114a:	5cf3      	ldrb	r3, [r6, r3]
    114c:	2b00      	cmp	r3, #0
    114e:	d12e      	bne.n	11ae <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1150:	6a37      	ldr	r7, [r6, #32]
    1152:	b2c0      	uxtb	r0, r0
    1154:	4b73      	ldr	r3, [pc, #460]	; (1324 <usart_init+0x2e4>)
    1156:	4798      	blx	r3
    1158:	1c01      	adds	r1, r0, #0
    115a:	1c38      	adds	r0, r7, #0
    115c:	466a      	mov	r2, sp
    115e:	3226      	adds	r2, #38	; 0x26
    1160:	4b71      	ldr	r3, [pc, #452]	; (1328 <usart_init+0x2e8>)
    1162:	4798      	blx	r3
    1164:	1c03      	adds	r3, r0, #0
    1166:	e01f      	b.n	11a8 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    1168:	2327      	movs	r3, #39	; 0x27
    116a:	5cf3      	ldrb	r3, [r6, r3]
    116c:	2b00      	cmp	r3, #0
    116e:	d00a      	beq.n	1186 <usart_init+0x146>
				status_code =
    1170:	9a06      	ldr	r2, [sp, #24]
    1172:	9200      	str	r2, [sp, #0]
    1174:	6a30      	ldr	r0, [r6, #32]
    1176:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1178:	466a      	mov	r2, sp
    117a:	3226      	adds	r2, #38	; 0x26
    117c:	1c3b      	adds	r3, r7, #0
    117e:	4f6b      	ldr	r7, [pc, #428]	; (132c <usart_init+0x2ec>)
    1180:	47b8      	blx	r7
    1182:	1c03      	adds	r3, r0, #0
    1184:	e010      	b.n	11a8 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1186:	6a31      	ldr	r1, [r6, #32]
    1188:	9107      	str	r1, [sp, #28]
    118a:	b2c0      	uxtb	r0, r0
    118c:	4b65      	ldr	r3, [pc, #404]	; (1324 <usart_init+0x2e4>)
    118e:	4798      	blx	r3
    1190:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1192:	9a06      	ldr	r2, [sp, #24]
    1194:	9200      	str	r2, [sp, #0]
    1196:	9807      	ldr	r0, [sp, #28]
    1198:	466a      	mov	r2, sp
    119a:	3226      	adds	r2, #38	; 0x26
    119c:	1c3b      	adds	r3, r7, #0
    119e:	4f63      	ldr	r7, [pc, #396]	; (132c <usart_init+0x2ec>)
    11a0:	47b8      	blx	r7
    11a2:	1c03      	adds	r3, r0, #0
    11a4:	e000      	b.n	11a8 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    11a6:	2300      	movs	r3, #0
    11a8:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    11aa:	d000      	beq.n	11ae <usart_init+0x16e>
    11ac:	e0a8      	b.n	1300 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    11ae:	7e73      	ldrb	r3, [r6, #25]
    11b0:	2b00      	cmp	r3, #0
    11b2:	d002      	beq.n	11ba <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    11b4:	7eb3      	ldrb	r3, [r6, #26]
    11b6:	4641      	mov	r1, r8
    11b8:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    11ba:	682a      	ldr	r2, [r5, #0]
    11bc:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11be:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    11c0:	2b00      	cmp	r3, #0
    11c2:	d1fc      	bne.n	11be <usart_init+0x17e>
    11c4:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    11c6:	466b      	mov	r3, sp
    11c8:	3326      	adds	r3, #38	; 0x26
    11ca:	881b      	ldrh	r3, [r3, #0]
    11cc:	4642      	mov	r2, r8
    11ce:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    11d0:	464b      	mov	r3, r9
    11d2:	9f03      	ldr	r7, [sp, #12]
    11d4:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    11d6:	9f04      	ldr	r7, [sp, #16]
    11d8:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    11da:	6871      	ldr	r1, [r6, #4]
    11dc:	430b      	orrs	r3, r1
		config->sample_rate |
    11de:	9f02      	ldr	r7, [sp, #8]
    11e0:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11e2:	4652      	mov	r2, sl
    11e4:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    11e6:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11e8:	4659      	mov	r1, fp
    11ea:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    11ec:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    11ee:	2327      	movs	r3, #39	; 0x27
    11f0:	5cf3      	ldrb	r3, [r6, r3]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d101      	bne.n	11fa <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    11f6:	2304      	movs	r3, #4
    11f8:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    11fa:	7e71      	ldrb	r1, [r6, #25]
    11fc:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    11fe:	7f33      	ldrb	r3, [r6, #28]
    1200:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1202:	4319      	orrs	r1, r3
    1204:	7af2      	ldrb	r2, [r6, #11]
    1206:	7ab3      	ldrb	r3, [r6, #10]
    1208:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    120a:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    120c:	7f73      	ldrb	r3, [r6, #29]
    120e:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1210:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1212:	2324      	movs	r3, #36	; 0x24
    1214:	5cf3      	ldrb	r3, [r6, r3]
    1216:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1218:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    121a:	2325      	movs	r3, #37	; 0x25
    121c:	5cf3      	ldrb	r3, [r6, r3]
    121e:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1220:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1222:	8933      	ldrh	r3, [r6, #8]
    1224:	2bff      	cmp	r3, #255	; 0xff
    1226:	d00b      	beq.n	1240 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1228:	7ef2      	ldrb	r2, [r6, #27]
    122a:	2a00      	cmp	r2, #0
    122c:	d003      	beq.n	1236 <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    122e:	22a0      	movs	r2, #160	; 0xa0
    1230:	04d2      	lsls	r2, r2, #19
    1232:	4317      	orrs	r7, r2
    1234:	e002      	b.n	123c <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1236:	2280      	movs	r2, #128	; 0x80
    1238:	0452      	lsls	r2, r2, #17
    123a:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    123c:	4319      	orrs	r1, r3
    123e:	e005      	b.n	124c <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1240:	7ef3      	ldrb	r3, [r6, #27]
    1242:	2b00      	cmp	r3, #0
    1244:	d002      	beq.n	124c <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1246:	2380      	movs	r3, #128	; 0x80
    1248:	04db      	lsls	r3, r3, #19
    124a:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    124c:	232c      	movs	r3, #44	; 0x2c
    124e:	5cf3      	ldrb	r3, [r6, r3]
    1250:	2b00      	cmp	r3, #0
    1252:	d103      	bne.n	125c <usart_init+0x21c>
    1254:	4b36      	ldr	r3, [pc, #216]	; (1330 <usart_init+0x2f0>)
    1256:	789b      	ldrb	r3, [r3, #2]
    1258:	079a      	lsls	r2, r3, #30
    125a:	d501      	bpl.n	1260 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    125c:	2380      	movs	r3, #128	; 0x80
    125e:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1260:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1262:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1264:	2b00      	cmp	r3, #0
    1266:	d1fc      	bne.n	1262 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    1268:	4643      	mov	r3, r8
    126a:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    126c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    126e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1270:	2b00      	cmp	r3, #0
    1272:	d1fc      	bne.n	126e <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1274:	4641      	mov	r1, r8
    1276:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1278:	ab0e      	add	r3, sp, #56	; 0x38
    127a:	2280      	movs	r2, #128	; 0x80
    127c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    127e:	2200      	movs	r2, #0
    1280:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1282:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1284:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    1286:	6b32      	ldr	r2, [r6, #48]	; 0x30
    1288:	920a      	str	r2, [sp, #40]	; 0x28
    128a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    128c:	930b      	str	r3, [sp, #44]	; 0x2c
    128e:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    1290:	970c      	str	r7, [sp, #48]	; 0x30
    1292:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    1294:	960d      	str	r6, [sp, #52]	; 0x34
    1296:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1298:	ae0e      	add	r6, sp, #56	; 0x38
    129a:	b2f9      	uxtb	r1, r7
    129c:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    129e:	aa0a      	add	r2, sp, #40	; 0x28
    12a0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    12a2:	2800      	cmp	r0, #0
    12a4:	d102      	bne.n	12ac <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12a6:	1c20      	adds	r0, r4, #0
    12a8:	4a22      	ldr	r2, [pc, #136]	; (1334 <usart_init+0x2f4>)
    12aa:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    12ac:	1c43      	adds	r3, r0, #1
    12ae:	d005      	beq.n	12bc <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    12b0:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    12b2:	0c00      	lsrs	r0, r0, #16
    12b4:	b2c0      	uxtb	r0, r0
    12b6:	1c31      	adds	r1, r6, #0
    12b8:	4a1f      	ldr	r2, [pc, #124]	; (1338 <usart_init+0x2f8>)
    12ba:	4790      	blx	r2
    12bc:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    12be:	2f04      	cmp	r7, #4
    12c0:	d1eb      	bne.n	129a <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    12c2:	2300      	movs	r3, #0
    12c4:	60eb      	str	r3, [r5, #12]
    12c6:	612b      	str	r3, [r5, #16]
    12c8:	616b      	str	r3, [r5, #20]
    12ca:	61ab      	str	r3, [r5, #24]
    12cc:	61eb      	str	r3, [r5, #28]
    12ce:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    12d0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    12d2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    12d4:	2200      	movs	r2, #0
    12d6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    12d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    12da:	2330      	movs	r3, #48	; 0x30
    12dc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    12de:	2331      	movs	r3, #49	; 0x31
    12e0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    12e2:	2332      	movs	r3, #50	; 0x32
    12e4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    12e6:	2333      	movs	r3, #51	; 0x33
    12e8:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    12ea:	6828      	ldr	r0, [r5, #0]
    12ec:	4b08      	ldr	r3, [pc, #32]	; (1310 <usart_init+0x2d0>)
    12ee:	4798      	blx	r3
    12f0:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    12f2:	4912      	ldr	r1, [pc, #72]	; (133c <usart_init+0x2fc>)
    12f4:	4b12      	ldr	r3, [pc, #72]	; (1340 <usart_init+0x300>)
    12f6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12f8:	00a4      	lsls	r4, r4, #2
    12fa:	4b12      	ldr	r3, [pc, #72]	; (1344 <usart_init+0x304>)
    12fc:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    12fe:	2000      	movs	r0, #0
}
    1300:	b011      	add	sp, #68	; 0x44
    1302:	bc3c      	pop	{r2, r3, r4, r5}
    1304:	4690      	mov	r8, r2
    1306:	4699      	mov	r9, r3
    1308:	46a2      	mov	sl, r4
    130a:	46ab      	mov	fp, r5
    130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	00000699 	.word	0x00000699
    1314:	40000400 	.word	0x40000400
    1318:	00004149 	.word	0x00004149
    131c:	000040bd 	.word	0x000040bd
    1320:	000004c1 	.word	0x000004c1
    1324:	00004165 	.word	0x00004165
    1328:	000002e5 	.word	0x000002e5
    132c:	00000311 	.word	0x00000311
    1330:	41002000 	.word	0x41002000
    1334:	00000511 	.word	0x00000511
    1338:	00004225 	.word	0x00004225
    133c:	000013ed 	.word	0x000013ed
    1340:	0000158d 	.word	0x0000158d
    1344:	200007c0 	.word	0x200007c0

00001348 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1348:	b510      	push	{r4, lr}
    134a:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    134c:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    134e:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1350:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1352:	2c00      	cmp	r4, #0
    1354:	d00d      	beq.n	1372 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1356:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    1358:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    135a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    135c:	2a00      	cmp	r2, #0
    135e:	d108      	bne.n	1372 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1360:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1362:	2a00      	cmp	r2, #0
    1364:	d1fc      	bne.n	1360 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1366:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1368:	2102      	movs	r1, #2
    136a:	7e1a      	ldrb	r2, [r3, #24]
    136c:	420a      	tst	r2, r1
    136e:	d0fc      	beq.n	136a <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1370:	2000      	movs	r0, #0
}
    1372:	bd10      	pop	{r4, pc}

00001374 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1374:	b510      	push	{r4, lr}
    1376:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1378:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    137a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    137c:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    137e:	2a00      	cmp	r2, #0
    1380:	d033      	beq.n	13ea <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1382:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1384:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1386:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1388:	2b00      	cmp	r3, #0
    138a:	d12e      	bne.n	13ea <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    138c:	7e23      	ldrb	r3, [r4, #24]
    138e:	075a      	lsls	r2, r3, #29
    1390:	d52b      	bpl.n	13ea <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1392:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1394:	2b00      	cmp	r3, #0
    1396:	d1fc      	bne.n	1392 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1398:	8b63      	ldrh	r3, [r4, #26]
    139a:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    139c:	069a      	lsls	r2, r3, #26
    139e:	d021      	beq.n	13e4 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    13a0:	079a      	lsls	r2, r3, #30
    13a2:	d503      	bpl.n	13ac <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    13a4:	2302      	movs	r3, #2
    13a6:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    13a8:	201a      	movs	r0, #26
    13aa:	e01e      	b.n	13ea <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    13ac:	075a      	lsls	r2, r3, #29
    13ae:	d503      	bpl.n	13b8 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    13b0:	2304      	movs	r3, #4
    13b2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    13b4:	201e      	movs	r0, #30
    13b6:	e018      	b.n	13ea <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    13b8:	07da      	lsls	r2, r3, #31
    13ba:	d503      	bpl.n	13c4 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    13bc:	2301      	movs	r3, #1
    13be:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    13c0:	2013      	movs	r0, #19
    13c2:	e012      	b.n	13ea <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    13c4:	06da      	lsls	r2, r3, #27
    13c6:	d505      	bpl.n	13d4 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    13c8:	8b62      	ldrh	r2, [r4, #26]
    13ca:	2310      	movs	r3, #16
    13cc:	4313      	orrs	r3, r2
    13ce:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    13d0:	2042      	movs	r0, #66	; 0x42
    13d2:	e00a      	b.n	13ea <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    13d4:	069a      	lsls	r2, r3, #26
    13d6:	d505      	bpl.n	13e4 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    13d8:	8b62      	ldrh	r2, [r4, #26]
    13da:	2320      	movs	r3, #32
    13dc:	4313      	orrs	r3, r2
    13de:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    13e0:	2041      	movs	r0, #65	; 0x41
    13e2:	e002      	b.n	13ea <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    13e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    13e6:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    13e8:	2000      	movs	r0, #0
}
    13ea:	bd10      	pop	{r4, pc}

000013ec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    13ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    13ee:	0080      	lsls	r0, r0, #2
    13f0:	4b64      	ldr	r3, [pc, #400]	; (1584 <_usart_interrupt_handler+0x198>)
    13f2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    13f4:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    13f6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    13f8:	2b00      	cmp	r3, #0
    13fa:	d1fc      	bne.n	13f6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    13fc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    13fe:	7da6      	ldrb	r6, [r4, #22]
    1400:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    1402:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1404:	5ceb      	ldrb	r3, [r5, r3]
    1406:	2230      	movs	r2, #48	; 0x30
    1408:	5caf      	ldrb	r7, [r5, r2]
    140a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    140c:	07f1      	lsls	r1, r6, #31
    140e:	d520      	bpl.n	1452 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    1410:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1412:	b29b      	uxth	r3, r3
    1414:	2b00      	cmp	r3, #0
    1416:	d01a      	beq.n	144e <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1418:	6aab      	ldr	r3, [r5, #40]	; 0x28
    141a:	781a      	ldrb	r2, [r3, #0]
    141c:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    141e:	1c59      	adds	r1, r3, #1
    1420:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1422:	7969      	ldrb	r1, [r5, #5]
    1424:	2901      	cmp	r1, #1
    1426:	d104      	bne.n	1432 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1428:	7859      	ldrb	r1, [r3, #1]
    142a:	0209      	lsls	r1, r1, #8
    142c:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    142e:	3302      	adds	r3, #2
    1430:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1432:	05d3      	lsls	r3, r2, #23
    1434:	0ddb      	lsrs	r3, r3, #23
    1436:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1438:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    143a:	3b01      	subs	r3, #1
    143c:	b29b      	uxth	r3, r3
    143e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1440:	2b00      	cmp	r3, #0
    1442:	d106      	bne.n	1452 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1444:	2301      	movs	r3, #1
    1446:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1448:	2302      	movs	r3, #2
    144a:	75a3      	strb	r3, [r4, #22]
    144c:	e001      	b.n	1452 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    144e:	2301      	movs	r3, #1
    1450:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1452:	07b2      	lsls	r2, r6, #30
    1454:	d509      	bpl.n	146a <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1456:	2302      	movs	r3, #2
    1458:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    145a:	2200      	movs	r2, #0
    145c:	2333      	movs	r3, #51	; 0x33
    145e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1460:	07fb      	lsls	r3, r7, #31
    1462:	d502      	bpl.n	146a <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1464:	1c28      	adds	r0, r5, #0
    1466:	68e9      	ldr	r1, [r5, #12]
    1468:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    146a:	0772      	lsls	r2, r6, #29
    146c:	d56a      	bpl.n	1544 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    146e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1470:	b29b      	uxth	r3, r3
    1472:	2b00      	cmp	r3, #0
    1474:	d064      	beq.n	1540 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1476:	8b63      	ldrh	r3, [r4, #26]
    1478:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    147a:	0719      	lsls	r1, r3, #28
    147c:	d402      	bmi.n	1484 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    147e:	223f      	movs	r2, #63	; 0x3f
    1480:	4013      	ands	r3, r2
    1482:	e001      	b.n	1488 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1484:	2237      	movs	r2, #55	; 0x37
    1486:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1488:	2b00      	cmp	r3, #0
    148a:	d037      	beq.n	14fc <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    148c:	079a      	lsls	r2, r3, #30
    148e:	d507      	bpl.n	14a0 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1490:	221a      	movs	r2, #26
    1492:	2332      	movs	r3, #50	; 0x32
    1494:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1496:	8b62      	ldrh	r2, [r4, #26]
    1498:	2302      	movs	r3, #2
    149a:	4313      	orrs	r3, r2
    149c:	8363      	strh	r3, [r4, #26]
    149e:	e027      	b.n	14f0 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    14a0:	0759      	lsls	r1, r3, #29
    14a2:	d507      	bpl.n	14b4 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    14a4:	221e      	movs	r2, #30
    14a6:	2332      	movs	r3, #50	; 0x32
    14a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    14aa:	8b62      	ldrh	r2, [r4, #26]
    14ac:	2304      	movs	r3, #4
    14ae:	4313      	orrs	r3, r2
    14b0:	8363      	strh	r3, [r4, #26]
    14b2:	e01d      	b.n	14f0 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    14b4:	07da      	lsls	r2, r3, #31
    14b6:	d507      	bpl.n	14c8 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    14b8:	2213      	movs	r2, #19
    14ba:	2332      	movs	r3, #50	; 0x32
    14bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    14be:	8b62      	ldrh	r2, [r4, #26]
    14c0:	2301      	movs	r3, #1
    14c2:	4313      	orrs	r3, r2
    14c4:	8363      	strh	r3, [r4, #26]
    14c6:	e013      	b.n	14f0 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    14c8:	06d9      	lsls	r1, r3, #27
    14ca:	d507      	bpl.n	14dc <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    14cc:	2242      	movs	r2, #66	; 0x42
    14ce:	2332      	movs	r3, #50	; 0x32
    14d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    14d2:	8b62      	ldrh	r2, [r4, #26]
    14d4:	2310      	movs	r3, #16
    14d6:	4313      	orrs	r3, r2
    14d8:	8363      	strh	r3, [r4, #26]
    14da:	e009      	b.n	14f0 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    14dc:	2220      	movs	r2, #32
    14de:	421a      	tst	r2, r3
    14e0:	d006      	beq.n	14f0 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    14e2:	2241      	movs	r2, #65	; 0x41
    14e4:	2332      	movs	r3, #50	; 0x32
    14e6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    14e8:	8b62      	ldrh	r2, [r4, #26]
    14ea:	2320      	movs	r3, #32
    14ec:	4313      	orrs	r3, r2
    14ee:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    14f0:	077a      	lsls	r2, r7, #29
    14f2:	d527      	bpl.n	1544 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    14f4:	1c28      	adds	r0, r5, #0
    14f6:	696b      	ldr	r3, [r5, #20]
    14f8:	4798      	blx	r3
    14fa:	e023      	b.n	1544 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    14fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    14fe:	05d2      	lsls	r2, r2, #23
    1500:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1502:	b2d3      	uxtb	r3, r2
    1504:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1506:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1508:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    150a:	1c59      	adds	r1, r3, #1
    150c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    150e:	7969      	ldrb	r1, [r5, #5]
    1510:	2901      	cmp	r1, #1
    1512:	d104      	bne.n	151e <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1514:	0a12      	lsrs	r2, r2, #8
    1516:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1518:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    151a:	3301      	adds	r3, #1
    151c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    151e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1520:	3b01      	subs	r3, #1
    1522:	b29b      	uxth	r3, r3
    1524:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1526:	2b00      	cmp	r3, #0
    1528:	d10c      	bne.n	1544 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    152a:	2304      	movs	r3, #4
    152c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    152e:	2200      	movs	r2, #0
    1530:	2332      	movs	r3, #50	; 0x32
    1532:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1534:	07ba      	lsls	r2, r7, #30
    1536:	d505      	bpl.n	1544 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1538:	1c28      	adds	r0, r5, #0
    153a:	692b      	ldr	r3, [r5, #16]
    153c:	4798      	blx	r3
    153e:	e001      	b.n	1544 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1540:	2304      	movs	r3, #4
    1542:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1544:	06f1      	lsls	r1, r6, #27
    1546:	d507      	bpl.n	1558 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1548:	2310      	movs	r3, #16
    154a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    154c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    154e:	06fa      	lsls	r2, r7, #27
    1550:	d502      	bpl.n	1558 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1552:	1c28      	adds	r0, r5, #0
    1554:	69eb      	ldr	r3, [r5, #28]
    1556:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1558:	06b1      	lsls	r1, r6, #26
    155a:	d507      	bpl.n	156c <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    155c:	2320      	movs	r3, #32
    155e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1560:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1562:	073a      	lsls	r2, r7, #28
    1564:	d502      	bpl.n	156c <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1566:	1c28      	adds	r0, r5, #0
    1568:	69ab      	ldr	r3, [r5, #24]
    156a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    156c:	0731      	lsls	r1, r6, #28
    156e:	d507      	bpl.n	1580 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1570:	2308      	movs	r3, #8
    1572:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1574:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1576:	06ba      	lsls	r2, r7, #26
    1578:	d502      	bpl.n	1580 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    157a:	6a2b      	ldr	r3, [r5, #32]
    157c:	1c28      	adds	r0, r5, #0
    157e:	4798      	blx	r3
		}
	}
#endif
}
    1580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1582:	46c0      	nop			; (mov r8, r8)
    1584:	200007c0 	.word	0x200007c0

00001588 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1588:	4770      	bx	lr
    158a:	46c0      	nop			; (mov r8, r8)

0000158c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    158c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    158e:	4b0a      	ldr	r3, [pc, #40]	; (15b8 <_sercom_set_handler+0x2c>)
    1590:	781b      	ldrb	r3, [r3, #0]
    1592:	2b00      	cmp	r3, #0
    1594:	d10c      	bne.n	15b0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1596:	4f09      	ldr	r7, [pc, #36]	; (15bc <_sercom_set_handler+0x30>)
    1598:	4e09      	ldr	r6, [pc, #36]	; (15c0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    159a:	4d0a      	ldr	r5, [pc, #40]	; (15c4 <_sercom_set_handler+0x38>)
    159c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    159e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    15a0:	195a      	adds	r2, r3, r5
    15a2:	6014      	str	r4, [r2, #0]
    15a4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    15a6:	2b18      	cmp	r3, #24
    15a8:	d1f9      	bne.n	159e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    15aa:	2201      	movs	r2, #1
    15ac:	4b02      	ldr	r3, [pc, #8]	; (15b8 <_sercom_set_handler+0x2c>)
    15ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    15b0:	0080      	lsls	r0, r0, #2
    15b2:	4b02      	ldr	r3, [pc, #8]	; (15bc <_sercom_set_handler+0x30>)
    15b4:	50c1      	str	r1, [r0, r3]
}
    15b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15b8:	20000098 	.word	0x20000098
    15bc:	2000009c 	.word	0x2000009c
    15c0:	00001589 	.word	0x00001589
    15c4:	200007c0 	.word	0x200007c0

000015c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    15c8:	b510      	push	{r4, lr}
    15ca:	b082      	sub	sp, #8
    15cc:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    15ce:	4668      	mov	r0, sp
    15d0:	4905      	ldr	r1, [pc, #20]	; (15e8 <_sercom_get_interrupt_vector+0x20>)
    15d2:	2206      	movs	r2, #6
    15d4:	4b05      	ldr	r3, [pc, #20]	; (15ec <_sercom_get_interrupt_vector+0x24>)
    15d6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    15d8:	1c20      	adds	r0, r4, #0
    15da:	4b05      	ldr	r3, [pc, #20]	; (15f0 <_sercom_get_interrupt_vector+0x28>)
    15dc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    15de:	466b      	mov	r3, sp
    15e0:	5618      	ldrsb	r0, [r3, r0]
}
    15e2:	b002      	add	sp, #8
    15e4:	bd10      	pop	{r4, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	0000582c 	.word	0x0000582c
    15ec:	00004845 	.word	0x00004845
    15f0:	00000699 	.word	0x00000699

000015f4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    15f4:	b508      	push	{r3, lr}
    15f6:	4b02      	ldr	r3, [pc, #8]	; (1600 <SERCOM0_Handler+0xc>)
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	2000      	movs	r0, #0
    15fc:	4798      	blx	r3
    15fe:	bd08      	pop	{r3, pc}
    1600:	2000009c 	.word	0x2000009c

00001604 <SERCOM1_Handler>:
    1604:	b508      	push	{r3, lr}
    1606:	4b02      	ldr	r3, [pc, #8]	; (1610 <SERCOM1_Handler+0xc>)
    1608:	685b      	ldr	r3, [r3, #4]
    160a:	2001      	movs	r0, #1
    160c:	4798      	blx	r3
    160e:	bd08      	pop	{r3, pc}
    1610:	2000009c 	.word	0x2000009c

00001614 <SERCOM2_Handler>:
    1614:	b508      	push	{r3, lr}
    1616:	4b02      	ldr	r3, [pc, #8]	; (1620 <SERCOM2_Handler+0xc>)
    1618:	689b      	ldr	r3, [r3, #8]
    161a:	2002      	movs	r0, #2
    161c:	4798      	blx	r3
    161e:	bd08      	pop	{r3, pc}
    1620:	2000009c 	.word	0x2000009c

00001624 <SERCOM3_Handler>:
    1624:	b508      	push	{r3, lr}
    1626:	4b02      	ldr	r3, [pc, #8]	; (1630 <SERCOM3_Handler+0xc>)
    1628:	68db      	ldr	r3, [r3, #12]
    162a:	2003      	movs	r0, #3
    162c:	4798      	blx	r3
    162e:	bd08      	pop	{r3, pc}
    1630:	2000009c 	.word	0x2000009c

00001634 <SERCOM4_Handler>:
    1634:	b508      	push	{r3, lr}
    1636:	4b02      	ldr	r3, [pc, #8]	; (1640 <SERCOM4_Handler+0xc>)
    1638:	691b      	ldr	r3, [r3, #16]
    163a:	2004      	movs	r0, #4
    163c:	4798      	blx	r3
    163e:	bd08      	pop	{r3, pc}
    1640:	2000009c 	.word	0x2000009c

00001644 <SERCOM5_Handler>:
    1644:	b508      	push	{r3, lr}
    1646:	4b02      	ldr	r3, [pc, #8]	; (1650 <SERCOM5_Handler+0xc>)
    1648:	695b      	ldr	r3, [r3, #20]
    164a:	2005      	movs	r0, #5
    164c:	4798      	blx	r3
    164e:	bd08      	pop	{r3, pc}
    1650:	2000009c 	.word	0x2000009c

00001654 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1654:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1656:	2a00      	cmp	r2, #0
    1658:	d10f      	bne.n	167a <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    165a:	008b      	lsls	r3, r1, #2
    165c:	4a08      	ldr	r2, [pc, #32]	; (1680 <extint_register_callback+0x2c>)
    165e:	589a      	ldr	r2, [r3, r2]
    1660:	2a00      	cmp	r2, #0
    1662:	d104      	bne.n	166e <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
    1664:	1c19      	adds	r1, r3, #0
    1666:	4b06      	ldr	r3, [pc, #24]	; (1680 <extint_register_callback+0x2c>)
    1668:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    166a:	2300      	movs	r3, #0
    166c:	e005      	b.n	167a <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    166e:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    1670:	1a12      	subs	r2, r2, r0
    1672:	1e50      	subs	r0, r2, #1
    1674:	4182      	sbcs	r2, r0
    1676:	4252      	negs	r2, r2
    1678:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    167a:	1c18      	adds	r0, r3, #0
    167c:	4770      	bx	lr
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	20000764 	.word	0x20000764

00001684 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1684:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1686:	2900      	cmp	r1, #0
    1688:	d107      	bne.n	169a <extint_chan_enable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    168a:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    168c:	281f      	cmp	r0, #31
    168e:	d800      	bhi.n	1692 <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1690:	4b03      	ldr	r3, [pc, #12]	; (16a0 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    1692:	2201      	movs	r2, #1
    1694:	4082      	lsls	r2, r0
    1696:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1698:	2300      	movs	r3, #0
}
    169a:	1c18      	adds	r0, r3, #0
    169c:	4770      	bx	lr
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	40001800 	.word	0x40001800

000016a4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    16a4:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    16a6:	2900      	cmp	r1, #0
    16a8:	d107      	bne.n	16ba <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    16aa:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    16ac:	281f      	cmp	r0, #31
    16ae:	d800      	bhi.n	16b2 <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    16b0:	4b03      	ldr	r3, [pc, #12]	; (16c0 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    16b2:	2201      	movs	r2, #1
    16b4:	4082      	lsls	r2, r0
    16b6:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    16b8:	2300      	movs	r3, #0
}
    16ba:	1c18      	adds	r0, r3, #0
    16bc:	4770      	bx	lr
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	40001800 	.word	0x40001800

000016c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    16c4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    16c6:	2200      	movs	r2, #0
    16c8:	4b16      	ldr	r3, [pc, #88]	; (1724 <EIC_Handler+0x60>)
    16ca:	701a      	strb	r2, [r3, #0]
    16cc:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    16ce:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    16d0:	4d15      	ldr	r5, [pc, #84]	; (1728 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    16d2:	4c14      	ldr	r4, [pc, #80]	; (1724 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    16d4:	2b1f      	cmp	r3, #31
    16d6:	d910      	bls.n	16fa <EIC_Handler+0x36>
    16d8:	e019      	b.n	170e <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    16da:	4914      	ldr	r1, [pc, #80]	; (172c <EIC_Handler+0x68>)
    16dc:	e000      	b.n	16e0 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
    16de:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    16e0:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    16e2:	009b      	lsls	r3, r3, #2
    16e4:	595b      	ldr	r3, [r3, r5]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d000      	beq.n	16ec <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    16ea:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    16ec:	7823      	ldrb	r3, [r4, #0]
    16ee:	3301      	adds	r3, #1
    16f0:	b2db      	uxtb	r3, r3
    16f2:	7023      	strb	r3, [r4, #0]
    16f4:	2b0f      	cmp	r3, #15
    16f6:	d814      	bhi.n	1722 <EIC_Handler+0x5e>
    16f8:	e7ec      	b.n	16d4 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    16fa:	1c32      	adds	r2, r6, #0
    16fc:	401a      	ands	r2, r3
    16fe:	2101      	movs	r1, #1
    1700:	4091      	lsls	r1, r2
    1702:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    1704:	4909      	ldr	r1, [pc, #36]	; (172c <EIC_Handler+0x68>)
    1706:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1708:	4211      	tst	r1, r2
    170a:	d1e6      	bne.n	16da <EIC_Handler+0x16>
    170c:	e7ee      	b.n	16ec <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    170e:	1c32      	adds	r2, r6, #0
    1710:	401a      	ands	r2, r3
    1712:	2101      	movs	r1, #1
    1714:	4091      	lsls	r1, r2
    1716:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    1718:	2100      	movs	r1, #0
    171a:	6909      	ldr	r1, [r1, #16]
    171c:	4211      	tst	r1, r2
    171e:	d1de      	bne.n	16de <EIC_Handler+0x1a>
    1720:	e7e4      	b.n	16ec <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    1722:	bd70      	pop	{r4, r5, r6, pc}
    1724:	200007d8 	.word	0x200007d8
    1728:	20000764 	.word	0x20000764
    172c:	40001800 	.word	0x40001800

00001730 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1730:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1732:	2000      	movs	r0, #0
    1734:	4b08      	ldr	r3, [pc, #32]	; (1758 <delay_init+0x28>)
    1736:	4798      	blx	r3
	cycles_per_ms /= 1000;
    1738:	4c08      	ldr	r4, [pc, #32]	; (175c <delay_init+0x2c>)
    173a:	21fa      	movs	r1, #250	; 0xfa
    173c:	0089      	lsls	r1, r1, #2
    173e:	47a0      	blx	r4
    1740:	4b07      	ldr	r3, [pc, #28]	; (1760 <delay_init+0x30>)
    1742:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1744:	21fa      	movs	r1, #250	; 0xfa
    1746:	0089      	lsls	r1, r1, #2
    1748:	47a0      	blx	r4
    174a:	4b06      	ldr	r3, [pc, #24]	; (1764 <delay_init+0x34>)
    174c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    174e:	2205      	movs	r2, #5
    1750:	4b05      	ldr	r3, [pc, #20]	; (1768 <delay_init+0x38>)
    1752:	601a      	str	r2, [r3, #0]
}
    1754:	bd10      	pop	{r4, pc}
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	00004031 	.word	0x00004031
    175c:	00004715 	.word	0x00004715
    1760:	20000004 	.word	0x20000004
    1764:	20000000 	.word	0x20000000
    1768:	e000e010 	.word	0xe000e010

0000176c <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    176c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    176e:	4b08      	ldr	r3, [pc, #32]	; (1790 <delay_cycles_us+0x24>)
    1770:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1772:	4a08      	ldr	r2, [pc, #32]	; (1794 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    1774:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1776:	2180      	movs	r1, #128	; 0x80
    1778:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    177a:	e006      	b.n	178a <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    177c:	2c00      	cmp	r4, #0
    177e:	d004      	beq.n	178a <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    1780:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1782:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1784:	6813      	ldr	r3, [r2, #0]
    1786:	420b      	tst	r3, r1
    1788:	d0fc      	beq.n	1784 <delay_cycles_us+0x18>
    178a:	3801      	subs	r0, #1
    178c:	d2f6      	bcs.n	177c <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    178e:	bd30      	pop	{r4, r5, pc}
    1790:	20000000 	.word	0x20000000
    1794:	e000e010 	.word	0xe000e010

00001798 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1798:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    179a:	4b08      	ldr	r3, [pc, #32]	; (17bc <delay_cycles_ms+0x24>)
    179c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    179e:	4a08      	ldr	r2, [pc, #32]	; (17c0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    17a0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    17a2:	2180      	movs	r1, #128	; 0x80
    17a4:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    17a6:	e006      	b.n	17b6 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    17a8:	2c00      	cmp	r4, #0
    17aa:	d004      	beq.n	17b6 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    17ac:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    17ae:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    17b0:	6813      	ldr	r3, [r2, #0]
    17b2:	420b      	tst	r3, r1
    17b4:	d0fc      	beq.n	17b0 <delay_cycles_ms+0x18>
    17b6:	3801      	subs	r0, #1
    17b8:	d2f6      	bcs.n	17a8 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    17ba:	bd30      	pop	{r4, r5, pc}
    17bc:	20000004 	.word	0x20000004
    17c0:	e000e010 	.word	0xe000e010

000017c4 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    17c4:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    17c6:	490d      	ldr	r1, [pc, #52]	; (17fc <NWK_Init+0x38>)
    17c8:	2300      	movs	r3, #0
    17ca:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    17cc:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    17ce:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    17d0:	2258      	movs	r2, #88	; 0x58
    17d2:	528b      	strh	r3, [r1, r2]
    17d4:	1c0b      	adds	r3, r1, #0
    17d6:	3308      	adds	r3, #8
    17d8:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    17da:	2200      	movs	r2, #0
    17dc:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    17de:	428b      	cmp	r3, r1
    17e0:	d1fc      	bne.n	17dc <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <NWK_Init+0x3c>)
    17e4:	4798      	blx	r3
	nwkRxInit();
    17e6:	4b07      	ldr	r3, [pc, #28]	; (1804 <NWK_Init+0x40>)
    17e8:	4798      	blx	r3
	nwkFrameInit();
    17ea:	4b07      	ldr	r3, [pc, #28]	; (1808 <NWK_Init+0x44>)
    17ec:	4798      	blx	r3
	nwkDataReqInit();
    17ee:	4b07      	ldr	r3, [pc, #28]	; (180c <NWK_Init+0x48>)
    17f0:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    17f2:	4b07      	ldr	r3, [pc, #28]	; (1810 <NWK_Init+0x4c>)
    17f4:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    17f6:	4b07      	ldr	r3, [pc, #28]	; (1814 <NWK_Init+0x50>)
    17f8:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    17fa:	bd08      	pop	{r3, pc}
    17fc:	200007dc 	.word	0x200007dc
    1800:	0000266d 	.word	0x0000266d
    1804:	00001ed9 	.word	0x00001ed9
    1808:	00001a05 	.word	0x00001a05
    180c:	000018b5 	.word	0x000018b5
    1810:	00001af9 	.word	0x00001af9
    1814:	00002339 	.word	0x00002339

00001818 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    1818:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    181a:	4b02      	ldr	r3, [pc, #8]	; (1824 <NWK_SetAddr+0xc>)
    181c:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    181e:	4b02      	ldr	r3, [pc, #8]	; (1828 <NWK_SetAddr+0x10>)
    1820:	4798      	blx	r3
}
    1822:	bd08      	pop	{r3, pc}
    1824:	200007dc 	.word	0x200007dc
    1828:	00002a95 	.word	0x00002a95

0000182c <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    182c:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    182e:	4b02      	ldr	r3, [pc, #8]	; (1838 <NWK_SetPanId+0xc>)
    1830:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    1832:	4b02      	ldr	r3, [pc, #8]	; (183c <NWK_SetPanId+0x10>)
    1834:	4798      	blx	r3
}
    1836:	bd08      	pop	{r3, pc}
    1838:	200007dc 	.word	0x200007dc
    183c:	00002a75 	.word	0x00002a75

00001840 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    1840:	3002      	adds	r0, #2
    1842:	0080      	lsls	r0, r0, #2
    1844:	4b01      	ldr	r3, [pc, #4]	; (184c <NWK_OpenEndpoint+0xc>)
    1846:	50c1      	str	r1, [r0, r3]
}
    1848:	4770      	bx	lr
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	200007dc 	.word	0x200007dc

00001850 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    1850:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    1852:	4b04      	ldr	r3, [pc, #16]	; (1864 <NWK_TaskHandler+0x14>)
    1854:	4798      	blx	r3
	nwkTxTaskHandler();
    1856:	4b04      	ldr	r3, [pc, #16]	; (1868 <NWK_TaskHandler+0x18>)
    1858:	4798      	blx	r3
	nwkDataReqTaskHandler();
    185a:	4b04      	ldr	r3, [pc, #16]	; (186c <NWK_TaskHandler+0x1c>)
    185c:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    185e:	4b04      	ldr	r3, [pc, #16]	; (1870 <NWK_TaskHandler+0x20>)
    1860:	4798      	blx	r3
#endif
}
    1862:	bd08      	pop	{r3, pc}
    1864:	00001f75 	.word	0x00001f75
    1868:	00002871 	.word	0x00002871
    186c:	000018c1 	.word	0x000018c1
    1870:	0000242d 	.word	0x0000242d

00001874 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    1874:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1876:	4b0d      	ldr	r3, [pc, #52]	; (18ac <nwkDataReqTxConf+0x38>)
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	2b00      	cmp	r3, #0
    187c:	d012      	beq.n	18a4 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    187e:	685a      	ldr	r2, [r3, #4]
    1880:	4282      	cmp	r2, r0
    1882:	d10c      	bne.n	189e <nwkDataReqTxConf+0x2a>
    1884:	e002      	b.n	188c <nwkDataReqTxConf+0x18>
    1886:	685a      	ldr	r2, [r3, #4]
    1888:	4282      	cmp	r2, r0
    188a:	d108      	bne.n	189e <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    188c:	2285      	movs	r2, #133	; 0x85
    188e:	5c82      	ldrb	r2, [r0, r2]
    1890:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    1892:	2288      	movs	r2, #136	; 0x88
    1894:	5c82      	ldrb	r2, [r0, r2]
    1896:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1898:	2202      	movs	r2, #2
    189a:	721a      	strb	r2, [r3, #8]
			break;
    189c:	e002      	b.n	18a4 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	2b00      	cmp	r3, #0
    18a2:	d1f0      	bne.n	1886 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    18a4:	4b02      	ldr	r3, [pc, #8]	; (18b0 <nwkDataReqTxConf+0x3c>)
    18a6:	4798      	blx	r3
}
    18a8:	bd08      	pop	{r3, pc}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	200000b4 	.word	0x200000b4
    18b0:	00001a89 	.word	0x00001a89

000018b4 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    18b4:	2200      	movs	r2, #0
    18b6:	4b01      	ldr	r3, [pc, #4]	; (18bc <nwkDataReqInit+0x8>)
    18b8:	601a      	str	r2, [r3, #0]
}
    18ba:	4770      	bx	lr
    18bc:	200000b4 	.word	0x200000b4

000018c0 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    18c0:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    18c2:	4b4a      	ldr	r3, [pc, #296]	; (19ec <nwkDataReqTaskHandler+0x12c>)
    18c4:	681a      	ldr	r2, [r3, #0]
    18c6:	2a00      	cmp	r2, #0
    18c8:	d100      	bne.n	18cc <nwkDataReqTaskHandler+0xc>
    18ca:	e08d      	b.n	19e8 <nwkDataReqTaskHandler+0x128>
    18cc:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    18ce:	7a23      	ldrb	r3, [r4, #8]
    18d0:	2b00      	cmp	r3, #0
    18d2:	d002      	beq.n	18da <nwkDataReqTaskHandler+0x1a>
    18d4:	2b02      	cmp	r3, #2
    18d6:	d06d      	beq.n	19b4 <nwkDataReqTaskHandler+0xf4>
    18d8:	e082      	b.n	19e0 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    18da:	4b45      	ldr	r3, [pc, #276]	; (19f0 <nwkDataReqTaskHandler+0x130>)
    18dc:	4798      	blx	r3
    18de:	1e05      	subs	r5, r0, #0
    18e0:	d103      	bne.n	18ea <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    18e2:	2302      	movs	r3, #2
    18e4:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    18e6:	7723      	strb	r3, [r4, #28]
    18e8:	e07e      	b.n	19e8 <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    18ea:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    18ec:	2201      	movs	r2, #1
    18ee:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    18f0:	4b40      	ldr	r3, [pc, #256]	; (19f4 <nwkDataReqTaskHandler+0x134>)
    18f2:	2189      	movs	r1, #137	; 0x89
    18f4:	5443      	strb	r3, [r0, r1]
    18f6:	0a18      	lsrs	r0, r3, #8
    18f8:	218a      	movs	r1, #138	; 0x8a
    18fa:	5468      	strb	r0, [r5, r1]
    18fc:	0c18      	lsrs	r0, r3, #16
    18fe:	218b      	movs	r1, #139	; 0x8b
    1900:	5468      	strb	r0, [r5, r1]
    1902:	0e1b      	lsrs	r3, r3, #24
    1904:	218c      	movs	r1, #140	; 0x8c
    1906:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    1908:	7ba0      	ldrb	r0, [r4, #14]
    190a:	0880      	lsrs	r0, r0, #2
    190c:	2301      	movs	r3, #1
    190e:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    1910:	2188      	movs	r1, #136	; 0x88
    1912:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    1914:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    1916:	4019      	ands	r1, r3
    1918:	7ae8      	ldrb	r0, [r5, #11]
    191a:	4390      	bics	r0, r2
    191c:	1c02      	adds	r2, r0, #0
    191e:	430a      	orrs	r2, r1
    1920:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    1922:	7ba1      	ldrb	r1, [r4, #14]
    1924:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    1926:	4019      	ands	r1, r3
    1928:	0089      	lsls	r1, r1, #2
    192a:	b2d2      	uxtb	r2, r2
    192c:	2004      	movs	r0, #4
    192e:	4382      	bics	r2, r0
    1930:	430a      	orrs	r2, r1
    1932:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    1934:	7ba2      	ldrb	r2, [r4, #14]
    1936:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    1938:	4013      	ands	r3, r2
    193a:	005a      	lsls	r2, r3, #1
    193c:	7aeb      	ldrb	r3, [r5, #11]
    193e:	2102      	movs	r1, #2
    1940:	438b      	bics	r3, r1
    1942:	4313      	orrs	r3, r2
    1944:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1946:	4b2c      	ldr	r3, [pc, #176]	; (19f8 <nwkDataReqTaskHandler+0x138>)
    1948:	791a      	ldrb	r2, [r3, #4]
    194a:	3201      	adds	r2, #1
    194c:	b2d2      	uxtb	r2, r2
    194e:	711a      	strb	r2, [r3, #4]
    1950:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    1952:	781a      	ldrb	r2, [r3, #0]
    1954:	736a      	strb	r2, [r5, #13]
    1956:	785b      	ldrb	r3, [r3, #1]
    1958:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    195a:	8963      	ldrh	r3, [r4, #10]
    195c:	7aa2      	ldrb	r2, [r4, #10]
    195e:	73ea      	strb	r2, [r5, #15]
    1960:	0a1b      	lsrs	r3, r3, #8
    1962:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    1964:	7b61      	ldrb	r1, [r4, #13]
    1966:	230f      	movs	r3, #15
    1968:	4019      	ands	r1, r3
    196a:	7c6a      	ldrb	r2, [r5, #17]
    196c:	200f      	movs	r0, #15
    196e:	4382      	bics	r2, r0
    1970:	430a      	orrs	r2, r1
    1972:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    1974:	7b22      	ldrb	r2, [r4, #12]
    1976:	0112      	lsls	r2, r2, #4
    1978:	7c69      	ldrb	r1, [r5, #17]
    197a:	400b      	ands	r3, r1
    197c:	4313      	orrs	r3, r2
    197e:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    1980:	2381      	movs	r3, #129	; 0x81
    1982:	5ceb      	ldrb	r3, [r5, r3]
    1984:	2282      	movs	r2, #130	; 0x82
    1986:	5ca8      	ldrb	r0, [r5, r2]
    1988:	0200      	lsls	r0, r0, #8
    198a:	4318      	orrs	r0, r3
    198c:	2383      	movs	r3, #131	; 0x83
    198e:	5ceb      	ldrb	r3, [r5, r3]
    1990:	041b      	lsls	r3, r3, #16
    1992:	4318      	orrs	r0, r3
    1994:	2384      	movs	r3, #132	; 0x84
    1996:	5ceb      	ldrb	r3, [r5, r3]
    1998:	061b      	lsls	r3, r3, #24
    199a:	4318      	orrs	r0, r3
    199c:	7d22      	ldrb	r2, [r4, #20]
    199e:	6921      	ldr	r1, [r4, #16]
    19a0:	4b16      	ldr	r3, [pc, #88]	; (19fc <nwkDataReqTaskHandler+0x13c>)
    19a2:	4798      	blx	r3
	frame->size += req->size;
    19a4:	7d22      	ldrb	r2, [r4, #20]
    19a6:	786b      	ldrb	r3, [r5, #1]
    19a8:	18d3      	adds	r3, r2, r3
    19aa:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    19ac:	1c28      	adds	r0, r5, #0
    19ae:	4b14      	ldr	r3, [pc, #80]	; (1a00 <nwkDataReqTaskHandler+0x140>)
    19b0:	4798      	blx	r3
    19b2:	e019      	b.n	19e8 <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    19b4:	4294      	cmp	r4, r2
    19b6:	d103      	bne.n	19c0 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    19b8:	4b0c      	ldr	r3, [pc, #48]	; (19ec <nwkDataReqTaskHandler+0x12c>)
    19ba:	6822      	ldr	r2, [r4, #0]
    19bc:	601a      	str	r2, [r3, #0]
    19be:	e006      	b.n	19ce <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    19c0:	6813      	ldr	r3, [r2, #0]
    19c2:	429c      	cmp	r4, r3
    19c4:	d001      	beq.n	19ca <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    19c6:	1c1a      	adds	r2, r3, #0
    19c8:	e7fa      	b.n	19c0 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    19ca:	6823      	ldr	r3, [r4, #0]
    19cc:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    19ce:	4a0a      	ldr	r2, [pc, #40]	; (19f8 <nwkDataReqTaskHandler+0x138>)
    19d0:	2358      	movs	r3, #88	; 0x58
    19d2:	5ad1      	ldrh	r1, [r2, r3]
    19d4:	3901      	subs	r1, #1
    19d6:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    19d8:	69a3      	ldr	r3, [r4, #24]
    19da:	1c20      	adds	r0, r4, #0
    19dc:	4798      	blx	r3
    19de:	e003      	b.n	19e8 <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    19e0:	6824      	ldr	r4, [r4, #0]
    19e2:	2c00      	cmp	r4, #0
    19e4:	d000      	beq.n	19e8 <nwkDataReqTaskHandler+0x128>
    19e6:	e772      	b.n	18ce <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    19e8:	bd38      	pop	{r3, r4, r5, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	200000b4 	.word	0x200000b4
    19f0:	00001a19 	.word	0x00001a19
    19f4:	00001875 	.word	0x00001875
    19f8:	200007dc 	.word	0x200007dc
    19fc:	00004845 	.word	0x00004845
    1a00:	000026a1 	.word	0x000026a1

00001a04 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1a04:	4b03      	ldr	r3, [pc, #12]	; (1a14 <nwkFrameInit+0x10>)
    1a06:	2200      	movs	r2, #0
    1a08:	701a      	strb	r2, [r3, #0]
    1a0a:	218d      	movs	r1, #141	; 0x8d
    1a0c:	545a      	strb	r2, [r3, r1]
    1a0e:	0049      	lsls	r1, r1, #1
    1a10:	545a      	strb	r2, [r3, r1]
	}
}
    1a12:	4770      	bx	lr
    1a14:	200000b8 	.word	0x200000b8

00001a18 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    1a18:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    1a1a:	4b18      	ldr	r3, [pc, #96]	; (1a7c <nwkFrameAlloc+0x64>)
    1a1c:	781b      	ldrb	r3, [r3, #0]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	d00e      	beq.n	1a40 <nwkFrameAlloc+0x28>
    1a22:	238d      	movs	r3, #141	; 0x8d
    1a24:	4a15      	ldr	r2, [pc, #84]	; (1a7c <nwkFrameAlloc+0x64>)
    1a26:	5cd3      	ldrb	r3, [r2, r3]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d007      	beq.n	1a3c <nwkFrameAlloc+0x24>
    1a2c:	238d      	movs	r3, #141	; 0x8d
    1a2e:	005b      	lsls	r3, r3, #1
    1a30:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    1a32:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    1a34:	2b00      	cmp	r3, #0
    1a36:	d11f      	bne.n	1a78 <nwkFrameAlloc+0x60>
    1a38:	2302      	movs	r3, #2
    1a3a:	e002      	b.n	1a42 <nwkFrameAlloc+0x2a>
    1a3c:	2301      	movs	r3, #1
    1a3e:	e000      	b.n	1a42 <nwkFrameAlloc+0x2a>
    1a40:	2300      	movs	r3, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1a42:	4e0e      	ldr	r6, [pc, #56]	; (1a7c <nwkFrameAlloc+0x64>)
    1a44:	258d      	movs	r5, #141	; 0x8d
    1a46:	435d      	muls	r5, r3
    1a48:	1974      	adds	r4, r6, r5
    1a4a:	1c20      	adds	r0, r4, #0
    1a4c:	2100      	movs	r1, #0
    1a4e:	228d      	movs	r2, #141	; 0x8d
    1a50:	4b0b      	ldr	r3, [pc, #44]	; (1a80 <nwkFrameAlloc+0x68>)
    1a52:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1a54:	2310      	movs	r3, #16
    1a56:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    1a58:	1c23      	adds	r3, r4, #0
    1a5a:	3380      	adds	r3, #128	; 0x80
    1a5c:	1c22      	adds	r2, r4, #0
    1a5e:	3212      	adds	r2, #18
    1a60:	705a      	strb	r2, [r3, #1]
    1a62:	0a11      	lsrs	r1, r2, #8
    1a64:	7099      	strb	r1, [r3, #2]
    1a66:	0c11      	lsrs	r1, r2, #16
    1a68:	70d9      	strb	r1, [r3, #3]
    1a6a:	0e12      	lsrs	r2, r2, #24
    1a6c:	711a      	strb	r2, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    1a6e:	4a05      	ldr	r2, [pc, #20]	; (1a84 <nwkFrameAlloc+0x6c>)
    1a70:	2358      	movs	r3, #88	; 0x58
    1a72:	5ad1      	ldrh	r1, [r2, r3]
    1a74:	3101      	adds	r1, #1
    1a76:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    1a78:	1c20      	adds	r0, r4, #0
    1a7a:	bd70      	pop	{r4, r5, r6, pc}
    1a7c:	200000b8 	.word	0x200000b8
    1a80:	00004857 	.word	0x00004857
    1a84:	200007dc 	.word	0x200007dc

00001a88 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    1a88:	2300      	movs	r3, #0
    1a8a:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    1a8c:	4a02      	ldr	r2, [pc, #8]	; (1a98 <nwkFrameFree+0x10>)
    1a8e:	2358      	movs	r3, #88	; 0x58
    1a90:	5ad1      	ldrh	r1, [r2, r3]
    1a92:	3901      	subs	r1, #1
    1a94:	52d1      	strh	r1, [r2, r3]
}
    1a96:	4770      	bx	lr
    1a98:	200007dc 	.word	0x200007dc

00001a9c <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    1a9c:	2800      	cmp	r0, #0
    1a9e:	d006      	beq.n	1aae <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    1aa0:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1aa2:	4b0c      	ldr	r3, [pc, #48]	; (1ad4 <nwkFrameNext+0x38>)
    1aa4:	33a8      	adds	r3, #168	; 0xa8
    1aa6:	33ff      	adds	r3, #255	; 0xff
    1aa8:	4298      	cmp	r0, r3
    1aaa:	d301      	bcc.n	1ab0 <nwkFrameNext+0x14>
    1aac:	e00f      	b.n	1ace <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    1aae:	4809      	ldr	r0, [pc, #36]	; (1ad4 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1ab0:	7803      	ldrb	r3, [r0, #0]
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d10c      	bne.n	1ad0 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1ab6:	4a07      	ldr	r2, [pc, #28]	; (1ad4 <nwkFrameNext+0x38>)
    1ab8:	32a8      	adds	r2, #168	; 0xa8
    1aba:	32ff      	adds	r2, #255	; 0xff
    1abc:	e002      	b.n	1ac4 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1abe:	7803      	ldrb	r3, [r0, #0]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d105      	bne.n	1ad0 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1ac4:	308d      	adds	r0, #141	; 0x8d
    1ac6:	4290      	cmp	r0, r2
    1ac8:	d3f9      	bcc.n	1abe <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    1aca:	2000      	movs	r0, #0
    1acc:	e000      	b.n	1ad0 <nwkFrameNext+0x34>
    1ace:	2000      	movs	r0, #0
}
    1ad0:	4770      	bx	lr
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	200000b8 	.word	0x200000b8

00001ad8 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    1ad8:	2200      	movs	r2, #0
    1ada:	2385      	movs	r3, #133	; 0x85
    1adc:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1ade:	4b05      	ldr	r3, [pc, #20]	; (1af4 <nwkFrameCommandInit+0x1c>)
    1ae0:	791a      	ldrb	r2, [r3, #4]
    1ae2:	3201      	adds	r2, #1
    1ae4:	b2d2      	uxtb	r2, r2
    1ae6:	711a      	strb	r2, [r3, #4]
    1ae8:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    1aea:	781a      	ldrb	r2, [r3, #0]
    1aec:	7342      	strb	r2, [r0, #13]
    1aee:	785b      	ldrb	r3, [r3, #1]
    1af0:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    1af2:	4770      	bx	lr
    1af4:	200007dc 	.word	0x200007dc

00001af8 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    1af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afa:	4a09      	ldr	r2, [pc, #36]	; (1b20 <nwkRouteInit+0x28>)
    1afc:	3202      	adds	r2, #2
    1afe:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1b00:	2701      	movs	r7, #1
    1b02:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    1b04:	4806      	ldr	r0, [pc, #24]	; (1b20 <nwkRouteInit+0x28>)
    1b06:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    1b08:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1b0a:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    1b0c:	00d9      	lsls	r1, r3, #3
    1b0e:	5c0c      	ldrb	r4, [r1, r0]
    1b10:	43b4      	bics	r4, r6
    1b12:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    1b14:	7115      	strb	r5, [r2, #4]
    1b16:	3301      	adds	r3, #1
    1b18:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1b1a:	2b64      	cmp	r3, #100	; 0x64
    1b1c:	d1f5      	bne.n	1b0a <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    1b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b20:	20000260 	.word	0x20000260

00001b24 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    1b24:	b570      	push	{r4, r5, r6, lr}
    1b26:	4a0b      	ldr	r2, [pc, #44]	; (1b54 <NWK_RouteFindEntry+0x30>)
    1b28:	3202      	adds	r2, #2
    1b2a:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    1b2c:	4e09      	ldr	r6, [pc, #36]	; (1b54 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1b2e:	8814      	ldrh	r4, [r2, #0]
    1b30:	4284      	cmp	r4, r0
    1b32:	d109      	bne.n	1b48 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    1b34:	00dc      	lsls	r4, r3, #3
    1b36:	5da4      	ldrb	r4, [r4, r6]
    1b38:	07a4      	lsls	r4, r4, #30
    1b3a:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1b3c:	428c      	cmp	r4, r1
    1b3e:	d103      	bne.n	1b48 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    1b40:	00dd      	lsls	r5, r3, #3
    1b42:	4804      	ldr	r0, [pc, #16]	; (1b54 <NWK_RouteFindEntry+0x30>)
    1b44:	1940      	adds	r0, r0, r5
    1b46:	e004      	b.n	1b52 <NWK_RouteFindEntry+0x2e>
    1b48:	3301      	adds	r3, #1
    1b4a:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1b4c:	2b64      	cmp	r3, #100	; 0x64
    1b4e:	d1ee      	bne.n	1b2e <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    1b50:	2000      	movs	r0, #0
}
    1b52:	bd70      	pop	{r4, r5, r6, pc}
    1b54:	20000260 	.word	0x20000260

00001b58 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    1b58:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    1b5a:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    1b5c:	4810      	ldr	r0, [pc, #64]	; (1ba0 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    1b5e:	24c8      	movs	r4, #200	; 0xc8
    1b60:	00a4      	lsls	r4, r4, #2
    1b62:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    1b64:	7803      	ldrb	r3, [r0, #0]
    1b66:	07dc      	lsls	r4, r3, #31
    1b68:	d40b      	bmi.n	1b82 <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    1b6a:	7983      	ldrb	r3, [r0, #6]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d00c      	beq.n	1b8a <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    1b70:	2a00      	cmp	r2, #0
    1b72:	d003      	beq.n	1b7c <NWK_RouteNewEntry+0x24>
    1b74:	7994      	ldrb	r4, [r2, #6]
    1b76:	429c      	cmp	r4, r3
    1b78:	d802      	bhi.n	1b80 <NWK_RouteNewEntry+0x28>
    1b7a:	e002      	b.n	1b82 <NWK_RouteNewEntry+0x2a>
    1b7c:	1c02      	adds	r2, r0, #0
    1b7e:	e000      	b.n	1b82 <NWK_RouteNewEntry+0x2a>
    1b80:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    1b82:	3008      	adds	r0, #8
    1b84:	4288      	cmp	r0, r1
    1b86:	d1ed      	bne.n	1b64 <NWK_RouteNewEntry+0xc>
    1b88:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    1b8a:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1b8c:	2202      	movs	r2, #2
    1b8e:	4393      	bics	r3, r2
    1b90:	220f      	movs	r2, #15
    1b92:	4013      	ands	r3, r2
    1b94:	2230      	movs	r2, #48	; 0x30
    1b96:	4313      	orrs	r3, r2
    1b98:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    1b9a:	2380      	movs	r3, #128	; 0x80
    1b9c:	7183      	strb	r3, [r0, #6]

	return entry;
}
    1b9e:	bd10      	pop	{r4, pc}
    1ba0:	20000260 	.word	0x20000260

00001ba4 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    1ba4:	7803      	ldrb	r3, [r0, #0]
    1ba6:	07da      	lsls	r2, r3, #31
    1ba8:	d404      	bmi.n	1bb4 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    1baa:	2301      	movs	r3, #1
    1bac:	425b      	negs	r3, r3
    1bae:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    1bb0:	2300      	movs	r3, #0
    1bb2:	7183      	strb	r3, [r0, #6]
}
    1bb4:	4770      	bx	lr
    1bb6:	46c0      	nop			; (mov r8, r8)

00001bb8 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    1bb8:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    1bba:	4b04      	ldr	r3, [pc, #16]	; (1bcc <NWK_RouteNextHop+0x14>)
    1bbc:	4798      	blx	r3
	if (entry) {
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d001      	beq.n	1bc6 <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    1bc2:	8880      	ldrh	r0, [r0, #4]
    1bc4:	e000      	b.n	1bc8 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    1bc6:	4802      	ldr	r0, [pc, #8]	; (1bd0 <NWK_RouteNextHop+0x18>)
}
    1bc8:	bd08      	pop	{r3, pc}
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	00001b25 	.word	0x00001b25
    1bd0:	0000ffff 	.word	0x0000ffff

00001bd4 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    1bd4:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    1bd6:	4b03      	ldr	r3, [pc, #12]	; (1be4 <nwkRouteRemove+0x10>)
    1bd8:	4798      	blx	r3
	if (entry) {
    1bda:	2800      	cmp	r0, #0
    1bdc:	d001      	beq.n	1be2 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    1bde:	4b02      	ldr	r3, [pc, #8]	; (1be8 <nwkRouteRemove+0x14>)
    1be0:	4798      	blx	r3
	}
}
    1be2:	bd08      	pop	{r3, pc}
    1be4:	00001b25 	.word	0x00001b25
    1be8:	00001ba5 	.word	0x00001ba5

00001bec <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1bec:	b538      	push	{r3, r4, r5, lr}
    1bee:	1c04      	adds	r4, r0, #0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1bf0:	7a42      	ldrb	r2, [r0, #9]
    1bf2:	7a85      	ldrb	r5, [r0, #10]
    1bf4:	022d      	lsls	r5, r5, #8
    1bf6:	4315      	orrs	r5, r2
    1bf8:	b22b      	sxth	r3, r5
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	da05      	bge.n	1c0a <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    1bfe:	7b42      	ldrb	r2, [r0, #13]
    1c00:	7b83      	ldrb	r3, [r0, #14]
    1c02:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1c04:	4313      	orrs	r3, r2
    1c06:	429d      	cmp	r5, r3
    1c08:	d141      	bne.n	1c8e <nwkRouteFrameReceived+0xa2>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    1c0a:	7961      	ldrb	r1, [r4, #5]
    1c0c:	79a2      	ldrb	r2, [r4, #6]
    1c0e:	0212      	lsls	r2, r2, #8
    1c10:	430a      	orrs	r2, r1
    1c12:	4b1f      	ldr	r3, [pc, #124]	; (1c90 <nwkRouteFrameReceived+0xa4>)
    1c14:	429a      	cmp	r2, r3
    1c16:	d03a      	beq.n	1c8e <nwkRouteFrameReceived+0xa2>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1c18:	7b62      	ldrb	r2, [r4, #13]
    1c1a:	7ba0      	ldrb	r0, [r4, #14]
    1c1c:	0200      	lsls	r0, r0, #8
    1c1e:	4310      	orrs	r0, r2
    1c20:	2100      	movs	r1, #0
    1c22:	4b1c      	ldr	r3, [pc, #112]	; (1c94 <nwkRouteFrameReceived+0xa8>)
    1c24:	4798      	blx	r3

	if (entry) {
    1c26:	2800      	cmp	r0, #0
    1c28:	d022      	beq.n	1c70 <nwkRouteFrameReceived+0x84>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1c2a:	79e1      	ldrb	r1, [r4, #7]
    1c2c:	7a22      	ldrb	r2, [r4, #8]
    1c2e:	0212      	lsls	r2, r2, #8
    1c30:	430a      	orrs	r2, r1
    1c32:	2100      	movs	r1, #0
    1c34:	4b16      	ldr	r3, [pc, #88]	; (1c90 <nwkRouteFrameReceived+0xa4>)
    1c36:	429a      	cmp	r2, r3
    1c38:	d108      	bne.n	1c4c <nwkRouteFrameReceived+0x60>
				nwkIb.addr == header->nwkDstAddr);
    1c3a:	7be2      	ldrb	r2, [r4, #15]
    1c3c:	7c21      	ldrb	r1, [r4, #16]
    1c3e:	0209      	lsls	r1, r1, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1c40:	4b15      	ldr	r3, [pc, #84]	; (1c98 <nwkRouteFrameReceived+0xac>)
    1c42:	881b      	ldrh	r3, [r3, #0]
    1c44:	4311      	orrs	r1, r2
    1c46:	1a59      	subs	r1, r3, r1
    1c48:	424b      	negs	r3, r1
    1c4a:	4159      	adcs	r1, r3
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    1c4c:	8883      	ldrh	r3, [r0, #4]
    1c4e:	42ab      	cmp	r3, r5
    1c50:	d004      	beq.n	1c5c <nwkRouteFrameReceived+0x70>
    1c52:	2385      	movs	r3, #133	; 0x85
    1c54:	5ce2      	ldrb	r2, [r4, r3]
    1c56:	79c3      	ldrb	r3, [r0, #7]
    1c58:	429a      	cmp	r2, r3
    1c5a:	d801      	bhi.n	1c60 <nwkRouteFrameReceived+0x74>
				entry->lqi) || discovery) {
    1c5c:	2900      	cmp	r1, #0
    1c5e:	d013      	beq.n	1c88 <nwkRouteFrameReceived+0x9c>
			entry->nextHopAddr = header->macSrcAddr;
    1c60:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1c62:	7803      	ldrb	r3, [r0, #0]
    1c64:	220f      	movs	r2, #15
    1c66:	4013      	ands	r3, r2
    1c68:	2230      	movs	r2, #48	; 0x30
    1c6a:	4313      	orrs	r3, r2
    1c6c:	7003      	strb	r3, [r0, #0]
    1c6e:	e00b      	b.n	1c88 <nwkRouteFrameReceived+0x9c>
		}
	} else {
		entry = NWK_RouteNewEntry();
    1c70:	4b0a      	ldr	r3, [pc, #40]	; (1c9c <nwkRouteFrameReceived+0xb0>)
    1c72:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    1c74:	7b61      	ldrb	r1, [r4, #13]
    1c76:	7ba2      	ldrb	r2, [r4, #14]
    1c78:	0212      	lsls	r2, r2, #8
    1c7a:	430a      	orrs	r2, r1
    1c7c:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    1c7e:	7a62      	ldrb	r2, [r4, #9]
    1c80:	7aa3      	ldrb	r3, [r4, #10]
    1c82:	021b      	lsls	r3, r3, #8
    1c84:	4313      	orrs	r3, r2
    1c86:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    1c88:	2385      	movs	r3, #133	; 0x85
    1c8a:	5ce3      	ldrb	r3, [r4, r3]
    1c8c:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    1c8e:	bd38      	pop	{r3, r4, r5, pc}
    1c90:	0000ffff 	.word	0x0000ffff
    1c94:	00001b25 	.word	0x00001b25
    1c98:	200007dc 	.word	0x200007dc
    1c9c:	00001b59 	.word	0x00001b59

00001ca0 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1ca0:	b510      	push	{r4, lr}
    1ca2:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    1ca4:	7bc3      	ldrb	r3, [r0, #15]
    1ca6:	7c00      	ldrb	r0, [r0, #16]
    1ca8:	0200      	lsls	r0, r0, #8
    1caa:	4318      	orrs	r0, r3
    1cac:	4b1b      	ldr	r3, [pc, #108]	; (1d1c <nwkRouteFrameSent+0x7c>)
    1cae:	4298      	cmp	r0, r3
    1cb0:	d032      	beq.n	1d18 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    1cb2:	7ae1      	ldrb	r1, [r4, #11]
    1cb4:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    1cb6:	0fc9      	lsrs	r1, r1, #31
    1cb8:	4b19      	ldr	r3, [pc, #100]	; (1d20 <nwkRouteFrameSent+0x80>)
    1cba:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d02b      	beq.n	1d18 <nwkRouteFrameSent+0x78>
    1cc0:	7803      	ldrb	r3, [r0, #0]
    1cc2:	07da      	lsls	r2, r3, #31
    1cc4:	d428      	bmi.n	1d18 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    1cc6:	2385      	movs	r3, #133	; 0x85
    1cc8:	5ce3      	ldrb	r3, [r4, r3]
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d117      	bne.n	1cfe <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1cce:	7803      	ldrb	r3, [r0, #0]
    1cd0:	220f      	movs	r2, #15
    1cd2:	4013      	ands	r3, r2
    1cd4:	2230      	movs	r2, #48	; 0x30
    1cd6:	4313      	orrs	r3, r2
    1cd8:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    1cda:	7983      	ldrb	r3, [r0, #6]
    1cdc:	3301      	adds	r3, #1
    1cde:	b2db      	uxtb	r3, r3
    1ce0:	7183      	strb	r3, [r0, #6]
    1ce2:	2bff      	cmp	r3, #255	; 0xff
    1ce4:	d118      	bne.n	1d18 <nwkRouteFrameSent+0x78>
    1ce6:	490f      	ldr	r1, [pc, #60]	; (1d24 <nwkRouteFrameSent+0x84>)
    1ce8:	1d8b      	adds	r3, r1, #6
    1cea:	4a0f      	ldr	r2, [pc, #60]	; (1d28 <nwkRouteFrameSent+0x88>)
    1cec:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1cee:	781a      	ldrb	r2, [r3, #0]
    1cf0:	0852      	lsrs	r2, r2, #1
    1cf2:	3201      	adds	r2, #1
    1cf4:	701a      	strb	r2, [r3, #0]
    1cf6:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1cf8:	428b      	cmp	r3, r1
    1cfa:	d1f8      	bne.n	1cee <nwkRouteFrameSent+0x4e>
    1cfc:	e00c      	b.n	1d18 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    1cfe:	7802      	ldrb	r2, [r0, #0]
    1d00:	0913      	lsrs	r3, r2, #4
    1d02:	330f      	adds	r3, #15
    1d04:	210f      	movs	r1, #15
    1d06:	400b      	ands	r3, r1
    1d08:	011c      	lsls	r4, r3, #4
    1d0a:	400a      	ands	r2, r1
    1d0c:	4322      	orrs	r2, r4
    1d0e:	7002      	strb	r2, [r0, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	d101      	bne.n	1d18 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    1d14:	4b05      	ldr	r3, [pc, #20]	; (1d2c <nwkRouteFrameSent+0x8c>)
    1d16:	4798      	blx	r3
		}
	}
}
    1d18:	bd10      	pop	{r4, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	0000ffff 	.word	0x0000ffff
    1d20:	00001b25 	.word	0x00001b25
    1d24:	20000260 	.word	0x20000260
    1d28:	00000326 	.word	0x00000326
    1d2c:	00001ba5 	.word	0x00001ba5

00001d30 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1d30:	b510      	push	{r4, lr}
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    1d32:	7bc1      	ldrb	r1, [r0, #15]
    1d34:	7c03      	ldrb	r3, [r0, #16]
    1d36:	021b      	lsls	r3, r3, #8
    1d38:	430b      	orrs	r3, r1
    1d3a:	4a0d      	ldr	r2, [pc, #52]	; (1d70 <nwkRoutePrepareTx+0x40>)
    1d3c:	4293      	cmp	r3, r2
    1d3e:	d104      	bne.n	1d4a <nwkRoutePrepareTx+0x1a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    1d40:	2301      	movs	r3, #1
    1d42:	425b      	negs	r3, r3
    1d44:	71c3      	strb	r3, [r0, #7]
    1d46:	7203      	strb	r3, [r0, #8]
    1d48:	e010      	b.n	1d6c <nwkRoutePrepareTx+0x3c>
	} else if (header->nwkFcf.linkLocal) {
    1d4a:	7ac2      	ldrb	r2, [r0, #11]
    1d4c:	0751      	lsls	r1, r2, #29
    1d4e:	d503      	bpl.n	1d58 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    1d50:	71c3      	strb	r3, [r0, #7]
    1d52:	0a1b      	lsrs	r3, r3, #8
    1d54:	7203      	strb	r3, [r0, #8]
    1d56:	e009      	b.n	1d6c <nwkRoutePrepareTx+0x3c>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    1d58:	1c84      	adds	r4, r0, #2
    1d5a:	7ac1      	ldrb	r1, [r0, #11]
    1d5c:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    1d5e:	0fc9      	lsrs	r1, r1, #31
    1d60:	1c18      	adds	r0, r3, #0
    1d62:	4b04      	ldr	r3, [pc, #16]	; (1d74 <nwkRoutePrepareTx+0x44>)
    1d64:	4798      	blx	r3
    1d66:	7160      	strb	r0, [r4, #5]
    1d68:	0a00      	lsrs	r0, r0, #8
    1d6a:	71a0      	strb	r0, [r4, #6]
			nwkRouteDiscoveryRequest(frame);
		}

  #endif
	}
}
    1d6c:	bd10      	pop	{r4, pc}
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	0000ffff 	.word	0x0000ffff
    1d74:	00001bb9 	.word	0x00001bb9

00001d78 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d7a:	4647      	mov	r7, r8
    1d7c:	b480      	push	{r7}
    1d7e:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    1d80:	7bc2      	ldrb	r2, [r0, #15]
    1d82:	7c06      	ldrb	r6, [r0, #16]
    1d84:	0236      	lsls	r6, r6, #8
    1d86:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    1d88:	7ac7      	ldrb	r7, [r0, #11]
    1d8a:	073f      	lsls	r7, r7, #28
    1d8c:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    1d8e:	b2f9      	uxtb	r1, r7
    1d90:	1c30      	adds	r0, r6, #0
    1d92:	4b28      	ldr	r3, [pc, #160]	; (1e34 <nwkRouteFrame+0xbc>)
    1d94:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    1d96:	4b28      	ldr	r3, [pc, #160]	; (1e38 <nwkRouteFrame+0xc0>)
    1d98:	4298      	cmp	r0, r3
    1d9a:	d00f      	beq.n	1dbc <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    1d9c:	2200      	movs	r2, #0
    1d9e:	2389      	movs	r3, #137	; 0x89
    1da0:	54e2      	strb	r2, [r4, r3]
    1da2:	238a      	movs	r3, #138	; 0x8a
    1da4:	54e2      	strb	r2, [r4, r3]
    1da6:	238b      	movs	r3, #139	; 0x8b
    1da8:	54e2      	strb	r2, [r4, r3]
    1daa:	238c      	movs	r3, #140	; 0x8c
    1dac:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1dae:	2202      	movs	r2, #2
    1db0:	2388      	movs	r3, #136	; 0x88
    1db2:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    1db4:	1c20      	adds	r0, r4, #0
    1db6:	4b21      	ldr	r3, [pc, #132]	; (1e3c <nwkRouteFrame+0xc4>)
    1db8:	4798      	blx	r3
    1dba:	e038      	b.n	1e2e <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    1dbc:	7b62      	ldrb	r2, [r4, #13]
    1dbe:	7ba3      	ldrb	r3, [r4, #14]
    1dc0:	021b      	lsls	r3, r3, #8
    1dc2:	4313      	orrs	r3, r2
    1dc4:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    1dc6:	4b1e      	ldr	r3, [pc, #120]	; (1e40 <nwkRouteFrame+0xc8>)
    1dc8:	4798      	blx	r3
    1dca:	1e05      	subs	r5, r0, #0
    1dcc:	d02c      	beq.n	1e28 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    1dce:	4b1d      	ldr	r3, [pc, #116]	; (1e44 <nwkRouteFrame+0xcc>)
    1dd0:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    1dd2:	786b      	ldrb	r3, [r5, #1]
    1dd4:	3306      	adds	r3, #6
    1dd6:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    1dd8:	2200      	movs	r2, #0
    1dda:	2389      	movs	r3, #137	; 0x89
    1ddc:	54ea      	strb	r2, [r5, r3]
    1dde:	238a      	movs	r3, #138	; 0x8a
    1de0:	54ea      	strb	r2, [r5, r3]
    1de2:	238b      	movs	r3, #139	; 0x8b
    1de4:	54ea      	strb	r2, [r5, r3]
    1de6:	238c      	movs	r3, #140	; 0x8c
    1de8:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    1dea:	21ff      	movs	r1, #255	; 0xff
    1dec:	4643      	mov	r3, r8
    1dee:	4019      	ands	r1, r3
    1df0:	73e9      	strb	r1, [r5, #15]
    1df2:	0a1a      	lsrs	r2, r3, #8
    1df4:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    1df6:	2381      	movs	r3, #129	; 0x81
    1df8:	5ce8      	ldrb	r0, [r5, r3]
    1dfa:	2382      	movs	r3, #130	; 0x82
    1dfc:	5ceb      	ldrb	r3, [r5, r3]
    1dfe:	021b      	lsls	r3, r3, #8
    1e00:	4303      	orrs	r3, r0
    1e02:	2083      	movs	r0, #131	; 0x83
    1e04:	5c28      	ldrb	r0, [r5, r0]
    1e06:	0400      	lsls	r0, r0, #16
    1e08:	4303      	orrs	r3, r0
    1e0a:	2084      	movs	r0, #132	; 0x84
    1e0c:	5c28      	ldrb	r0, [r5, r0]
    1e0e:	0600      	lsls	r0, r0, #24
    1e10:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    1e12:	2001      	movs	r0, #1
    1e14:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    1e16:	7059      	strb	r1, [r3, #1]
    1e18:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    1e1a:	70de      	strb	r6, [r3, #3]
    1e1c:	0a36      	lsrs	r6, r6, #8
    1e1e:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    1e20:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    1e22:	1c28      	adds	r0, r5, #0
    1e24:	4b05      	ldr	r3, [pc, #20]	; (1e3c <nwkRouteFrame+0xc4>)
    1e26:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    1e28:	1c20      	adds	r0, r4, #0
    1e2a:	4b07      	ldr	r3, [pc, #28]	; (1e48 <nwkRouteFrame+0xd0>)
    1e2c:	4798      	blx	r3
	}
}
    1e2e:	bc04      	pop	{r2}
    1e30:	4690      	mov	r8, r2
    1e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e34:	00001bb9 	.word	0x00001bb9
    1e38:	0000ffff 	.word	0x0000ffff
    1e3c:	000026a1 	.word	0x000026a1
    1e40:	00001a19 	.word	0x00001a19
    1e44:	00001ad9 	.word	0x00001ad9
    1e48:	00001a89 	.word	0x00001a89

00001e4c <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    1e4c:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1e4e:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    1e50:	7b03      	ldrb	r3, [r0, #12]
		return false;
    1e52:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    1e54:	2b06      	cmp	r3, #6
    1e56:	d107      	bne.n	1e68 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    1e58:	78d3      	ldrb	r3, [r2, #3]
    1e5a:	7910      	ldrb	r0, [r2, #4]
    1e5c:	0200      	lsls	r0, r0, #8
    1e5e:	4318      	orrs	r0, r3
    1e60:	7951      	ldrb	r1, [r2, #5]
    1e62:	4b02      	ldr	r3, [pc, #8]	; (1e6c <nwkRouteErrorReceived+0x20>)
    1e64:	4798      	blx	r3

	return true;
    1e66:	2001      	movs	r0, #1
}
    1e68:	bd08      	pop	{r3, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00001bd5 	.word	0x00001bd5

00001e70 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    1e70:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    1e72:	7b02      	ldrb	r2, [r0, #12]
		return false;
    1e74:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    1e76:	2a00      	cmp	r2, #0
    1e78:	d00f      	beq.n	1e9a <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    1e7a:	6882      	ldr	r2, [r0, #8]
    1e7c:	7813      	ldrb	r3, [r2, #0]
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d002      	beq.n	1e88 <nwkRxSeriveDataInd+0x18>
    1e82:	2b01      	cmp	r3, #1
    1e84:	d004      	beq.n	1e90 <nwkRxSeriveDataInd+0x20>
    1e86:	e007      	b.n	1e98 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    1e88:	4b05      	ldr	r3, [pc, #20]	; (1ea0 <nwkRxSeriveDataInd+0x30>)
    1e8a:	4798      	blx	r3
    1e8c:	1c03      	adds	r3, r0, #0
    1e8e:	e004      	b.n	1e9a <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    1e90:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <nwkRxSeriveDataInd+0x34>)
    1e92:	4798      	blx	r3
    1e94:	1c03      	adds	r3, r0, #0
    1e96:	e000      	b.n	1e9a <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    1e98:	2300      	movs	r3, #0
	}
}
    1e9a:	1c18      	adds	r0, r3, #0
    1e9c:	bd08      	pop	{r3, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	000027ed 	.word	0x000027ed
    1ea4:	00001e4d 	.word	0x00001e4d

00001ea8 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1ea8:	b538      	push	{r3, r4, r5, lr}
    1eaa:	4909      	ldr	r1, [pc, #36]	; (1ed0 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    1eac:	1d0b      	adds	r3, r1, #4
    1eae:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    1eb0:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    1eb2:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    1eb4:	781a      	ldrb	r2, [r3, #0]
    1eb6:	2a00      	cmp	r2, #0
    1eb8:	d002      	beq.n	1ec0 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    1eba:	3a01      	subs	r2, #1
    1ebc:	701a      	strb	r2, [r3, #0]
			restart = true;
    1ebe:	1c2c      	adds	r4, r5, #0
    1ec0:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1ec2:	428b      	cmp	r3, r1
    1ec4:	d1f6      	bne.n	1eb4 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    1ec6:	2c00      	cmp	r4, #0
    1ec8:	d001      	beq.n	1ece <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    1eca:	4b02      	ldr	r3, [pc, #8]	; (1ed4 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    1ecc:	4798      	blx	r3
	}
}
    1ece:	bd38      	pop	{r3, r4, r5, pc}
    1ed0:	20000580 	.word	0x20000580
    1ed4:	00002d51 	.word	0x00002d51

00001ed8 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    1ed8:	b508      	push	{r3, lr}
    1eda:	490a      	ldr	r1, [pc, #40]	; (1f04 <nwkRxInit+0x2c>)
    1edc:	1d0b      	adds	r3, r1, #4
    1ede:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    1ee0:	2200      	movs	r2, #0
    1ee2:	701a      	strb	r2, [r3, #0]
    1ee4:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1ee6:	428b      	cmp	r3, r1
    1ee8:	d1fb      	bne.n	1ee2 <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1eea:	4b07      	ldr	r3, [pc, #28]	; (1f08 <nwkRxInit+0x30>)
    1eec:	2264      	movs	r2, #100	; 0x64
    1eee:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1ef0:	2200      	movs	r2, #0
    1ef2:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    1ef4:	4a05      	ldr	r2, [pc, #20]	; (1f0c <nwkRxInit+0x34>)
    1ef6:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    1ef8:	2000      	movs	r0, #0
    1efa:	4905      	ldr	r1, [pc, #20]	; (1f10 <nwkRxInit+0x38>)
    1efc:	4b05      	ldr	r3, [pc, #20]	; (1f14 <nwkRxInit+0x3c>)
    1efe:	4798      	blx	r3
}
    1f00:	bd08      	pop	{r3, pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	20000580 	.word	0x20000580
    1f08:	200005c0 	.word	0x200005c0
    1f0c:	00001ea9 	.word	0x00001ea9
    1f10:	00001e71 	.word	0x00001e71
    1f14:	00001841 	.word	0x00001841

00001f18 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    1f18:	b510      	push	{r4, lr}
    1f1a:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    1f1c:	6803      	ldr	r3, [r0, #0]
    1f1e:	785a      	ldrb	r2, [r3, #1]
    1f20:	2a88      	cmp	r2, #136	; 0x88
    1f22:	d11a      	bne.n	1f5a <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	2220      	movs	r2, #32
    1f28:	4393      	bics	r3, r2
    1f2a:	2b41      	cmp	r3, #65	; 0x41
    1f2c:	d115      	bne.n	1f5a <PHY_DataInd+0x42>
    1f2e:	7903      	ldrb	r3, [r0, #4]
    1f30:	2b0f      	cmp	r3, #15
    1f32:	d912      	bls.n	1f5a <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    1f34:	4b09      	ldr	r3, [pc, #36]	; (1f5c <PHY_DataInd+0x44>)
    1f36:	4798      	blx	r3
    1f38:	2800      	cmp	r0, #0
    1f3a:	d00e      	beq.n	1f5a <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    1f3c:	2320      	movs	r3, #32
    1f3e:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    1f40:	7923      	ldrb	r3, [r4, #4]
    1f42:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    1f44:	7962      	ldrb	r2, [r4, #5]
    1f46:	2385      	movs	r3, #133	; 0x85
    1f48:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    1f4a:	79a2      	ldrb	r2, [r4, #6]
    1f4c:	2386      	movs	r3, #134	; 0x86
    1f4e:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    1f50:	3002      	adds	r0, #2
    1f52:	7922      	ldrb	r2, [r4, #4]
    1f54:	6821      	ldr	r1, [r4, #0]
    1f56:	4b02      	ldr	r3, [pc, #8]	; (1f60 <PHY_DataInd+0x48>)
    1f58:	4798      	blx	r3
}
    1f5a:	bd10      	pop	{r4, pc}
    1f5c:	00001a19 	.word	0x00001a19
    1f60:	00004845 	.word	0x00004845

00001f64 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    1f64:	2900      	cmp	r1, #0
    1f66:	d002      	beq.n	1f6e <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    1f68:	2322      	movs	r3, #34	; 0x22
    1f6a:	7003      	strb	r3, [r0, #0]
    1f6c:	e001      	b.n	1f72 <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    1f6e:	2324      	movs	r3, #36	; 0x24
    1f70:	7003      	strb	r3, [r0, #0]
	}
}
    1f72:	4770      	bx	lr

00001f74 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f76:	464f      	mov	r7, r9
    1f78:	4646      	mov	r6, r8
    1f7a:	b4c0      	push	{r6, r7}
    1f7c:	b085      	sub	sp, #20
	NwkFrame_t *frame = NULL;
    1f7e:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    1f80:	4dd3      	ldr	r5, [pc, #844]	; (22d0 <STACK_SIZE+0x2d0>)
    1f82:	48d4      	ldr	r0, [pc, #848]	; (22d4 <STACK_SIZE+0x2d4>)
    1f84:	4681      	mov	r9, r0
    1f86:	203c      	movs	r0, #60	; 0x3c
    1f88:	4481      	add	r9, r0
    1f8a:	e19a      	b.n	22c2 <STACK_SIZE+0x2c2>
		switch (frame->state) {
    1f8c:	7823      	ldrb	r3, [r4, #0]
    1f8e:	3b20      	subs	r3, #32
    1f90:	b2da      	uxtb	r2, r3
    1f92:	2a04      	cmp	r2, #4
    1f94:	d900      	bls.n	1f98 <nwkRxTaskHandler+0x24>
    1f96:	e194      	b.n	22c2 <STACK_SIZE+0x2c2>
    1f98:	0093      	lsls	r3, r2, #2
    1f9a:	4acf      	ldr	r2, [pc, #828]	; (22d8 <STACK_SIZE+0x2d8>)
    1f9c:	58d3      	ldr	r3, [r2, r3]
    1f9e:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    1fa0:	2324      	movs	r3, #36	; 0x24
    1fa2:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    1fa4:	7ae3      	ldrb	r3, [r4, #11]
    1fa6:	0719      	lsls	r1, r3, #28
    1fa8:	d500      	bpl.n	1fac <nwkRxTaskHandler+0x38>
    1faa:	e18a      	b.n	22c2 <STACK_SIZE+0x2c2>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    1fac:	7961      	ldrb	r1, [r4, #5]
    1fae:	79a2      	ldrb	r2, [r4, #6]
    1fb0:	0212      	lsls	r2, r2, #8
    1fb2:	430a      	orrs	r2, r1
    1fb4:	4bc9      	ldr	r3, [pc, #804]	; (22dc <STACK_SIZE+0x2dc>)
    1fb6:	429a      	cmp	r2, r3
    1fb8:	d114      	bne.n	1fe4 <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    1fba:	7be2      	ldrb	r2, [r4, #15]
    1fbc:	7c23      	ldrb	r3, [r4, #16]
    1fbe:	021b      	lsls	r3, r3, #8
    1fc0:	4313      	orrs	r3, r2
    1fc2:	4ac7      	ldr	r2, [pc, #796]	; (22e0 <STACK_SIZE+0x2e0>)
    1fc4:	8812      	ldrh	r2, [r2, #0]
    1fc6:	429a      	cmp	r2, r3
    1fc8:	d003      	beq.n	1fd2 <nwkRxTaskHandler+0x5e>
    1fca:	4ac4      	ldr	r2, [pc, #784]	; (22dc <STACK_SIZE+0x2dc>)
    1fcc:	4293      	cmp	r3, r2
    1fce:	d000      	beq.n	1fd2 <nwkRxTaskHandler+0x5e>
    1fd0:	e177      	b.n	22c2 <STACK_SIZE+0x2c2>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    1fd2:	7ae3      	ldrb	r3, [r4, #11]
    1fd4:	079a      	lsls	r2, r3, #30
    1fd6:	d502      	bpl.n	1fde <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    1fd8:	2321      	movs	r3, #33	; 0x21
    1fda:	7023      	strb	r3, [r4, #0]
    1fdc:	e171      	b.n	22c2 <STACK_SIZE+0x2c2>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    1fde:	2322      	movs	r3, #34	; 0x22
    1fe0:	7023      	strb	r3, [r4, #0]
    1fe2:	e16e      	b.n	22c2 <STACK_SIZE+0x2c2>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    1fe4:	7be1      	ldrb	r1, [r4, #15]
    1fe6:	7c22      	ldrb	r2, [r4, #16]
    1fe8:	0212      	lsls	r2, r2, #8
    1fea:	430a      	orrs	r2, r1
    1fec:	4bbb      	ldr	r3, [pc, #748]	; (22dc <STACK_SIZE+0x2dc>)
    1fee:	429a      	cmp	r2, r3
    1ff0:	d103      	bne.n	1ffa <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    1ff2:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    1ff4:	07de      	lsls	r6, r3, #31
    1ff6:	d500      	bpl.n	1ffa <nwkRxTaskHandler+0x86>
    1ff8:	e163      	b.n	22c2 <STACK_SIZE+0x2c2>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    1ffa:	7b61      	ldrb	r1, [r4, #13]
    1ffc:	7ba3      	ldrb	r3, [r4, #14]
    1ffe:	021b      	lsls	r3, r3, #8
    2000:	4ab7      	ldr	r2, [pc, #732]	; (22e0 <STACK_SIZE+0x2e0>)
    2002:	8812      	ldrh	r2, [r2, #0]
    2004:	430b      	orrs	r3, r1
    2006:	429a      	cmp	r2, r3
    2008:	d100      	bne.n	200c <STACK_SIZE+0xc>
    200a:	e15a      	b.n	22c2 <STACK_SIZE+0x2c2>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    200c:	1c20      	adds	r0, r4, #0
    200e:	4bb5      	ldr	r3, [pc, #724]	; (22e4 <STACK_SIZE+0x2e4>)
    2010:	4798      	blx	r3
    2012:	4bb0      	ldr	r3, [pc, #704]	; (22d4 <STACK_SIZE+0x2d4>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2014:	2700      	movs	r7, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2016:	1ca1      	adds	r1, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2018:	1c18      	adds	r0, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    201a:	791a      	ldrb	r2, [r3, #4]
    201c:	2a00      	cmp	r2, #0
    201e:	d037      	beq.n	2090 <STACK_SIZE+0x90>
    2020:	7ace      	ldrb	r6, [r1, #11]
    2022:	7b0a      	ldrb	r2, [r1, #12]
    2024:	0212      	lsls	r2, r2, #8
    2026:	4690      	mov	r8, r2
    2028:	881a      	ldrh	r2, [r3, #0]
    202a:	4694      	mov	ip, r2
    202c:	4642      	mov	r2, r8
    202e:	4316      	orrs	r6, r2
    2030:	45b4      	cmp	ip, r6
    2032:	d12e      	bne.n	2092 <STACK_SIZE+0x92>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2034:	7b22      	ldrb	r2, [r4, #12]
    2036:	789b      	ldrb	r3, [r3, #2]
    2038:	1a9b      	subs	r3, r3, r2
    203a:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    203c:	2b07      	cmp	r3, #7
    203e:	d81c      	bhi.n	207a <STACK_SIZE+0x7a>
				if (entry->mask & (1 << diff)) {
    2040:	78c2      	ldrb	r2, [r0, #3]
    2042:	1c11      	adds	r1, r2, #0
    2044:	4119      	asrs	r1, r3
    2046:	07ce      	lsls	r6, r1, #31
    2048:	d512      	bpl.n	2070 <STACK_SIZE+0x70>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    204a:	79e1      	ldrb	r1, [r4, #7]
    204c:	7a23      	ldrb	r3, [r4, #8]
    204e:	021b      	lsls	r3, r3, #8
    2050:	4aa3      	ldr	r2, [pc, #652]	; (22e0 <STACK_SIZE+0x2e0>)
    2052:	8812      	ldrh	r2, [r2, #0]
    2054:	430b      	orrs	r3, r1
    2056:	429a      	cmp	r2, r3
    2058:	d000      	beq.n	205c <STACK_SIZE+0x5c>
    205a:	e132      	b.n	22c2 <STACK_SIZE+0x2c2>
						nwkRouteRemove(
    205c:	7be2      	ldrb	r2, [r4, #15]
    205e:	7c20      	ldrb	r0, [r4, #16]
    2060:	0200      	lsls	r0, r0, #8
    2062:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    2064:	7ae1      	ldrb	r1, [r4, #11]
    2066:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    2068:	0fc9      	lsrs	r1, r1, #31
    206a:	4b9f      	ldr	r3, [pc, #636]	; (22e8 <STACK_SIZE+0x2e8>)
    206c:	4798      	blx	r3
    206e:	e128      	b.n	22c2 <STACK_SIZE+0x2c2>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2070:	2101      	movs	r1, #1
    2072:	4099      	lsls	r1, r3
    2074:	430a      	orrs	r2, r1
    2076:	70c2      	strb	r2, [r0, #3]
    2078:	e14e      	b.n	2318 <STACK_SIZE+0x318>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    207a:	7082      	strb	r2, [r0, #2]
				entry->mask = (entry->mask << shift) | 1;
    207c:	78c2      	ldrb	r2, [r0, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    207e:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    2080:	b2db      	uxtb	r3, r3
    2082:	409a      	lsls	r2, r3
    2084:	2301      	movs	r3, #1
    2086:	4313      	orrs	r3, r2
    2088:	70c3      	strb	r3, [r0, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    208a:	231f      	movs	r3, #31
    208c:	7103      	strb	r3, [r0, #4]
    208e:	e143      	b.n	2318 <STACK_SIZE+0x318>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2090:	1c1f      	adds	r7, r3, #0
    2092:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2094:	454b      	cmp	r3, r9
    2096:	d1bf      	bne.n	2018 <STACK_SIZE+0x18>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2098:	2f00      	cmp	r7, #0
    209a:	d100      	bne.n	209e <STACK_SIZE+0x9e>
    209c:	e111      	b.n	22c2 <STACK_SIZE+0x2c2>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    209e:	7b61      	ldrb	r1, [r4, #13]
    20a0:	7ba2      	ldrb	r2, [r4, #14]
    20a2:	0212      	lsls	r2, r2, #8
    20a4:	430a      	orrs	r2, r1
    20a6:	803a      	strh	r2, [r7, #0]
	freeEntry->seq = header->nwkSeq;
    20a8:	7b23      	ldrb	r3, [r4, #12]
    20aa:	70bb      	strb	r3, [r7, #2]
	freeEntry->mask = 1;
    20ac:	2301      	movs	r3, #1
    20ae:	70fb      	strb	r3, [r7, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    20b0:	231f      	movs	r3, #31
    20b2:	713b      	strb	r3, [r7, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    20b4:	488d      	ldr	r0, [pc, #564]	; (22ec <STACK_SIZE+0x2ec>)
    20b6:	4b8e      	ldr	r3, [pc, #568]	; (22f0 <STACK_SIZE+0x2f0>)
    20b8:	4798      	blx	r3
    20ba:	e12d      	b.n	2318 <STACK_SIZE+0x318>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    20bc:	4b88      	ldr	r3, [pc, #544]	; (22e0 <STACK_SIZE+0x2e0>)
    20be:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    20c0:	7be0      	ldrb	r0, [r4, #15]
    20c2:	7c23      	ldrb	r3, [r4, #16]
    20c4:	021b      	lsls	r3, r3, #8
    20c6:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    20c8:	429a      	cmp	r2, r3
    20ca:	d010      	beq.n	20ee <STACK_SIZE+0xee>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    20cc:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    20ce:	074f      	lsls	r7, r1, #29
    20d0:	d40a      	bmi.n	20e8 <STACK_SIZE+0xe8>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    20d2:	1c20      	adds	r0, r4, #0
    20d4:	4b87      	ldr	r3, [pc, #540]	; (22f4 <STACK_SIZE+0x2f4>)
    20d6:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    20d8:	4b81      	ldr	r3, [pc, #516]	; (22e0 <STACK_SIZE+0x2e0>)
    20da:	881a      	ldrh	r2, [r3, #0]
    20dc:	7be0      	ldrb	r0, [r4, #15]
    20de:	7c23      	ldrb	r3, [r4, #16]
    20e0:	021b      	lsls	r3, r3, #8
    20e2:	4303      	orrs	r3, r0
    20e4:	429a      	cmp	r2, r3
    20e6:	d002      	beq.n	20ee <STACK_SIZE+0xee>
    20e8:	497c      	ldr	r1, [pc, #496]	; (22dc <STACK_SIZE+0x2dc>)
    20ea:	428b      	cmp	r3, r1
    20ec:	d108      	bne.n	2100 <STACK_SIZE+0x100>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    20ee:	7ae3      	ldrb	r3, [r4, #11]
    20f0:	0798      	lsls	r0, r3, #30
    20f2:	d502      	bpl.n	20fa <STACK_SIZE+0xfa>
				frame->state = NWK_RX_STATE_DECRYPT;
    20f4:	2321      	movs	r3, #33	; 0x21
    20f6:	7023      	strb	r3, [r4, #0]
    20f8:	e0e3      	b.n	22c2 <STACK_SIZE+0x2c2>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    20fa:	2322      	movs	r3, #34	; 0x22
    20fc:	7023      	strb	r3, [r4, #0]
    20fe:	e0e0      	b.n	22c2 <STACK_SIZE+0x2c2>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2100:	79e1      	ldrb	r1, [r4, #7]
    2102:	7a23      	ldrb	r3, [r4, #8]
    2104:	021b      	lsls	r3, r3, #8
    2106:	430b      	orrs	r3, r1
    2108:	429a      	cmp	r2, r3
    210a:	d000      	beq.n	210e <STACK_SIZE+0x10e>
    210c:	e0d9      	b.n	22c2 <STACK_SIZE+0x2c2>
			frame->state = NWK_RX_STATE_ROUTE;
    210e:	2323      	movs	r3, #35	; 0x23
    2110:	7023      	strb	r3, [r4, #0]
    2112:	e0d6      	b.n	22c2 <STACK_SIZE+0x2c2>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    2114:	1c20      	adds	r0, r4, #0
    2116:	2100      	movs	r1, #0
    2118:	4b77      	ldr	r3, [pc, #476]	; (22f8 <STACK_SIZE+0x2f8>)
    211a:	4798      	blx	r3
		}
		break;
    211c:	e0d1      	b.n	22c2 <STACK_SIZE+0x2c2>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    211e:	2200      	movs	r2, #0
    2120:	4b76      	ldr	r3, [pc, #472]	; (22fc <STACK_SIZE+0x2fc>)
    2122:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    2124:	7c61      	ldrb	r1, [r4, #17]
    2126:	0909      	lsrs	r1, r1, #4
    2128:	b2ca      	uxtb	r2, r1
    212a:	3202      	adds	r2, #2
    212c:	0092      	lsls	r2, r2, #2
    212e:	4b6c      	ldr	r3, [pc, #432]	; (22e0 <STACK_SIZE+0x2e0>)
    2130:	58d2      	ldr	r2, [r2, r3]
    2132:	2a00      	cmp	r2, #0
    2134:	d05f      	beq.n	21f6 <STACK_SIZE+0x1f6>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    2136:	1ca3      	adds	r3, r4, #2
    2138:	7b67      	ldrb	r7, [r4, #13]
    213a:	7ba0      	ldrb	r0, [r4, #14]
    213c:	0200      	lsls	r0, r0, #8
    213e:	4338      	orrs	r0, r7
    2140:	4680      	mov	r8, r0
    2142:	466e      	mov	r6, sp
    2144:	8030      	strh	r0, [r6, #0]
	ind.dstAddr = header->nwkDstAddr;
    2146:	7be0      	ldrb	r0, [r4, #15]
    2148:	7c26      	ldrb	r6, [r4, #16]
    214a:	0236      	lsls	r6, r6, #8
    214c:	1c37      	adds	r7, r6, #0
    214e:	4307      	orrs	r7, r0
    2150:	4668      	mov	r0, sp
    2152:	8047      	strh	r7, [r0, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    2154:	7c66      	ldrb	r6, [r4, #17]
    2156:	0736      	lsls	r6, r6, #28
    2158:	0f36      	lsrs	r6, r6, #28
    215a:	7106      	strb	r6, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    215c:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    215e:	2181      	movs	r1, #129	; 0x81
    2160:	5c61      	ldrb	r1, [r4, r1]
    2162:	2082      	movs	r0, #130	; 0x82
    2164:	5c26      	ldrb	r6, [r4, r0]
    2166:	0236      	lsls	r6, r6, #8
    2168:	4331      	orrs	r1, r6
    216a:	2083      	movs	r0, #131	; 0x83
    216c:	5c26      	ldrb	r6, [r4, r0]
    216e:	0436      	lsls	r6, r6, #16
    2170:	4331      	orrs	r1, r6
    2172:	2084      	movs	r0, #132	; 0x84
    2174:	5c26      	ldrb	r6, [r4, r0]
    2176:	0636      	lsls	r6, r6, #24
    2178:	4331      	orrs	r1, r6
    217a:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    217c:	1a59      	subs	r1, r3, r1
    217e:	468c      	mov	ip, r1
    2180:	7861      	ldrb	r1, [r4, #1]
    2182:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    2184:	4668      	mov	r0, sp
    2186:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    2188:	2185      	movs	r1, #133	; 0x85
    218a:	5c61      	ldrb	r1, [r4, r1]
    218c:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    218e:	2186      	movs	r1, #134	; 0x86
    2190:	5c61      	ldrb	r1, [r4, r1]
    2192:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2194:	7ae3      	ldrb	r3, [r4, #11]
    2196:	07d9      	lsls	r1, r3, #31
    2198:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    219a:	2602      	movs	r6, #2
    219c:	4033      	ands	r3, r6
    219e:	430b      	orrs	r3, r1
    21a0:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    21a2:	7ae1      	ldrb	r1, [r4, #11]
    21a4:	0749      	lsls	r1, r1, #29
    21a6:	0fc9      	lsrs	r1, r1, #31
    21a8:	0149      	lsls	r1, r1, #5
    21aa:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    21ac:	7ae1      	ldrb	r1, [r4, #11]
    21ae:	0709      	lsls	r1, r1, #28
    21b0:	0fc9      	lsrs	r1, r1, #31
    21b2:	0189      	lsls	r1, r1, #6
    21b4:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    21b6:	4952      	ldr	r1, [pc, #328]	; (2300 <STACK_SIZE+0x300>)
    21b8:	187f      	adds	r7, r7, r1
    21ba:	4279      	negs	r1, r7
    21bc:	414f      	adcs	r7, r1
    21be:	00bf      	lsls	r7, r7, #2
    21c0:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    21c2:	7a67      	ldrb	r7, [r4, #9]
    21c4:	7aa1      	ldrb	r1, [r4, #10]
    21c6:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    21c8:	4339      	orrs	r1, r7
    21ca:	4646      	mov	r6, r8
    21cc:	1a70      	subs	r0, r6, r1
    21ce:	4241      	negs	r1, r0
    21d0:	4148      	adcs	r0, r1
    21d2:	00c0      	lsls	r0, r0, #3
    21d4:	4303      	orrs	r3, r0
    21d6:	466f      	mov	r7, sp
    21d8:	71bb      	strb	r3, [r7, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    21da:	7960      	ldrb	r0, [r4, #5]
    21dc:	79a1      	ldrb	r1, [r4, #6]
    21de:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    21e0:	4301      	orrs	r1, r0
    21e2:	4847      	ldr	r0, [pc, #284]	; (2300 <STACK_SIZE+0x300>)
    21e4:	1809      	adds	r1, r1, r0
    21e6:	4248      	negs	r0, r1
    21e8:	4141      	adcs	r1, r0
    21ea:	0109      	lsls	r1, r1, #4
    21ec:	430b      	orrs	r3, r1
    21ee:	71bb      	strb	r3, [r7, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    21f0:	4668      	mov	r0, sp
    21f2:	4790      	blx	r2
    21f4:	e000      	b.n	21f8 <STACK_SIZE+0x1f8>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    21f6:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    21f8:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    21fa:	07db      	lsls	r3, r3, #31
    21fc:	17db      	asrs	r3, r3, #31
    21fe:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2200:	79e3      	ldrb	r3, [r4, #7]
    2202:	7a22      	ldrb	r2, [r4, #8]
    2204:	0212      	lsls	r2, r2, #8
    2206:	431a      	orrs	r2, r3
    2208:	4b34      	ldr	r3, [pc, #208]	; (22dc <STACK_SIZE+0x2dc>)
    220a:	429a      	cmp	r2, r3
    220c:	d10b      	bne.n	2226 <STACK_SIZE+0x226>
			nwkIb.addr == frame->header.nwkDstAddr &&
    220e:	7be1      	ldrb	r1, [r4, #15]
    2210:	7c23      	ldrb	r3, [r4, #16]
    2212:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2214:	4a32      	ldr	r2, [pc, #200]	; (22e0 <STACK_SIZE+0x2e0>)
    2216:	8812      	ldrh	r2, [r2, #0]
    2218:	430b      	orrs	r3, r1
    221a:	429a      	cmp	r2, r3
    221c:	d103      	bne.n	2226 <STACK_SIZE+0x226>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    221e:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    2220:	0719      	lsls	r1, r3, #28
    2222:	d400      	bmi.n	2226 <STACK_SIZE+0x226>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    2224:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    2226:	7963      	ldrb	r3, [r4, #5]
    2228:	79a2      	ldrb	r2, [r4, #6]
    222a:	0212      	lsls	r2, r2, #8
    222c:	431a      	orrs	r2, r3
    222e:	4b2b      	ldr	r3, [pc, #172]	; (22dc <STACK_SIZE+0x2dc>)
    2230:	429a      	cmp	r2, r3
    2232:	d03c      	beq.n	22ae <STACK_SIZE+0x2ae>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2234:	4b2a      	ldr	r3, [pc, #168]	; (22e0 <STACK_SIZE+0x2e0>)
    2236:	881a      	ldrh	r2, [r3, #0]
    2238:	4b28      	ldr	r3, [pc, #160]	; (22dc <STACK_SIZE+0x2dc>)
    223a:	429a      	cmp	r2, r3
    223c:	d037      	beq.n	22ae <STACK_SIZE+0x2ae>
		ack = false;
	}

	if (ack) {
    223e:	2800      	cmp	r0, #0
    2240:	d035      	beq.n	22ae <STACK_SIZE+0x2ae>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    2242:	4b30      	ldr	r3, [pc, #192]	; (2304 <STACK_SIZE+0x304>)
    2244:	4798      	blx	r3
    2246:	1e07      	subs	r7, r0, #0
    2248:	d031      	beq.n	22ae <STACK_SIZE+0x2ae>
		return;
	}

	nwkFrameCommandInit(ack);
    224a:	4b2f      	ldr	r3, [pc, #188]	; (2308 <STACK_SIZE+0x308>)
    224c:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    224e:	787b      	ldrb	r3, [r7, #1]
    2250:	3303      	adds	r3, #3
    2252:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    2254:	2200      	movs	r2, #0
    2256:	2389      	movs	r3, #137	; 0x89
    2258:	54fa      	strb	r2, [r7, r3]
    225a:	238a      	movs	r3, #138	; 0x8a
    225c:	54fa      	strb	r2, [r7, r3]
    225e:	238b      	movs	r3, #139	; 0x8b
    2260:	54fa      	strb	r2, [r7, r3]
    2262:	238c      	movs	r3, #140	; 0x8c
    2264:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2266:	7ae2      	ldrb	r2, [r4, #11]
    2268:	2302      	movs	r3, #2
    226a:	401a      	ands	r2, r3
    226c:	7afb      	ldrb	r3, [r7, #11]
    226e:	2102      	movs	r1, #2
    2270:	438b      	bics	r3, r1
    2272:	4313      	orrs	r3, r2
    2274:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2276:	7b62      	ldrb	r2, [r4, #13]
    2278:	7ba3      	ldrb	r3, [r4, #14]
    227a:	73fa      	strb	r2, [r7, #15]
    227c:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    227e:	2381      	movs	r3, #129	; 0x81
    2280:	5cfa      	ldrb	r2, [r7, r3]
    2282:	2382      	movs	r3, #130	; 0x82
    2284:	5cfb      	ldrb	r3, [r7, r3]
    2286:	021b      	lsls	r3, r3, #8
    2288:	4313      	orrs	r3, r2
    228a:	2283      	movs	r2, #131	; 0x83
    228c:	5cba      	ldrb	r2, [r7, r2]
    228e:	0412      	lsls	r2, r2, #16
    2290:	4313      	orrs	r3, r2
    2292:	2284      	movs	r2, #132	; 0x84
    2294:	5cba      	ldrb	r2, [r7, r2]
    2296:	0612      	lsls	r2, r2, #24
    2298:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    229a:	2200      	movs	r2, #0
    229c:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    229e:	4a17      	ldr	r2, [pc, #92]	; (22fc <STACK_SIZE+0x2fc>)
    22a0:	7812      	ldrb	r2, [r2, #0]
    22a2:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    22a4:	7b22      	ldrb	r2, [r4, #12]
    22a6:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    22a8:	1c38      	adds	r0, r7, #0
    22aa:	4b18      	ldr	r3, [pc, #96]	; (230c <STACK_SIZE+0x30c>)
    22ac:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    22ae:	2324      	movs	r3, #36	; 0x24
    22b0:	7023      	strb	r3, [r4, #0]
    22b2:	e006      	b.n	22c2 <STACK_SIZE+0x2c2>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    22b4:	1c20      	adds	r0, r4, #0
    22b6:	4b16      	ldr	r3, [pc, #88]	; (2310 <STACK_SIZE+0x310>)
    22b8:	4798      	blx	r3
		}
		break;
    22ba:	e002      	b.n	22c2 <STACK_SIZE+0x2c2>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    22bc:	1c20      	adds	r0, r4, #0
    22be:	4b15      	ldr	r3, [pc, #84]	; (2314 <STACK_SIZE+0x314>)
    22c0:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    22c2:	1c20      	adds	r0, r4, #0
    22c4:	47a8      	blx	r5
    22c6:	1e04      	subs	r4, r0, #0
    22c8:	d000      	beq.n	22cc <STACK_SIZE+0x2cc>
    22ca:	e65f      	b.n	1f8c <nwkRxTaskHandler+0x18>
    22cc:	e02d      	b.n	232a <STACK_SIZE+0x32a>
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	00001a9d 	.word	0x00001a9d
    22d4:	20000580 	.word	0x20000580
    22d8:	00005834 	.word	0x00005834
    22dc:	0000ffff 	.word	0x0000ffff
    22e0:	200007dc 	.word	0x200007dc
    22e4:	00001bed 	.word	0x00001bed
    22e8:	00001bd5 	.word	0x00001bd5
    22ec:	200005c0 	.word	0x200005c0
    22f0:	00002d51 	.word	0x00002d51
    22f4:	00002761 	.word	0x00002761
    22f8:	00002365 	.word	0x00002365
    22fc:	200005bc 	.word	0x200005bc
    2300:	ffff0001 	.word	0xffff0001
    2304:	00001a19 	.word	0x00001a19
    2308:	00001ad9 	.word	0x00001ad9
    230c:	000026a1 	.word	0x000026a1
    2310:	00001d79 	.word	0x00001d79
    2314:	00001a89 	.word	0x00001a89
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2318:	79e1      	ldrb	r1, [r4, #7]
    231a:	7a22      	ldrb	r2, [r4, #8]
    231c:	0212      	lsls	r2, r2, #8
    231e:	430a      	orrs	r2, r1
    2320:	4b04      	ldr	r3, [pc, #16]	; (2334 <STACK_SIZE+0x334>)
    2322:	429a      	cmp	r2, r3
    2324:	d000      	beq.n	2328 <STACK_SIZE+0x328>
    2326:	e6d7      	b.n	20d8 <STACK_SIZE+0xd8>
    2328:	e6c8      	b.n	20bc <STACK_SIZE+0xbc>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    232a:	b005      	add	sp, #20
    232c:	bc0c      	pop	{r2, r3}
    232e:	4690      	mov	r8, r2
    2330:	4699      	mov	r9, r3
    2332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2334:	0000ffff 	.word	0x0000ffff

00002338 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2338:	2300      	movs	r3, #0
    233a:	4a02      	ldr	r2, [pc, #8]	; (2344 <nwkSecurityInit+0xc>)
    233c:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    233e:	4a02      	ldr	r2, [pc, #8]	; (2348 <nwkSecurityInit+0x10>)
    2340:	6013      	str	r3, [r2, #0]
}
    2342:	4770      	bx	lr
    2344:	200005d4 	.word	0x200005d4
    2348:	200005d8 	.word	0x200005d8

0000234c <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    234c:	b508      	push	{r3, lr}
    234e:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    2350:	4802      	ldr	r0, [pc, #8]	; (235c <NWK_SetSecurityKey+0x10>)
    2352:	2210      	movs	r2, #16
    2354:	4b02      	ldr	r3, [pc, #8]	; (2360 <NWK_SetSecurityKey+0x14>)
    2356:	4798      	blx	r3
}
    2358:	bd08      	pop	{r3, pc}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	20000824 	.word	0x20000824
    2360:	00004845 	.word	0x00004845

00002364 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    2364:	2900      	cmp	r1, #0
    2366:	d002      	beq.n	236e <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    2368:	2330      	movs	r3, #48	; 0x30
    236a:	7003      	strb	r3, [r0, #0]
    236c:	e001      	b.n	2372 <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    236e:	2331      	movs	r3, #49	; 0x31
    2370:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    2372:	4b02      	ldr	r3, [pc, #8]	; (237c <nwkSecurityProcess+0x18>)
    2374:	781a      	ldrb	r2, [r3, #0]
    2376:	3201      	adds	r2, #1
    2378:	701a      	strb	r2, [r3, #0]
}
    237a:	4770      	bx	lr
    237c:	200005d4 	.word	0x200005d4

00002380 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    2380:	b5f0      	push	{r4, r5, r6, r7, lr}
    2382:	4647      	mov	r7, r8
    2384:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2386:	4b24      	ldr	r3, [pc, #144]	; (2418 <SYS_EncryptConf+0x98>)
    2388:	681e      	ldr	r6, [r3, #0]
    238a:	4b24      	ldr	r3, [pc, #144]	; (241c <SYS_EncryptConf+0x9c>)
    238c:	781b      	ldrb	r3, [r3, #0]
    238e:	4698      	mov	r8, r3
    2390:	2381      	movs	r3, #129	; 0x81
    2392:	5cf3      	ldrb	r3, [r6, r3]
    2394:	2282      	movs	r2, #130	; 0x82
    2396:	5cb1      	ldrb	r1, [r6, r2]
    2398:	0209      	lsls	r1, r1, #8
    239a:	4319      	orrs	r1, r3
    239c:	2383      	movs	r3, #131	; 0x83
    239e:	5cf4      	ldrb	r4, [r6, r3]
    23a0:	0424      	lsls	r4, r4, #16
    23a2:	4321      	orrs	r1, r4
    23a4:	2384      	movs	r3, #132	; 0x84
    23a6:	5cf4      	ldrb	r4, [r6, r3]
    23a8:	0624      	lsls	r4, r4, #24
    23aa:	4321      	orrs	r1, r4
    23ac:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    23ae:	4b1c      	ldr	r3, [pc, #112]	; (2420 <SYS_EncryptConf+0xa0>)
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	469c      	mov	ip, r3
    23b4:	1c1f      	adds	r7, r3, #0
    23b6:	2b10      	cmp	r3, #16
    23b8:	d900      	bls.n	23bc <SYS_EncryptConf+0x3c>
    23ba:	2710      	movs	r7, #16
    23bc:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    23be:	2f00      	cmp	r7, #0
    23c0:	d016      	beq.n	23f0 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    23c2:	4b18      	ldr	r3, [pc, #96]	; (2424 <SYS_EncryptConf+0xa4>)
    23c4:	781d      	ldrb	r5, [r3, #0]
    23c6:	1c0b      	adds	r3, r1, #0
    23c8:	4a17      	ldr	r2, [pc, #92]	; (2428 <SYS_EncryptConf+0xa8>)
    23ca:	1e7c      	subs	r4, r7, #1
    23cc:	b2e4      	uxtb	r4, r4
    23ce:	190c      	adds	r4, r1, r4
    23d0:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    23d2:	7810      	ldrb	r0, [r2, #0]
    23d4:	7819      	ldrb	r1, [r3, #0]
    23d6:	4041      	eors	r1, r0
    23d8:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    23da:	2d00      	cmp	r5, #0
    23dc:	d001      	beq.n	23e2 <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    23de:	7011      	strb	r1, [r2, #0]
    23e0:	e002      	b.n	23e8 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    23e2:	7810      	ldrb	r0, [r2, #0]
    23e4:	4041      	eors	r1, r0
    23e6:	7011      	strb	r1, [r2, #0]
    23e8:	3301      	adds	r3, #1
    23ea:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    23ec:	42a3      	cmp	r3, r4
    23ee:	d1f0      	bne.n	23d2 <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    23f0:	4643      	mov	r3, r8
    23f2:	18fa      	adds	r2, r7, r3
    23f4:	4b09      	ldr	r3, [pc, #36]	; (241c <SYS_EncryptConf+0x9c>)
    23f6:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    23f8:	4663      	mov	r3, ip
    23fa:	1bdf      	subs	r7, r3, r7
    23fc:	b2ff      	uxtb	r7, r7
    23fe:	4b08      	ldr	r3, [pc, #32]	; (2420 <SYS_EncryptConf+0xa0>)
    2400:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    2402:	2f00      	cmp	r7, #0
    2404:	d002      	beq.n	240c <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2406:	2332      	movs	r3, #50	; 0x32
    2408:	7033      	strb	r3, [r6, #0]
    240a:	e001      	b.n	2410 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    240c:	2334      	movs	r3, #52	; 0x34
    240e:	7033      	strb	r3, [r6, #0]
	}
}
    2410:	bc04      	pop	{r2}
    2412:	4690      	mov	r8, r2
    2414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	200005d8 	.word	0x200005d8
    241c:	200005dc 	.word	0x200005dc
    2420:	200005dd 	.word	0x200005dd
    2424:	200005de 	.word	0x200005de
    2428:	200005e0 	.word	0x200005e0

0000242c <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    242c:	b530      	push	{r4, r5, lr}
    242e:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    2430:	4b56      	ldr	r3, [pc, #344]	; (258c <nwkSecurityTaskHandler+0x160>)
    2432:	781b      	ldrb	r3, [r3, #0]
    2434:	2b00      	cmp	r3, #0
    2436:	d100      	bne.n	243a <nwkSecurityTaskHandler+0xe>
    2438:	e0a5      	b.n	2586 <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    243a:	4b55      	ldr	r3, [pc, #340]	; (2590 <nwkSecurityTaskHandler+0x164>)
    243c:	681c      	ldr	r4, [r3, #0]
    243e:	2c00      	cmp	r4, #0
    2440:	d100      	bne.n	2444 <nwkSecurityTaskHandler+0x18>
    2442:	e09b      	b.n	257c <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    2444:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    2446:	2b34      	cmp	r3, #52	; 0x34
    2448:	d145      	bne.n	24d6 <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    244a:	2381      	movs	r3, #129	; 0x81
    244c:	5ce3      	ldrb	r3, [r4, r3]
    244e:	2282      	movs	r2, #130	; 0x82
    2450:	5ca1      	ldrb	r1, [r4, r2]
    2452:	0209      	lsls	r1, r1, #8
    2454:	4319      	orrs	r1, r3
    2456:	2383      	movs	r3, #131	; 0x83
    2458:	5ce3      	ldrb	r3, [r4, r3]
    245a:	041b      	lsls	r3, r3, #16
    245c:	4319      	orrs	r1, r3
    245e:	2384      	movs	r3, #132	; 0x84
    2460:	5ce3      	ldrb	r3, [r4, r3]
    2462:	061b      	lsls	r3, r3, #24
    2464:	4319      	orrs	r1, r3
    2466:	4b4b      	ldr	r3, [pc, #300]	; (2594 <nwkSecurityTaskHandler+0x168>)
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    246c:	4b4a      	ldr	r3, [pc, #296]	; (2598 <nwkSecurityTaskHandler+0x16c>)
    246e:	685d      	ldr	r5, [r3, #4]
    2470:	681a      	ldr	r2, [r3, #0]
    2472:	4055      	eors	r5, r2
    2474:	689a      	ldr	r2, [r3, #8]
    2476:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    2478:	68db      	ldr	r3, [r3, #12]
    247a:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    247c:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    247e:	4b47      	ldr	r3, [pc, #284]	; (259c <nwkSecurityTaskHandler+0x170>)
    2480:	781b      	ldrb	r3, [r3, #0]
    2482:	2b00      	cmp	r3, #0
    2484:	d009      	beq.n	249a <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    2486:	1c08      	adds	r0, r1, #0
    2488:	4669      	mov	r1, sp
    248a:	2204      	movs	r2, #4
    248c:	4b44      	ldr	r3, [pc, #272]	; (25a0 <nwkSecurityTaskHandler+0x174>)
    248e:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    2490:	7863      	ldrb	r3, [r4, #1]
    2492:	3304      	adds	r3, #4
    2494:	7063      	strb	r3, [r4, #1]
		return true;
    2496:	2101      	movs	r1, #1
    2498:	e008      	b.n	24ac <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    249a:	a801      	add	r0, sp, #4
    249c:	2204      	movs	r2, #4
    249e:	4b40      	ldr	r3, [pc, #256]	; (25a0 <nwkSecurityTaskHandler+0x174>)
    24a0:	4798      	blx	r3
		return vmic == tmic;
    24a2:	9b01      	ldr	r3, [sp, #4]
    24a4:	1ae9      	subs	r1, r5, r3
    24a6:	424d      	negs	r5, r1
    24a8:	4169      	adcs	r1, r5
    24aa:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    24ac:	4b3b      	ldr	r3, [pc, #236]	; (259c <nwkSecurityTaskHandler+0x170>)
    24ae:	781b      	ldrb	r3, [r3, #0]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d004      	beq.n	24be <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    24b4:	4b36      	ldr	r3, [pc, #216]	; (2590 <nwkSecurityTaskHandler+0x164>)
    24b6:	6818      	ldr	r0, [r3, #0]
    24b8:	4b3a      	ldr	r3, [pc, #232]	; (25a4 <nwkSecurityTaskHandler+0x178>)
    24ba:	4798      	blx	r3
    24bc:	e003      	b.n	24c6 <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    24be:	4b34      	ldr	r3, [pc, #208]	; (2590 <nwkSecurityTaskHandler+0x164>)
    24c0:	6818      	ldr	r0, [r3, #0]
    24c2:	4b39      	ldr	r3, [pc, #228]	; (25a8 <nwkSecurityTaskHandler+0x17c>)
    24c4:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    24c6:	2200      	movs	r2, #0
    24c8:	4b31      	ldr	r3, [pc, #196]	; (2590 <nwkSecurityTaskHandler+0x164>)
    24ca:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    24cc:	4b2f      	ldr	r3, [pc, #188]	; (258c <nwkSecurityTaskHandler+0x160>)
    24ce:	781a      	ldrb	r2, [r3, #0]
    24d0:	3a01      	subs	r2, #1
    24d2:	701a      	strb	r2, [r3, #0]
    24d4:	e057      	b.n	2586 <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    24d6:	2b32      	cmp	r3, #50	; 0x32
    24d8:	d155      	bne.n	2586 <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    24da:	2333      	movs	r3, #51	; 0x33
    24dc:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    24de:	482e      	ldr	r0, [pc, #184]	; (2598 <nwkSecurityTaskHandler+0x16c>)
    24e0:	4932      	ldr	r1, [pc, #200]	; (25ac <nwkSecurityTaskHandler+0x180>)
    24e2:	4b33      	ldr	r3, [pc, #204]	; (25b0 <nwkSecurityTaskHandler+0x184>)
    24e4:	4798      	blx	r3
    24e6:	e04e      	b.n	2586 <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    24e8:	7803      	ldrb	r3, [r0, #0]
    24ea:	3b30      	subs	r3, #48	; 0x30
    24ec:	2b01      	cmp	r3, #1
    24ee:	d847      	bhi.n	2580 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    24f0:	4b27      	ldr	r3, [pc, #156]	; (2590 <nwkSecurityTaskHandler+0x164>)
    24f2:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    24f4:	4a28      	ldr	r2, [pc, #160]	; (2598 <nwkSecurityTaskHandler+0x16c>)
    24f6:	7b01      	ldrb	r1, [r0, #12]
    24f8:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    24fa:	7bc1      	ldrb	r1, [r0, #15]
    24fc:	7c04      	ldrb	r4, [r0, #16]
    24fe:	0224      	lsls	r4, r4, #8
    2500:	430c      	orrs	r4, r1
    2502:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    2504:	7c41      	ldrb	r1, [r0, #17]
    2506:	0909      	lsrs	r1, r1, #4
    2508:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    250a:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    250c:	7b41      	ldrb	r1, [r0, #13]
    250e:	7b84      	ldrb	r4, [r0, #14]
    2510:	0224      	lsls	r4, r4, #8
    2512:	430c      	orrs	r4, r1
    2514:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    2516:	7c41      	ldrb	r1, [r0, #17]
    2518:	0709      	lsls	r1, r1, #28
    251a:	0f09      	lsrs	r1, r1, #28
    251c:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    251e:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    2520:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2522:	7944      	ldrb	r4, [r0, #5]
    2524:	7983      	ldrb	r3, [r0, #6]
    2526:	021b      	lsls	r3, r3, #8
    2528:	4323      	orrs	r3, r4
    252a:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    252c:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    252e:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    2530:	7803      	ldrb	r3, [r0, #0]
    2532:	2b31      	cmp	r3, #49	; 0x31
    2534:	d102      	bne.n	253c <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    2536:	7843      	ldrb	r3, [r0, #1]
    2538:	3b04      	subs	r3, #4
    253a:	7043      	strb	r3, [r0, #1]
    253c:	1c83      	adds	r3, r0, #2
    253e:	2281      	movs	r2, #129	; 0x81
    2540:	5c81      	ldrb	r1, [r0, r2]
    2542:	2282      	movs	r2, #130	; 0x82
    2544:	5c82      	ldrb	r2, [r0, r2]
    2546:	0212      	lsls	r2, r2, #8
    2548:	430a      	orrs	r2, r1
    254a:	2183      	movs	r1, #131	; 0x83
    254c:	5c41      	ldrb	r1, [r0, r1]
    254e:	0409      	lsls	r1, r1, #16
    2550:	430a      	orrs	r2, r1
    2552:	2184      	movs	r1, #132	; 0x84
    2554:	5c41      	ldrb	r1, [r0, r1]
    2556:	0609      	lsls	r1, r1, #24
    2558:	430a      	orrs	r2, r1
    255a:	1a9a      	subs	r2, r3, r2
    255c:	7843      	ldrb	r3, [r0, #1]
    255e:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    2560:	4b14      	ldr	r3, [pc, #80]	; (25b4 <nwkSecurityTaskHandler+0x188>)
    2562:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    2564:	2200      	movs	r2, #0
    2566:	4b0b      	ldr	r3, [pc, #44]	; (2594 <nwkSecurityTaskHandler+0x168>)
    2568:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    256a:	7802      	ldrb	r2, [r0, #0]
    256c:	3a30      	subs	r2, #48	; 0x30
    256e:	4253      	negs	r3, r2
    2570:	415a      	adcs	r2, r3
    2572:	4b0a      	ldr	r3, [pc, #40]	; (259c <nwkSecurityTaskHandler+0x170>)
    2574:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2576:	2332      	movs	r3, #50	; 0x32
    2578:	7003      	strb	r3, [r0, #0]
    257a:	e004      	b.n	2586 <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    257c:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    257e:	4c0e      	ldr	r4, [pc, #56]	; (25b8 <nwkSecurityTaskHandler+0x18c>)
    2580:	47a0      	blx	r4
    2582:	2800      	cmp	r0, #0
    2584:	d1b0      	bne.n	24e8 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    2586:	b003      	add	sp, #12
    2588:	bd30      	pop	{r4, r5, pc}
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	200005d4 	.word	0x200005d4
    2590:	200005d8 	.word	0x200005d8
    2594:	200005dc 	.word	0x200005dc
    2598:	200005e0 	.word	0x200005e0
    259c:	200005de 	.word	0x200005de
    25a0:	00004845 	.word	0x00004845
    25a4:	00002829 	.word	0x00002829
    25a8:	00001f65 	.word	0x00001f65
    25ac:	20000824 	.word	0x20000824
    25b0:	00002c59 	.word	0x00002c59
    25b4:	200005dd 	.word	0x200005dd
    25b8:	00001a9d 	.word	0x00001a9d

000025bc <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    25bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25be:	4647      	mov	r7, r8
    25c0:	b480      	push	{r7}
    25c2:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    25c4:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    25c6:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    25c8:	4c0f      	ldr	r4, [pc, #60]	; (2608 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    25ca:	2686      	movs	r6, #134	; 0x86
    25cc:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    25ce:	e010      	b.n	25f2 <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    25d0:	7803      	ldrb	r3, [r0, #0]
    25d2:	2b11      	cmp	r3, #17
    25d4:	d10d      	bne.n	25f2 <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    25d6:	5d82      	ldrb	r2, [r0, r6]
    25d8:	5d43      	ldrb	r3, [r0, r5]
    25da:	021b      	lsls	r3, r3, #8
    25dc:	4313      	orrs	r3, r2
    25de:	3b01      	subs	r3, #1
    25e0:	b29b      	uxth	r3, r3
    25e2:	5583      	strb	r3, [r0, r6]
    25e4:	0a1a      	lsrs	r2, r3, #8
    25e6:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    25e8:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    25ea:	2b00      	cmp	r3, #0
    25ec:	d101      	bne.n	25f2 <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    25ee:	2313      	movs	r3, #19
    25f0:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    25f2:	47a0      	blx	r4
    25f4:	2800      	cmp	r0, #0
    25f6:	d1eb      	bne.n	25d0 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    25f8:	2f00      	cmp	r7, #0
    25fa:	d002      	beq.n	2602 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    25fc:	4640      	mov	r0, r8
    25fe:	4b03      	ldr	r3, [pc, #12]	; (260c <nwkTxDelayTimerHandler+0x50>)
    2600:	4798      	blx	r3
	}
}
    2602:	bc04      	pop	{r2}
    2604:	4690      	mov	r8, r2
    2606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2608:	00001a9d 	.word	0x00001a9d
    260c:	00002d51 	.word	0x00002d51

00002610 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2610:	b5f0      	push	{r4, r5, r6, r7, lr}
    2612:	4647      	mov	r7, r8
    2614:	b480      	push	{r7}
    2616:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2618:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    261a:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    261c:	4c11      	ldr	r4, [pc, #68]	; (2664 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    261e:	2686      	movs	r6, #134	; 0x86
    2620:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2622:	e013      	b.n	264c <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2624:	7803      	ldrb	r3, [r0, #0]
    2626:	2b16      	cmp	r3, #22
    2628:	d110      	bne.n	264c <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    262a:	5d82      	ldrb	r2, [r0, r6]
    262c:	5d43      	ldrb	r3, [r0, r5]
    262e:	021b      	lsls	r3, r3, #8
    2630:	4313      	orrs	r3, r2
    2632:	3b01      	subs	r3, #1
    2634:	b29b      	uxth	r3, r3
    2636:	5583      	strb	r3, [r0, r6]
    2638:	0a1a      	lsrs	r2, r3, #8
    263a:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    263c:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    263e:	2b00      	cmp	r3, #0
    2640:	d104      	bne.n	264c <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2642:	2317      	movs	r3, #23
    2644:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2646:	2210      	movs	r2, #16
    2648:	2385      	movs	r3, #133	; 0x85
    264a:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    264c:	47a0      	blx	r4
    264e:	2800      	cmp	r0, #0
    2650:	d1e8      	bne.n	2624 <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2652:	2f00      	cmp	r7, #0
    2654:	d002      	beq.n	265c <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    2656:	4640      	mov	r0, r8
    2658:	4b03      	ldr	r3, [pc, #12]	; (2668 <nwkTxAckWaitTimerHandler+0x58>)
    265a:	4798      	blx	r3
	}
}
    265c:	bc04      	pop	{r2}
    265e:	4690      	mov	r8, r2
    2660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	00001a9d 	.word	0x00001a9d
    2668:	00002d51 	.word	0x00002d51

0000266c <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    266c:	2200      	movs	r2, #0
    266e:	4b07      	ldr	r3, [pc, #28]	; (268c <nwkTxInit+0x20>)
    2670:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2672:	4b07      	ldr	r3, [pc, #28]	; (2690 <nwkTxInit+0x24>)
    2674:	2132      	movs	r1, #50	; 0x32
    2676:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2678:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    267a:	4906      	ldr	r1, [pc, #24]	; (2694 <nwkTxInit+0x28>)
    267c:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    267e:	4b06      	ldr	r3, [pc, #24]	; (2698 <nwkTxInit+0x2c>)
    2680:	210a      	movs	r1, #10
    2682:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2684:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2686:	4a05      	ldr	r2, [pc, #20]	; (269c <nwkTxInit+0x30>)
    2688:	611a      	str	r2, [r3, #16]
}
    268a:	4770      	bx	lr
    268c:	20000604 	.word	0x20000604
    2690:	200005f0 	.word	0x200005f0
    2694:	00002611 	.word	0x00002611
    2698:	20000608 	.word	0x20000608
    269c:	000025bd 	.word	0x000025bd

000026a0 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    26a0:	b510      	push	{r4, lr}
    26a2:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    26a4:	2388      	movs	r3, #136	; 0x88
    26a6:	5cc3      	ldrb	r3, [r0, r3]
    26a8:	0799      	lsls	r1, r3, #30
    26aa:	d502      	bpl.n	26b2 <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    26ac:	2212      	movs	r2, #18
    26ae:	7002      	strb	r2, [r0, #0]
    26b0:	e007      	b.n	26c2 <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    26b2:	7ac2      	ldrb	r2, [r0, #11]
    26b4:	0791      	lsls	r1, r2, #30
    26b6:	d502      	bpl.n	26be <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    26b8:	2210      	movs	r2, #16
    26ba:	7002      	strb	r2, [r0, #0]
    26bc:	e001      	b.n	26c2 <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    26be:	2212      	movs	r2, #18
    26c0:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    26c2:	2100      	movs	r1, #0
    26c4:	2285      	movs	r2, #133	; 0x85
    26c6:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    26c8:	07da      	lsls	r2, r3, #31
    26ca:	d504      	bpl.n	26d6 <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    26cc:	2101      	movs	r1, #1
    26ce:	4249      	negs	r1, r1
    26d0:	7161      	strb	r1, [r4, #5]
    26d2:	71a1      	strb	r1, [r4, #6]
    26d4:	e004      	b.n	26e0 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    26d6:	491e      	ldr	r1, [pc, #120]	; (2750 <nwkTxFrame+0xb0>)
    26d8:	7888      	ldrb	r0, [r1, #2]
    26da:	7160      	strb	r0, [r4, #5]
    26dc:	78c9      	ldrb	r1, [r1, #3]
    26de:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    26e0:	2205      	movs	r2, #5
    26e2:	421a      	tst	r2, r3
    26e4:	d103      	bne.n	26ee <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    26e6:	1c20      	adds	r0, r4, #0
    26e8:	4b1a      	ldr	r3, [pc, #104]	; (2754 <nwkTxFrame+0xb4>)
    26ea:	4798      	blx	r3
    26ec:	e003      	b.n	26f6 <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    26ee:	7be1      	ldrb	r1, [r4, #15]
    26f0:	7c22      	ldrb	r2, [r4, #16]
    26f2:	71e1      	strb	r1, [r4, #7]
    26f4:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    26f6:	4a16      	ldr	r2, [pc, #88]	; (2750 <nwkTxFrame+0xb0>)
    26f8:	7811      	ldrb	r1, [r2, #0]
    26fa:	7261      	strb	r1, [r4, #9]
    26fc:	7851      	ldrb	r1, [r2, #1]
    26fe:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    2700:	7951      	ldrb	r1, [r2, #5]
    2702:	3101      	adds	r1, #1
    2704:	b2c9      	uxtb	r1, r1
    2706:	7151      	strb	r1, [r2, #5]
    2708:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    270a:	79e1      	ldrb	r1, [r4, #7]
    270c:	7a22      	ldrb	r2, [r4, #8]
    270e:	0212      	lsls	r2, r2, #8
    2710:	430a      	orrs	r2, r1
    2712:	4b11      	ldr	r3, [pc, #68]	; (2758 <nwkTxFrame+0xb8>)
    2714:	429a      	cmp	r2, r3
    2716:	d110      	bne.n	273a <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    2718:	2341      	movs	r3, #65	; 0x41
    271a:	70a3      	strb	r3, [r4, #2]
    271c:	2378      	movs	r3, #120	; 0x78
    271e:	425b      	negs	r3, r3
    2720:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2722:	4b0e      	ldr	r3, [pc, #56]	; (275c <nwkTxFrame+0xbc>)
    2724:	4798      	blx	r3
    2726:	2307      	movs	r3, #7
    2728:	4018      	ands	r0, r3
    272a:	3001      	adds	r0, #1
    272c:	2386      	movs	r3, #134	; 0x86
    272e:	54e0      	strb	r0, [r4, r3]
    2730:	0a00      	lsrs	r0, r0, #8
    2732:	b280      	uxth	r0, r0
    2734:	2387      	movs	r3, #135	; 0x87
    2736:	54e0      	strb	r0, [r4, r3]
    2738:	e009      	b.n	274e <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    273a:	2361      	movs	r3, #97	; 0x61
    273c:	70a3      	strb	r3, [r4, #2]
    273e:	2378      	movs	r3, #120	; 0x78
    2740:	425b      	negs	r3, r3
    2742:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    2744:	2200      	movs	r2, #0
    2746:	2386      	movs	r3, #134	; 0x86
    2748:	54e2      	strb	r2, [r4, r3]
    274a:	2387      	movs	r3, #135	; 0x87
    274c:	54e2      	strb	r2, [r4, r3]
	}
}
    274e:	bd10      	pop	{r4, pc}
    2750:	200007dc 	.word	0x200007dc
    2754:	00001d31 	.word	0x00001d31
    2758:	0000ffff 	.word	0x0000ffff
    275c:	000048a1 	.word	0x000048a1

00002760 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    2760:	b538      	push	{r3, r4, r5, lr}
    2762:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    2764:	4b1d      	ldr	r3, [pc, #116]	; (27dc <nwkTxBroadcastFrame+0x7c>)
    2766:	4798      	blx	r3
    2768:	1e04      	subs	r4, r0, #0
    276a:	d036      	beq.n	27da <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    276c:	2312      	movs	r3, #18
    276e:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    2770:	786b      	ldrb	r3, [r5, #1]
    2772:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    2774:	2200      	movs	r2, #0
    2776:	2385      	movs	r3, #133	; 0x85
    2778:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    277a:	4b19      	ldr	r3, [pc, #100]	; (27e0 <nwkTxBroadcastFrame+0x80>)
    277c:	4798      	blx	r3
    277e:	2307      	movs	r3, #7
    2780:	4018      	ands	r0, r3
    2782:	3001      	adds	r0, #1
    2784:	2386      	movs	r3, #134	; 0x86
    2786:	54e0      	strb	r0, [r4, r3]
    2788:	0a00      	lsrs	r0, r0, #8
    278a:	b280      	uxth	r0, r0
    278c:	2387      	movs	r3, #135	; 0x87
    278e:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    2790:	2200      	movs	r2, #0
    2792:	2389      	movs	r3, #137	; 0x89
    2794:	54e2      	strb	r2, [r4, r3]
    2796:	238a      	movs	r3, #138	; 0x8a
    2798:	54e2      	strb	r2, [r4, r3]
    279a:	238b      	movs	r3, #139	; 0x8b
    279c:	54e2      	strb	r2, [r4, r3]
    279e:	238c      	movs	r3, #140	; 0x8c
    27a0:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    27a2:	1ca0      	adds	r0, r4, #2
    27a4:	786a      	ldrb	r2, [r5, #1]
    27a6:	1ca9      	adds	r1, r5, #2
    27a8:	4b0e      	ldr	r3, [pc, #56]	; (27e4 <nwkTxBroadcastFrame+0x84>)
    27aa:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    27ac:	2341      	movs	r3, #65	; 0x41
    27ae:	70a3      	strb	r3, [r4, #2]
    27b0:	2378      	movs	r3, #120	; 0x78
    27b2:	425b      	negs	r3, r3
    27b4:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    27b6:	2301      	movs	r3, #1
    27b8:	425b      	negs	r3, r3
    27ba:	71e3      	strb	r3, [r4, #7]
    27bc:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    27be:	796a      	ldrb	r2, [r5, #5]
    27c0:	79ab      	ldrb	r3, [r5, #6]
    27c2:	7162      	strb	r2, [r4, #5]
    27c4:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    27c6:	4b08      	ldr	r3, [pc, #32]	; (27e8 <nwkTxBroadcastFrame+0x88>)
    27c8:	781a      	ldrb	r2, [r3, #0]
    27ca:	7262      	strb	r2, [r4, #9]
    27cc:	785a      	ldrb	r2, [r3, #1]
    27ce:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    27d0:	795a      	ldrb	r2, [r3, #5]
    27d2:	3201      	adds	r2, #1
    27d4:	b2d2      	uxtb	r2, r2
    27d6:	715a      	strb	r2, [r3, #5]
    27d8:	7122      	strb	r2, [r4, #4]
}
    27da:	bd38      	pop	{r3, r4, r5, pc}
    27dc:	00001a19 	.word	0x00001a19
    27e0:	000048a1 	.word	0x000048a1
    27e4:	00004845 	.word	0x00004845
    27e8:	200007dc 	.word	0x200007dc

000027ec <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    27ec:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    27ee:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    27f0:	7b03      	ldrb	r3, [r0, #12]
		return false;
    27f2:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    27f4:	2b03      	cmp	r3, #3
    27f6:	d113      	bne.n	2820 <nwkTxAckReceived+0x34>
    27f8:	e00d      	b.n	2816 <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    27fa:	7803      	ldrb	r3, [r0, #0]
    27fc:	2b16      	cmp	r3, #22
    27fe:	d10c      	bne.n	281a <nwkTxAckReceived+0x2e>
    2800:	7b02      	ldrb	r2, [r0, #12]
    2802:	786b      	ldrb	r3, [r5, #1]
    2804:	429a      	cmp	r2, r3
    2806:	d108      	bne.n	281a <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2808:	2317      	movs	r3, #23
    280a:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    280c:	78aa      	ldrb	r2, [r5, #2]
    280e:	2388      	movs	r3, #136	; 0x88
    2810:	54c2      	strb	r2, [r0, r3]
			return true;
    2812:	2001      	movs	r0, #1
    2814:	e004      	b.n	2820 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2816:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2818:	4c02      	ldr	r4, [pc, #8]	; (2824 <nwkTxAckReceived+0x38>)
    281a:	47a0      	blx	r4
    281c:	2800      	cmp	r0, #0
    281e:	d1ec      	bne.n	27fa <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    2820:	bd38      	pop	{r3, r4, r5, pc}
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	00001a9d 	.word	0x00001a9d

00002828 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    2828:	2312      	movs	r3, #18
    282a:	7003      	strb	r3, [r0, #0]
}
    282c:	4770      	bx	lr
    282e:	46c0      	nop			; (mov r8, r8)

00002830 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2830:	4b0d      	ldr	r3, [pc, #52]	; (2868 <PHY_DataConf+0x38>)
    2832:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    2834:	2801      	cmp	r0, #1
    2836:	d009      	beq.n	284c <PHY_DataConf+0x1c>
    2838:	2800      	cmp	r0, #0
    283a:	d003      	beq.n	2844 <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    283c:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    283e:	2802      	cmp	r0, #2
    2840:	d005      	beq.n	284e <PHY_DataConf+0x1e>
    2842:	e001      	b.n	2848 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    2844:	2200      	movs	r2, #0
    2846:	e002      	b.n	284e <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    2848:	2201      	movs	r2, #1
    284a:	e000      	b.n	284e <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    284c:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    284e:	2185      	movs	r1, #133	; 0x85
    2850:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    2852:	2215      	movs	r2, #21
    2854:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    2856:	2200      	movs	r2, #0
    2858:	4b03      	ldr	r3, [pc, #12]	; (2868 <PHY_DataConf+0x38>)
    285a:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    285c:	4a03      	ldr	r2, [pc, #12]	; (286c <PHY_DataConf+0x3c>)
    285e:	2358      	movs	r3, #88	; 0x58
    2860:	5ad1      	ldrh	r1, [r2, r3]
    2862:	3901      	subs	r1, #1
    2864:	52d1      	strh	r1, [r2, r3]
}
    2866:	4770      	bx	lr
    2868:	20000604 	.word	0x20000604
    286c:	200007dc 	.word	0x200007dc

00002870 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    2870:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    2872:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2874:	4d37      	ldr	r5, [pc, #220]	; (2954 <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    2876:	4e38      	ldr	r6, [pc, #224]	; (2958 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2878:	e066      	b.n	2948 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    287a:	7823      	ldrb	r3, [r4, #0]
    287c:	3b10      	subs	r3, #16
    287e:	b2da      	uxtb	r2, r3
    2880:	2a07      	cmp	r2, #7
    2882:	d861      	bhi.n	2948 <nwkTxTaskHandler+0xd8>
    2884:	0093      	lsls	r3, r2, #2
    2886:	58f3      	ldr	r3, [r6, r3]
    2888:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    288a:	1c20      	adds	r0, r4, #0
    288c:	2101      	movs	r1, #1
    288e:	4b33      	ldr	r3, [pc, #204]	; (295c <nwkTxTaskHandler+0xec>)
    2890:	4798      	blx	r3
		}
		break;
    2892:	e059      	b.n	2948 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    2894:	2386      	movs	r3, #134	; 0x86
    2896:	5ce2      	ldrb	r2, [r4, r3]
    2898:	2387      	movs	r3, #135	; 0x87
    289a:	5ce3      	ldrb	r3, [r4, r3]
    289c:	021b      	lsls	r3, r3, #8
    289e:	4313      	orrs	r3, r2
    28a0:	d005      	beq.n	28ae <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    28a2:	2311      	movs	r3, #17
    28a4:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    28a6:	482e      	ldr	r0, [pc, #184]	; (2960 <nwkTxTaskHandler+0xf0>)
    28a8:	4b2e      	ldr	r3, [pc, #184]	; (2964 <nwkTxTaskHandler+0xf4>)
    28aa:	4798      	blx	r3
    28ac:	e04c      	b.n	2948 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    28ae:	2313      	movs	r3, #19
    28b0:	7023      	strb	r3, [r4, #0]
    28b2:	e049      	b.n	2948 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    28b4:	4b2c      	ldr	r3, [pc, #176]	; (2968 <nwkTxTaskHandler+0xf8>)
    28b6:	681b      	ldr	r3, [r3, #0]
    28b8:	2b00      	cmp	r3, #0
    28ba:	d145      	bne.n	2948 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    28bc:	4b2a      	ldr	r3, [pc, #168]	; (2968 <nwkTxTaskHandler+0xf8>)
    28be:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    28c0:	2314      	movs	r3, #20
    28c2:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    28c4:	1c60      	adds	r0, r4, #1
    28c6:	4b29      	ldr	r3, [pc, #164]	; (296c <nwkTxTaskHandler+0xfc>)
    28c8:	4798      	blx	r3
				nwkIb.lock++;
    28ca:	4a29      	ldr	r2, [pc, #164]	; (2970 <nwkTxTaskHandler+0x100>)
    28cc:	2358      	movs	r3, #88	; 0x58
    28ce:	5ad1      	ldrh	r1, [r2, r3]
    28d0:	3101      	adds	r1, #1
    28d2:	52d1      	strh	r1, [r2, r3]
    28d4:	e038      	b.n	2948 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    28d6:	2385      	movs	r3, #133	; 0x85
    28d8:	5ce3      	ldrb	r3, [r4, r3]
    28da:	2b00      	cmp	r3, #0
    28dc:	d119      	bne.n	2912 <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    28de:	7b61      	ldrb	r1, [r4, #13]
    28e0:	7ba3      	ldrb	r3, [r4, #14]
    28e2:	021b      	lsls	r3, r3, #8
    28e4:	4a22      	ldr	r2, [pc, #136]	; (2970 <nwkTxTaskHandler+0x100>)
    28e6:	8812      	ldrh	r2, [r2, #0]
    28e8:	430b      	orrs	r3, r1
    28ea:	429a      	cmp	r2, r3
    28ec:	d10e      	bne.n	290c <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    28ee:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    28f0:	07da      	lsls	r2, r3, #31
    28f2:	d50b      	bpl.n	290c <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    28f4:	2316      	movs	r3, #22
    28f6:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    28f8:	2215      	movs	r2, #21
    28fa:	2386      	movs	r3, #134	; 0x86
    28fc:	54e2      	strb	r2, [r4, r3]
    28fe:	2200      	movs	r2, #0
    2900:	2387      	movs	r3, #135	; 0x87
    2902:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    2904:	481b      	ldr	r0, [pc, #108]	; (2974 <nwkTxTaskHandler+0x104>)
    2906:	4b17      	ldr	r3, [pc, #92]	; (2964 <nwkTxTaskHandler+0xf4>)
    2908:	4798      	blx	r3
    290a:	e01d      	b.n	2948 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    290c:	2317      	movs	r3, #23
    290e:	7023      	strb	r3, [r4, #0]
    2910:	e01a      	b.n	2948 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    2912:	2317      	movs	r3, #23
    2914:	7023      	strb	r3, [r4, #0]
    2916:	e017      	b.n	2948 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    2918:	1c20      	adds	r0, r4, #0
    291a:	4b17      	ldr	r3, [pc, #92]	; (2978 <nwkTxTaskHandler+0x108>)
    291c:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    291e:	2389      	movs	r3, #137	; 0x89
    2920:	5ce2      	ldrb	r2, [r4, r3]
    2922:	238a      	movs	r3, #138	; 0x8a
    2924:	5ce3      	ldrb	r3, [r4, r3]
    2926:	021b      	lsls	r3, r3, #8
    2928:	4313      	orrs	r3, r2
    292a:	228b      	movs	r2, #139	; 0x8b
    292c:	5ca2      	ldrb	r2, [r4, r2]
    292e:	0412      	lsls	r2, r2, #16
    2930:	4313      	orrs	r3, r2
    2932:	228c      	movs	r2, #140	; 0x8c
    2934:	5ca2      	ldrb	r2, [r4, r2]
    2936:	0612      	lsls	r2, r2, #24
    2938:	4313      	orrs	r3, r2
    293a:	d103      	bne.n	2944 <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    293c:	1c20      	adds	r0, r4, #0
    293e:	4b0f      	ldr	r3, [pc, #60]	; (297c <nwkTxTaskHandler+0x10c>)
    2940:	4798      	blx	r3
    2942:	e001      	b.n	2948 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    2944:	1c20      	adds	r0, r4, #0
    2946:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2948:	1c20      	adds	r0, r4, #0
    294a:	47a8      	blx	r5
    294c:	1e04      	subs	r4, r0, #0
    294e:	d194      	bne.n	287a <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    2950:	bd70      	pop	{r4, r5, r6, pc}
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	00001a9d 	.word	0x00001a9d
    2958:	00005848 	.word	0x00005848
    295c:	00002365 	.word	0x00002365
    2960:	20000608 	.word	0x20000608
    2964:	00002d51 	.word	0x00002d51
    2968:	20000604 	.word	0x20000604
    296c:	00002ae5 	.word	0x00002ae5
    2970:	200007dc 	.word	0x200007dc
    2974:	200005f0 	.word	0x200005f0
    2978:	00001ca1 	.word	0x00001ca1
    297c:	00001a89 	.word	0x00001a89

00002980 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    2980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2982:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2984:	4f0b      	ldr	r7, [pc, #44]	; (29b4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2986:	4e0c      	ldr	r6, [pc, #48]	; (29b8 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2988:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    298a:	2002      	movs	r0, #2
    298c:	2103      	movs	r1, #3
    298e:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2990:	2001      	movs	r0, #1
    2992:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2994:	4028      	ands	r0, r5
    2996:	2808      	cmp	r0, #8
    2998:	d1f7      	bne.n	298a <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    299a:	4f06      	ldr	r7, [pc, #24]	; (29b4 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    299c:	4e06      	ldr	r6, [pc, #24]	; (29b8 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    299e:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    29a0:	2002      	movs	r0, #2
    29a2:	1c21      	adds	r1, r4, #0
    29a4:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    29a6:	2001      	movs	r0, #1
    29a8:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    29aa:	4028      	ands	r0, r5
    29ac:	4284      	cmp	r4, r0
    29ae:	d1f7      	bne.n	29a0 <phyTrxSetState+0x20>
}
    29b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	00003395 	.word	0x00003395
    29b8:	0000329d 	.word	0x0000329d

000029bc <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    29bc:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    29be:	2008      	movs	r0, #8
    29c0:	4b06      	ldr	r3, [pc, #24]	; (29dc <phySetRxState+0x20>)
    29c2:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    29c4:	200f      	movs	r0, #15
    29c6:	4b06      	ldr	r3, [pc, #24]	; (29e0 <phySetRxState+0x24>)
    29c8:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    29ca:	4b06      	ldr	r3, [pc, #24]	; (29e4 <phySetRxState+0x28>)
    29cc:	781b      	ldrb	r3, [r3, #0]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d002      	beq.n	29d8 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    29d2:	2016      	movs	r0, #22
    29d4:	4b01      	ldr	r3, [pc, #4]	; (29dc <phySetRxState+0x20>)
    29d6:	4798      	blx	r3
	}
}
    29d8:	bd08      	pop	{r3, pc}
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	00002981 	.word	0x00002981
    29e0:	0000329d 	.word	0x0000329d
    29e4:	2000069d 	.word	0x2000069d

000029e8 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    29e8:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    29ea:	4b0e      	ldr	r3, [pc, #56]	; (2a24 <PHY_Init+0x3c>)
    29ec:	4798      	blx	r3
	PhyReset();
    29ee:	4b0e      	ldr	r3, [pc, #56]	; (2a28 <PHY_Init+0x40>)
    29f0:	4798      	blx	r3
	phyRxState = false;
    29f2:	2200      	movs	r2, #0
    29f4:	4b0d      	ldr	r3, [pc, #52]	; (2a2c <PHY_Init+0x44>)
    29f6:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    29f8:	2201      	movs	r2, #1
    29fa:	4b0d      	ldr	r3, [pc, #52]	; (2a30 <PHY_Init+0x48>)
    29fc:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    29fe:	4e0d      	ldr	r6, [pc, #52]	; (2a34 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2a00:	4d0d      	ldr	r5, [pc, #52]	; (2a38 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2a02:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a04:	2002      	movs	r0, #2
    2a06:	2108      	movs	r1, #8
    2a08:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2a0a:	2001      	movs	r0, #1
    2a0c:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2a0e:	4020      	ands	r0, r4
    2a10:	2808      	cmp	r0, #8
    2a12:	d1f7      	bne.n	2a04 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a14:	2004      	movs	r0, #4
    2a16:	212e      	movs	r1, #46	; 0x2e
    2a18:	4c06      	ldr	r4, [pc, #24]	; (2a34 <PHY_Init+0x4c>)
    2a1a:	47a0      	blx	r4
    2a1c:	200c      	movs	r0, #12
    2a1e:	2180      	movs	r1, #128	; 0x80
    2a20:	47a0      	blx	r4
	phyWriteRegister(TRX_CTRL_1_REG,
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG, (1 << RX_SAFE_MODE));
}
    2a22:	bd70      	pop	{r4, r5, r6, pc}
    2a24:	00003149 	.word	0x00003149
    2a28:	0000326d 	.word	0x0000326d
    2a2c:	2000069d 	.word	0x2000069d
    2a30:	2000069c 	.word	0x2000069c
    2a34:	00003395 	.word	0x00003395
    2a38:	0000329d 	.word	0x0000329d

00002a3c <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    2a3c:	b508      	push	{r3, lr}
	phyRxState = rx;
    2a3e:	4b02      	ldr	r3, [pc, #8]	; (2a48 <PHY_SetRxState+0xc>)
    2a40:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    2a42:	4b02      	ldr	r3, [pc, #8]	; (2a4c <PHY_SetRxState+0x10>)
    2a44:	4798      	blx	r3
}
    2a46:	bd08      	pop	{r3, pc}
    2a48:	2000069d 	.word	0x2000069d
    2a4c:	000029bd 	.word	0x000029bd

00002a50 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    2a50:	b510      	push	{r4, lr}
    2a52:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2a54:	2008      	movs	r0, #8
    2a56:	4b05      	ldr	r3, [pc, #20]	; (2a6c <PHY_SetChannel+0x1c>)
    2a58:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    2a5a:	231f      	movs	r3, #31
    2a5c:	1c01      	adds	r1, r0, #0
    2a5e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    2a60:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a62:	b2e1      	uxtb	r1, r4
    2a64:	2008      	movs	r0, #8
    2a66:	4b02      	ldr	r3, [pc, #8]	; (2a70 <PHY_SetChannel+0x20>)
    2a68:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    2a6a:	bd10      	pop	{r4, pc}
    2a6c:	0000329d 	.word	0x0000329d
    2a70:	00003395 	.word	0x00003395

00002a74 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    2a74:	b530      	push	{r4, r5, lr}
    2a76:	b083      	sub	sp, #12
    2a78:	466c      	mov	r4, sp
    2a7a:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a7c:	b2c1      	uxtb	r1, r0
    2a7e:	2022      	movs	r0, #34	; 0x22
    2a80:	4d03      	ldr	r5, [pc, #12]	; (2a90 <PHY_SetPanId+0x1c>)
    2a82:	47a8      	blx	r5
    2a84:	79e1      	ldrb	r1, [r4, #7]
    2a86:	2023      	movs	r0, #35	; 0x23
    2a88:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    2a8a:	b003      	add	sp, #12
    2a8c:	bd30      	pop	{r4, r5, pc}
    2a8e:	46c0      	nop			; (mov r8, r8)
    2a90:	00003395 	.word	0x00003395

00002a94 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    2a94:	b570      	push	{r4, r5, r6, lr}
    2a96:	b082      	sub	sp, #8
    2a98:	466d      	mov	r5, sp
    2a9a:	80e8      	strh	r0, [r5, #6]
    2a9c:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    2a9e:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2aa0:	2020      	movs	r0, #32
    2aa2:	1c31      	adds	r1, r6, #0
    2aa4:	4c05      	ldr	r4, [pc, #20]	; (2abc <PHY_SetShortAddr+0x28>)
    2aa6:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    2aa8:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2aaa:	2021      	movs	r0, #33	; 0x21
    2aac:	1c29      	adds	r1, r5, #0
    2aae:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    2ab0:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2ab2:	b2f1      	uxtb	r1, r6
    2ab4:	202d      	movs	r0, #45	; 0x2d
    2ab6:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    2ab8:	b002      	add	sp, #8
    2aba:	bd70      	pop	{r4, r5, r6, pc}
    2abc:	00003395 	.word	0x00003395

00002ac0 <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    2ac0:	b510      	push	{r4, lr}
    2ac2:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2ac4:	2005      	movs	r0, #5
    2ac6:	4b05      	ldr	r3, [pc, #20]	; (2adc <PHY_SetTxPower+0x1c>)
    2ac8:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    2aca:	230f      	movs	r3, #15
    2acc:	1c01      	adds	r1, r0, #0
    2ace:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    2ad0:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2ad2:	b2e1      	uxtb	r1, r4
    2ad4:	2005      	movs	r0, #5
    2ad6:	4b02      	ldr	r3, [pc, #8]	; (2ae0 <PHY_SetTxPower+0x20>)
    2ad8:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    2ada:	bd10      	pop	{r4, pc}
    2adc:	0000329d 	.word	0x0000329d
    2ae0:	00003395 	.word	0x00003395

00002ae4 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    2ae4:	b510      	push	{r4, lr}
    2ae6:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2ae8:	2019      	movs	r0, #25
    2aea:	4b0c      	ldr	r3, [pc, #48]	; (2b1c <PHY_DataReq+0x38>)
    2aec:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2aee:	200f      	movs	r0, #15
    2af0:	4b0b      	ldr	r3, [pc, #44]	; (2b20 <PHY_DataReq+0x3c>)
    2af2:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    2af4:	7821      	ldrb	r1, [r4, #0]
    2af6:	1c8b      	adds	r3, r1, #2
    2af8:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    2afa:	3101      	adds	r1, #1
    2afc:	b2c9      	uxtb	r1, r1
    2afe:	1c20      	adds	r0, r4, #0
    2b00:	4b08      	ldr	r3, [pc, #32]	; (2b24 <PHY_DataReq+0x40>)
    2b02:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    2b04:	2203      	movs	r2, #3
    2b06:	4b08      	ldr	r3, [pc, #32]	; (2b28 <PHY_DataReq+0x44>)
    2b08:	701a      	strb	r2, [r3, #0]
    2b0a:	4b08      	ldr	r3, [pc, #32]	; (2b2c <PHY_DataReq+0x48>)
    2b0c:	2280      	movs	r2, #128	; 0x80
    2b0e:	0352      	lsls	r2, r2, #13
    2b10:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b16:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    2b18:	bd10      	pop	{r4, pc}
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	00002981 	.word	0x00002981
    2b20:	0000329d 	.word	0x0000329d
    2b24:	000035d1 	.word	0x000035d1
    2b28:	2000069c 	.word	0x2000069c
    2b2c:	41004400 	.word	0x41004400

00002b30 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    2b30:	b510      	push	{r4, lr}
    2b32:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2b34:	1c08      	adds	r0, r1, #0
    2b36:	2100      	movs	r1, #0
    2b38:	2200      	movs	r2, #0
    2b3a:	4b05      	ldr	r3, [pc, #20]	; (2b50 <PHY_EncryptReq+0x20>)
    2b3c:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    2b3e:	1c20      	adds	r0, r4, #0
    2b40:	2100      	movs	r1, #0
    2b42:	4b04      	ldr	r3, [pc, #16]	; (2b54 <PHY_EncryptReq+0x24>)
    2b44:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    2b46:	1c20      	adds	r0, r4, #0
    2b48:	4b03      	ldr	r3, [pc, #12]	; (2b58 <PHY_EncryptReq+0x28>)
    2b4a:	4798      	blx	r3
}
    2b4c:	bd10      	pop	{r4, pc}
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	00002fe1 	.word	0x00002fe1
    2b54:	00002f75 	.word	0x00002f75
    2b58:	00003119 	.word	0x00003119

00002b5c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    2b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b5e:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    2b60:	4b26      	ldr	r3, [pc, #152]	; (2bfc <PHY_TaskHandler+0xa0>)
    2b62:	781b      	ldrb	r3, [r3, #0]
    2b64:	2b02      	cmp	r3, #2
    2b66:	d046      	beq.n	2bf6 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2b68:	200f      	movs	r0, #15
    2b6a:	4b25      	ldr	r3, [pc, #148]	; (2c00 <PHY_TaskHandler+0xa4>)
    2b6c:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    2b6e:	0703      	lsls	r3, r0, #28
    2b70:	d541      	bpl.n	2bf6 <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    2b72:	4b22      	ldr	r3, [pc, #136]	; (2bfc <PHY_TaskHandler+0xa0>)
    2b74:	781b      	ldrb	r3, [r3, #0]
    2b76:	2b01      	cmp	r3, #1
    2b78:	d124      	bne.n	2bc4 <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2b7a:	2007      	movs	r0, #7
    2b7c:	4b20      	ldr	r3, [pc, #128]	; (2c00 <PHY_TaskHandler+0xa4>)
    2b7e:	4798      	blx	r3
    2b80:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    2b82:	466c      	mov	r4, sp
    2b84:	3407      	adds	r4, #7
    2b86:	1c20      	adds	r0, r4, #0
    2b88:	2101      	movs	r1, #1
    2b8a:	4e1e      	ldr	r6, [pc, #120]	; (2c04 <PHY_TaskHandler+0xa8>)
    2b8c:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    2b8e:	4d1e      	ldr	r5, [pc, #120]	; (2c08 <PHY_TaskHandler+0xac>)
    2b90:	7821      	ldrb	r1, [r4, #0]
    2b92:	3102      	adds	r1, #2
    2b94:	b2c9      	uxtb	r1, r1
    2b96:	1c28      	adds	r0, r5, #0
    2b98:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    2b9a:	a802      	add	r0, sp, #8
    2b9c:	1c6a      	adds	r2, r5, #1
    2b9e:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    2ba0:	7822      	ldrb	r2, [r4, #0]
    2ba2:	1e91      	subs	r1, r2, #2
    2ba4:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    2ba6:	18ad      	adds	r5, r5, r2
    2ba8:	786a      	ldrb	r2, [r5, #1]
    2baa:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    2bac:	3f5b      	subs	r7, #91	; 0x5b
    2bae:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    2bb0:	4b16      	ldr	r3, [pc, #88]	; (2c0c <PHY_TaskHandler+0xb0>)
    2bb2:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2bb4:	4d12      	ldr	r5, [pc, #72]	; (2c00 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2bb6:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2bb8:	2001      	movs	r0, #1
    2bba:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2bbc:	4020      	ands	r0, r4
    2bbe:	2816      	cmp	r0, #22
    2bc0:	d1fa      	bne.n	2bb8 <PHY_TaskHandler+0x5c>
    2bc2:	e018      	b.n	2bf6 <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    2bc4:	2b03      	cmp	r3, #3
    2bc6:	d116      	bne.n	2bf6 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2bc8:	2002      	movs	r0, #2
    2bca:	4b0d      	ldr	r3, [pc, #52]	; (2c00 <PHY_TaskHandler+0xa4>)
    2bcc:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    2bce:	0944      	lsrs	r4, r0, #5
    2bd0:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    2bd2:	2c00      	cmp	r4, #0
    2bd4:	d007      	beq.n	2be6 <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    2bd6:	2c03      	cmp	r4, #3
    2bd8:	d004      	beq.n	2be4 <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    2bda:	3c05      	subs	r4, #5
    2bdc:	1e63      	subs	r3, r4, #1
    2bde:	419c      	sbcs	r4, r3
    2be0:	3402      	adds	r4, #2
    2be2:	e000      	b.n	2be6 <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2be4:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    2be6:	4b0a      	ldr	r3, [pc, #40]	; (2c10 <PHY_TaskHandler+0xb4>)
    2be8:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    2bea:	2201      	movs	r2, #1
    2bec:	4b03      	ldr	r3, [pc, #12]	; (2bfc <PHY_TaskHandler+0xa0>)
    2bee:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    2bf0:	1c20      	adds	r0, r4, #0
    2bf2:	4b08      	ldr	r3, [pc, #32]	; (2c14 <PHY_TaskHandler+0xb8>)
    2bf4:	4798      	blx	r3
		}
	}
}
    2bf6:	b005      	add	sp, #20
    2bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bfa:	46c0      	nop			; (mov r8, r8)
    2bfc:	2000069c 	.word	0x2000069c
    2c00:	0000329d 	.word	0x0000329d
    2c04:	00003491 	.word	0x00003491
    2c08:	2000061c 	.word	0x2000061c
    2c0c:	00001f19 	.word	0x00001f19
    2c10:	000029bd 	.word	0x000029bd
    2c14:	00002831 	.word	0x00002831

00002c18 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2c18:	b508      	push	{r3, lr}
	SYS_TimerInit();
    2c1a:	4b04      	ldr	r3, [pc, #16]	; (2c2c <SYS_Init+0x14>)
    2c1c:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2c1e:	4b04      	ldr	r3, [pc, #16]	; (2c30 <SYS_Init+0x18>)
    2c20:	4798      	blx	r3
#endif
	PHY_Init();
    2c22:	4b04      	ldr	r3, [pc, #16]	; (2c34 <SYS_Init+0x1c>)
    2c24:	4798      	blx	r3
	NWK_Init();
    2c26:	4b04      	ldr	r3, [pc, #16]	; (2c38 <SYS_Init+0x20>)
    2c28:	4798      	blx	r3
}
    2c2a:	bd08      	pop	{r3, pc}
    2c2c:	00002ce9 	.word	0x00002ce9
    2c30:	00002f71 	.word	0x00002f71
    2c34:	000029e9 	.word	0x000029e9
    2c38:	000017c5 	.word	0x000017c5

00002c3c <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    2c3c:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    2c3e:	4b03      	ldr	r3, [pc, #12]	; (2c4c <SYS_TaskHandler+0x10>)
    2c40:	4798      	blx	r3
	NWK_TaskHandler();
    2c42:	4b03      	ldr	r3, [pc, #12]	; (2c50 <SYS_TaskHandler+0x14>)
    2c44:	4798      	blx	r3
	SYS_TimerTaskHandler();
    2c46:	4b03      	ldr	r3, [pc, #12]	; (2c54 <SYS_TaskHandler+0x18>)
    2c48:	4798      	blx	r3
}
    2c4a:	bd08      	pop	{r3, pc}
    2c4c:	00002b5d 	.word	0x00002b5d
    2c50:	00001851 	.word	0x00001851
    2c54:	00002d6d 	.word	0x00002d6d

00002c58 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    2c58:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    2c5a:	4b02      	ldr	r3, [pc, #8]	; (2c64 <SYS_EncryptReq+0xc>)
    2c5c:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    2c5e:	4b02      	ldr	r3, [pc, #8]	; (2c68 <SYS_EncryptReq+0x10>)
    2c60:	4798      	blx	r3
}
    2c62:	bd08      	pop	{r3, pc}
    2c64:	00002b31 	.word	0x00002b31
    2c68:	00002381 	.word	0x00002381

00002c6c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2c6c:	b530      	push	{r4, r5, lr}
	if (timers) {
    2c6e:	4b15      	ldr	r3, [pc, #84]	; (2cc4 <placeTimer+0x58>)
    2c70:	681d      	ldr	r5, [r3, #0]
    2c72:	2d00      	cmp	r5, #0
    2c74:	d01e      	beq.n	2cb4 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2c76:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2c78:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c7a:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    2c7c:	428a      	cmp	r2, r1
    2c7e:	d20a      	bcs.n	2c96 <placeTimer+0x2a>
    2c80:	e004      	b.n	2c8c <placeTimer+0x20>
    2c82:	6859      	ldr	r1, [r3, #4]
    2c84:	4291      	cmp	r1, r2
    2c86:	d803      	bhi.n	2c90 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c88:	1c1c      	adds	r4, r3, #0
    2c8a:	e004      	b.n	2c96 <placeTimer+0x2a>
    2c8c:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    2c8e:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    2c90:	1a89      	subs	r1, r1, r2
    2c92:	6059      	str	r1, [r3, #4]
				break;
    2c94:	e003      	b.n	2c9e <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    2c96:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2c98:	6823      	ldr	r3, [r4, #0]
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	d1f1      	bne.n	2c82 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    2c9e:	6042      	str	r2, [r0, #4]

		if (prev) {
    2ca0:	2c00      	cmp	r4, #0
    2ca2:	d003      	beq.n	2cac <placeTimer+0x40>
			timer->next = prev->next;
    2ca4:	6823      	ldr	r3, [r4, #0]
    2ca6:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2ca8:	6020      	str	r0, [r4, #0]
    2caa:	e009      	b.n	2cc0 <placeTimer+0x54>
		} else {
			timer->next = timers;
    2cac:	6005      	str	r5, [r0, #0]
			timers = timer;
    2cae:	4b05      	ldr	r3, [pc, #20]	; (2cc4 <placeTimer+0x58>)
    2cb0:	6018      	str	r0, [r3, #0]
    2cb2:	e005      	b.n	2cc0 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    2cb4:	2300      	movs	r3, #0
    2cb6:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2cb8:	6883      	ldr	r3, [r0, #8]
    2cba:	6043      	str	r3, [r0, #4]
		timers = timer;
    2cbc:	4b01      	ldr	r3, [pc, #4]	; (2cc4 <placeTimer+0x58>)
    2cbe:	6018      	str	r0, [r3, #0]
	}
}
    2cc0:	bd30      	pop	{r4, r5, pc}
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	200006a0 	.word	0x200006a0

00002cc8 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2cc8:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    2cca:	4b04      	ldr	r3, [pc, #16]	; (2cdc <SYS_HwExpiry_Cb+0x14>)
    2ccc:	781a      	ldrb	r2, [r3, #0]
    2cce:	3201      	adds	r2, #1
    2cd0:	b2d2      	uxtb	r2, r2
    2cd2:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2cd4:	4802      	ldr	r0, [pc, #8]	; (2ce0 <SYS_HwExpiry_Cb+0x18>)
    2cd6:	4b03      	ldr	r3, [pc, #12]	; (2ce4 <SYS_HwExpiry_Cb+0x1c>)
    2cd8:	4798      	blx	r3
}
    2cda:	bd08      	pop	{r3, pc}
    2cdc:	20000838 	.word	0x20000838
    2ce0:	00002710 	.word	0x00002710
    2ce4:	00004619 	.word	0x00004619

00002ce8 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    2ce8:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2cea:	2400      	movs	r4, #0
    2cec:	4b06      	ldr	r3, [pc, #24]	; (2d08 <SYS_TimerInit+0x20>)
    2cee:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2cf0:	4806      	ldr	r0, [pc, #24]	; (2d0c <SYS_TimerInit+0x24>)
    2cf2:	4b07      	ldr	r3, [pc, #28]	; (2d10 <SYS_TimerInit+0x28>)
    2cf4:	4798      	blx	r3
	common_tc_init();
    2cf6:	4b07      	ldr	r3, [pc, #28]	; (2d14 <SYS_TimerInit+0x2c>)
    2cf8:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2cfa:	4807      	ldr	r0, [pc, #28]	; (2d18 <SYS_TimerInit+0x30>)
    2cfc:	4b07      	ldr	r3, [pc, #28]	; (2d1c <SYS_TimerInit+0x34>)
    2cfe:	4798      	blx	r3
	timers = NULL;
    2d00:	4b07      	ldr	r3, [pc, #28]	; (2d20 <SYS_TimerInit+0x38>)
    2d02:	601c      	str	r4, [r3, #0]
}
    2d04:	bd10      	pop	{r4, pc}
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	20000838 	.word	0x20000838
    2d0c:	00002cc9 	.word	0x00002cc9
    2d10:	00004709 	.word	0x00004709
    2d14:	00004685 	.word	0x00004685
    2d18:	00002710 	.word	0x00002710
    2d1c:	00004619 	.word	0x00004619
    2d20:	200006a0 	.word	0x200006a0

00002d24 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d24:	4b09      	ldr	r3, [pc, #36]	; (2d4c <SYS_TimerStarted+0x28>)
    2d26:	681b      	ldr	r3, [r3, #0]
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d009      	beq.n	2d40 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    2d2c:	4283      	cmp	r3, r0
    2d2e:	d102      	bne.n	2d36 <SYS_TimerStarted+0x12>
    2d30:	e008      	b.n	2d44 <SYS_TimerStarted+0x20>
    2d32:	4298      	cmp	r0, r3
    2d34:	d008      	beq.n	2d48 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d1fa      	bne.n	2d32 <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    2d3c:	2000      	movs	r0, #0
    2d3e:	e004      	b.n	2d4a <SYS_TimerStarted+0x26>
    2d40:	2000      	movs	r0, #0
    2d42:	e002      	b.n	2d4a <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    2d44:	2001      	movs	r0, #1
    2d46:	e000      	b.n	2d4a <SYS_TimerStarted+0x26>
    2d48:	2001      	movs	r0, #1
		}
	}
	return false;
}
    2d4a:	4770      	bx	lr
    2d4c:	200006a0 	.word	0x200006a0

00002d50 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2d50:	b510      	push	{r4, lr}
    2d52:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    2d54:	4b03      	ldr	r3, [pc, #12]	; (2d64 <SYS_TimerStart+0x14>)
    2d56:	4798      	blx	r3
    2d58:	2800      	cmp	r0, #0
    2d5a:	d102      	bne.n	2d62 <SYS_TimerStart+0x12>
		placeTimer(timer);
    2d5c:	1c20      	adds	r0, r4, #0
    2d5e:	4b02      	ldr	r3, [pc, #8]	; (2d68 <SYS_TimerStart+0x18>)
    2d60:	4798      	blx	r3
	}
}
    2d62:	bd10      	pop	{r4, pc}
    2d64:	00002d25 	.word	0x00002d25
    2d68:	00002c6d 	.word	0x00002c6d

00002d6c <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    2d6e:	4b1a      	ldr	r3, [pc, #104]	; (2dd8 <SYS_TimerTaskHandler+0x6c>)
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d02f      	beq.n	2dd6 <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d76:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2d7a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2d7c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2d80:	2100      	movs	r1, #0
    2d82:	4b16      	ldr	r3, [pc, #88]	; (2ddc <SYS_TimerTaskHandler+0x70>)
    2d84:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    2d86:	4a14      	ldr	r2, [pc, #80]	; (2dd8 <SYS_TimerTaskHandler+0x6c>)
    2d88:	7813      	ldrb	r3, [r2, #0]
    2d8a:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    2d8c:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2d8e:	2800      	cmp	r0, #0
    2d90:	d105      	bne.n	2d9e <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    2d92:	2101      	movs	r1, #1
    2d94:	4a11      	ldr	r2, [pc, #68]	; (2ddc <SYS_TimerTaskHandler+0x70>)
    2d96:	7011      	strb	r1, [r2, #0]
    2d98:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2d9c:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    2d9e:	009d      	lsls	r5, r3, #2
    2da0:	18ed      	adds	r5, r5, r3
    2da2:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    2da4:	4e0e      	ldr	r6, [pc, #56]	; (2de0 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    2da6:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    2da8:	e00d      	b.n	2dc6 <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    2daa:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    2dac:	6823      	ldr	r3, [r4, #0]
    2dae:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    2db0:	7b23      	ldrb	r3, [r4, #12]
    2db2:	2b01      	cmp	r3, #1
    2db4:	d102      	bne.n	2dbc <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    2db6:	1c20      	adds	r0, r4, #0
    2db8:	4b0a      	ldr	r3, [pc, #40]	; (2de4 <SYS_TimerTaskHandler+0x78>)
    2dba:	4798      	blx	r3
		}
		if(timer->handler)
    2dbc:	6923      	ldr	r3, [r4, #16]
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d001      	beq.n	2dc6 <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    2dc2:	1c20      	adds	r0, r4, #0
    2dc4:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    2dc6:	6834      	ldr	r4, [r6, #0]
    2dc8:	2c00      	cmp	r4, #0
    2dca:	d004      	beq.n	2dd6 <SYS_TimerTaskHandler+0x6a>
    2dcc:	6863      	ldr	r3, [r4, #4]
    2dce:	429d      	cmp	r5, r3
    2dd0:	d2eb      	bcs.n	2daa <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    2dd2:	1b5d      	subs	r5, r3, r5
    2dd4:	6065      	str	r5, [r4, #4]
	}
}
    2dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dd8:	20000838 	.word	0x20000838
    2ddc:	20000009 	.word	0x20000009
    2de0:	200006a0 	.word	0x200006a0
    2de4:	00002c6d 	.word	0x00002c6d

00002de8 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2de8:	b508      	push	{r3, lr}
	tmr_cca_callback();
    2dea:	4b01      	ldr	r3, [pc, #4]	; (2df0 <tc_cca_callback+0x8>)
    2dec:	4798      	blx	r3
}
    2dee:	bd08      	pop	{r3, pc}
    2df0:	000046ed 	.word	0x000046ed

00002df4 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    2df4:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    2df6:	4b01      	ldr	r3, [pc, #4]	; (2dfc <tc_ovf_callback+0x8>)
    2df8:	4798      	blx	r3
}
    2dfa:	bd08      	pop	{r3, pc}
    2dfc:	000046a5 	.word	0x000046a5

00002e00 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    2e00:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2e02:	4802      	ldr	r0, [pc, #8]	; (2e0c <tmr_read_count+0xc>)
    2e04:	4b02      	ldr	r3, [pc, #8]	; (2e10 <tmr_read_count+0x10>)
    2e06:	4798      	blx	r3
    2e08:	b280      	uxth	r0, r0
}
    2e0a:	bd08      	pop	{r3, pc}
    2e0c:	20000870 	.word	0x20000870
    2e10:	00000f25 	.word	0x00000f25

00002e14 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2e14:	4b03      	ldr	r3, [pc, #12]	; (2e24 <tmr_disable_cc_interrupt+0x10>)
    2e16:	2210      	movs	r2, #16
    2e18:	6819      	ldr	r1, [r3, #0]
    2e1a:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2e1c:	7e59      	ldrb	r1, [r3, #25]
    2e1e:	4391      	bics	r1, r2
    2e20:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2e22:	4770      	bx	lr
    2e24:	20000870 	.word	0x20000870

00002e28 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    2e28:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e2a:	4c0a      	ldr	r4, [pc, #40]	; (2e54 <tmr_enable_cc_interrupt+0x2c>)
    2e2c:	6820      	ldr	r0, [r4, #0]
    2e2e:	4b0a      	ldr	r3, [pc, #40]	; (2e58 <tmr_enable_cc_interrupt+0x30>)
    2e30:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2e32:	4b0a      	ldr	r3, [pc, #40]	; (2e5c <tmr_enable_cc_interrupt+0x34>)
    2e34:	5c1b      	ldrb	r3, [r3, r0]
    2e36:	221f      	movs	r2, #31
    2e38:	401a      	ands	r2, r3
    2e3a:	2301      	movs	r3, #1
    2e3c:	4093      	lsls	r3, r2
    2e3e:	1c1a      	adds	r2, r3, #0
    2e40:	4b07      	ldr	r3, [pc, #28]	; (2e60 <tmr_enable_cc_interrupt+0x38>)
    2e42:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2e44:	7e62      	ldrb	r2, [r4, #25]
    2e46:	2310      	movs	r3, #16
    2e48:	4313      	orrs	r3, r2
    2e4a:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2e4c:	6823      	ldr	r3, [r4, #0]
    2e4e:	2210      	movs	r2, #16
    2e50:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2e52:	bd10      	pop	{r4, pc}
    2e54:	20000870 	.word	0x20000870
    2e58:	00000c79 	.word	0x00000c79
    2e5c:	00005868 	.word	0x00005868
    2e60:	e000e100 	.word	0xe000e100

00002e64 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    2e64:	b508      	push	{r3, lr}
    2e66:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2e68:	4802      	ldr	r0, [pc, #8]	; (2e74 <tmr_write_cmpreg+0x10>)
    2e6a:	2100      	movs	r1, #0
    2e6c:	4b02      	ldr	r3, [pc, #8]	; (2e78 <tmr_write_cmpreg+0x14>)
    2e6e:	4798      	blx	r3
			(uint32_t)compare_value);
}
    2e70:	bd08      	pop	{r3, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	20000870 	.word	0x20000870
    2e78:	00000f55 	.word	0x00000f55

00002e7c <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e7e:	464f      	mov	r7, r9
    2e80:	4646      	mov	r6, r8
    2e82:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2e84:	4a2d      	ldr	r2, [pc, #180]	; (2f3c <tmr_init+0xc0>)
    2e86:	2300      	movs	r3, #0
    2e88:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2e8a:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2e8c:	2100      	movs	r1, #0
    2e8e:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2e90:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2e92:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2e94:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2e96:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2e98:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2e9a:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2e9c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2e9e:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2ea0:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2ea2:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2ea4:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2ea6:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2ea8:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2eaa:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2eac:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2eae:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2eb0:	2301      	movs	r3, #1
    2eb2:	425b      	negs	r3, r3
    2eb4:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2eb6:	4c22      	ldr	r4, [pc, #136]	; (2f40 <tmr_init+0xc4>)
    2eb8:	1c20      	adds	r0, r4, #0
    2eba:	4922      	ldr	r1, [pc, #136]	; (2f44 <tmr_init+0xc8>)
    2ebc:	4b22      	ldr	r3, [pc, #136]	; (2f48 <tmr_init+0xcc>)
    2ebe:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2ec0:	1c20      	adds	r0, r4, #0
    2ec2:	4922      	ldr	r1, [pc, #136]	; (2f4c <tmr_init+0xd0>)
    2ec4:	2200      	movs	r2, #0
    2ec6:	4d22      	ldr	r5, [pc, #136]	; (2f50 <tmr_init+0xd4>)
    2ec8:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2eca:	1c20      	adds	r0, r4, #0
    2ecc:	4921      	ldr	r1, [pc, #132]	; (2f54 <tmr_init+0xd8>)
    2ece:	2202      	movs	r2, #2
    2ed0:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2ed2:	6820      	ldr	r0, [r4, #0]
    2ed4:	4a20      	ldr	r2, [pc, #128]	; (2f58 <tmr_init+0xdc>)
    2ed6:	4691      	mov	r9, r2
    2ed8:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2eda:	4b20      	ldr	r3, [pc, #128]	; (2f5c <tmr_init+0xe0>)
    2edc:	4698      	mov	r8, r3
    2ede:	5c1b      	ldrb	r3, [r3, r0]
    2ee0:	271f      	movs	r7, #31
    2ee2:	403b      	ands	r3, r7
    2ee4:	2501      	movs	r5, #1
    2ee6:	1c2a      	adds	r2, r5, #0
    2ee8:	409a      	lsls	r2, r3
    2eea:	4e1d      	ldr	r6, [pc, #116]	; (2f60 <tmr_init+0xe4>)
    2eec:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    2eee:	7e62      	ldrb	r2, [r4, #25]
    2ef0:	2301      	movs	r3, #1
    2ef2:	4313      	orrs	r3, r2
    2ef4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2ef6:	6820      	ldr	r0, [r4, #0]
    2ef8:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2efa:	47c8      	blx	r9
    2efc:	4642      	mov	r2, r8
    2efe:	5c13      	ldrb	r3, [r2, r0]
    2f00:	401f      	ands	r7, r3
    2f02:	40bd      	lsls	r5, r7
    2f04:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f06:	7e62      	ldrb	r2, [r4, #25]
    2f08:	2310      	movs	r3, #16
    2f0a:	4313      	orrs	r3, r2
    2f0c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f0e:	6822      	ldr	r2, [r4, #0]
    2f10:	2310      	movs	r3, #16
    2f12:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f14:	217f      	movs	r1, #127	; 0x7f
    2f16:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2f18:	438b      	bics	r3, r1
    2f1a:	d1fc      	bne.n	2f16 <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2f1c:	8811      	ldrh	r1, [r2, #0]
    2f1e:	2302      	movs	r3, #2
    2f20:	430b      	orrs	r3, r1
    2f22:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2f24:	2000      	movs	r0, #0
    2f26:	4b0f      	ldr	r3, [pc, #60]	; (2f64 <tmr_init+0xe8>)
    2f28:	4798      	blx	r3
    2f2a:	490f      	ldr	r1, [pc, #60]	; (2f68 <tmr_init+0xec>)
    2f2c:	4b0f      	ldr	r3, [pc, #60]	; (2f6c <tmr_init+0xf0>)
    2f2e:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2f30:	b2c0      	uxtb	r0, r0
}
    2f32:	bc0c      	pop	{r2, r3}
    2f34:	4690      	mov	r8, r2
    2f36:	4699      	mov	r9, r3
    2f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	2000083c 	.word	0x2000083c
    2f40:	20000870 	.word	0x20000870
    2f44:	42002c00 	.word	0x42002c00
    2f48:	00000cb1 	.word	0x00000cb1
    2f4c:	00002df5 	.word	0x00002df5
    2f50:	00000bb9 	.word	0x00000bb9
    2f54:	00002de9 	.word	0x00002de9
    2f58:	00000c79 	.word	0x00000c79
    2f5c:	00005868 	.word	0x00005868
    2f60:	e000e100 	.word	0xe000e100
    2f64:	00004031 	.word	0x00004031
    2f68:	000f4240 	.word	0x000f4240
    2f6c:	00004715 	.word	0x00004715

00002f70 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2f70:	4770      	bx	lr
    2f72:	46c0      	nop			; (mov r8, r8)

00002f74 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    2f74:	b538      	push	{r3, r4, r5, lr}
    2f76:	1c03      	adds	r3, r0, #0
    2f78:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    2f7a:	4c14      	ldr	r4, [pc, #80]	; (2fcc <sal_aes_wrrd+0x58>)
    2f7c:	1c60      	adds	r0, r4, #1
    2f7e:	1c19      	adds	r1, r3, #0
    2f80:	2210      	movs	r2, #16
    2f82:	4b13      	ldr	r3, [pc, #76]	; (2fd0 <sal_aes_wrrd+0x5c>)
    2f84:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    2f86:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    2f88:	4b12      	ldr	r3, [pc, #72]	; (2fd4 <sal_aes_wrrd+0x60>)
    2f8a:	781b      	ldrb	r3, [r3, #0]
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d008      	beq.n	2fa2 <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    2f90:	2083      	movs	r0, #131	; 0x83
    2f92:	490e      	ldr	r1, [pc, #56]	; (2fcc <sal_aes_wrrd+0x58>)
    2f94:	2212      	movs	r2, #18
    2f96:	4b10      	ldr	r3, [pc, #64]	; (2fd8 <sal_aes_wrrd+0x64>)
    2f98:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    2f9a:	2200      	movs	r2, #0
    2f9c:	4b0d      	ldr	r3, [pc, #52]	; (2fd4 <sal_aes_wrrd+0x60>)
    2f9e:	701a      	strb	r2, [r3, #0]
    2fa0:	e005      	b.n	2fae <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    2fa2:	2084      	movs	r0, #132	; 0x84
    2fa4:	4909      	ldr	r1, [pc, #36]	; (2fcc <sal_aes_wrrd+0x58>)
    2fa6:	3101      	adds	r1, #1
    2fa8:	2211      	movs	r2, #17
    2faa:	4b0b      	ldr	r3, [pc, #44]	; (2fd8 <sal_aes_wrrd+0x64>)
    2fac:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    2fae:	2d00      	cmp	r5, #0
    2fb0:	d005      	beq.n	2fbe <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    2fb2:	1c28      	adds	r0, r5, #0
    2fb4:	4905      	ldr	r1, [pc, #20]	; (2fcc <sal_aes_wrrd+0x58>)
    2fb6:	3101      	adds	r1, #1
    2fb8:	2210      	movs	r2, #16
    2fba:	4b05      	ldr	r3, [pc, #20]	; (2fd0 <sal_aes_wrrd+0x5c>)
    2fbc:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    2fbe:	4b03      	ldr	r3, [pc, #12]	; (2fcc <sal_aes_wrrd+0x58>)
    2fc0:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    2fc2:	2018      	movs	r0, #24
    2fc4:	4b05      	ldr	r3, [pc, #20]	; (2fdc <sal_aes_wrrd+0x68>)
    2fc6:	4798      	blx	r3
}
    2fc8:	bd38      	pop	{r3, r4, r5, pc}
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	200006c8 	.word	0x200006c8
    2fd0:	00004845 	.word	0x00004845
    2fd4:	200006dc 	.word	0x200006dc
    2fd8:	00003a09 	.word	0x00003a09
    2fdc:	0000176d 	.word	0x0000176d

00002fe0 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    2fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fe2:	4647      	mov	r7, r8
    2fe4:	b480      	push	{r7}
    2fe6:	b084      	sub	sp, #16
    2fe8:	1c05      	adds	r5, r0, #0
    2fea:	1c0f      	adds	r7, r1, #0
    2fec:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
    2fee:	2800      	cmp	r0, #0
    2ff0:	d017      	beq.n	3022 <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    2ff2:	2200      	movs	r2, #0
    2ff4:	4b3e      	ldr	r3, [pc, #248]	; (30f0 <sal_aes_setup+0x110>)
    2ff6:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    2ff8:	2202      	movs	r2, #2
    2ffa:	4b3e      	ldr	r3, [pc, #248]	; (30f4 <sal_aes_setup+0x114>)
    2ffc:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    2ffe:	483e      	ldr	r0, [pc, #248]	; (30f8 <sal_aes_setup+0x118>)
    3000:	1c29      	adds	r1, r5, #0
    3002:	2210      	movs	r2, #16
    3004:	4b3d      	ldr	r3, [pc, #244]	; (30fc <sal_aes_setup+0x11c>)
    3006:	4698      	mov	r8, r3
    3008:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    300a:	4e3d      	ldr	r6, [pc, #244]	; (3100 <sal_aes_setup+0x120>)
    300c:	2310      	movs	r3, #16
    300e:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3010:	1c70      	adds	r0, r6, #1
    3012:	1c29      	adds	r1, r5, #0
    3014:	2210      	movs	r2, #16
    3016:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3018:	2083      	movs	r0, #131	; 0x83
    301a:	1c31      	adds	r1, r6, #0
    301c:	2211      	movs	r2, #17
    301e:	4b39      	ldr	r3, [pc, #228]	; (3104 <sal_aes_setup+0x124>)
    3020:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    3022:	2c00      	cmp	r4, #0
    3024:	d002      	beq.n	302c <sal_aes_setup+0x4c>
    3026:	2c01      	cmp	r4, #1
    3028:	d012      	beq.n	3050 <sal_aes_setup+0x70>
    302a:	e05a      	b.n	30e2 <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    302c:	4b31      	ldr	r3, [pc, #196]	; (30f4 <sal_aes_setup+0x114>)
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	2b01      	cmp	r3, #1
    3032:	d13d      	bne.n	30b0 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3034:	4d32      	ldr	r5, [pc, #200]	; (3100 <sal_aes_setup+0x120>)
    3036:	2310      	movs	r3, #16
    3038:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    303a:	1c68      	adds	r0, r5, #1
    303c:	492e      	ldr	r1, [pc, #184]	; (30f8 <sal_aes_setup+0x118>)
    303e:	2210      	movs	r2, #16
    3040:	4b2e      	ldr	r3, [pc, #184]	; (30fc <sal_aes_setup+0x11c>)
    3042:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3044:	2083      	movs	r0, #131	; 0x83
    3046:	1c29      	adds	r1, r5, #0
    3048:	2211      	movs	r2, #17
    304a:	4b2e      	ldr	r3, [pc, #184]	; (3104 <sal_aes_setup+0x124>)
    304c:	4798      	blx	r3
    304e:	e02f      	b.n	30b0 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    3050:	4b28      	ldr	r3, [pc, #160]	; (30f4 <sal_aes_setup+0x114>)
    3052:	781b      	ldrb	r3, [r3, #0]
    3054:	2b01      	cmp	r3, #1
    3056:	d02b      	beq.n	30b0 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3058:	2210      	movs	r2, #16
    305a:	4b29      	ldr	r3, [pc, #164]	; (3100 <sal_aes_setup+0x120>)
    305c:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    305e:	4b24      	ldr	r3, [pc, #144]	; (30f0 <sal_aes_setup+0x110>)
    3060:	781b      	ldrb	r3, [r3, #0]
    3062:	2b00      	cmp	r3, #0
    3064:	d116      	bne.n	3094 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3066:	4d26      	ldr	r5, [pc, #152]	; (3100 <sal_aes_setup+0x120>)
    3068:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    306a:	2380      	movs	r3, #128	; 0x80
    306c:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    306e:	2201      	movs	r2, #1
    3070:	4b25      	ldr	r3, [pc, #148]	; (3108 <sal_aes_setup+0x128>)
    3072:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    3074:	4668      	mov	r0, sp
    3076:	2100      	movs	r1, #0
    3078:	4b24      	ldr	r3, [pc, #144]	; (310c <sal_aes_setup+0x12c>)
    307a:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    307c:	2310      	movs	r3, #16
    307e:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3080:	2083      	movs	r0, #131	; 0x83
    3082:	1c29      	adds	r1, r5, #0
    3084:	2201      	movs	r2, #1
    3086:	4b1f      	ldr	r3, [pc, #124]	; (3104 <sal_aes_setup+0x124>)
    3088:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    308a:	2084      	movs	r0, #132	; 0x84
    308c:	4920      	ldr	r1, [pc, #128]	; (3110 <sal_aes_setup+0x130>)
    308e:	2210      	movs	r2, #16
    3090:	4b20      	ldr	r3, [pc, #128]	; (3114 <sal_aes_setup+0x134>)
    3092:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3094:	4d1a      	ldr	r5, [pc, #104]	; (3100 <sal_aes_setup+0x120>)
    3096:	1c68      	adds	r0, r5, #1
    3098:	491d      	ldr	r1, [pc, #116]	; (3110 <sal_aes_setup+0x130>)
    309a:	2210      	movs	r2, #16
    309c:	4b17      	ldr	r3, [pc, #92]	; (30fc <sal_aes_setup+0x11c>)
    309e:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    30a0:	2083      	movs	r0, #131	; 0x83
    30a2:	1c29      	adds	r1, r5, #0
    30a4:	2211      	movs	r2, #17
    30a6:	4b17      	ldr	r3, [pc, #92]	; (3104 <sal_aes_setup+0x124>)
    30a8:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    30aa:	4b11      	ldr	r3, [pc, #68]	; (30f0 <sal_aes_setup+0x110>)
    30ac:	2201      	movs	r2, #1
    30ae:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    30b0:	4b10      	ldr	r3, [pc, #64]	; (30f4 <sal_aes_setup+0x114>)
    30b2:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    30b4:	2f00      	cmp	r7, #0
    30b6:	d002      	beq.n	30be <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    30b8:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    30ba:	2f02      	cmp	r7, #2
    30bc:	d113      	bne.n	30e6 <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
    30be:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    30c0:	2308      	movs	r3, #8
    30c2:	401c      	ands	r4, r3
    30c4:	013f      	lsls	r7, r7, #4
    30c6:	2370      	movs	r3, #112	; 0x70
    30c8:	401f      	ands	r7, r3
    30ca:	433c      	orrs	r4, r7
    30cc:	4b0c      	ldr	r3, [pc, #48]	; (3100 <sal_aes_setup+0x120>)
    30ce:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    30d0:	2780      	movs	r7, #128	; 0x80
    30d2:	427f      	negs	r7, r7
    30d4:	433c      	orrs	r4, r7
    30d6:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    30d8:	2201      	movs	r2, #1
    30da:	4b0b      	ldr	r3, [pc, #44]	; (3108 <sal_aes_setup+0x128>)
    30dc:	701a      	strb	r2, [r3, #0]

	return (true);
    30de:	2001      	movs	r0, #1
    30e0:	e001      	b.n	30e6 <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    30e2:	2000      	movs	r0, #0
    30e4:	e7ff      	b.n	30e6 <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    30e6:	b004      	add	sp, #16
    30e8:	bc04      	pop	{r2}
    30ea:	4690      	mov	r8, r2
    30ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	200006a4 	.word	0x200006a4
    30f4:	20000008 	.word	0x20000008
    30f8:	200006b8 	.word	0x200006b8
    30fc:	00004845 	.word	0x00004845
    3100:	200006c8 	.word	0x200006c8
    3104:	000036f5 	.word	0x000036f5
    3108:	200006dc 	.word	0x200006dc
    310c:	00002f75 	.word	0x00002f75
    3110:	200006a8 	.word	0x200006a8
    3114:	0000386d 	.word	0x0000386d

00003118 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3118:	b508      	push	{r3, lr}
    311a:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    311c:	2084      	movs	r0, #132	; 0x84
    311e:	2210      	movs	r2, #16
    3120:	4b01      	ldr	r3, [pc, #4]	; (3128 <sal_aes_read+0x10>)
    3122:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3124:	bd08      	pop	{r3, pc}
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	0000386d 	.word	0x0000386d

0000312c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    312c:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    312e:	2201      	movs	r2, #1
    3130:	4b03      	ldr	r3, [pc, #12]	; (3140 <AT86RFX_ISR+0x14>)
    3132:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3134:	4b03      	ldr	r3, [pc, #12]	; (3144 <AT86RFX_ISR+0x18>)
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	2b00      	cmp	r3, #0
    313a:	d000      	beq.n	313e <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    313c:	4798      	blx	r3
	}
}
    313e:	bd08      	pop	{r3, pc}
    3140:	40001800 	.word	0x40001800
    3144:	200006e0 	.word	0x200006e0

00003148 <trx_spi_init>:

void trx_spi_init(void)
{
    3148:	b5f0      	push	{r4, r5, r6, r7, lr}
    314a:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    314c:	4a35      	ldr	r2, [pc, #212]	; (3224 <trx_spi_init+0xdc>)
    314e:	2300      	movs	r3, #0
    3150:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3152:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3154:	213f      	movs	r1, #63	; 0x3f
    3156:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3158:	4c33      	ldr	r4, [pc, #204]	; (3228 <trx_spi_init+0xe0>)
    315a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    315c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    315e:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3160:	2201      	movs	r2, #1
    3162:	4669      	mov	r1, sp
    3164:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3166:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3168:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    316a:	203f      	movs	r0, #63	; 0x3f
    316c:	4b2f      	ldr	r3, [pc, #188]	; (322c <trx_spi_init+0xe4>)
    316e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3170:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3172:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3174:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3176:	2900      	cmp	r1, #0
    3178:	d103      	bne.n	3182 <trx_spi_init+0x3a>
		return &(ports[port_index]->Group[group_index]);
    317a:	095a      	lsrs	r2, r3, #5
    317c:	01d2      	lsls	r2, r2, #7
    317e:	492c      	ldr	r1, [pc, #176]	; (3230 <trx_spi_init+0xe8>)
    3180:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3182:	271f      	movs	r7, #31
    3184:	403b      	ands	r3, r7
    3186:	2401      	movs	r4, #1
    3188:	1c21      	adds	r1, r4, #0
    318a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    318c:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    318e:	4a29      	ldr	r2, [pc, #164]	; (3234 <trx_spi_init+0xec>)
    3190:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3192:	2300      	movs	r3, #0
    3194:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3196:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3198:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    319a:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    319c:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    319e:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    31a0:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    31a2:	2124      	movs	r1, #36	; 0x24
    31a4:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    31a6:	61d3      	str	r3, [r2, #28]
    31a8:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    31aa:	2380      	movs	r3, #128	; 0x80
    31ac:	025b      	lsls	r3, r3, #9
    31ae:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    31b0:	4b21      	ldr	r3, [pc, #132]	; (3238 <trx_spi_init+0xf0>)
    31b2:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    31b4:	4b21      	ldr	r3, [pc, #132]	; (323c <trx_spi_init+0xf4>)
    31b6:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    31b8:	2301      	movs	r3, #1
    31ba:	425b      	negs	r3, r3
    31bc:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    31be:	4b20      	ldr	r3, [pc, #128]	; (3240 <trx_spi_init+0xf8>)
    31c0:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    31c2:	4b20      	ldr	r3, [pc, #128]	; (3244 <trx_spi_init+0xfc>)
    31c4:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    31c6:	4e20      	ldr	r6, [pc, #128]	; (3248 <trx_spi_init+0x100>)
    31c8:	1c30      	adds	r0, r6, #0
    31ca:	4920      	ldr	r1, [pc, #128]	; (324c <trx_spi_init+0x104>)
    31cc:	4b20      	ldr	r3, [pc, #128]	; (3250 <trx_spi_init+0x108>)
    31ce:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    31d0:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    31d2:	1c28      	adds	r0, r5, #0
    31d4:	4b1f      	ldr	r3, [pc, #124]	; (3254 <trx_spi_init+0x10c>)
    31d6:	4798      	blx	r3
    31d8:	4007      	ands	r7, r0
    31da:	40bc      	lsls	r4, r7
    31dc:	4b1e      	ldr	r3, [pc, #120]	; (3258 <trx_spi_init+0x110>)
    31de:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    31e0:	6832      	ldr	r2, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    31e2:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    31e4:	2b00      	cmp	r3, #0
    31e6:	d1fc      	bne.n	31e2 <trx_spi_init+0x9a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    31e8:	682b      	ldr	r3, [r5, #0]
    31ea:	2602      	movs	r6, #2
    31ec:	4333      	orrs	r3, r6
    31ee:	602b      	str	r3, [r5, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    31f0:	ac01      	add	r4, sp, #4
    31f2:	1c20      	adds	r0, r4, #0
    31f4:	4b19      	ldr	r3, [pc, #100]	; (325c <trx_spi_init+0x114>)
    31f6:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    31f8:	2320      	movs	r3, #32
    31fa:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    31fc:	2380      	movs	r3, #128	; 0x80
    31fe:	039b      	lsls	r3, r3, #14
    3200:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    3202:	7226      	strb	r6, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    3204:	2301      	movs	r3, #1
    3206:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    3208:	2200      	movs	r2, #0
    320a:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    320c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    320e:	2000      	movs	r0, #0
    3210:	1c21      	adds	r1, r4, #0
    3212:	4b13      	ldr	r3, [pc, #76]	; (3260 <trx_spi_init+0x118>)
    3214:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    3216:	4813      	ldr	r0, [pc, #76]	; (3264 <trx_spi_init+0x11c>)
    3218:	2100      	movs	r1, #0
    321a:	2200      	movs	r2, #0
    321c:	4b12      	ldr	r3, [pc, #72]	; (3268 <trx_spi_init+0x120>)
    321e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3220:	b005      	add	sp, #20
    3222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3224:	20000890 	.word	0x20000890
    3228:	20000894 	.word	0x20000894
    322c:	00003cf1 	.word	0x00003cf1
    3230:	41004400 	.word	0x41004400
    3234:	20000898 	.word	0x20000898
    3238:	003d0900 	.word	0x003d0900
    323c:	00530005 	.word	0x00530005
    3240:	003e0005 	.word	0x003e0005
    3244:	00520005 	.word	0x00520005
    3248:	200008d0 	.word	0x200008d0
    324c:	42001800 	.word	0x42001800
    3250:	000006d5 	.word	0x000006d5
    3254:	000015c9 	.word	0x000015c9
    3258:	e000e100 	.word	0xe000e100
    325c:	00000259 	.word	0x00000259
    3260:	0000026d 	.word	0x0000026d
    3264:	0000312d 	.word	0x0000312d
    3268:	00001655 	.word	0x00001655

0000326c <PhyReset>:

void PhyReset(void)
{
    326c:	b570      	push	{r4, r5, r6, lr}
    326e:	4b09      	ldr	r3, [pc, #36]	; (3294 <PhyReset+0x28>)
    3270:	1c1c      	adds	r4, r3, #0
    3272:	3480      	adds	r4, #128	; 0x80
    3274:	2580      	movs	r5, #128	; 0x80
    3276:	022d      	lsls	r5, r5, #8
    3278:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    327a:	2280      	movs	r2, #128	; 0x80
    327c:	0352      	lsls	r2, r2, #13
    327e:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3280:	20a5      	movs	r0, #165	; 0xa5
    3282:	0040      	lsls	r0, r0, #1
    3284:	4e04      	ldr	r6, [pc, #16]	; (3298 <PhyReset+0x2c>)
    3286:	47b0      	blx	r6
    3288:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    328a:	200a      	movs	r0, #10
    328c:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    328e:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3290:	bd70      	pop	{r4, r5, r6, pc}
    3292:	46c0      	nop			; (mov r8, r8)
    3294:	41004400 	.word	0x41004400
    3298:	0000176d 	.word	0x0000176d

0000329c <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    329c:	b570      	push	{r4, r5, r6, lr}
    329e:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32a0:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    32a4:	4263      	negs	r3, r4
    32a6:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    32a8:	b672      	cpsid	i
    32aa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    32ae:	2200      	movs	r2, #0
    32b0:	4b33      	ldr	r3, [pc, #204]	; (3380 <trx_reg_read+0xe4>)
    32b2:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    32b4:	4d33      	ldr	r5, [pc, #204]	; (3384 <trx_reg_read+0xe8>)
    32b6:	1c28      	adds	r0, r5, #0
    32b8:	4933      	ldr	r1, [pc, #204]	; (3388 <trx_reg_read+0xec>)
    32ba:	2201      	movs	r2, #1
    32bc:	4b33      	ldr	r3, [pc, #204]	; (338c <trx_reg_read+0xf0>)
    32be:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    32c0:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    32c2:	2101      	movs	r1, #1
    32c4:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    32c6:	420a      	tst	r2, r1
    32c8:	d0fc      	beq.n	32c4 <trx_reg_read+0x28>
    32ca:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    32cc:	07d1      	lsls	r1, r2, #31
    32ce:	d502      	bpl.n	32d6 <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    32d0:	2280      	movs	r2, #128	; 0x80
    32d2:	4316      	orrs	r6, r2
    32d4:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    32d6:	2102      	movs	r1, #2
    32d8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    32da:	420a      	tst	r2, r1
    32dc:	d0fc      	beq.n	32d8 <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    32de:	2104      	movs	r1, #4
    32e0:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    32e2:	420a      	tst	r2, r1
    32e4:	d0fc      	beq.n	32e0 <trx_reg_read+0x44>
    32e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    32e8:	0751      	lsls	r1, r2, #29
    32ea:	d514      	bpl.n	3316 <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    32ec:	8b5a      	ldrh	r2, [r3, #26]
    32ee:	0751      	lsls	r1, r2, #29
    32f0:	d503      	bpl.n	32fa <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    32f2:	8b59      	ldrh	r1, [r3, #26]
    32f4:	2204      	movs	r2, #4
    32f6:	430a      	orrs	r2, r1
    32f8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    32fa:	4a22      	ldr	r2, [pc, #136]	; (3384 <trx_reg_read+0xe8>)
    32fc:	7992      	ldrb	r2, [r2, #6]
    32fe:	2a01      	cmp	r2, #1
    3300:	d105      	bne.n	330e <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3302:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3304:	05c9      	lsls	r1, r1, #23
    3306:	0dc9      	lsrs	r1, r1, #23
    3308:	4a21      	ldr	r2, [pc, #132]	; (3390 <trx_reg_read+0xf4>)
    330a:	8011      	strh	r1, [r2, #0]
    330c:	e003      	b.n	3316 <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    330e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3310:	b2c9      	uxtb	r1, r1
    3312:	4a1f      	ldr	r2, [pc, #124]	; (3390 <trx_reg_read+0xf4>)
    3314:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3316:	2101      	movs	r1, #1
    3318:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    331a:	420a      	tst	r2, r1
    331c:	d0fc      	beq.n	3318 <trx_reg_read+0x7c>
    331e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3320:	07d1      	lsls	r1, r2, #31
    3322:	d501      	bpl.n	3328 <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3324:	2200      	movs	r2, #0
    3326:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3328:	2102      	movs	r1, #2
    332a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    332c:	420a      	tst	r2, r1
    332e:	d0fc      	beq.n	332a <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3330:	2104      	movs	r1, #4
    3332:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    3334:	420a      	tst	r2, r1
    3336:	d0fc      	beq.n	3332 <trx_reg_read+0x96>
    3338:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    333a:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    333c:	0751      	lsls	r1, r2, #29
    333e:	d510      	bpl.n	3362 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3340:	8b5a      	ldrh	r2, [r3, #26]
    3342:	0751      	lsls	r1, r2, #29
    3344:	d503      	bpl.n	334e <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3346:	8b59      	ldrh	r1, [r3, #26]
    3348:	2204      	movs	r2, #4
    334a:	430a      	orrs	r2, r1
    334c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    334e:	4a0d      	ldr	r2, [pc, #52]	; (3384 <trx_reg_read+0xe8>)
    3350:	7992      	ldrb	r2, [r2, #6]
    3352:	2a01      	cmp	r2, #1
    3354:	d103      	bne.n	335e <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3356:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3358:	05ed      	lsls	r5, r5, #23
    335a:	0ded      	lsrs	r5, r5, #23
    335c:	e001      	b.n	3362 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    335e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3360:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3362:	4808      	ldr	r0, [pc, #32]	; (3384 <trx_reg_read+0xe8>)
    3364:	4908      	ldr	r1, [pc, #32]	; (3388 <trx_reg_read+0xec>)
    3366:	2200      	movs	r2, #0
    3368:	4b08      	ldr	r3, [pc, #32]	; (338c <trx_reg_read+0xf0>)
    336a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    336c:	2c00      	cmp	r4, #0
    336e:	d005      	beq.n	337c <trx_reg_read+0xe0>
		cpu_irq_enable();
    3370:	2201      	movs	r2, #1
    3372:	4b03      	ldr	r3, [pc, #12]	; (3380 <trx_reg_read+0xe4>)
    3374:	701a      	strb	r2, [r3, #0]
    3376:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    337a:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    337c:	b2e8      	uxtb	r0, r5
}
    337e:	bd70      	pop	{r4, r5, r6, pc}
    3380:	20000009 	.word	0x20000009
    3384:	200008d0 	.word	0x200008d0
    3388:	20000894 	.word	0x20000894
    338c:	000008ed 	.word	0x000008ed
    3390:	2000088c 	.word	0x2000088c

00003394 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3396:	1c07      	adds	r7, r0, #0
    3398:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    339a:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    339e:	4263      	negs	r3, r4
    33a0:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    33a2:	b672      	cpsid	i
    33a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    33a8:	2200      	movs	r2, #0
    33aa:	4b34      	ldr	r3, [pc, #208]	; (347c <trx_reg_write+0xe8>)
    33ac:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    33ae:	4e34      	ldr	r6, [pc, #208]	; (3480 <trx_reg_write+0xec>)
    33b0:	1c30      	adds	r0, r6, #0
    33b2:	4934      	ldr	r1, [pc, #208]	; (3484 <trx_reg_write+0xf0>)
    33b4:	2201      	movs	r2, #1
    33b6:	4b34      	ldr	r3, [pc, #208]	; (3488 <trx_reg_write+0xf4>)
    33b8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    33ba:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    33bc:	2101      	movs	r1, #1
    33be:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    33c0:	420a      	tst	r2, r1
    33c2:	d0fc      	beq.n	33be <trx_reg_write+0x2a>
    33c4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    33c6:	07d1      	lsls	r1, r2, #31
    33c8:	d502      	bpl.n	33d0 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    33ca:	22c0      	movs	r2, #192	; 0xc0
    33cc:	4317      	orrs	r7, r2
    33ce:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    33d0:	2102      	movs	r1, #2
    33d2:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    33d4:	420a      	tst	r2, r1
    33d6:	d0fc      	beq.n	33d2 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    33d8:	2104      	movs	r1, #4
    33da:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    33dc:	420a      	tst	r2, r1
    33de:	d0fc      	beq.n	33da <trx_reg_write+0x46>
    33e0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    33e2:	0751      	lsls	r1, r2, #29
    33e4:	d514      	bpl.n	3410 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    33e6:	8b5a      	ldrh	r2, [r3, #26]
    33e8:	0751      	lsls	r1, r2, #29
    33ea:	d503      	bpl.n	33f4 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    33ec:	8b59      	ldrh	r1, [r3, #26]
    33ee:	2204      	movs	r2, #4
    33f0:	430a      	orrs	r2, r1
    33f2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    33f4:	4a22      	ldr	r2, [pc, #136]	; (3480 <trx_reg_write+0xec>)
    33f6:	7992      	ldrb	r2, [r2, #6]
    33f8:	2a01      	cmp	r2, #1
    33fa:	d105      	bne.n	3408 <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    33fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    33fe:	05c9      	lsls	r1, r1, #23
    3400:	0dc9      	lsrs	r1, r1, #23
    3402:	4a22      	ldr	r2, [pc, #136]	; (348c <trx_reg_write+0xf8>)
    3404:	8011      	strh	r1, [r2, #0]
    3406:	e003      	b.n	3410 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3408:	6a99      	ldr	r1, [r3, #40]	; 0x28
    340a:	b2c9      	uxtb	r1, r1
    340c:	4a1f      	ldr	r2, [pc, #124]	; (348c <trx_reg_write+0xf8>)
    340e:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3410:	2001      	movs	r0, #1
    3412:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3414:	4202      	tst	r2, r0
    3416:	d0fc      	beq.n	3412 <trx_reg_write+0x7e>
    3418:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    341a:	07d1      	lsls	r1, r2, #31
    341c:	d500      	bpl.n	3420 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    341e:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3420:	2102      	movs	r1, #2
    3422:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3424:	420a      	tst	r2, r1
    3426:	d0fc      	beq.n	3422 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3428:	2104      	movs	r1, #4
    342a:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    342c:	420a      	tst	r2, r1
    342e:	d0fc      	beq.n	342a <trx_reg_write+0x96>
    3430:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3432:	0751      	lsls	r1, r2, #29
    3434:	d514      	bpl.n	3460 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3436:	8b5a      	ldrh	r2, [r3, #26]
    3438:	0751      	lsls	r1, r2, #29
    343a:	d503      	bpl.n	3444 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    343c:	8b59      	ldrh	r1, [r3, #26]
    343e:	2204      	movs	r2, #4
    3440:	430a      	orrs	r2, r1
    3442:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3444:	4a0e      	ldr	r2, [pc, #56]	; (3480 <trx_reg_write+0xec>)
    3446:	7992      	ldrb	r2, [r2, #6]
    3448:	2a01      	cmp	r2, #1
    344a:	d105      	bne.n	3458 <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    344c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    344e:	05d2      	lsls	r2, r2, #23
    3450:	0dd2      	lsrs	r2, r2, #23
    3452:	4b0e      	ldr	r3, [pc, #56]	; (348c <trx_reg_write+0xf8>)
    3454:	801a      	strh	r2, [r3, #0]
    3456:	e003      	b.n	3460 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    345a:	b2d2      	uxtb	r2, r2
    345c:	4b0b      	ldr	r3, [pc, #44]	; (348c <trx_reg_write+0xf8>)
    345e:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3460:	4807      	ldr	r0, [pc, #28]	; (3480 <trx_reg_write+0xec>)
    3462:	4908      	ldr	r1, [pc, #32]	; (3484 <trx_reg_write+0xf0>)
    3464:	2200      	movs	r2, #0
    3466:	4b08      	ldr	r3, [pc, #32]	; (3488 <trx_reg_write+0xf4>)
    3468:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    346a:	2c00      	cmp	r4, #0
    346c:	d005      	beq.n	347a <trx_reg_write+0xe6>
		cpu_irq_enable();
    346e:	2201      	movs	r2, #1
    3470:	4b02      	ldr	r3, [pc, #8]	; (347c <trx_reg_write+0xe8>)
    3472:	701a      	strb	r2, [r3, #0]
    3474:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3478:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    347a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    347c:	20000009 	.word	0x20000009
    3480:	200008d0 	.word	0x200008d0
    3484:	20000894 	.word	0x20000894
    3488:	000008ed 	.word	0x000008ed
    348c:	2000088c 	.word	0x2000088c

00003490 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3490:	b5f0      	push	{r4, r5, r6, r7, lr}
    3492:	465f      	mov	r7, fp
    3494:	4656      	mov	r6, sl
    3496:	464d      	mov	r5, r9
    3498:	4644      	mov	r4, r8
    349a:	b4f0      	push	{r4, r5, r6, r7}
    349c:	b083      	sub	sp, #12
    349e:	1c06      	adds	r6, r0, #0
    34a0:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    34a2:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    34a6:	4278      	negs	r0, r7
    34a8:	4178      	adcs	r0, r7
    34aa:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    34ac:	b672      	cpsid	i
    34ae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    34b2:	2200      	movs	r2, #0
    34b4:	4b41      	ldr	r3, [pc, #260]	; (35bc <trx_frame_read+0x12c>)
    34b6:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    34b8:	4d41      	ldr	r5, [pc, #260]	; (35c0 <trx_frame_read+0x130>)
    34ba:	1c28      	adds	r0, r5, #0
    34bc:	4941      	ldr	r1, [pc, #260]	; (35c4 <trx_frame_read+0x134>)
    34be:	2201      	movs	r2, #1
    34c0:	4b41      	ldr	r3, [pc, #260]	; (35c8 <trx_frame_read+0x138>)
    34c2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    34c4:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    34c6:	2101      	movs	r1, #1
    34c8:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    34ca:	420a      	tst	r2, r1
    34cc:	d0fc      	beq.n	34c8 <trx_frame_read+0x38>
    34ce:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    34d0:	07d1      	lsls	r1, r2, #31
    34d2:	d501      	bpl.n	34d8 <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    34d4:	2220      	movs	r2, #32
    34d6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    34d8:	2102      	movs	r1, #2
    34da:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    34dc:	420a      	tst	r2, r1
    34de:	d0fc      	beq.n	34da <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    34e0:	2004      	movs	r0, #4
    34e2:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    34e4:	4202      	tst	r2, r0
    34e6:	d0fc      	beq.n	34e2 <trx_frame_read+0x52>
    34e8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    34ea:	0750      	lsls	r0, r2, #29
    34ec:	d50f      	bpl.n	350e <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    34ee:	8b5a      	ldrh	r2, [r3, #26]
    34f0:	0751      	lsls	r1, r2, #29
    34f2:	d503      	bpl.n	34fc <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    34f4:	8b59      	ldrh	r1, [r3, #26]
    34f6:	2204      	movs	r2, #4
    34f8:	430a      	orrs	r2, r1
    34fa:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    34fc:	4a30      	ldr	r2, [pc, #192]	; (35c0 <trx_frame_read+0x130>)
    34fe:	7992      	ldrb	r2, [r2, #6]
    3500:	2a01      	cmp	r2, #1
    3502:	d109      	bne.n	3518 <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3506:	05d2      	lsls	r2, r2, #23
    3508:	0dd2      	lsrs	r2, r2, #23
    350a:	4b30      	ldr	r3, [pc, #192]	; (35cc <trx_frame_read+0x13c>)
    350c:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    350e:	1e63      	subs	r3, r4, #1
    3510:	b2db      	uxtb	r3, r3
    3512:	2c00      	cmp	r4, #0
    3514:	d105      	bne.n	3522 <trx_frame_read+0x92>
    3516:	e03c      	b.n	3592 <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    351a:	b2d2      	uxtb	r2, r2
    351c:	4b2b      	ldr	r3, [pc, #172]	; (35cc <trx_frame_read+0x13c>)
    351e:	801a      	strh	r2, [r3, #0]
    3520:	e7f5      	b.n	350e <trx_frame_read+0x7e>
    3522:	3301      	adds	r3, #1
    3524:	199b      	adds	r3, r3, r6
    3526:	4699      	mov	r9, r3
    3528:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    352a:	4a25      	ldr	r2, [pc, #148]	; (35c0 <trx_frame_read+0x130>)
    352c:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    352e:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3530:	2300      	movs	r3, #0
    3532:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3534:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3536:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3538:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    353a:	2204      	movs	r2, #4
    353c:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    353e:	4642      	mov	r2, r8
    3540:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3542:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3544:	4222      	tst	r2, r4
    3546:	d0fc      	beq.n	3542 <trx_frame_read+0xb2>
    3548:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    354a:	4222      	tst	r2, r4
    354c:	d001      	beq.n	3552 <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    354e:	4652      	mov	r2, sl
    3550:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3552:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3554:	422a      	tst	r2, r5
    3556:	d0fc      	beq.n	3552 <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3558:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    355a:	420a      	tst	r2, r1
    355c:	d0fc      	beq.n	3558 <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    355e:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3560:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3562:	420a      	tst	r2, r1
    3564:	d011      	beq.n	358a <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3566:	8b5a      	ldrh	r2, [r3, #26]
    3568:	420a      	tst	r2, r1
    356a:	d004      	beq.n	3576 <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    356c:	8b5a      	ldrh	r2, [r3, #26]
    356e:	4658      	mov	r0, fp
    3570:	4302      	orrs	r2, r0
    3572:	b292      	uxth	r2, r2
    3574:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3576:	4812      	ldr	r0, [pc, #72]	; (35c0 <trx_frame_read+0x130>)
    3578:	7982      	ldrb	r2, [r0, #6]
    357a:	2a01      	cmp	r2, #1
    357c:	d103      	bne.n	3586 <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    357e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3580:	05c0      	lsls	r0, r0, #23
    3582:	0dc0      	lsrs	r0, r0, #23
    3584:	e001      	b.n	358a <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3586:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3588:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    358a:	7030      	strb	r0, [r6, #0]
		data++;
    358c:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    358e:	454e      	cmp	r6, r9
    3590:	d1d5      	bne.n	353e <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3592:	480b      	ldr	r0, [pc, #44]	; (35c0 <trx_frame_read+0x130>)
    3594:	490b      	ldr	r1, [pc, #44]	; (35c4 <trx_frame_read+0x134>)
    3596:	2200      	movs	r2, #0
    3598:	4b0b      	ldr	r3, [pc, #44]	; (35c8 <trx_frame_read+0x138>)
    359a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    359c:	9901      	ldr	r1, [sp, #4]
    359e:	2900      	cmp	r1, #0
    35a0:	d005      	beq.n	35ae <trx_frame_read+0x11e>
		cpu_irq_enable();
    35a2:	2201      	movs	r2, #1
    35a4:	4b05      	ldr	r3, [pc, #20]	; (35bc <trx_frame_read+0x12c>)
    35a6:	701a      	strb	r2, [r3, #0]
    35a8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    35ac:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    35ae:	b003      	add	sp, #12
    35b0:	bc3c      	pop	{r2, r3, r4, r5}
    35b2:	4690      	mov	r8, r2
    35b4:	4699      	mov	r9, r3
    35b6:	46a2      	mov	sl, r4
    35b8:	46ab      	mov	fp, r5
    35ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35bc:	20000009 	.word	0x20000009
    35c0:	200008d0 	.word	0x200008d0
    35c4:	20000894 	.word	0x20000894
    35c8:	000008ed 	.word	0x000008ed
    35cc:	2000088c 	.word	0x2000088c

000035d0 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    35d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35d2:	464f      	mov	r7, r9
    35d4:	4646      	mov	r6, r8
    35d6:	b4c0      	push	{r6, r7}
    35d8:	1c04      	adds	r4, r0, #0
    35da:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    35dc:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    35e0:	4271      	negs	r1, r6
    35e2:	4171      	adcs	r1, r6
    35e4:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    35e6:	b672      	cpsid	i
    35e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    35ec:	2200      	movs	r2, #0
    35ee:	4b3c      	ldr	r3, [pc, #240]	; (36e0 <trx_frame_write+0x110>)
    35f0:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    35f2:	4f3c      	ldr	r7, [pc, #240]	; (36e4 <trx_frame_write+0x114>)
    35f4:	1c38      	adds	r0, r7, #0
    35f6:	493c      	ldr	r1, [pc, #240]	; (36e8 <trx_frame_write+0x118>)
    35f8:	2201      	movs	r2, #1
    35fa:	4b3c      	ldr	r3, [pc, #240]	; (36ec <trx_frame_write+0x11c>)
    35fc:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35fe:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3600:	2101      	movs	r1, #1
    3602:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3604:	420a      	tst	r2, r1
    3606:	d0fc      	beq.n	3602 <trx_frame_write+0x32>
    3608:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    360a:	07d1      	lsls	r1, r2, #31
    360c:	d501      	bpl.n	3612 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    360e:	2260      	movs	r2, #96	; 0x60
    3610:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3612:	2102      	movs	r1, #2
    3614:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3616:	420a      	tst	r2, r1
    3618:	d0fc      	beq.n	3614 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    361a:	2104      	movs	r1, #4
    361c:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    361e:	420a      	tst	r2, r1
    3620:	d0fc      	beq.n	361c <trx_frame_write+0x4c>
    3622:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3624:	0751      	lsls	r1, r2, #29
    3626:	d50f      	bpl.n	3648 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3628:	8b5a      	ldrh	r2, [r3, #26]
    362a:	0751      	lsls	r1, r2, #29
    362c:	d503      	bpl.n	3636 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    362e:	8b59      	ldrh	r1, [r3, #26]
    3630:	2204      	movs	r2, #4
    3632:	430a      	orrs	r2, r1
    3634:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3636:	4a2b      	ldr	r2, [pc, #172]	; (36e4 <trx_frame_write+0x114>)
    3638:	7992      	ldrb	r2, [r2, #6]
    363a:	2a01      	cmp	r2, #1
    363c:	d10e      	bne.n	365c <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    363e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3640:	05c9      	lsls	r1, r1, #23
    3642:	0dc9      	lsrs	r1, r1, #23
    3644:	4a2a      	ldr	r2, [pc, #168]	; (36f0 <trx_frame_write+0x120>)
    3646:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3648:	4a26      	ldr	r2, [pc, #152]	; (36e4 <trx_frame_write+0x114>)
    364a:	7992      	ldrb	r2, [r2, #6]
    364c:	4690      	mov	r8, r2
    364e:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3650:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3652:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3654:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3656:	2204      	movs	r2, #4
    3658:	4694      	mov	ip, r2
    365a:	e02b      	b.n	36b4 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    365c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    365e:	b2c9      	uxtb	r1, r1
    3660:	4a23      	ldr	r2, [pc, #140]	; (36f0 <trx_frame_write+0x120>)
    3662:	8011      	strh	r1, [r2, #0]
    3664:	e7f0      	b.n	3648 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3666:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3668:	423a      	tst	r2, r7
    366a:	d0fc      	beq.n	3666 <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    366c:	7831      	ldrb	r1, [r6, #0]
    366e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3670:	423a      	tst	r2, r7
    3672:	d000      	beq.n	3676 <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3674:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3676:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3678:	4202      	tst	r2, r0
    367a:	d0fc      	beq.n	3676 <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    367c:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    367e:	4222      	tst	r2, r4
    3680:	d0fc      	beq.n	367c <trx_frame_write+0xac>
    3682:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3684:	4222      	tst	r2, r4
    3686:	d014      	beq.n	36b2 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3688:	8b5a      	ldrh	r2, [r3, #26]
    368a:	4222      	tst	r2, r4
    368c:	d004      	beq.n	3698 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    368e:	8b5a      	ldrh	r2, [r3, #26]
    3690:	4661      	mov	r1, ip
    3692:	430a      	orrs	r2, r1
    3694:	b292      	uxth	r2, r2
    3696:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3698:	4642      	mov	r2, r8
    369a:	2a01      	cmp	r2, #1
    369c:	d105      	bne.n	36aa <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    369e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    36a0:	05d2      	lsls	r2, r2, #23
    36a2:	0dd2      	lsrs	r2, r2, #23
    36a4:	4912      	ldr	r1, [pc, #72]	; (36f0 <trx_frame_write+0x120>)
    36a6:	800a      	strh	r2, [r1, #0]
    36a8:	e003      	b.n	36b2 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    36aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    36ac:	b2d2      	uxtb	r2, r2
    36ae:	4910      	ldr	r1, [pc, #64]	; (36f0 <trx_frame_write+0x120>)
    36b0:	800a      	strh	r2, [r1, #0]
    36b2:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    36b4:	3d01      	subs	r5, #1
    36b6:	b2ed      	uxtb	r5, r5
    36b8:	2dff      	cmp	r5, #255	; 0xff
    36ba:	d1d4      	bne.n	3666 <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    36bc:	4809      	ldr	r0, [pc, #36]	; (36e4 <trx_frame_write+0x114>)
    36be:	490a      	ldr	r1, [pc, #40]	; (36e8 <trx_frame_write+0x118>)
    36c0:	2200      	movs	r2, #0
    36c2:	4b0a      	ldr	r3, [pc, #40]	; (36ec <trx_frame_write+0x11c>)
    36c4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    36c6:	464a      	mov	r2, r9
    36c8:	2a00      	cmp	r2, #0
    36ca:	d005      	beq.n	36d8 <trx_frame_write+0x108>
		cpu_irq_enable();
    36cc:	2201      	movs	r2, #1
    36ce:	4b04      	ldr	r3, [pc, #16]	; (36e0 <trx_frame_write+0x110>)
    36d0:	701a      	strb	r2, [r3, #0]
    36d2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    36d6:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    36d8:	bc0c      	pop	{r2, r3}
    36da:	4690      	mov	r8, r2
    36dc:	4699      	mov	r9, r3
    36de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36e0:	20000009 	.word	0x20000009
    36e4:	200008d0 	.word	0x200008d0
    36e8:	20000894 	.word	0x20000894
    36ec:	000008ed 	.word	0x000008ed
    36f0:	2000088c 	.word	0x2000088c

000036f4 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    36f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36f6:	464f      	mov	r7, r9
    36f8:	4646      	mov	r6, r8
    36fa:	b4c0      	push	{r6, r7}
    36fc:	1c07      	adds	r7, r0, #0
    36fe:	1c0c      	adds	r4, r1, #0
    3700:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3702:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3706:	4271      	negs	r1, r6
    3708:	4171      	adcs	r1, r6
    370a:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    370c:	b672      	cpsid	i
    370e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3712:	2200      	movs	r2, #0
    3714:	4b50      	ldr	r3, [pc, #320]	; (3858 <trx_sram_write+0x164>)
    3716:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3718:	4e50      	ldr	r6, [pc, #320]	; (385c <trx_sram_write+0x168>)
    371a:	1c30      	adds	r0, r6, #0
    371c:	4950      	ldr	r1, [pc, #320]	; (3860 <trx_sram_write+0x16c>)
    371e:	2201      	movs	r2, #1
    3720:	4b50      	ldr	r3, [pc, #320]	; (3864 <trx_sram_write+0x170>)
    3722:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3724:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3726:	2101      	movs	r1, #1
    3728:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    372a:	420a      	tst	r2, r1
    372c:	d0fc      	beq.n	3728 <trx_sram_write+0x34>
    372e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3730:	07d1      	lsls	r1, r2, #31
    3732:	d501      	bpl.n	3738 <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3734:	2240      	movs	r2, #64	; 0x40
    3736:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3738:	2102      	movs	r1, #2
    373a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    373c:	420a      	tst	r2, r1
    373e:	d0fc      	beq.n	373a <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3740:	2104      	movs	r1, #4
    3742:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3744:	420a      	tst	r2, r1
    3746:	d0fc      	beq.n	3742 <trx_sram_write+0x4e>
    3748:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    374a:	0751      	lsls	r1, r2, #29
    374c:	d514      	bpl.n	3778 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    374e:	8b5a      	ldrh	r2, [r3, #26]
    3750:	0751      	lsls	r1, r2, #29
    3752:	d503      	bpl.n	375c <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3754:	8b59      	ldrh	r1, [r3, #26]
    3756:	2204      	movs	r2, #4
    3758:	430a      	orrs	r2, r1
    375a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    375c:	4a3f      	ldr	r2, [pc, #252]	; (385c <trx_sram_write+0x168>)
    375e:	7992      	ldrb	r2, [r2, #6]
    3760:	2a01      	cmp	r2, #1
    3762:	d105      	bne.n	3770 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3764:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3766:	05c9      	lsls	r1, r1, #23
    3768:	0dc9      	lsrs	r1, r1, #23
    376a:	4a3f      	ldr	r2, [pc, #252]	; (3868 <trx_sram_write+0x174>)
    376c:	8011      	strh	r1, [r2, #0]
    376e:	e003      	b.n	3778 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3770:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3772:	b2c9      	uxtb	r1, r1
    3774:	4a3c      	ldr	r2, [pc, #240]	; (3868 <trx_sram_write+0x174>)
    3776:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3778:	2101      	movs	r1, #1
    377a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    377c:	420a      	tst	r2, r1
    377e:	d0fc      	beq.n	377a <trx_sram_write+0x86>
    3780:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3782:	07d1      	lsls	r1, r2, #31
    3784:	d500      	bpl.n	3788 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3786:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3788:	2102      	movs	r1, #2
    378a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    378c:	420a      	tst	r2, r1
    378e:	d0fc      	beq.n	378a <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3790:	2104      	movs	r1, #4
    3792:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3794:	420a      	tst	r2, r1
    3796:	d0fc      	beq.n	3792 <trx_sram_write+0x9e>
    3798:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    379a:	0751      	lsls	r1, r2, #29
    379c:	d50f      	bpl.n	37be <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    379e:	8b5a      	ldrh	r2, [r3, #26]
    37a0:	0751      	lsls	r1, r2, #29
    37a2:	d503      	bpl.n	37ac <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    37a4:	8b59      	ldrh	r1, [r3, #26]
    37a6:	2204      	movs	r2, #4
    37a8:	430a      	orrs	r2, r1
    37aa:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    37ac:	4a2b      	ldr	r2, [pc, #172]	; (385c <trx_sram_write+0x168>)
    37ae:	7992      	ldrb	r2, [r2, #6]
    37b0:	2a01      	cmp	r2, #1
    37b2:	d10e      	bne.n	37d2 <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    37b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    37b6:	05c9      	lsls	r1, r1, #23
    37b8:	0dc9      	lsrs	r1, r1, #23
    37ba:	4a2b      	ldr	r2, [pc, #172]	; (3868 <trx_sram_write+0x174>)
    37bc:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    37be:	4a27      	ldr	r2, [pc, #156]	; (385c <trx_sram_write+0x168>)
    37c0:	7992      	ldrb	r2, [r2, #6]
    37c2:	4690      	mov	r8, r2
    37c4:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    37c6:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    37c8:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    37ca:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    37cc:	2204      	movs	r2, #4
    37ce:	4694      	mov	ip, r2
    37d0:	e02b      	b.n	382a <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    37d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    37d4:	b2c9      	uxtb	r1, r1
    37d6:	4a24      	ldr	r2, [pc, #144]	; (3868 <trx_sram_write+0x174>)
    37d8:	8011      	strh	r1, [r2, #0]
    37da:	e7f0      	b.n	37be <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    37dc:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    37de:	4238      	tst	r0, r7
    37e0:	d0fc      	beq.n	37dc <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    37e2:	7832      	ldrb	r2, [r6, #0]
    37e4:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    37e6:	4238      	tst	r0, r7
    37e8:	d000      	beq.n	37ec <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    37ea:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    37ec:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    37ee:	4208      	tst	r0, r1
    37f0:	d0fc      	beq.n	37ec <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    37f2:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    37f4:	4220      	tst	r0, r4
    37f6:	d0fc      	beq.n	37f2 <trx_sram_write+0xfe>
    37f8:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    37fa:	4220      	tst	r0, r4
    37fc:	d014      	beq.n	3828 <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    37fe:	8b58      	ldrh	r0, [r3, #26]
    3800:	4220      	tst	r0, r4
    3802:	d004      	beq.n	380e <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3804:	8b58      	ldrh	r0, [r3, #26]
    3806:	4662      	mov	r2, ip
    3808:	4310      	orrs	r0, r2
    380a:	b280      	uxth	r0, r0
    380c:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    380e:	4642      	mov	r2, r8
    3810:	2a01      	cmp	r2, #1
    3812:	d105      	bne.n	3820 <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3814:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3816:	05c0      	lsls	r0, r0, #23
    3818:	0dc0      	lsrs	r0, r0, #23
    381a:	4a13      	ldr	r2, [pc, #76]	; (3868 <trx_sram_write+0x174>)
    381c:	8010      	strh	r0, [r2, #0]
    381e:	e003      	b.n	3828 <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3820:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3822:	b2c0      	uxtb	r0, r0
    3824:	4a10      	ldr	r2, [pc, #64]	; (3868 <trx_sram_write+0x174>)
    3826:	8010      	strh	r0, [r2, #0]
    3828:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    382a:	3d01      	subs	r5, #1
    382c:	b2ed      	uxtb	r5, r5
    382e:	2dff      	cmp	r5, #255	; 0xff
    3830:	d1d4      	bne.n	37dc <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3832:	480a      	ldr	r0, [pc, #40]	; (385c <trx_sram_write+0x168>)
    3834:	490a      	ldr	r1, [pc, #40]	; (3860 <trx_sram_write+0x16c>)
    3836:	2200      	movs	r2, #0
    3838:	4b0a      	ldr	r3, [pc, #40]	; (3864 <trx_sram_write+0x170>)
    383a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    383c:	464b      	mov	r3, r9
    383e:	2b00      	cmp	r3, #0
    3840:	d005      	beq.n	384e <trx_sram_write+0x15a>
		cpu_irq_enable();
    3842:	2201      	movs	r2, #1
    3844:	4b04      	ldr	r3, [pc, #16]	; (3858 <trx_sram_write+0x164>)
    3846:	701a      	strb	r2, [r3, #0]
    3848:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    384c:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    384e:	bc0c      	pop	{r2, r3}
    3850:	4690      	mov	r8, r2
    3852:	4699      	mov	r9, r3
    3854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3856:	46c0      	nop			; (mov r8, r8)
    3858:	20000009 	.word	0x20000009
    385c:	200008d0 	.word	0x200008d0
    3860:	20000894 	.word	0x20000894
    3864:	000008ed 	.word	0x000008ed
    3868:	2000088c 	.word	0x2000088c

0000386c <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    386c:	b5f0      	push	{r4, r5, r6, r7, lr}
    386e:	465f      	mov	r7, fp
    3870:	4656      	mov	r6, sl
    3872:	464d      	mov	r5, r9
    3874:	4644      	mov	r4, r8
    3876:	b4f0      	push	{r4, r5, r6, r7}
    3878:	b083      	sub	sp, #12
    387a:	1c05      	adds	r5, r0, #0
    387c:	1c0e      	adds	r6, r1, #0
    387e:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    3880:	2001      	movs	r0, #1
    3882:	4b5b      	ldr	r3, [pc, #364]	; (39f0 <trx_sram_read+0x184>)
    3884:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3886:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    388a:	4279      	negs	r1, r7
    388c:	4179      	adcs	r1, r7
    388e:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3890:	b672      	cpsid	i
    3892:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3896:	2200      	movs	r2, #0
    3898:	4b56      	ldr	r3, [pc, #344]	; (39f4 <trx_sram_read+0x188>)
    389a:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    389c:	4f56      	ldr	r7, [pc, #344]	; (39f8 <trx_sram_read+0x18c>)
    389e:	1c38      	adds	r0, r7, #0
    38a0:	4956      	ldr	r1, [pc, #344]	; (39fc <trx_sram_read+0x190>)
    38a2:	2201      	movs	r2, #1
    38a4:	4b56      	ldr	r3, [pc, #344]	; (3a00 <trx_sram_read+0x194>)
    38a6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    38a8:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    38aa:	2101      	movs	r1, #1
    38ac:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    38ae:	420a      	tst	r2, r1
    38b0:	d0fc      	beq.n	38ac <trx_sram_read+0x40>
    38b2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    38b4:	07d1      	lsls	r1, r2, #31
    38b6:	d501      	bpl.n	38bc <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    38b8:	2200      	movs	r2, #0
    38ba:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    38bc:	2102      	movs	r1, #2
    38be:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    38c0:	420a      	tst	r2, r1
    38c2:	d0fc      	beq.n	38be <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    38c4:	2204      	movs	r2, #4
    38c6:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    38c8:	4211      	tst	r1, r2
    38ca:	d0fc      	beq.n	38c6 <trx_sram_read+0x5a>
    38cc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    38ce:	0751      	lsls	r1, r2, #29
    38d0:	d514      	bpl.n	38fc <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    38d2:	8b5a      	ldrh	r2, [r3, #26]
    38d4:	0751      	lsls	r1, r2, #29
    38d6:	d503      	bpl.n	38e0 <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    38d8:	8b59      	ldrh	r1, [r3, #26]
    38da:	2204      	movs	r2, #4
    38dc:	430a      	orrs	r2, r1
    38de:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    38e0:	4a45      	ldr	r2, [pc, #276]	; (39f8 <trx_sram_read+0x18c>)
    38e2:	7992      	ldrb	r2, [r2, #6]
    38e4:	2a01      	cmp	r2, #1
    38e6:	d105      	bne.n	38f4 <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    38e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    38ea:	05c9      	lsls	r1, r1, #23
    38ec:	0dc9      	lsrs	r1, r1, #23
    38ee:	4a45      	ldr	r2, [pc, #276]	; (3a04 <trx_sram_read+0x198>)
    38f0:	8011      	strh	r1, [r2, #0]
    38f2:	e003      	b.n	38fc <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    38f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    38f6:	b2c9      	uxtb	r1, r1
    38f8:	4a42      	ldr	r2, [pc, #264]	; (3a04 <trx_sram_read+0x198>)
    38fa:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    38fc:	2201      	movs	r2, #1
    38fe:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    3900:	4211      	tst	r1, r2
    3902:	d0fc      	beq.n	38fe <trx_sram_read+0x92>
    3904:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3906:	07d1      	lsls	r1, r2, #31
    3908:	d500      	bpl.n	390c <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    390a:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    390c:	2202      	movs	r2, #2
    390e:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3910:	4211      	tst	r1, r2
    3912:	d0fc      	beq.n	390e <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3914:	2204      	movs	r2, #4
    3916:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3918:	4211      	tst	r1, r2
    391a:	d0fc      	beq.n	3916 <trx_sram_read+0xaa>
    391c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    391e:	0751      	lsls	r1, r2, #29
    3920:	d50f      	bpl.n	3942 <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3922:	8b5a      	ldrh	r2, [r3, #26]
    3924:	0751      	lsls	r1, r2, #29
    3926:	d503      	bpl.n	3930 <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3928:	8b59      	ldrh	r1, [r3, #26]
    392a:	2204      	movs	r2, #4
    392c:	430a      	orrs	r2, r1
    392e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3930:	4a31      	ldr	r2, [pc, #196]	; (39f8 <trx_sram_read+0x18c>)
    3932:	7992      	ldrb	r2, [r2, #6]
    3934:	2a01      	cmp	r2, #1
    3936:	d109      	bne.n	394c <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    393a:	05d2      	lsls	r2, r2, #23
    393c:	0dd2      	lsrs	r2, r2, #23
    393e:	4b31      	ldr	r3, [pc, #196]	; (3a04 <trx_sram_read+0x198>)
    3940:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    3942:	1e63      	subs	r3, r4, #1
    3944:	b2db      	uxtb	r3, r3
    3946:	2c00      	cmp	r4, #0
    3948:	d105      	bne.n	3956 <trx_sram_read+0xea>
    394a:	e03b      	b.n	39c4 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    394c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    394e:	b2d2      	uxtb	r2, r2
    3950:	4b2c      	ldr	r3, [pc, #176]	; (3a04 <trx_sram_read+0x198>)
    3952:	801a      	strh	r2, [r3, #0]
    3954:	e7f5      	b.n	3942 <trx_sram_read+0xd6>
    3956:	3301      	adds	r3, #1
    3958:	199b      	adds	r3, r3, r6
    395a:	4699      	mov	r9, r3
    395c:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    395e:	4a26      	ldr	r2, [pc, #152]	; (39f8 <trx_sram_read+0x18c>)
    3960:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3962:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3964:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3966:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3968:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    396a:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    396c:	2204      	movs	r2, #4
    396e:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3970:	4642      	mov	r2, r8
    3972:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3974:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3976:	4222      	tst	r2, r4
    3978:	d0fc      	beq.n	3974 <trx_sram_read+0x108>
    397a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    397c:	4222      	tst	r2, r4
    397e:	d001      	beq.n	3984 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3980:	4652      	mov	r2, sl
    3982:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3984:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3986:	422a      	tst	r2, r5
    3988:	d0fc      	beq.n	3984 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    398a:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    398c:	4202      	tst	r2, r0
    398e:	d0fc      	beq.n	398a <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3990:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3992:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3994:	4202      	tst	r2, r0
    3996:	d011      	beq.n	39bc <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3998:	8b5a      	ldrh	r2, [r3, #26]
    399a:	4202      	tst	r2, r0
    399c:	d004      	beq.n	39a8 <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    399e:	8b5a      	ldrh	r2, [r3, #26]
    39a0:	4659      	mov	r1, fp
    39a2:	430a      	orrs	r2, r1
    39a4:	b292      	uxth	r2, r2
    39a6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    39a8:	4913      	ldr	r1, [pc, #76]	; (39f8 <trx_sram_read+0x18c>)
    39aa:	798a      	ldrb	r2, [r1, #6]
    39ac:	2a01      	cmp	r2, #1
    39ae:	d103      	bne.n	39b8 <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    39b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    39b2:	05c9      	lsls	r1, r1, #23
    39b4:	0dc9      	lsrs	r1, r1, #23
    39b6:	e001      	b.n	39bc <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    39b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    39ba:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    39bc:	7031      	strb	r1, [r6, #0]
		data++;
    39be:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    39c0:	454e      	cmp	r6, r9
    39c2:	d1d5      	bne.n	3970 <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    39c4:	480c      	ldr	r0, [pc, #48]	; (39f8 <trx_sram_read+0x18c>)
    39c6:	490d      	ldr	r1, [pc, #52]	; (39fc <trx_sram_read+0x190>)
    39c8:	2200      	movs	r2, #0
    39ca:	4b0d      	ldr	r3, [pc, #52]	; (3a00 <trx_sram_read+0x194>)
    39cc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    39ce:	9a01      	ldr	r2, [sp, #4]
    39d0:	2a00      	cmp	r2, #0
    39d2:	d005      	beq.n	39e0 <trx_sram_read+0x174>
		cpu_irq_enable();
    39d4:	2201      	movs	r2, #1
    39d6:	4b07      	ldr	r3, [pc, #28]	; (39f4 <trx_sram_read+0x188>)
    39d8:	701a      	strb	r2, [r3, #0]
    39da:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    39de:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    39e0:	b003      	add	sp, #12
    39e2:	bc3c      	pop	{r2, r3, r4, r5}
    39e4:	4690      	mov	r8, r2
    39e6:	4699      	mov	r9, r3
    39e8:	46a2      	mov	sl, r4
    39ea:	46ab      	mov	fp, r5
    39ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	0000176d 	.word	0x0000176d
    39f4:	20000009 	.word	0x20000009
    39f8:	200008d0 	.word	0x200008d0
    39fc:	20000894 	.word	0x20000894
    3a00:	000008ed 	.word	0x000008ed
    3a04:	2000088c 	.word	0x2000088c

00003a08 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    3a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a0a:	465f      	mov	r7, fp
    3a0c:	4656      	mov	r6, sl
    3a0e:	464d      	mov	r5, r9
    3a10:	4644      	mov	r4, r8
    3a12:	b4f0      	push	{r4, r5, r6, r7}
    3a14:	b083      	sub	sp, #12
    3a16:	1c05      	adds	r5, r0, #0
    3a18:	4688      	mov	r8, r1
    3a1a:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    3a1c:	2001      	movs	r0, #1
    3a1e:	4b83      	ldr	r3, [pc, #524]	; (3c2c <trx_aes_wrrd+0x224>)
    3a20:	4798      	blx	r3

	ENTER_TRX_REGION();
    3a22:	2000      	movs	r0, #0
    3a24:	2100      	movs	r1, #0
    3a26:	4b82      	ldr	r3, [pc, #520]	; (3c30 <trx_aes_wrrd+0x228>)
    3a28:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3a2a:	4e82      	ldr	r6, [pc, #520]	; (3c34 <trx_aes_wrrd+0x22c>)
    3a2c:	1c30      	adds	r0, r6, #0
    3a2e:	4982      	ldr	r1, [pc, #520]	; (3c38 <trx_aes_wrrd+0x230>)
    3a30:	2201      	movs	r2, #1
    3a32:	4b82      	ldr	r3, [pc, #520]	; (3c3c <trx_aes_wrrd+0x234>)
    3a34:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a36:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a38:	2101      	movs	r1, #1
    3a3a:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    3a3c:	420a      	tst	r2, r1
    3a3e:	d0fc      	beq.n	3a3a <trx_aes_wrrd+0x32>
    3a40:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3a42:	07d0      	lsls	r0, r2, #31
    3a44:	d501      	bpl.n	3a4a <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a46:	2240      	movs	r2, #64	; 0x40
    3a48:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a4a:	2102      	movs	r1, #2
    3a4c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3a4e:	420a      	tst	r2, r1
    3a50:	d0fc      	beq.n	3a4c <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a52:	2104      	movs	r1, #4
    3a54:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3a56:	420a      	tst	r2, r1
    3a58:	d0fc      	beq.n	3a54 <trx_aes_wrrd+0x4c>
    3a5a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3a5c:	0751      	lsls	r1, r2, #29
    3a5e:	d514      	bpl.n	3a8a <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3a60:	8b5a      	ldrh	r2, [r3, #26]
    3a62:	0756      	lsls	r6, r2, #29
    3a64:	d503      	bpl.n	3a6e <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3a66:	8b59      	ldrh	r1, [r3, #26]
    3a68:	2204      	movs	r2, #4
    3a6a:	430a      	orrs	r2, r1
    3a6c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3a6e:	4a71      	ldr	r2, [pc, #452]	; (3c34 <trx_aes_wrrd+0x22c>)
    3a70:	7992      	ldrb	r2, [r2, #6]
    3a72:	2a01      	cmp	r2, #1
    3a74:	d105      	bne.n	3a82 <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3a76:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3a78:	05c9      	lsls	r1, r1, #23
    3a7a:	0dc9      	lsrs	r1, r1, #23
    3a7c:	4a70      	ldr	r2, [pc, #448]	; (3c40 <trx_aes_wrrd+0x238>)
    3a7e:	8011      	strh	r1, [r2, #0]
    3a80:	e003      	b.n	3a8a <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a82:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3a84:	b2c9      	uxtb	r1, r1
    3a86:	4a6e      	ldr	r2, [pc, #440]	; (3c40 <trx_aes_wrrd+0x238>)
    3a88:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a8a:	2101      	movs	r1, #1
    3a8c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    3a8e:	420a      	tst	r2, r1
    3a90:	d0fc      	beq.n	3a8c <trx_aes_wrrd+0x84>
    3a92:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3a94:	07d0      	lsls	r0, r2, #31
    3a96:	d500      	bpl.n	3a9a <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a98:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a9a:	2102      	movs	r1, #2
    3a9c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3a9e:	420a      	tst	r2, r1
    3aa0:	d0fc      	beq.n	3a9c <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3aa2:	2204      	movs	r2, #4
    3aa4:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3aa6:	4211      	tst	r1, r2
    3aa8:	d0fc      	beq.n	3aa4 <trx_aes_wrrd+0x9c>
    3aaa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3aac:	0751      	lsls	r1, r2, #29
    3aae:	d514      	bpl.n	3ada <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ab0:	8b5a      	ldrh	r2, [r3, #26]
    3ab2:	0756      	lsls	r6, r2, #29
    3ab4:	d503      	bpl.n	3abe <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ab6:	8b59      	ldrh	r1, [r3, #26]
    3ab8:	2204      	movs	r2, #4
    3aba:	430a      	orrs	r2, r1
    3abc:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3abe:	4a5d      	ldr	r2, [pc, #372]	; (3c34 <trx_aes_wrrd+0x22c>)
    3ac0:	7992      	ldrb	r2, [r2, #6]
    3ac2:	2a01      	cmp	r2, #1
    3ac4:	d105      	bne.n	3ad2 <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ac6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ac8:	05c9      	lsls	r1, r1, #23
    3aca:	0dc9      	lsrs	r1, r1, #23
    3acc:	4a5c      	ldr	r2, [pc, #368]	; (3c40 <trx_aes_wrrd+0x238>)
    3ace:	8011      	strh	r1, [r2, #0]
    3ad0:	e003      	b.n	3ada <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ad2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ad4:	b2c9      	uxtb	r1, r1
    3ad6:	4a5a      	ldr	r2, [pc, #360]	; (3c40 <trx_aes_wrrd+0x238>)
    3ad8:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ada:	2201      	movs	r2, #1
    3adc:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    3ade:	4211      	tst	r1, r2
    3ae0:	d0fc      	beq.n	3adc <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    3ae2:	4640      	mov	r0, r8
    3ae4:	7801      	ldrb	r1, [r0, #0]
    3ae6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3ae8:	07d6      	lsls	r6, r2, #31
    3aea:	d500      	bpl.n	3aee <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3aec:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3aee:	2202      	movs	r2, #2
    3af0:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    3af2:	4211      	tst	r1, r2
    3af4:	d0fc      	beq.n	3af0 <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3af6:	2204      	movs	r2, #4
    3af8:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3afa:	4211      	tst	r1, r2
    3afc:	d0fc      	beq.n	3af8 <trx_aes_wrrd+0xf0>
    3afe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3b00:	0750      	lsls	r0, r2, #29
    3b02:	d50f      	bpl.n	3b24 <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b04:	8b5a      	ldrh	r2, [r3, #26]
    3b06:	0751      	lsls	r1, r2, #29
    3b08:	d503      	bpl.n	3b12 <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3b0a:	8b59      	ldrh	r1, [r3, #26]
    3b0c:	2204      	movs	r2, #4
    3b0e:	430a      	orrs	r2, r1
    3b10:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b12:	4a48      	ldr	r2, [pc, #288]	; (3c34 <trx_aes_wrrd+0x22c>)
    3b14:	7992      	ldrb	r2, [r2, #6]
    3b16:	2a01      	cmp	r2, #1
    3b18:	d108      	bne.n	3b2c <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b1c:	05d2      	lsls	r2, r2, #23
    3b1e:	0dd2      	lsrs	r2, r2, #23
    3b20:	4b47      	ldr	r3, [pc, #284]	; (3c40 <trx_aes_wrrd+0x238>)
    3b22:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    3b24:	2100      	movs	r1, #0
    3b26:	2c00      	cmp	r4, #0
    3b28:	d047      	beq.n	3bba <trx_aes_wrrd+0x1b2>
    3b2a:	e004      	b.n	3b36 <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b2e:	b2d2      	uxtb	r2, r2
    3b30:	4b43      	ldr	r3, [pc, #268]	; (3c40 <trx_aes_wrrd+0x238>)
    3b32:	801a      	strh	r2, [r3, #0]
    3b34:	e7f6      	b.n	3b24 <trx_aes_wrrd+0x11c>
    3b36:	4645      	mov	r5, r8
    3b38:	3c01      	subs	r4, #1
    3b3a:	b2e4      	uxtb	r4, r4
    3b3c:	9401      	str	r4, [sp, #4]
    3b3e:	1c23      	adds	r3, r4, #0
    3b40:	4443      	add	r3, r8
    3b42:	3301      	adds	r3, #1
    3b44:	469b      	mov	fp, r3
    3b46:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b48:	4b3a      	ldr	r3, [pc, #232]	; (3c34 <trx_aes_wrrd+0x22c>)
    3b4a:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b4c:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b4e:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b50:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b52:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3b54:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b56:	4656      	mov	r6, sl
    3b58:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b5a:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3b5c:	4206      	tst	r6, r0
    3b5e:	d0fc      	beq.n	3b5a <trx_aes_wrrd+0x152>
    3b60:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    3b62:	786e      	ldrb	r6, [r5, #1]
    3b64:	46b3      	mov	fp, r6
    3b66:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3b68:	4206      	tst	r6, r0
    3b6a:	d001      	beq.n	3b70 <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b6c:	465e      	mov	r6, fp
    3b6e:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b70:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3b72:	4226      	tst	r6, r4
    3b74:	d0fc      	beq.n	3b70 <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b76:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    3b78:	4216      	tst	r6, r2
    3b7a:	d0fc      	beq.n	3b76 <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b7c:	464e      	mov	r6, r9
    3b7e:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b80:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3b82:	4216      	tst	r6, r2
    3b84:	d011      	beq.n	3baa <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b86:	8b59      	ldrh	r1, [r3, #26]
    3b88:	4211      	tst	r1, r2
    3b8a:	d004      	beq.n	3b96 <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3b8c:	8b59      	ldrh	r1, [r3, #26]
    3b8e:	2604      	movs	r6, #4
    3b90:	4331      	orrs	r1, r6
    3b92:	b289      	uxth	r1, r1
    3b94:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b96:	4e27      	ldr	r6, [pc, #156]	; (3c34 <trx_aes_wrrd+0x22c>)
    3b98:	79b1      	ldrb	r1, [r6, #6]
    3b9a:	2901      	cmp	r1, #1
    3b9c:	d103      	bne.n	3ba6 <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ba0:	05c9      	lsls	r1, r1, #23
    3ba2:	0dc9      	lsrs	r1, r1, #23
    3ba4:	e001      	b.n	3baa <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ba6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ba8:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    3baa:	4663      	mov	r3, ip
    3bac:	7019      	strb	r1, [r3, #0]
    3bae:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    3bb0:	42bd      	cmp	r5, r7
    3bb2:	d1d0      	bne.n	3b56 <trx_aes_wrrd+0x14e>
    3bb4:	9b01      	ldr	r3, [sp, #4]
    3bb6:	3301      	adds	r3, #1
    3bb8:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3bba:	4b1e      	ldr	r3, [pc, #120]	; (3c34 <trx_aes_wrrd+0x22c>)
    3bbc:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bbe:	2001      	movs	r0, #1
    3bc0:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    3bc2:	4202      	tst	r2, r0
    3bc4:	d0fc      	beq.n	3bc0 <trx_aes_wrrd+0x1b8>
    3bc6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3bc8:	07d6      	lsls	r6, r2, #31
    3bca:	d501      	bpl.n	3bd0 <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3bcc:	2200      	movs	r2, #0
    3bce:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3bd0:	2002      	movs	r0, #2
    3bd2:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3bd4:	4202      	tst	r2, r0
    3bd6:	d0fc      	beq.n	3bd2 <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3bd8:	2004      	movs	r0, #4
    3bda:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    3bdc:	4202      	tst	r2, r0
    3bde:	d0fc      	beq.n	3bda <trx_aes_wrrd+0x1d2>
    3be0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3be2:	0750      	lsls	r0, r2, #29
    3be4:	d510      	bpl.n	3c08 <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3be6:	8b5a      	ldrh	r2, [r3, #26]
    3be8:	0751      	lsls	r1, r2, #29
    3bea:	d503      	bpl.n	3bf4 <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3bec:	8b59      	ldrh	r1, [r3, #26]
    3bee:	2204      	movs	r2, #4
    3bf0:	430a      	orrs	r2, r1
    3bf2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bf4:	4a0f      	ldr	r2, [pc, #60]	; (3c34 <trx_aes_wrrd+0x22c>)
    3bf6:	7992      	ldrb	r2, [r2, #6]
    3bf8:	2a01      	cmp	r2, #1
    3bfa:	d103      	bne.n	3c04 <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3bfc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3bfe:	05c9      	lsls	r1, r1, #23
    3c00:	0dc9      	lsrs	r1, r1, #23
    3c02:	e001      	b.n	3c08 <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c04:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c06:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    3c08:	4642      	mov	r2, r8
    3c0a:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3c0c:	4809      	ldr	r0, [pc, #36]	; (3c34 <trx_aes_wrrd+0x22c>)
    3c0e:	490a      	ldr	r1, [pc, #40]	; (3c38 <trx_aes_wrrd+0x230>)
    3c10:	2200      	movs	r2, #0
    3c12:	4b0a      	ldr	r3, [pc, #40]	; (3c3c <trx_aes_wrrd+0x234>)
    3c14:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    3c16:	2000      	movs	r0, #0
    3c18:	2100      	movs	r1, #0
    3c1a:	4b0a      	ldr	r3, [pc, #40]	; (3c44 <trx_aes_wrrd+0x23c>)
    3c1c:	4798      	blx	r3
}
    3c1e:	b003      	add	sp, #12
    3c20:	bc3c      	pop	{r2, r3, r4, r5}
    3c22:	4690      	mov	r8, r2
    3c24:	4699      	mov	r9, r3
    3c26:	46a2      	mov	sl, r4
    3c28:	46ab      	mov	fp, r5
    3c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c2c:	0000176d 	.word	0x0000176d
    3c30:	000016a5 	.word	0x000016a5
    3c34:	200008d0 	.word	0x200008d0
    3c38:	20000894 	.word	0x20000894
    3c3c:	000008ed 	.word	0x000008ed
    3c40:	2000088c 	.word	0x2000088c
    3c44:	00001685 	.word	0x00001685

00003c48 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3c48:	4b0c      	ldr	r3, [pc, #48]	; (3c7c <cpu_irq_enter_critical+0x34>)
    3c4a:	681b      	ldr	r3, [r3, #0]
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d110      	bne.n	3c72 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c50:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3c54:	2b00      	cmp	r3, #0
    3c56:	d109      	bne.n	3c6c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3c58:	b672      	cpsid	i
    3c5a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3c5e:	2200      	movs	r2, #0
    3c60:	4b07      	ldr	r3, [pc, #28]	; (3c80 <cpu_irq_enter_critical+0x38>)
    3c62:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3c64:	2201      	movs	r2, #1
    3c66:	4b07      	ldr	r3, [pc, #28]	; (3c84 <cpu_irq_enter_critical+0x3c>)
    3c68:	701a      	strb	r2, [r3, #0]
    3c6a:	e002      	b.n	3c72 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3c6c:	2200      	movs	r2, #0
    3c6e:	4b05      	ldr	r3, [pc, #20]	; (3c84 <cpu_irq_enter_critical+0x3c>)
    3c70:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3c72:	4b02      	ldr	r3, [pc, #8]	; (3c7c <cpu_irq_enter_critical+0x34>)
    3c74:	681a      	ldr	r2, [r3, #0]
    3c76:	3201      	adds	r2, #1
    3c78:	601a      	str	r2, [r3, #0]
}
    3c7a:	4770      	bx	lr
    3c7c:	200006e4 	.word	0x200006e4
    3c80:	20000009 	.word	0x20000009
    3c84:	200006e8 	.word	0x200006e8

00003c88 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3c88:	4b08      	ldr	r3, [pc, #32]	; (3cac <cpu_irq_leave_critical+0x24>)
    3c8a:	681a      	ldr	r2, [r3, #0]
    3c8c:	3a01      	subs	r2, #1
    3c8e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	2b00      	cmp	r3, #0
    3c94:	d109      	bne.n	3caa <cpu_irq_leave_critical+0x22>
    3c96:	4b06      	ldr	r3, [pc, #24]	; (3cb0 <cpu_irq_leave_critical+0x28>)
    3c98:	781b      	ldrb	r3, [r3, #0]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d005      	beq.n	3caa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3c9e:	2201      	movs	r2, #1
    3ca0:	4b04      	ldr	r3, [pc, #16]	; (3cb4 <cpu_irq_leave_critical+0x2c>)
    3ca2:	701a      	strb	r2, [r3, #0]
    3ca4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3ca8:	b662      	cpsie	i
	}
}
    3caa:	4770      	bx	lr
    3cac:	200006e4 	.word	0x200006e4
    3cb0:	200006e8 	.word	0x200006e8
    3cb4:	20000009 	.word	0x20000009

00003cb8 <system_board_init>:




void system_board_init(void)
{
    3cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cba:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3cbc:	ac01      	add	r4, sp, #4
    3cbe:	2501      	movs	r5, #1
    3cc0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3cc2:	2700      	movs	r7, #0
    3cc4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3cc6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3cc8:	2013      	movs	r0, #19
    3cca:	1c21      	adds	r1, r4, #0
    3ccc:	4e06      	ldr	r6, [pc, #24]	; (3ce8 <system_board_init+0x30>)
    3cce:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3cd0:	2280      	movs	r2, #128	; 0x80
    3cd2:	0312      	lsls	r2, r2, #12
    3cd4:	4b05      	ldr	r3, [pc, #20]	; (3cec <system_board_init+0x34>)
    3cd6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3cd8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3cda:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3cdc:	201c      	movs	r0, #28
    3cde:	1c21      	adds	r1, r4, #0
    3ce0:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    3ce2:	b003      	add	sp, #12
    3ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	00003cf1 	.word	0x00003cf1
    3cec:	41004400 	.word	0x41004400

00003cf0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3cf0:	b500      	push	{lr}
    3cf2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3cf4:	ab01      	add	r3, sp, #4
    3cf6:	2280      	movs	r2, #128	; 0x80
    3cf8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3cfa:	780a      	ldrb	r2, [r1, #0]
    3cfc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3cfe:	784a      	ldrb	r2, [r1, #1]
    3d00:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3d02:	788a      	ldrb	r2, [r1, #2]
    3d04:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3d06:	1c19      	adds	r1, r3, #0
    3d08:	4b01      	ldr	r3, [pc, #4]	; (3d10 <port_pin_set_config+0x20>)
    3d0a:	4798      	blx	r3
}
    3d0c:	b003      	add	sp, #12
    3d0e:	bd00      	pop	{pc}
    3d10:	00004225 	.word	0x00004225

00003d14 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3d14:	b508      	push	{r3, lr}
	switch (clock_source) {
    3d16:	2808      	cmp	r0, #8
    3d18:	d834      	bhi.n	3d84 <system_clock_source_get_hz+0x70>
    3d1a:	0080      	lsls	r0, r0, #2
    3d1c:	4b1b      	ldr	r3, [pc, #108]	; (3d8c <system_clock_source_get_hz+0x78>)
    3d1e:	581b      	ldr	r3, [r3, r0]
    3d20:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3d22:	2080      	movs	r0, #128	; 0x80
    3d24:	0200      	lsls	r0, r0, #8
    3d26:	e030      	b.n	3d8a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3d28:	4b19      	ldr	r3, [pc, #100]	; (3d90 <system_clock_source_get_hz+0x7c>)
    3d2a:	6918      	ldr	r0, [r3, #16]
    3d2c:	e02d      	b.n	3d8a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3d2e:	4b19      	ldr	r3, [pc, #100]	; (3d94 <system_clock_source_get_hz+0x80>)
    3d30:	6a18      	ldr	r0, [r3, #32]
    3d32:	0580      	lsls	r0, r0, #22
    3d34:	0f80      	lsrs	r0, r0, #30
    3d36:	4b18      	ldr	r3, [pc, #96]	; (3d98 <system_clock_source_get_hz+0x84>)
    3d38:	40c3      	lsrs	r3, r0
    3d3a:	1c18      	adds	r0, r3, #0
    3d3c:	e025      	b.n	3d8a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3d3e:	4b14      	ldr	r3, [pc, #80]	; (3d90 <system_clock_source_get_hz+0x7c>)
    3d40:	6958      	ldr	r0, [r3, #20]
    3d42:	e022      	b.n	3d8a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3d44:	4b12      	ldr	r3, [pc, #72]	; (3d90 <system_clock_source_get_hz+0x7c>)
    3d46:	681b      	ldr	r3, [r3, #0]
    3d48:	2002      	movs	r0, #2
    3d4a:	4018      	ands	r0, r3
    3d4c:	d01d      	beq.n	3d8a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3d4e:	4911      	ldr	r1, [pc, #68]	; (3d94 <system_clock_source_get_hz+0x80>)
    3d50:	2210      	movs	r2, #16
    3d52:	68cb      	ldr	r3, [r1, #12]
    3d54:	421a      	tst	r2, r3
    3d56:	d0fc      	beq.n	3d52 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3d58:	4b0d      	ldr	r3, [pc, #52]	; (3d90 <system_clock_source_get_hz+0x7c>)
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	075a      	lsls	r2, r3, #29
    3d5e:	d513      	bpl.n	3d88 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3d60:	2000      	movs	r0, #0
    3d62:	4b0e      	ldr	r3, [pc, #56]	; (3d9c <system_clock_source_get_hz+0x88>)
    3d64:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3d66:	4b0a      	ldr	r3, [pc, #40]	; (3d90 <system_clock_source_get_hz+0x7c>)
    3d68:	689b      	ldr	r3, [r3, #8]
    3d6a:	041b      	lsls	r3, r3, #16
    3d6c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3d6e:	4358      	muls	r0, r3
    3d70:	e00b      	b.n	3d8a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3d72:	2350      	movs	r3, #80	; 0x50
    3d74:	4a07      	ldr	r2, [pc, #28]	; (3d94 <system_clock_source_get_hz+0x80>)
    3d76:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3d78:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3d7a:	075a      	lsls	r2, r3, #29
    3d7c:	d505      	bpl.n	3d8a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    3d7e:	4b04      	ldr	r3, [pc, #16]	; (3d90 <system_clock_source_get_hz+0x7c>)
    3d80:	68d8      	ldr	r0, [r3, #12]
    3d82:	e002      	b.n	3d8a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    3d84:	2000      	movs	r0, #0
    3d86:	e000      	b.n	3d8a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3d88:	4805      	ldr	r0, [pc, #20]	; (3da0 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    3d8a:	bd08      	pop	{r3, pc}
    3d8c:	0000586c 	.word	0x0000586c
    3d90:	200006ec 	.word	0x200006ec
    3d94:	40000800 	.word	0x40000800
    3d98:	007a1200 	.word	0x007a1200
    3d9c:	00004165 	.word	0x00004165
    3da0:	02dc6c00 	.word	0x02dc6c00

00003da4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3da4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3da6:	4b0c      	ldr	r3, [pc, #48]	; (3dd8 <system_clock_source_osc8m_set_config+0x34>)
    3da8:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3daa:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3dac:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3dae:	7840      	ldrb	r0, [r0, #1]
    3db0:	2201      	movs	r2, #1
    3db2:	4010      	ands	r0, r2
    3db4:	0180      	lsls	r0, r0, #6
    3db6:	2640      	movs	r6, #64	; 0x40
    3db8:	43b4      	bics	r4, r6
    3dba:	4304      	orrs	r4, r0
    3dbc:	402a      	ands	r2, r5
    3dbe:	01d0      	lsls	r0, r2, #7
    3dc0:	2280      	movs	r2, #128	; 0x80
    3dc2:	4394      	bics	r4, r2
    3dc4:	1c22      	adds	r2, r4, #0
    3dc6:	4302      	orrs	r2, r0
    3dc8:	2003      	movs	r0, #3
    3dca:	4001      	ands	r1, r0
    3dcc:	0209      	lsls	r1, r1, #8
    3dce:	4803      	ldr	r0, [pc, #12]	; (3ddc <system_clock_source_osc8m_set_config+0x38>)
    3dd0:	4002      	ands	r2, r0
    3dd2:	430a      	orrs	r2, r1
    3dd4:	621a      	str	r2, [r3, #32]
}
    3dd6:	bd70      	pop	{r4, r5, r6, pc}
    3dd8:	40000800 	.word	0x40000800
    3ddc:	fffffcff 	.word	0xfffffcff

00003de0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3de0:	2808      	cmp	r0, #8
    3de2:	d843      	bhi.n	3e6c <system_clock_source_enable+0x8c>
    3de4:	0080      	lsls	r0, r0, #2
    3de6:	4b22      	ldr	r3, [pc, #136]	; (3e70 <system_clock_source_enable+0x90>)
    3de8:	581b      	ldr	r3, [r3, r0]
    3dea:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3dec:	2000      	movs	r0, #0
    3dee:	e03e      	b.n	3e6e <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3df0:	4b20      	ldr	r3, [pc, #128]	; (3e74 <system_clock_source_enable+0x94>)
    3df2:	6a19      	ldr	r1, [r3, #32]
    3df4:	2202      	movs	r2, #2
    3df6:	430a      	orrs	r2, r1
    3df8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3dfa:	2000      	movs	r0, #0
    3dfc:	e037      	b.n	3e6e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3dfe:	4b1d      	ldr	r3, [pc, #116]	; (3e74 <system_clock_source_enable+0x94>)
    3e00:	6999      	ldr	r1, [r3, #24]
    3e02:	2202      	movs	r2, #2
    3e04:	430a      	orrs	r2, r1
    3e06:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3e08:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    3e0a:	e030      	b.n	3e6e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3e0c:	4b19      	ldr	r3, [pc, #100]	; (3e74 <system_clock_source_enable+0x94>)
    3e0e:	8a19      	ldrh	r1, [r3, #16]
    3e10:	2202      	movs	r2, #2
    3e12:	430a      	orrs	r2, r1
    3e14:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3e16:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    3e18:	e029      	b.n	3e6e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3e1a:	4b16      	ldr	r3, [pc, #88]	; (3e74 <system_clock_source_enable+0x94>)
    3e1c:	8a99      	ldrh	r1, [r3, #20]
    3e1e:	2202      	movs	r2, #2
    3e20:	430a      	orrs	r2, r1
    3e22:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3e24:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    3e26:	e022      	b.n	3e6e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3e28:	4b13      	ldr	r3, [pc, #76]	; (3e78 <system_clock_source_enable+0x98>)
    3e2a:	6819      	ldr	r1, [r3, #0]
    3e2c:	2202      	movs	r2, #2
    3e2e:	430a      	orrs	r2, r1
    3e30:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    3e32:	681a      	ldr	r2, [r3, #0]
    3e34:	4b11      	ldr	r3, [pc, #68]	; (3e7c <system_clock_source_enable+0x9c>)
    3e36:	401a      	ands	r2, r3
    3e38:	4b0e      	ldr	r3, [pc, #56]	; (3e74 <system_clock_source_enable+0x94>)
    3e3a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3e3c:	1c19      	adds	r1, r3, #0
    3e3e:	2210      	movs	r2, #16
    3e40:	68cb      	ldr	r3, [r1, #12]
    3e42:	421a      	tst	r2, r3
    3e44:	d0fc      	beq.n	3e40 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3e46:	4a0c      	ldr	r2, [pc, #48]	; (3e78 <system_clock_source_enable+0x98>)
    3e48:	6891      	ldr	r1, [r2, #8]
    3e4a:	4b0a      	ldr	r3, [pc, #40]	; (3e74 <system_clock_source_enable+0x94>)
    3e4c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3e4e:	6851      	ldr	r1, [r2, #4]
    3e50:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3e52:	6812      	ldr	r2, [r2, #0]
    3e54:	b292      	uxth	r2, r2
    3e56:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3e58:	2000      	movs	r0, #0
    3e5a:	e008      	b.n	3e6e <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3e5c:	4a05      	ldr	r2, [pc, #20]	; (3e74 <system_clock_source_enable+0x94>)
    3e5e:	2344      	movs	r3, #68	; 0x44
    3e60:	5cd0      	ldrb	r0, [r2, r3]
    3e62:	2102      	movs	r1, #2
    3e64:	4301      	orrs	r1, r0
    3e66:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3e68:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    3e6a:	e000      	b.n	3e6e <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3e6c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    3e6e:	4770      	bx	lr
    3e70:	00005890 	.word	0x00005890
    3e74:	40000800 	.word	0x40000800
    3e78:	200006ec 	.word	0x200006ec
    3e7c:	0000ff7f 	.word	0x0000ff7f

00003e80 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3e80:	b530      	push	{r4, r5, lr}
    3e82:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3e84:	22c2      	movs	r2, #194	; 0xc2
    3e86:	00d2      	lsls	r2, r2, #3
    3e88:	4b19      	ldr	r3, [pc, #100]	; (3ef0 <system_clock_init+0x70>)
    3e8a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3e8c:	4b19      	ldr	r3, [pc, #100]	; (3ef4 <system_clock_init+0x74>)
    3e8e:	685a      	ldr	r2, [r3, #4]
    3e90:	211e      	movs	r1, #30
    3e92:	438a      	bics	r2, r1
    3e94:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3e96:	2301      	movs	r3, #1
    3e98:	466a      	mov	r2, sp
    3e9a:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3e9c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3e9e:	4d16      	ldr	r5, [pc, #88]	; (3ef8 <system_clock_init+0x78>)
    3ea0:	b2e0      	uxtb	r0, r4
    3ea2:	4669      	mov	r1, sp
    3ea4:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3ea6:	3401      	adds	r4, #1
    3ea8:	2c25      	cmp	r4, #37	; 0x25
    3eaa:	d1f9      	bne.n	3ea0 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    3eac:	a803      	add	r0, sp, #12
    3eae:	2400      	movs	r4, #0
    3eb0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    3eb2:	2501      	movs	r5, #1
    3eb4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3eb6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3eb8:	4b10      	ldr	r3, [pc, #64]	; (3efc <system_clock_init+0x7c>)
    3eba:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3ebc:	2006      	movs	r0, #6
    3ebe:	4b10      	ldr	r3, [pc, #64]	; (3f00 <system_clock_init+0x80>)
    3ec0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3ec2:	4b10      	ldr	r3, [pc, #64]	; (3f04 <system_clock_init+0x84>)
    3ec4:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    3ec6:	4b10      	ldr	r3, [pc, #64]	; (3f08 <system_clock_init+0x88>)
    3ec8:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    3eca:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    3ecc:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3ece:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    3ed0:	466b      	mov	r3, sp
    3ed2:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3ed4:	2306      	movs	r3, #6
    3ed6:	466a      	mov	r2, sp
    3ed8:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    3eda:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    3edc:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3ede:	2000      	movs	r0, #0
    3ee0:	4669      	mov	r1, sp
    3ee2:	4b0a      	ldr	r3, [pc, #40]	; (3f0c <system_clock_init+0x8c>)
    3ee4:	4798      	blx	r3
    3ee6:	2000      	movs	r0, #0
    3ee8:	4b09      	ldr	r3, [pc, #36]	; (3f10 <system_clock_init+0x90>)
    3eea:	4798      	blx	r3
#endif
}
    3eec:	b005      	add	sp, #20
    3eee:	bd30      	pop	{r4, r5, pc}
    3ef0:	40000800 	.word	0x40000800
    3ef4:	41004000 	.word	0x41004000
    3ef8:	00004149 	.word	0x00004149
    3efc:	00003da5 	.word	0x00003da5
    3f00:	00003de1 	.word	0x00003de1
    3f04:	00003f15 	.word	0x00003f15
    3f08:	40000400 	.word	0x40000400
    3f0c:	00003f39 	.word	0x00003f39
    3f10:	00003fed 	.word	0x00003fed

00003f14 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3f14:	4b06      	ldr	r3, [pc, #24]	; (3f30 <system_gclk_init+0x1c>)
    3f16:	6999      	ldr	r1, [r3, #24]
    3f18:	2208      	movs	r2, #8
    3f1a:	430a      	orrs	r2, r1
    3f1c:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3f1e:	2201      	movs	r2, #1
    3f20:	4b04      	ldr	r3, [pc, #16]	; (3f34 <system_gclk_init+0x20>)
    3f22:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3f24:	1c19      	adds	r1, r3, #0
    3f26:	780b      	ldrb	r3, [r1, #0]
    3f28:	4213      	tst	r3, r2
    3f2a:	d1fc      	bne.n	3f26 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3f2c:	4770      	bx	lr
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	40000400 	.word	0x40000400
    3f34:	40000c00 	.word	0x40000c00

00003f38 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f3a:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3f3c:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3f3e:	780d      	ldrb	r5, [r1, #0]
    3f40:	022d      	lsls	r5, r5, #8
    3f42:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3f44:	784b      	ldrb	r3, [r1, #1]
    3f46:	2b00      	cmp	r3, #0
    3f48:	d002      	beq.n	3f50 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3f4a:	2380      	movs	r3, #128	; 0x80
    3f4c:	02db      	lsls	r3, r3, #11
    3f4e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3f50:	7a4b      	ldrb	r3, [r1, #9]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d002      	beq.n	3f5c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3f56:	2380      	movs	r3, #128	; 0x80
    3f58:	031b      	lsls	r3, r3, #12
    3f5a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3f5c:	684c      	ldr	r4, [r1, #4]
    3f5e:	2c01      	cmp	r4, #1
    3f60:	d917      	bls.n	3f92 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3f62:	1e63      	subs	r3, r4, #1
    3f64:	421c      	tst	r4, r3
    3f66:	d10f      	bne.n	3f88 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3f68:	2c02      	cmp	r4, #2
    3f6a:	d906      	bls.n	3f7a <system_gclk_gen_set_config+0x42>
    3f6c:	2302      	movs	r3, #2
    3f6e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3f70:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3f72:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3f74:	429c      	cmp	r4, r3
    3f76:	d8fb      	bhi.n	3f70 <system_gclk_gen_set_config+0x38>
    3f78:	e000      	b.n	3f7c <system_gclk_gen_set_config+0x44>
    3f7a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3f7c:	0217      	lsls	r7, r2, #8
    3f7e:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3f80:	2380      	movs	r3, #128	; 0x80
    3f82:	035b      	lsls	r3, r3, #13
    3f84:	431d      	orrs	r5, r3
    3f86:	e004      	b.n	3f92 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3f88:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    3f8a:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3f8c:	2380      	movs	r3, #128	; 0x80
    3f8e:	029b      	lsls	r3, r3, #10
    3f90:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3f92:	7a0b      	ldrb	r3, [r1, #8]
    3f94:	2b00      	cmp	r3, #0
    3f96:	d002      	beq.n	3f9e <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3f98:	2380      	movs	r3, #128	; 0x80
    3f9a:	039b      	lsls	r3, r3, #14
    3f9c:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3f9e:	4a0f      	ldr	r2, [pc, #60]	; (3fdc <system_gclk_gen_set_config+0xa4>)
    3fa0:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    3fa2:	b25b      	sxtb	r3, r3
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	dbfb      	blt.n	3fa0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3fa8:	4b0d      	ldr	r3, [pc, #52]	; (3fe0 <system_gclk_gen_set_config+0xa8>)
    3faa:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3fac:	4b0d      	ldr	r3, [pc, #52]	; (3fe4 <system_gclk_gen_set_config+0xac>)
    3fae:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3fb0:	4a0a      	ldr	r2, [pc, #40]	; (3fdc <system_gclk_gen_set_config+0xa4>)
    3fb2:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3fb4:	b25b      	sxtb	r3, r3
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	dbfb      	blt.n	3fb2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3fba:	4b08      	ldr	r3, [pc, #32]	; (3fdc <system_gclk_gen_set_config+0xa4>)
    3fbc:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3fbe:	1c1a      	adds	r2, r3, #0
    3fc0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    3fc2:	b25b      	sxtb	r3, r3
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	dbfb      	blt.n	3fc0 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3fc8:	4b04      	ldr	r3, [pc, #16]	; (3fdc <system_gclk_gen_set_config+0xa4>)
    3fca:	6859      	ldr	r1, [r3, #4]
    3fcc:	2280      	movs	r2, #128	; 0x80
    3fce:	0252      	lsls	r2, r2, #9
    3fd0:	400a      	ands	r2, r1
    3fd2:	4315      	orrs	r5, r2
    3fd4:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3fd6:	4b04      	ldr	r3, [pc, #16]	; (3fe8 <system_gclk_gen_set_config+0xb0>)
    3fd8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fdc:	40000c00 	.word	0x40000c00
    3fe0:	00003c49 	.word	0x00003c49
    3fe4:	40000c08 	.word	0x40000c08
    3fe8:	00003c89 	.word	0x00003c89

00003fec <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3fec:	b510      	push	{r4, lr}
    3fee:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ff0:	4a0b      	ldr	r2, [pc, #44]	; (4020 <system_gclk_gen_enable+0x34>)
    3ff2:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    3ff4:	b25b      	sxtb	r3, r3
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	dbfb      	blt.n	3ff2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3ffa:	4b0a      	ldr	r3, [pc, #40]	; (4024 <system_gclk_gen_enable+0x38>)
    3ffc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3ffe:	4b0a      	ldr	r3, [pc, #40]	; (4028 <system_gclk_gen_enable+0x3c>)
    4000:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4002:	4a07      	ldr	r2, [pc, #28]	; (4020 <system_gclk_gen_enable+0x34>)
    4004:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4006:	b25b      	sxtb	r3, r3
    4008:	2b00      	cmp	r3, #0
    400a:	dbfb      	blt.n	4004 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    400c:	4b04      	ldr	r3, [pc, #16]	; (4020 <system_gclk_gen_enable+0x34>)
    400e:	6859      	ldr	r1, [r3, #4]
    4010:	2280      	movs	r2, #128	; 0x80
    4012:	0252      	lsls	r2, r2, #9
    4014:	430a      	orrs	r2, r1
    4016:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4018:	4b04      	ldr	r3, [pc, #16]	; (402c <system_gclk_gen_enable+0x40>)
    401a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    401c:	bd10      	pop	{r4, pc}
    401e:	46c0      	nop			; (mov r8, r8)
    4020:	40000c00 	.word	0x40000c00
    4024:	00003c49 	.word	0x00003c49
    4028:	40000c04 	.word	0x40000c04
    402c:	00003c89 	.word	0x00003c89

00004030 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4030:	b570      	push	{r4, r5, r6, lr}
    4032:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4034:	4a1a      	ldr	r2, [pc, #104]	; (40a0 <system_gclk_gen_get_hz+0x70>)
    4036:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4038:	b25b      	sxtb	r3, r3
    403a:	2b00      	cmp	r3, #0
    403c:	dbfb      	blt.n	4036 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    403e:	4b19      	ldr	r3, [pc, #100]	; (40a4 <system_gclk_gen_get_hz+0x74>)
    4040:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4042:	4b19      	ldr	r3, [pc, #100]	; (40a8 <system_gclk_gen_get_hz+0x78>)
    4044:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4046:	4a16      	ldr	r2, [pc, #88]	; (40a0 <system_gclk_gen_get_hz+0x70>)
    4048:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    404a:	b25b      	sxtb	r3, r3
    404c:	2b00      	cmp	r3, #0
    404e:	dbfb      	blt.n	4048 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4050:	4e13      	ldr	r6, [pc, #76]	; (40a0 <system_gclk_gen_get_hz+0x70>)
    4052:	6870      	ldr	r0, [r6, #4]
    4054:	04c0      	lsls	r0, r0, #19
    4056:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4058:	4b14      	ldr	r3, [pc, #80]	; (40ac <system_gclk_gen_get_hz+0x7c>)
    405a:	4798      	blx	r3
    405c:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    405e:	4b12      	ldr	r3, [pc, #72]	; (40a8 <system_gclk_gen_get_hz+0x78>)
    4060:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4062:	6876      	ldr	r6, [r6, #4]
    4064:	02f6      	lsls	r6, r6, #11
    4066:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4068:	4b11      	ldr	r3, [pc, #68]	; (40b0 <system_gclk_gen_get_hz+0x80>)
    406a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    406c:	4a0c      	ldr	r2, [pc, #48]	; (40a0 <system_gclk_gen_get_hz+0x70>)
    406e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    4070:	b25b      	sxtb	r3, r3
    4072:	2b00      	cmp	r3, #0
    4074:	dbfb      	blt.n	406e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4076:	4b0a      	ldr	r3, [pc, #40]	; (40a0 <system_gclk_gen_get_hz+0x70>)
    4078:	689c      	ldr	r4, [r3, #8]
    407a:	0a24      	lsrs	r4, r4, #8
    407c:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    407e:	4b0d      	ldr	r3, [pc, #52]	; (40b4 <system_gclk_gen_get_hz+0x84>)
    4080:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4082:	2e00      	cmp	r6, #0
    4084:	d107      	bne.n	4096 <system_gclk_gen_get_hz+0x66>
    4086:	2c01      	cmp	r4, #1
    4088:	d907      	bls.n	409a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    408a:	1c28      	adds	r0, r5, #0
    408c:	1c21      	adds	r1, r4, #0
    408e:	4b0a      	ldr	r3, [pc, #40]	; (40b8 <system_gclk_gen_get_hz+0x88>)
    4090:	4798      	blx	r3
    4092:	1c05      	adds	r5, r0, #0
    4094:	e001      	b.n	409a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4096:	3401      	adds	r4, #1
    4098:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    409a:	1c28      	adds	r0, r5, #0
    409c:	bd70      	pop	{r4, r5, r6, pc}
    409e:	46c0      	nop			; (mov r8, r8)
    40a0:	40000c00 	.word	0x40000c00
    40a4:	00003c49 	.word	0x00003c49
    40a8:	40000c04 	.word	0x40000c04
    40ac:	00003d15 	.word	0x00003d15
    40b0:	40000c08 	.word	0x40000c08
    40b4:	00003c89 	.word	0x00003c89
    40b8:	00004715 	.word	0x00004715

000040bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    40bc:	b510      	push	{r4, lr}
    40be:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    40c0:	4b06      	ldr	r3, [pc, #24]	; (40dc <system_gclk_chan_enable+0x20>)
    40c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    40c4:	4b06      	ldr	r3, [pc, #24]	; (40e0 <system_gclk_chan_enable+0x24>)
    40c6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    40c8:	4b06      	ldr	r3, [pc, #24]	; (40e4 <system_gclk_chan_enable+0x28>)
    40ca:	8859      	ldrh	r1, [r3, #2]
    40cc:	2280      	movs	r2, #128	; 0x80
    40ce:	01d2      	lsls	r2, r2, #7
    40d0:	430a      	orrs	r2, r1
    40d2:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <system_gclk_chan_enable+0x2c>)
    40d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    40d8:	bd10      	pop	{r4, pc}
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	00003c49 	.word	0x00003c49
    40e0:	40000c02 	.word	0x40000c02
    40e4:	40000c00 	.word	0x40000c00
    40e8:	00003c89 	.word	0x00003c89

000040ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    40ec:	b510      	push	{r4, lr}
    40ee:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    40f0:	4b0f      	ldr	r3, [pc, #60]	; (4130 <system_gclk_chan_disable+0x44>)
    40f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    40f4:	4b0f      	ldr	r3, [pc, #60]	; (4134 <system_gclk_chan_disable+0x48>)
    40f6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    40f8:	4b0f      	ldr	r3, [pc, #60]	; (4138 <system_gclk_chan_disable+0x4c>)
    40fa:	8858      	ldrh	r0, [r3, #2]
    40fc:	0500      	lsls	r0, r0, #20
    40fe:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4100:	8859      	ldrh	r1, [r3, #2]
    4102:	4a0e      	ldr	r2, [pc, #56]	; (413c <system_gclk_chan_disable+0x50>)
    4104:	400a      	ands	r2, r1
    4106:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4108:	8859      	ldrh	r1, [r3, #2]
    410a:	4a0d      	ldr	r2, [pc, #52]	; (4140 <system_gclk_chan_disable+0x54>)
    410c:	400a      	ands	r2, r1
    410e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4110:	1c19      	adds	r1, r3, #0
    4112:	2280      	movs	r2, #128	; 0x80
    4114:	01d2      	lsls	r2, r2, #7
    4116:	884b      	ldrh	r3, [r1, #2]
    4118:	4213      	tst	r3, r2
    411a:	d1fc      	bne.n	4116 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    411c:	4b06      	ldr	r3, [pc, #24]	; (4138 <system_gclk_chan_disable+0x4c>)
    411e:	0201      	lsls	r1, r0, #8
    4120:	8858      	ldrh	r0, [r3, #2]
    4122:	4a06      	ldr	r2, [pc, #24]	; (413c <system_gclk_chan_disable+0x50>)
    4124:	4002      	ands	r2, r0
    4126:	430a      	orrs	r2, r1
    4128:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    412a:	4b06      	ldr	r3, [pc, #24]	; (4144 <system_gclk_chan_disable+0x58>)
    412c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    412e:	bd10      	pop	{r4, pc}
    4130:	00003c49 	.word	0x00003c49
    4134:	40000c02 	.word	0x40000c02
    4138:	40000c00 	.word	0x40000c00
    413c:	fffff0ff 	.word	0xfffff0ff
    4140:	ffffbfff 	.word	0xffffbfff
    4144:	00003c89 	.word	0x00003c89

00004148 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4148:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    414a:	780c      	ldrb	r4, [r1, #0]
    414c:	0224      	lsls	r4, r4, #8
    414e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4150:	4b02      	ldr	r3, [pc, #8]	; (415c <system_gclk_chan_set_config+0x14>)
    4152:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4154:	b2a4      	uxth	r4, r4
    4156:	4b02      	ldr	r3, [pc, #8]	; (4160 <system_gclk_chan_set_config+0x18>)
    4158:	805c      	strh	r4, [r3, #2]
}
    415a:	bd10      	pop	{r4, pc}
    415c:	000040ed 	.word	0x000040ed
    4160:	40000c00 	.word	0x40000c00

00004164 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4164:	b510      	push	{r4, lr}
    4166:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4168:	4b06      	ldr	r3, [pc, #24]	; (4184 <system_gclk_chan_get_hz+0x20>)
    416a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    416c:	4b06      	ldr	r3, [pc, #24]	; (4188 <system_gclk_chan_get_hz+0x24>)
    416e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4170:	4b06      	ldr	r3, [pc, #24]	; (418c <system_gclk_chan_get_hz+0x28>)
    4172:	885c      	ldrh	r4, [r3, #2]
    4174:	0524      	lsls	r4, r4, #20
    4176:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4178:	4b05      	ldr	r3, [pc, #20]	; (4190 <system_gclk_chan_get_hz+0x2c>)
    417a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    417c:	1c20      	adds	r0, r4, #0
    417e:	4b05      	ldr	r3, [pc, #20]	; (4194 <system_gclk_chan_get_hz+0x30>)
    4180:	4798      	blx	r3
}
    4182:	bd10      	pop	{r4, pc}
    4184:	00003c49 	.word	0x00003c49
    4188:	40000c02 	.word	0x40000c02
    418c:	40000c00 	.word	0x40000c00
    4190:	00003c89 	.word	0x00003c89
    4194:	00004031 	.word	0x00004031

00004198 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4198:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    419a:	78d3      	ldrb	r3, [r2, #3]
    419c:	2b00      	cmp	r3, #0
    419e:	d11e      	bne.n	41de <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    41a0:	7813      	ldrb	r3, [r2, #0]
    41a2:	2b80      	cmp	r3, #128	; 0x80
    41a4:	d004      	beq.n	41b0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    41a6:	061b      	lsls	r3, r3, #24
    41a8:	2480      	movs	r4, #128	; 0x80
    41aa:	0264      	lsls	r4, r4, #9
    41ac:	4323      	orrs	r3, r4
    41ae:	e000      	b.n	41b2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    41b0:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    41b2:	7854      	ldrb	r4, [r2, #1]
    41b4:	2502      	movs	r5, #2
    41b6:	43ac      	bics	r4, r5
    41b8:	d10a      	bne.n	41d0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    41ba:	7894      	ldrb	r4, [r2, #2]
    41bc:	2c00      	cmp	r4, #0
    41be:	d103      	bne.n	41c8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    41c0:	2480      	movs	r4, #128	; 0x80
    41c2:	02a4      	lsls	r4, r4, #10
    41c4:	4323      	orrs	r3, r4
    41c6:	e002      	b.n	41ce <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    41c8:	24c0      	movs	r4, #192	; 0xc0
    41ca:	02e4      	lsls	r4, r4, #11
    41cc:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    41ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    41d0:	7854      	ldrb	r4, [r2, #1]
    41d2:	3c01      	subs	r4, #1
    41d4:	2c01      	cmp	r4, #1
    41d6:	d804      	bhi.n	41e2 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    41d8:	4c11      	ldr	r4, [pc, #68]	; (4220 <_system_pinmux_config+0x88>)
    41da:	4023      	ands	r3, r4
    41dc:	e001      	b.n	41e2 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    41de:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    41e0:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    41e2:	040d      	lsls	r5, r1, #16
    41e4:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    41e6:	24a0      	movs	r4, #160	; 0xa0
    41e8:	05e4      	lsls	r4, r4, #23
    41ea:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    41ec:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    41ee:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    41f0:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    41f2:	24d0      	movs	r4, #208	; 0xd0
    41f4:	0624      	lsls	r4, r4, #24
    41f6:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    41f8:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    41fa:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    41fc:	78d4      	ldrb	r4, [r2, #3]
    41fe:	2c00      	cmp	r4, #0
    4200:	d10c      	bne.n	421c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4202:	035c      	lsls	r4, r3, #13
    4204:	d505      	bpl.n	4212 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4206:	7893      	ldrb	r3, [r2, #2]
    4208:	2b01      	cmp	r3, #1
    420a:	d101      	bne.n	4210 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    420c:	6181      	str	r1, [r0, #24]
    420e:	e000      	b.n	4212 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    4210:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4212:	7853      	ldrb	r3, [r2, #1]
    4214:	3b01      	subs	r3, #1
    4216:	2b01      	cmp	r3, #1
    4218:	d800      	bhi.n	421c <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    421a:	6081      	str	r1, [r0, #8]
		}
	}
}
    421c:	bd30      	pop	{r4, r5, pc}
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	fffbffff 	.word	0xfffbffff

00004224 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4224:	b508      	push	{r3, lr}
    4226:	1c03      	adds	r3, r0, #0
    4228:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    422a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    422c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    422e:	2900      	cmp	r1, #0
    4230:	d103      	bne.n	423a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4232:	0958      	lsrs	r0, r3, #5
    4234:	01c0      	lsls	r0, r0, #7
    4236:	4904      	ldr	r1, [pc, #16]	; (4248 <system_pinmux_pin_set_config+0x24>)
    4238:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    423a:	211f      	movs	r1, #31
    423c:	400b      	ands	r3, r1
    423e:	2101      	movs	r1, #1
    4240:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    4242:	4b02      	ldr	r3, [pc, #8]	; (424c <system_pinmux_pin_set_config+0x28>)
    4244:	4798      	blx	r3
}
    4246:	bd08      	pop	{r3, pc}
    4248:	41004400 	.word	0x41004400
    424c:	00004199 	.word	0x00004199

00004250 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4250:	4770      	bx	lr
    4252:	46c0      	nop			; (mov r8, r8)

00004254 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4254:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4256:	4b04      	ldr	r3, [pc, #16]	; (4268 <system_init+0x14>)
    4258:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    425a:	4b04      	ldr	r3, [pc, #16]	; (426c <system_init+0x18>)
    425c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    425e:	4b04      	ldr	r3, [pc, #16]	; (4270 <system_init+0x1c>)
    4260:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4262:	4b04      	ldr	r3, [pc, #16]	; (4274 <system_init+0x20>)
    4264:	4798      	blx	r3
}
    4266:	bd08      	pop	{r3, pc}
    4268:	00003e81 	.word	0x00003e81
    426c:	00003cb9 	.word	0x00003cb9
    4270:	00004251 	.word	0x00004251
    4274:	000001ed 	.word	0x000001ed

00004278 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4278:	e7fe      	b.n	4278 <Dummy_Handler>
    427a:	46c0      	nop			; (mov r8, r8)

0000427c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    427c:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    427e:	4b1c      	ldr	r3, [pc, #112]	; (42f0 <Reset_Handler+0x74>)
    4280:	4a1c      	ldr	r2, [pc, #112]	; (42f4 <Reset_Handler+0x78>)
    4282:	429a      	cmp	r2, r3
    4284:	d003      	beq.n	428e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    4286:	4b1c      	ldr	r3, [pc, #112]	; (42f8 <Reset_Handler+0x7c>)
    4288:	4a19      	ldr	r2, [pc, #100]	; (42f0 <Reset_Handler+0x74>)
    428a:	429a      	cmp	r2, r3
    428c:	d304      	bcc.n	4298 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    428e:	4b1b      	ldr	r3, [pc, #108]	; (42fc <Reset_Handler+0x80>)
    4290:	4a1b      	ldr	r2, [pc, #108]	; (4300 <Reset_Handler+0x84>)
    4292:	429a      	cmp	r2, r3
    4294:	d310      	bcc.n	42b8 <Reset_Handler+0x3c>
    4296:	e01b      	b.n	42d0 <Reset_Handler+0x54>
    4298:	4b1a      	ldr	r3, [pc, #104]	; (4304 <Reset_Handler+0x88>)
    429a:	4817      	ldr	r0, [pc, #92]	; (42f8 <Reset_Handler+0x7c>)
    429c:	3003      	adds	r0, #3
    429e:	1ac0      	subs	r0, r0, r3
    42a0:	0880      	lsrs	r0, r0, #2
    42a2:	3001      	adds	r0, #1
    42a4:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    42a6:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    42a8:	4911      	ldr	r1, [pc, #68]	; (42f0 <Reset_Handler+0x74>)
    42aa:	4a12      	ldr	r2, [pc, #72]	; (42f4 <Reset_Handler+0x78>)
    42ac:	58d4      	ldr	r4, [r2, r3]
    42ae:	50cc      	str	r4, [r1, r3]
    42b0:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    42b2:	4283      	cmp	r3, r0
    42b4:	d1fa      	bne.n	42ac <Reset_Handler+0x30>
    42b6:	e7ea      	b.n	428e <Reset_Handler+0x12>
    42b8:	4b11      	ldr	r3, [pc, #68]	; (4300 <Reset_Handler+0x84>)
    42ba:	1d1a      	adds	r2, r3, #4
    42bc:	490f      	ldr	r1, [pc, #60]	; (42fc <Reset_Handler+0x80>)
    42be:	3103      	adds	r1, #3
    42c0:	1a89      	subs	r1, r1, r2
    42c2:	0889      	lsrs	r1, r1, #2
    42c4:	0089      	lsls	r1, r1, #2
    42c6:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    42c8:	2100      	movs	r1, #0
    42ca:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    42cc:	4293      	cmp	r3, r2
    42ce:	d1fc      	bne.n	42ca <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    42d0:	4b0d      	ldr	r3, [pc, #52]	; (4308 <Reset_Handler+0x8c>)
    42d2:	217f      	movs	r1, #127	; 0x7f
    42d4:	4a0d      	ldr	r2, [pc, #52]	; (430c <Reset_Handler+0x90>)
    42d6:	438a      	bics	r2, r1
    42d8:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    42da:	4b0d      	ldr	r3, [pc, #52]	; (4310 <Reset_Handler+0x94>)
    42dc:	6859      	ldr	r1, [r3, #4]
    42de:	2280      	movs	r2, #128	; 0x80
    42e0:	430a      	orrs	r2, r1
    42e2:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    42e4:	4b0b      	ldr	r3, [pc, #44]	; (4314 <Reset_Handler+0x98>)
    42e6:	4798      	blx	r3

        /* Branch to main function */
        main();
    42e8:	4b0b      	ldr	r3, [pc, #44]	; (4318 <Reset_Handler+0x9c>)
    42ea:	4798      	blx	r3
    42ec:	e7fe      	b.n	42ec <Reset_Handler+0x70>
    42ee:	46c0      	nop			; (mov r8, r8)
    42f0:	20000000 	.word	0x20000000
    42f4:	000059a0 	.word	0x000059a0
    42f8:	20000078 	.word	0x20000078
    42fc:	20000bb4 	.word	0x20000bb4
    4300:	20000078 	.word	0x20000078
    4304:	20000004 	.word	0x20000004
    4308:	e000ed00 	.word	0xe000ed00
    430c:	00000000 	.word	0x00000000
    4310:	41004000 	.word	0x41004000
    4314:	000047f9 	.word	0x000047f9
    4318:	00004459 	.word	0x00004459

0000431c <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    431c:	4b06      	ldr	r3, [pc, #24]	; (4338 <_sbrk+0x1c>)
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	2b00      	cmp	r3, #0
    4322:	d102      	bne.n	432a <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    4324:	4a05      	ldr	r2, [pc, #20]	; (433c <_sbrk+0x20>)
    4326:	4b04      	ldr	r3, [pc, #16]	; (4338 <_sbrk+0x1c>)
    4328:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    432a:	4a03      	ldr	r2, [pc, #12]	; (4338 <_sbrk+0x1c>)
    432c:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    432e:	1818      	adds	r0, r3, r0
    4330:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    4332:	1c18      	adds	r0, r3, #0
    4334:	4770      	bx	lr
    4336:	46c0      	nop			; (mov r8, r8)
    4338:	20000704 	.word	0x20000704
    433c:	20002bb8 	.word	0x20002bb8

00004340 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    4340:	2001      	movs	r0, #1
}
    4342:	4240      	negs	r0, r0
    4344:	4770      	bx	lr
    4346:	46c0      	nop			; (mov r8, r8)

00004348 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4348:	2380      	movs	r3, #128	; 0x80
    434a:	019b      	lsls	r3, r3, #6
    434c:	604b      	str	r3, [r1, #4]

	return 0;
}
    434e:	2000      	movs	r0, #0
    4350:	4770      	bx	lr
    4352:	46c0      	nop			; (mov r8, r8)

00004354 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    4354:	2001      	movs	r0, #1
    4356:	4770      	bx	lr

00004358 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4358:	2000      	movs	r0, #0
    435a:	4770      	bx	lr

0000435c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    435c:	b570      	push	{r4, r5, r6, lr}
    435e:	b082      	sub	sp, #8
    4360:	1c05      	adds	r5, r0, #0
    4362:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    4364:	2200      	movs	r2, #0
    4366:	466b      	mov	r3, sp
    4368:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    436a:	4c06      	ldr	r4, [pc, #24]	; (4384 <usart_serial_getchar+0x28>)
    436c:	1c28      	adds	r0, r5, #0
    436e:	4669      	mov	r1, sp
    4370:	3106      	adds	r1, #6
    4372:	47a0      	blx	r4
    4374:	2800      	cmp	r0, #0
    4376:	d1f9      	bne.n	436c <usart_serial_getchar+0x10>

	*c = temp;
    4378:	466b      	mov	r3, sp
    437a:	3306      	adds	r3, #6
    437c:	881b      	ldrh	r3, [r3, #0]
    437e:	7033      	strb	r3, [r6, #0]
}
    4380:	b002      	add	sp, #8
    4382:	bd70      	pop	{r4, r5, r6, pc}
    4384:	00001375 	.word	0x00001375

00004388 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4388:	b570      	push	{r4, r5, r6, lr}
    438a:	1c06      	adds	r6, r0, #0
    438c:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    438e:	4c03      	ldr	r4, [pc, #12]	; (439c <usart_serial_putchar+0x14>)
    4390:	1c30      	adds	r0, r6, #0
    4392:	1c29      	adds	r1, r5, #0
    4394:	47a0      	blx	r4
    4396:	2800      	cmp	r0, #0
    4398:	d1fa      	bne.n	4390 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    439a:	bd70      	pop	{r4, r5, r6, pc}
    439c:	00001349 	.word	0x00001349

000043a0 <extint_callback>:

/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */
static void extint_callback(void)
{
    43a0:	b508      	push	{r3, lr}
	if(targetTemp > 85){
    43a2:	4b0d      	ldr	r3, [pc, #52]	; (43d8 <extint_callback+0x38>)
    43a4:	681b      	ldr	r3, [r3, #0]
    43a6:	2b55      	cmp	r3, #85	; 0x55
    43a8:	dd11      	ble.n	43ce <extint_callback+0x2e>
		targetTemp = 60;
    43aa:	223c      	movs	r2, #60	; 0x3c
    43ac:	4b0a      	ldr	r3, [pc, #40]	; (43d8 <extint_callback+0x38>)
    43ae:	601a      	str	r2, [r3, #0]
		if(!strcmp(mode,HEAT))
    43b0:	4b0a      	ldr	r3, [pc, #40]	; (43dc <extint_callback+0x3c>)
    43b2:	6818      	ldr	r0, [r3, #0]
    43b4:	490a      	ldr	r1, [pc, #40]	; (43e0 <extint_callback+0x40>)
    43b6:	4b0b      	ldr	r3, [pc, #44]	; (43e4 <extint_callback+0x44>)
    43b8:	4798      	blx	r3
    43ba:	2800      	cmp	r0, #0
    43bc:	d103      	bne.n	43c6 <extint_callback+0x26>
			mode = COOL;
    43be:	4a0a      	ldr	r2, [pc, #40]	; (43e8 <extint_callback+0x48>)
    43c0:	4b06      	ldr	r3, [pc, #24]	; (43dc <extint_callback+0x3c>)
    43c2:	601a      	str	r2, [r3, #0]
    43c4:	e006      	b.n	43d4 <extint_callback+0x34>
		else
			mode = HEAT;
    43c6:	4a06      	ldr	r2, [pc, #24]	; (43e0 <extint_callback+0x40>)
    43c8:	4b04      	ldr	r3, [pc, #16]	; (43dc <extint_callback+0x3c>)
    43ca:	601a      	str	r2, [r3, #0]
    43cc:	e002      	b.n	43d4 <extint_callback+0x34>
	}
	else{
		targetTemp++;
    43ce:	3301      	adds	r3, #1
    43d0:	4a01      	ldr	r2, [pc, #4]	; (43d8 <extint_callback+0x38>)
    43d2:	6013      	str	r3, [r2, #0]
	}
}
    43d4:	bd08      	pop	{r3, pc}
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	2000000c 	.word	0x2000000c
    43dc:	20000010 	.word	0x20000010
    43e0:	000058b4 	.word	0x000058b4
    43e4:	00004a39 	.word	0x00004a39
    43e8:	000058bc 	.word	0x000058bc

000043ec <appDataInd>:

}

//When a packet is received, parse the data into the correct queues
static bool appDataInd(NWK_DataInd_t *ind)
{
    43ec:	b508      	push	{r3, lr}
	printf("received!");
    43ee:	4802      	ldr	r0, [pc, #8]	; (43f8 <appDataInd+0xc>)
    43f0:	4b02      	ldr	r3, [pc, #8]	; (43fc <appDataInd+0x10>)
    43f2:	4798      	blx	r3
		//break;
	//default:
		//return false;
	}
	return true;
}
    43f4:	2001      	movs	r0, #1
    43f6:	bd08      	pop	{r3, pc}
    43f8:	000058c4 	.word	0x000058c4
    43fc:	00004869 	.word	0x00004869

00004400 <wireless_init>:
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
}

void wireless_init(void)
{
    4400:	b508      	push	{r3, lr}
	NWK_SetAddr(APP_ADDR);
    4402:	2000      	movs	r0, #0
    4404:	4b0a      	ldr	r3, [pc, #40]	; (4430 <wireless_init+0x30>)
    4406:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    4408:	480a      	ldr	r0, [pc, #40]	; (4434 <wireless_init+0x34>)
    440a:	4b0b      	ldr	r3, [pc, #44]	; (4438 <wireless_init+0x38>)
    440c:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    440e:	200f      	movs	r0, #15
    4410:	4b0a      	ldr	r3, [pc, #40]	; (443c <wireless_init+0x3c>)
    4412:	4798      	blx	r3
	PHY_SetRxState(true);
    4414:	2001      	movs	r0, #1
    4416:	4b0a      	ldr	r3, [pc, #40]	; (4440 <wireless_init+0x40>)
    4418:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    441a:	2023      	movs	r0, #35	; 0x23
    441c:	4b09      	ldr	r3, [pc, #36]	; (4444 <wireless_init+0x44>)
    441e:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    4420:	4809      	ldr	r0, [pc, #36]	; (4448 <wireless_init+0x48>)
    4422:	4b0a      	ldr	r3, [pc, #40]	; (444c <wireless_init+0x4c>)
    4424:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    4426:	2001      	movs	r0, #1
    4428:	4909      	ldr	r1, [pc, #36]	; (4450 <wireless_init+0x50>)
    442a:	4b0a      	ldr	r3, [pc, #40]	; (4454 <wireless_init+0x54>)
    442c:	4798      	blx	r3
}
    442e:	bd08      	pop	{r3, pc}
    4430:	00001819 	.word	0x00001819
    4434:	00004567 	.word	0x00004567
    4438:	0000182d 	.word	0x0000182d
    443c:	00002a51 	.word	0x00002a51
    4440:	00002a3d 	.word	0x00002a3d
    4444:	00002ac1 	.word	0x00002ac1
    4448:	000058d0 	.word	0x000058d0
    444c:	0000234d 	.word	0x0000234d
    4450:	000043ed 	.word	0x000043ed
    4454:	00001841 	.word	0x00001841

00004458 <main>:
void send_packet(struct wireless_packet packet);	//Sends data based on the struct passed in with packet
static bool appDataInd(NWK_DataInd_t *ind);			//Callback function when a packet is received
void send_packet_conf(NWK_DataReq_t *req);			//Callback function for a confirmed sent packet

int main (void)
{
    4458:	b5f0      	push	{r4, r5, r6, r7, lr}
    445a:	b091      	sub	sp, #68	; 0x44
	system_init();
    445c:	4b50      	ldr	r3, [pc, #320]	; (45a0 <main+0x148>)
    445e:	4798      	blx	r3
	delay_init();
    4460:	4b50      	ldr	r3, [pc, #320]	; (45a4 <main+0x14c>)
    4462:	4798      	blx	r3
	board_init();
    4464:	4b50      	ldr	r3, [pc, #320]	; (45a8 <main+0x150>)
    4466:	4798      	blx	r3
	SYS_Init();
    4468:	4b50      	ldr	r3, [pc, #320]	; (45ac <main+0x154>)
    446a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    446c:	2380      	movs	r3, #128	; 0x80
    446e:	05db      	lsls	r3, r3, #23
    4470:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4472:	2300      	movs	r3, #0
    4474:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4476:	22ff      	movs	r2, #255	; 0xff
    4478:	4668      	mov	r0, sp
    447a:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    447c:	2200      	movs	r2, #0
    447e:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4480:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    4482:	2196      	movs	r1, #150	; 0x96
    4484:	0189      	lsls	r1, r1, #6
    4486:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4488:	2601      	movs	r6, #1
    448a:	2124      	movs	r1, #36	; 0x24
    448c:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    448e:	2125      	movs	r1, #37	; 0x25
    4490:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    4492:	2126      	movs	r1, #38	; 0x26
    4494:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    4496:	2127      	movs	r1, #39	; 0x27
    4498:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    449a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    449c:	212c      	movs	r1, #44	; 0x2c
    449e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    44a0:	212d      	movs	r1, #45	; 0x2d
    44a2:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    44a4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    44a6:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    44a8:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    44aa:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    44ac:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    44ae:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    44b0:	2313      	movs	r3, #19
    44b2:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    44b4:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    44b6:	2380      	movs	r3, #128	; 0x80
    44b8:	035b      	lsls	r3, r3, #13
    44ba:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    44bc:	4b3c      	ldr	r3, [pc, #240]	; (45b0 <main+0x158>)
    44be:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    44c0:	4b3c      	ldr	r3, [pc, #240]	; (45b4 <main+0x15c>)
    44c2:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    44c4:	2301      	movs	r3, #1
    44c6:	425b      	negs	r3, r3
    44c8:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    44ca:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    44cc:	4c3a      	ldr	r4, [pc, #232]	; (45b8 <main+0x160>)
    44ce:	4b3b      	ldr	r3, [pc, #236]	; (45bc <main+0x164>)
    44d0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    44d2:	4a3b      	ldr	r2, [pc, #236]	; (45c0 <main+0x168>)
    44d4:	4b3b      	ldr	r3, [pc, #236]	; (45c4 <main+0x16c>)
    44d6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    44d8:	4a3b      	ldr	r2, [pc, #236]	; (45c8 <main+0x170>)
    44da:	4b3c      	ldr	r3, [pc, #240]	; (45cc <main+0x174>)
    44dc:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    44de:	1c20      	adds	r0, r4, #0
    44e0:	493b      	ldr	r1, [pc, #236]	; (45d0 <main+0x178>)
    44e2:	466a      	mov	r2, sp
    44e4:	4b3b      	ldr	r3, [pc, #236]	; (45d4 <main+0x17c>)
    44e6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    44e8:	4f3b      	ldr	r7, [pc, #236]	; (45d8 <main+0x180>)
    44ea:	683b      	ldr	r3, [r7, #0]
    44ec:	6898      	ldr	r0, [r3, #8]
    44ee:	2100      	movs	r1, #0
    44f0:	4d3a      	ldr	r5, [pc, #232]	; (45dc <main+0x184>)
    44f2:	47a8      	blx	r5
	setbuf(stdin, NULL);
    44f4:	683b      	ldr	r3, [r7, #0]
    44f6:	6858      	ldr	r0, [r3, #4]
    44f8:	2100      	movs	r1, #0
    44fa:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    44fc:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    44fe:	1c28      	adds	r0, r5, #0
    4500:	4b37      	ldr	r3, [pc, #220]	; (45e0 <main+0x188>)
    4502:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4504:	231f      	movs	r3, #31
    4506:	4018      	ands	r0, r3
    4508:	4086      	lsls	r6, r0
    450a:	4b36      	ldr	r3, [pc, #216]	; (45e4 <main+0x18c>)
    450c:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    450e:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4510:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4512:	2a00      	cmp	r2, #0
    4514:	d1fc      	bne.n	4510 <main+0xb8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4516:	682b      	ldr	r3, [r5, #0]
    4518:	2402      	movs	r4, #2
    451a:	4323      	orrs	r3, r4
    451c:	602b      	str	r3, [r5, #0]
	system_init();
	delay_init();
	board_init();
	SYS_Init();
	configure_console();
	wireless_init();
    451e:	4b32      	ldr	r3, [pc, #200]	; (45e8 <main+0x190>)
    4520:	4798      	blx	r3
 *  button state.
 */
static void configure_extint(void)
{
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    4522:	4668      	mov	r0, sp
    4524:	4b31      	ldr	r3, [pc, #196]	; (45ec <main+0x194>)
    4526:	4798      	blx	r3

	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    4528:	231c      	movs	r3, #28
    452a:	9300      	str	r3, [sp, #0]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    452c:	2300      	movs	r3, #0
    452e:	9301      	str	r3, [sp, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    4530:	2603      	movs	r6, #3
    4532:	466b      	mov	r3, sp
    4534:	72de      	strb	r6, [r3, #11]
	eint_chan_conf.filter_input_signal = true;
    4536:	2501      	movs	r5, #1
    4538:	729d      	strb	r5, [r3, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    453a:	2008      	movs	r0, #8
    453c:	4669      	mov	r1, sp
    453e:	4b2c      	ldr	r3, [pc, #176]	; (45f0 <main+0x198>)
    4540:	4798      	blx	r3
/** Configures and registers the External Interrupt callback function with the
 *  driver.
 */
static void configure_eic_callback(void)
{
	extint_register_callback(extint_callback,
    4542:	482c      	ldr	r0, [pc, #176]	; (45f4 <main+0x19c>)
    4544:	2108      	movs	r1, #8
    4546:	2200      	movs	r2, #0
    4548:	4b2b      	ldr	r3, [pc, #172]	; (45f8 <main+0x1a0>)
    454a:	4798      	blx	r3
			BUTTON_0_EIC_LINE,
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    454c:	2008      	movs	r0, #8
    454e:	2100      	movs	r1, #0
    4550:	4b2a      	ldr	r3, [pc, #168]	; (45fc <main+0x1a4>)
    4552:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    4554:	4b2a      	ldr	r3, [pc, #168]	; (4600 <main+0x1a8>)
    4556:	701d      	strb	r5, [r3, #0]
    4558:	f3bf 8f5f 	dmb	sy
    455c:	b662      	cpsie	i
	irq_initialize_vectors();
	configure_extint();
	configure_eic_callback();
	system_interrupt_enable_global();
	
	cpu_irq_enable();
    455e:	701d      	strb	r5, [r3, #0]
    4560:	f3bf 8f5f 	dmb	sy
    4564:	b662      	cpsie	i
	}
}

static void rooms_init(void)
{
	numberOfRooms = 2;
    4566:	4b27      	ldr	r3, [pc, #156]	; (4604 <main+0x1ac>)
    4568:	601c      	str	r4, [r3, #0]
	rooms[0].registerAddress = 3;
    456a:	4b27      	ldr	r3, [pc, #156]	; (4608 <main+0x1b0>)
    456c:	705e      	strb	r6, [r3, #1]
	rooms[0].registerStatus = 'X';
    456e:	2258      	movs	r2, #88	; 0x58
    4570:	721a      	strb	r2, [r3, #8]
	rooms[0].roomNumber = 1;
    4572:	605d      	str	r5, [r3, #4]
	rooms[0].temp = 70;
    4574:	2146      	movs	r1, #70	; 0x46
    4576:	60d9      	str	r1, [r3, #12]
	rooms[0].tempSensorAddress = 2;
    4578:	701c      	strb	r4, [r3, #0]
	rooms[1].registerAddress = 5;
    457a:	2105      	movs	r1, #5
    457c:	7459      	strb	r1, [r3, #17]
	rooms[1].registerStatus = 'X';
    457e:	761a      	strb	r2, [r3, #24]
	rooms[1].roomNumber = 2;
    4580:	615c      	str	r4, [r3, #20]
	rooms[1].temp = 68;
    4582:	2244      	movs	r2, #68	; 0x44
    4584:	61da      	str	r2, [r3, #28]
	rooms[1].tempSensorAddress = 4;
    4586:	2204      	movs	r2, #4
    4588:	741a      	strb	r2, [r3, #16]
	cpu_irq_enable();
	rooms_init();
	
	while(1)
	{
		SYS_TaskHandler();
    458a:	4e20      	ldr	r6, [pc, #128]	; (460c <main+0x1b4>)
		//update_register_task();
		//read_temp_task();
		//cycle_room_task();
		//updateDisplay();
		tick++;
    458c:	4c20      	ldr	r4, [pc, #128]	; (4610 <main+0x1b8>)
		delay_ms(5);
    458e:	4d21      	ldr	r5, [pc, #132]	; (4614 <main+0x1bc>)
	cpu_irq_enable();
	rooms_init();
	
	while(1)
	{
		SYS_TaskHandler();
    4590:	47b0      	blx	r6
		//update_register_task();
		//read_temp_task();
		//cycle_room_task();
		//updateDisplay();
		tick++;
    4592:	6823      	ldr	r3, [r4, #0]
    4594:	3301      	adds	r3, #1
    4596:	6023      	str	r3, [r4, #0]
		delay_ms(5);
    4598:	2005      	movs	r0, #5
    459a:	47a8      	blx	r5
    459c:	e7f8      	b.n	4590 <main+0x138>
    459e:	46c0      	nop			; (mov r8, r8)
    45a0:	00004255 	.word	0x00004255
    45a4:	00001731 	.word	0x00001731
    45a8:	00003cb9 	.word	0x00003cb9
    45ac:	00002c19 	.word	0x00002c19
    45b0:	00040003 	.word	0x00040003
    45b4:	00050003 	.word	0x00050003
    45b8:	20000710 	.word	0x20000710
    45bc:	200007bc 	.word	0x200007bc
    45c0:	00004389 	.word	0x00004389
    45c4:	200007b8 	.word	0x200007b8
    45c8:	0000435d 	.word	0x0000435d
    45cc:	200007b4 	.word	0x200007b4
    45d0:	42000800 	.word	0x42000800
    45d4:	00001041 	.word	0x00001041
    45d8:	20000074 	.word	0x20000074
    45dc:	00004919 	.word	0x00004919
    45e0:	000015c9 	.word	0x000015c9
    45e4:	e000e100 	.word	0xe000e100
    45e8:	00004401 	.word	0x00004401
    45ec:	00000259 	.word	0x00000259
    45f0:	0000026d 	.word	0x0000026d
    45f4:	000043a1 	.word	0x000043a1
    45f8:	00001655 	.word	0x00001655
    45fc:	00001685 	.word	0x00001685
    4600:	20000009 	.word	0x20000009
    4604:	2000070c 	.word	0x2000070c
    4608:	2000090c 	.word	0x2000090c
    460c:	00002c3d 	.word	0x00002c3d
    4610:	20000708 	.word	0x20000708
    4614:	00001799 	.word	0x00001799

00004618 <common_tc_delay>:
    4618:	b510      	push	{r4, lr}
    461a:	1c04      	adds	r4, r0, #0
    461c:	4b13      	ldr	r3, [pc, #76]	; (466c <common_tc_delay+0x54>)
    461e:	4798      	blx	r3
    4620:	4b13      	ldr	r3, [pc, #76]	; (4670 <common_tc_delay+0x58>)
    4622:	781a      	ldrb	r2, [r3, #0]
    4624:	4362      	muls	r2, r4
    4626:	1881      	adds	r1, r0, r2
    4628:	4b12      	ldr	r3, [pc, #72]	; (4674 <common_tc_delay+0x5c>)
    462a:	6059      	str	r1, [r3, #4]
    462c:	6859      	ldr	r1, [r3, #4]
    462e:	0c09      	lsrs	r1, r1, #16
    4630:	6059      	str	r1, [r3, #4]
    4632:	685b      	ldr	r3, [r3, #4]
    4634:	2b00      	cmp	r3, #0
    4636:	d007      	beq.n	4648 <common_tc_delay+0x30>
    4638:	4b0e      	ldr	r3, [pc, #56]	; (4674 <common_tc_delay+0x5c>)
    463a:	6859      	ldr	r1, [r3, #4]
    463c:	3201      	adds	r2, #1
    463e:	1880      	adds	r0, r0, r2
    4640:	8118      	strh	r0, [r3, #8]
    4642:	4b0d      	ldr	r3, [pc, #52]	; (4678 <common_tc_delay+0x60>)
    4644:	4798      	blx	r3
    4646:	e004      	b.n	4652 <common_tc_delay+0x3a>
    4648:	1882      	adds	r2, r0, r2
    464a:	4b0a      	ldr	r3, [pc, #40]	; (4674 <common_tc_delay+0x5c>)
    464c:	811a      	strh	r2, [r3, #8]
    464e:	4b0b      	ldr	r3, [pc, #44]	; (467c <common_tc_delay+0x64>)
    4650:	4798      	blx	r3
    4652:	4b08      	ldr	r3, [pc, #32]	; (4674 <common_tc_delay+0x5c>)
    4654:	891b      	ldrh	r3, [r3, #8]
    4656:	2b63      	cmp	r3, #99	; 0x63
    4658:	d802      	bhi.n	4660 <common_tc_delay+0x48>
    465a:	3364      	adds	r3, #100	; 0x64
    465c:	4a05      	ldr	r2, [pc, #20]	; (4674 <common_tc_delay+0x5c>)
    465e:	8113      	strh	r3, [r2, #8]
    4660:	4b04      	ldr	r3, [pc, #16]	; (4674 <common_tc_delay+0x5c>)
    4662:	8918      	ldrh	r0, [r3, #8]
    4664:	4b06      	ldr	r3, [pc, #24]	; (4680 <common_tc_delay+0x68>)
    4666:	4798      	blx	r3
    4668:	bd10      	pop	{r4, pc}
    466a:	46c0      	nop			; (mov r8, r8)
    466c:	00002e01 	.word	0x00002e01
    4670:	20000bac 	.word	0x20000bac
    4674:	20000744 	.word	0x20000744
    4678:	00002e15 	.word	0x00002e15
    467c:	00002e29 	.word	0x00002e29
    4680:	00002e65 	.word	0x00002e65

00004684 <common_tc_init>:
    4684:	b508      	push	{r3, lr}
    4686:	2200      	movs	r2, #0
    4688:	4b03      	ldr	r3, [pc, #12]	; (4698 <common_tc_init+0x14>)
    468a:	701a      	strb	r2, [r3, #0]
    468c:	4b03      	ldr	r3, [pc, #12]	; (469c <common_tc_init+0x18>)
    468e:	4798      	blx	r3
    4690:	4b03      	ldr	r3, [pc, #12]	; (46a0 <common_tc_init+0x1c>)
    4692:	7018      	strb	r0, [r3, #0]
    4694:	bd08      	pop	{r3, pc}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	20000744 	.word	0x20000744
    469c:	00002e7d 	.word	0x00002e7d
    46a0:	20000bac 	.word	0x20000bac

000046a4 <tmr_ovf_callback>:
    46a4:	b508      	push	{r3, lr}
    46a6:	4b0e      	ldr	r3, [pc, #56]	; (46e0 <tmr_ovf_callback+0x3c>)
    46a8:	685b      	ldr	r3, [r3, #4]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d007      	beq.n	46be <tmr_ovf_callback+0x1a>
    46ae:	4a0c      	ldr	r2, [pc, #48]	; (46e0 <tmr_ovf_callback+0x3c>)
    46b0:	6853      	ldr	r3, [r2, #4]
    46b2:	3b01      	subs	r3, #1
    46b4:	6053      	str	r3, [r2, #4]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d101      	bne.n	46be <tmr_ovf_callback+0x1a>
    46ba:	4b0a      	ldr	r3, [pc, #40]	; (46e4 <tmr_ovf_callback+0x40>)
    46bc:	4798      	blx	r3
    46be:	4a08      	ldr	r2, [pc, #32]	; (46e0 <tmr_ovf_callback+0x3c>)
    46c0:	7813      	ldrb	r3, [r2, #0]
    46c2:	3301      	adds	r3, #1
    46c4:	b2db      	uxtb	r3, r3
    46c6:	7013      	strb	r3, [r2, #0]
    46c8:	4a07      	ldr	r2, [pc, #28]	; (46e8 <tmr_ovf_callback+0x44>)
    46ca:	7812      	ldrb	r2, [r2, #0]
    46cc:	429a      	cmp	r2, r3
    46ce:	d806      	bhi.n	46de <tmr_ovf_callback+0x3a>
    46d0:	4b03      	ldr	r3, [pc, #12]	; (46e0 <tmr_ovf_callback+0x3c>)
    46d2:	2200      	movs	r2, #0
    46d4:	701a      	strb	r2, [r3, #0]
    46d6:	68db      	ldr	r3, [r3, #12]
    46d8:	2b00      	cmp	r3, #0
    46da:	d000      	beq.n	46de <tmr_ovf_callback+0x3a>
    46dc:	4798      	blx	r3
    46de:	bd08      	pop	{r3, pc}
    46e0:	20000744 	.word	0x20000744
    46e4:	00002e29 	.word	0x00002e29
    46e8:	20000bac 	.word	0x20000bac

000046ec <tmr_cca_callback>:
    46ec:	b508      	push	{r3, lr}
    46ee:	4b04      	ldr	r3, [pc, #16]	; (4700 <tmr_cca_callback+0x14>)
    46f0:	4798      	blx	r3
    46f2:	4b04      	ldr	r3, [pc, #16]	; (4704 <tmr_cca_callback+0x18>)
    46f4:	691b      	ldr	r3, [r3, #16]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d000      	beq.n	46fc <tmr_cca_callback+0x10>
    46fa:	4798      	blx	r3
    46fc:	bd08      	pop	{r3, pc}
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	00002e15 	.word	0x00002e15
    4704:	20000744 	.word	0x20000744

00004708 <set_common_tc_expiry_callback>:
    4708:	4b01      	ldr	r3, [pc, #4]	; (4710 <set_common_tc_expiry_callback+0x8>)
    470a:	6118      	str	r0, [r3, #16]
    470c:	4770      	bx	lr
    470e:	46c0      	nop			; (mov r8, r8)
    4710:	20000744 	.word	0x20000744

00004714 <__aeabi_uidiv>:
    4714:	2900      	cmp	r1, #0
    4716:	d034      	beq.n	4782 <.udivsi3_skip_div0_test+0x6a>

00004718 <.udivsi3_skip_div0_test>:
    4718:	2301      	movs	r3, #1
    471a:	2200      	movs	r2, #0
    471c:	b410      	push	{r4}
    471e:	4288      	cmp	r0, r1
    4720:	d32c      	bcc.n	477c <.udivsi3_skip_div0_test+0x64>
    4722:	2401      	movs	r4, #1
    4724:	0724      	lsls	r4, r4, #28
    4726:	42a1      	cmp	r1, r4
    4728:	d204      	bcs.n	4734 <.udivsi3_skip_div0_test+0x1c>
    472a:	4281      	cmp	r1, r0
    472c:	d202      	bcs.n	4734 <.udivsi3_skip_div0_test+0x1c>
    472e:	0109      	lsls	r1, r1, #4
    4730:	011b      	lsls	r3, r3, #4
    4732:	e7f8      	b.n	4726 <.udivsi3_skip_div0_test+0xe>
    4734:	00e4      	lsls	r4, r4, #3
    4736:	42a1      	cmp	r1, r4
    4738:	d204      	bcs.n	4744 <.udivsi3_skip_div0_test+0x2c>
    473a:	4281      	cmp	r1, r0
    473c:	d202      	bcs.n	4744 <.udivsi3_skip_div0_test+0x2c>
    473e:	0049      	lsls	r1, r1, #1
    4740:	005b      	lsls	r3, r3, #1
    4742:	e7f8      	b.n	4736 <.udivsi3_skip_div0_test+0x1e>
    4744:	4288      	cmp	r0, r1
    4746:	d301      	bcc.n	474c <.udivsi3_skip_div0_test+0x34>
    4748:	1a40      	subs	r0, r0, r1
    474a:	431a      	orrs	r2, r3
    474c:	084c      	lsrs	r4, r1, #1
    474e:	42a0      	cmp	r0, r4
    4750:	d302      	bcc.n	4758 <.udivsi3_skip_div0_test+0x40>
    4752:	1b00      	subs	r0, r0, r4
    4754:	085c      	lsrs	r4, r3, #1
    4756:	4322      	orrs	r2, r4
    4758:	088c      	lsrs	r4, r1, #2
    475a:	42a0      	cmp	r0, r4
    475c:	d302      	bcc.n	4764 <.udivsi3_skip_div0_test+0x4c>
    475e:	1b00      	subs	r0, r0, r4
    4760:	089c      	lsrs	r4, r3, #2
    4762:	4322      	orrs	r2, r4
    4764:	08cc      	lsrs	r4, r1, #3
    4766:	42a0      	cmp	r0, r4
    4768:	d302      	bcc.n	4770 <.udivsi3_skip_div0_test+0x58>
    476a:	1b00      	subs	r0, r0, r4
    476c:	08dc      	lsrs	r4, r3, #3
    476e:	4322      	orrs	r2, r4
    4770:	2800      	cmp	r0, #0
    4772:	d003      	beq.n	477c <.udivsi3_skip_div0_test+0x64>
    4774:	091b      	lsrs	r3, r3, #4
    4776:	d001      	beq.n	477c <.udivsi3_skip_div0_test+0x64>
    4778:	0909      	lsrs	r1, r1, #4
    477a:	e7e3      	b.n	4744 <.udivsi3_skip_div0_test+0x2c>
    477c:	1c10      	adds	r0, r2, #0
    477e:	bc10      	pop	{r4}
    4780:	4770      	bx	lr
    4782:	2800      	cmp	r0, #0
    4784:	d001      	beq.n	478a <.udivsi3_skip_div0_test+0x72>
    4786:	2000      	movs	r0, #0
    4788:	43c0      	mvns	r0, r0
    478a:	b407      	push	{r0, r1, r2}
    478c:	4802      	ldr	r0, [pc, #8]	; (4798 <.udivsi3_skip_div0_test+0x80>)
    478e:	a102      	add	r1, pc, #8	; (adr r1, 4798 <.udivsi3_skip_div0_test+0x80>)
    4790:	1840      	adds	r0, r0, r1
    4792:	9002      	str	r0, [sp, #8]
    4794:	bd03      	pop	{r0, r1, pc}
    4796:	46c0      	nop			; (mov r8, r8)
    4798:	00000019 	.word	0x00000019

0000479c <__aeabi_uidivmod>:
    479c:	2900      	cmp	r1, #0
    479e:	d0f0      	beq.n	4782 <.udivsi3_skip_div0_test+0x6a>
    47a0:	b503      	push	{r0, r1, lr}
    47a2:	f7ff ffb9 	bl	4718 <.udivsi3_skip_div0_test>
    47a6:	bc0e      	pop	{r1, r2, r3}
    47a8:	4342      	muls	r2, r0
    47aa:	1a89      	subs	r1, r1, r2
    47ac:	4718      	bx	r3
    47ae:	46c0      	nop			; (mov r8, r8)

000047b0 <__aeabi_idiv0>:
    47b0:	4770      	bx	lr
    47b2:	46c0      	nop			; (mov r8, r8)

000047b4 <__aeabi_lmul>:
    47b4:	469c      	mov	ip, r3
    47b6:	0403      	lsls	r3, r0, #16
    47b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47ba:	0c1b      	lsrs	r3, r3, #16
    47bc:	0417      	lsls	r7, r2, #16
    47be:	0c3f      	lsrs	r7, r7, #16
    47c0:	0c15      	lsrs	r5, r2, #16
    47c2:	1c1e      	adds	r6, r3, #0
    47c4:	1c04      	adds	r4, r0, #0
    47c6:	0c00      	lsrs	r0, r0, #16
    47c8:	437e      	muls	r6, r7
    47ca:	436b      	muls	r3, r5
    47cc:	4347      	muls	r7, r0
    47ce:	4345      	muls	r5, r0
    47d0:	18fb      	adds	r3, r7, r3
    47d2:	0c30      	lsrs	r0, r6, #16
    47d4:	1818      	adds	r0, r3, r0
    47d6:	4287      	cmp	r7, r0
    47d8:	d902      	bls.n	47e0 <__aeabi_lmul+0x2c>
    47da:	2380      	movs	r3, #128	; 0x80
    47dc:	025b      	lsls	r3, r3, #9
    47de:	18ed      	adds	r5, r5, r3
    47e0:	0c03      	lsrs	r3, r0, #16
    47e2:	18ed      	adds	r5, r5, r3
    47e4:	4663      	mov	r3, ip
    47e6:	435c      	muls	r4, r3
    47e8:	434a      	muls	r2, r1
    47ea:	0436      	lsls	r6, r6, #16
    47ec:	0c36      	lsrs	r6, r6, #16
    47ee:	18a1      	adds	r1, r4, r2
    47f0:	0400      	lsls	r0, r0, #16
    47f2:	1980      	adds	r0, r0, r6
    47f4:	1949      	adds	r1, r1, r5
    47f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000047f8 <__libc_init_array>:
    47f8:	b570      	push	{r4, r5, r6, lr}
    47fa:	4b0e      	ldr	r3, [pc, #56]	; (4834 <__libc_init_array+0x3c>)
    47fc:	4d0e      	ldr	r5, [pc, #56]	; (4838 <__libc_init_array+0x40>)
    47fe:	2400      	movs	r4, #0
    4800:	1aed      	subs	r5, r5, r3
    4802:	10ad      	asrs	r5, r5, #2
    4804:	1c1e      	adds	r6, r3, #0
    4806:	42ac      	cmp	r4, r5
    4808:	d004      	beq.n	4814 <__libc_init_array+0x1c>
    480a:	00a3      	lsls	r3, r4, #2
    480c:	58f3      	ldr	r3, [r6, r3]
    480e:	4798      	blx	r3
    4810:	3401      	adds	r4, #1
    4812:	e7f8      	b.n	4806 <__libc_init_array+0xe>
    4814:	f001 f8b4 	bl	5980 <_init>
    4818:	4b08      	ldr	r3, [pc, #32]	; (483c <__libc_init_array+0x44>)
    481a:	4d09      	ldr	r5, [pc, #36]	; (4840 <__libc_init_array+0x48>)
    481c:	2400      	movs	r4, #0
    481e:	1aed      	subs	r5, r5, r3
    4820:	10ad      	asrs	r5, r5, #2
    4822:	1c1e      	adds	r6, r3, #0
    4824:	42ac      	cmp	r4, r5
    4826:	d004      	beq.n	4832 <__libc_init_array+0x3a>
    4828:	00a3      	lsls	r3, r4, #2
    482a:	58f3      	ldr	r3, [r6, r3]
    482c:	4798      	blx	r3
    482e:	3401      	adds	r4, #1
    4830:	e7f8      	b.n	4824 <__libc_init_array+0x2c>
    4832:	bd70      	pop	{r4, r5, r6, pc}
    4834:	0000598c 	.word	0x0000598c
    4838:	0000598c 	.word	0x0000598c
    483c:	0000598c 	.word	0x0000598c
    4840:	00005990 	.word	0x00005990

00004844 <memcpy>:
    4844:	b510      	push	{r4, lr}
    4846:	2300      	movs	r3, #0
    4848:	4293      	cmp	r3, r2
    484a:	d003      	beq.n	4854 <memcpy+0x10>
    484c:	5ccc      	ldrb	r4, [r1, r3]
    484e:	54c4      	strb	r4, [r0, r3]
    4850:	3301      	adds	r3, #1
    4852:	e7f9      	b.n	4848 <memcpy+0x4>
    4854:	bd10      	pop	{r4, pc}

00004856 <memset>:
    4856:	1c03      	adds	r3, r0, #0
    4858:	1882      	adds	r2, r0, r2
    485a:	4293      	cmp	r3, r2
    485c:	d002      	beq.n	4864 <memset+0xe>
    485e:	7019      	strb	r1, [r3, #0]
    4860:	3301      	adds	r3, #1
    4862:	e7fa      	b.n	485a <memset+0x4>
    4864:	4770      	bx	lr
	...

00004868 <iprintf>:
    4868:	b40f      	push	{r0, r1, r2, r3}
    486a:	4b0b      	ldr	r3, [pc, #44]	; (4898 <iprintf+0x30>)
    486c:	b513      	push	{r0, r1, r4, lr}
    486e:	681c      	ldr	r4, [r3, #0]
    4870:	2c00      	cmp	r4, #0
    4872:	d005      	beq.n	4880 <iprintf+0x18>
    4874:	69a3      	ldr	r3, [r4, #24]
    4876:	2b00      	cmp	r3, #0
    4878:	d102      	bne.n	4880 <iprintf+0x18>
    487a:	1c20      	adds	r0, r4, #0
    487c:	f000 fd74 	bl	5368 <__sinit>
    4880:	ab05      	add	r3, sp, #20
    4882:	68a1      	ldr	r1, [r4, #8]
    4884:	1c20      	adds	r0, r4, #0
    4886:	9a04      	ldr	r2, [sp, #16]
    4888:	9301      	str	r3, [sp, #4]
    488a:	f000 f907 	bl	4a9c <_vfiprintf_r>
    488e:	bc16      	pop	{r1, r2, r4}
    4890:	bc08      	pop	{r3}
    4892:	b004      	add	sp, #16
    4894:	4718      	bx	r3
    4896:	46c0      	nop			; (mov r8, r8)
    4898:	20000074 	.word	0x20000074
    489c:	00000000 	.word	0x00000000

000048a0 <rand>:
    48a0:	4b17      	ldr	r3, [pc, #92]	; (4900 <rand+0x60>)
    48a2:	b510      	push	{r4, lr}
    48a4:	681c      	ldr	r4, [r3, #0]
    48a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    48a8:	2b00      	cmp	r3, #0
    48aa:	d115      	bne.n	48d8 <rand+0x38>
    48ac:	2018      	movs	r0, #24
    48ae:	f000 fe1b 	bl	54e8 <malloc>
    48b2:	4b14      	ldr	r3, [pc, #80]	; (4904 <rand+0x64>)
    48b4:	63a0      	str	r0, [r4, #56]	; 0x38
    48b6:	8003      	strh	r3, [r0, #0]
    48b8:	4b13      	ldr	r3, [pc, #76]	; (4908 <rand+0x68>)
    48ba:	8043      	strh	r3, [r0, #2]
    48bc:	4b13      	ldr	r3, [pc, #76]	; (490c <rand+0x6c>)
    48be:	8083      	strh	r3, [r0, #4]
    48c0:	4b13      	ldr	r3, [pc, #76]	; (4910 <rand+0x70>)
    48c2:	80c3      	strh	r3, [r0, #6]
    48c4:	4b13      	ldr	r3, [pc, #76]	; (4914 <rand+0x74>)
    48c6:	8103      	strh	r3, [r0, #8]
    48c8:	2305      	movs	r3, #5
    48ca:	8143      	strh	r3, [r0, #10]
    48cc:	230b      	movs	r3, #11
    48ce:	8183      	strh	r3, [r0, #12]
    48d0:	2201      	movs	r2, #1
    48d2:	2300      	movs	r3, #0
    48d4:	6102      	str	r2, [r0, #16]
    48d6:	6143      	str	r3, [r0, #20]
    48d8:	4b08      	ldr	r3, [pc, #32]	; (48fc <rand+0x5c>)
    48da:	4a07      	ldr	r2, [pc, #28]	; (48f8 <rand+0x58>)
    48dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    48de:	6920      	ldr	r0, [r4, #16]
    48e0:	6961      	ldr	r1, [r4, #20]
    48e2:	f7ff ff67 	bl	47b4 <__aeabi_lmul>
    48e6:	2201      	movs	r2, #1
    48e8:	2300      	movs	r3, #0
    48ea:	1880      	adds	r0, r0, r2
    48ec:	4159      	adcs	r1, r3
    48ee:	6120      	str	r0, [r4, #16]
    48f0:	6161      	str	r1, [r4, #20]
    48f2:	0048      	lsls	r0, r1, #1
    48f4:	0840      	lsrs	r0, r0, #1
    48f6:	bd10      	pop	{r4, pc}
    48f8:	4c957f2d 	.word	0x4c957f2d
    48fc:	5851f42d 	.word	0x5851f42d
    4900:	20000074 	.word	0x20000074
    4904:	0000330e 	.word	0x0000330e
    4908:	ffffabcd 	.word	0xffffabcd
    490c:	00001234 	.word	0x00001234
    4910:	ffffe66d 	.word	0xffffe66d
    4914:	ffffdeec 	.word	0xffffdeec

00004918 <setbuf>:
    4918:	b508      	push	{r3, lr}
    491a:	424a      	negs	r2, r1
    491c:	414a      	adcs	r2, r1
    491e:	2380      	movs	r3, #128	; 0x80
    4920:	0052      	lsls	r2, r2, #1
    4922:	00db      	lsls	r3, r3, #3
    4924:	f000 f802 	bl	492c <setvbuf>
    4928:	bd08      	pop	{r3, pc}
	...

0000492c <setvbuf>:
    492c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    492e:	1c1e      	adds	r6, r3, #0
    4930:	4b3c      	ldr	r3, [pc, #240]	; (4a24 <setvbuf+0xf8>)
    4932:	1c04      	adds	r4, r0, #0
    4934:	681d      	ldr	r5, [r3, #0]
    4936:	1c0f      	adds	r7, r1, #0
    4938:	9201      	str	r2, [sp, #4]
    493a:	2d00      	cmp	r5, #0
    493c:	d005      	beq.n	494a <setvbuf+0x1e>
    493e:	69aa      	ldr	r2, [r5, #24]
    4940:	2a00      	cmp	r2, #0
    4942:	d102      	bne.n	494a <setvbuf+0x1e>
    4944:	1c28      	adds	r0, r5, #0
    4946:	f000 fd0f 	bl	5368 <__sinit>
    494a:	4b37      	ldr	r3, [pc, #220]	; (4a28 <setvbuf+0xfc>)
    494c:	429c      	cmp	r4, r3
    494e:	d101      	bne.n	4954 <setvbuf+0x28>
    4950:	686c      	ldr	r4, [r5, #4]
    4952:	e008      	b.n	4966 <setvbuf+0x3a>
    4954:	4b35      	ldr	r3, [pc, #212]	; (4a2c <setvbuf+0x100>)
    4956:	429c      	cmp	r4, r3
    4958:	d101      	bne.n	495e <setvbuf+0x32>
    495a:	68ac      	ldr	r4, [r5, #8]
    495c:	e003      	b.n	4966 <setvbuf+0x3a>
    495e:	4b34      	ldr	r3, [pc, #208]	; (4a30 <setvbuf+0x104>)
    4960:	429c      	cmp	r4, r3
    4962:	d100      	bne.n	4966 <setvbuf+0x3a>
    4964:	68ec      	ldr	r4, [r5, #12]
    4966:	9b01      	ldr	r3, [sp, #4]
    4968:	2b02      	cmp	r3, #2
    496a:	d857      	bhi.n	4a1c <setvbuf+0xf0>
    496c:	2e00      	cmp	r6, #0
    496e:	db55      	blt.n	4a1c <setvbuf+0xf0>
    4970:	1c28      	adds	r0, r5, #0
    4972:	1c21      	adds	r1, r4, #0
    4974:	f000 fc78 	bl	5268 <_fflush_r>
    4978:	2300      	movs	r3, #0
    497a:	6063      	str	r3, [r4, #4]
    497c:	61a3      	str	r3, [r4, #24]
    497e:	89a3      	ldrh	r3, [r4, #12]
    4980:	061a      	lsls	r2, r3, #24
    4982:	d503      	bpl.n	498c <setvbuf+0x60>
    4984:	1c28      	adds	r0, r5, #0
    4986:	6921      	ldr	r1, [r4, #16]
    4988:	f000 fdc4 	bl	5514 <_free_r>
    498c:	89a3      	ldrh	r3, [r4, #12]
    498e:	2283      	movs	r2, #131	; 0x83
    4990:	4393      	bics	r3, r2
    4992:	81a3      	strh	r3, [r4, #12]
    4994:	9b01      	ldr	r3, [sp, #4]
    4996:	2b02      	cmp	r3, #2
    4998:	d013      	beq.n	49c2 <setvbuf+0x96>
    499a:	2f00      	cmp	r7, #0
    499c:	d125      	bne.n	49ea <setvbuf+0xbe>
    499e:	2e00      	cmp	r6, #0
    49a0:	d101      	bne.n	49a6 <setvbuf+0x7a>
    49a2:	2680      	movs	r6, #128	; 0x80
    49a4:	00f6      	lsls	r6, r6, #3
    49a6:	1c30      	adds	r0, r6, #0
    49a8:	f000 fd9e 	bl	54e8 <malloc>
    49ac:	1e07      	subs	r7, r0, #0
    49ae:	d118      	bne.n	49e2 <setvbuf+0xb6>
    49b0:	2080      	movs	r0, #128	; 0x80
    49b2:	00c0      	lsls	r0, r0, #3
    49b4:	f000 fd98 	bl	54e8 <malloc>
    49b8:	1e07      	subs	r7, r0, #0
    49ba:	d110      	bne.n	49de <setvbuf+0xb2>
    49bc:	2001      	movs	r0, #1
    49be:	4240      	negs	r0, r0
    49c0:	e000      	b.n	49c4 <setvbuf+0x98>
    49c2:	2000      	movs	r0, #0
    49c4:	89a3      	ldrh	r3, [r4, #12]
    49c6:	2202      	movs	r2, #2
    49c8:	4313      	orrs	r3, r2
    49ca:	81a3      	strh	r3, [r4, #12]
    49cc:	2300      	movs	r3, #0
    49ce:	60a3      	str	r3, [r4, #8]
    49d0:	1c23      	adds	r3, r4, #0
    49d2:	3347      	adds	r3, #71	; 0x47
    49d4:	6023      	str	r3, [r4, #0]
    49d6:	6123      	str	r3, [r4, #16]
    49d8:	2301      	movs	r3, #1
    49da:	6163      	str	r3, [r4, #20]
    49dc:	e020      	b.n	4a20 <setvbuf+0xf4>
    49de:	2680      	movs	r6, #128	; 0x80
    49e0:	00f6      	lsls	r6, r6, #3
    49e2:	89a3      	ldrh	r3, [r4, #12]
    49e4:	2280      	movs	r2, #128	; 0x80
    49e6:	4313      	orrs	r3, r2
    49e8:	81a3      	strh	r3, [r4, #12]
    49ea:	9a01      	ldr	r2, [sp, #4]
    49ec:	2a01      	cmp	r2, #1
    49ee:	d104      	bne.n	49fa <setvbuf+0xce>
    49f0:	89a3      	ldrh	r3, [r4, #12]
    49f2:	4313      	orrs	r3, r2
    49f4:	81a3      	strh	r3, [r4, #12]
    49f6:	4273      	negs	r3, r6
    49f8:	61a3      	str	r3, [r4, #24]
    49fa:	4b0e      	ldr	r3, [pc, #56]	; (4a34 <setvbuf+0x108>)
    49fc:	2000      	movs	r0, #0
    49fe:	62ab      	str	r3, [r5, #40]	; 0x28
    4a00:	89a3      	ldrh	r3, [r4, #12]
    4a02:	6027      	str	r7, [r4, #0]
    4a04:	6127      	str	r7, [r4, #16]
    4a06:	6166      	str	r6, [r4, #20]
    4a08:	071a      	lsls	r2, r3, #28
    4a0a:	d509      	bpl.n	4a20 <setvbuf+0xf4>
    4a0c:	2203      	movs	r2, #3
    4a0e:	4013      	ands	r3, r2
    4a10:	425a      	negs	r2, r3
    4a12:	4153      	adcs	r3, r2
    4a14:	425b      	negs	r3, r3
    4a16:	401e      	ands	r6, r3
    4a18:	60a6      	str	r6, [r4, #8]
    4a1a:	e001      	b.n	4a20 <setvbuf+0xf4>
    4a1c:	2001      	movs	r0, #1
    4a1e:	4240      	negs	r0, r0
    4a20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	20000074 	.word	0x20000074
    4a28:	00005920 	.word	0x00005920
    4a2c:	00005940 	.word	0x00005940
    4a30:	00005960 	.word	0x00005960
    4a34:	000052c1 	.word	0x000052c1

00004a38 <strcmp>:
    4a38:	7802      	ldrb	r2, [r0, #0]
    4a3a:	780b      	ldrb	r3, [r1, #0]
    4a3c:	3001      	adds	r0, #1
    4a3e:	3101      	adds	r1, #1
    4a40:	2a00      	cmp	r2, #0
    4a42:	d001      	beq.n	4a48 <strcmp+0x10>
    4a44:	429a      	cmp	r2, r3
    4a46:	d0f7      	beq.n	4a38 <strcmp>
    4a48:	1ad0      	subs	r0, r2, r3
    4a4a:	4770      	bx	lr

00004a4c <__sfputc_r>:
    4a4c:	6893      	ldr	r3, [r2, #8]
    4a4e:	b510      	push	{r4, lr}
    4a50:	3b01      	subs	r3, #1
    4a52:	6093      	str	r3, [r2, #8]
    4a54:	2b00      	cmp	r3, #0
    4a56:	da05      	bge.n	4a64 <__sfputc_r+0x18>
    4a58:	6994      	ldr	r4, [r2, #24]
    4a5a:	42a3      	cmp	r3, r4
    4a5c:	db08      	blt.n	4a70 <__sfputc_r+0x24>
    4a5e:	b2cb      	uxtb	r3, r1
    4a60:	2b0a      	cmp	r3, #10
    4a62:	d005      	beq.n	4a70 <__sfputc_r+0x24>
    4a64:	6813      	ldr	r3, [r2, #0]
    4a66:	1c58      	adds	r0, r3, #1
    4a68:	6010      	str	r0, [r2, #0]
    4a6a:	7019      	strb	r1, [r3, #0]
    4a6c:	b2c8      	uxtb	r0, r1
    4a6e:	e001      	b.n	4a74 <__sfputc_r+0x28>
    4a70:	f000 faa6 	bl	4fc0 <__swbuf_r>
    4a74:	bd10      	pop	{r4, pc}

00004a76 <__sfputs_r>:
    4a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a78:	1c06      	adds	r6, r0, #0
    4a7a:	1c0f      	adds	r7, r1, #0
    4a7c:	1c14      	adds	r4, r2, #0
    4a7e:	18d5      	adds	r5, r2, r3
    4a80:	42ac      	cmp	r4, r5
    4a82:	d008      	beq.n	4a96 <__sfputs_r+0x20>
    4a84:	7821      	ldrb	r1, [r4, #0]
    4a86:	1c30      	adds	r0, r6, #0
    4a88:	1c3a      	adds	r2, r7, #0
    4a8a:	f7ff ffdf 	bl	4a4c <__sfputc_r>
    4a8e:	3401      	adds	r4, #1
    4a90:	1c43      	adds	r3, r0, #1
    4a92:	d1f5      	bne.n	4a80 <__sfputs_r+0xa>
    4a94:	e000      	b.n	4a98 <__sfputs_r+0x22>
    4a96:	2000      	movs	r0, #0
    4a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004a9c <_vfiprintf_r>:
    4a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a9e:	b09f      	sub	sp, #124	; 0x7c
    4aa0:	1c06      	adds	r6, r0, #0
    4aa2:	1c0f      	adds	r7, r1, #0
    4aa4:	9203      	str	r2, [sp, #12]
    4aa6:	9305      	str	r3, [sp, #20]
    4aa8:	2800      	cmp	r0, #0
    4aaa:	d004      	beq.n	4ab6 <_vfiprintf_r+0x1a>
    4aac:	6981      	ldr	r1, [r0, #24]
    4aae:	2900      	cmp	r1, #0
    4ab0:	d101      	bne.n	4ab6 <_vfiprintf_r+0x1a>
    4ab2:	f000 fc59 	bl	5368 <__sinit>
    4ab6:	4b75      	ldr	r3, [pc, #468]	; (4c8c <_vfiprintf_r+0x1f0>)
    4ab8:	429f      	cmp	r7, r3
    4aba:	d101      	bne.n	4ac0 <_vfiprintf_r+0x24>
    4abc:	6877      	ldr	r7, [r6, #4]
    4abe:	e008      	b.n	4ad2 <_vfiprintf_r+0x36>
    4ac0:	4b73      	ldr	r3, [pc, #460]	; (4c90 <_vfiprintf_r+0x1f4>)
    4ac2:	429f      	cmp	r7, r3
    4ac4:	d101      	bne.n	4aca <_vfiprintf_r+0x2e>
    4ac6:	68b7      	ldr	r7, [r6, #8]
    4ac8:	e003      	b.n	4ad2 <_vfiprintf_r+0x36>
    4aca:	4b72      	ldr	r3, [pc, #456]	; (4c94 <_vfiprintf_r+0x1f8>)
    4acc:	429f      	cmp	r7, r3
    4ace:	d100      	bne.n	4ad2 <_vfiprintf_r+0x36>
    4ad0:	68f7      	ldr	r7, [r6, #12]
    4ad2:	89bb      	ldrh	r3, [r7, #12]
    4ad4:	071a      	lsls	r2, r3, #28
    4ad6:	d50a      	bpl.n	4aee <_vfiprintf_r+0x52>
    4ad8:	693b      	ldr	r3, [r7, #16]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d007      	beq.n	4aee <_vfiprintf_r+0x52>
    4ade:	ad06      	add	r5, sp, #24
    4ae0:	2300      	movs	r3, #0
    4ae2:	616b      	str	r3, [r5, #20]
    4ae4:	2320      	movs	r3, #32
    4ae6:	766b      	strb	r3, [r5, #25]
    4ae8:	2330      	movs	r3, #48	; 0x30
    4aea:	76ab      	strb	r3, [r5, #26]
    4aec:	e03b      	b.n	4b66 <_vfiprintf_r+0xca>
    4aee:	1c30      	adds	r0, r6, #0
    4af0:	1c39      	adds	r1, r7, #0
    4af2:	f000 fabd 	bl	5070 <__swsetup_r>
    4af6:	2800      	cmp	r0, #0
    4af8:	d0f1      	beq.n	4ade <_vfiprintf_r+0x42>
    4afa:	2001      	movs	r0, #1
    4afc:	4240      	negs	r0, r0
    4afe:	e0c2      	b.n	4c86 <_vfiprintf_r+0x1ea>
    4b00:	9a05      	ldr	r2, [sp, #20]
    4b02:	1d11      	adds	r1, r2, #4
    4b04:	6812      	ldr	r2, [r2, #0]
    4b06:	9105      	str	r1, [sp, #20]
    4b08:	2a00      	cmp	r2, #0
    4b0a:	db76      	blt.n	4bfa <_vfiprintf_r+0x15e>
    4b0c:	9209      	str	r2, [sp, #36]	; 0x24
    4b0e:	3401      	adds	r4, #1
    4b10:	7823      	ldrb	r3, [r4, #0]
    4b12:	2b2e      	cmp	r3, #46	; 0x2e
    4b14:	d100      	bne.n	4b18 <_vfiprintf_r+0x7c>
    4b16:	e081      	b.n	4c1c <_vfiprintf_r+0x180>
    4b18:	7821      	ldrb	r1, [r4, #0]
    4b1a:	485f      	ldr	r0, [pc, #380]	; (4c98 <_vfiprintf_r+0x1fc>)
    4b1c:	2203      	movs	r2, #3
    4b1e:	f000 fced 	bl	54fc <memchr>
    4b22:	2800      	cmp	r0, #0
    4b24:	d007      	beq.n	4b36 <_vfiprintf_r+0x9a>
    4b26:	495c      	ldr	r1, [pc, #368]	; (4c98 <_vfiprintf_r+0x1fc>)
    4b28:	682a      	ldr	r2, [r5, #0]
    4b2a:	1a43      	subs	r3, r0, r1
    4b2c:	2040      	movs	r0, #64	; 0x40
    4b2e:	4098      	lsls	r0, r3
    4b30:	4310      	orrs	r0, r2
    4b32:	6028      	str	r0, [r5, #0]
    4b34:	3401      	adds	r4, #1
    4b36:	7821      	ldrb	r1, [r4, #0]
    4b38:	1c63      	adds	r3, r4, #1
    4b3a:	4858      	ldr	r0, [pc, #352]	; (4c9c <_vfiprintf_r+0x200>)
    4b3c:	2206      	movs	r2, #6
    4b3e:	9303      	str	r3, [sp, #12]
    4b40:	7629      	strb	r1, [r5, #24]
    4b42:	f000 fcdb 	bl	54fc <memchr>
    4b46:	2800      	cmp	r0, #0
    4b48:	d100      	bne.n	4b4c <_vfiprintf_r+0xb0>
    4b4a:	e08a      	b.n	4c62 <_vfiprintf_r+0x1c6>
    4b4c:	4b54      	ldr	r3, [pc, #336]	; (4ca0 <_vfiprintf_r+0x204>)
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d17e      	bne.n	4c50 <_vfiprintf_r+0x1b4>
    4b52:	9b05      	ldr	r3, [sp, #20]
    4b54:	2207      	movs	r2, #7
    4b56:	3307      	adds	r3, #7
    4b58:	4393      	bics	r3, r2
    4b5a:	3308      	adds	r3, #8
    4b5c:	9305      	str	r3, [sp, #20]
    4b5e:	696a      	ldr	r2, [r5, #20]
    4b60:	9904      	ldr	r1, [sp, #16]
    4b62:	1853      	adds	r3, r2, r1
    4b64:	616b      	str	r3, [r5, #20]
    4b66:	9c03      	ldr	r4, [sp, #12]
    4b68:	7823      	ldrb	r3, [r4, #0]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d104      	bne.n	4b78 <_vfiprintf_r+0xdc>
    4b6e:	9903      	ldr	r1, [sp, #12]
    4b70:	1a61      	subs	r1, r4, r1
    4b72:	9102      	str	r1, [sp, #8]
    4b74:	d010      	beq.n	4b98 <_vfiprintf_r+0xfc>
    4b76:	e003      	b.n	4b80 <_vfiprintf_r+0xe4>
    4b78:	2b25      	cmp	r3, #37	; 0x25
    4b7a:	d0f8      	beq.n	4b6e <_vfiprintf_r+0xd2>
    4b7c:	3401      	adds	r4, #1
    4b7e:	e7f3      	b.n	4b68 <_vfiprintf_r+0xcc>
    4b80:	1c30      	adds	r0, r6, #0
    4b82:	1c39      	adds	r1, r7, #0
    4b84:	9a03      	ldr	r2, [sp, #12]
    4b86:	9b02      	ldr	r3, [sp, #8]
    4b88:	f7ff ff75 	bl	4a76 <__sfputs_r>
    4b8c:	3001      	adds	r0, #1
    4b8e:	d075      	beq.n	4c7c <_vfiprintf_r+0x1e0>
    4b90:	696a      	ldr	r2, [r5, #20]
    4b92:	9902      	ldr	r1, [sp, #8]
    4b94:	1853      	adds	r3, r2, r1
    4b96:	616b      	str	r3, [r5, #20]
    4b98:	7823      	ldrb	r3, [r4, #0]
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	d06e      	beq.n	4c7c <_vfiprintf_r+0x1e0>
    4b9e:	2201      	movs	r2, #1
    4ba0:	4252      	negs	r2, r2
    4ba2:	606a      	str	r2, [r5, #4]
    4ba4:	466a      	mov	r2, sp
    4ba6:	2300      	movs	r3, #0
    4ba8:	325b      	adds	r2, #91	; 0x5b
    4baa:	3401      	adds	r4, #1
    4bac:	602b      	str	r3, [r5, #0]
    4bae:	60eb      	str	r3, [r5, #12]
    4bb0:	60ab      	str	r3, [r5, #8]
    4bb2:	7013      	strb	r3, [r2, #0]
    4bb4:	65ab      	str	r3, [r5, #88]	; 0x58
    4bb6:	7821      	ldrb	r1, [r4, #0]
    4bb8:	483a      	ldr	r0, [pc, #232]	; (4ca4 <_vfiprintf_r+0x208>)
    4bba:	2205      	movs	r2, #5
    4bbc:	f000 fc9e 	bl	54fc <memchr>
    4bc0:	2800      	cmp	r0, #0
    4bc2:	d008      	beq.n	4bd6 <_vfiprintf_r+0x13a>
    4bc4:	4a37      	ldr	r2, [pc, #220]	; (4ca4 <_vfiprintf_r+0x208>)
    4bc6:	3401      	adds	r4, #1
    4bc8:	1a83      	subs	r3, r0, r2
    4bca:	2001      	movs	r0, #1
    4bcc:	4098      	lsls	r0, r3
    4bce:	682b      	ldr	r3, [r5, #0]
    4bd0:	4318      	orrs	r0, r3
    4bd2:	6028      	str	r0, [r5, #0]
    4bd4:	e7ef      	b.n	4bb6 <_vfiprintf_r+0x11a>
    4bd6:	682b      	ldr	r3, [r5, #0]
    4bd8:	06d9      	lsls	r1, r3, #27
    4bda:	d503      	bpl.n	4be4 <_vfiprintf_r+0x148>
    4bdc:	466a      	mov	r2, sp
    4bde:	2120      	movs	r1, #32
    4be0:	325b      	adds	r2, #91	; 0x5b
    4be2:	7011      	strb	r1, [r2, #0]
    4be4:	071a      	lsls	r2, r3, #28
    4be6:	d503      	bpl.n	4bf0 <_vfiprintf_r+0x154>
    4be8:	466a      	mov	r2, sp
    4bea:	212b      	movs	r1, #43	; 0x2b
    4bec:	325b      	adds	r2, #91	; 0x5b
    4bee:	7011      	strb	r1, [r2, #0]
    4bf0:	7822      	ldrb	r2, [r4, #0]
    4bf2:	2a2a      	cmp	r2, #42	; 0x2a
    4bf4:	d084      	beq.n	4b00 <_vfiprintf_r+0x64>
    4bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4bf8:	e005      	b.n	4c06 <_vfiprintf_r+0x16a>
    4bfa:	4252      	negs	r2, r2
    4bfc:	60ea      	str	r2, [r5, #12]
    4bfe:	2202      	movs	r2, #2
    4c00:	4313      	orrs	r3, r2
    4c02:	602b      	str	r3, [r5, #0]
    4c04:	e783      	b.n	4b0e <_vfiprintf_r+0x72>
    4c06:	7822      	ldrb	r2, [r4, #0]
    4c08:	3a30      	subs	r2, #48	; 0x30
    4c0a:	2a09      	cmp	r2, #9
    4c0c:	d804      	bhi.n	4c18 <_vfiprintf_r+0x17c>
    4c0e:	210a      	movs	r1, #10
    4c10:	434b      	muls	r3, r1
    4c12:	3401      	adds	r4, #1
    4c14:	189b      	adds	r3, r3, r2
    4c16:	e7f6      	b.n	4c06 <_vfiprintf_r+0x16a>
    4c18:	9309      	str	r3, [sp, #36]	; 0x24
    4c1a:	e779      	b.n	4b10 <_vfiprintf_r+0x74>
    4c1c:	7863      	ldrb	r3, [r4, #1]
    4c1e:	2b2a      	cmp	r3, #42	; 0x2a
    4c20:	d109      	bne.n	4c36 <_vfiprintf_r+0x19a>
    4c22:	9b05      	ldr	r3, [sp, #20]
    4c24:	3402      	adds	r4, #2
    4c26:	1d1a      	adds	r2, r3, #4
    4c28:	681b      	ldr	r3, [r3, #0]
    4c2a:	9205      	str	r2, [sp, #20]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	da0d      	bge.n	4c4c <_vfiprintf_r+0x1b0>
    4c30:	2301      	movs	r3, #1
    4c32:	425b      	negs	r3, r3
    4c34:	e00a      	b.n	4c4c <_vfiprintf_r+0x1b0>
    4c36:	3401      	adds	r4, #1
    4c38:	2300      	movs	r3, #0
    4c3a:	7822      	ldrb	r2, [r4, #0]
    4c3c:	3a30      	subs	r2, #48	; 0x30
    4c3e:	2a09      	cmp	r2, #9
    4c40:	d804      	bhi.n	4c4c <_vfiprintf_r+0x1b0>
    4c42:	210a      	movs	r1, #10
    4c44:	434b      	muls	r3, r1
    4c46:	3401      	adds	r4, #1
    4c48:	189b      	adds	r3, r3, r2
    4c4a:	e7f6      	b.n	4c3a <_vfiprintf_r+0x19e>
    4c4c:	9307      	str	r3, [sp, #28]
    4c4e:	e763      	b.n	4b18 <_vfiprintf_r+0x7c>
    4c50:	ab05      	add	r3, sp, #20
    4c52:	9300      	str	r3, [sp, #0]
    4c54:	1c30      	adds	r0, r6, #0
    4c56:	1c29      	adds	r1, r5, #0
    4c58:	1c3a      	adds	r2, r7, #0
    4c5a:	4b13      	ldr	r3, [pc, #76]	; (4ca8 <_vfiprintf_r+0x20c>)
    4c5c:	e000      	b.n	4c60 <_vfiprintf_r+0x1c4>
    4c5e:	bf00      	nop
    4c60:	e007      	b.n	4c72 <_vfiprintf_r+0x1d6>
    4c62:	ab05      	add	r3, sp, #20
    4c64:	9300      	str	r3, [sp, #0]
    4c66:	1c30      	adds	r0, r6, #0
    4c68:	1c29      	adds	r1, r5, #0
    4c6a:	1c3a      	adds	r2, r7, #0
    4c6c:	4b0e      	ldr	r3, [pc, #56]	; (4ca8 <_vfiprintf_r+0x20c>)
    4c6e:	f000 f891 	bl	4d94 <_printf_i>
    4c72:	9004      	str	r0, [sp, #16]
    4c74:	9904      	ldr	r1, [sp, #16]
    4c76:	3101      	adds	r1, #1
    4c78:	d000      	beq.n	4c7c <_vfiprintf_r+0x1e0>
    4c7a:	e770      	b.n	4b5e <_vfiprintf_r+0xc2>
    4c7c:	89bb      	ldrh	r3, [r7, #12]
    4c7e:	065a      	lsls	r2, r3, #25
    4c80:	d500      	bpl.n	4c84 <_vfiprintf_r+0x1e8>
    4c82:	e73a      	b.n	4afa <_vfiprintf_r+0x5e>
    4c84:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4c86:	b01f      	add	sp, #124	; 0x7c
    4c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c8a:	46c0      	nop			; (mov r8, r8)
    4c8c:	00005920 	.word	0x00005920
    4c90:	00005940 	.word	0x00005940
    4c94:	00005960 	.word	0x00005960
    4c98:	000058f2 	.word	0x000058f2
    4c9c:	000058f6 	.word	0x000058f6
    4ca0:	00000000 	.word	0x00000000
    4ca4:	000058ec 	.word	0x000058ec
    4ca8:	00004a77 	.word	0x00004a77

00004cac <_printf_common>:
    4cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4cae:	1c15      	adds	r5, r2, #0
    4cb0:	9301      	str	r3, [sp, #4]
    4cb2:	690a      	ldr	r2, [r1, #16]
    4cb4:	688b      	ldr	r3, [r1, #8]
    4cb6:	1c06      	adds	r6, r0, #0
    4cb8:	1c0c      	adds	r4, r1, #0
    4cba:	4293      	cmp	r3, r2
    4cbc:	da00      	bge.n	4cc0 <_printf_common+0x14>
    4cbe:	1c13      	adds	r3, r2, #0
    4cc0:	1c22      	adds	r2, r4, #0
    4cc2:	602b      	str	r3, [r5, #0]
    4cc4:	3243      	adds	r2, #67	; 0x43
    4cc6:	7812      	ldrb	r2, [r2, #0]
    4cc8:	2a00      	cmp	r2, #0
    4cca:	d001      	beq.n	4cd0 <_printf_common+0x24>
    4ccc:	3301      	adds	r3, #1
    4cce:	602b      	str	r3, [r5, #0]
    4cd0:	6820      	ldr	r0, [r4, #0]
    4cd2:	0680      	lsls	r0, r0, #26
    4cd4:	d502      	bpl.n	4cdc <_printf_common+0x30>
    4cd6:	682b      	ldr	r3, [r5, #0]
    4cd8:	3302      	adds	r3, #2
    4cda:	602b      	str	r3, [r5, #0]
    4cdc:	6821      	ldr	r1, [r4, #0]
    4cde:	2706      	movs	r7, #6
    4ce0:	400f      	ands	r7, r1
    4ce2:	d01f      	beq.n	4d24 <_printf_common+0x78>
    4ce4:	1c23      	adds	r3, r4, #0
    4ce6:	3343      	adds	r3, #67	; 0x43
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	1e5a      	subs	r2, r3, #1
    4cec:	4193      	sbcs	r3, r2
    4cee:	6822      	ldr	r2, [r4, #0]
    4cf0:	0692      	lsls	r2, r2, #26
    4cf2:	d51f      	bpl.n	4d34 <_printf_common+0x88>
    4cf4:	18e1      	adds	r1, r4, r3
    4cf6:	3140      	adds	r1, #64	; 0x40
    4cf8:	2030      	movs	r0, #48	; 0x30
    4cfa:	70c8      	strb	r0, [r1, #3]
    4cfc:	1c21      	adds	r1, r4, #0
    4cfe:	1c5a      	adds	r2, r3, #1
    4d00:	3145      	adds	r1, #69	; 0x45
    4d02:	7809      	ldrb	r1, [r1, #0]
    4d04:	18a2      	adds	r2, r4, r2
    4d06:	3240      	adds	r2, #64	; 0x40
    4d08:	3302      	adds	r3, #2
    4d0a:	70d1      	strb	r1, [r2, #3]
    4d0c:	e012      	b.n	4d34 <_printf_common+0x88>
    4d0e:	1c22      	adds	r2, r4, #0
    4d10:	1c30      	adds	r0, r6, #0
    4d12:	9901      	ldr	r1, [sp, #4]
    4d14:	3219      	adds	r2, #25
    4d16:	2301      	movs	r3, #1
    4d18:	9f08      	ldr	r7, [sp, #32]
    4d1a:	47b8      	blx	r7
    4d1c:	3001      	adds	r0, #1
    4d1e:	d011      	beq.n	4d44 <_printf_common+0x98>
    4d20:	9f00      	ldr	r7, [sp, #0]
    4d22:	3701      	adds	r7, #1
    4d24:	9700      	str	r7, [sp, #0]
    4d26:	68e0      	ldr	r0, [r4, #12]
    4d28:	6829      	ldr	r1, [r5, #0]
    4d2a:	9f00      	ldr	r7, [sp, #0]
    4d2c:	1a43      	subs	r3, r0, r1
    4d2e:	429f      	cmp	r7, r3
    4d30:	dbed      	blt.n	4d0e <_printf_common+0x62>
    4d32:	e7d7      	b.n	4ce4 <_printf_common+0x38>
    4d34:	1c22      	adds	r2, r4, #0
    4d36:	1c30      	adds	r0, r6, #0
    4d38:	9901      	ldr	r1, [sp, #4]
    4d3a:	3243      	adds	r2, #67	; 0x43
    4d3c:	9f08      	ldr	r7, [sp, #32]
    4d3e:	47b8      	blx	r7
    4d40:	3001      	adds	r0, #1
    4d42:	d102      	bne.n	4d4a <_printf_common+0x9e>
    4d44:	2001      	movs	r0, #1
    4d46:	4240      	negs	r0, r0
    4d48:	e023      	b.n	4d92 <_printf_common+0xe6>
    4d4a:	6820      	ldr	r0, [r4, #0]
    4d4c:	2106      	movs	r1, #6
    4d4e:	682b      	ldr	r3, [r5, #0]
    4d50:	68e2      	ldr	r2, [r4, #12]
    4d52:	4001      	ands	r1, r0
    4d54:	2500      	movs	r5, #0
    4d56:	2904      	cmp	r1, #4
    4d58:	d103      	bne.n	4d62 <_printf_common+0xb6>
    4d5a:	1ad5      	subs	r5, r2, r3
    4d5c:	43eb      	mvns	r3, r5
    4d5e:	17db      	asrs	r3, r3, #31
    4d60:	401d      	ands	r5, r3
    4d62:	68a2      	ldr	r2, [r4, #8]
    4d64:	6923      	ldr	r3, [r4, #16]
    4d66:	429a      	cmp	r2, r3
    4d68:	dd01      	ble.n	4d6e <_printf_common+0xc2>
    4d6a:	1ad3      	subs	r3, r2, r3
    4d6c:	18ed      	adds	r5, r5, r3
    4d6e:	2700      	movs	r7, #0
    4d70:	9700      	str	r7, [sp, #0]
    4d72:	9f00      	ldr	r7, [sp, #0]
    4d74:	42af      	cmp	r7, r5
    4d76:	da0b      	bge.n	4d90 <_printf_common+0xe4>
    4d78:	1c22      	adds	r2, r4, #0
    4d7a:	1c30      	adds	r0, r6, #0
    4d7c:	9901      	ldr	r1, [sp, #4]
    4d7e:	321a      	adds	r2, #26
    4d80:	2301      	movs	r3, #1
    4d82:	9f08      	ldr	r7, [sp, #32]
    4d84:	47b8      	blx	r7
    4d86:	3001      	adds	r0, #1
    4d88:	d0dc      	beq.n	4d44 <_printf_common+0x98>
    4d8a:	9f00      	ldr	r7, [sp, #0]
    4d8c:	3701      	adds	r7, #1
    4d8e:	e7ef      	b.n	4d70 <_printf_common+0xc4>
    4d90:	2000      	movs	r0, #0
    4d92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004d94 <_printf_i>:
    4d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d96:	1c0d      	adds	r5, r1, #0
    4d98:	b08b      	sub	sp, #44	; 0x2c
    4d9a:	3543      	adds	r5, #67	; 0x43
    4d9c:	9206      	str	r2, [sp, #24]
    4d9e:	9005      	str	r0, [sp, #20]
    4da0:	9307      	str	r3, [sp, #28]
    4da2:	9504      	str	r5, [sp, #16]
    4da4:	7e0b      	ldrb	r3, [r1, #24]
    4da6:	1c0c      	adds	r4, r1, #0
    4da8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4daa:	2b6e      	cmp	r3, #110	; 0x6e
    4dac:	d100      	bne.n	4db0 <_printf_i+0x1c>
    4dae:	e0a7      	b.n	4f00 <_printf_i+0x16c>
    4db0:	d811      	bhi.n	4dd6 <_printf_i+0x42>
    4db2:	2b63      	cmp	r3, #99	; 0x63
    4db4:	d022      	beq.n	4dfc <_printf_i+0x68>
    4db6:	d809      	bhi.n	4dcc <_printf_i+0x38>
    4db8:	2b00      	cmp	r3, #0
    4dba:	d100      	bne.n	4dbe <_printf_i+0x2a>
    4dbc:	e0b0      	b.n	4f20 <_printf_i+0x18c>
    4dbe:	2b58      	cmp	r3, #88	; 0x58
    4dc0:	d000      	beq.n	4dc4 <_printf_i+0x30>
    4dc2:	e0c0      	b.n	4f46 <_printf_i+0x1b2>
    4dc4:	3145      	adds	r1, #69	; 0x45
    4dc6:	700b      	strb	r3, [r1, #0]
    4dc8:	4d7b      	ldr	r5, [pc, #492]	; (4fb8 <_printf_i+0x224>)
    4dca:	e04e      	b.n	4e6a <_printf_i+0xd6>
    4dcc:	2b64      	cmp	r3, #100	; 0x64
    4dce:	d01c      	beq.n	4e0a <_printf_i+0x76>
    4dd0:	2b69      	cmp	r3, #105	; 0x69
    4dd2:	d01a      	beq.n	4e0a <_printf_i+0x76>
    4dd4:	e0b7      	b.n	4f46 <_printf_i+0x1b2>
    4dd6:	2b73      	cmp	r3, #115	; 0x73
    4dd8:	d100      	bne.n	4ddc <_printf_i+0x48>
    4dda:	e0a5      	b.n	4f28 <_printf_i+0x194>
    4ddc:	d809      	bhi.n	4df2 <_printf_i+0x5e>
    4dde:	2b6f      	cmp	r3, #111	; 0x6f
    4de0:	d029      	beq.n	4e36 <_printf_i+0xa2>
    4de2:	2b70      	cmp	r3, #112	; 0x70
    4de4:	d000      	beq.n	4de8 <_printf_i+0x54>
    4de6:	e0ae      	b.n	4f46 <_printf_i+0x1b2>
    4de8:	680e      	ldr	r6, [r1, #0]
    4dea:	2320      	movs	r3, #32
    4dec:	4333      	orrs	r3, r6
    4dee:	600b      	str	r3, [r1, #0]
    4df0:	e036      	b.n	4e60 <_printf_i+0xcc>
    4df2:	2b75      	cmp	r3, #117	; 0x75
    4df4:	d01f      	beq.n	4e36 <_printf_i+0xa2>
    4df6:	2b78      	cmp	r3, #120	; 0x78
    4df8:	d032      	beq.n	4e60 <_printf_i+0xcc>
    4dfa:	e0a4      	b.n	4f46 <_printf_i+0x1b2>
    4dfc:	6813      	ldr	r3, [r2, #0]
    4dfe:	1c0d      	adds	r5, r1, #0
    4e00:	1d19      	adds	r1, r3, #4
    4e02:	3542      	adds	r5, #66	; 0x42
    4e04:	6011      	str	r1, [r2, #0]
    4e06:	681b      	ldr	r3, [r3, #0]
    4e08:	e09f      	b.n	4f4a <_printf_i+0x1b6>
    4e0a:	6821      	ldr	r1, [r4, #0]
    4e0c:	6813      	ldr	r3, [r2, #0]
    4e0e:	060e      	lsls	r6, r1, #24
    4e10:	d503      	bpl.n	4e1a <_printf_i+0x86>
    4e12:	1d19      	adds	r1, r3, #4
    4e14:	6011      	str	r1, [r2, #0]
    4e16:	681e      	ldr	r6, [r3, #0]
    4e18:	e005      	b.n	4e26 <_printf_i+0x92>
    4e1a:	0648      	lsls	r0, r1, #25
    4e1c:	d5f9      	bpl.n	4e12 <_printf_i+0x7e>
    4e1e:	1d19      	adds	r1, r3, #4
    4e20:	6011      	str	r1, [r2, #0]
    4e22:	2100      	movs	r1, #0
    4e24:	5e5e      	ldrsh	r6, [r3, r1]
    4e26:	4b64      	ldr	r3, [pc, #400]	; (4fb8 <_printf_i+0x224>)
    4e28:	2e00      	cmp	r6, #0
    4e2a:	da3b      	bge.n	4ea4 <_printf_i+0x110>
    4e2c:	9d04      	ldr	r5, [sp, #16]
    4e2e:	222d      	movs	r2, #45	; 0x2d
    4e30:	4276      	negs	r6, r6
    4e32:	702a      	strb	r2, [r5, #0]
    4e34:	e036      	b.n	4ea4 <_printf_i+0x110>
    4e36:	6821      	ldr	r1, [r4, #0]
    4e38:	6813      	ldr	r3, [r2, #0]
    4e3a:	060e      	lsls	r6, r1, #24
    4e3c:	d503      	bpl.n	4e46 <_printf_i+0xb2>
    4e3e:	1d19      	adds	r1, r3, #4
    4e40:	6011      	str	r1, [r2, #0]
    4e42:	681e      	ldr	r6, [r3, #0]
    4e44:	e004      	b.n	4e50 <_printf_i+0xbc>
    4e46:	0648      	lsls	r0, r1, #25
    4e48:	d5f9      	bpl.n	4e3e <_printf_i+0xaa>
    4e4a:	1d19      	adds	r1, r3, #4
    4e4c:	881e      	ldrh	r6, [r3, #0]
    4e4e:	6011      	str	r1, [r2, #0]
    4e50:	4b59      	ldr	r3, [pc, #356]	; (4fb8 <_printf_i+0x224>)
    4e52:	7e22      	ldrb	r2, [r4, #24]
    4e54:	9303      	str	r3, [sp, #12]
    4e56:	2708      	movs	r7, #8
    4e58:	2a6f      	cmp	r2, #111	; 0x6f
    4e5a:	d01e      	beq.n	4e9a <_printf_i+0x106>
    4e5c:	270a      	movs	r7, #10
    4e5e:	e01c      	b.n	4e9a <_printf_i+0x106>
    4e60:	1c23      	adds	r3, r4, #0
    4e62:	2178      	movs	r1, #120	; 0x78
    4e64:	3345      	adds	r3, #69	; 0x45
    4e66:	4d55      	ldr	r5, [pc, #340]	; (4fbc <_printf_i+0x228>)
    4e68:	7019      	strb	r1, [r3, #0]
    4e6a:	6811      	ldr	r1, [r2, #0]
    4e6c:	6823      	ldr	r3, [r4, #0]
    4e6e:	1d08      	adds	r0, r1, #4
    4e70:	9503      	str	r5, [sp, #12]
    4e72:	6010      	str	r0, [r2, #0]
    4e74:	061e      	lsls	r6, r3, #24
    4e76:	d501      	bpl.n	4e7c <_printf_i+0xe8>
    4e78:	680e      	ldr	r6, [r1, #0]
    4e7a:	e002      	b.n	4e82 <_printf_i+0xee>
    4e7c:	0658      	lsls	r0, r3, #25
    4e7e:	d5fb      	bpl.n	4e78 <_printf_i+0xe4>
    4e80:	880e      	ldrh	r6, [r1, #0]
    4e82:	07d9      	lsls	r1, r3, #31
    4e84:	d502      	bpl.n	4e8c <_printf_i+0xf8>
    4e86:	2220      	movs	r2, #32
    4e88:	4313      	orrs	r3, r2
    4e8a:	6023      	str	r3, [r4, #0]
    4e8c:	2710      	movs	r7, #16
    4e8e:	2e00      	cmp	r6, #0
    4e90:	d103      	bne.n	4e9a <_printf_i+0x106>
    4e92:	6822      	ldr	r2, [r4, #0]
    4e94:	2320      	movs	r3, #32
    4e96:	439a      	bics	r2, r3
    4e98:	6022      	str	r2, [r4, #0]
    4e9a:	1c23      	adds	r3, r4, #0
    4e9c:	2200      	movs	r2, #0
    4e9e:	3343      	adds	r3, #67	; 0x43
    4ea0:	701a      	strb	r2, [r3, #0]
    4ea2:	e001      	b.n	4ea8 <_printf_i+0x114>
    4ea4:	9303      	str	r3, [sp, #12]
    4ea6:	270a      	movs	r7, #10
    4ea8:	6863      	ldr	r3, [r4, #4]
    4eaa:	60a3      	str	r3, [r4, #8]
    4eac:	2b00      	cmp	r3, #0
    4eae:	db03      	blt.n	4eb8 <_printf_i+0x124>
    4eb0:	6825      	ldr	r5, [r4, #0]
    4eb2:	2204      	movs	r2, #4
    4eb4:	4395      	bics	r5, r2
    4eb6:	6025      	str	r5, [r4, #0]
    4eb8:	2e00      	cmp	r6, #0
    4eba:	d102      	bne.n	4ec2 <_printf_i+0x12e>
    4ebc:	9d04      	ldr	r5, [sp, #16]
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d00e      	beq.n	4ee0 <_printf_i+0x14c>
    4ec2:	9d04      	ldr	r5, [sp, #16]
    4ec4:	1c30      	adds	r0, r6, #0
    4ec6:	1c39      	adds	r1, r7, #0
    4ec8:	f7ff fc68 	bl	479c <__aeabi_uidivmod>
    4ecc:	9803      	ldr	r0, [sp, #12]
    4ece:	3d01      	subs	r5, #1
    4ed0:	5c43      	ldrb	r3, [r0, r1]
    4ed2:	1c30      	adds	r0, r6, #0
    4ed4:	702b      	strb	r3, [r5, #0]
    4ed6:	1c39      	adds	r1, r7, #0
    4ed8:	f7ff fc1c 	bl	4714 <__aeabi_uidiv>
    4edc:	1e06      	subs	r6, r0, #0
    4ede:	d1f1      	bne.n	4ec4 <_printf_i+0x130>
    4ee0:	2f08      	cmp	r7, #8
    4ee2:	d109      	bne.n	4ef8 <_printf_i+0x164>
    4ee4:	6821      	ldr	r1, [r4, #0]
    4ee6:	07c9      	lsls	r1, r1, #31
    4ee8:	d506      	bpl.n	4ef8 <_printf_i+0x164>
    4eea:	6862      	ldr	r2, [r4, #4]
    4eec:	6923      	ldr	r3, [r4, #16]
    4eee:	429a      	cmp	r2, r3
    4ef0:	dc02      	bgt.n	4ef8 <_printf_i+0x164>
    4ef2:	3d01      	subs	r5, #1
    4ef4:	2330      	movs	r3, #48	; 0x30
    4ef6:	702b      	strb	r3, [r5, #0]
    4ef8:	9e04      	ldr	r6, [sp, #16]
    4efa:	1b73      	subs	r3, r6, r5
    4efc:	6123      	str	r3, [r4, #16]
    4efe:	e02a      	b.n	4f56 <_printf_i+0x1c2>
    4f00:	6808      	ldr	r0, [r1, #0]
    4f02:	6813      	ldr	r3, [r2, #0]
    4f04:	6949      	ldr	r1, [r1, #20]
    4f06:	0605      	lsls	r5, r0, #24
    4f08:	d504      	bpl.n	4f14 <_printf_i+0x180>
    4f0a:	1d18      	adds	r0, r3, #4
    4f0c:	6010      	str	r0, [r2, #0]
    4f0e:	681b      	ldr	r3, [r3, #0]
    4f10:	6019      	str	r1, [r3, #0]
    4f12:	e005      	b.n	4f20 <_printf_i+0x18c>
    4f14:	0646      	lsls	r6, r0, #25
    4f16:	d5f8      	bpl.n	4f0a <_printf_i+0x176>
    4f18:	1d18      	adds	r0, r3, #4
    4f1a:	6010      	str	r0, [r2, #0]
    4f1c:	681b      	ldr	r3, [r3, #0]
    4f1e:	8019      	strh	r1, [r3, #0]
    4f20:	2300      	movs	r3, #0
    4f22:	6123      	str	r3, [r4, #16]
    4f24:	9d04      	ldr	r5, [sp, #16]
    4f26:	e016      	b.n	4f56 <_printf_i+0x1c2>
    4f28:	6813      	ldr	r3, [r2, #0]
    4f2a:	1d19      	adds	r1, r3, #4
    4f2c:	6011      	str	r1, [r2, #0]
    4f2e:	681d      	ldr	r5, [r3, #0]
    4f30:	1c28      	adds	r0, r5, #0
    4f32:	f000 fbe9 	bl	5708 <strlen>
    4f36:	6863      	ldr	r3, [r4, #4]
    4f38:	6120      	str	r0, [r4, #16]
    4f3a:	4298      	cmp	r0, r3
    4f3c:	d900      	bls.n	4f40 <_printf_i+0x1ac>
    4f3e:	6123      	str	r3, [r4, #16]
    4f40:	6920      	ldr	r0, [r4, #16]
    4f42:	6060      	str	r0, [r4, #4]
    4f44:	e004      	b.n	4f50 <_printf_i+0x1bc>
    4f46:	1c25      	adds	r5, r4, #0
    4f48:	3542      	adds	r5, #66	; 0x42
    4f4a:	702b      	strb	r3, [r5, #0]
    4f4c:	2301      	movs	r3, #1
    4f4e:	6123      	str	r3, [r4, #16]
    4f50:	9e04      	ldr	r6, [sp, #16]
    4f52:	2300      	movs	r3, #0
    4f54:	7033      	strb	r3, [r6, #0]
    4f56:	9e07      	ldr	r6, [sp, #28]
    4f58:	9805      	ldr	r0, [sp, #20]
    4f5a:	9600      	str	r6, [sp, #0]
    4f5c:	1c21      	adds	r1, r4, #0
    4f5e:	aa09      	add	r2, sp, #36	; 0x24
    4f60:	9b06      	ldr	r3, [sp, #24]
    4f62:	f7ff fea3 	bl	4cac <_printf_common>
    4f66:	3001      	adds	r0, #1
    4f68:	d102      	bne.n	4f70 <_printf_i+0x1dc>
    4f6a:	2001      	movs	r0, #1
    4f6c:	4240      	negs	r0, r0
    4f6e:	e021      	b.n	4fb4 <_printf_i+0x220>
    4f70:	1c2a      	adds	r2, r5, #0
    4f72:	9805      	ldr	r0, [sp, #20]
    4f74:	9906      	ldr	r1, [sp, #24]
    4f76:	6923      	ldr	r3, [r4, #16]
    4f78:	9d07      	ldr	r5, [sp, #28]
    4f7a:	47a8      	blx	r5
    4f7c:	3001      	adds	r0, #1
    4f7e:	d0f4      	beq.n	4f6a <_printf_i+0x1d6>
    4f80:	6826      	ldr	r6, [r4, #0]
    4f82:	07b6      	lsls	r6, r6, #30
    4f84:	d405      	bmi.n	4f92 <_printf_i+0x1fe>
    4f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f88:	68e0      	ldr	r0, [r4, #12]
    4f8a:	4298      	cmp	r0, r3
    4f8c:	da12      	bge.n	4fb4 <_printf_i+0x220>
    4f8e:	1c18      	adds	r0, r3, #0
    4f90:	e010      	b.n	4fb4 <_printf_i+0x220>
    4f92:	2500      	movs	r5, #0
    4f94:	68e0      	ldr	r0, [r4, #12]
    4f96:	9909      	ldr	r1, [sp, #36]	; 0x24
    4f98:	1a43      	subs	r3, r0, r1
    4f9a:	429d      	cmp	r5, r3
    4f9c:	daf3      	bge.n	4f86 <_printf_i+0x1f2>
    4f9e:	1c22      	adds	r2, r4, #0
    4fa0:	9805      	ldr	r0, [sp, #20]
    4fa2:	9906      	ldr	r1, [sp, #24]
    4fa4:	3219      	adds	r2, #25
    4fa6:	2301      	movs	r3, #1
    4fa8:	9e07      	ldr	r6, [sp, #28]
    4faa:	47b0      	blx	r6
    4fac:	3001      	adds	r0, #1
    4fae:	d0dc      	beq.n	4f6a <_printf_i+0x1d6>
    4fb0:	3501      	adds	r5, #1
    4fb2:	e7ef      	b.n	4f94 <_printf_i+0x200>
    4fb4:	b00b      	add	sp, #44	; 0x2c
    4fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fb8:	000058fd 	.word	0x000058fd
    4fbc:	0000590e 	.word	0x0000590e

00004fc0 <__swbuf_r>:
    4fc0:	b570      	push	{r4, r5, r6, lr}
    4fc2:	1c05      	adds	r5, r0, #0
    4fc4:	1c0e      	adds	r6, r1, #0
    4fc6:	1c14      	adds	r4, r2, #0
    4fc8:	2800      	cmp	r0, #0
    4fca:	d004      	beq.n	4fd6 <__swbuf_r+0x16>
    4fcc:	6982      	ldr	r2, [r0, #24]
    4fce:	2a00      	cmp	r2, #0
    4fd0:	d101      	bne.n	4fd6 <__swbuf_r+0x16>
    4fd2:	f000 f9c9 	bl	5368 <__sinit>
    4fd6:	4b23      	ldr	r3, [pc, #140]	; (5064 <__swbuf_r+0xa4>)
    4fd8:	429c      	cmp	r4, r3
    4fda:	d101      	bne.n	4fe0 <__swbuf_r+0x20>
    4fdc:	686c      	ldr	r4, [r5, #4]
    4fde:	e008      	b.n	4ff2 <__swbuf_r+0x32>
    4fe0:	4b21      	ldr	r3, [pc, #132]	; (5068 <__swbuf_r+0xa8>)
    4fe2:	429c      	cmp	r4, r3
    4fe4:	d101      	bne.n	4fea <__swbuf_r+0x2a>
    4fe6:	68ac      	ldr	r4, [r5, #8]
    4fe8:	e003      	b.n	4ff2 <__swbuf_r+0x32>
    4fea:	4b20      	ldr	r3, [pc, #128]	; (506c <__swbuf_r+0xac>)
    4fec:	429c      	cmp	r4, r3
    4fee:	d100      	bne.n	4ff2 <__swbuf_r+0x32>
    4ff0:	68ec      	ldr	r4, [r5, #12]
    4ff2:	69a3      	ldr	r3, [r4, #24]
    4ff4:	60a3      	str	r3, [r4, #8]
    4ff6:	89a3      	ldrh	r3, [r4, #12]
    4ff8:	071a      	lsls	r2, r3, #28
    4ffa:	d50a      	bpl.n	5012 <__swbuf_r+0x52>
    4ffc:	6923      	ldr	r3, [r4, #16]
    4ffe:	2b00      	cmp	r3, #0
    5000:	d007      	beq.n	5012 <__swbuf_r+0x52>
    5002:	6822      	ldr	r2, [r4, #0]
    5004:	6923      	ldr	r3, [r4, #16]
    5006:	b2f6      	uxtb	r6, r6
    5008:	1ad0      	subs	r0, r2, r3
    500a:	6962      	ldr	r2, [r4, #20]
    500c:	4290      	cmp	r0, r2
    500e:	db0f      	blt.n	5030 <__swbuf_r+0x70>
    5010:	e008      	b.n	5024 <__swbuf_r+0x64>
    5012:	1c28      	adds	r0, r5, #0
    5014:	1c21      	adds	r1, r4, #0
    5016:	f000 f82b 	bl	5070 <__swsetup_r>
    501a:	2800      	cmp	r0, #0
    501c:	d0f1      	beq.n	5002 <__swbuf_r+0x42>
    501e:	2001      	movs	r0, #1
    5020:	4240      	negs	r0, r0
    5022:	e01d      	b.n	5060 <__swbuf_r+0xa0>
    5024:	1c28      	adds	r0, r5, #0
    5026:	1c21      	adds	r1, r4, #0
    5028:	f000 f91e 	bl	5268 <_fflush_r>
    502c:	2800      	cmp	r0, #0
    502e:	d1f6      	bne.n	501e <__swbuf_r+0x5e>
    5030:	68a3      	ldr	r3, [r4, #8]
    5032:	3001      	adds	r0, #1
    5034:	3b01      	subs	r3, #1
    5036:	60a3      	str	r3, [r4, #8]
    5038:	6823      	ldr	r3, [r4, #0]
    503a:	1c5a      	adds	r2, r3, #1
    503c:	6022      	str	r2, [r4, #0]
    503e:	701e      	strb	r6, [r3, #0]
    5040:	6963      	ldr	r3, [r4, #20]
    5042:	4298      	cmp	r0, r3
    5044:	d005      	beq.n	5052 <__swbuf_r+0x92>
    5046:	89a3      	ldrh	r3, [r4, #12]
    5048:	1c30      	adds	r0, r6, #0
    504a:	07da      	lsls	r2, r3, #31
    504c:	d508      	bpl.n	5060 <__swbuf_r+0xa0>
    504e:	2e0a      	cmp	r6, #10
    5050:	d106      	bne.n	5060 <__swbuf_r+0xa0>
    5052:	1c28      	adds	r0, r5, #0
    5054:	1c21      	adds	r1, r4, #0
    5056:	f000 f907 	bl	5268 <_fflush_r>
    505a:	2800      	cmp	r0, #0
    505c:	d1df      	bne.n	501e <__swbuf_r+0x5e>
    505e:	1c30      	adds	r0, r6, #0
    5060:	bd70      	pop	{r4, r5, r6, pc}
    5062:	46c0      	nop			; (mov r8, r8)
    5064:	00005920 	.word	0x00005920
    5068:	00005940 	.word	0x00005940
    506c:	00005960 	.word	0x00005960

00005070 <__swsetup_r>:
    5070:	4b34      	ldr	r3, [pc, #208]	; (5144 <__swsetup_r+0xd4>)
    5072:	b570      	push	{r4, r5, r6, lr}
    5074:	681d      	ldr	r5, [r3, #0]
    5076:	1c06      	adds	r6, r0, #0
    5078:	1c0c      	adds	r4, r1, #0
    507a:	2d00      	cmp	r5, #0
    507c:	d005      	beq.n	508a <__swsetup_r+0x1a>
    507e:	69a9      	ldr	r1, [r5, #24]
    5080:	2900      	cmp	r1, #0
    5082:	d102      	bne.n	508a <__swsetup_r+0x1a>
    5084:	1c28      	adds	r0, r5, #0
    5086:	f000 f96f 	bl	5368 <__sinit>
    508a:	4b2f      	ldr	r3, [pc, #188]	; (5148 <__swsetup_r+0xd8>)
    508c:	429c      	cmp	r4, r3
    508e:	d101      	bne.n	5094 <__swsetup_r+0x24>
    5090:	686c      	ldr	r4, [r5, #4]
    5092:	e008      	b.n	50a6 <__swsetup_r+0x36>
    5094:	4b2d      	ldr	r3, [pc, #180]	; (514c <__swsetup_r+0xdc>)
    5096:	429c      	cmp	r4, r3
    5098:	d101      	bne.n	509e <__swsetup_r+0x2e>
    509a:	68ac      	ldr	r4, [r5, #8]
    509c:	e003      	b.n	50a6 <__swsetup_r+0x36>
    509e:	4b2c      	ldr	r3, [pc, #176]	; (5150 <__swsetup_r+0xe0>)
    50a0:	429c      	cmp	r4, r3
    50a2:	d100      	bne.n	50a6 <__swsetup_r+0x36>
    50a4:	68ec      	ldr	r4, [r5, #12]
    50a6:	89a2      	ldrh	r2, [r4, #12]
    50a8:	b293      	uxth	r3, r2
    50aa:	0719      	lsls	r1, r3, #28
    50ac:	d421      	bmi.n	50f2 <__swsetup_r+0x82>
    50ae:	06d9      	lsls	r1, r3, #27
    50b0:	d405      	bmi.n	50be <__swsetup_r+0x4e>
    50b2:	2309      	movs	r3, #9
    50b4:	6033      	str	r3, [r6, #0]
    50b6:	2340      	movs	r3, #64	; 0x40
    50b8:	431a      	orrs	r2, r3
    50ba:	81a2      	strh	r2, [r4, #12]
    50bc:	e03f      	b.n	513e <__swsetup_r+0xce>
    50be:	075a      	lsls	r2, r3, #29
    50c0:	d513      	bpl.n	50ea <__swsetup_r+0x7a>
    50c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    50c4:	2900      	cmp	r1, #0
    50c6:	d008      	beq.n	50da <__swsetup_r+0x6a>
    50c8:	1c23      	adds	r3, r4, #0
    50ca:	3344      	adds	r3, #68	; 0x44
    50cc:	4299      	cmp	r1, r3
    50ce:	d002      	beq.n	50d6 <__swsetup_r+0x66>
    50d0:	1c30      	adds	r0, r6, #0
    50d2:	f000 fa1f 	bl	5514 <_free_r>
    50d6:	2300      	movs	r3, #0
    50d8:	6363      	str	r3, [r4, #52]	; 0x34
    50da:	89a3      	ldrh	r3, [r4, #12]
    50dc:	2224      	movs	r2, #36	; 0x24
    50de:	4393      	bics	r3, r2
    50e0:	81a3      	strh	r3, [r4, #12]
    50e2:	2300      	movs	r3, #0
    50e4:	6063      	str	r3, [r4, #4]
    50e6:	6923      	ldr	r3, [r4, #16]
    50e8:	6023      	str	r3, [r4, #0]
    50ea:	89a3      	ldrh	r3, [r4, #12]
    50ec:	2208      	movs	r2, #8
    50ee:	4313      	orrs	r3, r2
    50f0:	81a3      	strh	r3, [r4, #12]
    50f2:	6921      	ldr	r1, [r4, #16]
    50f4:	2900      	cmp	r1, #0
    50f6:	d10b      	bne.n	5110 <__swsetup_r+0xa0>
    50f8:	89a3      	ldrh	r3, [r4, #12]
    50fa:	22a0      	movs	r2, #160	; 0xa0
    50fc:	0092      	lsls	r2, r2, #2
    50fe:	401a      	ands	r2, r3
    5100:	2380      	movs	r3, #128	; 0x80
    5102:	009b      	lsls	r3, r3, #2
    5104:	429a      	cmp	r2, r3
    5106:	d003      	beq.n	5110 <__swsetup_r+0xa0>
    5108:	1c30      	adds	r0, r6, #0
    510a:	1c21      	adds	r1, r4, #0
    510c:	f000 f99c 	bl	5448 <__smakebuf_r>
    5110:	89a3      	ldrh	r3, [r4, #12]
    5112:	2201      	movs	r2, #1
    5114:	401a      	ands	r2, r3
    5116:	d005      	beq.n	5124 <__swsetup_r+0xb4>
    5118:	6961      	ldr	r1, [r4, #20]
    511a:	2200      	movs	r2, #0
    511c:	60a2      	str	r2, [r4, #8]
    511e:	424a      	negs	r2, r1
    5120:	61a2      	str	r2, [r4, #24]
    5122:	e003      	b.n	512c <__swsetup_r+0xbc>
    5124:	0799      	lsls	r1, r3, #30
    5126:	d400      	bmi.n	512a <__swsetup_r+0xba>
    5128:	6962      	ldr	r2, [r4, #20]
    512a:	60a2      	str	r2, [r4, #8]
    512c:	6922      	ldr	r2, [r4, #16]
    512e:	2000      	movs	r0, #0
    5130:	4282      	cmp	r2, r0
    5132:	d106      	bne.n	5142 <__swsetup_r+0xd2>
    5134:	0619      	lsls	r1, r3, #24
    5136:	d504      	bpl.n	5142 <__swsetup_r+0xd2>
    5138:	2240      	movs	r2, #64	; 0x40
    513a:	4313      	orrs	r3, r2
    513c:	81a3      	strh	r3, [r4, #12]
    513e:	2001      	movs	r0, #1
    5140:	4240      	negs	r0, r0
    5142:	bd70      	pop	{r4, r5, r6, pc}
    5144:	20000074 	.word	0x20000074
    5148:	00005920 	.word	0x00005920
    514c:	00005940 	.word	0x00005940
    5150:	00005960 	.word	0x00005960

00005154 <__sflush_r>:
    5154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5156:	898b      	ldrh	r3, [r1, #12]
    5158:	1c05      	adds	r5, r0, #0
    515a:	1c0c      	adds	r4, r1, #0
    515c:	0719      	lsls	r1, r3, #28
    515e:	d45e      	bmi.n	521e <__sflush_r+0xca>
    5160:	6862      	ldr	r2, [r4, #4]
    5162:	2a00      	cmp	r2, #0
    5164:	dc02      	bgt.n	516c <__sflush_r+0x18>
    5166:	6c27      	ldr	r7, [r4, #64]	; 0x40
    5168:	2f00      	cmp	r7, #0
    516a:	dd1a      	ble.n	51a2 <__sflush_r+0x4e>
    516c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    516e:	2f00      	cmp	r7, #0
    5170:	d017      	beq.n	51a2 <__sflush_r+0x4e>
    5172:	2200      	movs	r2, #0
    5174:	682e      	ldr	r6, [r5, #0]
    5176:	602a      	str	r2, [r5, #0]
    5178:	2280      	movs	r2, #128	; 0x80
    517a:	0152      	lsls	r2, r2, #5
    517c:	401a      	ands	r2, r3
    517e:	d001      	beq.n	5184 <__sflush_r+0x30>
    5180:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5182:	e015      	b.n	51b0 <__sflush_r+0x5c>
    5184:	1c28      	adds	r0, r5, #0
    5186:	6a21      	ldr	r1, [r4, #32]
    5188:	2301      	movs	r3, #1
    518a:	47b8      	blx	r7
    518c:	1c02      	adds	r2, r0, #0
    518e:	1c41      	adds	r1, r0, #1
    5190:	d10e      	bne.n	51b0 <__sflush_r+0x5c>
    5192:	682b      	ldr	r3, [r5, #0]
    5194:	2b00      	cmp	r3, #0
    5196:	d00b      	beq.n	51b0 <__sflush_r+0x5c>
    5198:	2b1d      	cmp	r3, #29
    519a:	d001      	beq.n	51a0 <__sflush_r+0x4c>
    519c:	2b16      	cmp	r3, #22
    519e:	d102      	bne.n	51a6 <__sflush_r+0x52>
    51a0:	602e      	str	r6, [r5, #0]
    51a2:	2000      	movs	r0, #0
    51a4:	e05e      	b.n	5264 <__sflush_r+0x110>
    51a6:	89a3      	ldrh	r3, [r4, #12]
    51a8:	2140      	movs	r1, #64	; 0x40
    51aa:	430b      	orrs	r3, r1
    51ac:	81a3      	strh	r3, [r4, #12]
    51ae:	e059      	b.n	5264 <__sflush_r+0x110>
    51b0:	89a3      	ldrh	r3, [r4, #12]
    51b2:	075f      	lsls	r7, r3, #29
    51b4:	d506      	bpl.n	51c4 <__sflush_r+0x70>
    51b6:	6861      	ldr	r1, [r4, #4]
    51b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    51ba:	1a52      	subs	r2, r2, r1
    51bc:	2b00      	cmp	r3, #0
    51be:	d001      	beq.n	51c4 <__sflush_r+0x70>
    51c0:	6c27      	ldr	r7, [r4, #64]	; 0x40
    51c2:	1bd2      	subs	r2, r2, r7
    51c4:	1c28      	adds	r0, r5, #0
    51c6:	6a21      	ldr	r1, [r4, #32]
    51c8:	2300      	movs	r3, #0
    51ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    51cc:	47b8      	blx	r7
    51ce:	89a2      	ldrh	r2, [r4, #12]
    51d0:	1c41      	adds	r1, r0, #1
    51d2:	d106      	bne.n	51e2 <__sflush_r+0x8e>
    51d4:	682b      	ldr	r3, [r5, #0]
    51d6:	2b00      	cmp	r3, #0
    51d8:	d003      	beq.n	51e2 <__sflush_r+0x8e>
    51da:	2b1d      	cmp	r3, #29
    51dc:	d001      	beq.n	51e2 <__sflush_r+0x8e>
    51de:	2b16      	cmp	r3, #22
    51e0:	d119      	bne.n	5216 <__sflush_r+0xc2>
    51e2:	2300      	movs	r3, #0
    51e4:	6063      	str	r3, [r4, #4]
    51e6:	6923      	ldr	r3, [r4, #16]
    51e8:	6023      	str	r3, [r4, #0]
    51ea:	04d7      	lsls	r7, r2, #19
    51ec:	d505      	bpl.n	51fa <__sflush_r+0xa6>
    51ee:	1c41      	adds	r1, r0, #1
    51f0:	d102      	bne.n	51f8 <__sflush_r+0xa4>
    51f2:	682a      	ldr	r2, [r5, #0]
    51f4:	2a00      	cmp	r2, #0
    51f6:	d100      	bne.n	51fa <__sflush_r+0xa6>
    51f8:	6560      	str	r0, [r4, #84]	; 0x54
    51fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    51fc:	602e      	str	r6, [r5, #0]
    51fe:	2900      	cmp	r1, #0
    5200:	d0cf      	beq.n	51a2 <__sflush_r+0x4e>
    5202:	1c23      	adds	r3, r4, #0
    5204:	3344      	adds	r3, #68	; 0x44
    5206:	4299      	cmp	r1, r3
    5208:	d002      	beq.n	5210 <__sflush_r+0xbc>
    520a:	1c28      	adds	r0, r5, #0
    520c:	f000 f982 	bl	5514 <_free_r>
    5210:	2000      	movs	r0, #0
    5212:	6360      	str	r0, [r4, #52]	; 0x34
    5214:	e026      	b.n	5264 <__sflush_r+0x110>
    5216:	2340      	movs	r3, #64	; 0x40
    5218:	431a      	orrs	r2, r3
    521a:	81a2      	strh	r2, [r4, #12]
    521c:	e022      	b.n	5264 <__sflush_r+0x110>
    521e:	6926      	ldr	r6, [r4, #16]
    5220:	2e00      	cmp	r6, #0
    5222:	d0be      	beq.n	51a2 <__sflush_r+0x4e>
    5224:	6827      	ldr	r7, [r4, #0]
    5226:	2200      	movs	r2, #0
    5228:	1bbf      	subs	r7, r7, r6
    522a:	9701      	str	r7, [sp, #4]
    522c:	6026      	str	r6, [r4, #0]
    522e:	0799      	lsls	r1, r3, #30
    5230:	d100      	bne.n	5234 <__sflush_r+0xe0>
    5232:	6962      	ldr	r2, [r4, #20]
    5234:	60a2      	str	r2, [r4, #8]
    5236:	9f01      	ldr	r7, [sp, #4]
    5238:	2f00      	cmp	r7, #0
    523a:	ddb2      	ble.n	51a2 <__sflush_r+0x4e>
    523c:	1c28      	adds	r0, r5, #0
    523e:	6a21      	ldr	r1, [r4, #32]
    5240:	1c32      	adds	r2, r6, #0
    5242:	9b01      	ldr	r3, [sp, #4]
    5244:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    5246:	47b8      	blx	r7
    5248:	2800      	cmp	r0, #0
    524a:	dc06      	bgt.n	525a <__sflush_r+0x106>
    524c:	89a3      	ldrh	r3, [r4, #12]
    524e:	2240      	movs	r2, #64	; 0x40
    5250:	4313      	orrs	r3, r2
    5252:	2001      	movs	r0, #1
    5254:	81a3      	strh	r3, [r4, #12]
    5256:	4240      	negs	r0, r0
    5258:	e004      	b.n	5264 <__sflush_r+0x110>
    525a:	9f01      	ldr	r7, [sp, #4]
    525c:	1836      	adds	r6, r6, r0
    525e:	1a3f      	subs	r7, r7, r0
    5260:	9701      	str	r7, [sp, #4]
    5262:	e7e8      	b.n	5236 <__sflush_r+0xe2>
    5264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005268 <_fflush_r>:
    5268:	690a      	ldr	r2, [r1, #16]
    526a:	b538      	push	{r3, r4, r5, lr}
    526c:	1c05      	adds	r5, r0, #0
    526e:	1c0c      	adds	r4, r1, #0
    5270:	2a00      	cmp	r2, #0
    5272:	d101      	bne.n	5278 <_fflush_r+0x10>
    5274:	2000      	movs	r0, #0
    5276:	e01c      	b.n	52b2 <_fflush_r+0x4a>
    5278:	2800      	cmp	r0, #0
    527a:	d004      	beq.n	5286 <_fflush_r+0x1e>
    527c:	6983      	ldr	r3, [r0, #24]
    527e:	2b00      	cmp	r3, #0
    5280:	d101      	bne.n	5286 <_fflush_r+0x1e>
    5282:	f000 f871 	bl	5368 <__sinit>
    5286:	4b0b      	ldr	r3, [pc, #44]	; (52b4 <_fflush_r+0x4c>)
    5288:	429c      	cmp	r4, r3
    528a:	d101      	bne.n	5290 <_fflush_r+0x28>
    528c:	686c      	ldr	r4, [r5, #4]
    528e:	e008      	b.n	52a2 <_fflush_r+0x3a>
    5290:	4b09      	ldr	r3, [pc, #36]	; (52b8 <_fflush_r+0x50>)
    5292:	429c      	cmp	r4, r3
    5294:	d101      	bne.n	529a <_fflush_r+0x32>
    5296:	68ac      	ldr	r4, [r5, #8]
    5298:	e003      	b.n	52a2 <_fflush_r+0x3a>
    529a:	4b08      	ldr	r3, [pc, #32]	; (52bc <_fflush_r+0x54>)
    529c:	429c      	cmp	r4, r3
    529e:	d100      	bne.n	52a2 <_fflush_r+0x3a>
    52a0:	68ec      	ldr	r4, [r5, #12]
    52a2:	220c      	movs	r2, #12
    52a4:	5ea3      	ldrsh	r3, [r4, r2]
    52a6:	2b00      	cmp	r3, #0
    52a8:	d0e4      	beq.n	5274 <_fflush_r+0xc>
    52aa:	1c28      	adds	r0, r5, #0
    52ac:	1c21      	adds	r1, r4, #0
    52ae:	f7ff ff51 	bl	5154 <__sflush_r>
    52b2:	bd38      	pop	{r3, r4, r5, pc}
    52b4:	00005920 	.word	0x00005920
    52b8:	00005940 	.word	0x00005940
    52bc:	00005960 	.word	0x00005960

000052c0 <_cleanup_r>:
    52c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52c2:	1c04      	adds	r4, r0, #0
    52c4:	1c07      	adds	r7, r0, #0
    52c6:	3448      	adds	r4, #72	; 0x48
    52c8:	2c00      	cmp	r4, #0
    52ca:	d012      	beq.n	52f2 <_cleanup_r+0x32>
    52cc:	68a5      	ldr	r5, [r4, #8]
    52ce:	6866      	ldr	r6, [r4, #4]
    52d0:	3e01      	subs	r6, #1
    52d2:	d40c      	bmi.n	52ee <_cleanup_r+0x2e>
    52d4:	89ab      	ldrh	r3, [r5, #12]
    52d6:	2b01      	cmp	r3, #1
    52d8:	d907      	bls.n	52ea <_cleanup_r+0x2a>
    52da:	220e      	movs	r2, #14
    52dc:	5eab      	ldrsh	r3, [r5, r2]
    52de:	3301      	adds	r3, #1
    52e0:	d003      	beq.n	52ea <_cleanup_r+0x2a>
    52e2:	1c38      	adds	r0, r7, #0
    52e4:	1c29      	adds	r1, r5, #0
    52e6:	f7ff ffbf 	bl	5268 <_fflush_r>
    52ea:	3568      	adds	r5, #104	; 0x68
    52ec:	e7f0      	b.n	52d0 <_cleanup_r+0x10>
    52ee:	6824      	ldr	r4, [r4, #0]
    52f0:	e7ea      	b.n	52c8 <_cleanup_r+0x8>
    52f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000052f4 <std.isra.0>:
    52f4:	2300      	movs	r3, #0
    52f6:	b510      	push	{r4, lr}
    52f8:	1c04      	adds	r4, r0, #0
    52fa:	6003      	str	r3, [r0, #0]
    52fc:	6043      	str	r3, [r0, #4]
    52fe:	6083      	str	r3, [r0, #8]
    5300:	8181      	strh	r1, [r0, #12]
    5302:	6643      	str	r3, [r0, #100]	; 0x64
    5304:	81c2      	strh	r2, [r0, #14]
    5306:	6103      	str	r3, [r0, #16]
    5308:	6143      	str	r3, [r0, #20]
    530a:	6183      	str	r3, [r0, #24]
    530c:	1c19      	adds	r1, r3, #0
    530e:	2208      	movs	r2, #8
    5310:	305c      	adds	r0, #92	; 0x5c
    5312:	f7ff faa0 	bl	4856 <memset>
    5316:	4b05      	ldr	r3, [pc, #20]	; (532c <std.isra.0+0x38>)
    5318:	6224      	str	r4, [r4, #32]
    531a:	6263      	str	r3, [r4, #36]	; 0x24
    531c:	4b04      	ldr	r3, [pc, #16]	; (5330 <std.isra.0+0x3c>)
    531e:	62a3      	str	r3, [r4, #40]	; 0x28
    5320:	4b04      	ldr	r3, [pc, #16]	; (5334 <std.isra.0+0x40>)
    5322:	62e3      	str	r3, [r4, #44]	; 0x2c
    5324:	4b04      	ldr	r3, [pc, #16]	; (5338 <std.isra.0+0x44>)
    5326:	6323      	str	r3, [r4, #48]	; 0x30
    5328:	bd10      	pop	{r4, pc}
    532a:	46c0      	nop			; (mov r8, r8)
    532c:	00005671 	.word	0x00005671
    5330:	00005699 	.word	0x00005699
    5334:	000056d1 	.word	0x000056d1
    5338:	000056fd 	.word	0x000056fd

0000533c <__sfmoreglue>:
    533c:	b570      	push	{r4, r5, r6, lr}
    533e:	1e4b      	subs	r3, r1, #1
    5340:	2568      	movs	r5, #104	; 0x68
    5342:	435d      	muls	r5, r3
    5344:	1c0e      	adds	r6, r1, #0
    5346:	1c29      	adds	r1, r5, #0
    5348:	3174      	adds	r1, #116	; 0x74
    534a:	f000 f92b 	bl	55a4 <_malloc_r>
    534e:	1e04      	subs	r4, r0, #0
    5350:	d008      	beq.n	5364 <__sfmoreglue+0x28>
    5352:	2100      	movs	r1, #0
    5354:	6001      	str	r1, [r0, #0]
    5356:	6046      	str	r6, [r0, #4]
    5358:	1c2a      	adds	r2, r5, #0
    535a:	300c      	adds	r0, #12
    535c:	60a0      	str	r0, [r4, #8]
    535e:	3268      	adds	r2, #104	; 0x68
    5360:	f7ff fa79 	bl	4856 <memset>
    5364:	1c20      	adds	r0, r4, #0
    5366:	bd70      	pop	{r4, r5, r6, pc}

00005368 <__sinit>:
    5368:	6983      	ldr	r3, [r0, #24]
    536a:	b513      	push	{r0, r1, r4, lr}
    536c:	1c04      	adds	r4, r0, #0
    536e:	2b00      	cmp	r3, #0
    5370:	d127      	bne.n	53c2 <__sinit+0x5a>
    5372:	6483      	str	r3, [r0, #72]	; 0x48
    5374:	64c3      	str	r3, [r0, #76]	; 0x4c
    5376:	6503      	str	r3, [r0, #80]	; 0x50
    5378:	4b12      	ldr	r3, [pc, #72]	; (53c4 <__sinit+0x5c>)
    537a:	4a13      	ldr	r2, [pc, #76]	; (53c8 <__sinit+0x60>)
    537c:	681b      	ldr	r3, [r3, #0]
    537e:	6282      	str	r2, [r0, #40]	; 0x28
    5380:	4298      	cmp	r0, r3
    5382:	d101      	bne.n	5388 <__sinit+0x20>
    5384:	2301      	movs	r3, #1
    5386:	6183      	str	r3, [r0, #24]
    5388:	1c20      	adds	r0, r4, #0
    538a:	f000 f81f 	bl	53cc <__sfp>
    538e:	6060      	str	r0, [r4, #4]
    5390:	1c20      	adds	r0, r4, #0
    5392:	f000 f81b 	bl	53cc <__sfp>
    5396:	60a0      	str	r0, [r4, #8]
    5398:	1c20      	adds	r0, r4, #0
    539a:	f000 f817 	bl	53cc <__sfp>
    539e:	2104      	movs	r1, #4
    53a0:	60e0      	str	r0, [r4, #12]
    53a2:	2200      	movs	r2, #0
    53a4:	6860      	ldr	r0, [r4, #4]
    53a6:	f7ff ffa5 	bl	52f4 <std.isra.0>
    53aa:	68a0      	ldr	r0, [r4, #8]
    53ac:	2109      	movs	r1, #9
    53ae:	2201      	movs	r2, #1
    53b0:	f7ff ffa0 	bl	52f4 <std.isra.0>
    53b4:	68e0      	ldr	r0, [r4, #12]
    53b6:	2112      	movs	r1, #18
    53b8:	2202      	movs	r2, #2
    53ba:	f7ff ff9b 	bl	52f4 <std.isra.0>
    53be:	2301      	movs	r3, #1
    53c0:	61a3      	str	r3, [r4, #24]
    53c2:	bd13      	pop	{r0, r1, r4, pc}
    53c4:	000058e8 	.word	0x000058e8
    53c8:	000052c1 	.word	0x000052c1

000053cc <__sfp>:
    53cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ce:	4b1d      	ldr	r3, [pc, #116]	; (5444 <__sfp+0x78>)
    53d0:	1c07      	adds	r7, r0, #0
    53d2:	681e      	ldr	r6, [r3, #0]
    53d4:	69b2      	ldr	r2, [r6, #24]
    53d6:	2a00      	cmp	r2, #0
    53d8:	d102      	bne.n	53e0 <__sfp+0x14>
    53da:	1c30      	adds	r0, r6, #0
    53dc:	f7ff ffc4 	bl	5368 <__sinit>
    53e0:	3648      	adds	r6, #72	; 0x48
    53e2:	68b4      	ldr	r4, [r6, #8]
    53e4:	6873      	ldr	r3, [r6, #4]
    53e6:	3b01      	subs	r3, #1
    53e8:	d405      	bmi.n	53f6 <__sfp+0x2a>
    53ea:	220c      	movs	r2, #12
    53ec:	5ea5      	ldrsh	r5, [r4, r2]
    53ee:	2d00      	cmp	r5, #0
    53f0:	d010      	beq.n	5414 <__sfp+0x48>
    53f2:	3468      	adds	r4, #104	; 0x68
    53f4:	e7f7      	b.n	53e6 <__sfp+0x1a>
    53f6:	6833      	ldr	r3, [r6, #0]
    53f8:	2b00      	cmp	r3, #0
    53fa:	d106      	bne.n	540a <__sfp+0x3e>
    53fc:	1c38      	adds	r0, r7, #0
    53fe:	2104      	movs	r1, #4
    5400:	f7ff ff9c 	bl	533c <__sfmoreglue>
    5404:	6030      	str	r0, [r6, #0]
    5406:	2800      	cmp	r0, #0
    5408:	d001      	beq.n	540e <__sfp+0x42>
    540a:	6836      	ldr	r6, [r6, #0]
    540c:	e7e9      	b.n	53e2 <__sfp+0x16>
    540e:	230c      	movs	r3, #12
    5410:	603b      	str	r3, [r7, #0]
    5412:	e016      	b.n	5442 <__sfp+0x76>
    5414:	2301      	movs	r3, #1
    5416:	425b      	negs	r3, r3
    5418:	81e3      	strh	r3, [r4, #14]
    541a:	1c20      	adds	r0, r4, #0
    541c:	2301      	movs	r3, #1
    541e:	81a3      	strh	r3, [r4, #12]
    5420:	6665      	str	r5, [r4, #100]	; 0x64
    5422:	6025      	str	r5, [r4, #0]
    5424:	60a5      	str	r5, [r4, #8]
    5426:	6065      	str	r5, [r4, #4]
    5428:	6125      	str	r5, [r4, #16]
    542a:	6165      	str	r5, [r4, #20]
    542c:	61a5      	str	r5, [r4, #24]
    542e:	305c      	adds	r0, #92	; 0x5c
    5430:	1c29      	adds	r1, r5, #0
    5432:	2208      	movs	r2, #8
    5434:	f7ff fa0f 	bl	4856 <memset>
    5438:	6365      	str	r5, [r4, #52]	; 0x34
    543a:	63a5      	str	r5, [r4, #56]	; 0x38
    543c:	64a5      	str	r5, [r4, #72]	; 0x48
    543e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5440:	1c20      	adds	r0, r4, #0
    5442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5444:	000058e8 	.word	0x000058e8

00005448 <__smakebuf_r>:
    5448:	b5f0      	push	{r4, r5, r6, r7, lr}
    544a:	898b      	ldrh	r3, [r1, #12]
    544c:	b091      	sub	sp, #68	; 0x44
    544e:	1c05      	adds	r5, r0, #0
    5450:	1c0c      	adds	r4, r1, #0
    5452:	079a      	lsls	r2, r3, #30
    5454:	d425      	bmi.n	54a2 <__smakebuf_r+0x5a>
    5456:	230e      	movs	r3, #14
    5458:	5ec9      	ldrsh	r1, [r1, r3]
    545a:	2900      	cmp	r1, #0
    545c:	da06      	bge.n	546c <__smakebuf_r+0x24>
    545e:	89a7      	ldrh	r7, [r4, #12]
    5460:	2380      	movs	r3, #128	; 0x80
    5462:	401f      	ands	r7, r3
    5464:	d00f      	beq.n	5486 <__smakebuf_r+0x3e>
    5466:	2700      	movs	r7, #0
    5468:	2640      	movs	r6, #64	; 0x40
    546a:	e00e      	b.n	548a <__smakebuf_r+0x42>
    546c:	aa01      	add	r2, sp, #4
    546e:	f000 f979 	bl	5764 <_fstat_r>
    5472:	2800      	cmp	r0, #0
    5474:	dbf3      	blt.n	545e <__smakebuf_r+0x16>
    5476:	9b02      	ldr	r3, [sp, #8]
    5478:	27f0      	movs	r7, #240	; 0xf0
    547a:	023f      	lsls	r7, r7, #8
    547c:	4a18      	ldr	r2, [pc, #96]	; (54e0 <__smakebuf_r+0x98>)
    547e:	401f      	ands	r7, r3
    5480:	18bf      	adds	r7, r7, r2
    5482:	427b      	negs	r3, r7
    5484:	415f      	adcs	r7, r3
    5486:	2680      	movs	r6, #128	; 0x80
    5488:	00f6      	lsls	r6, r6, #3
    548a:	1c28      	adds	r0, r5, #0
    548c:	1c31      	adds	r1, r6, #0
    548e:	f000 f889 	bl	55a4 <_malloc_r>
    5492:	2800      	cmp	r0, #0
    5494:	d10c      	bne.n	54b0 <__smakebuf_r+0x68>
    5496:	89a3      	ldrh	r3, [r4, #12]
    5498:	059a      	lsls	r2, r3, #22
    549a:	d41f      	bmi.n	54dc <__smakebuf_r+0x94>
    549c:	2202      	movs	r2, #2
    549e:	4313      	orrs	r3, r2
    54a0:	81a3      	strh	r3, [r4, #12]
    54a2:	1c23      	adds	r3, r4, #0
    54a4:	3347      	adds	r3, #71	; 0x47
    54a6:	6023      	str	r3, [r4, #0]
    54a8:	6123      	str	r3, [r4, #16]
    54aa:	2301      	movs	r3, #1
    54ac:	6163      	str	r3, [r4, #20]
    54ae:	e015      	b.n	54dc <__smakebuf_r+0x94>
    54b0:	4b0c      	ldr	r3, [pc, #48]	; (54e4 <__smakebuf_r+0x9c>)
    54b2:	2280      	movs	r2, #128	; 0x80
    54b4:	62ab      	str	r3, [r5, #40]	; 0x28
    54b6:	89a3      	ldrh	r3, [r4, #12]
    54b8:	6020      	str	r0, [r4, #0]
    54ba:	4313      	orrs	r3, r2
    54bc:	81a3      	strh	r3, [r4, #12]
    54be:	6120      	str	r0, [r4, #16]
    54c0:	6166      	str	r6, [r4, #20]
    54c2:	2f00      	cmp	r7, #0
    54c4:	d00a      	beq.n	54dc <__smakebuf_r+0x94>
    54c6:	230e      	movs	r3, #14
    54c8:	5ee1      	ldrsh	r1, [r4, r3]
    54ca:	1c28      	adds	r0, r5, #0
    54cc:	f000 f95c 	bl	5788 <_isatty_r>
    54d0:	2800      	cmp	r0, #0
    54d2:	d003      	beq.n	54dc <__smakebuf_r+0x94>
    54d4:	89a3      	ldrh	r3, [r4, #12]
    54d6:	2201      	movs	r2, #1
    54d8:	4313      	orrs	r3, r2
    54da:	81a3      	strh	r3, [r4, #12]
    54dc:	b011      	add	sp, #68	; 0x44
    54de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54e0:	ffffe000 	.word	0xffffe000
    54e4:	000052c1 	.word	0x000052c1

000054e8 <malloc>:
    54e8:	b508      	push	{r3, lr}
    54ea:	4b03      	ldr	r3, [pc, #12]	; (54f8 <malloc+0x10>)
    54ec:	1c01      	adds	r1, r0, #0
    54ee:	6818      	ldr	r0, [r3, #0]
    54f0:	f000 f858 	bl	55a4 <_malloc_r>
    54f4:	bd08      	pop	{r3, pc}
    54f6:	46c0      	nop			; (mov r8, r8)
    54f8:	20000074 	.word	0x20000074

000054fc <memchr>:
    54fc:	b2c9      	uxtb	r1, r1
    54fe:	1882      	adds	r2, r0, r2
    5500:	4290      	cmp	r0, r2
    5502:	d004      	beq.n	550e <memchr+0x12>
    5504:	7803      	ldrb	r3, [r0, #0]
    5506:	428b      	cmp	r3, r1
    5508:	d002      	beq.n	5510 <memchr+0x14>
    550a:	3001      	adds	r0, #1
    550c:	e7f8      	b.n	5500 <memchr+0x4>
    550e:	2000      	movs	r0, #0
    5510:	4770      	bx	lr
	...

00005514 <_free_r>:
    5514:	b530      	push	{r4, r5, lr}
    5516:	2900      	cmp	r1, #0
    5518:	d040      	beq.n	559c <_free_r+0x88>
    551a:	3904      	subs	r1, #4
    551c:	680b      	ldr	r3, [r1, #0]
    551e:	2b00      	cmp	r3, #0
    5520:	da00      	bge.n	5524 <_free_r+0x10>
    5522:	18c9      	adds	r1, r1, r3
    5524:	4a1e      	ldr	r2, [pc, #120]	; (55a0 <_free_r+0x8c>)
    5526:	6813      	ldr	r3, [r2, #0]
    5528:	1c14      	adds	r4, r2, #0
    552a:	2b00      	cmp	r3, #0
    552c:	d102      	bne.n	5534 <_free_r+0x20>
    552e:	604b      	str	r3, [r1, #4]
    5530:	6011      	str	r1, [r2, #0]
    5532:	e033      	b.n	559c <_free_r+0x88>
    5534:	4299      	cmp	r1, r3
    5536:	d20f      	bcs.n	5558 <_free_r+0x44>
    5538:	6808      	ldr	r0, [r1, #0]
    553a:	180a      	adds	r2, r1, r0
    553c:	429a      	cmp	r2, r3
    553e:	d105      	bne.n	554c <_free_r+0x38>
    5540:	6813      	ldr	r3, [r2, #0]
    5542:	6852      	ldr	r2, [r2, #4]
    5544:	18c0      	adds	r0, r0, r3
    5546:	6008      	str	r0, [r1, #0]
    5548:	604a      	str	r2, [r1, #4]
    554a:	e000      	b.n	554e <_free_r+0x3a>
    554c:	604b      	str	r3, [r1, #4]
    554e:	6021      	str	r1, [r4, #0]
    5550:	e024      	b.n	559c <_free_r+0x88>
    5552:	428a      	cmp	r2, r1
    5554:	d803      	bhi.n	555e <_free_r+0x4a>
    5556:	1c13      	adds	r3, r2, #0
    5558:	685a      	ldr	r2, [r3, #4]
    555a:	2a00      	cmp	r2, #0
    555c:	d1f9      	bne.n	5552 <_free_r+0x3e>
    555e:	681d      	ldr	r5, [r3, #0]
    5560:	195c      	adds	r4, r3, r5
    5562:	428c      	cmp	r4, r1
    5564:	d10b      	bne.n	557e <_free_r+0x6a>
    5566:	6809      	ldr	r1, [r1, #0]
    5568:	1869      	adds	r1, r5, r1
    556a:	1858      	adds	r0, r3, r1
    556c:	6019      	str	r1, [r3, #0]
    556e:	4290      	cmp	r0, r2
    5570:	d114      	bne.n	559c <_free_r+0x88>
    5572:	6814      	ldr	r4, [r2, #0]
    5574:	6852      	ldr	r2, [r2, #4]
    5576:	1909      	adds	r1, r1, r4
    5578:	6019      	str	r1, [r3, #0]
    557a:	605a      	str	r2, [r3, #4]
    557c:	e00e      	b.n	559c <_free_r+0x88>
    557e:	428c      	cmp	r4, r1
    5580:	d902      	bls.n	5588 <_free_r+0x74>
    5582:	230c      	movs	r3, #12
    5584:	6003      	str	r3, [r0, #0]
    5586:	e009      	b.n	559c <_free_r+0x88>
    5588:	6808      	ldr	r0, [r1, #0]
    558a:	180c      	adds	r4, r1, r0
    558c:	4294      	cmp	r4, r2
    558e:	d103      	bne.n	5598 <_free_r+0x84>
    5590:	6814      	ldr	r4, [r2, #0]
    5592:	6852      	ldr	r2, [r2, #4]
    5594:	1900      	adds	r0, r0, r4
    5596:	6008      	str	r0, [r1, #0]
    5598:	604a      	str	r2, [r1, #4]
    559a:	6059      	str	r1, [r3, #4]
    559c:	bd30      	pop	{r4, r5, pc}
    559e:	46c0      	nop			; (mov r8, r8)
    55a0:	2000075c 	.word	0x2000075c

000055a4 <_malloc_r>:
    55a4:	b570      	push	{r4, r5, r6, lr}
    55a6:	2303      	movs	r3, #3
    55a8:	1ccd      	adds	r5, r1, #3
    55aa:	439d      	bics	r5, r3
    55ac:	3508      	adds	r5, #8
    55ae:	1c06      	adds	r6, r0, #0
    55b0:	2d0c      	cmp	r5, #12
    55b2:	d201      	bcs.n	55b8 <_malloc_r+0x14>
    55b4:	250c      	movs	r5, #12
    55b6:	e001      	b.n	55bc <_malloc_r+0x18>
    55b8:	2d00      	cmp	r5, #0
    55ba:	db3f      	blt.n	563c <_malloc_r+0x98>
    55bc:	428d      	cmp	r5, r1
    55be:	d33d      	bcc.n	563c <_malloc_r+0x98>
    55c0:	4b20      	ldr	r3, [pc, #128]	; (5644 <_malloc_r+0xa0>)
    55c2:	681c      	ldr	r4, [r3, #0]
    55c4:	1c1a      	adds	r2, r3, #0
    55c6:	1c21      	adds	r1, r4, #0
    55c8:	2900      	cmp	r1, #0
    55ca:	d013      	beq.n	55f4 <_malloc_r+0x50>
    55cc:	6808      	ldr	r0, [r1, #0]
    55ce:	1b43      	subs	r3, r0, r5
    55d0:	d40d      	bmi.n	55ee <_malloc_r+0x4a>
    55d2:	2b0b      	cmp	r3, #11
    55d4:	d902      	bls.n	55dc <_malloc_r+0x38>
    55d6:	600b      	str	r3, [r1, #0]
    55d8:	18cc      	adds	r4, r1, r3
    55da:	e01e      	b.n	561a <_malloc_r+0x76>
    55dc:	428c      	cmp	r4, r1
    55de:	d102      	bne.n	55e6 <_malloc_r+0x42>
    55e0:	6863      	ldr	r3, [r4, #4]
    55e2:	6013      	str	r3, [r2, #0]
    55e4:	e01a      	b.n	561c <_malloc_r+0x78>
    55e6:	6848      	ldr	r0, [r1, #4]
    55e8:	6060      	str	r0, [r4, #4]
    55ea:	1c0c      	adds	r4, r1, #0
    55ec:	e016      	b.n	561c <_malloc_r+0x78>
    55ee:	1c0c      	adds	r4, r1, #0
    55f0:	6849      	ldr	r1, [r1, #4]
    55f2:	e7e9      	b.n	55c8 <_malloc_r+0x24>
    55f4:	4c14      	ldr	r4, [pc, #80]	; (5648 <_malloc_r+0xa4>)
    55f6:	6820      	ldr	r0, [r4, #0]
    55f8:	2800      	cmp	r0, #0
    55fa:	d103      	bne.n	5604 <_malloc_r+0x60>
    55fc:	1c30      	adds	r0, r6, #0
    55fe:	f000 f825 	bl	564c <_sbrk_r>
    5602:	6020      	str	r0, [r4, #0]
    5604:	1c30      	adds	r0, r6, #0
    5606:	1c29      	adds	r1, r5, #0
    5608:	f000 f820 	bl	564c <_sbrk_r>
    560c:	1c43      	adds	r3, r0, #1
    560e:	d015      	beq.n	563c <_malloc_r+0x98>
    5610:	1cc4      	adds	r4, r0, #3
    5612:	2303      	movs	r3, #3
    5614:	439c      	bics	r4, r3
    5616:	4284      	cmp	r4, r0
    5618:	d10a      	bne.n	5630 <_malloc_r+0x8c>
    561a:	6025      	str	r5, [r4, #0]
    561c:	1c20      	adds	r0, r4, #0
    561e:	300b      	adds	r0, #11
    5620:	2207      	movs	r2, #7
    5622:	1d23      	adds	r3, r4, #4
    5624:	4390      	bics	r0, r2
    5626:	1ac3      	subs	r3, r0, r3
    5628:	d00b      	beq.n	5642 <_malloc_r+0x9e>
    562a:	425a      	negs	r2, r3
    562c:	50e2      	str	r2, [r4, r3]
    562e:	e008      	b.n	5642 <_malloc_r+0x9e>
    5630:	1a21      	subs	r1, r4, r0
    5632:	1c30      	adds	r0, r6, #0
    5634:	f000 f80a 	bl	564c <_sbrk_r>
    5638:	3001      	adds	r0, #1
    563a:	d1ee      	bne.n	561a <_malloc_r+0x76>
    563c:	230c      	movs	r3, #12
    563e:	6033      	str	r3, [r6, #0]
    5640:	2000      	movs	r0, #0
    5642:	bd70      	pop	{r4, r5, r6, pc}
    5644:	2000075c 	.word	0x2000075c
    5648:	20000758 	.word	0x20000758

0000564c <_sbrk_r>:
    564c:	b538      	push	{r3, r4, r5, lr}
    564e:	4c07      	ldr	r4, [pc, #28]	; (566c <_sbrk_r+0x20>)
    5650:	2300      	movs	r3, #0
    5652:	1c05      	adds	r5, r0, #0
    5654:	1c08      	adds	r0, r1, #0
    5656:	6023      	str	r3, [r4, #0]
    5658:	f7fe fe60 	bl	431c <_sbrk>
    565c:	1c43      	adds	r3, r0, #1
    565e:	d103      	bne.n	5668 <_sbrk_r+0x1c>
    5660:	6823      	ldr	r3, [r4, #0]
    5662:	2b00      	cmp	r3, #0
    5664:	d000      	beq.n	5668 <_sbrk_r+0x1c>
    5666:	602b      	str	r3, [r5, #0]
    5668:	bd38      	pop	{r3, r4, r5, pc}
    566a:	46c0      	nop			; (mov r8, r8)
    566c:	20000bb0 	.word	0x20000bb0

00005670 <__sread>:
    5670:	b538      	push	{r3, r4, r5, lr}
    5672:	1c0c      	adds	r4, r1, #0
    5674:	250e      	movs	r5, #14
    5676:	5f49      	ldrsh	r1, [r1, r5]
    5678:	f000 f8ac 	bl	57d4 <_read_r>
    567c:	2800      	cmp	r0, #0
    567e:	db03      	blt.n	5688 <__sread+0x18>
    5680:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5682:	1813      	adds	r3, r2, r0
    5684:	6563      	str	r3, [r4, #84]	; 0x54
    5686:	e003      	b.n	5690 <__sread+0x20>
    5688:	89a2      	ldrh	r2, [r4, #12]
    568a:	4b02      	ldr	r3, [pc, #8]	; (5694 <__sread+0x24>)
    568c:	4013      	ands	r3, r2
    568e:	81a3      	strh	r3, [r4, #12]
    5690:	bd38      	pop	{r3, r4, r5, pc}
    5692:	46c0      	nop			; (mov r8, r8)
    5694:	ffffefff 	.word	0xffffefff

00005698 <__swrite>:
    5698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    569a:	1c1e      	adds	r6, r3, #0
    569c:	898b      	ldrh	r3, [r1, #12]
    569e:	1c05      	adds	r5, r0, #0
    56a0:	1c0c      	adds	r4, r1, #0
    56a2:	1c17      	adds	r7, r2, #0
    56a4:	05da      	lsls	r2, r3, #23
    56a6:	d505      	bpl.n	56b4 <__swrite+0x1c>
    56a8:	230e      	movs	r3, #14
    56aa:	5ec9      	ldrsh	r1, [r1, r3]
    56ac:	2200      	movs	r2, #0
    56ae:	2302      	movs	r3, #2
    56b0:	f000 f87c 	bl	57ac <_lseek_r>
    56b4:	89a2      	ldrh	r2, [r4, #12]
    56b6:	4b05      	ldr	r3, [pc, #20]	; (56cc <__swrite+0x34>)
    56b8:	1c28      	adds	r0, r5, #0
    56ba:	4013      	ands	r3, r2
    56bc:	81a3      	strh	r3, [r4, #12]
    56be:	220e      	movs	r2, #14
    56c0:	5ea1      	ldrsh	r1, [r4, r2]
    56c2:	1c33      	adds	r3, r6, #0
    56c4:	1c3a      	adds	r2, r7, #0
    56c6:	f000 f827 	bl	5718 <_write_r>
    56ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56cc:	ffffefff 	.word	0xffffefff

000056d0 <__sseek>:
    56d0:	b538      	push	{r3, r4, r5, lr}
    56d2:	1c0c      	adds	r4, r1, #0
    56d4:	250e      	movs	r5, #14
    56d6:	5f49      	ldrsh	r1, [r1, r5]
    56d8:	f000 f868 	bl	57ac <_lseek_r>
    56dc:	89a3      	ldrh	r3, [r4, #12]
    56de:	1c42      	adds	r2, r0, #1
    56e0:	d103      	bne.n	56ea <__sseek+0x1a>
    56e2:	4a05      	ldr	r2, [pc, #20]	; (56f8 <__sseek+0x28>)
    56e4:	4013      	ands	r3, r2
    56e6:	81a3      	strh	r3, [r4, #12]
    56e8:	e004      	b.n	56f4 <__sseek+0x24>
    56ea:	2280      	movs	r2, #128	; 0x80
    56ec:	0152      	lsls	r2, r2, #5
    56ee:	4313      	orrs	r3, r2
    56f0:	81a3      	strh	r3, [r4, #12]
    56f2:	6560      	str	r0, [r4, #84]	; 0x54
    56f4:	bd38      	pop	{r3, r4, r5, pc}
    56f6:	46c0      	nop			; (mov r8, r8)
    56f8:	ffffefff 	.word	0xffffefff

000056fc <__sclose>:
    56fc:	b508      	push	{r3, lr}
    56fe:	230e      	movs	r3, #14
    5700:	5ec9      	ldrsh	r1, [r1, r3]
    5702:	f000 f81d 	bl	5740 <_close_r>
    5706:	bd08      	pop	{r3, pc}

00005708 <strlen>:
    5708:	2300      	movs	r3, #0
    570a:	5cc2      	ldrb	r2, [r0, r3]
    570c:	3301      	adds	r3, #1
    570e:	2a00      	cmp	r2, #0
    5710:	d1fb      	bne.n	570a <strlen+0x2>
    5712:	1e58      	subs	r0, r3, #1
    5714:	4770      	bx	lr
	...

00005718 <_write_r>:
    5718:	b538      	push	{r3, r4, r5, lr}
    571a:	4c08      	ldr	r4, [pc, #32]	; (573c <_write_r+0x24>)
    571c:	1c05      	adds	r5, r0, #0
    571e:	2000      	movs	r0, #0
    5720:	6020      	str	r0, [r4, #0]
    5722:	1c08      	adds	r0, r1, #0
    5724:	1c11      	adds	r1, r2, #0
    5726:	1c1a      	adds	r2, r3, #0
    5728:	f7fb fc60 	bl	fec <_write>
    572c:	1c43      	adds	r3, r0, #1
    572e:	d103      	bne.n	5738 <_write_r+0x20>
    5730:	6823      	ldr	r3, [r4, #0]
    5732:	2b00      	cmp	r3, #0
    5734:	d000      	beq.n	5738 <_write_r+0x20>
    5736:	602b      	str	r3, [r5, #0]
    5738:	bd38      	pop	{r3, r4, r5, pc}
    573a:	46c0      	nop			; (mov r8, r8)
    573c:	20000bb0 	.word	0x20000bb0

00005740 <_close_r>:
    5740:	b538      	push	{r3, r4, r5, lr}
    5742:	4c07      	ldr	r4, [pc, #28]	; (5760 <_close_r+0x20>)
    5744:	2300      	movs	r3, #0
    5746:	1c05      	adds	r5, r0, #0
    5748:	1c08      	adds	r0, r1, #0
    574a:	6023      	str	r3, [r4, #0]
    574c:	f7fe fdf8 	bl	4340 <_close>
    5750:	1c43      	adds	r3, r0, #1
    5752:	d103      	bne.n	575c <_close_r+0x1c>
    5754:	6823      	ldr	r3, [r4, #0]
    5756:	2b00      	cmp	r3, #0
    5758:	d000      	beq.n	575c <_close_r+0x1c>
    575a:	602b      	str	r3, [r5, #0]
    575c:	bd38      	pop	{r3, r4, r5, pc}
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	20000bb0 	.word	0x20000bb0

00005764 <_fstat_r>:
    5764:	b538      	push	{r3, r4, r5, lr}
    5766:	4c07      	ldr	r4, [pc, #28]	; (5784 <_fstat_r+0x20>)
    5768:	2300      	movs	r3, #0
    576a:	1c05      	adds	r5, r0, #0
    576c:	1c08      	adds	r0, r1, #0
    576e:	1c11      	adds	r1, r2, #0
    5770:	6023      	str	r3, [r4, #0]
    5772:	f7fe fde9 	bl	4348 <_fstat>
    5776:	1c43      	adds	r3, r0, #1
    5778:	d103      	bne.n	5782 <_fstat_r+0x1e>
    577a:	6823      	ldr	r3, [r4, #0]
    577c:	2b00      	cmp	r3, #0
    577e:	d000      	beq.n	5782 <_fstat_r+0x1e>
    5780:	602b      	str	r3, [r5, #0]
    5782:	bd38      	pop	{r3, r4, r5, pc}
    5784:	20000bb0 	.word	0x20000bb0

00005788 <_isatty_r>:
    5788:	b538      	push	{r3, r4, r5, lr}
    578a:	4c07      	ldr	r4, [pc, #28]	; (57a8 <_isatty_r+0x20>)
    578c:	2300      	movs	r3, #0
    578e:	1c05      	adds	r5, r0, #0
    5790:	1c08      	adds	r0, r1, #0
    5792:	6023      	str	r3, [r4, #0]
    5794:	f7fe fdde 	bl	4354 <_isatty>
    5798:	1c43      	adds	r3, r0, #1
    579a:	d103      	bne.n	57a4 <_isatty_r+0x1c>
    579c:	6823      	ldr	r3, [r4, #0]
    579e:	2b00      	cmp	r3, #0
    57a0:	d000      	beq.n	57a4 <_isatty_r+0x1c>
    57a2:	602b      	str	r3, [r5, #0]
    57a4:	bd38      	pop	{r3, r4, r5, pc}
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	20000bb0 	.word	0x20000bb0

000057ac <_lseek_r>:
    57ac:	b538      	push	{r3, r4, r5, lr}
    57ae:	4c08      	ldr	r4, [pc, #32]	; (57d0 <_lseek_r+0x24>)
    57b0:	1c05      	adds	r5, r0, #0
    57b2:	2000      	movs	r0, #0
    57b4:	6020      	str	r0, [r4, #0]
    57b6:	1c08      	adds	r0, r1, #0
    57b8:	1c11      	adds	r1, r2, #0
    57ba:	1c1a      	adds	r2, r3, #0
    57bc:	f7fe fdcc 	bl	4358 <_lseek>
    57c0:	1c43      	adds	r3, r0, #1
    57c2:	d103      	bne.n	57cc <_lseek_r+0x20>
    57c4:	6823      	ldr	r3, [r4, #0]
    57c6:	2b00      	cmp	r3, #0
    57c8:	d000      	beq.n	57cc <_lseek_r+0x20>
    57ca:	602b      	str	r3, [r5, #0]
    57cc:	bd38      	pop	{r3, r4, r5, pc}
    57ce:	46c0      	nop			; (mov r8, r8)
    57d0:	20000bb0 	.word	0x20000bb0

000057d4 <_read_r>:
    57d4:	b538      	push	{r3, r4, r5, lr}
    57d6:	4c08      	ldr	r4, [pc, #32]	; (57f8 <_read_r+0x24>)
    57d8:	1c05      	adds	r5, r0, #0
    57da:	2000      	movs	r0, #0
    57dc:	6020      	str	r0, [r4, #0]
    57de:	1c08      	adds	r0, r1, #0
    57e0:	1c11      	adds	r1, r2, #0
    57e2:	1c1a      	adds	r2, r3, #0
    57e4:	f7fb fbe0 	bl	fa8 <_read>
    57e8:	1c43      	adds	r3, r0, #1
    57ea:	d103      	bne.n	57f4 <_read_r+0x20>
    57ec:	6823      	ldr	r3, [r4, #0]
    57ee:	2b00      	cmp	r3, #0
    57f0:	d000      	beq.n	57f4 <_read_r+0x20>
    57f2:	602b      	str	r3, [r5, #0]
    57f4:	bd38      	pop	{r3, r4, r5, pc}
    57f6:	46c0      	nop			; (mov r8, r8)
    57f8:	20000bb0 	.word	0x20000bb0
    57fc:	42000800 	.word	0x42000800
    5800:	42000c00 	.word	0x42000c00
    5804:	42001000 	.word	0x42001000
    5808:	42001400 	.word	0x42001400
    580c:	42001800 	.word	0x42001800
    5810:	42001c00 	.word	0x42001c00
    5814:	42002c00 	.word	0x42002c00
    5818:	42003000 	.word	0x42003000
    581c:	42003400 	.word	0x42003400
    5820:	001c1c1b 	.word	0x001c1c1b
    5824:	10000800 	.word	0x10000800
    5828:	00002000 	.word	0x00002000
    582c:	0c0b0a09 	.word	0x0c0b0a09
    5830:	00000e0d 	.word	0x00000e0d
    5834:	00001fa0 	.word	0x00001fa0
    5838:	00002114 	.word	0x00002114
    583c:	0000211e 	.word	0x0000211e
    5840:	000022b4 	.word	0x000022b4
    5844:	000022bc 	.word	0x000022bc
    5848:	0000288a 	.word	0x0000288a
    584c:	00002948 	.word	0x00002948
    5850:	00002894 	.word	0x00002894
    5854:	000028b4 	.word	0x000028b4
    5858:	00002948 	.word	0x00002948
    585c:	000028d6 	.word	0x000028d6
    5860:	00002948 	.word	0x00002948
    5864:	00002918 	.word	0x00002918

00005868 <tc_interrupt_vectors.11766>:
    5868:	00141312 00003d28 00003d84 00003d84     ....(=...=...=..
    5878:	00003d22 00003d22 00003d3e 00003d2e     "=.."=..>=...=..
    5888:	00003d44 00003d72 00003e0c 00003e6c     D=..r=...>..l>..
    5898:	00003e6c 00003dec 00003dfe 00003e1a     l>...=...=...>..
    58a8:	00003df0 00003e28 00003e5c 74616568     .=..(>..\>..heat
    58b8:	00000000 6c6f6f63 00000000 65636572     ....cool....rece
    58c8:	64657669 00000021 74736554 75636553     ived!...TestSecu
    58d8:	79746972 3079654b 00000000 00000043     rityKey0....C...

000058e8 <_global_impure_ptr>:
    58e8:	20000014 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    58f8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    5908:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    5918:	64636261 00006665                       abcdef..

00005920 <__sf_fake_stdin>:
	...

00005940 <__sf_fake_stdout>:
	...

00005960 <__sf_fake_stderr>:
	...

00005980 <_init>:
    5980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5986:	bc08      	pop	{r3}
    5988:	469e      	mov	lr, r3
    598a:	4770      	bx	lr

0000598c <__init_array_start>:
    598c:	000000dd 	.word	0x000000dd

00005990 <_fini>:
    5990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5992:	46c0      	nop			; (mov r8, r8)
    5994:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5996:	bc08      	pop	{r3}
    5998:	469e      	mov	lr, r3
    599a:	4770      	bx	lr

0000599c <__fini_array_start>:
    599c:	000000b5 	.word	0x000000b5
