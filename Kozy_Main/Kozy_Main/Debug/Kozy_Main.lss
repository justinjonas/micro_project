
Kozy_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000559c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000559c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004398  20000094  00005630  00010094  2**2
                  ALLOC
  3 .stack        00002004  2000442c  000099c8  00010094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  000100bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00038d86  00000000  00000000  0001014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006cb8  00000000  00000000  00048ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00010093  00000000  00000000  0004fb88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ef8  00000000  00000000  0005fc1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000016f0  00000000  00000000  00060b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ef82  00000000  00000000  00062203  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001c586  00000000  00000000  00081185  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c261  00000000  00000000  0009d70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c3c  00000000  00000000  0012996c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20006430 	.word	0x20006430
       4:	00003dd5 	.word	0x00003dd5
       8:	00003dd1 	.word	0x00003dd1
       c:	00003dd1 	.word	0x00003dd1
	...
      2c:	00000a31 	.word	0x00000a31
	...
      38:	00000a99 	.word	0x00000a99
      3c:	00000add 	.word	0x00000add
      40:	00003dd1 	.word	0x00003dd1
      44:	00003dd1 	.word	0x00003dd1
      48:	00003dd1 	.word	0x00003dd1
      4c:	00003dd1 	.word	0x00003dd1
      50:	000036cd 	.word	0x000036cd
      54:	00003dd1 	.word	0x00003dd1
      58:	00003dd1 	.word	0x00003dd1
      5c:	00003dd1 	.word	0x00003dd1
      60:	00003dd1 	.word	0x00003dd1
      64:	0000363d 	.word	0x0000363d
      68:	0000364d 	.word	0x0000364d
      6c:	0000365d 	.word	0x0000365d
      70:	0000366d 	.word	0x0000366d
      74:	0000367d 	.word	0x0000367d
      78:	0000368d 	.word	0x0000368d
      7c:	00003dd1 	.word	0x00003dd1
      80:	00003dd1 	.word	0x00003dd1
      84:	00003dd1 	.word	0x00003dd1
      88:	00002b75 	.word	0x00002b75
      8c:	00002b85 	.word	0x00002b85
      90:	00002b95 	.word	0x00002b95
	...
      9c:	00003dd1 	.word	0x00003dd1
      a0:	00003dd1 	.word	0x00003dd1
      a4:	00000000 	.word	0x00000000
      a8:	00003dd1 	.word	0x00003dd1
      ac:	00003dd1 	.word	0x00003dd1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	0000559c 	.word	0x0000559c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	0000559c 	.word	0x0000559c
     108:	20000098 	.word	0x20000098
     10c:	0000559c 	.word	0x0000559c
     110:	00000000 	.word	0x00000000

00000114 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     114:	4b05      	ldr	r3, [pc, #20]	; (12c <_extint_enable+0x18>)
     116:	7819      	ldrb	r1, [r3, #0]
     118:	2202      	movs	r2, #2
     11a:	430a      	orrs	r2, r1
     11c:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     11e:	1c1a      	adds	r2, r3, #0
     120:	7853      	ldrb	r3, [r2, #1]
     122:	b25b      	sxtb	r3, r3
     124:	2b00      	cmp	r3, #0
     126:	dbfb      	blt.n	120 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     128:	4770      	bx	lr
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	40001800 	.word	0x40001800

00000130 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     130:	b500      	push	{lr}
     132:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     134:	4b12      	ldr	r3, [pc, #72]	; (180 <_system_extint_init+0x50>)
     136:	6999      	ldr	r1, [r3, #24]
     138:	2240      	movs	r2, #64	; 0x40
     13a:	430a      	orrs	r2, r1
     13c:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     13e:	a901      	add	r1, sp, #4
     140:	2300      	movs	r3, #0
     142:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     144:	2005      	movs	r0, #5
     146:	4b0f      	ldr	r3, [pc, #60]	; (184 <_system_extint_init+0x54>)
     148:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     14a:	2005      	movs	r0, #5
     14c:	4b0e      	ldr	r3, [pc, #56]	; (188 <_system_extint_init+0x58>)
     14e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     150:	4b0e      	ldr	r3, [pc, #56]	; (18c <_system_extint_init+0x5c>)
     152:	7819      	ldrb	r1, [r3, #0]
     154:	2201      	movs	r2, #1
     156:	430a      	orrs	r2, r1
     158:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     15a:	1c1a      	adds	r2, r3, #0
     15c:	7853      	ldrb	r3, [r2, #1]
     15e:	b25b      	sxtb	r3, r3
     160:	2b00      	cmp	r3, #0
     162:	dbfb      	blt.n	15c <_system_extint_init+0x2c>
     164:	4b0a      	ldr	r3, [pc, #40]	; (190 <_system_extint_init+0x60>)
     166:	1c19      	adds	r1, r3, #0
     168:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     16a:	2200      	movs	r2, #0
     16c:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     16e:	428b      	cmp	r3, r1
     170:	d1fc      	bne.n	16c <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     172:	2210      	movs	r2, #16
     174:	4b07      	ldr	r3, [pc, #28]	; (194 <_system_extint_init+0x64>)
     176:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     178:	4b07      	ldr	r3, [pc, #28]	; (198 <_system_extint_init+0x68>)
     17a:	4798      	blx	r3
}
     17c:	b003      	add	sp, #12
     17e:	bd00      	pop	{pc}
     180:	40000400 	.word	0x40000400
     184:	00003ca1 	.word	0x00003ca1
     188:	00003c15 	.word	0x00003c15
     18c:	40001800 	.word	0x40001800
     190:	20004274 	.word	0x20004274
     194:	e000e100 	.word	0xe000e100
     198:	00000115 	.word	0x00000115

0000019c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     19c:	2300      	movs	r3, #0
     19e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     1a0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     1a2:	2201      	movs	r2, #1
     1a4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     1a6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     1a8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     1aa:	2302      	movs	r3, #2
     1ac:	72c3      	strb	r3, [r0, #11]
}
     1ae:	4770      	bx	lr

000001b0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1b2:	b083      	sub	sp, #12
     1b4:	1c05      	adds	r5, r0, #0
     1b6:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b8:	a901      	add	r1, sp, #4
     1ba:	2300      	movs	r3, #0
     1bc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1be:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     1c0:	6863      	ldr	r3, [r4, #4]
     1c2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     1c4:	7a23      	ldrb	r3, [r4, #8]
     1c6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     1c8:	7820      	ldrb	r0, [r4, #0]
     1ca:	4b15      	ldr	r3, [pc, #84]	; (220 <extint_chan_set_config+0x70>)
     1cc:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     1ce:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     1d0:	2d1f      	cmp	r5, #31
     1d2:	d800      	bhi.n	1d6 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     1d4:	4b13      	ldr	r3, [pc, #76]	; (224 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     1d6:	2107      	movs	r1, #7
     1d8:	4029      	ands	r1, r5
     1da:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     1dc:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     1de:	7aa2      	ldrb	r2, [r4, #10]
     1e0:	2a00      	cmp	r2, #0
     1e2:	d001      	beq.n	1e8 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     1e4:	2208      	movs	r2, #8
     1e6:	4310      	orrs	r0, r2
     1e8:	08ea      	lsrs	r2, r5, #3
     1ea:	0092      	lsls	r2, r2, #2
     1ec:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1ee:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     1f0:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1f2:	270f      	movs	r7, #15
     1f4:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1f6:	43be      	bics	r6, r7
     1f8:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1fa:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1fc:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     1fe:	7a62      	ldrb	r2, [r4, #9]
     200:	2a00      	cmp	r2, #0
     202:	d006      	beq.n	212 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     204:	695a      	ldr	r2, [r3, #20]
     206:	2101      	movs	r1, #1
     208:	40a9      	lsls	r1, r5
     20a:	1c0d      	adds	r5, r1, #0
     20c:	4315      	orrs	r5, r2
     20e:	615d      	str	r5, [r3, #20]
     210:	e004      	b.n	21c <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     212:	695a      	ldr	r2, [r3, #20]
     214:	2101      	movs	r1, #1
     216:	40a9      	lsls	r1, r5
     218:	438a      	bics	r2, r1
     21a:	615a      	str	r2, [r3, #20]
	}
}
     21c:	b003      	add	sp, #12
     21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     220:	00003d7d 	.word	0x00003d7d
     224:	40001800 	.word	0x40001800

00000228 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     228:	b510      	push	{r4, lr}
     22a:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     22c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     22e:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     230:	4299      	cmp	r1, r3
     232:	d30c      	bcc.n	24e <_sercom_get_sync_baud_val+0x26>
     234:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     236:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     238:	1c60      	adds	r0, r4, #1
     23a:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     23c:	428b      	cmp	r3, r1
     23e:	d801      	bhi.n	244 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     240:	1c04      	adds	r4, r0, #0
     242:	e7f8      	b.n	236 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     244:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     246:	2cff      	cmp	r4, #255	; 0xff
     248:	d801      	bhi.n	24e <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     24a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     24c:	2000      	movs	r0, #0
	}
}
     24e:	bd10      	pop	{r4, pc}

00000250 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     250:	b5f0      	push	{r4, r5, r6, r7, lr}
     252:	465f      	mov	r7, fp
     254:	4656      	mov	r6, sl
     256:	464d      	mov	r5, r9
     258:	4644      	mov	r4, r8
     25a:	b4f0      	push	{r4, r5, r6, r7}
     25c:	b087      	sub	sp, #28
     25e:	1c06      	adds	r6, r0, #0
     260:	1c0d      	adds	r5, r1, #0
     262:	9204      	str	r2, [sp, #16]
     264:	aa10      	add	r2, sp, #64	; 0x40
     266:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     268:	1c32      	adds	r2, r6, #0
     26a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     26c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     26e:	428a      	cmp	r2, r1
     270:	d900      	bls.n	274 <_sercom_get_async_baud_val+0x24>
     272:	e0b3      	b.n	3dc <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     274:	2b00      	cmp	r3, #0
     276:	d14b      	bne.n	310 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     278:	2100      	movs	r1, #0
     27a:	1c32      	adds	r2, r6, #0
     27c:	4c5e      	ldr	r4, [pc, #376]	; (3f8 <_sercom_get_async_baud_val+0x1a8>)
     27e:	47a0      	blx	r4
     280:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     282:	1c2e      	adds	r6, r5, #0
     284:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     286:	2000      	movs	r0, #0
     288:	2100      	movs	r1, #0
     28a:	2200      	movs	r2, #0
     28c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     28e:	243f      	movs	r4, #63	; 0x3f
     290:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     292:	2501      	movs	r5, #1
     294:	46a8      	mov	r8, r5
     296:	9002      	str	r0, [sp, #8]
     298:	9103      	str	r1, [sp, #12]
     29a:	4661      	mov	r1, ip
     29c:	3920      	subs	r1, #32
     29e:	d403      	bmi.n	2a8 <_sercom_get_async_baud_val+0x58>
     2a0:	4640      	mov	r0, r8
     2a2:	4088      	lsls	r0, r1
     2a4:	4681      	mov	r9, r0
     2a6:	e005      	b.n	2b4 <_sercom_get_async_baud_val+0x64>
     2a8:	2120      	movs	r1, #32
     2aa:	4665      	mov	r5, ip
     2ac:	1b4c      	subs	r4, r1, r5
     2ae:	4640      	mov	r0, r8
     2b0:	40e0      	lsrs	r0, r4
     2b2:	4681      	mov	r9, r0
     2b4:	4641      	mov	r1, r8
     2b6:	4664      	mov	r4, ip
     2b8:	40a1      	lsls	r1, r4
     2ba:	468a      	mov	sl, r1

		r = r << 1;
     2bc:	1c10      	adds	r0, r2, #0
     2be:	1c19      	adds	r1, r3, #0
     2c0:	1880      	adds	r0, r0, r2
     2c2:	4159      	adcs	r1, r3
     2c4:	1c02      	adds	r2, r0, #0
     2c6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     2c8:	465d      	mov	r5, fp
     2ca:	464c      	mov	r4, r9
     2cc:	4225      	tst	r5, r4
     2ce:	d002      	beq.n	2d6 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     2d0:	4642      	mov	r2, r8
     2d2:	4302      	orrs	r2, r0
     2d4:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     2d6:	429f      	cmp	r7, r3
     2d8:	d80c      	bhi.n	2f4 <_sercom_get_async_baud_val+0xa4>
     2da:	d101      	bne.n	2e0 <_sercom_get_async_baud_val+0x90>
     2dc:	4296      	cmp	r6, r2
     2de:	d809      	bhi.n	2f4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     2e0:	1b92      	subs	r2, r2, r6
     2e2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     2e4:	4650      	mov	r0, sl
     2e6:	9d02      	ldr	r5, [sp, #8]
     2e8:	4328      	orrs	r0, r5
     2ea:	4649      	mov	r1, r9
     2ec:	9c03      	ldr	r4, [sp, #12]
     2ee:	4321      	orrs	r1, r4
     2f0:	9002      	str	r0, [sp, #8]
     2f2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     2f4:	4665      	mov	r5, ip
     2f6:	3d01      	subs	r5, #1
     2f8:	46ac      	mov	ip, r5
     2fa:	d2ce      	bcs.n	29a <_sercom_get_async_baud_val+0x4a>
     2fc:	9802      	ldr	r0, [sp, #8]
     2fe:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     300:	4b3c      	ldr	r3, [pc, #240]	; (3f4 <_sercom_get_async_baud_val+0x1a4>)
     302:	4a3b      	ldr	r2, [pc, #236]	; (3f0 <_sercom_get_async_baud_val+0x1a0>)
     304:	1a12      	subs	r2, r2, r0
     306:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     308:	0c12      	lsrs	r2, r2, #16
     30a:	041b      	lsls	r3, r3, #16
     30c:	431a      	orrs	r2, r3
     30e:	e062      	b.n	3d6 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     310:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     312:	2b01      	cmp	r3, #1
     314:	d15f      	bne.n	3d6 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     316:	0f4f      	lsrs	r7, r1, #29
     318:	46b9      	mov	r9, r7
     31a:	00cd      	lsls	r5, r1, #3
     31c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     31e:	2100      	movs	r1, #0
     320:	1c32      	adds	r2, r6, #0
     322:	2300      	movs	r3, #0
     324:	4c34      	ldr	r4, [pc, #208]	; (3f8 <_sercom_get_async_baud_val+0x1a8>)
     326:	47a0      	blx	r4
     328:	1c06      	adds	r6, r0, #0
     32a:	1c0f      	adds	r7, r1, #0
     32c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     32e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     330:	9602      	str	r6, [sp, #8]
     332:	9703      	str	r7, [sp, #12]
     334:	469a      	mov	sl, r3
     336:	4650      	mov	r0, sl
     338:	b2c0      	uxtb	r0, r0
     33a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     33c:	2100      	movs	r1, #0
     33e:	4688      	mov	r8, r1
     340:	2200      	movs	r2, #0
     342:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     344:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     346:	1c27      	adds	r7, r4, #0
     348:	3f20      	subs	r7, #32
     34a:	d403      	bmi.n	354 <_sercom_get_async_baud_val+0x104>
     34c:	1c2e      	adds	r6, r5, #0
     34e:	40be      	lsls	r6, r7
     350:	9601      	str	r6, [sp, #4]
     352:	e004      	b.n	35e <_sercom_get_async_baud_val+0x10e>
     354:	2020      	movs	r0, #32
     356:	1b07      	subs	r7, r0, r4
     358:	1c29      	adds	r1, r5, #0
     35a:	40f9      	lsrs	r1, r7
     35c:	9101      	str	r1, [sp, #4]
     35e:	1c2e      	adds	r6, r5, #0
     360:	40a6      	lsls	r6, r4
     362:	9600      	str	r6, [sp, #0]

		r = r << 1;
     364:	1c10      	adds	r0, r2, #0
     366:	1c19      	adds	r1, r3, #0
     368:	1880      	adds	r0, r0, r2
     36a:	4159      	adcs	r1, r3
     36c:	1c02      	adds	r2, r0, #0
     36e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     370:	465f      	mov	r7, fp
     372:	4037      	ands	r7, r6
     374:	46bc      	mov	ip, r7
     376:	9e01      	ldr	r6, [sp, #4]
     378:	464f      	mov	r7, r9
     37a:	403e      	ands	r6, r7
     37c:	4667      	mov	r7, ip
     37e:	433e      	orrs	r6, r7
     380:	d002      	beq.n	388 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     382:	1c2a      	adds	r2, r5, #0
     384:	4302      	orrs	r2, r0
     386:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     388:	9803      	ldr	r0, [sp, #12]
     38a:	4298      	cmp	r0, r3
     38c:	d80b      	bhi.n	3a6 <_sercom_get_async_baud_val+0x156>
     38e:	d102      	bne.n	396 <_sercom_get_async_baud_val+0x146>
     390:	9902      	ldr	r1, [sp, #8]
     392:	4291      	cmp	r1, r2
     394:	d807      	bhi.n	3a6 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     396:	9e02      	ldr	r6, [sp, #8]
     398:	9f03      	ldr	r7, [sp, #12]
     39a:	1b92      	subs	r2, r2, r6
     39c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     39e:	4647      	mov	r7, r8
     3a0:	9800      	ldr	r0, [sp, #0]
     3a2:	4307      	orrs	r7, r0
     3a4:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     3a6:	3c01      	subs	r4, #1
     3a8:	d2cd      	bcs.n	346 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     3aa:	4641      	mov	r1, r8
     3ac:	4652      	mov	r2, sl
     3ae:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     3b0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     3b2:	4c12      	ldr	r4, [pc, #72]	; (3fc <_sercom_get_async_baud_val+0x1ac>)
     3b4:	42a3      	cmp	r3, r4
     3b6:	d908      	bls.n	3ca <_sercom_get_async_baud_val+0x17a>
     3b8:	9a05      	ldr	r2, [sp, #20]
     3ba:	3201      	adds	r2, #1
     3bc:	b2d2      	uxtb	r2, r2
     3be:	9205      	str	r2, [sp, #20]
     3c0:	2601      	movs	r6, #1
     3c2:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     3c4:	4657      	mov	r7, sl
     3c6:	2f08      	cmp	r7, #8
     3c8:	d1b5      	bne.n	336 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ca:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     3cc:	9805      	ldr	r0, [sp, #20]
     3ce:	2808      	cmp	r0, #8
     3d0:	d004      	beq.n	3dc <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     3d2:	0342      	lsls	r2, r0, #13
     3d4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     3d6:	9c04      	ldr	r4, [sp, #16]
     3d8:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     3da:	2400      	movs	r4, #0
}
     3dc:	1c20      	adds	r0, r4, #0
     3de:	b007      	add	sp, #28
     3e0:	bc3c      	pop	{r2, r3, r4, r5}
     3e2:	4690      	mov	r8, r2
     3e4:	4699      	mov	r9, r3
     3e6:	46a2      	mov	sl, r4
     3e8:	46ab      	mov	fp, r5
     3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3ec:	46c0      	nop			; (mov r8, r8)
     3ee:	46c0      	nop			; (mov r8, r8)
     3f0:	00000000 	.word	0x00000000
     3f4:	00000001 	.word	0x00000001
     3f8:	00004415 	.word	0x00004415
     3fc:	00001fff 	.word	0x00001fff

00000400 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     400:	b510      	push	{r4, lr}
     402:	b082      	sub	sp, #8
     404:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     406:	4b0f      	ldr	r3, [pc, #60]	; (444 <sercom_set_gclk_generator+0x44>)
     408:	781b      	ldrb	r3, [r3, #0]
     40a:	2b00      	cmp	r3, #0
     40c:	d001      	beq.n	412 <sercom_set_gclk_generator+0x12>
     40e:	2900      	cmp	r1, #0
     410:	d00d      	beq.n	42e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     412:	a901      	add	r1, sp, #4
     414:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     416:	2013      	movs	r0, #19
     418:	4b0b      	ldr	r3, [pc, #44]	; (448 <sercom_set_gclk_generator+0x48>)
     41a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     41c:	2013      	movs	r0, #19
     41e:	4b0b      	ldr	r3, [pc, #44]	; (44c <sercom_set_gclk_generator+0x4c>)
     420:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     422:	4b08      	ldr	r3, [pc, #32]	; (444 <sercom_set_gclk_generator+0x44>)
     424:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     426:	2201      	movs	r2, #1
     428:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     42a:	2000      	movs	r0, #0
     42c:	e007      	b.n	43e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     42e:	4b05      	ldr	r3, [pc, #20]	; (444 <sercom_set_gclk_generator+0x44>)
     430:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     432:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     434:	1b14      	subs	r4, r2, r4
     436:	1e62      	subs	r2, r4, #1
     438:	4194      	sbcs	r4, r2
     43a:	4264      	negs	r4, r4
     43c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     43e:	b002      	add	sp, #8
     440:	bd10      	pop	{r4, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	200000b0 	.word	0x200000b0
     448:	00003ca1 	.word	0x00003ca1
     44c:	00003c15 	.word	0x00003c15

00000450 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     450:	4b44      	ldr	r3, [pc, #272]	; (564 <_sercom_get_default_pad+0x114>)
     452:	4298      	cmp	r0, r3
     454:	d033      	beq.n	4be <_sercom_get_default_pad+0x6e>
     456:	d806      	bhi.n	466 <_sercom_get_default_pad+0x16>
     458:	4b43      	ldr	r3, [pc, #268]	; (568 <_sercom_get_default_pad+0x118>)
     45a:	4298      	cmp	r0, r3
     45c:	d00d      	beq.n	47a <_sercom_get_default_pad+0x2a>
     45e:	4b43      	ldr	r3, [pc, #268]	; (56c <_sercom_get_default_pad+0x11c>)
     460:	4298      	cmp	r0, r3
     462:	d01b      	beq.n	49c <_sercom_get_default_pad+0x4c>
     464:	e06f      	b.n	546 <_sercom_get_default_pad+0xf6>
     466:	4b42      	ldr	r3, [pc, #264]	; (570 <_sercom_get_default_pad+0x120>)
     468:	4298      	cmp	r0, r3
     46a:	d04a      	beq.n	502 <_sercom_get_default_pad+0xb2>
     46c:	4b41      	ldr	r3, [pc, #260]	; (574 <_sercom_get_default_pad+0x124>)
     46e:	4298      	cmp	r0, r3
     470:	d058      	beq.n	524 <_sercom_get_default_pad+0xd4>
     472:	4b41      	ldr	r3, [pc, #260]	; (578 <_sercom_get_default_pad+0x128>)
     474:	4298      	cmp	r0, r3
     476:	d166      	bne.n	546 <_sercom_get_default_pad+0xf6>
     478:	e032      	b.n	4e0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     47a:	2901      	cmp	r1, #1
     47c:	d065      	beq.n	54a <_sercom_get_default_pad+0xfa>
     47e:	2900      	cmp	r1, #0
     480:	d004      	beq.n	48c <_sercom_get_default_pad+0x3c>
     482:	2902      	cmp	r1, #2
     484:	d006      	beq.n	494 <_sercom_get_default_pad+0x44>
     486:	2903      	cmp	r1, #3
     488:	d006      	beq.n	498 <_sercom_get_default_pad+0x48>
     48a:	e001      	b.n	490 <_sercom_get_default_pad+0x40>
     48c:	483b      	ldr	r0, [pc, #236]	; (57c <_sercom_get_default_pad+0x12c>)
     48e:	e067      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     490:	2000      	movs	r0, #0
     492:	e065      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     494:	483a      	ldr	r0, [pc, #232]	; (580 <_sercom_get_default_pad+0x130>)
     496:	e063      	b.n	560 <_sercom_get_default_pad+0x110>
     498:	483a      	ldr	r0, [pc, #232]	; (584 <_sercom_get_default_pad+0x134>)
     49a:	e061      	b.n	560 <_sercom_get_default_pad+0x110>
     49c:	2901      	cmp	r1, #1
     49e:	d056      	beq.n	54e <_sercom_get_default_pad+0xfe>
     4a0:	2900      	cmp	r1, #0
     4a2:	d004      	beq.n	4ae <_sercom_get_default_pad+0x5e>
     4a4:	2902      	cmp	r1, #2
     4a6:	d006      	beq.n	4b6 <_sercom_get_default_pad+0x66>
     4a8:	2903      	cmp	r1, #3
     4aa:	d006      	beq.n	4ba <_sercom_get_default_pad+0x6a>
     4ac:	e001      	b.n	4b2 <_sercom_get_default_pad+0x62>
     4ae:	2003      	movs	r0, #3
     4b0:	e056      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4b2:	2000      	movs	r0, #0
     4b4:	e054      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4b6:	4834      	ldr	r0, [pc, #208]	; (588 <_sercom_get_default_pad+0x138>)
     4b8:	e052      	b.n	560 <_sercom_get_default_pad+0x110>
     4ba:	4834      	ldr	r0, [pc, #208]	; (58c <_sercom_get_default_pad+0x13c>)
     4bc:	e050      	b.n	560 <_sercom_get_default_pad+0x110>
     4be:	2901      	cmp	r1, #1
     4c0:	d047      	beq.n	552 <_sercom_get_default_pad+0x102>
     4c2:	2900      	cmp	r1, #0
     4c4:	d004      	beq.n	4d0 <_sercom_get_default_pad+0x80>
     4c6:	2902      	cmp	r1, #2
     4c8:	d006      	beq.n	4d8 <_sercom_get_default_pad+0x88>
     4ca:	2903      	cmp	r1, #3
     4cc:	d006      	beq.n	4dc <_sercom_get_default_pad+0x8c>
     4ce:	e001      	b.n	4d4 <_sercom_get_default_pad+0x84>
     4d0:	482f      	ldr	r0, [pc, #188]	; (590 <_sercom_get_default_pad+0x140>)
     4d2:	e045      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4d4:	2000      	movs	r0, #0
     4d6:	e043      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4d8:	482e      	ldr	r0, [pc, #184]	; (594 <_sercom_get_default_pad+0x144>)
     4da:	e041      	b.n	560 <_sercom_get_default_pad+0x110>
     4dc:	482e      	ldr	r0, [pc, #184]	; (598 <_sercom_get_default_pad+0x148>)
     4de:	e03f      	b.n	560 <_sercom_get_default_pad+0x110>
     4e0:	2901      	cmp	r1, #1
     4e2:	d038      	beq.n	556 <_sercom_get_default_pad+0x106>
     4e4:	2900      	cmp	r1, #0
     4e6:	d004      	beq.n	4f2 <_sercom_get_default_pad+0xa2>
     4e8:	2902      	cmp	r1, #2
     4ea:	d006      	beq.n	4fa <_sercom_get_default_pad+0xaa>
     4ec:	2903      	cmp	r1, #3
     4ee:	d006      	beq.n	4fe <_sercom_get_default_pad+0xae>
     4f0:	e001      	b.n	4f6 <_sercom_get_default_pad+0xa6>
     4f2:	482a      	ldr	r0, [pc, #168]	; (59c <_sercom_get_default_pad+0x14c>)
     4f4:	e034      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4f6:	2000      	movs	r0, #0
     4f8:	e032      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4fa:	4829      	ldr	r0, [pc, #164]	; (5a0 <_sercom_get_default_pad+0x150>)
     4fc:	e030      	b.n	560 <_sercom_get_default_pad+0x110>
     4fe:	4829      	ldr	r0, [pc, #164]	; (5a4 <_sercom_get_default_pad+0x154>)
     500:	e02e      	b.n	560 <_sercom_get_default_pad+0x110>
     502:	2901      	cmp	r1, #1
     504:	d029      	beq.n	55a <_sercom_get_default_pad+0x10a>
     506:	2900      	cmp	r1, #0
     508:	d004      	beq.n	514 <_sercom_get_default_pad+0xc4>
     50a:	2902      	cmp	r1, #2
     50c:	d006      	beq.n	51c <_sercom_get_default_pad+0xcc>
     50e:	2903      	cmp	r1, #3
     510:	d006      	beq.n	520 <_sercom_get_default_pad+0xd0>
     512:	e001      	b.n	518 <_sercom_get_default_pad+0xc8>
     514:	4824      	ldr	r0, [pc, #144]	; (5a8 <_sercom_get_default_pad+0x158>)
     516:	e023      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     518:	2000      	movs	r0, #0
     51a:	e021      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     51c:	4823      	ldr	r0, [pc, #140]	; (5ac <_sercom_get_default_pad+0x15c>)
     51e:	e01f      	b.n	560 <_sercom_get_default_pad+0x110>
     520:	4823      	ldr	r0, [pc, #140]	; (5b0 <_sercom_get_default_pad+0x160>)
     522:	e01d      	b.n	560 <_sercom_get_default_pad+0x110>
     524:	2901      	cmp	r1, #1
     526:	d01a      	beq.n	55e <_sercom_get_default_pad+0x10e>
     528:	2900      	cmp	r1, #0
     52a:	d004      	beq.n	536 <_sercom_get_default_pad+0xe6>
     52c:	2902      	cmp	r1, #2
     52e:	d006      	beq.n	53e <_sercom_get_default_pad+0xee>
     530:	2903      	cmp	r1, #3
     532:	d006      	beq.n	542 <_sercom_get_default_pad+0xf2>
     534:	e001      	b.n	53a <_sercom_get_default_pad+0xea>
     536:	481f      	ldr	r0, [pc, #124]	; (5b4 <_sercom_get_default_pad+0x164>)
     538:	e012      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     53a:	2000      	movs	r0, #0
     53c:	e010      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     53e:	481e      	ldr	r0, [pc, #120]	; (5b8 <_sercom_get_default_pad+0x168>)
     540:	e00e      	b.n	560 <_sercom_get_default_pad+0x110>
     542:	481e      	ldr	r0, [pc, #120]	; (5bc <_sercom_get_default_pad+0x16c>)
     544:	e00c      	b.n	560 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     546:	2000      	movs	r0, #0
     548:	e00a      	b.n	560 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     54a:	481d      	ldr	r0, [pc, #116]	; (5c0 <_sercom_get_default_pad+0x170>)
     54c:	e008      	b.n	560 <_sercom_get_default_pad+0x110>
     54e:	481d      	ldr	r0, [pc, #116]	; (5c4 <_sercom_get_default_pad+0x174>)
     550:	e006      	b.n	560 <_sercom_get_default_pad+0x110>
     552:	481d      	ldr	r0, [pc, #116]	; (5c8 <_sercom_get_default_pad+0x178>)
     554:	e004      	b.n	560 <_sercom_get_default_pad+0x110>
     556:	481d      	ldr	r0, [pc, #116]	; (5cc <_sercom_get_default_pad+0x17c>)
     558:	e002      	b.n	560 <_sercom_get_default_pad+0x110>
     55a:	481d      	ldr	r0, [pc, #116]	; (5d0 <_sercom_get_default_pad+0x180>)
     55c:	e000      	b.n	560 <_sercom_get_default_pad+0x110>
     55e:	481d      	ldr	r0, [pc, #116]	; (5d4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     560:	4770      	bx	lr
     562:	46c0      	nop			; (mov r8, r8)
     564:	42001000 	.word	0x42001000
     568:	42000800 	.word	0x42000800
     56c:	42000c00 	.word	0x42000c00
     570:	42001800 	.word	0x42001800
     574:	42001c00 	.word	0x42001c00
     578:	42001400 	.word	0x42001400
     57c:	00040003 	.word	0x00040003
     580:	00060003 	.word	0x00060003
     584:	00070003 	.word	0x00070003
     588:	001e0003 	.word	0x001e0003
     58c:	001f0003 	.word	0x001f0003
     590:	000c0002 	.word	0x000c0002
     594:	000e0002 	.word	0x000e0002
     598:	000f0002 	.word	0x000f0002
     59c:	00100003 	.word	0x00100003
     5a0:	00120003 	.word	0x00120003
     5a4:	00130003 	.word	0x00130003
     5a8:	00530005 	.word	0x00530005
     5ac:	003e0005 	.word	0x003e0005
     5b0:	00520005 	.word	0x00520005
     5b4:	00160003 	.word	0x00160003
     5b8:	00180003 	.word	0x00180003
     5bc:	00190003 	.word	0x00190003
     5c0:	00050003 	.word	0x00050003
     5c4:	00010003 	.word	0x00010003
     5c8:	000d0002 	.word	0x000d0002
     5cc:	00110003 	.word	0x00110003
     5d0:	003f0005 	.word	0x003f0005
     5d4:	00170003 	.word	0x00170003

000005d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5dc:	4a0c      	ldr	r2, [pc, #48]	; (610 <_sercom_get_sercom_inst_index+0x38>)
     5de:	466b      	mov	r3, sp
     5e0:	ca70      	ldmia	r2!, {r4, r5, r6}
     5e2:	c370      	stmia	r3!, {r4, r5, r6}
     5e4:	ca32      	ldmia	r2!, {r1, r4, r5}
     5e6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5e8:	9e00      	ldr	r6, [sp, #0]
     5ea:	4286      	cmp	r6, r0
     5ec:	d006      	beq.n	5fc <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5ee:	2301      	movs	r3, #1
     5f0:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5f2:	4669      	mov	r1, sp
     5f4:	5852      	ldr	r2, [r2, r1]
     5f6:	4282      	cmp	r2, r0
     5f8:	d103      	bne.n	602 <_sercom_get_sercom_inst_index+0x2a>
     5fa:	e000      	b.n	5fe <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5fc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     5fe:	b2d8      	uxtb	r0, r3
     600:	e003      	b.n	60a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     602:	3301      	adds	r3, #1
     604:	2b06      	cmp	r3, #6
     606:	d1f3      	bne.n	5f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     608:	2000      	movs	r0, #0
}
     60a:	b006      	add	sp, #24
     60c:	bd70      	pop	{r4, r5, r6, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	000053cc 	.word	0x000053cc

00000614 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	b084      	sub	sp, #16
     618:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     61a:	ab01      	add	r3, sp, #4
     61c:	4a0a      	ldr	r2, [pc, #40]	; (648 <_tc_get_inst_index+0x34>)
     61e:	ca70      	ldmia	r2!, {r4, r5, r6}
     620:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     622:	9b01      	ldr	r3, [sp, #4]
     624:	4283      	cmp	r3, r0
     626:	d00a      	beq.n	63e <_tc_get_inst_index+0x2a>
     628:	9c02      	ldr	r4, [sp, #8]
     62a:	4284      	cmp	r4, r0
     62c:	d005      	beq.n	63a <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     62e:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     630:	9d03      	ldr	r5, [sp, #12]
     632:	428d      	cmp	r5, r1
     634:	d105      	bne.n	642 <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     636:	2002      	movs	r0, #2
     638:	e002      	b.n	640 <_tc_get_inst_index+0x2c>
     63a:	2001      	movs	r0, #1
     63c:	e000      	b.n	640 <_tc_get_inst_index+0x2c>
     63e:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
     640:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     642:	b004      	add	sp, #16
     644:	bd70      	pop	{r4, r5, r6, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	000053e4 	.word	0x000053e4

0000064c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     64c:	b5f0      	push	{r4, r5, r6, r7, lr}
     64e:	464f      	mov	r7, r9
     650:	4646      	mov	r6, r8
     652:	b4c0      	push	{r6, r7}
     654:	b087      	sub	sp, #28
     656:	1c04      	adds	r4, r0, #0
     658:	1c0d      	adds	r5, r1, #0
     65a:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     65c:	1c08      	adds	r0, r1, #0
     65e:	4b90      	ldr	r3, [pc, #576]	; (8a0 <tc_init+0x254>)
     660:	4798      	blx	r3
     662:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     664:	4f8f      	ldr	r7, [pc, #572]	; (8a4 <tc_init+0x258>)
     666:	1c39      	adds	r1, r7, #0
     668:	310c      	adds	r1, #12
     66a:	a805      	add	r0, sp, #20
     66c:	2203      	movs	r2, #3
     66e:	4e8e      	ldr	r6, [pc, #568]	; (8a8 <tc_init+0x25c>)
     670:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     672:	1c39      	adds	r1, r7, #0
     674:	3110      	adds	r1, #16
     676:	a803      	add	r0, sp, #12
     678:	2206      	movs	r2, #6
     67a:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     67c:	2300      	movs	r3, #0
     67e:	60a3      	str	r3, [r4, #8]
     680:	60e3      	str	r3, [r4, #12]
     682:	6123      	str	r3, [r4, #16]
     684:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     686:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     688:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     68a:	4648      	mov	r0, r9
     68c:	0082      	lsls	r2, r0, #2
     68e:	4b87      	ldr	r3, [pc, #540]	; (8ac <tc_init+0x260>)
     690:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     692:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     694:	4641      	mov	r1, r8
     696:	788b      	ldrb	r3, [r1, #2]
     698:	2b08      	cmp	r3, #8
     69a:	d104      	bne.n	6a6 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     69c:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     69e:	464a      	mov	r2, r9
     6a0:	07d2      	lsls	r2, r2, #31
     6a2:	d400      	bmi.n	6a6 <tc_init+0x5a>
     6a4:	e0f6      	b.n	894 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     6a6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6a8:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     6aa:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6ac:	07d9      	lsls	r1, r3, #31
     6ae:	d500      	bpl.n	6b2 <tc_init+0x66>
     6b0:	e0f0      	b.n	894 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6b2:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     6b4:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6b6:	06da      	lsls	r2, r3, #27
     6b8:	d500      	bpl.n	6bc <tc_init+0x70>
     6ba:	e0eb      	b.n	894 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     6bc:	882b      	ldrh	r3, [r5, #0]
     6be:	0799      	lsls	r1, r3, #30
     6c0:	d500      	bpl.n	6c4 <tc_init+0x78>
     6c2:	e0e7      	b.n	894 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     6c4:	4642      	mov	r2, r8
     6c6:	7c13      	ldrb	r3, [r2, #16]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d00c      	beq.n	6e6 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6cc:	a902      	add	r1, sp, #8
     6ce:	2301      	movs	r3, #1
     6d0:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     6d2:	2200      	movs	r2, #0
     6d4:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     6d6:	4640      	mov	r0, r8
     6d8:	6980      	ldr	r0, [r0, #24]
     6da:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     6dc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     6de:	4642      	mov	r2, r8
     6e0:	7d10      	ldrb	r0, [r2, #20]
     6e2:	4b73      	ldr	r3, [pc, #460]	; (8b0 <tc_init+0x264>)
     6e4:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     6e6:	4640      	mov	r0, r8
     6e8:	7f03      	ldrb	r3, [r0, #28]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d00b      	beq.n	706 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6ee:	a902      	add	r1, sp, #8
     6f0:	2301      	movs	r3, #1
     6f2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     6f4:	2200      	movs	r2, #0
     6f6:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     6f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
     6fa:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     6fc:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     6fe:	6a03      	ldr	r3, [r0, #32]
     700:	b2d8      	uxtb	r0, r3
     702:	4b6b      	ldr	r3, [pc, #428]	; (8b0 <tc_init+0x264>)
     704:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     706:	4b6b      	ldr	r3, [pc, #428]	; (8b4 <tc_init+0x268>)
     708:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     70a:	4648      	mov	r0, r9
     70c:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     70e:	a803      	add	r0, sp, #12
     710:	5a12      	ldrh	r2, [r2, r0]
     712:	430a      	orrs	r2, r1
     714:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     716:	4641      	mov	r1, r8
     718:	788b      	ldrb	r3, [r1, #2]
     71a:	2b08      	cmp	r3, #8
     71c:	d108      	bne.n	730 <tc_init+0xe4>
     71e:	4b65      	ldr	r3, [pc, #404]	; (8b4 <tc_init+0x268>)
     720:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     722:	4648      	mov	r0, r9
     724:	3001      	adds	r0, #1
     726:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     728:	a903      	add	r1, sp, #12
     72a:	5a41      	ldrh	r1, [r0, r1]
     72c:	430a      	orrs	r2, r1
     72e:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
     730:	a901      	add	r1, sp, #4
     732:	4642      	mov	r2, r8
     734:	7813      	ldrb	r3, [r2, #0]
     736:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     738:	ab05      	add	r3, sp, #20
     73a:	4648      	mov	r0, r9
     73c:	5c1e      	ldrb	r6, [r3, r0]
     73e:	1c30      	adds	r0, r6, #0
     740:	4b5d      	ldr	r3, [pc, #372]	; (8b8 <tc_init+0x26c>)
     742:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     744:	1c30      	adds	r0, r6, #0
     746:	4b5d      	ldr	r3, [pc, #372]	; (8bc <tc_init+0x270>)
     748:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
     74a:	4641      	mov	r1, r8
     74c:	8888      	ldrh	r0, [r1, #4]
     74e:	890b      	ldrh	r3, [r1, #8]
     750:	4303      	orrs	r3, r0
     752:	7988      	ldrb	r0, [r1, #6]
     754:	788a      	ldrb	r2, [r1, #2]
     756:	4310      	orrs	r0, r2
     758:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     75a:	784b      	ldrb	r3, [r1, #1]
     75c:	2b00      	cmp	r3, #0
     75e:	d002      	beq.n	766 <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     760:	2380      	movs	r3, #128	; 0x80
     762:	011b      	lsls	r3, r3, #4
     764:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     766:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     768:	227f      	movs	r2, #127	; 0x7f
     76a:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     76c:	4393      	bics	r3, r2
     76e:	d1fc      	bne.n	76a <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     770:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     772:	4642      	mov	r2, r8
     774:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     776:	1e43      	subs	r3, r0, #1
     778:	4198      	sbcs	r0, r3
     77a:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
     77c:	7b93      	ldrb	r3, [r2, #14]
     77e:	2b00      	cmp	r3, #0
     780:	d001      	beq.n	786 <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     782:	2301      	movs	r3, #1
     784:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     786:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     788:	227f      	movs	r2, #127	; 0x7f
     78a:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     78c:	4393      	bics	r3, r2
     78e:	d1fc      	bne.n	78a <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     790:	23ff      	movs	r3, #255	; 0xff
     792:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     794:	2800      	cmp	r0, #0
     796:	d005      	beq.n	7a4 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     798:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     79a:	227f      	movs	r2, #127	; 0x7f
     79c:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
     79e:	4393      	bics	r3, r2
     7a0:	d1fc      	bne.n	79c <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     7a2:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     7a4:	4643      	mov	r3, r8
     7a6:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     7a8:	7adb      	ldrb	r3, [r3, #11]
     7aa:	2b00      	cmp	r3, #0
     7ac:	d001      	beq.n	7b2 <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     7ae:	2310      	movs	r3, #16
     7b0:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     7b2:	4641      	mov	r1, r8
     7b4:	7b0b      	ldrb	r3, [r1, #12]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d001      	beq.n	7be <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     7ba:	2320      	movs	r3, #32
     7bc:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7be:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7c0:	227f      	movs	r2, #127	; 0x7f
     7c2:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     7c4:	4393      	bics	r3, r2
     7c6:	d1fc      	bne.n	7c2 <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     7c8:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7ca:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7cc:	217f      	movs	r1, #127	; 0x7f
     7ce:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     7d0:	438b      	bics	r3, r1
     7d2:	d1fc      	bne.n	7ce <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     7d4:	7923      	ldrb	r3, [r4, #4]
     7d6:	2b04      	cmp	r3, #4
     7d8:	d005      	beq.n	7e6 <tc_init+0x19a>
     7da:	2b08      	cmp	r3, #8
     7dc:	d041      	beq.n	862 <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     7de:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     7e0:	2b00      	cmp	r3, #0
     7e2:	d157      	bne.n	894 <tc_init+0x248>
     7e4:	e024      	b.n	830 <tc_init+0x1e4>
     7e6:	217f      	movs	r1, #127	; 0x7f
     7e8:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     7ea:	438b      	bics	r3, r1
     7ec:	d1fc      	bne.n	7e8 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     7ee:	2328      	movs	r3, #40	; 0x28
     7f0:	4642      	mov	r2, r8
     7f2:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     7f4:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7f6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7f8:	227f      	movs	r2, #127	; 0x7f
     7fa:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     7fc:	4393      	bics	r3, r2
     7fe:	d1fc      	bne.n	7fa <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     800:	2329      	movs	r3, #41	; 0x29
     802:	4640      	mov	r0, r8
     804:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     806:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     808:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     80a:	227f      	movs	r2, #127	; 0x7f
     80c:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     80e:	4393      	bics	r3, r2
     810:	d1fc      	bne.n	80c <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     812:	232a      	movs	r3, #42	; 0x2a
     814:	4641      	mov	r1, r8
     816:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     818:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     81a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     81c:	227f      	movs	r2, #127	; 0x7f
     81e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     820:	4393      	bics	r3, r2
     822:	d1fc      	bne.n	81e <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     824:	232b      	movs	r3, #43	; 0x2b
     826:	4642      	mov	r2, r8
     828:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     82a:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     82c:	2000      	movs	r0, #0
     82e:	e031      	b.n	894 <tc_init+0x248>
     830:	217f      	movs	r1, #127	; 0x7f
     832:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     834:	438b      	bics	r3, r1
     836:	d1fc      	bne.n	832 <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     838:	4640      	mov	r0, r8
     83a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
     83c:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     83e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     840:	227f      	movs	r2, #127	; 0x7f
     842:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
     844:	4393      	bics	r3, r2
     846:	d1fc      	bne.n	842 <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     848:	4641      	mov	r1, r8
     84a:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     84c:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     84e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     850:	227f      	movs	r2, #127	; 0x7f
     852:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     854:	4393      	bics	r3, r2
     856:	d1fc      	bne.n	852 <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     858:	4642      	mov	r2, r8
     85a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     85c:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     85e:	2000      	movs	r0, #0
     860:	e018      	b.n	894 <tc_init+0x248>
     862:	217f      	movs	r1, #127	; 0x7f
     864:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     866:	438b      	bics	r3, r1
     868:	d1fc      	bne.n	864 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     86a:	4643      	mov	r3, r8
     86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     86e:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     870:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     872:	227f      	movs	r2, #127	; 0x7f
     874:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
     876:	4393      	bics	r3, r2
     878:	d1fc      	bne.n	874 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     87a:	4640      	mov	r0, r8
     87c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     87e:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     880:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     882:	227f      	movs	r2, #127	; 0x7f
     884:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     886:	4393      	bics	r3, r2
     888:	d1fc      	bne.n	884 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     88a:	4641      	mov	r1, r8
     88c:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     88e:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     890:	2000      	movs	r0, #0
     892:	e7ff      	b.n	894 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     894:	b007      	add	sp, #28
     896:	bc0c      	pop	{r2, r3}
     898:	4690      	mov	r8, r2
     89a:	4699      	mov	r9, r3
     89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00000615 	.word	0x00000615
     8a4:	000053e4 	.word	0x000053e4
     8a8:	000044a5 	.word	0x000044a5
     8ac:	200043f0 	.word	0x200043f0
     8b0:	00003d7d 	.word	0x00003d7d
     8b4:	40000400 	.word	0x40000400
     8b8:	00003ca1 	.word	0x00003ca1
     8bc:	00003c15 	.word	0x00003c15

000008c0 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     8c0:	6802      	ldr	r2, [r0, #0]
     8c2:	217f      	movs	r1, #127	; 0x7f
     8c4:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     8c6:	438b      	bics	r3, r1
     8c8:	d1fc      	bne.n	8c4 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     8ca:	7903      	ldrb	r3, [r0, #4]
     8cc:	2b04      	cmp	r3, #4
     8ce:	d005      	beq.n	8dc <tc_get_count_value+0x1c>
     8d0:	2b08      	cmp	r3, #8
     8d2:	d009      	beq.n	8e8 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     8d4:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     8d6:	2b00      	cmp	r3, #0
     8d8:	d108      	bne.n	8ec <tc_get_count_value+0x2c>
     8da:	e002      	b.n	8e2 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     8dc:	7c10      	ldrb	r0, [r2, #16]
     8de:	b2c0      	uxtb	r0, r0
     8e0:	e004      	b.n	8ec <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     8e2:	8a10      	ldrh	r0, [r2, #16]
     8e4:	b280      	uxth	r0, r0
     8e6:	e001      	b.n	8ec <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
     8e8:	6910      	ldr	r0, [r2, #16]
     8ea:	e7ff      	b.n	8ec <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
     8ec:	4770      	bx	lr
     8ee:	46c0      	nop			; (mov r8, r8)

000008f0 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     8f0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     8f2:	6804      	ldr	r4, [r0, #0]
     8f4:	257f      	movs	r5, #127	; 0x7f
     8f6:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
     8f8:	43ab      	bics	r3, r5
     8fa:	d1fc      	bne.n	8f6 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     8fc:	7903      	ldrb	r3, [r0, #4]
     8fe:	2b04      	cmp	r3, #4
     900:	d005      	beq.n	90e <tc_set_compare_value+0x1e>
     902:	2b08      	cmp	r3, #8
     904:	d014      	beq.n	930 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     906:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     908:	2b00      	cmp	r3, #0
     90a:	d119      	bne.n	940 <tc_set_compare_value+0x50>
     90c:	e007      	b.n	91e <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     90e:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
     910:	2901      	cmp	r1, #1
     912:	d815      	bhi.n	940 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
     914:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
     916:	1861      	adds	r1, r4, r1
     918:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
     91a:	2000      	movs	r0, #0
     91c:	e010      	b.n	940 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     91e:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
     920:	2901      	cmp	r1, #1
     922:	d80d      	bhi.n	940 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
     924:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
     926:	310c      	adds	r1, #12
     928:	0049      	lsls	r1, r1, #1
     92a:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
     92c:	2000      	movs	r0, #0
     92e:	e007      	b.n	940 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     930:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
     932:	2901      	cmp	r1, #1
     934:	d804      	bhi.n	940 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
     936:	3106      	adds	r1, #6
     938:	0089      	lsls	r1, r1, #2
     93a:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
     93c:	2000      	movs	r0, #0
     93e:	e7ff      	b.n	940 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
     940:	bd30      	pop	{r4, r5, pc}
     942:	46c0      	nop			; (mov r8, r8)

00000944 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     944:	b5f0      	push	{r4, r5, r6, r7, lr}
     946:	4647      	mov	r7, r8
     948:	b480      	push	{r7}
     94a:	1c0c      	adds	r4, r1, #0
     94c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     94e:	2800      	cmp	r0, #0
     950:	d10c      	bne.n	96c <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     952:	2a00      	cmp	r2, #0
     954:	dd0d      	ble.n	972 <_read+0x2e>
     956:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     958:	4e09      	ldr	r6, [pc, #36]	; (980 <_read+0x3c>)
     95a:	4d0a      	ldr	r5, [pc, #40]	; (984 <_read+0x40>)
     95c:	6830      	ldr	r0, [r6, #0]
     95e:	1c21      	adds	r1, r4, #0
     960:	682b      	ldr	r3, [r5, #0]
     962:	4798      	blx	r3
		ptr++;
     964:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     966:	42bc      	cmp	r4, r7
     968:	d1f8      	bne.n	95c <_read+0x18>
     96a:	e004      	b.n	976 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     96c:	2001      	movs	r0, #1
     96e:	4240      	negs	r0, r0
     970:	e002      	b.n	978 <_read+0x34>
	}

	for (; len > 0; --len) {
     972:	2000      	movs	r0, #0
     974:	e000      	b.n	978 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     976:	4640      	mov	r0, r8
	}
	return nChars;
}
     978:	bc04      	pop	{r2}
     97a:	4690      	mov	r8, r2
     97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	200042bc 	.word	0x200042bc
     984:	200042b4 	.word	0x200042b4

00000988 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	4647      	mov	r7, r8
     98c:	b480      	push	{r7}
     98e:	1c0e      	adds	r6, r1, #0
     990:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     992:	3801      	subs	r0, #1
     994:	2802      	cmp	r0, #2
     996:	d810      	bhi.n	9ba <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     998:	2a00      	cmp	r2, #0
     99a:	d011      	beq.n	9c0 <_write+0x38>
     99c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     99e:	4b0d      	ldr	r3, [pc, #52]	; (9d4 <_write+0x4c>)
     9a0:	4698      	mov	r8, r3
     9a2:	4f0d      	ldr	r7, [pc, #52]	; (9d8 <_write+0x50>)
     9a4:	4643      	mov	r3, r8
     9a6:	6818      	ldr	r0, [r3, #0]
     9a8:	5d31      	ldrb	r1, [r6, r4]
     9aa:	683b      	ldr	r3, [r7, #0]
     9ac:	4798      	blx	r3
     9ae:	2800      	cmp	r0, #0
     9b0:	db08      	blt.n	9c4 <_write+0x3c>
			return -1;
		}
		++nChars;
     9b2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     9b4:	42a5      	cmp	r5, r4
     9b6:	d1f5      	bne.n	9a4 <_write+0x1c>
     9b8:	e007      	b.n	9ca <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     9ba:	2001      	movs	r0, #1
     9bc:	4240      	negs	r0, r0
     9be:	e005      	b.n	9cc <_write+0x44>
	}

	for (; len != 0; --len) {
     9c0:	2000      	movs	r0, #0
     9c2:	e003      	b.n	9cc <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     9c4:	2001      	movs	r0, #1
     9c6:	4240      	negs	r0, r0
     9c8:	e000      	b.n	9cc <_write+0x44>
		}
		++nChars;
     9ca:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     9cc:	bc04      	pop	{r2}
     9ce:	4690      	mov	r8, r2
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	200042bc 	.word	0x200042bc
     9d8:	200042b8 	.word	0x200042b8

000009dc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     9dc:	4b03      	ldr	r3, [pc, #12]	; (9ec <prvTaskExitError+0x10>)
     9de:	681b      	ldr	r3, [r3, #0]
     9e0:	3301      	adds	r3, #1
     9e2:	d001      	beq.n	9e8 <prvTaskExitError+0xc>
     9e4:	b672      	cpsid	i
     9e6:	e7fe      	b.n	9e6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     9e8:	b672      	cpsid	i
     9ea:	e7fe      	b.n	9ea <prvTaskExitError+0xe>
     9ec:	20000000 	.word	0x20000000

000009f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     9f0:	4a06      	ldr	r2, [pc, #24]	; (a0c <pxCurrentTCBConst2>)
     9f2:	6813      	ldr	r3, [r2, #0]
     9f4:	6818      	ldr	r0, [r3, #0]
     9f6:	3020      	adds	r0, #32
     9f8:	f380 8809 	msr	PSP, r0
     9fc:	2002      	movs	r0, #2
     9fe:	f380 8814 	msr	CONTROL, r0
     a02:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     a04:	46ae      	mov	lr, r5
     a06:	b662      	cpsie	i
     a08:	bd00      	pop	{pc}
     a0a:	46c0      	nop			; (mov r8, r8)

00000a0c <pxCurrentTCBConst2>:
     a0c:	20004164 	.word	0x20004164

00000a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     a10:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     a12:	1f03      	subs	r3, r0, #4
     a14:	2480      	movs	r4, #128	; 0x80
     a16:	0464      	lsls	r4, r4, #17
     a18:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     a1a:	3b04      	subs	r3, #4
     a1c:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     a1e:	3b04      	subs	r3, #4
     a20:	4902      	ldr	r1, [pc, #8]	; (a2c <pxPortInitialiseStack+0x1c>)
     a22:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     a24:	3b14      	subs	r3, #20
     a26:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
     a28:	3840      	subs	r0, #64	; 0x40
}
     a2a:	bd10      	pop	{r4, pc}
     a2c:	000009dd 	.word	0x000009dd

00000a30 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
     a30:	4770      	bx	lr
     a32:	46c0      	nop			; (mov r8, r8)

00000a34 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     a34:	2280      	movs	r2, #128	; 0x80
     a36:	0552      	lsls	r2, r2, #21
     a38:	4b03      	ldr	r3, [pc, #12]	; (a48 <vPortYield+0x14>)
     a3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
     a3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     a40:	f3bf 8f6f 	isb	sy
}
     a44:	4770      	bx	lr
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	e000ed04 	.word	0xe000ed04

00000a4c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
     a4c:	b672      	cpsid	i
    uxCriticalNesting++;
     a4e:	4b04      	ldr	r3, [pc, #16]	; (a60 <vPortEnterCritical+0x14>)
     a50:	681a      	ldr	r2, [r3, #0]
     a52:	3201      	adds	r2, #1
     a54:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
     a56:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     a5a:	f3bf 8f6f 	isb	sy
}
     a5e:	4770      	bx	lr
     a60:	20000000 	.word	0x20000000

00000a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
     a64:	4b06      	ldr	r3, [pc, #24]	; (a80 <vPortExitCritical+0x1c>)
     a66:	681b      	ldr	r3, [r3, #0]
     a68:	2b00      	cmp	r3, #0
     a6a:	d101      	bne.n	a70 <vPortExitCritical+0xc>
     a6c:	b672      	cpsid	i
     a6e:	e7fe      	b.n	a6e <vPortExitCritical+0xa>
    uxCriticalNesting--;
     a70:	3b01      	subs	r3, #1
     a72:	4a03      	ldr	r2, [pc, #12]	; (a80 <vPortExitCritical+0x1c>)
     a74:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     a76:	2b00      	cmp	r3, #0
     a78:	d100      	bne.n	a7c <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     a7a:	b662      	cpsie	i
    }
}
     a7c:	4770      	bx	lr
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	20000000 	.word	0x20000000

00000a84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     a84:	f3ef 8010 	mrs	r0, PRIMASK
     a88:	b672      	cpsid	i
     a8a:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
     a8c:	2000      	movs	r0, #0
     a8e:	46c0      	nop			; (mov r8, r8)

00000a90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
     a90:	f380 8810 	msr	PRIMASK, r0
     a94:	4770      	bx	lr
     a96:	46c0      	nop			; (mov r8, r8)

00000a98 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     a98:	f3ef 8009 	mrs	r0, PSP
     a9c:	4b0e      	ldr	r3, [pc, #56]	; (ad8 <pxCurrentTCBConst>)
     a9e:	681a      	ldr	r2, [r3, #0]
     aa0:	3820      	subs	r0, #32
     aa2:	6010      	str	r0, [r2, #0]
     aa4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     aa6:	4644      	mov	r4, r8
     aa8:	464d      	mov	r5, r9
     aaa:	4656      	mov	r6, sl
     aac:	465f      	mov	r7, fp
     aae:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     ab0:	b508      	push	{r3, lr}
     ab2:	b672      	cpsid	i
     ab4:	f001 fca4 	bl	2400 <vTaskSwitchContext>
     ab8:	b662      	cpsie	i
     aba:	bc0c      	pop	{r2, r3}
     abc:	6811      	ldr	r1, [r2, #0]
     abe:	6808      	ldr	r0, [r1, #0]
     ac0:	3010      	adds	r0, #16
     ac2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     ac4:	46a0      	mov	r8, r4
     ac6:	46a9      	mov	r9, r5
     ac8:	46b2      	mov	sl, r6
     aca:	46bb      	mov	fp, r7
     acc:	f380 8809 	msr	PSP, r0
     ad0:	3820      	subs	r0, #32
     ad2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     ad4:	4718      	bx	r3
     ad6:	46c0      	nop			; (mov r8, r8)

00000ad8 <pxCurrentTCBConst>:
     ad8:	20004164 	.word	0x20004164

00000adc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     adc:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     ade:	4b07      	ldr	r3, [pc, #28]	; (afc <SysTick_Handler+0x20>)
     ae0:	4798      	blx	r3
     ae2:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     ae4:	4b06      	ldr	r3, [pc, #24]	; (b00 <SysTick_Handler+0x24>)
     ae6:	4798      	blx	r3
     ae8:	2800      	cmp	r0, #0
     aea:	d003      	beq.n	af4 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     aec:	2280      	movs	r2, #128	; 0x80
     aee:	0552      	lsls	r2, r2, #21
     af0:	4b04      	ldr	r3, [pc, #16]	; (b04 <SysTick_Handler+0x28>)
     af2:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     af4:	1c20      	adds	r0, r4, #0
     af6:	4b04      	ldr	r3, [pc, #16]	; (b08 <SysTick_Handler+0x2c>)
     af8:	4798      	blx	r3
}
     afa:	bd10      	pop	{r4, pc}
     afc:	00000a85 	.word	0x00000a85
     b00:	000020fd 	.word	0x000020fd
     b04:	e000ed04 	.word	0xe000ed04
     b08:	00000a91 	.word	0x00000a91

00000b0c <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
     b0c:	2200      	movs	r2, #0
     b0e:	4b04      	ldr	r3, [pc, #16]	; (b20 <vPortSetupTimerInterrupt+0x14>)
     b10:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     b12:	4a04      	ldr	r2, [pc, #16]	; (b24 <vPortSetupTimerInterrupt+0x18>)
     b14:	4b04      	ldr	r3, [pc, #16]	; (b28 <vPortSetupTimerInterrupt+0x1c>)
     b16:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     b18:	2207      	movs	r2, #7
     b1a:	4b04      	ldr	r3, [pc, #16]	; (b2c <vPortSetupTimerInterrupt+0x20>)
     b1c:	601a      	str	r2, [r3, #0]
}
     b1e:	4770      	bx	lr
     b20:	e000e018 	.word	0xe000e018
     b24:	00001f3f 	.word	0x00001f3f
     b28:	e000e014 	.word	0xe000e014
     b2c:	e000e010 	.word	0xe000e010

00000b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     b30:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     b32:	4b0a      	ldr	r3, [pc, #40]	; (b5c <xPortStartScheduler+0x2c>)
     b34:	6819      	ldr	r1, [r3, #0]
     b36:	22ff      	movs	r2, #255	; 0xff
     b38:	0412      	lsls	r2, r2, #16
     b3a:	430a      	orrs	r2, r1
     b3c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     b3e:	6819      	ldr	r1, [r3, #0]
     b40:	22ff      	movs	r2, #255	; 0xff
     b42:	0612      	lsls	r2, r2, #24
     b44:	430a      	orrs	r2, r1
     b46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
     b48:	4b05      	ldr	r3, [pc, #20]	; (b60 <xPortStartScheduler+0x30>)
     b4a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     b4c:	2200      	movs	r2, #0
     b4e:	4b05      	ldr	r3, [pc, #20]	; (b64 <xPortStartScheduler+0x34>)
     b50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     b52:	4b05      	ldr	r3, [pc, #20]	; (b68 <xPortStartScheduler+0x38>)
     b54:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
     b56:	4b05      	ldr	r3, [pc, #20]	; (b6c <xPortStartScheduler+0x3c>)
     b58:	4798      	blx	r3
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	e000ed20 	.word	0xe000ed20
     b60:	00000b0d 	.word	0x00000b0d
     b64:	20000000 	.word	0x20000000
     b68:	000009f1 	.word	0x000009f1
     b6c:	000009dd 	.word	0x000009dd

00000b70 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b70:	b538      	push	{r3, r4, r5, lr}
     b72:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     b74:	0743      	lsls	r3, r0, #29
     b76:	d002      	beq.n	b7e <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     b78:	2307      	movs	r3, #7
     b7a:	439c      	bics	r4, r3
     b7c:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
     b7e:	4b10      	ldr	r3, [pc, #64]	; (bc0 <pvPortMalloc+0x50>)
     b80:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
     b82:	4b10      	ldr	r3, [pc, #64]	; (bc4 <pvPortMalloc+0x54>)
     b84:	681b      	ldr	r3, [r3, #0]
     b86:	2b00      	cmp	r3, #0
     b88:	d105      	bne.n	b96 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     b8a:	2307      	movs	r3, #7
     b8c:	4a0e      	ldr	r2, [pc, #56]	; (bc8 <pvPortMalloc+0x58>)
     b8e:	3208      	adds	r2, #8
     b90:	439a      	bics	r2, r3
     b92:	4b0c      	ldr	r3, [pc, #48]	; (bc4 <pvPortMalloc+0x54>)
     b94:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     b96:	4b0d      	ldr	r3, [pc, #52]	; (bcc <pvPortMalloc+0x5c>)
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	18e4      	adds	r4, r4, r3
     b9c:	4a0c      	ldr	r2, [pc, #48]	; (bd0 <pvPortMalloc+0x60>)
     b9e:	4294      	cmp	r4, r2
     ba0:	d807      	bhi.n	bb2 <pvPortMalloc+0x42>
     ba2:	42a3      	cmp	r3, r4
     ba4:	d207      	bcs.n	bb6 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     ba6:	4a07      	ldr	r2, [pc, #28]	; (bc4 <pvPortMalloc+0x54>)
     ba8:	6815      	ldr	r5, [r2, #0]
     baa:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
     bac:	4b07      	ldr	r3, [pc, #28]	; (bcc <pvPortMalloc+0x5c>)
     bae:	601c      	str	r4, [r3, #0]
     bb0:	e002      	b.n	bb8 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     bb2:	2500      	movs	r5, #0
     bb4:	e000      	b.n	bb8 <pvPortMalloc+0x48>
     bb6:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     bb8:	4b06      	ldr	r3, [pc, #24]	; (bd4 <pvPortMalloc+0x64>)
     bba:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
     bbc:	1c28      	adds	r0, r5, #0
     bbe:	bd38      	pop	{r3, r4, r5, pc}
     bc0:	000020cd 	.word	0x000020cd
     bc4:	20003b50 	.word	0x20003b50
     bc8:	200000b8 	.word	0x200000b8
     bcc:	200000b4 	.word	0x200000b4
     bd0:	00003a8f 	.word	0x00003a8f
     bd4:	00002229 	.word	0x00002229

00000bd8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
     bd8:	2800      	cmp	r0, #0
     bda:	d001      	beq.n	be0 <vPortFree+0x8>
     bdc:	b672      	cpsid	i
     bde:	e7fe      	b.n	bde <vPortFree+0x6>
}
     be0:	4770      	bx	lr
     be2:	46c0      	nop			; (mov r8, r8)

00000be4 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
     be4:	4770      	bx	lr
     be6:	46c0      	nop			; (mov r8, r8)

00000be8 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
     be8:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     bea:	2201      	movs	r2, #1
     bec:	4b03      	ldr	r3, [pc, #12]	; (bfc <AT86RFX_ISR+0x14>)
     bee:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
     bf0:	4b03      	ldr	r3, [pc, #12]	; (c00 <AT86RFX_ISR+0x18>)
     bf2:	681b      	ldr	r3, [r3, #0]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d000      	beq.n	bfa <AT86RFX_ISR+0x12>
		irq_hdl_trx();
     bf8:	4798      	blx	r3
	}
}
     bfa:	bd08      	pop	{r3, pc}
     bfc:	40001800 	.word	0x40001800
     c00:	20003b54 	.word	0x20003b54

00000c04 <trx_spi_init>:

void trx_spi_init(void)
{
     c04:	b5f0      	push	{r4, r5, r6, r7, lr}
     c06:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
     c08:	4a35      	ldr	r2, [pc, #212]	; (ce0 <trx_spi_init+0xdc>)
     c0a:	2300      	movs	r3, #0
     c0c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     c0e:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
     c10:	213f      	movs	r1, #63	; 0x3f
     c12:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     c14:	4c33      	ldr	r4, [pc, #204]	; (ce4 <trx_spi_init+0xe0>)
     c16:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
     c18:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     c1a:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     c1c:	2201      	movs	r2, #1
     c1e:	4669      	mov	r1, sp
     c20:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     c22:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     c24:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     c26:	203f      	movs	r0, #63	; 0x3f
     c28:	4b2f      	ldr	r3, [pc, #188]	; (ce8 <trx_spi_init+0xe4>)
     c2a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     c2c:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c2e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c30:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c32:	2900      	cmp	r1, #0
     c34:	d103      	bne.n	c3e <trx_spi_init+0x3a>
		return &(ports[port_index]->Group[group_index]);
     c36:	095a      	lsrs	r2, r3, #5
     c38:	01d2      	lsls	r2, r2, #7
     c3a:	492c      	ldr	r1, [pc, #176]	; (cec <trx_spi_init+0xe8>)
     c3c:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c3e:	271f      	movs	r7, #31
     c40:	403b      	ands	r3, r7
     c42:	2401      	movs	r4, #1
     c44:	1c21      	adds	r1, r4, #0
     c46:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c48:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     c4a:	4a29      	ldr	r2, [pc, #164]	; (cf0 <trx_spi_init+0xec>)
     c4c:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     c4e:	2300      	movs	r3, #0
     c50:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     c52:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     c54:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     c56:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     c58:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     c5a:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     c5c:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     c5e:	2124      	movs	r1, #36	; 0x24
     c60:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     c62:	61d3      	str	r3, [r2, #28]
     c64:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
     c66:	2380      	movs	r3, #128	; 0x80
     c68:	025b      	lsls	r3, r3, #9
     c6a:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
     c6c:	4b21      	ldr	r3, [pc, #132]	; (cf4 <trx_spi_init+0xf0>)
     c6e:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
     c70:	4b21      	ldr	r3, [pc, #132]	; (cf8 <trx_spi_init+0xf4>)
     c72:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
     c74:	2301      	movs	r3, #1
     c76:	425b      	negs	r3, r3
     c78:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
     c7a:	4b20      	ldr	r3, [pc, #128]	; (cfc <trx_spi_init+0xf8>)
     c7c:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
     c7e:	4b20      	ldr	r3, [pc, #128]	; (d00 <trx_spi_init+0xfc>)
     c80:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
     c82:	4e20      	ldr	r6, [pc, #128]	; (d04 <trx_spi_init+0x100>)
     c84:	1c30      	adds	r0, r6, #0
     c86:	4920      	ldr	r1, [pc, #128]	; (d08 <trx_spi_init+0x104>)
     c88:	4b20      	ldr	r3, [pc, #128]	; (d0c <trx_spi_init+0x108>)
     c8a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c8c:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     c8e:	1c28      	adds	r0, r5, #0
     c90:	4b1f      	ldr	r3, [pc, #124]	; (d10 <trx_spi_init+0x10c>)
     c92:	4798      	blx	r3
     c94:	4007      	ands	r7, r0
     c96:	40bc      	lsls	r4, r7
     c98:	4b1e      	ldr	r3, [pc, #120]	; (d14 <trx_spi_init+0x110>)
     c9a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c9c:	6832      	ldr	r2, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     c9e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     ca0:	2b00      	cmp	r3, #0
     ca2:	d1fc      	bne.n	c9e <trx_spi_init+0x9a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     ca4:	682b      	ldr	r3, [r5, #0]
     ca6:	2602      	movs	r6, #2
     ca8:	4333      	orrs	r3, r6
     caa:	602b      	str	r3, [r5, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
     cac:	ac01      	add	r4, sp, #4
     cae:	1c20      	adds	r0, r4, #0
     cb0:	4b19      	ldr	r3, [pc, #100]	; (d18 <trx_spi_init+0x114>)
     cb2:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
     cb4:	2320      	movs	r3, #32
     cb6:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
     cb8:	2380      	movs	r3, #128	; 0x80
     cba:	039b      	lsls	r3, r3, #14
     cbc:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
     cbe:	7226      	strb	r6, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
     cc0:	2301      	movs	r3, #1
     cc2:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
     cc4:	2200      	movs	r2, #0
     cc6:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
     cc8:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
     cca:	2000      	movs	r0, #0
     ccc:	1c21      	adds	r1, r4, #0
     cce:	4b13      	ldr	r3, [pc, #76]	; (d1c <trx_spi_init+0x118>)
     cd0:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
     cd2:	4813      	ldr	r0, [pc, #76]	; (d20 <trx_spi_init+0x11c>)
     cd4:	2100      	movs	r1, #0
     cd6:	2200      	movs	r2, #0
     cd8:	4b12      	ldr	r3, [pc, #72]	; (d24 <trx_spi_init+0x120>)
     cda:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
     cdc:	b005      	add	sp, #20
     cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce0:	200042c4 	.word	0x200042c4
     ce4:	200042c8 	.word	0x200042c8
     ce8:	00003849 	.word	0x00003849
     cec:	41004400 	.word	0x41004400
     cf0:	200042cc 	.word	0x200042cc
     cf4:	003d0900 	.word	0x003d0900
     cf8:	00530005 	.word	0x00530005
     cfc:	003e0005 	.word	0x003e0005
     d00:	00520005 	.word	0x00520005
     d04:	20004304 	.word	0x20004304
     d08:	42001800 	.word	0x42001800
     d0c:	000030ed 	.word	0x000030ed
     d10:	00003611 	.word	0x00003611
     d14:	e000e100 	.word	0xe000e100
     d18:	0000019d 	.word	0x0000019d
     d1c:	000001b1 	.word	0x000001b1
     d20:	00000be9 	.word	0x00000be9
     d24:	0000369d 	.word	0x0000369d

00000d28 <PhyReset>:

void PhyReset(void)
{
     d28:	b570      	push	{r4, r5, r6, lr}
     d2a:	4b09      	ldr	r3, [pc, #36]	; (d50 <PhyReset+0x28>)
     d2c:	1c1c      	adds	r4, r3, #0
     d2e:	3480      	adds	r4, #128	; 0x80
     d30:	2580      	movs	r5, #128	; 0x80
     d32:	022d      	lsls	r5, r5, #8
     d34:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d36:	2280      	movs	r2, #128	; 0x80
     d38:	0352      	lsls	r2, r2, #13
     d3a:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
     d3c:	20a5      	movs	r0, #165	; 0xa5
     d3e:	0040      	lsls	r0, r0, #1
     d40:	4e04      	ldr	r6, [pc, #16]	; (d54 <PhyReset+0x2c>)
     d42:	47b0      	blx	r6
     d44:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
     d46:	200a      	movs	r0, #10
     d48:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d4a:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
     d4c:	bd70      	pop	{r4, r5, r6, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	41004400 	.word	0x41004400
     d54:	00003775 	.word	0x00003775

00000d58 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
     d58:	b570      	push	{r4, r5, r6, lr}
     d5a:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d5c:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     d60:	4263      	negs	r3, r4
     d62:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     d64:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d66:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     d6a:	2200      	movs	r2, #0
     d6c:	4b33      	ldr	r3, [pc, #204]	; (e3c <trx_reg_read+0xe4>)
     d6e:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
     d70:	4d33      	ldr	r5, [pc, #204]	; (e40 <trx_reg_read+0xe8>)
     d72:	1c28      	adds	r0, r5, #0
     d74:	4933      	ldr	r1, [pc, #204]	; (e44 <trx_reg_read+0xec>)
     d76:	2201      	movs	r2, #1
     d78:	4b33      	ldr	r3, [pc, #204]	; (e48 <trx_reg_read+0xf0>)
     d7a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d7c:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d7e:	2101      	movs	r1, #1
     d80:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
     d82:	420a      	tst	r2, r1
     d84:	d0fc      	beq.n	d80 <trx_reg_read+0x28>
     d86:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     d88:	07d1      	lsls	r1, r2, #31
     d8a:	d502      	bpl.n	d92 <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d8c:	2280      	movs	r2, #128	; 0x80
     d8e:	4316      	orrs	r6, r2
     d90:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     d92:	2102      	movs	r1, #2
     d94:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
     d96:	420a      	tst	r2, r1
     d98:	d0fc      	beq.n	d94 <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d9a:	2104      	movs	r1, #4
     d9c:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
     d9e:	420a      	tst	r2, r1
     da0:	d0fc      	beq.n	d9c <trx_reg_read+0x44>
     da2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     da4:	0751      	lsls	r1, r2, #29
     da6:	d514      	bpl.n	dd2 <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     da8:	8b5a      	ldrh	r2, [r3, #26]
     daa:	0751      	lsls	r1, r2, #29
     dac:	d503      	bpl.n	db6 <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     dae:	8b59      	ldrh	r1, [r3, #26]
     db0:	2204      	movs	r2, #4
     db2:	430a      	orrs	r2, r1
     db4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     db6:	4a22      	ldr	r2, [pc, #136]	; (e40 <trx_reg_read+0xe8>)
     db8:	7992      	ldrb	r2, [r2, #6]
     dba:	2a01      	cmp	r2, #1
     dbc:	d105      	bne.n	dca <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     dbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
     dc0:	05c9      	lsls	r1, r1, #23
     dc2:	0dc9      	lsrs	r1, r1, #23
     dc4:	4a21      	ldr	r2, [pc, #132]	; (e4c <trx_reg_read+0xf4>)
     dc6:	8011      	strh	r1, [r2, #0]
     dc8:	e003      	b.n	dd2 <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     dca:	6a99      	ldr	r1, [r3, #40]	; 0x28
     dcc:	b2c9      	uxtb	r1, r1
     dce:	4a1f      	ldr	r2, [pc, #124]	; (e4c <trx_reg_read+0xf4>)
     dd0:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     dd2:	2101      	movs	r1, #1
     dd4:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
     dd6:	420a      	tst	r2, r1
     dd8:	d0fc      	beq.n	dd4 <trx_reg_read+0x7c>
     dda:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     ddc:	07d1      	lsls	r1, r2, #31
     dde:	d501      	bpl.n	de4 <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     de0:	2200      	movs	r2, #0
     de2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     de4:	2102      	movs	r1, #2
     de6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
     de8:	420a      	tst	r2, r1
     dea:	d0fc      	beq.n	de6 <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     dec:	2104      	movs	r1, #4
     dee:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
     df0:	420a      	tst	r2, r1
     df2:	d0fc      	beq.n	dee <trx_reg_read+0x96>
     df4:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
     df6:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     df8:	0751      	lsls	r1, r2, #29
     dfa:	d510      	bpl.n	e1e <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     dfc:	8b5a      	ldrh	r2, [r3, #26]
     dfe:	0751      	lsls	r1, r2, #29
     e00:	d503      	bpl.n	e0a <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     e02:	8b59      	ldrh	r1, [r3, #26]
     e04:	2204      	movs	r2, #4
     e06:	430a      	orrs	r2, r1
     e08:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e0a:	4a0d      	ldr	r2, [pc, #52]	; (e40 <trx_reg_read+0xe8>)
     e0c:	7992      	ldrb	r2, [r2, #6]
     e0e:	2a01      	cmp	r2, #1
     e10:	d103      	bne.n	e1a <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e12:	6a9d      	ldr	r5, [r3, #40]	; 0x28
     e14:	05ed      	lsls	r5, r5, #23
     e16:	0ded      	lsrs	r5, r5, #23
     e18:	e001      	b.n	e1e <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e1a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
     e1c:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
     e1e:	4808      	ldr	r0, [pc, #32]	; (e40 <trx_reg_read+0xe8>)
     e20:	4908      	ldr	r1, [pc, #32]	; (e44 <trx_reg_read+0xec>)
     e22:	2200      	movs	r2, #0
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <trx_reg_read+0xf0>)
     e26:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     e28:	2c00      	cmp	r4, #0
     e2a:	d005      	beq.n	e38 <trx_reg_read+0xe0>
		cpu_irq_enable();
     e2c:	2201      	movs	r2, #1
     e2e:	4b03      	ldr	r3, [pc, #12]	; (e3c <trx_reg_read+0xe4>)
     e30:	701a      	strb	r2, [r3, #0]
     e32:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     e36:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
     e38:	b2e8      	uxtb	r0, r5
}
     e3a:	bd70      	pop	{r4, r5, r6, pc}
     e3c:	20000010 	.word	0x20000010
     e40:	20004304 	.word	0x20004304
     e44:	200042c8 	.word	0x200042c8
     e48:	00003305 	.word	0x00003305
     e4c:	200042c0 	.word	0x200042c0

00000e50 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
     e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e52:	1c07      	adds	r7, r0, #0
     e54:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e56:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     e5a:	4263      	negs	r3, r4
     e5c:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     e5e:	b672      	cpsid	i
     e60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     e64:	2200      	movs	r2, #0
     e66:	4b34      	ldr	r3, [pc, #208]	; (f38 <trx_reg_write+0xe8>)
     e68:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
     e6a:	4e34      	ldr	r6, [pc, #208]	; (f3c <trx_reg_write+0xec>)
     e6c:	1c30      	adds	r0, r6, #0
     e6e:	4934      	ldr	r1, [pc, #208]	; (f40 <trx_reg_write+0xf0>)
     e70:	2201      	movs	r2, #1
     e72:	4b34      	ldr	r3, [pc, #208]	; (f44 <trx_reg_write+0xf4>)
     e74:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e76:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e78:	2101      	movs	r1, #1
     e7a:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
     e7c:	420a      	tst	r2, r1
     e7e:	d0fc      	beq.n	e7a <trx_reg_write+0x2a>
     e80:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     e82:	07d1      	lsls	r1, r2, #31
     e84:	d502      	bpl.n	e8c <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e86:	22c0      	movs	r2, #192	; 0xc0
     e88:	4317      	orrs	r7, r2
     e8a:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e8c:	2102      	movs	r1, #2
     e8e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
     e90:	420a      	tst	r2, r1
     e92:	d0fc      	beq.n	e8e <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e94:	2104      	movs	r1, #4
     e96:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
     e98:	420a      	tst	r2, r1
     e9a:	d0fc      	beq.n	e96 <trx_reg_write+0x46>
     e9c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     e9e:	0751      	lsls	r1, r2, #29
     ea0:	d514      	bpl.n	ecc <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ea2:	8b5a      	ldrh	r2, [r3, #26]
     ea4:	0751      	lsls	r1, r2, #29
     ea6:	d503      	bpl.n	eb0 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     ea8:	8b59      	ldrh	r1, [r3, #26]
     eaa:	2204      	movs	r2, #4
     eac:	430a      	orrs	r2, r1
     eae:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eb0:	4a22      	ldr	r2, [pc, #136]	; (f3c <trx_reg_write+0xec>)
     eb2:	7992      	ldrb	r2, [r2, #6]
     eb4:	2a01      	cmp	r2, #1
     eb6:	d105      	bne.n	ec4 <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     eb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
     eba:	05c9      	lsls	r1, r1, #23
     ebc:	0dc9      	lsrs	r1, r1, #23
     ebe:	4a22      	ldr	r2, [pc, #136]	; (f48 <trx_reg_write+0xf8>)
     ec0:	8011      	strh	r1, [r2, #0]
     ec2:	e003      	b.n	ecc <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ec4:	6a99      	ldr	r1, [r3, #40]	; 0x28
     ec6:	b2c9      	uxtb	r1, r1
     ec8:	4a1f      	ldr	r2, [pc, #124]	; (f48 <trx_reg_write+0xf8>)
     eca:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ecc:	2001      	movs	r0, #1
     ece:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
     ed0:	4202      	tst	r2, r0
     ed2:	d0fc      	beq.n	ece <trx_reg_write+0x7e>
     ed4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     ed6:	07d1      	lsls	r1, r2, #31
     ed8:	d500      	bpl.n	edc <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     eda:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     edc:	2102      	movs	r1, #2
     ede:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
     ee0:	420a      	tst	r2, r1
     ee2:	d0fc      	beq.n	ede <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     ee4:	2104      	movs	r1, #4
     ee6:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
     ee8:	420a      	tst	r2, r1
     eea:	d0fc      	beq.n	ee6 <trx_reg_write+0x96>
     eec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     eee:	0751      	lsls	r1, r2, #29
     ef0:	d514      	bpl.n	f1c <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     ef2:	8b5a      	ldrh	r2, [r3, #26]
     ef4:	0751      	lsls	r1, r2, #29
     ef6:	d503      	bpl.n	f00 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     ef8:	8b59      	ldrh	r1, [r3, #26]
     efa:	2204      	movs	r2, #4
     efc:	430a      	orrs	r2, r1
     efe:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f00:	4a0e      	ldr	r2, [pc, #56]	; (f3c <trx_reg_write+0xec>)
     f02:	7992      	ldrb	r2, [r2, #6]
     f04:	2a01      	cmp	r2, #1
     f06:	d105      	bne.n	f14 <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f0a:	05d2      	lsls	r2, r2, #23
     f0c:	0dd2      	lsrs	r2, r2, #23
     f0e:	4b0e      	ldr	r3, [pc, #56]	; (f48 <trx_reg_write+0xf8>)
     f10:	801a      	strh	r2, [r3, #0]
     f12:	e003      	b.n	f1c <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f16:	b2d2      	uxtb	r2, r2
     f18:	4b0b      	ldr	r3, [pc, #44]	; (f48 <trx_reg_write+0xf8>)
     f1a:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
     f1c:	4807      	ldr	r0, [pc, #28]	; (f3c <trx_reg_write+0xec>)
     f1e:	4908      	ldr	r1, [pc, #32]	; (f40 <trx_reg_write+0xf0>)
     f20:	2200      	movs	r2, #0
     f22:	4b08      	ldr	r3, [pc, #32]	; (f44 <trx_reg_write+0xf4>)
     f24:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     f26:	2c00      	cmp	r4, #0
     f28:	d005      	beq.n	f36 <trx_reg_write+0xe6>
		cpu_irq_enable();
     f2a:	2201      	movs	r2, #1
     f2c:	4b02      	ldr	r3, [pc, #8]	; (f38 <trx_reg_write+0xe8>)
     f2e:	701a      	strb	r2, [r3, #0]
     f30:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     f34:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
     f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f38:	20000010 	.word	0x20000010
     f3c:	20004304 	.word	0x20004304
     f40:	200042c8 	.word	0x200042c8
     f44:	00003305 	.word	0x00003305
     f48:	200042c0 	.word	0x200042c0

00000f4c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
     f4c:	b508      	push	{r3, lr}
	tmr_cca_callback();
     f4e:	4b01      	ldr	r3, [pc, #4]	; (f54 <tc_cca_callback+0x8>)
     f50:	4798      	blx	r3
}
     f52:	bd08      	pop	{r3, pc}
     f54:	0000434d 	.word	0x0000434d

00000f58 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
     f58:	b508      	push	{r3, lr}
	tmr_ovf_callback();
     f5a:	4b01      	ldr	r3, [pc, #4]	; (f60 <tc_ovf_callback+0x8>)
     f5c:	4798      	blx	r3
}
     f5e:	bd08      	pop	{r3, pc}
     f60:	00004305 	.word	0x00004305

00000f64 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
     f64:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
     f66:	4802      	ldr	r0, [pc, #8]	; (f70 <tmr_read_count+0xc>)
     f68:	4b02      	ldr	r3, [pc, #8]	; (f74 <tmr_read_count+0x10>)
     f6a:	4798      	blx	r3
     f6c:	b280      	uxth	r0, r0
}
     f6e:	bd08      	pop	{r3, pc}
     f70:	20004374 	.word	0x20004374
     f74:	000008c1 	.word	0x000008c1

00000f78 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
     f78:	4b03      	ldr	r3, [pc, #12]	; (f88 <tmr_disable_cc_interrupt+0x10>)
     f7a:	2210      	movs	r2, #16
     f7c:	6819      	ldr	r1, [r3, #0]
     f7e:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
     f80:	7e59      	ldrb	r1, [r3, #25]
     f82:	4391      	bics	r1, r2
     f84:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
     f86:	4770      	bx	lr
     f88:	20004374 	.word	0x20004374

00000f8c <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
     f8c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     f8e:	4c0a      	ldr	r4, [pc, #40]	; (fb8 <tmr_enable_cc_interrupt+0x2c>)
     f90:	6820      	ldr	r0, [r4, #0]
     f92:	4b0a      	ldr	r3, [pc, #40]	; (fbc <tmr_enable_cc_interrupt+0x30>)
     f94:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     f96:	4b0a      	ldr	r3, [pc, #40]	; (fc0 <tmr_enable_cc_interrupt+0x34>)
     f98:	5c1b      	ldrb	r3, [r3, r0]
     f9a:	221f      	movs	r2, #31
     f9c:	401a      	ands	r2, r3
     f9e:	2301      	movs	r3, #1
     fa0:	4093      	lsls	r3, r2
     fa2:	1c1a      	adds	r2, r3, #0
     fa4:	4b07      	ldr	r3, [pc, #28]	; (fc4 <tmr_enable_cc_interrupt+0x38>)
     fa6:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
     fa8:	7e62      	ldrb	r2, [r4, #25]
     faa:	2310      	movs	r3, #16
     fac:	4313      	orrs	r3, r2
     fae:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
     fb0:	6823      	ldr	r3, [r4, #0]
     fb2:	2210      	movs	r2, #16
     fb4:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
     fb6:	bd10      	pop	{r4, pc}
     fb8:	20004374 	.word	0x20004374
     fbc:	00000615 	.word	0x00000615
     fc0:	000053fc 	.word	0x000053fc
     fc4:	e000e100 	.word	0xe000e100

00000fc8 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
     fc8:	b508      	push	{r3, lr}
     fca:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
     fcc:	4802      	ldr	r0, [pc, #8]	; (fd8 <tmr_write_cmpreg+0x10>)
     fce:	2100      	movs	r1, #0
     fd0:	4b02      	ldr	r3, [pc, #8]	; (fdc <tmr_write_cmpreg+0x14>)
     fd2:	4798      	blx	r3
			(uint32_t)compare_value);
}
     fd4:	bd08      	pop	{r3, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	20004374 	.word	0x20004374
     fdc:	000008f1 	.word	0x000008f1

00000fe0 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
     fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fe2:	464f      	mov	r7, r9
     fe4:	4646      	mov	r6, r8
     fe6:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     fe8:	4a2d      	ldr	r2, [pc, #180]	; (10a0 <tmr_init+0xc0>)
     fea:	2300      	movs	r3, #0
     fec:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     fee:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     ff0:	2100      	movs	r1, #0
     ff2:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     ff4:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     ff6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     ff8:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     ffa:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     ffc:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     ffe:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1000:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1002:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1004:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1006:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1008:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    100a:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    100c:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    100e:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1010:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1012:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    1014:	2301      	movs	r3, #1
    1016:	425b      	negs	r3, r3
    1018:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    101a:	4c22      	ldr	r4, [pc, #136]	; (10a4 <tmr_init+0xc4>)
    101c:	1c20      	adds	r0, r4, #0
    101e:	4922      	ldr	r1, [pc, #136]	; (10a8 <tmr_init+0xc8>)
    1020:	4b22      	ldr	r3, [pc, #136]	; (10ac <tmr_init+0xcc>)
    1022:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    1024:	1c20      	adds	r0, r4, #0
    1026:	4922      	ldr	r1, [pc, #136]	; (10b0 <tmr_init+0xd0>)
    1028:	2200      	movs	r2, #0
    102a:	4d22      	ldr	r5, [pc, #136]	; (10b4 <tmr_init+0xd4>)
    102c:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    102e:	1c20      	adds	r0, r4, #0
    1030:	4921      	ldr	r1, [pc, #132]	; (10b8 <tmr_init+0xd8>)
    1032:	2202      	movs	r2, #2
    1034:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1036:	6820      	ldr	r0, [r4, #0]
    1038:	4a20      	ldr	r2, [pc, #128]	; (10bc <tmr_init+0xdc>)
    103a:	4691      	mov	r9, r2
    103c:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    103e:	4b20      	ldr	r3, [pc, #128]	; (10c0 <tmr_init+0xe0>)
    1040:	4698      	mov	r8, r3
    1042:	5c1b      	ldrb	r3, [r3, r0]
    1044:	271f      	movs	r7, #31
    1046:	403b      	ands	r3, r7
    1048:	2501      	movs	r5, #1
    104a:	1c2a      	adds	r2, r5, #0
    104c:	409a      	lsls	r2, r3
    104e:	4e1d      	ldr	r6, [pc, #116]	; (10c4 <tmr_init+0xe4>)
    1050:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1052:	7e62      	ldrb	r2, [r4, #25]
    1054:	2301      	movs	r3, #1
    1056:	4313      	orrs	r3, r2
    1058:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    105a:	6820      	ldr	r0, [r4, #0]
    105c:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    105e:	47c8      	blx	r9
    1060:	4642      	mov	r2, r8
    1062:	5c13      	ldrb	r3, [r2, r0]
    1064:	401f      	ands	r7, r3
    1066:	40bd      	lsls	r5, r7
    1068:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    106a:	7e62      	ldrb	r2, [r4, #25]
    106c:	2310      	movs	r3, #16
    106e:	4313      	orrs	r3, r2
    1070:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1072:	6822      	ldr	r2, [r4, #0]
    1074:	2310      	movs	r3, #16
    1076:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1078:	217f      	movs	r1, #127	; 0x7f
    107a:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    107c:	438b      	bics	r3, r1
    107e:	d1fc      	bne.n	107a <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1080:	8811      	ldrh	r1, [r2, #0]
    1082:	2302      	movs	r3, #2
    1084:	430b      	orrs	r3, r1
    1086:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    1088:	2000      	movs	r0, #0
    108a:	4b0f      	ldr	r3, [pc, #60]	; (10c8 <tmr_init+0xe8>)
    108c:	4798      	blx	r3
    108e:	490f      	ldr	r1, [pc, #60]	; (10cc <tmr_init+0xec>)
    1090:	4b0f      	ldr	r3, [pc, #60]	; (10d0 <tmr_init+0xf0>)
    1092:	4798      	blx	r3
	#endif
	return timer_multiplier;
    1094:	b2c0      	uxtb	r0, r0
}
    1096:	bc0c      	pop	{r2, r3}
    1098:	4690      	mov	r8, r2
    109a:	4699      	mov	r9, r3
    109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	20004340 	.word	0x20004340
    10a4:	20004374 	.word	0x20004374
    10a8:	42002c00 	.word	0x42002c00
    10ac:	0000064d 	.word	0x0000064d
    10b0:	00000f59 	.word	0x00000f59
    10b4:	00002ae5 	.word	0x00002ae5
    10b8:	00000f4d 	.word	0x00000f4d
    10bc:	00000615 	.word	0x00000615
    10c0:	000053fc 	.word	0x000053fc
    10c4:	e000e100 	.word	0xe000e100
    10c8:	00003b89 	.word	0x00003b89
    10cc:	000f4240 	.word	0x000f4240
    10d0:	00004375 	.word	0x00004375

000010d4 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    10d4:	b508      	push	{r3, lr}
	SYS_TimerInit();
    10d6:	4b04      	ldr	r3, [pc, #16]	; (10e8 <SYS_Init+0x14>)
    10d8:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <SYS_Init+0x18>)
    10dc:	4798      	blx	r3
#endif
	PHY_Init();
    10de:	4b04      	ldr	r3, [pc, #16]	; (10f0 <SYS_Init+0x1c>)
    10e0:	4798      	blx	r3
	NWK_Init();
    10e2:	4b04      	ldr	r3, [pc, #16]	; (10f4 <SYS_Init+0x20>)
    10e4:	4798      	blx	r3
}
    10e6:	bd08      	pop	{r3, pc}
    10e8:	00001175 	.word	0x00001175
    10ec:	00000be5 	.word	0x00000be5
    10f0:	00001261 	.word	0x00001261
    10f4:	0000135d 	.word	0x0000135d

000010f8 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    10f8:	b530      	push	{r4, r5, lr}
	if (timers) {
    10fa:	4b15      	ldr	r3, [pc, #84]	; (1150 <placeTimer+0x58>)
    10fc:	681d      	ldr	r5, [r3, #0]
    10fe:	2d00      	cmp	r5, #0
    1100:	d01e      	beq.n	1140 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    1102:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    1104:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1106:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    1108:	428a      	cmp	r2, r1
    110a:	d20a      	bcs.n	1122 <placeTimer+0x2a>
    110c:	e004      	b.n	1118 <placeTimer+0x20>
    110e:	6859      	ldr	r1, [r3, #4]
    1110:	4291      	cmp	r1, r2
    1112:	d803      	bhi.n	111c <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1114:	1c1c      	adds	r4, r3, #0
    1116:	e004      	b.n	1122 <placeTimer+0x2a>
    1118:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    111a:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    111c:	1a89      	subs	r1, r1, r2
    111e:	6059      	str	r1, [r3, #4]
				break;
    1120:	e003      	b.n	112a <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    1122:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    1124:	6823      	ldr	r3, [r4, #0]
    1126:	2b00      	cmp	r3, #0
    1128:	d1f1      	bne.n	110e <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    112a:	6042      	str	r2, [r0, #4]

		if (prev) {
    112c:	2c00      	cmp	r4, #0
    112e:	d003      	beq.n	1138 <placeTimer+0x40>
			timer->next = prev->next;
    1130:	6823      	ldr	r3, [r4, #0]
    1132:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    1134:	6020      	str	r0, [r4, #0]
    1136:	e009      	b.n	114c <placeTimer+0x54>
		} else {
			timer->next = timers;
    1138:	6005      	str	r5, [r0, #0]
			timers = timer;
    113a:	4b05      	ldr	r3, [pc, #20]	; (1150 <placeTimer+0x58>)
    113c:	6018      	str	r0, [r3, #0]
    113e:	e005      	b.n	114c <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    1140:	2300      	movs	r3, #0
    1142:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    1144:	6883      	ldr	r3, [r0, #8]
    1146:	6043      	str	r3, [r0, #4]
		timers = timer;
    1148:	4b01      	ldr	r3, [pc, #4]	; (1150 <placeTimer+0x58>)
    114a:	6018      	str	r0, [r3, #0]
	}
}
    114c:	bd30      	pop	{r4, r5, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	20003b58 	.word	0x20003b58

00001154 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    1154:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    1156:	4b04      	ldr	r3, [pc, #16]	; (1168 <SYS_HwExpiry_Cb+0x14>)
    1158:	781a      	ldrb	r2, [r3, #0]
    115a:	3201      	adds	r2, #1
    115c:	b2d2      	uxtb	r2, r2
    115e:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1160:	4802      	ldr	r0, [pc, #8]	; (116c <SYS_HwExpiry_Cb+0x18>)
    1162:	4b03      	ldr	r3, [pc, #12]	; (1170 <SYS_HwExpiry_Cb+0x1c>)
    1164:	4798      	blx	r3
}
    1166:	bd08      	pop	{r3, pc}
    1168:	20004390 	.word	0x20004390
    116c:	00002710 	.word	0x00002710
    1170:	00004279 	.word	0x00004279

00001174 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    1174:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    1176:	2400      	movs	r4, #0
    1178:	4b06      	ldr	r3, [pc, #24]	; (1194 <SYS_TimerInit+0x20>)
    117a:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    117c:	4806      	ldr	r0, [pc, #24]	; (1198 <SYS_TimerInit+0x24>)
    117e:	4b07      	ldr	r3, [pc, #28]	; (119c <SYS_TimerInit+0x28>)
    1180:	4798      	blx	r3
	common_tc_init();
    1182:	4b07      	ldr	r3, [pc, #28]	; (11a0 <SYS_TimerInit+0x2c>)
    1184:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    1186:	4807      	ldr	r0, [pc, #28]	; (11a4 <SYS_TimerInit+0x30>)
    1188:	4b07      	ldr	r3, [pc, #28]	; (11a8 <SYS_TimerInit+0x34>)
    118a:	4798      	blx	r3
	timers = NULL;
    118c:	4b07      	ldr	r3, [pc, #28]	; (11ac <SYS_TimerInit+0x38>)
    118e:	601c      	str	r4, [r3, #0]
}
    1190:	bd10      	pop	{r4, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	20004390 	.word	0x20004390
    1198:	00001155 	.word	0x00001155
    119c:	00004369 	.word	0x00004369
    11a0:	000042e5 	.word	0x000042e5
    11a4:	00002710 	.word	0x00002710
    11a8:	00004279 	.word	0x00004279
    11ac:	20003b58 	.word	0x20003b58

000011b0 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    11b0:	4b09      	ldr	r3, [pc, #36]	; (11d8 <SYS_TimerStarted+0x28>)
    11b2:	681b      	ldr	r3, [r3, #0]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d009      	beq.n	11cc <SYS_TimerStarted+0x1c>
		if (t == timer) {
    11b8:	4283      	cmp	r3, r0
    11ba:	d102      	bne.n	11c2 <SYS_TimerStarted+0x12>
    11bc:	e008      	b.n	11d0 <SYS_TimerStarted+0x20>
    11be:	4298      	cmp	r0, r3
    11c0:	d008      	beq.n	11d4 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    11c2:	681b      	ldr	r3, [r3, #0]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d1fa      	bne.n	11be <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    11c8:	2000      	movs	r0, #0
    11ca:	e004      	b.n	11d6 <SYS_TimerStarted+0x26>
    11cc:	2000      	movs	r0, #0
    11ce:	e002      	b.n	11d6 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    11d0:	2001      	movs	r0, #1
    11d2:	e000      	b.n	11d6 <SYS_TimerStarted+0x26>
    11d4:	2001      	movs	r0, #1
		}
	}
	return false;
}
    11d6:	4770      	bx	lr
    11d8:	20003b58 	.word	0x20003b58

000011dc <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    11dc:	b510      	push	{r4, lr}
    11de:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    11e0:	4b03      	ldr	r3, [pc, #12]	; (11f0 <SYS_TimerStart+0x14>)
    11e2:	4798      	blx	r3
    11e4:	2800      	cmp	r0, #0
    11e6:	d102      	bne.n	11ee <SYS_TimerStart+0x12>
		placeTimer(timer);
    11e8:	1c20      	adds	r0, r4, #0
    11ea:	4b02      	ldr	r3, [pc, #8]	; (11f4 <SYS_TimerStart+0x18>)
    11ec:	4798      	blx	r3
	}
}
    11ee:	bd10      	pop	{r4, pc}
    11f0:	000011b1 	.word	0x000011b1
    11f4:	000010f9 	.word	0x000010f9

000011f8 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    11f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11fa:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    11fc:	4f0b      	ldr	r7, [pc, #44]	; (122c <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    11fe:	4e0c      	ldr	r6, [pc, #48]	; (1230 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1200:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1202:	2002      	movs	r0, #2
    1204:	2103      	movs	r1, #3
    1206:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1208:	2001      	movs	r0, #1
    120a:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    120c:	4028      	ands	r0, r5
    120e:	2808      	cmp	r0, #8
    1210:	d1f7      	bne.n	1202 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1212:	4f06      	ldr	r7, [pc, #24]	; (122c <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1214:	4e06      	ldr	r6, [pc, #24]	; (1230 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1216:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1218:	2002      	movs	r0, #2
    121a:	1c21      	adds	r1, r4, #0
    121c:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    121e:	2001      	movs	r0, #1
    1220:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1222:	4028      	ands	r0, r5
    1224:	4284      	cmp	r4, r0
    1226:	d1f7      	bne.n	1218 <phyTrxSetState+0x20>
}
    1228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	00000e51 	.word	0x00000e51
    1230:	00000d59 	.word	0x00000d59

00001234 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    1234:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    1236:	2008      	movs	r0, #8
    1238:	4b06      	ldr	r3, [pc, #24]	; (1254 <phySetRxState+0x20>)
    123a:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    123c:	200f      	movs	r0, #15
    123e:	4b06      	ldr	r3, [pc, #24]	; (1258 <phySetRxState+0x24>)
    1240:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    1242:	4b06      	ldr	r3, [pc, #24]	; (125c <phySetRxState+0x28>)
    1244:	781b      	ldrb	r3, [r3, #0]
    1246:	2b00      	cmp	r3, #0
    1248:	d002      	beq.n	1250 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    124a:	2016      	movs	r0, #22
    124c:	4b01      	ldr	r3, [pc, #4]	; (1254 <phySetRxState+0x20>)
    124e:	4798      	blx	r3
	}
}
    1250:	bd08      	pop	{r3, pc}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	000011f9 	.word	0x000011f9
    1258:	00000d59 	.word	0x00000d59
    125c:	20003b5d 	.word	0x20003b5d

00001260 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    1260:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    1262:	4b0e      	ldr	r3, [pc, #56]	; (129c <PHY_Init+0x3c>)
    1264:	4798      	blx	r3
	PhyReset();
    1266:	4b0e      	ldr	r3, [pc, #56]	; (12a0 <PHY_Init+0x40>)
    1268:	4798      	blx	r3
	phyRxState = false;
    126a:	2200      	movs	r2, #0
    126c:	4b0d      	ldr	r3, [pc, #52]	; (12a4 <PHY_Init+0x44>)
    126e:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    1270:	2201      	movs	r2, #1
    1272:	4b0d      	ldr	r3, [pc, #52]	; (12a8 <PHY_Init+0x48>)
    1274:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1276:	4e0d      	ldr	r6, [pc, #52]	; (12ac <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1278:	4d0d      	ldr	r5, [pc, #52]	; (12b0 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    127a:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    127c:	2002      	movs	r0, #2
    127e:	2108      	movs	r1, #8
    1280:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    1282:	2001      	movs	r0, #1
    1284:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    1286:	4020      	ands	r0, r4
    1288:	2808      	cmp	r0, #8
    128a:	d1f7      	bne.n	127c <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    128c:	2004      	movs	r0, #4
    128e:	212e      	movs	r1, #46	; 0x2e
    1290:	4c06      	ldr	r4, [pc, #24]	; (12ac <PHY_Init+0x4c>)
    1292:	47a0      	blx	r4
    1294:	200c      	movs	r0, #12
    1296:	2180      	movs	r1, #128	; 0x80
    1298:	47a0      	blx	r4
	phyWriteRegister(TRX_CTRL_1_REG,
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG, (1 << RX_SAFE_MODE));
}
    129a:	bd70      	pop	{r4, r5, r6, pc}
    129c:	00000c05 	.word	0x00000c05
    12a0:	00000d29 	.word	0x00000d29
    12a4:	20003b5d 	.word	0x20003b5d
    12a8:	20003b5c 	.word	0x20003b5c
    12ac:	00000e51 	.word	0x00000e51
    12b0:	00000d59 	.word	0x00000d59

000012b4 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    12b4:	b508      	push	{r3, lr}
	phyRxState = rx;
    12b6:	4b02      	ldr	r3, [pc, #8]	; (12c0 <PHY_SetRxState+0xc>)
    12b8:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    12ba:	4b02      	ldr	r3, [pc, #8]	; (12c4 <PHY_SetRxState+0x10>)
    12bc:	4798      	blx	r3
}
    12be:	bd08      	pop	{r3, pc}
    12c0:	20003b5d 	.word	0x20003b5d
    12c4:	00001235 	.word	0x00001235

000012c8 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    12c8:	b510      	push	{r4, lr}
    12ca:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    12cc:	2008      	movs	r0, #8
    12ce:	4b05      	ldr	r3, [pc, #20]	; (12e4 <PHY_SetChannel+0x1c>)
    12d0:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    12d2:	231f      	movs	r3, #31
    12d4:	1c01      	adds	r1, r0, #0
    12d6:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    12d8:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    12da:	b2e1      	uxtb	r1, r4
    12dc:	2008      	movs	r0, #8
    12de:	4b02      	ldr	r3, [pc, #8]	; (12e8 <PHY_SetChannel+0x20>)
    12e0:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    12e2:	bd10      	pop	{r4, pc}
    12e4:	00000d59 	.word	0x00000d59
    12e8:	00000e51 	.word	0x00000e51

000012ec <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    12ec:	b530      	push	{r4, r5, lr}
    12ee:	b083      	sub	sp, #12
    12f0:	466c      	mov	r4, sp
    12f2:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    12f4:	b2c1      	uxtb	r1, r0
    12f6:	2022      	movs	r0, #34	; 0x22
    12f8:	4d03      	ldr	r5, [pc, #12]	; (1308 <PHY_SetPanId+0x1c>)
    12fa:	47a8      	blx	r5
    12fc:	79e1      	ldrb	r1, [r4, #7]
    12fe:	2023      	movs	r0, #35	; 0x23
    1300:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    1302:	b003      	add	sp, #12
    1304:	bd30      	pop	{r4, r5, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	00000e51 	.word	0x00000e51

0000130c <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    130c:	b570      	push	{r4, r5, r6, lr}
    130e:	b082      	sub	sp, #8
    1310:	466d      	mov	r5, sp
    1312:	80e8      	strh	r0, [r5, #6]
    1314:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    1316:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1318:	2020      	movs	r0, #32
    131a:	1c31      	adds	r1, r6, #0
    131c:	4c05      	ldr	r4, [pc, #20]	; (1334 <PHY_SetShortAddr+0x28>)
    131e:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    1320:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    1322:	2021      	movs	r0, #33	; 0x21
    1324:	1c29      	adds	r1, r5, #0
    1326:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    1328:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    132a:	b2f1      	uxtb	r1, r6
    132c:	202d      	movs	r0, #45	; 0x2d
    132e:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    1330:	b002      	add	sp, #8
    1332:	bd70      	pop	{r4, r5, r6, pc}
    1334:	00000e51 	.word	0x00000e51

00001338 <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    1338:	b510      	push	{r4, lr}
    133a:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    133c:	2005      	movs	r0, #5
    133e:	4b05      	ldr	r3, [pc, #20]	; (1354 <PHY_SetTxPower+0x1c>)
    1340:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    1342:	230f      	movs	r3, #15
    1344:	1c01      	adds	r1, r0, #0
    1346:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    1348:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    134a:	b2e1      	uxtb	r1, r4
    134c:	2005      	movs	r0, #5
    134e:	4b02      	ldr	r3, [pc, #8]	; (1358 <PHY_SetTxPower+0x20>)
    1350:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    1352:	bd10      	pop	{r4, pc}
    1354:	00000d59 	.word	0x00000d59
    1358:	00000e51 	.word	0x00000e51

0000135c <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    135c:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <NWK_Init+0x38>)
    1360:	2300      	movs	r3, #0
    1362:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    1364:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    1366:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    1368:	2258      	movs	r2, #88	; 0x58
    136a:	528b      	strh	r3, [r1, r2]
    136c:	1c0b      	adds	r3, r1, #0
    136e:	3308      	adds	r3, #8
    1370:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    1372:	2200      	movs	r2, #0
    1374:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    1376:	428b      	cmp	r3, r1
    1378:	d1fc      	bne.n	1374 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    137a:	4b07      	ldr	r3, [pc, #28]	; (1398 <NWK_Init+0x3c>)
    137c:	4798      	blx	r3
	nwkRxInit();
    137e:	4b07      	ldr	r3, [pc, #28]	; (139c <NWK_Init+0x40>)
    1380:	4798      	blx	r3
	nwkFrameInit();
    1382:	4b07      	ldr	r3, [pc, #28]	; (13a0 <NWK_Init+0x44>)
    1384:	4798      	blx	r3
	nwkDataReqInit();
    1386:	4b07      	ldr	r3, [pc, #28]	; (13a4 <NWK_Init+0x48>)
    1388:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    138a:	4b07      	ldr	r3, [pc, #28]	; (13a8 <NWK_Init+0x4c>)
    138c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    138e:	4b07      	ldr	r3, [pc, #28]	; (13ac <NWK_Init+0x50>)
    1390:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    1392:	bd08      	pop	{r3, pc}
    1394:	20004394 	.word	0x20004394
    1398:	00001679 	.word	0x00001679
    139c:	0000155d 	.word	0x0000155d
    13a0:	000013f5 	.word	0x000013f5
    13a4:	000013e9 	.word	0x000013e9
    13a8:	00001445 	.word	0x00001445
    13ac:	0000159d 	.word	0x0000159d

000013b0 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    13b0:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    13b2:	4b02      	ldr	r3, [pc, #8]	; (13bc <NWK_SetAddr+0xc>)
    13b4:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    13b6:	4b02      	ldr	r3, [pc, #8]	; (13c0 <NWK_SetAddr+0x10>)
    13b8:	4798      	blx	r3
}
    13ba:	bd08      	pop	{r3, pc}
    13bc:	20004394 	.word	0x20004394
    13c0:	0000130d 	.word	0x0000130d

000013c4 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    13c4:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    13c6:	4b02      	ldr	r3, [pc, #8]	; (13d0 <NWK_SetPanId+0xc>)
    13c8:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    13ca:	4b02      	ldr	r3, [pc, #8]	; (13d4 <NWK_SetPanId+0x10>)
    13cc:	4798      	blx	r3
}
    13ce:	bd08      	pop	{r3, pc}
    13d0:	20004394 	.word	0x20004394
    13d4:	000012ed 	.word	0x000012ed

000013d8 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    13d8:	3002      	adds	r0, #2
    13da:	0080      	lsls	r0, r0, #2
    13dc:	4b01      	ldr	r3, [pc, #4]	; (13e4 <NWK_OpenEndpoint+0xc>)
    13de:	50c1      	str	r1, [r0, r3]
}
    13e0:	4770      	bx	lr
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	20004394 	.word	0x20004394

000013e8 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    13e8:	2200      	movs	r2, #0
    13ea:	4b01      	ldr	r3, [pc, #4]	; (13f0 <nwkDataReqInit+0x8>)
    13ec:	601a      	str	r2, [r3, #0]
}
    13ee:	4770      	bx	lr
    13f0:	20003b60 	.word	0x20003b60

000013f4 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    13f4:	4b03      	ldr	r3, [pc, #12]	; (1404 <nwkFrameInit+0x10>)
    13f6:	2200      	movs	r2, #0
    13f8:	701a      	strb	r2, [r3, #0]
    13fa:	218d      	movs	r1, #141	; 0x8d
    13fc:	545a      	strb	r2, [r3, r1]
    13fe:	0049      	lsls	r1, r1, #1
    1400:	545a      	strb	r2, [r3, r1]
	}
}
    1402:	4770      	bx	lr
    1404:	20003b64 	.word	0x20003b64

00001408 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    1408:	2800      	cmp	r0, #0
    140a:	d006      	beq.n	141a <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    140c:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    140e:	4b0c      	ldr	r3, [pc, #48]	; (1440 <nwkFrameNext+0x38>)
    1410:	33a8      	adds	r3, #168	; 0xa8
    1412:	33ff      	adds	r3, #255	; 0xff
    1414:	4298      	cmp	r0, r3
    1416:	d301      	bcc.n	141c <nwkFrameNext+0x14>
    1418:	e00f      	b.n	143a <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    141a:	4809      	ldr	r0, [pc, #36]	; (1440 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    141c:	7803      	ldrb	r3, [r0, #0]
    141e:	2b00      	cmp	r3, #0
    1420:	d10c      	bne.n	143c <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1422:	4a07      	ldr	r2, [pc, #28]	; (1440 <nwkFrameNext+0x38>)
    1424:	32a8      	adds	r2, #168	; 0xa8
    1426:	32ff      	adds	r2, #255	; 0xff
    1428:	e002      	b.n	1430 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    142a:	7803      	ldrb	r3, [r0, #0]
    142c:	2b00      	cmp	r3, #0
    142e:	d105      	bne.n	143c <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1430:	308d      	adds	r0, #141	; 0x8d
    1432:	4290      	cmp	r0, r2
    1434:	d3f9      	bcc.n	142a <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    1436:	2000      	movs	r0, #0
    1438:	e000      	b.n	143c <nwkFrameNext+0x34>
    143a:	2000      	movs	r0, #0
}
    143c:	4770      	bx	lr
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	20003b64 	.word	0x20003b64

00001444 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    1444:	b5f0      	push	{r4, r5, r6, r7, lr}
    1446:	4a09      	ldr	r2, [pc, #36]	; (146c <nwkRouteInit+0x28>)
    1448:	3202      	adds	r2, #2
    144a:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    144c:	2701      	movs	r7, #1
    144e:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    1450:	4806      	ldr	r0, [pc, #24]	; (146c <nwkRouteInit+0x28>)
    1452:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    1454:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1456:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    1458:	00d9      	lsls	r1, r3, #3
    145a:	5c0c      	ldrb	r4, [r1, r0]
    145c:	43b4      	bics	r4, r6
    145e:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    1460:	7115      	strb	r5, [r2, #4]
    1462:	3301      	adds	r3, #1
    1464:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1466:	2b64      	cmp	r3, #100	; 0x64
    1468:	d1f5      	bne.n	1456 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    146a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    146c:	20003d0c 	.word	0x20003d0c

00001470 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    1470:	b570      	push	{r4, r5, r6, lr}
    1472:	4a0b      	ldr	r2, [pc, #44]	; (14a0 <NWK_RouteFindEntry+0x30>)
    1474:	3202      	adds	r2, #2
    1476:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    1478:	4e09      	ldr	r6, [pc, #36]	; (14a0 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    147a:	8814      	ldrh	r4, [r2, #0]
    147c:	4284      	cmp	r4, r0
    147e:	d109      	bne.n	1494 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    1480:	00dc      	lsls	r4, r3, #3
    1482:	5da4      	ldrb	r4, [r4, r6]
    1484:	07a4      	lsls	r4, r4, #30
    1486:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1488:	428c      	cmp	r4, r1
    148a:	d103      	bne.n	1494 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    148c:	00dd      	lsls	r5, r3, #3
    148e:	4804      	ldr	r0, [pc, #16]	; (14a0 <NWK_RouteFindEntry+0x30>)
    1490:	1940      	adds	r0, r0, r5
    1492:	e004      	b.n	149e <NWK_RouteFindEntry+0x2e>
    1494:	3301      	adds	r3, #1
    1496:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1498:	2b64      	cmp	r3, #100	; 0x64
    149a:	d1ee      	bne.n	147a <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    149c:	2000      	movs	r0, #0
}
    149e:	bd70      	pop	{r4, r5, r6, pc}
    14a0:	20003d0c 	.word	0x20003d0c

000014a4 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    14a4:	7803      	ldrb	r3, [r0, #0]
    14a6:	07da      	lsls	r2, r3, #31
    14a8:	d404      	bmi.n	14b4 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    14aa:	2301      	movs	r3, #1
    14ac:	425b      	negs	r3, r3
    14ae:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    14b0:	2300      	movs	r3, #0
    14b2:	7183      	strb	r3, [r0, #6]
}
    14b4:	4770      	bx	lr
    14b6:	46c0      	nop			; (mov r8, r8)

000014b8 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    14b8:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    14ba:	4b03      	ldr	r3, [pc, #12]	; (14c8 <nwkRouteRemove+0x10>)
    14bc:	4798      	blx	r3
	if (entry) {
    14be:	2800      	cmp	r0, #0
    14c0:	d001      	beq.n	14c6 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    14c2:	4b02      	ldr	r3, [pc, #8]	; (14cc <nwkRouteRemove+0x14>)
    14c4:	4798      	blx	r3
	}
}
    14c6:	bd08      	pop	{r3, pc}
    14c8:	00001471 	.word	0x00001471
    14cc:	000014a5 	.word	0x000014a5

000014d0 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    14d0:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    14d2:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    14d4:	7b03      	ldrb	r3, [r0, #12]
		return false;
    14d6:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    14d8:	2b06      	cmp	r3, #6
    14da:	d107      	bne.n	14ec <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    14dc:	78d3      	ldrb	r3, [r2, #3]
    14de:	7910      	ldrb	r0, [r2, #4]
    14e0:	0200      	lsls	r0, r0, #8
    14e2:	4318      	orrs	r0, r3
    14e4:	7951      	ldrb	r1, [r2, #5]
    14e6:	4b02      	ldr	r3, [pc, #8]	; (14f0 <nwkRouteErrorReceived+0x20>)
    14e8:	4798      	blx	r3

	return true;
    14ea:	2001      	movs	r0, #1
}
    14ec:	bd08      	pop	{r3, pc}
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	000014b9 	.word	0x000014b9

000014f4 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    14f4:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    14f6:	7b02      	ldrb	r2, [r0, #12]
		return false;
    14f8:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    14fa:	2a00      	cmp	r2, #0
    14fc:	d00f      	beq.n	151e <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    14fe:	6882      	ldr	r2, [r0, #8]
    1500:	7813      	ldrb	r3, [r2, #0]
    1502:	2b00      	cmp	r3, #0
    1504:	d002      	beq.n	150c <nwkRxSeriveDataInd+0x18>
    1506:	2b01      	cmp	r3, #1
    1508:	d004      	beq.n	1514 <nwkRxSeriveDataInd+0x20>
    150a:	e007      	b.n	151c <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    150c:	4b05      	ldr	r3, [pc, #20]	; (1524 <nwkRxSeriveDataInd+0x30>)
    150e:	4798      	blx	r3
    1510:	1c03      	adds	r3, r0, #0
    1512:	e004      	b.n	151e <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    1514:	4b04      	ldr	r3, [pc, #16]	; (1528 <nwkRxSeriveDataInd+0x34>)
    1516:	4798      	blx	r3
    1518:	1c03      	adds	r3, r0, #0
    151a:	e000      	b.n	151e <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    151c:	2300      	movs	r3, #0
	}
}
    151e:	1c18      	adds	r0, r3, #0
    1520:	bd08      	pop	{r3, pc}
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	000016ad 	.word	0x000016ad
    1528:	000014d1 	.word	0x000014d1

0000152c <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    152c:	b538      	push	{r3, r4, r5, lr}
    152e:	4909      	ldr	r1, [pc, #36]	; (1554 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    1530:	1d0b      	adds	r3, r1, #4
    1532:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    1534:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    1536:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    1538:	781a      	ldrb	r2, [r3, #0]
    153a:	2a00      	cmp	r2, #0
    153c:	d002      	beq.n	1544 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    153e:	3a01      	subs	r2, #1
    1540:	701a      	strb	r2, [r3, #0]
			restart = true;
    1542:	1c2c      	adds	r4, r5, #0
    1544:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1546:	428b      	cmp	r3, r1
    1548:	d1f6      	bne.n	1538 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    154a:	2c00      	cmp	r4, #0
    154c:	d001      	beq.n	1552 <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    154e:	4b02      	ldr	r3, [pc, #8]	; (1558 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    1550:	4798      	blx	r3
	}
}
    1552:	bd38      	pop	{r3, r4, r5, pc}
    1554:	2000402c 	.word	0x2000402c
    1558:	000011dd 	.word	0x000011dd

0000155c <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    155c:	b508      	push	{r3, lr}
    155e:	490a      	ldr	r1, [pc, #40]	; (1588 <nwkRxInit+0x2c>)
    1560:	1d0b      	adds	r3, r1, #4
    1562:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    1564:	2200      	movs	r2, #0
    1566:	701a      	strb	r2, [r3, #0]
    1568:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    156a:	428b      	cmp	r3, r1
    156c:	d1fb      	bne.n	1566 <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    156e:	4b07      	ldr	r3, [pc, #28]	; (158c <nwkRxInit+0x30>)
    1570:	2264      	movs	r2, #100	; 0x64
    1572:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1574:	2200      	movs	r2, #0
    1576:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    1578:	4a05      	ldr	r2, [pc, #20]	; (1590 <nwkRxInit+0x34>)
    157a:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    157c:	2000      	movs	r0, #0
    157e:	4905      	ldr	r1, [pc, #20]	; (1594 <nwkRxInit+0x38>)
    1580:	4b05      	ldr	r3, [pc, #20]	; (1598 <nwkRxInit+0x3c>)
    1582:	4798      	blx	r3
}
    1584:	bd08      	pop	{r3, pc}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	2000402c 	.word	0x2000402c
    158c:	20004068 	.word	0x20004068
    1590:	0000152d 	.word	0x0000152d
    1594:	000014f5 	.word	0x000014f5
    1598:	000013d9 	.word	0x000013d9

0000159c <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    159c:	2300      	movs	r3, #0
    159e:	4a02      	ldr	r2, [pc, #8]	; (15a8 <nwkSecurityInit+0xc>)
    15a0:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    15a2:	4a02      	ldr	r2, [pc, #8]	; (15ac <nwkSecurityInit+0x10>)
    15a4:	6013      	str	r3, [r2, #0]
}
    15a6:	4770      	bx	lr
    15a8:	2000407c 	.word	0x2000407c
    15ac:	20004080 	.word	0x20004080

000015b0 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    15b0:	b508      	push	{r3, lr}
    15b2:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    15b4:	4802      	ldr	r0, [pc, #8]	; (15c0 <NWK_SetSecurityKey+0x10>)
    15b6:	2210      	movs	r2, #16
    15b8:	4b02      	ldr	r3, [pc, #8]	; (15c4 <NWK_SetSecurityKey+0x14>)
    15ba:	4798      	blx	r3
}
    15bc:	bd08      	pop	{r3, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	200043dc 	.word	0x200043dc
    15c4:	000044a5 	.word	0x000044a5

000015c8 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    15c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ca:	4647      	mov	r7, r8
    15cc:	b480      	push	{r7}
    15ce:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    15d0:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    15d2:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    15d4:	4c0f      	ldr	r4, [pc, #60]	; (1614 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    15d6:	2686      	movs	r6, #134	; 0x86
    15d8:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    15da:	e010      	b.n	15fe <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    15dc:	7803      	ldrb	r3, [r0, #0]
    15de:	2b11      	cmp	r3, #17
    15e0:	d10d      	bne.n	15fe <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    15e2:	5d82      	ldrb	r2, [r0, r6]
    15e4:	5d43      	ldrb	r3, [r0, r5]
    15e6:	021b      	lsls	r3, r3, #8
    15e8:	4313      	orrs	r3, r2
    15ea:	3b01      	subs	r3, #1
    15ec:	b29b      	uxth	r3, r3
    15ee:	5583      	strb	r3, [r0, r6]
    15f0:	0a1a      	lsrs	r2, r3, #8
    15f2:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    15f4:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    15f6:	2b00      	cmp	r3, #0
    15f8:	d101      	bne.n	15fe <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    15fa:	2313      	movs	r3, #19
    15fc:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    15fe:	47a0      	blx	r4
    1600:	2800      	cmp	r0, #0
    1602:	d1eb      	bne.n	15dc <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    1604:	2f00      	cmp	r7, #0
    1606:	d002      	beq.n	160e <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    1608:	4640      	mov	r0, r8
    160a:	4b03      	ldr	r3, [pc, #12]	; (1618 <nwkTxDelayTimerHandler+0x50>)
    160c:	4798      	blx	r3
	}
}
    160e:	bc04      	pop	{r2}
    1610:	4690      	mov	r8, r2
    1612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1614:	00001409 	.word	0x00001409
    1618:	000011dd 	.word	0x000011dd

0000161c <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    161c:	b5f0      	push	{r4, r5, r6, r7, lr}
    161e:	4647      	mov	r7, r8
    1620:	b480      	push	{r7}
    1622:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    1624:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    1626:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1628:	4c11      	ldr	r4, [pc, #68]	; (1670 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    162a:	2686      	movs	r6, #134	; 0x86
    162c:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    162e:	e013      	b.n	1658 <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    1630:	7803      	ldrb	r3, [r0, #0]
    1632:	2b16      	cmp	r3, #22
    1634:	d110      	bne.n	1658 <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    1636:	5d82      	ldrb	r2, [r0, r6]
    1638:	5d43      	ldrb	r3, [r0, r5]
    163a:	021b      	lsls	r3, r3, #8
    163c:	4313      	orrs	r3, r2
    163e:	3b01      	subs	r3, #1
    1640:	b29b      	uxth	r3, r3
    1642:	5583      	strb	r3, [r0, r6]
    1644:	0a1a      	lsrs	r2, r3, #8
    1646:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    1648:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    164a:	2b00      	cmp	r3, #0
    164c:	d104      	bne.n	1658 <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    164e:	2317      	movs	r3, #23
    1650:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    1652:	2210      	movs	r2, #16
    1654:	2385      	movs	r3, #133	; 0x85
    1656:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1658:	47a0      	blx	r4
    165a:	2800      	cmp	r0, #0
    165c:	d1e8      	bne.n	1630 <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    165e:	2f00      	cmp	r7, #0
    1660:	d002      	beq.n	1668 <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    1662:	4640      	mov	r0, r8
    1664:	4b03      	ldr	r3, [pc, #12]	; (1674 <nwkTxAckWaitTimerHandler+0x58>)
    1666:	4798      	blx	r3
	}
}
    1668:	bc04      	pop	{r2}
    166a:	4690      	mov	r8, r2
    166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	00001409 	.word	0x00001409
    1674:	000011dd 	.word	0x000011dd

00001678 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    1678:	2200      	movs	r2, #0
    167a:	4b07      	ldr	r3, [pc, #28]	; (1698 <nwkTxInit+0x20>)
    167c:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    167e:	4b07      	ldr	r3, [pc, #28]	; (169c <nwkTxInit+0x24>)
    1680:	2132      	movs	r1, #50	; 0x32
    1682:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1684:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1686:	4906      	ldr	r1, [pc, #24]	; (16a0 <nwkTxInit+0x28>)
    1688:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    168a:	4b06      	ldr	r3, [pc, #24]	; (16a4 <nwkTxInit+0x2c>)
    168c:	210a      	movs	r1, #10
    168e:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1690:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    1692:	4a05      	ldr	r2, [pc, #20]	; (16a8 <nwkTxInit+0x30>)
    1694:	611a      	str	r2, [r3, #16]
}
    1696:	4770      	bx	lr
    1698:	20004098 	.word	0x20004098
    169c:	20004084 	.word	0x20004084
    16a0:	0000161d 	.word	0x0000161d
    16a4:	2000409c 	.word	0x2000409c
    16a8:	000015c9 	.word	0x000015c9

000016ac <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    16ac:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    16ae:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    16b0:	7b03      	ldrb	r3, [r0, #12]
		return false;
    16b2:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    16b4:	2b03      	cmp	r3, #3
    16b6:	d113      	bne.n	16e0 <nwkTxAckReceived+0x34>
    16b8:	e00d      	b.n	16d6 <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    16ba:	7803      	ldrb	r3, [r0, #0]
    16bc:	2b16      	cmp	r3, #22
    16be:	d10c      	bne.n	16da <nwkTxAckReceived+0x2e>
    16c0:	7b02      	ldrb	r2, [r0, #12]
    16c2:	786b      	ldrb	r3, [r5, #1]
    16c4:	429a      	cmp	r2, r3
    16c6:	d108      	bne.n	16da <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    16c8:	2317      	movs	r3, #23
    16ca:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    16cc:	78aa      	ldrb	r2, [r5, #2]
    16ce:	2388      	movs	r3, #136	; 0x88
    16d0:	54c2      	strb	r2, [r0, r3]
			return true;
    16d2:	2001      	movs	r0, #1
    16d4:	e004      	b.n	16e0 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    16d6:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    16d8:	4c02      	ldr	r4, [pc, #8]	; (16e4 <nwkTxAckReceived+0x38>)
    16da:	47a0      	blx	r4
    16dc:	2800      	cmp	r0, #0
    16de:	d1ec      	bne.n	16ba <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    16e0:	bd38      	pop	{r3, r4, r5, pc}
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	00001409 	.word	0x00001409

000016e8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16e8:	1c03      	adds	r3, r0, #0
    16ea:	3308      	adds	r3, #8
    16ec:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    16ee:	2201      	movs	r2, #1
    16f0:	4252      	negs	r2, r2
    16f2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16f4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16f6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    16f8:	2300      	movs	r3, #0
    16fa:	6003      	str	r3, [r0, #0]
}
    16fc:	4770      	bx	lr
    16fe:	46c0      	nop			; (mov r8, r8)

00001700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1700:	2300      	movs	r3, #0
    1702:	6103      	str	r3, [r0, #16]
}
    1704:	4770      	bx	lr
    1706:	46c0      	nop			; (mov r8, r8)

00001708 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1708:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    170a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    170c:	689a      	ldr	r2, [r3, #8]
    170e:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1710:	689a      	ldr	r2, [r3, #8]
    1712:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1714:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1716:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1718:	6803      	ldr	r3, [r0, #0]
    171a:	3301      	adds	r3, #1
    171c:	6003      	str	r3, [r0, #0]
}
    171e:	4770      	bx	lr

00001720 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1720:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1722:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1724:	1c02      	adds	r2, r0, #0
    1726:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1728:	1c63      	adds	r3, r4, #1
    172a:	d101      	bne.n	1730 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    172c:	6902      	ldr	r2, [r0, #16]
    172e:	e005      	b.n	173c <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1730:	6853      	ldr	r3, [r2, #4]
    1732:	681d      	ldr	r5, [r3, #0]
    1734:	42ac      	cmp	r4, r5
    1736:	d301      	bcc.n	173c <vListInsert+0x1c>
    1738:	1c1a      	adds	r2, r3, #0
    173a:	e7f9      	b.n	1730 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    173c:	6853      	ldr	r3, [r2, #4]
    173e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1740:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1742:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    1744:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1746:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1748:	6803      	ldr	r3, [r0, #0]
    174a:	3301      	adds	r3, #1
    174c:	6003      	str	r3, [r0, #0]
}
    174e:	bd30      	pop	{r4, r5, pc}

00001750 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1750:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1752:	6842      	ldr	r2, [r0, #4]
    1754:	6881      	ldr	r1, [r0, #8]
    1756:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1758:	6882      	ldr	r2, [r0, #8]
    175a:	6841      	ldr	r1, [r0, #4]
    175c:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    175e:	685a      	ldr	r2, [r3, #4]
    1760:	4282      	cmp	r2, r0
    1762:	d101      	bne.n	1768 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1764:	6892      	ldr	r2, [r2, #8]
    1766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1768:	2200      	movs	r2, #0
    176a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    176c:	6818      	ldr	r0, [r3, #0]
    176e:	3801      	subs	r0, #1
    1770:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    1772:	4770      	bx	lr

00001774 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1774:	b538      	push	{r3, r4, r5, lr}
    1776:	1c04      	adds	r4, r0, #0
    1778:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    177a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    177c:	2a00      	cmp	r2, #0
    177e:	d108      	bne.n	1792 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1780:	6801      	ldr	r1, [r0, #0]
    1782:	2900      	cmp	r1, #0
    1784:	d12a      	bne.n	17dc <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1786:	6840      	ldr	r0, [r0, #4]
    1788:	4b16      	ldr	r3, [pc, #88]	; (17e4 <prvCopyDataToQueue+0x70>)
    178a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    178c:	2300      	movs	r3, #0
    178e:	6063      	str	r3, [r4, #4]
    1790:	e024      	b.n	17dc <prvCopyDataToQueue+0x68>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1792:	2d00      	cmp	r5, #0
    1794:	d10c      	bne.n	17b0 <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1796:	6880      	ldr	r0, [r0, #8]
    1798:	4b13      	ldr	r3, [pc, #76]	; (17e8 <prvCopyDataToQueue+0x74>)
    179a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    179c:	68a2      	ldr	r2, [r4, #8]
    179e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    17a0:	1853      	adds	r3, r2, r1
    17a2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    17a4:	6862      	ldr	r2, [r4, #4]
    17a6:	4293      	cmp	r3, r2
    17a8:	d318      	bcc.n	17dc <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    17aa:	6823      	ldr	r3, [r4, #0]
    17ac:	60a3      	str	r3, [r4, #8]
    17ae:	e015      	b.n	17dc <prvCopyDataToQueue+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    17b0:	68c0      	ldr	r0, [r0, #12]
    17b2:	4b0d      	ldr	r3, [pc, #52]	; (17e8 <prvCopyDataToQueue+0x74>)
    17b4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    17b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    17b8:	424a      	negs	r2, r1
    17ba:	68e1      	ldr	r1, [r4, #12]
    17bc:	188b      	adds	r3, r1, r2
    17be:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    17c0:	6821      	ldr	r1, [r4, #0]
    17c2:	428b      	cmp	r3, r1
    17c4:	d202      	bcs.n	17cc <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    17c6:	6863      	ldr	r3, [r4, #4]
    17c8:	189a      	adds	r2, r3, r2
    17ca:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    17cc:	2d02      	cmp	r5, #2
    17ce:	d105      	bne.n	17dc <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    17d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    17d2:	2b00      	cmp	r3, #0
    17d4:	d002      	beq.n	17dc <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    17d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    17d8:	3b01      	subs	r3, #1
    17da:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    17dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    17de:	3301      	adds	r3, #1
    17e0:	63a3      	str	r3, [r4, #56]	; 0x38
}
    17e2:	bd38      	pop	{r3, r4, r5, pc}
    17e4:	00002701 	.word	0x00002701
    17e8:	000044a5 	.word	0x000044a5

000017ec <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    17ec:	b510      	push	{r4, lr}
    17ee:	b082      	sub	sp, #8
    17f0:	9001      	str	r0, [sp, #4]
    17f2:	1c0a      	adds	r2, r1, #0
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    17f4:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    17f6:	2c00      	cmp	r4, #0
    17f8:	d101      	bne.n	17fe <prvNotifyQueueSetContainer+0x12>
    17fa:	b672      	cpsid	i
    17fc:	e7fe      	b.n	17fc <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    17fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1802:	4299      	cmp	r1, r3
    1804:	d301      	bcc.n	180a <prvNotifyQueueSetContainer+0x1e>
    1806:	b672      	cpsid	i
    1808:	e7fe      	b.n	1808 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    180a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    180c:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    180e:	428b      	cmp	r3, r1
    1810:	d90d      	bls.n	182e <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    1812:	1c20      	adds	r0, r4, #0
    1814:	a901      	add	r1, sp, #4
    1816:	4b07      	ldr	r3, [pc, #28]	; (1834 <prvNotifyQueueSetContainer+0x48>)
    1818:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    181a:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    181c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    181e:	2b00      	cmp	r3, #0
    1820:	d005      	beq.n	182e <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1822:	1c20      	adds	r0, r4, #0
    1824:	3024      	adds	r0, #36	; 0x24
    1826:	4b04      	ldr	r3, [pc, #16]	; (1838 <prvNotifyQueueSetContainer+0x4c>)
    1828:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    182a:	1e43      	subs	r3, r0, #1
    182c:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    182e:	b002      	add	sp, #8
    1830:	bd10      	pop	{r4, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	00001775 	.word	0x00001775
    1838:	00002531 	.word	0x00002531

0000183c <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    183c:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    183e:	6804      	ldr	r4, [r0, #0]
    1840:	2c00      	cmp	r4, #0
    1842:	d00c      	beq.n	185e <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1844:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1846:	68c5      	ldr	r5, [r0, #12]
    1848:	18ab      	adds	r3, r5, r2
    184a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    184c:	6845      	ldr	r5, [r0, #4]
    184e:	42ab      	cmp	r3, r5
    1850:	d300      	bcc.n	1854 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1852:	60c4      	str	r4, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1854:	68c3      	ldr	r3, [r0, #12]
    1856:	1c08      	adds	r0, r1, #0
    1858:	1c19      	adds	r1, r3, #0
    185a:	4b01      	ldr	r3, [pc, #4]	; (1860 <prvCopyDataFromQueue+0x24>)
    185c:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    185e:	bd38      	pop	{r3, r4, r5, pc}
    1860:	000044a5 	.word	0x000044a5

00001864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1866:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1868:	4b23      	ldr	r3, [pc, #140]	; (18f8 <prvUnlockQueue+0x94>)
    186a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    186c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    186e:	2b00      	cmp	r3, #0
    1870:	dd1c      	ble.n	18ac <prvUnlockQueue+0x48>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1872:	4e22      	ldr	r6, [pc, #136]	; (18fc <prvUnlockQueue+0x98>)
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1874:	4d22      	ldr	r5, [pc, #136]	; (1900 <prvUnlockQueue+0x9c>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    1876:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1878:	2b00      	cmp	r3, #0
    187a:	d007      	beq.n	188c <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    187c:	1c20      	adds	r0, r4, #0
    187e:	2100      	movs	r1, #0
    1880:	47a8      	blx	r5
    1882:	2801      	cmp	r0, #1
    1884:	d10c      	bne.n	18a0 <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    1886:	4b1f      	ldr	r3, [pc, #124]	; (1904 <prvUnlockQueue+0xa0>)
    1888:	4798      	blx	r3
    188a:	e009      	b.n	18a0 <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    188c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    188e:	2b00      	cmp	r3, #0
    1890:	d00c      	beq.n	18ac <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1892:	1c20      	adds	r0, r4, #0
    1894:	3024      	adds	r0, #36	; 0x24
    1896:	47b0      	blx	r6
    1898:	2800      	cmp	r0, #0
    189a:	d001      	beq.n	18a0 <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    189c:	4b19      	ldr	r3, [pc, #100]	; (1904 <prvUnlockQueue+0xa0>)
    189e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    18a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    18a2:	3b01      	subs	r3, #1
    18a4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    18a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    18a8:	2b00      	cmp	r3, #0
    18aa:	dce4      	bgt.n	1876 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    18ac:	2301      	movs	r3, #1
    18ae:	425b      	negs	r3, r3
    18b0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    18b2:	4b15      	ldr	r3, [pc, #84]	; (1908 <prvUnlockQueue+0xa4>)
    18b4:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    18b6:	4b10      	ldr	r3, [pc, #64]	; (18f8 <prvUnlockQueue+0x94>)
    18b8:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    18ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
    18bc:	2b00      	cmp	r3, #0
    18be:	dd15      	ble.n	18ec <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18c0:	6923      	ldr	r3, [r4, #16]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d012      	beq.n	18ec <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18c6:	1c27      	adds	r7, r4, #0
    18c8:	3710      	adds	r7, #16
    18ca:	4e0c      	ldr	r6, [pc, #48]	; (18fc <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
    18cc:	4d0d      	ldr	r5, [pc, #52]	; (1904 <prvUnlockQueue+0xa0>)
    18ce:	e002      	b.n	18d6 <prvUnlockQueue+0x72>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    18d0:	6923      	ldr	r3, [r4, #16]
    18d2:	2b00      	cmp	r3, #0
    18d4:	d00a      	beq.n	18ec <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18d6:	1c38      	adds	r0, r7, #0
    18d8:	47b0      	blx	r6
    18da:	2800      	cmp	r0, #0
    18dc:	d000      	beq.n	18e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    18de:	47a8      	blx	r5
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    18e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    18e2:	3b01      	subs	r3, #1
    18e4:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    18e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    18e8:	2b00      	cmp	r3, #0
    18ea:	dcf1      	bgt.n	18d0 <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    18ec:	2301      	movs	r3, #1
    18ee:	425b      	negs	r3, r3
    18f0:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    18f2:	4b05      	ldr	r3, [pc, #20]	; (1908 <prvUnlockQueue+0xa4>)
    18f4:	4798      	blx	r3
}
    18f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18f8:	00000a4d 	.word	0x00000a4d
    18fc:	00002531 	.word	0x00002531
    1900:	000017ed 	.word	0x000017ed
    1904:	00002649 	.word	0x00002649
    1908:	00000a65 	.word	0x00000a65

0000190c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    190c:	b538      	push	{r3, r4, r5, lr}
    190e:	1c04      	adds	r4, r0, #0
    1910:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1912:	2800      	cmp	r0, #0
    1914:	d101      	bne.n	191a <xQueueGenericReset+0xe>
    1916:	b672      	cpsid	i
    1918:	e7fe      	b.n	1918 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
    191a:	4b15      	ldr	r3, [pc, #84]	; (1970 <xQueueGenericReset+0x64>)
    191c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    191e:	6823      	ldr	r3, [r4, #0]
    1920:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1922:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    1924:	4350      	muls	r0, r2
    1926:	1819      	adds	r1, r3, r0
    1928:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    192a:	2100      	movs	r1, #0
    192c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    192e:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1930:	1a82      	subs	r2, r0, r2
    1932:	189b      	adds	r3, r3, r2
    1934:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    1936:	2301      	movs	r3, #1
    1938:	425b      	negs	r3, r3
    193a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    193c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    193e:	2d00      	cmp	r5, #0
    1940:	d10b      	bne.n	195a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1942:	6921      	ldr	r1, [r4, #16]
    1944:	2900      	cmp	r1, #0
    1946:	d00f      	beq.n	1968 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1948:	1c20      	adds	r0, r4, #0
    194a:	3010      	adds	r0, #16
    194c:	4b09      	ldr	r3, [pc, #36]	; (1974 <xQueueGenericReset+0x68>)
    194e:	4798      	blx	r3
    1950:	2801      	cmp	r0, #1
    1952:	d109      	bne.n	1968 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1954:	4b08      	ldr	r3, [pc, #32]	; (1978 <xQueueGenericReset+0x6c>)
    1956:	4798      	blx	r3
    1958:	e006      	b.n	1968 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    195a:	1c20      	adds	r0, r4, #0
    195c:	3010      	adds	r0, #16
    195e:	4d07      	ldr	r5, [pc, #28]	; (197c <xQueueGenericReset+0x70>)
    1960:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1962:	1c20      	adds	r0, r4, #0
    1964:	3024      	adds	r0, #36	; 0x24
    1966:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    1968:	4b05      	ldr	r3, [pc, #20]	; (1980 <xQueueGenericReset+0x74>)
    196a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    196c:	2001      	movs	r0, #1
    196e:	bd38      	pop	{r3, r4, r5, pc}
    1970:	00000a4d 	.word	0x00000a4d
    1974:	00002531 	.word	0x00002531
    1978:	00000a35 	.word	0x00000a35
    197c:	000016e9 	.word	0x000016e9
    1980:	00000a65 	.word	0x00000a65

00001984 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1984:	b570      	push	{r4, r5, r6, lr}
    1986:	1c05      	adds	r5, r0, #0
    1988:	1c0e      	adds	r6, r1, #0
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    198a:	2800      	cmp	r0, #0
    198c:	d011      	beq.n	19b2 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    198e:	2050      	movs	r0, #80	; 0x50
    1990:	4b0e      	ldr	r3, [pc, #56]	; (19cc <xQueueGenericCreate+0x48>)
    1992:	4798      	blx	r3
    1994:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1996:	d00c      	beq.n	19b2 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1998:	1c30      	adds	r0, r6, #0
    199a:	4368      	muls	r0, r5
    199c:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    199e:	4b0b      	ldr	r3, [pc, #44]	; (19cc <xQueueGenericCreate+0x48>)
    19a0:	4798      	blx	r3
    19a2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    19a4:	2800      	cmp	r0, #0
    19a6:	d106      	bne.n	19b6 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    19a8:	1c20      	adds	r0, r4, #0
    19aa:	4b09      	ldr	r3, [pc, #36]	; (19d0 <xQueueGenericCreate+0x4c>)
    19ac:	4798      	blx	r3
    19ae:	e000      	b.n	19b2 <xQueueGenericCreate+0x2e>
    19b0:	e7fe      	b.n	19b0 <xQueueGenericCreate+0x2c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    19b2:	b672      	cpsid	i
    19b4:	e7fc      	b.n	19b0 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    19b6:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    19b8:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    19ba:	1c20      	adds	r0, r4, #0
    19bc:	2101      	movs	r1, #1
    19be:	4b05      	ldr	r3, [pc, #20]	; (19d4 <xQueueGenericCreate+0x50>)
    19c0:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    19c2:	2300      	movs	r3, #0
    19c4:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
    19c6:	1c20      	adds	r0, r4, #0
    19c8:	bd70      	pop	{r4, r5, r6, pc}
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	00000b71 	.word	0x00000b71
    19d0:	00000bd9 	.word	0x00000bd9
    19d4:	0000190d 	.word	0x0000190d

000019d8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    19d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19da:	4657      	mov	r7, sl
    19dc:	464e      	mov	r6, r9
    19de:	4645      	mov	r5, r8
    19e0:	b4e0      	push	{r5, r6, r7}
    19e2:	b084      	sub	sp, #16
    19e4:	1c04      	adds	r4, r0, #0
    19e6:	1c0e      	adds	r6, r1, #0
    19e8:	9201      	str	r2, [sp, #4]
    19ea:	1c1d      	adds	r5, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    19ec:	2800      	cmp	r0, #0
    19ee:	d101      	bne.n	19f4 <xQueueGenericSend+0x1c>
    19f0:	b672      	cpsid	i
    19f2:	e7fe      	b.n	19f2 <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    19f4:	2900      	cmp	r1, #0
    19f6:	d104      	bne.n	1a02 <xQueueGenericSend+0x2a>
    19f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    19fa:	2a00      	cmp	r2, #0
    19fc:	d001      	beq.n	1a02 <xQueueGenericSend+0x2a>
    19fe:	b672      	cpsid	i
    1a00:	e7fe      	b.n	1a00 <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1a02:	2d02      	cmp	r5, #2
    1a04:	d104      	bne.n	1a10 <xQueueGenericSend+0x38>
    1a06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1a08:	2b01      	cmp	r3, #1
    1a0a:	d001      	beq.n	1a10 <xQueueGenericSend+0x38>
    1a0c:	b672      	cpsid	i
    1a0e:	e7fe      	b.n	1a0e <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1a10:	4b41      	ldr	r3, [pc, #260]	; (1b18 <xQueueGenericSend+0x140>)
    1a12:	4798      	blx	r3
    1a14:	2800      	cmp	r0, #0
    1a16:	d102      	bne.n	1a1e <xQueueGenericSend+0x46>
    1a18:	9a01      	ldr	r2, [sp, #4]
    1a1a:	2a00      	cmp	r2, #0
    1a1c:	d103      	bne.n	1a26 <xQueueGenericSend+0x4e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1a1e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1a20:	4b3e      	ldr	r3, [pc, #248]	; (1b1c <xQueueGenericSend+0x144>)
    1a22:	4698      	mov	r8, r3
    1a24:	e001      	b.n	1a2a <xQueueGenericSend+0x52>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1a26:	b672      	cpsid	i
    1a28:	e7fe      	b.n	1a28 <xQueueGenericSend+0x50>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1a2a:	47c0      	blx	r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1a2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1a2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1a30:	4293      	cmp	r3, r2
    1a32:	d301      	bcc.n	1a38 <xQueueGenericSend+0x60>
    1a34:	2d02      	cmp	r5, #2
    1a36:	d11f      	bne.n	1a78 <xQueueGenericSend+0xa0>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1a38:	1c20      	adds	r0, r4, #0
    1a3a:	1c31      	adds	r1, r6, #0
    1a3c:	1c2a      	adds	r2, r5, #0
    1a3e:	4b38      	ldr	r3, [pc, #224]	; (1b20 <xQueueGenericSend+0x148>)
    1a40:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    1a42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1a44:	2b00      	cmp	r3, #0
    1a46:	d008      	beq.n	1a5a <xQueueGenericSend+0x82>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1a48:	1c20      	adds	r0, r4, #0
    1a4a:	1c29      	adds	r1, r5, #0
    1a4c:	4b35      	ldr	r3, [pc, #212]	; (1b24 <xQueueGenericSend+0x14c>)
    1a4e:	4798      	blx	r3
    1a50:	2801      	cmp	r0, #1
    1a52:	d10d      	bne.n	1a70 <xQueueGenericSend+0x98>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    1a54:	4b34      	ldr	r3, [pc, #208]	; (1b28 <xQueueGenericSend+0x150>)
    1a56:	4798      	blx	r3
    1a58:	e00a      	b.n	1a70 <xQueueGenericSend+0x98>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1a5c:	2a00      	cmp	r2, #0
    1a5e:	d007      	beq.n	1a70 <xQueueGenericSend+0x98>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1a60:	1c20      	adds	r0, r4, #0
    1a62:	3024      	adds	r0, #36	; 0x24
    1a64:	4b31      	ldr	r3, [pc, #196]	; (1b2c <xQueueGenericSend+0x154>)
    1a66:	4798      	blx	r3
    1a68:	2801      	cmp	r0, #1
    1a6a:	d101      	bne.n	1a70 <xQueueGenericSend+0x98>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    1a6c:	4b2e      	ldr	r3, [pc, #184]	; (1b28 <xQueueGenericSend+0x150>)
    1a6e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1a70:	4b2f      	ldr	r3, [pc, #188]	; (1b30 <xQueueGenericSend+0x158>)
    1a72:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1a74:	2001      	movs	r0, #1
    1a76:	e049      	b.n	1b0c <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1a78:	9b01      	ldr	r3, [sp, #4]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d103      	bne.n	1a86 <xQueueGenericSend+0xae>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1a7e:	4b2c      	ldr	r3, [pc, #176]	; (1b30 <xQueueGenericSend+0x158>)
    1a80:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1a82:	2000      	movs	r0, #0
    1a84:	e042      	b.n	1b0c <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
    1a86:	2f00      	cmp	r7, #0
    1a88:	d103      	bne.n	1a92 <xQueueGenericSend+0xba>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a8a:	a802      	add	r0, sp, #8
    1a8c:	4a29      	ldr	r2, [pc, #164]	; (1b34 <xQueueGenericSend+0x15c>)
    1a8e:	4790      	blx	r2
					xEntryTimeSet = pdTRUE;
    1a90:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1a92:	4b27      	ldr	r3, [pc, #156]	; (1b30 <xQueueGenericSend+0x158>)
    1a94:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1a96:	4b28      	ldr	r3, [pc, #160]	; (1b38 <xQueueGenericSend+0x160>)
    1a98:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1a9a:	4b20      	ldr	r3, [pc, #128]	; (1b1c <xQueueGenericSend+0x144>)
    1a9c:	4798      	blx	r3
    1a9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1aa0:	3301      	adds	r3, #1
    1aa2:	d101      	bne.n	1aa8 <xQueueGenericSend+0xd0>
    1aa4:	2300      	movs	r3, #0
    1aa6:	6463      	str	r3, [r4, #68]	; 0x44
    1aa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1aaa:	3301      	adds	r3, #1
    1aac:	d101      	bne.n	1ab2 <xQueueGenericSend+0xda>
    1aae:	2300      	movs	r3, #0
    1ab0:	64a3      	str	r3, [r4, #72]	; 0x48
    1ab2:	4b1f      	ldr	r3, [pc, #124]	; (1b30 <xQueueGenericSend+0x158>)
    1ab4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ab6:	a802      	add	r0, sp, #8
    1ab8:	a901      	add	r1, sp, #4
    1aba:	4b20      	ldr	r3, [pc, #128]	; (1b3c <xQueueGenericSend+0x164>)
    1abc:	4798      	blx	r3
    1abe:	2800      	cmp	r0, #0
    1ac0:	d11e      	bne.n	1b00 <xQueueGenericSend+0x128>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1ac2:	4b16      	ldr	r3, [pc, #88]	; (1b1c <xQueueGenericSend+0x144>)
    1ac4:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1ac6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1ac8:	4692      	mov	sl, r2
    1aca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1acc:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1ace:	4b18      	ldr	r3, [pc, #96]	; (1b30 <xQueueGenericSend+0x158>)
    1ad0:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1ad2:	45ca      	cmp	sl, r9
    1ad4:	d10e      	bne.n	1af4 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1ad6:	1c20      	adds	r0, r4, #0
    1ad8:	3010      	adds	r0, #16
    1ada:	9901      	ldr	r1, [sp, #4]
    1adc:	4b18      	ldr	r3, [pc, #96]	; (1b40 <xQueueGenericSend+0x168>)
    1ade:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1ae0:	1c20      	adds	r0, r4, #0
    1ae2:	4b18      	ldr	r3, [pc, #96]	; (1b44 <xQueueGenericSend+0x16c>)
    1ae4:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1ae6:	4b18      	ldr	r3, [pc, #96]	; (1b48 <xQueueGenericSend+0x170>)
    1ae8:	4798      	blx	r3
    1aea:	2800      	cmp	r0, #0
    1aec:	d19d      	bne.n	1a2a <xQueueGenericSend+0x52>
				{
					portYIELD_WITHIN_API();
    1aee:	4b0e      	ldr	r3, [pc, #56]	; (1b28 <xQueueGenericSend+0x150>)
    1af0:	4798      	blx	r3
    1af2:	e79a      	b.n	1a2a <xQueueGenericSend+0x52>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1af4:	1c20      	adds	r0, r4, #0
    1af6:	4b13      	ldr	r3, [pc, #76]	; (1b44 <xQueueGenericSend+0x16c>)
    1af8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1afa:	4b13      	ldr	r3, [pc, #76]	; (1b48 <xQueueGenericSend+0x170>)
    1afc:	4798      	blx	r3
    1afe:	e794      	b.n	1a2a <xQueueGenericSend+0x52>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1b00:	1c20      	adds	r0, r4, #0
    1b02:	4b10      	ldr	r3, [pc, #64]	; (1b44 <xQueueGenericSend+0x16c>)
    1b04:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1b06:	4b10      	ldr	r3, [pc, #64]	; (1b48 <xQueueGenericSend+0x170>)
    1b08:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1b0a:	2000      	movs	r0, #0
		}
	}
}
    1b0c:	b004      	add	sp, #16
    1b0e:	bc1c      	pop	{r2, r3, r4}
    1b10:	4690      	mov	r8, r2
    1b12:	4699      	mov	r9, r3
    1b14:	46a2      	mov	sl, r4
    1b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b18:	00002661 	.word	0x00002661
    1b1c:	00000a4d 	.word	0x00000a4d
    1b20:	00001775 	.word	0x00001775
    1b24:	000017ed 	.word	0x000017ed
    1b28:	00000a35 	.word	0x00000a35
    1b2c:	00002531 	.word	0x00002531
    1b30:	00000a65 	.word	0x00000a65
    1b34:	000025b9 	.word	0x000025b9
    1b38:	000020cd 	.word	0x000020cd
    1b3c:	000025d9 	.word	0x000025d9
    1b40:	00002499 	.word	0x00002499
    1b44:	00001865 	.word	0x00001865
    1b48:	00002229 	.word	0x00002229

00001b4c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b4e:	4647      	mov	r7, r8
    1b50:	b480      	push	{r7}
    1b52:	1c04      	adds	r4, r0, #0
    1b54:	4688      	mov	r8, r1
    1b56:	1c16      	adds	r6, r2, #0
    1b58:	1c1d      	adds	r5, r3, #0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1b5a:	2800      	cmp	r0, #0
    1b5c:	d101      	bne.n	1b62 <xQueueGenericSendFromISR+0x16>
    1b5e:	b672      	cpsid	i
    1b60:	e7fe      	b.n	1b60 <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1b62:	2900      	cmp	r1, #0
    1b64:	d104      	bne.n	1b70 <xQueueGenericSendFromISR+0x24>
    1b66:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d001      	beq.n	1b70 <xQueueGenericSendFromISR+0x24>
    1b6c:	b672      	cpsid	i
    1b6e:	e7fe      	b.n	1b6e <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1b70:	2d02      	cmp	r5, #2
    1b72:	d133      	bne.n	1bdc <xQueueGenericSendFromISR+0x90>
    1b74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1b76:	2a01      	cmp	r2, #1
    1b78:	d039      	beq.n	1bee <xQueueGenericSendFromISR+0xa2>
    1b7a:	b672      	cpsid	i
    1b7c:	e7fe      	b.n	1b7c <xQueueGenericSendFromISR+0x30>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1b7e:	1c20      	adds	r0, r4, #0
    1b80:	4641      	mov	r1, r8
    1b82:	1c2a      	adds	r2, r5, #0
    1b84:	4b20      	ldr	r3, [pc, #128]	; (1c08 <xQueueGenericSendFromISR+0xbc>)
    1b86:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1b88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1b8a:	3301      	adds	r3, #1
    1b8c:	d11d      	bne.n	1bca <xQueueGenericSendFromISR+0x7e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    1b8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1b90:	2b00      	cmp	r3, #0
    1b92:	d00b      	beq.n	1bac <xQueueGenericSendFromISR+0x60>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1b94:	1c20      	adds	r0, r4, #0
    1b96:	1c29      	adds	r1, r5, #0
    1b98:	4b1c      	ldr	r3, [pc, #112]	; (1c0c <xQueueGenericSendFromISR+0xc0>)
    1b9a:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1b9c:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    1b9e:	2801      	cmp	r0, #1
    1ba0:	d12a      	bne.n	1bf8 <xQueueGenericSendFromISR+0xac>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1ba2:	2e00      	cmp	r6, #0
    1ba4:	d016      	beq.n	1bd4 <xQueueGenericSendFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1ba6:	2301      	movs	r3, #1
    1ba8:	6033      	str	r3, [r6, #0]
    1baa:	e025      	b.n	1bf8 <xQueueGenericSendFromISR+0xac>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1bac:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1bae:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1bb0:	2a00      	cmp	r2, #0
    1bb2:	d021      	beq.n	1bf8 <xQueueGenericSendFromISR+0xac>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1bb4:	1c20      	adds	r0, r4, #0
    1bb6:	3024      	adds	r0, #36	; 0x24
    1bb8:	4b15      	ldr	r3, [pc, #84]	; (1c10 <xQueueGenericSendFromISR+0xc4>)
    1bba:	4798      	blx	r3
    1bbc:	2800      	cmp	r0, #0
    1bbe:	d01b      	beq.n	1bf8 <xQueueGenericSendFromISR+0xac>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    1bc0:	2e00      	cmp	r6, #0
    1bc2:	d009      	beq.n	1bd8 <xQueueGenericSendFromISR+0x8c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    1bc4:	2301      	movs	r3, #1
    1bc6:	6033      	str	r3, [r6, #0]
    1bc8:	e016      	b.n	1bf8 <xQueueGenericSendFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1bca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1bcc:	3301      	adds	r3, #1
    1bce:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    1bd0:	2501      	movs	r5, #1
    1bd2:	e011      	b.n	1bf8 <xQueueGenericSendFromISR+0xac>
    1bd4:	2501      	movs	r5, #1
    1bd6:	e00f      	b.n	1bf8 <xQueueGenericSendFromISR+0xac>
    1bd8:	2501      	movs	r5, #1
    1bda:	e00d      	b.n	1bf8 <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1bdc:	4b0d      	ldr	r3, [pc, #52]	; (1c14 <xQueueGenericSendFromISR+0xc8>)
    1bde:	4798      	blx	r3
    1be0:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1be4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1be6:	4293      	cmp	r3, r2
    1be8:	d3c9      	bcc.n	1b7e <xQueueGenericSendFromISR+0x32>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1bea:	2500      	movs	r5, #0
    1bec:	e004      	b.n	1bf8 <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1bee:	4b09      	ldr	r3, [pc, #36]	; (1c14 <xQueueGenericSendFromISR+0xc8>)
    1bf0:	4798      	blx	r3
    1bf2:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1bf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1bf6:	e7c2      	b.n	1b7e <xQueueGenericSendFromISR+0x32>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1bf8:	1c38      	adds	r0, r7, #0
    1bfa:	4b07      	ldr	r3, [pc, #28]	; (1c18 <xQueueGenericSendFromISR+0xcc>)
    1bfc:	4798      	blx	r3

	return xReturn;
}
    1bfe:	1c28      	adds	r0, r5, #0
    1c00:	bc04      	pop	{r2}
    1c02:	4690      	mov	r8, r2
    1c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	00001775 	.word	0x00001775
    1c0c:	000017ed 	.word	0x000017ed
    1c10:	00002531 	.word	0x00002531
    1c14:	00000a85 	.word	0x00000a85
    1c18:	00000a91 	.word	0x00000a91

00001c1c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c1e:	464f      	mov	r7, r9
    1c20:	4646      	mov	r6, r8
    1c22:	b4c0      	push	{r6, r7}
    1c24:	b085      	sub	sp, #20
    1c26:	1c04      	adds	r4, r0, #0
    1c28:	1c0d      	adds	r5, r1, #0
    1c2a:	9201      	str	r2, [sp, #4]
    1c2c:	1c1f      	adds	r7, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1c2e:	2800      	cmp	r0, #0
    1c30:	d101      	bne.n	1c36 <xQueueGenericReceive+0x1a>
    1c32:	b672      	cpsid	i
    1c34:	e7fe      	b.n	1c34 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1c36:	2900      	cmp	r1, #0
    1c38:	d104      	bne.n	1c44 <xQueueGenericReceive+0x28>
    1c3a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d001      	beq.n	1c44 <xQueueGenericReceive+0x28>
    1c40:	b672      	cpsid	i
    1c42:	e7fe      	b.n	1c42 <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1c44:	4b4a      	ldr	r3, [pc, #296]	; (1d70 <xQueueGenericReceive+0x154>)
    1c46:	4798      	blx	r3
    1c48:	2800      	cmp	r0, #0
    1c4a:	d102      	bne.n	1c52 <xQueueGenericReceive+0x36>
    1c4c:	9b01      	ldr	r3, [sp, #4]
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d103      	bne.n	1c5a <xQueueGenericReceive+0x3e>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1c52:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1c54:	4b47      	ldr	r3, [pc, #284]	; (1d74 <xQueueGenericReceive+0x158>)
    1c56:	4698      	mov	r8, r3
    1c58:	e001      	b.n	1c5e <xQueueGenericReceive+0x42>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1c5a:	b672      	cpsid	i
    1c5c:	e7fe      	b.n	1c5c <xQueueGenericReceive+0x40>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1c5e:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1c60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1c62:	2b00      	cmp	r3, #0
    1c64:	d02b      	beq.n	1cbe <xQueueGenericReceive+0xa2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1c66:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1c68:	1c20      	adds	r0, r4, #0
    1c6a:	1c29      	adds	r1, r5, #0
    1c6c:	4b42      	ldr	r3, [pc, #264]	; (1d78 <xQueueGenericReceive+0x15c>)
    1c6e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    1c70:	2f00      	cmp	r7, #0
    1c72:	d114      	bne.n	1c9e <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    1c74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1c76:	3b01      	subs	r3, #1
    1c78:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1c7a:	6823      	ldr	r3, [r4, #0]
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d102      	bne.n	1c86 <xQueueGenericReceive+0x6a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1c80:	4b3e      	ldr	r3, [pc, #248]	; (1d7c <xQueueGenericReceive+0x160>)
    1c82:	4798      	blx	r3
    1c84:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1c86:	6923      	ldr	r3, [r4, #16]
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d014      	beq.n	1cb6 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1c8c:	1c20      	adds	r0, r4, #0
    1c8e:	3010      	adds	r0, #16
    1c90:	4b3b      	ldr	r3, [pc, #236]	; (1d80 <xQueueGenericReceive+0x164>)
    1c92:	4798      	blx	r3
    1c94:	2801      	cmp	r0, #1
    1c96:	d10e      	bne.n	1cb6 <xQueueGenericReceive+0x9a>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1c98:	4b3a      	ldr	r3, [pc, #232]	; (1d84 <xQueueGenericReceive+0x168>)
    1c9a:	4798      	blx	r3
    1c9c:	e00b      	b.n	1cb6 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1c9e:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d007      	beq.n	1cb6 <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ca6:	1c20      	adds	r0, r4, #0
    1ca8:	3024      	adds	r0, #36	; 0x24
    1caa:	4b35      	ldr	r3, [pc, #212]	; (1d80 <xQueueGenericReceive+0x164>)
    1cac:	4798      	blx	r3
    1cae:	2800      	cmp	r0, #0
    1cb0:	d001      	beq.n	1cb6 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1cb2:	4b34      	ldr	r3, [pc, #208]	; (1d84 <xQueueGenericReceive+0x168>)
    1cb4:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1cb6:	4b34      	ldr	r3, [pc, #208]	; (1d88 <xQueueGenericReceive+0x16c>)
    1cb8:	4798      	blx	r3
				return pdPASS;
    1cba:	2001      	movs	r0, #1
    1cbc:	e052      	b.n	1d64 <xQueueGenericReceive+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1cbe:	9b01      	ldr	r3, [sp, #4]
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d103      	bne.n	1ccc <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1cc4:	4b30      	ldr	r3, [pc, #192]	; (1d88 <xQueueGenericReceive+0x16c>)
    1cc6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1cc8:	2000      	movs	r0, #0
    1cca:	e04b      	b.n	1d64 <xQueueGenericReceive+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    1ccc:	2e00      	cmp	r6, #0
    1cce:	d103      	bne.n	1cd8 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1cd0:	a802      	add	r0, sp, #8
    1cd2:	4b2e      	ldr	r3, [pc, #184]	; (1d8c <xQueueGenericReceive+0x170>)
    1cd4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1cd6:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1cd8:	4b2b      	ldr	r3, [pc, #172]	; (1d88 <xQueueGenericReceive+0x16c>)
    1cda:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1cdc:	4b2c      	ldr	r3, [pc, #176]	; (1d90 <xQueueGenericReceive+0x174>)
    1cde:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1ce0:	4b24      	ldr	r3, [pc, #144]	; (1d74 <xQueueGenericReceive+0x158>)
    1ce2:	4798      	blx	r3
    1ce4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1ce6:	3301      	adds	r3, #1
    1ce8:	d101      	bne.n	1cee <xQueueGenericReceive+0xd2>
    1cea:	2300      	movs	r3, #0
    1cec:	6463      	str	r3, [r4, #68]	; 0x44
    1cee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1cf0:	3301      	adds	r3, #1
    1cf2:	d101      	bne.n	1cf8 <xQueueGenericReceive+0xdc>
    1cf4:	2300      	movs	r3, #0
    1cf6:	64a3      	str	r3, [r4, #72]	; 0x48
    1cf8:	4b23      	ldr	r3, [pc, #140]	; (1d88 <xQueueGenericReceive+0x16c>)
    1cfa:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1cfc:	a802      	add	r0, sp, #8
    1cfe:	a901      	add	r1, sp, #4
    1d00:	4b24      	ldr	r3, [pc, #144]	; (1d94 <xQueueGenericReceive+0x178>)
    1d02:	4798      	blx	r3
    1d04:	2800      	cmp	r0, #0
    1d06:	d127      	bne.n	1d58 <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1d08:	4b1a      	ldr	r3, [pc, #104]	; (1d74 <xQueueGenericReceive+0x158>)
    1d0a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1d0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d0e:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1d10:	4b1d      	ldr	r3, [pc, #116]	; (1d88 <xQueueGenericReceive+0x16c>)
    1d12:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1d14:	464b      	mov	r3, r9
    1d16:	2b00      	cmp	r3, #0
    1d18:	d118      	bne.n	1d4c <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1d1a:	6823      	ldr	r3, [r4, #0]
    1d1c:	2b00      	cmp	r3, #0
    1d1e:	d106      	bne.n	1d2e <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
    1d20:	4b14      	ldr	r3, [pc, #80]	; (1d74 <xQueueGenericReceive+0x158>)
    1d22:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1d24:	6860      	ldr	r0, [r4, #4]
    1d26:	4b1c      	ldr	r3, [pc, #112]	; (1d98 <xQueueGenericReceive+0x17c>)
    1d28:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    1d2a:	4b17      	ldr	r3, [pc, #92]	; (1d88 <xQueueGenericReceive+0x16c>)
    1d2c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1d2e:	1c20      	adds	r0, r4, #0
    1d30:	3024      	adds	r0, #36	; 0x24
    1d32:	9901      	ldr	r1, [sp, #4]
    1d34:	4b19      	ldr	r3, [pc, #100]	; (1d9c <xQueueGenericReceive+0x180>)
    1d36:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1d38:	1c20      	adds	r0, r4, #0
    1d3a:	4b19      	ldr	r3, [pc, #100]	; (1da0 <xQueueGenericReceive+0x184>)
    1d3c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1d3e:	4b19      	ldr	r3, [pc, #100]	; (1da4 <xQueueGenericReceive+0x188>)
    1d40:	4798      	blx	r3
    1d42:	2800      	cmp	r0, #0
    1d44:	d18b      	bne.n	1c5e <xQueueGenericReceive+0x42>
				{
					portYIELD_WITHIN_API();
    1d46:	4b0f      	ldr	r3, [pc, #60]	; (1d84 <xQueueGenericReceive+0x168>)
    1d48:	4798      	blx	r3
    1d4a:	e788      	b.n	1c5e <xQueueGenericReceive+0x42>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1d4c:	1c20      	adds	r0, r4, #0
    1d4e:	4b14      	ldr	r3, [pc, #80]	; (1da0 <xQueueGenericReceive+0x184>)
    1d50:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1d52:	4b14      	ldr	r3, [pc, #80]	; (1da4 <xQueueGenericReceive+0x188>)
    1d54:	4798      	blx	r3
    1d56:	e782      	b.n	1c5e <xQueueGenericReceive+0x42>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1d58:	1c20      	adds	r0, r4, #0
    1d5a:	4b11      	ldr	r3, [pc, #68]	; (1da0 <xQueueGenericReceive+0x184>)
    1d5c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1d5e:	4b11      	ldr	r3, [pc, #68]	; (1da4 <xQueueGenericReceive+0x188>)
    1d60:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1d62:	2000      	movs	r0, #0
		}
	}
}
    1d64:	b005      	add	sp, #20
    1d66:	bc0c      	pop	{r2, r3}
    1d68:	4690      	mov	r8, r2
    1d6a:	4699      	mov	r9, r3
    1d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	00002661 	.word	0x00002661
    1d74:	00000a4d 	.word	0x00000a4d
    1d78:	0000183d 	.word	0x0000183d
    1d7c:	00002655 	.word	0x00002655
    1d80:	00002531 	.word	0x00002531
    1d84:	00000a35 	.word	0x00000a35
    1d88:	00000a65 	.word	0x00000a65
    1d8c:	000025b9 	.word	0x000025b9
    1d90:	000020cd 	.word	0x000020cd
    1d94:	000025d9 	.word	0x000025d9
    1d98:	00002681 	.word	0x00002681
    1d9c:	00002499 	.word	0x00002499
    1da0:	00001865 	.word	0x00001865
    1da4:	00002229 	.word	0x00002229

00001da8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    1da8:	b538      	push	{r3, r4, r5, lr}
    1daa:	1c04      	adds	r4, r0, #0
    1dac:	1c0d      	adds	r5, r1, #0
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1dae:	4b0d      	ldr	r3, [pc, #52]	; (1de4 <vQueueWaitForMessageRestricted+0x3c>)
    1db0:	4798      	blx	r3
    1db2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1db4:	3301      	adds	r3, #1
    1db6:	d101      	bne.n	1dbc <vQueueWaitForMessageRestricted+0x14>
    1db8:	2300      	movs	r3, #0
    1dba:	6463      	str	r3, [r4, #68]	; 0x44
    1dbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1dbe:	3301      	adds	r3, #1
    1dc0:	d101      	bne.n	1dc6 <vQueueWaitForMessageRestricted+0x1e>
    1dc2:	2300      	movs	r3, #0
    1dc4:	64a3      	str	r3, [r4, #72]	; 0x48
    1dc6:	4b08      	ldr	r3, [pc, #32]	; (1de8 <vQueueWaitForMessageRestricted+0x40>)
    1dc8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d104      	bne.n	1dda <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1dd0:	1c20      	adds	r0, r4, #0
    1dd2:	3024      	adds	r0, #36	; 0x24
    1dd4:	1c29      	adds	r1, r5, #0
    1dd6:	4b05      	ldr	r3, [pc, #20]	; (1dec <vQueueWaitForMessageRestricted+0x44>)
    1dd8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1dda:	1c20      	adds	r0, r4, #0
    1ddc:	4b04      	ldr	r3, [pc, #16]	; (1df0 <vQueueWaitForMessageRestricted+0x48>)
    1dde:	4798      	blx	r3
	}
    1de0:	bd38      	pop	{r3, r4, r5, pc}
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	00000a4d 	.word	0x00000a4d
    1de8:	00000a65 	.word	0x00000a65
    1dec:	000024f1 	.word	0x000024f1
    1df0:	00001865 	.word	0x00001865

00001df4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1df4:	4b08      	ldr	r3, [pc, #32]	; (1e18 <prvResetNextTaskUnblockTime+0x24>)
    1df6:	681b      	ldr	r3, [r3, #0]
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d104      	bne.n	1e08 <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1dfe:	2201      	movs	r2, #1
    1e00:	4252      	negs	r2, r2
    1e02:	4b06      	ldr	r3, [pc, #24]	; (1e1c <prvResetNextTaskUnblockTime+0x28>)
    1e04:	601a      	str	r2, [r3, #0]
    1e06:	e006      	b.n	1e16 <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1e08:	4b03      	ldr	r3, [pc, #12]	; (1e18 <prvResetNextTaskUnblockTime+0x24>)
    1e0a:	681b      	ldr	r3, [r3, #0]
    1e0c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    1e0e:	68db      	ldr	r3, [r3, #12]
    1e10:	685a      	ldr	r2, [r3, #4]
    1e12:	4b02      	ldr	r3, [pc, #8]	; (1e1c <prvResetNextTaskUnblockTime+0x28>)
    1e14:	601a      	str	r2, [r3, #0]
	}
}
    1e16:	4770      	bx	lr
    1e18:	200040b4 	.word	0x200040b4
    1e1c:	20000004 	.word	0x20000004

00001e20 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    1e20:	b510      	push	{r4, lr}
    1e22:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1e24:	4b0e      	ldr	r3, [pc, #56]	; (1e60 <prvAddCurrentTaskToDelayedList+0x40>)
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    1e2a:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <prvAddCurrentTaskToDelayedList+0x44>)
    1e2c:	681b      	ldr	r3, [r3, #0]
    1e2e:	4298      	cmp	r0, r3
    1e30:	d207      	bcs.n	1e42 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1e32:	4b0d      	ldr	r3, [pc, #52]	; (1e68 <prvAddCurrentTaskToDelayedList+0x48>)
    1e34:	6818      	ldr	r0, [r3, #0]
    1e36:	4b0a      	ldr	r3, [pc, #40]	; (1e60 <prvAddCurrentTaskToDelayedList+0x40>)
    1e38:	6819      	ldr	r1, [r3, #0]
    1e3a:	3104      	adds	r1, #4
    1e3c:	4b0b      	ldr	r3, [pc, #44]	; (1e6c <prvAddCurrentTaskToDelayedList+0x4c>)
    1e3e:	4798      	blx	r3
    1e40:	e00c      	b.n	1e5c <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1e42:	4b0b      	ldr	r3, [pc, #44]	; (1e70 <prvAddCurrentTaskToDelayedList+0x50>)
    1e44:	6818      	ldr	r0, [r3, #0]
    1e46:	4b06      	ldr	r3, [pc, #24]	; (1e60 <prvAddCurrentTaskToDelayedList+0x40>)
    1e48:	6819      	ldr	r1, [r3, #0]
    1e4a:	3104      	adds	r1, #4
    1e4c:	4b07      	ldr	r3, [pc, #28]	; (1e6c <prvAddCurrentTaskToDelayedList+0x4c>)
    1e4e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1e50:	4b08      	ldr	r3, [pc, #32]	; (1e74 <prvAddCurrentTaskToDelayedList+0x54>)
    1e52:	681b      	ldr	r3, [r3, #0]
    1e54:	429c      	cmp	r4, r3
    1e56:	d201      	bcs.n	1e5c <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1e58:	4b06      	ldr	r3, [pc, #24]	; (1e74 <prvAddCurrentTaskToDelayedList+0x54>)
    1e5a:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1e5c:	bd10      	pop	{r4, pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	20004164 	.word	0x20004164
    1e64:	20004180 	.word	0x20004180
    1e68:	20004184 	.word	0x20004184
    1e6c:	00001721 	.word	0x00001721
    1e70:	200040b4 	.word	0x200040b4
    1e74:	20000004 	.word	0x20000004

00001e78 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e7a:	465f      	mov	r7, fp
    1e7c:	4656      	mov	r6, sl
    1e7e:	464d      	mov	r5, r9
    1e80:	4644      	mov	r4, r8
    1e82:	b4f0      	push	{r4, r5, r6, r7}
    1e84:	1c07      	adds	r7, r0, #0
    1e86:	1c0e      	adds	r6, r1, #0
    1e88:	4691      	mov	r9, r2
    1e8a:	469a      	mov	sl, r3
    1e8c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    1e8e:	2800      	cmp	r0, #0
    1e90:	d101      	bne.n	1e96 <xTaskGenericCreate+0x1e>
    1e92:	b672      	cpsid	i
    1e94:	e7fe      	b.n	1e94 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    1e96:	2d04      	cmp	r5, #4
    1e98:	d901      	bls.n	1e9e <xTaskGenericCreate+0x26>
    1e9a:	b672      	cpsid	i
    1e9c:	e7fe      	b.n	1e9c <xTaskGenericCreate+0x24>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    1e9e:	2040      	movs	r0, #64	; 0x40
    1ea0:	4b5b      	ldr	r3, [pc, #364]	; (2010 <STACK_SIZE+0x10>)
    1ea2:	4798      	blx	r3
    1ea4:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    1ea6:	d100      	bne.n	1eaa <xTaskGenericCreate+0x32>
    1ea8:	e0aa      	b.n	2000 <STACK_SIZE>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1eac:	2a00      	cmp	r2, #0
    1eae:	d000      	beq.n	1eb2 <xTaskGenericCreate+0x3a>
    1eb0:	e092      	b.n	1fd8 <xTaskGenericCreate+0x160>
    1eb2:	464b      	mov	r3, r9
    1eb4:	0098      	lsls	r0, r3, #2
    1eb6:	4b56      	ldr	r3, [pc, #344]	; (2010 <STACK_SIZE+0x10>)
    1eb8:	4798      	blx	r3
    1eba:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    1ebc:	2800      	cmp	r0, #0
    1ebe:	d000      	beq.n	1ec2 <xTaskGenericCreate+0x4a>
    1ec0:	e08c      	b.n	1fdc <xTaskGenericCreate+0x164>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    1ec2:	1c20      	adds	r0, r4, #0
    1ec4:	4b53      	ldr	r3, [pc, #332]	; (2014 <STACK_SIZE+0x14>)
    1ec6:	4798      	blx	r3
    1ec8:	e09a      	b.n	2000 <STACK_SIZE>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    1eca:	5cf1      	ldrb	r1, [r6, r3]
    1ecc:	18e2      	adds	r2, r4, r3
    1ece:	3234      	adds	r2, #52	; 0x34
    1ed0:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1ed2:	5cf2      	ldrb	r2, [r6, r3]
    1ed4:	2a00      	cmp	r2, #0
    1ed6:	d002      	beq.n	1ede <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1ed8:	3301      	adds	r3, #1
    1eda:	2b08      	cmp	r3, #8
    1edc:	d1f5      	bne.n	1eca <xTaskGenericCreate+0x52>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1ede:	2200      	movs	r2, #0
    1ee0:	233b      	movs	r3, #59	; 0x3b
    1ee2:	54e2      	strb	r2, [r4, r3]
    1ee4:	1e2e      	subs	r6, r5, #0
    1ee6:	2e04      	cmp	r6, #4
    1ee8:	d900      	bls.n	1eec <xTaskGenericCreate+0x74>
    1eea:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    1eec:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    1eee:	63e6      	str	r6, [r4, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1ef0:	1d22      	adds	r2, r4, #4
    1ef2:	4690      	mov	r8, r2
    1ef4:	1c10      	adds	r0, r2, #0
    1ef6:	4b48      	ldr	r3, [pc, #288]	; (2018 <STACK_SIZE+0x18>)
    1ef8:	4699      	mov	r9, r3
    1efa:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1efc:	1c20      	adds	r0, r4, #0
    1efe:	3018      	adds	r0, #24
    1f00:	47c8      	blx	r9

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1f02:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f04:	2305      	movs	r3, #5
    1f06:	1b9e      	subs	r6, r3, r6
    1f08:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1f0a:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1f0c:	4658      	mov	r0, fp
    1f0e:	1c39      	adds	r1, r7, #0
    1f10:	4652      	mov	r2, sl
    1f12:	4b42      	ldr	r3, [pc, #264]	; (201c <STACK_SIZE+0x1c>)
    1f14:	4798      	blx	r3
    1f16:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    1f18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	d000      	beq.n	1f20 <xTaskGenericCreate+0xa8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1f1e:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    1f20:	4b3f      	ldr	r3, [pc, #252]	; (2020 <STACK_SIZE+0x20>)
    1f22:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    1f24:	4b3f      	ldr	r3, [pc, #252]	; (2024 <STACK_SIZE+0x24>)
    1f26:	681a      	ldr	r2, [r3, #0]
    1f28:	3201      	adds	r2, #1
    1f2a:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    1f2c:	4b3e      	ldr	r3, [pc, #248]	; (2028 <STACK_SIZE+0x28>)
    1f2e:	681b      	ldr	r3, [r3, #0]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d123      	bne.n	1f7c <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1f34:	4b3c      	ldr	r3, [pc, #240]	; (2028 <STACK_SIZE+0x28>)
    1f36:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1f38:	4b3a      	ldr	r3, [pc, #232]	; (2024 <STACK_SIZE+0x24>)
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	2b01      	cmp	r3, #1
    1f3e:	d128      	bne.n	1f92 <xTaskGenericCreate+0x11a>
    1f40:	4e3a      	ldr	r6, [pc, #232]	; (202c <STACK_SIZE+0x2c>)
    1f42:	2364      	movs	r3, #100	; 0x64
    1f44:	199b      	adds	r3, r3, r6
    1f46:	4699      	mov	r9, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1f48:	4f39      	ldr	r7, [pc, #228]	; (2030 <STACK_SIZE+0x30>)
    1f4a:	1c30      	adds	r0, r6, #0
    1f4c:	47b8      	blx	r7
    1f4e:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1f50:	454e      	cmp	r6, r9
    1f52:	d1fa      	bne.n	1f4a <xTaskGenericCreate+0xd2>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1f54:	4a37      	ldr	r2, [pc, #220]	; (2034 <STACK_SIZE+0x34>)
    1f56:	4691      	mov	r9, r2
    1f58:	1c10      	adds	r0, r2, #0
    1f5a:	4e35      	ldr	r6, [pc, #212]	; (2030 <STACK_SIZE+0x30>)
    1f5c:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    1f5e:	4f36      	ldr	r7, [pc, #216]	; (2038 <STACK_SIZE+0x38>)
    1f60:	1c38      	adds	r0, r7, #0
    1f62:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    1f64:	4835      	ldr	r0, [pc, #212]	; (203c <STACK_SIZE+0x3c>)
    1f66:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1f68:	4835      	ldr	r0, [pc, #212]	; (2040 <STACK_SIZE+0x40>)
    1f6a:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1f6c:	4835      	ldr	r0, [pc, #212]	; (2044 <STACK_SIZE+0x44>)
    1f6e:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1f70:	4b35      	ldr	r3, [pc, #212]	; (2048 <STACK_SIZE+0x48>)
    1f72:	464a      	mov	r2, r9
    1f74:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1f76:	4b35      	ldr	r3, [pc, #212]	; (204c <STACK_SIZE+0x4c>)
    1f78:	601f      	str	r7, [r3, #0]
    1f7a:	e00a      	b.n	1f92 <xTaskGenericCreate+0x11a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1f7c:	4b34      	ldr	r3, [pc, #208]	; (2050 <STACK_SIZE+0x50>)
    1f7e:	681b      	ldr	r3, [r3, #0]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d106      	bne.n	1f92 <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1f84:	4b28      	ldr	r3, [pc, #160]	; (2028 <STACK_SIZE+0x28>)
    1f86:	681b      	ldr	r3, [r3, #0]
    1f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1f8a:	429d      	cmp	r5, r3
    1f8c:	d301      	bcc.n	1f92 <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
    1f8e:	4b26      	ldr	r3, [pc, #152]	; (2028 <STACK_SIZE+0x28>)
    1f90:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    1f92:	4b30      	ldr	r3, [pc, #192]	; (2054 <STACK_SIZE+0x54>)
    1f94:	681a      	ldr	r2, [r3, #0]
    1f96:	3201      	adds	r2, #1
    1f98:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    1f9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1f9c:	4a2e      	ldr	r2, [pc, #184]	; (2058 <STACK_SIZE+0x58>)
    1f9e:	6812      	ldr	r2, [r2, #0]
    1fa0:	4293      	cmp	r3, r2
    1fa2:	d901      	bls.n	1fa8 <xTaskGenericCreate+0x130>
    1fa4:	4a2c      	ldr	r2, [pc, #176]	; (2058 <STACK_SIZE+0x58>)
    1fa6:	6013      	str	r3, [r2, #0]
    1fa8:	009a      	lsls	r2, r3, #2
    1faa:	18d3      	adds	r3, r2, r3
    1fac:	009b      	lsls	r3, r3, #2
    1fae:	481f      	ldr	r0, [pc, #124]	; (202c <STACK_SIZE+0x2c>)
    1fb0:	18c0      	adds	r0, r0, r3
    1fb2:	4641      	mov	r1, r8
    1fb4:	4b29      	ldr	r3, [pc, #164]	; (205c <STACK_SIZE+0x5c>)
    1fb6:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1fb8:	4b29      	ldr	r3, [pc, #164]	; (2060 <STACK_SIZE+0x60>)
    1fba:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    1fbc:	4b24      	ldr	r3, [pc, #144]	; (2050 <STACK_SIZE+0x50>)
    1fbe:	681b      	ldr	r3, [r3, #0]
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    1fc0:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d01e      	beq.n	2004 <STACK_SIZE+0x4>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1fc6:	4b18      	ldr	r3, [pc, #96]	; (2028 <STACK_SIZE+0x28>)
    1fc8:	681b      	ldr	r3, [r3, #0]
    1fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1fcc:	429d      	cmp	r5, r3
    1fce:	d919      	bls.n	2004 <STACK_SIZE+0x4>
			{
				taskYIELD_IF_USING_PREEMPTION();
    1fd0:	4b24      	ldr	r3, [pc, #144]	; (2064 <STACK_SIZE+0x64>)
    1fd2:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    1fd4:	2001      	movs	r0, #1
    1fd6:	e015      	b.n	2004 <STACK_SIZE+0x4>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1fda:	6303      	str	r3, [r0, #48]	; 0x30
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    1fdc:	4a22      	ldr	r2, [pc, #136]	; (2068 <STACK_SIZE+0x68>)
    1fde:	1c13      	adds	r3, r2, #0
    1fe0:	444b      	add	r3, r9
    1fe2:	009b      	lsls	r3, r3, #2
    1fe4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1fe6:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1fe8:	2207      	movs	r2, #7
    1fea:	4393      	bics	r3, r2
    1fec:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    1fee:	7832      	ldrb	r2, [r6, #0]
    1ff0:	2334      	movs	r3, #52	; 0x34
    1ff2:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1ff4:	7833      	ldrb	r3, [r6, #0]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d100      	bne.n	1ffc <xTaskGenericCreate+0x184>
    1ffa:	e770      	b.n	1ede <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1ffc:	2301      	movs	r3, #1
    1ffe:	e764      	b.n	1eca <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2000:	2001      	movs	r0, #1
    2002:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    2004:	bc3c      	pop	{r2, r3, r4, r5}
    2006:	4690      	mov	r8, r2
    2008:	4699      	mov	r9, r3
    200a:	46a2      	mov	sl, r4
    200c:	46ab      	mov	fp, r5
    200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2010:	00000b71 	.word	0x00000b71
    2014:	00000bd9 	.word	0x00000bd9
    2018:	00001701 	.word	0x00001701
    201c:	00000a11 	.word	0x00000a11
    2020:	00000a4d 	.word	0x00000a4d
    2024:	2000418c 	.word	0x2000418c
    2028:	20004164 	.word	0x20004164
    202c:	200040ec 	.word	0x200040ec
    2030:	000016e9 	.word	0x000016e9
    2034:	200040c0 	.word	0x200040c0
    2038:	200040d4 	.word	0x200040d4
    203c:	20004168 	.word	0x20004168
    2040:	20004150 	.word	0x20004150
    2044:	20004190 	.word	0x20004190
    2048:	200040b4 	.word	0x200040b4
    204c:	20004184 	.word	0x20004184
    2050:	200040b8 	.word	0x200040b8
    2054:	20004188 	.word	0x20004188
    2058:	200041a4 	.word	0x200041a4
    205c:	00001709 	.word	0x00001709
    2060:	00000a65 	.word	0x00000a65
    2064:	00000a35 	.word	0x00000a35
    2068:	3fffffff 	.word	0x3fffffff

0000206c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    206c:	b510      	push	{r4, lr}
    206e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2070:	2300      	movs	r3, #0
    2072:	9300      	str	r3, [sp, #0]
    2074:	9301      	str	r3, [sp, #4]
    2076:	9302      	str	r3, [sp, #8]
    2078:	9303      	str	r3, [sp, #12]
    207a:	480d      	ldr	r0, [pc, #52]	; (20b0 <vTaskStartScheduler+0x44>)
    207c:	490d      	ldr	r1, [pc, #52]	; (20b4 <vTaskStartScheduler+0x48>)
    207e:	2264      	movs	r2, #100	; 0x64
    2080:	4c0d      	ldr	r4, [pc, #52]	; (20b8 <vTaskStartScheduler+0x4c>)
    2082:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2084:	2801      	cmp	r0, #1
    2086:	d10d      	bne.n	20a4 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    2088:	4b0c      	ldr	r3, [pc, #48]	; (20bc <vTaskStartScheduler+0x50>)
    208a:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    208c:	2801      	cmp	r0, #1
    208e:	d109      	bne.n	20a4 <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    2090:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2092:	2201      	movs	r2, #1
    2094:	4b0a      	ldr	r3, [pc, #40]	; (20c0 <vTaskStartScheduler+0x54>)
    2096:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    2098:	2200      	movs	r2, #0
    209a:	4b0a      	ldr	r3, [pc, #40]	; (20c4 <vTaskStartScheduler+0x58>)
    209c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    209e:	4b0a      	ldr	r3, [pc, #40]	; (20c8 <vTaskStartScheduler+0x5c>)
    20a0:	4798      	blx	r3
    20a2:	e003      	b.n	20ac <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    20a4:	2800      	cmp	r0, #0
    20a6:	d101      	bne.n	20ac <vTaskStartScheduler+0x40>
    20a8:	b672      	cpsid	i
    20aa:	e7fe      	b.n	20aa <vTaskStartScheduler+0x3e>
	}
}
    20ac:	b004      	add	sp, #16
    20ae:	bd10      	pop	{r4, pc}
    20b0:	0000237d 	.word	0x0000237d
    20b4:	00005400 	.word	0x00005400
    20b8:	00001e79 	.word	0x00001e79
    20bc:	00002805 	.word	0x00002805
    20c0:	200040b8 	.word	0x200040b8
    20c4:	20004180 	.word	0x20004180
    20c8:	00000b31 	.word	0x00000b31

000020cc <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    20cc:	4b02      	ldr	r3, [pc, #8]	; (20d8 <vTaskSuspendAll+0xc>)
    20ce:	681a      	ldr	r2, [r3, #0]
    20d0:	3201      	adds	r2, #1
    20d2:	601a      	str	r2, [r3, #0]
}
    20d4:	4770      	bx	lr
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	2000417c 	.word	0x2000417c

000020dc <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    20dc:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    20de:	4b04      	ldr	r3, [pc, #16]	; (20f0 <xTaskGetTickCount+0x14>)
    20e0:	4798      	blx	r3
	{
		xTicks = xTickCount;
    20e2:	4b04      	ldr	r3, [pc, #16]	; (20f4 <xTaskGetTickCount+0x18>)
    20e4:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    20e6:	4b04      	ldr	r3, [pc, #16]	; (20f8 <xTaskGetTickCount+0x1c>)
    20e8:	4798      	blx	r3

	return xTicks;
}
    20ea:	1c20      	adds	r0, r4, #0
    20ec:	bd10      	pop	{r4, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	00000a4d 	.word	0x00000a4d
    20f4:	20004180 	.word	0x20004180
    20f8:	00000a65 	.word	0x00000a65

000020fc <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    20fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fe:	4647      	mov	r7, r8
    2100:	b480      	push	{r7}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2102:	4b3b      	ldr	r3, [pc, #236]	; (21f0 <xTaskIncrementTick+0xf4>)
    2104:	681b      	ldr	r3, [r3, #0]
    2106:	2b00      	cmp	r3, #0
    2108:	d161      	bne.n	21ce <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    210a:	4b3a      	ldr	r3, [pc, #232]	; (21f4 <xTaskIncrementTick+0xf8>)
    210c:	681a      	ldr	r2, [r3, #0]
    210e:	3201      	adds	r2, #1
    2110:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    2112:	681f      	ldr	r7, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    2114:	2f00      	cmp	r7, #0
    2116:	d112      	bne.n	213e <xTaskIncrementTick+0x42>
			{
				taskSWITCH_DELAYED_LISTS();
    2118:	4b37      	ldr	r3, [pc, #220]	; (21f8 <xTaskIncrementTick+0xfc>)
    211a:	681b      	ldr	r3, [r3, #0]
    211c:	681b      	ldr	r3, [r3, #0]
    211e:	2b00      	cmp	r3, #0
    2120:	d001      	beq.n	2126 <xTaskIncrementTick+0x2a>
    2122:	b672      	cpsid	i
    2124:	e7fe      	b.n	2124 <xTaskIncrementTick+0x28>
    2126:	4a34      	ldr	r2, [pc, #208]	; (21f8 <xTaskIncrementTick+0xfc>)
    2128:	6811      	ldr	r1, [r2, #0]
    212a:	4b34      	ldr	r3, [pc, #208]	; (21fc <xTaskIncrementTick+0x100>)
    212c:	6818      	ldr	r0, [r3, #0]
    212e:	6010      	str	r0, [r2, #0]
    2130:	6019      	str	r1, [r3, #0]
    2132:	4b33      	ldr	r3, [pc, #204]	; (2200 <xTaskIncrementTick+0x104>)
    2134:	681a      	ldr	r2, [r3, #0]
    2136:	3201      	adds	r2, #1
    2138:	601a      	str	r2, [r3, #0]
    213a:	4b32      	ldr	r3, [pc, #200]	; (2204 <xTaskIncrementTick+0x108>)
    213c:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    213e:	4b32      	ldr	r3, [pc, #200]	; (2208 <xTaskIncrementTick+0x10c>)
    2140:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    2142:	2400      	movs	r4, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2144:	429f      	cmp	r7, r3
    2146:	d337      	bcc.n	21b8 <xTaskIncrementTick+0xbc>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2148:	4e2b      	ldr	r6, [pc, #172]	; (21f8 <xTaskIncrementTick+0xfc>)
    214a:	e000      	b.n	214e <xTaskIncrementTick+0x52>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    214c:	2401      	movs	r4, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    214e:	6833      	ldr	r3, [r6, #0]
    2150:	681b      	ldr	r3, [r3, #0]
    2152:	2b00      	cmp	r3, #0
    2154:	d104      	bne.n	2160 <xTaskIncrementTick+0x64>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    2156:	2201      	movs	r2, #1
    2158:	4252      	negs	r2, r2
    215a:	4b2b      	ldr	r3, [pc, #172]	; (2208 <xTaskIncrementTick+0x10c>)
    215c:	601a      	str	r2, [r3, #0]
						break;
    215e:	e02b      	b.n	21b8 <xTaskIncrementTick+0xbc>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2160:	4a25      	ldr	r2, [pc, #148]	; (21f8 <xTaskIncrementTick+0xfc>)
    2162:	6813      	ldr	r3, [r2, #0]
    2164:	68db      	ldr	r3, [r3, #12]
    2166:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2168:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    216a:	429f      	cmp	r7, r3
    216c:	d202      	bcs.n	2174 <xTaskIncrementTick+0x78>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    216e:	4a26      	ldr	r2, [pc, #152]	; (2208 <xTaskIncrementTick+0x10c>)
    2170:	6013      	str	r3, [r2, #0]
							break;
    2172:	e021      	b.n	21b8 <xTaskIncrementTick+0xbc>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2174:	1d2b      	adds	r3, r5, #4
    2176:	4698      	mov	r8, r3
    2178:	1c18      	adds	r0, r3, #0
    217a:	4a24      	ldr	r2, [pc, #144]	; (220c <xTaskIncrementTick+0x110>)
    217c:	4790      	blx	r2

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    217e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2180:	2b00      	cmp	r3, #0
    2182:	d003      	beq.n	218c <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2184:	1c28      	adds	r0, r5, #0
    2186:	3018      	adds	r0, #24
    2188:	4b20      	ldr	r3, [pc, #128]	; (220c <xTaskIncrementTick+0x110>)
    218a:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    218c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    218e:	4a20      	ldr	r2, [pc, #128]	; (2210 <xTaskIncrementTick+0x114>)
    2190:	6812      	ldr	r2, [r2, #0]
    2192:	4293      	cmp	r3, r2
    2194:	d901      	bls.n	219a <xTaskIncrementTick+0x9e>
    2196:	4a1e      	ldr	r2, [pc, #120]	; (2210 <xTaskIncrementTick+0x114>)
    2198:	6013      	str	r3, [r2, #0]
    219a:	009a      	lsls	r2, r3, #2
    219c:	18d3      	adds	r3, r2, r3
    219e:	009b      	lsls	r3, r3, #2
    21a0:	481c      	ldr	r0, [pc, #112]	; (2214 <xTaskIncrementTick+0x118>)
    21a2:	18c0      	adds	r0, r0, r3
    21a4:	4641      	mov	r1, r8
    21a6:	4b1c      	ldr	r3, [pc, #112]	; (2218 <xTaskIncrementTick+0x11c>)
    21a8:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    21aa:	4b1c      	ldr	r3, [pc, #112]	; (221c <xTaskIncrementTick+0x120>)
    21ac:	681b      	ldr	r3, [r3, #0]
    21ae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    21b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21b2:	429a      	cmp	r2, r3
    21b4:	d2ca      	bcs.n	214c <xTaskIncrementTick+0x50>
    21b6:	e7ca      	b.n	214e <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    21b8:	4b18      	ldr	r3, [pc, #96]	; (221c <xTaskIncrementTick+0x120>)
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21be:	009a      	lsls	r2, r3, #2
    21c0:	18d3      	adds	r3, r2, r3
    21c2:	009b      	lsls	r3, r3, #2
    21c4:	4a13      	ldr	r2, [pc, #76]	; (2214 <xTaskIncrementTick+0x118>)
    21c6:	589b      	ldr	r3, [r3, r2]
    21c8:	2b01      	cmp	r3, #1
    21ca:	d806      	bhi.n	21da <xTaskIncrementTick+0xde>
    21cc:	e006      	b.n	21dc <xTaskIncrementTick+0xe0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    21ce:	4b14      	ldr	r3, [pc, #80]	; (2220 <xTaskIncrementTick+0x124>)
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	3201      	adds	r2, #1
    21d4:	601a      	str	r2, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    21d6:	2400      	movs	r4, #0
    21d8:	e000      	b.n	21dc <xTaskIncrementTick+0xe0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    21da:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    21dc:	4b11      	ldr	r3, [pc, #68]	; (2224 <xTaskIncrementTick+0x128>)
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	2b00      	cmp	r3, #0
    21e2:	d000      	beq.n	21e6 <xTaskIncrementTick+0xea>
		{
			xSwitchRequired = pdTRUE;
    21e4:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    21e6:	1c20      	adds	r0, r4, #0
    21e8:	bc04      	pop	{r2}
    21ea:	4690      	mov	r8, r2
    21ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	2000417c 	.word	0x2000417c
    21f4:	20004180 	.word	0x20004180
    21f8:	200040b4 	.word	0x200040b4
    21fc:	20004184 	.word	0x20004184
    2200:	200040b0 	.word	0x200040b0
    2204:	00001df5 	.word	0x00001df5
    2208:	20000004 	.word	0x20000004
    220c:	00001751 	.word	0x00001751
    2210:	200041a4 	.word	0x200041a4
    2214:	200040ec 	.word	0x200040ec
    2218:	00001709 	.word	0x00001709
    221c:	20004164 	.word	0x20004164
    2220:	200040e8 	.word	0x200040e8
    2224:	200041a8 	.word	0x200041a8

00002228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    222a:	4b2f      	ldr	r3, [pc, #188]	; (22e8 <xTaskResumeAll+0xc0>)
    222c:	681b      	ldr	r3, [r3, #0]
    222e:	2b00      	cmp	r3, #0
    2230:	d101      	bne.n	2236 <xTaskResumeAll+0xe>
    2232:	b672      	cpsid	i
    2234:	e7fe      	b.n	2234 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2236:	4b2d      	ldr	r3, [pc, #180]	; (22ec <xTaskResumeAll+0xc4>)
    2238:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    223a:	4b2b      	ldr	r3, [pc, #172]	; (22e8 <xTaskResumeAll+0xc0>)
    223c:	681a      	ldr	r2, [r3, #0]
    223e:	3a01      	subs	r2, #1
    2240:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2242:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2244:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2246:	2b00      	cmp	r3, #0
    2248:	d149      	bne.n	22de <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    224a:	4b29      	ldr	r3, [pc, #164]	; (22f0 <xTaskResumeAll+0xc8>)
    224c:	681b      	ldr	r3, [r3, #0]
    224e:	2b00      	cmp	r3, #0
    2250:	d045      	beq.n	22de <xTaskResumeAll+0xb6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2252:	4d28      	ldr	r5, [pc, #160]	; (22f4 <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2254:	1c2f      	adds	r7, r5, #0
    2256:	e021      	b.n	229c <xTaskResumeAll+0x74>
    2258:	68fb      	ldr	r3, [r7, #12]
    225a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    225c:	1c20      	adds	r0, r4, #0
    225e:	3018      	adds	r0, #24
    2260:	4b25      	ldr	r3, [pc, #148]	; (22f8 <xTaskResumeAll+0xd0>)
    2262:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2264:	1d26      	adds	r6, r4, #4
    2266:	1c30      	adds	r0, r6, #0
    2268:	4b23      	ldr	r3, [pc, #140]	; (22f8 <xTaskResumeAll+0xd0>)
    226a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    226c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    226e:	4a23      	ldr	r2, [pc, #140]	; (22fc <xTaskResumeAll+0xd4>)
    2270:	6812      	ldr	r2, [r2, #0]
    2272:	4293      	cmp	r3, r2
    2274:	d901      	bls.n	227a <xTaskResumeAll+0x52>
    2276:	4a21      	ldr	r2, [pc, #132]	; (22fc <xTaskResumeAll+0xd4>)
    2278:	6013      	str	r3, [r2, #0]
    227a:	009a      	lsls	r2, r3, #2
    227c:	18d3      	adds	r3, r2, r3
    227e:	009b      	lsls	r3, r3, #2
    2280:	481f      	ldr	r0, [pc, #124]	; (2300 <xTaskResumeAll+0xd8>)
    2282:	18c0      	adds	r0, r0, r3
    2284:	1c31      	adds	r1, r6, #0
    2286:	4b1f      	ldr	r3, [pc, #124]	; (2304 <xTaskResumeAll+0xdc>)
    2288:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    228a:	4b1f      	ldr	r3, [pc, #124]	; (2308 <xTaskResumeAll+0xe0>)
    228c:	681b      	ldr	r3, [r3, #0]
    228e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2292:	429a      	cmp	r2, r3
    2294:	d302      	bcc.n	229c <xTaskResumeAll+0x74>
					{
						xYieldPending = pdTRUE;
    2296:	2201      	movs	r2, #1
    2298:	4b1c      	ldr	r3, [pc, #112]	; (230c <xTaskResumeAll+0xe4>)
    229a:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    229c:	682b      	ldr	r3, [r5, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d1da      	bne.n	2258 <xTaskResumeAll+0x30>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    22a2:	4b1b      	ldr	r3, [pc, #108]	; (2310 <xTaskResumeAll+0xe8>)
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	2b00      	cmp	r3, #0
    22a8:	d011      	beq.n	22ce <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    22aa:	4b19      	ldr	r3, [pc, #100]	; (2310 <xTaskResumeAll+0xe8>)
    22ac:	681b      	ldr	r3, [r3, #0]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d00d      	beq.n	22ce <xTaskResumeAll+0xa6>
					{
						if( xTaskIncrementTick() != pdFALSE )
    22b2:	4e18      	ldr	r6, [pc, #96]	; (2314 <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    22b4:	4d15      	ldr	r5, [pc, #84]	; (230c <xTaskResumeAll+0xe4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    22b6:	4c16      	ldr	r4, [pc, #88]	; (2310 <xTaskResumeAll+0xe8>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    22b8:	47b0      	blx	r6
    22ba:	2800      	cmp	r0, #0
    22bc:	d001      	beq.n	22c2 <xTaskResumeAll+0x9a>
						{
							xYieldPending = pdTRUE;
    22be:	2301      	movs	r3, #1
    22c0:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    22c2:	6823      	ldr	r3, [r4, #0]
    22c4:	3b01      	subs	r3, #1
    22c6:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    22c8:	6823      	ldr	r3, [r4, #0]
    22ca:	2b00      	cmp	r3, #0
    22cc:	d1f4      	bne.n	22b8 <xTaskResumeAll+0x90>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    22ce:	4b0f      	ldr	r3, [pc, #60]	; (230c <xTaskResumeAll+0xe4>)
    22d0:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    22d2:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    22d4:	2b01      	cmp	r3, #1
    22d6:	d102      	bne.n	22de <xTaskResumeAll+0xb6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    22d8:	4b0f      	ldr	r3, [pc, #60]	; (2318 <xTaskResumeAll+0xf0>)
    22da:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    22dc:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    22de:	4b0f      	ldr	r3, [pc, #60]	; (231c <xTaskResumeAll+0xf4>)
    22e0:	4798      	blx	r3

	return xAlreadyYielded;
}
    22e2:	1c20      	adds	r0, r4, #0
    22e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	2000417c 	.word	0x2000417c
    22ec:	00000a4d 	.word	0x00000a4d
    22f0:	2000418c 	.word	0x2000418c
    22f4:	20004168 	.word	0x20004168
    22f8:	00001751 	.word	0x00001751
    22fc:	200041a4 	.word	0x200041a4
    2300:	200040ec 	.word	0x200040ec
    2304:	00001709 	.word	0x00001709
    2308:	20004164 	.word	0x20004164
    230c:	200041a8 	.word	0x200041a8
    2310:	200040e8 	.word	0x200040e8
    2314:	000020fd 	.word	0x000020fd
    2318:	00000a35 	.word	0x00000a35
    231c:	00000a65 	.word	0x00000a65

00002320 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2320:	b510      	push	{r4, lr}
    2322:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2324:	d016      	beq.n	2354 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    2326:	4b0d      	ldr	r3, [pc, #52]	; (235c <vTaskDelay+0x3c>)
    2328:	681b      	ldr	r3, [r3, #0]
    232a:	2b00      	cmp	r3, #0
    232c:	d001      	beq.n	2332 <vTaskDelay+0x12>
    232e:	b672      	cpsid	i
    2330:	e7fe      	b.n	2330 <vTaskDelay+0x10>
			vTaskSuspendAll();
    2332:	4b0b      	ldr	r3, [pc, #44]	; (2360 <vTaskDelay+0x40>)
    2334:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2336:	4b0b      	ldr	r3, [pc, #44]	; (2364 <vTaskDelay+0x44>)
    2338:	681b      	ldr	r3, [r3, #0]
    233a:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    233c:	4b0a      	ldr	r3, [pc, #40]	; (2368 <vTaskDelay+0x48>)
    233e:	6818      	ldr	r0, [r3, #0]
    2340:	3004      	adds	r0, #4
    2342:	4b0a      	ldr	r3, [pc, #40]	; (236c <vTaskDelay+0x4c>)
    2344:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2346:	1c20      	adds	r0, r4, #0
    2348:	4b09      	ldr	r3, [pc, #36]	; (2370 <vTaskDelay+0x50>)
    234a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    234c:	4b09      	ldr	r3, [pc, #36]	; (2374 <vTaskDelay+0x54>)
    234e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2350:	2800      	cmp	r0, #0
    2352:	d101      	bne.n	2358 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    2354:	4b08      	ldr	r3, [pc, #32]	; (2378 <vTaskDelay+0x58>)
    2356:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2358:	bd10      	pop	{r4, pc}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	2000417c 	.word	0x2000417c
    2360:	000020cd 	.word	0x000020cd
    2364:	20004180 	.word	0x20004180
    2368:	20004164 	.word	0x20004164
    236c:	00001751 	.word	0x00001751
    2370:	00001e21 	.word	0x00001e21
    2374:	00002229 	.word	0x00002229
    2378:	00000a35 	.word	0x00000a35

0000237c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    237e:	4e15      	ldr	r6, [pc, #84]	; (23d4 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2380:	4f15      	ldr	r7, [pc, #84]	; (23d8 <prvIdleTask+0x5c>)
    2382:	e01e      	b.n	23c2 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    2384:	4b15      	ldr	r3, [pc, #84]	; (23dc <prvIdleTask+0x60>)
    2386:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2388:	4b15      	ldr	r3, [pc, #84]	; (23e0 <prvIdleTask+0x64>)
    238a:	681c      	ldr	r4, [r3, #0]
			}
			( void ) xTaskResumeAll();
    238c:	4b15      	ldr	r3, [pc, #84]	; (23e4 <prvIdleTask+0x68>)
    238e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    2390:	2c00      	cmp	r4, #0
    2392:	d016      	beq.n	23c2 <prvIdleTask+0x46>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    2394:	4b14      	ldr	r3, [pc, #80]	; (23e8 <prvIdleTask+0x6c>)
    2396:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2398:	4b11      	ldr	r3, [pc, #68]	; (23e0 <prvIdleTask+0x64>)
    239a:	68db      	ldr	r3, [r3, #12]
    239c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    239e:	1d20      	adds	r0, r4, #4
    23a0:	4b12      	ldr	r3, [pc, #72]	; (23ec <prvIdleTask+0x70>)
    23a2:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    23a4:	4b12      	ldr	r3, [pc, #72]	; (23f0 <prvIdleTask+0x74>)
    23a6:	681a      	ldr	r2, [r3, #0]
    23a8:	3a01      	subs	r2, #1
    23aa:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    23ac:	4b09      	ldr	r3, [pc, #36]	; (23d4 <prvIdleTask+0x58>)
    23ae:	681a      	ldr	r2, [r3, #0]
    23b0:	3a01      	subs	r2, #1
    23b2:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    23b4:	4b0f      	ldr	r3, [pc, #60]	; (23f4 <prvIdleTask+0x78>)
    23b6:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    23b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    23ba:	4d0f      	ldr	r5, [pc, #60]	; (23f8 <prvIdleTask+0x7c>)
    23bc:	47a8      	blx	r5
		vPortFree( pxTCB );
    23be:	1c20      	adds	r0, r4, #0
    23c0:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    23c2:	6833      	ldr	r3, [r6, #0]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d1dd      	bne.n	2384 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    23c8:	683b      	ldr	r3, [r7, #0]
    23ca:	2b01      	cmp	r3, #1
    23cc:	d9f9      	bls.n	23c2 <prvIdleTask+0x46>
			{
				taskYIELD();
    23ce:	4b0b      	ldr	r3, [pc, #44]	; (23fc <prvIdleTask+0x80>)
    23d0:	4798      	blx	r3
    23d2:	e7f6      	b.n	23c2 <prvIdleTask+0x46>
    23d4:	200040bc 	.word	0x200040bc
    23d8:	200040ec 	.word	0x200040ec
    23dc:	000020cd 	.word	0x000020cd
    23e0:	20004150 	.word	0x20004150
    23e4:	00002229 	.word	0x00002229
    23e8:	00000a4d 	.word	0x00000a4d
    23ec:	00001751 	.word	0x00001751
    23f0:	2000418c 	.word	0x2000418c
    23f4:	00000a65 	.word	0x00000a65
    23f8:	00000bd9 	.word	0x00000bd9
    23fc:	00000a35 	.word	0x00000a35

00002400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2400:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2402:	4b20      	ldr	r3, [pc, #128]	; (2484 <vTaskSwitchContext+0x84>)
    2404:	681b      	ldr	r3, [r3, #0]
    2406:	2b00      	cmp	r3, #0
    2408:	d003      	beq.n	2412 <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    240a:	2201      	movs	r2, #1
    240c:	4b1e      	ldr	r3, [pc, #120]	; (2488 <vTaskSwitchContext+0x88>)
    240e:	601a      	str	r2, [r3, #0]
    2410:	e036      	b.n	2480 <vTaskSwitchContext+0x80>
	}
	else
	{
		xYieldPending = pdFALSE;
    2412:	2200      	movs	r2, #0
    2414:	4b1c      	ldr	r3, [pc, #112]	; (2488 <vTaskSwitchContext+0x88>)
    2416:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    2418:	4b1c      	ldr	r3, [pc, #112]	; (248c <vTaskSwitchContext+0x8c>)
    241a:	681b      	ldr	r3, [r3, #0]
    241c:	009a      	lsls	r2, r3, #2
    241e:	18d3      	adds	r3, r2, r3
    2420:	009b      	lsls	r3, r3, #2
    2422:	4a1b      	ldr	r2, [pc, #108]	; (2490 <vTaskSwitchContext+0x90>)
    2424:	589b      	ldr	r3, [r3, r2]
    2426:	2b00      	cmp	r3, #0
    2428:	d116      	bne.n	2458 <vTaskSwitchContext+0x58>
    242a:	4b18      	ldr	r3, [pc, #96]	; (248c <vTaskSwitchContext+0x8c>)
    242c:	681b      	ldr	r3, [r3, #0]
    242e:	2b00      	cmp	r3, #0
    2430:	d105      	bne.n	243e <vTaskSwitchContext+0x3e>
    2432:	e002      	b.n	243a <vTaskSwitchContext+0x3a>
    2434:	6802      	ldr	r2, [r0, #0]
    2436:	2a00      	cmp	r2, #0
    2438:	d104      	bne.n	2444 <vTaskSwitchContext+0x44>
    243a:	b672      	cpsid	i
    243c:	e7fe      	b.n	243c <vTaskSwitchContext+0x3c>
    243e:	4b13      	ldr	r3, [pc, #76]	; (248c <vTaskSwitchContext+0x8c>)
    2440:	4c13      	ldr	r4, [pc, #76]	; (2490 <vTaskSwitchContext+0x90>)
    2442:	1c18      	adds	r0, r3, #0
    2444:	681a      	ldr	r2, [r3, #0]
    2446:	3a01      	subs	r2, #1
    2448:	601a      	str	r2, [r3, #0]
    244a:	681a      	ldr	r2, [r3, #0]
    244c:	0091      	lsls	r1, r2, #2
    244e:	188a      	adds	r2, r1, r2
    2450:	0092      	lsls	r2, r2, #2
    2452:	5912      	ldr	r2, [r2, r4]
    2454:	2a00      	cmp	r2, #0
    2456:	d0ed      	beq.n	2434 <vTaskSwitchContext+0x34>
    2458:	4b0c      	ldr	r3, [pc, #48]	; (248c <vTaskSwitchContext+0x8c>)
    245a:	681b      	ldr	r3, [r3, #0]
    245c:	009a      	lsls	r2, r3, #2
    245e:	18d3      	adds	r3, r2, r3
    2460:	009b      	lsls	r3, r3, #2
    2462:	4a0b      	ldr	r2, [pc, #44]	; (2490 <vTaskSwitchContext+0x90>)
    2464:	18d3      	adds	r3, r2, r3
    2466:	685a      	ldr	r2, [r3, #4]
    2468:	6852      	ldr	r2, [r2, #4]
    246a:	605a      	str	r2, [r3, #4]
    246c:	1c19      	adds	r1, r3, #0
    246e:	3108      	adds	r1, #8
    2470:	428a      	cmp	r2, r1
    2472:	d101      	bne.n	2478 <vTaskSwitchContext+0x78>
    2474:	6852      	ldr	r2, [r2, #4]
    2476:	605a      	str	r2, [r3, #4]
    2478:	685b      	ldr	r3, [r3, #4]
    247a:	68da      	ldr	r2, [r3, #12]
    247c:	4b05      	ldr	r3, [pc, #20]	; (2494 <vTaskSwitchContext+0x94>)
    247e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2480:	bd10      	pop	{r4, pc}
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	2000417c 	.word	0x2000417c
    2488:	200041a8 	.word	0x200041a8
    248c:	200041a4 	.word	0x200041a4
    2490:	200040ec 	.word	0x200040ec
    2494:	20004164 	.word	0x20004164

00002498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    2498:	b538      	push	{r3, r4, r5, lr}
    249a:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    249c:	2800      	cmp	r0, #0
    249e:	d101      	bne.n	24a4 <vTaskPlaceOnEventList+0xc>
    24a0:	b672      	cpsid	i
    24a2:	e7fe      	b.n	24a2 <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    24a4:	4d0b      	ldr	r5, [pc, #44]	; (24d4 <vTaskPlaceOnEventList+0x3c>)
    24a6:	6829      	ldr	r1, [r5, #0]
    24a8:	3118      	adds	r1, #24
    24aa:	4b0b      	ldr	r3, [pc, #44]	; (24d8 <vTaskPlaceOnEventList+0x40>)
    24ac:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    24ae:	6828      	ldr	r0, [r5, #0]
    24b0:	3004      	adds	r0, #4
    24b2:	4b0a      	ldr	r3, [pc, #40]	; (24dc <vTaskPlaceOnEventList+0x44>)
    24b4:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    24b6:	1c63      	adds	r3, r4, #1
    24b8:	d106      	bne.n	24c8 <vTaskPlaceOnEventList+0x30>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    24ba:	4b06      	ldr	r3, [pc, #24]	; (24d4 <vTaskPlaceOnEventList+0x3c>)
    24bc:	6819      	ldr	r1, [r3, #0]
    24be:	3104      	adds	r1, #4
    24c0:	4807      	ldr	r0, [pc, #28]	; (24e0 <vTaskPlaceOnEventList+0x48>)
    24c2:	4b08      	ldr	r3, [pc, #32]	; (24e4 <vTaskPlaceOnEventList+0x4c>)
    24c4:	4798      	blx	r3
    24c6:	e004      	b.n	24d2 <vTaskPlaceOnEventList+0x3a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    24c8:	4b07      	ldr	r3, [pc, #28]	; (24e8 <vTaskPlaceOnEventList+0x50>)
    24ca:	6818      	ldr	r0, [r3, #0]
    24cc:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    24ce:	4b07      	ldr	r3, [pc, #28]	; (24ec <vTaskPlaceOnEventList+0x54>)
    24d0:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    24d2:	bd38      	pop	{r3, r4, r5, pc}
    24d4:	20004164 	.word	0x20004164
    24d8:	00001721 	.word	0x00001721
    24dc:	00001751 	.word	0x00001751
    24e0:	20004190 	.word	0x20004190
    24e4:	00001709 	.word	0x00001709
    24e8:	20004180 	.word	0x20004180
    24ec:	00001e21 	.word	0x00001e21

000024f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    24f0:	b538      	push	{r3, r4, r5, lr}
    24f2:	1c0d      	adds	r5, r1, #0
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    24f4:	2800      	cmp	r0, #0
    24f6:	d101      	bne.n	24fc <vTaskPlaceOnEventListRestricted+0xc>
    24f8:	b672      	cpsid	i
    24fa:	e7fe      	b.n	24fa <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    24fc:	4c07      	ldr	r4, [pc, #28]	; (251c <vTaskPlaceOnEventListRestricted+0x2c>)
    24fe:	6821      	ldr	r1, [r4, #0]
    2500:	3118      	adds	r1, #24
    2502:	4b07      	ldr	r3, [pc, #28]	; (2520 <vTaskPlaceOnEventListRestricted+0x30>)
    2504:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2506:	6820      	ldr	r0, [r4, #0]
    2508:	3004      	adds	r0, #4
    250a:	4b06      	ldr	r3, [pc, #24]	; (2524 <vTaskPlaceOnEventListRestricted+0x34>)
    250c:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    250e:	4b06      	ldr	r3, [pc, #24]	; (2528 <vTaskPlaceOnEventListRestricted+0x38>)
    2510:	6818      	ldr	r0, [r3, #0]
    2512:	1828      	adds	r0, r5, r0

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    2514:	4b05      	ldr	r3, [pc, #20]	; (252c <vTaskPlaceOnEventListRestricted+0x3c>)
    2516:	4798      	blx	r3
	}
    2518:	bd38      	pop	{r3, r4, r5, pc}
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	20004164 	.word	0x20004164
    2520:	00001709 	.word	0x00001709
    2524:	00001751 	.word	0x00001751
    2528:	20004180 	.word	0x20004180
    252c:	00001e21 	.word	0x00001e21

00002530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    2530:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2532:	68c3      	ldr	r3, [r0, #12]
    2534:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2536:	2c00      	cmp	r4, #0
    2538:	d101      	bne.n	253e <xTaskRemoveFromEventList+0xe>
    253a:	b672      	cpsid	i
    253c:	e7fe      	b.n	253c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    253e:	1c25      	adds	r5, r4, #0
    2540:	3518      	adds	r5, #24
    2542:	1c28      	adds	r0, r5, #0
    2544:	4b14      	ldr	r3, [pc, #80]	; (2598 <xTaskRemoveFromEventList+0x68>)
    2546:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2548:	4b14      	ldr	r3, [pc, #80]	; (259c <xTaskRemoveFromEventList+0x6c>)
    254a:	681b      	ldr	r3, [r3, #0]
    254c:	2b00      	cmp	r3, #0
    254e:	d113      	bne.n	2578 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2550:	1d25      	adds	r5, r4, #4
    2552:	1c28      	adds	r0, r5, #0
    2554:	4b10      	ldr	r3, [pc, #64]	; (2598 <xTaskRemoveFromEventList+0x68>)
    2556:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2558:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    255a:	4a11      	ldr	r2, [pc, #68]	; (25a0 <xTaskRemoveFromEventList+0x70>)
    255c:	6812      	ldr	r2, [r2, #0]
    255e:	4293      	cmp	r3, r2
    2560:	d901      	bls.n	2566 <xTaskRemoveFromEventList+0x36>
    2562:	4a0f      	ldr	r2, [pc, #60]	; (25a0 <xTaskRemoveFromEventList+0x70>)
    2564:	6013      	str	r3, [r2, #0]
    2566:	009a      	lsls	r2, r3, #2
    2568:	18d3      	adds	r3, r2, r3
    256a:	009b      	lsls	r3, r3, #2
    256c:	480d      	ldr	r0, [pc, #52]	; (25a4 <xTaskRemoveFromEventList+0x74>)
    256e:	18c0      	adds	r0, r0, r3
    2570:	1c29      	adds	r1, r5, #0
    2572:	4b0d      	ldr	r3, [pc, #52]	; (25a8 <xTaskRemoveFromEventList+0x78>)
    2574:	4798      	blx	r3
    2576:	e003      	b.n	2580 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2578:	480c      	ldr	r0, [pc, #48]	; (25ac <xTaskRemoveFromEventList+0x7c>)
    257a:	1c29      	adds	r1, r5, #0
    257c:	4b0a      	ldr	r3, [pc, #40]	; (25a8 <xTaskRemoveFromEventList+0x78>)
    257e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2580:	4b0b      	ldr	r3, [pc, #44]	; (25b0 <xTaskRemoveFromEventList+0x80>)
    2582:	681b      	ldr	r3, [r3, #0]
    2584:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    2588:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    258a:	429a      	cmp	r2, r3
    258c:	d903      	bls.n	2596 <xTaskRemoveFromEventList+0x66>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    258e:	2201      	movs	r2, #1
    2590:	4b08      	ldr	r3, [pc, #32]	; (25b4 <xTaskRemoveFromEventList+0x84>)
    2592:	601a      	str	r2, [r3, #0]
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    2594:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    2596:	bd38      	pop	{r3, r4, r5, pc}
    2598:	00001751 	.word	0x00001751
    259c:	2000417c 	.word	0x2000417c
    25a0:	200041a4 	.word	0x200041a4
    25a4:	200040ec 	.word	0x200040ec
    25a8:	00001709 	.word	0x00001709
    25ac:	20004168 	.word	0x20004168
    25b0:	20004164 	.word	0x20004164
    25b4:	200041a8 	.word	0x200041a8

000025b8 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    25b8:	2800      	cmp	r0, #0
    25ba:	d101      	bne.n	25c0 <vTaskSetTimeOutState+0x8>
    25bc:	b672      	cpsid	i
    25be:	e7fe      	b.n	25be <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    25c0:	4b03      	ldr	r3, [pc, #12]	; (25d0 <vTaskSetTimeOutState+0x18>)
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    25c6:	4b03      	ldr	r3, [pc, #12]	; (25d4 <vTaskSetTimeOutState+0x1c>)
    25c8:	681b      	ldr	r3, [r3, #0]
    25ca:	6043      	str	r3, [r0, #4]
}
    25cc:	4770      	bx	lr
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	200040b0 	.word	0x200040b0
    25d4:	20004180 	.word	0x20004180

000025d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    25d8:	b570      	push	{r4, r5, r6, lr}
    25da:	1c04      	adds	r4, r0, #0
    25dc:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    25de:	2800      	cmp	r0, #0
    25e0:	d101      	bne.n	25e6 <xTaskCheckForTimeOut+0xe>
    25e2:	b672      	cpsid	i
    25e4:	e7fe      	b.n	25e4 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    25e6:	2900      	cmp	r1, #0
    25e8:	d101      	bne.n	25ee <xTaskCheckForTimeOut+0x16>
    25ea:	b672      	cpsid	i
    25ec:	e7fe      	b.n	25ec <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    25ee:	4b11      	ldr	r3, [pc, #68]	; (2634 <xTaskCheckForTimeOut+0x5c>)
    25f0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    25f2:	4b11      	ldr	r3, [pc, #68]	; (2638 <xTaskCheckForTimeOut+0x60>)
    25f4:	681a      	ldr	r2, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    25f6:	6833      	ldr	r3, [r6, #0]
    25f8:	1c58      	adds	r0, r3, #1
    25fa:	d015      	beq.n	2628 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    25fc:	490f      	ldr	r1, [pc, #60]	; (263c <xTaskCheckForTimeOut+0x64>)
    25fe:	6809      	ldr	r1, [r1, #0]
    2600:	6820      	ldr	r0, [r4, #0]
    2602:	4288      	cmp	r0, r1
    2604:	d003      	beq.n	260e <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2606:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2608:	6861      	ldr	r1, [r4, #4]
    260a:	428a      	cmp	r2, r1
    260c:	d20d      	bcs.n	262a <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    260e:	6861      	ldr	r1, [r4, #4]
    2610:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2612:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2614:	4283      	cmp	r3, r0
    2616:	d908      	bls.n	262a <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    2618:	1a8a      	subs	r2, r1, r2
    261a:	18d3      	adds	r3, r2, r3
    261c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    261e:	1c20      	adds	r0, r4, #0
    2620:	4b07      	ldr	r3, [pc, #28]	; (2640 <xTaskCheckForTimeOut+0x68>)
    2622:	4798      	blx	r3
			xReturn = pdFALSE;
    2624:	2500      	movs	r5, #0
    2626:	e000      	b.n	262a <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    2628:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    262a:	4b06      	ldr	r3, [pc, #24]	; (2644 <xTaskCheckForTimeOut+0x6c>)
    262c:	4798      	blx	r3

	return xReturn;
}
    262e:	1c28      	adds	r0, r5, #0
    2630:	bd70      	pop	{r4, r5, r6, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	00000a4d 	.word	0x00000a4d
    2638:	20004180 	.word	0x20004180
    263c:	200040b0 	.word	0x200040b0
    2640:	000025b9 	.word	0x000025b9
    2644:	00000a65 	.word	0x00000a65

00002648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2648:	2201      	movs	r2, #1
    264a:	4b01      	ldr	r3, [pc, #4]	; (2650 <vTaskMissedYield+0x8>)
    264c:	601a      	str	r2, [r3, #0]
}
    264e:	4770      	bx	lr
    2650:	200041a8 	.word	0x200041a8

00002654 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2654:	4b01      	ldr	r3, [pc, #4]	; (265c <xTaskGetCurrentTaskHandle+0x8>)
    2656:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    2658:	4770      	bx	lr
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	20004164 	.word	0x20004164

00002660 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2660:	4b05      	ldr	r3, [pc, #20]	; (2678 <xTaskGetSchedulerState+0x18>)
    2662:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2664:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2666:	2b00      	cmp	r3, #0
    2668:	d004      	beq.n	2674 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    266a:	4b04      	ldr	r3, [pc, #16]	; (267c <xTaskGetSchedulerState+0x1c>)
    266c:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
    266e:	4243      	negs	r3, r0
    2670:	4158      	adcs	r0, r3
    2672:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    2674:	4770      	bx	lr
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	200040b8 	.word	0x200040b8
    267c:	2000417c 	.word	0x2000417c

00002680 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    2680:	b538      	push	{r3, r4, r5, lr}
    2682:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    2684:	d031      	beq.n	26ea <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2686:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2688:	4a18      	ldr	r2, [pc, #96]	; (26ec <vTaskPriorityInherit+0x6c>)
    268a:	6812      	ldr	r2, [r2, #0]
    268c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    268e:	4293      	cmp	r3, r2
    2690:	d22b      	bcs.n	26ea <vTaskPriorityInherit+0x6a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2692:	6982      	ldr	r2, [r0, #24]
    2694:	2a00      	cmp	r2, #0
    2696:	db05      	blt.n	26a4 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2698:	4a14      	ldr	r2, [pc, #80]	; (26ec <vTaskPriorityInherit+0x6c>)
    269a:	6812      	ldr	r2, [r2, #0]
    269c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    269e:	2105      	movs	r1, #5
    26a0:	1a8a      	subs	r2, r1, r2
    26a2:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    26a4:	009a      	lsls	r2, r3, #2
    26a6:	18d3      	adds	r3, r2, r3
    26a8:	009b      	lsls	r3, r3, #2
    26aa:	4a11      	ldr	r2, [pc, #68]	; (26f0 <vTaskPriorityInherit+0x70>)
    26ac:	18d3      	adds	r3, r2, r3
    26ae:	6962      	ldr	r2, [r4, #20]
    26b0:	429a      	cmp	r2, r3
    26b2:	d116      	bne.n	26e2 <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    26b4:	1d25      	adds	r5, r4, #4
    26b6:	1c28      	adds	r0, r5, #0
    26b8:	4b0e      	ldr	r3, [pc, #56]	; (26f4 <vTaskPriorityInherit+0x74>)
    26ba:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    26bc:	4b0b      	ldr	r3, [pc, #44]	; (26ec <vTaskPriorityInherit+0x6c>)
    26be:	681b      	ldr	r3, [r3, #0]
    26c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26c2:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    26c4:	4a0c      	ldr	r2, [pc, #48]	; (26f8 <vTaskPriorityInherit+0x78>)
    26c6:	6812      	ldr	r2, [r2, #0]
    26c8:	4293      	cmp	r3, r2
    26ca:	d901      	bls.n	26d0 <vTaskPriorityInherit+0x50>
    26cc:	4a0a      	ldr	r2, [pc, #40]	; (26f8 <vTaskPriorityInherit+0x78>)
    26ce:	6013      	str	r3, [r2, #0]
    26d0:	0098      	lsls	r0, r3, #2
    26d2:	18c3      	adds	r3, r0, r3
    26d4:	009b      	lsls	r3, r3, #2
    26d6:	4806      	ldr	r0, [pc, #24]	; (26f0 <vTaskPriorityInherit+0x70>)
    26d8:	18c0      	adds	r0, r0, r3
    26da:	1c29      	adds	r1, r5, #0
    26dc:	4b07      	ldr	r3, [pc, #28]	; (26fc <vTaskPriorityInherit+0x7c>)
    26de:	4798      	blx	r3
    26e0:	e003      	b.n	26ea <vTaskPriorityInherit+0x6a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    26e2:	4b02      	ldr	r3, [pc, #8]	; (26ec <vTaskPriorityInherit+0x6c>)
    26e4:	681b      	ldr	r3, [r3, #0]
    26e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26e8:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    26ea:	bd38      	pop	{r3, r4, r5, pc}
    26ec:	20004164 	.word	0x20004164
    26f0:	200040ec 	.word	0x200040ec
    26f4:	00001751 	.word	0x00001751
    26f8:	200041a4 	.word	0x200041a4
    26fc:	00001709 	.word	0x00001709

00002700 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2700:	b538      	push	{r3, r4, r5, lr}
    2702:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2704:	d01d      	beq.n	2742 <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2706:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2708:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    270a:	429a      	cmp	r2, r3
    270c:	d019      	beq.n	2742 <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    270e:	1d05      	adds	r5, r0, #4
    2710:	1c28      	adds	r0, r5, #0
    2712:	4b0c      	ldr	r3, [pc, #48]	; (2744 <vTaskPriorityDisinherit+0x44>)
    2714:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2716:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2718:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    271a:	69a2      	ldr	r2, [r4, #24]
    271c:	2a00      	cmp	r2, #0
    271e:	db02      	blt.n	2726 <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2720:	2205      	movs	r2, #5
    2722:	1ad2      	subs	r2, r2, r3
    2724:	61a2      	str	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    2726:	4a08      	ldr	r2, [pc, #32]	; (2748 <vTaskPriorityDisinherit+0x48>)
    2728:	6812      	ldr	r2, [r2, #0]
    272a:	4293      	cmp	r3, r2
    272c:	d901      	bls.n	2732 <vTaskPriorityDisinherit+0x32>
    272e:	4a06      	ldr	r2, [pc, #24]	; (2748 <vTaskPriorityDisinherit+0x48>)
    2730:	6013      	str	r3, [r2, #0]
    2732:	0098      	lsls	r0, r3, #2
    2734:	18c3      	adds	r3, r0, r3
    2736:	009b      	lsls	r3, r3, #2
    2738:	4804      	ldr	r0, [pc, #16]	; (274c <vTaskPriorityDisinherit+0x4c>)
    273a:	18c0      	adds	r0, r0, r3
    273c:	1c29      	adds	r1, r5, #0
    273e:	4b04      	ldr	r3, [pc, #16]	; (2750 <vTaskPriorityDisinherit+0x50>)
    2740:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2742:	bd38      	pop	{r3, r4, r5, pc}
    2744:	00001751 	.word	0x00001751
    2748:	200041a4 	.word	0x200041a4
    274c:	200040ec 	.word	0x200040ec
    2750:	00001709 	.word	0x00001709

00002754 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2754:	b510      	push	{r4, lr}
    2756:	1c04      	adds	r4, r0, #0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2758:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    275a:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    275c:	4291      	cmp	r1, r2
    275e:	d80b      	bhi.n	2778 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    2760:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2762:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    2764:	69a3      	ldr	r3, [r4, #24]
    2766:	429a      	cmp	r2, r3
    2768:	d211      	bcs.n	278e <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    276a:	4b09      	ldr	r3, [pc, #36]	; (2790 <prvInsertTimerInActiveList+0x3c>)
    276c:	6818      	ldr	r0, [r3, #0]
    276e:	1d21      	adds	r1, r4, #4
    2770:	4b08      	ldr	r3, [pc, #32]	; (2794 <prvInsertTimerInActiveList+0x40>)
    2772:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2774:	2000      	movs	r0, #0
    2776:	e00a      	b.n	278e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2778:	429a      	cmp	r2, r3
    277a:	d202      	bcs.n	2782 <prvInsertTimerInActiveList+0x2e>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    277c:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    277e:	4299      	cmp	r1, r3
    2780:	d205      	bcs.n	278e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2782:	4b05      	ldr	r3, [pc, #20]	; (2798 <prvInsertTimerInActiveList+0x44>)
    2784:	6818      	ldr	r0, [r3, #0]
    2786:	1d21      	adds	r1, r4, #4
    2788:	4b02      	ldr	r3, [pc, #8]	; (2794 <prvInsertTimerInActiveList+0x40>)
    278a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    278c:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    278e:	bd10      	pop	{r4, pc}
    2790:	200041e0 	.word	0x200041e0
    2794:	00001721 	.word	0x00001721
    2798:	200041ac 	.word	0x200041ac

0000279c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    279c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    279e:	4b10      	ldr	r3, [pc, #64]	; (27e0 <prvCheckForValidListAndQueue+0x44>)
    27a0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    27a2:	4b10      	ldr	r3, [pc, #64]	; (27e4 <prvCheckForValidListAndQueue+0x48>)
    27a4:	681b      	ldr	r3, [r3, #0]
    27a6:	2b00      	cmp	r3, #0
    27a8:	d116      	bne.n	27d8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    27aa:	4d0f      	ldr	r5, [pc, #60]	; (27e8 <prvCheckForValidListAndQueue+0x4c>)
    27ac:	1c28      	adds	r0, r5, #0
    27ae:	4e0f      	ldr	r6, [pc, #60]	; (27ec <prvCheckForValidListAndQueue+0x50>)
    27b0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    27b2:	4c0f      	ldr	r4, [pc, #60]	; (27f0 <prvCheckForValidListAndQueue+0x54>)
    27b4:	1c20      	adds	r0, r4, #0
    27b6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    27b8:	4b0e      	ldr	r3, [pc, #56]	; (27f4 <prvCheckForValidListAndQueue+0x58>)
    27ba:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    27bc:	4b0e      	ldr	r3, [pc, #56]	; (27f8 <prvCheckForValidListAndQueue+0x5c>)
    27be:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    27c0:	2002      	movs	r0, #2
    27c2:	210c      	movs	r1, #12
    27c4:	2200      	movs	r2, #0
    27c6:	4b0d      	ldr	r3, [pc, #52]	; (27fc <prvCheckForValidListAndQueue+0x60>)
    27c8:	4798      	blx	r3
			configASSERT( xTimerQueue );
    27ca:	2800      	cmp	r0, #0
    27cc:	d002      	beq.n	27d4 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    27ce:	4b05      	ldr	r3, [pc, #20]	; (27e4 <prvCheckForValidListAndQueue+0x48>)
    27d0:	6018      	str	r0, [r3, #0]
    27d2:	e001      	b.n	27d8 <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    27d4:	b672      	cpsid	i
    27d6:	e7fe      	b.n	27d6 <prvCheckForValidListAndQueue+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    27d8:	4b09      	ldr	r3, [pc, #36]	; (2800 <prvCheckForValidListAndQueue+0x64>)
    27da:	4798      	blx	r3
}
    27dc:	bd70      	pop	{r4, r5, r6, pc}
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	00000a4d 	.word	0x00000a4d
    27e4:	200041dc 	.word	0x200041dc
    27e8:	200041b0 	.word	0x200041b0
    27ec:	000016e9 	.word	0x000016e9
    27f0:	200041c4 	.word	0x200041c4
    27f4:	200041ac 	.word	0x200041ac
    27f8:	200041e0 	.word	0x200041e0
    27fc:	00001985 	.word	0x00001985
    2800:	00000a65 	.word	0x00000a65

00002804 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2804:	b510      	push	{r4, lr}
    2806:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    2808:	4b0b      	ldr	r3, [pc, #44]	; (2838 <xTimerCreateTimerTask+0x34>)
    280a:	4798      	blx	r3

	if( xTimerQueue != NULL )
    280c:	4b0b      	ldr	r3, [pc, #44]	; (283c <xTimerCreateTimerTask+0x38>)
    280e:	681b      	ldr	r3, [r3, #0]
    2810:	2b00      	cmp	r3, #0
    2812:	d00c      	beq.n	282e <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    2814:	2302      	movs	r3, #2
    2816:	9300      	str	r3, [sp, #0]
    2818:	2300      	movs	r3, #0
    281a:	9301      	str	r3, [sp, #4]
    281c:	9302      	str	r3, [sp, #8]
    281e:	9303      	str	r3, [sp, #12]
    2820:	4807      	ldr	r0, [pc, #28]	; (2840 <xTimerCreateTimerTask+0x3c>)
    2822:	4908      	ldr	r1, [pc, #32]	; (2844 <xTimerCreateTimerTask+0x40>)
    2824:	2250      	movs	r2, #80	; 0x50
    2826:	4c08      	ldr	r4, [pc, #32]	; (2848 <xTimerCreateTimerTask+0x44>)
    2828:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    282a:	2800      	cmp	r0, #0
    282c:	d101      	bne.n	2832 <xTimerCreateTimerTask+0x2e>
    282e:	b672      	cpsid	i
    2830:	e7fe      	b.n	2830 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
    2832:	b004      	add	sp, #16
    2834:	bd10      	pop	{r4, pc}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	0000279d 	.word	0x0000279d
    283c:	200041dc 	.word	0x200041dc
    2840:	0000296d 	.word	0x0000296d
    2844:	00005430 	.word	0x00005430
    2848:	00001e79 	.word	0x00001e79

0000284c <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    284c:	b510      	push	{r4, lr}
    284e:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2850:	4c13      	ldr	r4, [pc, #76]	; (28a0 <xTimerGenericCommand+0x54>)
    2852:	6824      	ldr	r4, [r4, #0]
    2854:	2c00      	cmp	r4, #0
    2856:	d01f      	beq.n	2898 <xTimerGenericCommand+0x4c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2858:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    285a:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    285c:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    285e:	2905      	cmp	r1, #5
    2860:	dc13      	bgt.n	288a <xTimerGenericCommand+0x3e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2862:	4b10      	ldr	r3, [pc, #64]	; (28a4 <xTimerGenericCommand+0x58>)
    2864:	4798      	blx	r3
    2866:	2802      	cmp	r0, #2
    2868:	d107      	bne.n	287a <xTimerGenericCommand+0x2e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    286a:	4b0d      	ldr	r3, [pc, #52]	; (28a0 <xTimerGenericCommand+0x54>)
    286c:	6818      	ldr	r0, [r3, #0]
    286e:	a901      	add	r1, sp, #4
    2870:	9a06      	ldr	r2, [sp, #24]
    2872:	2300      	movs	r3, #0
    2874:	4c0c      	ldr	r4, [pc, #48]	; (28a8 <xTimerGenericCommand+0x5c>)
    2876:	47a0      	blx	r4
    2878:	e00f      	b.n	289a <xTimerGenericCommand+0x4e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    287a:	4b09      	ldr	r3, [pc, #36]	; (28a0 <xTimerGenericCommand+0x54>)
    287c:	6818      	ldr	r0, [r3, #0]
    287e:	a901      	add	r1, sp, #4
    2880:	2200      	movs	r2, #0
    2882:	2300      	movs	r3, #0
    2884:	4c08      	ldr	r4, [pc, #32]	; (28a8 <xTimerGenericCommand+0x5c>)
    2886:	47a0      	blx	r4
    2888:	e007      	b.n	289a <xTimerGenericCommand+0x4e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    288a:	1c20      	adds	r0, r4, #0
    288c:	a901      	add	r1, sp, #4
    288e:	1c1a      	adds	r2, r3, #0
    2890:	2300      	movs	r3, #0
    2892:	4c06      	ldr	r4, [pc, #24]	; (28ac <xTimerGenericCommand+0x60>)
    2894:	47a0      	blx	r4
    2896:	e000      	b.n	289a <xTimerGenericCommand+0x4e>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2898:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    289a:	b004      	add	sp, #16
    289c:	bd10      	pop	{r4, pc}
    289e:	46c0      	nop			; (mov r8, r8)
    28a0:	200041dc 	.word	0x200041dc
    28a4:	00002661 	.word	0x00002661
    28a8:	000019d9 	.word	0x000019d9
    28ac:	00001b4d 	.word	0x00001b4d

000028b0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b2:	4657      	mov	r7, sl
    28b4:	464e      	mov	r6, r9
    28b6:	4645      	mov	r5, r8
    28b8:	b4e0      	push	{r5, r6, r7}
    28ba:	b082      	sub	sp, #8
    28bc:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    28be:	4b24      	ldr	r3, [pc, #144]	; (2950 <prvSampleTimeNow+0xa0>)
    28c0:	4798      	blx	r3
    28c2:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    28c4:	4b23      	ldr	r3, [pc, #140]	; (2954 <prvSampleTimeNow+0xa4>)
    28c6:	681b      	ldr	r3, [r3, #0]
    28c8:	4298      	cmp	r0, r3
    28ca:	d234      	bcs.n	2936 <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    28cc:	4e22      	ldr	r6, [pc, #136]	; (2958 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    28ce:	4f23      	ldr	r7, [pc, #140]	; (295c <prvSampleTimeNow+0xac>)
    28d0:	e024      	b.n	291c <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    28d2:	68db      	ldr	r3, [r3, #12]
    28d4:	6818      	ldr	r0, [r3, #0]
    28d6:	4682      	mov	sl, r0

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    28d8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    28da:	1d25      	adds	r5, r4, #4
    28dc:	1c28      	adds	r0, r5, #0
    28de:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    28e0:	1c20      	adds	r0, r4, #0
    28e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    28e4:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    28e6:	69e2      	ldr	r2, [r4, #28]
    28e8:	2a01      	cmp	r2, #1
    28ea:	d117      	bne.n	291c <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    28ec:	69a0      	ldr	r0, [r4, #24]
    28ee:	1c03      	adds	r3, r0, #0
    28f0:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    28f2:	4553      	cmp	r3, sl
    28f4:	d907      	bls.n	2906 <prvSampleTimeNow+0x56>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    28f6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    28f8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    28fa:	4b17      	ldr	r3, [pc, #92]	; (2958 <prvSampleTimeNow+0xa8>)
    28fc:	6818      	ldr	r0, [r3, #0]
    28fe:	1c29      	adds	r1, r5, #0
    2900:	4b17      	ldr	r3, [pc, #92]	; (2960 <prvSampleTimeNow+0xb0>)
    2902:	4798      	blx	r3
    2904:	e00a      	b.n	291c <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2906:	2300      	movs	r3, #0
    2908:	9300      	str	r3, [sp, #0]
    290a:	1c20      	adds	r0, r4, #0
    290c:	2100      	movs	r1, #0
    290e:	4652      	mov	r2, sl
    2910:	4c14      	ldr	r4, [pc, #80]	; (2964 <prvSampleTimeNow+0xb4>)
    2912:	47a0      	blx	r4
				configASSERT( xResult );
    2914:	2800      	cmp	r0, #0
    2916:	d101      	bne.n	291c <prvSampleTimeNow+0x6c>
    2918:	b672      	cpsid	i
    291a:	e7fe      	b.n	291a <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    291c:	6833      	ldr	r3, [r6, #0]
    291e:	6818      	ldr	r0, [r3, #0]
    2920:	2800      	cmp	r0, #0
    2922:	d1d6      	bne.n	28d2 <prvSampleTimeNow+0x22>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    2924:	4a10      	ldr	r2, [pc, #64]	; (2968 <prvSampleTimeNow+0xb8>)
    2926:	490c      	ldr	r1, [pc, #48]	; (2958 <prvSampleTimeNow+0xa8>)
    2928:	6814      	ldr	r4, [r2, #0]
    292a:	600c      	str	r4, [r1, #0]
	pxOverflowTimerList = pxTemp;
    292c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    292e:	2301      	movs	r3, #1
    2930:	4648      	mov	r0, r9
    2932:	6003      	str	r3, [r0, #0]
    2934:	e002      	b.n	293c <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2936:	2300      	movs	r3, #0
    2938:	4649      	mov	r1, r9
    293a:	600b      	str	r3, [r1, #0]
	}

	xLastTime = xTimeNow;
    293c:	4b05      	ldr	r3, [pc, #20]	; (2954 <prvSampleTimeNow+0xa4>)
    293e:	4642      	mov	r2, r8
    2940:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    2942:	4640      	mov	r0, r8
    2944:	b002      	add	sp, #8
    2946:	bc1c      	pop	{r2, r3, r4}
    2948:	4690      	mov	r8, r2
    294a:	4699      	mov	r9, r3
    294c:	46a2      	mov	sl, r4
    294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2950:	000020dd 	.word	0x000020dd
    2954:	200041d8 	.word	0x200041d8
    2958:	200041ac 	.word	0x200041ac
    295c:	00001751 	.word	0x00001751
    2960:	00001721 	.word	0x00001721
    2964:	0000284d 	.word	0x0000284d
    2968:	200041e0 	.word	0x200041e0

0000296c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    296c:	b5f0      	push	{r4, r5, r6, r7, lr}
    296e:	4647      	mov	r7, r8
    2970:	b480      	push	{r7}
    2972:	b086      	sub	sp, #24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2974:	484e      	ldr	r0, [pc, #312]	; (2ab0 <prvTimerTask+0x144>)
    2976:	4680      	mov	r8, r0
    2978:	4641      	mov	r1, r8
    297a:	680b      	ldr	r3, [r1, #0]
	if( *pxListWasEmpty == pdFALSE )
    297c:	681a      	ldr	r2, [r3, #0]
    297e:	2a00      	cmp	r2, #0
    2980:	d100      	bne.n	2984 <prvTimerTask+0x18>
    2982:	e08a      	b.n	2a9a <prvTimerTask+0x12e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2984:	68db      	ldr	r3, [r3, #12]
    2986:	681c      	ldr	r4, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2988:	4b4a      	ldr	r3, [pc, #296]	; (2ab4 <prvTimerTask+0x148>)
    298a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    298c:	a803      	add	r0, sp, #12
    298e:	4b4a      	ldr	r3, [pc, #296]	; (2ab8 <prvTimerTask+0x14c>)
    2990:	4798      	blx	r3
    2992:	1c05      	adds	r5, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    2994:	9b03      	ldr	r3, [sp, #12]
    2996:	2b00      	cmp	r3, #0
    2998:	d131      	bne.n	29fe <prvTimerTask+0x92>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    299a:	4284      	cmp	r4, r0
    299c:	d823      	bhi.n	29e6 <prvTimerTask+0x7a>
			{
				( void ) xTaskResumeAll();
    299e:	4b47      	ldr	r3, [pc, #284]	; (2abc <prvTimerTask+0x150>)
    29a0:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    29a2:	4b43      	ldr	r3, [pc, #268]	; (2ab0 <prvTimerTask+0x144>)
    29a4:	681b      	ldr	r3, [r3, #0]
    29a6:	68db      	ldr	r3, [r3, #12]
    29a8:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29aa:	1d30      	adds	r0, r6, #4
    29ac:	4b44      	ldr	r3, [pc, #272]	; (2ac0 <prvTimerTask+0x154>)
    29ae:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    29b0:	69f7      	ldr	r7, [r6, #28]
    29b2:	2f01      	cmp	r7, #1
    29b4:	d113      	bne.n	29de <prvTimerTask+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    29b6:	69b0      	ldr	r0, [r6, #24]
    29b8:	1821      	adds	r1, r4, r0
    29ba:	1c30      	adds	r0, r6, #0
    29bc:	1c2a      	adds	r2, r5, #0
    29be:	1c23      	adds	r3, r4, #0
    29c0:	4d40      	ldr	r5, [pc, #256]	; (2ac4 <prvTimerTask+0x158>)
    29c2:	47a8      	blx	r5
    29c4:	2801      	cmp	r0, #1
    29c6:	d10a      	bne.n	29de <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    29c8:	2300      	movs	r3, #0
    29ca:	9300      	str	r3, [sp, #0]
    29cc:	1c30      	adds	r0, r6, #0
    29ce:	2100      	movs	r1, #0
    29d0:	1c22      	adds	r2, r4, #0
    29d2:	4c3d      	ldr	r4, [pc, #244]	; (2ac8 <prvTimerTask+0x15c>)
    29d4:	47a0      	blx	r4
			configASSERT( xResult );
    29d6:	2800      	cmp	r0, #0
    29d8:	d101      	bne.n	29de <prvTimerTask+0x72>
    29da:	b672      	cpsid	i
    29dc:	e7fe      	b.n	29dc <prvTimerTask+0x70>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29de:	6a73      	ldr	r3, [r6, #36]	; 0x24
    29e0:	1c30      	adds	r0, r6, #0
    29e2:	4798      	blx	r3
    29e4:	e00d      	b.n	2a02 <prvTimerTask+0x96>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    29e6:	4b39      	ldr	r3, [pc, #228]	; (2acc <prvTimerTask+0x160>)
    29e8:	6818      	ldr	r0, [r3, #0]
    29ea:	1b61      	subs	r1, r4, r5
    29ec:	4b38      	ldr	r3, [pc, #224]	; (2ad0 <prvTimerTask+0x164>)
    29ee:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    29f0:	4b32      	ldr	r3, [pc, #200]	; (2abc <prvTimerTask+0x150>)
    29f2:	4798      	blx	r3
    29f4:	2800      	cmp	r0, #0
    29f6:	d104      	bne.n	2a02 <prvTimerTask+0x96>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    29f8:	4b36      	ldr	r3, [pc, #216]	; (2ad4 <prvTimerTask+0x168>)
    29fa:	4798      	blx	r3
    29fc:	e001      	b.n	2a02 <prvTimerTask+0x96>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    29fe:	4b2f      	ldr	r3, [pc, #188]	; (2abc <prvTimerTask+0x150>)
    2a00:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2a02:	4d32      	ldr	r5, [pc, #200]	; (2acc <prvTimerTask+0x160>)
    2a04:	4c34      	ldr	r4, [pc, #208]	; (2ad8 <prvTimerTask+0x16c>)
    2a06:	e040      	b.n	2a8a <prvTimerTask+0x11e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2a08:	9903      	ldr	r1, [sp, #12]
    2a0a:	2900      	cmp	r1, #0
    2a0c:	db3d      	blt.n	2a8a <prvTimerTask+0x11e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2a0e:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2a10:	6972      	ldr	r2, [r6, #20]
    2a12:	2a00      	cmp	r2, #0
    2a14:	d002      	beq.n	2a1c <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a16:	1d30      	adds	r0, r6, #4
    2a18:	4b29      	ldr	r3, [pc, #164]	; (2ac0 <prvTimerTask+0x154>)
    2a1a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2a1c:	a802      	add	r0, sp, #8
    2a1e:	4b26      	ldr	r3, [pc, #152]	; (2ab8 <prvTimerTask+0x14c>)
    2a20:	4798      	blx	r3
    2a22:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    2a24:	9f03      	ldr	r7, [sp, #12]
    2a26:	2f09      	cmp	r7, #9
    2a28:	d82f      	bhi.n	2a8a <prvTimerTask+0x11e>
    2a2a:	00ba      	lsls	r2, r7, #2
    2a2c:	492b      	ldr	r1, [pc, #172]	; (2adc <prvTimerTask+0x170>)
    2a2e:	588a      	ldr	r2, [r1, r2]
    2a30:	4697      	mov	pc, r2
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    2a32:	9f04      	ldr	r7, [sp, #16]
    2a34:	69b2      	ldr	r2, [r6, #24]
    2a36:	18b9      	adds	r1, r7, r2
    2a38:	1c30      	adds	r0, r6, #0
    2a3a:	1c1a      	adds	r2, r3, #0
    2a3c:	1c3b      	adds	r3, r7, #0
    2a3e:	4f21      	ldr	r7, [pc, #132]	; (2ac4 <prvTimerTask+0x158>)
    2a40:	47b8      	blx	r7
    2a42:	2801      	cmp	r0, #1
    2a44:	d121      	bne.n	2a8a <prvTimerTask+0x11e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a46:	1c30      	adds	r0, r6, #0
    2a48:	6a71      	ldr	r1, [r6, #36]	; 0x24
    2a4a:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2a4c:	69f2      	ldr	r2, [r6, #28]
    2a4e:	2a01      	cmp	r2, #1
    2a50:	d11b      	bne.n	2a8a <prvTimerTask+0x11e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2a52:	69b3      	ldr	r3, [r6, #24]
    2a54:	9f04      	ldr	r7, [sp, #16]
    2a56:	19da      	adds	r2, r3, r7
    2a58:	2300      	movs	r3, #0
    2a5a:	9300      	str	r3, [sp, #0]
    2a5c:	1c30      	adds	r0, r6, #0
    2a5e:	2100      	movs	r1, #0
    2a60:	4e19      	ldr	r6, [pc, #100]	; (2ac8 <prvTimerTask+0x15c>)
    2a62:	47b0      	blx	r6
							configASSERT( xResult );
    2a64:	2800      	cmp	r0, #0
    2a66:	d110      	bne.n	2a8a <prvTimerTask+0x11e>
    2a68:	b672      	cpsid	i
    2a6a:	e7fe      	b.n	2a6a <prvTimerTask+0xfe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2a6c:	9904      	ldr	r1, [sp, #16]
    2a6e:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2a70:	2900      	cmp	r1, #0
    2a72:	d101      	bne.n	2a78 <prvTimerTask+0x10c>
    2a74:	b672      	cpsid	i
    2a76:	e7fe      	b.n	2a76 <prvTimerTask+0x10a>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2a78:	1859      	adds	r1, r3, r1
    2a7a:	1c30      	adds	r0, r6, #0
    2a7c:	1c1a      	adds	r2, r3, #0
    2a7e:	4e11      	ldr	r6, [pc, #68]	; (2ac4 <prvTimerTask+0x158>)
    2a80:	47b0      	blx	r6
    2a82:	e002      	b.n	2a8a <prvTimerTask+0x11e>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    2a84:	1c30      	adds	r0, r6, #0
    2a86:	4b16      	ldr	r3, [pc, #88]	; (2ae0 <prvTimerTask+0x174>)
    2a88:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2a8a:	6828      	ldr	r0, [r5, #0]
    2a8c:	a903      	add	r1, sp, #12
    2a8e:	2200      	movs	r2, #0
    2a90:	2300      	movs	r3, #0
    2a92:	47a0      	blx	r4
    2a94:	2800      	cmp	r0, #0
    2a96:	d1b7      	bne.n	2a08 <prvTimerTask+0x9c>
    2a98:	e76e      	b.n	2978 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2a9a:	4806      	ldr	r0, [pc, #24]	; (2ab4 <prvTimerTask+0x148>)
    2a9c:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2a9e:	a803      	add	r0, sp, #12
    2aa0:	4905      	ldr	r1, [pc, #20]	; (2ab8 <prvTimerTask+0x14c>)
    2aa2:	4788      	blx	r1
    2aa4:	1c05      	adds	r5, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    2aa6:	2400      	movs	r4, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    2aa8:	9a03      	ldr	r2, [sp, #12]
    2aaa:	42a2      	cmp	r2, r4
    2aac:	d09b      	beq.n	29e6 <prvTimerTask+0x7a>
    2aae:	e7a6      	b.n	29fe <prvTimerTask+0x92>
    2ab0:	200041ac 	.word	0x200041ac
    2ab4:	000020cd 	.word	0x000020cd
    2ab8:	000028b1 	.word	0x000028b1
    2abc:	00002229 	.word	0x00002229
    2ac0:	00001751 	.word	0x00001751
    2ac4:	00002755 	.word	0x00002755
    2ac8:	0000284d 	.word	0x0000284d
    2acc:	200041dc 	.word	0x200041dc
    2ad0:	00001da9 	.word	0x00001da9
    2ad4:	00000a35 	.word	0x00000a35
    2ad8:	00001c1d 	.word	0x00001c1d
    2adc:	00005408 	.word	0x00005408
    2ae0:	00000bd9 	.word	0x00000bd9

00002ae4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2ae4:	1c93      	adds	r3, r2, #2
    2ae6:	009b      	lsls	r3, r3, #2
    2ae8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2aea:	2a02      	cmp	r2, #2
    2aec:	d104      	bne.n	2af8 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2aee:	7e02      	ldrb	r2, [r0, #24]
    2af0:	2310      	movs	r3, #16
    2af2:	4313      	orrs	r3, r2
    2af4:	7603      	strb	r3, [r0, #24]
    2af6:	e00c      	b.n	2b12 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2af8:	2a03      	cmp	r2, #3
    2afa:	d104      	bne.n	2b06 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2afc:	7e02      	ldrb	r2, [r0, #24]
    2afe:	2320      	movs	r3, #32
    2b00:	4313      	orrs	r3, r2
    2b02:	7603      	strb	r3, [r0, #24]
    2b04:	e005      	b.n	2b12 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2b06:	2301      	movs	r3, #1
    2b08:	4093      	lsls	r3, r2
    2b0a:	1c1a      	adds	r2, r3, #0
    2b0c:	7e03      	ldrb	r3, [r0, #24]
    2b0e:	431a      	orrs	r2, r3
    2b10:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    2b12:	2000      	movs	r0, #0
    2b14:	4770      	bx	lr
    2b16:	46c0      	nop			; (mov r8, r8)

00002b18 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2b18:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2b1a:	0080      	lsls	r0, r0, #2
    2b1c:	4b14      	ldr	r3, [pc, #80]	; (2b70 <_tc_interrupt_handler+0x58>)
    2b1e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2b20:	6822      	ldr	r2, [r4, #0]
    2b22:	7b95      	ldrb	r5, [r2, #14]
    2b24:	7e23      	ldrb	r3, [r4, #24]
    2b26:	401d      	ands	r5, r3
    2b28:	7e63      	ldrb	r3, [r4, #25]
    2b2a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2b2c:	07eb      	lsls	r3, r5, #31
    2b2e:	d505      	bpl.n	2b3c <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2b30:	1c20      	adds	r0, r4, #0
    2b32:	68a2      	ldr	r2, [r4, #8]
    2b34:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2b36:	2301      	movs	r3, #1
    2b38:	6822      	ldr	r2, [r4, #0]
    2b3a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2b3c:	07ab      	lsls	r3, r5, #30
    2b3e:	d505      	bpl.n	2b4c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    2b40:	1c20      	adds	r0, r4, #0
    2b42:	68e2      	ldr	r2, [r4, #12]
    2b44:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2b46:	2302      	movs	r3, #2
    2b48:	6822      	ldr	r2, [r4, #0]
    2b4a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2b4c:	06eb      	lsls	r3, r5, #27
    2b4e:	d505      	bpl.n	2b5c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2b50:	1c20      	adds	r0, r4, #0
    2b52:	6922      	ldr	r2, [r4, #16]
    2b54:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2b56:	2310      	movs	r3, #16
    2b58:	6822      	ldr	r2, [r4, #0]
    2b5a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2b5c:	06ab      	lsls	r3, r5, #26
    2b5e:	d505      	bpl.n	2b6c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2b60:	1c20      	adds	r0, r4, #0
    2b62:	6962      	ldr	r2, [r4, #20]
    2b64:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    2b66:	6823      	ldr	r3, [r4, #0]
    2b68:	2220      	movs	r2, #32
    2b6a:	739a      	strb	r2, [r3, #14]
	}
}
    2b6c:	bd38      	pop	{r3, r4, r5, pc}
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	200043f0 	.word	0x200043f0

00002b74 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2b74:	b508      	push	{r3, lr}
    2b76:	2000      	movs	r0, #0
    2b78:	4b01      	ldr	r3, [pc, #4]	; (2b80 <TC3_Handler+0xc>)
    2b7a:	4798      	blx	r3
    2b7c:	bd08      	pop	{r3, pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	00002b19 	.word	0x00002b19

00002b84 <TC4_Handler>:
    2b84:	b508      	push	{r3, lr}
    2b86:	2001      	movs	r0, #1
    2b88:	4b01      	ldr	r3, [pc, #4]	; (2b90 <TC4_Handler+0xc>)
    2b8a:	4798      	blx	r3
    2b8c:	bd08      	pop	{r3, pc}
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	00002b19 	.word	0x00002b19

00002b94 <TC5_Handler>:
    2b94:	b508      	push	{r3, lr}
    2b96:	2002      	movs	r0, #2
    2b98:	4b01      	ldr	r3, [pc, #4]	; (2ba0 <TC5_Handler+0xc>)
    2b9a:	4798      	blx	r3
    2b9c:	bd08      	pop	{r3, pc}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	00002b19 	.word	0x00002b19

00002ba4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ba6:	465f      	mov	r7, fp
    2ba8:	4656      	mov	r6, sl
    2baa:	464d      	mov	r5, r9
    2bac:	4644      	mov	r4, r8
    2bae:	b4f0      	push	{r4, r5, r6, r7}
    2bb0:	b091      	sub	sp, #68	; 0x44
    2bb2:	1c05      	adds	r5, r0, #0
    2bb4:	1c0c      	adds	r4, r1, #0
    2bb6:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2bb8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2bba:	1c08      	adds	r0, r1, #0
    2bbc:	4bad      	ldr	r3, [pc, #692]	; (2e74 <usart_init+0x2d0>)
    2bbe:	4798      	blx	r3
    2bc0:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2bc2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2bc4:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2bc6:	07d9      	lsls	r1, r3, #31
    2bc8:	d500      	bpl.n	2bcc <usart_init+0x28>
    2bca:	e14b      	b.n	2e64 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2bcc:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2bce:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2bd0:	079f      	lsls	r7, r3, #30
    2bd2:	d500      	bpl.n	2bd6 <usart_init+0x32>
    2bd4:	e146      	b.n	2e64 <usart_init+0x2c0>
    2bd6:	4ba8      	ldr	r3, [pc, #672]	; (2e78 <usart_init+0x2d4>)
    2bd8:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2bda:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2bdc:	2701      	movs	r7, #1
    2bde:	408f      	lsls	r7, r1
    2be0:	1c39      	adds	r1, r7, #0
    2be2:	4301      	orrs	r1, r0
    2be4:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2be6:	a90f      	add	r1, sp, #60	; 0x3c
    2be8:	272d      	movs	r7, #45	; 0x2d
    2bea:	5df3      	ldrb	r3, [r6, r7]
    2bec:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2bee:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2bf0:	b2d2      	uxtb	r2, r2
    2bf2:	4690      	mov	r8, r2
    2bf4:	1c10      	adds	r0, r2, #0
    2bf6:	4ba1      	ldr	r3, [pc, #644]	; (2e7c <usart_init+0x2d8>)
    2bf8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2bfa:	4640      	mov	r0, r8
    2bfc:	4ba0      	ldr	r3, [pc, #640]	; (2e80 <usart_init+0x2dc>)
    2bfe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2c00:	5df0      	ldrb	r0, [r6, r7]
    2c02:	2100      	movs	r1, #0
    2c04:	4b9f      	ldr	r3, [pc, #636]	; (2e84 <usart_init+0x2e0>)
    2c06:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2c08:	7af3      	ldrb	r3, [r6, #11]
    2c0a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2c0c:	2324      	movs	r3, #36	; 0x24
    2c0e:	5cf3      	ldrb	r3, [r6, r3]
    2c10:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2c12:	2325      	movs	r3, #37	; 0x25
    2c14:	5cf3      	ldrb	r3, [r6, r3]
    2c16:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    2c18:	7ef3      	ldrb	r3, [r6, #27]
    2c1a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2c1c:	7f33      	ldrb	r3, [r6, #28]
    2c1e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c20:	6829      	ldr	r1, [r5, #0]
    2c22:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2c24:	1c08      	adds	r0, r1, #0
    2c26:	4b93      	ldr	r3, [pc, #588]	; (2e74 <usart_init+0x2d0>)
    2c28:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2c2a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    2c2c:	2200      	movs	r2, #0
    2c2e:	466b      	mov	r3, sp
    2c30:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    2c32:	8a32      	ldrh	r2, [r6, #16]
    2c34:	9202      	str	r2, [sp, #8]
    2c36:	2380      	movs	r3, #128	; 0x80
    2c38:	01db      	lsls	r3, r3, #7
    2c3a:	429a      	cmp	r2, r3
    2c3c:	d021      	beq.n	2c82 <usart_init+0xde>
    2c3e:	2380      	movs	r3, #128	; 0x80
    2c40:	01db      	lsls	r3, r3, #7
    2c42:	429a      	cmp	r2, r3
    2c44:	d804      	bhi.n	2c50 <usart_init+0xac>
    2c46:	2380      	movs	r3, #128	; 0x80
    2c48:	019b      	lsls	r3, r3, #6
    2c4a:	429a      	cmp	r2, r3
    2c4c:	d011      	beq.n	2c72 <usart_init+0xce>
    2c4e:	e008      	b.n	2c62 <usart_init+0xbe>
    2c50:	23c0      	movs	r3, #192	; 0xc0
    2c52:	01db      	lsls	r3, r3, #7
    2c54:	9f02      	ldr	r7, [sp, #8]
    2c56:	429f      	cmp	r7, r3
    2c58:	d00f      	beq.n	2c7a <usart_init+0xd6>
    2c5a:	2380      	movs	r3, #128	; 0x80
    2c5c:	021b      	lsls	r3, r3, #8
    2c5e:	429f      	cmp	r7, r3
    2c60:	d003      	beq.n	2c6a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2c62:	2710      	movs	r7, #16
    2c64:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2c66:	2700      	movs	r7, #0
    2c68:	e00e      	b.n	2c88 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2c6a:	2703      	movs	r7, #3
    2c6c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2c6e:	2700      	movs	r7, #0
    2c70:	e00a      	b.n	2c88 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2c72:	2710      	movs	r7, #16
    2c74:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2c76:	2701      	movs	r7, #1
    2c78:	e006      	b.n	2c88 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2c7a:	2708      	movs	r7, #8
    2c7c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2c7e:	2701      	movs	r7, #1
    2c80:	e002      	b.n	2c88 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2c82:	2708      	movs	r7, #8
    2c84:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2c86:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2c88:	6831      	ldr	r1, [r6, #0]
    2c8a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    2c8c:	68f2      	ldr	r2, [r6, #12]
    2c8e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2c90:	6973      	ldr	r3, [r6, #20]
    2c92:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2c94:	7e31      	ldrb	r1, [r6, #24]
    2c96:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2c98:	2326      	movs	r3, #38	; 0x26
    2c9a:	5cf3      	ldrb	r3, [r6, r3]
    2c9c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    2c9e:	6873      	ldr	r3, [r6, #4]
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d013      	beq.n	2ccc <usart_init+0x128>
    2ca4:	2280      	movs	r2, #128	; 0x80
    2ca6:	0552      	lsls	r2, r2, #21
    2ca8:	4293      	cmp	r3, r2
    2caa:	d12e      	bne.n	2d0a <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2cac:	2327      	movs	r3, #39	; 0x27
    2cae:	5cf3      	ldrb	r3, [r6, r3]
    2cb0:	2b00      	cmp	r3, #0
    2cb2:	d12e      	bne.n	2d12 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2cb4:	6a37      	ldr	r7, [r6, #32]
    2cb6:	b2c0      	uxtb	r0, r0
    2cb8:	4b73      	ldr	r3, [pc, #460]	; (2e88 <usart_init+0x2e4>)
    2cba:	4798      	blx	r3
    2cbc:	1c01      	adds	r1, r0, #0
    2cbe:	1c38      	adds	r0, r7, #0
    2cc0:	466a      	mov	r2, sp
    2cc2:	3226      	adds	r2, #38	; 0x26
    2cc4:	4b71      	ldr	r3, [pc, #452]	; (2e8c <usart_init+0x2e8>)
    2cc6:	4798      	blx	r3
    2cc8:	1c03      	adds	r3, r0, #0
    2cca:	e01f      	b.n	2d0c <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2ccc:	2327      	movs	r3, #39	; 0x27
    2cce:	5cf3      	ldrb	r3, [r6, r3]
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d00a      	beq.n	2cea <usart_init+0x146>
				status_code =
    2cd4:	9a06      	ldr	r2, [sp, #24]
    2cd6:	9200      	str	r2, [sp, #0]
    2cd8:	6a30      	ldr	r0, [r6, #32]
    2cda:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2cdc:	466a      	mov	r2, sp
    2cde:	3226      	adds	r2, #38	; 0x26
    2ce0:	1c3b      	adds	r3, r7, #0
    2ce2:	4f6b      	ldr	r7, [pc, #428]	; (2e90 <usart_init+0x2ec>)
    2ce4:	47b8      	blx	r7
    2ce6:	1c03      	adds	r3, r0, #0
    2ce8:	e010      	b.n	2d0c <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2cea:	6a31      	ldr	r1, [r6, #32]
    2cec:	9107      	str	r1, [sp, #28]
    2cee:	b2c0      	uxtb	r0, r0
    2cf0:	4b65      	ldr	r3, [pc, #404]	; (2e88 <usart_init+0x2e4>)
    2cf2:	4798      	blx	r3
    2cf4:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    2cf6:	9a06      	ldr	r2, [sp, #24]
    2cf8:	9200      	str	r2, [sp, #0]
    2cfa:	9807      	ldr	r0, [sp, #28]
    2cfc:	466a      	mov	r2, sp
    2cfe:	3226      	adds	r2, #38	; 0x26
    2d00:	1c3b      	adds	r3, r7, #0
    2d02:	4f63      	ldr	r7, [pc, #396]	; (2e90 <usart_init+0x2ec>)
    2d04:	47b8      	blx	r7
    2d06:	1c03      	adds	r3, r0, #0
    2d08:	e000      	b.n	2d0c <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2d0a:	2300      	movs	r3, #0
    2d0c:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    2d0e:	d000      	beq.n	2d12 <usart_init+0x16e>
    2d10:	e0a8      	b.n	2e64 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    2d12:	7e73      	ldrb	r3, [r6, #25]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d002      	beq.n	2d1e <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2d18:	7eb3      	ldrb	r3, [r6, #26]
    2d1a:	4641      	mov	r1, r8
    2d1c:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2d1e:	682a      	ldr	r2, [r5, #0]
    2d20:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2d22:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2d24:	2b00      	cmp	r3, #0
    2d26:	d1fc      	bne.n	2d22 <usart_init+0x17e>
    2d28:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2d2a:	466b      	mov	r3, sp
    2d2c:	3326      	adds	r3, #38	; 0x26
    2d2e:	881b      	ldrh	r3, [r3, #0]
    2d30:	4642      	mov	r2, r8
    2d32:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2d34:	464b      	mov	r3, r9
    2d36:	9f03      	ldr	r7, [sp, #12]
    2d38:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    2d3a:	9f04      	ldr	r7, [sp, #16]
    2d3c:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2d3e:	6871      	ldr	r1, [r6, #4]
    2d40:	430b      	orrs	r3, r1
		config->sample_rate |
    2d42:	9f02      	ldr	r7, [sp, #8]
    2d44:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2d46:	4652      	mov	r2, sl
    2d48:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2d4a:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2d4c:	4659      	mov	r1, fp
    2d4e:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    2d50:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    2d52:	2327      	movs	r3, #39	; 0x27
    2d54:	5cf3      	ldrb	r3, [r6, r3]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d101      	bne.n	2d5e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2d5a:	2304      	movs	r3, #4
    2d5c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2d5e:	7e71      	ldrb	r1, [r6, #25]
    2d60:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2d62:	7f33      	ldrb	r3, [r6, #28]
    2d64:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    2d66:	4319      	orrs	r1, r3
    2d68:	7af2      	ldrb	r2, [r6, #11]
    2d6a:	7ab3      	ldrb	r3, [r6, #10]
    2d6c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2d6e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2d70:	7f73      	ldrb	r3, [r6, #29]
    2d72:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2d74:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2d76:	2324      	movs	r3, #36	; 0x24
    2d78:	5cf3      	ldrb	r3, [r6, r3]
    2d7a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2d7c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2d7e:	2325      	movs	r3, #37	; 0x25
    2d80:	5cf3      	ldrb	r3, [r6, r3]
    2d82:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    2d84:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2d86:	8933      	ldrh	r3, [r6, #8]
    2d88:	2bff      	cmp	r3, #255	; 0xff
    2d8a:	d00b      	beq.n	2da4 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    2d8c:	7ef2      	ldrb	r2, [r6, #27]
    2d8e:	2a00      	cmp	r2, #0
    2d90:	d003      	beq.n	2d9a <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    2d92:	22a0      	movs	r2, #160	; 0xa0
    2d94:	04d2      	lsls	r2, r2, #19
    2d96:	4317      	orrs	r7, r2
    2d98:	e002      	b.n	2da0 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2d9a:	2280      	movs	r2, #128	; 0x80
    2d9c:	0452      	lsls	r2, r2, #17
    2d9e:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    2da0:	4319      	orrs	r1, r3
    2da2:	e005      	b.n	2db0 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    2da4:	7ef3      	ldrb	r3, [r6, #27]
    2da6:	2b00      	cmp	r3, #0
    2da8:	d002      	beq.n	2db0 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2daa:	2380      	movs	r3, #128	; 0x80
    2dac:	04db      	lsls	r3, r3, #19
    2dae:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2db0:	232c      	movs	r3, #44	; 0x2c
    2db2:	5cf3      	ldrb	r3, [r6, r3]
    2db4:	2b00      	cmp	r3, #0
    2db6:	d103      	bne.n	2dc0 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2db8:	4b36      	ldr	r3, [pc, #216]	; (2e94 <usart_init+0x2f0>)
    2dba:	789b      	ldrb	r3, [r3, #2]
    2dbc:	079a      	lsls	r2, r3, #30
    2dbe:	d501      	bpl.n	2dc4 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2dc0:	2380      	movs	r3, #128	; 0x80
    2dc2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2dc4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2dc6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d1fc      	bne.n	2dc6 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2dcc:	4643      	mov	r3, r8
    2dce:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2dd0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2dd2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d1fc      	bne.n	2dd2 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2dd8:	4641      	mov	r1, r8
    2dda:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2ddc:	ab0e      	add	r3, sp, #56	; 0x38
    2dde:	2280      	movs	r2, #128	; 0x80
    2de0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2de2:	2200      	movs	r2, #0
    2de4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2de6:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2de8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    2dea:	6b32      	ldr	r2, [r6, #48]	; 0x30
    2dec:	920a      	str	r2, [sp, #40]	; 0x28
    2dee:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2df0:	930b      	str	r3, [sp, #44]	; 0x2c
    2df2:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    2df4:	970c      	str	r7, [sp, #48]	; 0x30
    2df6:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    2df8:	960d      	str	r6, [sp, #52]	; 0x34
    2dfa:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2dfc:	ae0e      	add	r6, sp, #56	; 0x38
    2dfe:	b2f9      	uxtb	r1, r7
    2e00:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2e02:	aa0a      	add	r2, sp, #40	; 0x28
    2e04:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    2e06:	2800      	cmp	r0, #0
    2e08:	d102      	bne.n	2e10 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2e0a:	1c20      	adds	r0, r4, #0
    2e0c:	4a22      	ldr	r2, [pc, #136]	; (2e98 <usart_init+0x2f4>)
    2e0e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2e10:	1c43      	adds	r3, r0, #1
    2e12:	d005      	beq.n	2e20 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2e14:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2e16:	0c00      	lsrs	r0, r0, #16
    2e18:	b2c0      	uxtb	r0, r0
    2e1a:	1c31      	adds	r1, r6, #0
    2e1c:	4a1f      	ldr	r2, [pc, #124]	; (2e9c <usart_init+0x2f8>)
    2e1e:	4790      	blx	r2
    2e20:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2e22:	2f04      	cmp	r7, #4
    2e24:	d1eb      	bne.n	2dfe <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    2e26:	2300      	movs	r3, #0
    2e28:	60eb      	str	r3, [r5, #12]
    2e2a:	612b      	str	r3, [r5, #16]
    2e2c:	616b      	str	r3, [r5, #20]
    2e2e:	61ab      	str	r3, [r5, #24]
    2e30:	61eb      	str	r3, [r5, #28]
    2e32:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    2e34:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2e36:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2e38:	2200      	movs	r2, #0
    2e3a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2e3c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2e3e:	2330      	movs	r3, #48	; 0x30
    2e40:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2e42:	2331      	movs	r3, #49	; 0x31
    2e44:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2e46:	2332      	movs	r3, #50	; 0x32
    2e48:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2e4a:	2333      	movs	r3, #51	; 0x33
    2e4c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2e4e:	6828      	ldr	r0, [r5, #0]
    2e50:	4b08      	ldr	r3, [pc, #32]	; (2e74 <usart_init+0x2d0>)
    2e52:	4798      	blx	r3
    2e54:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2e56:	4912      	ldr	r1, [pc, #72]	; (2ea0 <usart_init+0x2fc>)
    2e58:	4b12      	ldr	r3, [pc, #72]	; (2ea4 <usart_init+0x300>)
    2e5a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2e5c:	00a4      	lsls	r4, r4, #2
    2e5e:	4b12      	ldr	r3, [pc, #72]	; (2ea8 <usart_init+0x304>)
    2e60:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    2e62:	2000      	movs	r0, #0
}
    2e64:	b011      	add	sp, #68	; 0x44
    2e66:	bc3c      	pop	{r2, r3, r4, r5}
    2e68:	4690      	mov	r8, r2
    2e6a:	4699      	mov	r9, r3
    2e6c:	46a2      	mov	sl, r4
    2e6e:	46ab      	mov	fp, r5
    2e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	000005d9 	.word	0x000005d9
    2e78:	40000400 	.word	0x40000400
    2e7c:	00003ca1 	.word	0x00003ca1
    2e80:	00003c15 	.word	0x00003c15
    2e84:	00000401 	.word	0x00000401
    2e88:	00003cbd 	.word	0x00003cbd
    2e8c:	00000229 	.word	0x00000229
    2e90:	00000251 	.word	0x00000251
    2e94:	41002000 	.word	0x41002000
    2e98:	00000451 	.word	0x00000451
    2e9c:	00003d7d 	.word	0x00003d7d
    2ea0:	00002f51 	.word	0x00002f51
    2ea4:	000035d5 	.word	0x000035d5
    2ea8:	20004400 	.word	0x20004400

00002eac <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    2eac:	b510      	push	{r4, lr}
    2eae:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2eb0:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2eb2:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2eb4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2eb6:	2c00      	cmp	r4, #0
    2eb8:	d00d      	beq.n	2ed6 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2eba:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    2ebc:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2ebe:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2ec0:	2a00      	cmp	r2, #0
    2ec2:	d108      	bne.n	2ed6 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2ec4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2ec6:	2a00      	cmp	r2, #0
    2ec8:	d1fc      	bne.n	2ec4 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    2eca:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2ecc:	2102      	movs	r1, #2
    2ece:	7e1a      	ldrb	r2, [r3, #24]
    2ed0:	420a      	tst	r2, r1
    2ed2:	d0fc      	beq.n	2ece <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2ed4:	2000      	movs	r0, #0
}
    2ed6:	bd10      	pop	{r4, pc}

00002ed8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2ed8:	b510      	push	{r4, lr}
    2eda:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2edc:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2ede:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2ee0:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2ee2:	2a00      	cmp	r2, #0
    2ee4:	d033      	beq.n	2f4e <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2ee6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2ee8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    2eea:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2eec:	2b00      	cmp	r3, #0
    2eee:	d12e      	bne.n	2f4e <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2ef0:	7e23      	ldrb	r3, [r4, #24]
    2ef2:	075a      	lsls	r2, r3, #29
    2ef4:	d52b      	bpl.n	2f4e <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2ef6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d1fc      	bne.n	2ef6 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2efc:	8b63      	ldrh	r3, [r4, #26]
    2efe:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2f00:	069a      	lsls	r2, r3, #26
    2f02:	d021      	beq.n	2f48 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2f04:	079a      	lsls	r2, r3, #30
    2f06:	d503      	bpl.n	2f10 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2f08:	2302      	movs	r3, #2
    2f0a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    2f0c:	201a      	movs	r0, #26
    2f0e:	e01e      	b.n	2f4e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2f10:	075a      	lsls	r2, r3, #29
    2f12:	d503      	bpl.n	2f1c <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2f14:	2304      	movs	r3, #4
    2f16:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    2f18:	201e      	movs	r0, #30
    2f1a:	e018      	b.n	2f4e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2f1c:	07da      	lsls	r2, r3, #31
    2f1e:	d503      	bpl.n	2f28 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2f20:	2301      	movs	r3, #1
    2f22:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    2f24:	2013      	movs	r0, #19
    2f26:	e012      	b.n	2f4e <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2f28:	06da      	lsls	r2, r3, #27
    2f2a:	d505      	bpl.n	2f38 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    2f2c:	8b62      	ldrh	r2, [r4, #26]
    2f2e:	2310      	movs	r3, #16
    2f30:	4313      	orrs	r3, r2
    2f32:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    2f34:	2042      	movs	r0, #66	; 0x42
    2f36:	e00a      	b.n	2f4e <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2f38:	069a      	lsls	r2, r3, #26
    2f3a:	d505      	bpl.n	2f48 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    2f3c:	8b62      	ldrh	r2, [r4, #26]
    2f3e:	2320      	movs	r3, #32
    2f40:	4313      	orrs	r3, r2
    2f42:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    2f44:	2041      	movs	r0, #65	; 0x41
    2f46:	e002      	b.n	2f4e <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    2f48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2f4a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    2f4c:	2000      	movs	r0, #0
}
    2f4e:	bd10      	pop	{r4, pc}

00002f50 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2f52:	0080      	lsls	r0, r0, #2
    2f54:	4b64      	ldr	r3, [pc, #400]	; (30e8 <_usart_interrupt_handler+0x198>)
    2f56:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2f58:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2f5a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d1fc      	bne.n	2f5a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2f60:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2f62:	7da6      	ldrb	r6, [r4, #22]
    2f64:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    2f66:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    2f68:	5ceb      	ldrb	r3, [r5, r3]
    2f6a:	2230      	movs	r2, #48	; 0x30
    2f6c:	5caf      	ldrb	r7, [r5, r2]
    2f6e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2f70:	07f1      	lsls	r1, r6, #31
    2f72:	d520      	bpl.n	2fb6 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    2f74:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2f76:	b29b      	uxth	r3, r3
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d01a      	beq.n	2fb2 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2f7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f7e:	781a      	ldrb	r2, [r3, #0]
    2f80:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2f82:	1c59      	adds	r1, r3, #1
    2f84:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2f86:	7969      	ldrb	r1, [r5, #5]
    2f88:	2901      	cmp	r1, #1
    2f8a:	d104      	bne.n	2f96 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2f8c:	7859      	ldrb	r1, [r3, #1]
    2f8e:	0209      	lsls	r1, r1, #8
    2f90:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2f92:	3302      	adds	r3, #2
    2f94:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2f96:	05d3      	lsls	r3, r2, #23
    2f98:	0ddb      	lsrs	r3, r3, #23
    2f9a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2f9c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2f9e:	3b01      	subs	r3, #1
    2fa0:	b29b      	uxth	r3, r3
    2fa2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d106      	bne.n	2fb6 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2fa8:	2301      	movs	r3, #1
    2faa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2fac:	2302      	movs	r3, #2
    2fae:	75a3      	strb	r3, [r4, #22]
    2fb0:	e001      	b.n	2fb6 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2fb2:	2301      	movs	r3, #1
    2fb4:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2fb6:	07b2      	lsls	r2, r6, #30
    2fb8:	d509      	bpl.n	2fce <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2fba:	2302      	movs	r3, #2
    2fbc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2fbe:	2200      	movs	r2, #0
    2fc0:	2333      	movs	r3, #51	; 0x33
    2fc2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2fc4:	07fb      	lsls	r3, r7, #31
    2fc6:	d502      	bpl.n	2fce <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2fc8:	1c28      	adds	r0, r5, #0
    2fca:	68e9      	ldr	r1, [r5, #12]
    2fcc:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2fce:	0772      	lsls	r2, r6, #29
    2fd0:	d56a      	bpl.n	30a8 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    2fd2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2fd4:	b29b      	uxth	r3, r3
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d064      	beq.n	30a4 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2fda:	8b63      	ldrh	r3, [r4, #26]
    2fdc:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2fde:	0719      	lsls	r1, r3, #28
    2fe0:	d402      	bmi.n	2fe8 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2fe2:	223f      	movs	r2, #63	; 0x3f
    2fe4:	4013      	ands	r3, r2
    2fe6:	e001      	b.n	2fec <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2fe8:	2237      	movs	r2, #55	; 0x37
    2fea:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2fec:	2b00      	cmp	r3, #0
    2fee:	d037      	beq.n	3060 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2ff0:	079a      	lsls	r2, r3, #30
    2ff2:	d507      	bpl.n	3004 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2ff4:	221a      	movs	r2, #26
    2ff6:	2332      	movs	r3, #50	; 0x32
    2ff8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    2ffa:	8b62      	ldrh	r2, [r4, #26]
    2ffc:	2302      	movs	r3, #2
    2ffe:	4313      	orrs	r3, r2
    3000:	8363      	strh	r3, [r4, #26]
    3002:	e027      	b.n	3054 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    3004:	0759      	lsls	r1, r3, #29
    3006:	d507      	bpl.n	3018 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    3008:	221e      	movs	r2, #30
    300a:	2332      	movs	r3, #50	; 0x32
    300c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    300e:	8b62      	ldrh	r2, [r4, #26]
    3010:	2304      	movs	r3, #4
    3012:	4313      	orrs	r3, r2
    3014:	8363      	strh	r3, [r4, #26]
    3016:	e01d      	b.n	3054 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    3018:	07da      	lsls	r2, r3, #31
    301a:	d507      	bpl.n	302c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    301c:	2213      	movs	r2, #19
    301e:	2332      	movs	r3, #50	; 0x32
    3020:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    3022:	8b62      	ldrh	r2, [r4, #26]
    3024:	2301      	movs	r3, #1
    3026:	4313      	orrs	r3, r2
    3028:	8363      	strh	r3, [r4, #26]
    302a:	e013      	b.n	3054 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    302c:	06d9      	lsls	r1, r3, #27
    302e:	d507      	bpl.n	3040 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    3030:	2242      	movs	r2, #66	; 0x42
    3032:	2332      	movs	r3, #50	; 0x32
    3034:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    3036:	8b62      	ldrh	r2, [r4, #26]
    3038:	2310      	movs	r3, #16
    303a:	4313      	orrs	r3, r2
    303c:	8363      	strh	r3, [r4, #26]
    303e:	e009      	b.n	3054 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    3040:	2220      	movs	r2, #32
    3042:	421a      	tst	r2, r3
    3044:	d006      	beq.n	3054 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    3046:	2241      	movs	r2, #65	; 0x41
    3048:	2332      	movs	r3, #50	; 0x32
    304a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    304c:	8b62      	ldrh	r2, [r4, #26]
    304e:	2320      	movs	r3, #32
    3050:	4313      	orrs	r3, r2
    3052:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    3054:	077a      	lsls	r2, r7, #29
    3056:	d527      	bpl.n	30a8 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    3058:	1c28      	adds	r0, r5, #0
    305a:	696b      	ldr	r3, [r5, #20]
    305c:	4798      	blx	r3
    305e:	e023      	b.n	30a8 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3060:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    3062:	05d2      	lsls	r2, r2, #23
    3064:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    3066:	b2d3      	uxtb	r3, r2
    3068:	6a69      	ldr	r1, [r5, #36]	; 0x24
    306a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    306c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    306e:	1c59      	adds	r1, r3, #1
    3070:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    3072:	7969      	ldrb	r1, [r5, #5]
    3074:	2901      	cmp	r1, #1
    3076:	d104      	bne.n	3082 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    3078:	0a12      	lsrs	r2, r2, #8
    307a:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    307c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    307e:	3301      	adds	r3, #1
    3080:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    3082:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3084:	3b01      	subs	r3, #1
    3086:	b29b      	uxth	r3, r3
    3088:	85ab      	strh	r3, [r5, #44]	; 0x2c
    308a:	2b00      	cmp	r3, #0
    308c:	d10c      	bne.n	30a8 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    308e:	2304      	movs	r3, #4
    3090:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    3092:	2200      	movs	r2, #0
    3094:	2332      	movs	r3, #50	; 0x32
    3096:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    3098:	07ba      	lsls	r2, r7, #30
    309a:	d505      	bpl.n	30a8 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    309c:	1c28      	adds	r0, r5, #0
    309e:	692b      	ldr	r3, [r5, #16]
    30a0:	4798      	blx	r3
    30a2:	e001      	b.n	30a8 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    30a4:	2304      	movs	r3, #4
    30a6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    30a8:	06f1      	lsls	r1, r6, #27
    30aa:	d507      	bpl.n	30bc <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    30ac:	2310      	movs	r3, #16
    30ae:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    30b0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    30b2:	06fa      	lsls	r2, r7, #27
    30b4:	d502      	bpl.n	30bc <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    30b6:	1c28      	adds	r0, r5, #0
    30b8:	69eb      	ldr	r3, [r5, #28]
    30ba:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    30bc:	06b1      	lsls	r1, r6, #26
    30be:	d507      	bpl.n	30d0 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    30c0:	2320      	movs	r3, #32
    30c2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    30c4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    30c6:	073a      	lsls	r2, r7, #28
    30c8:	d502      	bpl.n	30d0 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    30ca:	1c28      	adds	r0, r5, #0
    30cc:	69ab      	ldr	r3, [r5, #24]
    30ce:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    30d0:	0731      	lsls	r1, r6, #28
    30d2:	d507      	bpl.n	30e4 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    30d4:	2308      	movs	r3, #8
    30d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    30d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    30da:	06ba      	lsls	r2, r7, #26
    30dc:	d502      	bpl.n	30e4 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    30de:	6a2b      	ldr	r3, [r5, #32]
    30e0:	1c28      	adds	r0, r5, #0
    30e2:	4798      	blx	r3
		}
	}
#endif
}
    30e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	20004400 	.word	0x20004400

000030ec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    30ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ee:	4647      	mov	r7, r8
    30f0:	b480      	push	{r7}
    30f2:	b088      	sub	sp, #32
    30f4:	1c05      	adds	r5, r0, #0
    30f6:	1c0c      	adds	r4, r1, #0
    30f8:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    30fa:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    30fc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    30fe:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3100:	079a      	lsls	r2, r3, #30
    3102:	d500      	bpl.n	3106 <spi_init+0x1a>
    3104:	e0df      	b.n	32c6 <spi_init+0x1da>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3106:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3108:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    310a:	07da      	lsls	r2, r3, #31
    310c:	d500      	bpl.n	3110 <spi_init+0x24>
    310e:	e0da      	b.n	32c6 <spi_init+0x1da>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3110:	1c08      	adds	r0, r1, #0
    3112:	4b6f      	ldr	r3, [pc, #444]	; (32d0 <spi_init+0x1e4>)
    3114:	4798      	blx	r3
    3116:	4b6f      	ldr	r3, [pc, #444]	; (32d4 <spi_init+0x1e8>)
    3118:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    311a:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    311c:	2701      	movs	r7, #1
    311e:	4097      	lsls	r7, r2
    3120:	1c3a      	adds	r2, r7, #0
    3122:	430a      	orrs	r2, r1
    3124:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3126:	a907      	add	r1, sp, #28
    3128:	2724      	movs	r7, #36	; 0x24
    312a:	5df3      	ldrb	r3, [r6, r7]
    312c:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    312e:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3130:	b2c0      	uxtb	r0, r0
    3132:	4680      	mov	r8, r0
    3134:	4b68      	ldr	r3, [pc, #416]	; (32d8 <spi_init+0x1ec>)
    3136:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3138:	4640      	mov	r0, r8
    313a:	4b68      	ldr	r3, [pc, #416]	; (32dc <spi_init+0x1f0>)
    313c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    313e:	5df0      	ldrb	r0, [r6, r7]
    3140:	2100      	movs	r1, #0
    3142:	4b67      	ldr	r3, [pc, #412]	; (32e0 <spi_init+0x1f4>)
    3144:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3146:	7833      	ldrb	r3, [r6, #0]
    3148:	2b01      	cmp	r3, #1
    314a:	d103      	bne.n	3154 <spi_init+0x68>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    314c:	6822      	ldr	r2, [r4, #0]
    314e:	230c      	movs	r3, #12
    3150:	4313      	orrs	r3, r2
    3152:	6023      	str	r3, [r4, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    3154:	7833      	ldrb	r3, [r6, #0]
    3156:	2b00      	cmp	r3, #0
    3158:	d000      	beq.n	315c <spi_init+0x70>
    315a:	e0b1      	b.n	32c0 <spi_init+0x1d4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    315c:	6822      	ldr	r2, [r4, #0]
    315e:	2308      	movs	r3, #8
    3160:	4313      	orrs	r3, r2
    3162:	6023      	str	r3, [r4, #0]
    3164:	e0ac      	b.n	32c0 <spi_init+0x1d4>
    3166:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    3168:	60d1      	str	r1, [r2, #12]
    316a:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    316c:	2b1c      	cmp	r3, #28
    316e:	d1fa      	bne.n	3166 <spi_init+0x7a>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    3170:	2300      	movs	r3, #0
    3172:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3174:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3176:	2400      	movs	r4, #0
    3178:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    317a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    317c:	2336      	movs	r3, #54	; 0x36
    317e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3180:	2337      	movs	r3, #55	; 0x37
    3182:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3184:	2338      	movs	r3, #56	; 0x38
    3186:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3188:	2303      	movs	r3, #3
    318a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    318c:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    318e:	6828      	ldr	r0, [r5, #0]
    3190:	4b4f      	ldr	r3, [pc, #316]	; (32d0 <spi_init+0x1e4>)
    3192:	4798      	blx	r3
    3194:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3196:	4953      	ldr	r1, [pc, #332]	; (32e4 <spi_init+0x1f8>)
    3198:	4b53      	ldr	r3, [pc, #332]	; (32e8 <spi_init+0x1fc>)
    319a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    319c:	00bf      	lsls	r7, r7, #2
    319e:	4b53      	ldr	r3, [pc, #332]	; (32ec <spi_init+0x200>)
    31a0:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    31a2:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    31a4:	ab02      	add	r3, sp, #8
    31a6:	2280      	movs	r2, #128	; 0x80
    31a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    31aa:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    31ac:	2201      	movs	r2, #1
    31ae:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    31b0:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    31b2:	7833      	ldrb	r3, [r6, #0]
    31b4:	2b00      	cmp	r3, #0
    31b6:	d102      	bne.n	31be <spi_init+0xd2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    31b8:	2200      	movs	r2, #0
    31ba:	ab02      	add	r3, sp, #8
    31bc:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    31be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    31c0:	9303      	str	r3, [sp, #12]
    31c2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    31c4:	9004      	str	r0, [sp, #16]
    31c6:	6b32      	ldr	r2, [r6, #48]	; 0x30
    31c8:	9205      	str	r2, [sp, #20]
    31ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
    31cc:	9306      	str	r3, [sp, #24]
    31ce:	2400      	movs	r4, #0
    31d0:	b2e1      	uxtb	r1, r4
    31d2:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    31d4:	aa03      	add	r2, sp, #12
    31d6:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    31d8:	2800      	cmp	r0, #0
    31da:	d102      	bne.n	31e2 <spi_init+0xf6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    31dc:	1c38      	adds	r0, r7, #0
    31de:	4a44      	ldr	r2, [pc, #272]	; (32f0 <spi_init+0x204>)
    31e0:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    31e2:	1c43      	adds	r3, r0, #1
    31e4:	d006      	beq.n	31f4 <spi_init+0x108>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    31e6:	466a      	mov	r2, sp
    31e8:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    31ea:	0c00      	lsrs	r0, r0, #16
    31ec:	b2c0      	uxtb	r0, r0
    31ee:	a902      	add	r1, sp, #8
    31f0:	4b40      	ldr	r3, [pc, #256]	; (32f4 <spi_init+0x208>)
    31f2:	4798      	blx	r3
    31f4:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    31f6:	2c04      	cmp	r4, #4
    31f8:	d1ea      	bne.n	31d0 <spi_init+0xe4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    31fa:	7833      	ldrb	r3, [r6, #0]
    31fc:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    31fe:	7c33      	ldrb	r3, [r6, #16]
    3200:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3202:	7cb3      	ldrb	r3, [r6, #18]
    3204:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3206:	7d33      	ldrb	r3, [r6, #20]
    3208:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    320a:	2200      	movs	r2, #0
    320c:	466b      	mov	r3, sp
    320e:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3210:	7833      	ldrb	r3, [r6, #0]
    3212:	2b01      	cmp	r3, #1
    3214:	d114      	bne.n	3240 <spi_init+0x154>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3216:	6828      	ldr	r0, [r5, #0]
    3218:	4b2d      	ldr	r3, [pc, #180]	; (32d0 <spi_init+0x1e4>)
    321a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    321c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    321e:	b2c0      	uxtb	r0, r0
    3220:	4b35      	ldr	r3, [pc, #212]	; (32f8 <spi_init+0x20c>)
    3222:	4798      	blx	r3
    3224:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3226:	69b0      	ldr	r0, [r6, #24]
    3228:	466a      	mov	r2, sp
    322a:	3206      	adds	r2, #6
    322c:	4b33      	ldr	r3, [pc, #204]	; (32fc <spi_init+0x210>)
    322e:	4798      	blx	r3
    3230:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3232:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3234:	2b00      	cmp	r3, #0
    3236:	d146      	bne.n	32c6 <spi_init+0x1da>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3238:	466b      	mov	r3, sp
    323a:	3306      	adds	r3, #6
    323c:	781b      	ldrb	r3, [r3, #0]
    323e:	733b      	strb	r3, [r7, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    3240:	7833      	ldrb	r3, [r6, #0]
    3242:	2b00      	cmp	r3, #0
    3244:	d10f      	bne.n	3266 <spi_init+0x17a>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    3246:	69b1      	ldr	r1, [r6, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    3248:	8bb3      	ldrh	r3, [r6, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    324a:	6a78      	ldr	r0, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    324c:	7ff4      	ldrb	r4, [r6, #31]
    324e:	0424      	lsls	r4, r4, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3250:	7fb2      	ldrb	r2, [r6, #30]
    3252:	4322      	orrs	r2, r4

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    3254:	4302      	orrs	r2, r0
    3256:	627a      	str	r2, [r7, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    3258:	2220      	movs	r2, #32
    325a:	5cb2      	ldrb	r2, [r6, r2]
    325c:	2a00      	cmp	r2, #0
    325e:	d004      	beq.n	326a <spi_init+0x17e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    3260:	2240      	movs	r2, #64	; 0x40
    3262:	4313      	orrs	r3, r2
    3264:	e001      	b.n	326a <spi_init+0x17e>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    3266:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    3268:	2100      	movs	r1, #0
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    326a:	68b2      	ldr	r2, [r6, #8]
    326c:	6870      	ldr	r0, [r6, #4]
    326e:	4302      	orrs	r2, r0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3270:	68f0      	ldr	r0, [r6, #12]
    3272:	4302      	orrs	r2, r0

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3274:	430a      	orrs	r2, r1

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3276:	7c31      	ldrb	r1, [r6, #16]
    3278:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    327a:	7c71      	ldrb	r1, [r6, #17]
    327c:	2900      	cmp	r1, #0
    327e:	d103      	bne.n	3288 <spi_init+0x19c>
    3280:	491f      	ldr	r1, [pc, #124]	; (3300 <spi_init+0x214>)
    3282:	7889      	ldrb	r1, [r1, #2]
    3284:	0788      	lsls	r0, r1, #30
    3286:	d501      	bpl.n	328c <spi_init+0x1a0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3288:	2180      	movs	r1, #128	; 0x80
    328a:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    328c:	7cb1      	ldrb	r1, [r6, #18]
    328e:	2900      	cmp	r1, #0
    3290:	d002      	beq.n	3298 <spi_init+0x1ac>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3292:	2180      	movs	r1, #128	; 0x80
    3294:	0289      	lsls	r1, r1, #10
    3296:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3298:	7cf1      	ldrb	r1, [r6, #19]
    329a:	2900      	cmp	r1, #0
    329c:	d002      	beq.n	32a4 <spi_init+0x1b8>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    329e:	2180      	movs	r1, #128	; 0x80
    32a0:	0089      	lsls	r1, r1, #2
    32a2:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    32a4:	7d31      	ldrb	r1, [r6, #20]
    32a6:	2900      	cmp	r1, #0
    32a8:	d002      	beq.n	32b0 <spi_init+0x1c4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    32aa:	2180      	movs	r1, #128	; 0x80
    32ac:	0189      	lsls	r1, r1, #6
    32ae:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    32b0:	6839      	ldr	r1, [r7, #0]
    32b2:	430a      	orrs	r2, r1
    32b4:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    32b6:	687a      	ldr	r2, [r7, #4]
    32b8:	4313      	orrs	r3, r2
    32ba:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    32bc:	2000      	movs	r0, #0
    32be:	e002      	b.n	32c6 <spi_init+0x1da>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    32c0:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    32c2:	2100      	movs	r1, #0
    32c4:	e74f      	b.n	3166 <spi_init+0x7a>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    32c6:	b008      	add	sp, #32
    32c8:	bc04      	pop	{r2}
    32ca:	4690      	mov	r8, r2
    32cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	000005d9 	.word	0x000005d9
    32d4:	40000400 	.word	0x40000400
    32d8:	00003ca1 	.word	0x00003ca1
    32dc:	00003c15 	.word	0x00003c15
    32e0:	00000401 	.word	0x00000401
    32e4:	000033f1 	.word	0x000033f1
    32e8:	000035d5 	.word	0x000035d5
    32ec:	20004400 	.word	0x20004400
    32f0:	00000451 	.word	0x00000451
    32f4:	00003d7d 	.word	0x00003d7d
    32f8:	00003cbd 	.word	0x00003cbd
    32fc:	00000229 	.word	0x00000229
    3300:	41002000 	.word	0x41002000

00003304 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3304:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3306:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3308:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    330a:	2c01      	cmp	r4, #1
    330c:	d16c      	bne.n	33e8 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    330e:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3310:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3312:	2c00      	cmp	r4, #0
    3314:	d168      	bne.n	33e8 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
    3316:	2a00      	cmp	r2, #0
    3318:	d057      	beq.n	33ca <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    331a:	784b      	ldrb	r3, [r1, #1]
    331c:	2b00      	cmp	r3, #0
    331e:	d044      	beq.n	33aa <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3320:	6802      	ldr	r2, [r0, #0]
    3322:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3324:	07dc      	lsls	r4, r3, #31
    3326:	d40f      	bmi.n	3348 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3328:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    332a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    332c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    332e:	2900      	cmp	r1, #0
    3330:	d103      	bne.n	333a <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
    3332:	095a      	lsrs	r2, r3, #5
    3334:	01d2      	lsls	r2, r2, #7
    3336:	492d      	ldr	r1, [pc, #180]	; (33ec <spi_select_slave+0xe8>)
    3338:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    333a:	211f      	movs	r1, #31
    333c:	400b      	ands	r3, r1
    333e:	2101      	movs	r1, #1
    3340:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3342:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    3344:	2305      	movs	r3, #5
    3346:	e04f      	b.n	33e8 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3348:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    334a:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    334c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    334e:	2c00      	cmp	r4, #0
    3350:	d103      	bne.n	335a <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
    3352:	095a      	lsrs	r2, r3, #5
    3354:	01d2      	lsls	r2, r2, #7
    3356:	4c25      	ldr	r4, [pc, #148]	; (33ec <spi_select_slave+0xe8>)
    3358:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    335a:	241f      	movs	r4, #31
    335c:	4023      	ands	r3, r4
    335e:	2401      	movs	r4, #1
    3360:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3362:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    3364:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3366:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3368:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    336a:	07d4      	lsls	r4, r2, #31
    336c:	d500      	bpl.n	3370 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    336e:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    3370:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3372:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    3374:	2a00      	cmp	r2, #0
    3376:	d137      	bne.n	33e8 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3378:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    337a:	2104      	movs	r1, #4
    337c:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    337e:	420b      	tst	r3, r1
    3380:	d0fc      	beq.n	337c <spi_select_slave+0x78>
    3382:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3384:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3386:	074c      	lsls	r4, r1, #29
    3388:	d52e      	bpl.n	33e8 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    338a:	8b53      	ldrh	r3, [r2, #26]
    338c:	0759      	lsls	r1, r3, #29
    338e:	d503      	bpl.n	3398 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3390:	8b51      	ldrh	r1, [r2, #26]
    3392:	2304      	movs	r3, #4
    3394:	430b      	orrs	r3, r1
    3396:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3398:	7983      	ldrb	r3, [r0, #6]
    339a:	2b01      	cmp	r3, #1
    339c:	d102      	bne.n	33a4 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    339e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    33a0:	2300      	movs	r3, #0
    33a2:	e021      	b.n	33e8 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    33a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    33a6:	2300      	movs	r3, #0
    33a8:	e01e      	b.n	33e8 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    33aa:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    33ac:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    33ae:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    33b0:	2900      	cmp	r1, #0
    33b2:	d103      	bne.n	33bc <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
    33b4:	095a      	lsrs	r2, r3, #5
    33b6:	01d2      	lsls	r2, r2, #7
    33b8:	4c0c      	ldr	r4, [pc, #48]	; (33ec <spi_select_slave+0xe8>)
    33ba:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    33bc:	211f      	movs	r1, #31
    33be:	400b      	ands	r3, r1
    33c0:	2101      	movs	r1, #1
    33c2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    33c4:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    33c6:	2300      	movs	r3, #0
    33c8:	e00e      	b.n	33e8 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    33ca:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    33cc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    33ce:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    33d0:	2900      	cmp	r1, #0
    33d2:	d103      	bne.n	33dc <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
    33d4:	095a      	lsrs	r2, r3, #5
    33d6:	01d2      	lsls	r2, r2, #7
    33d8:	4904      	ldr	r1, [pc, #16]	; (33ec <spi_select_slave+0xe8>)
    33da:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    33dc:	211f      	movs	r1, #31
    33de:	400b      	ands	r3, r1
    33e0:	2101      	movs	r1, #1
    33e2:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    33e4:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    33e6:	2300      	movs	r3, #0
}
    33e8:	1c18      	adds	r0, r3, #0
    33ea:	bd10      	pop	{r4, pc}
    33ec:	41004400 	.word	0x41004400

000033f0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    33f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    33f2:	0080      	lsls	r0, r0, #2
    33f4:	4b74      	ldr	r3, [pc, #464]	; (35c8 <_spi_interrupt_handler+0x1d8>)
    33f6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    33f8:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    33fa:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    33fc:	5ce3      	ldrb	r3, [r4, r3]
    33fe:	2237      	movs	r2, #55	; 0x37
    3400:	5ca7      	ldrb	r7, [r4, r2]
    3402:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3404:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3406:	7dae      	ldrb	r6, [r5, #22]
    3408:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    340a:	07f1      	lsls	r1, r6, #31
    340c:	d549      	bpl.n	34a2 <_spi_interrupt_handler+0xb2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    340e:	7963      	ldrb	r3, [r4, #5]
    3410:	2b01      	cmp	r3, #1
    3412:	d116      	bne.n	3442 <_spi_interrupt_handler+0x52>
			(module->dir == SPI_DIRECTION_READ)) {
    3414:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3416:	2b00      	cmp	r3, #0
    3418:	d10f      	bne.n	343a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    341a:	4b6c      	ldr	r3, [pc, #432]	; (35cc <_spi_interrupt_handler+0x1dc>)
    341c:	881b      	ldrh	r3, [r3, #0]
    341e:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    3420:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3422:	3b01      	subs	r3, #1
    3424:	b29b      	uxth	r3, r3
    3426:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    3428:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    342a:	b29b      	uxth	r3, r3
    342c:	2b00      	cmp	r3, #0
    342e:	d101      	bne.n	3434 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3430:	2301      	movs	r3, #1
    3432:	752b      	strb	r3, [r5, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    3434:	7963      	ldrb	r3, [r4, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    3436:	2b01      	cmp	r3, #1
    3438:	d103      	bne.n	3442 <_spi_interrupt_handler+0x52>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    343a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    343c:	2b00      	cmp	r3, #0
    343e:	d105      	bne.n	344c <_spi_interrupt_handler+0x5c>
    3440:	e02f      	b.n	34a2 <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    3442:	2b00      	cmp	r3, #0
    3444:	d12d      	bne.n	34a2 <_spi_interrupt_handler+0xb2>
			(module->dir != SPI_DIRECTION_READ))
    3446:	7a63      	ldrb	r3, [r4, #9]
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    3448:	2b00      	cmp	r3, #0
    344a:	d02a      	beq.n	34a2 <_spi_interrupt_handler+0xb2>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    344c:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    344e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3450:	7819      	ldrb	r1, [r3, #0]
    3452:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    3454:	1c58      	adds	r0, r3, #1
    3456:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3458:	79a0      	ldrb	r0, [r4, #6]
    345a:	2801      	cmp	r0, #1
    345c:	d104      	bne.n	3468 <_spi_interrupt_handler+0x78>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    345e:	7858      	ldrb	r0, [r3, #1]
    3460:	0200      	lsls	r0, r0, #8
    3462:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    3464:	3302      	adds	r3, #2
    3466:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3468:	05cb      	lsls	r3, r1, #23
    346a:	0ddb      	lsrs	r3, r3, #23
    346c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    346e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3470:	3b01      	subs	r3, #1
    3472:	b29b      	uxth	r3, r3
    3474:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    3476:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3478:	b29b      	uxth	r3, r3
    347a:	2b00      	cmp	r3, #0
    347c:	d111      	bne.n	34a2 <_spi_interrupt_handler+0xb2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    347e:	2301      	movs	r3, #1
    3480:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    3482:	7a63      	ldrb	r3, [r4, #9]
    3484:	2b01      	cmp	r3, #1
    3486:	d10c      	bne.n	34a2 <_spi_interrupt_handler+0xb2>
    3488:	79e3      	ldrb	r3, [r4, #7]
    348a:	2b00      	cmp	r3, #0
    348c:	d109      	bne.n	34a2 <_spi_interrupt_handler+0xb2>
						!(module->receiver_enabled)) {
					/* Buffer sent with receiver disabled */
					module->dir = SPI_DIRECTION_IDLE;
    348e:	2303      	movs	r3, #3
    3490:	7263      	strb	r3, [r4, #9]
					module->status = STATUS_OK;
    3492:	2200      	movs	r2, #0
    3494:	2338      	movs	r3, #56	; 0x38
    3496:	54e2      	strb	r2, [r4, r3]
					/* Run callback if registered and enabled */
					if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3498:	07fa      	lsls	r2, r7, #31
    349a:	d502      	bpl.n	34a2 <_spi_interrupt_handler+0xb2>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
									(module);
    349c:	1c20      	adds	r0, r4, #0
    349e:	68e3      	ldr	r3, [r4, #12]
    34a0:	4798      	blx	r3
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    34a2:	0771      	lsls	r1, r6, #29
    34a4:	d561      	bpl.n	356a <_spi_interrupt_handler+0x17a>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    34a6:	8b6b      	ldrh	r3, [r5, #26]
    34a8:	075a      	lsls	r2, r3, #29
    34aa:	d514      	bpl.n	34d6 <_spi_interrupt_handler+0xe6>
			if (module->dir != SPI_DIRECTION_WRITE) {
    34ac:	7a63      	ldrb	r3, [r4, #9]
    34ae:	2b01      	cmp	r3, #1
    34b0:	d00b      	beq.n	34ca <_spi_interrupt_handler+0xda>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    34b2:	221e      	movs	r2, #30
    34b4:	2338      	movs	r3, #56	; 0x38
    34b6:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    34b8:	2303      	movs	r3, #3
    34ba:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    34bc:	2305      	movs	r3, #5
    34be:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    34c0:	073b      	lsls	r3, r7, #28
    34c2:	d502      	bpl.n	34ca <_spi_interrupt_handler+0xda>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    34c4:	1c20      	adds	r0, r4, #0
    34c6:	69a1      	ldr	r1, [r4, #24]
    34c8:	4788      	blx	r1
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    34ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    34cc:	8b6a      	ldrh	r2, [r5, #26]
    34ce:	2304      	movs	r3, #4
    34d0:	4313      	orrs	r3, r2
    34d2:	836b      	strh	r3, [r5, #26]
    34d4:	e049      	b.n	356a <_spi_interrupt_handler+0x17a>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    34d6:	7a63      	ldrb	r3, [r4, #9]
    34d8:	2b01      	cmp	r3, #1
    34da:	d116      	bne.n	350a <_spi_interrupt_handler+0x11a>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    34dc:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    34de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    34e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    34e2:	3b01      	subs	r3, #1
    34e4:	b29b      	uxth	r3, r3
    34e6:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    34e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    34ea:	b29b      	uxth	r3, r3
    34ec:	2b00      	cmp	r3, #0
    34ee:	d13c      	bne.n	356a <_spi_interrupt_handler+0x17a>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    34f0:	2304      	movs	r3, #4
    34f2:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
    34f4:	2200      	movs	r2, #0
    34f6:	2338      	movs	r3, #56	; 0x38
    34f8:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    34fa:	2303      	movs	r3, #3
    34fc:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    34fe:	07fa      	lsls	r2, r7, #31
    3500:	d533      	bpl.n	356a <_spi_interrupt_handler+0x17a>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3502:	1c20      	adds	r0, r4, #0
    3504:	68e3      	ldr	r3, [r4, #12]
    3506:	4798      	blx	r3
    3508:	e02f      	b.n	356a <_spi_interrupt_handler+0x17a>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    350a:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    350c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    350e:	05d2      	lsls	r2, r2, #23
    3510:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    3512:	b2d3      	uxtb	r3, r2
    3514:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3516:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    3518:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    351a:	1c59      	adds	r1, r3, #1
    351c:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    351e:	79a1      	ldrb	r1, [r4, #6]
    3520:	2901      	cmp	r1, #1
    3522:	d104      	bne.n	352e <_spi_interrupt_handler+0x13e>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3524:	0a12      	lsrs	r2, r2, #8
    3526:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    3528:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    352a:	3301      	adds	r3, #1
    352c:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    352e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3530:	3b01      	subs	r3, #1
    3532:	b29b      	uxth	r3, r3
    3534:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    3536:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3538:	b29b      	uxth	r3, r3
    353a:	2b00      	cmp	r3, #0
    353c:	d115      	bne.n	356a <_spi_interrupt_handler+0x17a>
					module->status = STATUS_OK;
    353e:	2200      	movs	r2, #0
    3540:	2338      	movs	r3, #56	; 0x38
    3542:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3544:	2304      	movs	r3, #4
    3546:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3548:	7a63      	ldrb	r3, [r4, #9]
    354a:	2b02      	cmp	r3, #2
    354c:	d105      	bne.n	355a <_spi_interrupt_handler+0x16a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    354e:	077a      	lsls	r2, r7, #29
    3550:	d50b      	bpl.n	356a <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3552:	1c20      	adds	r0, r4, #0
    3554:	6963      	ldr	r3, [r4, #20]
    3556:	4798      	blx	r3
    3558:	e007      	b.n	356a <_spi_interrupt_handler+0x17a>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    355a:	7a63      	ldrb	r3, [r4, #9]
    355c:	2b00      	cmp	r3, #0
    355e:	d104      	bne.n	356a <_spi_interrupt_handler+0x17a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3560:	07b9      	lsls	r1, r7, #30
    3562:	d502      	bpl.n	356a <_spi_interrupt_handler+0x17a>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3564:	1c20      	adds	r0, r4, #0
    3566:	6922      	ldr	r2, [r4, #16]
    3568:	4790      	blx	r2
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    356a:	07b3      	lsls	r3, r6, #30
    356c:	d513      	bpl.n	3596 <_spi_interrupt_handler+0x1a6>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    356e:	7963      	ldrb	r3, [r4, #5]
    3570:	2b00      	cmp	r3, #0
    3572:	d110      	bne.n	3596 <_spi_interrupt_handler+0x1a6>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    3574:	2307      	movs	r3, #7
    3576:	752b      	strb	r3, [r5, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3578:	2302      	movs	r3, #2
    357a:	762b      	strb	r3, [r5, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    357c:	2303      	movs	r3, #3
    357e:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    3580:	2300      	movs	r3, #0
    3582:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    3584:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    3586:	2338      	movs	r3, #56	; 0x38
    3588:	2200      	movs	r2, #0
    358a:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    358c:	06f9      	lsls	r1, r7, #27
    358e:	d502      	bpl.n	3596 <_spi_interrupt_handler+0x1a6>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
					(module);
    3590:	1c20      	adds	r0, r4, #0
    3592:	69e2      	ldr	r2, [r4, #28]
    3594:	4790      	blx	r2
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    3596:	0733      	lsls	r3, r6, #28
    3598:	d50a      	bpl.n	35b0 <_spi_interrupt_handler+0x1c0>
			if (module->mode == SPI_MODE_SLAVE) {
    359a:	7963      	ldrb	r3, [r4, #5]
    359c:	2b00      	cmp	r3, #0
    359e:	d107      	bne.n	35b0 <_spi_interrupt_handler+0x1c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    35a0:	2308      	movs	r3, #8
    35a2:	752b      	strb	r3, [r5, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    35a4:	762b      	strb	r3, [r5, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    35a6:	06b9      	lsls	r1, r7, #26
    35a8:	d502      	bpl.n	35b0 <_spi_interrupt_handler+0x1c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    35aa:	1c20      	adds	r0, r4, #0
    35ac:	6a22      	ldr	r2, [r4, #32]
    35ae:	4790      	blx	r2
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    35b0:	09f6      	lsrs	r6, r6, #7
    35b2:	d007      	beq.n	35c4 <_spi_interrupt_handler+0x1d4>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    35b4:	2380      	movs	r3, #128	; 0x80
    35b6:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    35b8:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    35ba:	067b      	lsls	r3, r7, #25
    35bc:	d502      	bpl.n	35c4 <_spi_interrupt_handler+0x1d4>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    35be:	6a63      	ldr	r3, [r4, #36]	; 0x24
    35c0:	1c20      	adds	r0, r4, #0
    35c2:	4798      	blx	r3
		}
	}
#  endif
}
    35c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	20004400 	.word	0x20004400
    35cc:	200043fc 	.word	0x200043fc

000035d0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    35d0:	4770      	bx	lr
    35d2:	46c0      	nop			; (mov r8, r8)

000035d4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    35d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    35d6:	4b0a      	ldr	r3, [pc, #40]	; (3600 <_sercom_set_handler+0x2c>)
    35d8:	781b      	ldrb	r3, [r3, #0]
    35da:	2b00      	cmp	r3, #0
    35dc:	d10c      	bne.n	35f8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    35de:	4f09      	ldr	r7, [pc, #36]	; (3604 <_sercom_set_handler+0x30>)
    35e0:	4e09      	ldr	r6, [pc, #36]	; (3608 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    35e2:	4d0a      	ldr	r5, [pc, #40]	; (360c <_sercom_set_handler+0x38>)
    35e4:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    35e6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    35e8:	195a      	adds	r2, r3, r5
    35ea:	6014      	str	r4, [r2, #0]
    35ec:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    35ee:	2b18      	cmp	r3, #24
    35f0:	d1f9      	bne.n	35e6 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    35f2:	2201      	movs	r2, #1
    35f4:	4b02      	ldr	r3, [pc, #8]	; (3600 <_sercom_set_handler+0x2c>)
    35f6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    35f8:	0080      	lsls	r0, r0, #2
    35fa:	4b02      	ldr	r3, [pc, #8]	; (3604 <_sercom_set_handler+0x30>)
    35fc:	50c1      	str	r1, [r0, r3]
}
    35fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3600:	200041e4 	.word	0x200041e4
    3604:	200041e8 	.word	0x200041e8
    3608:	000035d1 	.word	0x000035d1
    360c:	20004400 	.word	0x20004400

00003610 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3610:	b510      	push	{r4, lr}
    3612:	b082      	sub	sp, #8
    3614:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3616:	4668      	mov	r0, sp
    3618:	4905      	ldr	r1, [pc, #20]	; (3630 <_sercom_get_interrupt_vector+0x20>)
    361a:	2206      	movs	r2, #6
    361c:	4b05      	ldr	r3, [pc, #20]	; (3634 <_sercom_get_interrupt_vector+0x24>)
    361e:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3620:	1c20      	adds	r0, r4, #0
    3622:	4b05      	ldr	r3, [pc, #20]	; (3638 <_sercom_get_interrupt_vector+0x28>)
    3624:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3626:	466b      	mov	r3, sp
    3628:	5618      	ldrsb	r0, [r3, r0]
}
    362a:	b002      	add	sp, #8
    362c:	bd10      	pop	{r4, pc}
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	00005438 	.word	0x00005438
    3634:	000044a5 	.word	0x000044a5
    3638:	000005d9 	.word	0x000005d9

0000363c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    363c:	b508      	push	{r3, lr}
    363e:	4b02      	ldr	r3, [pc, #8]	; (3648 <SERCOM0_Handler+0xc>)
    3640:	681b      	ldr	r3, [r3, #0]
    3642:	2000      	movs	r0, #0
    3644:	4798      	blx	r3
    3646:	bd08      	pop	{r3, pc}
    3648:	200041e8 	.word	0x200041e8

0000364c <SERCOM1_Handler>:
    364c:	b508      	push	{r3, lr}
    364e:	4b02      	ldr	r3, [pc, #8]	; (3658 <SERCOM1_Handler+0xc>)
    3650:	685b      	ldr	r3, [r3, #4]
    3652:	2001      	movs	r0, #1
    3654:	4798      	blx	r3
    3656:	bd08      	pop	{r3, pc}
    3658:	200041e8 	.word	0x200041e8

0000365c <SERCOM2_Handler>:
    365c:	b508      	push	{r3, lr}
    365e:	4b02      	ldr	r3, [pc, #8]	; (3668 <SERCOM2_Handler+0xc>)
    3660:	689b      	ldr	r3, [r3, #8]
    3662:	2002      	movs	r0, #2
    3664:	4798      	blx	r3
    3666:	bd08      	pop	{r3, pc}
    3668:	200041e8 	.word	0x200041e8

0000366c <SERCOM3_Handler>:
    366c:	b508      	push	{r3, lr}
    366e:	4b02      	ldr	r3, [pc, #8]	; (3678 <SERCOM3_Handler+0xc>)
    3670:	68db      	ldr	r3, [r3, #12]
    3672:	2003      	movs	r0, #3
    3674:	4798      	blx	r3
    3676:	bd08      	pop	{r3, pc}
    3678:	200041e8 	.word	0x200041e8

0000367c <SERCOM4_Handler>:
    367c:	b508      	push	{r3, lr}
    367e:	4b02      	ldr	r3, [pc, #8]	; (3688 <SERCOM4_Handler+0xc>)
    3680:	691b      	ldr	r3, [r3, #16]
    3682:	2004      	movs	r0, #4
    3684:	4798      	blx	r3
    3686:	bd08      	pop	{r3, pc}
    3688:	200041e8 	.word	0x200041e8

0000368c <SERCOM5_Handler>:
    368c:	b508      	push	{r3, lr}
    368e:	4b02      	ldr	r3, [pc, #8]	; (3698 <SERCOM5_Handler+0xc>)
    3690:	695b      	ldr	r3, [r3, #20]
    3692:	2005      	movs	r0, #5
    3694:	4798      	blx	r3
    3696:	bd08      	pop	{r3, pc}
    3698:	200041e8 	.word	0x200041e8

0000369c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    369c:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    369e:	2a00      	cmp	r2, #0
    36a0:	d10f      	bne.n	36c2 <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    36a2:	008b      	lsls	r3, r1, #2
    36a4:	4a08      	ldr	r2, [pc, #32]	; (36c8 <extint_register_callback+0x2c>)
    36a6:	589a      	ldr	r2, [r3, r2]
    36a8:	2a00      	cmp	r2, #0
    36aa:	d104      	bne.n	36b6 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
    36ac:	1c19      	adds	r1, r3, #0
    36ae:	4b06      	ldr	r3, [pc, #24]	; (36c8 <extint_register_callback+0x2c>)
    36b0:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    36b2:	2300      	movs	r3, #0
    36b4:	e005      	b.n	36c2 <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    36b6:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    36b8:	1a12      	subs	r2, r2, r0
    36ba:	1e50      	subs	r0, r2, #1
    36bc:	4182      	sbcs	r2, r0
    36be:	4252      	negs	r2, r2
    36c0:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    36c2:	1c18      	adds	r0, r3, #0
    36c4:	4770      	bx	lr
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	20004274 	.word	0x20004274

000036cc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    36cc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    36ce:	2200      	movs	r2, #0
    36d0:	4b16      	ldr	r3, [pc, #88]	; (372c <EIC_Handler+0x60>)
    36d2:	701a      	strb	r2, [r3, #0]
    36d4:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    36d6:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    36d8:	4d15      	ldr	r5, [pc, #84]	; (3730 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    36da:	4c14      	ldr	r4, [pc, #80]	; (372c <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    36dc:	2b1f      	cmp	r3, #31
    36de:	d910      	bls.n	3702 <EIC_Handler+0x36>
    36e0:	e019      	b.n	3716 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    36e2:	4914      	ldr	r1, [pc, #80]	; (3734 <EIC_Handler+0x68>)
    36e4:	e000      	b.n	36e8 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
    36e6:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    36e8:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    36ea:	009b      	lsls	r3, r3, #2
    36ec:	595b      	ldr	r3, [r3, r5]
    36ee:	2b00      	cmp	r3, #0
    36f0:	d000      	beq.n	36f4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    36f2:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    36f4:	7823      	ldrb	r3, [r4, #0]
    36f6:	3301      	adds	r3, #1
    36f8:	b2db      	uxtb	r3, r3
    36fa:	7023      	strb	r3, [r4, #0]
    36fc:	2b0f      	cmp	r3, #15
    36fe:	d814      	bhi.n	372a <EIC_Handler+0x5e>
    3700:	e7ec      	b.n	36dc <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3702:	1c32      	adds	r2, r6, #0
    3704:	401a      	ands	r2, r3
    3706:	2101      	movs	r1, #1
    3708:	4091      	lsls	r1, r2
    370a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    370c:	4909      	ldr	r1, [pc, #36]	; (3734 <EIC_Handler+0x68>)
    370e:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3710:	4211      	tst	r1, r2
    3712:	d1e6      	bne.n	36e2 <EIC_Handler+0x16>
    3714:	e7ee      	b.n	36f4 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3716:	1c32      	adds	r2, r6, #0
    3718:	401a      	ands	r2, r3
    371a:	2101      	movs	r1, #1
    371c:	4091      	lsls	r1, r2
    371e:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    3720:	2100      	movs	r1, #0
    3722:	6909      	ldr	r1, [r1, #16]
    3724:	4211      	tst	r1, r2
    3726:	d1de      	bne.n	36e6 <EIC_Handler+0x1a>
    3728:	e7e4      	b.n	36f4 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    372a:	bd70      	pop	{r4, r5, r6, pc}
    372c:	20004418 	.word	0x20004418
    3730:	20004274 	.word	0x20004274
    3734:	40001800 	.word	0x40001800

00003738 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    3738:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    373a:	2000      	movs	r0, #0
    373c:	4b08      	ldr	r3, [pc, #32]	; (3760 <delay_init+0x28>)
    373e:	4798      	blx	r3
	cycles_per_ms /= 1000;
    3740:	4c08      	ldr	r4, [pc, #32]	; (3764 <delay_init+0x2c>)
    3742:	21fa      	movs	r1, #250	; 0xfa
    3744:	0089      	lsls	r1, r1, #2
    3746:	47a0      	blx	r4
    3748:	4b07      	ldr	r3, [pc, #28]	; (3768 <delay_init+0x30>)
    374a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    374c:	21fa      	movs	r1, #250	; 0xfa
    374e:	0089      	lsls	r1, r1, #2
    3750:	47a0      	blx	r4
    3752:	4b06      	ldr	r3, [pc, #24]	; (376c <delay_init+0x34>)
    3754:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3756:	2205      	movs	r2, #5
    3758:	4b05      	ldr	r3, [pc, #20]	; (3770 <delay_init+0x38>)
    375a:	601a      	str	r2, [r3, #0]
}
    375c:	bd10      	pop	{r4, pc}
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	00003b89 	.word	0x00003b89
    3764:	00004375 	.word	0x00004375
    3768:	2000000c 	.word	0x2000000c
    376c:	20000008 	.word	0x20000008
    3770:	e000e010 	.word	0xe000e010

00003774 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    3774:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    3776:	4b08      	ldr	r3, [pc, #32]	; (3798 <delay_cycles_us+0x24>)
    3778:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    377a:	4a08      	ldr	r2, [pc, #32]	; (379c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    377c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    377e:	2180      	movs	r1, #128	; 0x80
    3780:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    3782:	e006      	b.n	3792 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    3784:	2c00      	cmp	r4, #0
    3786:	d004      	beq.n	3792 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    3788:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    378a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    378c:	6813      	ldr	r3, [r2, #0]
    378e:	420b      	tst	r3, r1
    3790:	d0fc      	beq.n	378c <delay_cycles_us+0x18>
    3792:	3801      	subs	r0, #1
    3794:	d2f6      	bcs.n	3784 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    3796:	bd30      	pop	{r4, r5, pc}
    3798:	20000008 	.word	0x20000008
    379c:	e000e010 	.word	0xe000e010

000037a0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    37a0:	4b0c      	ldr	r3, [pc, #48]	; (37d4 <cpu_irq_enter_critical+0x34>)
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	2b00      	cmp	r3, #0
    37a6:	d110      	bne.n	37ca <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    37a8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    37ac:	2b00      	cmp	r3, #0
    37ae:	d109      	bne.n	37c4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    37b0:	b672      	cpsid	i
    37b2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    37b6:	2200      	movs	r2, #0
    37b8:	4b07      	ldr	r3, [pc, #28]	; (37d8 <cpu_irq_enter_critical+0x38>)
    37ba:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    37bc:	2201      	movs	r2, #1
    37be:	4b07      	ldr	r3, [pc, #28]	; (37dc <cpu_irq_enter_critical+0x3c>)
    37c0:	701a      	strb	r2, [r3, #0]
    37c2:	e002      	b.n	37ca <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    37c4:	2200      	movs	r2, #0
    37c6:	4b05      	ldr	r3, [pc, #20]	; (37dc <cpu_irq_enter_critical+0x3c>)
    37c8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    37ca:	4b02      	ldr	r3, [pc, #8]	; (37d4 <cpu_irq_enter_critical+0x34>)
    37cc:	681a      	ldr	r2, [r3, #0]
    37ce:	3201      	adds	r2, #1
    37d0:	601a      	str	r2, [r3, #0]
}
    37d2:	4770      	bx	lr
    37d4:	20004200 	.word	0x20004200
    37d8:	20000010 	.word	0x20000010
    37dc:	20004204 	.word	0x20004204

000037e0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    37e0:	4b08      	ldr	r3, [pc, #32]	; (3804 <cpu_irq_leave_critical+0x24>)
    37e2:	681a      	ldr	r2, [r3, #0]
    37e4:	3a01      	subs	r2, #1
    37e6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    37e8:	681b      	ldr	r3, [r3, #0]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d109      	bne.n	3802 <cpu_irq_leave_critical+0x22>
    37ee:	4b06      	ldr	r3, [pc, #24]	; (3808 <cpu_irq_leave_critical+0x28>)
    37f0:	781b      	ldrb	r3, [r3, #0]
    37f2:	2b00      	cmp	r3, #0
    37f4:	d005      	beq.n	3802 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    37f6:	2201      	movs	r2, #1
    37f8:	4b04      	ldr	r3, [pc, #16]	; (380c <cpu_irq_leave_critical+0x2c>)
    37fa:	701a      	strb	r2, [r3, #0]
    37fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3800:	b662      	cpsie	i
	}
}
    3802:	4770      	bx	lr
    3804:	20004200 	.word	0x20004200
    3808:	20004204 	.word	0x20004204
    380c:	20000010 	.word	0x20000010

00003810 <system_board_init>:




void system_board_init(void)
{
    3810:	b5f0      	push	{r4, r5, r6, r7, lr}
    3812:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3814:	ac01      	add	r4, sp, #4
    3816:	2501      	movs	r5, #1
    3818:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    381a:	2700      	movs	r7, #0
    381c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    381e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3820:	2013      	movs	r0, #19
    3822:	1c21      	adds	r1, r4, #0
    3824:	4e06      	ldr	r6, [pc, #24]	; (3840 <system_board_init+0x30>)
    3826:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3828:	2280      	movs	r2, #128	; 0x80
    382a:	0312      	lsls	r2, r2, #12
    382c:	4b05      	ldr	r3, [pc, #20]	; (3844 <system_board_init+0x34>)
    382e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3830:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3832:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3834:	201c      	movs	r0, #28
    3836:	1c21      	adds	r1, r4, #0
    3838:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    383a:	b003      	add	sp, #12
    383c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    383e:	46c0      	nop			; (mov r8, r8)
    3840:	00003849 	.word	0x00003849
    3844:	41004400 	.word	0x41004400

00003848 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3848:	b500      	push	{lr}
    384a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    384c:	ab01      	add	r3, sp, #4
    384e:	2280      	movs	r2, #128	; 0x80
    3850:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3852:	780a      	ldrb	r2, [r1, #0]
    3854:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3856:	784a      	ldrb	r2, [r1, #1]
    3858:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    385a:	788a      	ldrb	r2, [r1, #2]
    385c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    385e:	1c19      	adds	r1, r3, #0
    3860:	4b01      	ldr	r3, [pc, #4]	; (3868 <port_pin_set_config+0x20>)
    3862:	4798      	blx	r3
}
    3864:	b003      	add	sp, #12
    3866:	bd00      	pop	{pc}
    3868:	00003d7d 	.word	0x00003d7d

0000386c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    386c:	b508      	push	{r3, lr}
	switch (clock_source) {
    386e:	2808      	cmp	r0, #8
    3870:	d834      	bhi.n	38dc <system_clock_source_get_hz+0x70>
    3872:	0080      	lsls	r0, r0, #2
    3874:	4b1b      	ldr	r3, [pc, #108]	; (38e4 <system_clock_source_get_hz+0x78>)
    3876:	581b      	ldr	r3, [r3, r0]
    3878:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    387a:	2080      	movs	r0, #128	; 0x80
    387c:	0200      	lsls	r0, r0, #8
    387e:	e030      	b.n	38e2 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3880:	4b19      	ldr	r3, [pc, #100]	; (38e8 <system_clock_source_get_hz+0x7c>)
    3882:	6918      	ldr	r0, [r3, #16]
    3884:	e02d      	b.n	38e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3886:	4b19      	ldr	r3, [pc, #100]	; (38ec <system_clock_source_get_hz+0x80>)
    3888:	6a18      	ldr	r0, [r3, #32]
    388a:	0580      	lsls	r0, r0, #22
    388c:	0f80      	lsrs	r0, r0, #30
    388e:	4b18      	ldr	r3, [pc, #96]	; (38f0 <system_clock_source_get_hz+0x84>)
    3890:	40c3      	lsrs	r3, r0
    3892:	1c18      	adds	r0, r3, #0
    3894:	e025      	b.n	38e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3896:	4b14      	ldr	r3, [pc, #80]	; (38e8 <system_clock_source_get_hz+0x7c>)
    3898:	6958      	ldr	r0, [r3, #20]
    389a:	e022      	b.n	38e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    389c:	4b12      	ldr	r3, [pc, #72]	; (38e8 <system_clock_source_get_hz+0x7c>)
    389e:	681b      	ldr	r3, [r3, #0]
    38a0:	2002      	movs	r0, #2
    38a2:	4018      	ands	r0, r3
    38a4:	d01d      	beq.n	38e2 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    38a6:	4911      	ldr	r1, [pc, #68]	; (38ec <system_clock_source_get_hz+0x80>)
    38a8:	2210      	movs	r2, #16
    38aa:	68cb      	ldr	r3, [r1, #12]
    38ac:	421a      	tst	r2, r3
    38ae:	d0fc      	beq.n	38aa <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    38b0:	4b0d      	ldr	r3, [pc, #52]	; (38e8 <system_clock_source_get_hz+0x7c>)
    38b2:	681b      	ldr	r3, [r3, #0]
    38b4:	075a      	lsls	r2, r3, #29
    38b6:	d513      	bpl.n	38e0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    38b8:	2000      	movs	r0, #0
    38ba:	4b0e      	ldr	r3, [pc, #56]	; (38f4 <system_clock_source_get_hz+0x88>)
    38bc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    38be:	4b0a      	ldr	r3, [pc, #40]	; (38e8 <system_clock_source_get_hz+0x7c>)
    38c0:	689b      	ldr	r3, [r3, #8]
    38c2:	041b      	lsls	r3, r3, #16
    38c4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    38c6:	4358      	muls	r0, r3
    38c8:	e00b      	b.n	38e2 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    38ca:	2350      	movs	r3, #80	; 0x50
    38cc:	4a07      	ldr	r2, [pc, #28]	; (38ec <system_clock_source_get_hz+0x80>)
    38ce:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    38d0:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    38d2:	075a      	lsls	r2, r3, #29
    38d4:	d505      	bpl.n	38e2 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    38d6:	4b04      	ldr	r3, [pc, #16]	; (38e8 <system_clock_source_get_hz+0x7c>)
    38d8:	68d8      	ldr	r0, [r3, #12]
    38da:	e002      	b.n	38e2 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    38dc:	2000      	movs	r0, #0
    38de:	e000      	b.n	38e2 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    38e0:	4805      	ldr	r0, [pc, #20]	; (38f8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    38e2:	bd08      	pop	{r3, pc}
    38e4:	00005440 	.word	0x00005440
    38e8:	20004208 	.word	0x20004208
    38ec:	40000800 	.word	0x40000800
    38f0:	007a1200 	.word	0x007a1200
    38f4:	00003cbd 	.word	0x00003cbd
    38f8:	02dc6c00 	.word	0x02dc6c00

000038fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    38fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    38fe:	4b0c      	ldr	r3, [pc, #48]	; (3930 <system_clock_source_osc8m_set_config+0x34>)
    3900:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3902:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3904:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3906:	7840      	ldrb	r0, [r0, #1]
    3908:	2201      	movs	r2, #1
    390a:	4010      	ands	r0, r2
    390c:	0180      	lsls	r0, r0, #6
    390e:	2640      	movs	r6, #64	; 0x40
    3910:	43b4      	bics	r4, r6
    3912:	4304      	orrs	r4, r0
    3914:	402a      	ands	r2, r5
    3916:	01d0      	lsls	r0, r2, #7
    3918:	2280      	movs	r2, #128	; 0x80
    391a:	4394      	bics	r4, r2
    391c:	1c22      	adds	r2, r4, #0
    391e:	4302      	orrs	r2, r0
    3920:	2003      	movs	r0, #3
    3922:	4001      	ands	r1, r0
    3924:	0209      	lsls	r1, r1, #8
    3926:	4803      	ldr	r0, [pc, #12]	; (3934 <system_clock_source_osc8m_set_config+0x38>)
    3928:	4002      	ands	r2, r0
    392a:	430a      	orrs	r2, r1
    392c:	621a      	str	r2, [r3, #32]
}
    392e:	bd70      	pop	{r4, r5, r6, pc}
    3930:	40000800 	.word	0x40000800
    3934:	fffffcff 	.word	0xfffffcff

00003938 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3938:	2808      	cmp	r0, #8
    393a:	d843      	bhi.n	39c4 <system_clock_source_enable+0x8c>
    393c:	0080      	lsls	r0, r0, #2
    393e:	4b22      	ldr	r3, [pc, #136]	; (39c8 <system_clock_source_enable+0x90>)
    3940:	581b      	ldr	r3, [r3, r0]
    3942:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3944:	2000      	movs	r0, #0
    3946:	e03e      	b.n	39c6 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3948:	4b20      	ldr	r3, [pc, #128]	; (39cc <system_clock_source_enable+0x94>)
    394a:	6a19      	ldr	r1, [r3, #32]
    394c:	2202      	movs	r2, #2
    394e:	430a      	orrs	r2, r1
    3950:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3952:	2000      	movs	r0, #0
    3954:	e037      	b.n	39c6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3956:	4b1d      	ldr	r3, [pc, #116]	; (39cc <system_clock_source_enable+0x94>)
    3958:	6999      	ldr	r1, [r3, #24]
    395a:	2202      	movs	r2, #2
    395c:	430a      	orrs	r2, r1
    395e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3960:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    3962:	e030      	b.n	39c6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3964:	4b19      	ldr	r3, [pc, #100]	; (39cc <system_clock_source_enable+0x94>)
    3966:	8a19      	ldrh	r1, [r3, #16]
    3968:	2202      	movs	r2, #2
    396a:	430a      	orrs	r2, r1
    396c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    396e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    3970:	e029      	b.n	39c6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3972:	4b16      	ldr	r3, [pc, #88]	; (39cc <system_clock_source_enable+0x94>)
    3974:	8a99      	ldrh	r1, [r3, #20]
    3976:	2202      	movs	r2, #2
    3978:	430a      	orrs	r2, r1
    397a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    397c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    397e:	e022      	b.n	39c6 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3980:	4b13      	ldr	r3, [pc, #76]	; (39d0 <system_clock_source_enable+0x98>)
    3982:	6819      	ldr	r1, [r3, #0]
    3984:	2202      	movs	r2, #2
    3986:	430a      	orrs	r2, r1
    3988:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    398a:	681a      	ldr	r2, [r3, #0]
    398c:	4b11      	ldr	r3, [pc, #68]	; (39d4 <system_clock_source_enable+0x9c>)
    398e:	401a      	ands	r2, r3
    3990:	4b0e      	ldr	r3, [pc, #56]	; (39cc <system_clock_source_enable+0x94>)
    3992:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3994:	1c19      	adds	r1, r3, #0
    3996:	2210      	movs	r2, #16
    3998:	68cb      	ldr	r3, [r1, #12]
    399a:	421a      	tst	r2, r3
    399c:	d0fc      	beq.n	3998 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    399e:	4a0c      	ldr	r2, [pc, #48]	; (39d0 <system_clock_source_enable+0x98>)
    39a0:	6891      	ldr	r1, [r2, #8]
    39a2:	4b0a      	ldr	r3, [pc, #40]	; (39cc <system_clock_source_enable+0x94>)
    39a4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    39a6:	6851      	ldr	r1, [r2, #4]
    39a8:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    39aa:	6812      	ldr	r2, [r2, #0]
    39ac:	b292      	uxth	r2, r2
    39ae:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    39b0:	2000      	movs	r0, #0
    39b2:	e008      	b.n	39c6 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    39b4:	4a05      	ldr	r2, [pc, #20]	; (39cc <system_clock_source_enable+0x94>)
    39b6:	2344      	movs	r3, #68	; 0x44
    39b8:	5cd0      	ldrb	r0, [r2, r3]
    39ba:	2102      	movs	r1, #2
    39bc:	4301      	orrs	r1, r0
    39be:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    39c0:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    39c2:	e000      	b.n	39c6 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    39c4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    39c6:	4770      	bx	lr
    39c8:	00005464 	.word	0x00005464
    39cc:	40000800 	.word	0x40000800
    39d0:	20004208 	.word	0x20004208
    39d4:	0000ff7f 	.word	0x0000ff7f

000039d8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    39d8:	b530      	push	{r4, r5, lr}
    39da:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    39dc:	22c2      	movs	r2, #194	; 0xc2
    39de:	00d2      	lsls	r2, r2, #3
    39e0:	4b19      	ldr	r3, [pc, #100]	; (3a48 <system_clock_init+0x70>)
    39e2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    39e4:	4b19      	ldr	r3, [pc, #100]	; (3a4c <system_clock_init+0x74>)
    39e6:	685a      	ldr	r2, [r3, #4]
    39e8:	211e      	movs	r1, #30
    39ea:	438a      	bics	r2, r1
    39ec:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    39ee:	2301      	movs	r3, #1
    39f0:	466a      	mov	r2, sp
    39f2:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    39f4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    39f6:	4d16      	ldr	r5, [pc, #88]	; (3a50 <system_clock_init+0x78>)
    39f8:	b2e0      	uxtb	r0, r4
    39fa:	4669      	mov	r1, sp
    39fc:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    39fe:	3401      	adds	r4, #1
    3a00:	2c25      	cmp	r4, #37	; 0x25
    3a02:	d1f9      	bne.n	39f8 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    3a04:	a803      	add	r0, sp, #12
    3a06:	2400      	movs	r4, #0
    3a08:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    3a0a:	2501      	movs	r5, #1
    3a0c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3a0e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3a10:	4b10      	ldr	r3, [pc, #64]	; (3a54 <system_clock_init+0x7c>)
    3a12:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3a14:	2006      	movs	r0, #6
    3a16:	4b10      	ldr	r3, [pc, #64]	; (3a58 <system_clock_init+0x80>)
    3a18:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3a1a:	4b10      	ldr	r3, [pc, #64]	; (3a5c <system_clock_init+0x84>)
    3a1c:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    3a1e:	4b10      	ldr	r3, [pc, #64]	; (3a60 <system_clock_init+0x88>)
    3a20:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    3a22:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    3a24:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3a26:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    3a28:	466b      	mov	r3, sp
    3a2a:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3a2c:	2306      	movs	r3, #6
    3a2e:	466a      	mov	r2, sp
    3a30:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    3a32:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    3a34:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3a36:	2000      	movs	r0, #0
    3a38:	4669      	mov	r1, sp
    3a3a:	4b0a      	ldr	r3, [pc, #40]	; (3a64 <system_clock_init+0x8c>)
    3a3c:	4798      	blx	r3
    3a3e:	2000      	movs	r0, #0
    3a40:	4b09      	ldr	r3, [pc, #36]	; (3a68 <system_clock_init+0x90>)
    3a42:	4798      	blx	r3
#endif
}
    3a44:	b005      	add	sp, #20
    3a46:	bd30      	pop	{r4, r5, pc}
    3a48:	40000800 	.word	0x40000800
    3a4c:	41004000 	.word	0x41004000
    3a50:	00003ca1 	.word	0x00003ca1
    3a54:	000038fd 	.word	0x000038fd
    3a58:	00003939 	.word	0x00003939
    3a5c:	00003a6d 	.word	0x00003a6d
    3a60:	40000400 	.word	0x40000400
    3a64:	00003a91 	.word	0x00003a91
    3a68:	00003b45 	.word	0x00003b45

00003a6c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3a6c:	4b06      	ldr	r3, [pc, #24]	; (3a88 <system_gclk_init+0x1c>)
    3a6e:	6999      	ldr	r1, [r3, #24]
    3a70:	2208      	movs	r2, #8
    3a72:	430a      	orrs	r2, r1
    3a74:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3a76:	2201      	movs	r2, #1
    3a78:	4b04      	ldr	r3, [pc, #16]	; (3a8c <system_gclk_init+0x20>)
    3a7a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3a7c:	1c19      	adds	r1, r3, #0
    3a7e:	780b      	ldrb	r3, [r1, #0]
    3a80:	4213      	tst	r3, r2
    3a82:	d1fc      	bne.n	3a7e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3a84:	4770      	bx	lr
    3a86:	46c0      	nop			; (mov r8, r8)
    3a88:	40000400 	.word	0x40000400
    3a8c:	40000c00 	.word	0x40000c00

00003a90 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a92:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3a94:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3a96:	780d      	ldrb	r5, [r1, #0]
    3a98:	022d      	lsls	r5, r5, #8
    3a9a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3a9c:	784b      	ldrb	r3, [r1, #1]
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d002      	beq.n	3aa8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3aa2:	2380      	movs	r3, #128	; 0x80
    3aa4:	02db      	lsls	r3, r3, #11
    3aa6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3aa8:	7a4b      	ldrb	r3, [r1, #9]
    3aaa:	2b00      	cmp	r3, #0
    3aac:	d002      	beq.n	3ab4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3aae:	2380      	movs	r3, #128	; 0x80
    3ab0:	031b      	lsls	r3, r3, #12
    3ab2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3ab4:	684c      	ldr	r4, [r1, #4]
    3ab6:	2c01      	cmp	r4, #1
    3ab8:	d917      	bls.n	3aea <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3aba:	1e63      	subs	r3, r4, #1
    3abc:	421c      	tst	r4, r3
    3abe:	d10f      	bne.n	3ae0 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3ac0:	2c02      	cmp	r4, #2
    3ac2:	d906      	bls.n	3ad2 <system_gclk_gen_set_config+0x42>
    3ac4:	2302      	movs	r3, #2
    3ac6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3ac8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3aca:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3acc:	429c      	cmp	r4, r3
    3ace:	d8fb      	bhi.n	3ac8 <system_gclk_gen_set_config+0x38>
    3ad0:	e000      	b.n	3ad4 <system_gclk_gen_set_config+0x44>
    3ad2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3ad4:	0217      	lsls	r7, r2, #8
    3ad6:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3ad8:	2380      	movs	r3, #128	; 0x80
    3ada:	035b      	lsls	r3, r3, #13
    3adc:	431d      	orrs	r5, r3
    3ade:	e004      	b.n	3aea <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3ae0:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    3ae2:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3ae4:	2380      	movs	r3, #128	; 0x80
    3ae6:	029b      	lsls	r3, r3, #10
    3ae8:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3aea:	7a0b      	ldrb	r3, [r1, #8]
    3aec:	2b00      	cmp	r3, #0
    3aee:	d002      	beq.n	3af6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3af0:	2380      	movs	r3, #128	; 0x80
    3af2:	039b      	lsls	r3, r3, #14
    3af4:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3af6:	4a0f      	ldr	r2, [pc, #60]	; (3b34 <system_gclk_gen_set_config+0xa4>)
    3af8:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    3afa:	b25b      	sxtb	r3, r3
    3afc:	2b00      	cmp	r3, #0
    3afe:	dbfb      	blt.n	3af8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3b00:	4b0d      	ldr	r3, [pc, #52]	; (3b38 <system_gclk_gen_set_config+0xa8>)
    3b02:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3b04:	4b0d      	ldr	r3, [pc, #52]	; (3b3c <system_gclk_gen_set_config+0xac>)
    3b06:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3b08:	4a0a      	ldr	r2, [pc, #40]	; (3b34 <system_gclk_gen_set_config+0xa4>)
    3b0a:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3b0c:	b25b      	sxtb	r3, r3
    3b0e:	2b00      	cmp	r3, #0
    3b10:	dbfb      	blt.n	3b0a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3b12:	4b08      	ldr	r3, [pc, #32]	; (3b34 <system_gclk_gen_set_config+0xa4>)
    3b14:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3b16:	1c1a      	adds	r2, r3, #0
    3b18:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    3b1a:	b25b      	sxtb	r3, r3
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	dbfb      	blt.n	3b18 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3b20:	4b04      	ldr	r3, [pc, #16]	; (3b34 <system_gclk_gen_set_config+0xa4>)
    3b22:	6859      	ldr	r1, [r3, #4]
    3b24:	2280      	movs	r2, #128	; 0x80
    3b26:	0252      	lsls	r2, r2, #9
    3b28:	400a      	ands	r2, r1
    3b2a:	4315      	orrs	r5, r2
    3b2c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3b2e:	4b04      	ldr	r3, [pc, #16]	; (3b40 <system_gclk_gen_set_config+0xb0>)
    3b30:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b34:	40000c00 	.word	0x40000c00
    3b38:	000037a1 	.word	0x000037a1
    3b3c:	40000c08 	.word	0x40000c08
    3b40:	000037e1 	.word	0x000037e1

00003b44 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3b44:	b510      	push	{r4, lr}
    3b46:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3b48:	4a0b      	ldr	r2, [pc, #44]	; (3b78 <system_gclk_gen_enable+0x34>)
    3b4a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    3b4c:	b25b      	sxtb	r3, r3
    3b4e:	2b00      	cmp	r3, #0
    3b50:	dbfb      	blt.n	3b4a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3b52:	4b0a      	ldr	r3, [pc, #40]	; (3b7c <system_gclk_gen_enable+0x38>)
    3b54:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3b56:	4b0a      	ldr	r3, [pc, #40]	; (3b80 <system_gclk_gen_enable+0x3c>)
    3b58:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3b5a:	4a07      	ldr	r2, [pc, #28]	; (3b78 <system_gclk_gen_enable+0x34>)
    3b5c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    3b5e:	b25b      	sxtb	r3, r3
    3b60:	2b00      	cmp	r3, #0
    3b62:	dbfb      	blt.n	3b5c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3b64:	4b04      	ldr	r3, [pc, #16]	; (3b78 <system_gclk_gen_enable+0x34>)
    3b66:	6859      	ldr	r1, [r3, #4]
    3b68:	2280      	movs	r2, #128	; 0x80
    3b6a:	0252      	lsls	r2, r2, #9
    3b6c:	430a      	orrs	r2, r1
    3b6e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3b70:	4b04      	ldr	r3, [pc, #16]	; (3b84 <system_gclk_gen_enable+0x40>)
    3b72:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3b74:	bd10      	pop	{r4, pc}
    3b76:	46c0      	nop			; (mov r8, r8)
    3b78:	40000c00 	.word	0x40000c00
    3b7c:	000037a1 	.word	0x000037a1
    3b80:	40000c04 	.word	0x40000c04
    3b84:	000037e1 	.word	0x000037e1

00003b88 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3b88:	b570      	push	{r4, r5, r6, lr}
    3b8a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3b8c:	4a1a      	ldr	r2, [pc, #104]	; (3bf8 <system_gclk_gen_get_hz+0x70>)
    3b8e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    3b90:	b25b      	sxtb	r3, r3
    3b92:	2b00      	cmp	r3, #0
    3b94:	dbfb      	blt.n	3b8e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3b96:	4b19      	ldr	r3, [pc, #100]	; (3bfc <system_gclk_gen_get_hz+0x74>)
    3b98:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3b9a:	4b19      	ldr	r3, [pc, #100]	; (3c00 <system_gclk_gen_get_hz+0x78>)
    3b9c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3b9e:	4a16      	ldr	r2, [pc, #88]	; (3bf8 <system_gclk_gen_get_hz+0x70>)
    3ba0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    3ba2:	b25b      	sxtb	r3, r3
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	dbfb      	blt.n	3ba0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3ba8:	4e13      	ldr	r6, [pc, #76]	; (3bf8 <system_gclk_gen_get_hz+0x70>)
    3baa:	6870      	ldr	r0, [r6, #4]
    3bac:	04c0      	lsls	r0, r0, #19
    3bae:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3bb0:	4b14      	ldr	r3, [pc, #80]	; (3c04 <system_gclk_gen_get_hz+0x7c>)
    3bb2:	4798      	blx	r3
    3bb4:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3bb6:	4b12      	ldr	r3, [pc, #72]	; (3c00 <system_gclk_gen_get_hz+0x78>)
    3bb8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3bba:	6876      	ldr	r6, [r6, #4]
    3bbc:	02f6      	lsls	r6, r6, #11
    3bbe:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3bc0:	4b11      	ldr	r3, [pc, #68]	; (3c08 <system_gclk_gen_get_hz+0x80>)
    3bc2:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3bc4:	4a0c      	ldr	r2, [pc, #48]	; (3bf8 <system_gclk_gen_get_hz+0x70>)
    3bc6:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    3bc8:	b25b      	sxtb	r3, r3
    3bca:	2b00      	cmp	r3, #0
    3bcc:	dbfb      	blt.n	3bc6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3bce:	4b0a      	ldr	r3, [pc, #40]	; (3bf8 <system_gclk_gen_get_hz+0x70>)
    3bd0:	689c      	ldr	r4, [r3, #8]
    3bd2:	0a24      	lsrs	r4, r4, #8
    3bd4:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3bd6:	4b0d      	ldr	r3, [pc, #52]	; (3c0c <system_gclk_gen_get_hz+0x84>)
    3bd8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3bda:	2e00      	cmp	r6, #0
    3bdc:	d107      	bne.n	3bee <system_gclk_gen_get_hz+0x66>
    3bde:	2c01      	cmp	r4, #1
    3be0:	d907      	bls.n	3bf2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3be2:	1c28      	adds	r0, r5, #0
    3be4:	1c21      	adds	r1, r4, #0
    3be6:	4b0a      	ldr	r3, [pc, #40]	; (3c10 <system_gclk_gen_get_hz+0x88>)
    3be8:	4798      	blx	r3
    3bea:	1c05      	adds	r5, r0, #0
    3bec:	e001      	b.n	3bf2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3bee:	3401      	adds	r4, #1
    3bf0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3bf2:	1c28      	adds	r0, r5, #0
    3bf4:	bd70      	pop	{r4, r5, r6, pc}
    3bf6:	46c0      	nop			; (mov r8, r8)
    3bf8:	40000c00 	.word	0x40000c00
    3bfc:	000037a1 	.word	0x000037a1
    3c00:	40000c04 	.word	0x40000c04
    3c04:	0000386d 	.word	0x0000386d
    3c08:	40000c08 	.word	0x40000c08
    3c0c:	000037e1 	.word	0x000037e1
    3c10:	00004375 	.word	0x00004375

00003c14 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3c14:	b510      	push	{r4, lr}
    3c16:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3c18:	4b06      	ldr	r3, [pc, #24]	; (3c34 <system_gclk_chan_enable+0x20>)
    3c1a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3c1c:	4b06      	ldr	r3, [pc, #24]	; (3c38 <system_gclk_chan_enable+0x24>)
    3c1e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3c20:	4b06      	ldr	r3, [pc, #24]	; (3c3c <system_gclk_chan_enable+0x28>)
    3c22:	8859      	ldrh	r1, [r3, #2]
    3c24:	2280      	movs	r2, #128	; 0x80
    3c26:	01d2      	lsls	r2, r2, #7
    3c28:	430a      	orrs	r2, r1
    3c2a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3c2c:	4b04      	ldr	r3, [pc, #16]	; (3c40 <system_gclk_chan_enable+0x2c>)
    3c2e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3c30:	bd10      	pop	{r4, pc}
    3c32:	46c0      	nop			; (mov r8, r8)
    3c34:	000037a1 	.word	0x000037a1
    3c38:	40000c02 	.word	0x40000c02
    3c3c:	40000c00 	.word	0x40000c00
    3c40:	000037e1 	.word	0x000037e1

00003c44 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3c44:	b510      	push	{r4, lr}
    3c46:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3c48:	4b0f      	ldr	r3, [pc, #60]	; (3c88 <system_gclk_chan_disable+0x44>)
    3c4a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3c4c:	4b0f      	ldr	r3, [pc, #60]	; (3c8c <system_gclk_chan_disable+0x48>)
    3c4e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3c50:	4b0f      	ldr	r3, [pc, #60]	; (3c90 <system_gclk_chan_disable+0x4c>)
    3c52:	8858      	ldrh	r0, [r3, #2]
    3c54:	0500      	lsls	r0, r0, #20
    3c56:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3c58:	8859      	ldrh	r1, [r3, #2]
    3c5a:	4a0e      	ldr	r2, [pc, #56]	; (3c94 <system_gclk_chan_disable+0x50>)
    3c5c:	400a      	ands	r2, r1
    3c5e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3c60:	8859      	ldrh	r1, [r3, #2]
    3c62:	4a0d      	ldr	r2, [pc, #52]	; (3c98 <system_gclk_chan_disable+0x54>)
    3c64:	400a      	ands	r2, r1
    3c66:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3c68:	1c19      	adds	r1, r3, #0
    3c6a:	2280      	movs	r2, #128	; 0x80
    3c6c:	01d2      	lsls	r2, r2, #7
    3c6e:	884b      	ldrh	r3, [r1, #2]
    3c70:	4213      	tst	r3, r2
    3c72:	d1fc      	bne.n	3c6e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3c74:	4b06      	ldr	r3, [pc, #24]	; (3c90 <system_gclk_chan_disable+0x4c>)
    3c76:	0201      	lsls	r1, r0, #8
    3c78:	8858      	ldrh	r0, [r3, #2]
    3c7a:	4a06      	ldr	r2, [pc, #24]	; (3c94 <system_gclk_chan_disable+0x50>)
    3c7c:	4002      	ands	r2, r0
    3c7e:	430a      	orrs	r2, r1
    3c80:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3c82:	4b06      	ldr	r3, [pc, #24]	; (3c9c <system_gclk_chan_disable+0x58>)
    3c84:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3c86:	bd10      	pop	{r4, pc}
    3c88:	000037a1 	.word	0x000037a1
    3c8c:	40000c02 	.word	0x40000c02
    3c90:	40000c00 	.word	0x40000c00
    3c94:	fffff0ff 	.word	0xfffff0ff
    3c98:	ffffbfff 	.word	0xffffbfff
    3c9c:	000037e1 	.word	0x000037e1

00003ca0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3ca0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3ca2:	780c      	ldrb	r4, [r1, #0]
    3ca4:	0224      	lsls	r4, r4, #8
    3ca6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3ca8:	4b02      	ldr	r3, [pc, #8]	; (3cb4 <system_gclk_chan_set_config+0x14>)
    3caa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3cac:	b2a4      	uxth	r4, r4
    3cae:	4b02      	ldr	r3, [pc, #8]	; (3cb8 <system_gclk_chan_set_config+0x18>)
    3cb0:	805c      	strh	r4, [r3, #2]
}
    3cb2:	bd10      	pop	{r4, pc}
    3cb4:	00003c45 	.word	0x00003c45
    3cb8:	40000c00 	.word	0x40000c00

00003cbc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3cbc:	b510      	push	{r4, lr}
    3cbe:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3cc0:	4b06      	ldr	r3, [pc, #24]	; (3cdc <system_gclk_chan_get_hz+0x20>)
    3cc2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3cc4:	4b06      	ldr	r3, [pc, #24]	; (3ce0 <system_gclk_chan_get_hz+0x24>)
    3cc6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3cc8:	4b06      	ldr	r3, [pc, #24]	; (3ce4 <system_gclk_chan_get_hz+0x28>)
    3cca:	885c      	ldrh	r4, [r3, #2]
    3ccc:	0524      	lsls	r4, r4, #20
    3cce:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3cd0:	4b05      	ldr	r3, [pc, #20]	; (3ce8 <system_gclk_chan_get_hz+0x2c>)
    3cd2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3cd4:	1c20      	adds	r0, r4, #0
    3cd6:	4b05      	ldr	r3, [pc, #20]	; (3cec <system_gclk_chan_get_hz+0x30>)
    3cd8:	4798      	blx	r3
}
    3cda:	bd10      	pop	{r4, pc}
    3cdc:	000037a1 	.word	0x000037a1
    3ce0:	40000c02 	.word	0x40000c02
    3ce4:	40000c00 	.word	0x40000c00
    3ce8:	000037e1 	.word	0x000037e1
    3cec:	00003b89 	.word	0x00003b89

00003cf0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3cf0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3cf2:	78d3      	ldrb	r3, [r2, #3]
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	d11e      	bne.n	3d36 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3cf8:	7813      	ldrb	r3, [r2, #0]
    3cfa:	2b80      	cmp	r3, #128	; 0x80
    3cfc:	d004      	beq.n	3d08 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3cfe:	061b      	lsls	r3, r3, #24
    3d00:	2480      	movs	r4, #128	; 0x80
    3d02:	0264      	lsls	r4, r4, #9
    3d04:	4323      	orrs	r3, r4
    3d06:	e000      	b.n	3d0a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3d08:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3d0a:	7854      	ldrb	r4, [r2, #1]
    3d0c:	2502      	movs	r5, #2
    3d0e:	43ac      	bics	r4, r5
    3d10:	d10a      	bne.n	3d28 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3d12:	7894      	ldrb	r4, [r2, #2]
    3d14:	2c00      	cmp	r4, #0
    3d16:	d103      	bne.n	3d20 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3d18:	2480      	movs	r4, #128	; 0x80
    3d1a:	02a4      	lsls	r4, r4, #10
    3d1c:	4323      	orrs	r3, r4
    3d1e:	e002      	b.n	3d26 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3d20:	24c0      	movs	r4, #192	; 0xc0
    3d22:	02e4      	lsls	r4, r4, #11
    3d24:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3d26:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3d28:	7854      	ldrb	r4, [r2, #1]
    3d2a:	3c01      	subs	r4, #1
    3d2c:	2c01      	cmp	r4, #1
    3d2e:	d804      	bhi.n	3d3a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3d30:	4c11      	ldr	r4, [pc, #68]	; (3d78 <_system_pinmux_config+0x88>)
    3d32:	4023      	ands	r3, r4
    3d34:	e001      	b.n	3d3a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3d36:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3d38:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3d3a:	040d      	lsls	r5, r1, #16
    3d3c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d3e:	24a0      	movs	r4, #160	; 0xa0
    3d40:	05e4      	lsls	r4, r4, #23
    3d42:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3d44:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d46:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3d48:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d4a:	24d0      	movs	r4, #208	; 0xd0
    3d4c:	0624      	lsls	r4, r4, #24
    3d4e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3d50:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d52:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3d54:	78d4      	ldrb	r4, [r2, #3]
    3d56:	2c00      	cmp	r4, #0
    3d58:	d10c      	bne.n	3d74 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3d5a:	035c      	lsls	r4, r3, #13
    3d5c:	d505      	bpl.n	3d6a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3d5e:	7893      	ldrb	r3, [r2, #2]
    3d60:	2b01      	cmp	r3, #1
    3d62:	d101      	bne.n	3d68 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    3d64:	6181      	str	r1, [r0, #24]
    3d66:	e000      	b.n	3d6a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    3d68:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3d6a:	7853      	ldrb	r3, [r2, #1]
    3d6c:	3b01      	subs	r3, #1
    3d6e:	2b01      	cmp	r3, #1
    3d70:	d800      	bhi.n	3d74 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3d72:	6081      	str	r1, [r0, #8]
		}
	}
}
    3d74:	bd30      	pop	{r4, r5, pc}
    3d76:	46c0      	nop			; (mov r8, r8)
    3d78:	fffbffff 	.word	0xfffbffff

00003d7c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3d7c:	b508      	push	{r3, lr}
    3d7e:	1c03      	adds	r3, r0, #0
    3d80:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d82:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3d84:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d86:	2900      	cmp	r1, #0
    3d88:	d103      	bne.n	3d92 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3d8a:	0958      	lsrs	r0, r3, #5
    3d8c:	01c0      	lsls	r0, r0, #7
    3d8e:	4904      	ldr	r1, [pc, #16]	; (3da0 <system_pinmux_pin_set_config+0x24>)
    3d90:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3d92:	211f      	movs	r1, #31
    3d94:	400b      	ands	r3, r1
    3d96:	2101      	movs	r1, #1
    3d98:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    3d9a:	4b02      	ldr	r3, [pc, #8]	; (3da4 <system_pinmux_pin_set_config+0x28>)
    3d9c:	4798      	blx	r3
}
    3d9e:	bd08      	pop	{r3, pc}
    3da0:	41004400 	.word	0x41004400
    3da4:	00003cf1 	.word	0x00003cf1

00003da8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3da8:	4770      	bx	lr
    3daa:	46c0      	nop			; (mov r8, r8)

00003dac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3dac:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3dae:	4b04      	ldr	r3, [pc, #16]	; (3dc0 <system_init+0x14>)
    3db0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3db2:	4b04      	ldr	r3, [pc, #16]	; (3dc4 <system_init+0x18>)
    3db4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3db6:	4b04      	ldr	r3, [pc, #16]	; (3dc8 <system_init+0x1c>)
    3db8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3dba:	4b04      	ldr	r3, [pc, #16]	; (3dcc <system_init+0x20>)
    3dbc:	4798      	blx	r3
}
    3dbe:	bd08      	pop	{r3, pc}
    3dc0:	000039d9 	.word	0x000039d9
    3dc4:	00003811 	.word	0x00003811
    3dc8:	00003da9 	.word	0x00003da9
    3dcc:	00000131 	.word	0x00000131

00003dd0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3dd0:	e7fe      	b.n	3dd0 <Dummy_Handler>
    3dd2:	46c0      	nop			; (mov r8, r8)

00003dd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3dd4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    3dd6:	4b1c      	ldr	r3, [pc, #112]	; (3e48 <Reset_Handler+0x74>)
    3dd8:	4a1c      	ldr	r2, [pc, #112]	; (3e4c <Reset_Handler+0x78>)
    3dda:	429a      	cmp	r2, r3
    3ddc:	d003      	beq.n	3de6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    3dde:	4b1c      	ldr	r3, [pc, #112]	; (3e50 <Reset_Handler+0x7c>)
    3de0:	4a19      	ldr	r2, [pc, #100]	; (3e48 <Reset_Handler+0x74>)
    3de2:	429a      	cmp	r2, r3
    3de4:	d304      	bcc.n	3df0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3de6:	4b1b      	ldr	r3, [pc, #108]	; (3e54 <Reset_Handler+0x80>)
    3de8:	4a1b      	ldr	r2, [pc, #108]	; (3e58 <Reset_Handler+0x84>)
    3dea:	429a      	cmp	r2, r3
    3dec:	d310      	bcc.n	3e10 <Reset_Handler+0x3c>
    3dee:	e01b      	b.n	3e28 <Reset_Handler+0x54>
    3df0:	4b1a      	ldr	r3, [pc, #104]	; (3e5c <Reset_Handler+0x88>)
    3df2:	4817      	ldr	r0, [pc, #92]	; (3e50 <Reset_Handler+0x7c>)
    3df4:	3003      	adds	r0, #3
    3df6:	1ac0      	subs	r0, r0, r3
    3df8:	0880      	lsrs	r0, r0, #2
    3dfa:	3001      	adds	r0, #1
    3dfc:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3dfe:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    3e00:	4911      	ldr	r1, [pc, #68]	; (3e48 <Reset_Handler+0x74>)
    3e02:	4a12      	ldr	r2, [pc, #72]	; (3e4c <Reset_Handler+0x78>)
    3e04:	58d4      	ldr	r4, [r2, r3]
    3e06:	50cc      	str	r4, [r1, r3]
    3e08:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3e0a:	4283      	cmp	r3, r0
    3e0c:	d1fa      	bne.n	3e04 <Reset_Handler+0x30>
    3e0e:	e7ea      	b.n	3de6 <Reset_Handler+0x12>
    3e10:	4b11      	ldr	r3, [pc, #68]	; (3e58 <Reset_Handler+0x84>)
    3e12:	1d1a      	adds	r2, r3, #4
    3e14:	490f      	ldr	r1, [pc, #60]	; (3e54 <Reset_Handler+0x80>)
    3e16:	3103      	adds	r1, #3
    3e18:	1a89      	subs	r1, r1, r2
    3e1a:	0889      	lsrs	r1, r1, #2
    3e1c:	0089      	lsls	r1, r1, #2
    3e1e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    3e20:	2100      	movs	r1, #0
    3e22:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3e24:	4293      	cmp	r3, r2
    3e26:	d1fc      	bne.n	3e22 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3e28:	4b0d      	ldr	r3, [pc, #52]	; (3e60 <Reset_Handler+0x8c>)
    3e2a:	217f      	movs	r1, #127	; 0x7f
    3e2c:	4a0d      	ldr	r2, [pc, #52]	; (3e64 <Reset_Handler+0x90>)
    3e2e:	438a      	bics	r2, r1
    3e30:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3e32:	4b0d      	ldr	r3, [pc, #52]	; (3e68 <Reset_Handler+0x94>)
    3e34:	6859      	ldr	r1, [r3, #4]
    3e36:	2280      	movs	r2, #128	; 0x80
    3e38:	430a      	orrs	r2, r1
    3e3a:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    3e3c:	4b0b      	ldr	r3, [pc, #44]	; (3e6c <Reset_Handler+0x98>)
    3e3e:	4798      	blx	r3

        /* Branch to main function */
        main();
    3e40:	4b0b      	ldr	r3, [pc, #44]	; (3e70 <Reset_Handler+0x9c>)
    3e42:	4798      	blx	r3
    3e44:	e7fe      	b.n	3e44 <Reset_Handler+0x70>
    3e46:	46c0      	nop			; (mov r8, r8)
    3e48:	20000000 	.word	0x20000000
    3e4c:	0000559c 	.word	0x0000559c
    3e50:	20000094 	.word	0x20000094
    3e54:	2000442c 	.word	0x2000442c
    3e58:	20000094 	.word	0x20000094
    3e5c:	20000004 	.word	0x20000004
    3e60:	e000ed00 	.word	0xe000ed00
    3e64:	00000000 	.word	0x00000000
    3e68:	41004000 	.word	0x41004000
    3e6c:	00004459 	.word	0x00004459
    3e70:	000040fd 	.word	0x000040fd

00003e74 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3e74:	4b06      	ldr	r3, [pc, #24]	; (3e90 <_sbrk+0x1c>)
    3e76:	681b      	ldr	r3, [r3, #0]
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d102      	bne.n	3e82 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    3e7c:	4a05      	ldr	r2, [pc, #20]	; (3e94 <_sbrk+0x20>)
    3e7e:	4b04      	ldr	r3, [pc, #16]	; (3e90 <_sbrk+0x1c>)
    3e80:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    3e82:	4a03      	ldr	r2, [pc, #12]	; (3e90 <_sbrk+0x1c>)
    3e84:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    3e86:	1818      	adds	r0, r3, r0
    3e88:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    3e8a:	1c18      	adds	r0, r3, #0
    3e8c:	4770      	bx	lr
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	20004220 	.word	0x20004220
    3e94:	20006430 	.word	0x20006430

00003e98 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    3e98:	2001      	movs	r0, #1
}
    3e9a:	4240      	negs	r0, r0
    3e9c:	4770      	bx	lr
    3e9e:	46c0      	nop			; (mov r8, r8)

00003ea0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3ea0:	2380      	movs	r3, #128	; 0x80
    3ea2:	019b      	lsls	r3, r3, #6
    3ea4:	604b      	str	r3, [r1, #4]

	return 0;
}
    3ea6:	2000      	movs	r0, #0
    3ea8:	4770      	bx	lr
    3eaa:	46c0      	nop			; (mov r8, r8)

00003eac <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3eac:	2001      	movs	r0, #1
    3eae:	4770      	bx	lr

00003eb0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3eb0:	2000      	movs	r0, #0
    3eb2:	4770      	bx	lr

00003eb4 <test_task>:
		vTaskDelay(100);
	}
}

static void test_task(void *params)
{
    3eb4:	b570      	push	{r4, r5, r6, lr}
    3eb6:	b082      	sub	sp, #8
	
	struct wireless_packet packet_received;

	while(1)
	{
		if(xQueueReceive(TEMP_QUEUE, &packet_received, 100))
    3eb8:	4d07      	ldr	r5, [pc, #28]	; (3ed8 <test_task+0x24>)
    3eba:	4c08      	ldr	r4, [pc, #32]	; (3edc <test_task+0x28>)
			roomTemp = packet_received.data;
    3ebc:	4e08      	ldr	r6, [pc, #32]	; (3ee0 <test_task+0x2c>)
	
	struct wireless_packet packet_received;

	while(1)
	{
		if(xQueueReceive(TEMP_QUEUE, &packet_received, 100))
    3ebe:	6828      	ldr	r0, [r5, #0]
    3ec0:	4669      	mov	r1, sp
    3ec2:	2264      	movs	r2, #100	; 0x64
    3ec4:	2300      	movs	r3, #0
    3ec6:	47a0      	blx	r4
    3ec8:	2800      	cmp	r0, #0
    3eca:	d001      	beq.n	3ed0 <test_task+0x1c>
			roomTemp = packet_received.data;
    3ecc:	9b00      	ldr	r3, [sp, #0]
    3ece:	6033      	str	r3, [r6, #0]
		
		/* Block for xDelay ms */
		vTaskDelay(xDelay);
    3ed0:	2032      	movs	r0, #50	; 0x32
    3ed2:	4b04      	ldr	r3, [pc, #16]	; (3ee4 <test_task+0x30>)
    3ed4:	4798      	blx	r3
	}
    3ed6:	e7f2      	b.n	3ebe <test_task+0xa>
    3ed8:	2000441c 	.word	0x2000441c
    3edc:	00001c1d 	.word	0x00001c1d
    3ee0:	20000024 	.word	0x20000024
    3ee4:	00002321 	.word	0x00002321

00003ee8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3ee8:	b570      	push	{r4, r5, r6, lr}
    3eea:	b082      	sub	sp, #8
    3eec:	1c05      	adds	r5, r0, #0
    3eee:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    3ef0:	2200      	movs	r2, #0
    3ef2:	466b      	mov	r3, sp
    3ef4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3ef6:	4c06      	ldr	r4, [pc, #24]	; (3f10 <usart_serial_getchar+0x28>)
    3ef8:	1c28      	adds	r0, r5, #0
    3efa:	4669      	mov	r1, sp
    3efc:	3106      	adds	r1, #6
    3efe:	47a0      	blx	r4
    3f00:	2800      	cmp	r0, #0
    3f02:	d1f9      	bne.n	3ef8 <usart_serial_getchar+0x10>

	*c = temp;
    3f04:	466b      	mov	r3, sp
    3f06:	3306      	adds	r3, #6
    3f08:	881b      	ldrh	r3, [r3, #0]
    3f0a:	7033      	strb	r3, [r6, #0]
}
    3f0c:	b002      	add	sp, #8
    3f0e:	bd70      	pop	{r4, r5, r6, pc}
    3f10:	00002ed9 	.word	0x00002ed9

00003f14 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3f14:	b570      	push	{r4, r5, r6, lr}
    3f16:	1c06      	adds	r6, r0, #0
    3f18:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    3f1a:	4c03      	ldr	r4, [pc, #12]	; (3f28 <usart_serial_putchar+0x14>)
    3f1c:	1c30      	adds	r0, r6, #0
    3f1e:	1c29      	adds	r1, r5, #0
    3f20:	47a0      	blx	r4
    3f22:	2800      	cmp	r0, #0
    3f24:	d1fa      	bne.n	3f1c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    3f26:	bd70      	pop	{r4, r5, r6, pc}
    3f28:	00002ead 	.word	0x00002ead

00003f2c <receive_packet>:
}


//When a packet is received, parse the data into the correct queues
bool receive_packet(NWK_DataInd_t *ind)
{	
    3f2c:	b510      	push	{r4, lr}
    3f2e:	1c04      	adds	r4, r0, #0
	printf("received!");
    3f30:	480e      	ldr	r0, [pc, #56]	; (3f6c <receive_packet+0x40>)
    3f32:	4b0f      	ldr	r3, [pc, #60]	; (3f70 <receive_packet+0x44>)
    3f34:	4798      	blx	r3
	switch(ind->srcAddr)
    3f36:	8823      	ldrh	r3, [r4, #0]
    3f38:	2b02      	cmp	r3, #2
    3f3a:	d002      	beq.n	3f42 <receive_packet+0x16>
    3f3c:	2b03      	cmp	r3, #3
    3f3e:	d009      	beq.n	3f54 <receive_packet+0x28>
    3f40:	e011      	b.n	3f66 <receive_packet+0x3a>
	{
		case TEMP_ADDR:
			//memcpy(ind->data,TEMP_QUEUE, ind->size);
			xQueueSendToBackFromISR(TEMP_QUEUE, ind->data, NULL);
    3f42:	4b0c      	ldr	r3, [pc, #48]	; (3f74 <receive_packet+0x48>)
    3f44:	6818      	ldr	r0, [r3, #0]
    3f46:	68a1      	ldr	r1, [r4, #8]
    3f48:	2200      	movs	r2, #0
    3f4a:	2300      	movs	r3, #0
    3f4c:	4c0a      	ldr	r4, [pc, #40]	; (3f78 <receive_packet+0x4c>)
    3f4e:	47a0      	blx	r4
		default:
			return false;
			//break;
			//Call a function to add a new temp sensor and register to the network		
	}
	return true;
    3f50:	2001      	movs	r0, #1
	switch(ind->srcAddr)
	{
		case TEMP_ADDR:
			//memcpy(ind->data,TEMP_QUEUE, ind->size);
			xQueueSendToBackFromISR(TEMP_QUEUE, ind->data, NULL);
			break;
    3f52:	e009      	b.n	3f68 <receive_packet+0x3c>
		case REGISTER_ADDR:
			//memcpy(ind->data,REGISTER_QUEUE, ind->size);
			xQueueSendToBackFromISR(REGISTER_QUEUE, ind->data, NULL);
    3f54:	4b09      	ldr	r3, [pc, #36]	; (3f7c <receive_packet+0x50>)
    3f56:	6818      	ldr	r0, [r3, #0]
    3f58:	68a1      	ldr	r1, [r4, #8]
    3f5a:	2200      	movs	r2, #0
    3f5c:	2300      	movs	r3, #0
    3f5e:	4c06      	ldr	r4, [pc, #24]	; (3f78 <receive_packet+0x4c>)
    3f60:	47a0      	blx	r4
		default:
			return false;
			//break;
			//Call a function to add a new temp sensor and register to the network		
	}
	return true;
    3f62:	2001      	movs	r0, #1
			xQueueSendToBackFromISR(TEMP_QUEUE, ind->data, NULL);
			break;
		case REGISTER_ADDR:
			//memcpy(ind->data,REGISTER_QUEUE, ind->size);
			xQueueSendToBackFromISR(REGISTER_QUEUE, ind->data, NULL);
			break;
    3f64:	e000      	b.n	3f68 <receive_packet+0x3c>
		default:
			return false;
    3f66:	2000      	movs	r0, #0
			//break;
			//Call a function to add a new temp sensor and register to the network		
	}
	return true;
}
    3f68:	bd10      	pop	{r4, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	00005488 	.word	0x00005488
    3f70:	000044c9 	.word	0x000044c9
    3f74:	2000441c 	.word	0x2000441c
    3f78:	00001b4d 	.word	0x00001b4d
    3f7c:	20004420 	.word	0x20004420

00003f80 <updateDisplay>:
	stdio_serial_init(&cdc_uart_module, USART_HOST, &usart_conf);
	usart_enable(&cdc_uart_module);
}

void updateDisplay(void)
{
    3f80:	b510      	push	{r4, lr}
    3f82:	b084      	sub	sp, #16
	//clear the display
	//printf("                                ");
	//set cursor to beginning
	putchar(254);
    3f84:	4b35      	ldr	r3, [pc, #212]	; (405c <updateDisplay+0xdc>)
    3f86:	6818      	ldr	r0, [r3, #0]
    3f88:	6882      	ldr	r2, [r0, #8]
    3f8a:	6893      	ldr	r3, [r2, #8]
    3f8c:	3b01      	subs	r3, #1
    3f8e:	6093      	str	r3, [r2, #8]
    3f90:	2b00      	cmp	r3, #0
    3f92:	da19      	bge.n	3fc8 <updateDisplay+0x48>
    3f94:	6882      	ldr	r2, [r0, #8]
    3f96:	6891      	ldr	r1, [r2, #8]
    3f98:	6993      	ldr	r3, [r2, #24]
    3f9a:	4299      	cmp	r1, r3
    3f9c:	db10      	blt.n	3fc0 <updateDisplay+0x40>
    3f9e:	6813      	ldr	r3, [r2, #0]
    3fa0:	22fe      	movs	r2, #254	; 0xfe
    3fa2:	701a      	strb	r2, [r3, #0]
    3fa4:	4b2d      	ldr	r3, [pc, #180]	; (405c <updateDisplay+0xdc>)
    3fa6:	6818      	ldr	r0, [r3, #0]
    3fa8:	6882      	ldr	r2, [r0, #8]
    3faa:	6813      	ldr	r3, [r2, #0]
    3fac:	7819      	ldrb	r1, [r3, #0]
    3fae:	290a      	cmp	r1, #10
    3fb0:	d002      	beq.n	3fb8 <updateDisplay+0x38>
    3fb2:	3301      	adds	r3, #1
    3fb4:	6013      	str	r3, [r2, #0]
    3fb6:	e011      	b.n	3fdc <updateDisplay+0x5c>
    3fb8:	210a      	movs	r1, #10
    3fba:	4b29      	ldr	r3, [pc, #164]	; (4060 <updateDisplay+0xe0>)
    3fbc:	4798      	blx	r3
    3fbe:	e00d      	b.n	3fdc <updateDisplay+0x5c>
    3fc0:	21fe      	movs	r1, #254	; 0xfe
    3fc2:	4b27      	ldr	r3, [pc, #156]	; (4060 <updateDisplay+0xe0>)
    3fc4:	4798      	blx	r3
    3fc6:	e009      	b.n	3fdc <updateDisplay+0x5c>
    3fc8:	6883      	ldr	r3, [r0, #8]
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	22fe      	movs	r2, #254	; 0xfe
    3fce:	701a      	strb	r2, [r3, #0]
    3fd0:	4b22      	ldr	r3, [pc, #136]	; (405c <updateDisplay+0xdc>)
    3fd2:	681b      	ldr	r3, [r3, #0]
    3fd4:	689b      	ldr	r3, [r3, #8]
    3fd6:	681a      	ldr	r2, [r3, #0]
    3fd8:	3201      	adds	r2, #1
    3fda:	601a      	str	r2, [r3, #0]
	putchar(128);
    3fdc:	4b1f      	ldr	r3, [pc, #124]	; (405c <updateDisplay+0xdc>)
    3fde:	6818      	ldr	r0, [r3, #0]
    3fe0:	6882      	ldr	r2, [r0, #8]
    3fe2:	6893      	ldr	r3, [r2, #8]
    3fe4:	3b01      	subs	r3, #1
    3fe6:	6093      	str	r3, [r2, #8]
    3fe8:	2b00      	cmp	r3, #0
    3fea:	da19      	bge.n	4020 <updateDisplay+0xa0>
    3fec:	6882      	ldr	r2, [r0, #8]
    3fee:	6891      	ldr	r1, [r2, #8]
    3ff0:	6993      	ldr	r3, [r2, #24]
    3ff2:	4299      	cmp	r1, r3
    3ff4:	db10      	blt.n	4018 <updateDisplay+0x98>
    3ff6:	6813      	ldr	r3, [r2, #0]
    3ff8:	2280      	movs	r2, #128	; 0x80
    3ffa:	701a      	strb	r2, [r3, #0]
    3ffc:	4b17      	ldr	r3, [pc, #92]	; (405c <updateDisplay+0xdc>)
    3ffe:	6818      	ldr	r0, [r3, #0]
    4000:	6882      	ldr	r2, [r0, #8]
    4002:	6813      	ldr	r3, [r2, #0]
    4004:	7819      	ldrb	r1, [r3, #0]
    4006:	290a      	cmp	r1, #10
    4008:	d002      	beq.n	4010 <updateDisplay+0x90>
    400a:	3301      	adds	r3, #1
    400c:	6013      	str	r3, [r2, #0]
    400e:	e011      	b.n	4034 <updateDisplay+0xb4>
    4010:	210a      	movs	r1, #10
    4012:	4b13      	ldr	r3, [pc, #76]	; (4060 <updateDisplay+0xe0>)
    4014:	4798      	blx	r3
    4016:	e00d      	b.n	4034 <updateDisplay+0xb4>
    4018:	2180      	movs	r1, #128	; 0x80
    401a:	4b11      	ldr	r3, [pc, #68]	; (4060 <updateDisplay+0xe0>)
    401c:	4798      	blx	r3
    401e:	e009      	b.n	4034 <updateDisplay+0xb4>
    4020:	6883      	ldr	r3, [r0, #8]
    4022:	681b      	ldr	r3, [r3, #0]
    4024:	2280      	movs	r2, #128	; 0x80
    4026:	701a      	strb	r2, [r3, #0]
    4028:	4b0c      	ldr	r3, [pc, #48]	; (405c <updateDisplay+0xdc>)
    402a:	681b      	ldr	r3, [r3, #0]
    402c:	689b      	ldr	r3, [r3, #8]
    402e:	681a      	ldr	r2, [r3, #0]
    4030:	3201      	adds	r2, #1
    4032:	601a      	str	r2, [r3, #0]
	//update display
	printf("Mode:%s  Rm:%2dTarget:%2d%c %2d%c %s", mode, roomSelection, targetTemp, degree, roomTemp, degree, ventStatus);
    4034:	4b0b      	ldr	r3, [pc, #44]	; (4064 <updateDisplay+0xe4>)
    4036:	7819      	ldrb	r1, [r3, #0]
    4038:	4b0b      	ldr	r3, [pc, #44]	; (4068 <updateDisplay+0xe8>)
    403a:	681a      	ldr	r2, [r3, #0]
    403c:	4b0b      	ldr	r3, [pc, #44]	; (406c <updateDisplay+0xec>)
    403e:	681b      	ldr	r3, [r3, #0]
    4040:	9100      	str	r1, [sp, #0]
    4042:	480b      	ldr	r0, [pc, #44]	; (4070 <updateDisplay+0xf0>)
    4044:	6800      	ldr	r0, [r0, #0]
    4046:	9001      	str	r0, [sp, #4]
    4048:	9102      	str	r1, [sp, #8]
    404a:	490a      	ldr	r1, [pc, #40]	; (4074 <updateDisplay+0xf4>)
    404c:	6809      	ldr	r1, [r1, #0]
    404e:	9103      	str	r1, [sp, #12]
    4050:	4809      	ldr	r0, [pc, #36]	; (4078 <updateDisplay+0xf8>)
    4052:	490a      	ldr	r1, [pc, #40]	; (407c <updateDisplay+0xfc>)
    4054:	4c0a      	ldr	r4, [pc, #40]	; (4080 <updateDisplay+0x100>)
    4056:	47a0      	blx	r4
}
    4058:	b004      	add	sp, #16
    405a:	bd10      	pop	{r4, pc}
    405c:	20000090 	.word	0x20000090
    4060:	00004b91 	.word	0x00004b91
    4064:	2000002c 	.word	0x2000002c
    4068:	20000028 	.word	0x20000028
    406c:	20000014 	.word	0x20000014
    4070:	20000024 	.word	0x20000024
    4074:	20000018 	.word	0x20000018
    4078:	00005494 	.word	0x00005494
    407c:	2000001c 	.word	0x2000001c
    4080:	000044c9 	.word	0x000044c9

00004084 <lcd_task>:
}

//Tasks

static void lcd_task(void *params)
{
    4084:	b538      	push	{r3, r4, r5, lr}
	uint16_t xLastWakeTime = xTaskGetTickCount();
    4086:	4b04      	ldr	r3, [pc, #16]	; (4098 <lcd_task+0x14>)
    4088:	4798      	blx	r3
	//period
	const uint16_t xWakePeriod = 1000;

	while(1)
	{
		updateDisplay();
    408a:	4d04      	ldr	r5, [pc, #16]	; (409c <lcd_task+0x18>)

		/* Block until xWakePeriod ticks since previous call */
        //vTaskDelayUntil(&xLastWakeTime, xWakePeriod);
		vTaskDelay(100);
    408c:	4c04      	ldr	r4, [pc, #16]	; (40a0 <lcd_task+0x1c>)
	//period
	const uint16_t xWakePeriod = 1000;

	while(1)
	{
		updateDisplay();
    408e:	47a8      	blx	r5

		/* Block until xWakePeriod ticks since previous call */
        //vTaskDelayUntil(&xLastWakeTime, xWakePeriod);
		vTaskDelay(100);
    4090:	2064      	movs	r0, #100	; 0x64
    4092:	47a0      	blx	r4
    4094:	e7fb      	b.n	408e <lcd_task+0xa>
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	000020dd 	.word	0x000020dd
    409c:	00003f81 	.word	0x00003f81
    40a0:	00002321 	.word	0x00002321

000040a4 <wireless_init>:
	//update display
	printf("Mode:%s  Rm:%2dTarget:%2d%c %2d%c %s", mode, roomSelection, targetTemp, degree, roomTemp, degree, ventStatus);
}

void wireless_init(void)
{
    40a4:	b508      	push	{r3, lr}
	NWK_SetAddr(APP_ADDR);
    40a6:	2000      	movs	r0, #0
    40a8:	4b0a      	ldr	r3, [pc, #40]	; (40d4 <wireless_init+0x30>)
    40aa:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    40ac:	480a      	ldr	r0, [pc, #40]	; (40d8 <wireless_init+0x34>)
    40ae:	4b0b      	ldr	r3, [pc, #44]	; (40dc <wireless_init+0x38>)
    40b0:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    40b2:	200f      	movs	r0, #15
    40b4:	4b0a      	ldr	r3, [pc, #40]	; (40e0 <wireless_init+0x3c>)
    40b6:	4798      	blx	r3
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    40b8:	2001      	movs	r0, #1
    40ba:	4b0a      	ldr	r3, [pc, #40]	; (40e4 <wireless_init+0x40>)
    40bc:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    40be:	2023      	movs	r0, #35	; 0x23
    40c0:	4b09      	ldr	r3, [pc, #36]	; (40e8 <wireless_init+0x44>)
    40c2:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    40c4:	4809      	ldr	r0, [pc, #36]	; (40ec <wireless_init+0x48>)
    40c6:	4b0a      	ldr	r3, [pc, #40]	; (40f0 <wireless_init+0x4c>)
    40c8:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, receive_packet);
    40ca:	2001      	movs	r0, #1
    40cc:	4909      	ldr	r1, [pc, #36]	; (40f4 <wireless_init+0x50>)
    40ce:	4b0a      	ldr	r3, [pc, #40]	; (40f8 <wireless_init+0x54>)
    40d0:	4798      	blx	r3
}
    40d2:	bd08      	pop	{r3, pc}
    40d4:	000013b1 	.word	0x000013b1
    40d8:	00004567 	.word	0x00004567
    40dc:	000013c5 	.word	0x000013c5
    40e0:	000012c9 	.word	0x000012c9
    40e4:	000012b5 	.word	0x000012b5
    40e8:	00001339 	.word	0x00001339
    40ec:	000054bc 	.word	0x000054bc
    40f0:	000015b1 	.word	0x000015b1
    40f4:	00003f2d 	.word	0x00003f2d
    40f8:	000013d9 	.word	0x000013d9

000040fc <main>:
void send_packet(struct wireless_packet packet);	//Sends data based on the struct passed in with packet
bool receive_packet(NWK_DataInd_t *ind);			//Callback function when a packet is received
void send_packet_conf(NWK_DataReq_t *req);			//Callback function for a confirmed sent packet

int main (void)
{
    40fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    40fe:	b095      	sub	sp, #84	; 0x54
	system_init();
    4100:	4b42      	ldr	r3, [pc, #264]	; (420c <main+0x110>)
    4102:	4798      	blx	r3
	delay_init();
    4104:	4b42      	ldr	r3, [pc, #264]	; (4210 <main+0x114>)
    4106:	4798      	blx	r3
	//board_init();
	//wireless_sys_init();
	SYS_Init();
    4108:	4b42      	ldr	r3, [pc, #264]	; (4214 <main+0x118>)
    410a:	4798      	blx	r3
	wireless_init();
    410c:	4b42      	ldr	r3, [pc, #264]	; (4218 <main+0x11c>)
    410e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4110:	aa04      	add	r2, sp, #16
    4112:	2380      	movs	r3, #128	; 0x80
    4114:	05db      	lsls	r3, r3, #23
    4116:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4118:	2300      	movs	r3, #0
    411a:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    411c:	21ff      	movs	r1, #255	; 0xff
    411e:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    4120:	2100      	movs	r1, #0
    4122:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4124:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    4126:	2096      	movs	r0, #150	; 0x96
    4128:	0180      	lsls	r0, r0, #6
    412a:	6210      	str	r0, [r2, #32]
	config->receiver_enable  = true;
    412c:	2601      	movs	r6, #1
    412e:	2024      	movs	r0, #36	; 0x24
    4130:	5416      	strb	r6, [r2, r0]
	config->transmitter_enable = true;
    4132:	2025      	movs	r0, #37	; 0x25
    4134:	5416      	strb	r6, [r2, r0]
	config->clock_polarity_inverted = false;
    4136:	2026      	movs	r0, #38	; 0x26
    4138:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    413a:	2027      	movs	r0, #39	; 0x27
    413c:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    413e:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4140:	202c      	movs	r0, #44	; 0x2c
    4142:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    4144:	202d      	movs	r0, #45	; 0x2d
    4146:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4148:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    414a:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    414c:	76d3      	strb	r3, [r2, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    414e:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    4150:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    4152:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                        = 19;
    4154:	2313      	movs	r3, #19
    4156:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    4158:	7751      	strb	r1, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    415a:	2380      	movs	r3, #128	; 0x80
    415c:	035b      	lsls	r3, r3, #13
    415e:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    4160:	4b2e      	ldr	r3, [pc, #184]	; (421c <main+0x120>)
    4162:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    4164:	4b2e      	ldr	r3, [pc, #184]	; (4220 <main+0x124>)
    4166:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    4168:	2301      	movs	r3, #1
    416a:	425b      	negs	r3, r3
    416c:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    416e:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    4170:	4c2c      	ldr	r4, [pc, #176]	; (4224 <main+0x128>)
    4172:	4b2d      	ldr	r3, [pc, #180]	; (4228 <main+0x12c>)
    4174:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4176:	492d      	ldr	r1, [pc, #180]	; (422c <main+0x130>)
    4178:	4b2d      	ldr	r3, [pc, #180]	; (4230 <main+0x134>)
    417a:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    417c:	492d      	ldr	r1, [pc, #180]	; (4234 <main+0x138>)
    417e:	4b2e      	ldr	r3, [pc, #184]	; (4238 <main+0x13c>)
    4180:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    4182:	1c20      	adds	r0, r4, #0
    4184:	492d      	ldr	r1, [pc, #180]	; (423c <main+0x140>)
    4186:	4b2e      	ldr	r3, [pc, #184]	; (4240 <main+0x144>)
    4188:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    418a:	4f2e      	ldr	r7, [pc, #184]	; (4244 <main+0x148>)
    418c:	683b      	ldr	r3, [r7, #0]
    418e:	6898      	ldr	r0, [r3, #8]
    4190:	2100      	movs	r1, #0
    4192:	4d2d      	ldr	r5, [pc, #180]	; (4248 <main+0x14c>)
    4194:	47a8      	blx	r5
	setbuf(stdin, NULL);
    4196:	683b      	ldr	r3, [r7, #0]
    4198:	6858      	ldr	r0, [r3, #4]
    419a:	2100      	movs	r1, #0
    419c:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    419e:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    41a0:	1c28      	adds	r0, r5, #0
    41a2:	4b2a      	ldr	r3, [pc, #168]	; (424c <main+0x150>)
    41a4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    41a6:	231f      	movs	r3, #31
    41a8:	4018      	ands	r0, r3
    41aa:	4086      	lsls	r6, r0
    41ac:	4b28      	ldr	r3, [pc, #160]	; (4250 <main+0x154>)
    41ae:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    41b0:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    41b2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    41b4:	2a00      	cmp	r2, #0
    41b6:	d1fc      	bne.n	41b2 <main+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    41b8:	682b      	ldr	r3, [r5, #0]
    41ba:	2402      	movs	r4, #2
    41bc:	4323      	orrs	r3, r4
    41be:	602b      	str	r3, [r5, #0]
	//board_init();
	//wireless_sys_init();
	SYS_Init();
	wireless_init();
	configure_console();
	TEMP_QUEUE = xQueueCreate( 15, sizeof(struct wireless_packet) );
    41c0:	200f      	movs	r0, #15
    41c2:	2108      	movs	r1, #8
    41c4:	4d23      	ldr	r5, [pc, #140]	; (4254 <main+0x158>)
    41c6:	47a8      	blx	r5
    41c8:	4b23      	ldr	r3, [pc, #140]	; (4258 <main+0x15c>)
    41ca:	6018      	str	r0, [r3, #0]
	REGISTER_QUEUE = xQueueCreate( 15, sizeof(struct wireless_packet) );
    41cc:	200f      	movs	r0, #15
    41ce:	2108      	movs	r1, #8
    41d0:	2200      	movs	r2, #0
    41d2:	47a8      	blx	r5
    41d4:	4b21      	ldr	r3, [pc, #132]	; (425c <main+0x160>)
    41d6:	6018      	str	r0, [r3, #0]

	
	xTaskCreate(lcd_task,
    41d8:	2680      	movs	r6, #128	; 0x80
    41da:	00f6      	lsls	r6, r6, #3
    41dc:	9400      	str	r4, [sp, #0]
    41de:	2400      	movs	r4, #0
    41e0:	9401      	str	r4, [sp, #4]
    41e2:	9402      	str	r4, [sp, #8]
    41e4:	9403      	str	r4, [sp, #12]
    41e6:	481e      	ldr	r0, [pc, #120]	; (4260 <main+0x164>)
    41e8:	491e      	ldr	r1, [pc, #120]	; (4264 <main+0x168>)
    41ea:	1c32      	adds	r2, r6, #0
    41ec:	2300      	movs	r3, #0
    41ee:	4d1e      	ldr	r5, [pc, #120]	; (4268 <main+0x16c>)
    41f0:	47a8      	blx	r5
		1024,
		NULL,
		2,
		NULL);

	xTaskCreate(test_task,
    41f2:	2301      	movs	r3, #1
    41f4:	9300      	str	r3, [sp, #0]
    41f6:	9401      	str	r4, [sp, #4]
    41f8:	9402      	str	r4, [sp, #8]
    41fa:	9403      	str	r4, [sp, #12]
    41fc:	481b      	ldr	r0, [pc, #108]	; (426c <main+0x170>)
    41fe:	491c      	ldr	r1, [pc, #112]	; (4270 <main+0x174>)
    4200:	1c32      	adds	r2, r6, #0
    4202:	2300      	movs	r3, #0
    4204:	47a8      	blx	r5
		1024,
		NULL,
		1,
		NULL);
	
	vTaskStartScheduler();
    4206:	4b1b      	ldr	r3, [pc, #108]	; (4274 <main+0x178>)
    4208:	4798      	blx	r3
    420a:	e7fe      	b.n	420a <main+0x10e>
    420c:	00003dad 	.word	0x00003dad
    4210:	00003739 	.word	0x00003739
    4214:	000010d5 	.word	0x000010d5
    4218:	000040a5 	.word	0x000040a5
    421c:	00040003 	.word	0x00040003
    4220:	00050003 	.word	0x00050003
    4224:	20004224 	.word	0x20004224
    4228:	200042bc 	.word	0x200042bc
    422c:	00003f15 	.word	0x00003f15
    4230:	200042b8 	.word	0x200042b8
    4234:	00003ee9 	.word	0x00003ee9
    4238:	200042b4 	.word	0x200042b4
    423c:	42000800 	.word	0x42000800
    4240:	00002ba5 	.word	0x00002ba5
    4244:	20000090 	.word	0x20000090
    4248:	000044fd 	.word	0x000044fd
    424c:	00003611 	.word	0x00003611
    4250:	e000e100 	.word	0xe000e100
    4254:	00001985 	.word	0x00001985
    4258:	2000441c 	.word	0x2000441c
    425c:	20004420 	.word	0x20004420
    4260:	00004085 	.word	0x00004085
    4264:	000054d0 	.word	0x000054d0
    4268:	00001e79 	.word	0x00001e79
    426c:	00003eb5 	.word	0x00003eb5
    4270:	000054d4 	.word	0x000054d4
    4274:	0000206d 	.word	0x0000206d

00004278 <common_tc_delay>:
    4278:	b510      	push	{r4, lr}
    427a:	1c04      	adds	r4, r0, #0
    427c:	4b13      	ldr	r3, [pc, #76]	; (42cc <common_tc_delay+0x54>)
    427e:	4798      	blx	r3
    4280:	4b13      	ldr	r3, [pc, #76]	; (42d0 <common_tc_delay+0x58>)
    4282:	781a      	ldrb	r2, [r3, #0]
    4284:	4362      	muls	r2, r4
    4286:	1881      	adds	r1, r0, r2
    4288:	4b12      	ldr	r3, [pc, #72]	; (42d4 <common_tc_delay+0x5c>)
    428a:	6059      	str	r1, [r3, #4]
    428c:	6859      	ldr	r1, [r3, #4]
    428e:	0c09      	lsrs	r1, r1, #16
    4290:	6059      	str	r1, [r3, #4]
    4292:	685b      	ldr	r3, [r3, #4]
    4294:	2b00      	cmp	r3, #0
    4296:	d007      	beq.n	42a8 <common_tc_delay+0x30>
    4298:	4b0e      	ldr	r3, [pc, #56]	; (42d4 <common_tc_delay+0x5c>)
    429a:	6859      	ldr	r1, [r3, #4]
    429c:	3201      	adds	r2, #1
    429e:	1880      	adds	r0, r0, r2
    42a0:	8118      	strh	r0, [r3, #8]
    42a2:	4b0d      	ldr	r3, [pc, #52]	; (42d8 <common_tc_delay+0x60>)
    42a4:	4798      	blx	r3
    42a6:	e004      	b.n	42b2 <common_tc_delay+0x3a>
    42a8:	1882      	adds	r2, r0, r2
    42aa:	4b0a      	ldr	r3, [pc, #40]	; (42d4 <common_tc_delay+0x5c>)
    42ac:	811a      	strh	r2, [r3, #8]
    42ae:	4b0b      	ldr	r3, [pc, #44]	; (42dc <common_tc_delay+0x64>)
    42b0:	4798      	blx	r3
    42b2:	4b08      	ldr	r3, [pc, #32]	; (42d4 <common_tc_delay+0x5c>)
    42b4:	891b      	ldrh	r3, [r3, #8]
    42b6:	2b63      	cmp	r3, #99	; 0x63
    42b8:	d802      	bhi.n	42c0 <common_tc_delay+0x48>
    42ba:	3364      	adds	r3, #100	; 0x64
    42bc:	4a05      	ldr	r2, [pc, #20]	; (42d4 <common_tc_delay+0x5c>)
    42be:	8113      	strh	r3, [r2, #8]
    42c0:	4b04      	ldr	r3, [pc, #16]	; (42d4 <common_tc_delay+0x5c>)
    42c2:	8918      	ldrh	r0, [r3, #8]
    42c4:	4b06      	ldr	r3, [pc, #24]	; (42e0 <common_tc_delay+0x68>)
    42c6:	4798      	blx	r3
    42c8:	bd10      	pop	{r4, pc}
    42ca:	46c0      	nop			; (mov r8, r8)
    42cc:	00000f65 	.word	0x00000f65
    42d0:	20004424 	.word	0x20004424
    42d4:	20004258 	.word	0x20004258
    42d8:	00000f79 	.word	0x00000f79
    42dc:	00000f8d 	.word	0x00000f8d
    42e0:	00000fc9 	.word	0x00000fc9

000042e4 <common_tc_init>:
    42e4:	b508      	push	{r3, lr}
    42e6:	2200      	movs	r2, #0
    42e8:	4b03      	ldr	r3, [pc, #12]	; (42f8 <common_tc_init+0x14>)
    42ea:	701a      	strb	r2, [r3, #0]
    42ec:	4b03      	ldr	r3, [pc, #12]	; (42fc <common_tc_init+0x18>)
    42ee:	4798      	blx	r3
    42f0:	4b03      	ldr	r3, [pc, #12]	; (4300 <common_tc_init+0x1c>)
    42f2:	7018      	strb	r0, [r3, #0]
    42f4:	bd08      	pop	{r3, pc}
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	20004258 	.word	0x20004258
    42fc:	00000fe1 	.word	0x00000fe1
    4300:	20004424 	.word	0x20004424

00004304 <tmr_ovf_callback>:
    4304:	b508      	push	{r3, lr}
    4306:	4b0e      	ldr	r3, [pc, #56]	; (4340 <tmr_ovf_callback+0x3c>)
    4308:	685b      	ldr	r3, [r3, #4]
    430a:	2b00      	cmp	r3, #0
    430c:	d007      	beq.n	431e <tmr_ovf_callback+0x1a>
    430e:	4a0c      	ldr	r2, [pc, #48]	; (4340 <tmr_ovf_callback+0x3c>)
    4310:	6853      	ldr	r3, [r2, #4]
    4312:	3b01      	subs	r3, #1
    4314:	6053      	str	r3, [r2, #4]
    4316:	2b00      	cmp	r3, #0
    4318:	d101      	bne.n	431e <tmr_ovf_callback+0x1a>
    431a:	4b0a      	ldr	r3, [pc, #40]	; (4344 <tmr_ovf_callback+0x40>)
    431c:	4798      	blx	r3
    431e:	4a08      	ldr	r2, [pc, #32]	; (4340 <tmr_ovf_callback+0x3c>)
    4320:	7813      	ldrb	r3, [r2, #0]
    4322:	3301      	adds	r3, #1
    4324:	b2db      	uxtb	r3, r3
    4326:	7013      	strb	r3, [r2, #0]
    4328:	4a07      	ldr	r2, [pc, #28]	; (4348 <tmr_ovf_callback+0x44>)
    432a:	7812      	ldrb	r2, [r2, #0]
    432c:	429a      	cmp	r2, r3
    432e:	d806      	bhi.n	433e <tmr_ovf_callback+0x3a>
    4330:	4b03      	ldr	r3, [pc, #12]	; (4340 <tmr_ovf_callback+0x3c>)
    4332:	2200      	movs	r2, #0
    4334:	701a      	strb	r2, [r3, #0]
    4336:	68db      	ldr	r3, [r3, #12]
    4338:	2b00      	cmp	r3, #0
    433a:	d000      	beq.n	433e <tmr_ovf_callback+0x3a>
    433c:	4798      	blx	r3
    433e:	bd08      	pop	{r3, pc}
    4340:	20004258 	.word	0x20004258
    4344:	00000f8d 	.word	0x00000f8d
    4348:	20004424 	.word	0x20004424

0000434c <tmr_cca_callback>:
    434c:	b508      	push	{r3, lr}
    434e:	4b04      	ldr	r3, [pc, #16]	; (4360 <tmr_cca_callback+0x14>)
    4350:	4798      	blx	r3
    4352:	4b04      	ldr	r3, [pc, #16]	; (4364 <tmr_cca_callback+0x18>)
    4354:	691b      	ldr	r3, [r3, #16]
    4356:	2b00      	cmp	r3, #0
    4358:	d000      	beq.n	435c <tmr_cca_callback+0x10>
    435a:	4798      	blx	r3
    435c:	bd08      	pop	{r3, pc}
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	00000f79 	.word	0x00000f79
    4364:	20004258 	.word	0x20004258

00004368 <set_common_tc_expiry_callback>:
    4368:	4b01      	ldr	r3, [pc, #4]	; (4370 <set_common_tc_expiry_callback+0x8>)
    436a:	6118      	str	r0, [r3, #16]
    436c:	4770      	bx	lr
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	20004258 	.word	0x20004258

00004374 <__aeabi_uidiv>:
    4374:	2900      	cmp	r1, #0
    4376:	d034      	beq.n	43e2 <.udivsi3_skip_div0_test+0x6a>

00004378 <.udivsi3_skip_div0_test>:
    4378:	2301      	movs	r3, #1
    437a:	2200      	movs	r2, #0
    437c:	b410      	push	{r4}
    437e:	4288      	cmp	r0, r1
    4380:	d32c      	bcc.n	43dc <.udivsi3_skip_div0_test+0x64>
    4382:	2401      	movs	r4, #1
    4384:	0724      	lsls	r4, r4, #28
    4386:	42a1      	cmp	r1, r4
    4388:	d204      	bcs.n	4394 <.udivsi3_skip_div0_test+0x1c>
    438a:	4281      	cmp	r1, r0
    438c:	d202      	bcs.n	4394 <.udivsi3_skip_div0_test+0x1c>
    438e:	0109      	lsls	r1, r1, #4
    4390:	011b      	lsls	r3, r3, #4
    4392:	e7f8      	b.n	4386 <.udivsi3_skip_div0_test+0xe>
    4394:	00e4      	lsls	r4, r4, #3
    4396:	42a1      	cmp	r1, r4
    4398:	d204      	bcs.n	43a4 <.udivsi3_skip_div0_test+0x2c>
    439a:	4281      	cmp	r1, r0
    439c:	d202      	bcs.n	43a4 <.udivsi3_skip_div0_test+0x2c>
    439e:	0049      	lsls	r1, r1, #1
    43a0:	005b      	lsls	r3, r3, #1
    43a2:	e7f8      	b.n	4396 <.udivsi3_skip_div0_test+0x1e>
    43a4:	4288      	cmp	r0, r1
    43a6:	d301      	bcc.n	43ac <.udivsi3_skip_div0_test+0x34>
    43a8:	1a40      	subs	r0, r0, r1
    43aa:	431a      	orrs	r2, r3
    43ac:	084c      	lsrs	r4, r1, #1
    43ae:	42a0      	cmp	r0, r4
    43b0:	d302      	bcc.n	43b8 <.udivsi3_skip_div0_test+0x40>
    43b2:	1b00      	subs	r0, r0, r4
    43b4:	085c      	lsrs	r4, r3, #1
    43b6:	4322      	orrs	r2, r4
    43b8:	088c      	lsrs	r4, r1, #2
    43ba:	42a0      	cmp	r0, r4
    43bc:	d302      	bcc.n	43c4 <.udivsi3_skip_div0_test+0x4c>
    43be:	1b00      	subs	r0, r0, r4
    43c0:	089c      	lsrs	r4, r3, #2
    43c2:	4322      	orrs	r2, r4
    43c4:	08cc      	lsrs	r4, r1, #3
    43c6:	42a0      	cmp	r0, r4
    43c8:	d302      	bcc.n	43d0 <.udivsi3_skip_div0_test+0x58>
    43ca:	1b00      	subs	r0, r0, r4
    43cc:	08dc      	lsrs	r4, r3, #3
    43ce:	4322      	orrs	r2, r4
    43d0:	2800      	cmp	r0, #0
    43d2:	d003      	beq.n	43dc <.udivsi3_skip_div0_test+0x64>
    43d4:	091b      	lsrs	r3, r3, #4
    43d6:	d001      	beq.n	43dc <.udivsi3_skip_div0_test+0x64>
    43d8:	0909      	lsrs	r1, r1, #4
    43da:	e7e3      	b.n	43a4 <.udivsi3_skip_div0_test+0x2c>
    43dc:	1c10      	adds	r0, r2, #0
    43de:	bc10      	pop	{r4}
    43e0:	4770      	bx	lr
    43e2:	2800      	cmp	r0, #0
    43e4:	d001      	beq.n	43ea <.udivsi3_skip_div0_test+0x72>
    43e6:	2000      	movs	r0, #0
    43e8:	43c0      	mvns	r0, r0
    43ea:	b407      	push	{r0, r1, r2}
    43ec:	4802      	ldr	r0, [pc, #8]	; (43f8 <.udivsi3_skip_div0_test+0x80>)
    43ee:	a102      	add	r1, pc, #8	; (adr r1, 43f8 <.udivsi3_skip_div0_test+0x80>)
    43f0:	1840      	adds	r0, r0, r1
    43f2:	9002      	str	r0, [sp, #8]
    43f4:	bd03      	pop	{r0, r1, pc}
    43f6:	46c0      	nop			; (mov r8, r8)
    43f8:	00000019 	.word	0x00000019

000043fc <__aeabi_uidivmod>:
    43fc:	2900      	cmp	r1, #0
    43fe:	d0f0      	beq.n	43e2 <.udivsi3_skip_div0_test+0x6a>
    4400:	b503      	push	{r0, r1, lr}
    4402:	f7ff ffb9 	bl	4378 <.udivsi3_skip_div0_test>
    4406:	bc0e      	pop	{r1, r2, r3}
    4408:	4342      	muls	r2, r0
    440a:	1a89      	subs	r1, r1, r2
    440c:	4718      	bx	r3
    440e:	46c0      	nop			; (mov r8, r8)

00004410 <__aeabi_idiv0>:
    4410:	4770      	bx	lr
    4412:	46c0      	nop			; (mov r8, r8)

00004414 <__aeabi_lmul>:
    4414:	469c      	mov	ip, r3
    4416:	0403      	lsls	r3, r0, #16
    4418:	b5f0      	push	{r4, r5, r6, r7, lr}
    441a:	0c1b      	lsrs	r3, r3, #16
    441c:	0417      	lsls	r7, r2, #16
    441e:	0c3f      	lsrs	r7, r7, #16
    4420:	0c15      	lsrs	r5, r2, #16
    4422:	1c1e      	adds	r6, r3, #0
    4424:	1c04      	adds	r4, r0, #0
    4426:	0c00      	lsrs	r0, r0, #16
    4428:	437e      	muls	r6, r7
    442a:	436b      	muls	r3, r5
    442c:	4347      	muls	r7, r0
    442e:	4345      	muls	r5, r0
    4430:	18fb      	adds	r3, r7, r3
    4432:	0c30      	lsrs	r0, r6, #16
    4434:	1818      	adds	r0, r3, r0
    4436:	4287      	cmp	r7, r0
    4438:	d902      	bls.n	4440 <__aeabi_lmul+0x2c>
    443a:	2380      	movs	r3, #128	; 0x80
    443c:	025b      	lsls	r3, r3, #9
    443e:	18ed      	adds	r5, r5, r3
    4440:	0c03      	lsrs	r3, r0, #16
    4442:	18ed      	adds	r5, r5, r3
    4444:	4663      	mov	r3, ip
    4446:	435c      	muls	r4, r3
    4448:	434a      	muls	r2, r1
    444a:	0436      	lsls	r6, r6, #16
    444c:	0c36      	lsrs	r6, r6, #16
    444e:	18a1      	adds	r1, r4, r2
    4450:	0400      	lsls	r0, r0, #16
    4452:	1980      	adds	r0, r0, r6
    4454:	1949      	adds	r1, r1, r5
    4456:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004458 <__libc_init_array>:
    4458:	b570      	push	{r4, r5, r6, lr}
    445a:	4b0e      	ldr	r3, [pc, #56]	; (4494 <__libc_init_array+0x3c>)
    445c:	4d0e      	ldr	r5, [pc, #56]	; (4498 <__libc_init_array+0x40>)
    445e:	2400      	movs	r4, #0
    4460:	1aed      	subs	r5, r5, r3
    4462:	10ad      	asrs	r5, r5, #2
    4464:	1c1e      	adds	r6, r3, #0
    4466:	42ac      	cmp	r4, r5
    4468:	d004      	beq.n	4474 <__libc_init_array+0x1c>
    446a:	00a3      	lsls	r3, r4, #2
    446c:	58f3      	ldr	r3, [r6, r3]
    446e:	4798      	blx	r3
    4470:	3401      	adds	r4, #1
    4472:	e7f8      	b.n	4466 <__libc_init_array+0xe>
    4474:	f001 f882 	bl	557c <_init>
    4478:	4b08      	ldr	r3, [pc, #32]	; (449c <__libc_init_array+0x44>)
    447a:	4d09      	ldr	r5, [pc, #36]	; (44a0 <__libc_init_array+0x48>)
    447c:	2400      	movs	r4, #0
    447e:	1aed      	subs	r5, r5, r3
    4480:	10ad      	asrs	r5, r5, #2
    4482:	1c1e      	adds	r6, r3, #0
    4484:	42ac      	cmp	r4, r5
    4486:	d004      	beq.n	4492 <__libc_init_array+0x3a>
    4488:	00a3      	lsls	r3, r4, #2
    448a:	58f3      	ldr	r3, [r6, r3]
    448c:	4798      	blx	r3
    448e:	3401      	adds	r4, #1
    4490:	e7f8      	b.n	4484 <__libc_init_array+0x2c>
    4492:	bd70      	pop	{r4, r5, r6, pc}
    4494:	00005588 	.word	0x00005588
    4498:	00005588 	.word	0x00005588
    449c:	00005588 	.word	0x00005588
    44a0:	0000558c 	.word	0x0000558c

000044a4 <memcpy>:
    44a4:	b510      	push	{r4, lr}
    44a6:	2300      	movs	r3, #0
    44a8:	4293      	cmp	r3, r2
    44aa:	d003      	beq.n	44b4 <memcpy+0x10>
    44ac:	5ccc      	ldrb	r4, [r1, r3]
    44ae:	54c4      	strb	r4, [r0, r3]
    44b0:	3301      	adds	r3, #1
    44b2:	e7f9      	b.n	44a8 <memcpy+0x4>
    44b4:	bd10      	pop	{r4, pc}

000044b6 <memset>:
    44b6:	1c03      	adds	r3, r0, #0
    44b8:	1882      	adds	r2, r0, r2
    44ba:	4293      	cmp	r3, r2
    44bc:	d002      	beq.n	44c4 <memset+0xe>
    44be:	7019      	strb	r1, [r3, #0]
    44c0:	3301      	adds	r3, #1
    44c2:	e7fa      	b.n	44ba <memset+0x4>
    44c4:	4770      	bx	lr
	...

000044c8 <iprintf>:
    44c8:	b40f      	push	{r0, r1, r2, r3}
    44ca:	4b0b      	ldr	r3, [pc, #44]	; (44f8 <iprintf+0x30>)
    44cc:	b513      	push	{r0, r1, r4, lr}
    44ce:	681c      	ldr	r4, [r3, #0]
    44d0:	2c00      	cmp	r4, #0
    44d2:	d005      	beq.n	44e0 <iprintf+0x18>
    44d4:	69a3      	ldr	r3, [r4, #24]
    44d6:	2b00      	cmp	r3, #0
    44d8:	d102      	bne.n	44e0 <iprintf+0x18>
    44da:	1c20      	adds	r0, r4, #0
    44dc:	f000 fd2c 	bl	4f38 <__sinit>
    44e0:	ab05      	add	r3, sp, #20
    44e2:	68a1      	ldr	r1, [r4, #8]
    44e4:	1c20      	adds	r0, r4, #0
    44e6:	9a04      	ldr	r2, [sp, #16]
    44e8:	9301      	str	r3, [sp, #4]
    44ea:	f000 f8bf 	bl	466c <_vfiprintf_r>
    44ee:	bc16      	pop	{r1, r2, r4}
    44f0:	bc08      	pop	{r3}
    44f2:	b004      	add	sp, #16
    44f4:	4718      	bx	r3
    44f6:	46c0      	nop			; (mov r8, r8)
    44f8:	20000090 	.word	0x20000090

000044fc <setbuf>:
    44fc:	b508      	push	{r3, lr}
    44fe:	424a      	negs	r2, r1
    4500:	414a      	adcs	r2, r1
    4502:	2380      	movs	r3, #128	; 0x80
    4504:	0052      	lsls	r2, r2, #1
    4506:	00db      	lsls	r3, r3, #3
    4508:	f000 f802 	bl	4510 <setvbuf>
    450c:	bd08      	pop	{r3, pc}
	...

00004510 <setvbuf>:
    4510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4512:	1c1e      	adds	r6, r3, #0
    4514:	4b3c      	ldr	r3, [pc, #240]	; (4608 <setvbuf+0xf8>)
    4516:	1c04      	adds	r4, r0, #0
    4518:	681d      	ldr	r5, [r3, #0]
    451a:	1c0f      	adds	r7, r1, #0
    451c:	9201      	str	r2, [sp, #4]
    451e:	2d00      	cmp	r5, #0
    4520:	d005      	beq.n	452e <setvbuf+0x1e>
    4522:	69aa      	ldr	r2, [r5, #24]
    4524:	2a00      	cmp	r2, #0
    4526:	d102      	bne.n	452e <setvbuf+0x1e>
    4528:	1c28      	adds	r0, r5, #0
    452a:	f000 fd05 	bl	4f38 <__sinit>
    452e:	4b37      	ldr	r3, [pc, #220]	; (460c <setvbuf+0xfc>)
    4530:	429c      	cmp	r4, r3
    4532:	d101      	bne.n	4538 <setvbuf+0x28>
    4534:	686c      	ldr	r4, [r5, #4]
    4536:	e008      	b.n	454a <setvbuf+0x3a>
    4538:	4b35      	ldr	r3, [pc, #212]	; (4610 <setvbuf+0x100>)
    453a:	429c      	cmp	r4, r3
    453c:	d101      	bne.n	4542 <setvbuf+0x32>
    453e:	68ac      	ldr	r4, [r5, #8]
    4540:	e003      	b.n	454a <setvbuf+0x3a>
    4542:	4b34      	ldr	r3, [pc, #208]	; (4614 <setvbuf+0x104>)
    4544:	429c      	cmp	r4, r3
    4546:	d100      	bne.n	454a <setvbuf+0x3a>
    4548:	68ec      	ldr	r4, [r5, #12]
    454a:	9b01      	ldr	r3, [sp, #4]
    454c:	2b02      	cmp	r3, #2
    454e:	d857      	bhi.n	4600 <setvbuf+0xf0>
    4550:	2e00      	cmp	r6, #0
    4552:	db55      	blt.n	4600 <setvbuf+0xf0>
    4554:	1c28      	adds	r0, r5, #0
    4556:	1c21      	adds	r1, r4, #0
    4558:	f000 fc6e 	bl	4e38 <_fflush_r>
    455c:	2300      	movs	r3, #0
    455e:	6063      	str	r3, [r4, #4]
    4560:	61a3      	str	r3, [r4, #24]
    4562:	89a3      	ldrh	r3, [r4, #12]
    4564:	061a      	lsls	r2, r3, #24
    4566:	d503      	bpl.n	4570 <setvbuf+0x60>
    4568:	1c28      	adds	r0, r5, #0
    456a:	6921      	ldr	r1, [r4, #16]
    456c:	f000 fdba 	bl	50e4 <_free_r>
    4570:	89a3      	ldrh	r3, [r4, #12]
    4572:	2283      	movs	r2, #131	; 0x83
    4574:	4393      	bics	r3, r2
    4576:	81a3      	strh	r3, [r4, #12]
    4578:	9b01      	ldr	r3, [sp, #4]
    457a:	2b02      	cmp	r3, #2
    457c:	d013      	beq.n	45a6 <setvbuf+0x96>
    457e:	2f00      	cmp	r7, #0
    4580:	d125      	bne.n	45ce <setvbuf+0xbe>
    4582:	2e00      	cmp	r6, #0
    4584:	d101      	bne.n	458a <setvbuf+0x7a>
    4586:	2680      	movs	r6, #128	; 0x80
    4588:	00f6      	lsls	r6, r6, #3
    458a:	1c30      	adds	r0, r6, #0
    458c:	f000 fd94 	bl	50b8 <malloc>
    4590:	1e07      	subs	r7, r0, #0
    4592:	d118      	bne.n	45c6 <setvbuf+0xb6>
    4594:	2080      	movs	r0, #128	; 0x80
    4596:	00c0      	lsls	r0, r0, #3
    4598:	f000 fd8e 	bl	50b8 <malloc>
    459c:	1e07      	subs	r7, r0, #0
    459e:	d110      	bne.n	45c2 <setvbuf+0xb2>
    45a0:	2001      	movs	r0, #1
    45a2:	4240      	negs	r0, r0
    45a4:	e000      	b.n	45a8 <setvbuf+0x98>
    45a6:	2000      	movs	r0, #0
    45a8:	89a3      	ldrh	r3, [r4, #12]
    45aa:	2202      	movs	r2, #2
    45ac:	4313      	orrs	r3, r2
    45ae:	81a3      	strh	r3, [r4, #12]
    45b0:	2300      	movs	r3, #0
    45b2:	60a3      	str	r3, [r4, #8]
    45b4:	1c23      	adds	r3, r4, #0
    45b6:	3347      	adds	r3, #71	; 0x47
    45b8:	6023      	str	r3, [r4, #0]
    45ba:	6123      	str	r3, [r4, #16]
    45bc:	2301      	movs	r3, #1
    45be:	6163      	str	r3, [r4, #20]
    45c0:	e020      	b.n	4604 <setvbuf+0xf4>
    45c2:	2680      	movs	r6, #128	; 0x80
    45c4:	00f6      	lsls	r6, r6, #3
    45c6:	89a3      	ldrh	r3, [r4, #12]
    45c8:	2280      	movs	r2, #128	; 0x80
    45ca:	4313      	orrs	r3, r2
    45cc:	81a3      	strh	r3, [r4, #12]
    45ce:	9a01      	ldr	r2, [sp, #4]
    45d0:	2a01      	cmp	r2, #1
    45d2:	d104      	bne.n	45de <setvbuf+0xce>
    45d4:	89a3      	ldrh	r3, [r4, #12]
    45d6:	4313      	orrs	r3, r2
    45d8:	81a3      	strh	r3, [r4, #12]
    45da:	4273      	negs	r3, r6
    45dc:	61a3      	str	r3, [r4, #24]
    45de:	4b0e      	ldr	r3, [pc, #56]	; (4618 <setvbuf+0x108>)
    45e0:	2000      	movs	r0, #0
    45e2:	62ab      	str	r3, [r5, #40]	; 0x28
    45e4:	89a3      	ldrh	r3, [r4, #12]
    45e6:	6027      	str	r7, [r4, #0]
    45e8:	6127      	str	r7, [r4, #16]
    45ea:	6166      	str	r6, [r4, #20]
    45ec:	071a      	lsls	r2, r3, #28
    45ee:	d509      	bpl.n	4604 <setvbuf+0xf4>
    45f0:	2203      	movs	r2, #3
    45f2:	4013      	ands	r3, r2
    45f4:	425a      	negs	r2, r3
    45f6:	4153      	adcs	r3, r2
    45f8:	425b      	negs	r3, r3
    45fa:	401e      	ands	r6, r3
    45fc:	60a6      	str	r6, [r4, #8]
    45fe:	e001      	b.n	4604 <setvbuf+0xf4>
    4600:	2001      	movs	r0, #1
    4602:	4240      	negs	r0, r0
    4604:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	20000090 	.word	0x20000090
    460c:	0000551c 	.word	0x0000551c
    4610:	0000553c 	.word	0x0000553c
    4614:	0000555c 	.word	0x0000555c
    4618:	00004e91 	.word	0x00004e91

0000461c <__sfputc_r>:
    461c:	6893      	ldr	r3, [r2, #8]
    461e:	b510      	push	{r4, lr}
    4620:	3b01      	subs	r3, #1
    4622:	6093      	str	r3, [r2, #8]
    4624:	2b00      	cmp	r3, #0
    4626:	da05      	bge.n	4634 <__sfputc_r+0x18>
    4628:	6994      	ldr	r4, [r2, #24]
    462a:	42a3      	cmp	r3, r4
    462c:	db08      	blt.n	4640 <__sfputc_r+0x24>
    462e:	b2cb      	uxtb	r3, r1
    4630:	2b0a      	cmp	r3, #10
    4632:	d005      	beq.n	4640 <__sfputc_r+0x24>
    4634:	6813      	ldr	r3, [r2, #0]
    4636:	1c58      	adds	r0, r3, #1
    4638:	6010      	str	r0, [r2, #0]
    463a:	7019      	strb	r1, [r3, #0]
    463c:	b2c8      	uxtb	r0, r1
    463e:	e001      	b.n	4644 <__sfputc_r+0x28>
    4640:	f000 faa6 	bl	4b90 <__swbuf_r>
    4644:	bd10      	pop	{r4, pc}

00004646 <__sfputs_r>:
    4646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4648:	1c06      	adds	r6, r0, #0
    464a:	1c0f      	adds	r7, r1, #0
    464c:	1c14      	adds	r4, r2, #0
    464e:	18d5      	adds	r5, r2, r3
    4650:	42ac      	cmp	r4, r5
    4652:	d008      	beq.n	4666 <__sfputs_r+0x20>
    4654:	7821      	ldrb	r1, [r4, #0]
    4656:	1c30      	adds	r0, r6, #0
    4658:	1c3a      	adds	r2, r7, #0
    465a:	f7ff ffdf 	bl	461c <__sfputc_r>
    465e:	3401      	adds	r4, #1
    4660:	1c43      	adds	r3, r0, #1
    4662:	d1f5      	bne.n	4650 <__sfputs_r+0xa>
    4664:	e000      	b.n	4668 <__sfputs_r+0x22>
    4666:	2000      	movs	r0, #0
    4668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000466c <_vfiprintf_r>:
    466c:	b5f0      	push	{r4, r5, r6, r7, lr}
    466e:	b09f      	sub	sp, #124	; 0x7c
    4670:	1c06      	adds	r6, r0, #0
    4672:	1c0f      	adds	r7, r1, #0
    4674:	9203      	str	r2, [sp, #12]
    4676:	9305      	str	r3, [sp, #20]
    4678:	2800      	cmp	r0, #0
    467a:	d004      	beq.n	4686 <_vfiprintf_r+0x1a>
    467c:	6981      	ldr	r1, [r0, #24]
    467e:	2900      	cmp	r1, #0
    4680:	d101      	bne.n	4686 <_vfiprintf_r+0x1a>
    4682:	f000 fc59 	bl	4f38 <__sinit>
    4686:	4b75      	ldr	r3, [pc, #468]	; (485c <_vfiprintf_r+0x1f0>)
    4688:	429f      	cmp	r7, r3
    468a:	d101      	bne.n	4690 <_vfiprintf_r+0x24>
    468c:	6877      	ldr	r7, [r6, #4]
    468e:	e008      	b.n	46a2 <_vfiprintf_r+0x36>
    4690:	4b73      	ldr	r3, [pc, #460]	; (4860 <_vfiprintf_r+0x1f4>)
    4692:	429f      	cmp	r7, r3
    4694:	d101      	bne.n	469a <_vfiprintf_r+0x2e>
    4696:	68b7      	ldr	r7, [r6, #8]
    4698:	e003      	b.n	46a2 <_vfiprintf_r+0x36>
    469a:	4b72      	ldr	r3, [pc, #456]	; (4864 <_vfiprintf_r+0x1f8>)
    469c:	429f      	cmp	r7, r3
    469e:	d100      	bne.n	46a2 <_vfiprintf_r+0x36>
    46a0:	68f7      	ldr	r7, [r6, #12]
    46a2:	89bb      	ldrh	r3, [r7, #12]
    46a4:	071a      	lsls	r2, r3, #28
    46a6:	d50a      	bpl.n	46be <_vfiprintf_r+0x52>
    46a8:	693b      	ldr	r3, [r7, #16]
    46aa:	2b00      	cmp	r3, #0
    46ac:	d007      	beq.n	46be <_vfiprintf_r+0x52>
    46ae:	ad06      	add	r5, sp, #24
    46b0:	2300      	movs	r3, #0
    46b2:	616b      	str	r3, [r5, #20]
    46b4:	2320      	movs	r3, #32
    46b6:	766b      	strb	r3, [r5, #25]
    46b8:	2330      	movs	r3, #48	; 0x30
    46ba:	76ab      	strb	r3, [r5, #26]
    46bc:	e03b      	b.n	4736 <_vfiprintf_r+0xca>
    46be:	1c30      	adds	r0, r6, #0
    46c0:	1c39      	adds	r1, r7, #0
    46c2:	f000 fabd 	bl	4c40 <__swsetup_r>
    46c6:	2800      	cmp	r0, #0
    46c8:	d0f1      	beq.n	46ae <_vfiprintf_r+0x42>
    46ca:	2001      	movs	r0, #1
    46cc:	4240      	negs	r0, r0
    46ce:	e0c2      	b.n	4856 <_vfiprintf_r+0x1ea>
    46d0:	9a05      	ldr	r2, [sp, #20]
    46d2:	1d11      	adds	r1, r2, #4
    46d4:	6812      	ldr	r2, [r2, #0]
    46d6:	9105      	str	r1, [sp, #20]
    46d8:	2a00      	cmp	r2, #0
    46da:	db76      	blt.n	47ca <_vfiprintf_r+0x15e>
    46dc:	9209      	str	r2, [sp, #36]	; 0x24
    46de:	3401      	adds	r4, #1
    46e0:	7823      	ldrb	r3, [r4, #0]
    46e2:	2b2e      	cmp	r3, #46	; 0x2e
    46e4:	d100      	bne.n	46e8 <_vfiprintf_r+0x7c>
    46e6:	e081      	b.n	47ec <_vfiprintf_r+0x180>
    46e8:	7821      	ldrb	r1, [r4, #0]
    46ea:	485f      	ldr	r0, [pc, #380]	; (4868 <_vfiprintf_r+0x1fc>)
    46ec:	2203      	movs	r2, #3
    46ee:	f000 fced 	bl	50cc <memchr>
    46f2:	2800      	cmp	r0, #0
    46f4:	d007      	beq.n	4706 <_vfiprintf_r+0x9a>
    46f6:	495c      	ldr	r1, [pc, #368]	; (4868 <_vfiprintf_r+0x1fc>)
    46f8:	682a      	ldr	r2, [r5, #0]
    46fa:	1a43      	subs	r3, r0, r1
    46fc:	2040      	movs	r0, #64	; 0x40
    46fe:	4098      	lsls	r0, r3
    4700:	4310      	orrs	r0, r2
    4702:	6028      	str	r0, [r5, #0]
    4704:	3401      	adds	r4, #1
    4706:	7821      	ldrb	r1, [r4, #0]
    4708:	1c63      	adds	r3, r4, #1
    470a:	4858      	ldr	r0, [pc, #352]	; (486c <_vfiprintf_r+0x200>)
    470c:	2206      	movs	r2, #6
    470e:	9303      	str	r3, [sp, #12]
    4710:	7629      	strb	r1, [r5, #24]
    4712:	f000 fcdb 	bl	50cc <memchr>
    4716:	2800      	cmp	r0, #0
    4718:	d100      	bne.n	471c <_vfiprintf_r+0xb0>
    471a:	e08a      	b.n	4832 <_vfiprintf_r+0x1c6>
    471c:	4b54      	ldr	r3, [pc, #336]	; (4870 <_vfiprintf_r+0x204>)
    471e:	2b00      	cmp	r3, #0
    4720:	d17e      	bne.n	4820 <_vfiprintf_r+0x1b4>
    4722:	9b05      	ldr	r3, [sp, #20]
    4724:	2207      	movs	r2, #7
    4726:	3307      	adds	r3, #7
    4728:	4393      	bics	r3, r2
    472a:	3308      	adds	r3, #8
    472c:	9305      	str	r3, [sp, #20]
    472e:	696a      	ldr	r2, [r5, #20]
    4730:	9904      	ldr	r1, [sp, #16]
    4732:	1853      	adds	r3, r2, r1
    4734:	616b      	str	r3, [r5, #20]
    4736:	9c03      	ldr	r4, [sp, #12]
    4738:	7823      	ldrb	r3, [r4, #0]
    473a:	2b00      	cmp	r3, #0
    473c:	d104      	bne.n	4748 <_vfiprintf_r+0xdc>
    473e:	9903      	ldr	r1, [sp, #12]
    4740:	1a61      	subs	r1, r4, r1
    4742:	9102      	str	r1, [sp, #8]
    4744:	d010      	beq.n	4768 <_vfiprintf_r+0xfc>
    4746:	e003      	b.n	4750 <_vfiprintf_r+0xe4>
    4748:	2b25      	cmp	r3, #37	; 0x25
    474a:	d0f8      	beq.n	473e <_vfiprintf_r+0xd2>
    474c:	3401      	adds	r4, #1
    474e:	e7f3      	b.n	4738 <_vfiprintf_r+0xcc>
    4750:	1c30      	adds	r0, r6, #0
    4752:	1c39      	adds	r1, r7, #0
    4754:	9a03      	ldr	r2, [sp, #12]
    4756:	9b02      	ldr	r3, [sp, #8]
    4758:	f7ff ff75 	bl	4646 <__sfputs_r>
    475c:	3001      	adds	r0, #1
    475e:	d075      	beq.n	484c <_vfiprintf_r+0x1e0>
    4760:	696a      	ldr	r2, [r5, #20]
    4762:	9902      	ldr	r1, [sp, #8]
    4764:	1853      	adds	r3, r2, r1
    4766:	616b      	str	r3, [r5, #20]
    4768:	7823      	ldrb	r3, [r4, #0]
    476a:	2b00      	cmp	r3, #0
    476c:	d06e      	beq.n	484c <_vfiprintf_r+0x1e0>
    476e:	2201      	movs	r2, #1
    4770:	4252      	negs	r2, r2
    4772:	606a      	str	r2, [r5, #4]
    4774:	466a      	mov	r2, sp
    4776:	2300      	movs	r3, #0
    4778:	325b      	adds	r2, #91	; 0x5b
    477a:	3401      	adds	r4, #1
    477c:	602b      	str	r3, [r5, #0]
    477e:	60eb      	str	r3, [r5, #12]
    4780:	60ab      	str	r3, [r5, #8]
    4782:	7013      	strb	r3, [r2, #0]
    4784:	65ab      	str	r3, [r5, #88]	; 0x58
    4786:	7821      	ldrb	r1, [r4, #0]
    4788:	483a      	ldr	r0, [pc, #232]	; (4874 <_vfiprintf_r+0x208>)
    478a:	2205      	movs	r2, #5
    478c:	f000 fc9e 	bl	50cc <memchr>
    4790:	2800      	cmp	r0, #0
    4792:	d008      	beq.n	47a6 <_vfiprintf_r+0x13a>
    4794:	4a37      	ldr	r2, [pc, #220]	; (4874 <_vfiprintf_r+0x208>)
    4796:	3401      	adds	r4, #1
    4798:	1a83      	subs	r3, r0, r2
    479a:	2001      	movs	r0, #1
    479c:	4098      	lsls	r0, r3
    479e:	682b      	ldr	r3, [r5, #0]
    47a0:	4318      	orrs	r0, r3
    47a2:	6028      	str	r0, [r5, #0]
    47a4:	e7ef      	b.n	4786 <_vfiprintf_r+0x11a>
    47a6:	682b      	ldr	r3, [r5, #0]
    47a8:	06d9      	lsls	r1, r3, #27
    47aa:	d503      	bpl.n	47b4 <_vfiprintf_r+0x148>
    47ac:	466a      	mov	r2, sp
    47ae:	2120      	movs	r1, #32
    47b0:	325b      	adds	r2, #91	; 0x5b
    47b2:	7011      	strb	r1, [r2, #0]
    47b4:	071a      	lsls	r2, r3, #28
    47b6:	d503      	bpl.n	47c0 <_vfiprintf_r+0x154>
    47b8:	466a      	mov	r2, sp
    47ba:	212b      	movs	r1, #43	; 0x2b
    47bc:	325b      	adds	r2, #91	; 0x5b
    47be:	7011      	strb	r1, [r2, #0]
    47c0:	7822      	ldrb	r2, [r4, #0]
    47c2:	2a2a      	cmp	r2, #42	; 0x2a
    47c4:	d084      	beq.n	46d0 <_vfiprintf_r+0x64>
    47c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47c8:	e005      	b.n	47d6 <_vfiprintf_r+0x16a>
    47ca:	4252      	negs	r2, r2
    47cc:	60ea      	str	r2, [r5, #12]
    47ce:	2202      	movs	r2, #2
    47d0:	4313      	orrs	r3, r2
    47d2:	602b      	str	r3, [r5, #0]
    47d4:	e783      	b.n	46de <_vfiprintf_r+0x72>
    47d6:	7822      	ldrb	r2, [r4, #0]
    47d8:	3a30      	subs	r2, #48	; 0x30
    47da:	2a09      	cmp	r2, #9
    47dc:	d804      	bhi.n	47e8 <_vfiprintf_r+0x17c>
    47de:	210a      	movs	r1, #10
    47e0:	434b      	muls	r3, r1
    47e2:	3401      	adds	r4, #1
    47e4:	189b      	adds	r3, r3, r2
    47e6:	e7f6      	b.n	47d6 <_vfiprintf_r+0x16a>
    47e8:	9309      	str	r3, [sp, #36]	; 0x24
    47ea:	e779      	b.n	46e0 <_vfiprintf_r+0x74>
    47ec:	7863      	ldrb	r3, [r4, #1]
    47ee:	2b2a      	cmp	r3, #42	; 0x2a
    47f0:	d109      	bne.n	4806 <_vfiprintf_r+0x19a>
    47f2:	9b05      	ldr	r3, [sp, #20]
    47f4:	3402      	adds	r4, #2
    47f6:	1d1a      	adds	r2, r3, #4
    47f8:	681b      	ldr	r3, [r3, #0]
    47fa:	9205      	str	r2, [sp, #20]
    47fc:	2b00      	cmp	r3, #0
    47fe:	da0d      	bge.n	481c <_vfiprintf_r+0x1b0>
    4800:	2301      	movs	r3, #1
    4802:	425b      	negs	r3, r3
    4804:	e00a      	b.n	481c <_vfiprintf_r+0x1b0>
    4806:	3401      	adds	r4, #1
    4808:	2300      	movs	r3, #0
    480a:	7822      	ldrb	r2, [r4, #0]
    480c:	3a30      	subs	r2, #48	; 0x30
    480e:	2a09      	cmp	r2, #9
    4810:	d804      	bhi.n	481c <_vfiprintf_r+0x1b0>
    4812:	210a      	movs	r1, #10
    4814:	434b      	muls	r3, r1
    4816:	3401      	adds	r4, #1
    4818:	189b      	adds	r3, r3, r2
    481a:	e7f6      	b.n	480a <_vfiprintf_r+0x19e>
    481c:	9307      	str	r3, [sp, #28]
    481e:	e763      	b.n	46e8 <_vfiprintf_r+0x7c>
    4820:	ab05      	add	r3, sp, #20
    4822:	9300      	str	r3, [sp, #0]
    4824:	1c30      	adds	r0, r6, #0
    4826:	1c29      	adds	r1, r5, #0
    4828:	1c3a      	adds	r2, r7, #0
    482a:	4b13      	ldr	r3, [pc, #76]	; (4878 <_vfiprintf_r+0x20c>)
    482c:	e000      	b.n	4830 <_vfiprintf_r+0x1c4>
    482e:	bf00      	nop
    4830:	e007      	b.n	4842 <_vfiprintf_r+0x1d6>
    4832:	ab05      	add	r3, sp, #20
    4834:	9300      	str	r3, [sp, #0]
    4836:	1c30      	adds	r0, r6, #0
    4838:	1c29      	adds	r1, r5, #0
    483a:	1c3a      	adds	r2, r7, #0
    483c:	4b0e      	ldr	r3, [pc, #56]	; (4878 <_vfiprintf_r+0x20c>)
    483e:	f000 f891 	bl	4964 <_printf_i>
    4842:	9004      	str	r0, [sp, #16]
    4844:	9904      	ldr	r1, [sp, #16]
    4846:	3101      	adds	r1, #1
    4848:	d000      	beq.n	484c <_vfiprintf_r+0x1e0>
    484a:	e770      	b.n	472e <_vfiprintf_r+0xc2>
    484c:	89bb      	ldrh	r3, [r7, #12]
    484e:	065a      	lsls	r2, r3, #25
    4850:	d500      	bpl.n	4854 <_vfiprintf_r+0x1e8>
    4852:	e73a      	b.n	46ca <_vfiprintf_r+0x5e>
    4854:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4856:	b01f      	add	sp, #124	; 0x7c
    4858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    485a:	46c0      	nop			; (mov r8, r8)
    485c:	0000551c 	.word	0x0000551c
    4860:	0000553c 	.word	0x0000553c
    4864:	0000555c 	.word	0x0000555c
    4868:	000054ee 	.word	0x000054ee
    486c:	000054f2 	.word	0x000054f2
    4870:	00000000 	.word	0x00000000
    4874:	000054e8 	.word	0x000054e8
    4878:	00004647 	.word	0x00004647

0000487c <_printf_common>:
    487c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    487e:	1c15      	adds	r5, r2, #0
    4880:	9301      	str	r3, [sp, #4]
    4882:	690a      	ldr	r2, [r1, #16]
    4884:	688b      	ldr	r3, [r1, #8]
    4886:	1c06      	adds	r6, r0, #0
    4888:	1c0c      	adds	r4, r1, #0
    488a:	4293      	cmp	r3, r2
    488c:	da00      	bge.n	4890 <_printf_common+0x14>
    488e:	1c13      	adds	r3, r2, #0
    4890:	1c22      	adds	r2, r4, #0
    4892:	602b      	str	r3, [r5, #0]
    4894:	3243      	adds	r2, #67	; 0x43
    4896:	7812      	ldrb	r2, [r2, #0]
    4898:	2a00      	cmp	r2, #0
    489a:	d001      	beq.n	48a0 <_printf_common+0x24>
    489c:	3301      	adds	r3, #1
    489e:	602b      	str	r3, [r5, #0]
    48a0:	6820      	ldr	r0, [r4, #0]
    48a2:	0680      	lsls	r0, r0, #26
    48a4:	d502      	bpl.n	48ac <_printf_common+0x30>
    48a6:	682b      	ldr	r3, [r5, #0]
    48a8:	3302      	adds	r3, #2
    48aa:	602b      	str	r3, [r5, #0]
    48ac:	6821      	ldr	r1, [r4, #0]
    48ae:	2706      	movs	r7, #6
    48b0:	400f      	ands	r7, r1
    48b2:	d01f      	beq.n	48f4 <_printf_common+0x78>
    48b4:	1c23      	adds	r3, r4, #0
    48b6:	3343      	adds	r3, #67	; 0x43
    48b8:	781b      	ldrb	r3, [r3, #0]
    48ba:	1e5a      	subs	r2, r3, #1
    48bc:	4193      	sbcs	r3, r2
    48be:	6822      	ldr	r2, [r4, #0]
    48c0:	0692      	lsls	r2, r2, #26
    48c2:	d51f      	bpl.n	4904 <_printf_common+0x88>
    48c4:	18e1      	adds	r1, r4, r3
    48c6:	3140      	adds	r1, #64	; 0x40
    48c8:	2030      	movs	r0, #48	; 0x30
    48ca:	70c8      	strb	r0, [r1, #3]
    48cc:	1c21      	adds	r1, r4, #0
    48ce:	1c5a      	adds	r2, r3, #1
    48d0:	3145      	adds	r1, #69	; 0x45
    48d2:	7809      	ldrb	r1, [r1, #0]
    48d4:	18a2      	adds	r2, r4, r2
    48d6:	3240      	adds	r2, #64	; 0x40
    48d8:	3302      	adds	r3, #2
    48da:	70d1      	strb	r1, [r2, #3]
    48dc:	e012      	b.n	4904 <_printf_common+0x88>
    48de:	1c22      	adds	r2, r4, #0
    48e0:	1c30      	adds	r0, r6, #0
    48e2:	9901      	ldr	r1, [sp, #4]
    48e4:	3219      	adds	r2, #25
    48e6:	2301      	movs	r3, #1
    48e8:	9f08      	ldr	r7, [sp, #32]
    48ea:	47b8      	blx	r7
    48ec:	3001      	adds	r0, #1
    48ee:	d011      	beq.n	4914 <_printf_common+0x98>
    48f0:	9f00      	ldr	r7, [sp, #0]
    48f2:	3701      	adds	r7, #1
    48f4:	9700      	str	r7, [sp, #0]
    48f6:	68e0      	ldr	r0, [r4, #12]
    48f8:	6829      	ldr	r1, [r5, #0]
    48fa:	9f00      	ldr	r7, [sp, #0]
    48fc:	1a43      	subs	r3, r0, r1
    48fe:	429f      	cmp	r7, r3
    4900:	dbed      	blt.n	48de <_printf_common+0x62>
    4902:	e7d7      	b.n	48b4 <_printf_common+0x38>
    4904:	1c22      	adds	r2, r4, #0
    4906:	1c30      	adds	r0, r6, #0
    4908:	9901      	ldr	r1, [sp, #4]
    490a:	3243      	adds	r2, #67	; 0x43
    490c:	9f08      	ldr	r7, [sp, #32]
    490e:	47b8      	blx	r7
    4910:	3001      	adds	r0, #1
    4912:	d102      	bne.n	491a <_printf_common+0x9e>
    4914:	2001      	movs	r0, #1
    4916:	4240      	negs	r0, r0
    4918:	e023      	b.n	4962 <_printf_common+0xe6>
    491a:	6820      	ldr	r0, [r4, #0]
    491c:	2106      	movs	r1, #6
    491e:	682b      	ldr	r3, [r5, #0]
    4920:	68e2      	ldr	r2, [r4, #12]
    4922:	4001      	ands	r1, r0
    4924:	2500      	movs	r5, #0
    4926:	2904      	cmp	r1, #4
    4928:	d103      	bne.n	4932 <_printf_common+0xb6>
    492a:	1ad5      	subs	r5, r2, r3
    492c:	43eb      	mvns	r3, r5
    492e:	17db      	asrs	r3, r3, #31
    4930:	401d      	ands	r5, r3
    4932:	68a2      	ldr	r2, [r4, #8]
    4934:	6923      	ldr	r3, [r4, #16]
    4936:	429a      	cmp	r2, r3
    4938:	dd01      	ble.n	493e <_printf_common+0xc2>
    493a:	1ad3      	subs	r3, r2, r3
    493c:	18ed      	adds	r5, r5, r3
    493e:	2700      	movs	r7, #0
    4940:	9700      	str	r7, [sp, #0]
    4942:	9f00      	ldr	r7, [sp, #0]
    4944:	42af      	cmp	r7, r5
    4946:	da0b      	bge.n	4960 <_printf_common+0xe4>
    4948:	1c22      	adds	r2, r4, #0
    494a:	1c30      	adds	r0, r6, #0
    494c:	9901      	ldr	r1, [sp, #4]
    494e:	321a      	adds	r2, #26
    4950:	2301      	movs	r3, #1
    4952:	9f08      	ldr	r7, [sp, #32]
    4954:	47b8      	blx	r7
    4956:	3001      	adds	r0, #1
    4958:	d0dc      	beq.n	4914 <_printf_common+0x98>
    495a:	9f00      	ldr	r7, [sp, #0]
    495c:	3701      	adds	r7, #1
    495e:	e7ef      	b.n	4940 <_printf_common+0xc4>
    4960:	2000      	movs	r0, #0
    4962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004964 <_printf_i>:
    4964:	b5f0      	push	{r4, r5, r6, r7, lr}
    4966:	1c0d      	adds	r5, r1, #0
    4968:	b08b      	sub	sp, #44	; 0x2c
    496a:	3543      	adds	r5, #67	; 0x43
    496c:	9206      	str	r2, [sp, #24]
    496e:	9005      	str	r0, [sp, #20]
    4970:	9307      	str	r3, [sp, #28]
    4972:	9504      	str	r5, [sp, #16]
    4974:	7e0b      	ldrb	r3, [r1, #24]
    4976:	1c0c      	adds	r4, r1, #0
    4978:	9a10      	ldr	r2, [sp, #64]	; 0x40
    497a:	2b6e      	cmp	r3, #110	; 0x6e
    497c:	d100      	bne.n	4980 <_printf_i+0x1c>
    497e:	e0a7      	b.n	4ad0 <_printf_i+0x16c>
    4980:	d811      	bhi.n	49a6 <_printf_i+0x42>
    4982:	2b63      	cmp	r3, #99	; 0x63
    4984:	d022      	beq.n	49cc <_printf_i+0x68>
    4986:	d809      	bhi.n	499c <_printf_i+0x38>
    4988:	2b00      	cmp	r3, #0
    498a:	d100      	bne.n	498e <_printf_i+0x2a>
    498c:	e0b0      	b.n	4af0 <_printf_i+0x18c>
    498e:	2b58      	cmp	r3, #88	; 0x58
    4990:	d000      	beq.n	4994 <_printf_i+0x30>
    4992:	e0c0      	b.n	4b16 <_printf_i+0x1b2>
    4994:	3145      	adds	r1, #69	; 0x45
    4996:	700b      	strb	r3, [r1, #0]
    4998:	4d7b      	ldr	r5, [pc, #492]	; (4b88 <_printf_i+0x224>)
    499a:	e04e      	b.n	4a3a <_printf_i+0xd6>
    499c:	2b64      	cmp	r3, #100	; 0x64
    499e:	d01c      	beq.n	49da <_printf_i+0x76>
    49a0:	2b69      	cmp	r3, #105	; 0x69
    49a2:	d01a      	beq.n	49da <_printf_i+0x76>
    49a4:	e0b7      	b.n	4b16 <_printf_i+0x1b2>
    49a6:	2b73      	cmp	r3, #115	; 0x73
    49a8:	d100      	bne.n	49ac <_printf_i+0x48>
    49aa:	e0a5      	b.n	4af8 <_printf_i+0x194>
    49ac:	d809      	bhi.n	49c2 <_printf_i+0x5e>
    49ae:	2b6f      	cmp	r3, #111	; 0x6f
    49b0:	d029      	beq.n	4a06 <_printf_i+0xa2>
    49b2:	2b70      	cmp	r3, #112	; 0x70
    49b4:	d000      	beq.n	49b8 <_printf_i+0x54>
    49b6:	e0ae      	b.n	4b16 <_printf_i+0x1b2>
    49b8:	680e      	ldr	r6, [r1, #0]
    49ba:	2320      	movs	r3, #32
    49bc:	4333      	orrs	r3, r6
    49be:	600b      	str	r3, [r1, #0]
    49c0:	e036      	b.n	4a30 <_printf_i+0xcc>
    49c2:	2b75      	cmp	r3, #117	; 0x75
    49c4:	d01f      	beq.n	4a06 <_printf_i+0xa2>
    49c6:	2b78      	cmp	r3, #120	; 0x78
    49c8:	d032      	beq.n	4a30 <_printf_i+0xcc>
    49ca:	e0a4      	b.n	4b16 <_printf_i+0x1b2>
    49cc:	6813      	ldr	r3, [r2, #0]
    49ce:	1c0d      	adds	r5, r1, #0
    49d0:	1d19      	adds	r1, r3, #4
    49d2:	3542      	adds	r5, #66	; 0x42
    49d4:	6011      	str	r1, [r2, #0]
    49d6:	681b      	ldr	r3, [r3, #0]
    49d8:	e09f      	b.n	4b1a <_printf_i+0x1b6>
    49da:	6821      	ldr	r1, [r4, #0]
    49dc:	6813      	ldr	r3, [r2, #0]
    49de:	060e      	lsls	r6, r1, #24
    49e0:	d503      	bpl.n	49ea <_printf_i+0x86>
    49e2:	1d19      	adds	r1, r3, #4
    49e4:	6011      	str	r1, [r2, #0]
    49e6:	681e      	ldr	r6, [r3, #0]
    49e8:	e005      	b.n	49f6 <_printf_i+0x92>
    49ea:	0648      	lsls	r0, r1, #25
    49ec:	d5f9      	bpl.n	49e2 <_printf_i+0x7e>
    49ee:	1d19      	adds	r1, r3, #4
    49f0:	6011      	str	r1, [r2, #0]
    49f2:	2100      	movs	r1, #0
    49f4:	5e5e      	ldrsh	r6, [r3, r1]
    49f6:	4b64      	ldr	r3, [pc, #400]	; (4b88 <_printf_i+0x224>)
    49f8:	2e00      	cmp	r6, #0
    49fa:	da3b      	bge.n	4a74 <_printf_i+0x110>
    49fc:	9d04      	ldr	r5, [sp, #16]
    49fe:	222d      	movs	r2, #45	; 0x2d
    4a00:	4276      	negs	r6, r6
    4a02:	702a      	strb	r2, [r5, #0]
    4a04:	e036      	b.n	4a74 <_printf_i+0x110>
    4a06:	6821      	ldr	r1, [r4, #0]
    4a08:	6813      	ldr	r3, [r2, #0]
    4a0a:	060e      	lsls	r6, r1, #24
    4a0c:	d503      	bpl.n	4a16 <_printf_i+0xb2>
    4a0e:	1d19      	adds	r1, r3, #4
    4a10:	6011      	str	r1, [r2, #0]
    4a12:	681e      	ldr	r6, [r3, #0]
    4a14:	e004      	b.n	4a20 <_printf_i+0xbc>
    4a16:	0648      	lsls	r0, r1, #25
    4a18:	d5f9      	bpl.n	4a0e <_printf_i+0xaa>
    4a1a:	1d19      	adds	r1, r3, #4
    4a1c:	881e      	ldrh	r6, [r3, #0]
    4a1e:	6011      	str	r1, [r2, #0]
    4a20:	4b59      	ldr	r3, [pc, #356]	; (4b88 <_printf_i+0x224>)
    4a22:	7e22      	ldrb	r2, [r4, #24]
    4a24:	9303      	str	r3, [sp, #12]
    4a26:	2708      	movs	r7, #8
    4a28:	2a6f      	cmp	r2, #111	; 0x6f
    4a2a:	d01e      	beq.n	4a6a <_printf_i+0x106>
    4a2c:	270a      	movs	r7, #10
    4a2e:	e01c      	b.n	4a6a <_printf_i+0x106>
    4a30:	1c23      	adds	r3, r4, #0
    4a32:	2178      	movs	r1, #120	; 0x78
    4a34:	3345      	adds	r3, #69	; 0x45
    4a36:	4d55      	ldr	r5, [pc, #340]	; (4b8c <_printf_i+0x228>)
    4a38:	7019      	strb	r1, [r3, #0]
    4a3a:	6811      	ldr	r1, [r2, #0]
    4a3c:	6823      	ldr	r3, [r4, #0]
    4a3e:	1d08      	adds	r0, r1, #4
    4a40:	9503      	str	r5, [sp, #12]
    4a42:	6010      	str	r0, [r2, #0]
    4a44:	061e      	lsls	r6, r3, #24
    4a46:	d501      	bpl.n	4a4c <_printf_i+0xe8>
    4a48:	680e      	ldr	r6, [r1, #0]
    4a4a:	e002      	b.n	4a52 <_printf_i+0xee>
    4a4c:	0658      	lsls	r0, r3, #25
    4a4e:	d5fb      	bpl.n	4a48 <_printf_i+0xe4>
    4a50:	880e      	ldrh	r6, [r1, #0]
    4a52:	07d9      	lsls	r1, r3, #31
    4a54:	d502      	bpl.n	4a5c <_printf_i+0xf8>
    4a56:	2220      	movs	r2, #32
    4a58:	4313      	orrs	r3, r2
    4a5a:	6023      	str	r3, [r4, #0]
    4a5c:	2710      	movs	r7, #16
    4a5e:	2e00      	cmp	r6, #0
    4a60:	d103      	bne.n	4a6a <_printf_i+0x106>
    4a62:	6822      	ldr	r2, [r4, #0]
    4a64:	2320      	movs	r3, #32
    4a66:	439a      	bics	r2, r3
    4a68:	6022      	str	r2, [r4, #0]
    4a6a:	1c23      	adds	r3, r4, #0
    4a6c:	2200      	movs	r2, #0
    4a6e:	3343      	adds	r3, #67	; 0x43
    4a70:	701a      	strb	r2, [r3, #0]
    4a72:	e001      	b.n	4a78 <_printf_i+0x114>
    4a74:	9303      	str	r3, [sp, #12]
    4a76:	270a      	movs	r7, #10
    4a78:	6863      	ldr	r3, [r4, #4]
    4a7a:	60a3      	str	r3, [r4, #8]
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	db03      	blt.n	4a88 <_printf_i+0x124>
    4a80:	6825      	ldr	r5, [r4, #0]
    4a82:	2204      	movs	r2, #4
    4a84:	4395      	bics	r5, r2
    4a86:	6025      	str	r5, [r4, #0]
    4a88:	2e00      	cmp	r6, #0
    4a8a:	d102      	bne.n	4a92 <_printf_i+0x12e>
    4a8c:	9d04      	ldr	r5, [sp, #16]
    4a8e:	2b00      	cmp	r3, #0
    4a90:	d00e      	beq.n	4ab0 <_printf_i+0x14c>
    4a92:	9d04      	ldr	r5, [sp, #16]
    4a94:	1c30      	adds	r0, r6, #0
    4a96:	1c39      	adds	r1, r7, #0
    4a98:	f7ff fcb0 	bl	43fc <__aeabi_uidivmod>
    4a9c:	9803      	ldr	r0, [sp, #12]
    4a9e:	3d01      	subs	r5, #1
    4aa0:	5c43      	ldrb	r3, [r0, r1]
    4aa2:	1c30      	adds	r0, r6, #0
    4aa4:	702b      	strb	r3, [r5, #0]
    4aa6:	1c39      	adds	r1, r7, #0
    4aa8:	f7ff fc64 	bl	4374 <__aeabi_uidiv>
    4aac:	1e06      	subs	r6, r0, #0
    4aae:	d1f1      	bne.n	4a94 <_printf_i+0x130>
    4ab0:	2f08      	cmp	r7, #8
    4ab2:	d109      	bne.n	4ac8 <_printf_i+0x164>
    4ab4:	6821      	ldr	r1, [r4, #0]
    4ab6:	07c9      	lsls	r1, r1, #31
    4ab8:	d506      	bpl.n	4ac8 <_printf_i+0x164>
    4aba:	6862      	ldr	r2, [r4, #4]
    4abc:	6923      	ldr	r3, [r4, #16]
    4abe:	429a      	cmp	r2, r3
    4ac0:	dc02      	bgt.n	4ac8 <_printf_i+0x164>
    4ac2:	3d01      	subs	r5, #1
    4ac4:	2330      	movs	r3, #48	; 0x30
    4ac6:	702b      	strb	r3, [r5, #0]
    4ac8:	9e04      	ldr	r6, [sp, #16]
    4aca:	1b73      	subs	r3, r6, r5
    4acc:	6123      	str	r3, [r4, #16]
    4ace:	e02a      	b.n	4b26 <_printf_i+0x1c2>
    4ad0:	6808      	ldr	r0, [r1, #0]
    4ad2:	6813      	ldr	r3, [r2, #0]
    4ad4:	6949      	ldr	r1, [r1, #20]
    4ad6:	0605      	lsls	r5, r0, #24
    4ad8:	d504      	bpl.n	4ae4 <_printf_i+0x180>
    4ada:	1d18      	adds	r0, r3, #4
    4adc:	6010      	str	r0, [r2, #0]
    4ade:	681b      	ldr	r3, [r3, #0]
    4ae0:	6019      	str	r1, [r3, #0]
    4ae2:	e005      	b.n	4af0 <_printf_i+0x18c>
    4ae4:	0646      	lsls	r6, r0, #25
    4ae6:	d5f8      	bpl.n	4ada <_printf_i+0x176>
    4ae8:	1d18      	adds	r0, r3, #4
    4aea:	6010      	str	r0, [r2, #0]
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	8019      	strh	r1, [r3, #0]
    4af0:	2300      	movs	r3, #0
    4af2:	6123      	str	r3, [r4, #16]
    4af4:	9d04      	ldr	r5, [sp, #16]
    4af6:	e016      	b.n	4b26 <_printf_i+0x1c2>
    4af8:	6813      	ldr	r3, [r2, #0]
    4afa:	1d19      	adds	r1, r3, #4
    4afc:	6011      	str	r1, [r2, #0]
    4afe:	681d      	ldr	r5, [r3, #0]
    4b00:	1c28      	adds	r0, r5, #0
    4b02:	f000 fbe9 	bl	52d8 <strlen>
    4b06:	6863      	ldr	r3, [r4, #4]
    4b08:	6120      	str	r0, [r4, #16]
    4b0a:	4298      	cmp	r0, r3
    4b0c:	d900      	bls.n	4b10 <_printf_i+0x1ac>
    4b0e:	6123      	str	r3, [r4, #16]
    4b10:	6920      	ldr	r0, [r4, #16]
    4b12:	6060      	str	r0, [r4, #4]
    4b14:	e004      	b.n	4b20 <_printf_i+0x1bc>
    4b16:	1c25      	adds	r5, r4, #0
    4b18:	3542      	adds	r5, #66	; 0x42
    4b1a:	702b      	strb	r3, [r5, #0]
    4b1c:	2301      	movs	r3, #1
    4b1e:	6123      	str	r3, [r4, #16]
    4b20:	9e04      	ldr	r6, [sp, #16]
    4b22:	2300      	movs	r3, #0
    4b24:	7033      	strb	r3, [r6, #0]
    4b26:	9e07      	ldr	r6, [sp, #28]
    4b28:	9805      	ldr	r0, [sp, #20]
    4b2a:	9600      	str	r6, [sp, #0]
    4b2c:	1c21      	adds	r1, r4, #0
    4b2e:	aa09      	add	r2, sp, #36	; 0x24
    4b30:	9b06      	ldr	r3, [sp, #24]
    4b32:	f7ff fea3 	bl	487c <_printf_common>
    4b36:	3001      	adds	r0, #1
    4b38:	d102      	bne.n	4b40 <_printf_i+0x1dc>
    4b3a:	2001      	movs	r0, #1
    4b3c:	4240      	negs	r0, r0
    4b3e:	e021      	b.n	4b84 <_printf_i+0x220>
    4b40:	1c2a      	adds	r2, r5, #0
    4b42:	9805      	ldr	r0, [sp, #20]
    4b44:	9906      	ldr	r1, [sp, #24]
    4b46:	6923      	ldr	r3, [r4, #16]
    4b48:	9d07      	ldr	r5, [sp, #28]
    4b4a:	47a8      	blx	r5
    4b4c:	3001      	adds	r0, #1
    4b4e:	d0f4      	beq.n	4b3a <_printf_i+0x1d6>
    4b50:	6826      	ldr	r6, [r4, #0]
    4b52:	07b6      	lsls	r6, r6, #30
    4b54:	d405      	bmi.n	4b62 <_printf_i+0x1fe>
    4b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b58:	68e0      	ldr	r0, [r4, #12]
    4b5a:	4298      	cmp	r0, r3
    4b5c:	da12      	bge.n	4b84 <_printf_i+0x220>
    4b5e:	1c18      	adds	r0, r3, #0
    4b60:	e010      	b.n	4b84 <_printf_i+0x220>
    4b62:	2500      	movs	r5, #0
    4b64:	68e0      	ldr	r0, [r4, #12]
    4b66:	9909      	ldr	r1, [sp, #36]	; 0x24
    4b68:	1a43      	subs	r3, r0, r1
    4b6a:	429d      	cmp	r5, r3
    4b6c:	daf3      	bge.n	4b56 <_printf_i+0x1f2>
    4b6e:	1c22      	adds	r2, r4, #0
    4b70:	9805      	ldr	r0, [sp, #20]
    4b72:	9906      	ldr	r1, [sp, #24]
    4b74:	3219      	adds	r2, #25
    4b76:	2301      	movs	r3, #1
    4b78:	9e07      	ldr	r6, [sp, #28]
    4b7a:	47b0      	blx	r6
    4b7c:	3001      	adds	r0, #1
    4b7e:	d0dc      	beq.n	4b3a <_printf_i+0x1d6>
    4b80:	3501      	adds	r5, #1
    4b82:	e7ef      	b.n	4b64 <_printf_i+0x200>
    4b84:	b00b      	add	sp, #44	; 0x2c
    4b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b88:	000054f9 	.word	0x000054f9
    4b8c:	0000550a 	.word	0x0000550a

00004b90 <__swbuf_r>:
    4b90:	b570      	push	{r4, r5, r6, lr}
    4b92:	1c05      	adds	r5, r0, #0
    4b94:	1c0e      	adds	r6, r1, #0
    4b96:	1c14      	adds	r4, r2, #0
    4b98:	2800      	cmp	r0, #0
    4b9a:	d004      	beq.n	4ba6 <__swbuf_r+0x16>
    4b9c:	6982      	ldr	r2, [r0, #24]
    4b9e:	2a00      	cmp	r2, #0
    4ba0:	d101      	bne.n	4ba6 <__swbuf_r+0x16>
    4ba2:	f000 f9c9 	bl	4f38 <__sinit>
    4ba6:	4b23      	ldr	r3, [pc, #140]	; (4c34 <__swbuf_r+0xa4>)
    4ba8:	429c      	cmp	r4, r3
    4baa:	d101      	bne.n	4bb0 <__swbuf_r+0x20>
    4bac:	686c      	ldr	r4, [r5, #4]
    4bae:	e008      	b.n	4bc2 <__swbuf_r+0x32>
    4bb0:	4b21      	ldr	r3, [pc, #132]	; (4c38 <__swbuf_r+0xa8>)
    4bb2:	429c      	cmp	r4, r3
    4bb4:	d101      	bne.n	4bba <__swbuf_r+0x2a>
    4bb6:	68ac      	ldr	r4, [r5, #8]
    4bb8:	e003      	b.n	4bc2 <__swbuf_r+0x32>
    4bba:	4b20      	ldr	r3, [pc, #128]	; (4c3c <__swbuf_r+0xac>)
    4bbc:	429c      	cmp	r4, r3
    4bbe:	d100      	bne.n	4bc2 <__swbuf_r+0x32>
    4bc0:	68ec      	ldr	r4, [r5, #12]
    4bc2:	69a3      	ldr	r3, [r4, #24]
    4bc4:	60a3      	str	r3, [r4, #8]
    4bc6:	89a3      	ldrh	r3, [r4, #12]
    4bc8:	071a      	lsls	r2, r3, #28
    4bca:	d50a      	bpl.n	4be2 <__swbuf_r+0x52>
    4bcc:	6923      	ldr	r3, [r4, #16]
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d007      	beq.n	4be2 <__swbuf_r+0x52>
    4bd2:	6822      	ldr	r2, [r4, #0]
    4bd4:	6923      	ldr	r3, [r4, #16]
    4bd6:	b2f6      	uxtb	r6, r6
    4bd8:	1ad0      	subs	r0, r2, r3
    4bda:	6962      	ldr	r2, [r4, #20]
    4bdc:	4290      	cmp	r0, r2
    4bde:	db0f      	blt.n	4c00 <__swbuf_r+0x70>
    4be0:	e008      	b.n	4bf4 <__swbuf_r+0x64>
    4be2:	1c28      	adds	r0, r5, #0
    4be4:	1c21      	adds	r1, r4, #0
    4be6:	f000 f82b 	bl	4c40 <__swsetup_r>
    4bea:	2800      	cmp	r0, #0
    4bec:	d0f1      	beq.n	4bd2 <__swbuf_r+0x42>
    4bee:	2001      	movs	r0, #1
    4bf0:	4240      	negs	r0, r0
    4bf2:	e01d      	b.n	4c30 <__swbuf_r+0xa0>
    4bf4:	1c28      	adds	r0, r5, #0
    4bf6:	1c21      	adds	r1, r4, #0
    4bf8:	f000 f91e 	bl	4e38 <_fflush_r>
    4bfc:	2800      	cmp	r0, #0
    4bfe:	d1f6      	bne.n	4bee <__swbuf_r+0x5e>
    4c00:	68a3      	ldr	r3, [r4, #8]
    4c02:	3001      	adds	r0, #1
    4c04:	3b01      	subs	r3, #1
    4c06:	60a3      	str	r3, [r4, #8]
    4c08:	6823      	ldr	r3, [r4, #0]
    4c0a:	1c5a      	adds	r2, r3, #1
    4c0c:	6022      	str	r2, [r4, #0]
    4c0e:	701e      	strb	r6, [r3, #0]
    4c10:	6963      	ldr	r3, [r4, #20]
    4c12:	4298      	cmp	r0, r3
    4c14:	d005      	beq.n	4c22 <__swbuf_r+0x92>
    4c16:	89a3      	ldrh	r3, [r4, #12]
    4c18:	1c30      	adds	r0, r6, #0
    4c1a:	07da      	lsls	r2, r3, #31
    4c1c:	d508      	bpl.n	4c30 <__swbuf_r+0xa0>
    4c1e:	2e0a      	cmp	r6, #10
    4c20:	d106      	bne.n	4c30 <__swbuf_r+0xa0>
    4c22:	1c28      	adds	r0, r5, #0
    4c24:	1c21      	adds	r1, r4, #0
    4c26:	f000 f907 	bl	4e38 <_fflush_r>
    4c2a:	2800      	cmp	r0, #0
    4c2c:	d1df      	bne.n	4bee <__swbuf_r+0x5e>
    4c2e:	1c30      	adds	r0, r6, #0
    4c30:	bd70      	pop	{r4, r5, r6, pc}
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	0000551c 	.word	0x0000551c
    4c38:	0000553c 	.word	0x0000553c
    4c3c:	0000555c 	.word	0x0000555c

00004c40 <__swsetup_r>:
    4c40:	4b34      	ldr	r3, [pc, #208]	; (4d14 <__swsetup_r+0xd4>)
    4c42:	b570      	push	{r4, r5, r6, lr}
    4c44:	681d      	ldr	r5, [r3, #0]
    4c46:	1c06      	adds	r6, r0, #0
    4c48:	1c0c      	adds	r4, r1, #0
    4c4a:	2d00      	cmp	r5, #0
    4c4c:	d005      	beq.n	4c5a <__swsetup_r+0x1a>
    4c4e:	69a9      	ldr	r1, [r5, #24]
    4c50:	2900      	cmp	r1, #0
    4c52:	d102      	bne.n	4c5a <__swsetup_r+0x1a>
    4c54:	1c28      	adds	r0, r5, #0
    4c56:	f000 f96f 	bl	4f38 <__sinit>
    4c5a:	4b2f      	ldr	r3, [pc, #188]	; (4d18 <__swsetup_r+0xd8>)
    4c5c:	429c      	cmp	r4, r3
    4c5e:	d101      	bne.n	4c64 <__swsetup_r+0x24>
    4c60:	686c      	ldr	r4, [r5, #4]
    4c62:	e008      	b.n	4c76 <__swsetup_r+0x36>
    4c64:	4b2d      	ldr	r3, [pc, #180]	; (4d1c <__swsetup_r+0xdc>)
    4c66:	429c      	cmp	r4, r3
    4c68:	d101      	bne.n	4c6e <__swsetup_r+0x2e>
    4c6a:	68ac      	ldr	r4, [r5, #8]
    4c6c:	e003      	b.n	4c76 <__swsetup_r+0x36>
    4c6e:	4b2c      	ldr	r3, [pc, #176]	; (4d20 <__swsetup_r+0xe0>)
    4c70:	429c      	cmp	r4, r3
    4c72:	d100      	bne.n	4c76 <__swsetup_r+0x36>
    4c74:	68ec      	ldr	r4, [r5, #12]
    4c76:	89a2      	ldrh	r2, [r4, #12]
    4c78:	b293      	uxth	r3, r2
    4c7a:	0719      	lsls	r1, r3, #28
    4c7c:	d421      	bmi.n	4cc2 <__swsetup_r+0x82>
    4c7e:	06d9      	lsls	r1, r3, #27
    4c80:	d405      	bmi.n	4c8e <__swsetup_r+0x4e>
    4c82:	2309      	movs	r3, #9
    4c84:	6033      	str	r3, [r6, #0]
    4c86:	2340      	movs	r3, #64	; 0x40
    4c88:	431a      	orrs	r2, r3
    4c8a:	81a2      	strh	r2, [r4, #12]
    4c8c:	e03f      	b.n	4d0e <__swsetup_r+0xce>
    4c8e:	075a      	lsls	r2, r3, #29
    4c90:	d513      	bpl.n	4cba <__swsetup_r+0x7a>
    4c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4c94:	2900      	cmp	r1, #0
    4c96:	d008      	beq.n	4caa <__swsetup_r+0x6a>
    4c98:	1c23      	adds	r3, r4, #0
    4c9a:	3344      	adds	r3, #68	; 0x44
    4c9c:	4299      	cmp	r1, r3
    4c9e:	d002      	beq.n	4ca6 <__swsetup_r+0x66>
    4ca0:	1c30      	adds	r0, r6, #0
    4ca2:	f000 fa1f 	bl	50e4 <_free_r>
    4ca6:	2300      	movs	r3, #0
    4ca8:	6363      	str	r3, [r4, #52]	; 0x34
    4caa:	89a3      	ldrh	r3, [r4, #12]
    4cac:	2224      	movs	r2, #36	; 0x24
    4cae:	4393      	bics	r3, r2
    4cb0:	81a3      	strh	r3, [r4, #12]
    4cb2:	2300      	movs	r3, #0
    4cb4:	6063      	str	r3, [r4, #4]
    4cb6:	6923      	ldr	r3, [r4, #16]
    4cb8:	6023      	str	r3, [r4, #0]
    4cba:	89a3      	ldrh	r3, [r4, #12]
    4cbc:	2208      	movs	r2, #8
    4cbe:	4313      	orrs	r3, r2
    4cc0:	81a3      	strh	r3, [r4, #12]
    4cc2:	6921      	ldr	r1, [r4, #16]
    4cc4:	2900      	cmp	r1, #0
    4cc6:	d10b      	bne.n	4ce0 <__swsetup_r+0xa0>
    4cc8:	89a3      	ldrh	r3, [r4, #12]
    4cca:	22a0      	movs	r2, #160	; 0xa0
    4ccc:	0092      	lsls	r2, r2, #2
    4cce:	401a      	ands	r2, r3
    4cd0:	2380      	movs	r3, #128	; 0x80
    4cd2:	009b      	lsls	r3, r3, #2
    4cd4:	429a      	cmp	r2, r3
    4cd6:	d003      	beq.n	4ce0 <__swsetup_r+0xa0>
    4cd8:	1c30      	adds	r0, r6, #0
    4cda:	1c21      	adds	r1, r4, #0
    4cdc:	f000 f99c 	bl	5018 <__smakebuf_r>
    4ce0:	89a3      	ldrh	r3, [r4, #12]
    4ce2:	2201      	movs	r2, #1
    4ce4:	401a      	ands	r2, r3
    4ce6:	d005      	beq.n	4cf4 <__swsetup_r+0xb4>
    4ce8:	6961      	ldr	r1, [r4, #20]
    4cea:	2200      	movs	r2, #0
    4cec:	60a2      	str	r2, [r4, #8]
    4cee:	424a      	negs	r2, r1
    4cf0:	61a2      	str	r2, [r4, #24]
    4cf2:	e003      	b.n	4cfc <__swsetup_r+0xbc>
    4cf4:	0799      	lsls	r1, r3, #30
    4cf6:	d400      	bmi.n	4cfa <__swsetup_r+0xba>
    4cf8:	6962      	ldr	r2, [r4, #20]
    4cfa:	60a2      	str	r2, [r4, #8]
    4cfc:	6922      	ldr	r2, [r4, #16]
    4cfe:	2000      	movs	r0, #0
    4d00:	4282      	cmp	r2, r0
    4d02:	d106      	bne.n	4d12 <__swsetup_r+0xd2>
    4d04:	0619      	lsls	r1, r3, #24
    4d06:	d504      	bpl.n	4d12 <__swsetup_r+0xd2>
    4d08:	2240      	movs	r2, #64	; 0x40
    4d0a:	4313      	orrs	r3, r2
    4d0c:	81a3      	strh	r3, [r4, #12]
    4d0e:	2001      	movs	r0, #1
    4d10:	4240      	negs	r0, r0
    4d12:	bd70      	pop	{r4, r5, r6, pc}
    4d14:	20000090 	.word	0x20000090
    4d18:	0000551c 	.word	0x0000551c
    4d1c:	0000553c 	.word	0x0000553c
    4d20:	0000555c 	.word	0x0000555c

00004d24 <__sflush_r>:
    4d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d26:	898b      	ldrh	r3, [r1, #12]
    4d28:	1c05      	adds	r5, r0, #0
    4d2a:	1c0c      	adds	r4, r1, #0
    4d2c:	0719      	lsls	r1, r3, #28
    4d2e:	d45e      	bmi.n	4dee <__sflush_r+0xca>
    4d30:	6862      	ldr	r2, [r4, #4]
    4d32:	2a00      	cmp	r2, #0
    4d34:	dc02      	bgt.n	4d3c <__sflush_r+0x18>
    4d36:	6c27      	ldr	r7, [r4, #64]	; 0x40
    4d38:	2f00      	cmp	r7, #0
    4d3a:	dd1a      	ble.n	4d72 <__sflush_r+0x4e>
    4d3c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4d3e:	2f00      	cmp	r7, #0
    4d40:	d017      	beq.n	4d72 <__sflush_r+0x4e>
    4d42:	2200      	movs	r2, #0
    4d44:	682e      	ldr	r6, [r5, #0]
    4d46:	602a      	str	r2, [r5, #0]
    4d48:	2280      	movs	r2, #128	; 0x80
    4d4a:	0152      	lsls	r2, r2, #5
    4d4c:	401a      	ands	r2, r3
    4d4e:	d001      	beq.n	4d54 <__sflush_r+0x30>
    4d50:	6d62      	ldr	r2, [r4, #84]	; 0x54
    4d52:	e015      	b.n	4d80 <__sflush_r+0x5c>
    4d54:	1c28      	adds	r0, r5, #0
    4d56:	6a21      	ldr	r1, [r4, #32]
    4d58:	2301      	movs	r3, #1
    4d5a:	47b8      	blx	r7
    4d5c:	1c02      	adds	r2, r0, #0
    4d5e:	1c41      	adds	r1, r0, #1
    4d60:	d10e      	bne.n	4d80 <__sflush_r+0x5c>
    4d62:	682b      	ldr	r3, [r5, #0]
    4d64:	2b00      	cmp	r3, #0
    4d66:	d00b      	beq.n	4d80 <__sflush_r+0x5c>
    4d68:	2b1d      	cmp	r3, #29
    4d6a:	d001      	beq.n	4d70 <__sflush_r+0x4c>
    4d6c:	2b16      	cmp	r3, #22
    4d6e:	d102      	bne.n	4d76 <__sflush_r+0x52>
    4d70:	602e      	str	r6, [r5, #0]
    4d72:	2000      	movs	r0, #0
    4d74:	e05e      	b.n	4e34 <__sflush_r+0x110>
    4d76:	89a3      	ldrh	r3, [r4, #12]
    4d78:	2140      	movs	r1, #64	; 0x40
    4d7a:	430b      	orrs	r3, r1
    4d7c:	81a3      	strh	r3, [r4, #12]
    4d7e:	e059      	b.n	4e34 <__sflush_r+0x110>
    4d80:	89a3      	ldrh	r3, [r4, #12]
    4d82:	075f      	lsls	r7, r3, #29
    4d84:	d506      	bpl.n	4d94 <__sflush_r+0x70>
    4d86:	6861      	ldr	r1, [r4, #4]
    4d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4d8a:	1a52      	subs	r2, r2, r1
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d001      	beq.n	4d94 <__sflush_r+0x70>
    4d90:	6c27      	ldr	r7, [r4, #64]	; 0x40
    4d92:	1bd2      	subs	r2, r2, r7
    4d94:	1c28      	adds	r0, r5, #0
    4d96:	6a21      	ldr	r1, [r4, #32]
    4d98:	2300      	movs	r3, #0
    4d9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4d9c:	47b8      	blx	r7
    4d9e:	89a2      	ldrh	r2, [r4, #12]
    4da0:	1c41      	adds	r1, r0, #1
    4da2:	d106      	bne.n	4db2 <__sflush_r+0x8e>
    4da4:	682b      	ldr	r3, [r5, #0]
    4da6:	2b00      	cmp	r3, #0
    4da8:	d003      	beq.n	4db2 <__sflush_r+0x8e>
    4daa:	2b1d      	cmp	r3, #29
    4dac:	d001      	beq.n	4db2 <__sflush_r+0x8e>
    4dae:	2b16      	cmp	r3, #22
    4db0:	d119      	bne.n	4de6 <__sflush_r+0xc2>
    4db2:	2300      	movs	r3, #0
    4db4:	6063      	str	r3, [r4, #4]
    4db6:	6923      	ldr	r3, [r4, #16]
    4db8:	6023      	str	r3, [r4, #0]
    4dba:	04d7      	lsls	r7, r2, #19
    4dbc:	d505      	bpl.n	4dca <__sflush_r+0xa6>
    4dbe:	1c41      	adds	r1, r0, #1
    4dc0:	d102      	bne.n	4dc8 <__sflush_r+0xa4>
    4dc2:	682a      	ldr	r2, [r5, #0]
    4dc4:	2a00      	cmp	r2, #0
    4dc6:	d100      	bne.n	4dca <__sflush_r+0xa6>
    4dc8:	6560      	str	r0, [r4, #84]	; 0x54
    4dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4dcc:	602e      	str	r6, [r5, #0]
    4dce:	2900      	cmp	r1, #0
    4dd0:	d0cf      	beq.n	4d72 <__sflush_r+0x4e>
    4dd2:	1c23      	adds	r3, r4, #0
    4dd4:	3344      	adds	r3, #68	; 0x44
    4dd6:	4299      	cmp	r1, r3
    4dd8:	d002      	beq.n	4de0 <__sflush_r+0xbc>
    4dda:	1c28      	adds	r0, r5, #0
    4ddc:	f000 f982 	bl	50e4 <_free_r>
    4de0:	2000      	movs	r0, #0
    4de2:	6360      	str	r0, [r4, #52]	; 0x34
    4de4:	e026      	b.n	4e34 <__sflush_r+0x110>
    4de6:	2340      	movs	r3, #64	; 0x40
    4de8:	431a      	orrs	r2, r3
    4dea:	81a2      	strh	r2, [r4, #12]
    4dec:	e022      	b.n	4e34 <__sflush_r+0x110>
    4dee:	6926      	ldr	r6, [r4, #16]
    4df0:	2e00      	cmp	r6, #0
    4df2:	d0be      	beq.n	4d72 <__sflush_r+0x4e>
    4df4:	6827      	ldr	r7, [r4, #0]
    4df6:	2200      	movs	r2, #0
    4df8:	1bbf      	subs	r7, r7, r6
    4dfa:	9701      	str	r7, [sp, #4]
    4dfc:	6026      	str	r6, [r4, #0]
    4dfe:	0799      	lsls	r1, r3, #30
    4e00:	d100      	bne.n	4e04 <__sflush_r+0xe0>
    4e02:	6962      	ldr	r2, [r4, #20]
    4e04:	60a2      	str	r2, [r4, #8]
    4e06:	9f01      	ldr	r7, [sp, #4]
    4e08:	2f00      	cmp	r7, #0
    4e0a:	ddb2      	ble.n	4d72 <__sflush_r+0x4e>
    4e0c:	1c28      	adds	r0, r5, #0
    4e0e:	6a21      	ldr	r1, [r4, #32]
    4e10:	1c32      	adds	r2, r6, #0
    4e12:	9b01      	ldr	r3, [sp, #4]
    4e14:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4e16:	47b8      	blx	r7
    4e18:	2800      	cmp	r0, #0
    4e1a:	dc06      	bgt.n	4e2a <__sflush_r+0x106>
    4e1c:	89a3      	ldrh	r3, [r4, #12]
    4e1e:	2240      	movs	r2, #64	; 0x40
    4e20:	4313      	orrs	r3, r2
    4e22:	2001      	movs	r0, #1
    4e24:	81a3      	strh	r3, [r4, #12]
    4e26:	4240      	negs	r0, r0
    4e28:	e004      	b.n	4e34 <__sflush_r+0x110>
    4e2a:	9f01      	ldr	r7, [sp, #4]
    4e2c:	1836      	adds	r6, r6, r0
    4e2e:	1a3f      	subs	r7, r7, r0
    4e30:	9701      	str	r7, [sp, #4]
    4e32:	e7e8      	b.n	4e06 <__sflush_r+0xe2>
    4e34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00004e38 <_fflush_r>:
    4e38:	690a      	ldr	r2, [r1, #16]
    4e3a:	b538      	push	{r3, r4, r5, lr}
    4e3c:	1c05      	adds	r5, r0, #0
    4e3e:	1c0c      	adds	r4, r1, #0
    4e40:	2a00      	cmp	r2, #0
    4e42:	d101      	bne.n	4e48 <_fflush_r+0x10>
    4e44:	2000      	movs	r0, #0
    4e46:	e01c      	b.n	4e82 <_fflush_r+0x4a>
    4e48:	2800      	cmp	r0, #0
    4e4a:	d004      	beq.n	4e56 <_fflush_r+0x1e>
    4e4c:	6983      	ldr	r3, [r0, #24]
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d101      	bne.n	4e56 <_fflush_r+0x1e>
    4e52:	f000 f871 	bl	4f38 <__sinit>
    4e56:	4b0b      	ldr	r3, [pc, #44]	; (4e84 <_fflush_r+0x4c>)
    4e58:	429c      	cmp	r4, r3
    4e5a:	d101      	bne.n	4e60 <_fflush_r+0x28>
    4e5c:	686c      	ldr	r4, [r5, #4]
    4e5e:	e008      	b.n	4e72 <_fflush_r+0x3a>
    4e60:	4b09      	ldr	r3, [pc, #36]	; (4e88 <_fflush_r+0x50>)
    4e62:	429c      	cmp	r4, r3
    4e64:	d101      	bne.n	4e6a <_fflush_r+0x32>
    4e66:	68ac      	ldr	r4, [r5, #8]
    4e68:	e003      	b.n	4e72 <_fflush_r+0x3a>
    4e6a:	4b08      	ldr	r3, [pc, #32]	; (4e8c <_fflush_r+0x54>)
    4e6c:	429c      	cmp	r4, r3
    4e6e:	d100      	bne.n	4e72 <_fflush_r+0x3a>
    4e70:	68ec      	ldr	r4, [r5, #12]
    4e72:	220c      	movs	r2, #12
    4e74:	5ea3      	ldrsh	r3, [r4, r2]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d0e4      	beq.n	4e44 <_fflush_r+0xc>
    4e7a:	1c28      	adds	r0, r5, #0
    4e7c:	1c21      	adds	r1, r4, #0
    4e7e:	f7ff ff51 	bl	4d24 <__sflush_r>
    4e82:	bd38      	pop	{r3, r4, r5, pc}
    4e84:	0000551c 	.word	0x0000551c
    4e88:	0000553c 	.word	0x0000553c
    4e8c:	0000555c 	.word	0x0000555c

00004e90 <_cleanup_r>:
    4e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e92:	1c04      	adds	r4, r0, #0
    4e94:	1c07      	adds	r7, r0, #0
    4e96:	3448      	adds	r4, #72	; 0x48
    4e98:	2c00      	cmp	r4, #0
    4e9a:	d012      	beq.n	4ec2 <_cleanup_r+0x32>
    4e9c:	68a5      	ldr	r5, [r4, #8]
    4e9e:	6866      	ldr	r6, [r4, #4]
    4ea0:	3e01      	subs	r6, #1
    4ea2:	d40c      	bmi.n	4ebe <_cleanup_r+0x2e>
    4ea4:	89ab      	ldrh	r3, [r5, #12]
    4ea6:	2b01      	cmp	r3, #1
    4ea8:	d907      	bls.n	4eba <_cleanup_r+0x2a>
    4eaa:	220e      	movs	r2, #14
    4eac:	5eab      	ldrsh	r3, [r5, r2]
    4eae:	3301      	adds	r3, #1
    4eb0:	d003      	beq.n	4eba <_cleanup_r+0x2a>
    4eb2:	1c38      	adds	r0, r7, #0
    4eb4:	1c29      	adds	r1, r5, #0
    4eb6:	f7ff ffbf 	bl	4e38 <_fflush_r>
    4eba:	3568      	adds	r5, #104	; 0x68
    4ebc:	e7f0      	b.n	4ea0 <_cleanup_r+0x10>
    4ebe:	6824      	ldr	r4, [r4, #0]
    4ec0:	e7ea      	b.n	4e98 <_cleanup_r+0x8>
    4ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004ec4 <std.isra.0>:
    4ec4:	2300      	movs	r3, #0
    4ec6:	b510      	push	{r4, lr}
    4ec8:	1c04      	adds	r4, r0, #0
    4eca:	6003      	str	r3, [r0, #0]
    4ecc:	6043      	str	r3, [r0, #4]
    4ece:	6083      	str	r3, [r0, #8]
    4ed0:	8181      	strh	r1, [r0, #12]
    4ed2:	6643      	str	r3, [r0, #100]	; 0x64
    4ed4:	81c2      	strh	r2, [r0, #14]
    4ed6:	6103      	str	r3, [r0, #16]
    4ed8:	6143      	str	r3, [r0, #20]
    4eda:	6183      	str	r3, [r0, #24]
    4edc:	1c19      	adds	r1, r3, #0
    4ede:	2208      	movs	r2, #8
    4ee0:	305c      	adds	r0, #92	; 0x5c
    4ee2:	f7ff fae8 	bl	44b6 <memset>
    4ee6:	4b05      	ldr	r3, [pc, #20]	; (4efc <std.isra.0+0x38>)
    4ee8:	6224      	str	r4, [r4, #32]
    4eea:	6263      	str	r3, [r4, #36]	; 0x24
    4eec:	4b04      	ldr	r3, [pc, #16]	; (4f00 <std.isra.0+0x3c>)
    4eee:	62a3      	str	r3, [r4, #40]	; 0x28
    4ef0:	4b04      	ldr	r3, [pc, #16]	; (4f04 <std.isra.0+0x40>)
    4ef2:	62e3      	str	r3, [r4, #44]	; 0x2c
    4ef4:	4b04      	ldr	r3, [pc, #16]	; (4f08 <std.isra.0+0x44>)
    4ef6:	6323      	str	r3, [r4, #48]	; 0x30
    4ef8:	bd10      	pop	{r4, pc}
    4efa:	46c0      	nop			; (mov r8, r8)
    4efc:	00005241 	.word	0x00005241
    4f00:	00005269 	.word	0x00005269
    4f04:	000052a1 	.word	0x000052a1
    4f08:	000052cd 	.word	0x000052cd

00004f0c <__sfmoreglue>:
    4f0c:	b570      	push	{r4, r5, r6, lr}
    4f0e:	1e4b      	subs	r3, r1, #1
    4f10:	2568      	movs	r5, #104	; 0x68
    4f12:	435d      	muls	r5, r3
    4f14:	1c0e      	adds	r6, r1, #0
    4f16:	1c29      	adds	r1, r5, #0
    4f18:	3174      	adds	r1, #116	; 0x74
    4f1a:	f000 f92b 	bl	5174 <_malloc_r>
    4f1e:	1e04      	subs	r4, r0, #0
    4f20:	d008      	beq.n	4f34 <__sfmoreglue+0x28>
    4f22:	2100      	movs	r1, #0
    4f24:	6001      	str	r1, [r0, #0]
    4f26:	6046      	str	r6, [r0, #4]
    4f28:	1c2a      	adds	r2, r5, #0
    4f2a:	300c      	adds	r0, #12
    4f2c:	60a0      	str	r0, [r4, #8]
    4f2e:	3268      	adds	r2, #104	; 0x68
    4f30:	f7ff fac1 	bl	44b6 <memset>
    4f34:	1c20      	adds	r0, r4, #0
    4f36:	bd70      	pop	{r4, r5, r6, pc}

00004f38 <__sinit>:
    4f38:	6983      	ldr	r3, [r0, #24]
    4f3a:	b513      	push	{r0, r1, r4, lr}
    4f3c:	1c04      	adds	r4, r0, #0
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d127      	bne.n	4f92 <__sinit+0x5a>
    4f42:	6483      	str	r3, [r0, #72]	; 0x48
    4f44:	64c3      	str	r3, [r0, #76]	; 0x4c
    4f46:	6503      	str	r3, [r0, #80]	; 0x50
    4f48:	4b12      	ldr	r3, [pc, #72]	; (4f94 <__sinit+0x5c>)
    4f4a:	4a13      	ldr	r2, [pc, #76]	; (4f98 <__sinit+0x60>)
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	6282      	str	r2, [r0, #40]	; 0x28
    4f50:	4298      	cmp	r0, r3
    4f52:	d101      	bne.n	4f58 <__sinit+0x20>
    4f54:	2301      	movs	r3, #1
    4f56:	6183      	str	r3, [r0, #24]
    4f58:	1c20      	adds	r0, r4, #0
    4f5a:	f000 f81f 	bl	4f9c <__sfp>
    4f5e:	6060      	str	r0, [r4, #4]
    4f60:	1c20      	adds	r0, r4, #0
    4f62:	f000 f81b 	bl	4f9c <__sfp>
    4f66:	60a0      	str	r0, [r4, #8]
    4f68:	1c20      	adds	r0, r4, #0
    4f6a:	f000 f817 	bl	4f9c <__sfp>
    4f6e:	2104      	movs	r1, #4
    4f70:	60e0      	str	r0, [r4, #12]
    4f72:	2200      	movs	r2, #0
    4f74:	6860      	ldr	r0, [r4, #4]
    4f76:	f7ff ffa5 	bl	4ec4 <std.isra.0>
    4f7a:	68a0      	ldr	r0, [r4, #8]
    4f7c:	2109      	movs	r1, #9
    4f7e:	2201      	movs	r2, #1
    4f80:	f7ff ffa0 	bl	4ec4 <std.isra.0>
    4f84:	68e0      	ldr	r0, [r4, #12]
    4f86:	2112      	movs	r1, #18
    4f88:	2202      	movs	r2, #2
    4f8a:	f7ff ff9b 	bl	4ec4 <std.isra.0>
    4f8e:	2301      	movs	r3, #1
    4f90:	61a3      	str	r3, [r4, #24]
    4f92:	bd13      	pop	{r0, r1, r4, pc}
    4f94:	000054e4 	.word	0x000054e4
    4f98:	00004e91 	.word	0x00004e91

00004f9c <__sfp>:
    4f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f9e:	4b1d      	ldr	r3, [pc, #116]	; (5014 <__sfp+0x78>)
    4fa0:	1c07      	adds	r7, r0, #0
    4fa2:	681e      	ldr	r6, [r3, #0]
    4fa4:	69b2      	ldr	r2, [r6, #24]
    4fa6:	2a00      	cmp	r2, #0
    4fa8:	d102      	bne.n	4fb0 <__sfp+0x14>
    4faa:	1c30      	adds	r0, r6, #0
    4fac:	f7ff ffc4 	bl	4f38 <__sinit>
    4fb0:	3648      	adds	r6, #72	; 0x48
    4fb2:	68b4      	ldr	r4, [r6, #8]
    4fb4:	6873      	ldr	r3, [r6, #4]
    4fb6:	3b01      	subs	r3, #1
    4fb8:	d405      	bmi.n	4fc6 <__sfp+0x2a>
    4fba:	220c      	movs	r2, #12
    4fbc:	5ea5      	ldrsh	r5, [r4, r2]
    4fbe:	2d00      	cmp	r5, #0
    4fc0:	d010      	beq.n	4fe4 <__sfp+0x48>
    4fc2:	3468      	adds	r4, #104	; 0x68
    4fc4:	e7f7      	b.n	4fb6 <__sfp+0x1a>
    4fc6:	6833      	ldr	r3, [r6, #0]
    4fc8:	2b00      	cmp	r3, #0
    4fca:	d106      	bne.n	4fda <__sfp+0x3e>
    4fcc:	1c38      	adds	r0, r7, #0
    4fce:	2104      	movs	r1, #4
    4fd0:	f7ff ff9c 	bl	4f0c <__sfmoreglue>
    4fd4:	6030      	str	r0, [r6, #0]
    4fd6:	2800      	cmp	r0, #0
    4fd8:	d001      	beq.n	4fde <__sfp+0x42>
    4fda:	6836      	ldr	r6, [r6, #0]
    4fdc:	e7e9      	b.n	4fb2 <__sfp+0x16>
    4fde:	230c      	movs	r3, #12
    4fe0:	603b      	str	r3, [r7, #0]
    4fe2:	e016      	b.n	5012 <__sfp+0x76>
    4fe4:	2301      	movs	r3, #1
    4fe6:	425b      	negs	r3, r3
    4fe8:	81e3      	strh	r3, [r4, #14]
    4fea:	1c20      	adds	r0, r4, #0
    4fec:	2301      	movs	r3, #1
    4fee:	81a3      	strh	r3, [r4, #12]
    4ff0:	6665      	str	r5, [r4, #100]	; 0x64
    4ff2:	6025      	str	r5, [r4, #0]
    4ff4:	60a5      	str	r5, [r4, #8]
    4ff6:	6065      	str	r5, [r4, #4]
    4ff8:	6125      	str	r5, [r4, #16]
    4ffa:	6165      	str	r5, [r4, #20]
    4ffc:	61a5      	str	r5, [r4, #24]
    4ffe:	305c      	adds	r0, #92	; 0x5c
    5000:	1c29      	adds	r1, r5, #0
    5002:	2208      	movs	r2, #8
    5004:	f7ff fa57 	bl	44b6 <memset>
    5008:	6365      	str	r5, [r4, #52]	; 0x34
    500a:	63a5      	str	r5, [r4, #56]	; 0x38
    500c:	64a5      	str	r5, [r4, #72]	; 0x48
    500e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5010:	1c20      	adds	r0, r4, #0
    5012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5014:	000054e4 	.word	0x000054e4

00005018 <__smakebuf_r>:
    5018:	b5f0      	push	{r4, r5, r6, r7, lr}
    501a:	898b      	ldrh	r3, [r1, #12]
    501c:	b091      	sub	sp, #68	; 0x44
    501e:	1c05      	adds	r5, r0, #0
    5020:	1c0c      	adds	r4, r1, #0
    5022:	079a      	lsls	r2, r3, #30
    5024:	d425      	bmi.n	5072 <__smakebuf_r+0x5a>
    5026:	230e      	movs	r3, #14
    5028:	5ec9      	ldrsh	r1, [r1, r3]
    502a:	2900      	cmp	r1, #0
    502c:	da06      	bge.n	503c <__smakebuf_r+0x24>
    502e:	89a7      	ldrh	r7, [r4, #12]
    5030:	2380      	movs	r3, #128	; 0x80
    5032:	401f      	ands	r7, r3
    5034:	d00f      	beq.n	5056 <__smakebuf_r+0x3e>
    5036:	2700      	movs	r7, #0
    5038:	2640      	movs	r6, #64	; 0x40
    503a:	e00e      	b.n	505a <__smakebuf_r+0x42>
    503c:	aa01      	add	r2, sp, #4
    503e:	f000 f979 	bl	5334 <_fstat_r>
    5042:	2800      	cmp	r0, #0
    5044:	dbf3      	blt.n	502e <__smakebuf_r+0x16>
    5046:	9b02      	ldr	r3, [sp, #8]
    5048:	27f0      	movs	r7, #240	; 0xf0
    504a:	023f      	lsls	r7, r7, #8
    504c:	4a18      	ldr	r2, [pc, #96]	; (50b0 <__smakebuf_r+0x98>)
    504e:	401f      	ands	r7, r3
    5050:	18bf      	adds	r7, r7, r2
    5052:	427b      	negs	r3, r7
    5054:	415f      	adcs	r7, r3
    5056:	2680      	movs	r6, #128	; 0x80
    5058:	00f6      	lsls	r6, r6, #3
    505a:	1c28      	adds	r0, r5, #0
    505c:	1c31      	adds	r1, r6, #0
    505e:	f000 f889 	bl	5174 <_malloc_r>
    5062:	2800      	cmp	r0, #0
    5064:	d10c      	bne.n	5080 <__smakebuf_r+0x68>
    5066:	89a3      	ldrh	r3, [r4, #12]
    5068:	059a      	lsls	r2, r3, #22
    506a:	d41f      	bmi.n	50ac <__smakebuf_r+0x94>
    506c:	2202      	movs	r2, #2
    506e:	4313      	orrs	r3, r2
    5070:	81a3      	strh	r3, [r4, #12]
    5072:	1c23      	adds	r3, r4, #0
    5074:	3347      	adds	r3, #71	; 0x47
    5076:	6023      	str	r3, [r4, #0]
    5078:	6123      	str	r3, [r4, #16]
    507a:	2301      	movs	r3, #1
    507c:	6163      	str	r3, [r4, #20]
    507e:	e015      	b.n	50ac <__smakebuf_r+0x94>
    5080:	4b0c      	ldr	r3, [pc, #48]	; (50b4 <__smakebuf_r+0x9c>)
    5082:	2280      	movs	r2, #128	; 0x80
    5084:	62ab      	str	r3, [r5, #40]	; 0x28
    5086:	89a3      	ldrh	r3, [r4, #12]
    5088:	6020      	str	r0, [r4, #0]
    508a:	4313      	orrs	r3, r2
    508c:	81a3      	strh	r3, [r4, #12]
    508e:	6120      	str	r0, [r4, #16]
    5090:	6166      	str	r6, [r4, #20]
    5092:	2f00      	cmp	r7, #0
    5094:	d00a      	beq.n	50ac <__smakebuf_r+0x94>
    5096:	230e      	movs	r3, #14
    5098:	5ee1      	ldrsh	r1, [r4, r3]
    509a:	1c28      	adds	r0, r5, #0
    509c:	f000 f95c 	bl	5358 <_isatty_r>
    50a0:	2800      	cmp	r0, #0
    50a2:	d003      	beq.n	50ac <__smakebuf_r+0x94>
    50a4:	89a3      	ldrh	r3, [r4, #12]
    50a6:	2201      	movs	r2, #1
    50a8:	4313      	orrs	r3, r2
    50aa:	81a3      	strh	r3, [r4, #12]
    50ac:	b011      	add	sp, #68	; 0x44
    50ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50b0:	ffffe000 	.word	0xffffe000
    50b4:	00004e91 	.word	0x00004e91

000050b8 <malloc>:
    50b8:	b508      	push	{r3, lr}
    50ba:	4b03      	ldr	r3, [pc, #12]	; (50c8 <malloc+0x10>)
    50bc:	1c01      	adds	r1, r0, #0
    50be:	6818      	ldr	r0, [r3, #0]
    50c0:	f000 f858 	bl	5174 <_malloc_r>
    50c4:	bd08      	pop	{r3, pc}
    50c6:	46c0      	nop			; (mov r8, r8)
    50c8:	20000090 	.word	0x20000090

000050cc <memchr>:
    50cc:	b2c9      	uxtb	r1, r1
    50ce:	1882      	adds	r2, r0, r2
    50d0:	4290      	cmp	r0, r2
    50d2:	d004      	beq.n	50de <memchr+0x12>
    50d4:	7803      	ldrb	r3, [r0, #0]
    50d6:	428b      	cmp	r3, r1
    50d8:	d002      	beq.n	50e0 <memchr+0x14>
    50da:	3001      	adds	r0, #1
    50dc:	e7f8      	b.n	50d0 <memchr+0x4>
    50de:	2000      	movs	r0, #0
    50e0:	4770      	bx	lr
	...

000050e4 <_free_r>:
    50e4:	b530      	push	{r4, r5, lr}
    50e6:	2900      	cmp	r1, #0
    50e8:	d040      	beq.n	516c <_free_r+0x88>
    50ea:	3904      	subs	r1, #4
    50ec:	680b      	ldr	r3, [r1, #0]
    50ee:	2b00      	cmp	r3, #0
    50f0:	da00      	bge.n	50f4 <_free_r+0x10>
    50f2:	18c9      	adds	r1, r1, r3
    50f4:	4a1e      	ldr	r2, [pc, #120]	; (5170 <_free_r+0x8c>)
    50f6:	6813      	ldr	r3, [r2, #0]
    50f8:	1c14      	adds	r4, r2, #0
    50fa:	2b00      	cmp	r3, #0
    50fc:	d102      	bne.n	5104 <_free_r+0x20>
    50fe:	604b      	str	r3, [r1, #4]
    5100:	6011      	str	r1, [r2, #0]
    5102:	e033      	b.n	516c <_free_r+0x88>
    5104:	4299      	cmp	r1, r3
    5106:	d20f      	bcs.n	5128 <_free_r+0x44>
    5108:	6808      	ldr	r0, [r1, #0]
    510a:	180a      	adds	r2, r1, r0
    510c:	429a      	cmp	r2, r3
    510e:	d105      	bne.n	511c <_free_r+0x38>
    5110:	6813      	ldr	r3, [r2, #0]
    5112:	6852      	ldr	r2, [r2, #4]
    5114:	18c0      	adds	r0, r0, r3
    5116:	6008      	str	r0, [r1, #0]
    5118:	604a      	str	r2, [r1, #4]
    511a:	e000      	b.n	511e <_free_r+0x3a>
    511c:	604b      	str	r3, [r1, #4]
    511e:	6021      	str	r1, [r4, #0]
    5120:	e024      	b.n	516c <_free_r+0x88>
    5122:	428a      	cmp	r2, r1
    5124:	d803      	bhi.n	512e <_free_r+0x4a>
    5126:	1c13      	adds	r3, r2, #0
    5128:	685a      	ldr	r2, [r3, #4]
    512a:	2a00      	cmp	r2, #0
    512c:	d1f9      	bne.n	5122 <_free_r+0x3e>
    512e:	681d      	ldr	r5, [r3, #0]
    5130:	195c      	adds	r4, r3, r5
    5132:	428c      	cmp	r4, r1
    5134:	d10b      	bne.n	514e <_free_r+0x6a>
    5136:	6809      	ldr	r1, [r1, #0]
    5138:	1869      	adds	r1, r5, r1
    513a:	1858      	adds	r0, r3, r1
    513c:	6019      	str	r1, [r3, #0]
    513e:	4290      	cmp	r0, r2
    5140:	d114      	bne.n	516c <_free_r+0x88>
    5142:	6814      	ldr	r4, [r2, #0]
    5144:	6852      	ldr	r2, [r2, #4]
    5146:	1909      	adds	r1, r1, r4
    5148:	6019      	str	r1, [r3, #0]
    514a:	605a      	str	r2, [r3, #4]
    514c:	e00e      	b.n	516c <_free_r+0x88>
    514e:	428c      	cmp	r4, r1
    5150:	d902      	bls.n	5158 <_free_r+0x74>
    5152:	230c      	movs	r3, #12
    5154:	6003      	str	r3, [r0, #0]
    5156:	e009      	b.n	516c <_free_r+0x88>
    5158:	6808      	ldr	r0, [r1, #0]
    515a:	180c      	adds	r4, r1, r0
    515c:	4294      	cmp	r4, r2
    515e:	d103      	bne.n	5168 <_free_r+0x84>
    5160:	6814      	ldr	r4, [r2, #0]
    5162:	6852      	ldr	r2, [r2, #4]
    5164:	1900      	adds	r0, r0, r4
    5166:	6008      	str	r0, [r1, #0]
    5168:	604a      	str	r2, [r1, #4]
    516a:	6059      	str	r1, [r3, #4]
    516c:	bd30      	pop	{r4, r5, pc}
    516e:	46c0      	nop			; (mov r8, r8)
    5170:	20004270 	.word	0x20004270

00005174 <_malloc_r>:
    5174:	b570      	push	{r4, r5, r6, lr}
    5176:	2303      	movs	r3, #3
    5178:	1ccd      	adds	r5, r1, #3
    517a:	439d      	bics	r5, r3
    517c:	3508      	adds	r5, #8
    517e:	1c06      	adds	r6, r0, #0
    5180:	2d0c      	cmp	r5, #12
    5182:	d201      	bcs.n	5188 <_malloc_r+0x14>
    5184:	250c      	movs	r5, #12
    5186:	e001      	b.n	518c <_malloc_r+0x18>
    5188:	2d00      	cmp	r5, #0
    518a:	db3f      	blt.n	520c <_malloc_r+0x98>
    518c:	428d      	cmp	r5, r1
    518e:	d33d      	bcc.n	520c <_malloc_r+0x98>
    5190:	4b20      	ldr	r3, [pc, #128]	; (5214 <_malloc_r+0xa0>)
    5192:	681c      	ldr	r4, [r3, #0]
    5194:	1c1a      	adds	r2, r3, #0
    5196:	1c21      	adds	r1, r4, #0
    5198:	2900      	cmp	r1, #0
    519a:	d013      	beq.n	51c4 <_malloc_r+0x50>
    519c:	6808      	ldr	r0, [r1, #0]
    519e:	1b43      	subs	r3, r0, r5
    51a0:	d40d      	bmi.n	51be <_malloc_r+0x4a>
    51a2:	2b0b      	cmp	r3, #11
    51a4:	d902      	bls.n	51ac <_malloc_r+0x38>
    51a6:	600b      	str	r3, [r1, #0]
    51a8:	18cc      	adds	r4, r1, r3
    51aa:	e01e      	b.n	51ea <_malloc_r+0x76>
    51ac:	428c      	cmp	r4, r1
    51ae:	d102      	bne.n	51b6 <_malloc_r+0x42>
    51b0:	6863      	ldr	r3, [r4, #4]
    51b2:	6013      	str	r3, [r2, #0]
    51b4:	e01a      	b.n	51ec <_malloc_r+0x78>
    51b6:	6848      	ldr	r0, [r1, #4]
    51b8:	6060      	str	r0, [r4, #4]
    51ba:	1c0c      	adds	r4, r1, #0
    51bc:	e016      	b.n	51ec <_malloc_r+0x78>
    51be:	1c0c      	adds	r4, r1, #0
    51c0:	6849      	ldr	r1, [r1, #4]
    51c2:	e7e9      	b.n	5198 <_malloc_r+0x24>
    51c4:	4c14      	ldr	r4, [pc, #80]	; (5218 <_malloc_r+0xa4>)
    51c6:	6820      	ldr	r0, [r4, #0]
    51c8:	2800      	cmp	r0, #0
    51ca:	d103      	bne.n	51d4 <_malloc_r+0x60>
    51cc:	1c30      	adds	r0, r6, #0
    51ce:	f000 f825 	bl	521c <_sbrk_r>
    51d2:	6020      	str	r0, [r4, #0]
    51d4:	1c30      	adds	r0, r6, #0
    51d6:	1c29      	adds	r1, r5, #0
    51d8:	f000 f820 	bl	521c <_sbrk_r>
    51dc:	1c43      	adds	r3, r0, #1
    51de:	d015      	beq.n	520c <_malloc_r+0x98>
    51e0:	1cc4      	adds	r4, r0, #3
    51e2:	2303      	movs	r3, #3
    51e4:	439c      	bics	r4, r3
    51e6:	4284      	cmp	r4, r0
    51e8:	d10a      	bne.n	5200 <_malloc_r+0x8c>
    51ea:	6025      	str	r5, [r4, #0]
    51ec:	1c20      	adds	r0, r4, #0
    51ee:	300b      	adds	r0, #11
    51f0:	2207      	movs	r2, #7
    51f2:	1d23      	adds	r3, r4, #4
    51f4:	4390      	bics	r0, r2
    51f6:	1ac3      	subs	r3, r0, r3
    51f8:	d00b      	beq.n	5212 <_malloc_r+0x9e>
    51fa:	425a      	negs	r2, r3
    51fc:	50e2      	str	r2, [r4, r3]
    51fe:	e008      	b.n	5212 <_malloc_r+0x9e>
    5200:	1a21      	subs	r1, r4, r0
    5202:	1c30      	adds	r0, r6, #0
    5204:	f000 f80a 	bl	521c <_sbrk_r>
    5208:	3001      	adds	r0, #1
    520a:	d1ee      	bne.n	51ea <_malloc_r+0x76>
    520c:	230c      	movs	r3, #12
    520e:	6033      	str	r3, [r6, #0]
    5210:	2000      	movs	r0, #0
    5212:	bd70      	pop	{r4, r5, r6, pc}
    5214:	20004270 	.word	0x20004270
    5218:	2000426c 	.word	0x2000426c

0000521c <_sbrk_r>:
    521c:	b538      	push	{r3, r4, r5, lr}
    521e:	4c07      	ldr	r4, [pc, #28]	; (523c <_sbrk_r+0x20>)
    5220:	2300      	movs	r3, #0
    5222:	1c05      	adds	r5, r0, #0
    5224:	1c08      	adds	r0, r1, #0
    5226:	6023      	str	r3, [r4, #0]
    5228:	f7fe fe24 	bl	3e74 <_sbrk>
    522c:	1c43      	adds	r3, r0, #1
    522e:	d103      	bne.n	5238 <_sbrk_r+0x1c>
    5230:	6823      	ldr	r3, [r4, #0]
    5232:	2b00      	cmp	r3, #0
    5234:	d000      	beq.n	5238 <_sbrk_r+0x1c>
    5236:	602b      	str	r3, [r5, #0]
    5238:	bd38      	pop	{r3, r4, r5, pc}
    523a:	46c0      	nop			; (mov r8, r8)
    523c:	20004428 	.word	0x20004428

00005240 <__sread>:
    5240:	b538      	push	{r3, r4, r5, lr}
    5242:	1c0c      	adds	r4, r1, #0
    5244:	250e      	movs	r5, #14
    5246:	5f49      	ldrsh	r1, [r1, r5]
    5248:	f000 f8ac 	bl	53a4 <_read_r>
    524c:	2800      	cmp	r0, #0
    524e:	db03      	blt.n	5258 <__sread+0x18>
    5250:	6d62      	ldr	r2, [r4, #84]	; 0x54
    5252:	1813      	adds	r3, r2, r0
    5254:	6563      	str	r3, [r4, #84]	; 0x54
    5256:	e003      	b.n	5260 <__sread+0x20>
    5258:	89a2      	ldrh	r2, [r4, #12]
    525a:	4b02      	ldr	r3, [pc, #8]	; (5264 <__sread+0x24>)
    525c:	4013      	ands	r3, r2
    525e:	81a3      	strh	r3, [r4, #12]
    5260:	bd38      	pop	{r3, r4, r5, pc}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	ffffefff 	.word	0xffffefff

00005268 <__swrite>:
    5268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    526a:	1c1e      	adds	r6, r3, #0
    526c:	898b      	ldrh	r3, [r1, #12]
    526e:	1c05      	adds	r5, r0, #0
    5270:	1c0c      	adds	r4, r1, #0
    5272:	1c17      	adds	r7, r2, #0
    5274:	05da      	lsls	r2, r3, #23
    5276:	d505      	bpl.n	5284 <__swrite+0x1c>
    5278:	230e      	movs	r3, #14
    527a:	5ec9      	ldrsh	r1, [r1, r3]
    527c:	2200      	movs	r2, #0
    527e:	2302      	movs	r3, #2
    5280:	f000 f87c 	bl	537c <_lseek_r>
    5284:	89a2      	ldrh	r2, [r4, #12]
    5286:	4b05      	ldr	r3, [pc, #20]	; (529c <__swrite+0x34>)
    5288:	1c28      	adds	r0, r5, #0
    528a:	4013      	ands	r3, r2
    528c:	81a3      	strh	r3, [r4, #12]
    528e:	220e      	movs	r2, #14
    5290:	5ea1      	ldrsh	r1, [r4, r2]
    5292:	1c33      	adds	r3, r6, #0
    5294:	1c3a      	adds	r2, r7, #0
    5296:	f000 f827 	bl	52e8 <_write_r>
    529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    529c:	ffffefff 	.word	0xffffefff

000052a0 <__sseek>:
    52a0:	b538      	push	{r3, r4, r5, lr}
    52a2:	1c0c      	adds	r4, r1, #0
    52a4:	250e      	movs	r5, #14
    52a6:	5f49      	ldrsh	r1, [r1, r5]
    52a8:	f000 f868 	bl	537c <_lseek_r>
    52ac:	89a3      	ldrh	r3, [r4, #12]
    52ae:	1c42      	adds	r2, r0, #1
    52b0:	d103      	bne.n	52ba <__sseek+0x1a>
    52b2:	4a05      	ldr	r2, [pc, #20]	; (52c8 <__sseek+0x28>)
    52b4:	4013      	ands	r3, r2
    52b6:	81a3      	strh	r3, [r4, #12]
    52b8:	e004      	b.n	52c4 <__sseek+0x24>
    52ba:	2280      	movs	r2, #128	; 0x80
    52bc:	0152      	lsls	r2, r2, #5
    52be:	4313      	orrs	r3, r2
    52c0:	81a3      	strh	r3, [r4, #12]
    52c2:	6560      	str	r0, [r4, #84]	; 0x54
    52c4:	bd38      	pop	{r3, r4, r5, pc}
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	ffffefff 	.word	0xffffefff

000052cc <__sclose>:
    52cc:	b508      	push	{r3, lr}
    52ce:	230e      	movs	r3, #14
    52d0:	5ec9      	ldrsh	r1, [r1, r3]
    52d2:	f000 f81d 	bl	5310 <_close_r>
    52d6:	bd08      	pop	{r3, pc}

000052d8 <strlen>:
    52d8:	2300      	movs	r3, #0
    52da:	5cc2      	ldrb	r2, [r0, r3]
    52dc:	3301      	adds	r3, #1
    52de:	2a00      	cmp	r2, #0
    52e0:	d1fb      	bne.n	52da <strlen+0x2>
    52e2:	1e58      	subs	r0, r3, #1
    52e4:	4770      	bx	lr
	...

000052e8 <_write_r>:
    52e8:	b538      	push	{r3, r4, r5, lr}
    52ea:	4c08      	ldr	r4, [pc, #32]	; (530c <_write_r+0x24>)
    52ec:	1c05      	adds	r5, r0, #0
    52ee:	2000      	movs	r0, #0
    52f0:	6020      	str	r0, [r4, #0]
    52f2:	1c08      	adds	r0, r1, #0
    52f4:	1c11      	adds	r1, r2, #0
    52f6:	1c1a      	adds	r2, r3, #0
    52f8:	f7fb fb46 	bl	988 <_write>
    52fc:	1c43      	adds	r3, r0, #1
    52fe:	d103      	bne.n	5308 <_write_r+0x20>
    5300:	6823      	ldr	r3, [r4, #0]
    5302:	2b00      	cmp	r3, #0
    5304:	d000      	beq.n	5308 <_write_r+0x20>
    5306:	602b      	str	r3, [r5, #0]
    5308:	bd38      	pop	{r3, r4, r5, pc}
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	20004428 	.word	0x20004428

00005310 <_close_r>:
    5310:	b538      	push	{r3, r4, r5, lr}
    5312:	4c07      	ldr	r4, [pc, #28]	; (5330 <_close_r+0x20>)
    5314:	2300      	movs	r3, #0
    5316:	1c05      	adds	r5, r0, #0
    5318:	1c08      	adds	r0, r1, #0
    531a:	6023      	str	r3, [r4, #0]
    531c:	f7fe fdbc 	bl	3e98 <_close>
    5320:	1c43      	adds	r3, r0, #1
    5322:	d103      	bne.n	532c <_close_r+0x1c>
    5324:	6823      	ldr	r3, [r4, #0]
    5326:	2b00      	cmp	r3, #0
    5328:	d000      	beq.n	532c <_close_r+0x1c>
    532a:	602b      	str	r3, [r5, #0]
    532c:	bd38      	pop	{r3, r4, r5, pc}
    532e:	46c0      	nop			; (mov r8, r8)
    5330:	20004428 	.word	0x20004428

00005334 <_fstat_r>:
    5334:	b538      	push	{r3, r4, r5, lr}
    5336:	4c07      	ldr	r4, [pc, #28]	; (5354 <_fstat_r+0x20>)
    5338:	2300      	movs	r3, #0
    533a:	1c05      	adds	r5, r0, #0
    533c:	1c08      	adds	r0, r1, #0
    533e:	1c11      	adds	r1, r2, #0
    5340:	6023      	str	r3, [r4, #0]
    5342:	f7fe fdad 	bl	3ea0 <_fstat>
    5346:	1c43      	adds	r3, r0, #1
    5348:	d103      	bne.n	5352 <_fstat_r+0x1e>
    534a:	6823      	ldr	r3, [r4, #0]
    534c:	2b00      	cmp	r3, #0
    534e:	d000      	beq.n	5352 <_fstat_r+0x1e>
    5350:	602b      	str	r3, [r5, #0]
    5352:	bd38      	pop	{r3, r4, r5, pc}
    5354:	20004428 	.word	0x20004428

00005358 <_isatty_r>:
    5358:	b538      	push	{r3, r4, r5, lr}
    535a:	4c07      	ldr	r4, [pc, #28]	; (5378 <_isatty_r+0x20>)
    535c:	2300      	movs	r3, #0
    535e:	1c05      	adds	r5, r0, #0
    5360:	1c08      	adds	r0, r1, #0
    5362:	6023      	str	r3, [r4, #0]
    5364:	f7fe fda2 	bl	3eac <_isatty>
    5368:	1c43      	adds	r3, r0, #1
    536a:	d103      	bne.n	5374 <_isatty_r+0x1c>
    536c:	6823      	ldr	r3, [r4, #0]
    536e:	2b00      	cmp	r3, #0
    5370:	d000      	beq.n	5374 <_isatty_r+0x1c>
    5372:	602b      	str	r3, [r5, #0]
    5374:	bd38      	pop	{r3, r4, r5, pc}
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	20004428 	.word	0x20004428

0000537c <_lseek_r>:
    537c:	b538      	push	{r3, r4, r5, lr}
    537e:	4c08      	ldr	r4, [pc, #32]	; (53a0 <_lseek_r+0x24>)
    5380:	1c05      	adds	r5, r0, #0
    5382:	2000      	movs	r0, #0
    5384:	6020      	str	r0, [r4, #0]
    5386:	1c08      	adds	r0, r1, #0
    5388:	1c11      	adds	r1, r2, #0
    538a:	1c1a      	adds	r2, r3, #0
    538c:	f7fe fd90 	bl	3eb0 <_lseek>
    5390:	1c43      	adds	r3, r0, #1
    5392:	d103      	bne.n	539c <_lseek_r+0x20>
    5394:	6823      	ldr	r3, [r4, #0]
    5396:	2b00      	cmp	r3, #0
    5398:	d000      	beq.n	539c <_lseek_r+0x20>
    539a:	602b      	str	r3, [r5, #0]
    539c:	bd38      	pop	{r3, r4, r5, pc}
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	20004428 	.word	0x20004428

000053a4 <_read_r>:
    53a4:	b538      	push	{r3, r4, r5, lr}
    53a6:	4c08      	ldr	r4, [pc, #32]	; (53c8 <_read_r+0x24>)
    53a8:	1c05      	adds	r5, r0, #0
    53aa:	2000      	movs	r0, #0
    53ac:	6020      	str	r0, [r4, #0]
    53ae:	1c08      	adds	r0, r1, #0
    53b0:	1c11      	adds	r1, r2, #0
    53b2:	1c1a      	adds	r2, r3, #0
    53b4:	f7fb fac6 	bl	944 <_read>
    53b8:	1c43      	adds	r3, r0, #1
    53ba:	d103      	bne.n	53c4 <_read_r+0x20>
    53bc:	6823      	ldr	r3, [r4, #0]
    53be:	2b00      	cmp	r3, #0
    53c0:	d000      	beq.n	53c4 <_read_r+0x20>
    53c2:	602b      	str	r3, [r5, #0]
    53c4:	bd38      	pop	{r3, r4, r5, pc}
    53c6:	46c0      	nop			; (mov r8, r8)
    53c8:	20004428 	.word	0x20004428
    53cc:	42000800 	.word	0x42000800
    53d0:	42000c00 	.word	0x42000c00
    53d4:	42001000 	.word	0x42001000
    53d8:	42001400 	.word	0x42001400
    53dc:	42001800 	.word	0x42001800
    53e0:	42001c00 	.word	0x42001c00
    53e4:	42002c00 	.word	0x42002c00
    53e8:	42003000 	.word	0x42003000
    53ec:	42003400 	.word	0x42003400
    53f0:	001c1c1b 	.word	0x001c1c1b
    53f4:	10000800 	.word	0x10000800
    53f8:	00002000 	.word	0x00002000

000053fc <tc_interrupt_vectors.11766>:
    53fc:	00141312 454c4449 00000000 00002a32     ....IDLE....2*..
    540c:	00002a32 00002a32 00002a8a 00002a6c     2*..2*...*..l*..
    541c:	00002a84 00002a32 00002a32 00002a8a     .*..2*..2*...*..
    542c:	00002a6c 20726d54 00637653 0c0b0a09     l*..Tmr Svc.....
    543c:	00000e0d 00003880 000038dc 000038dc     .....8...8...8..
    544c:	0000387a 0000387a 00003896 00003886     z8..z8...8...8..
    545c:	0000389c 000038ca 00003964 000039c4     .8...8..d9...9..
    546c:	000039c4 00003944 00003956 00003972     .9..D9..V9..r9..
    547c:	00003948 00003980 000039b4 65636572     H9...9...9..rece
    548c:	64657669 00000021 65646f4d 2073253a     ived!...Mode:%s 
    549c:	3a6d5220 54643225 65677261 32253a74      Rm:%2dTarget:%2
    54ac:	20632564 25643225 73252063 00000000     d%c %2d%c %s....
    54bc:	74736554 75636553 79746972 3079654b     TestSecurityKey0
    54cc:	00000000 0044434c 74736574 00000000     ....LCD.test....
    54dc:	00000058 00000043                       X...C...

000054e4 <_global_impure_ptr>:
    54e4:	20000030 2b302d23 6c680020 6665004c     0.. #-0+ .hlL.ef
    54f4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    5504:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    5514:	64636261 00006665                       abcdef..

0000551c <__sf_fake_stdin>:
	...

0000553c <__sf_fake_stdout>:
	...

0000555c <__sf_fake_stderr>:
	...

0000557c <_init>:
    557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    557e:	46c0      	nop			; (mov r8, r8)
    5580:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5582:	bc08      	pop	{r3}
    5584:	469e      	mov	lr, r3
    5586:	4770      	bx	lr

00005588 <__init_array_start>:
    5588:	000000dd 	.word	0x000000dd

0000558c <_fini>:
    558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    558e:	46c0      	nop			; (mov r8, r8)
    5590:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5592:	bc08      	pop	{r3}
    5594:	469e      	mov	lr, r3
    5596:	4770      	bx	lr

00005598 <__fini_array_start>:
    5598:	000000b5 	.word	0x000000b5
