
APPS_PEER2PEER2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b6c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00005b6c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000984  20000070  00005bdc  00010070  2**2
                  ALLOC
  3 .stack        00002004  200009f4  00006560  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000328ef  00000000  00000000  00010126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f0d  00000000  00000000  00042a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c34a  00000000  00000000  00048922  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b28  00000000  00000000  00054c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001080  00000000  00000000  00055794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f0d3  00000000  00000000  00056814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018ea2  00000000  00000000  000758e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00085a44  00000000  00000000  0008e789  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000224c  00000000  00000000  001141d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200029f8 	.word	0x200029f8
       4:	00001e99 	.word	0x00001e99
       8:	00001e95 	.word	0x00001e95
       c:	00001e95 	.word	0x00001e95
	...
      2c:	00001e95 	.word	0x00001e95
	...
      38:	00001e95 	.word	0x00001e95
      3c:	00001e95 	.word	0x00001e95
      40:	00001e95 	.word	0x00001e95
      44:	00001e95 	.word	0x00001e95
      48:	00001e95 	.word	0x00001e95
      4c:	00001e95 	.word	0x00001e95
      50:	0000032d 	.word	0x0000032d
      54:	00001e95 	.word	0x00001e95
      58:	00001e95 	.word	0x00001e95
      5c:	00001e95 	.word	0x00001e95
      60:	00001e95 	.word	0x00001e95
      64:	00000929 	.word	0x00000929
      68:	00000939 	.word	0x00000939
      6c:	00000949 	.word	0x00000949
      70:	00000959 	.word	0x00000959
      74:	00000969 	.word	0x00000969
      78:	00000979 	.word	0x00000979
      7c:	00001e95 	.word	0x00001e95
      80:	00001e95 	.word	0x00001e95
      84:	00001e95 	.word	0x00001e95
      88:	00001b35 	.word	0x00001b35
      8c:	00001b45 	.word	0x00001b45
      90:	00001b55 	.word	0x00001b55
	...
      9c:	00001e95 	.word	0x00001e95
      a0:	00001e95 	.word	0x00001e95
      a4:	00000000 	.word	0x00000000
      a8:	00001e95 	.word	0x00001e95
      ac:	00001e95 	.word	0x00001e95
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00005b6c 	.word	0x00005b6c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00005b6c 	.word	0x00005b6c
     108:	20000074 	.word	0x20000074
     10c:	00005b6c 	.word	0x00005b6c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	0000185d 	.word	0x0000185d
     140:	000048cd 	.word	0x000048cd
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     150:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_us+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     158:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15e:	e006      	b.n	16e <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     164:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     166:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_us+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000000 	.word	0x20000000
     178:	e000e010 	.word	0xe000e010

0000017c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     17c:	4b0c      	ldr	r3, [pc, #48]	; (1b0 <cpu_irq_enter_critical+0x34>)
     17e:	681b      	ldr	r3, [r3, #0]
     180:	2b00      	cmp	r3, #0
     182:	d110      	bne.n	1a6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     184:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     188:	2b00      	cmp	r3, #0
     18a:	d109      	bne.n	1a0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     18c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     18e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     192:	2200      	movs	r2, #0
     194:	4b07      	ldr	r3, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x38>)
     196:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     198:	2201      	movs	r2, #1
     19a:	4b07      	ldr	r3, [pc, #28]	; (1b8 <cpu_irq_enter_critical+0x3c>)
     19c:	701a      	strb	r2, [r3, #0]
     19e:	e002      	b.n	1a6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1a0:	2200      	movs	r2, #0
     1a2:	4b05      	ldr	r3, [pc, #20]	; (1b8 <cpu_irq_enter_critical+0x3c>)
     1a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1a6:	4b02      	ldr	r3, [pc, #8]	; (1b0 <cpu_irq_enter_critical+0x34>)
     1a8:	681a      	ldr	r2, [r3, #0]
     1aa:	3201      	adds	r2, #1
     1ac:	601a      	str	r2, [r3, #0]
}
     1ae:	4770      	bx	lr
     1b0:	2000008c 	.word	0x2000008c
     1b4:	20000008 	.word	0x20000008
     1b8:	20000090 	.word	0x20000090

000001bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1bc:	4b08      	ldr	r3, [pc, #32]	; (1e0 <cpu_irq_leave_critical+0x24>)
     1be:	681a      	ldr	r2, [r3, #0]
     1c0:	3a01      	subs	r2, #1
     1c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d109      	bne.n	1de <cpu_irq_leave_critical+0x22>
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <cpu_irq_leave_critical+0x28>)
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	2b00      	cmp	r3, #0
     1d0:	d005      	beq.n	1de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d2:	2201      	movs	r2, #1
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_leave_critical+0x2c>)
     1d6:	701a      	strb	r2, [r3, #0]
     1d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     1dc:	b662      	cpsie	i
	}
}
     1de:	4770      	bx	lr
     1e0:	2000008c 	.word	0x2000008c
     1e4:	20000090 	.word	0x20000090
     1e8:	20000008 	.word	0x20000008

000001ec <system_board_init>:




void system_board_init(void)
{
     1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ee:	4647      	mov	r7, r8
     1f0:	b480      	push	{r7}
     1f2:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2601      	movs	r6, #1
     1f8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	2013      	movs	r0, #19
     202:	1c21      	adds	r1, r4, #0
     204:	4d27      	ldr	r5, [pc, #156]	; (2a4 <system_board_init+0xb8>)
     206:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	4a27      	ldr	r2, [pc, #156]	; (2a8 <system_board_init+0xbc>)
     20a:	4690      	mov	r8, r2
     20c:	2380      	movs	r3, #128	; 0x80
     20e:	031b      	lsls	r3, r3, #12
     210:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     212:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     214:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     216:	201c      	movs	r0, #28
     218:	1c21      	adds	r1, r4, #0
     21a:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     21c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     21e:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     220:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     222:	2052      	movs	r0, #82	; 0x52
     224:	1c21      	adds	r1, r4, #0
     226:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     228:	203e      	movs	r0, #62	; 0x3e
     22a:	1c21      	adds	r1, r4, #0
     22c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     22e:	203f      	movs	r0, #63	; 0x3f
     230:	1c21      	adds	r1, r4, #0
     232:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     234:	202f      	movs	r0, #47	; 0x2f
     236:	1c21      	adds	r1, r4, #0
     238:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     23a:	2014      	movs	r0, #20
     23c:	1c21      	adds	r1, r4, #0
     23e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     240:	2280      	movs	r2, #128	; 0x80
     242:	02d2      	lsls	r2, r2, #11
     244:	4b19      	ldr	r3, [pc, #100]	; (2ac <system_board_init+0xc0>)
     246:	619a      	str	r2, [r3, #24]
     248:	3b80      	subs	r3, #128	; 0x80
     24a:	2280      	movs	r2, #128	; 0x80
     24c:	05d2      	lsls	r2, r2, #23
     24e:	619a      	str	r2, [r3, #24]
     250:	2280      	movs	r2, #128	; 0x80
     252:	0612      	lsls	r2, r2, #24
     254:	619a      	str	r2, [r3, #24]
     256:	2280      	movs	r2, #128	; 0x80
     258:	0212      	lsls	r2, r2, #8
     25a:	619a      	str	r2, [r3, #24]
     25c:	2380      	movs	r3, #128	; 0x80
     25e:	035b      	lsls	r3, r3, #13
     260:	4642      	mov	r2, r8
     262:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     264:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     266:	2053      	movs	r0, #83	; 0x53
     268:	1c21      	adds	r1, r4, #0
     26a:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     26c:	4b10      	ldr	r3, [pc, #64]	; (2b0 <system_board_init+0xc4>)
     26e:	6a19      	ldr	r1, [r3, #32]
     270:	2280      	movs	r2, #128	; 0x80
     272:	0392      	lsls	r2, r2, #14
     274:	430a      	orrs	r2, r1
     276:	621a      	str	r2, [r3, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     278:	2204      	movs	r2, #4
     27a:	4b0e      	ldr	r3, [pc, #56]	; (2b4 <system_board_init+0xc8>)
     27c:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     27e:	466b      	mov	r3, sp
     280:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     282:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     284:	2305      	movs	r3, #5
     286:	466a      	mov	r2, sp
     288:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     28a:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     28c:	2009      	movs	r0, #9
     28e:	4669      	mov	r1, sp
     290:	4c09      	ldr	r4, [pc, #36]	; (2b8 <system_board_init+0xcc>)
     292:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     294:	200c      	movs	r0, #12
     296:	4669      	mov	r1, sp
     298:	47a0      	blx	r4
#endif

}
     29a:	b002      	add	sp, #8
     29c:	bc04      	pop	{r2}
     29e:	4690      	mov	r8, r2
     2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	000004ad 	.word	0x000004ad
     2a8:	41004400 	.word	0x41004400
     2ac:	41004500 	.word	0x41004500
     2b0:	40000400 	.word	0x40000400
     2b4:	42005400 	.word	0x42005400
     2b8:	00001a51 	.word	0x00001a51

000002bc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2bc:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2be:	2a00      	cmp	r2, #0
     2c0:	d10f      	bne.n	2e2 <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     2c2:	008b      	lsls	r3, r1, #2
     2c4:	4a08      	ldr	r2, [pc, #32]	; (2e8 <extint_register_callback+0x2c>)
     2c6:	589a      	ldr	r2, [r3, r2]
     2c8:	2a00      	cmp	r2, #0
     2ca:	d104      	bne.n	2d6 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
     2cc:	1c19      	adds	r1, r3, #0
     2ce:	4b06      	ldr	r3, [pc, #24]	; (2e8 <extint_register_callback+0x2c>)
     2d0:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     2d2:	2300      	movs	r3, #0
     2d4:	e005      	b.n	2e2 <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     2d6:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     2d8:	1a12      	subs	r2, r2, r0
     2da:	1e50      	subs	r0, r2, #1
     2dc:	4182      	sbcs	r2, r0
     2de:	4252      	negs	r2, r2
     2e0:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2e2:	1c18      	adds	r0, r3, #0
     2e4:	4770      	bx	lr
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	2000087c 	.word	0x2000087c

000002ec <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2ec:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2ee:	2900      	cmp	r1, #0
     2f0:	d107      	bne.n	302 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2f2:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2f4:	281f      	cmp	r0, #31
     2f6:	d800      	bhi.n	2fa <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     2fa:	2201      	movs	r2, #1
     2fc:	4082      	lsls	r2, r0
     2fe:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     300:	2300      	movs	r3, #0
}
     302:	1c18      	adds	r0, r3, #0
     304:	4770      	bx	lr
     306:	46c0      	nop			; (mov r8, r8)
     308:	40001800 	.word	0x40001800

0000030c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     30c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     30e:	2900      	cmp	r1, #0
     310:	d107      	bne.n	322 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     312:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     314:	281f      	cmp	r0, #31
     316:	d800      	bhi.n	31a <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     318:	4b03      	ldr	r3, [pc, #12]	; (328 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     31a:	2201      	movs	r2, #1
     31c:	4082      	lsls	r2, r0
     31e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     320:	2300      	movs	r3, #0
}
     322:	1c18      	adds	r0, r3, #0
     324:	4770      	bx	lr
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     32c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     32e:	2200      	movs	r2, #0
     330:	4b16      	ldr	r3, [pc, #88]	; (38c <EIC_Handler+0x60>)
     332:	701a      	strb	r2, [r3, #0]
     334:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     336:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     338:	4d15      	ldr	r5, [pc, #84]	; (390 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     33a:	4c14      	ldr	r4, [pc, #80]	; (38c <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     33c:	2b1f      	cmp	r3, #31
     33e:	d910      	bls.n	362 <EIC_Handler+0x36>
     340:	e019      	b.n	376 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     342:	4914      	ldr	r1, [pc, #80]	; (394 <EIC_Handler+0x68>)
     344:	e000      	b.n	348 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     346:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     348:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     34a:	009b      	lsls	r3, r3, #2
     34c:	595b      	ldr	r3, [r3, r5]
     34e:	2b00      	cmp	r3, #0
     350:	d000      	beq.n	354 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     352:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     354:	7823      	ldrb	r3, [r4, #0]
     356:	3301      	adds	r3, #1
     358:	b2db      	uxtb	r3, r3
     35a:	7023      	strb	r3, [r4, #0]
     35c:	2b0f      	cmp	r3, #15
     35e:	d814      	bhi.n	38a <EIC_Handler+0x5e>
     360:	e7ec      	b.n	33c <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     362:	1c32      	adds	r2, r6, #0
     364:	401a      	ands	r2, r3
     366:	2101      	movs	r1, #1
     368:	4091      	lsls	r1, r2
     36a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     36c:	4909      	ldr	r1, [pc, #36]	; (394 <EIC_Handler+0x68>)
     36e:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     370:	4211      	tst	r1, r2
     372:	d1e6      	bne.n	342 <EIC_Handler+0x16>
     374:	e7ee      	b.n	354 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     376:	1c32      	adds	r2, r6, #0
     378:	401a      	ands	r2, r3
     37a:	2101      	movs	r1, #1
     37c:	4091      	lsls	r1, r2
     37e:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     380:	2100      	movs	r1, #0
     382:	6909      	ldr	r1, [r1, #16]
     384:	4211      	tst	r1, r2
     386:	d1de      	bne.n	346 <EIC_Handler+0x1a>
     388:	e7e4      	b.n	354 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     38a:	bd70      	pop	{r4, r5, r6, pc}
     38c:	20000878 	.word	0x20000878
     390:	2000087c 	.word	0x2000087c
     394:	40001800 	.word	0x40001800

00000398 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     398:	4b05      	ldr	r3, [pc, #20]	; (3b0 <_extint_enable+0x18>)
     39a:	7819      	ldrb	r1, [r3, #0]
     39c:	2202      	movs	r2, #2
     39e:	430a      	orrs	r2, r1
     3a0:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3a2:	1c1a      	adds	r2, r3, #0
     3a4:	7853      	ldrb	r3, [r2, #1]
     3a6:	b25b      	sxtb	r3, r3
     3a8:	2b00      	cmp	r3, #0
     3aa:	dbfb      	blt.n	3a4 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3ac:	4770      	bx	lr
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	40001800 	.word	0x40001800

000003b4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3b4:	b500      	push	{lr}
     3b6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3b8:	4b12      	ldr	r3, [pc, #72]	; (404 <_system_extint_init+0x50>)
     3ba:	6999      	ldr	r1, [r3, #24]
     3bc:	2240      	movs	r2, #64	; 0x40
     3be:	430a      	orrs	r2, r1
     3c0:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3c2:	a901      	add	r1, sp, #4
     3c4:	2300      	movs	r3, #0
     3c6:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3c8:	2005      	movs	r0, #5
     3ca:	4b0f      	ldr	r3, [pc, #60]	; (408 <_system_extint_init+0x54>)
     3cc:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3ce:	2005      	movs	r0, #5
     3d0:	4b0e      	ldr	r3, [pc, #56]	; (40c <_system_extint_init+0x58>)
     3d2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3d4:	4b0e      	ldr	r3, [pc, #56]	; (410 <_system_extint_init+0x5c>)
     3d6:	7819      	ldrb	r1, [r3, #0]
     3d8:	2201      	movs	r2, #1
     3da:	430a      	orrs	r2, r1
     3dc:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3de:	1c1a      	adds	r2, r3, #0
     3e0:	7853      	ldrb	r3, [r2, #1]
     3e2:	b25b      	sxtb	r3, r3
     3e4:	2b00      	cmp	r3, #0
     3e6:	dbfb      	blt.n	3e0 <_system_extint_init+0x2c>
     3e8:	4b0a      	ldr	r3, [pc, #40]	; (414 <_system_extint_init+0x60>)
     3ea:	1c19      	adds	r1, r3, #0
     3ec:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     3ee:	2200      	movs	r2, #0
     3f0:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3f2:	428b      	cmp	r3, r1
     3f4:	d1fc      	bne.n	3f0 <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3f6:	2210      	movs	r2, #16
     3f8:	4b07      	ldr	r3, [pc, #28]	; (418 <_system_extint_init+0x64>)
     3fa:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     3fc:	4b07      	ldr	r3, [pc, #28]	; (41c <_system_extint_init+0x68>)
     3fe:	4798      	blx	r3
}
     400:	b003      	add	sp, #12
     402:	bd00      	pop	{pc}
     404:	40000400 	.word	0x40000400
     408:	00001975 	.word	0x00001975
     40c:	000018e9 	.word	0x000018e9
     410:	40001800 	.word	0x40001800
     414:	2000087c 	.word	0x2000087c
     418:	e000e100 	.word	0xe000e100
     41c:	00000399 	.word	0x00000399

00000420 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     420:	2300      	movs	r3, #0
     422:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     424:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     426:	2201      	movs	r2, #1
     428:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     42a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     42c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     42e:	2302      	movs	r3, #2
     430:	72c3      	strb	r3, [r0, #11]
}
     432:	4770      	bx	lr

00000434 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     434:	b5f0      	push	{r4, r5, r6, r7, lr}
     436:	b083      	sub	sp, #12
     438:	1c05      	adds	r5, r0, #0
     43a:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     43c:	a901      	add	r1, sp, #4
     43e:	2300      	movs	r3, #0
     440:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     442:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     444:	6863      	ldr	r3, [r4, #4]
     446:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     448:	7a23      	ldrb	r3, [r4, #8]
     44a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     44c:	7820      	ldrb	r0, [r4, #0]
     44e:	4b15      	ldr	r3, [pc, #84]	; (4a4 <extint_chan_set_config+0x70>)
     450:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     452:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     454:	2d1f      	cmp	r5, #31
     456:	d800      	bhi.n	45a <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     458:	4b13      	ldr	r3, [pc, #76]	; (4a8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     45a:	2107      	movs	r1, #7
     45c:	4029      	ands	r1, r5
     45e:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     460:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     462:	7aa2      	ldrb	r2, [r4, #10]
     464:	2a00      	cmp	r2, #0
     466:	d001      	beq.n	46c <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     468:	2208      	movs	r2, #8
     46a:	4310      	orrs	r0, r2
     46c:	08ea      	lsrs	r2, r5, #3
     46e:	0092      	lsls	r2, r2, #2
     470:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     472:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     474:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     476:	270f      	movs	r7, #15
     478:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47a:	43be      	bics	r6, r7
     47c:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     47e:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     480:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     482:	7a62      	ldrb	r2, [r4, #9]
     484:	2a00      	cmp	r2, #0
     486:	d006      	beq.n	496 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     488:	695a      	ldr	r2, [r3, #20]
     48a:	2101      	movs	r1, #1
     48c:	40a9      	lsls	r1, r5
     48e:	1c0d      	adds	r5, r1, #0
     490:	4315      	orrs	r5, r2
     492:	615d      	str	r5, [r3, #20]
     494:	e004      	b.n	4a0 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     496:	695a      	ldr	r2, [r3, #20]
     498:	2101      	movs	r1, #1
     49a:	40a9      	lsls	r1, r5
     49c:	438a      	bics	r2, r1
     49e:	615a      	str	r2, [r3, #20]
	}
}
     4a0:	b003      	add	sp, #12
     4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a4:	00001a51 	.word	0x00001a51
     4a8:	40001800 	.word	0x40001800

000004ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4ac:	b500      	push	{lr}
     4ae:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4b0:	ab01      	add	r3, sp, #4
     4b2:	2280      	movs	r2, #128	; 0x80
     4b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4b6:	780a      	ldrb	r2, [r1, #0]
     4b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ba:	784a      	ldrb	r2, [r1, #1]
     4bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4be:	788a      	ldrb	r2, [r1, #2]
     4c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4c2:	1c19      	adds	r1, r3, #0
     4c4:	4b01      	ldr	r3, [pc, #4]	; (4cc <port_pin_set_config+0x20>)
     4c6:	4798      	blx	r3
}
     4c8:	b003      	add	sp, #12
     4ca:	bd00      	pop	{pc}
     4cc:	00001a51 	.word	0x00001a51

000004d0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4d0:	b510      	push	{r4, lr}
     4d2:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     4d4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4d6:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     4d8:	4299      	cmp	r1, r3
     4da:	d30c      	bcc.n	4f6 <_sercom_get_sync_baud_val+0x26>
     4dc:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     4de:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     4e0:	1c60      	adds	r0, r4, #1
     4e2:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     4e4:	428b      	cmp	r3, r1
     4e6:	d801      	bhi.n	4ec <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     4e8:	1c04      	adds	r4, r0, #0
     4ea:	e7f8      	b.n	4de <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ec:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     4ee:	2cff      	cmp	r4, #255	; 0xff
     4f0:	d801      	bhi.n	4f6 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     4f2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     4f4:	2000      	movs	r0, #0
	}
}
     4f6:	bd10      	pop	{r4, pc}

000004f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fa:	465f      	mov	r7, fp
     4fc:	4656      	mov	r6, sl
     4fe:	464d      	mov	r5, r9
     500:	4644      	mov	r4, r8
     502:	b4f0      	push	{r4, r5, r6, r7}
     504:	b087      	sub	sp, #28
     506:	1c06      	adds	r6, r0, #0
     508:	1c0d      	adds	r5, r1, #0
     50a:	9204      	str	r2, [sp, #16]
     50c:	aa10      	add	r2, sp, #64	; 0x40
     50e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     510:	1c32      	adds	r2, r6, #0
     512:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     514:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     516:	428a      	cmp	r2, r1
     518:	d900      	bls.n	51c <_sercom_get_async_baud_val+0x24>
     51a:	e0b3      	b.n	684 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     51c:	2b00      	cmp	r3, #0
     51e:	d14b      	bne.n	5b8 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     520:	2100      	movs	r1, #0
     522:	1c32      	adds	r2, r6, #0
     524:	4c5e      	ldr	r4, [pc, #376]	; (6a0 <_sercom_get_async_baud_val+0x1a8>)
     526:	47a0      	blx	r4
     528:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     52a:	1c2e      	adds	r6, r5, #0
     52c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     52e:	2000      	movs	r0, #0
     530:	2100      	movs	r1, #0
     532:	2200      	movs	r2, #0
     534:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     536:	243f      	movs	r4, #63	; 0x3f
     538:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     53a:	2501      	movs	r5, #1
     53c:	46a8      	mov	r8, r5
     53e:	9002      	str	r0, [sp, #8]
     540:	9103      	str	r1, [sp, #12]
     542:	4661      	mov	r1, ip
     544:	3920      	subs	r1, #32
     546:	d403      	bmi.n	550 <_sercom_get_async_baud_val+0x58>
     548:	4640      	mov	r0, r8
     54a:	4088      	lsls	r0, r1
     54c:	4681      	mov	r9, r0
     54e:	e005      	b.n	55c <_sercom_get_async_baud_val+0x64>
     550:	2120      	movs	r1, #32
     552:	4665      	mov	r5, ip
     554:	1b4c      	subs	r4, r1, r5
     556:	4640      	mov	r0, r8
     558:	40e0      	lsrs	r0, r4
     55a:	4681      	mov	r9, r0
     55c:	4641      	mov	r1, r8
     55e:	4664      	mov	r4, ip
     560:	40a1      	lsls	r1, r4
     562:	468a      	mov	sl, r1

		r = r << 1;
     564:	1c10      	adds	r0, r2, #0
     566:	1c19      	adds	r1, r3, #0
     568:	1880      	adds	r0, r0, r2
     56a:	4159      	adcs	r1, r3
     56c:	1c02      	adds	r2, r0, #0
     56e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     570:	465d      	mov	r5, fp
     572:	464c      	mov	r4, r9
     574:	4225      	tst	r5, r4
     576:	d002      	beq.n	57e <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     578:	4642      	mov	r2, r8
     57a:	4302      	orrs	r2, r0
     57c:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     57e:	429f      	cmp	r7, r3
     580:	d80c      	bhi.n	59c <_sercom_get_async_baud_val+0xa4>
     582:	d101      	bne.n	588 <_sercom_get_async_baud_val+0x90>
     584:	4296      	cmp	r6, r2
     586:	d809      	bhi.n	59c <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     588:	1b92      	subs	r2, r2, r6
     58a:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     58c:	4650      	mov	r0, sl
     58e:	9d02      	ldr	r5, [sp, #8]
     590:	4328      	orrs	r0, r5
     592:	4649      	mov	r1, r9
     594:	9c03      	ldr	r4, [sp, #12]
     596:	4321      	orrs	r1, r4
     598:	9002      	str	r0, [sp, #8]
     59a:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     59c:	4665      	mov	r5, ip
     59e:	3d01      	subs	r5, #1
     5a0:	46ac      	mov	ip, r5
     5a2:	d2ce      	bcs.n	542 <_sercom_get_async_baud_val+0x4a>
     5a4:	9802      	ldr	r0, [sp, #8]
     5a6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5a8:	4b3c      	ldr	r3, [pc, #240]	; (69c <_sercom_get_async_baud_val+0x1a4>)
     5aa:	4a3b      	ldr	r2, [pc, #236]	; (698 <_sercom_get_async_baud_val+0x1a0>)
     5ac:	1a12      	subs	r2, r2, r0
     5ae:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     5b0:	0c12      	lsrs	r2, r2, #16
     5b2:	041b      	lsls	r3, r3, #16
     5b4:	431a      	orrs	r2, r3
     5b6:	e062      	b.n	67e <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     5b8:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5ba:	2b01      	cmp	r3, #1
     5bc:	d15f      	bne.n	67e <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     5be:	0f4f      	lsrs	r7, r1, #29
     5c0:	46b9      	mov	r9, r7
     5c2:	00cd      	lsls	r5, r1, #3
     5c4:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     5c6:	2100      	movs	r1, #0
     5c8:	1c32      	adds	r2, r6, #0
     5ca:	2300      	movs	r3, #0
     5cc:	4c34      	ldr	r4, [pc, #208]	; (6a0 <_sercom_get_async_baud_val+0x1a8>)
     5ce:	47a0      	blx	r4
     5d0:	1c06      	adds	r6, r0, #0
     5d2:	1c0f      	adds	r7, r1, #0
     5d4:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     5d6:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     5d8:	9602      	str	r6, [sp, #8]
     5da:	9703      	str	r7, [sp, #12]
     5dc:	469a      	mov	sl, r3
     5de:	4650      	mov	r0, sl
     5e0:	b2c0      	uxtb	r0, r0
     5e2:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     5e4:	2100      	movs	r1, #0
     5e6:	4688      	mov	r8, r1
     5e8:	2200      	movs	r2, #0
     5ea:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     5ec:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     5ee:	1c27      	adds	r7, r4, #0
     5f0:	3f20      	subs	r7, #32
     5f2:	d403      	bmi.n	5fc <_sercom_get_async_baud_val+0x104>
     5f4:	1c2e      	adds	r6, r5, #0
     5f6:	40be      	lsls	r6, r7
     5f8:	9601      	str	r6, [sp, #4]
     5fa:	e004      	b.n	606 <_sercom_get_async_baud_val+0x10e>
     5fc:	2020      	movs	r0, #32
     5fe:	1b07      	subs	r7, r0, r4
     600:	1c29      	adds	r1, r5, #0
     602:	40f9      	lsrs	r1, r7
     604:	9101      	str	r1, [sp, #4]
     606:	1c2e      	adds	r6, r5, #0
     608:	40a6      	lsls	r6, r4
     60a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     60c:	1c10      	adds	r0, r2, #0
     60e:	1c19      	adds	r1, r3, #0
     610:	1880      	adds	r0, r0, r2
     612:	4159      	adcs	r1, r3
     614:	1c02      	adds	r2, r0, #0
     616:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     618:	465f      	mov	r7, fp
     61a:	4037      	ands	r7, r6
     61c:	46bc      	mov	ip, r7
     61e:	9e01      	ldr	r6, [sp, #4]
     620:	464f      	mov	r7, r9
     622:	403e      	ands	r6, r7
     624:	4667      	mov	r7, ip
     626:	433e      	orrs	r6, r7
     628:	d002      	beq.n	630 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     62a:	1c2a      	adds	r2, r5, #0
     62c:	4302      	orrs	r2, r0
     62e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     630:	9803      	ldr	r0, [sp, #12]
     632:	4298      	cmp	r0, r3
     634:	d80b      	bhi.n	64e <_sercom_get_async_baud_val+0x156>
     636:	d102      	bne.n	63e <_sercom_get_async_baud_val+0x146>
     638:	9902      	ldr	r1, [sp, #8]
     63a:	4291      	cmp	r1, r2
     63c:	d807      	bhi.n	64e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     63e:	9e02      	ldr	r6, [sp, #8]
     640:	9f03      	ldr	r7, [sp, #12]
     642:	1b92      	subs	r2, r2, r6
     644:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     646:	4647      	mov	r7, r8
     648:	9800      	ldr	r0, [sp, #0]
     64a:	4307      	orrs	r7, r0
     64c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     64e:	3c01      	subs	r4, #1
     650:	d2cd      	bcs.n	5ee <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     652:	4641      	mov	r1, r8
     654:	4652      	mov	r2, sl
     656:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     658:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     65a:	4c12      	ldr	r4, [pc, #72]	; (6a4 <_sercom_get_async_baud_val+0x1ac>)
     65c:	42a3      	cmp	r3, r4
     65e:	d908      	bls.n	672 <_sercom_get_async_baud_val+0x17a>
     660:	9a05      	ldr	r2, [sp, #20]
     662:	3201      	adds	r2, #1
     664:	b2d2      	uxtb	r2, r2
     666:	9205      	str	r2, [sp, #20]
     668:	2601      	movs	r6, #1
     66a:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     66c:	4657      	mov	r7, sl
     66e:	2f08      	cmp	r7, #8
     670:	d1b5      	bne.n	5de <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     672:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     674:	9805      	ldr	r0, [sp, #20]
     676:	2808      	cmp	r0, #8
     678:	d004      	beq.n	684 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     67a:	0342      	lsls	r2, r0, #13
     67c:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     67e:	9c04      	ldr	r4, [sp, #16]
     680:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     682:	2400      	movs	r4, #0
}
     684:	1c20      	adds	r0, r4, #0
     686:	b007      	add	sp, #28
     688:	bc3c      	pop	{r2, r3, r4, r5}
     68a:	4690      	mov	r8, r2
     68c:	4699      	mov	r9, r3
     68e:	46a2      	mov	sl, r4
     690:	46ab      	mov	fp, r5
     692:	bdf0      	pop	{r4, r5, r6, r7, pc}
     694:	46c0      	nop			; (mov r8, r8)
     696:	46c0      	nop			; (mov r8, r8)
     698:	00000000 	.word	0x00000000
     69c:	00000001 	.word	0x00000001
     6a0:	0000496d 	.word	0x0000496d
     6a4:	00001fff 	.word	0x00001fff

000006a8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6a8:	b510      	push	{r4, lr}
     6aa:	b082      	sub	sp, #8
     6ac:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     6ae:	4b0f      	ldr	r3, [pc, #60]	; (6ec <sercom_set_gclk_generator+0x44>)
     6b0:	781b      	ldrb	r3, [r3, #0]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d001      	beq.n	6ba <sercom_set_gclk_generator+0x12>
     6b6:	2900      	cmp	r1, #0
     6b8:	d00d      	beq.n	6d6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     6ba:	a901      	add	r1, sp, #4
     6bc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6be:	2013      	movs	r0, #19
     6c0:	4b0b      	ldr	r3, [pc, #44]	; (6f0 <sercom_set_gclk_generator+0x48>)
     6c2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6c4:	2013      	movs	r0, #19
     6c6:	4b0b      	ldr	r3, [pc, #44]	; (6f4 <sercom_set_gclk_generator+0x4c>)
     6c8:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     6ca:	4b08      	ldr	r3, [pc, #32]	; (6ec <sercom_set_gclk_generator+0x44>)
     6cc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6ce:	2201      	movs	r2, #1
     6d0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     6d2:	2000      	movs	r0, #0
     6d4:	e007      	b.n	6e6 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     6d6:	4b05      	ldr	r3, [pc, #20]	; (6ec <sercom_set_gclk_generator+0x44>)
     6d8:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6da:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     6dc:	1b14      	subs	r4, r2, r4
     6de:	1e62      	subs	r2, r4, #1
     6e0:	4194      	sbcs	r4, r2
     6e2:	4264      	negs	r4, r4
     6e4:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6e6:	b002      	add	sp, #8
     6e8:	bd10      	pop	{r4, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	20000094 	.word	0x20000094
     6f0:	00001975 	.word	0x00001975
     6f4:	000018e9 	.word	0x000018e9

000006f8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     6f8:	4b44      	ldr	r3, [pc, #272]	; (80c <_sercom_get_default_pad+0x114>)
     6fa:	4298      	cmp	r0, r3
     6fc:	d033      	beq.n	766 <_sercom_get_default_pad+0x6e>
     6fe:	d806      	bhi.n	70e <_sercom_get_default_pad+0x16>
     700:	4b43      	ldr	r3, [pc, #268]	; (810 <_sercom_get_default_pad+0x118>)
     702:	4298      	cmp	r0, r3
     704:	d00d      	beq.n	722 <_sercom_get_default_pad+0x2a>
     706:	4b43      	ldr	r3, [pc, #268]	; (814 <_sercom_get_default_pad+0x11c>)
     708:	4298      	cmp	r0, r3
     70a:	d01b      	beq.n	744 <_sercom_get_default_pad+0x4c>
     70c:	e06f      	b.n	7ee <_sercom_get_default_pad+0xf6>
     70e:	4b42      	ldr	r3, [pc, #264]	; (818 <_sercom_get_default_pad+0x120>)
     710:	4298      	cmp	r0, r3
     712:	d04a      	beq.n	7aa <_sercom_get_default_pad+0xb2>
     714:	4b41      	ldr	r3, [pc, #260]	; (81c <_sercom_get_default_pad+0x124>)
     716:	4298      	cmp	r0, r3
     718:	d058      	beq.n	7cc <_sercom_get_default_pad+0xd4>
     71a:	4b41      	ldr	r3, [pc, #260]	; (820 <_sercom_get_default_pad+0x128>)
     71c:	4298      	cmp	r0, r3
     71e:	d166      	bne.n	7ee <_sercom_get_default_pad+0xf6>
     720:	e032      	b.n	788 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     722:	2901      	cmp	r1, #1
     724:	d065      	beq.n	7f2 <_sercom_get_default_pad+0xfa>
     726:	2900      	cmp	r1, #0
     728:	d004      	beq.n	734 <_sercom_get_default_pad+0x3c>
     72a:	2902      	cmp	r1, #2
     72c:	d006      	beq.n	73c <_sercom_get_default_pad+0x44>
     72e:	2903      	cmp	r1, #3
     730:	d006      	beq.n	740 <_sercom_get_default_pad+0x48>
     732:	e001      	b.n	738 <_sercom_get_default_pad+0x40>
     734:	483b      	ldr	r0, [pc, #236]	; (824 <_sercom_get_default_pad+0x12c>)
     736:	e067      	b.n	808 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     738:	2000      	movs	r0, #0
     73a:	e065      	b.n	808 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     73c:	483a      	ldr	r0, [pc, #232]	; (828 <_sercom_get_default_pad+0x130>)
     73e:	e063      	b.n	808 <_sercom_get_default_pad+0x110>
     740:	483a      	ldr	r0, [pc, #232]	; (82c <_sercom_get_default_pad+0x134>)
     742:	e061      	b.n	808 <_sercom_get_default_pad+0x110>
     744:	2901      	cmp	r1, #1
     746:	d056      	beq.n	7f6 <_sercom_get_default_pad+0xfe>
     748:	2900      	cmp	r1, #0
     74a:	d004      	beq.n	756 <_sercom_get_default_pad+0x5e>
     74c:	2902      	cmp	r1, #2
     74e:	d006      	beq.n	75e <_sercom_get_default_pad+0x66>
     750:	2903      	cmp	r1, #3
     752:	d006      	beq.n	762 <_sercom_get_default_pad+0x6a>
     754:	e001      	b.n	75a <_sercom_get_default_pad+0x62>
     756:	2003      	movs	r0, #3
     758:	e056      	b.n	808 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     75a:	2000      	movs	r0, #0
     75c:	e054      	b.n	808 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     75e:	4834      	ldr	r0, [pc, #208]	; (830 <_sercom_get_default_pad+0x138>)
     760:	e052      	b.n	808 <_sercom_get_default_pad+0x110>
     762:	4834      	ldr	r0, [pc, #208]	; (834 <_sercom_get_default_pad+0x13c>)
     764:	e050      	b.n	808 <_sercom_get_default_pad+0x110>
     766:	2901      	cmp	r1, #1
     768:	d047      	beq.n	7fa <_sercom_get_default_pad+0x102>
     76a:	2900      	cmp	r1, #0
     76c:	d004      	beq.n	778 <_sercom_get_default_pad+0x80>
     76e:	2902      	cmp	r1, #2
     770:	d006      	beq.n	780 <_sercom_get_default_pad+0x88>
     772:	2903      	cmp	r1, #3
     774:	d006      	beq.n	784 <_sercom_get_default_pad+0x8c>
     776:	e001      	b.n	77c <_sercom_get_default_pad+0x84>
     778:	482f      	ldr	r0, [pc, #188]	; (838 <_sercom_get_default_pad+0x140>)
     77a:	e045      	b.n	808 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     77c:	2000      	movs	r0, #0
     77e:	e043      	b.n	808 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     780:	482e      	ldr	r0, [pc, #184]	; (83c <_sercom_get_default_pad+0x144>)
     782:	e041      	b.n	808 <_sercom_get_default_pad+0x110>
     784:	482e      	ldr	r0, [pc, #184]	; (840 <_sercom_get_default_pad+0x148>)
     786:	e03f      	b.n	808 <_sercom_get_default_pad+0x110>
     788:	2901      	cmp	r1, #1
     78a:	d038      	beq.n	7fe <_sercom_get_default_pad+0x106>
     78c:	2900      	cmp	r1, #0
     78e:	d004      	beq.n	79a <_sercom_get_default_pad+0xa2>
     790:	2902      	cmp	r1, #2
     792:	d006      	beq.n	7a2 <_sercom_get_default_pad+0xaa>
     794:	2903      	cmp	r1, #3
     796:	d006      	beq.n	7a6 <_sercom_get_default_pad+0xae>
     798:	e001      	b.n	79e <_sercom_get_default_pad+0xa6>
     79a:	482a      	ldr	r0, [pc, #168]	; (844 <_sercom_get_default_pad+0x14c>)
     79c:	e034      	b.n	808 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     79e:	2000      	movs	r0, #0
     7a0:	e032      	b.n	808 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7a2:	4829      	ldr	r0, [pc, #164]	; (848 <_sercom_get_default_pad+0x150>)
     7a4:	e030      	b.n	808 <_sercom_get_default_pad+0x110>
     7a6:	4829      	ldr	r0, [pc, #164]	; (84c <_sercom_get_default_pad+0x154>)
     7a8:	e02e      	b.n	808 <_sercom_get_default_pad+0x110>
     7aa:	2901      	cmp	r1, #1
     7ac:	d029      	beq.n	802 <_sercom_get_default_pad+0x10a>
     7ae:	2900      	cmp	r1, #0
     7b0:	d004      	beq.n	7bc <_sercom_get_default_pad+0xc4>
     7b2:	2902      	cmp	r1, #2
     7b4:	d006      	beq.n	7c4 <_sercom_get_default_pad+0xcc>
     7b6:	2903      	cmp	r1, #3
     7b8:	d006      	beq.n	7c8 <_sercom_get_default_pad+0xd0>
     7ba:	e001      	b.n	7c0 <_sercom_get_default_pad+0xc8>
     7bc:	4824      	ldr	r0, [pc, #144]	; (850 <_sercom_get_default_pad+0x158>)
     7be:	e023      	b.n	808 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7c0:	2000      	movs	r0, #0
     7c2:	e021      	b.n	808 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7c4:	4823      	ldr	r0, [pc, #140]	; (854 <_sercom_get_default_pad+0x15c>)
     7c6:	e01f      	b.n	808 <_sercom_get_default_pad+0x110>
     7c8:	4823      	ldr	r0, [pc, #140]	; (858 <_sercom_get_default_pad+0x160>)
     7ca:	e01d      	b.n	808 <_sercom_get_default_pad+0x110>
     7cc:	2901      	cmp	r1, #1
     7ce:	d01a      	beq.n	806 <_sercom_get_default_pad+0x10e>
     7d0:	2900      	cmp	r1, #0
     7d2:	d004      	beq.n	7de <_sercom_get_default_pad+0xe6>
     7d4:	2902      	cmp	r1, #2
     7d6:	d006      	beq.n	7e6 <_sercom_get_default_pad+0xee>
     7d8:	2903      	cmp	r1, #3
     7da:	d006      	beq.n	7ea <_sercom_get_default_pad+0xf2>
     7dc:	e001      	b.n	7e2 <_sercom_get_default_pad+0xea>
     7de:	481f      	ldr	r0, [pc, #124]	; (85c <_sercom_get_default_pad+0x164>)
     7e0:	e012      	b.n	808 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7e2:	2000      	movs	r0, #0
     7e4:	e010      	b.n	808 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7e6:	481e      	ldr	r0, [pc, #120]	; (860 <_sercom_get_default_pad+0x168>)
     7e8:	e00e      	b.n	808 <_sercom_get_default_pad+0x110>
     7ea:	481e      	ldr	r0, [pc, #120]	; (864 <_sercom_get_default_pad+0x16c>)
     7ec:	e00c      	b.n	808 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7ee:	2000      	movs	r0, #0
     7f0:	e00a      	b.n	808 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7f2:	481d      	ldr	r0, [pc, #116]	; (868 <_sercom_get_default_pad+0x170>)
     7f4:	e008      	b.n	808 <_sercom_get_default_pad+0x110>
     7f6:	481d      	ldr	r0, [pc, #116]	; (86c <_sercom_get_default_pad+0x174>)
     7f8:	e006      	b.n	808 <_sercom_get_default_pad+0x110>
     7fa:	481d      	ldr	r0, [pc, #116]	; (870 <_sercom_get_default_pad+0x178>)
     7fc:	e004      	b.n	808 <_sercom_get_default_pad+0x110>
     7fe:	481d      	ldr	r0, [pc, #116]	; (874 <_sercom_get_default_pad+0x17c>)
     800:	e002      	b.n	808 <_sercom_get_default_pad+0x110>
     802:	481d      	ldr	r0, [pc, #116]	; (878 <_sercom_get_default_pad+0x180>)
     804:	e000      	b.n	808 <_sercom_get_default_pad+0x110>
     806:	481d      	ldr	r0, [pc, #116]	; (87c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     808:	4770      	bx	lr
     80a:	46c0      	nop			; (mov r8, r8)
     80c:	42001000 	.word	0x42001000
     810:	42000800 	.word	0x42000800
     814:	42000c00 	.word	0x42000c00
     818:	42001800 	.word	0x42001800
     81c:	42001c00 	.word	0x42001c00
     820:	42001400 	.word	0x42001400
     824:	00040003 	.word	0x00040003
     828:	00060003 	.word	0x00060003
     82c:	00070003 	.word	0x00070003
     830:	001e0003 	.word	0x001e0003
     834:	001f0003 	.word	0x001f0003
     838:	000c0002 	.word	0x000c0002
     83c:	000e0002 	.word	0x000e0002
     840:	000f0002 	.word	0x000f0002
     844:	00100003 	.word	0x00100003
     848:	00120003 	.word	0x00120003
     84c:	00130003 	.word	0x00130003
     850:	00530005 	.word	0x00530005
     854:	003e0005 	.word	0x003e0005
     858:	00520005 	.word	0x00520005
     85c:	00160003 	.word	0x00160003
     860:	00180003 	.word	0x00180003
     864:	00190003 	.word	0x00190003
     868:	00050003 	.word	0x00050003
     86c:	00010003 	.word	0x00010003
     870:	000d0002 	.word	0x000d0002
     874:	00110003 	.word	0x00110003
     878:	003f0005 	.word	0x003f0005
     87c:	00170003 	.word	0x00170003

00000880 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     880:	b570      	push	{r4, r5, r6, lr}
     882:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     884:	4a0c      	ldr	r2, [pc, #48]	; (8b8 <_sercom_get_sercom_inst_index+0x38>)
     886:	466b      	mov	r3, sp
     888:	ca70      	ldmia	r2!, {r4, r5, r6}
     88a:	c370      	stmia	r3!, {r4, r5, r6}
     88c:	ca32      	ldmia	r2!, {r1, r4, r5}
     88e:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     890:	9e00      	ldr	r6, [sp, #0]
     892:	4286      	cmp	r6, r0
     894:	d006      	beq.n	8a4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     896:	2301      	movs	r3, #1
     898:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     89a:	4669      	mov	r1, sp
     89c:	5852      	ldr	r2, [r2, r1]
     89e:	4282      	cmp	r2, r0
     8a0:	d103      	bne.n	8aa <_sercom_get_sercom_inst_index+0x2a>
     8a2:	e000      	b.n	8a6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8a4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     8a6:	b2d8      	uxtb	r0, r3
     8a8:	e003      	b.n	8b2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8aa:	3301      	adds	r3, #1
     8ac:	2b06      	cmp	r3, #6
     8ae:	d1f3      	bne.n	898 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     8b0:	2000      	movs	r0, #0
}
     8b2:	b006      	add	sp, #24
     8b4:	bd70      	pop	{r4, r5, r6, pc}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	000059b4 	.word	0x000059b4

000008bc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     8bc:	4770      	bx	lr
     8be:	46c0      	nop			; (mov r8, r8)

000008c0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <_sercom_set_handler+0x2c>)
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d10c      	bne.n	8e4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8ca:	4f09      	ldr	r7, [pc, #36]	; (8f0 <_sercom_set_handler+0x30>)
     8cc:	4e09      	ldr	r6, [pc, #36]	; (8f4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     8ce:	4d0a      	ldr	r5, [pc, #40]	; (8f8 <_sercom_set_handler+0x38>)
     8d0:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8d2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     8d4:	195a      	adds	r2, r3, r5
     8d6:	6014      	str	r4, [r2, #0]
     8d8:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8da:	2b18      	cmp	r3, #24
     8dc:	d1f9      	bne.n	8d2 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     8de:	2201      	movs	r2, #1
     8e0:	4b02      	ldr	r3, [pc, #8]	; (8ec <_sercom_set_handler+0x2c>)
     8e2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8e4:	0080      	lsls	r0, r0, #2
     8e6:	4b02      	ldr	r3, [pc, #8]	; (8f0 <_sercom_set_handler+0x30>)
     8e8:	50c1      	str	r1, [r0, r3]
}
     8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8ec:	20000098 	.word	0x20000098
     8f0:	2000009c 	.word	0x2000009c
     8f4:	000008bd 	.word	0x000008bd
     8f8:	200008bc 	.word	0x200008bc

000008fc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     8fc:	b510      	push	{r4, lr}
     8fe:	b082      	sub	sp, #8
     900:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     902:	4668      	mov	r0, sp
     904:	4905      	ldr	r1, [pc, #20]	; (91c <_sercom_get_interrupt_vector+0x20>)
     906:	2206      	movs	r2, #6
     908:	4b05      	ldr	r3, [pc, #20]	; (920 <_sercom_get_interrupt_vector+0x24>)
     90a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     90c:	1c20      	adds	r0, r4, #0
     90e:	4b05      	ldr	r3, [pc, #20]	; (924 <_sercom_get_interrupt_vector+0x28>)
     910:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     912:	466b      	mov	r3, sp
     914:	5618      	ldrsb	r0, [r3, r0]
}
     916:	b002      	add	sp, #8
     918:	bd10      	pop	{r4, pc}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	000059cc 	.word	0x000059cc
     920:	000049fd 	.word	0x000049fd
     924:	00000881 	.word	0x00000881

00000928 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     928:	b508      	push	{r3, lr}
     92a:	4b02      	ldr	r3, [pc, #8]	; (934 <SERCOM0_Handler+0xc>)
     92c:	681b      	ldr	r3, [r3, #0]
     92e:	2000      	movs	r0, #0
     930:	4798      	blx	r3
     932:	bd08      	pop	{r3, pc}
     934:	2000009c 	.word	0x2000009c

00000938 <SERCOM1_Handler>:
     938:	b508      	push	{r3, lr}
     93a:	4b02      	ldr	r3, [pc, #8]	; (944 <SERCOM1_Handler+0xc>)
     93c:	685b      	ldr	r3, [r3, #4]
     93e:	2001      	movs	r0, #1
     940:	4798      	blx	r3
     942:	bd08      	pop	{r3, pc}
     944:	2000009c 	.word	0x2000009c

00000948 <SERCOM2_Handler>:
     948:	b508      	push	{r3, lr}
     94a:	4b02      	ldr	r3, [pc, #8]	; (954 <SERCOM2_Handler+0xc>)
     94c:	689b      	ldr	r3, [r3, #8]
     94e:	2002      	movs	r0, #2
     950:	4798      	blx	r3
     952:	bd08      	pop	{r3, pc}
     954:	2000009c 	.word	0x2000009c

00000958 <SERCOM3_Handler>:
     958:	b508      	push	{r3, lr}
     95a:	4b02      	ldr	r3, [pc, #8]	; (964 <SERCOM3_Handler+0xc>)
     95c:	68db      	ldr	r3, [r3, #12]
     95e:	2003      	movs	r0, #3
     960:	4798      	blx	r3
     962:	bd08      	pop	{r3, pc}
     964:	2000009c 	.word	0x2000009c

00000968 <SERCOM4_Handler>:
     968:	b508      	push	{r3, lr}
     96a:	4b02      	ldr	r3, [pc, #8]	; (974 <SERCOM4_Handler+0xc>)
     96c:	691b      	ldr	r3, [r3, #16]
     96e:	2004      	movs	r0, #4
     970:	4798      	blx	r3
     972:	bd08      	pop	{r3, pc}
     974:	2000009c 	.word	0x2000009c

00000978 <SERCOM5_Handler>:
     978:	b508      	push	{r3, lr}
     97a:	4b02      	ldr	r3, [pc, #8]	; (984 <SERCOM5_Handler+0xc>)
     97c:	695b      	ldr	r3, [r3, #20]
     97e:	2005      	movs	r0, #5
     980:	4798      	blx	r3
     982:	bd08      	pop	{r3, pc}
     984:	2000009c 	.word	0x2000009c

00000988 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     988:	b5f0      	push	{r4, r5, r6, r7, lr}
     98a:	465f      	mov	r7, fp
     98c:	4656      	mov	r6, sl
     98e:	464d      	mov	r5, r9
     990:	4644      	mov	r4, r8
     992:	b4f0      	push	{r4, r5, r6, r7}
     994:	b089      	sub	sp, #36	; 0x24
     996:	1c07      	adds	r7, r0, #0
     998:	1c0d      	adds	r5, r1, #0
     99a:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     99c:	6039      	str	r1, [r7, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     99e:	680b      	ldr	r3, [r1, #0]
     9a0:	0798      	lsls	r0, r3, #30
     9a2:	d400      	bmi.n	9a6 <spi_init+0x1e>
     9a4:	e08d      	b.n	ac2 <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     9a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
     9a8:	9103      	str	r1, [sp, #12]
     9aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     9ac:	9204      	str	r2, [sp, #16]
     9ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
     9b0:	9305      	str	r3, [sp, #20]
     9b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
     9b4:	9006      	str	r0, [sp, #24]
     9b6:	2600      	movs	r6, #0

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9b8:	46b1      	mov	r9, r6
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     9ba:	221f      	movs	r2, #31
     9bc:	4690      	mov	r8, r2
     9be:	b2f1      	uxtb	r1, r6
     9c0:	00b3      	lsls	r3, r6, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9c2:	aa03      	add	r2, sp, #12
     9c4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     9c6:	2800      	cmp	r0, #0
     9c8:	d102      	bne.n	9d0 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9ca:	1c28      	adds	r0, r5, #0
     9cc:	4b8f      	ldr	r3, [pc, #572]	; (c0c <spi_init+0x284>)
     9ce:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     9d0:	1c41      	adds	r1, r0, #1
     9d2:	d029      	beq.n	a28 <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     9d4:	0402      	lsls	r2, r0, #16
     9d6:	0c12      	lsrs	r2, r2, #16
     9d8:	4694      	mov	ip, r2
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     9da:	0c03      	lsrs	r3, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9dc:	b2da      	uxtb	r2, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9de:	4649      	mov	r1, r9
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9e0:	0618      	lsls	r0, r3, #24
     9e2:	d403      	bmi.n	9ec <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     9e4:	0951      	lsrs	r1, r2, #5
     9e6:	01c9      	lsls	r1, r1, #7
     9e8:	4b89      	ldr	r3, [pc, #548]	; (c10 <spi_init+0x288>)
     9ea:	18c9      	adds	r1, r1, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     9ec:	4640      	mov	r0, r8
     9ee:	4010      	ands	r0, r2

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9f0:	180b      	adds	r3, r1, r0
     9f2:	3340      	adds	r3, #64	; 0x40
     9f4:	781b      	ldrb	r3, [r3, #0]
     9f6:	469a      	mov	sl, r3
		return SYSTEM_PINMUX_GPIO;
     9f8:	2380      	movs	r3, #128	; 0x80
     9fa:	469b      	mov	fp, r3
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     9fc:	4653      	mov	r3, sl
     9fe:	07db      	lsls	r3, r3, #31
     a00:	d50c      	bpl.n	a1c <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     a02:	0840      	lsrs	r0, r0, #1
     a04:	1809      	adds	r1, r1, r0
     a06:	3130      	adds	r1, #48	; 0x30
     a08:	780b      	ldrb	r3, [r1, #0]
     a0a:	b2db      	uxtb	r3, r3

	if (pin_index & 1) {
     a0c:	07d0      	lsls	r0, r2, #31
     a0e:	d502      	bpl.n	a16 <spi_init+0x8e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     a10:	091b      	lsrs	r3, r3, #4
     a12:	469b      	mov	fp, r3
     a14:	e002      	b.n	a1c <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     a16:	220f      	movs	r2, #15
     a18:	4013      	ands	r3, r2
     a1a:	469b      	mov	fp, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     a1c:	45dc      	cmp	ip, fp
     a1e:	d003      	beq.n	a28 <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     a20:	2300      	movs	r3, #0
     a22:	603b      	str	r3, [r7, #0]
			return STATUS_ERR_DENIED;
     a24:	201c      	movs	r0, #28
     a26:	e0ea      	b.n	bfe <spi_init+0x276>
     a28:	3601      	adds	r6, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a2a:	2e04      	cmp	r6, #4
     a2c:	d1c7      	bne.n	9be <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     a2e:	2013      	movs	r0, #19
     a30:	4b78      	ldr	r3, [pc, #480]	; (c14 <spi_init+0x28c>)
     a32:	4798      	blx	r3
     a34:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a36:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     a38:	2600      	movs	r6, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     a3a:	2b01      	cmp	r3, #1
     a3c:	d111      	bne.n	a62 <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
     a3e:	69a0      	ldr	r0, [r4, #24]
     a40:	aa02      	add	r2, sp, #8
     a42:	4b75      	ldr	r3, [pc, #468]	; (c18 <spi_init+0x290>)
     a44:	4798      	blx	r3
     a46:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     a48:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     a4a:	2b00      	cmp	r3, #0
     a4c:	d000      	beq.n	a50 <spi_init+0xc8>
     a4e:	e0d6      	b.n	bfe <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a50:	7b2b      	ldrb	r3, [r5, #12]
     a52:	b2db      	uxtb	r3, r3
     a54:	aa02      	add	r2, sp, #8
     a56:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     a58:	201c      	movs	r0, #28
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     a5a:	429a      	cmp	r2, r3
     a5c:	d000      	beq.n	a60 <spi_init+0xd8>
     a5e:	e0ce      	b.n	bfe <spi_init+0x276>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     a60:	260c      	movs	r6, #12
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     a62:	68a2      	ldr	r2, [r4, #8]
     a64:	6861      	ldr	r1, [r4, #4]
     a66:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     a68:	68e3      	ldr	r3, [r4, #12]
     a6a:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     a6c:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
     a6e:	7c23      	ldrb	r3, [r4, #16]

	if (config->run_in_standby) {
     a70:	7c61      	ldrb	r1, [r4, #17]
     a72:	2900      	cmp	r1, #0
     a74:	d001      	beq.n	a7a <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     a76:	2180      	movs	r1, #128	; 0x80
     a78:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     a7a:	7ca1      	ldrb	r1, [r4, #18]
     a7c:	2900      	cmp	r1, #0
     a7e:	d002      	beq.n	a86 <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a80:	2180      	movs	r1, #128	; 0x80
     a82:	0289      	lsls	r1, r1, #10
     a84:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     a86:	7ce1      	ldrb	r1, [r4, #19]
     a88:	2900      	cmp	r1, #0
     a8a:	d002      	beq.n	a92 <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     a8c:	2180      	movs	r1, #128	; 0x80
     a8e:	0089      	lsls	r1, r1, #2
     a90:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     a92:	7d21      	ldrb	r1, [r4, #20]
     a94:	2900      	cmp	r1, #0
     a96:	d002      	beq.n	a9e <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     a98:	2180      	movs	r1, #128	; 0x80
     a9a:	0189      	lsls	r1, r1, #6
     a9c:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     a9e:	6829      	ldr	r1, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     aa0:	2002      	movs	r0, #2
     aa2:	4302      	orrs	r2, r0

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     aa4:	428a      	cmp	r2, r1
     aa6:	d108      	bne.n	aba <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
     aa8:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     aaa:	429a      	cmp	r2, r3
     aac:	d105      	bne.n	aba <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     aae:	7823      	ldrb	r3, [r4, #0]
     ab0:	717b      	strb	r3, [r7, #5]
		module->character_size = config->character_size;
     ab2:	7c23      	ldrb	r3, [r4, #16]
     ab4:	71bb      	strb	r3, [r7, #6]
		return STATUS_OK;
     ab6:	2000      	movs	r0, #0
     ab8:	e0a1      	b.n	bfe <spi_init+0x276>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     aba:	2300      	movs	r3, #0
     abc:	603b      	str	r3, [r7, #0]

	return STATUS_ERR_DENIED;
     abe:	201c      	movs	r0, #28
     ac0:	e09d      	b.n	bfe <spi_init+0x276>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ac2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     ac4:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ac6:	07d9      	lsls	r1, r3, #31
     ac8:	d500      	bpl.n	acc <spi_init+0x144>
     aca:	e098      	b.n	bfe <spi_init+0x276>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     acc:	1c28      	adds	r0, r5, #0
     ace:	4b53      	ldr	r3, [pc, #332]	; (c1c <spi_init+0x294>)
     ad0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ad2:	4b53      	ldr	r3, [pc, #332]	; (c20 <spi_init+0x298>)
     ad4:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ad6:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ad8:	2601      	movs	r6, #1
     ada:	4096      	lsls	r6, r2
     adc:	1c32      	adds	r2, r6, #0
     ade:	430a      	orrs	r2, r1
     ae0:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     ae2:	a907      	add	r1, sp, #28
     ae4:	2624      	movs	r6, #36	; 0x24
     ae6:	5da3      	ldrb	r3, [r4, r6]
     ae8:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     aea:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     aec:	b2c0      	uxtb	r0, r0
     aee:	4680      	mov	r8, r0
     af0:	4b4c      	ldr	r3, [pc, #304]	; (c24 <spi_init+0x29c>)
     af2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     af4:	4640      	mov	r0, r8
     af6:	4b4c      	ldr	r3, [pc, #304]	; (c28 <spi_init+0x2a0>)
     af8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     afa:	5da0      	ldrb	r0, [r4, r6]
     afc:	2100      	movs	r1, #0
     afe:	4b4b      	ldr	r3, [pc, #300]	; (c2c <spi_init+0x2a4>)
     b00:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     b02:	7823      	ldrb	r3, [r4, #0]
     b04:	2b01      	cmp	r3, #1
     b06:	d103      	bne.n	b10 <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     b08:	682a      	ldr	r2, [r5, #0]
     b0a:	230c      	movs	r3, #12
     b0c:	4313      	orrs	r3, r2
     b0e:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b10:	683e      	ldr	r6, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b12:	ab02      	add	r3, sp, #8
     b14:	2280      	movs	r2, #128	; 0x80
     b16:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b18:	2200      	movs	r2, #0
     b1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     b1c:	2101      	movs	r1, #1
     b1e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     b20:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     b22:	7823      	ldrb	r3, [r4, #0]
     b24:	2b00      	cmp	r3, #0
     b26:	d101      	bne.n	b2c <spi_init+0x1a4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b28:	ab02      	add	r3, sp, #8
     b2a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     b2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     b2e:	9203      	str	r2, [sp, #12]
     b30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     b32:	9304      	str	r3, [sp, #16]
     b34:	6b20      	ldr	r0, [r4, #48]	; 0x30
     b36:	9005      	str	r0, [sp, #20]
     b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
     b3a:	9106      	str	r1, [sp, #24]
     b3c:	2500      	movs	r5, #0
     b3e:	b2e9      	uxtb	r1, r5
     b40:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b42:	aa03      	add	r2, sp, #12
     b44:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     b46:	2800      	cmp	r0, #0
     b48:	d102      	bne.n	b50 <spi_init+0x1c8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b4a:	1c30      	adds	r0, r6, #0
     b4c:	4a2f      	ldr	r2, [pc, #188]	; (c0c <spi_init+0x284>)
     b4e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     b50:	1c43      	adds	r3, r0, #1
     b52:	d006      	beq.n	b62 <spi_init+0x1da>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b54:	4669      	mov	r1, sp
     b56:	7208      	strb	r0, [r1, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b58:	0c00      	lsrs	r0, r0, #16
     b5a:	b2c0      	uxtb	r0, r0
     b5c:	a902      	add	r1, sp, #8
     b5e:	4a34      	ldr	r2, [pc, #208]	; (c30 <spi_init+0x2a8>)
     b60:	4790      	blx	r2
     b62:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     b64:	2d04      	cmp	r5, #4
     b66:	d1ea      	bne.n	b3e <spi_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     b68:	7823      	ldrb	r3, [r4, #0]
     b6a:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     b6c:	7c23      	ldrb	r3, [r4, #16]
     b6e:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     b70:	7ca3      	ldrb	r3, [r4, #18]
     b72:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     b74:	7d23      	ldrb	r3, [r4, #20]
     b76:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     b78:	2200      	movs	r2, #0
     b7a:	466b      	mov	r3, sp
     b7c:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     b7e:	7823      	ldrb	r3, [r4, #0]
     b80:	2b01      	cmp	r3, #1
     b82:	d114      	bne.n	bae <spi_init+0x226>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b84:	6838      	ldr	r0, [r7, #0]
     b86:	4b25      	ldr	r3, [pc, #148]	; (c1c <spi_init+0x294>)
     b88:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b8a:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b8c:	b2c0      	uxtb	r0, r0
     b8e:	4b21      	ldr	r3, [pc, #132]	; (c14 <spi_init+0x28c>)
     b90:	4798      	blx	r3
     b92:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     b94:	69a0      	ldr	r0, [r4, #24]
     b96:	466a      	mov	r2, sp
     b98:	3206      	adds	r2, #6
     b9a:	4b1f      	ldr	r3, [pc, #124]	; (c18 <spi_init+0x290>)
     b9c:	4798      	blx	r3
     b9e:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     ba0:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     ba2:	2b00      	cmp	r3, #0
     ba4:	d12b      	bne.n	bfe <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     ba6:	466b      	mov	r3, sp
     ba8:	3306      	adds	r3, #6
     baa:	781b      	ldrb	r3, [r3, #0]
     bac:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     bae:	68a2      	ldr	r2, [r4, #8]
     bb0:	6863      	ldr	r3, [r4, #4]
     bb2:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     bb4:	68e0      	ldr	r0, [r4, #12]
     bb6:	4302      	orrs	r2, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
     bb8:	7c23      	ldrb	r3, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     bba:	7c61      	ldrb	r1, [r4, #17]
     bbc:	2900      	cmp	r1, #0
     bbe:	d103      	bne.n	bc8 <spi_init+0x240>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     bc0:	491c      	ldr	r1, [pc, #112]	; (c34 <spi_init+0x2ac>)
     bc2:	7889      	ldrb	r1, [r1, #2]
     bc4:	0788      	lsls	r0, r1, #30
     bc6:	d501      	bpl.n	bcc <spi_init+0x244>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     bc8:	2180      	movs	r1, #128	; 0x80
     bca:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     bcc:	7ca1      	ldrb	r1, [r4, #18]
     bce:	2900      	cmp	r1, #0
     bd0:	d002      	beq.n	bd8 <spi_init+0x250>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     bd2:	2180      	movs	r1, #128	; 0x80
     bd4:	0289      	lsls	r1, r1, #10
     bd6:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     bd8:	7ce1      	ldrb	r1, [r4, #19]
     bda:	2900      	cmp	r1, #0
     bdc:	d002      	beq.n	be4 <spi_init+0x25c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     bde:	2180      	movs	r1, #128	; 0x80
     be0:	0089      	lsls	r1, r1, #2
     be2:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     be4:	7d21      	ldrb	r1, [r4, #20]
     be6:	2900      	cmp	r1, #0
     be8:	d002      	beq.n	bf0 <spi_init+0x268>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     bea:	2180      	movs	r1, #128	; 0x80
     bec:	0189      	lsls	r1, r1, #6
     bee:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     bf0:	6831      	ldr	r1, [r6, #0]
     bf2:	430a      	orrs	r2, r1
     bf4:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     bf6:	6872      	ldr	r2, [r6, #4]
     bf8:	4313      	orrs	r3, r2
     bfa:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     bfc:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     bfe:	b009      	add	sp, #36	; 0x24
     c00:	bc3c      	pop	{r2, r3, r4, r5}
     c02:	4690      	mov	r8, r2
     c04:	4699      	mov	r9, r3
     c06:	46a2      	mov	sl, r4
     c08:	46ab      	mov	fp, r5
     c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0c:	000006f9 	.word	0x000006f9
     c10:	41004400 	.word	0x41004400
     c14:	00001991 	.word	0x00001991
     c18:	000004d1 	.word	0x000004d1
     c1c:	00000881 	.word	0x00000881
     c20:	40000400 	.word	0x40000400
     c24:	00001975 	.word	0x00001975
     c28:	000018e9 	.word	0x000018e9
     c2c:	000006a9 	.word	0x000006a9
     c30:	00001a51 	.word	0x00001a51
     c34:	41002000 	.word	0x41002000

00000c38 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     c38:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c3a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     c3c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     c3e:	2c01      	cmp	r4, #1
     c40:	d16c      	bne.n	d1c <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c42:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     c44:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     c46:	2c00      	cmp	r4, #0
     c48:	d168      	bne.n	d1c <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     c4a:	2a00      	cmp	r2, #0
     c4c:	d057      	beq.n	cfe <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     c4e:	784b      	ldrb	r3, [r1, #1]
     c50:	2b00      	cmp	r3, #0
     c52:	d044      	beq.n	cde <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c54:	6802      	ldr	r2, [r0, #0]
     c56:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     c58:	07dc      	lsls	r4, r3, #31
     c5a:	d40f      	bmi.n	c7c <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     c5c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c5e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c60:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c62:	2900      	cmp	r1, #0
     c64:	d103      	bne.n	c6e <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     c66:	095a      	lsrs	r2, r3, #5
     c68:	01d2      	lsls	r2, r2, #7
     c6a:	492d      	ldr	r1, [pc, #180]	; (d20 <spi_select_slave+0xe8>)
     c6c:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c6e:	211f      	movs	r1, #31
     c70:	400b      	ands	r3, r1
     c72:	2101      	movs	r1, #1
     c74:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c76:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     c78:	2305      	movs	r3, #5
     c7a:	e04f      	b.n	d1c <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     c7c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c7e:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     c80:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     c82:	2c00      	cmp	r4, #0
     c84:	d103      	bne.n	c8e <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     c86:	095a      	lsrs	r2, r3, #5
     c88:	01d2      	lsls	r2, r2, #7
     c8a:	4c25      	ldr	r4, [pc, #148]	; (d20 <spi_select_slave+0xe8>)
     c8c:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c8e:	241f      	movs	r4, #31
     c90:	4023      	ands	r3, r4
     c92:	2401      	movs	r4, #1
     c94:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     c96:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     c98:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c9a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c9c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     c9e:	07d4      	lsls	r4, r2, #31
     ca0:	d500      	bpl.n	ca4 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ca2:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     ca4:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     ca6:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     ca8:	2a00      	cmp	r2, #0
     caa:	d137      	bne.n	d1c <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cac:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cae:	2104      	movs	r1, #4
     cb0:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     cb2:	420b      	tst	r3, r1
     cb4:	d0fc      	beq.n	cb0 <spi_select_slave+0x78>
     cb6:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cb8:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     cba:	074c      	lsls	r4, r1, #29
     cbc:	d52e      	bpl.n	d1c <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cbe:	8b53      	ldrh	r3, [r2, #26]
     cc0:	0759      	lsls	r1, r3, #29
     cc2:	d503      	bpl.n	ccc <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     cc4:	8b51      	ldrh	r1, [r2, #26]
     cc6:	2304      	movs	r3, #4
     cc8:	430b      	orrs	r3, r1
     cca:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ccc:	7983      	ldrb	r3, [r0, #6]
     cce:	2b01      	cmp	r3, #1
     cd0:	d102      	bne.n	cd8 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     cd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
     cd4:	2300      	movs	r3, #0
     cd6:	e021      	b.n	d1c <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     cd8:	6a93      	ldr	r3, [r2, #40]	; 0x28
     cda:	2300      	movs	r3, #0
     cdc:	e01e      	b.n	d1c <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     cde:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ce0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ce2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ce4:	2900      	cmp	r1, #0
     ce6:	d103      	bne.n	cf0 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     ce8:	095a      	lsrs	r2, r3, #5
     cea:	01d2      	lsls	r2, r2, #7
     cec:	4c0c      	ldr	r4, [pc, #48]	; (d20 <spi_select_slave+0xe8>)
     cee:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cf0:	211f      	movs	r1, #31
     cf2:	400b      	ands	r3, r1
     cf4:	2101      	movs	r1, #1
     cf6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     cf8:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     cfa:	2300      	movs	r3, #0
     cfc:	e00e      	b.n	d1c <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     cfe:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d00:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d02:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d04:	2900      	cmp	r1, #0
     d06:	d103      	bne.n	d10 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     d08:	095a      	lsrs	r2, r3, #5
     d0a:	01d2      	lsls	r2, r2, #7
     d0c:	4904      	ldr	r1, [pc, #16]	; (d20 <spi_select_slave+0xe8>)
     d0e:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d10:	211f      	movs	r1, #31
     d12:	400b      	ands	r3, r1
     d14:	2101      	movs	r1, #1
     d16:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d18:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     d1a:	2300      	movs	r3, #0
}
     d1c:	1c18      	adds	r0, r3, #0
     d1e:	bd10      	pop	{r4, pc}
     d20:	41004400 	.word	0x41004400

00000d24 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d24:	b5f0      	push	{r4, r5, r6, r7, lr}
     d26:	465f      	mov	r7, fp
     d28:	4656      	mov	r6, sl
     d2a:	464d      	mov	r5, r9
     d2c:	4644      	mov	r4, r8
     d2e:	b4f0      	push	{r4, r5, r6, r7}
     d30:	b091      	sub	sp, #68	; 0x44
     d32:	1c05      	adds	r5, r0, #0
     d34:	1c0c      	adds	r4, r1, #0
     d36:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d38:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d3a:	1c08      	adds	r0, r1, #0
     d3c:	4bad      	ldr	r3, [pc, #692]	; (ff4 <usart_init+0x2d0>)
     d3e:	4798      	blx	r3
     d40:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d42:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d44:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d46:	07d9      	lsls	r1, r3, #31
     d48:	d500      	bpl.n	d4c <usart_init+0x28>
     d4a:	e14b      	b.n	fe4 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d4c:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     d4e:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d50:	079f      	lsls	r7, r3, #30
     d52:	d500      	bpl.n	d56 <usart_init+0x32>
     d54:	e146      	b.n	fe4 <usart_init+0x2c0>
     d56:	4ba8      	ldr	r3, [pc, #672]	; (ff8 <usart_init+0x2d4>)
     d58:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d5a:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d5c:	2701      	movs	r7, #1
     d5e:	408f      	lsls	r7, r1
     d60:	1c39      	adds	r1, r7, #0
     d62:	4301      	orrs	r1, r0
     d64:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     d66:	a90f      	add	r1, sp, #60	; 0x3c
     d68:	272d      	movs	r7, #45	; 0x2d
     d6a:	5df3      	ldrb	r3, [r6, r7]
     d6c:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d6e:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d70:	b2d2      	uxtb	r2, r2
     d72:	4690      	mov	r8, r2
     d74:	1c10      	adds	r0, r2, #0
     d76:	4ba1      	ldr	r3, [pc, #644]	; (ffc <usart_init+0x2d8>)
     d78:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d7a:	4640      	mov	r0, r8
     d7c:	4ba0      	ldr	r3, [pc, #640]	; (1000 <usart_init+0x2dc>)
     d7e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d80:	5df0      	ldrb	r0, [r6, r7]
     d82:	2100      	movs	r1, #0
     d84:	4b9f      	ldr	r3, [pc, #636]	; (1004 <usart_init+0x2e0>)
     d86:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     d88:	7af3      	ldrb	r3, [r6, #11]
     d8a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     d8c:	2324      	movs	r3, #36	; 0x24
     d8e:	5cf3      	ldrb	r3, [r6, r3]
     d90:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d92:	2325      	movs	r3, #37	; 0x25
     d94:	5cf3      	ldrb	r3, [r6, r3]
     d96:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     d98:	7ef3      	ldrb	r3, [r6, #27]
     d9a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     d9c:	7f33      	ldrb	r3, [r6, #28]
     d9e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     da0:	6829      	ldr	r1, [r5, #0]
     da2:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     da4:	1c08      	adds	r0, r1, #0
     da6:	4b93      	ldr	r3, [pc, #588]	; (ff4 <usart_init+0x2d0>)
     da8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     daa:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     dac:	2200      	movs	r2, #0
     dae:	466b      	mov	r3, sp
     db0:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     db2:	8a32      	ldrh	r2, [r6, #16]
     db4:	9202      	str	r2, [sp, #8]
     db6:	2380      	movs	r3, #128	; 0x80
     db8:	01db      	lsls	r3, r3, #7
     dba:	429a      	cmp	r2, r3
     dbc:	d021      	beq.n	e02 <usart_init+0xde>
     dbe:	2380      	movs	r3, #128	; 0x80
     dc0:	01db      	lsls	r3, r3, #7
     dc2:	429a      	cmp	r2, r3
     dc4:	d804      	bhi.n	dd0 <usart_init+0xac>
     dc6:	2380      	movs	r3, #128	; 0x80
     dc8:	019b      	lsls	r3, r3, #6
     dca:	429a      	cmp	r2, r3
     dcc:	d011      	beq.n	df2 <usart_init+0xce>
     dce:	e008      	b.n	de2 <usart_init+0xbe>
     dd0:	23c0      	movs	r3, #192	; 0xc0
     dd2:	01db      	lsls	r3, r3, #7
     dd4:	9f02      	ldr	r7, [sp, #8]
     dd6:	429f      	cmp	r7, r3
     dd8:	d00f      	beq.n	dfa <usart_init+0xd6>
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	021b      	lsls	r3, r3, #8
     dde:	429f      	cmp	r7, r3
     de0:	d003      	beq.n	dea <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     de2:	2710      	movs	r7, #16
     de4:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     de6:	2700      	movs	r7, #0
     de8:	e00e      	b.n	e08 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     dea:	2703      	movs	r7, #3
     dec:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     dee:	2700      	movs	r7, #0
     df0:	e00a      	b.n	e08 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     df2:	2710      	movs	r7, #16
     df4:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     df6:	2701      	movs	r7, #1
     df8:	e006      	b.n	e08 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     dfa:	2708      	movs	r7, #8
     dfc:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     dfe:	2701      	movs	r7, #1
     e00:	e002      	b.n	e08 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     e02:	2708      	movs	r7, #8
     e04:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e06:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e08:	6831      	ldr	r1, [r6, #0]
     e0a:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     e0c:	68f2      	ldr	r2, [r6, #12]
     e0e:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e10:	6973      	ldr	r3, [r6, #20]
     e12:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e14:	7e31      	ldrb	r1, [r6, #24]
     e16:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e18:	2326      	movs	r3, #38	; 0x26
     e1a:	5cf3      	ldrb	r3, [r6, r3]
     e1c:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     e1e:	6873      	ldr	r3, [r6, #4]
     e20:	2b00      	cmp	r3, #0
     e22:	d013      	beq.n	e4c <usart_init+0x128>
     e24:	2280      	movs	r2, #128	; 0x80
     e26:	0552      	lsls	r2, r2, #21
     e28:	4293      	cmp	r3, r2
     e2a:	d12e      	bne.n	e8a <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     e2c:	2327      	movs	r3, #39	; 0x27
     e2e:	5cf3      	ldrb	r3, [r6, r3]
     e30:	2b00      	cmp	r3, #0
     e32:	d12e      	bne.n	e92 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     e34:	6a37      	ldr	r7, [r6, #32]
     e36:	b2c0      	uxtb	r0, r0
     e38:	4b73      	ldr	r3, [pc, #460]	; (1008 <usart_init+0x2e4>)
     e3a:	4798      	blx	r3
     e3c:	1c01      	adds	r1, r0, #0
     e3e:	1c38      	adds	r0, r7, #0
     e40:	466a      	mov	r2, sp
     e42:	3226      	adds	r2, #38	; 0x26
     e44:	4b71      	ldr	r3, [pc, #452]	; (100c <usart_init+0x2e8>)
     e46:	4798      	blx	r3
     e48:	1c03      	adds	r3, r0, #0
     e4a:	e01f      	b.n	e8c <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     e4c:	2327      	movs	r3, #39	; 0x27
     e4e:	5cf3      	ldrb	r3, [r6, r3]
     e50:	2b00      	cmp	r3, #0
     e52:	d00a      	beq.n	e6a <usart_init+0x146>
				status_code =
     e54:	9a06      	ldr	r2, [sp, #24]
     e56:	9200      	str	r2, [sp, #0]
     e58:	6a30      	ldr	r0, [r6, #32]
     e5a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     e5c:	466a      	mov	r2, sp
     e5e:	3226      	adds	r2, #38	; 0x26
     e60:	1c3b      	adds	r3, r7, #0
     e62:	4f6b      	ldr	r7, [pc, #428]	; (1010 <usart_init+0x2ec>)
     e64:	47b8      	blx	r7
     e66:	1c03      	adds	r3, r0, #0
     e68:	e010      	b.n	e8c <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     e6a:	6a31      	ldr	r1, [r6, #32]
     e6c:	9107      	str	r1, [sp, #28]
     e6e:	b2c0      	uxtb	r0, r0
     e70:	4b65      	ldr	r3, [pc, #404]	; (1008 <usart_init+0x2e4>)
     e72:	4798      	blx	r3
     e74:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     e76:	9a06      	ldr	r2, [sp, #24]
     e78:	9200      	str	r2, [sp, #0]
     e7a:	9807      	ldr	r0, [sp, #28]
     e7c:	466a      	mov	r2, sp
     e7e:	3226      	adds	r2, #38	; 0x26
     e80:	1c3b      	adds	r3, r7, #0
     e82:	4f63      	ldr	r7, [pc, #396]	; (1010 <usart_init+0x2ec>)
     e84:	47b8      	blx	r7
     e86:	1c03      	adds	r3, r0, #0
     e88:	e000      	b.n	e8c <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     e8a:	2300      	movs	r3, #0
     e8c:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     e8e:	d000      	beq.n	e92 <usart_init+0x16e>
     e90:	e0a8      	b.n	fe4 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     e92:	7e73      	ldrb	r3, [r6, #25]
     e94:	2b00      	cmp	r3, #0
     e96:	d002      	beq.n	e9e <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     e98:	7eb3      	ldrb	r3, [r6, #26]
     e9a:	4641      	mov	r1, r8
     e9c:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     e9e:	682a      	ldr	r2, [r5, #0]
     ea0:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     ea2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     ea4:	2b00      	cmp	r3, #0
     ea6:	d1fc      	bne.n	ea2 <usart_init+0x17e>
     ea8:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     eaa:	466b      	mov	r3, sp
     eac:	3326      	adds	r3, #38	; 0x26
     eae:	881b      	ldrh	r3, [r3, #0]
     eb0:	4642      	mov	r2, r8
     eb2:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     eb4:	464b      	mov	r3, r9
     eb6:	9f03      	ldr	r7, [sp, #12]
     eb8:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     eba:	9f04      	ldr	r7, [sp, #16]
     ebc:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ebe:	6871      	ldr	r1, [r6, #4]
     ec0:	430b      	orrs	r3, r1
		config->sample_rate |
     ec2:	9f02      	ldr	r7, [sp, #8]
     ec4:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ec6:	4652      	mov	r2, sl
     ec8:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     eca:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ecc:	4659      	mov	r1, fp
     ece:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     ed0:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     ed2:	2327      	movs	r3, #39	; 0x27
     ed4:	5cf3      	ldrb	r3, [r6, r3]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d101      	bne.n	ede <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     eda:	2304      	movs	r3, #4
     edc:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ede:	7e71      	ldrb	r1, [r6, #25]
     ee0:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ee2:	7f33      	ldrb	r3, [r6, #28]
     ee4:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     ee6:	4319      	orrs	r1, r3
     ee8:	7af2      	ldrb	r2, [r6, #11]
     eea:	7ab3      	ldrb	r3, [r6, #10]
     eec:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     eee:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ef0:	7f73      	ldrb	r3, [r6, #29]
     ef2:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ef4:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ef6:	2324      	movs	r3, #36	; 0x24
     ef8:	5cf3      	ldrb	r3, [r6, r3]
     efa:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     efc:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     efe:	2325      	movs	r3, #37	; 0x25
     f00:	5cf3      	ldrb	r3, [r6, r3]
     f02:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     f04:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     f06:	8933      	ldrh	r3, [r6, #8]
     f08:	2bff      	cmp	r3, #255	; 0xff
     f0a:	d00b      	beq.n	f24 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f0c:	7ef2      	ldrb	r2, [r6, #27]
     f0e:	2a00      	cmp	r2, #0
     f10:	d003      	beq.n	f1a <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     f12:	22a0      	movs	r2, #160	; 0xa0
     f14:	04d2      	lsls	r2, r2, #19
     f16:	4317      	orrs	r7, r2
     f18:	e002      	b.n	f20 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f1a:	2280      	movs	r2, #128	; 0x80
     f1c:	0452      	lsls	r2, r2, #17
     f1e:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     f20:	4319      	orrs	r1, r3
     f22:	e005      	b.n	f30 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     f24:	7ef3      	ldrb	r3, [r6, #27]
     f26:	2b00      	cmp	r3, #0
     f28:	d002      	beq.n	f30 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     f2a:	2380      	movs	r3, #128	; 0x80
     f2c:	04db      	lsls	r3, r3, #19
     f2e:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     f30:	232c      	movs	r3, #44	; 0x2c
     f32:	5cf3      	ldrb	r3, [r6, r3]
     f34:	2b00      	cmp	r3, #0
     f36:	d103      	bne.n	f40 <usart_init+0x21c>
     f38:	4b36      	ldr	r3, [pc, #216]	; (1014 <usart_init+0x2f0>)
     f3a:	789b      	ldrb	r3, [r3, #2]
     f3c:	079a      	lsls	r2, r3, #30
     f3e:	d501      	bpl.n	f44 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f40:	2380      	movs	r3, #128	; 0x80
     f42:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f44:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f46:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     f48:	2b00      	cmp	r3, #0
     f4a:	d1fc      	bne.n	f46 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f4c:	4643      	mov	r3, r8
     f4e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f50:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f52:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     f54:	2b00      	cmp	r3, #0
     f56:	d1fc      	bne.n	f52 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     f58:	4641      	mov	r1, r8
     f5a:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f5c:	ab0e      	add	r3, sp, #56	; 0x38
     f5e:	2280      	movs	r2, #128	; 0x80
     f60:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f62:	2200      	movs	r2, #0
     f64:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     f66:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f68:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     f6a:	6b32      	ldr	r2, [r6, #48]	; 0x30
     f6c:	920a      	str	r2, [sp, #40]	; 0x28
     f6e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     f70:	930b      	str	r3, [sp, #44]	; 0x2c
     f72:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     f74:	970c      	str	r7, [sp, #48]	; 0x30
     f76:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     f78:	960d      	str	r6, [sp, #52]	; 0x34
     f7a:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f7c:	ae0e      	add	r6, sp, #56	; 0x38
     f7e:	b2f9      	uxtb	r1, r7
     f80:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f82:	aa0a      	add	r2, sp, #40	; 0x28
     f84:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     f86:	2800      	cmp	r0, #0
     f88:	d102      	bne.n	f90 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f8a:	1c20      	adds	r0, r4, #0
     f8c:	4a22      	ldr	r2, [pc, #136]	; (1018 <usart_init+0x2f4>)
     f8e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     f90:	1c43      	adds	r3, r0, #1
     f92:	d005      	beq.n	fa0 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f94:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f96:	0c00      	lsrs	r0, r0, #16
     f98:	b2c0      	uxtb	r0, r0
     f9a:	1c31      	adds	r1, r6, #0
     f9c:	4a1f      	ldr	r2, [pc, #124]	; (101c <usart_init+0x2f8>)
     f9e:	4790      	blx	r2
     fa0:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     fa2:	2f04      	cmp	r7, #4
     fa4:	d1eb      	bne.n	f7e <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     fa6:	2300      	movs	r3, #0
     fa8:	60eb      	str	r3, [r5, #12]
     faa:	612b      	str	r3, [r5, #16]
     fac:	616b      	str	r3, [r5, #20]
     fae:	61ab      	str	r3, [r5, #24]
     fb0:	61eb      	str	r3, [r5, #28]
     fb2:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     fb4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     fb6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     fb8:	2200      	movs	r2, #0
     fba:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     fbc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     fbe:	2330      	movs	r3, #48	; 0x30
     fc0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     fc2:	2331      	movs	r3, #49	; 0x31
     fc4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     fc6:	2332      	movs	r3, #50	; 0x32
     fc8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     fca:	2333      	movs	r3, #51	; 0x33
     fcc:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     fce:	6828      	ldr	r0, [r5, #0]
     fd0:	4b08      	ldr	r3, [pc, #32]	; (ff4 <usart_init+0x2d0>)
     fd2:	4798      	blx	r3
     fd4:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     fd6:	4912      	ldr	r1, [pc, #72]	; (1020 <usart_init+0x2fc>)
     fd8:	4b12      	ldr	r3, [pc, #72]	; (1024 <usart_init+0x300>)
     fda:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     fdc:	00a4      	lsls	r4, r4, #2
     fde:	4b12      	ldr	r3, [pc, #72]	; (1028 <usart_init+0x304>)
     fe0:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     fe2:	2000      	movs	r0, #0
}
     fe4:	b011      	add	sp, #68	; 0x44
     fe6:	bc3c      	pop	{r2, r3, r4, r5}
     fe8:	4690      	mov	r8, r2
     fea:	4699      	mov	r9, r3
     fec:	46a2      	mov	sl, r4
     fee:	46ab      	mov	fp, r5
     ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	00000881 	.word	0x00000881
     ff8:	40000400 	.word	0x40000400
     ffc:	00001975 	.word	0x00001975
    1000:	000018e9 	.word	0x000018e9
    1004:	000006a9 	.word	0x000006a9
    1008:	00001991 	.word	0x00001991
    100c:	000004d1 	.word	0x000004d1
    1010:	000004f9 	.word	0x000004f9
    1014:	41002000 	.word	0x41002000
    1018:	000006f9 	.word	0x000006f9
    101c:	00001a51 	.word	0x00001a51
    1020:	000010d1 	.word	0x000010d1
    1024:	000008c1 	.word	0x000008c1
    1028:	200008bc 	.word	0x200008bc

0000102c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    102c:	b510      	push	{r4, lr}
    102e:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1030:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1032:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    1034:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1036:	2c00      	cmp	r4, #0
    1038:	d00d      	beq.n	1056 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    103a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    103c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    103e:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1040:	2a00      	cmp	r2, #0
    1042:	d108      	bne.n	1056 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1044:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1046:	2a00      	cmp	r2, #0
    1048:	d1fc      	bne.n	1044 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    104a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    104c:	2102      	movs	r1, #2
    104e:	7e1a      	ldrb	r2, [r3, #24]
    1050:	420a      	tst	r2, r1
    1052:	d0fc      	beq.n	104e <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1054:	2000      	movs	r0, #0
}
    1056:	bd10      	pop	{r4, pc}

00001058 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1058:	b510      	push	{r4, lr}
    105a:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    105c:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    105e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1060:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1062:	2a00      	cmp	r2, #0
    1064:	d033      	beq.n	10ce <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1066:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1068:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    106a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    106c:	2b00      	cmp	r3, #0
    106e:	d12e      	bne.n	10ce <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1070:	7e23      	ldrb	r3, [r4, #24]
    1072:	075a      	lsls	r2, r3, #29
    1074:	d52b      	bpl.n	10ce <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1076:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1078:	2b00      	cmp	r3, #0
    107a:	d1fc      	bne.n	1076 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    107c:	8b63      	ldrh	r3, [r4, #26]
    107e:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1080:	069a      	lsls	r2, r3, #26
    1082:	d021      	beq.n	10c8 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1084:	079a      	lsls	r2, r3, #30
    1086:	d503      	bpl.n	1090 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1088:	2302      	movs	r3, #2
    108a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    108c:	201a      	movs	r0, #26
    108e:	e01e      	b.n	10ce <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1090:	075a      	lsls	r2, r3, #29
    1092:	d503      	bpl.n	109c <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1094:	2304      	movs	r3, #4
    1096:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    1098:	201e      	movs	r0, #30
    109a:	e018      	b.n	10ce <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    109c:	07da      	lsls	r2, r3, #31
    109e:	d503      	bpl.n	10a8 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    10a0:	2301      	movs	r3, #1
    10a2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    10a4:	2013      	movs	r0, #19
    10a6:	e012      	b.n	10ce <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    10a8:	06da      	lsls	r2, r3, #27
    10aa:	d505      	bpl.n	10b8 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    10ac:	8b62      	ldrh	r2, [r4, #26]
    10ae:	2310      	movs	r3, #16
    10b0:	4313      	orrs	r3, r2
    10b2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    10b4:	2042      	movs	r0, #66	; 0x42
    10b6:	e00a      	b.n	10ce <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    10b8:	069a      	lsls	r2, r3, #26
    10ba:	d505      	bpl.n	10c8 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    10bc:	8b62      	ldrh	r2, [r4, #26]
    10be:	2320      	movs	r3, #32
    10c0:	4313      	orrs	r3, r2
    10c2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    10c4:	2041      	movs	r0, #65	; 0x41
    10c6:	e002      	b.n	10ce <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    10c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    10ca:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    10cc:	2000      	movs	r0, #0
}
    10ce:	bd10      	pop	{r4, pc}

000010d0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    10d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    10d2:	0080      	lsls	r0, r0, #2
    10d4:	4b64      	ldr	r3, [pc, #400]	; (1268 <_usart_interrupt_handler+0x198>)
    10d6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    10d8:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10da:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    10dc:	2b00      	cmp	r3, #0
    10de:	d1fc      	bne.n	10da <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    10e0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    10e2:	7da6      	ldrb	r6, [r4, #22]
    10e4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    10e6:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    10e8:	5ceb      	ldrb	r3, [r5, r3]
    10ea:	2230      	movs	r2, #48	; 0x30
    10ec:	5caf      	ldrb	r7, [r5, r2]
    10ee:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    10f0:	07f1      	lsls	r1, r6, #31
    10f2:	d520      	bpl.n	1136 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    10f4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    10f6:	b29b      	uxth	r3, r3
    10f8:	2b00      	cmp	r3, #0
    10fa:	d01a      	beq.n	1132 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    10fe:	781a      	ldrb	r2, [r3, #0]
    1100:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1102:	1c59      	adds	r1, r3, #1
    1104:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1106:	7969      	ldrb	r1, [r5, #5]
    1108:	2901      	cmp	r1, #1
    110a:	d104      	bne.n	1116 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    110c:	7859      	ldrb	r1, [r3, #1]
    110e:	0209      	lsls	r1, r1, #8
    1110:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1112:	3302      	adds	r3, #2
    1114:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1116:	05d3      	lsls	r3, r2, #23
    1118:	0ddb      	lsrs	r3, r3, #23
    111a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    111c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    111e:	3b01      	subs	r3, #1
    1120:	b29b      	uxth	r3, r3
    1122:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1124:	2b00      	cmp	r3, #0
    1126:	d106      	bne.n	1136 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1128:	2301      	movs	r3, #1
    112a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    112c:	2302      	movs	r3, #2
    112e:	75a3      	strb	r3, [r4, #22]
    1130:	e001      	b.n	1136 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1132:	2301      	movs	r3, #1
    1134:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1136:	07b2      	lsls	r2, r6, #30
    1138:	d509      	bpl.n	114e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    113a:	2302      	movs	r3, #2
    113c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    113e:	2200      	movs	r2, #0
    1140:	2333      	movs	r3, #51	; 0x33
    1142:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1144:	07fb      	lsls	r3, r7, #31
    1146:	d502      	bpl.n	114e <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1148:	1c28      	adds	r0, r5, #0
    114a:	68e9      	ldr	r1, [r5, #12]
    114c:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    114e:	0772      	lsls	r2, r6, #29
    1150:	d56a      	bpl.n	1228 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    1152:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1154:	b29b      	uxth	r3, r3
    1156:	2b00      	cmp	r3, #0
    1158:	d064      	beq.n	1224 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    115a:	8b63      	ldrh	r3, [r4, #26]
    115c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    115e:	0719      	lsls	r1, r3, #28
    1160:	d402      	bmi.n	1168 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1162:	223f      	movs	r2, #63	; 0x3f
    1164:	4013      	ands	r3, r2
    1166:	e001      	b.n	116c <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1168:	2237      	movs	r2, #55	; 0x37
    116a:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    116c:	2b00      	cmp	r3, #0
    116e:	d037      	beq.n	11e0 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1170:	079a      	lsls	r2, r3, #30
    1172:	d507      	bpl.n	1184 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1174:	221a      	movs	r2, #26
    1176:	2332      	movs	r3, #50	; 0x32
    1178:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    117a:	8b62      	ldrh	r2, [r4, #26]
    117c:	2302      	movs	r3, #2
    117e:	4313      	orrs	r3, r2
    1180:	8363      	strh	r3, [r4, #26]
    1182:	e027      	b.n	11d4 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1184:	0759      	lsls	r1, r3, #29
    1186:	d507      	bpl.n	1198 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1188:	221e      	movs	r2, #30
    118a:	2332      	movs	r3, #50	; 0x32
    118c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    118e:	8b62      	ldrh	r2, [r4, #26]
    1190:	2304      	movs	r3, #4
    1192:	4313      	orrs	r3, r2
    1194:	8363      	strh	r3, [r4, #26]
    1196:	e01d      	b.n	11d4 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1198:	07da      	lsls	r2, r3, #31
    119a:	d507      	bpl.n	11ac <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    119c:	2213      	movs	r2, #19
    119e:	2332      	movs	r3, #50	; 0x32
    11a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    11a2:	8b62      	ldrh	r2, [r4, #26]
    11a4:	2301      	movs	r3, #1
    11a6:	4313      	orrs	r3, r2
    11a8:	8363      	strh	r3, [r4, #26]
    11aa:	e013      	b.n	11d4 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    11ac:	06d9      	lsls	r1, r3, #27
    11ae:	d507      	bpl.n	11c0 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    11b0:	2242      	movs	r2, #66	; 0x42
    11b2:	2332      	movs	r3, #50	; 0x32
    11b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    11b6:	8b62      	ldrh	r2, [r4, #26]
    11b8:	2310      	movs	r3, #16
    11ba:	4313      	orrs	r3, r2
    11bc:	8363      	strh	r3, [r4, #26]
    11be:	e009      	b.n	11d4 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    11c0:	2220      	movs	r2, #32
    11c2:	421a      	tst	r2, r3
    11c4:	d006      	beq.n	11d4 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    11c6:	2241      	movs	r2, #65	; 0x41
    11c8:	2332      	movs	r3, #50	; 0x32
    11ca:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    11cc:	8b62      	ldrh	r2, [r4, #26]
    11ce:	2320      	movs	r3, #32
    11d0:	4313      	orrs	r3, r2
    11d2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    11d4:	077a      	lsls	r2, r7, #29
    11d6:	d527      	bpl.n	1228 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    11d8:	1c28      	adds	r0, r5, #0
    11da:	696b      	ldr	r3, [r5, #20]
    11dc:	4798      	blx	r3
    11de:	e023      	b.n	1228 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    11e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    11e2:	05d2      	lsls	r2, r2, #23
    11e4:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    11e6:	b2d3      	uxtb	r3, r2
    11e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    11ea:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    11ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    11ee:	1c59      	adds	r1, r3, #1
    11f0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11f2:	7969      	ldrb	r1, [r5, #5]
    11f4:	2901      	cmp	r1, #1
    11f6:	d104      	bne.n	1202 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    11f8:	0a12      	lsrs	r2, r2, #8
    11fa:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    11fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    11fe:	3301      	adds	r3, #1
    1200:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1202:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1204:	3b01      	subs	r3, #1
    1206:	b29b      	uxth	r3, r3
    1208:	85ab      	strh	r3, [r5, #44]	; 0x2c
    120a:	2b00      	cmp	r3, #0
    120c:	d10c      	bne.n	1228 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    120e:	2304      	movs	r3, #4
    1210:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1212:	2200      	movs	r2, #0
    1214:	2332      	movs	r3, #50	; 0x32
    1216:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1218:	07ba      	lsls	r2, r7, #30
    121a:	d505      	bpl.n	1228 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    121c:	1c28      	adds	r0, r5, #0
    121e:	692b      	ldr	r3, [r5, #16]
    1220:	4798      	blx	r3
    1222:	e001      	b.n	1228 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1224:	2304      	movs	r3, #4
    1226:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1228:	06f1      	lsls	r1, r6, #27
    122a:	d507      	bpl.n	123c <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    122c:	2310      	movs	r3, #16
    122e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1230:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1232:	06fa      	lsls	r2, r7, #27
    1234:	d502      	bpl.n	123c <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1236:	1c28      	adds	r0, r5, #0
    1238:	69eb      	ldr	r3, [r5, #28]
    123a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    123c:	06b1      	lsls	r1, r6, #26
    123e:	d507      	bpl.n	1250 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1240:	2320      	movs	r3, #32
    1242:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1244:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1246:	073a      	lsls	r2, r7, #28
    1248:	d502      	bpl.n	1250 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    124a:	1c28      	adds	r0, r5, #0
    124c:	69ab      	ldr	r3, [r5, #24]
    124e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1250:	0731      	lsls	r1, r6, #28
    1252:	d507      	bpl.n	1264 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1254:	2308      	movs	r3, #8
    1256:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1258:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    125a:	06ba      	lsls	r2, r7, #26
    125c:	d502      	bpl.n	1264 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    125e:	6a2b      	ldr	r3, [r5, #32]
    1260:	1c28      	adds	r0, r5, #0
    1262:	4798      	blx	r3
		}
	}
#endif
}
    1264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	200008bc 	.word	0x200008bc

0000126c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    126c:	b508      	push	{r3, lr}
	switch (clock_source) {
    126e:	2808      	cmp	r0, #8
    1270:	d834      	bhi.n	12dc <system_clock_source_get_hz+0x70>
    1272:	0080      	lsls	r0, r0, #2
    1274:	4b1b      	ldr	r3, [pc, #108]	; (12e4 <system_clock_source_get_hz+0x78>)
    1276:	581b      	ldr	r3, [r3, r0]
    1278:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    127a:	2080      	movs	r0, #128	; 0x80
    127c:	0200      	lsls	r0, r0, #8
    127e:	e030      	b.n	12e2 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1280:	4b19      	ldr	r3, [pc, #100]	; (12e8 <system_clock_source_get_hz+0x7c>)
    1282:	6918      	ldr	r0, [r3, #16]
    1284:	e02d      	b.n	12e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1286:	4b19      	ldr	r3, [pc, #100]	; (12ec <system_clock_source_get_hz+0x80>)
    1288:	6a18      	ldr	r0, [r3, #32]
    128a:	0580      	lsls	r0, r0, #22
    128c:	0f80      	lsrs	r0, r0, #30
    128e:	4b18      	ldr	r3, [pc, #96]	; (12f0 <system_clock_source_get_hz+0x84>)
    1290:	40c3      	lsrs	r3, r0
    1292:	1c18      	adds	r0, r3, #0
    1294:	e025      	b.n	12e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1296:	4b14      	ldr	r3, [pc, #80]	; (12e8 <system_clock_source_get_hz+0x7c>)
    1298:	6958      	ldr	r0, [r3, #20]
    129a:	e022      	b.n	12e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    129c:	4b12      	ldr	r3, [pc, #72]	; (12e8 <system_clock_source_get_hz+0x7c>)
    129e:	681b      	ldr	r3, [r3, #0]
    12a0:	2002      	movs	r0, #2
    12a2:	4018      	ands	r0, r3
    12a4:	d01d      	beq.n	12e2 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12a6:	4911      	ldr	r1, [pc, #68]	; (12ec <system_clock_source_get_hz+0x80>)
    12a8:	2210      	movs	r2, #16
    12aa:	68cb      	ldr	r3, [r1, #12]
    12ac:	421a      	tst	r2, r3
    12ae:	d0fc      	beq.n	12aa <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    12b0:	4b0d      	ldr	r3, [pc, #52]	; (12e8 <system_clock_source_get_hz+0x7c>)
    12b2:	681b      	ldr	r3, [r3, #0]
    12b4:	075a      	lsls	r2, r3, #29
    12b6:	d513      	bpl.n	12e0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12b8:	2000      	movs	r0, #0
    12ba:	4b0e      	ldr	r3, [pc, #56]	; (12f4 <system_clock_source_get_hz+0x88>)
    12bc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    12be:	4b0a      	ldr	r3, [pc, #40]	; (12e8 <system_clock_source_get_hz+0x7c>)
    12c0:	689b      	ldr	r3, [r3, #8]
    12c2:	041b      	lsls	r3, r3, #16
    12c4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12c6:	4358      	muls	r0, r3
    12c8:	e00b      	b.n	12e2 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12ca:	2350      	movs	r3, #80	; 0x50
    12cc:	4a07      	ldr	r2, [pc, #28]	; (12ec <system_clock_source_get_hz+0x80>)
    12ce:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    12d0:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12d2:	075a      	lsls	r2, r3, #29
    12d4:	d505      	bpl.n	12e2 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    12d6:	4b04      	ldr	r3, [pc, #16]	; (12e8 <system_clock_source_get_hz+0x7c>)
    12d8:	68d8      	ldr	r0, [r3, #12]
    12da:	e002      	b.n	12e2 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    12dc:	2000      	movs	r0, #0
    12de:	e000      	b.n	12e2 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    12e0:	4805      	ldr	r0, [pc, #20]	; (12f8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    12e2:	bd08      	pop	{r3, pc}
    12e4:	000059d4 	.word	0x000059d4
    12e8:	200000b4 	.word	0x200000b4
    12ec:	40000800 	.word	0x40000800
    12f0:	007a1200 	.word	0x007a1200
    12f4:	00001991 	.word	0x00001991
    12f8:	02dc6c00 	.word	0x02dc6c00

000012fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    12fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    12fe:	4b0c      	ldr	r3, [pc, #48]	; (1330 <system_clock_source_osc8m_set_config+0x34>)
    1300:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1302:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1304:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1306:	7840      	ldrb	r0, [r0, #1]
    1308:	2201      	movs	r2, #1
    130a:	4010      	ands	r0, r2
    130c:	0180      	lsls	r0, r0, #6
    130e:	2640      	movs	r6, #64	; 0x40
    1310:	43b4      	bics	r4, r6
    1312:	4304      	orrs	r4, r0
    1314:	402a      	ands	r2, r5
    1316:	01d0      	lsls	r0, r2, #7
    1318:	2280      	movs	r2, #128	; 0x80
    131a:	4394      	bics	r4, r2
    131c:	1c22      	adds	r2, r4, #0
    131e:	4302      	orrs	r2, r0
    1320:	2003      	movs	r0, #3
    1322:	4001      	ands	r1, r0
    1324:	0209      	lsls	r1, r1, #8
    1326:	4803      	ldr	r0, [pc, #12]	; (1334 <system_clock_source_osc8m_set_config+0x38>)
    1328:	4002      	ands	r2, r0
    132a:	430a      	orrs	r2, r1
    132c:	621a      	str	r2, [r3, #32]
}
    132e:	bd70      	pop	{r4, r5, r6, pc}
    1330:	40000800 	.word	0x40000800
    1334:	fffffcff 	.word	0xfffffcff

00001338 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	464f      	mov	r7, r9
    133c:	4646      	mov	r6, r8
    133e:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1340:	4a19      	ldr	r2, [pc, #100]	; (13a8 <system_clock_source_osc32k_set_config+0x70>)
    1342:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1344:	7841      	ldrb	r1, [r0, #1]
    1346:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1348:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    134a:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    134c:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    134e:	7943      	ldrb	r3, [r0, #5]
    1350:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
    1352:	7880      	ldrb	r0, [r0, #2]
    1354:	2301      	movs	r3, #1
    1356:	4018      	ands	r0, r3
    1358:	0080      	lsls	r0, r0, #2
    135a:	2104      	movs	r1, #4
    135c:	438c      	bics	r4, r1
    135e:	4304      	orrs	r4, r0
    1360:	4660      	mov	r0, ip
    1362:	4018      	ands	r0, r3
    1364:	00c0      	lsls	r0, r0, #3
    1366:	2108      	movs	r1, #8
    1368:	438c      	bics	r4, r1
    136a:	4304      	orrs	r4, r0
    136c:	1c18      	adds	r0, r3, #0
    136e:	4038      	ands	r0, r7
    1370:	0180      	lsls	r0, r0, #6
    1372:	2740      	movs	r7, #64	; 0x40
    1374:	43bc      	bics	r4, r7
    1376:	4304      	orrs	r4, r0
    1378:	1c18      	adds	r0, r3, #0
    137a:	4030      	ands	r0, r6
    137c:	01c0      	lsls	r0, r0, #7
    137e:	2680      	movs	r6, #128	; 0x80
    1380:	43b4      	bics	r4, r6
    1382:	4304      	orrs	r4, r0
    1384:	2007      	movs	r0, #7
    1386:	4028      	ands	r0, r5
    1388:	0200      	lsls	r0, r0, #8
    138a:	4d08      	ldr	r5, [pc, #32]	; (13ac <system_clock_source_osc32k_set_config+0x74>)
    138c:	402c      	ands	r4, r5
    138e:	4304      	orrs	r4, r0
    1390:	4649      	mov	r1, r9
    1392:	400b      	ands	r3, r1
    1394:	0319      	lsls	r1, r3, #12
    1396:	4806      	ldr	r0, [pc, #24]	; (13b0 <system_clock_source_osc32k_set_config+0x78>)
    1398:	1c23      	adds	r3, r4, #0
    139a:	4003      	ands	r3, r0
    139c:	430b      	orrs	r3, r1
    139e:	6193      	str	r3, [r2, #24]
}
    13a0:	bc0c      	pop	{r2, r3}
    13a2:	4690      	mov	r8, r2
    13a4:	4699      	mov	r9, r3
    13a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a8:	40000800 	.word	0x40000800
    13ac:	fffff8ff 	.word	0xfffff8ff
    13b0:	ffffefff 	.word	0xffffefff

000013b4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    13b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b6:	465f      	mov	r7, fp
    13b8:	4656      	mov	r6, sl
    13ba:	464d      	mov	r5, r9
    13bc:	4644      	mov	r4, r8
    13be:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    13c0:	4a25      	ldr	r2, [pc, #148]	; (1458 <system_clock_source_xosc32k_set_config+0xa4>)
    13c2:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    13c4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    13c6:	7803      	ldrb	r3, [r0, #0]
    13c8:	4259      	negs	r1, r3
    13ca:	4159      	adcs	r1, r3
    13cc:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    13ce:	7883      	ldrb	r3, [r0, #2]
    13d0:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    13d2:	78c1      	ldrb	r1, [r0, #3]
    13d4:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    13d6:	7903      	ldrb	r3, [r0, #4]
    13d8:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    13da:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    13dc:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    13de:	7b81      	ldrb	r1, [r0, #14]
    13e0:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    13e2:	6880      	ldr	r0, [r0, #8]
    13e4:	4b1d      	ldr	r3, [pc, #116]	; (145c <system_clock_source_xosc32k_set_config+0xa8>)
    13e6:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    13e8:	2301      	movs	r3, #1
    13ea:	4651      	mov	r1, sl
    13ec:	0088      	lsls	r0, r1, #2
    13ee:	2104      	movs	r1, #4
    13f0:	438c      	bics	r4, r1
    13f2:	4304      	orrs	r4, r0
    13f4:	4648      	mov	r0, r9
    13f6:	4018      	ands	r0, r3
    13f8:	00c0      	lsls	r0, r0, #3
    13fa:	2108      	movs	r1, #8
    13fc:	438c      	bics	r4, r1
    13fe:	4304      	orrs	r4, r0
    1400:	4640      	mov	r0, r8
    1402:	4018      	ands	r0, r3
    1404:	0100      	lsls	r0, r0, #4
    1406:	2110      	movs	r1, #16
    1408:	438c      	bics	r4, r1
    140a:	4304      	orrs	r4, r0
    140c:	4660      	mov	r0, ip
    140e:	4018      	ands	r0, r3
    1410:	0140      	lsls	r0, r0, #5
    1412:	2120      	movs	r1, #32
    1414:	438c      	bics	r4, r1
    1416:	4304      	orrs	r4, r0
    1418:	1c18      	adds	r0, r3, #0
    141a:	4038      	ands	r0, r7
    141c:	0180      	lsls	r0, r0, #6
    141e:	2740      	movs	r7, #64	; 0x40
    1420:	43bc      	bics	r4, r7
    1422:	4304      	orrs	r4, r0
    1424:	1c18      	adds	r0, r3, #0
    1426:	4030      	ands	r0, r6
    1428:	01c0      	lsls	r0, r0, #7
    142a:	2680      	movs	r6, #128	; 0x80
    142c:	43b4      	bics	r4, r6
    142e:	4304      	orrs	r4, r0
    1430:	2007      	movs	r0, #7
    1432:	4028      	ands	r0, r5
    1434:	0200      	lsls	r0, r0, #8
    1436:	4d0a      	ldr	r5, [pc, #40]	; (1460 <system_clock_source_xosc32k_set_config+0xac>)
    1438:	402c      	ands	r4, r5
    143a:	4304      	orrs	r4, r0
    143c:	4659      	mov	r1, fp
    143e:	400b      	ands	r3, r1
    1440:	0319      	lsls	r1, r3, #12
    1442:	4808      	ldr	r0, [pc, #32]	; (1464 <system_clock_source_xosc32k_set_config+0xb0>)
    1444:	1c23      	adds	r3, r4, #0
    1446:	4003      	ands	r3, r0
    1448:	430b      	orrs	r3, r1
    144a:	8293      	strh	r3, [r2, #20]
}
    144c:	bc3c      	pop	{r2, r3, r4, r5}
    144e:	4690      	mov	r8, r2
    1450:	4699      	mov	r9, r3
    1452:	46a2      	mov	sl, r4
    1454:	46ab      	mov	fp, r5
    1456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1458:	40000800 	.word	0x40000800
    145c:	200000b4 	.word	0x200000b4
    1460:	fffff8ff 	.word	0xfffff8ff
    1464:	ffffefff 	.word	0xffffefff

00001468 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1468:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    146a:	7a02      	ldrb	r2, [r0, #8]
    146c:	0692      	lsls	r2, r2, #26
    146e:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1470:	8943      	ldrh	r3, [r0, #10]
    1472:	059b      	lsls	r3, r3, #22
    1474:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1476:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1478:	4b15      	ldr	r3, [pc, #84]	; (14d0 <system_clock_source_dfll_set_config+0x68>)
    147a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    147c:	8881      	ldrh	r1, [r0, #4]
    147e:	8842      	ldrh	r2, [r0, #2]
    1480:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1482:	79c4      	ldrb	r4, [r0, #7]
    1484:	7982      	ldrb	r2, [r0, #6]
    1486:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1488:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    148a:	7841      	ldrb	r1, [r0, #1]
    148c:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    148e:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1490:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1492:	7803      	ldrb	r3, [r0, #0]
    1494:	2b04      	cmp	r3, #4
    1496:	d10f      	bne.n	14b8 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1498:	7b02      	ldrb	r2, [r0, #12]
    149a:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    149c:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    149e:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    14a0:	89c3      	ldrh	r3, [r0, #14]
    14a2:	041b      	lsls	r3, r3, #16
    14a4:	490b      	ldr	r1, [pc, #44]	; (14d4 <system_clock_source_dfll_set_config+0x6c>)
    14a6:	400b      	ands	r3, r1
    14a8:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    14aa:	4b09      	ldr	r3, [pc, #36]	; (14d0 <system_clock_source_dfll_set_config+0x68>)
    14ac:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    14ae:	6819      	ldr	r1, [r3, #0]
    14b0:	2204      	movs	r2, #4
    14b2:	430a      	orrs	r2, r1
    14b4:	601a      	str	r2, [r3, #0]
    14b6:	e009      	b.n	14cc <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    14b8:	2b20      	cmp	r3, #32
    14ba:	d107      	bne.n	14cc <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    14bc:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    14be:	4b04      	ldr	r3, [pc, #16]	; (14d0 <system_clock_source_dfll_set_config+0x68>)
    14c0:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    14c2:	6819      	ldr	r1, [r3, #0]
    14c4:	2284      	movs	r2, #132	; 0x84
    14c6:	00d2      	lsls	r2, r2, #3
    14c8:	430a      	orrs	r2, r1
    14ca:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    14cc:	bd10      	pop	{r4, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	200000b4 	.word	0x200000b4
    14d4:	03ff0000 	.word	0x03ff0000

000014d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    14d8:	2808      	cmp	r0, #8
    14da:	d843      	bhi.n	1564 <system_clock_source_enable+0x8c>
    14dc:	0080      	lsls	r0, r0, #2
    14de:	4b22      	ldr	r3, [pc, #136]	; (1568 <system_clock_source_enable+0x90>)
    14e0:	581b      	ldr	r3, [r3, r0]
    14e2:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    14e4:	2000      	movs	r0, #0
    14e6:	e03e      	b.n	1566 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    14e8:	4b20      	ldr	r3, [pc, #128]	; (156c <system_clock_source_enable+0x94>)
    14ea:	6a19      	ldr	r1, [r3, #32]
    14ec:	2202      	movs	r2, #2
    14ee:	430a      	orrs	r2, r1
    14f0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    14f2:	2000      	movs	r0, #0
    14f4:	e037      	b.n	1566 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14f6:	4b1d      	ldr	r3, [pc, #116]	; (156c <system_clock_source_enable+0x94>)
    14f8:	6999      	ldr	r1, [r3, #24]
    14fa:	2202      	movs	r2, #2
    14fc:	430a      	orrs	r2, r1
    14fe:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1500:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1502:	e030      	b.n	1566 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1504:	4b19      	ldr	r3, [pc, #100]	; (156c <system_clock_source_enable+0x94>)
    1506:	8a19      	ldrh	r1, [r3, #16]
    1508:	2202      	movs	r2, #2
    150a:	430a      	orrs	r2, r1
    150c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    150e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1510:	e029      	b.n	1566 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1512:	4b16      	ldr	r3, [pc, #88]	; (156c <system_clock_source_enable+0x94>)
    1514:	8a99      	ldrh	r1, [r3, #20]
    1516:	2202      	movs	r2, #2
    1518:	430a      	orrs	r2, r1
    151a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    151c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    151e:	e022      	b.n	1566 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1520:	4b13      	ldr	r3, [pc, #76]	; (1570 <system_clock_source_enable+0x98>)
    1522:	6819      	ldr	r1, [r3, #0]
    1524:	2202      	movs	r2, #2
    1526:	430a      	orrs	r2, r1
    1528:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    152a:	681a      	ldr	r2, [r3, #0]
    152c:	4b11      	ldr	r3, [pc, #68]	; (1574 <system_clock_source_enable+0x9c>)
    152e:	401a      	ands	r2, r3
    1530:	4b0e      	ldr	r3, [pc, #56]	; (156c <system_clock_source_enable+0x94>)
    1532:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1534:	1c19      	adds	r1, r3, #0
    1536:	2210      	movs	r2, #16
    1538:	68cb      	ldr	r3, [r1, #12]
    153a:	421a      	tst	r2, r3
    153c:	d0fc      	beq.n	1538 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    153e:	4a0c      	ldr	r2, [pc, #48]	; (1570 <system_clock_source_enable+0x98>)
    1540:	6891      	ldr	r1, [r2, #8]
    1542:	4b0a      	ldr	r3, [pc, #40]	; (156c <system_clock_source_enable+0x94>)
    1544:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1546:	6851      	ldr	r1, [r2, #4]
    1548:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    154a:	6812      	ldr	r2, [r2, #0]
    154c:	b292      	uxth	r2, r2
    154e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1550:	2000      	movs	r0, #0
    1552:	e008      	b.n	1566 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1554:	4a05      	ldr	r2, [pc, #20]	; (156c <system_clock_source_enable+0x94>)
    1556:	2344      	movs	r3, #68	; 0x44
    1558:	5cd0      	ldrb	r0, [r2, r3]
    155a:	2102      	movs	r1, #2
    155c:	4301      	orrs	r1, r0
    155e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1560:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1562:	e000      	b.n	1566 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1564:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1566:	4770      	bx	lr
    1568:	000059f8 	.word	0x000059f8
    156c:	40000800 	.word	0x40000800
    1570:	200000b4 	.word	0x200000b4
    1574:	0000ff7f 	.word	0x0000ff7f

00001578 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1578:	b5f0      	push	{r4, r5, r6, r7, lr}
    157a:	4657      	mov	r7, sl
    157c:	464e      	mov	r6, r9
    157e:	4645      	mov	r5, r8
    1580:	b4e0      	push	{r5, r6, r7}
    1582:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1584:	22c2      	movs	r2, #194	; 0xc2
    1586:	00d2      	lsls	r2, r2, #3
    1588:	4b5e      	ldr	r3, [pc, #376]	; (1704 <system_clock_init+0x18c>)
    158a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    158c:	4b5e      	ldr	r3, [pc, #376]	; (1708 <system_clock_init+0x190>)
    158e:	685a      	ldr	r2, [r3, #4]
    1590:	211e      	movs	r1, #30
    1592:	438a      	bics	r2, r1
    1594:	2104      	movs	r1, #4
    1596:	430a      	orrs	r2, r1
    1598:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    159a:	2203      	movs	r2, #3
    159c:	ab01      	add	r3, sp, #4
    159e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15a0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    15a2:	4d5a      	ldr	r5, [pc, #360]	; (170c <system_clock_init+0x194>)
    15a4:	b2e0      	uxtb	r0, r4
    15a6:	a901      	add	r1, sp, #4
    15a8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15aa:	3401      	adds	r4, #1
    15ac:	2c25      	cmp	r4, #37	; 0x25
    15ae:	d1f9      	bne.n	15a4 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    15b0:	a80c      	add	r0, sp, #48	; 0x30
    15b2:	2300      	movs	r3, #0
    15b4:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    15b6:	2280      	movs	r2, #128	; 0x80
    15b8:	0212      	lsls	r2, r2, #8
    15ba:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    15bc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    15be:	2201      	movs	r2, #1
    15c0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    15c2:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    15c4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    15c6:	2106      	movs	r1, #6
    15c8:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    15ca:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    15cc:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    15ce:	4b50      	ldr	r3, [pc, #320]	; (1710 <system_clock_init+0x198>)
    15d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    15d2:	2005      	movs	r0, #5
    15d4:	4b4f      	ldr	r3, [pc, #316]	; (1714 <system_clock_init+0x19c>)
    15d6:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    15d8:	494a      	ldr	r1, [pc, #296]	; (1704 <system_clock_init+0x18c>)
    15da:	2202      	movs	r2, #2
    15dc:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    15de:	421a      	tst	r2, r3
    15e0:	d0fc      	beq.n	15dc <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    15e2:	4b48      	ldr	r3, [pc, #288]	; (1704 <system_clock_init+0x18c>)
    15e4:	8a99      	ldrh	r1, [r3, #20]
    15e6:	2280      	movs	r2, #128	; 0x80
    15e8:	430a      	orrs	r2, r1
    15ea:	829a      	strh	r2, [r3, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    15ec:	4a4a      	ldr	r2, [pc, #296]	; (1718 <system_clock_init+0x1a0>)
    15ee:	6811      	ldr	r1, [r2, #0]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    15f0:	04c9      	lsls	r1, r1, #19
    15f2:	0e49      	lsrs	r1, r1, #25
    15f4:	0409      	lsls	r1, r1, #16
    15f6:	6998      	ldr	r0, [r3, #24]
    15f8:	4a48      	ldr	r2, [pc, #288]	; (171c <system_clock_init+0x1a4>)
    15fa:	4002      	ands	r2, r0
    15fc:	430a      	orrs	r2, r1
    15fe:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1600:	a80a      	add	r0, sp, #40	; 0x28
    1602:	2601      	movs	r6, #1
    1604:	7046      	strb	r6, [r0, #1]
	config->enable_32khz_output = true;
    1606:	7086      	strb	r6, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1608:	7106      	strb	r6, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    160a:	2407      	movs	r4, #7
    160c:	7004      	strb	r4, [r0, #0]
	config->write_once          = false;
    160e:	2200      	movs	r2, #0
    1610:	4690      	mov	r8, r2
    1612:	7142      	strb	r2, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1614:	70c6      	strb	r6, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1616:	4b42      	ldr	r3, [pc, #264]	; (1720 <system_clock_init+0x1a8>)
    1618:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    161a:	2004      	movs	r0, #4
    161c:	4f3d      	ldr	r7, [pc, #244]	; (1714 <system_clock_init+0x19c>)
    161e:	47b8      	blx	r7
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1620:	a805      	add	r0, sp, #20
    1622:	2500      	movs	r5, #0
    1624:	4642      	mov	r2, r8
    1626:	8042      	strh	r2, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1628:	8082      	strh	r2, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    162a:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    162c:	71c5      	strb	r5, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    162e:	7204      	strb	r4, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1630:	233f      	movs	r3, #63	; 0x3f
    1632:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1634:	2204      	movs	r2, #4
    1636:	4691      	mov	r9, r2
    1638:	7002      	strb	r2, [r0, #0]
	dfll_conf.on_demand      = false;
    163a:	7045      	strb	r5, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    163c:	22b7      	movs	r2, #183	; 0xb7
    163e:	00d2      	lsls	r2, r2, #3
    1640:	8202      	strh	r2, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1642:	7304      	strb	r4, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1644:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1646:	4b37      	ldr	r3, [pc, #220]	; (1724 <system_clock_init+0x1ac>)
    1648:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    164a:	a804      	add	r0, sp, #16
    164c:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    164e:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1650:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1652:	4b35      	ldr	r3, [pc, #212]	; (1728 <system_clock_init+0x1b0>)
    1654:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1656:	2006      	movs	r0, #6
    1658:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    165a:	4b34      	ldr	r3, [pc, #208]	; (172c <system_clock_init+0x1b4>)
    165c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    165e:	ac01      	add	r4, sp, #4
    1660:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1662:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1664:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1666:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1668:	2305      	movs	r3, #5
    166a:	7023      	strb	r3, [r4, #0]
    166c:	2001      	movs	r0, #1
    166e:	1c21      	adds	r1, r4, #0
    1670:	4b2f      	ldr	r3, [pc, #188]	; (1730 <system_clock_init+0x1b8>)
    1672:	469a      	mov	sl, r3
    1674:	4798      	blx	r3
    1676:	2001      	movs	r0, #1
    1678:	4a2e      	ldr	r2, [pc, #184]	; (1734 <system_clock_init+0x1bc>)
    167a:	4690      	mov	r8, r2
    167c:	4790      	blx	r2
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    167e:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    1680:	7265      	strb	r5, [r4, #9]
    1682:	464b      	mov	r3, r9
    1684:	7023      	strb	r3, [r4, #0]
    1686:	2220      	movs	r2, #32
    1688:	4691      	mov	r9, r2
    168a:	6062      	str	r2, [r4, #4]
    168c:	7226      	strb	r6, [r4, #8]
    168e:	2002      	movs	r0, #2
    1690:	1c21      	adds	r1, r4, #0
    1692:	47d0      	blx	sl
    1694:	2002      	movs	r0, #2
    1696:	47c0      	blx	r8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1698:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    169a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    169c:	7265      	strb	r5, [r4, #9]
    169e:	2303      	movs	r3, #3
    16a0:	7023      	strb	r3, [r4, #0]
    16a2:	464a      	mov	r2, r9
    16a4:	6062      	str	r2, [r4, #4]
    16a6:	2004      	movs	r0, #4
    16a8:	1c21      	adds	r1, r4, #0
    16aa:	47d0      	blx	sl
    16ac:	2004      	movs	r0, #4
    16ae:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    16b0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    16b2:	2000      	movs	r0, #0
    16b4:	1c21      	adds	r1, r4, #0
    16b6:	4b15      	ldr	r3, [pc, #84]	; (170c <system_clock_init+0x194>)
    16b8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    16ba:	2000      	movs	r0, #0
    16bc:	4b1e      	ldr	r3, [pc, #120]	; (1738 <system_clock_init+0x1c0>)
    16be:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    16c0:	2007      	movs	r0, #7
    16c2:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16c4:	490f      	ldr	r1, [pc, #60]	; (1704 <system_clock_init+0x18c>)
    16c6:	22d0      	movs	r2, #208	; 0xd0
    16c8:	68cb      	ldr	r3, [r1, #12]
    16ca:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    16cc:	2bd0      	cmp	r3, #208	; 0xd0
    16ce:	d1fb      	bne.n	16c8 <system_clock_init+0x150>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    16d0:	4a1a      	ldr	r2, [pc, #104]	; (173c <system_clock_init+0x1c4>)
    16d2:	2300      	movs	r3, #0
    16d4:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    16d6:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    16d8:	7293      	strb	r3, [r2, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    16da:	a901      	add	r1, sp, #4
    16dc:	2201      	movs	r2, #1
    16de:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    16e0:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    16e2:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    16e4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    16e6:	2307      	movs	r3, #7
    16e8:	700b      	strb	r3, [r1, #0]
    16ea:	2000      	movs	r0, #0
    16ec:	4b10      	ldr	r3, [pc, #64]	; (1730 <system_clock_init+0x1b8>)
    16ee:	4798      	blx	r3
    16f0:	2000      	movs	r0, #0
    16f2:	4b10      	ldr	r3, [pc, #64]	; (1734 <system_clock_init+0x1bc>)
    16f4:	4798      	blx	r3
#endif
}
    16f6:	b010      	add	sp, #64	; 0x40
    16f8:	bc1c      	pop	{r2, r3, r4}
    16fa:	4690      	mov	r8, r2
    16fc:	4699      	mov	r9, r3
    16fe:	46a2      	mov	sl, r4
    1700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	40000800 	.word	0x40000800
    1708:	41004000 	.word	0x41004000
    170c:	00001975 	.word	0x00001975
    1710:	000013b5 	.word	0x000013b5
    1714:	000014d9 	.word	0x000014d9
    1718:	00806024 	.word	0x00806024
    171c:	ff80ffff 	.word	0xff80ffff
    1720:	00001339 	.word	0x00001339
    1724:	00001469 	.word	0x00001469
    1728:	000012fd 	.word	0x000012fd
    172c:	00001741 	.word	0x00001741
    1730:	00001765 	.word	0x00001765
    1734:	00001819 	.word	0x00001819
    1738:	000018e9 	.word	0x000018e9
    173c:	40000400 	.word	0x40000400

00001740 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <system_gclk_init+0x1c>)
    1742:	6999      	ldr	r1, [r3, #24]
    1744:	2208      	movs	r2, #8
    1746:	430a      	orrs	r2, r1
    1748:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    174a:	2201      	movs	r2, #1
    174c:	4b04      	ldr	r3, [pc, #16]	; (1760 <system_gclk_init+0x20>)
    174e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1750:	1c19      	adds	r1, r3, #0
    1752:	780b      	ldrb	r3, [r1, #0]
    1754:	4213      	tst	r3, r2
    1756:	d1fc      	bne.n	1752 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1758:	4770      	bx	lr
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	40000400 	.word	0x40000400
    1760:	40000c00 	.word	0x40000c00

00001764 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1766:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1768:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    176a:	780d      	ldrb	r5, [r1, #0]
    176c:	022d      	lsls	r5, r5, #8
    176e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1770:	784b      	ldrb	r3, [r1, #1]
    1772:	2b00      	cmp	r3, #0
    1774:	d002      	beq.n	177c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1776:	2380      	movs	r3, #128	; 0x80
    1778:	02db      	lsls	r3, r3, #11
    177a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    177c:	7a4b      	ldrb	r3, [r1, #9]
    177e:	2b00      	cmp	r3, #0
    1780:	d002      	beq.n	1788 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1782:	2380      	movs	r3, #128	; 0x80
    1784:	031b      	lsls	r3, r3, #12
    1786:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1788:	684c      	ldr	r4, [r1, #4]
    178a:	2c01      	cmp	r4, #1
    178c:	d917      	bls.n	17be <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    178e:	1e63      	subs	r3, r4, #1
    1790:	421c      	tst	r4, r3
    1792:	d10f      	bne.n	17b4 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1794:	2c02      	cmp	r4, #2
    1796:	d906      	bls.n	17a6 <system_gclk_gen_set_config+0x42>
    1798:	2302      	movs	r3, #2
    179a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    179c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    179e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17a0:	429c      	cmp	r4, r3
    17a2:	d8fb      	bhi.n	179c <system_gclk_gen_set_config+0x38>
    17a4:	e000      	b.n	17a8 <system_gclk_gen_set_config+0x44>
    17a6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    17a8:	0217      	lsls	r7, r2, #8
    17aa:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    17ac:	2380      	movs	r3, #128	; 0x80
    17ae:	035b      	lsls	r3, r3, #13
    17b0:	431d      	orrs	r5, r3
    17b2:	e004      	b.n	17be <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    17b4:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    17b6:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    17b8:	2380      	movs	r3, #128	; 0x80
    17ba:	029b      	lsls	r3, r3, #10
    17bc:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    17be:	7a0b      	ldrb	r3, [r1, #8]
    17c0:	2b00      	cmp	r3, #0
    17c2:	d002      	beq.n	17ca <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    17c4:	2380      	movs	r3, #128	; 0x80
    17c6:	039b      	lsls	r3, r3, #14
    17c8:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17ca:	4a0f      	ldr	r2, [pc, #60]	; (1808 <system_gclk_gen_set_config+0xa4>)
    17cc:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    17ce:	b25b      	sxtb	r3, r3
    17d0:	2b00      	cmp	r3, #0
    17d2:	dbfb      	blt.n	17cc <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17d4:	4b0d      	ldr	r3, [pc, #52]	; (180c <system_gclk_gen_set_config+0xa8>)
    17d6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    17d8:	4b0d      	ldr	r3, [pc, #52]	; (1810 <system_gclk_gen_set_config+0xac>)
    17da:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17dc:	4a0a      	ldr	r2, [pc, #40]	; (1808 <system_gclk_gen_set_config+0xa4>)
    17de:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    17e0:	b25b      	sxtb	r3, r3
    17e2:	2b00      	cmp	r3, #0
    17e4:	dbfb      	blt.n	17de <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    17e6:	4b08      	ldr	r3, [pc, #32]	; (1808 <system_gclk_gen_set_config+0xa4>)
    17e8:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17ea:	1c1a      	adds	r2, r3, #0
    17ec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    17ee:	b25b      	sxtb	r3, r3
    17f0:	2b00      	cmp	r3, #0
    17f2:	dbfb      	blt.n	17ec <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    17f4:	4b04      	ldr	r3, [pc, #16]	; (1808 <system_gclk_gen_set_config+0xa4>)
    17f6:	6859      	ldr	r1, [r3, #4]
    17f8:	2280      	movs	r2, #128	; 0x80
    17fa:	0252      	lsls	r2, r2, #9
    17fc:	400a      	ands	r2, r1
    17fe:	4315      	orrs	r5, r2
    1800:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1802:	4b04      	ldr	r3, [pc, #16]	; (1814 <system_gclk_gen_set_config+0xb0>)
    1804:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1808:	40000c00 	.word	0x40000c00
    180c:	0000017d 	.word	0x0000017d
    1810:	40000c08 	.word	0x40000c08
    1814:	000001bd 	.word	0x000001bd

00001818 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1818:	b510      	push	{r4, lr}
    181a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    181c:	4a0b      	ldr	r2, [pc, #44]	; (184c <system_gclk_gen_enable+0x34>)
    181e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1820:	b25b      	sxtb	r3, r3
    1822:	2b00      	cmp	r3, #0
    1824:	dbfb      	blt.n	181e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1826:	4b0a      	ldr	r3, [pc, #40]	; (1850 <system_gclk_gen_enable+0x38>)
    1828:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    182a:	4b0a      	ldr	r3, [pc, #40]	; (1854 <system_gclk_gen_enable+0x3c>)
    182c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    182e:	4a07      	ldr	r2, [pc, #28]	; (184c <system_gclk_gen_enable+0x34>)
    1830:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1832:	b25b      	sxtb	r3, r3
    1834:	2b00      	cmp	r3, #0
    1836:	dbfb      	blt.n	1830 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1838:	4b04      	ldr	r3, [pc, #16]	; (184c <system_gclk_gen_enable+0x34>)
    183a:	6859      	ldr	r1, [r3, #4]
    183c:	2280      	movs	r2, #128	; 0x80
    183e:	0252      	lsls	r2, r2, #9
    1840:	430a      	orrs	r2, r1
    1842:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1844:	4b04      	ldr	r3, [pc, #16]	; (1858 <system_gclk_gen_enable+0x40>)
    1846:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1848:	bd10      	pop	{r4, pc}
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	40000c00 	.word	0x40000c00
    1850:	0000017d 	.word	0x0000017d
    1854:	40000c04 	.word	0x40000c04
    1858:	000001bd 	.word	0x000001bd

0000185c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    185c:	b570      	push	{r4, r5, r6, lr}
    185e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1860:	4a1a      	ldr	r2, [pc, #104]	; (18cc <system_gclk_gen_get_hz+0x70>)
    1862:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1864:	b25b      	sxtb	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	dbfb      	blt.n	1862 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    186a:	4b19      	ldr	r3, [pc, #100]	; (18d0 <system_gclk_gen_get_hz+0x74>)
    186c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    186e:	4b19      	ldr	r3, [pc, #100]	; (18d4 <system_gclk_gen_get_hz+0x78>)
    1870:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1872:	4a16      	ldr	r2, [pc, #88]	; (18cc <system_gclk_gen_get_hz+0x70>)
    1874:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1876:	b25b      	sxtb	r3, r3
    1878:	2b00      	cmp	r3, #0
    187a:	dbfb      	blt.n	1874 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    187c:	4e13      	ldr	r6, [pc, #76]	; (18cc <system_gclk_gen_get_hz+0x70>)
    187e:	6870      	ldr	r0, [r6, #4]
    1880:	04c0      	lsls	r0, r0, #19
    1882:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1884:	4b14      	ldr	r3, [pc, #80]	; (18d8 <system_gclk_gen_get_hz+0x7c>)
    1886:	4798      	blx	r3
    1888:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    188a:	4b12      	ldr	r3, [pc, #72]	; (18d4 <system_gclk_gen_get_hz+0x78>)
    188c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    188e:	6876      	ldr	r6, [r6, #4]
    1890:	02f6      	lsls	r6, r6, #11
    1892:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1894:	4b11      	ldr	r3, [pc, #68]	; (18dc <system_gclk_gen_get_hz+0x80>)
    1896:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1898:	4a0c      	ldr	r2, [pc, #48]	; (18cc <system_gclk_gen_get_hz+0x70>)
    189a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    189c:	b25b      	sxtb	r3, r3
    189e:	2b00      	cmp	r3, #0
    18a0:	dbfb      	blt.n	189a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    18a2:	4b0a      	ldr	r3, [pc, #40]	; (18cc <system_gclk_gen_get_hz+0x70>)
    18a4:	689c      	ldr	r4, [r3, #8]
    18a6:	0a24      	lsrs	r4, r4, #8
    18a8:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18aa:	4b0d      	ldr	r3, [pc, #52]	; (18e0 <system_gclk_gen_get_hz+0x84>)
    18ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    18ae:	2e00      	cmp	r6, #0
    18b0:	d107      	bne.n	18c2 <system_gclk_gen_get_hz+0x66>
    18b2:	2c01      	cmp	r4, #1
    18b4:	d907      	bls.n	18c6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    18b6:	1c28      	adds	r0, r5, #0
    18b8:	1c21      	adds	r1, r4, #0
    18ba:	4b0a      	ldr	r3, [pc, #40]	; (18e4 <system_gclk_gen_get_hz+0x88>)
    18bc:	4798      	blx	r3
    18be:	1c05      	adds	r5, r0, #0
    18c0:	e001      	b.n	18c6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    18c2:	3401      	adds	r4, #1
    18c4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    18c6:	1c28      	adds	r0, r5, #0
    18c8:	bd70      	pop	{r4, r5, r6, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	40000c00 	.word	0x40000c00
    18d0:	0000017d 	.word	0x0000017d
    18d4:	40000c04 	.word	0x40000c04
    18d8:	0000126d 	.word	0x0000126d
    18dc:	40000c08 	.word	0x40000c08
    18e0:	000001bd 	.word	0x000001bd
    18e4:	000048cd 	.word	0x000048cd

000018e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    18e8:	b510      	push	{r4, lr}
    18ea:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    18ec:	4b06      	ldr	r3, [pc, #24]	; (1908 <system_gclk_chan_enable+0x20>)
    18ee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    18f0:	4b06      	ldr	r3, [pc, #24]	; (190c <system_gclk_chan_enable+0x24>)
    18f2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    18f4:	4b06      	ldr	r3, [pc, #24]	; (1910 <system_gclk_chan_enable+0x28>)
    18f6:	8859      	ldrh	r1, [r3, #2]
    18f8:	2280      	movs	r2, #128	; 0x80
    18fa:	01d2      	lsls	r2, r2, #7
    18fc:	430a      	orrs	r2, r1
    18fe:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1900:	4b04      	ldr	r3, [pc, #16]	; (1914 <system_gclk_chan_enable+0x2c>)
    1902:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1904:	bd10      	pop	{r4, pc}
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	0000017d 	.word	0x0000017d
    190c:	40000c02 	.word	0x40000c02
    1910:	40000c00 	.word	0x40000c00
    1914:	000001bd 	.word	0x000001bd

00001918 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1918:	b510      	push	{r4, lr}
    191a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    191c:	4b0f      	ldr	r3, [pc, #60]	; (195c <system_gclk_chan_disable+0x44>)
    191e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1920:	4b0f      	ldr	r3, [pc, #60]	; (1960 <system_gclk_chan_disable+0x48>)
    1922:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1924:	4b0f      	ldr	r3, [pc, #60]	; (1964 <system_gclk_chan_disable+0x4c>)
    1926:	8858      	ldrh	r0, [r3, #2]
    1928:	0500      	lsls	r0, r0, #20
    192a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    192c:	8859      	ldrh	r1, [r3, #2]
    192e:	4a0e      	ldr	r2, [pc, #56]	; (1968 <system_gclk_chan_disable+0x50>)
    1930:	400a      	ands	r2, r1
    1932:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1934:	8859      	ldrh	r1, [r3, #2]
    1936:	4a0d      	ldr	r2, [pc, #52]	; (196c <system_gclk_chan_disable+0x54>)
    1938:	400a      	ands	r2, r1
    193a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    193c:	1c19      	adds	r1, r3, #0
    193e:	2280      	movs	r2, #128	; 0x80
    1940:	01d2      	lsls	r2, r2, #7
    1942:	884b      	ldrh	r3, [r1, #2]
    1944:	4213      	tst	r3, r2
    1946:	d1fc      	bne.n	1942 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1948:	4b06      	ldr	r3, [pc, #24]	; (1964 <system_gclk_chan_disable+0x4c>)
    194a:	0201      	lsls	r1, r0, #8
    194c:	8858      	ldrh	r0, [r3, #2]
    194e:	4a06      	ldr	r2, [pc, #24]	; (1968 <system_gclk_chan_disable+0x50>)
    1950:	4002      	ands	r2, r0
    1952:	430a      	orrs	r2, r1
    1954:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1956:	4b06      	ldr	r3, [pc, #24]	; (1970 <system_gclk_chan_disable+0x58>)
    1958:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    195a:	bd10      	pop	{r4, pc}
    195c:	0000017d 	.word	0x0000017d
    1960:	40000c02 	.word	0x40000c02
    1964:	40000c00 	.word	0x40000c00
    1968:	fffff0ff 	.word	0xfffff0ff
    196c:	ffffbfff 	.word	0xffffbfff
    1970:	000001bd 	.word	0x000001bd

00001974 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1974:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1976:	780c      	ldrb	r4, [r1, #0]
    1978:	0224      	lsls	r4, r4, #8
    197a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    197c:	4b02      	ldr	r3, [pc, #8]	; (1988 <system_gclk_chan_set_config+0x14>)
    197e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1980:	b2a4      	uxth	r4, r4
    1982:	4b02      	ldr	r3, [pc, #8]	; (198c <system_gclk_chan_set_config+0x18>)
    1984:	805c      	strh	r4, [r3, #2]
}
    1986:	bd10      	pop	{r4, pc}
    1988:	00001919 	.word	0x00001919
    198c:	40000c00 	.word	0x40000c00

00001990 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1990:	b510      	push	{r4, lr}
    1992:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1994:	4b06      	ldr	r3, [pc, #24]	; (19b0 <system_gclk_chan_get_hz+0x20>)
    1996:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1998:	4b06      	ldr	r3, [pc, #24]	; (19b4 <system_gclk_chan_get_hz+0x24>)
    199a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    199c:	4b06      	ldr	r3, [pc, #24]	; (19b8 <system_gclk_chan_get_hz+0x28>)
    199e:	885c      	ldrh	r4, [r3, #2]
    19a0:	0524      	lsls	r4, r4, #20
    19a2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    19a4:	4b05      	ldr	r3, [pc, #20]	; (19bc <system_gclk_chan_get_hz+0x2c>)
    19a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    19a8:	1c20      	adds	r0, r4, #0
    19aa:	4b05      	ldr	r3, [pc, #20]	; (19c0 <system_gclk_chan_get_hz+0x30>)
    19ac:	4798      	blx	r3
}
    19ae:	bd10      	pop	{r4, pc}
    19b0:	0000017d 	.word	0x0000017d
    19b4:	40000c02 	.word	0x40000c02
    19b8:	40000c00 	.word	0x40000c00
    19bc:	000001bd 	.word	0x000001bd
    19c0:	0000185d 	.word	0x0000185d

000019c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    19c4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    19c6:	78d3      	ldrb	r3, [r2, #3]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d11e      	bne.n	1a0a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    19cc:	7813      	ldrb	r3, [r2, #0]
    19ce:	2b80      	cmp	r3, #128	; 0x80
    19d0:	d004      	beq.n	19dc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    19d2:	061b      	lsls	r3, r3, #24
    19d4:	2480      	movs	r4, #128	; 0x80
    19d6:	0264      	lsls	r4, r4, #9
    19d8:	4323      	orrs	r3, r4
    19da:	e000      	b.n	19de <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    19dc:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    19de:	7854      	ldrb	r4, [r2, #1]
    19e0:	2502      	movs	r5, #2
    19e2:	43ac      	bics	r4, r5
    19e4:	d10a      	bne.n	19fc <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    19e6:	7894      	ldrb	r4, [r2, #2]
    19e8:	2c00      	cmp	r4, #0
    19ea:	d103      	bne.n	19f4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    19ec:	2480      	movs	r4, #128	; 0x80
    19ee:	02a4      	lsls	r4, r4, #10
    19f0:	4323      	orrs	r3, r4
    19f2:	e002      	b.n	19fa <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    19f4:	24c0      	movs	r4, #192	; 0xc0
    19f6:	02e4      	lsls	r4, r4, #11
    19f8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    19fa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    19fc:	7854      	ldrb	r4, [r2, #1]
    19fe:	3c01      	subs	r4, #1
    1a00:	2c01      	cmp	r4, #1
    1a02:	d804      	bhi.n	1a0e <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a04:	4c11      	ldr	r4, [pc, #68]	; (1a4c <_system_pinmux_config+0x88>)
    1a06:	4023      	ands	r3, r4
    1a08:	e001      	b.n	1a0e <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1a0a:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1a0c:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a0e:	040d      	lsls	r5, r1, #16
    1a10:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a12:	24a0      	movs	r4, #160	; 0xa0
    1a14:	05e4      	lsls	r4, r4, #23
    1a16:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a18:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a1a:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a1c:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a1e:	24d0      	movs	r4, #208	; 0xd0
    1a20:	0624      	lsls	r4, r4, #24
    1a22:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a24:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a26:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a28:	78d4      	ldrb	r4, [r2, #3]
    1a2a:	2c00      	cmp	r4, #0
    1a2c:	d10c      	bne.n	1a48 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a2e:	035c      	lsls	r4, r3, #13
    1a30:	d505      	bpl.n	1a3e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a32:	7893      	ldrb	r3, [r2, #2]
    1a34:	2b01      	cmp	r3, #1
    1a36:	d101      	bne.n	1a3c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1a38:	6181      	str	r1, [r0, #24]
    1a3a:	e000      	b.n	1a3e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1a3c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a3e:	7853      	ldrb	r3, [r2, #1]
    1a40:	3b01      	subs	r3, #1
    1a42:	2b01      	cmp	r3, #1
    1a44:	d800      	bhi.n	1a48 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1a46:	6081      	str	r1, [r0, #8]
		}
	}
}
    1a48:	bd30      	pop	{r4, r5, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	fffbffff 	.word	0xfffbffff

00001a50 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1a50:	b508      	push	{r3, lr}
    1a52:	1c03      	adds	r3, r0, #0
    1a54:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a56:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a58:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a5a:	2900      	cmp	r1, #0
    1a5c:	d103      	bne.n	1a66 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1a5e:	0958      	lsrs	r0, r3, #5
    1a60:	01c0      	lsls	r0, r0, #7
    1a62:	4904      	ldr	r1, [pc, #16]	; (1a74 <system_pinmux_pin_set_config+0x24>)
    1a64:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1a66:	211f      	movs	r1, #31
    1a68:	400b      	ands	r3, r1
    1a6a:	2101      	movs	r1, #1
    1a6c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1a6e:	4b02      	ldr	r3, [pc, #8]	; (1a78 <system_pinmux_pin_set_config+0x28>)
    1a70:	4798      	blx	r3
}
    1a72:	bd08      	pop	{r3, pc}
    1a74:	41004400 	.word	0x41004400
    1a78:	000019c5 	.word	0x000019c5

00001a7c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1a7c:	4770      	bx	lr
    1a7e:	46c0      	nop			; (mov r8, r8)

00001a80 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1a80:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1a82:	4b04      	ldr	r3, [pc, #16]	; (1a94 <system_init+0x14>)
    1a84:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1a86:	4b04      	ldr	r3, [pc, #16]	; (1a98 <system_init+0x18>)
    1a88:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1a8a:	4b04      	ldr	r3, [pc, #16]	; (1a9c <system_init+0x1c>)
    1a8c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1a8e:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <system_init+0x20>)
    1a90:	4798      	blx	r3
}
    1a92:	bd08      	pop	{r3, pc}
    1a94:	00001579 	.word	0x00001579
    1a98:	000001ed 	.word	0x000001ed
    1a9c:	00001a7d 	.word	0x00001a7d
    1aa0:	000003b5 	.word	0x000003b5

00001aa4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1aa4:	1c93      	adds	r3, r2, #2
    1aa6:	009b      	lsls	r3, r3, #2
    1aa8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1aaa:	2a02      	cmp	r2, #2
    1aac:	d104      	bne.n	1ab8 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1aae:	7e02      	ldrb	r2, [r0, #24]
    1ab0:	2310      	movs	r3, #16
    1ab2:	4313      	orrs	r3, r2
    1ab4:	7603      	strb	r3, [r0, #24]
    1ab6:	e00c      	b.n	1ad2 <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1ab8:	2a03      	cmp	r2, #3
    1aba:	d104      	bne.n	1ac6 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1abc:	7e02      	ldrb	r2, [r0, #24]
    1abe:	2320      	movs	r3, #32
    1ac0:	4313      	orrs	r3, r2
    1ac2:	7603      	strb	r3, [r0, #24]
    1ac4:	e005      	b.n	1ad2 <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1ac6:	2301      	movs	r3, #1
    1ac8:	4093      	lsls	r3, r2
    1aca:	1c1a      	adds	r2, r3, #0
    1acc:	7e03      	ldrb	r3, [r0, #24]
    1ace:	431a      	orrs	r2, r3
    1ad0:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    1ad2:	2000      	movs	r0, #0
    1ad4:	4770      	bx	lr
    1ad6:	46c0      	nop			; (mov r8, r8)

00001ad8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1ad8:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1ada:	0080      	lsls	r0, r0, #2
    1adc:	4b14      	ldr	r3, [pc, #80]	; (1b30 <_tc_interrupt_handler+0x58>)
    1ade:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1ae0:	6822      	ldr	r2, [r4, #0]
    1ae2:	7b95      	ldrb	r5, [r2, #14]
    1ae4:	7e23      	ldrb	r3, [r4, #24]
    1ae6:	401d      	ands	r5, r3
    1ae8:	7e63      	ldrb	r3, [r4, #25]
    1aea:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1aec:	07eb      	lsls	r3, r5, #31
    1aee:	d505      	bpl.n	1afc <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1af0:	1c20      	adds	r0, r4, #0
    1af2:	68a2      	ldr	r2, [r4, #8]
    1af4:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1af6:	2301      	movs	r3, #1
    1af8:	6822      	ldr	r2, [r4, #0]
    1afa:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1afc:	07ab      	lsls	r3, r5, #30
    1afe:	d505      	bpl.n	1b0c <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1b00:	1c20      	adds	r0, r4, #0
    1b02:	68e2      	ldr	r2, [r4, #12]
    1b04:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1b06:	2302      	movs	r3, #2
    1b08:	6822      	ldr	r2, [r4, #0]
    1b0a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1b0c:	06eb      	lsls	r3, r5, #27
    1b0e:	d505      	bpl.n	1b1c <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1b10:	1c20      	adds	r0, r4, #0
    1b12:	6922      	ldr	r2, [r4, #16]
    1b14:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1b16:	2310      	movs	r3, #16
    1b18:	6822      	ldr	r2, [r4, #0]
    1b1a:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1b1c:	06ab      	lsls	r3, r5, #26
    1b1e:	d505      	bpl.n	1b2c <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1b20:	1c20      	adds	r0, r4, #0
    1b22:	6962      	ldr	r2, [r4, #20]
    1b24:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1b26:	6823      	ldr	r3, [r4, #0]
    1b28:	2220      	movs	r2, #32
    1b2a:	739a      	strb	r2, [r3, #14]
	}
}
    1b2c:	bd38      	pop	{r3, r4, r5, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	200008d4 	.word	0x200008d4

00001b34 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1b34:	b508      	push	{r3, lr}
    1b36:	2000      	movs	r0, #0
    1b38:	4b01      	ldr	r3, [pc, #4]	; (1b40 <TC3_Handler+0xc>)
    1b3a:	4798      	blx	r3
    1b3c:	bd08      	pop	{r3, pc}
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	00001ad9 	.word	0x00001ad9

00001b44 <TC4_Handler>:
    1b44:	b508      	push	{r3, lr}
    1b46:	2001      	movs	r0, #1
    1b48:	4b01      	ldr	r3, [pc, #4]	; (1b50 <TC4_Handler+0xc>)
    1b4a:	4798      	blx	r3
    1b4c:	bd08      	pop	{r3, pc}
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	00001ad9 	.word	0x00001ad9

00001b54 <TC5_Handler>:
    1b54:	b508      	push	{r3, lr}
    1b56:	2002      	movs	r0, #2
    1b58:	4b01      	ldr	r3, [pc, #4]	; (1b60 <TC5_Handler+0xc>)
    1b5a:	4798      	blx	r3
    1b5c:	bd08      	pop	{r3, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	00001ad9 	.word	0x00001ad9

00001b64 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1b64:	b570      	push	{r4, r5, r6, lr}
    1b66:	b084      	sub	sp, #16
    1b68:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1b6a:	ab01      	add	r3, sp, #4
    1b6c:	4a0a      	ldr	r2, [pc, #40]	; (1b98 <_tc_get_inst_index+0x34>)
    1b6e:	ca70      	ldmia	r2!, {r4, r5, r6}
    1b70:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1b72:	9b01      	ldr	r3, [sp, #4]
    1b74:	4283      	cmp	r3, r0
    1b76:	d00a      	beq.n	1b8e <_tc_get_inst_index+0x2a>
    1b78:	9c02      	ldr	r4, [sp, #8]
    1b7a:	4284      	cmp	r4, r0
    1b7c:	d005      	beq.n	1b8a <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1b7e:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1b80:	9d03      	ldr	r5, [sp, #12]
    1b82:	428d      	cmp	r5, r1
    1b84:	d105      	bne.n	1b92 <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1b86:	2002      	movs	r0, #2
    1b88:	e002      	b.n	1b90 <_tc_get_inst_index+0x2c>
    1b8a:	2001      	movs	r0, #1
    1b8c:	e000      	b.n	1b90 <_tc_get_inst_index+0x2c>
    1b8e:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
    1b90:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1b92:	b004      	add	sp, #16
    1b94:	bd70      	pop	{r4, r5, r6, pc}
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	00005a1c 	.word	0x00005a1c

00001b9c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b9e:	464f      	mov	r7, r9
    1ba0:	4646      	mov	r6, r8
    1ba2:	b4c0      	push	{r6, r7}
    1ba4:	b087      	sub	sp, #28
    1ba6:	1c04      	adds	r4, r0, #0
    1ba8:	1c0d      	adds	r5, r1, #0
    1baa:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1bac:	1c08      	adds	r0, r1, #0
    1bae:	4b90      	ldr	r3, [pc, #576]	; (1df0 <tc_init+0x254>)
    1bb0:	4798      	blx	r3
    1bb2:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1bb4:	4f8f      	ldr	r7, [pc, #572]	; (1df4 <tc_init+0x258>)
    1bb6:	1c39      	adds	r1, r7, #0
    1bb8:	310c      	adds	r1, #12
    1bba:	a805      	add	r0, sp, #20
    1bbc:	2203      	movs	r2, #3
    1bbe:	4e8e      	ldr	r6, [pc, #568]	; (1df8 <tc_init+0x25c>)
    1bc0:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1bc2:	1c39      	adds	r1, r7, #0
    1bc4:	3110      	adds	r1, #16
    1bc6:	a803      	add	r0, sp, #12
    1bc8:	2206      	movs	r2, #6
    1bca:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1bcc:	2300      	movs	r3, #0
    1bce:	60a3      	str	r3, [r4, #8]
    1bd0:	60e3      	str	r3, [r4, #12]
    1bd2:	6123      	str	r3, [r4, #16]
    1bd4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1bd6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1bd8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1bda:	4648      	mov	r0, r9
    1bdc:	0082      	lsls	r2, r0, #2
    1bde:	4b87      	ldr	r3, [pc, #540]	; (1dfc <tc_init+0x260>)
    1be0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1be2:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1be4:	4641      	mov	r1, r8
    1be6:	788b      	ldrb	r3, [r1, #2]
    1be8:	2b08      	cmp	r3, #8
    1bea:	d104      	bne.n	1bf6 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1bec:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1bee:	464a      	mov	r2, r9
    1bf0:	07d2      	lsls	r2, r2, #31
    1bf2:	d400      	bmi.n	1bf6 <tc_init+0x5a>
    1bf4:	e0f6      	b.n	1de4 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1bf6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1bf8:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1bfa:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1bfc:	07d9      	lsls	r1, r3, #31
    1bfe:	d500      	bpl.n	1c02 <tc_init+0x66>
    1c00:	e0f0      	b.n	1de4 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1c02:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1c04:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1c06:	06da      	lsls	r2, r3, #27
    1c08:	d500      	bpl.n	1c0c <tc_init+0x70>
    1c0a:	e0eb      	b.n	1de4 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1c0c:	882b      	ldrh	r3, [r5, #0]
    1c0e:	0799      	lsls	r1, r3, #30
    1c10:	d500      	bpl.n	1c14 <tc_init+0x78>
    1c12:	e0e7      	b.n	1de4 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1c14:	4642      	mov	r2, r8
    1c16:	7c13      	ldrb	r3, [r2, #16]
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d00c      	beq.n	1c36 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1c1c:	a902      	add	r1, sp, #8
    1c1e:	2301      	movs	r3, #1
    1c20:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1c22:	2200      	movs	r2, #0
    1c24:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1c26:	4640      	mov	r0, r8
    1c28:	6980      	ldr	r0, [r0, #24]
    1c2a:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1c2c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1c2e:	4642      	mov	r2, r8
    1c30:	7d10      	ldrb	r0, [r2, #20]
    1c32:	4b73      	ldr	r3, [pc, #460]	; (1e00 <tc_init+0x264>)
    1c34:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1c36:	4640      	mov	r0, r8
    1c38:	7f03      	ldrb	r3, [r0, #28]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d00b      	beq.n	1c56 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1c3e:	a902      	add	r1, sp, #8
    1c40:	2301      	movs	r3, #1
    1c42:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1c44:	2200      	movs	r2, #0
    1c46:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1c48:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1c4a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1c4c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1c4e:	6a03      	ldr	r3, [r0, #32]
    1c50:	b2d8      	uxtb	r0, r3
    1c52:	4b6b      	ldr	r3, [pc, #428]	; (1e00 <tc_init+0x264>)
    1c54:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1c56:	4b6b      	ldr	r3, [pc, #428]	; (1e04 <tc_init+0x268>)
    1c58:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1c5a:	4648      	mov	r0, r9
    1c5c:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1c5e:	a803      	add	r0, sp, #12
    1c60:	5a12      	ldrh	r2, [r2, r0]
    1c62:	430a      	orrs	r2, r1
    1c64:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1c66:	4641      	mov	r1, r8
    1c68:	788b      	ldrb	r3, [r1, #2]
    1c6a:	2b08      	cmp	r3, #8
    1c6c:	d108      	bne.n	1c80 <tc_init+0xe4>
    1c6e:	4b65      	ldr	r3, [pc, #404]	; (1e04 <tc_init+0x268>)
    1c70:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1c72:	4648      	mov	r0, r9
    1c74:	3001      	adds	r0, #1
    1c76:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1c78:	a903      	add	r1, sp, #12
    1c7a:	5a41      	ldrh	r1, [r0, r1]
    1c7c:	430a      	orrs	r2, r1
    1c7e:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1c80:	a901      	add	r1, sp, #4
    1c82:	4642      	mov	r2, r8
    1c84:	7813      	ldrb	r3, [r2, #0]
    1c86:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1c88:	ab05      	add	r3, sp, #20
    1c8a:	4648      	mov	r0, r9
    1c8c:	5c1e      	ldrb	r6, [r3, r0]
    1c8e:	1c30      	adds	r0, r6, #0
    1c90:	4b5d      	ldr	r3, [pc, #372]	; (1e08 <tc_init+0x26c>)
    1c92:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1c94:	1c30      	adds	r0, r6, #0
    1c96:	4b5d      	ldr	r3, [pc, #372]	; (1e0c <tc_init+0x270>)
    1c98:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1c9a:	4641      	mov	r1, r8
    1c9c:	8888      	ldrh	r0, [r1, #4]
    1c9e:	890b      	ldrh	r3, [r1, #8]
    1ca0:	4303      	orrs	r3, r0
    1ca2:	7988      	ldrb	r0, [r1, #6]
    1ca4:	788a      	ldrb	r2, [r1, #2]
    1ca6:	4310      	orrs	r0, r2
    1ca8:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1caa:	784b      	ldrb	r3, [r1, #1]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d002      	beq.n	1cb6 <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1cb0:	2380      	movs	r3, #128	; 0x80
    1cb2:	011b      	lsls	r3, r3, #4
    1cb4:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cb6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cb8:	227f      	movs	r2, #127	; 0x7f
    1cba:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1cbc:	4393      	bics	r3, r2
    1cbe:	d1fc      	bne.n	1cba <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1cc0:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1cc2:	4642      	mov	r2, r8
    1cc4:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1cc6:	1e43      	subs	r3, r0, #1
    1cc8:	4198      	sbcs	r0, r3
    1cca:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
    1ccc:	7b93      	ldrb	r3, [r2, #14]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d001      	beq.n	1cd6 <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1cd2:	2301      	movs	r3, #1
    1cd4:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cd6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cd8:	227f      	movs	r2, #127	; 0x7f
    1cda:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1cdc:	4393      	bics	r3, r2
    1cde:	d1fc      	bne.n	1cda <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1ce0:	23ff      	movs	r3, #255	; 0xff
    1ce2:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1ce4:	2800      	cmp	r0, #0
    1ce6:	d005      	beq.n	1cf4 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ce8:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cea:	227f      	movs	r2, #127	; 0x7f
    1cec:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1cee:	4393      	bics	r3, r2
    1cf0:	d1fc      	bne.n	1cec <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1cf2:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1cf4:	4643      	mov	r3, r8
    1cf6:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1cf8:	7adb      	ldrb	r3, [r3, #11]
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d001      	beq.n	1d02 <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1cfe:	2310      	movs	r3, #16
    1d00:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1d02:	4641      	mov	r1, r8
    1d04:	7b0b      	ldrb	r3, [r1, #12]
    1d06:	2b00      	cmp	r3, #0
    1d08:	d001      	beq.n	1d0e <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1d0a:	2320      	movs	r3, #32
    1d0c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d0e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d10:	227f      	movs	r2, #127	; 0x7f
    1d12:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d14:	4393      	bics	r3, r2
    1d16:	d1fc      	bne.n	1d12 <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1d18:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d1a:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d1c:	217f      	movs	r1, #127	; 0x7f
    1d1e:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d20:	438b      	bics	r3, r1
    1d22:	d1fc      	bne.n	1d1e <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1d24:	7923      	ldrb	r3, [r4, #4]
    1d26:	2b04      	cmp	r3, #4
    1d28:	d005      	beq.n	1d36 <tc_init+0x19a>
    1d2a:	2b08      	cmp	r3, #8
    1d2c:	d041      	beq.n	1db2 <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1d2e:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1d30:	2b00      	cmp	r3, #0
    1d32:	d157      	bne.n	1de4 <tc_init+0x248>
    1d34:	e024      	b.n	1d80 <tc_init+0x1e4>
    1d36:	217f      	movs	r1, #127	; 0x7f
    1d38:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1d3a:	438b      	bics	r3, r1
    1d3c:	d1fc      	bne.n	1d38 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1d3e:	2328      	movs	r3, #40	; 0x28
    1d40:	4642      	mov	r2, r8
    1d42:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    1d44:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d46:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d48:	227f      	movs	r2, #127	; 0x7f
    1d4a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    1d4c:	4393      	bics	r3, r2
    1d4e:	d1fc      	bne.n	1d4a <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1d50:	2329      	movs	r3, #41	; 0x29
    1d52:	4640      	mov	r0, r8
    1d54:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    1d56:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d58:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d5a:	227f      	movs	r2, #127	; 0x7f
    1d5c:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    1d5e:	4393      	bics	r3, r2
    1d60:	d1fc      	bne.n	1d5c <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1d62:	232a      	movs	r3, #42	; 0x2a
    1d64:	4641      	mov	r1, r8
    1d66:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1d68:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d6a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d6c:	227f      	movs	r2, #127	; 0x7f
    1d6e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1d70:	4393      	bics	r3, r2
    1d72:	d1fc      	bne.n	1d6e <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1d74:	232b      	movs	r3, #43	; 0x2b
    1d76:	4642      	mov	r2, r8
    1d78:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1d7a:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1d7c:	2000      	movs	r0, #0
    1d7e:	e031      	b.n	1de4 <tc_init+0x248>
    1d80:	217f      	movs	r1, #127	; 0x7f
    1d82:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1d84:	438b      	bics	r3, r1
    1d86:	d1fc      	bne.n	1d82 <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1d88:	4640      	mov	r0, r8
    1d8a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    1d8c:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d8e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d90:	227f      	movs	r2, #127	; 0x7f
    1d92:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1d94:	4393      	bics	r3, r2
    1d96:	d1fc      	bne.n	1d92 <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1d98:	4641      	mov	r1, r8
    1d9a:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1d9c:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d9e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1da0:	227f      	movs	r2, #127	; 0x7f
    1da2:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1da4:	4393      	bics	r3, r2
    1da6:	d1fc      	bne.n	1da2 <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1da8:	4642      	mov	r2, r8
    1daa:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1dac:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    1dae:	2000      	movs	r0, #0
    1db0:	e018      	b.n	1de4 <tc_init+0x248>
    1db2:	217f      	movs	r1, #127	; 0x7f
    1db4:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1db6:	438b      	bics	r3, r1
    1db8:	d1fc      	bne.n	1db4 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1dba:	4643      	mov	r3, r8
    1dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1dbe:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1dc0:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dc2:	227f      	movs	r2, #127	; 0x7f
    1dc4:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1dc6:	4393      	bics	r3, r2
    1dc8:	d1fc      	bne.n	1dc4 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1dca:	4640      	mov	r0, r8
    1dcc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1dce:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1dd0:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dd2:	227f      	movs	r2, #127	; 0x7f
    1dd4:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1dd6:	4393      	bics	r3, r2
    1dd8:	d1fc      	bne.n	1dd4 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1dda:	4641      	mov	r1, r8
    1ddc:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    1dde:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    1de0:	2000      	movs	r0, #0
    1de2:	e7ff      	b.n	1de4 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1de4:	b007      	add	sp, #28
    1de6:	bc0c      	pop	{r2, r3}
    1de8:	4690      	mov	r8, r2
    1dea:	4699      	mov	r9, r3
    1dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	00001b65 	.word	0x00001b65
    1df4:	00005a1c 	.word	0x00005a1c
    1df8:	000049fd 	.word	0x000049fd
    1dfc:	200008d4 	.word	0x200008d4
    1e00:	00001a51 	.word	0x00001a51
    1e04:	40000400 	.word	0x40000400
    1e08:	00001975 	.word	0x00001975
    1e0c:	000018e9 	.word	0x000018e9

00001e10 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1e10:	6802      	ldr	r2, [r0, #0]
    1e12:	217f      	movs	r1, #127	; 0x7f
    1e14:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1e16:	438b      	bics	r3, r1
    1e18:	d1fc      	bne.n	1e14 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1e1a:	7903      	ldrb	r3, [r0, #4]
    1e1c:	2b04      	cmp	r3, #4
    1e1e:	d005      	beq.n	1e2c <tc_get_count_value+0x1c>
    1e20:	2b08      	cmp	r3, #8
    1e22:	d009      	beq.n	1e38 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1e24:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1e26:	2b00      	cmp	r3, #0
    1e28:	d108      	bne.n	1e3c <tc_get_count_value+0x2c>
    1e2a:	e002      	b.n	1e32 <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    1e2c:	7c10      	ldrb	r0, [r2, #16]
    1e2e:	b2c0      	uxtb	r0, r0
    1e30:	e004      	b.n	1e3c <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1e32:	8a10      	ldrh	r0, [r2, #16]
    1e34:	b280      	uxth	r0, r0
    1e36:	e001      	b.n	1e3c <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    1e38:	6910      	ldr	r0, [r2, #16]
    1e3a:	e7ff      	b.n	1e3c <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    1e3c:	4770      	bx	lr
    1e3e:	46c0      	nop			; (mov r8, r8)

00001e40 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1e40:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1e42:	6804      	ldr	r4, [r0, #0]
    1e44:	257f      	movs	r5, #127	; 0x7f
    1e46:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1e48:	43ab      	bics	r3, r5
    1e4a:	d1fc      	bne.n	1e46 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1e4c:	7903      	ldrb	r3, [r0, #4]
    1e4e:	2b04      	cmp	r3, #4
    1e50:	d005      	beq.n	1e5e <tc_set_compare_value+0x1e>
    1e52:	2b08      	cmp	r3, #8
    1e54:	d014      	beq.n	1e80 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1e56:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d119      	bne.n	1e90 <tc_set_compare_value+0x50>
    1e5c:	e007      	b.n	1e6e <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1e5e:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    1e60:	2901      	cmp	r1, #1
    1e62:	d815      	bhi.n	1e90 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    1e64:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    1e66:	1861      	adds	r1, r4, r1
    1e68:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    1e6a:	2000      	movs	r0, #0
    1e6c:	e010      	b.n	1e90 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1e6e:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    1e70:	2901      	cmp	r1, #1
    1e72:	d80d      	bhi.n	1e90 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    1e74:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    1e76:	310c      	adds	r1, #12
    1e78:	0049      	lsls	r1, r1, #1
    1e7a:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    1e7c:	2000      	movs	r0, #0
    1e7e:	e007      	b.n	1e90 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1e80:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    1e82:	2901      	cmp	r1, #1
    1e84:	d804      	bhi.n	1e90 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    1e86:	3106      	adds	r1, #6
    1e88:	0089      	lsls	r1, r1, #2
    1e8a:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    1e8c:	2000      	movs	r0, #0
    1e8e:	e7ff      	b.n	1e90 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    1e90:	bd30      	pop	{r4, r5, pc}
    1e92:	46c0      	nop			; (mov r8, r8)

00001e94 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1e94:	e7fe      	b.n	1e94 <Dummy_Handler>
    1e96:	46c0      	nop			; (mov r8, r8)

00001e98 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1e98:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1e9a:	4b1c      	ldr	r3, [pc, #112]	; (1f0c <Reset_Handler+0x74>)
    1e9c:	4a1c      	ldr	r2, [pc, #112]	; (1f10 <Reset_Handler+0x78>)
    1e9e:	429a      	cmp	r2, r3
    1ea0:	d003      	beq.n	1eaa <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1ea2:	4b1c      	ldr	r3, [pc, #112]	; (1f14 <Reset_Handler+0x7c>)
    1ea4:	4a19      	ldr	r2, [pc, #100]	; (1f0c <Reset_Handler+0x74>)
    1ea6:	429a      	cmp	r2, r3
    1ea8:	d304      	bcc.n	1eb4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1eaa:	4b1b      	ldr	r3, [pc, #108]	; (1f18 <Reset_Handler+0x80>)
    1eac:	4a1b      	ldr	r2, [pc, #108]	; (1f1c <Reset_Handler+0x84>)
    1eae:	429a      	cmp	r2, r3
    1eb0:	d310      	bcc.n	1ed4 <Reset_Handler+0x3c>
    1eb2:	e01b      	b.n	1eec <Reset_Handler+0x54>
    1eb4:	4b1a      	ldr	r3, [pc, #104]	; (1f20 <Reset_Handler+0x88>)
    1eb6:	4817      	ldr	r0, [pc, #92]	; (1f14 <Reset_Handler+0x7c>)
    1eb8:	3003      	adds	r0, #3
    1eba:	1ac0      	subs	r0, r0, r3
    1ebc:	0880      	lsrs	r0, r0, #2
    1ebe:	3001      	adds	r0, #1
    1ec0:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1ec2:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1ec4:	4911      	ldr	r1, [pc, #68]	; (1f0c <Reset_Handler+0x74>)
    1ec6:	4a12      	ldr	r2, [pc, #72]	; (1f10 <Reset_Handler+0x78>)
    1ec8:	58d4      	ldr	r4, [r2, r3]
    1eca:	50cc      	str	r4, [r1, r3]
    1ecc:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1ece:	4283      	cmp	r3, r0
    1ed0:	d1fa      	bne.n	1ec8 <Reset_Handler+0x30>
    1ed2:	e7ea      	b.n	1eaa <Reset_Handler+0x12>
    1ed4:	4b11      	ldr	r3, [pc, #68]	; (1f1c <Reset_Handler+0x84>)
    1ed6:	1d1a      	adds	r2, r3, #4
    1ed8:	490f      	ldr	r1, [pc, #60]	; (1f18 <Reset_Handler+0x80>)
    1eda:	3103      	adds	r1, #3
    1edc:	1a89      	subs	r1, r1, r2
    1ede:	0889      	lsrs	r1, r1, #2
    1ee0:	0089      	lsls	r1, r1, #2
    1ee2:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1ee4:	2100      	movs	r1, #0
    1ee6:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1ee8:	4293      	cmp	r3, r2
    1eea:	d1fc      	bne.n	1ee6 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1eec:	4b0d      	ldr	r3, [pc, #52]	; (1f24 <Reset_Handler+0x8c>)
    1eee:	217f      	movs	r1, #127	; 0x7f
    1ef0:	4a0d      	ldr	r2, [pc, #52]	; (1f28 <Reset_Handler+0x90>)
    1ef2:	438a      	bics	r2, r1
    1ef4:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1ef6:	4b0d      	ldr	r3, [pc, #52]	; (1f2c <Reset_Handler+0x94>)
    1ef8:	6859      	ldr	r1, [r3, #4]
    1efa:	2280      	movs	r2, #128	; 0x80
    1efc:	430a      	orrs	r2, r1
    1efe:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1f00:	4b0b      	ldr	r3, [pc, #44]	; (1f30 <Reset_Handler+0x98>)
    1f02:	4798      	blx	r3

        /* Branch to main function */
        main();
    1f04:	4b0b      	ldr	r3, [pc, #44]	; (1f34 <Reset_Handler+0x9c>)
    1f06:	4798      	blx	r3
    1f08:	e7fe      	b.n	1f08 <Reset_Handler+0x70>
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	20000000 	.word	0x20000000
    1f10:	00005b6c 	.word	0x00005b6c
    1f14:	20000070 	.word	0x20000070
    1f18:	200009f4 	.word	0x200009f4
    1f1c:	20000070 	.word	0x20000070
    1f20:	20000004 	.word	0x20000004
    1f24:	e000ed00 	.word	0xe000ed00
    1f28:	00000000 	.word	0x00000000
    1f2c:	41004000 	.word	0x41004000
    1f30:	000049b1 	.word	0x000049b1
    1f34:	0000462d 	.word	0x0000462d

00001f38 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3a:	4647      	mov	r7, r8
    1f3c:	b480      	push	{r7}
    1f3e:	1c0c      	adds	r4, r1, #0
    1f40:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1f42:	2800      	cmp	r0, #0
    1f44:	d10c      	bne.n	1f60 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    1f46:	2a00      	cmp	r2, #0
    1f48:	dd0d      	ble.n	1f66 <_read+0x2e>
    1f4a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1f4c:	4e09      	ldr	r6, [pc, #36]	; (1f74 <_read+0x3c>)
    1f4e:	4d0a      	ldr	r5, [pc, #40]	; (1f78 <_read+0x40>)
    1f50:	6830      	ldr	r0, [r6, #0]
    1f52:	1c21      	adds	r1, r4, #0
    1f54:	682b      	ldr	r3, [r5, #0]
    1f56:	4798      	blx	r3
		ptr++;
    1f58:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1f5a:	42bc      	cmp	r4, r7
    1f5c:	d1f8      	bne.n	1f50 <_read+0x18>
    1f5e:	e004      	b.n	1f6a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1f60:	2001      	movs	r0, #1
    1f62:	4240      	negs	r0, r0
    1f64:	e002      	b.n	1f6c <_read+0x34>
	}

	for (; len > 0; --len) {
    1f66:	2000      	movs	r0, #0
    1f68:	e000      	b.n	1f6c <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    1f6a:	4640      	mov	r0, r8
	}
	return nChars;
}
    1f6c:	bc04      	pop	{r2}
    1f6e:	4690      	mov	r8, r2
    1f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	200008e8 	.word	0x200008e8
    1f78:	200008e0 	.word	0x200008e0

00001f7c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f7e:	4647      	mov	r7, r8
    1f80:	b480      	push	{r7}
    1f82:	1c0e      	adds	r6, r1, #0
    1f84:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1f86:	3801      	subs	r0, #1
    1f88:	2802      	cmp	r0, #2
    1f8a:	d810      	bhi.n	1fae <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1f8c:	2a00      	cmp	r2, #0
    1f8e:	d011      	beq.n	1fb4 <_write+0x38>
    1f90:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1f92:	4b0d      	ldr	r3, [pc, #52]	; (1fc8 <_write+0x4c>)
    1f94:	4698      	mov	r8, r3
    1f96:	4f0d      	ldr	r7, [pc, #52]	; (1fcc <_write+0x50>)
    1f98:	4643      	mov	r3, r8
    1f9a:	6818      	ldr	r0, [r3, #0]
    1f9c:	5d31      	ldrb	r1, [r6, r4]
    1f9e:	683b      	ldr	r3, [r7, #0]
    1fa0:	4798      	blx	r3
    1fa2:	2800      	cmp	r0, #0
    1fa4:	db08      	blt.n	1fb8 <_write+0x3c>
			return -1;
		}
		++nChars;
    1fa6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    1fa8:	42a5      	cmp	r5, r4
    1faa:	d1f5      	bne.n	1f98 <_write+0x1c>
    1fac:	e007      	b.n	1fbe <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1fae:	2001      	movs	r0, #1
    1fb0:	4240      	negs	r0, r0
    1fb2:	e005      	b.n	1fc0 <_write+0x44>
	}

	for (; len != 0; --len) {
    1fb4:	2000      	movs	r0, #0
    1fb6:	e003      	b.n	1fc0 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    1fb8:	2001      	movs	r0, #1
    1fba:	4240      	negs	r0, r0
    1fbc:	e000      	b.n	1fc0 <_write+0x44>
		}
		++nChars;
    1fbe:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    1fc0:	bc04      	pop	{r2}
    1fc2:	4690      	mov	r8, r2
    1fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	200008e8 	.word	0x200008e8
    1fcc:	200008e4 	.word	0x200008e4

00001fd0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1fd0:	4b06      	ldr	r3, [pc, #24]	; (1fec <_sbrk+0x1c>)
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d102      	bne.n	1fde <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1fd8:	4a05      	ldr	r2, [pc, #20]	; (1ff0 <_sbrk+0x20>)
    1fda:	4b04      	ldr	r3, [pc, #16]	; (1fec <_sbrk+0x1c>)
    1fdc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1fde:	4a03      	ldr	r2, [pc, #12]	; (1fec <_sbrk+0x1c>)
    1fe0:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    1fe2:	1818      	adds	r0, r3, r0
    1fe4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1fe6:	1c18      	adds	r0, r3, #0
    1fe8:	4770      	bx	lr
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	200000cc 	.word	0x200000cc
    1ff0:	200029f8 	.word	0x200029f8

00001ff4 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    1ff4:	2001      	movs	r0, #1
}
    1ff6:	4240      	negs	r0, r0
    1ff8:	4770      	bx	lr
    1ffa:	46c0      	nop			; (mov r8, r8)

00001ffc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1ffc:	2380      	movs	r3, #128	; 0x80
    1ffe:	019b      	lsls	r3, r3, #6
    2000:	604b      	str	r3, [r1, #4]

	return 0;
}
    2002:	2000      	movs	r0, #0
    2004:	4770      	bx	lr
    2006:	46c0      	nop			; (mov r8, r8)

00002008 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2008:	2001      	movs	r0, #1
    200a:	4770      	bx	lr

0000200c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    200c:	2000      	movs	r0, #0
    200e:	4770      	bx	lr

00002010 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2010:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    2012:	490d      	ldr	r1, [pc, #52]	; (2048 <NWK_Init+0x38>)
    2014:	2300      	movs	r3, #0
    2016:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    2018:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    201a:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    201c:	2258      	movs	r2, #88	; 0x58
    201e:	528b      	strh	r3, [r1, r2]
    2020:	1c0b      	adds	r3, r1, #0
    2022:	3308      	adds	r3, #8
    2024:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    2026:	2200      	movs	r2, #0
    2028:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    202a:	428b      	cmp	r3, r1
    202c:	d1fc      	bne.n	2028 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    202e:	4b07      	ldr	r3, [pc, #28]	; (204c <NWK_Init+0x3c>)
    2030:	4798      	blx	r3
	nwkRxInit();
    2032:	4b07      	ldr	r3, [pc, #28]	; (2050 <NWK_Init+0x40>)
    2034:	4798      	blx	r3
	nwkFrameInit();
    2036:	4b07      	ldr	r3, [pc, #28]	; (2054 <NWK_Init+0x44>)
    2038:	4798      	blx	r3
	nwkDataReqInit();
    203a:	4b07      	ldr	r3, [pc, #28]	; (2058 <NWK_Init+0x48>)
    203c:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    203e:	4b07      	ldr	r3, [pc, #28]	; (205c <NWK_Init+0x4c>)
    2040:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    2042:	4b07      	ldr	r3, [pc, #28]	; (2060 <NWK_Init+0x50>)
    2044:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    2046:	bd08      	pop	{r3, pc}
    2048:	200008ec 	.word	0x200008ec
    204c:	00002eed 	.word	0x00002eed
    2050:	00002759 	.word	0x00002759
    2054:	00002285 	.word	0x00002285
    2058:	00002101 	.word	0x00002101
    205c:	00002379 	.word	0x00002379
    2060:	00002bb9 	.word	0x00002bb9

00002064 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    2064:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    2066:	4b02      	ldr	r3, [pc, #8]	; (2070 <NWK_SetAddr+0xc>)
    2068:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    206a:	4b02      	ldr	r3, [pc, #8]	; (2074 <NWK_SetAddr+0x10>)
    206c:	4798      	blx	r3
}
    206e:	bd08      	pop	{r3, pc}
    2070:	200008ec 	.word	0x200008ec
    2074:	00003315 	.word	0x00003315

00002078 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    2078:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    207a:	4b02      	ldr	r3, [pc, #8]	; (2084 <NWK_SetPanId+0xc>)
    207c:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    207e:	4b02      	ldr	r3, [pc, #8]	; (2088 <NWK_SetPanId+0x10>)
    2080:	4798      	blx	r3
}
    2082:	bd08      	pop	{r3, pc}
    2084:	200008ec 	.word	0x200008ec
    2088:	000032f5 	.word	0x000032f5

0000208c <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    208c:	3002      	adds	r0, #2
    208e:	0080      	lsls	r0, r0, #2
    2090:	4b01      	ldr	r3, [pc, #4]	; (2098 <NWK_OpenEndpoint+0xc>)
    2092:	50c1      	str	r1, [r0, r3]
}
    2094:	4770      	bx	lr
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	200008ec 	.word	0x200008ec

0000209c <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    209c:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    209e:	4b04      	ldr	r3, [pc, #16]	; (20b0 <NWK_TaskHandler+0x14>)
    20a0:	4798      	blx	r3
	nwkTxTaskHandler();
    20a2:	4b04      	ldr	r3, [pc, #16]	; (20b4 <NWK_TaskHandler+0x18>)
    20a4:	4798      	blx	r3
	nwkDataReqTaskHandler();
    20a6:	4b04      	ldr	r3, [pc, #16]	; (20b8 <NWK_TaskHandler+0x1c>)
    20a8:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    20aa:	4b04      	ldr	r3, [pc, #16]	; (20bc <NWK_TaskHandler+0x20>)
    20ac:	4798      	blx	r3
#endif
}
    20ae:	bd08      	pop	{r3, pc}
    20b0:	000027f5 	.word	0x000027f5
    20b4:	000030f1 	.word	0x000030f1
    20b8:	00002141 	.word	0x00002141
    20bc:	00002cad 	.word	0x00002cad

000020c0 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    20c0:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    20c2:	4b0d      	ldr	r3, [pc, #52]	; (20f8 <nwkDataReqTxConf+0x38>)
    20c4:	681b      	ldr	r3, [r3, #0]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d012      	beq.n	20f0 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    20ca:	685a      	ldr	r2, [r3, #4]
    20cc:	4282      	cmp	r2, r0
    20ce:	d10c      	bne.n	20ea <nwkDataReqTxConf+0x2a>
    20d0:	e002      	b.n	20d8 <nwkDataReqTxConf+0x18>
    20d2:	685a      	ldr	r2, [r3, #4]
    20d4:	4282      	cmp	r2, r0
    20d6:	d108      	bne.n	20ea <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    20d8:	2285      	movs	r2, #133	; 0x85
    20da:	5c82      	ldrb	r2, [r0, r2]
    20dc:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    20de:	2288      	movs	r2, #136	; 0x88
    20e0:	5c82      	ldrb	r2, [r0, r2]
    20e2:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    20e4:	2202      	movs	r2, #2
    20e6:	721a      	strb	r2, [r3, #8]
			break;
    20e8:	e002      	b.n	20f0 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    20ea:	681b      	ldr	r3, [r3, #0]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d1f0      	bne.n	20d2 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    20f0:	4b02      	ldr	r3, [pc, #8]	; (20fc <nwkDataReqTxConf+0x3c>)
    20f2:	4798      	blx	r3
}
    20f4:	bd08      	pop	{r3, pc}
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	200000d0 	.word	0x200000d0
    20fc:	00002309 	.word	0x00002309

00002100 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2100:	2200      	movs	r2, #0
    2102:	4b01      	ldr	r3, [pc, #4]	; (2108 <nwkDataReqInit+0x8>)
    2104:	601a      	str	r2, [r3, #0]
}
    2106:	4770      	bx	lr
    2108:	200000d0 	.word	0x200000d0

0000210c <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    210c:	2300      	movs	r3, #0
    210e:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    2110:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    2112:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    2114:	4a08      	ldr	r2, [pc, #32]	; (2138 <NWK_DataReq+0x2c>)
    2116:	2358      	movs	r3, #88	; 0x58
    2118:	5ad1      	ldrh	r1, [r2, r3]
    211a:	3101      	adds	r1, #1
    211c:	52d1      	strh	r1, [r2, r3]

	if (NULL == nwkDataReqQueue) {
    211e:	4b07      	ldr	r3, [pc, #28]	; (213c <NWK_DataReq+0x30>)
    2120:	681b      	ldr	r3, [r3, #0]
    2122:	2b00      	cmp	r3, #0
    2124:	d103      	bne.n	212e <NWK_DataReq+0x22>
		req->next = NULL;
    2126:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2128:	4b04      	ldr	r3, [pc, #16]	; (213c <NWK_DataReq+0x30>)
    212a:	6018      	str	r0, [r3, #0]
    212c:	e002      	b.n	2134 <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    212e:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2130:	4b02      	ldr	r3, [pc, #8]	; (213c <NWK_DataReq+0x30>)
    2132:	6018      	str	r0, [r3, #0]
	}
}
    2134:	4770      	bx	lr
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	200008ec 	.word	0x200008ec
    213c:	200000d0 	.word	0x200000d0

00002140 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    2140:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2142:	4b4a      	ldr	r3, [pc, #296]	; (226c <nwkDataReqTaskHandler+0x12c>)
    2144:	681a      	ldr	r2, [r3, #0]
    2146:	2a00      	cmp	r2, #0
    2148:	d100      	bne.n	214c <nwkDataReqTaskHandler+0xc>
    214a:	e08d      	b.n	2268 <nwkDataReqTaskHandler+0x128>
    214c:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    214e:	7a23      	ldrb	r3, [r4, #8]
    2150:	2b00      	cmp	r3, #0
    2152:	d002      	beq.n	215a <nwkDataReqTaskHandler+0x1a>
    2154:	2b02      	cmp	r3, #2
    2156:	d06d      	beq.n	2234 <nwkDataReqTaskHandler+0xf4>
    2158:	e082      	b.n	2260 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    215a:	4b45      	ldr	r3, [pc, #276]	; (2270 <nwkDataReqTaskHandler+0x130>)
    215c:	4798      	blx	r3
    215e:	1e05      	subs	r5, r0, #0
    2160:	d103      	bne.n	216a <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    2162:	2302      	movs	r3, #2
    2164:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    2166:	7723      	strb	r3, [r4, #28]
    2168:	e07e      	b.n	2268 <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    216a:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    216c:	2201      	movs	r2, #1
    216e:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    2170:	4b40      	ldr	r3, [pc, #256]	; (2274 <nwkDataReqTaskHandler+0x134>)
    2172:	2189      	movs	r1, #137	; 0x89
    2174:	5443      	strb	r3, [r0, r1]
    2176:	0a18      	lsrs	r0, r3, #8
    2178:	218a      	movs	r1, #138	; 0x8a
    217a:	5468      	strb	r0, [r5, r1]
    217c:	0c18      	lsrs	r0, r3, #16
    217e:	218b      	movs	r1, #139	; 0x8b
    2180:	5468      	strb	r0, [r5, r1]
    2182:	0e1b      	lsrs	r3, r3, #24
    2184:	218c      	movs	r1, #140	; 0x8c
    2186:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    2188:	7ba0      	ldrb	r0, [r4, #14]
    218a:	0880      	lsrs	r0, r0, #2
    218c:	2301      	movs	r3, #1
    218e:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    2190:	2188      	movs	r1, #136	; 0x88
    2192:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    2194:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    2196:	4019      	ands	r1, r3
    2198:	7ae8      	ldrb	r0, [r5, #11]
    219a:	4390      	bics	r0, r2
    219c:	1c02      	adds	r2, r0, #0
    219e:	430a      	orrs	r2, r1
    21a0:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    21a2:	7ba1      	ldrb	r1, [r4, #14]
    21a4:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    21a6:	4019      	ands	r1, r3
    21a8:	0089      	lsls	r1, r1, #2
    21aa:	b2d2      	uxtb	r2, r2
    21ac:	2004      	movs	r0, #4
    21ae:	4382      	bics	r2, r0
    21b0:	430a      	orrs	r2, r1
    21b2:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    21b4:	7ba2      	ldrb	r2, [r4, #14]
    21b6:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    21b8:	4013      	ands	r3, r2
    21ba:	005a      	lsls	r2, r3, #1
    21bc:	7aeb      	ldrb	r3, [r5, #11]
    21be:	2102      	movs	r1, #2
    21c0:	438b      	bics	r3, r1
    21c2:	4313      	orrs	r3, r2
    21c4:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    21c6:	4b2c      	ldr	r3, [pc, #176]	; (2278 <nwkDataReqTaskHandler+0x138>)
    21c8:	791a      	ldrb	r2, [r3, #4]
    21ca:	3201      	adds	r2, #1
    21cc:	b2d2      	uxtb	r2, r2
    21ce:	711a      	strb	r2, [r3, #4]
    21d0:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    21d2:	781a      	ldrb	r2, [r3, #0]
    21d4:	736a      	strb	r2, [r5, #13]
    21d6:	785b      	ldrb	r3, [r3, #1]
    21d8:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    21da:	8963      	ldrh	r3, [r4, #10]
    21dc:	7aa2      	ldrb	r2, [r4, #10]
    21de:	73ea      	strb	r2, [r5, #15]
    21e0:	0a1b      	lsrs	r3, r3, #8
    21e2:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    21e4:	7b61      	ldrb	r1, [r4, #13]
    21e6:	230f      	movs	r3, #15
    21e8:	4019      	ands	r1, r3
    21ea:	7c6a      	ldrb	r2, [r5, #17]
    21ec:	200f      	movs	r0, #15
    21ee:	4382      	bics	r2, r0
    21f0:	430a      	orrs	r2, r1
    21f2:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    21f4:	7b22      	ldrb	r2, [r4, #12]
    21f6:	0112      	lsls	r2, r2, #4
    21f8:	7c69      	ldrb	r1, [r5, #17]
    21fa:	400b      	ands	r3, r1
    21fc:	4313      	orrs	r3, r2
    21fe:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    2200:	2381      	movs	r3, #129	; 0x81
    2202:	5ceb      	ldrb	r3, [r5, r3]
    2204:	2282      	movs	r2, #130	; 0x82
    2206:	5ca8      	ldrb	r0, [r5, r2]
    2208:	0200      	lsls	r0, r0, #8
    220a:	4318      	orrs	r0, r3
    220c:	2383      	movs	r3, #131	; 0x83
    220e:	5ceb      	ldrb	r3, [r5, r3]
    2210:	041b      	lsls	r3, r3, #16
    2212:	4318      	orrs	r0, r3
    2214:	2384      	movs	r3, #132	; 0x84
    2216:	5ceb      	ldrb	r3, [r5, r3]
    2218:	061b      	lsls	r3, r3, #24
    221a:	4318      	orrs	r0, r3
    221c:	7d22      	ldrb	r2, [r4, #20]
    221e:	6921      	ldr	r1, [r4, #16]
    2220:	4b16      	ldr	r3, [pc, #88]	; (227c <nwkDataReqTaskHandler+0x13c>)
    2222:	4798      	blx	r3
	frame->size += req->size;
    2224:	7d22      	ldrb	r2, [r4, #20]
    2226:	786b      	ldrb	r3, [r5, #1]
    2228:	18d3      	adds	r3, r2, r3
    222a:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    222c:	1c28      	adds	r0, r5, #0
    222e:	4b14      	ldr	r3, [pc, #80]	; (2280 <nwkDataReqTaskHandler+0x140>)
    2230:	4798      	blx	r3
    2232:	e019      	b.n	2268 <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    2234:	4294      	cmp	r4, r2
    2236:	d103      	bne.n	2240 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    2238:	4b0c      	ldr	r3, [pc, #48]	; (226c <nwkDataReqTaskHandler+0x12c>)
    223a:	6822      	ldr	r2, [r4, #0]
    223c:	601a      	str	r2, [r3, #0]
    223e:	e006      	b.n	224e <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    2240:	6813      	ldr	r3, [r2, #0]
    2242:	429c      	cmp	r4, r3
    2244:	d001      	beq.n	224a <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    2246:	1c1a      	adds	r2, r3, #0
    2248:	e7fa      	b.n	2240 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    224a:	6823      	ldr	r3, [r4, #0]
    224c:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    224e:	4a0a      	ldr	r2, [pc, #40]	; (2278 <nwkDataReqTaskHandler+0x138>)
    2250:	2358      	movs	r3, #88	; 0x58
    2252:	5ad1      	ldrh	r1, [r2, r3]
    2254:	3901      	subs	r1, #1
    2256:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    2258:	69a3      	ldr	r3, [r4, #24]
    225a:	1c20      	adds	r0, r4, #0
    225c:	4798      	blx	r3
    225e:	e003      	b.n	2268 <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2260:	6824      	ldr	r4, [r4, #0]
    2262:	2c00      	cmp	r4, #0
    2264:	d000      	beq.n	2268 <nwkDataReqTaskHandler+0x128>
    2266:	e772      	b.n	214e <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    2268:	bd38      	pop	{r3, r4, r5, pc}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	200000d0 	.word	0x200000d0
    2270:	00002299 	.word	0x00002299
    2274:	000020c1 	.word	0x000020c1
    2278:	200008ec 	.word	0x200008ec
    227c:	000049fd 	.word	0x000049fd
    2280:	00002f21 	.word	0x00002f21

00002284 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    2284:	4b03      	ldr	r3, [pc, #12]	; (2294 <nwkFrameInit+0x10>)
    2286:	2200      	movs	r2, #0
    2288:	701a      	strb	r2, [r3, #0]
    228a:	218d      	movs	r1, #141	; 0x8d
    228c:	545a      	strb	r2, [r3, r1]
    228e:	0049      	lsls	r1, r1, #1
    2290:	545a      	strb	r2, [r3, r1]
	}
}
    2292:	4770      	bx	lr
    2294:	200000d4 	.word	0x200000d4

00002298 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    2298:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    229a:	4b18      	ldr	r3, [pc, #96]	; (22fc <nwkFrameAlloc+0x64>)
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d00e      	beq.n	22c0 <nwkFrameAlloc+0x28>
    22a2:	238d      	movs	r3, #141	; 0x8d
    22a4:	4a15      	ldr	r2, [pc, #84]	; (22fc <nwkFrameAlloc+0x64>)
    22a6:	5cd3      	ldrb	r3, [r2, r3]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d007      	beq.n	22bc <nwkFrameAlloc+0x24>
    22ac:	238d      	movs	r3, #141	; 0x8d
    22ae:	005b      	lsls	r3, r3, #1
    22b0:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    22b2:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    22b4:	2b00      	cmp	r3, #0
    22b6:	d11f      	bne.n	22f8 <nwkFrameAlloc+0x60>
    22b8:	2302      	movs	r3, #2
    22ba:	e002      	b.n	22c2 <nwkFrameAlloc+0x2a>
    22bc:	2301      	movs	r3, #1
    22be:	e000      	b.n	22c2 <nwkFrameAlloc+0x2a>
    22c0:	2300      	movs	r3, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    22c2:	4e0e      	ldr	r6, [pc, #56]	; (22fc <nwkFrameAlloc+0x64>)
    22c4:	258d      	movs	r5, #141	; 0x8d
    22c6:	435d      	muls	r5, r3
    22c8:	1974      	adds	r4, r6, r5
    22ca:	1c20      	adds	r0, r4, #0
    22cc:	2100      	movs	r1, #0
    22ce:	228d      	movs	r2, #141	; 0x8d
    22d0:	4b0b      	ldr	r3, [pc, #44]	; (2300 <nwkFrameAlloc+0x68>)
    22d2:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    22d4:	2310      	movs	r3, #16
    22d6:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    22d8:	1c23      	adds	r3, r4, #0
    22da:	3380      	adds	r3, #128	; 0x80
    22dc:	1c22      	adds	r2, r4, #0
    22de:	3212      	adds	r2, #18
    22e0:	705a      	strb	r2, [r3, #1]
    22e2:	0a11      	lsrs	r1, r2, #8
    22e4:	7099      	strb	r1, [r3, #2]
    22e6:	0c11      	lsrs	r1, r2, #16
    22e8:	70d9      	strb	r1, [r3, #3]
    22ea:	0e12      	lsrs	r2, r2, #24
    22ec:	711a      	strb	r2, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    22ee:	4a05      	ldr	r2, [pc, #20]	; (2304 <nwkFrameAlloc+0x6c>)
    22f0:	2358      	movs	r3, #88	; 0x58
    22f2:	5ad1      	ldrh	r1, [r2, r3]
    22f4:	3101      	adds	r1, #1
    22f6:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    22f8:	1c20      	adds	r0, r4, #0
    22fa:	bd70      	pop	{r4, r5, r6, pc}
    22fc:	200000d4 	.word	0x200000d4
    2300:	00004a0f 	.word	0x00004a0f
    2304:	200008ec 	.word	0x200008ec

00002308 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2308:	2300      	movs	r3, #0
    230a:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    230c:	4a02      	ldr	r2, [pc, #8]	; (2318 <nwkFrameFree+0x10>)
    230e:	2358      	movs	r3, #88	; 0x58
    2310:	5ad1      	ldrh	r1, [r2, r3]
    2312:	3901      	subs	r1, #1
    2314:	52d1      	strh	r1, [r2, r3]
}
    2316:	4770      	bx	lr
    2318:	200008ec 	.word	0x200008ec

0000231c <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    231c:	2800      	cmp	r0, #0
    231e:	d006      	beq.n	232e <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2320:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2322:	4b0c      	ldr	r3, [pc, #48]	; (2354 <nwkFrameNext+0x38>)
    2324:	33a8      	adds	r3, #168	; 0xa8
    2326:	33ff      	adds	r3, #255	; 0xff
    2328:	4298      	cmp	r0, r3
    232a:	d301      	bcc.n	2330 <nwkFrameNext+0x14>
    232c:	e00f      	b.n	234e <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    232e:	4809      	ldr	r0, [pc, #36]	; (2354 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2330:	7803      	ldrb	r3, [r0, #0]
    2332:	2b00      	cmp	r3, #0
    2334:	d10c      	bne.n	2350 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2336:	4a07      	ldr	r2, [pc, #28]	; (2354 <nwkFrameNext+0x38>)
    2338:	32a8      	adds	r2, #168	; 0xa8
    233a:	32ff      	adds	r2, #255	; 0xff
    233c:	e002      	b.n	2344 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    233e:	7803      	ldrb	r3, [r0, #0]
    2340:	2b00      	cmp	r3, #0
    2342:	d105      	bne.n	2350 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    2344:	308d      	adds	r0, #141	; 0x8d
    2346:	4290      	cmp	r0, r2
    2348:	d3f9      	bcc.n	233e <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    234a:	2000      	movs	r0, #0
    234c:	e000      	b.n	2350 <nwkFrameNext+0x34>
    234e:	2000      	movs	r0, #0
}
    2350:	4770      	bx	lr
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	200000d4 	.word	0x200000d4

00002358 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    2358:	2200      	movs	r2, #0
    235a:	2385      	movs	r3, #133	; 0x85
    235c:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    235e:	4b05      	ldr	r3, [pc, #20]	; (2374 <nwkFrameCommandInit+0x1c>)
    2360:	791a      	ldrb	r2, [r3, #4]
    2362:	3201      	adds	r2, #1
    2364:	b2d2      	uxtb	r2, r2
    2366:	711a      	strb	r2, [r3, #4]
    2368:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    236a:	781a      	ldrb	r2, [r3, #0]
    236c:	7342      	strb	r2, [r0, #13]
    236e:	785b      	ldrb	r3, [r3, #1]
    2370:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    2372:	4770      	bx	lr
    2374:	200008ec 	.word	0x200008ec

00002378 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    2378:	b5f0      	push	{r4, r5, r6, r7, lr}
    237a:	4a09      	ldr	r2, [pc, #36]	; (23a0 <nwkRouteInit+0x28>)
    237c:	3202      	adds	r2, #2
    237e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    2380:	2701      	movs	r7, #1
    2382:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    2384:	4806      	ldr	r0, [pc, #24]	; (23a0 <nwkRouteInit+0x28>)
    2386:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    2388:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    238a:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    238c:	00d9      	lsls	r1, r3, #3
    238e:	5c0c      	ldrb	r4, [r1, r0]
    2390:	43b4      	bics	r4, r6
    2392:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    2394:	7115      	strb	r5, [r2, #4]
    2396:	3301      	adds	r3, #1
    2398:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    239a:	2b64      	cmp	r3, #100	; 0x64
    239c:	d1f5      	bne.n	238a <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    239e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a0:	2000027c 	.word	0x2000027c

000023a4 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    23a4:	b570      	push	{r4, r5, r6, lr}
    23a6:	4a0b      	ldr	r2, [pc, #44]	; (23d4 <NWK_RouteFindEntry+0x30>)
    23a8:	3202      	adds	r2, #2
    23aa:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    23ac:	4e09      	ldr	r6, [pc, #36]	; (23d4 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    23ae:	8814      	ldrh	r4, [r2, #0]
    23b0:	4284      	cmp	r4, r0
    23b2:	d109      	bne.n	23c8 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    23b4:	00dc      	lsls	r4, r3, #3
    23b6:	5da4      	ldrb	r4, [r4, r6]
    23b8:	07a4      	lsls	r4, r4, #30
    23ba:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    23bc:	428c      	cmp	r4, r1
    23be:	d103      	bne.n	23c8 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    23c0:	00dd      	lsls	r5, r3, #3
    23c2:	4804      	ldr	r0, [pc, #16]	; (23d4 <NWK_RouteFindEntry+0x30>)
    23c4:	1940      	adds	r0, r0, r5
    23c6:	e004      	b.n	23d2 <NWK_RouteFindEntry+0x2e>
    23c8:	3301      	adds	r3, #1
    23ca:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    23cc:	2b64      	cmp	r3, #100	; 0x64
    23ce:	d1ee      	bne.n	23ae <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    23d0:	2000      	movs	r0, #0
}
    23d2:	bd70      	pop	{r4, r5, r6, pc}
    23d4:	2000027c 	.word	0x2000027c

000023d8 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    23d8:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    23da:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    23dc:	4810      	ldr	r0, [pc, #64]	; (2420 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    23de:	24c8      	movs	r4, #200	; 0xc8
    23e0:	00a4      	lsls	r4, r4, #2
    23e2:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    23e4:	7803      	ldrb	r3, [r0, #0]
    23e6:	07dc      	lsls	r4, r3, #31
    23e8:	d40b      	bmi.n	2402 <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    23ea:	7983      	ldrb	r3, [r0, #6]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d00c      	beq.n	240a <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    23f0:	2a00      	cmp	r2, #0
    23f2:	d003      	beq.n	23fc <NWK_RouteNewEntry+0x24>
    23f4:	7994      	ldrb	r4, [r2, #6]
    23f6:	429c      	cmp	r4, r3
    23f8:	d802      	bhi.n	2400 <NWK_RouteNewEntry+0x28>
    23fa:	e002      	b.n	2402 <NWK_RouteNewEntry+0x2a>
    23fc:	1c02      	adds	r2, r0, #0
    23fe:	e000      	b.n	2402 <NWK_RouteNewEntry+0x2a>
    2400:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2402:	3008      	adds	r0, #8
    2404:	4288      	cmp	r0, r1
    2406:	d1ed      	bne.n	23e4 <NWK_RouteNewEntry+0xc>
    2408:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    240a:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    240c:	2202      	movs	r2, #2
    240e:	4393      	bics	r3, r2
    2410:	220f      	movs	r2, #15
    2412:	4013      	ands	r3, r2
    2414:	2230      	movs	r2, #48	; 0x30
    2416:	4313      	orrs	r3, r2
    2418:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    241a:	2380      	movs	r3, #128	; 0x80
    241c:	7183      	strb	r3, [r0, #6]

	return entry;
}
    241e:	bd10      	pop	{r4, pc}
    2420:	2000027c 	.word	0x2000027c

00002424 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    2424:	7803      	ldrb	r3, [r0, #0]
    2426:	07da      	lsls	r2, r3, #31
    2428:	d404      	bmi.n	2434 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    242a:	2301      	movs	r3, #1
    242c:	425b      	negs	r3, r3
    242e:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2430:	2300      	movs	r3, #0
    2432:	7183      	strb	r3, [r0, #6]
}
    2434:	4770      	bx	lr
    2436:	46c0      	nop			; (mov r8, r8)

00002438 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2438:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    243a:	4b04      	ldr	r3, [pc, #16]	; (244c <NWK_RouteNextHop+0x14>)
    243c:	4798      	blx	r3
	if (entry) {
    243e:	2800      	cmp	r0, #0
    2440:	d001      	beq.n	2446 <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    2442:	8880      	ldrh	r0, [r0, #4]
    2444:	e000      	b.n	2448 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    2446:	4802      	ldr	r0, [pc, #8]	; (2450 <NWK_RouteNextHop+0x18>)
}
    2448:	bd08      	pop	{r3, pc}
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	000023a5 	.word	0x000023a5
    2450:	0000ffff 	.word	0x0000ffff

00002454 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    2454:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2456:	4b03      	ldr	r3, [pc, #12]	; (2464 <nwkRouteRemove+0x10>)
    2458:	4798      	blx	r3
	if (entry) {
    245a:	2800      	cmp	r0, #0
    245c:	d001      	beq.n	2462 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    245e:	4b02      	ldr	r3, [pc, #8]	; (2468 <nwkRouteRemove+0x14>)
    2460:	4798      	blx	r3
	}
}
    2462:	bd08      	pop	{r3, pc}
    2464:	000023a5 	.word	0x000023a5
    2468:	00002425 	.word	0x00002425

0000246c <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    246c:	b538      	push	{r3, r4, r5, lr}
    246e:	1c04      	adds	r4, r0, #0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    2470:	7a42      	ldrb	r2, [r0, #9]
    2472:	7a85      	ldrb	r5, [r0, #10]
    2474:	022d      	lsls	r5, r5, #8
    2476:	4315      	orrs	r5, r2
    2478:	b22b      	sxth	r3, r5
    247a:	2b00      	cmp	r3, #0
    247c:	da05      	bge.n	248a <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    247e:	7b42      	ldrb	r2, [r0, #13]
    2480:	7b83      	ldrb	r3, [r0, #14]
    2482:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    2484:	4313      	orrs	r3, r2
    2486:	429d      	cmp	r5, r3
    2488:	d141      	bne.n	250e <nwkRouteFrameReceived+0xa2>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    248a:	7961      	ldrb	r1, [r4, #5]
    248c:	79a2      	ldrb	r2, [r4, #6]
    248e:	0212      	lsls	r2, r2, #8
    2490:	430a      	orrs	r2, r1
    2492:	4b1f      	ldr	r3, [pc, #124]	; (2510 <nwkRouteFrameReceived+0xa4>)
    2494:	429a      	cmp	r2, r3
    2496:	d03a      	beq.n	250e <nwkRouteFrameReceived+0xa2>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    2498:	7b62      	ldrb	r2, [r4, #13]
    249a:	7ba0      	ldrb	r0, [r4, #14]
    249c:	0200      	lsls	r0, r0, #8
    249e:	4310      	orrs	r0, r2
    24a0:	2100      	movs	r1, #0
    24a2:	4b1c      	ldr	r3, [pc, #112]	; (2514 <nwkRouteFrameReceived+0xa8>)
    24a4:	4798      	blx	r3

	if (entry) {
    24a6:	2800      	cmp	r0, #0
    24a8:	d022      	beq.n	24f0 <nwkRouteFrameReceived+0x84>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    24aa:	79e1      	ldrb	r1, [r4, #7]
    24ac:	7a22      	ldrb	r2, [r4, #8]
    24ae:	0212      	lsls	r2, r2, #8
    24b0:	430a      	orrs	r2, r1
    24b2:	2100      	movs	r1, #0
    24b4:	4b16      	ldr	r3, [pc, #88]	; (2510 <nwkRouteFrameReceived+0xa4>)
    24b6:	429a      	cmp	r2, r3
    24b8:	d108      	bne.n	24cc <nwkRouteFrameReceived+0x60>
				nwkIb.addr == header->nwkDstAddr);
    24ba:	7be2      	ldrb	r2, [r4, #15]
    24bc:	7c21      	ldrb	r1, [r4, #16]
    24be:	0209      	lsls	r1, r1, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    24c0:	4b15      	ldr	r3, [pc, #84]	; (2518 <nwkRouteFrameReceived+0xac>)
    24c2:	881b      	ldrh	r3, [r3, #0]
    24c4:	4311      	orrs	r1, r2
    24c6:	1a59      	subs	r1, r3, r1
    24c8:	424b      	negs	r3, r1
    24ca:	4159      	adcs	r1, r3
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    24cc:	8883      	ldrh	r3, [r0, #4]
    24ce:	42ab      	cmp	r3, r5
    24d0:	d004      	beq.n	24dc <nwkRouteFrameReceived+0x70>
    24d2:	2385      	movs	r3, #133	; 0x85
    24d4:	5ce2      	ldrb	r2, [r4, r3]
    24d6:	79c3      	ldrb	r3, [r0, #7]
    24d8:	429a      	cmp	r2, r3
    24da:	d801      	bhi.n	24e0 <nwkRouteFrameReceived+0x74>
				entry->lqi) || discovery) {
    24dc:	2900      	cmp	r1, #0
    24de:	d013      	beq.n	2508 <nwkRouteFrameReceived+0x9c>
			entry->nextHopAddr = header->macSrcAddr;
    24e0:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    24e2:	7803      	ldrb	r3, [r0, #0]
    24e4:	220f      	movs	r2, #15
    24e6:	4013      	ands	r3, r2
    24e8:	2230      	movs	r2, #48	; 0x30
    24ea:	4313      	orrs	r3, r2
    24ec:	7003      	strb	r3, [r0, #0]
    24ee:	e00b      	b.n	2508 <nwkRouteFrameReceived+0x9c>
		}
	} else {
		entry = NWK_RouteNewEntry();
    24f0:	4b0a      	ldr	r3, [pc, #40]	; (251c <nwkRouteFrameReceived+0xb0>)
    24f2:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    24f4:	7b61      	ldrb	r1, [r4, #13]
    24f6:	7ba2      	ldrb	r2, [r4, #14]
    24f8:	0212      	lsls	r2, r2, #8
    24fa:	430a      	orrs	r2, r1
    24fc:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    24fe:	7a62      	ldrb	r2, [r4, #9]
    2500:	7aa3      	ldrb	r3, [r4, #10]
    2502:	021b      	lsls	r3, r3, #8
    2504:	4313      	orrs	r3, r2
    2506:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    2508:	2385      	movs	r3, #133	; 0x85
    250a:	5ce3      	ldrb	r3, [r4, r3]
    250c:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    250e:	bd38      	pop	{r3, r4, r5, pc}
    2510:	0000ffff 	.word	0x0000ffff
    2514:	000023a5 	.word	0x000023a5
    2518:	200008ec 	.word	0x200008ec
    251c:	000023d9 	.word	0x000023d9

00002520 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    2520:	b510      	push	{r4, lr}
    2522:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    2524:	7bc3      	ldrb	r3, [r0, #15]
    2526:	7c00      	ldrb	r0, [r0, #16]
    2528:	0200      	lsls	r0, r0, #8
    252a:	4318      	orrs	r0, r3
    252c:	4b1b      	ldr	r3, [pc, #108]	; (259c <nwkRouteFrameSent+0x7c>)
    252e:	4298      	cmp	r0, r3
    2530:	d032      	beq.n	2598 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    2532:	7ae1      	ldrb	r1, [r4, #11]
    2534:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    2536:	0fc9      	lsrs	r1, r1, #31
    2538:	4b19      	ldr	r3, [pc, #100]	; (25a0 <nwkRouteFrameSent+0x80>)
    253a:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    253c:	2800      	cmp	r0, #0
    253e:	d02b      	beq.n	2598 <nwkRouteFrameSent+0x78>
    2540:	7803      	ldrb	r3, [r0, #0]
    2542:	07da      	lsls	r2, r3, #31
    2544:	d428      	bmi.n	2598 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2546:	2385      	movs	r3, #133	; 0x85
    2548:	5ce3      	ldrb	r3, [r4, r3]
    254a:	2b00      	cmp	r3, #0
    254c:	d117      	bne.n	257e <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    254e:	7803      	ldrb	r3, [r0, #0]
    2550:	220f      	movs	r2, #15
    2552:	4013      	ands	r3, r2
    2554:	2230      	movs	r2, #48	; 0x30
    2556:	4313      	orrs	r3, r2
    2558:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    255a:	7983      	ldrb	r3, [r0, #6]
    255c:	3301      	adds	r3, #1
    255e:	b2db      	uxtb	r3, r3
    2560:	7183      	strb	r3, [r0, #6]
    2562:	2bff      	cmp	r3, #255	; 0xff
    2564:	d118      	bne.n	2598 <nwkRouteFrameSent+0x78>
    2566:	490f      	ldr	r1, [pc, #60]	; (25a4 <nwkRouteFrameSent+0x84>)
    2568:	1d8b      	adds	r3, r1, #6
    256a:	4a0f      	ldr	r2, [pc, #60]	; (25a8 <nwkRouteFrameSent+0x88>)
    256c:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    256e:	781a      	ldrb	r2, [r3, #0]
    2570:	0852      	lsrs	r2, r2, #1
    2572:	3201      	adds	r2, #1
    2574:	701a      	strb	r2, [r3, #0]
    2576:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2578:	428b      	cmp	r3, r1
    257a:	d1f8      	bne.n	256e <nwkRouteFrameSent+0x4e>
    257c:	e00c      	b.n	2598 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    257e:	7802      	ldrb	r2, [r0, #0]
    2580:	0913      	lsrs	r3, r2, #4
    2582:	330f      	adds	r3, #15
    2584:	210f      	movs	r1, #15
    2586:	400b      	ands	r3, r1
    2588:	011c      	lsls	r4, r3, #4
    258a:	400a      	ands	r2, r1
    258c:	4322      	orrs	r2, r4
    258e:	7002      	strb	r2, [r0, #0]
    2590:	2b00      	cmp	r3, #0
    2592:	d101      	bne.n	2598 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    2594:	4b05      	ldr	r3, [pc, #20]	; (25ac <nwkRouteFrameSent+0x8c>)
    2596:	4798      	blx	r3
		}
	}
}
    2598:	bd10      	pop	{r4, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	0000ffff 	.word	0x0000ffff
    25a0:	000023a5 	.word	0x000023a5
    25a4:	2000027c 	.word	0x2000027c
    25a8:	00000326 	.word	0x00000326
    25ac:	00002425 	.word	0x00002425

000025b0 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    25b0:	b510      	push	{r4, lr}
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    25b2:	7bc1      	ldrb	r1, [r0, #15]
    25b4:	7c03      	ldrb	r3, [r0, #16]
    25b6:	021b      	lsls	r3, r3, #8
    25b8:	430b      	orrs	r3, r1
    25ba:	4a0d      	ldr	r2, [pc, #52]	; (25f0 <nwkRoutePrepareTx+0x40>)
    25bc:	4293      	cmp	r3, r2
    25be:	d104      	bne.n	25ca <nwkRoutePrepareTx+0x1a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    25c0:	2301      	movs	r3, #1
    25c2:	425b      	negs	r3, r3
    25c4:	71c3      	strb	r3, [r0, #7]
    25c6:	7203      	strb	r3, [r0, #8]
    25c8:	e010      	b.n	25ec <nwkRoutePrepareTx+0x3c>
	} else if (header->nwkFcf.linkLocal) {
    25ca:	7ac2      	ldrb	r2, [r0, #11]
    25cc:	0751      	lsls	r1, r2, #29
    25ce:	d503      	bpl.n	25d8 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    25d0:	71c3      	strb	r3, [r0, #7]
    25d2:	0a1b      	lsrs	r3, r3, #8
    25d4:	7203      	strb	r3, [r0, #8]
    25d6:	e009      	b.n	25ec <nwkRoutePrepareTx+0x3c>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    25d8:	1c84      	adds	r4, r0, #2
    25da:	7ac1      	ldrb	r1, [r0, #11]
    25dc:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    25de:	0fc9      	lsrs	r1, r1, #31
    25e0:	1c18      	adds	r0, r3, #0
    25e2:	4b04      	ldr	r3, [pc, #16]	; (25f4 <nwkRoutePrepareTx+0x44>)
    25e4:	4798      	blx	r3
    25e6:	7160      	strb	r0, [r4, #5]
    25e8:	0a00      	lsrs	r0, r0, #8
    25ea:	71a0      	strb	r0, [r4, #6]
			nwkRouteDiscoveryRequest(frame);
		}

  #endif
	}
}
    25ec:	bd10      	pop	{r4, pc}
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	0000ffff 	.word	0x0000ffff
    25f4:	00002439 	.word	0x00002439

000025f8 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    25f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fa:	4647      	mov	r7, r8
    25fc:	b480      	push	{r7}
    25fe:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2600:	7bc2      	ldrb	r2, [r0, #15]
    2602:	7c06      	ldrb	r6, [r0, #16]
    2604:	0236      	lsls	r6, r6, #8
    2606:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    2608:	7ac7      	ldrb	r7, [r0, #11]
    260a:	073f      	lsls	r7, r7, #28
    260c:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    260e:	b2f9      	uxtb	r1, r7
    2610:	1c30      	adds	r0, r6, #0
    2612:	4b28      	ldr	r3, [pc, #160]	; (26b4 <nwkRouteFrame+0xbc>)
    2614:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    2616:	4b28      	ldr	r3, [pc, #160]	; (26b8 <nwkRouteFrame+0xc0>)
    2618:	4298      	cmp	r0, r3
    261a:	d00f      	beq.n	263c <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    261c:	2200      	movs	r2, #0
    261e:	2389      	movs	r3, #137	; 0x89
    2620:	54e2      	strb	r2, [r4, r3]
    2622:	238a      	movs	r3, #138	; 0x8a
    2624:	54e2      	strb	r2, [r4, r3]
    2626:	238b      	movs	r3, #139	; 0x8b
    2628:	54e2      	strb	r2, [r4, r3]
    262a:	238c      	movs	r3, #140	; 0x8c
    262c:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    262e:	2202      	movs	r2, #2
    2630:	2388      	movs	r3, #136	; 0x88
    2632:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    2634:	1c20      	adds	r0, r4, #0
    2636:	4b21      	ldr	r3, [pc, #132]	; (26bc <nwkRouteFrame+0xc4>)
    2638:	4798      	blx	r3
    263a:	e038      	b.n	26ae <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    263c:	7b62      	ldrb	r2, [r4, #13]
    263e:	7ba3      	ldrb	r3, [r4, #14]
    2640:	021b      	lsls	r3, r3, #8
    2642:	4313      	orrs	r3, r2
    2644:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    2646:	4b1e      	ldr	r3, [pc, #120]	; (26c0 <nwkRouteFrame+0xc8>)
    2648:	4798      	blx	r3
    264a:	1e05      	subs	r5, r0, #0
    264c:	d02c      	beq.n	26a8 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    264e:	4b1d      	ldr	r3, [pc, #116]	; (26c4 <nwkRouteFrame+0xcc>)
    2650:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    2652:	786b      	ldrb	r3, [r5, #1]
    2654:	3306      	adds	r3, #6
    2656:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    2658:	2200      	movs	r2, #0
    265a:	2389      	movs	r3, #137	; 0x89
    265c:	54ea      	strb	r2, [r5, r3]
    265e:	238a      	movs	r3, #138	; 0x8a
    2660:	54ea      	strb	r2, [r5, r3]
    2662:	238b      	movs	r3, #139	; 0x8b
    2664:	54ea      	strb	r2, [r5, r3]
    2666:	238c      	movs	r3, #140	; 0x8c
    2668:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    266a:	21ff      	movs	r1, #255	; 0xff
    266c:	4643      	mov	r3, r8
    266e:	4019      	ands	r1, r3
    2670:	73e9      	strb	r1, [r5, #15]
    2672:	0a1a      	lsrs	r2, r3, #8
    2674:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    2676:	2381      	movs	r3, #129	; 0x81
    2678:	5ce8      	ldrb	r0, [r5, r3]
    267a:	2382      	movs	r3, #130	; 0x82
    267c:	5ceb      	ldrb	r3, [r5, r3]
    267e:	021b      	lsls	r3, r3, #8
    2680:	4303      	orrs	r3, r0
    2682:	2083      	movs	r0, #131	; 0x83
    2684:	5c28      	ldrb	r0, [r5, r0]
    2686:	0400      	lsls	r0, r0, #16
    2688:	4303      	orrs	r3, r0
    268a:	2084      	movs	r0, #132	; 0x84
    268c:	5c28      	ldrb	r0, [r5, r0]
    268e:	0600      	lsls	r0, r0, #24
    2690:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    2692:	2001      	movs	r0, #1
    2694:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    2696:	7059      	strb	r1, [r3, #1]
    2698:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    269a:	70de      	strb	r6, [r3, #3]
    269c:	0a36      	lsrs	r6, r6, #8
    269e:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    26a0:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    26a2:	1c28      	adds	r0, r5, #0
    26a4:	4b05      	ldr	r3, [pc, #20]	; (26bc <nwkRouteFrame+0xc4>)
    26a6:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    26a8:	1c20      	adds	r0, r4, #0
    26aa:	4b07      	ldr	r3, [pc, #28]	; (26c8 <nwkRouteFrame+0xd0>)
    26ac:	4798      	blx	r3
	}
}
    26ae:	bc04      	pop	{r2}
    26b0:	4690      	mov	r8, r2
    26b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26b4:	00002439 	.word	0x00002439
    26b8:	0000ffff 	.word	0x0000ffff
    26bc:	00002f21 	.word	0x00002f21
    26c0:	00002299 	.word	0x00002299
    26c4:	00002359 	.word	0x00002359
    26c8:	00002309 	.word	0x00002309

000026cc <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    26cc:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    26ce:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    26d0:	7b03      	ldrb	r3, [r0, #12]
		return false;
    26d2:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    26d4:	2b06      	cmp	r3, #6
    26d6:	d107      	bne.n	26e8 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    26d8:	78d3      	ldrb	r3, [r2, #3]
    26da:	7910      	ldrb	r0, [r2, #4]
    26dc:	0200      	lsls	r0, r0, #8
    26de:	4318      	orrs	r0, r3
    26e0:	7951      	ldrb	r1, [r2, #5]
    26e2:	4b02      	ldr	r3, [pc, #8]	; (26ec <nwkRouteErrorReceived+0x20>)
    26e4:	4798      	blx	r3

	return true;
    26e6:	2001      	movs	r0, #1
}
    26e8:	bd08      	pop	{r3, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	00002455 	.word	0x00002455

000026f0 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    26f0:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    26f2:	7b02      	ldrb	r2, [r0, #12]
		return false;
    26f4:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    26f6:	2a00      	cmp	r2, #0
    26f8:	d00f      	beq.n	271a <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    26fa:	6882      	ldr	r2, [r0, #8]
    26fc:	7813      	ldrb	r3, [r2, #0]
    26fe:	2b00      	cmp	r3, #0
    2700:	d002      	beq.n	2708 <nwkRxSeriveDataInd+0x18>
    2702:	2b01      	cmp	r3, #1
    2704:	d004      	beq.n	2710 <nwkRxSeriveDataInd+0x20>
    2706:	e007      	b.n	2718 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2708:	4b05      	ldr	r3, [pc, #20]	; (2720 <nwkRxSeriveDataInd+0x30>)
    270a:	4798      	blx	r3
    270c:	1c03      	adds	r3, r0, #0
    270e:	e004      	b.n	271a <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2710:	4b04      	ldr	r3, [pc, #16]	; (2724 <nwkRxSeriveDataInd+0x34>)
    2712:	4798      	blx	r3
    2714:	1c03      	adds	r3, r0, #0
    2716:	e000      	b.n	271a <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    2718:	2300      	movs	r3, #0
	}
}
    271a:	1c18      	adds	r0, r3, #0
    271c:	bd08      	pop	{r3, pc}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	0000306d 	.word	0x0000306d
    2724:	000026cd 	.word	0x000026cd

00002728 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2728:	b538      	push	{r3, r4, r5, lr}
    272a:	4909      	ldr	r1, [pc, #36]	; (2750 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    272c:	1d0b      	adds	r3, r1, #4
    272e:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2730:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2732:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2734:	781a      	ldrb	r2, [r3, #0]
    2736:	2a00      	cmp	r2, #0
    2738:	d002      	beq.n	2740 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    273a:	3a01      	subs	r2, #1
    273c:	701a      	strb	r2, [r3, #0]
			restart = true;
    273e:	1c2c      	adds	r4, r5, #0
    2740:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2742:	428b      	cmp	r3, r1
    2744:	d1f6      	bne.n	2734 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2746:	2c00      	cmp	r4, #0
    2748:	d001      	beq.n	274e <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    274a:	4b02      	ldr	r3, [pc, #8]	; (2754 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    274c:	4798      	blx	r3
	}
}
    274e:	bd38      	pop	{r3, r4, r5, pc}
    2750:	2000059c 	.word	0x2000059c
    2754:	000035d1 	.word	0x000035d1

00002758 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2758:	b508      	push	{r3, lr}
    275a:	490a      	ldr	r1, [pc, #40]	; (2784 <nwkRxInit+0x2c>)
    275c:	1d0b      	adds	r3, r1, #4
    275e:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2760:	2200      	movs	r2, #0
    2762:	701a      	strb	r2, [r3, #0]
    2764:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2766:	428b      	cmp	r3, r1
    2768:	d1fb      	bne.n	2762 <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    276a:	4b07      	ldr	r3, [pc, #28]	; (2788 <nwkRxInit+0x30>)
    276c:	2264      	movs	r2, #100	; 0x64
    276e:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2770:	2200      	movs	r2, #0
    2772:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    2774:	4a05      	ldr	r2, [pc, #20]	; (278c <nwkRxInit+0x34>)
    2776:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2778:	2000      	movs	r0, #0
    277a:	4905      	ldr	r1, [pc, #20]	; (2790 <nwkRxInit+0x38>)
    277c:	4b05      	ldr	r3, [pc, #20]	; (2794 <nwkRxInit+0x3c>)
    277e:	4798      	blx	r3
}
    2780:	bd08      	pop	{r3, pc}
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	2000059c 	.word	0x2000059c
    2788:	200005dc 	.word	0x200005dc
    278c:	00002729 	.word	0x00002729
    2790:	000026f1 	.word	0x000026f1
    2794:	0000208d 	.word	0x0000208d

00002798 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    2798:	b510      	push	{r4, lr}
    279a:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    279c:	6803      	ldr	r3, [r0, #0]
    279e:	785a      	ldrb	r2, [r3, #1]
    27a0:	2a88      	cmp	r2, #136	; 0x88
    27a2:	d11a      	bne.n	27da <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    27a4:	781b      	ldrb	r3, [r3, #0]
    27a6:	2220      	movs	r2, #32
    27a8:	4393      	bics	r3, r2
    27aa:	2b41      	cmp	r3, #65	; 0x41
    27ac:	d115      	bne.n	27da <PHY_DataInd+0x42>
    27ae:	7903      	ldrb	r3, [r0, #4]
    27b0:	2b0f      	cmp	r3, #15
    27b2:	d912      	bls.n	27da <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    27b4:	4b09      	ldr	r3, [pc, #36]	; (27dc <PHY_DataInd+0x44>)
    27b6:	4798      	blx	r3
    27b8:	2800      	cmp	r0, #0
    27ba:	d00e      	beq.n	27da <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    27bc:	2320      	movs	r3, #32
    27be:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    27c0:	7923      	ldrb	r3, [r4, #4]
    27c2:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    27c4:	7962      	ldrb	r2, [r4, #5]
    27c6:	2385      	movs	r3, #133	; 0x85
    27c8:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    27ca:	79a2      	ldrb	r2, [r4, #6]
    27cc:	2386      	movs	r3, #134	; 0x86
    27ce:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    27d0:	3002      	adds	r0, #2
    27d2:	7922      	ldrb	r2, [r4, #4]
    27d4:	6821      	ldr	r1, [r4, #0]
    27d6:	4b02      	ldr	r3, [pc, #8]	; (27e0 <PHY_DataInd+0x48>)
    27d8:	4798      	blx	r3
}
    27da:	bd10      	pop	{r4, pc}
    27dc:	00002299 	.word	0x00002299
    27e0:	000049fd 	.word	0x000049fd

000027e4 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    27e4:	2900      	cmp	r1, #0
    27e6:	d002      	beq.n	27ee <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    27e8:	2322      	movs	r3, #34	; 0x22
    27ea:	7003      	strb	r3, [r0, #0]
    27ec:	e001      	b.n	27f2 <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    27ee:	2324      	movs	r3, #36	; 0x24
    27f0:	7003      	strb	r3, [r0, #0]
	}
}
    27f2:	4770      	bx	lr

000027f4 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    27f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27f6:	464f      	mov	r7, r9
    27f8:	4646      	mov	r6, r8
    27fa:	b4c0      	push	{r6, r7}
    27fc:	b085      	sub	sp, #20
	NwkFrame_t *frame = NULL;
    27fe:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2800:	4dd3      	ldr	r5, [pc, #844]	; (2b50 <nwkRxTaskHandler+0x35c>)
    2802:	48d4      	ldr	r0, [pc, #848]	; (2b54 <nwkRxTaskHandler+0x360>)
    2804:	4681      	mov	r9, r0
    2806:	203c      	movs	r0, #60	; 0x3c
    2808:	4481      	add	r9, r0
    280a:	e19a      	b.n	2b42 <nwkRxTaskHandler+0x34e>
		switch (frame->state) {
    280c:	7823      	ldrb	r3, [r4, #0]
    280e:	3b20      	subs	r3, #32
    2810:	b2da      	uxtb	r2, r3
    2812:	2a04      	cmp	r2, #4
    2814:	d900      	bls.n	2818 <nwkRxTaskHandler+0x24>
    2816:	e194      	b.n	2b42 <nwkRxTaskHandler+0x34e>
    2818:	0093      	lsls	r3, r2, #2
    281a:	4acf      	ldr	r2, [pc, #828]	; (2b58 <nwkRxTaskHandler+0x364>)
    281c:	58d3      	ldr	r3, [r2, r3]
    281e:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2820:	2324      	movs	r3, #36	; 0x24
    2822:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2824:	7ae3      	ldrb	r3, [r4, #11]
    2826:	0719      	lsls	r1, r3, #28
    2828:	d500      	bpl.n	282c <nwkRxTaskHandler+0x38>
    282a:	e18a      	b.n	2b42 <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    282c:	7961      	ldrb	r1, [r4, #5]
    282e:	79a2      	ldrb	r2, [r4, #6]
    2830:	0212      	lsls	r2, r2, #8
    2832:	430a      	orrs	r2, r1
    2834:	4bc9      	ldr	r3, [pc, #804]	; (2b5c <nwkRxTaskHandler+0x368>)
    2836:	429a      	cmp	r2, r3
    2838:	d114      	bne.n	2864 <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    283a:	7be2      	ldrb	r2, [r4, #15]
    283c:	7c23      	ldrb	r3, [r4, #16]
    283e:	021b      	lsls	r3, r3, #8
    2840:	4313      	orrs	r3, r2
    2842:	4ac7      	ldr	r2, [pc, #796]	; (2b60 <nwkRxTaskHandler+0x36c>)
    2844:	8812      	ldrh	r2, [r2, #0]
    2846:	429a      	cmp	r2, r3
    2848:	d003      	beq.n	2852 <nwkRxTaskHandler+0x5e>
    284a:	4ac4      	ldr	r2, [pc, #784]	; (2b5c <nwkRxTaskHandler+0x368>)
    284c:	4293      	cmp	r3, r2
    284e:	d000      	beq.n	2852 <nwkRxTaskHandler+0x5e>
    2850:	e177      	b.n	2b42 <nwkRxTaskHandler+0x34e>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2852:	7ae3      	ldrb	r3, [r4, #11]
    2854:	079a      	lsls	r2, r3, #30
    2856:	d502      	bpl.n	285e <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    2858:	2321      	movs	r3, #33	; 0x21
    285a:	7023      	strb	r3, [r4, #0]
    285c:	e171      	b.n	2b42 <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    285e:	2322      	movs	r3, #34	; 0x22
    2860:	7023      	strb	r3, [r4, #0]
    2862:	e16e      	b.n	2b42 <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2864:	7be1      	ldrb	r1, [r4, #15]
    2866:	7c22      	ldrb	r2, [r4, #16]
    2868:	0212      	lsls	r2, r2, #8
    286a:	430a      	orrs	r2, r1
    286c:	4bbb      	ldr	r3, [pc, #748]	; (2b5c <nwkRxTaskHandler+0x368>)
    286e:	429a      	cmp	r2, r3
    2870:	d103      	bne.n	287a <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    2872:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2874:	07de      	lsls	r6, r3, #31
    2876:	d500      	bpl.n	287a <nwkRxTaskHandler+0x86>
    2878:	e163      	b.n	2b42 <nwkRxTaskHandler+0x34e>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    287a:	7b61      	ldrb	r1, [r4, #13]
    287c:	7ba3      	ldrb	r3, [r4, #14]
    287e:	021b      	lsls	r3, r3, #8
    2880:	4ab7      	ldr	r2, [pc, #732]	; (2b60 <nwkRxTaskHandler+0x36c>)
    2882:	8812      	ldrh	r2, [r2, #0]
    2884:	430b      	orrs	r3, r1
    2886:	429a      	cmp	r2, r3
    2888:	d100      	bne.n	288c <nwkRxTaskHandler+0x98>
    288a:	e15a      	b.n	2b42 <nwkRxTaskHandler+0x34e>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    288c:	1c20      	adds	r0, r4, #0
    288e:	4bb5      	ldr	r3, [pc, #724]	; (2b64 <nwkRxTaskHandler+0x370>)
    2890:	4798      	blx	r3
    2892:	4bb0      	ldr	r3, [pc, #704]	; (2b54 <nwkRxTaskHandler+0x360>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2894:	2700      	movs	r7, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2896:	1ca1      	adds	r1, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2898:	1c18      	adds	r0, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    289a:	791a      	ldrb	r2, [r3, #4]
    289c:	2a00      	cmp	r2, #0
    289e:	d037      	beq.n	2910 <nwkRxTaskHandler+0x11c>
    28a0:	7ace      	ldrb	r6, [r1, #11]
    28a2:	7b0a      	ldrb	r2, [r1, #12]
    28a4:	0212      	lsls	r2, r2, #8
    28a6:	4690      	mov	r8, r2
    28a8:	881a      	ldrh	r2, [r3, #0]
    28aa:	4694      	mov	ip, r2
    28ac:	4642      	mov	r2, r8
    28ae:	4316      	orrs	r6, r2
    28b0:	45b4      	cmp	ip, r6
    28b2:	d12e      	bne.n	2912 <nwkRxTaskHandler+0x11e>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    28b4:	7b22      	ldrb	r2, [r4, #12]
    28b6:	789b      	ldrb	r3, [r3, #2]
    28b8:	1a9b      	subs	r3, r3, r2
    28ba:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    28bc:	2b07      	cmp	r3, #7
    28be:	d81c      	bhi.n	28fa <nwkRxTaskHandler+0x106>
				if (entry->mask & (1 << diff)) {
    28c0:	78c2      	ldrb	r2, [r0, #3]
    28c2:	1c11      	adds	r1, r2, #0
    28c4:	4119      	asrs	r1, r3
    28c6:	07ce      	lsls	r6, r1, #31
    28c8:	d512      	bpl.n	28f0 <nwkRxTaskHandler+0xfc>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    28ca:	79e1      	ldrb	r1, [r4, #7]
    28cc:	7a23      	ldrb	r3, [r4, #8]
    28ce:	021b      	lsls	r3, r3, #8
    28d0:	4aa3      	ldr	r2, [pc, #652]	; (2b60 <nwkRxTaskHandler+0x36c>)
    28d2:	8812      	ldrh	r2, [r2, #0]
    28d4:	430b      	orrs	r3, r1
    28d6:	429a      	cmp	r2, r3
    28d8:	d000      	beq.n	28dc <nwkRxTaskHandler+0xe8>
    28da:	e132      	b.n	2b42 <nwkRxTaskHandler+0x34e>
						nwkRouteRemove(
    28dc:	7be2      	ldrb	r2, [r4, #15]
    28de:	7c20      	ldrb	r0, [r4, #16]
    28e0:	0200      	lsls	r0, r0, #8
    28e2:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    28e4:	7ae1      	ldrb	r1, [r4, #11]
    28e6:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    28e8:	0fc9      	lsrs	r1, r1, #31
    28ea:	4b9f      	ldr	r3, [pc, #636]	; (2b68 <nwkRxTaskHandler+0x374>)
    28ec:	4798      	blx	r3
    28ee:	e128      	b.n	2b42 <nwkRxTaskHandler+0x34e>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    28f0:	2101      	movs	r1, #1
    28f2:	4099      	lsls	r1, r3
    28f4:	430a      	orrs	r2, r1
    28f6:	70c2      	strb	r2, [r0, #3]
    28f8:	e14e      	b.n	2b98 <nwkRxTaskHandler+0x3a4>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    28fa:	7082      	strb	r2, [r0, #2]
				entry->mask = (entry->mask << shift) | 1;
    28fc:	78c2      	ldrb	r2, [r0, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    28fe:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    2900:	b2db      	uxtb	r3, r3
    2902:	409a      	lsls	r2, r3
    2904:	2301      	movs	r3, #1
    2906:	4313      	orrs	r3, r2
    2908:	70c3      	strb	r3, [r0, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    290a:	231f      	movs	r3, #31
    290c:	7103      	strb	r3, [r0, #4]
    290e:	e143      	b.n	2b98 <nwkRxTaskHandler+0x3a4>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2910:	1c1f      	adds	r7, r3, #0
    2912:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2914:	454b      	cmp	r3, r9
    2916:	d1bf      	bne.n	2898 <nwkRxTaskHandler+0xa4>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2918:	2f00      	cmp	r7, #0
    291a:	d100      	bne.n	291e <nwkRxTaskHandler+0x12a>
    291c:	e111      	b.n	2b42 <nwkRxTaskHandler+0x34e>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    291e:	7b61      	ldrb	r1, [r4, #13]
    2920:	7ba2      	ldrb	r2, [r4, #14]
    2922:	0212      	lsls	r2, r2, #8
    2924:	430a      	orrs	r2, r1
    2926:	803a      	strh	r2, [r7, #0]
	freeEntry->seq = header->nwkSeq;
    2928:	7b23      	ldrb	r3, [r4, #12]
    292a:	70bb      	strb	r3, [r7, #2]
	freeEntry->mask = 1;
    292c:	2301      	movs	r3, #1
    292e:	70fb      	strb	r3, [r7, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2930:	231f      	movs	r3, #31
    2932:	713b      	strb	r3, [r7, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2934:	488d      	ldr	r0, [pc, #564]	; (2b6c <nwkRxTaskHandler+0x378>)
    2936:	4b8e      	ldr	r3, [pc, #568]	; (2b70 <nwkRxTaskHandler+0x37c>)
    2938:	4798      	blx	r3
    293a:	e12d      	b.n	2b98 <nwkRxTaskHandler+0x3a4>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    293c:	4b88      	ldr	r3, [pc, #544]	; (2b60 <nwkRxTaskHandler+0x36c>)
    293e:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    2940:	7be0      	ldrb	r0, [r4, #15]
    2942:	7c23      	ldrb	r3, [r4, #16]
    2944:	021b      	lsls	r3, r3, #8
    2946:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2948:	429a      	cmp	r2, r3
    294a:	d010      	beq.n	296e <nwkRxTaskHandler+0x17a>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    294c:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    294e:	074f      	lsls	r7, r1, #29
    2950:	d40a      	bmi.n	2968 <nwkRxTaskHandler+0x174>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    2952:	1c20      	adds	r0, r4, #0
    2954:	4b87      	ldr	r3, [pc, #540]	; (2b74 <nwkRxTaskHandler+0x380>)
    2956:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2958:	4b81      	ldr	r3, [pc, #516]	; (2b60 <nwkRxTaskHandler+0x36c>)
    295a:	881a      	ldrh	r2, [r3, #0]
    295c:	7be0      	ldrb	r0, [r4, #15]
    295e:	7c23      	ldrb	r3, [r4, #16]
    2960:	021b      	lsls	r3, r3, #8
    2962:	4303      	orrs	r3, r0
    2964:	429a      	cmp	r2, r3
    2966:	d002      	beq.n	296e <nwkRxTaskHandler+0x17a>
    2968:	497c      	ldr	r1, [pc, #496]	; (2b5c <nwkRxTaskHandler+0x368>)
    296a:	428b      	cmp	r3, r1
    296c:	d108      	bne.n	2980 <nwkRxTaskHandler+0x18c>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    296e:	7ae3      	ldrb	r3, [r4, #11]
    2970:	0798      	lsls	r0, r3, #30
    2972:	d502      	bpl.n	297a <nwkRxTaskHandler+0x186>
				frame->state = NWK_RX_STATE_DECRYPT;
    2974:	2321      	movs	r3, #33	; 0x21
    2976:	7023      	strb	r3, [r4, #0]
    2978:	e0e3      	b.n	2b42 <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    297a:	2322      	movs	r3, #34	; 0x22
    297c:	7023      	strb	r3, [r4, #0]
    297e:	e0e0      	b.n	2b42 <nwkRxTaskHandler+0x34e>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2980:	79e1      	ldrb	r1, [r4, #7]
    2982:	7a23      	ldrb	r3, [r4, #8]
    2984:	021b      	lsls	r3, r3, #8
    2986:	430b      	orrs	r3, r1
    2988:	429a      	cmp	r2, r3
    298a:	d000      	beq.n	298e <nwkRxTaskHandler+0x19a>
    298c:	e0d9      	b.n	2b42 <nwkRxTaskHandler+0x34e>
			frame->state = NWK_RX_STATE_ROUTE;
    298e:	2323      	movs	r3, #35	; 0x23
    2990:	7023      	strb	r3, [r4, #0]
    2992:	e0d6      	b.n	2b42 <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    2994:	1c20      	adds	r0, r4, #0
    2996:	2100      	movs	r1, #0
    2998:	4b77      	ldr	r3, [pc, #476]	; (2b78 <nwkRxTaskHandler+0x384>)
    299a:	4798      	blx	r3
		}
		break;
    299c:	e0d1      	b.n	2b42 <nwkRxTaskHandler+0x34e>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    299e:	2200      	movs	r2, #0
    29a0:	4b76      	ldr	r3, [pc, #472]	; (2b7c <nwkRxTaskHandler+0x388>)
    29a2:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    29a4:	7c61      	ldrb	r1, [r4, #17]
    29a6:	0909      	lsrs	r1, r1, #4
    29a8:	b2ca      	uxtb	r2, r1
    29aa:	3202      	adds	r2, #2
    29ac:	0092      	lsls	r2, r2, #2
    29ae:	4b6c      	ldr	r3, [pc, #432]	; (2b60 <nwkRxTaskHandler+0x36c>)
    29b0:	58d2      	ldr	r2, [r2, r3]
    29b2:	2a00      	cmp	r2, #0
    29b4:	d05f      	beq.n	2a76 <nwkRxTaskHandler+0x282>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    29b6:	1ca3      	adds	r3, r4, #2
    29b8:	7b67      	ldrb	r7, [r4, #13]
    29ba:	7ba0      	ldrb	r0, [r4, #14]
    29bc:	0200      	lsls	r0, r0, #8
    29be:	4338      	orrs	r0, r7
    29c0:	4680      	mov	r8, r0
    29c2:	466e      	mov	r6, sp
    29c4:	8030      	strh	r0, [r6, #0]
	ind.dstAddr = header->nwkDstAddr;
    29c6:	7be0      	ldrb	r0, [r4, #15]
    29c8:	7c26      	ldrb	r6, [r4, #16]
    29ca:	0236      	lsls	r6, r6, #8
    29cc:	1c37      	adds	r7, r6, #0
    29ce:	4307      	orrs	r7, r0
    29d0:	4668      	mov	r0, sp
    29d2:	8047      	strh	r7, [r0, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    29d4:	7c66      	ldrb	r6, [r4, #17]
    29d6:	0736      	lsls	r6, r6, #28
    29d8:	0f36      	lsrs	r6, r6, #28
    29da:	7106      	strb	r6, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    29dc:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    29de:	2181      	movs	r1, #129	; 0x81
    29e0:	5c61      	ldrb	r1, [r4, r1]
    29e2:	2082      	movs	r0, #130	; 0x82
    29e4:	5c26      	ldrb	r6, [r4, r0]
    29e6:	0236      	lsls	r6, r6, #8
    29e8:	4331      	orrs	r1, r6
    29ea:	2083      	movs	r0, #131	; 0x83
    29ec:	5c26      	ldrb	r6, [r4, r0]
    29ee:	0436      	lsls	r6, r6, #16
    29f0:	4331      	orrs	r1, r6
    29f2:	2084      	movs	r0, #132	; 0x84
    29f4:	5c26      	ldrb	r6, [r4, r0]
    29f6:	0636      	lsls	r6, r6, #24
    29f8:	4331      	orrs	r1, r6
    29fa:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    29fc:	1a59      	subs	r1, r3, r1
    29fe:	468c      	mov	ip, r1
    2a00:	7861      	ldrb	r1, [r4, #1]
    2a02:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    2a04:	4668      	mov	r0, sp
    2a06:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    2a08:	2185      	movs	r1, #133	; 0x85
    2a0a:	5c61      	ldrb	r1, [r4, r1]
    2a0c:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    2a0e:	2186      	movs	r1, #134	; 0x86
    2a10:	5c61      	ldrb	r1, [r4, r1]
    2a12:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2a14:	7ae3      	ldrb	r3, [r4, #11]
    2a16:	07d9      	lsls	r1, r3, #31
    2a18:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2a1a:	2602      	movs	r6, #2
    2a1c:	4033      	ands	r3, r6
    2a1e:	430b      	orrs	r3, r1
    2a20:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2a22:	7ae1      	ldrb	r1, [r4, #11]
    2a24:	0749      	lsls	r1, r1, #29
    2a26:	0fc9      	lsrs	r1, r1, #31
    2a28:	0149      	lsls	r1, r1, #5
    2a2a:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2a2c:	7ae1      	ldrb	r1, [r4, #11]
    2a2e:	0709      	lsls	r1, r1, #28
    2a30:	0fc9      	lsrs	r1, r1, #31
    2a32:	0189      	lsls	r1, r1, #6
    2a34:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2a36:	4952      	ldr	r1, [pc, #328]	; (2b80 <nwkRxTaskHandler+0x38c>)
    2a38:	187f      	adds	r7, r7, r1
    2a3a:	4279      	negs	r1, r7
    2a3c:	414f      	adcs	r7, r1
    2a3e:	00bf      	lsls	r7, r7, #2
    2a40:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2a42:	7a67      	ldrb	r7, [r4, #9]
    2a44:	7aa1      	ldrb	r1, [r4, #10]
    2a46:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2a48:	4339      	orrs	r1, r7
    2a4a:	4646      	mov	r6, r8
    2a4c:	1a70      	subs	r0, r6, r1
    2a4e:	4241      	negs	r1, r0
    2a50:	4148      	adcs	r0, r1
    2a52:	00c0      	lsls	r0, r0, #3
    2a54:	4303      	orrs	r3, r0
    2a56:	466f      	mov	r7, sp
    2a58:	71bb      	strb	r3, [r7, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2a5a:	7960      	ldrb	r0, [r4, #5]
    2a5c:	79a1      	ldrb	r1, [r4, #6]
    2a5e:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2a60:	4301      	orrs	r1, r0
    2a62:	4847      	ldr	r0, [pc, #284]	; (2b80 <nwkRxTaskHandler+0x38c>)
    2a64:	1809      	adds	r1, r1, r0
    2a66:	4248      	negs	r0, r1
    2a68:	4141      	adcs	r1, r0
    2a6a:	0109      	lsls	r1, r1, #4
    2a6c:	430b      	orrs	r3, r1
    2a6e:	71bb      	strb	r3, [r7, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2a70:	4668      	mov	r0, sp
    2a72:	4790      	blx	r2
    2a74:	e000      	b.n	2a78 <nwkRxTaskHandler+0x284>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2a76:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2a78:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    2a7a:	07db      	lsls	r3, r3, #31
    2a7c:	17db      	asrs	r3, r3, #31
    2a7e:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2a80:	79e3      	ldrb	r3, [r4, #7]
    2a82:	7a22      	ldrb	r2, [r4, #8]
    2a84:	0212      	lsls	r2, r2, #8
    2a86:	431a      	orrs	r2, r3
    2a88:	4b34      	ldr	r3, [pc, #208]	; (2b5c <nwkRxTaskHandler+0x368>)
    2a8a:	429a      	cmp	r2, r3
    2a8c:	d10b      	bne.n	2aa6 <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2a8e:	7be1      	ldrb	r1, [r4, #15]
    2a90:	7c23      	ldrb	r3, [r4, #16]
    2a92:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2a94:	4a32      	ldr	r2, [pc, #200]	; (2b60 <nwkRxTaskHandler+0x36c>)
    2a96:	8812      	ldrh	r2, [r2, #0]
    2a98:	430b      	orrs	r3, r1
    2a9a:	429a      	cmp	r2, r3
    2a9c:	d103      	bne.n	2aa6 <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    2a9e:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    2aa0:	0719      	lsls	r1, r3, #28
    2aa2:	d400      	bmi.n	2aa6 <nwkRxTaskHandler+0x2b2>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    2aa4:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    2aa6:	7963      	ldrb	r3, [r4, #5]
    2aa8:	79a2      	ldrb	r2, [r4, #6]
    2aaa:	0212      	lsls	r2, r2, #8
    2aac:	431a      	orrs	r2, r3
    2aae:	4b2b      	ldr	r3, [pc, #172]	; (2b5c <nwkRxTaskHandler+0x368>)
    2ab0:	429a      	cmp	r2, r3
    2ab2:	d03c      	beq.n	2b2e <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2ab4:	4b2a      	ldr	r3, [pc, #168]	; (2b60 <nwkRxTaskHandler+0x36c>)
    2ab6:	881a      	ldrh	r2, [r3, #0]
    2ab8:	4b28      	ldr	r3, [pc, #160]	; (2b5c <nwkRxTaskHandler+0x368>)
    2aba:	429a      	cmp	r2, r3
    2abc:	d037      	beq.n	2b2e <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (ack) {
    2abe:	2800      	cmp	r0, #0
    2ac0:	d035      	beq.n	2b2e <nwkRxTaskHandler+0x33a>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    2ac2:	4b30      	ldr	r3, [pc, #192]	; (2b84 <nwkRxTaskHandler+0x390>)
    2ac4:	4798      	blx	r3
    2ac6:	1e07      	subs	r7, r0, #0
    2ac8:	d031      	beq.n	2b2e <nwkRxTaskHandler+0x33a>
		return;
	}

	nwkFrameCommandInit(ack);
    2aca:	4b2f      	ldr	r3, [pc, #188]	; (2b88 <nwkRxTaskHandler+0x394>)
    2acc:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    2ace:	787b      	ldrb	r3, [r7, #1]
    2ad0:	3303      	adds	r3, #3
    2ad2:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    2ad4:	2200      	movs	r2, #0
    2ad6:	2389      	movs	r3, #137	; 0x89
    2ad8:	54fa      	strb	r2, [r7, r3]
    2ada:	238a      	movs	r3, #138	; 0x8a
    2adc:	54fa      	strb	r2, [r7, r3]
    2ade:	238b      	movs	r3, #139	; 0x8b
    2ae0:	54fa      	strb	r2, [r7, r3]
    2ae2:	238c      	movs	r3, #140	; 0x8c
    2ae4:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2ae6:	7ae2      	ldrb	r2, [r4, #11]
    2ae8:	2302      	movs	r3, #2
    2aea:	401a      	ands	r2, r3
    2aec:	7afb      	ldrb	r3, [r7, #11]
    2aee:	2102      	movs	r1, #2
    2af0:	438b      	bics	r3, r1
    2af2:	4313      	orrs	r3, r2
    2af4:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2af6:	7b62      	ldrb	r2, [r4, #13]
    2af8:	7ba3      	ldrb	r3, [r4, #14]
    2afa:	73fa      	strb	r2, [r7, #15]
    2afc:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    2afe:	2381      	movs	r3, #129	; 0x81
    2b00:	5cfa      	ldrb	r2, [r7, r3]
    2b02:	2382      	movs	r3, #130	; 0x82
    2b04:	5cfb      	ldrb	r3, [r7, r3]
    2b06:	021b      	lsls	r3, r3, #8
    2b08:	4313      	orrs	r3, r2
    2b0a:	2283      	movs	r2, #131	; 0x83
    2b0c:	5cba      	ldrb	r2, [r7, r2]
    2b0e:	0412      	lsls	r2, r2, #16
    2b10:	4313      	orrs	r3, r2
    2b12:	2284      	movs	r2, #132	; 0x84
    2b14:	5cba      	ldrb	r2, [r7, r2]
    2b16:	0612      	lsls	r2, r2, #24
    2b18:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    2b1a:	2200      	movs	r2, #0
    2b1c:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    2b1e:	4a17      	ldr	r2, [pc, #92]	; (2b7c <nwkRxTaskHandler+0x388>)
    2b20:	7812      	ldrb	r2, [r2, #0]
    2b22:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    2b24:	7b22      	ldrb	r2, [r4, #12]
    2b26:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    2b28:	1c38      	adds	r0, r7, #0
    2b2a:	4b18      	ldr	r3, [pc, #96]	; (2b8c <nwkRxTaskHandler+0x398>)
    2b2c:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    2b2e:	2324      	movs	r3, #36	; 0x24
    2b30:	7023      	strb	r3, [r4, #0]
    2b32:	e006      	b.n	2b42 <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    2b34:	1c20      	adds	r0, r4, #0
    2b36:	4b16      	ldr	r3, [pc, #88]	; (2b90 <nwkRxTaskHandler+0x39c>)
    2b38:	4798      	blx	r3
		}
		break;
    2b3a:	e002      	b.n	2b42 <nwkRxTaskHandler+0x34e>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    2b3c:	1c20      	adds	r0, r4, #0
    2b3e:	4b15      	ldr	r3, [pc, #84]	; (2b94 <nwkRxTaskHandler+0x3a0>)
    2b40:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2b42:	1c20      	adds	r0, r4, #0
    2b44:	47a8      	blx	r5
    2b46:	1e04      	subs	r4, r0, #0
    2b48:	d000      	beq.n	2b4c <nwkRxTaskHandler+0x358>
    2b4a:	e65f      	b.n	280c <nwkRxTaskHandler+0x18>
    2b4c:	e02d      	b.n	2baa <nwkRxTaskHandler+0x3b6>
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	0000231d 	.word	0x0000231d
    2b54:	2000059c 	.word	0x2000059c
    2b58:	00005a34 	.word	0x00005a34
    2b5c:	0000ffff 	.word	0x0000ffff
    2b60:	200008ec 	.word	0x200008ec
    2b64:	0000246d 	.word	0x0000246d
    2b68:	00002455 	.word	0x00002455
    2b6c:	200005dc 	.word	0x200005dc
    2b70:	000035d1 	.word	0x000035d1
    2b74:	00002fe1 	.word	0x00002fe1
    2b78:	00002be5 	.word	0x00002be5
    2b7c:	200005d8 	.word	0x200005d8
    2b80:	ffff0001 	.word	0xffff0001
    2b84:	00002299 	.word	0x00002299
    2b88:	00002359 	.word	0x00002359
    2b8c:	00002f21 	.word	0x00002f21
    2b90:	000025f9 	.word	0x000025f9
    2b94:	00002309 	.word	0x00002309
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2b98:	79e1      	ldrb	r1, [r4, #7]
    2b9a:	7a22      	ldrb	r2, [r4, #8]
    2b9c:	0212      	lsls	r2, r2, #8
    2b9e:	430a      	orrs	r2, r1
    2ba0:	4b04      	ldr	r3, [pc, #16]	; (2bb4 <nwkRxTaskHandler+0x3c0>)
    2ba2:	429a      	cmp	r2, r3
    2ba4:	d000      	beq.n	2ba8 <nwkRxTaskHandler+0x3b4>
    2ba6:	e6d7      	b.n	2958 <nwkRxTaskHandler+0x164>
    2ba8:	e6c8      	b.n	293c <nwkRxTaskHandler+0x148>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    2baa:	b005      	add	sp, #20
    2bac:	bc0c      	pop	{r2, r3}
    2bae:	4690      	mov	r8, r2
    2bb0:	4699      	mov	r9, r3
    2bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bb4:	0000ffff 	.word	0x0000ffff

00002bb8 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2bb8:	2300      	movs	r3, #0
    2bba:	4a02      	ldr	r2, [pc, #8]	; (2bc4 <nwkSecurityInit+0xc>)
    2bbc:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2bbe:	4a02      	ldr	r2, [pc, #8]	; (2bc8 <nwkSecurityInit+0x10>)
    2bc0:	6013      	str	r3, [r2, #0]
}
    2bc2:	4770      	bx	lr
    2bc4:	200005f0 	.word	0x200005f0
    2bc8:	200005f4 	.word	0x200005f4

00002bcc <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    2bcc:	b508      	push	{r3, lr}
    2bce:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    2bd0:	4802      	ldr	r0, [pc, #8]	; (2bdc <NWK_SetSecurityKey+0x10>)
    2bd2:	2210      	movs	r2, #16
    2bd4:	4b02      	ldr	r3, [pc, #8]	; (2be0 <NWK_SetSecurityKey+0x14>)
    2bd6:	4798      	blx	r3
}
    2bd8:	bd08      	pop	{r3, pc}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	20000934 	.word	0x20000934
    2be0:	000049fd 	.word	0x000049fd

00002be4 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    2be4:	2900      	cmp	r1, #0
    2be6:	d002      	beq.n	2bee <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    2be8:	2330      	movs	r3, #48	; 0x30
    2bea:	7003      	strb	r3, [r0, #0]
    2bec:	e001      	b.n	2bf2 <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    2bee:	2331      	movs	r3, #49	; 0x31
    2bf0:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    2bf2:	4b02      	ldr	r3, [pc, #8]	; (2bfc <nwkSecurityProcess+0x18>)
    2bf4:	781a      	ldrb	r2, [r3, #0]
    2bf6:	3201      	adds	r2, #1
    2bf8:	701a      	strb	r2, [r3, #0]
}
    2bfa:	4770      	bx	lr
    2bfc:	200005f0 	.word	0x200005f0

00002c00 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    2c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c02:	4647      	mov	r7, r8
    2c04:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2c06:	4b24      	ldr	r3, [pc, #144]	; (2c98 <SYS_EncryptConf+0x98>)
    2c08:	681e      	ldr	r6, [r3, #0]
    2c0a:	4b24      	ldr	r3, [pc, #144]	; (2c9c <SYS_EncryptConf+0x9c>)
    2c0c:	781b      	ldrb	r3, [r3, #0]
    2c0e:	4698      	mov	r8, r3
    2c10:	2381      	movs	r3, #129	; 0x81
    2c12:	5cf3      	ldrb	r3, [r6, r3]
    2c14:	2282      	movs	r2, #130	; 0x82
    2c16:	5cb1      	ldrb	r1, [r6, r2]
    2c18:	0209      	lsls	r1, r1, #8
    2c1a:	4319      	orrs	r1, r3
    2c1c:	2383      	movs	r3, #131	; 0x83
    2c1e:	5cf4      	ldrb	r4, [r6, r3]
    2c20:	0424      	lsls	r4, r4, #16
    2c22:	4321      	orrs	r1, r4
    2c24:	2384      	movs	r3, #132	; 0x84
    2c26:	5cf4      	ldrb	r4, [r6, r3]
    2c28:	0624      	lsls	r4, r4, #24
    2c2a:	4321      	orrs	r1, r4
    2c2c:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    2c2e:	4b1c      	ldr	r3, [pc, #112]	; (2ca0 <SYS_EncryptConf+0xa0>)
    2c30:	781b      	ldrb	r3, [r3, #0]
    2c32:	469c      	mov	ip, r3
    2c34:	1c1f      	adds	r7, r3, #0
    2c36:	2b10      	cmp	r3, #16
    2c38:	d900      	bls.n	2c3c <SYS_EncryptConf+0x3c>
    2c3a:	2710      	movs	r7, #16
    2c3c:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2c3e:	2f00      	cmp	r7, #0
    2c40:	d016      	beq.n	2c70 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    2c42:	4b18      	ldr	r3, [pc, #96]	; (2ca4 <SYS_EncryptConf+0xa4>)
    2c44:	781d      	ldrb	r5, [r3, #0]
    2c46:	1c0b      	adds	r3, r1, #0
    2c48:	4a17      	ldr	r2, [pc, #92]	; (2ca8 <SYS_EncryptConf+0xa8>)
    2c4a:	1e7c      	subs	r4, r7, #1
    2c4c:	b2e4      	uxtb	r4, r4
    2c4e:	190c      	adds	r4, r1, r4
    2c50:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    2c52:	7810      	ldrb	r0, [r2, #0]
    2c54:	7819      	ldrb	r1, [r3, #0]
    2c56:	4041      	eors	r1, r0
    2c58:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    2c5a:	2d00      	cmp	r5, #0
    2c5c:	d001      	beq.n	2c62 <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    2c5e:	7011      	strb	r1, [r2, #0]
    2c60:	e002      	b.n	2c68 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    2c62:	7810      	ldrb	r0, [r2, #0]
    2c64:	4041      	eors	r1, r0
    2c66:	7011      	strb	r1, [r2, #0]
    2c68:	3301      	adds	r3, #1
    2c6a:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2c6c:	42a3      	cmp	r3, r4
    2c6e:	d1f0      	bne.n	2c52 <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2c70:	4643      	mov	r3, r8
    2c72:	18fa      	adds	r2, r7, r3
    2c74:	4b09      	ldr	r3, [pc, #36]	; (2c9c <SYS_EncryptConf+0x9c>)
    2c76:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    2c78:	4663      	mov	r3, ip
    2c7a:	1bdf      	subs	r7, r3, r7
    2c7c:	b2ff      	uxtb	r7, r7
    2c7e:	4b08      	ldr	r3, [pc, #32]	; (2ca0 <SYS_EncryptConf+0xa0>)
    2c80:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    2c82:	2f00      	cmp	r7, #0
    2c84:	d002      	beq.n	2c8c <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2c86:	2332      	movs	r3, #50	; 0x32
    2c88:	7033      	strb	r3, [r6, #0]
    2c8a:	e001      	b.n	2c90 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    2c8c:	2334      	movs	r3, #52	; 0x34
    2c8e:	7033      	strb	r3, [r6, #0]
	}
}
    2c90:	bc04      	pop	{r2}
    2c92:	4690      	mov	r8, r2
    2c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	200005f4 	.word	0x200005f4
    2c9c:	200005f8 	.word	0x200005f8
    2ca0:	200005f9 	.word	0x200005f9
    2ca4:	200005fa 	.word	0x200005fa
    2ca8:	200005fc 	.word	0x200005fc

00002cac <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    2cac:	b530      	push	{r4, r5, lr}
    2cae:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    2cb0:	4b56      	ldr	r3, [pc, #344]	; (2e0c <nwkSecurityTaskHandler+0x160>)
    2cb2:	781b      	ldrb	r3, [r3, #0]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d100      	bne.n	2cba <nwkSecurityTaskHandler+0xe>
    2cb8:	e0a5      	b.n	2e06 <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    2cba:	4b55      	ldr	r3, [pc, #340]	; (2e10 <nwkSecurityTaskHandler+0x164>)
    2cbc:	681c      	ldr	r4, [r3, #0]
    2cbe:	2c00      	cmp	r4, #0
    2cc0:	d100      	bne.n	2cc4 <nwkSecurityTaskHandler+0x18>
    2cc2:	e09b      	b.n	2dfc <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    2cc4:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    2cc6:	2b34      	cmp	r3, #52	; 0x34
    2cc8:	d145      	bne.n	2d56 <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2cca:	2381      	movs	r3, #129	; 0x81
    2ccc:	5ce3      	ldrb	r3, [r4, r3]
    2cce:	2282      	movs	r2, #130	; 0x82
    2cd0:	5ca1      	ldrb	r1, [r4, r2]
    2cd2:	0209      	lsls	r1, r1, #8
    2cd4:	4319      	orrs	r1, r3
    2cd6:	2383      	movs	r3, #131	; 0x83
    2cd8:	5ce3      	ldrb	r3, [r4, r3]
    2cda:	041b      	lsls	r3, r3, #16
    2cdc:	4319      	orrs	r1, r3
    2cde:	2384      	movs	r3, #132	; 0x84
    2ce0:	5ce3      	ldrb	r3, [r4, r3]
    2ce2:	061b      	lsls	r3, r3, #24
    2ce4:	4319      	orrs	r1, r3
    2ce6:	4b4b      	ldr	r3, [pc, #300]	; (2e14 <nwkSecurityTaskHandler+0x168>)
    2ce8:	781b      	ldrb	r3, [r3, #0]
    2cea:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2cec:	4b4a      	ldr	r3, [pc, #296]	; (2e18 <nwkSecurityTaskHandler+0x16c>)
    2cee:	685d      	ldr	r5, [r3, #4]
    2cf0:	681a      	ldr	r2, [r3, #0]
    2cf2:	4055      	eors	r5, r2
    2cf4:	689a      	ldr	r2, [r3, #8]
    2cf6:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    2cf8:	68db      	ldr	r3, [r3, #12]
    2cfa:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2cfc:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    2cfe:	4b47      	ldr	r3, [pc, #284]	; (2e1c <nwkSecurityTaskHandler+0x170>)
    2d00:	781b      	ldrb	r3, [r3, #0]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d009      	beq.n	2d1a <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    2d06:	1c08      	adds	r0, r1, #0
    2d08:	4669      	mov	r1, sp
    2d0a:	2204      	movs	r2, #4
    2d0c:	4b44      	ldr	r3, [pc, #272]	; (2e20 <nwkSecurityTaskHandler+0x174>)
    2d0e:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    2d10:	7863      	ldrb	r3, [r4, #1]
    2d12:	3304      	adds	r3, #4
    2d14:	7063      	strb	r3, [r4, #1]
		return true;
    2d16:	2101      	movs	r1, #1
    2d18:	e008      	b.n	2d2c <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    2d1a:	a801      	add	r0, sp, #4
    2d1c:	2204      	movs	r2, #4
    2d1e:	4b40      	ldr	r3, [pc, #256]	; (2e20 <nwkSecurityTaskHandler+0x174>)
    2d20:	4798      	blx	r3
		return vmic == tmic;
    2d22:	9b01      	ldr	r3, [sp, #4]
    2d24:	1ae9      	subs	r1, r5, r3
    2d26:	424d      	negs	r5, r1
    2d28:	4169      	adcs	r1, r5
    2d2a:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    2d2c:	4b3b      	ldr	r3, [pc, #236]	; (2e1c <nwkSecurityTaskHandler+0x170>)
    2d2e:	781b      	ldrb	r3, [r3, #0]
    2d30:	2b00      	cmp	r3, #0
    2d32:	d004      	beq.n	2d3e <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    2d34:	4b36      	ldr	r3, [pc, #216]	; (2e10 <nwkSecurityTaskHandler+0x164>)
    2d36:	6818      	ldr	r0, [r3, #0]
    2d38:	4b3a      	ldr	r3, [pc, #232]	; (2e24 <nwkSecurityTaskHandler+0x178>)
    2d3a:	4798      	blx	r3
    2d3c:	e003      	b.n	2d46 <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    2d3e:	4b34      	ldr	r3, [pc, #208]	; (2e10 <nwkSecurityTaskHandler+0x164>)
    2d40:	6818      	ldr	r0, [r3, #0]
    2d42:	4b39      	ldr	r3, [pc, #228]	; (2e28 <nwkSecurityTaskHandler+0x17c>)
    2d44:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    2d46:	2200      	movs	r2, #0
    2d48:	4b31      	ldr	r3, [pc, #196]	; (2e10 <nwkSecurityTaskHandler+0x164>)
    2d4a:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    2d4c:	4b2f      	ldr	r3, [pc, #188]	; (2e0c <nwkSecurityTaskHandler+0x160>)
    2d4e:	781a      	ldrb	r2, [r3, #0]
    2d50:	3a01      	subs	r2, #1
    2d52:	701a      	strb	r2, [r3, #0]
    2d54:	e057      	b.n	2e06 <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    2d56:	2b32      	cmp	r3, #50	; 0x32
    2d58:	d155      	bne.n	2e06 <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    2d5a:	2333      	movs	r3, #51	; 0x33
    2d5c:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    2d5e:	482e      	ldr	r0, [pc, #184]	; (2e18 <nwkSecurityTaskHandler+0x16c>)
    2d60:	4932      	ldr	r1, [pc, #200]	; (2e2c <nwkSecurityTaskHandler+0x180>)
    2d62:	4b33      	ldr	r3, [pc, #204]	; (2e30 <nwkSecurityTaskHandler+0x184>)
    2d64:	4798      	blx	r3
    2d66:	e04e      	b.n	2e06 <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    2d68:	7803      	ldrb	r3, [r0, #0]
    2d6a:	3b30      	subs	r3, #48	; 0x30
    2d6c:	2b01      	cmp	r3, #1
    2d6e:	d847      	bhi.n	2e00 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    2d70:	4b27      	ldr	r3, [pc, #156]	; (2e10 <nwkSecurityTaskHandler+0x164>)
    2d72:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    2d74:	4a28      	ldr	r2, [pc, #160]	; (2e18 <nwkSecurityTaskHandler+0x16c>)
    2d76:	7b01      	ldrb	r1, [r0, #12]
    2d78:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2d7a:	7bc1      	ldrb	r1, [r0, #15]
    2d7c:	7c04      	ldrb	r4, [r0, #16]
    2d7e:	0224      	lsls	r4, r4, #8
    2d80:	430c      	orrs	r4, r1
    2d82:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    2d84:	7c41      	ldrb	r1, [r0, #17]
    2d86:	0909      	lsrs	r1, r1, #4
    2d88:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2d8a:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2d8c:	7b41      	ldrb	r1, [r0, #13]
    2d8e:	7b84      	ldrb	r4, [r0, #14]
    2d90:	0224      	lsls	r4, r4, #8
    2d92:	430c      	orrs	r4, r1
    2d94:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    2d96:	7c41      	ldrb	r1, [r0, #17]
    2d98:	0709      	lsls	r1, r1, #28
    2d9a:	0f09      	lsrs	r1, r1, #28
    2d9c:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2d9e:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    2da0:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2da2:	7944      	ldrb	r4, [r0, #5]
    2da4:	7983      	ldrb	r3, [r0, #6]
    2da6:	021b      	lsls	r3, r3, #8
    2da8:	4323      	orrs	r3, r4
    2daa:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    2dac:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2dae:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    2db0:	7803      	ldrb	r3, [r0, #0]
    2db2:	2b31      	cmp	r3, #49	; 0x31
    2db4:	d102      	bne.n	2dbc <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    2db6:	7843      	ldrb	r3, [r0, #1]
    2db8:	3b04      	subs	r3, #4
    2dba:	7043      	strb	r3, [r0, #1]
    2dbc:	1c83      	adds	r3, r0, #2
    2dbe:	2281      	movs	r2, #129	; 0x81
    2dc0:	5c81      	ldrb	r1, [r0, r2]
    2dc2:	2282      	movs	r2, #130	; 0x82
    2dc4:	5c82      	ldrb	r2, [r0, r2]
    2dc6:	0212      	lsls	r2, r2, #8
    2dc8:	430a      	orrs	r2, r1
    2dca:	2183      	movs	r1, #131	; 0x83
    2dcc:	5c41      	ldrb	r1, [r0, r1]
    2dce:	0409      	lsls	r1, r1, #16
    2dd0:	430a      	orrs	r2, r1
    2dd2:	2184      	movs	r1, #132	; 0x84
    2dd4:	5c41      	ldrb	r1, [r0, r1]
    2dd6:	0609      	lsls	r1, r1, #24
    2dd8:	430a      	orrs	r2, r1
    2dda:	1a9a      	subs	r2, r3, r2
    2ddc:	7843      	ldrb	r3, [r0, #1]
    2dde:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    2de0:	4b14      	ldr	r3, [pc, #80]	; (2e34 <nwkSecurityTaskHandler+0x188>)
    2de2:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    2de4:	2200      	movs	r2, #0
    2de6:	4b0b      	ldr	r3, [pc, #44]	; (2e14 <nwkSecurityTaskHandler+0x168>)
    2de8:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    2dea:	7802      	ldrb	r2, [r0, #0]
    2dec:	3a30      	subs	r2, #48	; 0x30
    2dee:	4253      	negs	r3, r2
    2df0:	415a      	adcs	r2, r3
    2df2:	4b0a      	ldr	r3, [pc, #40]	; (2e1c <nwkSecurityTaskHandler+0x170>)
    2df4:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2df6:	2332      	movs	r3, #50	; 0x32
    2df8:	7003      	strb	r3, [r0, #0]
    2dfa:	e004      	b.n	2e06 <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    2dfc:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2dfe:	4c0e      	ldr	r4, [pc, #56]	; (2e38 <nwkSecurityTaskHandler+0x18c>)
    2e00:	47a0      	blx	r4
    2e02:	2800      	cmp	r0, #0
    2e04:	d1b0      	bne.n	2d68 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    2e06:	b003      	add	sp, #12
    2e08:	bd30      	pop	{r4, r5, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	200005f0 	.word	0x200005f0
    2e10:	200005f4 	.word	0x200005f4
    2e14:	200005f8 	.word	0x200005f8
    2e18:	200005fc 	.word	0x200005fc
    2e1c:	200005fa 	.word	0x200005fa
    2e20:	000049fd 	.word	0x000049fd
    2e24:	000030a9 	.word	0x000030a9
    2e28:	000027e5 	.word	0x000027e5
    2e2c:	20000934 	.word	0x20000934
    2e30:	000034d9 	.word	0x000034d9
    2e34:	200005f9 	.word	0x200005f9
    2e38:	0000231d 	.word	0x0000231d

00002e3c <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e3e:	4647      	mov	r7, r8
    2e40:	b480      	push	{r7}
    2e42:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2e44:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2e46:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2e48:	4c0f      	ldr	r4, [pc, #60]	; (2e88 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2e4a:	2686      	movs	r6, #134	; 0x86
    2e4c:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2e4e:	e010      	b.n	2e72 <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2e50:	7803      	ldrb	r3, [r0, #0]
    2e52:	2b11      	cmp	r3, #17
    2e54:	d10d      	bne.n	2e72 <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2e56:	5d82      	ldrb	r2, [r0, r6]
    2e58:	5d43      	ldrb	r3, [r0, r5]
    2e5a:	021b      	lsls	r3, r3, #8
    2e5c:	4313      	orrs	r3, r2
    2e5e:	3b01      	subs	r3, #1
    2e60:	b29b      	uxth	r3, r3
    2e62:	5583      	strb	r3, [r0, r6]
    2e64:	0a1a      	lsrs	r2, r3, #8
    2e66:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2e68:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d101      	bne.n	2e72 <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    2e6e:	2313      	movs	r3, #19
    2e70:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2e72:	47a0      	blx	r4
    2e74:	2800      	cmp	r0, #0
    2e76:	d1eb      	bne.n	2e50 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2e78:	2f00      	cmp	r7, #0
    2e7a:	d002      	beq.n	2e82 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    2e7c:	4640      	mov	r0, r8
    2e7e:	4b03      	ldr	r3, [pc, #12]	; (2e8c <nwkTxDelayTimerHandler+0x50>)
    2e80:	4798      	blx	r3
	}
}
    2e82:	bc04      	pop	{r2}
    2e84:	4690      	mov	r8, r2
    2e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e88:	0000231d 	.word	0x0000231d
    2e8c:	000035d1 	.word	0x000035d1

00002e90 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e92:	4647      	mov	r7, r8
    2e94:	b480      	push	{r7}
    2e96:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2e98:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2e9a:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2e9c:	4c11      	ldr	r4, [pc, #68]	; (2ee4 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2e9e:	2686      	movs	r6, #134	; 0x86
    2ea0:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ea2:	e013      	b.n	2ecc <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2ea4:	7803      	ldrb	r3, [r0, #0]
    2ea6:	2b16      	cmp	r3, #22
    2ea8:	d110      	bne.n	2ecc <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2eaa:	5d82      	ldrb	r2, [r0, r6]
    2eac:	5d43      	ldrb	r3, [r0, r5]
    2eae:	021b      	lsls	r3, r3, #8
    2eb0:	4313      	orrs	r3, r2
    2eb2:	3b01      	subs	r3, #1
    2eb4:	b29b      	uxth	r3, r3
    2eb6:	5583      	strb	r3, [r0, r6]
    2eb8:	0a1a      	lsrs	r2, r3, #8
    2eba:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2ebc:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d104      	bne.n	2ecc <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2ec2:	2317      	movs	r3, #23
    2ec4:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    2ec6:	2210      	movs	r2, #16
    2ec8:	2385      	movs	r3, #133	; 0x85
    2eca:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2ecc:	47a0      	blx	r4
    2ece:	2800      	cmp	r0, #0
    2ed0:	d1e8      	bne.n	2ea4 <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2ed2:	2f00      	cmp	r7, #0
    2ed4:	d002      	beq.n	2edc <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    2ed6:	4640      	mov	r0, r8
    2ed8:	4b03      	ldr	r3, [pc, #12]	; (2ee8 <nwkTxAckWaitTimerHandler+0x58>)
    2eda:	4798      	blx	r3
	}
}
    2edc:	bc04      	pop	{r2}
    2ede:	4690      	mov	r8, r2
    2ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	0000231d 	.word	0x0000231d
    2ee8:	000035d1 	.word	0x000035d1

00002eec <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    2eec:	2200      	movs	r2, #0
    2eee:	4b07      	ldr	r3, [pc, #28]	; (2f0c <nwkTxInit+0x20>)
    2ef0:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2ef2:	4b07      	ldr	r3, [pc, #28]	; (2f10 <nwkTxInit+0x24>)
    2ef4:	2132      	movs	r1, #50	; 0x32
    2ef6:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2ef8:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    2efa:	4906      	ldr	r1, [pc, #24]	; (2f14 <nwkTxInit+0x28>)
    2efc:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2efe:	4b06      	ldr	r3, [pc, #24]	; (2f18 <nwkTxInit+0x2c>)
    2f00:	210a      	movs	r1, #10
    2f02:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2f04:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    2f06:	4a05      	ldr	r2, [pc, #20]	; (2f1c <nwkTxInit+0x30>)
    2f08:	611a      	str	r2, [r3, #16]
}
    2f0a:	4770      	bx	lr
    2f0c:	20000620 	.word	0x20000620
    2f10:	2000060c 	.word	0x2000060c
    2f14:	00002e91 	.word	0x00002e91
    2f18:	20000624 	.word	0x20000624
    2f1c:	00002e3d 	.word	0x00002e3d

00002f20 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    2f20:	b510      	push	{r4, lr}
    2f22:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    2f24:	2388      	movs	r3, #136	; 0x88
    2f26:	5cc3      	ldrb	r3, [r0, r3]
    2f28:	0799      	lsls	r1, r3, #30
    2f2a:	d502      	bpl.n	2f32 <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    2f2c:	2212      	movs	r2, #18
    2f2e:	7002      	strb	r2, [r0, #0]
    2f30:	e007      	b.n	2f42 <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    2f32:	7ac2      	ldrb	r2, [r0, #11]
    2f34:	0791      	lsls	r1, r2, #30
    2f36:	d502      	bpl.n	2f3e <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    2f38:	2210      	movs	r2, #16
    2f3a:	7002      	strb	r2, [r0, #0]
    2f3c:	e001      	b.n	2f42 <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    2f3e:	2212      	movs	r2, #18
    2f40:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    2f42:	2100      	movs	r1, #0
    2f44:	2285      	movs	r2, #133	; 0x85
    2f46:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    2f48:	07da      	lsls	r2, r3, #31
    2f4a:	d504      	bpl.n	2f56 <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    2f4c:	2101      	movs	r1, #1
    2f4e:	4249      	negs	r1, r1
    2f50:	7161      	strb	r1, [r4, #5]
    2f52:	71a1      	strb	r1, [r4, #6]
    2f54:	e004      	b.n	2f60 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    2f56:	491e      	ldr	r1, [pc, #120]	; (2fd0 <nwkTxFrame+0xb0>)
    2f58:	7888      	ldrb	r0, [r1, #2]
    2f5a:	7160      	strb	r0, [r4, #5]
    2f5c:	78c9      	ldrb	r1, [r1, #3]
    2f5e:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    2f60:	2205      	movs	r2, #5
    2f62:	421a      	tst	r2, r3
    2f64:	d103      	bne.n	2f6e <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    2f66:	1c20      	adds	r0, r4, #0
    2f68:	4b1a      	ldr	r3, [pc, #104]	; (2fd4 <nwkTxFrame+0xb4>)
    2f6a:	4798      	blx	r3
    2f6c:	e003      	b.n	2f76 <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    2f6e:	7be1      	ldrb	r1, [r4, #15]
    2f70:	7c22      	ldrb	r2, [r4, #16]
    2f72:	71e1      	strb	r1, [r4, #7]
    2f74:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    2f76:	4a16      	ldr	r2, [pc, #88]	; (2fd0 <nwkTxFrame+0xb0>)
    2f78:	7811      	ldrb	r1, [r2, #0]
    2f7a:	7261      	strb	r1, [r4, #9]
    2f7c:	7851      	ldrb	r1, [r2, #1]
    2f7e:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    2f80:	7951      	ldrb	r1, [r2, #5]
    2f82:	3101      	adds	r1, #1
    2f84:	b2c9      	uxtb	r1, r1
    2f86:	7151      	strb	r1, [r2, #5]
    2f88:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    2f8a:	79e1      	ldrb	r1, [r4, #7]
    2f8c:	7a22      	ldrb	r2, [r4, #8]
    2f8e:	0212      	lsls	r2, r2, #8
    2f90:	430a      	orrs	r2, r1
    2f92:	4b11      	ldr	r3, [pc, #68]	; (2fd8 <nwkTxFrame+0xb8>)
    2f94:	429a      	cmp	r2, r3
    2f96:	d110      	bne.n	2fba <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    2f98:	2341      	movs	r3, #65	; 0x41
    2f9a:	70a3      	strb	r3, [r4, #2]
    2f9c:	2378      	movs	r3, #120	; 0x78
    2f9e:	425b      	negs	r3, r3
    2fa0:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2fa2:	4b0e      	ldr	r3, [pc, #56]	; (2fdc <nwkTxFrame+0xbc>)
    2fa4:	4798      	blx	r3
    2fa6:	2307      	movs	r3, #7
    2fa8:	4018      	ands	r0, r3
    2faa:	3001      	adds	r0, #1
    2fac:	2386      	movs	r3, #134	; 0x86
    2fae:	54e0      	strb	r0, [r4, r3]
    2fb0:	0a00      	lsrs	r0, r0, #8
    2fb2:	b280      	uxth	r0, r0
    2fb4:	2387      	movs	r3, #135	; 0x87
    2fb6:	54e0      	strb	r0, [r4, r3]
    2fb8:	e009      	b.n	2fce <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    2fba:	2361      	movs	r3, #97	; 0x61
    2fbc:	70a3      	strb	r3, [r4, #2]
    2fbe:	2378      	movs	r3, #120	; 0x78
    2fc0:	425b      	negs	r3, r3
    2fc2:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    2fc4:	2200      	movs	r2, #0
    2fc6:	2386      	movs	r3, #134	; 0x86
    2fc8:	54e2      	strb	r2, [r4, r3]
    2fca:	2387      	movs	r3, #135	; 0x87
    2fcc:	54e2      	strb	r2, [r4, r3]
	}
}
    2fce:	bd10      	pop	{r4, pc}
    2fd0:	200008ec 	.word	0x200008ec
    2fd4:	000025b1 	.word	0x000025b1
    2fd8:	0000ffff 	.word	0x0000ffff
    2fdc:	00004a59 	.word	0x00004a59

00002fe0 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    2fe0:	b538      	push	{r3, r4, r5, lr}
    2fe2:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    2fe4:	4b1d      	ldr	r3, [pc, #116]	; (305c <nwkTxBroadcastFrame+0x7c>)
    2fe6:	4798      	blx	r3
    2fe8:	1e04      	subs	r4, r0, #0
    2fea:	d036      	beq.n	305a <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    2fec:	2312      	movs	r3, #18
    2fee:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    2ff0:	786b      	ldrb	r3, [r5, #1]
    2ff2:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    2ff4:	2200      	movs	r2, #0
    2ff6:	2385      	movs	r3, #133	; 0x85
    2ff8:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2ffa:	4b19      	ldr	r3, [pc, #100]	; (3060 <nwkTxBroadcastFrame+0x80>)
    2ffc:	4798      	blx	r3
    2ffe:	2307      	movs	r3, #7
    3000:	4018      	ands	r0, r3
    3002:	3001      	adds	r0, #1
    3004:	2386      	movs	r3, #134	; 0x86
    3006:	54e0      	strb	r0, [r4, r3]
    3008:	0a00      	lsrs	r0, r0, #8
    300a:	b280      	uxth	r0, r0
    300c:	2387      	movs	r3, #135	; 0x87
    300e:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    3010:	2200      	movs	r2, #0
    3012:	2389      	movs	r3, #137	; 0x89
    3014:	54e2      	strb	r2, [r4, r3]
    3016:	238a      	movs	r3, #138	; 0x8a
    3018:	54e2      	strb	r2, [r4, r3]
    301a:	238b      	movs	r3, #139	; 0x8b
    301c:	54e2      	strb	r2, [r4, r3]
    301e:	238c      	movs	r3, #140	; 0x8c
    3020:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    3022:	1ca0      	adds	r0, r4, #2
    3024:	786a      	ldrb	r2, [r5, #1]
    3026:	1ca9      	adds	r1, r5, #2
    3028:	4b0e      	ldr	r3, [pc, #56]	; (3064 <nwkTxBroadcastFrame+0x84>)
    302a:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    302c:	2341      	movs	r3, #65	; 0x41
    302e:	70a3      	strb	r3, [r4, #2]
    3030:	2378      	movs	r3, #120	; 0x78
    3032:	425b      	negs	r3, r3
    3034:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    3036:	2301      	movs	r3, #1
    3038:	425b      	negs	r3, r3
    303a:	71e3      	strb	r3, [r4, #7]
    303c:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    303e:	796a      	ldrb	r2, [r5, #5]
    3040:	79ab      	ldrb	r3, [r5, #6]
    3042:	7162      	strb	r2, [r4, #5]
    3044:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    3046:	4b08      	ldr	r3, [pc, #32]	; (3068 <nwkTxBroadcastFrame+0x88>)
    3048:	781a      	ldrb	r2, [r3, #0]
    304a:	7262      	strb	r2, [r4, #9]
    304c:	785a      	ldrb	r2, [r3, #1]
    304e:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    3050:	795a      	ldrb	r2, [r3, #5]
    3052:	3201      	adds	r2, #1
    3054:	b2d2      	uxtb	r2, r2
    3056:	715a      	strb	r2, [r3, #5]
    3058:	7122      	strb	r2, [r4, #4]
}
    305a:	bd38      	pop	{r3, r4, r5, pc}
    305c:	00002299 	.word	0x00002299
    3060:	00004a59 	.word	0x00004a59
    3064:	000049fd 	.word	0x000049fd
    3068:	200008ec 	.word	0x200008ec

0000306c <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    306c:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    306e:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    3070:	7b03      	ldrb	r3, [r0, #12]
		return false;
    3072:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    3074:	2b03      	cmp	r3, #3
    3076:	d113      	bne.n	30a0 <nwkTxAckReceived+0x34>
    3078:	e00d      	b.n	3096 <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    307a:	7803      	ldrb	r3, [r0, #0]
    307c:	2b16      	cmp	r3, #22
    307e:	d10c      	bne.n	309a <nwkTxAckReceived+0x2e>
    3080:	7b02      	ldrb	r2, [r0, #12]
    3082:	786b      	ldrb	r3, [r5, #1]
    3084:	429a      	cmp	r2, r3
    3086:	d108      	bne.n	309a <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    3088:	2317      	movs	r3, #23
    308a:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    308c:	78aa      	ldrb	r2, [r5, #2]
    308e:	2388      	movs	r3, #136	; 0x88
    3090:	54c2      	strb	r2, [r0, r3]
			return true;
    3092:	2001      	movs	r0, #1
    3094:	e004      	b.n	30a0 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    3096:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3098:	4c02      	ldr	r4, [pc, #8]	; (30a4 <nwkTxAckReceived+0x38>)
    309a:	47a0      	blx	r4
    309c:	2800      	cmp	r0, #0
    309e:	d1ec      	bne.n	307a <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    30a0:	bd38      	pop	{r3, r4, r5, pc}
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	0000231d 	.word	0x0000231d

000030a8 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    30a8:	2312      	movs	r3, #18
    30aa:	7003      	strb	r3, [r0, #0]
}
    30ac:	4770      	bx	lr
    30ae:	46c0      	nop			; (mov r8, r8)

000030b0 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    30b0:	4b0d      	ldr	r3, [pc, #52]	; (30e8 <PHY_DataConf+0x38>)
    30b2:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    30b4:	2801      	cmp	r0, #1
    30b6:	d009      	beq.n	30cc <PHY_DataConf+0x1c>
    30b8:	2800      	cmp	r0, #0
    30ba:	d003      	beq.n	30c4 <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    30bc:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    30be:	2802      	cmp	r0, #2
    30c0:	d005      	beq.n	30ce <PHY_DataConf+0x1e>
    30c2:	e001      	b.n	30c8 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    30c4:	2200      	movs	r2, #0
    30c6:	e002      	b.n	30ce <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    30c8:	2201      	movs	r2, #1
    30ca:	e000      	b.n	30ce <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    30cc:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    30ce:	2185      	movs	r1, #133	; 0x85
    30d0:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    30d2:	2215      	movs	r2, #21
    30d4:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    30d6:	2200      	movs	r2, #0
    30d8:	4b03      	ldr	r3, [pc, #12]	; (30e8 <PHY_DataConf+0x38>)
    30da:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    30dc:	4a03      	ldr	r2, [pc, #12]	; (30ec <PHY_DataConf+0x3c>)
    30de:	2358      	movs	r3, #88	; 0x58
    30e0:	5ad1      	ldrh	r1, [r2, r3]
    30e2:	3901      	subs	r1, #1
    30e4:	52d1      	strh	r1, [r2, r3]
}
    30e6:	4770      	bx	lr
    30e8:	20000620 	.word	0x20000620
    30ec:	200008ec 	.word	0x200008ec

000030f0 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    30f0:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    30f2:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    30f4:	4d37      	ldr	r5, [pc, #220]	; (31d4 <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    30f6:	4e38      	ldr	r6, [pc, #224]	; (31d8 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    30f8:	e066      	b.n	31c8 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    30fa:	7823      	ldrb	r3, [r4, #0]
    30fc:	3b10      	subs	r3, #16
    30fe:	b2da      	uxtb	r2, r3
    3100:	2a07      	cmp	r2, #7
    3102:	d861      	bhi.n	31c8 <nwkTxTaskHandler+0xd8>
    3104:	0093      	lsls	r3, r2, #2
    3106:	58f3      	ldr	r3, [r6, r3]
    3108:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    310a:	1c20      	adds	r0, r4, #0
    310c:	2101      	movs	r1, #1
    310e:	4b33      	ldr	r3, [pc, #204]	; (31dc <nwkTxTaskHandler+0xec>)
    3110:	4798      	blx	r3
		}
		break;
    3112:	e059      	b.n	31c8 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    3114:	2386      	movs	r3, #134	; 0x86
    3116:	5ce2      	ldrb	r2, [r4, r3]
    3118:	2387      	movs	r3, #135	; 0x87
    311a:	5ce3      	ldrb	r3, [r4, r3]
    311c:	021b      	lsls	r3, r3, #8
    311e:	4313      	orrs	r3, r2
    3120:	d005      	beq.n	312e <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    3122:	2311      	movs	r3, #17
    3124:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    3126:	482e      	ldr	r0, [pc, #184]	; (31e0 <nwkTxTaskHandler+0xf0>)
    3128:	4b2e      	ldr	r3, [pc, #184]	; (31e4 <nwkTxTaskHandler+0xf4>)
    312a:	4798      	blx	r3
    312c:	e04c      	b.n	31c8 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    312e:	2313      	movs	r3, #19
    3130:	7023      	strb	r3, [r4, #0]
    3132:	e049      	b.n	31c8 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    3134:	4b2c      	ldr	r3, [pc, #176]	; (31e8 <nwkTxTaskHandler+0xf8>)
    3136:	681b      	ldr	r3, [r3, #0]
    3138:	2b00      	cmp	r3, #0
    313a:	d145      	bne.n	31c8 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    313c:	4b2a      	ldr	r3, [pc, #168]	; (31e8 <nwkTxTaskHandler+0xf8>)
    313e:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    3140:	2314      	movs	r3, #20
    3142:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    3144:	1c60      	adds	r0, r4, #1
    3146:	4b29      	ldr	r3, [pc, #164]	; (31ec <nwkTxTaskHandler+0xfc>)
    3148:	4798      	blx	r3
				nwkIb.lock++;
    314a:	4a29      	ldr	r2, [pc, #164]	; (31f0 <nwkTxTaskHandler+0x100>)
    314c:	2358      	movs	r3, #88	; 0x58
    314e:	5ad1      	ldrh	r1, [r2, r3]
    3150:	3101      	adds	r1, #1
    3152:	52d1      	strh	r1, [r2, r3]
    3154:	e038      	b.n	31c8 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    3156:	2385      	movs	r3, #133	; 0x85
    3158:	5ce3      	ldrb	r3, [r4, r3]
    315a:	2b00      	cmp	r3, #0
    315c:	d119      	bne.n	3192 <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    315e:	7b61      	ldrb	r1, [r4, #13]
    3160:	7ba3      	ldrb	r3, [r4, #14]
    3162:	021b      	lsls	r3, r3, #8
    3164:	4a22      	ldr	r2, [pc, #136]	; (31f0 <nwkTxTaskHandler+0x100>)
    3166:	8812      	ldrh	r2, [r2, #0]
    3168:	430b      	orrs	r3, r1
    316a:	429a      	cmp	r2, r3
    316c:	d10e      	bne.n	318c <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    316e:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    3170:	07da      	lsls	r2, r3, #31
    3172:	d50b      	bpl.n	318c <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    3174:	2316      	movs	r3, #22
    3176:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    3178:	2215      	movs	r2, #21
    317a:	2386      	movs	r3, #134	; 0x86
    317c:	54e2      	strb	r2, [r4, r3]
    317e:	2200      	movs	r2, #0
    3180:	2387      	movs	r3, #135	; 0x87
    3182:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    3184:	481b      	ldr	r0, [pc, #108]	; (31f4 <nwkTxTaskHandler+0x104>)
    3186:	4b17      	ldr	r3, [pc, #92]	; (31e4 <nwkTxTaskHandler+0xf4>)
    3188:	4798      	blx	r3
    318a:	e01d      	b.n	31c8 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    318c:	2317      	movs	r3, #23
    318e:	7023      	strb	r3, [r4, #0]
    3190:	e01a      	b.n	31c8 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    3192:	2317      	movs	r3, #23
    3194:	7023      	strb	r3, [r4, #0]
    3196:	e017      	b.n	31c8 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    3198:	1c20      	adds	r0, r4, #0
    319a:	4b17      	ldr	r3, [pc, #92]	; (31f8 <nwkTxTaskHandler+0x108>)
    319c:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    319e:	2389      	movs	r3, #137	; 0x89
    31a0:	5ce2      	ldrb	r2, [r4, r3]
    31a2:	238a      	movs	r3, #138	; 0x8a
    31a4:	5ce3      	ldrb	r3, [r4, r3]
    31a6:	021b      	lsls	r3, r3, #8
    31a8:	4313      	orrs	r3, r2
    31aa:	228b      	movs	r2, #139	; 0x8b
    31ac:	5ca2      	ldrb	r2, [r4, r2]
    31ae:	0412      	lsls	r2, r2, #16
    31b0:	4313      	orrs	r3, r2
    31b2:	228c      	movs	r2, #140	; 0x8c
    31b4:	5ca2      	ldrb	r2, [r4, r2]
    31b6:	0612      	lsls	r2, r2, #24
    31b8:	4313      	orrs	r3, r2
    31ba:	d103      	bne.n	31c4 <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    31bc:	1c20      	adds	r0, r4, #0
    31be:	4b0f      	ldr	r3, [pc, #60]	; (31fc <nwkTxTaskHandler+0x10c>)
    31c0:	4798      	blx	r3
    31c2:	e001      	b.n	31c8 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    31c4:	1c20      	adds	r0, r4, #0
    31c6:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    31c8:	1c20      	adds	r0, r4, #0
    31ca:	47a8      	blx	r5
    31cc:	1e04      	subs	r4, r0, #0
    31ce:	d194      	bne.n	30fa <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    31d0:	bd70      	pop	{r4, r5, r6, pc}
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	0000231d 	.word	0x0000231d
    31d8:	00005a48 	.word	0x00005a48
    31dc:	00002be5 	.word	0x00002be5
    31e0:	20000624 	.word	0x20000624
    31e4:	000035d1 	.word	0x000035d1
    31e8:	20000620 	.word	0x20000620
    31ec:	00003365 	.word	0x00003365
    31f0:	200008ec 	.word	0x200008ec
    31f4:	2000060c 	.word	0x2000060c
    31f8:	00002521 	.word	0x00002521
    31fc:	00002309 	.word	0x00002309

00003200 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    3200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3202:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3204:	4f0b      	ldr	r7, [pc, #44]	; (3234 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3206:	4e0c      	ldr	r6, [pc, #48]	; (3238 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3208:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    320a:	2002      	movs	r0, #2
    320c:	2103      	movs	r1, #3
    320e:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3210:	2001      	movs	r0, #1
    3212:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3214:	4028      	ands	r0, r5
    3216:	2808      	cmp	r0, #8
    3218:	d1f7      	bne.n	320a <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    321a:	4f06      	ldr	r7, [pc, #24]	; (3234 <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    321c:	4e06      	ldr	r6, [pc, #24]	; (3238 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    321e:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3220:	2002      	movs	r0, #2
    3222:	1c21      	adds	r1, r4, #0
    3224:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3226:	2001      	movs	r0, #1
    3228:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    322a:	4028      	ands	r0, r5
    322c:	4284      	cmp	r4, r0
    322e:	d1f7      	bne.n	3220 <phyTrxSetState+0x20>
}
    3230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3232:	46c0      	nop			; (mov r8, r8)
    3234:	00003c01 	.word	0x00003c01
    3238:	00003b09 	.word	0x00003b09

0000323c <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    323c:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    323e:	2008      	movs	r0, #8
    3240:	4b06      	ldr	r3, [pc, #24]	; (325c <phySetRxState+0x20>)
    3242:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3244:	200f      	movs	r0, #15
    3246:	4b06      	ldr	r3, [pc, #24]	; (3260 <phySetRxState+0x24>)
    3248:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    324a:	4b06      	ldr	r3, [pc, #24]	; (3264 <phySetRxState+0x28>)
    324c:	781b      	ldrb	r3, [r3, #0]
    324e:	2b00      	cmp	r3, #0
    3250:	d002      	beq.n	3258 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    3252:	2016      	movs	r0, #22
    3254:	4b01      	ldr	r3, [pc, #4]	; (325c <phySetRxState+0x20>)
    3256:	4798      	blx	r3
	}
}
    3258:	bd08      	pop	{r3, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	00003201 	.word	0x00003201
    3260:	00003b09 	.word	0x00003b09
    3264:	200006b9 	.word	0x200006b9

00003268 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    3268:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    326a:	4b0e      	ldr	r3, [pc, #56]	; (32a4 <PHY_Init+0x3c>)
    326c:	4798      	blx	r3
	PhyReset();
    326e:	4b0e      	ldr	r3, [pc, #56]	; (32a8 <PHY_Init+0x40>)
    3270:	4798      	blx	r3
	phyRxState = false;
    3272:	2200      	movs	r2, #0
    3274:	4b0d      	ldr	r3, [pc, #52]	; (32ac <PHY_Init+0x44>)
    3276:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    3278:	2201      	movs	r2, #1
    327a:	4b0d      	ldr	r3, [pc, #52]	; (32b0 <PHY_Init+0x48>)
    327c:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    327e:	4e0d      	ldr	r6, [pc, #52]	; (32b4 <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3280:	4d0d      	ldr	r5, [pc, #52]	; (32b8 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3282:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3284:	2002      	movs	r0, #2
    3286:	2108      	movs	r1, #8
    3288:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    328a:	2001      	movs	r0, #1
    328c:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    328e:	4020      	ands	r0, r4
    3290:	2808      	cmp	r0, #8
    3292:	d1f7      	bne.n	3284 <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3294:	2004      	movs	r0, #4
    3296:	212e      	movs	r1, #46	; 0x2e
    3298:	4c06      	ldr	r4, [pc, #24]	; (32b4 <PHY_Init+0x4c>)
    329a:	47a0      	blx	r4
    329c:	200c      	movs	r0, #12
    329e:	21a0      	movs	r1, #160	; 0xa0
    32a0:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    32a2:	bd70      	pop	{r4, r5, r6, pc}
    32a4:	000039c9 	.word	0x000039c9
    32a8:	00003ad9 	.word	0x00003ad9
    32ac:	200006b9 	.word	0x200006b9
    32b0:	200006b8 	.word	0x200006b8
    32b4:	00003c01 	.word	0x00003c01
    32b8:	00003b09 	.word	0x00003b09

000032bc <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    32bc:	b508      	push	{r3, lr}
	phyRxState = rx;
    32be:	4b02      	ldr	r3, [pc, #8]	; (32c8 <PHY_SetRxState+0xc>)
    32c0:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    32c2:	4b02      	ldr	r3, [pc, #8]	; (32cc <PHY_SetRxState+0x10>)
    32c4:	4798      	blx	r3
}
    32c6:	bd08      	pop	{r3, pc}
    32c8:	200006b9 	.word	0x200006b9
    32cc:	0000323d 	.word	0x0000323d

000032d0 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    32d0:	b510      	push	{r4, lr}
    32d2:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    32d4:	2008      	movs	r0, #8
    32d6:	4b05      	ldr	r3, [pc, #20]	; (32ec <PHY_SetChannel+0x1c>)
    32d8:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    32da:	231f      	movs	r3, #31
    32dc:	1c01      	adds	r1, r0, #0
    32de:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    32e0:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    32e2:	b2e1      	uxtb	r1, r4
    32e4:	2008      	movs	r0, #8
    32e6:	4b02      	ldr	r3, [pc, #8]	; (32f0 <PHY_SetChannel+0x20>)
    32e8:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    32ea:	bd10      	pop	{r4, pc}
    32ec:	00003b09 	.word	0x00003b09
    32f0:	00003c01 	.word	0x00003c01

000032f4 <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    32f4:	b530      	push	{r4, r5, lr}
    32f6:	b083      	sub	sp, #12
    32f8:	466c      	mov	r4, sp
    32fa:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    32fc:	b2c1      	uxtb	r1, r0
    32fe:	2022      	movs	r0, #34	; 0x22
    3300:	4d03      	ldr	r5, [pc, #12]	; (3310 <PHY_SetPanId+0x1c>)
    3302:	47a8      	blx	r5
    3304:	79e1      	ldrb	r1, [r4, #7]
    3306:	2023      	movs	r0, #35	; 0x23
    3308:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    330a:	b003      	add	sp, #12
    330c:	bd30      	pop	{r4, r5, pc}
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	00003c01 	.word	0x00003c01

00003314 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    3314:	b570      	push	{r4, r5, r6, lr}
    3316:	b082      	sub	sp, #8
    3318:	466d      	mov	r5, sp
    331a:	80e8      	strh	r0, [r5, #6]
    331c:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    331e:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3320:	2020      	movs	r0, #32
    3322:	1c31      	adds	r1, r6, #0
    3324:	4c05      	ldr	r4, [pc, #20]	; (333c <PHY_SetShortAddr+0x28>)
    3326:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    3328:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    332a:	2021      	movs	r0, #33	; 0x21
    332c:	1c29      	adds	r1, r5, #0
    332e:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    3330:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3332:	b2f1      	uxtb	r1, r6
    3334:	202d      	movs	r0, #45	; 0x2d
    3336:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    3338:	b002      	add	sp, #8
    333a:	bd70      	pop	{r4, r5, r6, pc}
    333c:	00003c01 	.word	0x00003c01

00003340 <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    3340:	b510      	push	{r4, lr}
    3342:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3344:	2005      	movs	r0, #5
    3346:	4b05      	ldr	r3, [pc, #20]	; (335c <PHY_SetTxPower+0x1c>)
    3348:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    334a:	230f      	movs	r3, #15
    334c:	1c01      	adds	r1, r0, #0
    334e:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    3350:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3352:	b2e1      	uxtb	r1, r4
    3354:	2005      	movs	r0, #5
    3356:	4b02      	ldr	r3, [pc, #8]	; (3360 <PHY_SetTxPower+0x20>)
    3358:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    335a:	bd10      	pop	{r4, pc}
    335c:	00003b09 	.word	0x00003b09
    3360:	00003c01 	.word	0x00003c01

00003364 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    3364:	b510      	push	{r4, lr}
    3366:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    3368:	2019      	movs	r0, #25
    336a:	4b0c      	ldr	r3, [pc, #48]	; (339c <PHY_DataReq+0x38>)
    336c:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    336e:	200f      	movs	r0, #15
    3370:	4b0b      	ldr	r3, [pc, #44]	; (33a0 <PHY_DataReq+0x3c>)
    3372:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    3374:	7821      	ldrb	r1, [r4, #0]
    3376:	1c8b      	adds	r3, r1, #2
    3378:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    337a:	3101      	adds	r1, #1
    337c:	b2c9      	uxtb	r1, r1
    337e:	1c20      	adds	r0, r4, #0
    3380:	4b08      	ldr	r3, [pc, #32]	; (33a4 <PHY_DataReq+0x40>)
    3382:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    3384:	2203      	movs	r2, #3
    3386:	4b08      	ldr	r3, [pc, #32]	; (33a8 <PHY_DataReq+0x44>)
    3388:	701a      	strb	r2, [r3, #0]
    338a:	4b08      	ldr	r3, [pc, #32]	; (33ac <PHY_DataReq+0x48>)
    338c:	2280      	movs	r2, #128	; 0x80
    338e:	0352      	lsls	r2, r2, #13
    3390:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3396:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    3398:	bd10      	pop	{r4, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	00003201 	.word	0x00003201
    33a0:	00003b09 	.word	0x00003b09
    33a4:	00003e3d 	.word	0x00003e3d
    33a8:	200006b8 	.word	0x200006b8
    33ac:	41004400 	.word	0x41004400

000033b0 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    33b0:	b510      	push	{r4, lr}
    33b2:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    33b4:	1c08      	adds	r0, r1, #0
    33b6:	2100      	movs	r1, #0
    33b8:	2200      	movs	r2, #0
    33ba:	4b05      	ldr	r3, [pc, #20]	; (33d0 <PHY_EncryptReq+0x20>)
    33bc:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    33be:	1c20      	adds	r0, r4, #0
    33c0:	2100      	movs	r1, #0
    33c2:	4b04      	ldr	r3, [pc, #16]	; (33d4 <PHY_EncryptReq+0x24>)
    33c4:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    33c6:	1c20      	adds	r0, r4, #0
    33c8:	4b03      	ldr	r3, [pc, #12]	; (33d8 <PHY_EncryptReq+0x28>)
    33ca:	4798      	blx	r3
}
    33cc:	bd10      	pop	{r4, pc}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	00003861 	.word	0x00003861
    33d4:	000037f5 	.word	0x000037f5
    33d8:	00003999 	.word	0x00003999

000033dc <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    33dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    33de:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    33e0:	4b26      	ldr	r3, [pc, #152]	; (347c <PHY_TaskHandler+0xa0>)
    33e2:	781b      	ldrb	r3, [r3, #0]
    33e4:	2b02      	cmp	r3, #2
    33e6:	d046      	beq.n	3476 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    33e8:	200f      	movs	r0, #15
    33ea:	4b25      	ldr	r3, [pc, #148]	; (3480 <PHY_TaskHandler+0xa4>)
    33ec:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    33ee:	0703      	lsls	r3, r0, #28
    33f0:	d541      	bpl.n	3476 <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    33f2:	4b22      	ldr	r3, [pc, #136]	; (347c <PHY_TaskHandler+0xa0>)
    33f4:	781b      	ldrb	r3, [r3, #0]
    33f6:	2b01      	cmp	r3, #1
    33f8:	d124      	bne.n	3444 <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    33fa:	2007      	movs	r0, #7
    33fc:	4b20      	ldr	r3, [pc, #128]	; (3480 <PHY_TaskHandler+0xa4>)
    33fe:	4798      	blx	r3
    3400:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    3402:	466c      	mov	r4, sp
    3404:	3407      	adds	r4, #7
    3406:	1c20      	adds	r0, r4, #0
    3408:	2101      	movs	r1, #1
    340a:	4e1e      	ldr	r6, [pc, #120]	; (3484 <PHY_TaskHandler+0xa8>)
    340c:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    340e:	4d1e      	ldr	r5, [pc, #120]	; (3488 <PHY_TaskHandler+0xac>)
    3410:	7821      	ldrb	r1, [r4, #0]
    3412:	3102      	adds	r1, #2
    3414:	b2c9      	uxtb	r1, r1
    3416:	1c28      	adds	r0, r5, #0
    3418:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    341a:	a802      	add	r0, sp, #8
    341c:	1c6a      	adds	r2, r5, #1
    341e:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    3420:	7822      	ldrb	r2, [r4, #0]
    3422:	1e91      	subs	r1, r2, #2
    3424:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    3426:	18ad      	adds	r5, r5, r2
    3428:	786a      	ldrb	r2, [r5, #1]
    342a:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    342c:	3f5b      	subs	r7, #91	; 0x5b
    342e:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    3430:	4b16      	ldr	r3, [pc, #88]	; (348c <PHY_TaskHandler+0xb0>)
    3432:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3434:	4d12      	ldr	r5, [pc, #72]	; (3480 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3436:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3438:	2001      	movs	r0, #1
    343a:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    343c:	4020      	ands	r0, r4
    343e:	2816      	cmp	r0, #22
    3440:	d1fa      	bne.n	3438 <PHY_TaskHandler+0x5c>
    3442:	e018      	b.n	3476 <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    3444:	2b03      	cmp	r3, #3
    3446:	d116      	bne.n	3476 <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3448:	2002      	movs	r0, #2
    344a:	4b0d      	ldr	r3, [pc, #52]	; (3480 <PHY_TaskHandler+0xa4>)
    344c:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    344e:	0944      	lsrs	r4, r0, #5
    3450:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    3452:	2c00      	cmp	r4, #0
    3454:	d007      	beq.n	3466 <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    3456:	2c03      	cmp	r4, #3
    3458:	d004      	beq.n	3464 <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    345a:	3c05      	subs	r4, #5
    345c:	1e63      	subs	r3, r4, #1
    345e:	419c      	sbcs	r4, r3
    3460:	3402      	adds	r4, #2
    3462:	e000      	b.n	3466 <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    3464:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    3466:	4b0a      	ldr	r3, [pc, #40]	; (3490 <PHY_TaskHandler+0xb4>)
    3468:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    346a:	2201      	movs	r2, #1
    346c:	4b03      	ldr	r3, [pc, #12]	; (347c <PHY_TaskHandler+0xa0>)
    346e:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    3470:	1c20      	adds	r0, r4, #0
    3472:	4b08      	ldr	r3, [pc, #32]	; (3494 <PHY_TaskHandler+0xb8>)
    3474:	4798      	blx	r3
		}
	}
}
    3476:	b005      	add	sp, #20
    3478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	200006b8 	.word	0x200006b8
    3480:	00003b09 	.word	0x00003b09
    3484:	00003cfd 	.word	0x00003cfd
    3488:	20000638 	.word	0x20000638
    348c:	00002799 	.word	0x00002799
    3490:	0000323d 	.word	0x0000323d
    3494:	000030b1 	.word	0x000030b1

00003498 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    3498:	b508      	push	{r3, lr}
	SYS_TimerInit();
    349a:	4b04      	ldr	r3, [pc, #16]	; (34ac <SYS_Init+0x14>)
    349c:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    349e:	4b04      	ldr	r3, [pc, #16]	; (34b0 <SYS_Init+0x18>)
    34a0:	4798      	blx	r3
#endif
	PHY_Init();
    34a2:	4b04      	ldr	r3, [pc, #16]	; (34b4 <SYS_Init+0x1c>)
    34a4:	4798      	blx	r3
	NWK_Init();
    34a6:	4b04      	ldr	r3, [pc, #16]	; (34b8 <SYS_Init+0x20>)
    34a8:	4798      	blx	r3
}
    34aa:	bd08      	pop	{r3, pc}
    34ac:	00003569 	.word	0x00003569
    34b0:	000037f1 	.word	0x000037f1
    34b4:	00003269 	.word	0x00003269
    34b8:	00002011 	.word	0x00002011

000034bc <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    34bc:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    34be:	4b03      	ldr	r3, [pc, #12]	; (34cc <SYS_TaskHandler+0x10>)
    34c0:	4798      	blx	r3
	NWK_TaskHandler();
    34c2:	4b03      	ldr	r3, [pc, #12]	; (34d0 <SYS_TaskHandler+0x14>)
    34c4:	4798      	blx	r3
	SYS_TimerTaskHandler();
    34c6:	4b03      	ldr	r3, [pc, #12]	; (34d4 <SYS_TaskHandler+0x18>)
    34c8:	4798      	blx	r3
}
    34ca:	bd08      	pop	{r3, pc}
    34cc:	000033dd 	.word	0x000033dd
    34d0:	0000209d 	.word	0x0000209d
    34d4:	000035ed 	.word	0x000035ed

000034d8 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    34d8:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    34da:	4b02      	ldr	r3, [pc, #8]	; (34e4 <SYS_EncryptReq+0xc>)
    34dc:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    34de:	4b02      	ldr	r3, [pc, #8]	; (34e8 <SYS_EncryptReq+0x10>)
    34e0:	4798      	blx	r3
}
    34e2:	bd08      	pop	{r3, pc}
    34e4:	000033b1 	.word	0x000033b1
    34e8:	00002c01 	.word	0x00002c01

000034ec <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    34ec:	b530      	push	{r4, r5, lr}
	if (timers) {
    34ee:	4b15      	ldr	r3, [pc, #84]	; (3544 <placeTimer+0x58>)
    34f0:	681d      	ldr	r5, [r3, #0]
    34f2:	2d00      	cmp	r5, #0
    34f4:	d01e      	beq.n	3534 <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    34f6:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    34f8:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    34fa:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    34fc:	428a      	cmp	r2, r1
    34fe:	d20a      	bcs.n	3516 <placeTimer+0x2a>
    3500:	e004      	b.n	350c <placeTimer+0x20>
    3502:	6859      	ldr	r1, [r3, #4]
    3504:	4291      	cmp	r1, r2
    3506:	d803      	bhi.n	3510 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3508:	1c1c      	adds	r4, r3, #0
    350a:	e004      	b.n	3516 <placeTimer+0x2a>
    350c:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    350e:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    3510:	1a89      	subs	r1, r1, r2
    3512:	6059      	str	r1, [r3, #4]
				break;
    3514:	e003      	b.n	351e <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    3516:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3518:	6823      	ldr	r3, [r4, #0]
    351a:	2b00      	cmp	r3, #0
    351c:	d1f1      	bne.n	3502 <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    351e:	6042      	str	r2, [r0, #4]

		if (prev) {
    3520:	2c00      	cmp	r4, #0
    3522:	d003      	beq.n	352c <placeTimer+0x40>
			timer->next = prev->next;
    3524:	6823      	ldr	r3, [r4, #0]
    3526:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3528:	6020      	str	r0, [r4, #0]
    352a:	e009      	b.n	3540 <placeTimer+0x54>
		} else {
			timer->next = timers;
    352c:	6005      	str	r5, [r0, #0]
			timers = timer;
    352e:	4b05      	ldr	r3, [pc, #20]	; (3544 <placeTimer+0x58>)
    3530:	6018      	str	r0, [r3, #0]
    3532:	e005      	b.n	3540 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    3534:	2300      	movs	r3, #0
    3536:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3538:	6883      	ldr	r3, [r0, #8]
    353a:	6043      	str	r3, [r0, #4]
		timers = timer;
    353c:	4b01      	ldr	r3, [pc, #4]	; (3544 <placeTimer+0x58>)
    353e:	6018      	str	r0, [r3, #0]
	}
}
    3540:	bd30      	pop	{r4, r5, pc}
    3542:	46c0      	nop			; (mov r8, r8)
    3544:	200006bc 	.word	0x200006bc

00003548 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    3548:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    354a:	4b04      	ldr	r3, [pc, #16]	; (355c <SYS_HwExpiry_Cb+0x14>)
    354c:	781a      	ldrb	r2, [r3, #0]
    354e:	3201      	adds	r2, #1
    3550:	b2d2      	uxtb	r2, r2
    3552:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3554:	4802      	ldr	r0, [pc, #8]	; (3560 <SYS_HwExpiry_Cb+0x18>)
    3556:	4b03      	ldr	r3, [pc, #12]	; (3564 <SYS_HwExpiry_Cb+0x1c>)
    3558:	4798      	blx	r3
}
    355a:	bd08      	pop	{r3, pc}
    355c:	20000948 	.word	0x20000948
    3560:	00002710 	.word	0x00002710
    3564:	000047d1 	.word	0x000047d1

00003568 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    3568:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    356a:	2400      	movs	r4, #0
    356c:	4b06      	ldr	r3, [pc, #24]	; (3588 <SYS_TimerInit+0x20>)
    356e:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3570:	4806      	ldr	r0, [pc, #24]	; (358c <SYS_TimerInit+0x24>)
    3572:	4b07      	ldr	r3, [pc, #28]	; (3590 <SYS_TimerInit+0x28>)
    3574:	4798      	blx	r3
	common_tc_init();
    3576:	4b07      	ldr	r3, [pc, #28]	; (3594 <SYS_TimerInit+0x2c>)
    3578:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    357a:	4807      	ldr	r0, [pc, #28]	; (3598 <SYS_TimerInit+0x30>)
    357c:	4b07      	ldr	r3, [pc, #28]	; (359c <SYS_TimerInit+0x34>)
    357e:	4798      	blx	r3
	timers = NULL;
    3580:	4b07      	ldr	r3, [pc, #28]	; (35a0 <SYS_TimerInit+0x38>)
    3582:	601c      	str	r4, [r3, #0]
}
    3584:	bd10      	pop	{r4, pc}
    3586:	46c0      	nop			; (mov r8, r8)
    3588:	20000948 	.word	0x20000948
    358c:	00003549 	.word	0x00003549
    3590:	000048c1 	.word	0x000048c1
    3594:	0000483d 	.word	0x0000483d
    3598:	00002710 	.word	0x00002710
    359c:	000047d1 	.word	0x000047d1
    35a0:	200006bc 	.word	0x200006bc

000035a4 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    35a4:	4b09      	ldr	r3, [pc, #36]	; (35cc <SYS_TimerStarted+0x28>)
    35a6:	681b      	ldr	r3, [r3, #0]
    35a8:	2b00      	cmp	r3, #0
    35aa:	d009      	beq.n	35c0 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    35ac:	4283      	cmp	r3, r0
    35ae:	d102      	bne.n	35b6 <SYS_TimerStarted+0x12>
    35b0:	e008      	b.n	35c4 <SYS_TimerStarted+0x20>
    35b2:	4298      	cmp	r0, r3
    35b4:	d008      	beq.n	35c8 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    35b6:	681b      	ldr	r3, [r3, #0]
    35b8:	2b00      	cmp	r3, #0
    35ba:	d1fa      	bne.n	35b2 <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    35bc:	2000      	movs	r0, #0
    35be:	e004      	b.n	35ca <SYS_TimerStarted+0x26>
    35c0:	2000      	movs	r0, #0
    35c2:	e002      	b.n	35ca <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    35c4:	2001      	movs	r0, #1
    35c6:	e000      	b.n	35ca <SYS_TimerStarted+0x26>
    35c8:	2001      	movs	r0, #1
		}
	}
	return false;
}
    35ca:	4770      	bx	lr
    35cc:	200006bc 	.word	0x200006bc

000035d0 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    35d0:	b510      	push	{r4, lr}
    35d2:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    35d4:	4b03      	ldr	r3, [pc, #12]	; (35e4 <SYS_TimerStart+0x14>)
    35d6:	4798      	blx	r3
    35d8:	2800      	cmp	r0, #0
    35da:	d102      	bne.n	35e2 <SYS_TimerStart+0x12>
		placeTimer(timer);
    35dc:	1c20      	adds	r0, r4, #0
    35de:	4b02      	ldr	r3, [pc, #8]	; (35e8 <SYS_TimerStart+0x18>)
    35e0:	4798      	blx	r3
	}
}
    35e2:	bd10      	pop	{r4, pc}
    35e4:	000035a5 	.word	0x000035a5
    35e8:	000034ed 	.word	0x000034ed

000035ec <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    35ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    35ee:	4b1a      	ldr	r3, [pc, #104]	; (3658 <SYS_TimerTaskHandler+0x6c>)
    35f0:	781b      	ldrb	r3, [r3, #0]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d02f      	beq.n	3656 <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    35f6:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    35fa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    35fc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3600:	2100      	movs	r1, #0
    3602:	4b16      	ldr	r3, [pc, #88]	; (365c <SYS_TimerTaskHandler+0x70>)
    3604:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    3606:	4a14      	ldr	r2, [pc, #80]	; (3658 <SYS_TimerTaskHandler+0x6c>)
    3608:	7813      	ldrb	r3, [r2, #0]
    360a:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    360c:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    360e:	2800      	cmp	r0, #0
    3610:	d105      	bne.n	361e <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    3612:	2101      	movs	r1, #1
    3614:	4a11      	ldr	r2, [pc, #68]	; (365c <SYS_TimerTaskHandler+0x70>)
    3616:	7011      	strb	r1, [r2, #0]
    3618:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    361c:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    361e:	009d      	lsls	r5, r3, #2
    3620:	18ed      	adds	r5, r5, r3
    3622:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    3624:	4e0e      	ldr	r6, [pc, #56]	; (3660 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    3626:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3628:	e00d      	b.n	3646 <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    362a:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    362c:	6823      	ldr	r3, [r4, #0]
    362e:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3630:	7b23      	ldrb	r3, [r4, #12]
    3632:	2b01      	cmp	r3, #1
    3634:	d102      	bne.n	363c <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    3636:	1c20      	adds	r0, r4, #0
    3638:	4b0a      	ldr	r3, [pc, #40]	; (3664 <SYS_TimerTaskHandler+0x78>)
    363a:	4798      	blx	r3
		}
		if(timer->handler)
    363c:	6923      	ldr	r3, [r4, #16]
    363e:	2b00      	cmp	r3, #0
    3640:	d001      	beq.n	3646 <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    3642:	1c20      	adds	r0, r4, #0
    3644:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3646:	6834      	ldr	r4, [r6, #0]
    3648:	2c00      	cmp	r4, #0
    364a:	d004      	beq.n	3656 <SYS_TimerTaskHandler+0x6a>
    364c:	6863      	ldr	r3, [r4, #4]
    364e:	429d      	cmp	r5, r3
    3650:	d2eb      	bcs.n	362a <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    3652:	1b5d      	subs	r5, r3, r5
    3654:	6065      	str	r5, [r4, #4]
	}
}
    3656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3658:	20000948 	.word	0x20000948
    365c:	20000008 	.word	0x20000008
    3660:	200006bc 	.word	0x200006bc
    3664:	000034ed 	.word	0x000034ed

00003668 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    3668:	b508      	push	{r3, lr}
	tmr_cca_callback();
    366a:	4b01      	ldr	r3, [pc, #4]	; (3670 <tc_cca_callback+0x8>)
    366c:	4798      	blx	r3
}
    366e:	bd08      	pop	{r3, pc}
    3670:	000048a5 	.word	0x000048a5

00003674 <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    3674:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    3676:	4b01      	ldr	r3, [pc, #4]	; (367c <tc_ovf_callback+0x8>)
    3678:	4798      	blx	r3
}
    367a:	bd08      	pop	{r3, pc}
    367c:	0000485d 	.word	0x0000485d

00003680 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    3680:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    3682:	4802      	ldr	r0, [pc, #8]	; (368c <tmr_read_count+0xc>)
    3684:	4b02      	ldr	r3, [pc, #8]	; (3690 <tmr_read_count+0x10>)
    3686:	4798      	blx	r3
    3688:	b280      	uxth	r0, r0
}
    368a:	bd08      	pop	{r3, pc}
    368c:	20000980 	.word	0x20000980
    3690:	00001e11 	.word	0x00001e11

00003694 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    3694:	4b03      	ldr	r3, [pc, #12]	; (36a4 <tmr_disable_cc_interrupt+0x10>)
    3696:	2210      	movs	r2, #16
    3698:	6819      	ldr	r1, [r3, #0]
    369a:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    369c:	7e59      	ldrb	r1, [r3, #25]
    369e:	4391      	bics	r1, r2
    36a0:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    36a2:	4770      	bx	lr
    36a4:	20000980 	.word	0x20000980

000036a8 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    36a8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    36aa:	4c0a      	ldr	r4, [pc, #40]	; (36d4 <tmr_enable_cc_interrupt+0x2c>)
    36ac:	6820      	ldr	r0, [r4, #0]
    36ae:	4b0a      	ldr	r3, [pc, #40]	; (36d8 <tmr_enable_cc_interrupt+0x30>)
    36b0:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    36b2:	4b0a      	ldr	r3, [pc, #40]	; (36dc <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    36b4:	5c1b      	ldrb	r3, [r3, r0]
    36b6:	221f      	movs	r2, #31
    36b8:	401a      	ands	r2, r3
    36ba:	2301      	movs	r3, #1
    36bc:	4093      	lsls	r3, r2
    36be:	1c1a      	adds	r2, r3, #0
    36c0:	4b07      	ldr	r3, [pc, #28]	; (36e0 <tmr_enable_cc_interrupt+0x38>)
    36c2:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    36c4:	7e62      	ldrb	r2, [r4, #25]
    36c6:	2310      	movs	r3, #16
    36c8:	4313      	orrs	r3, r2
    36ca:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    36cc:	6823      	ldr	r3, [r4, #0]
    36ce:	2210      	movs	r2, #16
    36d0:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    36d2:	bd10      	pop	{r4, pc}
    36d4:	20000980 	.word	0x20000980
    36d8:	00001b65 	.word	0x00001b65
    36dc:	00005a68 	.word	0x00005a68
    36e0:	e000e100 	.word	0xe000e100

000036e4 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    36e4:	b508      	push	{r3, lr}
    36e6:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    36e8:	4802      	ldr	r0, [pc, #8]	; (36f4 <tmr_write_cmpreg+0x10>)
    36ea:	2100      	movs	r1, #0
    36ec:	4b02      	ldr	r3, [pc, #8]	; (36f8 <tmr_write_cmpreg+0x14>)
    36ee:	4798      	blx	r3
			(uint32_t)compare_value);
}
    36f0:	bd08      	pop	{r3, pc}
    36f2:	46c0      	nop			; (mov r8, r8)
    36f4:	20000980 	.word	0x20000980
    36f8:	00001e41 	.word	0x00001e41

000036fc <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    36fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36fe:	464f      	mov	r7, r9
    3700:	4646      	mov	r6, r8
    3702:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3704:	4a2d      	ldr	r2, [pc, #180]	; (37bc <tmr_init+0xc0>)
    3706:	2300      	movs	r3, #0
    3708:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    370a:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    370c:	2100      	movs	r1, #0
    370e:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3710:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3712:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3714:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3716:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3718:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    371a:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    371c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    371e:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3720:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3722:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3724:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3726:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3728:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    372a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    372c:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    372e:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    3730:	2301      	movs	r3, #1
    3732:	425b      	negs	r3, r3
    3734:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    3736:	4c22      	ldr	r4, [pc, #136]	; (37c0 <tmr_init+0xc4>)
    3738:	1c20      	adds	r0, r4, #0
    373a:	4922      	ldr	r1, [pc, #136]	; (37c4 <tmr_init+0xc8>)
    373c:	4b22      	ldr	r3, [pc, #136]	; (37c8 <tmr_init+0xcc>)
    373e:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3740:	1c20      	adds	r0, r4, #0
    3742:	4922      	ldr	r1, [pc, #136]	; (37cc <tmr_init+0xd0>)
    3744:	2200      	movs	r2, #0
    3746:	4d22      	ldr	r5, [pc, #136]	; (37d0 <tmr_init+0xd4>)
    3748:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    374a:	1c20      	adds	r0, r4, #0
    374c:	4921      	ldr	r1, [pc, #132]	; (37d4 <tmr_init+0xd8>)
    374e:	2202      	movs	r2, #2
    3750:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3752:	6820      	ldr	r0, [r4, #0]
    3754:	4a20      	ldr	r2, [pc, #128]	; (37d8 <tmr_init+0xdc>)
    3756:	4691      	mov	r9, r2
    3758:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    375a:	4b20      	ldr	r3, [pc, #128]	; (37dc <tmr_init+0xe0>)
    375c:	4698      	mov	r8, r3
    375e:	5c1b      	ldrb	r3, [r3, r0]
    3760:	271f      	movs	r7, #31
    3762:	403b      	ands	r3, r7
    3764:	2501      	movs	r5, #1
    3766:	1c2a      	adds	r2, r5, #0
    3768:	409a      	lsls	r2, r3
    376a:	4e1d      	ldr	r6, [pc, #116]	; (37e0 <tmr_init+0xe4>)
    376c:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    376e:	7e62      	ldrb	r2, [r4, #25]
    3770:	2301      	movs	r3, #1
    3772:	4313      	orrs	r3, r2
    3774:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3776:	6820      	ldr	r0, [r4, #0]
    3778:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    377a:	47c8      	blx	r9
    377c:	4642      	mov	r2, r8
    377e:	5c13      	ldrb	r3, [r2, r0]
    3780:	401f      	ands	r7, r3
    3782:	40bd      	lsls	r5, r7
    3784:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3786:	7e62      	ldrb	r2, [r4, #25]
    3788:	2310      	movs	r3, #16
    378a:	4313      	orrs	r3, r2
    378c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    378e:	6822      	ldr	r2, [r4, #0]
    3790:	2310      	movs	r3, #16
    3792:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3794:	217f      	movs	r1, #127	; 0x7f
    3796:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3798:	438b      	bics	r3, r1
    379a:	d1fc      	bne.n	3796 <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    379c:	8811      	ldrh	r1, [r2, #0]
    379e:	2302      	movs	r3, #2
    37a0:	430b      	orrs	r3, r1
    37a2:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    37a4:	2000      	movs	r0, #0
    37a6:	4b0f      	ldr	r3, [pc, #60]	; (37e4 <tmr_init+0xe8>)
    37a8:	4798      	blx	r3
    37aa:	490f      	ldr	r1, [pc, #60]	; (37e8 <tmr_init+0xec>)
    37ac:	4b0f      	ldr	r3, [pc, #60]	; (37ec <tmr_init+0xf0>)
    37ae:	4798      	blx	r3
	#endif
	return timer_multiplier;
    37b0:	b2c0      	uxtb	r0, r0
}
    37b2:	bc0c      	pop	{r2, r3}
    37b4:	4690      	mov	r8, r2
    37b6:	4699      	mov	r9, r3
    37b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37ba:	46c0      	nop			; (mov r8, r8)
    37bc:	2000094c 	.word	0x2000094c
    37c0:	20000980 	.word	0x20000980
    37c4:	42002c00 	.word	0x42002c00
    37c8:	00001b9d 	.word	0x00001b9d
    37cc:	00003675 	.word	0x00003675
    37d0:	00001aa5 	.word	0x00001aa5
    37d4:	00003669 	.word	0x00003669
    37d8:	00001b65 	.word	0x00001b65
    37dc:	00005a68 	.word	0x00005a68
    37e0:	e000e100 	.word	0xe000e100
    37e4:	0000185d 	.word	0x0000185d
    37e8:	000f4240 	.word	0x000f4240
    37ec:	000048cd 	.word	0x000048cd

000037f0 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    37f0:	4770      	bx	lr
    37f2:	46c0      	nop			; (mov r8, r8)

000037f4 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    37f4:	b538      	push	{r3, r4, r5, lr}
    37f6:	1c03      	adds	r3, r0, #0
    37f8:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    37fa:	4c14      	ldr	r4, [pc, #80]	; (384c <sal_aes_wrrd+0x58>)
    37fc:	1c60      	adds	r0, r4, #1
    37fe:	1c19      	adds	r1, r3, #0
    3800:	2210      	movs	r2, #16
    3802:	4b13      	ldr	r3, [pc, #76]	; (3850 <sal_aes_wrrd+0x5c>)
    3804:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3806:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3808:	4b12      	ldr	r3, [pc, #72]	; (3854 <sal_aes_wrrd+0x60>)
    380a:	781b      	ldrb	r3, [r3, #0]
    380c:	2b00      	cmp	r3, #0
    380e:	d008      	beq.n	3822 <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3810:	2083      	movs	r0, #131	; 0x83
    3812:	490e      	ldr	r1, [pc, #56]	; (384c <sal_aes_wrrd+0x58>)
    3814:	2212      	movs	r2, #18
    3816:	4b10      	ldr	r3, [pc, #64]	; (3858 <sal_aes_wrrd+0x64>)
    3818:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    381a:	2200      	movs	r2, #0
    381c:	4b0d      	ldr	r3, [pc, #52]	; (3854 <sal_aes_wrrd+0x60>)
    381e:	701a      	strb	r2, [r3, #0]
    3820:	e005      	b.n	382e <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3822:	2084      	movs	r0, #132	; 0x84
    3824:	4909      	ldr	r1, [pc, #36]	; (384c <sal_aes_wrrd+0x58>)
    3826:	3101      	adds	r1, #1
    3828:	2211      	movs	r2, #17
    382a:	4b0b      	ldr	r3, [pc, #44]	; (3858 <sal_aes_wrrd+0x64>)
    382c:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    382e:	2d00      	cmp	r5, #0
    3830:	d005      	beq.n	383e <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    3832:	1c28      	adds	r0, r5, #0
    3834:	4905      	ldr	r1, [pc, #20]	; (384c <sal_aes_wrrd+0x58>)
    3836:	3101      	adds	r1, #1
    3838:	2210      	movs	r2, #16
    383a:	4b05      	ldr	r3, [pc, #20]	; (3850 <sal_aes_wrrd+0x5c>)
    383c:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    383e:	4b03      	ldr	r3, [pc, #12]	; (384c <sal_aes_wrrd+0x58>)
    3840:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    3842:	2018      	movs	r0, #24
    3844:	4b05      	ldr	r3, [pc, #20]	; (385c <sal_aes_wrrd+0x68>)
    3846:	4798      	blx	r3
}
    3848:	bd38      	pop	{r3, r4, r5, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	200006e4 	.word	0x200006e4
    3850:	000049fd 	.word	0x000049fd
    3854:	200006f8 	.word	0x200006f8
    3858:	00004275 	.word	0x00004275
    385c:	00000151 	.word	0x00000151

00003860 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    3860:	b5f0      	push	{r4, r5, r6, r7, lr}
    3862:	4647      	mov	r7, r8
    3864:	b480      	push	{r7}
    3866:	b084      	sub	sp, #16
    3868:	1c05      	adds	r5, r0, #0
    386a:	1c0f      	adds	r7, r1, #0
    386c:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
    386e:	2800      	cmp	r0, #0
    3870:	d017      	beq.n	38a2 <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    3872:	2200      	movs	r2, #0
    3874:	4b3e      	ldr	r3, [pc, #248]	; (3970 <sal_aes_setup+0x110>)
    3876:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    3878:	2202      	movs	r2, #2
    387a:	4b3e      	ldr	r3, [pc, #248]	; (3974 <sal_aes_setup+0x114>)
    387c:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    387e:	483e      	ldr	r0, [pc, #248]	; (3978 <sal_aes_setup+0x118>)
    3880:	1c29      	adds	r1, r5, #0
    3882:	2210      	movs	r2, #16
    3884:	4b3d      	ldr	r3, [pc, #244]	; (397c <sal_aes_setup+0x11c>)
    3886:	4698      	mov	r8, r3
    3888:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    388a:	4e3d      	ldr	r6, [pc, #244]	; (3980 <sal_aes_setup+0x120>)
    388c:	2310      	movs	r3, #16
    388e:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3890:	1c70      	adds	r0, r6, #1
    3892:	1c29      	adds	r1, r5, #0
    3894:	2210      	movs	r2, #16
    3896:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3898:	2083      	movs	r0, #131	; 0x83
    389a:	1c31      	adds	r1, r6, #0
    389c:	2211      	movs	r2, #17
    389e:	4b39      	ldr	r3, [pc, #228]	; (3984 <sal_aes_setup+0x124>)
    38a0:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    38a2:	2c00      	cmp	r4, #0
    38a4:	d002      	beq.n	38ac <sal_aes_setup+0x4c>
    38a6:	2c01      	cmp	r4, #1
    38a8:	d012      	beq.n	38d0 <sal_aes_setup+0x70>
    38aa:	e05a      	b.n	3962 <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    38ac:	4b31      	ldr	r3, [pc, #196]	; (3974 <sal_aes_setup+0x114>)
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	2b01      	cmp	r3, #1
    38b2:	d13d      	bne.n	3930 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    38b4:	4d32      	ldr	r5, [pc, #200]	; (3980 <sal_aes_setup+0x120>)
    38b6:	2310      	movs	r3, #16
    38b8:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    38ba:	1c68      	adds	r0, r5, #1
    38bc:	492e      	ldr	r1, [pc, #184]	; (3978 <sal_aes_setup+0x118>)
    38be:	2210      	movs	r2, #16
    38c0:	4b2e      	ldr	r3, [pc, #184]	; (397c <sal_aes_setup+0x11c>)
    38c2:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    38c4:	2083      	movs	r0, #131	; 0x83
    38c6:	1c29      	adds	r1, r5, #0
    38c8:	2211      	movs	r2, #17
    38ca:	4b2e      	ldr	r3, [pc, #184]	; (3984 <sal_aes_setup+0x124>)
    38cc:	4798      	blx	r3
    38ce:	e02f      	b.n	3930 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    38d0:	4b28      	ldr	r3, [pc, #160]	; (3974 <sal_aes_setup+0x114>)
    38d2:	781b      	ldrb	r3, [r3, #0]
    38d4:	2b01      	cmp	r3, #1
    38d6:	d02b      	beq.n	3930 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    38d8:	2210      	movs	r2, #16
    38da:	4b29      	ldr	r3, [pc, #164]	; (3980 <sal_aes_setup+0x120>)
    38dc:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    38de:	4b24      	ldr	r3, [pc, #144]	; (3970 <sal_aes_setup+0x110>)
    38e0:	781b      	ldrb	r3, [r3, #0]
    38e2:	2b00      	cmp	r3, #0
    38e4:	d116      	bne.n	3914 <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    38e6:	4d26      	ldr	r5, [pc, #152]	; (3980 <sal_aes_setup+0x120>)
    38e8:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    38ea:	2380      	movs	r3, #128	; 0x80
    38ec:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    38ee:	2201      	movs	r2, #1
    38f0:	4b25      	ldr	r3, [pc, #148]	; (3988 <sal_aes_setup+0x128>)
    38f2:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    38f4:	4668      	mov	r0, sp
    38f6:	2100      	movs	r1, #0
    38f8:	4b24      	ldr	r3, [pc, #144]	; (398c <sal_aes_setup+0x12c>)
    38fa:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    38fc:	2310      	movs	r3, #16
    38fe:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3900:	2083      	movs	r0, #131	; 0x83
    3902:	1c29      	adds	r1, r5, #0
    3904:	2201      	movs	r2, #1
    3906:	4b1f      	ldr	r3, [pc, #124]	; (3984 <sal_aes_setup+0x124>)
    3908:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    390a:	2084      	movs	r0, #132	; 0x84
    390c:	4920      	ldr	r1, [pc, #128]	; (3990 <sal_aes_setup+0x130>)
    390e:	2210      	movs	r2, #16
    3910:	4b20      	ldr	r3, [pc, #128]	; (3994 <sal_aes_setup+0x134>)
    3912:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3914:	4d1a      	ldr	r5, [pc, #104]	; (3980 <sal_aes_setup+0x120>)
    3916:	1c68      	adds	r0, r5, #1
    3918:	491d      	ldr	r1, [pc, #116]	; (3990 <sal_aes_setup+0x130>)
    391a:	2210      	movs	r2, #16
    391c:	4b17      	ldr	r3, [pc, #92]	; (397c <sal_aes_setup+0x11c>)
    391e:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3920:	2083      	movs	r0, #131	; 0x83
    3922:	1c29      	adds	r1, r5, #0
    3924:	2211      	movs	r2, #17
    3926:	4b17      	ldr	r3, [pc, #92]	; (3984 <sal_aes_setup+0x124>)
    3928:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    392a:	4b11      	ldr	r3, [pc, #68]	; (3970 <sal_aes_setup+0x110>)
    392c:	2201      	movs	r2, #1
    392e:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    3930:	4b10      	ldr	r3, [pc, #64]	; (3974 <sal_aes_setup+0x114>)
    3932:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    3934:	2f00      	cmp	r7, #0
    3936:	d002      	beq.n	393e <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    3938:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    393a:	2f02      	cmp	r7, #2
    393c:	d113      	bne.n	3966 <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
    393e:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3940:	2308      	movs	r3, #8
    3942:	401c      	ands	r4, r3
    3944:	013f      	lsls	r7, r7, #4
    3946:	2370      	movs	r3, #112	; 0x70
    3948:	401f      	ands	r7, r3
    394a:	433c      	orrs	r4, r7
    394c:	4b0c      	ldr	r3, [pc, #48]	; (3980 <sal_aes_setup+0x120>)
    394e:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    3950:	2780      	movs	r7, #128	; 0x80
    3952:	427f      	negs	r7, r7
    3954:	433c      	orrs	r4, r7
    3956:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    3958:	2201      	movs	r2, #1
    395a:	4b0b      	ldr	r3, [pc, #44]	; (3988 <sal_aes_setup+0x128>)
    395c:	701a      	strb	r2, [r3, #0]

	return (true);
    395e:	2001      	movs	r0, #1
    3960:	e001      	b.n	3966 <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    3962:	2000      	movs	r0, #0
    3964:	e7ff      	b.n	3966 <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    3966:	b004      	add	sp, #16
    3968:	bc04      	pop	{r2}
    396a:	4690      	mov	r8, r2
    396c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    396e:	46c0      	nop			; (mov r8, r8)
    3970:	200006c0 	.word	0x200006c0
    3974:	20000009 	.word	0x20000009
    3978:	200006d4 	.word	0x200006d4
    397c:	000049fd 	.word	0x000049fd
    3980:	200006e4 	.word	0x200006e4
    3984:	00003f61 	.word	0x00003f61
    3988:	200006f8 	.word	0x200006f8
    398c:	000037f5 	.word	0x000037f5
    3990:	200006c4 	.word	0x200006c4
    3994:	000040d9 	.word	0x000040d9

00003998 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3998:	b508      	push	{r3, lr}
    399a:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    399c:	2084      	movs	r0, #132	; 0x84
    399e:	2210      	movs	r2, #16
    39a0:	4b01      	ldr	r3, [pc, #4]	; (39a8 <sal_aes_read+0x10>)
    39a2:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    39a4:	bd08      	pop	{r3, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	000040d9 	.word	0x000040d9

000039ac <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    39ac:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    39ae:	2201      	movs	r2, #1
    39b0:	4b03      	ldr	r3, [pc, #12]	; (39c0 <AT86RFX_ISR+0x14>)
    39b2:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    39b4:	4b03      	ldr	r3, [pc, #12]	; (39c4 <AT86RFX_ISR+0x18>)
    39b6:	681b      	ldr	r3, [r3, #0]
    39b8:	2b00      	cmp	r3, #0
    39ba:	d000      	beq.n	39be <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    39bc:	4798      	blx	r3
	}
}
    39be:	bd08      	pop	{r3, pc}
    39c0:	40001800 	.word	0x40001800
    39c4:	200006fc 	.word	0x200006fc

000039c8 <trx_spi_init>:

void trx_spi_init(void)
{
    39c8:	b530      	push	{r4, r5, lr}
    39ca:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    39cc:	4a32      	ldr	r2, [pc, #200]	; (3a98 <trx_spi_init+0xd0>)
    39ce:	2300      	movs	r3, #0
    39d0:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    39d2:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    39d4:	213f      	movs	r1, #63	; 0x3f
    39d6:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    39d8:	4c30      	ldr	r4, [pc, #192]	; (3a9c <trx_spi_init+0xd4>)
    39da:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    39dc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    39de:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    39e0:	2201      	movs	r2, #1
    39e2:	4668      	mov	r0, sp
    39e4:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
    39e6:	7083      	strb	r3, [r0, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    39e8:	7002      	strb	r2, [r0, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    39ea:	203f      	movs	r0, #63	; 0x3f
    39ec:	4669      	mov	r1, sp
    39ee:	4b2c      	ldr	r3, [pc, #176]	; (3aa0 <trx_spi_init+0xd8>)
    39f0:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    39f2:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    39f4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    39f6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    39f8:	2900      	cmp	r1, #0
    39fa:	d103      	bne.n	3a04 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    39fc:	095a      	lsrs	r2, r3, #5
    39fe:	01d2      	lsls	r2, r2, #7
    3a00:	4928      	ldr	r1, [pc, #160]	; (3aa4 <trx_spi_init+0xdc>)
    3a02:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3a04:	211f      	movs	r1, #31
    3a06:	400b      	ands	r3, r1
    3a08:	2101      	movs	r1, #1
    3a0a:	1c08      	adds	r0, r1, #0
    3a0c:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3a0e:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3a10:	4a25      	ldr	r2, [pc, #148]	; (3aa8 <trx_spi_init+0xe0>)
    3a12:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3a14:	2300      	movs	r3, #0
    3a16:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3a18:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3a1a:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    3a1c:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    3a1e:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3a20:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3a22:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3a24:	2124      	movs	r1, #36	; 0x24
    3a26:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3a28:	61d3      	str	r3, [r2, #28]
    3a2a:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3a2c:	2380      	movs	r3, #128	; 0x80
    3a2e:	025b      	lsls	r3, r3, #9
    3a30:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3a32:	4b1e      	ldr	r3, [pc, #120]	; (3aac <trx_spi_init+0xe4>)
    3a34:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3a36:	4b1e      	ldr	r3, [pc, #120]	; (3ab0 <trx_spi_init+0xe8>)
    3a38:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3a3a:	2301      	movs	r3, #1
    3a3c:	425b      	negs	r3, r3
    3a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3a40:	4b1c      	ldr	r3, [pc, #112]	; (3ab4 <trx_spi_init+0xec>)
    3a42:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3a44:	4b1c      	ldr	r3, [pc, #112]	; (3ab8 <trx_spi_init+0xf0>)
    3a46:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3a48:	4c1c      	ldr	r4, [pc, #112]	; (3abc <trx_spi_init+0xf4>)
    3a4a:	1c20      	adds	r0, r4, #0
    3a4c:	491c      	ldr	r1, [pc, #112]	; (3ac0 <trx_spi_init+0xf8>)
    3a4e:	4b1d      	ldr	r3, [pc, #116]	; (3ac4 <trx_spi_init+0xfc>)
    3a50:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a52:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3a54:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3a56:	2b00      	cmp	r3, #0
    3a58:	d1fc      	bne.n	3a54 <trx_spi_init+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3a5a:	6813      	ldr	r3, [r2, #0]
    3a5c:	2502      	movs	r5, #2
    3a5e:	432b      	orrs	r3, r5
    3a60:	6013      	str	r3, [r2, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    3a62:	ac01      	add	r4, sp, #4
    3a64:	1c20      	adds	r0, r4, #0
    3a66:	4b18      	ldr	r3, [pc, #96]	; (3ac8 <trx_spi_init+0x100>)
    3a68:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    3a6a:	2320      	movs	r3, #32
    3a6c:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    3a6e:	2380      	movs	r3, #128	; 0x80
    3a70:	039b      	lsls	r3, r3, #14
    3a72:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    3a74:	7225      	strb	r5, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    3a76:	2301      	movs	r3, #1
    3a78:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    3a7a:	2200      	movs	r2, #0
    3a7c:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    3a7e:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    3a80:	2000      	movs	r0, #0
    3a82:	1c21      	adds	r1, r4, #0
    3a84:	4b11      	ldr	r3, [pc, #68]	; (3acc <trx_spi_init+0x104>)
    3a86:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    3a88:	4811      	ldr	r0, [pc, #68]	; (3ad0 <trx_spi_init+0x108>)
    3a8a:	2100      	movs	r1, #0
    3a8c:	2200      	movs	r2, #0
    3a8e:	4b11      	ldr	r3, [pc, #68]	; (3ad4 <trx_spi_init+0x10c>)
    3a90:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3a92:	b005      	add	sp, #20
    3a94:	bd30      	pop	{r4, r5, pc}
    3a96:	46c0      	nop			; (mov r8, r8)
    3a98:	200009a0 	.word	0x200009a0
    3a9c:	200009a4 	.word	0x200009a4
    3aa0:	000004ad 	.word	0x000004ad
    3aa4:	41004400 	.word	0x41004400
    3aa8:	200009a8 	.word	0x200009a8
    3aac:	004c4b40 	.word	0x004c4b40
    3ab0:	00530005 	.word	0x00530005
    3ab4:	003e0005 	.word	0x003e0005
    3ab8:	00520005 	.word	0x00520005
    3abc:	200009e0 	.word	0x200009e0
    3ac0:	42001800 	.word	0x42001800
    3ac4:	00000989 	.word	0x00000989
    3ac8:	00000421 	.word	0x00000421
    3acc:	00000435 	.word	0x00000435
    3ad0:	000039ad 	.word	0x000039ad
    3ad4:	000002bd 	.word	0x000002bd

00003ad8 <PhyReset>:

void PhyReset(void)
{
    3ad8:	b570      	push	{r4, r5, r6, lr}
    3ada:	4b09      	ldr	r3, [pc, #36]	; (3b00 <PhyReset+0x28>)
    3adc:	1c1c      	adds	r4, r3, #0
    3ade:	3480      	adds	r4, #128	; 0x80
    3ae0:	2580      	movs	r5, #128	; 0x80
    3ae2:	022d      	lsls	r5, r5, #8
    3ae4:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3ae6:	2280      	movs	r2, #128	; 0x80
    3ae8:	0352      	lsls	r2, r2, #13
    3aea:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3aec:	20a5      	movs	r0, #165	; 0xa5
    3aee:	0040      	lsls	r0, r0, #1
    3af0:	4e04      	ldr	r6, [pc, #16]	; (3b04 <PhyReset+0x2c>)
    3af2:	47b0      	blx	r6
    3af4:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3af6:	200a      	movs	r0, #10
    3af8:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3afa:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3afc:	bd70      	pop	{r4, r5, r6, pc}
    3afe:	46c0      	nop			; (mov r8, r8)
    3b00:	41004400 	.word	0x41004400
    3b04:	00000151 	.word	0x00000151

00003b08 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3b08:	b570      	push	{r4, r5, r6, lr}
    3b0a:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b0c:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3b10:	4263      	negs	r3, r4
    3b12:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3b14:	b672      	cpsid	i
    3b16:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b1a:	2200      	movs	r2, #0
    3b1c:	4b33      	ldr	r3, [pc, #204]	; (3bec <trx_reg_read+0xe4>)
    3b1e:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3b20:	4d33      	ldr	r5, [pc, #204]	; (3bf0 <trx_reg_read+0xe8>)
    3b22:	1c28      	adds	r0, r5, #0
    3b24:	4933      	ldr	r1, [pc, #204]	; (3bf4 <trx_reg_read+0xec>)
    3b26:	2201      	movs	r2, #1
    3b28:	4b33      	ldr	r3, [pc, #204]	; (3bf8 <trx_reg_read+0xf0>)
    3b2a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b2c:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b2e:	2101      	movs	r1, #1
    3b30:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3b32:	420a      	tst	r2, r1
    3b34:	d0fc      	beq.n	3b30 <trx_reg_read+0x28>
    3b36:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3b38:	07d1      	lsls	r1, r2, #31
    3b3a:	d502      	bpl.n	3b42 <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b3c:	2280      	movs	r2, #128	; 0x80
    3b3e:	4316      	orrs	r6, r2
    3b40:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b42:	2102      	movs	r1, #2
    3b44:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3b46:	420a      	tst	r2, r1
    3b48:	d0fc      	beq.n	3b44 <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b4a:	2104      	movs	r1, #4
    3b4c:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3b4e:	420a      	tst	r2, r1
    3b50:	d0fc      	beq.n	3b4c <trx_reg_read+0x44>
    3b52:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3b54:	0751      	lsls	r1, r2, #29
    3b56:	d514      	bpl.n	3b82 <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b58:	8b5a      	ldrh	r2, [r3, #26]
    3b5a:	0751      	lsls	r1, r2, #29
    3b5c:	d503      	bpl.n	3b66 <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3b5e:	8b59      	ldrh	r1, [r3, #26]
    3b60:	2204      	movs	r2, #4
    3b62:	430a      	orrs	r2, r1
    3b64:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b66:	4a22      	ldr	r2, [pc, #136]	; (3bf0 <trx_reg_read+0xe8>)
    3b68:	7992      	ldrb	r2, [r2, #6]
    3b6a:	2a01      	cmp	r2, #1
    3b6c:	d105      	bne.n	3b7a <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3b70:	05c9      	lsls	r1, r1, #23
    3b72:	0dc9      	lsrs	r1, r1, #23
    3b74:	4a21      	ldr	r2, [pc, #132]	; (3bfc <trx_reg_read+0xf4>)
    3b76:	8011      	strh	r1, [r2, #0]
    3b78:	e003      	b.n	3b82 <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3b7c:	b2c9      	uxtb	r1, r1
    3b7e:	4a1f      	ldr	r2, [pc, #124]	; (3bfc <trx_reg_read+0xf4>)
    3b80:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b82:	2101      	movs	r1, #1
    3b84:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3b86:	420a      	tst	r2, r1
    3b88:	d0fc      	beq.n	3b84 <trx_reg_read+0x7c>
    3b8a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3b8c:	07d1      	lsls	r1, r2, #31
    3b8e:	d501      	bpl.n	3b94 <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b90:	2200      	movs	r2, #0
    3b92:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b94:	2102      	movs	r1, #2
    3b96:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3b98:	420a      	tst	r2, r1
    3b9a:	d0fc      	beq.n	3b96 <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b9c:	2104      	movs	r1, #4
    3b9e:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    3ba0:	420a      	tst	r2, r1
    3ba2:	d0fc      	beq.n	3b9e <trx_reg_read+0x96>
    3ba4:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    3ba6:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3ba8:	0751      	lsls	r1, r2, #29
    3baa:	d510      	bpl.n	3bce <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3bac:	8b5a      	ldrh	r2, [r3, #26]
    3bae:	0751      	lsls	r1, r2, #29
    3bb0:	d503      	bpl.n	3bba <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3bb2:	8b59      	ldrh	r1, [r3, #26]
    3bb4:	2204      	movs	r2, #4
    3bb6:	430a      	orrs	r2, r1
    3bb8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bba:	4a0d      	ldr	r2, [pc, #52]	; (3bf0 <trx_reg_read+0xe8>)
    3bbc:	7992      	ldrb	r2, [r2, #6]
    3bbe:	2a01      	cmp	r2, #1
    3bc0:	d103      	bne.n	3bca <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3bc2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3bc4:	05ed      	lsls	r5, r5, #23
    3bc6:	0ded      	lsrs	r5, r5, #23
    3bc8:	e001      	b.n	3bce <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3bca:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3bcc:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3bce:	4808      	ldr	r0, [pc, #32]	; (3bf0 <trx_reg_read+0xe8>)
    3bd0:	4908      	ldr	r1, [pc, #32]	; (3bf4 <trx_reg_read+0xec>)
    3bd2:	2200      	movs	r2, #0
    3bd4:	4b08      	ldr	r3, [pc, #32]	; (3bf8 <trx_reg_read+0xf0>)
    3bd6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3bd8:	2c00      	cmp	r4, #0
    3bda:	d005      	beq.n	3be8 <trx_reg_read+0xe0>
		cpu_irq_enable();
    3bdc:	2201      	movs	r2, #1
    3bde:	4b03      	ldr	r3, [pc, #12]	; (3bec <trx_reg_read+0xe4>)
    3be0:	701a      	strb	r2, [r3, #0]
    3be2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3be6:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3be8:	b2e8      	uxtb	r0, r5
}
    3bea:	bd70      	pop	{r4, r5, r6, pc}
    3bec:	20000008 	.word	0x20000008
    3bf0:	200009e0 	.word	0x200009e0
    3bf4:	200009a4 	.word	0x200009a4
    3bf8:	00000c39 	.word	0x00000c39
    3bfc:	2000099c 	.word	0x2000099c

00003c00 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c02:	1c07      	adds	r7, r0, #0
    3c04:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c06:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3c0a:	4263      	negs	r3, r4
    3c0c:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3c0e:	b672      	cpsid	i
    3c10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c14:	2200      	movs	r2, #0
    3c16:	4b34      	ldr	r3, [pc, #208]	; (3ce8 <trx_reg_write+0xe8>)
    3c18:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3c1a:	4e34      	ldr	r6, [pc, #208]	; (3cec <trx_reg_write+0xec>)
    3c1c:	1c30      	adds	r0, r6, #0
    3c1e:	4934      	ldr	r1, [pc, #208]	; (3cf0 <trx_reg_write+0xf0>)
    3c20:	2201      	movs	r2, #1
    3c22:	4b34      	ldr	r3, [pc, #208]	; (3cf4 <trx_reg_write+0xf4>)
    3c24:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c26:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c28:	2101      	movs	r1, #1
    3c2a:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3c2c:	420a      	tst	r2, r1
    3c2e:	d0fc      	beq.n	3c2a <trx_reg_write+0x2a>
    3c30:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3c32:	07d1      	lsls	r1, r2, #31
    3c34:	d502      	bpl.n	3c3c <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c36:	22c0      	movs	r2, #192	; 0xc0
    3c38:	4317      	orrs	r7, r2
    3c3a:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c3c:	2102      	movs	r1, #2
    3c3e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3c40:	420a      	tst	r2, r1
    3c42:	d0fc      	beq.n	3c3e <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c44:	2104      	movs	r1, #4
    3c46:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c48:	420a      	tst	r2, r1
    3c4a:	d0fc      	beq.n	3c46 <trx_reg_write+0x46>
    3c4c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3c4e:	0751      	lsls	r1, r2, #29
    3c50:	d514      	bpl.n	3c7c <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c52:	8b5a      	ldrh	r2, [r3, #26]
    3c54:	0751      	lsls	r1, r2, #29
    3c56:	d503      	bpl.n	3c60 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3c58:	8b59      	ldrh	r1, [r3, #26]
    3c5a:	2204      	movs	r2, #4
    3c5c:	430a      	orrs	r2, r1
    3c5e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c60:	4a22      	ldr	r2, [pc, #136]	; (3cec <trx_reg_write+0xec>)
    3c62:	7992      	ldrb	r2, [r2, #6]
    3c64:	2a01      	cmp	r2, #1
    3c66:	d105      	bne.n	3c74 <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c68:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c6a:	05c9      	lsls	r1, r1, #23
    3c6c:	0dc9      	lsrs	r1, r1, #23
    3c6e:	4a22      	ldr	r2, [pc, #136]	; (3cf8 <trx_reg_write+0xf8>)
    3c70:	8011      	strh	r1, [r2, #0]
    3c72:	e003      	b.n	3c7c <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c74:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c76:	b2c9      	uxtb	r1, r1
    3c78:	4a1f      	ldr	r2, [pc, #124]	; (3cf8 <trx_reg_write+0xf8>)
    3c7a:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c7c:	2001      	movs	r0, #1
    3c7e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3c80:	4202      	tst	r2, r0
    3c82:	d0fc      	beq.n	3c7e <trx_reg_write+0x7e>
    3c84:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3c86:	07d1      	lsls	r1, r2, #31
    3c88:	d500      	bpl.n	3c8c <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c8a:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c8c:	2102      	movs	r1, #2
    3c8e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3c90:	420a      	tst	r2, r1
    3c92:	d0fc      	beq.n	3c8e <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c94:	2104      	movs	r1, #4
    3c96:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3c98:	420a      	tst	r2, r1
    3c9a:	d0fc      	beq.n	3c96 <trx_reg_write+0x96>
    3c9c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3c9e:	0751      	lsls	r1, r2, #29
    3ca0:	d514      	bpl.n	3ccc <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ca2:	8b5a      	ldrh	r2, [r3, #26]
    3ca4:	0751      	lsls	r1, r2, #29
    3ca6:	d503      	bpl.n	3cb0 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ca8:	8b59      	ldrh	r1, [r3, #26]
    3caa:	2204      	movs	r2, #4
    3cac:	430a      	orrs	r2, r1
    3cae:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3cb0:	4a0e      	ldr	r2, [pc, #56]	; (3cec <trx_reg_write+0xec>)
    3cb2:	7992      	ldrb	r2, [r2, #6]
    3cb4:	2a01      	cmp	r2, #1
    3cb6:	d105      	bne.n	3cc4 <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3cba:	05d2      	lsls	r2, r2, #23
    3cbc:	0dd2      	lsrs	r2, r2, #23
    3cbe:	4b0e      	ldr	r3, [pc, #56]	; (3cf8 <trx_reg_write+0xf8>)
    3cc0:	801a      	strh	r2, [r3, #0]
    3cc2:	e003      	b.n	3ccc <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3cc6:	b2d2      	uxtb	r2, r2
    3cc8:	4b0b      	ldr	r3, [pc, #44]	; (3cf8 <trx_reg_write+0xf8>)
    3cca:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3ccc:	4807      	ldr	r0, [pc, #28]	; (3cec <trx_reg_write+0xec>)
    3cce:	4908      	ldr	r1, [pc, #32]	; (3cf0 <trx_reg_write+0xf0>)
    3cd0:	2200      	movs	r2, #0
    3cd2:	4b08      	ldr	r3, [pc, #32]	; (3cf4 <trx_reg_write+0xf4>)
    3cd4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3cd6:	2c00      	cmp	r4, #0
    3cd8:	d005      	beq.n	3ce6 <trx_reg_write+0xe6>
		cpu_irq_enable();
    3cda:	2201      	movs	r2, #1
    3cdc:	4b02      	ldr	r3, [pc, #8]	; (3ce8 <trx_reg_write+0xe8>)
    3cde:	701a      	strb	r2, [r3, #0]
    3ce0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3ce4:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ce8:	20000008 	.word	0x20000008
    3cec:	200009e0 	.word	0x200009e0
    3cf0:	200009a4 	.word	0x200009a4
    3cf4:	00000c39 	.word	0x00000c39
    3cf8:	2000099c 	.word	0x2000099c

00003cfc <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cfe:	465f      	mov	r7, fp
    3d00:	4656      	mov	r6, sl
    3d02:	464d      	mov	r5, r9
    3d04:	4644      	mov	r4, r8
    3d06:	b4f0      	push	{r4, r5, r6, r7}
    3d08:	b083      	sub	sp, #12
    3d0a:	1c06      	adds	r6, r0, #0
    3d0c:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d0e:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3d12:	4278      	negs	r0, r7
    3d14:	4178      	adcs	r0, r7
    3d16:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3d18:	b672      	cpsid	i
    3d1a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3d1e:	2200      	movs	r2, #0
    3d20:	4b41      	ldr	r3, [pc, #260]	; (3e28 <trx_frame_read+0x12c>)
    3d22:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3d24:	4d41      	ldr	r5, [pc, #260]	; (3e2c <trx_frame_read+0x130>)
    3d26:	1c28      	adds	r0, r5, #0
    3d28:	4941      	ldr	r1, [pc, #260]	; (3e30 <trx_frame_read+0x134>)
    3d2a:	2201      	movs	r2, #1
    3d2c:	4b41      	ldr	r3, [pc, #260]	; (3e34 <trx_frame_read+0x138>)
    3d2e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d30:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d32:	2101      	movs	r1, #1
    3d34:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3d36:	420a      	tst	r2, r1
    3d38:	d0fc      	beq.n	3d34 <trx_frame_read+0x38>
    3d3a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3d3c:	07d1      	lsls	r1, r2, #31
    3d3e:	d501      	bpl.n	3d44 <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d40:	2220      	movs	r2, #32
    3d42:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d44:	2102      	movs	r1, #2
    3d46:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3d48:	420a      	tst	r2, r1
    3d4a:	d0fc      	beq.n	3d46 <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d4c:	2004      	movs	r0, #4
    3d4e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3d50:	4202      	tst	r2, r0
    3d52:	d0fc      	beq.n	3d4e <trx_frame_read+0x52>
    3d54:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3d56:	0750      	lsls	r0, r2, #29
    3d58:	d50f      	bpl.n	3d7a <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d5a:	8b5a      	ldrh	r2, [r3, #26]
    3d5c:	0751      	lsls	r1, r2, #29
    3d5e:	d503      	bpl.n	3d68 <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3d60:	8b59      	ldrh	r1, [r3, #26]
    3d62:	2204      	movs	r2, #4
    3d64:	430a      	orrs	r2, r1
    3d66:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d68:	4a30      	ldr	r2, [pc, #192]	; (3e2c <trx_frame_read+0x130>)
    3d6a:	7992      	ldrb	r2, [r2, #6]
    3d6c:	2a01      	cmp	r2, #1
    3d6e:	d109      	bne.n	3d84 <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d72:	05d2      	lsls	r2, r2, #23
    3d74:	0dd2      	lsrs	r2, r2, #23
    3d76:	4b30      	ldr	r3, [pc, #192]	; (3e38 <trx_frame_read+0x13c>)
    3d78:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3d7a:	1e63      	subs	r3, r4, #1
    3d7c:	b2db      	uxtb	r3, r3
    3d7e:	2c00      	cmp	r4, #0
    3d80:	d105      	bne.n	3d8e <trx_frame_read+0x92>
    3d82:	e03c      	b.n	3dfe <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3d86:	b2d2      	uxtb	r2, r2
    3d88:	4b2b      	ldr	r3, [pc, #172]	; (3e38 <trx_frame_read+0x13c>)
    3d8a:	801a      	strh	r2, [r3, #0]
    3d8c:	e7f5      	b.n	3d7a <trx_frame_read+0x7e>
    3d8e:	3301      	adds	r3, #1
    3d90:	199b      	adds	r3, r3, r6
    3d92:	4699      	mov	r9, r3
    3d94:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d96:	4a25      	ldr	r2, [pc, #148]	; (3e2c <trx_frame_read+0x130>)
    3d98:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d9a:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d9c:	2300      	movs	r3, #0
    3d9e:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3da0:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3da2:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3da4:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3da6:	2204      	movs	r2, #4
    3da8:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3daa:	4642      	mov	r2, r8
    3dac:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3dae:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3db0:	4222      	tst	r2, r4
    3db2:	d0fc      	beq.n	3dae <trx_frame_read+0xb2>
    3db4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3db6:	4222      	tst	r2, r4
    3db8:	d001      	beq.n	3dbe <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3dba:	4652      	mov	r2, sl
    3dbc:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3dbe:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    3dc0:	422a      	tst	r2, r5
    3dc2:	d0fc      	beq.n	3dbe <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3dc4:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3dc6:	420a      	tst	r2, r1
    3dc8:	d0fc      	beq.n	3dc4 <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3dca:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3dcc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3dce:	420a      	tst	r2, r1
    3dd0:	d011      	beq.n	3df6 <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3dd2:	8b5a      	ldrh	r2, [r3, #26]
    3dd4:	420a      	tst	r2, r1
    3dd6:	d004      	beq.n	3de2 <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3dd8:	8b5a      	ldrh	r2, [r3, #26]
    3dda:	4658      	mov	r0, fp
    3ddc:	4302      	orrs	r2, r0
    3dde:	b292      	uxth	r2, r2
    3de0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3de2:	4812      	ldr	r0, [pc, #72]	; (3e2c <trx_frame_read+0x130>)
    3de4:	7982      	ldrb	r2, [r0, #6]
    3de6:	2a01      	cmp	r2, #1
    3de8:	d103      	bne.n	3df2 <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3dea:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3dec:	05c0      	lsls	r0, r0, #23
    3dee:	0dc0      	lsrs	r0, r0, #23
    3df0:	e001      	b.n	3df6 <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3df2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3df4:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    3df6:	7030      	strb	r0, [r6, #0]
		data++;
    3df8:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3dfa:	454e      	cmp	r6, r9
    3dfc:	d1d5      	bne.n	3daa <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3dfe:	480b      	ldr	r0, [pc, #44]	; (3e2c <trx_frame_read+0x130>)
    3e00:	490b      	ldr	r1, [pc, #44]	; (3e30 <trx_frame_read+0x134>)
    3e02:	2200      	movs	r2, #0
    3e04:	4b0b      	ldr	r3, [pc, #44]	; (3e34 <trx_frame_read+0x138>)
    3e06:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3e08:	9901      	ldr	r1, [sp, #4]
    3e0a:	2900      	cmp	r1, #0
    3e0c:	d005      	beq.n	3e1a <trx_frame_read+0x11e>
		cpu_irq_enable();
    3e0e:	2201      	movs	r2, #1
    3e10:	4b05      	ldr	r3, [pc, #20]	; (3e28 <trx_frame_read+0x12c>)
    3e12:	701a      	strb	r2, [r3, #0]
    3e14:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3e18:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3e1a:	b003      	add	sp, #12
    3e1c:	bc3c      	pop	{r2, r3, r4, r5}
    3e1e:	4690      	mov	r8, r2
    3e20:	4699      	mov	r9, r3
    3e22:	46a2      	mov	sl, r4
    3e24:	46ab      	mov	fp, r5
    3e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e28:	20000008 	.word	0x20000008
    3e2c:	200009e0 	.word	0x200009e0
    3e30:	200009a4 	.word	0x200009a4
    3e34:	00000c39 	.word	0x00000c39
    3e38:	2000099c 	.word	0x2000099c

00003e3c <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e3e:	464f      	mov	r7, r9
    3e40:	4646      	mov	r6, r8
    3e42:	b4c0      	push	{r6, r7}
    3e44:	1c04      	adds	r4, r0, #0
    3e46:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e48:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3e4c:	4271      	negs	r1, r6
    3e4e:	4171      	adcs	r1, r6
    3e50:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3e52:	b672      	cpsid	i
    3e54:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e58:	2200      	movs	r2, #0
    3e5a:	4b3c      	ldr	r3, [pc, #240]	; (3f4c <trx_frame_write+0x110>)
    3e5c:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3e5e:	4f3c      	ldr	r7, [pc, #240]	; (3f50 <trx_frame_write+0x114>)
    3e60:	1c38      	adds	r0, r7, #0
    3e62:	493c      	ldr	r1, [pc, #240]	; (3f54 <trx_frame_write+0x118>)
    3e64:	2201      	movs	r2, #1
    3e66:	4b3c      	ldr	r3, [pc, #240]	; (3f58 <trx_frame_write+0x11c>)
    3e68:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e6a:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e6c:	2101      	movs	r1, #1
    3e6e:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3e70:	420a      	tst	r2, r1
    3e72:	d0fc      	beq.n	3e6e <trx_frame_write+0x32>
    3e74:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3e76:	07d1      	lsls	r1, r2, #31
    3e78:	d501      	bpl.n	3e7e <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e7a:	2260      	movs	r2, #96	; 0x60
    3e7c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e7e:	2102      	movs	r1, #2
    3e80:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3e82:	420a      	tst	r2, r1
    3e84:	d0fc      	beq.n	3e80 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e86:	2104      	movs	r1, #4
    3e88:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3e8a:	420a      	tst	r2, r1
    3e8c:	d0fc      	beq.n	3e88 <trx_frame_write+0x4c>
    3e8e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3e90:	0751      	lsls	r1, r2, #29
    3e92:	d50f      	bpl.n	3eb4 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e94:	8b5a      	ldrh	r2, [r3, #26]
    3e96:	0751      	lsls	r1, r2, #29
    3e98:	d503      	bpl.n	3ea2 <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3e9a:	8b59      	ldrh	r1, [r3, #26]
    3e9c:	2204      	movs	r2, #4
    3e9e:	430a      	orrs	r2, r1
    3ea0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ea2:	4a2b      	ldr	r2, [pc, #172]	; (3f50 <trx_frame_write+0x114>)
    3ea4:	7992      	ldrb	r2, [r2, #6]
    3ea6:	2a01      	cmp	r2, #1
    3ea8:	d10e      	bne.n	3ec8 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3eaa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3eac:	05c9      	lsls	r1, r1, #23
    3eae:	0dc9      	lsrs	r1, r1, #23
    3eb0:	4a2a      	ldr	r2, [pc, #168]	; (3f5c <trx_frame_write+0x120>)
    3eb2:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3eb4:	4a26      	ldr	r2, [pc, #152]	; (3f50 <trx_frame_write+0x114>)
    3eb6:	7992      	ldrb	r2, [r2, #6]
    3eb8:	4690      	mov	r8, r2
    3eba:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ebc:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ebe:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ec0:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ec2:	2204      	movs	r2, #4
    3ec4:	4694      	mov	ip, r2
    3ec6:	e02b      	b.n	3f20 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ec8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3eca:	b2c9      	uxtb	r1, r1
    3ecc:	4a23      	ldr	r2, [pc, #140]	; (3f5c <trx_frame_write+0x120>)
    3ece:	8011      	strh	r1, [r2, #0]
    3ed0:	e7f0      	b.n	3eb4 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ed2:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3ed4:	423a      	tst	r2, r7
    3ed6:	d0fc      	beq.n	3ed2 <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    3ed8:	7831      	ldrb	r1, [r6, #0]
    3eda:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3edc:	423a      	tst	r2, r7
    3ede:	d000      	beq.n	3ee2 <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ee0:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ee2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3ee4:	4202      	tst	r2, r0
    3ee6:	d0fc      	beq.n	3ee2 <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ee8:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3eea:	4222      	tst	r2, r4
    3eec:	d0fc      	beq.n	3ee8 <trx_frame_write+0xac>
    3eee:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3ef0:	4222      	tst	r2, r4
    3ef2:	d014      	beq.n	3f1e <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ef4:	8b5a      	ldrh	r2, [r3, #26]
    3ef6:	4222      	tst	r2, r4
    3ef8:	d004      	beq.n	3f04 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3efa:	8b5a      	ldrh	r2, [r3, #26]
    3efc:	4661      	mov	r1, ip
    3efe:	430a      	orrs	r2, r1
    3f00:	b292      	uxth	r2, r2
    3f02:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f04:	4642      	mov	r2, r8
    3f06:	2a01      	cmp	r2, #1
    3f08:	d105      	bne.n	3f16 <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f0c:	05d2      	lsls	r2, r2, #23
    3f0e:	0dd2      	lsrs	r2, r2, #23
    3f10:	4912      	ldr	r1, [pc, #72]	; (3f5c <trx_frame_write+0x120>)
    3f12:	800a      	strh	r2, [r1, #0]
    3f14:	e003      	b.n	3f1e <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f18:	b2d2      	uxtb	r2, r2
    3f1a:	4910      	ldr	r1, [pc, #64]	; (3f5c <trx_frame_write+0x120>)
    3f1c:	800a      	strh	r2, [r1, #0]
    3f1e:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    3f20:	3d01      	subs	r5, #1
    3f22:	b2ed      	uxtb	r5, r5
    3f24:	2dff      	cmp	r5, #255	; 0xff
    3f26:	d1d4      	bne.n	3ed2 <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3f28:	4809      	ldr	r0, [pc, #36]	; (3f50 <trx_frame_write+0x114>)
    3f2a:	490a      	ldr	r1, [pc, #40]	; (3f54 <trx_frame_write+0x118>)
    3f2c:	2200      	movs	r2, #0
    3f2e:	4b0a      	ldr	r3, [pc, #40]	; (3f58 <trx_frame_write+0x11c>)
    3f30:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3f32:	464a      	mov	r2, r9
    3f34:	2a00      	cmp	r2, #0
    3f36:	d005      	beq.n	3f44 <trx_frame_write+0x108>
		cpu_irq_enable();
    3f38:	2201      	movs	r2, #1
    3f3a:	4b04      	ldr	r3, [pc, #16]	; (3f4c <trx_frame_write+0x110>)
    3f3c:	701a      	strb	r2, [r3, #0]
    3f3e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3f42:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3f44:	bc0c      	pop	{r2, r3}
    3f46:	4690      	mov	r8, r2
    3f48:	4699      	mov	r9, r3
    3f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f4c:	20000008 	.word	0x20000008
    3f50:	200009e0 	.word	0x200009e0
    3f54:	200009a4 	.word	0x200009a4
    3f58:	00000c39 	.word	0x00000c39
    3f5c:	2000099c 	.word	0x2000099c

00003f60 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    3f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f62:	464f      	mov	r7, r9
    3f64:	4646      	mov	r6, r8
    3f66:	b4c0      	push	{r6, r7}
    3f68:	1c07      	adds	r7, r0, #0
    3f6a:	1c0c      	adds	r4, r1, #0
    3f6c:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f6e:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3f72:	4271      	negs	r1, r6
    3f74:	4171      	adcs	r1, r6
    3f76:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3f78:	b672      	cpsid	i
    3f7a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3f7e:	2200      	movs	r2, #0
    3f80:	4b50      	ldr	r3, [pc, #320]	; (40c4 <trx_sram_write+0x164>)
    3f82:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3f84:	4e50      	ldr	r6, [pc, #320]	; (40c8 <trx_sram_write+0x168>)
    3f86:	1c30      	adds	r0, r6, #0
    3f88:	4950      	ldr	r1, [pc, #320]	; (40cc <trx_sram_write+0x16c>)
    3f8a:	2201      	movs	r2, #1
    3f8c:	4b50      	ldr	r3, [pc, #320]	; (40d0 <trx_sram_write+0x170>)
    3f8e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3f90:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f92:	2101      	movs	r1, #1
    3f94:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3f96:	420a      	tst	r2, r1
    3f98:	d0fc      	beq.n	3f94 <trx_sram_write+0x34>
    3f9a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3f9c:	07d1      	lsls	r1, r2, #31
    3f9e:	d501      	bpl.n	3fa4 <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3fa0:	2240      	movs	r2, #64	; 0x40
    3fa2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3fa4:	2102      	movs	r1, #2
    3fa6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3fa8:	420a      	tst	r2, r1
    3faa:	d0fc      	beq.n	3fa6 <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3fac:	2104      	movs	r1, #4
    3fae:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3fb0:	420a      	tst	r2, r1
    3fb2:	d0fc      	beq.n	3fae <trx_sram_write+0x4e>
    3fb4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3fb6:	0751      	lsls	r1, r2, #29
    3fb8:	d514      	bpl.n	3fe4 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3fba:	8b5a      	ldrh	r2, [r3, #26]
    3fbc:	0751      	lsls	r1, r2, #29
    3fbe:	d503      	bpl.n	3fc8 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3fc0:	8b59      	ldrh	r1, [r3, #26]
    3fc2:	2204      	movs	r2, #4
    3fc4:	430a      	orrs	r2, r1
    3fc6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fc8:	4a3f      	ldr	r2, [pc, #252]	; (40c8 <trx_sram_write+0x168>)
    3fca:	7992      	ldrb	r2, [r2, #6]
    3fcc:	2a01      	cmp	r2, #1
    3fce:	d105      	bne.n	3fdc <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3fd0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3fd2:	05c9      	lsls	r1, r1, #23
    3fd4:	0dc9      	lsrs	r1, r1, #23
    3fd6:	4a3f      	ldr	r2, [pc, #252]	; (40d4 <trx_sram_write+0x174>)
    3fd8:	8011      	strh	r1, [r2, #0]
    3fda:	e003      	b.n	3fe4 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3fdc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3fde:	b2c9      	uxtb	r1, r1
    3fe0:	4a3c      	ldr	r2, [pc, #240]	; (40d4 <trx_sram_write+0x174>)
    3fe2:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3fe4:	2101      	movs	r1, #1
    3fe6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    3fe8:	420a      	tst	r2, r1
    3fea:	d0fc      	beq.n	3fe6 <trx_sram_write+0x86>
    3fec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3fee:	07d1      	lsls	r1, r2, #31
    3ff0:	d500      	bpl.n	3ff4 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ff2:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ff4:	2102      	movs	r1, #2
    3ff6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3ff8:	420a      	tst	r2, r1
    3ffa:	d0fc      	beq.n	3ff6 <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ffc:	2104      	movs	r1, #4
    3ffe:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4000:	420a      	tst	r2, r1
    4002:	d0fc      	beq.n	3ffe <trx_sram_write+0x9e>
    4004:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4006:	0751      	lsls	r1, r2, #29
    4008:	d50f      	bpl.n	402a <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    400a:	8b5a      	ldrh	r2, [r3, #26]
    400c:	0751      	lsls	r1, r2, #29
    400e:	d503      	bpl.n	4018 <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4010:	8b59      	ldrh	r1, [r3, #26]
    4012:	2204      	movs	r2, #4
    4014:	430a      	orrs	r2, r1
    4016:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4018:	4a2b      	ldr	r2, [pc, #172]	; (40c8 <trx_sram_write+0x168>)
    401a:	7992      	ldrb	r2, [r2, #6]
    401c:	2a01      	cmp	r2, #1
    401e:	d10e      	bne.n	403e <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4020:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4022:	05c9      	lsls	r1, r1, #23
    4024:	0dc9      	lsrs	r1, r1, #23
    4026:	4a2b      	ldr	r2, [pc, #172]	; (40d4 <trx_sram_write+0x174>)
    4028:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    402a:	4a27      	ldr	r2, [pc, #156]	; (40c8 <trx_sram_write+0x168>)
    402c:	7992      	ldrb	r2, [r2, #6]
    402e:	4690      	mov	r8, r2
    4030:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4032:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4034:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4036:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4038:	2204      	movs	r2, #4
    403a:	4694      	mov	ip, r2
    403c:	e02b      	b.n	4096 <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    403e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4040:	b2c9      	uxtb	r1, r1
    4042:	4a24      	ldr	r2, [pc, #144]	; (40d4 <trx_sram_write+0x174>)
    4044:	8011      	strh	r1, [r2, #0]
    4046:	e7f0      	b.n	402a <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4048:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    404a:	4238      	tst	r0, r7
    404c:	d0fc      	beq.n	4048 <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    404e:	7832      	ldrb	r2, [r6, #0]
    4050:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4052:	4238      	tst	r0, r7
    4054:	d000      	beq.n	4058 <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4056:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4058:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    405a:	4208      	tst	r0, r1
    405c:	d0fc      	beq.n	4058 <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    405e:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4060:	4220      	tst	r0, r4
    4062:	d0fc      	beq.n	405e <trx_sram_write+0xfe>
    4064:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4066:	4220      	tst	r0, r4
    4068:	d014      	beq.n	4094 <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    406a:	8b58      	ldrh	r0, [r3, #26]
    406c:	4220      	tst	r0, r4
    406e:	d004      	beq.n	407a <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4070:	8b58      	ldrh	r0, [r3, #26]
    4072:	4662      	mov	r2, ip
    4074:	4310      	orrs	r0, r2
    4076:	b280      	uxth	r0, r0
    4078:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    407a:	4642      	mov	r2, r8
    407c:	2a01      	cmp	r2, #1
    407e:	d105      	bne.n	408c <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4080:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4082:	05c0      	lsls	r0, r0, #23
    4084:	0dc0      	lsrs	r0, r0, #23
    4086:	4a13      	ldr	r2, [pc, #76]	; (40d4 <trx_sram_write+0x174>)
    4088:	8010      	strh	r0, [r2, #0]
    408a:	e003      	b.n	4094 <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    408c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    408e:	b2c0      	uxtb	r0, r0
    4090:	4a10      	ldr	r2, [pc, #64]	; (40d4 <trx_sram_write+0x174>)
    4092:	8010      	strh	r0, [r2, #0]
    4094:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4096:	3d01      	subs	r5, #1
    4098:	b2ed      	uxtb	r5, r5
    409a:	2dff      	cmp	r5, #255	; 0xff
    409c:	d1d4      	bne.n	4048 <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    409e:	480a      	ldr	r0, [pc, #40]	; (40c8 <trx_sram_write+0x168>)
    40a0:	490a      	ldr	r1, [pc, #40]	; (40cc <trx_sram_write+0x16c>)
    40a2:	2200      	movs	r2, #0
    40a4:	4b0a      	ldr	r3, [pc, #40]	; (40d0 <trx_sram_write+0x170>)
    40a6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    40a8:	464b      	mov	r3, r9
    40aa:	2b00      	cmp	r3, #0
    40ac:	d005      	beq.n	40ba <trx_sram_write+0x15a>
		cpu_irq_enable();
    40ae:	2201      	movs	r2, #1
    40b0:	4b04      	ldr	r3, [pc, #16]	; (40c4 <trx_sram_write+0x164>)
    40b2:	701a      	strb	r2, [r3, #0]
    40b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    40b8:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    40ba:	bc0c      	pop	{r2, r3}
    40bc:	4690      	mov	r8, r2
    40be:	4699      	mov	r9, r3
    40c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40c2:	46c0      	nop			; (mov r8, r8)
    40c4:	20000008 	.word	0x20000008
    40c8:	200009e0 	.word	0x200009e0
    40cc:	200009a4 	.word	0x200009a4
    40d0:	00000c39 	.word	0x00000c39
    40d4:	2000099c 	.word	0x2000099c

000040d8 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    40d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40da:	465f      	mov	r7, fp
    40dc:	4656      	mov	r6, sl
    40de:	464d      	mov	r5, r9
    40e0:	4644      	mov	r4, r8
    40e2:	b4f0      	push	{r4, r5, r6, r7}
    40e4:	b083      	sub	sp, #12
    40e6:	1c05      	adds	r5, r0, #0
    40e8:	1c0e      	adds	r6, r1, #0
    40ea:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    40ec:	2001      	movs	r0, #1
    40ee:	4b5b      	ldr	r3, [pc, #364]	; (425c <trx_sram_read+0x184>)
    40f0:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40f2:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    40f6:	4279      	negs	r1, r7
    40f8:	4179      	adcs	r1, r7
    40fa:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    40fc:	b672      	cpsid	i
    40fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4102:	2200      	movs	r2, #0
    4104:	4b56      	ldr	r3, [pc, #344]	; (4260 <trx_sram_read+0x188>)
    4106:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4108:	4f56      	ldr	r7, [pc, #344]	; (4264 <trx_sram_read+0x18c>)
    410a:	1c38      	adds	r0, r7, #0
    410c:	4956      	ldr	r1, [pc, #344]	; (4268 <trx_sram_read+0x190>)
    410e:	2201      	movs	r2, #1
    4110:	4b56      	ldr	r3, [pc, #344]	; (426c <trx_sram_read+0x194>)
    4112:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4114:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4116:	2101      	movs	r1, #1
    4118:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    411a:	420a      	tst	r2, r1
    411c:	d0fc      	beq.n	4118 <trx_sram_read+0x40>
    411e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4120:	07d1      	lsls	r1, r2, #31
    4122:	d501      	bpl.n	4128 <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4124:	2200      	movs	r2, #0
    4126:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4128:	2102      	movs	r1, #2
    412a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    412c:	420a      	tst	r2, r1
    412e:	d0fc      	beq.n	412a <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4130:	2204      	movs	r2, #4
    4132:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4134:	4211      	tst	r1, r2
    4136:	d0fc      	beq.n	4132 <trx_sram_read+0x5a>
    4138:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    413a:	0751      	lsls	r1, r2, #29
    413c:	d514      	bpl.n	4168 <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    413e:	8b5a      	ldrh	r2, [r3, #26]
    4140:	0751      	lsls	r1, r2, #29
    4142:	d503      	bpl.n	414c <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4144:	8b59      	ldrh	r1, [r3, #26]
    4146:	2204      	movs	r2, #4
    4148:	430a      	orrs	r2, r1
    414a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    414c:	4a45      	ldr	r2, [pc, #276]	; (4264 <trx_sram_read+0x18c>)
    414e:	7992      	ldrb	r2, [r2, #6]
    4150:	2a01      	cmp	r2, #1
    4152:	d105      	bne.n	4160 <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4154:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4156:	05c9      	lsls	r1, r1, #23
    4158:	0dc9      	lsrs	r1, r1, #23
    415a:	4a45      	ldr	r2, [pc, #276]	; (4270 <trx_sram_read+0x198>)
    415c:	8011      	strh	r1, [r2, #0]
    415e:	e003      	b.n	4168 <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4160:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4162:	b2c9      	uxtb	r1, r1
    4164:	4a42      	ldr	r2, [pc, #264]	; (4270 <trx_sram_read+0x198>)
    4166:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4168:	2201      	movs	r2, #1
    416a:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    416c:	4211      	tst	r1, r2
    416e:	d0fc      	beq.n	416a <trx_sram_read+0x92>
    4170:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4172:	07d1      	lsls	r1, r2, #31
    4174:	d500      	bpl.n	4178 <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4176:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4178:	2202      	movs	r2, #2
    417a:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    417c:	4211      	tst	r1, r2
    417e:	d0fc      	beq.n	417a <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4180:	2204      	movs	r2, #4
    4182:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4184:	4211      	tst	r1, r2
    4186:	d0fc      	beq.n	4182 <trx_sram_read+0xaa>
    4188:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    418a:	0751      	lsls	r1, r2, #29
    418c:	d50f      	bpl.n	41ae <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    418e:	8b5a      	ldrh	r2, [r3, #26]
    4190:	0751      	lsls	r1, r2, #29
    4192:	d503      	bpl.n	419c <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4194:	8b59      	ldrh	r1, [r3, #26]
    4196:	2204      	movs	r2, #4
    4198:	430a      	orrs	r2, r1
    419a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    419c:	4a31      	ldr	r2, [pc, #196]	; (4264 <trx_sram_read+0x18c>)
    419e:	7992      	ldrb	r2, [r2, #6]
    41a0:	2a01      	cmp	r2, #1
    41a2:	d109      	bne.n	41b8 <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    41a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41a6:	05d2      	lsls	r2, r2, #23
    41a8:	0dd2      	lsrs	r2, r2, #23
    41aa:	4b31      	ldr	r3, [pc, #196]	; (4270 <trx_sram_read+0x198>)
    41ac:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    41ae:	1e63      	subs	r3, r4, #1
    41b0:	b2db      	uxtb	r3, r3
    41b2:	2c00      	cmp	r4, #0
    41b4:	d105      	bne.n	41c2 <trx_sram_read+0xea>
    41b6:	e03b      	b.n	4230 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    41b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41ba:	b2d2      	uxtb	r2, r2
    41bc:	4b2c      	ldr	r3, [pc, #176]	; (4270 <trx_sram_read+0x198>)
    41be:	801a      	strh	r2, [r3, #0]
    41c0:	e7f5      	b.n	41ae <trx_sram_read+0xd6>
    41c2:	3301      	adds	r3, #1
    41c4:	199b      	adds	r3, r3, r6
    41c6:	4699      	mov	r9, r3
    41c8:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41ca:	4a26      	ldr	r2, [pc, #152]	; (4264 <trx_sram_read+0x18c>)
    41cc:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    41ce:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    41d0:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    41d2:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41d4:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41d6:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    41d8:	2204      	movs	r2, #4
    41da:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41dc:	4642      	mov	r2, r8
    41de:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    41e0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    41e2:	4222      	tst	r2, r4
    41e4:	d0fc      	beq.n	41e0 <trx_sram_read+0x108>
    41e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    41e8:	4222      	tst	r2, r4
    41ea:	d001      	beq.n	41f0 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    41ec:	4652      	mov	r2, sl
    41ee:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    41f0:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    41f2:	422a      	tst	r2, r5
    41f4:	d0fc      	beq.n	41f0 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41f6:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    41f8:	4202      	tst	r2, r0
    41fa:	d0fc      	beq.n	41f6 <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41fc:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41fe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4200:	4202      	tst	r2, r0
    4202:	d011      	beq.n	4228 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4204:	8b5a      	ldrh	r2, [r3, #26]
    4206:	4202      	tst	r2, r0
    4208:	d004      	beq.n	4214 <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    420a:	8b5a      	ldrh	r2, [r3, #26]
    420c:	4659      	mov	r1, fp
    420e:	430a      	orrs	r2, r1
    4210:	b292      	uxth	r2, r2
    4212:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4214:	4913      	ldr	r1, [pc, #76]	; (4264 <trx_sram_read+0x18c>)
    4216:	798a      	ldrb	r2, [r1, #6]
    4218:	2a01      	cmp	r2, #1
    421a:	d103      	bne.n	4224 <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    421c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    421e:	05c9      	lsls	r1, r1, #23
    4220:	0dc9      	lsrs	r1, r1, #23
    4222:	e001      	b.n	4228 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4224:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4226:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    4228:	7031      	strb	r1, [r6, #0]
		data++;
    422a:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    422c:	454e      	cmp	r6, r9
    422e:	d1d5      	bne.n	41dc <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4230:	480c      	ldr	r0, [pc, #48]	; (4264 <trx_sram_read+0x18c>)
    4232:	490d      	ldr	r1, [pc, #52]	; (4268 <trx_sram_read+0x190>)
    4234:	2200      	movs	r2, #0
    4236:	4b0d      	ldr	r3, [pc, #52]	; (426c <trx_sram_read+0x194>)
    4238:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    423a:	9a01      	ldr	r2, [sp, #4]
    423c:	2a00      	cmp	r2, #0
    423e:	d005      	beq.n	424c <trx_sram_read+0x174>
		cpu_irq_enable();
    4240:	2201      	movs	r2, #1
    4242:	4b07      	ldr	r3, [pc, #28]	; (4260 <trx_sram_read+0x188>)
    4244:	701a      	strb	r2, [r3, #0]
    4246:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    424a:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    424c:	b003      	add	sp, #12
    424e:	bc3c      	pop	{r2, r3, r4, r5}
    4250:	4690      	mov	r8, r2
    4252:	4699      	mov	r9, r3
    4254:	46a2      	mov	sl, r4
    4256:	46ab      	mov	fp, r5
    4258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	00000151 	.word	0x00000151
    4260:	20000008 	.word	0x20000008
    4264:	200009e0 	.word	0x200009e0
    4268:	200009a4 	.word	0x200009a4
    426c:	00000c39 	.word	0x00000c39
    4270:	2000099c 	.word	0x2000099c

00004274 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    4274:	b5f0      	push	{r4, r5, r6, r7, lr}
    4276:	465f      	mov	r7, fp
    4278:	4656      	mov	r6, sl
    427a:	464d      	mov	r5, r9
    427c:	4644      	mov	r4, r8
    427e:	b4f0      	push	{r4, r5, r6, r7}
    4280:	b083      	sub	sp, #12
    4282:	1c05      	adds	r5, r0, #0
    4284:	4688      	mov	r8, r1
    4286:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    4288:	2001      	movs	r0, #1
    428a:	4b83      	ldr	r3, [pc, #524]	; (4498 <trx_aes_wrrd+0x224>)
    428c:	4798      	blx	r3

	ENTER_TRX_REGION();
    428e:	2000      	movs	r0, #0
    4290:	2100      	movs	r1, #0
    4292:	4b82      	ldr	r3, [pc, #520]	; (449c <trx_aes_wrrd+0x228>)
    4294:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4296:	4e82      	ldr	r6, [pc, #520]	; (44a0 <trx_aes_wrrd+0x22c>)
    4298:	1c30      	adds	r0, r6, #0
    429a:	4982      	ldr	r1, [pc, #520]	; (44a4 <trx_aes_wrrd+0x230>)
    429c:	2201      	movs	r2, #1
    429e:	4b82      	ldr	r3, [pc, #520]	; (44a8 <trx_aes_wrrd+0x234>)
    42a0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42a2:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42a4:	2101      	movs	r1, #1
    42a6:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    42a8:	420a      	tst	r2, r1
    42aa:	d0fc      	beq.n	42a6 <trx_aes_wrrd+0x32>
    42ac:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    42ae:	07d0      	lsls	r0, r2, #31
    42b0:	d501      	bpl.n	42b6 <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42b2:	2240      	movs	r2, #64	; 0x40
    42b4:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42b6:	2102      	movs	r1, #2
    42b8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    42ba:	420a      	tst	r2, r1
    42bc:	d0fc      	beq.n	42b8 <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42be:	2104      	movs	r1, #4
    42c0:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    42c2:	420a      	tst	r2, r1
    42c4:	d0fc      	beq.n	42c0 <trx_aes_wrrd+0x4c>
    42c6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    42c8:	0751      	lsls	r1, r2, #29
    42ca:	d514      	bpl.n	42f6 <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    42cc:	8b5a      	ldrh	r2, [r3, #26]
    42ce:	0756      	lsls	r6, r2, #29
    42d0:	d503      	bpl.n	42da <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    42d2:	8b59      	ldrh	r1, [r3, #26]
    42d4:	2204      	movs	r2, #4
    42d6:	430a      	orrs	r2, r1
    42d8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42da:	4a71      	ldr	r2, [pc, #452]	; (44a0 <trx_aes_wrrd+0x22c>)
    42dc:	7992      	ldrb	r2, [r2, #6]
    42de:	2a01      	cmp	r2, #1
    42e0:	d105      	bne.n	42ee <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    42e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    42e4:	05c9      	lsls	r1, r1, #23
    42e6:	0dc9      	lsrs	r1, r1, #23
    42e8:	4a70      	ldr	r2, [pc, #448]	; (44ac <trx_aes_wrrd+0x238>)
    42ea:	8011      	strh	r1, [r2, #0]
    42ec:	e003      	b.n	42f6 <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
    42f0:	b2c9      	uxtb	r1, r1
    42f2:	4a6e      	ldr	r2, [pc, #440]	; (44ac <trx_aes_wrrd+0x238>)
    42f4:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42f6:	2101      	movs	r1, #1
    42f8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    42fa:	420a      	tst	r2, r1
    42fc:	d0fc      	beq.n	42f8 <trx_aes_wrrd+0x84>
    42fe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4300:	07d0      	lsls	r0, r2, #31
    4302:	d500      	bpl.n	4306 <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4304:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4306:	2102      	movs	r1, #2
    4308:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    430a:	420a      	tst	r2, r1
    430c:	d0fc      	beq.n	4308 <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    430e:	2204      	movs	r2, #4
    4310:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4312:	4211      	tst	r1, r2
    4314:	d0fc      	beq.n	4310 <trx_aes_wrrd+0x9c>
    4316:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4318:	0751      	lsls	r1, r2, #29
    431a:	d514      	bpl.n	4346 <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    431c:	8b5a      	ldrh	r2, [r3, #26]
    431e:	0756      	lsls	r6, r2, #29
    4320:	d503      	bpl.n	432a <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4322:	8b59      	ldrh	r1, [r3, #26]
    4324:	2204      	movs	r2, #4
    4326:	430a      	orrs	r2, r1
    4328:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    432a:	4a5d      	ldr	r2, [pc, #372]	; (44a0 <trx_aes_wrrd+0x22c>)
    432c:	7992      	ldrb	r2, [r2, #6]
    432e:	2a01      	cmp	r2, #1
    4330:	d105      	bne.n	433e <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4332:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4334:	05c9      	lsls	r1, r1, #23
    4336:	0dc9      	lsrs	r1, r1, #23
    4338:	4a5c      	ldr	r2, [pc, #368]	; (44ac <trx_aes_wrrd+0x238>)
    433a:	8011      	strh	r1, [r2, #0]
    433c:	e003      	b.n	4346 <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    433e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4340:	b2c9      	uxtb	r1, r1
    4342:	4a5a      	ldr	r2, [pc, #360]	; (44ac <trx_aes_wrrd+0x238>)
    4344:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4346:	2201      	movs	r2, #1
    4348:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    434a:	4211      	tst	r1, r2
    434c:	d0fc      	beq.n	4348 <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    434e:	4640      	mov	r0, r8
    4350:	7801      	ldrb	r1, [r0, #0]
    4352:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4354:	07d6      	lsls	r6, r2, #31
    4356:	d500      	bpl.n	435a <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4358:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    435a:	2202      	movs	r2, #2
    435c:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    435e:	4211      	tst	r1, r2
    4360:	d0fc      	beq.n	435c <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4362:	2204      	movs	r2, #4
    4364:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4366:	4211      	tst	r1, r2
    4368:	d0fc      	beq.n	4364 <trx_aes_wrrd+0xf0>
    436a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    436c:	0750      	lsls	r0, r2, #29
    436e:	d50f      	bpl.n	4390 <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4370:	8b5a      	ldrh	r2, [r3, #26]
    4372:	0751      	lsls	r1, r2, #29
    4374:	d503      	bpl.n	437e <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4376:	8b59      	ldrh	r1, [r3, #26]
    4378:	2204      	movs	r2, #4
    437a:	430a      	orrs	r2, r1
    437c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    437e:	4a48      	ldr	r2, [pc, #288]	; (44a0 <trx_aes_wrrd+0x22c>)
    4380:	7992      	ldrb	r2, [r2, #6]
    4382:	2a01      	cmp	r2, #1
    4384:	d108      	bne.n	4398 <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4388:	05d2      	lsls	r2, r2, #23
    438a:	0dd2      	lsrs	r2, r2, #23
    438c:	4b47      	ldr	r3, [pc, #284]	; (44ac <trx_aes_wrrd+0x238>)
    438e:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    4390:	2100      	movs	r1, #0
    4392:	2c00      	cmp	r4, #0
    4394:	d047      	beq.n	4426 <trx_aes_wrrd+0x1b2>
    4396:	e004      	b.n	43a2 <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    439a:	b2d2      	uxtb	r2, r2
    439c:	4b43      	ldr	r3, [pc, #268]	; (44ac <trx_aes_wrrd+0x238>)
    439e:	801a      	strh	r2, [r3, #0]
    43a0:	e7f6      	b.n	4390 <trx_aes_wrrd+0x11c>
    43a2:	4645      	mov	r5, r8
    43a4:	3c01      	subs	r4, #1
    43a6:	b2e4      	uxtb	r4, r4
    43a8:	9401      	str	r4, [sp, #4]
    43aa:	1c23      	adds	r3, r4, #0
    43ac:	4443      	add	r3, r8
    43ae:	3301      	adds	r3, #1
    43b0:	469b      	mov	fp, r3
    43b2:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43b4:	4b3a      	ldr	r3, [pc, #232]	; (44a0 <trx_aes_wrrd+0x22c>)
    43b6:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43b8:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43ba:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43bc:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43be:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    43c0:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43c2:	4656      	mov	r6, sl
    43c4:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43c6:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    43c8:	4206      	tst	r6, r0
    43ca:	d0fc      	beq.n	43c6 <trx_aes_wrrd+0x152>
    43cc:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    43ce:	786e      	ldrb	r6, [r5, #1]
    43d0:	46b3      	mov	fp, r6
    43d2:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    43d4:	4206      	tst	r6, r0
    43d6:	d001      	beq.n	43dc <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    43d8:	465e      	mov	r6, fp
    43da:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43dc:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    43de:	4226      	tst	r6, r4
    43e0:	d0fc      	beq.n	43dc <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43e2:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    43e4:	4216      	tst	r6, r2
    43e6:	d0fc      	beq.n	43e2 <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43e8:	464e      	mov	r6, r9
    43ea:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43ec:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    43ee:	4216      	tst	r6, r2
    43f0:	d011      	beq.n	4416 <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43f2:	8b59      	ldrh	r1, [r3, #26]
    43f4:	4211      	tst	r1, r2
    43f6:	d004      	beq.n	4402 <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    43f8:	8b59      	ldrh	r1, [r3, #26]
    43fa:	2604      	movs	r6, #4
    43fc:	4331      	orrs	r1, r6
    43fe:	b289      	uxth	r1, r1
    4400:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4402:	4e27      	ldr	r6, [pc, #156]	; (44a0 <trx_aes_wrrd+0x22c>)
    4404:	79b1      	ldrb	r1, [r6, #6]
    4406:	2901      	cmp	r1, #1
    4408:	d103      	bne.n	4412 <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    440a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    440c:	05c9      	lsls	r1, r1, #23
    440e:	0dc9      	lsrs	r1, r1, #23
    4410:	e001      	b.n	4416 <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4412:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4414:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    4416:	4663      	mov	r3, ip
    4418:	7019      	strb	r1, [r3, #0]
    441a:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    441c:	42bd      	cmp	r5, r7
    441e:	d1d0      	bne.n	43c2 <trx_aes_wrrd+0x14e>
    4420:	9b01      	ldr	r3, [sp, #4]
    4422:	3301      	adds	r3, #1
    4424:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4426:	4b1e      	ldr	r3, [pc, #120]	; (44a0 <trx_aes_wrrd+0x22c>)
    4428:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    442a:	2001      	movs	r0, #1
    442c:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    442e:	4202      	tst	r2, r0
    4430:	d0fc      	beq.n	442c <trx_aes_wrrd+0x1b8>
    4432:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4434:	07d6      	lsls	r6, r2, #31
    4436:	d501      	bpl.n	443c <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4438:	2200      	movs	r2, #0
    443a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    443c:	2002      	movs	r0, #2
    443e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4440:	4202      	tst	r2, r0
    4442:	d0fc      	beq.n	443e <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4444:	2004      	movs	r0, #4
    4446:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    4448:	4202      	tst	r2, r0
    444a:	d0fc      	beq.n	4446 <trx_aes_wrrd+0x1d2>
    444c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    444e:	0750      	lsls	r0, r2, #29
    4450:	d510      	bpl.n	4474 <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4452:	8b5a      	ldrh	r2, [r3, #26]
    4454:	0751      	lsls	r1, r2, #29
    4456:	d503      	bpl.n	4460 <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4458:	8b59      	ldrh	r1, [r3, #26]
    445a:	2204      	movs	r2, #4
    445c:	430a      	orrs	r2, r1
    445e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4460:	4a0f      	ldr	r2, [pc, #60]	; (44a0 <trx_aes_wrrd+0x22c>)
    4462:	7992      	ldrb	r2, [r2, #6]
    4464:	2a01      	cmp	r2, #1
    4466:	d103      	bne.n	4470 <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4468:	6a99      	ldr	r1, [r3, #40]	; 0x28
    446a:	05c9      	lsls	r1, r1, #23
    446c:	0dc9      	lsrs	r1, r1, #23
    446e:	e001      	b.n	4474 <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4470:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4472:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    4474:	4642      	mov	r2, r8
    4476:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4478:	4809      	ldr	r0, [pc, #36]	; (44a0 <trx_aes_wrrd+0x22c>)
    447a:	490a      	ldr	r1, [pc, #40]	; (44a4 <trx_aes_wrrd+0x230>)
    447c:	2200      	movs	r2, #0
    447e:	4b0a      	ldr	r3, [pc, #40]	; (44a8 <trx_aes_wrrd+0x234>)
    4480:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    4482:	2000      	movs	r0, #0
    4484:	2100      	movs	r1, #0
    4486:	4b0a      	ldr	r3, [pc, #40]	; (44b0 <trx_aes_wrrd+0x23c>)
    4488:	4798      	blx	r3
}
    448a:	b003      	add	sp, #12
    448c:	bc3c      	pop	{r2, r3, r4, r5}
    448e:	4690      	mov	r8, r2
    4490:	4699      	mov	r9, r3
    4492:	46a2      	mov	sl, r4
    4494:	46ab      	mov	fp, r5
    4496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4498:	00000151 	.word	0x00000151
    449c:	0000030d 	.word	0x0000030d
    44a0:	200009e0 	.word	0x200009e0
    44a4:	200009a4 	.word	0x200009a4
    44a8:	00000c39 	.word	0x00000c39
    44ac:	2000099c 	.word	0x2000099c
    44b0:	000002ed 	.word	0x000002ed

000044b4 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	if (NWK_SUCCESS_STATUS == req->status){
    44b4:	7f03      	ldrb	r3, [r0, #28]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d106      	bne.n	44c8 <appDataConf+0x14>
		appDataReqBusy = false;
    44ba:	2200      	movs	r2, #0
    44bc:	4b03      	ldr	r3, [pc, #12]	; (44cc <appDataConf+0x18>)
    44be:	701a      	strb	r2, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    44c0:	2280      	movs	r2, #128	; 0x80
    44c2:	0312      	lsls	r2, r2, #12
    44c4:	4b02      	ldr	r3, [pc, #8]	; (44d0 <appDataConf+0x1c>)
    44c6:	61da      	str	r2, [r3, #28]
		LED_Toggle(LED0);
	}
}		
    44c8:	4770      	bx	lr
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	200007cc 	.word	0x200007cc
    44d0:	41004400 	.word	0x41004400

000044d4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    44d4:	b570      	push	{r4, r5, r6, lr}
    44d6:	b082      	sub	sp, #8
    44d8:	1c05      	adds	r5, r0, #0
    44da:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    44dc:	2200      	movs	r2, #0
    44de:	466b      	mov	r3, sp
    44e0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    44e2:	4c06      	ldr	r4, [pc, #24]	; (44fc <usart_serial_getchar+0x28>)
    44e4:	1c28      	adds	r0, r5, #0
    44e6:	4669      	mov	r1, sp
    44e8:	3106      	adds	r1, #6
    44ea:	47a0      	blx	r4
    44ec:	2800      	cmp	r0, #0
    44ee:	d1f9      	bne.n	44e4 <usart_serial_getchar+0x10>

	*c = temp;
    44f0:	466b      	mov	r3, sp
    44f2:	3306      	adds	r3, #6
    44f4:	881b      	ldrh	r3, [r3, #0]
    44f6:	7033      	strb	r3, [r6, #0]
}
    44f8:	b002      	add	sp, #8
    44fa:	bd70      	pop	{r4, r5, r6, pc}
    44fc:	00001059 	.word	0x00001059

00004500 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4500:	b570      	push	{r4, r5, r6, lr}
    4502:	1c06      	adds	r6, r0, #0
    4504:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    4506:	4c03      	ldr	r4, [pc, #12]	; (4514 <usart_serial_putchar+0x14>)
    4508:	1c30      	adds	r0, r6, #0
    450a:	1c29      	adds	r1, r5, #0
    450c:	47a0      	blx	r4
    450e:	2800      	cmp	r0, #0
    4510:	d1fa      	bne.n	4508 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    4512:	bd70      	pop	{r4, r5, r6, pc}
    4514:	0000102d 	.word	0x0000102d

00004518 <appSendData>:

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
    4518:	b570      	push	{r4, r5, r6, lr}
	if (appDataReqBusy || 0 == appUartBufferPtr) {
    451a:	4b10      	ldr	r3, [pc, #64]	; (455c <appSendData+0x44>)
    451c:	781b      	ldrb	r3, [r3, #0]
    451e:	2b00      	cmp	r3, #0
    4520:	d11b      	bne.n	455a <appSendData+0x42>
    4522:	4b0f      	ldr	r3, [pc, #60]	; (4560 <appSendData+0x48>)
    4524:	781c      	ldrb	r4, [r3, #0]
    4526:	2c00      	cmp	r4, #0
    4528:	d017      	beq.n	455a <appSendData+0x42>
		return;
	}

	memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
    452a:	4e0e      	ldr	r6, [pc, #56]	; (4564 <appSendData+0x4c>)
    452c:	1c30      	adds	r0, r6, #0
    452e:	490e      	ldr	r1, [pc, #56]	; (4568 <appSendData+0x50>)
    4530:	1c22      	adds	r2, r4, #0
    4532:	4b0e      	ldr	r3, [pc, #56]	; (456c <appSendData+0x54>)
    4534:	4798      	blx	r3

	appDataReq.dstAddr = 2;
    4536:	480e      	ldr	r0, [pc, #56]	; (4570 <appSendData+0x58>)
    4538:	2302      	movs	r3, #2
    453a:	8143      	strh	r3, [r0, #10]
	appDataReq.dstEndpoint = APP_DST_ENDPOINT;
    453c:	7303      	strb	r3, [r0, #12]
	appDataReq.srcEndpoint = APP_ENDPOINT;
    453e:	2501      	movs	r5, #1
    4540:	7345      	strb	r5, [r0, #13]
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    4542:	7383      	strb	r3, [r0, #14]
	appDataReq.data = appDataReqBuffer;
    4544:	6106      	str	r6, [r0, #16]
	appDataReq.size = appUartBufferPtr;
    4546:	7504      	strb	r4, [r0, #20]
	appDataReq.confirm = appDataConf;
    4548:	4b0a      	ldr	r3, [pc, #40]	; (4574 <appSendData+0x5c>)
    454a:	6183      	str	r3, [r0, #24]
	NWK_DataReq(&appDataReq);
    454c:	4b0a      	ldr	r3, [pc, #40]	; (4578 <appSendData+0x60>)
    454e:	4798      	blx	r3

	appUartBufferPtr = 0;
    4550:	2200      	movs	r2, #0
    4552:	4b03      	ldr	r3, [pc, #12]	; (4560 <appSendData+0x48>)
    4554:	701a      	strb	r2, [r3, #0]
	appDataReqBusy = true;
    4556:	4b01      	ldr	r3, [pc, #4]	; (455c <appSendData+0x44>)
    4558:	701d      	strb	r5, [r3, #0]
	//LED_Toggle(LED0);
}
    455a:	bd70      	pop	{r4, r5, r6, pc}
    455c:	200007cc 	.word	0x200007cc
    4560:	20000794 	.word	0x20000794
    4564:	200007d0 	.word	0x200007d0
    4568:	20000728 	.word	0x20000728
    456c:	000049fd 	.word	0x000049fd
    4570:	2000083c 	.word	0x2000083c
    4574:	000044b5 	.word	0x000044b5
    4578:	0000210d 	.word	0x0000210d

0000457c <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
    457c:	b508      	push	{r3, lr}
	appSendData();
    457e:	4b01      	ldr	r3, [pc, #4]	; (4584 <appTimerHandler+0x8>)
    4580:	4798      	blx	r3
	(void)timer;
}
    4582:	bd08      	pop	{r3, pc}
    4584:	00004519 	.word	0x00004519

00004588 <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    4588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uint8_t i = 0; i < ind->size; i++) {
    458a:	7b03      	ldrb	r3, [r0, #12]
    458c:	2b00      	cmp	r3, #0
    458e:	d009      	beq.n	45a4 <appDataInd+0x1c>
    4590:	2300      	movs	r3, #0
		rx_data[i] = ind->data[i];
    4592:	491b      	ldr	r1, [pc, #108]	; (4600 <appDataInd+0x78>)
    4594:	6884      	ldr	r4, [r0, #8]
    4596:	5ce2      	ldrb	r2, [r4, r3]
    4598:	54ca      	strb	r2, [r1, r3]

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    459a:	3301      	adds	r3, #1
    459c:	b2db      	uxtb	r3, r3
    459e:	7b02      	ldrb	r2, [r0, #12]
    45a0:	429a      	cmp	r2, r3
    45a2:	d8f7      	bhi.n	4594 <appDataInd+0xc>
		rx_data[i] = ind->data[i];
	}
	printf("received!");
    45a4:	4817      	ldr	r0, [pc, #92]	; (4604 <appDataInd+0x7c>)
    45a6:	4b18      	ldr	r3, [pc, #96]	; (4608 <appDataInd+0x80>)
    45a8:	4798      	blx	r3
static void APP_TaskHandler(void)
{

	const char* tx_data = "You Rock";
	
	if(!appDataReqBusy){
    45aa:	4b18      	ldr	r3, [pc, #96]	; (460c <appDataInd+0x84>)
    45ac:	781b      	ldrb	r3, [r3, #0]
    45ae:	2b00      	cmp	r3, #0
    45b0:	d124      	bne.n	45fc <appDataInd+0x74>
		if(!strcmp((const char*)rx_data, "this rocks"))
    45b2:	4813      	ldr	r0, [pc, #76]	; (4600 <appDataInd+0x78>)
    45b4:	4916      	ldr	r1, [pc, #88]	; (4610 <appDataInd+0x88>)
    45b6:	4b17      	ldr	r3, [pc, #92]	; (4614 <appDataInd+0x8c>)
    45b8:	4798      	blx	r3
    45ba:	2800      	cmp	r0, #0
    45bc:	d118      	bne.n	45f0 <appDataInd+0x68>
    45be:	2280      	movs	r2, #128	; 0x80
    45c0:	0312      	lsls	r2, r2, #12
    45c2:	4b15      	ldr	r3, [pc, #84]	; (4618 <appDataInd+0x90>)
    45c4:	61da      	str	r2, [r3, #28]
    45c6:	e013      	b.n	45f0 <appDataInd+0x68>
			LED_Toggle(LED0);
		for (uint16_t i = 0; i < sizeof("You Rock"); i++) {
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    45c8:	7833      	ldrb	r3, [r6, #0]
    45ca:	2b69      	cmp	r3, #105	; 0x69
    45cc:	d101      	bne.n	45d2 <appDataInd+0x4a>
				appSendData();
    45ce:	4a13      	ldr	r2, [pc, #76]	; (461c <appDataInd+0x94>)
    45d0:	4790      	blx	r2
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    45d2:	782b      	ldrb	r3, [r5, #0]
    45d4:	2b68      	cmp	r3, #104	; 0x68
    45d6:	d805      	bhi.n	45e4 <appDataInd+0x5c>
				appUartBuffer[appUartBufferPtr++] = tx_data[i];
    45d8:	1c59      	adds	r1, r3, #1
    45da:	4a11      	ldr	r2, [pc, #68]	; (4620 <appDataInd+0x98>)
    45dc:	7011      	strb	r1, [r2, #0]
    45de:	7821      	ldrb	r1, [r4, #0]
    45e0:	4a10      	ldr	r2, [pc, #64]	; (4624 <appDataInd+0x9c>)
    45e2:	54d1      	strb	r1, [r2, r3]
    45e4:	3401      	adds	r4, #1
	const char* tx_data = "You Rock";
	
	if(!appDataReqBusy){
		if(!strcmp((const char*)rx_data, "this rocks"))
			LED_Toggle(LED0);
		for (uint16_t i = 0; i < sizeof("You Rock"); i++) {
    45e6:	42bc      	cmp	r4, r7
    45e8:	d1ee      	bne.n	45c8 <appDataInd+0x40>

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
				appUartBuffer[appUartBufferPtr++] = tx_data[i];
			}
		}
		appSendData();
    45ea:	4b0c      	ldr	r3, [pc, #48]	; (461c <appDataInd+0x94>)
    45ec:	4798      	blx	r3
    45ee:	e005      	b.n	45fc <appDataInd+0x74>
    45f0:	4c0d      	ldr	r4, [pc, #52]	; (4628 <appDataInd+0xa0>)
    45f2:	1c27      	adds	r7, r4, #0
    45f4:	3709      	adds	r7, #9
	
	if(!appDataReqBusy){
		if(!strcmp((const char*)rx_data, "this rocks"))
			LED_Toggle(LED0);
		for (uint16_t i = 0; i < sizeof("You Rock"); i++) {
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    45f6:	4e0a      	ldr	r6, [pc, #40]	; (4620 <appDataInd+0x98>)
				appSendData();
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    45f8:	1c35      	adds	r5, r6, #0
    45fa:	e7e5      	b.n	45c8 <appDataInd+0x40>
		rx_data[i] = ind->data[i];
	}
	printf("received!");
	APP_TaskHandler();
	return true;
}
    45fc:	2001      	movs	r0, #1
    45fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4600:	20000700 	.word	0x20000700
    4604:	00005a78 	.word	0x00005a78
    4608:	00004a21 	.word	0x00004a21
    460c:	200007cc 	.word	0x200007cc
    4610:	00005a84 	.word	0x00005a84
    4614:	00004bf1 	.word	0x00004bf1
    4618:	41004400 	.word	0x41004400
    461c:	00004519 	.word	0x00004519
    4620:	20000794 	.word	0x20000794
    4624:	20000728 	.word	0x20000728
    4628:	00005a6c 	.word	0x00005a6c

0000462c <main>:

	stdio_serial_init(&cdc_uart_module, USART_HOST, &usart_conf);
	usart_enable(&cdc_uart_module);
}
int main(void)
{
    462c:	b5f0      	push	{r4, r5, r6, r7, lr}
    462e:	b091      	sub	sp, #68	; 0x44
	irq_initialize_vectors();
	#if SAMD || SAMR21
	system_init();
    4630:	4b45      	ldr	r3, [pc, #276]	; (4748 <main+0x11c>)
    4632:	4798      	blx	r3
	delay_init();
    4634:	4b45      	ldr	r3, [pc, #276]	; (474c <main+0x120>)
    4636:	4798      	blx	r3
	#else
	sysclk_init();
	board_init();
	#endif
	SYS_Init();
    4638:	4b45      	ldr	r3, [pc, #276]	; (4750 <main+0x124>)
    463a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    463c:	2380      	movs	r3, #128	; 0x80
    463e:	05db      	lsls	r3, r3, #23
    4640:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4642:	2300      	movs	r3, #0
    4644:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4646:	22ff      	movs	r2, #255	; 0xff
    4648:	4668      	mov	r0, sp
    464a:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    464c:	2200      	movs	r2, #0
    464e:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4650:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    4652:	2196      	movs	r1, #150	; 0x96
    4654:	0189      	lsls	r1, r1, #6
    4656:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4658:	2601      	movs	r6, #1
    465a:	2124      	movs	r1, #36	; 0x24
    465c:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    465e:	2125      	movs	r1, #37	; 0x25
    4660:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    4662:	2126      	movs	r1, #38	; 0x26
    4664:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    4666:	2127      	movs	r1, #39	; 0x27
    4668:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    466a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    466c:	212c      	movs	r1, #44	; 0x2c
    466e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4670:	212d      	movs	r1, #45	; 0x2d
    4672:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4674:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4676:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4678:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    467a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    467c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    467e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    4680:	2313      	movs	r3, #19
    4682:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    4684:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    4686:	2380      	movs	r3, #128	; 0x80
    4688:	035b      	lsls	r3, r3, #13
    468a:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    468c:	4b31      	ldr	r3, [pc, #196]	; (4754 <main+0x128>)
    468e:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    4690:	4b31      	ldr	r3, [pc, #196]	; (4758 <main+0x12c>)
    4692:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    4694:	2301      	movs	r3, #1
    4696:	425b      	negs	r3, r3
    4698:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    469a:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    469c:	4c2f      	ldr	r4, [pc, #188]	; (475c <main+0x130>)
    469e:	4b30      	ldr	r3, [pc, #192]	; (4760 <main+0x134>)
    46a0:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    46a2:	4a30      	ldr	r2, [pc, #192]	; (4764 <main+0x138>)
    46a4:	4b30      	ldr	r3, [pc, #192]	; (4768 <main+0x13c>)
    46a6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    46a8:	4a30      	ldr	r2, [pc, #192]	; (476c <main+0x140>)
    46aa:	4b31      	ldr	r3, [pc, #196]	; (4770 <main+0x144>)
    46ac:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    46ae:	1c20      	adds	r0, r4, #0
    46b0:	4930      	ldr	r1, [pc, #192]	; (4774 <main+0x148>)
    46b2:	466a      	mov	r2, sp
    46b4:	4b30      	ldr	r3, [pc, #192]	; (4778 <main+0x14c>)
    46b6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    46b8:	4f30      	ldr	r7, [pc, #192]	; (477c <main+0x150>)
    46ba:	683b      	ldr	r3, [r7, #0]
    46bc:	6898      	ldr	r0, [r3, #8]
    46be:	2100      	movs	r1, #0
    46c0:	4d2f      	ldr	r5, [pc, #188]	; (4780 <main+0x154>)
    46c2:	47a8      	blx	r5
	setbuf(stdin, NULL);
    46c4:	683b      	ldr	r3, [r7, #0]
    46c6:	6858      	ldr	r0, [r3, #4]
    46c8:	2100      	movs	r1, #0
    46ca:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    46cc:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    46ce:	1c28      	adds	r0, r5, #0
    46d0:	4b2c      	ldr	r3, [pc, #176]	; (4784 <main+0x158>)
    46d2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    46d4:	231f      	movs	r3, #31
    46d6:	4018      	ands	r0, r3
    46d8:	4086      	lsls	r6, r0
    46da:	4b2b      	ldr	r3, [pc, #172]	; (4788 <main+0x15c>)
    46dc:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    46de:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    46e0:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    46e2:	2a00      	cmp	r2, #0
    46e4:	d1fc      	bne.n	46e0 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    46e6:	682a      	ldr	r2, [r5, #0]
    46e8:	2302      	movs	r3, #2
    46ea:	4313      	orrs	r3, r2
    46ec:	602b      	str	r3, [r5, #0]
	board_init();
	#endif
	SYS_Init();
	//sio2host_init();
	configure_console();
	printf("we made it");
    46ee:	4827      	ldr	r0, [pc, #156]	; (478c <main+0x160>)
    46f0:	4b27      	ldr	r3, [pc, #156]	; (4790 <main+0x164>)
    46f2:	4798      	blx	r3
	cpu_irq_enable();
    46f4:	2201      	movs	r2, #1
    46f6:	4b27      	ldr	r3, [pc, #156]	; (4794 <main+0x168>)
    46f8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    46fa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    46fe:	b662      	cpsie	i

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4700:	2280      	movs	r2, #128	; 0x80
    4702:	0312      	lsls	r2, r2, #12
    4704:	4b24      	ldr	r3, [pc, #144]	; (4798 <main+0x16c>)
    4706:	615a      	str	r2, [r3, #20]

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    4708:	2000      	movs	r0, #0
    470a:	4b24      	ldr	r3, [pc, #144]	; (479c <main+0x170>)
    470c:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    470e:	4824      	ldr	r0, [pc, #144]	; (47a0 <main+0x174>)
    4710:	4b24      	ldr	r3, [pc, #144]	; (47a4 <main+0x178>)
    4712:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    4714:	200f      	movs	r0, #15
    4716:	4b24      	ldr	r3, [pc, #144]	; (47a8 <main+0x17c>)
    4718:	4798      	blx	r3
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    471a:	2001      	movs	r0, #1
    471c:	4b23      	ldr	r3, [pc, #140]	; (47ac <main+0x180>)
    471e:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    4720:	2023      	movs	r0, #35	; 0x23
    4722:	4b23      	ldr	r3, [pc, #140]	; (47b0 <main+0x184>)
    4724:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    4726:	4823      	ldr	r0, [pc, #140]	; (47b4 <main+0x188>)
    4728:	4b23      	ldr	r3, [pc, #140]	; (47b8 <main+0x18c>)
    472a:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    472c:	2001      	movs	r0, #1
    472e:	4923      	ldr	r1, [pc, #140]	; (47bc <main+0x190>)
    4730:	4b23      	ldr	r3, [pc, #140]	; (47c0 <main+0x194>)
    4732:	4798      	blx	r3

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    4734:	4b23      	ldr	r3, [pc, #140]	; (47c4 <main+0x198>)
    4736:	2214      	movs	r2, #20
    4738:	609a      	str	r2, [r3, #8]
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    473a:	2200      	movs	r2, #0
    473c:	731a      	strb	r2, [r3, #12]
	appTimer.handler = appTimerHandler;
    473e:	4a22      	ldr	r2, [pc, #136]	; (47c8 <main+0x19c>)
    4740:	611a      	str	r2, [r3, #16]
	printf("we made it");
	cpu_irq_enable();
	LED_On(LED0);
	appInit();
	while (1) {
		SYS_TaskHandler();
    4742:	4c22      	ldr	r4, [pc, #136]	; (47cc <main+0x1a0>)
    4744:	47a0      	blx	r4
    4746:	e7fd      	b.n	4744 <main+0x118>
    4748:	00001a81 	.word	0x00001a81
    474c:	00000115 	.word	0x00000115
    4750:	00003499 	.word	0x00003499
    4754:	00040003 	.word	0x00040003
    4758:	00050003 	.word	0x00050003
    475c:	20000798 	.word	0x20000798
    4760:	200008e8 	.word	0x200008e8
    4764:	00004501 	.word	0x00004501
    4768:	200008e4 	.word	0x200008e4
    476c:	000044d5 	.word	0x000044d5
    4770:	200008e0 	.word	0x200008e0
    4774:	42000800 	.word	0x42000800
    4778:	00000d25 	.word	0x00000d25
    477c:	2000006c 	.word	0x2000006c
    4780:	00004ad1 	.word	0x00004ad1
    4784:	000008fd 	.word	0x000008fd
    4788:	e000e100 	.word	0xe000e100
    478c:	00005a90 	.word	0x00005a90
    4790:	00004a21 	.word	0x00004a21
    4794:	20000008 	.word	0x20000008
    4798:	41004400 	.word	0x41004400
    479c:	00002065 	.word	0x00002065
    47a0:	00004567 	.word	0x00004567
    47a4:	00002079 	.word	0x00002079
    47a8:	000032d1 	.word	0x000032d1
    47ac:	000032bd 	.word	0x000032bd
    47b0:	00003341 	.word	0x00003341
    47b4:	00005a9c 	.word	0x00005a9c
    47b8:	00002bcd 	.word	0x00002bcd
    47bc:	00004589 	.word	0x00004589
    47c0:	0000208d 	.word	0x0000208d
    47c4:	20000714 	.word	0x20000714
    47c8:	0000457d 	.word	0x0000457d
    47cc:	000034bd 	.word	0x000034bd

000047d0 <common_tc_delay>:
    47d0:	b510      	push	{r4, lr}
    47d2:	1c04      	adds	r4, r0, #0
    47d4:	4b13      	ldr	r3, [pc, #76]	; (4824 <common_tc_delay+0x54>)
    47d6:	4798      	blx	r3
    47d8:	4b13      	ldr	r3, [pc, #76]	; (4828 <common_tc_delay+0x58>)
    47da:	781a      	ldrb	r2, [r3, #0]
    47dc:	4362      	muls	r2, r4
    47de:	1881      	adds	r1, r0, r2
    47e0:	4b12      	ldr	r3, [pc, #72]	; (482c <common_tc_delay+0x5c>)
    47e2:	6059      	str	r1, [r3, #4]
    47e4:	6859      	ldr	r1, [r3, #4]
    47e6:	0c09      	lsrs	r1, r1, #16
    47e8:	6059      	str	r1, [r3, #4]
    47ea:	685b      	ldr	r3, [r3, #4]
    47ec:	2b00      	cmp	r3, #0
    47ee:	d007      	beq.n	4800 <common_tc_delay+0x30>
    47f0:	4b0e      	ldr	r3, [pc, #56]	; (482c <common_tc_delay+0x5c>)
    47f2:	6859      	ldr	r1, [r3, #4]
    47f4:	3201      	adds	r2, #1
    47f6:	1880      	adds	r0, r0, r2
    47f8:	8118      	strh	r0, [r3, #8]
    47fa:	4b0d      	ldr	r3, [pc, #52]	; (4830 <common_tc_delay+0x60>)
    47fc:	4798      	blx	r3
    47fe:	e004      	b.n	480a <common_tc_delay+0x3a>
    4800:	1882      	adds	r2, r0, r2
    4802:	4b0a      	ldr	r3, [pc, #40]	; (482c <common_tc_delay+0x5c>)
    4804:	811a      	strh	r2, [r3, #8]
    4806:	4b0b      	ldr	r3, [pc, #44]	; (4834 <common_tc_delay+0x64>)
    4808:	4798      	blx	r3
    480a:	4b08      	ldr	r3, [pc, #32]	; (482c <common_tc_delay+0x5c>)
    480c:	891b      	ldrh	r3, [r3, #8]
    480e:	2b63      	cmp	r3, #99	; 0x63
    4810:	d802      	bhi.n	4818 <common_tc_delay+0x48>
    4812:	3364      	adds	r3, #100	; 0x64
    4814:	4a05      	ldr	r2, [pc, #20]	; (482c <common_tc_delay+0x5c>)
    4816:	8113      	strh	r3, [r2, #8]
    4818:	4b04      	ldr	r3, [pc, #16]	; (482c <common_tc_delay+0x5c>)
    481a:	8918      	ldrh	r0, [r3, #8]
    481c:	4b06      	ldr	r3, [pc, #24]	; (4838 <common_tc_delay+0x68>)
    481e:	4798      	blx	r3
    4820:	bd10      	pop	{r4, pc}
    4822:	46c0      	nop			; (mov r8, r8)
    4824:	00003681 	.word	0x00003681
    4828:	200009ec 	.word	0x200009ec
    482c:	2000085c 	.word	0x2000085c
    4830:	00003695 	.word	0x00003695
    4834:	000036a9 	.word	0x000036a9
    4838:	000036e5 	.word	0x000036e5

0000483c <common_tc_init>:
    483c:	b508      	push	{r3, lr}
    483e:	2200      	movs	r2, #0
    4840:	4b03      	ldr	r3, [pc, #12]	; (4850 <common_tc_init+0x14>)
    4842:	701a      	strb	r2, [r3, #0]
    4844:	4b03      	ldr	r3, [pc, #12]	; (4854 <common_tc_init+0x18>)
    4846:	4798      	blx	r3
    4848:	4b03      	ldr	r3, [pc, #12]	; (4858 <common_tc_init+0x1c>)
    484a:	7018      	strb	r0, [r3, #0]
    484c:	bd08      	pop	{r3, pc}
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	2000085c 	.word	0x2000085c
    4854:	000036fd 	.word	0x000036fd
    4858:	200009ec 	.word	0x200009ec

0000485c <tmr_ovf_callback>:
    485c:	b508      	push	{r3, lr}
    485e:	4b0e      	ldr	r3, [pc, #56]	; (4898 <tmr_ovf_callback+0x3c>)
    4860:	685b      	ldr	r3, [r3, #4]
    4862:	2b00      	cmp	r3, #0
    4864:	d007      	beq.n	4876 <tmr_ovf_callback+0x1a>
    4866:	4a0c      	ldr	r2, [pc, #48]	; (4898 <tmr_ovf_callback+0x3c>)
    4868:	6853      	ldr	r3, [r2, #4]
    486a:	3b01      	subs	r3, #1
    486c:	6053      	str	r3, [r2, #4]
    486e:	2b00      	cmp	r3, #0
    4870:	d101      	bne.n	4876 <tmr_ovf_callback+0x1a>
    4872:	4b0a      	ldr	r3, [pc, #40]	; (489c <tmr_ovf_callback+0x40>)
    4874:	4798      	blx	r3
    4876:	4a08      	ldr	r2, [pc, #32]	; (4898 <tmr_ovf_callback+0x3c>)
    4878:	7813      	ldrb	r3, [r2, #0]
    487a:	3301      	adds	r3, #1
    487c:	b2db      	uxtb	r3, r3
    487e:	7013      	strb	r3, [r2, #0]
    4880:	4a07      	ldr	r2, [pc, #28]	; (48a0 <tmr_ovf_callback+0x44>)
    4882:	7812      	ldrb	r2, [r2, #0]
    4884:	429a      	cmp	r2, r3
    4886:	d806      	bhi.n	4896 <tmr_ovf_callback+0x3a>
    4888:	4b03      	ldr	r3, [pc, #12]	; (4898 <tmr_ovf_callback+0x3c>)
    488a:	2200      	movs	r2, #0
    488c:	701a      	strb	r2, [r3, #0]
    488e:	68db      	ldr	r3, [r3, #12]
    4890:	2b00      	cmp	r3, #0
    4892:	d000      	beq.n	4896 <tmr_ovf_callback+0x3a>
    4894:	4798      	blx	r3
    4896:	bd08      	pop	{r3, pc}
    4898:	2000085c 	.word	0x2000085c
    489c:	000036a9 	.word	0x000036a9
    48a0:	200009ec 	.word	0x200009ec

000048a4 <tmr_cca_callback>:
    48a4:	b508      	push	{r3, lr}
    48a6:	4b04      	ldr	r3, [pc, #16]	; (48b8 <tmr_cca_callback+0x14>)
    48a8:	4798      	blx	r3
    48aa:	4b04      	ldr	r3, [pc, #16]	; (48bc <tmr_cca_callback+0x18>)
    48ac:	691b      	ldr	r3, [r3, #16]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d000      	beq.n	48b4 <tmr_cca_callback+0x10>
    48b2:	4798      	blx	r3
    48b4:	bd08      	pop	{r3, pc}
    48b6:	46c0      	nop			; (mov r8, r8)
    48b8:	00003695 	.word	0x00003695
    48bc:	2000085c 	.word	0x2000085c

000048c0 <set_common_tc_expiry_callback>:
    48c0:	4b01      	ldr	r3, [pc, #4]	; (48c8 <set_common_tc_expiry_callback+0x8>)
    48c2:	6118      	str	r0, [r3, #16]
    48c4:	4770      	bx	lr
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	2000085c 	.word	0x2000085c

000048cc <__aeabi_uidiv>:
    48cc:	2900      	cmp	r1, #0
    48ce:	d034      	beq.n	493a <.udivsi3_skip_div0_test+0x6a>

000048d0 <.udivsi3_skip_div0_test>:
    48d0:	2301      	movs	r3, #1
    48d2:	2200      	movs	r2, #0
    48d4:	b410      	push	{r4}
    48d6:	4288      	cmp	r0, r1
    48d8:	d32c      	bcc.n	4934 <.udivsi3_skip_div0_test+0x64>
    48da:	2401      	movs	r4, #1
    48dc:	0724      	lsls	r4, r4, #28
    48de:	42a1      	cmp	r1, r4
    48e0:	d204      	bcs.n	48ec <.udivsi3_skip_div0_test+0x1c>
    48e2:	4281      	cmp	r1, r0
    48e4:	d202      	bcs.n	48ec <.udivsi3_skip_div0_test+0x1c>
    48e6:	0109      	lsls	r1, r1, #4
    48e8:	011b      	lsls	r3, r3, #4
    48ea:	e7f8      	b.n	48de <.udivsi3_skip_div0_test+0xe>
    48ec:	00e4      	lsls	r4, r4, #3
    48ee:	42a1      	cmp	r1, r4
    48f0:	d204      	bcs.n	48fc <.udivsi3_skip_div0_test+0x2c>
    48f2:	4281      	cmp	r1, r0
    48f4:	d202      	bcs.n	48fc <.udivsi3_skip_div0_test+0x2c>
    48f6:	0049      	lsls	r1, r1, #1
    48f8:	005b      	lsls	r3, r3, #1
    48fa:	e7f8      	b.n	48ee <.udivsi3_skip_div0_test+0x1e>
    48fc:	4288      	cmp	r0, r1
    48fe:	d301      	bcc.n	4904 <.udivsi3_skip_div0_test+0x34>
    4900:	1a40      	subs	r0, r0, r1
    4902:	431a      	orrs	r2, r3
    4904:	084c      	lsrs	r4, r1, #1
    4906:	42a0      	cmp	r0, r4
    4908:	d302      	bcc.n	4910 <.udivsi3_skip_div0_test+0x40>
    490a:	1b00      	subs	r0, r0, r4
    490c:	085c      	lsrs	r4, r3, #1
    490e:	4322      	orrs	r2, r4
    4910:	088c      	lsrs	r4, r1, #2
    4912:	42a0      	cmp	r0, r4
    4914:	d302      	bcc.n	491c <.udivsi3_skip_div0_test+0x4c>
    4916:	1b00      	subs	r0, r0, r4
    4918:	089c      	lsrs	r4, r3, #2
    491a:	4322      	orrs	r2, r4
    491c:	08cc      	lsrs	r4, r1, #3
    491e:	42a0      	cmp	r0, r4
    4920:	d302      	bcc.n	4928 <.udivsi3_skip_div0_test+0x58>
    4922:	1b00      	subs	r0, r0, r4
    4924:	08dc      	lsrs	r4, r3, #3
    4926:	4322      	orrs	r2, r4
    4928:	2800      	cmp	r0, #0
    492a:	d003      	beq.n	4934 <.udivsi3_skip_div0_test+0x64>
    492c:	091b      	lsrs	r3, r3, #4
    492e:	d001      	beq.n	4934 <.udivsi3_skip_div0_test+0x64>
    4930:	0909      	lsrs	r1, r1, #4
    4932:	e7e3      	b.n	48fc <.udivsi3_skip_div0_test+0x2c>
    4934:	1c10      	adds	r0, r2, #0
    4936:	bc10      	pop	{r4}
    4938:	4770      	bx	lr
    493a:	2800      	cmp	r0, #0
    493c:	d001      	beq.n	4942 <.udivsi3_skip_div0_test+0x72>
    493e:	2000      	movs	r0, #0
    4940:	43c0      	mvns	r0, r0
    4942:	b407      	push	{r0, r1, r2}
    4944:	4802      	ldr	r0, [pc, #8]	; (4950 <.udivsi3_skip_div0_test+0x80>)
    4946:	a102      	add	r1, pc, #8	; (adr r1, 4950 <.udivsi3_skip_div0_test+0x80>)
    4948:	1840      	adds	r0, r0, r1
    494a:	9002      	str	r0, [sp, #8]
    494c:	bd03      	pop	{r0, r1, pc}
    494e:	46c0      	nop			; (mov r8, r8)
    4950:	00000019 	.word	0x00000019

00004954 <__aeabi_uidivmod>:
    4954:	2900      	cmp	r1, #0
    4956:	d0f0      	beq.n	493a <.udivsi3_skip_div0_test+0x6a>
    4958:	b503      	push	{r0, r1, lr}
    495a:	f7ff ffb9 	bl	48d0 <.udivsi3_skip_div0_test>
    495e:	bc0e      	pop	{r1, r2, r3}
    4960:	4342      	muls	r2, r0
    4962:	1a89      	subs	r1, r1, r2
    4964:	4718      	bx	r3
    4966:	46c0      	nop			; (mov r8, r8)

00004968 <__aeabi_idiv0>:
    4968:	4770      	bx	lr
    496a:	46c0      	nop			; (mov r8, r8)

0000496c <__aeabi_lmul>:
    496c:	469c      	mov	ip, r3
    496e:	0403      	lsls	r3, r0, #16
    4970:	b5f0      	push	{r4, r5, r6, r7, lr}
    4972:	0c1b      	lsrs	r3, r3, #16
    4974:	0417      	lsls	r7, r2, #16
    4976:	0c3f      	lsrs	r7, r7, #16
    4978:	0c15      	lsrs	r5, r2, #16
    497a:	1c1e      	adds	r6, r3, #0
    497c:	1c04      	adds	r4, r0, #0
    497e:	0c00      	lsrs	r0, r0, #16
    4980:	437e      	muls	r6, r7
    4982:	436b      	muls	r3, r5
    4984:	4347      	muls	r7, r0
    4986:	4345      	muls	r5, r0
    4988:	18fb      	adds	r3, r7, r3
    498a:	0c30      	lsrs	r0, r6, #16
    498c:	1818      	adds	r0, r3, r0
    498e:	4287      	cmp	r7, r0
    4990:	d902      	bls.n	4998 <__aeabi_lmul+0x2c>
    4992:	2380      	movs	r3, #128	; 0x80
    4994:	025b      	lsls	r3, r3, #9
    4996:	18ed      	adds	r5, r5, r3
    4998:	0c03      	lsrs	r3, r0, #16
    499a:	18ed      	adds	r5, r5, r3
    499c:	4663      	mov	r3, ip
    499e:	435c      	muls	r4, r3
    49a0:	434a      	muls	r2, r1
    49a2:	0436      	lsls	r6, r6, #16
    49a4:	0c36      	lsrs	r6, r6, #16
    49a6:	18a1      	adds	r1, r4, r2
    49a8:	0400      	lsls	r0, r0, #16
    49aa:	1980      	adds	r0, r0, r6
    49ac:	1949      	adds	r1, r1, r5
    49ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000049b0 <__libc_init_array>:
    49b0:	b570      	push	{r4, r5, r6, lr}
    49b2:	4b0e      	ldr	r3, [pc, #56]	; (49ec <__libc_init_array+0x3c>)
    49b4:	4d0e      	ldr	r5, [pc, #56]	; (49f0 <__libc_init_array+0x40>)
    49b6:	2400      	movs	r4, #0
    49b8:	1aed      	subs	r5, r5, r3
    49ba:	10ad      	asrs	r5, r5, #2
    49bc:	1c1e      	adds	r6, r3, #0
    49be:	42ac      	cmp	r4, r5
    49c0:	d004      	beq.n	49cc <__libc_init_array+0x1c>
    49c2:	00a3      	lsls	r3, r4, #2
    49c4:	58f3      	ldr	r3, [r6, r3]
    49c6:	4798      	blx	r3
    49c8:	3401      	adds	r4, #1
    49ca:	e7f8      	b.n	49be <__libc_init_array+0xe>
    49cc:	f001 f8be 	bl	5b4c <_init>
    49d0:	4b08      	ldr	r3, [pc, #32]	; (49f4 <__libc_init_array+0x44>)
    49d2:	4d09      	ldr	r5, [pc, #36]	; (49f8 <__libc_init_array+0x48>)
    49d4:	2400      	movs	r4, #0
    49d6:	1aed      	subs	r5, r5, r3
    49d8:	10ad      	asrs	r5, r5, #2
    49da:	1c1e      	adds	r6, r3, #0
    49dc:	42ac      	cmp	r4, r5
    49de:	d004      	beq.n	49ea <__libc_init_array+0x3a>
    49e0:	00a3      	lsls	r3, r4, #2
    49e2:	58f3      	ldr	r3, [r6, r3]
    49e4:	4798      	blx	r3
    49e6:	3401      	adds	r4, #1
    49e8:	e7f8      	b.n	49dc <__libc_init_array+0x2c>
    49ea:	bd70      	pop	{r4, r5, r6, pc}
    49ec:	00005b58 	.word	0x00005b58
    49f0:	00005b58 	.word	0x00005b58
    49f4:	00005b58 	.word	0x00005b58
    49f8:	00005b5c 	.word	0x00005b5c

000049fc <memcpy>:
    49fc:	b510      	push	{r4, lr}
    49fe:	2300      	movs	r3, #0
    4a00:	4293      	cmp	r3, r2
    4a02:	d003      	beq.n	4a0c <memcpy+0x10>
    4a04:	5ccc      	ldrb	r4, [r1, r3]
    4a06:	54c4      	strb	r4, [r0, r3]
    4a08:	3301      	adds	r3, #1
    4a0a:	e7f9      	b.n	4a00 <memcpy+0x4>
    4a0c:	bd10      	pop	{r4, pc}

00004a0e <memset>:
    4a0e:	1c03      	adds	r3, r0, #0
    4a10:	1882      	adds	r2, r0, r2
    4a12:	4293      	cmp	r3, r2
    4a14:	d002      	beq.n	4a1c <memset+0xe>
    4a16:	7019      	strb	r1, [r3, #0]
    4a18:	3301      	adds	r3, #1
    4a1a:	e7fa      	b.n	4a12 <memset+0x4>
    4a1c:	4770      	bx	lr
	...

00004a20 <iprintf>:
    4a20:	b40f      	push	{r0, r1, r2, r3}
    4a22:	4b0b      	ldr	r3, [pc, #44]	; (4a50 <iprintf+0x30>)
    4a24:	b513      	push	{r0, r1, r4, lr}
    4a26:	681c      	ldr	r4, [r3, #0]
    4a28:	2c00      	cmp	r4, #0
    4a2a:	d005      	beq.n	4a38 <iprintf+0x18>
    4a2c:	69a3      	ldr	r3, [r4, #24]
    4a2e:	2b00      	cmp	r3, #0
    4a30:	d102      	bne.n	4a38 <iprintf+0x18>
    4a32:	1c20      	adds	r0, r4, #0
    4a34:	f000 fd74 	bl	5520 <__sinit>
    4a38:	ab05      	add	r3, sp, #20
    4a3a:	68a1      	ldr	r1, [r4, #8]
    4a3c:	1c20      	adds	r0, r4, #0
    4a3e:	9a04      	ldr	r2, [sp, #16]
    4a40:	9301      	str	r3, [sp, #4]
    4a42:	f000 f907 	bl	4c54 <_vfiprintf_r>
    4a46:	bc16      	pop	{r1, r2, r4}
    4a48:	bc08      	pop	{r3}
    4a4a:	b004      	add	sp, #16
    4a4c:	4718      	bx	r3
    4a4e:	46c0      	nop			; (mov r8, r8)
    4a50:	2000006c 	.word	0x2000006c
    4a54:	00000000 	.word	0x00000000

00004a58 <rand>:
    4a58:	4b17      	ldr	r3, [pc, #92]	; (4ab8 <rand+0x60>)
    4a5a:	b510      	push	{r4, lr}
    4a5c:	681c      	ldr	r4, [r3, #0]
    4a5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4a60:	2b00      	cmp	r3, #0
    4a62:	d115      	bne.n	4a90 <rand+0x38>
    4a64:	2018      	movs	r0, #24
    4a66:	f000 fe1b 	bl	56a0 <malloc>
    4a6a:	4b14      	ldr	r3, [pc, #80]	; (4abc <rand+0x64>)
    4a6c:	63a0      	str	r0, [r4, #56]	; 0x38
    4a6e:	8003      	strh	r3, [r0, #0]
    4a70:	4b13      	ldr	r3, [pc, #76]	; (4ac0 <rand+0x68>)
    4a72:	8043      	strh	r3, [r0, #2]
    4a74:	4b13      	ldr	r3, [pc, #76]	; (4ac4 <rand+0x6c>)
    4a76:	8083      	strh	r3, [r0, #4]
    4a78:	4b13      	ldr	r3, [pc, #76]	; (4ac8 <rand+0x70>)
    4a7a:	80c3      	strh	r3, [r0, #6]
    4a7c:	4b13      	ldr	r3, [pc, #76]	; (4acc <rand+0x74>)
    4a7e:	8103      	strh	r3, [r0, #8]
    4a80:	2305      	movs	r3, #5
    4a82:	8143      	strh	r3, [r0, #10]
    4a84:	230b      	movs	r3, #11
    4a86:	8183      	strh	r3, [r0, #12]
    4a88:	2201      	movs	r2, #1
    4a8a:	2300      	movs	r3, #0
    4a8c:	6102      	str	r2, [r0, #16]
    4a8e:	6143      	str	r3, [r0, #20]
    4a90:	4b08      	ldr	r3, [pc, #32]	; (4ab4 <rand+0x5c>)
    4a92:	4a07      	ldr	r2, [pc, #28]	; (4ab0 <rand+0x58>)
    4a94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4a96:	6920      	ldr	r0, [r4, #16]
    4a98:	6961      	ldr	r1, [r4, #20]
    4a9a:	f7ff ff67 	bl	496c <__aeabi_lmul>
    4a9e:	2201      	movs	r2, #1
    4aa0:	2300      	movs	r3, #0
    4aa2:	1880      	adds	r0, r0, r2
    4aa4:	4159      	adcs	r1, r3
    4aa6:	6120      	str	r0, [r4, #16]
    4aa8:	6161      	str	r1, [r4, #20]
    4aaa:	0048      	lsls	r0, r1, #1
    4aac:	0840      	lsrs	r0, r0, #1
    4aae:	bd10      	pop	{r4, pc}
    4ab0:	4c957f2d 	.word	0x4c957f2d
    4ab4:	5851f42d 	.word	0x5851f42d
    4ab8:	2000006c 	.word	0x2000006c
    4abc:	0000330e 	.word	0x0000330e
    4ac0:	ffffabcd 	.word	0xffffabcd
    4ac4:	00001234 	.word	0x00001234
    4ac8:	ffffe66d 	.word	0xffffe66d
    4acc:	ffffdeec 	.word	0xffffdeec

00004ad0 <setbuf>:
    4ad0:	b508      	push	{r3, lr}
    4ad2:	424a      	negs	r2, r1
    4ad4:	414a      	adcs	r2, r1
    4ad6:	2380      	movs	r3, #128	; 0x80
    4ad8:	0052      	lsls	r2, r2, #1
    4ada:	00db      	lsls	r3, r3, #3
    4adc:	f000 f802 	bl	4ae4 <setvbuf>
    4ae0:	bd08      	pop	{r3, pc}
	...

00004ae4 <setvbuf>:
    4ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ae6:	1c1e      	adds	r6, r3, #0
    4ae8:	4b3c      	ldr	r3, [pc, #240]	; (4bdc <setvbuf+0xf8>)
    4aea:	1c04      	adds	r4, r0, #0
    4aec:	681d      	ldr	r5, [r3, #0]
    4aee:	1c0f      	adds	r7, r1, #0
    4af0:	9201      	str	r2, [sp, #4]
    4af2:	2d00      	cmp	r5, #0
    4af4:	d005      	beq.n	4b02 <setvbuf+0x1e>
    4af6:	69aa      	ldr	r2, [r5, #24]
    4af8:	2a00      	cmp	r2, #0
    4afa:	d102      	bne.n	4b02 <setvbuf+0x1e>
    4afc:	1c28      	adds	r0, r5, #0
    4afe:	f000 fd0f 	bl	5520 <__sinit>
    4b02:	4b37      	ldr	r3, [pc, #220]	; (4be0 <setvbuf+0xfc>)
    4b04:	429c      	cmp	r4, r3
    4b06:	d101      	bne.n	4b0c <setvbuf+0x28>
    4b08:	686c      	ldr	r4, [r5, #4]
    4b0a:	e008      	b.n	4b1e <setvbuf+0x3a>
    4b0c:	4b35      	ldr	r3, [pc, #212]	; (4be4 <setvbuf+0x100>)
    4b0e:	429c      	cmp	r4, r3
    4b10:	d101      	bne.n	4b16 <setvbuf+0x32>
    4b12:	68ac      	ldr	r4, [r5, #8]
    4b14:	e003      	b.n	4b1e <setvbuf+0x3a>
    4b16:	4b34      	ldr	r3, [pc, #208]	; (4be8 <setvbuf+0x104>)
    4b18:	429c      	cmp	r4, r3
    4b1a:	d100      	bne.n	4b1e <setvbuf+0x3a>
    4b1c:	68ec      	ldr	r4, [r5, #12]
    4b1e:	9b01      	ldr	r3, [sp, #4]
    4b20:	2b02      	cmp	r3, #2
    4b22:	d857      	bhi.n	4bd4 <setvbuf+0xf0>
    4b24:	2e00      	cmp	r6, #0
    4b26:	db55      	blt.n	4bd4 <setvbuf+0xf0>
    4b28:	1c28      	adds	r0, r5, #0
    4b2a:	1c21      	adds	r1, r4, #0
    4b2c:	f000 fc78 	bl	5420 <_fflush_r>
    4b30:	2300      	movs	r3, #0
    4b32:	6063      	str	r3, [r4, #4]
    4b34:	61a3      	str	r3, [r4, #24]
    4b36:	89a3      	ldrh	r3, [r4, #12]
    4b38:	061a      	lsls	r2, r3, #24
    4b3a:	d503      	bpl.n	4b44 <setvbuf+0x60>
    4b3c:	1c28      	adds	r0, r5, #0
    4b3e:	6921      	ldr	r1, [r4, #16]
    4b40:	f000 fdc4 	bl	56cc <_free_r>
    4b44:	89a3      	ldrh	r3, [r4, #12]
    4b46:	2283      	movs	r2, #131	; 0x83
    4b48:	4393      	bics	r3, r2
    4b4a:	81a3      	strh	r3, [r4, #12]
    4b4c:	9b01      	ldr	r3, [sp, #4]
    4b4e:	2b02      	cmp	r3, #2
    4b50:	d013      	beq.n	4b7a <setvbuf+0x96>
    4b52:	2f00      	cmp	r7, #0
    4b54:	d125      	bne.n	4ba2 <setvbuf+0xbe>
    4b56:	2e00      	cmp	r6, #0
    4b58:	d101      	bne.n	4b5e <setvbuf+0x7a>
    4b5a:	2680      	movs	r6, #128	; 0x80
    4b5c:	00f6      	lsls	r6, r6, #3
    4b5e:	1c30      	adds	r0, r6, #0
    4b60:	f000 fd9e 	bl	56a0 <malloc>
    4b64:	1e07      	subs	r7, r0, #0
    4b66:	d118      	bne.n	4b9a <setvbuf+0xb6>
    4b68:	2080      	movs	r0, #128	; 0x80
    4b6a:	00c0      	lsls	r0, r0, #3
    4b6c:	f000 fd98 	bl	56a0 <malloc>
    4b70:	1e07      	subs	r7, r0, #0
    4b72:	d110      	bne.n	4b96 <setvbuf+0xb2>
    4b74:	2001      	movs	r0, #1
    4b76:	4240      	negs	r0, r0
    4b78:	e000      	b.n	4b7c <setvbuf+0x98>
    4b7a:	2000      	movs	r0, #0
    4b7c:	89a3      	ldrh	r3, [r4, #12]
    4b7e:	2202      	movs	r2, #2
    4b80:	4313      	orrs	r3, r2
    4b82:	81a3      	strh	r3, [r4, #12]
    4b84:	2300      	movs	r3, #0
    4b86:	60a3      	str	r3, [r4, #8]
    4b88:	1c23      	adds	r3, r4, #0
    4b8a:	3347      	adds	r3, #71	; 0x47
    4b8c:	6023      	str	r3, [r4, #0]
    4b8e:	6123      	str	r3, [r4, #16]
    4b90:	2301      	movs	r3, #1
    4b92:	6163      	str	r3, [r4, #20]
    4b94:	e020      	b.n	4bd8 <setvbuf+0xf4>
    4b96:	2680      	movs	r6, #128	; 0x80
    4b98:	00f6      	lsls	r6, r6, #3
    4b9a:	89a3      	ldrh	r3, [r4, #12]
    4b9c:	2280      	movs	r2, #128	; 0x80
    4b9e:	4313      	orrs	r3, r2
    4ba0:	81a3      	strh	r3, [r4, #12]
    4ba2:	9a01      	ldr	r2, [sp, #4]
    4ba4:	2a01      	cmp	r2, #1
    4ba6:	d104      	bne.n	4bb2 <setvbuf+0xce>
    4ba8:	89a3      	ldrh	r3, [r4, #12]
    4baa:	4313      	orrs	r3, r2
    4bac:	81a3      	strh	r3, [r4, #12]
    4bae:	4273      	negs	r3, r6
    4bb0:	61a3      	str	r3, [r4, #24]
    4bb2:	4b0e      	ldr	r3, [pc, #56]	; (4bec <setvbuf+0x108>)
    4bb4:	2000      	movs	r0, #0
    4bb6:	62ab      	str	r3, [r5, #40]	; 0x28
    4bb8:	89a3      	ldrh	r3, [r4, #12]
    4bba:	6027      	str	r7, [r4, #0]
    4bbc:	6127      	str	r7, [r4, #16]
    4bbe:	6166      	str	r6, [r4, #20]
    4bc0:	071a      	lsls	r2, r3, #28
    4bc2:	d509      	bpl.n	4bd8 <setvbuf+0xf4>
    4bc4:	2203      	movs	r2, #3
    4bc6:	4013      	ands	r3, r2
    4bc8:	425a      	negs	r2, r3
    4bca:	4153      	adcs	r3, r2
    4bcc:	425b      	negs	r3, r3
    4bce:	401e      	ands	r6, r3
    4bd0:	60a6      	str	r6, [r4, #8]
    4bd2:	e001      	b.n	4bd8 <setvbuf+0xf4>
    4bd4:	2001      	movs	r0, #1
    4bd6:	4240      	negs	r0, r0
    4bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	2000006c 	.word	0x2000006c
    4be0:	00005aec 	.word	0x00005aec
    4be4:	00005b0c 	.word	0x00005b0c
    4be8:	00005b2c 	.word	0x00005b2c
    4bec:	00005479 	.word	0x00005479

00004bf0 <strcmp>:
    4bf0:	7802      	ldrb	r2, [r0, #0]
    4bf2:	780b      	ldrb	r3, [r1, #0]
    4bf4:	3001      	adds	r0, #1
    4bf6:	3101      	adds	r1, #1
    4bf8:	2a00      	cmp	r2, #0
    4bfa:	d001      	beq.n	4c00 <strcmp+0x10>
    4bfc:	429a      	cmp	r2, r3
    4bfe:	d0f7      	beq.n	4bf0 <strcmp>
    4c00:	1ad0      	subs	r0, r2, r3
    4c02:	4770      	bx	lr

00004c04 <__sfputc_r>:
    4c04:	6893      	ldr	r3, [r2, #8]
    4c06:	b510      	push	{r4, lr}
    4c08:	3b01      	subs	r3, #1
    4c0a:	6093      	str	r3, [r2, #8]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	da05      	bge.n	4c1c <__sfputc_r+0x18>
    4c10:	6994      	ldr	r4, [r2, #24]
    4c12:	42a3      	cmp	r3, r4
    4c14:	db08      	blt.n	4c28 <__sfputc_r+0x24>
    4c16:	b2cb      	uxtb	r3, r1
    4c18:	2b0a      	cmp	r3, #10
    4c1a:	d005      	beq.n	4c28 <__sfputc_r+0x24>
    4c1c:	6813      	ldr	r3, [r2, #0]
    4c1e:	1c58      	adds	r0, r3, #1
    4c20:	6010      	str	r0, [r2, #0]
    4c22:	7019      	strb	r1, [r3, #0]
    4c24:	b2c8      	uxtb	r0, r1
    4c26:	e001      	b.n	4c2c <__sfputc_r+0x28>
    4c28:	f000 faa6 	bl	5178 <__swbuf_r>
    4c2c:	bd10      	pop	{r4, pc}

00004c2e <__sfputs_r>:
    4c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c30:	1c06      	adds	r6, r0, #0
    4c32:	1c0f      	adds	r7, r1, #0
    4c34:	1c14      	adds	r4, r2, #0
    4c36:	18d5      	adds	r5, r2, r3
    4c38:	42ac      	cmp	r4, r5
    4c3a:	d008      	beq.n	4c4e <__sfputs_r+0x20>
    4c3c:	7821      	ldrb	r1, [r4, #0]
    4c3e:	1c30      	adds	r0, r6, #0
    4c40:	1c3a      	adds	r2, r7, #0
    4c42:	f7ff ffdf 	bl	4c04 <__sfputc_r>
    4c46:	3401      	adds	r4, #1
    4c48:	1c43      	adds	r3, r0, #1
    4c4a:	d1f5      	bne.n	4c38 <__sfputs_r+0xa>
    4c4c:	e000      	b.n	4c50 <__sfputs_r+0x22>
    4c4e:	2000      	movs	r0, #0
    4c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004c54 <_vfiprintf_r>:
    4c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c56:	b09f      	sub	sp, #124	; 0x7c
    4c58:	1c06      	adds	r6, r0, #0
    4c5a:	1c0f      	adds	r7, r1, #0
    4c5c:	9203      	str	r2, [sp, #12]
    4c5e:	9305      	str	r3, [sp, #20]
    4c60:	2800      	cmp	r0, #0
    4c62:	d004      	beq.n	4c6e <_vfiprintf_r+0x1a>
    4c64:	6981      	ldr	r1, [r0, #24]
    4c66:	2900      	cmp	r1, #0
    4c68:	d101      	bne.n	4c6e <_vfiprintf_r+0x1a>
    4c6a:	f000 fc59 	bl	5520 <__sinit>
    4c6e:	4b75      	ldr	r3, [pc, #468]	; (4e44 <_vfiprintf_r+0x1f0>)
    4c70:	429f      	cmp	r7, r3
    4c72:	d101      	bne.n	4c78 <_vfiprintf_r+0x24>
    4c74:	6877      	ldr	r7, [r6, #4]
    4c76:	e008      	b.n	4c8a <_vfiprintf_r+0x36>
    4c78:	4b73      	ldr	r3, [pc, #460]	; (4e48 <_vfiprintf_r+0x1f4>)
    4c7a:	429f      	cmp	r7, r3
    4c7c:	d101      	bne.n	4c82 <_vfiprintf_r+0x2e>
    4c7e:	68b7      	ldr	r7, [r6, #8]
    4c80:	e003      	b.n	4c8a <_vfiprintf_r+0x36>
    4c82:	4b72      	ldr	r3, [pc, #456]	; (4e4c <_vfiprintf_r+0x1f8>)
    4c84:	429f      	cmp	r7, r3
    4c86:	d100      	bne.n	4c8a <_vfiprintf_r+0x36>
    4c88:	68f7      	ldr	r7, [r6, #12]
    4c8a:	89bb      	ldrh	r3, [r7, #12]
    4c8c:	071a      	lsls	r2, r3, #28
    4c8e:	d50a      	bpl.n	4ca6 <_vfiprintf_r+0x52>
    4c90:	693b      	ldr	r3, [r7, #16]
    4c92:	2b00      	cmp	r3, #0
    4c94:	d007      	beq.n	4ca6 <_vfiprintf_r+0x52>
    4c96:	ad06      	add	r5, sp, #24
    4c98:	2300      	movs	r3, #0
    4c9a:	616b      	str	r3, [r5, #20]
    4c9c:	2320      	movs	r3, #32
    4c9e:	766b      	strb	r3, [r5, #25]
    4ca0:	2330      	movs	r3, #48	; 0x30
    4ca2:	76ab      	strb	r3, [r5, #26]
    4ca4:	e03b      	b.n	4d1e <_vfiprintf_r+0xca>
    4ca6:	1c30      	adds	r0, r6, #0
    4ca8:	1c39      	adds	r1, r7, #0
    4caa:	f000 fabd 	bl	5228 <__swsetup_r>
    4cae:	2800      	cmp	r0, #0
    4cb0:	d0f1      	beq.n	4c96 <_vfiprintf_r+0x42>
    4cb2:	2001      	movs	r0, #1
    4cb4:	4240      	negs	r0, r0
    4cb6:	e0c2      	b.n	4e3e <_vfiprintf_r+0x1ea>
    4cb8:	9a05      	ldr	r2, [sp, #20]
    4cba:	1d11      	adds	r1, r2, #4
    4cbc:	6812      	ldr	r2, [r2, #0]
    4cbe:	9105      	str	r1, [sp, #20]
    4cc0:	2a00      	cmp	r2, #0
    4cc2:	db76      	blt.n	4db2 <_vfiprintf_r+0x15e>
    4cc4:	9209      	str	r2, [sp, #36]	; 0x24
    4cc6:	3401      	adds	r4, #1
    4cc8:	7823      	ldrb	r3, [r4, #0]
    4cca:	2b2e      	cmp	r3, #46	; 0x2e
    4ccc:	d100      	bne.n	4cd0 <_vfiprintf_r+0x7c>
    4cce:	e081      	b.n	4dd4 <_vfiprintf_r+0x180>
    4cd0:	7821      	ldrb	r1, [r4, #0]
    4cd2:	485f      	ldr	r0, [pc, #380]	; (4e50 <_vfiprintf_r+0x1fc>)
    4cd4:	2203      	movs	r2, #3
    4cd6:	f000 fced 	bl	56b4 <memchr>
    4cda:	2800      	cmp	r0, #0
    4cdc:	d007      	beq.n	4cee <_vfiprintf_r+0x9a>
    4cde:	495c      	ldr	r1, [pc, #368]	; (4e50 <_vfiprintf_r+0x1fc>)
    4ce0:	682a      	ldr	r2, [r5, #0]
    4ce2:	1a43      	subs	r3, r0, r1
    4ce4:	2040      	movs	r0, #64	; 0x40
    4ce6:	4098      	lsls	r0, r3
    4ce8:	4310      	orrs	r0, r2
    4cea:	6028      	str	r0, [r5, #0]
    4cec:	3401      	adds	r4, #1
    4cee:	7821      	ldrb	r1, [r4, #0]
    4cf0:	1c63      	adds	r3, r4, #1
    4cf2:	4858      	ldr	r0, [pc, #352]	; (4e54 <_vfiprintf_r+0x200>)
    4cf4:	2206      	movs	r2, #6
    4cf6:	9303      	str	r3, [sp, #12]
    4cf8:	7629      	strb	r1, [r5, #24]
    4cfa:	f000 fcdb 	bl	56b4 <memchr>
    4cfe:	2800      	cmp	r0, #0
    4d00:	d100      	bne.n	4d04 <_vfiprintf_r+0xb0>
    4d02:	e08a      	b.n	4e1a <_vfiprintf_r+0x1c6>
    4d04:	4b54      	ldr	r3, [pc, #336]	; (4e58 <_vfiprintf_r+0x204>)
    4d06:	2b00      	cmp	r3, #0
    4d08:	d17e      	bne.n	4e08 <_vfiprintf_r+0x1b4>
    4d0a:	9b05      	ldr	r3, [sp, #20]
    4d0c:	2207      	movs	r2, #7
    4d0e:	3307      	adds	r3, #7
    4d10:	4393      	bics	r3, r2
    4d12:	3308      	adds	r3, #8
    4d14:	9305      	str	r3, [sp, #20]
    4d16:	696a      	ldr	r2, [r5, #20]
    4d18:	9904      	ldr	r1, [sp, #16]
    4d1a:	1853      	adds	r3, r2, r1
    4d1c:	616b      	str	r3, [r5, #20]
    4d1e:	9c03      	ldr	r4, [sp, #12]
    4d20:	7823      	ldrb	r3, [r4, #0]
    4d22:	2b00      	cmp	r3, #0
    4d24:	d104      	bne.n	4d30 <_vfiprintf_r+0xdc>
    4d26:	9903      	ldr	r1, [sp, #12]
    4d28:	1a61      	subs	r1, r4, r1
    4d2a:	9102      	str	r1, [sp, #8]
    4d2c:	d010      	beq.n	4d50 <_vfiprintf_r+0xfc>
    4d2e:	e003      	b.n	4d38 <_vfiprintf_r+0xe4>
    4d30:	2b25      	cmp	r3, #37	; 0x25
    4d32:	d0f8      	beq.n	4d26 <_vfiprintf_r+0xd2>
    4d34:	3401      	adds	r4, #1
    4d36:	e7f3      	b.n	4d20 <_vfiprintf_r+0xcc>
    4d38:	1c30      	adds	r0, r6, #0
    4d3a:	1c39      	adds	r1, r7, #0
    4d3c:	9a03      	ldr	r2, [sp, #12]
    4d3e:	9b02      	ldr	r3, [sp, #8]
    4d40:	f7ff ff75 	bl	4c2e <__sfputs_r>
    4d44:	3001      	adds	r0, #1
    4d46:	d075      	beq.n	4e34 <_vfiprintf_r+0x1e0>
    4d48:	696a      	ldr	r2, [r5, #20]
    4d4a:	9902      	ldr	r1, [sp, #8]
    4d4c:	1853      	adds	r3, r2, r1
    4d4e:	616b      	str	r3, [r5, #20]
    4d50:	7823      	ldrb	r3, [r4, #0]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d06e      	beq.n	4e34 <_vfiprintf_r+0x1e0>
    4d56:	2201      	movs	r2, #1
    4d58:	4252      	negs	r2, r2
    4d5a:	606a      	str	r2, [r5, #4]
    4d5c:	466a      	mov	r2, sp
    4d5e:	2300      	movs	r3, #0
    4d60:	325b      	adds	r2, #91	; 0x5b
    4d62:	3401      	adds	r4, #1
    4d64:	602b      	str	r3, [r5, #0]
    4d66:	60eb      	str	r3, [r5, #12]
    4d68:	60ab      	str	r3, [r5, #8]
    4d6a:	7013      	strb	r3, [r2, #0]
    4d6c:	65ab      	str	r3, [r5, #88]	; 0x58
    4d6e:	7821      	ldrb	r1, [r4, #0]
    4d70:	483a      	ldr	r0, [pc, #232]	; (4e5c <_vfiprintf_r+0x208>)
    4d72:	2205      	movs	r2, #5
    4d74:	f000 fc9e 	bl	56b4 <memchr>
    4d78:	2800      	cmp	r0, #0
    4d7a:	d008      	beq.n	4d8e <_vfiprintf_r+0x13a>
    4d7c:	4a37      	ldr	r2, [pc, #220]	; (4e5c <_vfiprintf_r+0x208>)
    4d7e:	3401      	adds	r4, #1
    4d80:	1a83      	subs	r3, r0, r2
    4d82:	2001      	movs	r0, #1
    4d84:	4098      	lsls	r0, r3
    4d86:	682b      	ldr	r3, [r5, #0]
    4d88:	4318      	orrs	r0, r3
    4d8a:	6028      	str	r0, [r5, #0]
    4d8c:	e7ef      	b.n	4d6e <_vfiprintf_r+0x11a>
    4d8e:	682b      	ldr	r3, [r5, #0]
    4d90:	06d9      	lsls	r1, r3, #27
    4d92:	d503      	bpl.n	4d9c <_vfiprintf_r+0x148>
    4d94:	466a      	mov	r2, sp
    4d96:	2120      	movs	r1, #32
    4d98:	325b      	adds	r2, #91	; 0x5b
    4d9a:	7011      	strb	r1, [r2, #0]
    4d9c:	071a      	lsls	r2, r3, #28
    4d9e:	d503      	bpl.n	4da8 <_vfiprintf_r+0x154>
    4da0:	466a      	mov	r2, sp
    4da2:	212b      	movs	r1, #43	; 0x2b
    4da4:	325b      	adds	r2, #91	; 0x5b
    4da6:	7011      	strb	r1, [r2, #0]
    4da8:	7822      	ldrb	r2, [r4, #0]
    4daa:	2a2a      	cmp	r2, #42	; 0x2a
    4dac:	d084      	beq.n	4cb8 <_vfiprintf_r+0x64>
    4dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4db0:	e005      	b.n	4dbe <_vfiprintf_r+0x16a>
    4db2:	4252      	negs	r2, r2
    4db4:	60ea      	str	r2, [r5, #12]
    4db6:	2202      	movs	r2, #2
    4db8:	4313      	orrs	r3, r2
    4dba:	602b      	str	r3, [r5, #0]
    4dbc:	e783      	b.n	4cc6 <_vfiprintf_r+0x72>
    4dbe:	7822      	ldrb	r2, [r4, #0]
    4dc0:	3a30      	subs	r2, #48	; 0x30
    4dc2:	2a09      	cmp	r2, #9
    4dc4:	d804      	bhi.n	4dd0 <_vfiprintf_r+0x17c>
    4dc6:	210a      	movs	r1, #10
    4dc8:	434b      	muls	r3, r1
    4dca:	3401      	adds	r4, #1
    4dcc:	189b      	adds	r3, r3, r2
    4dce:	e7f6      	b.n	4dbe <_vfiprintf_r+0x16a>
    4dd0:	9309      	str	r3, [sp, #36]	; 0x24
    4dd2:	e779      	b.n	4cc8 <_vfiprintf_r+0x74>
    4dd4:	7863      	ldrb	r3, [r4, #1]
    4dd6:	2b2a      	cmp	r3, #42	; 0x2a
    4dd8:	d109      	bne.n	4dee <_vfiprintf_r+0x19a>
    4dda:	9b05      	ldr	r3, [sp, #20]
    4ddc:	3402      	adds	r4, #2
    4dde:	1d1a      	adds	r2, r3, #4
    4de0:	681b      	ldr	r3, [r3, #0]
    4de2:	9205      	str	r2, [sp, #20]
    4de4:	2b00      	cmp	r3, #0
    4de6:	da0d      	bge.n	4e04 <_vfiprintf_r+0x1b0>
    4de8:	2301      	movs	r3, #1
    4dea:	425b      	negs	r3, r3
    4dec:	e00a      	b.n	4e04 <_vfiprintf_r+0x1b0>
    4dee:	3401      	adds	r4, #1
    4df0:	2300      	movs	r3, #0
    4df2:	7822      	ldrb	r2, [r4, #0]
    4df4:	3a30      	subs	r2, #48	; 0x30
    4df6:	2a09      	cmp	r2, #9
    4df8:	d804      	bhi.n	4e04 <_vfiprintf_r+0x1b0>
    4dfa:	210a      	movs	r1, #10
    4dfc:	434b      	muls	r3, r1
    4dfe:	3401      	adds	r4, #1
    4e00:	189b      	adds	r3, r3, r2
    4e02:	e7f6      	b.n	4df2 <_vfiprintf_r+0x19e>
    4e04:	9307      	str	r3, [sp, #28]
    4e06:	e763      	b.n	4cd0 <_vfiprintf_r+0x7c>
    4e08:	ab05      	add	r3, sp, #20
    4e0a:	9300      	str	r3, [sp, #0]
    4e0c:	1c30      	adds	r0, r6, #0
    4e0e:	1c29      	adds	r1, r5, #0
    4e10:	1c3a      	adds	r2, r7, #0
    4e12:	4b13      	ldr	r3, [pc, #76]	; (4e60 <_vfiprintf_r+0x20c>)
    4e14:	e000      	b.n	4e18 <_vfiprintf_r+0x1c4>
    4e16:	bf00      	nop
    4e18:	e007      	b.n	4e2a <_vfiprintf_r+0x1d6>
    4e1a:	ab05      	add	r3, sp, #20
    4e1c:	9300      	str	r3, [sp, #0]
    4e1e:	1c30      	adds	r0, r6, #0
    4e20:	1c29      	adds	r1, r5, #0
    4e22:	1c3a      	adds	r2, r7, #0
    4e24:	4b0e      	ldr	r3, [pc, #56]	; (4e60 <_vfiprintf_r+0x20c>)
    4e26:	f000 f891 	bl	4f4c <_printf_i>
    4e2a:	9004      	str	r0, [sp, #16]
    4e2c:	9904      	ldr	r1, [sp, #16]
    4e2e:	3101      	adds	r1, #1
    4e30:	d000      	beq.n	4e34 <_vfiprintf_r+0x1e0>
    4e32:	e770      	b.n	4d16 <_vfiprintf_r+0xc2>
    4e34:	89bb      	ldrh	r3, [r7, #12]
    4e36:	065a      	lsls	r2, r3, #25
    4e38:	d500      	bpl.n	4e3c <_vfiprintf_r+0x1e8>
    4e3a:	e73a      	b.n	4cb2 <_vfiprintf_r+0x5e>
    4e3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4e3e:	b01f      	add	sp, #124	; 0x7c
    4e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e42:	46c0      	nop			; (mov r8, r8)
    4e44:	00005aec 	.word	0x00005aec
    4e48:	00005b0c 	.word	0x00005b0c
    4e4c:	00005b2c 	.word	0x00005b2c
    4e50:	00005abe 	.word	0x00005abe
    4e54:	00005ac2 	.word	0x00005ac2
    4e58:	00000000 	.word	0x00000000
    4e5c:	00005ab8 	.word	0x00005ab8
    4e60:	00004c2f 	.word	0x00004c2f

00004e64 <_printf_common>:
    4e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e66:	1c15      	adds	r5, r2, #0
    4e68:	9301      	str	r3, [sp, #4]
    4e6a:	690a      	ldr	r2, [r1, #16]
    4e6c:	688b      	ldr	r3, [r1, #8]
    4e6e:	1c06      	adds	r6, r0, #0
    4e70:	1c0c      	adds	r4, r1, #0
    4e72:	4293      	cmp	r3, r2
    4e74:	da00      	bge.n	4e78 <_printf_common+0x14>
    4e76:	1c13      	adds	r3, r2, #0
    4e78:	1c22      	adds	r2, r4, #0
    4e7a:	602b      	str	r3, [r5, #0]
    4e7c:	3243      	adds	r2, #67	; 0x43
    4e7e:	7812      	ldrb	r2, [r2, #0]
    4e80:	2a00      	cmp	r2, #0
    4e82:	d001      	beq.n	4e88 <_printf_common+0x24>
    4e84:	3301      	adds	r3, #1
    4e86:	602b      	str	r3, [r5, #0]
    4e88:	6820      	ldr	r0, [r4, #0]
    4e8a:	0680      	lsls	r0, r0, #26
    4e8c:	d502      	bpl.n	4e94 <_printf_common+0x30>
    4e8e:	682b      	ldr	r3, [r5, #0]
    4e90:	3302      	adds	r3, #2
    4e92:	602b      	str	r3, [r5, #0]
    4e94:	6821      	ldr	r1, [r4, #0]
    4e96:	2706      	movs	r7, #6
    4e98:	400f      	ands	r7, r1
    4e9a:	d01f      	beq.n	4edc <_printf_common+0x78>
    4e9c:	1c23      	adds	r3, r4, #0
    4e9e:	3343      	adds	r3, #67	; 0x43
    4ea0:	781b      	ldrb	r3, [r3, #0]
    4ea2:	1e5a      	subs	r2, r3, #1
    4ea4:	4193      	sbcs	r3, r2
    4ea6:	6822      	ldr	r2, [r4, #0]
    4ea8:	0692      	lsls	r2, r2, #26
    4eaa:	d51f      	bpl.n	4eec <_printf_common+0x88>
    4eac:	18e1      	adds	r1, r4, r3
    4eae:	3140      	adds	r1, #64	; 0x40
    4eb0:	2030      	movs	r0, #48	; 0x30
    4eb2:	70c8      	strb	r0, [r1, #3]
    4eb4:	1c21      	adds	r1, r4, #0
    4eb6:	1c5a      	adds	r2, r3, #1
    4eb8:	3145      	adds	r1, #69	; 0x45
    4eba:	7809      	ldrb	r1, [r1, #0]
    4ebc:	18a2      	adds	r2, r4, r2
    4ebe:	3240      	adds	r2, #64	; 0x40
    4ec0:	3302      	adds	r3, #2
    4ec2:	70d1      	strb	r1, [r2, #3]
    4ec4:	e012      	b.n	4eec <_printf_common+0x88>
    4ec6:	1c22      	adds	r2, r4, #0
    4ec8:	1c30      	adds	r0, r6, #0
    4eca:	9901      	ldr	r1, [sp, #4]
    4ecc:	3219      	adds	r2, #25
    4ece:	2301      	movs	r3, #1
    4ed0:	9f08      	ldr	r7, [sp, #32]
    4ed2:	47b8      	blx	r7
    4ed4:	3001      	adds	r0, #1
    4ed6:	d011      	beq.n	4efc <_printf_common+0x98>
    4ed8:	9f00      	ldr	r7, [sp, #0]
    4eda:	3701      	adds	r7, #1
    4edc:	9700      	str	r7, [sp, #0]
    4ede:	68e0      	ldr	r0, [r4, #12]
    4ee0:	6829      	ldr	r1, [r5, #0]
    4ee2:	9f00      	ldr	r7, [sp, #0]
    4ee4:	1a43      	subs	r3, r0, r1
    4ee6:	429f      	cmp	r7, r3
    4ee8:	dbed      	blt.n	4ec6 <_printf_common+0x62>
    4eea:	e7d7      	b.n	4e9c <_printf_common+0x38>
    4eec:	1c22      	adds	r2, r4, #0
    4eee:	1c30      	adds	r0, r6, #0
    4ef0:	9901      	ldr	r1, [sp, #4]
    4ef2:	3243      	adds	r2, #67	; 0x43
    4ef4:	9f08      	ldr	r7, [sp, #32]
    4ef6:	47b8      	blx	r7
    4ef8:	3001      	adds	r0, #1
    4efa:	d102      	bne.n	4f02 <_printf_common+0x9e>
    4efc:	2001      	movs	r0, #1
    4efe:	4240      	negs	r0, r0
    4f00:	e023      	b.n	4f4a <_printf_common+0xe6>
    4f02:	6820      	ldr	r0, [r4, #0]
    4f04:	2106      	movs	r1, #6
    4f06:	682b      	ldr	r3, [r5, #0]
    4f08:	68e2      	ldr	r2, [r4, #12]
    4f0a:	4001      	ands	r1, r0
    4f0c:	2500      	movs	r5, #0
    4f0e:	2904      	cmp	r1, #4
    4f10:	d103      	bne.n	4f1a <_printf_common+0xb6>
    4f12:	1ad5      	subs	r5, r2, r3
    4f14:	43eb      	mvns	r3, r5
    4f16:	17db      	asrs	r3, r3, #31
    4f18:	401d      	ands	r5, r3
    4f1a:	68a2      	ldr	r2, [r4, #8]
    4f1c:	6923      	ldr	r3, [r4, #16]
    4f1e:	429a      	cmp	r2, r3
    4f20:	dd01      	ble.n	4f26 <_printf_common+0xc2>
    4f22:	1ad3      	subs	r3, r2, r3
    4f24:	18ed      	adds	r5, r5, r3
    4f26:	2700      	movs	r7, #0
    4f28:	9700      	str	r7, [sp, #0]
    4f2a:	9f00      	ldr	r7, [sp, #0]
    4f2c:	42af      	cmp	r7, r5
    4f2e:	da0b      	bge.n	4f48 <_printf_common+0xe4>
    4f30:	1c22      	adds	r2, r4, #0
    4f32:	1c30      	adds	r0, r6, #0
    4f34:	9901      	ldr	r1, [sp, #4]
    4f36:	321a      	adds	r2, #26
    4f38:	2301      	movs	r3, #1
    4f3a:	9f08      	ldr	r7, [sp, #32]
    4f3c:	47b8      	blx	r7
    4f3e:	3001      	adds	r0, #1
    4f40:	d0dc      	beq.n	4efc <_printf_common+0x98>
    4f42:	9f00      	ldr	r7, [sp, #0]
    4f44:	3701      	adds	r7, #1
    4f46:	e7ef      	b.n	4f28 <_printf_common+0xc4>
    4f48:	2000      	movs	r0, #0
    4f4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004f4c <_printf_i>:
    4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f4e:	1c0d      	adds	r5, r1, #0
    4f50:	b08b      	sub	sp, #44	; 0x2c
    4f52:	3543      	adds	r5, #67	; 0x43
    4f54:	9206      	str	r2, [sp, #24]
    4f56:	9005      	str	r0, [sp, #20]
    4f58:	9307      	str	r3, [sp, #28]
    4f5a:	9504      	str	r5, [sp, #16]
    4f5c:	7e0b      	ldrb	r3, [r1, #24]
    4f5e:	1c0c      	adds	r4, r1, #0
    4f60:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4f62:	2b6e      	cmp	r3, #110	; 0x6e
    4f64:	d100      	bne.n	4f68 <_printf_i+0x1c>
    4f66:	e0a7      	b.n	50b8 <_printf_i+0x16c>
    4f68:	d811      	bhi.n	4f8e <_printf_i+0x42>
    4f6a:	2b63      	cmp	r3, #99	; 0x63
    4f6c:	d022      	beq.n	4fb4 <_printf_i+0x68>
    4f6e:	d809      	bhi.n	4f84 <_printf_i+0x38>
    4f70:	2b00      	cmp	r3, #0
    4f72:	d100      	bne.n	4f76 <_printf_i+0x2a>
    4f74:	e0b0      	b.n	50d8 <_printf_i+0x18c>
    4f76:	2b58      	cmp	r3, #88	; 0x58
    4f78:	d000      	beq.n	4f7c <_printf_i+0x30>
    4f7a:	e0c0      	b.n	50fe <_printf_i+0x1b2>
    4f7c:	3145      	adds	r1, #69	; 0x45
    4f7e:	700b      	strb	r3, [r1, #0]
    4f80:	4d7b      	ldr	r5, [pc, #492]	; (5170 <_printf_i+0x224>)
    4f82:	e04e      	b.n	5022 <_printf_i+0xd6>
    4f84:	2b64      	cmp	r3, #100	; 0x64
    4f86:	d01c      	beq.n	4fc2 <_printf_i+0x76>
    4f88:	2b69      	cmp	r3, #105	; 0x69
    4f8a:	d01a      	beq.n	4fc2 <_printf_i+0x76>
    4f8c:	e0b7      	b.n	50fe <_printf_i+0x1b2>
    4f8e:	2b73      	cmp	r3, #115	; 0x73
    4f90:	d100      	bne.n	4f94 <_printf_i+0x48>
    4f92:	e0a5      	b.n	50e0 <_printf_i+0x194>
    4f94:	d809      	bhi.n	4faa <_printf_i+0x5e>
    4f96:	2b6f      	cmp	r3, #111	; 0x6f
    4f98:	d029      	beq.n	4fee <_printf_i+0xa2>
    4f9a:	2b70      	cmp	r3, #112	; 0x70
    4f9c:	d000      	beq.n	4fa0 <_printf_i+0x54>
    4f9e:	e0ae      	b.n	50fe <_printf_i+0x1b2>
    4fa0:	680e      	ldr	r6, [r1, #0]
    4fa2:	2320      	movs	r3, #32
    4fa4:	4333      	orrs	r3, r6
    4fa6:	600b      	str	r3, [r1, #0]
    4fa8:	e036      	b.n	5018 <_printf_i+0xcc>
    4faa:	2b75      	cmp	r3, #117	; 0x75
    4fac:	d01f      	beq.n	4fee <_printf_i+0xa2>
    4fae:	2b78      	cmp	r3, #120	; 0x78
    4fb0:	d032      	beq.n	5018 <_printf_i+0xcc>
    4fb2:	e0a4      	b.n	50fe <_printf_i+0x1b2>
    4fb4:	6813      	ldr	r3, [r2, #0]
    4fb6:	1c0d      	adds	r5, r1, #0
    4fb8:	1d19      	adds	r1, r3, #4
    4fba:	3542      	adds	r5, #66	; 0x42
    4fbc:	6011      	str	r1, [r2, #0]
    4fbe:	681b      	ldr	r3, [r3, #0]
    4fc0:	e09f      	b.n	5102 <_printf_i+0x1b6>
    4fc2:	6821      	ldr	r1, [r4, #0]
    4fc4:	6813      	ldr	r3, [r2, #0]
    4fc6:	060e      	lsls	r6, r1, #24
    4fc8:	d503      	bpl.n	4fd2 <_printf_i+0x86>
    4fca:	1d19      	adds	r1, r3, #4
    4fcc:	6011      	str	r1, [r2, #0]
    4fce:	681e      	ldr	r6, [r3, #0]
    4fd0:	e005      	b.n	4fde <_printf_i+0x92>
    4fd2:	0648      	lsls	r0, r1, #25
    4fd4:	d5f9      	bpl.n	4fca <_printf_i+0x7e>
    4fd6:	1d19      	adds	r1, r3, #4
    4fd8:	6011      	str	r1, [r2, #0]
    4fda:	2100      	movs	r1, #0
    4fdc:	5e5e      	ldrsh	r6, [r3, r1]
    4fde:	4b64      	ldr	r3, [pc, #400]	; (5170 <_printf_i+0x224>)
    4fe0:	2e00      	cmp	r6, #0
    4fe2:	da3b      	bge.n	505c <_printf_i+0x110>
    4fe4:	9d04      	ldr	r5, [sp, #16]
    4fe6:	222d      	movs	r2, #45	; 0x2d
    4fe8:	4276      	negs	r6, r6
    4fea:	702a      	strb	r2, [r5, #0]
    4fec:	e036      	b.n	505c <_printf_i+0x110>
    4fee:	6821      	ldr	r1, [r4, #0]
    4ff0:	6813      	ldr	r3, [r2, #0]
    4ff2:	060e      	lsls	r6, r1, #24
    4ff4:	d503      	bpl.n	4ffe <_printf_i+0xb2>
    4ff6:	1d19      	adds	r1, r3, #4
    4ff8:	6011      	str	r1, [r2, #0]
    4ffa:	681e      	ldr	r6, [r3, #0]
    4ffc:	e004      	b.n	5008 <_printf_i+0xbc>
    4ffe:	0648      	lsls	r0, r1, #25
    5000:	d5f9      	bpl.n	4ff6 <_printf_i+0xaa>
    5002:	1d19      	adds	r1, r3, #4
    5004:	881e      	ldrh	r6, [r3, #0]
    5006:	6011      	str	r1, [r2, #0]
    5008:	4b59      	ldr	r3, [pc, #356]	; (5170 <_printf_i+0x224>)
    500a:	7e22      	ldrb	r2, [r4, #24]
    500c:	9303      	str	r3, [sp, #12]
    500e:	2708      	movs	r7, #8
    5010:	2a6f      	cmp	r2, #111	; 0x6f
    5012:	d01e      	beq.n	5052 <_printf_i+0x106>
    5014:	270a      	movs	r7, #10
    5016:	e01c      	b.n	5052 <_printf_i+0x106>
    5018:	1c23      	adds	r3, r4, #0
    501a:	2178      	movs	r1, #120	; 0x78
    501c:	3345      	adds	r3, #69	; 0x45
    501e:	4d55      	ldr	r5, [pc, #340]	; (5174 <_printf_i+0x228>)
    5020:	7019      	strb	r1, [r3, #0]
    5022:	6811      	ldr	r1, [r2, #0]
    5024:	6823      	ldr	r3, [r4, #0]
    5026:	1d08      	adds	r0, r1, #4
    5028:	9503      	str	r5, [sp, #12]
    502a:	6010      	str	r0, [r2, #0]
    502c:	061e      	lsls	r6, r3, #24
    502e:	d501      	bpl.n	5034 <_printf_i+0xe8>
    5030:	680e      	ldr	r6, [r1, #0]
    5032:	e002      	b.n	503a <_printf_i+0xee>
    5034:	0658      	lsls	r0, r3, #25
    5036:	d5fb      	bpl.n	5030 <_printf_i+0xe4>
    5038:	880e      	ldrh	r6, [r1, #0]
    503a:	07d9      	lsls	r1, r3, #31
    503c:	d502      	bpl.n	5044 <_printf_i+0xf8>
    503e:	2220      	movs	r2, #32
    5040:	4313      	orrs	r3, r2
    5042:	6023      	str	r3, [r4, #0]
    5044:	2710      	movs	r7, #16
    5046:	2e00      	cmp	r6, #0
    5048:	d103      	bne.n	5052 <_printf_i+0x106>
    504a:	6822      	ldr	r2, [r4, #0]
    504c:	2320      	movs	r3, #32
    504e:	439a      	bics	r2, r3
    5050:	6022      	str	r2, [r4, #0]
    5052:	1c23      	adds	r3, r4, #0
    5054:	2200      	movs	r2, #0
    5056:	3343      	adds	r3, #67	; 0x43
    5058:	701a      	strb	r2, [r3, #0]
    505a:	e001      	b.n	5060 <_printf_i+0x114>
    505c:	9303      	str	r3, [sp, #12]
    505e:	270a      	movs	r7, #10
    5060:	6863      	ldr	r3, [r4, #4]
    5062:	60a3      	str	r3, [r4, #8]
    5064:	2b00      	cmp	r3, #0
    5066:	db03      	blt.n	5070 <_printf_i+0x124>
    5068:	6825      	ldr	r5, [r4, #0]
    506a:	2204      	movs	r2, #4
    506c:	4395      	bics	r5, r2
    506e:	6025      	str	r5, [r4, #0]
    5070:	2e00      	cmp	r6, #0
    5072:	d102      	bne.n	507a <_printf_i+0x12e>
    5074:	9d04      	ldr	r5, [sp, #16]
    5076:	2b00      	cmp	r3, #0
    5078:	d00e      	beq.n	5098 <_printf_i+0x14c>
    507a:	9d04      	ldr	r5, [sp, #16]
    507c:	1c30      	adds	r0, r6, #0
    507e:	1c39      	adds	r1, r7, #0
    5080:	f7ff fc68 	bl	4954 <__aeabi_uidivmod>
    5084:	9803      	ldr	r0, [sp, #12]
    5086:	3d01      	subs	r5, #1
    5088:	5c43      	ldrb	r3, [r0, r1]
    508a:	1c30      	adds	r0, r6, #0
    508c:	702b      	strb	r3, [r5, #0]
    508e:	1c39      	adds	r1, r7, #0
    5090:	f7ff fc1c 	bl	48cc <__aeabi_uidiv>
    5094:	1e06      	subs	r6, r0, #0
    5096:	d1f1      	bne.n	507c <_printf_i+0x130>
    5098:	2f08      	cmp	r7, #8
    509a:	d109      	bne.n	50b0 <_printf_i+0x164>
    509c:	6821      	ldr	r1, [r4, #0]
    509e:	07c9      	lsls	r1, r1, #31
    50a0:	d506      	bpl.n	50b0 <_printf_i+0x164>
    50a2:	6862      	ldr	r2, [r4, #4]
    50a4:	6923      	ldr	r3, [r4, #16]
    50a6:	429a      	cmp	r2, r3
    50a8:	dc02      	bgt.n	50b0 <_printf_i+0x164>
    50aa:	3d01      	subs	r5, #1
    50ac:	2330      	movs	r3, #48	; 0x30
    50ae:	702b      	strb	r3, [r5, #0]
    50b0:	9e04      	ldr	r6, [sp, #16]
    50b2:	1b73      	subs	r3, r6, r5
    50b4:	6123      	str	r3, [r4, #16]
    50b6:	e02a      	b.n	510e <_printf_i+0x1c2>
    50b8:	6808      	ldr	r0, [r1, #0]
    50ba:	6813      	ldr	r3, [r2, #0]
    50bc:	6949      	ldr	r1, [r1, #20]
    50be:	0605      	lsls	r5, r0, #24
    50c0:	d504      	bpl.n	50cc <_printf_i+0x180>
    50c2:	1d18      	adds	r0, r3, #4
    50c4:	6010      	str	r0, [r2, #0]
    50c6:	681b      	ldr	r3, [r3, #0]
    50c8:	6019      	str	r1, [r3, #0]
    50ca:	e005      	b.n	50d8 <_printf_i+0x18c>
    50cc:	0646      	lsls	r6, r0, #25
    50ce:	d5f8      	bpl.n	50c2 <_printf_i+0x176>
    50d0:	1d18      	adds	r0, r3, #4
    50d2:	6010      	str	r0, [r2, #0]
    50d4:	681b      	ldr	r3, [r3, #0]
    50d6:	8019      	strh	r1, [r3, #0]
    50d8:	2300      	movs	r3, #0
    50da:	6123      	str	r3, [r4, #16]
    50dc:	9d04      	ldr	r5, [sp, #16]
    50de:	e016      	b.n	510e <_printf_i+0x1c2>
    50e0:	6813      	ldr	r3, [r2, #0]
    50e2:	1d19      	adds	r1, r3, #4
    50e4:	6011      	str	r1, [r2, #0]
    50e6:	681d      	ldr	r5, [r3, #0]
    50e8:	1c28      	adds	r0, r5, #0
    50ea:	f000 fbe9 	bl	58c0 <strlen>
    50ee:	6863      	ldr	r3, [r4, #4]
    50f0:	6120      	str	r0, [r4, #16]
    50f2:	4298      	cmp	r0, r3
    50f4:	d900      	bls.n	50f8 <_printf_i+0x1ac>
    50f6:	6123      	str	r3, [r4, #16]
    50f8:	6920      	ldr	r0, [r4, #16]
    50fa:	6060      	str	r0, [r4, #4]
    50fc:	e004      	b.n	5108 <_printf_i+0x1bc>
    50fe:	1c25      	adds	r5, r4, #0
    5100:	3542      	adds	r5, #66	; 0x42
    5102:	702b      	strb	r3, [r5, #0]
    5104:	2301      	movs	r3, #1
    5106:	6123      	str	r3, [r4, #16]
    5108:	9e04      	ldr	r6, [sp, #16]
    510a:	2300      	movs	r3, #0
    510c:	7033      	strb	r3, [r6, #0]
    510e:	9e07      	ldr	r6, [sp, #28]
    5110:	9805      	ldr	r0, [sp, #20]
    5112:	9600      	str	r6, [sp, #0]
    5114:	1c21      	adds	r1, r4, #0
    5116:	aa09      	add	r2, sp, #36	; 0x24
    5118:	9b06      	ldr	r3, [sp, #24]
    511a:	f7ff fea3 	bl	4e64 <_printf_common>
    511e:	3001      	adds	r0, #1
    5120:	d102      	bne.n	5128 <_printf_i+0x1dc>
    5122:	2001      	movs	r0, #1
    5124:	4240      	negs	r0, r0
    5126:	e021      	b.n	516c <_printf_i+0x220>
    5128:	1c2a      	adds	r2, r5, #0
    512a:	9805      	ldr	r0, [sp, #20]
    512c:	9906      	ldr	r1, [sp, #24]
    512e:	6923      	ldr	r3, [r4, #16]
    5130:	9d07      	ldr	r5, [sp, #28]
    5132:	47a8      	blx	r5
    5134:	3001      	adds	r0, #1
    5136:	d0f4      	beq.n	5122 <_printf_i+0x1d6>
    5138:	6826      	ldr	r6, [r4, #0]
    513a:	07b6      	lsls	r6, r6, #30
    513c:	d405      	bmi.n	514a <_printf_i+0x1fe>
    513e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5140:	68e0      	ldr	r0, [r4, #12]
    5142:	4298      	cmp	r0, r3
    5144:	da12      	bge.n	516c <_printf_i+0x220>
    5146:	1c18      	adds	r0, r3, #0
    5148:	e010      	b.n	516c <_printf_i+0x220>
    514a:	2500      	movs	r5, #0
    514c:	68e0      	ldr	r0, [r4, #12]
    514e:	9909      	ldr	r1, [sp, #36]	; 0x24
    5150:	1a43      	subs	r3, r0, r1
    5152:	429d      	cmp	r5, r3
    5154:	daf3      	bge.n	513e <_printf_i+0x1f2>
    5156:	1c22      	adds	r2, r4, #0
    5158:	9805      	ldr	r0, [sp, #20]
    515a:	9906      	ldr	r1, [sp, #24]
    515c:	3219      	adds	r2, #25
    515e:	2301      	movs	r3, #1
    5160:	9e07      	ldr	r6, [sp, #28]
    5162:	47b0      	blx	r6
    5164:	3001      	adds	r0, #1
    5166:	d0dc      	beq.n	5122 <_printf_i+0x1d6>
    5168:	3501      	adds	r5, #1
    516a:	e7ef      	b.n	514c <_printf_i+0x200>
    516c:	b00b      	add	sp, #44	; 0x2c
    516e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5170:	00005ac9 	.word	0x00005ac9
    5174:	00005ada 	.word	0x00005ada

00005178 <__swbuf_r>:
    5178:	b570      	push	{r4, r5, r6, lr}
    517a:	1c05      	adds	r5, r0, #0
    517c:	1c0e      	adds	r6, r1, #0
    517e:	1c14      	adds	r4, r2, #0
    5180:	2800      	cmp	r0, #0
    5182:	d004      	beq.n	518e <__swbuf_r+0x16>
    5184:	6982      	ldr	r2, [r0, #24]
    5186:	2a00      	cmp	r2, #0
    5188:	d101      	bne.n	518e <__swbuf_r+0x16>
    518a:	f000 f9c9 	bl	5520 <__sinit>
    518e:	4b23      	ldr	r3, [pc, #140]	; (521c <__swbuf_r+0xa4>)
    5190:	429c      	cmp	r4, r3
    5192:	d101      	bne.n	5198 <__swbuf_r+0x20>
    5194:	686c      	ldr	r4, [r5, #4]
    5196:	e008      	b.n	51aa <__swbuf_r+0x32>
    5198:	4b21      	ldr	r3, [pc, #132]	; (5220 <__swbuf_r+0xa8>)
    519a:	429c      	cmp	r4, r3
    519c:	d101      	bne.n	51a2 <__swbuf_r+0x2a>
    519e:	68ac      	ldr	r4, [r5, #8]
    51a0:	e003      	b.n	51aa <__swbuf_r+0x32>
    51a2:	4b20      	ldr	r3, [pc, #128]	; (5224 <__swbuf_r+0xac>)
    51a4:	429c      	cmp	r4, r3
    51a6:	d100      	bne.n	51aa <__swbuf_r+0x32>
    51a8:	68ec      	ldr	r4, [r5, #12]
    51aa:	69a3      	ldr	r3, [r4, #24]
    51ac:	60a3      	str	r3, [r4, #8]
    51ae:	89a3      	ldrh	r3, [r4, #12]
    51b0:	071a      	lsls	r2, r3, #28
    51b2:	d50a      	bpl.n	51ca <__swbuf_r+0x52>
    51b4:	6923      	ldr	r3, [r4, #16]
    51b6:	2b00      	cmp	r3, #0
    51b8:	d007      	beq.n	51ca <__swbuf_r+0x52>
    51ba:	6822      	ldr	r2, [r4, #0]
    51bc:	6923      	ldr	r3, [r4, #16]
    51be:	b2f6      	uxtb	r6, r6
    51c0:	1ad0      	subs	r0, r2, r3
    51c2:	6962      	ldr	r2, [r4, #20]
    51c4:	4290      	cmp	r0, r2
    51c6:	db0f      	blt.n	51e8 <__swbuf_r+0x70>
    51c8:	e008      	b.n	51dc <__swbuf_r+0x64>
    51ca:	1c28      	adds	r0, r5, #0
    51cc:	1c21      	adds	r1, r4, #0
    51ce:	f000 f82b 	bl	5228 <__swsetup_r>
    51d2:	2800      	cmp	r0, #0
    51d4:	d0f1      	beq.n	51ba <__swbuf_r+0x42>
    51d6:	2001      	movs	r0, #1
    51d8:	4240      	negs	r0, r0
    51da:	e01d      	b.n	5218 <__swbuf_r+0xa0>
    51dc:	1c28      	adds	r0, r5, #0
    51de:	1c21      	adds	r1, r4, #0
    51e0:	f000 f91e 	bl	5420 <_fflush_r>
    51e4:	2800      	cmp	r0, #0
    51e6:	d1f6      	bne.n	51d6 <__swbuf_r+0x5e>
    51e8:	68a3      	ldr	r3, [r4, #8]
    51ea:	3001      	adds	r0, #1
    51ec:	3b01      	subs	r3, #1
    51ee:	60a3      	str	r3, [r4, #8]
    51f0:	6823      	ldr	r3, [r4, #0]
    51f2:	1c5a      	adds	r2, r3, #1
    51f4:	6022      	str	r2, [r4, #0]
    51f6:	701e      	strb	r6, [r3, #0]
    51f8:	6963      	ldr	r3, [r4, #20]
    51fa:	4298      	cmp	r0, r3
    51fc:	d005      	beq.n	520a <__swbuf_r+0x92>
    51fe:	89a3      	ldrh	r3, [r4, #12]
    5200:	1c30      	adds	r0, r6, #0
    5202:	07da      	lsls	r2, r3, #31
    5204:	d508      	bpl.n	5218 <__swbuf_r+0xa0>
    5206:	2e0a      	cmp	r6, #10
    5208:	d106      	bne.n	5218 <__swbuf_r+0xa0>
    520a:	1c28      	adds	r0, r5, #0
    520c:	1c21      	adds	r1, r4, #0
    520e:	f000 f907 	bl	5420 <_fflush_r>
    5212:	2800      	cmp	r0, #0
    5214:	d1df      	bne.n	51d6 <__swbuf_r+0x5e>
    5216:	1c30      	adds	r0, r6, #0
    5218:	bd70      	pop	{r4, r5, r6, pc}
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	00005aec 	.word	0x00005aec
    5220:	00005b0c 	.word	0x00005b0c
    5224:	00005b2c 	.word	0x00005b2c

00005228 <__swsetup_r>:
    5228:	4b34      	ldr	r3, [pc, #208]	; (52fc <__swsetup_r+0xd4>)
    522a:	b570      	push	{r4, r5, r6, lr}
    522c:	681d      	ldr	r5, [r3, #0]
    522e:	1c06      	adds	r6, r0, #0
    5230:	1c0c      	adds	r4, r1, #0
    5232:	2d00      	cmp	r5, #0
    5234:	d005      	beq.n	5242 <__swsetup_r+0x1a>
    5236:	69a9      	ldr	r1, [r5, #24]
    5238:	2900      	cmp	r1, #0
    523a:	d102      	bne.n	5242 <__swsetup_r+0x1a>
    523c:	1c28      	adds	r0, r5, #0
    523e:	f000 f96f 	bl	5520 <__sinit>
    5242:	4b2f      	ldr	r3, [pc, #188]	; (5300 <__swsetup_r+0xd8>)
    5244:	429c      	cmp	r4, r3
    5246:	d101      	bne.n	524c <__swsetup_r+0x24>
    5248:	686c      	ldr	r4, [r5, #4]
    524a:	e008      	b.n	525e <__swsetup_r+0x36>
    524c:	4b2d      	ldr	r3, [pc, #180]	; (5304 <__swsetup_r+0xdc>)
    524e:	429c      	cmp	r4, r3
    5250:	d101      	bne.n	5256 <__swsetup_r+0x2e>
    5252:	68ac      	ldr	r4, [r5, #8]
    5254:	e003      	b.n	525e <__swsetup_r+0x36>
    5256:	4b2c      	ldr	r3, [pc, #176]	; (5308 <__swsetup_r+0xe0>)
    5258:	429c      	cmp	r4, r3
    525a:	d100      	bne.n	525e <__swsetup_r+0x36>
    525c:	68ec      	ldr	r4, [r5, #12]
    525e:	89a2      	ldrh	r2, [r4, #12]
    5260:	b293      	uxth	r3, r2
    5262:	0719      	lsls	r1, r3, #28
    5264:	d421      	bmi.n	52aa <__swsetup_r+0x82>
    5266:	06d9      	lsls	r1, r3, #27
    5268:	d405      	bmi.n	5276 <__swsetup_r+0x4e>
    526a:	2309      	movs	r3, #9
    526c:	6033      	str	r3, [r6, #0]
    526e:	2340      	movs	r3, #64	; 0x40
    5270:	431a      	orrs	r2, r3
    5272:	81a2      	strh	r2, [r4, #12]
    5274:	e03f      	b.n	52f6 <__swsetup_r+0xce>
    5276:	075a      	lsls	r2, r3, #29
    5278:	d513      	bpl.n	52a2 <__swsetup_r+0x7a>
    527a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    527c:	2900      	cmp	r1, #0
    527e:	d008      	beq.n	5292 <__swsetup_r+0x6a>
    5280:	1c23      	adds	r3, r4, #0
    5282:	3344      	adds	r3, #68	; 0x44
    5284:	4299      	cmp	r1, r3
    5286:	d002      	beq.n	528e <__swsetup_r+0x66>
    5288:	1c30      	adds	r0, r6, #0
    528a:	f000 fa1f 	bl	56cc <_free_r>
    528e:	2300      	movs	r3, #0
    5290:	6363      	str	r3, [r4, #52]	; 0x34
    5292:	89a3      	ldrh	r3, [r4, #12]
    5294:	2224      	movs	r2, #36	; 0x24
    5296:	4393      	bics	r3, r2
    5298:	81a3      	strh	r3, [r4, #12]
    529a:	2300      	movs	r3, #0
    529c:	6063      	str	r3, [r4, #4]
    529e:	6923      	ldr	r3, [r4, #16]
    52a0:	6023      	str	r3, [r4, #0]
    52a2:	89a3      	ldrh	r3, [r4, #12]
    52a4:	2208      	movs	r2, #8
    52a6:	4313      	orrs	r3, r2
    52a8:	81a3      	strh	r3, [r4, #12]
    52aa:	6921      	ldr	r1, [r4, #16]
    52ac:	2900      	cmp	r1, #0
    52ae:	d10b      	bne.n	52c8 <__swsetup_r+0xa0>
    52b0:	89a3      	ldrh	r3, [r4, #12]
    52b2:	22a0      	movs	r2, #160	; 0xa0
    52b4:	0092      	lsls	r2, r2, #2
    52b6:	401a      	ands	r2, r3
    52b8:	2380      	movs	r3, #128	; 0x80
    52ba:	009b      	lsls	r3, r3, #2
    52bc:	429a      	cmp	r2, r3
    52be:	d003      	beq.n	52c8 <__swsetup_r+0xa0>
    52c0:	1c30      	adds	r0, r6, #0
    52c2:	1c21      	adds	r1, r4, #0
    52c4:	f000 f99c 	bl	5600 <__smakebuf_r>
    52c8:	89a3      	ldrh	r3, [r4, #12]
    52ca:	2201      	movs	r2, #1
    52cc:	401a      	ands	r2, r3
    52ce:	d005      	beq.n	52dc <__swsetup_r+0xb4>
    52d0:	6961      	ldr	r1, [r4, #20]
    52d2:	2200      	movs	r2, #0
    52d4:	60a2      	str	r2, [r4, #8]
    52d6:	424a      	negs	r2, r1
    52d8:	61a2      	str	r2, [r4, #24]
    52da:	e003      	b.n	52e4 <__swsetup_r+0xbc>
    52dc:	0799      	lsls	r1, r3, #30
    52de:	d400      	bmi.n	52e2 <__swsetup_r+0xba>
    52e0:	6962      	ldr	r2, [r4, #20]
    52e2:	60a2      	str	r2, [r4, #8]
    52e4:	6922      	ldr	r2, [r4, #16]
    52e6:	2000      	movs	r0, #0
    52e8:	4282      	cmp	r2, r0
    52ea:	d106      	bne.n	52fa <__swsetup_r+0xd2>
    52ec:	0619      	lsls	r1, r3, #24
    52ee:	d504      	bpl.n	52fa <__swsetup_r+0xd2>
    52f0:	2240      	movs	r2, #64	; 0x40
    52f2:	4313      	orrs	r3, r2
    52f4:	81a3      	strh	r3, [r4, #12]
    52f6:	2001      	movs	r0, #1
    52f8:	4240      	negs	r0, r0
    52fa:	bd70      	pop	{r4, r5, r6, pc}
    52fc:	2000006c 	.word	0x2000006c
    5300:	00005aec 	.word	0x00005aec
    5304:	00005b0c 	.word	0x00005b0c
    5308:	00005b2c 	.word	0x00005b2c

0000530c <__sflush_r>:
    530c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    530e:	898b      	ldrh	r3, [r1, #12]
    5310:	1c05      	adds	r5, r0, #0
    5312:	1c0c      	adds	r4, r1, #0
    5314:	0719      	lsls	r1, r3, #28
    5316:	d45e      	bmi.n	53d6 <__sflush_r+0xca>
    5318:	6862      	ldr	r2, [r4, #4]
    531a:	2a00      	cmp	r2, #0
    531c:	dc02      	bgt.n	5324 <__sflush_r+0x18>
    531e:	6c27      	ldr	r7, [r4, #64]	; 0x40
    5320:	2f00      	cmp	r7, #0
    5322:	dd1a      	ble.n	535a <__sflush_r+0x4e>
    5324:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5326:	2f00      	cmp	r7, #0
    5328:	d017      	beq.n	535a <__sflush_r+0x4e>
    532a:	2200      	movs	r2, #0
    532c:	682e      	ldr	r6, [r5, #0]
    532e:	602a      	str	r2, [r5, #0]
    5330:	2280      	movs	r2, #128	; 0x80
    5332:	0152      	lsls	r2, r2, #5
    5334:	401a      	ands	r2, r3
    5336:	d001      	beq.n	533c <__sflush_r+0x30>
    5338:	6d62      	ldr	r2, [r4, #84]	; 0x54
    533a:	e015      	b.n	5368 <__sflush_r+0x5c>
    533c:	1c28      	adds	r0, r5, #0
    533e:	6a21      	ldr	r1, [r4, #32]
    5340:	2301      	movs	r3, #1
    5342:	47b8      	blx	r7
    5344:	1c02      	adds	r2, r0, #0
    5346:	1c41      	adds	r1, r0, #1
    5348:	d10e      	bne.n	5368 <__sflush_r+0x5c>
    534a:	682b      	ldr	r3, [r5, #0]
    534c:	2b00      	cmp	r3, #0
    534e:	d00b      	beq.n	5368 <__sflush_r+0x5c>
    5350:	2b1d      	cmp	r3, #29
    5352:	d001      	beq.n	5358 <__sflush_r+0x4c>
    5354:	2b16      	cmp	r3, #22
    5356:	d102      	bne.n	535e <__sflush_r+0x52>
    5358:	602e      	str	r6, [r5, #0]
    535a:	2000      	movs	r0, #0
    535c:	e05e      	b.n	541c <__sflush_r+0x110>
    535e:	89a3      	ldrh	r3, [r4, #12]
    5360:	2140      	movs	r1, #64	; 0x40
    5362:	430b      	orrs	r3, r1
    5364:	81a3      	strh	r3, [r4, #12]
    5366:	e059      	b.n	541c <__sflush_r+0x110>
    5368:	89a3      	ldrh	r3, [r4, #12]
    536a:	075f      	lsls	r7, r3, #29
    536c:	d506      	bpl.n	537c <__sflush_r+0x70>
    536e:	6861      	ldr	r1, [r4, #4]
    5370:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5372:	1a52      	subs	r2, r2, r1
    5374:	2b00      	cmp	r3, #0
    5376:	d001      	beq.n	537c <__sflush_r+0x70>
    5378:	6c27      	ldr	r7, [r4, #64]	; 0x40
    537a:	1bd2      	subs	r2, r2, r7
    537c:	1c28      	adds	r0, r5, #0
    537e:	6a21      	ldr	r1, [r4, #32]
    5380:	2300      	movs	r3, #0
    5382:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5384:	47b8      	blx	r7
    5386:	89a2      	ldrh	r2, [r4, #12]
    5388:	1c41      	adds	r1, r0, #1
    538a:	d106      	bne.n	539a <__sflush_r+0x8e>
    538c:	682b      	ldr	r3, [r5, #0]
    538e:	2b00      	cmp	r3, #0
    5390:	d003      	beq.n	539a <__sflush_r+0x8e>
    5392:	2b1d      	cmp	r3, #29
    5394:	d001      	beq.n	539a <__sflush_r+0x8e>
    5396:	2b16      	cmp	r3, #22
    5398:	d119      	bne.n	53ce <__sflush_r+0xc2>
    539a:	2300      	movs	r3, #0
    539c:	6063      	str	r3, [r4, #4]
    539e:	6923      	ldr	r3, [r4, #16]
    53a0:	6023      	str	r3, [r4, #0]
    53a2:	04d7      	lsls	r7, r2, #19
    53a4:	d505      	bpl.n	53b2 <__sflush_r+0xa6>
    53a6:	1c41      	adds	r1, r0, #1
    53a8:	d102      	bne.n	53b0 <__sflush_r+0xa4>
    53aa:	682a      	ldr	r2, [r5, #0]
    53ac:	2a00      	cmp	r2, #0
    53ae:	d100      	bne.n	53b2 <__sflush_r+0xa6>
    53b0:	6560      	str	r0, [r4, #84]	; 0x54
    53b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    53b4:	602e      	str	r6, [r5, #0]
    53b6:	2900      	cmp	r1, #0
    53b8:	d0cf      	beq.n	535a <__sflush_r+0x4e>
    53ba:	1c23      	adds	r3, r4, #0
    53bc:	3344      	adds	r3, #68	; 0x44
    53be:	4299      	cmp	r1, r3
    53c0:	d002      	beq.n	53c8 <__sflush_r+0xbc>
    53c2:	1c28      	adds	r0, r5, #0
    53c4:	f000 f982 	bl	56cc <_free_r>
    53c8:	2000      	movs	r0, #0
    53ca:	6360      	str	r0, [r4, #52]	; 0x34
    53cc:	e026      	b.n	541c <__sflush_r+0x110>
    53ce:	2340      	movs	r3, #64	; 0x40
    53d0:	431a      	orrs	r2, r3
    53d2:	81a2      	strh	r2, [r4, #12]
    53d4:	e022      	b.n	541c <__sflush_r+0x110>
    53d6:	6926      	ldr	r6, [r4, #16]
    53d8:	2e00      	cmp	r6, #0
    53da:	d0be      	beq.n	535a <__sflush_r+0x4e>
    53dc:	6827      	ldr	r7, [r4, #0]
    53de:	2200      	movs	r2, #0
    53e0:	1bbf      	subs	r7, r7, r6
    53e2:	9701      	str	r7, [sp, #4]
    53e4:	6026      	str	r6, [r4, #0]
    53e6:	0799      	lsls	r1, r3, #30
    53e8:	d100      	bne.n	53ec <__sflush_r+0xe0>
    53ea:	6962      	ldr	r2, [r4, #20]
    53ec:	60a2      	str	r2, [r4, #8]
    53ee:	9f01      	ldr	r7, [sp, #4]
    53f0:	2f00      	cmp	r7, #0
    53f2:	ddb2      	ble.n	535a <__sflush_r+0x4e>
    53f4:	1c28      	adds	r0, r5, #0
    53f6:	6a21      	ldr	r1, [r4, #32]
    53f8:	1c32      	adds	r2, r6, #0
    53fa:	9b01      	ldr	r3, [sp, #4]
    53fc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    53fe:	47b8      	blx	r7
    5400:	2800      	cmp	r0, #0
    5402:	dc06      	bgt.n	5412 <__sflush_r+0x106>
    5404:	89a3      	ldrh	r3, [r4, #12]
    5406:	2240      	movs	r2, #64	; 0x40
    5408:	4313      	orrs	r3, r2
    540a:	2001      	movs	r0, #1
    540c:	81a3      	strh	r3, [r4, #12]
    540e:	4240      	negs	r0, r0
    5410:	e004      	b.n	541c <__sflush_r+0x110>
    5412:	9f01      	ldr	r7, [sp, #4]
    5414:	1836      	adds	r6, r6, r0
    5416:	1a3f      	subs	r7, r7, r0
    5418:	9701      	str	r7, [sp, #4]
    541a:	e7e8      	b.n	53ee <__sflush_r+0xe2>
    541c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005420 <_fflush_r>:
    5420:	690a      	ldr	r2, [r1, #16]
    5422:	b538      	push	{r3, r4, r5, lr}
    5424:	1c05      	adds	r5, r0, #0
    5426:	1c0c      	adds	r4, r1, #0
    5428:	2a00      	cmp	r2, #0
    542a:	d101      	bne.n	5430 <_fflush_r+0x10>
    542c:	2000      	movs	r0, #0
    542e:	e01c      	b.n	546a <_fflush_r+0x4a>
    5430:	2800      	cmp	r0, #0
    5432:	d004      	beq.n	543e <_fflush_r+0x1e>
    5434:	6983      	ldr	r3, [r0, #24]
    5436:	2b00      	cmp	r3, #0
    5438:	d101      	bne.n	543e <_fflush_r+0x1e>
    543a:	f000 f871 	bl	5520 <__sinit>
    543e:	4b0b      	ldr	r3, [pc, #44]	; (546c <_fflush_r+0x4c>)
    5440:	429c      	cmp	r4, r3
    5442:	d101      	bne.n	5448 <_fflush_r+0x28>
    5444:	686c      	ldr	r4, [r5, #4]
    5446:	e008      	b.n	545a <_fflush_r+0x3a>
    5448:	4b09      	ldr	r3, [pc, #36]	; (5470 <_fflush_r+0x50>)
    544a:	429c      	cmp	r4, r3
    544c:	d101      	bne.n	5452 <_fflush_r+0x32>
    544e:	68ac      	ldr	r4, [r5, #8]
    5450:	e003      	b.n	545a <_fflush_r+0x3a>
    5452:	4b08      	ldr	r3, [pc, #32]	; (5474 <_fflush_r+0x54>)
    5454:	429c      	cmp	r4, r3
    5456:	d100      	bne.n	545a <_fflush_r+0x3a>
    5458:	68ec      	ldr	r4, [r5, #12]
    545a:	220c      	movs	r2, #12
    545c:	5ea3      	ldrsh	r3, [r4, r2]
    545e:	2b00      	cmp	r3, #0
    5460:	d0e4      	beq.n	542c <_fflush_r+0xc>
    5462:	1c28      	adds	r0, r5, #0
    5464:	1c21      	adds	r1, r4, #0
    5466:	f7ff ff51 	bl	530c <__sflush_r>
    546a:	bd38      	pop	{r3, r4, r5, pc}
    546c:	00005aec 	.word	0x00005aec
    5470:	00005b0c 	.word	0x00005b0c
    5474:	00005b2c 	.word	0x00005b2c

00005478 <_cleanup_r>:
    5478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    547a:	1c04      	adds	r4, r0, #0
    547c:	1c07      	adds	r7, r0, #0
    547e:	3448      	adds	r4, #72	; 0x48
    5480:	2c00      	cmp	r4, #0
    5482:	d012      	beq.n	54aa <_cleanup_r+0x32>
    5484:	68a5      	ldr	r5, [r4, #8]
    5486:	6866      	ldr	r6, [r4, #4]
    5488:	3e01      	subs	r6, #1
    548a:	d40c      	bmi.n	54a6 <_cleanup_r+0x2e>
    548c:	89ab      	ldrh	r3, [r5, #12]
    548e:	2b01      	cmp	r3, #1
    5490:	d907      	bls.n	54a2 <_cleanup_r+0x2a>
    5492:	220e      	movs	r2, #14
    5494:	5eab      	ldrsh	r3, [r5, r2]
    5496:	3301      	adds	r3, #1
    5498:	d003      	beq.n	54a2 <_cleanup_r+0x2a>
    549a:	1c38      	adds	r0, r7, #0
    549c:	1c29      	adds	r1, r5, #0
    549e:	f7ff ffbf 	bl	5420 <_fflush_r>
    54a2:	3568      	adds	r5, #104	; 0x68
    54a4:	e7f0      	b.n	5488 <_cleanup_r+0x10>
    54a6:	6824      	ldr	r4, [r4, #0]
    54a8:	e7ea      	b.n	5480 <_cleanup_r+0x8>
    54aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000054ac <std.isra.0>:
    54ac:	2300      	movs	r3, #0
    54ae:	b510      	push	{r4, lr}
    54b0:	1c04      	adds	r4, r0, #0
    54b2:	6003      	str	r3, [r0, #0]
    54b4:	6043      	str	r3, [r0, #4]
    54b6:	6083      	str	r3, [r0, #8]
    54b8:	8181      	strh	r1, [r0, #12]
    54ba:	6643      	str	r3, [r0, #100]	; 0x64
    54bc:	81c2      	strh	r2, [r0, #14]
    54be:	6103      	str	r3, [r0, #16]
    54c0:	6143      	str	r3, [r0, #20]
    54c2:	6183      	str	r3, [r0, #24]
    54c4:	1c19      	adds	r1, r3, #0
    54c6:	2208      	movs	r2, #8
    54c8:	305c      	adds	r0, #92	; 0x5c
    54ca:	f7ff faa0 	bl	4a0e <memset>
    54ce:	4b05      	ldr	r3, [pc, #20]	; (54e4 <std.isra.0+0x38>)
    54d0:	6224      	str	r4, [r4, #32]
    54d2:	6263      	str	r3, [r4, #36]	; 0x24
    54d4:	4b04      	ldr	r3, [pc, #16]	; (54e8 <std.isra.0+0x3c>)
    54d6:	62a3      	str	r3, [r4, #40]	; 0x28
    54d8:	4b04      	ldr	r3, [pc, #16]	; (54ec <std.isra.0+0x40>)
    54da:	62e3      	str	r3, [r4, #44]	; 0x2c
    54dc:	4b04      	ldr	r3, [pc, #16]	; (54f0 <std.isra.0+0x44>)
    54de:	6323      	str	r3, [r4, #48]	; 0x30
    54e0:	bd10      	pop	{r4, pc}
    54e2:	46c0      	nop			; (mov r8, r8)
    54e4:	00005829 	.word	0x00005829
    54e8:	00005851 	.word	0x00005851
    54ec:	00005889 	.word	0x00005889
    54f0:	000058b5 	.word	0x000058b5

000054f4 <__sfmoreglue>:
    54f4:	b570      	push	{r4, r5, r6, lr}
    54f6:	1e4b      	subs	r3, r1, #1
    54f8:	2568      	movs	r5, #104	; 0x68
    54fa:	435d      	muls	r5, r3
    54fc:	1c0e      	adds	r6, r1, #0
    54fe:	1c29      	adds	r1, r5, #0
    5500:	3174      	adds	r1, #116	; 0x74
    5502:	f000 f92b 	bl	575c <_malloc_r>
    5506:	1e04      	subs	r4, r0, #0
    5508:	d008      	beq.n	551c <__sfmoreglue+0x28>
    550a:	2100      	movs	r1, #0
    550c:	6001      	str	r1, [r0, #0]
    550e:	6046      	str	r6, [r0, #4]
    5510:	1c2a      	adds	r2, r5, #0
    5512:	300c      	adds	r0, #12
    5514:	60a0      	str	r0, [r4, #8]
    5516:	3268      	adds	r2, #104	; 0x68
    5518:	f7ff fa79 	bl	4a0e <memset>
    551c:	1c20      	adds	r0, r4, #0
    551e:	bd70      	pop	{r4, r5, r6, pc}

00005520 <__sinit>:
    5520:	6983      	ldr	r3, [r0, #24]
    5522:	b513      	push	{r0, r1, r4, lr}
    5524:	1c04      	adds	r4, r0, #0
    5526:	2b00      	cmp	r3, #0
    5528:	d127      	bne.n	557a <__sinit+0x5a>
    552a:	6483      	str	r3, [r0, #72]	; 0x48
    552c:	64c3      	str	r3, [r0, #76]	; 0x4c
    552e:	6503      	str	r3, [r0, #80]	; 0x50
    5530:	4b12      	ldr	r3, [pc, #72]	; (557c <__sinit+0x5c>)
    5532:	4a13      	ldr	r2, [pc, #76]	; (5580 <__sinit+0x60>)
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	6282      	str	r2, [r0, #40]	; 0x28
    5538:	4298      	cmp	r0, r3
    553a:	d101      	bne.n	5540 <__sinit+0x20>
    553c:	2301      	movs	r3, #1
    553e:	6183      	str	r3, [r0, #24]
    5540:	1c20      	adds	r0, r4, #0
    5542:	f000 f81f 	bl	5584 <__sfp>
    5546:	6060      	str	r0, [r4, #4]
    5548:	1c20      	adds	r0, r4, #0
    554a:	f000 f81b 	bl	5584 <__sfp>
    554e:	60a0      	str	r0, [r4, #8]
    5550:	1c20      	adds	r0, r4, #0
    5552:	f000 f817 	bl	5584 <__sfp>
    5556:	2104      	movs	r1, #4
    5558:	60e0      	str	r0, [r4, #12]
    555a:	2200      	movs	r2, #0
    555c:	6860      	ldr	r0, [r4, #4]
    555e:	f7ff ffa5 	bl	54ac <std.isra.0>
    5562:	68a0      	ldr	r0, [r4, #8]
    5564:	2109      	movs	r1, #9
    5566:	2201      	movs	r2, #1
    5568:	f7ff ffa0 	bl	54ac <std.isra.0>
    556c:	68e0      	ldr	r0, [r4, #12]
    556e:	2112      	movs	r1, #18
    5570:	2202      	movs	r2, #2
    5572:	f7ff ff9b 	bl	54ac <std.isra.0>
    5576:	2301      	movs	r3, #1
    5578:	61a3      	str	r3, [r4, #24]
    557a:	bd13      	pop	{r0, r1, r4, pc}
    557c:	00005ab4 	.word	0x00005ab4
    5580:	00005479 	.word	0x00005479

00005584 <__sfp>:
    5584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5586:	4b1d      	ldr	r3, [pc, #116]	; (55fc <__sfp+0x78>)
    5588:	1c07      	adds	r7, r0, #0
    558a:	681e      	ldr	r6, [r3, #0]
    558c:	69b2      	ldr	r2, [r6, #24]
    558e:	2a00      	cmp	r2, #0
    5590:	d102      	bne.n	5598 <__sfp+0x14>
    5592:	1c30      	adds	r0, r6, #0
    5594:	f7ff ffc4 	bl	5520 <__sinit>
    5598:	3648      	adds	r6, #72	; 0x48
    559a:	68b4      	ldr	r4, [r6, #8]
    559c:	6873      	ldr	r3, [r6, #4]
    559e:	3b01      	subs	r3, #1
    55a0:	d405      	bmi.n	55ae <__sfp+0x2a>
    55a2:	220c      	movs	r2, #12
    55a4:	5ea5      	ldrsh	r5, [r4, r2]
    55a6:	2d00      	cmp	r5, #0
    55a8:	d010      	beq.n	55cc <__sfp+0x48>
    55aa:	3468      	adds	r4, #104	; 0x68
    55ac:	e7f7      	b.n	559e <__sfp+0x1a>
    55ae:	6833      	ldr	r3, [r6, #0]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d106      	bne.n	55c2 <__sfp+0x3e>
    55b4:	1c38      	adds	r0, r7, #0
    55b6:	2104      	movs	r1, #4
    55b8:	f7ff ff9c 	bl	54f4 <__sfmoreglue>
    55bc:	6030      	str	r0, [r6, #0]
    55be:	2800      	cmp	r0, #0
    55c0:	d001      	beq.n	55c6 <__sfp+0x42>
    55c2:	6836      	ldr	r6, [r6, #0]
    55c4:	e7e9      	b.n	559a <__sfp+0x16>
    55c6:	230c      	movs	r3, #12
    55c8:	603b      	str	r3, [r7, #0]
    55ca:	e016      	b.n	55fa <__sfp+0x76>
    55cc:	2301      	movs	r3, #1
    55ce:	425b      	negs	r3, r3
    55d0:	81e3      	strh	r3, [r4, #14]
    55d2:	1c20      	adds	r0, r4, #0
    55d4:	2301      	movs	r3, #1
    55d6:	81a3      	strh	r3, [r4, #12]
    55d8:	6665      	str	r5, [r4, #100]	; 0x64
    55da:	6025      	str	r5, [r4, #0]
    55dc:	60a5      	str	r5, [r4, #8]
    55de:	6065      	str	r5, [r4, #4]
    55e0:	6125      	str	r5, [r4, #16]
    55e2:	6165      	str	r5, [r4, #20]
    55e4:	61a5      	str	r5, [r4, #24]
    55e6:	305c      	adds	r0, #92	; 0x5c
    55e8:	1c29      	adds	r1, r5, #0
    55ea:	2208      	movs	r2, #8
    55ec:	f7ff fa0f 	bl	4a0e <memset>
    55f0:	6365      	str	r5, [r4, #52]	; 0x34
    55f2:	63a5      	str	r5, [r4, #56]	; 0x38
    55f4:	64a5      	str	r5, [r4, #72]	; 0x48
    55f6:	64e5      	str	r5, [r4, #76]	; 0x4c
    55f8:	1c20      	adds	r0, r4, #0
    55fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55fc:	00005ab4 	.word	0x00005ab4

00005600 <__smakebuf_r>:
    5600:	b5f0      	push	{r4, r5, r6, r7, lr}
    5602:	898b      	ldrh	r3, [r1, #12]
    5604:	b091      	sub	sp, #68	; 0x44
    5606:	1c05      	adds	r5, r0, #0
    5608:	1c0c      	adds	r4, r1, #0
    560a:	079a      	lsls	r2, r3, #30
    560c:	d425      	bmi.n	565a <__smakebuf_r+0x5a>
    560e:	230e      	movs	r3, #14
    5610:	5ec9      	ldrsh	r1, [r1, r3]
    5612:	2900      	cmp	r1, #0
    5614:	da06      	bge.n	5624 <__smakebuf_r+0x24>
    5616:	89a7      	ldrh	r7, [r4, #12]
    5618:	2380      	movs	r3, #128	; 0x80
    561a:	401f      	ands	r7, r3
    561c:	d00f      	beq.n	563e <__smakebuf_r+0x3e>
    561e:	2700      	movs	r7, #0
    5620:	2640      	movs	r6, #64	; 0x40
    5622:	e00e      	b.n	5642 <__smakebuf_r+0x42>
    5624:	aa01      	add	r2, sp, #4
    5626:	f000 f979 	bl	591c <_fstat_r>
    562a:	2800      	cmp	r0, #0
    562c:	dbf3      	blt.n	5616 <__smakebuf_r+0x16>
    562e:	9b02      	ldr	r3, [sp, #8]
    5630:	27f0      	movs	r7, #240	; 0xf0
    5632:	023f      	lsls	r7, r7, #8
    5634:	4a18      	ldr	r2, [pc, #96]	; (5698 <__smakebuf_r+0x98>)
    5636:	401f      	ands	r7, r3
    5638:	18bf      	adds	r7, r7, r2
    563a:	427b      	negs	r3, r7
    563c:	415f      	adcs	r7, r3
    563e:	2680      	movs	r6, #128	; 0x80
    5640:	00f6      	lsls	r6, r6, #3
    5642:	1c28      	adds	r0, r5, #0
    5644:	1c31      	adds	r1, r6, #0
    5646:	f000 f889 	bl	575c <_malloc_r>
    564a:	2800      	cmp	r0, #0
    564c:	d10c      	bne.n	5668 <__smakebuf_r+0x68>
    564e:	89a3      	ldrh	r3, [r4, #12]
    5650:	059a      	lsls	r2, r3, #22
    5652:	d41f      	bmi.n	5694 <__smakebuf_r+0x94>
    5654:	2202      	movs	r2, #2
    5656:	4313      	orrs	r3, r2
    5658:	81a3      	strh	r3, [r4, #12]
    565a:	1c23      	adds	r3, r4, #0
    565c:	3347      	adds	r3, #71	; 0x47
    565e:	6023      	str	r3, [r4, #0]
    5660:	6123      	str	r3, [r4, #16]
    5662:	2301      	movs	r3, #1
    5664:	6163      	str	r3, [r4, #20]
    5666:	e015      	b.n	5694 <__smakebuf_r+0x94>
    5668:	4b0c      	ldr	r3, [pc, #48]	; (569c <__smakebuf_r+0x9c>)
    566a:	2280      	movs	r2, #128	; 0x80
    566c:	62ab      	str	r3, [r5, #40]	; 0x28
    566e:	89a3      	ldrh	r3, [r4, #12]
    5670:	6020      	str	r0, [r4, #0]
    5672:	4313      	orrs	r3, r2
    5674:	81a3      	strh	r3, [r4, #12]
    5676:	6120      	str	r0, [r4, #16]
    5678:	6166      	str	r6, [r4, #20]
    567a:	2f00      	cmp	r7, #0
    567c:	d00a      	beq.n	5694 <__smakebuf_r+0x94>
    567e:	230e      	movs	r3, #14
    5680:	5ee1      	ldrsh	r1, [r4, r3]
    5682:	1c28      	adds	r0, r5, #0
    5684:	f000 f95c 	bl	5940 <_isatty_r>
    5688:	2800      	cmp	r0, #0
    568a:	d003      	beq.n	5694 <__smakebuf_r+0x94>
    568c:	89a3      	ldrh	r3, [r4, #12]
    568e:	2201      	movs	r2, #1
    5690:	4313      	orrs	r3, r2
    5692:	81a3      	strh	r3, [r4, #12]
    5694:	b011      	add	sp, #68	; 0x44
    5696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5698:	ffffe000 	.word	0xffffe000
    569c:	00005479 	.word	0x00005479

000056a0 <malloc>:
    56a0:	b508      	push	{r3, lr}
    56a2:	4b03      	ldr	r3, [pc, #12]	; (56b0 <malloc+0x10>)
    56a4:	1c01      	adds	r1, r0, #0
    56a6:	6818      	ldr	r0, [r3, #0]
    56a8:	f000 f858 	bl	575c <_malloc_r>
    56ac:	bd08      	pop	{r3, pc}
    56ae:	46c0      	nop			; (mov r8, r8)
    56b0:	2000006c 	.word	0x2000006c

000056b4 <memchr>:
    56b4:	b2c9      	uxtb	r1, r1
    56b6:	1882      	adds	r2, r0, r2
    56b8:	4290      	cmp	r0, r2
    56ba:	d004      	beq.n	56c6 <memchr+0x12>
    56bc:	7803      	ldrb	r3, [r0, #0]
    56be:	428b      	cmp	r3, r1
    56c0:	d002      	beq.n	56c8 <memchr+0x14>
    56c2:	3001      	adds	r0, #1
    56c4:	e7f8      	b.n	56b8 <memchr+0x4>
    56c6:	2000      	movs	r0, #0
    56c8:	4770      	bx	lr
	...

000056cc <_free_r>:
    56cc:	b530      	push	{r4, r5, lr}
    56ce:	2900      	cmp	r1, #0
    56d0:	d040      	beq.n	5754 <_free_r+0x88>
    56d2:	3904      	subs	r1, #4
    56d4:	680b      	ldr	r3, [r1, #0]
    56d6:	2b00      	cmp	r3, #0
    56d8:	da00      	bge.n	56dc <_free_r+0x10>
    56da:	18c9      	adds	r1, r1, r3
    56dc:	4a1e      	ldr	r2, [pc, #120]	; (5758 <_free_r+0x8c>)
    56de:	6813      	ldr	r3, [r2, #0]
    56e0:	1c14      	adds	r4, r2, #0
    56e2:	2b00      	cmp	r3, #0
    56e4:	d102      	bne.n	56ec <_free_r+0x20>
    56e6:	604b      	str	r3, [r1, #4]
    56e8:	6011      	str	r1, [r2, #0]
    56ea:	e033      	b.n	5754 <_free_r+0x88>
    56ec:	4299      	cmp	r1, r3
    56ee:	d20f      	bcs.n	5710 <_free_r+0x44>
    56f0:	6808      	ldr	r0, [r1, #0]
    56f2:	180a      	adds	r2, r1, r0
    56f4:	429a      	cmp	r2, r3
    56f6:	d105      	bne.n	5704 <_free_r+0x38>
    56f8:	6813      	ldr	r3, [r2, #0]
    56fa:	6852      	ldr	r2, [r2, #4]
    56fc:	18c0      	adds	r0, r0, r3
    56fe:	6008      	str	r0, [r1, #0]
    5700:	604a      	str	r2, [r1, #4]
    5702:	e000      	b.n	5706 <_free_r+0x3a>
    5704:	604b      	str	r3, [r1, #4]
    5706:	6021      	str	r1, [r4, #0]
    5708:	e024      	b.n	5754 <_free_r+0x88>
    570a:	428a      	cmp	r2, r1
    570c:	d803      	bhi.n	5716 <_free_r+0x4a>
    570e:	1c13      	adds	r3, r2, #0
    5710:	685a      	ldr	r2, [r3, #4]
    5712:	2a00      	cmp	r2, #0
    5714:	d1f9      	bne.n	570a <_free_r+0x3e>
    5716:	681d      	ldr	r5, [r3, #0]
    5718:	195c      	adds	r4, r3, r5
    571a:	428c      	cmp	r4, r1
    571c:	d10b      	bne.n	5736 <_free_r+0x6a>
    571e:	6809      	ldr	r1, [r1, #0]
    5720:	1869      	adds	r1, r5, r1
    5722:	1858      	adds	r0, r3, r1
    5724:	6019      	str	r1, [r3, #0]
    5726:	4290      	cmp	r0, r2
    5728:	d114      	bne.n	5754 <_free_r+0x88>
    572a:	6814      	ldr	r4, [r2, #0]
    572c:	6852      	ldr	r2, [r2, #4]
    572e:	1909      	adds	r1, r1, r4
    5730:	6019      	str	r1, [r3, #0]
    5732:	605a      	str	r2, [r3, #4]
    5734:	e00e      	b.n	5754 <_free_r+0x88>
    5736:	428c      	cmp	r4, r1
    5738:	d902      	bls.n	5740 <_free_r+0x74>
    573a:	230c      	movs	r3, #12
    573c:	6003      	str	r3, [r0, #0]
    573e:	e009      	b.n	5754 <_free_r+0x88>
    5740:	6808      	ldr	r0, [r1, #0]
    5742:	180c      	adds	r4, r1, r0
    5744:	4294      	cmp	r4, r2
    5746:	d103      	bne.n	5750 <_free_r+0x84>
    5748:	6814      	ldr	r4, [r2, #0]
    574a:	6852      	ldr	r2, [r2, #4]
    574c:	1900      	adds	r0, r0, r4
    574e:	6008      	str	r0, [r1, #0]
    5750:	604a      	str	r2, [r1, #4]
    5752:	6059      	str	r1, [r3, #4]
    5754:	bd30      	pop	{r4, r5, pc}
    5756:	46c0      	nop			; (mov r8, r8)
    5758:	20000874 	.word	0x20000874

0000575c <_malloc_r>:
    575c:	b570      	push	{r4, r5, r6, lr}
    575e:	2303      	movs	r3, #3
    5760:	1ccd      	adds	r5, r1, #3
    5762:	439d      	bics	r5, r3
    5764:	3508      	adds	r5, #8
    5766:	1c06      	adds	r6, r0, #0
    5768:	2d0c      	cmp	r5, #12
    576a:	d201      	bcs.n	5770 <_malloc_r+0x14>
    576c:	250c      	movs	r5, #12
    576e:	e001      	b.n	5774 <_malloc_r+0x18>
    5770:	2d00      	cmp	r5, #0
    5772:	db3f      	blt.n	57f4 <_malloc_r+0x98>
    5774:	428d      	cmp	r5, r1
    5776:	d33d      	bcc.n	57f4 <_malloc_r+0x98>
    5778:	4b20      	ldr	r3, [pc, #128]	; (57fc <_malloc_r+0xa0>)
    577a:	681c      	ldr	r4, [r3, #0]
    577c:	1c1a      	adds	r2, r3, #0
    577e:	1c21      	adds	r1, r4, #0
    5780:	2900      	cmp	r1, #0
    5782:	d013      	beq.n	57ac <_malloc_r+0x50>
    5784:	6808      	ldr	r0, [r1, #0]
    5786:	1b43      	subs	r3, r0, r5
    5788:	d40d      	bmi.n	57a6 <_malloc_r+0x4a>
    578a:	2b0b      	cmp	r3, #11
    578c:	d902      	bls.n	5794 <_malloc_r+0x38>
    578e:	600b      	str	r3, [r1, #0]
    5790:	18cc      	adds	r4, r1, r3
    5792:	e01e      	b.n	57d2 <_malloc_r+0x76>
    5794:	428c      	cmp	r4, r1
    5796:	d102      	bne.n	579e <_malloc_r+0x42>
    5798:	6863      	ldr	r3, [r4, #4]
    579a:	6013      	str	r3, [r2, #0]
    579c:	e01a      	b.n	57d4 <_malloc_r+0x78>
    579e:	6848      	ldr	r0, [r1, #4]
    57a0:	6060      	str	r0, [r4, #4]
    57a2:	1c0c      	adds	r4, r1, #0
    57a4:	e016      	b.n	57d4 <_malloc_r+0x78>
    57a6:	1c0c      	adds	r4, r1, #0
    57a8:	6849      	ldr	r1, [r1, #4]
    57aa:	e7e9      	b.n	5780 <_malloc_r+0x24>
    57ac:	4c14      	ldr	r4, [pc, #80]	; (5800 <_malloc_r+0xa4>)
    57ae:	6820      	ldr	r0, [r4, #0]
    57b0:	2800      	cmp	r0, #0
    57b2:	d103      	bne.n	57bc <_malloc_r+0x60>
    57b4:	1c30      	adds	r0, r6, #0
    57b6:	f000 f825 	bl	5804 <_sbrk_r>
    57ba:	6020      	str	r0, [r4, #0]
    57bc:	1c30      	adds	r0, r6, #0
    57be:	1c29      	adds	r1, r5, #0
    57c0:	f000 f820 	bl	5804 <_sbrk_r>
    57c4:	1c43      	adds	r3, r0, #1
    57c6:	d015      	beq.n	57f4 <_malloc_r+0x98>
    57c8:	1cc4      	adds	r4, r0, #3
    57ca:	2303      	movs	r3, #3
    57cc:	439c      	bics	r4, r3
    57ce:	4284      	cmp	r4, r0
    57d0:	d10a      	bne.n	57e8 <_malloc_r+0x8c>
    57d2:	6025      	str	r5, [r4, #0]
    57d4:	1c20      	adds	r0, r4, #0
    57d6:	300b      	adds	r0, #11
    57d8:	2207      	movs	r2, #7
    57da:	1d23      	adds	r3, r4, #4
    57dc:	4390      	bics	r0, r2
    57de:	1ac3      	subs	r3, r0, r3
    57e0:	d00b      	beq.n	57fa <_malloc_r+0x9e>
    57e2:	425a      	negs	r2, r3
    57e4:	50e2      	str	r2, [r4, r3]
    57e6:	e008      	b.n	57fa <_malloc_r+0x9e>
    57e8:	1a21      	subs	r1, r4, r0
    57ea:	1c30      	adds	r0, r6, #0
    57ec:	f000 f80a 	bl	5804 <_sbrk_r>
    57f0:	3001      	adds	r0, #1
    57f2:	d1ee      	bne.n	57d2 <_malloc_r+0x76>
    57f4:	230c      	movs	r3, #12
    57f6:	6033      	str	r3, [r6, #0]
    57f8:	2000      	movs	r0, #0
    57fa:	bd70      	pop	{r4, r5, r6, pc}
    57fc:	20000874 	.word	0x20000874
    5800:	20000870 	.word	0x20000870

00005804 <_sbrk_r>:
    5804:	b538      	push	{r3, r4, r5, lr}
    5806:	4c07      	ldr	r4, [pc, #28]	; (5824 <_sbrk_r+0x20>)
    5808:	2300      	movs	r3, #0
    580a:	1c05      	adds	r5, r0, #0
    580c:	1c08      	adds	r0, r1, #0
    580e:	6023      	str	r3, [r4, #0]
    5810:	f7fc fbde 	bl	1fd0 <_sbrk>
    5814:	1c43      	adds	r3, r0, #1
    5816:	d103      	bne.n	5820 <_sbrk_r+0x1c>
    5818:	6823      	ldr	r3, [r4, #0]
    581a:	2b00      	cmp	r3, #0
    581c:	d000      	beq.n	5820 <_sbrk_r+0x1c>
    581e:	602b      	str	r3, [r5, #0]
    5820:	bd38      	pop	{r3, r4, r5, pc}
    5822:	46c0      	nop			; (mov r8, r8)
    5824:	200009f0 	.word	0x200009f0

00005828 <__sread>:
    5828:	b538      	push	{r3, r4, r5, lr}
    582a:	1c0c      	adds	r4, r1, #0
    582c:	250e      	movs	r5, #14
    582e:	5f49      	ldrsh	r1, [r1, r5]
    5830:	f000 f8ac 	bl	598c <_read_r>
    5834:	2800      	cmp	r0, #0
    5836:	db03      	blt.n	5840 <__sread+0x18>
    5838:	6d62      	ldr	r2, [r4, #84]	; 0x54
    583a:	1813      	adds	r3, r2, r0
    583c:	6563      	str	r3, [r4, #84]	; 0x54
    583e:	e003      	b.n	5848 <__sread+0x20>
    5840:	89a2      	ldrh	r2, [r4, #12]
    5842:	4b02      	ldr	r3, [pc, #8]	; (584c <__sread+0x24>)
    5844:	4013      	ands	r3, r2
    5846:	81a3      	strh	r3, [r4, #12]
    5848:	bd38      	pop	{r3, r4, r5, pc}
    584a:	46c0      	nop			; (mov r8, r8)
    584c:	ffffefff 	.word	0xffffefff

00005850 <__swrite>:
    5850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5852:	1c1e      	adds	r6, r3, #0
    5854:	898b      	ldrh	r3, [r1, #12]
    5856:	1c05      	adds	r5, r0, #0
    5858:	1c0c      	adds	r4, r1, #0
    585a:	1c17      	adds	r7, r2, #0
    585c:	05da      	lsls	r2, r3, #23
    585e:	d505      	bpl.n	586c <__swrite+0x1c>
    5860:	230e      	movs	r3, #14
    5862:	5ec9      	ldrsh	r1, [r1, r3]
    5864:	2200      	movs	r2, #0
    5866:	2302      	movs	r3, #2
    5868:	f000 f87c 	bl	5964 <_lseek_r>
    586c:	89a2      	ldrh	r2, [r4, #12]
    586e:	4b05      	ldr	r3, [pc, #20]	; (5884 <__swrite+0x34>)
    5870:	1c28      	adds	r0, r5, #0
    5872:	4013      	ands	r3, r2
    5874:	81a3      	strh	r3, [r4, #12]
    5876:	220e      	movs	r2, #14
    5878:	5ea1      	ldrsh	r1, [r4, r2]
    587a:	1c33      	adds	r3, r6, #0
    587c:	1c3a      	adds	r2, r7, #0
    587e:	f000 f827 	bl	58d0 <_write_r>
    5882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5884:	ffffefff 	.word	0xffffefff

00005888 <__sseek>:
    5888:	b538      	push	{r3, r4, r5, lr}
    588a:	1c0c      	adds	r4, r1, #0
    588c:	250e      	movs	r5, #14
    588e:	5f49      	ldrsh	r1, [r1, r5]
    5890:	f000 f868 	bl	5964 <_lseek_r>
    5894:	89a3      	ldrh	r3, [r4, #12]
    5896:	1c42      	adds	r2, r0, #1
    5898:	d103      	bne.n	58a2 <__sseek+0x1a>
    589a:	4a05      	ldr	r2, [pc, #20]	; (58b0 <__sseek+0x28>)
    589c:	4013      	ands	r3, r2
    589e:	81a3      	strh	r3, [r4, #12]
    58a0:	e004      	b.n	58ac <__sseek+0x24>
    58a2:	2280      	movs	r2, #128	; 0x80
    58a4:	0152      	lsls	r2, r2, #5
    58a6:	4313      	orrs	r3, r2
    58a8:	81a3      	strh	r3, [r4, #12]
    58aa:	6560      	str	r0, [r4, #84]	; 0x54
    58ac:	bd38      	pop	{r3, r4, r5, pc}
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	ffffefff 	.word	0xffffefff

000058b4 <__sclose>:
    58b4:	b508      	push	{r3, lr}
    58b6:	230e      	movs	r3, #14
    58b8:	5ec9      	ldrsh	r1, [r1, r3]
    58ba:	f000 f81d 	bl	58f8 <_close_r>
    58be:	bd08      	pop	{r3, pc}

000058c0 <strlen>:
    58c0:	2300      	movs	r3, #0
    58c2:	5cc2      	ldrb	r2, [r0, r3]
    58c4:	3301      	adds	r3, #1
    58c6:	2a00      	cmp	r2, #0
    58c8:	d1fb      	bne.n	58c2 <strlen+0x2>
    58ca:	1e58      	subs	r0, r3, #1
    58cc:	4770      	bx	lr
	...

000058d0 <_write_r>:
    58d0:	b538      	push	{r3, r4, r5, lr}
    58d2:	4c08      	ldr	r4, [pc, #32]	; (58f4 <_write_r+0x24>)
    58d4:	1c05      	adds	r5, r0, #0
    58d6:	2000      	movs	r0, #0
    58d8:	6020      	str	r0, [r4, #0]
    58da:	1c08      	adds	r0, r1, #0
    58dc:	1c11      	adds	r1, r2, #0
    58de:	1c1a      	adds	r2, r3, #0
    58e0:	f7fc fb4c 	bl	1f7c <_write>
    58e4:	1c43      	adds	r3, r0, #1
    58e6:	d103      	bne.n	58f0 <_write_r+0x20>
    58e8:	6823      	ldr	r3, [r4, #0]
    58ea:	2b00      	cmp	r3, #0
    58ec:	d000      	beq.n	58f0 <_write_r+0x20>
    58ee:	602b      	str	r3, [r5, #0]
    58f0:	bd38      	pop	{r3, r4, r5, pc}
    58f2:	46c0      	nop			; (mov r8, r8)
    58f4:	200009f0 	.word	0x200009f0

000058f8 <_close_r>:
    58f8:	b538      	push	{r3, r4, r5, lr}
    58fa:	4c07      	ldr	r4, [pc, #28]	; (5918 <_close_r+0x20>)
    58fc:	2300      	movs	r3, #0
    58fe:	1c05      	adds	r5, r0, #0
    5900:	1c08      	adds	r0, r1, #0
    5902:	6023      	str	r3, [r4, #0]
    5904:	f7fc fb76 	bl	1ff4 <_close>
    5908:	1c43      	adds	r3, r0, #1
    590a:	d103      	bne.n	5914 <_close_r+0x1c>
    590c:	6823      	ldr	r3, [r4, #0]
    590e:	2b00      	cmp	r3, #0
    5910:	d000      	beq.n	5914 <_close_r+0x1c>
    5912:	602b      	str	r3, [r5, #0]
    5914:	bd38      	pop	{r3, r4, r5, pc}
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	200009f0 	.word	0x200009f0

0000591c <_fstat_r>:
    591c:	b538      	push	{r3, r4, r5, lr}
    591e:	4c07      	ldr	r4, [pc, #28]	; (593c <_fstat_r+0x20>)
    5920:	2300      	movs	r3, #0
    5922:	1c05      	adds	r5, r0, #0
    5924:	1c08      	adds	r0, r1, #0
    5926:	1c11      	adds	r1, r2, #0
    5928:	6023      	str	r3, [r4, #0]
    592a:	f7fc fb67 	bl	1ffc <_fstat>
    592e:	1c43      	adds	r3, r0, #1
    5930:	d103      	bne.n	593a <_fstat_r+0x1e>
    5932:	6823      	ldr	r3, [r4, #0]
    5934:	2b00      	cmp	r3, #0
    5936:	d000      	beq.n	593a <_fstat_r+0x1e>
    5938:	602b      	str	r3, [r5, #0]
    593a:	bd38      	pop	{r3, r4, r5, pc}
    593c:	200009f0 	.word	0x200009f0

00005940 <_isatty_r>:
    5940:	b538      	push	{r3, r4, r5, lr}
    5942:	4c07      	ldr	r4, [pc, #28]	; (5960 <_isatty_r+0x20>)
    5944:	2300      	movs	r3, #0
    5946:	1c05      	adds	r5, r0, #0
    5948:	1c08      	adds	r0, r1, #0
    594a:	6023      	str	r3, [r4, #0]
    594c:	f7fc fb5c 	bl	2008 <_isatty>
    5950:	1c43      	adds	r3, r0, #1
    5952:	d103      	bne.n	595c <_isatty_r+0x1c>
    5954:	6823      	ldr	r3, [r4, #0]
    5956:	2b00      	cmp	r3, #0
    5958:	d000      	beq.n	595c <_isatty_r+0x1c>
    595a:	602b      	str	r3, [r5, #0]
    595c:	bd38      	pop	{r3, r4, r5, pc}
    595e:	46c0      	nop			; (mov r8, r8)
    5960:	200009f0 	.word	0x200009f0

00005964 <_lseek_r>:
    5964:	b538      	push	{r3, r4, r5, lr}
    5966:	4c08      	ldr	r4, [pc, #32]	; (5988 <_lseek_r+0x24>)
    5968:	1c05      	adds	r5, r0, #0
    596a:	2000      	movs	r0, #0
    596c:	6020      	str	r0, [r4, #0]
    596e:	1c08      	adds	r0, r1, #0
    5970:	1c11      	adds	r1, r2, #0
    5972:	1c1a      	adds	r2, r3, #0
    5974:	f7fc fb4a 	bl	200c <_lseek>
    5978:	1c43      	adds	r3, r0, #1
    597a:	d103      	bne.n	5984 <_lseek_r+0x20>
    597c:	6823      	ldr	r3, [r4, #0]
    597e:	2b00      	cmp	r3, #0
    5980:	d000      	beq.n	5984 <_lseek_r+0x20>
    5982:	602b      	str	r3, [r5, #0]
    5984:	bd38      	pop	{r3, r4, r5, pc}
    5986:	46c0      	nop			; (mov r8, r8)
    5988:	200009f0 	.word	0x200009f0

0000598c <_read_r>:
    598c:	b538      	push	{r3, r4, r5, lr}
    598e:	4c08      	ldr	r4, [pc, #32]	; (59b0 <_read_r+0x24>)
    5990:	1c05      	adds	r5, r0, #0
    5992:	2000      	movs	r0, #0
    5994:	6020      	str	r0, [r4, #0]
    5996:	1c08      	adds	r0, r1, #0
    5998:	1c11      	adds	r1, r2, #0
    599a:	1c1a      	adds	r2, r3, #0
    599c:	f7fc facc 	bl	1f38 <_read>
    59a0:	1c43      	adds	r3, r0, #1
    59a2:	d103      	bne.n	59ac <_read_r+0x20>
    59a4:	6823      	ldr	r3, [r4, #0]
    59a6:	2b00      	cmp	r3, #0
    59a8:	d000      	beq.n	59ac <_read_r+0x20>
    59aa:	602b      	str	r3, [r5, #0]
    59ac:	bd38      	pop	{r3, r4, r5, pc}
    59ae:	46c0      	nop			; (mov r8, r8)
    59b0:	200009f0 	.word	0x200009f0
    59b4:	42000800 	.word	0x42000800
    59b8:	42000c00 	.word	0x42000c00
    59bc:	42001000 	.word	0x42001000
    59c0:	42001400 	.word	0x42001400
    59c4:	42001800 	.word	0x42001800
    59c8:	42001c00 	.word	0x42001c00
    59cc:	0c0b0a09 	.word	0x0c0b0a09
    59d0:	00000e0d 	.word	0x00000e0d
    59d4:	00001280 	.word	0x00001280
    59d8:	000012dc 	.word	0x000012dc
    59dc:	000012dc 	.word	0x000012dc
    59e0:	0000127a 	.word	0x0000127a
    59e4:	0000127a 	.word	0x0000127a
    59e8:	00001296 	.word	0x00001296
    59ec:	00001286 	.word	0x00001286
    59f0:	0000129c 	.word	0x0000129c
    59f4:	000012ca 	.word	0x000012ca
    59f8:	00001504 	.word	0x00001504
    59fc:	00001564 	.word	0x00001564
    5a00:	00001564 	.word	0x00001564
    5a04:	000014e4 	.word	0x000014e4
    5a08:	000014f6 	.word	0x000014f6
    5a0c:	00001512 	.word	0x00001512
    5a10:	000014e8 	.word	0x000014e8
    5a14:	00001520 	.word	0x00001520
    5a18:	00001554 	.word	0x00001554
    5a1c:	42002c00 	.word	0x42002c00
    5a20:	42003000 	.word	0x42003000
    5a24:	42003400 	.word	0x42003400
    5a28:	001c1c1b 	.word	0x001c1c1b
    5a2c:	10000800 	.word	0x10000800
    5a30:	00002000 	.word	0x00002000
    5a34:	00002820 	.word	0x00002820
    5a38:	00002994 	.word	0x00002994
    5a3c:	0000299e 	.word	0x0000299e
    5a40:	00002b34 	.word	0x00002b34
    5a44:	00002b3c 	.word	0x00002b3c
    5a48:	0000310a 	.word	0x0000310a
    5a4c:	000031c8 	.word	0x000031c8
    5a50:	00003114 	.word	0x00003114
    5a54:	00003134 	.word	0x00003134
    5a58:	000031c8 	.word	0x000031c8
    5a5c:	00003156 	.word	0x00003156
    5a60:	000031c8 	.word	0x000031c8
    5a64:	00003198 	.word	0x00003198

00005a68 <tc_interrupt_vectors.11766>:
    5a68:	00141312 20756f59 6b636f52 00000000     ....You Rock....
    5a78:	65636572 64657669 00000021 73696874     received!...this
    5a88:	636f7220 0000736b 6d206577 20656461      rocks..we made 
    5a98:	00007469 74736554 75636553 79746972     it..TestSecurity
    5aa8:	3079654b 00000000 00000043              Key0....C...

00005ab4 <_global_impure_ptr>:
    5ab4:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    5ac4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    5ad4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    5ae4:	64636261 00006665                       abcdef..

00005aec <__sf_fake_stdin>:
	...

00005b0c <__sf_fake_stdout>:
	...

00005b2c <__sf_fake_stderr>:
	...

00005b4c <_init>:
    5b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b4e:	46c0      	nop			; (mov r8, r8)
    5b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5b52:	bc08      	pop	{r3}
    5b54:	469e      	mov	lr, r3
    5b56:	4770      	bx	lr

00005b58 <__init_array_start>:
    5b58:	000000dd 	.word	0x000000dd

00005b5c <_fini>:
    5b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5b62:	bc08      	pop	{r3}
    5b64:	469e      	mov	lr, r3
    5b66:	4770      	bx	lr

00005b68 <__fini_array_start>:
    5b68:	000000b5 	.word	0x000000b5
