
register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004328  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004328  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000818  20000070  00004398  00010070  2**2
                  ALLOC
  3 .stack        00002000  20000888  00004bb0  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000295f9  00000000  00000000  00010126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000054c6  00000000  00000000  0003971f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000abb9  00000000  00000000  0003ebe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a28  00000000  00000000  0004979e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ee8  00000000  00000000  0004a1c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001de49  00000000  00000000  0004b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001655e  00000000  00000000  00068ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084ef4  00000000  00000000  0007f455  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b2c  00000000  00000000  0010434c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002888 	.word	0x20002888
       4:	00001761 	.word	0x00001761
       8:	0000175d 	.word	0x0000175d
       c:	0000175d 	.word	0x0000175d
	...
      2c:	0000175d 	.word	0x0000175d
	...
      38:	0000175d 	.word	0x0000175d
      3c:	0000175d 	.word	0x0000175d
      40:	0000175d 	.word	0x0000175d
      44:	0000175d 	.word	0x0000175d
      48:	0000175d 	.word	0x0000175d
      4c:	0000175d 	.word	0x0000175d
      50:	00000359 	.word	0x00000359
      54:	0000175d 	.word	0x0000175d
      58:	0000175d 	.word	0x0000175d
      5c:	0000175d 	.word	0x0000175d
      60:	0000175d 	.word	0x0000175d
      64:	00000739 	.word	0x00000739
      68:	00000749 	.word	0x00000749
      6c:	00000759 	.word	0x00000759
      70:	00000769 	.word	0x00000769
      74:	00000779 	.word	0x00000779
      78:	00000789 	.word	0x00000789
      7c:	0000175d 	.word	0x0000175d
      80:	0000175d 	.word	0x0000175d
      84:	0000175d 	.word	0x0000175d
      88:	000013fd 	.word	0x000013fd
      8c:	0000140d 	.word	0x0000140d
      90:	0000141d 	.word	0x0000141d
	...
      9c:	0000175d 	.word	0x0000175d
      a0:	0000175d 	.word	0x0000175d
      a4:	00000000 	.word	0x00000000
      a8:	0000175d 	.word	0x0000175d
      ac:	0000175d 	.word	0x0000175d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004328 	.word	0x00004328

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00004328 	.word	0x00004328
     108:	20000074 	.word	0x20000074
     10c:	00004328 	.word	0x00004328
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
     114:	b510      	push	{r4, lr}
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00001125 	.word	0x00001125
     140:	00003f31 	.word	0x00003f31
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_us>:
     150:	b530      	push	{r4, r5, lr}
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_us+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_us+0x28>)
     158:	2500      	movs	r5, #0
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
     15e:	e006      	b.n	16e <delay_cycles_us+0x1e>
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_us+0x1e>
     164:	6054      	str	r4, [r2, #4]
     166:	6095      	str	r5, [r2, #8]
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_us+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_us+0x10>
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000000 	.word	0x20000000
     178:	e000e010 	.word	0xe000e010

0000017c <delay_cycles_ms>:
     17c:	b530      	push	{r4, r5, lr}
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <delay_cycles_ms+0x24>)
     180:	681c      	ldr	r4, [r3, #0]
     182:	4a08      	ldr	r2, [pc, #32]	; (1a4 <delay_cycles_ms+0x28>)
     184:	2500      	movs	r5, #0
     186:	2180      	movs	r1, #128	; 0x80
     188:	0249      	lsls	r1, r1, #9
     18a:	e006      	b.n	19a <delay_cycles_ms+0x1e>
     18c:	2c00      	cmp	r4, #0
     18e:	d004      	beq.n	19a <delay_cycles_ms+0x1e>
     190:	6054      	str	r4, [r2, #4]
     192:	6095      	str	r5, [r2, #8]
     194:	6813      	ldr	r3, [r2, #0]
     196:	420b      	tst	r3, r1
     198:	d0fc      	beq.n	194 <delay_cycles_ms+0x18>
     19a:	3801      	subs	r0, #1
     19c:	d2f6      	bcs.n	18c <delay_cycles_ms+0x10>
     19e:	bd30      	pop	{r4, r5, pc}
     1a0:	20000004 	.word	0x20000004
     1a4:	e000e010 	.word	0xe000e010

000001a8 <cpu_irq_enter_critical>:
     1a8:	4b0c      	ldr	r3, [pc, #48]	; (1dc <cpu_irq_enter_critical+0x34>)
     1aa:	681b      	ldr	r3, [r3, #0]
     1ac:	2b00      	cmp	r3, #0
     1ae:	d110      	bne.n	1d2 <cpu_irq_enter_critical+0x2a>
     1b0:	f3ef 8310 	mrs	r3, PRIMASK
     1b4:	2b00      	cmp	r3, #0
     1b6:	d109      	bne.n	1cc <cpu_irq_enter_critical+0x24>
     1b8:	b672      	cpsid	i
     1ba:	f3bf 8f5f 	dmb	sy
     1be:	2200      	movs	r2, #0
     1c0:	4b07      	ldr	r3, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x38>)
     1c2:	701a      	strb	r2, [r3, #0]
     1c4:	2201      	movs	r2, #1
     1c6:	4b07      	ldr	r3, [pc, #28]	; (1e4 <cpu_irq_enter_critical+0x3c>)
     1c8:	701a      	strb	r2, [r3, #0]
     1ca:	e002      	b.n	1d2 <cpu_irq_enter_critical+0x2a>
     1cc:	2200      	movs	r2, #0
     1ce:	4b05      	ldr	r3, [pc, #20]	; (1e4 <cpu_irq_enter_critical+0x3c>)
     1d0:	701a      	strb	r2, [r3, #0]
     1d2:	4b02      	ldr	r3, [pc, #8]	; (1dc <cpu_irq_enter_critical+0x34>)
     1d4:	681a      	ldr	r2, [r3, #0]
     1d6:	3201      	adds	r2, #1
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	2000008c 	.word	0x2000008c
     1e0:	20000008 	.word	0x20000008
     1e4:	20000090 	.word	0x20000090

000001e8 <cpu_irq_leave_critical>:
     1e8:	4b08      	ldr	r3, [pc, #32]	; (20c <cpu_irq_leave_critical+0x24>)
     1ea:	681a      	ldr	r2, [r3, #0]
     1ec:	3a01      	subs	r2, #1
     1ee:	601a      	str	r2, [r3, #0]
     1f0:	681b      	ldr	r3, [r3, #0]
     1f2:	2b00      	cmp	r3, #0
     1f4:	d109      	bne.n	20a <cpu_irq_leave_critical+0x22>
     1f6:	4b06      	ldr	r3, [pc, #24]	; (210 <cpu_irq_leave_critical+0x28>)
     1f8:	781b      	ldrb	r3, [r3, #0]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d005      	beq.n	20a <cpu_irq_leave_critical+0x22>
     1fe:	2201      	movs	r2, #1
     200:	4b04      	ldr	r3, [pc, #16]	; (214 <cpu_irq_leave_critical+0x2c>)
     202:	701a      	strb	r2, [r3, #0]
     204:	f3bf 8f5f 	dmb	sy
     208:	b662      	cpsie	i
     20a:	4770      	bx	lr
     20c:	2000008c 	.word	0x2000008c
     210:	20000090 	.word	0x20000090
     214:	20000008 	.word	0x20000008

00000218 <system_board_init>:
     218:	b5f0      	push	{r4, r5, r6, r7, lr}
     21a:	4647      	mov	r7, r8
     21c:	b480      	push	{r7}
     21e:	b082      	sub	sp, #8
     220:	ac01      	add	r4, sp, #4
     222:	2601      	movs	r6, #1
     224:	7066      	strb	r6, [r4, #1]
     226:	2700      	movs	r7, #0
     228:	70a7      	strb	r7, [r4, #2]
     22a:	7026      	strb	r6, [r4, #0]
     22c:	2013      	movs	r0, #19
     22e:	1c21      	adds	r1, r4, #0
     230:	4d27      	ldr	r5, [pc, #156]	; (2d0 <system_board_init+0xb8>)
     232:	47a8      	blx	r5
     234:	4a27      	ldr	r2, [pc, #156]	; (2d4 <system_board_init+0xbc>)
     236:	4690      	mov	r8, r2
     238:	2380      	movs	r3, #128	; 0x80
     23a:	031b      	lsls	r3, r3, #12
     23c:	6193      	str	r3, [r2, #24]
     23e:	7027      	strb	r7, [r4, #0]
     240:	7066      	strb	r6, [r4, #1]
     242:	201c      	movs	r0, #28
     244:	1c21      	adds	r1, r4, #0
     246:	47a8      	blx	r5
     248:	7066      	strb	r6, [r4, #1]
     24a:	70a7      	strb	r7, [r4, #2]
     24c:	7026      	strb	r6, [r4, #0]
     24e:	2052      	movs	r0, #82	; 0x52
     250:	1c21      	adds	r1, r4, #0
     252:	47a8      	blx	r5
     254:	203e      	movs	r0, #62	; 0x3e
     256:	1c21      	adds	r1, r4, #0
     258:	47a8      	blx	r5
     25a:	203f      	movs	r0, #63	; 0x3f
     25c:	1c21      	adds	r1, r4, #0
     25e:	47a8      	blx	r5
     260:	202f      	movs	r0, #47	; 0x2f
     262:	1c21      	adds	r1, r4, #0
     264:	47a8      	blx	r5
     266:	2014      	movs	r0, #20
     268:	1c21      	adds	r1, r4, #0
     26a:	47a8      	blx	r5
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	02d2      	lsls	r2, r2, #11
     270:	4b19      	ldr	r3, [pc, #100]	; (2d8 <system_board_init+0xc0>)
     272:	619a      	str	r2, [r3, #24]
     274:	3b80      	subs	r3, #128	; 0x80
     276:	2280      	movs	r2, #128	; 0x80
     278:	05d2      	lsls	r2, r2, #23
     27a:	619a      	str	r2, [r3, #24]
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	0612      	lsls	r2, r2, #24
     280:	619a      	str	r2, [r3, #24]
     282:	2280      	movs	r2, #128	; 0x80
     284:	0212      	lsls	r2, r2, #8
     286:	619a      	str	r2, [r3, #24]
     288:	2380      	movs	r3, #128	; 0x80
     28a:	035b      	lsls	r3, r3, #13
     28c:	4642      	mov	r2, r8
     28e:	6193      	str	r3, [r2, #24]
     290:	7027      	strb	r7, [r4, #0]
     292:	2053      	movs	r0, #83	; 0x53
     294:	1c21      	adds	r1, r4, #0
     296:	47a8      	blx	r5
     298:	4b10      	ldr	r3, [pc, #64]	; (2dc <system_board_init+0xc4>)
     29a:	6a19      	ldr	r1, [r3, #32]
     29c:	2280      	movs	r2, #128	; 0x80
     29e:	0392      	lsls	r2, r2, #14
     2a0:	430a      	orrs	r2, r1
     2a2:	621a      	str	r2, [r3, #32]
     2a4:	2204      	movs	r2, #4
     2a6:	4b0e      	ldr	r3, [pc, #56]	; (2e0 <system_board_init+0xc8>)
     2a8:	801a      	strh	r2, [r3, #0]
     2aa:	466b      	mov	r3, sp
     2ac:	709e      	strb	r6, [r3, #2]
     2ae:	70df      	strb	r7, [r3, #3]
     2b0:	2305      	movs	r3, #5
     2b2:	466a      	mov	r2, sp
     2b4:	7013      	strb	r3, [r2, #0]
     2b6:	7056      	strb	r6, [r2, #1]
     2b8:	2009      	movs	r0, #9
     2ba:	4669      	mov	r1, sp
     2bc:	4c09      	ldr	r4, [pc, #36]	; (2e4 <system_board_init+0xcc>)
     2be:	47a0      	blx	r4
     2c0:	200c      	movs	r0, #12
     2c2:	4669      	mov	r1, sp
     2c4:	47a0      	blx	r4
     2c6:	b002      	add	sp, #8
     2c8:	bc04      	pop	{r2}
     2ca:	4690      	mov	r8, r2
     2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	000004d9 	.word	0x000004d9
     2d4:	41004400 	.word	0x41004400
     2d8:	41004500 	.word	0x41004500
     2dc:	40000400 	.word	0x40000400
     2e0:	42005400 	.word	0x42005400
     2e4:	00001319 	.word	0x00001319

000002e8 <extint_register_callback>:
     2e8:	2317      	movs	r3, #23
     2ea:	2a00      	cmp	r2, #0
     2ec:	d10f      	bne.n	30e <extint_register_callback+0x26>
     2ee:	008b      	lsls	r3, r1, #2
     2f0:	4a08      	ldr	r2, [pc, #32]	; (314 <extint_register_callback+0x2c>)
     2f2:	589a      	ldr	r2, [r3, r2]
     2f4:	2a00      	cmp	r2, #0
     2f6:	d104      	bne.n	302 <extint_register_callback+0x1a>
     2f8:	1c19      	adds	r1, r3, #0
     2fa:	4b06      	ldr	r3, [pc, #24]	; (314 <extint_register_callback+0x2c>)
     2fc:	50c8      	str	r0, [r1, r3]
     2fe:	2300      	movs	r3, #0
     300:	e005      	b.n	30e <extint_register_callback+0x26>
     302:	231d      	movs	r3, #29
     304:	1a12      	subs	r2, r2, r0
     306:	1e50      	subs	r0, r2, #1
     308:	4182      	sbcs	r2, r0
     30a:	4252      	negs	r2, r2
     30c:	4013      	ands	r3, r2
     30e:	1c18      	adds	r0, r3, #0
     310:	4770      	bx	lr
     312:	46c0      	nop			; (mov r8, r8)
     314:	20000734 	.word	0x20000734

00000318 <extint_chan_enable_callback>:
     318:	2317      	movs	r3, #23
     31a:	2900      	cmp	r1, #0
     31c:	d107      	bne.n	32e <extint_chan_enable_callback+0x16>
     31e:	2300      	movs	r3, #0
     320:	281f      	cmp	r0, #31
     322:	d800      	bhi.n	326 <extint_chan_enable_callback+0xe>
     324:	4b03      	ldr	r3, [pc, #12]	; (334 <extint_chan_enable_callback+0x1c>)
     326:	2201      	movs	r2, #1
     328:	4082      	lsls	r2, r0
     32a:	60da      	str	r2, [r3, #12]
     32c:	2300      	movs	r3, #0
     32e:	1c18      	adds	r0, r3, #0
     330:	4770      	bx	lr
     332:	46c0      	nop			; (mov r8, r8)
     334:	40001800 	.word	0x40001800

00000338 <extint_chan_disable_callback>:
     338:	2317      	movs	r3, #23
     33a:	2900      	cmp	r1, #0
     33c:	d107      	bne.n	34e <extint_chan_disable_callback+0x16>
     33e:	2300      	movs	r3, #0
     340:	281f      	cmp	r0, #31
     342:	d800      	bhi.n	346 <extint_chan_disable_callback+0xe>
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <extint_chan_disable_callback+0x1c>)
     346:	2201      	movs	r2, #1
     348:	4082      	lsls	r2, r0
     34a:	609a      	str	r2, [r3, #8]
     34c:	2300      	movs	r3, #0
     34e:	1c18      	adds	r0, r3, #0
     350:	4770      	bx	lr
     352:	46c0      	nop			; (mov r8, r8)
     354:	40001800 	.word	0x40001800

00000358 <EIC_Handler>:
     358:	b570      	push	{r4, r5, r6, lr}
     35a:	2200      	movs	r2, #0
     35c:	4b16      	ldr	r3, [pc, #88]	; (3b8 <EIC_Handler+0x60>)
     35e:	701a      	strb	r2, [r3, #0]
     360:	2300      	movs	r3, #0
     362:	261f      	movs	r6, #31
     364:	4d15      	ldr	r5, [pc, #84]	; (3bc <EIC_Handler+0x64>)
     366:	4c14      	ldr	r4, [pc, #80]	; (3b8 <EIC_Handler+0x60>)
     368:	2b1f      	cmp	r3, #31
     36a:	d910      	bls.n	38e <EIC_Handler+0x36>
     36c:	e019      	b.n	3a2 <EIC_Handler+0x4a>
     36e:	4914      	ldr	r1, [pc, #80]	; (3c0 <EIC_Handler+0x68>)
     370:	e000      	b.n	374 <EIC_Handler+0x1c>
     372:	2100      	movs	r1, #0
     374:	610a      	str	r2, [r1, #16]
     376:	009b      	lsls	r3, r3, #2
     378:	595b      	ldr	r3, [r3, r5]
     37a:	2b00      	cmp	r3, #0
     37c:	d000      	beq.n	380 <EIC_Handler+0x28>
     37e:	4798      	blx	r3
     380:	7823      	ldrb	r3, [r4, #0]
     382:	3301      	adds	r3, #1
     384:	b2db      	uxtb	r3, r3
     386:	7023      	strb	r3, [r4, #0]
     388:	2b0f      	cmp	r3, #15
     38a:	d814      	bhi.n	3b6 <EIC_Handler+0x5e>
     38c:	e7ec      	b.n	368 <EIC_Handler+0x10>
     38e:	1c32      	adds	r2, r6, #0
     390:	401a      	ands	r2, r3
     392:	2101      	movs	r1, #1
     394:	4091      	lsls	r1, r2
     396:	1c0a      	adds	r2, r1, #0
     398:	4909      	ldr	r1, [pc, #36]	; (3c0 <EIC_Handler+0x68>)
     39a:	6909      	ldr	r1, [r1, #16]
     39c:	4211      	tst	r1, r2
     39e:	d1e6      	bne.n	36e <EIC_Handler+0x16>
     3a0:	e7ee      	b.n	380 <EIC_Handler+0x28>
     3a2:	1c32      	adds	r2, r6, #0
     3a4:	401a      	ands	r2, r3
     3a6:	2101      	movs	r1, #1
     3a8:	4091      	lsls	r1, r2
     3aa:	1c0a      	adds	r2, r1, #0
     3ac:	2100      	movs	r1, #0
     3ae:	6909      	ldr	r1, [r1, #16]
     3b0:	4211      	tst	r1, r2
     3b2:	d1de      	bne.n	372 <EIC_Handler+0x1a>
     3b4:	e7e4      	b.n	380 <EIC_Handler+0x28>
     3b6:	bd70      	pop	{r4, r5, r6, pc}
     3b8:	20000730 	.word	0x20000730
     3bc:	20000734 	.word	0x20000734
     3c0:	40001800 	.word	0x40001800

000003c4 <_extint_enable>:
     3c4:	4b05      	ldr	r3, [pc, #20]	; (3dc <_extint_enable+0x18>)
     3c6:	7819      	ldrb	r1, [r3, #0]
     3c8:	2202      	movs	r2, #2
     3ca:	430a      	orrs	r2, r1
     3cc:	701a      	strb	r2, [r3, #0]
     3ce:	1c1a      	adds	r2, r3, #0
     3d0:	7853      	ldrb	r3, [r2, #1]
     3d2:	b25b      	sxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	dbfb      	blt.n	3d0 <_extint_enable+0xc>
     3d8:	4770      	bx	lr
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	40001800 	.word	0x40001800

000003e0 <_system_extint_init>:
     3e0:	b500      	push	{lr}
     3e2:	b083      	sub	sp, #12
     3e4:	4b12      	ldr	r3, [pc, #72]	; (430 <_system_extint_init+0x50>)
     3e6:	6999      	ldr	r1, [r3, #24]
     3e8:	2240      	movs	r2, #64	; 0x40
     3ea:	430a      	orrs	r2, r1
     3ec:	619a      	str	r2, [r3, #24]
     3ee:	a901      	add	r1, sp, #4
     3f0:	2300      	movs	r3, #0
     3f2:	700b      	strb	r3, [r1, #0]
     3f4:	2005      	movs	r0, #5
     3f6:	4b0f      	ldr	r3, [pc, #60]	; (434 <_system_extint_init+0x54>)
     3f8:	4798      	blx	r3
     3fa:	2005      	movs	r0, #5
     3fc:	4b0e      	ldr	r3, [pc, #56]	; (438 <_system_extint_init+0x58>)
     3fe:	4798      	blx	r3
     400:	4b0e      	ldr	r3, [pc, #56]	; (43c <_system_extint_init+0x5c>)
     402:	7819      	ldrb	r1, [r3, #0]
     404:	2201      	movs	r2, #1
     406:	430a      	orrs	r2, r1
     408:	701a      	strb	r2, [r3, #0]
     40a:	1c1a      	adds	r2, r3, #0
     40c:	7853      	ldrb	r3, [r2, #1]
     40e:	b25b      	sxtb	r3, r3
     410:	2b00      	cmp	r3, #0
     412:	dbfb      	blt.n	40c <_system_extint_init+0x2c>
     414:	4b0a      	ldr	r3, [pc, #40]	; (440 <_system_extint_init+0x60>)
     416:	1c19      	adds	r1, r3, #0
     418:	3140      	adds	r1, #64	; 0x40
     41a:	2200      	movs	r2, #0
     41c:	c304      	stmia	r3!, {r2}
     41e:	428b      	cmp	r3, r1
     420:	d1fc      	bne.n	41c <_system_extint_init+0x3c>
     422:	2210      	movs	r2, #16
     424:	4b07      	ldr	r3, [pc, #28]	; (444 <_system_extint_init+0x64>)
     426:	601a      	str	r2, [r3, #0]
     428:	4b07      	ldr	r3, [pc, #28]	; (448 <_system_extint_init+0x68>)
     42a:	4798      	blx	r3
     42c:	b003      	add	sp, #12
     42e:	bd00      	pop	{pc}
     430:	40000400 	.word	0x40000400
     434:	0000123d 	.word	0x0000123d
     438:	000011b1 	.word	0x000011b1
     43c:	40001800 	.word	0x40001800
     440:	20000734 	.word	0x20000734
     444:	e000e100 	.word	0xe000e100
     448:	000003c5 	.word	0x000003c5

0000044c <extint_chan_get_config_defaults>:
     44c:	2300      	movs	r3, #0
     44e:	6003      	str	r3, [r0, #0]
     450:	6043      	str	r3, [r0, #4]
     452:	2201      	movs	r2, #1
     454:	7202      	strb	r2, [r0, #8]
     456:	7242      	strb	r2, [r0, #9]
     458:	7283      	strb	r3, [r0, #10]
     45a:	2302      	movs	r3, #2
     45c:	72c3      	strb	r3, [r0, #11]
     45e:	4770      	bx	lr

00000460 <extint_chan_set_config>:
     460:	b5f0      	push	{r4, r5, r6, r7, lr}
     462:	b083      	sub	sp, #12
     464:	1c05      	adds	r5, r0, #0
     466:	1c0c      	adds	r4, r1, #0
     468:	a901      	add	r1, sp, #4
     46a:	2300      	movs	r3, #0
     46c:	704b      	strb	r3, [r1, #1]
     46e:	70cb      	strb	r3, [r1, #3]
     470:	6863      	ldr	r3, [r4, #4]
     472:	700b      	strb	r3, [r1, #0]
     474:	7a23      	ldrb	r3, [r4, #8]
     476:	708b      	strb	r3, [r1, #2]
     478:	7820      	ldrb	r0, [r4, #0]
     47a:	4b15      	ldr	r3, [pc, #84]	; (4d0 <extint_chan_set_config+0x70>)
     47c:	4798      	blx	r3
     47e:	2300      	movs	r3, #0
     480:	2d1f      	cmp	r5, #31
     482:	d800      	bhi.n	486 <extint_chan_set_config+0x26>
     484:	4b13      	ldr	r3, [pc, #76]	; (4d4 <extint_chan_set_config+0x74>)
     486:	2107      	movs	r1, #7
     488:	4029      	ands	r1, r5
     48a:	0089      	lsls	r1, r1, #2
     48c:	7ae0      	ldrb	r0, [r4, #11]
     48e:	7aa2      	ldrb	r2, [r4, #10]
     490:	2a00      	cmp	r2, #0
     492:	d001      	beq.n	498 <extint_chan_set_config+0x38>
     494:	2208      	movs	r2, #8
     496:	4310      	orrs	r0, r2
     498:	08ea      	lsrs	r2, r5, #3
     49a:	0092      	lsls	r2, r2, #2
     49c:	189a      	adds	r2, r3, r2
     49e:	6996      	ldr	r6, [r2, #24]
     4a0:	4088      	lsls	r0, r1
     4a2:	270f      	movs	r7, #15
     4a4:	408f      	lsls	r7, r1
     4a6:	43be      	bics	r6, r7
     4a8:	1c31      	adds	r1, r6, #0
     4aa:	4301      	orrs	r1, r0
     4ac:	6191      	str	r1, [r2, #24]
     4ae:	7a62      	ldrb	r2, [r4, #9]
     4b0:	2a00      	cmp	r2, #0
     4b2:	d006      	beq.n	4c2 <extint_chan_set_config+0x62>
     4b4:	695a      	ldr	r2, [r3, #20]
     4b6:	2101      	movs	r1, #1
     4b8:	40a9      	lsls	r1, r5
     4ba:	1c0d      	adds	r5, r1, #0
     4bc:	4315      	orrs	r5, r2
     4be:	615d      	str	r5, [r3, #20]
     4c0:	e004      	b.n	4cc <extint_chan_set_config+0x6c>
     4c2:	695a      	ldr	r2, [r3, #20]
     4c4:	2101      	movs	r1, #1
     4c6:	40a9      	lsls	r1, r5
     4c8:	438a      	bics	r2, r1
     4ca:	615a      	str	r2, [r3, #20]
     4cc:	b003      	add	sp, #12
     4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4d0:	00001319 	.word	0x00001319
     4d4:	40001800 	.word	0x40001800

000004d8 <port_pin_set_config>:
     4d8:	b500      	push	{lr}
     4da:	b083      	sub	sp, #12
     4dc:	ab01      	add	r3, sp, #4
     4de:	2280      	movs	r2, #128	; 0x80
     4e0:	701a      	strb	r2, [r3, #0]
     4e2:	780a      	ldrb	r2, [r1, #0]
     4e4:	705a      	strb	r2, [r3, #1]
     4e6:	784a      	ldrb	r2, [r1, #1]
     4e8:	709a      	strb	r2, [r3, #2]
     4ea:	788a      	ldrb	r2, [r1, #2]
     4ec:	70da      	strb	r2, [r3, #3]
     4ee:	1c19      	adds	r1, r3, #0
     4f0:	4b01      	ldr	r3, [pc, #4]	; (4f8 <port_pin_set_config+0x20>)
     4f2:	4798      	blx	r3
     4f4:	b003      	add	sp, #12
     4f6:	bd00      	pop	{pc}
     4f8:	00001319 	.word	0x00001319

000004fc <_sercom_get_sync_baud_val>:
     4fc:	b510      	push	{r4, lr}
     4fe:	1c03      	adds	r3, r0, #0
     500:	0849      	lsrs	r1, r1, #1
     502:	2040      	movs	r0, #64	; 0x40
     504:	4299      	cmp	r1, r3
     506:	d30c      	bcc.n	522 <_sercom_get_sync_baud_val+0x26>
     508:	2400      	movs	r4, #0
     50a:	1ac9      	subs	r1, r1, r3
     50c:	1c60      	adds	r0, r4, #1
     50e:	b280      	uxth	r0, r0
     510:	428b      	cmp	r3, r1
     512:	d801      	bhi.n	518 <_sercom_get_sync_baud_val+0x1c>
     514:	1c04      	adds	r4, r0, #0
     516:	e7f8      	b.n	50a <_sercom_get_sync_baud_val+0xe>
     518:	2040      	movs	r0, #64	; 0x40
     51a:	2cff      	cmp	r4, #255	; 0xff
     51c:	d801      	bhi.n	522 <_sercom_get_sync_baud_val+0x26>
     51e:	8014      	strh	r4, [r2, #0]
     520:	2000      	movs	r0, #0
     522:	bd10      	pop	{r4, pc}

00000524 <sercom_set_gclk_generator>:
     524:	b510      	push	{r4, lr}
     526:	b082      	sub	sp, #8
     528:	1c04      	adds	r4, r0, #0
     52a:	4b0f      	ldr	r3, [pc, #60]	; (568 <sercom_set_gclk_generator+0x44>)
     52c:	781b      	ldrb	r3, [r3, #0]
     52e:	2b00      	cmp	r3, #0
     530:	d001      	beq.n	536 <sercom_set_gclk_generator+0x12>
     532:	2900      	cmp	r1, #0
     534:	d00d      	beq.n	552 <sercom_set_gclk_generator+0x2e>
     536:	a901      	add	r1, sp, #4
     538:	700c      	strb	r4, [r1, #0]
     53a:	2013      	movs	r0, #19
     53c:	4b0b      	ldr	r3, [pc, #44]	; (56c <sercom_set_gclk_generator+0x48>)
     53e:	4798      	blx	r3
     540:	2013      	movs	r0, #19
     542:	4b0b      	ldr	r3, [pc, #44]	; (570 <sercom_set_gclk_generator+0x4c>)
     544:	4798      	blx	r3
     546:	4b08      	ldr	r3, [pc, #32]	; (568 <sercom_set_gclk_generator+0x44>)
     548:	705c      	strb	r4, [r3, #1]
     54a:	2201      	movs	r2, #1
     54c:	701a      	strb	r2, [r3, #0]
     54e:	2000      	movs	r0, #0
     550:	e007      	b.n	562 <sercom_set_gclk_generator+0x3e>
     552:	4b05      	ldr	r3, [pc, #20]	; (568 <sercom_set_gclk_generator+0x44>)
     554:	785a      	ldrb	r2, [r3, #1]
     556:	201d      	movs	r0, #29
     558:	1b14      	subs	r4, r2, r4
     55a:	1e62      	subs	r2, r4, #1
     55c:	4194      	sbcs	r4, r2
     55e:	4264      	negs	r4, r4
     560:	4020      	ands	r0, r4
     562:	b002      	add	sp, #8
     564:	bd10      	pop	{r4, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	20000094 	.word	0x20000094
     56c:	0000123d 	.word	0x0000123d
     570:	000011b1 	.word	0x000011b1

00000574 <_sercom_get_default_pad>:
     574:	4b44      	ldr	r3, [pc, #272]	; (688 <_sercom_get_default_pad+0x114>)
     576:	4298      	cmp	r0, r3
     578:	d033      	beq.n	5e2 <_sercom_get_default_pad+0x6e>
     57a:	d806      	bhi.n	58a <_sercom_get_default_pad+0x16>
     57c:	4b43      	ldr	r3, [pc, #268]	; (68c <_sercom_get_default_pad+0x118>)
     57e:	4298      	cmp	r0, r3
     580:	d00d      	beq.n	59e <_sercom_get_default_pad+0x2a>
     582:	4b43      	ldr	r3, [pc, #268]	; (690 <_sercom_get_default_pad+0x11c>)
     584:	4298      	cmp	r0, r3
     586:	d01b      	beq.n	5c0 <_sercom_get_default_pad+0x4c>
     588:	e06f      	b.n	66a <_sercom_get_default_pad+0xf6>
     58a:	4b42      	ldr	r3, [pc, #264]	; (694 <_sercom_get_default_pad+0x120>)
     58c:	4298      	cmp	r0, r3
     58e:	d04a      	beq.n	626 <_sercom_get_default_pad+0xb2>
     590:	4b41      	ldr	r3, [pc, #260]	; (698 <_sercom_get_default_pad+0x124>)
     592:	4298      	cmp	r0, r3
     594:	d058      	beq.n	648 <_sercom_get_default_pad+0xd4>
     596:	4b41      	ldr	r3, [pc, #260]	; (69c <_sercom_get_default_pad+0x128>)
     598:	4298      	cmp	r0, r3
     59a:	d166      	bne.n	66a <_sercom_get_default_pad+0xf6>
     59c:	e032      	b.n	604 <_sercom_get_default_pad+0x90>
     59e:	2901      	cmp	r1, #1
     5a0:	d065      	beq.n	66e <_sercom_get_default_pad+0xfa>
     5a2:	2900      	cmp	r1, #0
     5a4:	d004      	beq.n	5b0 <_sercom_get_default_pad+0x3c>
     5a6:	2902      	cmp	r1, #2
     5a8:	d006      	beq.n	5b8 <_sercom_get_default_pad+0x44>
     5aa:	2903      	cmp	r1, #3
     5ac:	d006      	beq.n	5bc <_sercom_get_default_pad+0x48>
     5ae:	e001      	b.n	5b4 <_sercom_get_default_pad+0x40>
     5b0:	483b      	ldr	r0, [pc, #236]	; (6a0 <_sercom_get_default_pad+0x12c>)
     5b2:	e067      	b.n	684 <_sercom_get_default_pad+0x110>
     5b4:	2000      	movs	r0, #0
     5b6:	e065      	b.n	684 <_sercom_get_default_pad+0x110>
     5b8:	483a      	ldr	r0, [pc, #232]	; (6a4 <_sercom_get_default_pad+0x130>)
     5ba:	e063      	b.n	684 <_sercom_get_default_pad+0x110>
     5bc:	483a      	ldr	r0, [pc, #232]	; (6a8 <_sercom_get_default_pad+0x134>)
     5be:	e061      	b.n	684 <_sercom_get_default_pad+0x110>
     5c0:	2901      	cmp	r1, #1
     5c2:	d056      	beq.n	672 <_sercom_get_default_pad+0xfe>
     5c4:	2900      	cmp	r1, #0
     5c6:	d004      	beq.n	5d2 <_sercom_get_default_pad+0x5e>
     5c8:	2902      	cmp	r1, #2
     5ca:	d006      	beq.n	5da <_sercom_get_default_pad+0x66>
     5cc:	2903      	cmp	r1, #3
     5ce:	d006      	beq.n	5de <_sercom_get_default_pad+0x6a>
     5d0:	e001      	b.n	5d6 <_sercom_get_default_pad+0x62>
     5d2:	2003      	movs	r0, #3
     5d4:	e056      	b.n	684 <_sercom_get_default_pad+0x110>
     5d6:	2000      	movs	r0, #0
     5d8:	e054      	b.n	684 <_sercom_get_default_pad+0x110>
     5da:	4834      	ldr	r0, [pc, #208]	; (6ac <_sercom_get_default_pad+0x138>)
     5dc:	e052      	b.n	684 <_sercom_get_default_pad+0x110>
     5de:	4834      	ldr	r0, [pc, #208]	; (6b0 <_sercom_get_default_pad+0x13c>)
     5e0:	e050      	b.n	684 <_sercom_get_default_pad+0x110>
     5e2:	2901      	cmp	r1, #1
     5e4:	d047      	beq.n	676 <_sercom_get_default_pad+0x102>
     5e6:	2900      	cmp	r1, #0
     5e8:	d004      	beq.n	5f4 <_sercom_get_default_pad+0x80>
     5ea:	2902      	cmp	r1, #2
     5ec:	d006      	beq.n	5fc <_sercom_get_default_pad+0x88>
     5ee:	2903      	cmp	r1, #3
     5f0:	d006      	beq.n	600 <_sercom_get_default_pad+0x8c>
     5f2:	e001      	b.n	5f8 <_sercom_get_default_pad+0x84>
     5f4:	482f      	ldr	r0, [pc, #188]	; (6b4 <_sercom_get_default_pad+0x140>)
     5f6:	e045      	b.n	684 <_sercom_get_default_pad+0x110>
     5f8:	2000      	movs	r0, #0
     5fa:	e043      	b.n	684 <_sercom_get_default_pad+0x110>
     5fc:	482e      	ldr	r0, [pc, #184]	; (6b8 <_sercom_get_default_pad+0x144>)
     5fe:	e041      	b.n	684 <_sercom_get_default_pad+0x110>
     600:	482e      	ldr	r0, [pc, #184]	; (6bc <_sercom_get_default_pad+0x148>)
     602:	e03f      	b.n	684 <_sercom_get_default_pad+0x110>
     604:	2901      	cmp	r1, #1
     606:	d038      	beq.n	67a <_sercom_get_default_pad+0x106>
     608:	2900      	cmp	r1, #0
     60a:	d004      	beq.n	616 <_sercom_get_default_pad+0xa2>
     60c:	2902      	cmp	r1, #2
     60e:	d006      	beq.n	61e <_sercom_get_default_pad+0xaa>
     610:	2903      	cmp	r1, #3
     612:	d006      	beq.n	622 <_sercom_get_default_pad+0xae>
     614:	e001      	b.n	61a <_sercom_get_default_pad+0xa6>
     616:	482a      	ldr	r0, [pc, #168]	; (6c0 <_sercom_get_default_pad+0x14c>)
     618:	e034      	b.n	684 <_sercom_get_default_pad+0x110>
     61a:	2000      	movs	r0, #0
     61c:	e032      	b.n	684 <_sercom_get_default_pad+0x110>
     61e:	4829      	ldr	r0, [pc, #164]	; (6c4 <_sercom_get_default_pad+0x150>)
     620:	e030      	b.n	684 <_sercom_get_default_pad+0x110>
     622:	4829      	ldr	r0, [pc, #164]	; (6c8 <_sercom_get_default_pad+0x154>)
     624:	e02e      	b.n	684 <_sercom_get_default_pad+0x110>
     626:	2901      	cmp	r1, #1
     628:	d029      	beq.n	67e <_sercom_get_default_pad+0x10a>
     62a:	2900      	cmp	r1, #0
     62c:	d004      	beq.n	638 <_sercom_get_default_pad+0xc4>
     62e:	2902      	cmp	r1, #2
     630:	d006      	beq.n	640 <_sercom_get_default_pad+0xcc>
     632:	2903      	cmp	r1, #3
     634:	d006      	beq.n	644 <_sercom_get_default_pad+0xd0>
     636:	e001      	b.n	63c <_sercom_get_default_pad+0xc8>
     638:	4824      	ldr	r0, [pc, #144]	; (6cc <_sercom_get_default_pad+0x158>)
     63a:	e023      	b.n	684 <_sercom_get_default_pad+0x110>
     63c:	2000      	movs	r0, #0
     63e:	e021      	b.n	684 <_sercom_get_default_pad+0x110>
     640:	4823      	ldr	r0, [pc, #140]	; (6d0 <_sercom_get_default_pad+0x15c>)
     642:	e01f      	b.n	684 <_sercom_get_default_pad+0x110>
     644:	4823      	ldr	r0, [pc, #140]	; (6d4 <_sercom_get_default_pad+0x160>)
     646:	e01d      	b.n	684 <_sercom_get_default_pad+0x110>
     648:	2901      	cmp	r1, #1
     64a:	d01a      	beq.n	682 <_sercom_get_default_pad+0x10e>
     64c:	2900      	cmp	r1, #0
     64e:	d004      	beq.n	65a <_sercom_get_default_pad+0xe6>
     650:	2902      	cmp	r1, #2
     652:	d006      	beq.n	662 <_sercom_get_default_pad+0xee>
     654:	2903      	cmp	r1, #3
     656:	d006      	beq.n	666 <_sercom_get_default_pad+0xf2>
     658:	e001      	b.n	65e <_sercom_get_default_pad+0xea>
     65a:	481f      	ldr	r0, [pc, #124]	; (6d8 <_sercom_get_default_pad+0x164>)
     65c:	e012      	b.n	684 <_sercom_get_default_pad+0x110>
     65e:	2000      	movs	r0, #0
     660:	e010      	b.n	684 <_sercom_get_default_pad+0x110>
     662:	481e      	ldr	r0, [pc, #120]	; (6dc <_sercom_get_default_pad+0x168>)
     664:	e00e      	b.n	684 <_sercom_get_default_pad+0x110>
     666:	481e      	ldr	r0, [pc, #120]	; (6e0 <_sercom_get_default_pad+0x16c>)
     668:	e00c      	b.n	684 <_sercom_get_default_pad+0x110>
     66a:	2000      	movs	r0, #0
     66c:	e00a      	b.n	684 <_sercom_get_default_pad+0x110>
     66e:	481d      	ldr	r0, [pc, #116]	; (6e4 <_sercom_get_default_pad+0x170>)
     670:	e008      	b.n	684 <_sercom_get_default_pad+0x110>
     672:	481d      	ldr	r0, [pc, #116]	; (6e8 <_sercom_get_default_pad+0x174>)
     674:	e006      	b.n	684 <_sercom_get_default_pad+0x110>
     676:	481d      	ldr	r0, [pc, #116]	; (6ec <_sercom_get_default_pad+0x178>)
     678:	e004      	b.n	684 <_sercom_get_default_pad+0x110>
     67a:	481d      	ldr	r0, [pc, #116]	; (6f0 <_sercom_get_default_pad+0x17c>)
     67c:	e002      	b.n	684 <_sercom_get_default_pad+0x110>
     67e:	481d      	ldr	r0, [pc, #116]	; (6f4 <_sercom_get_default_pad+0x180>)
     680:	e000      	b.n	684 <_sercom_get_default_pad+0x110>
     682:	481d      	ldr	r0, [pc, #116]	; (6f8 <_sercom_get_default_pad+0x184>)
     684:	4770      	bx	lr
     686:	46c0      	nop			; (mov r8, r8)
     688:	42001000 	.word	0x42001000
     68c:	42000800 	.word	0x42000800
     690:	42000c00 	.word	0x42000c00
     694:	42001800 	.word	0x42001800
     698:	42001c00 	.word	0x42001c00
     69c:	42001400 	.word	0x42001400
     6a0:	00040003 	.word	0x00040003
     6a4:	00060003 	.word	0x00060003
     6a8:	00070003 	.word	0x00070003
     6ac:	001e0003 	.word	0x001e0003
     6b0:	001f0003 	.word	0x001f0003
     6b4:	000c0002 	.word	0x000c0002
     6b8:	000e0002 	.word	0x000e0002
     6bc:	000f0002 	.word	0x000f0002
     6c0:	00100003 	.word	0x00100003
     6c4:	00120003 	.word	0x00120003
     6c8:	00130003 	.word	0x00130003
     6cc:	00530005 	.word	0x00530005
     6d0:	003e0005 	.word	0x003e0005
     6d4:	00520005 	.word	0x00520005
     6d8:	00160003 	.word	0x00160003
     6dc:	00180003 	.word	0x00180003
     6e0:	00190003 	.word	0x00190003
     6e4:	00050003 	.word	0x00050003
     6e8:	00010003 	.word	0x00010003
     6ec:	000d0002 	.word	0x000d0002
     6f0:	00110003 	.word	0x00110003
     6f4:	003f0005 	.word	0x003f0005
     6f8:	00170003 	.word	0x00170003

000006fc <_sercom_get_sercom_inst_index>:
     6fc:	b570      	push	{r4, r5, r6, lr}
     6fe:	b086      	sub	sp, #24
     700:	4a0c      	ldr	r2, [pc, #48]	; (734 <_sercom_get_sercom_inst_index+0x38>)
     702:	466b      	mov	r3, sp
     704:	ca70      	ldmia	r2!, {r4, r5, r6}
     706:	c370      	stmia	r3!, {r4, r5, r6}
     708:	ca32      	ldmia	r2!, {r1, r4, r5}
     70a:	c332      	stmia	r3!, {r1, r4, r5}
     70c:	9e00      	ldr	r6, [sp, #0]
     70e:	4286      	cmp	r6, r0
     710:	d006      	beq.n	720 <_sercom_get_sercom_inst_index+0x24>
     712:	2301      	movs	r3, #1
     714:	009a      	lsls	r2, r3, #2
     716:	4669      	mov	r1, sp
     718:	5852      	ldr	r2, [r2, r1]
     71a:	4282      	cmp	r2, r0
     71c:	d103      	bne.n	726 <_sercom_get_sercom_inst_index+0x2a>
     71e:	e000      	b.n	722 <_sercom_get_sercom_inst_index+0x26>
     720:	2300      	movs	r3, #0
     722:	b2d8      	uxtb	r0, r3
     724:	e003      	b.n	72e <_sercom_get_sercom_inst_index+0x32>
     726:	3301      	adds	r3, #1
     728:	2b06      	cmp	r3, #6
     72a:	d1f3      	bne.n	714 <_sercom_get_sercom_inst_index+0x18>
     72c:	2000      	movs	r0, #0
     72e:	b006      	add	sp, #24
     730:	bd70      	pop	{r4, r5, r6, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	000041e0 	.word	0x000041e0

00000738 <SERCOM0_Handler>:
     738:	b508      	push	{r3, lr}
     73a:	4b02      	ldr	r3, [pc, #8]	; (744 <SERCOM0_Handler+0xc>)
     73c:	681b      	ldr	r3, [r3, #0]
     73e:	2000      	movs	r0, #0
     740:	4798      	blx	r3
     742:	bd08      	pop	{r3, pc}
     744:	20000098 	.word	0x20000098

00000748 <SERCOM1_Handler>:
     748:	b508      	push	{r3, lr}
     74a:	4b02      	ldr	r3, [pc, #8]	; (754 <SERCOM1_Handler+0xc>)
     74c:	685b      	ldr	r3, [r3, #4]
     74e:	2001      	movs	r0, #1
     750:	4798      	blx	r3
     752:	bd08      	pop	{r3, pc}
     754:	20000098 	.word	0x20000098

00000758 <SERCOM2_Handler>:
     758:	b508      	push	{r3, lr}
     75a:	4b02      	ldr	r3, [pc, #8]	; (764 <SERCOM2_Handler+0xc>)
     75c:	689b      	ldr	r3, [r3, #8]
     75e:	2002      	movs	r0, #2
     760:	4798      	blx	r3
     762:	bd08      	pop	{r3, pc}
     764:	20000098 	.word	0x20000098

00000768 <SERCOM3_Handler>:
     768:	b508      	push	{r3, lr}
     76a:	4b02      	ldr	r3, [pc, #8]	; (774 <SERCOM3_Handler+0xc>)
     76c:	68db      	ldr	r3, [r3, #12]
     76e:	2003      	movs	r0, #3
     770:	4798      	blx	r3
     772:	bd08      	pop	{r3, pc}
     774:	20000098 	.word	0x20000098

00000778 <SERCOM4_Handler>:
     778:	b508      	push	{r3, lr}
     77a:	4b02      	ldr	r3, [pc, #8]	; (784 <SERCOM4_Handler+0xc>)
     77c:	691b      	ldr	r3, [r3, #16]
     77e:	2004      	movs	r0, #4
     780:	4798      	blx	r3
     782:	bd08      	pop	{r3, pc}
     784:	20000098 	.word	0x20000098

00000788 <SERCOM5_Handler>:
     788:	b508      	push	{r3, lr}
     78a:	4b02      	ldr	r3, [pc, #8]	; (794 <SERCOM5_Handler+0xc>)
     78c:	695b      	ldr	r3, [r3, #20]
     78e:	2005      	movs	r0, #5
     790:	4798      	blx	r3
     792:	bd08      	pop	{r3, pc}
     794:	20000098 	.word	0x20000098

00000798 <spi_init>:
     798:	b5f0      	push	{r4, r5, r6, r7, lr}
     79a:	465f      	mov	r7, fp
     79c:	4656      	mov	r6, sl
     79e:	464d      	mov	r5, r9
     7a0:	4644      	mov	r4, r8
     7a2:	b4f0      	push	{r4, r5, r6, r7}
     7a4:	b089      	sub	sp, #36	; 0x24
     7a6:	1c07      	adds	r7, r0, #0
     7a8:	1c0d      	adds	r5, r1, #0
     7aa:	1c14      	adds	r4, r2, #0
     7ac:	6039      	str	r1, [r7, #0]
     7ae:	680b      	ldr	r3, [r1, #0]
     7b0:	0798      	lsls	r0, r3, #30
     7b2:	d400      	bmi.n	7b6 <spi_init+0x1e>
     7b4:	e08d      	b.n	8d2 <spi_init+0x13a>
     7b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
     7b8:	9103      	str	r1, [sp, #12]
     7ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     7bc:	9204      	str	r2, [sp, #16]
     7be:	6b23      	ldr	r3, [r4, #48]	; 0x30
     7c0:	9305      	str	r3, [sp, #20]
     7c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
     7c4:	9006      	str	r0, [sp, #24]
     7c6:	2600      	movs	r6, #0
     7c8:	46b1      	mov	r9, r6
     7ca:	221f      	movs	r2, #31
     7cc:	4690      	mov	r8, r2
     7ce:	b2f1      	uxtb	r1, r6
     7d0:	00b3      	lsls	r3, r6, #2
     7d2:	aa03      	add	r2, sp, #12
     7d4:	5898      	ldr	r0, [r3, r2]
     7d6:	2800      	cmp	r0, #0
     7d8:	d102      	bne.n	7e0 <spi_init+0x48>
     7da:	1c28      	adds	r0, r5, #0
     7dc:	4b8f      	ldr	r3, [pc, #572]	; (a1c <spi_init+0x284>)
     7de:	4798      	blx	r3
     7e0:	1c41      	adds	r1, r0, #1
     7e2:	d029      	beq.n	838 <spi_init+0xa0>
     7e4:	0402      	lsls	r2, r0, #16
     7e6:	0c12      	lsrs	r2, r2, #16
     7e8:	4694      	mov	ip, r2
     7ea:	0c03      	lsrs	r3, r0, #16
     7ec:	b2da      	uxtb	r2, r3
     7ee:	4649      	mov	r1, r9
     7f0:	0618      	lsls	r0, r3, #24
     7f2:	d403      	bmi.n	7fc <spi_init+0x64>
     7f4:	0951      	lsrs	r1, r2, #5
     7f6:	01c9      	lsls	r1, r1, #7
     7f8:	4b89      	ldr	r3, [pc, #548]	; (a20 <spi_init+0x288>)
     7fa:	18c9      	adds	r1, r1, r3
     7fc:	4640      	mov	r0, r8
     7fe:	4010      	ands	r0, r2
     800:	180b      	adds	r3, r1, r0
     802:	3340      	adds	r3, #64	; 0x40
     804:	781b      	ldrb	r3, [r3, #0]
     806:	469a      	mov	sl, r3
     808:	2380      	movs	r3, #128	; 0x80
     80a:	469b      	mov	fp, r3
     80c:	4653      	mov	r3, sl
     80e:	07db      	lsls	r3, r3, #31
     810:	d50c      	bpl.n	82c <spi_init+0x94>
     812:	0840      	lsrs	r0, r0, #1
     814:	1809      	adds	r1, r1, r0
     816:	3130      	adds	r1, #48	; 0x30
     818:	780b      	ldrb	r3, [r1, #0]
     81a:	b2db      	uxtb	r3, r3
     81c:	07d0      	lsls	r0, r2, #31
     81e:	d502      	bpl.n	826 <spi_init+0x8e>
     820:	091b      	lsrs	r3, r3, #4
     822:	469b      	mov	fp, r3
     824:	e002      	b.n	82c <spi_init+0x94>
     826:	220f      	movs	r2, #15
     828:	4013      	ands	r3, r2
     82a:	469b      	mov	fp, r3
     82c:	45dc      	cmp	ip, fp
     82e:	d003      	beq.n	838 <spi_init+0xa0>
     830:	2300      	movs	r3, #0
     832:	603b      	str	r3, [r7, #0]
     834:	201c      	movs	r0, #28
     836:	e0ea      	b.n	a0e <spi_init+0x276>
     838:	3601      	adds	r6, #1
     83a:	2e04      	cmp	r6, #4
     83c:	d1c7      	bne.n	7ce <spi_init+0x36>
     83e:	2013      	movs	r0, #19
     840:	4b78      	ldr	r3, [pc, #480]	; (a24 <spi_init+0x28c>)
     842:	4798      	blx	r3
     844:	1c01      	adds	r1, r0, #0
     846:	7823      	ldrb	r3, [r4, #0]
     848:	2600      	movs	r6, #0
     84a:	2b01      	cmp	r3, #1
     84c:	d111      	bne.n	872 <spi_init+0xda>
     84e:	69a0      	ldr	r0, [r4, #24]
     850:	aa02      	add	r2, sp, #8
     852:	4b75      	ldr	r3, [pc, #468]	; (a28 <spi_init+0x290>)
     854:	4798      	blx	r3
     856:	1c03      	adds	r3, r0, #0
     858:	2017      	movs	r0, #23
     85a:	2b00      	cmp	r3, #0
     85c:	d000      	beq.n	860 <spi_init+0xc8>
     85e:	e0d6      	b.n	a0e <spi_init+0x276>
     860:	7b2b      	ldrb	r3, [r5, #12]
     862:	b2db      	uxtb	r3, r3
     864:	aa02      	add	r2, sp, #8
     866:	7812      	ldrb	r2, [r2, #0]
     868:	201c      	movs	r0, #28
     86a:	429a      	cmp	r2, r3
     86c:	d000      	beq.n	870 <spi_init+0xd8>
     86e:	e0ce      	b.n	a0e <spi_init+0x276>
     870:	260c      	movs	r6, #12
     872:	68a2      	ldr	r2, [r4, #8]
     874:	6861      	ldr	r1, [r4, #4]
     876:	430a      	orrs	r2, r1
     878:	68e3      	ldr	r3, [r4, #12]
     87a:	431a      	orrs	r2, r3
     87c:	4332      	orrs	r2, r6
     87e:	7c23      	ldrb	r3, [r4, #16]
     880:	7c61      	ldrb	r1, [r4, #17]
     882:	2900      	cmp	r1, #0
     884:	d001      	beq.n	88a <spi_init+0xf2>
     886:	2180      	movs	r1, #128	; 0x80
     888:	430a      	orrs	r2, r1
     88a:	7ca1      	ldrb	r1, [r4, #18]
     88c:	2900      	cmp	r1, #0
     88e:	d002      	beq.n	896 <spi_init+0xfe>
     890:	2180      	movs	r1, #128	; 0x80
     892:	0289      	lsls	r1, r1, #10
     894:	430b      	orrs	r3, r1
     896:	7ce1      	ldrb	r1, [r4, #19]
     898:	2900      	cmp	r1, #0
     89a:	d002      	beq.n	8a2 <spi_init+0x10a>
     89c:	2180      	movs	r1, #128	; 0x80
     89e:	0089      	lsls	r1, r1, #2
     8a0:	430b      	orrs	r3, r1
     8a2:	7d21      	ldrb	r1, [r4, #20]
     8a4:	2900      	cmp	r1, #0
     8a6:	d002      	beq.n	8ae <spi_init+0x116>
     8a8:	2180      	movs	r1, #128	; 0x80
     8aa:	0189      	lsls	r1, r1, #6
     8ac:	430b      	orrs	r3, r1
     8ae:	6829      	ldr	r1, [r5, #0]
     8b0:	2002      	movs	r0, #2
     8b2:	4302      	orrs	r2, r0
     8b4:	428a      	cmp	r2, r1
     8b6:	d108      	bne.n	8ca <spi_init+0x132>
     8b8:	686a      	ldr	r2, [r5, #4]
     8ba:	429a      	cmp	r2, r3
     8bc:	d105      	bne.n	8ca <spi_init+0x132>
     8be:	7823      	ldrb	r3, [r4, #0]
     8c0:	717b      	strb	r3, [r7, #5]
     8c2:	7c23      	ldrb	r3, [r4, #16]
     8c4:	71bb      	strb	r3, [r7, #6]
     8c6:	2000      	movs	r0, #0
     8c8:	e0a1      	b.n	a0e <spi_init+0x276>
     8ca:	2300      	movs	r3, #0
     8cc:	603b      	str	r3, [r7, #0]
     8ce:	201c      	movs	r0, #28
     8d0:	e09d      	b.n	a0e <spi_init+0x276>
     8d2:	680b      	ldr	r3, [r1, #0]
     8d4:	2005      	movs	r0, #5
     8d6:	07d9      	lsls	r1, r3, #31
     8d8:	d500      	bpl.n	8dc <spi_init+0x144>
     8da:	e098      	b.n	a0e <spi_init+0x276>
     8dc:	1c28      	adds	r0, r5, #0
     8de:	4b53      	ldr	r3, [pc, #332]	; (a2c <spi_init+0x294>)
     8e0:	4798      	blx	r3
     8e2:	4b53      	ldr	r3, [pc, #332]	; (a30 <spi_init+0x298>)
     8e4:	6a19      	ldr	r1, [r3, #32]
     8e6:	1c82      	adds	r2, r0, #2
     8e8:	2601      	movs	r6, #1
     8ea:	4096      	lsls	r6, r2
     8ec:	1c32      	adds	r2, r6, #0
     8ee:	430a      	orrs	r2, r1
     8f0:	621a      	str	r2, [r3, #32]
     8f2:	a907      	add	r1, sp, #28
     8f4:	2624      	movs	r6, #36	; 0x24
     8f6:	5da3      	ldrb	r3, [r4, r6]
     8f8:	700b      	strb	r3, [r1, #0]
     8fa:	3014      	adds	r0, #20
     8fc:	b2c0      	uxtb	r0, r0
     8fe:	4680      	mov	r8, r0
     900:	4b4c      	ldr	r3, [pc, #304]	; (a34 <spi_init+0x29c>)
     902:	4798      	blx	r3
     904:	4640      	mov	r0, r8
     906:	4b4c      	ldr	r3, [pc, #304]	; (a38 <spi_init+0x2a0>)
     908:	4798      	blx	r3
     90a:	5da0      	ldrb	r0, [r4, r6]
     90c:	2100      	movs	r1, #0
     90e:	4b4b      	ldr	r3, [pc, #300]	; (a3c <spi_init+0x2a4>)
     910:	4798      	blx	r3
     912:	7823      	ldrb	r3, [r4, #0]
     914:	2b01      	cmp	r3, #1
     916:	d103      	bne.n	920 <spi_init+0x188>
     918:	682a      	ldr	r2, [r5, #0]
     91a:	230c      	movs	r3, #12
     91c:	4313      	orrs	r3, r2
     91e:	602b      	str	r3, [r5, #0]
     920:	683e      	ldr	r6, [r7, #0]
     922:	ab02      	add	r3, sp, #8
     924:	2280      	movs	r2, #128	; 0x80
     926:	701a      	strb	r2, [r3, #0]
     928:	2200      	movs	r2, #0
     92a:	705a      	strb	r2, [r3, #1]
     92c:	2101      	movs	r1, #1
     92e:	7099      	strb	r1, [r3, #2]
     930:	70da      	strb	r2, [r3, #3]
     932:	7823      	ldrb	r3, [r4, #0]
     934:	2b00      	cmp	r3, #0
     936:	d101      	bne.n	93c <spi_init+0x1a4>
     938:	ab02      	add	r3, sp, #8
     93a:	709a      	strb	r2, [r3, #2]
     93c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     93e:	9203      	str	r2, [sp, #12]
     940:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     942:	9304      	str	r3, [sp, #16]
     944:	6b20      	ldr	r0, [r4, #48]	; 0x30
     946:	9005      	str	r0, [sp, #20]
     948:	6b61      	ldr	r1, [r4, #52]	; 0x34
     94a:	9106      	str	r1, [sp, #24]
     94c:	2500      	movs	r5, #0
     94e:	b2e9      	uxtb	r1, r5
     950:	00ab      	lsls	r3, r5, #2
     952:	aa03      	add	r2, sp, #12
     954:	5898      	ldr	r0, [r3, r2]
     956:	2800      	cmp	r0, #0
     958:	d102      	bne.n	960 <spi_init+0x1c8>
     95a:	1c30      	adds	r0, r6, #0
     95c:	4a2f      	ldr	r2, [pc, #188]	; (a1c <spi_init+0x284>)
     95e:	4790      	blx	r2
     960:	1c43      	adds	r3, r0, #1
     962:	d006      	beq.n	972 <spi_init+0x1da>
     964:	4669      	mov	r1, sp
     966:	7208      	strb	r0, [r1, #8]
     968:	0c00      	lsrs	r0, r0, #16
     96a:	b2c0      	uxtb	r0, r0
     96c:	a902      	add	r1, sp, #8
     96e:	4a34      	ldr	r2, [pc, #208]	; (a40 <spi_init+0x2a8>)
     970:	4790      	blx	r2
     972:	3501      	adds	r5, #1
     974:	2d04      	cmp	r5, #4
     976:	d1ea      	bne.n	94e <spi_init+0x1b6>
     978:	7823      	ldrb	r3, [r4, #0]
     97a:	717b      	strb	r3, [r7, #5]
     97c:	7c23      	ldrb	r3, [r4, #16]
     97e:	71bb      	strb	r3, [r7, #6]
     980:	7ca3      	ldrb	r3, [r4, #18]
     982:	71fb      	strb	r3, [r7, #7]
     984:	7d23      	ldrb	r3, [r4, #20]
     986:	723b      	strb	r3, [r7, #8]
     988:	2200      	movs	r2, #0
     98a:	466b      	mov	r3, sp
     98c:	80da      	strh	r2, [r3, #6]
     98e:	7823      	ldrb	r3, [r4, #0]
     990:	2b01      	cmp	r3, #1
     992:	d114      	bne.n	9be <spi_init+0x226>
     994:	6838      	ldr	r0, [r7, #0]
     996:	4b25      	ldr	r3, [pc, #148]	; (a2c <spi_init+0x294>)
     998:	4798      	blx	r3
     99a:	3014      	adds	r0, #20
     99c:	b2c0      	uxtb	r0, r0
     99e:	4b21      	ldr	r3, [pc, #132]	; (a24 <spi_init+0x28c>)
     9a0:	4798      	blx	r3
     9a2:	1c01      	adds	r1, r0, #0
     9a4:	69a0      	ldr	r0, [r4, #24]
     9a6:	466a      	mov	r2, sp
     9a8:	3206      	adds	r2, #6
     9aa:	4b1f      	ldr	r3, [pc, #124]	; (a28 <spi_init+0x290>)
     9ac:	4798      	blx	r3
     9ae:	1c03      	adds	r3, r0, #0
     9b0:	2017      	movs	r0, #23
     9b2:	2b00      	cmp	r3, #0
     9b4:	d12b      	bne.n	a0e <spi_init+0x276>
     9b6:	466b      	mov	r3, sp
     9b8:	3306      	adds	r3, #6
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	7333      	strb	r3, [r6, #12]
     9be:	68a2      	ldr	r2, [r4, #8]
     9c0:	6863      	ldr	r3, [r4, #4]
     9c2:	431a      	orrs	r2, r3
     9c4:	68e0      	ldr	r0, [r4, #12]
     9c6:	4302      	orrs	r2, r0
     9c8:	7c23      	ldrb	r3, [r4, #16]
     9ca:	7c61      	ldrb	r1, [r4, #17]
     9cc:	2900      	cmp	r1, #0
     9ce:	d103      	bne.n	9d8 <spi_init+0x240>
     9d0:	491c      	ldr	r1, [pc, #112]	; (a44 <spi_init+0x2ac>)
     9d2:	7889      	ldrb	r1, [r1, #2]
     9d4:	0788      	lsls	r0, r1, #30
     9d6:	d501      	bpl.n	9dc <spi_init+0x244>
     9d8:	2180      	movs	r1, #128	; 0x80
     9da:	430a      	orrs	r2, r1
     9dc:	7ca1      	ldrb	r1, [r4, #18]
     9de:	2900      	cmp	r1, #0
     9e0:	d002      	beq.n	9e8 <spi_init+0x250>
     9e2:	2180      	movs	r1, #128	; 0x80
     9e4:	0289      	lsls	r1, r1, #10
     9e6:	430b      	orrs	r3, r1
     9e8:	7ce1      	ldrb	r1, [r4, #19]
     9ea:	2900      	cmp	r1, #0
     9ec:	d002      	beq.n	9f4 <spi_init+0x25c>
     9ee:	2180      	movs	r1, #128	; 0x80
     9f0:	0089      	lsls	r1, r1, #2
     9f2:	430b      	orrs	r3, r1
     9f4:	7d21      	ldrb	r1, [r4, #20]
     9f6:	2900      	cmp	r1, #0
     9f8:	d002      	beq.n	a00 <spi_init+0x268>
     9fa:	2180      	movs	r1, #128	; 0x80
     9fc:	0189      	lsls	r1, r1, #6
     9fe:	430b      	orrs	r3, r1
     a00:	6831      	ldr	r1, [r6, #0]
     a02:	430a      	orrs	r2, r1
     a04:	6032      	str	r2, [r6, #0]
     a06:	6872      	ldr	r2, [r6, #4]
     a08:	4313      	orrs	r3, r2
     a0a:	6073      	str	r3, [r6, #4]
     a0c:	2000      	movs	r0, #0
     a0e:	b009      	add	sp, #36	; 0x24
     a10:	bc3c      	pop	{r2, r3, r4, r5}
     a12:	4690      	mov	r8, r2
     a14:	4699      	mov	r9, r3
     a16:	46a2      	mov	sl, r4
     a18:	46ab      	mov	fp, r5
     a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1c:	00000575 	.word	0x00000575
     a20:	41004400 	.word	0x41004400
     a24:	00001259 	.word	0x00001259
     a28:	000004fd 	.word	0x000004fd
     a2c:	000006fd 	.word	0x000006fd
     a30:	40000400 	.word	0x40000400
     a34:	0000123d 	.word	0x0000123d
     a38:	000011b1 	.word	0x000011b1
     a3c:	00000525 	.word	0x00000525
     a40:	00001319 	.word	0x00001319
     a44:	41002000 	.word	0x41002000

00000a48 <spi_select_slave>:
     a48:	b510      	push	{r4, lr}
     a4a:	7944      	ldrb	r4, [r0, #5]
     a4c:	2315      	movs	r3, #21
     a4e:	2c01      	cmp	r4, #1
     a50:	d16c      	bne.n	b2c <spi_select_slave+0xe4>
     a52:	7a04      	ldrb	r4, [r0, #8]
     a54:	2300      	movs	r3, #0
     a56:	2c00      	cmp	r4, #0
     a58:	d168      	bne.n	b2c <spi_select_slave+0xe4>
     a5a:	2a00      	cmp	r2, #0
     a5c:	d057      	beq.n	b0e <spi_select_slave+0xc6>
     a5e:	784b      	ldrb	r3, [r1, #1]
     a60:	2b00      	cmp	r3, #0
     a62:	d044      	beq.n	aee <spi_select_slave+0xa6>
     a64:	6802      	ldr	r2, [r0, #0]
     a66:	7e13      	ldrb	r3, [r2, #24]
     a68:	07dc      	lsls	r4, r3, #31
     a6a:	d40f      	bmi.n	a8c <spi_select_slave+0x44>
     a6c:	780b      	ldrb	r3, [r1, #0]
     a6e:	09d9      	lsrs	r1, r3, #7
     a70:	2200      	movs	r2, #0
     a72:	2900      	cmp	r1, #0
     a74:	d103      	bne.n	a7e <spi_select_slave+0x36>
     a76:	095a      	lsrs	r2, r3, #5
     a78:	01d2      	lsls	r2, r2, #7
     a7a:	492d      	ldr	r1, [pc, #180]	; (b30 <spi_select_slave+0xe8>)
     a7c:	1852      	adds	r2, r2, r1
     a7e:	211f      	movs	r1, #31
     a80:	400b      	ands	r3, r1
     a82:	2101      	movs	r1, #1
     a84:	4099      	lsls	r1, r3
     a86:	6191      	str	r1, [r2, #24]
     a88:	2305      	movs	r3, #5
     a8a:	e04f      	b.n	b2c <spi_select_slave+0xe4>
     a8c:	780b      	ldrb	r3, [r1, #0]
     a8e:	09dc      	lsrs	r4, r3, #7
     a90:	2200      	movs	r2, #0
     a92:	2c00      	cmp	r4, #0
     a94:	d103      	bne.n	a9e <spi_select_slave+0x56>
     a96:	095a      	lsrs	r2, r3, #5
     a98:	01d2      	lsls	r2, r2, #7
     a9a:	4c25      	ldr	r4, [pc, #148]	; (b30 <spi_select_slave+0xe8>)
     a9c:	1912      	adds	r2, r2, r4
     a9e:	241f      	movs	r4, #31
     aa0:	4023      	ands	r3, r4
     aa2:	2401      	movs	r4, #1
     aa4:	409c      	lsls	r4, r3
     aa6:	6154      	str	r4, [r2, #20]
     aa8:	7889      	ldrb	r1, [r1, #2]
     aaa:	6803      	ldr	r3, [r0, #0]
     aac:	7e1a      	ldrb	r2, [r3, #24]
     aae:	07d4      	lsls	r4, r2, #31
     ab0:	d500      	bpl.n	ab4 <spi_select_slave+0x6c>
     ab2:	6299      	str	r1, [r3, #40]	; 0x28
     ab4:	79c2      	ldrb	r2, [r0, #7]
     ab6:	2300      	movs	r3, #0
     ab8:	2a00      	cmp	r2, #0
     aba:	d137      	bne.n	b2c <spi_select_slave+0xe4>
     abc:	6802      	ldr	r2, [r0, #0]
     abe:	2104      	movs	r1, #4
     ac0:	7e13      	ldrb	r3, [r2, #24]
     ac2:	420b      	tst	r3, r1
     ac4:	d0fc      	beq.n	ac0 <spi_select_slave+0x78>
     ac6:	7e11      	ldrb	r1, [r2, #24]
     ac8:	2300      	movs	r3, #0
     aca:	074c      	lsls	r4, r1, #29
     acc:	d52e      	bpl.n	b2c <spi_select_slave+0xe4>
     ace:	8b53      	ldrh	r3, [r2, #26]
     ad0:	0759      	lsls	r1, r3, #29
     ad2:	d503      	bpl.n	adc <spi_select_slave+0x94>
     ad4:	8b51      	ldrh	r1, [r2, #26]
     ad6:	2304      	movs	r3, #4
     ad8:	430b      	orrs	r3, r1
     ada:	8353      	strh	r3, [r2, #26]
     adc:	7983      	ldrb	r3, [r0, #6]
     ade:	2b01      	cmp	r3, #1
     ae0:	d102      	bne.n	ae8 <spi_select_slave+0xa0>
     ae2:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ae4:	2300      	movs	r3, #0
     ae6:	e021      	b.n	b2c <spi_select_slave+0xe4>
     ae8:	6a93      	ldr	r3, [r2, #40]	; 0x28
     aea:	2300      	movs	r3, #0
     aec:	e01e      	b.n	b2c <spi_select_slave+0xe4>
     aee:	780b      	ldrb	r3, [r1, #0]
     af0:	09d9      	lsrs	r1, r3, #7
     af2:	2200      	movs	r2, #0
     af4:	2900      	cmp	r1, #0
     af6:	d103      	bne.n	b00 <spi_select_slave+0xb8>
     af8:	095a      	lsrs	r2, r3, #5
     afa:	01d2      	lsls	r2, r2, #7
     afc:	4c0c      	ldr	r4, [pc, #48]	; (b30 <spi_select_slave+0xe8>)
     afe:	1912      	adds	r2, r2, r4
     b00:	211f      	movs	r1, #31
     b02:	400b      	ands	r3, r1
     b04:	2101      	movs	r1, #1
     b06:	4099      	lsls	r1, r3
     b08:	6151      	str	r1, [r2, #20]
     b0a:	2300      	movs	r3, #0
     b0c:	e00e      	b.n	b2c <spi_select_slave+0xe4>
     b0e:	780b      	ldrb	r3, [r1, #0]
     b10:	09d9      	lsrs	r1, r3, #7
     b12:	2200      	movs	r2, #0
     b14:	2900      	cmp	r1, #0
     b16:	d103      	bne.n	b20 <spi_select_slave+0xd8>
     b18:	095a      	lsrs	r2, r3, #5
     b1a:	01d2      	lsls	r2, r2, #7
     b1c:	4904      	ldr	r1, [pc, #16]	; (b30 <spi_select_slave+0xe8>)
     b1e:	1852      	adds	r2, r2, r1
     b20:	211f      	movs	r1, #31
     b22:	400b      	ands	r3, r1
     b24:	2101      	movs	r1, #1
     b26:	4099      	lsls	r1, r3
     b28:	6191      	str	r1, [r2, #24]
     b2a:	2300      	movs	r3, #0
     b2c:	1c18      	adds	r0, r3, #0
     b2e:	bd10      	pop	{r4, pc}
     b30:	41004400 	.word	0x41004400

00000b34 <system_clock_source_get_hz>:
     b34:	b508      	push	{r3, lr}
     b36:	2808      	cmp	r0, #8
     b38:	d834      	bhi.n	ba4 <system_clock_source_get_hz+0x70>
     b3a:	0080      	lsls	r0, r0, #2
     b3c:	4b1b      	ldr	r3, [pc, #108]	; (bac <system_clock_source_get_hz+0x78>)
     b3e:	581b      	ldr	r3, [r3, r0]
     b40:	469f      	mov	pc, r3
     b42:	2080      	movs	r0, #128	; 0x80
     b44:	0200      	lsls	r0, r0, #8
     b46:	e030      	b.n	baa <system_clock_source_get_hz+0x76>
     b48:	4b19      	ldr	r3, [pc, #100]	; (bb0 <system_clock_source_get_hz+0x7c>)
     b4a:	6918      	ldr	r0, [r3, #16]
     b4c:	e02d      	b.n	baa <system_clock_source_get_hz+0x76>
     b4e:	4b19      	ldr	r3, [pc, #100]	; (bb4 <system_clock_source_get_hz+0x80>)
     b50:	6a18      	ldr	r0, [r3, #32]
     b52:	0580      	lsls	r0, r0, #22
     b54:	0f80      	lsrs	r0, r0, #30
     b56:	4b18      	ldr	r3, [pc, #96]	; (bb8 <system_clock_source_get_hz+0x84>)
     b58:	40c3      	lsrs	r3, r0
     b5a:	1c18      	adds	r0, r3, #0
     b5c:	e025      	b.n	baa <system_clock_source_get_hz+0x76>
     b5e:	4b14      	ldr	r3, [pc, #80]	; (bb0 <system_clock_source_get_hz+0x7c>)
     b60:	6958      	ldr	r0, [r3, #20]
     b62:	e022      	b.n	baa <system_clock_source_get_hz+0x76>
     b64:	4b12      	ldr	r3, [pc, #72]	; (bb0 <system_clock_source_get_hz+0x7c>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	2002      	movs	r0, #2
     b6a:	4018      	ands	r0, r3
     b6c:	d01d      	beq.n	baa <system_clock_source_get_hz+0x76>
     b6e:	4911      	ldr	r1, [pc, #68]	; (bb4 <system_clock_source_get_hz+0x80>)
     b70:	2210      	movs	r2, #16
     b72:	68cb      	ldr	r3, [r1, #12]
     b74:	421a      	tst	r2, r3
     b76:	d0fc      	beq.n	b72 <system_clock_source_get_hz+0x3e>
     b78:	4b0d      	ldr	r3, [pc, #52]	; (bb0 <system_clock_source_get_hz+0x7c>)
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	075a      	lsls	r2, r3, #29
     b7e:	d513      	bpl.n	ba8 <system_clock_source_get_hz+0x74>
     b80:	2000      	movs	r0, #0
     b82:	4b0e      	ldr	r3, [pc, #56]	; (bbc <system_clock_source_get_hz+0x88>)
     b84:	4798      	blx	r3
     b86:	4b0a      	ldr	r3, [pc, #40]	; (bb0 <system_clock_source_get_hz+0x7c>)
     b88:	689b      	ldr	r3, [r3, #8]
     b8a:	041b      	lsls	r3, r3, #16
     b8c:	0c1b      	lsrs	r3, r3, #16
     b8e:	4358      	muls	r0, r3
     b90:	e00b      	b.n	baa <system_clock_source_get_hz+0x76>
     b92:	2350      	movs	r3, #80	; 0x50
     b94:	4a07      	ldr	r2, [pc, #28]	; (bb4 <system_clock_source_get_hz+0x80>)
     b96:	5cd3      	ldrb	r3, [r2, r3]
     b98:	2000      	movs	r0, #0
     b9a:	075a      	lsls	r2, r3, #29
     b9c:	d505      	bpl.n	baa <system_clock_source_get_hz+0x76>
     b9e:	4b04      	ldr	r3, [pc, #16]	; (bb0 <system_clock_source_get_hz+0x7c>)
     ba0:	68d8      	ldr	r0, [r3, #12]
     ba2:	e002      	b.n	baa <system_clock_source_get_hz+0x76>
     ba4:	2000      	movs	r0, #0
     ba6:	e000      	b.n	baa <system_clock_source_get_hz+0x76>
     ba8:	4805      	ldr	r0, [pc, #20]	; (bc0 <system_clock_source_get_hz+0x8c>)
     baa:	bd08      	pop	{r3, pc}
     bac:	000041f8 	.word	0x000041f8
     bb0:	200000b0 	.word	0x200000b0
     bb4:	40000800 	.word	0x40000800
     bb8:	007a1200 	.word	0x007a1200
     bbc:	00001259 	.word	0x00001259
     bc0:	02dc6c00 	.word	0x02dc6c00

00000bc4 <system_clock_source_osc8m_set_config>:
     bc4:	b570      	push	{r4, r5, r6, lr}
     bc6:	4b0c      	ldr	r3, [pc, #48]	; (bf8 <system_clock_source_osc8m_set_config+0x34>)
     bc8:	6a1c      	ldr	r4, [r3, #32]
     bca:	7801      	ldrb	r1, [r0, #0]
     bcc:	7885      	ldrb	r5, [r0, #2]
     bce:	7840      	ldrb	r0, [r0, #1]
     bd0:	2201      	movs	r2, #1
     bd2:	4010      	ands	r0, r2
     bd4:	0180      	lsls	r0, r0, #6
     bd6:	2640      	movs	r6, #64	; 0x40
     bd8:	43b4      	bics	r4, r6
     bda:	4304      	orrs	r4, r0
     bdc:	402a      	ands	r2, r5
     bde:	01d0      	lsls	r0, r2, #7
     be0:	2280      	movs	r2, #128	; 0x80
     be2:	4394      	bics	r4, r2
     be4:	1c22      	adds	r2, r4, #0
     be6:	4302      	orrs	r2, r0
     be8:	2003      	movs	r0, #3
     bea:	4001      	ands	r1, r0
     bec:	0209      	lsls	r1, r1, #8
     bee:	4803      	ldr	r0, [pc, #12]	; (bfc <system_clock_source_osc8m_set_config+0x38>)
     bf0:	4002      	ands	r2, r0
     bf2:	430a      	orrs	r2, r1
     bf4:	621a      	str	r2, [r3, #32]
     bf6:	bd70      	pop	{r4, r5, r6, pc}
     bf8:	40000800 	.word	0x40000800
     bfc:	fffffcff 	.word	0xfffffcff

00000c00 <system_clock_source_osc32k_set_config>:
     c00:	b5f0      	push	{r4, r5, r6, r7, lr}
     c02:	464f      	mov	r7, r9
     c04:	4646      	mov	r6, r8
     c06:	b4c0      	push	{r6, r7}
     c08:	4a19      	ldr	r2, [pc, #100]	; (c70 <system_clock_source_osc32k_set_config+0x70>)
     c0a:	6994      	ldr	r4, [r2, #24]
     c0c:	7841      	ldrb	r1, [r0, #1]
     c0e:	468c      	mov	ip, r1
     c10:	7805      	ldrb	r5, [r0, #0]
     c12:	7906      	ldrb	r6, [r0, #4]
     c14:	78c7      	ldrb	r7, [r0, #3]
     c16:	7943      	ldrb	r3, [r0, #5]
     c18:	4699      	mov	r9, r3
     c1a:	7880      	ldrb	r0, [r0, #2]
     c1c:	2301      	movs	r3, #1
     c1e:	4018      	ands	r0, r3
     c20:	0080      	lsls	r0, r0, #2
     c22:	2104      	movs	r1, #4
     c24:	438c      	bics	r4, r1
     c26:	4304      	orrs	r4, r0
     c28:	4660      	mov	r0, ip
     c2a:	4018      	ands	r0, r3
     c2c:	00c0      	lsls	r0, r0, #3
     c2e:	2108      	movs	r1, #8
     c30:	438c      	bics	r4, r1
     c32:	4304      	orrs	r4, r0
     c34:	1c18      	adds	r0, r3, #0
     c36:	4038      	ands	r0, r7
     c38:	0180      	lsls	r0, r0, #6
     c3a:	2740      	movs	r7, #64	; 0x40
     c3c:	43bc      	bics	r4, r7
     c3e:	4304      	orrs	r4, r0
     c40:	1c18      	adds	r0, r3, #0
     c42:	4030      	ands	r0, r6
     c44:	01c0      	lsls	r0, r0, #7
     c46:	2680      	movs	r6, #128	; 0x80
     c48:	43b4      	bics	r4, r6
     c4a:	4304      	orrs	r4, r0
     c4c:	2007      	movs	r0, #7
     c4e:	4028      	ands	r0, r5
     c50:	0200      	lsls	r0, r0, #8
     c52:	4d08      	ldr	r5, [pc, #32]	; (c74 <system_clock_source_osc32k_set_config+0x74>)
     c54:	402c      	ands	r4, r5
     c56:	4304      	orrs	r4, r0
     c58:	4649      	mov	r1, r9
     c5a:	400b      	ands	r3, r1
     c5c:	0319      	lsls	r1, r3, #12
     c5e:	4806      	ldr	r0, [pc, #24]	; (c78 <system_clock_source_osc32k_set_config+0x78>)
     c60:	1c23      	adds	r3, r4, #0
     c62:	4003      	ands	r3, r0
     c64:	430b      	orrs	r3, r1
     c66:	6193      	str	r3, [r2, #24]
     c68:	bc0c      	pop	{r2, r3}
     c6a:	4690      	mov	r8, r2
     c6c:	4699      	mov	r9, r3
     c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c70:	40000800 	.word	0x40000800
     c74:	fffff8ff 	.word	0xfffff8ff
     c78:	ffffefff 	.word	0xffffefff

00000c7c <system_clock_source_xosc32k_set_config>:
     c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c7e:	465f      	mov	r7, fp
     c80:	4656      	mov	r6, sl
     c82:	464d      	mov	r5, r9
     c84:	4644      	mov	r4, r8
     c86:	b4f0      	push	{r4, r5, r6, r7}
     c88:	4a25      	ldr	r2, [pc, #148]	; (d20 <system_clock_source_xosc32k_set_config+0xa4>)
     c8a:	8a94      	ldrh	r4, [r2, #20]
     c8c:	7845      	ldrb	r5, [r0, #1]
     c8e:	7803      	ldrb	r3, [r0, #0]
     c90:	4259      	negs	r1, r3
     c92:	4159      	adcs	r1, r3
     c94:	468a      	mov	sl, r1
     c96:	7883      	ldrb	r3, [r0, #2]
     c98:	469c      	mov	ip, r3
     c9a:	78c1      	ldrb	r1, [r0, #3]
     c9c:	4688      	mov	r8, r1
     c9e:	7903      	ldrb	r3, [r0, #4]
     ca0:	4699      	mov	r9, r3
     ca2:	7b46      	ldrb	r6, [r0, #13]
     ca4:	7b07      	ldrb	r7, [r0, #12]
     ca6:	7b81      	ldrb	r1, [r0, #14]
     ca8:	468b      	mov	fp, r1
     caa:	6880      	ldr	r0, [r0, #8]
     cac:	4b1d      	ldr	r3, [pc, #116]	; (d24 <system_clock_source_xosc32k_set_config+0xa8>)
     cae:	6158      	str	r0, [r3, #20]
     cb0:	2301      	movs	r3, #1
     cb2:	4651      	mov	r1, sl
     cb4:	0088      	lsls	r0, r1, #2
     cb6:	2104      	movs	r1, #4
     cb8:	438c      	bics	r4, r1
     cba:	4304      	orrs	r4, r0
     cbc:	4648      	mov	r0, r9
     cbe:	4018      	ands	r0, r3
     cc0:	00c0      	lsls	r0, r0, #3
     cc2:	2108      	movs	r1, #8
     cc4:	438c      	bics	r4, r1
     cc6:	4304      	orrs	r4, r0
     cc8:	4640      	mov	r0, r8
     cca:	4018      	ands	r0, r3
     ccc:	0100      	lsls	r0, r0, #4
     cce:	2110      	movs	r1, #16
     cd0:	438c      	bics	r4, r1
     cd2:	4304      	orrs	r4, r0
     cd4:	4660      	mov	r0, ip
     cd6:	4018      	ands	r0, r3
     cd8:	0140      	lsls	r0, r0, #5
     cda:	2120      	movs	r1, #32
     cdc:	438c      	bics	r4, r1
     cde:	4304      	orrs	r4, r0
     ce0:	1c18      	adds	r0, r3, #0
     ce2:	4038      	ands	r0, r7
     ce4:	0180      	lsls	r0, r0, #6
     ce6:	2740      	movs	r7, #64	; 0x40
     ce8:	43bc      	bics	r4, r7
     cea:	4304      	orrs	r4, r0
     cec:	1c18      	adds	r0, r3, #0
     cee:	4030      	ands	r0, r6
     cf0:	01c0      	lsls	r0, r0, #7
     cf2:	2680      	movs	r6, #128	; 0x80
     cf4:	43b4      	bics	r4, r6
     cf6:	4304      	orrs	r4, r0
     cf8:	2007      	movs	r0, #7
     cfa:	4028      	ands	r0, r5
     cfc:	0200      	lsls	r0, r0, #8
     cfe:	4d0a      	ldr	r5, [pc, #40]	; (d28 <system_clock_source_xosc32k_set_config+0xac>)
     d00:	402c      	ands	r4, r5
     d02:	4304      	orrs	r4, r0
     d04:	4659      	mov	r1, fp
     d06:	400b      	ands	r3, r1
     d08:	0319      	lsls	r1, r3, #12
     d0a:	4808      	ldr	r0, [pc, #32]	; (d2c <system_clock_source_xosc32k_set_config+0xb0>)
     d0c:	1c23      	adds	r3, r4, #0
     d0e:	4003      	ands	r3, r0
     d10:	430b      	orrs	r3, r1
     d12:	8293      	strh	r3, [r2, #20]
     d14:	bc3c      	pop	{r2, r3, r4, r5}
     d16:	4690      	mov	r8, r2
     d18:	4699      	mov	r9, r3
     d1a:	46a2      	mov	sl, r4
     d1c:	46ab      	mov	fp, r5
     d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d20:	40000800 	.word	0x40000800
     d24:	200000b0 	.word	0x200000b0
     d28:	fffff8ff 	.word	0xfffff8ff
     d2c:	ffffefff 	.word	0xffffefff

00000d30 <system_clock_source_dfll_set_config>:
     d30:	b510      	push	{r4, lr}
     d32:	7a02      	ldrb	r2, [r0, #8]
     d34:	0692      	lsls	r2, r2, #26
     d36:	0c12      	lsrs	r2, r2, #16
     d38:	8943      	ldrh	r3, [r0, #10]
     d3a:	059b      	lsls	r3, r3, #22
     d3c:	0d9b      	lsrs	r3, r3, #22
     d3e:	431a      	orrs	r2, r3
     d40:	4b15      	ldr	r3, [pc, #84]	; (d98 <system_clock_source_dfll_set_config+0x68>)
     d42:	605a      	str	r2, [r3, #4]
     d44:	8881      	ldrh	r1, [r0, #4]
     d46:	8842      	ldrh	r2, [r0, #2]
     d48:	4311      	orrs	r1, r2
     d4a:	79c4      	ldrb	r4, [r0, #7]
     d4c:	7982      	ldrb	r2, [r0, #6]
     d4e:	4322      	orrs	r2, r4
     d50:	430a      	orrs	r2, r1
     d52:	7841      	ldrb	r1, [r0, #1]
     d54:	01c9      	lsls	r1, r1, #7
     d56:	430a      	orrs	r2, r1
     d58:	601a      	str	r2, [r3, #0]
     d5a:	7803      	ldrb	r3, [r0, #0]
     d5c:	2b04      	cmp	r3, #4
     d5e:	d10f      	bne.n	d80 <system_clock_source_dfll_set_config+0x50>
     d60:	7b02      	ldrb	r2, [r0, #12]
     d62:	0692      	lsls	r2, r2, #26
     d64:	8a03      	ldrh	r3, [r0, #16]
     d66:	431a      	orrs	r2, r3
     d68:	89c3      	ldrh	r3, [r0, #14]
     d6a:	041b      	lsls	r3, r3, #16
     d6c:	490b      	ldr	r1, [pc, #44]	; (d9c <system_clock_source_dfll_set_config+0x6c>)
     d6e:	400b      	ands	r3, r1
     d70:	431a      	orrs	r2, r3
     d72:	4b09      	ldr	r3, [pc, #36]	; (d98 <system_clock_source_dfll_set_config+0x68>)
     d74:	609a      	str	r2, [r3, #8]
     d76:	6819      	ldr	r1, [r3, #0]
     d78:	2204      	movs	r2, #4
     d7a:	430a      	orrs	r2, r1
     d7c:	601a      	str	r2, [r3, #0]
     d7e:	e009      	b.n	d94 <system_clock_source_dfll_set_config+0x64>
     d80:	2b20      	cmp	r3, #32
     d82:	d107      	bne.n	d94 <system_clock_source_dfll_set_config+0x64>
     d84:	8a02      	ldrh	r2, [r0, #16]
     d86:	4b04      	ldr	r3, [pc, #16]	; (d98 <system_clock_source_dfll_set_config+0x68>)
     d88:	609a      	str	r2, [r3, #8]
     d8a:	6819      	ldr	r1, [r3, #0]
     d8c:	2284      	movs	r2, #132	; 0x84
     d8e:	00d2      	lsls	r2, r2, #3
     d90:	430a      	orrs	r2, r1
     d92:	601a      	str	r2, [r3, #0]
     d94:	bd10      	pop	{r4, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	200000b0 	.word	0x200000b0
     d9c:	03ff0000 	.word	0x03ff0000

00000da0 <system_clock_source_enable>:
     da0:	2808      	cmp	r0, #8
     da2:	d843      	bhi.n	e2c <system_clock_source_enable+0x8c>
     da4:	0080      	lsls	r0, r0, #2
     da6:	4b22      	ldr	r3, [pc, #136]	; (e30 <system_clock_source_enable+0x90>)
     da8:	581b      	ldr	r3, [r3, r0]
     daa:	469f      	mov	pc, r3
     dac:	2000      	movs	r0, #0
     dae:	e03e      	b.n	e2e <system_clock_source_enable+0x8e>
     db0:	4b20      	ldr	r3, [pc, #128]	; (e34 <system_clock_source_enable+0x94>)
     db2:	6a19      	ldr	r1, [r3, #32]
     db4:	2202      	movs	r2, #2
     db6:	430a      	orrs	r2, r1
     db8:	621a      	str	r2, [r3, #32]
     dba:	2000      	movs	r0, #0
     dbc:	e037      	b.n	e2e <system_clock_source_enable+0x8e>
     dbe:	4b1d      	ldr	r3, [pc, #116]	; (e34 <system_clock_source_enable+0x94>)
     dc0:	6999      	ldr	r1, [r3, #24]
     dc2:	2202      	movs	r2, #2
     dc4:	430a      	orrs	r2, r1
     dc6:	619a      	str	r2, [r3, #24]
     dc8:	2000      	movs	r0, #0
     dca:	e030      	b.n	e2e <system_clock_source_enable+0x8e>
     dcc:	4b19      	ldr	r3, [pc, #100]	; (e34 <system_clock_source_enable+0x94>)
     dce:	8a19      	ldrh	r1, [r3, #16]
     dd0:	2202      	movs	r2, #2
     dd2:	430a      	orrs	r2, r1
     dd4:	821a      	strh	r2, [r3, #16]
     dd6:	2000      	movs	r0, #0
     dd8:	e029      	b.n	e2e <system_clock_source_enable+0x8e>
     dda:	4b16      	ldr	r3, [pc, #88]	; (e34 <system_clock_source_enable+0x94>)
     ddc:	8a99      	ldrh	r1, [r3, #20]
     dde:	2202      	movs	r2, #2
     de0:	430a      	orrs	r2, r1
     de2:	829a      	strh	r2, [r3, #20]
     de4:	2000      	movs	r0, #0
     de6:	e022      	b.n	e2e <system_clock_source_enable+0x8e>
     de8:	4b13      	ldr	r3, [pc, #76]	; (e38 <system_clock_source_enable+0x98>)
     dea:	6819      	ldr	r1, [r3, #0]
     dec:	2202      	movs	r2, #2
     dee:	430a      	orrs	r2, r1
     df0:	601a      	str	r2, [r3, #0]
     df2:	681a      	ldr	r2, [r3, #0]
     df4:	4b11      	ldr	r3, [pc, #68]	; (e3c <system_clock_source_enable+0x9c>)
     df6:	401a      	ands	r2, r3
     df8:	4b0e      	ldr	r3, [pc, #56]	; (e34 <system_clock_source_enable+0x94>)
     dfa:	849a      	strh	r2, [r3, #36]	; 0x24
     dfc:	1c19      	adds	r1, r3, #0
     dfe:	2210      	movs	r2, #16
     e00:	68cb      	ldr	r3, [r1, #12]
     e02:	421a      	tst	r2, r3
     e04:	d0fc      	beq.n	e00 <system_clock_source_enable+0x60>
     e06:	4a0c      	ldr	r2, [pc, #48]	; (e38 <system_clock_source_enable+0x98>)
     e08:	6891      	ldr	r1, [r2, #8]
     e0a:	4b0a      	ldr	r3, [pc, #40]	; (e34 <system_clock_source_enable+0x94>)
     e0c:	62d9      	str	r1, [r3, #44]	; 0x2c
     e0e:	6851      	ldr	r1, [r2, #4]
     e10:	6299      	str	r1, [r3, #40]	; 0x28
     e12:	6812      	ldr	r2, [r2, #0]
     e14:	b292      	uxth	r2, r2
     e16:	849a      	strh	r2, [r3, #36]	; 0x24
     e18:	2000      	movs	r0, #0
     e1a:	e008      	b.n	e2e <system_clock_source_enable+0x8e>
     e1c:	4a05      	ldr	r2, [pc, #20]	; (e34 <system_clock_source_enable+0x94>)
     e1e:	2344      	movs	r3, #68	; 0x44
     e20:	5cd0      	ldrb	r0, [r2, r3]
     e22:	2102      	movs	r1, #2
     e24:	4301      	orrs	r1, r0
     e26:	54d1      	strb	r1, [r2, r3]
     e28:	2000      	movs	r0, #0
     e2a:	e000      	b.n	e2e <system_clock_source_enable+0x8e>
     e2c:	2017      	movs	r0, #23
     e2e:	4770      	bx	lr
     e30:	0000421c 	.word	0x0000421c
     e34:	40000800 	.word	0x40000800
     e38:	200000b0 	.word	0x200000b0
     e3c:	0000ff7f 	.word	0x0000ff7f

00000e40 <system_clock_init>:
     e40:	b5f0      	push	{r4, r5, r6, r7, lr}
     e42:	4657      	mov	r7, sl
     e44:	464e      	mov	r6, r9
     e46:	4645      	mov	r5, r8
     e48:	b4e0      	push	{r5, r6, r7}
     e4a:	b090      	sub	sp, #64	; 0x40
     e4c:	22c2      	movs	r2, #194	; 0xc2
     e4e:	00d2      	lsls	r2, r2, #3
     e50:	4b5e      	ldr	r3, [pc, #376]	; (fcc <system_clock_init+0x18c>)
     e52:	609a      	str	r2, [r3, #8]
     e54:	4b5e      	ldr	r3, [pc, #376]	; (fd0 <system_clock_init+0x190>)
     e56:	685a      	ldr	r2, [r3, #4]
     e58:	211e      	movs	r1, #30
     e5a:	438a      	bics	r2, r1
     e5c:	2104      	movs	r1, #4
     e5e:	430a      	orrs	r2, r1
     e60:	605a      	str	r2, [r3, #4]
     e62:	2203      	movs	r2, #3
     e64:	ab01      	add	r3, sp, #4
     e66:	701a      	strb	r2, [r3, #0]
     e68:	2400      	movs	r4, #0
     e6a:	4d5a      	ldr	r5, [pc, #360]	; (fd4 <system_clock_init+0x194>)
     e6c:	b2e0      	uxtb	r0, r4
     e6e:	a901      	add	r1, sp, #4
     e70:	47a8      	blx	r5
     e72:	3401      	adds	r4, #1
     e74:	2c25      	cmp	r4, #37	; 0x25
     e76:	d1f9      	bne.n	e6c <system_clock_init+0x2c>
     e78:	a80c      	add	r0, sp, #48	; 0x30
     e7a:	2300      	movs	r3, #0
     e7c:	7003      	strb	r3, [r0, #0]
     e7e:	2280      	movs	r2, #128	; 0x80
     e80:	0212      	lsls	r2, r2, #8
     e82:	6082      	str	r2, [r0, #8]
     e84:	70c3      	strb	r3, [r0, #3]
     e86:	2201      	movs	r2, #1
     e88:	7102      	strb	r2, [r0, #4]
     e8a:	7303      	strb	r3, [r0, #12]
     e8c:	7383      	strb	r3, [r0, #14]
     e8e:	2106      	movs	r1, #6
     e90:	7041      	strb	r1, [r0, #1]
     e92:	7082      	strb	r2, [r0, #2]
     e94:	7343      	strb	r3, [r0, #13]
     e96:	4b50      	ldr	r3, [pc, #320]	; (fd8 <system_clock_init+0x198>)
     e98:	4798      	blx	r3
     e9a:	2005      	movs	r0, #5
     e9c:	4b4f      	ldr	r3, [pc, #316]	; (fdc <system_clock_init+0x19c>)
     e9e:	4798      	blx	r3
     ea0:	494a      	ldr	r1, [pc, #296]	; (fcc <system_clock_init+0x18c>)
     ea2:	2202      	movs	r2, #2
     ea4:	68cb      	ldr	r3, [r1, #12]
     ea6:	421a      	tst	r2, r3
     ea8:	d0fc      	beq.n	ea4 <system_clock_init+0x64>
     eaa:	4b48      	ldr	r3, [pc, #288]	; (fcc <system_clock_init+0x18c>)
     eac:	8a99      	ldrh	r1, [r3, #20]
     eae:	2280      	movs	r2, #128	; 0x80
     eb0:	430a      	orrs	r2, r1
     eb2:	829a      	strh	r2, [r3, #20]
     eb4:	4a4a      	ldr	r2, [pc, #296]	; (fe0 <system_clock_init+0x1a0>)
     eb6:	6811      	ldr	r1, [r2, #0]
     eb8:	04c9      	lsls	r1, r1, #19
     eba:	0e49      	lsrs	r1, r1, #25
     ebc:	0409      	lsls	r1, r1, #16
     ebe:	6998      	ldr	r0, [r3, #24]
     ec0:	4a48      	ldr	r2, [pc, #288]	; (fe4 <system_clock_init+0x1a4>)
     ec2:	4002      	ands	r2, r0
     ec4:	430a      	orrs	r2, r1
     ec6:	619a      	str	r2, [r3, #24]
     ec8:	a80a      	add	r0, sp, #40	; 0x28
     eca:	2601      	movs	r6, #1
     ecc:	7046      	strb	r6, [r0, #1]
     ece:	7086      	strb	r6, [r0, #2]
     ed0:	7106      	strb	r6, [r0, #4]
     ed2:	2407      	movs	r4, #7
     ed4:	7004      	strb	r4, [r0, #0]
     ed6:	2200      	movs	r2, #0
     ed8:	4690      	mov	r8, r2
     eda:	7142      	strb	r2, [r0, #5]
     edc:	70c6      	strb	r6, [r0, #3]
     ede:	4b42      	ldr	r3, [pc, #264]	; (fe8 <system_clock_init+0x1a8>)
     ee0:	4798      	blx	r3
     ee2:	2004      	movs	r0, #4
     ee4:	4f3d      	ldr	r7, [pc, #244]	; (fdc <system_clock_init+0x19c>)
     ee6:	47b8      	blx	r7
     ee8:	a805      	add	r0, sp, #20
     eea:	2500      	movs	r5, #0
     eec:	4642      	mov	r2, r8
     eee:	8042      	strh	r2, [r0, #2]
     ef0:	8082      	strh	r2, [r0, #4]
     ef2:	7185      	strb	r5, [r0, #6]
     ef4:	71c5      	strb	r5, [r0, #7]
     ef6:	7204      	strb	r4, [r0, #8]
     ef8:	233f      	movs	r3, #63	; 0x3f
     efa:	8143      	strh	r3, [r0, #10]
     efc:	2204      	movs	r2, #4
     efe:	4691      	mov	r9, r2
     f00:	7002      	strb	r2, [r0, #0]
     f02:	7045      	strb	r5, [r0, #1]
     f04:	22b7      	movs	r2, #183	; 0xb7
     f06:	00d2      	lsls	r2, r2, #3
     f08:	8202      	strh	r2, [r0, #16]
     f0a:	7304      	strb	r4, [r0, #12]
     f0c:	81c3      	strh	r3, [r0, #14]
     f0e:	4b37      	ldr	r3, [pc, #220]	; (fec <system_clock_init+0x1ac>)
     f10:	4798      	blx	r3
     f12:	a804      	add	r0, sp, #16
     f14:	7045      	strb	r5, [r0, #1]
     f16:	7005      	strb	r5, [r0, #0]
     f18:	7085      	strb	r5, [r0, #2]
     f1a:	4b35      	ldr	r3, [pc, #212]	; (ff0 <system_clock_init+0x1b0>)
     f1c:	4798      	blx	r3
     f1e:	2006      	movs	r0, #6
     f20:	47b8      	blx	r7
     f22:	4b34      	ldr	r3, [pc, #208]	; (ff4 <system_clock_init+0x1b4>)
     f24:	4798      	blx	r3
     f26:	ac01      	add	r4, sp, #4
     f28:	6066      	str	r6, [r4, #4]
     f2a:	7065      	strb	r5, [r4, #1]
     f2c:	7225      	strb	r5, [r4, #8]
     f2e:	7265      	strb	r5, [r4, #9]
     f30:	2305      	movs	r3, #5
     f32:	7023      	strb	r3, [r4, #0]
     f34:	2001      	movs	r0, #1
     f36:	1c21      	adds	r1, r4, #0
     f38:	4b2f      	ldr	r3, [pc, #188]	; (ff8 <system_clock_init+0x1b8>)
     f3a:	469a      	mov	sl, r3
     f3c:	4798      	blx	r3
     f3e:	2001      	movs	r0, #1
     f40:	4a2e      	ldr	r2, [pc, #184]	; (ffc <system_clock_init+0x1bc>)
     f42:	4690      	mov	r8, r2
     f44:	4790      	blx	r2
     f46:	7065      	strb	r5, [r4, #1]
     f48:	7265      	strb	r5, [r4, #9]
     f4a:	464b      	mov	r3, r9
     f4c:	7023      	strb	r3, [r4, #0]
     f4e:	2220      	movs	r2, #32
     f50:	4691      	mov	r9, r2
     f52:	6062      	str	r2, [r4, #4]
     f54:	7226      	strb	r6, [r4, #8]
     f56:	2002      	movs	r0, #2
     f58:	1c21      	adds	r1, r4, #0
     f5a:	47d0      	blx	sl
     f5c:	2002      	movs	r0, #2
     f5e:	47c0      	blx	r8
     f60:	7065      	strb	r5, [r4, #1]
     f62:	7225      	strb	r5, [r4, #8]
     f64:	7265      	strb	r5, [r4, #9]
     f66:	2303      	movs	r3, #3
     f68:	7023      	strb	r3, [r4, #0]
     f6a:	464a      	mov	r2, r9
     f6c:	6062      	str	r2, [r4, #4]
     f6e:	2004      	movs	r0, #4
     f70:	1c21      	adds	r1, r4, #0
     f72:	47d0      	blx	sl
     f74:	2004      	movs	r0, #4
     f76:	47c0      	blx	r8
     f78:	7026      	strb	r6, [r4, #0]
     f7a:	2000      	movs	r0, #0
     f7c:	1c21      	adds	r1, r4, #0
     f7e:	4b15      	ldr	r3, [pc, #84]	; (fd4 <system_clock_init+0x194>)
     f80:	4798      	blx	r3
     f82:	2000      	movs	r0, #0
     f84:	4b1e      	ldr	r3, [pc, #120]	; (1000 <system_clock_init+0x1c0>)
     f86:	4798      	blx	r3
     f88:	2007      	movs	r0, #7
     f8a:	47b8      	blx	r7
     f8c:	490f      	ldr	r1, [pc, #60]	; (fcc <system_clock_init+0x18c>)
     f8e:	22d0      	movs	r2, #208	; 0xd0
     f90:	68cb      	ldr	r3, [r1, #12]
     f92:	4013      	ands	r3, r2
     f94:	2bd0      	cmp	r3, #208	; 0xd0
     f96:	d1fb      	bne.n	f90 <system_clock_init+0x150>
     f98:	4a1a      	ldr	r2, [pc, #104]	; (1004 <system_clock_init+0x1c4>)
     f9a:	2300      	movs	r3, #0
     f9c:	7213      	strb	r3, [r2, #8]
     f9e:	7253      	strb	r3, [r2, #9]
     fa0:	7293      	strb	r3, [r2, #10]
     fa2:	a901      	add	r1, sp, #4
     fa4:	2201      	movs	r2, #1
     fa6:	604a      	str	r2, [r1, #4]
     fa8:	704b      	strb	r3, [r1, #1]
     faa:	720b      	strb	r3, [r1, #8]
     fac:	724b      	strb	r3, [r1, #9]
     fae:	2307      	movs	r3, #7
     fb0:	700b      	strb	r3, [r1, #0]
     fb2:	2000      	movs	r0, #0
     fb4:	4b10      	ldr	r3, [pc, #64]	; (ff8 <system_clock_init+0x1b8>)
     fb6:	4798      	blx	r3
     fb8:	2000      	movs	r0, #0
     fba:	4b10      	ldr	r3, [pc, #64]	; (ffc <system_clock_init+0x1bc>)
     fbc:	4798      	blx	r3
     fbe:	b010      	add	sp, #64	; 0x40
     fc0:	bc1c      	pop	{r2, r3, r4}
     fc2:	4690      	mov	r8, r2
     fc4:	4699      	mov	r9, r3
     fc6:	46a2      	mov	sl, r4
     fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	40000800 	.word	0x40000800
     fd0:	41004000 	.word	0x41004000
     fd4:	0000123d 	.word	0x0000123d
     fd8:	00000c7d 	.word	0x00000c7d
     fdc:	00000da1 	.word	0x00000da1
     fe0:	00806024 	.word	0x00806024
     fe4:	ff80ffff 	.word	0xff80ffff
     fe8:	00000c01 	.word	0x00000c01
     fec:	00000d31 	.word	0x00000d31
     ff0:	00000bc5 	.word	0x00000bc5
     ff4:	00001009 	.word	0x00001009
     ff8:	0000102d 	.word	0x0000102d
     ffc:	000010e1 	.word	0x000010e1
    1000:	000011b1 	.word	0x000011b1
    1004:	40000400 	.word	0x40000400

00001008 <system_gclk_init>:
    1008:	4b06      	ldr	r3, [pc, #24]	; (1024 <system_gclk_init+0x1c>)
    100a:	6999      	ldr	r1, [r3, #24]
    100c:	2208      	movs	r2, #8
    100e:	430a      	orrs	r2, r1
    1010:	619a      	str	r2, [r3, #24]
    1012:	2201      	movs	r2, #1
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <system_gclk_init+0x20>)
    1016:	701a      	strb	r2, [r3, #0]
    1018:	1c19      	adds	r1, r3, #0
    101a:	780b      	ldrb	r3, [r1, #0]
    101c:	4213      	tst	r3, r2
    101e:	d1fc      	bne.n	101a <system_gclk_init+0x12>
    1020:	4770      	bx	lr
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	40000400 	.word	0x40000400
    1028:	40000c00 	.word	0x40000c00

0000102c <system_gclk_gen_set_config>:
    102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    102e:	1c06      	adds	r6, r0, #0
    1030:	1c07      	adds	r7, r0, #0
    1032:	780d      	ldrb	r5, [r1, #0]
    1034:	022d      	lsls	r5, r5, #8
    1036:	4305      	orrs	r5, r0
    1038:	784b      	ldrb	r3, [r1, #1]
    103a:	2b00      	cmp	r3, #0
    103c:	d002      	beq.n	1044 <system_gclk_gen_set_config+0x18>
    103e:	2380      	movs	r3, #128	; 0x80
    1040:	02db      	lsls	r3, r3, #11
    1042:	431d      	orrs	r5, r3
    1044:	7a4b      	ldrb	r3, [r1, #9]
    1046:	2b00      	cmp	r3, #0
    1048:	d002      	beq.n	1050 <system_gclk_gen_set_config+0x24>
    104a:	2380      	movs	r3, #128	; 0x80
    104c:	031b      	lsls	r3, r3, #12
    104e:	431d      	orrs	r5, r3
    1050:	684c      	ldr	r4, [r1, #4]
    1052:	2c01      	cmp	r4, #1
    1054:	d917      	bls.n	1086 <system_gclk_gen_set_config+0x5a>
    1056:	1e63      	subs	r3, r4, #1
    1058:	421c      	tst	r4, r3
    105a:	d10f      	bne.n	107c <system_gclk_gen_set_config+0x50>
    105c:	2c02      	cmp	r4, #2
    105e:	d906      	bls.n	106e <system_gclk_gen_set_config+0x42>
    1060:	2302      	movs	r3, #2
    1062:	2200      	movs	r2, #0
    1064:	3201      	adds	r2, #1
    1066:	005b      	lsls	r3, r3, #1
    1068:	429c      	cmp	r4, r3
    106a:	d8fb      	bhi.n	1064 <system_gclk_gen_set_config+0x38>
    106c:	e000      	b.n	1070 <system_gclk_gen_set_config+0x44>
    106e:	2200      	movs	r2, #0
    1070:	0217      	lsls	r7, r2, #8
    1072:	4337      	orrs	r7, r6
    1074:	2380      	movs	r3, #128	; 0x80
    1076:	035b      	lsls	r3, r3, #13
    1078:	431d      	orrs	r5, r3
    107a:	e004      	b.n	1086 <system_gclk_gen_set_config+0x5a>
    107c:	0227      	lsls	r7, r4, #8
    107e:	4337      	orrs	r7, r6
    1080:	2380      	movs	r3, #128	; 0x80
    1082:	029b      	lsls	r3, r3, #10
    1084:	431d      	orrs	r5, r3
    1086:	7a0b      	ldrb	r3, [r1, #8]
    1088:	2b00      	cmp	r3, #0
    108a:	d002      	beq.n	1092 <system_gclk_gen_set_config+0x66>
    108c:	2380      	movs	r3, #128	; 0x80
    108e:	039b      	lsls	r3, r3, #14
    1090:	431d      	orrs	r5, r3
    1092:	4a0f      	ldr	r2, [pc, #60]	; (10d0 <system_gclk_gen_set_config+0xa4>)
    1094:	7853      	ldrb	r3, [r2, #1]
    1096:	b25b      	sxtb	r3, r3
    1098:	2b00      	cmp	r3, #0
    109a:	dbfb      	blt.n	1094 <system_gclk_gen_set_config+0x68>
    109c:	4b0d      	ldr	r3, [pc, #52]	; (10d4 <system_gclk_gen_set_config+0xa8>)
    109e:	4798      	blx	r3
    10a0:	4b0d      	ldr	r3, [pc, #52]	; (10d8 <system_gclk_gen_set_config+0xac>)
    10a2:	701e      	strb	r6, [r3, #0]
    10a4:	4a0a      	ldr	r2, [pc, #40]	; (10d0 <system_gclk_gen_set_config+0xa4>)
    10a6:	7853      	ldrb	r3, [r2, #1]
    10a8:	b25b      	sxtb	r3, r3
    10aa:	2b00      	cmp	r3, #0
    10ac:	dbfb      	blt.n	10a6 <system_gclk_gen_set_config+0x7a>
    10ae:	4b08      	ldr	r3, [pc, #32]	; (10d0 <system_gclk_gen_set_config+0xa4>)
    10b0:	609f      	str	r7, [r3, #8]
    10b2:	1c1a      	adds	r2, r3, #0
    10b4:	7853      	ldrb	r3, [r2, #1]
    10b6:	b25b      	sxtb	r3, r3
    10b8:	2b00      	cmp	r3, #0
    10ba:	dbfb      	blt.n	10b4 <system_gclk_gen_set_config+0x88>
    10bc:	4b04      	ldr	r3, [pc, #16]	; (10d0 <system_gclk_gen_set_config+0xa4>)
    10be:	6859      	ldr	r1, [r3, #4]
    10c0:	2280      	movs	r2, #128	; 0x80
    10c2:	0252      	lsls	r2, r2, #9
    10c4:	400a      	ands	r2, r1
    10c6:	4315      	orrs	r5, r2
    10c8:	605d      	str	r5, [r3, #4]
    10ca:	4b04      	ldr	r3, [pc, #16]	; (10dc <system_gclk_gen_set_config+0xb0>)
    10cc:	4798      	blx	r3
    10ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10d0:	40000c00 	.word	0x40000c00
    10d4:	000001a9 	.word	0x000001a9
    10d8:	40000c08 	.word	0x40000c08
    10dc:	000001e9 	.word	0x000001e9

000010e0 <system_gclk_gen_enable>:
    10e0:	b510      	push	{r4, lr}
    10e2:	1c04      	adds	r4, r0, #0
    10e4:	4a0b      	ldr	r2, [pc, #44]	; (1114 <system_gclk_gen_enable+0x34>)
    10e6:	7853      	ldrb	r3, [r2, #1]
    10e8:	b25b      	sxtb	r3, r3
    10ea:	2b00      	cmp	r3, #0
    10ec:	dbfb      	blt.n	10e6 <system_gclk_gen_enable+0x6>
    10ee:	4b0a      	ldr	r3, [pc, #40]	; (1118 <system_gclk_gen_enable+0x38>)
    10f0:	4798      	blx	r3
    10f2:	4b0a      	ldr	r3, [pc, #40]	; (111c <system_gclk_gen_enable+0x3c>)
    10f4:	701c      	strb	r4, [r3, #0]
    10f6:	4a07      	ldr	r2, [pc, #28]	; (1114 <system_gclk_gen_enable+0x34>)
    10f8:	7853      	ldrb	r3, [r2, #1]
    10fa:	b25b      	sxtb	r3, r3
    10fc:	2b00      	cmp	r3, #0
    10fe:	dbfb      	blt.n	10f8 <system_gclk_gen_enable+0x18>
    1100:	4b04      	ldr	r3, [pc, #16]	; (1114 <system_gclk_gen_enable+0x34>)
    1102:	6859      	ldr	r1, [r3, #4]
    1104:	2280      	movs	r2, #128	; 0x80
    1106:	0252      	lsls	r2, r2, #9
    1108:	430a      	orrs	r2, r1
    110a:	605a      	str	r2, [r3, #4]
    110c:	4b04      	ldr	r3, [pc, #16]	; (1120 <system_gclk_gen_enable+0x40>)
    110e:	4798      	blx	r3
    1110:	bd10      	pop	{r4, pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	40000c00 	.word	0x40000c00
    1118:	000001a9 	.word	0x000001a9
    111c:	40000c04 	.word	0x40000c04
    1120:	000001e9 	.word	0x000001e9

00001124 <system_gclk_gen_get_hz>:
    1124:	b570      	push	{r4, r5, r6, lr}
    1126:	1c04      	adds	r4, r0, #0
    1128:	4a1a      	ldr	r2, [pc, #104]	; (1194 <system_gclk_gen_get_hz+0x70>)
    112a:	7853      	ldrb	r3, [r2, #1]
    112c:	b25b      	sxtb	r3, r3
    112e:	2b00      	cmp	r3, #0
    1130:	dbfb      	blt.n	112a <system_gclk_gen_get_hz+0x6>
    1132:	4b19      	ldr	r3, [pc, #100]	; (1198 <system_gclk_gen_get_hz+0x74>)
    1134:	4798      	blx	r3
    1136:	4b19      	ldr	r3, [pc, #100]	; (119c <system_gclk_gen_get_hz+0x78>)
    1138:	701c      	strb	r4, [r3, #0]
    113a:	4a16      	ldr	r2, [pc, #88]	; (1194 <system_gclk_gen_get_hz+0x70>)
    113c:	7853      	ldrb	r3, [r2, #1]
    113e:	b25b      	sxtb	r3, r3
    1140:	2b00      	cmp	r3, #0
    1142:	dbfb      	blt.n	113c <system_gclk_gen_get_hz+0x18>
    1144:	4e13      	ldr	r6, [pc, #76]	; (1194 <system_gclk_gen_get_hz+0x70>)
    1146:	6870      	ldr	r0, [r6, #4]
    1148:	04c0      	lsls	r0, r0, #19
    114a:	0ec0      	lsrs	r0, r0, #27
    114c:	4b14      	ldr	r3, [pc, #80]	; (11a0 <system_gclk_gen_get_hz+0x7c>)
    114e:	4798      	blx	r3
    1150:	1c05      	adds	r5, r0, #0
    1152:	4b12      	ldr	r3, [pc, #72]	; (119c <system_gclk_gen_get_hz+0x78>)
    1154:	701c      	strb	r4, [r3, #0]
    1156:	6876      	ldr	r6, [r6, #4]
    1158:	02f6      	lsls	r6, r6, #11
    115a:	0ff6      	lsrs	r6, r6, #31
    115c:	4b11      	ldr	r3, [pc, #68]	; (11a4 <system_gclk_gen_get_hz+0x80>)
    115e:	701c      	strb	r4, [r3, #0]
    1160:	4a0c      	ldr	r2, [pc, #48]	; (1194 <system_gclk_gen_get_hz+0x70>)
    1162:	7853      	ldrb	r3, [r2, #1]
    1164:	b25b      	sxtb	r3, r3
    1166:	2b00      	cmp	r3, #0
    1168:	dbfb      	blt.n	1162 <system_gclk_gen_get_hz+0x3e>
    116a:	4b0a      	ldr	r3, [pc, #40]	; (1194 <system_gclk_gen_get_hz+0x70>)
    116c:	689c      	ldr	r4, [r3, #8]
    116e:	0a24      	lsrs	r4, r4, #8
    1170:	b2a4      	uxth	r4, r4
    1172:	4b0d      	ldr	r3, [pc, #52]	; (11a8 <system_gclk_gen_get_hz+0x84>)
    1174:	4798      	blx	r3
    1176:	2e00      	cmp	r6, #0
    1178:	d107      	bne.n	118a <system_gclk_gen_get_hz+0x66>
    117a:	2c01      	cmp	r4, #1
    117c:	d907      	bls.n	118e <system_gclk_gen_get_hz+0x6a>
    117e:	1c28      	adds	r0, r5, #0
    1180:	1c21      	adds	r1, r4, #0
    1182:	4b0a      	ldr	r3, [pc, #40]	; (11ac <system_gclk_gen_get_hz+0x88>)
    1184:	4798      	blx	r3
    1186:	1c05      	adds	r5, r0, #0
    1188:	e001      	b.n	118e <system_gclk_gen_get_hz+0x6a>
    118a:	3401      	adds	r4, #1
    118c:	40e5      	lsrs	r5, r4
    118e:	1c28      	adds	r0, r5, #0
    1190:	bd70      	pop	{r4, r5, r6, pc}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	40000c00 	.word	0x40000c00
    1198:	000001a9 	.word	0x000001a9
    119c:	40000c04 	.word	0x40000c04
    11a0:	00000b35 	.word	0x00000b35
    11a4:	40000c08 	.word	0x40000c08
    11a8:	000001e9 	.word	0x000001e9
    11ac:	00003f31 	.word	0x00003f31

000011b0 <system_gclk_chan_enable>:
    11b0:	b510      	push	{r4, lr}
    11b2:	1c04      	adds	r4, r0, #0
    11b4:	4b06      	ldr	r3, [pc, #24]	; (11d0 <system_gclk_chan_enable+0x20>)
    11b6:	4798      	blx	r3
    11b8:	4b06      	ldr	r3, [pc, #24]	; (11d4 <system_gclk_chan_enable+0x24>)
    11ba:	701c      	strb	r4, [r3, #0]
    11bc:	4b06      	ldr	r3, [pc, #24]	; (11d8 <system_gclk_chan_enable+0x28>)
    11be:	8859      	ldrh	r1, [r3, #2]
    11c0:	2280      	movs	r2, #128	; 0x80
    11c2:	01d2      	lsls	r2, r2, #7
    11c4:	430a      	orrs	r2, r1
    11c6:	805a      	strh	r2, [r3, #2]
    11c8:	4b04      	ldr	r3, [pc, #16]	; (11dc <system_gclk_chan_enable+0x2c>)
    11ca:	4798      	blx	r3
    11cc:	bd10      	pop	{r4, pc}
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	000001a9 	.word	0x000001a9
    11d4:	40000c02 	.word	0x40000c02
    11d8:	40000c00 	.word	0x40000c00
    11dc:	000001e9 	.word	0x000001e9

000011e0 <system_gclk_chan_disable>:
    11e0:	b510      	push	{r4, lr}
    11e2:	1c04      	adds	r4, r0, #0
    11e4:	4b0f      	ldr	r3, [pc, #60]	; (1224 <system_gclk_chan_disable+0x44>)
    11e6:	4798      	blx	r3
    11e8:	4b0f      	ldr	r3, [pc, #60]	; (1228 <system_gclk_chan_disable+0x48>)
    11ea:	701c      	strb	r4, [r3, #0]
    11ec:	4b0f      	ldr	r3, [pc, #60]	; (122c <system_gclk_chan_disable+0x4c>)
    11ee:	8858      	ldrh	r0, [r3, #2]
    11f0:	0500      	lsls	r0, r0, #20
    11f2:	0f00      	lsrs	r0, r0, #28
    11f4:	8859      	ldrh	r1, [r3, #2]
    11f6:	4a0e      	ldr	r2, [pc, #56]	; (1230 <system_gclk_chan_disable+0x50>)
    11f8:	400a      	ands	r2, r1
    11fa:	805a      	strh	r2, [r3, #2]
    11fc:	8859      	ldrh	r1, [r3, #2]
    11fe:	4a0d      	ldr	r2, [pc, #52]	; (1234 <system_gclk_chan_disable+0x54>)
    1200:	400a      	ands	r2, r1
    1202:	805a      	strh	r2, [r3, #2]
    1204:	1c19      	adds	r1, r3, #0
    1206:	2280      	movs	r2, #128	; 0x80
    1208:	01d2      	lsls	r2, r2, #7
    120a:	884b      	ldrh	r3, [r1, #2]
    120c:	4213      	tst	r3, r2
    120e:	d1fc      	bne.n	120a <system_gclk_chan_disable+0x2a>
    1210:	4b06      	ldr	r3, [pc, #24]	; (122c <system_gclk_chan_disable+0x4c>)
    1212:	0201      	lsls	r1, r0, #8
    1214:	8858      	ldrh	r0, [r3, #2]
    1216:	4a06      	ldr	r2, [pc, #24]	; (1230 <system_gclk_chan_disable+0x50>)
    1218:	4002      	ands	r2, r0
    121a:	430a      	orrs	r2, r1
    121c:	805a      	strh	r2, [r3, #2]
    121e:	4b06      	ldr	r3, [pc, #24]	; (1238 <system_gclk_chan_disable+0x58>)
    1220:	4798      	blx	r3
    1222:	bd10      	pop	{r4, pc}
    1224:	000001a9 	.word	0x000001a9
    1228:	40000c02 	.word	0x40000c02
    122c:	40000c00 	.word	0x40000c00
    1230:	fffff0ff 	.word	0xfffff0ff
    1234:	ffffbfff 	.word	0xffffbfff
    1238:	000001e9 	.word	0x000001e9

0000123c <system_gclk_chan_set_config>:
    123c:	b510      	push	{r4, lr}
    123e:	780c      	ldrb	r4, [r1, #0]
    1240:	0224      	lsls	r4, r4, #8
    1242:	4304      	orrs	r4, r0
    1244:	4b02      	ldr	r3, [pc, #8]	; (1250 <system_gclk_chan_set_config+0x14>)
    1246:	4798      	blx	r3
    1248:	b2a4      	uxth	r4, r4
    124a:	4b02      	ldr	r3, [pc, #8]	; (1254 <system_gclk_chan_set_config+0x18>)
    124c:	805c      	strh	r4, [r3, #2]
    124e:	bd10      	pop	{r4, pc}
    1250:	000011e1 	.word	0x000011e1
    1254:	40000c00 	.word	0x40000c00

00001258 <system_gclk_chan_get_hz>:
    1258:	b510      	push	{r4, lr}
    125a:	1c04      	adds	r4, r0, #0
    125c:	4b06      	ldr	r3, [pc, #24]	; (1278 <system_gclk_chan_get_hz+0x20>)
    125e:	4798      	blx	r3
    1260:	4b06      	ldr	r3, [pc, #24]	; (127c <system_gclk_chan_get_hz+0x24>)
    1262:	701c      	strb	r4, [r3, #0]
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <system_gclk_chan_get_hz+0x28>)
    1266:	885c      	ldrh	r4, [r3, #2]
    1268:	0524      	lsls	r4, r4, #20
    126a:	0f24      	lsrs	r4, r4, #28
    126c:	4b05      	ldr	r3, [pc, #20]	; (1284 <system_gclk_chan_get_hz+0x2c>)
    126e:	4798      	blx	r3
    1270:	1c20      	adds	r0, r4, #0
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <system_gclk_chan_get_hz+0x30>)
    1274:	4798      	blx	r3
    1276:	bd10      	pop	{r4, pc}
    1278:	000001a9 	.word	0x000001a9
    127c:	40000c02 	.word	0x40000c02
    1280:	40000c00 	.word	0x40000c00
    1284:	000001e9 	.word	0x000001e9
    1288:	00001125 	.word	0x00001125

0000128c <_system_pinmux_config>:
    128c:	b530      	push	{r4, r5, lr}
    128e:	78d3      	ldrb	r3, [r2, #3]
    1290:	2b00      	cmp	r3, #0
    1292:	d11e      	bne.n	12d2 <_system_pinmux_config+0x46>
    1294:	7813      	ldrb	r3, [r2, #0]
    1296:	2b80      	cmp	r3, #128	; 0x80
    1298:	d004      	beq.n	12a4 <_system_pinmux_config+0x18>
    129a:	061b      	lsls	r3, r3, #24
    129c:	2480      	movs	r4, #128	; 0x80
    129e:	0264      	lsls	r4, r4, #9
    12a0:	4323      	orrs	r3, r4
    12a2:	e000      	b.n	12a6 <_system_pinmux_config+0x1a>
    12a4:	2300      	movs	r3, #0
    12a6:	7854      	ldrb	r4, [r2, #1]
    12a8:	2502      	movs	r5, #2
    12aa:	43ac      	bics	r4, r5
    12ac:	d10a      	bne.n	12c4 <_system_pinmux_config+0x38>
    12ae:	7894      	ldrb	r4, [r2, #2]
    12b0:	2c00      	cmp	r4, #0
    12b2:	d103      	bne.n	12bc <_system_pinmux_config+0x30>
    12b4:	2480      	movs	r4, #128	; 0x80
    12b6:	02a4      	lsls	r4, r4, #10
    12b8:	4323      	orrs	r3, r4
    12ba:	e002      	b.n	12c2 <_system_pinmux_config+0x36>
    12bc:	24c0      	movs	r4, #192	; 0xc0
    12be:	02e4      	lsls	r4, r4, #11
    12c0:	4323      	orrs	r3, r4
    12c2:	6041      	str	r1, [r0, #4]
    12c4:	7854      	ldrb	r4, [r2, #1]
    12c6:	3c01      	subs	r4, #1
    12c8:	2c01      	cmp	r4, #1
    12ca:	d804      	bhi.n	12d6 <_system_pinmux_config+0x4a>
    12cc:	4c11      	ldr	r4, [pc, #68]	; (1314 <_system_pinmux_config+0x88>)
    12ce:	4023      	ands	r3, r4
    12d0:	e001      	b.n	12d6 <_system_pinmux_config+0x4a>
    12d2:	6041      	str	r1, [r0, #4]
    12d4:	2300      	movs	r3, #0
    12d6:	040d      	lsls	r5, r1, #16
    12d8:	0c2d      	lsrs	r5, r5, #16
    12da:	24a0      	movs	r4, #160	; 0xa0
    12dc:	05e4      	lsls	r4, r4, #23
    12de:	432c      	orrs	r4, r5
    12e0:	431c      	orrs	r4, r3
    12e2:	6284      	str	r4, [r0, #40]	; 0x28
    12e4:	0c0d      	lsrs	r5, r1, #16
    12e6:	24d0      	movs	r4, #208	; 0xd0
    12e8:	0624      	lsls	r4, r4, #24
    12ea:	432c      	orrs	r4, r5
    12ec:	431c      	orrs	r4, r3
    12ee:	6284      	str	r4, [r0, #40]	; 0x28
    12f0:	78d4      	ldrb	r4, [r2, #3]
    12f2:	2c00      	cmp	r4, #0
    12f4:	d10c      	bne.n	1310 <_system_pinmux_config+0x84>
    12f6:	035c      	lsls	r4, r3, #13
    12f8:	d505      	bpl.n	1306 <_system_pinmux_config+0x7a>
    12fa:	7893      	ldrb	r3, [r2, #2]
    12fc:	2b01      	cmp	r3, #1
    12fe:	d101      	bne.n	1304 <_system_pinmux_config+0x78>
    1300:	6181      	str	r1, [r0, #24]
    1302:	e000      	b.n	1306 <_system_pinmux_config+0x7a>
    1304:	6141      	str	r1, [r0, #20]
    1306:	7853      	ldrb	r3, [r2, #1]
    1308:	3b01      	subs	r3, #1
    130a:	2b01      	cmp	r3, #1
    130c:	d800      	bhi.n	1310 <_system_pinmux_config+0x84>
    130e:	6081      	str	r1, [r0, #8]
    1310:	bd30      	pop	{r4, r5, pc}
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	fffbffff 	.word	0xfffbffff

00001318 <system_pinmux_pin_set_config>:
    1318:	b508      	push	{r3, lr}
    131a:	1c03      	adds	r3, r0, #0
    131c:	1c0a      	adds	r2, r1, #0
    131e:	09c1      	lsrs	r1, r0, #7
    1320:	2000      	movs	r0, #0
    1322:	2900      	cmp	r1, #0
    1324:	d103      	bne.n	132e <system_pinmux_pin_set_config+0x16>
    1326:	0958      	lsrs	r0, r3, #5
    1328:	01c0      	lsls	r0, r0, #7
    132a:	4904      	ldr	r1, [pc, #16]	; (133c <system_pinmux_pin_set_config+0x24>)
    132c:	1840      	adds	r0, r0, r1
    132e:	211f      	movs	r1, #31
    1330:	400b      	ands	r3, r1
    1332:	2101      	movs	r1, #1
    1334:	4099      	lsls	r1, r3
    1336:	4b02      	ldr	r3, [pc, #8]	; (1340 <system_pinmux_pin_set_config+0x28>)
    1338:	4798      	blx	r3
    133a:	bd08      	pop	{r3, pc}
    133c:	41004400 	.word	0x41004400
    1340:	0000128d 	.word	0x0000128d

00001344 <_system_dummy_init>:
    1344:	4770      	bx	lr
    1346:	46c0      	nop			; (mov r8, r8)

00001348 <system_init>:
    1348:	b508      	push	{r3, lr}
    134a:	4b04      	ldr	r3, [pc, #16]	; (135c <system_init+0x14>)
    134c:	4798      	blx	r3
    134e:	4b04      	ldr	r3, [pc, #16]	; (1360 <system_init+0x18>)
    1350:	4798      	blx	r3
    1352:	4b04      	ldr	r3, [pc, #16]	; (1364 <system_init+0x1c>)
    1354:	4798      	blx	r3
    1356:	4b04      	ldr	r3, [pc, #16]	; (1368 <system_init+0x20>)
    1358:	4798      	blx	r3
    135a:	bd08      	pop	{r3, pc}
    135c:	00000e41 	.word	0x00000e41
    1360:	00000219 	.word	0x00000219
    1364:	00001345 	.word	0x00001345
    1368:	000003e1 	.word	0x000003e1

0000136c <tc_register_callback>:
    136c:	1c93      	adds	r3, r2, #2
    136e:	009b      	lsls	r3, r3, #2
    1370:	5019      	str	r1, [r3, r0]
    1372:	2a02      	cmp	r2, #2
    1374:	d104      	bne.n	1380 <tc_register_callback+0x14>
    1376:	7e02      	ldrb	r2, [r0, #24]
    1378:	2310      	movs	r3, #16
    137a:	4313      	orrs	r3, r2
    137c:	7603      	strb	r3, [r0, #24]
    137e:	e00c      	b.n	139a <tc_register_callback+0x2e>
    1380:	2a03      	cmp	r2, #3
    1382:	d104      	bne.n	138e <tc_register_callback+0x22>
    1384:	7e02      	ldrb	r2, [r0, #24]
    1386:	2320      	movs	r3, #32
    1388:	4313      	orrs	r3, r2
    138a:	7603      	strb	r3, [r0, #24]
    138c:	e005      	b.n	139a <tc_register_callback+0x2e>
    138e:	2301      	movs	r3, #1
    1390:	4093      	lsls	r3, r2
    1392:	1c1a      	adds	r2, r3, #0
    1394:	7e03      	ldrb	r3, [r0, #24]
    1396:	431a      	orrs	r2, r3
    1398:	7602      	strb	r2, [r0, #24]
    139a:	2000      	movs	r0, #0
    139c:	4770      	bx	lr
    139e:	46c0      	nop			; (mov r8, r8)

000013a0 <_tc_interrupt_handler>:
    13a0:	b538      	push	{r3, r4, r5, lr}
    13a2:	0080      	lsls	r0, r0, #2
    13a4:	4b14      	ldr	r3, [pc, #80]	; (13f8 <_tc_interrupt_handler+0x58>)
    13a6:	58c4      	ldr	r4, [r0, r3]
    13a8:	6822      	ldr	r2, [r4, #0]
    13aa:	7b95      	ldrb	r5, [r2, #14]
    13ac:	7e23      	ldrb	r3, [r4, #24]
    13ae:	401d      	ands	r5, r3
    13b0:	7e63      	ldrb	r3, [r4, #25]
    13b2:	401d      	ands	r5, r3
    13b4:	07eb      	lsls	r3, r5, #31
    13b6:	d505      	bpl.n	13c4 <_tc_interrupt_handler+0x24>
    13b8:	1c20      	adds	r0, r4, #0
    13ba:	68a2      	ldr	r2, [r4, #8]
    13bc:	4790      	blx	r2
    13be:	2301      	movs	r3, #1
    13c0:	6822      	ldr	r2, [r4, #0]
    13c2:	7393      	strb	r3, [r2, #14]
    13c4:	07ab      	lsls	r3, r5, #30
    13c6:	d505      	bpl.n	13d4 <_tc_interrupt_handler+0x34>
    13c8:	1c20      	adds	r0, r4, #0
    13ca:	68e2      	ldr	r2, [r4, #12]
    13cc:	4790      	blx	r2
    13ce:	2302      	movs	r3, #2
    13d0:	6822      	ldr	r2, [r4, #0]
    13d2:	7393      	strb	r3, [r2, #14]
    13d4:	06eb      	lsls	r3, r5, #27
    13d6:	d505      	bpl.n	13e4 <_tc_interrupt_handler+0x44>
    13d8:	1c20      	adds	r0, r4, #0
    13da:	6922      	ldr	r2, [r4, #16]
    13dc:	4790      	blx	r2
    13de:	2310      	movs	r3, #16
    13e0:	6822      	ldr	r2, [r4, #0]
    13e2:	7393      	strb	r3, [r2, #14]
    13e4:	06ab      	lsls	r3, r5, #26
    13e6:	d505      	bpl.n	13f4 <_tc_interrupt_handler+0x54>
    13e8:	1c20      	adds	r0, r4, #0
    13ea:	6962      	ldr	r2, [r4, #20]
    13ec:	4790      	blx	r2
    13ee:	6823      	ldr	r3, [r4, #0]
    13f0:	2220      	movs	r2, #32
    13f2:	739a      	strb	r2, [r3, #14]
    13f4:	bd38      	pop	{r3, r4, r5, pc}
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	20000774 	.word	0x20000774

000013fc <TC3_Handler>:
    13fc:	b508      	push	{r3, lr}
    13fe:	2000      	movs	r0, #0
    1400:	4b01      	ldr	r3, [pc, #4]	; (1408 <TC3_Handler+0xc>)
    1402:	4798      	blx	r3
    1404:	bd08      	pop	{r3, pc}
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	000013a1 	.word	0x000013a1

0000140c <TC4_Handler>:
    140c:	b508      	push	{r3, lr}
    140e:	2001      	movs	r0, #1
    1410:	4b01      	ldr	r3, [pc, #4]	; (1418 <TC4_Handler+0xc>)
    1412:	4798      	blx	r3
    1414:	bd08      	pop	{r3, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	000013a1 	.word	0x000013a1

0000141c <TC5_Handler>:
    141c:	b508      	push	{r3, lr}
    141e:	2002      	movs	r0, #2
    1420:	4b01      	ldr	r3, [pc, #4]	; (1428 <TC5_Handler+0xc>)
    1422:	4798      	blx	r3
    1424:	bd08      	pop	{r3, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	000013a1 	.word	0x000013a1

0000142c <_tc_get_inst_index>:
    142c:	b570      	push	{r4, r5, r6, lr}
    142e:	b084      	sub	sp, #16
    1430:	1c01      	adds	r1, r0, #0
    1432:	ab01      	add	r3, sp, #4
    1434:	4a0a      	ldr	r2, [pc, #40]	; (1460 <_tc_get_inst_index+0x34>)
    1436:	ca70      	ldmia	r2!, {r4, r5, r6}
    1438:	c370      	stmia	r3!, {r4, r5, r6}
    143a:	9b01      	ldr	r3, [sp, #4]
    143c:	4283      	cmp	r3, r0
    143e:	d00a      	beq.n	1456 <_tc_get_inst_index+0x2a>
    1440:	9c02      	ldr	r4, [sp, #8]
    1442:	4284      	cmp	r4, r0
    1444:	d005      	beq.n	1452 <_tc_get_inst_index+0x26>
    1446:	2000      	movs	r0, #0
    1448:	9d03      	ldr	r5, [sp, #12]
    144a:	428d      	cmp	r5, r1
    144c:	d105      	bne.n	145a <_tc_get_inst_index+0x2e>
    144e:	2002      	movs	r0, #2
    1450:	e002      	b.n	1458 <_tc_get_inst_index+0x2c>
    1452:	2001      	movs	r0, #1
    1454:	e000      	b.n	1458 <_tc_get_inst_index+0x2c>
    1456:	2000      	movs	r0, #0
    1458:	b2c0      	uxtb	r0, r0
    145a:	b004      	add	sp, #16
    145c:	bd70      	pop	{r4, r5, r6, pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	00004240 	.word	0x00004240

00001464 <tc_init>:
    1464:	b5f0      	push	{r4, r5, r6, r7, lr}
    1466:	464f      	mov	r7, r9
    1468:	4646      	mov	r6, r8
    146a:	b4c0      	push	{r6, r7}
    146c:	b087      	sub	sp, #28
    146e:	1c04      	adds	r4, r0, #0
    1470:	1c0d      	adds	r5, r1, #0
    1472:	4690      	mov	r8, r2
    1474:	1c08      	adds	r0, r1, #0
    1476:	4b90      	ldr	r3, [pc, #576]	; (16b8 <tc_init+0x254>)
    1478:	4798      	blx	r3
    147a:	4681      	mov	r9, r0
    147c:	4f8f      	ldr	r7, [pc, #572]	; (16bc <tc_init+0x258>)
    147e:	1c39      	adds	r1, r7, #0
    1480:	310c      	adds	r1, #12
    1482:	a805      	add	r0, sp, #20
    1484:	2203      	movs	r2, #3
    1486:	4e8e      	ldr	r6, [pc, #568]	; (16c0 <tc_init+0x25c>)
    1488:	47b0      	blx	r6
    148a:	1c39      	adds	r1, r7, #0
    148c:	3110      	adds	r1, #16
    148e:	a803      	add	r0, sp, #12
    1490:	2206      	movs	r2, #6
    1492:	47b0      	blx	r6
    1494:	2300      	movs	r3, #0
    1496:	60a3      	str	r3, [r4, #8]
    1498:	60e3      	str	r3, [r4, #12]
    149a:	6123      	str	r3, [r4, #16]
    149c:	6163      	str	r3, [r4, #20]
    149e:	7623      	strb	r3, [r4, #24]
    14a0:	7663      	strb	r3, [r4, #25]
    14a2:	4648      	mov	r0, r9
    14a4:	0082      	lsls	r2, r0, #2
    14a6:	4b87      	ldr	r3, [pc, #540]	; (16c4 <tc_init+0x260>)
    14a8:	50d4      	str	r4, [r2, r3]
    14aa:	6025      	str	r5, [r4, #0]
    14ac:	4641      	mov	r1, r8
    14ae:	788b      	ldrb	r3, [r1, #2]
    14b0:	2b08      	cmp	r3, #8
    14b2:	d104      	bne.n	14be <tc_init+0x5a>
    14b4:	2017      	movs	r0, #23
    14b6:	464a      	mov	r2, r9
    14b8:	07d2      	lsls	r2, r2, #31
    14ba:	d400      	bmi.n	14be <tc_init+0x5a>
    14bc:	e0f6      	b.n	16ac <tc_init+0x248>
    14be:	7123      	strb	r3, [r4, #4]
    14c0:	882b      	ldrh	r3, [r5, #0]
    14c2:	2005      	movs	r0, #5
    14c4:	07d9      	lsls	r1, r3, #31
    14c6:	d500      	bpl.n	14ca <tc_init+0x66>
    14c8:	e0f0      	b.n	16ac <tc_init+0x248>
    14ca:	7beb      	ldrb	r3, [r5, #15]
    14cc:	201c      	movs	r0, #28
    14ce:	06da      	lsls	r2, r3, #27
    14d0:	d500      	bpl.n	14d4 <tc_init+0x70>
    14d2:	e0eb      	b.n	16ac <tc_init+0x248>
    14d4:	882b      	ldrh	r3, [r5, #0]
    14d6:	0799      	lsls	r1, r3, #30
    14d8:	d500      	bpl.n	14dc <tc_init+0x78>
    14da:	e0e7      	b.n	16ac <tc_init+0x248>
    14dc:	4642      	mov	r2, r8
    14de:	7c13      	ldrb	r3, [r2, #16]
    14e0:	2b00      	cmp	r3, #0
    14e2:	d00c      	beq.n	14fe <tc_init+0x9a>
    14e4:	a902      	add	r1, sp, #8
    14e6:	2301      	movs	r3, #1
    14e8:	708b      	strb	r3, [r1, #2]
    14ea:	2200      	movs	r2, #0
    14ec:	70ca      	strb	r2, [r1, #3]
    14ee:	4640      	mov	r0, r8
    14f0:	6980      	ldr	r0, [r0, #24]
    14f2:	7008      	strb	r0, [r1, #0]
    14f4:	704b      	strb	r3, [r1, #1]
    14f6:	4642      	mov	r2, r8
    14f8:	7d10      	ldrb	r0, [r2, #20]
    14fa:	4b73      	ldr	r3, [pc, #460]	; (16c8 <tc_init+0x264>)
    14fc:	4798      	blx	r3
    14fe:	4640      	mov	r0, r8
    1500:	7f03      	ldrb	r3, [r0, #28]
    1502:	2b00      	cmp	r3, #0
    1504:	d00b      	beq.n	151e <tc_init+0xba>
    1506:	a902      	add	r1, sp, #8
    1508:	2301      	movs	r3, #1
    150a:	708b      	strb	r3, [r1, #2]
    150c:	2200      	movs	r2, #0
    150e:	70ca      	strb	r2, [r1, #3]
    1510:	6a42      	ldr	r2, [r0, #36]	; 0x24
    1512:	700a      	strb	r2, [r1, #0]
    1514:	704b      	strb	r3, [r1, #1]
    1516:	6a03      	ldr	r3, [r0, #32]
    1518:	b2d8      	uxtb	r0, r3
    151a:	4b6b      	ldr	r3, [pc, #428]	; (16c8 <tc_init+0x264>)
    151c:	4798      	blx	r3
    151e:	4b6b      	ldr	r3, [pc, #428]	; (16cc <tc_init+0x268>)
    1520:	6a19      	ldr	r1, [r3, #32]
    1522:	4648      	mov	r0, r9
    1524:	0042      	lsls	r2, r0, #1
    1526:	a803      	add	r0, sp, #12
    1528:	5a12      	ldrh	r2, [r2, r0]
    152a:	430a      	orrs	r2, r1
    152c:	621a      	str	r2, [r3, #32]
    152e:	4641      	mov	r1, r8
    1530:	788b      	ldrb	r3, [r1, #2]
    1532:	2b08      	cmp	r3, #8
    1534:	d108      	bne.n	1548 <tc_init+0xe4>
    1536:	4b65      	ldr	r3, [pc, #404]	; (16cc <tc_init+0x268>)
    1538:	6a1a      	ldr	r2, [r3, #32]
    153a:	4648      	mov	r0, r9
    153c:	3001      	adds	r0, #1
    153e:	0040      	lsls	r0, r0, #1
    1540:	a903      	add	r1, sp, #12
    1542:	5a41      	ldrh	r1, [r0, r1]
    1544:	430a      	orrs	r2, r1
    1546:	621a      	str	r2, [r3, #32]
    1548:	a901      	add	r1, sp, #4
    154a:	4642      	mov	r2, r8
    154c:	7813      	ldrb	r3, [r2, #0]
    154e:	700b      	strb	r3, [r1, #0]
    1550:	ab05      	add	r3, sp, #20
    1552:	4648      	mov	r0, r9
    1554:	5c1e      	ldrb	r6, [r3, r0]
    1556:	1c30      	adds	r0, r6, #0
    1558:	4b5d      	ldr	r3, [pc, #372]	; (16d0 <tc_init+0x26c>)
    155a:	4798      	blx	r3
    155c:	1c30      	adds	r0, r6, #0
    155e:	4b5d      	ldr	r3, [pc, #372]	; (16d4 <tc_init+0x270>)
    1560:	4798      	blx	r3
    1562:	4641      	mov	r1, r8
    1564:	8888      	ldrh	r0, [r1, #4]
    1566:	890b      	ldrh	r3, [r1, #8]
    1568:	4303      	orrs	r3, r0
    156a:	7988      	ldrb	r0, [r1, #6]
    156c:	788a      	ldrb	r2, [r1, #2]
    156e:	4310      	orrs	r0, r2
    1570:	4318      	orrs	r0, r3
    1572:	784b      	ldrb	r3, [r1, #1]
    1574:	2b00      	cmp	r3, #0
    1576:	d002      	beq.n	157e <tc_init+0x11a>
    1578:	2380      	movs	r3, #128	; 0x80
    157a:	011b      	lsls	r3, r3, #4
    157c:	4318      	orrs	r0, r3
    157e:	6821      	ldr	r1, [r4, #0]
    1580:	227f      	movs	r2, #127	; 0x7f
    1582:	7bcb      	ldrb	r3, [r1, #15]
    1584:	4393      	bics	r3, r2
    1586:	d1fc      	bne.n	1582 <tc_init+0x11e>
    1588:	8028      	strh	r0, [r5, #0]
    158a:	4642      	mov	r2, r8
    158c:	7b50      	ldrb	r0, [r2, #13]
    158e:	1e43      	subs	r3, r0, #1
    1590:	4198      	sbcs	r0, r3
    1592:	0080      	lsls	r0, r0, #2
    1594:	7b93      	ldrb	r3, [r2, #14]
    1596:	2b00      	cmp	r3, #0
    1598:	d001      	beq.n	159e <tc_init+0x13a>
    159a:	2301      	movs	r3, #1
    159c:	4318      	orrs	r0, r3
    159e:	6821      	ldr	r1, [r4, #0]
    15a0:	227f      	movs	r2, #127	; 0x7f
    15a2:	7bcb      	ldrb	r3, [r1, #15]
    15a4:	4393      	bics	r3, r2
    15a6:	d1fc      	bne.n	15a2 <tc_init+0x13e>
    15a8:	23ff      	movs	r3, #255	; 0xff
    15aa:	712b      	strb	r3, [r5, #4]
    15ac:	2800      	cmp	r0, #0
    15ae:	d005      	beq.n	15bc <tc_init+0x158>
    15b0:	6821      	ldr	r1, [r4, #0]
    15b2:	227f      	movs	r2, #127	; 0x7f
    15b4:	7bcb      	ldrb	r3, [r1, #15]
    15b6:	4393      	bics	r3, r2
    15b8:	d1fc      	bne.n	15b4 <tc_init+0x150>
    15ba:	7168      	strb	r0, [r5, #5]
    15bc:	4643      	mov	r3, r8
    15be:	7a98      	ldrb	r0, [r3, #10]
    15c0:	7adb      	ldrb	r3, [r3, #11]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d001      	beq.n	15ca <tc_init+0x166>
    15c6:	2310      	movs	r3, #16
    15c8:	4318      	orrs	r0, r3
    15ca:	4641      	mov	r1, r8
    15cc:	7b0b      	ldrb	r3, [r1, #12]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d001      	beq.n	15d6 <tc_init+0x172>
    15d2:	2320      	movs	r3, #32
    15d4:	4318      	orrs	r0, r3
    15d6:	6821      	ldr	r1, [r4, #0]
    15d8:	227f      	movs	r2, #127	; 0x7f
    15da:	7bcb      	ldrb	r3, [r1, #15]
    15dc:	4393      	bics	r3, r2
    15de:	d1fc      	bne.n	15da <tc_init+0x176>
    15e0:	71a8      	strb	r0, [r5, #6]
    15e2:	6822      	ldr	r2, [r4, #0]
    15e4:	217f      	movs	r1, #127	; 0x7f
    15e6:	7bd3      	ldrb	r3, [r2, #15]
    15e8:	438b      	bics	r3, r1
    15ea:	d1fc      	bne.n	15e6 <tc_init+0x182>
    15ec:	7923      	ldrb	r3, [r4, #4]
    15ee:	2b04      	cmp	r3, #4
    15f0:	d005      	beq.n	15fe <tc_init+0x19a>
    15f2:	2b08      	cmp	r3, #8
    15f4:	d041      	beq.n	167a <tc_init+0x216>
    15f6:	2017      	movs	r0, #23
    15f8:	2b00      	cmp	r3, #0
    15fa:	d157      	bne.n	16ac <tc_init+0x248>
    15fc:	e024      	b.n	1648 <tc_init+0x1e4>
    15fe:	217f      	movs	r1, #127	; 0x7f
    1600:	7bd3      	ldrb	r3, [r2, #15]
    1602:	438b      	bics	r3, r1
    1604:	d1fc      	bne.n	1600 <tc_init+0x19c>
    1606:	2328      	movs	r3, #40	; 0x28
    1608:	4642      	mov	r2, r8
    160a:	5cd3      	ldrb	r3, [r2, r3]
    160c:	742b      	strb	r3, [r5, #16]
    160e:	6821      	ldr	r1, [r4, #0]
    1610:	227f      	movs	r2, #127	; 0x7f
    1612:	7bcb      	ldrb	r3, [r1, #15]
    1614:	4393      	bics	r3, r2
    1616:	d1fc      	bne.n	1612 <tc_init+0x1ae>
    1618:	2329      	movs	r3, #41	; 0x29
    161a:	4640      	mov	r0, r8
    161c:	5cc3      	ldrb	r3, [r0, r3]
    161e:	752b      	strb	r3, [r5, #20]
    1620:	6821      	ldr	r1, [r4, #0]
    1622:	227f      	movs	r2, #127	; 0x7f
    1624:	7bcb      	ldrb	r3, [r1, #15]
    1626:	4393      	bics	r3, r2
    1628:	d1fc      	bne.n	1624 <tc_init+0x1c0>
    162a:	232a      	movs	r3, #42	; 0x2a
    162c:	4641      	mov	r1, r8
    162e:	5ccb      	ldrb	r3, [r1, r3]
    1630:	762b      	strb	r3, [r5, #24]
    1632:	6821      	ldr	r1, [r4, #0]
    1634:	227f      	movs	r2, #127	; 0x7f
    1636:	7bcb      	ldrb	r3, [r1, #15]
    1638:	4393      	bics	r3, r2
    163a:	d1fc      	bne.n	1636 <tc_init+0x1d2>
    163c:	232b      	movs	r3, #43	; 0x2b
    163e:	4642      	mov	r2, r8
    1640:	5cd3      	ldrb	r3, [r2, r3]
    1642:	766b      	strb	r3, [r5, #25]
    1644:	2000      	movs	r0, #0
    1646:	e031      	b.n	16ac <tc_init+0x248>
    1648:	217f      	movs	r1, #127	; 0x7f
    164a:	7bd3      	ldrb	r3, [r2, #15]
    164c:	438b      	bics	r3, r1
    164e:	d1fc      	bne.n	164a <tc_init+0x1e6>
    1650:	4640      	mov	r0, r8
    1652:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    1654:	822b      	strh	r3, [r5, #16]
    1656:	6821      	ldr	r1, [r4, #0]
    1658:	227f      	movs	r2, #127	; 0x7f
    165a:	7bcb      	ldrb	r3, [r1, #15]
    165c:	4393      	bics	r3, r2
    165e:	d1fc      	bne.n	165a <tc_init+0x1f6>
    1660:	4641      	mov	r1, r8
    1662:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
    1664:	832b      	strh	r3, [r5, #24]
    1666:	6821      	ldr	r1, [r4, #0]
    1668:	227f      	movs	r2, #127	; 0x7f
    166a:	7bcb      	ldrb	r3, [r1, #15]
    166c:	4393      	bics	r3, r2
    166e:	d1fc      	bne.n	166a <tc_init+0x206>
    1670:	4642      	mov	r2, r8
    1672:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
    1674:	836b      	strh	r3, [r5, #26]
    1676:	2000      	movs	r0, #0
    1678:	e018      	b.n	16ac <tc_init+0x248>
    167a:	217f      	movs	r1, #127	; 0x7f
    167c:	7bd3      	ldrb	r3, [r2, #15]
    167e:	438b      	bics	r3, r1
    1680:	d1fc      	bne.n	167c <tc_init+0x218>
    1682:	4643      	mov	r3, r8
    1684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1686:	612b      	str	r3, [r5, #16]
    1688:	6821      	ldr	r1, [r4, #0]
    168a:	227f      	movs	r2, #127	; 0x7f
    168c:	7bcb      	ldrb	r3, [r1, #15]
    168e:	4393      	bics	r3, r2
    1690:	d1fc      	bne.n	168c <tc_init+0x228>
    1692:	4640      	mov	r0, r8
    1694:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1696:	61a8      	str	r0, [r5, #24]
    1698:	6821      	ldr	r1, [r4, #0]
    169a:	227f      	movs	r2, #127	; 0x7f
    169c:	7bcb      	ldrb	r3, [r1, #15]
    169e:	4393      	bics	r3, r2
    16a0:	d1fc      	bne.n	169c <tc_init+0x238>
    16a2:	4641      	mov	r1, r8
    16a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    16a6:	61eb      	str	r3, [r5, #28]
    16a8:	2000      	movs	r0, #0
    16aa:	e7ff      	b.n	16ac <tc_init+0x248>
    16ac:	b007      	add	sp, #28
    16ae:	bc0c      	pop	{r2, r3}
    16b0:	4690      	mov	r8, r2
    16b2:	4699      	mov	r9, r3
    16b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	0000142d 	.word	0x0000142d
    16bc:	00004240 	.word	0x00004240
    16c0:	00004061 	.word	0x00004061
    16c4:	20000774 	.word	0x20000774
    16c8:	00001319 	.word	0x00001319
    16cc:	40000400 	.word	0x40000400
    16d0:	0000123d 	.word	0x0000123d
    16d4:	000011b1 	.word	0x000011b1

000016d8 <tc_get_count_value>:
    16d8:	6802      	ldr	r2, [r0, #0]
    16da:	217f      	movs	r1, #127	; 0x7f
    16dc:	7bd3      	ldrb	r3, [r2, #15]
    16de:	438b      	bics	r3, r1
    16e0:	d1fc      	bne.n	16dc <tc_get_count_value+0x4>
    16e2:	7903      	ldrb	r3, [r0, #4]
    16e4:	2b04      	cmp	r3, #4
    16e6:	d005      	beq.n	16f4 <tc_get_count_value+0x1c>
    16e8:	2b08      	cmp	r3, #8
    16ea:	d009      	beq.n	1700 <tc_get_count_value+0x28>
    16ec:	2000      	movs	r0, #0
    16ee:	2b00      	cmp	r3, #0
    16f0:	d108      	bne.n	1704 <tc_get_count_value+0x2c>
    16f2:	e002      	b.n	16fa <tc_get_count_value+0x22>
    16f4:	7c10      	ldrb	r0, [r2, #16]
    16f6:	b2c0      	uxtb	r0, r0
    16f8:	e004      	b.n	1704 <tc_get_count_value+0x2c>
    16fa:	8a10      	ldrh	r0, [r2, #16]
    16fc:	b280      	uxth	r0, r0
    16fe:	e001      	b.n	1704 <tc_get_count_value+0x2c>
    1700:	6910      	ldr	r0, [r2, #16]
    1702:	e7ff      	b.n	1704 <tc_get_count_value+0x2c>
    1704:	4770      	bx	lr
    1706:	46c0      	nop			; (mov r8, r8)

00001708 <tc_set_compare_value>:
    1708:	b530      	push	{r4, r5, lr}
    170a:	6804      	ldr	r4, [r0, #0]
    170c:	257f      	movs	r5, #127	; 0x7f
    170e:	7be3      	ldrb	r3, [r4, #15]
    1710:	43ab      	bics	r3, r5
    1712:	d1fc      	bne.n	170e <tc_set_compare_value+0x6>
    1714:	7903      	ldrb	r3, [r0, #4]
    1716:	2b04      	cmp	r3, #4
    1718:	d005      	beq.n	1726 <tc_set_compare_value+0x1e>
    171a:	2b08      	cmp	r3, #8
    171c:	d014      	beq.n	1748 <tc_set_compare_value+0x40>
    171e:	2017      	movs	r0, #23
    1720:	2b00      	cmp	r3, #0
    1722:	d119      	bne.n	1758 <tc_set_compare_value+0x50>
    1724:	e007      	b.n	1736 <tc_set_compare_value+0x2e>
    1726:	2017      	movs	r0, #23
    1728:	2901      	cmp	r1, #1
    172a:	d815      	bhi.n	1758 <tc_set_compare_value+0x50>
    172c:	b2d2      	uxtb	r2, r2
    172e:	1861      	adds	r1, r4, r1
    1730:	760a      	strb	r2, [r1, #24]
    1732:	2000      	movs	r0, #0
    1734:	e010      	b.n	1758 <tc_set_compare_value+0x50>
    1736:	2017      	movs	r0, #23
    1738:	2901      	cmp	r1, #1
    173a:	d80d      	bhi.n	1758 <tc_set_compare_value+0x50>
    173c:	b292      	uxth	r2, r2
    173e:	310c      	adds	r1, #12
    1740:	0049      	lsls	r1, r1, #1
    1742:	530a      	strh	r2, [r1, r4]
    1744:	2000      	movs	r0, #0
    1746:	e007      	b.n	1758 <tc_set_compare_value+0x50>
    1748:	2017      	movs	r0, #23
    174a:	2901      	cmp	r1, #1
    174c:	d804      	bhi.n	1758 <tc_set_compare_value+0x50>
    174e:	3106      	adds	r1, #6
    1750:	0089      	lsls	r1, r1, #2
    1752:	510a      	str	r2, [r1, r4]
    1754:	2000      	movs	r0, #0
    1756:	e7ff      	b.n	1758 <tc_set_compare_value+0x50>
    1758:	bd30      	pop	{r4, r5, pc}
    175a:	46c0      	nop			; (mov r8, r8)

0000175c <Dummy_Handler>:
    175c:	e7fe      	b.n	175c <Dummy_Handler>
    175e:	46c0      	nop			; (mov r8, r8)

00001760 <Reset_Handler>:
    1760:	b510      	push	{r4, lr}
    1762:	4b1c      	ldr	r3, [pc, #112]	; (17d4 <Reset_Handler+0x74>)
    1764:	4a1c      	ldr	r2, [pc, #112]	; (17d8 <Reset_Handler+0x78>)
    1766:	429a      	cmp	r2, r3
    1768:	d003      	beq.n	1772 <Reset_Handler+0x12>
    176a:	4b1c      	ldr	r3, [pc, #112]	; (17dc <Reset_Handler+0x7c>)
    176c:	4a19      	ldr	r2, [pc, #100]	; (17d4 <Reset_Handler+0x74>)
    176e:	429a      	cmp	r2, r3
    1770:	d304      	bcc.n	177c <Reset_Handler+0x1c>
    1772:	4b1b      	ldr	r3, [pc, #108]	; (17e0 <Reset_Handler+0x80>)
    1774:	4a1b      	ldr	r2, [pc, #108]	; (17e4 <Reset_Handler+0x84>)
    1776:	429a      	cmp	r2, r3
    1778:	d310      	bcc.n	179c <Reset_Handler+0x3c>
    177a:	e01b      	b.n	17b4 <Reset_Handler+0x54>
    177c:	4b1a      	ldr	r3, [pc, #104]	; (17e8 <Reset_Handler+0x88>)
    177e:	4817      	ldr	r0, [pc, #92]	; (17dc <Reset_Handler+0x7c>)
    1780:	3003      	adds	r0, #3
    1782:	1ac0      	subs	r0, r0, r3
    1784:	0880      	lsrs	r0, r0, #2
    1786:	3001      	adds	r0, #1
    1788:	0080      	lsls	r0, r0, #2
    178a:	2300      	movs	r3, #0
    178c:	4911      	ldr	r1, [pc, #68]	; (17d4 <Reset_Handler+0x74>)
    178e:	4a12      	ldr	r2, [pc, #72]	; (17d8 <Reset_Handler+0x78>)
    1790:	58d4      	ldr	r4, [r2, r3]
    1792:	50cc      	str	r4, [r1, r3]
    1794:	3304      	adds	r3, #4
    1796:	4283      	cmp	r3, r0
    1798:	d1fa      	bne.n	1790 <Reset_Handler+0x30>
    179a:	e7ea      	b.n	1772 <Reset_Handler+0x12>
    179c:	4b11      	ldr	r3, [pc, #68]	; (17e4 <Reset_Handler+0x84>)
    179e:	1d1a      	adds	r2, r3, #4
    17a0:	490f      	ldr	r1, [pc, #60]	; (17e0 <Reset_Handler+0x80>)
    17a2:	3103      	adds	r1, #3
    17a4:	1a89      	subs	r1, r1, r2
    17a6:	0889      	lsrs	r1, r1, #2
    17a8:	0089      	lsls	r1, r1, #2
    17aa:	1852      	adds	r2, r2, r1
    17ac:	2100      	movs	r1, #0
    17ae:	c302      	stmia	r3!, {r1}
    17b0:	4293      	cmp	r3, r2
    17b2:	d1fc      	bne.n	17ae <Reset_Handler+0x4e>
    17b4:	4b0d      	ldr	r3, [pc, #52]	; (17ec <Reset_Handler+0x8c>)
    17b6:	217f      	movs	r1, #127	; 0x7f
    17b8:	4a0d      	ldr	r2, [pc, #52]	; (17f0 <Reset_Handler+0x90>)
    17ba:	438a      	bics	r2, r1
    17bc:	609a      	str	r2, [r3, #8]
    17be:	4b0d      	ldr	r3, [pc, #52]	; (17f4 <Reset_Handler+0x94>)
    17c0:	6859      	ldr	r1, [r3, #4]
    17c2:	2280      	movs	r2, #128	; 0x80
    17c4:	430a      	orrs	r2, r1
    17c6:	605a      	str	r2, [r3, #4]
    17c8:	4b0b      	ldr	r3, [pc, #44]	; (17f8 <Reset_Handler+0x98>)
    17ca:	4798      	blx	r3
    17cc:	4b0b      	ldr	r3, [pc, #44]	; (17fc <Reset_Handler+0x9c>)
    17ce:	4798      	blx	r3
    17d0:	e7fe      	b.n	17d0 <Reset_Handler+0x70>
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	20000000 	.word	0x20000000
    17d8:	00004328 	.word	0x00004328
    17dc:	20000070 	.word	0x20000070
    17e0:	20000888 	.word	0x20000888
    17e4:	20000070 	.word	0x20000070
    17e8:	20000004 	.word	0x20000004
    17ec:	e000ed00 	.word	0xe000ed00
    17f0:	00000000 	.word	0x00000000
    17f4:	41004000 	.word	0x41004000
    17f8:	00004015 	.word	0x00004015
    17fc:	00003d99 	.word	0x00003d99

00001800 <_sbrk>:
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <_sbrk+0x1c>)
    1802:	681b      	ldr	r3, [r3, #0]
    1804:	2b00      	cmp	r3, #0
    1806:	d102      	bne.n	180e <_sbrk+0xe>
    1808:	4a05      	ldr	r2, [pc, #20]	; (1820 <_sbrk+0x20>)
    180a:	4b04      	ldr	r3, [pc, #16]	; (181c <_sbrk+0x1c>)
    180c:	601a      	str	r2, [r3, #0]
    180e:	4a03      	ldr	r2, [pc, #12]	; (181c <_sbrk+0x1c>)
    1810:	6813      	ldr	r3, [r2, #0]
    1812:	1818      	adds	r0, r3, r0
    1814:	6010      	str	r0, [r2, #0]
    1816:	1c18      	adds	r0, r3, #0
    1818:	4770      	bx	lr
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	200000c8 	.word	0x200000c8
    1820:	20002888 	.word	0x20002888

00001824 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    1824:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    1826:	490d      	ldr	r1, [pc, #52]	; (185c <NWK_Init+0x38>)
    1828:	2300      	movs	r3, #0
    182a:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    182c:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    182e:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    1830:	2258      	movs	r2, #88	; 0x58
    1832:	528b      	strh	r3, [r1, r2]
    1834:	1c0b      	adds	r3, r1, #0
    1836:	3308      	adds	r3, #8
    1838:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    183a:	2200      	movs	r2, #0
    183c:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    183e:	428b      	cmp	r3, r1
    1840:	d1fc      	bne.n	183c <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    1842:	4b07      	ldr	r3, [pc, #28]	; (1860 <NWK_Init+0x3c>)
    1844:	4798      	blx	r3
	nwkRxInit();
    1846:	4b07      	ldr	r3, [pc, #28]	; (1864 <NWK_Init+0x40>)
    1848:	4798      	blx	r3
	nwkFrameInit();
    184a:	4b07      	ldr	r3, [pc, #28]	; (1868 <NWK_Init+0x44>)
    184c:	4798      	blx	r3
	nwkDataReqInit();
    184e:	4b07      	ldr	r3, [pc, #28]	; (186c <NWK_Init+0x48>)
    1850:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    1852:	4b07      	ldr	r3, [pc, #28]	; (1870 <NWK_Init+0x4c>)
    1854:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    1856:	4b07      	ldr	r3, [pc, #28]	; (1874 <NWK_Init+0x50>)
    1858:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    185a:	bd08      	pop	{r3, pc}
    185c:	20000780 	.word	0x20000780
    1860:	000026cd 	.word	0x000026cd
    1864:	00001f39 	.word	0x00001f39
    1868:	00001a65 	.word	0x00001a65
    186c:	00001915 	.word	0x00001915
    1870:	00001b59 	.word	0x00001b59
    1874:	00002399 	.word	0x00002399

00001878 <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    1878:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    187a:	4b02      	ldr	r3, [pc, #8]	; (1884 <NWK_SetAddr+0xc>)
    187c:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    187e:	4b02      	ldr	r3, [pc, #8]	; (1888 <NWK_SetAddr+0x10>)
    1880:	4798      	blx	r3
}
    1882:	bd08      	pop	{r3, pc}
    1884:	20000780 	.word	0x20000780
    1888:	00002af5 	.word	0x00002af5

0000188c <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    188c:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    188e:	4b02      	ldr	r3, [pc, #8]	; (1898 <NWK_SetPanId+0xc>)
    1890:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    1892:	4b02      	ldr	r3, [pc, #8]	; (189c <NWK_SetPanId+0x10>)
    1894:	4798      	blx	r3
}
    1896:	bd08      	pop	{r3, pc}
    1898:	20000780 	.word	0x20000780
    189c:	00002ad5 	.word	0x00002ad5

000018a0 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    18a0:	3002      	adds	r0, #2
    18a2:	0080      	lsls	r0, r0, #2
    18a4:	4b01      	ldr	r3, [pc, #4]	; (18ac <NWK_OpenEndpoint+0xc>)
    18a6:	50c1      	str	r1, [r0, r3]
}
    18a8:	4770      	bx	lr
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	20000780 	.word	0x20000780

000018b0 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    18b0:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    18b2:	4b04      	ldr	r3, [pc, #16]	; (18c4 <NWK_TaskHandler+0x14>)
    18b4:	4798      	blx	r3
	nwkTxTaskHandler();
    18b6:	4b04      	ldr	r3, [pc, #16]	; (18c8 <NWK_TaskHandler+0x18>)
    18b8:	4798      	blx	r3
	nwkDataReqTaskHandler();
    18ba:	4b04      	ldr	r3, [pc, #16]	; (18cc <NWK_TaskHandler+0x1c>)
    18bc:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    18be:	4b04      	ldr	r3, [pc, #16]	; (18d0 <NWK_TaskHandler+0x20>)
    18c0:	4798      	blx	r3
#endif
}
    18c2:	bd08      	pop	{r3, pc}
    18c4:	00001fd5 	.word	0x00001fd5
    18c8:	000028d1 	.word	0x000028d1
    18cc:	00001921 	.word	0x00001921
    18d0:	0000248d 	.word	0x0000248d

000018d4 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    18d4:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    18d6:	4b0d      	ldr	r3, [pc, #52]	; (190c <nwkDataReqTxConf+0x38>)
    18d8:	681b      	ldr	r3, [r3, #0]
    18da:	2b00      	cmp	r3, #0
    18dc:	d012      	beq.n	1904 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    18de:	685a      	ldr	r2, [r3, #4]
    18e0:	4282      	cmp	r2, r0
    18e2:	d10c      	bne.n	18fe <nwkDataReqTxConf+0x2a>
    18e4:	e002      	b.n	18ec <nwkDataReqTxConf+0x18>
    18e6:	685a      	ldr	r2, [r3, #4]
    18e8:	4282      	cmp	r2, r0
    18ea:	d108      	bne.n	18fe <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    18ec:	2285      	movs	r2, #133	; 0x85
    18ee:	5c82      	ldrb	r2, [r0, r2]
    18f0:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    18f2:	2288      	movs	r2, #136	; 0x88
    18f4:	5c82      	ldrb	r2, [r0, r2]
    18f6:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    18f8:	2202      	movs	r2, #2
    18fa:	721a      	strb	r2, [r3, #8]
			break;
    18fc:	e002      	b.n	1904 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	2b00      	cmp	r3, #0
    1902:	d1f0      	bne.n	18e6 <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    1904:	4b02      	ldr	r3, [pc, #8]	; (1910 <nwkDataReqTxConf+0x3c>)
    1906:	4798      	blx	r3
}
    1908:	bd08      	pop	{r3, pc}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	200000cc 	.word	0x200000cc
    1910:	00001ae9 	.word	0x00001ae9

00001914 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    1914:	2200      	movs	r2, #0
    1916:	4b01      	ldr	r3, [pc, #4]	; (191c <nwkDataReqInit+0x8>)
    1918:	601a      	str	r2, [r3, #0]
}
    191a:	4770      	bx	lr
    191c:	200000cc 	.word	0x200000cc

00001920 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    1920:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1922:	4b4a      	ldr	r3, [pc, #296]	; (1a4c <nwkDataReqTaskHandler+0x12c>)
    1924:	681a      	ldr	r2, [r3, #0]
    1926:	2a00      	cmp	r2, #0
    1928:	d100      	bne.n	192c <nwkDataReqTaskHandler+0xc>
    192a:	e08d      	b.n	1a48 <nwkDataReqTaskHandler+0x128>
    192c:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    192e:	7a23      	ldrb	r3, [r4, #8]
    1930:	2b00      	cmp	r3, #0
    1932:	d002      	beq.n	193a <nwkDataReqTaskHandler+0x1a>
    1934:	2b02      	cmp	r3, #2
    1936:	d06d      	beq.n	1a14 <nwkDataReqTaskHandler+0xf4>
    1938:	e082      	b.n	1a40 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    193a:	4b45      	ldr	r3, [pc, #276]	; (1a50 <nwkDataReqTaskHandler+0x130>)
    193c:	4798      	blx	r3
    193e:	1e05      	subs	r5, r0, #0
    1940:	d103      	bne.n	194a <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1942:	2302      	movs	r3, #2
    1944:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    1946:	7723      	strb	r3, [r4, #28]
    1948:	e07e      	b.n	1a48 <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    194a:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    194c:	2201      	movs	r2, #1
    194e:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    1950:	4b40      	ldr	r3, [pc, #256]	; (1a54 <nwkDataReqTaskHandler+0x134>)
    1952:	2189      	movs	r1, #137	; 0x89
    1954:	5443      	strb	r3, [r0, r1]
    1956:	0a18      	lsrs	r0, r3, #8
    1958:	218a      	movs	r1, #138	; 0x8a
    195a:	5468      	strb	r0, [r5, r1]
    195c:	0c18      	lsrs	r0, r3, #16
    195e:	218b      	movs	r1, #139	; 0x8b
    1960:	5468      	strb	r0, [r5, r1]
    1962:	0e1b      	lsrs	r3, r3, #24
    1964:	218c      	movs	r1, #140	; 0x8c
    1966:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    1968:	7ba0      	ldrb	r0, [r4, #14]
    196a:	0880      	lsrs	r0, r0, #2
    196c:	2301      	movs	r3, #1
    196e:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    1970:	2188      	movs	r1, #136	; 0x88
    1972:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    1974:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    1976:	4019      	ands	r1, r3
    1978:	7ae8      	ldrb	r0, [r5, #11]
    197a:	4390      	bics	r0, r2
    197c:	1c02      	adds	r2, r0, #0
    197e:	430a      	orrs	r2, r1
    1980:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    1982:	7ba1      	ldrb	r1, [r4, #14]
    1984:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    1986:	4019      	ands	r1, r3
    1988:	0089      	lsls	r1, r1, #2
    198a:	b2d2      	uxtb	r2, r2
    198c:	2004      	movs	r0, #4
    198e:	4382      	bics	r2, r0
    1990:	430a      	orrs	r2, r1
    1992:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    1994:	7ba2      	ldrb	r2, [r4, #14]
    1996:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    1998:	4013      	ands	r3, r2
    199a:	005a      	lsls	r2, r3, #1
    199c:	7aeb      	ldrb	r3, [r5, #11]
    199e:	2102      	movs	r1, #2
    19a0:	438b      	bics	r3, r1
    19a2:	4313      	orrs	r3, r2
    19a4:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    19a6:	4b2c      	ldr	r3, [pc, #176]	; (1a58 <nwkDataReqTaskHandler+0x138>)
    19a8:	791a      	ldrb	r2, [r3, #4]
    19aa:	3201      	adds	r2, #1
    19ac:	b2d2      	uxtb	r2, r2
    19ae:	711a      	strb	r2, [r3, #4]
    19b0:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    19b2:	781a      	ldrb	r2, [r3, #0]
    19b4:	736a      	strb	r2, [r5, #13]
    19b6:	785b      	ldrb	r3, [r3, #1]
    19b8:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    19ba:	8963      	ldrh	r3, [r4, #10]
    19bc:	7aa2      	ldrb	r2, [r4, #10]
    19be:	73ea      	strb	r2, [r5, #15]
    19c0:	0a1b      	lsrs	r3, r3, #8
    19c2:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    19c4:	7b61      	ldrb	r1, [r4, #13]
    19c6:	230f      	movs	r3, #15
    19c8:	4019      	ands	r1, r3
    19ca:	7c6a      	ldrb	r2, [r5, #17]
    19cc:	200f      	movs	r0, #15
    19ce:	4382      	bics	r2, r0
    19d0:	430a      	orrs	r2, r1
    19d2:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    19d4:	7b22      	ldrb	r2, [r4, #12]
    19d6:	0112      	lsls	r2, r2, #4
    19d8:	7c69      	ldrb	r1, [r5, #17]
    19da:	400b      	ands	r3, r1
    19dc:	4313      	orrs	r3, r2
    19de:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    19e0:	2381      	movs	r3, #129	; 0x81
    19e2:	5ceb      	ldrb	r3, [r5, r3]
    19e4:	2282      	movs	r2, #130	; 0x82
    19e6:	5ca8      	ldrb	r0, [r5, r2]
    19e8:	0200      	lsls	r0, r0, #8
    19ea:	4318      	orrs	r0, r3
    19ec:	2383      	movs	r3, #131	; 0x83
    19ee:	5ceb      	ldrb	r3, [r5, r3]
    19f0:	041b      	lsls	r3, r3, #16
    19f2:	4318      	orrs	r0, r3
    19f4:	2384      	movs	r3, #132	; 0x84
    19f6:	5ceb      	ldrb	r3, [r5, r3]
    19f8:	061b      	lsls	r3, r3, #24
    19fa:	4318      	orrs	r0, r3
    19fc:	7d22      	ldrb	r2, [r4, #20]
    19fe:	6921      	ldr	r1, [r4, #16]
    1a00:	4b16      	ldr	r3, [pc, #88]	; (1a5c <nwkDataReqTaskHandler+0x13c>)
    1a02:	4798      	blx	r3
	frame->size += req->size;
    1a04:	7d22      	ldrb	r2, [r4, #20]
    1a06:	786b      	ldrb	r3, [r5, #1]
    1a08:	18d3      	adds	r3, r2, r3
    1a0a:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    1a0c:	1c28      	adds	r0, r5, #0
    1a0e:	4b14      	ldr	r3, [pc, #80]	; (1a60 <nwkDataReqTaskHandler+0x140>)
    1a10:	4798      	blx	r3
    1a12:	e019      	b.n	1a48 <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    1a14:	4294      	cmp	r4, r2
    1a16:	d103      	bne.n	1a20 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    1a18:	4b0c      	ldr	r3, [pc, #48]	; (1a4c <nwkDataReqTaskHandler+0x12c>)
    1a1a:	6822      	ldr	r2, [r4, #0]
    1a1c:	601a      	str	r2, [r3, #0]
    1a1e:	e006      	b.n	1a2e <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    1a20:	6813      	ldr	r3, [r2, #0]
    1a22:	429c      	cmp	r4, r3
    1a24:	d001      	beq.n	1a2a <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    1a26:	1c1a      	adds	r2, r3, #0
    1a28:	e7fa      	b.n	1a20 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    1a2a:	6823      	ldr	r3, [r4, #0]
    1a2c:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    1a2e:	4a0a      	ldr	r2, [pc, #40]	; (1a58 <nwkDataReqTaskHandler+0x138>)
    1a30:	2358      	movs	r3, #88	; 0x58
    1a32:	5ad1      	ldrh	r1, [r2, r3]
    1a34:	3901      	subs	r1, #1
    1a36:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    1a38:	69a3      	ldr	r3, [r4, #24]
    1a3a:	1c20      	adds	r0, r4, #0
    1a3c:	4798      	blx	r3
    1a3e:	e003      	b.n	1a48 <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1a40:	6824      	ldr	r4, [r4, #0]
    1a42:	2c00      	cmp	r4, #0
    1a44:	d000      	beq.n	1a48 <nwkDataReqTaskHandler+0x128>
    1a46:	e772      	b.n	192e <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    1a48:	bd38      	pop	{r3, r4, r5, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	200000cc 	.word	0x200000cc
    1a50:	00001a79 	.word	0x00001a79
    1a54:	000018d5 	.word	0x000018d5
    1a58:	20000780 	.word	0x20000780
    1a5c:	00004061 	.word	0x00004061
    1a60:	00002701 	.word	0x00002701

00001a64 <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1a64:	4b03      	ldr	r3, [pc, #12]	; (1a74 <nwkFrameInit+0x10>)
    1a66:	2200      	movs	r2, #0
    1a68:	701a      	strb	r2, [r3, #0]
    1a6a:	218d      	movs	r1, #141	; 0x8d
    1a6c:	545a      	strb	r2, [r3, r1]
    1a6e:	0049      	lsls	r1, r1, #1
    1a70:	545a      	strb	r2, [r3, r1]
	}
}
    1a72:	4770      	bx	lr
    1a74:	200000d0 	.word	0x200000d0

00001a78 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    1a78:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    1a7a:	4b18      	ldr	r3, [pc, #96]	; (1adc <nwkFrameAlloc+0x64>)
    1a7c:	781b      	ldrb	r3, [r3, #0]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d00e      	beq.n	1aa0 <nwkFrameAlloc+0x28>
    1a82:	238d      	movs	r3, #141	; 0x8d
    1a84:	4a15      	ldr	r2, [pc, #84]	; (1adc <nwkFrameAlloc+0x64>)
    1a86:	5cd3      	ldrb	r3, [r2, r3]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d007      	beq.n	1a9c <nwkFrameAlloc+0x24>
    1a8c:	238d      	movs	r3, #141	; 0x8d
    1a8e:	005b      	lsls	r3, r3, #1
    1a90:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    1a92:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    1a94:	2b00      	cmp	r3, #0
    1a96:	d11f      	bne.n	1ad8 <nwkFrameAlloc+0x60>
    1a98:	2302      	movs	r3, #2
    1a9a:	e002      	b.n	1aa2 <nwkFrameAlloc+0x2a>
    1a9c:	2301      	movs	r3, #1
    1a9e:	e000      	b.n	1aa2 <nwkFrameAlloc+0x2a>
    1aa0:	2300      	movs	r3, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1aa2:	4e0e      	ldr	r6, [pc, #56]	; (1adc <nwkFrameAlloc+0x64>)
    1aa4:	258d      	movs	r5, #141	; 0x8d
    1aa6:	435d      	muls	r5, r3
    1aa8:	1974      	adds	r4, r6, r5
    1aaa:	1c20      	adds	r0, r4, #0
    1aac:	2100      	movs	r1, #0
    1aae:	228d      	movs	r2, #141	; 0x8d
    1ab0:	4b0b      	ldr	r3, [pc, #44]	; (1ae0 <nwkFrameAlloc+0x68>)
    1ab2:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1ab4:	2310      	movs	r3, #16
    1ab6:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    1ab8:	1c23      	adds	r3, r4, #0
    1aba:	3380      	adds	r3, #128	; 0x80
    1abc:	1c22      	adds	r2, r4, #0
    1abe:	3212      	adds	r2, #18
    1ac0:	705a      	strb	r2, [r3, #1]
    1ac2:	0a11      	lsrs	r1, r2, #8
    1ac4:	7099      	strb	r1, [r3, #2]
    1ac6:	0c11      	lsrs	r1, r2, #16
    1ac8:	70d9      	strb	r1, [r3, #3]
    1aca:	0e12      	lsrs	r2, r2, #24
    1acc:	711a      	strb	r2, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    1ace:	4a05      	ldr	r2, [pc, #20]	; (1ae4 <nwkFrameAlloc+0x6c>)
    1ad0:	2358      	movs	r3, #88	; 0x58
    1ad2:	5ad1      	ldrh	r1, [r2, r3]
    1ad4:	3101      	adds	r1, #1
    1ad6:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    1ad8:	1c20      	adds	r0, r4, #0
    1ada:	bd70      	pop	{r4, r5, r6, pc}
    1adc:	200000d0 	.word	0x200000d0
    1ae0:	00004073 	.word	0x00004073
    1ae4:	20000780 	.word	0x20000780

00001ae8 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    1ae8:	2300      	movs	r3, #0
    1aea:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    1aec:	4a02      	ldr	r2, [pc, #8]	; (1af8 <nwkFrameFree+0x10>)
    1aee:	2358      	movs	r3, #88	; 0x58
    1af0:	5ad1      	ldrh	r1, [r2, r3]
    1af2:	3901      	subs	r1, #1
    1af4:	52d1      	strh	r1, [r2, r3]
}
    1af6:	4770      	bx	lr
    1af8:	20000780 	.word	0x20000780

00001afc <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    1afc:	2800      	cmp	r0, #0
    1afe:	d006      	beq.n	1b0e <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    1b00:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1b02:	4b0c      	ldr	r3, [pc, #48]	; (1b34 <nwkFrameNext+0x38>)
    1b04:	33a8      	adds	r3, #168	; 0xa8
    1b06:	33ff      	adds	r3, #255	; 0xff
    1b08:	4298      	cmp	r0, r3
    1b0a:	d301      	bcc.n	1b10 <nwkFrameNext+0x14>
    1b0c:	e00f      	b.n	1b2e <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    1b0e:	4809      	ldr	r0, [pc, #36]	; (1b34 <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1b10:	7803      	ldrb	r3, [r0, #0]
    1b12:	2b00      	cmp	r3, #0
    1b14:	d10c      	bne.n	1b30 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1b16:	4a07      	ldr	r2, [pc, #28]	; (1b34 <nwkFrameNext+0x38>)
    1b18:	32a8      	adds	r2, #168	; 0xa8
    1b1a:	32ff      	adds	r2, #255	; 0xff
    1b1c:	e002      	b.n	1b24 <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1b1e:	7803      	ldrb	r3, [r0, #0]
    1b20:	2b00      	cmp	r3, #0
    1b22:	d105      	bne.n	1b30 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1b24:	308d      	adds	r0, #141	; 0x8d
    1b26:	4290      	cmp	r0, r2
    1b28:	d3f9      	bcc.n	1b1e <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    1b2a:	2000      	movs	r0, #0
    1b2c:	e000      	b.n	1b30 <nwkFrameNext+0x34>
    1b2e:	2000      	movs	r0, #0
}
    1b30:	4770      	bx	lr
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	200000d0 	.word	0x200000d0

00001b38 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    1b38:	2200      	movs	r2, #0
    1b3a:	2385      	movs	r3, #133	; 0x85
    1b3c:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1b3e:	4b05      	ldr	r3, [pc, #20]	; (1b54 <nwkFrameCommandInit+0x1c>)
    1b40:	791a      	ldrb	r2, [r3, #4]
    1b42:	3201      	adds	r2, #1
    1b44:	b2d2      	uxtb	r2, r2
    1b46:	711a      	strb	r2, [r3, #4]
    1b48:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    1b4a:	781a      	ldrb	r2, [r3, #0]
    1b4c:	7342      	strb	r2, [r0, #13]
    1b4e:	785b      	ldrb	r3, [r3, #1]
    1b50:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    1b52:	4770      	bx	lr
    1b54:	20000780 	.word	0x20000780

00001b58 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	4a09      	ldr	r2, [pc, #36]	; (1b80 <nwkRouteInit+0x28>)
    1b5c:	3202      	adds	r2, #2
    1b5e:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1b60:	2701      	movs	r7, #1
    1b62:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    1b64:	4806      	ldr	r0, [pc, #24]	; (1b80 <nwkRouteInit+0x28>)
    1b66:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    1b68:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1b6a:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    1b6c:	00d9      	lsls	r1, r3, #3
    1b6e:	5c0c      	ldrb	r4, [r1, r0]
    1b70:	43b4      	bics	r4, r6
    1b72:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    1b74:	7115      	strb	r5, [r2, #4]
    1b76:	3301      	adds	r3, #1
    1b78:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1b7a:	2b64      	cmp	r3, #100	; 0x64
    1b7c:	d1f5      	bne.n	1b6a <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    1b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b80:	20000278 	.word	0x20000278

00001b84 <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    1b84:	b570      	push	{r4, r5, r6, lr}
    1b86:	4a0b      	ldr	r2, [pc, #44]	; (1bb4 <NWK_RouteFindEntry+0x30>)
    1b88:	3202      	adds	r2, #2
    1b8a:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    1b8c:	4e09      	ldr	r6, [pc, #36]	; (1bb4 <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1b8e:	8814      	ldrh	r4, [r2, #0]
    1b90:	4284      	cmp	r4, r0
    1b92:	d109      	bne.n	1ba8 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    1b94:	00dc      	lsls	r4, r3, #3
    1b96:	5da4      	ldrb	r4, [r4, r6]
    1b98:	07a4      	lsls	r4, r4, #30
    1b9a:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1b9c:	428c      	cmp	r4, r1
    1b9e:	d103      	bne.n	1ba8 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    1ba0:	00dd      	lsls	r5, r3, #3
    1ba2:	4804      	ldr	r0, [pc, #16]	; (1bb4 <NWK_RouteFindEntry+0x30>)
    1ba4:	1940      	adds	r0, r0, r5
    1ba6:	e004      	b.n	1bb2 <NWK_RouteFindEntry+0x2e>
    1ba8:	3301      	adds	r3, #1
    1baa:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1bac:	2b64      	cmp	r3, #100	; 0x64
    1bae:	d1ee      	bne.n	1b8e <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    1bb0:	2000      	movs	r0, #0
}
    1bb2:	bd70      	pop	{r4, r5, r6, pc}
    1bb4:	20000278 	.word	0x20000278

00001bb8 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    1bb8:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    1bba:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    1bbc:	4810      	ldr	r0, [pc, #64]	; (1c00 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    1bbe:	24c8      	movs	r4, #200	; 0xc8
    1bc0:	00a4      	lsls	r4, r4, #2
    1bc2:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    1bc4:	7803      	ldrb	r3, [r0, #0]
    1bc6:	07dc      	lsls	r4, r3, #31
    1bc8:	d40b      	bmi.n	1be2 <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    1bca:	7983      	ldrb	r3, [r0, #6]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d00c      	beq.n	1bea <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    1bd0:	2a00      	cmp	r2, #0
    1bd2:	d003      	beq.n	1bdc <NWK_RouteNewEntry+0x24>
    1bd4:	7994      	ldrb	r4, [r2, #6]
    1bd6:	429c      	cmp	r4, r3
    1bd8:	d802      	bhi.n	1be0 <NWK_RouteNewEntry+0x28>
    1bda:	e002      	b.n	1be2 <NWK_RouteNewEntry+0x2a>
    1bdc:	1c02      	adds	r2, r0, #0
    1bde:	e000      	b.n	1be2 <NWK_RouteNewEntry+0x2a>
    1be0:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    1be2:	3008      	adds	r0, #8
    1be4:	4288      	cmp	r0, r1
    1be6:	d1ed      	bne.n	1bc4 <NWK_RouteNewEntry+0xc>
    1be8:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    1bea:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1bec:	2202      	movs	r2, #2
    1bee:	4393      	bics	r3, r2
    1bf0:	220f      	movs	r2, #15
    1bf2:	4013      	ands	r3, r2
    1bf4:	2230      	movs	r2, #48	; 0x30
    1bf6:	4313      	orrs	r3, r2
    1bf8:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    1bfa:	2380      	movs	r3, #128	; 0x80
    1bfc:	7183      	strb	r3, [r0, #6]

	return entry;
}
    1bfe:	bd10      	pop	{r4, pc}
    1c00:	20000278 	.word	0x20000278

00001c04 <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    1c04:	7803      	ldrb	r3, [r0, #0]
    1c06:	07da      	lsls	r2, r3, #31
    1c08:	d404      	bmi.n	1c14 <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    1c0a:	2301      	movs	r3, #1
    1c0c:	425b      	negs	r3, r3
    1c0e:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    1c10:	2300      	movs	r3, #0
    1c12:	7183      	strb	r3, [r0, #6]
}
    1c14:	4770      	bx	lr
    1c16:	46c0      	nop			; (mov r8, r8)

00001c18 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    1c18:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    1c1a:	4b04      	ldr	r3, [pc, #16]	; (1c2c <NWK_RouteNextHop+0x14>)
    1c1c:	4798      	blx	r3
	if (entry) {
    1c1e:	2800      	cmp	r0, #0
    1c20:	d001      	beq.n	1c26 <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    1c22:	8880      	ldrh	r0, [r0, #4]
    1c24:	e000      	b.n	1c28 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    1c26:	4802      	ldr	r0, [pc, #8]	; (1c30 <NWK_RouteNextHop+0x18>)
}
    1c28:	bd08      	pop	{r3, pc}
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	00001b85 	.word	0x00001b85
    1c30:	0000ffff 	.word	0x0000ffff

00001c34 <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    1c34:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    1c36:	4b03      	ldr	r3, [pc, #12]	; (1c44 <nwkRouteRemove+0x10>)
    1c38:	4798      	blx	r3
	if (entry) {
    1c3a:	2800      	cmp	r0, #0
    1c3c:	d001      	beq.n	1c42 <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    1c3e:	4b02      	ldr	r3, [pc, #8]	; (1c48 <nwkRouteRemove+0x14>)
    1c40:	4798      	blx	r3
	}
}
    1c42:	bd08      	pop	{r3, pc}
    1c44:	00001b85 	.word	0x00001b85
    1c48:	00001c05 	.word	0x00001c05

00001c4c <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1c4c:	b538      	push	{r3, r4, r5, lr}
    1c4e:	1c04      	adds	r4, r0, #0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1c50:	7a42      	ldrb	r2, [r0, #9]
    1c52:	7a85      	ldrb	r5, [r0, #10]
    1c54:	022d      	lsls	r5, r5, #8
    1c56:	4315      	orrs	r5, r2
    1c58:	b22b      	sxth	r3, r5
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	da05      	bge.n	1c6a <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    1c5e:	7b42      	ldrb	r2, [r0, #13]
    1c60:	7b83      	ldrb	r3, [r0, #14]
    1c62:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1c64:	4313      	orrs	r3, r2
    1c66:	429d      	cmp	r5, r3
    1c68:	d141      	bne.n	1cee <nwkRouteFrameReceived+0xa2>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    1c6a:	7961      	ldrb	r1, [r4, #5]
    1c6c:	79a2      	ldrb	r2, [r4, #6]
    1c6e:	0212      	lsls	r2, r2, #8
    1c70:	430a      	orrs	r2, r1
    1c72:	4b1f      	ldr	r3, [pc, #124]	; (1cf0 <nwkRouteFrameReceived+0xa4>)
    1c74:	429a      	cmp	r2, r3
    1c76:	d03a      	beq.n	1cee <nwkRouteFrameReceived+0xa2>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1c78:	7b62      	ldrb	r2, [r4, #13]
    1c7a:	7ba0      	ldrb	r0, [r4, #14]
    1c7c:	0200      	lsls	r0, r0, #8
    1c7e:	4310      	orrs	r0, r2
    1c80:	2100      	movs	r1, #0
    1c82:	4b1c      	ldr	r3, [pc, #112]	; (1cf4 <nwkRouteFrameReceived+0xa8>)
    1c84:	4798      	blx	r3

	if (entry) {
    1c86:	2800      	cmp	r0, #0
    1c88:	d022      	beq.n	1cd0 <nwkRouteFrameReceived+0x84>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1c8a:	79e1      	ldrb	r1, [r4, #7]
    1c8c:	7a22      	ldrb	r2, [r4, #8]
    1c8e:	0212      	lsls	r2, r2, #8
    1c90:	430a      	orrs	r2, r1
    1c92:	2100      	movs	r1, #0
    1c94:	4b16      	ldr	r3, [pc, #88]	; (1cf0 <nwkRouteFrameReceived+0xa4>)
    1c96:	429a      	cmp	r2, r3
    1c98:	d108      	bne.n	1cac <nwkRouteFrameReceived+0x60>
				nwkIb.addr == header->nwkDstAddr);
    1c9a:	7be2      	ldrb	r2, [r4, #15]
    1c9c:	7c21      	ldrb	r1, [r4, #16]
    1c9e:	0209      	lsls	r1, r1, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1ca0:	4b15      	ldr	r3, [pc, #84]	; (1cf8 <nwkRouteFrameReceived+0xac>)
    1ca2:	881b      	ldrh	r3, [r3, #0]
    1ca4:	4311      	orrs	r1, r2
    1ca6:	1a59      	subs	r1, r3, r1
    1ca8:	424b      	negs	r3, r1
    1caa:	4159      	adcs	r1, r3
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    1cac:	8883      	ldrh	r3, [r0, #4]
    1cae:	42ab      	cmp	r3, r5
    1cb0:	d004      	beq.n	1cbc <nwkRouteFrameReceived+0x70>
    1cb2:	2385      	movs	r3, #133	; 0x85
    1cb4:	5ce2      	ldrb	r2, [r4, r3]
    1cb6:	79c3      	ldrb	r3, [r0, #7]
    1cb8:	429a      	cmp	r2, r3
    1cba:	d801      	bhi.n	1cc0 <nwkRouteFrameReceived+0x74>
				entry->lqi) || discovery) {
    1cbc:	2900      	cmp	r1, #0
    1cbe:	d013      	beq.n	1ce8 <nwkRouteFrameReceived+0x9c>
			entry->nextHopAddr = header->macSrcAddr;
    1cc0:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1cc2:	7803      	ldrb	r3, [r0, #0]
    1cc4:	220f      	movs	r2, #15
    1cc6:	4013      	ands	r3, r2
    1cc8:	2230      	movs	r2, #48	; 0x30
    1cca:	4313      	orrs	r3, r2
    1ccc:	7003      	strb	r3, [r0, #0]
    1cce:	e00b      	b.n	1ce8 <nwkRouteFrameReceived+0x9c>
		}
	} else {
		entry = NWK_RouteNewEntry();
    1cd0:	4b0a      	ldr	r3, [pc, #40]	; (1cfc <nwkRouteFrameReceived+0xb0>)
    1cd2:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    1cd4:	7b61      	ldrb	r1, [r4, #13]
    1cd6:	7ba2      	ldrb	r2, [r4, #14]
    1cd8:	0212      	lsls	r2, r2, #8
    1cda:	430a      	orrs	r2, r1
    1cdc:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    1cde:	7a62      	ldrb	r2, [r4, #9]
    1ce0:	7aa3      	ldrb	r3, [r4, #10]
    1ce2:	021b      	lsls	r3, r3, #8
    1ce4:	4313      	orrs	r3, r2
    1ce6:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    1ce8:	2385      	movs	r3, #133	; 0x85
    1cea:	5ce3      	ldrb	r3, [r4, r3]
    1cec:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    1cee:	bd38      	pop	{r3, r4, r5, pc}
    1cf0:	0000ffff 	.word	0x0000ffff
    1cf4:	00001b85 	.word	0x00001b85
    1cf8:	20000780 	.word	0x20000780
    1cfc:	00001bb9 	.word	0x00001bb9

00001d00 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1d00:	b510      	push	{r4, lr}
    1d02:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    1d04:	7bc3      	ldrb	r3, [r0, #15]
    1d06:	7c00      	ldrb	r0, [r0, #16]
    1d08:	0200      	lsls	r0, r0, #8
    1d0a:	4318      	orrs	r0, r3
    1d0c:	4b1b      	ldr	r3, [pc, #108]	; (1d7c <nwkRouteFrameSent+0x7c>)
    1d0e:	4298      	cmp	r0, r3
    1d10:	d032      	beq.n	1d78 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    1d12:	7ae1      	ldrb	r1, [r4, #11]
    1d14:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    1d16:	0fc9      	lsrs	r1, r1, #31
    1d18:	4b19      	ldr	r3, [pc, #100]	; (1d80 <nwkRouteFrameSent+0x80>)
    1d1a:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    1d1c:	2800      	cmp	r0, #0
    1d1e:	d02b      	beq.n	1d78 <nwkRouteFrameSent+0x78>
    1d20:	7803      	ldrb	r3, [r0, #0]
    1d22:	07da      	lsls	r2, r3, #31
    1d24:	d428      	bmi.n	1d78 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    1d26:	2385      	movs	r3, #133	; 0x85
    1d28:	5ce3      	ldrb	r3, [r4, r3]
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d117      	bne.n	1d5e <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1d2e:	7803      	ldrb	r3, [r0, #0]
    1d30:	220f      	movs	r2, #15
    1d32:	4013      	ands	r3, r2
    1d34:	2230      	movs	r2, #48	; 0x30
    1d36:	4313      	orrs	r3, r2
    1d38:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    1d3a:	7983      	ldrb	r3, [r0, #6]
    1d3c:	3301      	adds	r3, #1
    1d3e:	b2db      	uxtb	r3, r3
    1d40:	7183      	strb	r3, [r0, #6]
    1d42:	2bff      	cmp	r3, #255	; 0xff
    1d44:	d118      	bne.n	1d78 <nwkRouteFrameSent+0x78>
    1d46:	490f      	ldr	r1, [pc, #60]	; (1d84 <nwkRouteFrameSent+0x84>)
    1d48:	1d8b      	adds	r3, r1, #6
    1d4a:	4a0f      	ldr	r2, [pc, #60]	; (1d88 <nwkRouteFrameSent+0x88>)
    1d4c:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1d4e:	781a      	ldrb	r2, [r3, #0]
    1d50:	0852      	lsrs	r2, r2, #1
    1d52:	3201      	adds	r2, #1
    1d54:	701a      	strb	r2, [r3, #0]
    1d56:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1d58:	428b      	cmp	r3, r1
    1d5a:	d1f8      	bne.n	1d4e <nwkRouteFrameSent+0x4e>
    1d5c:	e00c      	b.n	1d78 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    1d5e:	7802      	ldrb	r2, [r0, #0]
    1d60:	0913      	lsrs	r3, r2, #4
    1d62:	330f      	adds	r3, #15
    1d64:	210f      	movs	r1, #15
    1d66:	400b      	ands	r3, r1
    1d68:	011c      	lsls	r4, r3, #4
    1d6a:	400a      	ands	r2, r1
    1d6c:	4322      	orrs	r2, r4
    1d6e:	7002      	strb	r2, [r0, #0]
    1d70:	2b00      	cmp	r3, #0
    1d72:	d101      	bne.n	1d78 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    1d74:	4b05      	ldr	r3, [pc, #20]	; (1d8c <nwkRouteFrameSent+0x8c>)
    1d76:	4798      	blx	r3
		}
	}
}
    1d78:	bd10      	pop	{r4, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	0000ffff 	.word	0x0000ffff
    1d80:	00001b85 	.word	0x00001b85
    1d84:	20000278 	.word	0x20000278
    1d88:	00000326 	.word	0x00000326
    1d8c:	00001c05 	.word	0x00001c05

00001d90 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1d90:	b510      	push	{r4, lr}
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    1d92:	7bc1      	ldrb	r1, [r0, #15]
    1d94:	7c03      	ldrb	r3, [r0, #16]
    1d96:	021b      	lsls	r3, r3, #8
    1d98:	430b      	orrs	r3, r1
    1d9a:	4a0d      	ldr	r2, [pc, #52]	; (1dd0 <nwkRoutePrepareTx+0x40>)
    1d9c:	4293      	cmp	r3, r2
    1d9e:	d104      	bne.n	1daa <nwkRoutePrepareTx+0x1a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    1da0:	2301      	movs	r3, #1
    1da2:	425b      	negs	r3, r3
    1da4:	71c3      	strb	r3, [r0, #7]
    1da6:	7203      	strb	r3, [r0, #8]
    1da8:	e010      	b.n	1dcc <nwkRoutePrepareTx+0x3c>
	} else if (header->nwkFcf.linkLocal) {
    1daa:	7ac2      	ldrb	r2, [r0, #11]
    1dac:	0751      	lsls	r1, r2, #29
    1dae:	d503      	bpl.n	1db8 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    1db0:	71c3      	strb	r3, [r0, #7]
    1db2:	0a1b      	lsrs	r3, r3, #8
    1db4:	7203      	strb	r3, [r0, #8]
    1db6:	e009      	b.n	1dcc <nwkRoutePrepareTx+0x3c>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    1db8:	1c84      	adds	r4, r0, #2
    1dba:	7ac1      	ldrb	r1, [r0, #11]
    1dbc:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    1dbe:	0fc9      	lsrs	r1, r1, #31
    1dc0:	1c18      	adds	r0, r3, #0
    1dc2:	4b04      	ldr	r3, [pc, #16]	; (1dd4 <nwkRoutePrepareTx+0x44>)
    1dc4:	4798      	blx	r3
    1dc6:	7160      	strb	r0, [r4, #5]
    1dc8:	0a00      	lsrs	r0, r0, #8
    1dca:	71a0      	strb	r0, [r4, #6]
			nwkRouteDiscoveryRequest(frame);
		}

  #endif
	}
}
    1dcc:	bd10      	pop	{r4, pc}
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	0000ffff 	.word	0x0000ffff
    1dd4:	00001c19 	.word	0x00001c19

00001dd8 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dda:	4647      	mov	r7, r8
    1ddc:	b480      	push	{r7}
    1dde:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    1de0:	7bc2      	ldrb	r2, [r0, #15]
    1de2:	7c06      	ldrb	r6, [r0, #16]
    1de4:	0236      	lsls	r6, r6, #8
    1de6:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    1de8:	7ac7      	ldrb	r7, [r0, #11]
    1dea:	073f      	lsls	r7, r7, #28
    1dec:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    1dee:	b2f9      	uxtb	r1, r7
    1df0:	1c30      	adds	r0, r6, #0
    1df2:	4b28      	ldr	r3, [pc, #160]	; (1e94 <nwkRouteFrame+0xbc>)
    1df4:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    1df6:	4b28      	ldr	r3, [pc, #160]	; (1e98 <nwkRouteFrame+0xc0>)
    1df8:	4298      	cmp	r0, r3
    1dfa:	d00f      	beq.n	1e1c <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    1dfc:	2200      	movs	r2, #0
    1dfe:	2389      	movs	r3, #137	; 0x89
    1e00:	54e2      	strb	r2, [r4, r3]
    1e02:	238a      	movs	r3, #138	; 0x8a
    1e04:	54e2      	strb	r2, [r4, r3]
    1e06:	238b      	movs	r3, #139	; 0x8b
    1e08:	54e2      	strb	r2, [r4, r3]
    1e0a:	238c      	movs	r3, #140	; 0x8c
    1e0c:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1e0e:	2202      	movs	r2, #2
    1e10:	2388      	movs	r3, #136	; 0x88
    1e12:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    1e14:	1c20      	adds	r0, r4, #0
    1e16:	4b21      	ldr	r3, [pc, #132]	; (1e9c <nwkRouteFrame+0xc4>)
    1e18:	4798      	blx	r3
    1e1a:	e038      	b.n	1e8e <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    1e1c:	7b62      	ldrb	r2, [r4, #13]
    1e1e:	7ba3      	ldrb	r3, [r4, #14]
    1e20:	021b      	lsls	r3, r3, #8
    1e22:	4313      	orrs	r3, r2
    1e24:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    1e26:	4b1e      	ldr	r3, [pc, #120]	; (1ea0 <nwkRouteFrame+0xc8>)
    1e28:	4798      	blx	r3
    1e2a:	1e05      	subs	r5, r0, #0
    1e2c:	d02c      	beq.n	1e88 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    1e2e:	4b1d      	ldr	r3, [pc, #116]	; (1ea4 <nwkRouteFrame+0xcc>)
    1e30:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    1e32:	786b      	ldrb	r3, [r5, #1]
    1e34:	3306      	adds	r3, #6
    1e36:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    1e38:	2200      	movs	r2, #0
    1e3a:	2389      	movs	r3, #137	; 0x89
    1e3c:	54ea      	strb	r2, [r5, r3]
    1e3e:	238a      	movs	r3, #138	; 0x8a
    1e40:	54ea      	strb	r2, [r5, r3]
    1e42:	238b      	movs	r3, #139	; 0x8b
    1e44:	54ea      	strb	r2, [r5, r3]
    1e46:	238c      	movs	r3, #140	; 0x8c
    1e48:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    1e4a:	21ff      	movs	r1, #255	; 0xff
    1e4c:	4643      	mov	r3, r8
    1e4e:	4019      	ands	r1, r3
    1e50:	73e9      	strb	r1, [r5, #15]
    1e52:	0a1a      	lsrs	r2, r3, #8
    1e54:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    1e56:	2381      	movs	r3, #129	; 0x81
    1e58:	5ce8      	ldrb	r0, [r5, r3]
    1e5a:	2382      	movs	r3, #130	; 0x82
    1e5c:	5ceb      	ldrb	r3, [r5, r3]
    1e5e:	021b      	lsls	r3, r3, #8
    1e60:	4303      	orrs	r3, r0
    1e62:	2083      	movs	r0, #131	; 0x83
    1e64:	5c28      	ldrb	r0, [r5, r0]
    1e66:	0400      	lsls	r0, r0, #16
    1e68:	4303      	orrs	r3, r0
    1e6a:	2084      	movs	r0, #132	; 0x84
    1e6c:	5c28      	ldrb	r0, [r5, r0]
    1e6e:	0600      	lsls	r0, r0, #24
    1e70:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    1e72:	2001      	movs	r0, #1
    1e74:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    1e76:	7059      	strb	r1, [r3, #1]
    1e78:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    1e7a:	70de      	strb	r6, [r3, #3]
    1e7c:	0a36      	lsrs	r6, r6, #8
    1e7e:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    1e80:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    1e82:	1c28      	adds	r0, r5, #0
    1e84:	4b05      	ldr	r3, [pc, #20]	; (1e9c <nwkRouteFrame+0xc4>)
    1e86:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    1e88:	1c20      	adds	r0, r4, #0
    1e8a:	4b07      	ldr	r3, [pc, #28]	; (1ea8 <nwkRouteFrame+0xd0>)
    1e8c:	4798      	blx	r3
	}
}
    1e8e:	bc04      	pop	{r2}
    1e90:	4690      	mov	r8, r2
    1e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e94:	00001c19 	.word	0x00001c19
    1e98:	0000ffff 	.word	0x0000ffff
    1e9c:	00002701 	.word	0x00002701
    1ea0:	00001a79 	.word	0x00001a79
    1ea4:	00001b39 	.word	0x00001b39
    1ea8:	00001ae9 	.word	0x00001ae9

00001eac <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    1eac:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1eae:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    1eb0:	7b03      	ldrb	r3, [r0, #12]
		return false;
    1eb2:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    1eb4:	2b06      	cmp	r3, #6
    1eb6:	d107      	bne.n	1ec8 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    1eb8:	78d3      	ldrb	r3, [r2, #3]
    1eba:	7910      	ldrb	r0, [r2, #4]
    1ebc:	0200      	lsls	r0, r0, #8
    1ebe:	4318      	orrs	r0, r3
    1ec0:	7951      	ldrb	r1, [r2, #5]
    1ec2:	4b02      	ldr	r3, [pc, #8]	; (1ecc <nwkRouteErrorReceived+0x20>)
    1ec4:	4798      	blx	r3

	return true;
    1ec6:	2001      	movs	r0, #1
}
    1ec8:	bd08      	pop	{r3, pc}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	00001c35 	.word	0x00001c35

00001ed0 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    1ed0:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    1ed2:	7b02      	ldrb	r2, [r0, #12]
		return false;
    1ed4:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    1ed6:	2a00      	cmp	r2, #0
    1ed8:	d00f      	beq.n	1efa <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    1eda:	6882      	ldr	r2, [r0, #8]
    1edc:	7813      	ldrb	r3, [r2, #0]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d002      	beq.n	1ee8 <nwkRxSeriveDataInd+0x18>
    1ee2:	2b01      	cmp	r3, #1
    1ee4:	d004      	beq.n	1ef0 <nwkRxSeriveDataInd+0x20>
    1ee6:	e007      	b.n	1ef8 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    1ee8:	4b05      	ldr	r3, [pc, #20]	; (1f00 <nwkRxSeriveDataInd+0x30>)
    1eea:	4798      	blx	r3
    1eec:	1c03      	adds	r3, r0, #0
    1eee:	e004      	b.n	1efa <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    1ef0:	4b04      	ldr	r3, [pc, #16]	; (1f04 <nwkRxSeriveDataInd+0x34>)
    1ef2:	4798      	blx	r3
    1ef4:	1c03      	adds	r3, r0, #0
    1ef6:	e000      	b.n	1efa <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    1ef8:	2300      	movs	r3, #0
	}
}
    1efa:	1c18      	adds	r0, r3, #0
    1efc:	bd08      	pop	{r3, pc}
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	0000284d 	.word	0x0000284d
    1f04:	00001ead 	.word	0x00001ead

00001f08 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1f08:	b538      	push	{r3, r4, r5, lr}
    1f0a:	4909      	ldr	r1, [pc, #36]	; (1f30 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    1f0c:	1d0b      	adds	r3, r1, #4
    1f0e:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    1f10:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    1f12:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    1f14:	781a      	ldrb	r2, [r3, #0]
    1f16:	2a00      	cmp	r2, #0
    1f18:	d002      	beq.n	1f20 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    1f1a:	3a01      	subs	r2, #1
    1f1c:	701a      	strb	r2, [r3, #0]
			restart = true;
    1f1e:	1c2c      	adds	r4, r5, #0
    1f20:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1f22:	428b      	cmp	r3, r1
    1f24:	d1f6      	bne.n	1f14 <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    1f26:	2c00      	cmp	r4, #0
    1f28:	d001      	beq.n	1f2e <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    1f2a:	4b02      	ldr	r3, [pc, #8]	; (1f34 <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    1f2c:	4798      	blx	r3
	}
}
    1f2e:	bd38      	pop	{r3, r4, r5, pc}
    1f30:	20000598 	.word	0x20000598
    1f34:	00002db1 	.word	0x00002db1

00001f38 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    1f38:	b508      	push	{r3, lr}
    1f3a:	490a      	ldr	r1, [pc, #40]	; (1f64 <nwkRxInit+0x2c>)
    1f3c:	1d0b      	adds	r3, r1, #4
    1f3e:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    1f40:	2200      	movs	r2, #0
    1f42:	701a      	strb	r2, [r3, #0]
    1f44:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1f46:	428b      	cmp	r3, r1
    1f48:	d1fb      	bne.n	1f42 <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1f4a:	4b07      	ldr	r3, [pc, #28]	; (1f68 <nwkRxInit+0x30>)
    1f4c:	2264      	movs	r2, #100	; 0x64
    1f4e:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1f50:	2200      	movs	r2, #0
    1f52:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    1f54:	4a05      	ldr	r2, [pc, #20]	; (1f6c <nwkRxInit+0x34>)
    1f56:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    1f58:	2000      	movs	r0, #0
    1f5a:	4905      	ldr	r1, [pc, #20]	; (1f70 <nwkRxInit+0x38>)
    1f5c:	4b05      	ldr	r3, [pc, #20]	; (1f74 <nwkRxInit+0x3c>)
    1f5e:	4798      	blx	r3
}
    1f60:	bd08      	pop	{r3, pc}
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	20000598 	.word	0x20000598
    1f68:	200005d8 	.word	0x200005d8
    1f6c:	00001f09 	.word	0x00001f09
    1f70:	00001ed1 	.word	0x00001ed1
    1f74:	000018a1 	.word	0x000018a1

00001f78 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    1f78:	b510      	push	{r4, lr}
    1f7a:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    1f7c:	6803      	ldr	r3, [r0, #0]
    1f7e:	785a      	ldrb	r2, [r3, #1]
    1f80:	2a88      	cmp	r2, #136	; 0x88
    1f82:	d11a      	bne.n	1fba <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	2220      	movs	r2, #32
    1f88:	4393      	bics	r3, r2
    1f8a:	2b41      	cmp	r3, #65	; 0x41
    1f8c:	d115      	bne.n	1fba <PHY_DataInd+0x42>
    1f8e:	7903      	ldrb	r3, [r0, #4]
    1f90:	2b0f      	cmp	r3, #15
    1f92:	d912      	bls.n	1fba <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    1f94:	4b09      	ldr	r3, [pc, #36]	; (1fbc <PHY_DataInd+0x44>)
    1f96:	4798      	blx	r3
    1f98:	2800      	cmp	r0, #0
    1f9a:	d00e      	beq.n	1fba <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    1f9c:	2320      	movs	r3, #32
    1f9e:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    1fa0:	7923      	ldrb	r3, [r4, #4]
    1fa2:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    1fa4:	7962      	ldrb	r2, [r4, #5]
    1fa6:	2385      	movs	r3, #133	; 0x85
    1fa8:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    1faa:	79a2      	ldrb	r2, [r4, #6]
    1fac:	2386      	movs	r3, #134	; 0x86
    1fae:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    1fb0:	3002      	adds	r0, #2
    1fb2:	7922      	ldrb	r2, [r4, #4]
    1fb4:	6821      	ldr	r1, [r4, #0]
    1fb6:	4b02      	ldr	r3, [pc, #8]	; (1fc0 <PHY_DataInd+0x48>)
    1fb8:	4798      	blx	r3
}
    1fba:	bd10      	pop	{r4, pc}
    1fbc:	00001a79 	.word	0x00001a79
    1fc0:	00004061 	.word	0x00004061

00001fc4 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    1fc4:	2900      	cmp	r1, #0
    1fc6:	d002      	beq.n	1fce <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    1fc8:	2322      	movs	r3, #34	; 0x22
    1fca:	7003      	strb	r3, [r0, #0]
    1fcc:	e001      	b.n	1fd2 <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    1fce:	2324      	movs	r3, #36	; 0x24
    1fd0:	7003      	strb	r3, [r0, #0]
	}
}
    1fd2:	4770      	bx	lr

00001fd4 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd6:	464f      	mov	r7, r9
    1fd8:	4646      	mov	r6, r8
    1fda:	b4c0      	push	{r6, r7}
    1fdc:	b085      	sub	sp, #20
	NwkFrame_t *frame = NULL;
    1fde:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    1fe0:	4dd3      	ldr	r5, [pc, #844]	; (2330 <STACK_SIZE+0x330>)
    1fe2:	48d4      	ldr	r0, [pc, #848]	; (2334 <STACK_SIZE+0x334>)
    1fe4:	4681      	mov	r9, r0
    1fe6:	203c      	movs	r0, #60	; 0x3c
    1fe8:	4481      	add	r9, r0
    1fea:	e19a      	b.n	2322 <STACK_SIZE+0x322>
		switch (frame->state) {
    1fec:	7823      	ldrb	r3, [r4, #0]
    1fee:	3b20      	subs	r3, #32
    1ff0:	b2da      	uxtb	r2, r3
    1ff2:	2a04      	cmp	r2, #4
    1ff4:	d900      	bls.n	1ff8 <nwkRxTaskHandler+0x24>
    1ff6:	e194      	b.n	2322 <STACK_SIZE+0x322>
    1ff8:	0093      	lsls	r3, r2, #2
    1ffa:	4acf      	ldr	r2, [pc, #828]	; (2338 <STACK_SIZE+0x338>)
    1ffc:	58d3      	ldr	r3, [r2, r3]
    1ffe:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2000:	2324      	movs	r3, #36	; 0x24
    2002:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2004:	7ae3      	ldrb	r3, [r4, #11]
    2006:	0719      	lsls	r1, r3, #28
    2008:	d500      	bpl.n	200c <STACK_SIZE+0xc>
    200a:	e18a      	b.n	2322 <STACK_SIZE+0x322>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    200c:	7961      	ldrb	r1, [r4, #5]
    200e:	79a2      	ldrb	r2, [r4, #6]
    2010:	0212      	lsls	r2, r2, #8
    2012:	430a      	orrs	r2, r1
    2014:	4bc9      	ldr	r3, [pc, #804]	; (233c <STACK_SIZE+0x33c>)
    2016:	429a      	cmp	r2, r3
    2018:	d114      	bne.n	2044 <STACK_SIZE+0x44>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    201a:	7be2      	ldrb	r2, [r4, #15]
    201c:	7c23      	ldrb	r3, [r4, #16]
    201e:	021b      	lsls	r3, r3, #8
    2020:	4313      	orrs	r3, r2
    2022:	4ac7      	ldr	r2, [pc, #796]	; (2340 <STACK_SIZE+0x340>)
    2024:	8812      	ldrh	r2, [r2, #0]
    2026:	429a      	cmp	r2, r3
    2028:	d003      	beq.n	2032 <STACK_SIZE+0x32>
    202a:	4ac4      	ldr	r2, [pc, #784]	; (233c <STACK_SIZE+0x33c>)
    202c:	4293      	cmp	r3, r2
    202e:	d000      	beq.n	2032 <STACK_SIZE+0x32>
    2030:	e177      	b.n	2322 <STACK_SIZE+0x322>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2032:	7ae3      	ldrb	r3, [r4, #11]
    2034:	079a      	lsls	r2, r3, #30
    2036:	d502      	bpl.n	203e <STACK_SIZE+0x3e>
				frame->state = NWK_RX_STATE_DECRYPT;
    2038:	2321      	movs	r3, #33	; 0x21
    203a:	7023      	strb	r3, [r4, #0]
    203c:	e171      	b.n	2322 <STACK_SIZE+0x322>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    203e:	2322      	movs	r3, #34	; 0x22
    2040:	7023      	strb	r3, [r4, #0]
    2042:	e16e      	b.n	2322 <STACK_SIZE+0x322>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2044:	7be1      	ldrb	r1, [r4, #15]
    2046:	7c22      	ldrb	r2, [r4, #16]
    2048:	0212      	lsls	r2, r2, #8
    204a:	430a      	orrs	r2, r1
    204c:	4bbb      	ldr	r3, [pc, #748]	; (233c <STACK_SIZE+0x33c>)
    204e:	429a      	cmp	r2, r3
    2050:	d103      	bne.n	205a <STACK_SIZE+0x5a>
			header->nwkFcf.ackRequest) {
    2052:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2054:	07de      	lsls	r6, r3, #31
    2056:	d500      	bpl.n	205a <STACK_SIZE+0x5a>
    2058:	e163      	b.n	2322 <STACK_SIZE+0x322>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    205a:	7b61      	ldrb	r1, [r4, #13]
    205c:	7ba3      	ldrb	r3, [r4, #14]
    205e:	021b      	lsls	r3, r3, #8
    2060:	4ab7      	ldr	r2, [pc, #732]	; (2340 <STACK_SIZE+0x340>)
    2062:	8812      	ldrh	r2, [r2, #0]
    2064:	430b      	orrs	r3, r1
    2066:	429a      	cmp	r2, r3
    2068:	d100      	bne.n	206c <STACK_SIZE+0x6c>
    206a:	e15a      	b.n	2322 <STACK_SIZE+0x322>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    206c:	1c20      	adds	r0, r4, #0
    206e:	4bb5      	ldr	r3, [pc, #724]	; (2344 <STACK_SIZE+0x344>)
    2070:	4798      	blx	r3
    2072:	4bb0      	ldr	r3, [pc, #704]	; (2334 <STACK_SIZE+0x334>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2074:	2700      	movs	r7, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2076:	1ca1      	adds	r1, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2078:	1c18      	adds	r0, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    207a:	791a      	ldrb	r2, [r3, #4]
    207c:	2a00      	cmp	r2, #0
    207e:	d037      	beq.n	20f0 <STACK_SIZE+0xf0>
    2080:	7ace      	ldrb	r6, [r1, #11]
    2082:	7b0a      	ldrb	r2, [r1, #12]
    2084:	0212      	lsls	r2, r2, #8
    2086:	4690      	mov	r8, r2
    2088:	881a      	ldrh	r2, [r3, #0]
    208a:	4694      	mov	ip, r2
    208c:	4642      	mov	r2, r8
    208e:	4316      	orrs	r6, r2
    2090:	45b4      	cmp	ip, r6
    2092:	d12e      	bne.n	20f2 <STACK_SIZE+0xf2>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2094:	7b22      	ldrb	r2, [r4, #12]
    2096:	789b      	ldrb	r3, [r3, #2]
    2098:	1a9b      	subs	r3, r3, r2
    209a:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    209c:	2b07      	cmp	r3, #7
    209e:	d81c      	bhi.n	20da <STACK_SIZE+0xda>
				if (entry->mask & (1 << diff)) {
    20a0:	78c2      	ldrb	r2, [r0, #3]
    20a2:	1c11      	adds	r1, r2, #0
    20a4:	4119      	asrs	r1, r3
    20a6:	07ce      	lsls	r6, r1, #31
    20a8:	d512      	bpl.n	20d0 <STACK_SIZE+0xd0>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    20aa:	79e1      	ldrb	r1, [r4, #7]
    20ac:	7a23      	ldrb	r3, [r4, #8]
    20ae:	021b      	lsls	r3, r3, #8
    20b0:	4aa3      	ldr	r2, [pc, #652]	; (2340 <STACK_SIZE+0x340>)
    20b2:	8812      	ldrh	r2, [r2, #0]
    20b4:	430b      	orrs	r3, r1
    20b6:	429a      	cmp	r2, r3
    20b8:	d000      	beq.n	20bc <STACK_SIZE+0xbc>
    20ba:	e132      	b.n	2322 <STACK_SIZE+0x322>
						nwkRouteRemove(
    20bc:	7be2      	ldrb	r2, [r4, #15]
    20be:	7c20      	ldrb	r0, [r4, #16]
    20c0:	0200      	lsls	r0, r0, #8
    20c2:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    20c4:	7ae1      	ldrb	r1, [r4, #11]
    20c6:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    20c8:	0fc9      	lsrs	r1, r1, #31
    20ca:	4b9f      	ldr	r3, [pc, #636]	; (2348 <STACK_SIZE+0x348>)
    20cc:	4798      	blx	r3
    20ce:	e128      	b.n	2322 <STACK_SIZE+0x322>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    20d0:	2101      	movs	r1, #1
    20d2:	4099      	lsls	r1, r3
    20d4:	430a      	orrs	r2, r1
    20d6:	70c2      	strb	r2, [r0, #3]
    20d8:	e14e      	b.n	2378 <STACK_SIZE+0x378>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    20da:	7082      	strb	r2, [r0, #2]
				entry->mask = (entry->mask << shift) | 1;
    20dc:	78c2      	ldrb	r2, [r0, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    20de:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    20e0:	b2db      	uxtb	r3, r3
    20e2:	409a      	lsls	r2, r3
    20e4:	2301      	movs	r3, #1
    20e6:	4313      	orrs	r3, r2
    20e8:	70c3      	strb	r3, [r0, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    20ea:	231f      	movs	r3, #31
    20ec:	7103      	strb	r3, [r0, #4]
    20ee:	e143      	b.n	2378 <STACK_SIZE+0x378>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    20f0:	1c1f      	adds	r7, r3, #0
    20f2:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    20f4:	454b      	cmp	r3, r9
    20f6:	d1bf      	bne.n	2078 <STACK_SIZE+0x78>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    20f8:	2f00      	cmp	r7, #0
    20fa:	d100      	bne.n	20fe <STACK_SIZE+0xfe>
    20fc:	e111      	b.n	2322 <STACK_SIZE+0x322>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    20fe:	7b61      	ldrb	r1, [r4, #13]
    2100:	7ba2      	ldrb	r2, [r4, #14]
    2102:	0212      	lsls	r2, r2, #8
    2104:	430a      	orrs	r2, r1
    2106:	803a      	strh	r2, [r7, #0]
	freeEntry->seq = header->nwkSeq;
    2108:	7b23      	ldrb	r3, [r4, #12]
    210a:	70bb      	strb	r3, [r7, #2]
	freeEntry->mask = 1;
    210c:	2301      	movs	r3, #1
    210e:	70fb      	strb	r3, [r7, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2110:	231f      	movs	r3, #31
    2112:	713b      	strb	r3, [r7, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2114:	488d      	ldr	r0, [pc, #564]	; (234c <STACK_SIZE+0x34c>)
    2116:	4b8e      	ldr	r3, [pc, #568]	; (2350 <STACK_SIZE+0x350>)
    2118:	4798      	blx	r3
    211a:	e12d      	b.n	2378 <STACK_SIZE+0x378>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    211c:	4b88      	ldr	r3, [pc, #544]	; (2340 <STACK_SIZE+0x340>)
    211e:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    2120:	7be0      	ldrb	r0, [r4, #15]
    2122:	7c23      	ldrb	r3, [r4, #16]
    2124:	021b      	lsls	r3, r3, #8
    2126:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2128:	429a      	cmp	r2, r3
    212a:	d010      	beq.n	214e <STACK_SIZE+0x14e>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    212c:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    212e:	074f      	lsls	r7, r1, #29
    2130:	d40a      	bmi.n	2148 <STACK_SIZE+0x148>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    2132:	1c20      	adds	r0, r4, #0
    2134:	4b87      	ldr	r3, [pc, #540]	; (2354 <STACK_SIZE+0x354>)
    2136:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2138:	4b81      	ldr	r3, [pc, #516]	; (2340 <STACK_SIZE+0x340>)
    213a:	881a      	ldrh	r2, [r3, #0]
    213c:	7be0      	ldrb	r0, [r4, #15]
    213e:	7c23      	ldrb	r3, [r4, #16]
    2140:	021b      	lsls	r3, r3, #8
    2142:	4303      	orrs	r3, r0
    2144:	429a      	cmp	r2, r3
    2146:	d002      	beq.n	214e <STACK_SIZE+0x14e>
    2148:	497c      	ldr	r1, [pc, #496]	; (233c <STACK_SIZE+0x33c>)
    214a:	428b      	cmp	r3, r1
    214c:	d108      	bne.n	2160 <STACK_SIZE+0x160>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    214e:	7ae3      	ldrb	r3, [r4, #11]
    2150:	0798      	lsls	r0, r3, #30
    2152:	d502      	bpl.n	215a <STACK_SIZE+0x15a>
				frame->state = NWK_RX_STATE_DECRYPT;
    2154:	2321      	movs	r3, #33	; 0x21
    2156:	7023      	strb	r3, [r4, #0]
    2158:	e0e3      	b.n	2322 <STACK_SIZE+0x322>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    215a:	2322      	movs	r3, #34	; 0x22
    215c:	7023      	strb	r3, [r4, #0]
    215e:	e0e0      	b.n	2322 <STACK_SIZE+0x322>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2160:	79e1      	ldrb	r1, [r4, #7]
    2162:	7a23      	ldrb	r3, [r4, #8]
    2164:	021b      	lsls	r3, r3, #8
    2166:	430b      	orrs	r3, r1
    2168:	429a      	cmp	r2, r3
    216a:	d000      	beq.n	216e <STACK_SIZE+0x16e>
    216c:	e0d9      	b.n	2322 <STACK_SIZE+0x322>
			frame->state = NWK_RX_STATE_ROUTE;
    216e:	2323      	movs	r3, #35	; 0x23
    2170:	7023      	strb	r3, [r4, #0]
    2172:	e0d6      	b.n	2322 <STACK_SIZE+0x322>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    2174:	1c20      	adds	r0, r4, #0
    2176:	2100      	movs	r1, #0
    2178:	4b77      	ldr	r3, [pc, #476]	; (2358 <STACK_SIZE+0x358>)
    217a:	4798      	blx	r3
		}
		break;
    217c:	e0d1      	b.n	2322 <STACK_SIZE+0x322>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    217e:	2200      	movs	r2, #0
    2180:	4b76      	ldr	r3, [pc, #472]	; (235c <STACK_SIZE+0x35c>)
    2182:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    2184:	7c61      	ldrb	r1, [r4, #17]
    2186:	0909      	lsrs	r1, r1, #4
    2188:	b2ca      	uxtb	r2, r1
    218a:	3202      	adds	r2, #2
    218c:	0092      	lsls	r2, r2, #2
    218e:	4b6c      	ldr	r3, [pc, #432]	; (2340 <STACK_SIZE+0x340>)
    2190:	58d2      	ldr	r2, [r2, r3]
    2192:	2a00      	cmp	r2, #0
    2194:	d05f      	beq.n	2256 <STACK_SIZE+0x256>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    2196:	1ca3      	adds	r3, r4, #2
    2198:	7b67      	ldrb	r7, [r4, #13]
    219a:	7ba0      	ldrb	r0, [r4, #14]
    219c:	0200      	lsls	r0, r0, #8
    219e:	4338      	orrs	r0, r7
    21a0:	4680      	mov	r8, r0
    21a2:	466e      	mov	r6, sp
    21a4:	8030      	strh	r0, [r6, #0]
	ind.dstAddr = header->nwkDstAddr;
    21a6:	7be0      	ldrb	r0, [r4, #15]
    21a8:	7c26      	ldrb	r6, [r4, #16]
    21aa:	0236      	lsls	r6, r6, #8
    21ac:	1c37      	adds	r7, r6, #0
    21ae:	4307      	orrs	r7, r0
    21b0:	4668      	mov	r0, sp
    21b2:	8047      	strh	r7, [r0, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    21b4:	7c66      	ldrb	r6, [r4, #17]
    21b6:	0736      	lsls	r6, r6, #28
    21b8:	0f36      	lsrs	r6, r6, #28
    21ba:	7106      	strb	r6, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    21bc:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    21be:	2181      	movs	r1, #129	; 0x81
    21c0:	5c61      	ldrb	r1, [r4, r1]
    21c2:	2082      	movs	r0, #130	; 0x82
    21c4:	5c26      	ldrb	r6, [r4, r0]
    21c6:	0236      	lsls	r6, r6, #8
    21c8:	4331      	orrs	r1, r6
    21ca:	2083      	movs	r0, #131	; 0x83
    21cc:	5c26      	ldrb	r6, [r4, r0]
    21ce:	0436      	lsls	r6, r6, #16
    21d0:	4331      	orrs	r1, r6
    21d2:	2084      	movs	r0, #132	; 0x84
    21d4:	5c26      	ldrb	r6, [r4, r0]
    21d6:	0636      	lsls	r6, r6, #24
    21d8:	4331      	orrs	r1, r6
    21da:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    21dc:	1a59      	subs	r1, r3, r1
    21de:	468c      	mov	ip, r1
    21e0:	7861      	ldrb	r1, [r4, #1]
    21e2:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    21e4:	4668      	mov	r0, sp
    21e6:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    21e8:	2185      	movs	r1, #133	; 0x85
    21ea:	5c61      	ldrb	r1, [r4, r1]
    21ec:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    21ee:	2186      	movs	r1, #134	; 0x86
    21f0:	5c61      	ldrb	r1, [r4, r1]
    21f2:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    21f4:	7ae3      	ldrb	r3, [r4, #11]
    21f6:	07d9      	lsls	r1, r3, #31
    21f8:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    21fa:	2602      	movs	r6, #2
    21fc:	4033      	ands	r3, r6
    21fe:	430b      	orrs	r3, r1
    2200:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2202:	7ae1      	ldrb	r1, [r4, #11]
    2204:	0749      	lsls	r1, r1, #29
    2206:	0fc9      	lsrs	r1, r1, #31
    2208:	0149      	lsls	r1, r1, #5
    220a:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    220c:	7ae1      	ldrb	r1, [r4, #11]
    220e:	0709      	lsls	r1, r1, #28
    2210:	0fc9      	lsrs	r1, r1, #31
    2212:	0189      	lsls	r1, r1, #6
    2214:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2216:	4952      	ldr	r1, [pc, #328]	; (2360 <STACK_SIZE+0x360>)
    2218:	187f      	adds	r7, r7, r1
    221a:	4279      	negs	r1, r7
    221c:	414f      	adcs	r7, r1
    221e:	00bf      	lsls	r7, r7, #2
    2220:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2222:	7a67      	ldrb	r7, [r4, #9]
    2224:	7aa1      	ldrb	r1, [r4, #10]
    2226:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2228:	4339      	orrs	r1, r7
    222a:	4646      	mov	r6, r8
    222c:	1a70      	subs	r0, r6, r1
    222e:	4241      	negs	r1, r0
    2230:	4148      	adcs	r0, r1
    2232:	00c0      	lsls	r0, r0, #3
    2234:	4303      	orrs	r3, r0
    2236:	466f      	mov	r7, sp
    2238:	71bb      	strb	r3, [r7, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    223a:	7960      	ldrb	r0, [r4, #5]
    223c:	79a1      	ldrb	r1, [r4, #6]
    223e:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2240:	4301      	orrs	r1, r0
    2242:	4847      	ldr	r0, [pc, #284]	; (2360 <STACK_SIZE+0x360>)
    2244:	1809      	adds	r1, r1, r0
    2246:	4248      	negs	r0, r1
    2248:	4141      	adcs	r1, r0
    224a:	0109      	lsls	r1, r1, #4
    224c:	430b      	orrs	r3, r1
    224e:	71bb      	strb	r3, [r7, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2250:	4668      	mov	r0, sp
    2252:	4790      	blx	r2
    2254:	e000      	b.n	2258 <STACK_SIZE+0x258>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2256:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2258:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    225a:	07db      	lsls	r3, r3, #31
    225c:	17db      	asrs	r3, r3, #31
    225e:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2260:	79e3      	ldrb	r3, [r4, #7]
    2262:	7a22      	ldrb	r2, [r4, #8]
    2264:	0212      	lsls	r2, r2, #8
    2266:	431a      	orrs	r2, r3
    2268:	4b34      	ldr	r3, [pc, #208]	; (233c <STACK_SIZE+0x33c>)
    226a:	429a      	cmp	r2, r3
    226c:	d10b      	bne.n	2286 <STACK_SIZE+0x286>
			nwkIb.addr == frame->header.nwkDstAddr &&
    226e:	7be1      	ldrb	r1, [r4, #15]
    2270:	7c23      	ldrb	r3, [r4, #16]
    2272:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2274:	4a32      	ldr	r2, [pc, #200]	; (2340 <STACK_SIZE+0x340>)
    2276:	8812      	ldrh	r2, [r2, #0]
    2278:	430b      	orrs	r3, r1
    227a:	429a      	cmp	r2, r3
    227c:	d103      	bne.n	2286 <STACK_SIZE+0x286>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    227e:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    2280:	0719      	lsls	r1, r3, #28
    2282:	d400      	bmi.n	2286 <STACK_SIZE+0x286>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    2284:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    2286:	7963      	ldrb	r3, [r4, #5]
    2288:	79a2      	ldrb	r2, [r4, #6]
    228a:	0212      	lsls	r2, r2, #8
    228c:	431a      	orrs	r2, r3
    228e:	4b2b      	ldr	r3, [pc, #172]	; (233c <STACK_SIZE+0x33c>)
    2290:	429a      	cmp	r2, r3
    2292:	d03c      	beq.n	230e <STACK_SIZE+0x30e>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2294:	4b2a      	ldr	r3, [pc, #168]	; (2340 <STACK_SIZE+0x340>)
    2296:	881a      	ldrh	r2, [r3, #0]
    2298:	4b28      	ldr	r3, [pc, #160]	; (233c <STACK_SIZE+0x33c>)
    229a:	429a      	cmp	r2, r3
    229c:	d037      	beq.n	230e <STACK_SIZE+0x30e>
		ack = false;
	}

	if (ack) {
    229e:	2800      	cmp	r0, #0
    22a0:	d035      	beq.n	230e <STACK_SIZE+0x30e>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    22a2:	4b30      	ldr	r3, [pc, #192]	; (2364 <STACK_SIZE+0x364>)
    22a4:	4798      	blx	r3
    22a6:	1e07      	subs	r7, r0, #0
    22a8:	d031      	beq.n	230e <STACK_SIZE+0x30e>
		return;
	}

	nwkFrameCommandInit(ack);
    22aa:	4b2f      	ldr	r3, [pc, #188]	; (2368 <STACK_SIZE+0x368>)
    22ac:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    22ae:	787b      	ldrb	r3, [r7, #1]
    22b0:	3303      	adds	r3, #3
    22b2:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    22b4:	2200      	movs	r2, #0
    22b6:	2389      	movs	r3, #137	; 0x89
    22b8:	54fa      	strb	r2, [r7, r3]
    22ba:	238a      	movs	r3, #138	; 0x8a
    22bc:	54fa      	strb	r2, [r7, r3]
    22be:	238b      	movs	r3, #139	; 0x8b
    22c0:	54fa      	strb	r2, [r7, r3]
    22c2:	238c      	movs	r3, #140	; 0x8c
    22c4:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    22c6:	7ae2      	ldrb	r2, [r4, #11]
    22c8:	2302      	movs	r3, #2
    22ca:	401a      	ands	r2, r3
    22cc:	7afb      	ldrb	r3, [r7, #11]
    22ce:	2102      	movs	r1, #2
    22d0:	438b      	bics	r3, r1
    22d2:	4313      	orrs	r3, r2
    22d4:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    22d6:	7b62      	ldrb	r2, [r4, #13]
    22d8:	7ba3      	ldrb	r3, [r4, #14]
    22da:	73fa      	strb	r2, [r7, #15]
    22dc:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    22de:	2381      	movs	r3, #129	; 0x81
    22e0:	5cfa      	ldrb	r2, [r7, r3]
    22e2:	2382      	movs	r3, #130	; 0x82
    22e4:	5cfb      	ldrb	r3, [r7, r3]
    22e6:	021b      	lsls	r3, r3, #8
    22e8:	4313      	orrs	r3, r2
    22ea:	2283      	movs	r2, #131	; 0x83
    22ec:	5cba      	ldrb	r2, [r7, r2]
    22ee:	0412      	lsls	r2, r2, #16
    22f0:	4313      	orrs	r3, r2
    22f2:	2284      	movs	r2, #132	; 0x84
    22f4:	5cba      	ldrb	r2, [r7, r2]
    22f6:	0612      	lsls	r2, r2, #24
    22f8:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    22fa:	2200      	movs	r2, #0
    22fc:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    22fe:	4a17      	ldr	r2, [pc, #92]	; (235c <STACK_SIZE+0x35c>)
    2300:	7812      	ldrb	r2, [r2, #0]
    2302:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    2304:	7b22      	ldrb	r2, [r4, #12]
    2306:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    2308:	1c38      	adds	r0, r7, #0
    230a:	4b18      	ldr	r3, [pc, #96]	; (236c <STACK_SIZE+0x36c>)
    230c:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    230e:	2324      	movs	r3, #36	; 0x24
    2310:	7023      	strb	r3, [r4, #0]
    2312:	e006      	b.n	2322 <STACK_SIZE+0x322>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    2314:	1c20      	adds	r0, r4, #0
    2316:	4b16      	ldr	r3, [pc, #88]	; (2370 <STACK_SIZE+0x370>)
    2318:	4798      	blx	r3
		}
		break;
    231a:	e002      	b.n	2322 <STACK_SIZE+0x322>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    231c:	1c20      	adds	r0, r4, #0
    231e:	4b15      	ldr	r3, [pc, #84]	; (2374 <STACK_SIZE+0x374>)
    2320:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2322:	1c20      	adds	r0, r4, #0
    2324:	47a8      	blx	r5
    2326:	1e04      	subs	r4, r0, #0
    2328:	d000      	beq.n	232c <STACK_SIZE+0x32c>
    232a:	e65f      	b.n	1fec <nwkRxTaskHandler+0x18>
    232c:	e02d      	b.n	238a <STACK_SIZE+0x38a>
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	00001afd 	.word	0x00001afd
    2334:	20000598 	.word	0x20000598
    2338:	00004258 	.word	0x00004258
    233c:	0000ffff 	.word	0x0000ffff
    2340:	20000780 	.word	0x20000780
    2344:	00001c4d 	.word	0x00001c4d
    2348:	00001c35 	.word	0x00001c35
    234c:	200005d8 	.word	0x200005d8
    2350:	00002db1 	.word	0x00002db1
    2354:	000027c1 	.word	0x000027c1
    2358:	000023c5 	.word	0x000023c5
    235c:	200005d4 	.word	0x200005d4
    2360:	ffff0001 	.word	0xffff0001
    2364:	00001a79 	.word	0x00001a79
    2368:	00001b39 	.word	0x00001b39
    236c:	00002701 	.word	0x00002701
    2370:	00001dd9 	.word	0x00001dd9
    2374:	00001ae9 	.word	0x00001ae9
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2378:	79e1      	ldrb	r1, [r4, #7]
    237a:	7a22      	ldrb	r2, [r4, #8]
    237c:	0212      	lsls	r2, r2, #8
    237e:	430a      	orrs	r2, r1
    2380:	4b04      	ldr	r3, [pc, #16]	; (2394 <STACK_SIZE+0x394>)
    2382:	429a      	cmp	r2, r3
    2384:	d000      	beq.n	2388 <STACK_SIZE+0x388>
    2386:	e6d7      	b.n	2138 <STACK_SIZE+0x138>
    2388:	e6c8      	b.n	211c <STACK_SIZE+0x11c>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    238a:	b005      	add	sp, #20
    238c:	bc0c      	pop	{r2, r3}
    238e:	4690      	mov	r8, r2
    2390:	4699      	mov	r9, r3
    2392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2394:	0000ffff 	.word	0x0000ffff

00002398 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2398:	2300      	movs	r3, #0
    239a:	4a02      	ldr	r2, [pc, #8]	; (23a4 <nwkSecurityInit+0xc>)
    239c:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    239e:	4a02      	ldr	r2, [pc, #8]	; (23a8 <nwkSecurityInit+0x10>)
    23a0:	6013      	str	r3, [r2, #0]
}
    23a2:	4770      	bx	lr
    23a4:	200005ec 	.word	0x200005ec
    23a8:	200005f0 	.word	0x200005f0

000023ac <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    23ac:	b508      	push	{r3, lr}
    23ae:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    23b0:	4802      	ldr	r0, [pc, #8]	; (23bc <NWK_SetSecurityKey+0x10>)
    23b2:	2210      	movs	r2, #16
    23b4:	4b02      	ldr	r3, [pc, #8]	; (23c0 <NWK_SetSecurityKey+0x14>)
    23b6:	4798      	blx	r3
}
    23b8:	bd08      	pop	{r3, pc}
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	200007c8 	.word	0x200007c8
    23c0:	00004061 	.word	0x00004061

000023c4 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    23c4:	2900      	cmp	r1, #0
    23c6:	d002      	beq.n	23ce <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    23c8:	2330      	movs	r3, #48	; 0x30
    23ca:	7003      	strb	r3, [r0, #0]
    23cc:	e001      	b.n	23d2 <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    23ce:	2331      	movs	r3, #49	; 0x31
    23d0:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    23d2:	4b02      	ldr	r3, [pc, #8]	; (23dc <nwkSecurityProcess+0x18>)
    23d4:	781a      	ldrb	r2, [r3, #0]
    23d6:	3201      	adds	r2, #1
    23d8:	701a      	strb	r2, [r3, #0]
}
    23da:	4770      	bx	lr
    23dc:	200005ec 	.word	0x200005ec

000023e0 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    23e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23e2:	4647      	mov	r7, r8
    23e4:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    23e6:	4b24      	ldr	r3, [pc, #144]	; (2478 <SYS_EncryptConf+0x98>)
    23e8:	681e      	ldr	r6, [r3, #0]
    23ea:	4b24      	ldr	r3, [pc, #144]	; (247c <SYS_EncryptConf+0x9c>)
    23ec:	781b      	ldrb	r3, [r3, #0]
    23ee:	4698      	mov	r8, r3
    23f0:	2381      	movs	r3, #129	; 0x81
    23f2:	5cf3      	ldrb	r3, [r6, r3]
    23f4:	2282      	movs	r2, #130	; 0x82
    23f6:	5cb1      	ldrb	r1, [r6, r2]
    23f8:	0209      	lsls	r1, r1, #8
    23fa:	4319      	orrs	r1, r3
    23fc:	2383      	movs	r3, #131	; 0x83
    23fe:	5cf4      	ldrb	r4, [r6, r3]
    2400:	0424      	lsls	r4, r4, #16
    2402:	4321      	orrs	r1, r4
    2404:	2384      	movs	r3, #132	; 0x84
    2406:	5cf4      	ldrb	r4, [r6, r3]
    2408:	0624      	lsls	r4, r4, #24
    240a:	4321      	orrs	r1, r4
    240c:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    240e:	4b1c      	ldr	r3, [pc, #112]	; (2480 <SYS_EncryptConf+0xa0>)
    2410:	781b      	ldrb	r3, [r3, #0]
    2412:	469c      	mov	ip, r3
    2414:	1c1f      	adds	r7, r3, #0
    2416:	2b10      	cmp	r3, #16
    2418:	d900      	bls.n	241c <SYS_EncryptConf+0x3c>
    241a:	2710      	movs	r7, #16
    241c:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    241e:	2f00      	cmp	r7, #0
    2420:	d016      	beq.n	2450 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    2422:	4b18      	ldr	r3, [pc, #96]	; (2484 <SYS_EncryptConf+0xa4>)
    2424:	781d      	ldrb	r5, [r3, #0]
    2426:	1c0b      	adds	r3, r1, #0
    2428:	4a17      	ldr	r2, [pc, #92]	; (2488 <SYS_EncryptConf+0xa8>)
    242a:	1e7c      	subs	r4, r7, #1
    242c:	b2e4      	uxtb	r4, r4
    242e:	190c      	adds	r4, r1, r4
    2430:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    2432:	7810      	ldrb	r0, [r2, #0]
    2434:	7819      	ldrb	r1, [r3, #0]
    2436:	4041      	eors	r1, r0
    2438:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    243a:	2d00      	cmp	r5, #0
    243c:	d001      	beq.n	2442 <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    243e:	7011      	strb	r1, [r2, #0]
    2440:	e002      	b.n	2448 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    2442:	7810      	ldrb	r0, [r2, #0]
    2444:	4041      	eors	r1, r0
    2446:	7011      	strb	r1, [r2, #0]
    2448:	3301      	adds	r3, #1
    244a:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    244c:	42a3      	cmp	r3, r4
    244e:	d1f0      	bne.n	2432 <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2450:	4643      	mov	r3, r8
    2452:	18fa      	adds	r2, r7, r3
    2454:	4b09      	ldr	r3, [pc, #36]	; (247c <SYS_EncryptConf+0x9c>)
    2456:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    2458:	4663      	mov	r3, ip
    245a:	1bdf      	subs	r7, r3, r7
    245c:	b2ff      	uxtb	r7, r7
    245e:	4b08      	ldr	r3, [pc, #32]	; (2480 <SYS_EncryptConf+0xa0>)
    2460:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    2462:	2f00      	cmp	r7, #0
    2464:	d002      	beq.n	246c <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2466:	2332      	movs	r3, #50	; 0x32
    2468:	7033      	strb	r3, [r6, #0]
    246a:	e001      	b.n	2470 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    246c:	2334      	movs	r3, #52	; 0x34
    246e:	7033      	strb	r3, [r6, #0]
	}
}
    2470:	bc04      	pop	{r2}
    2472:	4690      	mov	r8, r2
    2474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	200005f0 	.word	0x200005f0
    247c:	200005f4 	.word	0x200005f4
    2480:	200005f5 	.word	0x200005f5
    2484:	200005f6 	.word	0x200005f6
    2488:	200005f8 	.word	0x200005f8

0000248c <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    248c:	b530      	push	{r4, r5, lr}
    248e:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    2490:	4b56      	ldr	r3, [pc, #344]	; (25ec <nwkSecurityTaskHandler+0x160>)
    2492:	781b      	ldrb	r3, [r3, #0]
    2494:	2b00      	cmp	r3, #0
    2496:	d100      	bne.n	249a <nwkSecurityTaskHandler+0xe>
    2498:	e0a5      	b.n	25e6 <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    249a:	4b55      	ldr	r3, [pc, #340]	; (25f0 <nwkSecurityTaskHandler+0x164>)
    249c:	681c      	ldr	r4, [r3, #0]
    249e:	2c00      	cmp	r4, #0
    24a0:	d100      	bne.n	24a4 <nwkSecurityTaskHandler+0x18>
    24a2:	e09b      	b.n	25dc <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    24a4:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    24a6:	2b34      	cmp	r3, #52	; 0x34
    24a8:	d145      	bne.n	2536 <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    24aa:	2381      	movs	r3, #129	; 0x81
    24ac:	5ce3      	ldrb	r3, [r4, r3]
    24ae:	2282      	movs	r2, #130	; 0x82
    24b0:	5ca1      	ldrb	r1, [r4, r2]
    24b2:	0209      	lsls	r1, r1, #8
    24b4:	4319      	orrs	r1, r3
    24b6:	2383      	movs	r3, #131	; 0x83
    24b8:	5ce3      	ldrb	r3, [r4, r3]
    24ba:	041b      	lsls	r3, r3, #16
    24bc:	4319      	orrs	r1, r3
    24be:	2384      	movs	r3, #132	; 0x84
    24c0:	5ce3      	ldrb	r3, [r4, r3]
    24c2:	061b      	lsls	r3, r3, #24
    24c4:	4319      	orrs	r1, r3
    24c6:	4b4b      	ldr	r3, [pc, #300]	; (25f4 <nwkSecurityTaskHandler+0x168>)
    24c8:	781b      	ldrb	r3, [r3, #0]
    24ca:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    24cc:	4b4a      	ldr	r3, [pc, #296]	; (25f8 <nwkSecurityTaskHandler+0x16c>)
    24ce:	685d      	ldr	r5, [r3, #4]
    24d0:	681a      	ldr	r2, [r3, #0]
    24d2:	4055      	eors	r5, r2
    24d4:	689a      	ldr	r2, [r3, #8]
    24d6:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    24d8:	68db      	ldr	r3, [r3, #12]
    24da:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    24dc:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    24de:	4b47      	ldr	r3, [pc, #284]	; (25fc <nwkSecurityTaskHandler+0x170>)
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d009      	beq.n	24fa <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    24e6:	1c08      	adds	r0, r1, #0
    24e8:	4669      	mov	r1, sp
    24ea:	2204      	movs	r2, #4
    24ec:	4b44      	ldr	r3, [pc, #272]	; (2600 <nwkSecurityTaskHandler+0x174>)
    24ee:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    24f0:	7863      	ldrb	r3, [r4, #1]
    24f2:	3304      	adds	r3, #4
    24f4:	7063      	strb	r3, [r4, #1]
		return true;
    24f6:	2101      	movs	r1, #1
    24f8:	e008      	b.n	250c <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    24fa:	a801      	add	r0, sp, #4
    24fc:	2204      	movs	r2, #4
    24fe:	4b40      	ldr	r3, [pc, #256]	; (2600 <nwkSecurityTaskHandler+0x174>)
    2500:	4798      	blx	r3
		return vmic == tmic;
    2502:	9b01      	ldr	r3, [sp, #4]
    2504:	1ae9      	subs	r1, r5, r3
    2506:	424d      	negs	r5, r1
    2508:	4169      	adcs	r1, r5
    250a:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    250c:	4b3b      	ldr	r3, [pc, #236]	; (25fc <nwkSecurityTaskHandler+0x170>)
    250e:	781b      	ldrb	r3, [r3, #0]
    2510:	2b00      	cmp	r3, #0
    2512:	d004      	beq.n	251e <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    2514:	4b36      	ldr	r3, [pc, #216]	; (25f0 <nwkSecurityTaskHandler+0x164>)
    2516:	6818      	ldr	r0, [r3, #0]
    2518:	4b3a      	ldr	r3, [pc, #232]	; (2604 <nwkSecurityTaskHandler+0x178>)
    251a:	4798      	blx	r3
    251c:	e003      	b.n	2526 <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    251e:	4b34      	ldr	r3, [pc, #208]	; (25f0 <nwkSecurityTaskHandler+0x164>)
    2520:	6818      	ldr	r0, [r3, #0]
    2522:	4b39      	ldr	r3, [pc, #228]	; (2608 <nwkSecurityTaskHandler+0x17c>)
    2524:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    2526:	2200      	movs	r2, #0
    2528:	4b31      	ldr	r3, [pc, #196]	; (25f0 <nwkSecurityTaskHandler+0x164>)
    252a:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    252c:	4b2f      	ldr	r3, [pc, #188]	; (25ec <nwkSecurityTaskHandler+0x160>)
    252e:	781a      	ldrb	r2, [r3, #0]
    2530:	3a01      	subs	r2, #1
    2532:	701a      	strb	r2, [r3, #0]
    2534:	e057      	b.n	25e6 <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    2536:	2b32      	cmp	r3, #50	; 0x32
    2538:	d155      	bne.n	25e6 <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    253a:	2333      	movs	r3, #51	; 0x33
    253c:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    253e:	482e      	ldr	r0, [pc, #184]	; (25f8 <nwkSecurityTaskHandler+0x16c>)
    2540:	4932      	ldr	r1, [pc, #200]	; (260c <nwkSecurityTaskHandler+0x180>)
    2542:	4b33      	ldr	r3, [pc, #204]	; (2610 <nwkSecurityTaskHandler+0x184>)
    2544:	4798      	blx	r3
    2546:	e04e      	b.n	25e6 <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    2548:	7803      	ldrb	r3, [r0, #0]
    254a:	3b30      	subs	r3, #48	; 0x30
    254c:	2b01      	cmp	r3, #1
    254e:	d847      	bhi.n	25e0 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    2550:	4b27      	ldr	r3, [pc, #156]	; (25f0 <nwkSecurityTaskHandler+0x164>)
    2552:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    2554:	4a28      	ldr	r2, [pc, #160]	; (25f8 <nwkSecurityTaskHandler+0x16c>)
    2556:	7b01      	ldrb	r1, [r0, #12]
    2558:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    255a:	7bc1      	ldrb	r1, [r0, #15]
    255c:	7c04      	ldrb	r4, [r0, #16]
    255e:	0224      	lsls	r4, r4, #8
    2560:	430c      	orrs	r4, r1
    2562:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    2564:	7c41      	ldrb	r1, [r0, #17]
    2566:	0909      	lsrs	r1, r1, #4
    2568:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    256a:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    256c:	7b41      	ldrb	r1, [r0, #13]
    256e:	7b84      	ldrb	r4, [r0, #14]
    2570:	0224      	lsls	r4, r4, #8
    2572:	430c      	orrs	r4, r1
    2574:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    2576:	7c41      	ldrb	r1, [r0, #17]
    2578:	0709      	lsls	r1, r1, #28
    257a:	0f09      	lsrs	r1, r1, #28
    257c:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    257e:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    2580:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2582:	7944      	ldrb	r4, [r0, #5]
    2584:	7983      	ldrb	r3, [r0, #6]
    2586:	021b      	lsls	r3, r3, #8
    2588:	4323      	orrs	r3, r4
    258a:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    258c:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    258e:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    2590:	7803      	ldrb	r3, [r0, #0]
    2592:	2b31      	cmp	r3, #49	; 0x31
    2594:	d102      	bne.n	259c <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    2596:	7843      	ldrb	r3, [r0, #1]
    2598:	3b04      	subs	r3, #4
    259a:	7043      	strb	r3, [r0, #1]
    259c:	1c83      	adds	r3, r0, #2
    259e:	2281      	movs	r2, #129	; 0x81
    25a0:	5c81      	ldrb	r1, [r0, r2]
    25a2:	2282      	movs	r2, #130	; 0x82
    25a4:	5c82      	ldrb	r2, [r0, r2]
    25a6:	0212      	lsls	r2, r2, #8
    25a8:	430a      	orrs	r2, r1
    25aa:	2183      	movs	r1, #131	; 0x83
    25ac:	5c41      	ldrb	r1, [r0, r1]
    25ae:	0409      	lsls	r1, r1, #16
    25b0:	430a      	orrs	r2, r1
    25b2:	2184      	movs	r1, #132	; 0x84
    25b4:	5c41      	ldrb	r1, [r0, r1]
    25b6:	0609      	lsls	r1, r1, #24
    25b8:	430a      	orrs	r2, r1
    25ba:	1a9a      	subs	r2, r3, r2
    25bc:	7843      	ldrb	r3, [r0, #1]
    25be:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    25c0:	4b14      	ldr	r3, [pc, #80]	; (2614 <nwkSecurityTaskHandler+0x188>)
    25c2:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    25c4:	2200      	movs	r2, #0
    25c6:	4b0b      	ldr	r3, [pc, #44]	; (25f4 <nwkSecurityTaskHandler+0x168>)
    25c8:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    25ca:	7802      	ldrb	r2, [r0, #0]
    25cc:	3a30      	subs	r2, #48	; 0x30
    25ce:	4253      	negs	r3, r2
    25d0:	415a      	adcs	r2, r3
    25d2:	4b0a      	ldr	r3, [pc, #40]	; (25fc <nwkSecurityTaskHandler+0x170>)
    25d4:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    25d6:	2332      	movs	r3, #50	; 0x32
    25d8:	7003      	strb	r3, [r0, #0]
    25da:	e004      	b.n	25e6 <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    25dc:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    25de:	4c0e      	ldr	r4, [pc, #56]	; (2618 <nwkSecurityTaskHandler+0x18c>)
    25e0:	47a0      	blx	r4
    25e2:	2800      	cmp	r0, #0
    25e4:	d1b0      	bne.n	2548 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    25e6:	b003      	add	sp, #12
    25e8:	bd30      	pop	{r4, r5, pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	200005ec 	.word	0x200005ec
    25f0:	200005f0 	.word	0x200005f0
    25f4:	200005f4 	.word	0x200005f4
    25f8:	200005f8 	.word	0x200005f8
    25fc:	200005f6 	.word	0x200005f6
    2600:	00004061 	.word	0x00004061
    2604:	00002889 	.word	0x00002889
    2608:	00001fc5 	.word	0x00001fc5
    260c:	200007c8 	.word	0x200007c8
    2610:	00002cb9 	.word	0x00002cb9
    2614:	200005f5 	.word	0x200005f5
    2618:	00001afd 	.word	0x00001afd

0000261c <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    261c:	b5f0      	push	{r4, r5, r6, r7, lr}
    261e:	4647      	mov	r7, r8
    2620:	b480      	push	{r7}
    2622:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2624:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2626:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2628:	4c0f      	ldr	r4, [pc, #60]	; (2668 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    262a:	2686      	movs	r6, #134	; 0x86
    262c:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    262e:	e010      	b.n	2652 <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2630:	7803      	ldrb	r3, [r0, #0]
    2632:	2b11      	cmp	r3, #17
    2634:	d10d      	bne.n	2652 <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2636:	5d82      	ldrb	r2, [r0, r6]
    2638:	5d43      	ldrb	r3, [r0, r5]
    263a:	021b      	lsls	r3, r3, #8
    263c:	4313      	orrs	r3, r2
    263e:	3b01      	subs	r3, #1
    2640:	b29b      	uxth	r3, r3
    2642:	5583      	strb	r3, [r0, r6]
    2644:	0a1a      	lsrs	r2, r3, #8
    2646:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2648:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    264a:	2b00      	cmp	r3, #0
    264c:	d101      	bne.n	2652 <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    264e:	2313      	movs	r3, #19
    2650:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2652:	47a0      	blx	r4
    2654:	2800      	cmp	r0, #0
    2656:	d1eb      	bne.n	2630 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2658:	2f00      	cmp	r7, #0
    265a:	d002      	beq.n	2662 <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    265c:	4640      	mov	r0, r8
    265e:	4b03      	ldr	r3, [pc, #12]	; (266c <nwkTxDelayTimerHandler+0x50>)
    2660:	4798      	blx	r3
	}
}
    2662:	bc04      	pop	{r2}
    2664:	4690      	mov	r8, r2
    2666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2668:	00001afd 	.word	0x00001afd
    266c:	00002db1 	.word	0x00002db1

00002670 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2670:	b5f0      	push	{r4, r5, r6, r7, lr}
    2672:	4647      	mov	r7, r8
    2674:	b480      	push	{r7}
    2676:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2678:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    267a:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    267c:	4c11      	ldr	r4, [pc, #68]	; (26c4 <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    267e:	2686      	movs	r6, #134	; 0x86
    2680:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2682:	e013      	b.n	26ac <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2684:	7803      	ldrb	r3, [r0, #0]
    2686:	2b16      	cmp	r3, #22
    2688:	d110      	bne.n	26ac <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    268a:	5d82      	ldrb	r2, [r0, r6]
    268c:	5d43      	ldrb	r3, [r0, r5]
    268e:	021b      	lsls	r3, r3, #8
    2690:	4313      	orrs	r3, r2
    2692:	3b01      	subs	r3, #1
    2694:	b29b      	uxth	r3, r3
    2696:	5583      	strb	r3, [r0, r6]
    2698:	0a1a      	lsrs	r2, r3, #8
    269a:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    269c:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    269e:	2b00      	cmp	r3, #0
    26a0:	d104      	bne.n	26ac <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    26a2:	2317      	movs	r3, #23
    26a4:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    26a6:	2210      	movs	r2, #16
    26a8:	2385      	movs	r3, #133	; 0x85
    26aa:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    26ac:	47a0      	blx	r4
    26ae:	2800      	cmp	r0, #0
    26b0:	d1e8      	bne.n	2684 <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    26b2:	2f00      	cmp	r7, #0
    26b4:	d002      	beq.n	26bc <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    26b6:	4640      	mov	r0, r8
    26b8:	4b03      	ldr	r3, [pc, #12]	; (26c8 <nwkTxAckWaitTimerHandler+0x58>)
    26ba:	4798      	blx	r3
	}
}
    26bc:	bc04      	pop	{r2}
    26be:	4690      	mov	r8, r2
    26c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	00001afd 	.word	0x00001afd
    26c8:	00002db1 	.word	0x00002db1

000026cc <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    26cc:	2200      	movs	r2, #0
    26ce:	4b07      	ldr	r3, [pc, #28]	; (26ec <nwkTxInit+0x20>)
    26d0:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    26d2:	4b07      	ldr	r3, [pc, #28]	; (26f0 <nwkTxInit+0x24>)
    26d4:	2132      	movs	r1, #50	; 0x32
    26d6:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    26d8:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    26da:	4906      	ldr	r1, [pc, #24]	; (26f4 <nwkTxInit+0x28>)
    26dc:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    26de:	4b06      	ldr	r3, [pc, #24]	; (26f8 <nwkTxInit+0x2c>)
    26e0:	210a      	movs	r1, #10
    26e2:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    26e4:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    26e6:	4a05      	ldr	r2, [pc, #20]	; (26fc <nwkTxInit+0x30>)
    26e8:	611a      	str	r2, [r3, #16]
}
    26ea:	4770      	bx	lr
    26ec:	2000061c 	.word	0x2000061c
    26f0:	20000608 	.word	0x20000608
    26f4:	00002671 	.word	0x00002671
    26f8:	20000620 	.word	0x20000620
    26fc:	0000261d 	.word	0x0000261d

00002700 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    2700:	b510      	push	{r4, lr}
    2702:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    2704:	2388      	movs	r3, #136	; 0x88
    2706:	5cc3      	ldrb	r3, [r0, r3]
    2708:	0799      	lsls	r1, r3, #30
    270a:	d502      	bpl.n	2712 <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    270c:	2212      	movs	r2, #18
    270e:	7002      	strb	r2, [r0, #0]
    2710:	e007      	b.n	2722 <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    2712:	7ac2      	ldrb	r2, [r0, #11]
    2714:	0791      	lsls	r1, r2, #30
    2716:	d502      	bpl.n	271e <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    2718:	2210      	movs	r2, #16
    271a:	7002      	strb	r2, [r0, #0]
    271c:	e001      	b.n	2722 <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    271e:	2212      	movs	r2, #18
    2720:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    2722:	2100      	movs	r1, #0
    2724:	2285      	movs	r2, #133	; 0x85
    2726:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    2728:	07da      	lsls	r2, r3, #31
    272a:	d504      	bpl.n	2736 <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    272c:	2101      	movs	r1, #1
    272e:	4249      	negs	r1, r1
    2730:	7161      	strb	r1, [r4, #5]
    2732:	71a1      	strb	r1, [r4, #6]
    2734:	e004      	b.n	2740 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    2736:	491e      	ldr	r1, [pc, #120]	; (27b0 <nwkTxFrame+0xb0>)
    2738:	7888      	ldrb	r0, [r1, #2]
    273a:	7160      	strb	r0, [r4, #5]
    273c:	78c9      	ldrb	r1, [r1, #3]
    273e:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    2740:	2205      	movs	r2, #5
    2742:	421a      	tst	r2, r3
    2744:	d103      	bne.n	274e <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    2746:	1c20      	adds	r0, r4, #0
    2748:	4b1a      	ldr	r3, [pc, #104]	; (27b4 <nwkTxFrame+0xb4>)
    274a:	4798      	blx	r3
    274c:	e003      	b.n	2756 <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    274e:	7be1      	ldrb	r1, [r4, #15]
    2750:	7c22      	ldrb	r2, [r4, #16]
    2752:	71e1      	strb	r1, [r4, #7]
    2754:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    2756:	4a16      	ldr	r2, [pc, #88]	; (27b0 <nwkTxFrame+0xb0>)
    2758:	7811      	ldrb	r1, [r2, #0]
    275a:	7261      	strb	r1, [r4, #9]
    275c:	7851      	ldrb	r1, [r2, #1]
    275e:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    2760:	7951      	ldrb	r1, [r2, #5]
    2762:	3101      	adds	r1, #1
    2764:	b2c9      	uxtb	r1, r1
    2766:	7151      	strb	r1, [r2, #5]
    2768:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    276a:	79e1      	ldrb	r1, [r4, #7]
    276c:	7a22      	ldrb	r2, [r4, #8]
    276e:	0212      	lsls	r2, r2, #8
    2770:	430a      	orrs	r2, r1
    2772:	4b11      	ldr	r3, [pc, #68]	; (27b8 <nwkTxFrame+0xb8>)
    2774:	429a      	cmp	r2, r3
    2776:	d110      	bne.n	279a <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    2778:	2341      	movs	r3, #65	; 0x41
    277a:	70a3      	strb	r3, [r4, #2]
    277c:	2378      	movs	r3, #120	; 0x78
    277e:	425b      	negs	r3, r3
    2780:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2782:	4b0e      	ldr	r3, [pc, #56]	; (27bc <nwkTxFrame+0xbc>)
    2784:	4798      	blx	r3
    2786:	2307      	movs	r3, #7
    2788:	4018      	ands	r0, r3
    278a:	3001      	adds	r0, #1
    278c:	2386      	movs	r3, #134	; 0x86
    278e:	54e0      	strb	r0, [r4, r3]
    2790:	0a00      	lsrs	r0, r0, #8
    2792:	b280      	uxth	r0, r0
    2794:	2387      	movs	r3, #135	; 0x87
    2796:	54e0      	strb	r0, [r4, r3]
    2798:	e009      	b.n	27ae <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    279a:	2361      	movs	r3, #97	; 0x61
    279c:	70a3      	strb	r3, [r4, #2]
    279e:	2378      	movs	r3, #120	; 0x78
    27a0:	425b      	negs	r3, r3
    27a2:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    27a4:	2200      	movs	r2, #0
    27a6:	2386      	movs	r3, #134	; 0x86
    27a8:	54e2      	strb	r2, [r4, r3]
    27aa:	2387      	movs	r3, #135	; 0x87
    27ac:	54e2      	strb	r2, [r4, r3]
	}
}
    27ae:	bd10      	pop	{r4, pc}
    27b0:	20000780 	.word	0x20000780
    27b4:	00001d91 	.word	0x00001d91
    27b8:	0000ffff 	.word	0x0000ffff
    27bc:	00004089 	.word	0x00004089

000027c0 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    27c0:	b538      	push	{r3, r4, r5, lr}
    27c2:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    27c4:	4b1d      	ldr	r3, [pc, #116]	; (283c <nwkTxBroadcastFrame+0x7c>)
    27c6:	4798      	blx	r3
    27c8:	1e04      	subs	r4, r0, #0
    27ca:	d036      	beq.n	283a <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    27cc:	2312      	movs	r3, #18
    27ce:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    27d0:	786b      	ldrb	r3, [r5, #1]
    27d2:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    27d4:	2200      	movs	r2, #0
    27d6:	2385      	movs	r3, #133	; 0x85
    27d8:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    27da:	4b19      	ldr	r3, [pc, #100]	; (2840 <nwkTxBroadcastFrame+0x80>)
    27dc:	4798      	blx	r3
    27de:	2307      	movs	r3, #7
    27e0:	4018      	ands	r0, r3
    27e2:	3001      	adds	r0, #1
    27e4:	2386      	movs	r3, #134	; 0x86
    27e6:	54e0      	strb	r0, [r4, r3]
    27e8:	0a00      	lsrs	r0, r0, #8
    27ea:	b280      	uxth	r0, r0
    27ec:	2387      	movs	r3, #135	; 0x87
    27ee:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    27f0:	2200      	movs	r2, #0
    27f2:	2389      	movs	r3, #137	; 0x89
    27f4:	54e2      	strb	r2, [r4, r3]
    27f6:	238a      	movs	r3, #138	; 0x8a
    27f8:	54e2      	strb	r2, [r4, r3]
    27fa:	238b      	movs	r3, #139	; 0x8b
    27fc:	54e2      	strb	r2, [r4, r3]
    27fe:	238c      	movs	r3, #140	; 0x8c
    2800:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    2802:	1ca0      	adds	r0, r4, #2
    2804:	786a      	ldrb	r2, [r5, #1]
    2806:	1ca9      	adds	r1, r5, #2
    2808:	4b0e      	ldr	r3, [pc, #56]	; (2844 <nwkTxBroadcastFrame+0x84>)
    280a:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    280c:	2341      	movs	r3, #65	; 0x41
    280e:	70a3      	strb	r3, [r4, #2]
    2810:	2378      	movs	r3, #120	; 0x78
    2812:	425b      	negs	r3, r3
    2814:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    2816:	2301      	movs	r3, #1
    2818:	425b      	negs	r3, r3
    281a:	71e3      	strb	r3, [r4, #7]
    281c:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    281e:	796a      	ldrb	r2, [r5, #5]
    2820:	79ab      	ldrb	r3, [r5, #6]
    2822:	7162      	strb	r2, [r4, #5]
    2824:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    2826:	4b08      	ldr	r3, [pc, #32]	; (2848 <nwkTxBroadcastFrame+0x88>)
    2828:	781a      	ldrb	r2, [r3, #0]
    282a:	7262      	strb	r2, [r4, #9]
    282c:	785a      	ldrb	r2, [r3, #1]
    282e:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    2830:	795a      	ldrb	r2, [r3, #5]
    2832:	3201      	adds	r2, #1
    2834:	b2d2      	uxtb	r2, r2
    2836:	715a      	strb	r2, [r3, #5]
    2838:	7122      	strb	r2, [r4, #4]
}
    283a:	bd38      	pop	{r3, r4, r5, pc}
    283c:	00001a79 	.word	0x00001a79
    2840:	00004089 	.word	0x00004089
    2844:	00004061 	.word	0x00004061
    2848:	20000780 	.word	0x20000780

0000284c <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    284c:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    284e:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2850:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2852:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2854:	2b03      	cmp	r3, #3
    2856:	d113      	bne.n	2880 <nwkTxAckReceived+0x34>
    2858:	e00d      	b.n	2876 <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    285a:	7803      	ldrb	r3, [r0, #0]
    285c:	2b16      	cmp	r3, #22
    285e:	d10c      	bne.n	287a <nwkTxAckReceived+0x2e>
    2860:	7b02      	ldrb	r2, [r0, #12]
    2862:	786b      	ldrb	r3, [r5, #1]
    2864:	429a      	cmp	r2, r3
    2866:	d108      	bne.n	287a <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2868:	2317      	movs	r3, #23
    286a:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    286c:	78aa      	ldrb	r2, [r5, #2]
    286e:	2388      	movs	r3, #136	; 0x88
    2870:	54c2      	strb	r2, [r0, r3]
			return true;
    2872:	2001      	movs	r0, #1
    2874:	e004      	b.n	2880 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2876:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2878:	4c02      	ldr	r4, [pc, #8]	; (2884 <nwkTxAckReceived+0x38>)
    287a:	47a0      	blx	r4
    287c:	2800      	cmp	r0, #0
    287e:	d1ec      	bne.n	285a <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    2880:	bd38      	pop	{r3, r4, r5, pc}
    2882:	46c0      	nop			; (mov r8, r8)
    2884:	00001afd 	.word	0x00001afd

00002888 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    2888:	2312      	movs	r3, #18
    288a:	7003      	strb	r3, [r0, #0]
}
    288c:	4770      	bx	lr
    288e:	46c0      	nop			; (mov r8, r8)

00002890 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2890:	4b0d      	ldr	r3, [pc, #52]	; (28c8 <PHY_DataConf+0x38>)
    2892:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    2894:	2801      	cmp	r0, #1
    2896:	d009      	beq.n	28ac <PHY_DataConf+0x1c>
    2898:	2800      	cmp	r0, #0
    289a:	d003      	beq.n	28a4 <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    289c:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    289e:	2802      	cmp	r0, #2
    28a0:	d005      	beq.n	28ae <PHY_DataConf+0x1e>
    28a2:	e001      	b.n	28a8 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    28a4:	2200      	movs	r2, #0
    28a6:	e002      	b.n	28ae <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    28a8:	2201      	movs	r2, #1
    28aa:	e000      	b.n	28ae <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    28ac:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    28ae:	2185      	movs	r1, #133	; 0x85
    28b0:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    28b2:	2215      	movs	r2, #21
    28b4:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    28b6:	2200      	movs	r2, #0
    28b8:	4b03      	ldr	r3, [pc, #12]	; (28c8 <PHY_DataConf+0x38>)
    28ba:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    28bc:	4a03      	ldr	r2, [pc, #12]	; (28cc <PHY_DataConf+0x3c>)
    28be:	2358      	movs	r3, #88	; 0x58
    28c0:	5ad1      	ldrh	r1, [r2, r3]
    28c2:	3901      	subs	r1, #1
    28c4:	52d1      	strh	r1, [r2, r3]
}
    28c6:	4770      	bx	lr
    28c8:	2000061c 	.word	0x2000061c
    28cc:	20000780 	.word	0x20000780

000028d0 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    28d0:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    28d2:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    28d4:	4d37      	ldr	r5, [pc, #220]	; (29b4 <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    28d6:	4e38      	ldr	r6, [pc, #224]	; (29b8 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    28d8:	e066      	b.n	29a8 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    28da:	7823      	ldrb	r3, [r4, #0]
    28dc:	3b10      	subs	r3, #16
    28de:	b2da      	uxtb	r2, r3
    28e0:	2a07      	cmp	r2, #7
    28e2:	d861      	bhi.n	29a8 <nwkTxTaskHandler+0xd8>
    28e4:	0093      	lsls	r3, r2, #2
    28e6:	58f3      	ldr	r3, [r6, r3]
    28e8:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    28ea:	1c20      	adds	r0, r4, #0
    28ec:	2101      	movs	r1, #1
    28ee:	4b33      	ldr	r3, [pc, #204]	; (29bc <nwkTxTaskHandler+0xec>)
    28f0:	4798      	blx	r3
		}
		break;
    28f2:	e059      	b.n	29a8 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    28f4:	2386      	movs	r3, #134	; 0x86
    28f6:	5ce2      	ldrb	r2, [r4, r3]
    28f8:	2387      	movs	r3, #135	; 0x87
    28fa:	5ce3      	ldrb	r3, [r4, r3]
    28fc:	021b      	lsls	r3, r3, #8
    28fe:	4313      	orrs	r3, r2
    2900:	d005      	beq.n	290e <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    2902:	2311      	movs	r3, #17
    2904:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    2906:	482e      	ldr	r0, [pc, #184]	; (29c0 <nwkTxTaskHandler+0xf0>)
    2908:	4b2e      	ldr	r3, [pc, #184]	; (29c4 <nwkTxTaskHandler+0xf4>)
    290a:	4798      	blx	r3
    290c:	e04c      	b.n	29a8 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    290e:	2313      	movs	r3, #19
    2910:	7023      	strb	r3, [r4, #0]
    2912:	e049      	b.n	29a8 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    2914:	4b2c      	ldr	r3, [pc, #176]	; (29c8 <nwkTxTaskHandler+0xf8>)
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d145      	bne.n	29a8 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    291c:	4b2a      	ldr	r3, [pc, #168]	; (29c8 <nwkTxTaskHandler+0xf8>)
    291e:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2920:	2314      	movs	r3, #20
    2922:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    2924:	1c60      	adds	r0, r4, #1
    2926:	4b29      	ldr	r3, [pc, #164]	; (29cc <nwkTxTaskHandler+0xfc>)
    2928:	4798      	blx	r3
				nwkIb.lock++;
    292a:	4a29      	ldr	r2, [pc, #164]	; (29d0 <nwkTxTaskHandler+0x100>)
    292c:	2358      	movs	r3, #88	; 0x58
    292e:	5ad1      	ldrh	r1, [r2, r3]
    2930:	3101      	adds	r1, #1
    2932:	52d1      	strh	r1, [r2, r3]
    2934:	e038      	b.n	29a8 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2936:	2385      	movs	r3, #133	; 0x85
    2938:	5ce3      	ldrb	r3, [r4, r3]
    293a:	2b00      	cmp	r3, #0
    293c:	d119      	bne.n	2972 <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    293e:	7b61      	ldrb	r1, [r4, #13]
    2940:	7ba3      	ldrb	r3, [r4, #14]
    2942:	021b      	lsls	r3, r3, #8
    2944:	4a22      	ldr	r2, [pc, #136]	; (29d0 <nwkTxTaskHandler+0x100>)
    2946:	8812      	ldrh	r2, [r2, #0]
    2948:	430b      	orrs	r3, r1
    294a:	429a      	cmp	r2, r3
    294c:	d10e      	bne.n	296c <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    294e:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    2950:	07da      	lsls	r2, r3, #31
    2952:	d50b      	bpl.n	296c <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    2954:	2316      	movs	r3, #22
    2956:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2958:	2215      	movs	r2, #21
    295a:	2386      	movs	r3, #134	; 0x86
    295c:	54e2      	strb	r2, [r4, r3]
    295e:	2200      	movs	r2, #0
    2960:	2387      	movs	r3, #135	; 0x87
    2962:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    2964:	481b      	ldr	r0, [pc, #108]	; (29d4 <nwkTxTaskHandler+0x104>)
    2966:	4b17      	ldr	r3, [pc, #92]	; (29c4 <nwkTxTaskHandler+0xf4>)
    2968:	4798      	blx	r3
    296a:	e01d      	b.n	29a8 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    296c:	2317      	movs	r3, #23
    296e:	7023      	strb	r3, [r4, #0]
    2970:	e01a      	b.n	29a8 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    2972:	2317      	movs	r3, #23
    2974:	7023      	strb	r3, [r4, #0]
    2976:	e017      	b.n	29a8 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    2978:	1c20      	adds	r0, r4, #0
    297a:	4b17      	ldr	r3, [pc, #92]	; (29d8 <nwkTxTaskHandler+0x108>)
    297c:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    297e:	2389      	movs	r3, #137	; 0x89
    2980:	5ce2      	ldrb	r2, [r4, r3]
    2982:	238a      	movs	r3, #138	; 0x8a
    2984:	5ce3      	ldrb	r3, [r4, r3]
    2986:	021b      	lsls	r3, r3, #8
    2988:	4313      	orrs	r3, r2
    298a:	228b      	movs	r2, #139	; 0x8b
    298c:	5ca2      	ldrb	r2, [r4, r2]
    298e:	0412      	lsls	r2, r2, #16
    2990:	4313      	orrs	r3, r2
    2992:	228c      	movs	r2, #140	; 0x8c
    2994:	5ca2      	ldrb	r2, [r4, r2]
    2996:	0612      	lsls	r2, r2, #24
    2998:	4313      	orrs	r3, r2
    299a:	d103      	bne.n	29a4 <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    299c:	1c20      	adds	r0, r4, #0
    299e:	4b0f      	ldr	r3, [pc, #60]	; (29dc <nwkTxTaskHandler+0x10c>)
    29a0:	4798      	blx	r3
    29a2:	e001      	b.n	29a8 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    29a4:	1c20      	adds	r0, r4, #0
    29a6:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    29a8:	1c20      	adds	r0, r4, #0
    29aa:	47a8      	blx	r5
    29ac:	1e04      	subs	r4, r0, #0
    29ae:	d194      	bne.n	28da <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    29b0:	bd70      	pop	{r4, r5, r6, pc}
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	00001afd 	.word	0x00001afd
    29b8:	0000426c 	.word	0x0000426c
    29bc:	000023c5 	.word	0x000023c5
    29c0:	20000620 	.word	0x20000620
    29c4:	00002db1 	.word	0x00002db1
    29c8:	2000061c 	.word	0x2000061c
    29cc:	00002b45 	.word	0x00002b45
    29d0:	20000780 	.word	0x20000780
    29d4:	20000608 	.word	0x20000608
    29d8:	00001d01 	.word	0x00001d01
    29dc:	00001ae9 	.word	0x00001ae9

000029e0 <phyTrxSetState>:
    29e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29e2:	1c04      	adds	r4, r0, #0
    29e4:	4f0b      	ldr	r7, [pc, #44]	; (2a14 <phyTrxSetState+0x34>)
    29e6:	4e0c      	ldr	r6, [pc, #48]	; (2a18 <phyTrxSetState+0x38>)
    29e8:	251f      	movs	r5, #31
    29ea:	2002      	movs	r0, #2
    29ec:	2103      	movs	r1, #3
    29ee:	47b8      	blx	r7
    29f0:	2001      	movs	r0, #1
    29f2:	47b0      	blx	r6
    29f4:	4028      	ands	r0, r5
    29f6:	2808      	cmp	r0, #8
    29f8:	d1f7      	bne.n	29ea <phyTrxSetState+0xa>
    29fa:	4f06      	ldr	r7, [pc, #24]	; (2a14 <phyTrxSetState+0x34>)
    29fc:	4e06      	ldr	r6, [pc, #24]	; (2a18 <phyTrxSetState+0x38>)
    29fe:	251f      	movs	r5, #31
    2a00:	2002      	movs	r0, #2
    2a02:	1c21      	adds	r1, r4, #0
    2a04:	47b8      	blx	r7
    2a06:	2001      	movs	r0, #1
    2a08:	47b0      	blx	r6
    2a0a:	4028      	ands	r0, r5
    2a0c:	4284      	cmp	r4, r0
    2a0e:	d1f7      	bne.n	2a00 <phyTrxSetState+0x20>
    2a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	000033e1 	.word	0x000033e1
    2a18:	000032e9 	.word	0x000032e9

00002a1c <phySetRxState>:
    2a1c:	b508      	push	{r3, lr}
    2a1e:	2008      	movs	r0, #8
    2a20:	4b06      	ldr	r3, [pc, #24]	; (2a3c <phySetRxState+0x20>)
    2a22:	4798      	blx	r3
    2a24:	200f      	movs	r0, #15
    2a26:	4b06      	ldr	r3, [pc, #24]	; (2a40 <phySetRxState+0x24>)
    2a28:	4798      	blx	r3
    2a2a:	4b06      	ldr	r3, [pc, #24]	; (2a44 <phySetRxState+0x28>)
    2a2c:	781b      	ldrb	r3, [r3, #0]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d002      	beq.n	2a38 <phySetRxState+0x1c>
    2a32:	2016      	movs	r0, #22
    2a34:	4b01      	ldr	r3, [pc, #4]	; (2a3c <phySetRxState+0x20>)
    2a36:	4798      	blx	r3
    2a38:	bd08      	pop	{r3, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	000029e1 	.word	0x000029e1
    2a40:	000032e9 	.word	0x000032e9
    2a44:	200006b5 	.word	0x200006b5

00002a48 <PHY_Init>:
    2a48:	b570      	push	{r4, r5, r6, lr}
    2a4a:	4b0e      	ldr	r3, [pc, #56]	; (2a84 <PHY_Init+0x3c>)
    2a4c:	4798      	blx	r3
    2a4e:	4b0e      	ldr	r3, [pc, #56]	; (2a88 <PHY_Init+0x40>)
    2a50:	4798      	blx	r3
    2a52:	2200      	movs	r2, #0
    2a54:	4b0d      	ldr	r3, [pc, #52]	; (2a8c <PHY_Init+0x44>)
    2a56:	701a      	strb	r2, [r3, #0]
    2a58:	2201      	movs	r2, #1
    2a5a:	4b0d      	ldr	r3, [pc, #52]	; (2a90 <PHY_Init+0x48>)
    2a5c:	701a      	strb	r2, [r3, #0]
    2a5e:	4e0d      	ldr	r6, [pc, #52]	; (2a94 <PHY_Init+0x4c>)
    2a60:	4d0d      	ldr	r5, [pc, #52]	; (2a98 <PHY_Init+0x50>)
    2a62:	241f      	movs	r4, #31
    2a64:	2002      	movs	r0, #2
    2a66:	2108      	movs	r1, #8
    2a68:	47b0      	blx	r6
    2a6a:	2001      	movs	r0, #1
    2a6c:	47a8      	blx	r5
    2a6e:	4020      	ands	r0, r4
    2a70:	2808      	cmp	r0, #8
    2a72:	d1f7      	bne.n	2a64 <PHY_Init+0x1c>
    2a74:	2004      	movs	r0, #4
    2a76:	212e      	movs	r1, #46	; 0x2e
    2a78:	4c06      	ldr	r4, [pc, #24]	; (2a94 <PHY_Init+0x4c>)
    2a7a:	47a0      	blx	r4
    2a7c:	200c      	movs	r0, #12
    2a7e:	21a0      	movs	r1, #160	; 0xa0
    2a80:	47a0      	blx	r4
    2a82:	bd70      	pop	{r4, r5, r6, pc}
    2a84:	000031a9 	.word	0x000031a9
    2a88:	000032b9 	.word	0x000032b9
    2a8c:	200006b5 	.word	0x200006b5
    2a90:	200006b4 	.word	0x200006b4
    2a94:	000033e1 	.word	0x000033e1
    2a98:	000032e9 	.word	0x000032e9

00002a9c <PHY_SetRxState>:
    2a9c:	b508      	push	{r3, lr}
    2a9e:	4b02      	ldr	r3, [pc, #8]	; (2aa8 <PHY_SetRxState+0xc>)
    2aa0:	7018      	strb	r0, [r3, #0]
    2aa2:	4b02      	ldr	r3, [pc, #8]	; (2aac <PHY_SetRxState+0x10>)
    2aa4:	4798      	blx	r3
    2aa6:	bd08      	pop	{r3, pc}
    2aa8:	200006b5 	.word	0x200006b5
    2aac:	00002a1d 	.word	0x00002a1d

00002ab0 <PHY_SetChannel>:
    2ab0:	b510      	push	{r4, lr}
    2ab2:	1c04      	adds	r4, r0, #0
    2ab4:	2008      	movs	r0, #8
    2ab6:	4b05      	ldr	r3, [pc, #20]	; (2acc <PHY_SetChannel+0x1c>)
    2ab8:	4798      	blx	r3
    2aba:	231f      	movs	r3, #31
    2abc:	1c01      	adds	r1, r0, #0
    2abe:	4399      	bics	r1, r3
    2ac0:	430c      	orrs	r4, r1
    2ac2:	b2e1      	uxtb	r1, r4
    2ac4:	2008      	movs	r0, #8
    2ac6:	4b02      	ldr	r3, [pc, #8]	; (2ad0 <PHY_SetChannel+0x20>)
    2ac8:	4798      	blx	r3
    2aca:	bd10      	pop	{r4, pc}
    2acc:	000032e9 	.word	0x000032e9
    2ad0:	000033e1 	.word	0x000033e1

00002ad4 <PHY_SetPanId>:
    2ad4:	b530      	push	{r4, r5, lr}
    2ad6:	b083      	sub	sp, #12
    2ad8:	466c      	mov	r4, sp
    2ada:	80e0      	strh	r0, [r4, #6]
    2adc:	b2c1      	uxtb	r1, r0
    2ade:	2022      	movs	r0, #34	; 0x22
    2ae0:	4d03      	ldr	r5, [pc, #12]	; (2af0 <PHY_SetPanId+0x1c>)
    2ae2:	47a8      	blx	r5
    2ae4:	79e1      	ldrb	r1, [r4, #7]
    2ae6:	2023      	movs	r0, #35	; 0x23
    2ae8:	47a8      	blx	r5
    2aea:	b003      	add	sp, #12
    2aec:	bd30      	pop	{r4, r5, pc}
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	000033e1 	.word	0x000033e1

00002af4 <PHY_SetShortAddr>:
    2af4:	b570      	push	{r4, r5, r6, lr}
    2af6:	b082      	sub	sp, #8
    2af8:	466d      	mov	r5, sp
    2afa:	80e8      	strh	r0, [r5, #6]
    2afc:	3506      	adds	r5, #6
    2afe:	b2c6      	uxtb	r6, r0
    2b00:	2020      	movs	r0, #32
    2b02:	1c31      	adds	r1, r6, #0
    2b04:	4c05      	ldr	r4, [pc, #20]	; (2b1c <PHY_SetShortAddr+0x28>)
    2b06:	47a0      	blx	r4
    2b08:	786d      	ldrb	r5, [r5, #1]
    2b0a:	2021      	movs	r0, #33	; 0x21
    2b0c:	1c29      	adds	r1, r5, #0
    2b0e:	47a0      	blx	r4
    2b10:	19ae      	adds	r6, r5, r6
    2b12:	b2f1      	uxtb	r1, r6
    2b14:	202d      	movs	r0, #45	; 0x2d
    2b16:	47a0      	blx	r4
    2b18:	b002      	add	sp, #8
    2b1a:	bd70      	pop	{r4, r5, r6, pc}
    2b1c:	000033e1 	.word	0x000033e1

00002b20 <PHY_SetTxPower>:
    2b20:	b510      	push	{r4, lr}
    2b22:	1c04      	adds	r4, r0, #0
    2b24:	2005      	movs	r0, #5
    2b26:	4b05      	ldr	r3, [pc, #20]	; (2b3c <PHY_SetTxPower+0x1c>)
    2b28:	4798      	blx	r3
    2b2a:	230f      	movs	r3, #15
    2b2c:	1c01      	adds	r1, r0, #0
    2b2e:	4399      	bics	r1, r3
    2b30:	430c      	orrs	r4, r1
    2b32:	b2e1      	uxtb	r1, r4
    2b34:	2005      	movs	r0, #5
    2b36:	4b02      	ldr	r3, [pc, #8]	; (2b40 <PHY_SetTxPower+0x20>)
    2b38:	4798      	blx	r3
    2b3a:	bd10      	pop	{r4, pc}
    2b3c:	000032e9 	.word	0x000032e9
    2b40:	000033e1 	.word	0x000033e1

00002b44 <PHY_DataReq>:
    2b44:	b510      	push	{r4, lr}
    2b46:	1c04      	adds	r4, r0, #0
    2b48:	2019      	movs	r0, #25
    2b4a:	4b0c      	ldr	r3, [pc, #48]	; (2b7c <PHY_DataReq+0x38>)
    2b4c:	4798      	blx	r3
    2b4e:	200f      	movs	r0, #15
    2b50:	4b0b      	ldr	r3, [pc, #44]	; (2b80 <PHY_DataReq+0x3c>)
    2b52:	4798      	blx	r3
    2b54:	7821      	ldrb	r1, [r4, #0]
    2b56:	1c8b      	adds	r3, r1, #2
    2b58:	7023      	strb	r3, [r4, #0]
    2b5a:	3101      	adds	r1, #1
    2b5c:	b2c9      	uxtb	r1, r1
    2b5e:	1c20      	adds	r0, r4, #0
    2b60:	4b08      	ldr	r3, [pc, #32]	; (2b84 <PHY_DataReq+0x40>)
    2b62:	4798      	blx	r3
    2b64:	2203      	movs	r2, #3
    2b66:	4b08      	ldr	r3, [pc, #32]	; (2b88 <PHY_DataReq+0x44>)
    2b68:	701a      	strb	r2, [r3, #0]
    2b6a:	4b08      	ldr	r3, [pc, #32]	; (2b8c <PHY_DataReq+0x48>)
    2b6c:	2280      	movs	r2, #128	; 0x80
    2b6e:	0352      	lsls	r2, r2, #13
    2b70:	619a      	str	r2, [r3, #24]
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	46c0      	nop			; (mov r8, r8)
    2b76:	615a      	str	r2, [r3, #20]
    2b78:	bd10      	pop	{r4, pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	000029e1 	.word	0x000029e1
    2b80:	000032e9 	.word	0x000032e9
    2b84:	0000361d 	.word	0x0000361d
    2b88:	200006b4 	.word	0x200006b4
    2b8c:	41004400 	.word	0x41004400

00002b90 <PHY_EncryptReq>:
    2b90:	b510      	push	{r4, lr}
    2b92:	1c04      	adds	r4, r0, #0
    2b94:	1c08      	adds	r0, r1, #0
    2b96:	2100      	movs	r1, #0
    2b98:	2200      	movs	r2, #0
    2b9a:	4b05      	ldr	r3, [pc, #20]	; (2bb0 <PHY_EncryptReq+0x20>)
    2b9c:	4798      	blx	r3
    2b9e:	1c20      	adds	r0, r4, #0
    2ba0:	2100      	movs	r1, #0
    2ba2:	4b04      	ldr	r3, [pc, #16]	; (2bb4 <PHY_EncryptReq+0x24>)
    2ba4:	4798      	blx	r3
    2ba6:	1c20      	adds	r0, r4, #0
    2ba8:	4b03      	ldr	r3, [pc, #12]	; (2bb8 <PHY_EncryptReq+0x28>)
    2baa:	4798      	blx	r3
    2bac:	bd10      	pop	{r4, pc}
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	00003041 	.word	0x00003041
    2bb4:	00002fd5 	.word	0x00002fd5
    2bb8:	00003179 	.word	0x00003179

00002bbc <PHY_TaskHandler>:
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bbe:	b085      	sub	sp, #20
    2bc0:	4b26      	ldr	r3, [pc, #152]	; (2c5c <PHY_TaskHandler+0xa0>)
    2bc2:	781b      	ldrb	r3, [r3, #0]
    2bc4:	2b02      	cmp	r3, #2
    2bc6:	d046      	beq.n	2c56 <PHY_TaskHandler+0x9a>
    2bc8:	200f      	movs	r0, #15
    2bca:	4b25      	ldr	r3, [pc, #148]	; (2c60 <PHY_TaskHandler+0xa4>)
    2bcc:	4798      	blx	r3
    2bce:	0703      	lsls	r3, r0, #28
    2bd0:	d541      	bpl.n	2c56 <PHY_TaskHandler+0x9a>
    2bd2:	4b22      	ldr	r3, [pc, #136]	; (2c5c <PHY_TaskHandler+0xa0>)
    2bd4:	781b      	ldrb	r3, [r3, #0]
    2bd6:	2b01      	cmp	r3, #1
    2bd8:	d124      	bne.n	2c24 <PHY_TaskHandler+0x68>
    2bda:	2007      	movs	r0, #7
    2bdc:	4b20      	ldr	r3, [pc, #128]	; (2c60 <PHY_TaskHandler+0xa4>)
    2bde:	4798      	blx	r3
    2be0:	1c07      	adds	r7, r0, #0
    2be2:	466c      	mov	r4, sp
    2be4:	3407      	adds	r4, #7
    2be6:	1c20      	adds	r0, r4, #0
    2be8:	2101      	movs	r1, #1
    2bea:	4e1e      	ldr	r6, [pc, #120]	; (2c64 <PHY_TaskHandler+0xa8>)
    2bec:	47b0      	blx	r6
    2bee:	4d1e      	ldr	r5, [pc, #120]	; (2c68 <PHY_TaskHandler+0xac>)
    2bf0:	7821      	ldrb	r1, [r4, #0]
    2bf2:	3102      	adds	r1, #2
    2bf4:	b2c9      	uxtb	r1, r1
    2bf6:	1c28      	adds	r0, r5, #0
    2bf8:	47b0      	blx	r6
    2bfa:	a802      	add	r0, sp, #8
    2bfc:	1c6a      	adds	r2, r5, #1
    2bfe:	9202      	str	r2, [sp, #8]
    2c00:	7822      	ldrb	r2, [r4, #0]
    2c02:	1e91      	subs	r1, r2, #2
    2c04:	7101      	strb	r1, [r0, #4]
    2c06:	18ad      	adds	r5, r5, r2
    2c08:	786a      	ldrb	r2, [r5, #1]
    2c0a:	7142      	strb	r2, [r0, #5]
    2c0c:	3f5b      	subs	r7, #91	; 0x5b
    2c0e:	7187      	strb	r7, [r0, #6]
    2c10:	4b16      	ldr	r3, [pc, #88]	; (2c6c <PHY_TaskHandler+0xb0>)
    2c12:	4798      	blx	r3
    2c14:	4d12      	ldr	r5, [pc, #72]	; (2c60 <PHY_TaskHandler+0xa4>)
    2c16:	241f      	movs	r4, #31
    2c18:	2001      	movs	r0, #1
    2c1a:	47a8      	blx	r5
    2c1c:	4020      	ands	r0, r4
    2c1e:	2816      	cmp	r0, #22
    2c20:	d1fa      	bne.n	2c18 <PHY_TaskHandler+0x5c>
    2c22:	e018      	b.n	2c56 <PHY_TaskHandler+0x9a>
    2c24:	2b03      	cmp	r3, #3
    2c26:	d116      	bne.n	2c56 <PHY_TaskHandler+0x9a>
    2c28:	2002      	movs	r0, #2
    2c2a:	4b0d      	ldr	r3, [pc, #52]	; (2c60 <PHY_TaskHandler+0xa4>)
    2c2c:	4798      	blx	r3
    2c2e:	0944      	lsrs	r4, r0, #5
    2c30:	b2e4      	uxtb	r4, r4
    2c32:	2c00      	cmp	r4, #0
    2c34:	d007      	beq.n	2c46 <PHY_TaskHandler+0x8a>
    2c36:	2c03      	cmp	r4, #3
    2c38:	d004      	beq.n	2c44 <PHY_TaskHandler+0x88>
    2c3a:	3c05      	subs	r4, #5
    2c3c:	1e63      	subs	r3, r4, #1
    2c3e:	419c      	sbcs	r4, r3
    2c40:	3402      	adds	r4, #2
    2c42:	e000      	b.n	2c46 <PHY_TaskHandler+0x8a>
    2c44:	2401      	movs	r4, #1
    2c46:	4b0a      	ldr	r3, [pc, #40]	; (2c70 <PHY_TaskHandler+0xb4>)
    2c48:	4798      	blx	r3
    2c4a:	2201      	movs	r2, #1
    2c4c:	4b03      	ldr	r3, [pc, #12]	; (2c5c <PHY_TaskHandler+0xa0>)
    2c4e:	701a      	strb	r2, [r3, #0]
    2c50:	1c20      	adds	r0, r4, #0
    2c52:	4b08      	ldr	r3, [pc, #32]	; (2c74 <PHY_TaskHandler+0xb8>)
    2c54:	4798      	blx	r3
    2c56:	b005      	add	sp, #20
    2c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	200006b4 	.word	0x200006b4
    2c60:	000032e9 	.word	0x000032e9
    2c64:	000034dd 	.word	0x000034dd
    2c68:	20000634 	.word	0x20000634
    2c6c:	00001f79 	.word	0x00001f79
    2c70:	00002a1d 	.word	0x00002a1d
    2c74:	00002891 	.word	0x00002891

00002c78 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2c78:	b508      	push	{r3, lr}
	SYS_TimerInit();
    2c7a:	4b04      	ldr	r3, [pc, #16]	; (2c8c <SYS_Init+0x14>)
    2c7c:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2c7e:	4b04      	ldr	r3, [pc, #16]	; (2c90 <SYS_Init+0x18>)
    2c80:	4798      	blx	r3
#endif
	PHY_Init();
    2c82:	4b04      	ldr	r3, [pc, #16]	; (2c94 <SYS_Init+0x1c>)
    2c84:	4798      	blx	r3
	NWK_Init();
    2c86:	4b04      	ldr	r3, [pc, #16]	; (2c98 <SYS_Init+0x20>)
    2c88:	4798      	blx	r3
}
    2c8a:	bd08      	pop	{r3, pc}
    2c8c:	00002d49 	.word	0x00002d49
    2c90:	00002fd1 	.word	0x00002fd1
    2c94:	00002a49 	.word	0x00002a49
    2c98:	00001825 	.word	0x00001825

00002c9c <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    2c9c:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    2c9e:	4b03      	ldr	r3, [pc, #12]	; (2cac <SYS_TaskHandler+0x10>)
    2ca0:	4798      	blx	r3
	NWK_TaskHandler();
    2ca2:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <SYS_TaskHandler+0x14>)
    2ca4:	4798      	blx	r3
	SYS_TimerTaskHandler();
    2ca6:	4b03      	ldr	r3, [pc, #12]	; (2cb4 <SYS_TaskHandler+0x18>)
    2ca8:	4798      	blx	r3
}
    2caa:	bd08      	pop	{r3, pc}
    2cac:	00002bbd 	.word	0x00002bbd
    2cb0:	000018b1 	.word	0x000018b1
    2cb4:	00002dcd 	.word	0x00002dcd

00002cb8 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    2cb8:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    2cba:	4b02      	ldr	r3, [pc, #8]	; (2cc4 <SYS_EncryptReq+0xc>)
    2cbc:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    2cbe:	4b02      	ldr	r3, [pc, #8]	; (2cc8 <SYS_EncryptReq+0x10>)
    2cc0:	4798      	blx	r3
}
    2cc2:	bd08      	pop	{r3, pc}
    2cc4:	00002b91 	.word	0x00002b91
    2cc8:	000023e1 	.word	0x000023e1

00002ccc <placeTimer>:
    2ccc:	b530      	push	{r4, r5, lr}
    2cce:	4b15      	ldr	r3, [pc, #84]	; (2d24 <placeTimer+0x58>)
    2cd0:	681d      	ldr	r5, [r3, #0]
    2cd2:	2d00      	cmp	r5, #0
    2cd4:	d01e      	beq.n	2d14 <placeTimer+0x48>
    2cd6:	6882      	ldr	r2, [r0, #8]
    2cd8:	6869      	ldr	r1, [r5, #4]
    2cda:	1c2c      	adds	r4, r5, #0
    2cdc:	428a      	cmp	r2, r1
    2cde:	d20a      	bcs.n	2cf6 <placeTimer+0x2a>
    2ce0:	e004      	b.n	2cec <placeTimer+0x20>
    2ce2:	6859      	ldr	r1, [r3, #4]
    2ce4:	4291      	cmp	r1, r2
    2ce6:	d803      	bhi.n	2cf0 <placeTimer+0x24>
    2ce8:	1c1c      	adds	r4, r3, #0
    2cea:	e004      	b.n	2cf6 <placeTimer+0x2a>
    2cec:	1c2b      	adds	r3, r5, #0
    2cee:	2400      	movs	r4, #0
    2cf0:	1a89      	subs	r1, r1, r2
    2cf2:	6059      	str	r1, [r3, #4]
    2cf4:	e003      	b.n	2cfe <placeTimer+0x32>
    2cf6:	1a52      	subs	r2, r2, r1
    2cf8:	6823      	ldr	r3, [r4, #0]
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d1f1      	bne.n	2ce2 <placeTimer+0x16>
    2cfe:	6042      	str	r2, [r0, #4]
    2d00:	2c00      	cmp	r4, #0
    2d02:	d003      	beq.n	2d0c <placeTimer+0x40>
    2d04:	6823      	ldr	r3, [r4, #0]
    2d06:	6003      	str	r3, [r0, #0]
    2d08:	6020      	str	r0, [r4, #0]
    2d0a:	e009      	b.n	2d20 <placeTimer+0x54>
    2d0c:	6005      	str	r5, [r0, #0]
    2d0e:	4b05      	ldr	r3, [pc, #20]	; (2d24 <placeTimer+0x58>)
    2d10:	6018      	str	r0, [r3, #0]
    2d12:	e005      	b.n	2d20 <placeTimer+0x54>
    2d14:	2300      	movs	r3, #0
    2d16:	6003      	str	r3, [r0, #0]
    2d18:	6883      	ldr	r3, [r0, #8]
    2d1a:	6043      	str	r3, [r0, #4]
    2d1c:	4b01      	ldr	r3, [pc, #4]	; (2d24 <placeTimer+0x58>)
    2d1e:	6018      	str	r0, [r3, #0]
    2d20:	bd30      	pop	{r4, r5, pc}
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	200006b8 	.word	0x200006b8

00002d28 <SYS_HwExpiry_Cb>:
    2d28:	b508      	push	{r3, lr}
    2d2a:	4b04      	ldr	r3, [pc, #16]	; (2d3c <SYS_HwExpiry_Cb+0x14>)
    2d2c:	781a      	ldrb	r2, [r3, #0]
    2d2e:	3201      	adds	r2, #1
    2d30:	b2d2      	uxtb	r2, r2
    2d32:	701a      	strb	r2, [r3, #0]
    2d34:	4802      	ldr	r0, [pc, #8]	; (2d40 <SYS_HwExpiry_Cb+0x18>)
    2d36:	4b03      	ldr	r3, [pc, #12]	; (2d44 <SYS_HwExpiry_Cb+0x1c>)
    2d38:	4798      	blx	r3
    2d3a:	bd08      	pop	{r3, pc}
    2d3c:	200007dc 	.word	0x200007dc
    2d40:	00002710 	.word	0x00002710
    2d44:	00003e35 	.word	0x00003e35

00002d48 <SYS_TimerInit>:
    2d48:	b510      	push	{r4, lr}
    2d4a:	2400      	movs	r4, #0
    2d4c:	4b06      	ldr	r3, [pc, #24]	; (2d68 <SYS_TimerInit+0x20>)
    2d4e:	701c      	strb	r4, [r3, #0]
    2d50:	4806      	ldr	r0, [pc, #24]	; (2d6c <SYS_TimerInit+0x24>)
    2d52:	4b07      	ldr	r3, [pc, #28]	; (2d70 <SYS_TimerInit+0x28>)
    2d54:	4798      	blx	r3
    2d56:	4b07      	ldr	r3, [pc, #28]	; (2d74 <SYS_TimerInit+0x2c>)
    2d58:	4798      	blx	r3
    2d5a:	4807      	ldr	r0, [pc, #28]	; (2d78 <SYS_TimerInit+0x30>)
    2d5c:	4b07      	ldr	r3, [pc, #28]	; (2d7c <SYS_TimerInit+0x34>)
    2d5e:	4798      	blx	r3
    2d60:	4b07      	ldr	r3, [pc, #28]	; (2d80 <SYS_TimerInit+0x38>)
    2d62:	601c      	str	r4, [r3, #0]
    2d64:	bd10      	pop	{r4, pc}
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	200007dc 	.word	0x200007dc
    2d6c:	00002d29 	.word	0x00002d29
    2d70:	00003f25 	.word	0x00003f25
    2d74:	00003ea1 	.word	0x00003ea1
    2d78:	00002710 	.word	0x00002710
    2d7c:	00003e35 	.word	0x00003e35
    2d80:	200006b8 	.word	0x200006b8

00002d84 <SYS_TimerStarted>:
    2d84:	4b09      	ldr	r3, [pc, #36]	; (2dac <SYS_TimerStarted+0x28>)
    2d86:	681b      	ldr	r3, [r3, #0]
    2d88:	2b00      	cmp	r3, #0
    2d8a:	d009      	beq.n	2da0 <SYS_TimerStarted+0x1c>
    2d8c:	4283      	cmp	r3, r0
    2d8e:	d102      	bne.n	2d96 <SYS_TimerStarted+0x12>
    2d90:	e008      	b.n	2da4 <SYS_TimerStarted+0x20>
    2d92:	4298      	cmp	r0, r3
    2d94:	d008      	beq.n	2da8 <SYS_TimerStarted+0x24>
    2d96:	681b      	ldr	r3, [r3, #0]
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d1fa      	bne.n	2d92 <SYS_TimerStarted+0xe>
    2d9c:	2000      	movs	r0, #0
    2d9e:	e004      	b.n	2daa <SYS_TimerStarted+0x26>
    2da0:	2000      	movs	r0, #0
    2da2:	e002      	b.n	2daa <SYS_TimerStarted+0x26>
    2da4:	2001      	movs	r0, #1
    2da6:	e000      	b.n	2daa <SYS_TimerStarted+0x26>
    2da8:	2001      	movs	r0, #1
    2daa:	4770      	bx	lr
    2dac:	200006b8 	.word	0x200006b8

00002db0 <SYS_TimerStart>:
    2db0:	b510      	push	{r4, lr}
    2db2:	1c04      	adds	r4, r0, #0
    2db4:	4b03      	ldr	r3, [pc, #12]	; (2dc4 <SYS_TimerStart+0x14>)
    2db6:	4798      	blx	r3
    2db8:	2800      	cmp	r0, #0
    2dba:	d102      	bne.n	2dc2 <SYS_TimerStart+0x12>
    2dbc:	1c20      	adds	r0, r4, #0
    2dbe:	4b02      	ldr	r3, [pc, #8]	; (2dc8 <SYS_TimerStart+0x18>)
    2dc0:	4798      	blx	r3
    2dc2:	bd10      	pop	{r4, pc}
    2dc4:	00002d85 	.word	0x00002d85
    2dc8:	00002ccd 	.word	0x00002ccd

00002dcc <SYS_TimerTaskHandler>:
    2dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dce:	4b1a      	ldr	r3, [pc, #104]	; (2e38 <SYS_TimerTaskHandler+0x6c>)
    2dd0:	781b      	ldrb	r3, [r3, #0]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d02f      	beq.n	2e36 <SYS_TimerTaskHandler+0x6a>
    2dd6:	f3ef 8010 	mrs	r0, PRIMASK
    2dda:	b672      	cpsid	i
    2ddc:	f3bf 8f5f 	dmb	sy
    2de0:	2100      	movs	r1, #0
    2de2:	4b16      	ldr	r3, [pc, #88]	; (2e3c <SYS_TimerTaskHandler+0x70>)
    2de4:	7019      	strb	r1, [r3, #0]
    2de6:	4a14      	ldr	r2, [pc, #80]	; (2e38 <SYS_TimerTaskHandler+0x6c>)
    2de8:	7813      	ldrb	r3, [r2, #0]
    2dea:	b2db      	uxtb	r3, r3
    2dec:	7011      	strb	r1, [r2, #0]
    2dee:	2800      	cmp	r0, #0
    2df0:	d105      	bne.n	2dfe <SYS_TimerTaskHandler+0x32>
    2df2:	2101      	movs	r1, #1
    2df4:	4a11      	ldr	r2, [pc, #68]	; (2e3c <SYS_TimerTaskHandler+0x70>)
    2df6:	7011      	strb	r1, [r2, #0]
    2df8:	f3bf 8f5f 	dmb	sy
    2dfc:	b662      	cpsie	i
    2dfe:	009d      	lsls	r5, r3, #2
    2e00:	18ed      	adds	r5, r5, r3
    2e02:	006d      	lsls	r5, r5, #1
    2e04:	4e0e      	ldr	r6, [pc, #56]	; (2e40 <SYS_TimerTaskHandler+0x74>)
    2e06:	1c37      	adds	r7, r6, #0
    2e08:	e00d      	b.n	2e26 <SYS_TimerTaskHandler+0x5a>
    2e0a:	1aed      	subs	r5, r5, r3
    2e0c:	6823      	ldr	r3, [r4, #0]
    2e0e:	603b      	str	r3, [r7, #0]
    2e10:	7b23      	ldrb	r3, [r4, #12]
    2e12:	2b01      	cmp	r3, #1
    2e14:	d102      	bne.n	2e1c <SYS_TimerTaskHandler+0x50>
    2e16:	1c20      	adds	r0, r4, #0
    2e18:	4b0a      	ldr	r3, [pc, #40]	; (2e44 <SYS_TimerTaskHandler+0x78>)
    2e1a:	4798      	blx	r3
    2e1c:	6923      	ldr	r3, [r4, #16]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d001      	beq.n	2e26 <SYS_TimerTaskHandler+0x5a>
    2e22:	1c20      	adds	r0, r4, #0
    2e24:	4798      	blx	r3
    2e26:	6834      	ldr	r4, [r6, #0]
    2e28:	2c00      	cmp	r4, #0
    2e2a:	d004      	beq.n	2e36 <SYS_TimerTaskHandler+0x6a>
    2e2c:	6863      	ldr	r3, [r4, #4]
    2e2e:	429d      	cmp	r5, r3
    2e30:	d2eb      	bcs.n	2e0a <SYS_TimerTaskHandler+0x3e>
    2e32:	1b5d      	subs	r5, r3, r5
    2e34:	6065      	str	r5, [r4, #4]
    2e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e38:	200007dc 	.word	0x200007dc
    2e3c:	20000008 	.word	0x20000008
    2e40:	200006b8 	.word	0x200006b8
    2e44:	00002ccd 	.word	0x00002ccd

00002e48 <tc_cca_callback>:
    2e48:	b508      	push	{r3, lr}
    2e4a:	4b01      	ldr	r3, [pc, #4]	; (2e50 <tc_cca_callback+0x8>)
    2e4c:	4798      	blx	r3
    2e4e:	bd08      	pop	{r3, pc}
    2e50:	00003f09 	.word	0x00003f09

00002e54 <tc_ovf_callback>:
    2e54:	b508      	push	{r3, lr}
    2e56:	4b01      	ldr	r3, [pc, #4]	; (2e5c <tc_ovf_callback+0x8>)
    2e58:	4798      	blx	r3
    2e5a:	bd08      	pop	{r3, pc}
    2e5c:	00003ec1 	.word	0x00003ec1

00002e60 <tmr_read_count>:
    2e60:	b508      	push	{r3, lr}
    2e62:	4802      	ldr	r0, [pc, #8]	; (2e6c <tmr_read_count+0xc>)
    2e64:	4b02      	ldr	r3, [pc, #8]	; (2e70 <tmr_read_count+0x10>)
    2e66:	4798      	blx	r3
    2e68:	b280      	uxth	r0, r0
    2e6a:	bd08      	pop	{r3, pc}
    2e6c:	20000814 	.word	0x20000814
    2e70:	000016d9 	.word	0x000016d9

00002e74 <tmr_disable_cc_interrupt>:
    2e74:	4b03      	ldr	r3, [pc, #12]	; (2e84 <tmr_disable_cc_interrupt+0x10>)
    2e76:	2210      	movs	r2, #16
    2e78:	6819      	ldr	r1, [r3, #0]
    2e7a:	730a      	strb	r2, [r1, #12]
    2e7c:	7e59      	ldrb	r1, [r3, #25]
    2e7e:	4391      	bics	r1, r2
    2e80:	7659      	strb	r1, [r3, #25]
    2e82:	4770      	bx	lr
    2e84:	20000814 	.word	0x20000814

00002e88 <tmr_enable_cc_interrupt>:
    2e88:	b510      	push	{r4, lr}
    2e8a:	4c0a      	ldr	r4, [pc, #40]	; (2eb4 <tmr_enable_cc_interrupt+0x2c>)
    2e8c:	6820      	ldr	r0, [r4, #0]
    2e8e:	4b0a      	ldr	r3, [pc, #40]	; (2eb8 <tmr_enable_cc_interrupt+0x30>)
    2e90:	4798      	blx	r3
    2e92:	4b0a      	ldr	r3, [pc, #40]	; (2ebc <tmr_enable_cc_interrupt+0x34>)
    2e94:	5c1b      	ldrb	r3, [r3, r0]
    2e96:	221f      	movs	r2, #31
    2e98:	401a      	ands	r2, r3
    2e9a:	2301      	movs	r3, #1
    2e9c:	4093      	lsls	r3, r2
    2e9e:	1c1a      	adds	r2, r3, #0
    2ea0:	4b07      	ldr	r3, [pc, #28]	; (2ec0 <tmr_enable_cc_interrupt+0x38>)
    2ea2:	601a      	str	r2, [r3, #0]
    2ea4:	7e62      	ldrb	r2, [r4, #25]
    2ea6:	2310      	movs	r3, #16
    2ea8:	4313      	orrs	r3, r2
    2eaa:	7663      	strb	r3, [r4, #25]
    2eac:	6823      	ldr	r3, [r4, #0]
    2eae:	2210      	movs	r2, #16
    2eb0:	735a      	strb	r2, [r3, #13]
    2eb2:	bd10      	pop	{r4, pc}
    2eb4:	20000814 	.word	0x20000814
    2eb8:	0000142d 	.word	0x0000142d
    2ebc:	0000428c 	.word	0x0000428c
    2ec0:	e000e100 	.word	0xe000e100

00002ec4 <tmr_write_cmpreg>:
    2ec4:	b508      	push	{r3, lr}
    2ec6:	1c02      	adds	r2, r0, #0
    2ec8:	4802      	ldr	r0, [pc, #8]	; (2ed4 <tmr_write_cmpreg+0x10>)
    2eca:	2100      	movs	r1, #0
    2ecc:	4b02      	ldr	r3, [pc, #8]	; (2ed8 <tmr_write_cmpreg+0x14>)
    2ece:	4798      	blx	r3
    2ed0:	bd08      	pop	{r3, pc}
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	20000814 	.word	0x20000814
    2ed8:	00001709 	.word	0x00001709

00002edc <tmr_init>:
    2edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ede:	464f      	mov	r7, r9
    2ee0:	4646      	mov	r6, r8
    2ee2:	b4c0      	push	{r6, r7}
    2ee4:	4a2d      	ldr	r2, [pc, #180]	; (2f9c <tmr_init+0xc0>)
    2ee6:	2300      	movs	r3, #0
    2ee8:	7013      	strb	r3, [r2, #0]
    2eea:	7093      	strb	r3, [r2, #2]
    2eec:	2100      	movs	r1, #0
    2eee:	8093      	strh	r3, [r2, #4]
    2ef0:	7191      	strb	r1, [r2, #6]
    2ef2:	8113      	strh	r3, [r2, #8]
    2ef4:	7051      	strb	r1, [r2, #1]
    2ef6:	7291      	strb	r1, [r2, #10]
    2ef8:	72d1      	strb	r1, [r2, #11]
    2efa:	7311      	strb	r1, [r2, #12]
    2efc:	7391      	strb	r1, [r2, #14]
    2efe:	7351      	strb	r1, [r2, #13]
    2f00:	7411      	strb	r1, [r2, #16]
    2f02:	6153      	str	r3, [r2, #20]
    2f04:	6193      	str	r3, [r2, #24]
    2f06:	7711      	strb	r1, [r2, #28]
    2f08:	6213      	str	r3, [r2, #32]
    2f0a:	6253      	str	r3, [r2, #36]	; 0x24
    2f0c:	8513      	strh	r3, [r2, #40]	; 0x28
    2f0e:	8593      	strh	r3, [r2, #44]	; 0x2c
    2f10:	2301      	movs	r3, #1
    2f12:	425b      	negs	r3, r3
    2f14:	8553      	strh	r3, [r2, #42]	; 0x2a
    2f16:	4c22      	ldr	r4, [pc, #136]	; (2fa0 <tmr_init+0xc4>)
    2f18:	1c20      	adds	r0, r4, #0
    2f1a:	4922      	ldr	r1, [pc, #136]	; (2fa4 <tmr_init+0xc8>)
    2f1c:	4b22      	ldr	r3, [pc, #136]	; (2fa8 <tmr_init+0xcc>)
    2f1e:	4798      	blx	r3
    2f20:	1c20      	adds	r0, r4, #0
    2f22:	4922      	ldr	r1, [pc, #136]	; (2fac <tmr_init+0xd0>)
    2f24:	2200      	movs	r2, #0
    2f26:	4d22      	ldr	r5, [pc, #136]	; (2fb0 <tmr_init+0xd4>)
    2f28:	47a8      	blx	r5
    2f2a:	1c20      	adds	r0, r4, #0
    2f2c:	4921      	ldr	r1, [pc, #132]	; (2fb4 <tmr_init+0xd8>)
    2f2e:	2202      	movs	r2, #2
    2f30:	47a8      	blx	r5
    2f32:	6820      	ldr	r0, [r4, #0]
    2f34:	4a20      	ldr	r2, [pc, #128]	; (2fb8 <tmr_init+0xdc>)
    2f36:	4691      	mov	r9, r2
    2f38:	4790      	blx	r2
    2f3a:	4b20      	ldr	r3, [pc, #128]	; (2fbc <tmr_init+0xe0>)
    2f3c:	4698      	mov	r8, r3
    2f3e:	5c1b      	ldrb	r3, [r3, r0]
    2f40:	271f      	movs	r7, #31
    2f42:	403b      	ands	r3, r7
    2f44:	2501      	movs	r5, #1
    2f46:	1c2a      	adds	r2, r5, #0
    2f48:	409a      	lsls	r2, r3
    2f4a:	4e1d      	ldr	r6, [pc, #116]	; (2fc0 <tmr_init+0xe4>)
    2f4c:	6032      	str	r2, [r6, #0]
    2f4e:	7e62      	ldrb	r2, [r4, #25]
    2f50:	2301      	movs	r3, #1
    2f52:	4313      	orrs	r3, r2
    2f54:	7663      	strb	r3, [r4, #25]
    2f56:	6820      	ldr	r0, [r4, #0]
    2f58:	7345      	strb	r5, [r0, #13]
    2f5a:	47c8      	blx	r9
    2f5c:	4642      	mov	r2, r8
    2f5e:	5c13      	ldrb	r3, [r2, r0]
    2f60:	401f      	ands	r7, r3
    2f62:	40bd      	lsls	r5, r7
    2f64:	6035      	str	r5, [r6, #0]
    2f66:	7e62      	ldrb	r2, [r4, #25]
    2f68:	2310      	movs	r3, #16
    2f6a:	4313      	orrs	r3, r2
    2f6c:	7663      	strb	r3, [r4, #25]
    2f6e:	6822      	ldr	r2, [r4, #0]
    2f70:	2310      	movs	r3, #16
    2f72:	7353      	strb	r3, [r2, #13]
    2f74:	217f      	movs	r1, #127	; 0x7f
    2f76:	7bd3      	ldrb	r3, [r2, #15]
    2f78:	438b      	bics	r3, r1
    2f7a:	d1fc      	bne.n	2f76 <tmr_init+0x9a>
    2f7c:	8811      	ldrh	r1, [r2, #0]
    2f7e:	2302      	movs	r3, #2
    2f80:	430b      	orrs	r3, r1
    2f82:	8013      	strh	r3, [r2, #0]
    2f84:	2000      	movs	r0, #0
    2f86:	4b0f      	ldr	r3, [pc, #60]	; (2fc4 <tmr_init+0xe8>)
    2f88:	4798      	blx	r3
    2f8a:	490f      	ldr	r1, [pc, #60]	; (2fc8 <tmr_init+0xec>)
    2f8c:	4b0f      	ldr	r3, [pc, #60]	; (2fcc <tmr_init+0xf0>)
    2f8e:	4798      	blx	r3
    2f90:	b2c0      	uxtb	r0, r0
    2f92:	bc0c      	pop	{r2, r3}
    2f94:	4690      	mov	r8, r2
    2f96:	4699      	mov	r9, r3
    2f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	200007e0 	.word	0x200007e0
    2fa0:	20000814 	.word	0x20000814
    2fa4:	42002c00 	.word	0x42002c00
    2fa8:	00001465 	.word	0x00001465
    2fac:	00002e55 	.word	0x00002e55
    2fb0:	0000136d 	.word	0x0000136d
    2fb4:	00002e49 	.word	0x00002e49
    2fb8:	0000142d 	.word	0x0000142d
    2fbc:	0000428c 	.word	0x0000428c
    2fc0:	e000e100 	.word	0xe000e100
    2fc4:	00001125 	.word	0x00001125
    2fc8:	000f4240 	.word	0x000f4240
    2fcc:	00003f31 	.word	0x00003f31

00002fd0 <sal_init>:
    2fd0:	4770      	bx	lr
    2fd2:	46c0      	nop			; (mov r8, r8)

00002fd4 <sal_aes_wrrd>:
    2fd4:	b538      	push	{r3, r4, r5, lr}
    2fd6:	1c03      	adds	r3, r0, #0
    2fd8:	1c0d      	adds	r5, r1, #0
    2fda:	4c14      	ldr	r4, [pc, #80]	; (302c <sal_aes_wrrd+0x58>)
    2fdc:	1c60      	adds	r0, r4, #1
    2fde:	1c19      	adds	r1, r3, #0
    2fe0:	2210      	movs	r2, #16
    2fe2:	4b13      	ldr	r3, [pc, #76]	; (3030 <sal_aes_wrrd+0x5c>)
    2fe4:	4798      	blx	r3
    2fe6:	7c64      	ldrb	r4, [r4, #17]
    2fe8:	4b12      	ldr	r3, [pc, #72]	; (3034 <sal_aes_wrrd+0x60>)
    2fea:	781b      	ldrb	r3, [r3, #0]
    2fec:	2b00      	cmp	r3, #0
    2fee:	d008      	beq.n	3002 <sal_aes_wrrd+0x2e>
    2ff0:	2083      	movs	r0, #131	; 0x83
    2ff2:	490e      	ldr	r1, [pc, #56]	; (302c <sal_aes_wrrd+0x58>)
    2ff4:	2212      	movs	r2, #18
    2ff6:	4b10      	ldr	r3, [pc, #64]	; (3038 <sal_aes_wrrd+0x64>)
    2ff8:	4798      	blx	r3
    2ffa:	2200      	movs	r2, #0
    2ffc:	4b0d      	ldr	r3, [pc, #52]	; (3034 <sal_aes_wrrd+0x60>)
    2ffe:	701a      	strb	r2, [r3, #0]
    3000:	e005      	b.n	300e <sal_aes_wrrd+0x3a>
    3002:	2084      	movs	r0, #132	; 0x84
    3004:	4909      	ldr	r1, [pc, #36]	; (302c <sal_aes_wrrd+0x58>)
    3006:	3101      	adds	r1, #1
    3008:	2211      	movs	r2, #17
    300a:	4b0b      	ldr	r3, [pc, #44]	; (3038 <sal_aes_wrrd+0x64>)
    300c:	4798      	blx	r3
    300e:	2d00      	cmp	r5, #0
    3010:	d005      	beq.n	301e <sal_aes_wrrd+0x4a>
    3012:	1c28      	adds	r0, r5, #0
    3014:	4905      	ldr	r1, [pc, #20]	; (302c <sal_aes_wrrd+0x58>)
    3016:	3101      	adds	r1, #1
    3018:	2210      	movs	r2, #16
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <sal_aes_wrrd+0x5c>)
    301c:	4798      	blx	r3
    301e:	4b03      	ldr	r3, [pc, #12]	; (302c <sal_aes_wrrd+0x58>)
    3020:	745c      	strb	r4, [r3, #17]
    3022:	2018      	movs	r0, #24
    3024:	4b05      	ldr	r3, [pc, #20]	; (303c <sal_aes_wrrd+0x68>)
    3026:	4798      	blx	r3
    3028:	bd38      	pop	{r3, r4, r5, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	200006e0 	.word	0x200006e0
    3030:	00004061 	.word	0x00004061
    3034:	200006f4 	.word	0x200006f4
    3038:	00003a55 	.word	0x00003a55
    303c:	00000151 	.word	0x00000151

00003040 <sal_aes_setup>:
    3040:	b5f0      	push	{r4, r5, r6, r7, lr}
    3042:	4647      	mov	r7, r8
    3044:	b480      	push	{r7}
    3046:	b084      	sub	sp, #16
    3048:	1c05      	adds	r5, r0, #0
    304a:	1c0f      	adds	r7, r1, #0
    304c:	1c14      	adds	r4, r2, #0
    304e:	2800      	cmp	r0, #0
    3050:	d017      	beq.n	3082 <sal_aes_setup+0x42>
    3052:	2200      	movs	r2, #0
    3054:	4b3e      	ldr	r3, [pc, #248]	; (3150 <sal_aes_setup+0x110>)
    3056:	701a      	strb	r2, [r3, #0]
    3058:	2202      	movs	r2, #2
    305a:	4b3e      	ldr	r3, [pc, #248]	; (3154 <sal_aes_setup+0x114>)
    305c:	701a      	strb	r2, [r3, #0]
    305e:	483e      	ldr	r0, [pc, #248]	; (3158 <sal_aes_setup+0x118>)
    3060:	1c29      	adds	r1, r5, #0
    3062:	2210      	movs	r2, #16
    3064:	4b3d      	ldr	r3, [pc, #244]	; (315c <sal_aes_setup+0x11c>)
    3066:	4698      	mov	r8, r3
    3068:	4798      	blx	r3
    306a:	4e3d      	ldr	r6, [pc, #244]	; (3160 <sal_aes_setup+0x120>)
    306c:	2310      	movs	r3, #16
    306e:	7033      	strb	r3, [r6, #0]
    3070:	1c70      	adds	r0, r6, #1
    3072:	1c29      	adds	r1, r5, #0
    3074:	2210      	movs	r2, #16
    3076:	47c0      	blx	r8
    3078:	2083      	movs	r0, #131	; 0x83
    307a:	1c31      	adds	r1, r6, #0
    307c:	2211      	movs	r2, #17
    307e:	4b39      	ldr	r3, [pc, #228]	; (3164 <sal_aes_setup+0x124>)
    3080:	4798      	blx	r3
    3082:	2c00      	cmp	r4, #0
    3084:	d002      	beq.n	308c <sal_aes_setup+0x4c>
    3086:	2c01      	cmp	r4, #1
    3088:	d012      	beq.n	30b0 <sal_aes_setup+0x70>
    308a:	e05a      	b.n	3142 <sal_aes_setup+0x102>
    308c:	4b31      	ldr	r3, [pc, #196]	; (3154 <sal_aes_setup+0x114>)
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	2b01      	cmp	r3, #1
    3092:	d13d      	bne.n	3110 <sal_aes_setup+0xd0>
    3094:	4d32      	ldr	r5, [pc, #200]	; (3160 <sal_aes_setup+0x120>)
    3096:	2310      	movs	r3, #16
    3098:	702b      	strb	r3, [r5, #0]
    309a:	1c68      	adds	r0, r5, #1
    309c:	492e      	ldr	r1, [pc, #184]	; (3158 <sal_aes_setup+0x118>)
    309e:	2210      	movs	r2, #16
    30a0:	4b2e      	ldr	r3, [pc, #184]	; (315c <sal_aes_setup+0x11c>)
    30a2:	4798      	blx	r3
    30a4:	2083      	movs	r0, #131	; 0x83
    30a6:	1c29      	adds	r1, r5, #0
    30a8:	2211      	movs	r2, #17
    30aa:	4b2e      	ldr	r3, [pc, #184]	; (3164 <sal_aes_setup+0x124>)
    30ac:	4798      	blx	r3
    30ae:	e02f      	b.n	3110 <sal_aes_setup+0xd0>
    30b0:	4b28      	ldr	r3, [pc, #160]	; (3154 <sal_aes_setup+0x114>)
    30b2:	781b      	ldrb	r3, [r3, #0]
    30b4:	2b01      	cmp	r3, #1
    30b6:	d02b      	beq.n	3110 <sal_aes_setup+0xd0>
    30b8:	2210      	movs	r2, #16
    30ba:	4b29      	ldr	r3, [pc, #164]	; (3160 <sal_aes_setup+0x120>)
    30bc:	701a      	strb	r2, [r3, #0]
    30be:	4b24      	ldr	r3, [pc, #144]	; (3150 <sal_aes_setup+0x110>)
    30c0:	781b      	ldrb	r3, [r3, #0]
    30c2:	2b00      	cmp	r3, #0
    30c4:	d116      	bne.n	30f4 <sal_aes_setup+0xb4>
    30c6:	4d26      	ldr	r5, [pc, #152]	; (3160 <sal_aes_setup+0x120>)
    30c8:	702b      	strb	r3, [r5, #0]
    30ca:	2380      	movs	r3, #128	; 0x80
    30cc:	746b      	strb	r3, [r5, #17]
    30ce:	2201      	movs	r2, #1
    30d0:	4b25      	ldr	r3, [pc, #148]	; (3168 <sal_aes_setup+0x128>)
    30d2:	701a      	strb	r2, [r3, #0]
    30d4:	4668      	mov	r0, sp
    30d6:	2100      	movs	r1, #0
    30d8:	4b24      	ldr	r3, [pc, #144]	; (316c <sal_aes_setup+0x12c>)
    30da:	4798      	blx	r3
    30dc:	2310      	movs	r3, #16
    30de:	702b      	strb	r3, [r5, #0]
    30e0:	2083      	movs	r0, #131	; 0x83
    30e2:	1c29      	adds	r1, r5, #0
    30e4:	2201      	movs	r2, #1
    30e6:	4b1f      	ldr	r3, [pc, #124]	; (3164 <sal_aes_setup+0x124>)
    30e8:	4798      	blx	r3
    30ea:	2084      	movs	r0, #132	; 0x84
    30ec:	4920      	ldr	r1, [pc, #128]	; (3170 <sal_aes_setup+0x130>)
    30ee:	2210      	movs	r2, #16
    30f0:	4b20      	ldr	r3, [pc, #128]	; (3174 <sal_aes_setup+0x134>)
    30f2:	4798      	blx	r3
    30f4:	4d1a      	ldr	r5, [pc, #104]	; (3160 <sal_aes_setup+0x120>)
    30f6:	1c68      	adds	r0, r5, #1
    30f8:	491d      	ldr	r1, [pc, #116]	; (3170 <sal_aes_setup+0x130>)
    30fa:	2210      	movs	r2, #16
    30fc:	4b17      	ldr	r3, [pc, #92]	; (315c <sal_aes_setup+0x11c>)
    30fe:	4798      	blx	r3
    3100:	2083      	movs	r0, #131	; 0x83
    3102:	1c29      	adds	r1, r5, #0
    3104:	2211      	movs	r2, #17
    3106:	4b17      	ldr	r3, [pc, #92]	; (3164 <sal_aes_setup+0x124>)
    3108:	4798      	blx	r3
    310a:	4b11      	ldr	r3, [pc, #68]	; (3150 <sal_aes_setup+0x110>)
    310c:	2201      	movs	r2, #1
    310e:	701a      	strb	r2, [r3, #0]
    3110:	4b10      	ldr	r3, [pc, #64]	; (3154 <sal_aes_setup+0x114>)
    3112:	701c      	strb	r4, [r3, #0]
    3114:	2f00      	cmp	r7, #0
    3116:	d002      	beq.n	311e <sal_aes_setup+0xde>
    3118:	2000      	movs	r0, #0
    311a:	2f02      	cmp	r7, #2
    311c:	d113      	bne.n	3146 <sal_aes_setup+0x106>
    311e:	00e4      	lsls	r4, r4, #3
    3120:	2308      	movs	r3, #8
    3122:	401c      	ands	r4, r3
    3124:	013f      	lsls	r7, r7, #4
    3126:	2370      	movs	r3, #112	; 0x70
    3128:	401f      	ands	r7, r3
    312a:	433c      	orrs	r4, r7
    312c:	4b0c      	ldr	r3, [pc, #48]	; (3160 <sal_aes_setup+0x120>)
    312e:	701c      	strb	r4, [r3, #0]
    3130:	2780      	movs	r7, #128	; 0x80
    3132:	427f      	negs	r7, r7
    3134:	433c      	orrs	r4, r7
    3136:	745c      	strb	r4, [r3, #17]
    3138:	2201      	movs	r2, #1
    313a:	4b0b      	ldr	r3, [pc, #44]	; (3168 <sal_aes_setup+0x128>)
    313c:	701a      	strb	r2, [r3, #0]
    313e:	2001      	movs	r0, #1
    3140:	e001      	b.n	3146 <sal_aes_setup+0x106>
    3142:	2000      	movs	r0, #0
    3144:	e7ff      	b.n	3146 <sal_aes_setup+0x106>
    3146:	b004      	add	sp, #16
    3148:	bc04      	pop	{r2}
    314a:	4690      	mov	r8, r2
    314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	200006bc 	.word	0x200006bc
    3154:	20000009 	.word	0x20000009
    3158:	200006d0 	.word	0x200006d0
    315c:	00004061 	.word	0x00004061
    3160:	200006e0 	.word	0x200006e0
    3164:	00003741 	.word	0x00003741
    3168:	200006f4 	.word	0x200006f4
    316c:	00002fd5 	.word	0x00002fd5
    3170:	200006c0 	.word	0x200006c0
    3174:	000038b9 	.word	0x000038b9

00003178 <sal_aes_read>:
    3178:	b508      	push	{r3, lr}
    317a:	1c01      	adds	r1, r0, #0
    317c:	2084      	movs	r0, #132	; 0x84
    317e:	2210      	movs	r2, #16
    3180:	4b01      	ldr	r3, [pc, #4]	; (3188 <sal_aes_read+0x10>)
    3182:	4798      	blx	r3
    3184:	bd08      	pop	{r3, pc}
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	000038b9 	.word	0x000038b9

0000318c <AT86RFX_ISR>:
    318c:	b508      	push	{r3, lr}
    318e:	2201      	movs	r2, #1
    3190:	4b03      	ldr	r3, [pc, #12]	; (31a0 <AT86RFX_ISR+0x14>)
    3192:	611a      	str	r2, [r3, #16]
    3194:	4b03      	ldr	r3, [pc, #12]	; (31a4 <AT86RFX_ISR+0x18>)
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	2b00      	cmp	r3, #0
    319a:	d000      	beq.n	319e <AT86RFX_ISR+0x12>
    319c:	4798      	blx	r3
    319e:	bd08      	pop	{r3, pc}
    31a0:	40001800 	.word	0x40001800
    31a4:	200006f8 	.word	0x200006f8

000031a8 <trx_spi_init>:
    31a8:	b530      	push	{r4, r5, lr}
    31aa:	b085      	sub	sp, #20
    31ac:	4a32      	ldr	r2, [pc, #200]	; (3278 <trx_spi_init+0xd0>)
    31ae:	2300      	movs	r3, #0
    31b0:	7053      	strb	r3, [r2, #1]
    31b2:	7093      	strb	r3, [r2, #2]
    31b4:	213f      	movs	r1, #63	; 0x3f
    31b6:	7011      	strb	r1, [r2, #0]
    31b8:	4c30      	ldr	r4, [pc, #192]	; (327c <trx_spi_init+0xd4>)
    31ba:	7021      	strb	r1, [r4, #0]
    31bc:	7063      	strb	r3, [r4, #1]
    31be:	70a3      	strb	r3, [r4, #2]
    31c0:	2201      	movs	r2, #1
    31c2:	4668      	mov	r0, sp
    31c4:	7042      	strb	r2, [r0, #1]
    31c6:	7083      	strb	r3, [r0, #2]
    31c8:	7002      	strb	r2, [r0, #0]
    31ca:	203f      	movs	r0, #63	; 0x3f
    31cc:	4669      	mov	r1, sp
    31ce:	4b2c      	ldr	r3, [pc, #176]	; (3280 <trx_spi_init+0xd8>)
    31d0:	4798      	blx	r3
    31d2:	7823      	ldrb	r3, [r4, #0]
    31d4:	09d9      	lsrs	r1, r3, #7
    31d6:	2200      	movs	r2, #0
    31d8:	2900      	cmp	r1, #0
    31da:	d103      	bne.n	31e4 <trx_spi_init+0x3c>
    31dc:	095a      	lsrs	r2, r3, #5
    31de:	01d2      	lsls	r2, r2, #7
    31e0:	4928      	ldr	r1, [pc, #160]	; (3284 <trx_spi_init+0xdc>)
    31e2:	1852      	adds	r2, r2, r1
    31e4:	211f      	movs	r1, #31
    31e6:	400b      	ands	r3, r1
    31e8:	2101      	movs	r1, #1
    31ea:	1c08      	adds	r0, r1, #0
    31ec:	4098      	lsls	r0, r3
    31ee:	6190      	str	r0, [r2, #24]
    31f0:	4a25      	ldr	r2, [pc, #148]	; (3288 <trx_spi_init+0xe0>)
    31f2:	7011      	strb	r1, [r2, #0]
    31f4:	2300      	movs	r3, #0
    31f6:	6053      	str	r3, [r2, #4]
    31f8:	6093      	str	r3, [r2, #8]
    31fa:	7413      	strb	r3, [r2, #16]
    31fc:	7453      	strb	r3, [r2, #17]
    31fe:	7491      	strb	r1, [r2, #18]
    3200:	74d1      	strb	r1, [r2, #19]
    3202:	7513      	strb	r3, [r2, #20]
    3204:	2124      	movs	r1, #36	; 0x24
    3206:	5453      	strb	r3, [r2, r1]
    3208:	61d3      	str	r3, [r2, #28]
    320a:	6213      	str	r3, [r2, #32]
    320c:	2380      	movs	r3, #128	; 0x80
    320e:	025b      	lsls	r3, r3, #9
    3210:	60d3      	str	r3, [r2, #12]
    3212:	4b1e      	ldr	r3, [pc, #120]	; (328c <trx_spi_init+0xe4>)
    3214:	6193      	str	r3, [r2, #24]
    3216:	4b1e      	ldr	r3, [pc, #120]	; (3290 <trx_spi_init+0xe8>)
    3218:	6293      	str	r3, [r2, #40]	; 0x28
    321a:	2301      	movs	r3, #1
    321c:	425b      	negs	r3, r3
    321e:	62d3      	str	r3, [r2, #44]	; 0x2c
    3220:	4b1c      	ldr	r3, [pc, #112]	; (3294 <trx_spi_init+0xec>)
    3222:	6313      	str	r3, [r2, #48]	; 0x30
    3224:	4b1c      	ldr	r3, [pc, #112]	; (3298 <trx_spi_init+0xf0>)
    3226:	6353      	str	r3, [r2, #52]	; 0x34
    3228:	4c1c      	ldr	r4, [pc, #112]	; (329c <trx_spi_init+0xf4>)
    322a:	1c20      	adds	r0, r4, #0
    322c:	491c      	ldr	r1, [pc, #112]	; (32a0 <trx_spi_init+0xf8>)
    322e:	4b1d      	ldr	r3, [pc, #116]	; (32a4 <trx_spi_init+0xfc>)
    3230:	4798      	blx	r3
    3232:	6822      	ldr	r2, [r4, #0]
    3234:	69d3      	ldr	r3, [r2, #28]
    3236:	2b00      	cmp	r3, #0
    3238:	d1fc      	bne.n	3234 <trx_spi_init+0x8c>
    323a:	6813      	ldr	r3, [r2, #0]
    323c:	2502      	movs	r5, #2
    323e:	432b      	orrs	r3, r5
    3240:	6013      	str	r3, [r2, #0]
    3242:	ac01      	add	r4, sp, #4
    3244:	1c20      	adds	r0, r4, #0
    3246:	4b18      	ldr	r3, [pc, #96]	; (32a8 <trx_spi_init+0x100>)
    3248:	4798      	blx	r3
    324a:	2320      	movs	r3, #32
    324c:	9301      	str	r3, [sp, #4]
    324e:	2380      	movs	r3, #128	; 0x80
    3250:	039b      	lsls	r3, r3, #14
    3252:	6063      	str	r3, [r4, #4]
    3254:	7225      	strb	r5, [r4, #8]
    3256:	2301      	movs	r3, #1
    3258:	7263      	strb	r3, [r4, #9]
    325a:	2200      	movs	r2, #0
    325c:	72a2      	strb	r2, [r4, #10]
    325e:	72e3      	strb	r3, [r4, #11]
    3260:	2000      	movs	r0, #0
    3262:	1c21      	adds	r1, r4, #0
    3264:	4b11      	ldr	r3, [pc, #68]	; (32ac <trx_spi_init+0x104>)
    3266:	4798      	blx	r3
    3268:	4811      	ldr	r0, [pc, #68]	; (32b0 <trx_spi_init+0x108>)
    326a:	2100      	movs	r1, #0
    326c:	2200      	movs	r2, #0
    326e:	4b11      	ldr	r3, [pc, #68]	; (32b4 <trx_spi_init+0x10c>)
    3270:	4798      	blx	r3
    3272:	b005      	add	sp, #20
    3274:	bd30      	pop	{r4, r5, pc}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	20000834 	.word	0x20000834
    327c:	20000838 	.word	0x20000838
    3280:	000004d9 	.word	0x000004d9
    3284:	41004400 	.word	0x41004400
    3288:	2000083c 	.word	0x2000083c
    328c:	004c4b40 	.word	0x004c4b40
    3290:	00530005 	.word	0x00530005
    3294:	003e0005 	.word	0x003e0005
    3298:	00520005 	.word	0x00520005
    329c:	20000874 	.word	0x20000874
    32a0:	42001800 	.word	0x42001800
    32a4:	00000799 	.word	0x00000799
    32a8:	0000044d 	.word	0x0000044d
    32ac:	00000461 	.word	0x00000461
    32b0:	0000318d 	.word	0x0000318d
    32b4:	000002e9 	.word	0x000002e9

000032b8 <PhyReset>:
    32b8:	b570      	push	{r4, r5, r6, lr}
    32ba:	4b09      	ldr	r3, [pc, #36]	; (32e0 <PhyReset+0x28>)
    32bc:	1c1c      	adds	r4, r3, #0
    32be:	3480      	adds	r4, #128	; 0x80
    32c0:	2580      	movs	r5, #128	; 0x80
    32c2:	022d      	lsls	r5, r5, #8
    32c4:	61a5      	str	r5, [r4, #24]
    32c6:	2280      	movs	r2, #128	; 0x80
    32c8:	0352      	lsls	r2, r2, #13
    32ca:	615a      	str	r2, [r3, #20]
    32cc:	20a5      	movs	r0, #165	; 0xa5
    32ce:	0040      	lsls	r0, r0, #1
    32d0:	4e04      	ldr	r6, [pc, #16]	; (32e4 <PhyReset+0x2c>)
    32d2:	47b0      	blx	r6
    32d4:	6165      	str	r5, [r4, #20]
    32d6:	200a      	movs	r0, #10
    32d8:	47b0      	blx	r6
    32da:	61a5      	str	r5, [r4, #24]
    32dc:	bd70      	pop	{r4, r5, r6, pc}
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	41004400 	.word	0x41004400
    32e4:	00000151 	.word	0x00000151

000032e8 <trx_reg_read>:
    32e8:	b570      	push	{r4, r5, r6, lr}
    32ea:	1c06      	adds	r6, r0, #0
    32ec:	f3ef 8410 	mrs	r4, PRIMASK
    32f0:	4263      	negs	r3, r4
    32f2:	415c      	adcs	r4, r3
    32f4:	b672      	cpsid	i
    32f6:	f3bf 8f5f 	dmb	sy
    32fa:	2200      	movs	r2, #0
    32fc:	4b33      	ldr	r3, [pc, #204]	; (33cc <trx_reg_read+0xe4>)
    32fe:	701a      	strb	r2, [r3, #0]
    3300:	4d33      	ldr	r5, [pc, #204]	; (33d0 <trx_reg_read+0xe8>)
    3302:	1c28      	adds	r0, r5, #0
    3304:	4933      	ldr	r1, [pc, #204]	; (33d4 <trx_reg_read+0xec>)
    3306:	2201      	movs	r2, #1
    3308:	4b33      	ldr	r3, [pc, #204]	; (33d8 <trx_reg_read+0xf0>)
    330a:	4798      	blx	r3
    330c:	682b      	ldr	r3, [r5, #0]
    330e:	2101      	movs	r1, #1
    3310:	7e1a      	ldrb	r2, [r3, #24]
    3312:	420a      	tst	r2, r1
    3314:	d0fc      	beq.n	3310 <trx_reg_read+0x28>
    3316:	7e1a      	ldrb	r2, [r3, #24]
    3318:	07d1      	lsls	r1, r2, #31
    331a:	d502      	bpl.n	3322 <trx_reg_read+0x3a>
    331c:	2280      	movs	r2, #128	; 0x80
    331e:	4316      	orrs	r6, r2
    3320:	629e      	str	r6, [r3, #40]	; 0x28
    3322:	2102      	movs	r1, #2
    3324:	7e1a      	ldrb	r2, [r3, #24]
    3326:	420a      	tst	r2, r1
    3328:	d0fc      	beq.n	3324 <trx_reg_read+0x3c>
    332a:	2104      	movs	r1, #4
    332c:	7e1a      	ldrb	r2, [r3, #24]
    332e:	420a      	tst	r2, r1
    3330:	d0fc      	beq.n	332c <trx_reg_read+0x44>
    3332:	7e1a      	ldrb	r2, [r3, #24]
    3334:	0751      	lsls	r1, r2, #29
    3336:	d514      	bpl.n	3362 <trx_reg_read+0x7a>
    3338:	8b5a      	ldrh	r2, [r3, #26]
    333a:	0751      	lsls	r1, r2, #29
    333c:	d503      	bpl.n	3346 <trx_reg_read+0x5e>
    333e:	8b59      	ldrh	r1, [r3, #26]
    3340:	2204      	movs	r2, #4
    3342:	430a      	orrs	r2, r1
    3344:	835a      	strh	r2, [r3, #26]
    3346:	4a22      	ldr	r2, [pc, #136]	; (33d0 <trx_reg_read+0xe8>)
    3348:	7992      	ldrb	r2, [r2, #6]
    334a:	2a01      	cmp	r2, #1
    334c:	d105      	bne.n	335a <trx_reg_read+0x72>
    334e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3350:	05c9      	lsls	r1, r1, #23
    3352:	0dc9      	lsrs	r1, r1, #23
    3354:	4a21      	ldr	r2, [pc, #132]	; (33dc <trx_reg_read+0xf4>)
    3356:	8011      	strh	r1, [r2, #0]
    3358:	e003      	b.n	3362 <trx_reg_read+0x7a>
    335a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    335c:	b2c9      	uxtb	r1, r1
    335e:	4a1f      	ldr	r2, [pc, #124]	; (33dc <trx_reg_read+0xf4>)
    3360:	8011      	strh	r1, [r2, #0]
    3362:	2101      	movs	r1, #1
    3364:	7e1a      	ldrb	r2, [r3, #24]
    3366:	420a      	tst	r2, r1
    3368:	d0fc      	beq.n	3364 <trx_reg_read+0x7c>
    336a:	7e1a      	ldrb	r2, [r3, #24]
    336c:	07d1      	lsls	r1, r2, #31
    336e:	d501      	bpl.n	3374 <trx_reg_read+0x8c>
    3370:	2200      	movs	r2, #0
    3372:	629a      	str	r2, [r3, #40]	; 0x28
    3374:	2102      	movs	r1, #2
    3376:	7e1a      	ldrb	r2, [r3, #24]
    3378:	420a      	tst	r2, r1
    337a:	d0fc      	beq.n	3376 <trx_reg_read+0x8e>
    337c:	2104      	movs	r1, #4
    337e:	7e1a      	ldrb	r2, [r3, #24]
    3380:	420a      	tst	r2, r1
    3382:	d0fc      	beq.n	337e <trx_reg_read+0x96>
    3384:	7e1a      	ldrb	r2, [r3, #24]
    3386:	2500      	movs	r5, #0
    3388:	0751      	lsls	r1, r2, #29
    338a:	d510      	bpl.n	33ae <trx_reg_read+0xc6>
    338c:	8b5a      	ldrh	r2, [r3, #26]
    338e:	0751      	lsls	r1, r2, #29
    3390:	d503      	bpl.n	339a <trx_reg_read+0xb2>
    3392:	8b59      	ldrh	r1, [r3, #26]
    3394:	2204      	movs	r2, #4
    3396:	430a      	orrs	r2, r1
    3398:	835a      	strh	r2, [r3, #26]
    339a:	4a0d      	ldr	r2, [pc, #52]	; (33d0 <trx_reg_read+0xe8>)
    339c:	7992      	ldrb	r2, [r2, #6]
    339e:	2a01      	cmp	r2, #1
    33a0:	d103      	bne.n	33aa <trx_reg_read+0xc2>
    33a2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    33a4:	05ed      	lsls	r5, r5, #23
    33a6:	0ded      	lsrs	r5, r5, #23
    33a8:	e001      	b.n	33ae <trx_reg_read+0xc6>
    33aa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    33ac:	b2ed      	uxtb	r5, r5
    33ae:	4808      	ldr	r0, [pc, #32]	; (33d0 <trx_reg_read+0xe8>)
    33b0:	4908      	ldr	r1, [pc, #32]	; (33d4 <trx_reg_read+0xec>)
    33b2:	2200      	movs	r2, #0
    33b4:	4b08      	ldr	r3, [pc, #32]	; (33d8 <trx_reg_read+0xf0>)
    33b6:	4798      	blx	r3
    33b8:	2c00      	cmp	r4, #0
    33ba:	d005      	beq.n	33c8 <trx_reg_read+0xe0>
    33bc:	2201      	movs	r2, #1
    33be:	4b03      	ldr	r3, [pc, #12]	; (33cc <trx_reg_read+0xe4>)
    33c0:	701a      	strb	r2, [r3, #0]
    33c2:	f3bf 8f5f 	dmb	sy
    33c6:	b662      	cpsie	i
    33c8:	b2e8      	uxtb	r0, r5
    33ca:	bd70      	pop	{r4, r5, r6, pc}
    33cc:	20000008 	.word	0x20000008
    33d0:	20000874 	.word	0x20000874
    33d4:	20000838 	.word	0x20000838
    33d8:	00000a49 	.word	0x00000a49
    33dc:	20000830 	.word	0x20000830

000033e0 <trx_reg_write>:
    33e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33e2:	1c07      	adds	r7, r0, #0
    33e4:	1c0d      	adds	r5, r1, #0
    33e6:	f3ef 8410 	mrs	r4, PRIMASK
    33ea:	4263      	negs	r3, r4
    33ec:	415c      	adcs	r4, r3
    33ee:	b672      	cpsid	i
    33f0:	f3bf 8f5f 	dmb	sy
    33f4:	2200      	movs	r2, #0
    33f6:	4b34      	ldr	r3, [pc, #208]	; (34c8 <trx_reg_write+0xe8>)
    33f8:	701a      	strb	r2, [r3, #0]
    33fa:	4e34      	ldr	r6, [pc, #208]	; (34cc <trx_reg_write+0xec>)
    33fc:	1c30      	adds	r0, r6, #0
    33fe:	4934      	ldr	r1, [pc, #208]	; (34d0 <trx_reg_write+0xf0>)
    3400:	2201      	movs	r2, #1
    3402:	4b34      	ldr	r3, [pc, #208]	; (34d4 <trx_reg_write+0xf4>)
    3404:	4798      	blx	r3
    3406:	6833      	ldr	r3, [r6, #0]
    3408:	2101      	movs	r1, #1
    340a:	7e1a      	ldrb	r2, [r3, #24]
    340c:	420a      	tst	r2, r1
    340e:	d0fc      	beq.n	340a <trx_reg_write+0x2a>
    3410:	7e1a      	ldrb	r2, [r3, #24]
    3412:	07d1      	lsls	r1, r2, #31
    3414:	d502      	bpl.n	341c <trx_reg_write+0x3c>
    3416:	22c0      	movs	r2, #192	; 0xc0
    3418:	4317      	orrs	r7, r2
    341a:	629f      	str	r7, [r3, #40]	; 0x28
    341c:	2102      	movs	r1, #2
    341e:	7e1a      	ldrb	r2, [r3, #24]
    3420:	420a      	tst	r2, r1
    3422:	d0fc      	beq.n	341e <trx_reg_write+0x3e>
    3424:	2104      	movs	r1, #4
    3426:	7e1a      	ldrb	r2, [r3, #24]
    3428:	420a      	tst	r2, r1
    342a:	d0fc      	beq.n	3426 <trx_reg_write+0x46>
    342c:	7e1a      	ldrb	r2, [r3, #24]
    342e:	0751      	lsls	r1, r2, #29
    3430:	d514      	bpl.n	345c <trx_reg_write+0x7c>
    3432:	8b5a      	ldrh	r2, [r3, #26]
    3434:	0751      	lsls	r1, r2, #29
    3436:	d503      	bpl.n	3440 <trx_reg_write+0x60>
    3438:	8b59      	ldrh	r1, [r3, #26]
    343a:	2204      	movs	r2, #4
    343c:	430a      	orrs	r2, r1
    343e:	835a      	strh	r2, [r3, #26]
    3440:	4a22      	ldr	r2, [pc, #136]	; (34cc <trx_reg_write+0xec>)
    3442:	7992      	ldrb	r2, [r2, #6]
    3444:	2a01      	cmp	r2, #1
    3446:	d105      	bne.n	3454 <trx_reg_write+0x74>
    3448:	6a99      	ldr	r1, [r3, #40]	; 0x28
    344a:	05c9      	lsls	r1, r1, #23
    344c:	0dc9      	lsrs	r1, r1, #23
    344e:	4a22      	ldr	r2, [pc, #136]	; (34d8 <trx_reg_write+0xf8>)
    3450:	8011      	strh	r1, [r2, #0]
    3452:	e003      	b.n	345c <trx_reg_write+0x7c>
    3454:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3456:	b2c9      	uxtb	r1, r1
    3458:	4a1f      	ldr	r2, [pc, #124]	; (34d8 <trx_reg_write+0xf8>)
    345a:	8011      	strh	r1, [r2, #0]
    345c:	2001      	movs	r0, #1
    345e:	7e1a      	ldrb	r2, [r3, #24]
    3460:	4202      	tst	r2, r0
    3462:	d0fc      	beq.n	345e <trx_reg_write+0x7e>
    3464:	7e1a      	ldrb	r2, [r3, #24]
    3466:	07d1      	lsls	r1, r2, #31
    3468:	d500      	bpl.n	346c <trx_reg_write+0x8c>
    346a:	629d      	str	r5, [r3, #40]	; 0x28
    346c:	2102      	movs	r1, #2
    346e:	7e1a      	ldrb	r2, [r3, #24]
    3470:	420a      	tst	r2, r1
    3472:	d0fc      	beq.n	346e <trx_reg_write+0x8e>
    3474:	2104      	movs	r1, #4
    3476:	7e1a      	ldrb	r2, [r3, #24]
    3478:	420a      	tst	r2, r1
    347a:	d0fc      	beq.n	3476 <trx_reg_write+0x96>
    347c:	7e1a      	ldrb	r2, [r3, #24]
    347e:	0751      	lsls	r1, r2, #29
    3480:	d514      	bpl.n	34ac <trx_reg_write+0xcc>
    3482:	8b5a      	ldrh	r2, [r3, #26]
    3484:	0751      	lsls	r1, r2, #29
    3486:	d503      	bpl.n	3490 <trx_reg_write+0xb0>
    3488:	8b59      	ldrh	r1, [r3, #26]
    348a:	2204      	movs	r2, #4
    348c:	430a      	orrs	r2, r1
    348e:	835a      	strh	r2, [r3, #26]
    3490:	4a0e      	ldr	r2, [pc, #56]	; (34cc <trx_reg_write+0xec>)
    3492:	7992      	ldrb	r2, [r2, #6]
    3494:	2a01      	cmp	r2, #1
    3496:	d105      	bne.n	34a4 <trx_reg_write+0xc4>
    3498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    349a:	05d2      	lsls	r2, r2, #23
    349c:	0dd2      	lsrs	r2, r2, #23
    349e:	4b0e      	ldr	r3, [pc, #56]	; (34d8 <trx_reg_write+0xf8>)
    34a0:	801a      	strh	r2, [r3, #0]
    34a2:	e003      	b.n	34ac <trx_reg_write+0xcc>
    34a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    34a6:	b2d2      	uxtb	r2, r2
    34a8:	4b0b      	ldr	r3, [pc, #44]	; (34d8 <trx_reg_write+0xf8>)
    34aa:	801a      	strh	r2, [r3, #0]
    34ac:	4807      	ldr	r0, [pc, #28]	; (34cc <trx_reg_write+0xec>)
    34ae:	4908      	ldr	r1, [pc, #32]	; (34d0 <trx_reg_write+0xf0>)
    34b0:	2200      	movs	r2, #0
    34b2:	4b08      	ldr	r3, [pc, #32]	; (34d4 <trx_reg_write+0xf4>)
    34b4:	4798      	blx	r3
    34b6:	2c00      	cmp	r4, #0
    34b8:	d005      	beq.n	34c6 <trx_reg_write+0xe6>
    34ba:	2201      	movs	r2, #1
    34bc:	4b02      	ldr	r3, [pc, #8]	; (34c8 <trx_reg_write+0xe8>)
    34be:	701a      	strb	r2, [r3, #0]
    34c0:	f3bf 8f5f 	dmb	sy
    34c4:	b662      	cpsie	i
    34c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34c8:	20000008 	.word	0x20000008
    34cc:	20000874 	.word	0x20000874
    34d0:	20000838 	.word	0x20000838
    34d4:	00000a49 	.word	0x00000a49
    34d8:	20000830 	.word	0x20000830

000034dc <trx_frame_read>:
    34dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    34de:	465f      	mov	r7, fp
    34e0:	4656      	mov	r6, sl
    34e2:	464d      	mov	r5, r9
    34e4:	4644      	mov	r4, r8
    34e6:	b4f0      	push	{r4, r5, r6, r7}
    34e8:	b083      	sub	sp, #12
    34ea:	1c06      	adds	r6, r0, #0
    34ec:	1c0c      	adds	r4, r1, #0
    34ee:	f3ef 8710 	mrs	r7, PRIMASK
    34f2:	4278      	negs	r0, r7
    34f4:	4178      	adcs	r0, r7
    34f6:	9001      	str	r0, [sp, #4]
    34f8:	b672      	cpsid	i
    34fa:	f3bf 8f5f 	dmb	sy
    34fe:	2200      	movs	r2, #0
    3500:	4b41      	ldr	r3, [pc, #260]	; (3608 <trx_frame_read+0x12c>)
    3502:	701a      	strb	r2, [r3, #0]
    3504:	4d41      	ldr	r5, [pc, #260]	; (360c <trx_frame_read+0x130>)
    3506:	1c28      	adds	r0, r5, #0
    3508:	4941      	ldr	r1, [pc, #260]	; (3610 <trx_frame_read+0x134>)
    350a:	2201      	movs	r2, #1
    350c:	4b41      	ldr	r3, [pc, #260]	; (3614 <trx_frame_read+0x138>)
    350e:	4798      	blx	r3
    3510:	682b      	ldr	r3, [r5, #0]
    3512:	2101      	movs	r1, #1
    3514:	7e1a      	ldrb	r2, [r3, #24]
    3516:	420a      	tst	r2, r1
    3518:	d0fc      	beq.n	3514 <trx_frame_read+0x38>
    351a:	7e1a      	ldrb	r2, [r3, #24]
    351c:	07d1      	lsls	r1, r2, #31
    351e:	d501      	bpl.n	3524 <trx_frame_read+0x48>
    3520:	2220      	movs	r2, #32
    3522:	629a      	str	r2, [r3, #40]	; 0x28
    3524:	2102      	movs	r1, #2
    3526:	7e1a      	ldrb	r2, [r3, #24]
    3528:	420a      	tst	r2, r1
    352a:	d0fc      	beq.n	3526 <trx_frame_read+0x4a>
    352c:	2004      	movs	r0, #4
    352e:	7e1a      	ldrb	r2, [r3, #24]
    3530:	4202      	tst	r2, r0
    3532:	d0fc      	beq.n	352e <trx_frame_read+0x52>
    3534:	7e1a      	ldrb	r2, [r3, #24]
    3536:	0750      	lsls	r0, r2, #29
    3538:	d50f      	bpl.n	355a <trx_frame_read+0x7e>
    353a:	8b5a      	ldrh	r2, [r3, #26]
    353c:	0751      	lsls	r1, r2, #29
    353e:	d503      	bpl.n	3548 <trx_frame_read+0x6c>
    3540:	8b59      	ldrh	r1, [r3, #26]
    3542:	2204      	movs	r2, #4
    3544:	430a      	orrs	r2, r1
    3546:	835a      	strh	r2, [r3, #26]
    3548:	4a30      	ldr	r2, [pc, #192]	; (360c <trx_frame_read+0x130>)
    354a:	7992      	ldrb	r2, [r2, #6]
    354c:	2a01      	cmp	r2, #1
    354e:	d109      	bne.n	3564 <trx_frame_read+0x88>
    3550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3552:	05d2      	lsls	r2, r2, #23
    3554:	0dd2      	lsrs	r2, r2, #23
    3556:	4b30      	ldr	r3, [pc, #192]	; (3618 <trx_frame_read+0x13c>)
    3558:	801a      	strh	r2, [r3, #0]
    355a:	1e63      	subs	r3, r4, #1
    355c:	b2db      	uxtb	r3, r3
    355e:	2c00      	cmp	r4, #0
    3560:	d105      	bne.n	356e <trx_frame_read+0x92>
    3562:	e03c      	b.n	35de <trx_frame_read+0x102>
    3564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3566:	b2d2      	uxtb	r2, r2
    3568:	4b2b      	ldr	r3, [pc, #172]	; (3618 <trx_frame_read+0x13c>)
    356a:	801a      	strh	r2, [r3, #0]
    356c:	e7f5      	b.n	355a <trx_frame_read+0x7e>
    356e:	3301      	adds	r3, #1
    3570:	199b      	adds	r3, r3, r6
    3572:	4699      	mov	r9, r3
    3574:	2020      	movs	r0, #32
    3576:	4a25      	ldr	r2, [pc, #148]	; (360c <trx_frame_read+0x130>)
    3578:	4690      	mov	r8, r2
    357a:	2401      	movs	r4, #1
    357c:	2300      	movs	r3, #0
    357e:	469a      	mov	sl, r3
    3580:	2502      	movs	r5, #2
    3582:	2104      	movs	r1, #4
    3584:	1c17      	adds	r7, r2, #0
    3586:	2204      	movs	r2, #4
    3588:	4693      	mov	fp, r2
    358a:	4642      	mov	r2, r8
    358c:	6813      	ldr	r3, [r2, #0]
    358e:	7e1a      	ldrb	r2, [r3, #24]
    3590:	4222      	tst	r2, r4
    3592:	d0fc      	beq.n	358e <trx_frame_read+0xb2>
    3594:	7e1a      	ldrb	r2, [r3, #24]
    3596:	4222      	tst	r2, r4
    3598:	d001      	beq.n	359e <trx_frame_read+0xc2>
    359a:	4652      	mov	r2, sl
    359c:	629a      	str	r2, [r3, #40]	; 0x28
    359e:	7e1a      	ldrb	r2, [r3, #24]
    35a0:	422a      	tst	r2, r5
    35a2:	d0fc      	beq.n	359e <trx_frame_read+0xc2>
    35a4:	7e1a      	ldrb	r2, [r3, #24]
    35a6:	420a      	tst	r2, r1
    35a8:	d0fc      	beq.n	35a4 <trx_frame_read+0xc8>
    35aa:	683b      	ldr	r3, [r7, #0]
    35ac:	7e1a      	ldrb	r2, [r3, #24]
    35ae:	420a      	tst	r2, r1
    35b0:	d011      	beq.n	35d6 <trx_frame_read+0xfa>
    35b2:	8b5a      	ldrh	r2, [r3, #26]
    35b4:	420a      	tst	r2, r1
    35b6:	d004      	beq.n	35c2 <trx_frame_read+0xe6>
    35b8:	8b5a      	ldrh	r2, [r3, #26]
    35ba:	4658      	mov	r0, fp
    35bc:	4302      	orrs	r2, r0
    35be:	b292      	uxth	r2, r2
    35c0:	835a      	strh	r2, [r3, #26]
    35c2:	4812      	ldr	r0, [pc, #72]	; (360c <trx_frame_read+0x130>)
    35c4:	7982      	ldrb	r2, [r0, #6]
    35c6:	2a01      	cmp	r2, #1
    35c8:	d103      	bne.n	35d2 <trx_frame_read+0xf6>
    35ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
    35cc:	05c0      	lsls	r0, r0, #23
    35ce:	0dc0      	lsrs	r0, r0, #23
    35d0:	e001      	b.n	35d6 <trx_frame_read+0xfa>
    35d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    35d4:	b2c0      	uxtb	r0, r0
    35d6:	7030      	strb	r0, [r6, #0]
    35d8:	3601      	adds	r6, #1
    35da:	454e      	cmp	r6, r9
    35dc:	d1d5      	bne.n	358a <trx_frame_read+0xae>
    35de:	480b      	ldr	r0, [pc, #44]	; (360c <trx_frame_read+0x130>)
    35e0:	490b      	ldr	r1, [pc, #44]	; (3610 <trx_frame_read+0x134>)
    35e2:	2200      	movs	r2, #0
    35e4:	4b0b      	ldr	r3, [pc, #44]	; (3614 <trx_frame_read+0x138>)
    35e6:	4798      	blx	r3
    35e8:	9901      	ldr	r1, [sp, #4]
    35ea:	2900      	cmp	r1, #0
    35ec:	d005      	beq.n	35fa <trx_frame_read+0x11e>
    35ee:	2201      	movs	r2, #1
    35f0:	4b05      	ldr	r3, [pc, #20]	; (3608 <trx_frame_read+0x12c>)
    35f2:	701a      	strb	r2, [r3, #0]
    35f4:	f3bf 8f5f 	dmb	sy
    35f8:	b662      	cpsie	i
    35fa:	b003      	add	sp, #12
    35fc:	bc3c      	pop	{r2, r3, r4, r5}
    35fe:	4690      	mov	r8, r2
    3600:	4699      	mov	r9, r3
    3602:	46a2      	mov	sl, r4
    3604:	46ab      	mov	fp, r5
    3606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3608:	20000008 	.word	0x20000008
    360c:	20000874 	.word	0x20000874
    3610:	20000838 	.word	0x20000838
    3614:	00000a49 	.word	0x00000a49
    3618:	20000830 	.word	0x20000830

0000361c <trx_frame_write>:
    361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    361e:	464f      	mov	r7, r9
    3620:	4646      	mov	r6, r8
    3622:	b4c0      	push	{r6, r7}
    3624:	1c04      	adds	r4, r0, #0
    3626:	1c0d      	adds	r5, r1, #0
    3628:	f3ef 8610 	mrs	r6, PRIMASK
    362c:	4271      	negs	r1, r6
    362e:	4171      	adcs	r1, r6
    3630:	4689      	mov	r9, r1
    3632:	b672      	cpsid	i
    3634:	f3bf 8f5f 	dmb	sy
    3638:	2200      	movs	r2, #0
    363a:	4b3c      	ldr	r3, [pc, #240]	; (372c <trx_frame_write+0x110>)
    363c:	701a      	strb	r2, [r3, #0]
    363e:	4f3c      	ldr	r7, [pc, #240]	; (3730 <trx_frame_write+0x114>)
    3640:	1c38      	adds	r0, r7, #0
    3642:	493c      	ldr	r1, [pc, #240]	; (3734 <trx_frame_write+0x118>)
    3644:	2201      	movs	r2, #1
    3646:	4b3c      	ldr	r3, [pc, #240]	; (3738 <trx_frame_write+0x11c>)
    3648:	4798      	blx	r3
    364a:	683b      	ldr	r3, [r7, #0]
    364c:	2101      	movs	r1, #1
    364e:	7e1a      	ldrb	r2, [r3, #24]
    3650:	420a      	tst	r2, r1
    3652:	d0fc      	beq.n	364e <trx_frame_write+0x32>
    3654:	7e1a      	ldrb	r2, [r3, #24]
    3656:	07d1      	lsls	r1, r2, #31
    3658:	d501      	bpl.n	365e <trx_frame_write+0x42>
    365a:	2260      	movs	r2, #96	; 0x60
    365c:	629a      	str	r2, [r3, #40]	; 0x28
    365e:	2102      	movs	r1, #2
    3660:	7e1a      	ldrb	r2, [r3, #24]
    3662:	420a      	tst	r2, r1
    3664:	d0fc      	beq.n	3660 <trx_frame_write+0x44>
    3666:	2104      	movs	r1, #4
    3668:	7e1a      	ldrb	r2, [r3, #24]
    366a:	420a      	tst	r2, r1
    366c:	d0fc      	beq.n	3668 <trx_frame_write+0x4c>
    366e:	7e1a      	ldrb	r2, [r3, #24]
    3670:	0751      	lsls	r1, r2, #29
    3672:	d50f      	bpl.n	3694 <trx_frame_write+0x78>
    3674:	8b5a      	ldrh	r2, [r3, #26]
    3676:	0751      	lsls	r1, r2, #29
    3678:	d503      	bpl.n	3682 <trx_frame_write+0x66>
    367a:	8b59      	ldrh	r1, [r3, #26]
    367c:	2204      	movs	r2, #4
    367e:	430a      	orrs	r2, r1
    3680:	835a      	strh	r2, [r3, #26]
    3682:	4a2b      	ldr	r2, [pc, #172]	; (3730 <trx_frame_write+0x114>)
    3684:	7992      	ldrb	r2, [r2, #6]
    3686:	2a01      	cmp	r2, #1
    3688:	d10e      	bne.n	36a8 <trx_frame_write+0x8c>
    368a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    368c:	05c9      	lsls	r1, r1, #23
    368e:	0dc9      	lsrs	r1, r1, #23
    3690:	4a2a      	ldr	r2, [pc, #168]	; (373c <trx_frame_write+0x120>)
    3692:	8011      	strh	r1, [r2, #0]
    3694:	4a26      	ldr	r2, [pc, #152]	; (3730 <trx_frame_write+0x114>)
    3696:	7992      	ldrb	r2, [r2, #6]
    3698:	4690      	mov	r8, r2
    369a:	1c26      	adds	r6, r4, #0
    369c:	2701      	movs	r7, #1
    369e:	2002      	movs	r0, #2
    36a0:	2404      	movs	r4, #4
    36a2:	2204      	movs	r2, #4
    36a4:	4694      	mov	ip, r2
    36a6:	e02b      	b.n	3700 <trx_frame_write+0xe4>
    36a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    36aa:	b2c9      	uxtb	r1, r1
    36ac:	4a23      	ldr	r2, [pc, #140]	; (373c <trx_frame_write+0x120>)
    36ae:	8011      	strh	r1, [r2, #0]
    36b0:	e7f0      	b.n	3694 <trx_frame_write+0x78>
    36b2:	7e1a      	ldrb	r2, [r3, #24]
    36b4:	423a      	tst	r2, r7
    36b6:	d0fc      	beq.n	36b2 <trx_frame_write+0x96>
    36b8:	7831      	ldrb	r1, [r6, #0]
    36ba:	7e1a      	ldrb	r2, [r3, #24]
    36bc:	423a      	tst	r2, r7
    36be:	d000      	beq.n	36c2 <trx_frame_write+0xa6>
    36c0:	6299      	str	r1, [r3, #40]	; 0x28
    36c2:	7e1a      	ldrb	r2, [r3, #24]
    36c4:	4202      	tst	r2, r0
    36c6:	d0fc      	beq.n	36c2 <trx_frame_write+0xa6>
    36c8:	7e1a      	ldrb	r2, [r3, #24]
    36ca:	4222      	tst	r2, r4
    36cc:	d0fc      	beq.n	36c8 <trx_frame_write+0xac>
    36ce:	7e1a      	ldrb	r2, [r3, #24]
    36d0:	4222      	tst	r2, r4
    36d2:	d014      	beq.n	36fe <trx_frame_write+0xe2>
    36d4:	8b5a      	ldrh	r2, [r3, #26]
    36d6:	4222      	tst	r2, r4
    36d8:	d004      	beq.n	36e4 <trx_frame_write+0xc8>
    36da:	8b5a      	ldrh	r2, [r3, #26]
    36dc:	4661      	mov	r1, ip
    36de:	430a      	orrs	r2, r1
    36e0:	b292      	uxth	r2, r2
    36e2:	835a      	strh	r2, [r3, #26]
    36e4:	4642      	mov	r2, r8
    36e6:	2a01      	cmp	r2, #1
    36e8:	d105      	bne.n	36f6 <trx_frame_write+0xda>
    36ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    36ec:	05d2      	lsls	r2, r2, #23
    36ee:	0dd2      	lsrs	r2, r2, #23
    36f0:	4912      	ldr	r1, [pc, #72]	; (373c <trx_frame_write+0x120>)
    36f2:	800a      	strh	r2, [r1, #0]
    36f4:	e003      	b.n	36fe <trx_frame_write+0xe2>
    36f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    36f8:	b2d2      	uxtb	r2, r2
    36fa:	4910      	ldr	r1, [pc, #64]	; (373c <trx_frame_write+0x120>)
    36fc:	800a      	strh	r2, [r1, #0]
    36fe:	3601      	adds	r6, #1
    3700:	3d01      	subs	r5, #1
    3702:	b2ed      	uxtb	r5, r5
    3704:	2dff      	cmp	r5, #255	; 0xff
    3706:	d1d4      	bne.n	36b2 <trx_frame_write+0x96>
    3708:	4809      	ldr	r0, [pc, #36]	; (3730 <trx_frame_write+0x114>)
    370a:	490a      	ldr	r1, [pc, #40]	; (3734 <trx_frame_write+0x118>)
    370c:	2200      	movs	r2, #0
    370e:	4b0a      	ldr	r3, [pc, #40]	; (3738 <trx_frame_write+0x11c>)
    3710:	4798      	blx	r3
    3712:	464a      	mov	r2, r9
    3714:	2a00      	cmp	r2, #0
    3716:	d005      	beq.n	3724 <trx_frame_write+0x108>
    3718:	2201      	movs	r2, #1
    371a:	4b04      	ldr	r3, [pc, #16]	; (372c <trx_frame_write+0x110>)
    371c:	701a      	strb	r2, [r3, #0]
    371e:	f3bf 8f5f 	dmb	sy
    3722:	b662      	cpsie	i
    3724:	bc0c      	pop	{r2, r3}
    3726:	4690      	mov	r8, r2
    3728:	4699      	mov	r9, r3
    372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    372c:	20000008 	.word	0x20000008
    3730:	20000874 	.word	0x20000874
    3734:	20000838 	.word	0x20000838
    3738:	00000a49 	.word	0x00000a49
    373c:	20000830 	.word	0x20000830

00003740 <trx_sram_write>:
    3740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3742:	464f      	mov	r7, r9
    3744:	4646      	mov	r6, r8
    3746:	b4c0      	push	{r6, r7}
    3748:	1c07      	adds	r7, r0, #0
    374a:	1c0c      	adds	r4, r1, #0
    374c:	1c15      	adds	r5, r2, #0
    374e:	f3ef 8610 	mrs	r6, PRIMASK
    3752:	4271      	negs	r1, r6
    3754:	4171      	adcs	r1, r6
    3756:	4689      	mov	r9, r1
    3758:	b672      	cpsid	i
    375a:	f3bf 8f5f 	dmb	sy
    375e:	2200      	movs	r2, #0
    3760:	4b50      	ldr	r3, [pc, #320]	; (38a4 <trx_sram_write+0x164>)
    3762:	701a      	strb	r2, [r3, #0]
    3764:	4e50      	ldr	r6, [pc, #320]	; (38a8 <trx_sram_write+0x168>)
    3766:	1c30      	adds	r0, r6, #0
    3768:	4950      	ldr	r1, [pc, #320]	; (38ac <trx_sram_write+0x16c>)
    376a:	2201      	movs	r2, #1
    376c:	4b50      	ldr	r3, [pc, #320]	; (38b0 <trx_sram_write+0x170>)
    376e:	4798      	blx	r3
    3770:	6833      	ldr	r3, [r6, #0]
    3772:	2101      	movs	r1, #1
    3774:	7e1a      	ldrb	r2, [r3, #24]
    3776:	420a      	tst	r2, r1
    3778:	d0fc      	beq.n	3774 <trx_sram_write+0x34>
    377a:	7e1a      	ldrb	r2, [r3, #24]
    377c:	07d1      	lsls	r1, r2, #31
    377e:	d501      	bpl.n	3784 <trx_sram_write+0x44>
    3780:	2240      	movs	r2, #64	; 0x40
    3782:	629a      	str	r2, [r3, #40]	; 0x28
    3784:	2102      	movs	r1, #2
    3786:	7e1a      	ldrb	r2, [r3, #24]
    3788:	420a      	tst	r2, r1
    378a:	d0fc      	beq.n	3786 <trx_sram_write+0x46>
    378c:	2104      	movs	r1, #4
    378e:	7e1a      	ldrb	r2, [r3, #24]
    3790:	420a      	tst	r2, r1
    3792:	d0fc      	beq.n	378e <trx_sram_write+0x4e>
    3794:	7e1a      	ldrb	r2, [r3, #24]
    3796:	0751      	lsls	r1, r2, #29
    3798:	d514      	bpl.n	37c4 <trx_sram_write+0x84>
    379a:	8b5a      	ldrh	r2, [r3, #26]
    379c:	0751      	lsls	r1, r2, #29
    379e:	d503      	bpl.n	37a8 <trx_sram_write+0x68>
    37a0:	8b59      	ldrh	r1, [r3, #26]
    37a2:	2204      	movs	r2, #4
    37a4:	430a      	orrs	r2, r1
    37a6:	835a      	strh	r2, [r3, #26]
    37a8:	4a3f      	ldr	r2, [pc, #252]	; (38a8 <trx_sram_write+0x168>)
    37aa:	7992      	ldrb	r2, [r2, #6]
    37ac:	2a01      	cmp	r2, #1
    37ae:	d105      	bne.n	37bc <trx_sram_write+0x7c>
    37b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    37b2:	05c9      	lsls	r1, r1, #23
    37b4:	0dc9      	lsrs	r1, r1, #23
    37b6:	4a3f      	ldr	r2, [pc, #252]	; (38b4 <trx_sram_write+0x174>)
    37b8:	8011      	strh	r1, [r2, #0]
    37ba:	e003      	b.n	37c4 <trx_sram_write+0x84>
    37bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    37be:	b2c9      	uxtb	r1, r1
    37c0:	4a3c      	ldr	r2, [pc, #240]	; (38b4 <trx_sram_write+0x174>)
    37c2:	8011      	strh	r1, [r2, #0]
    37c4:	2101      	movs	r1, #1
    37c6:	7e1a      	ldrb	r2, [r3, #24]
    37c8:	420a      	tst	r2, r1
    37ca:	d0fc      	beq.n	37c6 <trx_sram_write+0x86>
    37cc:	7e1a      	ldrb	r2, [r3, #24]
    37ce:	07d1      	lsls	r1, r2, #31
    37d0:	d500      	bpl.n	37d4 <trx_sram_write+0x94>
    37d2:	629f      	str	r7, [r3, #40]	; 0x28
    37d4:	2102      	movs	r1, #2
    37d6:	7e1a      	ldrb	r2, [r3, #24]
    37d8:	420a      	tst	r2, r1
    37da:	d0fc      	beq.n	37d6 <trx_sram_write+0x96>
    37dc:	2104      	movs	r1, #4
    37de:	7e1a      	ldrb	r2, [r3, #24]
    37e0:	420a      	tst	r2, r1
    37e2:	d0fc      	beq.n	37de <trx_sram_write+0x9e>
    37e4:	7e1a      	ldrb	r2, [r3, #24]
    37e6:	0751      	lsls	r1, r2, #29
    37e8:	d50f      	bpl.n	380a <trx_sram_write+0xca>
    37ea:	8b5a      	ldrh	r2, [r3, #26]
    37ec:	0751      	lsls	r1, r2, #29
    37ee:	d503      	bpl.n	37f8 <trx_sram_write+0xb8>
    37f0:	8b59      	ldrh	r1, [r3, #26]
    37f2:	2204      	movs	r2, #4
    37f4:	430a      	orrs	r2, r1
    37f6:	835a      	strh	r2, [r3, #26]
    37f8:	4a2b      	ldr	r2, [pc, #172]	; (38a8 <trx_sram_write+0x168>)
    37fa:	7992      	ldrb	r2, [r2, #6]
    37fc:	2a01      	cmp	r2, #1
    37fe:	d10e      	bne.n	381e <trx_sram_write+0xde>
    3800:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3802:	05c9      	lsls	r1, r1, #23
    3804:	0dc9      	lsrs	r1, r1, #23
    3806:	4a2b      	ldr	r2, [pc, #172]	; (38b4 <trx_sram_write+0x174>)
    3808:	8011      	strh	r1, [r2, #0]
    380a:	4a27      	ldr	r2, [pc, #156]	; (38a8 <trx_sram_write+0x168>)
    380c:	7992      	ldrb	r2, [r2, #6]
    380e:	4690      	mov	r8, r2
    3810:	1c26      	adds	r6, r4, #0
    3812:	2701      	movs	r7, #1
    3814:	2102      	movs	r1, #2
    3816:	2404      	movs	r4, #4
    3818:	2204      	movs	r2, #4
    381a:	4694      	mov	ip, r2
    381c:	e02b      	b.n	3876 <trx_sram_write+0x136>
    381e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3820:	b2c9      	uxtb	r1, r1
    3822:	4a24      	ldr	r2, [pc, #144]	; (38b4 <trx_sram_write+0x174>)
    3824:	8011      	strh	r1, [r2, #0]
    3826:	e7f0      	b.n	380a <trx_sram_write+0xca>
    3828:	7e18      	ldrb	r0, [r3, #24]
    382a:	4238      	tst	r0, r7
    382c:	d0fc      	beq.n	3828 <trx_sram_write+0xe8>
    382e:	7832      	ldrb	r2, [r6, #0]
    3830:	7e18      	ldrb	r0, [r3, #24]
    3832:	4238      	tst	r0, r7
    3834:	d000      	beq.n	3838 <trx_sram_write+0xf8>
    3836:	629a      	str	r2, [r3, #40]	; 0x28
    3838:	7e18      	ldrb	r0, [r3, #24]
    383a:	4208      	tst	r0, r1
    383c:	d0fc      	beq.n	3838 <trx_sram_write+0xf8>
    383e:	7e18      	ldrb	r0, [r3, #24]
    3840:	4220      	tst	r0, r4
    3842:	d0fc      	beq.n	383e <trx_sram_write+0xfe>
    3844:	7e18      	ldrb	r0, [r3, #24]
    3846:	4220      	tst	r0, r4
    3848:	d014      	beq.n	3874 <trx_sram_write+0x134>
    384a:	8b58      	ldrh	r0, [r3, #26]
    384c:	4220      	tst	r0, r4
    384e:	d004      	beq.n	385a <trx_sram_write+0x11a>
    3850:	8b58      	ldrh	r0, [r3, #26]
    3852:	4662      	mov	r2, ip
    3854:	4310      	orrs	r0, r2
    3856:	b280      	uxth	r0, r0
    3858:	8358      	strh	r0, [r3, #26]
    385a:	4642      	mov	r2, r8
    385c:	2a01      	cmp	r2, #1
    385e:	d105      	bne.n	386c <trx_sram_write+0x12c>
    3860:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3862:	05c0      	lsls	r0, r0, #23
    3864:	0dc0      	lsrs	r0, r0, #23
    3866:	4a13      	ldr	r2, [pc, #76]	; (38b4 <trx_sram_write+0x174>)
    3868:	8010      	strh	r0, [r2, #0]
    386a:	e003      	b.n	3874 <trx_sram_write+0x134>
    386c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    386e:	b2c0      	uxtb	r0, r0
    3870:	4a10      	ldr	r2, [pc, #64]	; (38b4 <trx_sram_write+0x174>)
    3872:	8010      	strh	r0, [r2, #0]
    3874:	3601      	adds	r6, #1
    3876:	3d01      	subs	r5, #1
    3878:	b2ed      	uxtb	r5, r5
    387a:	2dff      	cmp	r5, #255	; 0xff
    387c:	d1d4      	bne.n	3828 <trx_sram_write+0xe8>
    387e:	480a      	ldr	r0, [pc, #40]	; (38a8 <trx_sram_write+0x168>)
    3880:	490a      	ldr	r1, [pc, #40]	; (38ac <trx_sram_write+0x16c>)
    3882:	2200      	movs	r2, #0
    3884:	4b0a      	ldr	r3, [pc, #40]	; (38b0 <trx_sram_write+0x170>)
    3886:	4798      	blx	r3
    3888:	464b      	mov	r3, r9
    388a:	2b00      	cmp	r3, #0
    388c:	d005      	beq.n	389a <trx_sram_write+0x15a>
    388e:	2201      	movs	r2, #1
    3890:	4b04      	ldr	r3, [pc, #16]	; (38a4 <trx_sram_write+0x164>)
    3892:	701a      	strb	r2, [r3, #0]
    3894:	f3bf 8f5f 	dmb	sy
    3898:	b662      	cpsie	i
    389a:	bc0c      	pop	{r2, r3}
    389c:	4690      	mov	r8, r2
    389e:	4699      	mov	r9, r3
    38a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	20000008 	.word	0x20000008
    38a8:	20000874 	.word	0x20000874
    38ac:	20000838 	.word	0x20000838
    38b0:	00000a49 	.word	0x00000a49
    38b4:	20000830 	.word	0x20000830

000038b8 <trx_sram_read>:
    38b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ba:	465f      	mov	r7, fp
    38bc:	4656      	mov	r6, sl
    38be:	464d      	mov	r5, r9
    38c0:	4644      	mov	r4, r8
    38c2:	b4f0      	push	{r4, r5, r6, r7}
    38c4:	b083      	sub	sp, #12
    38c6:	1c05      	adds	r5, r0, #0
    38c8:	1c0e      	adds	r6, r1, #0
    38ca:	1c14      	adds	r4, r2, #0
    38cc:	2001      	movs	r0, #1
    38ce:	4b5b      	ldr	r3, [pc, #364]	; (3a3c <trx_sram_read+0x184>)
    38d0:	4798      	blx	r3
    38d2:	f3ef 8710 	mrs	r7, PRIMASK
    38d6:	4279      	negs	r1, r7
    38d8:	4179      	adcs	r1, r7
    38da:	9101      	str	r1, [sp, #4]
    38dc:	b672      	cpsid	i
    38de:	f3bf 8f5f 	dmb	sy
    38e2:	2200      	movs	r2, #0
    38e4:	4b56      	ldr	r3, [pc, #344]	; (3a40 <trx_sram_read+0x188>)
    38e6:	701a      	strb	r2, [r3, #0]
    38e8:	4f56      	ldr	r7, [pc, #344]	; (3a44 <trx_sram_read+0x18c>)
    38ea:	1c38      	adds	r0, r7, #0
    38ec:	4956      	ldr	r1, [pc, #344]	; (3a48 <trx_sram_read+0x190>)
    38ee:	2201      	movs	r2, #1
    38f0:	4b56      	ldr	r3, [pc, #344]	; (3a4c <trx_sram_read+0x194>)
    38f2:	4798      	blx	r3
    38f4:	683b      	ldr	r3, [r7, #0]
    38f6:	2101      	movs	r1, #1
    38f8:	7e1a      	ldrb	r2, [r3, #24]
    38fa:	420a      	tst	r2, r1
    38fc:	d0fc      	beq.n	38f8 <trx_sram_read+0x40>
    38fe:	7e1a      	ldrb	r2, [r3, #24]
    3900:	07d1      	lsls	r1, r2, #31
    3902:	d501      	bpl.n	3908 <trx_sram_read+0x50>
    3904:	2200      	movs	r2, #0
    3906:	629a      	str	r2, [r3, #40]	; 0x28
    3908:	2102      	movs	r1, #2
    390a:	7e1a      	ldrb	r2, [r3, #24]
    390c:	420a      	tst	r2, r1
    390e:	d0fc      	beq.n	390a <trx_sram_read+0x52>
    3910:	2204      	movs	r2, #4
    3912:	7e19      	ldrb	r1, [r3, #24]
    3914:	4211      	tst	r1, r2
    3916:	d0fc      	beq.n	3912 <trx_sram_read+0x5a>
    3918:	7e1a      	ldrb	r2, [r3, #24]
    391a:	0751      	lsls	r1, r2, #29
    391c:	d514      	bpl.n	3948 <trx_sram_read+0x90>
    391e:	8b5a      	ldrh	r2, [r3, #26]
    3920:	0751      	lsls	r1, r2, #29
    3922:	d503      	bpl.n	392c <trx_sram_read+0x74>
    3924:	8b59      	ldrh	r1, [r3, #26]
    3926:	2204      	movs	r2, #4
    3928:	430a      	orrs	r2, r1
    392a:	835a      	strh	r2, [r3, #26]
    392c:	4a45      	ldr	r2, [pc, #276]	; (3a44 <trx_sram_read+0x18c>)
    392e:	7992      	ldrb	r2, [r2, #6]
    3930:	2a01      	cmp	r2, #1
    3932:	d105      	bne.n	3940 <trx_sram_read+0x88>
    3934:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3936:	05c9      	lsls	r1, r1, #23
    3938:	0dc9      	lsrs	r1, r1, #23
    393a:	4a45      	ldr	r2, [pc, #276]	; (3a50 <trx_sram_read+0x198>)
    393c:	8011      	strh	r1, [r2, #0]
    393e:	e003      	b.n	3948 <trx_sram_read+0x90>
    3940:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3942:	b2c9      	uxtb	r1, r1
    3944:	4a42      	ldr	r2, [pc, #264]	; (3a50 <trx_sram_read+0x198>)
    3946:	8011      	strh	r1, [r2, #0]
    3948:	2201      	movs	r2, #1
    394a:	7e19      	ldrb	r1, [r3, #24]
    394c:	4211      	tst	r1, r2
    394e:	d0fc      	beq.n	394a <trx_sram_read+0x92>
    3950:	7e1a      	ldrb	r2, [r3, #24]
    3952:	07d1      	lsls	r1, r2, #31
    3954:	d500      	bpl.n	3958 <trx_sram_read+0xa0>
    3956:	629d      	str	r5, [r3, #40]	; 0x28
    3958:	2202      	movs	r2, #2
    395a:	7e19      	ldrb	r1, [r3, #24]
    395c:	4211      	tst	r1, r2
    395e:	d0fc      	beq.n	395a <trx_sram_read+0xa2>
    3960:	2204      	movs	r2, #4
    3962:	7e19      	ldrb	r1, [r3, #24]
    3964:	4211      	tst	r1, r2
    3966:	d0fc      	beq.n	3962 <trx_sram_read+0xaa>
    3968:	7e1a      	ldrb	r2, [r3, #24]
    396a:	0751      	lsls	r1, r2, #29
    396c:	d50f      	bpl.n	398e <trx_sram_read+0xd6>
    396e:	8b5a      	ldrh	r2, [r3, #26]
    3970:	0751      	lsls	r1, r2, #29
    3972:	d503      	bpl.n	397c <trx_sram_read+0xc4>
    3974:	8b59      	ldrh	r1, [r3, #26]
    3976:	2204      	movs	r2, #4
    3978:	430a      	orrs	r2, r1
    397a:	835a      	strh	r2, [r3, #26]
    397c:	4a31      	ldr	r2, [pc, #196]	; (3a44 <trx_sram_read+0x18c>)
    397e:	7992      	ldrb	r2, [r2, #6]
    3980:	2a01      	cmp	r2, #1
    3982:	d109      	bne.n	3998 <trx_sram_read+0xe0>
    3984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3986:	05d2      	lsls	r2, r2, #23
    3988:	0dd2      	lsrs	r2, r2, #23
    398a:	4b31      	ldr	r3, [pc, #196]	; (3a50 <trx_sram_read+0x198>)
    398c:	801a      	strh	r2, [r3, #0]
    398e:	1e63      	subs	r3, r4, #1
    3990:	b2db      	uxtb	r3, r3
    3992:	2c00      	cmp	r4, #0
    3994:	d105      	bne.n	39a2 <trx_sram_read+0xea>
    3996:	e03b      	b.n	3a10 <trx_sram_read+0x158>
    3998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    399a:	b2d2      	uxtb	r2, r2
    399c:	4b2c      	ldr	r3, [pc, #176]	; (3a50 <trx_sram_read+0x198>)
    399e:	801a      	strh	r2, [r3, #0]
    39a0:	e7f5      	b.n	398e <trx_sram_read+0xd6>
    39a2:	3301      	adds	r3, #1
    39a4:	199b      	adds	r3, r3, r6
    39a6:	4699      	mov	r9, r3
    39a8:	2100      	movs	r1, #0
    39aa:	4a26      	ldr	r2, [pc, #152]	; (3a44 <trx_sram_read+0x18c>)
    39ac:	4690      	mov	r8, r2
    39ae:	2401      	movs	r4, #1
    39b0:	468a      	mov	sl, r1
    39b2:	2502      	movs	r5, #2
    39b4:	2004      	movs	r0, #4
    39b6:	1c17      	adds	r7, r2, #0
    39b8:	2204      	movs	r2, #4
    39ba:	4693      	mov	fp, r2
    39bc:	4642      	mov	r2, r8
    39be:	6813      	ldr	r3, [r2, #0]
    39c0:	7e1a      	ldrb	r2, [r3, #24]
    39c2:	4222      	tst	r2, r4
    39c4:	d0fc      	beq.n	39c0 <trx_sram_read+0x108>
    39c6:	7e1a      	ldrb	r2, [r3, #24]
    39c8:	4222      	tst	r2, r4
    39ca:	d001      	beq.n	39d0 <trx_sram_read+0x118>
    39cc:	4652      	mov	r2, sl
    39ce:	629a      	str	r2, [r3, #40]	; 0x28
    39d0:	7e1a      	ldrb	r2, [r3, #24]
    39d2:	422a      	tst	r2, r5
    39d4:	d0fc      	beq.n	39d0 <trx_sram_read+0x118>
    39d6:	7e1a      	ldrb	r2, [r3, #24]
    39d8:	4202      	tst	r2, r0
    39da:	d0fc      	beq.n	39d6 <trx_sram_read+0x11e>
    39dc:	683b      	ldr	r3, [r7, #0]
    39de:	7e1a      	ldrb	r2, [r3, #24]
    39e0:	4202      	tst	r2, r0
    39e2:	d011      	beq.n	3a08 <trx_sram_read+0x150>
    39e4:	8b5a      	ldrh	r2, [r3, #26]
    39e6:	4202      	tst	r2, r0
    39e8:	d004      	beq.n	39f4 <trx_sram_read+0x13c>
    39ea:	8b5a      	ldrh	r2, [r3, #26]
    39ec:	4659      	mov	r1, fp
    39ee:	430a      	orrs	r2, r1
    39f0:	b292      	uxth	r2, r2
    39f2:	835a      	strh	r2, [r3, #26]
    39f4:	4913      	ldr	r1, [pc, #76]	; (3a44 <trx_sram_read+0x18c>)
    39f6:	798a      	ldrb	r2, [r1, #6]
    39f8:	2a01      	cmp	r2, #1
    39fa:	d103      	bne.n	3a04 <trx_sram_read+0x14c>
    39fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    39fe:	05c9      	lsls	r1, r1, #23
    3a00:	0dc9      	lsrs	r1, r1, #23
    3a02:	e001      	b.n	3a08 <trx_sram_read+0x150>
    3a04:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3a06:	b2c9      	uxtb	r1, r1
    3a08:	7031      	strb	r1, [r6, #0]
    3a0a:	3601      	adds	r6, #1
    3a0c:	454e      	cmp	r6, r9
    3a0e:	d1d5      	bne.n	39bc <trx_sram_read+0x104>
    3a10:	480c      	ldr	r0, [pc, #48]	; (3a44 <trx_sram_read+0x18c>)
    3a12:	490d      	ldr	r1, [pc, #52]	; (3a48 <trx_sram_read+0x190>)
    3a14:	2200      	movs	r2, #0
    3a16:	4b0d      	ldr	r3, [pc, #52]	; (3a4c <trx_sram_read+0x194>)
    3a18:	4798      	blx	r3
    3a1a:	9a01      	ldr	r2, [sp, #4]
    3a1c:	2a00      	cmp	r2, #0
    3a1e:	d005      	beq.n	3a2c <trx_sram_read+0x174>
    3a20:	2201      	movs	r2, #1
    3a22:	4b07      	ldr	r3, [pc, #28]	; (3a40 <trx_sram_read+0x188>)
    3a24:	701a      	strb	r2, [r3, #0]
    3a26:	f3bf 8f5f 	dmb	sy
    3a2a:	b662      	cpsie	i
    3a2c:	b003      	add	sp, #12
    3a2e:	bc3c      	pop	{r2, r3, r4, r5}
    3a30:	4690      	mov	r8, r2
    3a32:	4699      	mov	r9, r3
    3a34:	46a2      	mov	sl, r4
    3a36:	46ab      	mov	fp, r5
    3a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a3a:	46c0      	nop			; (mov r8, r8)
    3a3c:	00000151 	.word	0x00000151
    3a40:	20000008 	.word	0x20000008
    3a44:	20000874 	.word	0x20000874
    3a48:	20000838 	.word	0x20000838
    3a4c:	00000a49 	.word	0x00000a49
    3a50:	20000830 	.word	0x20000830

00003a54 <trx_aes_wrrd>:
    3a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a56:	465f      	mov	r7, fp
    3a58:	4656      	mov	r6, sl
    3a5a:	464d      	mov	r5, r9
    3a5c:	4644      	mov	r4, r8
    3a5e:	b4f0      	push	{r4, r5, r6, r7}
    3a60:	b083      	sub	sp, #12
    3a62:	1c05      	adds	r5, r0, #0
    3a64:	4688      	mov	r8, r1
    3a66:	1c14      	adds	r4, r2, #0
    3a68:	2001      	movs	r0, #1
    3a6a:	4b83      	ldr	r3, [pc, #524]	; (3c78 <trx_aes_wrrd+0x224>)
    3a6c:	4798      	blx	r3
    3a6e:	2000      	movs	r0, #0
    3a70:	2100      	movs	r1, #0
    3a72:	4b82      	ldr	r3, [pc, #520]	; (3c7c <trx_aes_wrrd+0x228>)
    3a74:	4798      	blx	r3
    3a76:	4e82      	ldr	r6, [pc, #520]	; (3c80 <trx_aes_wrrd+0x22c>)
    3a78:	1c30      	adds	r0, r6, #0
    3a7a:	4982      	ldr	r1, [pc, #520]	; (3c84 <trx_aes_wrrd+0x230>)
    3a7c:	2201      	movs	r2, #1
    3a7e:	4b82      	ldr	r3, [pc, #520]	; (3c88 <trx_aes_wrrd+0x234>)
    3a80:	4798      	blx	r3
    3a82:	6833      	ldr	r3, [r6, #0]
    3a84:	2101      	movs	r1, #1
    3a86:	7e1a      	ldrb	r2, [r3, #24]
    3a88:	420a      	tst	r2, r1
    3a8a:	d0fc      	beq.n	3a86 <trx_aes_wrrd+0x32>
    3a8c:	7e1a      	ldrb	r2, [r3, #24]
    3a8e:	07d0      	lsls	r0, r2, #31
    3a90:	d501      	bpl.n	3a96 <trx_aes_wrrd+0x42>
    3a92:	2240      	movs	r2, #64	; 0x40
    3a94:	629a      	str	r2, [r3, #40]	; 0x28
    3a96:	2102      	movs	r1, #2
    3a98:	7e1a      	ldrb	r2, [r3, #24]
    3a9a:	420a      	tst	r2, r1
    3a9c:	d0fc      	beq.n	3a98 <trx_aes_wrrd+0x44>
    3a9e:	2104      	movs	r1, #4
    3aa0:	7e1a      	ldrb	r2, [r3, #24]
    3aa2:	420a      	tst	r2, r1
    3aa4:	d0fc      	beq.n	3aa0 <trx_aes_wrrd+0x4c>
    3aa6:	7e1a      	ldrb	r2, [r3, #24]
    3aa8:	0751      	lsls	r1, r2, #29
    3aaa:	d514      	bpl.n	3ad6 <trx_aes_wrrd+0x82>
    3aac:	8b5a      	ldrh	r2, [r3, #26]
    3aae:	0756      	lsls	r6, r2, #29
    3ab0:	d503      	bpl.n	3aba <trx_aes_wrrd+0x66>
    3ab2:	8b59      	ldrh	r1, [r3, #26]
    3ab4:	2204      	movs	r2, #4
    3ab6:	430a      	orrs	r2, r1
    3ab8:	835a      	strh	r2, [r3, #26]
    3aba:	4a71      	ldr	r2, [pc, #452]	; (3c80 <trx_aes_wrrd+0x22c>)
    3abc:	7992      	ldrb	r2, [r2, #6]
    3abe:	2a01      	cmp	r2, #1
    3ac0:	d105      	bne.n	3ace <trx_aes_wrrd+0x7a>
    3ac2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ac4:	05c9      	lsls	r1, r1, #23
    3ac6:	0dc9      	lsrs	r1, r1, #23
    3ac8:	4a70      	ldr	r2, [pc, #448]	; (3c8c <trx_aes_wrrd+0x238>)
    3aca:	8011      	strh	r1, [r2, #0]
    3acc:	e003      	b.n	3ad6 <trx_aes_wrrd+0x82>
    3ace:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ad0:	b2c9      	uxtb	r1, r1
    3ad2:	4a6e      	ldr	r2, [pc, #440]	; (3c8c <trx_aes_wrrd+0x238>)
    3ad4:	8011      	strh	r1, [r2, #0]
    3ad6:	2101      	movs	r1, #1
    3ad8:	7e1a      	ldrb	r2, [r3, #24]
    3ada:	420a      	tst	r2, r1
    3adc:	d0fc      	beq.n	3ad8 <trx_aes_wrrd+0x84>
    3ade:	7e1a      	ldrb	r2, [r3, #24]
    3ae0:	07d0      	lsls	r0, r2, #31
    3ae2:	d500      	bpl.n	3ae6 <trx_aes_wrrd+0x92>
    3ae4:	629d      	str	r5, [r3, #40]	; 0x28
    3ae6:	2102      	movs	r1, #2
    3ae8:	7e1a      	ldrb	r2, [r3, #24]
    3aea:	420a      	tst	r2, r1
    3aec:	d0fc      	beq.n	3ae8 <trx_aes_wrrd+0x94>
    3aee:	2204      	movs	r2, #4
    3af0:	7e19      	ldrb	r1, [r3, #24]
    3af2:	4211      	tst	r1, r2
    3af4:	d0fc      	beq.n	3af0 <trx_aes_wrrd+0x9c>
    3af6:	7e1a      	ldrb	r2, [r3, #24]
    3af8:	0751      	lsls	r1, r2, #29
    3afa:	d514      	bpl.n	3b26 <trx_aes_wrrd+0xd2>
    3afc:	8b5a      	ldrh	r2, [r3, #26]
    3afe:	0756      	lsls	r6, r2, #29
    3b00:	d503      	bpl.n	3b0a <trx_aes_wrrd+0xb6>
    3b02:	8b59      	ldrh	r1, [r3, #26]
    3b04:	2204      	movs	r2, #4
    3b06:	430a      	orrs	r2, r1
    3b08:	835a      	strh	r2, [r3, #26]
    3b0a:	4a5d      	ldr	r2, [pc, #372]	; (3c80 <trx_aes_wrrd+0x22c>)
    3b0c:	7992      	ldrb	r2, [r2, #6]
    3b0e:	2a01      	cmp	r2, #1
    3b10:	d105      	bne.n	3b1e <trx_aes_wrrd+0xca>
    3b12:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3b14:	05c9      	lsls	r1, r1, #23
    3b16:	0dc9      	lsrs	r1, r1, #23
    3b18:	4a5c      	ldr	r2, [pc, #368]	; (3c8c <trx_aes_wrrd+0x238>)
    3b1a:	8011      	strh	r1, [r2, #0]
    3b1c:	e003      	b.n	3b26 <trx_aes_wrrd+0xd2>
    3b1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3b20:	b2c9      	uxtb	r1, r1
    3b22:	4a5a      	ldr	r2, [pc, #360]	; (3c8c <trx_aes_wrrd+0x238>)
    3b24:	8011      	strh	r1, [r2, #0]
    3b26:	2201      	movs	r2, #1
    3b28:	7e19      	ldrb	r1, [r3, #24]
    3b2a:	4211      	tst	r1, r2
    3b2c:	d0fc      	beq.n	3b28 <trx_aes_wrrd+0xd4>
    3b2e:	4640      	mov	r0, r8
    3b30:	7801      	ldrb	r1, [r0, #0]
    3b32:	7e1a      	ldrb	r2, [r3, #24]
    3b34:	07d6      	lsls	r6, r2, #31
    3b36:	d500      	bpl.n	3b3a <trx_aes_wrrd+0xe6>
    3b38:	6299      	str	r1, [r3, #40]	; 0x28
    3b3a:	2202      	movs	r2, #2
    3b3c:	7e19      	ldrb	r1, [r3, #24]
    3b3e:	4211      	tst	r1, r2
    3b40:	d0fc      	beq.n	3b3c <trx_aes_wrrd+0xe8>
    3b42:	2204      	movs	r2, #4
    3b44:	7e19      	ldrb	r1, [r3, #24]
    3b46:	4211      	tst	r1, r2
    3b48:	d0fc      	beq.n	3b44 <trx_aes_wrrd+0xf0>
    3b4a:	7e1a      	ldrb	r2, [r3, #24]
    3b4c:	0750      	lsls	r0, r2, #29
    3b4e:	d50f      	bpl.n	3b70 <trx_aes_wrrd+0x11c>
    3b50:	8b5a      	ldrh	r2, [r3, #26]
    3b52:	0751      	lsls	r1, r2, #29
    3b54:	d503      	bpl.n	3b5e <trx_aes_wrrd+0x10a>
    3b56:	8b59      	ldrh	r1, [r3, #26]
    3b58:	2204      	movs	r2, #4
    3b5a:	430a      	orrs	r2, r1
    3b5c:	835a      	strh	r2, [r3, #26]
    3b5e:	4a48      	ldr	r2, [pc, #288]	; (3c80 <trx_aes_wrrd+0x22c>)
    3b60:	7992      	ldrb	r2, [r2, #6]
    3b62:	2a01      	cmp	r2, #1
    3b64:	d108      	bne.n	3b78 <trx_aes_wrrd+0x124>
    3b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b68:	05d2      	lsls	r2, r2, #23
    3b6a:	0dd2      	lsrs	r2, r2, #23
    3b6c:	4b47      	ldr	r3, [pc, #284]	; (3c8c <trx_aes_wrrd+0x238>)
    3b6e:	801a      	strh	r2, [r3, #0]
    3b70:	2100      	movs	r1, #0
    3b72:	2c00      	cmp	r4, #0
    3b74:	d047      	beq.n	3c06 <trx_aes_wrrd+0x1b2>
    3b76:	e004      	b.n	3b82 <trx_aes_wrrd+0x12e>
    3b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b7a:	b2d2      	uxtb	r2, r2
    3b7c:	4b43      	ldr	r3, [pc, #268]	; (3c8c <trx_aes_wrrd+0x238>)
    3b7e:	801a      	strh	r2, [r3, #0]
    3b80:	e7f6      	b.n	3b70 <trx_aes_wrrd+0x11c>
    3b82:	4645      	mov	r5, r8
    3b84:	3c01      	subs	r4, #1
    3b86:	b2e4      	uxtb	r4, r4
    3b88:	9401      	str	r4, [sp, #4]
    3b8a:	1c23      	adds	r3, r4, #0
    3b8c:	4443      	add	r3, r8
    3b8e:	3301      	adds	r3, #1
    3b90:	469b      	mov	fp, r3
    3b92:	2100      	movs	r1, #0
    3b94:	4b3a      	ldr	r3, [pc, #232]	; (3c80 <trx_aes_wrrd+0x22c>)
    3b96:	469a      	mov	sl, r3
    3b98:	2001      	movs	r0, #1
    3b9a:	2402      	movs	r4, #2
    3b9c:	2204      	movs	r2, #4
    3b9e:	4699      	mov	r9, r3
    3ba0:	465f      	mov	r7, fp
    3ba2:	4656      	mov	r6, sl
    3ba4:	6833      	ldr	r3, [r6, #0]
    3ba6:	7e1e      	ldrb	r6, [r3, #24]
    3ba8:	4206      	tst	r6, r0
    3baa:	d0fc      	beq.n	3ba6 <trx_aes_wrrd+0x152>
    3bac:	46ac      	mov	ip, r5
    3bae:	786e      	ldrb	r6, [r5, #1]
    3bb0:	46b3      	mov	fp, r6
    3bb2:	7e1e      	ldrb	r6, [r3, #24]
    3bb4:	4206      	tst	r6, r0
    3bb6:	d001      	beq.n	3bbc <trx_aes_wrrd+0x168>
    3bb8:	465e      	mov	r6, fp
    3bba:	629e      	str	r6, [r3, #40]	; 0x28
    3bbc:	7e1e      	ldrb	r6, [r3, #24]
    3bbe:	4226      	tst	r6, r4
    3bc0:	d0fc      	beq.n	3bbc <trx_aes_wrrd+0x168>
    3bc2:	7e1e      	ldrb	r6, [r3, #24]
    3bc4:	4216      	tst	r6, r2
    3bc6:	d0fc      	beq.n	3bc2 <trx_aes_wrrd+0x16e>
    3bc8:	464e      	mov	r6, r9
    3bca:	6833      	ldr	r3, [r6, #0]
    3bcc:	7e1e      	ldrb	r6, [r3, #24]
    3bce:	4216      	tst	r6, r2
    3bd0:	d011      	beq.n	3bf6 <trx_aes_wrrd+0x1a2>
    3bd2:	8b59      	ldrh	r1, [r3, #26]
    3bd4:	4211      	tst	r1, r2
    3bd6:	d004      	beq.n	3be2 <trx_aes_wrrd+0x18e>
    3bd8:	8b59      	ldrh	r1, [r3, #26]
    3bda:	2604      	movs	r6, #4
    3bdc:	4331      	orrs	r1, r6
    3bde:	b289      	uxth	r1, r1
    3be0:	8359      	strh	r1, [r3, #26]
    3be2:	4e27      	ldr	r6, [pc, #156]	; (3c80 <trx_aes_wrrd+0x22c>)
    3be4:	79b1      	ldrb	r1, [r6, #6]
    3be6:	2901      	cmp	r1, #1
    3be8:	d103      	bne.n	3bf2 <trx_aes_wrrd+0x19e>
    3bea:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3bec:	05c9      	lsls	r1, r1, #23
    3bee:	0dc9      	lsrs	r1, r1, #23
    3bf0:	e001      	b.n	3bf6 <trx_aes_wrrd+0x1a2>
    3bf2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3bf4:	b2c9      	uxtb	r1, r1
    3bf6:	4663      	mov	r3, ip
    3bf8:	7019      	strb	r1, [r3, #0]
    3bfa:	3501      	adds	r5, #1
    3bfc:	42bd      	cmp	r5, r7
    3bfe:	d1d0      	bne.n	3ba2 <trx_aes_wrrd+0x14e>
    3c00:	9b01      	ldr	r3, [sp, #4]
    3c02:	3301      	adds	r3, #1
    3c04:	4498      	add	r8, r3
    3c06:	4b1e      	ldr	r3, [pc, #120]	; (3c80 <trx_aes_wrrd+0x22c>)
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	2001      	movs	r0, #1
    3c0c:	7e1a      	ldrb	r2, [r3, #24]
    3c0e:	4202      	tst	r2, r0
    3c10:	d0fc      	beq.n	3c0c <trx_aes_wrrd+0x1b8>
    3c12:	7e1a      	ldrb	r2, [r3, #24]
    3c14:	07d6      	lsls	r6, r2, #31
    3c16:	d501      	bpl.n	3c1c <trx_aes_wrrd+0x1c8>
    3c18:	2200      	movs	r2, #0
    3c1a:	629a      	str	r2, [r3, #40]	; 0x28
    3c1c:	2002      	movs	r0, #2
    3c1e:	7e1a      	ldrb	r2, [r3, #24]
    3c20:	4202      	tst	r2, r0
    3c22:	d0fc      	beq.n	3c1e <trx_aes_wrrd+0x1ca>
    3c24:	2004      	movs	r0, #4
    3c26:	7e1a      	ldrb	r2, [r3, #24]
    3c28:	4202      	tst	r2, r0
    3c2a:	d0fc      	beq.n	3c26 <trx_aes_wrrd+0x1d2>
    3c2c:	7e1a      	ldrb	r2, [r3, #24]
    3c2e:	0750      	lsls	r0, r2, #29
    3c30:	d510      	bpl.n	3c54 <trx_aes_wrrd+0x200>
    3c32:	8b5a      	ldrh	r2, [r3, #26]
    3c34:	0751      	lsls	r1, r2, #29
    3c36:	d503      	bpl.n	3c40 <trx_aes_wrrd+0x1ec>
    3c38:	8b59      	ldrh	r1, [r3, #26]
    3c3a:	2204      	movs	r2, #4
    3c3c:	430a      	orrs	r2, r1
    3c3e:	835a      	strh	r2, [r3, #26]
    3c40:	4a0f      	ldr	r2, [pc, #60]	; (3c80 <trx_aes_wrrd+0x22c>)
    3c42:	7992      	ldrb	r2, [r2, #6]
    3c44:	2a01      	cmp	r2, #1
    3c46:	d103      	bne.n	3c50 <trx_aes_wrrd+0x1fc>
    3c48:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c4a:	05c9      	lsls	r1, r1, #23
    3c4c:	0dc9      	lsrs	r1, r1, #23
    3c4e:	e001      	b.n	3c54 <trx_aes_wrrd+0x200>
    3c50:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c52:	b2c9      	uxtb	r1, r1
    3c54:	4642      	mov	r2, r8
    3c56:	7011      	strb	r1, [r2, #0]
    3c58:	4809      	ldr	r0, [pc, #36]	; (3c80 <trx_aes_wrrd+0x22c>)
    3c5a:	490a      	ldr	r1, [pc, #40]	; (3c84 <trx_aes_wrrd+0x230>)
    3c5c:	2200      	movs	r2, #0
    3c5e:	4b0a      	ldr	r3, [pc, #40]	; (3c88 <trx_aes_wrrd+0x234>)
    3c60:	4798      	blx	r3
    3c62:	2000      	movs	r0, #0
    3c64:	2100      	movs	r1, #0
    3c66:	4b0a      	ldr	r3, [pc, #40]	; (3c90 <trx_aes_wrrd+0x23c>)
    3c68:	4798      	blx	r3
    3c6a:	b003      	add	sp, #12
    3c6c:	bc3c      	pop	{r2, r3, r4, r5}
    3c6e:	4690      	mov	r8, r2
    3c70:	4699      	mov	r9, r3
    3c72:	46a2      	mov	sl, r4
    3c74:	46ab      	mov	fp, r5
    3c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c78:	00000151 	.word	0x00000151
    3c7c:	00000339 	.word	0x00000339
    3c80:	20000874 	.word	0x20000874
    3c84:	20000838 	.word	0x20000838
    3c88:	00000a49 	.word	0x00000a49
    3c8c:	20000830 	.word	0x20000830
    3c90:	00000319 	.word	0x00000319

00003c94 <open_register>:
	return true;
}


void open_register(void)
{
    3c94:	b570      	push	{r4, r5, r6, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3c96:	4c08      	ldr	r4, [pc, #32]	; (3cb8 <open_register+0x24>)
    3c98:	2680      	movs	r6, #128	; 0x80
    3c9a:	02f6      	lsls	r6, r6, #11
    3c9c:	6166      	str	r6, [r4, #20]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3c9e:	2580      	movs	r5, #128	; 0x80
    3ca0:	032d      	lsls	r5, r5, #12
    3ca2:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(GPIO_1, false);
	port_pin_set_output_level(GPIO_2, true);
	delay_ms(300);
    3ca4:	2096      	movs	r0, #150	; 0x96
    3ca6:	0040      	lsls	r0, r0, #1
    3ca8:	4b04      	ldr	r3, [pc, #16]	; (3cbc <open_register+0x28>)
    3caa:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3cac:	6166      	str	r6, [r4, #20]
    3cae:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(GPIO_1, false);
	port_pin_set_output_level(GPIO_2, false);
	register_status = 1;
    3cb0:	2201      	movs	r2, #1
    3cb2:	4b03      	ldr	r3, [pc, #12]	; (3cc0 <open_register+0x2c>)
    3cb4:	701a      	strb	r2, [r3, #0]
}
    3cb6:	bd70      	pop	{r4, r5, r6, pc}
    3cb8:	41004400 	.word	0x41004400
    3cbc:	0000017d 	.word	0x0000017d
    3cc0:	200006fc 	.word	0x200006fc

00003cc4 <close_register>:

void close_register(void)
{
    3cc4:	b570      	push	{r4, r5, r6, lr}
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3cc6:	4c08      	ldr	r4, [pc, #32]	; (3ce8 <close_register+0x24>)
    3cc8:	2680      	movs	r6, #128	; 0x80
    3cca:	02f6      	lsls	r6, r6, #11
    3ccc:	61a6      	str	r6, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3cce:	2580      	movs	r5, #128	; 0x80
    3cd0:	032d      	lsls	r5, r5, #12
    3cd2:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(GPIO_1, true);
	port_pin_set_output_level(GPIO_2, false);
	delay_ms(300);
    3cd4:	2096      	movs	r0, #150	; 0x96
    3cd6:	0040      	lsls	r0, r0, #1
    3cd8:	4b04      	ldr	r3, [pc, #16]	; (3cec <close_register+0x28>)
    3cda:	4798      	blx	r3
    3cdc:	6166      	str	r6, [r4, #20]
    3cde:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(GPIO_1, false);
	port_pin_set_output_level(GPIO_2, false);
	register_status = 0;
    3ce0:	2200      	movs	r2, #0
    3ce2:	4b03      	ldr	r3, [pc, #12]	; (3cf0 <close_register+0x2c>)
    3ce4:	701a      	strb	r2, [r3, #0]
}
    3ce6:	bd70      	pop	{r4, r5, r6, pc}
    3ce8:	41004400 	.word	0x41004400
    3cec:	0000017d 	.word	0x0000017d
    3cf0:	200006fc 	.word	0x200006fc

00003cf4 <appDataInd>:


/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    3cf4:	b510      	push	{r4, lr}
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3cf6:	2280      	movs	r2, #128	; 0x80
    3cf8:	0312      	lsls	r2, r2, #12
    3cfa:	4b13      	ldr	r3, [pc, #76]	; (3d48 <appDataInd+0x54>)
    3cfc:	61da      	str	r2, [r3, #28]
	LED_Toggle(LED0);
	for (uint8_t i = 0; i < ind->size; i++) {
    3cfe:	7b01      	ldrb	r1, [r0, #12]
    3d00:	2900      	cmp	r1, #0
    3d02:	d008      	beq.n	3d16 <appDataInd+0x22>
		rx_data[i] = ind->data[i];
    3d04:	6884      	ldr	r4, [r0, #8]
    3d06:	2300      	movs	r3, #0
    3d08:	4810      	ldr	r0, [pc, #64]	; (3d4c <appDataInd+0x58>)
    3d0a:	5ce2      	ldrb	r2, [r4, r3]
    3d0c:	541a      	strb	r2, [r3, r0]
    3d0e:	3301      	adds	r3, #1
/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	LED_Toggle(LED0);
	for (uint8_t i = 0; i < ind->size; i++) {
    3d10:	b2da      	uxtb	r2, r3
    3d12:	428a      	cmp	r2, r1
    3d14:	d3f9      	bcc.n	3d0a <appDataInd+0x16>
		rx_data[i] = ind->data[i];
	}
	
	switch(rx_data[0])
    3d16:	4b0d      	ldr	r3, [pc, #52]	; (3d4c <appDataInd+0x58>)
    3d18:	781b      	ldrb	r3, [r3, #0]
    3d1a:	2b00      	cmp	r3, #0
    3d1c:	d008      	beq.n	3d30 <appDataInd+0x3c>
    3d1e:	2b01      	cmp	r3, #1
    3d20:	d10c      	bne.n	3d3c <appDataInd+0x48>
	{
		case OPEN:
			if(register_status)
    3d22:	4b0b      	ldr	r3, [pc, #44]	; (3d50 <appDataInd+0x5c>)
    3d24:	781b      	ldrb	r3, [r3, #0]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d108      	bne.n	3d3c <appDataInd+0x48>
				break;
			else
				open_register();
    3d2a:	4b0a      	ldr	r3, [pc, #40]	; (3d54 <appDataInd+0x60>)
    3d2c:	4798      	blx	r3
			break;
    3d2e:	e005      	b.n	3d3c <appDataInd+0x48>
		case CLOSE:
			if(!register_status)
    3d30:	4b07      	ldr	r3, [pc, #28]	; (3d50 <appDataInd+0x5c>)
    3d32:	781b      	ldrb	r3, [r3, #0]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d001      	beq.n	3d3c <appDataInd+0x48>
				break;
			else
				close_register();
    3d38:	4b07      	ldr	r3, [pc, #28]	; (3d58 <appDataInd+0x64>)
    3d3a:	4798      	blx	r3
			break;			
	}
	rx_data[0]=0;
    3d3c:	2200      	movs	r2, #0
    3d3e:	4b03      	ldr	r3, [pc, #12]	; (3d4c <appDataInd+0x58>)
    3d40:	701a      	strb	r2, [r3, #0]
	return true;
}
    3d42:	2001      	movs	r0, #1
    3d44:	bd10      	pop	{r4, pc}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	41004400 	.word	0x41004400
    3d4c:	20000700 	.word	0x20000700
    3d50:	200006fc 	.word	0x200006fc
    3d54:	00003c95 	.word	0x00003c95
    3d58:	00003cc5 	.word	0x00003cc5

00003d5c <pin_init>:
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
}

void pin_init(void)
{
    3d5c:	b530      	push	{r4, r5, lr}
    3d5e:	b083      	sub	sp, #12
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    3d60:	ac01      	add	r4, sp, #4
    3d62:	2300      	movs	r3, #0
    3d64:	70a3      	strb	r3, [r4, #2]
		struct port_config config_port_pin;

		port_get_config_defaults(&config_port_pin);

		config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    3d66:	2301      	movs	r3, #1
    3d68:	7023      	strb	r3, [r4, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    3d6a:	2302      	movs	r3, #2
    3d6c:	7063      	strb	r3, [r4, #1]

		port_pin_set_config(GPIO_1, &config_port_pin);
    3d6e:	2012      	movs	r0, #18
    3d70:	1c21      	adds	r1, r4, #0
    3d72:	4d07      	ldr	r5, [pc, #28]	; (3d90 <pin_init+0x34>)
    3d74:	47a8      	blx	r5

		port_pin_set_config(GPIO_2, &config_port_pin);
    3d76:	2013      	movs	r0, #19
    3d78:	1c21      	adds	r1, r4, #0
    3d7a:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3d7c:	4b05      	ldr	r3, [pc, #20]	; (3d94 <pin_init+0x38>)
    3d7e:	2280      	movs	r2, #128	; 0x80
    3d80:	02d2      	lsls	r2, r2, #11
    3d82:	615a      	str	r2, [r3, #20]
    3d84:	2280      	movs	r2, #128	; 0x80
    3d86:	0312      	lsls	r2, r2, #12
    3d88:	615a      	str	r2, [r3, #20]
		
		port_pin_set_output_level(GPIO_1, false);
		port_pin_set_output_level(GPIO_2, false);
}
    3d8a:	b003      	add	sp, #12
    3d8c:	bd30      	pop	{r4, r5, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	000004d9 	.word	0x000004d9
    3d94:	41004400 	.word	0x41004400

00003d98 <main>:

int main(void)
{
    3d98:	b510      	push	{r4, lr}
	irq_initialize_vectors();
	system_init();
    3d9a:	4b15      	ldr	r3, [pc, #84]	; (3df0 <main+0x58>)
    3d9c:	4798      	blx	r3
	delay_init();
    3d9e:	4b15      	ldr	r3, [pc, #84]	; (3df4 <main+0x5c>)
    3da0:	4798      	blx	r3
	SYS_Init();
    3da2:	4b15      	ldr	r3, [pc, #84]	; (3df8 <main+0x60>)
    3da4:	4798      	blx	r3
	
	cpu_irq_enable();
    3da6:	2201      	movs	r2, #1
    3da8:	4b14      	ldr	r3, [pc, #80]	; (3dfc <main+0x64>)
    3daa:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3dac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3db0:	b662      	cpsie	i

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    3db2:	2003      	movs	r0, #3
    3db4:	4b12      	ldr	r3, [pc, #72]	; (3e00 <main+0x68>)
    3db6:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    3db8:	4812      	ldr	r0, [pc, #72]	; (3e04 <main+0x6c>)
    3dba:	4b13      	ldr	r3, [pc, #76]	; (3e08 <main+0x70>)
    3dbc:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    3dbe:	200f      	movs	r0, #15
    3dc0:	4b12      	ldr	r3, [pc, #72]	; (3e0c <main+0x74>)
    3dc2:	4798      	blx	r3
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    3dc4:	2001      	movs	r0, #1
    3dc6:	4b12      	ldr	r3, [pc, #72]	; (3e10 <main+0x78>)
    3dc8:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    3dca:	2023      	movs	r0, #35	; 0x23
    3dcc:	4b11      	ldr	r3, [pc, #68]	; (3e14 <main+0x7c>)
    3dce:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    3dd0:	4811      	ldr	r0, [pc, #68]	; (3e18 <main+0x80>)
    3dd2:	4b12      	ldr	r3, [pc, #72]	; (3e1c <main+0x84>)
    3dd4:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    3dd6:	2003      	movs	r0, #3
    3dd8:	4911      	ldr	r1, [pc, #68]	; (3e20 <main+0x88>)
    3dda:	4b12      	ldr	r3, [pc, #72]	; (3e24 <main+0x8c>)
    3ddc:	4798      	blx	r3
	SYS_Init();
	
	cpu_irq_enable();
	
	appInit();
	pin_init();
    3dde:	4b12      	ldr	r3, [pc, #72]	; (3e28 <main+0x90>)
    3de0:	4798      	blx	r3
    3de2:	2280      	movs	r2, #128	; 0x80
    3de4:	0312      	lsls	r2, r2, #12
    3de6:	4b11      	ldr	r3, [pc, #68]	; (3e2c <main+0x94>)
    3de8:	615a      	str	r2, [r3, #20]
	LED_On(LED0);
	
	while (1) {
		SYS_TaskHandler();
    3dea:	4c11      	ldr	r4, [pc, #68]	; (3e30 <main+0x98>)
    3dec:	47a0      	blx	r4
    3dee:	e7fd      	b.n	3dec <main+0x54>
    3df0:	00001349 	.word	0x00001349
    3df4:	00000115 	.word	0x00000115
    3df8:	00002c79 	.word	0x00002c79
    3dfc:	20000008 	.word	0x20000008
    3e00:	00001879 	.word	0x00001879
    3e04:	00004567 	.word	0x00004567
    3e08:	0000188d 	.word	0x0000188d
    3e0c:	00002ab1 	.word	0x00002ab1
    3e10:	00002a9d 	.word	0x00002a9d
    3e14:	00002b21 	.word	0x00002b21
    3e18:	00004290 	.word	0x00004290
    3e1c:	000023ad 	.word	0x000023ad
    3e20:	00003cf5 	.word	0x00003cf5
    3e24:	000018a1 	.word	0x000018a1
    3e28:	00003d5d 	.word	0x00003d5d
    3e2c:	41004400 	.word	0x41004400
    3e30:	00002c9d 	.word	0x00002c9d

00003e34 <common_tc_delay>:
    3e34:	b510      	push	{r4, lr}
    3e36:	1c04      	adds	r4, r0, #0
    3e38:	4b13      	ldr	r3, [pc, #76]	; (3e88 <common_tc_delay+0x54>)
    3e3a:	4798      	blx	r3
    3e3c:	4b13      	ldr	r3, [pc, #76]	; (3e8c <common_tc_delay+0x58>)
    3e3e:	781a      	ldrb	r2, [r3, #0]
    3e40:	4362      	muls	r2, r4
    3e42:	1881      	adds	r1, r0, r2
    3e44:	4b12      	ldr	r3, [pc, #72]	; (3e90 <common_tc_delay+0x5c>)
    3e46:	6059      	str	r1, [r3, #4]
    3e48:	6859      	ldr	r1, [r3, #4]
    3e4a:	0c09      	lsrs	r1, r1, #16
    3e4c:	6059      	str	r1, [r3, #4]
    3e4e:	685b      	ldr	r3, [r3, #4]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d007      	beq.n	3e64 <common_tc_delay+0x30>
    3e54:	4b0e      	ldr	r3, [pc, #56]	; (3e90 <common_tc_delay+0x5c>)
    3e56:	6859      	ldr	r1, [r3, #4]
    3e58:	3201      	adds	r2, #1
    3e5a:	1880      	adds	r0, r0, r2
    3e5c:	8118      	strh	r0, [r3, #8]
    3e5e:	4b0d      	ldr	r3, [pc, #52]	; (3e94 <common_tc_delay+0x60>)
    3e60:	4798      	blx	r3
    3e62:	e004      	b.n	3e6e <common_tc_delay+0x3a>
    3e64:	1882      	adds	r2, r0, r2
    3e66:	4b0a      	ldr	r3, [pc, #40]	; (3e90 <common_tc_delay+0x5c>)
    3e68:	811a      	strh	r2, [r3, #8]
    3e6a:	4b0b      	ldr	r3, [pc, #44]	; (3e98 <common_tc_delay+0x64>)
    3e6c:	4798      	blx	r3
    3e6e:	4b08      	ldr	r3, [pc, #32]	; (3e90 <common_tc_delay+0x5c>)
    3e70:	891b      	ldrh	r3, [r3, #8]
    3e72:	2b63      	cmp	r3, #99	; 0x63
    3e74:	d802      	bhi.n	3e7c <common_tc_delay+0x48>
    3e76:	3364      	adds	r3, #100	; 0x64
    3e78:	4a05      	ldr	r2, [pc, #20]	; (3e90 <common_tc_delay+0x5c>)
    3e7a:	8113      	strh	r3, [r2, #8]
    3e7c:	4b04      	ldr	r3, [pc, #16]	; (3e90 <common_tc_delay+0x5c>)
    3e7e:	8918      	ldrh	r0, [r3, #8]
    3e80:	4b06      	ldr	r3, [pc, #24]	; (3e9c <common_tc_delay+0x68>)
    3e82:	4798      	blx	r3
    3e84:	bd10      	pop	{r4, pc}
    3e86:	46c0      	nop			; (mov r8, r8)
    3e88:	00002e61 	.word	0x00002e61
    3e8c:	20000880 	.word	0x20000880
    3e90:	20000714 	.word	0x20000714
    3e94:	00002e75 	.word	0x00002e75
    3e98:	00002e89 	.word	0x00002e89
    3e9c:	00002ec5 	.word	0x00002ec5

00003ea0 <common_tc_init>:
    3ea0:	b508      	push	{r3, lr}
    3ea2:	2200      	movs	r2, #0
    3ea4:	4b03      	ldr	r3, [pc, #12]	; (3eb4 <common_tc_init+0x14>)
    3ea6:	701a      	strb	r2, [r3, #0]
    3ea8:	4b03      	ldr	r3, [pc, #12]	; (3eb8 <common_tc_init+0x18>)
    3eaa:	4798      	blx	r3
    3eac:	4b03      	ldr	r3, [pc, #12]	; (3ebc <common_tc_init+0x1c>)
    3eae:	7018      	strb	r0, [r3, #0]
    3eb0:	bd08      	pop	{r3, pc}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	20000714 	.word	0x20000714
    3eb8:	00002edd 	.word	0x00002edd
    3ebc:	20000880 	.word	0x20000880

00003ec0 <tmr_ovf_callback>:
    3ec0:	b508      	push	{r3, lr}
    3ec2:	4b0e      	ldr	r3, [pc, #56]	; (3efc <tmr_ovf_callback+0x3c>)
    3ec4:	685b      	ldr	r3, [r3, #4]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d007      	beq.n	3eda <tmr_ovf_callback+0x1a>
    3eca:	4a0c      	ldr	r2, [pc, #48]	; (3efc <tmr_ovf_callback+0x3c>)
    3ecc:	6853      	ldr	r3, [r2, #4]
    3ece:	3b01      	subs	r3, #1
    3ed0:	6053      	str	r3, [r2, #4]
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d101      	bne.n	3eda <tmr_ovf_callback+0x1a>
    3ed6:	4b0a      	ldr	r3, [pc, #40]	; (3f00 <tmr_ovf_callback+0x40>)
    3ed8:	4798      	blx	r3
    3eda:	4a08      	ldr	r2, [pc, #32]	; (3efc <tmr_ovf_callback+0x3c>)
    3edc:	7813      	ldrb	r3, [r2, #0]
    3ede:	3301      	adds	r3, #1
    3ee0:	b2db      	uxtb	r3, r3
    3ee2:	7013      	strb	r3, [r2, #0]
    3ee4:	4a07      	ldr	r2, [pc, #28]	; (3f04 <tmr_ovf_callback+0x44>)
    3ee6:	7812      	ldrb	r2, [r2, #0]
    3ee8:	429a      	cmp	r2, r3
    3eea:	d806      	bhi.n	3efa <tmr_ovf_callback+0x3a>
    3eec:	4b03      	ldr	r3, [pc, #12]	; (3efc <tmr_ovf_callback+0x3c>)
    3eee:	2200      	movs	r2, #0
    3ef0:	701a      	strb	r2, [r3, #0]
    3ef2:	68db      	ldr	r3, [r3, #12]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d000      	beq.n	3efa <tmr_ovf_callback+0x3a>
    3ef8:	4798      	blx	r3
    3efa:	bd08      	pop	{r3, pc}
    3efc:	20000714 	.word	0x20000714
    3f00:	00002e89 	.word	0x00002e89
    3f04:	20000880 	.word	0x20000880

00003f08 <tmr_cca_callback>:
    3f08:	b508      	push	{r3, lr}
    3f0a:	4b04      	ldr	r3, [pc, #16]	; (3f1c <tmr_cca_callback+0x14>)
    3f0c:	4798      	blx	r3
    3f0e:	4b04      	ldr	r3, [pc, #16]	; (3f20 <tmr_cca_callback+0x18>)
    3f10:	691b      	ldr	r3, [r3, #16]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d000      	beq.n	3f18 <tmr_cca_callback+0x10>
    3f16:	4798      	blx	r3
    3f18:	bd08      	pop	{r3, pc}
    3f1a:	46c0      	nop			; (mov r8, r8)
    3f1c:	00002e75 	.word	0x00002e75
    3f20:	20000714 	.word	0x20000714

00003f24 <set_common_tc_expiry_callback>:
    3f24:	4b01      	ldr	r3, [pc, #4]	; (3f2c <set_common_tc_expiry_callback+0x8>)
    3f26:	6118      	str	r0, [r3, #16]
    3f28:	4770      	bx	lr
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	20000714 	.word	0x20000714

00003f30 <__aeabi_uidiv>:
    3f30:	2900      	cmp	r1, #0
    3f32:	d034      	beq.n	3f9e <.udivsi3_skip_div0_test+0x6a>

00003f34 <.udivsi3_skip_div0_test>:
    3f34:	2301      	movs	r3, #1
    3f36:	2200      	movs	r2, #0
    3f38:	b410      	push	{r4}
    3f3a:	4288      	cmp	r0, r1
    3f3c:	d32c      	bcc.n	3f98 <.udivsi3_skip_div0_test+0x64>
    3f3e:	2401      	movs	r4, #1
    3f40:	0724      	lsls	r4, r4, #28
    3f42:	42a1      	cmp	r1, r4
    3f44:	d204      	bcs.n	3f50 <.udivsi3_skip_div0_test+0x1c>
    3f46:	4281      	cmp	r1, r0
    3f48:	d202      	bcs.n	3f50 <.udivsi3_skip_div0_test+0x1c>
    3f4a:	0109      	lsls	r1, r1, #4
    3f4c:	011b      	lsls	r3, r3, #4
    3f4e:	e7f8      	b.n	3f42 <.udivsi3_skip_div0_test+0xe>
    3f50:	00e4      	lsls	r4, r4, #3
    3f52:	42a1      	cmp	r1, r4
    3f54:	d204      	bcs.n	3f60 <.udivsi3_skip_div0_test+0x2c>
    3f56:	4281      	cmp	r1, r0
    3f58:	d202      	bcs.n	3f60 <.udivsi3_skip_div0_test+0x2c>
    3f5a:	0049      	lsls	r1, r1, #1
    3f5c:	005b      	lsls	r3, r3, #1
    3f5e:	e7f8      	b.n	3f52 <.udivsi3_skip_div0_test+0x1e>
    3f60:	4288      	cmp	r0, r1
    3f62:	d301      	bcc.n	3f68 <.udivsi3_skip_div0_test+0x34>
    3f64:	1a40      	subs	r0, r0, r1
    3f66:	431a      	orrs	r2, r3
    3f68:	084c      	lsrs	r4, r1, #1
    3f6a:	42a0      	cmp	r0, r4
    3f6c:	d302      	bcc.n	3f74 <.udivsi3_skip_div0_test+0x40>
    3f6e:	1b00      	subs	r0, r0, r4
    3f70:	085c      	lsrs	r4, r3, #1
    3f72:	4322      	orrs	r2, r4
    3f74:	088c      	lsrs	r4, r1, #2
    3f76:	42a0      	cmp	r0, r4
    3f78:	d302      	bcc.n	3f80 <.udivsi3_skip_div0_test+0x4c>
    3f7a:	1b00      	subs	r0, r0, r4
    3f7c:	089c      	lsrs	r4, r3, #2
    3f7e:	4322      	orrs	r2, r4
    3f80:	08cc      	lsrs	r4, r1, #3
    3f82:	42a0      	cmp	r0, r4
    3f84:	d302      	bcc.n	3f8c <.udivsi3_skip_div0_test+0x58>
    3f86:	1b00      	subs	r0, r0, r4
    3f88:	08dc      	lsrs	r4, r3, #3
    3f8a:	4322      	orrs	r2, r4
    3f8c:	2800      	cmp	r0, #0
    3f8e:	d003      	beq.n	3f98 <.udivsi3_skip_div0_test+0x64>
    3f90:	091b      	lsrs	r3, r3, #4
    3f92:	d001      	beq.n	3f98 <.udivsi3_skip_div0_test+0x64>
    3f94:	0909      	lsrs	r1, r1, #4
    3f96:	e7e3      	b.n	3f60 <.udivsi3_skip_div0_test+0x2c>
    3f98:	1c10      	adds	r0, r2, #0
    3f9a:	bc10      	pop	{r4}
    3f9c:	4770      	bx	lr
    3f9e:	2800      	cmp	r0, #0
    3fa0:	d001      	beq.n	3fa6 <.udivsi3_skip_div0_test+0x72>
    3fa2:	2000      	movs	r0, #0
    3fa4:	43c0      	mvns	r0, r0
    3fa6:	b407      	push	{r0, r1, r2}
    3fa8:	4802      	ldr	r0, [pc, #8]	; (3fb4 <.udivsi3_skip_div0_test+0x80>)
    3faa:	a102      	add	r1, pc, #8	; (adr r1, 3fb4 <.udivsi3_skip_div0_test+0x80>)
    3fac:	1840      	adds	r0, r0, r1
    3fae:	9002      	str	r0, [sp, #8]
    3fb0:	bd03      	pop	{r0, r1, pc}
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	00000019 	.word	0x00000019

00003fb8 <__aeabi_uidivmod>:
    3fb8:	2900      	cmp	r1, #0
    3fba:	d0f0      	beq.n	3f9e <.udivsi3_skip_div0_test+0x6a>
    3fbc:	b503      	push	{r0, r1, lr}
    3fbe:	f7ff ffb9 	bl	3f34 <.udivsi3_skip_div0_test>
    3fc2:	bc0e      	pop	{r1, r2, r3}
    3fc4:	4342      	muls	r2, r0
    3fc6:	1a89      	subs	r1, r1, r2
    3fc8:	4718      	bx	r3
    3fca:	46c0      	nop			; (mov r8, r8)

00003fcc <__aeabi_idiv0>:
    3fcc:	4770      	bx	lr
    3fce:	46c0      	nop			; (mov r8, r8)

00003fd0 <__aeabi_lmul>:
    3fd0:	469c      	mov	ip, r3
    3fd2:	0403      	lsls	r3, r0, #16
    3fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fd6:	0c1b      	lsrs	r3, r3, #16
    3fd8:	0417      	lsls	r7, r2, #16
    3fda:	0c3f      	lsrs	r7, r7, #16
    3fdc:	0c15      	lsrs	r5, r2, #16
    3fde:	1c1e      	adds	r6, r3, #0
    3fe0:	1c04      	adds	r4, r0, #0
    3fe2:	0c00      	lsrs	r0, r0, #16
    3fe4:	437e      	muls	r6, r7
    3fe6:	436b      	muls	r3, r5
    3fe8:	4347      	muls	r7, r0
    3fea:	4345      	muls	r5, r0
    3fec:	18fb      	adds	r3, r7, r3
    3fee:	0c30      	lsrs	r0, r6, #16
    3ff0:	1818      	adds	r0, r3, r0
    3ff2:	4287      	cmp	r7, r0
    3ff4:	d902      	bls.n	3ffc <__aeabi_lmul+0x2c>
    3ff6:	2380      	movs	r3, #128	; 0x80
    3ff8:	025b      	lsls	r3, r3, #9
    3ffa:	18ed      	adds	r5, r5, r3
    3ffc:	0c03      	lsrs	r3, r0, #16
    3ffe:	18ed      	adds	r5, r5, r3
    4000:	4663      	mov	r3, ip
    4002:	435c      	muls	r4, r3
    4004:	434a      	muls	r2, r1
    4006:	0436      	lsls	r6, r6, #16
    4008:	0c36      	lsrs	r6, r6, #16
    400a:	18a1      	adds	r1, r4, r2
    400c:	0400      	lsls	r0, r0, #16
    400e:	1980      	adds	r0, r0, r6
    4010:	1949      	adds	r1, r1, r5
    4012:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004014 <__libc_init_array>:
    4014:	b570      	push	{r4, r5, r6, lr}
    4016:	4b0e      	ldr	r3, [pc, #56]	; (4050 <__libc_init_array+0x3c>)
    4018:	4d0e      	ldr	r5, [pc, #56]	; (4054 <__libc_init_array+0x40>)
    401a:	2400      	movs	r4, #0
    401c:	1aed      	subs	r5, r5, r3
    401e:	10ad      	asrs	r5, r5, #2
    4020:	1c1e      	adds	r6, r3, #0
    4022:	42ac      	cmp	r4, r5
    4024:	d004      	beq.n	4030 <__libc_init_array+0x1c>
    4026:	00a3      	lsls	r3, r4, #2
    4028:	58f3      	ldr	r3, [r6, r3]
    402a:	4798      	blx	r3
    402c:	3401      	adds	r4, #1
    402e:	e7f8      	b.n	4022 <__libc_init_array+0xe>
    4030:	f000 f96a 	bl	4308 <_init>
    4034:	4b08      	ldr	r3, [pc, #32]	; (4058 <__libc_init_array+0x44>)
    4036:	4d09      	ldr	r5, [pc, #36]	; (405c <__libc_init_array+0x48>)
    4038:	2400      	movs	r4, #0
    403a:	1aed      	subs	r5, r5, r3
    403c:	10ad      	asrs	r5, r5, #2
    403e:	1c1e      	adds	r6, r3, #0
    4040:	42ac      	cmp	r4, r5
    4042:	d004      	beq.n	404e <__libc_init_array+0x3a>
    4044:	00a3      	lsls	r3, r4, #2
    4046:	58f3      	ldr	r3, [r6, r3]
    4048:	4798      	blx	r3
    404a:	3401      	adds	r4, #1
    404c:	e7f8      	b.n	4040 <__libc_init_array+0x2c>
    404e:	bd70      	pop	{r4, r5, r6, pc}
    4050:	00004314 	.word	0x00004314
    4054:	00004314 	.word	0x00004314
    4058:	00004314 	.word	0x00004314
    405c:	00004318 	.word	0x00004318

00004060 <memcpy>:
    4060:	b510      	push	{r4, lr}
    4062:	2300      	movs	r3, #0
    4064:	4293      	cmp	r3, r2
    4066:	d003      	beq.n	4070 <memcpy+0x10>
    4068:	5ccc      	ldrb	r4, [r1, r3]
    406a:	54c4      	strb	r4, [r0, r3]
    406c:	3301      	adds	r3, #1
    406e:	e7f9      	b.n	4064 <memcpy+0x4>
    4070:	bd10      	pop	{r4, pc}

00004072 <memset>:
    4072:	1c03      	adds	r3, r0, #0
    4074:	1882      	adds	r2, r0, r2
    4076:	4293      	cmp	r3, r2
    4078:	d002      	beq.n	4080 <memset+0xe>
    407a:	7019      	strb	r1, [r3, #0]
    407c:	3301      	adds	r3, #1
    407e:	e7fa      	b.n	4076 <memset+0x4>
    4080:	4770      	bx	lr
    4082:	0000      	movs	r0, r0
    4084:	0000      	movs	r0, r0
	...

00004088 <rand>:
    4088:	4b17      	ldr	r3, [pc, #92]	; (40e8 <rand+0x60>)
    408a:	b510      	push	{r4, lr}
    408c:	681c      	ldr	r4, [r3, #0]
    408e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4090:	2b00      	cmp	r3, #0
    4092:	d115      	bne.n	40c0 <rand+0x38>
    4094:	2018      	movs	r0, #24
    4096:	f000 f833 	bl	4100 <malloc>
    409a:	4b14      	ldr	r3, [pc, #80]	; (40ec <rand+0x64>)
    409c:	63a0      	str	r0, [r4, #56]	; 0x38
    409e:	8003      	strh	r3, [r0, #0]
    40a0:	4b13      	ldr	r3, [pc, #76]	; (40f0 <rand+0x68>)
    40a2:	8043      	strh	r3, [r0, #2]
    40a4:	4b13      	ldr	r3, [pc, #76]	; (40f4 <rand+0x6c>)
    40a6:	8083      	strh	r3, [r0, #4]
    40a8:	4b13      	ldr	r3, [pc, #76]	; (40f8 <rand+0x70>)
    40aa:	80c3      	strh	r3, [r0, #6]
    40ac:	4b13      	ldr	r3, [pc, #76]	; (40fc <rand+0x74>)
    40ae:	8103      	strh	r3, [r0, #8]
    40b0:	2305      	movs	r3, #5
    40b2:	8143      	strh	r3, [r0, #10]
    40b4:	230b      	movs	r3, #11
    40b6:	8183      	strh	r3, [r0, #12]
    40b8:	2201      	movs	r2, #1
    40ba:	2300      	movs	r3, #0
    40bc:	6102      	str	r2, [r0, #16]
    40be:	6143      	str	r3, [r0, #20]
    40c0:	4b08      	ldr	r3, [pc, #32]	; (40e4 <rand+0x5c>)
    40c2:	4a07      	ldr	r2, [pc, #28]	; (40e0 <rand+0x58>)
    40c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    40c6:	6920      	ldr	r0, [r4, #16]
    40c8:	6961      	ldr	r1, [r4, #20]
    40ca:	f7ff ff81 	bl	3fd0 <__aeabi_lmul>
    40ce:	2201      	movs	r2, #1
    40d0:	2300      	movs	r3, #0
    40d2:	1880      	adds	r0, r0, r2
    40d4:	4159      	adcs	r1, r3
    40d6:	6120      	str	r0, [r4, #16]
    40d8:	6161      	str	r1, [r4, #20]
    40da:	0048      	lsls	r0, r1, #1
    40dc:	0840      	lsrs	r0, r0, #1
    40de:	bd10      	pop	{r4, pc}
    40e0:	4c957f2d 	.word	0x4c957f2d
    40e4:	5851f42d 	.word	0x5851f42d
    40e8:	2000006c 	.word	0x2000006c
    40ec:	0000330e 	.word	0x0000330e
    40f0:	ffffabcd 	.word	0xffffabcd
    40f4:	00001234 	.word	0x00001234
    40f8:	ffffe66d 	.word	0xffffe66d
    40fc:	ffffdeec 	.word	0xffffdeec

00004100 <malloc>:
    4100:	b508      	push	{r3, lr}
    4102:	4b03      	ldr	r3, [pc, #12]	; (4110 <malloc+0x10>)
    4104:	1c01      	adds	r1, r0, #0
    4106:	6818      	ldr	r0, [r3, #0]
    4108:	f000 f804 	bl	4114 <_malloc_r>
    410c:	bd08      	pop	{r3, pc}
    410e:	46c0      	nop			; (mov r8, r8)
    4110:	2000006c 	.word	0x2000006c

00004114 <_malloc_r>:
    4114:	b570      	push	{r4, r5, r6, lr}
    4116:	2303      	movs	r3, #3
    4118:	1ccd      	adds	r5, r1, #3
    411a:	439d      	bics	r5, r3
    411c:	3508      	adds	r5, #8
    411e:	1c06      	adds	r6, r0, #0
    4120:	2d0c      	cmp	r5, #12
    4122:	d201      	bcs.n	4128 <_malloc_r+0x14>
    4124:	250c      	movs	r5, #12
    4126:	e001      	b.n	412c <_malloc_r+0x18>
    4128:	2d00      	cmp	r5, #0
    412a:	db3f      	blt.n	41ac <_malloc_r+0x98>
    412c:	428d      	cmp	r5, r1
    412e:	d33d      	bcc.n	41ac <_malloc_r+0x98>
    4130:	4b20      	ldr	r3, [pc, #128]	; (41b4 <_malloc_r+0xa0>)
    4132:	681c      	ldr	r4, [r3, #0]
    4134:	1c1a      	adds	r2, r3, #0
    4136:	1c21      	adds	r1, r4, #0
    4138:	2900      	cmp	r1, #0
    413a:	d013      	beq.n	4164 <_malloc_r+0x50>
    413c:	6808      	ldr	r0, [r1, #0]
    413e:	1b43      	subs	r3, r0, r5
    4140:	d40d      	bmi.n	415e <_malloc_r+0x4a>
    4142:	2b0b      	cmp	r3, #11
    4144:	d902      	bls.n	414c <_malloc_r+0x38>
    4146:	600b      	str	r3, [r1, #0]
    4148:	18cc      	adds	r4, r1, r3
    414a:	e01e      	b.n	418a <_malloc_r+0x76>
    414c:	428c      	cmp	r4, r1
    414e:	d102      	bne.n	4156 <_malloc_r+0x42>
    4150:	6863      	ldr	r3, [r4, #4]
    4152:	6013      	str	r3, [r2, #0]
    4154:	e01a      	b.n	418c <_malloc_r+0x78>
    4156:	6848      	ldr	r0, [r1, #4]
    4158:	6060      	str	r0, [r4, #4]
    415a:	1c0c      	adds	r4, r1, #0
    415c:	e016      	b.n	418c <_malloc_r+0x78>
    415e:	1c0c      	adds	r4, r1, #0
    4160:	6849      	ldr	r1, [r1, #4]
    4162:	e7e9      	b.n	4138 <_malloc_r+0x24>
    4164:	4c14      	ldr	r4, [pc, #80]	; (41b8 <_malloc_r+0xa4>)
    4166:	6820      	ldr	r0, [r4, #0]
    4168:	2800      	cmp	r0, #0
    416a:	d103      	bne.n	4174 <_malloc_r+0x60>
    416c:	1c30      	adds	r0, r6, #0
    416e:	f000 f825 	bl	41bc <_sbrk_r>
    4172:	6020      	str	r0, [r4, #0]
    4174:	1c30      	adds	r0, r6, #0
    4176:	1c29      	adds	r1, r5, #0
    4178:	f000 f820 	bl	41bc <_sbrk_r>
    417c:	1c43      	adds	r3, r0, #1
    417e:	d015      	beq.n	41ac <_malloc_r+0x98>
    4180:	1cc4      	adds	r4, r0, #3
    4182:	2303      	movs	r3, #3
    4184:	439c      	bics	r4, r3
    4186:	4284      	cmp	r4, r0
    4188:	d10a      	bne.n	41a0 <_malloc_r+0x8c>
    418a:	6025      	str	r5, [r4, #0]
    418c:	1c20      	adds	r0, r4, #0
    418e:	300b      	adds	r0, #11
    4190:	2207      	movs	r2, #7
    4192:	1d23      	adds	r3, r4, #4
    4194:	4390      	bics	r0, r2
    4196:	1ac3      	subs	r3, r0, r3
    4198:	d00b      	beq.n	41b2 <_malloc_r+0x9e>
    419a:	425a      	negs	r2, r3
    419c:	50e2      	str	r2, [r4, r3]
    419e:	e008      	b.n	41b2 <_malloc_r+0x9e>
    41a0:	1a21      	subs	r1, r4, r0
    41a2:	1c30      	adds	r0, r6, #0
    41a4:	f000 f80a 	bl	41bc <_sbrk_r>
    41a8:	3001      	adds	r0, #1
    41aa:	d1ee      	bne.n	418a <_malloc_r+0x76>
    41ac:	230c      	movs	r3, #12
    41ae:	6033      	str	r3, [r6, #0]
    41b0:	2000      	movs	r0, #0
    41b2:	bd70      	pop	{r4, r5, r6, pc}
    41b4:	2000072c 	.word	0x2000072c
    41b8:	20000728 	.word	0x20000728

000041bc <_sbrk_r>:
    41bc:	b538      	push	{r3, r4, r5, lr}
    41be:	4c07      	ldr	r4, [pc, #28]	; (41dc <_sbrk_r+0x20>)
    41c0:	2300      	movs	r3, #0
    41c2:	1c05      	adds	r5, r0, #0
    41c4:	1c08      	adds	r0, r1, #0
    41c6:	6023      	str	r3, [r4, #0]
    41c8:	f7fd fb1a 	bl	1800 <_sbrk>
    41cc:	1c43      	adds	r3, r0, #1
    41ce:	d103      	bne.n	41d8 <_sbrk_r+0x1c>
    41d0:	6823      	ldr	r3, [r4, #0]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d000      	beq.n	41d8 <_sbrk_r+0x1c>
    41d6:	602b      	str	r3, [r5, #0]
    41d8:	bd38      	pop	{r3, r4, r5, pc}
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	20000884 	.word	0x20000884
    41e0:	42000800 	.word	0x42000800
    41e4:	42000c00 	.word	0x42000c00
    41e8:	42001000 	.word	0x42001000
    41ec:	42001400 	.word	0x42001400
    41f0:	42001800 	.word	0x42001800
    41f4:	42001c00 	.word	0x42001c00
    41f8:	00000b48 	.word	0x00000b48
    41fc:	00000ba4 	.word	0x00000ba4
    4200:	00000ba4 	.word	0x00000ba4
    4204:	00000b42 	.word	0x00000b42
    4208:	00000b42 	.word	0x00000b42
    420c:	00000b5e 	.word	0x00000b5e
    4210:	00000b4e 	.word	0x00000b4e
    4214:	00000b64 	.word	0x00000b64
    4218:	00000b92 	.word	0x00000b92
    421c:	00000dcc 	.word	0x00000dcc
    4220:	00000e2c 	.word	0x00000e2c
    4224:	00000e2c 	.word	0x00000e2c
    4228:	00000dac 	.word	0x00000dac
    422c:	00000dbe 	.word	0x00000dbe
    4230:	00000dda 	.word	0x00000dda
    4234:	00000db0 	.word	0x00000db0
    4238:	00000de8 	.word	0x00000de8
    423c:	00000e1c 	.word	0x00000e1c
    4240:	42002c00 	.word	0x42002c00
    4244:	42003000 	.word	0x42003000
    4248:	42003400 	.word	0x42003400
    424c:	001c1c1b 	.word	0x001c1c1b
    4250:	10000800 	.word	0x10000800
    4254:	00002000 	.word	0x00002000
    4258:	00002000 	.word	0x00002000
    425c:	00002174 	.word	0x00002174
    4260:	0000217e 	.word	0x0000217e
    4264:	00002314 	.word	0x00002314
    4268:	0000231c 	.word	0x0000231c
    426c:	000028ea 	.word	0x000028ea
    4270:	000029a8 	.word	0x000029a8
    4274:	000028f4 	.word	0x000028f4
    4278:	00002914 	.word	0x00002914
    427c:	000029a8 	.word	0x000029a8
    4280:	00002936 	.word	0x00002936
    4284:	000029a8 	.word	0x000029a8
    4288:	00002978 	.word	0x00002978

0000428c <tc_interrupt_vectors.11766>:
    428c:	00141312 74736554 75636553 79746972     ....TestSecurity
    429c:	3079654b 00000000 00000043              Key0....C...

000042a8 <__sf_fake_stdin>:
	...

000042c8 <__sf_fake_stdout>:
	...

000042e8 <__sf_fake_stderr>:
	...

00004308 <_init>:
    4308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    430a:	46c0      	nop			; (mov r8, r8)
    430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    430e:	bc08      	pop	{r3}
    4310:	469e      	mov	lr, r3
    4312:	4770      	bx	lr

00004314 <__init_array_start>:
    4314:	000000dd 	.word	0x000000dd

00004318 <_fini>:
    4318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    431e:	bc08      	pop	{r3}
    4320:	469e      	mov	lr, r3
    4322:	4770      	bx	lr

00004324 <__fini_array_start>:
    4324:	000000b5 	.word	0x000000b5
