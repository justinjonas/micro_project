
register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004394  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004394  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000924  20000070  00004404  00010070  2**2
                  ALLOC
  3 .stack        00002004  20000994  00004d28  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000294f7  00000000  00000000  00010126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005529  00000000  00000000  0003961d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ac24  00000000  00000000  0003eb46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a28  00000000  00000000  0004976a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f00  00000000  00000000  0004a192  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001de31  00000000  00000000  0004b092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001653c  00000000  00000000  00068ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084f05  00000000  00000000  0007f3ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b24  00000000  00000000  00104304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002998 	.word	0x20002998
       4:	00001735 	.word	0x00001735
       8:	00001731 	.word	0x00001731
       c:	00001731 	.word	0x00001731
	...
      2c:	00001731 	.word	0x00001731
	...
      38:	00001731 	.word	0x00001731
      3c:	00001731 	.word	0x00001731
      40:	00001731 	.word	0x00001731
      44:	00001731 	.word	0x00001731
      48:	00001731 	.word	0x00001731
      4c:	00001731 	.word	0x00001731
      50:	0000032d 	.word	0x0000032d
      54:	00001731 	.word	0x00001731
      58:	00001731 	.word	0x00001731
      5c:	00001731 	.word	0x00001731
      60:	00001731 	.word	0x00001731
      64:	0000070d 	.word	0x0000070d
      68:	0000071d 	.word	0x0000071d
      6c:	0000072d 	.word	0x0000072d
      70:	0000073d 	.word	0x0000073d
      74:	0000074d 	.word	0x0000074d
      78:	0000075d 	.word	0x0000075d
      7c:	00001731 	.word	0x00001731
      80:	00001731 	.word	0x00001731
      84:	00001731 	.word	0x00001731
      88:	000013d1 	.word	0x000013d1
      8c:	000013e1 	.word	0x000013e1
      90:	000013f1 	.word	0x000013f1
	...
      9c:	00001731 	.word	0x00001731
      a0:	00001731 	.word	0x00001731
      a4:	00000000 	.word	0x00000000
      a8:	00001731 	.word	0x00001731
      ac:	00001731 	.word	0x00001731
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004394 	.word	0x00004394

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00004394 	.word	0x00004394
     108:	20000074 	.word	0x20000074
     10c:	00004394 	.word	0x00004394
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	000010f9 	.word	0x000010f9
     140:	00003f71 	.word	0x00003f71
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     150:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_us+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     158:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15e:	e006      	b.n	16e <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     164:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     166:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_us+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000000 	.word	0x20000000
     178:	e000e010 	.word	0xe000e010

0000017c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     17c:	4b0c      	ldr	r3, [pc, #48]	; (1b0 <cpu_irq_enter_critical+0x34>)
     17e:	681b      	ldr	r3, [r3, #0]
     180:	2b00      	cmp	r3, #0
     182:	d110      	bne.n	1a6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     184:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     188:	2b00      	cmp	r3, #0
     18a:	d109      	bne.n	1a0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     18c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     18e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     192:	2200      	movs	r2, #0
     194:	4b07      	ldr	r3, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x38>)
     196:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     198:	2201      	movs	r2, #1
     19a:	4b07      	ldr	r3, [pc, #28]	; (1b8 <cpu_irq_enter_critical+0x3c>)
     19c:	701a      	strb	r2, [r3, #0]
     19e:	e002      	b.n	1a6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1a0:	2200      	movs	r2, #0
     1a2:	4b05      	ldr	r3, [pc, #20]	; (1b8 <cpu_irq_enter_critical+0x3c>)
     1a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1a6:	4b02      	ldr	r3, [pc, #8]	; (1b0 <cpu_irq_enter_critical+0x34>)
     1a8:	681a      	ldr	r2, [r3, #0]
     1aa:	3201      	adds	r2, #1
     1ac:	601a      	str	r2, [r3, #0]
}
     1ae:	4770      	bx	lr
     1b0:	2000008c 	.word	0x2000008c
     1b4:	20000008 	.word	0x20000008
     1b8:	20000090 	.word	0x20000090

000001bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1bc:	4b08      	ldr	r3, [pc, #32]	; (1e0 <cpu_irq_leave_critical+0x24>)
     1be:	681a      	ldr	r2, [r3, #0]
     1c0:	3a01      	subs	r2, #1
     1c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c4:	681b      	ldr	r3, [r3, #0]
     1c6:	2b00      	cmp	r3, #0
     1c8:	d109      	bne.n	1de <cpu_irq_leave_critical+0x22>
     1ca:	4b06      	ldr	r3, [pc, #24]	; (1e4 <cpu_irq_leave_critical+0x28>)
     1cc:	781b      	ldrb	r3, [r3, #0]
     1ce:	2b00      	cmp	r3, #0
     1d0:	d005      	beq.n	1de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d2:	2201      	movs	r2, #1
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_leave_critical+0x2c>)
     1d6:	701a      	strb	r2, [r3, #0]
     1d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     1dc:	b662      	cpsie	i
	}
}
     1de:	4770      	bx	lr
     1e0:	2000008c 	.word	0x2000008c
     1e4:	20000090 	.word	0x20000090
     1e8:	20000008 	.word	0x20000008

000001ec <system_board_init>:




void system_board_init(void)
{
     1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ee:	4647      	mov	r7, r8
     1f0:	b480      	push	{r7}
     1f2:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2601      	movs	r6, #1
     1f8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	2013      	movs	r0, #19
     202:	1c21      	adds	r1, r4, #0
     204:	4d27      	ldr	r5, [pc, #156]	; (2a4 <system_board_init+0xb8>)
     206:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	4a27      	ldr	r2, [pc, #156]	; (2a8 <system_board_init+0xbc>)
     20a:	4690      	mov	r8, r2
     20c:	2380      	movs	r3, #128	; 0x80
     20e:	031b      	lsls	r3, r3, #12
     210:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     212:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     214:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     216:	201c      	movs	r0, #28
     218:	1c21      	adds	r1, r4, #0
     21a:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     21c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     21e:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     220:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     222:	2052      	movs	r0, #82	; 0x52
     224:	1c21      	adds	r1, r4, #0
     226:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     228:	203e      	movs	r0, #62	; 0x3e
     22a:	1c21      	adds	r1, r4, #0
     22c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     22e:	203f      	movs	r0, #63	; 0x3f
     230:	1c21      	adds	r1, r4, #0
     232:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     234:	202f      	movs	r0, #47	; 0x2f
     236:	1c21      	adds	r1, r4, #0
     238:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     23a:	2014      	movs	r0, #20
     23c:	1c21      	adds	r1, r4, #0
     23e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     240:	2280      	movs	r2, #128	; 0x80
     242:	02d2      	lsls	r2, r2, #11
     244:	4b19      	ldr	r3, [pc, #100]	; (2ac <system_board_init+0xc0>)
     246:	619a      	str	r2, [r3, #24]
     248:	3b80      	subs	r3, #128	; 0x80
     24a:	2280      	movs	r2, #128	; 0x80
     24c:	05d2      	lsls	r2, r2, #23
     24e:	619a      	str	r2, [r3, #24]
     250:	2280      	movs	r2, #128	; 0x80
     252:	0612      	lsls	r2, r2, #24
     254:	619a      	str	r2, [r3, #24]
     256:	2280      	movs	r2, #128	; 0x80
     258:	0212      	lsls	r2, r2, #8
     25a:	619a      	str	r2, [r3, #24]
     25c:	2380      	movs	r3, #128	; 0x80
     25e:	035b      	lsls	r3, r3, #13
     260:	4642      	mov	r2, r8
     262:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     264:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     266:	2053      	movs	r0, #83	; 0x53
     268:	1c21      	adds	r1, r4, #0
     26a:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     26c:	4b10      	ldr	r3, [pc, #64]	; (2b0 <system_board_init+0xc4>)
     26e:	6a19      	ldr	r1, [r3, #32]
     270:	2280      	movs	r2, #128	; 0x80
     272:	0392      	lsls	r2, r2, #14
     274:	430a      	orrs	r2, r1
     276:	621a      	str	r2, [r3, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     278:	2204      	movs	r2, #4
     27a:	4b0e      	ldr	r3, [pc, #56]	; (2b4 <system_board_init+0xc8>)
     27c:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     27e:	466b      	mov	r3, sp
     280:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     282:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     284:	2305      	movs	r3, #5
     286:	466a      	mov	r2, sp
     288:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     28a:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     28c:	2009      	movs	r0, #9
     28e:	4669      	mov	r1, sp
     290:	4c09      	ldr	r4, [pc, #36]	; (2b8 <system_board_init+0xcc>)
     292:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     294:	200c      	movs	r0, #12
     296:	4669      	mov	r1, sp
     298:	47a0      	blx	r4
#endif

}
     29a:	b002      	add	sp, #8
     29c:	bc04      	pop	{r2}
     29e:	4690      	mov	r8, r2
     2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	000004ad 	.word	0x000004ad
     2a8:	41004400 	.word	0x41004400
     2ac:	41004500 	.word	0x41004500
     2b0:	40000400 	.word	0x40000400
     2b4:	42005400 	.word	0x42005400
     2b8:	000012ed 	.word	0x000012ed

000002bc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2bc:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2be:	2a00      	cmp	r2, #0
     2c0:	d10f      	bne.n	2e2 <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     2c2:	008b      	lsls	r3, r1, #2
     2c4:	4a08      	ldr	r2, [pc, #32]	; (2e8 <extint_register_callback+0x2c>)
     2c6:	589a      	ldr	r2, [r3, r2]
     2c8:	2a00      	cmp	r2, #0
     2ca:	d104      	bne.n	2d6 <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
     2cc:	1c19      	adds	r1, r3, #0
     2ce:	4b06      	ldr	r3, [pc, #24]	; (2e8 <extint_register_callback+0x2c>)
     2d0:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     2d2:	2300      	movs	r3, #0
     2d4:	e005      	b.n	2e2 <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     2d6:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     2d8:	1a12      	subs	r2, r2, r0
     2da:	1e50      	subs	r0, r2, #1
     2dc:	4182      	sbcs	r2, r0
     2de:	4252      	negs	r2, r2
     2e0:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2e2:	1c18      	adds	r0, r3, #0
     2e4:	4770      	bx	lr
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	20000840 	.word	0x20000840

000002ec <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2ec:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     2ee:	2900      	cmp	r1, #0
     2f0:	d107      	bne.n	302 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2f2:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2f4:	281f      	cmp	r0, #31
     2f6:	d800      	bhi.n	2fa <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     2fa:	2201      	movs	r2, #1
     2fc:	4082      	lsls	r2, r0
     2fe:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     300:	2300      	movs	r3, #0
}
     302:	1c18      	adds	r0, r3, #0
     304:	4770      	bx	lr
     306:	46c0      	nop			; (mov r8, r8)
     308:	40001800 	.word	0x40001800

0000030c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     30c:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     30e:	2900      	cmp	r1, #0
     310:	d107      	bne.n	322 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     312:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     314:	281f      	cmp	r0, #31
     316:	d800      	bhi.n	31a <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     318:	4b03      	ldr	r3, [pc, #12]	; (328 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     31a:	2201      	movs	r2, #1
     31c:	4082      	lsls	r2, r0
     31e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     320:	2300      	movs	r3, #0
}
     322:	1c18      	adds	r0, r3, #0
     324:	4770      	bx	lr
     326:	46c0      	nop			; (mov r8, r8)
     328:	40001800 	.word	0x40001800

0000032c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     32c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     32e:	2200      	movs	r2, #0
     330:	4b16      	ldr	r3, [pc, #88]	; (38c <EIC_Handler+0x60>)
     332:	701a      	strb	r2, [r3, #0]
     334:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     336:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     338:	4d15      	ldr	r5, [pc, #84]	; (390 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     33a:	4c14      	ldr	r4, [pc, #80]	; (38c <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     33c:	2b1f      	cmp	r3, #31
     33e:	d910      	bls.n	362 <EIC_Handler+0x36>
     340:	e019      	b.n	376 <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     342:	4914      	ldr	r1, [pc, #80]	; (394 <EIC_Handler+0x68>)
     344:	e000      	b.n	348 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     346:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     348:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     34a:	009b      	lsls	r3, r3, #2
     34c:	595b      	ldr	r3, [r3, r5]
     34e:	2b00      	cmp	r3, #0
     350:	d000      	beq.n	354 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     352:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     354:	7823      	ldrb	r3, [r4, #0]
     356:	3301      	adds	r3, #1
     358:	b2db      	uxtb	r3, r3
     35a:	7023      	strb	r3, [r4, #0]
     35c:	2b0f      	cmp	r3, #15
     35e:	d814      	bhi.n	38a <EIC_Handler+0x5e>
     360:	e7ec      	b.n	33c <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     362:	1c32      	adds	r2, r6, #0
     364:	401a      	ands	r2, r3
     366:	2101      	movs	r1, #1
     368:	4091      	lsls	r1, r2
     36a:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     36c:	4909      	ldr	r1, [pc, #36]	; (394 <EIC_Handler+0x68>)
     36e:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     370:	4211      	tst	r1, r2
     372:	d1e6      	bne.n	342 <EIC_Handler+0x16>
     374:	e7ee      	b.n	354 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     376:	1c32      	adds	r2, r6, #0
     378:	401a      	ands	r2, r3
     37a:	2101      	movs	r1, #1
     37c:	4091      	lsls	r1, r2
     37e:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     380:	2100      	movs	r1, #0
     382:	6909      	ldr	r1, [r1, #16]
     384:	4211      	tst	r1, r2
     386:	d1de      	bne.n	346 <EIC_Handler+0x1a>
     388:	e7e4      	b.n	354 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     38a:	bd70      	pop	{r4, r5, r6, pc}
     38c:	2000083c 	.word	0x2000083c
     390:	20000840 	.word	0x20000840
     394:	40001800 	.word	0x40001800

00000398 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     398:	4b05      	ldr	r3, [pc, #20]	; (3b0 <_extint_enable+0x18>)
     39a:	7819      	ldrb	r1, [r3, #0]
     39c:	2202      	movs	r2, #2
     39e:	430a      	orrs	r2, r1
     3a0:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3a2:	1c1a      	adds	r2, r3, #0
     3a4:	7853      	ldrb	r3, [r2, #1]
     3a6:	b25b      	sxtb	r3, r3
     3a8:	2b00      	cmp	r3, #0
     3aa:	dbfb      	blt.n	3a4 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3ac:	4770      	bx	lr
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	40001800 	.word	0x40001800

000003b4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     3b4:	b500      	push	{lr}
     3b6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     3b8:	4b12      	ldr	r3, [pc, #72]	; (404 <_system_extint_init+0x50>)
     3ba:	6999      	ldr	r1, [r3, #24]
     3bc:	2240      	movs	r2, #64	; 0x40
     3be:	430a      	orrs	r2, r1
     3c0:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     3c2:	a901      	add	r1, sp, #4
     3c4:	2300      	movs	r3, #0
     3c6:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     3c8:	2005      	movs	r0, #5
     3ca:	4b0f      	ldr	r3, [pc, #60]	; (408 <_system_extint_init+0x54>)
     3cc:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     3ce:	2005      	movs	r0, #5
     3d0:	4b0e      	ldr	r3, [pc, #56]	; (40c <_system_extint_init+0x58>)
     3d2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     3d4:	4b0e      	ldr	r3, [pc, #56]	; (410 <_system_extint_init+0x5c>)
     3d6:	7819      	ldrb	r1, [r3, #0]
     3d8:	2201      	movs	r2, #1
     3da:	430a      	orrs	r2, r1
     3dc:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     3de:	1c1a      	adds	r2, r3, #0
     3e0:	7853      	ldrb	r3, [r2, #1]
     3e2:	b25b      	sxtb	r3, r3
     3e4:	2b00      	cmp	r3, #0
     3e6:	dbfb      	blt.n	3e0 <_system_extint_init+0x2c>
     3e8:	4b0a      	ldr	r3, [pc, #40]	; (414 <_system_extint_init+0x60>)
     3ea:	1c19      	adds	r1, r3, #0
     3ec:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     3ee:	2200      	movs	r2, #0
     3f0:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     3f2:	428b      	cmp	r3, r1
     3f4:	d1fc      	bne.n	3f0 <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3f6:	2210      	movs	r2, #16
     3f8:	4b07      	ldr	r3, [pc, #28]	; (418 <_system_extint_init+0x64>)
     3fa:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     3fc:	4b07      	ldr	r3, [pc, #28]	; (41c <_system_extint_init+0x68>)
     3fe:	4798      	blx	r3
}
     400:	b003      	add	sp, #12
     402:	bd00      	pop	{pc}
     404:	40000400 	.word	0x40000400
     408:	00001211 	.word	0x00001211
     40c:	00001185 	.word	0x00001185
     410:	40001800 	.word	0x40001800
     414:	20000840 	.word	0x20000840
     418:	e000e100 	.word	0xe000e100
     41c:	00000399 	.word	0x00000399

00000420 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     420:	2300      	movs	r3, #0
     422:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     424:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     426:	2201      	movs	r2, #1
     428:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     42a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     42c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     42e:	2302      	movs	r3, #2
     430:	72c3      	strb	r3, [r0, #11]
}
     432:	4770      	bx	lr

00000434 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     434:	b5f0      	push	{r4, r5, r6, r7, lr}
     436:	b083      	sub	sp, #12
     438:	1c05      	adds	r5, r0, #0
     43a:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     43c:	a901      	add	r1, sp, #4
     43e:	2300      	movs	r3, #0
     440:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     442:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     444:	6863      	ldr	r3, [r4, #4]
     446:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     448:	7a23      	ldrb	r3, [r4, #8]
     44a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     44c:	7820      	ldrb	r0, [r4, #0]
     44e:	4b15      	ldr	r3, [pc, #84]	; (4a4 <extint_chan_set_config+0x70>)
     450:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     452:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     454:	2d1f      	cmp	r5, #31
     456:	d800      	bhi.n	45a <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     458:	4b13      	ldr	r3, [pc, #76]	; (4a8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     45a:	2107      	movs	r1, #7
     45c:	4029      	ands	r1, r5
     45e:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     460:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     462:	7aa2      	ldrb	r2, [r4, #10]
     464:	2a00      	cmp	r2, #0
     466:	d001      	beq.n	46c <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     468:	2208      	movs	r2, #8
     46a:	4310      	orrs	r0, r2
     46c:	08ea      	lsrs	r2, r5, #3
     46e:	0092      	lsls	r2, r2, #2
     470:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     472:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     474:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     476:	270f      	movs	r7, #15
     478:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     47a:	43be      	bics	r6, r7
     47c:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     47e:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     480:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     482:	7a62      	ldrb	r2, [r4, #9]
     484:	2a00      	cmp	r2, #0
     486:	d006      	beq.n	496 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     488:	695a      	ldr	r2, [r3, #20]
     48a:	2101      	movs	r1, #1
     48c:	40a9      	lsls	r1, r5
     48e:	1c0d      	adds	r5, r1, #0
     490:	4315      	orrs	r5, r2
     492:	615d      	str	r5, [r3, #20]
     494:	e004      	b.n	4a0 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     496:	695a      	ldr	r2, [r3, #20]
     498:	2101      	movs	r1, #1
     49a:	40a9      	lsls	r1, r5
     49c:	438a      	bics	r2, r1
     49e:	615a      	str	r2, [r3, #20]
	}
}
     4a0:	b003      	add	sp, #12
     4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a4:	000012ed 	.word	0x000012ed
     4a8:	40001800 	.word	0x40001800

000004ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     4ac:	b500      	push	{lr}
     4ae:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4b0:	ab01      	add	r3, sp, #4
     4b2:	2280      	movs	r2, #128	; 0x80
     4b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4b6:	780a      	ldrb	r2, [r1, #0]
     4b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ba:	784a      	ldrb	r2, [r1, #1]
     4bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     4be:	788a      	ldrb	r2, [r1, #2]
     4c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4c2:	1c19      	adds	r1, r3, #0
     4c4:	4b01      	ldr	r3, [pc, #4]	; (4cc <port_pin_set_config+0x20>)
     4c6:	4798      	blx	r3
}
     4c8:	b003      	add	sp, #12
     4ca:	bd00      	pop	{pc}
     4cc:	000012ed 	.word	0x000012ed

000004d0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4d0:	b510      	push	{r4, lr}
     4d2:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     4d4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4d6:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     4d8:	4299      	cmp	r1, r3
     4da:	d30c      	bcc.n	4f6 <_sercom_get_sync_baud_val+0x26>
     4dc:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     4de:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     4e0:	1c60      	adds	r0, r4, #1
     4e2:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     4e4:	428b      	cmp	r3, r1
     4e6:	d801      	bhi.n	4ec <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     4e8:	1c04      	adds	r4, r0, #0
     4ea:	e7f8      	b.n	4de <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ec:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     4ee:	2cff      	cmp	r4, #255	; 0xff
     4f0:	d801      	bhi.n	4f6 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     4f2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     4f4:	2000      	movs	r0, #0
	}
}
     4f6:	bd10      	pop	{r4, pc}

000004f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4f8:	b510      	push	{r4, lr}
     4fa:	b082      	sub	sp, #8
     4fc:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     4fe:	4b0f      	ldr	r3, [pc, #60]	; (53c <sercom_set_gclk_generator+0x44>)
     500:	781b      	ldrb	r3, [r3, #0]
     502:	2b00      	cmp	r3, #0
     504:	d001      	beq.n	50a <sercom_set_gclk_generator+0x12>
     506:	2900      	cmp	r1, #0
     508:	d00d      	beq.n	526 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     50a:	a901      	add	r1, sp, #4
     50c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     50e:	2013      	movs	r0, #19
     510:	4b0b      	ldr	r3, [pc, #44]	; (540 <sercom_set_gclk_generator+0x48>)
     512:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     514:	2013      	movs	r0, #19
     516:	4b0b      	ldr	r3, [pc, #44]	; (544 <sercom_set_gclk_generator+0x4c>)
     518:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     51a:	4b08      	ldr	r3, [pc, #32]	; (53c <sercom_set_gclk_generator+0x44>)
     51c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     51e:	2201      	movs	r2, #1
     520:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     522:	2000      	movs	r0, #0
     524:	e007      	b.n	536 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     526:	4b05      	ldr	r3, [pc, #20]	; (53c <sercom_set_gclk_generator+0x44>)
     528:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     52a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     52c:	1b14      	subs	r4, r2, r4
     52e:	1e62      	subs	r2, r4, #1
     530:	4194      	sbcs	r4, r2
     532:	4264      	negs	r4, r4
     534:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     536:	b002      	add	sp, #8
     538:	bd10      	pop	{r4, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	20000094 	.word	0x20000094
     540:	00001211 	.word	0x00001211
     544:	00001185 	.word	0x00001185

00000548 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     548:	4b44      	ldr	r3, [pc, #272]	; (65c <_sercom_get_default_pad+0x114>)
     54a:	4298      	cmp	r0, r3
     54c:	d033      	beq.n	5b6 <_sercom_get_default_pad+0x6e>
     54e:	d806      	bhi.n	55e <_sercom_get_default_pad+0x16>
     550:	4b43      	ldr	r3, [pc, #268]	; (660 <_sercom_get_default_pad+0x118>)
     552:	4298      	cmp	r0, r3
     554:	d00d      	beq.n	572 <_sercom_get_default_pad+0x2a>
     556:	4b43      	ldr	r3, [pc, #268]	; (664 <_sercom_get_default_pad+0x11c>)
     558:	4298      	cmp	r0, r3
     55a:	d01b      	beq.n	594 <_sercom_get_default_pad+0x4c>
     55c:	e06f      	b.n	63e <_sercom_get_default_pad+0xf6>
     55e:	4b42      	ldr	r3, [pc, #264]	; (668 <_sercom_get_default_pad+0x120>)
     560:	4298      	cmp	r0, r3
     562:	d04a      	beq.n	5fa <_sercom_get_default_pad+0xb2>
     564:	4b41      	ldr	r3, [pc, #260]	; (66c <_sercom_get_default_pad+0x124>)
     566:	4298      	cmp	r0, r3
     568:	d058      	beq.n	61c <_sercom_get_default_pad+0xd4>
     56a:	4b41      	ldr	r3, [pc, #260]	; (670 <_sercom_get_default_pad+0x128>)
     56c:	4298      	cmp	r0, r3
     56e:	d166      	bne.n	63e <_sercom_get_default_pad+0xf6>
     570:	e032      	b.n	5d8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     572:	2901      	cmp	r1, #1
     574:	d065      	beq.n	642 <_sercom_get_default_pad+0xfa>
     576:	2900      	cmp	r1, #0
     578:	d004      	beq.n	584 <_sercom_get_default_pad+0x3c>
     57a:	2902      	cmp	r1, #2
     57c:	d006      	beq.n	58c <_sercom_get_default_pad+0x44>
     57e:	2903      	cmp	r1, #3
     580:	d006      	beq.n	590 <_sercom_get_default_pad+0x48>
     582:	e001      	b.n	588 <_sercom_get_default_pad+0x40>
     584:	483b      	ldr	r0, [pc, #236]	; (674 <_sercom_get_default_pad+0x12c>)
     586:	e067      	b.n	658 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     588:	2000      	movs	r0, #0
     58a:	e065      	b.n	658 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     58c:	483a      	ldr	r0, [pc, #232]	; (678 <_sercom_get_default_pad+0x130>)
     58e:	e063      	b.n	658 <_sercom_get_default_pad+0x110>
     590:	483a      	ldr	r0, [pc, #232]	; (67c <_sercom_get_default_pad+0x134>)
     592:	e061      	b.n	658 <_sercom_get_default_pad+0x110>
     594:	2901      	cmp	r1, #1
     596:	d056      	beq.n	646 <_sercom_get_default_pad+0xfe>
     598:	2900      	cmp	r1, #0
     59a:	d004      	beq.n	5a6 <_sercom_get_default_pad+0x5e>
     59c:	2902      	cmp	r1, #2
     59e:	d006      	beq.n	5ae <_sercom_get_default_pad+0x66>
     5a0:	2903      	cmp	r1, #3
     5a2:	d006      	beq.n	5b2 <_sercom_get_default_pad+0x6a>
     5a4:	e001      	b.n	5aa <_sercom_get_default_pad+0x62>
     5a6:	2003      	movs	r0, #3
     5a8:	e056      	b.n	658 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5aa:	2000      	movs	r0, #0
     5ac:	e054      	b.n	658 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ae:	4834      	ldr	r0, [pc, #208]	; (680 <_sercom_get_default_pad+0x138>)
     5b0:	e052      	b.n	658 <_sercom_get_default_pad+0x110>
     5b2:	4834      	ldr	r0, [pc, #208]	; (684 <_sercom_get_default_pad+0x13c>)
     5b4:	e050      	b.n	658 <_sercom_get_default_pad+0x110>
     5b6:	2901      	cmp	r1, #1
     5b8:	d047      	beq.n	64a <_sercom_get_default_pad+0x102>
     5ba:	2900      	cmp	r1, #0
     5bc:	d004      	beq.n	5c8 <_sercom_get_default_pad+0x80>
     5be:	2902      	cmp	r1, #2
     5c0:	d006      	beq.n	5d0 <_sercom_get_default_pad+0x88>
     5c2:	2903      	cmp	r1, #3
     5c4:	d006      	beq.n	5d4 <_sercom_get_default_pad+0x8c>
     5c6:	e001      	b.n	5cc <_sercom_get_default_pad+0x84>
     5c8:	482f      	ldr	r0, [pc, #188]	; (688 <_sercom_get_default_pad+0x140>)
     5ca:	e045      	b.n	658 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5cc:	2000      	movs	r0, #0
     5ce:	e043      	b.n	658 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5d0:	482e      	ldr	r0, [pc, #184]	; (68c <_sercom_get_default_pad+0x144>)
     5d2:	e041      	b.n	658 <_sercom_get_default_pad+0x110>
     5d4:	482e      	ldr	r0, [pc, #184]	; (690 <_sercom_get_default_pad+0x148>)
     5d6:	e03f      	b.n	658 <_sercom_get_default_pad+0x110>
     5d8:	2901      	cmp	r1, #1
     5da:	d038      	beq.n	64e <_sercom_get_default_pad+0x106>
     5dc:	2900      	cmp	r1, #0
     5de:	d004      	beq.n	5ea <_sercom_get_default_pad+0xa2>
     5e0:	2902      	cmp	r1, #2
     5e2:	d006      	beq.n	5f2 <_sercom_get_default_pad+0xaa>
     5e4:	2903      	cmp	r1, #3
     5e6:	d006      	beq.n	5f6 <_sercom_get_default_pad+0xae>
     5e8:	e001      	b.n	5ee <_sercom_get_default_pad+0xa6>
     5ea:	482a      	ldr	r0, [pc, #168]	; (694 <_sercom_get_default_pad+0x14c>)
     5ec:	e034      	b.n	658 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5ee:	2000      	movs	r0, #0
     5f0:	e032      	b.n	658 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5f2:	4829      	ldr	r0, [pc, #164]	; (698 <_sercom_get_default_pad+0x150>)
     5f4:	e030      	b.n	658 <_sercom_get_default_pad+0x110>
     5f6:	4829      	ldr	r0, [pc, #164]	; (69c <_sercom_get_default_pad+0x154>)
     5f8:	e02e      	b.n	658 <_sercom_get_default_pad+0x110>
     5fa:	2901      	cmp	r1, #1
     5fc:	d029      	beq.n	652 <_sercom_get_default_pad+0x10a>
     5fe:	2900      	cmp	r1, #0
     600:	d004      	beq.n	60c <_sercom_get_default_pad+0xc4>
     602:	2902      	cmp	r1, #2
     604:	d006      	beq.n	614 <_sercom_get_default_pad+0xcc>
     606:	2903      	cmp	r1, #3
     608:	d006      	beq.n	618 <_sercom_get_default_pad+0xd0>
     60a:	e001      	b.n	610 <_sercom_get_default_pad+0xc8>
     60c:	4824      	ldr	r0, [pc, #144]	; (6a0 <_sercom_get_default_pad+0x158>)
     60e:	e023      	b.n	658 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     610:	2000      	movs	r0, #0
     612:	e021      	b.n	658 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     614:	4823      	ldr	r0, [pc, #140]	; (6a4 <_sercom_get_default_pad+0x15c>)
     616:	e01f      	b.n	658 <_sercom_get_default_pad+0x110>
     618:	4823      	ldr	r0, [pc, #140]	; (6a8 <_sercom_get_default_pad+0x160>)
     61a:	e01d      	b.n	658 <_sercom_get_default_pad+0x110>
     61c:	2901      	cmp	r1, #1
     61e:	d01a      	beq.n	656 <_sercom_get_default_pad+0x10e>
     620:	2900      	cmp	r1, #0
     622:	d004      	beq.n	62e <_sercom_get_default_pad+0xe6>
     624:	2902      	cmp	r1, #2
     626:	d006      	beq.n	636 <_sercom_get_default_pad+0xee>
     628:	2903      	cmp	r1, #3
     62a:	d006      	beq.n	63a <_sercom_get_default_pad+0xf2>
     62c:	e001      	b.n	632 <_sercom_get_default_pad+0xea>
     62e:	481f      	ldr	r0, [pc, #124]	; (6ac <_sercom_get_default_pad+0x164>)
     630:	e012      	b.n	658 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     632:	2000      	movs	r0, #0
     634:	e010      	b.n	658 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     636:	481e      	ldr	r0, [pc, #120]	; (6b0 <_sercom_get_default_pad+0x168>)
     638:	e00e      	b.n	658 <_sercom_get_default_pad+0x110>
     63a:	481e      	ldr	r0, [pc, #120]	; (6b4 <_sercom_get_default_pad+0x16c>)
     63c:	e00c      	b.n	658 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     63e:	2000      	movs	r0, #0
     640:	e00a      	b.n	658 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     642:	481d      	ldr	r0, [pc, #116]	; (6b8 <_sercom_get_default_pad+0x170>)
     644:	e008      	b.n	658 <_sercom_get_default_pad+0x110>
     646:	481d      	ldr	r0, [pc, #116]	; (6bc <_sercom_get_default_pad+0x174>)
     648:	e006      	b.n	658 <_sercom_get_default_pad+0x110>
     64a:	481d      	ldr	r0, [pc, #116]	; (6c0 <_sercom_get_default_pad+0x178>)
     64c:	e004      	b.n	658 <_sercom_get_default_pad+0x110>
     64e:	481d      	ldr	r0, [pc, #116]	; (6c4 <_sercom_get_default_pad+0x17c>)
     650:	e002      	b.n	658 <_sercom_get_default_pad+0x110>
     652:	481d      	ldr	r0, [pc, #116]	; (6c8 <_sercom_get_default_pad+0x180>)
     654:	e000      	b.n	658 <_sercom_get_default_pad+0x110>
     656:	481d      	ldr	r0, [pc, #116]	; (6cc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     658:	4770      	bx	lr
     65a:	46c0      	nop			; (mov r8, r8)
     65c:	42001000 	.word	0x42001000
     660:	42000800 	.word	0x42000800
     664:	42000c00 	.word	0x42000c00
     668:	42001800 	.word	0x42001800
     66c:	42001c00 	.word	0x42001c00
     670:	42001400 	.word	0x42001400
     674:	00040003 	.word	0x00040003
     678:	00060003 	.word	0x00060003
     67c:	00070003 	.word	0x00070003
     680:	001e0003 	.word	0x001e0003
     684:	001f0003 	.word	0x001f0003
     688:	000c0002 	.word	0x000c0002
     68c:	000e0002 	.word	0x000e0002
     690:	000f0002 	.word	0x000f0002
     694:	00100003 	.word	0x00100003
     698:	00120003 	.word	0x00120003
     69c:	00130003 	.word	0x00130003
     6a0:	00530005 	.word	0x00530005
     6a4:	003e0005 	.word	0x003e0005
     6a8:	00520005 	.word	0x00520005
     6ac:	00160003 	.word	0x00160003
     6b0:	00180003 	.word	0x00180003
     6b4:	00190003 	.word	0x00190003
     6b8:	00050003 	.word	0x00050003
     6bc:	00010003 	.word	0x00010003
     6c0:	000d0002 	.word	0x000d0002
     6c4:	00110003 	.word	0x00110003
     6c8:	003f0005 	.word	0x003f0005
     6cc:	00170003 	.word	0x00170003

000006d0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6d0:	b570      	push	{r4, r5, r6, lr}
     6d2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6d4:	4a0c      	ldr	r2, [pc, #48]	; (708 <_sercom_get_sercom_inst_index+0x38>)
     6d6:	466b      	mov	r3, sp
     6d8:	ca70      	ldmia	r2!, {r4, r5, r6}
     6da:	c370      	stmia	r3!, {r4, r5, r6}
     6dc:	ca32      	ldmia	r2!, {r1, r4, r5}
     6de:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6e0:	9e00      	ldr	r6, [sp, #0]
     6e2:	4286      	cmp	r6, r0
     6e4:	d006      	beq.n	6f4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6e6:	2301      	movs	r3, #1
     6e8:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6ea:	4669      	mov	r1, sp
     6ec:	5852      	ldr	r2, [r2, r1]
     6ee:	4282      	cmp	r2, r0
     6f0:	d103      	bne.n	6fa <_sercom_get_sercom_inst_index+0x2a>
     6f2:	e000      	b.n	6f6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6f4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     6f6:	b2d8      	uxtb	r0, r3
     6f8:	e003      	b.n	702 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6fa:	3301      	adds	r3, #1
     6fc:	2b06      	cmp	r3, #6
     6fe:	d1f3      	bne.n	6e8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     700:	2000      	movs	r0, #0
}
     702:	b006      	add	sp, #24
     704:	bd70      	pop	{r4, r5, r6, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	00004234 	.word	0x00004234

0000070c <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     70c:	b508      	push	{r3, lr}
     70e:	4b02      	ldr	r3, [pc, #8]	; (718 <SERCOM0_Handler+0xc>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	2000      	movs	r0, #0
     714:	4798      	blx	r3
     716:	bd08      	pop	{r3, pc}
     718:	20000098 	.word	0x20000098

0000071c <SERCOM1_Handler>:
     71c:	b508      	push	{r3, lr}
     71e:	4b02      	ldr	r3, [pc, #8]	; (728 <SERCOM1_Handler+0xc>)
     720:	685b      	ldr	r3, [r3, #4]
     722:	2001      	movs	r0, #1
     724:	4798      	blx	r3
     726:	bd08      	pop	{r3, pc}
     728:	20000098 	.word	0x20000098

0000072c <SERCOM2_Handler>:
     72c:	b508      	push	{r3, lr}
     72e:	4b02      	ldr	r3, [pc, #8]	; (738 <SERCOM2_Handler+0xc>)
     730:	689b      	ldr	r3, [r3, #8]
     732:	2002      	movs	r0, #2
     734:	4798      	blx	r3
     736:	bd08      	pop	{r3, pc}
     738:	20000098 	.word	0x20000098

0000073c <SERCOM3_Handler>:
     73c:	b508      	push	{r3, lr}
     73e:	4b02      	ldr	r3, [pc, #8]	; (748 <SERCOM3_Handler+0xc>)
     740:	68db      	ldr	r3, [r3, #12]
     742:	2003      	movs	r0, #3
     744:	4798      	blx	r3
     746:	bd08      	pop	{r3, pc}
     748:	20000098 	.word	0x20000098

0000074c <SERCOM4_Handler>:
     74c:	b508      	push	{r3, lr}
     74e:	4b02      	ldr	r3, [pc, #8]	; (758 <SERCOM4_Handler+0xc>)
     750:	691b      	ldr	r3, [r3, #16]
     752:	2004      	movs	r0, #4
     754:	4798      	blx	r3
     756:	bd08      	pop	{r3, pc}
     758:	20000098 	.word	0x20000098

0000075c <SERCOM5_Handler>:
     75c:	b508      	push	{r3, lr}
     75e:	4b02      	ldr	r3, [pc, #8]	; (768 <SERCOM5_Handler+0xc>)
     760:	695b      	ldr	r3, [r3, #20]
     762:	2005      	movs	r0, #5
     764:	4798      	blx	r3
     766:	bd08      	pop	{r3, pc}
     768:	20000098 	.word	0x20000098

0000076c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     76c:	b5f0      	push	{r4, r5, r6, r7, lr}
     76e:	465f      	mov	r7, fp
     770:	4656      	mov	r6, sl
     772:	464d      	mov	r5, r9
     774:	4644      	mov	r4, r8
     776:	b4f0      	push	{r4, r5, r6, r7}
     778:	b089      	sub	sp, #36	; 0x24
     77a:	1c07      	adds	r7, r0, #0
     77c:	1c0d      	adds	r5, r1, #0
     77e:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     780:	6039      	str	r1, [r7, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     782:	680b      	ldr	r3, [r1, #0]
     784:	0798      	lsls	r0, r3, #30
     786:	d400      	bmi.n	78a <spi_init+0x1e>
     788:	e08d      	b.n	8a6 <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     78a:	6a91      	ldr	r1, [r2, #40]	; 0x28
     78c:	9103      	str	r1, [sp, #12]
     78e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     790:	9204      	str	r2, [sp, #16]
     792:	6b23      	ldr	r3, [r4, #48]	; 0x30
     794:	9305      	str	r3, [sp, #20]
     796:	6b60      	ldr	r0, [r4, #52]	; 0x34
     798:	9006      	str	r0, [sp, #24]
     79a:	2600      	movs	r6, #0

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     79c:	46b1      	mov	r9, r6
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     79e:	221f      	movs	r2, #31
     7a0:	4690      	mov	r8, r2
     7a2:	b2f1      	uxtb	r1, r6
     7a4:	00b3      	lsls	r3, r6, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7a6:	aa03      	add	r2, sp, #12
     7a8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     7aa:	2800      	cmp	r0, #0
     7ac:	d102      	bne.n	7b4 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7ae:	1c28      	adds	r0, r5, #0
     7b0:	4b8f      	ldr	r3, [pc, #572]	; (9f0 <spi_init+0x284>)
     7b2:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     7b4:	1c41      	adds	r1, r0, #1
     7b6:	d029      	beq.n	80c <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     7b8:	0402      	lsls	r2, r0, #16
     7ba:	0c12      	lsrs	r2, r2, #16
     7bc:	4694      	mov	ip, r2
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     7be:	0c03      	lsrs	r3, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7c0:	b2da      	uxtb	r2, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7c2:	4649      	mov	r1, r9
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7c4:	0618      	lsls	r0, r3, #24
     7c6:	d403      	bmi.n	7d0 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     7c8:	0951      	lsrs	r1, r2, #5
     7ca:	01c9      	lsls	r1, r1, #7
     7cc:	4b89      	ldr	r3, [pc, #548]	; (9f4 <spi_init+0x288>)
     7ce:	18c9      	adds	r1, r1, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     7d0:	4640      	mov	r0, r8
     7d2:	4010      	ands	r0, r2

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     7d4:	180b      	adds	r3, r1, r0
     7d6:	3340      	adds	r3, #64	; 0x40
     7d8:	781b      	ldrb	r3, [r3, #0]
     7da:	469a      	mov	sl, r3
		return SYSTEM_PINMUX_GPIO;
     7dc:	2380      	movs	r3, #128	; 0x80
     7de:	469b      	mov	fp, r3
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     7e0:	4653      	mov	r3, sl
     7e2:	07db      	lsls	r3, r3, #31
     7e4:	d50c      	bpl.n	800 <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     7e6:	0840      	lsrs	r0, r0, #1
     7e8:	1809      	adds	r1, r1, r0
     7ea:	3130      	adds	r1, #48	; 0x30
     7ec:	780b      	ldrb	r3, [r1, #0]
     7ee:	b2db      	uxtb	r3, r3

	if (pin_index & 1) {
     7f0:	07d0      	lsls	r0, r2, #31
     7f2:	d502      	bpl.n	7fa <spi_init+0x8e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     7f4:	091b      	lsrs	r3, r3, #4
     7f6:	469b      	mov	fp, r3
     7f8:	e002      	b.n	800 <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     7fa:	220f      	movs	r2, #15
     7fc:	4013      	ands	r3, r2
     7fe:	469b      	mov	fp, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     800:	45dc      	cmp	ip, fp
     802:	d003      	beq.n	80c <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     804:	2300      	movs	r3, #0
     806:	603b      	str	r3, [r7, #0]
			return STATUS_ERR_DENIED;
     808:	201c      	movs	r0, #28
     80a:	e0ea      	b.n	9e2 <spi_init+0x276>
     80c:	3601      	adds	r6, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     80e:	2e04      	cmp	r6, #4
     810:	d1c7      	bne.n	7a2 <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     812:	2013      	movs	r0, #19
     814:	4b78      	ldr	r3, [pc, #480]	; (9f8 <spi_init+0x28c>)
     816:	4798      	blx	r3
     818:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     81a:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     81c:	2600      	movs	r6, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     81e:	2b01      	cmp	r3, #1
     820:	d111      	bne.n	846 <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
     822:	69a0      	ldr	r0, [r4, #24]
     824:	aa02      	add	r2, sp, #8
     826:	4b75      	ldr	r3, [pc, #468]	; (9fc <spi_init+0x290>)
     828:	4798      	blx	r3
     82a:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     82c:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     82e:	2b00      	cmp	r3, #0
     830:	d000      	beq.n	834 <spi_init+0xc8>
     832:	e0d6      	b.n	9e2 <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     834:	7b2b      	ldrb	r3, [r5, #12]
     836:	b2db      	uxtb	r3, r3
     838:	aa02      	add	r2, sp, #8
     83a:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     83c:	201c      	movs	r0, #28
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     83e:	429a      	cmp	r2, r3
     840:	d000      	beq.n	844 <spi_init+0xd8>
     842:	e0ce      	b.n	9e2 <spi_init+0x276>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     844:	260c      	movs	r6, #12
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     846:	68a2      	ldr	r2, [r4, #8]
     848:	6861      	ldr	r1, [r4, #4]
     84a:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     84c:	68e3      	ldr	r3, [r4, #12]
     84e:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     850:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
     852:	7c23      	ldrb	r3, [r4, #16]

	if (config->run_in_standby) {
     854:	7c61      	ldrb	r1, [r4, #17]
     856:	2900      	cmp	r1, #0
     858:	d001      	beq.n	85e <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     85a:	2180      	movs	r1, #128	; 0x80
     85c:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     85e:	7ca1      	ldrb	r1, [r4, #18]
     860:	2900      	cmp	r1, #0
     862:	d002      	beq.n	86a <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     864:	2180      	movs	r1, #128	; 0x80
     866:	0289      	lsls	r1, r1, #10
     868:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     86a:	7ce1      	ldrb	r1, [r4, #19]
     86c:	2900      	cmp	r1, #0
     86e:	d002      	beq.n	876 <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     870:	2180      	movs	r1, #128	; 0x80
     872:	0089      	lsls	r1, r1, #2
     874:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     876:	7d21      	ldrb	r1, [r4, #20]
     878:	2900      	cmp	r1, #0
     87a:	d002      	beq.n	882 <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     87c:	2180      	movs	r1, #128	; 0x80
     87e:	0189      	lsls	r1, r1, #6
     880:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     882:	6829      	ldr	r1, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     884:	2002      	movs	r0, #2
     886:	4302      	orrs	r2, r0

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     888:	428a      	cmp	r2, r1
     88a:	d108      	bne.n	89e <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
     88c:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     88e:	429a      	cmp	r2, r3
     890:	d105      	bne.n	89e <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
     892:	7823      	ldrb	r3, [r4, #0]
     894:	717b      	strb	r3, [r7, #5]
		module->character_size = config->character_size;
     896:	7c23      	ldrb	r3, [r4, #16]
     898:	71bb      	strb	r3, [r7, #6]
		return STATUS_OK;
     89a:	2000      	movs	r0, #0
     89c:	e0a1      	b.n	9e2 <spi_init+0x276>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     89e:	2300      	movs	r3, #0
     8a0:	603b      	str	r3, [r7, #0]

	return STATUS_ERR_DENIED;
     8a2:	201c      	movs	r0, #28
     8a4:	e09d      	b.n	9e2 <spi_init+0x276>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     8a6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     8a8:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     8aa:	07d9      	lsls	r1, r3, #31
     8ac:	d500      	bpl.n	8b0 <spi_init+0x144>
     8ae:	e098      	b.n	9e2 <spi_init+0x276>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8b0:	1c28      	adds	r0, r5, #0
     8b2:	4b53      	ldr	r3, [pc, #332]	; (a00 <spi_init+0x294>)
     8b4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     8b6:	4b53      	ldr	r3, [pc, #332]	; (a04 <spi_init+0x298>)
     8b8:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     8ba:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     8bc:	2601      	movs	r6, #1
     8be:	4096      	lsls	r6, r2
     8c0:	1c32      	adds	r2, r6, #0
     8c2:	430a      	orrs	r2, r1
     8c4:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     8c6:	a907      	add	r1, sp, #28
     8c8:	2624      	movs	r6, #36	; 0x24
     8ca:	5da3      	ldrb	r3, [r4, r6]
     8cc:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8ce:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     8d0:	b2c0      	uxtb	r0, r0
     8d2:	4680      	mov	r8, r0
     8d4:	4b4c      	ldr	r3, [pc, #304]	; (a08 <spi_init+0x29c>)
     8d6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     8d8:	4640      	mov	r0, r8
     8da:	4b4c      	ldr	r3, [pc, #304]	; (a0c <spi_init+0x2a0>)
     8dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8de:	5da0      	ldrb	r0, [r4, r6]
     8e0:	2100      	movs	r1, #0
     8e2:	4b4b      	ldr	r3, [pc, #300]	; (a10 <spi_init+0x2a4>)
     8e4:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     8e6:	7823      	ldrb	r3, [r4, #0]
     8e8:	2b01      	cmp	r3, #1
     8ea:	d103      	bne.n	8f4 <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     8ec:	682a      	ldr	r2, [r5, #0]
     8ee:	230c      	movs	r3, #12
     8f0:	4313      	orrs	r3, r2
     8f2:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8f4:	683e      	ldr	r6, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8f6:	ab02      	add	r3, sp, #8
     8f8:	2280      	movs	r2, #128	; 0x80
     8fa:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8fc:	2200      	movs	r2, #0
     8fe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     900:	2101      	movs	r1, #1
     902:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     904:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     906:	7823      	ldrb	r3, [r4, #0]
     908:	2b00      	cmp	r3, #0
     90a:	d101      	bne.n	910 <spi_init+0x1a4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     90c:	ab02      	add	r3, sp, #8
     90e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     910:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     912:	9203      	str	r2, [sp, #12]
     914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     916:	9304      	str	r3, [sp, #16]
     918:	6b20      	ldr	r0, [r4, #48]	; 0x30
     91a:	9005      	str	r0, [sp, #20]
     91c:	6b61      	ldr	r1, [r4, #52]	; 0x34
     91e:	9106      	str	r1, [sp, #24]
     920:	2500      	movs	r5, #0
     922:	b2e9      	uxtb	r1, r5
     924:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     926:	aa03      	add	r2, sp, #12
     928:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     92a:	2800      	cmp	r0, #0
     92c:	d102      	bne.n	934 <spi_init+0x1c8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     92e:	1c30      	adds	r0, r6, #0
     930:	4a2f      	ldr	r2, [pc, #188]	; (9f0 <spi_init+0x284>)
     932:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     934:	1c43      	adds	r3, r0, #1
     936:	d006      	beq.n	946 <spi_init+0x1da>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     938:	4669      	mov	r1, sp
     93a:	7208      	strb	r0, [r1, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     93c:	0c00      	lsrs	r0, r0, #16
     93e:	b2c0      	uxtb	r0, r0
     940:	a902      	add	r1, sp, #8
     942:	4a34      	ldr	r2, [pc, #208]	; (a14 <spi_init+0x2a8>)
     944:	4790      	blx	r2
     946:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     948:	2d04      	cmp	r5, #4
     94a:	d1ea      	bne.n	922 <spi_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     94c:	7823      	ldrb	r3, [r4, #0]
     94e:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
     950:	7c23      	ldrb	r3, [r4, #16]
     952:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
     954:	7ca3      	ldrb	r3, [r4, #18]
     956:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     958:	7d23      	ldrb	r3, [r4, #20]
     95a:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     95c:	2200      	movs	r2, #0
     95e:	466b      	mov	r3, sp
     960:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     962:	7823      	ldrb	r3, [r4, #0]
     964:	2b01      	cmp	r3, #1
     966:	d114      	bne.n	992 <spi_init+0x226>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     968:	6838      	ldr	r0, [r7, #0]
     96a:	4b25      	ldr	r3, [pc, #148]	; (a00 <spi_init+0x294>)
     96c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     96e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     970:	b2c0      	uxtb	r0, r0
     972:	4b21      	ldr	r3, [pc, #132]	; (9f8 <spi_init+0x28c>)
     974:	4798      	blx	r3
     976:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     978:	69a0      	ldr	r0, [r4, #24]
     97a:	466a      	mov	r2, sp
     97c:	3206      	adds	r2, #6
     97e:	4b1f      	ldr	r3, [pc, #124]	; (9fc <spi_init+0x290>)
     980:	4798      	blx	r3
     982:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     984:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     986:	2b00      	cmp	r3, #0
     988:	d12b      	bne.n	9e2 <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     98a:	466b      	mov	r3, sp
     98c:	3306      	adds	r3, #6
     98e:	781b      	ldrb	r3, [r3, #0]
     990:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     992:	68a2      	ldr	r2, [r4, #8]
     994:	6863      	ldr	r3, [r4, #4]
     996:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     998:	68e0      	ldr	r0, [r4, #12]
     99a:	4302      	orrs	r2, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
     99c:	7c23      	ldrb	r3, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     99e:	7c61      	ldrb	r1, [r4, #17]
     9a0:	2900      	cmp	r1, #0
     9a2:	d103      	bne.n	9ac <spi_init+0x240>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     9a4:	491c      	ldr	r1, [pc, #112]	; (a18 <spi_init+0x2ac>)
     9a6:	7889      	ldrb	r1, [r1, #2]
     9a8:	0788      	lsls	r0, r1, #30
     9aa:	d501      	bpl.n	9b0 <spi_init+0x244>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     9ac:	2180      	movs	r1, #128	; 0x80
     9ae:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     9b0:	7ca1      	ldrb	r1, [r4, #18]
     9b2:	2900      	cmp	r1, #0
     9b4:	d002      	beq.n	9bc <spi_init+0x250>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     9b6:	2180      	movs	r1, #128	; 0x80
     9b8:	0289      	lsls	r1, r1, #10
     9ba:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     9bc:	7ce1      	ldrb	r1, [r4, #19]
     9be:	2900      	cmp	r1, #0
     9c0:	d002      	beq.n	9c8 <spi_init+0x25c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     9c2:	2180      	movs	r1, #128	; 0x80
     9c4:	0089      	lsls	r1, r1, #2
     9c6:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     9c8:	7d21      	ldrb	r1, [r4, #20]
     9ca:	2900      	cmp	r1, #0
     9cc:	d002      	beq.n	9d4 <spi_init+0x268>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     9ce:	2180      	movs	r1, #128	; 0x80
     9d0:	0189      	lsls	r1, r1, #6
     9d2:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     9d4:	6831      	ldr	r1, [r6, #0]
     9d6:	430a      	orrs	r2, r1
     9d8:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     9da:	6872      	ldr	r2, [r6, #4]
     9dc:	4313      	orrs	r3, r2
     9de:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
     9e0:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     9e2:	b009      	add	sp, #36	; 0x24
     9e4:	bc3c      	pop	{r2, r3, r4, r5}
     9e6:	4690      	mov	r8, r2
     9e8:	4699      	mov	r9, r3
     9ea:	46a2      	mov	sl, r4
     9ec:	46ab      	mov	fp, r5
     9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9f0:	00000549 	.word	0x00000549
     9f4:	41004400 	.word	0x41004400
     9f8:	0000122d 	.word	0x0000122d
     9fc:	000004d1 	.word	0x000004d1
     a00:	000006d1 	.word	0x000006d1
     a04:	40000400 	.word	0x40000400
     a08:	00001211 	.word	0x00001211
     a0c:	00001185 	.word	0x00001185
     a10:	000004f9 	.word	0x000004f9
     a14:	000012ed 	.word	0x000012ed
     a18:	41002000 	.word	0x41002000

00000a1c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     a1c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     a1e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     a20:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     a22:	2c01      	cmp	r4, #1
     a24:	d16c      	bne.n	b00 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     a26:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     a28:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     a2a:	2c00      	cmp	r4, #0
     a2c:	d168      	bne.n	b00 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     a2e:	2a00      	cmp	r2, #0
     a30:	d057      	beq.n	ae2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     a32:	784b      	ldrb	r3, [r1, #1]
     a34:	2b00      	cmp	r3, #0
     a36:	d044      	beq.n	ac2 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     a38:	6802      	ldr	r2, [r0, #0]
     a3a:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     a3c:	07dc      	lsls	r4, r3, #31
     a3e:	d40f      	bmi.n	a60 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     a40:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a42:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a44:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a46:	2900      	cmp	r1, #0
     a48:	d103      	bne.n	a52 <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     a4a:	095a      	lsrs	r2, r3, #5
     a4c:	01d2      	lsls	r2, r2, #7
     a4e:	492d      	ldr	r1, [pc, #180]	; (b04 <spi_select_slave+0xe8>)
     a50:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a52:	211f      	movs	r1, #31
     a54:	400b      	ands	r3, r1
     a56:	2101      	movs	r1, #1
     a58:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a5a:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     a5c:	2305      	movs	r3, #5
     a5e:	e04f      	b.n	b00 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     a60:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a62:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a64:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a66:	2c00      	cmp	r4, #0
     a68:	d103      	bne.n	a72 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     a6a:	095a      	lsrs	r2, r3, #5
     a6c:	01d2      	lsls	r2, r2, #7
     a6e:	4c25      	ldr	r4, [pc, #148]	; (b04 <spi_select_slave+0xe8>)
     a70:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a72:	241f      	movs	r4, #31
     a74:	4023      	ands	r3, r4
     a76:	2401      	movs	r4, #1
     a78:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a7a:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     a7c:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a7e:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     a80:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     a82:	07d4      	lsls	r4, r2, #31
     a84:	d500      	bpl.n	a88 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a86:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     a88:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     a8a:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     a8c:	2a00      	cmp	r2, #0
     a8e:	d137      	bne.n	b00 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a90:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     a92:	2104      	movs	r1, #4
     a94:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     a96:	420b      	tst	r3, r1
     a98:	d0fc      	beq.n	a94 <spi_select_slave+0x78>
     a9a:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     a9c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     a9e:	074c      	lsls	r4, r1, #29
     aa0:	d52e      	bpl.n	b00 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     aa2:	8b53      	ldrh	r3, [r2, #26]
     aa4:	0759      	lsls	r1, r3, #29
     aa6:	d503      	bpl.n	ab0 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     aa8:	8b51      	ldrh	r1, [r2, #26]
     aaa:	2304      	movs	r3, #4
     aac:	430b      	orrs	r3, r1
     aae:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ab0:	7983      	ldrb	r3, [r0, #6]
     ab2:	2b01      	cmp	r3, #1
     ab4:	d102      	bne.n	abc <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     ab6:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ab8:	2300      	movs	r3, #0
     aba:	e021      	b.n	b00 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     abc:	6a93      	ldr	r3, [r2, #40]	; 0x28
     abe:	2300      	movs	r3, #0
     ac0:	e01e      	b.n	b00 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     ac2:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ac4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ac6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ac8:	2900      	cmp	r1, #0
     aca:	d103      	bne.n	ad4 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     acc:	095a      	lsrs	r2, r3, #5
     ace:	01d2      	lsls	r2, r2, #7
     ad0:	4c0c      	ldr	r4, [pc, #48]	; (b04 <spi_select_slave+0xe8>)
     ad2:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ad4:	211f      	movs	r1, #31
     ad6:	400b      	ands	r3, r1
     ad8:	2101      	movs	r1, #1
     ada:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     adc:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     ade:	2300      	movs	r3, #0
     ae0:	e00e      	b.n	b00 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     ae2:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ae4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     ae6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     ae8:	2900      	cmp	r1, #0
     aea:	d103      	bne.n	af4 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     aec:	095a      	lsrs	r2, r3, #5
     aee:	01d2      	lsls	r2, r2, #7
     af0:	4904      	ldr	r1, [pc, #16]	; (b04 <spi_select_slave+0xe8>)
     af2:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     af4:	211f      	movs	r1, #31
     af6:	400b      	ands	r3, r1
     af8:	2101      	movs	r1, #1
     afa:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     afc:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     afe:	2300      	movs	r3, #0
}
     b00:	1c18      	adds	r0, r3, #0
     b02:	bd10      	pop	{r4, pc}
     b04:	41004400 	.word	0x41004400

00000b08 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b08:	b508      	push	{r3, lr}
	switch (clock_source) {
     b0a:	2808      	cmp	r0, #8
     b0c:	d834      	bhi.n	b78 <system_clock_source_get_hz+0x70>
     b0e:	0080      	lsls	r0, r0, #2
     b10:	4b1b      	ldr	r3, [pc, #108]	; (b80 <system_clock_source_get_hz+0x78>)
     b12:	581b      	ldr	r3, [r3, r0]
     b14:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     b16:	2080      	movs	r0, #128	; 0x80
     b18:	0200      	lsls	r0, r0, #8
     b1a:	e030      	b.n	b7e <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     b1c:	4b19      	ldr	r3, [pc, #100]	; (b84 <system_clock_source_get_hz+0x7c>)
     b1e:	6918      	ldr	r0, [r3, #16]
     b20:	e02d      	b.n	b7e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b22:	4b19      	ldr	r3, [pc, #100]	; (b88 <system_clock_source_get_hz+0x80>)
     b24:	6a18      	ldr	r0, [r3, #32]
     b26:	0580      	lsls	r0, r0, #22
     b28:	0f80      	lsrs	r0, r0, #30
     b2a:	4b18      	ldr	r3, [pc, #96]	; (b8c <system_clock_source_get_hz+0x84>)
     b2c:	40c3      	lsrs	r3, r0
     b2e:	1c18      	adds	r0, r3, #0
     b30:	e025      	b.n	b7e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     b32:	4b14      	ldr	r3, [pc, #80]	; (b84 <system_clock_source_get_hz+0x7c>)
     b34:	6958      	ldr	r0, [r3, #20]
     b36:	e022      	b.n	b7e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b38:	4b12      	ldr	r3, [pc, #72]	; (b84 <system_clock_source_get_hz+0x7c>)
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	2002      	movs	r0, #2
     b3e:	4018      	ands	r0, r3
     b40:	d01d      	beq.n	b7e <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b42:	4911      	ldr	r1, [pc, #68]	; (b88 <system_clock_source_get_hz+0x80>)
     b44:	2210      	movs	r2, #16
     b46:	68cb      	ldr	r3, [r1, #12]
     b48:	421a      	tst	r2, r3
     b4a:	d0fc      	beq.n	b46 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     b4c:	4b0d      	ldr	r3, [pc, #52]	; (b84 <system_clock_source_get_hz+0x7c>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	075a      	lsls	r2, r3, #29
     b52:	d513      	bpl.n	b7c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b54:	2000      	movs	r0, #0
     b56:	4b0e      	ldr	r3, [pc, #56]	; (b90 <system_clock_source_get_hz+0x88>)
     b58:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     b5a:	4b0a      	ldr	r3, [pc, #40]	; (b84 <system_clock_source_get_hz+0x7c>)
     b5c:	689b      	ldr	r3, [r3, #8]
     b5e:	041b      	lsls	r3, r3, #16
     b60:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     b62:	4358      	muls	r0, r3
     b64:	e00b      	b.n	b7e <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b66:	2350      	movs	r3, #80	; 0x50
     b68:	4a07      	ldr	r2, [pc, #28]	; (b88 <system_clock_source_get_hz+0x80>)
     b6a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     b6c:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     b6e:	075a      	lsls	r2, r3, #29
     b70:	d505      	bpl.n	b7e <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <system_clock_source_get_hz+0x7c>)
     b74:	68d8      	ldr	r0, [r3, #12]
     b76:	e002      	b.n	b7e <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
     b78:	2000      	movs	r0, #0
     b7a:	e000      	b.n	b7e <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     b7c:	4805      	ldr	r0, [pc, #20]	; (b94 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     b7e:	bd08      	pop	{r3, pc}
     b80:	0000424c 	.word	0x0000424c
     b84:	200000b0 	.word	0x200000b0
     b88:	40000800 	.word	0x40000800
     b8c:	007a1200 	.word	0x007a1200
     b90:	0000122d 	.word	0x0000122d
     b94:	02dc6c00 	.word	0x02dc6c00

00000b98 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     b98:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     b9a:	4b0c      	ldr	r3, [pc, #48]	; (bcc <system_clock_source_osc8m_set_config+0x34>)
     b9c:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     b9e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ba0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     ba2:	7840      	ldrb	r0, [r0, #1]
     ba4:	2201      	movs	r2, #1
     ba6:	4010      	ands	r0, r2
     ba8:	0180      	lsls	r0, r0, #6
     baa:	2640      	movs	r6, #64	; 0x40
     bac:	43b4      	bics	r4, r6
     bae:	4304      	orrs	r4, r0
     bb0:	402a      	ands	r2, r5
     bb2:	01d0      	lsls	r0, r2, #7
     bb4:	2280      	movs	r2, #128	; 0x80
     bb6:	4394      	bics	r4, r2
     bb8:	1c22      	adds	r2, r4, #0
     bba:	4302      	orrs	r2, r0
     bbc:	2003      	movs	r0, #3
     bbe:	4001      	ands	r1, r0
     bc0:	0209      	lsls	r1, r1, #8
     bc2:	4803      	ldr	r0, [pc, #12]	; (bd0 <system_clock_source_osc8m_set_config+0x38>)
     bc4:	4002      	ands	r2, r0
     bc6:	430a      	orrs	r2, r1
     bc8:	621a      	str	r2, [r3, #32]
}
     bca:	bd70      	pop	{r4, r5, r6, pc}
     bcc:	40000800 	.word	0x40000800
     bd0:	fffffcff 	.word	0xfffffcff

00000bd4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd6:	464f      	mov	r7, r9
     bd8:	4646      	mov	r6, r8
     bda:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     bdc:	4a19      	ldr	r2, [pc, #100]	; (c44 <system_clock_source_osc32k_set_config+0x70>)
     bde:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     be0:	7841      	ldrb	r1, [r0, #1]
     be2:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     be4:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     be6:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     be8:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     bea:	7943      	ldrb	r3, [r0, #5]
     bec:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
     bee:	7880      	ldrb	r0, [r0, #2]
     bf0:	2301      	movs	r3, #1
     bf2:	4018      	ands	r0, r3
     bf4:	0080      	lsls	r0, r0, #2
     bf6:	2104      	movs	r1, #4
     bf8:	438c      	bics	r4, r1
     bfa:	4304      	orrs	r4, r0
     bfc:	4660      	mov	r0, ip
     bfe:	4018      	ands	r0, r3
     c00:	00c0      	lsls	r0, r0, #3
     c02:	2108      	movs	r1, #8
     c04:	438c      	bics	r4, r1
     c06:	4304      	orrs	r4, r0
     c08:	1c18      	adds	r0, r3, #0
     c0a:	4038      	ands	r0, r7
     c0c:	0180      	lsls	r0, r0, #6
     c0e:	2740      	movs	r7, #64	; 0x40
     c10:	43bc      	bics	r4, r7
     c12:	4304      	orrs	r4, r0
     c14:	1c18      	adds	r0, r3, #0
     c16:	4030      	ands	r0, r6
     c18:	01c0      	lsls	r0, r0, #7
     c1a:	2680      	movs	r6, #128	; 0x80
     c1c:	43b4      	bics	r4, r6
     c1e:	4304      	orrs	r4, r0
     c20:	2007      	movs	r0, #7
     c22:	4028      	ands	r0, r5
     c24:	0200      	lsls	r0, r0, #8
     c26:	4d08      	ldr	r5, [pc, #32]	; (c48 <system_clock_source_osc32k_set_config+0x74>)
     c28:	402c      	ands	r4, r5
     c2a:	4304      	orrs	r4, r0
     c2c:	4649      	mov	r1, r9
     c2e:	400b      	ands	r3, r1
     c30:	0319      	lsls	r1, r3, #12
     c32:	4806      	ldr	r0, [pc, #24]	; (c4c <system_clock_source_osc32k_set_config+0x78>)
     c34:	1c23      	adds	r3, r4, #0
     c36:	4003      	ands	r3, r0
     c38:	430b      	orrs	r3, r1
     c3a:	6193      	str	r3, [r2, #24]
}
     c3c:	bc0c      	pop	{r2, r3}
     c3e:	4690      	mov	r8, r2
     c40:	4699      	mov	r9, r3
     c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c44:	40000800 	.word	0x40000800
     c48:	fffff8ff 	.word	0xfffff8ff
     c4c:	ffffefff 	.word	0xffffefff

00000c50 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     c50:	b5f0      	push	{r4, r5, r6, r7, lr}
     c52:	465f      	mov	r7, fp
     c54:	4656      	mov	r6, sl
     c56:	464d      	mov	r5, r9
     c58:	4644      	mov	r4, r8
     c5a:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     c5c:	4a25      	ldr	r2, [pc, #148]	; (cf4 <system_clock_source_xosc32k_set_config+0xa4>)
     c5e:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
     c60:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     c62:	7803      	ldrb	r3, [r0, #0]
     c64:	4259      	negs	r1, r3
     c66:	4159      	adcs	r1, r3
     c68:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     c6a:	7883      	ldrb	r3, [r0, #2]
     c6c:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
     c6e:	78c1      	ldrb	r1, [r0, #3]
     c70:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
     c72:	7903      	ldrb	r3, [r0, #4]
     c74:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
     c76:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     c78:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
     c7a:	7b81      	ldrb	r1, [r0, #14]
     c7c:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     c7e:	6880      	ldr	r0, [r0, #8]
     c80:	4b1d      	ldr	r3, [pc, #116]	; (cf8 <system_clock_source_xosc32k_set_config+0xa8>)
     c82:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
     c84:	2301      	movs	r3, #1
     c86:	4651      	mov	r1, sl
     c88:	0088      	lsls	r0, r1, #2
     c8a:	2104      	movs	r1, #4
     c8c:	438c      	bics	r4, r1
     c8e:	4304      	orrs	r4, r0
     c90:	4648      	mov	r0, r9
     c92:	4018      	ands	r0, r3
     c94:	00c0      	lsls	r0, r0, #3
     c96:	2108      	movs	r1, #8
     c98:	438c      	bics	r4, r1
     c9a:	4304      	orrs	r4, r0
     c9c:	4640      	mov	r0, r8
     c9e:	4018      	ands	r0, r3
     ca0:	0100      	lsls	r0, r0, #4
     ca2:	2110      	movs	r1, #16
     ca4:	438c      	bics	r4, r1
     ca6:	4304      	orrs	r4, r0
     ca8:	4660      	mov	r0, ip
     caa:	4018      	ands	r0, r3
     cac:	0140      	lsls	r0, r0, #5
     cae:	2120      	movs	r1, #32
     cb0:	438c      	bics	r4, r1
     cb2:	4304      	orrs	r4, r0
     cb4:	1c18      	adds	r0, r3, #0
     cb6:	4038      	ands	r0, r7
     cb8:	0180      	lsls	r0, r0, #6
     cba:	2740      	movs	r7, #64	; 0x40
     cbc:	43bc      	bics	r4, r7
     cbe:	4304      	orrs	r4, r0
     cc0:	1c18      	adds	r0, r3, #0
     cc2:	4030      	ands	r0, r6
     cc4:	01c0      	lsls	r0, r0, #7
     cc6:	2680      	movs	r6, #128	; 0x80
     cc8:	43b4      	bics	r4, r6
     cca:	4304      	orrs	r4, r0
     ccc:	2007      	movs	r0, #7
     cce:	4028      	ands	r0, r5
     cd0:	0200      	lsls	r0, r0, #8
     cd2:	4d0a      	ldr	r5, [pc, #40]	; (cfc <system_clock_source_xosc32k_set_config+0xac>)
     cd4:	402c      	ands	r4, r5
     cd6:	4304      	orrs	r4, r0
     cd8:	4659      	mov	r1, fp
     cda:	400b      	ands	r3, r1
     cdc:	0319      	lsls	r1, r3, #12
     cde:	4808      	ldr	r0, [pc, #32]	; (d00 <system_clock_source_xosc32k_set_config+0xb0>)
     ce0:	1c23      	adds	r3, r4, #0
     ce2:	4003      	ands	r3, r0
     ce4:	430b      	orrs	r3, r1
     ce6:	8293      	strh	r3, [r2, #20]
}
     ce8:	bc3c      	pop	{r2, r3, r4, r5}
     cea:	4690      	mov	r8, r2
     cec:	4699      	mov	r9, r3
     cee:	46a2      	mov	sl, r4
     cf0:	46ab      	mov	fp, r5
     cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cf4:	40000800 	.word	0x40000800
     cf8:	200000b0 	.word	0x200000b0
     cfc:	fffff8ff 	.word	0xfffff8ff
     d00:	ffffefff 	.word	0xffffefff

00000d04 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     d04:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     d06:	7a02      	ldrb	r2, [r0, #8]
     d08:	0692      	lsls	r2, r2, #26
     d0a:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     d0c:	8943      	ldrh	r3, [r0, #10]
     d0e:	059b      	lsls	r3, r3, #22
     d10:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     d12:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
     d14:	4b15      	ldr	r3, [pc, #84]	; (d6c <system_clock_source_dfll_set_config+0x68>)
     d16:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
     d18:	8881      	ldrh	r1, [r0, #4]
     d1a:	8842      	ldrh	r2, [r0, #2]
     d1c:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     d1e:	79c4      	ldrb	r4, [r0, #7]
     d20:	7982      	ldrb	r2, [r0, #6]
     d22:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     d24:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     d26:	7841      	ldrb	r1, [r0, #1]
     d28:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
     d2a:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
     d2c:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     d2e:	7803      	ldrb	r3, [r0, #0]
     d30:	2b04      	cmp	r3, #4
     d32:	d10f      	bne.n	d54 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     d34:	7b02      	ldrb	r2, [r0, #12]
     d36:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     d38:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     d3a:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     d3c:	89c3      	ldrh	r3, [r0, #14]
     d3e:	041b      	lsls	r3, r3, #16
     d40:	490b      	ldr	r1, [pc, #44]	; (d70 <system_clock_source_dfll_set_config+0x6c>)
     d42:	400b      	ands	r3, r1
     d44:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
     d46:	4b09      	ldr	r3, [pc, #36]	; (d6c <system_clock_source_dfll_set_config+0x68>)
     d48:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
     d4a:	6819      	ldr	r1, [r3, #0]
     d4c:	2204      	movs	r2, #4
     d4e:	430a      	orrs	r2, r1
     d50:	601a      	str	r2, [r3, #0]
     d52:	e009      	b.n	d68 <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     d54:	2b20      	cmp	r3, #32
     d56:	d107      	bne.n	d68 <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     d58:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
     d5a:	4b04      	ldr	r3, [pc, #16]	; (d6c <system_clock_source_dfll_set_config+0x68>)
     d5c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     d5e:	6819      	ldr	r1, [r3, #0]
     d60:	2284      	movs	r2, #132	; 0x84
     d62:	00d2      	lsls	r2, r2, #3
     d64:	430a      	orrs	r2, r1
     d66:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     d68:	bd10      	pop	{r4, pc}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	200000b0 	.word	0x200000b0
     d70:	03ff0000 	.word	0x03ff0000

00000d74 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     d74:	2808      	cmp	r0, #8
     d76:	d843      	bhi.n	e00 <system_clock_source_enable+0x8c>
     d78:	0080      	lsls	r0, r0, #2
     d7a:	4b22      	ldr	r3, [pc, #136]	; (e04 <system_clock_source_enable+0x90>)
     d7c:	581b      	ldr	r3, [r3, r0]
     d7e:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     d80:	2000      	movs	r0, #0
     d82:	e03e      	b.n	e02 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d84:	4b20      	ldr	r3, [pc, #128]	; (e08 <system_clock_source_enable+0x94>)
     d86:	6a19      	ldr	r1, [r3, #32]
     d88:	2202      	movs	r2, #2
     d8a:	430a      	orrs	r2, r1
     d8c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     d8e:	2000      	movs	r0, #0
     d90:	e037      	b.n	e02 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d92:	4b1d      	ldr	r3, [pc, #116]	; (e08 <system_clock_source_enable+0x94>)
     d94:	6999      	ldr	r1, [r3, #24]
     d96:	2202      	movs	r2, #2
     d98:	430a      	orrs	r2, r1
     d9a:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d9c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     d9e:	e030      	b.n	e02 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     da0:	4b19      	ldr	r3, [pc, #100]	; (e08 <system_clock_source_enable+0x94>)
     da2:	8a19      	ldrh	r1, [r3, #16]
     da4:	2202      	movs	r2, #2
     da6:	430a      	orrs	r2, r1
     da8:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     daa:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     dac:	e029      	b.n	e02 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     dae:	4b16      	ldr	r3, [pc, #88]	; (e08 <system_clock_source_enable+0x94>)
     db0:	8a99      	ldrh	r1, [r3, #20]
     db2:	2202      	movs	r2, #2
     db4:	430a      	orrs	r2, r1
     db6:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     db8:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     dba:	e022      	b.n	e02 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     dbc:	4b13      	ldr	r3, [pc, #76]	; (e0c <system_clock_source_enable+0x98>)
     dbe:	6819      	ldr	r1, [r3, #0]
     dc0:	2202      	movs	r2, #2
     dc2:	430a      	orrs	r2, r1
     dc4:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     dc6:	681a      	ldr	r2, [r3, #0]
     dc8:	4b11      	ldr	r3, [pc, #68]	; (e10 <system_clock_source_enable+0x9c>)
     dca:	401a      	ands	r2, r3
     dcc:	4b0e      	ldr	r3, [pc, #56]	; (e08 <system_clock_source_enable+0x94>)
     dce:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dd0:	1c19      	adds	r1, r3, #0
     dd2:	2210      	movs	r2, #16
     dd4:	68cb      	ldr	r3, [r1, #12]
     dd6:	421a      	tst	r2, r3
     dd8:	d0fc      	beq.n	dd4 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     dda:	4a0c      	ldr	r2, [pc, #48]	; (e0c <system_clock_source_enable+0x98>)
     ddc:	6891      	ldr	r1, [r2, #8]
     dde:	4b0a      	ldr	r3, [pc, #40]	; (e08 <system_clock_source_enable+0x94>)
     de0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     de2:	6851      	ldr	r1, [r2, #4]
     de4:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     de6:	6812      	ldr	r2, [r2, #0]
     de8:	b292      	uxth	r2, r2
     dea:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     dec:	2000      	movs	r0, #0
     dee:	e008      	b.n	e02 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     df0:	4a05      	ldr	r2, [pc, #20]	; (e08 <system_clock_source_enable+0x94>)
     df2:	2344      	movs	r3, #68	; 0x44
     df4:	5cd0      	ldrb	r0, [r2, r3]
     df6:	2102      	movs	r1, #2
     df8:	4301      	orrs	r1, r0
     dfa:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     dfc:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     dfe:	e000      	b.n	e02 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e00:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     e02:	4770      	bx	lr
     e04:	00004270 	.word	0x00004270
     e08:	40000800 	.word	0x40000800
     e0c:	200000b0 	.word	0x200000b0
     e10:	0000ff7f 	.word	0x0000ff7f

00000e14 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e14:	b5f0      	push	{r4, r5, r6, r7, lr}
     e16:	4657      	mov	r7, sl
     e18:	464e      	mov	r6, r9
     e1a:	4645      	mov	r5, r8
     e1c:	b4e0      	push	{r5, r6, r7}
     e1e:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e20:	22c2      	movs	r2, #194	; 0xc2
     e22:	00d2      	lsls	r2, r2, #3
     e24:	4b5e      	ldr	r3, [pc, #376]	; (fa0 <system_clock_init+0x18c>)
     e26:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e28:	4b5e      	ldr	r3, [pc, #376]	; (fa4 <system_clock_init+0x190>)
     e2a:	685a      	ldr	r2, [r3, #4]
     e2c:	211e      	movs	r1, #30
     e2e:	438a      	bics	r2, r1
     e30:	2104      	movs	r1, #4
     e32:	430a      	orrs	r2, r1
     e34:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
     e36:	2203      	movs	r2, #3
     e38:	ab01      	add	r3, sp, #4
     e3a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e3c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e3e:	4d5a      	ldr	r5, [pc, #360]	; (fa8 <system_clock_init+0x194>)
     e40:	b2e0      	uxtb	r0, r4
     e42:	a901      	add	r1, sp, #4
     e44:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e46:	3401      	adds	r4, #1
     e48:	2c25      	cmp	r4, #37	; 0x25
     e4a:	d1f9      	bne.n	e40 <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     e4c:	a80c      	add	r0, sp, #48	; 0x30
     e4e:	2300      	movs	r3, #0
     e50:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
     e52:	2280      	movs	r2, #128	; 0x80
     e54:	0212      	lsls	r2, r2, #8
     e56:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     e58:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     e5a:	2201      	movs	r2, #1
     e5c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
     e5e:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
     e60:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     e62:	2106      	movs	r1, #6
     e64:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
     e66:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     e68:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     e6a:	4b50      	ldr	r3, [pc, #320]	; (fac <system_clock_init+0x198>)
     e6c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     e6e:	2005      	movs	r0, #5
     e70:	4b4f      	ldr	r3, [pc, #316]	; (fb0 <system_clock_init+0x19c>)
     e72:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     e74:	494a      	ldr	r1, [pc, #296]	; (fa0 <system_clock_init+0x18c>)
     e76:	2202      	movs	r2, #2
     e78:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     e7a:	421a      	tst	r2, r3
     e7c:	d0fc      	beq.n	e78 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     e7e:	4b48      	ldr	r3, [pc, #288]	; (fa0 <system_clock_init+0x18c>)
     e80:	8a99      	ldrh	r1, [r3, #20]
     e82:	2280      	movs	r2, #128	; 0x80
     e84:	430a      	orrs	r2, r1
     e86:	829a      	strh	r2, [r3, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
     e88:	4a4a      	ldr	r2, [pc, #296]	; (fb4 <system_clock_init+0x1a0>)
     e8a:	6811      	ldr	r1, [r2, #0]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
     e8c:	04c9      	lsls	r1, r1, #19
     e8e:	0e49      	lsrs	r1, r1, #25
     e90:	0409      	lsls	r1, r1, #16
     e92:	6998      	ldr	r0, [r3, #24]
     e94:	4a48      	ldr	r2, [pc, #288]	; (fb8 <system_clock_init+0x1a4>)
     e96:	4002      	ands	r2, r0
     e98:	430a      	orrs	r2, r1
     e9a:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
     e9c:	a80a      	add	r0, sp, #40	; 0x28
     e9e:	2601      	movs	r6, #1
     ea0:	7046      	strb	r6, [r0, #1]
	config->enable_32khz_output = true;
     ea2:	7086      	strb	r6, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
     ea4:	7106      	strb	r6, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     ea6:	2407      	movs	r4, #7
     ea8:	7004      	strb	r4, [r0, #0]
	config->write_once          = false;
     eaa:	2200      	movs	r2, #0
     eac:	4690      	mov	r8, r2
     eae:	7142      	strb	r2, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
     eb0:	70c6      	strb	r6, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
     eb2:	4b42      	ldr	r3, [pc, #264]	; (fbc <system_clock_init+0x1a8>)
     eb4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     eb6:	2004      	movs	r0, #4
     eb8:	4f3d      	ldr	r7, [pc, #244]	; (fb0 <system_clock_init+0x19c>)
     eba:	47b8      	blx	r7
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     ebc:	a805      	add	r0, sp, #20
     ebe:	2500      	movs	r5, #0
     ec0:	4642      	mov	r2, r8
     ec2:	8042      	strh	r2, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     ec4:	8082      	strh	r2, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     ec6:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     ec8:	71c5      	strb	r5, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
     eca:	7204      	strb	r4, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
     ecc:	233f      	movs	r3, #63	; 0x3f
     ece:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     ed0:	2204      	movs	r2, #4
     ed2:	4691      	mov	r9, r2
     ed4:	7002      	strb	r2, [r0, #0]
	dfll_conf.on_demand      = false;
     ed6:	7045      	strb	r5, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     ed8:	22b7      	movs	r2, #183	; 0xb7
     eda:	00d2      	lsls	r2, r2, #3
     edc:	8202      	strh	r2, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     ede:	7304      	strb	r4, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     ee0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     ee2:	4b37      	ldr	r3, [pc, #220]	; (fc0 <system_clock_init+0x1ac>)
     ee4:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     ee6:	a804      	add	r0, sp, #16
     ee8:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     eea:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
     eec:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     eee:	4b35      	ldr	r3, [pc, #212]	; (fc4 <system_clock_init+0x1b0>)
     ef0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     ef2:	2006      	movs	r0, #6
     ef4:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     ef6:	4b34      	ldr	r3, [pc, #208]	; (fc8 <system_clock_init+0x1b4>)
     ef8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     efa:	ac01      	add	r4, sp, #4
     efc:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
     efe:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     f00:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     f02:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     f04:	2305      	movs	r3, #5
     f06:	7023      	strb	r3, [r4, #0]
     f08:	2001      	movs	r0, #1
     f0a:	1c21      	adds	r1, r4, #0
     f0c:	4b2f      	ldr	r3, [pc, #188]	; (fcc <system_clock_init+0x1b8>)
     f0e:	469a      	mov	sl, r3
     f10:	4798      	blx	r3
     f12:	2001      	movs	r0, #1
     f14:	4a2e      	ldr	r2, [pc, #184]	; (fd0 <system_clock_init+0x1bc>)
     f16:	4690      	mov	r8, r2
     f18:	4790      	blx	r2
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     f1a:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
     f1c:	7265      	strb	r5, [r4, #9]
     f1e:	464b      	mov	r3, r9
     f20:	7023      	strb	r3, [r4, #0]
     f22:	2220      	movs	r2, #32
     f24:	4691      	mov	r9, r2
     f26:	6062      	str	r2, [r4, #4]
     f28:	7226      	strb	r6, [r4, #8]
     f2a:	2002      	movs	r0, #2
     f2c:	1c21      	adds	r1, r4, #0
     f2e:	47d0      	blx	sl
     f30:	2002      	movs	r0, #2
     f32:	47c0      	blx	r8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     f34:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     f36:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     f38:	7265      	strb	r5, [r4, #9]
     f3a:	2303      	movs	r3, #3
     f3c:	7023      	strb	r3, [r4, #0]
     f3e:	464a      	mov	r2, r9
     f40:	6062      	str	r2, [r4, #4]
     f42:	2004      	movs	r0, #4
     f44:	1c21      	adds	r1, r4, #0
     f46:	47d0      	blx	sl
     f48:	2004      	movs	r0, #4
     f4a:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     f4c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     f4e:	2000      	movs	r0, #0
     f50:	1c21      	adds	r1, r4, #0
     f52:	4b15      	ldr	r3, [pc, #84]	; (fa8 <system_clock_init+0x194>)
     f54:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     f56:	2000      	movs	r0, #0
     f58:	4b1e      	ldr	r3, [pc, #120]	; (fd4 <system_clock_init+0x1c0>)
     f5a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     f5c:	2007      	movs	r0, #7
     f5e:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     f60:	490f      	ldr	r1, [pc, #60]	; (fa0 <system_clock_init+0x18c>)
     f62:	22d0      	movs	r2, #208	; 0xd0
     f64:	68cb      	ldr	r3, [r1, #12]
     f66:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     f68:	2bd0      	cmp	r3, #208	; 0xd0
     f6a:	d1fb      	bne.n	f64 <system_clock_init+0x150>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     f6c:	4a1a      	ldr	r2, [pc, #104]	; (fd8 <system_clock_init+0x1c4>)
     f6e:	2300      	movs	r3, #0
     f70:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     f72:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     f74:	7293      	strb	r3, [r2, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     f76:	a901      	add	r1, sp, #4
     f78:	2201      	movs	r2, #1
     f7a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     f7c:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     f7e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     f80:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f82:	2307      	movs	r3, #7
     f84:	700b      	strb	r3, [r1, #0]
     f86:	2000      	movs	r0, #0
     f88:	4b10      	ldr	r3, [pc, #64]	; (fcc <system_clock_init+0x1b8>)
     f8a:	4798      	blx	r3
     f8c:	2000      	movs	r0, #0
     f8e:	4b10      	ldr	r3, [pc, #64]	; (fd0 <system_clock_init+0x1bc>)
     f90:	4798      	blx	r3
#endif
}
     f92:	b010      	add	sp, #64	; 0x40
     f94:	bc1c      	pop	{r2, r3, r4}
     f96:	4690      	mov	r8, r2
     f98:	4699      	mov	r9, r3
     f9a:	46a2      	mov	sl, r4
     f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	40000800 	.word	0x40000800
     fa4:	41004000 	.word	0x41004000
     fa8:	00001211 	.word	0x00001211
     fac:	00000c51 	.word	0x00000c51
     fb0:	00000d75 	.word	0x00000d75
     fb4:	00806024 	.word	0x00806024
     fb8:	ff80ffff 	.word	0xff80ffff
     fbc:	00000bd5 	.word	0x00000bd5
     fc0:	00000d05 	.word	0x00000d05
     fc4:	00000b99 	.word	0x00000b99
     fc8:	00000fdd 	.word	0x00000fdd
     fcc:	00001001 	.word	0x00001001
     fd0:	000010b5 	.word	0x000010b5
     fd4:	00001185 	.word	0x00001185
     fd8:	40000400 	.word	0x40000400

00000fdc <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     fdc:	4b06      	ldr	r3, [pc, #24]	; (ff8 <system_gclk_init+0x1c>)
     fde:	6999      	ldr	r1, [r3, #24]
     fe0:	2208      	movs	r2, #8
     fe2:	430a      	orrs	r2, r1
     fe4:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     fe6:	2201      	movs	r2, #1
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <system_gclk_init+0x20>)
     fea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     fec:	1c19      	adds	r1, r3, #0
     fee:	780b      	ldrb	r3, [r1, #0]
     ff0:	4213      	tst	r3, r2
     ff2:	d1fc      	bne.n	fee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     ff4:	4770      	bx	lr
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	40000400 	.word	0x40000400
     ffc:	40000c00 	.word	0x40000c00

00001000 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1002:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1004:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1006:	780d      	ldrb	r5, [r1, #0]
    1008:	022d      	lsls	r5, r5, #8
    100a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    100c:	784b      	ldrb	r3, [r1, #1]
    100e:	2b00      	cmp	r3, #0
    1010:	d002      	beq.n	1018 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1012:	2380      	movs	r3, #128	; 0x80
    1014:	02db      	lsls	r3, r3, #11
    1016:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1018:	7a4b      	ldrb	r3, [r1, #9]
    101a:	2b00      	cmp	r3, #0
    101c:	d002      	beq.n	1024 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    101e:	2380      	movs	r3, #128	; 0x80
    1020:	031b      	lsls	r3, r3, #12
    1022:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1024:	684c      	ldr	r4, [r1, #4]
    1026:	2c01      	cmp	r4, #1
    1028:	d917      	bls.n	105a <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    102a:	1e63      	subs	r3, r4, #1
    102c:	421c      	tst	r4, r3
    102e:	d10f      	bne.n	1050 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1030:	2c02      	cmp	r4, #2
    1032:	d906      	bls.n	1042 <system_gclk_gen_set_config+0x42>
    1034:	2302      	movs	r3, #2
    1036:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1038:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    103a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    103c:	429c      	cmp	r4, r3
    103e:	d8fb      	bhi.n	1038 <system_gclk_gen_set_config+0x38>
    1040:	e000      	b.n	1044 <system_gclk_gen_set_config+0x44>
    1042:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1044:	0217      	lsls	r7, r2, #8
    1046:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1048:	2380      	movs	r3, #128	; 0x80
    104a:	035b      	lsls	r3, r3, #13
    104c:	431d      	orrs	r5, r3
    104e:	e004      	b.n	105a <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1050:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1052:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1054:	2380      	movs	r3, #128	; 0x80
    1056:	029b      	lsls	r3, r3, #10
    1058:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    105a:	7a0b      	ldrb	r3, [r1, #8]
    105c:	2b00      	cmp	r3, #0
    105e:	d002      	beq.n	1066 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1060:	2380      	movs	r3, #128	; 0x80
    1062:	039b      	lsls	r3, r3, #14
    1064:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1066:	4a0f      	ldr	r2, [pc, #60]	; (10a4 <system_gclk_gen_set_config+0xa4>)
    1068:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    106a:	b25b      	sxtb	r3, r3
    106c:	2b00      	cmp	r3, #0
    106e:	dbfb      	blt.n	1068 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1070:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <system_gclk_gen_set_config+0xa8>)
    1072:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1074:	4b0d      	ldr	r3, [pc, #52]	; (10ac <system_gclk_gen_set_config+0xac>)
    1076:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1078:	4a0a      	ldr	r2, [pc, #40]	; (10a4 <system_gclk_gen_set_config+0xa4>)
    107a:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    107c:	b25b      	sxtb	r3, r3
    107e:	2b00      	cmp	r3, #0
    1080:	dbfb      	blt.n	107a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1082:	4b08      	ldr	r3, [pc, #32]	; (10a4 <system_gclk_gen_set_config+0xa4>)
    1084:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1086:	1c1a      	adds	r2, r3, #0
    1088:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    108a:	b25b      	sxtb	r3, r3
    108c:	2b00      	cmp	r3, #0
    108e:	dbfb      	blt.n	1088 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1090:	4b04      	ldr	r3, [pc, #16]	; (10a4 <system_gclk_gen_set_config+0xa4>)
    1092:	6859      	ldr	r1, [r3, #4]
    1094:	2280      	movs	r2, #128	; 0x80
    1096:	0252      	lsls	r2, r2, #9
    1098:	400a      	ands	r2, r1
    109a:	4315      	orrs	r5, r2
    109c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    109e:	4b04      	ldr	r3, [pc, #16]	; (10b0 <system_gclk_gen_set_config+0xb0>)
    10a0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10a4:	40000c00 	.word	0x40000c00
    10a8:	0000017d 	.word	0x0000017d
    10ac:	40000c08 	.word	0x40000c08
    10b0:	000001bd 	.word	0x000001bd

000010b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    10b4:	b510      	push	{r4, lr}
    10b6:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10b8:	4a0b      	ldr	r2, [pc, #44]	; (10e8 <system_gclk_gen_enable+0x34>)
    10ba:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    10bc:	b25b      	sxtb	r3, r3
    10be:	2b00      	cmp	r3, #0
    10c0:	dbfb      	blt.n	10ba <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <system_gclk_gen_enable+0x38>)
    10c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10c6:	4b0a      	ldr	r3, [pc, #40]	; (10f0 <system_gclk_gen_enable+0x3c>)
    10c8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10ca:	4a07      	ldr	r2, [pc, #28]	; (10e8 <system_gclk_gen_enable+0x34>)
    10cc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    10ce:	b25b      	sxtb	r3, r3
    10d0:	2b00      	cmp	r3, #0
    10d2:	dbfb      	blt.n	10cc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    10d4:	4b04      	ldr	r3, [pc, #16]	; (10e8 <system_gclk_gen_enable+0x34>)
    10d6:	6859      	ldr	r1, [r3, #4]
    10d8:	2280      	movs	r2, #128	; 0x80
    10da:	0252      	lsls	r2, r2, #9
    10dc:	430a      	orrs	r2, r1
    10de:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    10e0:	4b04      	ldr	r3, [pc, #16]	; (10f4 <system_gclk_gen_enable+0x40>)
    10e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10e4:	bd10      	pop	{r4, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	40000c00 	.word	0x40000c00
    10ec:	0000017d 	.word	0x0000017d
    10f0:	40000c04 	.word	0x40000c04
    10f4:	000001bd 	.word	0x000001bd

000010f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    10f8:	b570      	push	{r4, r5, r6, lr}
    10fa:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10fc:	4a1a      	ldr	r2, [pc, #104]	; (1168 <system_gclk_gen_get_hz+0x70>)
    10fe:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1100:	b25b      	sxtb	r3, r3
    1102:	2b00      	cmp	r3, #0
    1104:	dbfb      	blt.n	10fe <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1106:	4b19      	ldr	r3, [pc, #100]	; (116c <system_gclk_gen_get_hz+0x74>)
    1108:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    110a:	4b19      	ldr	r3, [pc, #100]	; (1170 <system_gclk_gen_get_hz+0x78>)
    110c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    110e:	4a16      	ldr	r2, [pc, #88]	; (1168 <system_gclk_gen_get_hz+0x70>)
    1110:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1112:	b25b      	sxtb	r3, r3
    1114:	2b00      	cmp	r3, #0
    1116:	dbfb      	blt.n	1110 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1118:	4e13      	ldr	r6, [pc, #76]	; (1168 <system_gclk_gen_get_hz+0x70>)
    111a:	6870      	ldr	r0, [r6, #4]
    111c:	04c0      	lsls	r0, r0, #19
    111e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1120:	4b14      	ldr	r3, [pc, #80]	; (1174 <system_gclk_gen_get_hz+0x7c>)
    1122:	4798      	blx	r3
    1124:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1126:	4b12      	ldr	r3, [pc, #72]	; (1170 <system_gclk_gen_get_hz+0x78>)
    1128:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    112a:	6876      	ldr	r6, [r6, #4]
    112c:	02f6      	lsls	r6, r6, #11
    112e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1130:	4b11      	ldr	r3, [pc, #68]	; (1178 <system_gclk_gen_get_hz+0x80>)
    1132:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1134:	4a0c      	ldr	r2, [pc, #48]	; (1168 <system_gclk_gen_get_hz+0x70>)
    1136:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1138:	b25b      	sxtb	r3, r3
    113a:	2b00      	cmp	r3, #0
    113c:	dbfb      	blt.n	1136 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    113e:	4b0a      	ldr	r3, [pc, #40]	; (1168 <system_gclk_gen_get_hz+0x70>)
    1140:	689c      	ldr	r4, [r3, #8]
    1142:	0a24      	lsrs	r4, r4, #8
    1144:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1146:	4b0d      	ldr	r3, [pc, #52]	; (117c <system_gclk_gen_get_hz+0x84>)
    1148:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    114a:	2e00      	cmp	r6, #0
    114c:	d107      	bne.n	115e <system_gclk_gen_get_hz+0x66>
    114e:	2c01      	cmp	r4, #1
    1150:	d907      	bls.n	1162 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1152:	1c28      	adds	r0, r5, #0
    1154:	1c21      	adds	r1, r4, #0
    1156:	4b0a      	ldr	r3, [pc, #40]	; (1180 <system_gclk_gen_get_hz+0x88>)
    1158:	4798      	blx	r3
    115a:	1c05      	adds	r5, r0, #0
    115c:	e001      	b.n	1162 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    115e:	3401      	adds	r4, #1
    1160:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1162:	1c28      	adds	r0, r5, #0
    1164:	bd70      	pop	{r4, r5, r6, pc}
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	40000c00 	.word	0x40000c00
    116c:	0000017d 	.word	0x0000017d
    1170:	40000c04 	.word	0x40000c04
    1174:	00000b09 	.word	0x00000b09
    1178:	40000c08 	.word	0x40000c08
    117c:	000001bd 	.word	0x000001bd
    1180:	00003f71 	.word	0x00003f71

00001184 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1184:	b510      	push	{r4, lr}
    1186:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1188:	4b06      	ldr	r3, [pc, #24]	; (11a4 <system_gclk_chan_enable+0x20>)
    118a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    118c:	4b06      	ldr	r3, [pc, #24]	; (11a8 <system_gclk_chan_enable+0x24>)
    118e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <system_gclk_chan_enable+0x28>)
    1192:	8859      	ldrh	r1, [r3, #2]
    1194:	2280      	movs	r2, #128	; 0x80
    1196:	01d2      	lsls	r2, r2, #7
    1198:	430a      	orrs	r2, r1
    119a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    119c:	4b04      	ldr	r3, [pc, #16]	; (11b0 <system_gclk_chan_enable+0x2c>)
    119e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11a0:	bd10      	pop	{r4, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	0000017d 	.word	0x0000017d
    11a8:	40000c02 	.word	0x40000c02
    11ac:	40000c00 	.word	0x40000c00
    11b0:	000001bd 	.word	0x000001bd

000011b4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    11b4:	b510      	push	{r4, lr}
    11b6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    11b8:	4b0f      	ldr	r3, [pc, #60]	; (11f8 <system_gclk_chan_disable+0x44>)
    11ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11bc:	4b0f      	ldr	r3, [pc, #60]	; (11fc <system_gclk_chan_disable+0x48>)
    11be:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    11c0:	4b0f      	ldr	r3, [pc, #60]	; (1200 <system_gclk_chan_disable+0x4c>)
    11c2:	8858      	ldrh	r0, [r3, #2]
    11c4:	0500      	lsls	r0, r0, #20
    11c6:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    11c8:	8859      	ldrh	r1, [r3, #2]
    11ca:	4a0e      	ldr	r2, [pc, #56]	; (1204 <system_gclk_chan_disable+0x50>)
    11cc:	400a      	ands	r2, r1
    11ce:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    11d0:	8859      	ldrh	r1, [r3, #2]
    11d2:	4a0d      	ldr	r2, [pc, #52]	; (1208 <system_gclk_chan_disable+0x54>)
    11d4:	400a      	ands	r2, r1
    11d6:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    11d8:	1c19      	adds	r1, r3, #0
    11da:	2280      	movs	r2, #128	; 0x80
    11dc:	01d2      	lsls	r2, r2, #7
    11de:	884b      	ldrh	r3, [r1, #2]
    11e0:	4213      	tst	r3, r2
    11e2:	d1fc      	bne.n	11de <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    11e4:	4b06      	ldr	r3, [pc, #24]	; (1200 <system_gclk_chan_disable+0x4c>)
    11e6:	0201      	lsls	r1, r0, #8
    11e8:	8858      	ldrh	r0, [r3, #2]
    11ea:	4a06      	ldr	r2, [pc, #24]	; (1204 <system_gclk_chan_disable+0x50>)
    11ec:	4002      	ands	r2, r0
    11ee:	430a      	orrs	r2, r1
    11f0:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    11f2:	4b06      	ldr	r3, [pc, #24]	; (120c <system_gclk_chan_disable+0x58>)
    11f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11f6:	bd10      	pop	{r4, pc}
    11f8:	0000017d 	.word	0x0000017d
    11fc:	40000c02 	.word	0x40000c02
    1200:	40000c00 	.word	0x40000c00
    1204:	fffff0ff 	.word	0xfffff0ff
    1208:	ffffbfff 	.word	0xffffbfff
    120c:	000001bd 	.word	0x000001bd

00001210 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1210:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1212:	780c      	ldrb	r4, [r1, #0]
    1214:	0224      	lsls	r4, r4, #8
    1216:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1218:	4b02      	ldr	r3, [pc, #8]	; (1224 <system_gclk_chan_set_config+0x14>)
    121a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    121c:	b2a4      	uxth	r4, r4
    121e:	4b02      	ldr	r3, [pc, #8]	; (1228 <system_gclk_chan_set_config+0x18>)
    1220:	805c      	strh	r4, [r3, #2]
}
    1222:	bd10      	pop	{r4, pc}
    1224:	000011b5 	.word	0x000011b5
    1228:	40000c00 	.word	0x40000c00

0000122c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    122c:	b510      	push	{r4, lr}
    122e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1230:	4b06      	ldr	r3, [pc, #24]	; (124c <system_gclk_chan_get_hz+0x20>)
    1232:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1234:	4b06      	ldr	r3, [pc, #24]	; (1250 <system_gclk_chan_get_hz+0x24>)
    1236:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1238:	4b06      	ldr	r3, [pc, #24]	; (1254 <system_gclk_chan_get_hz+0x28>)
    123a:	885c      	ldrh	r4, [r3, #2]
    123c:	0524      	lsls	r4, r4, #20
    123e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1240:	4b05      	ldr	r3, [pc, #20]	; (1258 <system_gclk_chan_get_hz+0x2c>)
    1242:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1244:	1c20      	adds	r0, r4, #0
    1246:	4b05      	ldr	r3, [pc, #20]	; (125c <system_gclk_chan_get_hz+0x30>)
    1248:	4798      	blx	r3
}
    124a:	bd10      	pop	{r4, pc}
    124c:	0000017d 	.word	0x0000017d
    1250:	40000c02 	.word	0x40000c02
    1254:	40000c00 	.word	0x40000c00
    1258:	000001bd 	.word	0x000001bd
    125c:	000010f9 	.word	0x000010f9

00001260 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1260:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1262:	78d3      	ldrb	r3, [r2, #3]
    1264:	2b00      	cmp	r3, #0
    1266:	d11e      	bne.n	12a6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1268:	7813      	ldrb	r3, [r2, #0]
    126a:	2b80      	cmp	r3, #128	; 0x80
    126c:	d004      	beq.n	1278 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    126e:	061b      	lsls	r3, r3, #24
    1270:	2480      	movs	r4, #128	; 0x80
    1272:	0264      	lsls	r4, r4, #9
    1274:	4323      	orrs	r3, r4
    1276:	e000      	b.n	127a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1278:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    127a:	7854      	ldrb	r4, [r2, #1]
    127c:	2502      	movs	r5, #2
    127e:	43ac      	bics	r4, r5
    1280:	d10a      	bne.n	1298 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1282:	7894      	ldrb	r4, [r2, #2]
    1284:	2c00      	cmp	r4, #0
    1286:	d103      	bne.n	1290 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1288:	2480      	movs	r4, #128	; 0x80
    128a:	02a4      	lsls	r4, r4, #10
    128c:	4323      	orrs	r3, r4
    128e:	e002      	b.n	1296 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1290:	24c0      	movs	r4, #192	; 0xc0
    1292:	02e4      	lsls	r4, r4, #11
    1294:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1296:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1298:	7854      	ldrb	r4, [r2, #1]
    129a:	3c01      	subs	r4, #1
    129c:	2c01      	cmp	r4, #1
    129e:	d804      	bhi.n	12aa <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    12a0:	4c11      	ldr	r4, [pc, #68]	; (12e8 <_system_pinmux_config+0x88>)
    12a2:	4023      	ands	r3, r4
    12a4:	e001      	b.n	12aa <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    12a6:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    12a8:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12aa:	040d      	lsls	r5, r1, #16
    12ac:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12ae:	24a0      	movs	r4, #160	; 0xa0
    12b0:	05e4      	lsls	r4, r4, #23
    12b2:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12b4:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12b6:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    12b8:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12ba:	24d0      	movs	r4, #208	; 0xd0
    12bc:	0624      	lsls	r4, r4, #24
    12be:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    12c0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12c2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    12c4:	78d4      	ldrb	r4, [r2, #3]
    12c6:	2c00      	cmp	r4, #0
    12c8:	d10c      	bne.n	12e4 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    12ca:	035c      	lsls	r4, r3, #13
    12cc:	d505      	bpl.n	12da <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    12ce:	7893      	ldrb	r3, [r2, #2]
    12d0:	2b01      	cmp	r3, #1
    12d2:	d101      	bne.n	12d8 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    12d4:	6181      	str	r1, [r0, #24]
    12d6:	e000      	b.n	12da <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    12d8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    12da:	7853      	ldrb	r3, [r2, #1]
    12dc:	3b01      	subs	r3, #1
    12de:	2b01      	cmp	r3, #1
    12e0:	d800      	bhi.n	12e4 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    12e2:	6081      	str	r1, [r0, #8]
		}
	}
}
    12e4:	bd30      	pop	{r4, r5, pc}
    12e6:	46c0      	nop			; (mov r8, r8)
    12e8:	fffbffff 	.word	0xfffbffff

000012ec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    12ec:	b508      	push	{r3, lr}
    12ee:	1c03      	adds	r3, r0, #0
    12f0:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12f2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12f4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12f6:	2900      	cmp	r1, #0
    12f8:	d103      	bne.n	1302 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    12fa:	0958      	lsrs	r0, r3, #5
    12fc:	01c0      	lsls	r0, r0, #7
    12fe:	4904      	ldr	r1, [pc, #16]	; (1310 <system_pinmux_pin_set_config+0x24>)
    1300:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1302:	211f      	movs	r1, #31
    1304:	400b      	ands	r3, r1
    1306:	2101      	movs	r1, #1
    1308:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    130a:	4b02      	ldr	r3, [pc, #8]	; (1314 <system_pinmux_pin_set_config+0x28>)
    130c:	4798      	blx	r3
}
    130e:	bd08      	pop	{r3, pc}
    1310:	41004400 	.word	0x41004400
    1314:	00001261 	.word	0x00001261

00001318 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1318:	4770      	bx	lr
    131a:	46c0      	nop			; (mov r8, r8)

0000131c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    131c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    131e:	4b04      	ldr	r3, [pc, #16]	; (1330 <system_init+0x14>)
    1320:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1322:	4b04      	ldr	r3, [pc, #16]	; (1334 <system_init+0x18>)
    1324:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1326:	4b04      	ldr	r3, [pc, #16]	; (1338 <system_init+0x1c>)
    1328:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    132a:	4b04      	ldr	r3, [pc, #16]	; (133c <system_init+0x20>)
    132c:	4798      	blx	r3
}
    132e:	bd08      	pop	{r3, pc}
    1330:	00000e15 	.word	0x00000e15
    1334:	000001ed 	.word	0x000001ed
    1338:	00001319 	.word	0x00001319
    133c:	000003b5 	.word	0x000003b5

00001340 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1340:	1c93      	adds	r3, r2, #2
    1342:	009b      	lsls	r3, r3, #2
    1344:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1346:	2a02      	cmp	r2, #2
    1348:	d104      	bne.n	1354 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    134a:	7e02      	ldrb	r2, [r0, #24]
    134c:	2310      	movs	r3, #16
    134e:	4313      	orrs	r3, r2
    1350:	7603      	strb	r3, [r0, #24]
    1352:	e00c      	b.n	136e <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1354:	2a03      	cmp	r2, #3
    1356:	d104      	bne.n	1362 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1358:	7e02      	ldrb	r2, [r0, #24]
    135a:	2320      	movs	r3, #32
    135c:	4313      	orrs	r3, r2
    135e:	7603      	strb	r3, [r0, #24]
    1360:	e005      	b.n	136e <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1362:	2301      	movs	r3, #1
    1364:	4093      	lsls	r3, r2
    1366:	1c1a      	adds	r2, r3, #0
    1368:	7e03      	ldrb	r3, [r0, #24]
    136a:	431a      	orrs	r2, r3
    136c:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    136e:	2000      	movs	r0, #0
    1370:	4770      	bx	lr
    1372:	46c0      	nop			; (mov r8, r8)

00001374 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1374:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1376:	0080      	lsls	r0, r0, #2
    1378:	4b14      	ldr	r3, [pc, #80]	; (13cc <_tc_interrupt_handler+0x58>)
    137a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    137c:	6822      	ldr	r2, [r4, #0]
    137e:	7b95      	ldrb	r5, [r2, #14]
    1380:	7e23      	ldrb	r3, [r4, #24]
    1382:	401d      	ands	r5, r3
    1384:	7e63      	ldrb	r3, [r4, #25]
    1386:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1388:	07eb      	lsls	r3, r5, #31
    138a:	d505      	bpl.n	1398 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    138c:	1c20      	adds	r0, r4, #0
    138e:	68a2      	ldr	r2, [r4, #8]
    1390:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1392:	2301      	movs	r3, #1
    1394:	6822      	ldr	r2, [r4, #0]
    1396:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1398:	07ab      	lsls	r3, r5, #30
    139a:	d505      	bpl.n	13a8 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    139c:	1c20      	adds	r0, r4, #0
    139e:	68e2      	ldr	r2, [r4, #12]
    13a0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    13a2:	2302      	movs	r3, #2
    13a4:	6822      	ldr	r2, [r4, #0]
    13a6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    13a8:	06eb      	lsls	r3, r5, #27
    13aa:	d505      	bpl.n	13b8 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    13ac:	1c20      	adds	r0, r4, #0
    13ae:	6922      	ldr	r2, [r4, #16]
    13b0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    13b2:	2310      	movs	r3, #16
    13b4:	6822      	ldr	r2, [r4, #0]
    13b6:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    13b8:	06ab      	lsls	r3, r5, #26
    13ba:	d505      	bpl.n	13c8 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    13bc:	1c20      	adds	r0, r4, #0
    13be:	6962      	ldr	r2, [r4, #20]
    13c0:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    13c2:	6823      	ldr	r3, [r4, #0]
    13c4:	2220      	movs	r2, #32
    13c6:	739a      	strb	r2, [r3, #14]
	}
}
    13c8:	bd38      	pop	{r3, r4, r5, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	20000880 	.word	0x20000880

000013d0 <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    13d0:	b508      	push	{r3, lr}
    13d2:	2000      	movs	r0, #0
    13d4:	4b01      	ldr	r3, [pc, #4]	; (13dc <TC3_Handler+0xc>)
    13d6:	4798      	blx	r3
    13d8:	bd08      	pop	{r3, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	00001375 	.word	0x00001375

000013e0 <TC4_Handler>:
    13e0:	b508      	push	{r3, lr}
    13e2:	2001      	movs	r0, #1
    13e4:	4b01      	ldr	r3, [pc, #4]	; (13ec <TC4_Handler+0xc>)
    13e6:	4798      	blx	r3
    13e8:	bd08      	pop	{r3, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	00001375 	.word	0x00001375

000013f0 <TC5_Handler>:
    13f0:	b508      	push	{r3, lr}
    13f2:	2002      	movs	r0, #2
    13f4:	4b01      	ldr	r3, [pc, #4]	; (13fc <TC5_Handler+0xc>)
    13f6:	4798      	blx	r3
    13f8:	bd08      	pop	{r3, pc}
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	00001375 	.word	0x00001375

00001400 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1400:	b570      	push	{r4, r5, r6, lr}
    1402:	b084      	sub	sp, #16
    1404:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1406:	ab01      	add	r3, sp, #4
    1408:	4a0a      	ldr	r2, [pc, #40]	; (1434 <_tc_get_inst_index+0x34>)
    140a:	ca70      	ldmia	r2!, {r4, r5, r6}
    140c:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    140e:	9b01      	ldr	r3, [sp, #4]
    1410:	4283      	cmp	r3, r0
    1412:	d00a      	beq.n	142a <_tc_get_inst_index+0x2a>
    1414:	9c02      	ldr	r4, [sp, #8]
    1416:	4284      	cmp	r4, r0
    1418:	d005      	beq.n	1426 <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    141a:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    141c:	9d03      	ldr	r5, [sp, #12]
    141e:	428d      	cmp	r5, r1
    1420:	d105      	bne.n	142e <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1422:	2002      	movs	r0, #2
    1424:	e002      	b.n	142c <_tc_get_inst_index+0x2c>
    1426:	2001      	movs	r0, #1
    1428:	e000      	b.n	142c <_tc_get_inst_index+0x2c>
    142a:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
    142c:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    142e:	b004      	add	sp, #16
    1430:	bd70      	pop	{r4, r5, r6, pc}
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	00004294 	.word	0x00004294

00001438 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1438:	b5f0      	push	{r4, r5, r6, r7, lr}
    143a:	464f      	mov	r7, r9
    143c:	4646      	mov	r6, r8
    143e:	b4c0      	push	{r6, r7}
    1440:	b087      	sub	sp, #28
    1442:	1c04      	adds	r4, r0, #0
    1444:	1c0d      	adds	r5, r1, #0
    1446:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1448:	1c08      	adds	r0, r1, #0
    144a:	4b90      	ldr	r3, [pc, #576]	; (168c <tc_init+0x254>)
    144c:	4798      	blx	r3
    144e:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1450:	4f8f      	ldr	r7, [pc, #572]	; (1690 <tc_init+0x258>)
    1452:	1c39      	adds	r1, r7, #0
    1454:	310c      	adds	r1, #12
    1456:	a805      	add	r0, sp, #20
    1458:	2203      	movs	r2, #3
    145a:	4e8e      	ldr	r6, [pc, #568]	; (1694 <tc_init+0x25c>)
    145c:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    145e:	1c39      	adds	r1, r7, #0
    1460:	3110      	adds	r1, #16
    1462:	a803      	add	r0, sp, #12
    1464:	2206      	movs	r2, #6
    1466:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1468:	2300      	movs	r3, #0
    146a:	60a3      	str	r3, [r4, #8]
    146c:	60e3      	str	r3, [r4, #12]
    146e:	6123      	str	r3, [r4, #16]
    1470:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1472:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1474:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1476:	4648      	mov	r0, r9
    1478:	0082      	lsls	r2, r0, #2
    147a:	4b87      	ldr	r3, [pc, #540]	; (1698 <tc_init+0x260>)
    147c:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    147e:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1480:	4641      	mov	r1, r8
    1482:	788b      	ldrb	r3, [r1, #2]
    1484:	2b08      	cmp	r3, #8
    1486:	d104      	bne.n	1492 <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1488:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    148a:	464a      	mov	r2, r9
    148c:	07d2      	lsls	r2, r2, #31
    148e:	d400      	bmi.n	1492 <tc_init+0x5a>
    1490:	e0f6      	b.n	1680 <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1492:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1494:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1496:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1498:	07d9      	lsls	r1, r3, #31
    149a:	d500      	bpl.n	149e <tc_init+0x66>
    149c:	e0f0      	b.n	1680 <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    149e:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    14a0:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    14a2:	06da      	lsls	r2, r3, #27
    14a4:	d500      	bpl.n	14a8 <tc_init+0x70>
    14a6:	e0eb      	b.n	1680 <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    14a8:	882b      	ldrh	r3, [r5, #0]
    14aa:	0799      	lsls	r1, r3, #30
    14ac:	d500      	bpl.n	14b0 <tc_init+0x78>
    14ae:	e0e7      	b.n	1680 <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    14b0:	4642      	mov	r2, r8
    14b2:	7c13      	ldrb	r3, [r2, #16]
    14b4:	2b00      	cmp	r3, #0
    14b6:	d00c      	beq.n	14d2 <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14b8:	a902      	add	r1, sp, #8
    14ba:	2301      	movs	r3, #1
    14bc:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    14be:	2200      	movs	r2, #0
    14c0:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    14c2:	4640      	mov	r0, r8
    14c4:	6980      	ldr	r0, [r0, #24]
    14c6:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    14c8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    14ca:	4642      	mov	r2, r8
    14cc:	7d10      	ldrb	r0, [r2, #20]
    14ce:	4b73      	ldr	r3, [pc, #460]	; (169c <tc_init+0x264>)
    14d0:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    14d2:	4640      	mov	r0, r8
    14d4:	7f03      	ldrb	r3, [r0, #28]
    14d6:	2b00      	cmp	r3, #0
    14d8:	d00b      	beq.n	14f2 <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    14da:	a902      	add	r1, sp, #8
    14dc:	2301      	movs	r3, #1
    14de:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    14e0:	2200      	movs	r2, #0
    14e2:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    14e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
    14e6:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    14e8:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    14ea:	6a03      	ldr	r3, [r0, #32]
    14ec:	b2d8      	uxtb	r0, r3
    14ee:	4b6b      	ldr	r3, [pc, #428]	; (169c <tc_init+0x264>)
    14f0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    14f2:	4b6b      	ldr	r3, [pc, #428]	; (16a0 <tc_init+0x268>)
    14f4:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    14f6:	4648      	mov	r0, r9
    14f8:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    14fa:	a803      	add	r0, sp, #12
    14fc:	5a12      	ldrh	r2, [r2, r0]
    14fe:	430a      	orrs	r2, r1
    1500:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1502:	4641      	mov	r1, r8
    1504:	788b      	ldrb	r3, [r1, #2]
    1506:	2b08      	cmp	r3, #8
    1508:	d108      	bne.n	151c <tc_init+0xe4>
    150a:	4b65      	ldr	r3, [pc, #404]	; (16a0 <tc_init+0x268>)
    150c:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    150e:	4648      	mov	r0, r9
    1510:	3001      	adds	r0, #1
    1512:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1514:	a903      	add	r1, sp, #12
    1516:	5a41      	ldrh	r1, [r0, r1]
    1518:	430a      	orrs	r2, r1
    151a:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    151c:	a901      	add	r1, sp, #4
    151e:	4642      	mov	r2, r8
    1520:	7813      	ldrb	r3, [r2, #0]
    1522:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1524:	ab05      	add	r3, sp, #20
    1526:	4648      	mov	r0, r9
    1528:	5c1e      	ldrb	r6, [r3, r0]
    152a:	1c30      	adds	r0, r6, #0
    152c:	4b5d      	ldr	r3, [pc, #372]	; (16a4 <tc_init+0x26c>)
    152e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1530:	1c30      	adds	r0, r6, #0
    1532:	4b5d      	ldr	r3, [pc, #372]	; (16a8 <tc_init+0x270>)
    1534:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    1536:	4641      	mov	r1, r8
    1538:	8888      	ldrh	r0, [r1, #4]
    153a:	890b      	ldrh	r3, [r1, #8]
    153c:	4303      	orrs	r3, r0
    153e:	7988      	ldrb	r0, [r1, #6]
    1540:	788a      	ldrb	r2, [r1, #2]
    1542:	4310      	orrs	r0, r2
    1544:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1546:	784b      	ldrb	r3, [r1, #1]
    1548:	2b00      	cmp	r3, #0
    154a:	d002      	beq.n	1552 <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    154c:	2380      	movs	r3, #128	; 0x80
    154e:	011b      	lsls	r3, r3, #4
    1550:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1552:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1554:	227f      	movs	r2, #127	; 0x7f
    1556:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1558:	4393      	bics	r3, r2
    155a:	d1fc      	bne.n	1556 <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    155c:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    155e:	4642      	mov	r2, r8
    1560:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1562:	1e43      	subs	r3, r0, #1
    1564:	4198      	sbcs	r0, r3
    1566:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
    1568:	7b93      	ldrb	r3, [r2, #14]
    156a:	2b00      	cmp	r3, #0
    156c:	d001      	beq.n	1572 <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    156e:	2301      	movs	r3, #1
    1570:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1572:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1574:	227f      	movs	r2, #127	; 0x7f
    1576:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1578:	4393      	bics	r3, r2
    157a:	d1fc      	bne.n	1576 <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    157c:	23ff      	movs	r3, #255	; 0xff
    157e:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1580:	2800      	cmp	r0, #0
    1582:	d005      	beq.n	1590 <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1584:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1586:	227f      	movs	r2, #127	; 0x7f
    1588:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    158a:	4393      	bics	r3, r2
    158c:	d1fc      	bne.n	1588 <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    158e:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1590:	4643      	mov	r3, r8
    1592:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1594:	7adb      	ldrb	r3, [r3, #11]
    1596:	2b00      	cmp	r3, #0
    1598:	d001      	beq.n	159e <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    159a:	2310      	movs	r3, #16
    159c:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    159e:	4641      	mov	r1, r8
    15a0:	7b0b      	ldrb	r3, [r1, #12]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d001      	beq.n	15aa <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    15a6:	2320      	movs	r3, #32
    15a8:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15aa:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15ac:	227f      	movs	r2, #127	; 0x7f
    15ae:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    15b0:	4393      	bics	r3, r2
    15b2:	d1fc      	bne.n	15ae <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    15b4:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15b6:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15b8:	217f      	movs	r1, #127	; 0x7f
    15ba:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    15bc:	438b      	bics	r3, r1
    15be:	d1fc      	bne.n	15ba <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    15c0:	7923      	ldrb	r3, [r4, #4]
    15c2:	2b04      	cmp	r3, #4
    15c4:	d005      	beq.n	15d2 <tc_init+0x19a>
    15c6:	2b08      	cmp	r3, #8
    15c8:	d041      	beq.n	164e <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    15ca:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    15cc:	2b00      	cmp	r3, #0
    15ce:	d157      	bne.n	1680 <tc_init+0x248>
    15d0:	e024      	b.n	161c <tc_init+0x1e4>
    15d2:	217f      	movs	r1, #127	; 0x7f
    15d4:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    15d6:	438b      	bics	r3, r1
    15d8:	d1fc      	bne.n	15d4 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    15da:	2328      	movs	r3, #40	; 0x28
    15dc:	4642      	mov	r2, r8
    15de:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    15e0:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15e2:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15e4:	227f      	movs	r2, #127	; 0x7f
    15e6:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    15e8:	4393      	bics	r3, r2
    15ea:	d1fc      	bne.n	15e6 <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    15ec:	2329      	movs	r3, #41	; 0x29
    15ee:	4640      	mov	r0, r8
    15f0:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    15f2:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    15f4:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    15f6:	227f      	movs	r2, #127	; 0x7f
    15f8:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    15fa:	4393      	bics	r3, r2
    15fc:	d1fc      	bne.n	15f8 <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    15fe:	232a      	movs	r3, #42	; 0x2a
    1600:	4641      	mov	r1, r8
    1602:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    1604:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1606:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1608:	227f      	movs	r2, #127	; 0x7f
    160a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    160c:	4393      	bics	r3, r2
    160e:	d1fc      	bne.n	160a <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1610:	232b      	movs	r3, #43	; 0x2b
    1612:	4642      	mov	r2, r8
    1614:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1616:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1618:	2000      	movs	r0, #0
    161a:	e031      	b.n	1680 <tc_init+0x248>
    161c:	217f      	movs	r1, #127	; 0x7f
    161e:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1620:	438b      	bics	r3, r1
    1622:	d1fc      	bne.n	161e <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1624:	4640      	mov	r0, r8
    1626:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    1628:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    162a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    162c:	227f      	movs	r2, #127	; 0x7f
    162e:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1630:	4393      	bics	r3, r2
    1632:	d1fc      	bne.n	162e <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1634:	4641      	mov	r1, r8
    1636:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1638:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    163a:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    163c:	227f      	movs	r2, #127	; 0x7f
    163e:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1640:	4393      	bics	r3, r2
    1642:	d1fc      	bne.n	163e <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1644:	4642      	mov	r2, r8
    1646:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    1648:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    164a:	2000      	movs	r0, #0
    164c:	e018      	b.n	1680 <tc_init+0x248>
    164e:	217f      	movs	r1, #127	; 0x7f
    1650:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1652:	438b      	bics	r3, r1
    1654:	d1fc      	bne.n	1650 <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1656:	4643      	mov	r3, r8
    1658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    165a:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    165c:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    165e:	227f      	movs	r2, #127	; 0x7f
    1660:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    1662:	4393      	bics	r3, r2
    1664:	d1fc      	bne.n	1660 <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    1666:	4640      	mov	r0, r8
    1668:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    166a:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    166c:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    166e:	227f      	movs	r2, #127	; 0x7f
    1670:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1672:	4393      	bics	r3, r2
    1674:	d1fc      	bne.n	1670 <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1676:	4641      	mov	r1, r8
    1678:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    167a:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    167c:	2000      	movs	r0, #0
    167e:	e7ff      	b.n	1680 <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1680:	b007      	add	sp, #28
    1682:	bc0c      	pop	{r2, r3}
    1684:	4690      	mov	r8, r2
    1686:	4699      	mov	r9, r3
    1688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	00001401 	.word	0x00001401
    1690:	00004294 	.word	0x00004294
    1694:	000040a1 	.word	0x000040a1
    1698:	20000880 	.word	0x20000880
    169c:	000012ed 	.word	0x000012ed
    16a0:	40000400 	.word	0x40000400
    16a4:	00001211 	.word	0x00001211
    16a8:	00001185 	.word	0x00001185

000016ac <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    16ac:	6802      	ldr	r2, [r0, #0]
    16ae:	217f      	movs	r1, #127	; 0x7f
    16b0:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    16b2:	438b      	bics	r3, r1
    16b4:	d1fc      	bne.n	16b0 <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    16b6:	7903      	ldrb	r3, [r0, #4]
    16b8:	2b04      	cmp	r3, #4
    16ba:	d005      	beq.n	16c8 <tc_get_count_value+0x1c>
    16bc:	2b08      	cmp	r3, #8
    16be:	d009      	beq.n	16d4 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    16c0:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    16c2:	2b00      	cmp	r3, #0
    16c4:	d108      	bne.n	16d8 <tc_get_count_value+0x2c>
    16c6:	e002      	b.n	16ce <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    16c8:	7c10      	ldrb	r0, [r2, #16]
    16ca:	b2c0      	uxtb	r0, r0
    16cc:	e004      	b.n	16d8 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    16ce:	8a10      	ldrh	r0, [r2, #16]
    16d0:	b280      	uxth	r0, r0
    16d2:	e001      	b.n	16d8 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    16d4:	6910      	ldr	r0, [r2, #16]
    16d6:	e7ff      	b.n	16d8 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    16d8:	4770      	bx	lr
    16da:	46c0      	nop			; (mov r8, r8)

000016dc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    16dc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    16de:	6804      	ldr	r4, [r0, #0]
    16e0:	257f      	movs	r5, #127	; 0x7f
    16e2:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    16e4:	43ab      	bics	r3, r5
    16e6:	d1fc      	bne.n	16e2 <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    16e8:	7903      	ldrb	r3, [r0, #4]
    16ea:	2b04      	cmp	r3, #4
    16ec:	d005      	beq.n	16fa <tc_set_compare_value+0x1e>
    16ee:	2b08      	cmp	r3, #8
    16f0:	d014      	beq.n	171c <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    16f2:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    16f4:	2b00      	cmp	r3, #0
    16f6:	d119      	bne.n	172c <tc_set_compare_value+0x50>
    16f8:	e007      	b.n	170a <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    16fa:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    16fc:	2901      	cmp	r1, #1
    16fe:	d815      	bhi.n	172c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    1700:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    1702:	1861      	adds	r1, r4, r1
    1704:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    1706:	2000      	movs	r0, #0
    1708:	e010      	b.n	172c <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    170a:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    170c:	2901      	cmp	r1, #1
    170e:	d80d      	bhi.n	172c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    1710:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    1712:	310c      	adds	r1, #12
    1714:	0049      	lsls	r1, r1, #1
    1716:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    1718:	2000      	movs	r0, #0
    171a:	e007      	b.n	172c <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    171c:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    171e:	2901      	cmp	r1, #1
    1720:	d804      	bhi.n	172c <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    1722:	3106      	adds	r1, #6
    1724:	0089      	lsls	r1, r1, #2
    1726:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    1728:	2000      	movs	r0, #0
    172a:	e7ff      	b.n	172c <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    172c:	bd30      	pop	{r4, r5, pc}
    172e:	46c0      	nop			; (mov r8, r8)

00001730 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1730:	e7fe      	b.n	1730 <Dummy_Handler>
    1732:	46c0      	nop			; (mov r8, r8)

00001734 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1734:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1736:	4b1c      	ldr	r3, [pc, #112]	; (17a8 <Reset_Handler+0x74>)
    1738:	4a1c      	ldr	r2, [pc, #112]	; (17ac <Reset_Handler+0x78>)
    173a:	429a      	cmp	r2, r3
    173c:	d003      	beq.n	1746 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    173e:	4b1c      	ldr	r3, [pc, #112]	; (17b0 <Reset_Handler+0x7c>)
    1740:	4a19      	ldr	r2, [pc, #100]	; (17a8 <Reset_Handler+0x74>)
    1742:	429a      	cmp	r2, r3
    1744:	d304      	bcc.n	1750 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1746:	4b1b      	ldr	r3, [pc, #108]	; (17b4 <Reset_Handler+0x80>)
    1748:	4a1b      	ldr	r2, [pc, #108]	; (17b8 <Reset_Handler+0x84>)
    174a:	429a      	cmp	r2, r3
    174c:	d310      	bcc.n	1770 <Reset_Handler+0x3c>
    174e:	e01b      	b.n	1788 <Reset_Handler+0x54>
    1750:	4b1a      	ldr	r3, [pc, #104]	; (17bc <Reset_Handler+0x88>)
    1752:	4817      	ldr	r0, [pc, #92]	; (17b0 <Reset_Handler+0x7c>)
    1754:	3003      	adds	r0, #3
    1756:	1ac0      	subs	r0, r0, r3
    1758:	0880      	lsrs	r0, r0, #2
    175a:	3001      	adds	r0, #1
    175c:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    175e:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1760:	4911      	ldr	r1, [pc, #68]	; (17a8 <Reset_Handler+0x74>)
    1762:	4a12      	ldr	r2, [pc, #72]	; (17ac <Reset_Handler+0x78>)
    1764:	58d4      	ldr	r4, [r2, r3]
    1766:	50cc      	str	r4, [r1, r3]
    1768:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    176a:	4283      	cmp	r3, r0
    176c:	d1fa      	bne.n	1764 <Reset_Handler+0x30>
    176e:	e7ea      	b.n	1746 <Reset_Handler+0x12>
    1770:	4b11      	ldr	r3, [pc, #68]	; (17b8 <Reset_Handler+0x84>)
    1772:	1d1a      	adds	r2, r3, #4
    1774:	490f      	ldr	r1, [pc, #60]	; (17b4 <Reset_Handler+0x80>)
    1776:	3103      	adds	r1, #3
    1778:	1a89      	subs	r1, r1, r2
    177a:	0889      	lsrs	r1, r1, #2
    177c:	0089      	lsls	r1, r1, #2
    177e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1780:	2100      	movs	r1, #0
    1782:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1784:	4293      	cmp	r3, r2
    1786:	d1fc      	bne.n	1782 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1788:	4b0d      	ldr	r3, [pc, #52]	; (17c0 <Reset_Handler+0x8c>)
    178a:	217f      	movs	r1, #127	; 0x7f
    178c:	4a0d      	ldr	r2, [pc, #52]	; (17c4 <Reset_Handler+0x90>)
    178e:	438a      	bics	r2, r1
    1790:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1792:	4b0d      	ldr	r3, [pc, #52]	; (17c8 <Reset_Handler+0x94>)
    1794:	6859      	ldr	r1, [r3, #4]
    1796:	2280      	movs	r2, #128	; 0x80
    1798:	430a      	orrs	r2, r1
    179a:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    179c:	4b0b      	ldr	r3, [pc, #44]	; (17cc <Reset_Handler+0x98>)
    179e:	4798      	blx	r3

        /* Branch to main function */
        main();
    17a0:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <Reset_Handler+0x9c>)
    17a2:	4798      	blx	r3
    17a4:	e7fe      	b.n	17a4 <Reset_Handler+0x70>
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	20000000 	.word	0x20000000
    17ac:	00004394 	.word	0x00004394
    17b0:	20000070 	.word	0x20000070
    17b4:	20000994 	.word	0x20000994
    17b8:	20000070 	.word	0x20000070
    17bc:	20000004 	.word	0x20000004
    17c0:	e000ed00 	.word	0xe000ed00
    17c4:	00000000 	.word	0x00000000
    17c8:	41004000 	.word	0x41004000
    17cc:	00004055 	.word	0x00004055
    17d0:	00003dc9 	.word	0x00003dc9

000017d4 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    17d4:	4b06      	ldr	r3, [pc, #24]	; (17f0 <_sbrk+0x1c>)
    17d6:	681b      	ldr	r3, [r3, #0]
    17d8:	2b00      	cmp	r3, #0
    17da:	d102      	bne.n	17e2 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    17dc:	4a05      	ldr	r2, [pc, #20]	; (17f4 <_sbrk+0x20>)
    17de:	4b04      	ldr	r3, [pc, #16]	; (17f0 <_sbrk+0x1c>)
    17e0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    17e2:	4a03      	ldr	r2, [pc, #12]	; (17f0 <_sbrk+0x1c>)
    17e4:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    17e6:	1818      	adds	r0, r3, r0
    17e8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    17ea:	1c18      	adds	r0, r3, #0
    17ec:	4770      	bx	lr
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	200000c8 	.word	0x200000c8
    17f4:	20002998 	.word	0x20002998

000017f8 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    17f8:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    17fa:	490d      	ldr	r1, [pc, #52]	; (1830 <NWK_Init+0x38>)
    17fc:	2300      	movs	r3, #0
    17fe:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    1800:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    1802:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    1804:	2258      	movs	r2, #88	; 0x58
    1806:	528b      	strh	r3, [r1, r2]
    1808:	1c0b      	adds	r3, r1, #0
    180a:	3308      	adds	r3, #8
    180c:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    180e:	2200      	movs	r2, #0
    1810:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    1812:	428b      	cmp	r3, r1
    1814:	d1fc      	bne.n	1810 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    1816:	4b07      	ldr	r3, [pc, #28]	; (1834 <NWK_Init+0x3c>)
    1818:	4798      	blx	r3
	nwkRxInit();
    181a:	4b07      	ldr	r3, [pc, #28]	; (1838 <NWK_Init+0x40>)
    181c:	4798      	blx	r3
	nwkFrameInit();
    181e:	4b07      	ldr	r3, [pc, #28]	; (183c <NWK_Init+0x44>)
    1820:	4798      	blx	r3
	nwkDataReqInit();
    1822:	4b07      	ldr	r3, [pc, #28]	; (1840 <NWK_Init+0x48>)
    1824:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    1826:	4b07      	ldr	r3, [pc, #28]	; (1844 <NWK_Init+0x4c>)
    1828:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    182a:	4b07      	ldr	r3, [pc, #28]	; (1848 <NWK_Init+0x50>)
    182c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    182e:	bd08      	pop	{r3, pc}
    1830:	2000088c 	.word	0x2000088c
    1834:	000026d5 	.word	0x000026d5
    1838:	00001f41 	.word	0x00001f41
    183c:	00001a6d 	.word	0x00001a6d
    1840:	000018e9 	.word	0x000018e9
    1844:	00001b61 	.word	0x00001b61
    1848:	000023a1 	.word	0x000023a1

0000184c <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    184c:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    184e:	4b02      	ldr	r3, [pc, #8]	; (1858 <NWK_SetAddr+0xc>)
    1850:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    1852:	4b02      	ldr	r3, [pc, #8]	; (185c <NWK_SetAddr+0x10>)
    1854:	4798      	blx	r3
}
    1856:	bd08      	pop	{r3, pc}
    1858:	2000088c 	.word	0x2000088c
    185c:	00002afd 	.word	0x00002afd

00001860 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    1860:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    1862:	4b02      	ldr	r3, [pc, #8]	; (186c <NWK_SetPanId+0xc>)
    1864:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    1866:	4b02      	ldr	r3, [pc, #8]	; (1870 <NWK_SetPanId+0x10>)
    1868:	4798      	blx	r3
}
    186a:	bd08      	pop	{r3, pc}
    186c:	2000088c 	.word	0x2000088c
    1870:	00002add 	.word	0x00002add

00001874 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    1874:	3002      	adds	r0, #2
    1876:	0080      	lsls	r0, r0, #2
    1878:	4b01      	ldr	r3, [pc, #4]	; (1880 <NWK_OpenEndpoint+0xc>)
    187a:	50c1      	str	r1, [r0, r3]
}
    187c:	4770      	bx	lr
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	2000088c 	.word	0x2000088c

00001884 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    1884:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    1886:	4b04      	ldr	r3, [pc, #16]	; (1898 <NWK_TaskHandler+0x14>)
    1888:	4798      	blx	r3
	nwkTxTaskHandler();
    188a:	4b04      	ldr	r3, [pc, #16]	; (189c <NWK_TaskHandler+0x18>)
    188c:	4798      	blx	r3
	nwkDataReqTaskHandler();
    188e:	4b04      	ldr	r3, [pc, #16]	; (18a0 <NWK_TaskHandler+0x1c>)
    1890:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    1892:	4b04      	ldr	r3, [pc, #16]	; (18a4 <NWK_TaskHandler+0x20>)
    1894:	4798      	blx	r3
#endif
}
    1896:	bd08      	pop	{r3, pc}
    1898:	00001fdd 	.word	0x00001fdd
    189c:	000028d9 	.word	0x000028d9
    18a0:	00001929 	.word	0x00001929
    18a4:	00002495 	.word	0x00002495

000018a8 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    18a8:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    18aa:	4b0d      	ldr	r3, [pc, #52]	; (18e0 <nwkDataReqTxConf+0x38>)
    18ac:	681b      	ldr	r3, [r3, #0]
    18ae:	2b00      	cmp	r3, #0
    18b0:	d012      	beq.n	18d8 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    18b2:	685a      	ldr	r2, [r3, #4]
    18b4:	4282      	cmp	r2, r0
    18b6:	d10c      	bne.n	18d2 <nwkDataReqTxConf+0x2a>
    18b8:	e002      	b.n	18c0 <nwkDataReqTxConf+0x18>
    18ba:	685a      	ldr	r2, [r3, #4]
    18bc:	4282      	cmp	r2, r0
    18be:	d108      	bne.n	18d2 <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    18c0:	2285      	movs	r2, #133	; 0x85
    18c2:	5c82      	ldrb	r2, [r0, r2]
    18c4:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    18c6:	2288      	movs	r2, #136	; 0x88
    18c8:	5c82      	ldrb	r2, [r0, r2]
    18ca:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    18cc:	2202      	movs	r2, #2
    18ce:	721a      	strb	r2, [r3, #8]
			break;
    18d0:	e002      	b.n	18d8 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    18d2:	681b      	ldr	r3, [r3, #0]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d1f0      	bne.n	18ba <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    18d8:	4b02      	ldr	r3, [pc, #8]	; (18e4 <nwkDataReqTxConf+0x3c>)
    18da:	4798      	blx	r3
}
    18dc:	bd08      	pop	{r3, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	200000cc 	.word	0x200000cc
    18e4:	00001af1 	.word	0x00001af1

000018e8 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    18e8:	2200      	movs	r2, #0
    18ea:	4b01      	ldr	r3, [pc, #4]	; (18f0 <nwkDataReqInit+0x8>)
    18ec:	601a      	str	r2, [r3, #0]
}
    18ee:	4770      	bx	lr
    18f0:	200000cc 	.word	0x200000cc

000018f4 <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    18f4:	2300      	movs	r3, #0
    18f6:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    18f8:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    18fa:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    18fc:	4a08      	ldr	r2, [pc, #32]	; (1920 <NWK_DataReq+0x2c>)
    18fe:	2358      	movs	r3, #88	; 0x58
    1900:	5ad1      	ldrh	r1, [r2, r3]
    1902:	3101      	adds	r1, #1
    1904:	52d1      	strh	r1, [r2, r3]

	if (NULL == nwkDataReqQueue) {
    1906:	4b07      	ldr	r3, [pc, #28]	; (1924 <NWK_DataReq+0x30>)
    1908:	681b      	ldr	r3, [r3, #0]
    190a:	2b00      	cmp	r3, #0
    190c:	d103      	bne.n	1916 <NWK_DataReq+0x22>
		req->next = NULL;
    190e:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    1910:	4b04      	ldr	r3, [pc, #16]	; (1924 <NWK_DataReq+0x30>)
    1912:	6018      	str	r0, [r3, #0]
    1914:	e002      	b.n	191c <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    1916:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    1918:	4b02      	ldr	r3, [pc, #8]	; (1924 <NWK_DataReq+0x30>)
    191a:	6018      	str	r0, [r3, #0]
	}
}
    191c:	4770      	bx	lr
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	2000088c 	.word	0x2000088c
    1924:	200000cc 	.word	0x200000cc

00001928 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    1928:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    192a:	4b4a      	ldr	r3, [pc, #296]	; (1a54 <nwkDataReqTaskHandler+0x12c>)
    192c:	681a      	ldr	r2, [r3, #0]
    192e:	2a00      	cmp	r2, #0
    1930:	d100      	bne.n	1934 <nwkDataReqTaskHandler+0xc>
    1932:	e08d      	b.n	1a50 <nwkDataReqTaskHandler+0x128>
    1934:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    1936:	7a23      	ldrb	r3, [r4, #8]
    1938:	2b00      	cmp	r3, #0
    193a:	d002      	beq.n	1942 <nwkDataReqTaskHandler+0x1a>
    193c:	2b02      	cmp	r3, #2
    193e:	d06d      	beq.n	1a1c <nwkDataReqTaskHandler+0xf4>
    1940:	e082      	b.n	1a48 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    1942:	4b45      	ldr	r3, [pc, #276]	; (1a58 <nwkDataReqTaskHandler+0x130>)
    1944:	4798      	blx	r3
    1946:	1e05      	subs	r5, r0, #0
    1948:	d103      	bne.n	1952 <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    194a:	2302      	movs	r3, #2
    194c:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    194e:	7723      	strb	r3, [r4, #28]
    1950:	e07e      	b.n	1a50 <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    1952:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1954:	2201      	movs	r2, #1
    1956:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    1958:	4b40      	ldr	r3, [pc, #256]	; (1a5c <nwkDataReqTaskHandler+0x134>)
    195a:	2189      	movs	r1, #137	; 0x89
    195c:	5443      	strb	r3, [r0, r1]
    195e:	0a18      	lsrs	r0, r3, #8
    1960:	218a      	movs	r1, #138	; 0x8a
    1962:	5468      	strb	r0, [r5, r1]
    1964:	0c18      	lsrs	r0, r3, #16
    1966:	218b      	movs	r1, #139	; 0x8b
    1968:	5468      	strb	r0, [r5, r1]
    196a:	0e1b      	lsrs	r3, r3, #24
    196c:	218c      	movs	r1, #140	; 0x8c
    196e:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    1970:	7ba0      	ldrb	r0, [r4, #14]
    1972:	0880      	lsrs	r0, r0, #2
    1974:	2301      	movs	r3, #1
    1976:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    1978:	2188      	movs	r1, #136	; 0x88
    197a:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    197c:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    197e:	4019      	ands	r1, r3
    1980:	7ae8      	ldrb	r0, [r5, #11]
    1982:	4390      	bics	r0, r2
    1984:	1c02      	adds	r2, r0, #0
    1986:	430a      	orrs	r2, r1
    1988:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    198a:	7ba1      	ldrb	r1, [r4, #14]
    198c:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    198e:	4019      	ands	r1, r3
    1990:	0089      	lsls	r1, r1, #2
    1992:	b2d2      	uxtb	r2, r2
    1994:	2004      	movs	r0, #4
    1996:	4382      	bics	r2, r0
    1998:	430a      	orrs	r2, r1
    199a:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    199c:	7ba2      	ldrb	r2, [r4, #14]
    199e:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    19a0:	4013      	ands	r3, r2
    19a2:	005a      	lsls	r2, r3, #1
    19a4:	7aeb      	ldrb	r3, [r5, #11]
    19a6:	2102      	movs	r1, #2
    19a8:	438b      	bics	r3, r1
    19aa:	4313      	orrs	r3, r2
    19ac:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    19ae:	4b2c      	ldr	r3, [pc, #176]	; (1a60 <nwkDataReqTaskHandler+0x138>)
    19b0:	791a      	ldrb	r2, [r3, #4]
    19b2:	3201      	adds	r2, #1
    19b4:	b2d2      	uxtb	r2, r2
    19b6:	711a      	strb	r2, [r3, #4]
    19b8:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    19ba:	781a      	ldrb	r2, [r3, #0]
    19bc:	736a      	strb	r2, [r5, #13]
    19be:	785b      	ldrb	r3, [r3, #1]
    19c0:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    19c2:	8963      	ldrh	r3, [r4, #10]
    19c4:	7aa2      	ldrb	r2, [r4, #10]
    19c6:	73ea      	strb	r2, [r5, #15]
    19c8:	0a1b      	lsrs	r3, r3, #8
    19ca:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    19cc:	7b61      	ldrb	r1, [r4, #13]
    19ce:	230f      	movs	r3, #15
    19d0:	4019      	ands	r1, r3
    19d2:	7c6a      	ldrb	r2, [r5, #17]
    19d4:	200f      	movs	r0, #15
    19d6:	4382      	bics	r2, r0
    19d8:	430a      	orrs	r2, r1
    19da:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    19dc:	7b22      	ldrb	r2, [r4, #12]
    19de:	0112      	lsls	r2, r2, #4
    19e0:	7c69      	ldrb	r1, [r5, #17]
    19e2:	400b      	ands	r3, r1
    19e4:	4313      	orrs	r3, r2
    19e6:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    19e8:	2381      	movs	r3, #129	; 0x81
    19ea:	5ceb      	ldrb	r3, [r5, r3]
    19ec:	2282      	movs	r2, #130	; 0x82
    19ee:	5ca8      	ldrb	r0, [r5, r2]
    19f0:	0200      	lsls	r0, r0, #8
    19f2:	4318      	orrs	r0, r3
    19f4:	2383      	movs	r3, #131	; 0x83
    19f6:	5ceb      	ldrb	r3, [r5, r3]
    19f8:	041b      	lsls	r3, r3, #16
    19fa:	4318      	orrs	r0, r3
    19fc:	2384      	movs	r3, #132	; 0x84
    19fe:	5ceb      	ldrb	r3, [r5, r3]
    1a00:	061b      	lsls	r3, r3, #24
    1a02:	4318      	orrs	r0, r3
    1a04:	7d22      	ldrb	r2, [r4, #20]
    1a06:	6921      	ldr	r1, [r4, #16]
    1a08:	4b16      	ldr	r3, [pc, #88]	; (1a64 <nwkDataReqTaskHandler+0x13c>)
    1a0a:	4798      	blx	r3
	frame->size += req->size;
    1a0c:	7d22      	ldrb	r2, [r4, #20]
    1a0e:	786b      	ldrb	r3, [r5, #1]
    1a10:	18d3      	adds	r3, r2, r3
    1a12:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    1a14:	1c28      	adds	r0, r5, #0
    1a16:	4b14      	ldr	r3, [pc, #80]	; (1a68 <nwkDataReqTaskHandler+0x140>)
    1a18:	4798      	blx	r3
    1a1a:	e019      	b.n	1a50 <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    1a1c:	4294      	cmp	r4, r2
    1a1e:	d103      	bne.n	1a28 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    1a20:	4b0c      	ldr	r3, [pc, #48]	; (1a54 <nwkDataReqTaskHandler+0x12c>)
    1a22:	6822      	ldr	r2, [r4, #0]
    1a24:	601a      	str	r2, [r3, #0]
    1a26:	e006      	b.n	1a36 <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    1a28:	6813      	ldr	r3, [r2, #0]
    1a2a:	429c      	cmp	r4, r3
    1a2c:	d001      	beq.n	1a32 <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    1a2e:	1c1a      	adds	r2, r3, #0
    1a30:	e7fa      	b.n	1a28 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    1a32:	6823      	ldr	r3, [r4, #0]
    1a34:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    1a36:	4a0a      	ldr	r2, [pc, #40]	; (1a60 <nwkDataReqTaskHandler+0x138>)
    1a38:	2358      	movs	r3, #88	; 0x58
    1a3a:	5ad1      	ldrh	r1, [r2, r3]
    1a3c:	3901      	subs	r1, #1
    1a3e:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    1a40:	69a3      	ldr	r3, [r4, #24]
    1a42:	1c20      	adds	r0, r4, #0
    1a44:	4798      	blx	r3
    1a46:	e003      	b.n	1a50 <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1a48:	6824      	ldr	r4, [r4, #0]
    1a4a:	2c00      	cmp	r4, #0
    1a4c:	d000      	beq.n	1a50 <nwkDataReqTaskHandler+0x128>
    1a4e:	e772      	b.n	1936 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    1a50:	bd38      	pop	{r3, r4, r5, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	200000cc 	.word	0x200000cc
    1a58:	00001a81 	.word	0x00001a81
    1a5c:	000018a9 	.word	0x000018a9
    1a60:	2000088c 	.word	0x2000088c
    1a64:	000040a1 	.word	0x000040a1
    1a68:	00002709 	.word	0x00002709

00001a6c <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1a6c:	4b03      	ldr	r3, [pc, #12]	; (1a7c <nwkFrameInit+0x10>)
    1a6e:	2200      	movs	r2, #0
    1a70:	701a      	strb	r2, [r3, #0]
    1a72:	218d      	movs	r1, #141	; 0x8d
    1a74:	545a      	strb	r2, [r3, r1]
    1a76:	0049      	lsls	r1, r1, #1
    1a78:	545a      	strb	r2, [r3, r1]
	}
}
    1a7a:	4770      	bx	lr
    1a7c:	200000d0 	.word	0x200000d0

00001a80 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    1a80:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    1a82:	4b18      	ldr	r3, [pc, #96]	; (1ae4 <nwkFrameAlloc+0x64>)
    1a84:	781b      	ldrb	r3, [r3, #0]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d00e      	beq.n	1aa8 <nwkFrameAlloc+0x28>
    1a8a:	238d      	movs	r3, #141	; 0x8d
    1a8c:	4a15      	ldr	r2, [pc, #84]	; (1ae4 <nwkFrameAlloc+0x64>)
    1a8e:	5cd3      	ldrb	r3, [r2, r3]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d007      	beq.n	1aa4 <nwkFrameAlloc+0x24>
    1a94:	238d      	movs	r3, #141	; 0x8d
    1a96:	005b      	lsls	r3, r3, #1
    1a98:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    1a9a:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d11f      	bne.n	1ae0 <nwkFrameAlloc+0x60>
    1aa0:	2302      	movs	r3, #2
    1aa2:	e002      	b.n	1aaa <nwkFrameAlloc+0x2a>
    1aa4:	2301      	movs	r3, #1
    1aa6:	e000      	b.n	1aaa <nwkFrameAlloc+0x2a>
    1aa8:	2300      	movs	r3, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1aaa:	4e0e      	ldr	r6, [pc, #56]	; (1ae4 <nwkFrameAlloc+0x64>)
    1aac:	258d      	movs	r5, #141	; 0x8d
    1aae:	435d      	muls	r5, r3
    1ab0:	1974      	adds	r4, r6, r5
    1ab2:	1c20      	adds	r0, r4, #0
    1ab4:	2100      	movs	r1, #0
    1ab6:	228d      	movs	r2, #141	; 0x8d
    1ab8:	4b0b      	ldr	r3, [pc, #44]	; (1ae8 <nwkFrameAlloc+0x68>)
    1aba:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1abc:	2310      	movs	r3, #16
    1abe:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    1ac0:	1c23      	adds	r3, r4, #0
    1ac2:	3380      	adds	r3, #128	; 0x80
    1ac4:	1c22      	adds	r2, r4, #0
    1ac6:	3212      	adds	r2, #18
    1ac8:	705a      	strb	r2, [r3, #1]
    1aca:	0a11      	lsrs	r1, r2, #8
    1acc:	7099      	strb	r1, [r3, #2]
    1ace:	0c11      	lsrs	r1, r2, #16
    1ad0:	70d9      	strb	r1, [r3, #3]
    1ad2:	0e12      	lsrs	r2, r2, #24
    1ad4:	711a      	strb	r2, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    1ad6:	4a05      	ldr	r2, [pc, #20]	; (1aec <nwkFrameAlloc+0x6c>)
    1ad8:	2358      	movs	r3, #88	; 0x58
    1ada:	5ad1      	ldrh	r1, [r2, r3]
    1adc:	3101      	adds	r1, #1
    1ade:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    1ae0:	1c20      	adds	r0, r4, #0
    1ae2:	bd70      	pop	{r4, r5, r6, pc}
    1ae4:	200000d0 	.word	0x200000d0
    1ae8:	000040b3 	.word	0x000040b3
    1aec:	2000088c 	.word	0x2000088c

00001af0 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    1af0:	2300      	movs	r3, #0
    1af2:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    1af4:	4a02      	ldr	r2, [pc, #8]	; (1b00 <nwkFrameFree+0x10>)
    1af6:	2358      	movs	r3, #88	; 0x58
    1af8:	5ad1      	ldrh	r1, [r2, r3]
    1afa:	3901      	subs	r1, #1
    1afc:	52d1      	strh	r1, [r2, r3]
}
    1afe:	4770      	bx	lr
    1b00:	2000088c 	.word	0x2000088c

00001b04 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    1b04:	2800      	cmp	r0, #0
    1b06:	d006      	beq.n	1b16 <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    1b08:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1b0a:	4b0c      	ldr	r3, [pc, #48]	; (1b3c <nwkFrameNext+0x38>)
    1b0c:	33a8      	adds	r3, #168	; 0xa8
    1b0e:	33ff      	adds	r3, #255	; 0xff
    1b10:	4298      	cmp	r0, r3
    1b12:	d301      	bcc.n	1b18 <nwkFrameNext+0x14>
    1b14:	e00f      	b.n	1b36 <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    1b16:	4809      	ldr	r0, [pc, #36]	; (1b3c <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1b18:	7803      	ldrb	r3, [r0, #0]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d10c      	bne.n	1b38 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1b1e:	4a07      	ldr	r2, [pc, #28]	; (1b3c <nwkFrameNext+0x38>)
    1b20:	32a8      	adds	r2, #168	; 0xa8
    1b22:	32ff      	adds	r2, #255	; 0xff
    1b24:	e002      	b.n	1b2c <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1b26:	7803      	ldrb	r3, [r0, #0]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d105      	bne.n	1b38 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1b2c:	308d      	adds	r0, #141	; 0x8d
    1b2e:	4290      	cmp	r0, r2
    1b30:	d3f9      	bcc.n	1b26 <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    1b32:	2000      	movs	r0, #0
    1b34:	e000      	b.n	1b38 <nwkFrameNext+0x34>
    1b36:	2000      	movs	r0, #0
}
    1b38:	4770      	bx	lr
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	200000d0 	.word	0x200000d0

00001b40 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    1b40:	2200      	movs	r2, #0
    1b42:	2385      	movs	r3, #133	; 0x85
    1b44:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <nwkFrameCommandInit+0x1c>)
    1b48:	791a      	ldrb	r2, [r3, #4]
    1b4a:	3201      	adds	r2, #1
    1b4c:	b2d2      	uxtb	r2, r2
    1b4e:	711a      	strb	r2, [r3, #4]
    1b50:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    1b52:	781a      	ldrb	r2, [r3, #0]
    1b54:	7342      	strb	r2, [r0, #13]
    1b56:	785b      	ldrb	r3, [r3, #1]
    1b58:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    1b5a:	4770      	bx	lr
    1b5c:	2000088c 	.word	0x2000088c

00001b60 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    1b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b62:	4a09      	ldr	r2, [pc, #36]	; (1b88 <nwkRouteInit+0x28>)
    1b64:	3202      	adds	r2, #2
    1b66:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1b68:	2701      	movs	r7, #1
    1b6a:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    1b6c:	4806      	ldr	r0, [pc, #24]	; (1b88 <nwkRouteInit+0x28>)
    1b6e:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    1b70:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    1b72:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    1b74:	00d9      	lsls	r1, r3, #3
    1b76:	5c0c      	ldrb	r4, [r1, r0]
    1b78:	43b4      	bics	r4, r6
    1b7a:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    1b7c:	7115      	strb	r5, [r2, #4]
    1b7e:	3301      	adds	r3, #1
    1b80:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1b82:	2b64      	cmp	r3, #100	; 0x64
    1b84:	d1f5      	bne.n	1b72 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    1b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b88:	20000278 	.word	0x20000278

00001b8c <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    1b8c:	b570      	push	{r4, r5, r6, lr}
    1b8e:	4a0b      	ldr	r2, [pc, #44]	; (1bbc <NWK_RouteFindEntry+0x30>)
    1b90:	3202      	adds	r2, #2
    1b92:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    1b94:	4e09      	ldr	r6, [pc, #36]	; (1bbc <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1b96:	8814      	ldrh	r4, [r2, #0]
    1b98:	4284      	cmp	r4, r0
    1b9a:	d109      	bne.n	1bb0 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    1b9c:	00dc      	lsls	r4, r3, #3
    1b9e:	5da4      	ldrb	r4, [r4, r6]
    1ba0:	07a4      	lsls	r4, r4, #30
    1ba2:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    1ba4:	428c      	cmp	r4, r1
    1ba6:	d103      	bne.n	1bb0 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    1ba8:	00dd      	lsls	r5, r3, #3
    1baa:	4804      	ldr	r0, [pc, #16]	; (1bbc <NWK_RouteFindEntry+0x30>)
    1bac:	1940      	adds	r0, r0, r5
    1bae:	e004      	b.n	1bba <NWK_RouteFindEntry+0x2e>
    1bb0:	3301      	adds	r3, #1
    1bb2:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1bb4:	2b64      	cmp	r3, #100	; 0x64
    1bb6:	d1ee      	bne.n	1b96 <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    1bb8:	2000      	movs	r0, #0
}
    1bba:	bd70      	pop	{r4, r5, r6, pc}
    1bbc:	20000278 	.word	0x20000278

00001bc0 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    1bc0:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    1bc2:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    1bc4:	4810      	ldr	r0, [pc, #64]	; (1c08 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    1bc6:	24c8      	movs	r4, #200	; 0xc8
    1bc8:	00a4      	lsls	r4, r4, #2
    1bca:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    1bcc:	7803      	ldrb	r3, [r0, #0]
    1bce:	07dc      	lsls	r4, r3, #31
    1bd0:	d40b      	bmi.n	1bea <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    1bd2:	7983      	ldrb	r3, [r0, #6]
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d00c      	beq.n	1bf2 <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    1bd8:	2a00      	cmp	r2, #0
    1bda:	d003      	beq.n	1be4 <NWK_RouteNewEntry+0x24>
    1bdc:	7994      	ldrb	r4, [r2, #6]
    1bde:	429c      	cmp	r4, r3
    1be0:	d802      	bhi.n	1be8 <NWK_RouteNewEntry+0x28>
    1be2:	e002      	b.n	1bea <NWK_RouteNewEntry+0x2a>
    1be4:	1c02      	adds	r2, r0, #0
    1be6:	e000      	b.n	1bea <NWK_RouteNewEntry+0x2a>
    1be8:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    1bea:	3008      	adds	r0, #8
    1bec:	4288      	cmp	r0, r1
    1bee:	d1ed      	bne.n	1bcc <NWK_RouteNewEntry+0xc>
    1bf0:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    1bf2:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1bf4:	2202      	movs	r2, #2
    1bf6:	4393      	bics	r3, r2
    1bf8:	220f      	movs	r2, #15
    1bfa:	4013      	ands	r3, r2
    1bfc:	2230      	movs	r2, #48	; 0x30
    1bfe:	4313      	orrs	r3, r2
    1c00:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    1c02:	2380      	movs	r3, #128	; 0x80
    1c04:	7183      	strb	r3, [r0, #6]

	return entry;
}
    1c06:	bd10      	pop	{r4, pc}
    1c08:	20000278 	.word	0x20000278

00001c0c <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    1c0c:	7803      	ldrb	r3, [r0, #0]
    1c0e:	07da      	lsls	r2, r3, #31
    1c10:	d404      	bmi.n	1c1c <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    1c12:	2301      	movs	r3, #1
    1c14:	425b      	negs	r3, r3
    1c16:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    1c18:	2300      	movs	r3, #0
    1c1a:	7183      	strb	r3, [r0, #6]
}
    1c1c:	4770      	bx	lr
    1c1e:	46c0      	nop			; (mov r8, r8)

00001c20 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    1c20:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    1c22:	4b04      	ldr	r3, [pc, #16]	; (1c34 <NWK_RouteNextHop+0x14>)
    1c24:	4798      	blx	r3
	if (entry) {
    1c26:	2800      	cmp	r0, #0
    1c28:	d001      	beq.n	1c2e <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    1c2a:	8880      	ldrh	r0, [r0, #4]
    1c2c:	e000      	b.n	1c30 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    1c2e:	4802      	ldr	r0, [pc, #8]	; (1c38 <NWK_RouteNextHop+0x18>)
}
    1c30:	bd08      	pop	{r3, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	00001b8d 	.word	0x00001b8d
    1c38:	0000ffff 	.word	0x0000ffff

00001c3c <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    1c3c:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    1c3e:	4b03      	ldr	r3, [pc, #12]	; (1c4c <nwkRouteRemove+0x10>)
    1c40:	4798      	blx	r3
	if (entry) {
    1c42:	2800      	cmp	r0, #0
    1c44:	d001      	beq.n	1c4a <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    1c46:	4b02      	ldr	r3, [pc, #8]	; (1c50 <nwkRouteRemove+0x14>)
    1c48:	4798      	blx	r3
	}
}
    1c4a:	bd08      	pop	{r3, pc}
    1c4c:	00001b8d 	.word	0x00001b8d
    1c50:	00001c0d 	.word	0x00001c0d

00001c54 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1c54:	b538      	push	{r3, r4, r5, lr}
    1c56:	1c04      	adds	r4, r0, #0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1c58:	7a42      	ldrb	r2, [r0, #9]
    1c5a:	7a85      	ldrb	r5, [r0, #10]
    1c5c:	022d      	lsls	r5, r5, #8
    1c5e:	4315      	orrs	r5, r2
    1c60:	b22b      	sxth	r3, r5
    1c62:	2b00      	cmp	r3, #0
    1c64:	da05      	bge.n	1c72 <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    1c66:	7b42      	ldrb	r2, [r0, #13]
    1c68:	7b83      	ldrb	r3, [r0, #14]
    1c6a:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    1c6c:	4313      	orrs	r3, r2
    1c6e:	429d      	cmp	r5, r3
    1c70:	d141      	bne.n	1cf6 <nwkRouteFrameReceived+0xa2>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    1c72:	7961      	ldrb	r1, [r4, #5]
    1c74:	79a2      	ldrb	r2, [r4, #6]
    1c76:	0212      	lsls	r2, r2, #8
    1c78:	430a      	orrs	r2, r1
    1c7a:	4b1f      	ldr	r3, [pc, #124]	; (1cf8 <nwkRouteFrameReceived+0xa4>)
    1c7c:	429a      	cmp	r2, r3
    1c7e:	d03a      	beq.n	1cf6 <nwkRouteFrameReceived+0xa2>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1c80:	7b62      	ldrb	r2, [r4, #13]
    1c82:	7ba0      	ldrb	r0, [r4, #14]
    1c84:	0200      	lsls	r0, r0, #8
    1c86:	4310      	orrs	r0, r2
    1c88:	2100      	movs	r1, #0
    1c8a:	4b1c      	ldr	r3, [pc, #112]	; (1cfc <nwkRouteFrameReceived+0xa8>)
    1c8c:	4798      	blx	r3

	if (entry) {
    1c8e:	2800      	cmp	r0, #0
    1c90:	d022      	beq.n	1cd8 <nwkRouteFrameReceived+0x84>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1c92:	79e1      	ldrb	r1, [r4, #7]
    1c94:	7a22      	ldrb	r2, [r4, #8]
    1c96:	0212      	lsls	r2, r2, #8
    1c98:	430a      	orrs	r2, r1
    1c9a:	2100      	movs	r1, #0
    1c9c:	4b16      	ldr	r3, [pc, #88]	; (1cf8 <nwkRouteFrameReceived+0xa4>)
    1c9e:	429a      	cmp	r2, r3
    1ca0:	d108      	bne.n	1cb4 <nwkRouteFrameReceived+0x60>
				nwkIb.addr == header->nwkDstAddr);
    1ca2:	7be2      	ldrb	r2, [r4, #15]
    1ca4:	7c21      	ldrb	r1, [r4, #16]
    1ca6:	0209      	lsls	r1, r1, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1ca8:	4b15      	ldr	r3, [pc, #84]	; (1d00 <nwkRouteFrameReceived+0xac>)
    1caa:	881b      	ldrh	r3, [r3, #0]
    1cac:	4311      	orrs	r1, r2
    1cae:	1a59      	subs	r1, r3, r1
    1cb0:	424b      	negs	r3, r1
    1cb2:	4159      	adcs	r1, r3
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    1cb4:	8883      	ldrh	r3, [r0, #4]
    1cb6:	42ab      	cmp	r3, r5
    1cb8:	d004      	beq.n	1cc4 <nwkRouteFrameReceived+0x70>
    1cba:	2385      	movs	r3, #133	; 0x85
    1cbc:	5ce2      	ldrb	r2, [r4, r3]
    1cbe:	79c3      	ldrb	r3, [r0, #7]
    1cc0:	429a      	cmp	r2, r3
    1cc2:	d801      	bhi.n	1cc8 <nwkRouteFrameReceived+0x74>
				entry->lqi) || discovery) {
    1cc4:	2900      	cmp	r1, #0
    1cc6:	d013      	beq.n	1cf0 <nwkRouteFrameReceived+0x9c>
			entry->nextHopAddr = header->macSrcAddr;
    1cc8:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1cca:	7803      	ldrb	r3, [r0, #0]
    1ccc:	220f      	movs	r2, #15
    1cce:	4013      	ands	r3, r2
    1cd0:	2230      	movs	r2, #48	; 0x30
    1cd2:	4313      	orrs	r3, r2
    1cd4:	7003      	strb	r3, [r0, #0]
    1cd6:	e00b      	b.n	1cf0 <nwkRouteFrameReceived+0x9c>
		}
	} else {
		entry = NWK_RouteNewEntry();
    1cd8:	4b0a      	ldr	r3, [pc, #40]	; (1d04 <nwkRouteFrameReceived+0xb0>)
    1cda:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    1cdc:	7b61      	ldrb	r1, [r4, #13]
    1cde:	7ba2      	ldrb	r2, [r4, #14]
    1ce0:	0212      	lsls	r2, r2, #8
    1ce2:	430a      	orrs	r2, r1
    1ce4:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    1ce6:	7a62      	ldrb	r2, [r4, #9]
    1ce8:	7aa3      	ldrb	r3, [r4, #10]
    1cea:	021b      	lsls	r3, r3, #8
    1cec:	4313      	orrs	r3, r2
    1cee:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    1cf0:	2385      	movs	r3, #133	; 0x85
    1cf2:	5ce3      	ldrb	r3, [r4, r3]
    1cf4:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    1cf6:	bd38      	pop	{r3, r4, r5, pc}
    1cf8:	0000ffff 	.word	0x0000ffff
    1cfc:	00001b8d 	.word	0x00001b8d
    1d00:	2000088c 	.word	0x2000088c
    1d04:	00001bc1 	.word	0x00001bc1

00001d08 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1d08:	b510      	push	{r4, lr}
    1d0a:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    1d0c:	7bc3      	ldrb	r3, [r0, #15]
    1d0e:	7c00      	ldrb	r0, [r0, #16]
    1d10:	0200      	lsls	r0, r0, #8
    1d12:	4318      	orrs	r0, r3
    1d14:	4b1b      	ldr	r3, [pc, #108]	; (1d84 <nwkRouteFrameSent+0x7c>)
    1d16:	4298      	cmp	r0, r3
    1d18:	d032      	beq.n	1d80 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    1d1a:	7ae1      	ldrb	r1, [r4, #11]
    1d1c:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    1d1e:	0fc9      	lsrs	r1, r1, #31
    1d20:	4b19      	ldr	r3, [pc, #100]	; (1d88 <nwkRouteFrameSent+0x80>)
    1d22:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    1d24:	2800      	cmp	r0, #0
    1d26:	d02b      	beq.n	1d80 <nwkRouteFrameSent+0x78>
    1d28:	7803      	ldrb	r3, [r0, #0]
    1d2a:	07da      	lsls	r2, r3, #31
    1d2c:	d428      	bmi.n	1d80 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    1d2e:	2385      	movs	r3, #133	; 0x85
    1d30:	5ce3      	ldrb	r3, [r4, r3]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d117      	bne.n	1d66 <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1d36:	7803      	ldrb	r3, [r0, #0]
    1d38:	220f      	movs	r2, #15
    1d3a:	4013      	ands	r3, r2
    1d3c:	2230      	movs	r2, #48	; 0x30
    1d3e:	4313      	orrs	r3, r2
    1d40:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    1d42:	7983      	ldrb	r3, [r0, #6]
    1d44:	3301      	adds	r3, #1
    1d46:	b2db      	uxtb	r3, r3
    1d48:	7183      	strb	r3, [r0, #6]
    1d4a:	2bff      	cmp	r3, #255	; 0xff
    1d4c:	d118      	bne.n	1d80 <nwkRouteFrameSent+0x78>
    1d4e:	490f      	ldr	r1, [pc, #60]	; (1d8c <nwkRouteFrameSent+0x84>)
    1d50:	1d8b      	adds	r3, r1, #6
    1d52:	4a0f      	ldr	r2, [pc, #60]	; (1d90 <nwkRouteFrameSent+0x88>)
    1d54:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1d56:	781a      	ldrb	r2, [r3, #0]
    1d58:	0852      	lsrs	r2, r2, #1
    1d5a:	3201      	adds	r2, #1
    1d5c:	701a      	strb	r2, [r3, #0]
    1d5e:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    1d60:	428b      	cmp	r3, r1
    1d62:	d1f8      	bne.n	1d56 <nwkRouteFrameSent+0x4e>
    1d64:	e00c      	b.n	1d80 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    1d66:	7802      	ldrb	r2, [r0, #0]
    1d68:	0913      	lsrs	r3, r2, #4
    1d6a:	330f      	adds	r3, #15
    1d6c:	210f      	movs	r1, #15
    1d6e:	400b      	ands	r3, r1
    1d70:	011c      	lsls	r4, r3, #4
    1d72:	400a      	ands	r2, r1
    1d74:	4322      	orrs	r2, r4
    1d76:	7002      	strb	r2, [r0, #0]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d101      	bne.n	1d80 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    1d7c:	4b05      	ldr	r3, [pc, #20]	; (1d94 <nwkRouteFrameSent+0x8c>)
    1d7e:	4798      	blx	r3
		}
	}
}
    1d80:	bd10      	pop	{r4, pc}
    1d82:	46c0      	nop			; (mov r8, r8)
    1d84:	0000ffff 	.word	0x0000ffff
    1d88:	00001b8d 	.word	0x00001b8d
    1d8c:	20000278 	.word	0x20000278
    1d90:	00000326 	.word	0x00000326
    1d94:	00001c0d 	.word	0x00001c0d

00001d98 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1d98:	b510      	push	{r4, lr}
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    1d9a:	7bc1      	ldrb	r1, [r0, #15]
    1d9c:	7c03      	ldrb	r3, [r0, #16]
    1d9e:	021b      	lsls	r3, r3, #8
    1da0:	430b      	orrs	r3, r1
    1da2:	4a0d      	ldr	r2, [pc, #52]	; (1dd8 <nwkRoutePrepareTx+0x40>)
    1da4:	4293      	cmp	r3, r2
    1da6:	d104      	bne.n	1db2 <nwkRoutePrepareTx+0x1a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    1da8:	2301      	movs	r3, #1
    1daa:	425b      	negs	r3, r3
    1dac:	71c3      	strb	r3, [r0, #7]
    1dae:	7203      	strb	r3, [r0, #8]
    1db0:	e010      	b.n	1dd4 <nwkRoutePrepareTx+0x3c>
	} else if (header->nwkFcf.linkLocal) {
    1db2:	7ac2      	ldrb	r2, [r0, #11]
    1db4:	0751      	lsls	r1, r2, #29
    1db6:	d503      	bpl.n	1dc0 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    1db8:	71c3      	strb	r3, [r0, #7]
    1dba:	0a1b      	lsrs	r3, r3, #8
    1dbc:	7203      	strb	r3, [r0, #8]
    1dbe:	e009      	b.n	1dd4 <nwkRoutePrepareTx+0x3c>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    1dc0:	1c84      	adds	r4, r0, #2
    1dc2:	7ac1      	ldrb	r1, [r0, #11]
    1dc4:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    1dc6:	0fc9      	lsrs	r1, r1, #31
    1dc8:	1c18      	adds	r0, r3, #0
    1dca:	4b04      	ldr	r3, [pc, #16]	; (1ddc <nwkRoutePrepareTx+0x44>)
    1dcc:	4798      	blx	r3
    1dce:	7160      	strb	r0, [r4, #5]
    1dd0:	0a00      	lsrs	r0, r0, #8
    1dd2:	71a0      	strb	r0, [r4, #6]
			nwkRouteDiscoveryRequest(frame);
		}

  #endif
	}
}
    1dd4:	bd10      	pop	{r4, pc}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	0000ffff 	.word	0x0000ffff
    1ddc:	00001c21 	.word	0x00001c21

00001de0 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    1de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1de2:	4647      	mov	r7, r8
    1de4:	b480      	push	{r7}
    1de6:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    1de8:	7bc2      	ldrb	r2, [r0, #15]
    1dea:	7c06      	ldrb	r6, [r0, #16]
    1dec:	0236      	lsls	r6, r6, #8
    1dee:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    1df0:	7ac7      	ldrb	r7, [r0, #11]
    1df2:	073f      	lsls	r7, r7, #28
    1df4:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    1df6:	b2f9      	uxtb	r1, r7
    1df8:	1c30      	adds	r0, r6, #0
    1dfa:	4b28      	ldr	r3, [pc, #160]	; (1e9c <nwkRouteFrame+0xbc>)
    1dfc:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    1dfe:	4b28      	ldr	r3, [pc, #160]	; (1ea0 <nwkRouteFrame+0xc0>)
    1e00:	4298      	cmp	r0, r3
    1e02:	d00f      	beq.n	1e24 <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    1e04:	2200      	movs	r2, #0
    1e06:	2389      	movs	r3, #137	; 0x89
    1e08:	54e2      	strb	r2, [r4, r3]
    1e0a:	238a      	movs	r3, #138	; 0x8a
    1e0c:	54e2      	strb	r2, [r4, r3]
    1e0e:	238b      	movs	r3, #139	; 0x8b
    1e10:	54e2      	strb	r2, [r4, r3]
    1e12:	238c      	movs	r3, #140	; 0x8c
    1e14:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    1e16:	2202      	movs	r2, #2
    1e18:	2388      	movs	r3, #136	; 0x88
    1e1a:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    1e1c:	1c20      	adds	r0, r4, #0
    1e1e:	4b21      	ldr	r3, [pc, #132]	; (1ea4 <nwkRouteFrame+0xc4>)
    1e20:	4798      	blx	r3
    1e22:	e038      	b.n	1e96 <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    1e24:	7b62      	ldrb	r2, [r4, #13]
    1e26:	7ba3      	ldrb	r3, [r4, #14]
    1e28:	021b      	lsls	r3, r3, #8
    1e2a:	4313      	orrs	r3, r2
    1e2c:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    1e2e:	4b1e      	ldr	r3, [pc, #120]	; (1ea8 <nwkRouteFrame+0xc8>)
    1e30:	4798      	blx	r3
    1e32:	1e05      	subs	r5, r0, #0
    1e34:	d02c      	beq.n	1e90 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    1e36:	4b1d      	ldr	r3, [pc, #116]	; (1eac <nwkRouteFrame+0xcc>)
    1e38:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    1e3a:	786b      	ldrb	r3, [r5, #1]
    1e3c:	3306      	adds	r3, #6
    1e3e:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    1e40:	2200      	movs	r2, #0
    1e42:	2389      	movs	r3, #137	; 0x89
    1e44:	54ea      	strb	r2, [r5, r3]
    1e46:	238a      	movs	r3, #138	; 0x8a
    1e48:	54ea      	strb	r2, [r5, r3]
    1e4a:	238b      	movs	r3, #139	; 0x8b
    1e4c:	54ea      	strb	r2, [r5, r3]
    1e4e:	238c      	movs	r3, #140	; 0x8c
    1e50:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    1e52:	21ff      	movs	r1, #255	; 0xff
    1e54:	4643      	mov	r3, r8
    1e56:	4019      	ands	r1, r3
    1e58:	73e9      	strb	r1, [r5, #15]
    1e5a:	0a1a      	lsrs	r2, r3, #8
    1e5c:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    1e5e:	2381      	movs	r3, #129	; 0x81
    1e60:	5ce8      	ldrb	r0, [r5, r3]
    1e62:	2382      	movs	r3, #130	; 0x82
    1e64:	5ceb      	ldrb	r3, [r5, r3]
    1e66:	021b      	lsls	r3, r3, #8
    1e68:	4303      	orrs	r3, r0
    1e6a:	2083      	movs	r0, #131	; 0x83
    1e6c:	5c28      	ldrb	r0, [r5, r0]
    1e6e:	0400      	lsls	r0, r0, #16
    1e70:	4303      	orrs	r3, r0
    1e72:	2084      	movs	r0, #132	; 0x84
    1e74:	5c28      	ldrb	r0, [r5, r0]
    1e76:	0600      	lsls	r0, r0, #24
    1e78:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    1e7a:	2001      	movs	r0, #1
    1e7c:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    1e7e:	7059      	strb	r1, [r3, #1]
    1e80:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    1e82:	70de      	strb	r6, [r3, #3]
    1e84:	0a36      	lsrs	r6, r6, #8
    1e86:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    1e88:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    1e8a:	1c28      	adds	r0, r5, #0
    1e8c:	4b05      	ldr	r3, [pc, #20]	; (1ea4 <nwkRouteFrame+0xc4>)
    1e8e:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    1e90:	1c20      	adds	r0, r4, #0
    1e92:	4b07      	ldr	r3, [pc, #28]	; (1eb0 <nwkRouteFrame+0xd0>)
    1e94:	4798      	blx	r3
	}
}
    1e96:	bc04      	pop	{r2}
    1e98:	4690      	mov	r8, r2
    1e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e9c:	00001c21 	.word	0x00001c21
    1ea0:	0000ffff 	.word	0x0000ffff
    1ea4:	00002709 	.word	0x00002709
    1ea8:	00001a81 	.word	0x00001a81
    1eac:	00001b41 	.word	0x00001b41
    1eb0:	00001af1 	.word	0x00001af1

00001eb4 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    1eb4:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1eb6:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    1eb8:	7b03      	ldrb	r3, [r0, #12]
		return false;
    1eba:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    1ebc:	2b06      	cmp	r3, #6
    1ebe:	d107      	bne.n	1ed0 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    1ec0:	78d3      	ldrb	r3, [r2, #3]
    1ec2:	7910      	ldrb	r0, [r2, #4]
    1ec4:	0200      	lsls	r0, r0, #8
    1ec6:	4318      	orrs	r0, r3
    1ec8:	7951      	ldrb	r1, [r2, #5]
    1eca:	4b02      	ldr	r3, [pc, #8]	; (1ed4 <nwkRouteErrorReceived+0x20>)
    1ecc:	4798      	blx	r3

	return true;
    1ece:	2001      	movs	r0, #1
}
    1ed0:	bd08      	pop	{r3, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	00001c3d 	.word	0x00001c3d

00001ed8 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    1ed8:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    1eda:	7b02      	ldrb	r2, [r0, #12]
		return false;
    1edc:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    1ede:	2a00      	cmp	r2, #0
    1ee0:	d00f      	beq.n	1f02 <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    1ee2:	6882      	ldr	r2, [r0, #8]
    1ee4:	7813      	ldrb	r3, [r2, #0]
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d002      	beq.n	1ef0 <nwkRxSeriveDataInd+0x18>
    1eea:	2b01      	cmp	r3, #1
    1eec:	d004      	beq.n	1ef8 <nwkRxSeriveDataInd+0x20>
    1eee:	e007      	b.n	1f00 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    1ef0:	4b05      	ldr	r3, [pc, #20]	; (1f08 <nwkRxSeriveDataInd+0x30>)
    1ef2:	4798      	blx	r3
    1ef4:	1c03      	adds	r3, r0, #0
    1ef6:	e004      	b.n	1f02 <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    1ef8:	4b04      	ldr	r3, [pc, #16]	; (1f0c <nwkRxSeriveDataInd+0x34>)
    1efa:	4798      	blx	r3
    1efc:	1c03      	adds	r3, r0, #0
    1efe:	e000      	b.n	1f02 <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    1f00:	2300      	movs	r3, #0
	}
}
    1f02:	1c18      	adds	r0, r3, #0
    1f04:	bd08      	pop	{r3, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	00002855 	.word	0x00002855
    1f0c:	00001eb5 	.word	0x00001eb5

00001f10 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1f10:	b538      	push	{r3, r4, r5, lr}
    1f12:	4909      	ldr	r1, [pc, #36]	; (1f38 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    1f14:	1d0b      	adds	r3, r1, #4
    1f16:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    1f18:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    1f1a:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    1f1c:	781a      	ldrb	r2, [r3, #0]
    1f1e:	2a00      	cmp	r2, #0
    1f20:	d002      	beq.n	1f28 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    1f22:	3a01      	subs	r2, #1
    1f24:	701a      	strb	r2, [r3, #0]
			restart = true;
    1f26:	1c2c      	adds	r4, r5, #0
    1f28:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1f2a:	428b      	cmp	r3, r1
    1f2c:	d1f6      	bne.n	1f1c <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    1f2e:	2c00      	cmp	r4, #0
    1f30:	d001      	beq.n	1f36 <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    1f32:	4b02      	ldr	r3, [pc, #8]	; (1f3c <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    1f34:	4798      	blx	r3
	}
}
    1f36:	bd38      	pop	{r3, r4, r5, pc}
    1f38:	20000598 	.word	0x20000598
    1f3c:	00002db9 	.word	0x00002db9

00001f40 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    1f40:	b508      	push	{r3, lr}
    1f42:	490a      	ldr	r1, [pc, #40]	; (1f6c <nwkRxInit+0x2c>)
    1f44:	1d0b      	adds	r3, r1, #4
    1f46:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    1f48:	2200      	movs	r2, #0
    1f4a:	701a      	strb	r2, [r3, #0]
    1f4c:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1f4e:	428b      	cmp	r3, r1
    1f50:	d1fb      	bne.n	1f4a <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1f52:	4b07      	ldr	r3, [pc, #28]	; (1f70 <nwkRxInit+0x30>)
    1f54:	2264      	movs	r2, #100	; 0x64
    1f56:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1f58:	2200      	movs	r2, #0
    1f5a:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    1f5c:	4a05      	ldr	r2, [pc, #20]	; (1f74 <nwkRxInit+0x34>)
    1f5e:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    1f60:	2000      	movs	r0, #0
    1f62:	4905      	ldr	r1, [pc, #20]	; (1f78 <nwkRxInit+0x38>)
    1f64:	4b05      	ldr	r3, [pc, #20]	; (1f7c <nwkRxInit+0x3c>)
    1f66:	4798      	blx	r3
}
    1f68:	bd08      	pop	{r3, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	20000598 	.word	0x20000598
    1f70:	200005d8 	.word	0x200005d8
    1f74:	00001f11 	.word	0x00001f11
    1f78:	00001ed9 	.word	0x00001ed9
    1f7c:	00001875 	.word	0x00001875

00001f80 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    1f80:	b510      	push	{r4, lr}
    1f82:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    1f84:	6803      	ldr	r3, [r0, #0]
    1f86:	785a      	ldrb	r2, [r3, #1]
    1f88:	2a88      	cmp	r2, #136	; 0x88
    1f8a:	d11a      	bne.n	1fc2 <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    1f8c:	781b      	ldrb	r3, [r3, #0]
    1f8e:	2220      	movs	r2, #32
    1f90:	4393      	bics	r3, r2
    1f92:	2b41      	cmp	r3, #65	; 0x41
    1f94:	d115      	bne.n	1fc2 <PHY_DataInd+0x42>
    1f96:	7903      	ldrb	r3, [r0, #4]
    1f98:	2b0f      	cmp	r3, #15
    1f9a:	d912      	bls.n	1fc2 <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    1f9c:	4b09      	ldr	r3, [pc, #36]	; (1fc4 <PHY_DataInd+0x44>)
    1f9e:	4798      	blx	r3
    1fa0:	2800      	cmp	r0, #0
    1fa2:	d00e      	beq.n	1fc2 <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    1fa4:	2320      	movs	r3, #32
    1fa6:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    1fa8:	7923      	ldrb	r3, [r4, #4]
    1faa:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    1fac:	7962      	ldrb	r2, [r4, #5]
    1fae:	2385      	movs	r3, #133	; 0x85
    1fb0:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    1fb2:	79a2      	ldrb	r2, [r4, #6]
    1fb4:	2386      	movs	r3, #134	; 0x86
    1fb6:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    1fb8:	3002      	adds	r0, #2
    1fba:	7922      	ldrb	r2, [r4, #4]
    1fbc:	6821      	ldr	r1, [r4, #0]
    1fbe:	4b02      	ldr	r3, [pc, #8]	; (1fc8 <PHY_DataInd+0x48>)
    1fc0:	4798      	blx	r3
}
    1fc2:	bd10      	pop	{r4, pc}
    1fc4:	00001a81 	.word	0x00001a81
    1fc8:	000040a1 	.word	0x000040a1

00001fcc <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    1fcc:	2900      	cmp	r1, #0
    1fce:	d002      	beq.n	1fd6 <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    1fd0:	2322      	movs	r3, #34	; 0x22
    1fd2:	7003      	strb	r3, [r0, #0]
    1fd4:	e001      	b.n	1fda <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    1fd6:	2324      	movs	r3, #36	; 0x24
    1fd8:	7003      	strb	r3, [r0, #0]
	}
}
    1fda:	4770      	bx	lr

00001fdc <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fde:	464f      	mov	r7, r9
    1fe0:	4646      	mov	r6, r8
    1fe2:	b4c0      	push	{r6, r7}
    1fe4:	b085      	sub	sp, #20
	NwkFrame_t *frame = NULL;
    1fe6:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    1fe8:	4dd3      	ldr	r5, [pc, #844]	; (2338 <STACK_SIZE+0x338>)
    1fea:	48d4      	ldr	r0, [pc, #848]	; (233c <STACK_SIZE+0x33c>)
    1fec:	4681      	mov	r9, r0
    1fee:	203c      	movs	r0, #60	; 0x3c
    1ff0:	4481      	add	r9, r0
    1ff2:	e19a      	b.n	232a <STACK_SIZE+0x32a>
		switch (frame->state) {
    1ff4:	7823      	ldrb	r3, [r4, #0]
    1ff6:	3b20      	subs	r3, #32
    1ff8:	b2da      	uxtb	r2, r3
    1ffa:	2a04      	cmp	r2, #4
    1ffc:	d900      	bls.n	2000 <STACK_SIZE>
    1ffe:	e194      	b.n	232a <STACK_SIZE+0x32a>
    2000:	0093      	lsls	r3, r2, #2
    2002:	4acf      	ldr	r2, [pc, #828]	; (2340 <STACK_SIZE+0x340>)
    2004:	58d3      	ldr	r3, [r2, r3]
    2006:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2008:	2324      	movs	r3, #36	; 0x24
    200a:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    200c:	7ae3      	ldrb	r3, [r4, #11]
    200e:	0719      	lsls	r1, r3, #28
    2010:	d500      	bpl.n	2014 <STACK_SIZE+0x14>
    2012:	e18a      	b.n	232a <STACK_SIZE+0x32a>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2014:	7961      	ldrb	r1, [r4, #5]
    2016:	79a2      	ldrb	r2, [r4, #6]
    2018:	0212      	lsls	r2, r2, #8
    201a:	430a      	orrs	r2, r1
    201c:	4bc9      	ldr	r3, [pc, #804]	; (2344 <STACK_SIZE+0x344>)
    201e:	429a      	cmp	r2, r3
    2020:	d114      	bne.n	204c <STACK_SIZE+0x4c>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2022:	7be2      	ldrb	r2, [r4, #15]
    2024:	7c23      	ldrb	r3, [r4, #16]
    2026:	021b      	lsls	r3, r3, #8
    2028:	4313      	orrs	r3, r2
    202a:	4ac7      	ldr	r2, [pc, #796]	; (2348 <STACK_SIZE+0x348>)
    202c:	8812      	ldrh	r2, [r2, #0]
    202e:	429a      	cmp	r2, r3
    2030:	d003      	beq.n	203a <STACK_SIZE+0x3a>
    2032:	4ac4      	ldr	r2, [pc, #784]	; (2344 <STACK_SIZE+0x344>)
    2034:	4293      	cmp	r3, r2
    2036:	d000      	beq.n	203a <STACK_SIZE+0x3a>
    2038:	e177      	b.n	232a <STACK_SIZE+0x32a>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    203a:	7ae3      	ldrb	r3, [r4, #11]
    203c:	079a      	lsls	r2, r3, #30
    203e:	d502      	bpl.n	2046 <STACK_SIZE+0x46>
				frame->state = NWK_RX_STATE_DECRYPT;
    2040:	2321      	movs	r3, #33	; 0x21
    2042:	7023      	strb	r3, [r4, #0]
    2044:	e171      	b.n	232a <STACK_SIZE+0x32a>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2046:	2322      	movs	r3, #34	; 0x22
    2048:	7023      	strb	r3, [r4, #0]
    204a:	e16e      	b.n	232a <STACK_SIZE+0x32a>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    204c:	7be1      	ldrb	r1, [r4, #15]
    204e:	7c22      	ldrb	r2, [r4, #16]
    2050:	0212      	lsls	r2, r2, #8
    2052:	430a      	orrs	r2, r1
    2054:	4bbb      	ldr	r3, [pc, #748]	; (2344 <STACK_SIZE+0x344>)
    2056:	429a      	cmp	r2, r3
    2058:	d103      	bne.n	2062 <STACK_SIZE+0x62>
			header->nwkFcf.ackRequest) {
    205a:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    205c:	07de      	lsls	r6, r3, #31
    205e:	d500      	bpl.n	2062 <STACK_SIZE+0x62>
    2060:	e163      	b.n	232a <STACK_SIZE+0x32a>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    2062:	7b61      	ldrb	r1, [r4, #13]
    2064:	7ba3      	ldrb	r3, [r4, #14]
    2066:	021b      	lsls	r3, r3, #8
    2068:	4ab7      	ldr	r2, [pc, #732]	; (2348 <STACK_SIZE+0x348>)
    206a:	8812      	ldrh	r2, [r2, #0]
    206c:	430b      	orrs	r3, r1
    206e:	429a      	cmp	r2, r3
    2070:	d100      	bne.n	2074 <STACK_SIZE+0x74>
    2072:	e15a      	b.n	232a <STACK_SIZE+0x32a>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    2074:	1c20      	adds	r0, r4, #0
    2076:	4bb5      	ldr	r3, [pc, #724]	; (234c <STACK_SIZE+0x34c>)
    2078:	4798      	blx	r3
    207a:	4bb0      	ldr	r3, [pc, #704]	; (233c <STACK_SIZE+0x33c>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    207c:	2700      	movs	r7, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    207e:	1ca1      	adds	r1, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2080:	1c18      	adds	r0, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2082:	791a      	ldrb	r2, [r3, #4]
    2084:	2a00      	cmp	r2, #0
    2086:	d037      	beq.n	20f8 <STACK_SIZE+0xf8>
    2088:	7ace      	ldrb	r6, [r1, #11]
    208a:	7b0a      	ldrb	r2, [r1, #12]
    208c:	0212      	lsls	r2, r2, #8
    208e:	4690      	mov	r8, r2
    2090:	881a      	ldrh	r2, [r3, #0]
    2092:	4694      	mov	ip, r2
    2094:	4642      	mov	r2, r8
    2096:	4316      	orrs	r6, r2
    2098:	45b4      	cmp	ip, r6
    209a:	d12e      	bne.n	20fa <STACK_SIZE+0xfa>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    209c:	7b22      	ldrb	r2, [r4, #12]
    209e:	789b      	ldrb	r3, [r3, #2]
    20a0:	1a9b      	subs	r3, r3, r2
    20a2:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    20a4:	2b07      	cmp	r3, #7
    20a6:	d81c      	bhi.n	20e2 <STACK_SIZE+0xe2>
				if (entry->mask & (1 << diff)) {
    20a8:	78c2      	ldrb	r2, [r0, #3]
    20aa:	1c11      	adds	r1, r2, #0
    20ac:	4119      	asrs	r1, r3
    20ae:	07ce      	lsls	r6, r1, #31
    20b0:	d512      	bpl.n	20d8 <STACK_SIZE+0xd8>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    20b2:	79e1      	ldrb	r1, [r4, #7]
    20b4:	7a23      	ldrb	r3, [r4, #8]
    20b6:	021b      	lsls	r3, r3, #8
    20b8:	4aa3      	ldr	r2, [pc, #652]	; (2348 <STACK_SIZE+0x348>)
    20ba:	8812      	ldrh	r2, [r2, #0]
    20bc:	430b      	orrs	r3, r1
    20be:	429a      	cmp	r2, r3
    20c0:	d000      	beq.n	20c4 <STACK_SIZE+0xc4>
    20c2:	e132      	b.n	232a <STACK_SIZE+0x32a>
						nwkRouteRemove(
    20c4:	7be2      	ldrb	r2, [r4, #15]
    20c6:	7c20      	ldrb	r0, [r4, #16]
    20c8:	0200      	lsls	r0, r0, #8
    20ca:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    20cc:	7ae1      	ldrb	r1, [r4, #11]
    20ce:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    20d0:	0fc9      	lsrs	r1, r1, #31
    20d2:	4b9f      	ldr	r3, [pc, #636]	; (2350 <STACK_SIZE+0x350>)
    20d4:	4798      	blx	r3
    20d6:	e128      	b.n	232a <STACK_SIZE+0x32a>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    20d8:	2101      	movs	r1, #1
    20da:	4099      	lsls	r1, r3
    20dc:	430a      	orrs	r2, r1
    20de:	70c2      	strb	r2, [r0, #3]
    20e0:	e14e      	b.n	2380 <STACK_SIZE+0x380>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    20e2:	7082      	strb	r2, [r0, #2]
				entry->mask = (entry->mask << shift) | 1;
    20e4:	78c2      	ldrb	r2, [r0, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    20e6:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    20e8:	b2db      	uxtb	r3, r3
    20ea:	409a      	lsls	r2, r3
    20ec:	2301      	movs	r3, #1
    20ee:	4313      	orrs	r3, r2
    20f0:	70c3      	strb	r3, [r0, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    20f2:	231f      	movs	r3, #31
    20f4:	7103      	strb	r3, [r0, #4]
    20f6:	e143      	b.n	2380 <STACK_SIZE+0x380>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    20f8:	1c1f      	adds	r7, r3, #0
    20fa:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    20fc:	454b      	cmp	r3, r9
    20fe:	d1bf      	bne.n	2080 <STACK_SIZE+0x80>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2100:	2f00      	cmp	r7, #0
    2102:	d100      	bne.n	2106 <STACK_SIZE+0x106>
    2104:	e111      	b.n	232a <STACK_SIZE+0x32a>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    2106:	7b61      	ldrb	r1, [r4, #13]
    2108:	7ba2      	ldrb	r2, [r4, #14]
    210a:	0212      	lsls	r2, r2, #8
    210c:	430a      	orrs	r2, r1
    210e:	803a      	strh	r2, [r7, #0]
	freeEntry->seq = header->nwkSeq;
    2110:	7b23      	ldrb	r3, [r4, #12]
    2112:	70bb      	strb	r3, [r7, #2]
	freeEntry->mask = 1;
    2114:	2301      	movs	r3, #1
    2116:	70fb      	strb	r3, [r7, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2118:	231f      	movs	r3, #31
    211a:	713b      	strb	r3, [r7, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    211c:	488d      	ldr	r0, [pc, #564]	; (2354 <STACK_SIZE+0x354>)
    211e:	4b8e      	ldr	r3, [pc, #568]	; (2358 <STACK_SIZE+0x358>)
    2120:	4798      	blx	r3
    2122:	e12d      	b.n	2380 <STACK_SIZE+0x380>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2124:	4b88      	ldr	r3, [pc, #544]	; (2348 <STACK_SIZE+0x348>)
    2126:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    2128:	7be0      	ldrb	r0, [r4, #15]
    212a:	7c23      	ldrb	r3, [r4, #16]
    212c:	021b      	lsls	r3, r3, #8
    212e:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2130:	429a      	cmp	r2, r3
    2132:	d010      	beq.n	2156 <STACK_SIZE+0x156>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    2134:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    2136:	074f      	lsls	r7, r1, #29
    2138:	d40a      	bmi.n	2150 <STACK_SIZE+0x150>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    213a:	1c20      	adds	r0, r4, #0
    213c:	4b87      	ldr	r3, [pc, #540]	; (235c <STACK_SIZE+0x35c>)
    213e:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2140:	4b81      	ldr	r3, [pc, #516]	; (2348 <STACK_SIZE+0x348>)
    2142:	881a      	ldrh	r2, [r3, #0]
    2144:	7be0      	ldrb	r0, [r4, #15]
    2146:	7c23      	ldrb	r3, [r4, #16]
    2148:	021b      	lsls	r3, r3, #8
    214a:	4303      	orrs	r3, r0
    214c:	429a      	cmp	r2, r3
    214e:	d002      	beq.n	2156 <STACK_SIZE+0x156>
    2150:	497c      	ldr	r1, [pc, #496]	; (2344 <STACK_SIZE+0x344>)
    2152:	428b      	cmp	r3, r1
    2154:	d108      	bne.n	2168 <STACK_SIZE+0x168>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2156:	7ae3      	ldrb	r3, [r4, #11]
    2158:	0798      	lsls	r0, r3, #30
    215a:	d502      	bpl.n	2162 <STACK_SIZE+0x162>
				frame->state = NWK_RX_STATE_DECRYPT;
    215c:	2321      	movs	r3, #33	; 0x21
    215e:	7023      	strb	r3, [r4, #0]
    2160:	e0e3      	b.n	232a <STACK_SIZE+0x32a>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2162:	2322      	movs	r3, #34	; 0x22
    2164:	7023      	strb	r3, [r4, #0]
    2166:	e0e0      	b.n	232a <STACK_SIZE+0x32a>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2168:	79e1      	ldrb	r1, [r4, #7]
    216a:	7a23      	ldrb	r3, [r4, #8]
    216c:	021b      	lsls	r3, r3, #8
    216e:	430b      	orrs	r3, r1
    2170:	429a      	cmp	r2, r3
    2172:	d000      	beq.n	2176 <STACK_SIZE+0x176>
    2174:	e0d9      	b.n	232a <STACK_SIZE+0x32a>
			frame->state = NWK_RX_STATE_ROUTE;
    2176:	2323      	movs	r3, #35	; 0x23
    2178:	7023      	strb	r3, [r4, #0]
    217a:	e0d6      	b.n	232a <STACK_SIZE+0x32a>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    217c:	1c20      	adds	r0, r4, #0
    217e:	2100      	movs	r1, #0
    2180:	4b77      	ldr	r3, [pc, #476]	; (2360 <STACK_SIZE+0x360>)
    2182:	4798      	blx	r3
		}
		break;
    2184:	e0d1      	b.n	232a <STACK_SIZE+0x32a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    2186:	2200      	movs	r2, #0
    2188:	4b76      	ldr	r3, [pc, #472]	; (2364 <STACK_SIZE+0x364>)
    218a:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    218c:	7c61      	ldrb	r1, [r4, #17]
    218e:	0909      	lsrs	r1, r1, #4
    2190:	b2ca      	uxtb	r2, r1
    2192:	3202      	adds	r2, #2
    2194:	0092      	lsls	r2, r2, #2
    2196:	4b6c      	ldr	r3, [pc, #432]	; (2348 <STACK_SIZE+0x348>)
    2198:	58d2      	ldr	r2, [r2, r3]
    219a:	2a00      	cmp	r2, #0
    219c:	d05f      	beq.n	225e <STACK_SIZE+0x25e>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    219e:	1ca3      	adds	r3, r4, #2
    21a0:	7b67      	ldrb	r7, [r4, #13]
    21a2:	7ba0      	ldrb	r0, [r4, #14]
    21a4:	0200      	lsls	r0, r0, #8
    21a6:	4338      	orrs	r0, r7
    21a8:	4680      	mov	r8, r0
    21aa:	466e      	mov	r6, sp
    21ac:	8030      	strh	r0, [r6, #0]
	ind.dstAddr = header->nwkDstAddr;
    21ae:	7be0      	ldrb	r0, [r4, #15]
    21b0:	7c26      	ldrb	r6, [r4, #16]
    21b2:	0236      	lsls	r6, r6, #8
    21b4:	1c37      	adds	r7, r6, #0
    21b6:	4307      	orrs	r7, r0
    21b8:	4668      	mov	r0, sp
    21ba:	8047      	strh	r7, [r0, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    21bc:	7c66      	ldrb	r6, [r4, #17]
    21be:	0736      	lsls	r6, r6, #28
    21c0:	0f36      	lsrs	r6, r6, #28
    21c2:	7106      	strb	r6, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    21c4:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    21c6:	2181      	movs	r1, #129	; 0x81
    21c8:	5c61      	ldrb	r1, [r4, r1]
    21ca:	2082      	movs	r0, #130	; 0x82
    21cc:	5c26      	ldrb	r6, [r4, r0]
    21ce:	0236      	lsls	r6, r6, #8
    21d0:	4331      	orrs	r1, r6
    21d2:	2083      	movs	r0, #131	; 0x83
    21d4:	5c26      	ldrb	r6, [r4, r0]
    21d6:	0436      	lsls	r6, r6, #16
    21d8:	4331      	orrs	r1, r6
    21da:	2084      	movs	r0, #132	; 0x84
    21dc:	5c26      	ldrb	r6, [r4, r0]
    21de:	0636      	lsls	r6, r6, #24
    21e0:	4331      	orrs	r1, r6
    21e2:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    21e4:	1a59      	subs	r1, r3, r1
    21e6:	468c      	mov	ip, r1
    21e8:	7861      	ldrb	r1, [r4, #1]
    21ea:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    21ec:	4668      	mov	r0, sp
    21ee:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    21f0:	2185      	movs	r1, #133	; 0x85
    21f2:	5c61      	ldrb	r1, [r4, r1]
    21f4:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    21f6:	2186      	movs	r1, #134	; 0x86
    21f8:	5c61      	ldrb	r1, [r4, r1]
    21fa:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    21fc:	7ae3      	ldrb	r3, [r4, #11]
    21fe:	07d9      	lsls	r1, r3, #31
    2200:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2202:	2602      	movs	r6, #2
    2204:	4033      	ands	r3, r6
    2206:	430b      	orrs	r3, r1
    2208:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    220a:	7ae1      	ldrb	r1, [r4, #11]
    220c:	0749      	lsls	r1, r1, #29
    220e:	0fc9      	lsrs	r1, r1, #31
    2210:	0149      	lsls	r1, r1, #5
    2212:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2214:	7ae1      	ldrb	r1, [r4, #11]
    2216:	0709      	lsls	r1, r1, #28
    2218:	0fc9      	lsrs	r1, r1, #31
    221a:	0189      	lsls	r1, r1, #6
    221c:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    221e:	4952      	ldr	r1, [pc, #328]	; (2368 <STACK_SIZE+0x368>)
    2220:	187f      	adds	r7, r7, r1
    2222:	4279      	negs	r1, r7
    2224:	414f      	adcs	r7, r1
    2226:	00bf      	lsls	r7, r7, #2
    2228:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    222a:	7a67      	ldrb	r7, [r4, #9]
    222c:	7aa1      	ldrb	r1, [r4, #10]
    222e:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2230:	4339      	orrs	r1, r7
    2232:	4646      	mov	r6, r8
    2234:	1a70      	subs	r0, r6, r1
    2236:	4241      	negs	r1, r0
    2238:	4148      	adcs	r0, r1
    223a:	00c0      	lsls	r0, r0, #3
    223c:	4303      	orrs	r3, r0
    223e:	466f      	mov	r7, sp
    2240:	71bb      	strb	r3, [r7, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2242:	7960      	ldrb	r0, [r4, #5]
    2244:	79a1      	ldrb	r1, [r4, #6]
    2246:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2248:	4301      	orrs	r1, r0
    224a:	4847      	ldr	r0, [pc, #284]	; (2368 <STACK_SIZE+0x368>)
    224c:	1809      	adds	r1, r1, r0
    224e:	4248      	negs	r0, r1
    2250:	4141      	adcs	r1, r0
    2252:	0109      	lsls	r1, r1, #4
    2254:	430b      	orrs	r3, r1
    2256:	71bb      	strb	r3, [r7, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2258:	4668      	mov	r0, sp
    225a:	4790      	blx	r2
    225c:	e000      	b.n	2260 <STACK_SIZE+0x260>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    225e:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2260:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    2262:	07db      	lsls	r3, r3, #31
    2264:	17db      	asrs	r3, r3, #31
    2266:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2268:	79e3      	ldrb	r3, [r4, #7]
    226a:	7a22      	ldrb	r2, [r4, #8]
    226c:	0212      	lsls	r2, r2, #8
    226e:	431a      	orrs	r2, r3
    2270:	4b34      	ldr	r3, [pc, #208]	; (2344 <STACK_SIZE+0x344>)
    2272:	429a      	cmp	r2, r3
    2274:	d10b      	bne.n	228e <STACK_SIZE+0x28e>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2276:	7be1      	ldrb	r1, [r4, #15]
    2278:	7c23      	ldrb	r3, [r4, #16]
    227a:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    227c:	4a32      	ldr	r2, [pc, #200]	; (2348 <STACK_SIZE+0x348>)
    227e:	8812      	ldrh	r2, [r2, #0]
    2280:	430b      	orrs	r3, r1
    2282:	429a      	cmp	r2, r3
    2284:	d103      	bne.n	228e <STACK_SIZE+0x28e>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    2286:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    2288:	0719      	lsls	r1, r3, #28
    228a:	d400      	bmi.n	228e <STACK_SIZE+0x28e>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    228c:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    228e:	7963      	ldrb	r3, [r4, #5]
    2290:	79a2      	ldrb	r2, [r4, #6]
    2292:	0212      	lsls	r2, r2, #8
    2294:	431a      	orrs	r2, r3
    2296:	4b2b      	ldr	r3, [pc, #172]	; (2344 <STACK_SIZE+0x344>)
    2298:	429a      	cmp	r2, r3
    229a:	d03c      	beq.n	2316 <STACK_SIZE+0x316>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    229c:	4b2a      	ldr	r3, [pc, #168]	; (2348 <STACK_SIZE+0x348>)
    229e:	881a      	ldrh	r2, [r3, #0]
    22a0:	4b28      	ldr	r3, [pc, #160]	; (2344 <STACK_SIZE+0x344>)
    22a2:	429a      	cmp	r2, r3
    22a4:	d037      	beq.n	2316 <STACK_SIZE+0x316>
		ack = false;
	}

	if (ack) {
    22a6:	2800      	cmp	r0, #0
    22a8:	d035      	beq.n	2316 <STACK_SIZE+0x316>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    22aa:	4b30      	ldr	r3, [pc, #192]	; (236c <STACK_SIZE+0x36c>)
    22ac:	4798      	blx	r3
    22ae:	1e07      	subs	r7, r0, #0
    22b0:	d031      	beq.n	2316 <STACK_SIZE+0x316>
		return;
	}

	nwkFrameCommandInit(ack);
    22b2:	4b2f      	ldr	r3, [pc, #188]	; (2370 <STACK_SIZE+0x370>)
    22b4:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    22b6:	787b      	ldrb	r3, [r7, #1]
    22b8:	3303      	adds	r3, #3
    22ba:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    22bc:	2200      	movs	r2, #0
    22be:	2389      	movs	r3, #137	; 0x89
    22c0:	54fa      	strb	r2, [r7, r3]
    22c2:	238a      	movs	r3, #138	; 0x8a
    22c4:	54fa      	strb	r2, [r7, r3]
    22c6:	238b      	movs	r3, #139	; 0x8b
    22c8:	54fa      	strb	r2, [r7, r3]
    22ca:	238c      	movs	r3, #140	; 0x8c
    22cc:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    22ce:	7ae2      	ldrb	r2, [r4, #11]
    22d0:	2302      	movs	r3, #2
    22d2:	401a      	ands	r2, r3
    22d4:	7afb      	ldrb	r3, [r7, #11]
    22d6:	2102      	movs	r1, #2
    22d8:	438b      	bics	r3, r1
    22da:	4313      	orrs	r3, r2
    22dc:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    22de:	7b62      	ldrb	r2, [r4, #13]
    22e0:	7ba3      	ldrb	r3, [r4, #14]
    22e2:	73fa      	strb	r2, [r7, #15]
    22e4:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    22e6:	2381      	movs	r3, #129	; 0x81
    22e8:	5cfa      	ldrb	r2, [r7, r3]
    22ea:	2382      	movs	r3, #130	; 0x82
    22ec:	5cfb      	ldrb	r3, [r7, r3]
    22ee:	021b      	lsls	r3, r3, #8
    22f0:	4313      	orrs	r3, r2
    22f2:	2283      	movs	r2, #131	; 0x83
    22f4:	5cba      	ldrb	r2, [r7, r2]
    22f6:	0412      	lsls	r2, r2, #16
    22f8:	4313      	orrs	r3, r2
    22fa:	2284      	movs	r2, #132	; 0x84
    22fc:	5cba      	ldrb	r2, [r7, r2]
    22fe:	0612      	lsls	r2, r2, #24
    2300:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    2302:	2200      	movs	r2, #0
    2304:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    2306:	4a17      	ldr	r2, [pc, #92]	; (2364 <STACK_SIZE+0x364>)
    2308:	7812      	ldrb	r2, [r2, #0]
    230a:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    230c:	7b22      	ldrb	r2, [r4, #12]
    230e:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    2310:	1c38      	adds	r0, r7, #0
    2312:	4b18      	ldr	r3, [pc, #96]	; (2374 <STACK_SIZE+0x374>)
    2314:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    2316:	2324      	movs	r3, #36	; 0x24
    2318:	7023      	strb	r3, [r4, #0]
    231a:	e006      	b.n	232a <STACK_SIZE+0x32a>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    231c:	1c20      	adds	r0, r4, #0
    231e:	4b16      	ldr	r3, [pc, #88]	; (2378 <STACK_SIZE+0x378>)
    2320:	4798      	blx	r3
		}
		break;
    2322:	e002      	b.n	232a <STACK_SIZE+0x32a>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    2324:	1c20      	adds	r0, r4, #0
    2326:	4b15      	ldr	r3, [pc, #84]	; (237c <STACK_SIZE+0x37c>)
    2328:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    232a:	1c20      	adds	r0, r4, #0
    232c:	47a8      	blx	r5
    232e:	1e04      	subs	r4, r0, #0
    2330:	d000      	beq.n	2334 <STACK_SIZE+0x334>
    2332:	e65f      	b.n	1ff4 <nwkRxTaskHandler+0x18>
    2334:	e02d      	b.n	2392 <STACK_SIZE+0x392>
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	00001b05 	.word	0x00001b05
    233c:	20000598 	.word	0x20000598
    2340:	000042ac 	.word	0x000042ac
    2344:	0000ffff 	.word	0x0000ffff
    2348:	2000088c 	.word	0x2000088c
    234c:	00001c55 	.word	0x00001c55
    2350:	00001c3d 	.word	0x00001c3d
    2354:	200005d8 	.word	0x200005d8
    2358:	00002db9 	.word	0x00002db9
    235c:	000027c9 	.word	0x000027c9
    2360:	000023cd 	.word	0x000023cd
    2364:	200005d4 	.word	0x200005d4
    2368:	ffff0001 	.word	0xffff0001
    236c:	00001a81 	.word	0x00001a81
    2370:	00001b41 	.word	0x00001b41
    2374:	00002709 	.word	0x00002709
    2378:	00001de1 	.word	0x00001de1
    237c:	00001af1 	.word	0x00001af1
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2380:	79e1      	ldrb	r1, [r4, #7]
    2382:	7a22      	ldrb	r2, [r4, #8]
    2384:	0212      	lsls	r2, r2, #8
    2386:	430a      	orrs	r2, r1
    2388:	4b04      	ldr	r3, [pc, #16]	; (239c <STACK_SIZE+0x39c>)
    238a:	429a      	cmp	r2, r3
    238c:	d000      	beq.n	2390 <STACK_SIZE+0x390>
    238e:	e6d7      	b.n	2140 <STACK_SIZE+0x140>
    2390:	e6c8      	b.n	2124 <STACK_SIZE+0x124>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    2392:	b005      	add	sp, #20
    2394:	bc0c      	pop	{r2, r3}
    2396:	4690      	mov	r8, r2
    2398:	4699      	mov	r9, r3
    239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    239c:	0000ffff 	.word	0x0000ffff

000023a0 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    23a0:	2300      	movs	r3, #0
    23a2:	4a02      	ldr	r2, [pc, #8]	; (23ac <nwkSecurityInit+0xc>)
    23a4:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    23a6:	4a02      	ldr	r2, [pc, #8]	; (23b0 <nwkSecurityInit+0x10>)
    23a8:	6013      	str	r3, [r2, #0]
}
    23aa:	4770      	bx	lr
    23ac:	200005ec 	.word	0x200005ec
    23b0:	200005f0 	.word	0x200005f0

000023b4 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    23b4:	b508      	push	{r3, lr}
    23b6:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    23b8:	4802      	ldr	r0, [pc, #8]	; (23c4 <NWK_SetSecurityKey+0x10>)
    23ba:	2210      	movs	r2, #16
    23bc:	4b02      	ldr	r3, [pc, #8]	; (23c8 <NWK_SetSecurityKey+0x14>)
    23be:	4798      	blx	r3
}
    23c0:	bd08      	pop	{r3, pc}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	200008d4 	.word	0x200008d4
    23c8:	000040a1 	.word	0x000040a1

000023cc <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    23cc:	2900      	cmp	r1, #0
    23ce:	d002      	beq.n	23d6 <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    23d0:	2330      	movs	r3, #48	; 0x30
    23d2:	7003      	strb	r3, [r0, #0]
    23d4:	e001      	b.n	23da <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    23d6:	2331      	movs	r3, #49	; 0x31
    23d8:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    23da:	4b02      	ldr	r3, [pc, #8]	; (23e4 <nwkSecurityProcess+0x18>)
    23dc:	781a      	ldrb	r2, [r3, #0]
    23de:	3201      	adds	r2, #1
    23e0:	701a      	strb	r2, [r3, #0]
}
    23e2:	4770      	bx	lr
    23e4:	200005ec 	.word	0x200005ec

000023e8 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    23e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ea:	4647      	mov	r7, r8
    23ec:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    23ee:	4b24      	ldr	r3, [pc, #144]	; (2480 <SYS_EncryptConf+0x98>)
    23f0:	681e      	ldr	r6, [r3, #0]
    23f2:	4b24      	ldr	r3, [pc, #144]	; (2484 <SYS_EncryptConf+0x9c>)
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	4698      	mov	r8, r3
    23f8:	2381      	movs	r3, #129	; 0x81
    23fa:	5cf3      	ldrb	r3, [r6, r3]
    23fc:	2282      	movs	r2, #130	; 0x82
    23fe:	5cb1      	ldrb	r1, [r6, r2]
    2400:	0209      	lsls	r1, r1, #8
    2402:	4319      	orrs	r1, r3
    2404:	2383      	movs	r3, #131	; 0x83
    2406:	5cf4      	ldrb	r4, [r6, r3]
    2408:	0424      	lsls	r4, r4, #16
    240a:	4321      	orrs	r1, r4
    240c:	2384      	movs	r3, #132	; 0x84
    240e:	5cf4      	ldrb	r4, [r6, r3]
    2410:	0624      	lsls	r4, r4, #24
    2412:	4321      	orrs	r1, r4
    2414:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    2416:	4b1c      	ldr	r3, [pc, #112]	; (2488 <SYS_EncryptConf+0xa0>)
    2418:	781b      	ldrb	r3, [r3, #0]
    241a:	469c      	mov	ip, r3
    241c:	1c1f      	adds	r7, r3, #0
    241e:	2b10      	cmp	r3, #16
    2420:	d900      	bls.n	2424 <SYS_EncryptConf+0x3c>
    2422:	2710      	movs	r7, #16
    2424:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2426:	2f00      	cmp	r7, #0
    2428:	d016      	beq.n	2458 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    242a:	4b18      	ldr	r3, [pc, #96]	; (248c <SYS_EncryptConf+0xa4>)
    242c:	781d      	ldrb	r5, [r3, #0]
    242e:	1c0b      	adds	r3, r1, #0
    2430:	4a17      	ldr	r2, [pc, #92]	; (2490 <SYS_EncryptConf+0xa8>)
    2432:	1e7c      	subs	r4, r7, #1
    2434:	b2e4      	uxtb	r4, r4
    2436:	190c      	adds	r4, r1, r4
    2438:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    243a:	7810      	ldrb	r0, [r2, #0]
    243c:	7819      	ldrb	r1, [r3, #0]
    243e:	4041      	eors	r1, r0
    2440:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    2442:	2d00      	cmp	r5, #0
    2444:	d001      	beq.n	244a <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    2446:	7011      	strb	r1, [r2, #0]
    2448:	e002      	b.n	2450 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    244a:	7810      	ldrb	r0, [r2, #0]
    244c:	4041      	eors	r1, r0
    244e:	7011      	strb	r1, [r2, #0]
    2450:	3301      	adds	r3, #1
    2452:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2454:	42a3      	cmp	r3, r4
    2456:	d1f0      	bne.n	243a <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2458:	4643      	mov	r3, r8
    245a:	18fa      	adds	r2, r7, r3
    245c:	4b09      	ldr	r3, [pc, #36]	; (2484 <SYS_EncryptConf+0x9c>)
    245e:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    2460:	4663      	mov	r3, ip
    2462:	1bdf      	subs	r7, r3, r7
    2464:	b2ff      	uxtb	r7, r7
    2466:	4b08      	ldr	r3, [pc, #32]	; (2488 <SYS_EncryptConf+0xa0>)
    2468:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    246a:	2f00      	cmp	r7, #0
    246c:	d002      	beq.n	2474 <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    246e:	2332      	movs	r3, #50	; 0x32
    2470:	7033      	strb	r3, [r6, #0]
    2472:	e001      	b.n	2478 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    2474:	2334      	movs	r3, #52	; 0x34
    2476:	7033      	strb	r3, [r6, #0]
	}
}
    2478:	bc04      	pop	{r2}
    247a:	4690      	mov	r8, r2
    247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	200005f0 	.word	0x200005f0
    2484:	200005f4 	.word	0x200005f4
    2488:	200005f5 	.word	0x200005f5
    248c:	200005f6 	.word	0x200005f6
    2490:	200005f8 	.word	0x200005f8

00002494 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    2494:	b530      	push	{r4, r5, lr}
    2496:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    2498:	4b56      	ldr	r3, [pc, #344]	; (25f4 <nwkSecurityTaskHandler+0x160>)
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	2b00      	cmp	r3, #0
    249e:	d100      	bne.n	24a2 <nwkSecurityTaskHandler+0xe>
    24a0:	e0a5      	b.n	25ee <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    24a2:	4b55      	ldr	r3, [pc, #340]	; (25f8 <nwkSecurityTaskHandler+0x164>)
    24a4:	681c      	ldr	r4, [r3, #0]
    24a6:	2c00      	cmp	r4, #0
    24a8:	d100      	bne.n	24ac <nwkSecurityTaskHandler+0x18>
    24aa:	e09b      	b.n	25e4 <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    24ac:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    24ae:	2b34      	cmp	r3, #52	; 0x34
    24b0:	d145      	bne.n	253e <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    24b2:	2381      	movs	r3, #129	; 0x81
    24b4:	5ce3      	ldrb	r3, [r4, r3]
    24b6:	2282      	movs	r2, #130	; 0x82
    24b8:	5ca1      	ldrb	r1, [r4, r2]
    24ba:	0209      	lsls	r1, r1, #8
    24bc:	4319      	orrs	r1, r3
    24be:	2383      	movs	r3, #131	; 0x83
    24c0:	5ce3      	ldrb	r3, [r4, r3]
    24c2:	041b      	lsls	r3, r3, #16
    24c4:	4319      	orrs	r1, r3
    24c6:	2384      	movs	r3, #132	; 0x84
    24c8:	5ce3      	ldrb	r3, [r4, r3]
    24ca:	061b      	lsls	r3, r3, #24
    24cc:	4319      	orrs	r1, r3
    24ce:	4b4b      	ldr	r3, [pc, #300]	; (25fc <nwkSecurityTaskHandler+0x168>)
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    24d4:	4b4a      	ldr	r3, [pc, #296]	; (2600 <nwkSecurityTaskHandler+0x16c>)
    24d6:	685d      	ldr	r5, [r3, #4]
    24d8:	681a      	ldr	r2, [r3, #0]
    24da:	4055      	eors	r5, r2
    24dc:	689a      	ldr	r2, [r3, #8]
    24de:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    24e0:	68db      	ldr	r3, [r3, #12]
    24e2:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    24e4:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    24e6:	4b47      	ldr	r3, [pc, #284]	; (2604 <nwkSecurityTaskHandler+0x170>)
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d009      	beq.n	2502 <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    24ee:	1c08      	adds	r0, r1, #0
    24f0:	4669      	mov	r1, sp
    24f2:	2204      	movs	r2, #4
    24f4:	4b44      	ldr	r3, [pc, #272]	; (2608 <nwkSecurityTaskHandler+0x174>)
    24f6:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    24f8:	7863      	ldrb	r3, [r4, #1]
    24fa:	3304      	adds	r3, #4
    24fc:	7063      	strb	r3, [r4, #1]
		return true;
    24fe:	2101      	movs	r1, #1
    2500:	e008      	b.n	2514 <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    2502:	a801      	add	r0, sp, #4
    2504:	2204      	movs	r2, #4
    2506:	4b40      	ldr	r3, [pc, #256]	; (2608 <nwkSecurityTaskHandler+0x174>)
    2508:	4798      	blx	r3
		return vmic == tmic;
    250a:	9b01      	ldr	r3, [sp, #4]
    250c:	1ae9      	subs	r1, r5, r3
    250e:	424d      	negs	r5, r1
    2510:	4169      	adcs	r1, r5
    2512:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    2514:	4b3b      	ldr	r3, [pc, #236]	; (2604 <nwkSecurityTaskHandler+0x170>)
    2516:	781b      	ldrb	r3, [r3, #0]
    2518:	2b00      	cmp	r3, #0
    251a:	d004      	beq.n	2526 <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    251c:	4b36      	ldr	r3, [pc, #216]	; (25f8 <nwkSecurityTaskHandler+0x164>)
    251e:	6818      	ldr	r0, [r3, #0]
    2520:	4b3a      	ldr	r3, [pc, #232]	; (260c <nwkSecurityTaskHandler+0x178>)
    2522:	4798      	blx	r3
    2524:	e003      	b.n	252e <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    2526:	4b34      	ldr	r3, [pc, #208]	; (25f8 <nwkSecurityTaskHandler+0x164>)
    2528:	6818      	ldr	r0, [r3, #0]
    252a:	4b39      	ldr	r3, [pc, #228]	; (2610 <nwkSecurityTaskHandler+0x17c>)
    252c:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    252e:	2200      	movs	r2, #0
    2530:	4b31      	ldr	r3, [pc, #196]	; (25f8 <nwkSecurityTaskHandler+0x164>)
    2532:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    2534:	4b2f      	ldr	r3, [pc, #188]	; (25f4 <nwkSecurityTaskHandler+0x160>)
    2536:	781a      	ldrb	r2, [r3, #0]
    2538:	3a01      	subs	r2, #1
    253a:	701a      	strb	r2, [r3, #0]
    253c:	e057      	b.n	25ee <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    253e:	2b32      	cmp	r3, #50	; 0x32
    2540:	d155      	bne.n	25ee <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    2542:	2333      	movs	r3, #51	; 0x33
    2544:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    2546:	482e      	ldr	r0, [pc, #184]	; (2600 <nwkSecurityTaskHandler+0x16c>)
    2548:	4932      	ldr	r1, [pc, #200]	; (2614 <nwkSecurityTaskHandler+0x180>)
    254a:	4b33      	ldr	r3, [pc, #204]	; (2618 <nwkSecurityTaskHandler+0x184>)
    254c:	4798      	blx	r3
    254e:	e04e      	b.n	25ee <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    2550:	7803      	ldrb	r3, [r0, #0]
    2552:	3b30      	subs	r3, #48	; 0x30
    2554:	2b01      	cmp	r3, #1
    2556:	d847      	bhi.n	25e8 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    2558:	4b27      	ldr	r3, [pc, #156]	; (25f8 <nwkSecurityTaskHandler+0x164>)
    255a:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    255c:	4a28      	ldr	r2, [pc, #160]	; (2600 <nwkSecurityTaskHandler+0x16c>)
    255e:	7b01      	ldrb	r1, [r0, #12]
    2560:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2562:	7bc1      	ldrb	r1, [r0, #15]
    2564:	7c04      	ldrb	r4, [r0, #16]
    2566:	0224      	lsls	r4, r4, #8
    2568:	430c      	orrs	r4, r1
    256a:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    256c:	7c41      	ldrb	r1, [r0, #17]
    256e:	0909      	lsrs	r1, r1, #4
    2570:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2572:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2574:	7b41      	ldrb	r1, [r0, #13]
    2576:	7b84      	ldrb	r4, [r0, #14]
    2578:	0224      	lsls	r4, r4, #8
    257a:	430c      	orrs	r4, r1
    257c:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    257e:	7c41      	ldrb	r1, [r0, #17]
    2580:	0709      	lsls	r1, r1, #28
    2582:	0f09      	lsrs	r1, r1, #28
    2584:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2586:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    2588:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    258a:	7944      	ldrb	r4, [r0, #5]
    258c:	7983      	ldrb	r3, [r0, #6]
    258e:	021b      	lsls	r3, r3, #8
    2590:	4323      	orrs	r3, r4
    2592:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    2594:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2596:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    2598:	7803      	ldrb	r3, [r0, #0]
    259a:	2b31      	cmp	r3, #49	; 0x31
    259c:	d102      	bne.n	25a4 <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    259e:	7843      	ldrb	r3, [r0, #1]
    25a0:	3b04      	subs	r3, #4
    25a2:	7043      	strb	r3, [r0, #1]
    25a4:	1c83      	adds	r3, r0, #2
    25a6:	2281      	movs	r2, #129	; 0x81
    25a8:	5c81      	ldrb	r1, [r0, r2]
    25aa:	2282      	movs	r2, #130	; 0x82
    25ac:	5c82      	ldrb	r2, [r0, r2]
    25ae:	0212      	lsls	r2, r2, #8
    25b0:	430a      	orrs	r2, r1
    25b2:	2183      	movs	r1, #131	; 0x83
    25b4:	5c41      	ldrb	r1, [r0, r1]
    25b6:	0409      	lsls	r1, r1, #16
    25b8:	430a      	orrs	r2, r1
    25ba:	2184      	movs	r1, #132	; 0x84
    25bc:	5c41      	ldrb	r1, [r0, r1]
    25be:	0609      	lsls	r1, r1, #24
    25c0:	430a      	orrs	r2, r1
    25c2:	1a9a      	subs	r2, r3, r2
    25c4:	7843      	ldrb	r3, [r0, #1]
    25c6:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    25c8:	4b14      	ldr	r3, [pc, #80]	; (261c <nwkSecurityTaskHandler+0x188>)
    25ca:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    25cc:	2200      	movs	r2, #0
    25ce:	4b0b      	ldr	r3, [pc, #44]	; (25fc <nwkSecurityTaskHandler+0x168>)
    25d0:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    25d2:	7802      	ldrb	r2, [r0, #0]
    25d4:	3a30      	subs	r2, #48	; 0x30
    25d6:	4253      	negs	r3, r2
    25d8:	415a      	adcs	r2, r3
    25da:	4b0a      	ldr	r3, [pc, #40]	; (2604 <nwkSecurityTaskHandler+0x170>)
    25dc:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    25de:	2332      	movs	r3, #50	; 0x32
    25e0:	7003      	strb	r3, [r0, #0]
    25e2:	e004      	b.n	25ee <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    25e4:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    25e6:	4c0e      	ldr	r4, [pc, #56]	; (2620 <nwkSecurityTaskHandler+0x18c>)
    25e8:	47a0      	blx	r4
    25ea:	2800      	cmp	r0, #0
    25ec:	d1b0      	bne.n	2550 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    25ee:	b003      	add	sp, #12
    25f0:	bd30      	pop	{r4, r5, pc}
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	200005ec 	.word	0x200005ec
    25f8:	200005f0 	.word	0x200005f0
    25fc:	200005f4 	.word	0x200005f4
    2600:	200005f8 	.word	0x200005f8
    2604:	200005f6 	.word	0x200005f6
    2608:	000040a1 	.word	0x000040a1
    260c:	00002891 	.word	0x00002891
    2610:	00001fcd 	.word	0x00001fcd
    2614:	200008d4 	.word	0x200008d4
    2618:	00002cc1 	.word	0x00002cc1
    261c:	200005f5 	.word	0x200005f5
    2620:	00001b05 	.word	0x00001b05

00002624 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    2624:	b5f0      	push	{r4, r5, r6, r7, lr}
    2626:	4647      	mov	r7, r8
    2628:	b480      	push	{r7}
    262a:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    262c:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    262e:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2630:	4c0f      	ldr	r4, [pc, #60]	; (2670 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2632:	2686      	movs	r6, #134	; 0x86
    2634:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2636:	e010      	b.n	265a <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    2638:	7803      	ldrb	r3, [r0, #0]
    263a:	2b11      	cmp	r3, #17
    263c:	d10d      	bne.n	265a <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    263e:	5d82      	ldrb	r2, [r0, r6]
    2640:	5d43      	ldrb	r3, [r0, r5]
    2642:	021b      	lsls	r3, r3, #8
    2644:	4313      	orrs	r3, r2
    2646:	3b01      	subs	r3, #1
    2648:	b29b      	uxth	r3, r3
    264a:	5583      	strb	r3, [r0, r6]
    264c:	0a1a      	lsrs	r2, r3, #8
    264e:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    2650:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    2652:	2b00      	cmp	r3, #0
    2654:	d101      	bne.n	265a <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    2656:	2313      	movs	r3, #19
    2658:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    265a:	47a0      	blx	r4
    265c:	2800      	cmp	r0, #0
    265e:	d1eb      	bne.n	2638 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    2660:	2f00      	cmp	r7, #0
    2662:	d002      	beq.n	266a <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    2664:	4640      	mov	r0, r8
    2666:	4b03      	ldr	r3, [pc, #12]	; (2674 <nwkTxDelayTimerHandler+0x50>)
    2668:	4798      	blx	r3
	}
}
    266a:	bc04      	pop	{r2}
    266c:	4690      	mov	r8, r2
    266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2670:	00001b05 	.word	0x00001b05
    2674:	00002db9 	.word	0x00002db9

00002678 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    2678:	b5f0      	push	{r4, r5, r6, r7, lr}
    267a:	4647      	mov	r7, r8
    267c:	b480      	push	{r7}
    267e:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2680:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2682:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2684:	4c11      	ldr	r4, [pc, #68]	; (26cc <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    2686:	2686      	movs	r6, #134	; 0x86
    2688:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    268a:	e013      	b.n	26b4 <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    268c:	7803      	ldrb	r3, [r0, #0]
    268e:	2b16      	cmp	r3, #22
    2690:	d110      	bne.n	26b4 <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    2692:	5d82      	ldrb	r2, [r0, r6]
    2694:	5d43      	ldrb	r3, [r0, r5]
    2696:	021b      	lsls	r3, r3, #8
    2698:	4313      	orrs	r3, r2
    269a:	3b01      	subs	r3, #1
    269c:	b29b      	uxth	r3, r3
    269e:	5583      	strb	r3, [r0, r6]
    26a0:	0a1a      	lsrs	r2, r3, #8
    26a2:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    26a4:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    26a6:	2b00      	cmp	r3, #0
    26a8:	d104      	bne.n	26b4 <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    26aa:	2317      	movs	r3, #23
    26ac:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    26ae:	2210      	movs	r2, #16
    26b0:	2385      	movs	r3, #133	; 0x85
    26b2:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    26b4:	47a0      	blx	r4
    26b6:	2800      	cmp	r0, #0
    26b8:	d1e8      	bne.n	268c <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    26ba:	2f00      	cmp	r7, #0
    26bc:	d002      	beq.n	26c4 <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    26be:	4640      	mov	r0, r8
    26c0:	4b03      	ldr	r3, [pc, #12]	; (26d0 <nwkTxAckWaitTimerHandler+0x58>)
    26c2:	4798      	blx	r3
	}
}
    26c4:	bc04      	pop	{r2}
    26c6:	4690      	mov	r8, r2
    26c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	00001b05 	.word	0x00001b05
    26d0:	00002db9 	.word	0x00002db9

000026d4 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    26d4:	2200      	movs	r2, #0
    26d6:	4b07      	ldr	r3, [pc, #28]	; (26f4 <nwkTxInit+0x20>)
    26d8:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    26da:	4b07      	ldr	r3, [pc, #28]	; (26f8 <nwkTxInit+0x24>)
    26dc:	2132      	movs	r1, #50	; 0x32
    26de:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    26e0:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    26e2:	4906      	ldr	r1, [pc, #24]	; (26fc <nwkTxInit+0x28>)
    26e4:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    26e6:	4b06      	ldr	r3, [pc, #24]	; (2700 <nwkTxInit+0x2c>)
    26e8:	210a      	movs	r1, #10
    26ea:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    26ec:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    26ee:	4a05      	ldr	r2, [pc, #20]	; (2704 <nwkTxInit+0x30>)
    26f0:	611a      	str	r2, [r3, #16]
}
    26f2:	4770      	bx	lr
    26f4:	2000061c 	.word	0x2000061c
    26f8:	20000608 	.word	0x20000608
    26fc:	00002679 	.word	0x00002679
    2700:	20000620 	.word	0x20000620
    2704:	00002625 	.word	0x00002625

00002708 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    2708:	b510      	push	{r4, lr}
    270a:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    270c:	2388      	movs	r3, #136	; 0x88
    270e:	5cc3      	ldrb	r3, [r0, r3]
    2710:	0799      	lsls	r1, r3, #30
    2712:	d502      	bpl.n	271a <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    2714:	2212      	movs	r2, #18
    2716:	7002      	strb	r2, [r0, #0]
    2718:	e007      	b.n	272a <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    271a:	7ac2      	ldrb	r2, [r0, #11]
    271c:	0791      	lsls	r1, r2, #30
    271e:	d502      	bpl.n	2726 <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    2720:	2210      	movs	r2, #16
    2722:	7002      	strb	r2, [r0, #0]
    2724:	e001      	b.n	272a <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    2726:	2212      	movs	r2, #18
    2728:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    272a:	2100      	movs	r1, #0
    272c:	2285      	movs	r2, #133	; 0x85
    272e:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    2730:	07da      	lsls	r2, r3, #31
    2732:	d504      	bpl.n	273e <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    2734:	2101      	movs	r1, #1
    2736:	4249      	negs	r1, r1
    2738:	7161      	strb	r1, [r4, #5]
    273a:	71a1      	strb	r1, [r4, #6]
    273c:	e004      	b.n	2748 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    273e:	491e      	ldr	r1, [pc, #120]	; (27b8 <nwkTxFrame+0xb0>)
    2740:	7888      	ldrb	r0, [r1, #2]
    2742:	7160      	strb	r0, [r4, #5]
    2744:	78c9      	ldrb	r1, [r1, #3]
    2746:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    2748:	2205      	movs	r2, #5
    274a:	421a      	tst	r2, r3
    274c:	d103      	bne.n	2756 <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    274e:	1c20      	adds	r0, r4, #0
    2750:	4b1a      	ldr	r3, [pc, #104]	; (27bc <nwkTxFrame+0xb4>)
    2752:	4798      	blx	r3
    2754:	e003      	b.n	275e <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    2756:	7be1      	ldrb	r1, [r4, #15]
    2758:	7c22      	ldrb	r2, [r4, #16]
    275a:	71e1      	strb	r1, [r4, #7]
    275c:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    275e:	4a16      	ldr	r2, [pc, #88]	; (27b8 <nwkTxFrame+0xb0>)
    2760:	7811      	ldrb	r1, [r2, #0]
    2762:	7261      	strb	r1, [r4, #9]
    2764:	7851      	ldrb	r1, [r2, #1]
    2766:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    2768:	7951      	ldrb	r1, [r2, #5]
    276a:	3101      	adds	r1, #1
    276c:	b2c9      	uxtb	r1, r1
    276e:	7151      	strb	r1, [r2, #5]
    2770:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    2772:	79e1      	ldrb	r1, [r4, #7]
    2774:	7a22      	ldrb	r2, [r4, #8]
    2776:	0212      	lsls	r2, r2, #8
    2778:	430a      	orrs	r2, r1
    277a:	4b11      	ldr	r3, [pc, #68]	; (27c0 <nwkTxFrame+0xb8>)
    277c:	429a      	cmp	r2, r3
    277e:	d110      	bne.n	27a2 <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    2780:	2341      	movs	r3, #65	; 0x41
    2782:	70a3      	strb	r3, [r4, #2]
    2784:	2378      	movs	r3, #120	; 0x78
    2786:	425b      	negs	r3, r3
    2788:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    278a:	4b0e      	ldr	r3, [pc, #56]	; (27c4 <nwkTxFrame+0xbc>)
    278c:	4798      	blx	r3
    278e:	2307      	movs	r3, #7
    2790:	4018      	ands	r0, r3
    2792:	3001      	adds	r0, #1
    2794:	2386      	movs	r3, #134	; 0x86
    2796:	54e0      	strb	r0, [r4, r3]
    2798:	0a00      	lsrs	r0, r0, #8
    279a:	b280      	uxth	r0, r0
    279c:	2387      	movs	r3, #135	; 0x87
    279e:	54e0      	strb	r0, [r4, r3]
    27a0:	e009      	b.n	27b6 <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    27a2:	2361      	movs	r3, #97	; 0x61
    27a4:	70a3      	strb	r3, [r4, #2]
    27a6:	2378      	movs	r3, #120	; 0x78
    27a8:	425b      	negs	r3, r3
    27aa:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    27ac:	2200      	movs	r2, #0
    27ae:	2386      	movs	r3, #134	; 0x86
    27b0:	54e2      	strb	r2, [r4, r3]
    27b2:	2387      	movs	r3, #135	; 0x87
    27b4:	54e2      	strb	r2, [r4, r3]
	}
}
    27b6:	bd10      	pop	{r4, pc}
    27b8:	2000088c 	.word	0x2000088c
    27bc:	00001d99 	.word	0x00001d99
    27c0:	0000ffff 	.word	0x0000ffff
    27c4:	000040c9 	.word	0x000040c9

000027c8 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    27c8:	b538      	push	{r3, r4, r5, lr}
    27ca:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    27cc:	4b1d      	ldr	r3, [pc, #116]	; (2844 <nwkTxBroadcastFrame+0x7c>)
    27ce:	4798      	blx	r3
    27d0:	1e04      	subs	r4, r0, #0
    27d2:	d036      	beq.n	2842 <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    27d4:	2312      	movs	r3, #18
    27d6:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    27d8:	786b      	ldrb	r3, [r5, #1]
    27da:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    27dc:	2200      	movs	r2, #0
    27de:	2385      	movs	r3, #133	; 0x85
    27e0:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    27e2:	4b19      	ldr	r3, [pc, #100]	; (2848 <nwkTxBroadcastFrame+0x80>)
    27e4:	4798      	blx	r3
    27e6:	2307      	movs	r3, #7
    27e8:	4018      	ands	r0, r3
    27ea:	3001      	adds	r0, #1
    27ec:	2386      	movs	r3, #134	; 0x86
    27ee:	54e0      	strb	r0, [r4, r3]
    27f0:	0a00      	lsrs	r0, r0, #8
    27f2:	b280      	uxth	r0, r0
    27f4:	2387      	movs	r3, #135	; 0x87
    27f6:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    27f8:	2200      	movs	r2, #0
    27fa:	2389      	movs	r3, #137	; 0x89
    27fc:	54e2      	strb	r2, [r4, r3]
    27fe:	238a      	movs	r3, #138	; 0x8a
    2800:	54e2      	strb	r2, [r4, r3]
    2802:	238b      	movs	r3, #139	; 0x8b
    2804:	54e2      	strb	r2, [r4, r3]
    2806:	238c      	movs	r3, #140	; 0x8c
    2808:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    280a:	1ca0      	adds	r0, r4, #2
    280c:	786a      	ldrb	r2, [r5, #1]
    280e:	1ca9      	adds	r1, r5, #2
    2810:	4b0e      	ldr	r3, [pc, #56]	; (284c <nwkTxBroadcastFrame+0x84>)
    2812:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    2814:	2341      	movs	r3, #65	; 0x41
    2816:	70a3      	strb	r3, [r4, #2]
    2818:	2378      	movs	r3, #120	; 0x78
    281a:	425b      	negs	r3, r3
    281c:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    281e:	2301      	movs	r3, #1
    2820:	425b      	negs	r3, r3
    2822:	71e3      	strb	r3, [r4, #7]
    2824:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    2826:	796a      	ldrb	r2, [r5, #5]
    2828:	79ab      	ldrb	r3, [r5, #6]
    282a:	7162      	strb	r2, [r4, #5]
    282c:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    282e:	4b08      	ldr	r3, [pc, #32]	; (2850 <nwkTxBroadcastFrame+0x88>)
    2830:	781a      	ldrb	r2, [r3, #0]
    2832:	7262      	strb	r2, [r4, #9]
    2834:	785a      	ldrb	r2, [r3, #1]
    2836:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    2838:	795a      	ldrb	r2, [r3, #5]
    283a:	3201      	adds	r2, #1
    283c:	b2d2      	uxtb	r2, r2
    283e:	715a      	strb	r2, [r3, #5]
    2840:	7122      	strb	r2, [r4, #4]
}
    2842:	bd38      	pop	{r3, r4, r5, pc}
    2844:	00001a81 	.word	0x00001a81
    2848:	000040c9 	.word	0x000040c9
    284c:	000040a1 	.word	0x000040a1
    2850:	2000088c 	.word	0x2000088c

00002854 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    2854:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2856:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    2858:	7b03      	ldrb	r3, [r0, #12]
		return false;
    285a:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    285c:	2b03      	cmp	r3, #3
    285e:	d113      	bne.n	2888 <nwkTxAckReceived+0x34>
    2860:	e00d      	b.n	287e <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    2862:	7803      	ldrb	r3, [r0, #0]
    2864:	2b16      	cmp	r3, #22
    2866:	d10c      	bne.n	2882 <nwkTxAckReceived+0x2e>
    2868:	7b02      	ldrb	r2, [r0, #12]
    286a:	786b      	ldrb	r3, [r5, #1]
    286c:	429a      	cmp	r2, r3
    286e:	d108      	bne.n	2882 <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    2870:	2317      	movs	r3, #23
    2872:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    2874:	78aa      	ldrb	r2, [r5, #2]
    2876:	2388      	movs	r3, #136	; 0x88
    2878:	54c2      	strb	r2, [r0, r3]
			return true;
    287a:	2001      	movs	r0, #1
    287c:	e004      	b.n	2888 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    287e:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2880:	4c02      	ldr	r4, [pc, #8]	; (288c <nwkTxAckReceived+0x38>)
    2882:	47a0      	blx	r4
    2884:	2800      	cmp	r0, #0
    2886:	d1ec      	bne.n	2862 <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    2888:	bd38      	pop	{r3, r4, r5, pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	00001b05 	.word	0x00001b05

00002890 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    2890:	2312      	movs	r3, #18
    2892:	7003      	strb	r3, [r0, #0]
}
    2894:	4770      	bx	lr
    2896:	46c0      	nop			; (mov r8, r8)

00002898 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2898:	4b0d      	ldr	r3, [pc, #52]	; (28d0 <PHY_DataConf+0x38>)
    289a:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    289c:	2801      	cmp	r0, #1
    289e:	d009      	beq.n	28b4 <PHY_DataConf+0x1c>
    28a0:	2800      	cmp	r0, #0
    28a2:	d003      	beq.n	28ac <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    28a4:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    28a6:	2802      	cmp	r0, #2
    28a8:	d005      	beq.n	28b6 <PHY_DataConf+0x1e>
    28aa:	e001      	b.n	28b0 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    28ac:	2200      	movs	r2, #0
    28ae:	e002      	b.n	28b6 <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    28b0:	2201      	movs	r2, #1
    28b2:	e000      	b.n	28b6 <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    28b4:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    28b6:	2185      	movs	r1, #133	; 0x85
    28b8:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    28ba:	2215      	movs	r2, #21
    28bc:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    28be:	2200      	movs	r2, #0
    28c0:	4b03      	ldr	r3, [pc, #12]	; (28d0 <PHY_DataConf+0x38>)
    28c2:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    28c4:	4a03      	ldr	r2, [pc, #12]	; (28d4 <PHY_DataConf+0x3c>)
    28c6:	2358      	movs	r3, #88	; 0x58
    28c8:	5ad1      	ldrh	r1, [r2, r3]
    28ca:	3901      	subs	r1, #1
    28cc:	52d1      	strh	r1, [r2, r3]
}
    28ce:	4770      	bx	lr
    28d0:	2000061c 	.word	0x2000061c
    28d4:	2000088c 	.word	0x2000088c

000028d8 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    28d8:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    28da:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    28dc:	4d37      	ldr	r5, [pc, #220]	; (29bc <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    28de:	4e38      	ldr	r6, [pc, #224]	; (29c0 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    28e0:	e066      	b.n	29b0 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    28e2:	7823      	ldrb	r3, [r4, #0]
    28e4:	3b10      	subs	r3, #16
    28e6:	b2da      	uxtb	r2, r3
    28e8:	2a07      	cmp	r2, #7
    28ea:	d861      	bhi.n	29b0 <nwkTxTaskHandler+0xd8>
    28ec:	0093      	lsls	r3, r2, #2
    28ee:	58f3      	ldr	r3, [r6, r3]
    28f0:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    28f2:	1c20      	adds	r0, r4, #0
    28f4:	2101      	movs	r1, #1
    28f6:	4b33      	ldr	r3, [pc, #204]	; (29c4 <nwkTxTaskHandler+0xec>)
    28f8:	4798      	blx	r3
		}
		break;
    28fa:	e059      	b.n	29b0 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    28fc:	2386      	movs	r3, #134	; 0x86
    28fe:	5ce2      	ldrb	r2, [r4, r3]
    2900:	2387      	movs	r3, #135	; 0x87
    2902:	5ce3      	ldrb	r3, [r4, r3]
    2904:	021b      	lsls	r3, r3, #8
    2906:	4313      	orrs	r3, r2
    2908:	d005      	beq.n	2916 <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    290a:	2311      	movs	r3, #17
    290c:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    290e:	482e      	ldr	r0, [pc, #184]	; (29c8 <nwkTxTaskHandler+0xf0>)
    2910:	4b2e      	ldr	r3, [pc, #184]	; (29cc <nwkTxTaskHandler+0xf4>)
    2912:	4798      	blx	r3
    2914:	e04c      	b.n	29b0 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    2916:	2313      	movs	r3, #19
    2918:	7023      	strb	r3, [r4, #0]
    291a:	e049      	b.n	29b0 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    291c:	4b2c      	ldr	r3, [pc, #176]	; (29d0 <nwkTxTaskHandler+0xf8>)
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	2b00      	cmp	r3, #0
    2922:	d145      	bne.n	29b0 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    2924:	4b2a      	ldr	r3, [pc, #168]	; (29d0 <nwkTxTaskHandler+0xf8>)
    2926:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2928:	2314      	movs	r3, #20
    292a:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    292c:	1c60      	adds	r0, r4, #1
    292e:	4b29      	ldr	r3, [pc, #164]	; (29d4 <nwkTxTaskHandler+0xfc>)
    2930:	4798      	blx	r3
				nwkIb.lock++;
    2932:	4a29      	ldr	r2, [pc, #164]	; (29d8 <nwkTxTaskHandler+0x100>)
    2934:	2358      	movs	r3, #88	; 0x58
    2936:	5ad1      	ldrh	r1, [r2, r3]
    2938:	3101      	adds	r1, #1
    293a:	52d1      	strh	r1, [r2, r3]
    293c:	e038      	b.n	29b0 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    293e:	2385      	movs	r3, #133	; 0x85
    2940:	5ce3      	ldrb	r3, [r4, r3]
    2942:	2b00      	cmp	r3, #0
    2944:	d119      	bne.n	297a <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    2946:	7b61      	ldrb	r1, [r4, #13]
    2948:	7ba3      	ldrb	r3, [r4, #14]
    294a:	021b      	lsls	r3, r3, #8
    294c:	4a22      	ldr	r2, [pc, #136]	; (29d8 <nwkTxTaskHandler+0x100>)
    294e:	8812      	ldrh	r2, [r2, #0]
    2950:	430b      	orrs	r3, r1
    2952:	429a      	cmp	r2, r3
    2954:	d10e      	bne.n	2974 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    2956:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    2958:	07da      	lsls	r2, r3, #31
    295a:	d50b      	bpl.n	2974 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    295c:	2316      	movs	r3, #22
    295e:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2960:	2215      	movs	r2, #21
    2962:	2386      	movs	r3, #134	; 0x86
    2964:	54e2      	strb	r2, [r4, r3]
    2966:	2200      	movs	r2, #0
    2968:	2387      	movs	r3, #135	; 0x87
    296a:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    296c:	481b      	ldr	r0, [pc, #108]	; (29dc <nwkTxTaskHandler+0x104>)
    296e:	4b17      	ldr	r3, [pc, #92]	; (29cc <nwkTxTaskHandler+0xf4>)
    2970:	4798      	blx	r3
    2972:	e01d      	b.n	29b0 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    2974:	2317      	movs	r3, #23
    2976:	7023      	strb	r3, [r4, #0]
    2978:	e01a      	b.n	29b0 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    297a:	2317      	movs	r3, #23
    297c:	7023      	strb	r3, [r4, #0]
    297e:	e017      	b.n	29b0 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    2980:	1c20      	adds	r0, r4, #0
    2982:	4b17      	ldr	r3, [pc, #92]	; (29e0 <nwkTxTaskHandler+0x108>)
    2984:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    2986:	2389      	movs	r3, #137	; 0x89
    2988:	5ce2      	ldrb	r2, [r4, r3]
    298a:	238a      	movs	r3, #138	; 0x8a
    298c:	5ce3      	ldrb	r3, [r4, r3]
    298e:	021b      	lsls	r3, r3, #8
    2990:	4313      	orrs	r3, r2
    2992:	228b      	movs	r2, #139	; 0x8b
    2994:	5ca2      	ldrb	r2, [r4, r2]
    2996:	0412      	lsls	r2, r2, #16
    2998:	4313      	orrs	r3, r2
    299a:	228c      	movs	r2, #140	; 0x8c
    299c:	5ca2      	ldrb	r2, [r4, r2]
    299e:	0612      	lsls	r2, r2, #24
    29a0:	4313      	orrs	r3, r2
    29a2:	d103      	bne.n	29ac <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    29a4:	1c20      	adds	r0, r4, #0
    29a6:	4b0f      	ldr	r3, [pc, #60]	; (29e4 <nwkTxTaskHandler+0x10c>)
    29a8:	4798      	blx	r3
    29aa:	e001      	b.n	29b0 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    29ac:	1c20      	adds	r0, r4, #0
    29ae:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    29b0:	1c20      	adds	r0, r4, #0
    29b2:	47a8      	blx	r5
    29b4:	1e04      	subs	r4, r0, #0
    29b6:	d194      	bne.n	28e2 <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    29b8:	bd70      	pop	{r4, r5, r6, pc}
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	00001b05 	.word	0x00001b05
    29c0:	000042c0 	.word	0x000042c0
    29c4:	000023cd 	.word	0x000023cd
    29c8:	20000620 	.word	0x20000620
    29cc:	00002db9 	.word	0x00002db9
    29d0:	2000061c 	.word	0x2000061c
    29d4:	00002b4d 	.word	0x00002b4d
    29d8:	2000088c 	.word	0x2000088c
    29dc:	20000608 	.word	0x20000608
    29e0:	00001d09 	.word	0x00001d09
    29e4:	00001af1 	.word	0x00001af1

000029e8 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    29e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ea:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    29ec:	4f0b      	ldr	r7, [pc, #44]	; (2a1c <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    29ee:	4e0c      	ldr	r6, [pc, #48]	; (2a20 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    29f0:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    29f2:	2002      	movs	r0, #2
    29f4:	2103      	movs	r1, #3
    29f6:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    29f8:	2001      	movs	r0, #1
    29fa:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    29fc:	4028      	ands	r0, r5
    29fe:	2808      	cmp	r0, #8
    2a00:	d1f7      	bne.n	29f2 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a02:	4f06      	ldr	r7, [pc, #24]	; (2a1c <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2a04:	4e06      	ldr	r6, [pc, #24]	; (2a20 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2a06:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a08:	2002      	movs	r0, #2
    2a0a:	1c21      	adds	r1, r4, #0
    2a0c:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2a0e:	2001      	movs	r0, #1
    2a10:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2a12:	4028      	ands	r0, r5
    2a14:	4284      	cmp	r4, r0
    2a16:	d1f7      	bne.n	2a08 <phyTrxSetState+0x20>
}
    2a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	000033e9 	.word	0x000033e9
    2a20:	000032f1 	.word	0x000032f1

00002a24 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    2a24:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    2a26:	2008      	movs	r0, #8
    2a28:	4b06      	ldr	r3, [pc, #24]	; (2a44 <phySetRxState+0x20>)
    2a2a:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2a2c:	200f      	movs	r0, #15
    2a2e:	4b06      	ldr	r3, [pc, #24]	; (2a48 <phySetRxState+0x24>)
    2a30:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    2a32:	4b06      	ldr	r3, [pc, #24]	; (2a4c <phySetRxState+0x28>)
    2a34:	781b      	ldrb	r3, [r3, #0]
    2a36:	2b00      	cmp	r3, #0
    2a38:	d002      	beq.n	2a40 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    2a3a:	2016      	movs	r0, #22
    2a3c:	4b01      	ldr	r3, [pc, #4]	; (2a44 <phySetRxState+0x20>)
    2a3e:	4798      	blx	r3
	}
}
    2a40:	bd08      	pop	{r3, pc}
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	000029e9 	.word	0x000029e9
    2a48:	000032f1 	.word	0x000032f1
    2a4c:	200006b5 	.word	0x200006b5

00002a50 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    2a50:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    2a52:	4b0e      	ldr	r3, [pc, #56]	; (2a8c <PHY_Init+0x3c>)
    2a54:	4798      	blx	r3
	PhyReset();
    2a56:	4b0e      	ldr	r3, [pc, #56]	; (2a90 <PHY_Init+0x40>)
    2a58:	4798      	blx	r3
	phyRxState = false;
    2a5a:	2200      	movs	r2, #0
    2a5c:	4b0d      	ldr	r3, [pc, #52]	; (2a94 <PHY_Init+0x44>)
    2a5e:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    2a60:	2201      	movs	r2, #1
    2a62:	4b0d      	ldr	r3, [pc, #52]	; (2a98 <PHY_Init+0x48>)
    2a64:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a66:	4e0d      	ldr	r6, [pc, #52]	; (2a9c <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2a68:	4d0d      	ldr	r5, [pc, #52]	; (2aa0 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2a6a:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a6c:	2002      	movs	r0, #2
    2a6e:	2108      	movs	r1, #8
    2a70:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2a72:	2001      	movs	r0, #1
    2a74:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    2a76:	4020      	ands	r0, r4
    2a78:	2808      	cmp	r0, #8
    2a7a:	d1f7      	bne.n	2a6c <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2a7c:	2004      	movs	r0, #4
    2a7e:	212e      	movs	r1, #46	; 0x2e
    2a80:	4c06      	ldr	r4, [pc, #24]	; (2a9c <PHY_Init+0x4c>)
    2a82:	47a0      	blx	r4
    2a84:	200c      	movs	r0, #12
    2a86:	21a0      	movs	r1, #160	; 0xa0
    2a88:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    2a8a:	bd70      	pop	{r4, r5, r6, pc}
    2a8c:	000031b1 	.word	0x000031b1
    2a90:	000032c1 	.word	0x000032c1
    2a94:	200006b5 	.word	0x200006b5
    2a98:	200006b4 	.word	0x200006b4
    2a9c:	000033e9 	.word	0x000033e9
    2aa0:	000032f1 	.word	0x000032f1

00002aa4 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    2aa4:	b508      	push	{r3, lr}
	phyRxState = rx;
    2aa6:	4b02      	ldr	r3, [pc, #8]	; (2ab0 <PHY_SetRxState+0xc>)
    2aa8:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    2aaa:	4b02      	ldr	r3, [pc, #8]	; (2ab4 <PHY_SetRxState+0x10>)
    2aac:	4798      	blx	r3
}
    2aae:	bd08      	pop	{r3, pc}
    2ab0:	200006b5 	.word	0x200006b5
    2ab4:	00002a25 	.word	0x00002a25

00002ab8 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    2ab8:	b510      	push	{r4, lr}
    2aba:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2abc:	2008      	movs	r0, #8
    2abe:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <PHY_SetChannel+0x1c>)
    2ac0:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    2ac2:	231f      	movs	r3, #31
    2ac4:	1c01      	adds	r1, r0, #0
    2ac6:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    2ac8:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2aca:	b2e1      	uxtb	r1, r4
    2acc:	2008      	movs	r0, #8
    2ace:	4b02      	ldr	r3, [pc, #8]	; (2ad8 <PHY_SetChannel+0x20>)
    2ad0:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    2ad2:	bd10      	pop	{r4, pc}
    2ad4:	000032f1 	.word	0x000032f1
    2ad8:	000033e9 	.word	0x000033e9

00002adc <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    2adc:	b530      	push	{r4, r5, lr}
    2ade:	b083      	sub	sp, #12
    2ae0:	466c      	mov	r4, sp
    2ae2:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2ae4:	b2c1      	uxtb	r1, r0
    2ae6:	2022      	movs	r0, #34	; 0x22
    2ae8:	4d03      	ldr	r5, [pc, #12]	; (2af8 <PHY_SetPanId+0x1c>)
    2aea:	47a8      	blx	r5
    2aec:	79e1      	ldrb	r1, [r4, #7]
    2aee:	2023      	movs	r0, #35	; 0x23
    2af0:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    2af2:	b003      	add	sp, #12
    2af4:	bd30      	pop	{r4, r5, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	000033e9 	.word	0x000033e9

00002afc <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    2afc:	b570      	push	{r4, r5, r6, lr}
    2afe:	b082      	sub	sp, #8
    2b00:	466d      	mov	r5, sp
    2b02:	80e8      	strh	r0, [r5, #6]
    2b04:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    2b06:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2b08:	2020      	movs	r0, #32
    2b0a:	1c31      	adds	r1, r6, #0
    2b0c:	4c05      	ldr	r4, [pc, #20]	; (2b24 <PHY_SetShortAddr+0x28>)
    2b0e:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    2b10:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2b12:	2021      	movs	r0, #33	; 0x21
    2b14:	1c29      	adds	r1, r5, #0
    2b16:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    2b18:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2b1a:	b2f1      	uxtb	r1, r6
    2b1c:	202d      	movs	r0, #45	; 0x2d
    2b1e:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    2b20:	b002      	add	sp, #8
    2b22:	bd70      	pop	{r4, r5, r6, pc}
    2b24:	000033e9 	.word	0x000033e9

00002b28 <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    2b28:	b510      	push	{r4, lr}
    2b2a:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2b2c:	2005      	movs	r0, #5
    2b2e:	4b05      	ldr	r3, [pc, #20]	; (2b44 <PHY_SetTxPower+0x1c>)
    2b30:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    2b32:	230f      	movs	r3, #15
    2b34:	1c01      	adds	r1, r0, #0
    2b36:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    2b38:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    2b3a:	b2e1      	uxtb	r1, r4
    2b3c:	2005      	movs	r0, #5
    2b3e:	4b02      	ldr	r3, [pc, #8]	; (2b48 <PHY_SetTxPower+0x20>)
    2b40:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    2b42:	bd10      	pop	{r4, pc}
    2b44:	000032f1 	.word	0x000032f1
    2b48:	000033e9 	.word	0x000033e9

00002b4c <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    2b4c:	b510      	push	{r4, lr}
    2b4e:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    2b50:	2019      	movs	r0, #25
    2b52:	4b0c      	ldr	r3, [pc, #48]	; (2b84 <PHY_DataReq+0x38>)
    2b54:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2b56:	200f      	movs	r0, #15
    2b58:	4b0b      	ldr	r3, [pc, #44]	; (2b88 <PHY_DataReq+0x3c>)
    2b5a:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    2b5c:	7821      	ldrb	r1, [r4, #0]
    2b5e:	1c8b      	adds	r3, r1, #2
    2b60:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    2b62:	3101      	adds	r1, #1
    2b64:	b2c9      	uxtb	r1, r1
    2b66:	1c20      	adds	r0, r4, #0
    2b68:	4b08      	ldr	r3, [pc, #32]	; (2b8c <PHY_DataReq+0x40>)
    2b6a:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    2b6c:	2203      	movs	r2, #3
    2b6e:	4b08      	ldr	r3, [pc, #32]	; (2b90 <PHY_DataReq+0x44>)
    2b70:	701a      	strb	r2, [r3, #0]
    2b72:	4b08      	ldr	r3, [pc, #32]	; (2b94 <PHY_DataReq+0x48>)
    2b74:	2280      	movs	r2, #128	; 0x80
    2b76:	0352      	lsls	r2, r2, #13
    2b78:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b7e:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    2b80:	bd10      	pop	{r4, pc}
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	000029e9 	.word	0x000029e9
    2b88:	000032f1 	.word	0x000032f1
    2b8c:	00003625 	.word	0x00003625
    2b90:	200006b4 	.word	0x200006b4
    2b94:	41004400 	.word	0x41004400

00002b98 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    2b98:	b510      	push	{r4, lr}
    2b9a:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    2b9c:	1c08      	adds	r0, r1, #0
    2b9e:	2100      	movs	r1, #0
    2ba0:	2200      	movs	r2, #0
    2ba2:	4b05      	ldr	r3, [pc, #20]	; (2bb8 <PHY_EncryptReq+0x20>)
    2ba4:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    2ba6:	1c20      	adds	r0, r4, #0
    2ba8:	2100      	movs	r1, #0
    2baa:	4b04      	ldr	r3, [pc, #16]	; (2bbc <PHY_EncryptReq+0x24>)
    2bac:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    2bae:	1c20      	adds	r0, r4, #0
    2bb0:	4b03      	ldr	r3, [pc, #12]	; (2bc0 <PHY_EncryptReq+0x28>)
    2bb2:	4798      	blx	r3
}
    2bb4:	bd10      	pop	{r4, pc}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	00003049 	.word	0x00003049
    2bbc:	00002fdd 	.word	0x00002fdd
    2bc0:	00003181 	.word	0x00003181

00002bc4 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    2bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bc6:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    2bc8:	4b26      	ldr	r3, [pc, #152]	; (2c64 <PHY_TaskHandler+0xa0>)
    2bca:	781b      	ldrb	r3, [r3, #0]
    2bcc:	2b02      	cmp	r3, #2
    2bce:	d046      	beq.n	2c5e <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2bd0:	200f      	movs	r0, #15
    2bd2:	4b25      	ldr	r3, [pc, #148]	; (2c68 <PHY_TaskHandler+0xa4>)
    2bd4:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    2bd6:	0703      	lsls	r3, r0, #28
    2bd8:	d541      	bpl.n	2c5e <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    2bda:	4b22      	ldr	r3, [pc, #136]	; (2c64 <PHY_TaskHandler+0xa0>)
    2bdc:	781b      	ldrb	r3, [r3, #0]
    2bde:	2b01      	cmp	r3, #1
    2be0:	d124      	bne.n	2c2c <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2be2:	2007      	movs	r0, #7
    2be4:	4b20      	ldr	r3, [pc, #128]	; (2c68 <PHY_TaskHandler+0xa4>)
    2be6:	4798      	blx	r3
    2be8:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    2bea:	466c      	mov	r4, sp
    2bec:	3407      	adds	r4, #7
    2bee:	1c20      	adds	r0, r4, #0
    2bf0:	2101      	movs	r1, #1
    2bf2:	4e1e      	ldr	r6, [pc, #120]	; (2c6c <PHY_TaskHandler+0xa8>)
    2bf4:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    2bf6:	4d1e      	ldr	r5, [pc, #120]	; (2c70 <PHY_TaskHandler+0xac>)
    2bf8:	7821      	ldrb	r1, [r4, #0]
    2bfa:	3102      	adds	r1, #2
    2bfc:	b2c9      	uxtb	r1, r1
    2bfe:	1c28      	adds	r0, r5, #0
    2c00:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    2c02:	a802      	add	r0, sp, #8
    2c04:	1c6a      	adds	r2, r5, #1
    2c06:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    2c08:	7822      	ldrb	r2, [r4, #0]
    2c0a:	1e91      	subs	r1, r2, #2
    2c0c:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    2c0e:	18ad      	adds	r5, r5, r2
    2c10:	786a      	ldrb	r2, [r5, #1]
    2c12:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    2c14:	3f5b      	subs	r7, #91	; 0x5b
    2c16:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    2c18:	4b16      	ldr	r3, [pc, #88]	; (2c74 <PHY_TaskHandler+0xb0>)
    2c1a:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2c1c:	4d12      	ldr	r5, [pc, #72]	; (2c68 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2c1e:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2c20:	2001      	movs	r0, #1
    2c22:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    2c24:	4020      	ands	r0, r4
    2c26:	2816      	cmp	r0, #22
    2c28:	d1fa      	bne.n	2c20 <PHY_TaskHandler+0x5c>
    2c2a:	e018      	b.n	2c5e <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    2c2c:	2b03      	cmp	r3, #3
    2c2e:	d116      	bne.n	2c5e <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    2c30:	2002      	movs	r0, #2
    2c32:	4b0d      	ldr	r3, [pc, #52]	; (2c68 <PHY_TaskHandler+0xa4>)
    2c34:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    2c36:	0944      	lsrs	r4, r0, #5
    2c38:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    2c3a:	2c00      	cmp	r4, #0
    2c3c:	d007      	beq.n	2c4e <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    2c3e:	2c03      	cmp	r4, #3
    2c40:	d004      	beq.n	2c4c <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    2c42:	3c05      	subs	r4, #5
    2c44:	1e63      	subs	r3, r4, #1
    2c46:	419c      	sbcs	r4, r3
    2c48:	3402      	adds	r4, #2
    2c4a:	e000      	b.n	2c4e <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    2c4c:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    2c4e:	4b0a      	ldr	r3, [pc, #40]	; (2c78 <PHY_TaskHandler+0xb4>)
    2c50:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    2c52:	2201      	movs	r2, #1
    2c54:	4b03      	ldr	r3, [pc, #12]	; (2c64 <PHY_TaskHandler+0xa0>)
    2c56:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    2c58:	1c20      	adds	r0, r4, #0
    2c5a:	4b08      	ldr	r3, [pc, #32]	; (2c7c <PHY_TaskHandler+0xb8>)
    2c5c:	4798      	blx	r3
		}
	}
}
    2c5e:	b005      	add	sp, #20
    2c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	200006b4 	.word	0x200006b4
    2c68:	000032f1 	.word	0x000032f1
    2c6c:	000034e5 	.word	0x000034e5
    2c70:	20000634 	.word	0x20000634
    2c74:	00001f81 	.word	0x00001f81
    2c78:	00002a25 	.word	0x00002a25
    2c7c:	00002899 	.word	0x00002899

00002c80 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    2c80:	b508      	push	{r3, lr}
	SYS_TimerInit();
    2c82:	4b04      	ldr	r3, [pc, #16]	; (2c94 <SYS_Init+0x14>)
    2c84:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    2c86:	4b04      	ldr	r3, [pc, #16]	; (2c98 <SYS_Init+0x18>)
    2c88:	4798      	blx	r3
#endif
	PHY_Init();
    2c8a:	4b04      	ldr	r3, [pc, #16]	; (2c9c <SYS_Init+0x1c>)
    2c8c:	4798      	blx	r3
	NWK_Init();
    2c8e:	4b04      	ldr	r3, [pc, #16]	; (2ca0 <SYS_Init+0x20>)
    2c90:	4798      	blx	r3
}
    2c92:	bd08      	pop	{r3, pc}
    2c94:	00002d51 	.word	0x00002d51
    2c98:	00002fd9 	.word	0x00002fd9
    2c9c:	00002a51 	.word	0x00002a51
    2ca0:	000017f9 	.word	0x000017f9

00002ca4 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    2ca4:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    2ca6:	4b03      	ldr	r3, [pc, #12]	; (2cb4 <SYS_TaskHandler+0x10>)
    2ca8:	4798      	blx	r3
	NWK_TaskHandler();
    2caa:	4b03      	ldr	r3, [pc, #12]	; (2cb8 <SYS_TaskHandler+0x14>)
    2cac:	4798      	blx	r3
	SYS_TimerTaskHandler();
    2cae:	4b03      	ldr	r3, [pc, #12]	; (2cbc <SYS_TaskHandler+0x18>)
    2cb0:	4798      	blx	r3
}
    2cb2:	bd08      	pop	{r3, pc}
    2cb4:	00002bc5 	.word	0x00002bc5
    2cb8:	00001885 	.word	0x00001885
    2cbc:	00002dd5 	.word	0x00002dd5

00002cc0 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    2cc0:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    2cc2:	4b02      	ldr	r3, [pc, #8]	; (2ccc <SYS_EncryptReq+0xc>)
    2cc4:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    2cc6:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <SYS_EncryptReq+0x10>)
    2cc8:	4798      	blx	r3
}
    2cca:	bd08      	pop	{r3, pc}
    2ccc:	00002b99 	.word	0x00002b99
    2cd0:	000023e9 	.word	0x000023e9

00002cd4 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2cd4:	b530      	push	{r4, r5, lr}
	if (timers) {
    2cd6:	4b15      	ldr	r3, [pc, #84]	; (2d2c <placeTimer+0x58>)
    2cd8:	681d      	ldr	r5, [r3, #0]
    2cda:	2d00      	cmp	r5, #0
    2cdc:	d01e      	beq.n	2d1c <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    2cde:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    2ce0:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2ce2:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    2ce4:	428a      	cmp	r2, r1
    2ce6:	d20a      	bcs.n	2cfe <placeTimer+0x2a>
    2ce8:	e004      	b.n	2cf4 <placeTimer+0x20>
    2cea:	6859      	ldr	r1, [r3, #4]
    2cec:	4291      	cmp	r1, r2
    2cee:	d803      	bhi.n	2cf8 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2cf0:	1c1c      	adds	r4, r3, #0
    2cf2:	e004      	b.n	2cfe <placeTimer+0x2a>
    2cf4:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    2cf6:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    2cf8:	1a89      	subs	r1, r1, r2
    2cfa:	6059      	str	r1, [r3, #4]
				break;
    2cfc:	e003      	b.n	2d06 <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    2cfe:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d00:	6823      	ldr	r3, [r4, #0]
    2d02:	2b00      	cmp	r3, #0
    2d04:	d1f1      	bne.n	2cea <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    2d06:	6042      	str	r2, [r0, #4]

		if (prev) {
    2d08:	2c00      	cmp	r4, #0
    2d0a:	d003      	beq.n	2d14 <placeTimer+0x40>
			timer->next = prev->next;
    2d0c:	6823      	ldr	r3, [r4, #0]
    2d0e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    2d10:	6020      	str	r0, [r4, #0]
    2d12:	e009      	b.n	2d28 <placeTimer+0x54>
		} else {
			timer->next = timers;
    2d14:	6005      	str	r5, [r0, #0]
			timers = timer;
    2d16:	4b05      	ldr	r3, [pc, #20]	; (2d2c <placeTimer+0x58>)
    2d18:	6018      	str	r0, [r3, #0]
    2d1a:	e005      	b.n	2d28 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    2d1c:	2300      	movs	r3, #0
    2d1e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    2d20:	6883      	ldr	r3, [r0, #8]
    2d22:	6043      	str	r3, [r0, #4]
		timers = timer;
    2d24:	4b01      	ldr	r3, [pc, #4]	; (2d2c <placeTimer+0x58>)
    2d26:	6018      	str	r0, [r3, #0]
	}
}
    2d28:	bd30      	pop	{r4, r5, pc}
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	200006b8 	.word	0x200006b8

00002d30 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    2d30:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    2d32:	4b04      	ldr	r3, [pc, #16]	; (2d44 <SYS_HwExpiry_Cb+0x14>)
    2d34:	781a      	ldrb	r2, [r3, #0]
    2d36:	3201      	adds	r2, #1
    2d38:	b2d2      	uxtb	r2, r2
    2d3a:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2d3c:	4802      	ldr	r0, [pc, #8]	; (2d48 <SYS_HwExpiry_Cb+0x18>)
    2d3e:	4b03      	ldr	r3, [pc, #12]	; (2d4c <SYS_HwExpiry_Cb+0x1c>)
    2d40:	4798      	blx	r3
}
    2d42:	bd08      	pop	{r3, pc}
    2d44:	200008e8 	.word	0x200008e8
    2d48:	00002710 	.word	0x00002710
    2d4c:	00003e75 	.word	0x00003e75

00002d50 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    2d50:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    2d52:	2400      	movs	r4, #0
    2d54:	4b06      	ldr	r3, [pc, #24]	; (2d70 <SYS_TimerInit+0x20>)
    2d56:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    2d58:	4806      	ldr	r0, [pc, #24]	; (2d74 <SYS_TimerInit+0x24>)
    2d5a:	4b07      	ldr	r3, [pc, #28]	; (2d78 <SYS_TimerInit+0x28>)
    2d5c:	4798      	blx	r3
	common_tc_init();
    2d5e:	4b07      	ldr	r3, [pc, #28]	; (2d7c <SYS_TimerInit+0x2c>)
    2d60:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    2d62:	4807      	ldr	r0, [pc, #28]	; (2d80 <SYS_TimerInit+0x30>)
    2d64:	4b07      	ldr	r3, [pc, #28]	; (2d84 <SYS_TimerInit+0x34>)
    2d66:	4798      	blx	r3
	timers = NULL;
    2d68:	4b07      	ldr	r3, [pc, #28]	; (2d88 <SYS_TimerInit+0x38>)
    2d6a:	601c      	str	r4, [r3, #0]
}
    2d6c:	bd10      	pop	{r4, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	200008e8 	.word	0x200008e8
    2d74:	00002d31 	.word	0x00002d31
    2d78:	00003f65 	.word	0x00003f65
    2d7c:	00003ee1 	.word	0x00003ee1
    2d80:	00002710 	.word	0x00002710
    2d84:	00003e75 	.word	0x00003e75
    2d88:	200006b8 	.word	0x200006b8

00002d8c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d8c:	4b09      	ldr	r3, [pc, #36]	; (2db4 <SYS_TimerStarted+0x28>)
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	2b00      	cmp	r3, #0
    2d92:	d009      	beq.n	2da8 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    2d94:	4283      	cmp	r3, r0
    2d96:	d102      	bne.n	2d9e <SYS_TimerStarted+0x12>
    2d98:	e008      	b.n	2dac <SYS_TimerStarted+0x20>
    2d9a:	4298      	cmp	r0, r3
    2d9c:	d008      	beq.n	2db0 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d1fa      	bne.n	2d9a <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    2da4:	2000      	movs	r0, #0
    2da6:	e004      	b.n	2db2 <SYS_TimerStarted+0x26>
    2da8:	2000      	movs	r0, #0
    2daa:	e002      	b.n	2db2 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    2dac:	2001      	movs	r0, #1
    2dae:	e000      	b.n	2db2 <SYS_TimerStarted+0x26>
    2db0:	2001      	movs	r0, #1
		}
	}
	return false;
}
    2db2:	4770      	bx	lr
    2db4:	200006b8 	.word	0x200006b8

00002db8 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2db8:	b510      	push	{r4, lr}
    2dba:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    2dbc:	4b03      	ldr	r3, [pc, #12]	; (2dcc <SYS_TimerStart+0x14>)
    2dbe:	4798      	blx	r3
    2dc0:	2800      	cmp	r0, #0
    2dc2:	d102      	bne.n	2dca <SYS_TimerStart+0x12>
		placeTimer(timer);
    2dc4:	1c20      	adds	r0, r4, #0
    2dc6:	4b02      	ldr	r3, [pc, #8]	; (2dd0 <SYS_TimerStart+0x18>)
    2dc8:	4798      	blx	r3
	}
}
    2dca:	bd10      	pop	{r4, pc}
    2dcc:	00002d8d 	.word	0x00002d8d
    2dd0:	00002cd5 	.word	0x00002cd5

00002dd4 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    2dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    2dd6:	4b1a      	ldr	r3, [pc, #104]	; (2e40 <SYS_TimerTaskHandler+0x6c>)
    2dd8:	781b      	ldrb	r3, [r3, #0]
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d02f      	beq.n	2e3e <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2dde:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2de2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2de4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2de8:	2100      	movs	r1, #0
    2dea:	4b16      	ldr	r3, [pc, #88]	; (2e44 <SYS_TimerTaskHandler+0x70>)
    2dec:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    2dee:	4a14      	ldr	r2, [pc, #80]	; (2e40 <SYS_TimerTaskHandler+0x6c>)
    2df0:	7813      	ldrb	r3, [r2, #0]
    2df2:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    2df4:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2df6:	2800      	cmp	r0, #0
    2df8:	d105      	bne.n	2e06 <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    2dfa:	2101      	movs	r1, #1
    2dfc:	4a11      	ldr	r2, [pc, #68]	; (2e44 <SYS_TimerTaskHandler+0x70>)
    2dfe:	7011      	strb	r1, [r2, #0]
    2e00:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2e04:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    2e06:	009d      	lsls	r5, r3, #2
    2e08:	18ed      	adds	r5, r5, r3
    2e0a:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    2e0c:	4e0e      	ldr	r6, [pc, #56]	; (2e48 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    2e0e:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    2e10:	e00d      	b.n	2e2e <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    2e12:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    2e14:	6823      	ldr	r3, [r4, #0]
    2e16:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    2e18:	7b23      	ldrb	r3, [r4, #12]
    2e1a:	2b01      	cmp	r3, #1
    2e1c:	d102      	bne.n	2e24 <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    2e1e:	1c20      	adds	r0, r4, #0
    2e20:	4b0a      	ldr	r3, [pc, #40]	; (2e4c <SYS_TimerTaskHandler+0x78>)
    2e22:	4798      	blx	r3
		}
		if(timer->handler)
    2e24:	6923      	ldr	r3, [r4, #16]
    2e26:	2b00      	cmp	r3, #0
    2e28:	d001      	beq.n	2e2e <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    2e2a:	1c20      	adds	r0, r4, #0
    2e2c:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    2e2e:	6834      	ldr	r4, [r6, #0]
    2e30:	2c00      	cmp	r4, #0
    2e32:	d004      	beq.n	2e3e <SYS_TimerTaskHandler+0x6a>
    2e34:	6863      	ldr	r3, [r4, #4]
    2e36:	429d      	cmp	r5, r3
    2e38:	d2eb      	bcs.n	2e12 <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    2e3a:	1b5d      	subs	r5, r3, r5
    2e3c:	6065      	str	r5, [r4, #4]
	}
}
    2e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e40:	200008e8 	.word	0x200008e8
    2e44:	20000008 	.word	0x20000008
    2e48:	200006b8 	.word	0x200006b8
    2e4c:	00002cd5 	.word	0x00002cd5

00002e50 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    2e50:	b508      	push	{r3, lr}
	tmr_cca_callback();
    2e52:	4b01      	ldr	r3, [pc, #4]	; (2e58 <tc_cca_callback+0x8>)
    2e54:	4798      	blx	r3
}
    2e56:	bd08      	pop	{r3, pc}
    2e58:	00003f49 	.word	0x00003f49

00002e5c <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    2e5c:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    2e5e:	4b01      	ldr	r3, [pc, #4]	; (2e64 <tc_ovf_callback+0x8>)
    2e60:	4798      	blx	r3
}
    2e62:	bd08      	pop	{r3, pc}
    2e64:	00003f01 	.word	0x00003f01

00002e68 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    2e68:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    2e6a:	4802      	ldr	r0, [pc, #8]	; (2e74 <tmr_read_count+0xc>)
    2e6c:	4b02      	ldr	r3, [pc, #8]	; (2e78 <tmr_read_count+0x10>)
    2e6e:	4798      	blx	r3
    2e70:	b280      	uxth	r0, r0
}
    2e72:	bd08      	pop	{r3, pc}
    2e74:	20000920 	.word	0x20000920
    2e78:	000016ad 	.word	0x000016ad

00002e7c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2e7c:	4b03      	ldr	r3, [pc, #12]	; (2e8c <tmr_disable_cc_interrupt+0x10>)
    2e7e:	2210      	movs	r2, #16
    2e80:	6819      	ldr	r1, [r3, #0]
    2e82:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2e84:	7e59      	ldrb	r1, [r3, #25]
    2e86:	4391      	bics	r1, r2
    2e88:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2e8a:	4770      	bx	lr
    2e8c:	20000920 	.word	0x20000920

00002e90 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    2e90:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2e92:	4c0a      	ldr	r4, [pc, #40]	; (2ebc <tmr_enable_cc_interrupt+0x2c>)
    2e94:	6820      	ldr	r0, [r4, #0]
    2e96:	4b0a      	ldr	r3, [pc, #40]	; (2ec0 <tmr_enable_cc_interrupt+0x30>)
    2e98:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2e9a:	4b0a      	ldr	r3, [pc, #40]	; (2ec4 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e9c:	5c1b      	ldrb	r3, [r3, r0]
    2e9e:	221f      	movs	r2, #31
    2ea0:	401a      	ands	r2, r3
    2ea2:	2301      	movs	r3, #1
    2ea4:	4093      	lsls	r3, r2
    2ea6:	1c1a      	adds	r2, r3, #0
    2ea8:	4b07      	ldr	r3, [pc, #28]	; (2ec8 <tmr_enable_cc_interrupt+0x38>)
    2eaa:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2eac:	7e62      	ldrb	r2, [r4, #25]
    2eae:	2310      	movs	r3, #16
    2eb0:	4313      	orrs	r3, r2
    2eb2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2eb4:	6823      	ldr	r3, [r4, #0]
    2eb6:	2210      	movs	r2, #16
    2eb8:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    2eba:	bd10      	pop	{r4, pc}
    2ebc:	20000920 	.word	0x20000920
    2ec0:	00001401 	.word	0x00001401
    2ec4:	000042e0 	.word	0x000042e0
    2ec8:	e000e100 	.word	0xe000e100

00002ecc <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    2ecc:	b508      	push	{r3, lr}
    2ece:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    2ed0:	4802      	ldr	r0, [pc, #8]	; (2edc <tmr_write_cmpreg+0x10>)
    2ed2:	2100      	movs	r1, #0
    2ed4:	4b02      	ldr	r3, [pc, #8]	; (2ee0 <tmr_write_cmpreg+0x14>)
    2ed6:	4798      	blx	r3
			(uint32_t)compare_value);
}
    2ed8:	bd08      	pop	{r3, pc}
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	20000920 	.word	0x20000920
    2ee0:	000016dd 	.word	0x000016dd

00002ee4 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    2ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ee6:	464f      	mov	r7, r9
    2ee8:	4646      	mov	r6, r8
    2eea:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2eec:	4a2d      	ldr	r2, [pc, #180]	; (2fa4 <tmr_init+0xc0>)
    2eee:	2300      	movs	r3, #0
    2ef0:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2ef2:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2ef4:	2100      	movs	r1, #0
    2ef6:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2ef8:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2efa:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2efc:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2efe:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2f00:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2f02:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2f04:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2f06:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2f08:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2f0a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2f0c:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2f0e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2f10:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2f12:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2f14:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2f16:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    2f18:	2301      	movs	r3, #1
    2f1a:	425b      	negs	r3, r3
    2f1c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    2f1e:	4c22      	ldr	r4, [pc, #136]	; (2fa8 <tmr_init+0xc4>)
    2f20:	1c20      	adds	r0, r4, #0
    2f22:	4922      	ldr	r1, [pc, #136]	; (2fac <tmr_init+0xc8>)
    2f24:	4b22      	ldr	r3, [pc, #136]	; (2fb0 <tmr_init+0xcc>)
    2f26:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    2f28:	1c20      	adds	r0, r4, #0
    2f2a:	4922      	ldr	r1, [pc, #136]	; (2fb4 <tmr_init+0xd0>)
    2f2c:	2200      	movs	r2, #0
    2f2e:	4d22      	ldr	r5, [pc, #136]	; (2fb8 <tmr_init+0xd4>)
    2f30:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    2f32:	1c20      	adds	r0, r4, #0
    2f34:	4921      	ldr	r1, [pc, #132]	; (2fbc <tmr_init+0xd8>)
    2f36:	2202      	movs	r2, #2
    2f38:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f3a:	6820      	ldr	r0, [r4, #0]
    2f3c:	4a20      	ldr	r2, [pc, #128]	; (2fc0 <tmr_init+0xdc>)
    2f3e:	4691      	mov	r9, r2
    2f40:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2f42:	4b20      	ldr	r3, [pc, #128]	; (2fc4 <tmr_init+0xe0>)
    2f44:	4698      	mov	r8, r3
    2f46:	5c1b      	ldrb	r3, [r3, r0]
    2f48:	271f      	movs	r7, #31
    2f4a:	403b      	ands	r3, r7
    2f4c:	2501      	movs	r5, #1
    2f4e:	1c2a      	adds	r2, r5, #0
    2f50:	409a      	lsls	r2, r3
    2f52:	4e1d      	ldr	r6, [pc, #116]	; (2fc8 <tmr_init+0xe4>)
    2f54:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    2f56:	7e62      	ldrb	r2, [r4, #25]
    2f58:	2301      	movs	r3, #1
    2f5a:	4313      	orrs	r3, r2
    2f5c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    2f5e:	6820      	ldr	r0, [r4, #0]
    2f60:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2f62:	47c8      	blx	r9
    2f64:	4642      	mov	r2, r8
    2f66:	5c13      	ldrb	r3, [r2, r0]
    2f68:	401f      	ands	r7, r3
    2f6a:	40bd      	lsls	r5, r7
    2f6c:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2f6e:	7e62      	ldrb	r2, [r4, #25]
    2f70:	2310      	movs	r3, #16
    2f72:	4313      	orrs	r3, r2
    2f74:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2f76:	6822      	ldr	r2, [r4, #0]
    2f78:	2310      	movs	r3, #16
    2f7a:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f7c:	217f      	movs	r1, #127	; 0x7f
    2f7e:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    2f80:	438b      	bics	r3, r1
    2f82:	d1fc      	bne.n	2f7e <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2f84:	8811      	ldrh	r1, [r2, #0]
    2f86:	2302      	movs	r3, #2
    2f88:	430b      	orrs	r3, r1
    2f8a:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    2f8c:	2000      	movs	r0, #0
    2f8e:	4b0f      	ldr	r3, [pc, #60]	; (2fcc <tmr_init+0xe8>)
    2f90:	4798      	blx	r3
    2f92:	490f      	ldr	r1, [pc, #60]	; (2fd0 <tmr_init+0xec>)
    2f94:	4b0f      	ldr	r3, [pc, #60]	; (2fd4 <tmr_init+0xf0>)
    2f96:	4798      	blx	r3
	#endif
	return timer_multiplier;
    2f98:	b2c0      	uxtb	r0, r0
}
    2f9a:	bc0c      	pop	{r2, r3}
    2f9c:	4690      	mov	r8, r2
    2f9e:	4699      	mov	r9, r3
    2fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	200008ec 	.word	0x200008ec
    2fa8:	20000920 	.word	0x20000920
    2fac:	42002c00 	.word	0x42002c00
    2fb0:	00001439 	.word	0x00001439
    2fb4:	00002e5d 	.word	0x00002e5d
    2fb8:	00001341 	.word	0x00001341
    2fbc:	00002e51 	.word	0x00002e51
    2fc0:	00001401 	.word	0x00001401
    2fc4:	000042e0 	.word	0x000042e0
    2fc8:	e000e100 	.word	0xe000e100
    2fcc:	000010f9 	.word	0x000010f9
    2fd0:	000f4240 	.word	0x000f4240
    2fd4:	00003f71 	.word	0x00003f71

00002fd8 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    2fd8:	4770      	bx	lr
    2fda:	46c0      	nop			; (mov r8, r8)

00002fdc <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    2fdc:	b538      	push	{r3, r4, r5, lr}
    2fde:	1c03      	adds	r3, r0, #0
    2fe0:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    2fe2:	4c14      	ldr	r4, [pc, #80]	; (3034 <sal_aes_wrrd+0x58>)
    2fe4:	1c60      	adds	r0, r4, #1
    2fe6:	1c19      	adds	r1, r3, #0
    2fe8:	2210      	movs	r2, #16
    2fea:	4b13      	ldr	r3, [pc, #76]	; (3038 <sal_aes_wrrd+0x5c>)
    2fec:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    2fee:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    2ff0:	4b12      	ldr	r3, [pc, #72]	; (303c <sal_aes_wrrd+0x60>)
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d008      	beq.n	300a <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    2ff8:	2083      	movs	r0, #131	; 0x83
    2ffa:	490e      	ldr	r1, [pc, #56]	; (3034 <sal_aes_wrrd+0x58>)
    2ffc:	2212      	movs	r2, #18
    2ffe:	4b10      	ldr	r3, [pc, #64]	; (3040 <sal_aes_wrrd+0x64>)
    3000:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3002:	2200      	movs	r2, #0
    3004:	4b0d      	ldr	r3, [pc, #52]	; (303c <sal_aes_wrrd+0x60>)
    3006:	701a      	strb	r2, [r3, #0]
    3008:	e005      	b.n	3016 <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    300a:	2084      	movs	r0, #132	; 0x84
    300c:	4909      	ldr	r1, [pc, #36]	; (3034 <sal_aes_wrrd+0x58>)
    300e:	3101      	adds	r1, #1
    3010:	2211      	movs	r2, #17
    3012:	4b0b      	ldr	r3, [pc, #44]	; (3040 <sal_aes_wrrd+0x64>)
    3014:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    3016:	2d00      	cmp	r5, #0
    3018:	d005      	beq.n	3026 <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    301a:	1c28      	adds	r0, r5, #0
    301c:	4905      	ldr	r1, [pc, #20]	; (3034 <sal_aes_wrrd+0x58>)
    301e:	3101      	adds	r1, #1
    3020:	2210      	movs	r2, #16
    3022:	4b05      	ldr	r3, [pc, #20]	; (3038 <sal_aes_wrrd+0x5c>)
    3024:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    3026:	4b03      	ldr	r3, [pc, #12]	; (3034 <sal_aes_wrrd+0x58>)
    3028:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    302a:	2018      	movs	r0, #24
    302c:	4b05      	ldr	r3, [pc, #20]	; (3044 <sal_aes_wrrd+0x68>)
    302e:	4798      	blx	r3
}
    3030:	bd38      	pop	{r3, r4, r5, pc}
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	200006e0 	.word	0x200006e0
    3038:	000040a1 	.word	0x000040a1
    303c:	200006f4 	.word	0x200006f4
    3040:	00003a5d 	.word	0x00003a5d
    3044:	00000151 	.word	0x00000151

00003048 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    3048:	b5f0      	push	{r4, r5, r6, r7, lr}
    304a:	4647      	mov	r7, r8
    304c:	b480      	push	{r7}
    304e:	b084      	sub	sp, #16
    3050:	1c05      	adds	r5, r0, #0
    3052:	1c0f      	adds	r7, r1, #0
    3054:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
    3056:	2800      	cmp	r0, #0
    3058:	d017      	beq.n	308a <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    305a:	2200      	movs	r2, #0
    305c:	4b3e      	ldr	r3, [pc, #248]	; (3158 <sal_aes_setup+0x110>)
    305e:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    3060:	2202      	movs	r2, #2
    3062:	4b3e      	ldr	r3, [pc, #248]	; (315c <sal_aes_setup+0x114>)
    3064:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    3066:	483e      	ldr	r0, [pc, #248]	; (3160 <sal_aes_setup+0x118>)
    3068:	1c29      	adds	r1, r5, #0
    306a:	2210      	movs	r2, #16
    306c:	4b3d      	ldr	r3, [pc, #244]	; (3164 <sal_aes_setup+0x11c>)
    306e:	4698      	mov	r8, r3
    3070:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3072:	4e3d      	ldr	r6, [pc, #244]	; (3168 <sal_aes_setup+0x120>)
    3074:	2310      	movs	r3, #16
    3076:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3078:	1c70      	adds	r0, r6, #1
    307a:	1c29      	adds	r1, r5, #0
    307c:	2210      	movs	r2, #16
    307e:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3080:	2083      	movs	r0, #131	; 0x83
    3082:	1c31      	adds	r1, r6, #0
    3084:	2211      	movs	r2, #17
    3086:	4b39      	ldr	r3, [pc, #228]	; (316c <sal_aes_setup+0x124>)
    3088:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    308a:	2c00      	cmp	r4, #0
    308c:	d002      	beq.n	3094 <sal_aes_setup+0x4c>
    308e:	2c01      	cmp	r4, #1
    3090:	d012      	beq.n	30b8 <sal_aes_setup+0x70>
    3092:	e05a      	b.n	314a <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    3094:	4b31      	ldr	r3, [pc, #196]	; (315c <sal_aes_setup+0x114>)
    3096:	781b      	ldrb	r3, [r3, #0]
    3098:	2b01      	cmp	r3, #1
    309a:	d13d      	bne.n	3118 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    309c:	4d32      	ldr	r5, [pc, #200]	; (3168 <sal_aes_setup+0x120>)
    309e:	2310      	movs	r3, #16
    30a0:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    30a2:	1c68      	adds	r0, r5, #1
    30a4:	492e      	ldr	r1, [pc, #184]	; (3160 <sal_aes_setup+0x118>)
    30a6:	2210      	movs	r2, #16
    30a8:	4b2e      	ldr	r3, [pc, #184]	; (3164 <sal_aes_setup+0x11c>)
    30aa:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    30ac:	2083      	movs	r0, #131	; 0x83
    30ae:	1c29      	adds	r1, r5, #0
    30b0:	2211      	movs	r2, #17
    30b2:	4b2e      	ldr	r3, [pc, #184]	; (316c <sal_aes_setup+0x124>)
    30b4:	4798      	blx	r3
    30b6:	e02f      	b.n	3118 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    30b8:	4b28      	ldr	r3, [pc, #160]	; (315c <sal_aes_setup+0x114>)
    30ba:	781b      	ldrb	r3, [r3, #0]
    30bc:	2b01      	cmp	r3, #1
    30be:	d02b      	beq.n	3118 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    30c0:	2210      	movs	r2, #16
    30c2:	4b29      	ldr	r3, [pc, #164]	; (3168 <sal_aes_setup+0x120>)
    30c4:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    30c6:	4b24      	ldr	r3, [pc, #144]	; (3158 <sal_aes_setup+0x110>)
    30c8:	781b      	ldrb	r3, [r3, #0]
    30ca:	2b00      	cmp	r3, #0
    30cc:	d116      	bne.n	30fc <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    30ce:	4d26      	ldr	r5, [pc, #152]	; (3168 <sal_aes_setup+0x120>)
    30d0:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    30d2:	2380      	movs	r3, #128	; 0x80
    30d4:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    30d6:	2201      	movs	r2, #1
    30d8:	4b25      	ldr	r3, [pc, #148]	; (3170 <sal_aes_setup+0x128>)
    30da:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    30dc:	4668      	mov	r0, sp
    30de:	2100      	movs	r1, #0
    30e0:	4b24      	ldr	r3, [pc, #144]	; (3174 <sal_aes_setup+0x12c>)
    30e2:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    30e4:	2310      	movs	r3, #16
    30e6:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    30e8:	2083      	movs	r0, #131	; 0x83
    30ea:	1c29      	adds	r1, r5, #0
    30ec:	2201      	movs	r2, #1
    30ee:	4b1f      	ldr	r3, [pc, #124]	; (316c <sal_aes_setup+0x124>)
    30f0:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    30f2:	2084      	movs	r0, #132	; 0x84
    30f4:	4920      	ldr	r1, [pc, #128]	; (3178 <sal_aes_setup+0x130>)
    30f6:	2210      	movs	r2, #16
    30f8:	4b20      	ldr	r3, [pc, #128]	; (317c <sal_aes_setup+0x134>)
    30fa:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    30fc:	4d1a      	ldr	r5, [pc, #104]	; (3168 <sal_aes_setup+0x120>)
    30fe:	1c68      	adds	r0, r5, #1
    3100:	491d      	ldr	r1, [pc, #116]	; (3178 <sal_aes_setup+0x130>)
    3102:	2210      	movs	r2, #16
    3104:	4b17      	ldr	r3, [pc, #92]	; (3164 <sal_aes_setup+0x11c>)
    3106:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3108:	2083      	movs	r0, #131	; 0x83
    310a:	1c29      	adds	r1, r5, #0
    310c:	2211      	movs	r2, #17
    310e:	4b17      	ldr	r3, [pc, #92]	; (316c <sal_aes_setup+0x124>)
    3110:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    3112:	4b11      	ldr	r3, [pc, #68]	; (3158 <sal_aes_setup+0x110>)
    3114:	2201      	movs	r2, #1
    3116:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    3118:	4b10      	ldr	r3, [pc, #64]	; (315c <sal_aes_setup+0x114>)
    311a:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    311c:	2f00      	cmp	r7, #0
    311e:	d002      	beq.n	3126 <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    3120:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    3122:	2f02      	cmp	r7, #2
    3124:	d113      	bne.n	314e <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
    3126:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3128:	2308      	movs	r3, #8
    312a:	401c      	ands	r4, r3
    312c:	013f      	lsls	r7, r7, #4
    312e:	2370      	movs	r3, #112	; 0x70
    3130:	401f      	ands	r7, r3
    3132:	433c      	orrs	r4, r7
    3134:	4b0c      	ldr	r3, [pc, #48]	; (3168 <sal_aes_setup+0x120>)
    3136:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    3138:	2780      	movs	r7, #128	; 0x80
    313a:	427f      	negs	r7, r7
    313c:	433c      	orrs	r4, r7
    313e:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    3140:	2201      	movs	r2, #1
    3142:	4b0b      	ldr	r3, [pc, #44]	; (3170 <sal_aes_setup+0x128>)
    3144:	701a      	strb	r2, [r3, #0]

	return (true);
    3146:	2001      	movs	r0, #1
    3148:	e001      	b.n	314e <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    314a:	2000      	movs	r0, #0
    314c:	e7ff      	b.n	314e <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    314e:	b004      	add	sp, #16
    3150:	bc04      	pop	{r2}
    3152:	4690      	mov	r8, r2
    3154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	200006bc 	.word	0x200006bc
    315c:	20000009 	.word	0x20000009
    3160:	200006d0 	.word	0x200006d0
    3164:	000040a1 	.word	0x000040a1
    3168:	200006e0 	.word	0x200006e0
    316c:	00003749 	.word	0x00003749
    3170:	200006f4 	.word	0x200006f4
    3174:	00002fdd 	.word	0x00002fdd
    3178:	200006c0 	.word	0x200006c0
    317c:	000038c1 	.word	0x000038c1

00003180 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3180:	b508      	push	{r3, lr}
    3182:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    3184:	2084      	movs	r0, #132	; 0x84
    3186:	2210      	movs	r2, #16
    3188:	4b01      	ldr	r3, [pc, #4]	; (3190 <sal_aes_read+0x10>)
    318a:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    318c:	bd08      	pop	{r3, pc}
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	000038c1 	.word	0x000038c1

00003194 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3194:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3196:	2201      	movs	r2, #1
    3198:	4b03      	ldr	r3, [pc, #12]	; (31a8 <AT86RFX_ISR+0x14>)
    319a:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    319c:	4b03      	ldr	r3, [pc, #12]	; (31ac <AT86RFX_ISR+0x18>)
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	2b00      	cmp	r3, #0
    31a2:	d000      	beq.n	31a6 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    31a4:	4798      	blx	r3
	}
}
    31a6:	bd08      	pop	{r3, pc}
    31a8:	40001800 	.word	0x40001800
    31ac:	200006f8 	.word	0x200006f8

000031b0 <trx_spi_init>:

void trx_spi_init(void)
{
    31b0:	b530      	push	{r4, r5, lr}
    31b2:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    31b4:	4a32      	ldr	r2, [pc, #200]	; (3280 <trx_spi_init+0xd0>)
    31b6:	2300      	movs	r3, #0
    31b8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    31ba:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    31bc:	213f      	movs	r1, #63	; 0x3f
    31be:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    31c0:	4c30      	ldr	r4, [pc, #192]	; (3284 <trx_spi_init+0xd4>)
    31c2:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    31c4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    31c6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    31c8:	2201      	movs	r2, #1
    31ca:	4668      	mov	r0, sp
    31cc:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
    31ce:	7083      	strb	r3, [r0, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    31d0:	7002      	strb	r2, [r0, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    31d2:	203f      	movs	r0, #63	; 0x3f
    31d4:	4669      	mov	r1, sp
    31d6:	4b2c      	ldr	r3, [pc, #176]	; (3288 <trx_spi_init+0xd8>)
    31d8:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    31da:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    31dc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    31de:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    31e0:	2900      	cmp	r1, #0
    31e2:	d103      	bne.n	31ec <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    31e4:	095a      	lsrs	r2, r3, #5
    31e6:	01d2      	lsls	r2, r2, #7
    31e8:	4928      	ldr	r1, [pc, #160]	; (328c <trx_spi_init+0xdc>)
    31ea:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    31ec:	211f      	movs	r1, #31
    31ee:	400b      	ands	r3, r1
    31f0:	2101      	movs	r1, #1
    31f2:	1c08      	adds	r0, r1, #0
    31f4:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    31f6:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    31f8:	4a25      	ldr	r2, [pc, #148]	; (3290 <trx_spi_init+0xe0>)
    31fa:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    31fc:	2300      	movs	r3, #0
    31fe:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3200:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3202:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    3204:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    3206:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3208:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    320a:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    320c:	2124      	movs	r1, #36	; 0x24
    320e:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3210:	61d3      	str	r3, [r2, #28]
    3212:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3214:	2380      	movs	r3, #128	; 0x80
    3216:	025b      	lsls	r3, r3, #9
    3218:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    321a:	4b1e      	ldr	r3, [pc, #120]	; (3294 <trx_spi_init+0xe4>)
    321c:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    321e:	4b1e      	ldr	r3, [pc, #120]	; (3298 <trx_spi_init+0xe8>)
    3220:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3222:	2301      	movs	r3, #1
    3224:	425b      	negs	r3, r3
    3226:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3228:	4b1c      	ldr	r3, [pc, #112]	; (329c <trx_spi_init+0xec>)
    322a:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    322c:	4b1c      	ldr	r3, [pc, #112]	; (32a0 <trx_spi_init+0xf0>)
    322e:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3230:	4c1c      	ldr	r4, [pc, #112]	; (32a4 <trx_spi_init+0xf4>)
    3232:	1c20      	adds	r0, r4, #0
    3234:	491c      	ldr	r1, [pc, #112]	; (32a8 <trx_spi_init+0xf8>)
    3236:	4b1d      	ldr	r3, [pc, #116]	; (32ac <trx_spi_init+0xfc>)
    3238:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    323a:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    323c:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    323e:	2b00      	cmp	r3, #0
    3240:	d1fc      	bne.n	323c <trx_spi_init+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3242:	6813      	ldr	r3, [r2, #0]
    3244:	2502      	movs	r5, #2
    3246:	432b      	orrs	r3, r5
    3248:	6013      	str	r3, [r2, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    324a:	ac01      	add	r4, sp, #4
    324c:	1c20      	adds	r0, r4, #0
    324e:	4b18      	ldr	r3, [pc, #96]	; (32b0 <trx_spi_init+0x100>)
    3250:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    3252:	2320      	movs	r3, #32
    3254:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    3256:	2380      	movs	r3, #128	; 0x80
    3258:	039b      	lsls	r3, r3, #14
    325a:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    325c:	7225      	strb	r5, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    325e:	2301      	movs	r3, #1
    3260:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    3262:	2200      	movs	r2, #0
    3264:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    3266:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    3268:	2000      	movs	r0, #0
    326a:	1c21      	adds	r1, r4, #0
    326c:	4b11      	ldr	r3, [pc, #68]	; (32b4 <trx_spi_init+0x104>)
    326e:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    3270:	4811      	ldr	r0, [pc, #68]	; (32b8 <trx_spi_init+0x108>)
    3272:	2100      	movs	r1, #0
    3274:	2200      	movs	r2, #0
    3276:	4b11      	ldr	r3, [pc, #68]	; (32bc <trx_spi_init+0x10c>)
    3278:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    327a:	b005      	add	sp, #20
    327c:	bd30      	pop	{r4, r5, pc}
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	20000940 	.word	0x20000940
    3284:	20000944 	.word	0x20000944
    3288:	000004ad 	.word	0x000004ad
    328c:	41004400 	.word	0x41004400
    3290:	20000948 	.word	0x20000948
    3294:	004c4b40 	.word	0x004c4b40
    3298:	00530005 	.word	0x00530005
    329c:	003e0005 	.word	0x003e0005
    32a0:	00520005 	.word	0x00520005
    32a4:	20000980 	.word	0x20000980
    32a8:	42001800 	.word	0x42001800
    32ac:	0000076d 	.word	0x0000076d
    32b0:	00000421 	.word	0x00000421
    32b4:	00000435 	.word	0x00000435
    32b8:	00003195 	.word	0x00003195
    32bc:	000002bd 	.word	0x000002bd

000032c0 <PhyReset>:

void PhyReset(void)
{
    32c0:	b570      	push	{r4, r5, r6, lr}
    32c2:	4b09      	ldr	r3, [pc, #36]	; (32e8 <PhyReset+0x28>)
    32c4:	1c1c      	adds	r4, r3, #0
    32c6:	3480      	adds	r4, #128	; 0x80
    32c8:	2580      	movs	r5, #128	; 0x80
    32ca:	022d      	lsls	r5, r5, #8
    32cc:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    32ce:	2280      	movs	r2, #128	; 0x80
    32d0:	0352      	lsls	r2, r2, #13
    32d2:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    32d4:	20a5      	movs	r0, #165	; 0xa5
    32d6:	0040      	lsls	r0, r0, #1
    32d8:	4e04      	ldr	r6, [pc, #16]	; (32ec <PhyReset+0x2c>)
    32da:	47b0      	blx	r6
    32dc:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    32de:	200a      	movs	r0, #10
    32e0:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    32e2:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    32e4:	bd70      	pop	{r4, r5, r6, pc}
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	41004400 	.word	0x41004400
    32ec:	00000151 	.word	0x00000151

000032f0 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    32f0:	b570      	push	{r4, r5, r6, lr}
    32f2:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32f4:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    32f8:	4263      	negs	r3, r4
    32fa:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    32fc:	b672      	cpsid	i
    32fe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3302:	2200      	movs	r2, #0
    3304:	4b33      	ldr	r3, [pc, #204]	; (33d4 <trx_reg_read+0xe4>)
    3306:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3308:	4d33      	ldr	r5, [pc, #204]	; (33d8 <trx_reg_read+0xe8>)
    330a:	1c28      	adds	r0, r5, #0
    330c:	4933      	ldr	r1, [pc, #204]	; (33dc <trx_reg_read+0xec>)
    330e:	2201      	movs	r2, #1
    3310:	4b33      	ldr	r3, [pc, #204]	; (33e0 <trx_reg_read+0xf0>)
    3312:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3314:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3316:	2101      	movs	r1, #1
    3318:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    331a:	420a      	tst	r2, r1
    331c:	d0fc      	beq.n	3318 <trx_reg_read+0x28>
    331e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3320:	07d1      	lsls	r1, r2, #31
    3322:	d502      	bpl.n	332a <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3324:	2280      	movs	r2, #128	; 0x80
    3326:	4316      	orrs	r6, r2
    3328:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    332a:	2102      	movs	r1, #2
    332c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    332e:	420a      	tst	r2, r1
    3330:	d0fc      	beq.n	332c <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3332:	2104      	movs	r1, #4
    3334:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3336:	420a      	tst	r2, r1
    3338:	d0fc      	beq.n	3334 <trx_reg_read+0x44>
    333a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    333c:	0751      	lsls	r1, r2, #29
    333e:	d514      	bpl.n	336a <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3340:	8b5a      	ldrh	r2, [r3, #26]
    3342:	0751      	lsls	r1, r2, #29
    3344:	d503      	bpl.n	334e <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3346:	8b59      	ldrh	r1, [r3, #26]
    3348:	2204      	movs	r2, #4
    334a:	430a      	orrs	r2, r1
    334c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    334e:	4a22      	ldr	r2, [pc, #136]	; (33d8 <trx_reg_read+0xe8>)
    3350:	7992      	ldrb	r2, [r2, #6]
    3352:	2a01      	cmp	r2, #1
    3354:	d105      	bne.n	3362 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3356:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3358:	05c9      	lsls	r1, r1, #23
    335a:	0dc9      	lsrs	r1, r1, #23
    335c:	4a21      	ldr	r2, [pc, #132]	; (33e4 <trx_reg_read+0xf4>)
    335e:	8011      	strh	r1, [r2, #0]
    3360:	e003      	b.n	336a <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3362:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3364:	b2c9      	uxtb	r1, r1
    3366:	4a1f      	ldr	r2, [pc, #124]	; (33e4 <trx_reg_read+0xf4>)
    3368:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    336a:	2101      	movs	r1, #1
    336c:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    336e:	420a      	tst	r2, r1
    3370:	d0fc      	beq.n	336c <trx_reg_read+0x7c>
    3372:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3374:	07d1      	lsls	r1, r2, #31
    3376:	d501      	bpl.n	337c <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3378:	2200      	movs	r2, #0
    337a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    337c:	2102      	movs	r1, #2
    337e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3380:	420a      	tst	r2, r1
    3382:	d0fc      	beq.n	337e <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3384:	2104      	movs	r1, #4
    3386:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    3388:	420a      	tst	r2, r1
    338a:	d0fc      	beq.n	3386 <trx_reg_read+0x96>
    338c:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    338e:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3390:	0751      	lsls	r1, r2, #29
    3392:	d510      	bpl.n	33b6 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3394:	8b5a      	ldrh	r2, [r3, #26]
    3396:	0751      	lsls	r1, r2, #29
    3398:	d503      	bpl.n	33a2 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    339a:	8b59      	ldrh	r1, [r3, #26]
    339c:	2204      	movs	r2, #4
    339e:	430a      	orrs	r2, r1
    33a0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    33a2:	4a0d      	ldr	r2, [pc, #52]	; (33d8 <trx_reg_read+0xe8>)
    33a4:	7992      	ldrb	r2, [r2, #6]
    33a6:	2a01      	cmp	r2, #1
    33a8:	d103      	bne.n	33b2 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    33aa:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    33ac:	05ed      	lsls	r5, r5, #23
    33ae:	0ded      	lsrs	r5, r5, #23
    33b0:	e001      	b.n	33b6 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    33b2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    33b4:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    33b6:	4808      	ldr	r0, [pc, #32]	; (33d8 <trx_reg_read+0xe8>)
    33b8:	4908      	ldr	r1, [pc, #32]	; (33dc <trx_reg_read+0xec>)
    33ba:	2200      	movs	r2, #0
    33bc:	4b08      	ldr	r3, [pc, #32]	; (33e0 <trx_reg_read+0xf0>)
    33be:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    33c0:	2c00      	cmp	r4, #0
    33c2:	d005      	beq.n	33d0 <trx_reg_read+0xe0>
		cpu_irq_enable();
    33c4:	2201      	movs	r2, #1
    33c6:	4b03      	ldr	r3, [pc, #12]	; (33d4 <trx_reg_read+0xe4>)
    33c8:	701a      	strb	r2, [r3, #0]
    33ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    33ce:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    33d0:	b2e8      	uxtb	r0, r5
}
    33d2:	bd70      	pop	{r4, r5, r6, pc}
    33d4:	20000008 	.word	0x20000008
    33d8:	20000980 	.word	0x20000980
    33dc:	20000944 	.word	0x20000944
    33e0:	00000a1d 	.word	0x00000a1d
    33e4:	2000093c 	.word	0x2000093c

000033e8 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    33e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ea:	1c07      	adds	r7, r0, #0
    33ec:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    33ee:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    33f2:	4263      	negs	r3, r4
    33f4:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    33f6:	b672      	cpsid	i
    33f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    33fc:	2200      	movs	r2, #0
    33fe:	4b34      	ldr	r3, [pc, #208]	; (34d0 <trx_reg_write+0xe8>)
    3400:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3402:	4e34      	ldr	r6, [pc, #208]	; (34d4 <trx_reg_write+0xec>)
    3404:	1c30      	adds	r0, r6, #0
    3406:	4934      	ldr	r1, [pc, #208]	; (34d8 <trx_reg_write+0xf0>)
    3408:	2201      	movs	r2, #1
    340a:	4b34      	ldr	r3, [pc, #208]	; (34dc <trx_reg_write+0xf4>)
    340c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    340e:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3410:	2101      	movs	r1, #1
    3412:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3414:	420a      	tst	r2, r1
    3416:	d0fc      	beq.n	3412 <trx_reg_write+0x2a>
    3418:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    341a:	07d1      	lsls	r1, r2, #31
    341c:	d502      	bpl.n	3424 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    341e:	22c0      	movs	r2, #192	; 0xc0
    3420:	4317      	orrs	r7, r2
    3422:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3424:	2102      	movs	r1, #2
    3426:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3428:	420a      	tst	r2, r1
    342a:	d0fc      	beq.n	3426 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    342c:	2104      	movs	r1, #4
    342e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3430:	420a      	tst	r2, r1
    3432:	d0fc      	beq.n	342e <trx_reg_write+0x46>
    3434:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3436:	0751      	lsls	r1, r2, #29
    3438:	d514      	bpl.n	3464 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    343a:	8b5a      	ldrh	r2, [r3, #26]
    343c:	0751      	lsls	r1, r2, #29
    343e:	d503      	bpl.n	3448 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3440:	8b59      	ldrh	r1, [r3, #26]
    3442:	2204      	movs	r2, #4
    3444:	430a      	orrs	r2, r1
    3446:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3448:	4a22      	ldr	r2, [pc, #136]	; (34d4 <trx_reg_write+0xec>)
    344a:	7992      	ldrb	r2, [r2, #6]
    344c:	2a01      	cmp	r2, #1
    344e:	d105      	bne.n	345c <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3450:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3452:	05c9      	lsls	r1, r1, #23
    3454:	0dc9      	lsrs	r1, r1, #23
    3456:	4a22      	ldr	r2, [pc, #136]	; (34e0 <trx_reg_write+0xf8>)
    3458:	8011      	strh	r1, [r2, #0]
    345a:	e003      	b.n	3464 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    345c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    345e:	b2c9      	uxtb	r1, r1
    3460:	4a1f      	ldr	r2, [pc, #124]	; (34e0 <trx_reg_write+0xf8>)
    3462:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3464:	2001      	movs	r0, #1
    3466:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3468:	4202      	tst	r2, r0
    346a:	d0fc      	beq.n	3466 <trx_reg_write+0x7e>
    346c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    346e:	07d1      	lsls	r1, r2, #31
    3470:	d500      	bpl.n	3474 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3472:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3474:	2102      	movs	r1, #2
    3476:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3478:	420a      	tst	r2, r1
    347a:	d0fc      	beq.n	3476 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    347c:	2104      	movs	r1, #4
    347e:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3480:	420a      	tst	r2, r1
    3482:	d0fc      	beq.n	347e <trx_reg_write+0x96>
    3484:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3486:	0751      	lsls	r1, r2, #29
    3488:	d514      	bpl.n	34b4 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    348a:	8b5a      	ldrh	r2, [r3, #26]
    348c:	0751      	lsls	r1, r2, #29
    348e:	d503      	bpl.n	3498 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3490:	8b59      	ldrh	r1, [r3, #26]
    3492:	2204      	movs	r2, #4
    3494:	430a      	orrs	r2, r1
    3496:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3498:	4a0e      	ldr	r2, [pc, #56]	; (34d4 <trx_reg_write+0xec>)
    349a:	7992      	ldrb	r2, [r2, #6]
    349c:	2a01      	cmp	r2, #1
    349e:	d105      	bne.n	34ac <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    34a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    34a2:	05d2      	lsls	r2, r2, #23
    34a4:	0dd2      	lsrs	r2, r2, #23
    34a6:	4b0e      	ldr	r3, [pc, #56]	; (34e0 <trx_reg_write+0xf8>)
    34a8:	801a      	strh	r2, [r3, #0]
    34aa:	e003      	b.n	34b4 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    34ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    34ae:	b2d2      	uxtb	r2, r2
    34b0:	4b0b      	ldr	r3, [pc, #44]	; (34e0 <trx_reg_write+0xf8>)
    34b2:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    34b4:	4807      	ldr	r0, [pc, #28]	; (34d4 <trx_reg_write+0xec>)
    34b6:	4908      	ldr	r1, [pc, #32]	; (34d8 <trx_reg_write+0xf0>)
    34b8:	2200      	movs	r2, #0
    34ba:	4b08      	ldr	r3, [pc, #32]	; (34dc <trx_reg_write+0xf4>)
    34bc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    34be:	2c00      	cmp	r4, #0
    34c0:	d005      	beq.n	34ce <trx_reg_write+0xe6>
		cpu_irq_enable();
    34c2:	2201      	movs	r2, #1
    34c4:	4b02      	ldr	r3, [pc, #8]	; (34d0 <trx_reg_write+0xe8>)
    34c6:	701a      	strb	r2, [r3, #0]
    34c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    34cc:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    34ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34d0:	20000008 	.word	0x20000008
    34d4:	20000980 	.word	0x20000980
    34d8:	20000944 	.word	0x20000944
    34dc:	00000a1d 	.word	0x00000a1d
    34e0:	2000093c 	.word	0x2000093c

000034e4 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    34e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34e6:	465f      	mov	r7, fp
    34e8:	4656      	mov	r6, sl
    34ea:	464d      	mov	r5, r9
    34ec:	4644      	mov	r4, r8
    34ee:	b4f0      	push	{r4, r5, r6, r7}
    34f0:	b083      	sub	sp, #12
    34f2:	1c06      	adds	r6, r0, #0
    34f4:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    34f6:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    34fa:	4278      	negs	r0, r7
    34fc:	4178      	adcs	r0, r7
    34fe:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3500:	b672      	cpsid	i
    3502:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3506:	2200      	movs	r2, #0
    3508:	4b41      	ldr	r3, [pc, #260]	; (3610 <trx_frame_read+0x12c>)
    350a:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    350c:	4d41      	ldr	r5, [pc, #260]	; (3614 <trx_frame_read+0x130>)
    350e:	1c28      	adds	r0, r5, #0
    3510:	4941      	ldr	r1, [pc, #260]	; (3618 <trx_frame_read+0x134>)
    3512:	2201      	movs	r2, #1
    3514:	4b41      	ldr	r3, [pc, #260]	; (361c <trx_frame_read+0x138>)
    3516:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3518:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    351a:	2101      	movs	r1, #1
    351c:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    351e:	420a      	tst	r2, r1
    3520:	d0fc      	beq.n	351c <trx_frame_read+0x38>
    3522:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3524:	07d1      	lsls	r1, r2, #31
    3526:	d501      	bpl.n	352c <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3528:	2220      	movs	r2, #32
    352a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    352c:	2102      	movs	r1, #2
    352e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3530:	420a      	tst	r2, r1
    3532:	d0fc      	beq.n	352e <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3534:	2004      	movs	r0, #4
    3536:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3538:	4202      	tst	r2, r0
    353a:	d0fc      	beq.n	3536 <trx_frame_read+0x52>
    353c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    353e:	0750      	lsls	r0, r2, #29
    3540:	d50f      	bpl.n	3562 <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3542:	8b5a      	ldrh	r2, [r3, #26]
    3544:	0751      	lsls	r1, r2, #29
    3546:	d503      	bpl.n	3550 <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3548:	8b59      	ldrh	r1, [r3, #26]
    354a:	2204      	movs	r2, #4
    354c:	430a      	orrs	r2, r1
    354e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3550:	4a30      	ldr	r2, [pc, #192]	; (3614 <trx_frame_read+0x130>)
    3552:	7992      	ldrb	r2, [r2, #6]
    3554:	2a01      	cmp	r2, #1
    3556:	d109      	bne.n	356c <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    355a:	05d2      	lsls	r2, r2, #23
    355c:	0dd2      	lsrs	r2, r2, #23
    355e:	4b30      	ldr	r3, [pc, #192]	; (3620 <trx_frame_read+0x13c>)
    3560:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3562:	1e63      	subs	r3, r4, #1
    3564:	b2db      	uxtb	r3, r3
    3566:	2c00      	cmp	r4, #0
    3568:	d105      	bne.n	3576 <trx_frame_read+0x92>
    356a:	e03c      	b.n	35e6 <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    356c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    356e:	b2d2      	uxtb	r2, r2
    3570:	4b2b      	ldr	r3, [pc, #172]	; (3620 <trx_frame_read+0x13c>)
    3572:	801a      	strh	r2, [r3, #0]
    3574:	e7f5      	b.n	3562 <trx_frame_read+0x7e>
    3576:	3301      	adds	r3, #1
    3578:	199b      	adds	r3, r3, r6
    357a:	4699      	mov	r9, r3
    357c:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    357e:	4a25      	ldr	r2, [pc, #148]	; (3614 <trx_frame_read+0x130>)
    3580:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3582:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3584:	2300      	movs	r3, #0
    3586:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3588:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    358a:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    358c:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    358e:	2204      	movs	r2, #4
    3590:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3592:	4642      	mov	r2, r8
    3594:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3596:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3598:	4222      	tst	r2, r4
    359a:	d0fc      	beq.n	3596 <trx_frame_read+0xb2>
    359c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    359e:	4222      	tst	r2, r4
    35a0:	d001      	beq.n	35a6 <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    35a2:	4652      	mov	r2, sl
    35a4:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    35a6:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    35a8:	422a      	tst	r2, r5
    35aa:	d0fc      	beq.n	35a6 <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    35ac:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    35ae:	420a      	tst	r2, r1
    35b0:	d0fc      	beq.n	35ac <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35b2:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    35b4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    35b6:	420a      	tst	r2, r1
    35b8:	d011      	beq.n	35de <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    35ba:	8b5a      	ldrh	r2, [r3, #26]
    35bc:	420a      	tst	r2, r1
    35be:	d004      	beq.n	35ca <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    35c0:	8b5a      	ldrh	r2, [r3, #26]
    35c2:	4658      	mov	r0, fp
    35c4:	4302      	orrs	r2, r0
    35c6:	b292      	uxth	r2, r2
    35c8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    35ca:	4812      	ldr	r0, [pc, #72]	; (3614 <trx_frame_read+0x130>)
    35cc:	7982      	ldrb	r2, [r0, #6]
    35ce:	2a01      	cmp	r2, #1
    35d0:	d103      	bne.n	35da <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    35d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    35d4:	05c0      	lsls	r0, r0, #23
    35d6:	0dc0      	lsrs	r0, r0, #23
    35d8:	e001      	b.n	35de <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    35da:	6a98      	ldr	r0, [r3, #40]	; 0x28
    35dc:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    35de:	7030      	strb	r0, [r6, #0]
		data++;
    35e0:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    35e2:	454e      	cmp	r6, r9
    35e4:	d1d5      	bne.n	3592 <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    35e6:	480b      	ldr	r0, [pc, #44]	; (3614 <trx_frame_read+0x130>)
    35e8:	490b      	ldr	r1, [pc, #44]	; (3618 <trx_frame_read+0x134>)
    35ea:	2200      	movs	r2, #0
    35ec:	4b0b      	ldr	r3, [pc, #44]	; (361c <trx_frame_read+0x138>)
    35ee:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    35f0:	9901      	ldr	r1, [sp, #4]
    35f2:	2900      	cmp	r1, #0
    35f4:	d005      	beq.n	3602 <trx_frame_read+0x11e>
		cpu_irq_enable();
    35f6:	2201      	movs	r2, #1
    35f8:	4b05      	ldr	r3, [pc, #20]	; (3610 <trx_frame_read+0x12c>)
    35fa:	701a      	strb	r2, [r3, #0]
    35fc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3600:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3602:	b003      	add	sp, #12
    3604:	bc3c      	pop	{r2, r3, r4, r5}
    3606:	4690      	mov	r8, r2
    3608:	4699      	mov	r9, r3
    360a:	46a2      	mov	sl, r4
    360c:	46ab      	mov	fp, r5
    360e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3610:	20000008 	.word	0x20000008
    3614:	20000980 	.word	0x20000980
    3618:	20000944 	.word	0x20000944
    361c:	00000a1d 	.word	0x00000a1d
    3620:	2000093c 	.word	0x2000093c

00003624 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    3624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3626:	464f      	mov	r7, r9
    3628:	4646      	mov	r6, r8
    362a:	b4c0      	push	{r6, r7}
    362c:	1c04      	adds	r4, r0, #0
    362e:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3630:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3634:	4271      	negs	r1, r6
    3636:	4171      	adcs	r1, r6
    3638:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    363a:	b672      	cpsid	i
    363c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3640:	2200      	movs	r2, #0
    3642:	4b3c      	ldr	r3, [pc, #240]	; (3734 <trx_frame_write+0x110>)
    3644:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3646:	4f3c      	ldr	r7, [pc, #240]	; (3738 <trx_frame_write+0x114>)
    3648:	1c38      	adds	r0, r7, #0
    364a:	493c      	ldr	r1, [pc, #240]	; (373c <trx_frame_write+0x118>)
    364c:	2201      	movs	r2, #1
    364e:	4b3c      	ldr	r3, [pc, #240]	; (3740 <trx_frame_write+0x11c>)
    3650:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3652:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3654:	2101      	movs	r1, #1
    3656:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3658:	420a      	tst	r2, r1
    365a:	d0fc      	beq.n	3656 <trx_frame_write+0x32>
    365c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    365e:	07d1      	lsls	r1, r2, #31
    3660:	d501      	bpl.n	3666 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3662:	2260      	movs	r2, #96	; 0x60
    3664:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3666:	2102      	movs	r1, #2
    3668:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    366a:	420a      	tst	r2, r1
    366c:	d0fc      	beq.n	3668 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    366e:	2104      	movs	r1, #4
    3670:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3672:	420a      	tst	r2, r1
    3674:	d0fc      	beq.n	3670 <trx_frame_write+0x4c>
    3676:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3678:	0751      	lsls	r1, r2, #29
    367a:	d50f      	bpl.n	369c <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    367c:	8b5a      	ldrh	r2, [r3, #26]
    367e:	0751      	lsls	r1, r2, #29
    3680:	d503      	bpl.n	368a <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3682:	8b59      	ldrh	r1, [r3, #26]
    3684:	2204      	movs	r2, #4
    3686:	430a      	orrs	r2, r1
    3688:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    368a:	4a2b      	ldr	r2, [pc, #172]	; (3738 <trx_frame_write+0x114>)
    368c:	7992      	ldrb	r2, [r2, #6]
    368e:	2a01      	cmp	r2, #1
    3690:	d10e      	bne.n	36b0 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3692:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3694:	05c9      	lsls	r1, r1, #23
    3696:	0dc9      	lsrs	r1, r1, #23
    3698:	4a2a      	ldr	r2, [pc, #168]	; (3744 <trx_frame_write+0x120>)
    369a:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    369c:	4a26      	ldr	r2, [pc, #152]	; (3738 <trx_frame_write+0x114>)
    369e:	7992      	ldrb	r2, [r2, #6]
    36a0:	4690      	mov	r8, r2
    36a2:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    36a4:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    36a6:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    36a8:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    36aa:	2204      	movs	r2, #4
    36ac:	4694      	mov	ip, r2
    36ae:	e02b      	b.n	3708 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    36b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    36b2:	b2c9      	uxtb	r1, r1
    36b4:	4a23      	ldr	r2, [pc, #140]	; (3744 <trx_frame_write+0x120>)
    36b6:	8011      	strh	r1, [r2, #0]
    36b8:	e7f0      	b.n	369c <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    36ba:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    36bc:	423a      	tst	r2, r7
    36be:	d0fc      	beq.n	36ba <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    36c0:	7831      	ldrb	r1, [r6, #0]
    36c2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    36c4:	423a      	tst	r2, r7
    36c6:	d000      	beq.n	36ca <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    36c8:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    36ca:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    36cc:	4202      	tst	r2, r0
    36ce:	d0fc      	beq.n	36ca <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    36d0:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    36d2:	4222      	tst	r2, r4
    36d4:	d0fc      	beq.n	36d0 <trx_frame_write+0xac>
    36d6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    36d8:	4222      	tst	r2, r4
    36da:	d014      	beq.n	3706 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    36dc:	8b5a      	ldrh	r2, [r3, #26]
    36de:	4222      	tst	r2, r4
    36e0:	d004      	beq.n	36ec <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    36e2:	8b5a      	ldrh	r2, [r3, #26]
    36e4:	4661      	mov	r1, ip
    36e6:	430a      	orrs	r2, r1
    36e8:	b292      	uxth	r2, r2
    36ea:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    36ec:	4642      	mov	r2, r8
    36ee:	2a01      	cmp	r2, #1
    36f0:	d105      	bne.n	36fe <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    36f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    36f4:	05d2      	lsls	r2, r2, #23
    36f6:	0dd2      	lsrs	r2, r2, #23
    36f8:	4912      	ldr	r1, [pc, #72]	; (3744 <trx_frame_write+0x120>)
    36fa:	800a      	strh	r2, [r1, #0]
    36fc:	e003      	b.n	3706 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    36fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3700:	b2d2      	uxtb	r2, r2
    3702:	4910      	ldr	r1, [pc, #64]	; (3744 <trx_frame_write+0x120>)
    3704:	800a      	strh	r2, [r1, #0]
    3706:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    3708:	3d01      	subs	r5, #1
    370a:	b2ed      	uxtb	r5, r5
    370c:	2dff      	cmp	r5, #255	; 0xff
    370e:	d1d4      	bne.n	36ba <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3710:	4809      	ldr	r0, [pc, #36]	; (3738 <trx_frame_write+0x114>)
    3712:	490a      	ldr	r1, [pc, #40]	; (373c <trx_frame_write+0x118>)
    3714:	2200      	movs	r2, #0
    3716:	4b0a      	ldr	r3, [pc, #40]	; (3740 <trx_frame_write+0x11c>)
    3718:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    371a:	464a      	mov	r2, r9
    371c:	2a00      	cmp	r2, #0
    371e:	d005      	beq.n	372c <trx_frame_write+0x108>
		cpu_irq_enable();
    3720:	2201      	movs	r2, #1
    3722:	4b04      	ldr	r3, [pc, #16]	; (3734 <trx_frame_write+0x110>)
    3724:	701a      	strb	r2, [r3, #0]
    3726:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    372a:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    372c:	bc0c      	pop	{r2, r3}
    372e:	4690      	mov	r8, r2
    3730:	4699      	mov	r9, r3
    3732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3734:	20000008 	.word	0x20000008
    3738:	20000980 	.word	0x20000980
    373c:	20000944 	.word	0x20000944
    3740:	00000a1d 	.word	0x00000a1d
    3744:	2000093c 	.word	0x2000093c

00003748 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    3748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    374a:	464f      	mov	r7, r9
    374c:	4646      	mov	r6, r8
    374e:	b4c0      	push	{r6, r7}
    3750:	1c07      	adds	r7, r0, #0
    3752:	1c0c      	adds	r4, r1, #0
    3754:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3756:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    375a:	4271      	negs	r1, r6
    375c:	4171      	adcs	r1, r6
    375e:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3760:	b672      	cpsid	i
    3762:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3766:	2200      	movs	r2, #0
    3768:	4b50      	ldr	r3, [pc, #320]	; (38ac <trx_sram_write+0x164>)
    376a:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    376c:	4e50      	ldr	r6, [pc, #320]	; (38b0 <trx_sram_write+0x168>)
    376e:	1c30      	adds	r0, r6, #0
    3770:	4950      	ldr	r1, [pc, #320]	; (38b4 <trx_sram_write+0x16c>)
    3772:	2201      	movs	r2, #1
    3774:	4b50      	ldr	r3, [pc, #320]	; (38b8 <trx_sram_write+0x170>)
    3776:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3778:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    377a:	2101      	movs	r1, #1
    377c:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    377e:	420a      	tst	r2, r1
    3780:	d0fc      	beq.n	377c <trx_sram_write+0x34>
    3782:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3784:	07d1      	lsls	r1, r2, #31
    3786:	d501      	bpl.n	378c <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3788:	2240      	movs	r2, #64	; 0x40
    378a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    378c:	2102      	movs	r1, #2
    378e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3790:	420a      	tst	r2, r1
    3792:	d0fc      	beq.n	378e <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3794:	2104      	movs	r1, #4
    3796:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3798:	420a      	tst	r2, r1
    379a:	d0fc      	beq.n	3796 <trx_sram_write+0x4e>
    379c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    379e:	0751      	lsls	r1, r2, #29
    37a0:	d514      	bpl.n	37cc <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    37a2:	8b5a      	ldrh	r2, [r3, #26]
    37a4:	0751      	lsls	r1, r2, #29
    37a6:	d503      	bpl.n	37b0 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    37a8:	8b59      	ldrh	r1, [r3, #26]
    37aa:	2204      	movs	r2, #4
    37ac:	430a      	orrs	r2, r1
    37ae:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    37b0:	4a3f      	ldr	r2, [pc, #252]	; (38b0 <trx_sram_write+0x168>)
    37b2:	7992      	ldrb	r2, [r2, #6]
    37b4:	2a01      	cmp	r2, #1
    37b6:	d105      	bne.n	37c4 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    37b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    37ba:	05c9      	lsls	r1, r1, #23
    37bc:	0dc9      	lsrs	r1, r1, #23
    37be:	4a3f      	ldr	r2, [pc, #252]	; (38bc <trx_sram_write+0x174>)
    37c0:	8011      	strh	r1, [r2, #0]
    37c2:	e003      	b.n	37cc <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    37c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    37c6:	b2c9      	uxtb	r1, r1
    37c8:	4a3c      	ldr	r2, [pc, #240]	; (38bc <trx_sram_write+0x174>)
    37ca:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    37cc:	2101      	movs	r1, #1
    37ce:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    37d0:	420a      	tst	r2, r1
    37d2:	d0fc      	beq.n	37ce <trx_sram_write+0x86>
    37d4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    37d6:	07d1      	lsls	r1, r2, #31
    37d8:	d500      	bpl.n	37dc <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    37da:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    37dc:	2102      	movs	r1, #2
    37de:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    37e0:	420a      	tst	r2, r1
    37e2:	d0fc      	beq.n	37de <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    37e4:	2104      	movs	r1, #4
    37e6:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    37e8:	420a      	tst	r2, r1
    37ea:	d0fc      	beq.n	37e6 <trx_sram_write+0x9e>
    37ec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    37ee:	0751      	lsls	r1, r2, #29
    37f0:	d50f      	bpl.n	3812 <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    37f2:	8b5a      	ldrh	r2, [r3, #26]
    37f4:	0751      	lsls	r1, r2, #29
    37f6:	d503      	bpl.n	3800 <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    37f8:	8b59      	ldrh	r1, [r3, #26]
    37fa:	2204      	movs	r2, #4
    37fc:	430a      	orrs	r2, r1
    37fe:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3800:	4a2b      	ldr	r2, [pc, #172]	; (38b0 <trx_sram_write+0x168>)
    3802:	7992      	ldrb	r2, [r2, #6]
    3804:	2a01      	cmp	r2, #1
    3806:	d10e      	bne.n	3826 <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3808:	6a99      	ldr	r1, [r3, #40]	; 0x28
    380a:	05c9      	lsls	r1, r1, #23
    380c:	0dc9      	lsrs	r1, r1, #23
    380e:	4a2b      	ldr	r2, [pc, #172]	; (38bc <trx_sram_write+0x174>)
    3810:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3812:	4a27      	ldr	r2, [pc, #156]	; (38b0 <trx_sram_write+0x168>)
    3814:	7992      	ldrb	r2, [r2, #6]
    3816:	4690      	mov	r8, r2
    3818:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    381a:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    381c:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    381e:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3820:	2204      	movs	r2, #4
    3822:	4694      	mov	ip, r2
    3824:	e02b      	b.n	387e <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3826:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3828:	b2c9      	uxtb	r1, r1
    382a:	4a24      	ldr	r2, [pc, #144]	; (38bc <trx_sram_write+0x174>)
    382c:	8011      	strh	r1, [r2, #0]
    382e:	e7f0      	b.n	3812 <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3830:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    3832:	4238      	tst	r0, r7
    3834:	d0fc      	beq.n	3830 <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    3836:	7832      	ldrb	r2, [r6, #0]
    3838:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    383a:	4238      	tst	r0, r7
    383c:	d000      	beq.n	3840 <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    383e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3840:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3842:	4208      	tst	r0, r1
    3844:	d0fc      	beq.n	3840 <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3846:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    3848:	4220      	tst	r0, r4
    384a:	d0fc      	beq.n	3846 <trx_sram_write+0xfe>
    384c:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    384e:	4220      	tst	r0, r4
    3850:	d014      	beq.n	387c <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3852:	8b58      	ldrh	r0, [r3, #26]
    3854:	4220      	tst	r0, r4
    3856:	d004      	beq.n	3862 <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3858:	8b58      	ldrh	r0, [r3, #26]
    385a:	4662      	mov	r2, ip
    385c:	4310      	orrs	r0, r2
    385e:	b280      	uxth	r0, r0
    3860:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3862:	4642      	mov	r2, r8
    3864:	2a01      	cmp	r2, #1
    3866:	d105      	bne.n	3874 <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3868:	6a98      	ldr	r0, [r3, #40]	; 0x28
    386a:	05c0      	lsls	r0, r0, #23
    386c:	0dc0      	lsrs	r0, r0, #23
    386e:	4a13      	ldr	r2, [pc, #76]	; (38bc <trx_sram_write+0x174>)
    3870:	8010      	strh	r0, [r2, #0]
    3872:	e003      	b.n	387c <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3874:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3876:	b2c0      	uxtb	r0, r0
    3878:	4a10      	ldr	r2, [pc, #64]	; (38bc <trx_sram_write+0x174>)
    387a:	8010      	strh	r0, [r2, #0]
    387c:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    387e:	3d01      	subs	r5, #1
    3880:	b2ed      	uxtb	r5, r5
    3882:	2dff      	cmp	r5, #255	; 0xff
    3884:	d1d4      	bne.n	3830 <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3886:	480a      	ldr	r0, [pc, #40]	; (38b0 <trx_sram_write+0x168>)
    3888:	490a      	ldr	r1, [pc, #40]	; (38b4 <trx_sram_write+0x16c>)
    388a:	2200      	movs	r2, #0
    388c:	4b0a      	ldr	r3, [pc, #40]	; (38b8 <trx_sram_write+0x170>)
    388e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3890:	464b      	mov	r3, r9
    3892:	2b00      	cmp	r3, #0
    3894:	d005      	beq.n	38a2 <trx_sram_write+0x15a>
		cpu_irq_enable();
    3896:	2201      	movs	r2, #1
    3898:	4b04      	ldr	r3, [pc, #16]	; (38ac <trx_sram_write+0x164>)
    389a:	701a      	strb	r2, [r3, #0]
    389c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    38a0:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    38a2:	bc0c      	pop	{r2, r3}
    38a4:	4690      	mov	r8, r2
    38a6:	4699      	mov	r9, r3
    38a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38aa:	46c0      	nop			; (mov r8, r8)
    38ac:	20000008 	.word	0x20000008
    38b0:	20000980 	.word	0x20000980
    38b4:	20000944 	.word	0x20000944
    38b8:	00000a1d 	.word	0x00000a1d
    38bc:	2000093c 	.word	0x2000093c

000038c0 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    38c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38c2:	465f      	mov	r7, fp
    38c4:	4656      	mov	r6, sl
    38c6:	464d      	mov	r5, r9
    38c8:	4644      	mov	r4, r8
    38ca:	b4f0      	push	{r4, r5, r6, r7}
    38cc:	b083      	sub	sp, #12
    38ce:	1c05      	adds	r5, r0, #0
    38d0:	1c0e      	adds	r6, r1, #0
    38d2:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    38d4:	2001      	movs	r0, #1
    38d6:	4b5b      	ldr	r3, [pc, #364]	; (3a44 <trx_sram_read+0x184>)
    38d8:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    38da:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    38de:	4279      	negs	r1, r7
    38e0:	4179      	adcs	r1, r7
    38e2:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    38e4:	b672      	cpsid	i
    38e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    38ea:	2200      	movs	r2, #0
    38ec:	4b56      	ldr	r3, [pc, #344]	; (3a48 <trx_sram_read+0x188>)
    38ee:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    38f0:	4f56      	ldr	r7, [pc, #344]	; (3a4c <trx_sram_read+0x18c>)
    38f2:	1c38      	adds	r0, r7, #0
    38f4:	4956      	ldr	r1, [pc, #344]	; (3a50 <trx_sram_read+0x190>)
    38f6:	2201      	movs	r2, #1
    38f8:	4b56      	ldr	r3, [pc, #344]	; (3a54 <trx_sram_read+0x194>)
    38fa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    38fc:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    38fe:	2101      	movs	r1, #1
    3900:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3902:	420a      	tst	r2, r1
    3904:	d0fc      	beq.n	3900 <trx_sram_read+0x40>
    3906:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3908:	07d1      	lsls	r1, r2, #31
    390a:	d501      	bpl.n	3910 <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    390c:	2200      	movs	r2, #0
    390e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3910:	2102      	movs	r1, #2
    3912:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3914:	420a      	tst	r2, r1
    3916:	d0fc      	beq.n	3912 <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3918:	2204      	movs	r2, #4
    391a:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    391c:	4211      	tst	r1, r2
    391e:	d0fc      	beq.n	391a <trx_sram_read+0x5a>
    3920:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3922:	0751      	lsls	r1, r2, #29
    3924:	d514      	bpl.n	3950 <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3926:	8b5a      	ldrh	r2, [r3, #26]
    3928:	0751      	lsls	r1, r2, #29
    392a:	d503      	bpl.n	3934 <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    392c:	8b59      	ldrh	r1, [r3, #26]
    392e:	2204      	movs	r2, #4
    3930:	430a      	orrs	r2, r1
    3932:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3934:	4a45      	ldr	r2, [pc, #276]	; (3a4c <trx_sram_read+0x18c>)
    3936:	7992      	ldrb	r2, [r2, #6]
    3938:	2a01      	cmp	r2, #1
    393a:	d105      	bne.n	3948 <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    393c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    393e:	05c9      	lsls	r1, r1, #23
    3940:	0dc9      	lsrs	r1, r1, #23
    3942:	4a45      	ldr	r2, [pc, #276]	; (3a58 <trx_sram_read+0x198>)
    3944:	8011      	strh	r1, [r2, #0]
    3946:	e003      	b.n	3950 <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3948:	6a99      	ldr	r1, [r3, #40]	; 0x28
    394a:	b2c9      	uxtb	r1, r1
    394c:	4a42      	ldr	r2, [pc, #264]	; (3a58 <trx_sram_read+0x198>)
    394e:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3950:	2201      	movs	r2, #1
    3952:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    3954:	4211      	tst	r1, r2
    3956:	d0fc      	beq.n	3952 <trx_sram_read+0x92>
    3958:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    395a:	07d1      	lsls	r1, r2, #31
    395c:	d500      	bpl.n	3960 <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    395e:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3960:	2202      	movs	r2, #2
    3962:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3964:	4211      	tst	r1, r2
    3966:	d0fc      	beq.n	3962 <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3968:	2204      	movs	r2, #4
    396a:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    396c:	4211      	tst	r1, r2
    396e:	d0fc      	beq.n	396a <trx_sram_read+0xaa>
    3970:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3972:	0751      	lsls	r1, r2, #29
    3974:	d50f      	bpl.n	3996 <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3976:	8b5a      	ldrh	r2, [r3, #26]
    3978:	0751      	lsls	r1, r2, #29
    397a:	d503      	bpl.n	3984 <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    397c:	8b59      	ldrh	r1, [r3, #26]
    397e:	2204      	movs	r2, #4
    3980:	430a      	orrs	r2, r1
    3982:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3984:	4a31      	ldr	r2, [pc, #196]	; (3a4c <trx_sram_read+0x18c>)
    3986:	7992      	ldrb	r2, [r2, #6]
    3988:	2a01      	cmp	r2, #1
    398a:	d109      	bne.n	39a0 <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    398c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    398e:	05d2      	lsls	r2, r2, #23
    3990:	0dd2      	lsrs	r2, r2, #23
    3992:	4b31      	ldr	r3, [pc, #196]	; (3a58 <trx_sram_read+0x198>)
    3994:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    3996:	1e63      	subs	r3, r4, #1
    3998:	b2db      	uxtb	r3, r3
    399a:	2c00      	cmp	r4, #0
    399c:	d105      	bne.n	39aa <trx_sram_read+0xea>
    399e:	e03b      	b.n	3a18 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    39a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    39a2:	b2d2      	uxtb	r2, r2
    39a4:	4b2c      	ldr	r3, [pc, #176]	; (3a58 <trx_sram_read+0x198>)
    39a6:	801a      	strh	r2, [r3, #0]
    39a8:	e7f5      	b.n	3996 <trx_sram_read+0xd6>
    39aa:	3301      	adds	r3, #1
    39ac:	199b      	adds	r3, r3, r6
    39ae:	4699      	mov	r9, r3
    39b0:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    39b2:	4a26      	ldr	r2, [pc, #152]	; (3a4c <trx_sram_read+0x18c>)
    39b4:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    39b6:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    39b8:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    39ba:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    39bc:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    39be:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    39c0:	2204      	movs	r2, #4
    39c2:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    39c4:	4642      	mov	r2, r8
    39c6:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    39c8:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    39ca:	4222      	tst	r2, r4
    39cc:	d0fc      	beq.n	39c8 <trx_sram_read+0x108>
    39ce:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    39d0:	4222      	tst	r2, r4
    39d2:	d001      	beq.n	39d8 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    39d4:	4652      	mov	r2, sl
    39d6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    39d8:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    39da:	422a      	tst	r2, r5
    39dc:	d0fc      	beq.n	39d8 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    39de:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    39e0:	4202      	tst	r2, r0
    39e2:	d0fc      	beq.n	39de <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    39e4:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    39e6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    39e8:	4202      	tst	r2, r0
    39ea:	d011      	beq.n	3a10 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    39ec:	8b5a      	ldrh	r2, [r3, #26]
    39ee:	4202      	tst	r2, r0
    39f0:	d004      	beq.n	39fc <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    39f2:	8b5a      	ldrh	r2, [r3, #26]
    39f4:	4659      	mov	r1, fp
    39f6:	430a      	orrs	r2, r1
    39f8:	b292      	uxth	r2, r2
    39fa:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    39fc:	4913      	ldr	r1, [pc, #76]	; (3a4c <trx_sram_read+0x18c>)
    39fe:	798a      	ldrb	r2, [r1, #6]
    3a00:	2a01      	cmp	r2, #1
    3a02:	d103      	bne.n	3a0c <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3a04:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3a06:	05c9      	lsls	r1, r1, #23
    3a08:	0dc9      	lsrs	r1, r1, #23
    3a0a:	e001      	b.n	3a10 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3a0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3a0e:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    3a10:	7031      	strb	r1, [r6, #0]
		data++;
    3a12:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    3a14:	454e      	cmp	r6, r9
    3a16:	d1d5      	bne.n	39c4 <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3a18:	480c      	ldr	r0, [pc, #48]	; (3a4c <trx_sram_read+0x18c>)
    3a1a:	490d      	ldr	r1, [pc, #52]	; (3a50 <trx_sram_read+0x190>)
    3a1c:	2200      	movs	r2, #0
    3a1e:	4b0d      	ldr	r3, [pc, #52]	; (3a54 <trx_sram_read+0x194>)
    3a20:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3a22:	9a01      	ldr	r2, [sp, #4]
    3a24:	2a00      	cmp	r2, #0
    3a26:	d005      	beq.n	3a34 <trx_sram_read+0x174>
		cpu_irq_enable();
    3a28:	2201      	movs	r2, #1
    3a2a:	4b07      	ldr	r3, [pc, #28]	; (3a48 <trx_sram_read+0x188>)
    3a2c:	701a      	strb	r2, [r3, #0]
    3a2e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3a32:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3a34:	b003      	add	sp, #12
    3a36:	bc3c      	pop	{r2, r3, r4, r5}
    3a38:	4690      	mov	r8, r2
    3a3a:	4699      	mov	r9, r3
    3a3c:	46a2      	mov	sl, r4
    3a3e:	46ab      	mov	fp, r5
    3a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	00000151 	.word	0x00000151
    3a48:	20000008 	.word	0x20000008
    3a4c:	20000980 	.word	0x20000980
    3a50:	20000944 	.word	0x20000944
    3a54:	00000a1d 	.word	0x00000a1d
    3a58:	2000093c 	.word	0x2000093c

00003a5c <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    3a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a5e:	465f      	mov	r7, fp
    3a60:	4656      	mov	r6, sl
    3a62:	464d      	mov	r5, r9
    3a64:	4644      	mov	r4, r8
    3a66:	b4f0      	push	{r4, r5, r6, r7}
    3a68:	b083      	sub	sp, #12
    3a6a:	1c05      	adds	r5, r0, #0
    3a6c:	4688      	mov	r8, r1
    3a6e:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    3a70:	2001      	movs	r0, #1
    3a72:	4b83      	ldr	r3, [pc, #524]	; (3c80 <trx_aes_wrrd+0x224>)
    3a74:	4798      	blx	r3

	ENTER_TRX_REGION();
    3a76:	2000      	movs	r0, #0
    3a78:	2100      	movs	r1, #0
    3a7a:	4b82      	ldr	r3, [pc, #520]	; (3c84 <trx_aes_wrrd+0x228>)
    3a7c:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3a7e:	4e82      	ldr	r6, [pc, #520]	; (3c88 <trx_aes_wrrd+0x22c>)
    3a80:	1c30      	adds	r0, r6, #0
    3a82:	4982      	ldr	r1, [pc, #520]	; (3c8c <trx_aes_wrrd+0x230>)
    3a84:	2201      	movs	r2, #1
    3a86:	4b82      	ldr	r3, [pc, #520]	; (3c90 <trx_aes_wrrd+0x234>)
    3a88:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a8a:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a8c:	2101      	movs	r1, #1
    3a8e:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    3a90:	420a      	tst	r2, r1
    3a92:	d0fc      	beq.n	3a8e <trx_aes_wrrd+0x32>
    3a94:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3a96:	07d0      	lsls	r0, r2, #31
    3a98:	d501      	bpl.n	3a9e <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3a9a:	2240      	movs	r2, #64	; 0x40
    3a9c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a9e:	2102      	movs	r1, #2
    3aa0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3aa2:	420a      	tst	r2, r1
    3aa4:	d0fc      	beq.n	3aa0 <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3aa6:	2104      	movs	r1, #4
    3aa8:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3aaa:	420a      	tst	r2, r1
    3aac:	d0fc      	beq.n	3aa8 <trx_aes_wrrd+0x4c>
    3aae:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3ab0:	0751      	lsls	r1, r2, #29
    3ab2:	d514      	bpl.n	3ade <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ab4:	8b5a      	ldrh	r2, [r3, #26]
    3ab6:	0756      	lsls	r6, r2, #29
    3ab8:	d503      	bpl.n	3ac2 <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3aba:	8b59      	ldrh	r1, [r3, #26]
    3abc:	2204      	movs	r2, #4
    3abe:	430a      	orrs	r2, r1
    3ac0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ac2:	4a71      	ldr	r2, [pc, #452]	; (3c88 <trx_aes_wrrd+0x22c>)
    3ac4:	7992      	ldrb	r2, [r2, #6]
    3ac6:	2a01      	cmp	r2, #1
    3ac8:	d105      	bne.n	3ad6 <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3aca:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3acc:	05c9      	lsls	r1, r1, #23
    3ace:	0dc9      	lsrs	r1, r1, #23
    3ad0:	4a70      	ldr	r2, [pc, #448]	; (3c94 <trx_aes_wrrd+0x238>)
    3ad2:	8011      	strh	r1, [r2, #0]
    3ad4:	e003      	b.n	3ade <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ad6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ad8:	b2c9      	uxtb	r1, r1
    3ada:	4a6e      	ldr	r2, [pc, #440]	; (3c94 <trx_aes_wrrd+0x238>)
    3adc:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ade:	2101      	movs	r1, #1
    3ae0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    3ae2:	420a      	tst	r2, r1
    3ae4:	d0fc      	beq.n	3ae0 <trx_aes_wrrd+0x84>
    3ae6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3ae8:	07d0      	lsls	r0, r2, #31
    3aea:	d500      	bpl.n	3aee <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3aec:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3aee:	2102      	movs	r1, #2
    3af0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3af2:	420a      	tst	r2, r1
    3af4:	d0fc      	beq.n	3af0 <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3af6:	2204      	movs	r2, #4
    3af8:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3afa:	4211      	tst	r1, r2
    3afc:	d0fc      	beq.n	3af8 <trx_aes_wrrd+0x9c>
    3afe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3b00:	0751      	lsls	r1, r2, #29
    3b02:	d514      	bpl.n	3b2e <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b04:	8b5a      	ldrh	r2, [r3, #26]
    3b06:	0756      	lsls	r6, r2, #29
    3b08:	d503      	bpl.n	3b12 <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3b0a:	8b59      	ldrh	r1, [r3, #26]
    3b0c:	2204      	movs	r2, #4
    3b0e:	430a      	orrs	r2, r1
    3b10:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b12:	4a5d      	ldr	r2, [pc, #372]	; (3c88 <trx_aes_wrrd+0x22c>)
    3b14:	7992      	ldrb	r2, [r2, #6]
    3b16:	2a01      	cmp	r2, #1
    3b18:	d105      	bne.n	3b26 <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3b1c:	05c9      	lsls	r1, r1, #23
    3b1e:	0dc9      	lsrs	r1, r1, #23
    3b20:	4a5c      	ldr	r2, [pc, #368]	; (3c94 <trx_aes_wrrd+0x238>)
    3b22:	8011      	strh	r1, [r2, #0]
    3b24:	e003      	b.n	3b2e <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b26:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3b28:	b2c9      	uxtb	r1, r1
    3b2a:	4a5a      	ldr	r2, [pc, #360]	; (3c94 <trx_aes_wrrd+0x238>)
    3b2c:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b2e:	2201      	movs	r2, #1
    3b30:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    3b32:	4211      	tst	r1, r2
    3b34:	d0fc      	beq.n	3b30 <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    3b36:	4640      	mov	r0, r8
    3b38:	7801      	ldrb	r1, [r0, #0]
    3b3a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3b3c:	07d6      	lsls	r6, r2, #31
    3b3e:	d500      	bpl.n	3b42 <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b40:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b42:	2202      	movs	r2, #2
    3b44:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    3b46:	4211      	tst	r1, r2
    3b48:	d0fc      	beq.n	3b44 <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b4a:	2204      	movs	r2, #4
    3b4c:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3b4e:	4211      	tst	r1, r2
    3b50:	d0fc      	beq.n	3b4c <trx_aes_wrrd+0xf0>
    3b52:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3b54:	0750      	lsls	r0, r2, #29
    3b56:	d50f      	bpl.n	3b78 <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b58:	8b5a      	ldrh	r2, [r3, #26]
    3b5a:	0751      	lsls	r1, r2, #29
    3b5c:	d503      	bpl.n	3b66 <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3b5e:	8b59      	ldrh	r1, [r3, #26]
    3b60:	2204      	movs	r2, #4
    3b62:	430a      	orrs	r2, r1
    3b64:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b66:	4a48      	ldr	r2, [pc, #288]	; (3c88 <trx_aes_wrrd+0x22c>)
    3b68:	7992      	ldrb	r2, [r2, #6]
    3b6a:	2a01      	cmp	r2, #1
    3b6c:	d108      	bne.n	3b80 <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b70:	05d2      	lsls	r2, r2, #23
    3b72:	0dd2      	lsrs	r2, r2, #23
    3b74:	4b47      	ldr	r3, [pc, #284]	; (3c94 <trx_aes_wrrd+0x238>)
    3b76:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    3b78:	2100      	movs	r1, #0
    3b7a:	2c00      	cmp	r4, #0
    3b7c:	d047      	beq.n	3c0e <trx_aes_wrrd+0x1b2>
    3b7e:	e004      	b.n	3b8a <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3b82:	b2d2      	uxtb	r2, r2
    3b84:	4b43      	ldr	r3, [pc, #268]	; (3c94 <trx_aes_wrrd+0x238>)
    3b86:	801a      	strh	r2, [r3, #0]
    3b88:	e7f6      	b.n	3b78 <trx_aes_wrrd+0x11c>
    3b8a:	4645      	mov	r5, r8
    3b8c:	3c01      	subs	r4, #1
    3b8e:	b2e4      	uxtb	r4, r4
    3b90:	9401      	str	r4, [sp, #4]
    3b92:	1c23      	adds	r3, r4, #0
    3b94:	4443      	add	r3, r8
    3b96:	3301      	adds	r3, #1
    3b98:	469b      	mov	fp, r3
    3b9a:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b9c:	4b3a      	ldr	r3, [pc, #232]	; (3c88 <trx_aes_wrrd+0x22c>)
    3b9e:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ba0:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ba2:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ba4:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3ba6:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ba8:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3baa:	4656      	mov	r6, sl
    3bac:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3bae:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    3bb0:	4206      	tst	r6, r0
    3bb2:	d0fc      	beq.n	3bae <trx_aes_wrrd+0x152>
    3bb4:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    3bb6:	786e      	ldrb	r6, [r5, #1]
    3bb8:	46b3      	mov	fp, r6
    3bba:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3bbc:	4206      	tst	r6, r0
    3bbe:	d001      	beq.n	3bc4 <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3bc0:	465e      	mov	r6, fp
    3bc2:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3bc4:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    3bc6:	4226      	tst	r6, r4
    3bc8:	d0fc      	beq.n	3bc4 <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3bca:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    3bcc:	4216      	tst	r6, r2
    3bce:	d0fc      	beq.n	3bca <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3bd0:	464e      	mov	r6, r9
    3bd2:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3bd4:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3bd6:	4216      	tst	r6, r2
    3bd8:	d011      	beq.n	3bfe <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3bda:	8b59      	ldrh	r1, [r3, #26]
    3bdc:	4211      	tst	r1, r2
    3bde:	d004      	beq.n	3bea <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3be0:	8b59      	ldrh	r1, [r3, #26]
    3be2:	2604      	movs	r6, #4
    3be4:	4331      	orrs	r1, r6
    3be6:	b289      	uxth	r1, r1
    3be8:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bea:	4e27      	ldr	r6, [pc, #156]	; (3c88 <trx_aes_wrrd+0x22c>)
    3bec:	79b1      	ldrb	r1, [r6, #6]
    3bee:	2901      	cmp	r1, #1
    3bf0:	d103      	bne.n	3bfa <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3bf2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3bf4:	05c9      	lsls	r1, r1, #23
    3bf6:	0dc9      	lsrs	r1, r1, #23
    3bf8:	e001      	b.n	3bfe <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3bfa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3bfc:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    3bfe:	4663      	mov	r3, ip
    3c00:	7019      	strb	r1, [r3, #0]
    3c02:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    3c04:	42bd      	cmp	r5, r7
    3c06:	d1d0      	bne.n	3baa <trx_aes_wrrd+0x14e>
    3c08:	9b01      	ldr	r3, [sp, #4]
    3c0a:	3301      	adds	r3, #1
    3c0c:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c0e:	4b1e      	ldr	r3, [pc, #120]	; (3c88 <trx_aes_wrrd+0x22c>)
    3c10:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c12:	2001      	movs	r0, #1
    3c14:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    3c16:	4202      	tst	r2, r0
    3c18:	d0fc      	beq.n	3c14 <trx_aes_wrrd+0x1b8>
    3c1a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3c1c:	07d6      	lsls	r6, r2, #31
    3c1e:	d501      	bpl.n	3c24 <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3c20:	2200      	movs	r2, #0
    3c22:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3c24:	2002      	movs	r0, #2
    3c26:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3c28:	4202      	tst	r2, r0
    3c2a:	d0fc      	beq.n	3c26 <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3c2c:	2004      	movs	r0, #4
    3c2e:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    3c30:	4202      	tst	r2, r0
    3c32:	d0fc      	beq.n	3c2e <trx_aes_wrrd+0x1d2>
    3c34:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3c36:	0750      	lsls	r0, r2, #29
    3c38:	d510      	bpl.n	3c5c <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3c3a:	8b5a      	ldrh	r2, [r3, #26]
    3c3c:	0751      	lsls	r1, r2, #29
    3c3e:	d503      	bpl.n	3c48 <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3c40:	8b59      	ldrh	r1, [r3, #26]
    3c42:	2204      	movs	r2, #4
    3c44:	430a      	orrs	r2, r1
    3c46:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3c48:	4a0f      	ldr	r2, [pc, #60]	; (3c88 <trx_aes_wrrd+0x22c>)
    3c4a:	7992      	ldrb	r2, [r2, #6]
    3c4c:	2a01      	cmp	r2, #1
    3c4e:	d103      	bne.n	3c58 <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3c50:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c52:	05c9      	lsls	r1, r1, #23
    3c54:	0dc9      	lsrs	r1, r1, #23
    3c56:	e001      	b.n	3c5c <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3c58:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3c5a:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    3c5c:	4642      	mov	r2, r8
    3c5e:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3c60:	4809      	ldr	r0, [pc, #36]	; (3c88 <trx_aes_wrrd+0x22c>)
    3c62:	490a      	ldr	r1, [pc, #40]	; (3c8c <trx_aes_wrrd+0x230>)
    3c64:	2200      	movs	r2, #0
    3c66:	4b0a      	ldr	r3, [pc, #40]	; (3c90 <trx_aes_wrrd+0x234>)
    3c68:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    3c6a:	2000      	movs	r0, #0
    3c6c:	2100      	movs	r1, #0
    3c6e:	4b0a      	ldr	r3, [pc, #40]	; (3c98 <trx_aes_wrrd+0x23c>)
    3c70:	4798      	blx	r3
}
    3c72:	b003      	add	sp, #12
    3c74:	bc3c      	pop	{r2, r3, r4, r5}
    3c76:	4690      	mov	r8, r2
    3c78:	4699      	mov	r9, r3
    3c7a:	46a2      	mov	sl, r4
    3c7c:	46ab      	mov	fp, r5
    3c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c80:	00000151 	.word	0x00000151
    3c84:	0000030d 	.word	0x0000030d
    3c88:	20000980 	.word	0x20000980
    3c8c:	20000944 	.word	0x20000944
    3c90:	00000a1d 	.word	0x00000a1d
    3c94:	2000093c 	.word	0x2000093c
    3c98:	000002ed 	.word	0x000002ed

00003c9c <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	if (NWK_SUCCESS_STATUS == req->status){
    3c9c:	7f03      	ldrb	r3, [r0, #28]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d106      	bne.n	3cb0 <appDataConf+0x14>
		appDataReqBusy = false;
    3ca2:	2200      	movs	r2, #0
    3ca4:	4b03      	ldr	r3, [pc, #12]	; (3cb4 <appDataConf+0x18>)
    3ca6:	701a      	strb	r2, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3ca8:	2280      	movs	r2, #128	; 0x80
    3caa:	0312      	lsls	r2, r2, #12
    3cac:	4b02      	ldr	r3, [pc, #8]	; (3cb8 <appDataConf+0x1c>)
    3cae:	61da      	str	r2, [r3, #28]
		LED_Toggle(LED0);
	}
}		
    3cb0:	4770      	bx	lr
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	20000791 	.word	0x20000791
    3cb8:	41004400 	.word	0x41004400

00003cbc <appSendData>:

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
    3cbc:	b570      	push	{r4, r5, r6, lr}
	if (appDataReqBusy || 0 == appUartBufferPtr) {
    3cbe:	4b11      	ldr	r3, [pc, #68]	; (3d04 <appSendData+0x48>)
    3cc0:	781b      	ldrb	r3, [r3, #0]
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d11d      	bne.n	3d02 <appSendData+0x46>
    3cc6:	4b10      	ldr	r3, [pc, #64]	; (3d08 <appSendData+0x4c>)
    3cc8:	781c      	ldrb	r4, [r3, #0]
    3cca:	2c00      	cmp	r4, #0
    3ccc:	d019      	beq.n	3d02 <appSendData+0x46>
		return;
	}

	memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
    3cce:	4e0f      	ldr	r6, [pc, #60]	; (3d0c <appSendData+0x50>)
    3cd0:	1c30      	adds	r0, r6, #0
    3cd2:	490f      	ldr	r1, [pc, #60]	; (3d10 <appSendData+0x54>)
    3cd4:	1c22      	adds	r2, r4, #0
    3cd6:	4b0f      	ldr	r3, [pc, #60]	; (3d14 <appSendData+0x58>)
    3cd8:	4798      	blx	r3

	appDataReq.dstAddr = 2;
    3cda:	480f      	ldr	r0, [pc, #60]	; (3d18 <appSendData+0x5c>)
    3cdc:	2302      	movs	r3, #2
    3cde:	8143      	strh	r3, [r0, #10]
	appDataReq.dstEndpoint = APP_DST_ENDPOINT;
    3ce0:	2501      	movs	r5, #1
    3ce2:	7305      	strb	r5, [r0, #12]
	appDataReq.srcEndpoint = APP_ENDPOINT;
    3ce4:	2303      	movs	r3, #3
    3ce6:	7343      	strb	r3, [r0, #13]
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    3ce8:	2302      	movs	r3, #2
    3cea:	7383      	strb	r3, [r0, #14]
	appDataReq.data = appDataReqBuffer;
    3cec:	6106      	str	r6, [r0, #16]
	appDataReq.size = appUartBufferPtr;
    3cee:	7504      	strb	r4, [r0, #20]
	appDataReq.confirm = appDataConf;
    3cf0:	4b0a      	ldr	r3, [pc, #40]	; (3d1c <appSendData+0x60>)
    3cf2:	6183      	str	r3, [r0, #24]
	NWK_DataReq(&appDataReq);
    3cf4:	4b0a      	ldr	r3, [pc, #40]	; (3d20 <appSendData+0x64>)
    3cf6:	4798      	blx	r3

	appUartBufferPtr = 0;
    3cf8:	2200      	movs	r2, #0
    3cfa:	4b03      	ldr	r3, [pc, #12]	; (3d08 <appSendData+0x4c>)
    3cfc:	701a      	strb	r2, [r3, #0]
	appDataReqBusy = true;
    3cfe:	4b01      	ldr	r3, [pc, #4]	; (3d04 <appSendData+0x48>)
    3d00:	701d      	strb	r5, [r3, #0]
	//LED_Toggle(LED0);
}
    3d02:	bd70      	pop	{r4, r5, r6, pc}
    3d04:	20000791 	.word	0x20000791
    3d08:	20000790 	.word	0x20000790
    3d0c:	20000794 	.word	0x20000794
    3d10:	20000724 	.word	0x20000724
    3d14:	000040a1 	.word	0x000040a1
    3d18:	20000800 	.word	0x20000800
    3d1c:	00003c9d 	.word	0x00003c9d
    3d20:	000018f5 	.word	0x000018f5

00003d24 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
    3d24:	b508      	push	{r3, lr}
	appSendData();
    3d26:	4b01      	ldr	r3, [pc, #4]	; (3d2c <appTimerHandler+0x8>)
    3d28:	4798      	blx	r3
	(void)timer;
}
    3d2a:	bd08      	pop	{r3, pc}
    3d2c:	00003cbd 	.word	0x00003cbd

00003d30 <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    3d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uint8_t i = 0; i < ind->size; i++) {
    3d32:	7b03      	ldrb	r3, [r0, #12]
    3d34:	2b00      	cmp	r3, #0
    3d36:	d009      	beq.n	3d4c <appDataInd+0x1c>
    3d38:	2300      	movs	r3, #0
		rx_data[i] = ind->data[i];
    3d3a:	491a      	ldr	r1, [pc, #104]	; (3da4 <appDataInd+0x74>)
    3d3c:	6884      	ldr	r4, [r0, #8]
    3d3e:	5ce2      	ldrb	r2, [r4, r3]
    3d40:	54ca      	strb	r2, [r1, r3]

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    3d42:	3301      	adds	r3, #1
    3d44:	b2db      	uxtb	r3, r3
    3d46:	7b02      	ldrb	r2, [r0, #12]
    3d48:	429a      	cmp	r2, r3
    3d4a:	d8f7      	bhi.n	3d3c <appDataInd+0xc>
static void APP_TaskHandler(void)
{

	const char* tx_data = "You Rock";
	
	if(!appDataReqBusy){
    3d4c:	4b16      	ldr	r3, [pc, #88]	; (3da8 <appDataInd+0x78>)
    3d4e:	781b      	ldrb	r3, [r3, #0]
    3d50:	2b00      	cmp	r3, #0
    3d52:	d124      	bne.n	3d9e <appDataInd+0x6e>
		if(!strcmp((const char*)rx_data, "this rocks"))
    3d54:	4813      	ldr	r0, [pc, #76]	; (3da4 <appDataInd+0x74>)
    3d56:	4915      	ldr	r1, [pc, #84]	; (3dac <appDataInd+0x7c>)
    3d58:	4b15      	ldr	r3, [pc, #84]	; (3db0 <appDataInd+0x80>)
    3d5a:	4798      	blx	r3
    3d5c:	2800      	cmp	r0, #0
    3d5e:	d118      	bne.n	3d92 <appDataInd+0x62>
    3d60:	2280      	movs	r2, #128	; 0x80
    3d62:	0312      	lsls	r2, r2, #12
    3d64:	4b13      	ldr	r3, [pc, #76]	; (3db4 <appDataInd+0x84>)
    3d66:	61da      	str	r2, [r3, #28]
    3d68:	e013      	b.n	3d92 <appDataInd+0x62>
			LED_Toggle(LED0);
		for (uint16_t i = 0; i < sizeof("You Rock"); i++) {
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    3d6a:	7833      	ldrb	r3, [r6, #0]
    3d6c:	2b69      	cmp	r3, #105	; 0x69
    3d6e:	d101      	bne.n	3d74 <appDataInd+0x44>
				appSendData();
    3d70:	4a11      	ldr	r2, [pc, #68]	; (3db8 <appDataInd+0x88>)
    3d72:	4790      	blx	r2
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    3d74:	782b      	ldrb	r3, [r5, #0]
    3d76:	2b68      	cmp	r3, #104	; 0x68
    3d78:	d805      	bhi.n	3d86 <appDataInd+0x56>
				appUartBuffer[appUartBufferPtr++] = tx_data[i];
    3d7a:	1c59      	adds	r1, r3, #1
    3d7c:	4a0f      	ldr	r2, [pc, #60]	; (3dbc <appDataInd+0x8c>)
    3d7e:	7011      	strb	r1, [r2, #0]
    3d80:	7821      	ldrb	r1, [r4, #0]
    3d82:	4a0f      	ldr	r2, [pc, #60]	; (3dc0 <appDataInd+0x90>)
    3d84:	54d1      	strb	r1, [r2, r3]
    3d86:	3401      	adds	r4, #1
	const char* tx_data = "You Rock";
	
	if(!appDataReqBusy){
		if(!strcmp((const char*)rx_data, "this rocks"))
			LED_Toggle(LED0);
		for (uint16_t i = 0; i < sizeof("You Rock"); i++) {
    3d88:	42bc      	cmp	r4, r7
    3d8a:	d1ee      	bne.n	3d6a <appDataInd+0x3a>

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
				appUartBuffer[appUartBufferPtr++] = tx_data[i];
			}
		}
		appSendData();
    3d8c:	4b0a      	ldr	r3, [pc, #40]	; (3db8 <appDataInd+0x88>)
    3d8e:	4798      	blx	r3
    3d90:	e005      	b.n	3d9e <appDataInd+0x6e>
    3d92:	4c0c      	ldr	r4, [pc, #48]	; (3dc4 <appDataInd+0x94>)
    3d94:	1c27      	adds	r7, r4, #0
    3d96:	3709      	adds	r7, #9
	
	if(!appDataReqBusy){
		if(!strcmp((const char*)rx_data, "this rocks"))
			LED_Toggle(LED0);
		for (uint16_t i = 0; i < sizeof("You Rock"); i++) {
			if (appUartBufferPtr == sizeof(appUartBuffer)) {
    3d98:	4e08      	ldr	r6, [pc, #32]	; (3dbc <appDataInd+0x8c>)
				appSendData();
			}

			if (appUartBufferPtr < sizeof(appUartBuffer)) {
    3d9a:	1c35      	adds	r5, r6, #0
    3d9c:	e7e5      	b.n	3d6a <appDataInd+0x3a>
	for (uint8_t i = 0; i < ind->size; i++) {
		rx_data[i] = ind->data[i];
	}
	APP_TaskHandler();
	return true;
}
    3d9e:	2001      	movs	r0, #1
    3da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3da2:	46c0      	nop			; (mov r8, r8)
    3da4:	200006fc 	.word	0x200006fc
    3da8:	20000791 	.word	0x20000791
    3dac:	000042f0 	.word	0x000042f0
    3db0:	00004141 	.word	0x00004141
    3db4:	41004400 	.word	0x41004400
    3db8:	00003cbd 	.word	0x00003cbd
    3dbc:	20000790 	.word	0x20000790
    3dc0:	20000724 	.word	0x20000724
    3dc4:	000042e4 	.word	0x000042e4

00003dc8 <main>:
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
	appTimer.handler = appTimerHandler;
}

int main(void)
{
    3dc8:	b510      	push	{r4, lr}
	irq_initialize_vectors();
	#if SAMD || SAMR21
	system_init();
    3dca:	4b18      	ldr	r3, [pc, #96]	; (3e2c <main+0x64>)
    3dcc:	4798      	blx	r3
	delay_init();
    3dce:	4b18      	ldr	r3, [pc, #96]	; (3e30 <main+0x68>)
    3dd0:	4798      	blx	r3
	#else
	sysclk_init();
	board_init();
	#endif
	SYS_Init();
    3dd2:	4b18      	ldr	r3, [pc, #96]	; (3e34 <main+0x6c>)
    3dd4:	4798      	blx	r3
	//sio2host_init();
	cpu_irq_enable();
    3dd6:	2201      	movs	r2, #1
    3dd8:	4b17      	ldr	r3, [pc, #92]	; (3e38 <main+0x70>)
    3dda:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3ddc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3de0:	b662      	cpsie	i

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3de2:	2280      	movs	r2, #128	; 0x80
    3de4:	0312      	lsls	r2, r2, #12
    3de6:	4b15      	ldr	r3, [pc, #84]	; (3e3c <main+0x74>)
    3de8:	615a      	str	r2, [r3, #20]

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    3dea:	2003      	movs	r0, #3
    3dec:	4b14      	ldr	r3, [pc, #80]	; (3e40 <main+0x78>)
    3dee:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    3df0:	4814      	ldr	r0, [pc, #80]	; (3e44 <main+0x7c>)
    3df2:	4b15      	ldr	r3, [pc, #84]	; (3e48 <main+0x80>)
    3df4:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    3df6:	200f      	movs	r0, #15
    3df8:	4b14      	ldr	r3, [pc, #80]	; (3e4c <main+0x84>)
    3dfa:	4798      	blx	r3
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    3dfc:	2001      	movs	r0, #1
    3dfe:	4b14      	ldr	r3, [pc, #80]	; (3e50 <main+0x88>)
    3e00:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    3e02:	2023      	movs	r0, #35	; 0x23
    3e04:	4b13      	ldr	r3, [pc, #76]	; (3e54 <main+0x8c>)
    3e06:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    3e08:	4813      	ldr	r0, [pc, #76]	; (3e58 <main+0x90>)
    3e0a:	4b14      	ldr	r3, [pc, #80]	; (3e5c <main+0x94>)
    3e0c:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    3e0e:	2003      	movs	r0, #3
    3e10:	4913      	ldr	r1, [pc, #76]	; (3e60 <main+0x98>)
    3e12:	4b14      	ldr	r3, [pc, #80]	; (3e64 <main+0x9c>)
    3e14:	4798      	blx	r3

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
    3e16:	4b14      	ldr	r3, [pc, #80]	; (3e68 <main+0xa0>)
    3e18:	2214      	movs	r2, #20
    3e1a:	609a      	str	r2, [r3, #8]
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3e1c:	2200      	movs	r2, #0
    3e1e:	731a      	strb	r2, [r3, #12]
	appTimer.handler = appTimerHandler;
    3e20:	4a12      	ldr	r2, [pc, #72]	; (3e6c <main+0xa4>)
    3e22:	611a      	str	r2, [r3, #16]
	//sio2host_init();
	cpu_irq_enable();
	LED_On(LED0);
	appInit();
	while (1) {
		SYS_TaskHandler();
    3e24:	4c12      	ldr	r4, [pc, #72]	; (3e70 <main+0xa8>)
    3e26:	47a0      	blx	r4
    3e28:	e7fd      	b.n	3e26 <main+0x5e>
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	0000131d 	.word	0x0000131d
    3e30:	00000115 	.word	0x00000115
    3e34:	00002c81 	.word	0x00002c81
    3e38:	20000008 	.word	0x20000008
    3e3c:	41004400 	.word	0x41004400
    3e40:	0000184d 	.word	0x0000184d
    3e44:	00004567 	.word	0x00004567
    3e48:	00001861 	.word	0x00001861
    3e4c:	00002ab9 	.word	0x00002ab9
    3e50:	00002aa5 	.word	0x00002aa5
    3e54:	00002b29 	.word	0x00002b29
    3e58:	000042fc 	.word	0x000042fc
    3e5c:	000023b5 	.word	0x000023b5
    3e60:	00003d31 	.word	0x00003d31
    3e64:	00001875 	.word	0x00001875
    3e68:	20000710 	.word	0x20000710
    3e6c:	00003d25 	.word	0x00003d25
    3e70:	00002ca5 	.word	0x00002ca5

00003e74 <common_tc_delay>:
    3e74:	b510      	push	{r4, lr}
    3e76:	1c04      	adds	r4, r0, #0
    3e78:	4b13      	ldr	r3, [pc, #76]	; (3ec8 <common_tc_delay+0x54>)
    3e7a:	4798      	blx	r3
    3e7c:	4b13      	ldr	r3, [pc, #76]	; (3ecc <common_tc_delay+0x58>)
    3e7e:	781a      	ldrb	r2, [r3, #0]
    3e80:	4362      	muls	r2, r4
    3e82:	1881      	adds	r1, r0, r2
    3e84:	4b12      	ldr	r3, [pc, #72]	; (3ed0 <common_tc_delay+0x5c>)
    3e86:	6059      	str	r1, [r3, #4]
    3e88:	6859      	ldr	r1, [r3, #4]
    3e8a:	0c09      	lsrs	r1, r1, #16
    3e8c:	6059      	str	r1, [r3, #4]
    3e8e:	685b      	ldr	r3, [r3, #4]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d007      	beq.n	3ea4 <common_tc_delay+0x30>
    3e94:	4b0e      	ldr	r3, [pc, #56]	; (3ed0 <common_tc_delay+0x5c>)
    3e96:	6859      	ldr	r1, [r3, #4]
    3e98:	3201      	adds	r2, #1
    3e9a:	1880      	adds	r0, r0, r2
    3e9c:	8118      	strh	r0, [r3, #8]
    3e9e:	4b0d      	ldr	r3, [pc, #52]	; (3ed4 <common_tc_delay+0x60>)
    3ea0:	4798      	blx	r3
    3ea2:	e004      	b.n	3eae <common_tc_delay+0x3a>
    3ea4:	1882      	adds	r2, r0, r2
    3ea6:	4b0a      	ldr	r3, [pc, #40]	; (3ed0 <common_tc_delay+0x5c>)
    3ea8:	811a      	strh	r2, [r3, #8]
    3eaa:	4b0b      	ldr	r3, [pc, #44]	; (3ed8 <common_tc_delay+0x64>)
    3eac:	4798      	blx	r3
    3eae:	4b08      	ldr	r3, [pc, #32]	; (3ed0 <common_tc_delay+0x5c>)
    3eb0:	891b      	ldrh	r3, [r3, #8]
    3eb2:	2b63      	cmp	r3, #99	; 0x63
    3eb4:	d802      	bhi.n	3ebc <common_tc_delay+0x48>
    3eb6:	3364      	adds	r3, #100	; 0x64
    3eb8:	4a05      	ldr	r2, [pc, #20]	; (3ed0 <common_tc_delay+0x5c>)
    3eba:	8113      	strh	r3, [r2, #8]
    3ebc:	4b04      	ldr	r3, [pc, #16]	; (3ed0 <common_tc_delay+0x5c>)
    3ebe:	8918      	ldrh	r0, [r3, #8]
    3ec0:	4b06      	ldr	r3, [pc, #24]	; (3edc <common_tc_delay+0x68>)
    3ec2:	4798      	blx	r3
    3ec4:	bd10      	pop	{r4, pc}
    3ec6:	46c0      	nop			; (mov r8, r8)
    3ec8:	00002e69 	.word	0x00002e69
    3ecc:	2000098c 	.word	0x2000098c
    3ed0:	20000820 	.word	0x20000820
    3ed4:	00002e7d 	.word	0x00002e7d
    3ed8:	00002e91 	.word	0x00002e91
    3edc:	00002ecd 	.word	0x00002ecd

00003ee0 <common_tc_init>:
    3ee0:	b508      	push	{r3, lr}
    3ee2:	2200      	movs	r2, #0
    3ee4:	4b03      	ldr	r3, [pc, #12]	; (3ef4 <common_tc_init+0x14>)
    3ee6:	701a      	strb	r2, [r3, #0]
    3ee8:	4b03      	ldr	r3, [pc, #12]	; (3ef8 <common_tc_init+0x18>)
    3eea:	4798      	blx	r3
    3eec:	4b03      	ldr	r3, [pc, #12]	; (3efc <common_tc_init+0x1c>)
    3eee:	7018      	strb	r0, [r3, #0]
    3ef0:	bd08      	pop	{r3, pc}
    3ef2:	46c0      	nop			; (mov r8, r8)
    3ef4:	20000820 	.word	0x20000820
    3ef8:	00002ee5 	.word	0x00002ee5
    3efc:	2000098c 	.word	0x2000098c

00003f00 <tmr_ovf_callback>:
    3f00:	b508      	push	{r3, lr}
    3f02:	4b0e      	ldr	r3, [pc, #56]	; (3f3c <tmr_ovf_callback+0x3c>)
    3f04:	685b      	ldr	r3, [r3, #4]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d007      	beq.n	3f1a <tmr_ovf_callback+0x1a>
    3f0a:	4a0c      	ldr	r2, [pc, #48]	; (3f3c <tmr_ovf_callback+0x3c>)
    3f0c:	6853      	ldr	r3, [r2, #4]
    3f0e:	3b01      	subs	r3, #1
    3f10:	6053      	str	r3, [r2, #4]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d101      	bne.n	3f1a <tmr_ovf_callback+0x1a>
    3f16:	4b0a      	ldr	r3, [pc, #40]	; (3f40 <tmr_ovf_callback+0x40>)
    3f18:	4798      	blx	r3
    3f1a:	4a08      	ldr	r2, [pc, #32]	; (3f3c <tmr_ovf_callback+0x3c>)
    3f1c:	7813      	ldrb	r3, [r2, #0]
    3f1e:	3301      	adds	r3, #1
    3f20:	b2db      	uxtb	r3, r3
    3f22:	7013      	strb	r3, [r2, #0]
    3f24:	4a07      	ldr	r2, [pc, #28]	; (3f44 <tmr_ovf_callback+0x44>)
    3f26:	7812      	ldrb	r2, [r2, #0]
    3f28:	429a      	cmp	r2, r3
    3f2a:	d806      	bhi.n	3f3a <tmr_ovf_callback+0x3a>
    3f2c:	4b03      	ldr	r3, [pc, #12]	; (3f3c <tmr_ovf_callback+0x3c>)
    3f2e:	2200      	movs	r2, #0
    3f30:	701a      	strb	r2, [r3, #0]
    3f32:	68db      	ldr	r3, [r3, #12]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d000      	beq.n	3f3a <tmr_ovf_callback+0x3a>
    3f38:	4798      	blx	r3
    3f3a:	bd08      	pop	{r3, pc}
    3f3c:	20000820 	.word	0x20000820
    3f40:	00002e91 	.word	0x00002e91
    3f44:	2000098c 	.word	0x2000098c

00003f48 <tmr_cca_callback>:
    3f48:	b508      	push	{r3, lr}
    3f4a:	4b04      	ldr	r3, [pc, #16]	; (3f5c <tmr_cca_callback+0x14>)
    3f4c:	4798      	blx	r3
    3f4e:	4b04      	ldr	r3, [pc, #16]	; (3f60 <tmr_cca_callback+0x18>)
    3f50:	691b      	ldr	r3, [r3, #16]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d000      	beq.n	3f58 <tmr_cca_callback+0x10>
    3f56:	4798      	blx	r3
    3f58:	bd08      	pop	{r3, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	00002e7d 	.word	0x00002e7d
    3f60:	20000820 	.word	0x20000820

00003f64 <set_common_tc_expiry_callback>:
    3f64:	4b01      	ldr	r3, [pc, #4]	; (3f6c <set_common_tc_expiry_callback+0x8>)
    3f66:	6118      	str	r0, [r3, #16]
    3f68:	4770      	bx	lr
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	20000820 	.word	0x20000820

00003f70 <__aeabi_uidiv>:
    3f70:	2900      	cmp	r1, #0
    3f72:	d034      	beq.n	3fde <.udivsi3_skip_div0_test+0x6a>

00003f74 <.udivsi3_skip_div0_test>:
    3f74:	2301      	movs	r3, #1
    3f76:	2200      	movs	r2, #0
    3f78:	b410      	push	{r4}
    3f7a:	4288      	cmp	r0, r1
    3f7c:	d32c      	bcc.n	3fd8 <.udivsi3_skip_div0_test+0x64>
    3f7e:	2401      	movs	r4, #1
    3f80:	0724      	lsls	r4, r4, #28
    3f82:	42a1      	cmp	r1, r4
    3f84:	d204      	bcs.n	3f90 <.udivsi3_skip_div0_test+0x1c>
    3f86:	4281      	cmp	r1, r0
    3f88:	d202      	bcs.n	3f90 <.udivsi3_skip_div0_test+0x1c>
    3f8a:	0109      	lsls	r1, r1, #4
    3f8c:	011b      	lsls	r3, r3, #4
    3f8e:	e7f8      	b.n	3f82 <.udivsi3_skip_div0_test+0xe>
    3f90:	00e4      	lsls	r4, r4, #3
    3f92:	42a1      	cmp	r1, r4
    3f94:	d204      	bcs.n	3fa0 <.udivsi3_skip_div0_test+0x2c>
    3f96:	4281      	cmp	r1, r0
    3f98:	d202      	bcs.n	3fa0 <.udivsi3_skip_div0_test+0x2c>
    3f9a:	0049      	lsls	r1, r1, #1
    3f9c:	005b      	lsls	r3, r3, #1
    3f9e:	e7f8      	b.n	3f92 <.udivsi3_skip_div0_test+0x1e>
    3fa0:	4288      	cmp	r0, r1
    3fa2:	d301      	bcc.n	3fa8 <.udivsi3_skip_div0_test+0x34>
    3fa4:	1a40      	subs	r0, r0, r1
    3fa6:	431a      	orrs	r2, r3
    3fa8:	084c      	lsrs	r4, r1, #1
    3faa:	42a0      	cmp	r0, r4
    3fac:	d302      	bcc.n	3fb4 <.udivsi3_skip_div0_test+0x40>
    3fae:	1b00      	subs	r0, r0, r4
    3fb0:	085c      	lsrs	r4, r3, #1
    3fb2:	4322      	orrs	r2, r4
    3fb4:	088c      	lsrs	r4, r1, #2
    3fb6:	42a0      	cmp	r0, r4
    3fb8:	d302      	bcc.n	3fc0 <.udivsi3_skip_div0_test+0x4c>
    3fba:	1b00      	subs	r0, r0, r4
    3fbc:	089c      	lsrs	r4, r3, #2
    3fbe:	4322      	orrs	r2, r4
    3fc0:	08cc      	lsrs	r4, r1, #3
    3fc2:	42a0      	cmp	r0, r4
    3fc4:	d302      	bcc.n	3fcc <.udivsi3_skip_div0_test+0x58>
    3fc6:	1b00      	subs	r0, r0, r4
    3fc8:	08dc      	lsrs	r4, r3, #3
    3fca:	4322      	orrs	r2, r4
    3fcc:	2800      	cmp	r0, #0
    3fce:	d003      	beq.n	3fd8 <.udivsi3_skip_div0_test+0x64>
    3fd0:	091b      	lsrs	r3, r3, #4
    3fd2:	d001      	beq.n	3fd8 <.udivsi3_skip_div0_test+0x64>
    3fd4:	0909      	lsrs	r1, r1, #4
    3fd6:	e7e3      	b.n	3fa0 <.udivsi3_skip_div0_test+0x2c>
    3fd8:	1c10      	adds	r0, r2, #0
    3fda:	bc10      	pop	{r4}
    3fdc:	4770      	bx	lr
    3fde:	2800      	cmp	r0, #0
    3fe0:	d001      	beq.n	3fe6 <.udivsi3_skip_div0_test+0x72>
    3fe2:	2000      	movs	r0, #0
    3fe4:	43c0      	mvns	r0, r0
    3fe6:	b407      	push	{r0, r1, r2}
    3fe8:	4802      	ldr	r0, [pc, #8]	; (3ff4 <.udivsi3_skip_div0_test+0x80>)
    3fea:	a102      	add	r1, pc, #8	; (adr r1, 3ff4 <.udivsi3_skip_div0_test+0x80>)
    3fec:	1840      	adds	r0, r0, r1
    3fee:	9002      	str	r0, [sp, #8]
    3ff0:	bd03      	pop	{r0, r1, pc}
    3ff2:	46c0      	nop			; (mov r8, r8)
    3ff4:	00000019 	.word	0x00000019

00003ff8 <__aeabi_uidivmod>:
    3ff8:	2900      	cmp	r1, #0
    3ffa:	d0f0      	beq.n	3fde <.udivsi3_skip_div0_test+0x6a>
    3ffc:	b503      	push	{r0, r1, lr}
    3ffe:	f7ff ffb9 	bl	3f74 <.udivsi3_skip_div0_test>
    4002:	bc0e      	pop	{r1, r2, r3}
    4004:	4342      	muls	r2, r0
    4006:	1a89      	subs	r1, r1, r2
    4008:	4718      	bx	r3
    400a:	46c0      	nop			; (mov r8, r8)

0000400c <__aeabi_idiv0>:
    400c:	4770      	bx	lr
    400e:	46c0      	nop			; (mov r8, r8)

00004010 <__aeabi_lmul>:
    4010:	469c      	mov	ip, r3
    4012:	0403      	lsls	r3, r0, #16
    4014:	b5f0      	push	{r4, r5, r6, r7, lr}
    4016:	0c1b      	lsrs	r3, r3, #16
    4018:	0417      	lsls	r7, r2, #16
    401a:	0c3f      	lsrs	r7, r7, #16
    401c:	0c15      	lsrs	r5, r2, #16
    401e:	1c1e      	adds	r6, r3, #0
    4020:	1c04      	adds	r4, r0, #0
    4022:	0c00      	lsrs	r0, r0, #16
    4024:	437e      	muls	r6, r7
    4026:	436b      	muls	r3, r5
    4028:	4347      	muls	r7, r0
    402a:	4345      	muls	r5, r0
    402c:	18fb      	adds	r3, r7, r3
    402e:	0c30      	lsrs	r0, r6, #16
    4030:	1818      	adds	r0, r3, r0
    4032:	4287      	cmp	r7, r0
    4034:	d902      	bls.n	403c <__aeabi_lmul+0x2c>
    4036:	2380      	movs	r3, #128	; 0x80
    4038:	025b      	lsls	r3, r3, #9
    403a:	18ed      	adds	r5, r5, r3
    403c:	0c03      	lsrs	r3, r0, #16
    403e:	18ed      	adds	r5, r5, r3
    4040:	4663      	mov	r3, ip
    4042:	435c      	muls	r4, r3
    4044:	434a      	muls	r2, r1
    4046:	0436      	lsls	r6, r6, #16
    4048:	0c36      	lsrs	r6, r6, #16
    404a:	18a1      	adds	r1, r4, r2
    404c:	0400      	lsls	r0, r0, #16
    404e:	1980      	adds	r0, r0, r6
    4050:	1949      	adds	r1, r1, r5
    4052:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004054 <__libc_init_array>:
    4054:	b570      	push	{r4, r5, r6, lr}
    4056:	4b0e      	ldr	r3, [pc, #56]	; (4090 <__libc_init_array+0x3c>)
    4058:	4d0e      	ldr	r5, [pc, #56]	; (4094 <__libc_init_array+0x40>)
    405a:	2400      	movs	r4, #0
    405c:	1aed      	subs	r5, r5, r3
    405e:	10ad      	asrs	r5, r5, #2
    4060:	1c1e      	adds	r6, r3, #0
    4062:	42ac      	cmp	r4, r5
    4064:	d004      	beq.n	4070 <__libc_init_array+0x1c>
    4066:	00a3      	lsls	r3, r4, #2
    4068:	58f3      	ldr	r3, [r6, r3]
    406a:	4798      	blx	r3
    406c:	3401      	adds	r4, #1
    406e:	e7f8      	b.n	4062 <__libc_init_array+0xe>
    4070:	f000 f980 	bl	4374 <_init>
    4074:	4b08      	ldr	r3, [pc, #32]	; (4098 <__libc_init_array+0x44>)
    4076:	4d09      	ldr	r5, [pc, #36]	; (409c <__libc_init_array+0x48>)
    4078:	2400      	movs	r4, #0
    407a:	1aed      	subs	r5, r5, r3
    407c:	10ad      	asrs	r5, r5, #2
    407e:	1c1e      	adds	r6, r3, #0
    4080:	42ac      	cmp	r4, r5
    4082:	d004      	beq.n	408e <__libc_init_array+0x3a>
    4084:	00a3      	lsls	r3, r4, #2
    4086:	58f3      	ldr	r3, [r6, r3]
    4088:	4798      	blx	r3
    408a:	3401      	adds	r4, #1
    408c:	e7f8      	b.n	4080 <__libc_init_array+0x2c>
    408e:	bd70      	pop	{r4, r5, r6, pc}
    4090:	00004380 	.word	0x00004380
    4094:	00004380 	.word	0x00004380
    4098:	00004380 	.word	0x00004380
    409c:	00004384 	.word	0x00004384

000040a0 <memcpy>:
    40a0:	b510      	push	{r4, lr}
    40a2:	2300      	movs	r3, #0
    40a4:	4293      	cmp	r3, r2
    40a6:	d003      	beq.n	40b0 <memcpy+0x10>
    40a8:	5ccc      	ldrb	r4, [r1, r3]
    40aa:	54c4      	strb	r4, [r0, r3]
    40ac:	3301      	adds	r3, #1
    40ae:	e7f9      	b.n	40a4 <memcpy+0x4>
    40b0:	bd10      	pop	{r4, pc}

000040b2 <memset>:
    40b2:	1c03      	adds	r3, r0, #0
    40b4:	1882      	adds	r2, r0, r2
    40b6:	4293      	cmp	r3, r2
    40b8:	d002      	beq.n	40c0 <memset+0xe>
    40ba:	7019      	strb	r1, [r3, #0]
    40bc:	3301      	adds	r3, #1
    40be:	e7fa      	b.n	40b6 <memset+0x4>
    40c0:	4770      	bx	lr
    40c2:	0000      	movs	r0, r0
    40c4:	0000      	movs	r0, r0
	...

000040c8 <rand>:
    40c8:	4b17      	ldr	r3, [pc, #92]	; (4128 <rand+0x60>)
    40ca:	b510      	push	{r4, lr}
    40cc:	681c      	ldr	r4, [r3, #0]
    40ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    40d0:	2b00      	cmp	r3, #0
    40d2:	d115      	bne.n	4100 <rand+0x38>
    40d4:	2018      	movs	r0, #24
    40d6:	f000 f83d 	bl	4154 <malloc>
    40da:	4b14      	ldr	r3, [pc, #80]	; (412c <rand+0x64>)
    40dc:	63a0      	str	r0, [r4, #56]	; 0x38
    40de:	8003      	strh	r3, [r0, #0]
    40e0:	4b13      	ldr	r3, [pc, #76]	; (4130 <rand+0x68>)
    40e2:	8043      	strh	r3, [r0, #2]
    40e4:	4b13      	ldr	r3, [pc, #76]	; (4134 <rand+0x6c>)
    40e6:	8083      	strh	r3, [r0, #4]
    40e8:	4b13      	ldr	r3, [pc, #76]	; (4138 <rand+0x70>)
    40ea:	80c3      	strh	r3, [r0, #6]
    40ec:	4b13      	ldr	r3, [pc, #76]	; (413c <rand+0x74>)
    40ee:	8103      	strh	r3, [r0, #8]
    40f0:	2305      	movs	r3, #5
    40f2:	8143      	strh	r3, [r0, #10]
    40f4:	230b      	movs	r3, #11
    40f6:	8183      	strh	r3, [r0, #12]
    40f8:	2201      	movs	r2, #1
    40fa:	2300      	movs	r3, #0
    40fc:	6102      	str	r2, [r0, #16]
    40fe:	6143      	str	r3, [r0, #20]
    4100:	4b08      	ldr	r3, [pc, #32]	; (4124 <rand+0x5c>)
    4102:	4a07      	ldr	r2, [pc, #28]	; (4120 <rand+0x58>)
    4104:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4106:	6920      	ldr	r0, [r4, #16]
    4108:	6961      	ldr	r1, [r4, #20]
    410a:	f7ff ff81 	bl	4010 <__aeabi_lmul>
    410e:	2201      	movs	r2, #1
    4110:	2300      	movs	r3, #0
    4112:	1880      	adds	r0, r0, r2
    4114:	4159      	adcs	r1, r3
    4116:	6120      	str	r0, [r4, #16]
    4118:	6161      	str	r1, [r4, #20]
    411a:	0048      	lsls	r0, r1, #1
    411c:	0840      	lsrs	r0, r0, #1
    411e:	bd10      	pop	{r4, pc}
    4120:	4c957f2d 	.word	0x4c957f2d
    4124:	5851f42d 	.word	0x5851f42d
    4128:	2000006c 	.word	0x2000006c
    412c:	0000330e 	.word	0x0000330e
    4130:	ffffabcd 	.word	0xffffabcd
    4134:	00001234 	.word	0x00001234
    4138:	ffffe66d 	.word	0xffffe66d
    413c:	ffffdeec 	.word	0xffffdeec

00004140 <strcmp>:
    4140:	7802      	ldrb	r2, [r0, #0]
    4142:	780b      	ldrb	r3, [r1, #0]
    4144:	3001      	adds	r0, #1
    4146:	3101      	adds	r1, #1
    4148:	2a00      	cmp	r2, #0
    414a:	d001      	beq.n	4150 <strcmp+0x10>
    414c:	429a      	cmp	r2, r3
    414e:	d0f7      	beq.n	4140 <strcmp>
    4150:	1ad0      	subs	r0, r2, r3
    4152:	4770      	bx	lr

00004154 <malloc>:
    4154:	b508      	push	{r3, lr}
    4156:	4b03      	ldr	r3, [pc, #12]	; (4164 <malloc+0x10>)
    4158:	1c01      	adds	r1, r0, #0
    415a:	6818      	ldr	r0, [r3, #0]
    415c:	f000 f804 	bl	4168 <_malloc_r>
    4160:	bd08      	pop	{r3, pc}
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	2000006c 	.word	0x2000006c

00004168 <_malloc_r>:
    4168:	b570      	push	{r4, r5, r6, lr}
    416a:	2303      	movs	r3, #3
    416c:	1ccd      	adds	r5, r1, #3
    416e:	439d      	bics	r5, r3
    4170:	3508      	adds	r5, #8
    4172:	1c06      	adds	r6, r0, #0
    4174:	2d0c      	cmp	r5, #12
    4176:	d201      	bcs.n	417c <_malloc_r+0x14>
    4178:	250c      	movs	r5, #12
    417a:	e001      	b.n	4180 <_malloc_r+0x18>
    417c:	2d00      	cmp	r5, #0
    417e:	db3f      	blt.n	4200 <_malloc_r+0x98>
    4180:	428d      	cmp	r5, r1
    4182:	d33d      	bcc.n	4200 <_malloc_r+0x98>
    4184:	4b20      	ldr	r3, [pc, #128]	; (4208 <_malloc_r+0xa0>)
    4186:	681c      	ldr	r4, [r3, #0]
    4188:	1c1a      	adds	r2, r3, #0
    418a:	1c21      	adds	r1, r4, #0
    418c:	2900      	cmp	r1, #0
    418e:	d013      	beq.n	41b8 <_malloc_r+0x50>
    4190:	6808      	ldr	r0, [r1, #0]
    4192:	1b43      	subs	r3, r0, r5
    4194:	d40d      	bmi.n	41b2 <_malloc_r+0x4a>
    4196:	2b0b      	cmp	r3, #11
    4198:	d902      	bls.n	41a0 <_malloc_r+0x38>
    419a:	600b      	str	r3, [r1, #0]
    419c:	18cc      	adds	r4, r1, r3
    419e:	e01e      	b.n	41de <_malloc_r+0x76>
    41a0:	428c      	cmp	r4, r1
    41a2:	d102      	bne.n	41aa <_malloc_r+0x42>
    41a4:	6863      	ldr	r3, [r4, #4]
    41a6:	6013      	str	r3, [r2, #0]
    41a8:	e01a      	b.n	41e0 <_malloc_r+0x78>
    41aa:	6848      	ldr	r0, [r1, #4]
    41ac:	6060      	str	r0, [r4, #4]
    41ae:	1c0c      	adds	r4, r1, #0
    41b0:	e016      	b.n	41e0 <_malloc_r+0x78>
    41b2:	1c0c      	adds	r4, r1, #0
    41b4:	6849      	ldr	r1, [r1, #4]
    41b6:	e7e9      	b.n	418c <_malloc_r+0x24>
    41b8:	4c14      	ldr	r4, [pc, #80]	; (420c <_malloc_r+0xa4>)
    41ba:	6820      	ldr	r0, [r4, #0]
    41bc:	2800      	cmp	r0, #0
    41be:	d103      	bne.n	41c8 <_malloc_r+0x60>
    41c0:	1c30      	adds	r0, r6, #0
    41c2:	f000 f825 	bl	4210 <_sbrk_r>
    41c6:	6020      	str	r0, [r4, #0]
    41c8:	1c30      	adds	r0, r6, #0
    41ca:	1c29      	adds	r1, r5, #0
    41cc:	f000 f820 	bl	4210 <_sbrk_r>
    41d0:	1c43      	adds	r3, r0, #1
    41d2:	d015      	beq.n	4200 <_malloc_r+0x98>
    41d4:	1cc4      	adds	r4, r0, #3
    41d6:	2303      	movs	r3, #3
    41d8:	439c      	bics	r4, r3
    41da:	4284      	cmp	r4, r0
    41dc:	d10a      	bne.n	41f4 <_malloc_r+0x8c>
    41de:	6025      	str	r5, [r4, #0]
    41e0:	1c20      	adds	r0, r4, #0
    41e2:	300b      	adds	r0, #11
    41e4:	2207      	movs	r2, #7
    41e6:	1d23      	adds	r3, r4, #4
    41e8:	4390      	bics	r0, r2
    41ea:	1ac3      	subs	r3, r0, r3
    41ec:	d00b      	beq.n	4206 <_malloc_r+0x9e>
    41ee:	425a      	negs	r2, r3
    41f0:	50e2      	str	r2, [r4, r3]
    41f2:	e008      	b.n	4206 <_malloc_r+0x9e>
    41f4:	1a21      	subs	r1, r4, r0
    41f6:	1c30      	adds	r0, r6, #0
    41f8:	f000 f80a 	bl	4210 <_sbrk_r>
    41fc:	3001      	adds	r0, #1
    41fe:	d1ee      	bne.n	41de <_malloc_r+0x76>
    4200:	230c      	movs	r3, #12
    4202:	6033      	str	r3, [r6, #0]
    4204:	2000      	movs	r0, #0
    4206:	bd70      	pop	{r4, r5, r6, pc}
    4208:	20000838 	.word	0x20000838
    420c:	20000834 	.word	0x20000834

00004210 <_sbrk_r>:
    4210:	b538      	push	{r3, r4, r5, lr}
    4212:	4c07      	ldr	r4, [pc, #28]	; (4230 <_sbrk_r+0x20>)
    4214:	2300      	movs	r3, #0
    4216:	1c05      	adds	r5, r0, #0
    4218:	1c08      	adds	r0, r1, #0
    421a:	6023      	str	r3, [r4, #0]
    421c:	f7fd fada 	bl	17d4 <_sbrk>
    4220:	1c43      	adds	r3, r0, #1
    4222:	d103      	bne.n	422c <_sbrk_r+0x1c>
    4224:	6823      	ldr	r3, [r4, #0]
    4226:	2b00      	cmp	r3, #0
    4228:	d000      	beq.n	422c <_sbrk_r+0x1c>
    422a:	602b      	str	r3, [r5, #0]
    422c:	bd38      	pop	{r3, r4, r5, pc}
    422e:	46c0      	nop			; (mov r8, r8)
    4230:	20000990 	.word	0x20000990
    4234:	42000800 	.word	0x42000800
    4238:	42000c00 	.word	0x42000c00
    423c:	42001000 	.word	0x42001000
    4240:	42001400 	.word	0x42001400
    4244:	42001800 	.word	0x42001800
    4248:	42001c00 	.word	0x42001c00
    424c:	00000b1c 	.word	0x00000b1c
    4250:	00000b78 	.word	0x00000b78
    4254:	00000b78 	.word	0x00000b78
    4258:	00000b16 	.word	0x00000b16
    425c:	00000b16 	.word	0x00000b16
    4260:	00000b32 	.word	0x00000b32
    4264:	00000b22 	.word	0x00000b22
    4268:	00000b38 	.word	0x00000b38
    426c:	00000b66 	.word	0x00000b66
    4270:	00000da0 	.word	0x00000da0
    4274:	00000e00 	.word	0x00000e00
    4278:	00000e00 	.word	0x00000e00
    427c:	00000d80 	.word	0x00000d80
    4280:	00000d92 	.word	0x00000d92
    4284:	00000dae 	.word	0x00000dae
    4288:	00000d84 	.word	0x00000d84
    428c:	00000dbc 	.word	0x00000dbc
    4290:	00000df0 	.word	0x00000df0
    4294:	42002c00 	.word	0x42002c00
    4298:	42003000 	.word	0x42003000
    429c:	42003400 	.word	0x42003400
    42a0:	001c1c1b 	.word	0x001c1c1b
    42a4:	10000800 	.word	0x10000800
    42a8:	00002000 	.word	0x00002000
    42ac:	00002008 	.word	0x00002008
    42b0:	0000217c 	.word	0x0000217c
    42b4:	00002186 	.word	0x00002186
    42b8:	0000231c 	.word	0x0000231c
    42bc:	00002324 	.word	0x00002324
    42c0:	000028f2 	.word	0x000028f2
    42c4:	000029b0 	.word	0x000029b0
    42c8:	000028fc 	.word	0x000028fc
    42cc:	0000291c 	.word	0x0000291c
    42d0:	000029b0 	.word	0x000029b0
    42d4:	0000293e 	.word	0x0000293e
    42d8:	000029b0 	.word	0x000029b0
    42dc:	00002980 	.word	0x00002980

000042e0 <tc_interrupt_vectors.11766>:
    42e0:	00141312 20756f59 6b636f52 00000000     ....You Rock....
    42f0:	73696874 636f7220 0000736b 74736554     this rocks..Test
    4300:	75636553 79746972 3079654b 00000000     SecurityKey0....
    4310:	00000043                                C...

00004314 <__sf_fake_stdin>:
	...

00004334 <__sf_fake_stdout>:
	...

00004354 <__sf_fake_stderr>:
	...

00004374 <_init>:
    4374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4376:	46c0      	nop			; (mov r8, r8)
    4378:	bcf8      	pop	{r3, r4, r5, r6, r7}
    437a:	bc08      	pop	{r3}
    437c:	469e      	mov	lr, r3
    437e:	4770      	bx	lr

00004380 <__init_array_start>:
    4380:	000000dd 	.word	0x000000dd

00004384 <_fini>:
    4384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	bcf8      	pop	{r3, r4, r5, r6, r7}
    438a:	bc08      	pop	{r3}
    438c:	469e      	mov	lr, r3
    438e:	4770      	bx	lr

00004390 <__fini_array_start>:
    4390:	000000b5 	.word	0x000000b5
