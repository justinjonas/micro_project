
ADC_QUICK_START2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b0c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004b0c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  20000070  00004b7c  00010070  2**2
                  ALLOC
  3 .stack        00002004  2000013c  00004c48  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a185  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029b2  00000000  00000000  0002a278  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000048a2  00000000  00000000  0002cc2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000478  00000000  00000000  000314cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004c0  00000000  00000000  00031944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017379  00000000  00000000  00031e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000af2a  00000000  00000000  0004917d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00080434  00000000  00000000  000540a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013d8  00000000  00000000  000d44dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002140 	.word	0x20002140
       4:	0000168d 	.word	0x0000168d
       8:	00001689 	.word	0x00001689
       c:	00001689 	.word	0x00001689
	...
      2c:	00001689 	.word	0x00001689
	...
      38:	00001689 	.word	0x00001689
      3c:	00001689 	.word	0x00001689
      40:	00001689 	.word	0x00001689
      44:	00001689 	.word	0x00001689
      48:	00001689 	.word	0x00001689
      4c:	00001689 	.word	0x00001689
      50:	00001689 	.word	0x00001689
      54:	00001689 	.word	0x00001689
      58:	00001689 	.word	0x00001689
      5c:	00001689 	.word	0x00001689
      60:	00001689 	.word	0x00001689
      64:	00000b51 	.word	0x00000b51
      68:	00000b61 	.word	0x00000b61
      6c:	00000b71 	.word	0x00000b71
      70:	00000b81 	.word	0x00000b81
      74:	00000b91 	.word	0x00000b91
      78:	00000ba1 	.word	0x00000ba1
      7c:	00001689 	.word	0x00001689
      80:	00001689 	.word	0x00001689
      84:	00001689 	.word	0x00001689
      88:	00001689 	.word	0x00001689
      8c:	00001689 	.word	0x00001689
      90:	00001689 	.word	0x00001689
	...
      9c:	00001689 	.word	0x00001689
      a0:	00001689 	.word	0x00001689
      a4:	00000000 	.word	0x00000000
      a8:	00001689 	.word	0x00001689
      ac:	00001689 	.word	0x00001689
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004b0c 	.word	0x00004b0c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00004b0c 	.word	0x00004b0c
     108:	20000074 	.word	0x20000074
     10c:	00004b0c 	.word	0x00004b0c
     110:	00000000 	.word	0x00000000

00000114 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     114:	b510      	push	{r4, lr}
     116:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     118:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     11a:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     11c:	4299      	cmp	r1, r3
     11e:	d30c      	bcc.n	13a <_sercom_get_sync_baud_val+0x26>
     120:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     122:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     124:	1c60      	adds	r0, r4, #1
     126:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     128:	428b      	cmp	r3, r1
     12a:	d801      	bhi.n	130 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     12c:	1c04      	adds	r4, r0, #0
     12e:	e7f8      	b.n	122 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     130:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     132:	2cff      	cmp	r4, #255	; 0xff
     134:	d801      	bhi.n	13a <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     136:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     138:	2000      	movs	r0, #0
	}
}
     13a:	bd10      	pop	{r4, pc}
     13c:	0000      	movs	r0, r0
	...

00000140 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     140:	b5f0      	push	{r4, r5, r6, r7, lr}
     142:	465f      	mov	r7, fp
     144:	4656      	mov	r6, sl
     146:	464d      	mov	r5, r9
     148:	4644      	mov	r4, r8
     14a:	b4f0      	push	{r4, r5, r6, r7}
     14c:	b087      	sub	sp, #28
     14e:	1c06      	adds	r6, r0, #0
     150:	1c0d      	adds	r5, r1, #0
     152:	9204      	str	r2, [sp, #16]
     154:	aa10      	add	r2, sp, #64	; 0x40
     156:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     158:	1c32      	adds	r2, r6, #0
     15a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     15c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     15e:	428a      	cmp	r2, r1
     160:	d900      	bls.n	164 <_sercom_get_async_baud_val+0x24>
     162:	e0b3      	b.n	2cc <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     164:	2b00      	cmp	r3, #0
     166:	d14b      	bne.n	200 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     168:	2100      	movs	r1, #0
     16a:	1c32      	adds	r2, r6, #0
     16c:	4c5e      	ldr	r4, [pc, #376]	; (2e8 <_sercom_get_async_baud_val+0x1a8>)
     16e:	47a0      	blx	r4
     170:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     172:	1c2e      	adds	r6, r5, #0
     174:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     176:	2000      	movs	r0, #0
     178:	2100      	movs	r1, #0
     17a:	2200      	movs	r2, #0
     17c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     17e:	243f      	movs	r4, #63	; 0x3f
     180:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     182:	2501      	movs	r5, #1
     184:	46a8      	mov	r8, r5
     186:	9002      	str	r0, [sp, #8]
     188:	9103      	str	r1, [sp, #12]
     18a:	4661      	mov	r1, ip
     18c:	3920      	subs	r1, #32
     18e:	d403      	bmi.n	198 <_sercom_get_async_baud_val+0x58>
     190:	4640      	mov	r0, r8
     192:	4088      	lsls	r0, r1
     194:	4681      	mov	r9, r0
     196:	e005      	b.n	1a4 <_sercom_get_async_baud_val+0x64>
     198:	2120      	movs	r1, #32
     19a:	4665      	mov	r5, ip
     19c:	1b4c      	subs	r4, r1, r5
     19e:	4640      	mov	r0, r8
     1a0:	40e0      	lsrs	r0, r4
     1a2:	4681      	mov	r9, r0
     1a4:	4641      	mov	r1, r8
     1a6:	4664      	mov	r4, ip
     1a8:	40a1      	lsls	r1, r4
     1aa:	468a      	mov	sl, r1

		r = r << 1;
     1ac:	1c10      	adds	r0, r2, #0
     1ae:	1c19      	adds	r1, r3, #0
     1b0:	1880      	adds	r0, r0, r2
     1b2:	4159      	adcs	r1, r3
     1b4:	1c02      	adds	r2, r0, #0
     1b6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     1b8:	465d      	mov	r5, fp
     1ba:	464c      	mov	r4, r9
     1bc:	4225      	tst	r5, r4
     1be:	d002      	beq.n	1c6 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     1c0:	4642      	mov	r2, r8
     1c2:	4302      	orrs	r2, r0
     1c4:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     1c6:	429f      	cmp	r7, r3
     1c8:	d80c      	bhi.n	1e4 <_sercom_get_async_baud_val+0xa4>
     1ca:	d101      	bne.n	1d0 <_sercom_get_async_baud_val+0x90>
     1cc:	4296      	cmp	r6, r2
     1ce:	d809      	bhi.n	1e4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     1d0:	1b92      	subs	r2, r2, r6
     1d2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     1d4:	4650      	mov	r0, sl
     1d6:	9d02      	ldr	r5, [sp, #8]
     1d8:	4328      	orrs	r0, r5
     1da:	4649      	mov	r1, r9
     1dc:	9c03      	ldr	r4, [sp, #12]
     1de:	4321      	orrs	r1, r4
     1e0:	9002      	str	r0, [sp, #8]
     1e2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     1e4:	4665      	mov	r5, ip
     1e6:	3d01      	subs	r5, #1
     1e8:	46ac      	mov	ip, r5
     1ea:	d2ce      	bcs.n	18a <_sercom_get_async_baud_val+0x4a>
     1ec:	9802      	ldr	r0, [sp, #8]
     1ee:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     1f0:	4b3c      	ldr	r3, [pc, #240]	; (2e4 <_sercom_get_async_baud_val+0x1a4>)
     1f2:	4a3b      	ldr	r2, [pc, #236]	; (2e0 <_sercom_get_async_baud_val+0x1a0>)
     1f4:	1a12      	subs	r2, r2, r0
     1f6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     1f8:	0c12      	lsrs	r2, r2, #16
     1fa:	041b      	lsls	r3, r3, #16
     1fc:	431a      	orrs	r2, r3
     1fe:	e062      	b.n	2c6 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     200:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     202:	2b01      	cmp	r3, #1
     204:	d15f      	bne.n	2c6 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     206:	0f4f      	lsrs	r7, r1, #29
     208:	46b9      	mov	r9, r7
     20a:	00cd      	lsls	r5, r1, #3
     20c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     20e:	2100      	movs	r1, #0
     210:	1c32      	adds	r2, r6, #0
     212:	2300      	movs	r3, #0
     214:	4c34      	ldr	r4, [pc, #208]	; (2e8 <_sercom_get_async_baud_val+0x1a8>)
     216:	47a0      	blx	r4
     218:	1c06      	adds	r6, r0, #0
     21a:	1c0f      	adds	r7, r1, #0
     21c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     21e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     220:	9602      	str	r6, [sp, #8]
     222:	9703      	str	r7, [sp, #12]
     224:	469a      	mov	sl, r3
     226:	4650      	mov	r0, sl
     228:	b2c0      	uxtb	r0, r0
     22a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     22c:	2100      	movs	r1, #0
     22e:	4688      	mov	r8, r1
     230:	2200      	movs	r2, #0
     232:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     234:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     236:	1c27      	adds	r7, r4, #0
     238:	3f20      	subs	r7, #32
     23a:	d403      	bmi.n	244 <_sercom_get_async_baud_val+0x104>
     23c:	1c2e      	adds	r6, r5, #0
     23e:	40be      	lsls	r6, r7
     240:	9601      	str	r6, [sp, #4]
     242:	e004      	b.n	24e <_sercom_get_async_baud_val+0x10e>
     244:	2020      	movs	r0, #32
     246:	1b07      	subs	r7, r0, r4
     248:	1c29      	adds	r1, r5, #0
     24a:	40f9      	lsrs	r1, r7
     24c:	9101      	str	r1, [sp, #4]
     24e:	1c2e      	adds	r6, r5, #0
     250:	40a6      	lsls	r6, r4
     252:	9600      	str	r6, [sp, #0]

		r = r << 1;
     254:	1c10      	adds	r0, r2, #0
     256:	1c19      	adds	r1, r3, #0
     258:	1880      	adds	r0, r0, r2
     25a:	4159      	adcs	r1, r3
     25c:	1c02      	adds	r2, r0, #0
     25e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     260:	465f      	mov	r7, fp
     262:	4037      	ands	r7, r6
     264:	46bc      	mov	ip, r7
     266:	9e01      	ldr	r6, [sp, #4]
     268:	464f      	mov	r7, r9
     26a:	403e      	ands	r6, r7
     26c:	4667      	mov	r7, ip
     26e:	433e      	orrs	r6, r7
     270:	d002      	beq.n	278 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     272:	1c2a      	adds	r2, r5, #0
     274:	4302      	orrs	r2, r0
     276:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     278:	9803      	ldr	r0, [sp, #12]
     27a:	4298      	cmp	r0, r3
     27c:	d80b      	bhi.n	296 <_sercom_get_async_baud_val+0x156>
     27e:	d102      	bne.n	286 <_sercom_get_async_baud_val+0x146>
     280:	9902      	ldr	r1, [sp, #8]
     282:	4291      	cmp	r1, r2
     284:	d807      	bhi.n	296 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     286:	9e02      	ldr	r6, [sp, #8]
     288:	9f03      	ldr	r7, [sp, #12]
     28a:	1b92      	subs	r2, r2, r6
     28c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     28e:	4647      	mov	r7, r8
     290:	9800      	ldr	r0, [sp, #0]
     292:	4307      	orrs	r7, r0
     294:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     296:	3c01      	subs	r4, #1
     298:	d2cd      	bcs.n	236 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     29a:	4641      	mov	r1, r8
     29c:	4652      	mov	r2, sl
     29e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     2a0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     2a2:	4c12      	ldr	r4, [pc, #72]	; (2ec <_sercom_get_async_baud_val+0x1ac>)
     2a4:	42a3      	cmp	r3, r4
     2a6:	d908      	bls.n	2ba <_sercom_get_async_baud_val+0x17a>
     2a8:	9a05      	ldr	r2, [sp, #20]
     2aa:	3201      	adds	r2, #1
     2ac:	b2d2      	uxtb	r2, r2
     2ae:	9205      	str	r2, [sp, #20]
     2b0:	2601      	movs	r6, #1
     2b2:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     2b4:	4657      	mov	r7, sl
     2b6:	2f08      	cmp	r7, #8
     2b8:	d1b5      	bne.n	226 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2ba:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     2bc:	9805      	ldr	r0, [sp, #20]
     2be:	2808      	cmp	r0, #8
     2c0:	d004      	beq.n	2cc <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     2c2:	0342      	lsls	r2, r0, #13
     2c4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     2c6:	9c04      	ldr	r4, [sp, #16]
     2c8:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     2ca:	2400      	movs	r4, #0
}
     2cc:	1c20      	adds	r0, r4, #0
     2ce:	b007      	add	sp, #28
     2d0:	bc3c      	pop	{r2, r3, r4, r5}
     2d2:	4690      	mov	r8, r2
     2d4:	4699      	mov	r9, r3
     2d6:	46a2      	mov	sl, r4
     2d8:	46ab      	mov	fp, r5
     2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2dc:	46c0      	nop			; (mov r8, r8)
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	00000000 	.word	0x00000000
     2e4:	00000001 	.word	0x00000001
     2e8:	00001b21 	.word	0x00001b21
     2ec:	00001fff 	.word	0x00001fff

000002f0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     2f0:	b510      	push	{r4, lr}
     2f2:	b082      	sub	sp, #8
     2f4:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     2f6:	4b0f      	ldr	r3, [pc, #60]	; (334 <sercom_set_gclk_generator+0x44>)
     2f8:	781b      	ldrb	r3, [r3, #0]
     2fa:	2b00      	cmp	r3, #0
     2fc:	d001      	beq.n	302 <sercom_set_gclk_generator+0x12>
     2fe:	2900      	cmp	r1, #0
     300:	d00d      	beq.n	31e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     302:	a901      	add	r1, sp, #4
     304:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     306:	2013      	movs	r0, #19
     308:	4b0b      	ldr	r3, [pc, #44]	; (338 <sercom_set_gclk_generator+0x48>)
     30a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     30c:	2013      	movs	r0, #19
     30e:	4b0b      	ldr	r3, [pc, #44]	; (33c <sercom_set_gclk_generator+0x4c>)
     310:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     312:	4b08      	ldr	r3, [pc, #32]	; (334 <sercom_set_gclk_generator+0x44>)
     314:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     316:	2201      	movs	r2, #1
     318:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     31a:	2000      	movs	r0, #0
     31c:	e007      	b.n	32e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     31e:	4b05      	ldr	r3, [pc, #20]	; (334 <sercom_set_gclk_generator+0x44>)
     320:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     322:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     324:	1b14      	subs	r4, r2, r4
     326:	1e62      	subs	r2, r4, #1
     328:	4194      	sbcs	r4, r2
     32a:	4264      	negs	r4, r4
     32c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     32e:	b002      	add	sp, #8
     330:	bd10      	pop	{r4, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	2000008c 	.word	0x2000008c
     338:	00001559 	.word	0x00001559
     33c:	000014cd 	.word	0x000014cd

00000340 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     340:	4b44      	ldr	r3, [pc, #272]	; (454 <_sercom_get_default_pad+0x114>)
     342:	4298      	cmp	r0, r3
     344:	d033      	beq.n	3ae <_sercom_get_default_pad+0x6e>
     346:	d806      	bhi.n	356 <_sercom_get_default_pad+0x16>
     348:	4b43      	ldr	r3, [pc, #268]	; (458 <_sercom_get_default_pad+0x118>)
     34a:	4298      	cmp	r0, r3
     34c:	d00d      	beq.n	36a <_sercom_get_default_pad+0x2a>
     34e:	4b43      	ldr	r3, [pc, #268]	; (45c <_sercom_get_default_pad+0x11c>)
     350:	4298      	cmp	r0, r3
     352:	d01b      	beq.n	38c <_sercom_get_default_pad+0x4c>
     354:	e06f      	b.n	436 <_sercom_get_default_pad+0xf6>
     356:	4b42      	ldr	r3, [pc, #264]	; (460 <_sercom_get_default_pad+0x120>)
     358:	4298      	cmp	r0, r3
     35a:	d04a      	beq.n	3f2 <_sercom_get_default_pad+0xb2>
     35c:	4b41      	ldr	r3, [pc, #260]	; (464 <_sercom_get_default_pad+0x124>)
     35e:	4298      	cmp	r0, r3
     360:	d058      	beq.n	414 <_sercom_get_default_pad+0xd4>
     362:	4b41      	ldr	r3, [pc, #260]	; (468 <_sercom_get_default_pad+0x128>)
     364:	4298      	cmp	r0, r3
     366:	d166      	bne.n	436 <_sercom_get_default_pad+0xf6>
     368:	e032      	b.n	3d0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     36a:	2901      	cmp	r1, #1
     36c:	d065      	beq.n	43a <_sercom_get_default_pad+0xfa>
     36e:	2900      	cmp	r1, #0
     370:	d004      	beq.n	37c <_sercom_get_default_pad+0x3c>
     372:	2902      	cmp	r1, #2
     374:	d006      	beq.n	384 <_sercom_get_default_pad+0x44>
     376:	2903      	cmp	r1, #3
     378:	d006      	beq.n	388 <_sercom_get_default_pad+0x48>
     37a:	e001      	b.n	380 <_sercom_get_default_pad+0x40>
     37c:	483b      	ldr	r0, [pc, #236]	; (46c <_sercom_get_default_pad+0x12c>)
     37e:	e067      	b.n	450 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     380:	2000      	movs	r0, #0
     382:	e065      	b.n	450 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     384:	483a      	ldr	r0, [pc, #232]	; (470 <_sercom_get_default_pad+0x130>)
     386:	e063      	b.n	450 <_sercom_get_default_pad+0x110>
     388:	483a      	ldr	r0, [pc, #232]	; (474 <_sercom_get_default_pad+0x134>)
     38a:	e061      	b.n	450 <_sercom_get_default_pad+0x110>
     38c:	2901      	cmp	r1, #1
     38e:	d056      	beq.n	43e <_sercom_get_default_pad+0xfe>
     390:	2900      	cmp	r1, #0
     392:	d004      	beq.n	39e <_sercom_get_default_pad+0x5e>
     394:	2902      	cmp	r1, #2
     396:	d006      	beq.n	3a6 <_sercom_get_default_pad+0x66>
     398:	2903      	cmp	r1, #3
     39a:	d006      	beq.n	3aa <_sercom_get_default_pad+0x6a>
     39c:	e001      	b.n	3a2 <_sercom_get_default_pad+0x62>
     39e:	2003      	movs	r0, #3
     3a0:	e056      	b.n	450 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3a2:	2000      	movs	r0, #0
     3a4:	e054      	b.n	450 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3a6:	4834      	ldr	r0, [pc, #208]	; (478 <_sercom_get_default_pad+0x138>)
     3a8:	e052      	b.n	450 <_sercom_get_default_pad+0x110>
     3aa:	4834      	ldr	r0, [pc, #208]	; (47c <_sercom_get_default_pad+0x13c>)
     3ac:	e050      	b.n	450 <_sercom_get_default_pad+0x110>
     3ae:	2901      	cmp	r1, #1
     3b0:	d047      	beq.n	442 <_sercom_get_default_pad+0x102>
     3b2:	2900      	cmp	r1, #0
     3b4:	d004      	beq.n	3c0 <_sercom_get_default_pad+0x80>
     3b6:	2902      	cmp	r1, #2
     3b8:	d006      	beq.n	3c8 <_sercom_get_default_pad+0x88>
     3ba:	2903      	cmp	r1, #3
     3bc:	d006      	beq.n	3cc <_sercom_get_default_pad+0x8c>
     3be:	e001      	b.n	3c4 <_sercom_get_default_pad+0x84>
     3c0:	482f      	ldr	r0, [pc, #188]	; (480 <_sercom_get_default_pad+0x140>)
     3c2:	e045      	b.n	450 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3c4:	2000      	movs	r0, #0
     3c6:	e043      	b.n	450 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3c8:	482e      	ldr	r0, [pc, #184]	; (484 <_sercom_get_default_pad+0x144>)
     3ca:	e041      	b.n	450 <_sercom_get_default_pad+0x110>
     3cc:	482e      	ldr	r0, [pc, #184]	; (488 <_sercom_get_default_pad+0x148>)
     3ce:	e03f      	b.n	450 <_sercom_get_default_pad+0x110>
     3d0:	2901      	cmp	r1, #1
     3d2:	d038      	beq.n	446 <_sercom_get_default_pad+0x106>
     3d4:	2900      	cmp	r1, #0
     3d6:	d004      	beq.n	3e2 <_sercom_get_default_pad+0xa2>
     3d8:	2902      	cmp	r1, #2
     3da:	d006      	beq.n	3ea <_sercom_get_default_pad+0xaa>
     3dc:	2903      	cmp	r1, #3
     3de:	d006      	beq.n	3ee <_sercom_get_default_pad+0xae>
     3e0:	e001      	b.n	3e6 <_sercom_get_default_pad+0xa6>
     3e2:	482a      	ldr	r0, [pc, #168]	; (48c <_sercom_get_default_pad+0x14c>)
     3e4:	e034      	b.n	450 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3e6:	2000      	movs	r0, #0
     3e8:	e032      	b.n	450 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3ea:	4829      	ldr	r0, [pc, #164]	; (490 <_sercom_get_default_pad+0x150>)
     3ec:	e030      	b.n	450 <_sercom_get_default_pad+0x110>
     3ee:	4829      	ldr	r0, [pc, #164]	; (494 <_sercom_get_default_pad+0x154>)
     3f0:	e02e      	b.n	450 <_sercom_get_default_pad+0x110>
     3f2:	2901      	cmp	r1, #1
     3f4:	d029      	beq.n	44a <_sercom_get_default_pad+0x10a>
     3f6:	2900      	cmp	r1, #0
     3f8:	d004      	beq.n	404 <_sercom_get_default_pad+0xc4>
     3fa:	2902      	cmp	r1, #2
     3fc:	d006      	beq.n	40c <_sercom_get_default_pad+0xcc>
     3fe:	2903      	cmp	r1, #3
     400:	d006      	beq.n	410 <_sercom_get_default_pad+0xd0>
     402:	e001      	b.n	408 <_sercom_get_default_pad+0xc8>
     404:	4824      	ldr	r0, [pc, #144]	; (498 <_sercom_get_default_pad+0x158>)
     406:	e023      	b.n	450 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     408:	2000      	movs	r0, #0
     40a:	e021      	b.n	450 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     40c:	4823      	ldr	r0, [pc, #140]	; (49c <_sercom_get_default_pad+0x15c>)
     40e:	e01f      	b.n	450 <_sercom_get_default_pad+0x110>
     410:	4823      	ldr	r0, [pc, #140]	; (4a0 <_sercom_get_default_pad+0x160>)
     412:	e01d      	b.n	450 <_sercom_get_default_pad+0x110>
     414:	2901      	cmp	r1, #1
     416:	d01a      	beq.n	44e <_sercom_get_default_pad+0x10e>
     418:	2900      	cmp	r1, #0
     41a:	d004      	beq.n	426 <_sercom_get_default_pad+0xe6>
     41c:	2902      	cmp	r1, #2
     41e:	d006      	beq.n	42e <_sercom_get_default_pad+0xee>
     420:	2903      	cmp	r1, #3
     422:	d006      	beq.n	432 <_sercom_get_default_pad+0xf2>
     424:	e001      	b.n	42a <_sercom_get_default_pad+0xea>
     426:	481f      	ldr	r0, [pc, #124]	; (4a4 <_sercom_get_default_pad+0x164>)
     428:	e012      	b.n	450 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     42a:	2000      	movs	r0, #0
     42c:	e010      	b.n	450 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     42e:	481e      	ldr	r0, [pc, #120]	; (4a8 <_sercom_get_default_pad+0x168>)
     430:	e00e      	b.n	450 <_sercom_get_default_pad+0x110>
     432:	481e      	ldr	r0, [pc, #120]	; (4ac <_sercom_get_default_pad+0x16c>)
     434:	e00c      	b.n	450 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     436:	2000      	movs	r0, #0
     438:	e00a      	b.n	450 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43a:	481d      	ldr	r0, [pc, #116]	; (4b0 <_sercom_get_default_pad+0x170>)
     43c:	e008      	b.n	450 <_sercom_get_default_pad+0x110>
     43e:	481d      	ldr	r0, [pc, #116]	; (4b4 <_sercom_get_default_pad+0x174>)
     440:	e006      	b.n	450 <_sercom_get_default_pad+0x110>
     442:	481d      	ldr	r0, [pc, #116]	; (4b8 <_sercom_get_default_pad+0x178>)
     444:	e004      	b.n	450 <_sercom_get_default_pad+0x110>
     446:	481d      	ldr	r0, [pc, #116]	; (4bc <_sercom_get_default_pad+0x17c>)
     448:	e002      	b.n	450 <_sercom_get_default_pad+0x110>
     44a:	481d      	ldr	r0, [pc, #116]	; (4c0 <_sercom_get_default_pad+0x180>)
     44c:	e000      	b.n	450 <_sercom_get_default_pad+0x110>
     44e:	481d      	ldr	r0, [pc, #116]	; (4c4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     450:	4770      	bx	lr
     452:	46c0      	nop			; (mov r8, r8)
     454:	42001000 	.word	0x42001000
     458:	42000800 	.word	0x42000800
     45c:	42000c00 	.word	0x42000c00
     460:	42001800 	.word	0x42001800
     464:	42001c00 	.word	0x42001c00
     468:	42001400 	.word	0x42001400
     46c:	00040003 	.word	0x00040003
     470:	00060003 	.word	0x00060003
     474:	00070003 	.word	0x00070003
     478:	001e0003 	.word	0x001e0003
     47c:	001f0003 	.word	0x001f0003
     480:	000c0002 	.word	0x000c0002
     484:	000e0002 	.word	0x000e0002
     488:	000f0002 	.word	0x000f0002
     48c:	00100003 	.word	0x00100003
     490:	00120003 	.word	0x00120003
     494:	00130003 	.word	0x00130003
     498:	00530005 	.word	0x00530005
     49c:	003e0005 	.word	0x003e0005
     4a0:	00520005 	.word	0x00520005
     4a4:	00160003 	.word	0x00160003
     4a8:	00180003 	.word	0x00180003
     4ac:	00190003 	.word	0x00190003
     4b0:	00050003 	.word	0x00050003
     4b4:	00010003 	.word	0x00010003
     4b8:	000d0002 	.word	0x000d0002
     4bc:	00110003 	.word	0x00110003
     4c0:	003f0005 	.word	0x003f0005
     4c4:	00170003 	.word	0x00170003

000004c8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4c8:	b570      	push	{r4, r5, r6, lr}
     4ca:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4cc:	4a0c      	ldr	r2, [pc, #48]	; (500 <_sercom_get_sercom_inst_index+0x38>)
     4ce:	466b      	mov	r3, sp
     4d0:	ca70      	ldmia	r2!, {r4, r5, r6}
     4d2:	c370      	stmia	r3!, {r4, r5, r6}
     4d4:	ca32      	ldmia	r2!, {r1, r4, r5}
     4d6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4d8:	9e00      	ldr	r6, [sp, #0]
     4da:	4286      	cmp	r6, r0
     4dc:	d006      	beq.n	4ec <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4de:	2301      	movs	r3, #1
     4e0:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4e2:	4669      	mov	r1, sp
     4e4:	5852      	ldr	r2, [r2, r1]
     4e6:	4282      	cmp	r2, r0
     4e8:	d103      	bne.n	4f2 <_sercom_get_sercom_inst_index+0x2a>
     4ea:	e000      	b.n	4ee <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4ec:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     4ee:	b2d8      	uxtb	r0, r3
     4f0:	e003      	b.n	4fa <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4f2:	3301      	adds	r3, #1
     4f4:	2b06      	cmp	r3, #6
     4f6:	d1f3      	bne.n	4e0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     4f8:	2000      	movs	r0, #0
}
     4fa:	b006      	add	sp, #24
     4fc:	bd70      	pop	{r4, r5, r6, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	00004820 	.word	0x00004820

00000504 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     504:	b5f0      	push	{r4, r5, r6, r7, lr}
     506:	4647      	mov	r7, r8
     508:	b480      	push	{r7}
     50a:	1c0c      	adds	r4, r1, #0
     50c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     50e:	2800      	cmp	r0, #0
     510:	d10c      	bne.n	52c <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     512:	2a00      	cmp	r2, #0
     514:	dd0d      	ble.n	532 <_read+0x2e>
     516:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     518:	4e09      	ldr	r6, [pc, #36]	; (540 <_read+0x3c>)
     51a:	4d0a      	ldr	r5, [pc, #40]	; (544 <_read+0x40>)
     51c:	6830      	ldr	r0, [r6, #0]
     51e:	1c21      	adds	r1, r4, #0
     520:	682b      	ldr	r3, [r5, #0]
     522:	4798      	blx	r3
		ptr++;
     524:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     526:	42bc      	cmp	r4, r7
     528:	d1f8      	bne.n	51c <_read+0x18>
     52a:	e004      	b.n	536 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     52c:	2001      	movs	r0, #1
     52e:	4240      	negs	r0, r0
     530:	e002      	b.n	538 <_read+0x34>
	}

	for (; len > 0; --len) {
     532:	2000      	movs	r0, #0
     534:	e000      	b.n	538 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     536:	4640      	mov	r0, r8
	}
	return nChars;
}
     538:	bc04      	pop	{r2}
     53a:	4690      	mov	r8, r2
     53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     53e:	46c0      	nop			; (mov r8, r8)
     540:	20000114 	.word	0x20000114
     544:	2000010c 	.word	0x2000010c

00000548 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     548:	b5f0      	push	{r4, r5, r6, r7, lr}
     54a:	4647      	mov	r7, r8
     54c:	b480      	push	{r7}
     54e:	1c0e      	adds	r6, r1, #0
     550:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     552:	3801      	subs	r0, #1
     554:	2802      	cmp	r0, #2
     556:	d810      	bhi.n	57a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     558:	2a00      	cmp	r2, #0
     55a:	d011      	beq.n	580 <_write+0x38>
     55c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     55e:	4b0d      	ldr	r3, [pc, #52]	; (594 <_write+0x4c>)
     560:	4698      	mov	r8, r3
     562:	4f0d      	ldr	r7, [pc, #52]	; (598 <_write+0x50>)
     564:	4643      	mov	r3, r8
     566:	6818      	ldr	r0, [r3, #0]
     568:	5d31      	ldrb	r1, [r6, r4]
     56a:	683b      	ldr	r3, [r7, #0]
     56c:	4798      	blx	r3
     56e:	2800      	cmp	r0, #0
     570:	db08      	blt.n	584 <_write+0x3c>
			return -1;
		}
		++nChars;
     572:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     574:	42a5      	cmp	r5, r4
     576:	d1f5      	bne.n	564 <_write+0x1c>
     578:	e007      	b.n	58a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     57a:	2001      	movs	r0, #1
     57c:	4240      	negs	r0, r0
     57e:	e005      	b.n	58c <_write+0x44>
	}

	for (; len != 0; --len) {
     580:	2000      	movs	r0, #0
     582:	e003      	b.n	58c <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     584:	2001      	movs	r0, #1
     586:	4240      	negs	r0, r0
     588:	e000      	b.n	58c <_write+0x44>
		}
		++nChars;
     58a:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     58c:	bc04      	pop	{r2}
     58e:	4690      	mov	r8, r2
     590:	bdf0      	pop	{r4, r5, r6, r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	20000114 	.word	0x20000114
     598:	20000110 	.word	0x20000110

0000059c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     59c:	b5f0      	push	{r4, r5, r6, r7, lr}
     59e:	465f      	mov	r7, fp
     5a0:	4656      	mov	r6, sl
     5a2:	464d      	mov	r5, r9
     5a4:	4644      	mov	r4, r8
     5a6:	b4f0      	push	{r4, r5, r6, r7}
     5a8:	b091      	sub	sp, #68	; 0x44
     5aa:	1c05      	adds	r5, r0, #0
     5ac:	1c0c      	adds	r4, r1, #0
     5ae:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5b0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5b2:	1c08      	adds	r0, r1, #0
     5b4:	4bad      	ldr	r3, [pc, #692]	; (86c <usart_init+0x2d0>)
     5b6:	4798      	blx	r3
     5b8:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5ba:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5bc:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5be:	07d9      	lsls	r1, r3, #31
     5c0:	d500      	bpl.n	5c4 <usart_init+0x28>
     5c2:	e14b      	b.n	85c <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5c4:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     5c6:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5c8:	079f      	lsls	r7, r3, #30
     5ca:	d500      	bpl.n	5ce <usart_init+0x32>
     5cc:	e146      	b.n	85c <usart_init+0x2c0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5ce:	4ba8      	ldr	r3, [pc, #672]	; (870 <usart_init+0x2d4>)
     5d0:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5d2:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5d4:	2701      	movs	r7, #1
     5d6:	408f      	lsls	r7, r1
     5d8:	1c39      	adds	r1, r7, #0
     5da:	4301      	orrs	r1, r0
     5dc:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5de:	a90f      	add	r1, sp, #60	; 0x3c
     5e0:	272d      	movs	r7, #45	; 0x2d
     5e2:	5df3      	ldrb	r3, [r6, r7]
     5e4:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5e6:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5e8:	b2d2      	uxtb	r2, r2
     5ea:	4690      	mov	r8, r2
     5ec:	1c10      	adds	r0, r2, #0
     5ee:	4ba1      	ldr	r3, [pc, #644]	; (874 <usart_init+0x2d8>)
     5f0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5f2:	4640      	mov	r0, r8
     5f4:	4ba0      	ldr	r3, [pc, #640]	; (878 <usart_init+0x2dc>)
     5f6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5f8:	5df0      	ldrb	r0, [r6, r7]
     5fa:	2100      	movs	r1, #0
     5fc:	4b9f      	ldr	r3, [pc, #636]	; (87c <usart_init+0x2e0>)
     5fe:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     600:	7af3      	ldrb	r3, [r6, #11]
     602:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     604:	2324      	movs	r3, #36	; 0x24
     606:	5cf3      	ldrb	r3, [r6, r3]
     608:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     60a:	2325      	movs	r3, #37	; 0x25
     60c:	5cf3      	ldrb	r3, [r6, r3]
     60e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     610:	7ef3      	ldrb	r3, [r6, #27]
     612:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     614:	7f33      	ldrb	r3, [r6, #28]
     616:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     618:	6829      	ldr	r1, [r5, #0]
     61a:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     61c:	1c08      	adds	r0, r1, #0
     61e:	4b93      	ldr	r3, [pc, #588]	; (86c <usart_init+0x2d0>)
     620:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     622:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     624:	2200      	movs	r2, #0
     626:	466b      	mov	r3, sp
     628:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     62a:	8a32      	ldrh	r2, [r6, #16]
     62c:	9202      	str	r2, [sp, #8]
     62e:	2380      	movs	r3, #128	; 0x80
     630:	01db      	lsls	r3, r3, #7
     632:	429a      	cmp	r2, r3
     634:	d021      	beq.n	67a <usart_init+0xde>
     636:	2380      	movs	r3, #128	; 0x80
     638:	01db      	lsls	r3, r3, #7
     63a:	429a      	cmp	r2, r3
     63c:	d804      	bhi.n	648 <usart_init+0xac>
     63e:	2380      	movs	r3, #128	; 0x80
     640:	019b      	lsls	r3, r3, #6
     642:	429a      	cmp	r2, r3
     644:	d011      	beq.n	66a <usart_init+0xce>
     646:	e008      	b.n	65a <usart_init+0xbe>
     648:	23c0      	movs	r3, #192	; 0xc0
     64a:	01db      	lsls	r3, r3, #7
     64c:	9f02      	ldr	r7, [sp, #8]
     64e:	429f      	cmp	r7, r3
     650:	d00f      	beq.n	672 <usart_init+0xd6>
     652:	2380      	movs	r3, #128	; 0x80
     654:	021b      	lsls	r3, r3, #8
     656:	429f      	cmp	r7, r3
     658:	d003      	beq.n	662 <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     65a:	2710      	movs	r7, #16
     65c:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     65e:	2700      	movs	r7, #0
     660:	e00e      	b.n	680 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     662:	2703      	movs	r7, #3
     664:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     666:	2700      	movs	r7, #0
     668:	e00a      	b.n	680 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     66a:	2710      	movs	r7, #16
     66c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     66e:	2701      	movs	r7, #1
     670:	e006      	b.n	680 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     672:	2708      	movs	r7, #8
     674:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     676:	2701      	movs	r7, #1
     678:	e002      	b.n	680 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     67a:	2708      	movs	r7, #8
     67c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     67e:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     680:	6831      	ldr	r1, [r6, #0]
     682:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     684:	68f2      	ldr	r2, [r6, #12]
     686:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     688:	6973      	ldr	r3, [r6, #20]
     68a:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     68c:	7e31      	ldrb	r1, [r6, #24]
     68e:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     690:	2326      	movs	r3, #38	; 0x26
     692:	5cf3      	ldrb	r3, [r6, r3]
     694:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     696:	6873      	ldr	r3, [r6, #4]
     698:	2b00      	cmp	r3, #0
     69a:	d013      	beq.n	6c4 <usart_init+0x128>
     69c:	2280      	movs	r2, #128	; 0x80
     69e:	0552      	lsls	r2, r2, #21
     6a0:	4293      	cmp	r3, r2
     6a2:	d12e      	bne.n	702 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     6a4:	2327      	movs	r3, #39	; 0x27
     6a6:	5cf3      	ldrb	r3, [r6, r3]
     6a8:	2b00      	cmp	r3, #0
     6aa:	d12e      	bne.n	70a <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     6ac:	6a37      	ldr	r7, [r6, #32]
     6ae:	b2c0      	uxtb	r0, r0
     6b0:	4b73      	ldr	r3, [pc, #460]	; (880 <usart_init+0x2e4>)
     6b2:	4798      	blx	r3
     6b4:	1c01      	adds	r1, r0, #0
     6b6:	1c38      	adds	r0, r7, #0
     6b8:	466a      	mov	r2, sp
     6ba:	3226      	adds	r2, #38	; 0x26
     6bc:	4b71      	ldr	r3, [pc, #452]	; (884 <usart_init+0x2e8>)
     6be:	4798      	blx	r3
     6c0:	1c03      	adds	r3, r0, #0
     6c2:	e01f      	b.n	704 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     6c4:	2327      	movs	r3, #39	; 0x27
     6c6:	5cf3      	ldrb	r3, [r6, r3]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d00a      	beq.n	6e2 <usart_init+0x146>
				status_code =
     6cc:	9a06      	ldr	r2, [sp, #24]
     6ce:	9200      	str	r2, [sp, #0]
     6d0:	6a30      	ldr	r0, [r6, #32]
     6d2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     6d4:	466a      	mov	r2, sp
     6d6:	3226      	adds	r2, #38	; 0x26
     6d8:	1c3b      	adds	r3, r7, #0
     6da:	4f6b      	ldr	r7, [pc, #428]	; (888 <usart_init+0x2ec>)
     6dc:	47b8      	blx	r7
     6de:	1c03      	adds	r3, r0, #0
     6e0:	e010      	b.n	704 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     6e2:	6a31      	ldr	r1, [r6, #32]
     6e4:	9107      	str	r1, [sp, #28]
     6e6:	b2c0      	uxtb	r0, r0
     6e8:	4b65      	ldr	r3, [pc, #404]	; (880 <usart_init+0x2e4>)
     6ea:	4798      	blx	r3
     6ec:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     6ee:	9a06      	ldr	r2, [sp, #24]
     6f0:	9200      	str	r2, [sp, #0]
     6f2:	9807      	ldr	r0, [sp, #28]
     6f4:	466a      	mov	r2, sp
     6f6:	3226      	adds	r2, #38	; 0x26
     6f8:	1c3b      	adds	r3, r7, #0
     6fa:	4f63      	ldr	r7, [pc, #396]	; (888 <usart_init+0x2ec>)
     6fc:	47b8      	blx	r7
     6fe:	1c03      	adds	r3, r0, #0
     700:	e000      	b.n	704 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     702:	2300      	movs	r3, #0
     704:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     706:	d000      	beq.n	70a <usart_init+0x16e>
     708:	e0a8      	b.n	85c <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     70a:	7e73      	ldrb	r3, [r6, #25]
     70c:	2b00      	cmp	r3, #0
     70e:	d002      	beq.n	716 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     710:	7eb3      	ldrb	r3, [r6, #26]
     712:	4641      	mov	r1, r8
     714:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     716:	682a      	ldr	r2, [r5, #0]
     718:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     71a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     71c:	2b00      	cmp	r3, #0
     71e:	d1fc      	bne.n	71a <usart_init+0x17e>
     720:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     722:	466b      	mov	r3, sp
     724:	3326      	adds	r3, #38	; 0x26
     726:	881b      	ldrh	r3, [r3, #0]
     728:	4642      	mov	r2, r8
     72a:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     72c:	464b      	mov	r3, r9
     72e:	9f03      	ldr	r7, [sp, #12]
     730:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     732:	9f04      	ldr	r7, [sp, #16]
     734:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     736:	6871      	ldr	r1, [r6, #4]
     738:	430b      	orrs	r3, r1
		config->sample_rate |
     73a:	9f02      	ldr	r7, [sp, #8]
     73c:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     73e:	4652      	mov	r2, sl
     740:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     742:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     744:	4659      	mov	r1, fp
     746:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     748:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     74a:	2327      	movs	r3, #39	; 0x27
     74c:	5cf3      	ldrb	r3, [r6, r3]
     74e:	2b00      	cmp	r3, #0
     750:	d101      	bne.n	756 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     752:	2304      	movs	r3, #4
     754:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     756:	7e71      	ldrb	r1, [r6, #25]
     758:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     75a:	7f33      	ldrb	r3, [r6, #28]
     75c:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     75e:	4319      	orrs	r1, r3
     760:	7af2      	ldrb	r2, [r6, #11]
     762:	7ab3      	ldrb	r3, [r6, #10]
     764:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     766:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     768:	7f73      	ldrb	r3, [r6, #29]
     76a:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     76c:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     76e:	2324      	movs	r3, #36	; 0x24
     770:	5cf3      	ldrb	r3, [r6, r3]
     772:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     774:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     776:	2325      	movs	r3, #37	; 0x25
     778:	5cf3      	ldrb	r3, [r6, r3]
     77a:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     77c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     77e:	8933      	ldrh	r3, [r6, #8]
     780:	2bff      	cmp	r3, #255	; 0xff
     782:	d00b      	beq.n	79c <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     784:	7ef2      	ldrb	r2, [r6, #27]
     786:	2a00      	cmp	r2, #0
     788:	d003      	beq.n	792 <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     78a:	22a0      	movs	r2, #160	; 0xa0
     78c:	04d2      	lsls	r2, r2, #19
     78e:	4317      	orrs	r7, r2
     790:	e002      	b.n	798 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     792:	2280      	movs	r2, #128	; 0x80
     794:	0452      	lsls	r2, r2, #17
     796:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     798:	4319      	orrs	r1, r3
     79a:	e005      	b.n	7a8 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     79c:	7ef3      	ldrb	r3, [r6, #27]
     79e:	2b00      	cmp	r3, #0
     7a0:	d002      	beq.n	7a8 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     7a2:	2380      	movs	r3, #128	; 0x80
     7a4:	04db      	lsls	r3, r3, #19
     7a6:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     7a8:	232c      	movs	r3, #44	; 0x2c
     7aa:	5cf3      	ldrb	r3, [r6, r3]
     7ac:	2b00      	cmp	r3, #0
     7ae:	d103      	bne.n	7b8 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     7b0:	4b36      	ldr	r3, [pc, #216]	; (88c <usart_init+0x2f0>)
     7b2:	789b      	ldrb	r3, [r3, #2]
     7b4:	079a      	lsls	r2, r3, #30
     7b6:	d501      	bpl.n	7bc <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     7b8:	2380      	movs	r3, #128	; 0x80
     7ba:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7bc:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7be:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     7c0:	2b00      	cmp	r3, #0
     7c2:	d1fc      	bne.n	7be <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     7c4:	4643      	mov	r3, r8
     7c6:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     7c8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7ca:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     7cc:	2b00      	cmp	r3, #0
     7ce:	d1fc      	bne.n	7ca <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     7d0:	4641      	mov	r1, r8
     7d2:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7d4:	ab0e      	add	r3, sp, #56	; 0x38
     7d6:	2280      	movs	r2, #128	; 0x80
     7d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7da:	2200      	movs	r2, #0
     7dc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     7de:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7e0:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     7e2:	6b32      	ldr	r2, [r6, #48]	; 0x30
     7e4:	920a      	str	r2, [sp, #40]	; 0x28
     7e6:	6b73      	ldr	r3, [r6, #52]	; 0x34
     7e8:	930b      	str	r3, [sp, #44]	; 0x2c
     7ea:	6bb7      	ldr	r7, [r6, #56]	; 0x38
     7ec:	970c      	str	r7, [sp, #48]	; 0x30
     7ee:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
     7f0:	960d      	str	r6, [sp, #52]	; 0x34
     7f2:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7f4:	ae0e      	add	r6, sp, #56	; 0x38
     7f6:	b2f9      	uxtb	r1, r7
     7f8:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7fa:	aa0a      	add	r2, sp, #40	; 0x28
     7fc:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     7fe:	2800      	cmp	r0, #0
     800:	d102      	bne.n	808 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     802:	1c20      	adds	r0, r4, #0
     804:	4a22      	ldr	r2, [pc, #136]	; (890 <usart_init+0x2f4>)
     806:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     808:	1c43      	adds	r3, r0, #1
     80a:	d005      	beq.n	818 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     80c:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     80e:	0c00      	lsrs	r0, r0, #16
     810:	b2c0      	uxtb	r0, r0
     812:	1c31      	adds	r1, r6, #0
     814:	4a1f      	ldr	r2, [pc, #124]	; (894 <usart_init+0x2f8>)
     816:	4790      	blx	r2
     818:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     81a:	2f04      	cmp	r7, #4
     81c:	d1eb      	bne.n	7f6 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     81e:	2300      	movs	r3, #0
     820:	60eb      	str	r3, [r5, #12]
     822:	612b      	str	r3, [r5, #16]
     824:	616b      	str	r3, [r5, #20]
     826:	61ab      	str	r3, [r5, #24]
     828:	61eb      	str	r3, [r5, #28]
     82a:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     82c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     82e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     830:	2200      	movs	r2, #0
     832:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     834:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     836:	2330      	movs	r3, #48	; 0x30
     838:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     83a:	2331      	movs	r3, #49	; 0x31
     83c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     83e:	2332      	movs	r3, #50	; 0x32
     840:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     842:	2333      	movs	r3, #51	; 0x33
     844:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     846:	6828      	ldr	r0, [r5, #0]
     848:	4b08      	ldr	r3, [pc, #32]	; (86c <usart_init+0x2d0>)
     84a:	4798      	blx	r3
     84c:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     84e:	4912      	ldr	r1, [pc, #72]	; (898 <usart_init+0x2fc>)
     850:	4b12      	ldr	r3, [pc, #72]	; (89c <usart_init+0x300>)
     852:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     854:	00a4      	lsls	r4, r4, #2
     856:	4b12      	ldr	r3, [pc, #72]	; (8a0 <usart_init+0x304>)
     858:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     85a:	2000      	movs	r0, #0
}
     85c:	b011      	add	sp, #68	; 0x44
     85e:	bc3c      	pop	{r2, r3, r4, r5}
     860:	4690      	mov	r8, r2
     862:	4699      	mov	r9, r3
     864:	46a2      	mov	sl, r4
     866:	46ab      	mov	fp, r5
     868:	bdf0      	pop	{r4, r5, r6, r7, pc}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	000004c9 	.word	0x000004c9
     870:	40000400 	.word	0x40000400
     874:	00001559 	.word	0x00001559
     878:	000014cd 	.word	0x000014cd
     87c:	000002f1 	.word	0x000002f1
     880:	00001575 	.word	0x00001575
     884:	00000115 	.word	0x00000115
     888:	00000141 	.word	0x00000141
     88c:	41002000 	.word	0x41002000
     890:	00000341 	.word	0x00000341
     894:	00001635 	.word	0x00001635
     898:	00000949 	.word	0x00000949
     89c:	00000ae9 	.word	0x00000ae9
     8a0:	20000118 	.word	0x20000118

000008a4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     8a4:	b510      	push	{r4, lr}
     8a6:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a8:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8aa:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     8ac:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8ae:	2c00      	cmp	r4, #0
     8b0:	d00d      	beq.n	8ce <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     8b2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
     8b4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     8b6:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     8b8:	2a00      	cmp	r2, #0
     8ba:	d108      	bne.n	8ce <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8bc:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8be:	2a00      	cmp	r2, #0
     8c0:	d1fc      	bne.n	8bc <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     8c2:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     8c4:	2102      	movs	r1, #2
     8c6:	7e1a      	ldrb	r2, [r3, #24]
     8c8:	420a      	tst	r2, r1
     8ca:	d0fc      	beq.n	8c6 <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     8cc:	2000      	movs	r0, #0
}
     8ce:	bd10      	pop	{r4, pc}

000008d0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     8d0:	b510      	push	{r4, lr}
     8d2:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8d4:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     8d6:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     8d8:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     8da:	2a00      	cmp	r2, #0
     8dc:	d033      	beq.n	946 <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     8de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     8e0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     8e2:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     8e4:	2b00      	cmp	r3, #0
     8e6:	d12e      	bne.n	946 <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     8e8:	7e23      	ldrb	r3, [r4, #24]
     8ea:	075a      	lsls	r2, r3, #29
     8ec:	d52b      	bpl.n	946 <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     8ee:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8f0:	2b00      	cmp	r3, #0
     8f2:	d1fc      	bne.n	8ee <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     8f4:	8b63      	ldrh	r3, [r4, #26]
     8f6:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     8f8:	069a      	lsls	r2, r3, #26
     8fa:	d021      	beq.n	940 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     8fc:	079a      	lsls	r2, r3, #30
     8fe:	d503      	bpl.n	908 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     900:	2302      	movs	r3, #2
     902:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     904:	201a      	movs	r0, #26
     906:	e01e      	b.n	946 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     908:	075a      	lsls	r2, r3, #29
     90a:	d503      	bpl.n	914 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     90c:	2304      	movs	r3, #4
     90e:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     910:	201e      	movs	r0, #30
     912:	e018      	b.n	946 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     914:	07da      	lsls	r2, r3, #31
     916:	d503      	bpl.n	920 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     918:	2301      	movs	r3, #1
     91a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     91c:	2013      	movs	r0, #19
     91e:	e012      	b.n	946 <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     920:	06da      	lsls	r2, r3, #27
     922:	d505      	bpl.n	930 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     924:	8b62      	ldrh	r2, [r4, #26]
     926:	2310      	movs	r3, #16
     928:	4313      	orrs	r3, r2
     92a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     92c:	2042      	movs	r0, #66	; 0x42
     92e:	e00a      	b.n	946 <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     930:	069a      	lsls	r2, r3, #26
     932:	d505      	bpl.n	940 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     934:	8b62      	ldrh	r2, [r4, #26]
     936:	2320      	movs	r3, #32
     938:	4313      	orrs	r3, r2
     93a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     93c:	2041      	movs	r0, #65	; 0x41
     93e:	e002      	b.n	946 <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     940:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     942:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     944:	2000      	movs	r0, #0
}
     946:	bd10      	pop	{r4, pc}

00000948 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     94a:	0080      	lsls	r0, r0, #2
     94c:	4b64      	ldr	r3, [pc, #400]	; (ae0 <_usart_interrupt_handler+0x198>)
     94e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     950:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     952:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     954:	2b00      	cmp	r3, #0
     956:	d1fc      	bne.n	952 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     958:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     95a:	7da6      	ldrb	r6, [r4, #22]
     95c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     95e:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     960:	5ceb      	ldrb	r3, [r5, r3]
     962:	2230      	movs	r2, #48	; 0x30
     964:	5caf      	ldrb	r7, [r5, r2]
     966:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     968:	07f1      	lsls	r1, r6, #31
     96a:	d520      	bpl.n	9ae <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
     96c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     96e:	b29b      	uxth	r3, r3
     970:	2b00      	cmp	r3, #0
     972:	d01a      	beq.n	9aa <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     974:	6aab      	ldr	r3, [r5, #40]	; 0x28
     976:	781a      	ldrb	r2, [r3, #0]
     978:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     97a:	1c59      	adds	r1, r3, #1
     97c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     97e:	7969      	ldrb	r1, [r5, #5]
     980:	2901      	cmp	r1, #1
     982:	d104      	bne.n	98e <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     984:	7859      	ldrb	r1, [r3, #1]
     986:	0209      	lsls	r1, r1, #8
     988:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     98a:	3302      	adds	r3, #2
     98c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     98e:	05d3      	lsls	r3, r2, #23
     990:	0ddb      	lsrs	r3, r3, #23
     992:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     994:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     996:	3b01      	subs	r3, #1
     998:	b29b      	uxth	r3, r3
     99a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     99c:	2b00      	cmp	r3, #0
     99e:	d106      	bne.n	9ae <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9a0:	2301      	movs	r3, #1
     9a2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     9a4:	2302      	movs	r3, #2
     9a6:	75a3      	strb	r3, [r4, #22]
     9a8:	e001      	b.n	9ae <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9aa:	2301      	movs	r3, #1
     9ac:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9ae:	07b2      	lsls	r2, r6, #30
     9b0:	d509      	bpl.n	9c6 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     9b2:	2302      	movs	r3, #2
     9b4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     9b6:	2200      	movs	r2, #0
     9b8:	2333      	movs	r3, #51	; 0x33
     9ba:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9bc:	07fb      	lsls	r3, r7, #31
     9be:	d502      	bpl.n	9c6 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     9c0:	1c28      	adds	r0, r5, #0
     9c2:	68e9      	ldr	r1, [r5, #12]
     9c4:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9c6:	0772      	lsls	r2, r6, #29
     9c8:	d56a      	bpl.n	aa0 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
     9ca:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     9cc:	b29b      	uxth	r3, r3
     9ce:	2b00      	cmp	r3, #0
     9d0:	d064      	beq.n	a9c <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9d2:	8b63      	ldrh	r3, [r4, #26]
     9d4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     9d6:	0719      	lsls	r1, r3, #28
     9d8:	d402      	bmi.n	9e0 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9da:	223f      	movs	r2, #63	; 0x3f
     9dc:	4013      	ands	r3, r2
     9de:	e001      	b.n	9e4 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     9e0:	2237      	movs	r2, #55	; 0x37
     9e2:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     9e4:	2b00      	cmp	r3, #0
     9e6:	d037      	beq.n	a58 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     9e8:	079a      	lsls	r2, r3, #30
     9ea:	d507      	bpl.n	9fc <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     9ec:	221a      	movs	r2, #26
     9ee:	2332      	movs	r3, #50	; 0x32
     9f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     9f2:	8b62      	ldrh	r2, [r4, #26]
     9f4:	2302      	movs	r3, #2
     9f6:	4313      	orrs	r3, r2
     9f8:	8363      	strh	r3, [r4, #26]
     9fa:	e027      	b.n	a4c <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9fc:	0759      	lsls	r1, r3, #29
     9fe:	d507      	bpl.n	a10 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     a00:	221e      	movs	r2, #30
     a02:	2332      	movs	r3, #50	; 0x32
     a04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     a06:	8b62      	ldrh	r2, [r4, #26]
     a08:	2304      	movs	r3, #4
     a0a:	4313      	orrs	r3, r2
     a0c:	8363      	strh	r3, [r4, #26]
     a0e:	e01d      	b.n	a4c <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a10:	07da      	lsls	r2, r3, #31
     a12:	d507      	bpl.n	a24 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     a14:	2213      	movs	r2, #19
     a16:	2332      	movs	r3, #50	; 0x32
     a18:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     a1a:	8b62      	ldrh	r2, [r4, #26]
     a1c:	2301      	movs	r3, #1
     a1e:	4313      	orrs	r3, r2
     a20:	8363      	strh	r3, [r4, #26]
     a22:	e013      	b.n	a4c <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a24:	06d9      	lsls	r1, r3, #27
     a26:	d507      	bpl.n	a38 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     a28:	2242      	movs	r2, #66	; 0x42
     a2a:	2332      	movs	r3, #50	; 0x32
     a2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     a2e:	8b62      	ldrh	r2, [r4, #26]
     a30:	2310      	movs	r3, #16
     a32:	4313      	orrs	r3, r2
     a34:	8363      	strh	r3, [r4, #26]
     a36:	e009      	b.n	a4c <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a38:	2220      	movs	r2, #32
     a3a:	421a      	tst	r2, r3
     a3c:	d006      	beq.n	a4c <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a3e:	2241      	movs	r2, #65	; 0x41
     a40:	2332      	movs	r3, #50	; 0x32
     a42:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     a44:	8b62      	ldrh	r2, [r4, #26]
     a46:	2320      	movs	r3, #32
     a48:	4313      	orrs	r3, r2
     a4a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a4c:	077a      	lsls	r2, r7, #29
     a4e:	d527      	bpl.n	aa0 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a50:	1c28      	adds	r0, r5, #0
     a52:	696b      	ldr	r3, [r5, #20]
     a54:	4798      	blx	r3
     a56:	e023      	b.n	aa0 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a58:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     a5a:	05d2      	lsls	r2, r2, #23
     a5c:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a5e:	b2d3      	uxtb	r3, r2
     a60:	6a69      	ldr	r1, [r5, #36]	; 0x24
     a62:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     a64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     a66:	1c59      	adds	r1, r3, #1
     a68:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a6a:	7969      	ldrb	r1, [r5, #5]
     a6c:	2901      	cmp	r1, #1
     a6e:	d104      	bne.n	a7a <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     a70:	0a12      	lsrs	r2, r2, #8
     a72:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     a74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     a76:	3301      	adds	r3, #1
     a78:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     a7a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a7c:	3b01      	subs	r3, #1
     a7e:	b29b      	uxth	r3, r3
     a80:	85ab      	strh	r3, [r5, #44]	; 0x2c
     a82:	2b00      	cmp	r3, #0
     a84:	d10c      	bne.n	aa0 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a86:	2304      	movs	r3, #4
     a88:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     a8a:	2200      	movs	r2, #0
     a8c:	2332      	movs	r3, #50	; 0x32
     a8e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     a90:	07ba      	lsls	r2, r7, #30
     a92:	d505      	bpl.n	aa0 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     a94:	1c28      	adds	r0, r5, #0
     a96:	692b      	ldr	r3, [r5, #16]
     a98:	4798      	blx	r3
     a9a:	e001      	b.n	aa0 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a9c:	2304      	movs	r3, #4
     a9e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     aa0:	06f1      	lsls	r1, r6, #27
     aa2:	d507      	bpl.n	ab4 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     aa4:	2310      	movs	r3, #16
     aa6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     aa8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     aaa:	06fa      	lsls	r2, r7, #27
     aac:	d502      	bpl.n	ab4 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     aae:	1c28      	adds	r0, r5, #0
     ab0:	69eb      	ldr	r3, [r5, #28]
     ab2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     ab4:	06b1      	lsls	r1, r6, #26
     ab6:	d507      	bpl.n	ac8 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ab8:	2320      	movs	r3, #32
     aba:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     abc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     abe:	073a      	lsls	r2, r7, #28
     ac0:	d502      	bpl.n	ac8 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     ac2:	1c28      	adds	r0, r5, #0
     ac4:	69ab      	ldr	r3, [r5, #24]
     ac6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     ac8:	0731      	lsls	r1, r6, #28
     aca:	d507      	bpl.n	adc <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     acc:	2308      	movs	r3, #8
     ace:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ad0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     ad2:	06ba      	lsls	r2, r7, #26
     ad4:	d502      	bpl.n	adc <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     ad6:	6a2b      	ldr	r3, [r5, #32]
     ad8:	1c28      	adds	r0, r5, #0
     ada:	4798      	blx	r3
		}
	}
#endif
}
     adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	20000118 	.word	0x20000118

00000ae4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     ae4:	4770      	bx	lr
     ae6:	46c0      	nop			; (mov r8, r8)

00000ae8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     aea:	4b0a      	ldr	r3, [pc, #40]	; (b14 <_sercom_set_handler+0x2c>)
     aec:	781b      	ldrb	r3, [r3, #0]
     aee:	2b00      	cmp	r3, #0
     af0:	d10c      	bne.n	b0c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     af2:	4f09      	ldr	r7, [pc, #36]	; (b18 <_sercom_set_handler+0x30>)
     af4:	4e09      	ldr	r6, [pc, #36]	; (b1c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     af6:	4d0a      	ldr	r5, [pc, #40]	; (b20 <_sercom_set_handler+0x38>)
     af8:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     afa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     afc:	195a      	adds	r2, r3, r5
     afe:	6014      	str	r4, [r2, #0]
     b00:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b02:	2b18      	cmp	r3, #24
     b04:	d1f9      	bne.n	afa <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     b06:	2201      	movs	r2, #1
     b08:	4b02      	ldr	r3, [pc, #8]	; (b14 <_sercom_set_handler+0x2c>)
     b0a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b0c:	0080      	lsls	r0, r0, #2
     b0e:	4b02      	ldr	r3, [pc, #8]	; (b18 <_sercom_set_handler+0x30>)
     b10:	50c1      	str	r1, [r0, r3]
}
     b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b14:	20000090 	.word	0x20000090
     b18:	20000094 	.word	0x20000094
     b1c:	00000ae5 	.word	0x00000ae5
     b20:	20000118 	.word	0x20000118

00000b24 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b24:	b510      	push	{r4, lr}
     b26:	b082      	sub	sp, #8
     b28:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b2a:	4668      	mov	r0, sp
     b2c:	4905      	ldr	r1, [pc, #20]	; (b44 <_sercom_get_interrupt_vector+0x20>)
     b2e:	2206      	movs	r2, #6
     b30:	4b05      	ldr	r3, [pc, #20]	; (b48 <_sercom_get_interrupt_vector+0x24>)
     b32:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b34:	1c20      	adds	r0, r4, #0
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <_sercom_get_interrupt_vector+0x28>)
     b38:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b3a:	466b      	mov	r3, sp
     b3c:	5618      	ldrsb	r0, [r3, r0]
}
     b3e:	b002      	add	sp, #8
     b40:	bd10      	pop	{r4, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	00004838 	.word	0x00004838
     b48:	000038f9 	.word	0x000038f9
     b4c:	000004c9 	.word	0x000004c9

00000b50 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b50:	b508      	push	{r3, lr}
     b52:	4b02      	ldr	r3, [pc, #8]	; (b5c <SERCOM0_Handler+0xc>)
     b54:	681b      	ldr	r3, [r3, #0]
     b56:	2000      	movs	r0, #0
     b58:	4798      	blx	r3
     b5a:	bd08      	pop	{r3, pc}
     b5c:	20000094 	.word	0x20000094

00000b60 <SERCOM1_Handler>:
     b60:	b508      	push	{r3, lr}
     b62:	4b02      	ldr	r3, [pc, #8]	; (b6c <SERCOM1_Handler+0xc>)
     b64:	685b      	ldr	r3, [r3, #4]
     b66:	2001      	movs	r0, #1
     b68:	4798      	blx	r3
     b6a:	bd08      	pop	{r3, pc}
     b6c:	20000094 	.word	0x20000094

00000b70 <SERCOM2_Handler>:
     b70:	b508      	push	{r3, lr}
     b72:	4b02      	ldr	r3, [pc, #8]	; (b7c <SERCOM2_Handler+0xc>)
     b74:	689b      	ldr	r3, [r3, #8]
     b76:	2002      	movs	r0, #2
     b78:	4798      	blx	r3
     b7a:	bd08      	pop	{r3, pc}
     b7c:	20000094 	.word	0x20000094

00000b80 <SERCOM3_Handler>:
     b80:	b508      	push	{r3, lr}
     b82:	4b02      	ldr	r3, [pc, #8]	; (b8c <SERCOM3_Handler+0xc>)
     b84:	68db      	ldr	r3, [r3, #12]
     b86:	2003      	movs	r0, #3
     b88:	4798      	blx	r3
     b8a:	bd08      	pop	{r3, pc}
     b8c:	20000094 	.word	0x20000094

00000b90 <SERCOM4_Handler>:
     b90:	b508      	push	{r3, lr}
     b92:	4b02      	ldr	r3, [pc, #8]	; (b9c <SERCOM4_Handler+0xc>)
     b94:	691b      	ldr	r3, [r3, #16]
     b96:	2004      	movs	r0, #4
     b98:	4798      	blx	r3
     b9a:	bd08      	pop	{r3, pc}
     b9c:	20000094 	.word	0x20000094

00000ba0 <SERCOM5_Handler>:
     ba0:	b508      	push	{r3, lr}
     ba2:	4b02      	ldr	r3, [pc, #8]	; (bac <SERCOM5_Handler+0xc>)
     ba4:	695b      	ldr	r3, [r3, #20]
     ba6:	2005      	movs	r0, #5
     ba8:	4798      	blx	r3
     baa:	bd08      	pop	{r3, pc}
     bac:	20000094 	.word	0x20000094

00000bb0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     bb0:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     bb2:	2000      	movs	r0, #0
     bb4:	4b08      	ldr	r3, [pc, #32]	; (bd8 <delay_init+0x28>)
     bb6:	4798      	blx	r3
	cycles_per_ms /= 1000;
     bb8:	4c08      	ldr	r4, [pc, #32]	; (bdc <delay_init+0x2c>)
     bba:	21fa      	movs	r1, #250	; 0xfa
     bbc:	0089      	lsls	r1, r1, #2
     bbe:	47a0      	blx	r4
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <delay_init+0x30>)
     bc2:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     bc4:	21fa      	movs	r1, #250	; 0xfa
     bc6:	0089      	lsls	r1, r1, #2
     bc8:	47a0      	blx	r4
     bca:	4b06      	ldr	r3, [pc, #24]	; (be4 <delay_init+0x34>)
     bcc:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     bce:	2205      	movs	r2, #5
     bd0:	4b05      	ldr	r3, [pc, #20]	; (be8 <delay_init+0x38>)
     bd2:	601a      	str	r2, [r3, #0]
}
     bd4:	bd10      	pop	{r4, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00001441 	.word	0x00001441
     bdc:	00001a81 	.word	0x00001a81
     be0:	20000004 	.word	0x20000004
     be4:	20000000 	.word	0x20000000
     be8:	e000e010 	.word	0xe000e010

00000bec <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     bec:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     bee:	4b08      	ldr	r3, [pc, #32]	; (c10 <delay_cycles_ms+0x24>)
     bf0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     bf2:	4a08      	ldr	r2, [pc, #32]	; (c14 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     bf4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     bf6:	2180      	movs	r1, #128	; 0x80
     bf8:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     bfa:	e006      	b.n	c0a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     bfc:	2c00      	cmp	r4, #0
     bfe:	d004      	beq.n	c0a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     c00:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     c02:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c04:	6813      	ldr	r3, [r2, #0]
     c06:	420b      	tst	r3, r1
     c08:	d0fc      	beq.n	c04 <delay_cycles_ms+0x18>
     c0a:	3801      	subs	r0, #1
     c0c:	d2f6      	bcs.n	bfc <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     c0e:	bd30      	pop	{r4, r5, pc}
     c10:	20000004 	.word	0x20000004
     c14:	e000e010 	.word	0xe000e010

00000c18 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c18:	4b0c      	ldr	r3, [pc, #48]	; (c4c <cpu_irq_enter_critical+0x34>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d110      	bne.n	c42 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c20:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c24:	2b00      	cmp	r3, #0
     c26:	d109      	bne.n	c3c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     c28:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c2a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c2e:	2200      	movs	r2, #0
     c30:	4b07      	ldr	r3, [pc, #28]	; (c50 <cpu_irq_enter_critical+0x38>)
     c32:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c34:	2201      	movs	r2, #1
     c36:	4b07      	ldr	r3, [pc, #28]	; (c54 <cpu_irq_enter_critical+0x3c>)
     c38:	701a      	strb	r2, [r3, #0]
     c3a:	e002      	b.n	c42 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c3c:	2200      	movs	r2, #0
     c3e:	4b05      	ldr	r3, [pc, #20]	; (c54 <cpu_irq_enter_critical+0x3c>)
     c40:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c42:	4b02      	ldr	r3, [pc, #8]	; (c4c <cpu_irq_enter_critical+0x34>)
     c44:	681a      	ldr	r2, [r3, #0]
     c46:	3201      	adds	r2, #1
     c48:	601a      	str	r2, [r3, #0]
}
     c4a:	4770      	bx	lr
     c4c:	200000ac 	.word	0x200000ac
     c50:	20000008 	.word	0x20000008
     c54:	200000b0 	.word	0x200000b0

00000c58 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c58:	4b08      	ldr	r3, [pc, #32]	; (c7c <cpu_irq_leave_critical+0x24>)
     c5a:	681a      	ldr	r2, [r3, #0]
     c5c:	3a01      	subs	r2, #1
     c5e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c60:	681b      	ldr	r3, [r3, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d109      	bne.n	c7a <cpu_irq_leave_critical+0x22>
     c66:	4b06      	ldr	r3, [pc, #24]	; (c80 <cpu_irq_leave_critical+0x28>)
     c68:	781b      	ldrb	r3, [r3, #0]
     c6a:	2b00      	cmp	r3, #0
     c6c:	d005      	beq.n	c7a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c6e:	2201      	movs	r2, #1
     c70:	4b04      	ldr	r3, [pc, #16]	; (c84 <cpu_irq_leave_critical+0x2c>)
     c72:	701a      	strb	r2, [r3, #0]
     c74:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     c78:	b662      	cpsie	i
	}
}
     c7a:	4770      	bx	lr
     c7c:	200000ac 	.word	0x200000ac
     c80:	200000b0 	.word	0x200000b0
     c84:	20000008 	.word	0x20000008

00000c88 <system_board_init>:




void system_board_init(void)
{
     c88:	b5f0      	push	{r4, r5, r6, r7, lr}
     c8a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     c8c:	ac01      	add	r4, sp, #4
     c8e:	2501      	movs	r5, #1
     c90:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c92:	2700      	movs	r7, #0
     c94:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c96:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c98:	2013      	movs	r0, #19
     c9a:	1c21      	adds	r1, r4, #0
     c9c:	4e06      	ldr	r6, [pc, #24]	; (cb8 <system_board_init+0x30>)
     c9e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ca0:	2280      	movs	r2, #128	; 0x80
     ca2:	0312      	lsls	r2, r2, #12
     ca4:	4b05      	ldr	r3, [pc, #20]	; (cbc <system_board_init+0x34>)
     ca6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ca8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     caa:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     cac:	201c      	movs	r0, #28
     cae:	1c21      	adds	r1, r4, #0
     cb0:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     cb2:	b003      	add	sp, #12
     cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	00001101 	.word	0x00001101
     cbc:	41004400 	.word	0x41004400

00000cc0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     cc0:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     cc2:	2200      	movs	r2, #0
     cc4:	2300      	movs	r3, #0
     cc6:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     cc8:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     cca:	2100      	movs	r1, #0
     ccc:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     cce:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     cd0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     cd2:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     cd4:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     cd6:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
     cd8:	2406      	movs	r4, #6
     cda:	7304      	strb	r4, [r0, #12]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     cdc:	24c0      	movs	r4, #192	; 0xc0
     cde:	0164      	lsls	r4, r4, #5
     ce0:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     ce2:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     ce4:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     ce6:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     ce8:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     cea:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     cec:	242a      	movs	r4, #42	; 0x2a
     cee:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     cf0:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     cf2:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     cf4:	2424      	movs	r4, #36	; 0x24
     cf6:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     cf8:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     cfa:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     cfc:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     cfe:	232b      	movs	r3, #43	; 0x2b
     d00:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     d02:	232c      	movs	r3, #44	; 0x2c
     d04:	54c1      	strb	r1, [r0, r3]
}
     d06:	bd10      	pop	{r4, pc}

00000d08 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	465f      	mov	r7, fp
     d0c:	4656      	mov	r6, sl
     d0e:	464d      	mov	r5, r9
     d10:	4644      	mov	r4, r8
     d12:	b4f0      	push	{r4, r5, r6, r7}
     d14:	b099      	sub	sp, #100	; 0x64
     d16:	1c06      	adds	r6, r0, #0
     d18:	1c15      	adds	r5, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     d1a:	6001      	str	r1, [r0, #0]
     d1c:	4bb5      	ldr	r3, [pc, #724]	; (ff4 <adc_init+0x2ec>)
     d1e:	6a18      	ldr	r0, [r3, #32]
     d20:	2280      	movs	r2, #128	; 0x80
     d22:	0252      	lsls	r2, r2, #9
     d24:	4302      	orrs	r2, r0
     d26:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     d28:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     d2a:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     d2c:	07da      	lsls	r2, r3, #31
     d2e:	d500      	bpl.n	d32 <adc_init+0x2a>
     d30:	e1d9      	b.n	10e6 <adc_init+0x3de>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     d32:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     d34:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     d36:	0799      	lsls	r1, r3, #30
     d38:	d500      	bpl.n	d3c <adc_init+0x34>
     d3a:	e1d4      	b.n	10e6 <adc_init+0x3de>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     d3c:	786b      	ldrb	r3, [r5, #1]
     d3e:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     d40:	2b00      	cmp	r3, #0
     d42:	d104      	bne.n	d4e <adc_init+0x46>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     d44:	4bac      	ldr	r3, [pc, #688]	; (ff8 <adc_init+0x2f0>)
     d46:	6c19      	ldr	r1, [r3, #64]	; 0x40
     d48:	2204      	movs	r2, #4
     d4a:	430a      	orrs	r2, r1
     d4c:	641a      	str	r2, [r3, #64]	; 0x40
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     d4e:	6832      	ldr	r2, [r6, #0]
     d50:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     d52:	782b      	ldrb	r3, [r5, #0]
     d54:	4668      	mov	r0, sp
     d56:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     d58:	201e      	movs	r0, #30
     d5a:	a902      	add	r1, sp, #8
     d5c:	4ba7      	ldr	r3, [pc, #668]	; (ffc <adc_init+0x2f4>)
     d5e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     d60:	201e      	movs	r0, #30
     d62:	4ba7      	ldr	r3, [pc, #668]	; (1000 <adc_init+0x2f8>)
     d64:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     d66:	232c      	movs	r3, #44	; 0x2c
     d68:	5ceb      	ldrb	r3, [r5, r3]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d042      	beq.n	df4 <adc_init+0xec>
		uint8_t offset = config->pin_scan.offset_start_scan;
     d6e:	222b      	movs	r2, #43	; 0x2b
     d70:	5cac      	ldrb	r4, [r5, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     d72:	7b29      	ldrb	r1, [r5, #12]
     d74:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     d76:	190a      	adds	r2, r1, r4
     d78:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     d7a:	18d3      	adds	r3, r2, r3
     d7c:	b2db      	uxtb	r3, r3
     d7e:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     d80:	429a      	cmp	r2, r3
     d82:	d221      	bcs.n	dc8 <adc_init+0xc0>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d84:	4a9f      	ldr	r2, [pc, #636]	; (1004 <adc_init+0x2fc>)
     d86:	4693      	mov	fp, r2
     d88:	4b9f      	ldr	r3, [pc, #636]	; (1008 <adc_init+0x300>)
     d8a:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     d8c:	270f      	movs	r7, #15
     d8e:	4027      	ands	r7, r4
     d90:	7b2b      	ldrb	r3, [r5, #12]
     d92:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     d94:	a804      	add	r0, sp, #16
     d96:	4659      	mov	r1, fp
     d98:	2250      	movs	r2, #80	; 0x50
     d9a:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     d9c:	2f13      	cmp	r7, #19
     d9e:	d80c      	bhi.n	dba <adc_init+0xb2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     da0:	00bf      	lsls	r7, r7, #2
     da2:	ab04      	add	r3, sp, #16
     da4:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     da6:	a903      	add	r1, sp, #12
     da8:	2300      	movs	r3, #0
     daa:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     dac:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     dae:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     db0:	2301      	movs	r3, #1
     db2:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     db4:	b2c0      	uxtb	r0, r0
     db6:	4a95      	ldr	r2, [pc, #596]	; (100c <adc_init+0x304>)
     db8:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     dba:	3401      	adds	r4, #1
     dbc:	b2e4      	uxtb	r4, r4
     dbe:	4640      	mov	r0, r8
     dc0:	1903      	adds	r3, r0, r4
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     dc2:	b2db      	uxtb	r3, r3
     dc4:	4599      	cmp	r9, r3
     dc6:	d8e1      	bhi.n	d8c <adc_init+0x84>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     dc8:	89ec      	ldrh	r4, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     dca:	a804      	add	r0, sp, #16
     dcc:	498d      	ldr	r1, [pc, #564]	; (1004 <adc_init+0x2fc>)
     dce:	2250      	movs	r2, #80	; 0x50
     dd0:	4b8d      	ldr	r3, [pc, #564]	; (1008 <adc_init+0x300>)
     dd2:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     dd4:	2c13      	cmp	r4, #19
     dd6:	d837      	bhi.n	e48 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     dd8:	00a4      	lsls	r4, r4, #2
     dda:	ab04      	add	r3, sp, #16
     ddc:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dde:	a903      	add	r1, sp, #12
     de0:	2300      	movs	r3, #0
     de2:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     de4:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     de6:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     de8:	2301      	movs	r3, #1
     dea:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     dec:	b2c0      	uxtb	r0, r0
     dee:	4b87      	ldr	r3, [pc, #540]	; (100c <adc_init+0x304>)
     df0:	4798      	blx	r3
     df2:	e029      	b.n	e48 <adc_init+0x140>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     df4:	7b2c      	ldrb	r4, [r5, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     df6:	a804      	add	r0, sp, #16
     df8:	4982      	ldr	r1, [pc, #520]	; (1004 <adc_init+0x2fc>)
     dfa:	2250      	movs	r2, #80	; 0x50
     dfc:	4b82      	ldr	r3, [pc, #520]	; (1008 <adc_init+0x300>)
     dfe:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     e00:	2c13      	cmp	r4, #19
     e02:	d80c      	bhi.n	e1e <adc_init+0x116>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     e04:	00a4      	lsls	r4, r4, #2
     e06:	ab04      	add	r3, sp, #16
     e08:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e0a:	a903      	add	r1, sp, #12
     e0c:	2300      	movs	r3, #0
     e0e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     e10:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     e12:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     e14:	2301      	movs	r3, #1
     e16:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     e18:	b2c0      	uxtb	r0, r0
     e1a:	4b7c      	ldr	r3, [pc, #496]	; (100c <adc_init+0x304>)
     e1c:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     e1e:	89ec      	ldrh	r4, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     e20:	a804      	add	r0, sp, #16
     e22:	4978      	ldr	r1, [pc, #480]	; (1004 <adc_init+0x2fc>)
     e24:	2250      	movs	r2, #80	; 0x50
     e26:	4b78      	ldr	r3, [pc, #480]	; (1008 <adc_init+0x300>)
     e28:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     e2a:	2c13      	cmp	r4, #19
     e2c:	d80c      	bhi.n	e48 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     e2e:	00a4      	lsls	r4, r4, #2
     e30:	ab04      	add	r3, sp, #16
     e32:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e34:	a903      	add	r1, sp, #12
     e36:	2300      	movs	r3, #0
     e38:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     e3a:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     e3c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     e3e:	2301      	movs	r3, #1
     e40:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     e42:	b2c0      	uxtb	r0, r0
     e44:	4b71      	ldr	r3, [pc, #452]	; (100c <adc_init+0x304>)
     e46:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     e48:	7d6b      	ldrb	r3, [r5, #21]
     e4a:	009b      	lsls	r3, r3, #2
     e4c:	b2db      	uxtb	r3, r3
     e4e:	9901      	ldr	r1, [sp, #4]
     e50:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     e52:	7dab      	ldrb	r3, [r5, #22]
     e54:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     e56:	786a      	ldrb	r2, [r5, #1]
     e58:	4313      	orrs	r3, r2
     e5a:	b2db      	uxtb	r3, r3
     e5c:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     e5e:	792b      	ldrb	r3, [r5, #4]
     e60:	2b34      	cmp	r3, #52	; 0x34
     e62:	d900      	bls.n	e66 <adc_init+0x15e>
     e64:	e13e      	b.n	10e4 <adc_init+0x3dc>
     e66:	009b      	lsls	r3, r3, #2
     e68:	4a69      	ldr	r2, [pc, #420]	; (1010 <adc_init+0x308>)
     e6a:	58d3      	ldr	r3, [r2, r3]
     e6c:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     e6e:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e70:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e72:	2301      	movs	r3, #1
     e74:	e01a      	b.n	eac <adc_init+0x1a4>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     e76:	7c6b      	ldrb	r3, [r5, #17]
		accumulate = config->accumulate_samples;
     e78:	7c2a      	ldrb	r2, [r5, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e7a:	2410      	movs	r4, #16
     e7c:	e016      	b.n	eac <adc_init+0x1a4>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     e7e:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e80:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     e82:	2301      	movs	r3, #1
     e84:	e012      	b.n	eac <adc_init+0x1a4>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     e86:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     e88:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     e8a:	2300      	movs	r3, #0
     e8c:	e00e      	b.n	eac <adc_init+0x1a4>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e8e:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     e90:	2430      	movs	r4, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e92:	2300      	movs	r3, #0
     e94:	e00a      	b.n	eac <adc_init+0x1a4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e96:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     e98:	2420      	movs	r4, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     e9a:	2300      	movs	r3, #0
     e9c:	e006      	b.n	eac <adc_init+0x1a4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     e9e:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     ea0:	2400      	movs	r4, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     ea2:	2300      	movs	r3, #0
     ea4:	e002      	b.n	eac <adc_init+0x1a4>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     ea6:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     ea8:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     eaa:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     eac:	011b      	lsls	r3, r3, #4
     eae:	2170      	movs	r1, #112	; 0x70
     eb0:	400b      	ands	r3, r1
     eb2:	4313      	orrs	r3, r2
     eb4:	9a01      	ldr	r2, [sp, #4]
     eb6:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     eb8:	7deb      	ldrb	r3, [r5, #23]
		return STATUS_ERR_INVALID_ARG;
     eba:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     ebc:	2b3f      	cmp	r3, #63	; 0x3f
     ebe:	d900      	bls.n	ec2 <adc_init+0x1ba>
     ec0:	e111      	b.n	10e6 <adc_init+0x3de>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     ec2:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ec4:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ec6:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     ec8:	b25b      	sxtb	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	dbfb      	blt.n	ec6 <adc_init+0x1be>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     ece:	7cea      	ldrb	r2, [r5, #19]
     ed0:	886b      	ldrh	r3, [r5, #2]
     ed2:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     ed4:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     ed6:	5caa      	ldrb	r2, [r5, r2]
     ed8:	00d2      	lsls	r2, r2, #3
     eda:	4313      	orrs	r3, r2
     edc:	7d2a      	ldrb	r2, [r5, #20]
     ede:	0092      	lsls	r2, r2, #2
     ee0:	4313      	orrs	r3, r2
     ee2:	7caa      	ldrb	r2, [r5, #18]
     ee4:	0052      	lsls	r2, r2, #1
     ee6:	4313      	orrs	r3, r2
     ee8:	4323      	orrs	r3, r4
     eea:	9801      	ldr	r0, [sp, #4]
     eec:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     eee:	7e2b      	ldrb	r3, [r5, #24]
     ef0:	2b00      	cmp	r3, #0
     ef2:	d101      	bne.n	ef8 <adc_init+0x1f0>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ef4:	6831      	ldr	r1, [r6, #0]
     ef6:	e095      	b.n	1024 <adc_init+0x31c>
		switch (resolution) {
     ef8:	2c10      	cmp	r4, #16
     efa:	d05b      	beq.n	fb4 <adc_init+0x2ac>
     efc:	d802      	bhi.n	f04 <adc_init+0x1fc>
     efe:	2c00      	cmp	r4, #0
     f00:	d038      	beq.n	f74 <adc_init+0x26c>
     f02:	e7f7      	b.n	ef4 <adc_init+0x1ec>
     f04:	2c20      	cmp	r4, #32
     f06:	d019      	beq.n	f3c <adc_init+0x234>
     f08:	2c30      	cmp	r4, #48	; 0x30
     f0a:	d1f3      	bne.n	ef4 <adc_init+0x1ec>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     f0c:	7cea      	ldrb	r2, [r5, #19]
     f0e:	2a00      	cmp	r2, #0
     f10:	d00a      	beq.n	f28 <adc_init+0x220>
					(config->window.window_lower_value > 127 ||
     f12:	69ea      	ldr	r2, [r5, #28]
     f14:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f16:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     f18:	2aff      	cmp	r2, #255	; 0xff
     f1a:	d900      	bls.n	f1e <adc_init+0x216>
     f1c:	e0e3      	b.n	10e6 <adc_init+0x3de>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     f1e:	6a2a      	ldr	r2, [r5, #32]
     f20:	3280      	adds	r2, #128	; 0x80
     f22:	2aff      	cmp	r2, #255	; 0xff
     f24:	d900      	bls.n	f28 <adc_init+0x220>
     f26:	e0de      	b.n	10e6 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f28:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     f2a:	69e9      	ldr	r1, [r5, #28]
     f2c:	29ff      	cmp	r1, #255	; 0xff
     f2e:	dd00      	ble.n	f32 <adc_init+0x22a>
     f30:	e0d9      	b.n	10e6 <adc_init+0x3de>
     f32:	6a2a      	ldr	r2, [r5, #32]
     f34:	2aff      	cmp	r2, #255	; 0xff
     f36:	dd00      	ble.n	f3a <adc_init+0x232>
     f38:	e0d5      	b.n	10e6 <adc_init+0x3de>
     f3a:	e7db      	b.n	ef4 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     f3c:	7cea      	ldrb	r2, [r5, #19]
     f3e:	2a00      	cmp	r2, #0
     f40:	d00d      	beq.n	f5e <adc_init+0x256>
					(config->window.window_lower_value > 511 ||
     f42:	69e8      	ldr	r0, [r5, #28]
     f44:	2280      	movs	r2, #128	; 0x80
     f46:	0092      	lsls	r2, r2, #2
     f48:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f4a:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     f4c:	4a31      	ldr	r2, [pc, #196]	; (1014 <adc_init+0x30c>)
     f4e:	4291      	cmp	r1, r2
     f50:	d900      	bls.n	f54 <adc_init+0x24c>
     f52:	e0c8      	b.n	10e6 <adc_init+0x3de>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     f54:	4a30      	ldr	r2, [pc, #192]	; (1018 <adc_init+0x310>)
     f56:	6a29      	ldr	r1, [r5, #32]
     f58:	4291      	cmp	r1, r2
     f5a:	db00      	blt.n	f5e <adc_init+0x256>
     f5c:	e0c3      	b.n	10e6 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f5e:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     f60:	4a2c      	ldr	r2, [pc, #176]	; (1014 <adc_init+0x30c>)
     f62:	69e9      	ldr	r1, [r5, #28]
     f64:	4291      	cmp	r1, r2
     f66:	dd00      	ble.n	f6a <adc_init+0x262>
     f68:	e0bd      	b.n	10e6 <adc_init+0x3de>
     f6a:	6a29      	ldr	r1, [r5, #32]
     f6c:	4291      	cmp	r1, r2
     f6e:	dd00      	ble.n	f72 <adc_init+0x26a>
     f70:	e0b9      	b.n	10e6 <adc_init+0x3de>
     f72:	e7bf      	b.n	ef4 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     f74:	7cea      	ldrb	r2, [r5, #19]
     f76:	2a00      	cmp	r2, #0
     f78:	d011      	beq.n	f9e <adc_init+0x296>
					(config->window.window_lower_value > 2047 ||
     f7a:	69ea      	ldr	r2, [r5, #28]
     f7c:	2080      	movs	r0, #128	; 0x80
     f7e:	0100      	lsls	r0, r0, #4
     f80:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f82:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     f84:	4a25      	ldr	r2, [pc, #148]	; (101c <adc_init+0x314>)
     f86:	4291      	cmp	r1, r2
     f88:	d900      	bls.n	f8c <adc_init+0x284>
     f8a:	e0ac      	b.n	10e6 <adc_init+0x3de>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     f8c:	6a2a      	ldr	r2, [r5, #32]
     f8e:	2080      	movs	r0, #128	; 0x80
     f90:	0100      	lsls	r0, r0, #4
     f92:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f94:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     f96:	4a21      	ldr	r2, [pc, #132]	; (101c <adc_init+0x314>)
     f98:	4291      	cmp	r1, r2
     f9a:	d900      	bls.n	f9e <adc_init+0x296>
     f9c:	e0a3      	b.n	10e6 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     f9e:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     fa0:	4a1e      	ldr	r2, [pc, #120]	; (101c <adc_init+0x314>)
     fa2:	69e9      	ldr	r1, [r5, #28]
     fa4:	4291      	cmp	r1, r2
     fa6:	dd00      	ble.n	faa <adc_init+0x2a2>
     fa8:	e09d      	b.n	10e6 <adc_init+0x3de>
     faa:	6a29      	ldr	r1, [r5, #32]
     fac:	4291      	cmp	r1, r2
     fae:	dd00      	ble.n	fb2 <adc_init+0x2aa>
     fb0:	e099      	b.n	10e6 <adc_init+0x3de>
     fb2:	e79f      	b.n	ef4 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     fb4:	7cea      	ldrb	r2, [r5, #19]
     fb6:	2a00      	cmp	r2, #0
     fb8:	d011      	beq.n	fde <adc_init+0x2d6>
					(config->window.window_lower_value > 32767 ||
     fba:	69ea      	ldr	r2, [r5, #28]
     fbc:	2080      	movs	r0, #128	; 0x80
     fbe:	0200      	lsls	r0, r0, #8
     fc0:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     fc2:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     fc4:	4a16      	ldr	r2, [pc, #88]	; (1020 <adc_init+0x318>)
     fc6:	4291      	cmp	r1, r2
     fc8:	d900      	bls.n	fcc <adc_init+0x2c4>
     fca:	e08c      	b.n	10e6 <adc_init+0x3de>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     fcc:	6a2a      	ldr	r2, [r5, #32]
     fce:	2080      	movs	r0, #128	; 0x80
     fd0:	0200      	lsls	r0, r0, #8
     fd2:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     fd4:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     fd6:	4a12      	ldr	r2, [pc, #72]	; (1020 <adc_init+0x318>)
     fd8:	4291      	cmp	r1, r2
     fda:	d900      	bls.n	fde <adc_init+0x2d6>
     fdc:	e083      	b.n	10e6 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     fde:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     fe0:	4a0f      	ldr	r2, [pc, #60]	; (1020 <adc_init+0x318>)
     fe2:	69e9      	ldr	r1, [r5, #28]
     fe4:	4291      	cmp	r1, r2
     fe6:	dd00      	ble.n	fea <adc_init+0x2e2>
     fe8:	e07d      	b.n	10e6 <adc_init+0x3de>
     fea:	6a29      	ldr	r1, [r5, #32]
     fec:	4291      	cmp	r1, r2
     fee:	dd00      	ble.n	ff2 <adc_init+0x2ea>
     ff0:	e079      	b.n	10e6 <adc_init+0x3de>
     ff2:	e77f      	b.n	ef4 <adc_init+0x1ec>
     ff4:	40000400 	.word	0x40000400
     ff8:	40000800 	.word	0x40000800
     ffc:	00001559 	.word	0x00001559
    1000:	000014cd 	.word	0x000014cd
    1004:	00004914 	.word	0x00004914
    1008:	000038f9 	.word	0x000038f9
    100c:	00001635 	.word	0x00001635
    1010:	00004840 	.word	0x00004840
    1014:	000003ff 	.word	0x000003ff
    1018:	fffffe01 	.word	0xfffffe01
    101c:	00000fff 	.word	0x00000fff
    1020:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1024:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    1026:	b252      	sxtb	r2, r2
    1028:	2a00      	cmp	r2, #0
    102a:	dbfb      	blt.n	1024 <adc_init+0x31c>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    102c:	9a01      	ldr	r2, [sp, #4]
    102e:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1030:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1032:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1034:	b25b      	sxtb	r3, r3
    1036:	2b00      	cmp	r3, #0
    1038:	dbfb      	blt.n	1032 <adc_init+0x32a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    103a:	8bab      	ldrh	r3, [r5, #28]
    103c:	9801      	ldr	r0, [sp, #4]
    103e:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1040:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1042:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    1044:	b25b      	sxtb	r3, r3
    1046:	2b00      	cmp	r3, #0
    1048:	dbfb      	blt.n	1042 <adc_init+0x33a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    104a:	8c2b      	ldrh	r3, [r5, #32]
    104c:	9901      	ldr	r1, [sp, #4]
    104e:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1050:	232c      	movs	r3, #44	; 0x2c
    1052:	5ceb      	ldrb	r3, [r5, r3]
	if (inputs_to_scan > 0) {
    1054:	2b00      	cmp	r3, #0
    1056:	d004      	beq.n	1062 <adc_init+0x35a>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    1058:	3b01      	subs	r3, #1
    105a:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    105c:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    105e:	2b0f      	cmp	r3, #15
    1060:	d841      	bhi.n	10e6 <adc_init+0x3de>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1062:	222b      	movs	r2, #43	; 0x2b
    1064:	5caa      	ldrb	r2, [r5, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    1066:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1068:	2a0f      	cmp	r2, #15
    106a:	d83c      	bhi.n	10e6 <adc_init+0x3de>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    106c:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    106e:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
    1070:	b240      	sxtb	r0, r0
    1072:	2800      	cmp	r0, #0
    1074:	dbfb      	blt.n	106e <adc_init+0x366>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1076:	89e8      	ldrh	r0, [r5, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1078:	7b29      	ldrb	r1, [r5, #12]
			config->gain_factor |
    107a:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    107c:	68a8      	ldr	r0, [r5, #8]
    107e:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
    1080:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1082:	430a      	orrs	r2, r1
    1084:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1086:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1088:	9901      	ldr	r1, [sp, #4]
    108a:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    108c:	232a      	movs	r3, #42	; 0x2a
    108e:	5ceb      	ldrb	r3, [r5, r3]
    1090:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    1092:	230f      	movs	r3, #15
    1094:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    1096:	2324      	movs	r3, #36	; 0x24
    1098:	5ceb      	ldrb	r3, [r5, r3]
    109a:	2b00      	cmp	r3, #0
    109c:	d010      	beq.n	10c0 <adc_init+0x3b8>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    109e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    10a0:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    10a2:	4a14      	ldr	r2, [pc, #80]	; (10f4 <adc_init+0x3ec>)
    10a4:	4293      	cmp	r3, r2
    10a6:	d81e      	bhi.n	10e6 <adc_init+0x3de>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    10a8:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    10aa:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    10ac:	2080      	movs	r0, #128	; 0x80
    10ae:	0100      	lsls	r0, r0, #4
    10b0:	1819      	adds	r1, r3, r0
    10b2:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    10b4:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    10b6:	4a0f      	ldr	r2, [pc, #60]	; (10f4 <adc_init+0x3ec>)
    10b8:	4291      	cmp	r1, r2
    10ba:	d814      	bhi.n	10e6 <adc_init+0x3de>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    10bc:	9901      	ldr	r1, [sp, #4]
    10be:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    10c0:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <adc_init+0x3f0>)
    10c2:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    10c4:	0152      	lsls	r2, r2, #5
    10c6:	23e0      	movs	r3, #224	; 0xe0
    10c8:	00db      	lsls	r3, r3, #3
    10ca:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    10cc:	4b0b      	ldr	r3, [pc, #44]	; (10fc <adc_init+0x3f4>)
    10ce:	6858      	ldr	r0, [r3, #4]
    10d0:	0141      	lsls	r1, r0, #5
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	0edb      	lsrs	r3, r3, #27
    10d6:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    10d8:	b2db      	uxtb	r3, r3
    10da:	4313      	orrs	r3, r2
    10dc:	9901      	ldr	r1, [sp, #4]
    10de:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    10e0:	2000      	movs	r0, #0
    10e2:	e000      	b.n	10e6 <adc_init+0x3de>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    10e4:	2017      	movs	r0, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    10e6:	b019      	add	sp, #100	; 0x64
    10e8:	bc3c      	pop	{r2, r3, r4, r5}
    10ea:	4690      	mov	r8, r2
    10ec:	4699      	mov	r9, r3
    10ee:	46a2      	mov	sl, r4
    10f0:	46ab      	mov	fp, r5
    10f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f4:	00000fff 	.word	0x00000fff
    10f8:	00806024 	.word	0x00806024
    10fc:	00806020 	.word	0x00806020

00001100 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1100:	b500      	push	{lr}
    1102:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1104:	ab01      	add	r3, sp, #4
    1106:	2280      	movs	r2, #128	; 0x80
    1108:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    110a:	780a      	ldrb	r2, [r1, #0]
    110c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    110e:	784a      	ldrb	r2, [r1, #1]
    1110:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1112:	788a      	ldrb	r2, [r1, #2]
    1114:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1116:	1c19      	adds	r1, r3, #0
    1118:	4b01      	ldr	r3, [pc, #4]	; (1120 <port_pin_set_config+0x20>)
    111a:	4798      	blx	r3
}
    111c:	b003      	add	sp, #12
    111e:	bd00      	pop	{pc}
    1120:	00001635 	.word	0x00001635

00001124 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1124:	b508      	push	{r3, lr}
	switch (clock_source) {
    1126:	2808      	cmp	r0, #8
    1128:	d834      	bhi.n	1194 <system_clock_source_get_hz+0x70>
    112a:	0080      	lsls	r0, r0, #2
    112c:	4b1b      	ldr	r3, [pc, #108]	; (119c <system_clock_source_get_hz+0x78>)
    112e:	581b      	ldr	r3, [r3, r0]
    1130:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1132:	2080      	movs	r0, #128	; 0x80
    1134:	0200      	lsls	r0, r0, #8
    1136:	e030      	b.n	119a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1138:	4b19      	ldr	r3, [pc, #100]	; (11a0 <system_clock_source_get_hz+0x7c>)
    113a:	6918      	ldr	r0, [r3, #16]
    113c:	e02d      	b.n	119a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    113e:	4b19      	ldr	r3, [pc, #100]	; (11a4 <system_clock_source_get_hz+0x80>)
    1140:	6a18      	ldr	r0, [r3, #32]
    1142:	0580      	lsls	r0, r0, #22
    1144:	0f80      	lsrs	r0, r0, #30
    1146:	4b18      	ldr	r3, [pc, #96]	; (11a8 <system_clock_source_get_hz+0x84>)
    1148:	40c3      	lsrs	r3, r0
    114a:	1c18      	adds	r0, r3, #0
    114c:	e025      	b.n	119a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    114e:	4b14      	ldr	r3, [pc, #80]	; (11a0 <system_clock_source_get_hz+0x7c>)
    1150:	6958      	ldr	r0, [r3, #20]
    1152:	e022      	b.n	119a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1154:	4b12      	ldr	r3, [pc, #72]	; (11a0 <system_clock_source_get_hz+0x7c>)
    1156:	681b      	ldr	r3, [r3, #0]
    1158:	2002      	movs	r0, #2
    115a:	4018      	ands	r0, r3
    115c:	d01d      	beq.n	119a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    115e:	4911      	ldr	r1, [pc, #68]	; (11a4 <system_clock_source_get_hz+0x80>)
    1160:	2210      	movs	r2, #16
    1162:	68cb      	ldr	r3, [r1, #12]
    1164:	421a      	tst	r2, r3
    1166:	d0fc      	beq.n	1162 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1168:	4b0d      	ldr	r3, [pc, #52]	; (11a0 <system_clock_source_get_hz+0x7c>)
    116a:	681b      	ldr	r3, [r3, #0]
    116c:	075a      	lsls	r2, r3, #29
    116e:	d513      	bpl.n	1198 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1170:	2000      	movs	r0, #0
    1172:	4b0e      	ldr	r3, [pc, #56]	; (11ac <system_clock_source_get_hz+0x88>)
    1174:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1176:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <system_clock_source_get_hz+0x7c>)
    1178:	689b      	ldr	r3, [r3, #8]
    117a:	041b      	lsls	r3, r3, #16
    117c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    117e:	4358      	muls	r0, r3
    1180:	e00b      	b.n	119a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1182:	2350      	movs	r3, #80	; 0x50
    1184:	4a07      	ldr	r2, [pc, #28]	; (11a4 <system_clock_source_get_hz+0x80>)
    1186:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1188:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    118a:	075a      	lsls	r2, r3, #29
    118c:	d505      	bpl.n	119a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    118e:	4b04      	ldr	r3, [pc, #16]	; (11a0 <system_clock_source_get_hz+0x7c>)
    1190:	68d8      	ldr	r0, [r3, #12]
    1192:	e002      	b.n	119a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1194:	2000      	movs	r0, #0
    1196:	e000      	b.n	119a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1198:	4805      	ldr	r0, [pc, #20]	; (11b0 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    119a:	bd08      	pop	{r3, pc}
    119c:	00004964 	.word	0x00004964
    11a0:	200000b4 	.word	0x200000b4
    11a4:	40000800 	.word	0x40000800
    11a8:	007a1200 	.word	0x007a1200
    11ac:	00001575 	.word	0x00001575
    11b0:	02dc6c00 	.word	0x02dc6c00

000011b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    11b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    11b6:	4b0c      	ldr	r3, [pc, #48]	; (11e8 <system_clock_source_osc8m_set_config+0x34>)
    11b8:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    11ba:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    11bc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    11be:	7840      	ldrb	r0, [r0, #1]
    11c0:	2201      	movs	r2, #1
    11c2:	4010      	ands	r0, r2
    11c4:	0180      	lsls	r0, r0, #6
    11c6:	2640      	movs	r6, #64	; 0x40
    11c8:	43b4      	bics	r4, r6
    11ca:	4304      	orrs	r4, r0
    11cc:	402a      	ands	r2, r5
    11ce:	01d0      	lsls	r0, r2, #7
    11d0:	2280      	movs	r2, #128	; 0x80
    11d2:	4394      	bics	r4, r2
    11d4:	1c22      	adds	r2, r4, #0
    11d6:	4302      	orrs	r2, r0
    11d8:	2003      	movs	r0, #3
    11da:	4001      	ands	r1, r0
    11dc:	0209      	lsls	r1, r1, #8
    11de:	4803      	ldr	r0, [pc, #12]	; (11ec <system_clock_source_osc8m_set_config+0x38>)
    11e0:	4002      	ands	r2, r0
    11e2:	430a      	orrs	r2, r1
    11e4:	621a      	str	r2, [r3, #32]
}
    11e6:	bd70      	pop	{r4, r5, r6, pc}
    11e8:	40000800 	.word	0x40000800
    11ec:	fffffcff 	.word	0xfffffcff

000011f0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    11f0:	2808      	cmp	r0, #8
    11f2:	d843      	bhi.n	127c <system_clock_source_enable+0x8c>
    11f4:	0080      	lsls	r0, r0, #2
    11f6:	4b22      	ldr	r3, [pc, #136]	; (1280 <system_clock_source_enable+0x90>)
    11f8:	581b      	ldr	r3, [r3, r0]
    11fa:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    11fc:	2000      	movs	r0, #0
    11fe:	e03e      	b.n	127e <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1200:	4b20      	ldr	r3, [pc, #128]	; (1284 <system_clock_source_enable+0x94>)
    1202:	6a19      	ldr	r1, [r3, #32]
    1204:	2202      	movs	r2, #2
    1206:	430a      	orrs	r2, r1
    1208:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    120a:	2000      	movs	r0, #0
    120c:	e037      	b.n	127e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    120e:	4b1d      	ldr	r3, [pc, #116]	; (1284 <system_clock_source_enable+0x94>)
    1210:	6999      	ldr	r1, [r3, #24]
    1212:	2202      	movs	r2, #2
    1214:	430a      	orrs	r2, r1
    1216:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1218:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    121a:	e030      	b.n	127e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    121c:	4b19      	ldr	r3, [pc, #100]	; (1284 <system_clock_source_enable+0x94>)
    121e:	8a19      	ldrh	r1, [r3, #16]
    1220:	2202      	movs	r2, #2
    1222:	430a      	orrs	r2, r1
    1224:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1226:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1228:	e029      	b.n	127e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    122a:	4b16      	ldr	r3, [pc, #88]	; (1284 <system_clock_source_enable+0x94>)
    122c:	8a99      	ldrh	r1, [r3, #20]
    122e:	2202      	movs	r2, #2
    1230:	430a      	orrs	r2, r1
    1232:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1234:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1236:	e022      	b.n	127e <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1238:	4b13      	ldr	r3, [pc, #76]	; (1288 <system_clock_source_enable+0x98>)
    123a:	6819      	ldr	r1, [r3, #0]
    123c:	2202      	movs	r2, #2
    123e:	430a      	orrs	r2, r1
    1240:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1242:	681a      	ldr	r2, [r3, #0]
    1244:	4b11      	ldr	r3, [pc, #68]	; (128c <system_clock_source_enable+0x9c>)
    1246:	401a      	ands	r2, r3
    1248:	4b0e      	ldr	r3, [pc, #56]	; (1284 <system_clock_source_enable+0x94>)
    124a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    124c:	1c19      	adds	r1, r3, #0
    124e:	2210      	movs	r2, #16
    1250:	68cb      	ldr	r3, [r1, #12]
    1252:	421a      	tst	r2, r3
    1254:	d0fc      	beq.n	1250 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1256:	4a0c      	ldr	r2, [pc, #48]	; (1288 <system_clock_source_enable+0x98>)
    1258:	6891      	ldr	r1, [r2, #8]
    125a:	4b0a      	ldr	r3, [pc, #40]	; (1284 <system_clock_source_enable+0x94>)
    125c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    125e:	6851      	ldr	r1, [r2, #4]
    1260:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1262:	6812      	ldr	r2, [r2, #0]
    1264:	b292      	uxth	r2, r2
    1266:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1268:	2000      	movs	r0, #0
    126a:	e008      	b.n	127e <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    126c:	4a05      	ldr	r2, [pc, #20]	; (1284 <system_clock_source_enable+0x94>)
    126e:	2344      	movs	r3, #68	; 0x44
    1270:	5cd0      	ldrb	r0, [r2, r3]
    1272:	2102      	movs	r1, #2
    1274:	4301      	orrs	r1, r0
    1276:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1278:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    127a:	e000      	b.n	127e <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    127c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    127e:	4770      	bx	lr
    1280:	00004988 	.word	0x00004988
    1284:	40000800 	.word	0x40000800
    1288:	200000b4 	.word	0x200000b4
    128c:	0000ff7f 	.word	0x0000ff7f

00001290 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1290:	b530      	push	{r4, r5, lr}
    1292:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1294:	22c2      	movs	r2, #194	; 0xc2
    1296:	00d2      	lsls	r2, r2, #3
    1298:	4b19      	ldr	r3, [pc, #100]	; (1300 <system_clock_init+0x70>)
    129a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    129c:	4b19      	ldr	r3, [pc, #100]	; (1304 <system_clock_init+0x74>)
    129e:	685a      	ldr	r2, [r3, #4]
    12a0:	211e      	movs	r1, #30
    12a2:	438a      	bics	r2, r1
    12a4:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    12a6:	2301      	movs	r3, #1
    12a8:	466a      	mov	r2, sp
    12aa:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12ac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    12ae:	4d16      	ldr	r5, [pc, #88]	; (1308 <system_clock_init+0x78>)
    12b0:	b2e0      	uxtb	r0, r4
    12b2:	4669      	mov	r1, sp
    12b4:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12b6:	3401      	adds	r4, #1
    12b8:	2c25      	cmp	r4, #37	; 0x25
    12ba:	d1f9      	bne.n	12b0 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    12bc:	a803      	add	r0, sp, #12
    12be:	2400      	movs	r4, #0
    12c0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    12c2:	2501      	movs	r5, #1
    12c4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    12c6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    12c8:	4b10      	ldr	r3, [pc, #64]	; (130c <system_clock_init+0x7c>)
    12ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    12cc:	2006      	movs	r0, #6
    12ce:	4b10      	ldr	r3, [pc, #64]	; (1310 <system_clock_init+0x80>)
    12d0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    12d2:	4b10      	ldr	r3, [pc, #64]	; (1314 <system_clock_init+0x84>)
    12d4:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    12d6:	4b10      	ldr	r3, [pc, #64]	; (1318 <system_clock_init+0x88>)
    12d8:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    12da:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    12dc:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    12de:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    12e0:	466b      	mov	r3, sp
    12e2:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    12e4:	2306      	movs	r3, #6
    12e6:	466a      	mov	r2, sp
    12e8:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    12ea:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    12ec:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    12ee:	2000      	movs	r0, #0
    12f0:	4669      	mov	r1, sp
    12f2:	4b0a      	ldr	r3, [pc, #40]	; (131c <system_clock_init+0x8c>)
    12f4:	4798      	blx	r3
    12f6:	2000      	movs	r0, #0
    12f8:	4b09      	ldr	r3, [pc, #36]	; (1320 <system_clock_init+0x90>)
    12fa:	4798      	blx	r3
#endif
}
    12fc:	b005      	add	sp, #20
    12fe:	bd30      	pop	{r4, r5, pc}
    1300:	40000800 	.word	0x40000800
    1304:	41004000 	.word	0x41004000
    1308:	00001559 	.word	0x00001559
    130c:	000011b5 	.word	0x000011b5
    1310:	000011f1 	.word	0x000011f1
    1314:	00001325 	.word	0x00001325
    1318:	40000400 	.word	0x40000400
    131c:	00001349 	.word	0x00001349
    1320:	000013fd 	.word	0x000013fd

00001324 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1324:	4b06      	ldr	r3, [pc, #24]	; (1340 <system_gclk_init+0x1c>)
    1326:	6999      	ldr	r1, [r3, #24]
    1328:	2208      	movs	r2, #8
    132a:	430a      	orrs	r2, r1
    132c:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    132e:	2201      	movs	r2, #1
    1330:	4b04      	ldr	r3, [pc, #16]	; (1344 <system_gclk_init+0x20>)
    1332:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1334:	1c19      	adds	r1, r3, #0
    1336:	780b      	ldrb	r3, [r1, #0]
    1338:	4213      	tst	r3, r2
    133a:	d1fc      	bne.n	1336 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    133c:	4770      	bx	lr
    133e:	46c0      	nop			; (mov r8, r8)
    1340:	40000400 	.word	0x40000400
    1344:	40000c00 	.word	0x40000c00

00001348 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    134a:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    134c:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    134e:	780d      	ldrb	r5, [r1, #0]
    1350:	022d      	lsls	r5, r5, #8
    1352:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1354:	784b      	ldrb	r3, [r1, #1]
    1356:	2b00      	cmp	r3, #0
    1358:	d002      	beq.n	1360 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    135a:	2380      	movs	r3, #128	; 0x80
    135c:	02db      	lsls	r3, r3, #11
    135e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1360:	7a4b      	ldrb	r3, [r1, #9]
    1362:	2b00      	cmp	r3, #0
    1364:	d002      	beq.n	136c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1366:	2380      	movs	r3, #128	; 0x80
    1368:	031b      	lsls	r3, r3, #12
    136a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    136c:	684c      	ldr	r4, [r1, #4]
    136e:	2c01      	cmp	r4, #1
    1370:	d917      	bls.n	13a2 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1372:	1e63      	subs	r3, r4, #1
    1374:	421c      	tst	r4, r3
    1376:	d10f      	bne.n	1398 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1378:	2c02      	cmp	r4, #2
    137a:	d906      	bls.n	138a <system_gclk_gen_set_config+0x42>
    137c:	2302      	movs	r3, #2
    137e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1380:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1382:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1384:	429c      	cmp	r4, r3
    1386:	d8fb      	bhi.n	1380 <system_gclk_gen_set_config+0x38>
    1388:	e000      	b.n	138c <system_gclk_gen_set_config+0x44>
    138a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    138c:	0217      	lsls	r7, r2, #8
    138e:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1390:	2380      	movs	r3, #128	; 0x80
    1392:	035b      	lsls	r3, r3, #13
    1394:	431d      	orrs	r5, r3
    1396:	e004      	b.n	13a2 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1398:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    139a:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    139c:	2380      	movs	r3, #128	; 0x80
    139e:	029b      	lsls	r3, r3, #10
    13a0:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    13a2:	7a0b      	ldrb	r3, [r1, #8]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d002      	beq.n	13ae <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    13a8:	2380      	movs	r3, #128	; 0x80
    13aa:	039b      	lsls	r3, r3, #14
    13ac:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13ae:	4a0f      	ldr	r2, [pc, #60]	; (13ec <system_gclk_gen_set_config+0xa4>)
    13b0:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    13b2:	b25b      	sxtb	r3, r3
    13b4:	2b00      	cmp	r3, #0
    13b6:	dbfb      	blt.n	13b0 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13b8:	4b0d      	ldr	r3, [pc, #52]	; (13f0 <system_gclk_gen_set_config+0xa8>)
    13ba:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13bc:	4b0d      	ldr	r3, [pc, #52]	; (13f4 <system_gclk_gen_set_config+0xac>)
    13be:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13c0:	4a0a      	ldr	r2, [pc, #40]	; (13ec <system_gclk_gen_set_config+0xa4>)
    13c2:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    13c4:	b25b      	sxtb	r3, r3
    13c6:	2b00      	cmp	r3, #0
    13c8:	dbfb      	blt.n	13c2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    13ca:	4b08      	ldr	r3, [pc, #32]	; (13ec <system_gclk_gen_set_config+0xa4>)
    13cc:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13ce:	1c1a      	adds	r2, r3, #0
    13d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    13d2:	b25b      	sxtb	r3, r3
    13d4:	2b00      	cmp	r3, #0
    13d6:	dbfb      	blt.n	13d0 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    13d8:	4b04      	ldr	r3, [pc, #16]	; (13ec <system_gclk_gen_set_config+0xa4>)
    13da:	6859      	ldr	r1, [r3, #4]
    13dc:	2280      	movs	r2, #128	; 0x80
    13de:	0252      	lsls	r2, r2, #9
    13e0:	400a      	ands	r2, r1
    13e2:	4315      	orrs	r5, r2
    13e4:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    13e6:	4b04      	ldr	r3, [pc, #16]	; (13f8 <system_gclk_gen_set_config+0xb0>)
    13e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13ec:	40000c00 	.word	0x40000c00
    13f0:	00000c19 	.word	0x00000c19
    13f4:	40000c08 	.word	0x40000c08
    13f8:	00000c59 	.word	0x00000c59

000013fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    13fc:	b510      	push	{r4, lr}
    13fe:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1400:	4a0b      	ldr	r2, [pc, #44]	; (1430 <system_gclk_gen_enable+0x34>)
    1402:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1404:	b25b      	sxtb	r3, r3
    1406:	2b00      	cmp	r3, #0
    1408:	dbfb      	blt.n	1402 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    140a:	4b0a      	ldr	r3, [pc, #40]	; (1434 <system_gclk_gen_enable+0x38>)
    140c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    140e:	4b0a      	ldr	r3, [pc, #40]	; (1438 <system_gclk_gen_enable+0x3c>)
    1410:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1412:	4a07      	ldr	r2, [pc, #28]	; (1430 <system_gclk_gen_enable+0x34>)
    1414:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1416:	b25b      	sxtb	r3, r3
    1418:	2b00      	cmp	r3, #0
    141a:	dbfb      	blt.n	1414 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    141c:	4b04      	ldr	r3, [pc, #16]	; (1430 <system_gclk_gen_enable+0x34>)
    141e:	6859      	ldr	r1, [r3, #4]
    1420:	2280      	movs	r2, #128	; 0x80
    1422:	0252      	lsls	r2, r2, #9
    1424:	430a      	orrs	r2, r1
    1426:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1428:	4b04      	ldr	r3, [pc, #16]	; (143c <system_gclk_gen_enable+0x40>)
    142a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    142c:	bd10      	pop	{r4, pc}
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	40000c00 	.word	0x40000c00
    1434:	00000c19 	.word	0x00000c19
    1438:	40000c04 	.word	0x40000c04
    143c:	00000c59 	.word	0x00000c59

00001440 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1440:	b570      	push	{r4, r5, r6, lr}
    1442:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1444:	4a1a      	ldr	r2, [pc, #104]	; (14b0 <system_gclk_gen_get_hz+0x70>)
    1446:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1448:	b25b      	sxtb	r3, r3
    144a:	2b00      	cmp	r3, #0
    144c:	dbfb      	blt.n	1446 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    144e:	4b19      	ldr	r3, [pc, #100]	; (14b4 <system_gclk_gen_get_hz+0x74>)
    1450:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1452:	4b19      	ldr	r3, [pc, #100]	; (14b8 <system_gclk_gen_get_hz+0x78>)
    1454:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1456:	4a16      	ldr	r2, [pc, #88]	; (14b0 <system_gclk_gen_get_hz+0x70>)
    1458:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    145a:	b25b      	sxtb	r3, r3
    145c:	2b00      	cmp	r3, #0
    145e:	dbfb      	blt.n	1458 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1460:	4e13      	ldr	r6, [pc, #76]	; (14b0 <system_gclk_gen_get_hz+0x70>)
    1462:	6870      	ldr	r0, [r6, #4]
    1464:	04c0      	lsls	r0, r0, #19
    1466:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1468:	4b14      	ldr	r3, [pc, #80]	; (14bc <system_gclk_gen_get_hz+0x7c>)
    146a:	4798      	blx	r3
    146c:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    146e:	4b12      	ldr	r3, [pc, #72]	; (14b8 <system_gclk_gen_get_hz+0x78>)
    1470:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1472:	6876      	ldr	r6, [r6, #4]
    1474:	02f6      	lsls	r6, r6, #11
    1476:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1478:	4b11      	ldr	r3, [pc, #68]	; (14c0 <system_gclk_gen_get_hz+0x80>)
    147a:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    147c:	4a0c      	ldr	r2, [pc, #48]	; (14b0 <system_gclk_gen_get_hz+0x70>)
    147e:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1480:	b25b      	sxtb	r3, r3
    1482:	2b00      	cmp	r3, #0
    1484:	dbfb      	blt.n	147e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1486:	4b0a      	ldr	r3, [pc, #40]	; (14b0 <system_gclk_gen_get_hz+0x70>)
    1488:	689c      	ldr	r4, [r3, #8]
    148a:	0a24      	lsrs	r4, r4, #8
    148c:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    148e:	4b0d      	ldr	r3, [pc, #52]	; (14c4 <system_gclk_gen_get_hz+0x84>)
    1490:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1492:	2e00      	cmp	r6, #0
    1494:	d107      	bne.n	14a6 <system_gclk_gen_get_hz+0x66>
    1496:	2c01      	cmp	r4, #1
    1498:	d907      	bls.n	14aa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    149a:	1c28      	adds	r0, r5, #0
    149c:	1c21      	adds	r1, r4, #0
    149e:	4b0a      	ldr	r3, [pc, #40]	; (14c8 <system_gclk_gen_get_hz+0x88>)
    14a0:	4798      	blx	r3
    14a2:	1c05      	adds	r5, r0, #0
    14a4:	e001      	b.n	14aa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    14a6:	3401      	adds	r4, #1
    14a8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    14aa:	1c28      	adds	r0, r5, #0
    14ac:	bd70      	pop	{r4, r5, r6, pc}
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	40000c00 	.word	0x40000c00
    14b4:	00000c19 	.word	0x00000c19
    14b8:	40000c04 	.word	0x40000c04
    14bc:	00001125 	.word	0x00001125
    14c0:	40000c08 	.word	0x40000c08
    14c4:	00000c59 	.word	0x00000c59
    14c8:	00001a81 	.word	0x00001a81

000014cc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    14cc:	b510      	push	{r4, lr}
    14ce:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    14d0:	4b06      	ldr	r3, [pc, #24]	; (14ec <system_gclk_chan_enable+0x20>)
    14d2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14d4:	4b06      	ldr	r3, [pc, #24]	; (14f0 <system_gclk_chan_enable+0x24>)
    14d6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    14d8:	4b06      	ldr	r3, [pc, #24]	; (14f4 <system_gclk_chan_enable+0x28>)
    14da:	8859      	ldrh	r1, [r3, #2]
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	01d2      	lsls	r2, r2, #7
    14e0:	430a      	orrs	r2, r1
    14e2:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    14e4:	4b04      	ldr	r3, [pc, #16]	; (14f8 <system_gclk_chan_enable+0x2c>)
    14e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14e8:	bd10      	pop	{r4, pc}
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	00000c19 	.word	0x00000c19
    14f0:	40000c02 	.word	0x40000c02
    14f4:	40000c00 	.word	0x40000c00
    14f8:	00000c59 	.word	0x00000c59

000014fc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    14fc:	b510      	push	{r4, lr}
    14fe:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1500:	4b0f      	ldr	r3, [pc, #60]	; (1540 <system_gclk_chan_disable+0x44>)
    1502:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1504:	4b0f      	ldr	r3, [pc, #60]	; (1544 <system_gclk_chan_disable+0x48>)
    1506:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1508:	4b0f      	ldr	r3, [pc, #60]	; (1548 <system_gclk_chan_disable+0x4c>)
    150a:	8858      	ldrh	r0, [r3, #2]
    150c:	0500      	lsls	r0, r0, #20
    150e:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1510:	8859      	ldrh	r1, [r3, #2]
    1512:	4a0e      	ldr	r2, [pc, #56]	; (154c <system_gclk_chan_disable+0x50>)
    1514:	400a      	ands	r2, r1
    1516:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1518:	8859      	ldrh	r1, [r3, #2]
    151a:	4a0d      	ldr	r2, [pc, #52]	; (1550 <system_gclk_chan_disable+0x54>)
    151c:	400a      	ands	r2, r1
    151e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1520:	1c19      	adds	r1, r3, #0
    1522:	2280      	movs	r2, #128	; 0x80
    1524:	01d2      	lsls	r2, r2, #7
    1526:	884b      	ldrh	r3, [r1, #2]
    1528:	4213      	tst	r3, r2
    152a:	d1fc      	bne.n	1526 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    152c:	4b06      	ldr	r3, [pc, #24]	; (1548 <system_gclk_chan_disable+0x4c>)
    152e:	0201      	lsls	r1, r0, #8
    1530:	8858      	ldrh	r0, [r3, #2]
    1532:	4a06      	ldr	r2, [pc, #24]	; (154c <system_gclk_chan_disable+0x50>)
    1534:	4002      	ands	r2, r0
    1536:	430a      	orrs	r2, r1
    1538:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    153a:	4b06      	ldr	r3, [pc, #24]	; (1554 <system_gclk_chan_disable+0x58>)
    153c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    153e:	bd10      	pop	{r4, pc}
    1540:	00000c19 	.word	0x00000c19
    1544:	40000c02 	.word	0x40000c02
    1548:	40000c00 	.word	0x40000c00
    154c:	fffff0ff 	.word	0xfffff0ff
    1550:	ffffbfff 	.word	0xffffbfff
    1554:	00000c59 	.word	0x00000c59

00001558 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1558:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    155a:	780c      	ldrb	r4, [r1, #0]
    155c:	0224      	lsls	r4, r4, #8
    155e:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1560:	4b02      	ldr	r3, [pc, #8]	; (156c <system_gclk_chan_set_config+0x14>)
    1562:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1564:	b2a4      	uxth	r4, r4
    1566:	4b02      	ldr	r3, [pc, #8]	; (1570 <system_gclk_chan_set_config+0x18>)
    1568:	805c      	strh	r4, [r3, #2]
}
    156a:	bd10      	pop	{r4, pc}
    156c:	000014fd 	.word	0x000014fd
    1570:	40000c00 	.word	0x40000c00

00001574 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1574:	b510      	push	{r4, lr}
    1576:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1578:	4b06      	ldr	r3, [pc, #24]	; (1594 <system_gclk_chan_get_hz+0x20>)
    157a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    157c:	4b06      	ldr	r3, [pc, #24]	; (1598 <system_gclk_chan_get_hz+0x24>)
    157e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1580:	4b06      	ldr	r3, [pc, #24]	; (159c <system_gclk_chan_get_hz+0x28>)
    1582:	885c      	ldrh	r4, [r3, #2]
    1584:	0524      	lsls	r4, r4, #20
    1586:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1588:	4b05      	ldr	r3, [pc, #20]	; (15a0 <system_gclk_chan_get_hz+0x2c>)
    158a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    158c:	1c20      	adds	r0, r4, #0
    158e:	4b05      	ldr	r3, [pc, #20]	; (15a4 <system_gclk_chan_get_hz+0x30>)
    1590:	4798      	blx	r3
}
    1592:	bd10      	pop	{r4, pc}
    1594:	00000c19 	.word	0x00000c19
    1598:	40000c02 	.word	0x40000c02
    159c:	40000c00 	.word	0x40000c00
    15a0:	00000c59 	.word	0x00000c59
    15a4:	00001441 	.word	0x00001441

000015a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    15a8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    15aa:	78d3      	ldrb	r3, [r2, #3]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d11e      	bne.n	15ee <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    15b0:	7813      	ldrb	r3, [r2, #0]
    15b2:	2b80      	cmp	r3, #128	; 0x80
    15b4:	d004      	beq.n	15c0 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    15b6:	061b      	lsls	r3, r3, #24
    15b8:	2480      	movs	r4, #128	; 0x80
    15ba:	0264      	lsls	r4, r4, #9
    15bc:	4323      	orrs	r3, r4
    15be:	e000      	b.n	15c2 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    15c0:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    15c2:	7854      	ldrb	r4, [r2, #1]
    15c4:	2502      	movs	r5, #2
    15c6:	43ac      	bics	r4, r5
    15c8:	d10a      	bne.n	15e0 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    15ca:	7894      	ldrb	r4, [r2, #2]
    15cc:	2c00      	cmp	r4, #0
    15ce:	d103      	bne.n	15d8 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    15d0:	2480      	movs	r4, #128	; 0x80
    15d2:	02a4      	lsls	r4, r4, #10
    15d4:	4323      	orrs	r3, r4
    15d6:	e002      	b.n	15de <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    15d8:	24c0      	movs	r4, #192	; 0xc0
    15da:	02e4      	lsls	r4, r4, #11
    15dc:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    15de:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15e0:	7854      	ldrb	r4, [r2, #1]
    15e2:	3c01      	subs	r4, #1
    15e4:	2c01      	cmp	r4, #1
    15e6:	d804      	bhi.n	15f2 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    15e8:	4c11      	ldr	r4, [pc, #68]	; (1630 <_system_pinmux_config+0x88>)
    15ea:	4023      	ands	r3, r4
    15ec:	e001      	b.n	15f2 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    15ee:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    15f0:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15f2:	040d      	lsls	r5, r1, #16
    15f4:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15f6:	24a0      	movs	r4, #160	; 0xa0
    15f8:	05e4      	lsls	r4, r4, #23
    15fa:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15fc:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15fe:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1600:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1602:	24d0      	movs	r4, #208	; 0xd0
    1604:	0624      	lsls	r4, r4, #24
    1606:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1608:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    160a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    160c:	78d4      	ldrb	r4, [r2, #3]
    160e:	2c00      	cmp	r4, #0
    1610:	d10c      	bne.n	162c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1612:	035c      	lsls	r4, r3, #13
    1614:	d505      	bpl.n	1622 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1616:	7893      	ldrb	r3, [r2, #2]
    1618:	2b01      	cmp	r3, #1
    161a:	d101      	bne.n	1620 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    161c:	6181      	str	r1, [r0, #24]
    161e:	e000      	b.n	1622 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1620:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1622:	7853      	ldrb	r3, [r2, #1]
    1624:	3b01      	subs	r3, #1
    1626:	2b01      	cmp	r3, #1
    1628:	d800      	bhi.n	162c <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    162a:	6081      	str	r1, [r0, #8]
		}
	}
}
    162c:	bd30      	pop	{r4, r5, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	fffbffff 	.word	0xfffbffff

00001634 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1634:	b508      	push	{r3, lr}
    1636:	1c03      	adds	r3, r0, #0
    1638:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    163a:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    163c:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    163e:	2900      	cmp	r1, #0
    1640:	d103      	bne.n	164a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1642:	0958      	lsrs	r0, r3, #5
    1644:	01c0      	lsls	r0, r0, #7
    1646:	4904      	ldr	r1, [pc, #16]	; (1658 <system_pinmux_pin_set_config+0x24>)
    1648:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    164a:	211f      	movs	r1, #31
    164c:	400b      	ands	r3, r1
    164e:	2101      	movs	r1, #1
    1650:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1652:	4b02      	ldr	r3, [pc, #8]	; (165c <system_pinmux_pin_set_config+0x28>)
    1654:	4798      	blx	r3
}
    1656:	bd08      	pop	{r3, pc}
    1658:	41004400 	.word	0x41004400
    165c:	000015a9 	.word	0x000015a9

00001660 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1660:	4770      	bx	lr
    1662:	46c0      	nop			; (mov r8, r8)

00001664 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1664:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <system_init+0x14>)
    1668:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    166a:	4b04      	ldr	r3, [pc, #16]	; (167c <system_init+0x18>)
    166c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    166e:	4b04      	ldr	r3, [pc, #16]	; (1680 <system_init+0x1c>)
    1670:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1672:	4b04      	ldr	r3, [pc, #16]	; (1684 <system_init+0x20>)
    1674:	4798      	blx	r3
}
    1676:	bd08      	pop	{r3, pc}
    1678:	00001291 	.word	0x00001291
    167c:	00000c89 	.word	0x00000c89
    1680:	00001661 	.word	0x00001661
    1684:	00001661 	.word	0x00001661

00001688 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1688:	e7fe      	b.n	1688 <Dummy_Handler>
    168a:	46c0      	nop			; (mov r8, r8)

0000168c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    168c:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    168e:	4b1c      	ldr	r3, [pc, #112]	; (1700 <Reset_Handler+0x74>)
    1690:	4a1c      	ldr	r2, [pc, #112]	; (1704 <Reset_Handler+0x78>)
    1692:	429a      	cmp	r2, r3
    1694:	d003      	beq.n	169e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1696:	4b1c      	ldr	r3, [pc, #112]	; (1708 <Reset_Handler+0x7c>)
    1698:	4a19      	ldr	r2, [pc, #100]	; (1700 <Reset_Handler+0x74>)
    169a:	429a      	cmp	r2, r3
    169c:	d304      	bcc.n	16a8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    169e:	4b1b      	ldr	r3, [pc, #108]	; (170c <Reset_Handler+0x80>)
    16a0:	4a1b      	ldr	r2, [pc, #108]	; (1710 <Reset_Handler+0x84>)
    16a2:	429a      	cmp	r2, r3
    16a4:	d310      	bcc.n	16c8 <Reset_Handler+0x3c>
    16a6:	e01b      	b.n	16e0 <Reset_Handler+0x54>
    16a8:	4b1a      	ldr	r3, [pc, #104]	; (1714 <Reset_Handler+0x88>)
    16aa:	4817      	ldr	r0, [pc, #92]	; (1708 <Reset_Handler+0x7c>)
    16ac:	3003      	adds	r0, #3
    16ae:	1ac0      	subs	r0, r0, r3
    16b0:	0880      	lsrs	r0, r0, #2
    16b2:	3001      	adds	r0, #1
    16b4:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    16b6:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    16b8:	4911      	ldr	r1, [pc, #68]	; (1700 <Reset_Handler+0x74>)
    16ba:	4a12      	ldr	r2, [pc, #72]	; (1704 <Reset_Handler+0x78>)
    16bc:	58d4      	ldr	r4, [r2, r3]
    16be:	50cc      	str	r4, [r1, r3]
    16c0:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    16c2:	4283      	cmp	r3, r0
    16c4:	d1fa      	bne.n	16bc <Reset_Handler+0x30>
    16c6:	e7ea      	b.n	169e <Reset_Handler+0x12>
    16c8:	4b11      	ldr	r3, [pc, #68]	; (1710 <Reset_Handler+0x84>)
    16ca:	1d1a      	adds	r2, r3, #4
    16cc:	490f      	ldr	r1, [pc, #60]	; (170c <Reset_Handler+0x80>)
    16ce:	3103      	adds	r1, #3
    16d0:	1a89      	subs	r1, r1, r2
    16d2:	0889      	lsrs	r1, r1, #2
    16d4:	0089      	lsls	r1, r1, #2
    16d6:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    16d8:	2100      	movs	r1, #0
    16da:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    16dc:	4293      	cmp	r3, r2
    16de:	d1fc      	bne.n	16da <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16e0:	4b0d      	ldr	r3, [pc, #52]	; (1718 <Reset_Handler+0x8c>)
    16e2:	217f      	movs	r1, #127	; 0x7f
    16e4:	4a0d      	ldr	r2, [pc, #52]	; (171c <Reset_Handler+0x90>)
    16e6:	438a      	bics	r2, r1
    16e8:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    16ea:	4b0d      	ldr	r3, [pc, #52]	; (1720 <Reset_Handler+0x94>)
    16ec:	6859      	ldr	r1, [r3, #4]
    16ee:	2280      	movs	r2, #128	; 0x80
    16f0:	430a      	orrs	r2, r1
    16f2:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    16f4:	4b0b      	ldr	r3, [pc, #44]	; (1724 <Reset_Handler+0x98>)
    16f6:	4798      	blx	r3

        /* Branch to main function */
        main();
    16f8:	4b0b      	ldr	r3, [pc, #44]	; (1728 <Reset_Handler+0x9c>)
    16fa:	4798      	blx	r3
    16fc:	e7fe      	b.n	16fc <Reset_Handler+0x70>
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	20000000 	.word	0x20000000
    1704:	00004b0c 	.word	0x00004b0c
    1708:	20000070 	.word	0x20000070
    170c:	2000013c 	.word	0x2000013c
    1710:	20000070 	.word	0x20000070
    1714:	20000004 	.word	0x20000004
    1718:	e000ed00 	.word	0xe000ed00
    171c:	00000000 	.word	0x00000000
    1720:	41004000 	.word	0x41004000
    1724:	000038ad 	.word	0x000038ad
    1728:	00001811 	.word	0x00001811

0000172c <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    172c:	4b06      	ldr	r3, [pc, #24]	; (1748 <_sbrk+0x1c>)
    172e:	681b      	ldr	r3, [r3, #0]
    1730:	2b00      	cmp	r3, #0
    1732:	d102      	bne.n	173a <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1734:	4a05      	ldr	r2, [pc, #20]	; (174c <_sbrk+0x20>)
    1736:	4b04      	ldr	r3, [pc, #16]	; (1748 <_sbrk+0x1c>)
    1738:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    173a:	4a03      	ldr	r2, [pc, #12]	; (1748 <_sbrk+0x1c>)
    173c:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    173e:	1818      	adds	r0, r3, r0
    1740:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1742:	1c18      	adds	r0, r3, #0
    1744:	4770      	bx	lr
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	200000cc 	.word	0x200000cc
    174c:	20002140 	.word	0x20002140

00001750 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    1750:	2001      	movs	r0, #1
}
    1752:	4240      	negs	r0, r0
    1754:	4770      	bx	lr
    1756:	46c0      	nop			; (mov r8, r8)

00001758 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1758:	2380      	movs	r3, #128	; 0x80
    175a:	019b      	lsls	r3, r3, #6
    175c:	604b      	str	r3, [r1, #4]

	return 0;
}
    175e:	2000      	movs	r0, #0
    1760:	4770      	bx	lr
    1762:	46c0      	nop			; (mov r8, r8)

00001764 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1764:	2001      	movs	r0, #1
    1766:	4770      	bx	lr

00001768 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1768:	2000      	movs	r0, #0
    176a:	4770      	bx	lr

0000176c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    176c:	b570      	push	{r4, r5, r6, lr}
    176e:	b082      	sub	sp, #8
    1770:	1c05      	adds	r5, r0, #0
    1772:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1774:	2200      	movs	r2, #0
    1776:	466b      	mov	r3, sp
    1778:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    177a:	4c06      	ldr	r4, [pc, #24]	; (1794 <usart_serial_getchar+0x28>)
    177c:	1c28      	adds	r0, r5, #0
    177e:	4669      	mov	r1, sp
    1780:	3106      	adds	r1, #6
    1782:	47a0      	blx	r4
    1784:	2800      	cmp	r0, #0
    1786:	d1f9      	bne.n	177c <usart_serial_getchar+0x10>

	*c = temp;
    1788:	466b      	mov	r3, sp
    178a:	3306      	adds	r3, #6
    178c:	881b      	ldrh	r3, [r3, #0]
    178e:	7033      	strb	r3, [r6, #0]
}
    1790:	b002      	add	sp, #8
    1792:	bd70      	pop	{r4, r5, r6, pc}
    1794:	000008d1 	.word	0x000008d1

00001798 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1798:	b570      	push	{r4, r5, r6, lr}
    179a:	1c06      	adds	r6, r0, #0
    179c:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    179e:	4c03      	ldr	r4, [pc, #12]	; (17ac <usart_serial_putchar+0x14>)
    17a0:	1c30      	adds	r0, r6, #0
    17a2:	1c29      	adds	r1, r5, #0
    17a4:	47a0      	blx	r4
    17a6:	2800      	cmp	r0, #0
    17a8:	d1fa      	bne.n	17a0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    17aa:	bd70      	pop	{r4, r5, r6, pc}
    17ac:	000008a5 	.word	0x000008a5

000017b0 <configure_adc>:
struct adc_module adc_instance;
//! [module_inst]

//! [setup]
void configure_adc(void)
{
    17b0:	b510      	push	{r4, lr}
    17b2:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
//! [setup_config]


//! [setup_config_defaults]
	adc_get_config_defaults(&config_adc);
    17b4:	4668      	mov	r0, sp
    17b6:	4b11      	ldr	r3, [pc, #68]	; (17fc <configure_adc+0x4c>)
    17b8:	4798      	blx	r3
//! [setup_config_defaults]

config_adc.reference =  ADC_REFERENCE_INT1V;	//ADC_REFERENCE_INTVCC0;		//reference voltage on pin 9: PA04
    17ba:	2300      	movs	r3, #0
    17bc:	466a      	mov	r2, sp
    17be:	7053      	strb	r3, [r2, #1]
config_adc.resolution = ADC_RESOLUTION_12BIT;			//12 bit resolution
    17c0:	7113      	strb	r3, [r2, #4]
config_adc.divide_result = ADC_DIVIDE_RESULT_DISABLE;	//Don't divide result register after accumulation
    17c2:	7453      	strb	r3, [r2, #17]
config_adc.positive_input = ADC_POSITIVE_INPUT_PIN10;	//voltage positive input on pin 10: PA05
    17c4:	230a      	movs	r3, #10
    17c6:	7313      	strb	r3, [r2, #12]
config_adc.negative_input = ADC_NEGATIVE_INPUT_PIN7;	//voltage negative input as internal ground : PA06
    17c8:	23e0      	movs	r3, #224	; 0xe0
    17ca:	00db      	lsls	r3, r3, #3
    17cc:	81d3      	strh	r3, [r2, #14]

//! [setup_set_config]
	adc_init(&adc_instance, ADC, &config_adc);
    17ce:	4c0c      	ldr	r4, [pc, #48]	; (1800 <configure_adc+0x50>)
    17d0:	1c20      	adds	r0, r4, #0
    17d2:	490c      	ldr	r1, [pc, #48]	; (1804 <configure_adc+0x54>)
    17d4:	4b0c      	ldr	r3, [pc, #48]	; (1808 <configure_adc+0x58>)
    17d6:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    17d8:	6823      	ldr	r3, [r4, #0]
    17da:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    17dc:	b252      	sxtb	r2, r2
    17de:	2a00      	cmp	r2, #0
    17e0:	dbfb      	blt.n	17da <configure_adc+0x2a>

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    17e2:	7819      	ldrb	r1, [r3, #0]
    17e4:	2202      	movs	r2, #2
    17e6:	430a      	orrs	r2, r1
    17e8:	701a      	strb	r2, [r3, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    17ea:	4b05      	ldr	r3, [pc, #20]	; (1800 <configure_adc+0x50>)
    17ec:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    17ee:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    17f0:	b25b      	sxtb	r3, r3
    17f2:	2b00      	cmp	r3, #0
    17f4:	dbfb      	blt.n	17ee <configure_adc+0x3e>


//! [setup_enable]
	adc_enable(&adc_instance);
//! [setup_enable]
}
    17f6:	b00c      	add	sp, #48	; 0x30
    17f8:	bd10      	pop	{r4, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	00000cc1 	.word	0x00000cc1
    1800:	20000130 	.word	0x20000130
    1804:	42004000 	.word	0x42004000
    1808:	00000d09 	.word	0x00000d09
    180c:	00000000 	.word	0x00000000

00001810 <main>:
	stdio_serial_init(&cdc_uart_module, USART_HOST, &usart_conf);
	usart_enable(&cdc_uart_module);
}

int main(void)
{
    1810:	b5f0      	push	{r4, r5, r6, r7, lr}
    1812:	464f      	mov	r7, r9
    1814:	4646      	mov	r6, r8
    1816:	b4c0      	push	{r6, r7}
    1818:	b091      	sub	sp, #68	; 0x44
	system_init();
    181a:	4b7d      	ldr	r3, [pc, #500]	; (1a10 <main+0x200>)
    181c:	4798      	blx	r3
	delay_init();
    181e:	4b7d      	ldr	r3, [pc, #500]	; (1a14 <main+0x204>)
    1820:	4798      	blx	r3
	
//! [setup_init]
	configure_adc();
    1822:	4b7d      	ldr	r3, [pc, #500]	; (1a18 <main+0x208>)
    1824:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1826:	4b7d      	ldr	r3, [pc, #500]	; (1a1c <main+0x20c>)
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    182c:	b252      	sxtb	r2, r2
    182e:	2a00      	cmp	r2, #0
    1830:	dbfb      	blt.n	182a <main+0x1a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1832:	7b19      	ldrb	r1, [r3, #12]
    1834:	2202      	movs	r2, #2
    1836:	430a      	orrs	r2, r1
    1838:	731a      	strb	r2, [r3, #12]
    183a:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    183c:	b252      	sxtb	r2, r2
    183e:	2a00      	cmp	r2, #0
    1840:	dbfb      	blt.n	183a <main+0x2a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1842:	2380      	movs	r3, #128	; 0x80
    1844:	05db      	lsls	r3, r3, #23
    1846:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1848:	2300      	movs	r3, #0
    184a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    184c:	22ff      	movs	r2, #255	; 0xff
    184e:	4668      	mov	r0, sp
    1850:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    1852:	2200      	movs	r2, #0
    1854:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1856:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    1858:	2196      	movs	r1, #150	; 0x96
    185a:	0189      	lsls	r1, r1, #6
    185c:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    185e:	2601      	movs	r6, #1
    1860:	2124      	movs	r1, #36	; 0x24
    1862:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    1864:	2125      	movs	r1, #37	; 0x25
    1866:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    1868:	2126      	movs	r1, #38	; 0x26
    186a:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    186c:	2127      	movs	r1, #39	; 0x27
    186e:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1870:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1872:	212c      	movs	r1, #44	; 0x2c
    1874:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1876:	212d      	movs	r1, #45	; 0x2d
    1878:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    187a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    187c:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    187e:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    1880:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    1882:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    1884:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    1886:	2313      	movs	r3, #19
    1888:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    188a:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    188c:	2380      	movs	r3, #128	; 0x80
    188e:	035b      	lsls	r3, r3, #13
    1890:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    1892:	4b63      	ldr	r3, [pc, #396]	; (1a20 <main+0x210>)
    1894:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    1896:	4b63      	ldr	r3, [pc, #396]	; (1a24 <main+0x214>)
    1898:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    189a:	2301      	movs	r3, #1
    189c:	425b      	negs	r3, r3
    189e:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    18a0:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    18a2:	4c61      	ldr	r4, [pc, #388]	; (1a28 <main+0x218>)
    18a4:	4b61      	ldr	r3, [pc, #388]	; (1a2c <main+0x21c>)
    18a6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    18a8:	4a61      	ldr	r2, [pc, #388]	; (1a30 <main+0x220>)
    18aa:	4b62      	ldr	r3, [pc, #392]	; (1a34 <main+0x224>)
    18ac:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    18ae:	4a62      	ldr	r2, [pc, #392]	; (1a38 <main+0x228>)
    18b0:	4b62      	ldr	r3, [pc, #392]	; (1a3c <main+0x22c>)
    18b2:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    18b4:	1c20      	adds	r0, r4, #0
    18b6:	4962      	ldr	r1, [pc, #392]	; (1a40 <main+0x230>)
    18b8:	466a      	mov	r2, sp
    18ba:	4b62      	ldr	r3, [pc, #392]	; (1a44 <main+0x234>)
    18bc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    18be:	4f62      	ldr	r7, [pc, #392]	; (1a48 <main+0x238>)
    18c0:	683b      	ldr	r3, [r7, #0]
    18c2:	6898      	ldr	r0, [r3, #8]
    18c4:	2100      	movs	r1, #0
    18c6:	4d61      	ldr	r5, [pc, #388]	; (1a4c <main+0x23c>)
    18c8:	47a8      	blx	r5
	setbuf(stdin, NULL);
    18ca:	683b      	ldr	r3, [r7, #0]
    18cc:	6858      	ldr	r0, [r3, #4]
    18ce:	2100      	movs	r1, #0
    18d0:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    18d2:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    18d4:	1c28      	adds	r0, r5, #0
    18d6:	4b5e      	ldr	r3, [pc, #376]	; (1a50 <main+0x240>)
    18d8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    18da:	231f      	movs	r3, #31
    18dc:	4018      	ands	r0, r3
    18de:	4086      	lsls	r6, r0
    18e0:	4b5c      	ldr	r3, [pc, #368]	; (1a54 <main+0x244>)
    18e2:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    18e4:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    18e6:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    18e8:	2a00      	cmp	r2, #0
    18ea:	d1fc      	bne.n	18e6 <main+0xd6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    18ec:	682a      	ldr	r2, [r5, #0]
    18ee:	2302      	movs	r3, #2
    18f0:	4313      	orrs	r3, r2
    18f2:	602b      	str	r3, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    18f4:	4c49      	ldr	r4, [pc, #292]	; (1a1c <main+0x20c>)
    18f6:	6825      	ldr	r5, [r4, #0]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    18f8:	7e2a      	ldrb	r2, [r5, #24]
    18fa:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    18fc:	2301      	movs	r3, #1
    18fe:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    1900:	0756      	lsls	r6, r2, #29
    1902:	d501      	bpl.n	1908 <main+0xf8>
		status_flags |= ADC_STATUS_WINDOW;
    1904:	2102      	movs	r1, #2
    1906:	430b      	orrs	r3, r1
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1908:	0790      	lsls	r0, r2, #30
    190a:	d501      	bpl.n	1910 <main+0x100>
		status_flags |= ADC_STATUS_OVERRUN;
    190c:	2204      	movs	r2, #4
    190e:	4313      	orrs	r3, r2
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    1910:	07d9      	lsls	r1, r3, #31
    1912:	d5f0      	bpl.n	18f6 <main+0xe6>
    1914:	7e6b      	ldrb	r3, [r5, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    1916:	b25b      	sxtb	r3, r3
    1918:	2b00      	cmp	r3, #0
    191a:	dbfb      	blt.n	1914 <main+0x104>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    191c:	8b6b      	ldrh	r3, [r5, #26]
    191e:	b29b      	uxth	r3, r3
    1920:	4699      	mov	r9, r3
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    1922:	2301      	movs	r3, #1
    1924:	762b      	strb	r3, [r5, #24]
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1926:	4a3d      	ldr	r2, [pc, #244]	; (1a1c <main+0x20c>)
    1928:	6811      	ldr	r1, [r2, #0]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    192a:	7e0a      	ldrb	r2, [r1, #24]
    192c:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    192e:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    1930:	0756      	lsls	r6, r2, #29
    1932:	d501      	bpl.n	1938 <main+0x128>
		status_flags |= ADC_STATUS_WINDOW;
    1934:	2002      	movs	r0, #2
    1936:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1938:	0790      	lsls	r0, r2, #30
    193a:	d501      	bpl.n	1940 <main+0x130>
		status_flags |= ADC_STATUS_OVERRUN;
    193c:	2204      	movs	r2, #4
    193e:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1940:	075a      	lsls	r2, r3, #29
    1942:	d525      	bpl.n	1990 <main+0x180>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    1944:	2302      	movs	r3, #2
    1946:	760b      	strb	r3, [r1, #24]
    1948:	e022      	b.n	1990 <main+0x180>
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
		status_flags |= ADC_STATUS_WINDOW;
    194a:	2002      	movs	r0, #2
    194c:	4301      	orrs	r1, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    194e:	0796      	lsls	r6, r2, #30
    1950:	d501      	bpl.n	1956 <main+0x146>
		status_flags |= ADC_STATUS_OVERRUN;
    1952:	2204      	movs	r2, #4
    1954:	4311      	orrs	r1, r2
	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = 0;

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    1956:	2201      	movs	r2, #1
    1958:	400a      	ands	r2, r1
		int_flags |= ADC_INTFLAG_RESRDY;
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    195a:	0788      	lsls	r0, r1, #30
    195c:	d501      	bpl.n	1962 <main+0x152>
		int_flags |= ADC_INTFLAG_WINMON;
    195e:	2004      	movs	r0, #4
    1960:	4302      	orrs	r2, r0
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    1962:	074e      	lsls	r6, r1, #29
    1964:	d501      	bpl.n	196a <main+0x15a>
		int_flags |= ADC_INTFLAG_OVERRUN;
    1966:	2102      	movs	r1, #2
    1968:	430a      	orrs	r2, r1
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    196a:	b2d2      	uxtb	r2, r2
    196c:	761a      	strb	r2, [r3, #24]
    196e:	7e5a      	ldrb	r2, [r3, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    1970:	b252      	sxtb	r2, r2
    1972:	2a00      	cmp	r2, #0
    1974:	dbfb      	blt.n	196e <main+0x15e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1976:	7b19      	ldrb	r1, [r3, #12]
    1978:	2202      	movs	r2, #2
    197a:	430a      	orrs	r2, r1
    197c:	731a      	strb	r2, [r3, #12]
    197e:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    1980:	b252      	sxtb	r2, r2
    1982:	2a00      	cmp	r2, #0
    1984:	dbfb      	blt.n	197e <main+0x16e>
		printf("The result is %d\n",result);
		uint32_t far = 9.0/5.0*((float)result*.0002441406*6.0/.01)+32.0;
		printf(" The temp is %d", far);
		adc_clear_status(&adc_instance,adc_get_status(&adc_instance));
			adc_start_conversion(&adc_instance);
		delay_ms(500);
    1986:	20fa      	movs	r0, #250	; 0xfa
    1988:	0040      	lsls	r0, r0, #1
    198a:	4b33      	ldr	r3, [pc, #204]	; (1a58 <main+0x248>)
    198c:	4798      	blx	r3
	}
    198e:	e7b2      	b.n	18f6 <main+0xe6>
		/* Infinite loop */
		//adc_read(&adc_instance, &result);
		do {
		/* Wait for conversion to be done and read out result */
		} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
		printf("The result is %d\n",result);
    1990:	4832      	ldr	r0, [pc, #200]	; (1a5c <main+0x24c>)
    1992:	4649      	mov	r1, r9
    1994:	4a32      	ldr	r2, [pc, #200]	; (1a60 <main+0x250>)
    1996:	4690      	mov	r8, r2
    1998:	4790      	blx	r2
		uint32_t far = 9.0/5.0*((float)result*.0002441406*6.0/.01)+32.0;
    199a:	4648      	mov	r0, r9
    199c:	4b31      	ldr	r3, [pc, #196]	; (1a64 <main+0x254>)
    199e:	4798      	blx	r3
    19a0:	4b31      	ldr	r3, [pc, #196]	; (1a68 <main+0x258>)
    19a2:	4798      	blx	r3
    19a4:	4d31      	ldr	r5, [pc, #196]	; (1a6c <main+0x25c>)
    19a6:	4b11      	ldr	r3, [pc, #68]	; (19ec <main+0x1dc>)
    19a8:	4a0f      	ldr	r2, [pc, #60]	; (19e8 <main+0x1d8>)
    19aa:	47a8      	blx	r5
    19ac:	4a10      	ldr	r2, [pc, #64]	; (19f0 <main+0x1e0>)
    19ae:	4b11      	ldr	r3, [pc, #68]	; (19f4 <main+0x1e4>)
    19b0:	47a8      	blx	r5
    19b2:	4a11      	ldr	r2, [pc, #68]	; (19f8 <main+0x1e8>)
    19b4:	4b11      	ldr	r3, [pc, #68]	; (19fc <main+0x1ec>)
    19b6:	4e2e      	ldr	r6, [pc, #184]	; (1a70 <main+0x260>)
    19b8:	47b0      	blx	r6
    19ba:	4a11      	ldr	r2, [pc, #68]	; (1a00 <main+0x1f0>)
    19bc:	4b11      	ldr	r3, [pc, #68]	; (1a04 <main+0x1f4>)
    19be:	47a8      	blx	r5
    19c0:	4a11      	ldr	r2, [pc, #68]	; (1a08 <main+0x1f8>)
    19c2:	4b12      	ldr	r3, [pc, #72]	; (1a0c <main+0x1fc>)
    19c4:	4d2b      	ldr	r5, [pc, #172]	; (1a74 <main+0x264>)
    19c6:	47a8      	blx	r5
    19c8:	4b2b      	ldr	r3, [pc, #172]	; (1a78 <main+0x268>)
    19ca:	4798      	blx	r3
    19cc:	1c01      	adds	r1, r0, #0
		printf(" The temp is %d", far);
    19ce:	482b      	ldr	r0, [pc, #172]	; (1a7c <main+0x26c>)
    19d0:	47c0      	blx	r8
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    19d2:	4b12      	ldr	r3, [pc, #72]	; (1a1c <main+0x20c>)
    19d4:	681b      	ldr	r3, [r3, #0]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    19d6:	7e1a      	ldrb	r2, [r3, #24]
    19d8:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    19da:	2101      	movs	r1, #1
    19dc:	4011      	ands	r1, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    19de:	0750      	lsls	r0, r2, #29
    19e0:	d4b3      	bmi.n	194a <main+0x13a>
    19e2:	e7b4      	b.n	194e <main+0x13e>
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	c906404c 	.word	0xc906404c
    19ec:	3f2fffff 	.word	0x3f2fffff
    19f0:	00000000 	.word	0x00000000
    19f4:	40180000 	.word	0x40180000
    19f8:	47ae147b 	.word	0x47ae147b
    19fc:	3f847ae1 	.word	0x3f847ae1
    1a00:	cccccccd 	.word	0xcccccccd
    1a04:	3ffccccc 	.word	0x3ffccccc
    1a08:	00000000 	.word	0x00000000
    1a0c:	40400000 	.word	0x40400000
    1a10:	00001665 	.word	0x00001665
    1a14:	00000bb1 	.word	0x00000bb1
    1a18:	000017b1 	.word	0x000017b1
    1a1c:	20000130 	.word	0x20000130
    1a20:	00040003 	.word	0x00040003
    1a24:	00050003 	.word	0x00050003
    1a28:	200000d0 	.word	0x200000d0
    1a2c:	20000114 	.word	0x20000114
    1a30:	00001799 	.word	0x00001799
    1a34:	20000110 	.word	0x20000110
    1a38:	0000176d 	.word	0x0000176d
    1a3c:	2000010c 	.word	0x2000010c
    1a40:	42000800 	.word	0x42000800
    1a44:	0000059d 	.word	0x0000059d
    1a48:	2000006c 	.word	0x2000006c
    1a4c:	00003951 	.word	0x00003951
    1a50:	00000b25 	.word	0x00000b25
    1a54:	e000e100 	.word	0xe000e100
    1a58:	00000bed 	.word	0x00000bed
    1a5c:	000049ac 	.word	0x000049ac
    1a60:	0000391d 	.word	0x0000391d
    1a64:	00001ba9 	.word	0x00001ba9
    1a68:	000034c5 	.word	0x000034c5
    1a6c:	000028d5 	.word	0x000028d5
    1a70:	0000228d 	.word	0x0000228d
    1a74:	00001c49 	.word	0x00001c49
    1a78:	00001b69 	.word	0x00001b69
    1a7c:	000049c0 	.word	0x000049c0

00001a80 <__aeabi_uidiv>:
    1a80:	2900      	cmp	r1, #0
    1a82:	d034      	beq.n	1aee <.udivsi3_skip_div0_test+0x6a>

00001a84 <.udivsi3_skip_div0_test>:
    1a84:	2301      	movs	r3, #1
    1a86:	2200      	movs	r2, #0
    1a88:	b410      	push	{r4}
    1a8a:	4288      	cmp	r0, r1
    1a8c:	d32c      	bcc.n	1ae8 <.udivsi3_skip_div0_test+0x64>
    1a8e:	2401      	movs	r4, #1
    1a90:	0724      	lsls	r4, r4, #28
    1a92:	42a1      	cmp	r1, r4
    1a94:	d204      	bcs.n	1aa0 <.udivsi3_skip_div0_test+0x1c>
    1a96:	4281      	cmp	r1, r0
    1a98:	d202      	bcs.n	1aa0 <.udivsi3_skip_div0_test+0x1c>
    1a9a:	0109      	lsls	r1, r1, #4
    1a9c:	011b      	lsls	r3, r3, #4
    1a9e:	e7f8      	b.n	1a92 <.udivsi3_skip_div0_test+0xe>
    1aa0:	00e4      	lsls	r4, r4, #3
    1aa2:	42a1      	cmp	r1, r4
    1aa4:	d204      	bcs.n	1ab0 <.udivsi3_skip_div0_test+0x2c>
    1aa6:	4281      	cmp	r1, r0
    1aa8:	d202      	bcs.n	1ab0 <.udivsi3_skip_div0_test+0x2c>
    1aaa:	0049      	lsls	r1, r1, #1
    1aac:	005b      	lsls	r3, r3, #1
    1aae:	e7f8      	b.n	1aa2 <.udivsi3_skip_div0_test+0x1e>
    1ab0:	4288      	cmp	r0, r1
    1ab2:	d301      	bcc.n	1ab8 <.udivsi3_skip_div0_test+0x34>
    1ab4:	1a40      	subs	r0, r0, r1
    1ab6:	431a      	orrs	r2, r3
    1ab8:	084c      	lsrs	r4, r1, #1
    1aba:	42a0      	cmp	r0, r4
    1abc:	d302      	bcc.n	1ac4 <.udivsi3_skip_div0_test+0x40>
    1abe:	1b00      	subs	r0, r0, r4
    1ac0:	085c      	lsrs	r4, r3, #1
    1ac2:	4322      	orrs	r2, r4
    1ac4:	088c      	lsrs	r4, r1, #2
    1ac6:	42a0      	cmp	r0, r4
    1ac8:	d302      	bcc.n	1ad0 <.udivsi3_skip_div0_test+0x4c>
    1aca:	1b00      	subs	r0, r0, r4
    1acc:	089c      	lsrs	r4, r3, #2
    1ace:	4322      	orrs	r2, r4
    1ad0:	08cc      	lsrs	r4, r1, #3
    1ad2:	42a0      	cmp	r0, r4
    1ad4:	d302      	bcc.n	1adc <.udivsi3_skip_div0_test+0x58>
    1ad6:	1b00      	subs	r0, r0, r4
    1ad8:	08dc      	lsrs	r4, r3, #3
    1ada:	4322      	orrs	r2, r4
    1adc:	2800      	cmp	r0, #0
    1ade:	d003      	beq.n	1ae8 <.udivsi3_skip_div0_test+0x64>
    1ae0:	091b      	lsrs	r3, r3, #4
    1ae2:	d001      	beq.n	1ae8 <.udivsi3_skip_div0_test+0x64>
    1ae4:	0909      	lsrs	r1, r1, #4
    1ae6:	e7e3      	b.n	1ab0 <.udivsi3_skip_div0_test+0x2c>
    1ae8:	1c10      	adds	r0, r2, #0
    1aea:	bc10      	pop	{r4}
    1aec:	4770      	bx	lr
    1aee:	2800      	cmp	r0, #0
    1af0:	d001      	beq.n	1af6 <.udivsi3_skip_div0_test+0x72>
    1af2:	2000      	movs	r0, #0
    1af4:	43c0      	mvns	r0, r0
    1af6:	b407      	push	{r0, r1, r2}
    1af8:	4802      	ldr	r0, [pc, #8]	; (1b04 <.udivsi3_skip_div0_test+0x80>)
    1afa:	a102      	add	r1, pc, #8	; (adr r1, 1b04 <.udivsi3_skip_div0_test+0x80>)
    1afc:	1840      	adds	r0, r0, r1
    1afe:	9002      	str	r0, [sp, #8]
    1b00:	bd03      	pop	{r0, r1, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	00000019 	.word	0x00000019

00001b08 <__aeabi_uidivmod>:
    1b08:	2900      	cmp	r1, #0
    1b0a:	d0f0      	beq.n	1aee <.udivsi3_skip_div0_test+0x6a>
    1b0c:	b503      	push	{r0, r1, lr}
    1b0e:	f7ff ffb9 	bl	1a84 <.udivsi3_skip_div0_test>
    1b12:	bc0e      	pop	{r1, r2, r3}
    1b14:	4342      	muls	r2, r0
    1b16:	1a89      	subs	r1, r1, r2
    1b18:	4718      	bx	r3
    1b1a:	46c0      	nop			; (mov r8, r8)

00001b1c <__aeabi_idiv0>:
    1b1c:	4770      	bx	lr
    1b1e:	46c0      	nop			; (mov r8, r8)

00001b20 <__aeabi_lmul>:
    1b20:	469c      	mov	ip, r3
    1b22:	0403      	lsls	r3, r0, #16
    1b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b26:	0c1b      	lsrs	r3, r3, #16
    1b28:	0417      	lsls	r7, r2, #16
    1b2a:	0c3f      	lsrs	r7, r7, #16
    1b2c:	0c15      	lsrs	r5, r2, #16
    1b2e:	1c1e      	adds	r6, r3, #0
    1b30:	1c04      	adds	r4, r0, #0
    1b32:	0c00      	lsrs	r0, r0, #16
    1b34:	437e      	muls	r6, r7
    1b36:	436b      	muls	r3, r5
    1b38:	4347      	muls	r7, r0
    1b3a:	4345      	muls	r5, r0
    1b3c:	18fb      	adds	r3, r7, r3
    1b3e:	0c30      	lsrs	r0, r6, #16
    1b40:	1818      	adds	r0, r3, r0
    1b42:	4287      	cmp	r7, r0
    1b44:	d902      	bls.n	1b4c <__aeabi_lmul+0x2c>
    1b46:	2380      	movs	r3, #128	; 0x80
    1b48:	025b      	lsls	r3, r3, #9
    1b4a:	18ed      	adds	r5, r5, r3
    1b4c:	0c03      	lsrs	r3, r0, #16
    1b4e:	18ed      	adds	r5, r5, r3
    1b50:	4663      	mov	r3, ip
    1b52:	435c      	muls	r4, r3
    1b54:	434a      	muls	r2, r1
    1b56:	0436      	lsls	r6, r6, #16
    1b58:	0c36      	lsrs	r6, r6, #16
    1b5a:	18a1      	adds	r1, r4, r2
    1b5c:	0400      	lsls	r0, r0, #16
    1b5e:	1980      	adds	r0, r0, r6
    1b60:	1949      	adds	r1, r1, r5
    1b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b64:	0000      	movs	r0, r0
	...

00001b68 <__aeabi_d2uiz>:
    1b68:	b538      	push	{r3, r4, r5, lr}
    1b6a:	4b0e      	ldr	r3, [pc, #56]	; (1ba4 <__aeabi_d2uiz+0x3c>)
    1b6c:	4a0c      	ldr	r2, [pc, #48]	; (1ba0 <__aeabi_d2uiz+0x38>)
    1b6e:	1c04      	adds	r4, r0, #0
    1b70:	1c0d      	adds	r5, r1, #0
    1b72:	f001 fd2d 	bl	35d0 <__aeabi_dcmpge>
    1b76:	2800      	cmp	r0, #0
    1b78:	d104      	bne.n	1b84 <__aeabi_d2uiz+0x1c>
    1b7a:	1c20      	adds	r0, r4, #0
    1b7c:	1c29      	adds	r1, r5, #0
    1b7e:	f001 fc6d 	bl	345c <__aeabi_d2iz>
    1b82:	bd38      	pop	{r3, r4, r5, pc}
    1b84:	4b07      	ldr	r3, [pc, #28]	; (1ba4 <__aeabi_d2uiz+0x3c>)
    1b86:	4a06      	ldr	r2, [pc, #24]	; (1ba0 <__aeabi_d2uiz+0x38>)
    1b88:	1c20      	adds	r0, r4, #0
    1b8a:	1c29      	adds	r1, r5, #0
    1b8c:	f001 f932 	bl	2df4 <__aeabi_dsub>
    1b90:	f001 fc64 	bl	345c <__aeabi_d2iz>
    1b94:	2380      	movs	r3, #128	; 0x80
    1b96:	061b      	lsls	r3, r3, #24
    1b98:	18c0      	adds	r0, r0, r3
    1b9a:	e7f2      	b.n	1b82 <__aeabi_d2uiz+0x1a>
    1b9c:	46c0      	nop			; (mov r8, r8)
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	00000000 	.word	0x00000000
    1ba4:	41e00000 	.word	0x41e00000

00001ba8 <__aeabi_ui2f>:
    1ba8:	b510      	push	{r4, lr}
    1baa:	1e04      	subs	r4, r0, #0
    1bac:	d033      	beq.n	1c16 <__aeabi_ui2f+0x6e>
    1bae:	f001 fd19 	bl	35e4 <__clzsi2>
    1bb2:	239e      	movs	r3, #158	; 0x9e
    1bb4:	1a1b      	subs	r3, r3, r0
    1bb6:	2b96      	cmp	r3, #150	; 0x96
    1bb8:	dc09      	bgt.n	1bce <__aeabi_ui2f+0x26>
    1bba:	3808      	subs	r0, #8
    1bbc:	4084      	lsls	r4, r0
    1bbe:	0264      	lsls	r4, r4, #9
    1bc0:	0a64      	lsrs	r4, r4, #9
    1bc2:	b2db      	uxtb	r3, r3
    1bc4:	0264      	lsls	r4, r4, #9
    1bc6:	05db      	lsls	r3, r3, #23
    1bc8:	0a60      	lsrs	r0, r4, #9
    1bca:	4318      	orrs	r0, r3
    1bcc:	bd10      	pop	{r4, pc}
    1bce:	2b99      	cmp	r3, #153	; 0x99
    1bd0:	dd0a      	ble.n	1be8 <__aeabi_ui2f+0x40>
    1bd2:	2205      	movs	r2, #5
    1bd4:	1a12      	subs	r2, r2, r0
    1bd6:	1c21      	adds	r1, r4, #0
    1bd8:	40d1      	lsrs	r1, r2
    1bda:	1c0a      	adds	r2, r1, #0
    1bdc:	1c01      	adds	r1, r0, #0
    1bde:	311b      	adds	r1, #27
    1be0:	408c      	lsls	r4, r1
    1be2:	1e61      	subs	r1, r4, #1
    1be4:	418c      	sbcs	r4, r1
    1be6:	4314      	orrs	r4, r2
    1be8:	2805      	cmp	r0, #5
    1bea:	dd01      	ble.n	1bf0 <__aeabi_ui2f+0x48>
    1bec:	1f42      	subs	r2, r0, #5
    1bee:	4094      	lsls	r4, r2
    1bf0:	4a14      	ldr	r2, [pc, #80]	; (1c44 <__aeabi_ui2f+0x9c>)
    1bf2:	4022      	ands	r2, r4
    1bf4:	0761      	lsls	r1, r4, #29
    1bf6:	d004      	beq.n	1c02 <__aeabi_ui2f+0x5a>
    1bf8:	210f      	movs	r1, #15
    1bfa:	400c      	ands	r4, r1
    1bfc:	2c04      	cmp	r4, #4
    1bfe:	d000      	beq.n	1c02 <__aeabi_ui2f+0x5a>
    1c00:	3204      	adds	r2, #4
    1c02:	0151      	lsls	r1, r2, #5
    1c04:	d50a      	bpl.n	1c1c <__aeabi_ui2f+0x74>
    1c06:	239f      	movs	r3, #159	; 0x9f
    1c08:	1a18      	subs	r0, r3, r0
    1c0a:	28ff      	cmp	r0, #255	; 0xff
    1c0c:	d016      	beq.n	1c3c <__aeabi_ui2f+0x94>
    1c0e:	0194      	lsls	r4, r2, #6
    1c10:	0a64      	lsrs	r4, r4, #9
    1c12:	b2c3      	uxtb	r3, r0
    1c14:	e7d6      	b.n	1bc4 <__aeabi_ui2f+0x1c>
    1c16:	2300      	movs	r3, #0
    1c18:	2400      	movs	r4, #0
    1c1a:	e7d3      	b.n	1bc4 <__aeabi_ui2f+0x1c>
    1c1c:	08d2      	lsrs	r2, r2, #3
    1c1e:	2bff      	cmp	r3, #255	; 0xff
    1c20:	d003      	beq.n	1c2a <__aeabi_ui2f+0x82>
    1c22:	0254      	lsls	r4, r2, #9
    1c24:	0a64      	lsrs	r4, r4, #9
    1c26:	b2db      	uxtb	r3, r3
    1c28:	e7cc      	b.n	1bc4 <__aeabi_ui2f+0x1c>
    1c2a:	2a00      	cmp	r2, #0
    1c2c:	d006      	beq.n	1c3c <__aeabi_ui2f+0x94>
    1c2e:	2480      	movs	r4, #128	; 0x80
    1c30:	03e4      	lsls	r4, r4, #15
    1c32:	4314      	orrs	r4, r2
    1c34:	0264      	lsls	r4, r4, #9
    1c36:	0a64      	lsrs	r4, r4, #9
    1c38:	23ff      	movs	r3, #255	; 0xff
    1c3a:	e7c3      	b.n	1bc4 <__aeabi_ui2f+0x1c>
    1c3c:	23ff      	movs	r3, #255	; 0xff
    1c3e:	2400      	movs	r4, #0
    1c40:	e7c0      	b.n	1bc4 <__aeabi_ui2f+0x1c>
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	fbffffff 	.word	0xfbffffff

00001c48 <__aeabi_dadd>:
    1c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c4a:	465f      	mov	r7, fp
    1c4c:	4656      	mov	r6, sl
    1c4e:	4644      	mov	r4, r8
    1c50:	464d      	mov	r5, r9
    1c52:	b4f0      	push	{r4, r5, r6, r7}
    1c54:	030c      	lsls	r4, r1, #12
    1c56:	004d      	lsls	r5, r1, #1
    1c58:	0fce      	lsrs	r6, r1, #31
    1c5a:	0a61      	lsrs	r1, r4, #9
    1c5c:	0f44      	lsrs	r4, r0, #29
    1c5e:	4321      	orrs	r1, r4
    1c60:	00c4      	lsls	r4, r0, #3
    1c62:	0318      	lsls	r0, r3, #12
    1c64:	4680      	mov	r8, r0
    1c66:	0058      	lsls	r0, r3, #1
    1c68:	0d40      	lsrs	r0, r0, #21
    1c6a:	4682      	mov	sl, r0
    1c6c:	0fd8      	lsrs	r0, r3, #31
    1c6e:	4684      	mov	ip, r0
    1c70:	4640      	mov	r0, r8
    1c72:	0a40      	lsrs	r0, r0, #9
    1c74:	0f53      	lsrs	r3, r2, #29
    1c76:	4303      	orrs	r3, r0
    1c78:	00d0      	lsls	r0, r2, #3
    1c7a:	0d6d      	lsrs	r5, r5, #21
    1c7c:	1c37      	adds	r7, r6, #0
    1c7e:	4683      	mov	fp, r0
    1c80:	4652      	mov	r2, sl
    1c82:	4566      	cmp	r6, ip
    1c84:	d100      	bne.n	1c88 <__aeabi_dadd+0x40>
    1c86:	e0a4      	b.n	1dd2 <__aeabi_dadd+0x18a>
    1c88:	1aaf      	subs	r7, r5, r2
    1c8a:	2f00      	cmp	r7, #0
    1c8c:	dc00      	bgt.n	1c90 <__aeabi_dadd+0x48>
    1c8e:	e109      	b.n	1ea4 <__aeabi_dadd+0x25c>
    1c90:	2a00      	cmp	r2, #0
    1c92:	d13b      	bne.n	1d0c <__aeabi_dadd+0xc4>
    1c94:	4318      	orrs	r0, r3
    1c96:	d000      	beq.n	1c9a <__aeabi_dadd+0x52>
    1c98:	e0ea      	b.n	1e70 <__aeabi_dadd+0x228>
    1c9a:	0763      	lsls	r3, r4, #29
    1c9c:	d100      	bne.n	1ca0 <__aeabi_dadd+0x58>
    1c9e:	e087      	b.n	1db0 <__aeabi_dadd+0x168>
    1ca0:	230f      	movs	r3, #15
    1ca2:	4023      	ands	r3, r4
    1ca4:	2b04      	cmp	r3, #4
    1ca6:	d100      	bne.n	1caa <__aeabi_dadd+0x62>
    1ca8:	e082      	b.n	1db0 <__aeabi_dadd+0x168>
    1caa:	1d22      	adds	r2, r4, #4
    1cac:	42a2      	cmp	r2, r4
    1cae:	41a4      	sbcs	r4, r4
    1cb0:	4264      	negs	r4, r4
    1cb2:	2380      	movs	r3, #128	; 0x80
    1cb4:	1909      	adds	r1, r1, r4
    1cb6:	041b      	lsls	r3, r3, #16
    1cb8:	400b      	ands	r3, r1
    1cba:	1c37      	adds	r7, r6, #0
    1cbc:	1c14      	adds	r4, r2, #0
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d100      	bne.n	1cc4 <__aeabi_dadd+0x7c>
    1cc2:	e07c      	b.n	1dbe <__aeabi_dadd+0x176>
    1cc4:	4bce      	ldr	r3, [pc, #824]	; (2000 <STACK_SIZE>)
    1cc6:	3501      	adds	r5, #1
    1cc8:	429d      	cmp	r5, r3
    1cca:	d100      	bne.n	1cce <__aeabi_dadd+0x86>
    1ccc:	e105      	b.n	1eda <__aeabi_dadd+0x292>
    1cce:	4bcd      	ldr	r3, [pc, #820]	; (2004 <STACK_SIZE+0x4>)
    1cd0:	08e4      	lsrs	r4, r4, #3
    1cd2:	4019      	ands	r1, r3
    1cd4:	0748      	lsls	r0, r1, #29
    1cd6:	0249      	lsls	r1, r1, #9
    1cd8:	4304      	orrs	r4, r0
    1cda:	0b0b      	lsrs	r3, r1, #12
    1cdc:	2000      	movs	r0, #0
    1cde:	2100      	movs	r1, #0
    1ce0:	031b      	lsls	r3, r3, #12
    1ce2:	0b1a      	lsrs	r2, r3, #12
    1ce4:	0d0b      	lsrs	r3, r1, #20
    1ce6:	056d      	lsls	r5, r5, #21
    1ce8:	051b      	lsls	r3, r3, #20
    1cea:	4313      	orrs	r3, r2
    1cec:	086a      	lsrs	r2, r5, #1
    1cee:	4dc6      	ldr	r5, [pc, #792]	; (2008 <STACK_SIZE+0x8>)
    1cf0:	07ff      	lsls	r7, r7, #31
    1cf2:	401d      	ands	r5, r3
    1cf4:	4315      	orrs	r5, r2
    1cf6:	006d      	lsls	r5, r5, #1
    1cf8:	086d      	lsrs	r5, r5, #1
    1cfa:	1c29      	adds	r1, r5, #0
    1cfc:	4339      	orrs	r1, r7
    1cfe:	1c20      	adds	r0, r4, #0
    1d00:	bc3c      	pop	{r2, r3, r4, r5}
    1d02:	4690      	mov	r8, r2
    1d04:	4699      	mov	r9, r3
    1d06:	46a2      	mov	sl, r4
    1d08:	46ab      	mov	fp, r5
    1d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d0c:	48bc      	ldr	r0, [pc, #752]	; (2000 <STACK_SIZE>)
    1d0e:	4285      	cmp	r5, r0
    1d10:	d0c3      	beq.n	1c9a <__aeabi_dadd+0x52>
    1d12:	2080      	movs	r0, #128	; 0x80
    1d14:	0400      	lsls	r0, r0, #16
    1d16:	4303      	orrs	r3, r0
    1d18:	2f38      	cmp	r7, #56	; 0x38
    1d1a:	dd00      	ble.n	1d1e <__aeabi_dadd+0xd6>
    1d1c:	e0f0      	b.n	1f00 <__aeabi_dadd+0x2b8>
    1d1e:	2f1f      	cmp	r7, #31
    1d20:	dd00      	ble.n	1d24 <__aeabi_dadd+0xdc>
    1d22:	e124      	b.n	1f6e <__aeabi_dadd+0x326>
    1d24:	2020      	movs	r0, #32
    1d26:	1bc0      	subs	r0, r0, r7
    1d28:	1c1a      	adds	r2, r3, #0
    1d2a:	4681      	mov	r9, r0
    1d2c:	4082      	lsls	r2, r0
    1d2e:	4658      	mov	r0, fp
    1d30:	40f8      	lsrs	r0, r7
    1d32:	4302      	orrs	r2, r0
    1d34:	4694      	mov	ip, r2
    1d36:	4658      	mov	r0, fp
    1d38:	464a      	mov	r2, r9
    1d3a:	4090      	lsls	r0, r2
    1d3c:	1e42      	subs	r2, r0, #1
    1d3e:	4190      	sbcs	r0, r2
    1d40:	40fb      	lsrs	r3, r7
    1d42:	4662      	mov	r2, ip
    1d44:	4302      	orrs	r2, r0
    1d46:	1c1f      	adds	r7, r3, #0
    1d48:	1aa2      	subs	r2, r4, r2
    1d4a:	4294      	cmp	r4, r2
    1d4c:	41a4      	sbcs	r4, r4
    1d4e:	4264      	negs	r4, r4
    1d50:	1bc9      	subs	r1, r1, r7
    1d52:	1b09      	subs	r1, r1, r4
    1d54:	1c14      	adds	r4, r2, #0
    1d56:	020b      	lsls	r3, r1, #8
    1d58:	d59f      	bpl.n	1c9a <__aeabi_dadd+0x52>
    1d5a:	0249      	lsls	r1, r1, #9
    1d5c:	0a4f      	lsrs	r7, r1, #9
    1d5e:	2f00      	cmp	r7, #0
    1d60:	d100      	bne.n	1d64 <__aeabi_dadd+0x11c>
    1d62:	e0c8      	b.n	1ef6 <__aeabi_dadd+0x2ae>
    1d64:	1c38      	adds	r0, r7, #0
    1d66:	f001 fc3d 	bl	35e4 <__clzsi2>
    1d6a:	1c02      	adds	r2, r0, #0
    1d6c:	3a08      	subs	r2, #8
    1d6e:	2a1f      	cmp	r2, #31
    1d70:	dd00      	ble.n	1d74 <__aeabi_dadd+0x12c>
    1d72:	e0b5      	b.n	1ee0 <__aeabi_dadd+0x298>
    1d74:	2128      	movs	r1, #40	; 0x28
    1d76:	1a09      	subs	r1, r1, r0
    1d78:	1c20      	adds	r0, r4, #0
    1d7a:	4097      	lsls	r7, r2
    1d7c:	40c8      	lsrs	r0, r1
    1d7e:	4307      	orrs	r7, r0
    1d80:	4094      	lsls	r4, r2
    1d82:	4295      	cmp	r5, r2
    1d84:	dd00      	ble.n	1d88 <__aeabi_dadd+0x140>
    1d86:	e0b2      	b.n	1eee <__aeabi_dadd+0x2a6>
    1d88:	1b55      	subs	r5, r2, r5
    1d8a:	1c69      	adds	r1, r5, #1
    1d8c:	291f      	cmp	r1, #31
    1d8e:	dd00      	ble.n	1d92 <__aeabi_dadd+0x14a>
    1d90:	e0dc      	b.n	1f4c <__aeabi_dadd+0x304>
    1d92:	221f      	movs	r2, #31
    1d94:	1b55      	subs	r5, r2, r5
    1d96:	1c3b      	adds	r3, r7, #0
    1d98:	1c22      	adds	r2, r4, #0
    1d9a:	40ab      	lsls	r3, r5
    1d9c:	40ca      	lsrs	r2, r1
    1d9e:	40ac      	lsls	r4, r5
    1da0:	1e65      	subs	r5, r4, #1
    1da2:	41ac      	sbcs	r4, r5
    1da4:	4313      	orrs	r3, r2
    1da6:	40cf      	lsrs	r7, r1
    1da8:	431c      	orrs	r4, r3
    1daa:	1c39      	adds	r1, r7, #0
    1dac:	2500      	movs	r5, #0
    1dae:	e774      	b.n	1c9a <__aeabi_dadd+0x52>
    1db0:	2380      	movs	r3, #128	; 0x80
    1db2:	041b      	lsls	r3, r3, #16
    1db4:	400b      	ands	r3, r1
    1db6:	1c37      	adds	r7, r6, #0
    1db8:	2b00      	cmp	r3, #0
    1dba:	d000      	beq.n	1dbe <__aeabi_dadd+0x176>
    1dbc:	e782      	b.n	1cc4 <__aeabi_dadd+0x7c>
    1dbe:	4b90      	ldr	r3, [pc, #576]	; (2000 <STACK_SIZE>)
    1dc0:	0748      	lsls	r0, r1, #29
    1dc2:	08e4      	lsrs	r4, r4, #3
    1dc4:	4304      	orrs	r4, r0
    1dc6:	08c9      	lsrs	r1, r1, #3
    1dc8:	429d      	cmp	r5, r3
    1dca:	d048      	beq.n	1e5e <__aeabi_dadd+0x216>
    1dcc:	0309      	lsls	r1, r1, #12
    1dce:	0b0b      	lsrs	r3, r1, #12
    1dd0:	e784      	b.n	1cdc <__aeabi_dadd+0x94>
    1dd2:	1aaa      	subs	r2, r5, r2
    1dd4:	4694      	mov	ip, r2
    1dd6:	2a00      	cmp	r2, #0
    1dd8:	dc00      	bgt.n	1ddc <__aeabi_dadd+0x194>
    1dda:	e098      	b.n	1f0e <__aeabi_dadd+0x2c6>
    1ddc:	4650      	mov	r0, sl
    1dde:	2800      	cmp	r0, #0
    1de0:	d052      	beq.n	1e88 <__aeabi_dadd+0x240>
    1de2:	4887      	ldr	r0, [pc, #540]	; (2000 <STACK_SIZE>)
    1de4:	4285      	cmp	r5, r0
    1de6:	d100      	bne.n	1dea <__aeabi_dadd+0x1a2>
    1de8:	e757      	b.n	1c9a <__aeabi_dadd+0x52>
    1dea:	2080      	movs	r0, #128	; 0x80
    1dec:	0400      	lsls	r0, r0, #16
    1dee:	4303      	orrs	r3, r0
    1df0:	4662      	mov	r2, ip
    1df2:	2a38      	cmp	r2, #56	; 0x38
    1df4:	dd00      	ble.n	1df8 <__aeabi_dadd+0x1b0>
    1df6:	e0fc      	b.n	1ff2 <__aeabi_dadd+0x3aa>
    1df8:	2a1f      	cmp	r2, #31
    1dfa:	dd00      	ble.n	1dfe <__aeabi_dadd+0x1b6>
    1dfc:	e14a      	b.n	2094 <STACK_SIZE+0x94>
    1dfe:	2220      	movs	r2, #32
    1e00:	4660      	mov	r0, ip
    1e02:	1a10      	subs	r0, r2, r0
    1e04:	1c1a      	adds	r2, r3, #0
    1e06:	4082      	lsls	r2, r0
    1e08:	4682      	mov	sl, r0
    1e0a:	4691      	mov	r9, r2
    1e0c:	4658      	mov	r0, fp
    1e0e:	4662      	mov	r2, ip
    1e10:	40d0      	lsrs	r0, r2
    1e12:	464a      	mov	r2, r9
    1e14:	4302      	orrs	r2, r0
    1e16:	4690      	mov	r8, r2
    1e18:	4658      	mov	r0, fp
    1e1a:	4652      	mov	r2, sl
    1e1c:	4090      	lsls	r0, r2
    1e1e:	1e42      	subs	r2, r0, #1
    1e20:	4190      	sbcs	r0, r2
    1e22:	4642      	mov	r2, r8
    1e24:	4302      	orrs	r2, r0
    1e26:	4660      	mov	r0, ip
    1e28:	40c3      	lsrs	r3, r0
    1e2a:	1912      	adds	r2, r2, r4
    1e2c:	42a2      	cmp	r2, r4
    1e2e:	41a4      	sbcs	r4, r4
    1e30:	4264      	negs	r4, r4
    1e32:	1859      	adds	r1, r3, r1
    1e34:	1909      	adds	r1, r1, r4
    1e36:	1c14      	adds	r4, r2, #0
    1e38:	0208      	lsls	r0, r1, #8
    1e3a:	d400      	bmi.n	1e3e <__aeabi_dadd+0x1f6>
    1e3c:	e72d      	b.n	1c9a <__aeabi_dadd+0x52>
    1e3e:	4b70      	ldr	r3, [pc, #448]	; (2000 <STACK_SIZE>)
    1e40:	3501      	adds	r5, #1
    1e42:	429d      	cmp	r5, r3
    1e44:	d100      	bne.n	1e48 <__aeabi_dadd+0x200>
    1e46:	e122      	b.n	208e <STACK_SIZE+0x8e>
    1e48:	4b6e      	ldr	r3, [pc, #440]	; (2004 <STACK_SIZE+0x4>)
    1e4a:	0860      	lsrs	r0, r4, #1
    1e4c:	4019      	ands	r1, r3
    1e4e:	2301      	movs	r3, #1
    1e50:	4023      	ands	r3, r4
    1e52:	1c1c      	adds	r4, r3, #0
    1e54:	4304      	orrs	r4, r0
    1e56:	07cb      	lsls	r3, r1, #31
    1e58:	431c      	orrs	r4, r3
    1e5a:	0849      	lsrs	r1, r1, #1
    1e5c:	e71d      	b.n	1c9a <__aeabi_dadd+0x52>
    1e5e:	1c23      	adds	r3, r4, #0
    1e60:	430b      	orrs	r3, r1
    1e62:	d03a      	beq.n	1eda <__aeabi_dadd+0x292>
    1e64:	2380      	movs	r3, #128	; 0x80
    1e66:	031b      	lsls	r3, r3, #12
    1e68:	430b      	orrs	r3, r1
    1e6a:	031b      	lsls	r3, r3, #12
    1e6c:	0b1b      	lsrs	r3, r3, #12
    1e6e:	e735      	b.n	1cdc <__aeabi_dadd+0x94>
    1e70:	3f01      	subs	r7, #1
    1e72:	2f00      	cmp	r7, #0
    1e74:	d165      	bne.n	1f42 <__aeabi_dadd+0x2fa>
    1e76:	4658      	mov	r0, fp
    1e78:	1a22      	subs	r2, r4, r0
    1e7a:	4294      	cmp	r4, r2
    1e7c:	41a4      	sbcs	r4, r4
    1e7e:	4264      	negs	r4, r4
    1e80:	1ac9      	subs	r1, r1, r3
    1e82:	1b09      	subs	r1, r1, r4
    1e84:	1c14      	adds	r4, r2, #0
    1e86:	e766      	b.n	1d56 <__aeabi_dadd+0x10e>
    1e88:	4658      	mov	r0, fp
    1e8a:	4318      	orrs	r0, r3
    1e8c:	d100      	bne.n	1e90 <__aeabi_dadd+0x248>
    1e8e:	e704      	b.n	1c9a <__aeabi_dadd+0x52>
    1e90:	2201      	movs	r2, #1
    1e92:	4252      	negs	r2, r2
    1e94:	4494      	add	ip, r2
    1e96:	4660      	mov	r0, ip
    1e98:	2800      	cmp	r0, #0
    1e9a:	d000      	beq.n	1e9e <__aeabi_dadd+0x256>
    1e9c:	e0c5      	b.n	202a <STACK_SIZE+0x2a>
    1e9e:	4658      	mov	r0, fp
    1ea0:	1902      	adds	r2, r0, r4
    1ea2:	e7c3      	b.n	1e2c <__aeabi_dadd+0x1e4>
    1ea4:	2f00      	cmp	r7, #0
    1ea6:	d173      	bne.n	1f90 <__aeabi_dadd+0x348>
    1ea8:	1c68      	adds	r0, r5, #1
    1eaa:	0540      	lsls	r0, r0, #21
    1eac:	0d40      	lsrs	r0, r0, #21
    1eae:	2801      	cmp	r0, #1
    1eb0:	dc00      	bgt.n	1eb4 <__aeabi_dadd+0x26c>
    1eb2:	e0de      	b.n	2072 <STACK_SIZE+0x72>
    1eb4:	465a      	mov	r2, fp
    1eb6:	1aa2      	subs	r2, r4, r2
    1eb8:	4294      	cmp	r4, r2
    1eba:	41bf      	sbcs	r7, r7
    1ebc:	1ac8      	subs	r0, r1, r3
    1ebe:	427f      	negs	r7, r7
    1ec0:	1bc7      	subs	r7, r0, r7
    1ec2:	0238      	lsls	r0, r7, #8
    1ec4:	d400      	bmi.n	1ec8 <__aeabi_dadd+0x280>
    1ec6:	e089      	b.n	1fdc <__aeabi_dadd+0x394>
    1ec8:	465a      	mov	r2, fp
    1eca:	1b14      	subs	r4, r2, r4
    1ecc:	45a3      	cmp	fp, r4
    1ece:	4192      	sbcs	r2, r2
    1ed0:	1a59      	subs	r1, r3, r1
    1ed2:	4252      	negs	r2, r2
    1ed4:	1a8f      	subs	r7, r1, r2
    1ed6:	4666      	mov	r6, ip
    1ed8:	e741      	b.n	1d5e <__aeabi_dadd+0x116>
    1eda:	2300      	movs	r3, #0
    1edc:	2400      	movs	r4, #0
    1ede:	e6fd      	b.n	1cdc <__aeabi_dadd+0x94>
    1ee0:	1c27      	adds	r7, r4, #0
    1ee2:	3828      	subs	r0, #40	; 0x28
    1ee4:	4087      	lsls	r7, r0
    1ee6:	2400      	movs	r4, #0
    1ee8:	4295      	cmp	r5, r2
    1eea:	dc00      	bgt.n	1eee <__aeabi_dadd+0x2a6>
    1eec:	e74c      	b.n	1d88 <__aeabi_dadd+0x140>
    1eee:	4945      	ldr	r1, [pc, #276]	; (2004 <STACK_SIZE+0x4>)
    1ef0:	1aad      	subs	r5, r5, r2
    1ef2:	4039      	ands	r1, r7
    1ef4:	e6d1      	b.n	1c9a <__aeabi_dadd+0x52>
    1ef6:	1c20      	adds	r0, r4, #0
    1ef8:	f001 fb74 	bl	35e4 <__clzsi2>
    1efc:	3020      	adds	r0, #32
    1efe:	e734      	b.n	1d6a <__aeabi_dadd+0x122>
    1f00:	465a      	mov	r2, fp
    1f02:	431a      	orrs	r2, r3
    1f04:	1e53      	subs	r3, r2, #1
    1f06:	419a      	sbcs	r2, r3
    1f08:	b2d2      	uxtb	r2, r2
    1f0a:	2700      	movs	r7, #0
    1f0c:	e71c      	b.n	1d48 <__aeabi_dadd+0x100>
    1f0e:	2a00      	cmp	r2, #0
    1f10:	d000      	beq.n	1f14 <__aeabi_dadd+0x2cc>
    1f12:	e0dc      	b.n	20ce <STACK_SIZE+0xce>
    1f14:	1c68      	adds	r0, r5, #1
    1f16:	0542      	lsls	r2, r0, #21
    1f18:	0d52      	lsrs	r2, r2, #21
    1f1a:	2a01      	cmp	r2, #1
    1f1c:	dc00      	bgt.n	1f20 <__aeabi_dadd+0x2d8>
    1f1e:	e08d      	b.n	203c <STACK_SIZE+0x3c>
    1f20:	4d37      	ldr	r5, [pc, #220]	; (2000 <STACK_SIZE>)
    1f22:	42a8      	cmp	r0, r5
    1f24:	d100      	bne.n	1f28 <__aeabi_dadd+0x2e0>
    1f26:	e0f3      	b.n	2110 <STACK_SIZE+0x110>
    1f28:	465d      	mov	r5, fp
    1f2a:	192a      	adds	r2, r5, r4
    1f2c:	42a2      	cmp	r2, r4
    1f2e:	41a4      	sbcs	r4, r4
    1f30:	4264      	negs	r4, r4
    1f32:	1859      	adds	r1, r3, r1
    1f34:	1909      	adds	r1, r1, r4
    1f36:	07cc      	lsls	r4, r1, #31
    1f38:	0852      	lsrs	r2, r2, #1
    1f3a:	4314      	orrs	r4, r2
    1f3c:	0849      	lsrs	r1, r1, #1
    1f3e:	1c05      	adds	r5, r0, #0
    1f40:	e6ab      	b.n	1c9a <__aeabi_dadd+0x52>
    1f42:	482f      	ldr	r0, [pc, #188]	; (2000 <STACK_SIZE>)
    1f44:	4285      	cmp	r5, r0
    1f46:	d000      	beq.n	1f4a <__aeabi_dadd+0x302>
    1f48:	e6e6      	b.n	1d18 <__aeabi_dadd+0xd0>
    1f4a:	e6a6      	b.n	1c9a <__aeabi_dadd+0x52>
    1f4c:	1c2b      	adds	r3, r5, #0
    1f4e:	3b1f      	subs	r3, #31
    1f50:	1c3a      	adds	r2, r7, #0
    1f52:	40da      	lsrs	r2, r3
    1f54:	1c13      	adds	r3, r2, #0
    1f56:	2920      	cmp	r1, #32
    1f58:	d06c      	beq.n	2034 <STACK_SIZE+0x34>
    1f5a:	223f      	movs	r2, #63	; 0x3f
    1f5c:	1b55      	subs	r5, r2, r5
    1f5e:	40af      	lsls	r7, r5
    1f60:	433c      	orrs	r4, r7
    1f62:	1e60      	subs	r0, r4, #1
    1f64:	4184      	sbcs	r4, r0
    1f66:	431c      	orrs	r4, r3
    1f68:	2100      	movs	r1, #0
    1f6a:	2500      	movs	r5, #0
    1f6c:	e695      	b.n	1c9a <__aeabi_dadd+0x52>
    1f6e:	1c38      	adds	r0, r7, #0
    1f70:	3820      	subs	r0, #32
    1f72:	1c1a      	adds	r2, r3, #0
    1f74:	40c2      	lsrs	r2, r0
    1f76:	1c10      	adds	r0, r2, #0
    1f78:	2f20      	cmp	r7, #32
    1f7a:	d05d      	beq.n	2038 <STACK_SIZE+0x38>
    1f7c:	2240      	movs	r2, #64	; 0x40
    1f7e:	1bd7      	subs	r7, r2, r7
    1f80:	40bb      	lsls	r3, r7
    1f82:	465a      	mov	r2, fp
    1f84:	431a      	orrs	r2, r3
    1f86:	1e53      	subs	r3, r2, #1
    1f88:	419a      	sbcs	r2, r3
    1f8a:	4302      	orrs	r2, r0
    1f8c:	2700      	movs	r7, #0
    1f8e:	e6db      	b.n	1d48 <__aeabi_dadd+0x100>
    1f90:	2d00      	cmp	r5, #0
    1f92:	d03b      	beq.n	200c <STACK_SIZE+0xc>
    1f94:	4d1a      	ldr	r5, [pc, #104]	; (2000 <STACK_SIZE>)
    1f96:	45aa      	cmp	sl, r5
    1f98:	d100      	bne.n	1f9c <__aeabi_dadd+0x354>
    1f9a:	e093      	b.n	20c4 <STACK_SIZE+0xc4>
    1f9c:	2580      	movs	r5, #128	; 0x80
    1f9e:	042d      	lsls	r5, r5, #16
    1fa0:	427f      	negs	r7, r7
    1fa2:	4329      	orrs	r1, r5
    1fa4:	2f38      	cmp	r7, #56	; 0x38
    1fa6:	dd00      	ble.n	1faa <__aeabi_dadd+0x362>
    1fa8:	e0ac      	b.n	2104 <STACK_SIZE+0x104>
    1faa:	2f1f      	cmp	r7, #31
    1fac:	dd00      	ble.n	1fb0 <__aeabi_dadd+0x368>
    1fae:	e129      	b.n	2204 <STACK_SIZE+0x204>
    1fb0:	2520      	movs	r5, #32
    1fb2:	1bed      	subs	r5, r5, r7
    1fb4:	1c08      	adds	r0, r1, #0
    1fb6:	1c26      	adds	r6, r4, #0
    1fb8:	40a8      	lsls	r0, r5
    1fba:	40fe      	lsrs	r6, r7
    1fbc:	40ac      	lsls	r4, r5
    1fbe:	4306      	orrs	r6, r0
    1fc0:	1e65      	subs	r5, r4, #1
    1fc2:	41ac      	sbcs	r4, r5
    1fc4:	4334      	orrs	r4, r6
    1fc6:	40f9      	lsrs	r1, r7
    1fc8:	465d      	mov	r5, fp
    1fca:	1b2c      	subs	r4, r5, r4
    1fcc:	45a3      	cmp	fp, r4
    1fce:	4192      	sbcs	r2, r2
    1fd0:	1a5b      	subs	r3, r3, r1
    1fd2:	4252      	negs	r2, r2
    1fd4:	1a99      	subs	r1, r3, r2
    1fd6:	4655      	mov	r5, sl
    1fd8:	4666      	mov	r6, ip
    1fda:	e6bc      	b.n	1d56 <__aeabi_dadd+0x10e>
    1fdc:	1c13      	adds	r3, r2, #0
    1fde:	433b      	orrs	r3, r7
    1fe0:	1c14      	adds	r4, r2, #0
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	d000      	beq.n	1fe8 <__aeabi_dadd+0x3a0>
    1fe6:	e6ba      	b.n	1d5e <__aeabi_dadd+0x116>
    1fe8:	2700      	movs	r7, #0
    1fea:	2100      	movs	r1, #0
    1fec:	2500      	movs	r5, #0
    1fee:	2400      	movs	r4, #0
    1ff0:	e6e5      	b.n	1dbe <__aeabi_dadd+0x176>
    1ff2:	465a      	mov	r2, fp
    1ff4:	431a      	orrs	r2, r3
    1ff6:	1e53      	subs	r3, r2, #1
    1ff8:	419a      	sbcs	r2, r3
    1ffa:	b2d2      	uxtb	r2, r2
    1ffc:	2300      	movs	r3, #0
    1ffe:	e714      	b.n	1e2a <__aeabi_dadd+0x1e2>
    2000:	000007ff 	.word	0x000007ff
    2004:	ff7fffff 	.word	0xff7fffff
    2008:	800fffff 	.word	0x800fffff
    200c:	1c0d      	adds	r5, r1, #0
    200e:	4325      	orrs	r5, r4
    2010:	d058      	beq.n	20c4 <STACK_SIZE+0xc4>
    2012:	43ff      	mvns	r7, r7
    2014:	2f00      	cmp	r7, #0
    2016:	d151      	bne.n	20bc <STACK_SIZE+0xbc>
    2018:	1b04      	subs	r4, r0, r4
    201a:	45a3      	cmp	fp, r4
    201c:	4192      	sbcs	r2, r2
    201e:	1a59      	subs	r1, r3, r1
    2020:	4252      	negs	r2, r2
    2022:	1a89      	subs	r1, r1, r2
    2024:	4655      	mov	r5, sl
    2026:	4666      	mov	r6, ip
    2028:	e695      	b.n	1d56 <__aeabi_dadd+0x10e>
    202a:	4896      	ldr	r0, [pc, #600]	; (2284 <STACK_SIZE+0x284>)
    202c:	4285      	cmp	r5, r0
    202e:	d000      	beq.n	2032 <STACK_SIZE+0x32>
    2030:	e6de      	b.n	1df0 <__aeabi_dadd+0x1a8>
    2032:	e632      	b.n	1c9a <__aeabi_dadd+0x52>
    2034:	2700      	movs	r7, #0
    2036:	e793      	b.n	1f60 <__aeabi_dadd+0x318>
    2038:	2300      	movs	r3, #0
    203a:	e7a2      	b.n	1f82 <__aeabi_dadd+0x33a>
    203c:	1c08      	adds	r0, r1, #0
    203e:	4320      	orrs	r0, r4
    2040:	2d00      	cmp	r5, #0
    2042:	d000      	beq.n	2046 <STACK_SIZE+0x46>
    2044:	e0c4      	b.n	21d0 <STACK_SIZE+0x1d0>
    2046:	2800      	cmp	r0, #0
    2048:	d100      	bne.n	204c <STACK_SIZE+0x4c>
    204a:	e0f7      	b.n	223c <STACK_SIZE+0x23c>
    204c:	4658      	mov	r0, fp
    204e:	4318      	orrs	r0, r3
    2050:	d100      	bne.n	2054 <STACK_SIZE+0x54>
    2052:	e622      	b.n	1c9a <__aeabi_dadd+0x52>
    2054:	4658      	mov	r0, fp
    2056:	1902      	adds	r2, r0, r4
    2058:	42a2      	cmp	r2, r4
    205a:	41a4      	sbcs	r4, r4
    205c:	4264      	negs	r4, r4
    205e:	1859      	adds	r1, r3, r1
    2060:	1909      	adds	r1, r1, r4
    2062:	1c14      	adds	r4, r2, #0
    2064:	020a      	lsls	r2, r1, #8
    2066:	d400      	bmi.n	206a <STACK_SIZE+0x6a>
    2068:	e617      	b.n	1c9a <__aeabi_dadd+0x52>
    206a:	4b87      	ldr	r3, [pc, #540]	; (2288 <STACK_SIZE+0x288>)
    206c:	2501      	movs	r5, #1
    206e:	4019      	ands	r1, r3
    2070:	e613      	b.n	1c9a <__aeabi_dadd+0x52>
    2072:	1c08      	adds	r0, r1, #0
    2074:	4320      	orrs	r0, r4
    2076:	2d00      	cmp	r5, #0
    2078:	d139      	bne.n	20ee <STACK_SIZE+0xee>
    207a:	2800      	cmp	r0, #0
    207c:	d171      	bne.n	2162 <STACK_SIZE+0x162>
    207e:	4659      	mov	r1, fp
    2080:	4319      	orrs	r1, r3
    2082:	d003      	beq.n	208c <STACK_SIZE+0x8c>
    2084:	1c19      	adds	r1, r3, #0
    2086:	465c      	mov	r4, fp
    2088:	4666      	mov	r6, ip
    208a:	e606      	b.n	1c9a <__aeabi_dadd+0x52>
    208c:	2700      	movs	r7, #0
    208e:	2100      	movs	r1, #0
    2090:	2400      	movs	r4, #0
    2092:	e694      	b.n	1dbe <__aeabi_dadd+0x176>
    2094:	4660      	mov	r0, ip
    2096:	3820      	subs	r0, #32
    2098:	1c1a      	adds	r2, r3, #0
    209a:	40c2      	lsrs	r2, r0
    209c:	4660      	mov	r0, ip
    209e:	4691      	mov	r9, r2
    20a0:	2820      	cmp	r0, #32
    20a2:	d100      	bne.n	20a6 <STACK_SIZE+0xa6>
    20a4:	e0ac      	b.n	2200 <STACK_SIZE+0x200>
    20a6:	2240      	movs	r2, #64	; 0x40
    20a8:	1a12      	subs	r2, r2, r0
    20aa:	4093      	lsls	r3, r2
    20ac:	465a      	mov	r2, fp
    20ae:	431a      	orrs	r2, r3
    20b0:	1e53      	subs	r3, r2, #1
    20b2:	419a      	sbcs	r2, r3
    20b4:	464b      	mov	r3, r9
    20b6:	431a      	orrs	r2, r3
    20b8:	2300      	movs	r3, #0
    20ba:	e6b6      	b.n	1e2a <__aeabi_dadd+0x1e2>
    20bc:	4d71      	ldr	r5, [pc, #452]	; (2284 <STACK_SIZE+0x284>)
    20be:	45aa      	cmp	sl, r5
    20c0:	d000      	beq.n	20c4 <STACK_SIZE+0xc4>
    20c2:	e76f      	b.n	1fa4 <__aeabi_dadd+0x35c>
    20c4:	1c19      	adds	r1, r3, #0
    20c6:	465c      	mov	r4, fp
    20c8:	4655      	mov	r5, sl
    20ca:	4666      	mov	r6, ip
    20cc:	e5e5      	b.n	1c9a <__aeabi_dadd+0x52>
    20ce:	2d00      	cmp	r5, #0
    20d0:	d122      	bne.n	2118 <STACK_SIZE+0x118>
    20d2:	1c0d      	adds	r5, r1, #0
    20d4:	4325      	orrs	r5, r4
    20d6:	d077      	beq.n	21c8 <STACK_SIZE+0x1c8>
    20d8:	43d5      	mvns	r5, r2
    20da:	2d00      	cmp	r5, #0
    20dc:	d171      	bne.n	21c2 <STACK_SIZE+0x1c2>
    20de:	445c      	add	r4, fp
    20e0:	455c      	cmp	r4, fp
    20e2:	4192      	sbcs	r2, r2
    20e4:	1859      	adds	r1, r3, r1
    20e6:	4252      	negs	r2, r2
    20e8:	1889      	adds	r1, r1, r2
    20ea:	4655      	mov	r5, sl
    20ec:	e6a4      	b.n	1e38 <__aeabi_dadd+0x1f0>
    20ee:	2800      	cmp	r0, #0
    20f0:	d14d      	bne.n	218e <STACK_SIZE+0x18e>
    20f2:	4659      	mov	r1, fp
    20f4:	4319      	orrs	r1, r3
    20f6:	d100      	bne.n	20fa <STACK_SIZE+0xfa>
    20f8:	e094      	b.n	2224 <STACK_SIZE+0x224>
    20fa:	1c19      	adds	r1, r3, #0
    20fc:	465c      	mov	r4, fp
    20fe:	4666      	mov	r6, ip
    2100:	4d60      	ldr	r5, [pc, #384]	; (2284 <STACK_SIZE+0x284>)
    2102:	e5ca      	b.n	1c9a <__aeabi_dadd+0x52>
    2104:	430c      	orrs	r4, r1
    2106:	1e61      	subs	r1, r4, #1
    2108:	418c      	sbcs	r4, r1
    210a:	b2e4      	uxtb	r4, r4
    210c:	2100      	movs	r1, #0
    210e:	e75b      	b.n	1fc8 <__aeabi_dadd+0x380>
    2110:	1c05      	adds	r5, r0, #0
    2112:	2100      	movs	r1, #0
    2114:	2400      	movs	r4, #0
    2116:	e652      	b.n	1dbe <__aeabi_dadd+0x176>
    2118:	4d5a      	ldr	r5, [pc, #360]	; (2284 <STACK_SIZE+0x284>)
    211a:	45aa      	cmp	sl, r5
    211c:	d054      	beq.n	21c8 <STACK_SIZE+0x1c8>
    211e:	4255      	negs	r5, r2
    2120:	2280      	movs	r2, #128	; 0x80
    2122:	0410      	lsls	r0, r2, #16
    2124:	4301      	orrs	r1, r0
    2126:	2d38      	cmp	r5, #56	; 0x38
    2128:	dd00      	ble.n	212c <STACK_SIZE+0x12c>
    212a:	e081      	b.n	2230 <STACK_SIZE+0x230>
    212c:	2d1f      	cmp	r5, #31
    212e:	dd00      	ble.n	2132 <STACK_SIZE+0x132>
    2130:	e092      	b.n	2258 <STACK_SIZE+0x258>
    2132:	2220      	movs	r2, #32
    2134:	1b50      	subs	r0, r2, r5
    2136:	1c0a      	adds	r2, r1, #0
    2138:	4684      	mov	ip, r0
    213a:	4082      	lsls	r2, r0
    213c:	1c20      	adds	r0, r4, #0
    213e:	40e8      	lsrs	r0, r5
    2140:	4302      	orrs	r2, r0
    2142:	4690      	mov	r8, r2
    2144:	4662      	mov	r2, ip
    2146:	4094      	lsls	r4, r2
    2148:	1e60      	subs	r0, r4, #1
    214a:	4184      	sbcs	r4, r0
    214c:	4642      	mov	r2, r8
    214e:	4314      	orrs	r4, r2
    2150:	40e9      	lsrs	r1, r5
    2152:	445c      	add	r4, fp
    2154:	455c      	cmp	r4, fp
    2156:	4192      	sbcs	r2, r2
    2158:	18cb      	adds	r3, r1, r3
    215a:	4252      	negs	r2, r2
    215c:	1899      	adds	r1, r3, r2
    215e:	4655      	mov	r5, sl
    2160:	e66a      	b.n	1e38 <__aeabi_dadd+0x1f0>
    2162:	4658      	mov	r0, fp
    2164:	4318      	orrs	r0, r3
    2166:	d100      	bne.n	216a <STACK_SIZE+0x16a>
    2168:	e597      	b.n	1c9a <__aeabi_dadd+0x52>
    216a:	4658      	mov	r0, fp
    216c:	1a27      	subs	r7, r4, r0
    216e:	42bc      	cmp	r4, r7
    2170:	4192      	sbcs	r2, r2
    2172:	1ac8      	subs	r0, r1, r3
    2174:	4252      	negs	r2, r2
    2176:	1a80      	subs	r0, r0, r2
    2178:	0202      	lsls	r2, r0, #8
    217a:	d566      	bpl.n	224a <STACK_SIZE+0x24a>
    217c:	4658      	mov	r0, fp
    217e:	1b04      	subs	r4, r0, r4
    2180:	45a3      	cmp	fp, r4
    2182:	4192      	sbcs	r2, r2
    2184:	1a59      	subs	r1, r3, r1
    2186:	4252      	negs	r2, r2
    2188:	1a89      	subs	r1, r1, r2
    218a:	4666      	mov	r6, ip
    218c:	e585      	b.n	1c9a <__aeabi_dadd+0x52>
    218e:	4658      	mov	r0, fp
    2190:	4318      	orrs	r0, r3
    2192:	d033      	beq.n	21fc <STACK_SIZE+0x1fc>
    2194:	0748      	lsls	r0, r1, #29
    2196:	08e4      	lsrs	r4, r4, #3
    2198:	4304      	orrs	r4, r0
    219a:	2080      	movs	r0, #128	; 0x80
    219c:	08c9      	lsrs	r1, r1, #3
    219e:	0300      	lsls	r0, r0, #12
    21a0:	4201      	tst	r1, r0
    21a2:	d008      	beq.n	21b6 <STACK_SIZE+0x1b6>
    21a4:	08dd      	lsrs	r5, r3, #3
    21a6:	4205      	tst	r5, r0
    21a8:	d105      	bne.n	21b6 <STACK_SIZE+0x1b6>
    21aa:	4659      	mov	r1, fp
    21ac:	08ca      	lsrs	r2, r1, #3
    21ae:	075c      	lsls	r4, r3, #29
    21b0:	4314      	orrs	r4, r2
    21b2:	1c29      	adds	r1, r5, #0
    21b4:	4666      	mov	r6, ip
    21b6:	0f63      	lsrs	r3, r4, #29
    21b8:	00c9      	lsls	r1, r1, #3
    21ba:	4319      	orrs	r1, r3
    21bc:	00e4      	lsls	r4, r4, #3
    21be:	4d31      	ldr	r5, [pc, #196]	; (2284 <STACK_SIZE+0x284>)
    21c0:	e56b      	b.n	1c9a <__aeabi_dadd+0x52>
    21c2:	4a30      	ldr	r2, [pc, #192]	; (2284 <STACK_SIZE+0x284>)
    21c4:	4592      	cmp	sl, r2
    21c6:	d1ae      	bne.n	2126 <STACK_SIZE+0x126>
    21c8:	1c19      	adds	r1, r3, #0
    21ca:	465c      	mov	r4, fp
    21cc:	4655      	mov	r5, sl
    21ce:	e564      	b.n	1c9a <__aeabi_dadd+0x52>
    21d0:	2800      	cmp	r0, #0
    21d2:	d036      	beq.n	2242 <STACK_SIZE+0x242>
    21d4:	4658      	mov	r0, fp
    21d6:	4318      	orrs	r0, r3
    21d8:	d010      	beq.n	21fc <STACK_SIZE+0x1fc>
    21da:	2580      	movs	r5, #128	; 0x80
    21dc:	0748      	lsls	r0, r1, #29
    21de:	08e4      	lsrs	r4, r4, #3
    21e0:	08c9      	lsrs	r1, r1, #3
    21e2:	032d      	lsls	r5, r5, #12
    21e4:	4304      	orrs	r4, r0
    21e6:	4229      	tst	r1, r5
    21e8:	d0e5      	beq.n	21b6 <STACK_SIZE+0x1b6>
    21ea:	08d8      	lsrs	r0, r3, #3
    21ec:	4228      	tst	r0, r5
    21ee:	d1e2      	bne.n	21b6 <STACK_SIZE+0x1b6>
    21f0:	465d      	mov	r5, fp
    21f2:	08ea      	lsrs	r2, r5, #3
    21f4:	075c      	lsls	r4, r3, #29
    21f6:	4314      	orrs	r4, r2
    21f8:	1c01      	adds	r1, r0, #0
    21fa:	e7dc      	b.n	21b6 <STACK_SIZE+0x1b6>
    21fc:	4d21      	ldr	r5, [pc, #132]	; (2284 <STACK_SIZE+0x284>)
    21fe:	e54c      	b.n	1c9a <__aeabi_dadd+0x52>
    2200:	2300      	movs	r3, #0
    2202:	e753      	b.n	20ac <STACK_SIZE+0xac>
    2204:	1c3d      	adds	r5, r7, #0
    2206:	3d20      	subs	r5, #32
    2208:	1c0a      	adds	r2, r1, #0
    220a:	40ea      	lsrs	r2, r5
    220c:	1c15      	adds	r5, r2, #0
    220e:	2f20      	cmp	r7, #32
    2210:	d034      	beq.n	227c <STACK_SIZE+0x27c>
    2212:	2640      	movs	r6, #64	; 0x40
    2214:	1bf7      	subs	r7, r6, r7
    2216:	40b9      	lsls	r1, r7
    2218:	430c      	orrs	r4, r1
    221a:	1e61      	subs	r1, r4, #1
    221c:	418c      	sbcs	r4, r1
    221e:	432c      	orrs	r4, r5
    2220:	2100      	movs	r1, #0
    2222:	e6d1      	b.n	1fc8 <__aeabi_dadd+0x380>
    2224:	2180      	movs	r1, #128	; 0x80
    2226:	2700      	movs	r7, #0
    2228:	03c9      	lsls	r1, r1, #15
    222a:	4d16      	ldr	r5, [pc, #88]	; (2284 <STACK_SIZE+0x284>)
    222c:	2400      	movs	r4, #0
    222e:	e5c6      	b.n	1dbe <__aeabi_dadd+0x176>
    2230:	430c      	orrs	r4, r1
    2232:	1e61      	subs	r1, r4, #1
    2234:	418c      	sbcs	r4, r1
    2236:	b2e4      	uxtb	r4, r4
    2238:	2100      	movs	r1, #0
    223a:	e78a      	b.n	2152 <STACK_SIZE+0x152>
    223c:	1c19      	adds	r1, r3, #0
    223e:	465c      	mov	r4, fp
    2240:	e52b      	b.n	1c9a <__aeabi_dadd+0x52>
    2242:	1c19      	adds	r1, r3, #0
    2244:	465c      	mov	r4, fp
    2246:	4d0f      	ldr	r5, [pc, #60]	; (2284 <STACK_SIZE+0x284>)
    2248:	e527      	b.n	1c9a <__aeabi_dadd+0x52>
    224a:	1c03      	adds	r3, r0, #0
    224c:	433b      	orrs	r3, r7
    224e:	d100      	bne.n	2252 <STACK_SIZE+0x252>
    2250:	e71c      	b.n	208c <STACK_SIZE+0x8c>
    2252:	1c01      	adds	r1, r0, #0
    2254:	1c3c      	adds	r4, r7, #0
    2256:	e520      	b.n	1c9a <__aeabi_dadd+0x52>
    2258:	2020      	movs	r0, #32
    225a:	4240      	negs	r0, r0
    225c:	1940      	adds	r0, r0, r5
    225e:	1c0a      	adds	r2, r1, #0
    2260:	40c2      	lsrs	r2, r0
    2262:	4690      	mov	r8, r2
    2264:	2d20      	cmp	r5, #32
    2266:	d00b      	beq.n	2280 <STACK_SIZE+0x280>
    2268:	2040      	movs	r0, #64	; 0x40
    226a:	1b45      	subs	r5, r0, r5
    226c:	40a9      	lsls	r1, r5
    226e:	430c      	orrs	r4, r1
    2270:	1e61      	subs	r1, r4, #1
    2272:	418c      	sbcs	r4, r1
    2274:	4645      	mov	r5, r8
    2276:	432c      	orrs	r4, r5
    2278:	2100      	movs	r1, #0
    227a:	e76a      	b.n	2152 <STACK_SIZE+0x152>
    227c:	2100      	movs	r1, #0
    227e:	e7cb      	b.n	2218 <STACK_SIZE+0x218>
    2280:	2100      	movs	r1, #0
    2282:	e7f4      	b.n	226e <STACK_SIZE+0x26e>
    2284:	000007ff 	.word	0x000007ff
    2288:	ff7fffff 	.word	0xff7fffff

0000228c <__aeabi_ddiv>:
    228c:	b5f0      	push	{r4, r5, r6, r7, lr}
    228e:	4656      	mov	r6, sl
    2290:	4644      	mov	r4, r8
    2292:	465f      	mov	r7, fp
    2294:	464d      	mov	r5, r9
    2296:	b4f0      	push	{r4, r5, r6, r7}
    2298:	1c1f      	adds	r7, r3, #0
    229a:	030b      	lsls	r3, r1, #12
    229c:	0b1b      	lsrs	r3, r3, #12
    229e:	4698      	mov	r8, r3
    22a0:	004b      	lsls	r3, r1, #1
    22a2:	b087      	sub	sp, #28
    22a4:	1c04      	adds	r4, r0, #0
    22a6:	4681      	mov	r9, r0
    22a8:	0d5b      	lsrs	r3, r3, #21
    22aa:	0fc8      	lsrs	r0, r1, #31
    22ac:	1c16      	adds	r6, r2, #0
    22ae:	469a      	mov	sl, r3
    22b0:	9000      	str	r0, [sp, #0]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d051      	beq.n	235a <__aeabi_ddiv+0xce>
    22b6:	4b6a      	ldr	r3, [pc, #424]	; (2460 <__aeabi_ddiv+0x1d4>)
    22b8:	459a      	cmp	sl, r3
    22ba:	d031      	beq.n	2320 <__aeabi_ddiv+0x94>
    22bc:	2280      	movs	r2, #128	; 0x80
    22be:	4641      	mov	r1, r8
    22c0:	0352      	lsls	r2, r2, #13
    22c2:	430a      	orrs	r2, r1
    22c4:	0f63      	lsrs	r3, r4, #29
    22c6:	00d2      	lsls	r2, r2, #3
    22c8:	431a      	orrs	r2, r3
    22ca:	4b66      	ldr	r3, [pc, #408]	; (2464 <__aeabi_ddiv+0x1d8>)
    22cc:	4690      	mov	r8, r2
    22ce:	2500      	movs	r5, #0
    22d0:	00e2      	lsls	r2, r4, #3
    22d2:	4691      	mov	r9, r2
    22d4:	449a      	add	sl, r3
    22d6:	2400      	movs	r4, #0
    22d8:	9502      	str	r5, [sp, #8]
    22da:	033b      	lsls	r3, r7, #12
    22dc:	0b1b      	lsrs	r3, r3, #12
    22de:	469b      	mov	fp, r3
    22e0:	0ffd      	lsrs	r5, r7, #31
    22e2:	007b      	lsls	r3, r7, #1
    22e4:	1c31      	adds	r1, r6, #0
    22e6:	0d5b      	lsrs	r3, r3, #21
    22e8:	9501      	str	r5, [sp, #4]
    22ea:	d060      	beq.n	23ae <__aeabi_ddiv+0x122>
    22ec:	4a5c      	ldr	r2, [pc, #368]	; (2460 <__aeabi_ddiv+0x1d4>)
    22ee:	4293      	cmp	r3, r2
    22f0:	d054      	beq.n	239c <__aeabi_ddiv+0x110>
    22f2:	2180      	movs	r1, #128	; 0x80
    22f4:	4658      	mov	r0, fp
    22f6:	0349      	lsls	r1, r1, #13
    22f8:	4301      	orrs	r1, r0
    22fa:	0f72      	lsrs	r2, r6, #29
    22fc:	00c9      	lsls	r1, r1, #3
    22fe:	4311      	orrs	r1, r2
    2300:	4a58      	ldr	r2, [pc, #352]	; (2464 <__aeabi_ddiv+0x1d8>)
    2302:	468b      	mov	fp, r1
    2304:	189b      	adds	r3, r3, r2
    2306:	00f1      	lsls	r1, r6, #3
    2308:	2000      	movs	r0, #0
    230a:	9a00      	ldr	r2, [sp, #0]
    230c:	4304      	orrs	r4, r0
    230e:	406a      	eors	r2, r5
    2310:	9203      	str	r2, [sp, #12]
    2312:	2c0f      	cmp	r4, #15
    2314:	d900      	bls.n	2318 <__aeabi_ddiv+0x8c>
    2316:	e0ad      	b.n	2474 <__aeabi_ddiv+0x1e8>
    2318:	4e53      	ldr	r6, [pc, #332]	; (2468 <__aeabi_ddiv+0x1dc>)
    231a:	00a4      	lsls	r4, r4, #2
    231c:	5934      	ldr	r4, [r6, r4]
    231e:	46a7      	mov	pc, r4
    2320:	4640      	mov	r0, r8
    2322:	4304      	orrs	r4, r0
    2324:	d16e      	bne.n	2404 <__aeabi_ddiv+0x178>
    2326:	2100      	movs	r1, #0
    2328:	2502      	movs	r5, #2
    232a:	2408      	movs	r4, #8
    232c:	4688      	mov	r8, r1
    232e:	4689      	mov	r9, r1
    2330:	9502      	str	r5, [sp, #8]
    2332:	e7d2      	b.n	22da <__aeabi_ddiv+0x4e>
    2334:	9c00      	ldr	r4, [sp, #0]
    2336:	9802      	ldr	r0, [sp, #8]
    2338:	46c3      	mov	fp, r8
    233a:	4649      	mov	r1, r9
    233c:	9401      	str	r4, [sp, #4]
    233e:	2802      	cmp	r0, #2
    2340:	d064      	beq.n	240c <__aeabi_ddiv+0x180>
    2342:	2803      	cmp	r0, #3
    2344:	d100      	bne.n	2348 <__aeabi_ddiv+0xbc>
    2346:	e2ab      	b.n	28a0 <__aeabi_ddiv+0x614>
    2348:	2801      	cmp	r0, #1
    234a:	d000      	beq.n	234e <__aeabi_ddiv+0xc2>
    234c:	e238      	b.n	27c0 <__aeabi_ddiv+0x534>
    234e:	9a01      	ldr	r2, [sp, #4]
    2350:	2400      	movs	r4, #0
    2352:	4002      	ands	r2, r0
    2354:	2500      	movs	r5, #0
    2356:	46a1      	mov	r9, r4
    2358:	e060      	b.n	241c <__aeabi_ddiv+0x190>
    235a:	4643      	mov	r3, r8
    235c:	4323      	orrs	r3, r4
    235e:	d04a      	beq.n	23f6 <__aeabi_ddiv+0x16a>
    2360:	4640      	mov	r0, r8
    2362:	2800      	cmp	r0, #0
    2364:	d100      	bne.n	2368 <__aeabi_ddiv+0xdc>
    2366:	e1c0      	b.n	26ea <__aeabi_ddiv+0x45e>
    2368:	f001 f93c 	bl	35e4 <__clzsi2>
    236c:	1e03      	subs	r3, r0, #0
    236e:	2b27      	cmp	r3, #39	; 0x27
    2370:	dd00      	ble.n	2374 <__aeabi_ddiv+0xe8>
    2372:	e1b3      	b.n	26dc <__aeabi_ddiv+0x450>
    2374:	2128      	movs	r1, #40	; 0x28
    2376:	1a0d      	subs	r5, r1, r0
    2378:	1c21      	adds	r1, r4, #0
    237a:	3b08      	subs	r3, #8
    237c:	4642      	mov	r2, r8
    237e:	40e9      	lsrs	r1, r5
    2380:	409a      	lsls	r2, r3
    2382:	1c0d      	adds	r5, r1, #0
    2384:	4315      	orrs	r5, r2
    2386:	1c22      	adds	r2, r4, #0
    2388:	409a      	lsls	r2, r3
    238a:	46a8      	mov	r8, r5
    238c:	4691      	mov	r9, r2
    238e:	4b37      	ldr	r3, [pc, #220]	; (246c <__aeabi_ddiv+0x1e0>)
    2390:	2500      	movs	r5, #0
    2392:	1a1b      	subs	r3, r3, r0
    2394:	469a      	mov	sl, r3
    2396:	2400      	movs	r4, #0
    2398:	9502      	str	r5, [sp, #8]
    239a:	e79e      	b.n	22da <__aeabi_ddiv+0x4e>
    239c:	465a      	mov	r2, fp
    239e:	4316      	orrs	r6, r2
    23a0:	2003      	movs	r0, #3
    23a2:	2e00      	cmp	r6, #0
    23a4:	d1b1      	bne.n	230a <__aeabi_ddiv+0x7e>
    23a6:	46b3      	mov	fp, r6
    23a8:	2100      	movs	r1, #0
    23aa:	2002      	movs	r0, #2
    23ac:	e7ad      	b.n	230a <__aeabi_ddiv+0x7e>
    23ae:	465a      	mov	r2, fp
    23b0:	4332      	orrs	r2, r6
    23b2:	d01b      	beq.n	23ec <__aeabi_ddiv+0x160>
    23b4:	465b      	mov	r3, fp
    23b6:	2b00      	cmp	r3, #0
    23b8:	d100      	bne.n	23bc <__aeabi_ddiv+0x130>
    23ba:	e18a      	b.n	26d2 <__aeabi_ddiv+0x446>
    23bc:	4658      	mov	r0, fp
    23be:	f001 f911 	bl	35e4 <__clzsi2>
    23c2:	2827      	cmp	r0, #39	; 0x27
    23c4:	dd00      	ble.n	23c8 <__aeabi_ddiv+0x13c>
    23c6:	e17d      	b.n	26c4 <__aeabi_ddiv+0x438>
    23c8:	2228      	movs	r2, #40	; 0x28
    23ca:	1a17      	subs	r7, r2, r0
    23cc:	1c01      	adds	r1, r0, #0
    23ce:	1c32      	adds	r2, r6, #0
    23d0:	3908      	subs	r1, #8
    23d2:	465b      	mov	r3, fp
    23d4:	40fa      	lsrs	r2, r7
    23d6:	408b      	lsls	r3, r1
    23d8:	1c17      	adds	r7, r2, #0
    23da:	431f      	orrs	r7, r3
    23dc:	1c33      	adds	r3, r6, #0
    23de:	408b      	lsls	r3, r1
    23e0:	46bb      	mov	fp, r7
    23e2:	1c19      	adds	r1, r3, #0
    23e4:	4b21      	ldr	r3, [pc, #132]	; (246c <__aeabi_ddiv+0x1e0>)
    23e6:	1a1b      	subs	r3, r3, r0
    23e8:	2000      	movs	r0, #0
    23ea:	e78e      	b.n	230a <__aeabi_ddiv+0x7e>
    23ec:	2700      	movs	r7, #0
    23ee:	46bb      	mov	fp, r7
    23f0:	2100      	movs	r1, #0
    23f2:	2001      	movs	r0, #1
    23f4:	e789      	b.n	230a <__aeabi_ddiv+0x7e>
    23f6:	2000      	movs	r0, #0
    23f8:	2501      	movs	r5, #1
    23fa:	2404      	movs	r4, #4
    23fc:	4680      	mov	r8, r0
    23fe:	4681      	mov	r9, r0
    2400:	9502      	str	r5, [sp, #8]
    2402:	e76a      	b.n	22da <__aeabi_ddiv+0x4e>
    2404:	2503      	movs	r5, #3
    2406:	240c      	movs	r4, #12
    2408:	9502      	str	r5, [sp, #8]
    240a:	e766      	b.n	22da <__aeabi_ddiv+0x4e>
    240c:	9c01      	ldr	r4, [sp, #4]
    240e:	9403      	str	r4, [sp, #12]
    2410:	9d03      	ldr	r5, [sp, #12]
    2412:	2201      	movs	r2, #1
    2414:	402a      	ands	r2, r5
    2416:	2400      	movs	r4, #0
    2418:	4d11      	ldr	r5, [pc, #68]	; (2460 <__aeabi_ddiv+0x1d4>)
    241a:	46a1      	mov	r9, r4
    241c:	2000      	movs	r0, #0
    241e:	2100      	movs	r1, #0
    2420:	0324      	lsls	r4, r4, #12
    2422:	0b26      	lsrs	r6, r4, #12
    2424:	0d0c      	lsrs	r4, r1, #20
    2426:	0524      	lsls	r4, r4, #20
    2428:	4b11      	ldr	r3, [pc, #68]	; (2470 <__aeabi_ddiv+0x1e4>)
    242a:	4334      	orrs	r4, r6
    242c:	052d      	lsls	r5, r5, #20
    242e:	4023      	ands	r3, r4
    2430:	432b      	orrs	r3, r5
    2432:	005b      	lsls	r3, r3, #1
    2434:	085b      	lsrs	r3, r3, #1
    2436:	07d2      	lsls	r2, r2, #31
    2438:	1c19      	adds	r1, r3, #0
    243a:	4648      	mov	r0, r9
    243c:	4311      	orrs	r1, r2
    243e:	b007      	add	sp, #28
    2440:	bc3c      	pop	{r2, r3, r4, r5}
    2442:	4690      	mov	r8, r2
    2444:	4699      	mov	r9, r3
    2446:	46a2      	mov	sl, r4
    2448:	46ab      	mov	fp, r5
    244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    244c:	2200      	movs	r2, #0
    244e:	2480      	movs	r4, #128	; 0x80
    2450:	0324      	lsls	r4, r4, #12
    2452:	4691      	mov	r9, r2
    2454:	4d02      	ldr	r5, [pc, #8]	; (2460 <__aeabi_ddiv+0x1d4>)
    2456:	e7e1      	b.n	241c <__aeabi_ddiv+0x190>
    2458:	2400      	movs	r4, #0
    245a:	2500      	movs	r5, #0
    245c:	46a1      	mov	r9, r4
    245e:	e7dd      	b.n	241c <__aeabi_ddiv+0x190>
    2460:	000007ff 	.word	0x000007ff
    2464:	fffffc01 	.word	0xfffffc01
    2468:	000049d0 	.word	0x000049d0
    246c:	fffffc0d 	.word	0xfffffc0d
    2470:	800fffff 	.word	0x800fffff
    2474:	4655      	mov	r5, sl
    2476:	1aed      	subs	r5, r5, r3
    2478:	9504      	str	r5, [sp, #16]
    247a:	45d8      	cmp	r8, fp
    247c:	d900      	bls.n	2480 <__aeabi_ddiv+0x1f4>
    247e:	e153      	b.n	2728 <__aeabi_ddiv+0x49c>
    2480:	d100      	bne.n	2484 <__aeabi_ddiv+0x1f8>
    2482:	e14e      	b.n	2722 <__aeabi_ddiv+0x496>
    2484:	9c04      	ldr	r4, [sp, #16]
    2486:	2500      	movs	r5, #0
    2488:	3c01      	subs	r4, #1
    248a:	464e      	mov	r6, r9
    248c:	9404      	str	r4, [sp, #16]
    248e:	4647      	mov	r7, r8
    2490:	46a9      	mov	r9, r5
    2492:	4658      	mov	r0, fp
    2494:	0203      	lsls	r3, r0, #8
    2496:	0e0c      	lsrs	r4, r1, #24
    2498:	431c      	orrs	r4, r3
    249a:	0209      	lsls	r1, r1, #8
    249c:	0c25      	lsrs	r5, r4, #16
    249e:	0423      	lsls	r3, r4, #16
    24a0:	0c1b      	lsrs	r3, r3, #16
    24a2:	9100      	str	r1, [sp, #0]
    24a4:	1c38      	adds	r0, r7, #0
    24a6:	1c29      	adds	r1, r5, #0
    24a8:	9301      	str	r3, [sp, #4]
    24aa:	f7ff fae9 	bl	1a80 <__aeabi_uidiv>
    24ae:	9901      	ldr	r1, [sp, #4]
    24b0:	4683      	mov	fp, r0
    24b2:	4341      	muls	r1, r0
    24b4:	1c38      	adds	r0, r7, #0
    24b6:	468a      	mov	sl, r1
    24b8:	1c29      	adds	r1, r5, #0
    24ba:	f7ff fb25 	bl	1b08 <__aeabi_uidivmod>
    24be:	0c33      	lsrs	r3, r6, #16
    24c0:	0409      	lsls	r1, r1, #16
    24c2:	4319      	orrs	r1, r3
    24c4:	458a      	cmp	sl, r1
    24c6:	d90c      	bls.n	24e2 <__aeabi_ddiv+0x256>
    24c8:	465b      	mov	r3, fp
    24ca:	1909      	adds	r1, r1, r4
    24cc:	3b01      	subs	r3, #1
    24ce:	428c      	cmp	r4, r1
    24d0:	d900      	bls.n	24d4 <__aeabi_ddiv+0x248>
    24d2:	e147      	b.n	2764 <__aeabi_ddiv+0x4d8>
    24d4:	458a      	cmp	sl, r1
    24d6:	d800      	bhi.n	24da <__aeabi_ddiv+0x24e>
    24d8:	e144      	b.n	2764 <__aeabi_ddiv+0x4d8>
    24da:	2202      	movs	r2, #2
    24dc:	4252      	negs	r2, r2
    24de:	4493      	add	fp, r2
    24e0:	1909      	adds	r1, r1, r4
    24e2:	4653      	mov	r3, sl
    24e4:	1acb      	subs	r3, r1, r3
    24e6:	1c18      	adds	r0, r3, #0
    24e8:	1c29      	adds	r1, r5, #0
    24ea:	4698      	mov	r8, r3
    24ec:	f7ff fac8 	bl	1a80 <__aeabi_uidiv>
    24f0:	1c07      	adds	r7, r0, #0
    24f2:	9801      	ldr	r0, [sp, #4]
    24f4:	1c29      	adds	r1, r5, #0
    24f6:	4378      	muls	r0, r7
    24f8:	4682      	mov	sl, r0
    24fa:	4640      	mov	r0, r8
    24fc:	f7ff fb04 	bl	1b08 <__aeabi_uidivmod>
    2500:	0436      	lsls	r6, r6, #16
    2502:	040b      	lsls	r3, r1, #16
    2504:	0c36      	lsrs	r6, r6, #16
    2506:	4333      	orrs	r3, r6
    2508:	459a      	cmp	sl, r3
    250a:	d909      	bls.n	2520 <__aeabi_ddiv+0x294>
    250c:	191b      	adds	r3, r3, r4
    250e:	1e7a      	subs	r2, r7, #1
    2510:	429c      	cmp	r4, r3
    2512:	d900      	bls.n	2516 <__aeabi_ddiv+0x28a>
    2514:	e124      	b.n	2760 <__aeabi_ddiv+0x4d4>
    2516:	459a      	cmp	sl, r3
    2518:	d800      	bhi.n	251c <__aeabi_ddiv+0x290>
    251a:	e121      	b.n	2760 <__aeabi_ddiv+0x4d4>
    251c:	3f02      	subs	r7, #2
    251e:	191b      	adds	r3, r3, r4
    2520:	465e      	mov	r6, fp
    2522:	0432      	lsls	r2, r6, #16
    2524:	4317      	orrs	r7, r2
    2526:	0c38      	lsrs	r0, r7, #16
    2528:	46bb      	mov	fp, r7
    252a:	9e00      	ldr	r6, [sp, #0]
    252c:	9f00      	ldr	r7, [sp, #0]
    252e:	4651      	mov	r1, sl
    2530:	0c3f      	lsrs	r7, r7, #16
    2532:	0432      	lsls	r2, r6, #16
    2534:	1a5b      	subs	r3, r3, r1
    2536:	4659      	mov	r1, fp
    2538:	46ba      	mov	sl, r7
    253a:	0c12      	lsrs	r2, r2, #16
    253c:	040f      	lsls	r7, r1, #16
    253e:	0c3f      	lsrs	r7, r7, #16
    2540:	4690      	mov	r8, r2
    2542:	4651      	mov	r1, sl
    2544:	437a      	muls	r2, r7
    2546:	434f      	muls	r7, r1
    2548:	4641      	mov	r1, r8
    254a:	4341      	muls	r1, r0
    254c:	4656      	mov	r6, sl
    254e:	4370      	muls	r0, r6
    2550:	19cf      	adds	r7, r1, r7
    2552:	0c16      	lsrs	r6, r2, #16
    2554:	19be      	adds	r6, r7, r6
    2556:	42b1      	cmp	r1, r6
    2558:	d902      	bls.n	2560 <__aeabi_ddiv+0x2d4>
    255a:	2780      	movs	r7, #128	; 0x80
    255c:	027f      	lsls	r7, r7, #9
    255e:	19c0      	adds	r0, r0, r7
    2560:	0c31      	lsrs	r1, r6, #16
    2562:	0412      	lsls	r2, r2, #16
    2564:	0436      	lsls	r6, r6, #16
    2566:	0c12      	lsrs	r2, r2, #16
    2568:	1840      	adds	r0, r0, r1
    256a:	18b6      	adds	r6, r6, r2
    256c:	4283      	cmp	r3, r0
    256e:	d200      	bcs.n	2572 <__aeabi_ddiv+0x2e6>
    2570:	e0c4      	b.n	26fc <__aeabi_ddiv+0x470>
    2572:	d100      	bne.n	2576 <__aeabi_ddiv+0x2ea>
    2574:	e0be      	b.n	26f4 <__aeabi_ddiv+0x468>
    2576:	1a19      	subs	r1, r3, r0
    2578:	4648      	mov	r0, r9
    257a:	1b86      	subs	r6, r0, r6
    257c:	45b1      	cmp	r9, r6
    257e:	41bf      	sbcs	r7, r7
    2580:	427f      	negs	r7, r7
    2582:	1bcf      	subs	r7, r1, r7
    2584:	42a7      	cmp	r7, r4
    2586:	d100      	bne.n	258a <__aeabi_ddiv+0x2fe>
    2588:	e113      	b.n	27b2 <__aeabi_ddiv+0x526>
    258a:	1c29      	adds	r1, r5, #0
    258c:	1c38      	adds	r0, r7, #0
    258e:	f7ff fa77 	bl	1a80 <__aeabi_uidiv>
    2592:	9901      	ldr	r1, [sp, #4]
    2594:	9002      	str	r0, [sp, #8]
    2596:	4341      	muls	r1, r0
    2598:	1c38      	adds	r0, r7, #0
    259a:	4689      	mov	r9, r1
    259c:	1c29      	adds	r1, r5, #0
    259e:	f7ff fab3 	bl	1b08 <__aeabi_uidivmod>
    25a2:	0c33      	lsrs	r3, r6, #16
    25a4:	0409      	lsls	r1, r1, #16
    25a6:	4319      	orrs	r1, r3
    25a8:	4589      	cmp	r9, r1
    25aa:	d90c      	bls.n	25c6 <__aeabi_ddiv+0x33a>
    25ac:	9b02      	ldr	r3, [sp, #8]
    25ae:	1909      	adds	r1, r1, r4
    25b0:	3b01      	subs	r3, #1
    25b2:	428c      	cmp	r4, r1
    25b4:	d900      	bls.n	25b8 <__aeabi_ddiv+0x32c>
    25b6:	e0ff      	b.n	27b8 <__aeabi_ddiv+0x52c>
    25b8:	4589      	cmp	r9, r1
    25ba:	d800      	bhi.n	25be <__aeabi_ddiv+0x332>
    25bc:	e0fc      	b.n	27b8 <__aeabi_ddiv+0x52c>
    25be:	9f02      	ldr	r7, [sp, #8]
    25c0:	1909      	adds	r1, r1, r4
    25c2:	3f02      	subs	r7, #2
    25c4:	9702      	str	r7, [sp, #8]
    25c6:	464f      	mov	r7, r9
    25c8:	1bcf      	subs	r7, r1, r7
    25ca:	1c38      	adds	r0, r7, #0
    25cc:	1c29      	adds	r1, r5, #0
    25ce:	9705      	str	r7, [sp, #20]
    25d0:	f7ff fa56 	bl	1a80 <__aeabi_uidiv>
    25d4:	1c07      	adds	r7, r0, #0
    25d6:	9801      	ldr	r0, [sp, #4]
    25d8:	1c29      	adds	r1, r5, #0
    25da:	4378      	muls	r0, r7
    25dc:	4681      	mov	r9, r0
    25de:	9805      	ldr	r0, [sp, #20]
    25e0:	f7ff fa92 	bl	1b08 <__aeabi_uidivmod>
    25e4:	0436      	lsls	r6, r6, #16
    25e6:	0409      	lsls	r1, r1, #16
    25e8:	0c36      	lsrs	r6, r6, #16
    25ea:	430e      	orrs	r6, r1
    25ec:	45b1      	cmp	r9, r6
    25ee:	d909      	bls.n	2604 <__aeabi_ddiv+0x378>
    25f0:	1936      	adds	r6, r6, r4
    25f2:	1e7b      	subs	r3, r7, #1
    25f4:	42b4      	cmp	r4, r6
    25f6:	d900      	bls.n	25fa <__aeabi_ddiv+0x36e>
    25f8:	e0e0      	b.n	27bc <__aeabi_ddiv+0x530>
    25fa:	45b1      	cmp	r9, r6
    25fc:	d800      	bhi.n	2600 <__aeabi_ddiv+0x374>
    25fe:	e0dd      	b.n	27bc <__aeabi_ddiv+0x530>
    2600:	3f02      	subs	r7, #2
    2602:	1936      	adds	r6, r6, r4
    2604:	9d02      	ldr	r5, [sp, #8]
    2606:	4649      	mov	r1, r9
    2608:	1a76      	subs	r6, r6, r1
    260a:	0429      	lsls	r1, r5, #16
    260c:	4339      	orrs	r1, r7
    260e:	040b      	lsls	r3, r1, #16
    2610:	4657      	mov	r7, sl
    2612:	0c0a      	lsrs	r2, r1, #16
    2614:	0c1b      	lsrs	r3, r3, #16
    2616:	4640      	mov	r0, r8
    2618:	4645      	mov	r5, r8
    261a:	4358      	muls	r0, r3
    261c:	4355      	muls	r5, r2
    261e:	437b      	muls	r3, r7
    2620:	437a      	muls	r2, r7
    2622:	18eb      	adds	r3, r5, r3
    2624:	0c07      	lsrs	r7, r0, #16
    2626:	19db      	adds	r3, r3, r7
    2628:	429d      	cmp	r5, r3
    262a:	d902      	bls.n	2632 <__aeabi_ddiv+0x3a6>
    262c:	2580      	movs	r5, #128	; 0x80
    262e:	026d      	lsls	r5, r5, #9
    2630:	1952      	adds	r2, r2, r5
    2632:	0c1d      	lsrs	r5, r3, #16
    2634:	0400      	lsls	r0, r0, #16
    2636:	041b      	lsls	r3, r3, #16
    2638:	0c00      	lsrs	r0, r0, #16
    263a:	1952      	adds	r2, r2, r5
    263c:	181b      	adds	r3, r3, r0
    263e:	4296      	cmp	r6, r2
    2640:	d335      	bcc.n	26ae <__aeabi_ddiv+0x422>
    2642:	d100      	bne.n	2646 <__aeabi_ddiv+0x3ba>
    2644:	e0fc      	b.n	2840 <__aeabi_ddiv+0x5b4>
    2646:	2301      	movs	r3, #1
    2648:	4319      	orrs	r1, r3
    264a:	9e04      	ldr	r6, [sp, #16]
    264c:	4f99      	ldr	r7, [pc, #612]	; (28b4 <__aeabi_ddiv+0x628>)
    264e:	19f5      	adds	r5, r6, r7
    2650:	2d00      	cmp	r5, #0
    2652:	dc00      	bgt.n	2656 <__aeabi_ddiv+0x3ca>
    2654:	e0a1      	b.n	279a <__aeabi_ddiv+0x50e>
    2656:	0748      	lsls	r0, r1, #29
    2658:	d009      	beq.n	266e <__aeabi_ddiv+0x3e2>
    265a:	230f      	movs	r3, #15
    265c:	400b      	ands	r3, r1
    265e:	2b04      	cmp	r3, #4
    2660:	d005      	beq.n	266e <__aeabi_ddiv+0x3e2>
    2662:	1d0b      	adds	r3, r1, #4
    2664:	428b      	cmp	r3, r1
    2666:	4189      	sbcs	r1, r1
    2668:	4249      	negs	r1, r1
    266a:	448b      	add	fp, r1
    266c:	1c19      	adds	r1, r3, #0
    266e:	465a      	mov	r2, fp
    2670:	01d2      	lsls	r2, r2, #7
    2672:	d507      	bpl.n	2684 <__aeabi_ddiv+0x3f8>
    2674:	4b90      	ldr	r3, [pc, #576]	; (28b8 <__aeabi_ddiv+0x62c>)
    2676:	465c      	mov	r4, fp
    2678:	9e04      	ldr	r6, [sp, #16]
    267a:	2780      	movs	r7, #128	; 0x80
    267c:	401c      	ands	r4, r3
    267e:	00ff      	lsls	r7, r7, #3
    2680:	46a3      	mov	fp, r4
    2682:	19f5      	adds	r5, r6, r7
    2684:	4b8d      	ldr	r3, [pc, #564]	; (28bc <__aeabi_ddiv+0x630>)
    2686:	429d      	cmp	r5, r3
    2688:	dd7a      	ble.n	2780 <__aeabi_ddiv+0x4f4>
    268a:	9c03      	ldr	r4, [sp, #12]
    268c:	2201      	movs	r2, #1
    268e:	4022      	ands	r2, r4
    2690:	2400      	movs	r4, #0
    2692:	4d8b      	ldr	r5, [pc, #556]	; (28c0 <__aeabi_ddiv+0x634>)
    2694:	46a1      	mov	r9, r4
    2696:	e6c1      	b.n	241c <__aeabi_ddiv+0x190>
    2698:	2480      	movs	r4, #128	; 0x80
    269a:	0324      	lsls	r4, r4, #12
    269c:	4647      	mov	r7, r8
    269e:	4227      	tst	r7, r4
    26a0:	d14c      	bne.n	273c <__aeabi_ddiv+0x4b0>
    26a2:	433c      	orrs	r4, r7
    26a4:	0324      	lsls	r4, r4, #12
    26a6:	0b24      	lsrs	r4, r4, #12
    26a8:	9a00      	ldr	r2, [sp, #0]
    26aa:	4d85      	ldr	r5, [pc, #532]	; (28c0 <__aeabi_ddiv+0x634>)
    26ac:	e6b6      	b.n	241c <__aeabi_ddiv+0x190>
    26ae:	1936      	adds	r6, r6, r4
    26b0:	1e48      	subs	r0, r1, #1
    26b2:	42b4      	cmp	r4, r6
    26b4:	d95e      	bls.n	2774 <__aeabi_ddiv+0x4e8>
    26b6:	1c01      	adds	r1, r0, #0
    26b8:	4296      	cmp	r6, r2
    26ba:	d1c4      	bne.n	2646 <__aeabi_ddiv+0x3ba>
    26bc:	9e00      	ldr	r6, [sp, #0]
    26be:	429e      	cmp	r6, r3
    26c0:	d1c1      	bne.n	2646 <__aeabi_ddiv+0x3ba>
    26c2:	e7c2      	b.n	264a <__aeabi_ddiv+0x3be>
    26c4:	1c03      	adds	r3, r0, #0
    26c6:	3b28      	subs	r3, #40	; 0x28
    26c8:	1c31      	adds	r1, r6, #0
    26ca:	4099      	lsls	r1, r3
    26cc:	468b      	mov	fp, r1
    26ce:	2100      	movs	r1, #0
    26d0:	e688      	b.n	23e4 <__aeabi_ddiv+0x158>
    26d2:	1c30      	adds	r0, r6, #0
    26d4:	f000 ff86 	bl	35e4 <__clzsi2>
    26d8:	3020      	adds	r0, #32
    26da:	e672      	b.n	23c2 <__aeabi_ddiv+0x136>
    26dc:	3b28      	subs	r3, #40	; 0x28
    26de:	1c21      	adds	r1, r4, #0
    26e0:	4099      	lsls	r1, r3
    26e2:	2200      	movs	r2, #0
    26e4:	4688      	mov	r8, r1
    26e6:	4691      	mov	r9, r2
    26e8:	e651      	b.n	238e <__aeabi_ddiv+0x102>
    26ea:	1c20      	adds	r0, r4, #0
    26ec:	f000 ff7a 	bl	35e4 <__clzsi2>
    26f0:	3020      	adds	r0, #32
    26f2:	e63b      	b.n	236c <__aeabi_ddiv+0xe0>
    26f4:	2100      	movs	r1, #0
    26f6:	45b1      	cmp	r9, r6
    26f8:	d300      	bcc.n	26fc <__aeabi_ddiv+0x470>
    26fa:	e73d      	b.n	2578 <__aeabi_ddiv+0x2ec>
    26fc:	9f00      	ldr	r7, [sp, #0]
    26fe:	465a      	mov	r2, fp
    2700:	44b9      	add	r9, r7
    2702:	45b9      	cmp	r9, r7
    2704:	41bf      	sbcs	r7, r7
    2706:	427f      	negs	r7, r7
    2708:	193f      	adds	r7, r7, r4
    270a:	18fb      	adds	r3, r7, r3
    270c:	3a01      	subs	r2, #1
    270e:	429c      	cmp	r4, r3
    2710:	d21e      	bcs.n	2750 <__aeabi_ddiv+0x4c4>
    2712:	4298      	cmp	r0, r3
    2714:	d900      	bls.n	2718 <__aeabi_ddiv+0x48c>
    2716:	e07e      	b.n	2816 <__aeabi_ddiv+0x58a>
    2718:	d100      	bne.n	271c <__aeabi_ddiv+0x490>
    271a:	e0b5      	b.n	2888 <__aeabi_ddiv+0x5fc>
    271c:	1a19      	subs	r1, r3, r0
    271e:	4693      	mov	fp, r2
    2720:	e72a      	b.n	2578 <__aeabi_ddiv+0x2ec>
    2722:	4589      	cmp	r9, r1
    2724:	d800      	bhi.n	2728 <__aeabi_ddiv+0x49c>
    2726:	e6ad      	b.n	2484 <__aeabi_ddiv+0x1f8>
    2728:	4648      	mov	r0, r9
    272a:	4646      	mov	r6, r8
    272c:	4642      	mov	r2, r8
    272e:	0877      	lsrs	r7, r6, #1
    2730:	07d3      	lsls	r3, r2, #31
    2732:	0846      	lsrs	r6, r0, #1
    2734:	07c0      	lsls	r0, r0, #31
    2736:	431e      	orrs	r6, r3
    2738:	4681      	mov	r9, r0
    273a:	e6aa      	b.n	2492 <__aeabi_ddiv+0x206>
    273c:	4658      	mov	r0, fp
    273e:	4220      	tst	r0, r4
    2740:	d112      	bne.n	2768 <__aeabi_ddiv+0x4dc>
    2742:	4304      	orrs	r4, r0
    2744:	0324      	lsls	r4, r4, #12
    2746:	1c2a      	adds	r2, r5, #0
    2748:	0b24      	lsrs	r4, r4, #12
    274a:	4689      	mov	r9, r1
    274c:	4d5c      	ldr	r5, [pc, #368]	; (28c0 <__aeabi_ddiv+0x634>)
    274e:	e665      	b.n	241c <__aeabi_ddiv+0x190>
    2750:	42a3      	cmp	r3, r4
    2752:	d1e3      	bne.n	271c <__aeabi_ddiv+0x490>
    2754:	9f00      	ldr	r7, [sp, #0]
    2756:	454f      	cmp	r7, r9
    2758:	d9db      	bls.n	2712 <__aeabi_ddiv+0x486>
    275a:	1a21      	subs	r1, r4, r0
    275c:	4693      	mov	fp, r2
    275e:	e70b      	b.n	2578 <__aeabi_ddiv+0x2ec>
    2760:	1c17      	adds	r7, r2, #0
    2762:	e6dd      	b.n	2520 <__aeabi_ddiv+0x294>
    2764:	469b      	mov	fp, r3
    2766:	e6bc      	b.n	24e2 <__aeabi_ddiv+0x256>
    2768:	433c      	orrs	r4, r7
    276a:	0324      	lsls	r4, r4, #12
    276c:	0b24      	lsrs	r4, r4, #12
    276e:	9a00      	ldr	r2, [sp, #0]
    2770:	4d53      	ldr	r5, [pc, #332]	; (28c0 <__aeabi_ddiv+0x634>)
    2772:	e653      	b.n	241c <__aeabi_ddiv+0x190>
    2774:	42b2      	cmp	r2, r6
    2776:	d859      	bhi.n	282c <__aeabi_ddiv+0x5a0>
    2778:	d100      	bne.n	277c <__aeabi_ddiv+0x4f0>
    277a:	e08a      	b.n	2892 <__aeabi_ddiv+0x606>
    277c:	1c01      	adds	r1, r0, #0
    277e:	e762      	b.n	2646 <__aeabi_ddiv+0x3ba>
    2780:	465f      	mov	r7, fp
    2782:	08c9      	lsrs	r1, r1, #3
    2784:	077b      	lsls	r3, r7, #29
    2786:	9e03      	ldr	r6, [sp, #12]
    2788:	430b      	orrs	r3, r1
    278a:	027c      	lsls	r4, r7, #9
    278c:	056d      	lsls	r5, r5, #21
    278e:	2201      	movs	r2, #1
    2790:	4699      	mov	r9, r3
    2792:	0b24      	lsrs	r4, r4, #12
    2794:	0d6d      	lsrs	r5, r5, #21
    2796:	4032      	ands	r2, r6
    2798:	e640      	b.n	241c <__aeabi_ddiv+0x190>
    279a:	4b4a      	ldr	r3, [pc, #296]	; (28c4 <__aeabi_ddiv+0x638>)
    279c:	9f04      	ldr	r7, [sp, #16]
    279e:	1bdb      	subs	r3, r3, r7
    27a0:	2b38      	cmp	r3, #56	; 0x38
    27a2:	dd10      	ble.n	27c6 <__aeabi_ddiv+0x53a>
    27a4:	9c03      	ldr	r4, [sp, #12]
    27a6:	2201      	movs	r2, #1
    27a8:	4022      	ands	r2, r4
    27aa:	2400      	movs	r4, #0
    27ac:	2500      	movs	r5, #0
    27ae:	46a1      	mov	r9, r4
    27b0:	e634      	b.n	241c <__aeabi_ddiv+0x190>
    27b2:	2101      	movs	r1, #1
    27b4:	4249      	negs	r1, r1
    27b6:	e748      	b.n	264a <__aeabi_ddiv+0x3be>
    27b8:	9302      	str	r3, [sp, #8]
    27ba:	e704      	b.n	25c6 <__aeabi_ddiv+0x33a>
    27bc:	1c1f      	adds	r7, r3, #0
    27be:	e721      	b.n	2604 <__aeabi_ddiv+0x378>
    27c0:	9c01      	ldr	r4, [sp, #4]
    27c2:	9403      	str	r4, [sp, #12]
    27c4:	e741      	b.n	264a <__aeabi_ddiv+0x3be>
    27c6:	2b1f      	cmp	r3, #31
    27c8:	dc40      	bgt.n	284c <__aeabi_ddiv+0x5c0>
    27ca:	483f      	ldr	r0, [pc, #252]	; (28c8 <__aeabi_ddiv+0x63c>)
    27cc:	9f04      	ldr	r7, [sp, #16]
    27ce:	1c0c      	adds	r4, r1, #0
    27d0:	183a      	adds	r2, r7, r0
    27d2:	4658      	mov	r0, fp
    27d4:	4091      	lsls	r1, r2
    27d6:	40dc      	lsrs	r4, r3
    27d8:	4090      	lsls	r0, r2
    27da:	4320      	orrs	r0, r4
    27dc:	1c0a      	adds	r2, r1, #0
    27de:	1e51      	subs	r1, r2, #1
    27e0:	418a      	sbcs	r2, r1
    27e2:	1c01      	adds	r1, r0, #0
    27e4:	4311      	orrs	r1, r2
    27e6:	465a      	mov	r2, fp
    27e8:	40da      	lsrs	r2, r3
    27ea:	1c13      	adds	r3, r2, #0
    27ec:	0748      	lsls	r0, r1, #29
    27ee:	d009      	beq.n	2804 <__aeabi_ddiv+0x578>
    27f0:	220f      	movs	r2, #15
    27f2:	400a      	ands	r2, r1
    27f4:	2a04      	cmp	r2, #4
    27f6:	d005      	beq.n	2804 <__aeabi_ddiv+0x578>
    27f8:	1d0a      	adds	r2, r1, #4
    27fa:	428a      	cmp	r2, r1
    27fc:	4189      	sbcs	r1, r1
    27fe:	4249      	negs	r1, r1
    2800:	185b      	adds	r3, r3, r1
    2802:	1c11      	adds	r1, r2, #0
    2804:	021a      	lsls	r2, r3, #8
    2806:	d534      	bpl.n	2872 <__aeabi_ddiv+0x5e6>
    2808:	9c03      	ldr	r4, [sp, #12]
    280a:	2201      	movs	r2, #1
    280c:	4022      	ands	r2, r4
    280e:	2400      	movs	r4, #0
    2810:	2501      	movs	r5, #1
    2812:	46a1      	mov	r9, r4
    2814:	e602      	b.n	241c <__aeabi_ddiv+0x190>
    2816:	9f00      	ldr	r7, [sp, #0]
    2818:	2102      	movs	r1, #2
    281a:	4249      	negs	r1, r1
    281c:	44b9      	add	r9, r7
    281e:	448b      	add	fp, r1
    2820:	45b9      	cmp	r9, r7
    2822:	4189      	sbcs	r1, r1
    2824:	4249      	negs	r1, r1
    2826:	1909      	adds	r1, r1, r4
    2828:	18cb      	adds	r3, r1, r3
    282a:	e6a4      	b.n	2576 <__aeabi_ddiv+0x2ea>
    282c:	9d00      	ldr	r5, [sp, #0]
    282e:	1e88      	subs	r0, r1, #2
    2830:	0069      	lsls	r1, r5, #1
    2832:	42a9      	cmp	r1, r5
    2834:	41ad      	sbcs	r5, r5
    2836:	426d      	negs	r5, r5
    2838:	192c      	adds	r4, r5, r4
    283a:	1936      	adds	r6, r6, r4
    283c:	9100      	str	r1, [sp, #0]
    283e:	e73a      	b.n	26b6 <__aeabi_ddiv+0x42a>
    2840:	2b00      	cmp	r3, #0
    2842:	d000      	beq.n	2846 <__aeabi_ddiv+0x5ba>
    2844:	e733      	b.n	26ae <__aeabi_ddiv+0x422>
    2846:	2400      	movs	r4, #0
    2848:	9400      	str	r4, [sp, #0]
    284a:	e737      	b.n	26bc <__aeabi_ddiv+0x430>
    284c:	4a1f      	ldr	r2, [pc, #124]	; (28cc <__aeabi_ddiv+0x640>)
    284e:	9c04      	ldr	r4, [sp, #16]
    2850:	465d      	mov	r5, fp
    2852:	1b12      	subs	r2, r2, r4
    2854:	40d5      	lsrs	r5, r2
    2856:	1c2a      	adds	r2, r5, #0
    2858:	2b20      	cmp	r3, #32
    285a:	d01f      	beq.n	289c <__aeabi_ddiv+0x610>
    285c:	4e1c      	ldr	r6, [pc, #112]	; (28d0 <__aeabi_ddiv+0x644>)
    285e:	465f      	mov	r7, fp
    2860:	19a3      	adds	r3, r4, r6
    2862:	409f      	lsls	r7, r3
    2864:	1c3b      	adds	r3, r7, #0
    2866:	4319      	orrs	r1, r3
    2868:	1e4b      	subs	r3, r1, #1
    286a:	4199      	sbcs	r1, r3
    286c:	4311      	orrs	r1, r2
    286e:	2300      	movs	r3, #0
    2870:	e7bc      	b.n	27ec <__aeabi_ddiv+0x560>
    2872:	075a      	lsls	r2, r3, #29
    2874:	08c9      	lsrs	r1, r1, #3
    2876:	430a      	orrs	r2, r1
    2878:	9f03      	ldr	r7, [sp, #12]
    287a:	4691      	mov	r9, r2
    287c:	025b      	lsls	r3, r3, #9
    287e:	2201      	movs	r2, #1
    2880:	0b1c      	lsrs	r4, r3, #12
    2882:	403a      	ands	r2, r7
    2884:	2500      	movs	r5, #0
    2886:	e5c9      	b.n	241c <__aeabi_ddiv+0x190>
    2888:	454e      	cmp	r6, r9
    288a:	d8c4      	bhi.n	2816 <__aeabi_ddiv+0x58a>
    288c:	4693      	mov	fp, r2
    288e:	2100      	movs	r1, #0
    2890:	e672      	b.n	2578 <__aeabi_ddiv+0x2ec>
    2892:	9f00      	ldr	r7, [sp, #0]
    2894:	429f      	cmp	r7, r3
    2896:	d3c9      	bcc.n	282c <__aeabi_ddiv+0x5a0>
    2898:	1c01      	adds	r1, r0, #0
    289a:	e70f      	b.n	26bc <__aeabi_ddiv+0x430>
    289c:	2300      	movs	r3, #0
    289e:	e7e2      	b.n	2866 <__aeabi_ddiv+0x5da>
    28a0:	2480      	movs	r4, #128	; 0x80
    28a2:	0324      	lsls	r4, r4, #12
    28a4:	465f      	mov	r7, fp
    28a6:	433c      	orrs	r4, r7
    28a8:	0324      	lsls	r4, r4, #12
    28aa:	0b24      	lsrs	r4, r4, #12
    28ac:	9a01      	ldr	r2, [sp, #4]
    28ae:	4689      	mov	r9, r1
    28b0:	4d03      	ldr	r5, [pc, #12]	; (28c0 <__aeabi_ddiv+0x634>)
    28b2:	e5b3      	b.n	241c <__aeabi_ddiv+0x190>
    28b4:	000003ff 	.word	0x000003ff
    28b8:	feffffff 	.word	0xfeffffff
    28bc:	000007fe 	.word	0x000007fe
    28c0:	000007ff 	.word	0x000007ff
    28c4:	fffffc02 	.word	0xfffffc02
    28c8:	0000041e 	.word	0x0000041e
    28cc:	fffffbe2 	.word	0xfffffbe2
    28d0:	0000043e 	.word	0x0000043e

000028d4 <__aeabi_dmul>:
    28d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28d6:	4656      	mov	r6, sl
    28d8:	4644      	mov	r4, r8
    28da:	465f      	mov	r7, fp
    28dc:	464d      	mov	r5, r9
    28de:	b4f0      	push	{r4, r5, r6, r7}
    28e0:	1c1f      	adds	r7, r3, #0
    28e2:	030b      	lsls	r3, r1, #12
    28e4:	0b1b      	lsrs	r3, r3, #12
    28e6:	469a      	mov	sl, r3
    28e8:	004b      	lsls	r3, r1, #1
    28ea:	b087      	sub	sp, #28
    28ec:	1c04      	adds	r4, r0, #0
    28ee:	4680      	mov	r8, r0
    28f0:	0d5b      	lsrs	r3, r3, #21
    28f2:	0fc8      	lsrs	r0, r1, #31
    28f4:	1c16      	adds	r6, r2, #0
    28f6:	9302      	str	r3, [sp, #8]
    28f8:	4681      	mov	r9, r0
    28fa:	2b00      	cmp	r3, #0
    28fc:	d068      	beq.n	29d0 <__aeabi_dmul+0xfc>
    28fe:	4b69      	ldr	r3, [pc, #420]	; (2aa4 <__aeabi_dmul+0x1d0>)
    2900:	9902      	ldr	r1, [sp, #8]
    2902:	4299      	cmp	r1, r3
    2904:	d032      	beq.n	296c <__aeabi_dmul+0x98>
    2906:	2280      	movs	r2, #128	; 0x80
    2908:	4653      	mov	r3, sl
    290a:	0352      	lsls	r2, r2, #13
    290c:	431a      	orrs	r2, r3
    290e:	00d2      	lsls	r2, r2, #3
    2910:	0f63      	lsrs	r3, r4, #29
    2912:	431a      	orrs	r2, r3
    2914:	4692      	mov	sl, r2
    2916:	4a64      	ldr	r2, [pc, #400]	; (2aa8 <__aeabi_dmul+0x1d4>)
    2918:	00e0      	lsls	r0, r4, #3
    291a:	1889      	adds	r1, r1, r2
    291c:	4680      	mov	r8, r0
    291e:	9102      	str	r1, [sp, #8]
    2920:	2400      	movs	r4, #0
    2922:	2500      	movs	r5, #0
    2924:	033b      	lsls	r3, r7, #12
    2926:	0b1b      	lsrs	r3, r3, #12
    2928:	469b      	mov	fp, r3
    292a:	0078      	lsls	r0, r7, #1
    292c:	0ffb      	lsrs	r3, r7, #31
    292e:	1c32      	adds	r2, r6, #0
    2930:	0d40      	lsrs	r0, r0, #21
    2932:	9303      	str	r3, [sp, #12]
    2934:	d100      	bne.n	2938 <__aeabi_dmul+0x64>
    2936:	e075      	b.n	2a24 <__aeabi_dmul+0x150>
    2938:	4b5a      	ldr	r3, [pc, #360]	; (2aa4 <__aeabi_dmul+0x1d0>)
    293a:	4298      	cmp	r0, r3
    293c:	d069      	beq.n	2a12 <__aeabi_dmul+0x13e>
    293e:	2280      	movs	r2, #128	; 0x80
    2940:	4659      	mov	r1, fp
    2942:	0352      	lsls	r2, r2, #13
    2944:	430a      	orrs	r2, r1
    2946:	0f73      	lsrs	r3, r6, #29
    2948:	00d2      	lsls	r2, r2, #3
    294a:	431a      	orrs	r2, r3
    294c:	4b56      	ldr	r3, [pc, #344]	; (2aa8 <__aeabi_dmul+0x1d4>)
    294e:	4693      	mov	fp, r2
    2950:	18c0      	adds	r0, r0, r3
    2952:	00f2      	lsls	r2, r6, #3
    2954:	2300      	movs	r3, #0
    2956:	9903      	ldr	r1, [sp, #12]
    2958:	464e      	mov	r6, r9
    295a:	4071      	eors	r1, r6
    295c:	431c      	orrs	r4, r3
    295e:	2c0f      	cmp	r4, #15
    2960:	d900      	bls.n	2964 <__aeabi_dmul+0x90>
    2962:	e0a9      	b.n	2ab8 <__aeabi_dmul+0x1e4>
    2964:	4e51      	ldr	r6, [pc, #324]	; (2aac <__aeabi_dmul+0x1d8>)
    2966:	00a4      	lsls	r4, r4, #2
    2968:	5934      	ldr	r4, [r6, r4]
    296a:	46a7      	mov	pc, r4
    296c:	4653      	mov	r3, sl
    296e:	431c      	orrs	r4, r3
    2970:	d000      	beq.n	2974 <__aeabi_dmul+0xa0>
    2972:	e087      	b.n	2a84 <__aeabi_dmul+0x1b0>
    2974:	2500      	movs	r5, #0
    2976:	46aa      	mov	sl, r5
    2978:	46a8      	mov	r8, r5
    297a:	2408      	movs	r4, #8
    297c:	2502      	movs	r5, #2
    297e:	e7d1      	b.n	2924 <__aeabi_dmul+0x50>
    2980:	4649      	mov	r1, r9
    2982:	2d02      	cmp	r5, #2
    2984:	d06c      	beq.n	2a60 <__aeabi_dmul+0x18c>
    2986:	2d03      	cmp	r5, #3
    2988:	d100      	bne.n	298c <__aeabi_dmul+0xb8>
    298a:	e217      	b.n	2dbc <__aeabi_dmul+0x4e8>
    298c:	2d01      	cmp	r5, #1
    298e:	d000      	beq.n	2992 <__aeabi_dmul+0xbe>
    2990:	e158      	b.n	2c44 <__aeabi_dmul+0x370>
    2992:	400d      	ands	r5, r1
    2994:	b2ed      	uxtb	r5, r5
    2996:	2400      	movs	r4, #0
    2998:	46a9      	mov	r9, r5
    299a:	2300      	movs	r3, #0
    299c:	46a0      	mov	r8, r4
    299e:	2000      	movs	r0, #0
    29a0:	2100      	movs	r1, #0
    29a2:	0325      	lsls	r5, r4, #12
    29a4:	0d0a      	lsrs	r2, r1, #20
    29a6:	051c      	lsls	r4, r3, #20
    29a8:	0b2d      	lsrs	r5, r5, #12
    29aa:	0512      	lsls	r2, r2, #20
    29ac:	4b40      	ldr	r3, [pc, #256]	; (2ab0 <__aeabi_dmul+0x1dc>)
    29ae:	432a      	orrs	r2, r5
    29b0:	4013      	ands	r3, r2
    29b2:	4323      	orrs	r3, r4
    29b4:	005b      	lsls	r3, r3, #1
    29b6:	464c      	mov	r4, r9
    29b8:	085b      	lsrs	r3, r3, #1
    29ba:	07e2      	lsls	r2, r4, #31
    29bc:	1c19      	adds	r1, r3, #0
    29be:	4640      	mov	r0, r8
    29c0:	4311      	orrs	r1, r2
    29c2:	b007      	add	sp, #28
    29c4:	bc3c      	pop	{r2, r3, r4, r5}
    29c6:	4690      	mov	r8, r2
    29c8:	4699      	mov	r9, r3
    29ca:	46a2      	mov	sl, r4
    29cc:	46ab      	mov	fp, r5
    29ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29d0:	4653      	mov	r3, sl
    29d2:	4323      	orrs	r3, r4
    29d4:	d050      	beq.n	2a78 <__aeabi_dmul+0x1a4>
    29d6:	4653      	mov	r3, sl
    29d8:	2b00      	cmp	r3, #0
    29da:	d100      	bne.n	29de <__aeabi_dmul+0x10a>
    29dc:	e184      	b.n	2ce8 <__aeabi_dmul+0x414>
    29de:	4650      	mov	r0, sl
    29e0:	f000 fe00 	bl	35e4 <__clzsi2>
    29e4:	1e03      	subs	r3, r0, #0
    29e6:	2b27      	cmp	r3, #39	; 0x27
    29e8:	dd00      	ble.n	29ec <__aeabi_dmul+0x118>
    29ea:	e176      	b.n	2cda <__aeabi_dmul+0x406>
    29ec:	2128      	movs	r1, #40	; 0x28
    29ee:	1a0d      	subs	r5, r1, r0
    29f0:	1c21      	adds	r1, r4, #0
    29f2:	3b08      	subs	r3, #8
    29f4:	4652      	mov	r2, sl
    29f6:	40e9      	lsrs	r1, r5
    29f8:	409a      	lsls	r2, r3
    29fa:	1c0d      	adds	r5, r1, #0
    29fc:	4315      	orrs	r5, r2
    29fe:	1c22      	adds	r2, r4, #0
    2a00:	409a      	lsls	r2, r3
    2a02:	46aa      	mov	sl, r5
    2a04:	4690      	mov	r8, r2
    2a06:	4b2b      	ldr	r3, [pc, #172]	; (2ab4 <__aeabi_dmul+0x1e0>)
    2a08:	2400      	movs	r4, #0
    2a0a:	1a1b      	subs	r3, r3, r0
    2a0c:	9302      	str	r3, [sp, #8]
    2a0e:	2500      	movs	r5, #0
    2a10:	e788      	b.n	2924 <__aeabi_dmul+0x50>
    2a12:	465b      	mov	r3, fp
    2a14:	431e      	orrs	r6, r3
    2a16:	2303      	movs	r3, #3
    2a18:	2e00      	cmp	r6, #0
    2a1a:	d19c      	bne.n	2956 <__aeabi_dmul+0x82>
    2a1c:	46b3      	mov	fp, r6
    2a1e:	2200      	movs	r2, #0
    2a20:	2302      	movs	r3, #2
    2a22:	e798      	b.n	2956 <__aeabi_dmul+0x82>
    2a24:	465b      	mov	r3, fp
    2a26:	4333      	orrs	r3, r6
    2a28:	d021      	beq.n	2a6e <__aeabi_dmul+0x19a>
    2a2a:	4658      	mov	r0, fp
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d100      	bne.n	2a32 <__aeabi_dmul+0x15e>
    2a30:	e14e      	b.n	2cd0 <__aeabi_dmul+0x3fc>
    2a32:	f000 fdd7 	bl	35e4 <__clzsi2>
    2a36:	2827      	cmp	r0, #39	; 0x27
    2a38:	dd00      	ble.n	2a3c <__aeabi_dmul+0x168>
    2a3a:	e142      	b.n	2cc2 <__aeabi_dmul+0x3ee>
    2a3c:	2128      	movs	r1, #40	; 0x28
    2a3e:	1a0f      	subs	r7, r1, r0
    2a40:	1c02      	adds	r2, r0, #0
    2a42:	1c31      	adds	r1, r6, #0
    2a44:	3a08      	subs	r2, #8
    2a46:	465b      	mov	r3, fp
    2a48:	40f9      	lsrs	r1, r7
    2a4a:	4093      	lsls	r3, r2
    2a4c:	1c0f      	adds	r7, r1, #0
    2a4e:	431f      	orrs	r7, r3
    2a50:	1c33      	adds	r3, r6, #0
    2a52:	4093      	lsls	r3, r2
    2a54:	46bb      	mov	fp, r7
    2a56:	1c1a      	adds	r2, r3, #0
    2a58:	4b16      	ldr	r3, [pc, #88]	; (2ab4 <__aeabi_dmul+0x1e0>)
    2a5a:	1a18      	subs	r0, r3, r0
    2a5c:	2300      	movs	r3, #0
    2a5e:	e77a      	b.n	2956 <__aeabi_dmul+0x82>
    2a60:	2301      	movs	r3, #1
    2a62:	400b      	ands	r3, r1
    2a64:	2400      	movs	r4, #0
    2a66:	4699      	mov	r9, r3
    2a68:	46a0      	mov	r8, r4
    2a6a:	4b0e      	ldr	r3, [pc, #56]	; (2aa4 <__aeabi_dmul+0x1d0>)
    2a6c:	e797      	b.n	299e <__aeabi_dmul+0xca>
    2a6e:	2700      	movs	r7, #0
    2a70:	46bb      	mov	fp, r7
    2a72:	2200      	movs	r2, #0
    2a74:	2301      	movs	r3, #1
    2a76:	e76e      	b.n	2956 <__aeabi_dmul+0x82>
    2a78:	2100      	movs	r1, #0
    2a7a:	2404      	movs	r4, #4
    2a7c:	468a      	mov	sl, r1
    2a7e:	4688      	mov	r8, r1
    2a80:	2501      	movs	r5, #1
    2a82:	e74f      	b.n	2924 <__aeabi_dmul+0x50>
    2a84:	240c      	movs	r4, #12
    2a86:	2503      	movs	r5, #3
    2a88:	e74c      	b.n	2924 <__aeabi_dmul+0x50>
    2a8a:	2500      	movs	r5, #0
    2a8c:	2480      	movs	r4, #128	; 0x80
    2a8e:	46a9      	mov	r9, r5
    2a90:	0324      	lsls	r4, r4, #12
    2a92:	46a8      	mov	r8, r5
    2a94:	4b03      	ldr	r3, [pc, #12]	; (2aa4 <__aeabi_dmul+0x1d0>)
    2a96:	e782      	b.n	299e <__aeabi_dmul+0xca>
    2a98:	46da      	mov	sl, fp
    2a9a:	4690      	mov	r8, r2
    2a9c:	9903      	ldr	r1, [sp, #12]
    2a9e:	1c1d      	adds	r5, r3, #0
    2aa0:	e76f      	b.n	2982 <__aeabi_dmul+0xae>
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	000007ff 	.word	0x000007ff
    2aa8:	fffffc01 	.word	0xfffffc01
    2aac:	00004a10 	.word	0x00004a10
    2ab0:	800fffff 	.word	0x800fffff
    2ab4:	fffffc0d 	.word	0xfffffc0d
    2ab8:	9f02      	ldr	r7, [sp, #8]
    2aba:	0c16      	lsrs	r6, r2, #16
    2abc:	1838      	adds	r0, r7, r0
    2abe:	9004      	str	r0, [sp, #16]
    2ac0:	4640      	mov	r0, r8
    2ac2:	0c07      	lsrs	r7, r0, #16
    2ac4:	0400      	lsls	r0, r0, #16
    2ac6:	0c00      	lsrs	r0, r0, #16
    2ac8:	0412      	lsls	r2, r2, #16
    2aca:	0c12      	lsrs	r2, r2, #16
    2acc:	1c03      	adds	r3, r0, #0
    2ace:	4353      	muls	r3, r2
    2ad0:	1c04      	adds	r4, r0, #0
    2ad2:	1c3d      	adds	r5, r7, #0
    2ad4:	4374      	muls	r4, r6
    2ad6:	4355      	muls	r5, r2
    2ad8:	4698      	mov	r8, r3
    2ada:	1c3b      	adds	r3, r7, #0
    2adc:	4373      	muls	r3, r6
    2ade:	1964      	adds	r4, r4, r5
    2ae0:	46a4      	mov	ip, r4
    2ae2:	4644      	mov	r4, r8
    2ae4:	9302      	str	r3, [sp, #8]
    2ae6:	0c23      	lsrs	r3, r4, #16
    2ae8:	4463      	add	r3, ip
    2aea:	429d      	cmp	r5, r3
    2aec:	d904      	bls.n	2af8 <__aeabi_dmul+0x224>
    2aee:	9d02      	ldr	r5, [sp, #8]
    2af0:	2480      	movs	r4, #128	; 0x80
    2af2:	0264      	lsls	r4, r4, #9
    2af4:	192d      	adds	r5, r5, r4
    2af6:	9502      	str	r5, [sp, #8]
    2af8:	0c1d      	lsrs	r5, r3, #16
    2afa:	9503      	str	r5, [sp, #12]
    2afc:	4645      	mov	r5, r8
    2afe:	042c      	lsls	r4, r5, #16
    2b00:	041b      	lsls	r3, r3, #16
    2b02:	0c24      	lsrs	r4, r4, #16
    2b04:	191c      	adds	r4, r3, r4
    2b06:	9405      	str	r4, [sp, #20]
    2b08:	465c      	mov	r4, fp
    2b0a:	0c23      	lsrs	r3, r4, #16
    2b0c:	1c05      	adds	r5, r0, #0
    2b0e:	4358      	muls	r0, r3
    2b10:	0424      	lsls	r4, r4, #16
    2b12:	0c24      	lsrs	r4, r4, #16
    2b14:	4684      	mov	ip, r0
    2b16:	1c38      	adds	r0, r7, #0
    2b18:	4360      	muls	r0, r4
    2b1a:	4365      	muls	r5, r4
    2b1c:	435f      	muls	r7, r3
    2b1e:	4681      	mov	r9, r0
    2b20:	44cc      	add	ip, r9
    2b22:	0c28      	lsrs	r0, r5, #16
    2b24:	4460      	add	r0, ip
    2b26:	46bb      	mov	fp, r7
    2b28:	4581      	cmp	r9, r0
    2b2a:	d902      	bls.n	2b32 <__aeabi_dmul+0x25e>
    2b2c:	2780      	movs	r7, #128	; 0x80
    2b2e:	027f      	lsls	r7, r7, #9
    2b30:	44bb      	add	fp, r7
    2b32:	042d      	lsls	r5, r5, #16
    2b34:	0c07      	lsrs	r7, r0, #16
    2b36:	0c2d      	lsrs	r5, r5, #16
    2b38:	0400      	lsls	r0, r0, #16
    2b3a:	1940      	adds	r0, r0, r5
    2b3c:	4655      	mov	r5, sl
    2b3e:	46bc      	mov	ip, r7
    2b40:	042f      	lsls	r7, r5, #16
    2b42:	44e3      	add	fp, ip
    2b44:	4684      	mov	ip, r0
    2b46:	0c28      	lsrs	r0, r5, #16
    2b48:	0c3d      	lsrs	r5, r7, #16
    2b4a:	1c2f      	adds	r7, r5, #0
    2b4c:	4357      	muls	r7, r2
    2b4e:	46b8      	mov	r8, r7
    2b50:	1c2f      	adds	r7, r5, #0
    2b52:	4377      	muls	r7, r6
    2b54:	4342      	muls	r2, r0
    2b56:	46b9      	mov	r9, r7
    2b58:	4647      	mov	r7, r8
    2b5a:	0c3f      	lsrs	r7, r7, #16
    2b5c:	4491      	add	r9, r2
    2b5e:	46ba      	mov	sl, r7
    2b60:	44d1      	add	r9, sl
    2b62:	4346      	muls	r6, r0
    2b64:	454a      	cmp	r2, r9
    2b66:	d902      	bls.n	2b6e <__aeabi_dmul+0x29a>
    2b68:	2280      	movs	r2, #128	; 0x80
    2b6a:	0252      	lsls	r2, r2, #9
    2b6c:	18b6      	adds	r6, r6, r2
    2b6e:	464f      	mov	r7, r9
    2b70:	0c3a      	lsrs	r2, r7, #16
    2b72:	18b6      	adds	r6, r6, r2
    2b74:	043a      	lsls	r2, r7, #16
    2b76:	4647      	mov	r7, r8
    2b78:	043f      	lsls	r7, r7, #16
    2b7a:	0c3f      	lsrs	r7, r7, #16
    2b7c:	46b8      	mov	r8, r7
    2b7e:	1c2f      	adds	r7, r5, #0
    2b80:	4367      	muls	r7, r4
    2b82:	435d      	muls	r5, r3
    2b84:	4344      	muls	r4, r0
    2b86:	4358      	muls	r0, r3
    2b88:	1965      	adds	r5, r4, r5
    2b8a:	9001      	str	r0, [sp, #4]
    2b8c:	0c38      	lsrs	r0, r7, #16
    2b8e:	182d      	adds	r5, r5, r0
    2b90:	4442      	add	r2, r8
    2b92:	46b8      	mov	r8, r7
    2b94:	42ac      	cmp	r4, r5
    2b96:	d904      	bls.n	2ba2 <__aeabi_dmul+0x2ce>
    2b98:	9801      	ldr	r0, [sp, #4]
    2b9a:	2380      	movs	r3, #128	; 0x80
    2b9c:	025b      	lsls	r3, r3, #9
    2b9e:	18c0      	adds	r0, r0, r3
    2ba0:	9001      	str	r0, [sp, #4]
    2ba2:	9c03      	ldr	r4, [sp, #12]
    2ba4:	9f02      	ldr	r7, [sp, #8]
    2ba6:	1c20      	adds	r0, r4, #0
    2ba8:	4460      	add	r0, ip
    2baa:	19c0      	adds	r0, r0, r7
    2bac:	4560      	cmp	r0, ip
    2bae:	41a4      	sbcs	r4, r4
    2bb0:	4647      	mov	r7, r8
    2bb2:	4264      	negs	r4, r4
    2bb4:	46a4      	mov	ip, r4
    2bb6:	042b      	lsls	r3, r5, #16
    2bb8:	043c      	lsls	r4, r7, #16
    2bba:	4699      	mov	r9, r3
    2bbc:	0c24      	lsrs	r4, r4, #16
    2bbe:	444c      	add	r4, r9
    2bc0:	46a0      	mov	r8, r4
    2bc2:	44d8      	add	r8, fp
    2bc4:	1880      	adds	r0, r0, r2
    2bc6:	46c2      	mov	sl, r8
    2bc8:	44e2      	add	sl, ip
    2bca:	4290      	cmp	r0, r2
    2bcc:	4192      	sbcs	r2, r2
    2bce:	4657      	mov	r7, sl
    2bd0:	4252      	negs	r2, r2
    2bd2:	4691      	mov	r9, r2
    2bd4:	19f2      	adds	r2, r6, r7
    2bd6:	45e2      	cmp	sl, ip
    2bd8:	41bf      	sbcs	r7, r7
    2bda:	427f      	negs	r7, r7
    2bdc:	464b      	mov	r3, r9
    2bde:	46bc      	mov	ip, r7
    2be0:	45d8      	cmp	r8, fp
    2be2:	41bf      	sbcs	r7, r7
    2be4:	18d4      	adds	r4, r2, r3
    2be6:	427f      	negs	r7, r7
    2be8:	4663      	mov	r3, ip
    2bea:	431f      	orrs	r7, r3
    2bec:	0c2d      	lsrs	r5, r5, #16
    2bee:	197f      	adds	r7, r7, r5
    2bf0:	42b2      	cmp	r2, r6
    2bf2:	4192      	sbcs	r2, r2
    2bf4:	454c      	cmp	r4, r9
    2bf6:	41ad      	sbcs	r5, r5
    2bf8:	4252      	negs	r2, r2
    2bfa:	426d      	negs	r5, r5
    2bfc:	4315      	orrs	r5, r2
    2bfe:	9e01      	ldr	r6, [sp, #4]
    2c00:	197d      	adds	r5, r7, r5
    2c02:	19ab      	adds	r3, r5, r6
    2c04:	0de2      	lsrs	r2, r4, #23
    2c06:	025b      	lsls	r3, r3, #9
    2c08:	9f05      	ldr	r7, [sp, #20]
    2c0a:	4313      	orrs	r3, r2
    2c0c:	0242      	lsls	r2, r0, #9
    2c0e:	433a      	orrs	r2, r7
    2c10:	469a      	mov	sl, r3
    2c12:	1e53      	subs	r3, r2, #1
    2c14:	419a      	sbcs	r2, r3
    2c16:	0dc3      	lsrs	r3, r0, #23
    2c18:	1c10      	adds	r0, r2, #0
    2c1a:	4318      	orrs	r0, r3
    2c1c:	0264      	lsls	r4, r4, #9
    2c1e:	4320      	orrs	r0, r4
    2c20:	4680      	mov	r8, r0
    2c22:	4650      	mov	r0, sl
    2c24:	01c0      	lsls	r0, r0, #7
    2c26:	d50d      	bpl.n	2c44 <__aeabi_dmul+0x370>
    2c28:	4645      	mov	r5, r8
    2c2a:	2201      	movs	r2, #1
    2c2c:	4656      	mov	r6, sl
    2c2e:	9c04      	ldr	r4, [sp, #16]
    2c30:	086b      	lsrs	r3, r5, #1
    2c32:	402a      	ands	r2, r5
    2c34:	431a      	orrs	r2, r3
    2c36:	07f3      	lsls	r3, r6, #31
    2c38:	3401      	adds	r4, #1
    2c3a:	431a      	orrs	r2, r3
    2c3c:	0876      	lsrs	r6, r6, #1
    2c3e:	9404      	str	r4, [sp, #16]
    2c40:	4690      	mov	r8, r2
    2c42:	46b2      	mov	sl, r6
    2c44:	9e04      	ldr	r6, [sp, #16]
    2c46:	4f63      	ldr	r7, [pc, #396]	; (2dd4 <__aeabi_dmul+0x500>)
    2c48:	19f3      	adds	r3, r6, r7
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	dd61      	ble.n	2d12 <__aeabi_dmul+0x43e>
    2c4e:	4640      	mov	r0, r8
    2c50:	0740      	lsls	r0, r0, #29
    2c52:	d00b      	beq.n	2c6c <__aeabi_dmul+0x398>
    2c54:	220f      	movs	r2, #15
    2c56:	4644      	mov	r4, r8
    2c58:	4022      	ands	r2, r4
    2c5a:	2a04      	cmp	r2, #4
    2c5c:	d006      	beq.n	2c6c <__aeabi_dmul+0x398>
    2c5e:	4642      	mov	r2, r8
    2c60:	3204      	adds	r2, #4
    2c62:	4542      	cmp	r2, r8
    2c64:	4180      	sbcs	r0, r0
    2c66:	4240      	negs	r0, r0
    2c68:	4482      	add	sl, r0
    2c6a:	4690      	mov	r8, r2
    2c6c:	4655      	mov	r5, sl
    2c6e:	01ed      	lsls	r5, r5, #7
    2c70:	d507      	bpl.n	2c82 <__aeabi_dmul+0x3ae>
    2c72:	4b59      	ldr	r3, [pc, #356]	; (2dd8 <__aeabi_dmul+0x504>)
    2c74:	4656      	mov	r6, sl
    2c76:	9f04      	ldr	r7, [sp, #16]
    2c78:	2080      	movs	r0, #128	; 0x80
    2c7a:	401e      	ands	r6, r3
    2c7c:	00c0      	lsls	r0, r0, #3
    2c7e:	46b2      	mov	sl, r6
    2c80:	183b      	adds	r3, r7, r0
    2c82:	4a56      	ldr	r2, [pc, #344]	; (2ddc <__aeabi_dmul+0x508>)
    2c84:	4293      	cmp	r3, r2
    2c86:	dd00      	ble.n	2c8a <__aeabi_dmul+0x3b6>
    2c88:	e6ea      	b.n	2a60 <__aeabi_dmul+0x18c>
    2c8a:	4644      	mov	r4, r8
    2c8c:	4655      	mov	r5, sl
    2c8e:	08e2      	lsrs	r2, r4, #3
    2c90:	0768      	lsls	r0, r5, #29
    2c92:	4310      	orrs	r0, r2
    2c94:	2201      	movs	r2, #1
    2c96:	026c      	lsls	r4, r5, #9
    2c98:	055b      	lsls	r3, r3, #21
    2c9a:	400a      	ands	r2, r1
    2c9c:	4680      	mov	r8, r0
    2c9e:	0b24      	lsrs	r4, r4, #12
    2ca0:	0d5b      	lsrs	r3, r3, #21
    2ca2:	4691      	mov	r9, r2
    2ca4:	e67b      	b.n	299e <__aeabi_dmul+0xca>
    2ca6:	46da      	mov	sl, fp
    2ca8:	4690      	mov	r8, r2
    2caa:	1c1d      	adds	r5, r3, #0
    2cac:	e669      	b.n	2982 <__aeabi_dmul+0xae>
    2cae:	2480      	movs	r4, #128	; 0x80
    2cb0:	0324      	lsls	r4, r4, #12
    2cb2:	4657      	mov	r7, sl
    2cb4:	4227      	tst	r7, r4
    2cb6:	d11c      	bne.n	2cf2 <__aeabi_dmul+0x41e>
    2cb8:	433c      	orrs	r4, r7
    2cba:	0324      	lsls	r4, r4, #12
    2cbc:	0b24      	lsrs	r4, r4, #12
    2cbe:	4b48      	ldr	r3, [pc, #288]	; (2de0 <__aeabi_dmul+0x50c>)
    2cc0:	e66d      	b.n	299e <__aeabi_dmul+0xca>
    2cc2:	1c03      	adds	r3, r0, #0
    2cc4:	3b28      	subs	r3, #40	; 0x28
    2cc6:	1c31      	adds	r1, r6, #0
    2cc8:	4099      	lsls	r1, r3
    2cca:	468b      	mov	fp, r1
    2ccc:	2200      	movs	r2, #0
    2cce:	e6c3      	b.n	2a58 <__aeabi_dmul+0x184>
    2cd0:	1c30      	adds	r0, r6, #0
    2cd2:	f000 fc87 	bl	35e4 <__clzsi2>
    2cd6:	3020      	adds	r0, #32
    2cd8:	e6ad      	b.n	2a36 <__aeabi_dmul+0x162>
    2cda:	3b28      	subs	r3, #40	; 0x28
    2cdc:	1c21      	adds	r1, r4, #0
    2cde:	4099      	lsls	r1, r3
    2ce0:	2200      	movs	r2, #0
    2ce2:	468a      	mov	sl, r1
    2ce4:	4690      	mov	r8, r2
    2ce6:	e68e      	b.n	2a06 <__aeabi_dmul+0x132>
    2ce8:	1c20      	adds	r0, r4, #0
    2cea:	f000 fc7b 	bl	35e4 <__clzsi2>
    2cee:	3020      	adds	r0, #32
    2cf0:	e678      	b.n	29e4 <__aeabi_dmul+0x110>
    2cf2:	4658      	mov	r0, fp
    2cf4:	4220      	tst	r0, r4
    2cf6:	d107      	bne.n	2d08 <__aeabi_dmul+0x434>
    2cf8:	4304      	orrs	r4, r0
    2cfa:	9903      	ldr	r1, [sp, #12]
    2cfc:	0324      	lsls	r4, r4, #12
    2cfe:	0b24      	lsrs	r4, r4, #12
    2d00:	4689      	mov	r9, r1
    2d02:	4690      	mov	r8, r2
    2d04:	4b36      	ldr	r3, [pc, #216]	; (2de0 <__aeabi_dmul+0x50c>)
    2d06:	e64a      	b.n	299e <__aeabi_dmul+0xca>
    2d08:	433c      	orrs	r4, r7
    2d0a:	0324      	lsls	r4, r4, #12
    2d0c:	0b24      	lsrs	r4, r4, #12
    2d0e:	4b34      	ldr	r3, [pc, #208]	; (2de0 <__aeabi_dmul+0x50c>)
    2d10:	e645      	b.n	299e <__aeabi_dmul+0xca>
    2d12:	4b34      	ldr	r3, [pc, #208]	; (2de4 <__aeabi_dmul+0x510>)
    2d14:	9e04      	ldr	r6, [sp, #16]
    2d16:	1b9b      	subs	r3, r3, r6
    2d18:	2b38      	cmp	r3, #56	; 0x38
    2d1a:	dd06      	ble.n	2d2a <__aeabi_dmul+0x456>
    2d1c:	2301      	movs	r3, #1
    2d1e:	400b      	ands	r3, r1
    2d20:	2400      	movs	r4, #0
    2d22:	4699      	mov	r9, r3
    2d24:	46a0      	mov	r8, r4
    2d26:	2300      	movs	r3, #0
    2d28:	e639      	b.n	299e <__aeabi_dmul+0xca>
    2d2a:	2b1f      	cmp	r3, #31
    2d2c:	dc25      	bgt.n	2d7a <__aeabi_dmul+0x4a6>
    2d2e:	9c04      	ldr	r4, [sp, #16]
    2d30:	4d2d      	ldr	r5, [pc, #180]	; (2de8 <__aeabi_dmul+0x514>)
    2d32:	4646      	mov	r6, r8
    2d34:	1960      	adds	r0, r4, r5
    2d36:	4652      	mov	r2, sl
    2d38:	4644      	mov	r4, r8
    2d3a:	4086      	lsls	r6, r0
    2d3c:	40dc      	lsrs	r4, r3
    2d3e:	4082      	lsls	r2, r0
    2d40:	4657      	mov	r7, sl
    2d42:	1c30      	adds	r0, r6, #0
    2d44:	4322      	orrs	r2, r4
    2d46:	40df      	lsrs	r7, r3
    2d48:	1e44      	subs	r4, r0, #1
    2d4a:	41a0      	sbcs	r0, r4
    2d4c:	4302      	orrs	r2, r0
    2d4e:	1c3b      	adds	r3, r7, #0
    2d50:	0754      	lsls	r4, r2, #29
    2d52:	d009      	beq.n	2d68 <__aeabi_dmul+0x494>
    2d54:	200f      	movs	r0, #15
    2d56:	4010      	ands	r0, r2
    2d58:	2804      	cmp	r0, #4
    2d5a:	d005      	beq.n	2d68 <__aeabi_dmul+0x494>
    2d5c:	1d10      	adds	r0, r2, #4
    2d5e:	4290      	cmp	r0, r2
    2d60:	4192      	sbcs	r2, r2
    2d62:	4252      	negs	r2, r2
    2d64:	189b      	adds	r3, r3, r2
    2d66:	1c02      	adds	r2, r0, #0
    2d68:	021d      	lsls	r5, r3, #8
    2d6a:	d51a      	bpl.n	2da2 <__aeabi_dmul+0x4ce>
    2d6c:	2301      	movs	r3, #1
    2d6e:	400b      	ands	r3, r1
    2d70:	2400      	movs	r4, #0
    2d72:	4699      	mov	r9, r3
    2d74:	46a0      	mov	r8, r4
    2d76:	2301      	movs	r3, #1
    2d78:	e611      	b.n	299e <__aeabi_dmul+0xca>
    2d7a:	481c      	ldr	r0, [pc, #112]	; (2dec <__aeabi_dmul+0x518>)
    2d7c:	9c04      	ldr	r4, [sp, #16]
    2d7e:	4655      	mov	r5, sl
    2d80:	1b00      	subs	r0, r0, r4
    2d82:	40c5      	lsrs	r5, r0
    2d84:	1c28      	adds	r0, r5, #0
    2d86:	2b20      	cmp	r3, #32
    2d88:	d016      	beq.n	2db8 <__aeabi_dmul+0x4e4>
    2d8a:	4e19      	ldr	r6, [pc, #100]	; (2df0 <__aeabi_dmul+0x51c>)
    2d8c:	4657      	mov	r7, sl
    2d8e:	19a2      	adds	r2, r4, r6
    2d90:	4097      	lsls	r7, r2
    2d92:	1c3a      	adds	r2, r7, #0
    2d94:	4643      	mov	r3, r8
    2d96:	431a      	orrs	r2, r3
    2d98:	1e53      	subs	r3, r2, #1
    2d9a:	419a      	sbcs	r2, r3
    2d9c:	4302      	orrs	r2, r0
    2d9e:	2300      	movs	r3, #0
    2da0:	e7d6      	b.n	2d50 <__aeabi_dmul+0x47c>
    2da2:	0758      	lsls	r0, r3, #29
    2da4:	025b      	lsls	r3, r3, #9
    2da6:	08d2      	lsrs	r2, r2, #3
    2da8:	0b1c      	lsrs	r4, r3, #12
    2daa:	2301      	movs	r3, #1
    2dac:	400b      	ands	r3, r1
    2dae:	4310      	orrs	r0, r2
    2db0:	4699      	mov	r9, r3
    2db2:	4680      	mov	r8, r0
    2db4:	2300      	movs	r3, #0
    2db6:	e5f2      	b.n	299e <__aeabi_dmul+0xca>
    2db8:	2200      	movs	r2, #0
    2dba:	e7eb      	b.n	2d94 <__aeabi_dmul+0x4c0>
    2dbc:	2480      	movs	r4, #128	; 0x80
    2dbe:	0324      	lsls	r4, r4, #12
    2dc0:	4650      	mov	r0, sl
    2dc2:	2301      	movs	r3, #1
    2dc4:	4304      	orrs	r4, r0
    2dc6:	4019      	ands	r1, r3
    2dc8:	0324      	lsls	r4, r4, #12
    2dca:	0b24      	lsrs	r4, r4, #12
    2dcc:	4689      	mov	r9, r1
    2dce:	4b04      	ldr	r3, [pc, #16]	; (2de0 <__aeabi_dmul+0x50c>)
    2dd0:	e5e5      	b.n	299e <__aeabi_dmul+0xca>
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	000003ff 	.word	0x000003ff
    2dd8:	feffffff 	.word	0xfeffffff
    2ddc:	000007fe 	.word	0x000007fe
    2de0:	000007ff 	.word	0x000007ff
    2de4:	fffffc02 	.word	0xfffffc02
    2de8:	0000041e 	.word	0x0000041e
    2dec:	fffffbe2 	.word	0xfffffbe2
    2df0:	0000043e 	.word	0x0000043e

00002df4 <__aeabi_dsub>:
    2df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2df6:	465f      	mov	r7, fp
    2df8:	4656      	mov	r6, sl
    2dfa:	4644      	mov	r4, r8
    2dfc:	464d      	mov	r5, r9
    2dfe:	b4f0      	push	{r4, r5, r6, r7}
    2e00:	030c      	lsls	r4, r1, #12
    2e02:	004d      	lsls	r5, r1, #1
    2e04:	0fcf      	lsrs	r7, r1, #31
    2e06:	0a61      	lsrs	r1, r4, #9
    2e08:	0f44      	lsrs	r4, r0, #29
    2e0a:	4321      	orrs	r1, r4
    2e0c:	00c4      	lsls	r4, r0, #3
    2e0e:	0318      	lsls	r0, r3, #12
    2e10:	0fde      	lsrs	r6, r3, #31
    2e12:	4680      	mov	r8, r0
    2e14:	46b4      	mov	ip, r6
    2e16:	4646      	mov	r6, r8
    2e18:	0058      	lsls	r0, r3, #1
    2e1a:	0a76      	lsrs	r6, r6, #9
    2e1c:	0f53      	lsrs	r3, r2, #29
    2e1e:	4333      	orrs	r3, r6
    2e20:	00d6      	lsls	r6, r2, #3
    2e22:	4ad1      	ldr	r2, [pc, #836]	; (3168 <__aeabi_dsub+0x374>)
    2e24:	0d6d      	lsrs	r5, r5, #21
    2e26:	46ba      	mov	sl, r7
    2e28:	0d40      	lsrs	r0, r0, #21
    2e2a:	46b3      	mov	fp, r6
    2e2c:	4290      	cmp	r0, r2
    2e2e:	d100      	bne.n	2e32 <__aeabi_dsub+0x3e>
    2e30:	e0f5      	b.n	301e <__aeabi_dsub+0x22a>
    2e32:	4662      	mov	r2, ip
    2e34:	2601      	movs	r6, #1
    2e36:	4072      	eors	r2, r6
    2e38:	4694      	mov	ip, r2
    2e3a:	4567      	cmp	r7, ip
    2e3c:	d100      	bne.n	2e40 <__aeabi_dsub+0x4c>
    2e3e:	e0ab      	b.n	2f98 <__aeabi_dsub+0x1a4>
    2e40:	1a2f      	subs	r7, r5, r0
    2e42:	2f00      	cmp	r7, #0
    2e44:	dc00      	bgt.n	2e48 <__aeabi_dsub+0x54>
    2e46:	e111      	b.n	306c <__aeabi_dsub+0x278>
    2e48:	2800      	cmp	r0, #0
    2e4a:	d13e      	bne.n	2eca <__aeabi_dsub+0xd6>
    2e4c:	4658      	mov	r0, fp
    2e4e:	4318      	orrs	r0, r3
    2e50:	d000      	beq.n	2e54 <__aeabi_dsub+0x60>
    2e52:	e0f1      	b.n	3038 <__aeabi_dsub+0x244>
    2e54:	0760      	lsls	r0, r4, #29
    2e56:	d100      	bne.n	2e5a <__aeabi_dsub+0x66>
    2e58:	e097      	b.n	2f8a <__aeabi_dsub+0x196>
    2e5a:	230f      	movs	r3, #15
    2e5c:	4023      	ands	r3, r4
    2e5e:	2b04      	cmp	r3, #4
    2e60:	d100      	bne.n	2e64 <__aeabi_dsub+0x70>
    2e62:	e122      	b.n	30aa <__aeabi_dsub+0x2b6>
    2e64:	1d22      	adds	r2, r4, #4
    2e66:	42a2      	cmp	r2, r4
    2e68:	41a4      	sbcs	r4, r4
    2e6a:	4264      	negs	r4, r4
    2e6c:	2380      	movs	r3, #128	; 0x80
    2e6e:	1909      	adds	r1, r1, r4
    2e70:	041b      	lsls	r3, r3, #16
    2e72:	2701      	movs	r7, #1
    2e74:	4650      	mov	r0, sl
    2e76:	400b      	ands	r3, r1
    2e78:	4007      	ands	r7, r0
    2e7a:	1c14      	adds	r4, r2, #0
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	d100      	bne.n	2e82 <__aeabi_dsub+0x8e>
    2e80:	e079      	b.n	2f76 <__aeabi_dsub+0x182>
    2e82:	4bb9      	ldr	r3, [pc, #740]	; (3168 <__aeabi_dsub+0x374>)
    2e84:	3501      	adds	r5, #1
    2e86:	429d      	cmp	r5, r3
    2e88:	d100      	bne.n	2e8c <__aeabi_dsub+0x98>
    2e8a:	e10b      	b.n	30a4 <__aeabi_dsub+0x2b0>
    2e8c:	4bb7      	ldr	r3, [pc, #732]	; (316c <__aeabi_dsub+0x378>)
    2e8e:	08e4      	lsrs	r4, r4, #3
    2e90:	4019      	ands	r1, r3
    2e92:	0748      	lsls	r0, r1, #29
    2e94:	0249      	lsls	r1, r1, #9
    2e96:	4304      	orrs	r4, r0
    2e98:	0b0b      	lsrs	r3, r1, #12
    2e9a:	2000      	movs	r0, #0
    2e9c:	2100      	movs	r1, #0
    2e9e:	031b      	lsls	r3, r3, #12
    2ea0:	0b1a      	lsrs	r2, r3, #12
    2ea2:	0d0b      	lsrs	r3, r1, #20
    2ea4:	056d      	lsls	r5, r5, #21
    2ea6:	051b      	lsls	r3, r3, #20
    2ea8:	4313      	orrs	r3, r2
    2eaa:	086a      	lsrs	r2, r5, #1
    2eac:	4db0      	ldr	r5, [pc, #704]	; (3170 <__aeabi_dsub+0x37c>)
    2eae:	07ff      	lsls	r7, r7, #31
    2eb0:	401d      	ands	r5, r3
    2eb2:	4315      	orrs	r5, r2
    2eb4:	006d      	lsls	r5, r5, #1
    2eb6:	086d      	lsrs	r5, r5, #1
    2eb8:	1c29      	adds	r1, r5, #0
    2eba:	4339      	orrs	r1, r7
    2ebc:	1c20      	adds	r0, r4, #0
    2ebe:	bc3c      	pop	{r2, r3, r4, r5}
    2ec0:	4690      	mov	r8, r2
    2ec2:	4699      	mov	r9, r3
    2ec4:	46a2      	mov	sl, r4
    2ec6:	46ab      	mov	fp, r5
    2ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eca:	48a7      	ldr	r0, [pc, #668]	; (3168 <__aeabi_dsub+0x374>)
    2ecc:	4285      	cmp	r5, r0
    2ece:	d0c1      	beq.n	2e54 <__aeabi_dsub+0x60>
    2ed0:	2080      	movs	r0, #128	; 0x80
    2ed2:	0400      	lsls	r0, r0, #16
    2ed4:	4303      	orrs	r3, r0
    2ed6:	2f38      	cmp	r7, #56	; 0x38
    2ed8:	dd00      	ble.n	2edc <__aeabi_dsub+0xe8>
    2eda:	e0fd      	b.n	30d8 <__aeabi_dsub+0x2e4>
    2edc:	2f1f      	cmp	r7, #31
    2ede:	dd00      	ble.n	2ee2 <__aeabi_dsub+0xee>
    2ee0:	e131      	b.n	3146 <__aeabi_dsub+0x352>
    2ee2:	2020      	movs	r0, #32
    2ee4:	1bc0      	subs	r0, r0, r7
    2ee6:	1c1a      	adds	r2, r3, #0
    2ee8:	465e      	mov	r6, fp
    2eea:	4082      	lsls	r2, r0
    2eec:	40fe      	lsrs	r6, r7
    2eee:	4332      	orrs	r2, r6
    2ef0:	4694      	mov	ip, r2
    2ef2:	465a      	mov	r2, fp
    2ef4:	4082      	lsls	r2, r0
    2ef6:	1c10      	adds	r0, r2, #0
    2ef8:	1e42      	subs	r2, r0, #1
    2efa:	4190      	sbcs	r0, r2
    2efc:	40fb      	lsrs	r3, r7
    2efe:	4662      	mov	r2, ip
    2f00:	4302      	orrs	r2, r0
    2f02:	1c1f      	adds	r7, r3, #0
    2f04:	1aa2      	subs	r2, r4, r2
    2f06:	4294      	cmp	r4, r2
    2f08:	41a4      	sbcs	r4, r4
    2f0a:	4264      	negs	r4, r4
    2f0c:	1bc9      	subs	r1, r1, r7
    2f0e:	1b09      	subs	r1, r1, r4
    2f10:	1c14      	adds	r4, r2, #0
    2f12:	020a      	lsls	r2, r1, #8
    2f14:	d59e      	bpl.n	2e54 <__aeabi_dsub+0x60>
    2f16:	0249      	lsls	r1, r1, #9
    2f18:	0a4f      	lsrs	r7, r1, #9
    2f1a:	2f00      	cmp	r7, #0
    2f1c:	d100      	bne.n	2f20 <__aeabi_dsub+0x12c>
    2f1e:	e0d6      	b.n	30ce <__aeabi_dsub+0x2da>
    2f20:	1c38      	adds	r0, r7, #0
    2f22:	f000 fb5f 	bl	35e4 <__clzsi2>
    2f26:	1c02      	adds	r2, r0, #0
    2f28:	3a08      	subs	r2, #8
    2f2a:	2a1f      	cmp	r2, #31
    2f2c:	dd00      	ble.n	2f30 <__aeabi_dsub+0x13c>
    2f2e:	e0c3      	b.n	30b8 <__aeabi_dsub+0x2c4>
    2f30:	2128      	movs	r1, #40	; 0x28
    2f32:	1c23      	adds	r3, r4, #0
    2f34:	1a09      	subs	r1, r1, r0
    2f36:	4097      	lsls	r7, r2
    2f38:	40cb      	lsrs	r3, r1
    2f3a:	431f      	orrs	r7, r3
    2f3c:	4094      	lsls	r4, r2
    2f3e:	4295      	cmp	r5, r2
    2f40:	dd00      	ble.n	2f44 <__aeabi_dsub+0x150>
    2f42:	e0c0      	b.n	30c6 <__aeabi_dsub+0x2d2>
    2f44:	1b55      	subs	r5, r2, r5
    2f46:	1c69      	adds	r1, r5, #1
    2f48:	291f      	cmp	r1, #31
    2f4a:	dd00      	ble.n	2f4e <__aeabi_dsub+0x15a>
    2f4c:	e0ea      	b.n	3124 <__aeabi_dsub+0x330>
    2f4e:	221f      	movs	r2, #31
    2f50:	1b55      	subs	r5, r2, r5
    2f52:	1c3b      	adds	r3, r7, #0
    2f54:	1c22      	adds	r2, r4, #0
    2f56:	40ab      	lsls	r3, r5
    2f58:	40ca      	lsrs	r2, r1
    2f5a:	40ac      	lsls	r4, r5
    2f5c:	1e65      	subs	r5, r4, #1
    2f5e:	41ac      	sbcs	r4, r5
    2f60:	4313      	orrs	r3, r2
    2f62:	40cf      	lsrs	r7, r1
    2f64:	431c      	orrs	r4, r3
    2f66:	1c39      	adds	r1, r7, #0
    2f68:	2500      	movs	r5, #0
    2f6a:	e773      	b.n	2e54 <__aeabi_dsub+0x60>
    2f6c:	2180      	movs	r1, #128	; 0x80
    2f6e:	4d7e      	ldr	r5, [pc, #504]	; (3168 <__aeabi_dsub+0x374>)
    2f70:	2700      	movs	r7, #0
    2f72:	03c9      	lsls	r1, r1, #15
    2f74:	2400      	movs	r4, #0
    2f76:	4b7c      	ldr	r3, [pc, #496]	; (3168 <__aeabi_dsub+0x374>)
    2f78:	0748      	lsls	r0, r1, #29
    2f7a:	08e4      	lsrs	r4, r4, #3
    2f7c:	4304      	orrs	r4, r0
    2f7e:	08c9      	lsrs	r1, r1, #3
    2f80:	429d      	cmp	r5, r3
    2f82:	d050      	beq.n	3026 <__aeabi_dsub+0x232>
    2f84:	0309      	lsls	r1, r1, #12
    2f86:	0b0b      	lsrs	r3, r1, #12
    2f88:	e787      	b.n	2e9a <__aeabi_dsub+0xa6>
    2f8a:	2380      	movs	r3, #128	; 0x80
    2f8c:	041b      	lsls	r3, r3, #16
    2f8e:	2701      	movs	r7, #1
    2f90:	4652      	mov	r2, sl
    2f92:	400b      	ands	r3, r1
    2f94:	4017      	ands	r7, r2
    2f96:	e771      	b.n	2e7c <__aeabi_dsub+0x88>
    2f98:	1a2a      	subs	r2, r5, r0
    2f9a:	4694      	mov	ip, r2
    2f9c:	2a00      	cmp	r2, #0
    2f9e:	dc00      	bgt.n	2fa2 <__aeabi_dsub+0x1ae>
    2fa0:	e0a1      	b.n	30e6 <__aeabi_dsub+0x2f2>
    2fa2:	2800      	cmp	r0, #0
    2fa4:	d054      	beq.n	3050 <__aeabi_dsub+0x25c>
    2fa6:	4870      	ldr	r0, [pc, #448]	; (3168 <__aeabi_dsub+0x374>)
    2fa8:	4285      	cmp	r5, r0
    2faa:	d100      	bne.n	2fae <__aeabi_dsub+0x1ba>
    2fac:	e752      	b.n	2e54 <__aeabi_dsub+0x60>
    2fae:	2080      	movs	r0, #128	; 0x80
    2fb0:	0400      	lsls	r0, r0, #16
    2fb2:	4303      	orrs	r3, r0
    2fb4:	4660      	mov	r0, ip
    2fb6:	2838      	cmp	r0, #56	; 0x38
    2fb8:	dd00      	ble.n	2fbc <__aeabi_dsub+0x1c8>
    2fba:	e10e      	b.n	31da <__aeabi_dsub+0x3e6>
    2fbc:	281f      	cmp	r0, #31
    2fbe:	dd00      	ble.n	2fc2 <__aeabi_dsub+0x1ce>
    2fc0:	e157      	b.n	3272 <__aeabi_dsub+0x47e>
    2fc2:	4662      	mov	r2, ip
    2fc4:	2020      	movs	r0, #32
    2fc6:	1a80      	subs	r0, r0, r2
    2fc8:	1c1e      	adds	r6, r3, #0
    2fca:	4086      	lsls	r6, r0
    2fcc:	46b1      	mov	r9, r6
    2fce:	465e      	mov	r6, fp
    2fd0:	40d6      	lsrs	r6, r2
    2fd2:	464a      	mov	r2, r9
    2fd4:	4332      	orrs	r2, r6
    2fd6:	465e      	mov	r6, fp
    2fd8:	4086      	lsls	r6, r0
    2fda:	4690      	mov	r8, r2
    2fdc:	1c30      	adds	r0, r6, #0
    2fde:	1e42      	subs	r2, r0, #1
    2fe0:	4190      	sbcs	r0, r2
    2fe2:	4642      	mov	r2, r8
    2fe4:	4302      	orrs	r2, r0
    2fe6:	4660      	mov	r0, ip
    2fe8:	40c3      	lsrs	r3, r0
    2fea:	1912      	adds	r2, r2, r4
    2fec:	42a2      	cmp	r2, r4
    2fee:	41a4      	sbcs	r4, r4
    2ff0:	4264      	negs	r4, r4
    2ff2:	1859      	adds	r1, r3, r1
    2ff4:	1909      	adds	r1, r1, r4
    2ff6:	1c14      	adds	r4, r2, #0
    2ff8:	0208      	lsls	r0, r1, #8
    2ffa:	d400      	bmi.n	2ffe <__aeabi_dsub+0x20a>
    2ffc:	e72a      	b.n	2e54 <__aeabi_dsub+0x60>
    2ffe:	4b5a      	ldr	r3, [pc, #360]	; (3168 <__aeabi_dsub+0x374>)
    3000:	3501      	adds	r5, #1
    3002:	429d      	cmp	r5, r3
    3004:	d100      	bne.n	3008 <__aeabi_dsub+0x214>
    3006:	e131      	b.n	326c <__aeabi_dsub+0x478>
    3008:	4b58      	ldr	r3, [pc, #352]	; (316c <__aeabi_dsub+0x378>)
    300a:	0860      	lsrs	r0, r4, #1
    300c:	4019      	ands	r1, r3
    300e:	2301      	movs	r3, #1
    3010:	4023      	ands	r3, r4
    3012:	1c1c      	adds	r4, r3, #0
    3014:	4304      	orrs	r4, r0
    3016:	07cb      	lsls	r3, r1, #31
    3018:	431c      	orrs	r4, r3
    301a:	0849      	lsrs	r1, r1, #1
    301c:	e71a      	b.n	2e54 <__aeabi_dsub+0x60>
    301e:	431e      	orrs	r6, r3
    3020:	d000      	beq.n	3024 <__aeabi_dsub+0x230>
    3022:	e70a      	b.n	2e3a <__aeabi_dsub+0x46>
    3024:	e705      	b.n	2e32 <__aeabi_dsub+0x3e>
    3026:	1c23      	adds	r3, r4, #0
    3028:	430b      	orrs	r3, r1
    302a:	d03b      	beq.n	30a4 <__aeabi_dsub+0x2b0>
    302c:	2380      	movs	r3, #128	; 0x80
    302e:	031b      	lsls	r3, r3, #12
    3030:	430b      	orrs	r3, r1
    3032:	031b      	lsls	r3, r3, #12
    3034:	0b1b      	lsrs	r3, r3, #12
    3036:	e730      	b.n	2e9a <__aeabi_dsub+0xa6>
    3038:	3f01      	subs	r7, #1
    303a:	2f00      	cmp	r7, #0
    303c:	d16d      	bne.n	311a <__aeabi_dsub+0x326>
    303e:	465e      	mov	r6, fp
    3040:	1ba2      	subs	r2, r4, r6
    3042:	4294      	cmp	r4, r2
    3044:	41a4      	sbcs	r4, r4
    3046:	4264      	negs	r4, r4
    3048:	1ac9      	subs	r1, r1, r3
    304a:	1b09      	subs	r1, r1, r4
    304c:	1c14      	adds	r4, r2, #0
    304e:	e760      	b.n	2f12 <__aeabi_dsub+0x11e>
    3050:	4658      	mov	r0, fp
    3052:	4318      	orrs	r0, r3
    3054:	d100      	bne.n	3058 <__aeabi_dsub+0x264>
    3056:	e6fd      	b.n	2e54 <__aeabi_dsub+0x60>
    3058:	2601      	movs	r6, #1
    305a:	4276      	negs	r6, r6
    305c:	44b4      	add	ip, r6
    305e:	4660      	mov	r0, ip
    3060:	2800      	cmp	r0, #0
    3062:	d000      	beq.n	3066 <__aeabi_dsub+0x272>
    3064:	e0d0      	b.n	3208 <__aeabi_dsub+0x414>
    3066:	465e      	mov	r6, fp
    3068:	1932      	adds	r2, r6, r4
    306a:	e7bf      	b.n	2fec <__aeabi_dsub+0x1f8>
    306c:	2f00      	cmp	r7, #0
    306e:	d000      	beq.n	3072 <__aeabi_dsub+0x27e>
    3070:	e080      	b.n	3174 <__aeabi_dsub+0x380>
    3072:	1c68      	adds	r0, r5, #1
    3074:	0540      	lsls	r0, r0, #21
    3076:	0d40      	lsrs	r0, r0, #21
    3078:	2801      	cmp	r0, #1
    307a:	dc00      	bgt.n	307e <__aeabi_dsub+0x28a>
    307c:	e0e8      	b.n	3250 <__aeabi_dsub+0x45c>
    307e:	465a      	mov	r2, fp
    3080:	1aa2      	subs	r2, r4, r2
    3082:	4294      	cmp	r4, r2
    3084:	41bf      	sbcs	r7, r7
    3086:	1ac8      	subs	r0, r1, r3
    3088:	427f      	negs	r7, r7
    308a:	1bc7      	subs	r7, r0, r7
    308c:	023e      	lsls	r6, r7, #8
    308e:	d400      	bmi.n	3092 <__aeabi_dsub+0x29e>
    3090:	e098      	b.n	31c4 <__aeabi_dsub+0x3d0>
    3092:	4658      	mov	r0, fp
    3094:	1b04      	subs	r4, r0, r4
    3096:	45a3      	cmp	fp, r4
    3098:	4192      	sbcs	r2, r2
    309a:	1a59      	subs	r1, r3, r1
    309c:	4252      	negs	r2, r2
    309e:	1a8f      	subs	r7, r1, r2
    30a0:	46e2      	mov	sl, ip
    30a2:	e73a      	b.n	2f1a <__aeabi_dsub+0x126>
    30a4:	2300      	movs	r3, #0
    30a6:	2400      	movs	r4, #0
    30a8:	e6f7      	b.n	2e9a <__aeabi_dsub+0xa6>
    30aa:	2380      	movs	r3, #128	; 0x80
    30ac:	041b      	lsls	r3, r3, #16
    30ae:	2701      	movs	r7, #1
    30b0:	4656      	mov	r6, sl
    30b2:	400b      	ands	r3, r1
    30b4:	4037      	ands	r7, r6
    30b6:	e6e1      	b.n	2e7c <__aeabi_dsub+0x88>
    30b8:	1c27      	adds	r7, r4, #0
    30ba:	3828      	subs	r0, #40	; 0x28
    30bc:	4087      	lsls	r7, r0
    30be:	2400      	movs	r4, #0
    30c0:	4295      	cmp	r5, r2
    30c2:	dc00      	bgt.n	30c6 <__aeabi_dsub+0x2d2>
    30c4:	e73e      	b.n	2f44 <__aeabi_dsub+0x150>
    30c6:	4929      	ldr	r1, [pc, #164]	; (316c <__aeabi_dsub+0x378>)
    30c8:	1aad      	subs	r5, r5, r2
    30ca:	4039      	ands	r1, r7
    30cc:	e6c2      	b.n	2e54 <__aeabi_dsub+0x60>
    30ce:	1c20      	adds	r0, r4, #0
    30d0:	f000 fa88 	bl	35e4 <__clzsi2>
    30d4:	3020      	adds	r0, #32
    30d6:	e726      	b.n	2f26 <__aeabi_dsub+0x132>
    30d8:	465a      	mov	r2, fp
    30da:	431a      	orrs	r2, r3
    30dc:	1e53      	subs	r3, r2, #1
    30de:	419a      	sbcs	r2, r3
    30e0:	b2d2      	uxtb	r2, r2
    30e2:	2700      	movs	r7, #0
    30e4:	e70e      	b.n	2f04 <__aeabi_dsub+0x110>
    30e6:	2a00      	cmp	r2, #0
    30e8:	d000      	beq.n	30ec <__aeabi_dsub+0x2f8>
    30ea:	e0de      	b.n	32aa <__aeabi_dsub+0x4b6>
    30ec:	1c68      	adds	r0, r5, #1
    30ee:	0546      	lsls	r6, r0, #21
    30f0:	0d76      	lsrs	r6, r6, #21
    30f2:	2e01      	cmp	r6, #1
    30f4:	dc00      	bgt.n	30f8 <__aeabi_dsub+0x304>
    30f6:	e090      	b.n	321a <__aeabi_dsub+0x426>
    30f8:	4d1b      	ldr	r5, [pc, #108]	; (3168 <__aeabi_dsub+0x374>)
    30fa:	42a8      	cmp	r0, r5
    30fc:	d100      	bne.n	3100 <__aeabi_dsub+0x30c>
    30fe:	e0f5      	b.n	32ec <__aeabi_dsub+0x4f8>
    3100:	465e      	mov	r6, fp
    3102:	1932      	adds	r2, r6, r4
    3104:	42a2      	cmp	r2, r4
    3106:	41a4      	sbcs	r4, r4
    3108:	4264      	negs	r4, r4
    310a:	1859      	adds	r1, r3, r1
    310c:	1909      	adds	r1, r1, r4
    310e:	07cc      	lsls	r4, r1, #31
    3110:	0852      	lsrs	r2, r2, #1
    3112:	4314      	orrs	r4, r2
    3114:	0849      	lsrs	r1, r1, #1
    3116:	1c05      	adds	r5, r0, #0
    3118:	e69c      	b.n	2e54 <__aeabi_dsub+0x60>
    311a:	4813      	ldr	r0, [pc, #76]	; (3168 <__aeabi_dsub+0x374>)
    311c:	4285      	cmp	r5, r0
    311e:	d000      	beq.n	3122 <__aeabi_dsub+0x32e>
    3120:	e6d9      	b.n	2ed6 <__aeabi_dsub+0xe2>
    3122:	e697      	b.n	2e54 <__aeabi_dsub+0x60>
    3124:	1c2b      	adds	r3, r5, #0
    3126:	3b1f      	subs	r3, #31
    3128:	1c3e      	adds	r6, r7, #0
    312a:	40de      	lsrs	r6, r3
    312c:	1c33      	adds	r3, r6, #0
    312e:	2920      	cmp	r1, #32
    3130:	d06f      	beq.n	3212 <__aeabi_dsub+0x41e>
    3132:	223f      	movs	r2, #63	; 0x3f
    3134:	1b55      	subs	r5, r2, r5
    3136:	40af      	lsls	r7, r5
    3138:	433c      	orrs	r4, r7
    313a:	1e60      	subs	r0, r4, #1
    313c:	4184      	sbcs	r4, r0
    313e:	431c      	orrs	r4, r3
    3140:	2100      	movs	r1, #0
    3142:	2500      	movs	r5, #0
    3144:	e686      	b.n	2e54 <__aeabi_dsub+0x60>
    3146:	1c38      	adds	r0, r7, #0
    3148:	3820      	subs	r0, #32
    314a:	1c1e      	adds	r6, r3, #0
    314c:	40c6      	lsrs	r6, r0
    314e:	1c30      	adds	r0, r6, #0
    3150:	2f20      	cmp	r7, #32
    3152:	d060      	beq.n	3216 <__aeabi_dsub+0x422>
    3154:	2240      	movs	r2, #64	; 0x40
    3156:	1bd7      	subs	r7, r2, r7
    3158:	40bb      	lsls	r3, r7
    315a:	465a      	mov	r2, fp
    315c:	431a      	orrs	r2, r3
    315e:	1e53      	subs	r3, r2, #1
    3160:	419a      	sbcs	r2, r3
    3162:	4302      	orrs	r2, r0
    3164:	2700      	movs	r7, #0
    3166:	e6cd      	b.n	2f04 <__aeabi_dsub+0x110>
    3168:	000007ff 	.word	0x000007ff
    316c:	ff7fffff 	.word	0xff7fffff
    3170:	800fffff 	.word	0x800fffff
    3174:	2d00      	cmp	r5, #0
    3176:	d037      	beq.n	31e8 <__aeabi_dsub+0x3f4>
    3178:	4db6      	ldr	r5, [pc, #728]	; (3454 <__aeabi_dsub+0x660>)
    317a:	42a8      	cmp	r0, r5
    317c:	d100      	bne.n	3180 <__aeabi_dsub+0x38c>
    317e:	e08f      	b.n	32a0 <__aeabi_dsub+0x4ac>
    3180:	2580      	movs	r5, #128	; 0x80
    3182:	042d      	lsls	r5, r5, #16
    3184:	427f      	negs	r7, r7
    3186:	4329      	orrs	r1, r5
    3188:	2f38      	cmp	r7, #56	; 0x38
    318a:	dd00      	ble.n	318e <__aeabi_dsub+0x39a>
    318c:	e0a8      	b.n	32e0 <__aeabi_dsub+0x4ec>
    318e:	2f1f      	cmp	r7, #31
    3190:	dd00      	ble.n	3194 <__aeabi_dsub+0x3a0>
    3192:	e124      	b.n	33de <__aeabi_dsub+0x5ea>
    3194:	2520      	movs	r5, #32
    3196:	1bed      	subs	r5, r5, r7
    3198:	1c0e      	adds	r6, r1, #0
    319a:	40ae      	lsls	r6, r5
    319c:	46b0      	mov	r8, r6
    319e:	1c26      	adds	r6, r4, #0
    31a0:	40fe      	lsrs	r6, r7
    31a2:	4642      	mov	r2, r8
    31a4:	40ac      	lsls	r4, r5
    31a6:	4316      	orrs	r6, r2
    31a8:	1e65      	subs	r5, r4, #1
    31aa:	41ac      	sbcs	r4, r5
    31ac:	4334      	orrs	r4, r6
    31ae:	40f9      	lsrs	r1, r7
    31b0:	465a      	mov	r2, fp
    31b2:	1b14      	subs	r4, r2, r4
    31b4:	45a3      	cmp	fp, r4
    31b6:	4192      	sbcs	r2, r2
    31b8:	1a5b      	subs	r3, r3, r1
    31ba:	4252      	negs	r2, r2
    31bc:	1a99      	subs	r1, r3, r2
    31be:	1c05      	adds	r5, r0, #0
    31c0:	46e2      	mov	sl, ip
    31c2:	e6a6      	b.n	2f12 <__aeabi_dsub+0x11e>
    31c4:	1c13      	adds	r3, r2, #0
    31c6:	433b      	orrs	r3, r7
    31c8:	1c14      	adds	r4, r2, #0
    31ca:	2b00      	cmp	r3, #0
    31cc:	d000      	beq.n	31d0 <__aeabi_dsub+0x3dc>
    31ce:	e6a4      	b.n	2f1a <__aeabi_dsub+0x126>
    31d0:	2700      	movs	r7, #0
    31d2:	2100      	movs	r1, #0
    31d4:	2500      	movs	r5, #0
    31d6:	2400      	movs	r4, #0
    31d8:	e6cd      	b.n	2f76 <__aeabi_dsub+0x182>
    31da:	465a      	mov	r2, fp
    31dc:	431a      	orrs	r2, r3
    31de:	1e53      	subs	r3, r2, #1
    31e0:	419a      	sbcs	r2, r3
    31e2:	b2d2      	uxtb	r2, r2
    31e4:	2300      	movs	r3, #0
    31e6:	e700      	b.n	2fea <__aeabi_dsub+0x1f6>
    31e8:	1c0d      	adds	r5, r1, #0
    31ea:	4325      	orrs	r5, r4
    31ec:	d058      	beq.n	32a0 <__aeabi_dsub+0x4ac>
    31ee:	43ff      	mvns	r7, r7
    31f0:	2f00      	cmp	r7, #0
    31f2:	d151      	bne.n	3298 <__aeabi_dsub+0x4a4>
    31f4:	465a      	mov	r2, fp
    31f6:	1b14      	subs	r4, r2, r4
    31f8:	45a3      	cmp	fp, r4
    31fa:	4192      	sbcs	r2, r2
    31fc:	1a59      	subs	r1, r3, r1
    31fe:	4252      	negs	r2, r2
    3200:	1a89      	subs	r1, r1, r2
    3202:	1c05      	adds	r5, r0, #0
    3204:	46e2      	mov	sl, ip
    3206:	e684      	b.n	2f12 <__aeabi_dsub+0x11e>
    3208:	4892      	ldr	r0, [pc, #584]	; (3454 <__aeabi_dsub+0x660>)
    320a:	4285      	cmp	r5, r0
    320c:	d000      	beq.n	3210 <__aeabi_dsub+0x41c>
    320e:	e6d1      	b.n	2fb4 <__aeabi_dsub+0x1c0>
    3210:	e620      	b.n	2e54 <__aeabi_dsub+0x60>
    3212:	2700      	movs	r7, #0
    3214:	e790      	b.n	3138 <__aeabi_dsub+0x344>
    3216:	2300      	movs	r3, #0
    3218:	e79f      	b.n	315a <__aeabi_dsub+0x366>
    321a:	1c08      	adds	r0, r1, #0
    321c:	4320      	orrs	r0, r4
    321e:	2d00      	cmp	r5, #0
    3220:	d000      	beq.n	3224 <__aeabi_dsub+0x430>
    3222:	e0c2      	b.n	33aa <__aeabi_dsub+0x5b6>
    3224:	2800      	cmp	r0, #0
    3226:	d100      	bne.n	322a <__aeabi_dsub+0x436>
    3228:	e0ef      	b.n	340a <__aeabi_dsub+0x616>
    322a:	4658      	mov	r0, fp
    322c:	4318      	orrs	r0, r3
    322e:	d100      	bne.n	3232 <__aeabi_dsub+0x43e>
    3230:	e610      	b.n	2e54 <__aeabi_dsub+0x60>
    3232:	4658      	mov	r0, fp
    3234:	1902      	adds	r2, r0, r4
    3236:	42a2      	cmp	r2, r4
    3238:	41a4      	sbcs	r4, r4
    323a:	4264      	negs	r4, r4
    323c:	1859      	adds	r1, r3, r1
    323e:	1909      	adds	r1, r1, r4
    3240:	1c14      	adds	r4, r2, #0
    3242:	020a      	lsls	r2, r1, #8
    3244:	d400      	bmi.n	3248 <__aeabi_dsub+0x454>
    3246:	e605      	b.n	2e54 <__aeabi_dsub+0x60>
    3248:	4b83      	ldr	r3, [pc, #524]	; (3458 <__aeabi_dsub+0x664>)
    324a:	2501      	movs	r5, #1
    324c:	4019      	ands	r1, r3
    324e:	e601      	b.n	2e54 <__aeabi_dsub+0x60>
    3250:	1c08      	adds	r0, r1, #0
    3252:	4320      	orrs	r0, r4
    3254:	2d00      	cmp	r5, #0
    3256:	d138      	bne.n	32ca <__aeabi_dsub+0x4d6>
    3258:	2800      	cmp	r0, #0
    325a:	d16f      	bne.n	333c <__aeabi_dsub+0x548>
    325c:	4659      	mov	r1, fp
    325e:	4319      	orrs	r1, r3
    3260:	d003      	beq.n	326a <__aeabi_dsub+0x476>
    3262:	1c19      	adds	r1, r3, #0
    3264:	465c      	mov	r4, fp
    3266:	46e2      	mov	sl, ip
    3268:	e5f4      	b.n	2e54 <__aeabi_dsub+0x60>
    326a:	2700      	movs	r7, #0
    326c:	2100      	movs	r1, #0
    326e:	2400      	movs	r4, #0
    3270:	e681      	b.n	2f76 <__aeabi_dsub+0x182>
    3272:	4660      	mov	r0, ip
    3274:	3820      	subs	r0, #32
    3276:	1c1a      	adds	r2, r3, #0
    3278:	40c2      	lsrs	r2, r0
    327a:	4666      	mov	r6, ip
    327c:	1c10      	adds	r0, r2, #0
    327e:	2e20      	cmp	r6, #32
    3280:	d100      	bne.n	3284 <__aeabi_dsub+0x490>
    3282:	e0aa      	b.n	33da <__aeabi_dsub+0x5e6>
    3284:	2240      	movs	r2, #64	; 0x40
    3286:	1b92      	subs	r2, r2, r6
    3288:	4093      	lsls	r3, r2
    328a:	465a      	mov	r2, fp
    328c:	431a      	orrs	r2, r3
    328e:	1e53      	subs	r3, r2, #1
    3290:	419a      	sbcs	r2, r3
    3292:	4302      	orrs	r2, r0
    3294:	2300      	movs	r3, #0
    3296:	e6a8      	b.n	2fea <__aeabi_dsub+0x1f6>
    3298:	4d6e      	ldr	r5, [pc, #440]	; (3454 <__aeabi_dsub+0x660>)
    329a:	42a8      	cmp	r0, r5
    329c:	d000      	beq.n	32a0 <__aeabi_dsub+0x4ac>
    329e:	e773      	b.n	3188 <__aeabi_dsub+0x394>
    32a0:	1c19      	adds	r1, r3, #0
    32a2:	465c      	mov	r4, fp
    32a4:	1c05      	adds	r5, r0, #0
    32a6:	46e2      	mov	sl, ip
    32a8:	e5d4      	b.n	2e54 <__aeabi_dsub+0x60>
    32aa:	2d00      	cmp	r5, #0
    32ac:	d122      	bne.n	32f4 <__aeabi_dsub+0x500>
    32ae:	1c0d      	adds	r5, r1, #0
    32b0:	4325      	orrs	r5, r4
    32b2:	d076      	beq.n	33a2 <__aeabi_dsub+0x5ae>
    32b4:	43d5      	mvns	r5, r2
    32b6:	2d00      	cmp	r5, #0
    32b8:	d170      	bne.n	339c <__aeabi_dsub+0x5a8>
    32ba:	445c      	add	r4, fp
    32bc:	455c      	cmp	r4, fp
    32be:	4192      	sbcs	r2, r2
    32c0:	1859      	adds	r1, r3, r1
    32c2:	4252      	negs	r2, r2
    32c4:	1889      	adds	r1, r1, r2
    32c6:	1c05      	adds	r5, r0, #0
    32c8:	e696      	b.n	2ff8 <__aeabi_dsub+0x204>
    32ca:	2800      	cmp	r0, #0
    32cc:	d14c      	bne.n	3368 <__aeabi_dsub+0x574>
    32ce:	4659      	mov	r1, fp
    32d0:	4319      	orrs	r1, r3
    32d2:	d100      	bne.n	32d6 <__aeabi_dsub+0x4e2>
    32d4:	e64a      	b.n	2f6c <__aeabi_dsub+0x178>
    32d6:	1c19      	adds	r1, r3, #0
    32d8:	465c      	mov	r4, fp
    32da:	46e2      	mov	sl, ip
    32dc:	4d5d      	ldr	r5, [pc, #372]	; (3454 <__aeabi_dsub+0x660>)
    32de:	e5b9      	b.n	2e54 <__aeabi_dsub+0x60>
    32e0:	430c      	orrs	r4, r1
    32e2:	1e61      	subs	r1, r4, #1
    32e4:	418c      	sbcs	r4, r1
    32e6:	b2e4      	uxtb	r4, r4
    32e8:	2100      	movs	r1, #0
    32ea:	e761      	b.n	31b0 <__aeabi_dsub+0x3bc>
    32ec:	1c05      	adds	r5, r0, #0
    32ee:	2100      	movs	r1, #0
    32f0:	2400      	movs	r4, #0
    32f2:	e640      	b.n	2f76 <__aeabi_dsub+0x182>
    32f4:	4d57      	ldr	r5, [pc, #348]	; (3454 <__aeabi_dsub+0x660>)
    32f6:	42a8      	cmp	r0, r5
    32f8:	d053      	beq.n	33a2 <__aeabi_dsub+0x5ae>
    32fa:	4255      	negs	r5, r2
    32fc:	2280      	movs	r2, #128	; 0x80
    32fe:	0416      	lsls	r6, r2, #16
    3300:	4331      	orrs	r1, r6
    3302:	2d38      	cmp	r5, #56	; 0x38
    3304:	dc7b      	bgt.n	33fe <__aeabi_dsub+0x60a>
    3306:	2d1f      	cmp	r5, #31
    3308:	dd00      	ble.n	330c <__aeabi_dsub+0x518>
    330a:	e08c      	b.n	3426 <__aeabi_dsub+0x632>
    330c:	2220      	movs	r2, #32
    330e:	1b56      	subs	r6, r2, r5
    3310:	1c0a      	adds	r2, r1, #0
    3312:	46b4      	mov	ip, r6
    3314:	40b2      	lsls	r2, r6
    3316:	1c26      	adds	r6, r4, #0
    3318:	40ee      	lsrs	r6, r5
    331a:	4332      	orrs	r2, r6
    331c:	4690      	mov	r8, r2
    331e:	4662      	mov	r2, ip
    3320:	4094      	lsls	r4, r2
    3322:	1e66      	subs	r6, r4, #1
    3324:	41b4      	sbcs	r4, r6
    3326:	4642      	mov	r2, r8
    3328:	4314      	orrs	r4, r2
    332a:	40e9      	lsrs	r1, r5
    332c:	445c      	add	r4, fp
    332e:	455c      	cmp	r4, fp
    3330:	4192      	sbcs	r2, r2
    3332:	18cb      	adds	r3, r1, r3
    3334:	4252      	negs	r2, r2
    3336:	1899      	adds	r1, r3, r2
    3338:	1c05      	adds	r5, r0, #0
    333a:	e65d      	b.n	2ff8 <__aeabi_dsub+0x204>
    333c:	4658      	mov	r0, fp
    333e:	4318      	orrs	r0, r3
    3340:	d100      	bne.n	3344 <__aeabi_dsub+0x550>
    3342:	e587      	b.n	2e54 <__aeabi_dsub+0x60>
    3344:	465e      	mov	r6, fp
    3346:	1ba7      	subs	r7, r4, r6
    3348:	42bc      	cmp	r4, r7
    334a:	4192      	sbcs	r2, r2
    334c:	1ac8      	subs	r0, r1, r3
    334e:	4252      	negs	r2, r2
    3350:	1a80      	subs	r0, r0, r2
    3352:	0206      	lsls	r6, r0, #8
    3354:	d560      	bpl.n	3418 <__aeabi_dsub+0x624>
    3356:	4658      	mov	r0, fp
    3358:	1b04      	subs	r4, r0, r4
    335a:	45a3      	cmp	fp, r4
    335c:	4192      	sbcs	r2, r2
    335e:	1a59      	subs	r1, r3, r1
    3360:	4252      	negs	r2, r2
    3362:	1a89      	subs	r1, r1, r2
    3364:	46e2      	mov	sl, ip
    3366:	e575      	b.n	2e54 <__aeabi_dsub+0x60>
    3368:	4658      	mov	r0, fp
    336a:	4318      	orrs	r0, r3
    336c:	d033      	beq.n	33d6 <__aeabi_dsub+0x5e2>
    336e:	0748      	lsls	r0, r1, #29
    3370:	08e4      	lsrs	r4, r4, #3
    3372:	4304      	orrs	r4, r0
    3374:	2080      	movs	r0, #128	; 0x80
    3376:	08c9      	lsrs	r1, r1, #3
    3378:	0300      	lsls	r0, r0, #12
    337a:	4201      	tst	r1, r0
    337c:	d008      	beq.n	3390 <__aeabi_dsub+0x59c>
    337e:	08dd      	lsrs	r5, r3, #3
    3380:	4205      	tst	r5, r0
    3382:	d105      	bne.n	3390 <__aeabi_dsub+0x59c>
    3384:	4659      	mov	r1, fp
    3386:	08ca      	lsrs	r2, r1, #3
    3388:	075c      	lsls	r4, r3, #29
    338a:	4314      	orrs	r4, r2
    338c:	1c29      	adds	r1, r5, #0
    338e:	46e2      	mov	sl, ip
    3390:	0f63      	lsrs	r3, r4, #29
    3392:	00c9      	lsls	r1, r1, #3
    3394:	4319      	orrs	r1, r3
    3396:	00e4      	lsls	r4, r4, #3
    3398:	4d2e      	ldr	r5, [pc, #184]	; (3454 <__aeabi_dsub+0x660>)
    339a:	e55b      	b.n	2e54 <__aeabi_dsub+0x60>
    339c:	4a2d      	ldr	r2, [pc, #180]	; (3454 <__aeabi_dsub+0x660>)
    339e:	4290      	cmp	r0, r2
    33a0:	d1af      	bne.n	3302 <__aeabi_dsub+0x50e>
    33a2:	1c19      	adds	r1, r3, #0
    33a4:	465c      	mov	r4, fp
    33a6:	1c05      	adds	r5, r0, #0
    33a8:	e554      	b.n	2e54 <__aeabi_dsub+0x60>
    33aa:	2800      	cmp	r0, #0
    33ac:	d030      	beq.n	3410 <__aeabi_dsub+0x61c>
    33ae:	4658      	mov	r0, fp
    33b0:	4318      	orrs	r0, r3
    33b2:	d010      	beq.n	33d6 <__aeabi_dsub+0x5e2>
    33b4:	2580      	movs	r5, #128	; 0x80
    33b6:	0748      	lsls	r0, r1, #29
    33b8:	08e4      	lsrs	r4, r4, #3
    33ba:	08c9      	lsrs	r1, r1, #3
    33bc:	032d      	lsls	r5, r5, #12
    33be:	4304      	orrs	r4, r0
    33c0:	4229      	tst	r1, r5
    33c2:	d0e5      	beq.n	3390 <__aeabi_dsub+0x59c>
    33c4:	08d8      	lsrs	r0, r3, #3
    33c6:	4228      	tst	r0, r5
    33c8:	d1e2      	bne.n	3390 <__aeabi_dsub+0x59c>
    33ca:	465d      	mov	r5, fp
    33cc:	08ea      	lsrs	r2, r5, #3
    33ce:	075c      	lsls	r4, r3, #29
    33d0:	4314      	orrs	r4, r2
    33d2:	1c01      	adds	r1, r0, #0
    33d4:	e7dc      	b.n	3390 <__aeabi_dsub+0x59c>
    33d6:	4d1f      	ldr	r5, [pc, #124]	; (3454 <__aeabi_dsub+0x660>)
    33d8:	e53c      	b.n	2e54 <__aeabi_dsub+0x60>
    33da:	2300      	movs	r3, #0
    33dc:	e755      	b.n	328a <__aeabi_dsub+0x496>
    33de:	1c3d      	adds	r5, r7, #0
    33e0:	3d20      	subs	r5, #32
    33e2:	1c0e      	adds	r6, r1, #0
    33e4:	40ee      	lsrs	r6, r5
    33e6:	1c35      	adds	r5, r6, #0
    33e8:	2f20      	cmp	r7, #32
    33ea:	d02e      	beq.n	344a <__aeabi_dsub+0x656>
    33ec:	2640      	movs	r6, #64	; 0x40
    33ee:	1bf7      	subs	r7, r6, r7
    33f0:	40b9      	lsls	r1, r7
    33f2:	430c      	orrs	r4, r1
    33f4:	1e61      	subs	r1, r4, #1
    33f6:	418c      	sbcs	r4, r1
    33f8:	432c      	orrs	r4, r5
    33fa:	2100      	movs	r1, #0
    33fc:	e6d8      	b.n	31b0 <__aeabi_dsub+0x3bc>
    33fe:	430c      	orrs	r4, r1
    3400:	1e61      	subs	r1, r4, #1
    3402:	418c      	sbcs	r4, r1
    3404:	b2e4      	uxtb	r4, r4
    3406:	2100      	movs	r1, #0
    3408:	e790      	b.n	332c <__aeabi_dsub+0x538>
    340a:	1c19      	adds	r1, r3, #0
    340c:	465c      	mov	r4, fp
    340e:	e521      	b.n	2e54 <__aeabi_dsub+0x60>
    3410:	1c19      	adds	r1, r3, #0
    3412:	465c      	mov	r4, fp
    3414:	4d0f      	ldr	r5, [pc, #60]	; (3454 <__aeabi_dsub+0x660>)
    3416:	e51d      	b.n	2e54 <__aeabi_dsub+0x60>
    3418:	1c03      	adds	r3, r0, #0
    341a:	433b      	orrs	r3, r7
    341c:	d100      	bne.n	3420 <__aeabi_dsub+0x62c>
    341e:	e724      	b.n	326a <__aeabi_dsub+0x476>
    3420:	1c01      	adds	r1, r0, #0
    3422:	1c3c      	adds	r4, r7, #0
    3424:	e516      	b.n	2e54 <__aeabi_dsub+0x60>
    3426:	2620      	movs	r6, #32
    3428:	4276      	negs	r6, r6
    342a:	1976      	adds	r6, r6, r5
    342c:	1c0a      	adds	r2, r1, #0
    342e:	40f2      	lsrs	r2, r6
    3430:	4690      	mov	r8, r2
    3432:	2d20      	cmp	r5, #32
    3434:	d00b      	beq.n	344e <__aeabi_dsub+0x65a>
    3436:	2640      	movs	r6, #64	; 0x40
    3438:	1b75      	subs	r5, r6, r5
    343a:	40a9      	lsls	r1, r5
    343c:	430c      	orrs	r4, r1
    343e:	1e61      	subs	r1, r4, #1
    3440:	418c      	sbcs	r4, r1
    3442:	4645      	mov	r5, r8
    3444:	432c      	orrs	r4, r5
    3446:	2100      	movs	r1, #0
    3448:	e770      	b.n	332c <__aeabi_dsub+0x538>
    344a:	2100      	movs	r1, #0
    344c:	e7d1      	b.n	33f2 <__aeabi_dsub+0x5fe>
    344e:	2100      	movs	r1, #0
    3450:	e7f4      	b.n	343c <__aeabi_dsub+0x648>
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	000007ff 	.word	0x000007ff
    3458:	ff7fffff 	.word	0xff7fffff

0000345c <__aeabi_d2iz>:
    345c:	b570      	push	{r4, r5, r6, lr}
    345e:	1c0b      	adds	r3, r1, #0
    3460:	4c12      	ldr	r4, [pc, #72]	; (34ac <__aeabi_d2iz+0x50>)
    3462:	0309      	lsls	r1, r1, #12
    3464:	0b0e      	lsrs	r6, r1, #12
    3466:	0059      	lsls	r1, r3, #1
    3468:	1c02      	adds	r2, r0, #0
    346a:	0d49      	lsrs	r1, r1, #21
    346c:	0fdd      	lsrs	r5, r3, #31
    346e:	2000      	movs	r0, #0
    3470:	42a1      	cmp	r1, r4
    3472:	dd11      	ble.n	3498 <__aeabi_d2iz+0x3c>
    3474:	480e      	ldr	r0, [pc, #56]	; (34b0 <__aeabi_d2iz+0x54>)
    3476:	4281      	cmp	r1, r0
    3478:	dc0f      	bgt.n	349a <__aeabi_d2iz+0x3e>
    347a:	2080      	movs	r0, #128	; 0x80
    347c:	0340      	lsls	r0, r0, #13
    347e:	4306      	orrs	r6, r0
    3480:	480c      	ldr	r0, [pc, #48]	; (34b4 <__aeabi_d2iz+0x58>)
    3482:	1a40      	subs	r0, r0, r1
    3484:	281f      	cmp	r0, #31
    3486:	dd0b      	ble.n	34a0 <__aeabi_d2iz+0x44>
    3488:	4a0b      	ldr	r2, [pc, #44]	; (34b8 <__aeabi_d2iz+0x5c>)
    348a:	1a52      	subs	r2, r2, r1
    348c:	40d6      	lsrs	r6, r2
    348e:	1c32      	adds	r2, r6, #0
    3490:	4250      	negs	r0, r2
    3492:	2d00      	cmp	r5, #0
    3494:	d100      	bne.n	3498 <__aeabi_d2iz+0x3c>
    3496:	1c10      	adds	r0, r2, #0
    3498:	bd70      	pop	{r4, r5, r6, pc}
    349a:	4b08      	ldr	r3, [pc, #32]	; (34bc <__aeabi_d2iz+0x60>)
    349c:	18e8      	adds	r0, r5, r3
    349e:	e7fb      	b.n	3498 <__aeabi_d2iz+0x3c>
    34a0:	4b07      	ldr	r3, [pc, #28]	; (34c0 <__aeabi_d2iz+0x64>)
    34a2:	40c2      	lsrs	r2, r0
    34a4:	18c9      	adds	r1, r1, r3
    34a6:	408e      	lsls	r6, r1
    34a8:	4332      	orrs	r2, r6
    34aa:	e7f1      	b.n	3490 <__aeabi_d2iz+0x34>
    34ac:	000003fe 	.word	0x000003fe
    34b0:	0000041d 	.word	0x0000041d
    34b4:	00000433 	.word	0x00000433
    34b8:	00000413 	.word	0x00000413
    34bc:	7fffffff 	.word	0x7fffffff
    34c0:	fffffbed 	.word	0xfffffbed

000034c4 <__aeabi_f2d>:
    34c4:	0043      	lsls	r3, r0, #1
    34c6:	0e1b      	lsrs	r3, r3, #24
    34c8:	1c5a      	adds	r2, r3, #1
    34ca:	0241      	lsls	r1, r0, #9
    34cc:	b2d2      	uxtb	r2, r2
    34ce:	b570      	push	{r4, r5, r6, lr}
    34d0:	0a4c      	lsrs	r4, r1, #9
    34d2:	0fc5      	lsrs	r5, r0, #31
    34d4:	2a01      	cmp	r2, #1
    34d6:	dd17      	ble.n	3508 <__aeabi_f2d+0x44>
    34d8:	22e0      	movs	r2, #224	; 0xe0
    34da:	0092      	lsls	r2, r2, #2
    34dc:	0764      	lsls	r4, r4, #29
    34de:	0b09      	lsrs	r1, r1, #12
    34e0:	1898      	adds	r0, r3, r2
    34e2:	2200      	movs	r2, #0
    34e4:	2300      	movs	r3, #0
    34e6:	0d1e      	lsrs	r6, r3, #20
    34e8:	1c22      	adds	r2, r4, #0
    34ea:	0534      	lsls	r4, r6, #20
    34ec:	430c      	orrs	r4, r1
    34ee:	491b      	ldr	r1, [pc, #108]	; (355c <__aeabi_f2d+0x98>)
    34f0:	0540      	lsls	r0, r0, #21
    34f2:	0840      	lsrs	r0, r0, #1
    34f4:	4021      	ands	r1, r4
    34f6:	4301      	orrs	r1, r0
    34f8:	0049      	lsls	r1, r1, #1
    34fa:	0849      	lsrs	r1, r1, #1
    34fc:	07ed      	lsls	r5, r5, #31
    34fe:	1c0b      	adds	r3, r1, #0
    3500:	432b      	orrs	r3, r5
    3502:	1c10      	adds	r0, r2, #0
    3504:	1c19      	adds	r1, r3, #0
    3506:	bd70      	pop	{r4, r5, r6, pc}
    3508:	2b00      	cmp	r3, #0
    350a:	d115      	bne.n	3538 <__aeabi_f2d+0x74>
    350c:	2c00      	cmp	r4, #0
    350e:	d01c      	beq.n	354a <__aeabi_f2d+0x86>
    3510:	1c20      	adds	r0, r4, #0
    3512:	f000 f867 	bl	35e4 <__clzsi2>
    3516:	280a      	cmp	r0, #10
    3518:	dc1a      	bgt.n	3550 <__aeabi_f2d+0x8c>
    351a:	210b      	movs	r1, #11
    351c:	1a09      	subs	r1, r1, r0
    351e:	1c23      	adds	r3, r4, #0
    3520:	40cb      	lsrs	r3, r1
    3522:	1c19      	adds	r1, r3, #0
    3524:	1c03      	adds	r3, r0, #0
    3526:	3315      	adds	r3, #21
    3528:	409c      	lsls	r4, r3
    352a:	4b0d      	ldr	r3, [pc, #52]	; (3560 <__aeabi_f2d+0x9c>)
    352c:	0309      	lsls	r1, r1, #12
    352e:	1a18      	subs	r0, r3, r0
    3530:	0540      	lsls	r0, r0, #21
    3532:	0b09      	lsrs	r1, r1, #12
    3534:	0d40      	lsrs	r0, r0, #21
    3536:	e7d4      	b.n	34e2 <__aeabi_f2d+0x1e>
    3538:	2c00      	cmp	r4, #0
    353a:	d003      	beq.n	3544 <__aeabi_f2d+0x80>
    353c:	0764      	lsls	r4, r4, #29
    353e:	0b09      	lsrs	r1, r1, #12
    3540:	4808      	ldr	r0, [pc, #32]	; (3564 <__aeabi_f2d+0xa0>)
    3542:	e7ce      	b.n	34e2 <__aeabi_f2d+0x1e>
    3544:	4807      	ldr	r0, [pc, #28]	; (3564 <__aeabi_f2d+0xa0>)
    3546:	2100      	movs	r1, #0
    3548:	e7cb      	b.n	34e2 <__aeabi_f2d+0x1e>
    354a:	2000      	movs	r0, #0
    354c:	2100      	movs	r1, #0
    354e:	e7c8      	b.n	34e2 <__aeabi_f2d+0x1e>
    3550:	1c01      	adds	r1, r0, #0
    3552:	390b      	subs	r1, #11
    3554:	408c      	lsls	r4, r1
    3556:	1c21      	adds	r1, r4, #0
    3558:	2400      	movs	r4, #0
    355a:	e7e6      	b.n	352a <__aeabi_f2d+0x66>
    355c:	800fffff 	.word	0x800fffff
    3560:	00000389 	.word	0x00000389
    3564:	000007ff 	.word	0x000007ff

00003568 <__aeabi_cdrcmple>:
    3568:	4684      	mov	ip, r0
    356a:	1c10      	adds	r0, r2, #0
    356c:	4662      	mov	r2, ip
    356e:	468c      	mov	ip, r1
    3570:	1c19      	adds	r1, r3, #0
    3572:	4663      	mov	r3, ip
    3574:	e000      	b.n	3578 <__aeabi_cdcmpeq>
    3576:	46c0      	nop			; (mov r8, r8)

00003578 <__aeabi_cdcmpeq>:
    3578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    357a:	f000 f919 	bl	37b0 <__ledf2>
    357e:	2800      	cmp	r0, #0
    3580:	d401      	bmi.n	3586 <__aeabi_cdcmpeq+0xe>
    3582:	2100      	movs	r1, #0
    3584:	42c8      	cmn	r0, r1
    3586:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003588 <__aeabi_dcmpeq>:
    3588:	b510      	push	{r4, lr}
    358a:	f000 f849 	bl	3620 <__eqdf2>
    358e:	4240      	negs	r0, r0
    3590:	3001      	adds	r0, #1
    3592:	bd10      	pop	{r4, pc}

00003594 <__aeabi_dcmplt>:
    3594:	b510      	push	{r4, lr}
    3596:	f000 f90b 	bl	37b0 <__ledf2>
    359a:	2800      	cmp	r0, #0
    359c:	db01      	blt.n	35a2 <__aeabi_dcmplt+0xe>
    359e:	2000      	movs	r0, #0
    35a0:	bd10      	pop	{r4, pc}
    35a2:	2001      	movs	r0, #1
    35a4:	bd10      	pop	{r4, pc}
    35a6:	46c0      	nop			; (mov r8, r8)

000035a8 <__aeabi_dcmple>:
    35a8:	b510      	push	{r4, lr}
    35aa:	f000 f901 	bl	37b0 <__ledf2>
    35ae:	2800      	cmp	r0, #0
    35b0:	dd01      	ble.n	35b6 <__aeabi_dcmple+0xe>
    35b2:	2000      	movs	r0, #0
    35b4:	bd10      	pop	{r4, pc}
    35b6:	2001      	movs	r0, #1
    35b8:	bd10      	pop	{r4, pc}
    35ba:	46c0      	nop			; (mov r8, r8)

000035bc <__aeabi_dcmpgt>:
    35bc:	b510      	push	{r4, lr}
    35be:	f000 f879 	bl	36b4 <__gedf2>
    35c2:	2800      	cmp	r0, #0
    35c4:	dc01      	bgt.n	35ca <__aeabi_dcmpgt+0xe>
    35c6:	2000      	movs	r0, #0
    35c8:	bd10      	pop	{r4, pc}
    35ca:	2001      	movs	r0, #1
    35cc:	bd10      	pop	{r4, pc}
    35ce:	46c0      	nop			; (mov r8, r8)

000035d0 <__aeabi_dcmpge>:
    35d0:	b510      	push	{r4, lr}
    35d2:	f000 f86f 	bl	36b4 <__gedf2>
    35d6:	2800      	cmp	r0, #0
    35d8:	da01      	bge.n	35de <__aeabi_dcmpge+0xe>
    35da:	2000      	movs	r0, #0
    35dc:	bd10      	pop	{r4, pc}
    35de:	2001      	movs	r0, #1
    35e0:	bd10      	pop	{r4, pc}
    35e2:	46c0      	nop			; (mov r8, r8)

000035e4 <__clzsi2>:
    35e4:	211c      	movs	r1, #28
    35e6:	2301      	movs	r3, #1
    35e8:	041b      	lsls	r3, r3, #16
    35ea:	4298      	cmp	r0, r3
    35ec:	d301      	bcc.n	35f2 <__clzsi2+0xe>
    35ee:	0c00      	lsrs	r0, r0, #16
    35f0:	3910      	subs	r1, #16
    35f2:	0a1b      	lsrs	r3, r3, #8
    35f4:	4298      	cmp	r0, r3
    35f6:	d301      	bcc.n	35fc <__clzsi2+0x18>
    35f8:	0a00      	lsrs	r0, r0, #8
    35fa:	3908      	subs	r1, #8
    35fc:	091b      	lsrs	r3, r3, #4
    35fe:	4298      	cmp	r0, r3
    3600:	d301      	bcc.n	3606 <__clzsi2+0x22>
    3602:	0900      	lsrs	r0, r0, #4
    3604:	3904      	subs	r1, #4
    3606:	a202      	add	r2, pc, #8	; (adr r2, 3610 <__clzsi2+0x2c>)
    3608:	5c10      	ldrb	r0, [r2, r0]
    360a:	1840      	adds	r0, r0, r1
    360c:	4770      	bx	lr
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	02020304 	.word	0x02020304
    3614:	01010101 	.word	0x01010101
	...

00003620 <__eqdf2>:
    3620:	b5f0      	push	{r4, r5, r6, r7, lr}
    3622:	465f      	mov	r7, fp
    3624:	4656      	mov	r6, sl
    3626:	464d      	mov	r5, r9
    3628:	4644      	mov	r4, r8
    362a:	b4f0      	push	{r4, r5, r6, r7}
    362c:	1c0d      	adds	r5, r1, #0
    362e:	1c04      	adds	r4, r0, #0
    3630:	4680      	mov	r8, r0
    3632:	0fe8      	lsrs	r0, r5, #31
    3634:	4681      	mov	r9, r0
    3636:	0318      	lsls	r0, r3, #12
    3638:	030f      	lsls	r7, r1, #12
    363a:	0b00      	lsrs	r0, r0, #12
    363c:	0b3f      	lsrs	r7, r7, #12
    363e:	b083      	sub	sp, #12
    3640:	4684      	mov	ip, r0
    3642:	481b      	ldr	r0, [pc, #108]	; (36b0 <__eqdf2+0x90>)
    3644:	9700      	str	r7, [sp, #0]
    3646:	0049      	lsls	r1, r1, #1
    3648:	005e      	lsls	r6, r3, #1
    364a:	0fdf      	lsrs	r7, r3, #31
    364c:	0d49      	lsrs	r1, r1, #21
    364e:	4692      	mov	sl, r2
    3650:	0d76      	lsrs	r6, r6, #21
    3652:	46bb      	mov	fp, r7
    3654:	4281      	cmp	r1, r0
    3656:	d00c      	beq.n	3672 <__eqdf2+0x52>
    3658:	4815      	ldr	r0, [pc, #84]	; (36b0 <__eqdf2+0x90>)
    365a:	4286      	cmp	r6, r0
    365c:	d010      	beq.n	3680 <__eqdf2+0x60>
    365e:	2001      	movs	r0, #1
    3660:	42b1      	cmp	r1, r6
    3662:	d015      	beq.n	3690 <__eqdf2+0x70>
    3664:	b003      	add	sp, #12
    3666:	bc3c      	pop	{r2, r3, r4, r5}
    3668:	4690      	mov	r8, r2
    366a:	4699      	mov	r9, r3
    366c:	46a2      	mov	sl, r4
    366e:	46ab      	mov	fp, r5
    3670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3672:	9f00      	ldr	r7, [sp, #0]
    3674:	2001      	movs	r0, #1
    3676:	4327      	orrs	r7, r4
    3678:	d1f4      	bne.n	3664 <__eqdf2+0x44>
    367a:	480d      	ldr	r0, [pc, #52]	; (36b0 <__eqdf2+0x90>)
    367c:	4286      	cmp	r6, r0
    367e:	d1ee      	bne.n	365e <__eqdf2+0x3e>
    3680:	4660      	mov	r0, ip
    3682:	4302      	orrs	r2, r0
    3684:	2001      	movs	r0, #1
    3686:	2a00      	cmp	r2, #0
    3688:	d1ec      	bne.n	3664 <__eqdf2+0x44>
    368a:	2001      	movs	r0, #1
    368c:	42b1      	cmp	r1, r6
    368e:	d1e9      	bne.n	3664 <__eqdf2+0x44>
    3690:	9b00      	ldr	r3, [sp, #0]
    3692:	4563      	cmp	r3, ip
    3694:	d1e6      	bne.n	3664 <__eqdf2+0x44>
    3696:	45d0      	cmp	r8, sl
    3698:	d1e4      	bne.n	3664 <__eqdf2+0x44>
    369a:	45d9      	cmp	r9, fp
    369c:	d006      	beq.n	36ac <__eqdf2+0x8c>
    369e:	2900      	cmp	r1, #0
    36a0:	d1e0      	bne.n	3664 <__eqdf2+0x44>
    36a2:	431c      	orrs	r4, r3
    36a4:	1c20      	adds	r0, r4, #0
    36a6:	1e44      	subs	r4, r0, #1
    36a8:	41a0      	sbcs	r0, r4
    36aa:	e7db      	b.n	3664 <__eqdf2+0x44>
    36ac:	2000      	movs	r0, #0
    36ae:	e7d9      	b.n	3664 <__eqdf2+0x44>
    36b0:	000007ff 	.word	0x000007ff

000036b4 <__gedf2>:
    36b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36b6:	465f      	mov	r7, fp
    36b8:	4656      	mov	r6, sl
    36ba:	464d      	mov	r5, r9
    36bc:	4644      	mov	r4, r8
    36be:	b4f0      	push	{r4, r5, r6, r7}
    36c0:	0fcd      	lsrs	r5, r1, #31
    36c2:	0fde      	lsrs	r6, r3, #31
    36c4:	46ac      	mov	ip, r5
    36c6:	031d      	lsls	r5, r3, #12
    36c8:	0b2d      	lsrs	r5, r5, #12
    36ca:	46b1      	mov	r9, r6
    36cc:	4e37      	ldr	r6, [pc, #220]	; (37ac <__gedf2+0xf8>)
    36ce:	030f      	lsls	r7, r1, #12
    36d0:	004c      	lsls	r4, r1, #1
    36d2:	46ab      	mov	fp, r5
    36d4:	005d      	lsls	r5, r3, #1
    36d6:	4680      	mov	r8, r0
    36d8:	0b3f      	lsrs	r7, r7, #12
    36da:	0d64      	lsrs	r4, r4, #21
    36dc:	4692      	mov	sl, r2
    36de:	0d6d      	lsrs	r5, r5, #21
    36e0:	42b4      	cmp	r4, r6
    36e2:	d032      	beq.n	374a <__gedf2+0x96>
    36e4:	4e31      	ldr	r6, [pc, #196]	; (37ac <__gedf2+0xf8>)
    36e6:	42b5      	cmp	r5, r6
    36e8:	d035      	beq.n	3756 <__gedf2+0xa2>
    36ea:	2c00      	cmp	r4, #0
    36ec:	d10e      	bne.n	370c <__gedf2+0x58>
    36ee:	4338      	orrs	r0, r7
    36f0:	4241      	negs	r1, r0
    36f2:	4141      	adcs	r1, r0
    36f4:	1c08      	adds	r0, r1, #0
    36f6:	2d00      	cmp	r5, #0
    36f8:	d00b      	beq.n	3712 <__gedf2+0x5e>
    36fa:	2900      	cmp	r1, #0
    36fc:	d119      	bne.n	3732 <__gedf2+0x7e>
    36fe:	45cc      	cmp	ip, r9
    3700:	d02d      	beq.n	375e <__gedf2+0xaa>
    3702:	4665      	mov	r5, ip
    3704:	4268      	negs	r0, r5
    3706:	2301      	movs	r3, #1
    3708:	4318      	orrs	r0, r3
    370a:	e018      	b.n	373e <__gedf2+0x8a>
    370c:	2d00      	cmp	r5, #0
    370e:	d1f6      	bne.n	36fe <__gedf2+0x4a>
    3710:	1c28      	adds	r0, r5, #0
    3712:	4659      	mov	r1, fp
    3714:	430a      	orrs	r2, r1
    3716:	4253      	negs	r3, r2
    3718:	4153      	adcs	r3, r2
    371a:	2800      	cmp	r0, #0
    371c:	d106      	bne.n	372c <__gedf2+0x78>
    371e:	2b00      	cmp	r3, #0
    3720:	d0ed      	beq.n	36fe <__gedf2+0x4a>
    3722:	4663      	mov	r3, ip
    3724:	4258      	negs	r0, r3
    3726:	2301      	movs	r3, #1
    3728:	4318      	orrs	r0, r3
    372a:	e008      	b.n	373e <__gedf2+0x8a>
    372c:	2000      	movs	r0, #0
    372e:	2b00      	cmp	r3, #0
    3730:	d105      	bne.n	373e <__gedf2+0x8a>
    3732:	464a      	mov	r2, r9
    3734:	4250      	negs	r0, r2
    3736:	4150      	adcs	r0, r2
    3738:	4240      	negs	r0, r0
    373a:	2301      	movs	r3, #1
    373c:	4318      	orrs	r0, r3
    373e:	bc3c      	pop	{r2, r3, r4, r5}
    3740:	4690      	mov	r8, r2
    3742:	4699      	mov	r9, r3
    3744:	46a2      	mov	sl, r4
    3746:	46ab      	mov	fp, r5
    3748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    374a:	1c3e      	adds	r6, r7, #0
    374c:	4306      	orrs	r6, r0
    374e:	d0c9      	beq.n	36e4 <__gedf2+0x30>
    3750:	2002      	movs	r0, #2
    3752:	4240      	negs	r0, r0
    3754:	e7f3      	b.n	373e <__gedf2+0x8a>
    3756:	465e      	mov	r6, fp
    3758:	4316      	orrs	r6, r2
    375a:	d0c6      	beq.n	36ea <__gedf2+0x36>
    375c:	e7f8      	b.n	3750 <__gedf2+0x9c>
    375e:	42ac      	cmp	r4, r5
    3760:	dc07      	bgt.n	3772 <__gedf2+0xbe>
    3762:	da0b      	bge.n	377c <__gedf2+0xc8>
    3764:	4661      	mov	r1, ip
    3766:	4248      	negs	r0, r1
    3768:	4148      	adcs	r0, r1
    376a:	4240      	negs	r0, r0
    376c:	2301      	movs	r3, #1
    376e:	4318      	orrs	r0, r3
    3770:	e7e5      	b.n	373e <__gedf2+0x8a>
    3772:	4666      	mov	r6, ip
    3774:	4270      	negs	r0, r6
    3776:	2301      	movs	r3, #1
    3778:	4318      	orrs	r0, r3
    377a:	e7e0      	b.n	373e <__gedf2+0x8a>
    377c:	455f      	cmp	r7, fp
    377e:	d80a      	bhi.n	3796 <__gedf2+0xe2>
    3780:	d00e      	beq.n	37a0 <__gedf2+0xec>
    3782:	2000      	movs	r0, #0
    3784:	455f      	cmp	r7, fp
    3786:	d2da      	bcs.n	373e <__gedf2+0x8a>
    3788:	4665      	mov	r5, ip
    378a:	4268      	negs	r0, r5
    378c:	4168      	adcs	r0, r5
    378e:	4240      	negs	r0, r0
    3790:	2301      	movs	r3, #1
    3792:	4318      	orrs	r0, r3
    3794:	e7d3      	b.n	373e <__gedf2+0x8a>
    3796:	4662      	mov	r2, ip
    3798:	4250      	negs	r0, r2
    379a:	2301      	movs	r3, #1
    379c:	4318      	orrs	r0, r3
    379e:	e7ce      	b.n	373e <__gedf2+0x8a>
    37a0:	45d0      	cmp	r8, sl
    37a2:	d8f8      	bhi.n	3796 <__gedf2+0xe2>
    37a4:	2000      	movs	r0, #0
    37a6:	45d0      	cmp	r8, sl
    37a8:	d3ee      	bcc.n	3788 <__gedf2+0xd4>
    37aa:	e7c8      	b.n	373e <__gedf2+0x8a>
    37ac:	000007ff 	.word	0x000007ff

000037b0 <__ledf2>:
    37b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37b2:	4656      	mov	r6, sl
    37b4:	464d      	mov	r5, r9
    37b6:	4644      	mov	r4, r8
    37b8:	465f      	mov	r7, fp
    37ba:	b4f0      	push	{r4, r5, r6, r7}
    37bc:	1c0d      	adds	r5, r1, #0
    37be:	b083      	sub	sp, #12
    37c0:	1c04      	adds	r4, r0, #0
    37c2:	9001      	str	r0, [sp, #4]
    37c4:	0fe8      	lsrs	r0, r5, #31
    37c6:	4681      	mov	r9, r0
    37c8:	0318      	lsls	r0, r3, #12
    37ca:	030f      	lsls	r7, r1, #12
    37cc:	0b00      	lsrs	r0, r0, #12
    37ce:	0b3f      	lsrs	r7, r7, #12
    37d0:	4684      	mov	ip, r0
    37d2:	4835      	ldr	r0, [pc, #212]	; (38a8 <__ledf2+0xf8>)
    37d4:	9700      	str	r7, [sp, #0]
    37d6:	0049      	lsls	r1, r1, #1
    37d8:	005e      	lsls	r6, r3, #1
    37da:	0fdf      	lsrs	r7, r3, #31
    37dc:	0d49      	lsrs	r1, r1, #21
    37de:	4692      	mov	sl, r2
    37e0:	0d76      	lsrs	r6, r6, #21
    37e2:	46b8      	mov	r8, r7
    37e4:	4281      	cmp	r1, r0
    37e6:	d034      	beq.n	3852 <__ledf2+0xa2>
    37e8:	482f      	ldr	r0, [pc, #188]	; (38a8 <__ledf2+0xf8>)
    37ea:	4286      	cmp	r6, r0
    37ec:	d036      	beq.n	385c <__ledf2+0xac>
    37ee:	2900      	cmp	r1, #0
    37f0:	d018      	beq.n	3824 <__ledf2+0x74>
    37f2:	2e00      	cmp	r6, #0
    37f4:	d11f      	bne.n	3836 <__ledf2+0x86>
    37f6:	1c34      	adds	r4, r6, #0
    37f8:	4667      	mov	r7, ip
    37fa:	433a      	orrs	r2, r7
    37fc:	4253      	negs	r3, r2
    37fe:	4153      	adcs	r3, r2
    3800:	2c00      	cmp	r4, #0
    3802:	d01f      	beq.n	3844 <__ledf2+0x94>
    3804:	2000      	movs	r0, #0
    3806:	2b00      	cmp	r3, #0
    3808:	d105      	bne.n	3816 <__ledf2+0x66>
    380a:	4642      	mov	r2, r8
    380c:	4250      	negs	r0, r2
    380e:	4150      	adcs	r0, r2
    3810:	4240      	negs	r0, r0
    3812:	2301      	movs	r3, #1
    3814:	4318      	orrs	r0, r3
    3816:	b003      	add	sp, #12
    3818:	bc3c      	pop	{r2, r3, r4, r5}
    381a:	4690      	mov	r8, r2
    381c:	4699      	mov	r9, r3
    381e:	46a2      	mov	sl, r4
    3820:	46ab      	mov	fp, r5
    3822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3824:	9800      	ldr	r0, [sp, #0]
    3826:	4304      	orrs	r4, r0
    3828:	4260      	negs	r0, r4
    382a:	4160      	adcs	r0, r4
    382c:	1c04      	adds	r4, r0, #0
    382e:	2e00      	cmp	r6, #0
    3830:	d0e2      	beq.n	37f8 <__ledf2+0x48>
    3832:	2800      	cmp	r0, #0
    3834:	d1e9      	bne.n	380a <__ledf2+0x5a>
    3836:	45c1      	cmp	r9, r8
    3838:	d015      	beq.n	3866 <__ledf2+0xb6>
    383a:	464f      	mov	r7, r9
    383c:	4278      	negs	r0, r7
    383e:	2301      	movs	r3, #1
    3840:	4318      	orrs	r0, r3
    3842:	e7e8      	b.n	3816 <__ledf2+0x66>
    3844:	2b00      	cmp	r3, #0
    3846:	d0f6      	beq.n	3836 <__ledf2+0x86>
    3848:	464b      	mov	r3, r9
    384a:	4258      	negs	r0, r3
    384c:	2301      	movs	r3, #1
    384e:	4318      	orrs	r0, r3
    3850:	e7e1      	b.n	3816 <__ledf2+0x66>
    3852:	9f00      	ldr	r7, [sp, #0]
    3854:	2002      	movs	r0, #2
    3856:	4327      	orrs	r7, r4
    3858:	d1dd      	bne.n	3816 <__ledf2+0x66>
    385a:	e7c5      	b.n	37e8 <__ledf2+0x38>
    385c:	4667      	mov	r7, ip
    385e:	2002      	movs	r0, #2
    3860:	4317      	orrs	r7, r2
    3862:	d1d8      	bne.n	3816 <__ledf2+0x66>
    3864:	e7c3      	b.n	37ee <__ledf2+0x3e>
    3866:	42b1      	cmp	r1, r6
    3868:	dd04      	ble.n	3874 <__ledf2+0xc4>
    386a:	464a      	mov	r2, r9
    386c:	4250      	negs	r0, r2
    386e:	2301      	movs	r3, #1
    3870:	4318      	orrs	r0, r3
    3872:	e7d0      	b.n	3816 <__ledf2+0x66>
    3874:	42b1      	cmp	r1, r6
    3876:	db07      	blt.n	3888 <__ledf2+0xd8>
    3878:	9800      	ldr	r0, [sp, #0]
    387a:	4560      	cmp	r0, ip
    387c:	d8e4      	bhi.n	3848 <__ledf2+0x98>
    387e:	d00a      	beq.n	3896 <__ledf2+0xe6>
    3880:	9f00      	ldr	r7, [sp, #0]
    3882:	2000      	movs	r0, #0
    3884:	4567      	cmp	r7, ip
    3886:	d2c6      	bcs.n	3816 <__ledf2+0x66>
    3888:	464f      	mov	r7, r9
    388a:	4278      	negs	r0, r7
    388c:	4178      	adcs	r0, r7
    388e:	4240      	negs	r0, r0
    3890:	2301      	movs	r3, #1
    3892:	4318      	orrs	r0, r3
    3894:	e7bf      	b.n	3816 <__ledf2+0x66>
    3896:	9a01      	ldr	r2, [sp, #4]
    3898:	4552      	cmp	r2, sl
    389a:	d8d5      	bhi.n	3848 <__ledf2+0x98>
    389c:	9a01      	ldr	r2, [sp, #4]
    389e:	2000      	movs	r0, #0
    38a0:	4552      	cmp	r2, sl
    38a2:	d3f1      	bcc.n	3888 <__ledf2+0xd8>
    38a4:	e7b7      	b.n	3816 <__ledf2+0x66>
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	000007ff 	.word	0x000007ff

000038ac <__libc_init_array>:
    38ac:	b570      	push	{r4, r5, r6, lr}
    38ae:	4b0e      	ldr	r3, [pc, #56]	; (38e8 <__libc_init_array+0x3c>)
    38b0:	4d0e      	ldr	r5, [pc, #56]	; (38ec <__libc_init_array+0x40>)
    38b2:	2400      	movs	r4, #0
    38b4:	1aed      	subs	r5, r5, r3
    38b6:	10ad      	asrs	r5, r5, #2
    38b8:	1c1e      	adds	r6, r3, #0
    38ba:	42ac      	cmp	r4, r5
    38bc:	d004      	beq.n	38c8 <__libc_init_array+0x1c>
    38be:	00a3      	lsls	r3, r4, #2
    38c0:	58f3      	ldr	r3, [r6, r3]
    38c2:	4798      	blx	r3
    38c4:	3401      	adds	r4, #1
    38c6:	e7f8      	b.n	38ba <__libc_init_array+0xe>
    38c8:	f001 f910 	bl	4aec <_init>
    38cc:	4b08      	ldr	r3, [pc, #32]	; (38f0 <__libc_init_array+0x44>)
    38ce:	4d09      	ldr	r5, [pc, #36]	; (38f4 <__libc_init_array+0x48>)
    38d0:	2400      	movs	r4, #0
    38d2:	1aed      	subs	r5, r5, r3
    38d4:	10ad      	asrs	r5, r5, #2
    38d6:	1c1e      	adds	r6, r3, #0
    38d8:	42ac      	cmp	r4, r5
    38da:	d004      	beq.n	38e6 <__libc_init_array+0x3a>
    38dc:	00a3      	lsls	r3, r4, #2
    38de:	58f3      	ldr	r3, [r6, r3]
    38e0:	4798      	blx	r3
    38e2:	3401      	adds	r4, #1
    38e4:	e7f8      	b.n	38d8 <__libc_init_array+0x2c>
    38e6:	bd70      	pop	{r4, r5, r6, pc}
    38e8:	00004af8 	.word	0x00004af8
    38ec:	00004af8 	.word	0x00004af8
    38f0:	00004af8 	.word	0x00004af8
    38f4:	00004afc 	.word	0x00004afc

000038f8 <memcpy>:
    38f8:	b510      	push	{r4, lr}
    38fa:	2300      	movs	r3, #0
    38fc:	4293      	cmp	r3, r2
    38fe:	d003      	beq.n	3908 <memcpy+0x10>
    3900:	5ccc      	ldrb	r4, [r1, r3]
    3902:	54c4      	strb	r4, [r0, r3]
    3904:	3301      	adds	r3, #1
    3906:	e7f9      	b.n	38fc <memcpy+0x4>
    3908:	bd10      	pop	{r4, pc}

0000390a <memset>:
    390a:	1c03      	adds	r3, r0, #0
    390c:	1882      	adds	r2, r0, r2
    390e:	4293      	cmp	r3, r2
    3910:	d002      	beq.n	3918 <memset+0xe>
    3912:	7019      	strb	r1, [r3, #0]
    3914:	3301      	adds	r3, #1
    3916:	e7fa      	b.n	390e <memset+0x4>
    3918:	4770      	bx	lr
	...

0000391c <iprintf>:
    391c:	b40f      	push	{r0, r1, r2, r3}
    391e:	4b0b      	ldr	r3, [pc, #44]	; (394c <iprintf+0x30>)
    3920:	b513      	push	{r0, r1, r4, lr}
    3922:	681c      	ldr	r4, [r3, #0]
    3924:	2c00      	cmp	r4, #0
    3926:	d005      	beq.n	3934 <iprintf+0x18>
    3928:	69a3      	ldr	r3, [r4, #24]
    392a:	2b00      	cmp	r3, #0
    392c:	d102      	bne.n	3934 <iprintf+0x18>
    392e:	1c20      	adds	r0, r4, #0
    3930:	f000 fd2c 	bl	438c <__sinit>
    3934:	ab05      	add	r3, sp, #20
    3936:	68a1      	ldr	r1, [r4, #8]
    3938:	1c20      	adds	r0, r4, #0
    393a:	9a04      	ldr	r2, [sp, #16]
    393c:	9301      	str	r3, [sp, #4]
    393e:	f000 f8bf 	bl	3ac0 <_vfiprintf_r>
    3942:	bc16      	pop	{r1, r2, r4}
    3944:	bc08      	pop	{r3}
    3946:	b004      	add	sp, #16
    3948:	4718      	bx	r3
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	2000006c 	.word	0x2000006c

00003950 <setbuf>:
    3950:	b508      	push	{r3, lr}
    3952:	424a      	negs	r2, r1
    3954:	414a      	adcs	r2, r1
    3956:	2380      	movs	r3, #128	; 0x80
    3958:	0052      	lsls	r2, r2, #1
    395a:	00db      	lsls	r3, r3, #3
    395c:	f000 f802 	bl	3964 <setvbuf>
    3960:	bd08      	pop	{r3, pc}
	...

00003964 <setvbuf>:
    3964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3966:	1c1e      	adds	r6, r3, #0
    3968:	4b3c      	ldr	r3, [pc, #240]	; (3a5c <setvbuf+0xf8>)
    396a:	1c04      	adds	r4, r0, #0
    396c:	681d      	ldr	r5, [r3, #0]
    396e:	1c0f      	adds	r7, r1, #0
    3970:	9201      	str	r2, [sp, #4]
    3972:	2d00      	cmp	r5, #0
    3974:	d005      	beq.n	3982 <setvbuf+0x1e>
    3976:	69aa      	ldr	r2, [r5, #24]
    3978:	2a00      	cmp	r2, #0
    397a:	d102      	bne.n	3982 <setvbuf+0x1e>
    397c:	1c28      	adds	r0, r5, #0
    397e:	f000 fd05 	bl	438c <__sinit>
    3982:	4b37      	ldr	r3, [pc, #220]	; (3a60 <setvbuf+0xfc>)
    3984:	429c      	cmp	r4, r3
    3986:	d101      	bne.n	398c <setvbuf+0x28>
    3988:	686c      	ldr	r4, [r5, #4]
    398a:	e008      	b.n	399e <setvbuf+0x3a>
    398c:	4b35      	ldr	r3, [pc, #212]	; (3a64 <setvbuf+0x100>)
    398e:	429c      	cmp	r4, r3
    3990:	d101      	bne.n	3996 <setvbuf+0x32>
    3992:	68ac      	ldr	r4, [r5, #8]
    3994:	e003      	b.n	399e <setvbuf+0x3a>
    3996:	4b34      	ldr	r3, [pc, #208]	; (3a68 <setvbuf+0x104>)
    3998:	429c      	cmp	r4, r3
    399a:	d100      	bne.n	399e <setvbuf+0x3a>
    399c:	68ec      	ldr	r4, [r5, #12]
    399e:	9b01      	ldr	r3, [sp, #4]
    39a0:	2b02      	cmp	r3, #2
    39a2:	d857      	bhi.n	3a54 <setvbuf+0xf0>
    39a4:	2e00      	cmp	r6, #0
    39a6:	db55      	blt.n	3a54 <setvbuf+0xf0>
    39a8:	1c28      	adds	r0, r5, #0
    39aa:	1c21      	adds	r1, r4, #0
    39ac:	f000 fc6e 	bl	428c <_fflush_r>
    39b0:	2300      	movs	r3, #0
    39b2:	6063      	str	r3, [r4, #4]
    39b4:	61a3      	str	r3, [r4, #24]
    39b6:	89a3      	ldrh	r3, [r4, #12]
    39b8:	061a      	lsls	r2, r3, #24
    39ba:	d503      	bpl.n	39c4 <setvbuf+0x60>
    39bc:	1c28      	adds	r0, r5, #0
    39be:	6921      	ldr	r1, [r4, #16]
    39c0:	f000 fdba 	bl	4538 <_free_r>
    39c4:	89a3      	ldrh	r3, [r4, #12]
    39c6:	2283      	movs	r2, #131	; 0x83
    39c8:	4393      	bics	r3, r2
    39ca:	81a3      	strh	r3, [r4, #12]
    39cc:	9b01      	ldr	r3, [sp, #4]
    39ce:	2b02      	cmp	r3, #2
    39d0:	d013      	beq.n	39fa <setvbuf+0x96>
    39d2:	2f00      	cmp	r7, #0
    39d4:	d125      	bne.n	3a22 <setvbuf+0xbe>
    39d6:	2e00      	cmp	r6, #0
    39d8:	d101      	bne.n	39de <setvbuf+0x7a>
    39da:	2680      	movs	r6, #128	; 0x80
    39dc:	00f6      	lsls	r6, r6, #3
    39de:	1c30      	adds	r0, r6, #0
    39e0:	f000 fd94 	bl	450c <malloc>
    39e4:	1e07      	subs	r7, r0, #0
    39e6:	d118      	bne.n	3a1a <setvbuf+0xb6>
    39e8:	2080      	movs	r0, #128	; 0x80
    39ea:	00c0      	lsls	r0, r0, #3
    39ec:	f000 fd8e 	bl	450c <malloc>
    39f0:	1e07      	subs	r7, r0, #0
    39f2:	d110      	bne.n	3a16 <setvbuf+0xb2>
    39f4:	2001      	movs	r0, #1
    39f6:	4240      	negs	r0, r0
    39f8:	e000      	b.n	39fc <setvbuf+0x98>
    39fa:	2000      	movs	r0, #0
    39fc:	89a3      	ldrh	r3, [r4, #12]
    39fe:	2202      	movs	r2, #2
    3a00:	4313      	orrs	r3, r2
    3a02:	81a3      	strh	r3, [r4, #12]
    3a04:	2300      	movs	r3, #0
    3a06:	60a3      	str	r3, [r4, #8]
    3a08:	1c23      	adds	r3, r4, #0
    3a0a:	3347      	adds	r3, #71	; 0x47
    3a0c:	6023      	str	r3, [r4, #0]
    3a0e:	6123      	str	r3, [r4, #16]
    3a10:	2301      	movs	r3, #1
    3a12:	6163      	str	r3, [r4, #20]
    3a14:	e020      	b.n	3a58 <setvbuf+0xf4>
    3a16:	2680      	movs	r6, #128	; 0x80
    3a18:	00f6      	lsls	r6, r6, #3
    3a1a:	89a3      	ldrh	r3, [r4, #12]
    3a1c:	2280      	movs	r2, #128	; 0x80
    3a1e:	4313      	orrs	r3, r2
    3a20:	81a3      	strh	r3, [r4, #12]
    3a22:	9a01      	ldr	r2, [sp, #4]
    3a24:	2a01      	cmp	r2, #1
    3a26:	d104      	bne.n	3a32 <setvbuf+0xce>
    3a28:	89a3      	ldrh	r3, [r4, #12]
    3a2a:	4313      	orrs	r3, r2
    3a2c:	81a3      	strh	r3, [r4, #12]
    3a2e:	4273      	negs	r3, r6
    3a30:	61a3      	str	r3, [r4, #24]
    3a32:	4b0e      	ldr	r3, [pc, #56]	; (3a6c <setvbuf+0x108>)
    3a34:	2000      	movs	r0, #0
    3a36:	62ab      	str	r3, [r5, #40]	; 0x28
    3a38:	89a3      	ldrh	r3, [r4, #12]
    3a3a:	6027      	str	r7, [r4, #0]
    3a3c:	6127      	str	r7, [r4, #16]
    3a3e:	6166      	str	r6, [r4, #20]
    3a40:	071a      	lsls	r2, r3, #28
    3a42:	d509      	bpl.n	3a58 <setvbuf+0xf4>
    3a44:	2203      	movs	r2, #3
    3a46:	4013      	ands	r3, r2
    3a48:	425a      	negs	r2, r3
    3a4a:	4153      	adcs	r3, r2
    3a4c:	425b      	negs	r3, r3
    3a4e:	401e      	ands	r6, r3
    3a50:	60a6      	str	r6, [r4, #8]
    3a52:	e001      	b.n	3a58 <setvbuf+0xf4>
    3a54:	2001      	movs	r0, #1
    3a56:	4240      	negs	r0, r0
    3a58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3a5a:	46c0      	nop			; (mov r8, r8)
    3a5c:	2000006c 	.word	0x2000006c
    3a60:	00004a8c 	.word	0x00004a8c
    3a64:	00004aac 	.word	0x00004aac
    3a68:	00004acc 	.word	0x00004acc
    3a6c:	000042e5 	.word	0x000042e5

00003a70 <__sfputc_r>:
    3a70:	6893      	ldr	r3, [r2, #8]
    3a72:	b510      	push	{r4, lr}
    3a74:	3b01      	subs	r3, #1
    3a76:	6093      	str	r3, [r2, #8]
    3a78:	2b00      	cmp	r3, #0
    3a7a:	da05      	bge.n	3a88 <__sfputc_r+0x18>
    3a7c:	6994      	ldr	r4, [r2, #24]
    3a7e:	42a3      	cmp	r3, r4
    3a80:	db08      	blt.n	3a94 <__sfputc_r+0x24>
    3a82:	b2cb      	uxtb	r3, r1
    3a84:	2b0a      	cmp	r3, #10
    3a86:	d005      	beq.n	3a94 <__sfputc_r+0x24>
    3a88:	6813      	ldr	r3, [r2, #0]
    3a8a:	1c58      	adds	r0, r3, #1
    3a8c:	6010      	str	r0, [r2, #0]
    3a8e:	7019      	strb	r1, [r3, #0]
    3a90:	b2c8      	uxtb	r0, r1
    3a92:	e001      	b.n	3a98 <__sfputc_r+0x28>
    3a94:	f000 faa6 	bl	3fe4 <__swbuf_r>
    3a98:	bd10      	pop	{r4, pc}

00003a9a <__sfputs_r>:
    3a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a9c:	1c06      	adds	r6, r0, #0
    3a9e:	1c0f      	adds	r7, r1, #0
    3aa0:	1c14      	adds	r4, r2, #0
    3aa2:	18d5      	adds	r5, r2, r3
    3aa4:	42ac      	cmp	r4, r5
    3aa6:	d008      	beq.n	3aba <__sfputs_r+0x20>
    3aa8:	7821      	ldrb	r1, [r4, #0]
    3aaa:	1c30      	adds	r0, r6, #0
    3aac:	1c3a      	adds	r2, r7, #0
    3aae:	f7ff ffdf 	bl	3a70 <__sfputc_r>
    3ab2:	3401      	adds	r4, #1
    3ab4:	1c43      	adds	r3, r0, #1
    3ab6:	d1f5      	bne.n	3aa4 <__sfputs_r+0xa>
    3ab8:	e000      	b.n	3abc <__sfputs_r+0x22>
    3aba:	2000      	movs	r0, #0
    3abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003ac0 <_vfiprintf_r>:
    3ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ac2:	b09f      	sub	sp, #124	; 0x7c
    3ac4:	1c06      	adds	r6, r0, #0
    3ac6:	1c0f      	adds	r7, r1, #0
    3ac8:	9203      	str	r2, [sp, #12]
    3aca:	9305      	str	r3, [sp, #20]
    3acc:	2800      	cmp	r0, #0
    3ace:	d004      	beq.n	3ada <_vfiprintf_r+0x1a>
    3ad0:	6981      	ldr	r1, [r0, #24]
    3ad2:	2900      	cmp	r1, #0
    3ad4:	d101      	bne.n	3ada <_vfiprintf_r+0x1a>
    3ad6:	f000 fc59 	bl	438c <__sinit>
    3ada:	4b75      	ldr	r3, [pc, #468]	; (3cb0 <_vfiprintf_r+0x1f0>)
    3adc:	429f      	cmp	r7, r3
    3ade:	d101      	bne.n	3ae4 <_vfiprintf_r+0x24>
    3ae0:	6877      	ldr	r7, [r6, #4]
    3ae2:	e008      	b.n	3af6 <_vfiprintf_r+0x36>
    3ae4:	4b73      	ldr	r3, [pc, #460]	; (3cb4 <_vfiprintf_r+0x1f4>)
    3ae6:	429f      	cmp	r7, r3
    3ae8:	d101      	bne.n	3aee <_vfiprintf_r+0x2e>
    3aea:	68b7      	ldr	r7, [r6, #8]
    3aec:	e003      	b.n	3af6 <_vfiprintf_r+0x36>
    3aee:	4b72      	ldr	r3, [pc, #456]	; (3cb8 <_vfiprintf_r+0x1f8>)
    3af0:	429f      	cmp	r7, r3
    3af2:	d100      	bne.n	3af6 <_vfiprintf_r+0x36>
    3af4:	68f7      	ldr	r7, [r6, #12]
    3af6:	89bb      	ldrh	r3, [r7, #12]
    3af8:	071a      	lsls	r2, r3, #28
    3afa:	d50a      	bpl.n	3b12 <_vfiprintf_r+0x52>
    3afc:	693b      	ldr	r3, [r7, #16]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d007      	beq.n	3b12 <_vfiprintf_r+0x52>
    3b02:	ad06      	add	r5, sp, #24
    3b04:	2300      	movs	r3, #0
    3b06:	616b      	str	r3, [r5, #20]
    3b08:	2320      	movs	r3, #32
    3b0a:	766b      	strb	r3, [r5, #25]
    3b0c:	2330      	movs	r3, #48	; 0x30
    3b0e:	76ab      	strb	r3, [r5, #26]
    3b10:	e03b      	b.n	3b8a <_vfiprintf_r+0xca>
    3b12:	1c30      	adds	r0, r6, #0
    3b14:	1c39      	adds	r1, r7, #0
    3b16:	f000 fabd 	bl	4094 <__swsetup_r>
    3b1a:	2800      	cmp	r0, #0
    3b1c:	d0f1      	beq.n	3b02 <_vfiprintf_r+0x42>
    3b1e:	2001      	movs	r0, #1
    3b20:	4240      	negs	r0, r0
    3b22:	e0c2      	b.n	3caa <_vfiprintf_r+0x1ea>
    3b24:	9a05      	ldr	r2, [sp, #20]
    3b26:	1d11      	adds	r1, r2, #4
    3b28:	6812      	ldr	r2, [r2, #0]
    3b2a:	9105      	str	r1, [sp, #20]
    3b2c:	2a00      	cmp	r2, #0
    3b2e:	db76      	blt.n	3c1e <_vfiprintf_r+0x15e>
    3b30:	9209      	str	r2, [sp, #36]	; 0x24
    3b32:	3401      	adds	r4, #1
    3b34:	7823      	ldrb	r3, [r4, #0]
    3b36:	2b2e      	cmp	r3, #46	; 0x2e
    3b38:	d100      	bne.n	3b3c <_vfiprintf_r+0x7c>
    3b3a:	e081      	b.n	3c40 <_vfiprintf_r+0x180>
    3b3c:	7821      	ldrb	r1, [r4, #0]
    3b3e:	485f      	ldr	r0, [pc, #380]	; (3cbc <_vfiprintf_r+0x1fc>)
    3b40:	2203      	movs	r2, #3
    3b42:	f000 fced 	bl	4520 <memchr>
    3b46:	2800      	cmp	r0, #0
    3b48:	d007      	beq.n	3b5a <_vfiprintf_r+0x9a>
    3b4a:	495c      	ldr	r1, [pc, #368]	; (3cbc <_vfiprintf_r+0x1fc>)
    3b4c:	682a      	ldr	r2, [r5, #0]
    3b4e:	1a43      	subs	r3, r0, r1
    3b50:	2040      	movs	r0, #64	; 0x40
    3b52:	4098      	lsls	r0, r3
    3b54:	4310      	orrs	r0, r2
    3b56:	6028      	str	r0, [r5, #0]
    3b58:	3401      	adds	r4, #1
    3b5a:	7821      	ldrb	r1, [r4, #0]
    3b5c:	1c63      	adds	r3, r4, #1
    3b5e:	4858      	ldr	r0, [pc, #352]	; (3cc0 <_vfiprintf_r+0x200>)
    3b60:	2206      	movs	r2, #6
    3b62:	9303      	str	r3, [sp, #12]
    3b64:	7629      	strb	r1, [r5, #24]
    3b66:	f000 fcdb 	bl	4520 <memchr>
    3b6a:	2800      	cmp	r0, #0
    3b6c:	d100      	bne.n	3b70 <_vfiprintf_r+0xb0>
    3b6e:	e08a      	b.n	3c86 <_vfiprintf_r+0x1c6>
    3b70:	4b54      	ldr	r3, [pc, #336]	; (3cc4 <_vfiprintf_r+0x204>)
    3b72:	2b00      	cmp	r3, #0
    3b74:	d17e      	bne.n	3c74 <_vfiprintf_r+0x1b4>
    3b76:	9b05      	ldr	r3, [sp, #20]
    3b78:	2207      	movs	r2, #7
    3b7a:	3307      	adds	r3, #7
    3b7c:	4393      	bics	r3, r2
    3b7e:	3308      	adds	r3, #8
    3b80:	9305      	str	r3, [sp, #20]
    3b82:	696a      	ldr	r2, [r5, #20]
    3b84:	9904      	ldr	r1, [sp, #16]
    3b86:	1853      	adds	r3, r2, r1
    3b88:	616b      	str	r3, [r5, #20]
    3b8a:	9c03      	ldr	r4, [sp, #12]
    3b8c:	7823      	ldrb	r3, [r4, #0]
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d104      	bne.n	3b9c <_vfiprintf_r+0xdc>
    3b92:	9903      	ldr	r1, [sp, #12]
    3b94:	1a61      	subs	r1, r4, r1
    3b96:	9102      	str	r1, [sp, #8]
    3b98:	d010      	beq.n	3bbc <_vfiprintf_r+0xfc>
    3b9a:	e003      	b.n	3ba4 <_vfiprintf_r+0xe4>
    3b9c:	2b25      	cmp	r3, #37	; 0x25
    3b9e:	d0f8      	beq.n	3b92 <_vfiprintf_r+0xd2>
    3ba0:	3401      	adds	r4, #1
    3ba2:	e7f3      	b.n	3b8c <_vfiprintf_r+0xcc>
    3ba4:	1c30      	adds	r0, r6, #0
    3ba6:	1c39      	adds	r1, r7, #0
    3ba8:	9a03      	ldr	r2, [sp, #12]
    3baa:	9b02      	ldr	r3, [sp, #8]
    3bac:	f7ff ff75 	bl	3a9a <__sfputs_r>
    3bb0:	3001      	adds	r0, #1
    3bb2:	d075      	beq.n	3ca0 <_vfiprintf_r+0x1e0>
    3bb4:	696a      	ldr	r2, [r5, #20]
    3bb6:	9902      	ldr	r1, [sp, #8]
    3bb8:	1853      	adds	r3, r2, r1
    3bba:	616b      	str	r3, [r5, #20]
    3bbc:	7823      	ldrb	r3, [r4, #0]
    3bbe:	2b00      	cmp	r3, #0
    3bc0:	d06e      	beq.n	3ca0 <_vfiprintf_r+0x1e0>
    3bc2:	2201      	movs	r2, #1
    3bc4:	4252      	negs	r2, r2
    3bc6:	606a      	str	r2, [r5, #4]
    3bc8:	466a      	mov	r2, sp
    3bca:	2300      	movs	r3, #0
    3bcc:	325b      	adds	r2, #91	; 0x5b
    3bce:	3401      	adds	r4, #1
    3bd0:	602b      	str	r3, [r5, #0]
    3bd2:	60eb      	str	r3, [r5, #12]
    3bd4:	60ab      	str	r3, [r5, #8]
    3bd6:	7013      	strb	r3, [r2, #0]
    3bd8:	65ab      	str	r3, [r5, #88]	; 0x58
    3bda:	7821      	ldrb	r1, [r4, #0]
    3bdc:	483a      	ldr	r0, [pc, #232]	; (3cc8 <_vfiprintf_r+0x208>)
    3bde:	2205      	movs	r2, #5
    3be0:	f000 fc9e 	bl	4520 <memchr>
    3be4:	2800      	cmp	r0, #0
    3be6:	d008      	beq.n	3bfa <_vfiprintf_r+0x13a>
    3be8:	4a37      	ldr	r2, [pc, #220]	; (3cc8 <_vfiprintf_r+0x208>)
    3bea:	3401      	adds	r4, #1
    3bec:	1a83      	subs	r3, r0, r2
    3bee:	2001      	movs	r0, #1
    3bf0:	4098      	lsls	r0, r3
    3bf2:	682b      	ldr	r3, [r5, #0]
    3bf4:	4318      	orrs	r0, r3
    3bf6:	6028      	str	r0, [r5, #0]
    3bf8:	e7ef      	b.n	3bda <_vfiprintf_r+0x11a>
    3bfa:	682b      	ldr	r3, [r5, #0]
    3bfc:	06d9      	lsls	r1, r3, #27
    3bfe:	d503      	bpl.n	3c08 <_vfiprintf_r+0x148>
    3c00:	466a      	mov	r2, sp
    3c02:	2120      	movs	r1, #32
    3c04:	325b      	adds	r2, #91	; 0x5b
    3c06:	7011      	strb	r1, [r2, #0]
    3c08:	071a      	lsls	r2, r3, #28
    3c0a:	d503      	bpl.n	3c14 <_vfiprintf_r+0x154>
    3c0c:	466a      	mov	r2, sp
    3c0e:	212b      	movs	r1, #43	; 0x2b
    3c10:	325b      	adds	r2, #91	; 0x5b
    3c12:	7011      	strb	r1, [r2, #0]
    3c14:	7822      	ldrb	r2, [r4, #0]
    3c16:	2a2a      	cmp	r2, #42	; 0x2a
    3c18:	d084      	beq.n	3b24 <_vfiprintf_r+0x64>
    3c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c1c:	e005      	b.n	3c2a <_vfiprintf_r+0x16a>
    3c1e:	4252      	negs	r2, r2
    3c20:	60ea      	str	r2, [r5, #12]
    3c22:	2202      	movs	r2, #2
    3c24:	4313      	orrs	r3, r2
    3c26:	602b      	str	r3, [r5, #0]
    3c28:	e783      	b.n	3b32 <_vfiprintf_r+0x72>
    3c2a:	7822      	ldrb	r2, [r4, #0]
    3c2c:	3a30      	subs	r2, #48	; 0x30
    3c2e:	2a09      	cmp	r2, #9
    3c30:	d804      	bhi.n	3c3c <_vfiprintf_r+0x17c>
    3c32:	210a      	movs	r1, #10
    3c34:	434b      	muls	r3, r1
    3c36:	3401      	adds	r4, #1
    3c38:	189b      	adds	r3, r3, r2
    3c3a:	e7f6      	b.n	3c2a <_vfiprintf_r+0x16a>
    3c3c:	9309      	str	r3, [sp, #36]	; 0x24
    3c3e:	e779      	b.n	3b34 <_vfiprintf_r+0x74>
    3c40:	7863      	ldrb	r3, [r4, #1]
    3c42:	2b2a      	cmp	r3, #42	; 0x2a
    3c44:	d109      	bne.n	3c5a <_vfiprintf_r+0x19a>
    3c46:	9b05      	ldr	r3, [sp, #20]
    3c48:	3402      	adds	r4, #2
    3c4a:	1d1a      	adds	r2, r3, #4
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	9205      	str	r2, [sp, #20]
    3c50:	2b00      	cmp	r3, #0
    3c52:	da0d      	bge.n	3c70 <_vfiprintf_r+0x1b0>
    3c54:	2301      	movs	r3, #1
    3c56:	425b      	negs	r3, r3
    3c58:	e00a      	b.n	3c70 <_vfiprintf_r+0x1b0>
    3c5a:	3401      	adds	r4, #1
    3c5c:	2300      	movs	r3, #0
    3c5e:	7822      	ldrb	r2, [r4, #0]
    3c60:	3a30      	subs	r2, #48	; 0x30
    3c62:	2a09      	cmp	r2, #9
    3c64:	d804      	bhi.n	3c70 <_vfiprintf_r+0x1b0>
    3c66:	210a      	movs	r1, #10
    3c68:	434b      	muls	r3, r1
    3c6a:	3401      	adds	r4, #1
    3c6c:	189b      	adds	r3, r3, r2
    3c6e:	e7f6      	b.n	3c5e <_vfiprintf_r+0x19e>
    3c70:	9307      	str	r3, [sp, #28]
    3c72:	e763      	b.n	3b3c <_vfiprintf_r+0x7c>
    3c74:	ab05      	add	r3, sp, #20
    3c76:	9300      	str	r3, [sp, #0]
    3c78:	1c30      	adds	r0, r6, #0
    3c7a:	1c29      	adds	r1, r5, #0
    3c7c:	1c3a      	adds	r2, r7, #0
    3c7e:	4b13      	ldr	r3, [pc, #76]	; (3ccc <_vfiprintf_r+0x20c>)
    3c80:	e000      	b.n	3c84 <_vfiprintf_r+0x1c4>
    3c82:	bf00      	nop
    3c84:	e007      	b.n	3c96 <_vfiprintf_r+0x1d6>
    3c86:	ab05      	add	r3, sp, #20
    3c88:	9300      	str	r3, [sp, #0]
    3c8a:	1c30      	adds	r0, r6, #0
    3c8c:	1c29      	adds	r1, r5, #0
    3c8e:	1c3a      	adds	r2, r7, #0
    3c90:	4b0e      	ldr	r3, [pc, #56]	; (3ccc <_vfiprintf_r+0x20c>)
    3c92:	f000 f891 	bl	3db8 <_printf_i>
    3c96:	9004      	str	r0, [sp, #16]
    3c98:	9904      	ldr	r1, [sp, #16]
    3c9a:	3101      	adds	r1, #1
    3c9c:	d000      	beq.n	3ca0 <_vfiprintf_r+0x1e0>
    3c9e:	e770      	b.n	3b82 <_vfiprintf_r+0xc2>
    3ca0:	89bb      	ldrh	r3, [r7, #12]
    3ca2:	065a      	lsls	r2, r3, #25
    3ca4:	d500      	bpl.n	3ca8 <_vfiprintf_r+0x1e8>
    3ca6:	e73a      	b.n	3b1e <_vfiprintf_r+0x5e>
    3ca8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3caa:	b01f      	add	sp, #124	; 0x7c
    3cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	00004a8c 	.word	0x00004a8c
    3cb4:	00004aac 	.word	0x00004aac
    3cb8:	00004acc 	.word	0x00004acc
    3cbc:	00004a5e 	.word	0x00004a5e
    3cc0:	00004a62 	.word	0x00004a62
    3cc4:	00000000 	.word	0x00000000
    3cc8:	00004a58 	.word	0x00004a58
    3ccc:	00003a9b 	.word	0x00003a9b

00003cd0 <_printf_common>:
    3cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3cd2:	1c15      	adds	r5, r2, #0
    3cd4:	9301      	str	r3, [sp, #4]
    3cd6:	690a      	ldr	r2, [r1, #16]
    3cd8:	688b      	ldr	r3, [r1, #8]
    3cda:	1c06      	adds	r6, r0, #0
    3cdc:	1c0c      	adds	r4, r1, #0
    3cde:	4293      	cmp	r3, r2
    3ce0:	da00      	bge.n	3ce4 <_printf_common+0x14>
    3ce2:	1c13      	adds	r3, r2, #0
    3ce4:	1c22      	adds	r2, r4, #0
    3ce6:	602b      	str	r3, [r5, #0]
    3ce8:	3243      	adds	r2, #67	; 0x43
    3cea:	7812      	ldrb	r2, [r2, #0]
    3cec:	2a00      	cmp	r2, #0
    3cee:	d001      	beq.n	3cf4 <_printf_common+0x24>
    3cf0:	3301      	adds	r3, #1
    3cf2:	602b      	str	r3, [r5, #0]
    3cf4:	6820      	ldr	r0, [r4, #0]
    3cf6:	0680      	lsls	r0, r0, #26
    3cf8:	d502      	bpl.n	3d00 <_printf_common+0x30>
    3cfa:	682b      	ldr	r3, [r5, #0]
    3cfc:	3302      	adds	r3, #2
    3cfe:	602b      	str	r3, [r5, #0]
    3d00:	6821      	ldr	r1, [r4, #0]
    3d02:	2706      	movs	r7, #6
    3d04:	400f      	ands	r7, r1
    3d06:	d01f      	beq.n	3d48 <_printf_common+0x78>
    3d08:	1c23      	adds	r3, r4, #0
    3d0a:	3343      	adds	r3, #67	; 0x43
    3d0c:	781b      	ldrb	r3, [r3, #0]
    3d0e:	1e5a      	subs	r2, r3, #1
    3d10:	4193      	sbcs	r3, r2
    3d12:	6822      	ldr	r2, [r4, #0]
    3d14:	0692      	lsls	r2, r2, #26
    3d16:	d51f      	bpl.n	3d58 <_printf_common+0x88>
    3d18:	18e1      	adds	r1, r4, r3
    3d1a:	3140      	adds	r1, #64	; 0x40
    3d1c:	2030      	movs	r0, #48	; 0x30
    3d1e:	70c8      	strb	r0, [r1, #3]
    3d20:	1c21      	adds	r1, r4, #0
    3d22:	1c5a      	adds	r2, r3, #1
    3d24:	3145      	adds	r1, #69	; 0x45
    3d26:	7809      	ldrb	r1, [r1, #0]
    3d28:	18a2      	adds	r2, r4, r2
    3d2a:	3240      	adds	r2, #64	; 0x40
    3d2c:	3302      	adds	r3, #2
    3d2e:	70d1      	strb	r1, [r2, #3]
    3d30:	e012      	b.n	3d58 <_printf_common+0x88>
    3d32:	1c22      	adds	r2, r4, #0
    3d34:	1c30      	adds	r0, r6, #0
    3d36:	9901      	ldr	r1, [sp, #4]
    3d38:	3219      	adds	r2, #25
    3d3a:	2301      	movs	r3, #1
    3d3c:	9f08      	ldr	r7, [sp, #32]
    3d3e:	47b8      	blx	r7
    3d40:	3001      	adds	r0, #1
    3d42:	d011      	beq.n	3d68 <_printf_common+0x98>
    3d44:	9f00      	ldr	r7, [sp, #0]
    3d46:	3701      	adds	r7, #1
    3d48:	9700      	str	r7, [sp, #0]
    3d4a:	68e0      	ldr	r0, [r4, #12]
    3d4c:	6829      	ldr	r1, [r5, #0]
    3d4e:	9f00      	ldr	r7, [sp, #0]
    3d50:	1a43      	subs	r3, r0, r1
    3d52:	429f      	cmp	r7, r3
    3d54:	dbed      	blt.n	3d32 <_printf_common+0x62>
    3d56:	e7d7      	b.n	3d08 <_printf_common+0x38>
    3d58:	1c22      	adds	r2, r4, #0
    3d5a:	1c30      	adds	r0, r6, #0
    3d5c:	9901      	ldr	r1, [sp, #4]
    3d5e:	3243      	adds	r2, #67	; 0x43
    3d60:	9f08      	ldr	r7, [sp, #32]
    3d62:	47b8      	blx	r7
    3d64:	3001      	adds	r0, #1
    3d66:	d102      	bne.n	3d6e <_printf_common+0x9e>
    3d68:	2001      	movs	r0, #1
    3d6a:	4240      	negs	r0, r0
    3d6c:	e023      	b.n	3db6 <_printf_common+0xe6>
    3d6e:	6820      	ldr	r0, [r4, #0]
    3d70:	2106      	movs	r1, #6
    3d72:	682b      	ldr	r3, [r5, #0]
    3d74:	68e2      	ldr	r2, [r4, #12]
    3d76:	4001      	ands	r1, r0
    3d78:	2500      	movs	r5, #0
    3d7a:	2904      	cmp	r1, #4
    3d7c:	d103      	bne.n	3d86 <_printf_common+0xb6>
    3d7e:	1ad5      	subs	r5, r2, r3
    3d80:	43eb      	mvns	r3, r5
    3d82:	17db      	asrs	r3, r3, #31
    3d84:	401d      	ands	r5, r3
    3d86:	68a2      	ldr	r2, [r4, #8]
    3d88:	6923      	ldr	r3, [r4, #16]
    3d8a:	429a      	cmp	r2, r3
    3d8c:	dd01      	ble.n	3d92 <_printf_common+0xc2>
    3d8e:	1ad3      	subs	r3, r2, r3
    3d90:	18ed      	adds	r5, r5, r3
    3d92:	2700      	movs	r7, #0
    3d94:	9700      	str	r7, [sp, #0]
    3d96:	9f00      	ldr	r7, [sp, #0]
    3d98:	42af      	cmp	r7, r5
    3d9a:	da0b      	bge.n	3db4 <_printf_common+0xe4>
    3d9c:	1c22      	adds	r2, r4, #0
    3d9e:	1c30      	adds	r0, r6, #0
    3da0:	9901      	ldr	r1, [sp, #4]
    3da2:	321a      	adds	r2, #26
    3da4:	2301      	movs	r3, #1
    3da6:	9f08      	ldr	r7, [sp, #32]
    3da8:	47b8      	blx	r7
    3daa:	3001      	adds	r0, #1
    3dac:	d0dc      	beq.n	3d68 <_printf_common+0x98>
    3dae:	9f00      	ldr	r7, [sp, #0]
    3db0:	3701      	adds	r7, #1
    3db2:	e7ef      	b.n	3d94 <_printf_common+0xc4>
    3db4:	2000      	movs	r0, #0
    3db6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003db8 <_printf_i>:
    3db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dba:	1c0d      	adds	r5, r1, #0
    3dbc:	b08b      	sub	sp, #44	; 0x2c
    3dbe:	3543      	adds	r5, #67	; 0x43
    3dc0:	9206      	str	r2, [sp, #24]
    3dc2:	9005      	str	r0, [sp, #20]
    3dc4:	9307      	str	r3, [sp, #28]
    3dc6:	9504      	str	r5, [sp, #16]
    3dc8:	7e0b      	ldrb	r3, [r1, #24]
    3dca:	1c0c      	adds	r4, r1, #0
    3dcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3dce:	2b6e      	cmp	r3, #110	; 0x6e
    3dd0:	d100      	bne.n	3dd4 <_printf_i+0x1c>
    3dd2:	e0a7      	b.n	3f24 <_printf_i+0x16c>
    3dd4:	d811      	bhi.n	3dfa <_printf_i+0x42>
    3dd6:	2b63      	cmp	r3, #99	; 0x63
    3dd8:	d022      	beq.n	3e20 <_printf_i+0x68>
    3dda:	d809      	bhi.n	3df0 <_printf_i+0x38>
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d100      	bne.n	3de2 <_printf_i+0x2a>
    3de0:	e0b0      	b.n	3f44 <_printf_i+0x18c>
    3de2:	2b58      	cmp	r3, #88	; 0x58
    3de4:	d000      	beq.n	3de8 <_printf_i+0x30>
    3de6:	e0c0      	b.n	3f6a <_printf_i+0x1b2>
    3de8:	3145      	adds	r1, #69	; 0x45
    3dea:	700b      	strb	r3, [r1, #0]
    3dec:	4d7b      	ldr	r5, [pc, #492]	; (3fdc <_printf_i+0x224>)
    3dee:	e04e      	b.n	3e8e <_printf_i+0xd6>
    3df0:	2b64      	cmp	r3, #100	; 0x64
    3df2:	d01c      	beq.n	3e2e <_printf_i+0x76>
    3df4:	2b69      	cmp	r3, #105	; 0x69
    3df6:	d01a      	beq.n	3e2e <_printf_i+0x76>
    3df8:	e0b7      	b.n	3f6a <_printf_i+0x1b2>
    3dfa:	2b73      	cmp	r3, #115	; 0x73
    3dfc:	d100      	bne.n	3e00 <_printf_i+0x48>
    3dfe:	e0a5      	b.n	3f4c <_printf_i+0x194>
    3e00:	d809      	bhi.n	3e16 <_printf_i+0x5e>
    3e02:	2b6f      	cmp	r3, #111	; 0x6f
    3e04:	d029      	beq.n	3e5a <_printf_i+0xa2>
    3e06:	2b70      	cmp	r3, #112	; 0x70
    3e08:	d000      	beq.n	3e0c <_printf_i+0x54>
    3e0a:	e0ae      	b.n	3f6a <_printf_i+0x1b2>
    3e0c:	680e      	ldr	r6, [r1, #0]
    3e0e:	2320      	movs	r3, #32
    3e10:	4333      	orrs	r3, r6
    3e12:	600b      	str	r3, [r1, #0]
    3e14:	e036      	b.n	3e84 <_printf_i+0xcc>
    3e16:	2b75      	cmp	r3, #117	; 0x75
    3e18:	d01f      	beq.n	3e5a <_printf_i+0xa2>
    3e1a:	2b78      	cmp	r3, #120	; 0x78
    3e1c:	d032      	beq.n	3e84 <_printf_i+0xcc>
    3e1e:	e0a4      	b.n	3f6a <_printf_i+0x1b2>
    3e20:	6813      	ldr	r3, [r2, #0]
    3e22:	1c0d      	adds	r5, r1, #0
    3e24:	1d19      	adds	r1, r3, #4
    3e26:	3542      	adds	r5, #66	; 0x42
    3e28:	6011      	str	r1, [r2, #0]
    3e2a:	681b      	ldr	r3, [r3, #0]
    3e2c:	e09f      	b.n	3f6e <_printf_i+0x1b6>
    3e2e:	6821      	ldr	r1, [r4, #0]
    3e30:	6813      	ldr	r3, [r2, #0]
    3e32:	060e      	lsls	r6, r1, #24
    3e34:	d503      	bpl.n	3e3e <_printf_i+0x86>
    3e36:	1d19      	adds	r1, r3, #4
    3e38:	6011      	str	r1, [r2, #0]
    3e3a:	681e      	ldr	r6, [r3, #0]
    3e3c:	e005      	b.n	3e4a <_printf_i+0x92>
    3e3e:	0648      	lsls	r0, r1, #25
    3e40:	d5f9      	bpl.n	3e36 <_printf_i+0x7e>
    3e42:	1d19      	adds	r1, r3, #4
    3e44:	6011      	str	r1, [r2, #0]
    3e46:	2100      	movs	r1, #0
    3e48:	5e5e      	ldrsh	r6, [r3, r1]
    3e4a:	4b64      	ldr	r3, [pc, #400]	; (3fdc <_printf_i+0x224>)
    3e4c:	2e00      	cmp	r6, #0
    3e4e:	da3b      	bge.n	3ec8 <_printf_i+0x110>
    3e50:	9d04      	ldr	r5, [sp, #16]
    3e52:	222d      	movs	r2, #45	; 0x2d
    3e54:	4276      	negs	r6, r6
    3e56:	702a      	strb	r2, [r5, #0]
    3e58:	e036      	b.n	3ec8 <_printf_i+0x110>
    3e5a:	6821      	ldr	r1, [r4, #0]
    3e5c:	6813      	ldr	r3, [r2, #0]
    3e5e:	060e      	lsls	r6, r1, #24
    3e60:	d503      	bpl.n	3e6a <_printf_i+0xb2>
    3e62:	1d19      	adds	r1, r3, #4
    3e64:	6011      	str	r1, [r2, #0]
    3e66:	681e      	ldr	r6, [r3, #0]
    3e68:	e004      	b.n	3e74 <_printf_i+0xbc>
    3e6a:	0648      	lsls	r0, r1, #25
    3e6c:	d5f9      	bpl.n	3e62 <_printf_i+0xaa>
    3e6e:	1d19      	adds	r1, r3, #4
    3e70:	881e      	ldrh	r6, [r3, #0]
    3e72:	6011      	str	r1, [r2, #0]
    3e74:	4b59      	ldr	r3, [pc, #356]	; (3fdc <_printf_i+0x224>)
    3e76:	7e22      	ldrb	r2, [r4, #24]
    3e78:	9303      	str	r3, [sp, #12]
    3e7a:	2708      	movs	r7, #8
    3e7c:	2a6f      	cmp	r2, #111	; 0x6f
    3e7e:	d01e      	beq.n	3ebe <_printf_i+0x106>
    3e80:	270a      	movs	r7, #10
    3e82:	e01c      	b.n	3ebe <_printf_i+0x106>
    3e84:	1c23      	adds	r3, r4, #0
    3e86:	2178      	movs	r1, #120	; 0x78
    3e88:	3345      	adds	r3, #69	; 0x45
    3e8a:	4d55      	ldr	r5, [pc, #340]	; (3fe0 <_printf_i+0x228>)
    3e8c:	7019      	strb	r1, [r3, #0]
    3e8e:	6811      	ldr	r1, [r2, #0]
    3e90:	6823      	ldr	r3, [r4, #0]
    3e92:	1d08      	adds	r0, r1, #4
    3e94:	9503      	str	r5, [sp, #12]
    3e96:	6010      	str	r0, [r2, #0]
    3e98:	061e      	lsls	r6, r3, #24
    3e9a:	d501      	bpl.n	3ea0 <_printf_i+0xe8>
    3e9c:	680e      	ldr	r6, [r1, #0]
    3e9e:	e002      	b.n	3ea6 <_printf_i+0xee>
    3ea0:	0658      	lsls	r0, r3, #25
    3ea2:	d5fb      	bpl.n	3e9c <_printf_i+0xe4>
    3ea4:	880e      	ldrh	r6, [r1, #0]
    3ea6:	07d9      	lsls	r1, r3, #31
    3ea8:	d502      	bpl.n	3eb0 <_printf_i+0xf8>
    3eaa:	2220      	movs	r2, #32
    3eac:	4313      	orrs	r3, r2
    3eae:	6023      	str	r3, [r4, #0]
    3eb0:	2710      	movs	r7, #16
    3eb2:	2e00      	cmp	r6, #0
    3eb4:	d103      	bne.n	3ebe <_printf_i+0x106>
    3eb6:	6822      	ldr	r2, [r4, #0]
    3eb8:	2320      	movs	r3, #32
    3eba:	439a      	bics	r2, r3
    3ebc:	6022      	str	r2, [r4, #0]
    3ebe:	1c23      	adds	r3, r4, #0
    3ec0:	2200      	movs	r2, #0
    3ec2:	3343      	adds	r3, #67	; 0x43
    3ec4:	701a      	strb	r2, [r3, #0]
    3ec6:	e001      	b.n	3ecc <_printf_i+0x114>
    3ec8:	9303      	str	r3, [sp, #12]
    3eca:	270a      	movs	r7, #10
    3ecc:	6863      	ldr	r3, [r4, #4]
    3ece:	60a3      	str	r3, [r4, #8]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	db03      	blt.n	3edc <_printf_i+0x124>
    3ed4:	6825      	ldr	r5, [r4, #0]
    3ed6:	2204      	movs	r2, #4
    3ed8:	4395      	bics	r5, r2
    3eda:	6025      	str	r5, [r4, #0]
    3edc:	2e00      	cmp	r6, #0
    3ede:	d102      	bne.n	3ee6 <_printf_i+0x12e>
    3ee0:	9d04      	ldr	r5, [sp, #16]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d00e      	beq.n	3f04 <_printf_i+0x14c>
    3ee6:	9d04      	ldr	r5, [sp, #16]
    3ee8:	1c30      	adds	r0, r6, #0
    3eea:	1c39      	adds	r1, r7, #0
    3eec:	f7fd fe0c 	bl	1b08 <__aeabi_uidivmod>
    3ef0:	9803      	ldr	r0, [sp, #12]
    3ef2:	3d01      	subs	r5, #1
    3ef4:	5c43      	ldrb	r3, [r0, r1]
    3ef6:	1c30      	adds	r0, r6, #0
    3ef8:	702b      	strb	r3, [r5, #0]
    3efa:	1c39      	adds	r1, r7, #0
    3efc:	f7fd fdc0 	bl	1a80 <__aeabi_uidiv>
    3f00:	1e06      	subs	r6, r0, #0
    3f02:	d1f1      	bne.n	3ee8 <_printf_i+0x130>
    3f04:	2f08      	cmp	r7, #8
    3f06:	d109      	bne.n	3f1c <_printf_i+0x164>
    3f08:	6821      	ldr	r1, [r4, #0]
    3f0a:	07c9      	lsls	r1, r1, #31
    3f0c:	d506      	bpl.n	3f1c <_printf_i+0x164>
    3f0e:	6862      	ldr	r2, [r4, #4]
    3f10:	6923      	ldr	r3, [r4, #16]
    3f12:	429a      	cmp	r2, r3
    3f14:	dc02      	bgt.n	3f1c <_printf_i+0x164>
    3f16:	3d01      	subs	r5, #1
    3f18:	2330      	movs	r3, #48	; 0x30
    3f1a:	702b      	strb	r3, [r5, #0]
    3f1c:	9e04      	ldr	r6, [sp, #16]
    3f1e:	1b73      	subs	r3, r6, r5
    3f20:	6123      	str	r3, [r4, #16]
    3f22:	e02a      	b.n	3f7a <_printf_i+0x1c2>
    3f24:	6808      	ldr	r0, [r1, #0]
    3f26:	6813      	ldr	r3, [r2, #0]
    3f28:	6949      	ldr	r1, [r1, #20]
    3f2a:	0605      	lsls	r5, r0, #24
    3f2c:	d504      	bpl.n	3f38 <_printf_i+0x180>
    3f2e:	1d18      	adds	r0, r3, #4
    3f30:	6010      	str	r0, [r2, #0]
    3f32:	681b      	ldr	r3, [r3, #0]
    3f34:	6019      	str	r1, [r3, #0]
    3f36:	e005      	b.n	3f44 <_printf_i+0x18c>
    3f38:	0646      	lsls	r6, r0, #25
    3f3a:	d5f8      	bpl.n	3f2e <_printf_i+0x176>
    3f3c:	1d18      	adds	r0, r3, #4
    3f3e:	6010      	str	r0, [r2, #0]
    3f40:	681b      	ldr	r3, [r3, #0]
    3f42:	8019      	strh	r1, [r3, #0]
    3f44:	2300      	movs	r3, #0
    3f46:	6123      	str	r3, [r4, #16]
    3f48:	9d04      	ldr	r5, [sp, #16]
    3f4a:	e016      	b.n	3f7a <_printf_i+0x1c2>
    3f4c:	6813      	ldr	r3, [r2, #0]
    3f4e:	1d19      	adds	r1, r3, #4
    3f50:	6011      	str	r1, [r2, #0]
    3f52:	681d      	ldr	r5, [r3, #0]
    3f54:	1c28      	adds	r0, r5, #0
    3f56:	f000 fbe9 	bl	472c <strlen>
    3f5a:	6863      	ldr	r3, [r4, #4]
    3f5c:	6120      	str	r0, [r4, #16]
    3f5e:	4298      	cmp	r0, r3
    3f60:	d900      	bls.n	3f64 <_printf_i+0x1ac>
    3f62:	6123      	str	r3, [r4, #16]
    3f64:	6920      	ldr	r0, [r4, #16]
    3f66:	6060      	str	r0, [r4, #4]
    3f68:	e004      	b.n	3f74 <_printf_i+0x1bc>
    3f6a:	1c25      	adds	r5, r4, #0
    3f6c:	3542      	adds	r5, #66	; 0x42
    3f6e:	702b      	strb	r3, [r5, #0]
    3f70:	2301      	movs	r3, #1
    3f72:	6123      	str	r3, [r4, #16]
    3f74:	9e04      	ldr	r6, [sp, #16]
    3f76:	2300      	movs	r3, #0
    3f78:	7033      	strb	r3, [r6, #0]
    3f7a:	9e07      	ldr	r6, [sp, #28]
    3f7c:	9805      	ldr	r0, [sp, #20]
    3f7e:	9600      	str	r6, [sp, #0]
    3f80:	1c21      	adds	r1, r4, #0
    3f82:	aa09      	add	r2, sp, #36	; 0x24
    3f84:	9b06      	ldr	r3, [sp, #24]
    3f86:	f7ff fea3 	bl	3cd0 <_printf_common>
    3f8a:	3001      	adds	r0, #1
    3f8c:	d102      	bne.n	3f94 <_printf_i+0x1dc>
    3f8e:	2001      	movs	r0, #1
    3f90:	4240      	negs	r0, r0
    3f92:	e021      	b.n	3fd8 <_printf_i+0x220>
    3f94:	1c2a      	adds	r2, r5, #0
    3f96:	9805      	ldr	r0, [sp, #20]
    3f98:	9906      	ldr	r1, [sp, #24]
    3f9a:	6923      	ldr	r3, [r4, #16]
    3f9c:	9d07      	ldr	r5, [sp, #28]
    3f9e:	47a8      	blx	r5
    3fa0:	3001      	adds	r0, #1
    3fa2:	d0f4      	beq.n	3f8e <_printf_i+0x1d6>
    3fa4:	6826      	ldr	r6, [r4, #0]
    3fa6:	07b6      	lsls	r6, r6, #30
    3fa8:	d405      	bmi.n	3fb6 <_printf_i+0x1fe>
    3faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3fac:	68e0      	ldr	r0, [r4, #12]
    3fae:	4298      	cmp	r0, r3
    3fb0:	da12      	bge.n	3fd8 <_printf_i+0x220>
    3fb2:	1c18      	adds	r0, r3, #0
    3fb4:	e010      	b.n	3fd8 <_printf_i+0x220>
    3fb6:	2500      	movs	r5, #0
    3fb8:	68e0      	ldr	r0, [r4, #12]
    3fba:	9909      	ldr	r1, [sp, #36]	; 0x24
    3fbc:	1a43      	subs	r3, r0, r1
    3fbe:	429d      	cmp	r5, r3
    3fc0:	daf3      	bge.n	3faa <_printf_i+0x1f2>
    3fc2:	1c22      	adds	r2, r4, #0
    3fc4:	9805      	ldr	r0, [sp, #20]
    3fc6:	9906      	ldr	r1, [sp, #24]
    3fc8:	3219      	adds	r2, #25
    3fca:	2301      	movs	r3, #1
    3fcc:	9e07      	ldr	r6, [sp, #28]
    3fce:	47b0      	blx	r6
    3fd0:	3001      	adds	r0, #1
    3fd2:	d0dc      	beq.n	3f8e <_printf_i+0x1d6>
    3fd4:	3501      	adds	r5, #1
    3fd6:	e7ef      	b.n	3fb8 <_printf_i+0x200>
    3fd8:	b00b      	add	sp, #44	; 0x2c
    3fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fdc:	00004a69 	.word	0x00004a69
    3fe0:	00004a7a 	.word	0x00004a7a

00003fe4 <__swbuf_r>:
    3fe4:	b570      	push	{r4, r5, r6, lr}
    3fe6:	1c05      	adds	r5, r0, #0
    3fe8:	1c0e      	adds	r6, r1, #0
    3fea:	1c14      	adds	r4, r2, #0
    3fec:	2800      	cmp	r0, #0
    3fee:	d004      	beq.n	3ffa <__swbuf_r+0x16>
    3ff0:	6982      	ldr	r2, [r0, #24]
    3ff2:	2a00      	cmp	r2, #0
    3ff4:	d101      	bne.n	3ffa <__swbuf_r+0x16>
    3ff6:	f000 f9c9 	bl	438c <__sinit>
    3ffa:	4b23      	ldr	r3, [pc, #140]	; (4088 <__swbuf_r+0xa4>)
    3ffc:	429c      	cmp	r4, r3
    3ffe:	d101      	bne.n	4004 <__swbuf_r+0x20>
    4000:	686c      	ldr	r4, [r5, #4]
    4002:	e008      	b.n	4016 <__swbuf_r+0x32>
    4004:	4b21      	ldr	r3, [pc, #132]	; (408c <__swbuf_r+0xa8>)
    4006:	429c      	cmp	r4, r3
    4008:	d101      	bne.n	400e <__swbuf_r+0x2a>
    400a:	68ac      	ldr	r4, [r5, #8]
    400c:	e003      	b.n	4016 <__swbuf_r+0x32>
    400e:	4b20      	ldr	r3, [pc, #128]	; (4090 <__swbuf_r+0xac>)
    4010:	429c      	cmp	r4, r3
    4012:	d100      	bne.n	4016 <__swbuf_r+0x32>
    4014:	68ec      	ldr	r4, [r5, #12]
    4016:	69a3      	ldr	r3, [r4, #24]
    4018:	60a3      	str	r3, [r4, #8]
    401a:	89a3      	ldrh	r3, [r4, #12]
    401c:	071a      	lsls	r2, r3, #28
    401e:	d50a      	bpl.n	4036 <__swbuf_r+0x52>
    4020:	6923      	ldr	r3, [r4, #16]
    4022:	2b00      	cmp	r3, #0
    4024:	d007      	beq.n	4036 <__swbuf_r+0x52>
    4026:	6822      	ldr	r2, [r4, #0]
    4028:	6923      	ldr	r3, [r4, #16]
    402a:	b2f6      	uxtb	r6, r6
    402c:	1ad0      	subs	r0, r2, r3
    402e:	6962      	ldr	r2, [r4, #20]
    4030:	4290      	cmp	r0, r2
    4032:	db0f      	blt.n	4054 <__swbuf_r+0x70>
    4034:	e008      	b.n	4048 <__swbuf_r+0x64>
    4036:	1c28      	adds	r0, r5, #0
    4038:	1c21      	adds	r1, r4, #0
    403a:	f000 f82b 	bl	4094 <__swsetup_r>
    403e:	2800      	cmp	r0, #0
    4040:	d0f1      	beq.n	4026 <__swbuf_r+0x42>
    4042:	2001      	movs	r0, #1
    4044:	4240      	negs	r0, r0
    4046:	e01d      	b.n	4084 <__swbuf_r+0xa0>
    4048:	1c28      	adds	r0, r5, #0
    404a:	1c21      	adds	r1, r4, #0
    404c:	f000 f91e 	bl	428c <_fflush_r>
    4050:	2800      	cmp	r0, #0
    4052:	d1f6      	bne.n	4042 <__swbuf_r+0x5e>
    4054:	68a3      	ldr	r3, [r4, #8]
    4056:	3001      	adds	r0, #1
    4058:	3b01      	subs	r3, #1
    405a:	60a3      	str	r3, [r4, #8]
    405c:	6823      	ldr	r3, [r4, #0]
    405e:	1c5a      	adds	r2, r3, #1
    4060:	6022      	str	r2, [r4, #0]
    4062:	701e      	strb	r6, [r3, #0]
    4064:	6963      	ldr	r3, [r4, #20]
    4066:	4298      	cmp	r0, r3
    4068:	d005      	beq.n	4076 <__swbuf_r+0x92>
    406a:	89a3      	ldrh	r3, [r4, #12]
    406c:	1c30      	adds	r0, r6, #0
    406e:	07da      	lsls	r2, r3, #31
    4070:	d508      	bpl.n	4084 <__swbuf_r+0xa0>
    4072:	2e0a      	cmp	r6, #10
    4074:	d106      	bne.n	4084 <__swbuf_r+0xa0>
    4076:	1c28      	adds	r0, r5, #0
    4078:	1c21      	adds	r1, r4, #0
    407a:	f000 f907 	bl	428c <_fflush_r>
    407e:	2800      	cmp	r0, #0
    4080:	d1df      	bne.n	4042 <__swbuf_r+0x5e>
    4082:	1c30      	adds	r0, r6, #0
    4084:	bd70      	pop	{r4, r5, r6, pc}
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	00004a8c 	.word	0x00004a8c
    408c:	00004aac 	.word	0x00004aac
    4090:	00004acc 	.word	0x00004acc

00004094 <__swsetup_r>:
    4094:	4b34      	ldr	r3, [pc, #208]	; (4168 <__swsetup_r+0xd4>)
    4096:	b570      	push	{r4, r5, r6, lr}
    4098:	681d      	ldr	r5, [r3, #0]
    409a:	1c06      	adds	r6, r0, #0
    409c:	1c0c      	adds	r4, r1, #0
    409e:	2d00      	cmp	r5, #0
    40a0:	d005      	beq.n	40ae <__swsetup_r+0x1a>
    40a2:	69a9      	ldr	r1, [r5, #24]
    40a4:	2900      	cmp	r1, #0
    40a6:	d102      	bne.n	40ae <__swsetup_r+0x1a>
    40a8:	1c28      	adds	r0, r5, #0
    40aa:	f000 f96f 	bl	438c <__sinit>
    40ae:	4b2f      	ldr	r3, [pc, #188]	; (416c <__swsetup_r+0xd8>)
    40b0:	429c      	cmp	r4, r3
    40b2:	d101      	bne.n	40b8 <__swsetup_r+0x24>
    40b4:	686c      	ldr	r4, [r5, #4]
    40b6:	e008      	b.n	40ca <__swsetup_r+0x36>
    40b8:	4b2d      	ldr	r3, [pc, #180]	; (4170 <__swsetup_r+0xdc>)
    40ba:	429c      	cmp	r4, r3
    40bc:	d101      	bne.n	40c2 <__swsetup_r+0x2e>
    40be:	68ac      	ldr	r4, [r5, #8]
    40c0:	e003      	b.n	40ca <__swsetup_r+0x36>
    40c2:	4b2c      	ldr	r3, [pc, #176]	; (4174 <__swsetup_r+0xe0>)
    40c4:	429c      	cmp	r4, r3
    40c6:	d100      	bne.n	40ca <__swsetup_r+0x36>
    40c8:	68ec      	ldr	r4, [r5, #12]
    40ca:	89a2      	ldrh	r2, [r4, #12]
    40cc:	b293      	uxth	r3, r2
    40ce:	0719      	lsls	r1, r3, #28
    40d0:	d421      	bmi.n	4116 <__swsetup_r+0x82>
    40d2:	06d9      	lsls	r1, r3, #27
    40d4:	d405      	bmi.n	40e2 <__swsetup_r+0x4e>
    40d6:	2309      	movs	r3, #9
    40d8:	6033      	str	r3, [r6, #0]
    40da:	2340      	movs	r3, #64	; 0x40
    40dc:	431a      	orrs	r2, r3
    40de:	81a2      	strh	r2, [r4, #12]
    40e0:	e03f      	b.n	4162 <__swsetup_r+0xce>
    40e2:	075a      	lsls	r2, r3, #29
    40e4:	d513      	bpl.n	410e <__swsetup_r+0x7a>
    40e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    40e8:	2900      	cmp	r1, #0
    40ea:	d008      	beq.n	40fe <__swsetup_r+0x6a>
    40ec:	1c23      	adds	r3, r4, #0
    40ee:	3344      	adds	r3, #68	; 0x44
    40f0:	4299      	cmp	r1, r3
    40f2:	d002      	beq.n	40fa <__swsetup_r+0x66>
    40f4:	1c30      	adds	r0, r6, #0
    40f6:	f000 fa1f 	bl	4538 <_free_r>
    40fa:	2300      	movs	r3, #0
    40fc:	6363      	str	r3, [r4, #52]	; 0x34
    40fe:	89a3      	ldrh	r3, [r4, #12]
    4100:	2224      	movs	r2, #36	; 0x24
    4102:	4393      	bics	r3, r2
    4104:	81a3      	strh	r3, [r4, #12]
    4106:	2300      	movs	r3, #0
    4108:	6063      	str	r3, [r4, #4]
    410a:	6923      	ldr	r3, [r4, #16]
    410c:	6023      	str	r3, [r4, #0]
    410e:	89a3      	ldrh	r3, [r4, #12]
    4110:	2208      	movs	r2, #8
    4112:	4313      	orrs	r3, r2
    4114:	81a3      	strh	r3, [r4, #12]
    4116:	6921      	ldr	r1, [r4, #16]
    4118:	2900      	cmp	r1, #0
    411a:	d10b      	bne.n	4134 <__swsetup_r+0xa0>
    411c:	89a3      	ldrh	r3, [r4, #12]
    411e:	22a0      	movs	r2, #160	; 0xa0
    4120:	0092      	lsls	r2, r2, #2
    4122:	401a      	ands	r2, r3
    4124:	2380      	movs	r3, #128	; 0x80
    4126:	009b      	lsls	r3, r3, #2
    4128:	429a      	cmp	r2, r3
    412a:	d003      	beq.n	4134 <__swsetup_r+0xa0>
    412c:	1c30      	adds	r0, r6, #0
    412e:	1c21      	adds	r1, r4, #0
    4130:	f000 f99c 	bl	446c <__smakebuf_r>
    4134:	89a3      	ldrh	r3, [r4, #12]
    4136:	2201      	movs	r2, #1
    4138:	401a      	ands	r2, r3
    413a:	d005      	beq.n	4148 <__swsetup_r+0xb4>
    413c:	6961      	ldr	r1, [r4, #20]
    413e:	2200      	movs	r2, #0
    4140:	60a2      	str	r2, [r4, #8]
    4142:	424a      	negs	r2, r1
    4144:	61a2      	str	r2, [r4, #24]
    4146:	e003      	b.n	4150 <__swsetup_r+0xbc>
    4148:	0799      	lsls	r1, r3, #30
    414a:	d400      	bmi.n	414e <__swsetup_r+0xba>
    414c:	6962      	ldr	r2, [r4, #20]
    414e:	60a2      	str	r2, [r4, #8]
    4150:	6922      	ldr	r2, [r4, #16]
    4152:	2000      	movs	r0, #0
    4154:	4282      	cmp	r2, r0
    4156:	d106      	bne.n	4166 <__swsetup_r+0xd2>
    4158:	0619      	lsls	r1, r3, #24
    415a:	d504      	bpl.n	4166 <__swsetup_r+0xd2>
    415c:	2240      	movs	r2, #64	; 0x40
    415e:	4313      	orrs	r3, r2
    4160:	81a3      	strh	r3, [r4, #12]
    4162:	2001      	movs	r0, #1
    4164:	4240      	negs	r0, r0
    4166:	bd70      	pop	{r4, r5, r6, pc}
    4168:	2000006c 	.word	0x2000006c
    416c:	00004a8c 	.word	0x00004a8c
    4170:	00004aac 	.word	0x00004aac
    4174:	00004acc 	.word	0x00004acc

00004178 <__sflush_r>:
    4178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    417a:	898b      	ldrh	r3, [r1, #12]
    417c:	1c05      	adds	r5, r0, #0
    417e:	1c0c      	adds	r4, r1, #0
    4180:	0719      	lsls	r1, r3, #28
    4182:	d45e      	bmi.n	4242 <__sflush_r+0xca>
    4184:	6862      	ldr	r2, [r4, #4]
    4186:	2a00      	cmp	r2, #0
    4188:	dc02      	bgt.n	4190 <__sflush_r+0x18>
    418a:	6c27      	ldr	r7, [r4, #64]	; 0x40
    418c:	2f00      	cmp	r7, #0
    418e:	dd1a      	ble.n	41c6 <__sflush_r+0x4e>
    4190:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4192:	2f00      	cmp	r7, #0
    4194:	d017      	beq.n	41c6 <__sflush_r+0x4e>
    4196:	2200      	movs	r2, #0
    4198:	682e      	ldr	r6, [r5, #0]
    419a:	602a      	str	r2, [r5, #0]
    419c:	2280      	movs	r2, #128	; 0x80
    419e:	0152      	lsls	r2, r2, #5
    41a0:	401a      	ands	r2, r3
    41a2:	d001      	beq.n	41a8 <__sflush_r+0x30>
    41a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    41a6:	e015      	b.n	41d4 <__sflush_r+0x5c>
    41a8:	1c28      	adds	r0, r5, #0
    41aa:	6a21      	ldr	r1, [r4, #32]
    41ac:	2301      	movs	r3, #1
    41ae:	47b8      	blx	r7
    41b0:	1c02      	adds	r2, r0, #0
    41b2:	1c41      	adds	r1, r0, #1
    41b4:	d10e      	bne.n	41d4 <__sflush_r+0x5c>
    41b6:	682b      	ldr	r3, [r5, #0]
    41b8:	2b00      	cmp	r3, #0
    41ba:	d00b      	beq.n	41d4 <__sflush_r+0x5c>
    41bc:	2b1d      	cmp	r3, #29
    41be:	d001      	beq.n	41c4 <__sflush_r+0x4c>
    41c0:	2b16      	cmp	r3, #22
    41c2:	d102      	bne.n	41ca <__sflush_r+0x52>
    41c4:	602e      	str	r6, [r5, #0]
    41c6:	2000      	movs	r0, #0
    41c8:	e05e      	b.n	4288 <__sflush_r+0x110>
    41ca:	89a3      	ldrh	r3, [r4, #12]
    41cc:	2140      	movs	r1, #64	; 0x40
    41ce:	430b      	orrs	r3, r1
    41d0:	81a3      	strh	r3, [r4, #12]
    41d2:	e059      	b.n	4288 <__sflush_r+0x110>
    41d4:	89a3      	ldrh	r3, [r4, #12]
    41d6:	075f      	lsls	r7, r3, #29
    41d8:	d506      	bpl.n	41e8 <__sflush_r+0x70>
    41da:	6861      	ldr	r1, [r4, #4]
    41dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    41de:	1a52      	subs	r2, r2, r1
    41e0:	2b00      	cmp	r3, #0
    41e2:	d001      	beq.n	41e8 <__sflush_r+0x70>
    41e4:	6c27      	ldr	r7, [r4, #64]	; 0x40
    41e6:	1bd2      	subs	r2, r2, r7
    41e8:	1c28      	adds	r0, r5, #0
    41ea:	6a21      	ldr	r1, [r4, #32]
    41ec:	2300      	movs	r3, #0
    41ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    41f0:	47b8      	blx	r7
    41f2:	89a2      	ldrh	r2, [r4, #12]
    41f4:	1c41      	adds	r1, r0, #1
    41f6:	d106      	bne.n	4206 <__sflush_r+0x8e>
    41f8:	682b      	ldr	r3, [r5, #0]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d003      	beq.n	4206 <__sflush_r+0x8e>
    41fe:	2b1d      	cmp	r3, #29
    4200:	d001      	beq.n	4206 <__sflush_r+0x8e>
    4202:	2b16      	cmp	r3, #22
    4204:	d119      	bne.n	423a <__sflush_r+0xc2>
    4206:	2300      	movs	r3, #0
    4208:	6063      	str	r3, [r4, #4]
    420a:	6923      	ldr	r3, [r4, #16]
    420c:	6023      	str	r3, [r4, #0]
    420e:	04d7      	lsls	r7, r2, #19
    4210:	d505      	bpl.n	421e <__sflush_r+0xa6>
    4212:	1c41      	adds	r1, r0, #1
    4214:	d102      	bne.n	421c <__sflush_r+0xa4>
    4216:	682a      	ldr	r2, [r5, #0]
    4218:	2a00      	cmp	r2, #0
    421a:	d100      	bne.n	421e <__sflush_r+0xa6>
    421c:	6560      	str	r0, [r4, #84]	; 0x54
    421e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4220:	602e      	str	r6, [r5, #0]
    4222:	2900      	cmp	r1, #0
    4224:	d0cf      	beq.n	41c6 <__sflush_r+0x4e>
    4226:	1c23      	adds	r3, r4, #0
    4228:	3344      	adds	r3, #68	; 0x44
    422a:	4299      	cmp	r1, r3
    422c:	d002      	beq.n	4234 <__sflush_r+0xbc>
    422e:	1c28      	adds	r0, r5, #0
    4230:	f000 f982 	bl	4538 <_free_r>
    4234:	2000      	movs	r0, #0
    4236:	6360      	str	r0, [r4, #52]	; 0x34
    4238:	e026      	b.n	4288 <__sflush_r+0x110>
    423a:	2340      	movs	r3, #64	; 0x40
    423c:	431a      	orrs	r2, r3
    423e:	81a2      	strh	r2, [r4, #12]
    4240:	e022      	b.n	4288 <__sflush_r+0x110>
    4242:	6926      	ldr	r6, [r4, #16]
    4244:	2e00      	cmp	r6, #0
    4246:	d0be      	beq.n	41c6 <__sflush_r+0x4e>
    4248:	6827      	ldr	r7, [r4, #0]
    424a:	2200      	movs	r2, #0
    424c:	1bbf      	subs	r7, r7, r6
    424e:	9701      	str	r7, [sp, #4]
    4250:	6026      	str	r6, [r4, #0]
    4252:	0799      	lsls	r1, r3, #30
    4254:	d100      	bne.n	4258 <__sflush_r+0xe0>
    4256:	6962      	ldr	r2, [r4, #20]
    4258:	60a2      	str	r2, [r4, #8]
    425a:	9f01      	ldr	r7, [sp, #4]
    425c:	2f00      	cmp	r7, #0
    425e:	ddb2      	ble.n	41c6 <__sflush_r+0x4e>
    4260:	1c28      	adds	r0, r5, #0
    4262:	6a21      	ldr	r1, [r4, #32]
    4264:	1c32      	adds	r2, r6, #0
    4266:	9b01      	ldr	r3, [sp, #4]
    4268:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    426a:	47b8      	blx	r7
    426c:	2800      	cmp	r0, #0
    426e:	dc06      	bgt.n	427e <__sflush_r+0x106>
    4270:	89a3      	ldrh	r3, [r4, #12]
    4272:	2240      	movs	r2, #64	; 0x40
    4274:	4313      	orrs	r3, r2
    4276:	2001      	movs	r0, #1
    4278:	81a3      	strh	r3, [r4, #12]
    427a:	4240      	negs	r0, r0
    427c:	e004      	b.n	4288 <__sflush_r+0x110>
    427e:	9f01      	ldr	r7, [sp, #4]
    4280:	1836      	adds	r6, r6, r0
    4282:	1a3f      	subs	r7, r7, r0
    4284:	9701      	str	r7, [sp, #4]
    4286:	e7e8      	b.n	425a <__sflush_r+0xe2>
    4288:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000428c <_fflush_r>:
    428c:	690a      	ldr	r2, [r1, #16]
    428e:	b538      	push	{r3, r4, r5, lr}
    4290:	1c05      	adds	r5, r0, #0
    4292:	1c0c      	adds	r4, r1, #0
    4294:	2a00      	cmp	r2, #0
    4296:	d101      	bne.n	429c <_fflush_r+0x10>
    4298:	2000      	movs	r0, #0
    429a:	e01c      	b.n	42d6 <_fflush_r+0x4a>
    429c:	2800      	cmp	r0, #0
    429e:	d004      	beq.n	42aa <_fflush_r+0x1e>
    42a0:	6983      	ldr	r3, [r0, #24]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d101      	bne.n	42aa <_fflush_r+0x1e>
    42a6:	f000 f871 	bl	438c <__sinit>
    42aa:	4b0b      	ldr	r3, [pc, #44]	; (42d8 <_fflush_r+0x4c>)
    42ac:	429c      	cmp	r4, r3
    42ae:	d101      	bne.n	42b4 <_fflush_r+0x28>
    42b0:	686c      	ldr	r4, [r5, #4]
    42b2:	e008      	b.n	42c6 <_fflush_r+0x3a>
    42b4:	4b09      	ldr	r3, [pc, #36]	; (42dc <_fflush_r+0x50>)
    42b6:	429c      	cmp	r4, r3
    42b8:	d101      	bne.n	42be <_fflush_r+0x32>
    42ba:	68ac      	ldr	r4, [r5, #8]
    42bc:	e003      	b.n	42c6 <_fflush_r+0x3a>
    42be:	4b08      	ldr	r3, [pc, #32]	; (42e0 <_fflush_r+0x54>)
    42c0:	429c      	cmp	r4, r3
    42c2:	d100      	bne.n	42c6 <_fflush_r+0x3a>
    42c4:	68ec      	ldr	r4, [r5, #12]
    42c6:	220c      	movs	r2, #12
    42c8:	5ea3      	ldrsh	r3, [r4, r2]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d0e4      	beq.n	4298 <_fflush_r+0xc>
    42ce:	1c28      	adds	r0, r5, #0
    42d0:	1c21      	adds	r1, r4, #0
    42d2:	f7ff ff51 	bl	4178 <__sflush_r>
    42d6:	bd38      	pop	{r3, r4, r5, pc}
    42d8:	00004a8c 	.word	0x00004a8c
    42dc:	00004aac 	.word	0x00004aac
    42e0:	00004acc 	.word	0x00004acc

000042e4 <_cleanup_r>:
    42e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42e6:	1c04      	adds	r4, r0, #0
    42e8:	1c07      	adds	r7, r0, #0
    42ea:	3448      	adds	r4, #72	; 0x48
    42ec:	2c00      	cmp	r4, #0
    42ee:	d012      	beq.n	4316 <_cleanup_r+0x32>
    42f0:	68a5      	ldr	r5, [r4, #8]
    42f2:	6866      	ldr	r6, [r4, #4]
    42f4:	3e01      	subs	r6, #1
    42f6:	d40c      	bmi.n	4312 <_cleanup_r+0x2e>
    42f8:	89ab      	ldrh	r3, [r5, #12]
    42fa:	2b01      	cmp	r3, #1
    42fc:	d907      	bls.n	430e <_cleanup_r+0x2a>
    42fe:	220e      	movs	r2, #14
    4300:	5eab      	ldrsh	r3, [r5, r2]
    4302:	3301      	adds	r3, #1
    4304:	d003      	beq.n	430e <_cleanup_r+0x2a>
    4306:	1c38      	adds	r0, r7, #0
    4308:	1c29      	adds	r1, r5, #0
    430a:	f7ff ffbf 	bl	428c <_fflush_r>
    430e:	3568      	adds	r5, #104	; 0x68
    4310:	e7f0      	b.n	42f4 <_cleanup_r+0x10>
    4312:	6824      	ldr	r4, [r4, #0]
    4314:	e7ea      	b.n	42ec <_cleanup_r+0x8>
    4316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004318 <std.isra.0>:
    4318:	2300      	movs	r3, #0
    431a:	b510      	push	{r4, lr}
    431c:	1c04      	adds	r4, r0, #0
    431e:	6003      	str	r3, [r0, #0]
    4320:	6043      	str	r3, [r0, #4]
    4322:	6083      	str	r3, [r0, #8]
    4324:	8181      	strh	r1, [r0, #12]
    4326:	6643      	str	r3, [r0, #100]	; 0x64
    4328:	81c2      	strh	r2, [r0, #14]
    432a:	6103      	str	r3, [r0, #16]
    432c:	6143      	str	r3, [r0, #20]
    432e:	6183      	str	r3, [r0, #24]
    4330:	1c19      	adds	r1, r3, #0
    4332:	2208      	movs	r2, #8
    4334:	305c      	adds	r0, #92	; 0x5c
    4336:	f7ff fae8 	bl	390a <memset>
    433a:	4b05      	ldr	r3, [pc, #20]	; (4350 <std.isra.0+0x38>)
    433c:	6224      	str	r4, [r4, #32]
    433e:	6263      	str	r3, [r4, #36]	; 0x24
    4340:	4b04      	ldr	r3, [pc, #16]	; (4354 <std.isra.0+0x3c>)
    4342:	62a3      	str	r3, [r4, #40]	; 0x28
    4344:	4b04      	ldr	r3, [pc, #16]	; (4358 <std.isra.0+0x40>)
    4346:	62e3      	str	r3, [r4, #44]	; 0x2c
    4348:	4b04      	ldr	r3, [pc, #16]	; (435c <std.isra.0+0x44>)
    434a:	6323      	str	r3, [r4, #48]	; 0x30
    434c:	bd10      	pop	{r4, pc}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	00004695 	.word	0x00004695
    4354:	000046bd 	.word	0x000046bd
    4358:	000046f5 	.word	0x000046f5
    435c:	00004721 	.word	0x00004721

00004360 <__sfmoreglue>:
    4360:	b570      	push	{r4, r5, r6, lr}
    4362:	1e4b      	subs	r3, r1, #1
    4364:	2568      	movs	r5, #104	; 0x68
    4366:	435d      	muls	r5, r3
    4368:	1c0e      	adds	r6, r1, #0
    436a:	1c29      	adds	r1, r5, #0
    436c:	3174      	adds	r1, #116	; 0x74
    436e:	f000 f92b 	bl	45c8 <_malloc_r>
    4372:	1e04      	subs	r4, r0, #0
    4374:	d008      	beq.n	4388 <__sfmoreglue+0x28>
    4376:	2100      	movs	r1, #0
    4378:	6001      	str	r1, [r0, #0]
    437a:	6046      	str	r6, [r0, #4]
    437c:	1c2a      	adds	r2, r5, #0
    437e:	300c      	adds	r0, #12
    4380:	60a0      	str	r0, [r4, #8]
    4382:	3268      	adds	r2, #104	; 0x68
    4384:	f7ff fac1 	bl	390a <memset>
    4388:	1c20      	adds	r0, r4, #0
    438a:	bd70      	pop	{r4, r5, r6, pc}

0000438c <__sinit>:
    438c:	6983      	ldr	r3, [r0, #24]
    438e:	b513      	push	{r0, r1, r4, lr}
    4390:	1c04      	adds	r4, r0, #0
    4392:	2b00      	cmp	r3, #0
    4394:	d127      	bne.n	43e6 <__sinit+0x5a>
    4396:	6483      	str	r3, [r0, #72]	; 0x48
    4398:	64c3      	str	r3, [r0, #76]	; 0x4c
    439a:	6503      	str	r3, [r0, #80]	; 0x50
    439c:	4b12      	ldr	r3, [pc, #72]	; (43e8 <__sinit+0x5c>)
    439e:	4a13      	ldr	r2, [pc, #76]	; (43ec <__sinit+0x60>)
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	6282      	str	r2, [r0, #40]	; 0x28
    43a4:	4298      	cmp	r0, r3
    43a6:	d101      	bne.n	43ac <__sinit+0x20>
    43a8:	2301      	movs	r3, #1
    43aa:	6183      	str	r3, [r0, #24]
    43ac:	1c20      	adds	r0, r4, #0
    43ae:	f000 f81f 	bl	43f0 <__sfp>
    43b2:	6060      	str	r0, [r4, #4]
    43b4:	1c20      	adds	r0, r4, #0
    43b6:	f000 f81b 	bl	43f0 <__sfp>
    43ba:	60a0      	str	r0, [r4, #8]
    43bc:	1c20      	adds	r0, r4, #0
    43be:	f000 f817 	bl	43f0 <__sfp>
    43c2:	2104      	movs	r1, #4
    43c4:	60e0      	str	r0, [r4, #12]
    43c6:	2200      	movs	r2, #0
    43c8:	6860      	ldr	r0, [r4, #4]
    43ca:	f7ff ffa5 	bl	4318 <std.isra.0>
    43ce:	68a0      	ldr	r0, [r4, #8]
    43d0:	2109      	movs	r1, #9
    43d2:	2201      	movs	r2, #1
    43d4:	f7ff ffa0 	bl	4318 <std.isra.0>
    43d8:	68e0      	ldr	r0, [r4, #12]
    43da:	2112      	movs	r1, #18
    43dc:	2202      	movs	r2, #2
    43de:	f7ff ff9b 	bl	4318 <std.isra.0>
    43e2:	2301      	movs	r3, #1
    43e4:	61a3      	str	r3, [r4, #24]
    43e6:	bd13      	pop	{r0, r1, r4, pc}
    43e8:	00004a54 	.word	0x00004a54
    43ec:	000042e5 	.word	0x000042e5

000043f0 <__sfp>:
    43f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43f2:	4b1d      	ldr	r3, [pc, #116]	; (4468 <__sfp+0x78>)
    43f4:	1c07      	adds	r7, r0, #0
    43f6:	681e      	ldr	r6, [r3, #0]
    43f8:	69b2      	ldr	r2, [r6, #24]
    43fa:	2a00      	cmp	r2, #0
    43fc:	d102      	bne.n	4404 <__sfp+0x14>
    43fe:	1c30      	adds	r0, r6, #0
    4400:	f7ff ffc4 	bl	438c <__sinit>
    4404:	3648      	adds	r6, #72	; 0x48
    4406:	68b4      	ldr	r4, [r6, #8]
    4408:	6873      	ldr	r3, [r6, #4]
    440a:	3b01      	subs	r3, #1
    440c:	d405      	bmi.n	441a <__sfp+0x2a>
    440e:	220c      	movs	r2, #12
    4410:	5ea5      	ldrsh	r5, [r4, r2]
    4412:	2d00      	cmp	r5, #0
    4414:	d010      	beq.n	4438 <__sfp+0x48>
    4416:	3468      	adds	r4, #104	; 0x68
    4418:	e7f7      	b.n	440a <__sfp+0x1a>
    441a:	6833      	ldr	r3, [r6, #0]
    441c:	2b00      	cmp	r3, #0
    441e:	d106      	bne.n	442e <__sfp+0x3e>
    4420:	1c38      	adds	r0, r7, #0
    4422:	2104      	movs	r1, #4
    4424:	f7ff ff9c 	bl	4360 <__sfmoreglue>
    4428:	6030      	str	r0, [r6, #0]
    442a:	2800      	cmp	r0, #0
    442c:	d001      	beq.n	4432 <__sfp+0x42>
    442e:	6836      	ldr	r6, [r6, #0]
    4430:	e7e9      	b.n	4406 <__sfp+0x16>
    4432:	230c      	movs	r3, #12
    4434:	603b      	str	r3, [r7, #0]
    4436:	e016      	b.n	4466 <__sfp+0x76>
    4438:	2301      	movs	r3, #1
    443a:	425b      	negs	r3, r3
    443c:	81e3      	strh	r3, [r4, #14]
    443e:	1c20      	adds	r0, r4, #0
    4440:	2301      	movs	r3, #1
    4442:	81a3      	strh	r3, [r4, #12]
    4444:	6665      	str	r5, [r4, #100]	; 0x64
    4446:	6025      	str	r5, [r4, #0]
    4448:	60a5      	str	r5, [r4, #8]
    444a:	6065      	str	r5, [r4, #4]
    444c:	6125      	str	r5, [r4, #16]
    444e:	6165      	str	r5, [r4, #20]
    4450:	61a5      	str	r5, [r4, #24]
    4452:	305c      	adds	r0, #92	; 0x5c
    4454:	1c29      	adds	r1, r5, #0
    4456:	2208      	movs	r2, #8
    4458:	f7ff fa57 	bl	390a <memset>
    445c:	6365      	str	r5, [r4, #52]	; 0x34
    445e:	63a5      	str	r5, [r4, #56]	; 0x38
    4460:	64a5      	str	r5, [r4, #72]	; 0x48
    4462:	64e5      	str	r5, [r4, #76]	; 0x4c
    4464:	1c20      	adds	r0, r4, #0
    4466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4468:	00004a54 	.word	0x00004a54

0000446c <__smakebuf_r>:
    446c:	b5f0      	push	{r4, r5, r6, r7, lr}
    446e:	898b      	ldrh	r3, [r1, #12]
    4470:	b091      	sub	sp, #68	; 0x44
    4472:	1c05      	adds	r5, r0, #0
    4474:	1c0c      	adds	r4, r1, #0
    4476:	079a      	lsls	r2, r3, #30
    4478:	d425      	bmi.n	44c6 <__smakebuf_r+0x5a>
    447a:	230e      	movs	r3, #14
    447c:	5ec9      	ldrsh	r1, [r1, r3]
    447e:	2900      	cmp	r1, #0
    4480:	da06      	bge.n	4490 <__smakebuf_r+0x24>
    4482:	89a7      	ldrh	r7, [r4, #12]
    4484:	2380      	movs	r3, #128	; 0x80
    4486:	401f      	ands	r7, r3
    4488:	d00f      	beq.n	44aa <__smakebuf_r+0x3e>
    448a:	2700      	movs	r7, #0
    448c:	2640      	movs	r6, #64	; 0x40
    448e:	e00e      	b.n	44ae <__smakebuf_r+0x42>
    4490:	aa01      	add	r2, sp, #4
    4492:	f000 f979 	bl	4788 <_fstat_r>
    4496:	2800      	cmp	r0, #0
    4498:	dbf3      	blt.n	4482 <__smakebuf_r+0x16>
    449a:	9b02      	ldr	r3, [sp, #8]
    449c:	27f0      	movs	r7, #240	; 0xf0
    449e:	023f      	lsls	r7, r7, #8
    44a0:	4a18      	ldr	r2, [pc, #96]	; (4504 <__smakebuf_r+0x98>)
    44a2:	401f      	ands	r7, r3
    44a4:	18bf      	adds	r7, r7, r2
    44a6:	427b      	negs	r3, r7
    44a8:	415f      	adcs	r7, r3
    44aa:	2680      	movs	r6, #128	; 0x80
    44ac:	00f6      	lsls	r6, r6, #3
    44ae:	1c28      	adds	r0, r5, #0
    44b0:	1c31      	adds	r1, r6, #0
    44b2:	f000 f889 	bl	45c8 <_malloc_r>
    44b6:	2800      	cmp	r0, #0
    44b8:	d10c      	bne.n	44d4 <__smakebuf_r+0x68>
    44ba:	89a3      	ldrh	r3, [r4, #12]
    44bc:	059a      	lsls	r2, r3, #22
    44be:	d41f      	bmi.n	4500 <__smakebuf_r+0x94>
    44c0:	2202      	movs	r2, #2
    44c2:	4313      	orrs	r3, r2
    44c4:	81a3      	strh	r3, [r4, #12]
    44c6:	1c23      	adds	r3, r4, #0
    44c8:	3347      	adds	r3, #71	; 0x47
    44ca:	6023      	str	r3, [r4, #0]
    44cc:	6123      	str	r3, [r4, #16]
    44ce:	2301      	movs	r3, #1
    44d0:	6163      	str	r3, [r4, #20]
    44d2:	e015      	b.n	4500 <__smakebuf_r+0x94>
    44d4:	4b0c      	ldr	r3, [pc, #48]	; (4508 <__smakebuf_r+0x9c>)
    44d6:	2280      	movs	r2, #128	; 0x80
    44d8:	62ab      	str	r3, [r5, #40]	; 0x28
    44da:	89a3      	ldrh	r3, [r4, #12]
    44dc:	6020      	str	r0, [r4, #0]
    44de:	4313      	orrs	r3, r2
    44e0:	81a3      	strh	r3, [r4, #12]
    44e2:	6120      	str	r0, [r4, #16]
    44e4:	6166      	str	r6, [r4, #20]
    44e6:	2f00      	cmp	r7, #0
    44e8:	d00a      	beq.n	4500 <__smakebuf_r+0x94>
    44ea:	230e      	movs	r3, #14
    44ec:	5ee1      	ldrsh	r1, [r4, r3]
    44ee:	1c28      	adds	r0, r5, #0
    44f0:	f000 f95c 	bl	47ac <_isatty_r>
    44f4:	2800      	cmp	r0, #0
    44f6:	d003      	beq.n	4500 <__smakebuf_r+0x94>
    44f8:	89a3      	ldrh	r3, [r4, #12]
    44fa:	2201      	movs	r2, #1
    44fc:	4313      	orrs	r3, r2
    44fe:	81a3      	strh	r3, [r4, #12]
    4500:	b011      	add	sp, #68	; 0x44
    4502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4504:	ffffe000 	.word	0xffffe000
    4508:	000042e5 	.word	0x000042e5

0000450c <malloc>:
    450c:	b508      	push	{r3, lr}
    450e:	4b03      	ldr	r3, [pc, #12]	; (451c <malloc+0x10>)
    4510:	1c01      	adds	r1, r0, #0
    4512:	6818      	ldr	r0, [r3, #0]
    4514:	f000 f858 	bl	45c8 <_malloc_r>
    4518:	bd08      	pop	{r3, pc}
    451a:	46c0      	nop			; (mov r8, r8)
    451c:	2000006c 	.word	0x2000006c

00004520 <memchr>:
    4520:	b2c9      	uxtb	r1, r1
    4522:	1882      	adds	r2, r0, r2
    4524:	4290      	cmp	r0, r2
    4526:	d004      	beq.n	4532 <memchr+0x12>
    4528:	7803      	ldrb	r3, [r0, #0]
    452a:	428b      	cmp	r3, r1
    452c:	d002      	beq.n	4534 <memchr+0x14>
    452e:	3001      	adds	r0, #1
    4530:	e7f8      	b.n	4524 <memchr+0x4>
    4532:	2000      	movs	r0, #0
    4534:	4770      	bx	lr
	...

00004538 <_free_r>:
    4538:	b530      	push	{r4, r5, lr}
    453a:	2900      	cmp	r1, #0
    453c:	d040      	beq.n	45c0 <_free_r+0x88>
    453e:	3904      	subs	r1, #4
    4540:	680b      	ldr	r3, [r1, #0]
    4542:	2b00      	cmp	r3, #0
    4544:	da00      	bge.n	4548 <_free_r+0x10>
    4546:	18c9      	adds	r1, r1, r3
    4548:	4a1e      	ldr	r2, [pc, #120]	; (45c4 <_free_r+0x8c>)
    454a:	6813      	ldr	r3, [r2, #0]
    454c:	1c14      	adds	r4, r2, #0
    454e:	2b00      	cmp	r3, #0
    4550:	d102      	bne.n	4558 <_free_r+0x20>
    4552:	604b      	str	r3, [r1, #4]
    4554:	6011      	str	r1, [r2, #0]
    4556:	e033      	b.n	45c0 <_free_r+0x88>
    4558:	4299      	cmp	r1, r3
    455a:	d20f      	bcs.n	457c <_free_r+0x44>
    455c:	6808      	ldr	r0, [r1, #0]
    455e:	180a      	adds	r2, r1, r0
    4560:	429a      	cmp	r2, r3
    4562:	d105      	bne.n	4570 <_free_r+0x38>
    4564:	6813      	ldr	r3, [r2, #0]
    4566:	6852      	ldr	r2, [r2, #4]
    4568:	18c0      	adds	r0, r0, r3
    456a:	6008      	str	r0, [r1, #0]
    456c:	604a      	str	r2, [r1, #4]
    456e:	e000      	b.n	4572 <_free_r+0x3a>
    4570:	604b      	str	r3, [r1, #4]
    4572:	6021      	str	r1, [r4, #0]
    4574:	e024      	b.n	45c0 <_free_r+0x88>
    4576:	428a      	cmp	r2, r1
    4578:	d803      	bhi.n	4582 <_free_r+0x4a>
    457a:	1c13      	adds	r3, r2, #0
    457c:	685a      	ldr	r2, [r3, #4]
    457e:	2a00      	cmp	r2, #0
    4580:	d1f9      	bne.n	4576 <_free_r+0x3e>
    4582:	681d      	ldr	r5, [r3, #0]
    4584:	195c      	adds	r4, r3, r5
    4586:	428c      	cmp	r4, r1
    4588:	d10b      	bne.n	45a2 <_free_r+0x6a>
    458a:	6809      	ldr	r1, [r1, #0]
    458c:	1869      	adds	r1, r5, r1
    458e:	1858      	adds	r0, r3, r1
    4590:	6019      	str	r1, [r3, #0]
    4592:	4290      	cmp	r0, r2
    4594:	d114      	bne.n	45c0 <_free_r+0x88>
    4596:	6814      	ldr	r4, [r2, #0]
    4598:	6852      	ldr	r2, [r2, #4]
    459a:	1909      	adds	r1, r1, r4
    459c:	6019      	str	r1, [r3, #0]
    459e:	605a      	str	r2, [r3, #4]
    45a0:	e00e      	b.n	45c0 <_free_r+0x88>
    45a2:	428c      	cmp	r4, r1
    45a4:	d902      	bls.n	45ac <_free_r+0x74>
    45a6:	230c      	movs	r3, #12
    45a8:	6003      	str	r3, [r0, #0]
    45aa:	e009      	b.n	45c0 <_free_r+0x88>
    45ac:	6808      	ldr	r0, [r1, #0]
    45ae:	180c      	adds	r4, r1, r0
    45b0:	4294      	cmp	r4, r2
    45b2:	d103      	bne.n	45bc <_free_r+0x84>
    45b4:	6814      	ldr	r4, [r2, #0]
    45b6:	6852      	ldr	r2, [r2, #4]
    45b8:	1900      	adds	r0, r0, r4
    45ba:	6008      	str	r0, [r1, #0]
    45bc:	604a      	str	r2, [r1, #4]
    45be:	6059      	str	r1, [r3, #4]
    45c0:	bd30      	pop	{r4, r5, pc}
    45c2:	46c0      	nop			; (mov r8, r8)
    45c4:	20000108 	.word	0x20000108

000045c8 <_malloc_r>:
    45c8:	b570      	push	{r4, r5, r6, lr}
    45ca:	2303      	movs	r3, #3
    45cc:	1ccd      	adds	r5, r1, #3
    45ce:	439d      	bics	r5, r3
    45d0:	3508      	adds	r5, #8
    45d2:	1c06      	adds	r6, r0, #0
    45d4:	2d0c      	cmp	r5, #12
    45d6:	d201      	bcs.n	45dc <_malloc_r+0x14>
    45d8:	250c      	movs	r5, #12
    45da:	e001      	b.n	45e0 <_malloc_r+0x18>
    45dc:	2d00      	cmp	r5, #0
    45de:	db3f      	blt.n	4660 <_malloc_r+0x98>
    45e0:	428d      	cmp	r5, r1
    45e2:	d33d      	bcc.n	4660 <_malloc_r+0x98>
    45e4:	4b20      	ldr	r3, [pc, #128]	; (4668 <_malloc_r+0xa0>)
    45e6:	681c      	ldr	r4, [r3, #0]
    45e8:	1c1a      	adds	r2, r3, #0
    45ea:	1c21      	adds	r1, r4, #0
    45ec:	2900      	cmp	r1, #0
    45ee:	d013      	beq.n	4618 <_malloc_r+0x50>
    45f0:	6808      	ldr	r0, [r1, #0]
    45f2:	1b43      	subs	r3, r0, r5
    45f4:	d40d      	bmi.n	4612 <_malloc_r+0x4a>
    45f6:	2b0b      	cmp	r3, #11
    45f8:	d902      	bls.n	4600 <_malloc_r+0x38>
    45fa:	600b      	str	r3, [r1, #0]
    45fc:	18cc      	adds	r4, r1, r3
    45fe:	e01e      	b.n	463e <_malloc_r+0x76>
    4600:	428c      	cmp	r4, r1
    4602:	d102      	bne.n	460a <_malloc_r+0x42>
    4604:	6863      	ldr	r3, [r4, #4]
    4606:	6013      	str	r3, [r2, #0]
    4608:	e01a      	b.n	4640 <_malloc_r+0x78>
    460a:	6848      	ldr	r0, [r1, #4]
    460c:	6060      	str	r0, [r4, #4]
    460e:	1c0c      	adds	r4, r1, #0
    4610:	e016      	b.n	4640 <_malloc_r+0x78>
    4612:	1c0c      	adds	r4, r1, #0
    4614:	6849      	ldr	r1, [r1, #4]
    4616:	e7e9      	b.n	45ec <_malloc_r+0x24>
    4618:	4c14      	ldr	r4, [pc, #80]	; (466c <_malloc_r+0xa4>)
    461a:	6820      	ldr	r0, [r4, #0]
    461c:	2800      	cmp	r0, #0
    461e:	d103      	bne.n	4628 <_malloc_r+0x60>
    4620:	1c30      	adds	r0, r6, #0
    4622:	f000 f825 	bl	4670 <_sbrk_r>
    4626:	6020      	str	r0, [r4, #0]
    4628:	1c30      	adds	r0, r6, #0
    462a:	1c29      	adds	r1, r5, #0
    462c:	f000 f820 	bl	4670 <_sbrk_r>
    4630:	1c43      	adds	r3, r0, #1
    4632:	d015      	beq.n	4660 <_malloc_r+0x98>
    4634:	1cc4      	adds	r4, r0, #3
    4636:	2303      	movs	r3, #3
    4638:	439c      	bics	r4, r3
    463a:	4284      	cmp	r4, r0
    463c:	d10a      	bne.n	4654 <_malloc_r+0x8c>
    463e:	6025      	str	r5, [r4, #0]
    4640:	1c20      	adds	r0, r4, #0
    4642:	300b      	adds	r0, #11
    4644:	2207      	movs	r2, #7
    4646:	1d23      	adds	r3, r4, #4
    4648:	4390      	bics	r0, r2
    464a:	1ac3      	subs	r3, r0, r3
    464c:	d00b      	beq.n	4666 <_malloc_r+0x9e>
    464e:	425a      	negs	r2, r3
    4650:	50e2      	str	r2, [r4, r3]
    4652:	e008      	b.n	4666 <_malloc_r+0x9e>
    4654:	1a21      	subs	r1, r4, r0
    4656:	1c30      	adds	r0, r6, #0
    4658:	f000 f80a 	bl	4670 <_sbrk_r>
    465c:	3001      	adds	r0, #1
    465e:	d1ee      	bne.n	463e <_malloc_r+0x76>
    4660:	230c      	movs	r3, #12
    4662:	6033      	str	r3, [r6, #0]
    4664:	2000      	movs	r0, #0
    4666:	bd70      	pop	{r4, r5, r6, pc}
    4668:	20000108 	.word	0x20000108
    466c:	20000104 	.word	0x20000104

00004670 <_sbrk_r>:
    4670:	b538      	push	{r3, r4, r5, lr}
    4672:	4c07      	ldr	r4, [pc, #28]	; (4690 <_sbrk_r+0x20>)
    4674:	2300      	movs	r3, #0
    4676:	1c05      	adds	r5, r0, #0
    4678:	1c08      	adds	r0, r1, #0
    467a:	6023      	str	r3, [r4, #0]
    467c:	f7fd f856 	bl	172c <_sbrk>
    4680:	1c43      	adds	r3, r0, #1
    4682:	d103      	bne.n	468c <_sbrk_r+0x1c>
    4684:	6823      	ldr	r3, [r4, #0]
    4686:	2b00      	cmp	r3, #0
    4688:	d000      	beq.n	468c <_sbrk_r+0x1c>
    468a:	602b      	str	r3, [r5, #0]
    468c:	bd38      	pop	{r3, r4, r5, pc}
    468e:	46c0      	nop			; (mov r8, r8)
    4690:	20000138 	.word	0x20000138

00004694 <__sread>:
    4694:	b538      	push	{r3, r4, r5, lr}
    4696:	1c0c      	adds	r4, r1, #0
    4698:	250e      	movs	r5, #14
    469a:	5f49      	ldrsh	r1, [r1, r5]
    469c:	f000 f8ac 	bl	47f8 <_read_r>
    46a0:	2800      	cmp	r0, #0
    46a2:	db03      	blt.n	46ac <__sread+0x18>
    46a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    46a6:	1813      	adds	r3, r2, r0
    46a8:	6563      	str	r3, [r4, #84]	; 0x54
    46aa:	e003      	b.n	46b4 <__sread+0x20>
    46ac:	89a2      	ldrh	r2, [r4, #12]
    46ae:	4b02      	ldr	r3, [pc, #8]	; (46b8 <__sread+0x24>)
    46b0:	4013      	ands	r3, r2
    46b2:	81a3      	strh	r3, [r4, #12]
    46b4:	bd38      	pop	{r3, r4, r5, pc}
    46b6:	46c0      	nop			; (mov r8, r8)
    46b8:	ffffefff 	.word	0xffffefff

000046bc <__swrite>:
    46bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46be:	1c1e      	adds	r6, r3, #0
    46c0:	898b      	ldrh	r3, [r1, #12]
    46c2:	1c05      	adds	r5, r0, #0
    46c4:	1c0c      	adds	r4, r1, #0
    46c6:	1c17      	adds	r7, r2, #0
    46c8:	05da      	lsls	r2, r3, #23
    46ca:	d505      	bpl.n	46d8 <__swrite+0x1c>
    46cc:	230e      	movs	r3, #14
    46ce:	5ec9      	ldrsh	r1, [r1, r3]
    46d0:	2200      	movs	r2, #0
    46d2:	2302      	movs	r3, #2
    46d4:	f000 f87c 	bl	47d0 <_lseek_r>
    46d8:	89a2      	ldrh	r2, [r4, #12]
    46da:	4b05      	ldr	r3, [pc, #20]	; (46f0 <__swrite+0x34>)
    46dc:	1c28      	adds	r0, r5, #0
    46de:	4013      	ands	r3, r2
    46e0:	81a3      	strh	r3, [r4, #12]
    46e2:	220e      	movs	r2, #14
    46e4:	5ea1      	ldrsh	r1, [r4, r2]
    46e6:	1c33      	adds	r3, r6, #0
    46e8:	1c3a      	adds	r2, r7, #0
    46ea:	f000 f827 	bl	473c <_write_r>
    46ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46f0:	ffffefff 	.word	0xffffefff

000046f4 <__sseek>:
    46f4:	b538      	push	{r3, r4, r5, lr}
    46f6:	1c0c      	adds	r4, r1, #0
    46f8:	250e      	movs	r5, #14
    46fa:	5f49      	ldrsh	r1, [r1, r5]
    46fc:	f000 f868 	bl	47d0 <_lseek_r>
    4700:	89a3      	ldrh	r3, [r4, #12]
    4702:	1c42      	adds	r2, r0, #1
    4704:	d103      	bne.n	470e <__sseek+0x1a>
    4706:	4a05      	ldr	r2, [pc, #20]	; (471c <__sseek+0x28>)
    4708:	4013      	ands	r3, r2
    470a:	81a3      	strh	r3, [r4, #12]
    470c:	e004      	b.n	4718 <__sseek+0x24>
    470e:	2280      	movs	r2, #128	; 0x80
    4710:	0152      	lsls	r2, r2, #5
    4712:	4313      	orrs	r3, r2
    4714:	81a3      	strh	r3, [r4, #12]
    4716:	6560      	str	r0, [r4, #84]	; 0x54
    4718:	bd38      	pop	{r3, r4, r5, pc}
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	ffffefff 	.word	0xffffefff

00004720 <__sclose>:
    4720:	b508      	push	{r3, lr}
    4722:	230e      	movs	r3, #14
    4724:	5ec9      	ldrsh	r1, [r1, r3]
    4726:	f000 f81d 	bl	4764 <_close_r>
    472a:	bd08      	pop	{r3, pc}

0000472c <strlen>:
    472c:	2300      	movs	r3, #0
    472e:	5cc2      	ldrb	r2, [r0, r3]
    4730:	3301      	adds	r3, #1
    4732:	2a00      	cmp	r2, #0
    4734:	d1fb      	bne.n	472e <strlen+0x2>
    4736:	1e58      	subs	r0, r3, #1
    4738:	4770      	bx	lr
	...

0000473c <_write_r>:
    473c:	b538      	push	{r3, r4, r5, lr}
    473e:	4c08      	ldr	r4, [pc, #32]	; (4760 <_write_r+0x24>)
    4740:	1c05      	adds	r5, r0, #0
    4742:	2000      	movs	r0, #0
    4744:	6020      	str	r0, [r4, #0]
    4746:	1c08      	adds	r0, r1, #0
    4748:	1c11      	adds	r1, r2, #0
    474a:	1c1a      	adds	r2, r3, #0
    474c:	f7fb fefc 	bl	548 <_write>
    4750:	1c43      	adds	r3, r0, #1
    4752:	d103      	bne.n	475c <_write_r+0x20>
    4754:	6823      	ldr	r3, [r4, #0]
    4756:	2b00      	cmp	r3, #0
    4758:	d000      	beq.n	475c <_write_r+0x20>
    475a:	602b      	str	r3, [r5, #0]
    475c:	bd38      	pop	{r3, r4, r5, pc}
    475e:	46c0      	nop			; (mov r8, r8)
    4760:	20000138 	.word	0x20000138

00004764 <_close_r>:
    4764:	b538      	push	{r3, r4, r5, lr}
    4766:	4c07      	ldr	r4, [pc, #28]	; (4784 <_close_r+0x20>)
    4768:	2300      	movs	r3, #0
    476a:	1c05      	adds	r5, r0, #0
    476c:	1c08      	adds	r0, r1, #0
    476e:	6023      	str	r3, [r4, #0]
    4770:	f7fc ffee 	bl	1750 <_close>
    4774:	1c43      	adds	r3, r0, #1
    4776:	d103      	bne.n	4780 <_close_r+0x1c>
    4778:	6823      	ldr	r3, [r4, #0]
    477a:	2b00      	cmp	r3, #0
    477c:	d000      	beq.n	4780 <_close_r+0x1c>
    477e:	602b      	str	r3, [r5, #0]
    4780:	bd38      	pop	{r3, r4, r5, pc}
    4782:	46c0      	nop			; (mov r8, r8)
    4784:	20000138 	.word	0x20000138

00004788 <_fstat_r>:
    4788:	b538      	push	{r3, r4, r5, lr}
    478a:	4c07      	ldr	r4, [pc, #28]	; (47a8 <_fstat_r+0x20>)
    478c:	2300      	movs	r3, #0
    478e:	1c05      	adds	r5, r0, #0
    4790:	1c08      	adds	r0, r1, #0
    4792:	1c11      	adds	r1, r2, #0
    4794:	6023      	str	r3, [r4, #0]
    4796:	f7fc ffdf 	bl	1758 <_fstat>
    479a:	1c43      	adds	r3, r0, #1
    479c:	d103      	bne.n	47a6 <_fstat_r+0x1e>
    479e:	6823      	ldr	r3, [r4, #0]
    47a0:	2b00      	cmp	r3, #0
    47a2:	d000      	beq.n	47a6 <_fstat_r+0x1e>
    47a4:	602b      	str	r3, [r5, #0]
    47a6:	bd38      	pop	{r3, r4, r5, pc}
    47a8:	20000138 	.word	0x20000138

000047ac <_isatty_r>:
    47ac:	b538      	push	{r3, r4, r5, lr}
    47ae:	4c07      	ldr	r4, [pc, #28]	; (47cc <_isatty_r+0x20>)
    47b0:	2300      	movs	r3, #0
    47b2:	1c05      	adds	r5, r0, #0
    47b4:	1c08      	adds	r0, r1, #0
    47b6:	6023      	str	r3, [r4, #0]
    47b8:	f7fc ffd4 	bl	1764 <_isatty>
    47bc:	1c43      	adds	r3, r0, #1
    47be:	d103      	bne.n	47c8 <_isatty_r+0x1c>
    47c0:	6823      	ldr	r3, [r4, #0]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d000      	beq.n	47c8 <_isatty_r+0x1c>
    47c6:	602b      	str	r3, [r5, #0]
    47c8:	bd38      	pop	{r3, r4, r5, pc}
    47ca:	46c0      	nop			; (mov r8, r8)
    47cc:	20000138 	.word	0x20000138

000047d0 <_lseek_r>:
    47d0:	b538      	push	{r3, r4, r5, lr}
    47d2:	4c08      	ldr	r4, [pc, #32]	; (47f4 <_lseek_r+0x24>)
    47d4:	1c05      	adds	r5, r0, #0
    47d6:	2000      	movs	r0, #0
    47d8:	6020      	str	r0, [r4, #0]
    47da:	1c08      	adds	r0, r1, #0
    47dc:	1c11      	adds	r1, r2, #0
    47de:	1c1a      	adds	r2, r3, #0
    47e0:	f7fc ffc2 	bl	1768 <_lseek>
    47e4:	1c43      	adds	r3, r0, #1
    47e6:	d103      	bne.n	47f0 <_lseek_r+0x20>
    47e8:	6823      	ldr	r3, [r4, #0]
    47ea:	2b00      	cmp	r3, #0
    47ec:	d000      	beq.n	47f0 <_lseek_r+0x20>
    47ee:	602b      	str	r3, [r5, #0]
    47f0:	bd38      	pop	{r3, r4, r5, pc}
    47f2:	46c0      	nop			; (mov r8, r8)
    47f4:	20000138 	.word	0x20000138

000047f8 <_read_r>:
    47f8:	b538      	push	{r3, r4, r5, lr}
    47fa:	4c08      	ldr	r4, [pc, #32]	; (481c <_read_r+0x24>)
    47fc:	1c05      	adds	r5, r0, #0
    47fe:	2000      	movs	r0, #0
    4800:	6020      	str	r0, [r4, #0]
    4802:	1c08      	adds	r0, r1, #0
    4804:	1c11      	adds	r1, r2, #0
    4806:	1c1a      	adds	r2, r3, #0
    4808:	f7fb fe7c 	bl	504 <_read>
    480c:	1c43      	adds	r3, r0, #1
    480e:	d103      	bne.n	4818 <_read_r+0x20>
    4810:	6823      	ldr	r3, [r4, #0]
    4812:	2b00      	cmp	r3, #0
    4814:	d000      	beq.n	4818 <_read_r+0x20>
    4816:	602b      	str	r3, [r5, #0]
    4818:	bd38      	pop	{r3, r4, r5, pc}
    481a:	46c0      	nop			; (mov r8, r8)
    481c:	20000138 	.word	0x20000138
    4820:	42000800 	.word	0x42000800
    4824:	42000c00 	.word	0x42000c00
    4828:	42001000 	.word	0x42001000
    482c:	42001400 	.word	0x42001400
    4830:	42001800 	.word	0x42001800
    4834:	42001c00 	.word	0x42001c00
    4838:	0c0b0a09 	.word	0x0c0b0a09
    483c:	00000e0d 	.word	0x00000e0d
    4840:	00000e9e 	.word	0x00000e9e
    4844:	000010e4 	.word	0x000010e4
    4848:	000010e4 	.word	0x000010e4
    484c:	000010e4 	.word	0x000010e4
    4850:	000010e4 	.word	0x000010e4
    4854:	000010e4 	.word	0x000010e4
    4858:	000010e4 	.word	0x000010e4
    485c:	000010e4 	.word	0x000010e4
    4860:	000010e4 	.word	0x000010e4
    4864:	000010e4 	.word	0x000010e4
    4868:	000010e4 	.word	0x000010e4
    486c:	000010e4 	.word	0x000010e4
    4870:	000010e4 	.word	0x000010e4
    4874:	000010e4 	.word	0x000010e4
    4878:	000010e4 	.word	0x000010e4
    487c:	000010e4 	.word	0x000010e4
    4880:	00000e86 	.word	0x00000e86
    4884:	000010e4 	.word	0x000010e4
    4888:	000010e4 	.word	0x000010e4
    488c:	000010e4 	.word	0x000010e4
    4890:	000010e4 	.word	0x000010e4
    4894:	000010e4 	.word	0x000010e4
    4898:	000010e4 	.word	0x000010e4
    489c:	000010e4 	.word	0x000010e4
    48a0:	000010e4 	.word	0x000010e4
    48a4:	000010e4 	.word	0x000010e4
    48a8:	000010e4 	.word	0x000010e4
    48ac:	000010e4 	.word	0x000010e4
    48b0:	000010e4 	.word	0x000010e4
    48b4:	000010e4 	.word	0x000010e4
    48b8:	000010e4 	.word	0x000010e4
    48bc:	000010e4 	.word	0x000010e4
    48c0:	00000e96 	.word	0x00000e96
    48c4:	000010e4 	.word	0x000010e4
    48c8:	000010e4 	.word	0x000010e4
    48cc:	000010e4 	.word	0x000010e4
    48d0:	000010e4 	.word	0x000010e4
    48d4:	000010e4 	.word	0x000010e4
    48d8:	000010e4 	.word	0x000010e4
    48dc:	000010e4 	.word	0x000010e4
    48e0:	000010e4 	.word	0x000010e4
    48e4:	000010e4 	.word	0x000010e4
    48e8:	000010e4 	.word	0x000010e4
    48ec:	000010e4 	.word	0x000010e4
    48f0:	000010e4 	.word	0x000010e4
    48f4:	000010e4 	.word	0x000010e4
    48f8:	000010e4 	.word	0x000010e4
    48fc:	000010e4 	.word	0x000010e4
    4900:	00000e8e 	.word	0x00000e8e
    4904:	00000e6e 	.word	0x00000e6e
    4908:	00000ea6 	.word	0x00000ea6
    490c:	00000e7e 	.word	0x00000e7e
    4910:	00000e76 	.word	0x00000e76
    4914:	0000ffff 	.word	0x0000ffff
    4918:	0000ffff 	.word	0x0000ffff
    491c:	0000ffff 	.word	0x0000ffff
    4920:	0000ffff 	.word	0x0000ffff
    4924:	00000004 	.word	0x00000004
    4928:	00000005 	.word	0x00000005
    492c:	00000006 	.word	0x00000006
    4930:	00000007 	.word	0x00000007
    4934:	0000ffff 	.word	0x0000ffff
    4938:	0000ffff 	.word	0x0000ffff
    493c:	00000022 	.word	0x00000022
    4940:	00000023 	.word	0x00000023
    4944:	0000ffff 	.word	0x0000ffff
    4948:	0000ffff 	.word	0x0000ffff
    494c:	0000ffff 	.word	0x0000ffff
    4950:	0000ffff 	.word	0x0000ffff
    4954:	00000008 	.word	0x00000008
    4958:	00000009 	.word	0x00000009
    495c:	0000ffff 	.word	0x0000ffff
    4960:	0000ffff 	.word	0x0000ffff
    4964:	00001138 	.word	0x00001138
    4968:	00001194 	.word	0x00001194
    496c:	00001194 	.word	0x00001194
    4970:	00001132 	.word	0x00001132
    4974:	00001132 	.word	0x00001132
    4978:	0000114e 	.word	0x0000114e
    497c:	0000113e 	.word	0x0000113e
    4980:	00001154 	.word	0x00001154
    4984:	00001182 	.word	0x00001182
    4988:	0000121c 	.word	0x0000121c
    498c:	0000127c 	.word	0x0000127c
    4990:	0000127c 	.word	0x0000127c
    4994:	000011fc 	.word	0x000011fc
    4998:	0000120e 	.word	0x0000120e
    499c:	0000122a 	.word	0x0000122a
    49a0:	00001200 	.word	0x00001200
    49a4:	00001238 	.word	0x00001238
    49a8:	0000126c 	.word	0x0000126c
    49ac:	20656854 	.word	0x20656854
    49b0:	75736572 	.word	0x75736572
    49b4:	6920746c 	.word	0x6920746c
    49b8:	64252073 	.word	0x64252073
    49bc:	0000000a 	.word	0x0000000a
    49c0:	65685420 	.word	0x65685420
    49c4:	6d657420 	.word	0x6d657420
    49c8:	73692070 	.word	0x73692070
    49cc:	00642520 	.word	0x00642520
    49d0:	00002474 	.word	0x00002474
    49d4:	00002410 	.word	0x00002410
    49d8:	00002458 	.word	0x00002458
    49dc:	0000233e 	.word	0x0000233e
    49e0:	00002458 	.word	0x00002458
    49e4:	0000244c 	.word	0x0000244c
    49e8:	00002458 	.word	0x00002458
    49ec:	0000233e 	.word	0x0000233e
    49f0:	00002410 	.word	0x00002410
    49f4:	00002410 	.word	0x00002410
    49f8:	0000244c 	.word	0x0000244c
    49fc:	0000233e 	.word	0x0000233e
    4a00:	00002334 	.word	0x00002334
    4a04:	00002334 	.word	0x00002334
    4a08:	00002334 	.word	0x00002334
    4a0c:	00002698 	.word	0x00002698
    4a10:	00002ab8 	.word	0x00002ab8
    4a14:	00002ca6 	.word	0x00002ca6
    4a18:	00002ca6 	.word	0x00002ca6
    4a1c:	00002a98 	.word	0x00002a98
    4a20:	00002982 	.word	0x00002982
    4a24:	00002982 	.word	0x00002982
    4a28:	00002a8a 	.word	0x00002a8a
    4a2c:	00002a98 	.word	0x00002a98
    4a30:	00002982 	.word	0x00002982
    4a34:	00002a8a 	.word	0x00002a8a
    4a38:	00002982 	.word	0x00002982
    4a3c:	00002a98 	.word	0x00002a98
    4a40:	00002980 	.word	0x00002980
    4a44:	00002980 	.word	0x00002980
    4a48:	00002980 	.word	0x00002980
    4a4c:	00002cae 	.word	0x00002cae
    4a50:	00000043 	.word	0x00000043

00004a54 <_global_impure_ptr>:
    4a54:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    4a64:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    4a74:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    4a84:	64636261 00006665                       abcdef..

00004a8c <__sf_fake_stdin>:
	...

00004aac <__sf_fake_stdout>:
	...

00004acc <__sf_fake_stderr>:
	...

00004aec <_init>:
    4aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aee:	46c0      	nop			; (mov r8, r8)
    4af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4af2:	bc08      	pop	{r3}
    4af4:	469e      	mov	lr, r3
    4af6:	4770      	bx	lr

00004af8 <__init_array_start>:
    4af8:	000000dd 	.word	0x000000dd

00004afc <_fini>:
    4afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b02:	bc08      	pop	{r3}
    4b04:	469e      	mov	lr, r3
    4b06:	4770      	bx	lr

00004b08 <__fini_array_start>:
    4b08:	000000b5 	.word	0x000000b5
