
temp_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000080b0  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000080b0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000994  20000070  00008120  00018070  2**2
                  ALLOC
  3 .stack        00002004  20000a04  00008ab4  00018070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00018098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003832a  00000000  00000000  00018126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000065cb  00000000  00000000  00050450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ceec  00000000  00000000  00056a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ba0  00000000  00000000  00063907  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001108  00000000  00000000  000644a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fac7  00000000  00000000  000655af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a859  00000000  00000000  00085076  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00086b32  00000000  00000000  0009f8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002588  00000000  00000000  00126404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002a08 	.word	0x20002a08
       4:	00002401 	.word	0x00002401
       8:	000023fd 	.word	0x000023fd
       c:	000023fd 	.word	0x000023fd
	...
      2c:	000023fd 	.word	0x000023fd
	...
      38:	000023fd 	.word	0x000023fd
      3c:	000023fd 	.word	0x000023fd
      40:	000023fd 	.word	0x000023fd
      44:	000023fd 	.word	0x000023fd
      48:	000023fd 	.word	0x000023fd
      4c:	000023fd 	.word	0x000023fd
      50:	00000891 	.word	0x00000891
      54:	000023fd 	.word	0x000023fd
      58:	000023fd 	.word	0x000023fd
      5c:	000023fd 	.word	0x000023fd
      60:	000023fd 	.word	0x000023fd
      64:	00000e91 	.word	0x00000e91
      68:	00000ea1 	.word	0x00000ea1
      6c:	00000eb1 	.word	0x00000eb1
      70:	00000ec1 	.word	0x00000ec1
      74:	00000ed1 	.word	0x00000ed1
      78:	00000ee1 	.word	0x00000ee1
      7c:	000023fd 	.word	0x000023fd
      80:	000023fd 	.word	0x000023fd
      84:	000023fd 	.word	0x000023fd
      88:	0000209d 	.word	0x0000209d
      8c:	000020ad 	.word	0x000020ad
      90:	000020bd 	.word	0x000020bd
	...
      9c:	00000765 	.word	0x00000765
      a0:	000023fd 	.word	0x000023fd
      a4:	00000000 	.word	0x00000000
      a8:	000023fd 	.word	0x000023fd
      ac:	000023fd 	.word	0x000023fd
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	000080b0 	.word	0x000080b0

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	000080b0 	.word	0x000080b0
     108:	20000074 	.word	0x20000074
     10c:	000080b0 	.word	0x000080b0
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00001dc5 	.word	0x00001dc5
     140:	00004f45 	.word	0x00004f45
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     150:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_us+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     158:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15e:	e006      	b.n	16e <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     164:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     166:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_us+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000000 	.word	0x20000000
     178:	e000e010 	.word	0xe000e010

0000017c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     17c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <delay_cycles_ms+0x24>)
     180:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     182:	4a08      	ldr	r2, [pc, #32]	; (1a4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     184:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     186:	2180      	movs	r1, #128	; 0x80
     188:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     18a:	e006      	b.n	19a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     18c:	2c00      	cmp	r4, #0
     18e:	d004      	beq.n	19a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     190:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     192:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     194:	6813      	ldr	r3, [r2, #0]
     196:	420b      	tst	r3, r1
     198:	d0fc      	beq.n	194 <delay_cycles_ms+0x18>
     19a:	3801      	subs	r0, #1
     19c:	d2f6      	bcs.n	18c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     19e:	bd30      	pop	{r4, r5, pc}
     1a0:	20000004 	.word	0x20000004
     1a4:	e000e010 	.word	0xe000e010

000001a8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1a8:	4b0c      	ldr	r3, [pc, #48]	; (1dc <cpu_irq_enter_critical+0x34>)
     1aa:	681b      	ldr	r3, [r3, #0]
     1ac:	2b00      	cmp	r3, #0
     1ae:	d110      	bne.n	1d2 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1b0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b4:	2b00      	cmp	r3, #0
     1b6:	d109      	bne.n	1cc <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     1b8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1be:	2200      	movs	r2, #0
     1c0:	4b07      	ldr	r3, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x38>)
     1c2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1c4:	2201      	movs	r2, #1
     1c6:	4b07      	ldr	r3, [pc, #28]	; (1e4 <cpu_irq_enter_critical+0x3c>)
     1c8:	701a      	strb	r2, [r3, #0]
     1ca:	e002      	b.n	1d2 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1cc:	2200      	movs	r2, #0
     1ce:	4b05      	ldr	r3, [pc, #20]	; (1e4 <cpu_irq_enter_critical+0x3c>)
     1d0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1d2:	4b02      	ldr	r3, [pc, #8]	; (1dc <cpu_irq_enter_critical+0x34>)
     1d4:	681a      	ldr	r2, [r3, #0]
     1d6:	3201      	adds	r2, #1
     1d8:	601a      	str	r2, [r3, #0]
}
     1da:	4770      	bx	lr
     1dc:	2000008c 	.word	0x2000008c
     1e0:	20000008 	.word	0x20000008
     1e4:	20000090 	.word	0x20000090

000001e8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1e8:	4b08      	ldr	r3, [pc, #32]	; (20c <cpu_irq_leave_critical+0x24>)
     1ea:	681a      	ldr	r2, [r3, #0]
     1ec:	3a01      	subs	r2, #1
     1ee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f0:	681b      	ldr	r3, [r3, #0]
     1f2:	2b00      	cmp	r3, #0
     1f4:	d109      	bne.n	20a <cpu_irq_leave_critical+0x22>
     1f6:	4b06      	ldr	r3, [pc, #24]	; (210 <cpu_irq_leave_critical+0x28>)
     1f8:	781b      	ldrb	r3, [r3, #0]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d005      	beq.n	20a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1fe:	2201      	movs	r2, #1
     200:	4b04      	ldr	r3, [pc, #16]	; (214 <cpu_irq_leave_critical+0x2c>)
     202:	701a      	strb	r2, [r3, #0]
     204:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     208:	b662      	cpsie	i
	}
}
     20a:	4770      	bx	lr
     20c:	2000008c 	.word	0x2000008c
     210:	20000090 	.word	0x20000090
     214:	20000008 	.word	0x20000008

00000218 <system_board_init>:




void system_board_init(void)
{
     218:	b5f0      	push	{r4, r5, r6, r7, lr}
     21a:	4647      	mov	r7, r8
     21c:	b480      	push	{r7}
     21e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     220:	ac01      	add	r4, sp, #4
     222:	2601      	movs	r6, #1
     224:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     226:	2700      	movs	r7, #0
     228:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     22a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     22c:	2013      	movs	r0, #19
     22e:	1c21      	adds	r1, r4, #0
     230:	4d27      	ldr	r5, [pc, #156]	; (2d0 <system_board_init+0xb8>)
     232:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     234:	4a27      	ldr	r2, [pc, #156]	; (2d4 <system_board_init+0xbc>)
     236:	4690      	mov	r8, r2
     238:	2380      	movs	r3, #128	; 0x80
     23a:	031b      	lsls	r3, r3, #12
     23c:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     23e:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     240:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     242:	201c      	movs	r0, #28
     244:	1c21      	adds	r1, r4, #0
     246:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     248:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     24a:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     24c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
     24e:	2052      	movs	r0, #82	; 0x52
     250:	1c21      	adds	r1, r4, #0
     252:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
     254:	203e      	movs	r0, #62	; 0x3e
     256:	1c21      	adds	r1, r4, #0
     258:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
     25a:	203f      	movs	r0, #63	; 0x3f
     25c:	1c21      	adds	r1, r4, #0
     25e:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
     260:	202f      	movs	r0, #47	; 0x2f
     262:	1c21      	adds	r1, r4, #0
     264:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
     266:	2014      	movs	r0, #20
     268:	1c21      	adds	r1, r4, #0
     26a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	02d2      	lsls	r2, r2, #11
     270:	4b19      	ldr	r3, [pc, #100]	; (2d8 <system_board_init+0xc0>)
     272:	619a      	str	r2, [r3, #24]
     274:	3b80      	subs	r3, #128	; 0x80
     276:	2280      	movs	r2, #128	; 0x80
     278:	05d2      	lsls	r2, r2, #23
     27a:	619a      	str	r2, [r3, #24]
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	0612      	lsls	r2, r2, #24
     280:	619a      	str	r2, [r3, #24]
     282:	2280      	movs	r2, #128	; 0x80
     284:	0212      	lsls	r2, r2, #8
     286:	619a      	str	r2, [r3, #24]
     288:	2380      	movs	r3, #128	; 0x80
     28a:	035b      	lsls	r3, r3, #13
     28c:	4642      	mov	r2, r8
     28e:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     290:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
     292:	2053      	movs	r0, #83	; 0x53
     294:	1c21      	adds	r1, r4, #0
     296:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
     298:	4b10      	ldr	r3, [pc, #64]	; (2dc <system_board_init+0xc4>)
     29a:	6a19      	ldr	r1, [r3, #32]
     29c:	2280      	movs	r2, #128	; 0x80
     29e:	0392      	lsls	r2, r2, #14
     2a0:	430a      	orrs	r2, r1
     2a2:	621a      	str	r2, [r3, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
     2a4:	2204      	movs	r2, #4
     2a6:	4b0e      	ldr	r3, [pc, #56]	; (2e0 <system_board_init+0xc8>)
     2a8:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2aa:	466b      	mov	r3, sp
     2ac:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
     2ae:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
     2b0:	2305      	movs	r3, #5
     2b2:	466a      	mov	r2, sp
     2b4:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
     2b6:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
     2b8:	2009      	movs	r0, #9
     2ba:	4669      	mov	r1, sp
     2bc:	4c09      	ldr	r4, [pc, #36]	; (2e4 <system_board_init+0xcc>)
     2be:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
     2c0:	200c      	movs	r0, #12
     2c2:	4669      	mov	r1, sp
     2c4:	47a0      	blx	r4
#endif

}
     2c6:	b002      	add	sp, #8
     2c8:	bc04      	pop	{r2}
     2ca:	4690      	mov	r8, r2
     2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	00000a11 	.word	0x00000a11
     2d4:	41004400 	.word	0x41004400
     2d8:	41004500 	.word	0x41004500
     2dc:	40000400 	.word	0x40000400
     2e0:	42005400 	.word	0x42005400
     2e4:	00001fb9 	.word	0x00001fb9

000002e8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     2e8:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     2ea:	2200      	movs	r2, #0
     2ec:	2300      	movs	r3, #0
     2ee:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     2f0:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     2f2:	2100      	movs	r1, #0
     2f4:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     2f6:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     2f8:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     2fa:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     2fc:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     2fe:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
     300:	2406      	movs	r4, #6
     302:	7304      	strb	r4, [r0, #12]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     304:	24c0      	movs	r4, #192	; 0xc0
     306:	0164      	lsls	r4, r4, #5
     308:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     30a:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     30c:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     30e:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     310:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     312:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     314:	242a      	movs	r4, #42	; 0x2a
     316:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     318:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     31a:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     31c:	2424      	movs	r4, #36	; 0x24
     31e:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     320:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     322:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     324:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     326:	232b      	movs	r3, #43	; 0x2b
     328:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     32a:	232c      	movs	r3, #44	; 0x2c
     32c:	54c1      	strb	r1, [r0, r3]
}
     32e:	bd10      	pop	{r4, pc}

00000330 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	465f      	mov	r7, fp
     334:	4656      	mov	r6, sl
     336:	464d      	mov	r5, r9
     338:	4644      	mov	r4, r8
     33a:	b4f0      	push	{r4, r5, r6, r7}
     33c:	b099      	sub	sp, #100	; 0x64
     33e:	1c06      	adds	r6, r0, #0
     340:	1c14      	adds	r4, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     342:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     344:	4bba      	ldr	r3, [pc, #744]	; (630 <adc_init+0x300>)
     346:	6a18      	ldr	r0, [r3, #32]
     348:	2280      	movs	r2, #128	; 0x80
     34a:	0252      	lsls	r2, r2, #9
     34c:	4302      	orrs	r2, r0
     34e:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     350:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     352:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     354:	07da      	lsls	r2, r3, #31
     356:	d500      	bpl.n	35a <adc_init+0x2a>
     358:	e1f4      	b.n	744 <adc_init+0x414>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     35a:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     35c:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     35e:	0799      	lsls	r1, r3, #30
     360:	d500      	bpl.n	364 <adc_init+0x34>
     362:	e1ef      	b.n	744 <adc_init+0x414>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     364:	7863      	ldrb	r3, [r4, #1]
     366:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     368:	2b00      	cmp	r3, #0
     36a:	d000      	beq.n	36e <adc_init+0x3e>
     36c:	e1da      	b.n	724 <adc_init+0x3f4>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     36e:	4bb1      	ldr	r3, [pc, #708]	; (634 <adc_init+0x304>)
     370:	6c19      	ldr	r1, [r3, #64]	; 0x40
     372:	2204      	movs	r2, #4
     374:	430a      	orrs	r2, r1
     376:	641a      	str	r2, [r3, #64]	; 0x40
     378:	e1d4      	b.n	724 <adc_init+0x3f4>
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     37a:	7d23      	ldrb	r3, [r4, #20]
     37c:	2b00      	cmp	r3, #0
     37e:	d102      	bne.n	386 <adc_init+0x56>
			!config->freerunning) {
		module_inst->software_trigger = true;
     380:	2301      	movs	r3, #1
     382:	7773      	strb	r3, [r6, #29]
     384:	e001      	b.n	38a <adc_init+0x5a>
	} else {
		module_inst->software_trigger = false;
     386:	2300      	movs	r3, #0
     388:	7773      	strb	r3, [r6, #29]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     38a:	6832      	ldr	r2, [r6, #0]
     38c:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     38e:	7823      	ldrb	r3, [r4, #0]
     390:	4668      	mov	r0, sp
     392:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     394:	201e      	movs	r0, #30
     396:	a902      	add	r1, sp, #8
     398:	4ba7      	ldr	r3, [pc, #668]	; (638 <adc_init+0x308>)
     39a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     39c:	201e      	movs	r0, #30
     39e:	4ba7      	ldr	r3, [pc, #668]	; (63c <adc_init+0x30c>)
     3a0:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     3a2:	232c      	movs	r3, #44	; 0x2c
     3a4:	5ce3      	ldrb	r3, [r4, r3]
     3a6:	2b00      	cmp	r3, #0
     3a8:	d042      	beq.n	430 <adc_init+0x100>
		uint8_t offset = config->pin_scan.offset_start_scan;
     3aa:	222b      	movs	r2, #43	; 0x2b
     3ac:	5ca5      	ldrb	r5, [r4, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     3ae:	7b21      	ldrb	r1, [r4, #12]
     3b0:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     3b2:	194a      	adds	r2, r1, r5
     3b4:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     3b6:	18d3      	adds	r3, r2, r3
     3b8:	b2db      	uxtb	r3, r3
     3ba:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     3bc:	429a      	cmp	r2, r3
     3be:	d221      	bcs.n	404 <adc_init+0xd4>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     3c0:	4a9f      	ldr	r2, [pc, #636]	; (640 <adc_init+0x310>)
     3c2:	4693      	mov	fp, r2
     3c4:	4b9f      	ldr	r3, [pc, #636]	; (644 <adc_init+0x314>)
     3c6:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     3c8:	270f      	movs	r7, #15
     3ca:	402f      	ands	r7, r5
     3cc:	7b23      	ldrb	r3, [r4, #12]
     3ce:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     3d0:	a804      	add	r0, sp, #16
     3d2:	4659      	mov	r1, fp
     3d4:	2250      	movs	r2, #80	; 0x50
     3d6:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     3d8:	2f13      	cmp	r7, #19
     3da:	d80c      	bhi.n	3f6 <adc_init+0xc6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3dc:	00bf      	lsls	r7, r7, #2
     3de:	ab04      	add	r3, sp, #16
     3e0:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3e2:	a903      	add	r1, sp, #12
     3e4:	2300      	movs	r3, #0
     3e6:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     3e8:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3ea:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3ec:	2301      	movs	r3, #1
     3ee:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     3f0:	b2c0      	uxtb	r0, r0
     3f2:	4a95      	ldr	r2, [pc, #596]	; (648 <adc_init+0x318>)
     3f4:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     3f6:	3501      	adds	r5, #1
     3f8:	b2ed      	uxtb	r5, r5
     3fa:	4640      	mov	r0, r8
     3fc:	1943      	adds	r3, r0, r5
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     3fe:	b2db      	uxtb	r3, r3
     400:	454b      	cmp	r3, r9
     402:	d3e1      	bcc.n	3c8 <adc_init+0x98>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     404:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     406:	a804      	add	r0, sp, #16
     408:	498d      	ldr	r1, [pc, #564]	; (640 <adc_init+0x310>)
     40a:	2250      	movs	r2, #80	; 0x50
     40c:	4b8d      	ldr	r3, [pc, #564]	; (644 <adc_init+0x314>)
     40e:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     410:	2d13      	cmp	r5, #19
     412:	d837      	bhi.n	484 <adc_init+0x154>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     414:	00ad      	lsls	r5, r5, #2
     416:	ab04      	add	r3, sp, #16
     418:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     41a:	a903      	add	r1, sp, #12
     41c:	2300      	movs	r3, #0
     41e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     420:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     422:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     424:	2301      	movs	r3, #1
     426:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     428:	b2c0      	uxtb	r0, r0
     42a:	4b87      	ldr	r3, [pc, #540]	; (648 <adc_init+0x318>)
     42c:	4798      	blx	r3
     42e:	e029      	b.n	484 <adc_init+0x154>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     430:	7b25      	ldrb	r5, [r4, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     432:	a804      	add	r0, sp, #16
     434:	4982      	ldr	r1, [pc, #520]	; (640 <adc_init+0x310>)
     436:	2250      	movs	r2, #80	; 0x50
     438:	4b82      	ldr	r3, [pc, #520]	; (644 <adc_init+0x314>)
     43a:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     43c:	2d13      	cmp	r5, #19
     43e:	d80c      	bhi.n	45a <adc_init+0x12a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     440:	00ad      	lsls	r5, r5, #2
     442:	ab04      	add	r3, sp, #16
     444:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     446:	a903      	add	r1, sp, #12
     448:	2300      	movs	r3, #0
     44a:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     44c:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     44e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     450:	2301      	movs	r3, #1
     452:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     454:	b2c0      	uxtb	r0, r0
     456:	4b7c      	ldr	r3, [pc, #496]	; (648 <adc_init+0x318>)
     458:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     45a:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     45c:	a804      	add	r0, sp, #16
     45e:	4978      	ldr	r1, [pc, #480]	; (640 <adc_init+0x310>)
     460:	2250      	movs	r2, #80	; 0x50
     462:	4b78      	ldr	r3, [pc, #480]	; (644 <adc_init+0x314>)
     464:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     466:	2d13      	cmp	r5, #19
     468:	d80c      	bhi.n	484 <adc_init+0x154>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     46a:	00ad      	lsls	r5, r5, #2
     46c:	ab04      	add	r3, sp, #16
     46e:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     470:	a903      	add	r1, sp, #12
     472:	2300      	movs	r3, #0
     474:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     476:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     478:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     47a:	2301      	movs	r3, #1
     47c:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     47e:	b2c0      	uxtb	r0, r0
     480:	4b71      	ldr	r3, [pc, #452]	; (648 <adc_init+0x318>)
     482:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     484:	7d63      	ldrb	r3, [r4, #21]
     486:	009b      	lsls	r3, r3, #2
     488:	b2db      	uxtb	r3, r3
     48a:	9901      	ldr	r1, [sp, #4]
     48c:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     48e:	7da3      	ldrb	r3, [r4, #22]
     490:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     492:	7862      	ldrb	r2, [r4, #1]
     494:	4313      	orrs	r3, r2
     496:	b2db      	uxtb	r3, r3
     498:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     49a:	7923      	ldrb	r3, [r4, #4]
     49c:	2b34      	cmp	r3, #52	; 0x34
     49e:	d900      	bls.n	4a2 <adc_init+0x172>
     4a0:	e13e      	b.n	720 <adc_init+0x3f0>
     4a2:	009b      	lsls	r3, r3, #2
     4a4:	4a69      	ldr	r2, [pc, #420]	; (64c <adc_init+0x31c>)
     4a6:	58d3      	ldr	r3, [r2, r3]
     4a8:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     4aa:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4ac:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4ae:	2301      	movs	r3, #1
     4b0:	e01a      	b.n	4e8 <adc_init+0x1b8>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     4b2:	7c63      	ldrb	r3, [r4, #17]
		accumulate = config->accumulate_samples;
     4b4:	7c22      	ldrb	r2, [r4, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4b6:	2510      	movs	r5, #16
     4b8:	e016      	b.n	4e8 <adc_init+0x1b8>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     4ba:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4bc:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     4be:	2301      	movs	r3, #1
     4c0:	e012      	b.n	4e8 <adc_init+0x1b8>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     4c2:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4c4:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     4c6:	2300      	movs	r3, #0
     4c8:	e00e      	b.n	4e8 <adc_init+0x1b8>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     4ca:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     4cc:	2530      	movs	r5, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     4ce:	2300      	movs	r3, #0
     4d0:	e00a      	b.n	4e8 <adc_init+0x1b8>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     4d2:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     4d4:	2520      	movs	r5, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     4d6:	2300      	movs	r3, #0
     4d8:	e006      	b.n	4e8 <adc_init+0x1b8>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     4da:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     4dc:	2500      	movs	r5, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     4de:	2300      	movs	r3, #0
     4e0:	e002      	b.n	4e8 <adc_init+0x1b8>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     4e2:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     4e4:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     4e6:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     4e8:	011b      	lsls	r3, r3, #4
     4ea:	2170      	movs	r1, #112	; 0x70
     4ec:	400b      	ands	r3, r1
     4ee:	4313      	orrs	r3, r2
     4f0:	9a01      	ldr	r2, [sp, #4]
     4f2:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     4f4:	7de3      	ldrb	r3, [r4, #23]
		return STATUS_ERR_INVALID_ARG;
     4f6:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     4f8:	2b3f      	cmp	r3, #63	; 0x3f
     4fa:	d900      	bls.n	4fe <adc_init+0x1ce>
     4fc:	e122      	b.n	744 <adc_init+0x414>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     4fe:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     500:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     502:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     504:	b25b      	sxtb	r3, r3
     506:	2b00      	cmp	r3, #0
     508:	dbfb      	blt.n	502 <adc_init+0x1d2>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     50a:	7ce2      	ldrb	r2, [r4, #19]
     50c:	8863      	ldrh	r3, [r4, #2]
     50e:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     510:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     512:	5ca2      	ldrb	r2, [r4, r2]
     514:	00d2      	lsls	r2, r2, #3
     516:	4313      	orrs	r3, r2
     518:	7d22      	ldrb	r2, [r4, #20]
     51a:	0092      	lsls	r2, r2, #2
     51c:	4313      	orrs	r3, r2
     51e:	7ca2      	ldrb	r2, [r4, #18]
     520:	0052      	lsls	r2, r2, #1
     522:	4313      	orrs	r3, r2
     524:	432b      	orrs	r3, r5
     526:	9801      	ldr	r0, [sp, #4]
     528:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     52a:	7e23      	ldrb	r3, [r4, #24]
     52c:	2b00      	cmp	r3, #0
     52e:	d101      	bne.n	534 <adc_init+0x204>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     530:	6831      	ldr	r1, [r6, #0]
     532:	e095      	b.n	660 <adc_init+0x330>
		switch (resolution) {
     534:	2d10      	cmp	r5, #16
     536:	d05b      	beq.n	5f0 <adc_init+0x2c0>
     538:	d802      	bhi.n	540 <adc_init+0x210>
     53a:	2d00      	cmp	r5, #0
     53c:	d038      	beq.n	5b0 <adc_init+0x280>
     53e:	e7f7      	b.n	530 <adc_init+0x200>
     540:	2d20      	cmp	r5, #32
     542:	d019      	beq.n	578 <adc_init+0x248>
     544:	2d30      	cmp	r5, #48	; 0x30
     546:	d1f3      	bne.n	530 <adc_init+0x200>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     548:	7ce2      	ldrb	r2, [r4, #19]
     54a:	2a00      	cmp	r2, #0
     54c:	d00a      	beq.n	564 <adc_init+0x234>
					(config->window.window_lower_value > 127 ||
     54e:	69e2      	ldr	r2, [r4, #28]
     550:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     552:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     554:	2aff      	cmp	r2, #255	; 0xff
     556:	d900      	bls.n	55a <adc_init+0x22a>
     558:	e0f4      	b.n	744 <adc_init+0x414>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     55a:	6a22      	ldr	r2, [r4, #32]
     55c:	3280      	adds	r2, #128	; 0x80
     55e:	2aff      	cmp	r2, #255	; 0xff
     560:	d900      	bls.n	564 <adc_init+0x234>
     562:	e0ef      	b.n	744 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     564:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     566:	69e1      	ldr	r1, [r4, #28]
     568:	29ff      	cmp	r1, #255	; 0xff
     56a:	dd00      	ble.n	56e <adc_init+0x23e>
     56c:	e0ea      	b.n	744 <adc_init+0x414>
     56e:	6a22      	ldr	r2, [r4, #32]
     570:	2aff      	cmp	r2, #255	; 0xff
     572:	dd00      	ble.n	576 <adc_init+0x246>
     574:	e0e6      	b.n	744 <adc_init+0x414>
     576:	e7db      	b.n	530 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     578:	7ce2      	ldrb	r2, [r4, #19]
     57a:	2a00      	cmp	r2, #0
     57c:	d00d      	beq.n	59a <adc_init+0x26a>
					(config->window.window_lower_value > 511 ||
     57e:	69e0      	ldr	r0, [r4, #28]
     580:	2280      	movs	r2, #128	; 0x80
     582:	0092      	lsls	r2, r2, #2
     584:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     586:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     588:	4a31      	ldr	r2, [pc, #196]	; (650 <adc_init+0x320>)
     58a:	4291      	cmp	r1, r2
     58c:	d900      	bls.n	590 <adc_init+0x260>
     58e:	e0d9      	b.n	744 <adc_init+0x414>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     590:	4a30      	ldr	r2, [pc, #192]	; (654 <adc_init+0x324>)
     592:	6a21      	ldr	r1, [r4, #32]
     594:	4291      	cmp	r1, r2
     596:	db00      	blt.n	59a <adc_init+0x26a>
     598:	e0d4      	b.n	744 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     59a:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     59c:	4a2c      	ldr	r2, [pc, #176]	; (650 <adc_init+0x320>)
     59e:	69e1      	ldr	r1, [r4, #28]
     5a0:	4291      	cmp	r1, r2
     5a2:	dd00      	ble.n	5a6 <adc_init+0x276>
     5a4:	e0ce      	b.n	744 <adc_init+0x414>
     5a6:	6a21      	ldr	r1, [r4, #32]
     5a8:	4291      	cmp	r1, r2
     5aa:	dd00      	ble.n	5ae <adc_init+0x27e>
     5ac:	e0ca      	b.n	744 <adc_init+0x414>
     5ae:	e7bf      	b.n	530 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     5b0:	7ce2      	ldrb	r2, [r4, #19]
     5b2:	2a00      	cmp	r2, #0
     5b4:	d011      	beq.n	5da <adc_init+0x2aa>
					(config->window.window_lower_value > 2047 ||
     5b6:	69e2      	ldr	r2, [r4, #28]
     5b8:	2080      	movs	r0, #128	; 0x80
     5ba:	0100      	lsls	r0, r0, #4
     5bc:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5be:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     5c0:	4a25      	ldr	r2, [pc, #148]	; (658 <adc_init+0x328>)
     5c2:	4291      	cmp	r1, r2
     5c4:	d900      	bls.n	5c8 <adc_init+0x298>
     5c6:	e0bd      	b.n	744 <adc_init+0x414>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     5c8:	6a22      	ldr	r2, [r4, #32]
     5ca:	2080      	movs	r0, #128	; 0x80
     5cc:	0100      	lsls	r0, r0, #4
     5ce:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5d0:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     5d2:	4a21      	ldr	r2, [pc, #132]	; (658 <adc_init+0x328>)
     5d4:	4291      	cmp	r1, r2
     5d6:	d900      	bls.n	5da <adc_init+0x2aa>
     5d8:	e0b4      	b.n	744 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5da:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     5dc:	4a1e      	ldr	r2, [pc, #120]	; (658 <adc_init+0x328>)
     5de:	69e1      	ldr	r1, [r4, #28]
     5e0:	4291      	cmp	r1, r2
     5e2:	dd00      	ble.n	5e6 <adc_init+0x2b6>
     5e4:	e0ae      	b.n	744 <adc_init+0x414>
     5e6:	6a21      	ldr	r1, [r4, #32]
     5e8:	4291      	cmp	r1, r2
     5ea:	dd00      	ble.n	5ee <adc_init+0x2be>
     5ec:	e0aa      	b.n	744 <adc_init+0x414>
     5ee:	e79f      	b.n	530 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     5f0:	7ce2      	ldrb	r2, [r4, #19]
     5f2:	2a00      	cmp	r2, #0
     5f4:	d011      	beq.n	61a <adc_init+0x2ea>
					(config->window.window_lower_value > 32767 ||
     5f6:	69e2      	ldr	r2, [r4, #28]
     5f8:	2080      	movs	r0, #128	; 0x80
     5fa:	0200      	lsls	r0, r0, #8
     5fc:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     5fe:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     600:	4a16      	ldr	r2, [pc, #88]	; (65c <adc_init+0x32c>)
     602:	4291      	cmp	r1, r2
     604:	d900      	bls.n	608 <adc_init+0x2d8>
     606:	e09d      	b.n	744 <adc_init+0x414>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     608:	6a22      	ldr	r2, [r4, #32]
     60a:	2080      	movs	r0, #128	; 0x80
     60c:	0200      	lsls	r0, r0, #8
     60e:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     610:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     612:	4a12      	ldr	r2, [pc, #72]	; (65c <adc_init+0x32c>)
     614:	4291      	cmp	r1, r2
     616:	d900      	bls.n	61a <adc_init+0x2ea>
     618:	e094      	b.n	744 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     61a:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     61c:	4a0f      	ldr	r2, [pc, #60]	; (65c <adc_init+0x32c>)
     61e:	69e1      	ldr	r1, [r4, #28]
     620:	4291      	cmp	r1, r2
     622:	dd00      	ble.n	626 <adc_init+0x2f6>
     624:	e08e      	b.n	744 <adc_init+0x414>
     626:	6a21      	ldr	r1, [r4, #32]
     628:	4291      	cmp	r1, r2
     62a:	dd00      	ble.n	62e <adc_init+0x2fe>
     62c:	e08a      	b.n	744 <adc_init+0x414>
     62e:	e77f      	b.n	530 <adc_init+0x200>
     630:	40000400 	.word	0x40000400
     634:	40000800 	.word	0x40000800
     638:	00001edd 	.word	0x00001edd
     63c:	00001e51 	.word	0x00001e51
     640:	00007e2c 	.word	0x00007e2c
     644:	00006db9 	.word	0x00006db9
     648:	00001fb9 	.word	0x00001fb9
     64c:	00007d58 	.word	0x00007d58
     650:	000003ff 	.word	0x000003ff
     654:	fffffe01 	.word	0xfffffe01
     658:	00000fff 	.word	0x00000fff
     65c:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     660:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     662:	b252      	sxtb	r2, r2
     664:	2a00      	cmp	r2, #0
     666:	dbfb      	blt.n	660 <adc_init+0x330>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     668:	9a01      	ldr	r2, [sp, #4]
     66a:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     66c:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     66e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     670:	b25b      	sxtb	r3, r3
     672:	2b00      	cmp	r3, #0
     674:	dbfb      	blt.n	66e <adc_init+0x33e>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     676:	8ba3      	ldrh	r3, [r4, #28]
     678:	9801      	ldr	r0, [sp, #4]
     67a:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     67c:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     67e:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     680:	b25b      	sxtb	r3, r3
     682:	2b00      	cmp	r3, #0
     684:	dbfb      	blt.n	67e <adc_init+0x34e>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     686:	8c23      	ldrh	r3, [r4, #32]
     688:	9901      	ldr	r1, [sp, #4]
     68a:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     68c:	232c      	movs	r3, #44	; 0x2c
     68e:	5ce3      	ldrb	r3, [r4, r3]
	if (inputs_to_scan > 0) {
     690:	2b00      	cmp	r3, #0
     692:	d004      	beq.n	69e <adc_init+0x36e>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     694:	3b01      	subs	r3, #1
     696:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     698:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     69a:	2b0f      	cmp	r3, #15
     69c:	d852      	bhi.n	744 <adc_init+0x414>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     69e:	222b      	movs	r2, #43	; 0x2b
     6a0:	5ca2      	ldrb	r2, [r4, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     6a2:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     6a4:	2a0f      	cmp	r2, #15
     6a6:	d84d      	bhi.n	744 <adc_init+0x414>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     6a8:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6aa:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
     6ac:	b240      	sxtb	r0, r0
     6ae:	2800      	cmp	r0, #0
     6b0:	dbfb      	blt.n	6aa <adc_init+0x37a>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     6b2:	89e0      	ldrh	r0, [r4, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     6b4:	7b21      	ldrb	r1, [r4, #12]
			config->gain_factor |
     6b6:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     6b8:	68a0      	ldr	r0, [r4, #8]
     6ba:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
     6bc:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     6be:	430a      	orrs	r2, r1
     6c0:	041b      	lsls	r3, r3, #16
			config->negative_input |
     6c2:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     6c4:	9901      	ldr	r1, [sp, #4]
     6c6:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     6c8:	232a      	movs	r3, #42	; 0x2a
     6ca:	5ce3      	ldrb	r3, [r4, r3]
     6cc:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     6ce:	230f      	movs	r3, #15
     6d0:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     6d2:	2324      	movs	r3, #36	; 0x24
     6d4:	5ce3      	ldrb	r3, [r4, r3]
     6d6:	2b00      	cmp	r3, #0
     6d8:	d010      	beq.n	6fc <adc_init+0x3cc>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     6da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
     6dc:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     6de:	4a1d      	ldr	r2, [pc, #116]	; (754 <adc_init+0x424>)
     6e0:	4293      	cmp	r3, r2
     6e2:	d82f      	bhi.n	744 <adc_init+0x414>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     6e4:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     6e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     6e8:	2080      	movs	r0, #128	; 0x80
     6ea:	0100      	lsls	r0, r0, #4
     6ec:	1819      	adds	r1, r3, r0
     6ee:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     6f0:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     6f2:	4a18      	ldr	r2, [pc, #96]	; (754 <adc_init+0x424>)
     6f4:	4291      	cmp	r1, r2
     6f6:	d825      	bhi.n	744 <adc_init+0x414>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     6f8:	9901      	ldr	r1, [sp, #4]
     6fa:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     6fc:	4b16      	ldr	r3, [pc, #88]	; (758 <adc_init+0x428>)
     6fe:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     700:	0152      	lsls	r2, r2, #5
     702:	23e0      	movs	r3, #224	; 0xe0
     704:	00db      	lsls	r3, r3, #3
     706:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     708:	4b14      	ldr	r3, [pc, #80]	; (75c <adc_init+0x42c>)
     70a:	6858      	ldr	r0, [r3, #4]
     70c:	0141      	lsls	r1, r0, #5
     70e:	681b      	ldr	r3, [r3, #0]
     710:	0edb      	lsrs	r3, r3, #27
     712:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     714:	b2db      	uxtb	r3, r3
     716:	4313      	orrs	r3, r2
     718:	9901      	ldr	r1, [sp, #4]
     71a:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     71c:	2000      	movs	r0, #0
     71e:	e011      	b.n	744 <adc_init+0x414>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     720:	2017      	movs	r0, #23
     722:	e00f      	b.n	744 <adc_init+0x414>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     724:	2300      	movs	r3, #0
     726:	60b3      	str	r3, [r6, #8]
     728:	60f3      	str	r3, [r6, #12]
     72a:	6133      	str	r3, [r6, #16]
	};

	module_inst->registered_callback_mask = 0;
     72c:	76b3      	strb	r3, [r6, #26]
	module_inst->enabled_callback_mask = 0;
     72e:	76f3      	strb	r3, [r6, #27]
	module_inst->remaining_conversions = 0;
     730:	8333      	strh	r3, [r6, #24]
	module_inst->job_status = STATUS_OK;
     732:	7733      	strb	r3, [r6, #28]

	_adc_instances[0] = module_inst;
     734:	4b0a      	ldr	r3, [pc, #40]	; (760 <adc_init+0x430>)
     736:	601e      	str	r6, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     738:	232a      	movs	r3, #42	; 0x2a
     73a:	5ce3      	ldrb	r3, [r4, r3]
     73c:	2b00      	cmp	r3, #0
     73e:	d100      	bne.n	742 <adc_init+0x412>
     740:	e61b      	b.n	37a <adc_init+0x4a>
     742:	e620      	b.n	386 <adc_init+0x56>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     744:	b019      	add	sp, #100	; 0x64
     746:	bc3c      	pop	{r2, r3, r4, r5}
     748:	4690      	mov	r8, r2
     74a:	4699      	mov	r9, r3
     74c:	46a2      	mov	sl, r4
     74e:	46ab      	mov	fp, r5
     750:	bdf0      	pop	{r4, r5, r6, r7, pc}
     752:	46c0      	nop			; (mov r8, r8)
     754:	00000fff 	.word	0x00000fff
     758:	00806024 	.word	0x00806024
     75c:	00806020 	.word	0x00806020
     760:	20000864 	.word	0x20000864

00000764 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     764:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     766:	4b2d      	ldr	r3, [pc, #180]	; (81c <ADC_Handler+0xb8>)
     768:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     76a:	6823      	ldr	r3, [r4, #0]
     76c:	7e1d      	ldrb	r5, [r3, #24]
     76e:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     770:	07e9      	lsls	r1, r5, #31
     772:	d535      	bpl.n	7e0 <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     774:	7ee2      	ldrb	r2, [r4, #27]
     776:	07d1      	lsls	r1, r2, #31
     778:	d532      	bpl.n	7e0 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     77a:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     77c:	07d1      	lsls	r1, r2, #31
     77e:	d52f      	bpl.n	7e0 <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     780:	2201      	movs	r2, #1
     782:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     784:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     786:	7e53      	ldrb	r3, [r2, #25]

			while (adc_is_syncing(module)) {
     788:	b25b      	sxtb	r3, r3
     78a:	2b00      	cmp	r3, #0
     78c:	dbfb      	blt.n	786 <ADC_Handler+0x22>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     78e:	6963      	ldr	r3, [r4, #20]
     790:	1c99      	adds	r1, r3, #2
     792:	6161      	str	r1, [r4, #20]
     794:	8b52      	ldrh	r2, [r2, #26]
     796:	b292      	uxth	r2, r2
     798:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     79a:	8b23      	ldrh	r3, [r4, #24]
     79c:	3b01      	subs	r3, #1
     79e:	b29b      	uxth	r3, r3
     7a0:	8323      	strh	r3, [r4, #24]
     7a2:	2b00      	cmp	r3, #0
     7a4:	d011      	beq.n	7ca <ADC_Handler+0x66>
				if (module->software_trigger == true) {
     7a6:	7f63      	ldrb	r3, [r4, #29]
     7a8:	2b00      	cmp	r3, #0
     7aa:	d019      	beq.n	7e0 <ADC_Handler+0x7c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     7ac:	6823      	ldr	r3, [r4, #0]
     7ae:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
     7b0:	b252      	sxtb	r2, r2
     7b2:	2a00      	cmp	r2, #0
     7b4:	dbfb      	blt.n	7ae <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     7b6:	7b19      	ldrb	r1, [r3, #12]
     7b8:	2202      	movs	r2, #2
     7ba:	430a      	orrs	r2, r1
     7bc:	731a      	strb	r2, [r3, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     7be:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7c0:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     7c2:	b25b      	sxtb	r3, r3
     7c4:	2b00      	cmp	r3, #0
     7c6:	dbfb      	blt.n	7c0 <ADC_Handler+0x5c>
     7c8:	e00a      	b.n	7e0 <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     7ca:	7f23      	ldrb	r3, [r4, #28]
     7cc:	2b05      	cmp	r3, #5
     7ce:	d107      	bne.n	7e0 <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     7d0:	2300      	movs	r3, #0
     7d2:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     7d4:	2301      	movs	r3, #1
     7d6:	6822      	ldr	r2, [r4, #0]
     7d8:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     7da:	1c20      	adds	r0, r4, #0
     7dc:	68a3      	ldr	r3, [r4, #8]
     7de:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     7e0:	0769      	lsls	r1, r5, #29
     7e2:	d50b      	bpl.n	7fc <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     7e4:	2304      	movs	r3, #4
     7e6:	6822      	ldr	r2, [r4, #0]
     7e8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     7ea:	7ee3      	ldrb	r3, [r4, #27]
     7ec:	0799      	lsls	r1, r3, #30
     7ee:	d505      	bpl.n	7fc <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     7f0:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     7f2:	079a      	lsls	r2, r3, #30
     7f4:	d502      	bpl.n	7fc <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     7f6:	1c20      	adds	r0, r4, #0
     7f8:	68e3      	ldr	r3, [r4, #12]
     7fa:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     7fc:	07a9      	lsls	r1, r5, #30
     7fe:	d50b      	bpl.n	818 <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     800:	2302      	movs	r3, #2
     802:	6822      	ldr	r2, [r4, #0]
     804:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     806:	7ee3      	ldrb	r3, [r4, #27]
     808:	0759      	lsls	r1, r3, #29
     80a:	d505      	bpl.n	818 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     80c:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     80e:	075a      	lsls	r2, r3, #29
     810:	d502      	bpl.n	818 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     812:	6923      	ldr	r3, [r4, #16]
     814:	1c20      	adds	r0, r4, #0
     816:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     818:	bd38      	pop	{r3, r4, r5, pc}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	20000864 	.word	0x20000864

00000820 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     820:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     822:	2a00      	cmp	r2, #0
     824:	d10f      	bne.n	846 <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     826:	008b      	lsls	r3, r1, #2
     828:	4a08      	ldr	r2, [pc, #32]	; (84c <extint_register_callback+0x2c>)
     82a:	589a      	ldr	r2, [r3, r2]
     82c:	2a00      	cmp	r2, #0
     82e:	d104      	bne.n	83a <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
     830:	1c19      	adds	r1, r3, #0
     832:	4b06      	ldr	r3, [pc, #24]	; (84c <extint_register_callback+0x2c>)
     834:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     836:	2300      	movs	r3, #0
     838:	e005      	b.n	846 <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     83a:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     83c:	1a12      	subs	r2, r2, r0
     83e:	1e50      	subs	r0, r2, #1
     840:	4182      	sbcs	r2, r0
     842:	4252      	negs	r2, r2
     844:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     846:	1c18      	adds	r0, r3, #0
     848:	4770      	bx	lr
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	2000086c 	.word	0x2000086c

00000850 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     850:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     852:	2900      	cmp	r1, #0
     854:	d107      	bne.n	866 <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     856:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     858:	281f      	cmp	r0, #31
     85a:	d800      	bhi.n	85e <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     85c:	4b03      	ldr	r3, [pc, #12]	; (86c <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     85e:	2201      	movs	r2, #1
     860:	4082      	lsls	r2, r0
     862:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     864:	2300      	movs	r3, #0
}
     866:	1c18      	adds	r0, r3, #0
     868:	4770      	bx	lr
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	40001800 	.word	0x40001800

00000870 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     870:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     872:	2900      	cmp	r1, #0
     874:	d107      	bne.n	886 <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     876:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     878:	281f      	cmp	r0, #31
     87a:	d800      	bhi.n	87e <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     87c:	4b03      	ldr	r3, [pc, #12]	; (88c <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     87e:	2201      	movs	r2, #1
     880:	4082      	lsls	r2, r0
     882:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     884:	2300      	movs	r3, #0
}
     886:	1c18      	adds	r0, r3, #0
     888:	4770      	bx	lr
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	40001800 	.word	0x40001800

00000890 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     890:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     892:	2200      	movs	r2, #0
     894:	4b16      	ldr	r3, [pc, #88]	; (8f0 <EIC_Handler+0x60>)
     896:	701a      	strb	r2, [r3, #0]
     898:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     89a:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     89c:	4d15      	ldr	r5, [pc, #84]	; (8f4 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     89e:	4c14      	ldr	r4, [pc, #80]	; (8f0 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     8a0:	2b1f      	cmp	r3, #31
     8a2:	d910      	bls.n	8c6 <EIC_Handler+0x36>
     8a4:	e019      	b.n	8da <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     8a6:	4914      	ldr	r1, [pc, #80]	; (8f8 <EIC_Handler+0x68>)
     8a8:	e000      	b.n	8ac <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     8aa:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     8ac:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     8ae:	009b      	lsls	r3, r3, #2
     8b0:	595b      	ldr	r3, [r3, r5]
     8b2:	2b00      	cmp	r3, #0
     8b4:	d000      	beq.n	8b8 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     8b6:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     8b8:	7823      	ldrb	r3, [r4, #0]
     8ba:	3301      	adds	r3, #1
     8bc:	b2db      	uxtb	r3, r3
     8be:	7023      	strb	r3, [r4, #0]
     8c0:	2b0f      	cmp	r3, #15
     8c2:	d814      	bhi.n	8ee <EIC_Handler+0x5e>
     8c4:	e7ec      	b.n	8a0 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     8c6:	1c32      	adds	r2, r6, #0
     8c8:	401a      	ands	r2, r3
     8ca:	2101      	movs	r1, #1
     8cc:	4091      	lsls	r1, r2
     8ce:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     8d0:	4909      	ldr	r1, [pc, #36]	; (8f8 <EIC_Handler+0x68>)
     8d2:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     8d4:	4211      	tst	r1, r2
     8d6:	d1e6      	bne.n	8a6 <EIC_Handler+0x16>
     8d8:	e7ee      	b.n	8b8 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     8da:	1c32      	adds	r2, r6, #0
     8dc:	401a      	ands	r2, r3
     8de:	2101      	movs	r1, #1
     8e0:	4091      	lsls	r1, r2
     8e2:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     8e4:	2100      	movs	r1, #0
     8e6:	6909      	ldr	r1, [r1, #16]
     8e8:	4211      	tst	r1, r2
     8ea:	d1de      	bne.n	8aa <EIC_Handler+0x1a>
     8ec:	e7e4      	b.n	8b8 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     8ee:	bd70      	pop	{r4, r5, r6, pc}
     8f0:	20000868 	.word	0x20000868
     8f4:	2000086c 	.word	0x2000086c
     8f8:	40001800 	.word	0x40001800

000008fc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     8fc:	4b05      	ldr	r3, [pc, #20]	; (914 <_extint_enable+0x18>)
     8fe:	7819      	ldrb	r1, [r3, #0]
     900:	2202      	movs	r2, #2
     902:	430a      	orrs	r2, r1
     904:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     906:	1c1a      	adds	r2, r3, #0
     908:	7853      	ldrb	r3, [r2, #1]
     90a:	b25b      	sxtb	r3, r3
     90c:	2b00      	cmp	r3, #0
     90e:	dbfb      	blt.n	908 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     910:	4770      	bx	lr
     912:	46c0      	nop			; (mov r8, r8)
     914:	40001800 	.word	0x40001800

00000918 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     918:	b500      	push	{lr}
     91a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     91c:	4b12      	ldr	r3, [pc, #72]	; (968 <_system_extint_init+0x50>)
     91e:	6999      	ldr	r1, [r3, #24]
     920:	2240      	movs	r2, #64	; 0x40
     922:	430a      	orrs	r2, r1
     924:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     926:	a901      	add	r1, sp, #4
     928:	2300      	movs	r3, #0
     92a:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     92c:	2005      	movs	r0, #5
     92e:	4b0f      	ldr	r3, [pc, #60]	; (96c <_system_extint_init+0x54>)
     930:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     932:	2005      	movs	r0, #5
     934:	4b0e      	ldr	r3, [pc, #56]	; (970 <_system_extint_init+0x58>)
     936:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     938:	4b0e      	ldr	r3, [pc, #56]	; (974 <_system_extint_init+0x5c>)
     93a:	7819      	ldrb	r1, [r3, #0]
     93c:	2201      	movs	r2, #1
     93e:	430a      	orrs	r2, r1
     940:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     942:	1c1a      	adds	r2, r3, #0
     944:	7853      	ldrb	r3, [r2, #1]
     946:	b25b      	sxtb	r3, r3
     948:	2b00      	cmp	r3, #0
     94a:	dbfb      	blt.n	944 <_system_extint_init+0x2c>
     94c:	4b0a      	ldr	r3, [pc, #40]	; (978 <_system_extint_init+0x60>)
     94e:	1c19      	adds	r1, r3, #0
     950:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     952:	2200      	movs	r2, #0
     954:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     956:	428b      	cmp	r3, r1
     958:	d1fc      	bne.n	954 <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     95a:	2210      	movs	r2, #16
     95c:	4b07      	ldr	r3, [pc, #28]	; (97c <_system_extint_init+0x64>)
     95e:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     960:	4b07      	ldr	r3, [pc, #28]	; (980 <_system_extint_init+0x68>)
     962:	4798      	blx	r3
}
     964:	b003      	add	sp, #12
     966:	bd00      	pop	{pc}
     968:	40000400 	.word	0x40000400
     96c:	00001edd 	.word	0x00001edd
     970:	00001e51 	.word	0x00001e51
     974:	40001800 	.word	0x40001800
     978:	2000086c 	.word	0x2000086c
     97c:	e000e100 	.word	0xe000e100
     980:	000008fd 	.word	0x000008fd

00000984 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     984:	2300      	movs	r3, #0
     986:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     988:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     98a:	2201      	movs	r2, #1
     98c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     98e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     990:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     992:	2302      	movs	r3, #2
     994:	72c3      	strb	r3, [r0, #11]
}
     996:	4770      	bx	lr

00000998 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     998:	b5f0      	push	{r4, r5, r6, r7, lr}
     99a:	b083      	sub	sp, #12
     99c:	1c05      	adds	r5, r0, #0
     99e:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9a0:	a901      	add	r1, sp, #4
     9a2:	2300      	movs	r3, #0
     9a4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9a6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     9a8:	6863      	ldr	r3, [r4, #4]
     9aa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     9ac:	7a23      	ldrb	r3, [r4, #8]
     9ae:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     9b0:	7820      	ldrb	r0, [r4, #0]
     9b2:	4b15      	ldr	r3, [pc, #84]	; (a08 <extint_chan_set_config+0x70>)
     9b4:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     9b6:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     9b8:	2d1f      	cmp	r5, #31
     9ba:	d800      	bhi.n	9be <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     9bc:	4b13      	ldr	r3, [pc, #76]	; (a0c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     9be:	2107      	movs	r1, #7
     9c0:	4029      	ands	r1, r5
     9c2:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     9c4:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     9c6:	7aa2      	ldrb	r2, [r4, #10]
     9c8:	2a00      	cmp	r2, #0
     9ca:	d001      	beq.n	9d0 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     9cc:	2208      	movs	r2, #8
     9ce:	4310      	orrs	r0, r2
     9d0:	08ea      	lsrs	r2, r5, #3
     9d2:	0092      	lsls	r2, r2, #2
     9d4:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     9d6:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     9d8:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     9da:	270f      	movs	r7, #15
     9dc:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     9de:	43be      	bics	r6, r7
     9e0:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     9e2:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     9e4:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     9e6:	7a62      	ldrb	r2, [r4, #9]
     9e8:	2a00      	cmp	r2, #0
     9ea:	d006      	beq.n	9fa <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     9ec:	695a      	ldr	r2, [r3, #20]
     9ee:	2101      	movs	r1, #1
     9f0:	40a9      	lsls	r1, r5
     9f2:	1c0d      	adds	r5, r1, #0
     9f4:	4315      	orrs	r5, r2
     9f6:	615d      	str	r5, [r3, #20]
     9f8:	e004      	b.n	a04 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     9fa:	695a      	ldr	r2, [r3, #20]
     9fc:	2101      	movs	r1, #1
     9fe:	40a9      	lsls	r1, r5
     a00:	438a      	bics	r2, r1
     a02:	615a      	str	r2, [r3, #20]
	}
}
     a04:	b003      	add	sp, #12
     a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a08:	00001fb9 	.word	0x00001fb9
     a0c:	40001800 	.word	0x40001800

00000a10 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a10:	b500      	push	{lr}
     a12:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a14:	ab01      	add	r3, sp, #4
     a16:	2280      	movs	r2, #128	; 0x80
     a18:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a1a:	780a      	ldrb	r2, [r1, #0]
     a1c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a1e:	784a      	ldrb	r2, [r1, #1]
     a20:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a22:	788a      	ldrb	r2, [r1, #2]
     a24:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a26:	1c19      	adds	r1, r3, #0
     a28:	4b01      	ldr	r3, [pc, #4]	; (a30 <port_pin_set_config+0x20>)
     a2a:	4798      	blx	r3
}
     a2c:	b003      	add	sp, #12
     a2e:	bd00      	pop	{pc}
     a30:	00001fb9 	.word	0x00001fb9

00000a34 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a34:	b510      	push	{r4, lr}
     a36:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     a38:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a3a:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     a3c:	4299      	cmp	r1, r3
     a3e:	d30c      	bcc.n	a5a <_sercom_get_sync_baud_val+0x26>
     a40:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     a42:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     a44:	1c60      	adds	r0, r4, #1
     a46:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     a48:	428b      	cmp	r3, r1
     a4a:	d801      	bhi.n	a50 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     a4c:	1c04      	adds	r4, r0, #0
     a4e:	e7f8      	b.n	a42 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a50:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     a52:	2cff      	cmp	r4, #255	; 0xff
     a54:	d801      	bhi.n	a5a <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     a56:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a58:	2000      	movs	r0, #0
	}
}
     a5a:	bd10      	pop	{r4, pc}
     a5c:	0000      	movs	r0, r0
	...

00000a60 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a60:	b5f0      	push	{r4, r5, r6, r7, lr}
     a62:	465f      	mov	r7, fp
     a64:	4656      	mov	r6, sl
     a66:	464d      	mov	r5, r9
     a68:	4644      	mov	r4, r8
     a6a:	b4f0      	push	{r4, r5, r6, r7}
     a6c:	b087      	sub	sp, #28
     a6e:	1c06      	adds	r6, r0, #0
     a70:	1c0d      	adds	r5, r1, #0
     a72:	9204      	str	r2, [sp, #16]
     a74:	aa10      	add	r2, sp, #64	; 0x40
     a76:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a78:	1c32      	adds	r2, r6, #0
     a7a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a7c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a7e:	428a      	cmp	r2, r1
     a80:	d900      	bls.n	a84 <_sercom_get_async_baud_val+0x24>
     a82:	e0b3      	b.n	bec <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a84:	2b00      	cmp	r3, #0
     a86:	d14b      	bne.n	b20 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a88:	2100      	movs	r1, #0
     a8a:	1c32      	adds	r2, r6, #0
     a8c:	4c5e      	ldr	r4, [pc, #376]	; (c08 <_sercom_get_async_baud_val+0x1a8>)
     a8e:	47a0      	blx	r4
     a90:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     a92:	1c2e      	adds	r6, r5, #0
     a94:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a96:	2000      	movs	r0, #0
     a98:	2100      	movs	r1, #0
     a9a:	2200      	movs	r2, #0
     a9c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     a9e:	243f      	movs	r4, #63	; 0x3f
     aa0:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     aa2:	2501      	movs	r5, #1
     aa4:	46a8      	mov	r8, r5
     aa6:	9002      	str	r0, [sp, #8]
     aa8:	9103      	str	r1, [sp, #12]
     aaa:	4661      	mov	r1, ip
     aac:	3920      	subs	r1, #32
     aae:	d403      	bmi.n	ab8 <_sercom_get_async_baud_val+0x58>
     ab0:	4640      	mov	r0, r8
     ab2:	4088      	lsls	r0, r1
     ab4:	4681      	mov	r9, r0
     ab6:	e005      	b.n	ac4 <_sercom_get_async_baud_val+0x64>
     ab8:	2120      	movs	r1, #32
     aba:	4665      	mov	r5, ip
     abc:	1b4c      	subs	r4, r1, r5
     abe:	4640      	mov	r0, r8
     ac0:	40e0      	lsrs	r0, r4
     ac2:	4681      	mov	r9, r0
     ac4:	4641      	mov	r1, r8
     ac6:	4664      	mov	r4, ip
     ac8:	40a1      	lsls	r1, r4
     aca:	468a      	mov	sl, r1

		r = r << 1;
     acc:	1c10      	adds	r0, r2, #0
     ace:	1c19      	adds	r1, r3, #0
     ad0:	1880      	adds	r0, r0, r2
     ad2:	4159      	adcs	r1, r3
     ad4:	1c02      	adds	r2, r0, #0
     ad6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     ad8:	465d      	mov	r5, fp
     ada:	464c      	mov	r4, r9
     adc:	4225      	tst	r5, r4
     ade:	d002      	beq.n	ae6 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     ae0:	4642      	mov	r2, r8
     ae2:	4302      	orrs	r2, r0
     ae4:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     ae6:	429f      	cmp	r7, r3
     ae8:	d80c      	bhi.n	b04 <_sercom_get_async_baud_val+0xa4>
     aea:	d101      	bne.n	af0 <_sercom_get_async_baud_val+0x90>
     aec:	4296      	cmp	r6, r2
     aee:	d809      	bhi.n	b04 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     af0:	1b92      	subs	r2, r2, r6
     af2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     af4:	4650      	mov	r0, sl
     af6:	9d02      	ldr	r5, [sp, #8]
     af8:	4328      	orrs	r0, r5
     afa:	4649      	mov	r1, r9
     afc:	9c03      	ldr	r4, [sp, #12]
     afe:	4321      	orrs	r1, r4
     b00:	9002      	str	r0, [sp, #8]
     b02:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     b04:	4665      	mov	r5, ip
     b06:	3d01      	subs	r5, #1
     b08:	46ac      	mov	ip, r5
     b0a:	d2ce      	bcs.n	aaa <_sercom_get_async_baud_val+0x4a>
     b0c:	9802      	ldr	r0, [sp, #8]
     b0e:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b10:	4b3c      	ldr	r3, [pc, #240]	; (c04 <_sercom_get_async_baud_val+0x1a4>)
     b12:	4a3b      	ldr	r2, [pc, #236]	; (c00 <_sercom_get_async_baud_val+0x1a0>)
     b14:	1a12      	subs	r2, r2, r0
     b16:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     b18:	0c12      	lsrs	r2, r2, #16
     b1a:	041b      	lsls	r3, r3, #16
     b1c:	431a      	orrs	r2, r3
     b1e:	e062      	b.n	be6 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     b20:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b22:	2b01      	cmp	r3, #1
     b24:	d15f      	bne.n	be6 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     b26:	0f4f      	lsrs	r7, r1, #29
     b28:	46b9      	mov	r9, r7
     b2a:	00cd      	lsls	r5, r1, #3
     b2c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     b2e:	2100      	movs	r1, #0
     b30:	1c32      	adds	r2, r6, #0
     b32:	2300      	movs	r3, #0
     b34:	4c34      	ldr	r4, [pc, #208]	; (c08 <_sercom_get_async_baud_val+0x1a8>)
     b36:	47a0      	blx	r4
     b38:	1c06      	adds	r6, r0, #0
     b3a:	1c0f      	adds	r7, r1, #0
     b3c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     b3e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     b40:	9602      	str	r6, [sp, #8]
     b42:	9703      	str	r7, [sp, #12]
     b44:	469a      	mov	sl, r3
     b46:	4650      	mov	r0, sl
     b48:	b2c0      	uxtb	r0, r0
     b4a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     b4c:	2100      	movs	r1, #0
     b4e:	4688      	mov	r8, r1
     b50:	2200      	movs	r2, #0
     b52:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     b54:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     b56:	1c27      	adds	r7, r4, #0
     b58:	3f20      	subs	r7, #32
     b5a:	d403      	bmi.n	b64 <_sercom_get_async_baud_val+0x104>
     b5c:	1c2e      	adds	r6, r5, #0
     b5e:	40be      	lsls	r6, r7
     b60:	9601      	str	r6, [sp, #4]
     b62:	e004      	b.n	b6e <_sercom_get_async_baud_val+0x10e>
     b64:	2020      	movs	r0, #32
     b66:	1b07      	subs	r7, r0, r4
     b68:	1c29      	adds	r1, r5, #0
     b6a:	40f9      	lsrs	r1, r7
     b6c:	9101      	str	r1, [sp, #4]
     b6e:	1c2e      	adds	r6, r5, #0
     b70:	40a6      	lsls	r6, r4
     b72:	9600      	str	r6, [sp, #0]

		r = r << 1;
     b74:	1c10      	adds	r0, r2, #0
     b76:	1c19      	adds	r1, r3, #0
     b78:	1880      	adds	r0, r0, r2
     b7a:	4159      	adcs	r1, r3
     b7c:	1c02      	adds	r2, r0, #0
     b7e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     b80:	465f      	mov	r7, fp
     b82:	4037      	ands	r7, r6
     b84:	46bc      	mov	ip, r7
     b86:	9e01      	ldr	r6, [sp, #4]
     b88:	464f      	mov	r7, r9
     b8a:	403e      	ands	r6, r7
     b8c:	4667      	mov	r7, ip
     b8e:	433e      	orrs	r6, r7
     b90:	d002      	beq.n	b98 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     b92:	1c2a      	adds	r2, r5, #0
     b94:	4302      	orrs	r2, r0
     b96:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     b98:	9803      	ldr	r0, [sp, #12]
     b9a:	4298      	cmp	r0, r3
     b9c:	d80b      	bhi.n	bb6 <_sercom_get_async_baud_val+0x156>
     b9e:	d102      	bne.n	ba6 <_sercom_get_async_baud_val+0x146>
     ba0:	9902      	ldr	r1, [sp, #8]
     ba2:	4291      	cmp	r1, r2
     ba4:	d807      	bhi.n	bb6 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     ba6:	9e02      	ldr	r6, [sp, #8]
     ba8:	9f03      	ldr	r7, [sp, #12]
     baa:	1b92      	subs	r2, r2, r6
     bac:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     bae:	4647      	mov	r7, r8
     bb0:	9800      	ldr	r0, [sp, #0]
     bb2:	4307      	orrs	r7, r0
     bb4:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     bb6:	3c01      	subs	r4, #1
     bb8:	d2cd      	bcs.n	b56 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     bba:	4641      	mov	r1, r8
     bbc:	4652      	mov	r2, sl
     bbe:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     bc0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     bc2:	4c12      	ldr	r4, [pc, #72]	; (c0c <_sercom_get_async_baud_val+0x1ac>)
     bc4:	42a3      	cmp	r3, r4
     bc6:	d908      	bls.n	bda <_sercom_get_async_baud_val+0x17a>
     bc8:	9a05      	ldr	r2, [sp, #20]
     bca:	3201      	adds	r2, #1
     bcc:	b2d2      	uxtb	r2, r2
     bce:	9205      	str	r2, [sp, #20]
     bd0:	2601      	movs	r6, #1
     bd2:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     bd4:	4657      	mov	r7, sl
     bd6:	2f08      	cmp	r7, #8
     bd8:	d1b5      	bne.n	b46 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bda:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     bdc:	9805      	ldr	r0, [sp, #20]
     bde:	2808      	cmp	r0, #8
     be0:	d004      	beq.n	bec <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     be2:	0342      	lsls	r2, r0, #13
     be4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     be6:	9c04      	ldr	r4, [sp, #16]
     be8:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     bea:	2400      	movs	r4, #0
}
     bec:	1c20      	adds	r0, r4, #0
     bee:	b007      	add	sp, #28
     bf0:	bc3c      	pop	{r2, r3, r4, r5}
     bf2:	4690      	mov	r8, r2
     bf4:	4699      	mov	r9, r3
     bf6:	46a2      	mov	sl, r4
     bf8:	46ab      	mov	fp, r5
     bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bfc:	46c0      	nop			; (mov r8, r8)
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	00000000 	.word	0x00000000
     c04:	00000001 	.word	0x00000001
     c08:	00004fe5 	.word	0x00004fe5
     c0c:	00001fff 	.word	0x00001fff

00000c10 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c10:	b510      	push	{r4, lr}
     c12:	b082      	sub	sp, #8
     c14:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     c16:	4b0f      	ldr	r3, [pc, #60]	; (c54 <sercom_set_gclk_generator+0x44>)
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	2b00      	cmp	r3, #0
     c1c:	d001      	beq.n	c22 <sercom_set_gclk_generator+0x12>
     c1e:	2900      	cmp	r1, #0
     c20:	d00d      	beq.n	c3e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     c22:	a901      	add	r1, sp, #4
     c24:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c26:	2013      	movs	r0, #19
     c28:	4b0b      	ldr	r3, [pc, #44]	; (c58 <sercom_set_gclk_generator+0x48>)
     c2a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c2c:	2013      	movs	r0, #19
     c2e:	4b0b      	ldr	r3, [pc, #44]	; (c5c <sercom_set_gclk_generator+0x4c>)
     c30:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     c32:	4b08      	ldr	r3, [pc, #32]	; (c54 <sercom_set_gclk_generator+0x44>)
     c34:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c36:	2201      	movs	r2, #1
     c38:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     c3a:	2000      	movs	r0, #0
     c3c:	e007      	b.n	c4e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     c3e:	4b05      	ldr	r3, [pc, #20]	; (c54 <sercom_set_gclk_generator+0x44>)
     c40:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c42:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     c44:	1b14      	subs	r4, r2, r4
     c46:	1e62      	subs	r2, r4, #1
     c48:	4194      	sbcs	r4, r2
     c4a:	4264      	negs	r4, r4
     c4c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c4e:	b002      	add	sp, #8
     c50:	bd10      	pop	{r4, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	20000094 	.word	0x20000094
     c58:	00001edd 	.word	0x00001edd
     c5c:	00001e51 	.word	0x00001e51

00000c60 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c60:	4b44      	ldr	r3, [pc, #272]	; (d74 <_sercom_get_default_pad+0x114>)
     c62:	4298      	cmp	r0, r3
     c64:	d033      	beq.n	cce <_sercom_get_default_pad+0x6e>
     c66:	d806      	bhi.n	c76 <_sercom_get_default_pad+0x16>
     c68:	4b43      	ldr	r3, [pc, #268]	; (d78 <_sercom_get_default_pad+0x118>)
     c6a:	4298      	cmp	r0, r3
     c6c:	d00d      	beq.n	c8a <_sercom_get_default_pad+0x2a>
     c6e:	4b43      	ldr	r3, [pc, #268]	; (d7c <_sercom_get_default_pad+0x11c>)
     c70:	4298      	cmp	r0, r3
     c72:	d01b      	beq.n	cac <_sercom_get_default_pad+0x4c>
     c74:	e06f      	b.n	d56 <_sercom_get_default_pad+0xf6>
     c76:	4b42      	ldr	r3, [pc, #264]	; (d80 <_sercom_get_default_pad+0x120>)
     c78:	4298      	cmp	r0, r3
     c7a:	d04a      	beq.n	d12 <_sercom_get_default_pad+0xb2>
     c7c:	4b41      	ldr	r3, [pc, #260]	; (d84 <_sercom_get_default_pad+0x124>)
     c7e:	4298      	cmp	r0, r3
     c80:	d058      	beq.n	d34 <_sercom_get_default_pad+0xd4>
     c82:	4b41      	ldr	r3, [pc, #260]	; (d88 <_sercom_get_default_pad+0x128>)
     c84:	4298      	cmp	r0, r3
     c86:	d166      	bne.n	d56 <_sercom_get_default_pad+0xf6>
     c88:	e032      	b.n	cf0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c8a:	2901      	cmp	r1, #1
     c8c:	d065      	beq.n	d5a <_sercom_get_default_pad+0xfa>
     c8e:	2900      	cmp	r1, #0
     c90:	d004      	beq.n	c9c <_sercom_get_default_pad+0x3c>
     c92:	2902      	cmp	r1, #2
     c94:	d006      	beq.n	ca4 <_sercom_get_default_pad+0x44>
     c96:	2903      	cmp	r1, #3
     c98:	d006      	beq.n	ca8 <_sercom_get_default_pad+0x48>
     c9a:	e001      	b.n	ca0 <_sercom_get_default_pad+0x40>
     c9c:	483b      	ldr	r0, [pc, #236]	; (d8c <_sercom_get_default_pad+0x12c>)
     c9e:	e067      	b.n	d70 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ca0:	2000      	movs	r0, #0
     ca2:	e065      	b.n	d70 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ca4:	483a      	ldr	r0, [pc, #232]	; (d90 <_sercom_get_default_pad+0x130>)
     ca6:	e063      	b.n	d70 <_sercom_get_default_pad+0x110>
     ca8:	483a      	ldr	r0, [pc, #232]	; (d94 <_sercom_get_default_pad+0x134>)
     caa:	e061      	b.n	d70 <_sercom_get_default_pad+0x110>
     cac:	2901      	cmp	r1, #1
     cae:	d056      	beq.n	d5e <_sercom_get_default_pad+0xfe>
     cb0:	2900      	cmp	r1, #0
     cb2:	d004      	beq.n	cbe <_sercom_get_default_pad+0x5e>
     cb4:	2902      	cmp	r1, #2
     cb6:	d006      	beq.n	cc6 <_sercom_get_default_pad+0x66>
     cb8:	2903      	cmp	r1, #3
     cba:	d006      	beq.n	cca <_sercom_get_default_pad+0x6a>
     cbc:	e001      	b.n	cc2 <_sercom_get_default_pad+0x62>
     cbe:	2003      	movs	r0, #3
     cc0:	e056      	b.n	d70 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     cc2:	2000      	movs	r0, #0
     cc4:	e054      	b.n	d70 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cc6:	4834      	ldr	r0, [pc, #208]	; (d98 <_sercom_get_default_pad+0x138>)
     cc8:	e052      	b.n	d70 <_sercom_get_default_pad+0x110>
     cca:	4834      	ldr	r0, [pc, #208]	; (d9c <_sercom_get_default_pad+0x13c>)
     ccc:	e050      	b.n	d70 <_sercom_get_default_pad+0x110>
     cce:	2901      	cmp	r1, #1
     cd0:	d047      	beq.n	d62 <_sercom_get_default_pad+0x102>
     cd2:	2900      	cmp	r1, #0
     cd4:	d004      	beq.n	ce0 <_sercom_get_default_pad+0x80>
     cd6:	2902      	cmp	r1, #2
     cd8:	d006      	beq.n	ce8 <_sercom_get_default_pad+0x88>
     cda:	2903      	cmp	r1, #3
     cdc:	d006      	beq.n	cec <_sercom_get_default_pad+0x8c>
     cde:	e001      	b.n	ce4 <_sercom_get_default_pad+0x84>
     ce0:	482f      	ldr	r0, [pc, #188]	; (da0 <_sercom_get_default_pad+0x140>)
     ce2:	e045      	b.n	d70 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ce4:	2000      	movs	r0, #0
     ce6:	e043      	b.n	d70 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ce8:	482e      	ldr	r0, [pc, #184]	; (da4 <_sercom_get_default_pad+0x144>)
     cea:	e041      	b.n	d70 <_sercom_get_default_pad+0x110>
     cec:	482e      	ldr	r0, [pc, #184]	; (da8 <_sercom_get_default_pad+0x148>)
     cee:	e03f      	b.n	d70 <_sercom_get_default_pad+0x110>
     cf0:	2901      	cmp	r1, #1
     cf2:	d038      	beq.n	d66 <_sercom_get_default_pad+0x106>
     cf4:	2900      	cmp	r1, #0
     cf6:	d004      	beq.n	d02 <_sercom_get_default_pad+0xa2>
     cf8:	2902      	cmp	r1, #2
     cfa:	d006      	beq.n	d0a <_sercom_get_default_pad+0xaa>
     cfc:	2903      	cmp	r1, #3
     cfe:	d006      	beq.n	d0e <_sercom_get_default_pad+0xae>
     d00:	e001      	b.n	d06 <_sercom_get_default_pad+0xa6>
     d02:	482a      	ldr	r0, [pc, #168]	; (dac <_sercom_get_default_pad+0x14c>)
     d04:	e034      	b.n	d70 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d06:	2000      	movs	r0, #0
     d08:	e032      	b.n	d70 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d0a:	4829      	ldr	r0, [pc, #164]	; (db0 <_sercom_get_default_pad+0x150>)
     d0c:	e030      	b.n	d70 <_sercom_get_default_pad+0x110>
     d0e:	4829      	ldr	r0, [pc, #164]	; (db4 <_sercom_get_default_pad+0x154>)
     d10:	e02e      	b.n	d70 <_sercom_get_default_pad+0x110>
     d12:	2901      	cmp	r1, #1
     d14:	d029      	beq.n	d6a <_sercom_get_default_pad+0x10a>
     d16:	2900      	cmp	r1, #0
     d18:	d004      	beq.n	d24 <_sercom_get_default_pad+0xc4>
     d1a:	2902      	cmp	r1, #2
     d1c:	d006      	beq.n	d2c <_sercom_get_default_pad+0xcc>
     d1e:	2903      	cmp	r1, #3
     d20:	d006      	beq.n	d30 <_sercom_get_default_pad+0xd0>
     d22:	e001      	b.n	d28 <_sercom_get_default_pad+0xc8>
     d24:	4824      	ldr	r0, [pc, #144]	; (db8 <_sercom_get_default_pad+0x158>)
     d26:	e023      	b.n	d70 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d28:	2000      	movs	r0, #0
     d2a:	e021      	b.n	d70 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d2c:	4823      	ldr	r0, [pc, #140]	; (dbc <_sercom_get_default_pad+0x15c>)
     d2e:	e01f      	b.n	d70 <_sercom_get_default_pad+0x110>
     d30:	4823      	ldr	r0, [pc, #140]	; (dc0 <_sercom_get_default_pad+0x160>)
     d32:	e01d      	b.n	d70 <_sercom_get_default_pad+0x110>
     d34:	2901      	cmp	r1, #1
     d36:	d01a      	beq.n	d6e <_sercom_get_default_pad+0x10e>
     d38:	2900      	cmp	r1, #0
     d3a:	d004      	beq.n	d46 <_sercom_get_default_pad+0xe6>
     d3c:	2902      	cmp	r1, #2
     d3e:	d006      	beq.n	d4e <_sercom_get_default_pad+0xee>
     d40:	2903      	cmp	r1, #3
     d42:	d006      	beq.n	d52 <_sercom_get_default_pad+0xf2>
     d44:	e001      	b.n	d4a <_sercom_get_default_pad+0xea>
     d46:	481f      	ldr	r0, [pc, #124]	; (dc4 <_sercom_get_default_pad+0x164>)
     d48:	e012      	b.n	d70 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d4a:	2000      	movs	r0, #0
     d4c:	e010      	b.n	d70 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d4e:	481e      	ldr	r0, [pc, #120]	; (dc8 <_sercom_get_default_pad+0x168>)
     d50:	e00e      	b.n	d70 <_sercom_get_default_pad+0x110>
     d52:	481e      	ldr	r0, [pc, #120]	; (dcc <_sercom_get_default_pad+0x16c>)
     d54:	e00c      	b.n	d70 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d56:	2000      	movs	r0, #0
     d58:	e00a      	b.n	d70 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d5a:	481d      	ldr	r0, [pc, #116]	; (dd0 <_sercom_get_default_pad+0x170>)
     d5c:	e008      	b.n	d70 <_sercom_get_default_pad+0x110>
     d5e:	481d      	ldr	r0, [pc, #116]	; (dd4 <_sercom_get_default_pad+0x174>)
     d60:	e006      	b.n	d70 <_sercom_get_default_pad+0x110>
     d62:	481d      	ldr	r0, [pc, #116]	; (dd8 <_sercom_get_default_pad+0x178>)
     d64:	e004      	b.n	d70 <_sercom_get_default_pad+0x110>
     d66:	481d      	ldr	r0, [pc, #116]	; (ddc <_sercom_get_default_pad+0x17c>)
     d68:	e002      	b.n	d70 <_sercom_get_default_pad+0x110>
     d6a:	481d      	ldr	r0, [pc, #116]	; (de0 <_sercom_get_default_pad+0x180>)
     d6c:	e000      	b.n	d70 <_sercom_get_default_pad+0x110>
     d6e:	481d      	ldr	r0, [pc, #116]	; (de4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     d70:	4770      	bx	lr
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	42001000 	.word	0x42001000
     d78:	42000800 	.word	0x42000800
     d7c:	42000c00 	.word	0x42000c00
     d80:	42001800 	.word	0x42001800
     d84:	42001c00 	.word	0x42001c00
     d88:	42001400 	.word	0x42001400
     d8c:	00040003 	.word	0x00040003
     d90:	00060003 	.word	0x00060003
     d94:	00070003 	.word	0x00070003
     d98:	001e0003 	.word	0x001e0003
     d9c:	001f0003 	.word	0x001f0003
     da0:	000c0002 	.word	0x000c0002
     da4:	000e0002 	.word	0x000e0002
     da8:	000f0002 	.word	0x000f0002
     dac:	00100003 	.word	0x00100003
     db0:	00120003 	.word	0x00120003
     db4:	00130003 	.word	0x00130003
     db8:	00530005 	.word	0x00530005
     dbc:	003e0005 	.word	0x003e0005
     dc0:	00520005 	.word	0x00520005
     dc4:	00160003 	.word	0x00160003
     dc8:	00180003 	.word	0x00180003
     dcc:	00190003 	.word	0x00190003
     dd0:	00050003 	.word	0x00050003
     dd4:	00010003 	.word	0x00010003
     dd8:	000d0002 	.word	0x000d0002
     ddc:	00110003 	.word	0x00110003
     de0:	003f0005 	.word	0x003f0005
     de4:	00170003 	.word	0x00170003

00000de8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     de8:	b570      	push	{r4, r5, r6, lr}
     dea:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     dec:	4a0c      	ldr	r2, [pc, #48]	; (e20 <_sercom_get_sercom_inst_index+0x38>)
     dee:	466b      	mov	r3, sp
     df0:	ca70      	ldmia	r2!, {r4, r5, r6}
     df2:	c370      	stmia	r3!, {r4, r5, r6}
     df4:	ca32      	ldmia	r2!, {r1, r4, r5}
     df6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     df8:	9e00      	ldr	r6, [sp, #0]
     dfa:	4286      	cmp	r6, r0
     dfc:	d006      	beq.n	e0c <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dfe:	2301      	movs	r3, #1
     e00:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e02:	4669      	mov	r1, sp
     e04:	5852      	ldr	r2, [r2, r1]
     e06:	4282      	cmp	r2, r0
     e08:	d103      	bne.n	e12 <_sercom_get_sercom_inst_index+0x2a>
     e0a:	e000      	b.n	e0e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e0c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     e0e:	b2d8      	uxtb	r0, r3
     e10:	e003      	b.n	e1a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e12:	3301      	adds	r3, #1
     e14:	2b06      	cmp	r3, #6
     e16:	d1f3      	bne.n	e00 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     e18:	2000      	movs	r0, #0
}
     e1a:	b006      	add	sp, #24
     e1c:	bd70      	pop	{r4, r5, r6, pc}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	00007e7c 	.word	0x00007e7c

00000e24 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     e24:	4770      	bx	lr
     e26:	46c0      	nop			; (mov r8, r8)

00000e28 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e28:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     e2a:	4b0a      	ldr	r3, [pc, #40]	; (e54 <_sercom_set_handler+0x2c>)
     e2c:	781b      	ldrb	r3, [r3, #0]
     e2e:	2b00      	cmp	r3, #0
     e30:	d10c      	bne.n	e4c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e32:	4f09      	ldr	r7, [pc, #36]	; (e58 <_sercom_set_handler+0x30>)
     e34:	4e09      	ldr	r6, [pc, #36]	; (e5c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     e36:	4d0a      	ldr	r5, [pc, #40]	; (e60 <_sercom_set_handler+0x38>)
     e38:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e3a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     e3c:	195a      	adds	r2, r3, r5
     e3e:	6014      	str	r4, [r2, #0]
     e40:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e42:	2b18      	cmp	r3, #24
     e44:	d1f9      	bne.n	e3a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     e46:	2201      	movs	r2, #1
     e48:	4b02      	ldr	r3, [pc, #8]	; (e54 <_sercom_set_handler+0x2c>)
     e4a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e4c:	0080      	lsls	r0, r0, #2
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <_sercom_set_handler+0x30>)
     e50:	50c1      	str	r1, [r0, r3]
}
     e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e54:	20000098 	.word	0x20000098
     e58:	2000009c 	.word	0x2000009c
     e5c:	00000e25 	.word	0x00000e25
     e60:	200008ac 	.word	0x200008ac

00000e64 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e64:	b510      	push	{r4, lr}
     e66:	b082      	sub	sp, #8
     e68:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e6a:	4668      	mov	r0, sp
     e6c:	4905      	ldr	r1, [pc, #20]	; (e84 <_sercom_get_interrupt_vector+0x20>)
     e6e:	2206      	movs	r2, #6
     e70:	4b05      	ldr	r3, [pc, #20]	; (e88 <_sercom_get_interrupt_vector+0x24>)
     e72:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e74:	1c20      	adds	r0, r4, #0
     e76:	4b05      	ldr	r3, [pc, #20]	; (e8c <_sercom_get_interrupt_vector+0x28>)
     e78:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e7a:	466b      	mov	r3, sp
     e7c:	5618      	ldrsb	r0, [r3, r0]
}
     e7e:	b002      	add	sp, #8
     e80:	bd10      	pop	{r4, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	00007e94 	.word	0x00007e94
     e88:	00006db9 	.word	0x00006db9
     e8c:	00000de9 	.word	0x00000de9

00000e90 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e90:	b508      	push	{r3, lr}
     e92:	4b02      	ldr	r3, [pc, #8]	; (e9c <SERCOM0_Handler+0xc>)
     e94:	681b      	ldr	r3, [r3, #0]
     e96:	2000      	movs	r0, #0
     e98:	4798      	blx	r3
     e9a:	bd08      	pop	{r3, pc}
     e9c:	2000009c 	.word	0x2000009c

00000ea0 <SERCOM1_Handler>:
     ea0:	b508      	push	{r3, lr}
     ea2:	4b02      	ldr	r3, [pc, #8]	; (eac <SERCOM1_Handler+0xc>)
     ea4:	685b      	ldr	r3, [r3, #4]
     ea6:	2001      	movs	r0, #1
     ea8:	4798      	blx	r3
     eaa:	bd08      	pop	{r3, pc}
     eac:	2000009c 	.word	0x2000009c

00000eb0 <SERCOM2_Handler>:
     eb0:	b508      	push	{r3, lr}
     eb2:	4b02      	ldr	r3, [pc, #8]	; (ebc <SERCOM2_Handler+0xc>)
     eb4:	689b      	ldr	r3, [r3, #8]
     eb6:	2002      	movs	r0, #2
     eb8:	4798      	blx	r3
     eba:	bd08      	pop	{r3, pc}
     ebc:	2000009c 	.word	0x2000009c

00000ec0 <SERCOM3_Handler>:
     ec0:	b508      	push	{r3, lr}
     ec2:	4b02      	ldr	r3, [pc, #8]	; (ecc <SERCOM3_Handler+0xc>)
     ec4:	68db      	ldr	r3, [r3, #12]
     ec6:	2003      	movs	r0, #3
     ec8:	4798      	blx	r3
     eca:	bd08      	pop	{r3, pc}
     ecc:	2000009c 	.word	0x2000009c

00000ed0 <SERCOM4_Handler>:
     ed0:	b508      	push	{r3, lr}
     ed2:	4b02      	ldr	r3, [pc, #8]	; (edc <SERCOM4_Handler+0xc>)
     ed4:	691b      	ldr	r3, [r3, #16]
     ed6:	2004      	movs	r0, #4
     ed8:	4798      	blx	r3
     eda:	bd08      	pop	{r3, pc}
     edc:	2000009c 	.word	0x2000009c

00000ee0 <SERCOM5_Handler>:
     ee0:	b508      	push	{r3, lr}
     ee2:	4b02      	ldr	r3, [pc, #8]	; (eec <SERCOM5_Handler+0xc>)
     ee4:	695b      	ldr	r3, [r3, #20]
     ee6:	2005      	movs	r0, #5
     ee8:	4798      	blx	r3
     eea:	bd08      	pop	{r3, pc}
     eec:	2000009c 	.word	0x2000009c

00000ef0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ef2:	465f      	mov	r7, fp
     ef4:	4656      	mov	r6, sl
     ef6:	464d      	mov	r5, r9
     ef8:	4644      	mov	r4, r8
     efa:	b4f0      	push	{r4, r5, r6, r7}
     efc:	b089      	sub	sp, #36	; 0x24
     efe:	1c07      	adds	r7, r0, #0
     f00:	1c0d      	adds	r5, r1, #0
     f02:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     f04:	6039      	str	r1, [r7, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f06:	680b      	ldr	r3, [r1, #0]
     f08:	0798      	lsls	r0, r3, #30
     f0a:	d400      	bmi.n	f0e <spi_init+0x1e>
     f0c:	e08d      	b.n	102a <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
     f0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
     f10:	9103      	str	r1, [sp, #12]
     f12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f14:	9204      	str	r2, [sp, #16]
     f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
     f18:	9305      	str	r3, [sp, #20]
     f1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
     f1c:	9006      	str	r0, [sp, #24]
     f1e:	2600      	movs	r6, #0

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     f20:	46b1      	mov	r9, r6
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     f22:	221f      	movs	r2, #31
     f24:	4690      	mov	r8, r2
     f26:	b2f1      	uxtb	r1, r6
     f28:	00b3      	lsls	r3, r6, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f2a:	aa03      	add	r2, sp, #12
     f2c:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     f2e:	2800      	cmp	r0, #0
     f30:	d102      	bne.n	f38 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     f32:	1c28      	adds	r0, r5, #0
     f34:	4b8f      	ldr	r3, [pc, #572]	; (1174 <spi_init+0x284>)
     f36:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
     f38:	1c41      	adds	r1, r0, #1
     f3a:	d029      	beq.n	f90 <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     f3c:	0402      	lsls	r2, r0, #16
     f3e:	0c12      	lsrs	r2, r2, #16
     f40:	4694      	mov	ip, r2
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     f42:	0c03      	lsrs	r3, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f44:	b2da      	uxtb	r2, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     f46:	4649      	mov	r1, r9
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     f48:	0618      	lsls	r0, r3, #24
     f4a:	d403      	bmi.n	f54 <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
     f4c:	0951      	lsrs	r1, r2, #5
     f4e:	01c9      	lsls	r1, r1, #7
     f50:	4b89      	ldr	r3, [pc, #548]	; (1178 <spi_init+0x288>)
     f52:	18c9      	adds	r1, r1, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
     f54:	4640      	mov	r0, r8
     f56:	4010      	ands	r0, r2

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     f58:	180b      	adds	r3, r1, r0
     f5a:	3340      	adds	r3, #64	; 0x40
     f5c:	781b      	ldrb	r3, [r3, #0]
     f5e:	469a      	mov	sl, r3
		return SYSTEM_PINMUX_GPIO;
     f60:	2380      	movs	r3, #128	; 0x80
     f62:	469b      	mov	fp, r3
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     f64:	4653      	mov	r3, sl
     f66:	07db      	lsls	r3, r3, #31
     f68:	d50c      	bpl.n	f84 <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     f6a:	0840      	lsrs	r0, r0, #1
     f6c:	1809      	adds	r1, r1, r0
     f6e:	3130      	adds	r1, #48	; 0x30
     f70:	780b      	ldrb	r3, [r1, #0]
     f72:	b2db      	uxtb	r3, r3

	if (pin_index & 1) {
     f74:	07d0      	lsls	r0, r2, #31
     f76:	d502      	bpl.n	f7e <spi_init+0x8e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     f78:	091b      	lsrs	r3, r3, #4
     f7a:	469b      	mov	fp, r3
     f7c:	e002      	b.n	f84 <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     f7e:	220f      	movs	r2, #15
     f80:	4013      	ands	r3, r2
     f82:	469b      	mov	fp, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     f84:	45dc      	cmp	ip, fp
     f86:	d003      	beq.n	f90 <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
     f88:	2300      	movs	r3, #0
     f8a:	603b      	str	r3, [r7, #0]
			return STATUS_ERR_DENIED;
     f8c:	201c      	movs	r0, #28
     f8e:	e0ea      	b.n	1166 <spi_init+0x276>
     f90:	3601      	adds	r6, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f92:	2e04      	cmp	r6, #4
     f94:	d1c7      	bne.n	f26 <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     f96:	2013      	movs	r0, #19
     f98:	4b78      	ldr	r3, [pc, #480]	; (117c <spi_init+0x28c>)
     f9a:	4798      	blx	r3
     f9c:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     f9e:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     fa0:	2600      	movs	r6, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     fa2:	2b01      	cmp	r3, #1
     fa4:	d111      	bne.n	fca <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
     fa6:	69a0      	ldr	r0, [r4, #24]
     fa8:	aa02      	add	r2, sp, #8
     faa:	4b75      	ldr	r3, [pc, #468]	; (1180 <spi_init+0x290>)
     fac:	4798      	blx	r3
     fae:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     fb0:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     fb2:	2b00      	cmp	r3, #0
     fb4:	d000      	beq.n	fb8 <spi_init+0xc8>
     fb6:	e0d6      	b.n	1166 <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     fb8:	7b2b      	ldrb	r3, [r5, #12]
     fba:	b2db      	uxtb	r3, r3
     fbc:	aa02      	add	r2, sp, #8
     fbe:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     fc0:	201c      	movs	r0, #28
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     fc2:	429a      	cmp	r2, r3
     fc4:	d000      	beq.n	fc8 <spi_init+0xd8>
     fc6:	e0ce      	b.n	1166 <spi_init+0x276>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     fc8:	260c      	movs	r6, #12
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     fca:	68a2      	ldr	r2, [r4, #8]
     fcc:	6861      	ldr	r1, [r4, #4]
     fce:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     fd0:	68e3      	ldr	r3, [r4, #12]
     fd2:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     fd4:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
     fd6:	7c23      	ldrb	r3, [r4, #16]

	if (config->run_in_standby) {
     fd8:	7c61      	ldrb	r1, [r4, #17]
     fda:	2900      	cmp	r1, #0
     fdc:	d001      	beq.n	fe2 <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     fde:	2180      	movs	r1, #128	; 0x80
     fe0:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     fe2:	7ca1      	ldrb	r1, [r4, #18]
     fe4:	2900      	cmp	r1, #0
     fe6:	d002      	beq.n	fee <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     fe8:	2180      	movs	r1, #128	; 0x80
     fea:	0289      	lsls	r1, r1, #10
     fec:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     fee:	7ce1      	ldrb	r1, [r4, #19]
     ff0:	2900      	cmp	r1, #0
     ff2:	d002      	beq.n	ffa <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     ff4:	2180      	movs	r1, #128	; 0x80
     ff6:	0089      	lsls	r1, r1, #2
     ff8:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     ffa:	7d21      	ldrb	r1, [r4, #20]
     ffc:	2900      	cmp	r1, #0
     ffe:	d002      	beq.n	1006 <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1000:	2180      	movs	r1, #128	; 0x80
    1002:	0189      	lsls	r1, r1, #6
    1004:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1006:	6829      	ldr	r1, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1008:	2002      	movs	r0, #2
    100a:	4302      	orrs	r2, r0

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    100c:	428a      	cmp	r2, r1
    100e:	d108      	bne.n	1022 <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
    1010:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    1012:	429a      	cmp	r2, r3
    1014:	d105      	bne.n	1022 <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    1016:	7823      	ldrb	r3, [r4, #0]
    1018:	717b      	strb	r3, [r7, #5]
		module->character_size = config->character_size;
    101a:	7c23      	ldrb	r3, [r4, #16]
    101c:	71bb      	strb	r3, [r7, #6]
		return STATUS_OK;
    101e:	2000      	movs	r0, #0
    1020:	e0a1      	b.n	1166 <spi_init+0x276>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    1022:	2300      	movs	r3, #0
    1024:	603b      	str	r3, [r7, #0]

	return STATUS_ERR_DENIED;
    1026:	201c      	movs	r0, #28
    1028:	e09d      	b.n	1166 <spi_init+0x276>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    102a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    102c:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    102e:	07d9      	lsls	r1, r3, #31
    1030:	d500      	bpl.n	1034 <spi_init+0x144>
    1032:	e098      	b.n	1166 <spi_init+0x276>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1034:	1c28      	adds	r0, r5, #0
    1036:	4b53      	ldr	r3, [pc, #332]	; (1184 <spi_init+0x294>)
    1038:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    103a:	4b53      	ldr	r3, [pc, #332]	; (1188 <spi_init+0x298>)
    103c:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    103e:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1040:	2601      	movs	r6, #1
    1042:	4096      	lsls	r6, r2
    1044:	1c32      	adds	r2, r6, #0
    1046:	430a      	orrs	r2, r1
    1048:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    104a:	a907      	add	r1, sp, #28
    104c:	2624      	movs	r6, #36	; 0x24
    104e:	5da3      	ldrb	r3, [r4, r6]
    1050:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1052:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1054:	b2c0      	uxtb	r0, r0
    1056:	4680      	mov	r8, r0
    1058:	4b4c      	ldr	r3, [pc, #304]	; (118c <spi_init+0x29c>)
    105a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    105c:	4640      	mov	r0, r8
    105e:	4b4c      	ldr	r3, [pc, #304]	; (1190 <spi_init+0x2a0>)
    1060:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1062:	5da0      	ldrb	r0, [r4, r6]
    1064:	2100      	movs	r1, #0
    1066:	4b4b      	ldr	r3, [pc, #300]	; (1194 <spi_init+0x2a4>)
    1068:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    106a:	7823      	ldrb	r3, [r4, #0]
    106c:	2b01      	cmp	r3, #1
    106e:	d103      	bne.n	1078 <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1070:	682a      	ldr	r2, [r5, #0]
    1072:	230c      	movs	r3, #12
    1074:	4313      	orrs	r3, r2
    1076:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1078:	683e      	ldr	r6, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    107a:	ab02      	add	r3, sp, #8
    107c:	2280      	movs	r2, #128	; 0x80
    107e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1080:	2200      	movs	r2, #0
    1082:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1084:	2101      	movs	r1, #1
    1086:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1088:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    108a:	7823      	ldrb	r3, [r4, #0]
    108c:	2b00      	cmp	r3, #0
    108e:	d101      	bne.n	1094 <spi_init+0x1a4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1090:	ab02      	add	r3, sp, #8
    1092:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    1094:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1096:	9203      	str	r2, [sp, #12]
    1098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    109a:	9304      	str	r3, [sp, #16]
    109c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    109e:	9005      	str	r0, [sp, #20]
    10a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    10a2:	9106      	str	r1, [sp, #24]
    10a4:	2500      	movs	r5, #0
    10a6:	b2e9      	uxtb	r1, r5
    10a8:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10aa:	aa03      	add	r2, sp, #12
    10ac:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    10ae:	2800      	cmp	r0, #0
    10b0:	d102      	bne.n	10b8 <spi_init+0x1c8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10b2:	1c30      	adds	r0, r6, #0
    10b4:	4a2f      	ldr	r2, [pc, #188]	; (1174 <spi_init+0x284>)
    10b6:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    10b8:	1c43      	adds	r3, r0, #1
    10ba:	d006      	beq.n	10ca <spi_init+0x1da>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10bc:	4669      	mov	r1, sp
    10be:	7208      	strb	r0, [r1, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10c0:	0c00      	lsrs	r0, r0, #16
    10c2:	b2c0      	uxtb	r0, r0
    10c4:	a902      	add	r1, sp, #8
    10c6:	4a34      	ldr	r2, [pc, #208]	; (1198 <spi_init+0x2a8>)
    10c8:	4790      	blx	r2
    10ca:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    10cc:	2d04      	cmp	r5, #4
    10ce:	d1ea      	bne.n	10a6 <spi_init+0x1b6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    10d0:	7823      	ldrb	r3, [r4, #0]
    10d2:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
    10d4:	7c23      	ldrb	r3, [r4, #16]
    10d6:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
    10d8:	7ca3      	ldrb	r3, [r4, #18]
    10da:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    10dc:	7d23      	ldrb	r3, [r4, #20]
    10de:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    10e0:	2200      	movs	r2, #0
    10e2:	466b      	mov	r3, sp
    10e4:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    10e6:	7823      	ldrb	r3, [r4, #0]
    10e8:	2b01      	cmp	r3, #1
    10ea:	d114      	bne.n	1116 <spi_init+0x226>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10ec:	6838      	ldr	r0, [r7, #0]
    10ee:	4b25      	ldr	r3, [pc, #148]	; (1184 <spi_init+0x294>)
    10f0:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10f2:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    10f4:	b2c0      	uxtb	r0, r0
    10f6:	4b21      	ldr	r3, [pc, #132]	; (117c <spi_init+0x28c>)
    10f8:	4798      	blx	r3
    10fa:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    10fc:	69a0      	ldr	r0, [r4, #24]
    10fe:	466a      	mov	r2, sp
    1100:	3206      	adds	r2, #6
    1102:	4b1f      	ldr	r3, [pc, #124]	; (1180 <spi_init+0x290>)
    1104:	4798      	blx	r3
    1106:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1108:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    110a:	2b00      	cmp	r3, #0
    110c:	d12b      	bne.n	1166 <spi_init+0x276>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    110e:	466b      	mov	r3, sp
    1110:	3306      	adds	r3, #6
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1116:	68a2      	ldr	r2, [r4, #8]
    1118:	6863      	ldr	r3, [r4, #4]
    111a:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    111c:	68e0      	ldr	r0, [r4, #12]
    111e:	4302      	orrs	r2, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1120:	7c23      	ldrb	r3, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1122:	7c61      	ldrb	r1, [r4, #17]
    1124:	2900      	cmp	r1, #0
    1126:	d103      	bne.n	1130 <spi_init+0x240>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1128:	491c      	ldr	r1, [pc, #112]	; (119c <spi_init+0x2ac>)
    112a:	7889      	ldrb	r1, [r1, #2]
    112c:	0788      	lsls	r0, r1, #30
    112e:	d501      	bpl.n	1134 <spi_init+0x244>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1130:	2180      	movs	r1, #128	; 0x80
    1132:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    1134:	7ca1      	ldrb	r1, [r4, #18]
    1136:	2900      	cmp	r1, #0
    1138:	d002      	beq.n	1140 <spi_init+0x250>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    113a:	2180      	movs	r1, #128	; 0x80
    113c:	0289      	lsls	r1, r1, #10
    113e:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1140:	7ce1      	ldrb	r1, [r4, #19]
    1142:	2900      	cmp	r1, #0
    1144:	d002      	beq.n	114c <spi_init+0x25c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1146:	2180      	movs	r1, #128	; 0x80
    1148:	0089      	lsls	r1, r1, #2
    114a:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    114c:	7d21      	ldrb	r1, [r4, #20]
    114e:	2900      	cmp	r1, #0
    1150:	d002      	beq.n	1158 <spi_init+0x268>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1152:	2180      	movs	r1, #128	; 0x80
    1154:	0189      	lsls	r1, r1, #6
    1156:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1158:	6831      	ldr	r1, [r6, #0]
    115a:	430a      	orrs	r2, r1
    115c:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    115e:	6872      	ldr	r2, [r6, #4]
    1160:	4313      	orrs	r3, r2
    1162:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    1164:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1166:	b009      	add	sp, #36	; 0x24
    1168:	bc3c      	pop	{r2, r3, r4, r5}
    116a:	4690      	mov	r8, r2
    116c:	4699      	mov	r9, r3
    116e:	46a2      	mov	sl, r4
    1170:	46ab      	mov	fp, r5
    1172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1174:	00000c61 	.word	0x00000c61
    1178:	41004400 	.word	0x41004400
    117c:	00001ef9 	.word	0x00001ef9
    1180:	00000a35 	.word	0x00000a35
    1184:	00000de9 	.word	0x00000de9
    1188:	40000400 	.word	0x40000400
    118c:	00001edd 	.word	0x00001edd
    1190:	00001e51 	.word	0x00001e51
    1194:	00000c11 	.word	0x00000c11
    1198:	00001fb9 	.word	0x00001fb9
    119c:	41002000 	.word	0x41002000

000011a0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    11a0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    11a2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    11a4:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    11a6:	2c01      	cmp	r4, #1
    11a8:	d16c      	bne.n	1284 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    11aa:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    11ac:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    11ae:	2c00      	cmp	r4, #0
    11b0:	d168      	bne.n	1284 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
    11b2:	2a00      	cmp	r2, #0
    11b4:	d057      	beq.n	1266 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    11b6:	784b      	ldrb	r3, [r1, #1]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d044      	beq.n	1246 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    11bc:	6802      	ldr	r2, [r0, #0]
    11be:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    11c0:	07dc      	lsls	r4, r3, #31
    11c2:	d40f      	bmi.n	11e4 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    11c4:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11c6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11c8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11ca:	2900      	cmp	r1, #0
    11cc:	d103      	bne.n	11d6 <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
    11ce:	095a      	lsrs	r2, r3, #5
    11d0:	01d2      	lsls	r2, r2, #7
    11d2:	492d      	ldr	r1, [pc, #180]	; (1288 <spi_select_slave+0xe8>)
    11d4:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11d6:	211f      	movs	r1, #31
    11d8:	400b      	ands	r3, r1
    11da:	2101      	movs	r1, #1
    11dc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    11de:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    11e0:	2305      	movs	r3, #5
    11e2:	e04f      	b.n	1284 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    11e4:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11e6:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11e8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11ea:	2c00      	cmp	r4, #0
    11ec:	d103      	bne.n	11f6 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
    11ee:	095a      	lsrs	r2, r3, #5
    11f0:	01d2      	lsls	r2, r2, #7
    11f2:	4c25      	ldr	r4, [pc, #148]	; (1288 <spi_select_slave+0xe8>)
    11f4:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    11f6:	241f      	movs	r4, #31
    11f8:	4023      	ands	r3, r4
    11fa:	2401      	movs	r4, #1
    11fc:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    11fe:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    1200:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1202:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1204:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1206:	07d4      	lsls	r4, r2, #31
    1208:	d500      	bpl.n	120c <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    120a:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    120c:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    120e:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    1210:	2a00      	cmp	r2, #0
    1212:	d137      	bne.n	1284 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1214:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1216:	2104      	movs	r1, #4
    1218:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    121a:	420b      	tst	r3, r1
    121c:	d0fc      	beq.n	1218 <spi_select_slave+0x78>
    121e:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1220:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1222:	074c      	lsls	r4, r1, #29
    1224:	d52e      	bpl.n	1284 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1226:	8b53      	ldrh	r3, [r2, #26]
    1228:	0759      	lsls	r1, r3, #29
    122a:	d503      	bpl.n	1234 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    122c:	8b51      	ldrh	r1, [r2, #26]
    122e:	2304      	movs	r3, #4
    1230:	430b      	orrs	r3, r1
    1232:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1234:	7983      	ldrb	r3, [r0, #6]
    1236:	2b01      	cmp	r3, #1
    1238:	d102      	bne.n	1240 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    123a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    123c:	2300      	movs	r3, #0
    123e:	e021      	b.n	1284 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1240:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1242:	2300      	movs	r3, #0
    1244:	e01e      	b.n	1284 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    1246:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1248:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    124a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    124c:	2900      	cmp	r1, #0
    124e:	d103      	bne.n	1258 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
    1250:	095a      	lsrs	r2, r3, #5
    1252:	01d2      	lsls	r2, r2, #7
    1254:	4c0c      	ldr	r4, [pc, #48]	; (1288 <spi_select_slave+0xe8>)
    1256:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1258:	211f      	movs	r1, #31
    125a:	400b      	ands	r3, r1
    125c:	2101      	movs	r1, #1
    125e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1260:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    1262:	2300      	movs	r3, #0
    1264:	e00e      	b.n	1284 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    1266:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1268:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    126a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    126c:	2900      	cmp	r1, #0
    126e:	d103      	bne.n	1278 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
    1270:	095a      	lsrs	r2, r3, #5
    1272:	01d2      	lsls	r2, r2, #7
    1274:	4904      	ldr	r1, [pc, #16]	; (1288 <spi_select_slave+0xe8>)
    1276:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1278:	211f      	movs	r1, #31
    127a:	400b      	ands	r3, r1
    127c:	2101      	movs	r1, #1
    127e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1280:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    1282:	2300      	movs	r3, #0
}
    1284:	1c18      	adds	r0, r3, #0
    1286:	bd10      	pop	{r4, pc}
    1288:	41004400 	.word	0x41004400

0000128c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    128c:	b5f0      	push	{r4, r5, r6, r7, lr}
    128e:	465f      	mov	r7, fp
    1290:	4656      	mov	r6, sl
    1292:	464d      	mov	r5, r9
    1294:	4644      	mov	r4, r8
    1296:	b4f0      	push	{r4, r5, r6, r7}
    1298:	b091      	sub	sp, #68	; 0x44
    129a:	1c05      	adds	r5, r0, #0
    129c:	1c0c      	adds	r4, r1, #0
    129e:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    12a0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12a2:	1c08      	adds	r0, r1, #0
    12a4:	4bad      	ldr	r3, [pc, #692]	; (155c <usart_init+0x2d0>)
    12a6:	4798      	blx	r3
    12a8:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    12aa:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    12ac:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    12ae:	07d9      	lsls	r1, r3, #31
    12b0:	d500      	bpl.n	12b4 <usart_init+0x28>
    12b2:	e14b      	b.n	154c <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12b4:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    12b6:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12b8:	079f      	lsls	r7, r3, #30
    12ba:	d500      	bpl.n	12be <usart_init+0x32>
    12bc:	e146      	b.n	154c <usart_init+0x2c0>
    12be:	4ba8      	ldr	r3, [pc, #672]	; (1560 <usart_init+0x2d4>)
    12c0:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    12c2:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    12c4:	2701      	movs	r7, #1
    12c6:	408f      	lsls	r7, r1
    12c8:	1c39      	adds	r1, r7, #0
    12ca:	4301      	orrs	r1, r0
    12cc:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    12ce:	a90f      	add	r1, sp, #60	; 0x3c
    12d0:	272d      	movs	r7, #45	; 0x2d
    12d2:	5df3      	ldrb	r3, [r6, r7]
    12d4:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12d6:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    12d8:	b2d2      	uxtb	r2, r2
    12da:	4690      	mov	r8, r2
    12dc:	1c10      	adds	r0, r2, #0
    12de:	4ba1      	ldr	r3, [pc, #644]	; (1564 <usart_init+0x2d8>)
    12e0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12e2:	4640      	mov	r0, r8
    12e4:	4ba0      	ldr	r3, [pc, #640]	; (1568 <usart_init+0x2dc>)
    12e6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12e8:	5df0      	ldrb	r0, [r6, r7]
    12ea:	2100      	movs	r1, #0
    12ec:	4b9f      	ldr	r3, [pc, #636]	; (156c <usart_init+0x2e0>)
    12ee:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    12f0:	7af3      	ldrb	r3, [r6, #11]
    12f2:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    12f4:	2324      	movs	r3, #36	; 0x24
    12f6:	5cf3      	ldrb	r3, [r6, r3]
    12f8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    12fa:	2325      	movs	r3, #37	; 0x25
    12fc:	5cf3      	ldrb	r3, [r6, r3]
    12fe:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1300:	7ef3      	ldrb	r3, [r6, #27]
    1302:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1304:	7f33      	ldrb	r3, [r6, #28]
    1306:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1308:	6829      	ldr	r1, [r5, #0]
    130a:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    130c:	1c08      	adds	r0, r1, #0
    130e:	4b93      	ldr	r3, [pc, #588]	; (155c <usart_init+0x2d0>)
    1310:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1312:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    1314:	2200      	movs	r2, #0
    1316:	466b      	mov	r3, sp
    1318:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    131a:	8a32      	ldrh	r2, [r6, #16]
    131c:	9202      	str	r2, [sp, #8]
    131e:	2380      	movs	r3, #128	; 0x80
    1320:	01db      	lsls	r3, r3, #7
    1322:	429a      	cmp	r2, r3
    1324:	d021      	beq.n	136a <usart_init+0xde>
    1326:	2380      	movs	r3, #128	; 0x80
    1328:	01db      	lsls	r3, r3, #7
    132a:	429a      	cmp	r2, r3
    132c:	d804      	bhi.n	1338 <usart_init+0xac>
    132e:	2380      	movs	r3, #128	; 0x80
    1330:	019b      	lsls	r3, r3, #6
    1332:	429a      	cmp	r2, r3
    1334:	d011      	beq.n	135a <usart_init+0xce>
    1336:	e008      	b.n	134a <usart_init+0xbe>
    1338:	23c0      	movs	r3, #192	; 0xc0
    133a:	01db      	lsls	r3, r3, #7
    133c:	9f02      	ldr	r7, [sp, #8]
    133e:	429f      	cmp	r7, r3
    1340:	d00f      	beq.n	1362 <usart_init+0xd6>
    1342:	2380      	movs	r3, #128	; 0x80
    1344:	021b      	lsls	r3, r3, #8
    1346:	429f      	cmp	r7, r3
    1348:	d003      	beq.n	1352 <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    134a:	2710      	movs	r7, #16
    134c:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    134e:	2700      	movs	r7, #0
    1350:	e00e      	b.n	1370 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1352:	2703      	movs	r7, #3
    1354:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1356:	2700      	movs	r7, #0
    1358:	e00a      	b.n	1370 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    135a:	2710      	movs	r7, #16
    135c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    135e:	2701      	movs	r7, #1
    1360:	e006      	b.n	1370 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1362:	2708      	movs	r7, #8
    1364:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1366:	2701      	movs	r7, #1
    1368:	e002      	b.n	1370 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    136a:	2708      	movs	r7, #8
    136c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    136e:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1370:	6831      	ldr	r1, [r6, #0]
    1372:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    1374:	68f2      	ldr	r2, [r6, #12]
    1376:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1378:	6973      	ldr	r3, [r6, #20]
    137a:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    137c:	7e31      	ldrb	r1, [r6, #24]
    137e:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1380:	2326      	movs	r3, #38	; 0x26
    1382:	5cf3      	ldrb	r3, [r6, r3]
    1384:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    1386:	6873      	ldr	r3, [r6, #4]
    1388:	2b00      	cmp	r3, #0
    138a:	d013      	beq.n	13b4 <usart_init+0x128>
    138c:	2280      	movs	r2, #128	; 0x80
    138e:	0552      	lsls	r2, r2, #21
    1390:	4293      	cmp	r3, r2
    1392:	d12e      	bne.n	13f2 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1394:	2327      	movs	r3, #39	; 0x27
    1396:	5cf3      	ldrb	r3, [r6, r3]
    1398:	2b00      	cmp	r3, #0
    139a:	d12e      	bne.n	13fa <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    139c:	6a37      	ldr	r7, [r6, #32]
    139e:	b2c0      	uxtb	r0, r0
    13a0:	4b73      	ldr	r3, [pc, #460]	; (1570 <usart_init+0x2e4>)
    13a2:	4798      	blx	r3
    13a4:	1c01      	adds	r1, r0, #0
    13a6:	1c38      	adds	r0, r7, #0
    13a8:	466a      	mov	r2, sp
    13aa:	3226      	adds	r2, #38	; 0x26
    13ac:	4b71      	ldr	r3, [pc, #452]	; (1574 <usart_init+0x2e8>)
    13ae:	4798      	blx	r3
    13b0:	1c03      	adds	r3, r0, #0
    13b2:	e01f      	b.n	13f4 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    13b4:	2327      	movs	r3, #39	; 0x27
    13b6:	5cf3      	ldrb	r3, [r6, r3]
    13b8:	2b00      	cmp	r3, #0
    13ba:	d00a      	beq.n	13d2 <usart_init+0x146>
				status_code =
    13bc:	9a06      	ldr	r2, [sp, #24]
    13be:	9200      	str	r2, [sp, #0]
    13c0:	6a30      	ldr	r0, [r6, #32]
    13c2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    13c4:	466a      	mov	r2, sp
    13c6:	3226      	adds	r2, #38	; 0x26
    13c8:	1c3b      	adds	r3, r7, #0
    13ca:	4f6b      	ldr	r7, [pc, #428]	; (1578 <usart_init+0x2ec>)
    13cc:	47b8      	blx	r7
    13ce:	1c03      	adds	r3, r0, #0
    13d0:	e010      	b.n	13f4 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    13d2:	6a31      	ldr	r1, [r6, #32]
    13d4:	9107      	str	r1, [sp, #28]
    13d6:	b2c0      	uxtb	r0, r0
    13d8:	4b65      	ldr	r3, [pc, #404]	; (1570 <usart_init+0x2e4>)
    13da:	4798      	blx	r3
    13dc:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    13de:	9a06      	ldr	r2, [sp, #24]
    13e0:	9200      	str	r2, [sp, #0]
    13e2:	9807      	ldr	r0, [sp, #28]
    13e4:	466a      	mov	r2, sp
    13e6:	3226      	adds	r2, #38	; 0x26
    13e8:	1c3b      	adds	r3, r7, #0
    13ea:	4f63      	ldr	r7, [pc, #396]	; (1578 <usart_init+0x2ec>)
    13ec:	47b8      	blx	r7
    13ee:	1c03      	adds	r3, r0, #0
    13f0:	e000      	b.n	13f4 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    13f2:	2300      	movs	r3, #0
    13f4:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    13f6:	d000      	beq.n	13fa <usart_init+0x16e>
    13f8:	e0a8      	b.n	154c <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    13fa:	7e73      	ldrb	r3, [r6, #25]
    13fc:	2b00      	cmp	r3, #0
    13fe:	d002      	beq.n	1406 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1400:	7eb3      	ldrb	r3, [r6, #26]
    1402:	4641      	mov	r1, r8
    1404:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1406:	682a      	ldr	r2, [r5, #0]
    1408:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    140a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    140c:	2b00      	cmp	r3, #0
    140e:	d1fc      	bne.n	140a <usart_init+0x17e>
    1410:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1412:	466b      	mov	r3, sp
    1414:	3326      	adds	r3, #38	; 0x26
    1416:	881b      	ldrh	r3, [r3, #0]
    1418:	4642      	mov	r2, r8
    141a:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    141c:	464b      	mov	r3, r9
    141e:	9f03      	ldr	r7, [sp, #12]
    1420:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    1422:	9f04      	ldr	r7, [sp, #16]
    1424:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1426:	6871      	ldr	r1, [r6, #4]
    1428:	430b      	orrs	r3, r1
		config->sample_rate |
    142a:	9f02      	ldr	r7, [sp, #8]
    142c:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    142e:	4652      	mov	r2, sl
    1430:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1432:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1434:	4659      	mov	r1, fp
    1436:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1438:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    143a:	2327      	movs	r3, #39	; 0x27
    143c:	5cf3      	ldrb	r3, [r6, r3]
    143e:	2b00      	cmp	r3, #0
    1440:	d101      	bne.n	1446 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1442:	2304      	movs	r3, #4
    1444:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1446:	7e71      	ldrb	r1, [r6, #25]
    1448:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    144a:	7f33      	ldrb	r3, [r6, #28]
    144c:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    144e:	4319      	orrs	r1, r3
    1450:	7af2      	ldrb	r2, [r6, #11]
    1452:	7ab3      	ldrb	r3, [r6, #10]
    1454:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1456:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1458:	7f73      	ldrb	r3, [r6, #29]
    145a:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    145c:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    145e:	2324      	movs	r3, #36	; 0x24
    1460:	5cf3      	ldrb	r3, [r6, r3]
    1462:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1464:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1466:	2325      	movs	r3, #37	; 0x25
    1468:	5cf3      	ldrb	r3, [r6, r3]
    146a:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    146c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    146e:	8933      	ldrh	r3, [r6, #8]
    1470:	2bff      	cmp	r3, #255	; 0xff
    1472:	d00b      	beq.n	148c <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1474:	7ef2      	ldrb	r2, [r6, #27]
    1476:	2a00      	cmp	r2, #0
    1478:	d003      	beq.n	1482 <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    147a:	22a0      	movs	r2, #160	; 0xa0
    147c:	04d2      	lsls	r2, r2, #19
    147e:	4317      	orrs	r7, r2
    1480:	e002      	b.n	1488 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1482:	2280      	movs	r2, #128	; 0x80
    1484:	0452      	lsls	r2, r2, #17
    1486:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    1488:	4319      	orrs	r1, r3
    148a:	e005      	b.n	1498 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    148c:	7ef3      	ldrb	r3, [r6, #27]
    148e:	2b00      	cmp	r3, #0
    1490:	d002      	beq.n	1498 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1492:	2380      	movs	r3, #128	; 0x80
    1494:	04db      	lsls	r3, r3, #19
    1496:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1498:	232c      	movs	r3, #44	; 0x2c
    149a:	5cf3      	ldrb	r3, [r6, r3]
    149c:	2b00      	cmp	r3, #0
    149e:	d103      	bne.n	14a8 <usart_init+0x21c>
    14a0:	4b36      	ldr	r3, [pc, #216]	; (157c <usart_init+0x2f0>)
    14a2:	789b      	ldrb	r3, [r3, #2]
    14a4:	079a      	lsls	r2, r3, #30
    14a6:	d501      	bpl.n	14ac <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    14a8:	2380      	movs	r3, #128	; 0x80
    14aa:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14ac:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14ae:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    14b0:	2b00      	cmp	r3, #0
    14b2:	d1fc      	bne.n	14ae <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    14b4:	4643      	mov	r3, r8
    14b6:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14b8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14ba:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    14bc:	2b00      	cmp	r3, #0
    14be:	d1fc      	bne.n	14ba <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    14c0:	4641      	mov	r1, r8
    14c2:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14c4:	ab0e      	add	r3, sp, #56	; 0x38
    14c6:	2280      	movs	r2, #128	; 0x80
    14c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14ca:	2200      	movs	r2, #0
    14cc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    14ce:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14d0:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    14d2:	6b32      	ldr	r2, [r6, #48]	; 0x30
    14d4:	920a      	str	r2, [sp, #40]	; 0x28
    14d6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    14d8:	930b      	str	r3, [sp, #44]	; 0x2c
    14da:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    14dc:	970c      	str	r7, [sp, #48]	; 0x30
    14de:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    14e0:	960d      	str	r6, [sp, #52]	; 0x34
    14e2:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    14e4:	ae0e      	add	r6, sp, #56	; 0x38
    14e6:	b2f9      	uxtb	r1, r7
    14e8:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14ea:	aa0a      	add	r2, sp, #40	; 0x28
    14ec:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    14ee:	2800      	cmp	r0, #0
    14f0:	d102      	bne.n	14f8 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    14f2:	1c20      	adds	r0, r4, #0
    14f4:	4a22      	ldr	r2, [pc, #136]	; (1580 <usart_init+0x2f4>)
    14f6:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    14f8:	1c43      	adds	r3, r0, #1
    14fa:	d005      	beq.n	1508 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    14fc:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    14fe:	0c00      	lsrs	r0, r0, #16
    1500:	b2c0      	uxtb	r0, r0
    1502:	1c31      	adds	r1, r6, #0
    1504:	4a1f      	ldr	r2, [pc, #124]	; (1584 <usart_init+0x2f8>)
    1506:	4790      	blx	r2
    1508:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    150a:	2f04      	cmp	r7, #4
    150c:	d1eb      	bne.n	14e6 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    150e:	2300      	movs	r3, #0
    1510:	60eb      	str	r3, [r5, #12]
    1512:	612b      	str	r3, [r5, #16]
    1514:	616b      	str	r3, [r5, #20]
    1516:	61ab      	str	r3, [r5, #24]
    1518:	61eb      	str	r3, [r5, #28]
    151a:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    151c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    151e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1520:	2200      	movs	r2, #0
    1522:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1524:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1526:	2330      	movs	r3, #48	; 0x30
    1528:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    152a:	2331      	movs	r3, #49	; 0x31
    152c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    152e:	2332      	movs	r3, #50	; 0x32
    1530:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1532:	2333      	movs	r3, #51	; 0x33
    1534:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1536:	6828      	ldr	r0, [r5, #0]
    1538:	4b08      	ldr	r3, [pc, #32]	; (155c <usart_init+0x2d0>)
    153a:	4798      	blx	r3
    153c:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    153e:	4912      	ldr	r1, [pc, #72]	; (1588 <usart_init+0x2fc>)
    1540:	4b12      	ldr	r3, [pc, #72]	; (158c <usart_init+0x300>)
    1542:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1544:	00a4      	lsls	r4, r4, #2
    1546:	4b12      	ldr	r3, [pc, #72]	; (1590 <usart_init+0x304>)
    1548:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    154a:	2000      	movs	r0, #0
}
    154c:	b011      	add	sp, #68	; 0x44
    154e:	bc3c      	pop	{r2, r3, r4, r5}
    1550:	4690      	mov	r8, r2
    1552:	4699      	mov	r9, r3
    1554:	46a2      	mov	sl, r4
    1556:	46ab      	mov	fp, r5
    1558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	00000de9 	.word	0x00000de9
    1560:	40000400 	.word	0x40000400
    1564:	00001edd 	.word	0x00001edd
    1568:	00001e51 	.word	0x00001e51
    156c:	00000c11 	.word	0x00000c11
    1570:	00001ef9 	.word	0x00001ef9
    1574:	00000a35 	.word	0x00000a35
    1578:	00000a61 	.word	0x00000a61
    157c:	41002000 	.word	0x41002000
    1580:	00000c61 	.word	0x00000c61
    1584:	00001fb9 	.word	0x00001fb9
    1588:	00001639 	.word	0x00001639
    158c:	00000e29 	.word	0x00000e29
    1590:	200008ac 	.word	0x200008ac

00001594 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1594:	b510      	push	{r4, lr}
    1596:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1598:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    159a:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    159c:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    159e:	2c00      	cmp	r4, #0
    15a0:	d00d      	beq.n	15be <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    15a2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    15a4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    15a6:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    15a8:	2a00      	cmp	r2, #0
    15aa:	d108      	bne.n	15be <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15ac:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    15ae:	2a00      	cmp	r2, #0
    15b0:	d1fc      	bne.n	15ac <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    15b2:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    15b4:	2102      	movs	r1, #2
    15b6:	7e1a      	ldrb	r2, [r3, #24]
    15b8:	420a      	tst	r2, r1
    15ba:	d0fc      	beq.n	15b6 <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    15bc:	2000      	movs	r0, #0
}
    15be:	bd10      	pop	{r4, pc}

000015c0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    15c0:	b510      	push	{r4, lr}
    15c2:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15c4:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    15c6:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    15c8:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    15ca:	2a00      	cmp	r2, #0
    15cc:	d033      	beq.n	1636 <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    15ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    15d0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    15d2:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    15d4:	2b00      	cmp	r3, #0
    15d6:	d12e      	bne.n	1636 <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    15d8:	7e23      	ldrb	r3, [r4, #24]
    15da:	075a      	lsls	r2, r3, #29
    15dc:	d52b      	bpl.n	1636 <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15de:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    15e0:	2b00      	cmp	r3, #0
    15e2:	d1fc      	bne.n	15de <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15e4:	8b63      	ldrh	r3, [r4, #26]
    15e6:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    15e8:	069a      	lsls	r2, r3, #26
    15ea:	d021      	beq.n	1630 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    15ec:	079a      	lsls	r2, r3, #30
    15ee:	d503      	bpl.n	15f8 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    15f0:	2302      	movs	r3, #2
    15f2:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    15f4:	201a      	movs	r0, #26
    15f6:	e01e      	b.n	1636 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    15f8:	075a      	lsls	r2, r3, #29
    15fa:	d503      	bpl.n	1604 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    15fc:	2304      	movs	r3, #4
    15fe:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    1600:	201e      	movs	r0, #30
    1602:	e018      	b.n	1636 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1604:	07da      	lsls	r2, r3, #31
    1606:	d503      	bpl.n	1610 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1608:	2301      	movs	r3, #1
    160a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    160c:	2013      	movs	r0, #19
    160e:	e012      	b.n	1636 <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1610:	06da      	lsls	r2, r3, #27
    1612:	d505      	bpl.n	1620 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1614:	8b62      	ldrh	r2, [r4, #26]
    1616:	2310      	movs	r3, #16
    1618:	4313      	orrs	r3, r2
    161a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    161c:	2042      	movs	r0, #66	; 0x42
    161e:	e00a      	b.n	1636 <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1620:	069a      	lsls	r2, r3, #26
    1622:	d505      	bpl.n	1630 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1624:	8b62      	ldrh	r2, [r4, #26]
    1626:	2320      	movs	r3, #32
    1628:	4313      	orrs	r3, r2
    162a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    162c:	2041      	movs	r0, #65	; 0x41
    162e:	e002      	b.n	1636 <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1630:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1632:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1634:	2000      	movs	r0, #0
}
    1636:	bd10      	pop	{r4, pc}

00001638 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    163a:	0080      	lsls	r0, r0, #2
    163c:	4b64      	ldr	r3, [pc, #400]	; (17d0 <_usart_interrupt_handler+0x198>)
    163e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1640:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1642:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1644:	2b00      	cmp	r3, #0
    1646:	d1fc      	bne.n	1642 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1648:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    164a:	7da6      	ldrb	r6, [r4, #22]
    164c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    164e:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1650:	5ceb      	ldrb	r3, [r5, r3]
    1652:	2230      	movs	r2, #48	; 0x30
    1654:	5caf      	ldrb	r7, [r5, r2]
    1656:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1658:	07f1      	lsls	r1, r6, #31
    165a:	d520      	bpl.n	169e <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    165c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    165e:	b29b      	uxth	r3, r3
    1660:	2b00      	cmp	r3, #0
    1662:	d01a      	beq.n	169a <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1664:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1666:	781a      	ldrb	r2, [r3, #0]
    1668:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    166a:	1c59      	adds	r1, r3, #1
    166c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    166e:	7969      	ldrb	r1, [r5, #5]
    1670:	2901      	cmp	r1, #1
    1672:	d104      	bne.n	167e <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1674:	7859      	ldrb	r1, [r3, #1]
    1676:	0209      	lsls	r1, r1, #8
    1678:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    167a:	3302      	adds	r3, #2
    167c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    167e:	05d3      	lsls	r3, r2, #23
    1680:	0ddb      	lsrs	r3, r3, #23
    1682:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1684:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1686:	3b01      	subs	r3, #1
    1688:	b29b      	uxth	r3, r3
    168a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    168c:	2b00      	cmp	r3, #0
    168e:	d106      	bne.n	169e <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1690:	2301      	movs	r3, #1
    1692:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1694:	2302      	movs	r3, #2
    1696:	75a3      	strb	r3, [r4, #22]
    1698:	e001      	b.n	169e <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    169a:	2301      	movs	r3, #1
    169c:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    169e:	07b2      	lsls	r2, r6, #30
    16a0:	d509      	bpl.n	16b6 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    16a2:	2302      	movs	r3, #2
    16a4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    16a6:	2200      	movs	r2, #0
    16a8:	2333      	movs	r3, #51	; 0x33
    16aa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    16ac:	07fb      	lsls	r3, r7, #31
    16ae:	d502      	bpl.n	16b6 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    16b0:	1c28      	adds	r0, r5, #0
    16b2:	68e9      	ldr	r1, [r5, #12]
    16b4:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    16b6:	0772      	lsls	r2, r6, #29
    16b8:	d56a      	bpl.n	1790 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    16ba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    16bc:	b29b      	uxth	r3, r3
    16be:	2b00      	cmp	r3, #0
    16c0:	d064      	beq.n	178c <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16c2:	8b63      	ldrh	r3, [r4, #26]
    16c4:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    16c6:	0719      	lsls	r1, r3, #28
    16c8:	d402      	bmi.n	16d0 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16ca:	223f      	movs	r2, #63	; 0x3f
    16cc:	4013      	ands	r3, r2
    16ce:	e001      	b.n	16d4 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    16d0:	2237      	movs	r2, #55	; 0x37
    16d2:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    16d4:	2b00      	cmp	r3, #0
    16d6:	d037      	beq.n	1748 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    16d8:	079a      	lsls	r2, r3, #30
    16da:	d507      	bpl.n	16ec <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    16dc:	221a      	movs	r2, #26
    16de:	2332      	movs	r3, #50	; 0x32
    16e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    16e2:	8b62      	ldrh	r2, [r4, #26]
    16e4:	2302      	movs	r3, #2
    16e6:	4313      	orrs	r3, r2
    16e8:	8363      	strh	r3, [r4, #26]
    16ea:	e027      	b.n	173c <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16ec:	0759      	lsls	r1, r3, #29
    16ee:	d507      	bpl.n	1700 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    16f0:	221e      	movs	r2, #30
    16f2:	2332      	movs	r3, #50	; 0x32
    16f4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    16f6:	8b62      	ldrh	r2, [r4, #26]
    16f8:	2304      	movs	r3, #4
    16fa:	4313      	orrs	r3, r2
    16fc:	8363      	strh	r3, [r4, #26]
    16fe:	e01d      	b.n	173c <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1700:	07da      	lsls	r2, r3, #31
    1702:	d507      	bpl.n	1714 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1704:	2213      	movs	r2, #19
    1706:	2332      	movs	r3, #50	; 0x32
    1708:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    170a:	8b62      	ldrh	r2, [r4, #26]
    170c:	2301      	movs	r3, #1
    170e:	4313      	orrs	r3, r2
    1710:	8363      	strh	r3, [r4, #26]
    1712:	e013      	b.n	173c <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1714:	06d9      	lsls	r1, r3, #27
    1716:	d507      	bpl.n	1728 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1718:	2242      	movs	r2, #66	; 0x42
    171a:	2332      	movs	r3, #50	; 0x32
    171c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    171e:	8b62      	ldrh	r2, [r4, #26]
    1720:	2310      	movs	r3, #16
    1722:	4313      	orrs	r3, r2
    1724:	8363      	strh	r3, [r4, #26]
    1726:	e009      	b.n	173c <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1728:	2220      	movs	r2, #32
    172a:	421a      	tst	r2, r3
    172c:	d006      	beq.n	173c <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    172e:	2241      	movs	r2, #65	; 0x41
    1730:	2332      	movs	r3, #50	; 0x32
    1732:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1734:	8b62      	ldrh	r2, [r4, #26]
    1736:	2320      	movs	r3, #32
    1738:	4313      	orrs	r3, r2
    173a:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    173c:	077a      	lsls	r2, r7, #29
    173e:	d527      	bpl.n	1790 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1740:	1c28      	adds	r0, r5, #0
    1742:	696b      	ldr	r3, [r5, #20]
    1744:	4798      	blx	r3
    1746:	e023      	b.n	1790 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1748:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    174a:	05d2      	lsls	r2, r2, #23
    174c:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    174e:	b2d3      	uxtb	r3, r2
    1750:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1752:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1754:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1756:	1c59      	adds	r1, r3, #1
    1758:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    175a:	7969      	ldrb	r1, [r5, #5]
    175c:	2901      	cmp	r1, #1
    175e:	d104      	bne.n	176a <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1760:	0a12      	lsrs	r2, r2, #8
    1762:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1764:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1766:	3301      	adds	r3, #1
    1768:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    176a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    176c:	3b01      	subs	r3, #1
    176e:	b29b      	uxth	r3, r3
    1770:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1772:	2b00      	cmp	r3, #0
    1774:	d10c      	bne.n	1790 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1776:	2304      	movs	r3, #4
    1778:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    177a:	2200      	movs	r2, #0
    177c:	2332      	movs	r3, #50	; 0x32
    177e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1780:	07ba      	lsls	r2, r7, #30
    1782:	d505      	bpl.n	1790 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1784:	1c28      	adds	r0, r5, #0
    1786:	692b      	ldr	r3, [r5, #16]
    1788:	4798      	blx	r3
    178a:	e001      	b.n	1790 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    178c:	2304      	movs	r3, #4
    178e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1790:	06f1      	lsls	r1, r6, #27
    1792:	d507      	bpl.n	17a4 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1794:	2310      	movs	r3, #16
    1796:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1798:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    179a:	06fa      	lsls	r2, r7, #27
    179c:	d502      	bpl.n	17a4 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    179e:	1c28      	adds	r0, r5, #0
    17a0:	69eb      	ldr	r3, [r5, #28]
    17a2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    17a4:	06b1      	lsls	r1, r6, #26
    17a6:	d507      	bpl.n	17b8 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    17a8:	2320      	movs	r3, #32
    17aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    17ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    17ae:	073a      	lsls	r2, r7, #28
    17b0:	d502      	bpl.n	17b8 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    17b2:	1c28      	adds	r0, r5, #0
    17b4:	69ab      	ldr	r3, [r5, #24]
    17b6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    17b8:	0731      	lsls	r1, r6, #28
    17ba:	d507      	bpl.n	17cc <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    17bc:	2308      	movs	r3, #8
    17be:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    17c0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    17c2:	06ba      	lsls	r2, r7, #26
    17c4:	d502      	bpl.n	17cc <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    17c6:	6a2b      	ldr	r3, [r5, #32]
    17c8:	1c28      	adds	r0, r5, #0
    17ca:	4798      	blx	r3
		}
	}
#endif
}
    17cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	200008ac 	.word	0x200008ac

000017d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    17d4:	b508      	push	{r3, lr}
	switch (clock_source) {
    17d6:	2808      	cmp	r0, #8
    17d8:	d834      	bhi.n	1844 <system_clock_source_get_hz+0x70>
    17da:	0080      	lsls	r0, r0, #2
    17dc:	4b1b      	ldr	r3, [pc, #108]	; (184c <system_clock_source_get_hz+0x78>)
    17de:	581b      	ldr	r3, [r3, r0]
    17e0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    17e2:	2080      	movs	r0, #128	; 0x80
    17e4:	0200      	lsls	r0, r0, #8
    17e6:	e030      	b.n	184a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    17e8:	4b19      	ldr	r3, [pc, #100]	; (1850 <system_clock_source_get_hz+0x7c>)
    17ea:	6918      	ldr	r0, [r3, #16]
    17ec:	e02d      	b.n	184a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    17ee:	4b19      	ldr	r3, [pc, #100]	; (1854 <system_clock_source_get_hz+0x80>)
    17f0:	6a18      	ldr	r0, [r3, #32]
    17f2:	0580      	lsls	r0, r0, #22
    17f4:	0f80      	lsrs	r0, r0, #30
    17f6:	4b18      	ldr	r3, [pc, #96]	; (1858 <system_clock_source_get_hz+0x84>)
    17f8:	40c3      	lsrs	r3, r0
    17fa:	1c18      	adds	r0, r3, #0
    17fc:	e025      	b.n	184a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    17fe:	4b14      	ldr	r3, [pc, #80]	; (1850 <system_clock_source_get_hz+0x7c>)
    1800:	6958      	ldr	r0, [r3, #20]
    1802:	e022      	b.n	184a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1804:	4b12      	ldr	r3, [pc, #72]	; (1850 <system_clock_source_get_hz+0x7c>)
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	2002      	movs	r0, #2
    180a:	4018      	ands	r0, r3
    180c:	d01d      	beq.n	184a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    180e:	4911      	ldr	r1, [pc, #68]	; (1854 <system_clock_source_get_hz+0x80>)
    1810:	2210      	movs	r2, #16
    1812:	68cb      	ldr	r3, [r1, #12]
    1814:	421a      	tst	r2, r3
    1816:	d0fc      	beq.n	1812 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1818:	4b0d      	ldr	r3, [pc, #52]	; (1850 <system_clock_source_get_hz+0x7c>)
    181a:	681b      	ldr	r3, [r3, #0]
    181c:	075a      	lsls	r2, r3, #29
    181e:	d513      	bpl.n	1848 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1820:	2000      	movs	r0, #0
    1822:	4b0e      	ldr	r3, [pc, #56]	; (185c <system_clock_source_get_hz+0x88>)
    1824:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1826:	4b0a      	ldr	r3, [pc, #40]	; (1850 <system_clock_source_get_hz+0x7c>)
    1828:	689b      	ldr	r3, [r3, #8]
    182a:	041b      	lsls	r3, r3, #16
    182c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    182e:	4358      	muls	r0, r3
    1830:	e00b      	b.n	184a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1832:	2350      	movs	r3, #80	; 0x50
    1834:	4a07      	ldr	r2, [pc, #28]	; (1854 <system_clock_source_get_hz+0x80>)
    1836:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1838:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    183a:	075a      	lsls	r2, r3, #29
    183c:	d505      	bpl.n	184a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    183e:	4b04      	ldr	r3, [pc, #16]	; (1850 <system_clock_source_get_hz+0x7c>)
    1840:	68d8      	ldr	r0, [r3, #12]
    1842:	e002      	b.n	184a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1844:	2000      	movs	r0, #0
    1846:	e000      	b.n	184a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1848:	4805      	ldr	r0, [pc, #20]	; (1860 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    184a:	bd08      	pop	{r3, pc}
    184c:	00007e9c 	.word	0x00007e9c
    1850:	200000b4 	.word	0x200000b4
    1854:	40000800 	.word	0x40000800
    1858:	007a1200 	.word	0x007a1200
    185c:	00001ef9 	.word	0x00001ef9
    1860:	02dc6c00 	.word	0x02dc6c00

00001864 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1864:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1866:	4b0c      	ldr	r3, [pc, #48]	; (1898 <system_clock_source_osc8m_set_config+0x34>)
    1868:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    186a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    186c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    186e:	7840      	ldrb	r0, [r0, #1]
    1870:	2201      	movs	r2, #1
    1872:	4010      	ands	r0, r2
    1874:	0180      	lsls	r0, r0, #6
    1876:	2640      	movs	r6, #64	; 0x40
    1878:	43b4      	bics	r4, r6
    187a:	4304      	orrs	r4, r0
    187c:	402a      	ands	r2, r5
    187e:	01d0      	lsls	r0, r2, #7
    1880:	2280      	movs	r2, #128	; 0x80
    1882:	4394      	bics	r4, r2
    1884:	1c22      	adds	r2, r4, #0
    1886:	4302      	orrs	r2, r0
    1888:	2003      	movs	r0, #3
    188a:	4001      	ands	r1, r0
    188c:	0209      	lsls	r1, r1, #8
    188e:	4803      	ldr	r0, [pc, #12]	; (189c <system_clock_source_osc8m_set_config+0x38>)
    1890:	4002      	ands	r2, r0
    1892:	430a      	orrs	r2, r1
    1894:	621a      	str	r2, [r3, #32]
}
    1896:	bd70      	pop	{r4, r5, r6, pc}
    1898:	40000800 	.word	0x40000800
    189c:	fffffcff 	.word	0xfffffcff

000018a0 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    18a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18a2:	464f      	mov	r7, r9
    18a4:	4646      	mov	r6, r8
    18a6:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    18a8:	4a19      	ldr	r2, [pc, #100]	; (1910 <system_clock_source_osc32k_set_config+0x70>)
    18aa:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    18ac:	7841      	ldrb	r1, [r0, #1]
    18ae:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    18b0:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18b2:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    18b4:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    18b6:	7943      	ldrb	r3, [r0, #5]
    18b8:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
    18ba:	7880      	ldrb	r0, [r0, #2]
    18bc:	2301      	movs	r3, #1
    18be:	4018      	ands	r0, r3
    18c0:	0080      	lsls	r0, r0, #2
    18c2:	2104      	movs	r1, #4
    18c4:	438c      	bics	r4, r1
    18c6:	4304      	orrs	r4, r0
    18c8:	4660      	mov	r0, ip
    18ca:	4018      	ands	r0, r3
    18cc:	00c0      	lsls	r0, r0, #3
    18ce:	2108      	movs	r1, #8
    18d0:	438c      	bics	r4, r1
    18d2:	4304      	orrs	r4, r0
    18d4:	1c18      	adds	r0, r3, #0
    18d6:	4038      	ands	r0, r7
    18d8:	0180      	lsls	r0, r0, #6
    18da:	2740      	movs	r7, #64	; 0x40
    18dc:	43bc      	bics	r4, r7
    18de:	4304      	orrs	r4, r0
    18e0:	1c18      	adds	r0, r3, #0
    18e2:	4030      	ands	r0, r6
    18e4:	01c0      	lsls	r0, r0, #7
    18e6:	2680      	movs	r6, #128	; 0x80
    18e8:	43b4      	bics	r4, r6
    18ea:	4304      	orrs	r4, r0
    18ec:	2007      	movs	r0, #7
    18ee:	4028      	ands	r0, r5
    18f0:	0200      	lsls	r0, r0, #8
    18f2:	4d08      	ldr	r5, [pc, #32]	; (1914 <system_clock_source_osc32k_set_config+0x74>)
    18f4:	402c      	ands	r4, r5
    18f6:	4304      	orrs	r4, r0
    18f8:	4649      	mov	r1, r9
    18fa:	400b      	ands	r3, r1
    18fc:	0319      	lsls	r1, r3, #12
    18fe:	4806      	ldr	r0, [pc, #24]	; (1918 <system_clock_source_osc32k_set_config+0x78>)
    1900:	1c23      	adds	r3, r4, #0
    1902:	4003      	ands	r3, r0
    1904:	430b      	orrs	r3, r1
    1906:	6193      	str	r3, [r2, #24]
}
    1908:	bc0c      	pop	{r2, r3}
    190a:	4690      	mov	r8, r2
    190c:	4699      	mov	r9, r3
    190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1910:	40000800 	.word	0x40000800
    1914:	fffff8ff 	.word	0xfffff8ff
    1918:	ffffefff 	.word	0xffffefff

0000191c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	465f      	mov	r7, fp
    1920:	4656      	mov	r6, sl
    1922:	464d      	mov	r5, r9
    1924:	4644      	mov	r4, r8
    1926:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1928:	4a25      	ldr	r2, [pc, #148]	; (19c0 <system_clock_source_xosc32k_set_config+0xa4>)
    192a:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    192c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    192e:	7803      	ldrb	r3, [r0, #0]
    1930:	4259      	negs	r1, r3
    1932:	4159      	adcs	r1, r3
    1934:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1936:	7883      	ldrb	r3, [r0, #2]
    1938:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    193a:	78c1      	ldrb	r1, [r0, #3]
    193c:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    193e:	7903      	ldrb	r3, [r0, #4]
    1940:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    1942:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1944:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1946:	7b81      	ldrb	r1, [r0, #14]
    1948:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    194a:	6880      	ldr	r0, [r0, #8]
    194c:	4b1d      	ldr	r3, [pc, #116]	; (19c4 <system_clock_source_xosc32k_set_config+0xa8>)
    194e:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    1950:	2301      	movs	r3, #1
    1952:	4651      	mov	r1, sl
    1954:	0088      	lsls	r0, r1, #2
    1956:	2104      	movs	r1, #4
    1958:	438c      	bics	r4, r1
    195a:	4304      	orrs	r4, r0
    195c:	4648      	mov	r0, r9
    195e:	4018      	ands	r0, r3
    1960:	00c0      	lsls	r0, r0, #3
    1962:	2108      	movs	r1, #8
    1964:	438c      	bics	r4, r1
    1966:	4304      	orrs	r4, r0
    1968:	4640      	mov	r0, r8
    196a:	4018      	ands	r0, r3
    196c:	0100      	lsls	r0, r0, #4
    196e:	2110      	movs	r1, #16
    1970:	438c      	bics	r4, r1
    1972:	4304      	orrs	r4, r0
    1974:	4660      	mov	r0, ip
    1976:	4018      	ands	r0, r3
    1978:	0140      	lsls	r0, r0, #5
    197a:	2120      	movs	r1, #32
    197c:	438c      	bics	r4, r1
    197e:	4304      	orrs	r4, r0
    1980:	1c18      	adds	r0, r3, #0
    1982:	4038      	ands	r0, r7
    1984:	0180      	lsls	r0, r0, #6
    1986:	2740      	movs	r7, #64	; 0x40
    1988:	43bc      	bics	r4, r7
    198a:	4304      	orrs	r4, r0
    198c:	1c18      	adds	r0, r3, #0
    198e:	4030      	ands	r0, r6
    1990:	01c0      	lsls	r0, r0, #7
    1992:	2680      	movs	r6, #128	; 0x80
    1994:	43b4      	bics	r4, r6
    1996:	4304      	orrs	r4, r0
    1998:	2007      	movs	r0, #7
    199a:	4028      	ands	r0, r5
    199c:	0200      	lsls	r0, r0, #8
    199e:	4d0a      	ldr	r5, [pc, #40]	; (19c8 <system_clock_source_xosc32k_set_config+0xac>)
    19a0:	402c      	ands	r4, r5
    19a2:	4304      	orrs	r4, r0
    19a4:	4659      	mov	r1, fp
    19a6:	400b      	ands	r3, r1
    19a8:	0319      	lsls	r1, r3, #12
    19aa:	4808      	ldr	r0, [pc, #32]	; (19cc <system_clock_source_xosc32k_set_config+0xb0>)
    19ac:	1c23      	adds	r3, r4, #0
    19ae:	4003      	ands	r3, r0
    19b0:	430b      	orrs	r3, r1
    19b2:	8293      	strh	r3, [r2, #20]
}
    19b4:	bc3c      	pop	{r2, r3, r4, r5}
    19b6:	4690      	mov	r8, r2
    19b8:	4699      	mov	r9, r3
    19ba:	46a2      	mov	sl, r4
    19bc:	46ab      	mov	fp, r5
    19be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c0:	40000800 	.word	0x40000800
    19c4:	200000b4 	.word	0x200000b4
    19c8:	fffff8ff 	.word	0xfffff8ff
    19cc:	ffffefff 	.word	0xffffefff

000019d0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    19d0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    19d2:	7a02      	ldrb	r2, [r0, #8]
    19d4:	0692      	lsls	r2, r2, #26
    19d6:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    19d8:	8943      	ldrh	r3, [r0, #10]
    19da:	059b      	lsls	r3, r3, #22
    19dc:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    19de:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    19e0:	4b15      	ldr	r3, [pc, #84]	; (1a38 <system_clock_source_dfll_set_config+0x68>)
    19e2:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    19e4:	8881      	ldrh	r1, [r0, #4]
    19e6:	8842      	ldrh	r2, [r0, #2]
    19e8:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    19ea:	79c4      	ldrb	r4, [r0, #7]
    19ec:	7982      	ldrb	r2, [r0, #6]
    19ee:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    19f0:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    19f2:	7841      	ldrb	r1, [r0, #1]
    19f4:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    19f6:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    19f8:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    19fa:	7803      	ldrb	r3, [r0, #0]
    19fc:	2b04      	cmp	r3, #4
    19fe:	d10f      	bne.n	1a20 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1a00:	7b02      	ldrb	r2, [r0, #12]
    1a02:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1a04:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1a06:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1a08:	89c3      	ldrh	r3, [r0, #14]
    1a0a:	041b      	lsls	r3, r3, #16
    1a0c:	490b      	ldr	r1, [pc, #44]	; (1a3c <system_clock_source_dfll_set_config+0x6c>)
    1a0e:	400b      	ands	r3, r1
    1a10:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1a12:	4b09      	ldr	r3, [pc, #36]	; (1a38 <system_clock_source_dfll_set_config+0x68>)
    1a14:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1a16:	6819      	ldr	r1, [r3, #0]
    1a18:	2204      	movs	r2, #4
    1a1a:	430a      	orrs	r2, r1
    1a1c:	601a      	str	r2, [r3, #0]
    1a1e:	e009      	b.n	1a34 <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1a20:	2b20      	cmp	r3, #32
    1a22:	d107      	bne.n	1a34 <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1a24:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1a26:	4b04      	ldr	r3, [pc, #16]	; (1a38 <system_clock_source_dfll_set_config+0x68>)
    1a28:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1a2a:	6819      	ldr	r1, [r3, #0]
    1a2c:	2284      	movs	r2, #132	; 0x84
    1a2e:	00d2      	lsls	r2, r2, #3
    1a30:	430a      	orrs	r2, r1
    1a32:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1a34:	bd10      	pop	{r4, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	200000b4 	.word	0x200000b4
    1a3c:	03ff0000 	.word	0x03ff0000

00001a40 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1a40:	2808      	cmp	r0, #8
    1a42:	d843      	bhi.n	1acc <system_clock_source_enable+0x8c>
    1a44:	0080      	lsls	r0, r0, #2
    1a46:	4b22      	ldr	r3, [pc, #136]	; (1ad0 <system_clock_source_enable+0x90>)
    1a48:	581b      	ldr	r3, [r3, r0]
    1a4a:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1a4c:	2000      	movs	r0, #0
    1a4e:	e03e      	b.n	1ace <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a50:	4b20      	ldr	r3, [pc, #128]	; (1ad4 <system_clock_source_enable+0x94>)
    1a52:	6a19      	ldr	r1, [r3, #32]
    1a54:	2202      	movs	r2, #2
    1a56:	430a      	orrs	r2, r1
    1a58:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1a5a:	2000      	movs	r0, #0
    1a5c:	e037      	b.n	1ace <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a5e:	4b1d      	ldr	r3, [pc, #116]	; (1ad4 <system_clock_source_enable+0x94>)
    1a60:	6999      	ldr	r1, [r3, #24]
    1a62:	2202      	movs	r2, #2
    1a64:	430a      	orrs	r2, r1
    1a66:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a68:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1a6a:	e030      	b.n	1ace <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a6c:	4b19      	ldr	r3, [pc, #100]	; (1ad4 <system_clock_source_enable+0x94>)
    1a6e:	8a19      	ldrh	r1, [r3, #16]
    1a70:	2202      	movs	r2, #2
    1a72:	430a      	orrs	r2, r1
    1a74:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a76:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1a78:	e029      	b.n	1ace <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1a7a:	4b16      	ldr	r3, [pc, #88]	; (1ad4 <system_clock_source_enable+0x94>)
    1a7c:	8a99      	ldrh	r1, [r3, #20]
    1a7e:	2202      	movs	r2, #2
    1a80:	430a      	orrs	r2, r1
    1a82:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a84:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1a86:	e022      	b.n	1ace <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1a88:	4b13      	ldr	r3, [pc, #76]	; (1ad8 <system_clock_source_enable+0x98>)
    1a8a:	6819      	ldr	r1, [r3, #0]
    1a8c:	2202      	movs	r2, #2
    1a8e:	430a      	orrs	r2, r1
    1a90:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1a92:	681a      	ldr	r2, [r3, #0]
    1a94:	4b11      	ldr	r3, [pc, #68]	; (1adc <system_clock_source_enable+0x9c>)
    1a96:	401a      	ands	r2, r3
    1a98:	4b0e      	ldr	r3, [pc, #56]	; (1ad4 <system_clock_source_enable+0x94>)
    1a9a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a9c:	1c19      	adds	r1, r3, #0
    1a9e:	2210      	movs	r2, #16
    1aa0:	68cb      	ldr	r3, [r1, #12]
    1aa2:	421a      	tst	r2, r3
    1aa4:	d0fc      	beq.n	1aa0 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1aa6:	4a0c      	ldr	r2, [pc, #48]	; (1ad8 <system_clock_source_enable+0x98>)
    1aa8:	6891      	ldr	r1, [r2, #8]
    1aaa:	4b0a      	ldr	r3, [pc, #40]	; (1ad4 <system_clock_source_enable+0x94>)
    1aac:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1aae:	6851      	ldr	r1, [r2, #4]
    1ab0:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ab2:	6812      	ldr	r2, [r2, #0]
    1ab4:	b292      	uxth	r2, r2
    1ab6:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ab8:	2000      	movs	r0, #0
    1aba:	e008      	b.n	1ace <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1abc:	4a05      	ldr	r2, [pc, #20]	; (1ad4 <system_clock_source_enable+0x94>)
    1abe:	2344      	movs	r3, #68	; 0x44
    1ac0:	5cd0      	ldrb	r0, [r2, r3]
    1ac2:	2102      	movs	r1, #2
    1ac4:	4301      	orrs	r1, r0
    1ac6:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ac8:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1aca:	e000      	b.n	1ace <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1acc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1ace:	4770      	bx	lr
    1ad0:	00007ec0 	.word	0x00007ec0
    1ad4:	40000800 	.word	0x40000800
    1ad8:	200000b4 	.word	0x200000b4
    1adc:	0000ff7f 	.word	0x0000ff7f

00001ae0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ae2:	4657      	mov	r7, sl
    1ae4:	464e      	mov	r6, r9
    1ae6:	4645      	mov	r5, r8
    1ae8:	b4e0      	push	{r5, r6, r7}
    1aea:	b090      	sub	sp, #64	; 0x40
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1aec:	22c2      	movs	r2, #194	; 0xc2
    1aee:	00d2      	lsls	r2, r2, #3
    1af0:	4b5e      	ldr	r3, [pc, #376]	; (1c6c <system_clock_init+0x18c>)
    1af2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1af4:	4b5e      	ldr	r3, [pc, #376]	; (1c70 <system_clock_init+0x190>)
    1af6:	685a      	ldr	r2, [r3, #4]
    1af8:	211e      	movs	r1, #30
    1afa:	438a      	bics	r2, r1
    1afc:	2104      	movs	r1, #4
    1afe:	430a      	orrs	r2, r1
    1b00:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    1b02:	2203      	movs	r2, #3
    1b04:	ab01      	add	r3, sp, #4
    1b06:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b08:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1b0a:	4d5a      	ldr	r5, [pc, #360]	; (1c74 <system_clock_init+0x194>)
    1b0c:	b2e0      	uxtb	r0, r4
    1b0e:	a901      	add	r1, sp, #4
    1b10:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b12:	3401      	adds	r4, #1
    1b14:	2c25      	cmp	r4, #37	; 0x25
    1b16:	d1f9      	bne.n	1b0c <system_clock_init+0x2c>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1b18:	a80c      	add	r0, sp, #48	; 0x30
    1b1a:	2300      	movs	r3, #0
    1b1c:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1b1e:	2280      	movs	r2, #128	; 0x80
    1b20:	0212      	lsls	r2, r2, #8
    1b22:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1b24:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1b26:	2201      	movs	r2, #1
    1b28:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1b2a:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1b2c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1b2e:	2106      	movs	r1, #6
    1b30:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1b32:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1b34:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1b36:	4b50      	ldr	r3, [pc, #320]	; (1c78 <system_clock_init+0x198>)
    1b38:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1b3a:	2005      	movs	r0, #5
    1b3c:	4b4f      	ldr	r3, [pc, #316]	; (1c7c <system_clock_init+0x19c>)
    1b3e:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1b40:	494a      	ldr	r1, [pc, #296]	; (1c6c <system_clock_init+0x18c>)
    1b42:	2202      	movs	r2, #2
    1b44:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1b46:	421a      	tst	r2, r3
    1b48:	d0fc      	beq.n	1b44 <system_clock_init+0x64>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1b4a:	4b48      	ldr	r3, [pc, #288]	; (1c6c <system_clock_init+0x18c>)
    1b4c:	8a99      	ldrh	r1, [r3, #20]
    1b4e:	2280      	movs	r2, #128	; 0x80
    1b50:	430a      	orrs	r2, r1
    1b52:	829a      	strh	r2, [r3, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    1b54:	4a4a      	ldr	r2, [pc, #296]	; (1c80 <system_clock_init+0x1a0>)
    1b56:	6811      	ldr	r1, [r2, #0]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1b58:	04c9      	lsls	r1, r1, #19
    1b5a:	0e49      	lsrs	r1, r1, #25
    1b5c:	0409      	lsls	r1, r1, #16
    1b5e:	6998      	ldr	r0, [r3, #24]
    1b60:	4a48      	ldr	r2, [pc, #288]	; (1c84 <system_clock_init+0x1a4>)
    1b62:	4002      	ands	r2, r0
    1b64:	430a      	orrs	r2, r1
    1b66:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1b68:	a80a      	add	r0, sp, #40	; 0x28
    1b6a:	2601      	movs	r6, #1
    1b6c:	7046      	strb	r6, [r0, #1]
	config->enable_32khz_output = true;
    1b6e:	7086      	strb	r6, [r0, #2]
	config->run_in_standby      = false;
	config->on_demand           = true;
    1b70:	7106      	strb	r6, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1b72:	2407      	movs	r4, #7
    1b74:	7004      	strb	r4, [r0, #0]
	config->write_once          = false;
    1b76:	2200      	movs	r2, #0
    1b78:	4690      	mov	r8, r2
    1b7a:	7142      	strb	r2, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1b7c:	70c6      	strb	r6, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1b7e:	4b42      	ldr	r3, [pc, #264]	; (1c88 <system_clock_init+0x1a8>)
    1b80:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1b82:	2004      	movs	r0, #4
    1b84:	4f3d      	ldr	r7, [pc, #244]	; (1c7c <system_clock_init+0x19c>)
    1b86:	47b8      	blx	r7
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1b88:	a805      	add	r0, sp, #20
    1b8a:	2500      	movs	r5, #0
    1b8c:	4642      	mov	r2, r8
    1b8e:	8042      	strh	r2, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1b90:	8082      	strh	r2, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1b92:	7185      	strb	r5, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1b94:	71c5      	strb	r5, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    1b96:	7204      	strb	r4, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1b98:	233f      	movs	r3, #63	; 0x3f
    1b9a:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1b9c:	2204      	movs	r2, #4
    1b9e:	4691      	mov	r9, r2
    1ba0:	7002      	strb	r2, [r0, #0]
	dfll_conf.on_demand      = false;
    1ba2:	7045      	strb	r5, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1ba4:	22b7      	movs	r2, #183	; 0xb7
    1ba6:	00d2      	lsls	r2, r2, #3
    1ba8:	8202      	strh	r2, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1baa:	7304      	strb	r4, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1bac:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1bae:	4b37      	ldr	r3, [pc, #220]	; (1c8c <system_clock_init+0x1ac>)
    1bb0:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1bb2:	a804      	add	r0, sp, #16
    1bb4:	7045      	strb	r5, [r0, #1]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1bb6:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1bb8:	7085      	strb	r5, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1bba:	4b35      	ldr	r3, [pc, #212]	; (1c90 <system_clock_init+0x1b0>)
    1bbc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1bbe:	2006      	movs	r0, #6
    1bc0:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1bc2:	4b34      	ldr	r3, [pc, #208]	; (1c94 <system_clock_init+0x1b4>)
    1bc4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1bc6:	ac01      	add	r4, sp, #4
    1bc8:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1bca:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1bcc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1bce:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1bd0:	2305      	movs	r3, #5
    1bd2:	7023      	strb	r3, [r4, #0]
    1bd4:	2001      	movs	r0, #1
    1bd6:	1c21      	adds	r1, r4, #0
    1bd8:	4b2f      	ldr	r3, [pc, #188]	; (1c98 <system_clock_init+0x1b8>)
    1bda:	469a      	mov	sl, r3
    1bdc:	4798      	blx	r3
    1bde:	2001      	movs	r0, #1
    1be0:	4a2e      	ldr	r2, [pc, #184]	; (1c9c <system_clock_init+0x1bc>)
    1be2:	4690      	mov	r8, r2
    1be4:	4790      	blx	r2
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1be6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    1be8:	7265      	strb	r5, [r4, #9]
    1bea:	464b      	mov	r3, r9
    1bec:	7023      	strb	r3, [r4, #0]
    1bee:	2220      	movs	r2, #32
    1bf0:	4691      	mov	r9, r2
    1bf2:	6062      	str	r2, [r4, #4]
    1bf4:	7226      	strb	r6, [r4, #8]
    1bf6:	2002      	movs	r0, #2
    1bf8:	1c21      	adds	r1, r4, #0
    1bfa:	47d0      	blx	sl
    1bfc:	2002      	movs	r0, #2
    1bfe:	47c0      	blx	r8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1c00:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1c02:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1c04:	7265      	strb	r5, [r4, #9]
    1c06:	2303      	movs	r3, #3
    1c08:	7023      	strb	r3, [r4, #0]
    1c0a:	464a      	mov	r2, r9
    1c0c:	6062      	str	r2, [r4, #4]
    1c0e:	2004      	movs	r0, #4
    1c10:	1c21      	adds	r1, r4, #0
    1c12:	47d0      	blx	sl
    1c14:	2004      	movs	r0, #4
    1c16:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1c18:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1c1a:	2000      	movs	r0, #0
    1c1c:	1c21      	adds	r1, r4, #0
    1c1e:	4b15      	ldr	r3, [pc, #84]	; (1c74 <system_clock_init+0x194>)
    1c20:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1c22:	2000      	movs	r0, #0
    1c24:	4b1e      	ldr	r3, [pc, #120]	; (1ca0 <system_clock_init+0x1c0>)
    1c26:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1c28:	2007      	movs	r0, #7
    1c2a:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1c2c:	490f      	ldr	r1, [pc, #60]	; (1c6c <system_clock_init+0x18c>)
    1c2e:	22d0      	movs	r2, #208	; 0xd0
    1c30:	68cb      	ldr	r3, [r1, #12]
    1c32:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1c34:	2bd0      	cmp	r3, #208	; 0xd0
    1c36:	d1fb      	bne.n	1c30 <system_clock_init+0x150>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1c38:	4a1a      	ldr	r2, [pc, #104]	; (1ca4 <system_clock_init+0x1c4>)
    1c3a:	2300      	movs	r3, #0
    1c3c:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1c3e:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1c40:	7293      	strb	r3, [r2, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1c42:	a901      	add	r1, sp, #4
    1c44:	2201      	movs	r2, #1
    1c46:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1c48:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1c4a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1c4c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1c4e:	2307      	movs	r3, #7
    1c50:	700b      	strb	r3, [r1, #0]
    1c52:	2000      	movs	r0, #0
    1c54:	4b10      	ldr	r3, [pc, #64]	; (1c98 <system_clock_init+0x1b8>)
    1c56:	4798      	blx	r3
    1c58:	2000      	movs	r0, #0
    1c5a:	4b10      	ldr	r3, [pc, #64]	; (1c9c <system_clock_init+0x1bc>)
    1c5c:	4798      	blx	r3
#endif
}
    1c5e:	b010      	add	sp, #64	; 0x40
    1c60:	bc1c      	pop	{r2, r3, r4}
    1c62:	4690      	mov	r8, r2
    1c64:	4699      	mov	r9, r3
    1c66:	46a2      	mov	sl, r4
    1c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	40000800 	.word	0x40000800
    1c70:	41004000 	.word	0x41004000
    1c74:	00001edd 	.word	0x00001edd
    1c78:	0000191d 	.word	0x0000191d
    1c7c:	00001a41 	.word	0x00001a41
    1c80:	00806024 	.word	0x00806024
    1c84:	ff80ffff 	.word	0xff80ffff
    1c88:	000018a1 	.word	0x000018a1
    1c8c:	000019d1 	.word	0x000019d1
    1c90:	00001865 	.word	0x00001865
    1c94:	00001ca9 	.word	0x00001ca9
    1c98:	00001ccd 	.word	0x00001ccd
    1c9c:	00001d81 	.word	0x00001d81
    1ca0:	00001e51 	.word	0x00001e51
    1ca4:	40000400 	.word	0x40000400

00001ca8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1ca8:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <system_gclk_init+0x1c>)
    1caa:	6999      	ldr	r1, [r3, #24]
    1cac:	2208      	movs	r2, #8
    1cae:	430a      	orrs	r2, r1
    1cb0:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1cb2:	2201      	movs	r2, #1
    1cb4:	4b04      	ldr	r3, [pc, #16]	; (1cc8 <system_gclk_init+0x20>)
    1cb6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1cb8:	1c19      	adds	r1, r3, #0
    1cba:	780b      	ldrb	r3, [r1, #0]
    1cbc:	4213      	tst	r3, r2
    1cbe:	d1fc      	bne.n	1cba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1cc0:	4770      	bx	lr
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	40000400 	.word	0x40000400
    1cc8:	40000c00 	.word	0x40000c00

00001ccc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cce:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1cd0:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1cd2:	780d      	ldrb	r5, [r1, #0]
    1cd4:	022d      	lsls	r5, r5, #8
    1cd6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1cd8:	784b      	ldrb	r3, [r1, #1]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d002      	beq.n	1ce4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1cde:	2380      	movs	r3, #128	; 0x80
    1ce0:	02db      	lsls	r3, r3, #11
    1ce2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1ce4:	7a4b      	ldrb	r3, [r1, #9]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d002      	beq.n	1cf0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1cea:	2380      	movs	r3, #128	; 0x80
    1cec:	031b      	lsls	r3, r3, #12
    1cee:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1cf0:	684c      	ldr	r4, [r1, #4]
    1cf2:	2c01      	cmp	r4, #1
    1cf4:	d917      	bls.n	1d26 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1cf6:	1e63      	subs	r3, r4, #1
    1cf8:	421c      	tst	r4, r3
    1cfa:	d10f      	bne.n	1d1c <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1cfc:	2c02      	cmp	r4, #2
    1cfe:	d906      	bls.n	1d0e <system_gclk_gen_set_config+0x42>
    1d00:	2302      	movs	r3, #2
    1d02:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1d04:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1d06:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1d08:	429c      	cmp	r4, r3
    1d0a:	d8fb      	bhi.n	1d04 <system_gclk_gen_set_config+0x38>
    1d0c:	e000      	b.n	1d10 <system_gclk_gen_set_config+0x44>
    1d0e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1d10:	0217      	lsls	r7, r2, #8
    1d12:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1d14:	2380      	movs	r3, #128	; 0x80
    1d16:	035b      	lsls	r3, r3, #13
    1d18:	431d      	orrs	r5, r3
    1d1a:	e004      	b.n	1d26 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1d1c:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1d1e:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1d20:	2380      	movs	r3, #128	; 0x80
    1d22:	029b      	lsls	r3, r3, #10
    1d24:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1d26:	7a0b      	ldrb	r3, [r1, #8]
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d002      	beq.n	1d32 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1d2c:	2380      	movs	r3, #128	; 0x80
    1d2e:	039b      	lsls	r3, r3, #14
    1d30:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d32:	4a0f      	ldr	r2, [pc, #60]	; (1d70 <system_gclk_gen_set_config+0xa4>)
    1d34:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1d36:	b25b      	sxtb	r3, r3
    1d38:	2b00      	cmp	r3, #0
    1d3a:	dbfb      	blt.n	1d34 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d3c:	4b0d      	ldr	r3, [pc, #52]	; (1d74 <system_gclk_gen_set_config+0xa8>)
    1d3e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d40:	4b0d      	ldr	r3, [pc, #52]	; (1d78 <system_gclk_gen_set_config+0xac>)
    1d42:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d44:	4a0a      	ldr	r2, [pc, #40]	; (1d70 <system_gclk_gen_set_config+0xa4>)
    1d46:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1d48:	b25b      	sxtb	r3, r3
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	dbfb      	blt.n	1d46 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1d4e:	4b08      	ldr	r3, [pc, #32]	; (1d70 <system_gclk_gen_set_config+0xa4>)
    1d50:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d52:	1c1a      	adds	r2, r3, #0
    1d54:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1d56:	b25b      	sxtb	r3, r3
    1d58:	2b00      	cmp	r3, #0
    1d5a:	dbfb      	blt.n	1d54 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1d5c:	4b04      	ldr	r3, [pc, #16]	; (1d70 <system_gclk_gen_set_config+0xa4>)
    1d5e:	6859      	ldr	r1, [r3, #4]
    1d60:	2280      	movs	r2, #128	; 0x80
    1d62:	0252      	lsls	r2, r2, #9
    1d64:	400a      	ands	r2, r1
    1d66:	4315      	orrs	r5, r2
    1d68:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d6a:	4b04      	ldr	r3, [pc, #16]	; (1d7c <system_gclk_gen_set_config+0xb0>)
    1d6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d70:	40000c00 	.word	0x40000c00
    1d74:	000001a9 	.word	0x000001a9
    1d78:	40000c08 	.word	0x40000c08
    1d7c:	000001e9 	.word	0x000001e9

00001d80 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d80:	b510      	push	{r4, lr}
    1d82:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d84:	4a0b      	ldr	r2, [pc, #44]	; (1db4 <system_gclk_gen_enable+0x34>)
    1d86:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1d88:	b25b      	sxtb	r3, r3
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	dbfb      	blt.n	1d86 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d8e:	4b0a      	ldr	r3, [pc, #40]	; (1db8 <system_gclk_gen_enable+0x38>)
    1d90:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d92:	4b0a      	ldr	r3, [pc, #40]	; (1dbc <system_gclk_gen_enable+0x3c>)
    1d94:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d96:	4a07      	ldr	r2, [pc, #28]	; (1db4 <system_gclk_gen_enable+0x34>)
    1d98:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1d9a:	b25b      	sxtb	r3, r3
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	dbfb      	blt.n	1d98 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1da0:	4b04      	ldr	r3, [pc, #16]	; (1db4 <system_gclk_gen_enable+0x34>)
    1da2:	6859      	ldr	r1, [r3, #4]
    1da4:	2280      	movs	r2, #128	; 0x80
    1da6:	0252      	lsls	r2, r2, #9
    1da8:	430a      	orrs	r2, r1
    1daa:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1dac:	4b04      	ldr	r3, [pc, #16]	; (1dc0 <system_gclk_gen_enable+0x40>)
    1dae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1db0:	bd10      	pop	{r4, pc}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	40000c00 	.word	0x40000c00
    1db8:	000001a9 	.word	0x000001a9
    1dbc:	40000c04 	.word	0x40000c04
    1dc0:	000001e9 	.word	0x000001e9

00001dc4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1dc4:	b570      	push	{r4, r5, r6, lr}
    1dc6:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dc8:	4a1a      	ldr	r2, [pc, #104]	; (1e34 <system_gclk_gen_get_hz+0x70>)
    1dca:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1dcc:	b25b      	sxtb	r3, r3
    1dce:	2b00      	cmp	r3, #0
    1dd0:	dbfb      	blt.n	1dca <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1dd2:	4b19      	ldr	r3, [pc, #100]	; (1e38 <system_gclk_gen_get_hz+0x74>)
    1dd4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1dd6:	4b19      	ldr	r3, [pc, #100]	; (1e3c <system_gclk_gen_get_hz+0x78>)
    1dd8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dda:	4a16      	ldr	r2, [pc, #88]	; (1e34 <system_gclk_gen_get_hz+0x70>)
    1ddc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1dde:	b25b      	sxtb	r3, r3
    1de0:	2b00      	cmp	r3, #0
    1de2:	dbfb      	blt.n	1ddc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1de4:	4e13      	ldr	r6, [pc, #76]	; (1e34 <system_gclk_gen_get_hz+0x70>)
    1de6:	6870      	ldr	r0, [r6, #4]
    1de8:	04c0      	lsls	r0, r0, #19
    1dea:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1dec:	4b14      	ldr	r3, [pc, #80]	; (1e40 <system_gclk_gen_get_hz+0x7c>)
    1dee:	4798      	blx	r3
    1df0:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1df2:	4b12      	ldr	r3, [pc, #72]	; (1e3c <system_gclk_gen_get_hz+0x78>)
    1df4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1df6:	6876      	ldr	r6, [r6, #4]
    1df8:	02f6      	lsls	r6, r6, #11
    1dfa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1dfc:	4b11      	ldr	r3, [pc, #68]	; (1e44 <system_gclk_gen_get_hz+0x80>)
    1dfe:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e00:	4a0c      	ldr	r2, [pc, #48]	; (1e34 <system_gclk_gen_get_hz+0x70>)
    1e02:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1e04:	b25b      	sxtb	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	dbfb      	blt.n	1e02 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1e0a:	4b0a      	ldr	r3, [pc, #40]	; (1e34 <system_gclk_gen_get_hz+0x70>)
    1e0c:	689c      	ldr	r4, [r3, #8]
    1e0e:	0a24      	lsrs	r4, r4, #8
    1e10:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e12:	4b0d      	ldr	r3, [pc, #52]	; (1e48 <system_gclk_gen_get_hz+0x84>)
    1e14:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1e16:	2e00      	cmp	r6, #0
    1e18:	d107      	bne.n	1e2a <system_gclk_gen_get_hz+0x66>
    1e1a:	2c01      	cmp	r4, #1
    1e1c:	d907      	bls.n	1e2e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1e1e:	1c28      	adds	r0, r5, #0
    1e20:	1c21      	adds	r1, r4, #0
    1e22:	4b0a      	ldr	r3, [pc, #40]	; (1e4c <system_gclk_gen_get_hz+0x88>)
    1e24:	4798      	blx	r3
    1e26:	1c05      	adds	r5, r0, #0
    1e28:	e001      	b.n	1e2e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1e2a:	3401      	adds	r4, #1
    1e2c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1e2e:	1c28      	adds	r0, r5, #0
    1e30:	bd70      	pop	{r4, r5, r6, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	40000c00 	.word	0x40000c00
    1e38:	000001a9 	.word	0x000001a9
    1e3c:	40000c04 	.word	0x40000c04
    1e40:	000017d5 	.word	0x000017d5
    1e44:	40000c08 	.word	0x40000c08
    1e48:	000001e9 	.word	0x000001e9
    1e4c:	00004f45 	.word	0x00004f45

00001e50 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1e50:	b510      	push	{r4, lr}
    1e52:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1e54:	4b06      	ldr	r3, [pc, #24]	; (1e70 <system_gclk_chan_enable+0x20>)
    1e56:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e58:	4b06      	ldr	r3, [pc, #24]	; (1e74 <system_gclk_chan_enable+0x24>)
    1e5a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1e5c:	4b06      	ldr	r3, [pc, #24]	; (1e78 <system_gclk_chan_enable+0x28>)
    1e5e:	8859      	ldrh	r1, [r3, #2]
    1e60:	2280      	movs	r2, #128	; 0x80
    1e62:	01d2      	lsls	r2, r2, #7
    1e64:	430a      	orrs	r2, r1
    1e66:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e68:	4b04      	ldr	r3, [pc, #16]	; (1e7c <system_gclk_chan_enable+0x2c>)
    1e6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e6c:	bd10      	pop	{r4, pc}
    1e6e:	46c0      	nop			; (mov r8, r8)
    1e70:	000001a9 	.word	0x000001a9
    1e74:	40000c02 	.word	0x40000c02
    1e78:	40000c00 	.word	0x40000c00
    1e7c:	000001e9 	.word	0x000001e9

00001e80 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e80:	b510      	push	{r4, lr}
    1e82:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1e84:	4b0f      	ldr	r3, [pc, #60]	; (1ec4 <system_gclk_chan_disable+0x44>)
    1e86:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e88:	4b0f      	ldr	r3, [pc, #60]	; (1ec8 <system_gclk_chan_disable+0x48>)
    1e8a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e8c:	4b0f      	ldr	r3, [pc, #60]	; (1ecc <system_gclk_chan_disable+0x4c>)
    1e8e:	8858      	ldrh	r0, [r3, #2]
    1e90:	0500      	lsls	r0, r0, #20
    1e92:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e94:	8859      	ldrh	r1, [r3, #2]
    1e96:	4a0e      	ldr	r2, [pc, #56]	; (1ed0 <system_gclk_chan_disable+0x50>)
    1e98:	400a      	ands	r2, r1
    1e9a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e9c:	8859      	ldrh	r1, [r3, #2]
    1e9e:	4a0d      	ldr	r2, [pc, #52]	; (1ed4 <system_gclk_chan_disable+0x54>)
    1ea0:	400a      	ands	r2, r1
    1ea2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ea4:	1c19      	adds	r1, r3, #0
    1ea6:	2280      	movs	r2, #128	; 0x80
    1ea8:	01d2      	lsls	r2, r2, #7
    1eaa:	884b      	ldrh	r3, [r1, #2]
    1eac:	4213      	tst	r3, r2
    1eae:	d1fc      	bne.n	1eaa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1eb0:	4b06      	ldr	r3, [pc, #24]	; (1ecc <system_gclk_chan_disable+0x4c>)
    1eb2:	0201      	lsls	r1, r0, #8
    1eb4:	8858      	ldrh	r0, [r3, #2]
    1eb6:	4a06      	ldr	r2, [pc, #24]	; (1ed0 <system_gclk_chan_disable+0x50>)
    1eb8:	4002      	ands	r2, r0
    1eba:	430a      	orrs	r2, r1
    1ebc:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ebe:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <system_gclk_chan_disable+0x58>)
    1ec0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ec2:	bd10      	pop	{r4, pc}
    1ec4:	000001a9 	.word	0x000001a9
    1ec8:	40000c02 	.word	0x40000c02
    1ecc:	40000c00 	.word	0x40000c00
    1ed0:	fffff0ff 	.word	0xfffff0ff
    1ed4:	ffffbfff 	.word	0xffffbfff
    1ed8:	000001e9 	.word	0x000001e9

00001edc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1edc:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ede:	780c      	ldrb	r4, [r1, #0]
    1ee0:	0224      	lsls	r4, r4, #8
    1ee2:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1ee4:	4b02      	ldr	r3, [pc, #8]	; (1ef0 <system_gclk_chan_set_config+0x14>)
    1ee6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1ee8:	b2a4      	uxth	r4, r4
    1eea:	4b02      	ldr	r3, [pc, #8]	; (1ef4 <system_gclk_chan_set_config+0x18>)
    1eec:	805c      	strh	r4, [r3, #2]
}
    1eee:	bd10      	pop	{r4, pc}
    1ef0:	00001e81 	.word	0x00001e81
    1ef4:	40000c00 	.word	0x40000c00

00001ef8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1efc:	4b06      	ldr	r3, [pc, #24]	; (1f18 <system_gclk_chan_get_hz+0x20>)
    1efe:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f00:	4b06      	ldr	r3, [pc, #24]	; (1f1c <system_gclk_chan_get_hz+0x24>)
    1f02:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1f04:	4b06      	ldr	r3, [pc, #24]	; (1f20 <system_gclk_chan_get_hz+0x28>)
    1f06:	885c      	ldrh	r4, [r3, #2]
    1f08:	0524      	lsls	r4, r4, #20
    1f0a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f0c:	4b05      	ldr	r3, [pc, #20]	; (1f24 <system_gclk_chan_get_hz+0x2c>)
    1f0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1f10:	1c20      	adds	r0, r4, #0
    1f12:	4b05      	ldr	r3, [pc, #20]	; (1f28 <system_gclk_chan_get_hz+0x30>)
    1f14:	4798      	blx	r3
}
    1f16:	bd10      	pop	{r4, pc}
    1f18:	000001a9 	.word	0x000001a9
    1f1c:	40000c02 	.word	0x40000c02
    1f20:	40000c00 	.word	0x40000c00
    1f24:	000001e9 	.word	0x000001e9
    1f28:	00001dc5 	.word	0x00001dc5

00001f2c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1f2c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1f2e:	78d3      	ldrb	r3, [r2, #3]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d11e      	bne.n	1f72 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1f34:	7813      	ldrb	r3, [r2, #0]
    1f36:	2b80      	cmp	r3, #128	; 0x80
    1f38:	d004      	beq.n	1f44 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1f3a:	061b      	lsls	r3, r3, #24
    1f3c:	2480      	movs	r4, #128	; 0x80
    1f3e:	0264      	lsls	r4, r4, #9
    1f40:	4323      	orrs	r3, r4
    1f42:	e000      	b.n	1f46 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1f44:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1f46:	7854      	ldrb	r4, [r2, #1]
    1f48:	2502      	movs	r5, #2
    1f4a:	43ac      	bics	r4, r5
    1f4c:	d10a      	bne.n	1f64 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1f4e:	7894      	ldrb	r4, [r2, #2]
    1f50:	2c00      	cmp	r4, #0
    1f52:	d103      	bne.n	1f5c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1f54:	2480      	movs	r4, #128	; 0x80
    1f56:	02a4      	lsls	r4, r4, #10
    1f58:	4323      	orrs	r3, r4
    1f5a:	e002      	b.n	1f62 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f5c:	24c0      	movs	r4, #192	; 0xc0
    1f5e:	02e4      	lsls	r4, r4, #11
    1f60:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1f62:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f64:	7854      	ldrb	r4, [r2, #1]
    1f66:	3c01      	subs	r4, #1
    1f68:	2c01      	cmp	r4, #1
    1f6a:	d804      	bhi.n	1f76 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1f6c:	4c11      	ldr	r4, [pc, #68]	; (1fb4 <_system_pinmux_config+0x88>)
    1f6e:	4023      	ands	r3, r4
    1f70:	e001      	b.n	1f76 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1f72:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1f74:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f76:	040d      	lsls	r5, r1, #16
    1f78:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f7a:	24a0      	movs	r4, #160	; 0xa0
    1f7c:	05e4      	lsls	r4, r4, #23
    1f7e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f80:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f82:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f84:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f86:	24d0      	movs	r4, #208	; 0xd0
    1f88:	0624      	lsls	r4, r4, #24
    1f8a:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f8c:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f8e:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f90:	78d4      	ldrb	r4, [r2, #3]
    1f92:	2c00      	cmp	r4, #0
    1f94:	d10c      	bne.n	1fb0 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f96:	035c      	lsls	r4, r3, #13
    1f98:	d505      	bpl.n	1fa6 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f9a:	7893      	ldrb	r3, [r2, #2]
    1f9c:	2b01      	cmp	r3, #1
    1f9e:	d101      	bne.n	1fa4 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1fa0:	6181      	str	r1, [r0, #24]
    1fa2:	e000      	b.n	1fa6 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1fa4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1fa6:	7853      	ldrb	r3, [r2, #1]
    1fa8:	3b01      	subs	r3, #1
    1faa:	2b01      	cmp	r3, #1
    1fac:	d800      	bhi.n	1fb0 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1fae:	6081      	str	r1, [r0, #8]
		}
	}
}
    1fb0:	bd30      	pop	{r4, r5, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	fffbffff 	.word	0xfffbffff

00001fb8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1fb8:	b508      	push	{r3, lr}
    1fba:	1c03      	adds	r3, r0, #0
    1fbc:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1fbe:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1fc0:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1fc2:	2900      	cmp	r1, #0
    1fc4:	d103      	bne.n	1fce <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1fc6:	0958      	lsrs	r0, r3, #5
    1fc8:	01c0      	lsls	r0, r0, #7
    1fca:	4904      	ldr	r1, [pc, #16]	; (1fdc <system_pinmux_pin_set_config+0x24>)
    1fcc:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1fce:	211f      	movs	r1, #31
    1fd0:	400b      	ands	r3, r1
    1fd2:	2101      	movs	r1, #1
    1fd4:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1fd6:	4b02      	ldr	r3, [pc, #8]	; (1fe0 <system_pinmux_pin_set_config+0x28>)
    1fd8:	4798      	blx	r3
}
    1fda:	bd08      	pop	{r3, pc}
    1fdc:	41004400 	.word	0x41004400
    1fe0:	00001f2d 	.word	0x00001f2d

00001fe4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1fe4:	4770      	bx	lr
    1fe6:	46c0      	nop			; (mov r8, r8)

00001fe8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1fe8:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1fea:	4b04      	ldr	r3, [pc, #16]	; (1ffc <system_init+0x14>)
    1fec:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1fee:	4b04      	ldr	r3, [pc, #16]	; (2000 <STACK_SIZE>)
    1ff0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1ff2:	4b04      	ldr	r3, [pc, #16]	; (2004 <STACK_SIZE+0x4>)
    1ff4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1ff6:	4b04      	ldr	r3, [pc, #16]	; (2008 <STACK_SIZE+0x8>)
    1ff8:	4798      	blx	r3
}
    1ffa:	bd08      	pop	{r3, pc}
    1ffc:	00001ae1 	.word	0x00001ae1
    2000:	00000219 	.word	0x00000219
    2004:	00001fe5 	.word	0x00001fe5
    2008:	00000919 	.word	0x00000919

0000200c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    200c:	1c93      	adds	r3, r2, #2
    200e:	009b      	lsls	r3, r3, #2
    2010:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2012:	2a02      	cmp	r2, #2
    2014:	d104      	bne.n	2020 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2016:	7e02      	ldrb	r2, [r0, #24]
    2018:	2310      	movs	r3, #16
    201a:	4313      	orrs	r3, r2
    201c:	7603      	strb	r3, [r0, #24]
    201e:	e00c      	b.n	203a <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2020:	2a03      	cmp	r2, #3
    2022:	d104      	bne.n	202e <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2024:	7e02      	ldrb	r2, [r0, #24]
    2026:	2320      	movs	r3, #32
    2028:	4313      	orrs	r3, r2
    202a:	7603      	strb	r3, [r0, #24]
    202c:	e005      	b.n	203a <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    202e:	2301      	movs	r3, #1
    2030:	4093      	lsls	r3, r2
    2032:	1c1a      	adds	r2, r3, #0
    2034:	7e03      	ldrb	r3, [r0, #24]
    2036:	431a      	orrs	r2, r3
    2038:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
    203a:	2000      	movs	r0, #0
    203c:	4770      	bx	lr
    203e:	46c0      	nop			; (mov r8, r8)

00002040 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2040:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2042:	0080      	lsls	r0, r0, #2
    2044:	4b14      	ldr	r3, [pc, #80]	; (2098 <_tc_interrupt_handler+0x58>)
    2046:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2048:	6822      	ldr	r2, [r4, #0]
    204a:	7b95      	ldrb	r5, [r2, #14]
    204c:	7e23      	ldrb	r3, [r4, #24]
    204e:	401d      	ands	r5, r3
    2050:	7e63      	ldrb	r3, [r4, #25]
    2052:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2054:	07eb      	lsls	r3, r5, #31
    2056:	d505      	bpl.n	2064 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2058:	1c20      	adds	r0, r4, #0
    205a:	68a2      	ldr	r2, [r4, #8]
    205c:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    205e:	2301      	movs	r3, #1
    2060:	6822      	ldr	r2, [r4, #0]
    2062:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2064:	07ab      	lsls	r3, r5, #30
    2066:	d505      	bpl.n	2074 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    2068:	1c20      	adds	r0, r4, #0
    206a:	68e2      	ldr	r2, [r4, #12]
    206c:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    206e:	2302      	movs	r3, #2
    2070:	6822      	ldr	r2, [r4, #0]
    2072:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2074:	06eb      	lsls	r3, r5, #27
    2076:	d505      	bpl.n	2084 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2078:	1c20      	adds	r0, r4, #0
    207a:	6922      	ldr	r2, [r4, #16]
    207c:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    207e:	2310      	movs	r3, #16
    2080:	6822      	ldr	r2, [r4, #0]
    2082:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2084:	06ab      	lsls	r3, r5, #26
    2086:	d505      	bpl.n	2094 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2088:	1c20      	adds	r0, r4, #0
    208a:	6962      	ldr	r2, [r4, #20]
    208c:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    208e:	6823      	ldr	r3, [r4, #0]
    2090:	2220      	movs	r2, #32
    2092:	739a      	strb	r2, [r3, #14]
	}
}
    2094:	bd38      	pop	{r3, r4, r5, pc}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	200008c4 	.word	0x200008c4

0000209c <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    209c:	b508      	push	{r3, lr}
    209e:	2000      	movs	r0, #0
    20a0:	4b01      	ldr	r3, [pc, #4]	; (20a8 <TC3_Handler+0xc>)
    20a2:	4798      	blx	r3
    20a4:	bd08      	pop	{r3, pc}
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	00002041 	.word	0x00002041

000020ac <TC4_Handler>:
    20ac:	b508      	push	{r3, lr}
    20ae:	2001      	movs	r0, #1
    20b0:	4b01      	ldr	r3, [pc, #4]	; (20b8 <TC4_Handler+0xc>)
    20b2:	4798      	blx	r3
    20b4:	bd08      	pop	{r3, pc}
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	00002041 	.word	0x00002041

000020bc <TC5_Handler>:
    20bc:	b508      	push	{r3, lr}
    20be:	2002      	movs	r0, #2
    20c0:	4b01      	ldr	r3, [pc, #4]	; (20c8 <TC5_Handler+0xc>)
    20c2:	4798      	blx	r3
    20c4:	bd08      	pop	{r3, pc}
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	00002041 	.word	0x00002041

000020cc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    20cc:	b570      	push	{r4, r5, r6, lr}
    20ce:	b084      	sub	sp, #16
    20d0:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    20d2:	ab01      	add	r3, sp, #4
    20d4:	4a0a      	ldr	r2, [pc, #40]	; (2100 <_tc_get_inst_index+0x34>)
    20d6:	ca70      	ldmia	r2!, {r4, r5, r6}
    20d8:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    20da:	9b01      	ldr	r3, [sp, #4]
    20dc:	4283      	cmp	r3, r0
    20de:	d00a      	beq.n	20f6 <_tc_get_inst_index+0x2a>
    20e0:	9c02      	ldr	r4, [sp, #8]
    20e2:	4284      	cmp	r4, r0
    20e4:	d005      	beq.n	20f2 <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    20e6:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    20e8:	9d03      	ldr	r5, [sp, #12]
    20ea:	428d      	cmp	r5, r1
    20ec:	d105      	bne.n	20fa <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    20ee:	2002      	movs	r0, #2
    20f0:	e002      	b.n	20f8 <_tc_get_inst_index+0x2c>
    20f2:	2001      	movs	r0, #1
    20f4:	e000      	b.n	20f8 <_tc_get_inst_index+0x2c>
    20f6:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
    20f8:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    20fa:	b004      	add	sp, #16
    20fc:	bd70      	pop	{r4, r5, r6, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	00007ee4 	.word	0x00007ee4

00002104 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2104:	b5f0      	push	{r4, r5, r6, r7, lr}
    2106:	464f      	mov	r7, r9
    2108:	4646      	mov	r6, r8
    210a:	b4c0      	push	{r6, r7}
    210c:	b087      	sub	sp, #28
    210e:	1c04      	adds	r4, r0, #0
    2110:	1c0d      	adds	r5, r1, #0
    2112:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2114:	1c08      	adds	r0, r1, #0
    2116:	4b90      	ldr	r3, [pc, #576]	; (2358 <tc_init+0x254>)
    2118:	4798      	blx	r3
    211a:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    211c:	4f8f      	ldr	r7, [pc, #572]	; (235c <tc_init+0x258>)
    211e:	1c39      	adds	r1, r7, #0
    2120:	310c      	adds	r1, #12
    2122:	a805      	add	r0, sp, #20
    2124:	2203      	movs	r2, #3
    2126:	4e8e      	ldr	r6, [pc, #568]	; (2360 <tc_init+0x25c>)
    2128:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    212a:	1c39      	adds	r1, r7, #0
    212c:	3110      	adds	r1, #16
    212e:	a803      	add	r0, sp, #12
    2130:	2206      	movs	r2, #6
    2132:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2134:	2300      	movs	r3, #0
    2136:	60a3      	str	r3, [r4, #8]
    2138:	60e3      	str	r3, [r4, #12]
    213a:	6123      	str	r3, [r4, #16]
    213c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    213e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2140:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2142:	4648      	mov	r0, r9
    2144:	0082      	lsls	r2, r0, #2
    2146:	4b87      	ldr	r3, [pc, #540]	; (2364 <tc_init+0x260>)
    2148:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    214a:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    214c:	4641      	mov	r1, r8
    214e:	788b      	ldrb	r3, [r1, #2]
    2150:	2b08      	cmp	r3, #8
    2152:	d104      	bne.n	215e <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2154:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2156:	464a      	mov	r2, r9
    2158:	07d2      	lsls	r2, r2, #31
    215a:	d400      	bmi.n	215e <tc_init+0x5a>
    215c:	e0f6      	b.n	234c <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    215e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2160:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2162:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2164:	07d9      	lsls	r1, r3, #31
    2166:	d500      	bpl.n	216a <tc_init+0x66>
    2168:	e0f0      	b.n	234c <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    216a:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    216c:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    216e:	06da      	lsls	r2, r3, #27
    2170:	d500      	bpl.n	2174 <tc_init+0x70>
    2172:	e0eb      	b.n	234c <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2174:	882b      	ldrh	r3, [r5, #0]
    2176:	0799      	lsls	r1, r3, #30
    2178:	d500      	bpl.n	217c <tc_init+0x78>
    217a:	e0e7      	b.n	234c <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    217c:	4642      	mov	r2, r8
    217e:	7c13      	ldrb	r3, [r2, #16]
    2180:	2b00      	cmp	r3, #0
    2182:	d00c      	beq.n	219e <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2184:	a902      	add	r1, sp, #8
    2186:	2301      	movs	r3, #1
    2188:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    218a:	2200      	movs	r2, #0
    218c:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    218e:	4640      	mov	r0, r8
    2190:	6980      	ldr	r0, [r0, #24]
    2192:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2194:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2196:	4642      	mov	r2, r8
    2198:	7d10      	ldrb	r0, [r2, #20]
    219a:	4b73      	ldr	r3, [pc, #460]	; (2368 <tc_init+0x264>)
    219c:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    219e:	4640      	mov	r0, r8
    21a0:	7f03      	ldrb	r3, [r0, #28]
    21a2:	2b00      	cmp	r3, #0
    21a4:	d00b      	beq.n	21be <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    21a6:	a902      	add	r1, sp, #8
    21a8:	2301      	movs	r3, #1
    21aa:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    21ac:	2200      	movs	r2, #0
    21ae:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    21b0:	6a42      	ldr	r2, [r0, #36]	; 0x24
    21b2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    21b4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    21b6:	6a03      	ldr	r3, [r0, #32]
    21b8:	b2d8      	uxtb	r0, r3
    21ba:	4b6b      	ldr	r3, [pc, #428]	; (2368 <tc_init+0x264>)
    21bc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    21be:	4b6b      	ldr	r3, [pc, #428]	; (236c <tc_init+0x268>)
    21c0:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    21c2:	4648      	mov	r0, r9
    21c4:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    21c6:	a803      	add	r0, sp, #12
    21c8:	5a12      	ldrh	r2, [r2, r0]
    21ca:	430a      	orrs	r2, r1
    21cc:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    21ce:	4641      	mov	r1, r8
    21d0:	788b      	ldrb	r3, [r1, #2]
    21d2:	2b08      	cmp	r3, #8
    21d4:	d108      	bne.n	21e8 <tc_init+0xe4>
    21d6:	4b65      	ldr	r3, [pc, #404]	; (236c <tc_init+0x268>)
    21d8:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    21da:	4648      	mov	r0, r9
    21dc:	3001      	adds	r0, #1
    21de:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    21e0:	a903      	add	r1, sp, #12
    21e2:	5a41      	ldrh	r1, [r0, r1]
    21e4:	430a      	orrs	r2, r1
    21e6:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    21e8:	a901      	add	r1, sp, #4
    21ea:	4642      	mov	r2, r8
    21ec:	7813      	ldrb	r3, [r2, #0]
    21ee:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    21f0:	ab05      	add	r3, sp, #20
    21f2:	4648      	mov	r0, r9
    21f4:	5c1e      	ldrb	r6, [r3, r0]
    21f6:	1c30      	adds	r0, r6, #0
    21f8:	4b5d      	ldr	r3, [pc, #372]	; (2370 <tc_init+0x26c>)
    21fa:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    21fc:	1c30      	adds	r0, r6, #0
    21fe:	4b5d      	ldr	r3, [pc, #372]	; (2374 <tc_init+0x270>)
    2200:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
    2202:	4641      	mov	r1, r8
    2204:	8888      	ldrh	r0, [r1, #4]
    2206:	890b      	ldrh	r3, [r1, #8]
    2208:	4303      	orrs	r3, r0
    220a:	7988      	ldrb	r0, [r1, #6]
    220c:	788a      	ldrb	r2, [r1, #2]
    220e:	4310      	orrs	r0, r2
    2210:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    2212:	784b      	ldrb	r3, [r1, #1]
    2214:	2b00      	cmp	r3, #0
    2216:	d002      	beq.n	221e <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2218:	2380      	movs	r3, #128	; 0x80
    221a:	011b      	lsls	r3, r3, #4
    221c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    221e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2220:	227f      	movs	r2, #127	; 0x7f
    2222:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2224:	4393      	bics	r3, r2
    2226:	d1fc      	bne.n	2222 <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2228:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    222a:	4642      	mov	r2, r8
    222c:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    222e:	1e43      	subs	r3, r0, #1
    2230:	4198      	sbcs	r0, r3
    2232:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
    2234:	7b93      	ldrb	r3, [r2, #14]
    2236:	2b00      	cmp	r3, #0
    2238:	d001      	beq.n	223e <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    223a:	2301      	movs	r3, #1
    223c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    223e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2240:	227f      	movs	r2, #127	; 0x7f
    2242:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    2244:	4393      	bics	r3, r2
    2246:	d1fc      	bne.n	2242 <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2248:	23ff      	movs	r3, #255	; 0xff
    224a:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    224c:	2800      	cmp	r0, #0
    224e:	d005      	beq.n	225c <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2250:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2252:	227f      	movs	r2, #127	; 0x7f
    2254:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    2256:	4393      	bics	r3, r2
    2258:	d1fc      	bne.n	2254 <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    225a:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    225c:	4643      	mov	r3, r8
    225e:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    2260:	7adb      	ldrb	r3, [r3, #11]
    2262:	2b00      	cmp	r3, #0
    2264:	d001      	beq.n	226a <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2266:	2310      	movs	r3, #16
    2268:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    226a:	4641      	mov	r1, r8
    226c:	7b0b      	ldrb	r3, [r1, #12]
    226e:	2b00      	cmp	r3, #0
    2270:	d001      	beq.n	2276 <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2272:	2320      	movs	r3, #32
    2274:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2276:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2278:	227f      	movs	r2, #127	; 0x7f
    227a:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    227c:	4393      	bics	r3, r2
    227e:	d1fc      	bne.n	227a <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2280:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2282:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2284:	217f      	movs	r1, #127	; 0x7f
    2286:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2288:	438b      	bics	r3, r1
    228a:	d1fc      	bne.n	2286 <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    228c:	7923      	ldrb	r3, [r4, #4]
    228e:	2b04      	cmp	r3, #4
    2290:	d005      	beq.n	229e <tc_init+0x19a>
    2292:	2b08      	cmp	r3, #8
    2294:	d041      	beq.n	231a <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    2296:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2298:	2b00      	cmp	r3, #0
    229a:	d157      	bne.n	234c <tc_init+0x248>
    229c:	e024      	b.n	22e8 <tc_init+0x1e4>
    229e:	217f      	movs	r1, #127	; 0x7f
    22a0:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    22a2:	438b      	bics	r3, r1
    22a4:	d1fc      	bne.n	22a0 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    22a6:	2328      	movs	r3, #40	; 0x28
    22a8:	4642      	mov	r2, r8
    22aa:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    22ac:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    22ae:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    22b0:	227f      	movs	r2, #127	; 0x7f
    22b2:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    22b4:	4393      	bics	r3, r2
    22b6:	d1fc      	bne.n	22b2 <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    22b8:	2329      	movs	r3, #41	; 0x29
    22ba:	4640      	mov	r0, r8
    22bc:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    22be:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    22c0:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    22c2:	227f      	movs	r2, #127	; 0x7f
    22c4:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    22c6:	4393      	bics	r3, r2
    22c8:	d1fc      	bne.n	22c4 <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    22ca:	232a      	movs	r3, #42	; 0x2a
    22cc:	4641      	mov	r1, r8
    22ce:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    22d0:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    22d2:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    22d4:	227f      	movs	r2, #127	; 0x7f
    22d6:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    22d8:	4393      	bics	r3, r2
    22da:	d1fc      	bne.n	22d6 <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    22dc:	232b      	movs	r3, #43	; 0x2b
    22de:	4642      	mov	r2, r8
    22e0:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    22e2:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    22e4:	2000      	movs	r0, #0
    22e6:	e031      	b.n	234c <tc_init+0x248>
    22e8:	217f      	movs	r1, #127	; 0x7f
    22ea:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    22ec:	438b      	bics	r3, r1
    22ee:	d1fc      	bne.n	22ea <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    22f0:	4640      	mov	r0, r8
    22f2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    22f4:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    22f6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    22f8:	227f      	movs	r2, #127	; 0x7f
    22fa:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    22fc:	4393      	bics	r3, r2
    22fe:	d1fc      	bne.n	22fa <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    2300:	4641      	mov	r1, r8
    2302:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    2304:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2306:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2308:	227f      	movs	r2, #127	; 0x7f
    230a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    230c:	4393      	bics	r3, r2
    230e:	d1fc      	bne.n	230a <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    2310:	4642      	mov	r2, r8
    2312:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    2314:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    2316:	2000      	movs	r0, #0
    2318:	e018      	b.n	234c <tc_init+0x248>
    231a:	217f      	movs	r1, #127	; 0x7f
    231c:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    231e:	438b      	bics	r3, r1
    2320:	d1fc      	bne.n	231c <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2322:	4643      	mov	r3, r8
    2324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2326:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2328:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    232a:	227f      	movs	r2, #127	; 0x7f
    232c:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
    232e:	4393      	bics	r3, r2
    2330:	d1fc      	bne.n	232c <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    2332:	4640      	mov	r0, r8
    2334:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    2336:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2338:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    233a:	227f      	movs	r2, #127	; 0x7f
    233c:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    233e:	4393      	bics	r3, r2
    2340:	d1fc      	bne.n	233c <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    2342:	4641      	mov	r1, r8
    2344:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    2346:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    2348:	2000      	movs	r0, #0
    234a:	e7ff      	b.n	234c <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    234c:	b007      	add	sp, #28
    234e:	bc0c      	pop	{r2, r3}
    2350:	4690      	mov	r8, r2
    2352:	4699      	mov	r9, r3
    2354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	000020cd 	.word	0x000020cd
    235c:	00007ee4 	.word	0x00007ee4
    2360:	00006db9 	.word	0x00006db9
    2364:	200008c4 	.word	0x200008c4
    2368:	00001fb9 	.word	0x00001fb9
    236c:	40000400 	.word	0x40000400
    2370:	00001edd 	.word	0x00001edd
    2374:	00001e51 	.word	0x00001e51

00002378 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2378:	6802      	ldr	r2, [r0, #0]
    237a:	217f      	movs	r1, #127	; 0x7f
    237c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    237e:	438b      	bics	r3, r1
    2380:	d1fc      	bne.n	237c <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    2382:	7903      	ldrb	r3, [r0, #4]
    2384:	2b04      	cmp	r3, #4
    2386:	d005      	beq.n	2394 <tc_get_count_value+0x1c>
    2388:	2b08      	cmp	r3, #8
    238a:	d009      	beq.n	23a0 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    238c:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    238e:	2b00      	cmp	r3, #0
    2390:	d108      	bne.n	23a4 <tc_get_count_value+0x2c>
    2392:	e002      	b.n	239a <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    2394:	7c10      	ldrb	r0, [r2, #16]
    2396:	b2c0      	uxtb	r0, r0
    2398:	e004      	b.n	23a4 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    239a:	8a10      	ldrh	r0, [r2, #16]
    239c:	b280      	uxth	r0, r0
    239e:	e001      	b.n	23a4 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    23a0:	6910      	ldr	r0, [r2, #16]
    23a2:	e7ff      	b.n	23a4 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
    23a4:	4770      	bx	lr
    23a6:	46c0      	nop			; (mov r8, r8)

000023a8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    23a8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    23aa:	6804      	ldr	r4, [r0, #0]
    23ac:	257f      	movs	r5, #127	; 0x7f
    23ae:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    23b0:	43ab      	bics	r3, r5
    23b2:	d1fc      	bne.n	23ae <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    23b4:	7903      	ldrb	r3, [r0, #4]
    23b6:	2b04      	cmp	r3, #4
    23b8:	d005      	beq.n	23c6 <tc_set_compare_value+0x1e>
    23ba:	2b08      	cmp	r3, #8
    23bc:	d014      	beq.n	23e8 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    23be:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    23c0:	2b00      	cmp	r3, #0
    23c2:	d119      	bne.n	23f8 <tc_set_compare_value+0x50>
    23c4:	e007      	b.n	23d6 <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    23c6:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    23c8:	2901      	cmp	r1, #1
    23ca:	d815      	bhi.n	23f8 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
    23cc:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
    23ce:	1861      	adds	r1, r4, r1
    23d0:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
    23d2:	2000      	movs	r0, #0
    23d4:	e010      	b.n	23f8 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    23d6:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    23d8:	2901      	cmp	r1, #1
    23da:	d80d      	bhi.n	23f8 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
    23dc:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
    23de:	310c      	adds	r1, #12
    23e0:	0049      	lsls	r1, r1, #1
    23e2:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
    23e4:	2000      	movs	r0, #0
    23e6:	e007      	b.n	23f8 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    23e8:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    23ea:	2901      	cmp	r1, #1
    23ec:	d804      	bhi.n	23f8 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
    23ee:	3106      	adds	r1, #6
    23f0:	0089      	lsls	r1, r1, #2
    23f2:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
    23f4:	2000      	movs	r0, #0
    23f6:	e7ff      	b.n	23f8 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
    23f8:	bd30      	pop	{r4, r5, pc}
    23fa:	46c0      	nop			; (mov r8, r8)

000023fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    23fc:	e7fe      	b.n	23fc <Dummy_Handler>
    23fe:	46c0      	nop			; (mov r8, r8)

00002400 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2400:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    2402:	4b1c      	ldr	r3, [pc, #112]	; (2474 <Reset_Handler+0x74>)
    2404:	4a1c      	ldr	r2, [pc, #112]	; (2478 <Reset_Handler+0x78>)
    2406:	429a      	cmp	r2, r3
    2408:	d003      	beq.n	2412 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    240a:	4b1c      	ldr	r3, [pc, #112]	; (247c <Reset_Handler+0x7c>)
    240c:	4a19      	ldr	r2, [pc, #100]	; (2474 <Reset_Handler+0x74>)
    240e:	429a      	cmp	r2, r3
    2410:	d304      	bcc.n	241c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2412:	4b1b      	ldr	r3, [pc, #108]	; (2480 <Reset_Handler+0x80>)
    2414:	4a1b      	ldr	r2, [pc, #108]	; (2484 <Reset_Handler+0x84>)
    2416:	429a      	cmp	r2, r3
    2418:	d310      	bcc.n	243c <Reset_Handler+0x3c>
    241a:	e01b      	b.n	2454 <Reset_Handler+0x54>
    241c:	4b1a      	ldr	r3, [pc, #104]	; (2488 <Reset_Handler+0x88>)
    241e:	4817      	ldr	r0, [pc, #92]	; (247c <Reset_Handler+0x7c>)
    2420:	3003      	adds	r0, #3
    2422:	1ac0      	subs	r0, r0, r3
    2424:	0880      	lsrs	r0, r0, #2
    2426:	3001      	adds	r0, #1
    2428:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    242a:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    242c:	4911      	ldr	r1, [pc, #68]	; (2474 <Reset_Handler+0x74>)
    242e:	4a12      	ldr	r2, [pc, #72]	; (2478 <Reset_Handler+0x78>)
    2430:	58d4      	ldr	r4, [r2, r3]
    2432:	50cc      	str	r4, [r1, r3]
    2434:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2436:	4283      	cmp	r3, r0
    2438:	d1fa      	bne.n	2430 <Reset_Handler+0x30>
    243a:	e7ea      	b.n	2412 <Reset_Handler+0x12>
    243c:	4b11      	ldr	r3, [pc, #68]	; (2484 <Reset_Handler+0x84>)
    243e:	1d1a      	adds	r2, r3, #4
    2440:	490f      	ldr	r1, [pc, #60]	; (2480 <Reset_Handler+0x80>)
    2442:	3103      	adds	r1, #3
    2444:	1a89      	subs	r1, r1, r2
    2446:	0889      	lsrs	r1, r1, #2
    2448:	0089      	lsls	r1, r1, #2
    244a:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    244c:	2100      	movs	r1, #0
    244e:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2450:	4293      	cmp	r3, r2
    2452:	d1fc      	bne.n	244e <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2454:	4b0d      	ldr	r3, [pc, #52]	; (248c <Reset_Handler+0x8c>)
    2456:	217f      	movs	r1, #127	; 0x7f
    2458:	4a0d      	ldr	r2, [pc, #52]	; (2490 <Reset_Handler+0x90>)
    245a:	438a      	bics	r2, r1
    245c:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    245e:	4b0d      	ldr	r3, [pc, #52]	; (2494 <Reset_Handler+0x94>)
    2460:	6859      	ldr	r1, [r3, #4]
    2462:	2280      	movs	r2, #128	; 0x80
    2464:	430a      	orrs	r2, r1
    2466:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    2468:	4b0b      	ldr	r3, [pc, #44]	; (2498 <Reset_Handler+0x98>)
    246a:	4798      	blx	r3

        /* Branch to main function */
        main();
    246c:	4b0b      	ldr	r3, [pc, #44]	; (249c <Reset_Handler+0x9c>)
    246e:	4798      	blx	r3
    2470:	e7fe      	b.n	2470 <Reset_Handler+0x70>
    2472:	46c0      	nop			; (mov r8, r8)
    2474:	20000000 	.word	0x20000000
    2478:	000080b0 	.word	0x000080b0
    247c:	20000070 	.word	0x20000070
    2480:	20000a04 	.word	0x20000a04
    2484:	20000070 	.word	0x20000070
    2488:	20000004 	.word	0x20000004
    248c:	e000ed00 	.word	0xe000ed00
    2490:	00000000 	.word	0x00000000
    2494:	41004000 	.word	0x41004000
    2498:	00006d6d 	.word	0x00006d6d
    249c:	00004cb9 	.word	0x00004cb9

000024a0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    24a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24a2:	4647      	mov	r7, r8
    24a4:	b480      	push	{r7}
    24a6:	1c0c      	adds	r4, r1, #0
    24a8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    24aa:	2800      	cmp	r0, #0
    24ac:	d10c      	bne.n	24c8 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    24ae:	2a00      	cmp	r2, #0
    24b0:	dd0d      	ble.n	24ce <_read+0x2e>
    24b2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    24b4:	4e09      	ldr	r6, [pc, #36]	; (24dc <_read+0x3c>)
    24b6:	4d0a      	ldr	r5, [pc, #40]	; (24e0 <_read+0x40>)
    24b8:	6830      	ldr	r0, [r6, #0]
    24ba:	1c21      	adds	r1, r4, #0
    24bc:	682b      	ldr	r3, [r5, #0]
    24be:	4798      	blx	r3
		ptr++;
    24c0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    24c2:	42bc      	cmp	r4, r7
    24c4:	d1f8      	bne.n	24b8 <_read+0x18>
    24c6:	e004      	b.n	24d2 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    24c8:	2001      	movs	r0, #1
    24ca:	4240      	negs	r0, r0
    24cc:	e002      	b.n	24d4 <_read+0x34>
	}

	for (; len > 0; --len) {
    24ce:	2000      	movs	r0, #0
    24d0:	e000      	b.n	24d4 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    24d2:	4640      	mov	r0, r8
	}
	return nChars;
}
    24d4:	bc04      	pop	{r2}
    24d6:	4690      	mov	r8, r2
    24d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	200008d8 	.word	0x200008d8
    24e0:	200008d0 	.word	0x200008d0

000024e4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    24e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24e6:	4647      	mov	r7, r8
    24e8:	b480      	push	{r7}
    24ea:	1c0e      	adds	r6, r1, #0
    24ec:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    24ee:	3801      	subs	r0, #1
    24f0:	2802      	cmp	r0, #2
    24f2:	d810      	bhi.n	2516 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    24f4:	2a00      	cmp	r2, #0
    24f6:	d011      	beq.n	251c <_write+0x38>
    24f8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    24fa:	4b0d      	ldr	r3, [pc, #52]	; (2530 <_write+0x4c>)
    24fc:	4698      	mov	r8, r3
    24fe:	4f0d      	ldr	r7, [pc, #52]	; (2534 <_write+0x50>)
    2500:	4643      	mov	r3, r8
    2502:	6818      	ldr	r0, [r3, #0]
    2504:	5d31      	ldrb	r1, [r6, r4]
    2506:	683b      	ldr	r3, [r7, #0]
    2508:	4798      	blx	r3
    250a:	2800      	cmp	r0, #0
    250c:	db08      	blt.n	2520 <_write+0x3c>
			return -1;
		}
		++nChars;
    250e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    2510:	42a5      	cmp	r5, r4
    2512:	d1f5      	bne.n	2500 <_write+0x1c>
    2514:	e007      	b.n	2526 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    2516:	2001      	movs	r0, #1
    2518:	4240      	negs	r0, r0
    251a:	e005      	b.n	2528 <_write+0x44>
	}

	for (; len != 0; --len) {
    251c:	2000      	movs	r0, #0
    251e:	e003      	b.n	2528 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    2520:	2001      	movs	r0, #1
    2522:	4240      	negs	r0, r0
    2524:	e000      	b.n	2528 <_write+0x44>
		}
		++nChars;
    2526:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    2528:	bc04      	pop	{r2}
    252a:	4690      	mov	r8, r2
    252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	200008d8 	.word	0x200008d8
    2534:	200008d4 	.word	0x200008d4

00002538 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2538:	4b06      	ldr	r3, [pc, #24]	; (2554 <_sbrk+0x1c>)
    253a:	681b      	ldr	r3, [r3, #0]
    253c:	2b00      	cmp	r3, #0
    253e:	d102      	bne.n	2546 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    2540:	4a05      	ldr	r2, [pc, #20]	; (2558 <_sbrk+0x20>)
    2542:	4b04      	ldr	r3, [pc, #16]	; (2554 <_sbrk+0x1c>)
    2544:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2546:	4a03      	ldr	r2, [pc, #12]	; (2554 <_sbrk+0x1c>)
    2548:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    254a:	1818      	adds	r0, r3, r0
    254c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    254e:	1c18      	adds	r0, r3, #0
    2550:	4770      	bx	lr
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	200000cc 	.word	0x200000cc
    2558:	20002a08 	.word	0x20002a08

0000255c <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    255c:	2001      	movs	r0, #1
}
    255e:	4240      	negs	r0, r0
    2560:	4770      	bx	lr
    2562:	46c0      	nop			; (mov r8, r8)

00002564 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2564:	2380      	movs	r3, #128	; 0x80
    2566:	019b      	lsls	r3, r3, #6
    2568:	604b      	str	r3, [r1, #4]

	return 0;
}
    256a:	2000      	movs	r0, #0
    256c:	4770      	bx	lr
    256e:	46c0      	nop			; (mov r8, r8)

00002570 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2570:	2001      	movs	r0, #1
    2572:	4770      	bx	lr

00002574 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2574:	2000      	movs	r0, #0
    2576:	4770      	bx	lr

00002578 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2578:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    257a:	490d      	ldr	r1, [pc, #52]	; (25b0 <NWK_Init+0x38>)
    257c:	2300      	movs	r3, #0
    257e:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    2580:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    2582:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    2584:	2258      	movs	r2, #88	; 0x58
    2586:	528b      	strh	r3, [r1, r2]
    2588:	1c0b      	adds	r3, r1, #0
    258a:	3308      	adds	r3, #8
    258c:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    258e:	2200      	movs	r2, #0
    2590:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2592:	428b      	cmp	r3, r1
    2594:	d1fc      	bne.n	2590 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    2596:	4b07      	ldr	r3, [pc, #28]	; (25b4 <NWK_Init+0x3c>)
    2598:	4798      	blx	r3
	nwkRxInit();
    259a:	4b07      	ldr	r3, [pc, #28]	; (25b8 <NWK_Init+0x40>)
    259c:	4798      	blx	r3
	nwkFrameInit();
    259e:	4b07      	ldr	r3, [pc, #28]	; (25bc <NWK_Init+0x44>)
    25a0:	4798      	blx	r3
	nwkDataReqInit();
    25a2:	4b07      	ldr	r3, [pc, #28]	; (25c0 <NWK_Init+0x48>)
    25a4:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    25a6:	4b07      	ldr	r3, [pc, #28]	; (25c4 <NWK_Init+0x4c>)
    25a8:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    25aa:	4b07      	ldr	r3, [pc, #28]	; (25c8 <NWK_Init+0x50>)
    25ac:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    25ae:	bd08      	pop	{r3, pc}
    25b0:	200008dc 	.word	0x200008dc
    25b4:	00003455 	.word	0x00003455
    25b8:	00002cc1 	.word	0x00002cc1
    25bc:	000027ed 	.word	0x000027ed
    25c0:	00002669 	.word	0x00002669
    25c4:	000028e1 	.word	0x000028e1
    25c8:	00003121 	.word	0x00003121

000025cc <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    25cc:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    25ce:	4b02      	ldr	r3, [pc, #8]	; (25d8 <NWK_SetAddr+0xc>)
    25d0:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    25d2:	4b02      	ldr	r3, [pc, #8]	; (25dc <NWK_SetAddr+0x10>)
    25d4:	4798      	blx	r3
}
    25d6:	bd08      	pop	{r3, pc}
    25d8:	200008dc 	.word	0x200008dc
    25dc:	0000387d 	.word	0x0000387d

000025e0 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    25e0:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    25e2:	4b02      	ldr	r3, [pc, #8]	; (25ec <NWK_SetPanId+0xc>)
    25e4:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    25e6:	4b02      	ldr	r3, [pc, #8]	; (25f0 <NWK_SetPanId+0x10>)
    25e8:	4798      	blx	r3
}
    25ea:	bd08      	pop	{r3, pc}
    25ec:	200008dc 	.word	0x200008dc
    25f0:	0000385d 	.word	0x0000385d

000025f4 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    25f4:	3002      	adds	r0, #2
    25f6:	0080      	lsls	r0, r0, #2
    25f8:	4b01      	ldr	r3, [pc, #4]	; (2600 <NWK_OpenEndpoint+0xc>)
    25fa:	50c1      	str	r1, [r0, r3]
}
    25fc:	4770      	bx	lr
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	200008dc 	.word	0x200008dc

00002604 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    2604:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    2606:	4b04      	ldr	r3, [pc, #16]	; (2618 <NWK_TaskHandler+0x14>)
    2608:	4798      	blx	r3
	nwkTxTaskHandler();
    260a:	4b04      	ldr	r3, [pc, #16]	; (261c <NWK_TaskHandler+0x18>)
    260c:	4798      	blx	r3
	nwkDataReqTaskHandler();
    260e:	4b04      	ldr	r3, [pc, #16]	; (2620 <NWK_TaskHandler+0x1c>)
    2610:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    2612:	4b04      	ldr	r3, [pc, #16]	; (2624 <NWK_TaskHandler+0x20>)
    2614:	4798      	blx	r3
#endif
}
    2616:	bd08      	pop	{r3, pc}
    2618:	00002d5d 	.word	0x00002d5d
    261c:	00003659 	.word	0x00003659
    2620:	000026a9 	.word	0x000026a9
    2624:	00003215 	.word	0x00003215

00002628 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    2628:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    262a:	4b0d      	ldr	r3, [pc, #52]	; (2660 <nwkDataReqTxConf+0x38>)
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	2b00      	cmp	r3, #0
    2630:	d012      	beq.n	2658 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    2632:	685a      	ldr	r2, [r3, #4]
    2634:	4282      	cmp	r2, r0
    2636:	d10c      	bne.n	2652 <nwkDataReqTxConf+0x2a>
    2638:	e002      	b.n	2640 <nwkDataReqTxConf+0x18>
    263a:	685a      	ldr	r2, [r3, #4]
    263c:	4282      	cmp	r2, r0
    263e:	d108      	bne.n	2652 <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    2640:	2285      	movs	r2, #133	; 0x85
    2642:	5c82      	ldrb	r2, [r0, r2]
    2644:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    2646:	2288      	movs	r2, #136	; 0x88
    2648:	5c82      	ldrb	r2, [r0, r2]
    264a:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    264c:	2202      	movs	r2, #2
    264e:	721a      	strb	r2, [r3, #8]
			break;
    2650:	e002      	b.n	2658 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2652:	681b      	ldr	r3, [r3, #0]
    2654:	2b00      	cmp	r3, #0
    2656:	d1f0      	bne.n	263a <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    2658:	4b02      	ldr	r3, [pc, #8]	; (2664 <nwkDataReqTxConf+0x3c>)
    265a:	4798      	blx	r3
}
    265c:	bd08      	pop	{r3, pc}
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	200000d0 	.word	0x200000d0
    2664:	00002871 	.word	0x00002871

00002668 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2668:	2200      	movs	r2, #0
    266a:	4b01      	ldr	r3, [pc, #4]	; (2670 <nwkDataReqInit+0x8>)
    266c:	601a      	str	r2, [r3, #0]
}
    266e:	4770      	bx	lr
    2670:	200000d0 	.word	0x200000d0

00002674 <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    2674:	2300      	movs	r3, #0
    2676:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    2678:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    267a:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    267c:	4a08      	ldr	r2, [pc, #32]	; (26a0 <NWK_DataReq+0x2c>)
    267e:	2358      	movs	r3, #88	; 0x58
    2680:	5ad1      	ldrh	r1, [r2, r3]
    2682:	3101      	adds	r1, #1
    2684:	52d1      	strh	r1, [r2, r3]

	if (NULL == nwkDataReqQueue) {
    2686:	4b07      	ldr	r3, [pc, #28]	; (26a4 <NWK_DataReq+0x30>)
    2688:	681b      	ldr	r3, [r3, #0]
    268a:	2b00      	cmp	r3, #0
    268c:	d103      	bne.n	2696 <NWK_DataReq+0x22>
		req->next = NULL;
    268e:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2690:	4b04      	ldr	r3, [pc, #16]	; (26a4 <NWK_DataReq+0x30>)
    2692:	6018      	str	r0, [r3, #0]
    2694:	e002      	b.n	269c <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    2696:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2698:	4b02      	ldr	r3, [pc, #8]	; (26a4 <NWK_DataReq+0x30>)
    269a:	6018      	str	r0, [r3, #0]
	}
}
    269c:	4770      	bx	lr
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	200008dc 	.word	0x200008dc
    26a4:	200000d0 	.word	0x200000d0

000026a8 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    26a8:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    26aa:	4b4a      	ldr	r3, [pc, #296]	; (27d4 <nwkDataReqTaskHandler+0x12c>)
    26ac:	681a      	ldr	r2, [r3, #0]
    26ae:	2a00      	cmp	r2, #0
    26b0:	d100      	bne.n	26b4 <nwkDataReqTaskHandler+0xc>
    26b2:	e08d      	b.n	27d0 <nwkDataReqTaskHandler+0x128>
    26b4:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    26b6:	7a23      	ldrb	r3, [r4, #8]
    26b8:	2b00      	cmp	r3, #0
    26ba:	d002      	beq.n	26c2 <nwkDataReqTaskHandler+0x1a>
    26bc:	2b02      	cmp	r3, #2
    26be:	d06d      	beq.n	279c <nwkDataReqTaskHandler+0xf4>
    26c0:	e082      	b.n	27c8 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    26c2:	4b45      	ldr	r3, [pc, #276]	; (27d8 <nwkDataReqTaskHandler+0x130>)
    26c4:	4798      	blx	r3
    26c6:	1e05      	subs	r5, r0, #0
    26c8:	d103      	bne.n	26d2 <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    26ca:	2302      	movs	r3, #2
    26cc:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    26ce:	7723      	strb	r3, [r4, #28]
    26d0:	e07e      	b.n	27d0 <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    26d2:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    26d4:	2201      	movs	r2, #1
    26d6:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    26d8:	4b40      	ldr	r3, [pc, #256]	; (27dc <nwkDataReqTaskHandler+0x134>)
    26da:	2189      	movs	r1, #137	; 0x89
    26dc:	5443      	strb	r3, [r0, r1]
    26de:	0a18      	lsrs	r0, r3, #8
    26e0:	218a      	movs	r1, #138	; 0x8a
    26e2:	5468      	strb	r0, [r5, r1]
    26e4:	0c18      	lsrs	r0, r3, #16
    26e6:	218b      	movs	r1, #139	; 0x8b
    26e8:	5468      	strb	r0, [r5, r1]
    26ea:	0e1b      	lsrs	r3, r3, #24
    26ec:	218c      	movs	r1, #140	; 0x8c
    26ee:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    26f0:	7ba0      	ldrb	r0, [r4, #14]
    26f2:	0880      	lsrs	r0, r0, #2
    26f4:	2301      	movs	r3, #1
    26f6:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    26f8:	2188      	movs	r1, #136	; 0x88
    26fa:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    26fc:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    26fe:	4019      	ands	r1, r3
    2700:	7ae8      	ldrb	r0, [r5, #11]
    2702:	4390      	bics	r0, r2
    2704:	1c02      	adds	r2, r0, #0
    2706:	430a      	orrs	r2, r1
    2708:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    270a:	7ba1      	ldrb	r1, [r4, #14]
    270c:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    270e:	4019      	ands	r1, r3
    2710:	0089      	lsls	r1, r1, #2
    2712:	b2d2      	uxtb	r2, r2
    2714:	2004      	movs	r0, #4
    2716:	4382      	bics	r2, r0
    2718:	430a      	orrs	r2, r1
    271a:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    271c:	7ba2      	ldrb	r2, [r4, #14]
    271e:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    2720:	4013      	ands	r3, r2
    2722:	005a      	lsls	r2, r3, #1
    2724:	7aeb      	ldrb	r3, [r5, #11]
    2726:	2102      	movs	r1, #2
    2728:	438b      	bics	r3, r1
    272a:	4313      	orrs	r3, r2
    272c:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    272e:	4b2c      	ldr	r3, [pc, #176]	; (27e0 <nwkDataReqTaskHandler+0x138>)
    2730:	791a      	ldrb	r2, [r3, #4]
    2732:	3201      	adds	r2, #1
    2734:	b2d2      	uxtb	r2, r2
    2736:	711a      	strb	r2, [r3, #4]
    2738:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    273a:	781a      	ldrb	r2, [r3, #0]
    273c:	736a      	strb	r2, [r5, #13]
    273e:	785b      	ldrb	r3, [r3, #1]
    2740:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    2742:	8963      	ldrh	r3, [r4, #10]
    2744:	7aa2      	ldrb	r2, [r4, #10]
    2746:	73ea      	strb	r2, [r5, #15]
    2748:	0a1b      	lsrs	r3, r3, #8
    274a:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    274c:	7b61      	ldrb	r1, [r4, #13]
    274e:	230f      	movs	r3, #15
    2750:	4019      	ands	r1, r3
    2752:	7c6a      	ldrb	r2, [r5, #17]
    2754:	200f      	movs	r0, #15
    2756:	4382      	bics	r2, r0
    2758:	430a      	orrs	r2, r1
    275a:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    275c:	7b22      	ldrb	r2, [r4, #12]
    275e:	0112      	lsls	r2, r2, #4
    2760:	7c69      	ldrb	r1, [r5, #17]
    2762:	400b      	ands	r3, r1
    2764:	4313      	orrs	r3, r2
    2766:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    2768:	2381      	movs	r3, #129	; 0x81
    276a:	5ceb      	ldrb	r3, [r5, r3]
    276c:	2282      	movs	r2, #130	; 0x82
    276e:	5ca8      	ldrb	r0, [r5, r2]
    2770:	0200      	lsls	r0, r0, #8
    2772:	4318      	orrs	r0, r3
    2774:	2383      	movs	r3, #131	; 0x83
    2776:	5ceb      	ldrb	r3, [r5, r3]
    2778:	041b      	lsls	r3, r3, #16
    277a:	4318      	orrs	r0, r3
    277c:	2384      	movs	r3, #132	; 0x84
    277e:	5ceb      	ldrb	r3, [r5, r3]
    2780:	061b      	lsls	r3, r3, #24
    2782:	4318      	orrs	r0, r3
    2784:	7d22      	ldrb	r2, [r4, #20]
    2786:	6921      	ldr	r1, [r4, #16]
    2788:	4b16      	ldr	r3, [pc, #88]	; (27e4 <nwkDataReqTaskHandler+0x13c>)
    278a:	4798      	blx	r3
	frame->size += req->size;
    278c:	7d22      	ldrb	r2, [r4, #20]
    278e:	786b      	ldrb	r3, [r5, #1]
    2790:	18d3      	adds	r3, r2, r3
    2792:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    2794:	1c28      	adds	r0, r5, #0
    2796:	4b14      	ldr	r3, [pc, #80]	; (27e8 <nwkDataReqTaskHandler+0x140>)
    2798:	4798      	blx	r3
    279a:	e019      	b.n	27d0 <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    279c:	4294      	cmp	r4, r2
    279e:	d103      	bne.n	27a8 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    27a0:	4b0c      	ldr	r3, [pc, #48]	; (27d4 <nwkDataReqTaskHandler+0x12c>)
    27a2:	6822      	ldr	r2, [r4, #0]
    27a4:	601a      	str	r2, [r3, #0]
    27a6:	e006      	b.n	27b6 <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    27a8:	6813      	ldr	r3, [r2, #0]
    27aa:	429c      	cmp	r4, r3
    27ac:	d001      	beq.n	27b2 <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    27ae:	1c1a      	adds	r2, r3, #0
    27b0:	e7fa      	b.n	27a8 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    27b2:	6823      	ldr	r3, [r4, #0]
    27b4:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    27b6:	4a0a      	ldr	r2, [pc, #40]	; (27e0 <nwkDataReqTaskHandler+0x138>)
    27b8:	2358      	movs	r3, #88	; 0x58
    27ba:	5ad1      	ldrh	r1, [r2, r3]
    27bc:	3901      	subs	r1, #1
    27be:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    27c0:	69a3      	ldr	r3, [r4, #24]
    27c2:	1c20      	adds	r0, r4, #0
    27c4:	4798      	blx	r3
    27c6:	e003      	b.n	27d0 <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    27c8:	6824      	ldr	r4, [r4, #0]
    27ca:	2c00      	cmp	r4, #0
    27cc:	d000      	beq.n	27d0 <nwkDataReqTaskHandler+0x128>
    27ce:	e772      	b.n	26b6 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    27d0:	bd38      	pop	{r3, r4, r5, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	200000d0 	.word	0x200000d0
    27d8:	00002801 	.word	0x00002801
    27dc:	00002629 	.word	0x00002629
    27e0:	200008dc 	.word	0x200008dc
    27e4:	00006db9 	.word	0x00006db9
    27e8:	00003489 	.word	0x00003489

000027ec <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    27ec:	4b03      	ldr	r3, [pc, #12]	; (27fc <nwkFrameInit+0x10>)
    27ee:	2200      	movs	r2, #0
    27f0:	701a      	strb	r2, [r3, #0]
    27f2:	218d      	movs	r1, #141	; 0x8d
    27f4:	545a      	strb	r2, [r3, r1]
    27f6:	0049      	lsls	r1, r1, #1
    27f8:	545a      	strb	r2, [r3, r1]
	}
}
    27fa:	4770      	bx	lr
    27fc:	200000d4 	.word	0x200000d4

00002800 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    2800:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    2802:	4b18      	ldr	r3, [pc, #96]	; (2864 <nwkFrameAlloc+0x64>)
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	2b00      	cmp	r3, #0
    2808:	d00e      	beq.n	2828 <nwkFrameAlloc+0x28>
    280a:	238d      	movs	r3, #141	; 0x8d
    280c:	4a15      	ldr	r2, [pc, #84]	; (2864 <nwkFrameAlloc+0x64>)
    280e:	5cd3      	ldrb	r3, [r2, r3]
    2810:	2b00      	cmp	r3, #0
    2812:	d007      	beq.n	2824 <nwkFrameAlloc+0x24>
    2814:	238d      	movs	r3, #141	; 0x8d
    2816:	005b      	lsls	r3, r3, #1
    2818:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    281a:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    281c:	2b00      	cmp	r3, #0
    281e:	d11f      	bne.n	2860 <nwkFrameAlloc+0x60>
    2820:	2302      	movs	r3, #2
    2822:	e002      	b.n	282a <nwkFrameAlloc+0x2a>
    2824:	2301      	movs	r3, #1
    2826:	e000      	b.n	282a <nwkFrameAlloc+0x2a>
    2828:	2300      	movs	r3, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    282a:	4e0e      	ldr	r6, [pc, #56]	; (2864 <nwkFrameAlloc+0x64>)
    282c:	258d      	movs	r5, #141	; 0x8d
    282e:	435d      	muls	r5, r3
    2830:	1974      	adds	r4, r6, r5
    2832:	1c20      	adds	r0, r4, #0
    2834:	2100      	movs	r1, #0
    2836:	228d      	movs	r2, #141	; 0x8d
    2838:	4b0b      	ldr	r3, [pc, #44]	; (2868 <nwkFrameAlloc+0x68>)
    283a:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    283c:	2310      	movs	r3, #16
    283e:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    2840:	1c23      	adds	r3, r4, #0
    2842:	3380      	adds	r3, #128	; 0x80
    2844:	1c22      	adds	r2, r4, #0
    2846:	3212      	adds	r2, #18
    2848:	705a      	strb	r2, [r3, #1]
    284a:	0a11      	lsrs	r1, r2, #8
    284c:	7099      	strb	r1, [r3, #2]
    284e:	0c11      	lsrs	r1, r2, #16
    2850:	70d9      	strb	r1, [r3, #3]
    2852:	0e12      	lsrs	r2, r2, #24
    2854:	711a      	strb	r2, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    2856:	4a05      	ldr	r2, [pc, #20]	; (286c <nwkFrameAlloc+0x6c>)
    2858:	2358      	movs	r3, #88	; 0x58
    285a:	5ad1      	ldrh	r1, [r2, r3]
    285c:	3101      	adds	r1, #1
    285e:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    2860:	1c20      	adds	r0, r4, #0
    2862:	bd70      	pop	{r4, r5, r6, pc}
    2864:	200000d4 	.word	0x200000d4
    2868:	00006dcb 	.word	0x00006dcb
    286c:	200008dc 	.word	0x200008dc

00002870 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2870:	2300      	movs	r3, #0
    2872:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2874:	4a02      	ldr	r2, [pc, #8]	; (2880 <nwkFrameFree+0x10>)
    2876:	2358      	movs	r3, #88	; 0x58
    2878:	5ad1      	ldrh	r1, [r2, r3]
    287a:	3901      	subs	r1, #1
    287c:	52d1      	strh	r1, [r2, r3]
}
    287e:	4770      	bx	lr
    2880:	200008dc 	.word	0x200008dc

00002884 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2884:	2800      	cmp	r0, #0
    2886:	d006      	beq.n	2896 <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2888:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    288a:	4b0c      	ldr	r3, [pc, #48]	; (28bc <nwkFrameNext+0x38>)
    288c:	33a8      	adds	r3, #168	; 0xa8
    288e:	33ff      	adds	r3, #255	; 0xff
    2890:	4298      	cmp	r0, r3
    2892:	d301      	bcc.n	2898 <nwkFrameNext+0x14>
    2894:	e00f      	b.n	28b6 <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    2896:	4809      	ldr	r0, [pc, #36]	; (28bc <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2898:	7803      	ldrb	r3, [r0, #0]
    289a:	2b00      	cmp	r3, #0
    289c:	d10c      	bne.n	28b8 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    289e:	4a07      	ldr	r2, [pc, #28]	; (28bc <nwkFrameNext+0x38>)
    28a0:	32a8      	adds	r2, #168	; 0xa8
    28a2:	32ff      	adds	r2, #255	; 0xff
    28a4:	e002      	b.n	28ac <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    28a6:	7803      	ldrb	r3, [r0, #0]
    28a8:	2b00      	cmp	r3, #0
    28aa:	d105      	bne.n	28b8 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    28ac:	308d      	adds	r0, #141	; 0x8d
    28ae:	4290      	cmp	r0, r2
    28b0:	d3f9      	bcc.n	28a6 <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    28b2:	2000      	movs	r0, #0
    28b4:	e000      	b.n	28b8 <nwkFrameNext+0x34>
    28b6:	2000      	movs	r0, #0
}
    28b8:	4770      	bx	lr
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	200000d4 	.word	0x200000d4

000028c0 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    28c0:	2200      	movs	r2, #0
    28c2:	2385      	movs	r3, #133	; 0x85
    28c4:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    28c6:	4b05      	ldr	r3, [pc, #20]	; (28dc <nwkFrameCommandInit+0x1c>)
    28c8:	791a      	ldrb	r2, [r3, #4]
    28ca:	3201      	adds	r2, #1
    28cc:	b2d2      	uxtb	r2, r2
    28ce:	711a      	strb	r2, [r3, #4]
    28d0:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    28d2:	781a      	ldrb	r2, [r3, #0]
    28d4:	7342      	strb	r2, [r0, #13]
    28d6:	785b      	ldrb	r3, [r3, #1]
    28d8:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    28da:	4770      	bx	lr
    28dc:	200008dc 	.word	0x200008dc

000028e0 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    28e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28e2:	4a09      	ldr	r2, [pc, #36]	; (2908 <nwkRouteInit+0x28>)
    28e4:	3202      	adds	r2, #2
    28e6:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    28e8:	2701      	movs	r7, #1
    28ea:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    28ec:	4806      	ldr	r0, [pc, #24]	; (2908 <nwkRouteInit+0x28>)
    28ee:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    28f0:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    28f2:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    28f4:	00d9      	lsls	r1, r3, #3
    28f6:	5c0c      	ldrb	r4, [r1, r0]
    28f8:	43b4      	bics	r4, r6
    28fa:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    28fc:	7115      	strb	r5, [r2, #4]
    28fe:	3301      	adds	r3, #1
    2900:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2902:	2b64      	cmp	r3, #100	; 0x64
    2904:	d1f5      	bne.n	28f2 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    2906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2908:	2000027c 	.word	0x2000027c

0000290c <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    290c:	b570      	push	{r4, r5, r6, lr}
    290e:	4a0b      	ldr	r2, [pc, #44]	; (293c <NWK_RouteFindEntry+0x30>)
    2910:	3202      	adds	r2, #2
    2912:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2914:	4e09      	ldr	r6, [pc, #36]	; (293c <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2916:	8814      	ldrh	r4, [r2, #0]
    2918:	4284      	cmp	r4, r0
    291a:	d109      	bne.n	2930 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    291c:	00dc      	lsls	r4, r3, #3
    291e:	5da4      	ldrb	r4, [r4, r6]
    2920:	07a4      	lsls	r4, r4, #30
    2922:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2924:	428c      	cmp	r4, r1
    2926:	d103      	bne.n	2930 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    2928:	00dd      	lsls	r5, r3, #3
    292a:	4804      	ldr	r0, [pc, #16]	; (293c <NWK_RouteFindEntry+0x30>)
    292c:	1940      	adds	r0, r0, r5
    292e:	e004      	b.n	293a <NWK_RouteFindEntry+0x2e>
    2930:	3301      	adds	r3, #1
    2932:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2934:	2b64      	cmp	r3, #100	; 0x64
    2936:	d1ee      	bne.n	2916 <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2938:	2000      	movs	r0, #0
}
    293a:	bd70      	pop	{r4, r5, r6, pc}
    293c:	2000027c 	.word	0x2000027c

00002940 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    2940:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    2942:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    2944:	4810      	ldr	r0, [pc, #64]	; (2988 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2946:	24c8      	movs	r4, #200	; 0xc8
    2948:	00a4      	lsls	r4, r4, #2
    294a:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    294c:	7803      	ldrb	r3, [r0, #0]
    294e:	07dc      	lsls	r4, r3, #31
    2950:	d40b      	bmi.n	296a <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    2952:	7983      	ldrb	r3, [r0, #6]
    2954:	2b00      	cmp	r3, #0
    2956:	d00c      	beq.n	2972 <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    2958:	2a00      	cmp	r2, #0
    295a:	d003      	beq.n	2964 <NWK_RouteNewEntry+0x24>
    295c:	7994      	ldrb	r4, [r2, #6]
    295e:	429c      	cmp	r4, r3
    2960:	d802      	bhi.n	2968 <NWK_RouteNewEntry+0x28>
    2962:	e002      	b.n	296a <NWK_RouteNewEntry+0x2a>
    2964:	1c02      	adds	r2, r0, #0
    2966:	e000      	b.n	296a <NWK_RouteNewEntry+0x2a>
    2968:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    296a:	3008      	adds	r0, #8
    296c:	4288      	cmp	r0, r1
    296e:	d1ed      	bne.n	294c <NWK_RouteNewEntry+0xc>
    2970:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    2972:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2974:	2202      	movs	r2, #2
    2976:	4393      	bics	r3, r2
    2978:	220f      	movs	r2, #15
    297a:	4013      	ands	r3, r2
    297c:	2230      	movs	r2, #48	; 0x30
    297e:	4313      	orrs	r3, r2
    2980:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2982:	2380      	movs	r3, #128	; 0x80
    2984:	7183      	strb	r3, [r0, #6]

	return entry;
}
    2986:	bd10      	pop	{r4, pc}
    2988:	2000027c 	.word	0x2000027c

0000298c <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    298c:	7803      	ldrb	r3, [r0, #0]
    298e:	07da      	lsls	r2, r3, #31
    2990:	d404      	bmi.n	299c <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2992:	2301      	movs	r3, #1
    2994:	425b      	negs	r3, r3
    2996:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2998:	2300      	movs	r3, #0
    299a:	7183      	strb	r3, [r0, #6]
}
    299c:	4770      	bx	lr
    299e:	46c0      	nop			; (mov r8, r8)

000029a0 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    29a0:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    29a2:	4b04      	ldr	r3, [pc, #16]	; (29b4 <NWK_RouteNextHop+0x14>)
    29a4:	4798      	blx	r3
	if (entry) {
    29a6:	2800      	cmp	r0, #0
    29a8:	d001      	beq.n	29ae <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    29aa:	8880      	ldrh	r0, [r0, #4]
    29ac:	e000      	b.n	29b0 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    29ae:	4802      	ldr	r0, [pc, #8]	; (29b8 <NWK_RouteNextHop+0x18>)
}
    29b0:	bd08      	pop	{r3, pc}
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	0000290d 	.word	0x0000290d
    29b8:	0000ffff 	.word	0x0000ffff

000029bc <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    29bc:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    29be:	4b03      	ldr	r3, [pc, #12]	; (29cc <nwkRouteRemove+0x10>)
    29c0:	4798      	blx	r3
	if (entry) {
    29c2:	2800      	cmp	r0, #0
    29c4:	d001      	beq.n	29ca <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    29c6:	4b02      	ldr	r3, [pc, #8]	; (29d0 <nwkRouteRemove+0x14>)
    29c8:	4798      	blx	r3
	}
}
    29ca:	bd08      	pop	{r3, pc}
    29cc:	0000290d 	.word	0x0000290d
    29d0:	0000298d 	.word	0x0000298d

000029d4 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    29d4:	b538      	push	{r3, r4, r5, lr}
    29d6:	1c04      	adds	r4, r0, #0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    29d8:	7a42      	ldrb	r2, [r0, #9]
    29da:	7a85      	ldrb	r5, [r0, #10]
    29dc:	022d      	lsls	r5, r5, #8
    29de:	4315      	orrs	r5, r2
    29e0:	b22b      	sxth	r3, r5
    29e2:	2b00      	cmp	r3, #0
    29e4:	da05      	bge.n	29f2 <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    29e6:	7b42      	ldrb	r2, [r0, #13]
    29e8:	7b83      	ldrb	r3, [r0, #14]
    29ea:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    29ec:	4313      	orrs	r3, r2
    29ee:	429d      	cmp	r5, r3
    29f0:	d141      	bne.n	2a76 <nwkRouteFrameReceived+0xa2>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    29f2:	7961      	ldrb	r1, [r4, #5]
    29f4:	79a2      	ldrb	r2, [r4, #6]
    29f6:	0212      	lsls	r2, r2, #8
    29f8:	430a      	orrs	r2, r1
    29fa:	4b1f      	ldr	r3, [pc, #124]	; (2a78 <nwkRouteFrameReceived+0xa4>)
    29fc:	429a      	cmp	r2, r3
    29fe:	d03a      	beq.n	2a76 <nwkRouteFrameReceived+0xa2>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    2a00:	7b62      	ldrb	r2, [r4, #13]
    2a02:	7ba0      	ldrb	r0, [r4, #14]
    2a04:	0200      	lsls	r0, r0, #8
    2a06:	4310      	orrs	r0, r2
    2a08:	2100      	movs	r1, #0
    2a0a:	4b1c      	ldr	r3, [pc, #112]	; (2a7c <nwkRouteFrameReceived+0xa8>)
    2a0c:	4798      	blx	r3

	if (entry) {
    2a0e:	2800      	cmp	r0, #0
    2a10:	d022      	beq.n	2a58 <nwkRouteFrameReceived+0x84>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2a12:	79e1      	ldrb	r1, [r4, #7]
    2a14:	7a22      	ldrb	r2, [r4, #8]
    2a16:	0212      	lsls	r2, r2, #8
    2a18:	430a      	orrs	r2, r1
    2a1a:	2100      	movs	r1, #0
    2a1c:	4b16      	ldr	r3, [pc, #88]	; (2a78 <nwkRouteFrameReceived+0xa4>)
    2a1e:	429a      	cmp	r2, r3
    2a20:	d108      	bne.n	2a34 <nwkRouteFrameReceived+0x60>
				nwkIb.addr == header->nwkDstAddr);
    2a22:	7be2      	ldrb	r2, [r4, #15]
    2a24:	7c21      	ldrb	r1, [r4, #16]
    2a26:	0209      	lsls	r1, r1, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2a28:	4b15      	ldr	r3, [pc, #84]	; (2a80 <nwkRouteFrameReceived+0xac>)
    2a2a:	881b      	ldrh	r3, [r3, #0]
    2a2c:	4311      	orrs	r1, r2
    2a2e:	1a59      	subs	r1, r3, r1
    2a30:	424b      	negs	r3, r1
    2a32:	4159      	adcs	r1, r3
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    2a34:	8883      	ldrh	r3, [r0, #4]
    2a36:	42ab      	cmp	r3, r5
    2a38:	d004      	beq.n	2a44 <nwkRouteFrameReceived+0x70>
    2a3a:	2385      	movs	r3, #133	; 0x85
    2a3c:	5ce2      	ldrb	r2, [r4, r3]
    2a3e:	79c3      	ldrb	r3, [r0, #7]
    2a40:	429a      	cmp	r2, r3
    2a42:	d801      	bhi.n	2a48 <nwkRouteFrameReceived+0x74>
				entry->lqi) || discovery) {
    2a44:	2900      	cmp	r1, #0
    2a46:	d013      	beq.n	2a70 <nwkRouteFrameReceived+0x9c>
			entry->nextHopAddr = header->macSrcAddr;
    2a48:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2a4a:	7803      	ldrb	r3, [r0, #0]
    2a4c:	220f      	movs	r2, #15
    2a4e:	4013      	ands	r3, r2
    2a50:	2230      	movs	r2, #48	; 0x30
    2a52:	4313      	orrs	r3, r2
    2a54:	7003      	strb	r3, [r0, #0]
    2a56:	e00b      	b.n	2a70 <nwkRouteFrameReceived+0x9c>
		}
	} else {
		entry = NWK_RouteNewEntry();
    2a58:	4b0a      	ldr	r3, [pc, #40]	; (2a84 <nwkRouteFrameReceived+0xb0>)
    2a5a:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    2a5c:	7b61      	ldrb	r1, [r4, #13]
    2a5e:	7ba2      	ldrb	r2, [r4, #14]
    2a60:	0212      	lsls	r2, r2, #8
    2a62:	430a      	orrs	r2, r1
    2a64:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    2a66:	7a62      	ldrb	r2, [r4, #9]
    2a68:	7aa3      	ldrb	r3, [r4, #10]
    2a6a:	021b      	lsls	r3, r3, #8
    2a6c:	4313      	orrs	r3, r2
    2a6e:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    2a70:	2385      	movs	r3, #133	; 0x85
    2a72:	5ce3      	ldrb	r3, [r4, r3]
    2a74:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    2a76:	bd38      	pop	{r3, r4, r5, pc}
    2a78:	0000ffff 	.word	0x0000ffff
    2a7c:	0000290d 	.word	0x0000290d
    2a80:	200008dc 	.word	0x200008dc
    2a84:	00002941 	.word	0x00002941

00002a88 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    2a88:	b510      	push	{r4, lr}
    2a8a:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    2a8c:	7bc3      	ldrb	r3, [r0, #15]
    2a8e:	7c00      	ldrb	r0, [r0, #16]
    2a90:	0200      	lsls	r0, r0, #8
    2a92:	4318      	orrs	r0, r3
    2a94:	4b1b      	ldr	r3, [pc, #108]	; (2b04 <nwkRouteFrameSent+0x7c>)
    2a96:	4298      	cmp	r0, r3
    2a98:	d032      	beq.n	2b00 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    2a9a:	7ae1      	ldrb	r1, [r4, #11]
    2a9c:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    2a9e:	0fc9      	lsrs	r1, r1, #31
    2aa0:	4b19      	ldr	r3, [pc, #100]	; (2b08 <nwkRouteFrameSent+0x80>)
    2aa2:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    2aa4:	2800      	cmp	r0, #0
    2aa6:	d02b      	beq.n	2b00 <nwkRouteFrameSent+0x78>
    2aa8:	7803      	ldrb	r3, [r0, #0]
    2aaa:	07da      	lsls	r2, r3, #31
    2aac:	d428      	bmi.n	2b00 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2aae:	2385      	movs	r3, #133	; 0x85
    2ab0:	5ce3      	ldrb	r3, [r4, r3]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d117      	bne.n	2ae6 <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2ab6:	7803      	ldrb	r3, [r0, #0]
    2ab8:	220f      	movs	r2, #15
    2aba:	4013      	ands	r3, r2
    2abc:	2230      	movs	r2, #48	; 0x30
    2abe:	4313      	orrs	r3, r2
    2ac0:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    2ac2:	7983      	ldrb	r3, [r0, #6]
    2ac4:	3301      	adds	r3, #1
    2ac6:	b2db      	uxtb	r3, r3
    2ac8:	7183      	strb	r3, [r0, #6]
    2aca:	2bff      	cmp	r3, #255	; 0xff
    2acc:	d118      	bne.n	2b00 <nwkRouteFrameSent+0x78>
    2ace:	490f      	ldr	r1, [pc, #60]	; (2b0c <nwkRouteFrameSent+0x84>)
    2ad0:	1d8b      	adds	r3, r1, #6
    2ad2:	4a0f      	ldr	r2, [pc, #60]	; (2b10 <nwkRouteFrameSent+0x88>)
    2ad4:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    2ad6:	781a      	ldrb	r2, [r3, #0]
    2ad8:	0852      	lsrs	r2, r2, #1
    2ada:	3201      	adds	r2, #1
    2adc:	701a      	strb	r2, [r3, #0]
    2ade:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2ae0:	428b      	cmp	r3, r1
    2ae2:	d1f8      	bne.n	2ad6 <nwkRouteFrameSent+0x4e>
    2ae4:	e00c      	b.n	2b00 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    2ae6:	7802      	ldrb	r2, [r0, #0]
    2ae8:	0913      	lsrs	r3, r2, #4
    2aea:	330f      	adds	r3, #15
    2aec:	210f      	movs	r1, #15
    2aee:	400b      	ands	r3, r1
    2af0:	011c      	lsls	r4, r3, #4
    2af2:	400a      	ands	r2, r1
    2af4:	4322      	orrs	r2, r4
    2af6:	7002      	strb	r2, [r0, #0]
    2af8:	2b00      	cmp	r3, #0
    2afa:	d101      	bne.n	2b00 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    2afc:	4b05      	ldr	r3, [pc, #20]	; (2b14 <nwkRouteFrameSent+0x8c>)
    2afe:	4798      	blx	r3
		}
	}
}
    2b00:	bd10      	pop	{r4, pc}
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	0000ffff 	.word	0x0000ffff
    2b08:	0000290d 	.word	0x0000290d
    2b0c:	2000027c 	.word	0x2000027c
    2b10:	00000326 	.word	0x00000326
    2b14:	0000298d 	.word	0x0000298d

00002b18 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    2b18:	b510      	push	{r4, lr}
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    2b1a:	7bc1      	ldrb	r1, [r0, #15]
    2b1c:	7c03      	ldrb	r3, [r0, #16]
    2b1e:	021b      	lsls	r3, r3, #8
    2b20:	430b      	orrs	r3, r1
    2b22:	4a0d      	ldr	r2, [pc, #52]	; (2b58 <nwkRoutePrepareTx+0x40>)
    2b24:	4293      	cmp	r3, r2
    2b26:	d104      	bne.n	2b32 <nwkRoutePrepareTx+0x1a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    2b28:	2301      	movs	r3, #1
    2b2a:	425b      	negs	r3, r3
    2b2c:	71c3      	strb	r3, [r0, #7]
    2b2e:	7203      	strb	r3, [r0, #8]
    2b30:	e010      	b.n	2b54 <nwkRoutePrepareTx+0x3c>
	} else if (header->nwkFcf.linkLocal) {
    2b32:	7ac2      	ldrb	r2, [r0, #11]
    2b34:	0751      	lsls	r1, r2, #29
    2b36:	d503      	bpl.n	2b40 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    2b38:	71c3      	strb	r3, [r0, #7]
    2b3a:	0a1b      	lsrs	r3, r3, #8
    2b3c:	7203      	strb	r3, [r0, #8]
    2b3e:	e009      	b.n	2b54 <nwkRoutePrepareTx+0x3c>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    2b40:	1c84      	adds	r4, r0, #2
    2b42:	7ac1      	ldrb	r1, [r0, #11]
    2b44:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    2b46:	0fc9      	lsrs	r1, r1, #31
    2b48:	1c18      	adds	r0, r3, #0
    2b4a:	4b04      	ldr	r3, [pc, #16]	; (2b5c <nwkRoutePrepareTx+0x44>)
    2b4c:	4798      	blx	r3
    2b4e:	7160      	strb	r0, [r4, #5]
    2b50:	0a00      	lsrs	r0, r0, #8
    2b52:	71a0      	strb	r0, [r4, #6]
			nwkRouteDiscoveryRequest(frame);
		}

  #endif
	}
}
    2b54:	bd10      	pop	{r4, pc}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	0000ffff 	.word	0x0000ffff
    2b5c:	000029a1 	.word	0x000029a1

00002b60 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    2b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b62:	4647      	mov	r7, r8
    2b64:	b480      	push	{r7}
    2b66:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2b68:	7bc2      	ldrb	r2, [r0, #15]
    2b6a:	7c06      	ldrb	r6, [r0, #16]
    2b6c:	0236      	lsls	r6, r6, #8
    2b6e:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    2b70:	7ac7      	ldrb	r7, [r0, #11]
    2b72:	073f      	lsls	r7, r7, #28
    2b74:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2b76:	b2f9      	uxtb	r1, r7
    2b78:	1c30      	adds	r0, r6, #0
    2b7a:	4b28      	ldr	r3, [pc, #160]	; (2c1c <nwkRouteFrame+0xbc>)
    2b7c:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    2b7e:	4b28      	ldr	r3, [pc, #160]	; (2c20 <nwkRouteFrame+0xc0>)
    2b80:	4298      	cmp	r0, r3
    2b82:	d00f      	beq.n	2ba4 <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    2b84:	2200      	movs	r2, #0
    2b86:	2389      	movs	r3, #137	; 0x89
    2b88:	54e2      	strb	r2, [r4, r3]
    2b8a:	238a      	movs	r3, #138	; 0x8a
    2b8c:	54e2      	strb	r2, [r4, r3]
    2b8e:	238b      	movs	r3, #139	; 0x8b
    2b90:	54e2      	strb	r2, [r4, r3]
    2b92:	238c      	movs	r3, #140	; 0x8c
    2b94:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    2b96:	2202      	movs	r2, #2
    2b98:	2388      	movs	r3, #136	; 0x88
    2b9a:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    2b9c:	1c20      	adds	r0, r4, #0
    2b9e:	4b21      	ldr	r3, [pc, #132]	; (2c24 <nwkRouteFrame+0xc4>)
    2ba0:	4798      	blx	r3
    2ba2:	e038      	b.n	2c16 <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    2ba4:	7b62      	ldrb	r2, [r4, #13]
    2ba6:	7ba3      	ldrb	r3, [r4, #14]
    2ba8:	021b      	lsls	r3, r3, #8
    2baa:	4313      	orrs	r3, r2
    2bac:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    2bae:	4b1e      	ldr	r3, [pc, #120]	; (2c28 <nwkRouteFrame+0xc8>)
    2bb0:	4798      	blx	r3
    2bb2:	1e05      	subs	r5, r0, #0
    2bb4:	d02c      	beq.n	2c10 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    2bb6:	4b1d      	ldr	r3, [pc, #116]	; (2c2c <nwkRouteFrame+0xcc>)
    2bb8:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    2bba:	786b      	ldrb	r3, [r5, #1]
    2bbc:	3306      	adds	r3, #6
    2bbe:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    2bc0:	2200      	movs	r2, #0
    2bc2:	2389      	movs	r3, #137	; 0x89
    2bc4:	54ea      	strb	r2, [r5, r3]
    2bc6:	238a      	movs	r3, #138	; 0x8a
    2bc8:	54ea      	strb	r2, [r5, r3]
    2bca:	238b      	movs	r3, #139	; 0x8b
    2bcc:	54ea      	strb	r2, [r5, r3]
    2bce:	238c      	movs	r3, #140	; 0x8c
    2bd0:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    2bd2:	21ff      	movs	r1, #255	; 0xff
    2bd4:	4643      	mov	r3, r8
    2bd6:	4019      	ands	r1, r3
    2bd8:	73e9      	strb	r1, [r5, #15]
    2bda:	0a1a      	lsrs	r2, r3, #8
    2bdc:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    2bde:	2381      	movs	r3, #129	; 0x81
    2be0:	5ce8      	ldrb	r0, [r5, r3]
    2be2:	2382      	movs	r3, #130	; 0x82
    2be4:	5ceb      	ldrb	r3, [r5, r3]
    2be6:	021b      	lsls	r3, r3, #8
    2be8:	4303      	orrs	r3, r0
    2bea:	2083      	movs	r0, #131	; 0x83
    2bec:	5c28      	ldrb	r0, [r5, r0]
    2bee:	0400      	lsls	r0, r0, #16
    2bf0:	4303      	orrs	r3, r0
    2bf2:	2084      	movs	r0, #132	; 0x84
    2bf4:	5c28      	ldrb	r0, [r5, r0]
    2bf6:	0600      	lsls	r0, r0, #24
    2bf8:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    2bfa:	2001      	movs	r0, #1
    2bfc:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    2bfe:	7059      	strb	r1, [r3, #1]
    2c00:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    2c02:	70de      	strb	r6, [r3, #3]
    2c04:	0a36      	lsrs	r6, r6, #8
    2c06:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    2c08:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    2c0a:	1c28      	adds	r0, r5, #0
    2c0c:	4b05      	ldr	r3, [pc, #20]	; (2c24 <nwkRouteFrame+0xc4>)
    2c0e:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    2c10:	1c20      	adds	r0, r4, #0
    2c12:	4b07      	ldr	r3, [pc, #28]	; (2c30 <nwkRouteFrame+0xd0>)
    2c14:	4798      	blx	r3
	}
}
    2c16:	bc04      	pop	{r2}
    2c18:	4690      	mov	r8, r2
    2c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c1c:	000029a1 	.word	0x000029a1
    2c20:	0000ffff 	.word	0x0000ffff
    2c24:	00003489 	.word	0x00003489
    2c28:	00002801 	.word	0x00002801
    2c2c:	000028c1 	.word	0x000028c1
    2c30:	00002871 	.word	0x00002871

00002c34 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2c34:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2c36:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2c38:	7b03      	ldrb	r3, [r0, #12]
		return false;
    2c3a:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2c3c:	2b06      	cmp	r3, #6
    2c3e:	d107      	bne.n	2c50 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2c40:	78d3      	ldrb	r3, [r2, #3]
    2c42:	7910      	ldrb	r0, [r2, #4]
    2c44:	0200      	lsls	r0, r0, #8
    2c46:	4318      	orrs	r0, r3
    2c48:	7951      	ldrb	r1, [r2, #5]
    2c4a:	4b02      	ldr	r3, [pc, #8]	; (2c54 <nwkRouteErrorReceived+0x20>)
    2c4c:	4798      	blx	r3

	return true;
    2c4e:	2001      	movs	r0, #1
}
    2c50:	bd08      	pop	{r3, pc}
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	000029bd 	.word	0x000029bd

00002c58 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2c58:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    2c5a:	7b02      	ldrb	r2, [r0, #12]
		return false;
    2c5c:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    2c5e:	2a00      	cmp	r2, #0
    2c60:	d00f      	beq.n	2c82 <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    2c62:	6882      	ldr	r2, [r0, #8]
    2c64:	7813      	ldrb	r3, [r2, #0]
    2c66:	2b00      	cmp	r3, #0
    2c68:	d002      	beq.n	2c70 <nwkRxSeriveDataInd+0x18>
    2c6a:	2b01      	cmp	r3, #1
    2c6c:	d004      	beq.n	2c78 <nwkRxSeriveDataInd+0x20>
    2c6e:	e007      	b.n	2c80 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2c70:	4b05      	ldr	r3, [pc, #20]	; (2c88 <nwkRxSeriveDataInd+0x30>)
    2c72:	4798      	blx	r3
    2c74:	1c03      	adds	r3, r0, #0
    2c76:	e004      	b.n	2c82 <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2c78:	4b04      	ldr	r3, [pc, #16]	; (2c8c <nwkRxSeriveDataInd+0x34>)
    2c7a:	4798      	blx	r3
    2c7c:	1c03      	adds	r3, r0, #0
    2c7e:	e000      	b.n	2c82 <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    2c80:	2300      	movs	r3, #0
	}
}
    2c82:	1c18      	adds	r0, r3, #0
    2c84:	bd08      	pop	{r3, pc}
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	000035d5 	.word	0x000035d5
    2c8c:	00002c35 	.word	0x00002c35

00002c90 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2c90:	b538      	push	{r3, r4, r5, lr}
    2c92:	4909      	ldr	r1, [pc, #36]	; (2cb8 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    2c94:	1d0b      	adds	r3, r1, #4
    2c96:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2c98:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    2c9a:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    2c9c:	781a      	ldrb	r2, [r3, #0]
    2c9e:	2a00      	cmp	r2, #0
    2ca0:	d002      	beq.n	2ca8 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2ca2:	3a01      	subs	r2, #1
    2ca4:	701a      	strb	r2, [r3, #0]
			restart = true;
    2ca6:	1c2c      	adds	r4, r5, #0
    2ca8:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2caa:	428b      	cmp	r3, r1
    2cac:	d1f6      	bne.n	2c9c <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    2cae:	2c00      	cmp	r4, #0
    2cb0:	d001      	beq.n	2cb6 <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    2cb2:	4b02      	ldr	r3, [pc, #8]	; (2cbc <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    2cb4:	4798      	blx	r3
	}
}
    2cb6:	bd38      	pop	{r3, r4, r5, pc}
    2cb8:	2000059c 	.word	0x2000059c
    2cbc:	00003b39 	.word	0x00003b39

00002cc0 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    2cc0:	b508      	push	{r3, lr}
    2cc2:	490a      	ldr	r1, [pc, #40]	; (2cec <nwkRxInit+0x2c>)
    2cc4:	1d0b      	adds	r3, r1, #4
    2cc6:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    2cc8:	2200      	movs	r2, #0
    2cca:	701a      	strb	r2, [r3, #0]
    2ccc:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2cce:	428b      	cmp	r3, r1
    2cd0:	d1fb      	bne.n	2cca <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    2cd2:	4b07      	ldr	r3, [pc, #28]	; (2cf0 <nwkRxInit+0x30>)
    2cd4:	2264      	movs	r2, #100	; 0x64
    2cd6:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2cd8:	2200      	movs	r2, #0
    2cda:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    2cdc:	4a05      	ldr	r2, [pc, #20]	; (2cf4 <nwkRxInit+0x34>)
    2cde:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    2ce0:	2000      	movs	r0, #0
    2ce2:	4905      	ldr	r1, [pc, #20]	; (2cf8 <nwkRxInit+0x38>)
    2ce4:	4b05      	ldr	r3, [pc, #20]	; (2cfc <nwkRxInit+0x3c>)
    2ce6:	4798      	blx	r3
}
    2ce8:	bd08      	pop	{r3, pc}
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	2000059c 	.word	0x2000059c
    2cf0:	200005dc 	.word	0x200005dc
    2cf4:	00002c91 	.word	0x00002c91
    2cf8:	00002c59 	.word	0x00002c59
    2cfc:	000025f5 	.word	0x000025f5

00002d00 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    2d00:	b510      	push	{r4, lr}
    2d02:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    2d04:	6803      	ldr	r3, [r0, #0]
    2d06:	785a      	ldrb	r2, [r3, #1]
    2d08:	2a88      	cmp	r2, #136	; 0x88
    2d0a:	d11a      	bne.n	2d42 <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    2d0c:	781b      	ldrb	r3, [r3, #0]
    2d0e:	2220      	movs	r2, #32
    2d10:	4393      	bics	r3, r2
    2d12:	2b41      	cmp	r3, #65	; 0x41
    2d14:	d115      	bne.n	2d42 <PHY_DataInd+0x42>
    2d16:	7903      	ldrb	r3, [r0, #4]
    2d18:	2b0f      	cmp	r3, #15
    2d1a:	d912      	bls.n	2d42 <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    2d1c:	4b09      	ldr	r3, [pc, #36]	; (2d44 <PHY_DataInd+0x44>)
    2d1e:	4798      	blx	r3
    2d20:	2800      	cmp	r0, #0
    2d22:	d00e      	beq.n	2d42 <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    2d24:	2320      	movs	r3, #32
    2d26:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    2d28:	7923      	ldrb	r3, [r4, #4]
    2d2a:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    2d2c:	7962      	ldrb	r2, [r4, #5]
    2d2e:	2385      	movs	r3, #133	; 0x85
    2d30:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    2d32:	79a2      	ldrb	r2, [r4, #6]
    2d34:	2386      	movs	r3, #134	; 0x86
    2d36:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    2d38:	3002      	adds	r0, #2
    2d3a:	7922      	ldrb	r2, [r4, #4]
    2d3c:	6821      	ldr	r1, [r4, #0]
    2d3e:	4b02      	ldr	r3, [pc, #8]	; (2d48 <PHY_DataInd+0x48>)
    2d40:	4798      	blx	r3
}
    2d42:	bd10      	pop	{r4, pc}
    2d44:	00002801 	.word	0x00002801
    2d48:	00006db9 	.word	0x00006db9

00002d4c <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    2d4c:	2900      	cmp	r1, #0
    2d4e:	d002      	beq.n	2d56 <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    2d50:	2322      	movs	r3, #34	; 0x22
    2d52:	7003      	strb	r3, [r0, #0]
    2d54:	e001      	b.n	2d5a <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    2d56:	2324      	movs	r3, #36	; 0x24
    2d58:	7003      	strb	r3, [r0, #0]
	}
}
    2d5a:	4770      	bx	lr

00002d5c <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    2d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d5e:	464f      	mov	r7, r9
    2d60:	4646      	mov	r6, r8
    2d62:	b4c0      	push	{r6, r7}
    2d64:	b085      	sub	sp, #20
	NwkFrame_t *frame = NULL;
    2d66:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2d68:	4dd3      	ldr	r5, [pc, #844]	; (30b8 <nwkRxTaskHandler+0x35c>)
    2d6a:	48d4      	ldr	r0, [pc, #848]	; (30bc <nwkRxTaskHandler+0x360>)
    2d6c:	4681      	mov	r9, r0
    2d6e:	203c      	movs	r0, #60	; 0x3c
    2d70:	4481      	add	r9, r0
    2d72:	e19a      	b.n	30aa <nwkRxTaskHandler+0x34e>
		switch (frame->state) {
    2d74:	7823      	ldrb	r3, [r4, #0]
    2d76:	3b20      	subs	r3, #32
    2d78:	b2da      	uxtb	r2, r3
    2d7a:	2a04      	cmp	r2, #4
    2d7c:	d900      	bls.n	2d80 <nwkRxTaskHandler+0x24>
    2d7e:	e194      	b.n	30aa <nwkRxTaskHandler+0x34e>
    2d80:	0093      	lsls	r3, r2, #2
    2d82:	4acf      	ldr	r2, [pc, #828]	; (30c0 <nwkRxTaskHandler+0x364>)
    2d84:	58d3      	ldr	r3, [r2, r3]
    2d86:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2d88:	2324      	movs	r3, #36	; 0x24
    2d8a:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2d8c:	7ae3      	ldrb	r3, [r4, #11]
    2d8e:	0719      	lsls	r1, r3, #28
    2d90:	d500      	bpl.n	2d94 <nwkRxTaskHandler+0x38>
    2d92:	e18a      	b.n	30aa <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2d94:	7961      	ldrb	r1, [r4, #5]
    2d96:	79a2      	ldrb	r2, [r4, #6]
    2d98:	0212      	lsls	r2, r2, #8
    2d9a:	430a      	orrs	r2, r1
    2d9c:	4bc9      	ldr	r3, [pc, #804]	; (30c4 <nwkRxTaskHandler+0x368>)
    2d9e:	429a      	cmp	r2, r3
    2da0:	d114      	bne.n	2dcc <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2da2:	7be2      	ldrb	r2, [r4, #15]
    2da4:	7c23      	ldrb	r3, [r4, #16]
    2da6:	021b      	lsls	r3, r3, #8
    2da8:	4313      	orrs	r3, r2
    2daa:	4ac7      	ldr	r2, [pc, #796]	; (30c8 <nwkRxTaskHandler+0x36c>)
    2dac:	8812      	ldrh	r2, [r2, #0]
    2dae:	429a      	cmp	r2, r3
    2db0:	d003      	beq.n	2dba <nwkRxTaskHandler+0x5e>
    2db2:	4ac4      	ldr	r2, [pc, #784]	; (30c4 <nwkRxTaskHandler+0x368>)
    2db4:	4293      	cmp	r3, r2
    2db6:	d000      	beq.n	2dba <nwkRxTaskHandler+0x5e>
    2db8:	e177      	b.n	30aa <nwkRxTaskHandler+0x34e>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2dba:	7ae3      	ldrb	r3, [r4, #11]
    2dbc:	079a      	lsls	r2, r3, #30
    2dbe:	d502      	bpl.n	2dc6 <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    2dc0:	2321      	movs	r3, #33	; 0x21
    2dc2:	7023      	strb	r3, [r4, #0]
    2dc4:	e171      	b.n	30aa <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2dc6:	2322      	movs	r3, #34	; 0x22
    2dc8:	7023      	strb	r3, [r4, #0]
    2dca:	e16e      	b.n	30aa <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2dcc:	7be1      	ldrb	r1, [r4, #15]
    2dce:	7c22      	ldrb	r2, [r4, #16]
    2dd0:	0212      	lsls	r2, r2, #8
    2dd2:	430a      	orrs	r2, r1
    2dd4:	4bbb      	ldr	r3, [pc, #748]	; (30c4 <nwkRxTaskHandler+0x368>)
    2dd6:	429a      	cmp	r2, r3
    2dd8:	d103      	bne.n	2de2 <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    2dda:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2ddc:	07de      	lsls	r6, r3, #31
    2dde:	d500      	bpl.n	2de2 <nwkRxTaskHandler+0x86>
    2de0:	e163      	b.n	30aa <nwkRxTaskHandler+0x34e>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    2de2:	7b61      	ldrb	r1, [r4, #13]
    2de4:	7ba3      	ldrb	r3, [r4, #14]
    2de6:	021b      	lsls	r3, r3, #8
    2de8:	4ab7      	ldr	r2, [pc, #732]	; (30c8 <nwkRxTaskHandler+0x36c>)
    2dea:	8812      	ldrh	r2, [r2, #0]
    2dec:	430b      	orrs	r3, r1
    2dee:	429a      	cmp	r2, r3
    2df0:	d100      	bne.n	2df4 <nwkRxTaskHandler+0x98>
    2df2:	e15a      	b.n	30aa <nwkRxTaskHandler+0x34e>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    2df4:	1c20      	adds	r0, r4, #0
    2df6:	4bb5      	ldr	r3, [pc, #724]	; (30cc <nwkRxTaskHandler+0x370>)
    2df8:	4798      	blx	r3
    2dfa:	4bb0      	ldr	r3, [pc, #704]	; (30bc <nwkRxTaskHandler+0x360>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2dfc:	2700      	movs	r7, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2dfe:	1ca1      	adds	r1, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2e00:	1c18      	adds	r0, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2e02:	791a      	ldrb	r2, [r3, #4]
    2e04:	2a00      	cmp	r2, #0
    2e06:	d037      	beq.n	2e78 <nwkRxTaskHandler+0x11c>
    2e08:	7ace      	ldrb	r6, [r1, #11]
    2e0a:	7b0a      	ldrb	r2, [r1, #12]
    2e0c:	0212      	lsls	r2, r2, #8
    2e0e:	4690      	mov	r8, r2
    2e10:	881a      	ldrh	r2, [r3, #0]
    2e12:	4694      	mov	ip, r2
    2e14:	4642      	mov	r2, r8
    2e16:	4316      	orrs	r6, r2
    2e18:	45b4      	cmp	ip, r6
    2e1a:	d12e      	bne.n	2e7a <nwkRxTaskHandler+0x11e>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2e1c:	7b22      	ldrb	r2, [r4, #12]
    2e1e:	789b      	ldrb	r3, [r3, #2]
    2e20:	1a9b      	subs	r3, r3, r2
    2e22:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    2e24:	2b07      	cmp	r3, #7
    2e26:	d81c      	bhi.n	2e62 <nwkRxTaskHandler+0x106>
				if (entry->mask & (1 << diff)) {
    2e28:	78c2      	ldrb	r2, [r0, #3]
    2e2a:	1c11      	adds	r1, r2, #0
    2e2c:	4119      	asrs	r1, r3
    2e2e:	07ce      	lsls	r6, r1, #31
    2e30:	d512      	bpl.n	2e58 <nwkRxTaskHandler+0xfc>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    2e32:	79e1      	ldrb	r1, [r4, #7]
    2e34:	7a23      	ldrb	r3, [r4, #8]
    2e36:	021b      	lsls	r3, r3, #8
    2e38:	4aa3      	ldr	r2, [pc, #652]	; (30c8 <nwkRxTaskHandler+0x36c>)
    2e3a:	8812      	ldrh	r2, [r2, #0]
    2e3c:	430b      	orrs	r3, r1
    2e3e:	429a      	cmp	r2, r3
    2e40:	d000      	beq.n	2e44 <nwkRxTaskHandler+0xe8>
    2e42:	e132      	b.n	30aa <nwkRxTaskHandler+0x34e>
						nwkRouteRemove(
    2e44:	7be2      	ldrb	r2, [r4, #15]
    2e46:	7c20      	ldrb	r0, [r4, #16]
    2e48:	0200      	lsls	r0, r0, #8
    2e4a:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    2e4c:	7ae1      	ldrb	r1, [r4, #11]
    2e4e:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    2e50:	0fc9      	lsrs	r1, r1, #31
    2e52:	4b9f      	ldr	r3, [pc, #636]	; (30d0 <nwkRxTaskHandler+0x374>)
    2e54:	4798      	blx	r3
    2e56:	e128      	b.n	30aa <nwkRxTaskHandler+0x34e>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2e58:	2101      	movs	r1, #1
    2e5a:	4099      	lsls	r1, r3
    2e5c:	430a      	orrs	r2, r1
    2e5e:	70c2      	strb	r2, [r0, #3]
    2e60:	e14e      	b.n	3100 <nwkRxTaskHandler+0x3a4>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    2e62:	7082      	strb	r2, [r0, #2]
				entry->mask = (entry->mask << shift) | 1;
    2e64:	78c2      	ldrb	r2, [r0, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    2e66:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    2e68:	b2db      	uxtb	r3, r3
    2e6a:	409a      	lsls	r2, r3
    2e6c:	2301      	movs	r3, #1
    2e6e:	4313      	orrs	r3, r2
    2e70:	70c3      	strb	r3, [r0, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    2e72:	231f      	movs	r3, #31
    2e74:	7103      	strb	r3, [r0, #4]
    2e76:	e143      	b.n	3100 <nwkRxTaskHandler+0x3a4>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2e78:	1c1f      	adds	r7, r3, #0
    2e7a:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2e7c:	454b      	cmp	r3, r9
    2e7e:	d1bf      	bne.n	2e00 <nwkRxTaskHandler+0xa4>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2e80:	2f00      	cmp	r7, #0
    2e82:	d100      	bne.n	2e86 <nwkRxTaskHandler+0x12a>
    2e84:	e111      	b.n	30aa <nwkRxTaskHandler+0x34e>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    2e86:	7b61      	ldrb	r1, [r4, #13]
    2e88:	7ba2      	ldrb	r2, [r4, #14]
    2e8a:	0212      	lsls	r2, r2, #8
    2e8c:	430a      	orrs	r2, r1
    2e8e:	803a      	strh	r2, [r7, #0]
	freeEntry->seq = header->nwkSeq;
    2e90:	7b23      	ldrb	r3, [r4, #12]
    2e92:	70bb      	strb	r3, [r7, #2]
	freeEntry->mask = 1;
    2e94:	2301      	movs	r3, #1
    2e96:	70fb      	strb	r3, [r7, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2e98:	231f      	movs	r3, #31
    2e9a:	713b      	strb	r3, [r7, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2e9c:	488d      	ldr	r0, [pc, #564]	; (30d4 <nwkRxTaskHandler+0x378>)
    2e9e:	4b8e      	ldr	r3, [pc, #568]	; (30d8 <nwkRxTaskHandler+0x37c>)
    2ea0:	4798      	blx	r3
    2ea2:	e12d      	b.n	3100 <nwkRxTaskHandler+0x3a4>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2ea4:	4b88      	ldr	r3, [pc, #544]	; (30c8 <nwkRxTaskHandler+0x36c>)
    2ea6:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    2ea8:	7be0      	ldrb	r0, [r4, #15]
    2eaa:	7c23      	ldrb	r3, [r4, #16]
    2eac:	021b      	lsls	r3, r3, #8
    2eae:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2eb0:	429a      	cmp	r2, r3
    2eb2:	d010      	beq.n	2ed6 <nwkRxTaskHandler+0x17a>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    2eb4:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    2eb6:	074f      	lsls	r7, r1, #29
    2eb8:	d40a      	bmi.n	2ed0 <nwkRxTaskHandler+0x174>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    2eba:	1c20      	adds	r0, r4, #0
    2ebc:	4b87      	ldr	r3, [pc, #540]	; (30dc <nwkRxTaskHandler+0x380>)
    2ebe:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2ec0:	4b81      	ldr	r3, [pc, #516]	; (30c8 <nwkRxTaskHandler+0x36c>)
    2ec2:	881a      	ldrh	r2, [r3, #0]
    2ec4:	7be0      	ldrb	r0, [r4, #15]
    2ec6:	7c23      	ldrb	r3, [r4, #16]
    2ec8:	021b      	lsls	r3, r3, #8
    2eca:	4303      	orrs	r3, r0
    2ecc:	429a      	cmp	r2, r3
    2ece:	d002      	beq.n	2ed6 <nwkRxTaskHandler+0x17a>
    2ed0:	497c      	ldr	r1, [pc, #496]	; (30c4 <nwkRxTaskHandler+0x368>)
    2ed2:	428b      	cmp	r3, r1
    2ed4:	d108      	bne.n	2ee8 <nwkRxTaskHandler+0x18c>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2ed6:	7ae3      	ldrb	r3, [r4, #11]
    2ed8:	0798      	lsls	r0, r3, #30
    2eda:	d502      	bpl.n	2ee2 <nwkRxTaskHandler+0x186>
				frame->state = NWK_RX_STATE_DECRYPT;
    2edc:	2321      	movs	r3, #33	; 0x21
    2ede:	7023      	strb	r3, [r4, #0]
    2ee0:	e0e3      	b.n	30aa <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2ee2:	2322      	movs	r3, #34	; 0x22
    2ee4:	7023      	strb	r3, [r4, #0]
    2ee6:	e0e0      	b.n	30aa <nwkRxTaskHandler+0x34e>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2ee8:	79e1      	ldrb	r1, [r4, #7]
    2eea:	7a23      	ldrb	r3, [r4, #8]
    2eec:	021b      	lsls	r3, r3, #8
    2eee:	430b      	orrs	r3, r1
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d000      	beq.n	2ef6 <nwkRxTaskHandler+0x19a>
    2ef4:	e0d9      	b.n	30aa <nwkRxTaskHandler+0x34e>
			frame->state = NWK_RX_STATE_ROUTE;
    2ef6:	2323      	movs	r3, #35	; 0x23
    2ef8:	7023      	strb	r3, [r4, #0]
    2efa:	e0d6      	b.n	30aa <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    2efc:	1c20      	adds	r0, r4, #0
    2efe:	2100      	movs	r1, #0
    2f00:	4b77      	ldr	r3, [pc, #476]	; (30e0 <nwkRxTaskHandler+0x384>)
    2f02:	4798      	blx	r3
		}
		break;
    2f04:	e0d1      	b.n	30aa <nwkRxTaskHandler+0x34e>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    2f06:	2200      	movs	r2, #0
    2f08:	4b76      	ldr	r3, [pc, #472]	; (30e4 <nwkRxTaskHandler+0x388>)
    2f0a:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    2f0c:	7c61      	ldrb	r1, [r4, #17]
    2f0e:	0909      	lsrs	r1, r1, #4
    2f10:	b2ca      	uxtb	r2, r1
    2f12:	3202      	adds	r2, #2
    2f14:	0092      	lsls	r2, r2, #2
    2f16:	4b6c      	ldr	r3, [pc, #432]	; (30c8 <nwkRxTaskHandler+0x36c>)
    2f18:	58d2      	ldr	r2, [r2, r3]
    2f1a:	2a00      	cmp	r2, #0
    2f1c:	d05f      	beq.n	2fde <nwkRxTaskHandler+0x282>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    2f1e:	1ca3      	adds	r3, r4, #2
    2f20:	7b67      	ldrb	r7, [r4, #13]
    2f22:	7ba0      	ldrb	r0, [r4, #14]
    2f24:	0200      	lsls	r0, r0, #8
    2f26:	4338      	orrs	r0, r7
    2f28:	4680      	mov	r8, r0
    2f2a:	466e      	mov	r6, sp
    2f2c:	8030      	strh	r0, [r6, #0]
	ind.dstAddr = header->nwkDstAddr;
    2f2e:	7be0      	ldrb	r0, [r4, #15]
    2f30:	7c26      	ldrb	r6, [r4, #16]
    2f32:	0236      	lsls	r6, r6, #8
    2f34:	1c37      	adds	r7, r6, #0
    2f36:	4307      	orrs	r7, r0
    2f38:	4668      	mov	r0, sp
    2f3a:	8047      	strh	r7, [r0, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    2f3c:	7c66      	ldrb	r6, [r4, #17]
    2f3e:	0736      	lsls	r6, r6, #28
    2f40:	0f36      	lsrs	r6, r6, #28
    2f42:	7106      	strb	r6, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    2f44:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    2f46:	2181      	movs	r1, #129	; 0x81
    2f48:	5c61      	ldrb	r1, [r4, r1]
    2f4a:	2082      	movs	r0, #130	; 0x82
    2f4c:	5c26      	ldrb	r6, [r4, r0]
    2f4e:	0236      	lsls	r6, r6, #8
    2f50:	4331      	orrs	r1, r6
    2f52:	2083      	movs	r0, #131	; 0x83
    2f54:	5c26      	ldrb	r6, [r4, r0]
    2f56:	0436      	lsls	r6, r6, #16
    2f58:	4331      	orrs	r1, r6
    2f5a:	2084      	movs	r0, #132	; 0x84
    2f5c:	5c26      	ldrb	r6, [r4, r0]
    2f5e:	0636      	lsls	r6, r6, #24
    2f60:	4331      	orrs	r1, r6
    2f62:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    2f64:	1a59      	subs	r1, r3, r1
    2f66:	468c      	mov	ip, r1
    2f68:	7861      	ldrb	r1, [r4, #1]
    2f6a:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    2f6c:	4668      	mov	r0, sp
    2f6e:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    2f70:	2185      	movs	r1, #133	; 0x85
    2f72:	5c61      	ldrb	r1, [r4, r1]
    2f74:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    2f76:	2186      	movs	r1, #134	; 0x86
    2f78:	5c61      	ldrb	r1, [r4, r1]
    2f7a:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2f7c:	7ae3      	ldrb	r3, [r4, #11]
    2f7e:	07d9      	lsls	r1, r3, #31
    2f80:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2f82:	2602      	movs	r6, #2
    2f84:	4033      	ands	r3, r6
    2f86:	430b      	orrs	r3, r1
    2f88:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2f8a:	7ae1      	ldrb	r1, [r4, #11]
    2f8c:	0749      	lsls	r1, r1, #29
    2f8e:	0fc9      	lsrs	r1, r1, #31
    2f90:	0149      	lsls	r1, r1, #5
    2f92:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2f94:	7ae1      	ldrb	r1, [r4, #11]
    2f96:	0709      	lsls	r1, r1, #28
    2f98:	0fc9      	lsrs	r1, r1, #31
    2f9a:	0189      	lsls	r1, r1, #6
    2f9c:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2f9e:	4952      	ldr	r1, [pc, #328]	; (30e8 <nwkRxTaskHandler+0x38c>)
    2fa0:	187f      	adds	r7, r7, r1
    2fa2:	4279      	negs	r1, r7
    2fa4:	414f      	adcs	r7, r1
    2fa6:	00bf      	lsls	r7, r7, #2
    2fa8:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2faa:	7a67      	ldrb	r7, [r4, #9]
    2fac:	7aa1      	ldrb	r1, [r4, #10]
    2fae:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2fb0:	4339      	orrs	r1, r7
    2fb2:	4646      	mov	r6, r8
    2fb4:	1a70      	subs	r0, r6, r1
    2fb6:	4241      	negs	r1, r0
    2fb8:	4148      	adcs	r0, r1
    2fba:	00c0      	lsls	r0, r0, #3
    2fbc:	4303      	orrs	r3, r0
    2fbe:	466f      	mov	r7, sp
    2fc0:	71bb      	strb	r3, [r7, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2fc2:	7960      	ldrb	r0, [r4, #5]
    2fc4:	79a1      	ldrb	r1, [r4, #6]
    2fc6:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2fc8:	4301      	orrs	r1, r0
    2fca:	4847      	ldr	r0, [pc, #284]	; (30e8 <nwkRxTaskHandler+0x38c>)
    2fcc:	1809      	adds	r1, r1, r0
    2fce:	4248      	negs	r0, r1
    2fd0:	4141      	adcs	r1, r0
    2fd2:	0109      	lsls	r1, r1, #4
    2fd4:	430b      	orrs	r3, r1
    2fd6:	71bb      	strb	r3, [r7, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2fd8:	4668      	mov	r0, sp
    2fda:	4790      	blx	r2
    2fdc:	e000      	b.n	2fe0 <nwkRxTaskHandler+0x284>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2fde:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2fe0:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    2fe2:	07db      	lsls	r3, r3, #31
    2fe4:	17db      	asrs	r3, r3, #31
    2fe6:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2fe8:	79e3      	ldrb	r3, [r4, #7]
    2fea:	7a22      	ldrb	r2, [r4, #8]
    2fec:	0212      	lsls	r2, r2, #8
    2fee:	431a      	orrs	r2, r3
    2ff0:	4b34      	ldr	r3, [pc, #208]	; (30c4 <nwkRxTaskHandler+0x368>)
    2ff2:	429a      	cmp	r2, r3
    2ff4:	d10b      	bne.n	300e <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2ff6:	7be1      	ldrb	r1, [r4, #15]
    2ff8:	7c23      	ldrb	r3, [r4, #16]
    2ffa:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2ffc:	4a32      	ldr	r2, [pc, #200]	; (30c8 <nwkRxTaskHandler+0x36c>)
    2ffe:	8812      	ldrh	r2, [r2, #0]
    3000:	430b      	orrs	r3, r1
    3002:	429a      	cmp	r2, r3
    3004:	d103      	bne.n	300e <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    3006:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    3008:	0719      	lsls	r1, r3, #28
    300a:	d400      	bmi.n	300e <nwkRxTaskHandler+0x2b2>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    300c:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    300e:	7963      	ldrb	r3, [r4, #5]
    3010:	79a2      	ldrb	r2, [r4, #6]
    3012:	0212      	lsls	r2, r2, #8
    3014:	431a      	orrs	r2, r3
    3016:	4b2b      	ldr	r3, [pc, #172]	; (30c4 <nwkRxTaskHandler+0x368>)
    3018:	429a      	cmp	r2, r3
    301a:	d03c      	beq.n	3096 <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    301c:	4b2a      	ldr	r3, [pc, #168]	; (30c8 <nwkRxTaskHandler+0x36c>)
    301e:	881a      	ldrh	r2, [r3, #0]
    3020:	4b28      	ldr	r3, [pc, #160]	; (30c4 <nwkRxTaskHandler+0x368>)
    3022:	429a      	cmp	r2, r3
    3024:	d037      	beq.n	3096 <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (ack) {
    3026:	2800      	cmp	r0, #0
    3028:	d035      	beq.n	3096 <nwkRxTaskHandler+0x33a>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    302a:	4b30      	ldr	r3, [pc, #192]	; (30ec <nwkRxTaskHandler+0x390>)
    302c:	4798      	blx	r3
    302e:	1e07      	subs	r7, r0, #0
    3030:	d031      	beq.n	3096 <nwkRxTaskHandler+0x33a>
		return;
	}

	nwkFrameCommandInit(ack);
    3032:	4b2f      	ldr	r3, [pc, #188]	; (30f0 <nwkRxTaskHandler+0x394>)
    3034:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    3036:	787b      	ldrb	r3, [r7, #1]
    3038:	3303      	adds	r3, #3
    303a:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    303c:	2200      	movs	r2, #0
    303e:	2389      	movs	r3, #137	; 0x89
    3040:	54fa      	strb	r2, [r7, r3]
    3042:	238a      	movs	r3, #138	; 0x8a
    3044:	54fa      	strb	r2, [r7, r3]
    3046:	238b      	movs	r3, #139	; 0x8b
    3048:	54fa      	strb	r2, [r7, r3]
    304a:	238c      	movs	r3, #140	; 0x8c
    304c:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    304e:	7ae2      	ldrb	r2, [r4, #11]
    3050:	2302      	movs	r3, #2
    3052:	401a      	ands	r2, r3
    3054:	7afb      	ldrb	r3, [r7, #11]
    3056:	2102      	movs	r1, #2
    3058:	438b      	bics	r3, r1
    305a:	4313      	orrs	r3, r2
    305c:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    305e:	7b62      	ldrb	r2, [r4, #13]
    3060:	7ba3      	ldrb	r3, [r4, #14]
    3062:	73fa      	strb	r2, [r7, #15]
    3064:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    3066:	2381      	movs	r3, #129	; 0x81
    3068:	5cfa      	ldrb	r2, [r7, r3]
    306a:	2382      	movs	r3, #130	; 0x82
    306c:	5cfb      	ldrb	r3, [r7, r3]
    306e:	021b      	lsls	r3, r3, #8
    3070:	4313      	orrs	r3, r2
    3072:	2283      	movs	r2, #131	; 0x83
    3074:	5cba      	ldrb	r2, [r7, r2]
    3076:	0412      	lsls	r2, r2, #16
    3078:	4313      	orrs	r3, r2
    307a:	2284      	movs	r2, #132	; 0x84
    307c:	5cba      	ldrb	r2, [r7, r2]
    307e:	0612      	lsls	r2, r2, #24
    3080:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    3082:	2200      	movs	r2, #0
    3084:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    3086:	4a17      	ldr	r2, [pc, #92]	; (30e4 <nwkRxTaskHandler+0x388>)
    3088:	7812      	ldrb	r2, [r2, #0]
    308a:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    308c:	7b22      	ldrb	r2, [r4, #12]
    308e:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    3090:	1c38      	adds	r0, r7, #0
    3092:	4b18      	ldr	r3, [pc, #96]	; (30f4 <nwkRxTaskHandler+0x398>)
    3094:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    3096:	2324      	movs	r3, #36	; 0x24
    3098:	7023      	strb	r3, [r4, #0]
    309a:	e006      	b.n	30aa <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    309c:	1c20      	adds	r0, r4, #0
    309e:	4b16      	ldr	r3, [pc, #88]	; (30f8 <nwkRxTaskHandler+0x39c>)
    30a0:	4798      	blx	r3
		}
		break;
    30a2:	e002      	b.n	30aa <nwkRxTaskHandler+0x34e>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    30a4:	1c20      	adds	r0, r4, #0
    30a6:	4b15      	ldr	r3, [pc, #84]	; (30fc <nwkRxTaskHandler+0x3a0>)
    30a8:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    30aa:	1c20      	adds	r0, r4, #0
    30ac:	47a8      	blx	r5
    30ae:	1e04      	subs	r4, r0, #0
    30b0:	d000      	beq.n	30b4 <nwkRxTaskHandler+0x358>
    30b2:	e65f      	b.n	2d74 <nwkRxTaskHandler+0x18>
    30b4:	e02d      	b.n	3112 <nwkRxTaskHandler+0x3b6>
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	00002885 	.word	0x00002885
    30bc:	2000059c 	.word	0x2000059c
    30c0:	00007efc 	.word	0x00007efc
    30c4:	0000ffff 	.word	0x0000ffff
    30c8:	200008dc 	.word	0x200008dc
    30cc:	000029d5 	.word	0x000029d5
    30d0:	000029bd 	.word	0x000029bd
    30d4:	200005dc 	.word	0x200005dc
    30d8:	00003b39 	.word	0x00003b39
    30dc:	00003549 	.word	0x00003549
    30e0:	0000314d 	.word	0x0000314d
    30e4:	200005d8 	.word	0x200005d8
    30e8:	ffff0001 	.word	0xffff0001
    30ec:	00002801 	.word	0x00002801
    30f0:	000028c1 	.word	0x000028c1
    30f4:	00003489 	.word	0x00003489
    30f8:	00002b61 	.word	0x00002b61
    30fc:	00002871 	.word	0x00002871
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    3100:	79e1      	ldrb	r1, [r4, #7]
    3102:	7a22      	ldrb	r2, [r4, #8]
    3104:	0212      	lsls	r2, r2, #8
    3106:	430a      	orrs	r2, r1
    3108:	4b04      	ldr	r3, [pc, #16]	; (311c <nwkRxTaskHandler+0x3c0>)
    310a:	429a      	cmp	r2, r3
    310c:	d000      	beq.n	3110 <nwkRxTaskHandler+0x3b4>
    310e:	e6d7      	b.n	2ec0 <nwkRxTaskHandler+0x164>
    3110:	e6c8      	b.n	2ea4 <nwkRxTaskHandler+0x148>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    3112:	b005      	add	sp, #20
    3114:	bc0c      	pop	{r2, r3}
    3116:	4690      	mov	r8, r2
    3118:	4699      	mov	r9, r3
    311a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    311c:	0000ffff 	.word	0x0000ffff

00003120 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    3120:	2300      	movs	r3, #0
    3122:	4a02      	ldr	r2, [pc, #8]	; (312c <nwkSecurityInit+0xc>)
    3124:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    3126:	4a02      	ldr	r2, [pc, #8]	; (3130 <nwkSecurityInit+0x10>)
    3128:	6013      	str	r3, [r2, #0]
}
    312a:	4770      	bx	lr
    312c:	200005f0 	.word	0x200005f0
    3130:	200005f4 	.word	0x200005f4

00003134 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    3134:	b508      	push	{r3, lr}
    3136:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    3138:	4802      	ldr	r0, [pc, #8]	; (3144 <NWK_SetSecurityKey+0x10>)
    313a:	2210      	movs	r2, #16
    313c:	4b02      	ldr	r3, [pc, #8]	; (3148 <NWK_SetSecurityKey+0x14>)
    313e:	4798      	blx	r3
}
    3140:	bd08      	pop	{r3, pc}
    3142:	46c0      	nop			; (mov r8, r8)
    3144:	20000924 	.word	0x20000924
    3148:	00006db9 	.word	0x00006db9

0000314c <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    314c:	2900      	cmp	r1, #0
    314e:	d002      	beq.n	3156 <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    3150:	2330      	movs	r3, #48	; 0x30
    3152:	7003      	strb	r3, [r0, #0]
    3154:	e001      	b.n	315a <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    3156:	2331      	movs	r3, #49	; 0x31
    3158:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    315a:	4b02      	ldr	r3, [pc, #8]	; (3164 <nwkSecurityProcess+0x18>)
    315c:	781a      	ldrb	r2, [r3, #0]
    315e:	3201      	adds	r2, #1
    3160:	701a      	strb	r2, [r3, #0]
}
    3162:	4770      	bx	lr
    3164:	200005f0 	.word	0x200005f0

00003168 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    3168:	b5f0      	push	{r4, r5, r6, r7, lr}
    316a:	4647      	mov	r7, r8
    316c:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    316e:	4b24      	ldr	r3, [pc, #144]	; (3200 <SYS_EncryptConf+0x98>)
    3170:	681e      	ldr	r6, [r3, #0]
    3172:	4b24      	ldr	r3, [pc, #144]	; (3204 <SYS_EncryptConf+0x9c>)
    3174:	781b      	ldrb	r3, [r3, #0]
    3176:	4698      	mov	r8, r3
    3178:	2381      	movs	r3, #129	; 0x81
    317a:	5cf3      	ldrb	r3, [r6, r3]
    317c:	2282      	movs	r2, #130	; 0x82
    317e:	5cb1      	ldrb	r1, [r6, r2]
    3180:	0209      	lsls	r1, r1, #8
    3182:	4319      	orrs	r1, r3
    3184:	2383      	movs	r3, #131	; 0x83
    3186:	5cf4      	ldrb	r4, [r6, r3]
    3188:	0424      	lsls	r4, r4, #16
    318a:	4321      	orrs	r1, r4
    318c:	2384      	movs	r3, #132	; 0x84
    318e:	5cf4      	ldrb	r4, [r6, r3]
    3190:	0624      	lsls	r4, r4, #24
    3192:	4321      	orrs	r1, r4
    3194:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    3196:	4b1c      	ldr	r3, [pc, #112]	; (3208 <SYS_EncryptConf+0xa0>)
    3198:	781b      	ldrb	r3, [r3, #0]
    319a:	469c      	mov	ip, r3
    319c:	1c1f      	adds	r7, r3, #0
    319e:	2b10      	cmp	r3, #16
    31a0:	d900      	bls.n	31a4 <SYS_EncryptConf+0x3c>
    31a2:	2710      	movs	r7, #16
    31a4:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    31a6:	2f00      	cmp	r7, #0
    31a8:	d016      	beq.n	31d8 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    31aa:	4b18      	ldr	r3, [pc, #96]	; (320c <SYS_EncryptConf+0xa4>)
    31ac:	781d      	ldrb	r5, [r3, #0]
    31ae:	1c0b      	adds	r3, r1, #0
    31b0:	4a17      	ldr	r2, [pc, #92]	; (3210 <SYS_EncryptConf+0xa8>)
    31b2:	1e7c      	subs	r4, r7, #1
    31b4:	b2e4      	uxtb	r4, r4
    31b6:	190c      	adds	r4, r1, r4
    31b8:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    31ba:	7810      	ldrb	r0, [r2, #0]
    31bc:	7819      	ldrb	r1, [r3, #0]
    31be:	4041      	eors	r1, r0
    31c0:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    31c2:	2d00      	cmp	r5, #0
    31c4:	d001      	beq.n	31ca <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    31c6:	7011      	strb	r1, [r2, #0]
    31c8:	e002      	b.n	31d0 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    31ca:	7810      	ldrb	r0, [r2, #0]
    31cc:	4041      	eors	r1, r0
    31ce:	7011      	strb	r1, [r2, #0]
    31d0:	3301      	adds	r3, #1
    31d2:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    31d4:	42a3      	cmp	r3, r4
    31d6:	d1f0      	bne.n	31ba <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    31d8:	4643      	mov	r3, r8
    31da:	18fa      	adds	r2, r7, r3
    31dc:	4b09      	ldr	r3, [pc, #36]	; (3204 <SYS_EncryptConf+0x9c>)
    31de:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    31e0:	4663      	mov	r3, ip
    31e2:	1bdf      	subs	r7, r3, r7
    31e4:	b2ff      	uxtb	r7, r7
    31e6:	4b08      	ldr	r3, [pc, #32]	; (3208 <SYS_EncryptConf+0xa0>)
    31e8:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    31ea:	2f00      	cmp	r7, #0
    31ec:	d002      	beq.n	31f4 <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    31ee:	2332      	movs	r3, #50	; 0x32
    31f0:	7033      	strb	r3, [r6, #0]
    31f2:	e001      	b.n	31f8 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    31f4:	2334      	movs	r3, #52	; 0x34
    31f6:	7033      	strb	r3, [r6, #0]
	}
}
    31f8:	bc04      	pop	{r2}
    31fa:	4690      	mov	r8, r2
    31fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	200005f4 	.word	0x200005f4
    3204:	200005f8 	.word	0x200005f8
    3208:	200005f9 	.word	0x200005f9
    320c:	200005fa 	.word	0x200005fa
    3210:	200005fc 	.word	0x200005fc

00003214 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    3214:	b530      	push	{r4, r5, lr}
    3216:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    3218:	4b56      	ldr	r3, [pc, #344]	; (3374 <nwkSecurityTaskHandler+0x160>)
    321a:	781b      	ldrb	r3, [r3, #0]
    321c:	2b00      	cmp	r3, #0
    321e:	d100      	bne.n	3222 <nwkSecurityTaskHandler+0xe>
    3220:	e0a5      	b.n	336e <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    3222:	4b55      	ldr	r3, [pc, #340]	; (3378 <nwkSecurityTaskHandler+0x164>)
    3224:	681c      	ldr	r4, [r3, #0]
    3226:	2c00      	cmp	r4, #0
    3228:	d100      	bne.n	322c <nwkSecurityTaskHandler+0x18>
    322a:	e09b      	b.n	3364 <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    322c:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    322e:	2b34      	cmp	r3, #52	; 0x34
    3230:	d145      	bne.n	32be <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    3232:	2381      	movs	r3, #129	; 0x81
    3234:	5ce3      	ldrb	r3, [r4, r3]
    3236:	2282      	movs	r2, #130	; 0x82
    3238:	5ca1      	ldrb	r1, [r4, r2]
    323a:	0209      	lsls	r1, r1, #8
    323c:	4319      	orrs	r1, r3
    323e:	2383      	movs	r3, #131	; 0x83
    3240:	5ce3      	ldrb	r3, [r4, r3]
    3242:	041b      	lsls	r3, r3, #16
    3244:	4319      	orrs	r1, r3
    3246:	2384      	movs	r3, #132	; 0x84
    3248:	5ce3      	ldrb	r3, [r4, r3]
    324a:	061b      	lsls	r3, r3, #24
    324c:	4319      	orrs	r1, r3
    324e:	4b4b      	ldr	r3, [pc, #300]	; (337c <nwkSecurityTaskHandler+0x168>)
    3250:	781b      	ldrb	r3, [r3, #0]
    3252:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3254:	4b4a      	ldr	r3, [pc, #296]	; (3380 <nwkSecurityTaskHandler+0x16c>)
    3256:	685d      	ldr	r5, [r3, #4]
    3258:	681a      	ldr	r2, [r3, #0]
    325a:	4055      	eors	r5, r2
    325c:	689a      	ldr	r2, [r3, #8]
    325e:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    3260:	68db      	ldr	r3, [r3, #12]
    3262:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    3264:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    3266:	4b47      	ldr	r3, [pc, #284]	; (3384 <nwkSecurityTaskHandler+0x170>)
    3268:	781b      	ldrb	r3, [r3, #0]
    326a:	2b00      	cmp	r3, #0
    326c:	d009      	beq.n	3282 <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    326e:	1c08      	adds	r0, r1, #0
    3270:	4669      	mov	r1, sp
    3272:	2204      	movs	r2, #4
    3274:	4b44      	ldr	r3, [pc, #272]	; (3388 <nwkSecurityTaskHandler+0x174>)
    3276:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    3278:	7863      	ldrb	r3, [r4, #1]
    327a:	3304      	adds	r3, #4
    327c:	7063      	strb	r3, [r4, #1]
		return true;
    327e:	2101      	movs	r1, #1
    3280:	e008      	b.n	3294 <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    3282:	a801      	add	r0, sp, #4
    3284:	2204      	movs	r2, #4
    3286:	4b40      	ldr	r3, [pc, #256]	; (3388 <nwkSecurityTaskHandler+0x174>)
    3288:	4798      	blx	r3
		return vmic == tmic;
    328a:	9b01      	ldr	r3, [sp, #4]
    328c:	1ae9      	subs	r1, r5, r3
    328e:	424d      	negs	r5, r1
    3290:	4169      	adcs	r1, r5
    3292:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    3294:	4b3b      	ldr	r3, [pc, #236]	; (3384 <nwkSecurityTaskHandler+0x170>)
    3296:	781b      	ldrb	r3, [r3, #0]
    3298:	2b00      	cmp	r3, #0
    329a:	d004      	beq.n	32a6 <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    329c:	4b36      	ldr	r3, [pc, #216]	; (3378 <nwkSecurityTaskHandler+0x164>)
    329e:	6818      	ldr	r0, [r3, #0]
    32a0:	4b3a      	ldr	r3, [pc, #232]	; (338c <nwkSecurityTaskHandler+0x178>)
    32a2:	4798      	blx	r3
    32a4:	e003      	b.n	32ae <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    32a6:	4b34      	ldr	r3, [pc, #208]	; (3378 <nwkSecurityTaskHandler+0x164>)
    32a8:	6818      	ldr	r0, [r3, #0]
    32aa:	4b39      	ldr	r3, [pc, #228]	; (3390 <nwkSecurityTaskHandler+0x17c>)
    32ac:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    32ae:	2200      	movs	r2, #0
    32b0:	4b31      	ldr	r3, [pc, #196]	; (3378 <nwkSecurityTaskHandler+0x164>)
    32b2:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    32b4:	4b2f      	ldr	r3, [pc, #188]	; (3374 <nwkSecurityTaskHandler+0x160>)
    32b6:	781a      	ldrb	r2, [r3, #0]
    32b8:	3a01      	subs	r2, #1
    32ba:	701a      	strb	r2, [r3, #0]
    32bc:	e057      	b.n	336e <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    32be:	2b32      	cmp	r3, #50	; 0x32
    32c0:	d155      	bne.n	336e <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    32c2:	2333      	movs	r3, #51	; 0x33
    32c4:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    32c6:	482e      	ldr	r0, [pc, #184]	; (3380 <nwkSecurityTaskHandler+0x16c>)
    32c8:	4932      	ldr	r1, [pc, #200]	; (3394 <nwkSecurityTaskHandler+0x180>)
    32ca:	4b33      	ldr	r3, [pc, #204]	; (3398 <nwkSecurityTaskHandler+0x184>)
    32cc:	4798      	blx	r3
    32ce:	e04e      	b.n	336e <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    32d0:	7803      	ldrb	r3, [r0, #0]
    32d2:	3b30      	subs	r3, #48	; 0x30
    32d4:	2b01      	cmp	r3, #1
    32d6:	d847      	bhi.n	3368 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    32d8:	4b27      	ldr	r3, [pc, #156]	; (3378 <nwkSecurityTaskHandler+0x164>)
    32da:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    32dc:	4a28      	ldr	r2, [pc, #160]	; (3380 <nwkSecurityTaskHandler+0x16c>)
    32de:	7b01      	ldrb	r1, [r0, #12]
    32e0:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    32e2:	7bc1      	ldrb	r1, [r0, #15]
    32e4:	7c04      	ldrb	r4, [r0, #16]
    32e6:	0224      	lsls	r4, r4, #8
    32e8:	430c      	orrs	r4, r1
    32ea:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    32ec:	7c41      	ldrb	r1, [r0, #17]
    32ee:	0909      	lsrs	r1, r1, #4
    32f0:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    32f2:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    32f4:	7b41      	ldrb	r1, [r0, #13]
    32f6:	7b84      	ldrb	r4, [r0, #14]
    32f8:	0224      	lsls	r4, r4, #8
    32fa:	430c      	orrs	r4, r1
    32fc:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    32fe:	7c41      	ldrb	r1, [r0, #17]
    3300:	0709      	lsls	r1, r1, #28
    3302:	0f09      	lsrs	r1, r1, #28
    3304:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    3306:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    3308:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    330a:	7944      	ldrb	r4, [r0, #5]
    330c:	7983      	ldrb	r3, [r0, #6]
    330e:	021b      	lsls	r3, r3, #8
    3310:	4323      	orrs	r3, r4
    3312:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    3314:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    3316:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    3318:	7803      	ldrb	r3, [r0, #0]
    331a:	2b31      	cmp	r3, #49	; 0x31
    331c:	d102      	bne.n	3324 <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    331e:	7843      	ldrb	r3, [r0, #1]
    3320:	3b04      	subs	r3, #4
    3322:	7043      	strb	r3, [r0, #1]
    3324:	1c83      	adds	r3, r0, #2
    3326:	2281      	movs	r2, #129	; 0x81
    3328:	5c81      	ldrb	r1, [r0, r2]
    332a:	2282      	movs	r2, #130	; 0x82
    332c:	5c82      	ldrb	r2, [r0, r2]
    332e:	0212      	lsls	r2, r2, #8
    3330:	430a      	orrs	r2, r1
    3332:	2183      	movs	r1, #131	; 0x83
    3334:	5c41      	ldrb	r1, [r0, r1]
    3336:	0409      	lsls	r1, r1, #16
    3338:	430a      	orrs	r2, r1
    333a:	2184      	movs	r1, #132	; 0x84
    333c:	5c41      	ldrb	r1, [r0, r1]
    333e:	0609      	lsls	r1, r1, #24
    3340:	430a      	orrs	r2, r1
    3342:	1a9a      	subs	r2, r3, r2
    3344:	7843      	ldrb	r3, [r0, #1]
    3346:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    3348:	4b14      	ldr	r3, [pc, #80]	; (339c <nwkSecurityTaskHandler+0x188>)
    334a:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    334c:	2200      	movs	r2, #0
    334e:	4b0b      	ldr	r3, [pc, #44]	; (337c <nwkSecurityTaskHandler+0x168>)
    3350:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    3352:	7802      	ldrb	r2, [r0, #0]
    3354:	3a30      	subs	r2, #48	; 0x30
    3356:	4253      	negs	r3, r2
    3358:	415a      	adcs	r2, r3
    335a:	4b0a      	ldr	r3, [pc, #40]	; (3384 <nwkSecurityTaskHandler+0x170>)
    335c:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    335e:	2332      	movs	r3, #50	; 0x32
    3360:	7003      	strb	r3, [r0, #0]
    3362:	e004      	b.n	336e <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    3364:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3366:	4c0e      	ldr	r4, [pc, #56]	; (33a0 <nwkSecurityTaskHandler+0x18c>)
    3368:	47a0      	blx	r4
    336a:	2800      	cmp	r0, #0
    336c:	d1b0      	bne.n	32d0 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    336e:	b003      	add	sp, #12
    3370:	bd30      	pop	{r4, r5, pc}
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	200005f0 	.word	0x200005f0
    3378:	200005f4 	.word	0x200005f4
    337c:	200005f8 	.word	0x200005f8
    3380:	200005fc 	.word	0x200005fc
    3384:	200005fa 	.word	0x200005fa
    3388:	00006db9 	.word	0x00006db9
    338c:	00003611 	.word	0x00003611
    3390:	00002d4d 	.word	0x00002d4d
    3394:	20000924 	.word	0x20000924
    3398:	00003a41 	.word	0x00003a41
    339c:	200005f9 	.word	0x200005f9
    33a0:	00002885 	.word	0x00002885

000033a4 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    33a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33a6:	4647      	mov	r7, r8
    33a8:	b480      	push	{r7}
    33aa:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    33ac:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    33ae:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    33b0:	4c0f      	ldr	r4, [pc, #60]	; (33f0 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    33b2:	2686      	movs	r6, #134	; 0x86
    33b4:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    33b6:	e010      	b.n	33da <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    33b8:	7803      	ldrb	r3, [r0, #0]
    33ba:	2b11      	cmp	r3, #17
    33bc:	d10d      	bne.n	33da <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    33be:	5d82      	ldrb	r2, [r0, r6]
    33c0:	5d43      	ldrb	r3, [r0, r5]
    33c2:	021b      	lsls	r3, r3, #8
    33c4:	4313      	orrs	r3, r2
    33c6:	3b01      	subs	r3, #1
    33c8:	b29b      	uxth	r3, r3
    33ca:	5583      	strb	r3, [r0, r6]
    33cc:	0a1a      	lsrs	r2, r3, #8
    33ce:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    33d0:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    33d2:	2b00      	cmp	r3, #0
    33d4:	d101      	bne.n	33da <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    33d6:	2313      	movs	r3, #19
    33d8:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    33da:	47a0      	blx	r4
    33dc:	2800      	cmp	r0, #0
    33de:	d1eb      	bne.n	33b8 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    33e0:	2f00      	cmp	r7, #0
    33e2:	d002      	beq.n	33ea <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    33e4:	4640      	mov	r0, r8
    33e6:	4b03      	ldr	r3, [pc, #12]	; (33f4 <nwkTxDelayTimerHandler+0x50>)
    33e8:	4798      	blx	r3
	}
}
    33ea:	bc04      	pop	{r2}
    33ec:	4690      	mov	r8, r2
    33ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33f0:	00002885 	.word	0x00002885
    33f4:	00003b39 	.word	0x00003b39

000033f8 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    33f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33fa:	4647      	mov	r7, r8
    33fc:	b480      	push	{r7}
    33fe:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    3400:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    3402:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3404:	4c11      	ldr	r4, [pc, #68]	; (344c <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    3406:	2686      	movs	r6, #134	; 0x86
    3408:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    340a:	e013      	b.n	3434 <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    340c:	7803      	ldrb	r3, [r0, #0]
    340e:	2b16      	cmp	r3, #22
    3410:	d110      	bne.n	3434 <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    3412:	5d82      	ldrb	r2, [r0, r6]
    3414:	5d43      	ldrb	r3, [r0, r5]
    3416:	021b      	lsls	r3, r3, #8
    3418:	4313      	orrs	r3, r2
    341a:	3b01      	subs	r3, #1
    341c:	b29b      	uxth	r3, r3
    341e:	5583      	strb	r3, [r0, r6]
    3420:	0a1a      	lsrs	r2, r3, #8
    3422:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    3424:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    3426:	2b00      	cmp	r3, #0
    3428:	d104      	bne.n	3434 <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    342a:	2317      	movs	r3, #23
    342c:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    342e:	2210      	movs	r2, #16
    3430:	2385      	movs	r3, #133	; 0x85
    3432:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3434:	47a0      	blx	r4
    3436:	2800      	cmp	r0, #0
    3438:	d1e8      	bne.n	340c <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    343a:	2f00      	cmp	r7, #0
    343c:	d002      	beq.n	3444 <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    343e:	4640      	mov	r0, r8
    3440:	4b03      	ldr	r3, [pc, #12]	; (3450 <nwkTxAckWaitTimerHandler+0x58>)
    3442:	4798      	blx	r3
	}
}
    3444:	bc04      	pop	{r2}
    3446:	4690      	mov	r8, r2
    3448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	00002885 	.word	0x00002885
    3450:	00003b39 	.word	0x00003b39

00003454 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    3454:	2200      	movs	r2, #0
    3456:	4b07      	ldr	r3, [pc, #28]	; (3474 <nwkTxInit+0x20>)
    3458:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    345a:	4b07      	ldr	r3, [pc, #28]	; (3478 <nwkTxInit+0x24>)
    345c:	2132      	movs	r1, #50	; 0x32
    345e:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3460:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    3462:	4906      	ldr	r1, [pc, #24]	; (347c <nwkTxInit+0x28>)
    3464:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    3466:	4b06      	ldr	r3, [pc, #24]	; (3480 <nwkTxInit+0x2c>)
    3468:	210a      	movs	r1, #10
    346a:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    346c:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    346e:	4a05      	ldr	r2, [pc, #20]	; (3484 <nwkTxInit+0x30>)
    3470:	611a      	str	r2, [r3, #16]
}
    3472:	4770      	bx	lr
    3474:	20000620 	.word	0x20000620
    3478:	2000060c 	.word	0x2000060c
    347c:	000033f9 	.word	0x000033f9
    3480:	20000624 	.word	0x20000624
    3484:	000033a5 	.word	0x000033a5

00003488 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    3488:	b510      	push	{r4, lr}
    348a:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    348c:	2388      	movs	r3, #136	; 0x88
    348e:	5cc3      	ldrb	r3, [r0, r3]
    3490:	0799      	lsls	r1, r3, #30
    3492:	d502      	bpl.n	349a <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    3494:	2212      	movs	r2, #18
    3496:	7002      	strb	r2, [r0, #0]
    3498:	e007      	b.n	34aa <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    349a:	7ac2      	ldrb	r2, [r0, #11]
    349c:	0791      	lsls	r1, r2, #30
    349e:	d502      	bpl.n	34a6 <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    34a0:	2210      	movs	r2, #16
    34a2:	7002      	strb	r2, [r0, #0]
    34a4:	e001      	b.n	34aa <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    34a6:	2212      	movs	r2, #18
    34a8:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    34aa:	2100      	movs	r1, #0
    34ac:	2285      	movs	r2, #133	; 0x85
    34ae:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    34b0:	07da      	lsls	r2, r3, #31
    34b2:	d504      	bpl.n	34be <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    34b4:	2101      	movs	r1, #1
    34b6:	4249      	negs	r1, r1
    34b8:	7161      	strb	r1, [r4, #5]
    34ba:	71a1      	strb	r1, [r4, #6]
    34bc:	e004      	b.n	34c8 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    34be:	491e      	ldr	r1, [pc, #120]	; (3538 <nwkTxFrame+0xb0>)
    34c0:	7888      	ldrb	r0, [r1, #2]
    34c2:	7160      	strb	r0, [r4, #5]
    34c4:	78c9      	ldrb	r1, [r1, #3]
    34c6:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    34c8:	2205      	movs	r2, #5
    34ca:	421a      	tst	r2, r3
    34cc:	d103      	bne.n	34d6 <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    34ce:	1c20      	adds	r0, r4, #0
    34d0:	4b1a      	ldr	r3, [pc, #104]	; (353c <nwkTxFrame+0xb4>)
    34d2:	4798      	blx	r3
    34d4:	e003      	b.n	34de <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    34d6:	7be1      	ldrb	r1, [r4, #15]
    34d8:	7c22      	ldrb	r2, [r4, #16]
    34da:	71e1      	strb	r1, [r4, #7]
    34dc:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    34de:	4a16      	ldr	r2, [pc, #88]	; (3538 <nwkTxFrame+0xb0>)
    34e0:	7811      	ldrb	r1, [r2, #0]
    34e2:	7261      	strb	r1, [r4, #9]
    34e4:	7851      	ldrb	r1, [r2, #1]
    34e6:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    34e8:	7951      	ldrb	r1, [r2, #5]
    34ea:	3101      	adds	r1, #1
    34ec:	b2c9      	uxtb	r1, r1
    34ee:	7151      	strb	r1, [r2, #5]
    34f0:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    34f2:	79e1      	ldrb	r1, [r4, #7]
    34f4:	7a22      	ldrb	r2, [r4, #8]
    34f6:	0212      	lsls	r2, r2, #8
    34f8:	430a      	orrs	r2, r1
    34fa:	4b11      	ldr	r3, [pc, #68]	; (3540 <nwkTxFrame+0xb8>)
    34fc:	429a      	cmp	r2, r3
    34fe:	d110      	bne.n	3522 <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    3500:	2341      	movs	r3, #65	; 0x41
    3502:	70a3      	strb	r3, [r4, #2]
    3504:	2378      	movs	r3, #120	; 0x78
    3506:	425b      	negs	r3, r3
    3508:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    350a:	4b0e      	ldr	r3, [pc, #56]	; (3544 <nwkTxFrame+0xbc>)
    350c:	4798      	blx	r3
    350e:	2307      	movs	r3, #7
    3510:	4018      	ands	r0, r3
    3512:	3001      	adds	r0, #1
    3514:	2386      	movs	r3, #134	; 0x86
    3516:	54e0      	strb	r0, [r4, r3]
    3518:	0a00      	lsrs	r0, r0, #8
    351a:	b280      	uxth	r0, r0
    351c:	2387      	movs	r3, #135	; 0x87
    351e:	54e0      	strb	r0, [r4, r3]
    3520:	e009      	b.n	3536 <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    3522:	2361      	movs	r3, #97	; 0x61
    3524:	70a3      	strb	r3, [r4, #2]
    3526:	2378      	movs	r3, #120	; 0x78
    3528:	425b      	negs	r3, r3
    352a:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    352c:	2200      	movs	r2, #0
    352e:	2386      	movs	r3, #134	; 0x86
    3530:	54e2      	strb	r2, [r4, r3]
    3532:	2387      	movs	r3, #135	; 0x87
    3534:	54e2      	strb	r2, [r4, r3]
	}
}
    3536:	bd10      	pop	{r4, pc}
    3538:	200008dc 	.word	0x200008dc
    353c:	00002b19 	.word	0x00002b19
    3540:	0000ffff 	.word	0x0000ffff
    3544:	00006e11 	.word	0x00006e11

00003548 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    3548:	b538      	push	{r3, r4, r5, lr}
    354a:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    354c:	4b1d      	ldr	r3, [pc, #116]	; (35c4 <nwkTxBroadcastFrame+0x7c>)
    354e:	4798      	blx	r3
    3550:	1e04      	subs	r4, r0, #0
    3552:	d036      	beq.n	35c2 <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    3554:	2312      	movs	r3, #18
    3556:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    3558:	786b      	ldrb	r3, [r5, #1]
    355a:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    355c:	2200      	movs	r2, #0
    355e:	2385      	movs	r3, #133	; 0x85
    3560:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3562:	4b19      	ldr	r3, [pc, #100]	; (35c8 <nwkTxBroadcastFrame+0x80>)
    3564:	4798      	blx	r3
    3566:	2307      	movs	r3, #7
    3568:	4018      	ands	r0, r3
    356a:	3001      	adds	r0, #1
    356c:	2386      	movs	r3, #134	; 0x86
    356e:	54e0      	strb	r0, [r4, r3]
    3570:	0a00      	lsrs	r0, r0, #8
    3572:	b280      	uxth	r0, r0
    3574:	2387      	movs	r3, #135	; 0x87
    3576:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    3578:	2200      	movs	r2, #0
    357a:	2389      	movs	r3, #137	; 0x89
    357c:	54e2      	strb	r2, [r4, r3]
    357e:	238a      	movs	r3, #138	; 0x8a
    3580:	54e2      	strb	r2, [r4, r3]
    3582:	238b      	movs	r3, #139	; 0x8b
    3584:	54e2      	strb	r2, [r4, r3]
    3586:	238c      	movs	r3, #140	; 0x8c
    3588:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    358a:	1ca0      	adds	r0, r4, #2
    358c:	786a      	ldrb	r2, [r5, #1]
    358e:	1ca9      	adds	r1, r5, #2
    3590:	4b0e      	ldr	r3, [pc, #56]	; (35cc <nwkTxBroadcastFrame+0x84>)
    3592:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    3594:	2341      	movs	r3, #65	; 0x41
    3596:	70a3      	strb	r3, [r4, #2]
    3598:	2378      	movs	r3, #120	; 0x78
    359a:	425b      	negs	r3, r3
    359c:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    359e:	2301      	movs	r3, #1
    35a0:	425b      	negs	r3, r3
    35a2:	71e3      	strb	r3, [r4, #7]
    35a4:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    35a6:	796a      	ldrb	r2, [r5, #5]
    35a8:	79ab      	ldrb	r3, [r5, #6]
    35aa:	7162      	strb	r2, [r4, #5]
    35ac:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    35ae:	4b08      	ldr	r3, [pc, #32]	; (35d0 <nwkTxBroadcastFrame+0x88>)
    35b0:	781a      	ldrb	r2, [r3, #0]
    35b2:	7262      	strb	r2, [r4, #9]
    35b4:	785a      	ldrb	r2, [r3, #1]
    35b6:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    35b8:	795a      	ldrb	r2, [r3, #5]
    35ba:	3201      	adds	r2, #1
    35bc:	b2d2      	uxtb	r2, r2
    35be:	715a      	strb	r2, [r3, #5]
    35c0:	7122      	strb	r2, [r4, #4]
}
    35c2:	bd38      	pop	{r3, r4, r5, pc}
    35c4:	00002801 	.word	0x00002801
    35c8:	00006e11 	.word	0x00006e11
    35cc:	00006db9 	.word	0x00006db9
    35d0:	200008dc 	.word	0x200008dc

000035d4 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    35d4:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    35d6:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    35d8:	7b03      	ldrb	r3, [r0, #12]
		return false;
    35da:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    35dc:	2b03      	cmp	r3, #3
    35de:	d113      	bne.n	3608 <nwkTxAckReceived+0x34>
    35e0:	e00d      	b.n	35fe <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    35e2:	7803      	ldrb	r3, [r0, #0]
    35e4:	2b16      	cmp	r3, #22
    35e6:	d10c      	bne.n	3602 <nwkTxAckReceived+0x2e>
    35e8:	7b02      	ldrb	r2, [r0, #12]
    35ea:	786b      	ldrb	r3, [r5, #1]
    35ec:	429a      	cmp	r2, r3
    35ee:	d108      	bne.n	3602 <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    35f0:	2317      	movs	r3, #23
    35f2:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    35f4:	78aa      	ldrb	r2, [r5, #2]
    35f6:	2388      	movs	r3, #136	; 0x88
    35f8:	54c2      	strb	r2, [r0, r3]
			return true;
    35fa:	2001      	movs	r0, #1
    35fc:	e004      	b.n	3608 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    35fe:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3600:	4c02      	ldr	r4, [pc, #8]	; (360c <nwkTxAckReceived+0x38>)
    3602:	47a0      	blx	r4
    3604:	2800      	cmp	r0, #0
    3606:	d1ec      	bne.n	35e2 <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    3608:	bd38      	pop	{r3, r4, r5, pc}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	00002885 	.word	0x00002885

00003610 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    3610:	2312      	movs	r3, #18
    3612:	7003      	strb	r3, [r0, #0]
}
    3614:	4770      	bx	lr
    3616:	46c0      	nop			; (mov r8, r8)

00003618 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3618:	4b0d      	ldr	r3, [pc, #52]	; (3650 <PHY_DataConf+0x38>)
    361a:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    361c:	2801      	cmp	r0, #1
    361e:	d009      	beq.n	3634 <PHY_DataConf+0x1c>
    3620:	2800      	cmp	r0, #0
    3622:	d003      	beq.n	362c <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    3624:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    3626:	2802      	cmp	r0, #2
    3628:	d005      	beq.n	3636 <PHY_DataConf+0x1e>
    362a:	e001      	b.n	3630 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    362c:	2200      	movs	r2, #0
    362e:	e002      	b.n	3636 <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    3630:	2201      	movs	r2, #1
    3632:	e000      	b.n	3636 <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    3634:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3636:	2185      	movs	r1, #133	; 0x85
    3638:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    363a:	2215      	movs	r2, #21
    363c:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    363e:	2200      	movs	r2, #0
    3640:	4b03      	ldr	r3, [pc, #12]	; (3650 <PHY_DataConf+0x38>)
    3642:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    3644:	4a03      	ldr	r2, [pc, #12]	; (3654 <PHY_DataConf+0x3c>)
    3646:	2358      	movs	r3, #88	; 0x58
    3648:	5ad1      	ldrh	r1, [r2, r3]
    364a:	3901      	subs	r1, #1
    364c:	52d1      	strh	r1, [r2, r3]
}
    364e:	4770      	bx	lr
    3650:	20000620 	.word	0x20000620
    3654:	200008dc 	.word	0x200008dc

00003658 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    3658:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    365a:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    365c:	4d37      	ldr	r5, [pc, #220]	; (373c <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    365e:	4e38      	ldr	r6, [pc, #224]	; (3740 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3660:	e066      	b.n	3730 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    3662:	7823      	ldrb	r3, [r4, #0]
    3664:	3b10      	subs	r3, #16
    3666:	b2da      	uxtb	r2, r3
    3668:	2a07      	cmp	r2, #7
    366a:	d861      	bhi.n	3730 <nwkTxTaskHandler+0xd8>
    366c:	0093      	lsls	r3, r2, #2
    366e:	58f3      	ldr	r3, [r6, r3]
    3670:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    3672:	1c20      	adds	r0, r4, #0
    3674:	2101      	movs	r1, #1
    3676:	4b33      	ldr	r3, [pc, #204]	; (3744 <nwkTxTaskHandler+0xec>)
    3678:	4798      	blx	r3
		}
		break;
    367a:	e059      	b.n	3730 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    367c:	2386      	movs	r3, #134	; 0x86
    367e:	5ce2      	ldrb	r2, [r4, r3]
    3680:	2387      	movs	r3, #135	; 0x87
    3682:	5ce3      	ldrb	r3, [r4, r3]
    3684:	021b      	lsls	r3, r3, #8
    3686:	4313      	orrs	r3, r2
    3688:	d005      	beq.n	3696 <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    368a:	2311      	movs	r3, #17
    368c:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    368e:	482e      	ldr	r0, [pc, #184]	; (3748 <nwkTxTaskHandler+0xf0>)
    3690:	4b2e      	ldr	r3, [pc, #184]	; (374c <nwkTxTaskHandler+0xf4>)
    3692:	4798      	blx	r3
    3694:	e04c      	b.n	3730 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    3696:	2313      	movs	r3, #19
    3698:	7023      	strb	r3, [r4, #0]
    369a:	e049      	b.n	3730 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    369c:	4b2c      	ldr	r3, [pc, #176]	; (3750 <nwkTxTaskHandler+0xf8>)
    369e:	681b      	ldr	r3, [r3, #0]
    36a0:	2b00      	cmp	r3, #0
    36a2:	d145      	bne.n	3730 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    36a4:	4b2a      	ldr	r3, [pc, #168]	; (3750 <nwkTxTaskHandler+0xf8>)
    36a6:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    36a8:	2314      	movs	r3, #20
    36aa:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    36ac:	1c60      	adds	r0, r4, #1
    36ae:	4b29      	ldr	r3, [pc, #164]	; (3754 <nwkTxTaskHandler+0xfc>)
    36b0:	4798      	blx	r3
				nwkIb.lock++;
    36b2:	4a29      	ldr	r2, [pc, #164]	; (3758 <nwkTxTaskHandler+0x100>)
    36b4:	2358      	movs	r3, #88	; 0x58
    36b6:	5ad1      	ldrh	r1, [r2, r3]
    36b8:	3101      	adds	r1, #1
    36ba:	52d1      	strh	r1, [r2, r3]
    36bc:	e038      	b.n	3730 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    36be:	2385      	movs	r3, #133	; 0x85
    36c0:	5ce3      	ldrb	r3, [r4, r3]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d119      	bne.n	36fa <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    36c6:	7b61      	ldrb	r1, [r4, #13]
    36c8:	7ba3      	ldrb	r3, [r4, #14]
    36ca:	021b      	lsls	r3, r3, #8
    36cc:	4a22      	ldr	r2, [pc, #136]	; (3758 <nwkTxTaskHandler+0x100>)
    36ce:	8812      	ldrh	r2, [r2, #0]
    36d0:	430b      	orrs	r3, r1
    36d2:	429a      	cmp	r2, r3
    36d4:	d10e      	bne.n	36f4 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    36d6:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    36d8:	07da      	lsls	r2, r3, #31
    36da:	d50b      	bpl.n	36f4 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    36dc:	2316      	movs	r3, #22
    36de:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    36e0:	2215      	movs	r2, #21
    36e2:	2386      	movs	r3, #134	; 0x86
    36e4:	54e2      	strb	r2, [r4, r3]
    36e6:	2200      	movs	r2, #0
    36e8:	2387      	movs	r3, #135	; 0x87
    36ea:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    36ec:	481b      	ldr	r0, [pc, #108]	; (375c <nwkTxTaskHandler+0x104>)
    36ee:	4b17      	ldr	r3, [pc, #92]	; (374c <nwkTxTaskHandler+0xf4>)
    36f0:	4798      	blx	r3
    36f2:	e01d      	b.n	3730 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    36f4:	2317      	movs	r3, #23
    36f6:	7023      	strb	r3, [r4, #0]
    36f8:	e01a      	b.n	3730 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    36fa:	2317      	movs	r3, #23
    36fc:	7023      	strb	r3, [r4, #0]
    36fe:	e017      	b.n	3730 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    3700:	1c20      	adds	r0, r4, #0
    3702:	4b17      	ldr	r3, [pc, #92]	; (3760 <nwkTxTaskHandler+0x108>)
    3704:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    3706:	2389      	movs	r3, #137	; 0x89
    3708:	5ce2      	ldrb	r2, [r4, r3]
    370a:	238a      	movs	r3, #138	; 0x8a
    370c:	5ce3      	ldrb	r3, [r4, r3]
    370e:	021b      	lsls	r3, r3, #8
    3710:	4313      	orrs	r3, r2
    3712:	228b      	movs	r2, #139	; 0x8b
    3714:	5ca2      	ldrb	r2, [r4, r2]
    3716:	0412      	lsls	r2, r2, #16
    3718:	4313      	orrs	r3, r2
    371a:	228c      	movs	r2, #140	; 0x8c
    371c:	5ca2      	ldrb	r2, [r4, r2]
    371e:	0612      	lsls	r2, r2, #24
    3720:	4313      	orrs	r3, r2
    3722:	d103      	bne.n	372c <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    3724:	1c20      	adds	r0, r4, #0
    3726:	4b0f      	ldr	r3, [pc, #60]	; (3764 <nwkTxTaskHandler+0x10c>)
    3728:	4798      	blx	r3
    372a:	e001      	b.n	3730 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    372c:	1c20      	adds	r0, r4, #0
    372e:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3730:	1c20      	adds	r0, r4, #0
    3732:	47a8      	blx	r5
    3734:	1e04      	subs	r4, r0, #0
    3736:	d194      	bne.n	3662 <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    3738:	bd70      	pop	{r4, r5, r6, pc}
    373a:	46c0      	nop			; (mov r8, r8)
    373c:	00002885 	.word	0x00002885
    3740:	00007f10 	.word	0x00007f10
    3744:	0000314d 	.word	0x0000314d
    3748:	20000624 	.word	0x20000624
    374c:	00003b39 	.word	0x00003b39
    3750:	20000620 	.word	0x20000620
    3754:	000038cd 	.word	0x000038cd
    3758:	200008dc 	.word	0x200008dc
    375c:	2000060c 	.word	0x2000060c
    3760:	00002a89 	.word	0x00002a89
    3764:	00002871 	.word	0x00002871

00003768 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    3768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    376a:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    376c:	4f0b      	ldr	r7, [pc, #44]	; (379c <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    376e:	4e0c      	ldr	r6, [pc, #48]	; (37a0 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3770:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3772:	2002      	movs	r0, #2
    3774:	2103      	movs	r1, #3
    3776:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3778:	2001      	movs	r0, #1
    377a:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    377c:	4028      	ands	r0, r5
    377e:	2808      	cmp	r0, #8
    3780:	d1f7      	bne.n	3772 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3782:	4f06      	ldr	r7, [pc, #24]	; (379c <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3784:	4e06      	ldr	r6, [pc, #24]	; (37a0 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3786:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3788:	2002      	movs	r0, #2
    378a:	1c21      	adds	r1, r4, #0
    378c:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    378e:	2001      	movs	r0, #1
    3790:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3792:	4028      	ands	r0, r5
    3794:	4284      	cmp	r4, r0
    3796:	d1f7      	bne.n	3788 <phyTrxSetState+0x20>
}
    3798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	00004169 	.word	0x00004169
    37a0:	00004071 	.word	0x00004071

000037a4 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    37a4:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    37a6:	2008      	movs	r0, #8
    37a8:	4b06      	ldr	r3, [pc, #24]	; (37c4 <phySetRxState+0x20>)
    37aa:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37ac:	200f      	movs	r0, #15
    37ae:	4b06      	ldr	r3, [pc, #24]	; (37c8 <phySetRxState+0x24>)
    37b0:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    37b2:	4b06      	ldr	r3, [pc, #24]	; (37cc <phySetRxState+0x28>)
    37b4:	781b      	ldrb	r3, [r3, #0]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d002      	beq.n	37c0 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    37ba:	2016      	movs	r0, #22
    37bc:	4b01      	ldr	r3, [pc, #4]	; (37c4 <phySetRxState+0x20>)
    37be:	4798      	blx	r3
	}
}
    37c0:	bd08      	pop	{r3, pc}
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	00003769 	.word	0x00003769
    37c8:	00004071 	.word	0x00004071
    37cc:	200006b9 	.word	0x200006b9

000037d0 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    37d0:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    37d2:	4b0e      	ldr	r3, [pc, #56]	; (380c <PHY_Init+0x3c>)
    37d4:	4798      	blx	r3
	PhyReset();
    37d6:	4b0e      	ldr	r3, [pc, #56]	; (3810 <PHY_Init+0x40>)
    37d8:	4798      	blx	r3
	phyRxState = false;
    37da:	2200      	movs	r2, #0
    37dc:	4b0d      	ldr	r3, [pc, #52]	; (3814 <PHY_Init+0x44>)
    37de:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    37e0:	2201      	movs	r2, #1
    37e2:	4b0d      	ldr	r3, [pc, #52]	; (3818 <PHY_Init+0x48>)
    37e4:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    37e6:	4e0d      	ldr	r6, [pc, #52]	; (381c <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37e8:	4d0d      	ldr	r5, [pc, #52]	; (3820 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    37ea:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    37ec:	2002      	movs	r0, #2
    37ee:	2108      	movs	r1, #8
    37f0:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    37f2:	2001      	movs	r0, #1
    37f4:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    37f6:	4020      	ands	r0, r4
    37f8:	2808      	cmp	r0, #8
    37fa:	d1f7      	bne.n	37ec <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    37fc:	2004      	movs	r0, #4
    37fe:	212e      	movs	r1, #46	; 0x2e
    3800:	4c06      	ldr	r4, [pc, #24]	; (381c <PHY_Init+0x4c>)
    3802:	47a0      	blx	r4
    3804:	200c      	movs	r0, #12
    3806:	21a0      	movs	r1, #160	; 0xa0
    3808:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    380a:	bd70      	pop	{r4, r5, r6, pc}
    380c:	00003f31 	.word	0x00003f31
    3810:	00004041 	.word	0x00004041
    3814:	200006b9 	.word	0x200006b9
    3818:	200006b8 	.word	0x200006b8
    381c:	00004169 	.word	0x00004169
    3820:	00004071 	.word	0x00004071

00003824 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    3824:	b508      	push	{r3, lr}
	phyRxState = rx;
    3826:	4b02      	ldr	r3, [pc, #8]	; (3830 <PHY_SetRxState+0xc>)
    3828:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    382a:	4b02      	ldr	r3, [pc, #8]	; (3834 <PHY_SetRxState+0x10>)
    382c:	4798      	blx	r3
}
    382e:	bd08      	pop	{r3, pc}
    3830:	200006b9 	.word	0x200006b9
    3834:	000037a5 	.word	0x000037a5

00003838 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    3838:	b510      	push	{r4, lr}
    383a:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    383c:	2008      	movs	r0, #8
    383e:	4b05      	ldr	r3, [pc, #20]	; (3854 <PHY_SetChannel+0x1c>)
    3840:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    3842:	231f      	movs	r3, #31
    3844:	1c01      	adds	r1, r0, #0
    3846:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    3848:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    384a:	b2e1      	uxtb	r1, r4
    384c:	2008      	movs	r0, #8
    384e:	4b02      	ldr	r3, [pc, #8]	; (3858 <PHY_SetChannel+0x20>)
    3850:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    3852:	bd10      	pop	{r4, pc}
    3854:	00004071 	.word	0x00004071
    3858:	00004169 	.word	0x00004169

0000385c <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    385c:	b530      	push	{r4, r5, lr}
    385e:	b083      	sub	sp, #12
    3860:	466c      	mov	r4, sp
    3862:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3864:	b2c1      	uxtb	r1, r0
    3866:	2022      	movs	r0, #34	; 0x22
    3868:	4d03      	ldr	r5, [pc, #12]	; (3878 <PHY_SetPanId+0x1c>)
    386a:	47a8      	blx	r5
    386c:	79e1      	ldrb	r1, [r4, #7]
    386e:	2023      	movs	r0, #35	; 0x23
    3870:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    3872:	b003      	add	sp, #12
    3874:	bd30      	pop	{r4, r5, pc}
    3876:	46c0      	nop			; (mov r8, r8)
    3878:	00004169 	.word	0x00004169

0000387c <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    387c:	b570      	push	{r4, r5, r6, lr}
    387e:	b082      	sub	sp, #8
    3880:	466d      	mov	r5, sp
    3882:	80e8      	strh	r0, [r5, #6]
    3884:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    3886:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3888:	2020      	movs	r0, #32
    388a:	1c31      	adds	r1, r6, #0
    388c:	4c05      	ldr	r4, [pc, #20]	; (38a4 <PHY_SetShortAddr+0x28>)
    388e:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    3890:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3892:	2021      	movs	r0, #33	; 0x21
    3894:	1c29      	adds	r1, r5, #0
    3896:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    3898:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    389a:	b2f1      	uxtb	r1, r6
    389c:	202d      	movs	r0, #45	; 0x2d
    389e:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    38a0:	b002      	add	sp, #8
    38a2:	bd70      	pop	{r4, r5, r6, pc}
    38a4:	00004169 	.word	0x00004169

000038a8 <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    38a8:	b510      	push	{r4, lr}
    38aa:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    38ac:	2005      	movs	r0, #5
    38ae:	4b05      	ldr	r3, [pc, #20]	; (38c4 <PHY_SetTxPower+0x1c>)
    38b0:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    38b2:	230f      	movs	r3, #15
    38b4:	1c01      	adds	r1, r0, #0
    38b6:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    38b8:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    38ba:	b2e1      	uxtb	r1, r4
    38bc:	2005      	movs	r0, #5
    38be:	4b02      	ldr	r3, [pc, #8]	; (38c8 <PHY_SetTxPower+0x20>)
    38c0:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    38c2:	bd10      	pop	{r4, pc}
    38c4:	00004071 	.word	0x00004071
    38c8:	00004169 	.word	0x00004169

000038cc <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    38cc:	b510      	push	{r4, lr}
    38ce:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    38d0:	2019      	movs	r0, #25
    38d2:	4b0c      	ldr	r3, [pc, #48]	; (3904 <PHY_DataReq+0x38>)
    38d4:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    38d6:	200f      	movs	r0, #15
    38d8:	4b0b      	ldr	r3, [pc, #44]	; (3908 <PHY_DataReq+0x3c>)
    38da:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    38dc:	7821      	ldrb	r1, [r4, #0]
    38de:	1c8b      	adds	r3, r1, #2
    38e0:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    38e2:	3101      	adds	r1, #1
    38e4:	b2c9      	uxtb	r1, r1
    38e6:	1c20      	adds	r0, r4, #0
    38e8:	4b08      	ldr	r3, [pc, #32]	; (390c <PHY_DataReq+0x40>)
    38ea:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    38ec:	2203      	movs	r2, #3
    38ee:	4b08      	ldr	r3, [pc, #32]	; (3910 <PHY_DataReq+0x44>)
    38f0:	701a      	strb	r2, [r3, #0]
    38f2:	4b08      	ldr	r3, [pc, #32]	; (3914 <PHY_DataReq+0x48>)
    38f4:	2280      	movs	r2, #128	; 0x80
    38f6:	0352      	lsls	r2, r2, #13
    38f8:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    38fe:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    3900:	bd10      	pop	{r4, pc}
    3902:	46c0      	nop			; (mov r8, r8)
    3904:	00003769 	.word	0x00003769
    3908:	00004071 	.word	0x00004071
    390c:	000043a5 	.word	0x000043a5
    3910:	200006b8 	.word	0x200006b8
    3914:	41004400 	.word	0x41004400

00003918 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    3918:	b510      	push	{r4, lr}
    391a:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    391c:	1c08      	adds	r0, r1, #0
    391e:	2100      	movs	r1, #0
    3920:	2200      	movs	r2, #0
    3922:	4b05      	ldr	r3, [pc, #20]	; (3938 <PHY_EncryptReq+0x20>)
    3924:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    3926:	1c20      	adds	r0, r4, #0
    3928:	2100      	movs	r1, #0
    392a:	4b04      	ldr	r3, [pc, #16]	; (393c <PHY_EncryptReq+0x24>)
    392c:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    392e:	1c20      	adds	r0, r4, #0
    3930:	4b03      	ldr	r3, [pc, #12]	; (3940 <PHY_EncryptReq+0x28>)
    3932:	4798      	blx	r3
}
    3934:	bd10      	pop	{r4, pc}
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	00003dc9 	.word	0x00003dc9
    393c:	00003d5d 	.word	0x00003d5d
    3940:	00003f01 	.word	0x00003f01

00003944 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    3944:	b5f0      	push	{r4, r5, r6, r7, lr}
    3946:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    3948:	4b26      	ldr	r3, [pc, #152]	; (39e4 <PHY_TaskHandler+0xa0>)
    394a:	781b      	ldrb	r3, [r3, #0]
    394c:	2b02      	cmp	r3, #2
    394e:	d046      	beq.n	39de <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3950:	200f      	movs	r0, #15
    3952:	4b25      	ldr	r3, [pc, #148]	; (39e8 <PHY_TaskHandler+0xa4>)
    3954:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    3956:	0703      	lsls	r3, r0, #28
    3958:	d541      	bpl.n	39de <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    395a:	4b22      	ldr	r3, [pc, #136]	; (39e4 <PHY_TaskHandler+0xa0>)
    395c:	781b      	ldrb	r3, [r3, #0]
    395e:	2b01      	cmp	r3, #1
    3960:	d124      	bne.n	39ac <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3962:	2007      	movs	r0, #7
    3964:	4b20      	ldr	r3, [pc, #128]	; (39e8 <PHY_TaskHandler+0xa4>)
    3966:	4798      	blx	r3
    3968:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    396a:	466c      	mov	r4, sp
    396c:	3407      	adds	r4, #7
    396e:	1c20      	adds	r0, r4, #0
    3970:	2101      	movs	r1, #1
    3972:	4e1e      	ldr	r6, [pc, #120]	; (39ec <PHY_TaskHandler+0xa8>)
    3974:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    3976:	4d1e      	ldr	r5, [pc, #120]	; (39f0 <PHY_TaskHandler+0xac>)
    3978:	7821      	ldrb	r1, [r4, #0]
    397a:	3102      	adds	r1, #2
    397c:	b2c9      	uxtb	r1, r1
    397e:	1c28      	adds	r0, r5, #0
    3980:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    3982:	a802      	add	r0, sp, #8
    3984:	1c6a      	adds	r2, r5, #1
    3986:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    3988:	7822      	ldrb	r2, [r4, #0]
    398a:	1e91      	subs	r1, r2, #2
    398c:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    398e:	18ad      	adds	r5, r5, r2
    3990:	786a      	ldrb	r2, [r5, #1]
    3992:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    3994:	3f5b      	subs	r7, #91	; 0x5b
    3996:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    3998:	4b16      	ldr	r3, [pc, #88]	; (39f4 <PHY_TaskHandler+0xb0>)
    399a:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    399c:	4d12      	ldr	r5, [pc, #72]	; (39e8 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    399e:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    39a0:	2001      	movs	r0, #1
    39a2:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    39a4:	4020      	ands	r0, r4
    39a6:	2816      	cmp	r0, #22
    39a8:	d1fa      	bne.n	39a0 <PHY_TaskHandler+0x5c>
    39aa:	e018      	b.n	39de <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    39ac:	2b03      	cmp	r3, #3
    39ae:	d116      	bne.n	39de <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    39b0:	2002      	movs	r0, #2
    39b2:	4b0d      	ldr	r3, [pc, #52]	; (39e8 <PHY_TaskHandler+0xa4>)
    39b4:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    39b6:	0944      	lsrs	r4, r0, #5
    39b8:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    39ba:	2c00      	cmp	r4, #0
    39bc:	d007      	beq.n	39ce <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    39be:	2c03      	cmp	r4, #3
    39c0:	d004      	beq.n	39cc <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    39c2:	3c05      	subs	r4, #5
    39c4:	1e63      	subs	r3, r4, #1
    39c6:	419c      	sbcs	r4, r3
    39c8:	3402      	adds	r4, #2
    39ca:	e000      	b.n	39ce <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    39cc:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    39ce:	4b0a      	ldr	r3, [pc, #40]	; (39f8 <PHY_TaskHandler+0xb4>)
    39d0:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    39d2:	2201      	movs	r2, #1
    39d4:	4b03      	ldr	r3, [pc, #12]	; (39e4 <PHY_TaskHandler+0xa0>)
    39d6:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    39d8:	1c20      	adds	r0, r4, #0
    39da:	4b08      	ldr	r3, [pc, #32]	; (39fc <PHY_TaskHandler+0xb8>)
    39dc:	4798      	blx	r3
		}
	}
}
    39de:	b005      	add	sp, #20
    39e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	200006b8 	.word	0x200006b8
    39e8:	00004071 	.word	0x00004071
    39ec:	00004265 	.word	0x00004265
    39f0:	20000638 	.word	0x20000638
    39f4:	00002d01 	.word	0x00002d01
    39f8:	000037a5 	.word	0x000037a5
    39fc:	00003619 	.word	0x00003619

00003a00 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    3a00:	b508      	push	{r3, lr}
	SYS_TimerInit();
    3a02:	4b04      	ldr	r3, [pc, #16]	; (3a14 <SYS_Init+0x14>)
    3a04:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    3a06:	4b04      	ldr	r3, [pc, #16]	; (3a18 <SYS_Init+0x18>)
    3a08:	4798      	blx	r3
#endif
	PHY_Init();
    3a0a:	4b04      	ldr	r3, [pc, #16]	; (3a1c <SYS_Init+0x1c>)
    3a0c:	4798      	blx	r3
	NWK_Init();
    3a0e:	4b04      	ldr	r3, [pc, #16]	; (3a20 <SYS_Init+0x20>)
    3a10:	4798      	blx	r3
}
    3a12:	bd08      	pop	{r3, pc}
    3a14:	00003ad1 	.word	0x00003ad1
    3a18:	00003d59 	.word	0x00003d59
    3a1c:	000037d1 	.word	0x000037d1
    3a20:	00002579 	.word	0x00002579

00003a24 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    3a24:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    3a26:	4b03      	ldr	r3, [pc, #12]	; (3a34 <SYS_TaskHandler+0x10>)
    3a28:	4798      	blx	r3
	NWK_TaskHandler();
    3a2a:	4b03      	ldr	r3, [pc, #12]	; (3a38 <SYS_TaskHandler+0x14>)
    3a2c:	4798      	blx	r3
	SYS_TimerTaskHandler();
    3a2e:	4b03      	ldr	r3, [pc, #12]	; (3a3c <SYS_TaskHandler+0x18>)
    3a30:	4798      	blx	r3
}
    3a32:	bd08      	pop	{r3, pc}
    3a34:	00003945 	.word	0x00003945
    3a38:	00002605 	.word	0x00002605
    3a3c:	00003b55 	.word	0x00003b55

00003a40 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    3a40:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    3a42:	4b02      	ldr	r3, [pc, #8]	; (3a4c <SYS_EncryptReq+0xc>)
    3a44:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    3a46:	4b02      	ldr	r3, [pc, #8]	; (3a50 <SYS_EncryptReq+0x10>)
    3a48:	4798      	blx	r3
}
    3a4a:	bd08      	pop	{r3, pc}
    3a4c:	00003919 	.word	0x00003919
    3a50:	00003169 	.word	0x00003169

00003a54 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3a54:	b530      	push	{r4, r5, lr}
	if (timers) {
    3a56:	4b15      	ldr	r3, [pc, #84]	; (3aac <placeTimer+0x58>)
    3a58:	681d      	ldr	r5, [r3, #0]
    3a5a:	2d00      	cmp	r5, #0
    3a5c:	d01e      	beq.n	3a9c <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    3a5e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    3a60:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3a62:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    3a64:	428a      	cmp	r2, r1
    3a66:	d20a      	bcs.n	3a7e <placeTimer+0x2a>
    3a68:	e004      	b.n	3a74 <placeTimer+0x20>
    3a6a:	6859      	ldr	r1, [r3, #4]
    3a6c:	4291      	cmp	r1, r2
    3a6e:	d803      	bhi.n	3a78 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3a70:	1c1c      	adds	r4, r3, #0
    3a72:	e004      	b.n	3a7e <placeTimer+0x2a>
    3a74:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    3a76:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    3a78:	1a89      	subs	r1, r1, r2
    3a7a:	6059      	str	r1, [r3, #4]
				break;
    3a7c:	e003      	b.n	3a86 <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    3a7e:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3a80:	6823      	ldr	r3, [r4, #0]
    3a82:	2b00      	cmp	r3, #0
    3a84:	d1f1      	bne.n	3a6a <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    3a86:	6042      	str	r2, [r0, #4]

		if (prev) {
    3a88:	2c00      	cmp	r4, #0
    3a8a:	d003      	beq.n	3a94 <placeTimer+0x40>
			timer->next = prev->next;
    3a8c:	6823      	ldr	r3, [r4, #0]
    3a8e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3a90:	6020      	str	r0, [r4, #0]
    3a92:	e009      	b.n	3aa8 <placeTimer+0x54>
		} else {
			timer->next = timers;
    3a94:	6005      	str	r5, [r0, #0]
			timers = timer;
    3a96:	4b05      	ldr	r3, [pc, #20]	; (3aac <placeTimer+0x58>)
    3a98:	6018      	str	r0, [r3, #0]
    3a9a:	e005      	b.n	3aa8 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    3a9c:	2300      	movs	r3, #0
    3a9e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3aa0:	6883      	ldr	r3, [r0, #8]
    3aa2:	6043      	str	r3, [r0, #4]
		timers = timer;
    3aa4:	4b01      	ldr	r3, [pc, #4]	; (3aac <placeTimer+0x58>)
    3aa6:	6018      	str	r0, [r3, #0]
	}
}
    3aa8:	bd30      	pop	{r4, r5, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	200006bc 	.word	0x200006bc

00003ab0 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    3ab0:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    3ab2:	4b04      	ldr	r3, [pc, #16]	; (3ac4 <SYS_HwExpiry_Cb+0x14>)
    3ab4:	781a      	ldrb	r2, [r3, #0]
    3ab6:	3201      	adds	r2, #1
    3ab8:	b2d2      	uxtb	r2, r2
    3aba:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3abc:	4802      	ldr	r0, [pc, #8]	; (3ac8 <SYS_HwExpiry_Cb+0x18>)
    3abe:	4b03      	ldr	r3, [pc, #12]	; (3acc <SYS_HwExpiry_Cb+0x1c>)
    3ac0:	4798      	blx	r3
}
    3ac2:	bd08      	pop	{r3, pc}
    3ac4:	20000938 	.word	0x20000938
    3ac8:	00002710 	.word	0x00002710
    3acc:	00004e49 	.word	0x00004e49

00003ad0 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    3ad0:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    3ad2:	2400      	movs	r4, #0
    3ad4:	4b06      	ldr	r3, [pc, #24]	; (3af0 <SYS_TimerInit+0x20>)
    3ad6:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    3ad8:	4806      	ldr	r0, [pc, #24]	; (3af4 <SYS_TimerInit+0x24>)
    3ada:	4b07      	ldr	r3, [pc, #28]	; (3af8 <SYS_TimerInit+0x28>)
    3adc:	4798      	blx	r3
	common_tc_init();
    3ade:	4b07      	ldr	r3, [pc, #28]	; (3afc <SYS_TimerInit+0x2c>)
    3ae0:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    3ae2:	4807      	ldr	r0, [pc, #28]	; (3b00 <SYS_TimerInit+0x30>)
    3ae4:	4b07      	ldr	r3, [pc, #28]	; (3b04 <SYS_TimerInit+0x34>)
    3ae6:	4798      	blx	r3
	timers = NULL;
    3ae8:	4b07      	ldr	r3, [pc, #28]	; (3b08 <SYS_TimerInit+0x38>)
    3aea:	601c      	str	r4, [r3, #0]
}
    3aec:	bd10      	pop	{r4, pc}
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	20000938 	.word	0x20000938
    3af4:	00003ab1 	.word	0x00003ab1
    3af8:	00004f39 	.word	0x00004f39
    3afc:	00004eb5 	.word	0x00004eb5
    3b00:	00002710 	.word	0x00002710
    3b04:	00004e49 	.word	0x00004e49
    3b08:	200006bc 	.word	0x200006bc

00003b0c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3b0c:	4b09      	ldr	r3, [pc, #36]	; (3b34 <SYS_TimerStarted+0x28>)
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	2b00      	cmp	r3, #0
    3b12:	d009      	beq.n	3b28 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    3b14:	4283      	cmp	r3, r0
    3b16:	d102      	bne.n	3b1e <SYS_TimerStarted+0x12>
    3b18:	e008      	b.n	3b2c <SYS_TimerStarted+0x20>
    3b1a:	4298      	cmp	r0, r3
    3b1c:	d008      	beq.n	3b30 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    3b1e:	681b      	ldr	r3, [r3, #0]
    3b20:	2b00      	cmp	r3, #0
    3b22:	d1fa      	bne.n	3b1a <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    3b24:	2000      	movs	r0, #0
    3b26:	e004      	b.n	3b32 <SYS_TimerStarted+0x26>
    3b28:	2000      	movs	r0, #0
    3b2a:	e002      	b.n	3b32 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    3b2c:	2001      	movs	r0, #1
    3b2e:	e000      	b.n	3b32 <SYS_TimerStarted+0x26>
    3b30:	2001      	movs	r0, #1
		}
	}
	return false;
}
    3b32:	4770      	bx	lr
    3b34:	200006bc 	.word	0x200006bc

00003b38 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3b38:	b510      	push	{r4, lr}
    3b3a:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    3b3c:	4b03      	ldr	r3, [pc, #12]	; (3b4c <SYS_TimerStart+0x14>)
    3b3e:	4798      	blx	r3
    3b40:	2800      	cmp	r0, #0
    3b42:	d102      	bne.n	3b4a <SYS_TimerStart+0x12>
		placeTimer(timer);
    3b44:	1c20      	adds	r0, r4, #0
    3b46:	4b02      	ldr	r3, [pc, #8]	; (3b50 <SYS_TimerStart+0x18>)
    3b48:	4798      	blx	r3
	}
}
    3b4a:	bd10      	pop	{r4, pc}
    3b4c:	00003b0d 	.word	0x00003b0d
    3b50:	00003a55 	.word	0x00003a55

00003b54 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    3b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    3b56:	4b1a      	ldr	r3, [pc, #104]	; (3bc0 <SYS_TimerTaskHandler+0x6c>)
    3b58:	781b      	ldrb	r3, [r3, #0]
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d02f      	beq.n	3bbe <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b5e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3b62:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3b64:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3b68:	2100      	movs	r1, #0
    3b6a:	4b16      	ldr	r3, [pc, #88]	; (3bc4 <SYS_TimerTaskHandler+0x70>)
    3b6c:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    3b6e:	4a14      	ldr	r2, [pc, #80]	; (3bc0 <SYS_TimerTaskHandler+0x6c>)
    3b70:	7813      	ldrb	r3, [r2, #0]
    3b72:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    3b74:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3b76:	2800      	cmp	r0, #0
    3b78:	d105      	bne.n	3b86 <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    3b7a:	2101      	movs	r1, #1
    3b7c:	4a11      	ldr	r2, [pc, #68]	; (3bc4 <SYS_TimerTaskHandler+0x70>)
    3b7e:	7011      	strb	r1, [r2, #0]
    3b80:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3b84:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    3b86:	009d      	lsls	r5, r3, #2
    3b88:	18ed      	adds	r5, r5, r3
    3b8a:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    3b8c:	4e0e      	ldr	r6, [pc, #56]	; (3bc8 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    3b8e:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3b90:	e00d      	b.n	3bae <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    3b92:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    3b94:	6823      	ldr	r3, [r4, #0]
    3b96:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3b98:	7b23      	ldrb	r3, [r4, #12]
    3b9a:	2b01      	cmp	r3, #1
    3b9c:	d102      	bne.n	3ba4 <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    3b9e:	1c20      	adds	r0, r4, #0
    3ba0:	4b0a      	ldr	r3, [pc, #40]	; (3bcc <SYS_TimerTaskHandler+0x78>)
    3ba2:	4798      	blx	r3
		}
		if(timer->handler)
    3ba4:	6923      	ldr	r3, [r4, #16]
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	d001      	beq.n	3bae <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    3baa:	1c20      	adds	r0, r4, #0
    3bac:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3bae:	6834      	ldr	r4, [r6, #0]
    3bb0:	2c00      	cmp	r4, #0
    3bb2:	d004      	beq.n	3bbe <SYS_TimerTaskHandler+0x6a>
    3bb4:	6863      	ldr	r3, [r4, #4]
    3bb6:	429d      	cmp	r5, r3
    3bb8:	d2eb      	bcs.n	3b92 <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    3bba:	1b5d      	subs	r5, r3, r5
    3bbc:	6065      	str	r5, [r4, #4]
	}
}
    3bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bc0:	20000938 	.word	0x20000938
    3bc4:	20000008 	.word	0x20000008
    3bc8:	200006bc 	.word	0x200006bc
    3bcc:	00003a55 	.word	0x00003a55

00003bd0 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    3bd0:	b508      	push	{r3, lr}
	tmr_cca_callback();
    3bd2:	4b01      	ldr	r3, [pc, #4]	; (3bd8 <tc_cca_callback+0x8>)
    3bd4:	4798      	blx	r3
}
    3bd6:	bd08      	pop	{r3, pc}
    3bd8:	00004f1d 	.word	0x00004f1d

00003bdc <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    3bdc:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    3bde:	4b01      	ldr	r3, [pc, #4]	; (3be4 <tc_ovf_callback+0x8>)
    3be0:	4798      	blx	r3
}
    3be2:	bd08      	pop	{r3, pc}
    3be4:	00004ed5 	.word	0x00004ed5

00003be8 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    3be8:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    3bea:	4802      	ldr	r0, [pc, #8]	; (3bf4 <tmr_read_count+0xc>)
    3bec:	4b02      	ldr	r3, [pc, #8]	; (3bf8 <tmr_read_count+0x10>)
    3bee:	4798      	blx	r3
    3bf0:	b280      	uxth	r0, r0
}
    3bf2:	bd08      	pop	{r3, pc}
    3bf4:	20000970 	.word	0x20000970
    3bf8:	00002379 	.word	0x00002379

00003bfc <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    3bfc:	4b03      	ldr	r3, [pc, #12]	; (3c0c <tmr_disable_cc_interrupt+0x10>)
    3bfe:	2210      	movs	r2, #16
    3c00:	6819      	ldr	r1, [r3, #0]
    3c02:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    3c04:	7e59      	ldrb	r1, [r3, #25]
    3c06:	4391      	bics	r1, r2
    3c08:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    3c0a:	4770      	bx	lr
    3c0c:	20000970 	.word	0x20000970

00003c10 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    3c10:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3c12:	4c0a      	ldr	r4, [pc, #40]	; (3c3c <tmr_enable_cc_interrupt+0x2c>)
    3c14:	6820      	ldr	r0, [r4, #0]
    3c16:	4b0a      	ldr	r3, [pc, #40]	; (3c40 <tmr_enable_cc_interrupt+0x30>)
    3c18:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3c1a:	4b0a      	ldr	r3, [pc, #40]	; (3c44 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c1c:	5c1b      	ldrb	r3, [r3, r0]
    3c1e:	221f      	movs	r2, #31
    3c20:	401a      	ands	r2, r3
    3c22:	2301      	movs	r3, #1
    3c24:	4093      	lsls	r3, r2
    3c26:	1c1a      	adds	r2, r3, #0
    3c28:	4b07      	ldr	r3, [pc, #28]	; (3c48 <tmr_enable_cc_interrupt+0x38>)
    3c2a:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3c2c:	7e62      	ldrb	r2, [r4, #25]
    3c2e:	2310      	movs	r3, #16
    3c30:	4313      	orrs	r3, r2
    3c32:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3c34:	6823      	ldr	r3, [r4, #0]
    3c36:	2210      	movs	r2, #16
    3c38:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    3c3a:	bd10      	pop	{r4, pc}
    3c3c:	20000970 	.word	0x20000970
    3c40:	000020cd 	.word	0x000020cd
    3c44:	00007f30 	.word	0x00007f30
    3c48:	e000e100 	.word	0xe000e100

00003c4c <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    3c4c:	b508      	push	{r3, lr}
    3c4e:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    3c50:	4802      	ldr	r0, [pc, #8]	; (3c5c <tmr_write_cmpreg+0x10>)
    3c52:	2100      	movs	r1, #0
    3c54:	4b02      	ldr	r3, [pc, #8]	; (3c60 <tmr_write_cmpreg+0x14>)
    3c56:	4798      	blx	r3
			(uint32_t)compare_value);
}
    3c58:	bd08      	pop	{r3, pc}
    3c5a:	46c0      	nop			; (mov r8, r8)
    3c5c:	20000970 	.word	0x20000970
    3c60:	000023a9 	.word	0x000023a9

00003c64 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    3c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c66:	464f      	mov	r7, r9
    3c68:	4646      	mov	r6, r8
    3c6a:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    3c6c:	4a2d      	ldr	r2, [pc, #180]	; (3d24 <tmr_init+0xc0>)
    3c6e:	2300      	movs	r3, #0
    3c70:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3c72:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3c74:	2100      	movs	r1, #0
    3c76:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3c78:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3c7a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3c7c:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3c7e:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3c80:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3c82:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3c84:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3c86:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3c88:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3c8a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3c8c:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3c8e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3c90:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3c92:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3c94:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3c96:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    3c98:	2301      	movs	r3, #1
    3c9a:	425b      	negs	r3, r3
    3c9c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    3c9e:	4c22      	ldr	r4, [pc, #136]	; (3d28 <tmr_init+0xc4>)
    3ca0:	1c20      	adds	r0, r4, #0
    3ca2:	4922      	ldr	r1, [pc, #136]	; (3d2c <tmr_init+0xc8>)
    3ca4:	4b22      	ldr	r3, [pc, #136]	; (3d30 <tmr_init+0xcc>)
    3ca6:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3ca8:	1c20      	adds	r0, r4, #0
    3caa:	4922      	ldr	r1, [pc, #136]	; (3d34 <tmr_init+0xd0>)
    3cac:	2200      	movs	r2, #0
    3cae:	4d22      	ldr	r5, [pc, #136]	; (3d38 <tmr_init+0xd4>)
    3cb0:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    3cb2:	1c20      	adds	r0, r4, #0
    3cb4:	4921      	ldr	r1, [pc, #132]	; (3d3c <tmr_init+0xd8>)
    3cb6:	2202      	movs	r2, #2
    3cb8:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3cba:	6820      	ldr	r0, [r4, #0]
    3cbc:	4a20      	ldr	r2, [pc, #128]	; (3d40 <tmr_init+0xdc>)
    3cbe:	4691      	mov	r9, r2
    3cc0:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    3cc2:	4b20      	ldr	r3, [pc, #128]	; (3d44 <tmr_init+0xe0>)
    3cc4:	4698      	mov	r8, r3
    3cc6:	5c1b      	ldrb	r3, [r3, r0]
    3cc8:	271f      	movs	r7, #31
    3cca:	403b      	ands	r3, r7
    3ccc:	2501      	movs	r5, #1
    3cce:	1c2a      	adds	r2, r5, #0
    3cd0:	409a      	lsls	r2, r3
    3cd2:	4e1d      	ldr	r6, [pc, #116]	; (3d48 <tmr_init+0xe4>)
    3cd4:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    3cd6:	7e62      	ldrb	r2, [r4, #25]
    3cd8:	2301      	movs	r3, #1
    3cda:	4313      	orrs	r3, r2
    3cdc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3cde:	6820      	ldr	r0, [r4, #0]
    3ce0:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3ce2:	47c8      	blx	r9
    3ce4:	4642      	mov	r2, r8
    3ce6:	5c13      	ldrb	r3, [r2, r0]
    3ce8:	401f      	ands	r7, r3
    3cea:	40bd      	lsls	r5, r7
    3cec:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    3cee:	7e62      	ldrb	r2, [r4, #25]
    3cf0:	2310      	movs	r3, #16
    3cf2:	4313      	orrs	r3, r2
    3cf4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3cf6:	6822      	ldr	r2, [r4, #0]
    3cf8:	2310      	movs	r3, #16
    3cfa:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3cfc:	217f      	movs	r1, #127	; 0x7f
    3cfe:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    3d00:	438b      	bics	r3, r1
    3d02:	d1fc      	bne.n	3cfe <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3d04:	8811      	ldrh	r1, [r2, #0]
    3d06:	2302      	movs	r3, #2
    3d08:	430b      	orrs	r3, r1
    3d0a:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    3d0c:	2000      	movs	r0, #0
    3d0e:	4b0f      	ldr	r3, [pc, #60]	; (3d4c <tmr_init+0xe8>)
    3d10:	4798      	blx	r3
    3d12:	490f      	ldr	r1, [pc, #60]	; (3d50 <tmr_init+0xec>)
    3d14:	4b0f      	ldr	r3, [pc, #60]	; (3d54 <tmr_init+0xf0>)
    3d16:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3d18:	b2c0      	uxtb	r0, r0
}
    3d1a:	bc0c      	pop	{r2, r3}
    3d1c:	4690      	mov	r8, r2
    3d1e:	4699      	mov	r9, r3
    3d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d22:	46c0      	nop			; (mov r8, r8)
    3d24:	2000093c 	.word	0x2000093c
    3d28:	20000970 	.word	0x20000970
    3d2c:	42002c00 	.word	0x42002c00
    3d30:	00002105 	.word	0x00002105
    3d34:	00003bdd 	.word	0x00003bdd
    3d38:	0000200d 	.word	0x0000200d
    3d3c:	00003bd1 	.word	0x00003bd1
    3d40:	000020cd 	.word	0x000020cd
    3d44:	00007f30 	.word	0x00007f30
    3d48:	e000e100 	.word	0xe000e100
    3d4c:	00001dc5 	.word	0x00001dc5
    3d50:	000f4240 	.word	0x000f4240
    3d54:	00004f45 	.word	0x00004f45

00003d58 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    3d58:	4770      	bx	lr
    3d5a:	46c0      	nop			; (mov r8, r8)

00003d5c <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    3d5c:	b538      	push	{r3, r4, r5, lr}
    3d5e:	1c03      	adds	r3, r0, #0
    3d60:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3d62:	4c14      	ldr	r4, [pc, #80]	; (3db4 <sal_aes_wrrd+0x58>)
    3d64:	1c60      	adds	r0, r4, #1
    3d66:	1c19      	adds	r1, r3, #0
    3d68:	2210      	movs	r2, #16
    3d6a:	4b13      	ldr	r3, [pc, #76]	; (3db8 <sal_aes_wrrd+0x5c>)
    3d6c:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3d6e:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3d70:	4b12      	ldr	r3, [pc, #72]	; (3dbc <sal_aes_wrrd+0x60>)
    3d72:	781b      	ldrb	r3, [r3, #0]
    3d74:	2b00      	cmp	r3, #0
    3d76:	d008      	beq.n	3d8a <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3d78:	2083      	movs	r0, #131	; 0x83
    3d7a:	490e      	ldr	r1, [pc, #56]	; (3db4 <sal_aes_wrrd+0x58>)
    3d7c:	2212      	movs	r2, #18
    3d7e:	4b10      	ldr	r3, [pc, #64]	; (3dc0 <sal_aes_wrrd+0x64>)
    3d80:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3d82:	2200      	movs	r2, #0
    3d84:	4b0d      	ldr	r3, [pc, #52]	; (3dbc <sal_aes_wrrd+0x60>)
    3d86:	701a      	strb	r2, [r3, #0]
    3d88:	e005      	b.n	3d96 <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3d8a:	2084      	movs	r0, #132	; 0x84
    3d8c:	4909      	ldr	r1, [pc, #36]	; (3db4 <sal_aes_wrrd+0x58>)
    3d8e:	3101      	adds	r1, #1
    3d90:	2211      	movs	r2, #17
    3d92:	4b0b      	ldr	r3, [pc, #44]	; (3dc0 <sal_aes_wrrd+0x64>)
    3d94:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    3d96:	2d00      	cmp	r5, #0
    3d98:	d005      	beq.n	3da6 <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    3d9a:	1c28      	adds	r0, r5, #0
    3d9c:	4905      	ldr	r1, [pc, #20]	; (3db4 <sal_aes_wrrd+0x58>)
    3d9e:	3101      	adds	r1, #1
    3da0:	2210      	movs	r2, #16
    3da2:	4b05      	ldr	r3, [pc, #20]	; (3db8 <sal_aes_wrrd+0x5c>)
    3da4:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    3da6:	4b03      	ldr	r3, [pc, #12]	; (3db4 <sal_aes_wrrd+0x58>)
    3da8:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    3daa:	2018      	movs	r0, #24
    3dac:	4b05      	ldr	r3, [pc, #20]	; (3dc4 <sal_aes_wrrd+0x68>)
    3dae:	4798      	blx	r3
}
    3db0:	bd38      	pop	{r3, r4, r5, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	200006e4 	.word	0x200006e4
    3db8:	00006db9 	.word	0x00006db9
    3dbc:	200006f8 	.word	0x200006f8
    3dc0:	000047dd 	.word	0x000047dd
    3dc4:	00000151 	.word	0x00000151

00003dc8 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    3dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dca:	4647      	mov	r7, r8
    3dcc:	b480      	push	{r7}
    3dce:	b084      	sub	sp, #16
    3dd0:	1c05      	adds	r5, r0, #0
    3dd2:	1c0f      	adds	r7, r1, #0
    3dd4:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
    3dd6:	2800      	cmp	r0, #0
    3dd8:	d017      	beq.n	3e0a <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    3dda:	2200      	movs	r2, #0
    3ddc:	4b3e      	ldr	r3, [pc, #248]	; (3ed8 <sal_aes_setup+0x110>)
    3dde:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    3de0:	2202      	movs	r2, #2
    3de2:	4b3e      	ldr	r3, [pc, #248]	; (3edc <sal_aes_setup+0x114>)
    3de4:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    3de6:	483e      	ldr	r0, [pc, #248]	; (3ee0 <sal_aes_setup+0x118>)
    3de8:	1c29      	adds	r1, r5, #0
    3dea:	2210      	movs	r2, #16
    3dec:	4b3d      	ldr	r3, [pc, #244]	; (3ee4 <sal_aes_setup+0x11c>)
    3dee:	4698      	mov	r8, r3
    3df0:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3df2:	4e3d      	ldr	r6, [pc, #244]	; (3ee8 <sal_aes_setup+0x120>)
    3df4:	2310      	movs	r3, #16
    3df6:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3df8:	1c70      	adds	r0, r6, #1
    3dfa:	1c29      	adds	r1, r5, #0
    3dfc:	2210      	movs	r2, #16
    3dfe:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3e00:	2083      	movs	r0, #131	; 0x83
    3e02:	1c31      	adds	r1, r6, #0
    3e04:	2211      	movs	r2, #17
    3e06:	4b39      	ldr	r3, [pc, #228]	; (3eec <sal_aes_setup+0x124>)
    3e08:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    3e0a:	2c00      	cmp	r4, #0
    3e0c:	d002      	beq.n	3e14 <sal_aes_setup+0x4c>
    3e0e:	2c01      	cmp	r4, #1
    3e10:	d012      	beq.n	3e38 <sal_aes_setup+0x70>
    3e12:	e05a      	b.n	3eca <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    3e14:	4b31      	ldr	r3, [pc, #196]	; (3edc <sal_aes_setup+0x114>)
    3e16:	781b      	ldrb	r3, [r3, #0]
    3e18:	2b01      	cmp	r3, #1
    3e1a:	d13d      	bne.n	3e98 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3e1c:	4d32      	ldr	r5, [pc, #200]	; (3ee8 <sal_aes_setup+0x120>)
    3e1e:	2310      	movs	r3, #16
    3e20:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    3e22:	1c68      	adds	r0, r5, #1
    3e24:	492e      	ldr	r1, [pc, #184]	; (3ee0 <sal_aes_setup+0x118>)
    3e26:	2210      	movs	r2, #16
    3e28:	4b2e      	ldr	r3, [pc, #184]	; (3ee4 <sal_aes_setup+0x11c>)
    3e2a:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3e2c:	2083      	movs	r0, #131	; 0x83
    3e2e:	1c29      	adds	r1, r5, #0
    3e30:	2211      	movs	r2, #17
    3e32:	4b2e      	ldr	r3, [pc, #184]	; (3eec <sal_aes_setup+0x124>)
    3e34:	4798      	blx	r3
    3e36:	e02f      	b.n	3e98 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    3e38:	4b28      	ldr	r3, [pc, #160]	; (3edc <sal_aes_setup+0x114>)
    3e3a:	781b      	ldrb	r3, [r3, #0]
    3e3c:	2b01      	cmp	r3, #1
    3e3e:	d02b      	beq.n	3e98 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3e40:	2210      	movs	r2, #16
    3e42:	4b29      	ldr	r3, [pc, #164]	; (3ee8 <sal_aes_setup+0x120>)
    3e44:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    3e46:	4b24      	ldr	r3, [pc, #144]	; (3ed8 <sal_aes_setup+0x110>)
    3e48:	781b      	ldrb	r3, [r3, #0]
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d116      	bne.n	3e7c <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3e4e:	4d26      	ldr	r5, [pc, #152]	; (3ee8 <sal_aes_setup+0x120>)
    3e50:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    3e52:	2380      	movs	r3, #128	; 0x80
    3e54:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    3e56:	2201      	movs	r2, #1
    3e58:	4b25      	ldr	r3, [pc, #148]	; (3ef0 <sal_aes_setup+0x128>)
    3e5a:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    3e5c:	4668      	mov	r0, sp
    3e5e:	2100      	movs	r1, #0
    3e60:	4b24      	ldr	r3, [pc, #144]	; (3ef4 <sal_aes_setup+0x12c>)
    3e62:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3e64:	2310      	movs	r3, #16
    3e66:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3e68:	2083      	movs	r0, #131	; 0x83
    3e6a:	1c29      	adds	r1, r5, #0
    3e6c:	2201      	movs	r2, #1
    3e6e:	4b1f      	ldr	r3, [pc, #124]	; (3eec <sal_aes_setup+0x124>)
    3e70:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    3e72:	2084      	movs	r0, #132	; 0x84
    3e74:	4920      	ldr	r1, [pc, #128]	; (3ef8 <sal_aes_setup+0x130>)
    3e76:	2210      	movs	r2, #16
    3e78:	4b20      	ldr	r3, [pc, #128]	; (3efc <sal_aes_setup+0x134>)
    3e7a:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3e7c:	4d1a      	ldr	r5, [pc, #104]	; (3ee8 <sal_aes_setup+0x120>)
    3e7e:	1c68      	adds	r0, r5, #1
    3e80:	491d      	ldr	r1, [pc, #116]	; (3ef8 <sal_aes_setup+0x130>)
    3e82:	2210      	movs	r2, #16
    3e84:	4b17      	ldr	r3, [pc, #92]	; (3ee4 <sal_aes_setup+0x11c>)
    3e86:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3e88:	2083      	movs	r0, #131	; 0x83
    3e8a:	1c29      	adds	r1, r5, #0
    3e8c:	2211      	movs	r2, #17
    3e8e:	4b17      	ldr	r3, [pc, #92]	; (3eec <sal_aes_setup+0x124>)
    3e90:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    3e92:	4b11      	ldr	r3, [pc, #68]	; (3ed8 <sal_aes_setup+0x110>)
    3e94:	2201      	movs	r2, #1
    3e96:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    3e98:	4b10      	ldr	r3, [pc, #64]	; (3edc <sal_aes_setup+0x114>)
    3e9a:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    3e9c:	2f00      	cmp	r7, #0
    3e9e:	d002      	beq.n	3ea6 <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    3ea0:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    3ea2:	2f02      	cmp	r7, #2
    3ea4:	d113      	bne.n	3ece <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
    3ea6:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3ea8:	2308      	movs	r3, #8
    3eaa:	401c      	ands	r4, r3
    3eac:	013f      	lsls	r7, r7, #4
    3eae:	2370      	movs	r3, #112	; 0x70
    3eb0:	401f      	ands	r7, r3
    3eb2:	433c      	orrs	r4, r7
    3eb4:	4b0c      	ldr	r3, [pc, #48]	; (3ee8 <sal_aes_setup+0x120>)
    3eb6:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    3eb8:	2780      	movs	r7, #128	; 0x80
    3eba:	427f      	negs	r7, r7
    3ebc:	433c      	orrs	r4, r7
    3ebe:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    3ec0:	2201      	movs	r2, #1
    3ec2:	4b0b      	ldr	r3, [pc, #44]	; (3ef0 <sal_aes_setup+0x128>)
    3ec4:	701a      	strb	r2, [r3, #0]

	return (true);
    3ec6:	2001      	movs	r0, #1
    3ec8:	e001      	b.n	3ece <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    3eca:	2000      	movs	r0, #0
    3ecc:	e7ff      	b.n	3ece <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    3ece:	b004      	add	sp, #16
    3ed0:	bc04      	pop	{r2}
    3ed2:	4690      	mov	r8, r2
    3ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	200006c0 	.word	0x200006c0
    3edc:	20000009 	.word	0x20000009
    3ee0:	200006d4 	.word	0x200006d4
    3ee4:	00006db9 	.word	0x00006db9
    3ee8:	200006e4 	.word	0x200006e4
    3eec:	000044c9 	.word	0x000044c9
    3ef0:	200006f8 	.word	0x200006f8
    3ef4:	00003d5d 	.word	0x00003d5d
    3ef8:	200006c4 	.word	0x200006c4
    3efc:	00004641 	.word	0x00004641

00003f00 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3f00:	b508      	push	{r3, lr}
    3f02:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    3f04:	2084      	movs	r0, #132	; 0x84
    3f06:	2210      	movs	r2, #16
    3f08:	4b01      	ldr	r3, [pc, #4]	; (3f10 <sal_aes_read+0x10>)
    3f0a:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3f0c:	bd08      	pop	{r3, pc}
    3f0e:	46c0      	nop			; (mov r8, r8)
    3f10:	00004641 	.word	0x00004641

00003f14 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3f14:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3f16:	2201      	movs	r2, #1
    3f18:	4b03      	ldr	r3, [pc, #12]	; (3f28 <AT86RFX_ISR+0x14>)
    3f1a:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3f1c:	4b03      	ldr	r3, [pc, #12]	; (3f2c <AT86RFX_ISR+0x18>)
    3f1e:	681b      	ldr	r3, [r3, #0]
    3f20:	2b00      	cmp	r3, #0
    3f22:	d000      	beq.n	3f26 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3f24:	4798      	blx	r3
	}
}
    3f26:	bd08      	pop	{r3, pc}
    3f28:	40001800 	.word	0x40001800
    3f2c:	200006fc 	.word	0x200006fc

00003f30 <trx_spi_init>:

void trx_spi_init(void)
{
    3f30:	b530      	push	{r4, r5, lr}
    3f32:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    3f34:	4a32      	ldr	r2, [pc, #200]	; (4000 <trx_spi_init+0xd0>)
    3f36:	2300      	movs	r3, #0
    3f38:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3f3a:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3f3c:	213f      	movs	r1, #63	; 0x3f
    3f3e:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3f40:	4c30      	ldr	r4, [pc, #192]	; (4004 <trx_spi_init+0xd4>)
    3f42:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3f44:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3f46:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3f48:	2201      	movs	r2, #1
    3f4a:	4668      	mov	r0, sp
    3f4c:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
    3f4e:	7083      	strb	r3, [r0, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3f50:	7002      	strb	r2, [r0, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3f52:	203f      	movs	r0, #63	; 0x3f
    3f54:	4669      	mov	r1, sp
    3f56:	4b2c      	ldr	r3, [pc, #176]	; (4008 <trx_spi_init+0xd8>)
    3f58:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3f5a:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3f5c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3f5e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3f60:	2900      	cmp	r1, #0
    3f62:	d103      	bne.n	3f6c <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3f64:	095a      	lsrs	r2, r3, #5
    3f66:	01d2      	lsls	r2, r2, #7
    3f68:	4928      	ldr	r1, [pc, #160]	; (400c <trx_spi_init+0xdc>)
    3f6a:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f6c:	211f      	movs	r1, #31
    3f6e:	400b      	ands	r3, r1
    3f70:	2101      	movs	r1, #1
    3f72:	1c08      	adds	r0, r1, #0
    3f74:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3f76:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3f78:	4a25      	ldr	r2, [pc, #148]	; (4010 <trx_spi_init+0xe0>)
    3f7a:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3f7c:	2300      	movs	r3, #0
    3f7e:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3f80:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3f82:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    3f84:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    3f86:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3f88:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3f8a:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3f8c:	2124      	movs	r1, #36	; 0x24
    3f8e:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3f90:	61d3      	str	r3, [r2, #28]
    3f92:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3f94:	2380      	movs	r3, #128	; 0x80
    3f96:	025b      	lsls	r3, r3, #9
    3f98:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3f9a:	4b1e      	ldr	r3, [pc, #120]	; (4014 <trx_spi_init+0xe4>)
    3f9c:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3f9e:	4b1e      	ldr	r3, [pc, #120]	; (4018 <trx_spi_init+0xe8>)
    3fa0:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3fa2:	2301      	movs	r3, #1
    3fa4:	425b      	negs	r3, r3
    3fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3fa8:	4b1c      	ldr	r3, [pc, #112]	; (401c <trx_spi_init+0xec>)
    3faa:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3fac:	4b1c      	ldr	r3, [pc, #112]	; (4020 <trx_spi_init+0xf0>)
    3fae:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3fb0:	4c1c      	ldr	r4, [pc, #112]	; (4024 <trx_spi_init+0xf4>)
    3fb2:	1c20      	adds	r0, r4, #0
    3fb4:	491c      	ldr	r1, [pc, #112]	; (4028 <trx_spi_init+0xf8>)
    3fb6:	4b1d      	ldr	r3, [pc, #116]	; (402c <trx_spi_init+0xfc>)
    3fb8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fba:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3fbc:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d1fc      	bne.n	3fbc <trx_spi_init+0x8c>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3fc2:	6813      	ldr	r3, [r2, #0]
    3fc4:	2502      	movs	r5, #2
    3fc6:	432b      	orrs	r3, r5
    3fc8:	6013      	str	r3, [r2, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    3fca:	ac01      	add	r4, sp, #4
    3fcc:	1c20      	adds	r0, r4, #0
    3fce:	4b18      	ldr	r3, [pc, #96]	; (4030 <trx_spi_init+0x100>)
    3fd0:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    3fd2:	2320      	movs	r3, #32
    3fd4:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    3fd6:	2380      	movs	r3, #128	; 0x80
    3fd8:	039b      	lsls	r3, r3, #14
    3fda:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    3fdc:	7225      	strb	r5, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    3fde:	2301      	movs	r3, #1
    3fe0:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    3fe2:	2200      	movs	r2, #0
    3fe4:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    3fe6:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    3fe8:	2000      	movs	r0, #0
    3fea:	1c21      	adds	r1, r4, #0
    3fec:	4b11      	ldr	r3, [pc, #68]	; (4034 <trx_spi_init+0x104>)
    3fee:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    3ff0:	4811      	ldr	r0, [pc, #68]	; (4038 <trx_spi_init+0x108>)
    3ff2:	2100      	movs	r1, #0
    3ff4:	2200      	movs	r2, #0
    3ff6:	4b11      	ldr	r3, [pc, #68]	; (403c <trx_spi_init+0x10c>)
    3ff8:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3ffa:	b005      	add	sp, #20
    3ffc:	bd30      	pop	{r4, r5, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	20000990 	.word	0x20000990
    4004:	20000994 	.word	0x20000994
    4008:	00000a11 	.word	0x00000a11
    400c:	41004400 	.word	0x41004400
    4010:	20000998 	.word	0x20000998
    4014:	004c4b40 	.word	0x004c4b40
    4018:	00530005 	.word	0x00530005
    401c:	003e0005 	.word	0x003e0005
    4020:	00520005 	.word	0x00520005
    4024:	200009d0 	.word	0x200009d0
    4028:	42001800 	.word	0x42001800
    402c:	00000ef1 	.word	0x00000ef1
    4030:	00000985 	.word	0x00000985
    4034:	00000999 	.word	0x00000999
    4038:	00003f15 	.word	0x00003f15
    403c:	00000821 	.word	0x00000821

00004040 <PhyReset>:

void PhyReset(void)
{
    4040:	b570      	push	{r4, r5, r6, lr}
    4042:	4b09      	ldr	r3, [pc, #36]	; (4068 <PhyReset+0x28>)
    4044:	1c1c      	adds	r4, r3, #0
    4046:	3480      	adds	r4, #128	; 0x80
    4048:	2580      	movs	r5, #128	; 0x80
    404a:	022d      	lsls	r5, r5, #8
    404c:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    404e:	2280      	movs	r2, #128	; 0x80
    4050:	0352      	lsls	r2, r2, #13
    4052:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    4054:	20a5      	movs	r0, #165	; 0xa5
    4056:	0040      	lsls	r0, r0, #1
    4058:	4e04      	ldr	r6, [pc, #16]	; (406c <PhyReset+0x2c>)
    405a:	47b0      	blx	r6
    405c:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    405e:	200a      	movs	r0, #10
    4060:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4062:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    4064:	bd70      	pop	{r4, r5, r6, pc}
    4066:	46c0      	nop			; (mov r8, r8)
    4068:	41004400 	.word	0x41004400
    406c:	00000151 	.word	0x00000151

00004070 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    4070:	b570      	push	{r4, r5, r6, lr}
    4072:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4074:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4078:	4263      	negs	r3, r4
    407a:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    407c:	b672      	cpsid	i
    407e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4082:	2200      	movs	r2, #0
    4084:	4b33      	ldr	r3, [pc, #204]	; (4154 <trx_reg_read+0xe4>)
    4086:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4088:	4d33      	ldr	r5, [pc, #204]	; (4158 <trx_reg_read+0xe8>)
    408a:	1c28      	adds	r0, r5, #0
    408c:	4933      	ldr	r1, [pc, #204]	; (415c <trx_reg_read+0xec>)
    408e:	2201      	movs	r2, #1
    4090:	4b33      	ldr	r3, [pc, #204]	; (4160 <trx_reg_read+0xf0>)
    4092:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4094:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4096:	2101      	movs	r1, #1
    4098:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    409a:	420a      	tst	r2, r1
    409c:	d0fc      	beq.n	4098 <trx_reg_read+0x28>
    409e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    40a0:	07d1      	lsls	r1, r2, #31
    40a2:	d502      	bpl.n	40aa <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40a4:	2280      	movs	r2, #128	; 0x80
    40a6:	4316      	orrs	r6, r2
    40a8:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40aa:	2102      	movs	r1, #2
    40ac:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    40ae:	420a      	tst	r2, r1
    40b0:	d0fc      	beq.n	40ac <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40b2:	2104      	movs	r1, #4
    40b4:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    40b6:	420a      	tst	r2, r1
    40b8:	d0fc      	beq.n	40b4 <trx_reg_read+0x44>
    40ba:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    40bc:	0751      	lsls	r1, r2, #29
    40be:	d514      	bpl.n	40ea <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    40c0:	8b5a      	ldrh	r2, [r3, #26]
    40c2:	0751      	lsls	r1, r2, #29
    40c4:	d503      	bpl.n	40ce <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    40c6:	8b59      	ldrh	r1, [r3, #26]
    40c8:	2204      	movs	r2, #4
    40ca:	430a      	orrs	r2, r1
    40cc:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    40ce:	4a22      	ldr	r2, [pc, #136]	; (4158 <trx_reg_read+0xe8>)
    40d0:	7992      	ldrb	r2, [r2, #6]
    40d2:	2a01      	cmp	r2, #1
    40d4:	d105      	bne.n	40e2 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    40d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    40d8:	05c9      	lsls	r1, r1, #23
    40da:	0dc9      	lsrs	r1, r1, #23
    40dc:	4a21      	ldr	r2, [pc, #132]	; (4164 <trx_reg_read+0xf4>)
    40de:	8011      	strh	r1, [r2, #0]
    40e0:	e003      	b.n	40ea <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    40e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    40e4:	b2c9      	uxtb	r1, r1
    40e6:	4a1f      	ldr	r2, [pc, #124]	; (4164 <trx_reg_read+0xf4>)
    40e8:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40ea:	2101      	movs	r1, #1
    40ec:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    40ee:	420a      	tst	r2, r1
    40f0:	d0fc      	beq.n	40ec <trx_reg_read+0x7c>
    40f2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    40f4:	07d1      	lsls	r1, r2, #31
    40f6:	d501      	bpl.n	40fc <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40f8:	2200      	movs	r2, #0
    40fa:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40fc:	2102      	movs	r1, #2
    40fe:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    4100:	420a      	tst	r2, r1
    4102:	d0fc      	beq.n	40fe <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4104:	2104      	movs	r1, #4
    4106:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    4108:	420a      	tst	r2, r1
    410a:	d0fc      	beq.n	4106 <trx_reg_read+0x96>
    410c:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    410e:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4110:	0751      	lsls	r1, r2, #29
    4112:	d510      	bpl.n	4136 <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4114:	8b5a      	ldrh	r2, [r3, #26]
    4116:	0751      	lsls	r1, r2, #29
    4118:	d503      	bpl.n	4122 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    411a:	8b59      	ldrh	r1, [r3, #26]
    411c:	2204      	movs	r2, #4
    411e:	430a      	orrs	r2, r1
    4120:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4122:	4a0d      	ldr	r2, [pc, #52]	; (4158 <trx_reg_read+0xe8>)
    4124:	7992      	ldrb	r2, [r2, #6]
    4126:	2a01      	cmp	r2, #1
    4128:	d103      	bne.n	4132 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    412a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    412c:	05ed      	lsls	r5, r5, #23
    412e:	0ded      	lsrs	r5, r5, #23
    4130:	e001      	b.n	4136 <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4132:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    4134:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4136:	4808      	ldr	r0, [pc, #32]	; (4158 <trx_reg_read+0xe8>)
    4138:	4908      	ldr	r1, [pc, #32]	; (415c <trx_reg_read+0xec>)
    413a:	2200      	movs	r2, #0
    413c:	4b08      	ldr	r3, [pc, #32]	; (4160 <trx_reg_read+0xf0>)
    413e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4140:	2c00      	cmp	r4, #0
    4142:	d005      	beq.n	4150 <trx_reg_read+0xe0>
		cpu_irq_enable();
    4144:	2201      	movs	r2, #1
    4146:	4b03      	ldr	r3, [pc, #12]	; (4154 <trx_reg_read+0xe4>)
    4148:	701a      	strb	r2, [r3, #0]
    414a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    414e:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    4150:	b2e8      	uxtb	r0, r5
}
    4152:	bd70      	pop	{r4, r5, r6, pc}
    4154:	20000008 	.word	0x20000008
    4158:	200009d0 	.word	0x200009d0
    415c:	20000994 	.word	0x20000994
    4160:	000011a1 	.word	0x000011a1
    4164:	2000098c 	.word	0x2000098c

00004168 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    4168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    416a:	1c07      	adds	r7, r0, #0
    416c:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    416e:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4172:	4263      	negs	r3, r4
    4174:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4176:	b672      	cpsid	i
    4178:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    417c:	2200      	movs	r2, #0
    417e:	4b34      	ldr	r3, [pc, #208]	; (4250 <trx_reg_write+0xe8>)
    4180:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4182:	4e34      	ldr	r6, [pc, #208]	; (4254 <trx_reg_write+0xec>)
    4184:	1c30      	adds	r0, r6, #0
    4186:	4934      	ldr	r1, [pc, #208]	; (4258 <trx_reg_write+0xf0>)
    4188:	2201      	movs	r2, #1
    418a:	4b34      	ldr	r3, [pc, #208]	; (425c <trx_reg_write+0xf4>)
    418c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    418e:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4190:	2101      	movs	r1, #1
    4192:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    4194:	420a      	tst	r2, r1
    4196:	d0fc      	beq.n	4192 <trx_reg_write+0x2a>
    4198:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    419a:	07d1      	lsls	r1, r2, #31
    419c:	d502      	bpl.n	41a4 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    419e:	22c0      	movs	r2, #192	; 0xc0
    41a0:	4317      	orrs	r7, r2
    41a2:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    41a4:	2102      	movs	r1, #2
    41a6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    41a8:	420a      	tst	r2, r1
    41aa:	d0fc      	beq.n	41a6 <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41ac:	2104      	movs	r1, #4
    41ae:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    41b0:	420a      	tst	r2, r1
    41b2:	d0fc      	beq.n	41ae <trx_reg_write+0x46>
    41b4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    41b6:	0751      	lsls	r1, r2, #29
    41b8:	d514      	bpl.n	41e4 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    41ba:	8b5a      	ldrh	r2, [r3, #26]
    41bc:	0751      	lsls	r1, r2, #29
    41be:	d503      	bpl.n	41c8 <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    41c0:	8b59      	ldrh	r1, [r3, #26]
    41c2:	2204      	movs	r2, #4
    41c4:	430a      	orrs	r2, r1
    41c6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    41c8:	4a22      	ldr	r2, [pc, #136]	; (4254 <trx_reg_write+0xec>)
    41ca:	7992      	ldrb	r2, [r2, #6]
    41cc:	2a01      	cmp	r2, #1
    41ce:	d105      	bne.n	41dc <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    41d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    41d2:	05c9      	lsls	r1, r1, #23
    41d4:	0dc9      	lsrs	r1, r1, #23
    41d6:	4a22      	ldr	r2, [pc, #136]	; (4260 <trx_reg_write+0xf8>)
    41d8:	8011      	strh	r1, [r2, #0]
    41da:	e003      	b.n	41e4 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    41dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    41de:	b2c9      	uxtb	r1, r1
    41e0:	4a1f      	ldr	r2, [pc, #124]	; (4260 <trx_reg_write+0xf8>)
    41e2:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    41e4:	2001      	movs	r0, #1
    41e6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    41e8:	4202      	tst	r2, r0
    41ea:	d0fc      	beq.n	41e6 <trx_reg_write+0x7e>
    41ec:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    41ee:	07d1      	lsls	r1, r2, #31
    41f0:	d500      	bpl.n	41f4 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    41f2:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    41f4:	2102      	movs	r1, #2
    41f6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    41f8:	420a      	tst	r2, r1
    41fa:	d0fc      	beq.n	41f6 <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    41fc:	2104      	movs	r1, #4
    41fe:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4200:	420a      	tst	r2, r1
    4202:	d0fc      	beq.n	41fe <trx_reg_write+0x96>
    4204:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4206:	0751      	lsls	r1, r2, #29
    4208:	d514      	bpl.n	4234 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    420a:	8b5a      	ldrh	r2, [r3, #26]
    420c:	0751      	lsls	r1, r2, #29
    420e:	d503      	bpl.n	4218 <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4210:	8b59      	ldrh	r1, [r3, #26]
    4212:	2204      	movs	r2, #4
    4214:	430a      	orrs	r2, r1
    4216:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4218:	4a0e      	ldr	r2, [pc, #56]	; (4254 <trx_reg_write+0xec>)
    421a:	7992      	ldrb	r2, [r2, #6]
    421c:	2a01      	cmp	r2, #1
    421e:	d105      	bne.n	422c <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4222:	05d2      	lsls	r2, r2, #23
    4224:	0dd2      	lsrs	r2, r2, #23
    4226:	4b0e      	ldr	r3, [pc, #56]	; (4260 <trx_reg_write+0xf8>)
    4228:	801a      	strh	r2, [r3, #0]
    422a:	e003      	b.n	4234 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    422c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    422e:	b2d2      	uxtb	r2, r2
    4230:	4b0b      	ldr	r3, [pc, #44]	; (4260 <trx_reg_write+0xf8>)
    4232:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4234:	4807      	ldr	r0, [pc, #28]	; (4254 <trx_reg_write+0xec>)
    4236:	4908      	ldr	r1, [pc, #32]	; (4258 <trx_reg_write+0xf0>)
    4238:	2200      	movs	r2, #0
    423a:	4b08      	ldr	r3, [pc, #32]	; (425c <trx_reg_write+0xf4>)
    423c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    423e:	2c00      	cmp	r4, #0
    4240:	d005      	beq.n	424e <trx_reg_write+0xe6>
		cpu_irq_enable();
    4242:	2201      	movs	r2, #1
    4244:	4b02      	ldr	r3, [pc, #8]	; (4250 <trx_reg_write+0xe8>)
    4246:	701a      	strb	r2, [r3, #0]
    4248:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    424c:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    424e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4250:	20000008 	.word	0x20000008
    4254:	200009d0 	.word	0x200009d0
    4258:	20000994 	.word	0x20000994
    425c:	000011a1 	.word	0x000011a1
    4260:	2000098c 	.word	0x2000098c

00004264 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    4264:	b5f0      	push	{r4, r5, r6, r7, lr}
    4266:	465f      	mov	r7, fp
    4268:	4656      	mov	r6, sl
    426a:	464d      	mov	r5, r9
    426c:	4644      	mov	r4, r8
    426e:	b4f0      	push	{r4, r5, r6, r7}
    4270:	b083      	sub	sp, #12
    4272:	1c06      	adds	r6, r0, #0
    4274:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4276:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    427a:	4278      	negs	r0, r7
    427c:	4178      	adcs	r0, r7
    427e:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4280:	b672      	cpsid	i
    4282:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4286:	2200      	movs	r2, #0
    4288:	4b41      	ldr	r3, [pc, #260]	; (4390 <trx_frame_read+0x12c>)
    428a:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    428c:	4d41      	ldr	r5, [pc, #260]	; (4394 <trx_frame_read+0x130>)
    428e:	1c28      	adds	r0, r5, #0
    4290:	4941      	ldr	r1, [pc, #260]	; (4398 <trx_frame_read+0x134>)
    4292:	2201      	movs	r2, #1
    4294:	4b41      	ldr	r3, [pc, #260]	; (439c <trx_frame_read+0x138>)
    4296:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4298:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    429a:	2101      	movs	r1, #1
    429c:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    429e:	420a      	tst	r2, r1
    42a0:	d0fc      	beq.n	429c <trx_frame_read+0x38>
    42a2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    42a4:	07d1      	lsls	r1, r2, #31
    42a6:	d501      	bpl.n	42ac <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42a8:	2220      	movs	r2, #32
    42aa:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42ac:	2102      	movs	r1, #2
    42ae:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    42b0:	420a      	tst	r2, r1
    42b2:	d0fc      	beq.n	42ae <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42b4:	2004      	movs	r0, #4
    42b6:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    42b8:	4202      	tst	r2, r0
    42ba:	d0fc      	beq.n	42b6 <trx_frame_read+0x52>
    42bc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    42be:	0750      	lsls	r0, r2, #29
    42c0:	d50f      	bpl.n	42e2 <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    42c2:	8b5a      	ldrh	r2, [r3, #26]
    42c4:	0751      	lsls	r1, r2, #29
    42c6:	d503      	bpl.n	42d0 <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    42c8:	8b59      	ldrh	r1, [r3, #26]
    42ca:	2204      	movs	r2, #4
    42cc:	430a      	orrs	r2, r1
    42ce:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42d0:	4a30      	ldr	r2, [pc, #192]	; (4394 <trx_frame_read+0x130>)
    42d2:	7992      	ldrb	r2, [r2, #6]
    42d4:	2a01      	cmp	r2, #1
    42d6:	d109      	bne.n	42ec <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    42d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42da:	05d2      	lsls	r2, r2, #23
    42dc:	0dd2      	lsrs	r2, r2, #23
    42de:	4b30      	ldr	r3, [pc, #192]	; (43a0 <trx_frame_read+0x13c>)
    42e0:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    42e2:	1e63      	subs	r3, r4, #1
    42e4:	b2db      	uxtb	r3, r3
    42e6:	2c00      	cmp	r4, #0
    42e8:	d105      	bne.n	42f6 <trx_frame_read+0x92>
    42ea:	e03c      	b.n	4366 <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42ee:	b2d2      	uxtb	r2, r2
    42f0:	4b2b      	ldr	r3, [pc, #172]	; (43a0 <trx_frame_read+0x13c>)
    42f2:	801a      	strh	r2, [r3, #0]
    42f4:	e7f5      	b.n	42e2 <trx_frame_read+0x7e>
    42f6:	3301      	adds	r3, #1
    42f8:	199b      	adds	r3, r3, r6
    42fa:	4699      	mov	r9, r3
    42fc:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42fe:	4a25      	ldr	r2, [pc, #148]	; (4394 <trx_frame_read+0x130>)
    4300:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4302:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4304:	2300      	movs	r3, #0
    4306:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4308:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    430a:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    430c:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    430e:	2204      	movs	r2, #4
    4310:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4312:	4642      	mov	r2, r8
    4314:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4316:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4318:	4222      	tst	r2, r4
    431a:	d0fc      	beq.n	4316 <trx_frame_read+0xb2>
    431c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    431e:	4222      	tst	r2, r4
    4320:	d001      	beq.n	4326 <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4322:	4652      	mov	r2, sl
    4324:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4326:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    4328:	422a      	tst	r2, r5
    432a:	d0fc      	beq.n	4326 <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    432c:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    432e:	420a      	tst	r2, r1
    4330:	d0fc      	beq.n	432c <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4332:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4334:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4336:	420a      	tst	r2, r1
    4338:	d011      	beq.n	435e <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    433a:	8b5a      	ldrh	r2, [r3, #26]
    433c:	420a      	tst	r2, r1
    433e:	d004      	beq.n	434a <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4340:	8b5a      	ldrh	r2, [r3, #26]
    4342:	4658      	mov	r0, fp
    4344:	4302      	orrs	r2, r0
    4346:	b292      	uxth	r2, r2
    4348:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    434a:	4812      	ldr	r0, [pc, #72]	; (4394 <trx_frame_read+0x130>)
    434c:	7982      	ldrb	r2, [r0, #6]
    434e:	2a01      	cmp	r2, #1
    4350:	d103      	bne.n	435a <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4352:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4354:	05c0      	lsls	r0, r0, #23
    4356:	0dc0      	lsrs	r0, r0, #23
    4358:	e001      	b.n	435e <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    435a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    435c:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    435e:	7030      	strb	r0, [r6, #0]
		data++;
    4360:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4362:	454e      	cmp	r6, r9
    4364:	d1d5      	bne.n	4312 <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4366:	480b      	ldr	r0, [pc, #44]	; (4394 <trx_frame_read+0x130>)
    4368:	490b      	ldr	r1, [pc, #44]	; (4398 <trx_frame_read+0x134>)
    436a:	2200      	movs	r2, #0
    436c:	4b0b      	ldr	r3, [pc, #44]	; (439c <trx_frame_read+0x138>)
    436e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4370:	9901      	ldr	r1, [sp, #4]
    4372:	2900      	cmp	r1, #0
    4374:	d005      	beq.n	4382 <trx_frame_read+0x11e>
		cpu_irq_enable();
    4376:	2201      	movs	r2, #1
    4378:	4b05      	ldr	r3, [pc, #20]	; (4390 <trx_frame_read+0x12c>)
    437a:	701a      	strb	r2, [r3, #0]
    437c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4380:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4382:	b003      	add	sp, #12
    4384:	bc3c      	pop	{r2, r3, r4, r5}
    4386:	4690      	mov	r8, r2
    4388:	4699      	mov	r9, r3
    438a:	46a2      	mov	sl, r4
    438c:	46ab      	mov	fp, r5
    438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4390:	20000008 	.word	0x20000008
    4394:	200009d0 	.word	0x200009d0
    4398:	20000994 	.word	0x20000994
    439c:	000011a1 	.word	0x000011a1
    43a0:	2000098c 	.word	0x2000098c

000043a4 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    43a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43a6:	464f      	mov	r7, r9
    43a8:	4646      	mov	r6, r8
    43aa:	b4c0      	push	{r6, r7}
    43ac:	1c04      	adds	r4, r0, #0
    43ae:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    43b0:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    43b4:	4271      	negs	r1, r6
    43b6:	4171      	adcs	r1, r6
    43b8:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    43ba:	b672      	cpsid	i
    43bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    43c0:	2200      	movs	r2, #0
    43c2:	4b3c      	ldr	r3, [pc, #240]	; (44b4 <trx_frame_write+0x110>)
    43c4:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    43c6:	4f3c      	ldr	r7, [pc, #240]	; (44b8 <trx_frame_write+0x114>)
    43c8:	1c38      	adds	r0, r7, #0
    43ca:	493c      	ldr	r1, [pc, #240]	; (44bc <trx_frame_write+0x118>)
    43cc:	2201      	movs	r2, #1
    43ce:	4b3c      	ldr	r3, [pc, #240]	; (44c0 <trx_frame_write+0x11c>)
    43d0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43d2:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43d4:	2101      	movs	r1, #1
    43d6:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    43d8:	420a      	tst	r2, r1
    43da:	d0fc      	beq.n	43d6 <trx_frame_write+0x32>
    43dc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    43de:	07d1      	lsls	r1, r2, #31
    43e0:	d501      	bpl.n	43e6 <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    43e2:	2260      	movs	r2, #96	; 0x60
    43e4:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43e6:	2102      	movs	r1, #2
    43e8:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    43ea:	420a      	tst	r2, r1
    43ec:	d0fc      	beq.n	43e8 <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43ee:	2104      	movs	r1, #4
    43f0:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    43f2:	420a      	tst	r2, r1
    43f4:	d0fc      	beq.n	43f0 <trx_frame_write+0x4c>
    43f6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    43f8:	0751      	lsls	r1, r2, #29
    43fa:	d50f      	bpl.n	441c <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43fc:	8b5a      	ldrh	r2, [r3, #26]
    43fe:	0751      	lsls	r1, r2, #29
    4400:	d503      	bpl.n	440a <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4402:	8b59      	ldrh	r1, [r3, #26]
    4404:	2204      	movs	r2, #4
    4406:	430a      	orrs	r2, r1
    4408:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    440a:	4a2b      	ldr	r2, [pc, #172]	; (44b8 <trx_frame_write+0x114>)
    440c:	7992      	ldrb	r2, [r2, #6]
    440e:	2a01      	cmp	r2, #1
    4410:	d10e      	bne.n	4430 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4412:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4414:	05c9      	lsls	r1, r1, #23
    4416:	0dc9      	lsrs	r1, r1, #23
    4418:	4a2a      	ldr	r2, [pc, #168]	; (44c4 <trx_frame_write+0x120>)
    441a:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    441c:	4a26      	ldr	r2, [pc, #152]	; (44b8 <trx_frame_write+0x114>)
    441e:	7992      	ldrb	r2, [r2, #6]
    4420:	4690      	mov	r8, r2
    4422:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4424:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4426:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4428:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    442a:	2204      	movs	r2, #4
    442c:	4694      	mov	ip, r2
    442e:	e02b      	b.n	4488 <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4430:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4432:	b2c9      	uxtb	r1, r1
    4434:	4a23      	ldr	r2, [pc, #140]	; (44c4 <trx_frame_write+0x120>)
    4436:	8011      	strh	r1, [r2, #0]
    4438:	e7f0      	b.n	441c <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    443a:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    443c:	423a      	tst	r2, r7
    443e:	d0fc      	beq.n	443a <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    4440:	7831      	ldrb	r1, [r6, #0]
    4442:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4444:	423a      	tst	r2, r7
    4446:	d000      	beq.n	444a <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4448:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    444a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    444c:	4202      	tst	r2, r0
    444e:	d0fc      	beq.n	444a <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4450:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4452:	4222      	tst	r2, r4
    4454:	d0fc      	beq.n	4450 <trx_frame_write+0xac>
    4456:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4458:	4222      	tst	r2, r4
    445a:	d014      	beq.n	4486 <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    445c:	8b5a      	ldrh	r2, [r3, #26]
    445e:	4222      	tst	r2, r4
    4460:	d004      	beq.n	446c <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4462:	8b5a      	ldrh	r2, [r3, #26]
    4464:	4661      	mov	r1, ip
    4466:	430a      	orrs	r2, r1
    4468:	b292      	uxth	r2, r2
    446a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    446c:	4642      	mov	r2, r8
    446e:	2a01      	cmp	r2, #1
    4470:	d105      	bne.n	447e <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4474:	05d2      	lsls	r2, r2, #23
    4476:	0dd2      	lsrs	r2, r2, #23
    4478:	4912      	ldr	r1, [pc, #72]	; (44c4 <trx_frame_write+0x120>)
    447a:	800a      	strh	r2, [r1, #0]
    447c:	e003      	b.n	4486 <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    447e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4480:	b2d2      	uxtb	r2, r2
    4482:	4910      	ldr	r1, [pc, #64]	; (44c4 <trx_frame_write+0x120>)
    4484:	800a      	strh	r2, [r1, #0]
    4486:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    4488:	3d01      	subs	r5, #1
    448a:	b2ed      	uxtb	r5, r5
    448c:	2dff      	cmp	r5, #255	; 0xff
    448e:	d1d4      	bne.n	443a <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4490:	4809      	ldr	r0, [pc, #36]	; (44b8 <trx_frame_write+0x114>)
    4492:	490a      	ldr	r1, [pc, #40]	; (44bc <trx_frame_write+0x118>)
    4494:	2200      	movs	r2, #0
    4496:	4b0a      	ldr	r3, [pc, #40]	; (44c0 <trx_frame_write+0x11c>)
    4498:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    449a:	464a      	mov	r2, r9
    449c:	2a00      	cmp	r2, #0
    449e:	d005      	beq.n	44ac <trx_frame_write+0x108>
		cpu_irq_enable();
    44a0:	2201      	movs	r2, #1
    44a2:	4b04      	ldr	r3, [pc, #16]	; (44b4 <trx_frame_write+0x110>)
    44a4:	701a      	strb	r2, [r3, #0]
    44a6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    44aa:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    44ac:	bc0c      	pop	{r2, r3}
    44ae:	4690      	mov	r8, r2
    44b0:	4699      	mov	r9, r3
    44b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44b4:	20000008 	.word	0x20000008
    44b8:	200009d0 	.word	0x200009d0
    44bc:	20000994 	.word	0x20000994
    44c0:	000011a1 	.word	0x000011a1
    44c4:	2000098c 	.word	0x2000098c

000044c8 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    44c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ca:	464f      	mov	r7, r9
    44cc:	4646      	mov	r6, r8
    44ce:	b4c0      	push	{r6, r7}
    44d0:	1c07      	adds	r7, r0, #0
    44d2:	1c0c      	adds	r4, r1, #0
    44d4:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    44d6:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    44da:	4271      	negs	r1, r6
    44dc:	4171      	adcs	r1, r6
    44de:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    44e0:	b672      	cpsid	i
    44e2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    44e6:	2200      	movs	r2, #0
    44e8:	4b50      	ldr	r3, [pc, #320]	; (462c <trx_sram_write+0x164>)
    44ea:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    44ec:	4e50      	ldr	r6, [pc, #320]	; (4630 <trx_sram_write+0x168>)
    44ee:	1c30      	adds	r0, r6, #0
    44f0:	4950      	ldr	r1, [pc, #320]	; (4634 <trx_sram_write+0x16c>)
    44f2:	2201      	movs	r2, #1
    44f4:	4b50      	ldr	r3, [pc, #320]	; (4638 <trx_sram_write+0x170>)
    44f6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44f8:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44fa:	2101      	movs	r1, #1
    44fc:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    44fe:	420a      	tst	r2, r1
    4500:	d0fc      	beq.n	44fc <trx_sram_write+0x34>
    4502:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4504:	07d1      	lsls	r1, r2, #31
    4506:	d501      	bpl.n	450c <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4508:	2240      	movs	r2, #64	; 0x40
    450a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    450c:	2102      	movs	r1, #2
    450e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4510:	420a      	tst	r2, r1
    4512:	d0fc      	beq.n	450e <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4514:	2104      	movs	r1, #4
    4516:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4518:	420a      	tst	r2, r1
    451a:	d0fc      	beq.n	4516 <trx_sram_write+0x4e>
    451c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    451e:	0751      	lsls	r1, r2, #29
    4520:	d514      	bpl.n	454c <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4522:	8b5a      	ldrh	r2, [r3, #26]
    4524:	0751      	lsls	r1, r2, #29
    4526:	d503      	bpl.n	4530 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4528:	8b59      	ldrh	r1, [r3, #26]
    452a:	2204      	movs	r2, #4
    452c:	430a      	orrs	r2, r1
    452e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4530:	4a3f      	ldr	r2, [pc, #252]	; (4630 <trx_sram_write+0x168>)
    4532:	7992      	ldrb	r2, [r2, #6]
    4534:	2a01      	cmp	r2, #1
    4536:	d105      	bne.n	4544 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4538:	6a99      	ldr	r1, [r3, #40]	; 0x28
    453a:	05c9      	lsls	r1, r1, #23
    453c:	0dc9      	lsrs	r1, r1, #23
    453e:	4a3f      	ldr	r2, [pc, #252]	; (463c <trx_sram_write+0x174>)
    4540:	8011      	strh	r1, [r2, #0]
    4542:	e003      	b.n	454c <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4544:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4546:	b2c9      	uxtb	r1, r1
    4548:	4a3c      	ldr	r2, [pc, #240]	; (463c <trx_sram_write+0x174>)
    454a:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    454c:	2101      	movs	r1, #1
    454e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4550:	420a      	tst	r2, r1
    4552:	d0fc      	beq.n	454e <trx_sram_write+0x86>
    4554:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4556:	07d1      	lsls	r1, r2, #31
    4558:	d500      	bpl.n	455c <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    455a:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    455c:	2102      	movs	r1, #2
    455e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4560:	420a      	tst	r2, r1
    4562:	d0fc      	beq.n	455e <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4564:	2104      	movs	r1, #4
    4566:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    4568:	420a      	tst	r2, r1
    456a:	d0fc      	beq.n	4566 <trx_sram_write+0x9e>
    456c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    456e:	0751      	lsls	r1, r2, #29
    4570:	d50f      	bpl.n	4592 <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4572:	8b5a      	ldrh	r2, [r3, #26]
    4574:	0751      	lsls	r1, r2, #29
    4576:	d503      	bpl.n	4580 <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4578:	8b59      	ldrh	r1, [r3, #26]
    457a:	2204      	movs	r2, #4
    457c:	430a      	orrs	r2, r1
    457e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4580:	4a2b      	ldr	r2, [pc, #172]	; (4630 <trx_sram_write+0x168>)
    4582:	7992      	ldrb	r2, [r2, #6]
    4584:	2a01      	cmp	r2, #1
    4586:	d10e      	bne.n	45a6 <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4588:	6a99      	ldr	r1, [r3, #40]	; 0x28
    458a:	05c9      	lsls	r1, r1, #23
    458c:	0dc9      	lsrs	r1, r1, #23
    458e:	4a2b      	ldr	r2, [pc, #172]	; (463c <trx_sram_write+0x174>)
    4590:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4592:	4a27      	ldr	r2, [pc, #156]	; (4630 <trx_sram_write+0x168>)
    4594:	7992      	ldrb	r2, [r2, #6]
    4596:	4690      	mov	r8, r2
    4598:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    459a:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    459c:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    459e:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    45a0:	2204      	movs	r2, #4
    45a2:	4694      	mov	ip, r2
    45a4:	e02b      	b.n	45fe <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    45a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    45a8:	b2c9      	uxtb	r1, r1
    45aa:	4a24      	ldr	r2, [pc, #144]	; (463c <trx_sram_write+0x174>)
    45ac:	8011      	strh	r1, [r2, #0]
    45ae:	e7f0      	b.n	4592 <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    45b0:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    45b2:	4238      	tst	r0, r7
    45b4:	d0fc      	beq.n	45b0 <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    45b6:	7832      	ldrb	r2, [r6, #0]
    45b8:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    45ba:	4238      	tst	r0, r7
    45bc:	d000      	beq.n	45c0 <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    45be:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    45c0:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    45c2:	4208      	tst	r0, r1
    45c4:	d0fc      	beq.n	45c0 <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    45c6:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    45c8:	4220      	tst	r0, r4
    45ca:	d0fc      	beq.n	45c6 <trx_sram_write+0xfe>
    45cc:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    45ce:	4220      	tst	r0, r4
    45d0:	d014      	beq.n	45fc <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    45d2:	8b58      	ldrh	r0, [r3, #26]
    45d4:	4220      	tst	r0, r4
    45d6:	d004      	beq.n	45e2 <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    45d8:	8b58      	ldrh	r0, [r3, #26]
    45da:	4662      	mov	r2, ip
    45dc:	4310      	orrs	r0, r2
    45de:	b280      	uxth	r0, r0
    45e0:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    45e2:	4642      	mov	r2, r8
    45e4:	2a01      	cmp	r2, #1
    45e6:	d105      	bne.n	45f4 <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    45e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    45ea:	05c0      	lsls	r0, r0, #23
    45ec:	0dc0      	lsrs	r0, r0, #23
    45ee:	4a13      	ldr	r2, [pc, #76]	; (463c <trx_sram_write+0x174>)
    45f0:	8010      	strh	r0, [r2, #0]
    45f2:	e003      	b.n	45fc <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    45f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    45f6:	b2c0      	uxtb	r0, r0
    45f8:	4a10      	ldr	r2, [pc, #64]	; (463c <trx_sram_write+0x174>)
    45fa:	8010      	strh	r0, [r2, #0]
    45fc:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    45fe:	3d01      	subs	r5, #1
    4600:	b2ed      	uxtb	r5, r5
    4602:	2dff      	cmp	r5, #255	; 0xff
    4604:	d1d4      	bne.n	45b0 <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4606:	480a      	ldr	r0, [pc, #40]	; (4630 <trx_sram_write+0x168>)
    4608:	490a      	ldr	r1, [pc, #40]	; (4634 <trx_sram_write+0x16c>)
    460a:	2200      	movs	r2, #0
    460c:	4b0a      	ldr	r3, [pc, #40]	; (4638 <trx_sram_write+0x170>)
    460e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4610:	464b      	mov	r3, r9
    4612:	2b00      	cmp	r3, #0
    4614:	d005      	beq.n	4622 <trx_sram_write+0x15a>
		cpu_irq_enable();
    4616:	2201      	movs	r2, #1
    4618:	4b04      	ldr	r3, [pc, #16]	; (462c <trx_sram_write+0x164>)
    461a:	701a      	strb	r2, [r3, #0]
    461c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4620:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4622:	bc0c      	pop	{r2, r3}
    4624:	4690      	mov	r8, r2
    4626:	4699      	mov	r9, r3
    4628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    462a:	46c0      	nop			; (mov r8, r8)
    462c:	20000008 	.word	0x20000008
    4630:	200009d0 	.word	0x200009d0
    4634:	20000994 	.word	0x20000994
    4638:	000011a1 	.word	0x000011a1
    463c:	2000098c 	.word	0x2000098c

00004640 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    4640:	b5f0      	push	{r4, r5, r6, r7, lr}
    4642:	465f      	mov	r7, fp
    4644:	4656      	mov	r6, sl
    4646:	464d      	mov	r5, r9
    4648:	4644      	mov	r4, r8
    464a:	b4f0      	push	{r4, r5, r6, r7}
    464c:	b083      	sub	sp, #12
    464e:	1c05      	adds	r5, r0, #0
    4650:	1c0e      	adds	r6, r1, #0
    4652:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    4654:	2001      	movs	r0, #1
    4656:	4b5b      	ldr	r3, [pc, #364]	; (47c4 <trx_sram_read+0x184>)
    4658:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    465a:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    465e:	4279      	negs	r1, r7
    4660:	4179      	adcs	r1, r7
    4662:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4664:	b672      	cpsid	i
    4666:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    466a:	2200      	movs	r2, #0
    466c:	4b56      	ldr	r3, [pc, #344]	; (47c8 <trx_sram_read+0x188>)
    466e:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4670:	4f56      	ldr	r7, [pc, #344]	; (47cc <trx_sram_read+0x18c>)
    4672:	1c38      	adds	r0, r7, #0
    4674:	4956      	ldr	r1, [pc, #344]	; (47d0 <trx_sram_read+0x190>)
    4676:	2201      	movs	r2, #1
    4678:	4b56      	ldr	r3, [pc, #344]	; (47d4 <trx_sram_read+0x194>)
    467a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    467c:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    467e:	2101      	movs	r1, #1
    4680:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4682:	420a      	tst	r2, r1
    4684:	d0fc      	beq.n	4680 <trx_sram_read+0x40>
    4686:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4688:	07d1      	lsls	r1, r2, #31
    468a:	d501      	bpl.n	4690 <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    468c:	2200      	movs	r2, #0
    468e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4690:	2102      	movs	r1, #2
    4692:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4694:	420a      	tst	r2, r1
    4696:	d0fc      	beq.n	4692 <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4698:	2204      	movs	r2, #4
    469a:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    469c:	4211      	tst	r1, r2
    469e:	d0fc      	beq.n	469a <trx_sram_read+0x5a>
    46a0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    46a2:	0751      	lsls	r1, r2, #29
    46a4:	d514      	bpl.n	46d0 <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46a6:	8b5a      	ldrh	r2, [r3, #26]
    46a8:	0751      	lsls	r1, r2, #29
    46aa:	d503      	bpl.n	46b4 <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    46ac:	8b59      	ldrh	r1, [r3, #26]
    46ae:	2204      	movs	r2, #4
    46b0:	430a      	orrs	r2, r1
    46b2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46b4:	4a45      	ldr	r2, [pc, #276]	; (47cc <trx_sram_read+0x18c>)
    46b6:	7992      	ldrb	r2, [r2, #6]
    46b8:	2a01      	cmp	r2, #1
    46ba:	d105      	bne.n	46c8 <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    46be:	05c9      	lsls	r1, r1, #23
    46c0:	0dc9      	lsrs	r1, r1, #23
    46c2:	4a45      	ldr	r2, [pc, #276]	; (47d8 <trx_sram_read+0x198>)
    46c4:	8011      	strh	r1, [r2, #0]
    46c6:	e003      	b.n	46d0 <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    46c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    46ca:	b2c9      	uxtb	r1, r1
    46cc:	4a42      	ldr	r2, [pc, #264]	; (47d8 <trx_sram_read+0x198>)
    46ce:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    46d0:	2201      	movs	r2, #1
    46d2:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    46d4:	4211      	tst	r1, r2
    46d6:	d0fc      	beq.n	46d2 <trx_sram_read+0x92>
    46d8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    46da:	07d1      	lsls	r1, r2, #31
    46dc:	d500      	bpl.n	46e0 <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    46de:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    46e0:	2202      	movs	r2, #2
    46e2:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    46e4:	4211      	tst	r1, r2
    46e6:	d0fc      	beq.n	46e2 <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    46e8:	2204      	movs	r2, #4
    46ea:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    46ec:	4211      	tst	r1, r2
    46ee:	d0fc      	beq.n	46ea <trx_sram_read+0xaa>
    46f0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    46f2:	0751      	lsls	r1, r2, #29
    46f4:	d50f      	bpl.n	4716 <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46f6:	8b5a      	ldrh	r2, [r3, #26]
    46f8:	0751      	lsls	r1, r2, #29
    46fa:	d503      	bpl.n	4704 <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    46fc:	8b59      	ldrh	r1, [r3, #26]
    46fe:	2204      	movs	r2, #4
    4700:	430a      	orrs	r2, r1
    4702:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4704:	4a31      	ldr	r2, [pc, #196]	; (47cc <trx_sram_read+0x18c>)
    4706:	7992      	ldrb	r2, [r2, #6]
    4708:	2a01      	cmp	r2, #1
    470a:	d109      	bne.n	4720 <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    470c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    470e:	05d2      	lsls	r2, r2, #23
    4710:	0dd2      	lsrs	r2, r2, #23
    4712:	4b31      	ldr	r3, [pc, #196]	; (47d8 <trx_sram_read+0x198>)
    4714:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4716:	1e63      	subs	r3, r4, #1
    4718:	b2db      	uxtb	r3, r3
    471a:	2c00      	cmp	r4, #0
    471c:	d105      	bne.n	472a <trx_sram_read+0xea>
    471e:	e03b      	b.n	4798 <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4722:	b2d2      	uxtb	r2, r2
    4724:	4b2c      	ldr	r3, [pc, #176]	; (47d8 <trx_sram_read+0x198>)
    4726:	801a      	strh	r2, [r3, #0]
    4728:	e7f5      	b.n	4716 <trx_sram_read+0xd6>
    472a:	3301      	adds	r3, #1
    472c:	199b      	adds	r3, r3, r6
    472e:	4699      	mov	r9, r3
    4730:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4732:	4a26      	ldr	r2, [pc, #152]	; (47cc <trx_sram_read+0x18c>)
    4734:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4736:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4738:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    473a:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    473c:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    473e:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4740:	2204      	movs	r2, #4
    4742:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4744:	4642      	mov	r2, r8
    4746:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4748:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    474a:	4222      	tst	r2, r4
    474c:	d0fc      	beq.n	4748 <trx_sram_read+0x108>
    474e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4750:	4222      	tst	r2, r4
    4752:	d001      	beq.n	4758 <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4754:	4652      	mov	r2, sl
    4756:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4758:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    475a:	422a      	tst	r2, r5
    475c:	d0fc      	beq.n	4758 <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    475e:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4760:	4202      	tst	r2, r0
    4762:	d0fc      	beq.n	475e <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4764:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4766:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4768:	4202      	tst	r2, r0
    476a:	d011      	beq.n	4790 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    476c:	8b5a      	ldrh	r2, [r3, #26]
    476e:	4202      	tst	r2, r0
    4770:	d004      	beq.n	477c <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4772:	8b5a      	ldrh	r2, [r3, #26]
    4774:	4659      	mov	r1, fp
    4776:	430a      	orrs	r2, r1
    4778:	b292      	uxth	r2, r2
    477a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    477c:	4913      	ldr	r1, [pc, #76]	; (47cc <trx_sram_read+0x18c>)
    477e:	798a      	ldrb	r2, [r1, #6]
    4780:	2a01      	cmp	r2, #1
    4782:	d103      	bne.n	478c <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4784:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4786:	05c9      	lsls	r1, r1, #23
    4788:	0dc9      	lsrs	r1, r1, #23
    478a:	e001      	b.n	4790 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    478c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    478e:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    4790:	7031      	strb	r1, [r6, #0]
		data++;
    4792:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4794:	454e      	cmp	r6, r9
    4796:	d1d5      	bne.n	4744 <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4798:	480c      	ldr	r0, [pc, #48]	; (47cc <trx_sram_read+0x18c>)
    479a:	490d      	ldr	r1, [pc, #52]	; (47d0 <trx_sram_read+0x190>)
    479c:	2200      	movs	r2, #0
    479e:	4b0d      	ldr	r3, [pc, #52]	; (47d4 <trx_sram_read+0x194>)
    47a0:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    47a2:	9a01      	ldr	r2, [sp, #4]
    47a4:	2a00      	cmp	r2, #0
    47a6:	d005      	beq.n	47b4 <trx_sram_read+0x174>
		cpu_irq_enable();
    47a8:	2201      	movs	r2, #1
    47aa:	4b07      	ldr	r3, [pc, #28]	; (47c8 <trx_sram_read+0x188>)
    47ac:	701a      	strb	r2, [r3, #0]
    47ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    47b2:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    47b4:	b003      	add	sp, #12
    47b6:	bc3c      	pop	{r2, r3, r4, r5}
    47b8:	4690      	mov	r8, r2
    47ba:	4699      	mov	r9, r3
    47bc:	46a2      	mov	sl, r4
    47be:	46ab      	mov	fp, r5
    47c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47c2:	46c0      	nop			; (mov r8, r8)
    47c4:	00000151 	.word	0x00000151
    47c8:	20000008 	.word	0x20000008
    47cc:	200009d0 	.word	0x200009d0
    47d0:	20000994 	.word	0x20000994
    47d4:	000011a1 	.word	0x000011a1
    47d8:	2000098c 	.word	0x2000098c

000047dc <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    47dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    47de:	465f      	mov	r7, fp
    47e0:	4656      	mov	r6, sl
    47e2:	464d      	mov	r5, r9
    47e4:	4644      	mov	r4, r8
    47e6:	b4f0      	push	{r4, r5, r6, r7}
    47e8:	b083      	sub	sp, #12
    47ea:	1c05      	adds	r5, r0, #0
    47ec:	4688      	mov	r8, r1
    47ee:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    47f0:	2001      	movs	r0, #1
    47f2:	4b83      	ldr	r3, [pc, #524]	; (4a00 <trx_aes_wrrd+0x224>)
    47f4:	4798      	blx	r3

	ENTER_TRX_REGION();
    47f6:	2000      	movs	r0, #0
    47f8:	2100      	movs	r1, #0
    47fa:	4b82      	ldr	r3, [pc, #520]	; (4a04 <trx_aes_wrrd+0x228>)
    47fc:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    47fe:	4e82      	ldr	r6, [pc, #520]	; (4a08 <trx_aes_wrrd+0x22c>)
    4800:	1c30      	adds	r0, r6, #0
    4802:	4982      	ldr	r1, [pc, #520]	; (4a0c <trx_aes_wrrd+0x230>)
    4804:	2201      	movs	r2, #1
    4806:	4b82      	ldr	r3, [pc, #520]	; (4a10 <trx_aes_wrrd+0x234>)
    4808:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    480a:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    480c:	2101      	movs	r1, #1
    480e:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4810:	420a      	tst	r2, r1
    4812:	d0fc      	beq.n	480e <trx_aes_wrrd+0x32>
    4814:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4816:	07d0      	lsls	r0, r2, #31
    4818:	d501      	bpl.n	481e <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    481a:	2240      	movs	r2, #64	; 0x40
    481c:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    481e:	2102      	movs	r1, #2
    4820:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4822:	420a      	tst	r2, r1
    4824:	d0fc      	beq.n	4820 <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4826:	2104      	movs	r1, #4
    4828:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    482a:	420a      	tst	r2, r1
    482c:	d0fc      	beq.n	4828 <trx_aes_wrrd+0x4c>
    482e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4830:	0751      	lsls	r1, r2, #29
    4832:	d514      	bpl.n	485e <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4834:	8b5a      	ldrh	r2, [r3, #26]
    4836:	0756      	lsls	r6, r2, #29
    4838:	d503      	bpl.n	4842 <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    483a:	8b59      	ldrh	r1, [r3, #26]
    483c:	2204      	movs	r2, #4
    483e:	430a      	orrs	r2, r1
    4840:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4842:	4a71      	ldr	r2, [pc, #452]	; (4a08 <trx_aes_wrrd+0x22c>)
    4844:	7992      	ldrb	r2, [r2, #6]
    4846:	2a01      	cmp	r2, #1
    4848:	d105      	bne.n	4856 <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    484a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    484c:	05c9      	lsls	r1, r1, #23
    484e:	0dc9      	lsrs	r1, r1, #23
    4850:	4a70      	ldr	r2, [pc, #448]	; (4a14 <trx_aes_wrrd+0x238>)
    4852:	8011      	strh	r1, [r2, #0]
    4854:	e003      	b.n	485e <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4856:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4858:	b2c9      	uxtb	r1, r1
    485a:	4a6e      	ldr	r2, [pc, #440]	; (4a14 <trx_aes_wrrd+0x238>)
    485c:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    485e:	2101      	movs	r1, #1
    4860:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    4862:	420a      	tst	r2, r1
    4864:	d0fc      	beq.n	4860 <trx_aes_wrrd+0x84>
    4866:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4868:	07d0      	lsls	r0, r2, #31
    486a:	d500      	bpl.n	486e <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    486c:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    486e:	2102      	movs	r1, #2
    4870:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4872:	420a      	tst	r2, r1
    4874:	d0fc      	beq.n	4870 <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4876:	2204      	movs	r2, #4
    4878:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    487a:	4211      	tst	r1, r2
    487c:	d0fc      	beq.n	4878 <trx_aes_wrrd+0x9c>
    487e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4880:	0751      	lsls	r1, r2, #29
    4882:	d514      	bpl.n	48ae <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4884:	8b5a      	ldrh	r2, [r3, #26]
    4886:	0756      	lsls	r6, r2, #29
    4888:	d503      	bpl.n	4892 <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    488a:	8b59      	ldrh	r1, [r3, #26]
    488c:	2204      	movs	r2, #4
    488e:	430a      	orrs	r2, r1
    4890:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4892:	4a5d      	ldr	r2, [pc, #372]	; (4a08 <trx_aes_wrrd+0x22c>)
    4894:	7992      	ldrb	r2, [r2, #6]
    4896:	2a01      	cmp	r2, #1
    4898:	d105      	bne.n	48a6 <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    489a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    489c:	05c9      	lsls	r1, r1, #23
    489e:	0dc9      	lsrs	r1, r1, #23
    48a0:	4a5c      	ldr	r2, [pc, #368]	; (4a14 <trx_aes_wrrd+0x238>)
    48a2:	8011      	strh	r1, [r2, #0]
    48a4:	e003      	b.n	48ae <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    48a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    48a8:	b2c9      	uxtb	r1, r1
    48aa:	4a5a      	ldr	r2, [pc, #360]	; (4a14 <trx_aes_wrrd+0x238>)
    48ac:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48ae:	2201      	movs	r2, #1
    48b0:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    48b2:	4211      	tst	r1, r2
    48b4:	d0fc      	beq.n	48b0 <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    48b6:	4640      	mov	r0, r8
    48b8:	7801      	ldrb	r1, [r0, #0]
    48ba:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    48bc:	07d6      	lsls	r6, r2, #31
    48be:	d500      	bpl.n	48c2 <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    48c0:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    48c2:	2202      	movs	r2, #2
    48c4:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    48c6:	4211      	tst	r1, r2
    48c8:	d0fc      	beq.n	48c4 <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    48ca:	2204      	movs	r2, #4
    48cc:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    48ce:	4211      	tst	r1, r2
    48d0:	d0fc      	beq.n	48cc <trx_aes_wrrd+0xf0>
    48d2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    48d4:	0750      	lsls	r0, r2, #29
    48d6:	d50f      	bpl.n	48f8 <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    48d8:	8b5a      	ldrh	r2, [r3, #26]
    48da:	0751      	lsls	r1, r2, #29
    48dc:	d503      	bpl.n	48e6 <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    48de:	8b59      	ldrh	r1, [r3, #26]
    48e0:	2204      	movs	r2, #4
    48e2:	430a      	orrs	r2, r1
    48e4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    48e6:	4a48      	ldr	r2, [pc, #288]	; (4a08 <trx_aes_wrrd+0x22c>)
    48e8:	7992      	ldrb	r2, [r2, #6]
    48ea:	2a01      	cmp	r2, #1
    48ec:	d108      	bne.n	4900 <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    48ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    48f0:	05d2      	lsls	r2, r2, #23
    48f2:	0dd2      	lsrs	r2, r2, #23
    48f4:	4b47      	ldr	r3, [pc, #284]	; (4a14 <trx_aes_wrrd+0x238>)
    48f6:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    48f8:	2100      	movs	r1, #0
    48fa:	2c00      	cmp	r4, #0
    48fc:	d047      	beq.n	498e <trx_aes_wrrd+0x1b2>
    48fe:	e004      	b.n	490a <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4902:	b2d2      	uxtb	r2, r2
    4904:	4b43      	ldr	r3, [pc, #268]	; (4a14 <trx_aes_wrrd+0x238>)
    4906:	801a      	strh	r2, [r3, #0]
    4908:	e7f6      	b.n	48f8 <trx_aes_wrrd+0x11c>
    490a:	4645      	mov	r5, r8
    490c:	3c01      	subs	r4, #1
    490e:	b2e4      	uxtb	r4, r4
    4910:	9401      	str	r4, [sp, #4]
    4912:	1c23      	adds	r3, r4, #0
    4914:	4443      	add	r3, r8
    4916:	3301      	adds	r3, #1
    4918:	469b      	mov	fp, r3
    491a:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    491c:	4b3a      	ldr	r3, [pc, #232]	; (4a08 <trx_aes_wrrd+0x22c>)
    491e:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4920:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4922:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4924:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4926:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4928:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    492a:	4656      	mov	r6, sl
    492c:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    492e:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4930:	4206      	tst	r6, r0
    4932:	d0fc      	beq.n	492e <trx_aes_wrrd+0x152>
    4934:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    4936:	786e      	ldrb	r6, [r5, #1]
    4938:	46b3      	mov	fp, r6
    493a:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    493c:	4206      	tst	r6, r0
    493e:	d001      	beq.n	4944 <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4940:	465e      	mov	r6, fp
    4942:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4944:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4946:	4226      	tst	r6, r4
    4948:	d0fc      	beq.n	4944 <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    494a:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    494c:	4216      	tst	r6, r2
    494e:	d0fc      	beq.n	494a <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4950:	464e      	mov	r6, r9
    4952:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4954:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4956:	4216      	tst	r6, r2
    4958:	d011      	beq.n	497e <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    495a:	8b59      	ldrh	r1, [r3, #26]
    495c:	4211      	tst	r1, r2
    495e:	d004      	beq.n	496a <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4960:	8b59      	ldrh	r1, [r3, #26]
    4962:	2604      	movs	r6, #4
    4964:	4331      	orrs	r1, r6
    4966:	b289      	uxth	r1, r1
    4968:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    496a:	4e27      	ldr	r6, [pc, #156]	; (4a08 <trx_aes_wrrd+0x22c>)
    496c:	79b1      	ldrb	r1, [r6, #6]
    496e:	2901      	cmp	r1, #1
    4970:	d103      	bne.n	497a <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4972:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4974:	05c9      	lsls	r1, r1, #23
    4976:	0dc9      	lsrs	r1, r1, #23
    4978:	e001      	b.n	497e <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    497a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    497c:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    497e:	4663      	mov	r3, ip
    4980:	7019      	strb	r1, [r3, #0]
    4982:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    4984:	42bd      	cmp	r5, r7
    4986:	d1d0      	bne.n	492a <trx_aes_wrrd+0x14e>
    4988:	9b01      	ldr	r3, [sp, #4]
    498a:	3301      	adds	r3, #1
    498c:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    498e:	4b1e      	ldr	r3, [pc, #120]	; (4a08 <trx_aes_wrrd+0x22c>)
    4990:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4992:	2001      	movs	r0, #1
    4994:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    4996:	4202      	tst	r2, r0
    4998:	d0fc      	beq.n	4994 <trx_aes_wrrd+0x1b8>
    499a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    499c:	07d6      	lsls	r6, r2, #31
    499e:	d501      	bpl.n	49a4 <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    49a0:	2200      	movs	r2, #0
    49a2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    49a4:	2002      	movs	r0, #2
    49a6:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    49a8:	4202      	tst	r2, r0
    49aa:	d0fc      	beq.n	49a6 <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    49ac:	2004      	movs	r0, #4
    49ae:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    49b0:	4202      	tst	r2, r0
    49b2:	d0fc      	beq.n	49ae <trx_aes_wrrd+0x1d2>
    49b4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    49b6:	0750      	lsls	r0, r2, #29
    49b8:	d510      	bpl.n	49dc <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    49ba:	8b5a      	ldrh	r2, [r3, #26]
    49bc:	0751      	lsls	r1, r2, #29
    49be:	d503      	bpl.n	49c8 <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    49c0:	8b59      	ldrh	r1, [r3, #26]
    49c2:	2204      	movs	r2, #4
    49c4:	430a      	orrs	r2, r1
    49c6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    49c8:	4a0f      	ldr	r2, [pc, #60]	; (4a08 <trx_aes_wrrd+0x22c>)
    49ca:	7992      	ldrb	r2, [r2, #6]
    49cc:	2a01      	cmp	r2, #1
    49ce:	d103      	bne.n	49d8 <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    49d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    49d2:	05c9      	lsls	r1, r1, #23
    49d4:	0dc9      	lsrs	r1, r1, #23
    49d6:	e001      	b.n	49dc <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    49d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    49da:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    49dc:	4642      	mov	r2, r8
    49de:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    49e0:	4809      	ldr	r0, [pc, #36]	; (4a08 <trx_aes_wrrd+0x22c>)
    49e2:	490a      	ldr	r1, [pc, #40]	; (4a0c <trx_aes_wrrd+0x230>)
    49e4:	2200      	movs	r2, #0
    49e6:	4b0a      	ldr	r3, [pc, #40]	; (4a10 <trx_aes_wrrd+0x234>)
    49e8:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    49ea:	2000      	movs	r0, #0
    49ec:	2100      	movs	r1, #0
    49ee:	4b0a      	ldr	r3, [pc, #40]	; (4a18 <trx_aes_wrrd+0x23c>)
    49f0:	4798      	blx	r3
}
    49f2:	b003      	add	sp, #12
    49f4:	bc3c      	pop	{r2, r3, r4, r5}
    49f6:	4690      	mov	r8, r2
    49f8:	4699      	mov	r9, r3
    49fa:	46a2      	mov	sl, r4
    49fc:	46ab      	mov	fp, r5
    49fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a00:	00000151 	.word	0x00000151
    4a04:	00000871 	.word	0x00000871
    4a08:	200009d0 	.word	0x200009d0
    4a0c:	20000994 	.word	0x20000994
    4a10:	000011a1 	.word	0x000011a1
    4a14:	2000098c 	.word	0x2000098c
    4a18:	00000851 	.word	0x00000851

00004a1c <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	if (NWK_SUCCESS_STATUS == req->status){
    4a1c:	7f03      	ldrb	r3, [r0, #28]
    4a1e:	2b00      	cmp	r3, #0
    4a20:	d106      	bne.n	4a30 <appDataConf+0x14>
		appDataReqBusy = false;
    4a22:	2200      	movs	r2, #0
    4a24:	4b03      	ldr	r3, [pc, #12]	; (4a34 <appDataConf+0x18>)
    4a26:	701a      	strb	r2, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    4a28:	2280      	movs	r2, #128	; 0x80
    4a2a:	0312      	lsls	r2, r2, #12
    4a2c:	4b02      	ldr	r3, [pc, #8]	; (4a38 <appDataConf+0x1c>)
    4a2e:	61da      	str	r2, [r3, #28]
		LED_Toggle(LED0);
	}
}		
    4a30:	4770      	bx	lr
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	200007b8 	.word	0x200007b8
    4a38:	41004400 	.word	0x41004400

00004a3c <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    4a3c:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < ind->size; i++) {
    4a3e:	7b01      	ldrb	r1, [r0, #12]
    4a40:	2900      	cmp	r1, #0
    4a42:	d008      	beq.n	4a56 <appDataInd+0x1a>
		rx_data[i] = ind->data[i];
    4a44:	6884      	ldr	r4, [r0, #8]
    4a46:	2300      	movs	r3, #0
    4a48:	4804      	ldr	r0, [pc, #16]	; (4a5c <appDataInd+0x20>)
    4a4a:	5ce2      	ldrb	r2, [r4, r3]
    4a4c:	541a      	strb	r2, [r3, r0]
    4a4e:	3301      	adds	r3, #1

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    4a50:	b2da      	uxtb	r2, r3
    4a52:	428a      	cmp	r2, r1
    4a54:	d3f9      	bcc.n	4a4a <appDataInd+0xe>
		rx_data[i] = ind->data[i];
	}
	//APP_TaskHandler();
	return true;
}
    4a56:	2001      	movs	r0, #1
    4a58:	bd10      	pop	{r4, pc}
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	20000734 	.word	0x20000734

00004a60 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4a60:	b570      	push	{r4, r5, r6, lr}
    4a62:	b082      	sub	sp, #8
    4a64:	1c05      	adds	r5, r0, #0
    4a66:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    4a68:	2200      	movs	r2, #0
    4a6a:	466b      	mov	r3, sp
    4a6c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4a6e:	4c06      	ldr	r4, [pc, #24]	; (4a88 <usart_serial_getchar+0x28>)
    4a70:	1c28      	adds	r0, r5, #0
    4a72:	4669      	mov	r1, sp
    4a74:	3106      	adds	r1, #6
    4a76:	47a0      	blx	r4
    4a78:	2800      	cmp	r0, #0
    4a7a:	d1f9      	bne.n	4a70 <usart_serial_getchar+0x10>

	*c = temp;
    4a7c:	466b      	mov	r3, sp
    4a7e:	3306      	adds	r3, #6
    4a80:	881b      	ldrh	r3, [r3, #0]
    4a82:	7033      	strb	r3, [r6, #0]
}
    4a84:	b002      	add	sp, #8
    4a86:	bd70      	pop	{r4, r5, r6, pc}
    4a88:	000015c1 	.word	0x000015c1

00004a8c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    4a8c:	b570      	push	{r4, r5, r6, lr}
    4a8e:	1c06      	adds	r6, r0, #0
    4a90:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    4a92:	4c03      	ldr	r4, [pc, #12]	; (4aa0 <usart_serial_putchar+0x14>)
    4a94:	1c30      	adds	r0, r6, #0
    4a96:	1c29      	adds	r1, r5, #0
    4a98:	47a0      	blx	r4
    4a9a:	2800      	cmp	r0, #0
    4a9c:	d1fa      	bne.n	4a94 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    4a9e:	bd70      	pop	{r4, r5, r6, pc}
    4aa0:	00001595 	.word	0x00001595

00004aa4 <configure_adc>:
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
}


void configure_adc(void)
{
    4aa4:	b510      	push	{r4, lr}
    4aa6:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    4aa8:	4668      	mov	r0, sp
    4aaa:	4b13      	ldr	r3, [pc, #76]	; (4af8 <configure_adc+0x54>)
    4aac:	4798      	blx	r3

	config_adc.reference = ADC_REFERENCE_INT1V;		//ADC_REFERENCE_INTVCC0;	//reference voltage on pin 9: PA04
    4aae:	2300      	movs	r3, #0
    4ab0:	466a      	mov	r2, sp
    4ab2:	7053      	strb	r3, [r2, #1]
	config_adc.resolution = ADC_RESOLUTION_12BIT;			//12 bit resolution
    4ab4:	7113      	strb	r3, [r2, #4]
	config_adc.divide_result = ADC_DIVIDE_RESULT_DISABLE;	//Don't divide result register after accumulation
    4ab6:	7453      	strb	r3, [r2, #17]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN10;	//voltage positive input on pin 10: PB02
    4ab8:	230a      	movs	r3, #10
    4aba:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_PIN7;	//voltage negative input as internal ground : PA07
    4abc:	23e0      	movs	r3, #224	; 0xe0
    4abe:	00db      	lsls	r3, r3, #3
    4ac0:	81d3      	strh	r3, [r2, #14]

	adc_init(&adc_instance, ADC, &config_adc);
    4ac2:	4c0e      	ldr	r4, [pc, #56]	; (4afc <configure_adc+0x58>)
    4ac4:	1c20      	adds	r0, r4, #0
    4ac6:	490e      	ldr	r1, [pc, #56]	; (4b00 <configure_adc+0x5c>)
    4ac8:	4b0e      	ldr	r3, [pc, #56]	; (4b04 <configure_adc+0x60>)
    4aca:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4acc:	6823      	ldr	r3, [r4, #0]
    4ace:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    4ad0:	b252      	sxtb	r2, r2
    4ad2:	2a00      	cmp	r2, #0
    4ad4:	dbfb      	blt.n	4ace <configure_adc+0x2a>
    4ad6:	2180      	movs	r1, #128	; 0x80
    4ad8:	0409      	lsls	r1, r1, #16
    4ada:	4a0b      	ldr	r2, [pc, #44]	; (4b08 <configure_adc+0x64>)
    4adc:	6011      	str	r1, [r2, #0]

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4ade:	7819      	ldrb	r1, [r3, #0]
    4ae0:	2202      	movs	r2, #2
    4ae2:	430a      	orrs	r2, r1
    4ae4:	701a      	strb	r2, [r3, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    4ae6:	4b05      	ldr	r3, [pc, #20]	; (4afc <configure_adc+0x58>)
    4ae8:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4aea:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    4aec:	b25b      	sxtb	r3, r3
    4aee:	2b00      	cmp	r3, #0
    4af0:	dbfb      	blt.n	4aea <configure_adc+0x46>

	adc_enable(&adc_instance);
}
    4af2:	b00c      	add	sp, #48	; 0x30
    4af4:	bd10      	pop	{r4, pc}
    4af6:	46c0      	nop			; (mov r8, r8)
    4af8:	000002e9 	.word	0x000002e9
    4afc:	200009dc 	.word	0x200009dc
    4b00:	42004000 	.word	0x42004000
    4b04:	00000331 	.word	0x00000331
    4b08:	e000e100 	.word	0xe000e100
    4b0c:	00000000 	.word	0x00000000

00004b10 <timer_callback>:
	//appTimer.mode = SYS_TIMER_INTERVAL_MODE;
	//appTimer.handler = timer_callback;
//}

void timer_callback(void)
{
    4b10:	b570      	push	{r4, r5, r6, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4b12:	4b57      	ldr	r3, [pc, #348]	; (4c70 <timer_callback+0x160>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    4b18:	b252      	sxtb	r2, r2
    4b1a:	2a00      	cmp	r2, #0
    4b1c:	dbfb      	blt.n	4b16 <timer_callback+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4b1e:	7b19      	ldrb	r1, [r3, #12]
    4b20:	2202      	movs	r2, #2
    4b22:	430a      	orrs	r2, r1
    4b24:	731a      	strb	r2, [r3, #12]
    4b26:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    4b28:	b252      	sxtb	r2, r2
    4b2a:	2a00      	cmp	r2, #0
    4b2c:	dbfb      	blt.n	4b26 <timer_callback+0x16>
	uint16_t result;
	adc_start_conversion(&adc_instance);
	delay_ms(200);
    4b2e:	20c8      	movs	r0, #200	; 0xc8
    4b30:	4b50      	ldr	r3, [pc, #320]	; (4c74 <timer_callback+0x164>)
    4b32:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4b34:	4b4e      	ldr	r3, [pc, #312]	; (4c70 <timer_callback+0x160>)
    4b36:	681c      	ldr	r4, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4b38:	2101      	movs	r1, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    4b3a:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    4b3c:	2002      	movs	r0, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    4b3e:	7e22      	ldrb	r2, [r4, #24]
    4b40:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4b42:	1c0b      	adds	r3, r1, #0
    4b44:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    4b46:	4215      	tst	r5, r2
    4b48:	d000      	beq.n	4b4c <timer_callback+0x3c>
		status_flags |= ADC_STATUS_WINDOW;
    4b4a:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4b4c:	4210      	tst	r0, r2
    4b4e:	d000      	beq.n	4b52 <timer_callback+0x42>
		status_flags |= ADC_STATUS_OVERRUN;
    4b50:	432b      	orrs	r3, r5
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4b52:	4219      	tst	r1, r3
    4b54:	d0f3      	beq.n	4b3e <timer_callback+0x2e>
    4b56:	7e63      	ldrb	r3, [r4, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    4b58:	b25b      	sxtb	r3, r3
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	dbfb      	blt.n	4b56 <timer_callback+0x46>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    4b5e:	8b65      	ldrh	r5, [r4, #26]
    4b60:	b2ad      	uxth	r5, r5
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    4b62:	2301      	movs	r3, #1
    4b64:	7623      	strb	r3, [r4, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    4b66:	7e22      	ldrb	r2, [r4, #24]
    4b68:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4b6a:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    4b6c:	0751      	lsls	r1, r2, #29
    4b6e:	d501      	bpl.n	4b74 <timer_callback+0x64>
		status_flags |= ADC_STATUS_WINDOW;
    4b70:	2102      	movs	r1, #2
    4b72:	430b      	orrs	r3, r1
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4b74:	0791      	lsls	r1, r2, #30
    4b76:	d501      	bpl.n	4b7c <timer_callback+0x6c>
		status_flags |= ADC_STATUS_OVERRUN;
    4b78:	2204      	movs	r2, #4
    4b7a:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4b7c:	075a      	lsls	r2, r3, #29
    4b7e:	d559      	bpl.n	4c34 <timer_callback+0x124>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    4b80:	2302      	movs	r3, #2
    4b82:	7623      	strb	r3, [r4, #24]
    4b84:	e056      	b.n	4c34 <timer_callback+0x124>
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
		status_flags |= ADC_STATUS_WINDOW;
    4b86:	2102      	movs	r1, #2
    4b88:	430b      	orrs	r3, r1
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4b8a:	0791      	lsls	r1, r2, #30
    4b8c:	d501      	bpl.n	4b92 <timer_callback+0x82>
		status_flags |= ADC_STATUS_OVERRUN;
    4b8e:	2204      	movs	r2, #4
    4b90:	4313      	orrs	r3, r2
	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = 0;

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    4b92:	2201      	movs	r2, #1
    4b94:	401a      	ands	r2, r3
		int_flags |= ADC_INTFLAG_RESRDY;
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    4b96:	0799      	lsls	r1, r3, #30
    4b98:	d501      	bpl.n	4b9e <timer_callback+0x8e>
		int_flags |= ADC_INTFLAG_WINMON;
    4b9a:	2104      	movs	r1, #4
    4b9c:	430a      	orrs	r2, r1
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    4b9e:	0759      	lsls	r1, r3, #29
    4ba0:	d501      	bpl.n	4ba6 <timer_callback+0x96>
		int_flags |= ADC_INTFLAG_OVERRUN;
    4ba2:	2302      	movs	r3, #2
    4ba4:	431a      	orrs	r2, r3
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    4ba6:	b2d2      	uxtb	r2, r2
    4ba8:	7622      	strb	r2, [r4, #24]
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
	adc_clear_status(&adc_instance,adc_get_status(&adc_instance));
	uint32_t far;
	far = 9.0/5.0*((float)result*.0002441406*6.0/.01)+32.0;
    4baa:	1c28      	adds	r0, r5, #0
    4bac:	4b32      	ldr	r3, [pc, #200]	; (4c78 <timer_callback+0x168>)
    4bae:	4798      	blx	r3
    4bb0:	4b32      	ldr	r3, [pc, #200]	; (4c7c <timer_callback+0x16c>)
    4bb2:	4798      	blx	r3
    4bb4:	4c32      	ldr	r4, [pc, #200]	; (4c80 <timer_callback+0x170>)
    4bb6:	4b25      	ldr	r3, [pc, #148]	; (4c4c <timer_callback+0x13c>)
    4bb8:	4a23      	ldr	r2, [pc, #140]	; (4c48 <timer_callback+0x138>)
    4bba:	47a0      	blx	r4
    4bbc:	4a24      	ldr	r2, [pc, #144]	; (4c50 <timer_callback+0x140>)
    4bbe:	4b25      	ldr	r3, [pc, #148]	; (4c54 <timer_callback+0x144>)
    4bc0:	47a0      	blx	r4
    4bc2:	4a25      	ldr	r2, [pc, #148]	; (4c58 <timer_callback+0x148>)
    4bc4:	4b25      	ldr	r3, [pc, #148]	; (4c5c <timer_callback+0x14c>)
    4bc6:	4e2f      	ldr	r6, [pc, #188]	; (4c84 <timer_callback+0x174>)
    4bc8:	47b0      	blx	r6
    4bca:	4a25      	ldr	r2, [pc, #148]	; (4c60 <timer_callback+0x150>)
    4bcc:	4b25      	ldr	r3, [pc, #148]	; (4c64 <timer_callback+0x154>)
    4bce:	47a0      	blx	r4
    4bd0:	4a25      	ldr	r2, [pc, #148]	; (4c68 <timer_callback+0x158>)
    4bd2:	4b26      	ldr	r3, [pc, #152]	; (4c6c <timer_callback+0x15c>)
    4bd4:	4c2c      	ldr	r4, [pc, #176]	; (4c88 <timer_callback+0x178>)
    4bd6:	47a0      	blx	r4
    4bd8:	4b2c      	ldr	r3, [pc, #176]	; (4c8c <timer_callback+0x17c>)
    4bda:	4798      	blx	r3
    4bdc:	1c04      	adds	r4, r0, #0
	
	memcpy(appUartBuffer,&far, sizeof(far));
    4bde:	4b2c      	ldr	r3, [pc, #176]	; (4c90 <timer_callback+0x180>)
    4be0:	6018      	str	r0, [r3, #0]
	appUartBufferPtr = sizeof(far);
    4be2:	2204      	movs	r2, #4
    4be4:	4b2b      	ldr	r3, [pc, #172]	; (4c94 <timer_callback+0x184>)
    4be6:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
	if (appDataReqBusy || 0 == appUartBufferPtr) {
    4be8:	4b2b      	ldr	r3, [pc, #172]	; (4c98 <timer_callback+0x188>)
    4bea:	781b      	ldrb	r3, [r3, #0]
    4bec:	2b00      	cmp	r3, #0
    4bee:	d115      	bne.n	4c1c <timer_callback+0x10c>
		return;
	}

	memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
    4bf0:	4a2a      	ldr	r2, [pc, #168]	; (4c9c <timer_callback+0x18c>)
    4bf2:	6010      	str	r0, [r2, #0]

	appDataReq.dstAddr = 0;
    4bf4:	482a      	ldr	r0, [pc, #168]	; (4ca0 <timer_callback+0x190>)
    4bf6:	2100      	movs	r1, #0
    4bf8:	8141      	strh	r1, [r0, #10]
	appDataReq.dstEndpoint = APP_DST_ENDPOINT;
    4bfa:	2601      	movs	r6, #1
    4bfc:	7306      	strb	r6, [r0, #12]
	appDataReq.srcEndpoint = APP_ENDPOINT;
    4bfe:	2102      	movs	r1, #2
    4c00:	7341      	strb	r1, [r0, #13]
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    4c02:	7381      	strb	r1, [r0, #14]
	appDataReq.data = appDataReqBuffer;
    4c04:	6102      	str	r2, [r0, #16]
	appDataReq.size = appUartBufferPtr;
    4c06:	2204      	movs	r2, #4
    4c08:	7502      	strb	r2, [r0, #20]
	appDataReq.confirm = appDataConf;
    4c0a:	4a26      	ldr	r2, [pc, #152]	; (4ca4 <timer_callback+0x194>)
    4c0c:	6182      	str	r2, [r0, #24]
	NWK_DataReq(&appDataReq);
    4c0e:	4b26      	ldr	r3, [pc, #152]	; (4ca8 <timer_callback+0x198>)
    4c10:	4798      	blx	r3

	appUartBufferPtr = 0;
    4c12:	4b20      	ldr	r3, [pc, #128]	; (4c94 <timer_callback+0x184>)
    4c14:	2200      	movs	r2, #0
    4c16:	701a      	strb	r2, [r3, #0]
	appDataReqBusy = true;
    4c18:	4b1f      	ldr	r3, [pc, #124]	; (4c98 <timer_callback+0x188>)
    4c1a:	701e      	strb	r6, [r3, #0]
	
	memcpy(appUartBuffer,&far, sizeof(far));
	appUartBufferPtr = sizeof(far);
	
	appSendData();
	delay_ms(500);
    4c1c:	20fa      	movs	r0, #250	; 0xfa
    4c1e:	0040      	lsls	r0, r0, #1
    4c20:	4b14      	ldr	r3, [pc, #80]	; (4c74 <timer_callback+0x164>)
    4c22:	4798      	blx	r3
	printf("The temp is %d     ",far);
    4c24:	4821      	ldr	r0, [pc, #132]	; (4cac <timer_callback+0x19c>)
    4c26:	1c21      	adds	r1, r4, #0
    4c28:	4c21      	ldr	r4, [pc, #132]	; (4cb0 <timer_callback+0x1a0>)
    4c2a:	47a0      	blx	r4
	printf("The result is %d     ",result);
    4c2c:	4821      	ldr	r0, [pc, #132]	; (4cb4 <timer_callback+0x1a4>)
    4c2e:	1c29      	adds	r1, r5, #0
    4c30:	47a0      	blx	r4
    4c32:	e006      	b.n	4c42 <timer_callback+0x132>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    4c34:	7e22      	ldrb	r2, [r4, #24]
    4c36:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4c38:	2301      	movs	r3, #1
    4c3a:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    4c3c:	0751      	lsls	r1, r2, #29
    4c3e:	d4a2      	bmi.n	4b86 <timer_callback+0x76>
    4c40:	e7a3      	b.n	4b8a <timer_callback+0x7a>
			
	
	
}
    4c42:	bd70      	pop	{r4, r5, r6, pc}
    4c44:	46c0      	nop			; (mov r8, r8)
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	c906404c 	.word	0xc906404c
    4c4c:	3f2fffff 	.word	0x3f2fffff
    4c50:	00000000 	.word	0x00000000
    4c54:	40180000 	.word	0x40180000
    4c58:	47ae147b 	.word	0x47ae147b
    4c5c:	3f847ae1 	.word	0x3f847ae1
    4c60:	cccccccd 	.word	0xcccccccd
    4c64:	3ffccccc 	.word	0x3ffccccc
    4c68:	00000000 	.word	0x00000000
    4c6c:	40400000 	.word	0x40400000
    4c70:	200009dc 	.word	0x200009dc
    4c74:	0000017d 	.word	0x0000017d
    4c78:	00005069 	.word	0x00005069
    4c7c:	00006985 	.word	0x00006985
    4c80:	00005d95 	.word	0x00005d95
    4c84:	0000574d 	.word	0x0000574d
    4c88:	00005109 	.word	0x00005109
    4c8c:	00005029 	.word	0x00005029
    4c90:	2000074c 	.word	0x2000074c
    4c94:	20000748 	.word	0x20000748
    4c98:	200007b8 	.word	0x200007b8
    4c9c:	200007bc 	.word	0x200007bc
    4ca0:	20000828 	.word	0x20000828
    4ca4:	00004a1d 	.word	0x00004a1d
    4ca8:	00002675 	.word	0x00002675
    4cac:	00007f34 	.word	0x00007f34
    4cb0:	00006ddd 	.word	0x00006ddd
    4cb4:	00007f48 	.word	0x00007f48

00004cb8 <main>:
int main(void)
{
    4cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cba:	b091      	sub	sp, #68	; 0x44
	//irq_initialize_vectors();
	system_init();
    4cbc:	4b42      	ldr	r3, [pc, #264]	; (4dc8 <main+0x110>)
    4cbe:	4798      	blx	r3
	delay_init();
    4cc0:	4b42      	ldr	r3, [pc, #264]	; (4dcc <main+0x114>)
    4cc2:	4798      	blx	r3
	configure_adc();
    4cc4:	4b42      	ldr	r3, [pc, #264]	; (4dd0 <main+0x118>)
    4cc6:	4798      	blx	r3
	SYS_Init();
    4cc8:	4b42      	ldr	r3, [pc, #264]	; (4dd4 <main+0x11c>)
    4cca:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4ccc:	2380      	movs	r3, #128	; 0x80
    4cce:	05db      	lsls	r3, r3, #23
    4cd0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4cd2:	2300      	movs	r3, #0
    4cd4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4cd6:	22ff      	movs	r2, #255	; 0xff
    4cd8:	4668      	mov	r0, sp
    4cda:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    4cdc:	2200      	movs	r2, #0
    4cde:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4ce0:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    4ce2:	2196      	movs	r1, #150	; 0x96
    4ce4:	0189      	lsls	r1, r1, #6
    4ce6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4ce8:	2601      	movs	r6, #1
    4cea:	2124      	movs	r1, #36	; 0x24
    4cec:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    4cee:	2125      	movs	r1, #37	; 0x25
    4cf0:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    4cf2:	2126      	movs	r1, #38	; 0x26
    4cf4:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    4cf6:	2127      	movs	r1, #39	; 0x27
    4cf8:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    4cfa:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4cfc:	212c      	movs	r1, #44	; 0x2c
    4cfe:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4d00:	212d      	movs	r1, #45	; 0x2d
    4d02:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4d04:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4d06:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4d08:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    4d0a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    4d0c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    4d0e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    4d10:	2313      	movs	r3, #19
    4d12:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    4d14:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    4d16:	2380      	movs	r3, #128	; 0x80
    4d18:	035b      	lsls	r3, r3, #13
    4d1a:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    4d1c:	4b2e      	ldr	r3, [pc, #184]	; (4dd8 <main+0x120>)
    4d1e:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    4d20:	4b2e      	ldr	r3, [pc, #184]	; (4ddc <main+0x124>)
    4d22:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    4d24:	2301      	movs	r3, #1
    4d26:	425b      	negs	r3, r3
    4d28:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    4d2a:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    4d2c:	4c2c      	ldr	r4, [pc, #176]	; (4de0 <main+0x128>)
    4d2e:	4b2d      	ldr	r3, [pc, #180]	; (4de4 <main+0x12c>)
    4d30:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4d32:	4a2d      	ldr	r2, [pc, #180]	; (4de8 <main+0x130>)
    4d34:	4b2d      	ldr	r3, [pc, #180]	; (4dec <main+0x134>)
    4d36:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4d38:	4a2d      	ldr	r2, [pc, #180]	; (4df0 <main+0x138>)
    4d3a:	4b2e      	ldr	r3, [pc, #184]	; (4df4 <main+0x13c>)
    4d3c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    4d3e:	1c20      	adds	r0, r4, #0
    4d40:	492d      	ldr	r1, [pc, #180]	; (4df8 <main+0x140>)
    4d42:	466a      	mov	r2, sp
    4d44:	4b2d      	ldr	r3, [pc, #180]	; (4dfc <main+0x144>)
    4d46:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4d48:	4f2d      	ldr	r7, [pc, #180]	; (4e00 <main+0x148>)
    4d4a:	683b      	ldr	r3, [r7, #0]
    4d4c:	6898      	ldr	r0, [r3, #8]
    4d4e:	2100      	movs	r1, #0
    4d50:	4d2c      	ldr	r5, [pc, #176]	; (4e04 <main+0x14c>)
    4d52:	47a8      	blx	r5
	setbuf(stdin, NULL);
    4d54:	683b      	ldr	r3, [r7, #0]
    4d56:	6858      	ldr	r0, [r3, #4]
    4d58:	2100      	movs	r1, #0
    4d5a:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d5c:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4d5e:	1c28      	adds	r0, r5, #0
    4d60:	4b29      	ldr	r3, [pc, #164]	; (4e08 <main+0x150>)
    4d62:	4798      	blx	r3
    4d64:	231f      	movs	r3, #31
    4d66:	4018      	ands	r0, r3
    4d68:	4086      	lsls	r6, r0
    4d6a:	4b28      	ldr	r3, [pc, #160]	; (4e0c <main+0x154>)
    4d6c:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4d6e:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4d70:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4d72:	2a00      	cmp	r2, #0
    4d74:	d1fc      	bne.n	4d70 <main+0xb8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4d76:	682a      	ldr	r2, [r5, #0]
    4d78:	2302      	movs	r3, #2
    4d7a:	4313      	orrs	r3, r2
    4d7c:	602b      	str	r3, [r5, #0]

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    4d7e:	2002      	movs	r0, #2
    4d80:	4b23      	ldr	r3, [pc, #140]	; (4e10 <main+0x158>)
    4d82:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    4d84:	4823      	ldr	r0, [pc, #140]	; (4e14 <main+0x15c>)
    4d86:	4b24      	ldr	r3, [pc, #144]	; (4e18 <main+0x160>)
    4d88:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    4d8a:	200f      	movs	r0, #15
    4d8c:	4b23      	ldr	r3, [pc, #140]	; (4e1c <main+0x164>)
    4d8e:	4798      	blx	r3
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    4d90:	2001      	movs	r0, #1
    4d92:	4b23      	ldr	r3, [pc, #140]	; (4e20 <main+0x168>)
    4d94:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    4d96:	2023      	movs	r0, #35	; 0x23
    4d98:	4b22      	ldr	r3, [pc, #136]	; (4e24 <main+0x16c>)
    4d9a:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    4d9c:	4822      	ldr	r0, [pc, #136]	; (4e28 <main+0x170>)
    4d9e:	4b23      	ldr	r3, [pc, #140]	; (4e2c <main+0x174>)
    4da0:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    4da2:	2002      	movs	r0, #2
    4da4:	4922      	ldr	r1, [pc, #136]	; (4e30 <main+0x178>)
    4da6:	4b23      	ldr	r3, [pc, #140]	; (4e34 <main+0x17c>)
    4da8:	4798      	blx	r3
	configure_adc();
	SYS_Init();
	configure_console();
	
	appInit();
	cpu_irq_enable();
    4daa:	2201      	movs	r2, #1
    4dac:	4b22      	ldr	r3, [pc, #136]	; (4e38 <main+0x180>)
    4dae:	701a      	strb	r2, [r3, #0]
    4db0:	f3bf 8f5f 	dmb	sy
    4db4:	b662      	cpsie	i

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4db6:	2280      	movs	r2, #128	; 0x80
    4db8:	0312      	lsls	r2, r2, #12
    4dba:	4b20      	ldr	r3, [pc, #128]	; (4e3c <main+0x184>)
    4dbc:	615a      	str	r2, [r3, #20]
	LED_On(LED0);
	
	//adc_start_conversion(&adc_instance);
	while (1) {
		SYS_TaskHandler();
    4dbe:	4d20      	ldr	r5, [pc, #128]	; (4e40 <main+0x188>)
		timer_callback();
    4dc0:	4c20      	ldr	r4, [pc, #128]	; (4e44 <main+0x18c>)
	cpu_irq_enable();
	LED_On(LED0);
	
	//adc_start_conversion(&adc_instance);
	while (1) {
		SYS_TaskHandler();
    4dc2:	47a8      	blx	r5
		timer_callback();
    4dc4:	47a0      	blx	r4
    4dc6:	e7fc      	b.n	4dc2 <main+0x10a>
    4dc8:	00001fe9 	.word	0x00001fe9
    4dcc:	00000115 	.word	0x00000115
    4dd0:	00004aa5 	.word	0x00004aa5
    4dd4:	00003a01 	.word	0x00003a01
    4dd8:	00040003 	.word	0x00040003
    4ddc:	00050003 	.word	0x00050003
    4de0:	20000700 	.word	0x20000700
    4de4:	200008d8 	.word	0x200008d8
    4de8:	00004a8d 	.word	0x00004a8d
    4dec:	200008d4 	.word	0x200008d4
    4df0:	00004a61 	.word	0x00004a61
    4df4:	200008d0 	.word	0x200008d0
    4df8:	42000800 	.word	0x42000800
    4dfc:	0000128d 	.word	0x0000128d
    4e00:	2000006c 	.word	0x2000006c
    4e04:	00006e89 	.word	0x00006e89
    4e08:	00000e65 	.word	0x00000e65
    4e0c:	e000e100 	.word	0xe000e100
    4e10:	000025cd 	.word	0x000025cd
    4e14:	00004567 	.word	0x00004567
    4e18:	000025e1 	.word	0x000025e1
    4e1c:	00003839 	.word	0x00003839
    4e20:	00003825 	.word	0x00003825
    4e24:	000038a9 	.word	0x000038a9
    4e28:	00007f60 	.word	0x00007f60
    4e2c:	00003135 	.word	0x00003135
    4e30:	00004a3d 	.word	0x00004a3d
    4e34:	000025f5 	.word	0x000025f5
    4e38:	20000008 	.word	0x20000008
    4e3c:	41004400 	.word	0x41004400
    4e40:	00003a25 	.word	0x00003a25
    4e44:	00004b11 	.word	0x00004b11

00004e48 <common_tc_delay>:
    4e48:	b510      	push	{r4, lr}
    4e4a:	1c04      	adds	r4, r0, #0
    4e4c:	4b13      	ldr	r3, [pc, #76]	; (4e9c <common_tc_delay+0x54>)
    4e4e:	4798      	blx	r3
    4e50:	4b13      	ldr	r3, [pc, #76]	; (4ea0 <common_tc_delay+0x58>)
    4e52:	781a      	ldrb	r2, [r3, #0]
    4e54:	4362      	muls	r2, r4
    4e56:	1881      	adds	r1, r0, r2
    4e58:	4b12      	ldr	r3, [pc, #72]	; (4ea4 <common_tc_delay+0x5c>)
    4e5a:	6059      	str	r1, [r3, #4]
    4e5c:	6859      	ldr	r1, [r3, #4]
    4e5e:	0c09      	lsrs	r1, r1, #16
    4e60:	6059      	str	r1, [r3, #4]
    4e62:	685b      	ldr	r3, [r3, #4]
    4e64:	2b00      	cmp	r3, #0
    4e66:	d007      	beq.n	4e78 <common_tc_delay+0x30>
    4e68:	4b0e      	ldr	r3, [pc, #56]	; (4ea4 <common_tc_delay+0x5c>)
    4e6a:	6859      	ldr	r1, [r3, #4]
    4e6c:	3201      	adds	r2, #1
    4e6e:	1880      	adds	r0, r0, r2
    4e70:	8118      	strh	r0, [r3, #8]
    4e72:	4b0d      	ldr	r3, [pc, #52]	; (4ea8 <common_tc_delay+0x60>)
    4e74:	4798      	blx	r3
    4e76:	e004      	b.n	4e82 <common_tc_delay+0x3a>
    4e78:	1882      	adds	r2, r0, r2
    4e7a:	4b0a      	ldr	r3, [pc, #40]	; (4ea4 <common_tc_delay+0x5c>)
    4e7c:	811a      	strh	r2, [r3, #8]
    4e7e:	4b0b      	ldr	r3, [pc, #44]	; (4eac <common_tc_delay+0x64>)
    4e80:	4798      	blx	r3
    4e82:	4b08      	ldr	r3, [pc, #32]	; (4ea4 <common_tc_delay+0x5c>)
    4e84:	891b      	ldrh	r3, [r3, #8]
    4e86:	2b63      	cmp	r3, #99	; 0x63
    4e88:	d802      	bhi.n	4e90 <common_tc_delay+0x48>
    4e8a:	3364      	adds	r3, #100	; 0x64
    4e8c:	4a05      	ldr	r2, [pc, #20]	; (4ea4 <common_tc_delay+0x5c>)
    4e8e:	8113      	strh	r3, [r2, #8]
    4e90:	4b04      	ldr	r3, [pc, #16]	; (4ea4 <common_tc_delay+0x5c>)
    4e92:	8918      	ldrh	r0, [r3, #8]
    4e94:	4b06      	ldr	r3, [pc, #24]	; (4eb0 <common_tc_delay+0x68>)
    4e96:	4798      	blx	r3
    4e98:	bd10      	pop	{r4, pc}
    4e9a:	46c0      	nop			; (mov r8, r8)
    4e9c:	00003be9 	.word	0x00003be9
    4ea0:	200009fc 	.word	0x200009fc
    4ea4:	20000848 	.word	0x20000848
    4ea8:	00003bfd 	.word	0x00003bfd
    4eac:	00003c11 	.word	0x00003c11
    4eb0:	00003c4d 	.word	0x00003c4d

00004eb4 <common_tc_init>:
    4eb4:	b508      	push	{r3, lr}
    4eb6:	2200      	movs	r2, #0
    4eb8:	4b03      	ldr	r3, [pc, #12]	; (4ec8 <common_tc_init+0x14>)
    4eba:	701a      	strb	r2, [r3, #0]
    4ebc:	4b03      	ldr	r3, [pc, #12]	; (4ecc <common_tc_init+0x18>)
    4ebe:	4798      	blx	r3
    4ec0:	4b03      	ldr	r3, [pc, #12]	; (4ed0 <common_tc_init+0x1c>)
    4ec2:	7018      	strb	r0, [r3, #0]
    4ec4:	bd08      	pop	{r3, pc}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	20000848 	.word	0x20000848
    4ecc:	00003c65 	.word	0x00003c65
    4ed0:	200009fc 	.word	0x200009fc

00004ed4 <tmr_ovf_callback>:
    4ed4:	b508      	push	{r3, lr}
    4ed6:	4b0e      	ldr	r3, [pc, #56]	; (4f10 <tmr_ovf_callback+0x3c>)
    4ed8:	685b      	ldr	r3, [r3, #4]
    4eda:	2b00      	cmp	r3, #0
    4edc:	d007      	beq.n	4eee <tmr_ovf_callback+0x1a>
    4ede:	4a0c      	ldr	r2, [pc, #48]	; (4f10 <tmr_ovf_callback+0x3c>)
    4ee0:	6853      	ldr	r3, [r2, #4]
    4ee2:	3b01      	subs	r3, #1
    4ee4:	6053      	str	r3, [r2, #4]
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d101      	bne.n	4eee <tmr_ovf_callback+0x1a>
    4eea:	4b0a      	ldr	r3, [pc, #40]	; (4f14 <tmr_ovf_callback+0x40>)
    4eec:	4798      	blx	r3
    4eee:	4a08      	ldr	r2, [pc, #32]	; (4f10 <tmr_ovf_callback+0x3c>)
    4ef0:	7813      	ldrb	r3, [r2, #0]
    4ef2:	3301      	adds	r3, #1
    4ef4:	b2db      	uxtb	r3, r3
    4ef6:	7013      	strb	r3, [r2, #0]
    4ef8:	4a07      	ldr	r2, [pc, #28]	; (4f18 <tmr_ovf_callback+0x44>)
    4efa:	7812      	ldrb	r2, [r2, #0]
    4efc:	429a      	cmp	r2, r3
    4efe:	d806      	bhi.n	4f0e <tmr_ovf_callback+0x3a>
    4f00:	4b03      	ldr	r3, [pc, #12]	; (4f10 <tmr_ovf_callback+0x3c>)
    4f02:	2200      	movs	r2, #0
    4f04:	701a      	strb	r2, [r3, #0]
    4f06:	68db      	ldr	r3, [r3, #12]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d000      	beq.n	4f0e <tmr_ovf_callback+0x3a>
    4f0c:	4798      	blx	r3
    4f0e:	bd08      	pop	{r3, pc}
    4f10:	20000848 	.word	0x20000848
    4f14:	00003c11 	.word	0x00003c11
    4f18:	200009fc 	.word	0x200009fc

00004f1c <tmr_cca_callback>:
    4f1c:	b508      	push	{r3, lr}
    4f1e:	4b04      	ldr	r3, [pc, #16]	; (4f30 <tmr_cca_callback+0x14>)
    4f20:	4798      	blx	r3
    4f22:	4b04      	ldr	r3, [pc, #16]	; (4f34 <tmr_cca_callback+0x18>)
    4f24:	691b      	ldr	r3, [r3, #16]
    4f26:	2b00      	cmp	r3, #0
    4f28:	d000      	beq.n	4f2c <tmr_cca_callback+0x10>
    4f2a:	4798      	blx	r3
    4f2c:	bd08      	pop	{r3, pc}
    4f2e:	46c0      	nop			; (mov r8, r8)
    4f30:	00003bfd 	.word	0x00003bfd
    4f34:	20000848 	.word	0x20000848

00004f38 <set_common_tc_expiry_callback>:
    4f38:	4b01      	ldr	r3, [pc, #4]	; (4f40 <set_common_tc_expiry_callback+0x8>)
    4f3a:	6118      	str	r0, [r3, #16]
    4f3c:	4770      	bx	lr
    4f3e:	46c0      	nop			; (mov r8, r8)
    4f40:	20000848 	.word	0x20000848

00004f44 <__aeabi_uidiv>:
    4f44:	2900      	cmp	r1, #0
    4f46:	d034      	beq.n	4fb2 <.udivsi3_skip_div0_test+0x6a>

00004f48 <.udivsi3_skip_div0_test>:
    4f48:	2301      	movs	r3, #1
    4f4a:	2200      	movs	r2, #0
    4f4c:	b410      	push	{r4}
    4f4e:	4288      	cmp	r0, r1
    4f50:	d32c      	bcc.n	4fac <.udivsi3_skip_div0_test+0x64>
    4f52:	2401      	movs	r4, #1
    4f54:	0724      	lsls	r4, r4, #28
    4f56:	42a1      	cmp	r1, r4
    4f58:	d204      	bcs.n	4f64 <.udivsi3_skip_div0_test+0x1c>
    4f5a:	4281      	cmp	r1, r0
    4f5c:	d202      	bcs.n	4f64 <.udivsi3_skip_div0_test+0x1c>
    4f5e:	0109      	lsls	r1, r1, #4
    4f60:	011b      	lsls	r3, r3, #4
    4f62:	e7f8      	b.n	4f56 <.udivsi3_skip_div0_test+0xe>
    4f64:	00e4      	lsls	r4, r4, #3
    4f66:	42a1      	cmp	r1, r4
    4f68:	d204      	bcs.n	4f74 <.udivsi3_skip_div0_test+0x2c>
    4f6a:	4281      	cmp	r1, r0
    4f6c:	d202      	bcs.n	4f74 <.udivsi3_skip_div0_test+0x2c>
    4f6e:	0049      	lsls	r1, r1, #1
    4f70:	005b      	lsls	r3, r3, #1
    4f72:	e7f8      	b.n	4f66 <.udivsi3_skip_div0_test+0x1e>
    4f74:	4288      	cmp	r0, r1
    4f76:	d301      	bcc.n	4f7c <.udivsi3_skip_div0_test+0x34>
    4f78:	1a40      	subs	r0, r0, r1
    4f7a:	431a      	orrs	r2, r3
    4f7c:	084c      	lsrs	r4, r1, #1
    4f7e:	42a0      	cmp	r0, r4
    4f80:	d302      	bcc.n	4f88 <.udivsi3_skip_div0_test+0x40>
    4f82:	1b00      	subs	r0, r0, r4
    4f84:	085c      	lsrs	r4, r3, #1
    4f86:	4322      	orrs	r2, r4
    4f88:	088c      	lsrs	r4, r1, #2
    4f8a:	42a0      	cmp	r0, r4
    4f8c:	d302      	bcc.n	4f94 <.udivsi3_skip_div0_test+0x4c>
    4f8e:	1b00      	subs	r0, r0, r4
    4f90:	089c      	lsrs	r4, r3, #2
    4f92:	4322      	orrs	r2, r4
    4f94:	08cc      	lsrs	r4, r1, #3
    4f96:	42a0      	cmp	r0, r4
    4f98:	d302      	bcc.n	4fa0 <.udivsi3_skip_div0_test+0x58>
    4f9a:	1b00      	subs	r0, r0, r4
    4f9c:	08dc      	lsrs	r4, r3, #3
    4f9e:	4322      	orrs	r2, r4
    4fa0:	2800      	cmp	r0, #0
    4fa2:	d003      	beq.n	4fac <.udivsi3_skip_div0_test+0x64>
    4fa4:	091b      	lsrs	r3, r3, #4
    4fa6:	d001      	beq.n	4fac <.udivsi3_skip_div0_test+0x64>
    4fa8:	0909      	lsrs	r1, r1, #4
    4faa:	e7e3      	b.n	4f74 <.udivsi3_skip_div0_test+0x2c>
    4fac:	1c10      	adds	r0, r2, #0
    4fae:	bc10      	pop	{r4}
    4fb0:	4770      	bx	lr
    4fb2:	2800      	cmp	r0, #0
    4fb4:	d001      	beq.n	4fba <.udivsi3_skip_div0_test+0x72>
    4fb6:	2000      	movs	r0, #0
    4fb8:	43c0      	mvns	r0, r0
    4fba:	b407      	push	{r0, r1, r2}
    4fbc:	4802      	ldr	r0, [pc, #8]	; (4fc8 <.udivsi3_skip_div0_test+0x80>)
    4fbe:	a102      	add	r1, pc, #8	; (adr r1, 4fc8 <.udivsi3_skip_div0_test+0x80>)
    4fc0:	1840      	adds	r0, r0, r1
    4fc2:	9002      	str	r0, [sp, #8]
    4fc4:	bd03      	pop	{r0, r1, pc}
    4fc6:	46c0      	nop			; (mov r8, r8)
    4fc8:	00000019 	.word	0x00000019

00004fcc <__aeabi_uidivmod>:
    4fcc:	2900      	cmp	r1, #0
    4fce:	d0f0      	beq.n	4fb2 <.udivsi3_skip_div0_test+0x6a>
    4fd0:	b503      	push	{r0, r1, lr}
    4fd2:	f7ff ffb9 	bl	4f48 <.udivsi3_skip_div0_test>
    4fd6:	bc0e      	pop	{r1, r2, r3}
    4fd8:	4342      	muls	r2, r0
    4fda:	1a89      	subs	r1, r1, r2
    4fdc:	4718      	bx	r3
    4fde:	46c0      	nop			; (mov r8, r8)

00004fe0 <__aeabi_idiv0>:
    4fe0:	4770      	bx	lr
    4fe2:	46c0      	nop			; (mov r8, r8)

00004fe4 <__aeabi_lmul>:
    4fe4:	469c      	mov	ip, r3
    4fe6:	0403      	lsls	r3, r0, #16
    4fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fea:	0c1b      	lsrs	r3, r3, #16
    4fec:	0417      	lsls	r7, r2, #16
    4fee:	0c3f      	lsrs	r7, r7, #16
    4ff0:	0c15      	lsrs	r5, r2, #16
    4ff2:	1c1e      	adds	r6, r3, #0
    4ff4:	1c04      	adds	r4, r0, #0
    4ff6:	0c00      	lsrs	r0, r0, #16
    4ff8:	437e      	muls	r6, r7
    4ffa:	436b      	muls	r3, r5
    4ffc:	4347      	muls	r7, r0
    4ffe:	4345      	muls	r5, r0
    5000:	18fb      	adds	r3, r7, r3
    5002:	0c30      	lsrs	r0, r6, #16
    5004:	1818      	adds	r0, r3, r0
    5006:	4287      	cmp	r7, r0
    5008:	d902      	bls.n	5010 <__aeabi_lmul+0x2c>
    500a:	2380      	movs	r3, #128	; 0x80
    500c:	025b      	lsls	r3, r3, #9
    500e:	18ed      	adds	r5, r5, r3
    5010:	0c03      	lsrs	r3, r0, #16
    5012:	18ed      	adds	r5, r5, r3
    5014:	4663      	mov	r3, ip
    5016:	435c      	muls	r4, r3
    5018:	434a      	muls	r2, r1
    501a:	0436      	lsls	r6, r6, #16
    501c:	0c36      	lsrs	r6, r6, #16
    501e:	18a1      	adds	r1, r4, r2
    5020:	0400      	lsls	r0, r0, #16
    5022:	1980      	adds	r0, r0, r6
    5024:	1949      	adds	r1, r1, r5
    5026:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005028 <__aeabi_d2uiz>:
    5028:	b538      	push	{r3, r4, r5, lr}
    502a:	4b0e      	ldr	r3, [pc, #56]	; (5064 <__aeabi_d2uiz+0x3c>)
    502c:	4a0c      	ldr	r2, [pc, #48]	; (5060 <__aeabi_d2uiz+0x38>)
    502e:	1c04      	adds	r4, r0, #0
    5030:	1c0d      	adds	r5, r1, #0
    5032:	f001 fd2d 	bl	6a90 <__aeabi_dcmpge>
    5036:	2800      	cmp	r0, #0
    5038:	d104      	bne.n	5044 <__aeabi_d2uiz+0x1c>
    503a:	1c20      	adds	r0, r4, #0
    503c:	1c29      	adds	r1, r5, #0
    503e:	f001 fc6d 	bl	691c <__aeabi_d2iz>
    5042:	bd38      	pop	{r3, r4, r5, pc}
    5044:	4b07      	ldr	r3, [pc, #28]	; (5064 <__aeabi_d2uiz+0x3c>)
    5046:	4a06      	ldr	r2, [pc, #24]	; (5060 <__aeabi_d2uiz+0x38>)
    5048:	1c20      	adds	r0, r4, #0
    504a:	1c29      	adds	r1, r5, #0
    504c:	f001 f932 	bl	62b4 <__aeabi_dsub>
    5050:	f001 fc64 	bl	691c <__aeabi_d2iz>
    5054:	2380      	movs	r3, #128	; 0x80
    5056:	061b      	lsls	r3, r3, #24
    5058:	18c0      	adds	r0, r0, r3
    505a:	e7f2      	b.n	5042 <__aeabi_d2uiz+0x1a>
    505c:	46c0      	nop			; (mov r8, r8)
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	00000000 	.word	0x00000000
    5064:	41e00000 	.word	0x41e00000

00005068 <__aeabi_ui2f>:
    5068:	b510      	push	{r4, lr}
    506a:	1e04      	subs	r4, r0, #0
    506c:	d033      	beq.n	50d6 <__aeabi_ui2f+0x6e>
    506e:	f001 fd19 	bl	6aa4 <__clzsi2>
    5072:	239e      	movs	r3, #158	; 0x9e
    5074:	1a1b      	subs	r3, r3, r0
    5076:	2b96      	cmp	r3, #150	; 0x96
    5078:	dc09      	bgt.n	508e <__aeabi_ui2f+0x26>
    507a:	3808      	subs	r0, #8
    507c:	4084      	lsls	r4, r0
    507e:	0264      	lsls	r4, r4, #9
    5080:	0a64      	lsrs	r4, r4, #9
    5082:	b2db      	uxtb	r3, r3
    5084:	0264      	lsls	r4, r4, #9
    5086:	05db      	lsls	r3, r3, #23
    5088:	0a60      	lsrs	r0, r4, #9
    508a:	4318      	orrs	r0, r3
    508c:	bd10      	pop	{r4, pc}
    508e:	2b99      	cmp	r3, #153	; 0x99
    5090:	dd0a      	ble.n	50a8 <__aeabi_ui2f+0x40>
    5092:	2205      	movs	r2, #5
    5094:	1a12      	subs	r2, r2, r0
    5096:	1c21      	adds	r1, r4, #0
    5098:	40d1      	lsrs	r1, r2
    509a:	1c0a      	adds	r2, r1, #0
    509c:	1c01      	adds	r1, r0, #0
    509e:	311b      	adds	r1, #27
    50a0:	408c      	lsls	r4, r1
    50a2:	1e61      	subs	r1, r4, #1
    50a4:	418c      	sbcs	r4, r1
    50a6:	4314      	orrs	r4, r2
    50a8:	2805      	cmp	r0, #5
    50aa:	dd01      	ble.n	50b0 <__aeabi_ui2f+0x48>
    50ac:	1f42      	subs	r2, r0, #5
    50ae:	4094      	lsls	r4, r2
    50b0:	4a14      	ldr	r2, [pc, #80]	; (5104 <__aeabi_ui2f+0x9c>)
    50b2:	4022      	ands	r2, r4
    50b4:	0761      	lsls	r1, r4, #29
    50b6:	d004      	beq.n	50c2 <__aeabi_ui2f+0x5a>
    50b8:	210f      	movs	r1, #15
    50ba:	400c      	ands	r4, r1
    50bc:	2c04      	cmp	r4, #4
    50be:	d000      	beq.n	50c2 <__aeabi_ui2f+0x5a>
    50c0:	3204      	adds	r2, #4
    50c2:	0151      	lsls	r1, r2, #5
    50c4:	d50a      	bpl.n	50dc <__aeabi_ui2f+0x74>
    50c6:	239f      	movs	r3, #159	; 0x9f
    50c8:	1a18      	subs	r0, r3, r0
    50ca:	28ff      	cmp	r0, #255	; 0xff
    50cc:	d016      	beq.n	50fc <__aeabi_ui2f+0x94>
    50ce:	0194      	lsls	r4, r2, #6
    50d0:	0a64      	lsrs	r4, r4, #9
    50d2:	b2c3      	uxtb	r3, r0
    50d4:	e7d6      	b.n	5084 <__aeabi_ui2f+0x1c>
    50d6:	2300      	movs	r3, #0
    50d8:	2400      	movs	r4, #0
    50da:	e7d3      	b.n	5084 <__aeabi_ui2f+0x1c>
    50dc:	08d2      	lsrs	r2, r2, #3
    50de:	2bff      	cmp	r3, #255	; 0xff
    50e0:	d003      	beq.n	50ea <__aeabi_ui2f+0x82>
    50e2:	0254      	lsls	r4, r2, #9
    50e4:	0a64      	lsrs	r4, r4, #9
    50e6:	b2db      	uxtb	r3, r3
    50e8:	e7cc      	b.n	5084 <__aeabi_ui2f+0x1c>
    50ea:	2a00      	cmp	r2, #0
    50ec:	d006      	beq.n	50fc <__aeabi_ui2f+0x94>
    50ee:	2480      	movs	r4, #128	; 0x80
    50f0:	03e4      	lsls	r4, r4, #15
    50f2:	4314      	orrs	r4, r2
    50f4:	0264      	lsls	r4, r4, #9
    50f6:	0a64      	lsrs	r4, r4, #9
    50f8:	23ff      	movs	r3, #255	; 0xff
    50fa:	e7c3      	b.n	5084 <__aeabi_ui2f+0x1c>
    50fc:	23ff      	movs	r3, #255	; 0xff
    50fe:	2400      	movs	r4, #0
    5100:	e7c0      	b.n	5084 <__aeabi_ui2f+0x1c>
    5102:	46c0      	nop			; (mov r8, r8)
    5104:	fbffffff 	.word	0xfbffffff

00005108 <__aeabi_dadd>:
    5108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    510a:	465f      	mov	r7, fp
    510c:	4656      	mov	r6, sl
    510e:	4644      	mov	r4, r8
    5110:	464d      	mov	r5, r9
    5112:	b4f0      	push	{r4, r5, r6, r7}
    5114:	030c      	lsls	r4, r1, #12
    5116:	004d      	lsls	r5, r1, #1
    5118:	0fce      	lsrs	r6, r1, #31
    511a:	0a61      	lsrs	r1, r4, #9
    511c:	0f44      	lsrs	r4, r0, #29
    511e:	4321      	orrs	r1, r4
    5120:	00c4      	lsls	r4, r0, #3
    5122:	0318      	lsls	r0, r3, #12
    5124:	4680      	mov	r8, r0
    5126:	0058      	lsls	r0, r3, #1
    5128:	0d40      	lsrs	r0, r0, #21
    512a:	4682      	mov	sl, r0
    512c:	0fd8      	lsrs	r0, r3, #31
    512e:	4684      	mov	ip, r0
    5130:	4640      	mov	r0, r8
    5132:	0a40      	lsrs	r0, r0, #9
    5134:	0f53      	lsrs	r3, r2, #29
    5136:	4303      	orrs	r3, r0
    5138:	00d0      	lsls	r0, r2, #3
    513a:	0d6d      	lsrs	r5, r5, #21
    513c:	1c37      	adds	r7, r6, #0
    513e:	4683      	mov	fp, r0
    5140:	4652      	mov	r2, sl
    5142:	4566      	cmp	r6, ip
    5144:	d100      	bne.n	5148 <__aeabi_dadd+0x40>
    5146:	e0a4      	b.n	5292 <__aeabi_dadd+0x18a>
    5148:	1aaf      	subs	r7, r5, r2
    514a:	2f00      	cmp	r7, #0
    514c:	dc00      	bgt.n	5150 <__aeabi_dadd+0x48>
    514e:	e109      	b.n	5364 <__aeabi_dadd+0x25c>
    5150:	2a00      	cmp	r2, #0
    5152:	d13b      	bne.n	51cc <__aeabi_dadd+0xc4>
    5154:	4318      	orrs	r0, r3
    5156:	d000      	beq.n	515a <__aeabi_dadd+0x52>
    5158:	e0ea      	b.n	5330 <__aeabi_dadd+0x228>
    515a:	0763      	lsls	r3, r4, #29
    515c:	d100      	bne.n	5160 <__aeabi_dadd+0x58>
    515e:	e087      	b.n	5270 <__aeabi_dadd+0x168>
    5160:	230f      	movs	r3, #15
    5162:	4023      	ands	r3, r4
    5164:	2b04      	cmp	r3, #4
    5166:	d100      	bne.n	516a <__aeabi_dadd+0x62>
    5168:	e082      	b.n	5270 <__aeabi_dadd+0x168>
    516a:	1d22      	adds	r2, r4, #4
    516c:	42a2      	cmp	r2, r4
    516e:	41a4      	sbcs	r4, r4
    5170:	4264      	negs	r4, r4
    5172:	2380      	movs	r3, #128	; 0x80
    5174:	1909      	adds	r1, r1, r4
    5176:	041b      	lsls	r3, r3, #16
    5178:	400b      	ands	r3, r1
    517a:	1c37      	adds	r7, r6, #0
    517c:	1c14      	adds	r4, r2, #0
    517e:	2b00      	cmp	r3, #0
    5180:	d100      	bne.n	5184 <__aeabi_dadd+0x7c>
    5182:	e07c      	b.n	527e <__aeabi_dadd+0x176>
    5184:	4bce      	ldr	r3, [pc, #824]	; (54c0 <__aeabi_dadd+0x3b8>)
    5186:	3501      	adds	r5, #1
    5188:	429d      	cmp	r5, r3
    518a:	d100      	bne.n	518e <__aeabi_dadd+0x86>
    518c:	e105      	b.n	539a <__aeabi_dadd+0x292>
    518e:	4bcd      	ldr	r3, [pc, #820]	; (54c4 <__aeabi_dadd+0x3bc>)
    5190:	08e4      	lsrs	r4, r4, #3
    5192:	4019      	ands	r1, r3
    5194:	0748      	lsls	r0, r1, #29
    5196:	0249      	lsls	r1, r1, #9
    5198:	4304      	orrs	r4, r0
    519a:	0b0b      	lsrs	r3, r1, #12
    519c:	2000      	movs	r0, #0
    519e:	2100      	movs	r1, #0
    51a0:	031b      	lsls	r3, r3, #12
    51a2:	0b1a      	lsrs	r2, r3, #12
    51a4:	0d0b      	lsrs	r3, r1, #20
    51a6:	056d      	lsls	r5, r5, #21
    51a8:	051b      	lsls	r3, r3, #20
    51aa:	4313      	orrs	r3, r2
    51ac:	086a      	lsrs	r2, r5, #1
    51ae:	4dc6      	ldr	r5, [pc, #792]	; (54c8 <__aeabi_dadd+0x3c0>)
    51b0:	07ff      	lsls	r7, r7, #31
    51b2:	401d      	ands	r5, r3
    51b4:	4315      	orrs	r5, r2
    51b6:	006d      	lsls	r5, r5, #1
    51b8:	086d      	lsrs	r5, r5, #1
    51ba:	1c29      	adds	r1, r5, #0
    51bc:	4339      	orrs	r1, r7
    51be:	1c20      	adds	r0, r4, #0
    51c0:	bc3c      	pop	{r2, r3, r4, r5}
    51c2:	4690      	mov	r8, r2
    51c4:	4699      	mov	r9, r3
    51c6:	46a2      	mov	sl, r4
    51c8:	46ab      	mov	fp, r5
    51ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51cc:	48bc      	ldr	r0, [pc, #752]	; (54c0 <__aeabi_dadd+0x3b8>)
    51ce:	4285      	cmp	r5, r0
    51d0:	d0c3      	beq.n	515a <__aeabi_dadd+0x52>
    51d2:	2080      	movs	r0, #128	; 0x80
    51d4:	0400      	lsls	r0, r0, #16
    51d6:	4303      	orrs	r3, r0
    51d8:	2f38      	cmp	r7, #56	; 0x38
    51da:	dd00      	ble.n	51de <__aeabi_dadd+0xd6>
    51dc:	e0f0      	b.n	53c0 <__aeabi_dadd+0x2b8>
    51de:	2f1f      	cmp	r7, #31
    51e0:	dd00      	ble.n	51e4 <__aeabi_dadd+0xdc>
    51e2:	e124      	b.n	542e <__aeabi_dadd+0x326>
    51e4:	2020      	movs	r0, #32
    51e6:	1bc0      	subs	r0, r0, r7
    51e8:	1c1a      	adds	r2, r3, #0
    51ea:	4681      	mov	r9, r0
    51ec:	4082      	lsls	r2, r0
    51ee:	4658      	mov	r0, fp
    51f0:	40f8      	lsrs	r0, r7
    51f2:	4302      	orrs	r2, r0
    51f4:	4694      	mov	ip, r2
    51f6:	4658      	mov	r0, fp
    51f8:	464a      	mov	r2, r9
    51fa:	4090      	lsls	r0, r2
    51fc:	1e42      	subs	r2, r0, #1
    51fe:	4190      	sbcs	r0, r2
    5200:	40fb      	lsrs	r3, r7
    5202:	4662      	mov	r2, ip
    5204:	4302      	orrs	r2, r0
    5206:	1c1f      	adds	r7, r3, #0
    5208:	1aa2      	subs	r2, r4, r2
    520a:	4294      	cmp	r4, r2
    520c:	41a4      	sbcs	r4, r4
    520e:	4264      	negs	r4, r4
    5210:	1bc9      	subs	r1, r1, r7
    5212:	1b09      	subs	r1, r1, r4
    5214:	1c14      	adds	r4, r2, #0
    5216:	020b      	lsls	r3, r1, #8
    5218:	d59f      	bpl.n	515a <__aeabi_dadd+0x52>
    521a:	0249      	lsls	r1, r1, #9
    521c:	0a4f      	lsrs	r7, r1, #9
    521e:	2f00      	cmp	r7, #0
    5220:	d100      	bne.n	5224 <__aeabi_dadd+0x11c>
    5222:	e0c8      	b.n	53b6 <__aeabi_dadd+0x2ae>
    5224:	1c38      	adds	r0, r7, #0
    5226:	f001 fc3d 	bl	6aa4 <__clzsi2>
    522a:	1c02      	adds	r2, r0, #0
    522c:	3a08      	subs	r2, #8
    522e:	2a1f      	cmp	r2, #31
    5230:	dd00      	ble.n	5234 <__aeabi_dadd+0x12c>
    5232:	e0b5      	b.n	53a0 <__aeabi_dadd+0x298>
    5234:	2128      	movs	r1, #40	; 0x28
    5236:	1a09      	subs	r1, r1, r0
    5238:	1c20      	adds	r0, r4, #0
    523a:	4097      	lsls	r7, r2
    523c:	40c8      	lsrs	r0, r1
    523e:	4307      	orrs	r7, r0
    5240:	4094      	lsls	r4, r2
    5242:	4295      	cmp	r5, r2
    5244:	dd00      	ble.n	5248 <__aeabi_dadd+0x140>
    5246:	e0b2      	b.n	53ae <__aeabi_dadd+0x2a6>
    5248:	1b55      	subs	r5, r2, r5
    524a:	1c69      	adds	r1, r5, #1
    524c:	291f      	cmp	r1, #31
    524e:	dd00      	ble.n	5252 <__aeabi_dadd+0x14a>
    5250:	e0dc      	b.n	540c <__aeabi_dadd+0x304>
    5252:	221f      	movs	r2, #31
    5254:	1b55      	subs	r5, r2, r5
    5256:	1c3b      	adds	r3, r7, #0
    5258:	1c22      	adds	r2, r4, #0
    525a:	40ab      	lsls	r3, r5
    525c:	40ca      	lsrs	r2, r1
    525e:	40ac      	lsls	r4, r5
    5260:	1e65      	subs	r5, r4, #1
    5262:	41ac      	sbcs	r4, r5
    5264:	4313      	orrs	r3, r2
    5266:	40cf      	lsrs	r7, r1
    5268:	431c      	orrs	r4, r3
    526a:	1c39      	adds	r1, r7, #0
    526c:	2500      	movs	r5, #0
    526e:	e774      	b.n	515a <__aeabi_dadd+0x52>
    5270:	2380      	movs	r3, #128	; 0x80
    5272:	041b      	lsls	r3, r3, #16
    5274:	400b      	ands	r3, r1
    5276:	1c37      	adds	r7, r6, #0
    5278:	2b00      	cmp	r3, #0
    527a:	d000      	beq.n	527e <__aeabi_dadd+0x176>
    527c:	e782      	b.n	5184 <__aeabi_dadd+0x7c>
    527e:	4b90      	ldr	r3, [pc, #576]	; (54c0 <__aeabi_dadd+0x3b8>)
    5280:	0748      	lsls	r0, r1, #29
    5282:	08e4      	lsrs	r4, r4, #3
    5284:	4304      	orrs	r4, r0
    5286:	08c9      	lsrs	r1, r1, #3
    5288:	429d      	cmp	r5, r3
    528a:	d048      	beq.n	531e <__aeabi_dadd+0x216>
    528c:	0309      	lsls	r1, r1, #12
    528e:	0b0b      	lsrs	r3, r1, #12
    5290:	e784      	b.n	519c <__aeabi_dadd+0x94>
    5292:	1aaa      	subs	r2, r5, r2
    5294:	4694      	mov	ip, r2
    5296:	2a00      	cmp	r2, #0
    5298:	dc00      	bgt.n	529c <__aeabi_dadd+0x194>
    529a:	e098      	b.n	53ce <__aeabi_dadd+0x2c6>
    529c:	4650      	mov	r0, sl
    529e:	2800      	cmp	r0, #0
    52a0:	d052      	beq.n	5348 <__aeabi_dadd+0x240>
    52a2:	4887      	ldr	r0, [pc, #540]	; (54c0 <__aeabi_dadd+0x3b8>)
    52a4:	4285      	cmp	r5, r0
    52a6:	d100      	bne.n	52aa <__aeabi_dadd+0x1a2>
    52a8:	e757      	b.n	515a <__aeabi_dadd+0x52>
    52aa:	2080      	movs	r0, #128	; 0x80
    52ac:	0400      	lsls	r0, r0, #16
    52ae:	4303      	orrs	r3, r0
    52b0:	4662      	mov	r2, ip
    52b2:	2a38      	cmp	r2, #56	; 0x38
    52b4:	dd00      	ble.n	52b8 <__aeabi_dadd+0x1b0>
    52b6:	e0fc      	b.n	54b2 <__aeabi_dadd+0x3aa>
    52b8:	2a1f      	cmp	r2, #31
    52ba:	dd00      	ble.n	52be <__aeabi_dadd+0x1b6>
    52bc:	e14a      	b.n	5554 <__aeabi_dadd+0x44c>
    52be:	2220      	movs	r2, #32
    52c0:	4660      	mov	r0, ip
    52c2:	1a10      	subs	r0, r2, r0
    52c4:	1c1a      	adds	r2, r3, #0
    52c6:	4082      	lsls	r2, r0
    52c8:	4682      	mov	sl, r0
    52ca:	4691      	mov	r9, r2
    52cc:	4658      	mov	r0, fp
    52ce:	4662      	mov	r2, ip
    52d0:	40d0      	lsrs	r0, r2
    52d2:	464a      	mov	r2, r9
    52d4:	4302      	orrs	r2, r0
    52d6:	4690      	mov	r8, r2
    52d8:	4658      	mov	r0, fp
    52da:	4652      	mov	r2, sl
    52dc:	4090      	lsls	r0, r2
    52de:	1e42      	subs	r2, r0, #1
    52e0:	4190      	sbcs	r0, r2
    52e2:	4642      	mov	r2, r8
    52e4:	4302      	orrs	r2, r0
    52e6:	4660      	mov	r0, ip
    52e8:	40c3      	lsrs	r3, r0
    52ea:	1912      	adds	r2, r2, r4
    52ec:	42a2      	cmp	r2, r4
    52ee:	41a4      	sbcs	r4, r4
    52f0:	4264      	negs	r4, r4
    52f2:	1859      	adds	r1, r3, r1
    52f4:	1909      	adds	r1, r1, r4
    52f6:	1c14      	adds	r4, r2, #0
    52f8:	0208      	lsls	r0, r1, #8
    52fa:	d400      	bmi.n	52fe <__aeabi_dadd+0x1f6>
    52fc:	e72d      	b.n	515a <__aeabi_dadd+0x52>
    52fe:	4b70      	ldr	r3, [pc, #448]	; (54c0 <__aeabi_dadd+0x3b8>)
    5300:	3501      	adds	r5, #1
    5302:	429d      	cmp	r5, r3
    5304:	d100      	bne.n	5308 <__aeabi_dadd+0x200>
    5306:	e122      	b.n	554e <__aeabi_dadd+0x446>
    5308:	4b6e      	ldr	r3, [pc, #440]	; (54c4 <__aeabi_dadd+0x3bc>)
    530a:	0860      	lsrs	r0, r4, #1
    530c:	4019      	ands	r1, r3
    530e:	2301      	movs	r3, #1
    5310:	4023      	ands	r3, r4
    5312:	1c1c      	adds	r4, r3, #0
    5314:	4304      	orrs	r4, r0
    5316:	07cb      	lsls	r3, r1, #31
    5318:	431c      	orrs	r4, r3
    531a:	0849      	lsrs	r1, r1, #1
    531c:	e71d      	b.n	515a <__aeabi_dadd+0x52>
    531e:	1c23      	adds	r3, r4, #0
    5320:	430b      	orrs	r3, r1
    5322:	d03a      	beq.n	539a <__aeabi_dadd+0x292>
    5324:	2380      	movs	r3, #128	; 0x80
    5326:	031b      	lsls	r3, r3, #12
    5328:	430b      	orrs	r3, r1
    532a:	031b      	lsls	r3, r3, #12
    532c:	0b1b      	lsrs	r3, r3, #12
    532e:	e735      	b.n	519c <__aeabi_dadd+0x94>
    5330:	3f01      	subs	r7, #1
    5332:	2f00      	cmp	r7, #0
    5334:	d165      	bne.n	5402 <__aeabi_dadd+0x2fa>
    5336:	4658      	mov	r0, fp
    5338:	1a22      	subs	r2, r4, r0
    533a:	4294      	cmp	r4, r2
    533c:	41a4      	sbcs	r4, r4
    533e:	4264      	negs	r4, r4
    5340:	1ac9      	subs	r1, r1, r3
    5342:	1b09      	subs	r1, r1, r4
    5344:	1c14      	adds	r4, r2, #0
    5346:	e766      	b.n	5216 <__aeabi_dadd+0x10e>
    5348:	4658      	mov	r0, fp
    534a:	4318      	orrs	r0, r3
    534c:	d100      	bne.n	5350 <__aeabi_dadd+0x248>
    534e:	e704      	b.n	515a <__aeabi_dadd+0x52>
    5350:	2201      	movs	r2, #1
    5352:	4252      	negs	r2, r2
    5354:	4494      	add	ip, r2
    5356:	4660      	mov	r0, ip
    5358:	2800      	cmp	r0, #0
    535a:	d000      	beq.n	535e <__aeabi_dadd+0x256>
    535c:	e0c5      	b.n	54ea <__aeabi_dadd+0x3e2>
    535e:	4658      	mov	r0, fp
    5360:	1902      	adds	r2, r0, r4
    5362:	e7c3      	b.n	52ec <__aeabi_dadd+0x1e4>
    5364:	2f00      	cmp	r7, #0
    5366:	d173      	bne.n	5450 <__aeabi_dadd+0x348>
    5368:	1c68      	adds	r0, r5, #1
    536a:	0540      	lsls	r0, r0, #21
    536c:	0d40      	lsrs	r0, r0, #21
    536e:	2801      	cmp	r0, #1
    5370:	dc00      	bgt.n	5374 <__aeabi_dadd+0x26c>
    5372:	e0de      	b.n	5532 <__aeabi_dadd+0x42a>
    5374:	465a      	mov	r2, fp
    5376:	1aa2      	subs	r2, r4, r2
    5378:	4294      	cmp	r4, r2
    537a:	41bf      	sbcs	r7, r7
    537c:	1ac8      	subs	r0, r1, r3
    537e:	427f      	negs	r7, r7
    5380:	1bc7      	subs	r7, r0, r7
    5382:	0238      	lsls	r0, r7, #8
    5384:	d400      	bmi.n	5388 <__aeabi_dadd+0x280>
    5386:	e089      	b.n	549c <__aeabi_dadd+0x394>
    5388:	465a      	mov	r2, fp
    538a:	1b14      	subs	r4, r2, r4
    538c:	45a3      	cmp	fp, r4
    538e:	4192      	sbcs	r2, r2
    5390:	1a59      	subs	r1, r3, r1
    5392:	4252      	negs	r2, r2
    5394:	1a8f      	subs	r7, r1, r2
    5396:	4666      	mov	r6, ip
    5398:	e741      	b.n	521e <__aeabi_dadd+0x116>
    539a:	2300      	movs	r3, #0
    539c:	2400      	movs	r4, #0
    539e:	e6fd      	b.n	519c <__aeabi_dadd+0x94>
    53a0:	1c27      	adds	r7, r4, #0
    53a2:	3828      	subs	r0, #40	; 0x28
    53a4:	4087      	lsls	r7, r0
    53a6:	2400      	movs	r4, #0
    53a8:	4295      	cmp	r5, r2
    53aa:	dc00      	bgt.n	53ae <__aeabi_dadd+0x2a6>
    53ac:	e74c      	b.n	5248 <__aeabi_dadd+0x140>
    53ae:	4945      	ldr	r1, [pc, #276]	; (54c4 <__aeabi_dadd+0x3bc>)
    53b0:	1aad      	subs	r5, r5, r2
    53b2:	4039      	ands	r1, r7
    53b4:	e6d1      	b.n	515a <__aeabi_dadd+0x52>
    53b6:	1c20      	adds	r0, r4, #0
    53b8:	f001 fb74 	bl	6aa4 <__clzsi2>
    53bc:	3020      	adds	r0, #32
    53be:	e734      	b.n	522a <__aeabi_dadd+0x122>
    53c0:	465a      	mov	r2, fp
    53c2:	431a      	orrs	r2, r3
    53c4:	1e53      	subs	r3, r2, #1
    53c6:	419a      	sbcs	r2, r3
    53c8:	b2d2      	uxtb	r2, r2
    53ca:	2700      	movs	r7, #0
    53cc:	e71c      	b.n	5208 <__aeabi_dadd+0x100>
    53ce:	2a00      	cmp	r2, #0
    53d0:	d000      	beq.n	53d4 <__aeabi_dadd+0x2cc>
    53d2:	e0dc      	b.n	558e <__aeabi_dadd+0x486>
    53d4:	1c68      	adds	r0, r5, #1
    53d6:	0542      	lsls	r2, r0, #21
    53d8:	0d52      	lsrs	r2, r2, #21
    53da:	2a01      	cmp	r2, #1
    53dc:	dc00      	bgt.n	53e0 <__aeabi_dadd+0x2d8>
    53de:	e08d      	b.n	54fc <__aeabi_dadd+0x3f4>
    53e0:	4d37      	ldr	r5, [pc, #220]	; (54c0 <__aeabi_dadd+0x3b8>)
    53e2:	42a8      	cmp	r0, r5
    53e4:	d100      	bne.n	53e8 <__aeabi_dadd+0x2e0>
    53e6:	e0f3      	b.n	55d0 <__aeabi_dadd+0x4c8>
    53e8:	465d      	mov	r5, fp
    53ea:	192a      	adds	r2, r5, r4
    53ec:	42a2      	cmp	r2, r4
    53ee:	41a4      	sbcs	r4, r4
    53f0:	4264      	negs	r4, r4
    53f2:	1859      	adds	r1, r3, r1
    53f4:	1909      	adds	r1, r1, r4
    53f6:	07cc      	lsls	r4, r1, #31
    53f8:	0852      	lsrs	r2, r2, #1
    53fa:	4314      	orrs	r4, r2
    53fc:	0849      	lsrs	r1, r1, #1
    53fe:	1c05      	adds	r5, r0, #0
    5400:	e6ab      	b.n	515a <__aeabi_dadd+0x52>
    5402:	482f      	ldr	r0, [pc, #188]	; (54c0 <__aeabi_dadd+0x3b8>)
    5404:	4285      	cmp	r5, r0
    5406:	d000      	beq.n	540a <__aeabi_dadd+0x302>
    5408:	e6e6      	b.n	51d8 <__aeabi_dadd+0xd0>
    540a:	e6a6      	b.n	515a <__aeabi_dadd+0x52>
    540c:	1c2b      	adds	r3, r5, #0
    540e:	3b1f      	subs	r3, #31
    5410:	1c3a      	adds	r2, r7, #0
    5412:	40da      	lsrs	r2, r3
    5414:	1c13      	adds	r3, r2, #0
    5416:	2920      	cmp	r1, #32
    5418:	d06c      	beq.n	54f4 <__aeabi_dadd+0x3ec>
    541a:	223f      	movs	r2, #63	; 0x3f
    541c:	1b55      	subs	r5, r2, r5
    541e:	40af      	lsls	r7, r5
    5420:	433c      	orrs	r4, r7
    5422:	1e60      	subs	r0, r4, #1
    5424:	4184      	sbcs	r4, r0
    5426:	431c      	orrs	r4, r3
    5428:	2100      	movs	r1, #0
    542a:	2500      	movs	r5, #0
    542c:	e695      	b.n	515a <__aeabi_dadd+0x52>
    542e:	1c38      	adds	r0, r7, #0
    5430:	3820      	subs	r0, #32
    5432:	1c1a      	adds	r2, r3, #0
    5434:	40c2      	lsrs	r2, r0
    5436:	1c10      	adds	r0, r2, #0
    5438:	2f20      	cmp	r7, #32
    543a:	d05d      	beq.n	54f8 <__aeabi_dadd+0x3f0>
    543c:	2240      	movs	r2, #64	; 0x40
    543e:	1bd7      	subs	r7, r2, r7
    5440:	40bb      	lsls	r3, r7
    5442:	465a      	mov	r2, fp
    5444:	431a      	orrs	r2, r3
    5446:	1e53      	subs	r3, r2, #1
    5448:	419a      	sbcs	r2, r3
    544a:	4302      	orrs	r2, r0
    544c:	2700      	movs	r7, #0
    544e:	e6db      	b.n	5208 <__aeabi_dadd+0x100>
    5450:	2d00      	cmp	r5, #0
    5452:	d03b      	beq.n	54cc <__aeabi_dadd+0x3c4>
    5454:	4d1a      	ldr	r5, [pc, #104]	; (54c0 <__aeabi_dadd+0x3b8>)
    5456:	45aa      	cmp	sl, r5
    5458:	d100      	bne.n	545c <__aeabi_dadd+0x354>
    545a:	e093      	b.n	5584 <__aeabi_dadd+0x47c>
    545c:	2580      	movs	r5, #128	; 0x80
    545e:	042d      	lsls	r5, r5, #16
    5460:	427f      	negs	r7, r7
    5462:	4329      	orrs	r1, r5
    5464:	2f38      	cmp	r7, #56	; 0x38
    5466:	dd00      	ble.n	546a <__aeabi_dadd+0x362>
    5468:	e0ac      	b.n	55c4 <__aeabi_dadd+0x4bc>
    546a:	2f1f      	cmp	r7, #31
    546c:	dd00      	ble.n	5470 <__aeabi_dadd+0x368>
    546e:	e129      	b.n	56c4 <__aeabi_dadd+0x5bc>
    5470:	2520      	movs	r5, #32
    5472:	1bed      	subs	r5, r5, r7
    5474:	1c08      	adds	r0, r1, #0
    5476:	1c26      	adds	r6, r4, #0
    5478:	40a8      	lsls	r0, r5
    547a:	40fe      	lsrs	r6, r7
    547c:	40ac      	lsls	r4, r5
    547e:	4306      	orrs	r6, r0
    5480:	1e65      	subs	r5, r4, #1
    5482:	41ac      	sbcs	r4, r5
    5484:	4334      	orrs	r4, r6
    5486:	40f9      	lsrs	r1, r7
    5488:	465d      	mov	r5, fp
    548a:	1b2c      	subs	r4, r5, r4
    548c:	45a3      	cmp	fp, r4
    548e:	4192      	sbcs	r2, r2
    5490:	1a5b      	subs	r3, r3, r1
    5492:	4252      	negs	r2, r2
    5494:	1a99      	subs	r1, r3, r2
    5496:	4655      	mov	r5, sl
    5498:	4666      	mov	r6, ip
    549a:	e6bc      	b.n	5216 <__aeabi_dadd+0x10e>
    549c:	1c13      	adds	r3, r2, #0
    549e:	433b      	orrs	r3, r7
    54a0:	1c14      	adds	r4, r2, #0
    54a2:	2b00      	cmp	r3, #0
    54a4:	d000      	beq.n	54a8 <__aeabi_dadd+0x3a0>
    54a6:	e6ba      	b.n	521e <__aeabi_dadd+0x116>
    54a8:	2700      	movs	r7, #0
    54aa:	2100      	movs	r1, #0
    54ac:	2500      	movs	r5, #0
    54ae:	2400      	movs	r4, #0
    54b0:	e6e5      	b.n	527e <__aeabi_dadd+0x176>
    54b2:	465a      	mov	r2, fp
    54b4:	431a      	orrs	r2, r3
    54b6:	1e53      	subs	r3, r2, #1
    54b8:	419a      	sbcs	r2, r3
    54ba:	b2d2      	uxtb	r2, r2
    54bc:	2300      	movs	r3, #0
    54be:	e714      	b.n	52ea <__aeabi_dadd+0x1e2>
    54c0:	000007ff 	.word	0x000007ff
    54c4:	ff7fffff 	.word	0xff7fffff
    54c8:	800fffff 	.word	0x800fffff
    54cc:	1c0d      	adds	r5, r1, #0
    54ce:	4325      	orrs	r5, r4
    54d0:	d058      	beq.n	5584 <__aeabi_dadd+0x47c>
    54d2:	43ff      	mvns	r7, r7
    54d4:	2f00      	cmp	r7, #0
    54d6:	d151      	bne.n	557c <__aeabi_dadd+0x474>
    54d8:	1b04      	subs	r4, r0, r4
    54da:	45a3      	cmp	fp, r4
    54dc:	4192      	sbcs	r2, r2
    54de:	1a59      	subs	r1, r3, r1
    54e0:	4252      	negs	r2, r2
    54e2:	1a89      	subs	r1, r1, r2
    54e4:	4655      	mov	r5, sl
    54e6:	4666      	mov	r6, ip
    54e8:	e695      	b.n	5216 <__aeabi_dadd+0x10e>
    54ea:	4896      	ldr	r0, [pc, #600]	; (5744 <__aeabi_dadd+0x63c>)
    54ec:	4285      	cmp	r5, r0
    54ee:	d000      	beq.n	54f2 <__aeabi_dadd+0x3ea>
    54f0:	e6de      	b.n	52b0 <__aeabi_dadd+0x1a8>
    54f2:	e632      	b.n	515a <__aeabi_dadd+0x52>
    54f4:	2700      	movs	r7, #0
    54f6:	e793      	b.n	5420 <__aeabi_dadd+0x318>
    54f8:	2300      	movs	r3, #0
    54fa:	e7a2      	b.n	5442 <__aeabi_dadd+0x33a>
    54fc:	1c08      	adds	r0, r1, #0
    54fe:	4320      	orrs	r0, r4
    5500:	2d00      	cmp	r5, #0
    5502:	d000      	beq.n	5506 <__aeabi_dadd+0x3fe>
    5504:	e0c4      	b.n	5690 <__aeabi_dadd+0x588>
    5506:	2800      	cmp	r0, #0
    5508:	d100      	bne.n	550c <__aeabi_dadd+0x404>
    550a:	e0f7      	b.n	56fc <__aeabi_dadd+0x5f4>
    550c:	4658      	mov	r0, fp
    550e:	4318      	orrs	r0, r3
    5510:	d100      	bne.n	5514 <__aeabi_dadd+0x40c>
    5512:	e622      	b.n	515a <__aeabi_dadd+0x52>
    5514:	4658      	mov	r0, fp
    5516:	1902      	adds	r2, r0, r4
    5518:	42a2      	cmp	r2, r4
    551a:	41a4      	sbcs	r4, r4
    551c:	4264      	negs	r4, r4
    551e:	1859      	adds	r1, r3, r1
    5520:	1909      	adds	r1, r1, r4
    5522:	1c14      	adds	r4, r2, #0
    5524:	020a      	lsls	r2, r1, #8
    5526:	d400      	bmi.n	552a <__aeabi_dadd+0x422>
    5528:	e617      	b.n	515a <__aeabi_dadd+0x52>
    552a:	4b87      	ldr	r3, [pc, #540]	; (5748 <__aeabi_dadd+0x640>)
    552c:	2501      	movs	r5, #1
    552e:	4019      	ands	r1, r3
    5530:	e613      	b.n	515a <__aeabi_dadd+0x52>
    5532:	1c08      	adds	r0, r1, #0
    5534:	4320      	orrs	r0, r4
    5536:	2d00      	cmp	r5, #0
    5538:	d139      	bne.n	55ae <__aeabi_dadd+0x4a6>
    553a:	2800      	cmp	r0, #0
    553c:	d171      	bne.n	5622 <__aeabi_dadd+0x51a>
    553e:	4659      	mov	r1, fp
    5540:	4319      	orrs	r1, r3
    5542:	d003      	beq.n	554c <__aeabi_dadd+0x444>
    5544:	1c19      	adds	r1, r3, #0
    5546:	465c      	mov	r4, fp
    5548:	4666      	mov	r6, ip
    554a:	e606      	b.n	515a <__aeabi_dadd+0x52>
    554c:	2700      	movs	r7, #0
    554e:	2100      	movs	r1, #0
    5550:	2400      	movs	r4, #0
    5552:	e694      	b.n	527e <__aeabi_dadd+0x176>
    5554:	4660      	mov	r0, ip
    5556:	3820      	subs	r0, #32
    5558:	1c1a      	adds	r2, r3, #0
    555a:	40c2      	lsrs	r2, r0
    555c:	4660      	mov	r0, ip
    555e:	4691      	mov	r9, r2
    5560:	2820      	cmp	r0, #32
    5562:	d100      	bne.n	5566 <__aeabi_dadd+0x45e>
    5564:	e0ac      	b.n	56c0 <__aeabi_dadd+0x5b8>
    5566:	2240      	movs	r2, #64	; 0x40
    5568:	1a12      	subs	r2, r2, r0
    556a:	4093      	lsls	r3, r2
    556c:	465a      	mov	r2, fp
    556e:	431a      	orrs	r2, r3
    5570:	1e53      	subs	r3, r2, #1
    5572:	419a      	sbcs	r2, r3
    5574:	464b      	mov	r3, r9
    5576:	431a      	orrs	r2, r3
    5578:	2300      	movs	r3, #0
    557a:	e6b6      	b.n	52ea <__aeabi_dadd+0x1e2>
    557c:	4d71      	ldr	r5, [pc, #452]	; (5744 <__aeabi_dadd+0x63c>)
    557e:	45aa      	cmp	sl, r5
    5580:	d000      	beq.n	5584 <__aeabi_dadd+0x47c>
    5582:	e76f      	b.n	5464 <__aeabi_dadd+0x35c>
    5584:	1c19      	adds	r1, r3, #0
    5586:	465c      	mov	r4, fp
    5588:	4655      	mov	r5, sl
    558a:	4666      	mov	r6, ip
    558c:	e5e5      	b.n	515a <__aeabi_dadd+0x52>
    558e:	2d00      	cmp	r5, #0
    5590:	d122      	bne.n	55d8 <__aeabi_dadd+0x4d0>
    5592:	1c0d      	adds	r5, r1, #0
    5594:	4325      	orrs	r5, r4
    5596:	d077      	beq.n	5688 <__aeabi_dadd+0x580>
    5598:	43d5      	mvns	r5, r2
    559a:	2d00      	cmp	r5, #0
    559c:	d171      	bne.n	5682 <__aeabi_dadd+0x57a>
    559e:	445c      	add	r4, fp
    55a0:	455c      	cmp	r4, fp
    55a2:	4192      	sbcs	r2, r2
    55a4:	1859      	adds	r1, r3, r1
    55a6:	4252      	negs	r2, r2
    55a8:	1889      	adds	r1, r1, r2
    55aa:	4655      	mov	r5, sl
    55ac:	e6a4      	b.n	52f8 <__aeabi_dadd+0x1f0>
    55ae:	2800      	cmp	r0, #0
    55b0:	d14d      	bne.n	564e <__aeabi_dadd+0x546>
    55b2:	4659      	mov	r1, fp
    55b4:	4319      	orrs	r1, r3
    55b6:	d100      	bne.n	55ba <__aeabi_dadd+0x4b2>
    55b8:	e094      	b.n	56e4 <__aeabi_dadd+0x5dc>
    55ba:	1c19      	adds	r1, r3, #0
    55bc:	465c      	mov	r4, fp
    55be:	4666      	mov	r6, ip
    55c0:	4d60      	ldr	r5, [pc, #384]	; (5744 <__aeabi_dadd+0x63c>)
    55c2:	e5ca      	b.n	515a <__aeabi_dadd+0x52>
    55c4:	430c      	orrs	r4, r1
    55c6:	1e61      	subs	r1, r4, #1
    55c8:	418c      	sbcs	r4, r1
    55ca:	b2e4      	uxtb	r4, r4
    55cc:	2100      	movs	r1, #0
    55ce:	e75b      	b.n	5488 <__aeabi_dadd+0x380>
    55d0:	1c05      	adds	r5, r0, #0
    55d2:	2100      	movs	r1, #0
    55d4:	2400      	movs	r4, #0
    55d6:	e652      	b.n	527e <__aeabi_dadd+0x176>
    55d8:	4d5a      	ldr	r5, [pc, #360]	; (5744 <__aeabi_dadd+0x63c>)
    55da:	45aa      	cmp	sl, r5
    55dc:	d054      	beq.n	5688 <__aeabi_dadd+0x580>
    55de:	4255      	negs	r5, r2
    55e0:	2280      	movs	r2, #128	; 0x80
    55e2:	0410      	lsls	r0, r2, #16
    55e4:	4301      	orrs	r1, r0
    55e6:	2d38      	cmp	r5, #56	; 0x38
    55e8:	dd00      	ble.n	55ec <__aeabi_dadd+0x4e4>
    55ea:	e081      	b.n	56f0 <__aeabi_dadd+0x5e8>
    55ec:	2d1f      	cmp	r5, #31
    55ee:	dd00      	ble.n	55f2 <__aeabi_dadd+0x4ea>
    55f0:	e092      	b.n	5718 <__aeabi_dadd+0x610>
    55f2:	2220      	movs	r2, #32
    55f4:	1b50      	subs	r0, r2, r5
    55f6:	1c0a      	adds	r2, r1, #0
    55f8:	4684      	mov	ip, r0
    55fa:	4082      	lsls	r2, r0
    55fc:	1c20      	adds	r0, r4, #0
    55fe:	40e8      	lsrs	r0, r5
    5600:	4302      	orrs	r2, r0
    5602:	4690      	mov	r8, r2
    5604:	4662      	mov	r2, ip
    5606:	4094      	lsls	r4, r2
    5608:	1e60      	subs	r0, r4, #1
    560a:	4184      	sbcs	r4, r0
    560c:	4642      	mov	r2, r8
    560e:	4314      	orrs	r4, r2
    5610:	40e9      	lsrs	r1, r5
    5612:	445c      	add	r4, fp
    5614:	455c      	cmp	r4, fp
    5616:	4192      	sbcs	r2, r2
    5618:	18cb      	adds	r3, r1, r3
    561a:	4252      	negs	r2, r2
    561c:	1899      	adds	r1, r3, r2
    561e:	4655      	mov	r5, sl
    5620:	e66a      	b.n	52f8 <__aeabi_dadd+0x1f0>
    5622:	4658      	mov	r0, fp
    5624:	4318      	orrs	r0, r3
    5626:	d100      	bne.n	562a <__aeabi_dadd+0x522>
    5628:	e597      	b.n	515a <__aeabi_dadd+0x52>
    562a:	4658      	mov	r0, fp
    562c:	1a27      	subs	r7, r4, r0
    562e:	42bc      	cmp	r4, r7
    5630:	4192      	sbcs	r2, r2
    5632:	1ac8      	subs	r0, r1, r3
    5634:	4252      	negs	r2, r2
    5636:	1a80      	subs	r0, r0, r2
    5638:	0202      	lsls	r2, r0, #8
    563a:	d566      	bpl.n	570a <__aeabi_dadd+0x602>
    563c:	4658      	mov	r0, fp
    563e:	1b04      	subs	r4, r0, r4
    5640:	45a3      	cmp	fp, r4
    5642:	4192      	sbcs	r2, r2
    5644:	1a59      	subs	r1, r3, r1
    5646:	4252      	negs	r2, r2
    5648:	1a89      	subs	r1, r1, r2
    564a:	4666      	mov	r6, ip
    564c:	e585      	b.n	515a <__aeabi_dadd+0x52>
    564e:	4658      	mov	r0, fp
    5650:	4318      	orrs	r0, r3
    5652:	d033      	beq.n	56bc <__aeabi_dadd+0x5b4>
    5654:	0748      	lsls	r0, r1, #29
    5656:	08e4      	lsrs	r4, r4, #3
    5658:	4304      	orrs	r4, r0
    565a:	2080      	movs	r0, #128	; 0x80
    565c:	08c9      	lsrs	r1, r1, #3
    565e:	0300      	lsls	r0, r0, #12
    5660:	4201      	tst	r1, r0
    5662:	d008      	beq.n	5676 <__aeabi_dadd+0x56e>
    5664:	08dd      	lsrs	r5, r3, #3
    5666:	4205      	tst	r5, r0
    5668:	d105      	bne.n	5676 <__aeabi_dadd+0x56e>
    566a:	4659      	mov	r1, fp
    566c:	08ca      	lsrs	r2, r1, #3
    566e:	075c      	lsls	r4, r3, #29
    5670:	4314      	orrs	r4, r2
    5672:	1c29      	adds	r1, r5, #0
    5674:	4666      	mov	r6, ip
    5676:	0f63      	lsrs	r3, r4, #29
    5678:	00c9      	lsls	r1, r1, #3
    567a:	4319      	orrs	r1, r3
    567c:	00e4      	lsls	r4, r4, #3
    567e:	4d31      	ldr	r5, [pc, #196]	; (5744 <__aeabi_dadd+0x63c>)
    5680:	e56b      	b.n	515a <__aeabi_dadd+0x52>
    5682:	4a30      	ldr	r2, [pc, #192]	; (5744 <__aeabi_dadd+0x63c>)
    5684:	4592      	cmp	sl, r2
    5686:	d1ae      	bne.n	55e6 <__aeabi_dadd+0x4de>
    5688:	1c19      	adds	r1, r3, #0
    568a:	465c      	mov	r4, fp
    568c:	4655      	mov	r5, sl
    568e:	e564      	b.n	515a <__aeabi_dadd+0x52>
    5690:	2800      	cmp	r0, #0
    5692:	d036      	beq.n	5702 <__aeabi_dadd+0x5fa>
    5694:	4658      	mov	r0, fp
    5696:	4318      	orrs	r0, r3
    5698:	d010      	beq.n	56bc <__aeabi_dadd+0x5b4>
    569a:	2580      	movs	r5, #128	; 0x80
    569c:	0748      	lsls	r0, r1, #29
    569e:	08e4      	lsrs	r4, r4, #3
    56a0:	08c9      	lsrs	r1, r1, #3
    56a2:	032d      	lsls	r5, r5, #12
    56a4:	4304      	orrs	r4, r0
    56a6:	4229      	tst	r1, r5
    56a8:	d0e5      	beq.n	5676 <__aeabi_dadd+0x56e>
    56aa:	08d8      	lsrs	r0, r3, #3
    56ac:	4228      	tst	r0, r5
    56ae:	d1e2      	bne.n	5676 <__aeabi_dadd+0x56e>
    56b0:	465d      	mov	r5, fp
    56b2:	08ea      	lsrs	r2, r5, #3
    56b4:	075c      	lsls	r4, r3, #29
    56b6:	4314      	orrs	r4, r2
    56b8:	1c01      	adds	r1, r0, #0
    56ba:	e7dc      	b.n	5676 <__aeabi_dadd+0x56e>
    56bc:	4d21      	ldr	r5, [pc, #132]	; (5744 <__aeabi_dadd+0x63c>)
    56be:	e54c      	b.n	515a <__aeabi_dadd+0x52>
    56c0:	2300      	movs	r3, #0
    56c2:	e753      	b.n	556c <__aeabi_dadd+0x464>
    56c4:	1c3d      	adds	r5, r7, #0
    56c6:	3d20      	subs	r5, #32
    56c8:	1c0a      	adds	r2, r1, #0
    56ca:	40ea      	lsrs	r2, r5
    56cc:	1c15      	adds	r5, r2, #0
    56ce:	2f20      	cmp	r7, #32
    56d0:	d034      	beq.n	573c <__aeabi_dadd+0x634>
    56d2:	2640      	movs	r6, #64	; 0x40
    56d4:	1bf7      	subs	r7, r6, r7
    56d6:	40b9      	lsls	r1, r7
    56d8:	430c      	orrs	r4, r1
    56da:	1e61      	subs	r1, r4, #1
    56dc:	418c      	sbcs	r4, r1
    56de:	432c      	orrs	r4, r5
    56e0:	2100      	movs	r1, #0
    56e2:	e6d1      	b.n	5488 <__aeabi_dadd+0x380>
    56e4:	2180      	movs	r1, #128	; 0x80
    56e6:	2700      	movs	r7, #0
    56e8:	03c9      	lsls	r1, r1, #15
    56ea:	4d16      	ldr	r5, [pc, #88]	; (5744 <__aeabi_dadd+0x63c>)
    56ec:	2400      	movs	r4, #0
    56ee:	e5c6      	b.n	527e <__aeabi_dadd+0x176>
    56f0:	430c      	orrs	r4, r1
    56f2:	1e61      	subs	r1, r4, #1
    56f4:	418c      	sbcs	r4, r1
    56f6:	b2e4      	uxtb	r4, r4
    56f8:	2100      	movs	r1, #0
    56fa:	e78a      	b.n	5612 <__aeabi_dadd+0x50a>
    56fc:	1c19      	adds	r1, r3, #0
    56fe:	465c      	mov	r4, fp
    5700:	e52b      	b.n	515a <__aeabi_dadd+0x52>
    5702:	1c19      	adds	r1, r3, #0
    5704:	465c      	mov	r4, fp
    5706:	4d0f      	ldr	r5, [pc, #60]	; (5744 <__aeabi_dadd+0x63c>)
    5708:	e527      	b.n	515a <__aeabi_dadd+0x52>
    570a:	1c03      	adds	r3, r0, #0
    570c:	433b      	orrs	r3, r7
    570e:	d100      	bne.n	5712 <__aeabi_dadd+0x60a>
    5710:	e71c      	b.n	554c <__aeabi_dadd+0x444>
    5712:	1c01      	adds	r1, r0, #0
    5714:	1c3c      	adds	r4, r7, #0
    5716:	e520      	b.n	515a <__aeabi_dadd+0x52>
    5718:	2020      	movs	r0, #32
    571a:	4240      	negs	r0, r0
    571c:	1940      	adds	r0, r0, r5
    571e:	1c0a      	adds	r2, r1, #0
    5720:	40c2      	lsrs	r2, r0
    5722:	4690      	mov	r8, r2
    5724:	2d20      	cmp	r5, #32
    5726:	d00b      	beq.n	5740 <__aeabi_dadd+0x638>
    5728:	2040      	movs	r0, #64	; 0x40
    572a:	1b45      	subs	r5, r0, r5
    572c:	40a9      	lsls	r1, r5
    572e:	430c      	orrs	r4, r1
    5730:	1e61      	subs	r1, r4, #1
    5732:	418c      	sbcs	r4, r1
    5734:	4645      	mov	r5, r8
    5736:	432c      	orrs	r4, r5
    5738:	2100      	movs	r1, #0
    573a:	e76a      	b.n	5612 <__aeabi_dadd+0x50a>
    573c:	2100      	movs	r1, #0
    573e:	e7cb      	b.n	56d8 <__aeabi_dadd+0x5d0>
    5740:	2100      	movs	r1, #0
    5742:	e7f4      	b.n	572e <__aeabi_dadd+0x626>
    5744:	000007ff 	.word	0x000007ff
    5748:	ff7fffff 	.word	0xff7fffff

0000574c <__aeabi_ddiv>:
    574c:	b5f0      	push	{r4, r5, r6, r7, lr}
    574e:	4656      	mov	r6, sl
    5750:	4644      	mov	r4, r8
    5752:	465f      	mov	r7, fp
    5754:	464d      	mov	r5, r9
    5756:	b4f0      	push	{r4, r5, r6, r7}
    5758:	1c1f      	adds	r7, r3, #0
    575a:	030b      	lsls	r3, r1, #12
    575c:	0b1b      	lsrs	r3, r3, #12
    575e:	4698      	mov	r8, r3
    5760:	004b      	lsls	r3, r1, #1
    5762:	b087      	sub	sp, #28
    5764:	1c04      	adds	r4, r0, #0
    5766:	4681      	mov	r9, r0
    5768:	0d5b      	lsrs	r3, r3, #21
    576a:	0fc8      	lsrs	r0, r1, #31
    576c:	1c16      	adds	r6, r2, #0
    576e:	469a      	mov	sl, r3
    5770:	9000      	str	r0, [sp, #0]
    5772:	2b00      	cmp	r3, #0
    5774:	d051      	beq.n	581a <__aeabi_ddiv+0xce>
    5776:	4b6a      	ldr	r3, [pc, #424]	; (5920 <__aeabi_ddiv+0x1d4>)
    5778:	459a      	cmp	sl, r3
    577a:	d031      	beq.n	57e0 <__aeabi_ddiv+0x94>
    577c:	2280      	movs	r2, #128	; 0x80
    577e:	4641      	mov	r1, r8
    5780:	0352      	lsls	r2, r2, #13
    5782:	430a      	orrs	r2, r1
    5784:	0f63      	lsrs	r3, r4, #29
    5786:	00d2      	lsls	r2, r2, #3
    5788:	431a      	orrs	r2, r3
    578a:	4b66      	ldr	r3, [pc, #408]	; (5924 <__aeabi_ddiv+0x1d8>)
    578c:	4690      	mov	r8, r2
    578e:	2500      	movs	r5, #0
    5790:	00e2      	lsls	r2, r4, #3
    5792:	4691      	mov	r9, r2
    5794:	449a      	add	sl, r3
    5796:	2400      	movs	r4, #0
    5798:	9502      	str	r5, [sp, #8]
    579a:	033b      	lsls	r3, r7, #12
    579c:	0b1b      	lsrs	r3, r3, #12
    579e:	469b      	mov	fp, r3
    57a0:	0ffd      	lsrs	r5, r7, #31
    57a2:	007b      	lsls	r3, r7, #1
    57a4:	1c31      	adds	r1, r6, #0
    57a6:	0d5b      	lsrs	r3, r3, #21
    57a8:	9501      	str	r5, [sp, #4]
    57aa:	d060      	beq.n	586e <__aeabi_ddiv+0x122>
    57ac:	4a5c      	ldr	r2, [pc, #368]	; (5920 <__aeabi_ddiv+0x1d4>)
    57ae:	4293      	cmp	r3, r2
    57b0:	d054      	beq.n	585c <__aeabi_ddiv+0x110>
    57b2:	2180      	movs	r1, #128	; 0x80
    57b4:	4658      	mov	r0, fp
    57b6:	0349      	lsls	r1, r1, #13
    57b8:	4301      	orrs	r1, r0
    57ba:	0f72      	lsrs	r2, r6, #29
    57bc:	00c9      	lsls	r1, r1, #3
    57be:	4311      	orrs	r1, r2
    57c0:	4a58      	ldr	r2, [pc, #352]	; (5924 <__aeabi_ddiv+0x1d8>)
    57c2:	468b      	mov	fp, r1
    57c4:	189b      	adds	r3, r3, r2
    57c6:	00f1      	lsls	r1, r6, #3
    57c8:	2000      	movs	r0, #0
    57ca:	9a00      	ldr	r2, [sp, #0]
    57cc:	4304      	orrs	r4, r0
    57ce:	406a      	eors	r2, r5
    57d0:	9203      	str	r2, [sp, #12]
    57d2:	2c0f      	cmp	r4, #15
    57d4:	d900      	bls.n	57d8 <__aeabi_ddiv+0x8c>
    57d6:	e0ad      	b.n	5934 <__aeabi_ddiv+0x1e8>
    57d8:	4e53      	ldr	r6, [pc, #332]	; (5928 <__aeabi_ddiv+0x1dc>)
    57da:	00a4      	lsls	r4, r4, #2
    57dc:	5934      	ldr	r4, [r6, r4]
    57de:	46a7      	mov	pc, r4
    57e0:	4640      	mov	r0, r8
    57e2:	4304      	orrs	r4, r0
    57e4:	d16e      	bne.n	58c4 <__aeabi_ddiv+0x178>
    57e6:	2100      	movs	r1, #0
    57e8:	2502      	movs	r5, #2
    57ea:	2408      	movs	r4, #8
    57ec:	4688      	mov	r8, r1
    57ee:	4689      	mov	r9, r1
    57f0:	9502      	str	r5, [sp, #8]
    57f2:	e7d2      	b.n	579a <__aeabi_ddiv+0x4e>
    57f4:	9c00      	ldr	r4, [sp, #0]
    57f6:	9802      	ldr	r0, [sp, #8]
    57f8:	46c3      	mov	fp, r8
    57fa:	4649      	mov	r1, r9
    57fc:	9401      	str	r4, [sp, #4]
    57fe:	2802      	cmp	r0, #2
    5800:	d064      	beq.n	58cc <__aeabi_ddiv+0x180>
    5802:	2803      	cmp	r0, #3
    5804:	d100      	bne.n	5808 <__aeabi_ddiv+0xbc>
    5806:	e2ab      	b.n	5d60 <__aeabi_ddiv+0x614>
    5808:	2801      	cmp	r0, #1
    580a:	d000      	beq.n	580e <__aeabi_ddiv+0xc2>
    580c:	e238      	b.n	5c80 <__aeabi_ddiv+0x534>
    580e:	9a01      	ldr	r2, [sp, #4]
    5810:	2400      	movs	r4, #0
    5812:	4002      	ands	r2, r0
    5814:	2500      	movs	r5, #0
    5816:	46a1      	mov	r9, r4
    5818:	e060      	b.n	58dc <__aeabi_ddiv+0x190>
    581a:	4643      	mov	r3, r8
    581c:	4323      	orrs	r3, r4
    581e:	d04a      	beq.n	58b6 <__aeabi_ddiv+0x16a>
    5820:	4640      	mov	r0, r8
    5822:	2800      	cmp	r0, #0
    5824:	d100      	bne.n	5828 <__aeabi_ddiv+0xdc>
    5826:	e1c0      	b.n	5baa <__aeabi_ddiv+0x45e>
    5828:	f001 f93c 	bl	6aa4 <__clzsi2>
    582c:	1e03      	subs	r3, r0, #0
    582e:	2b27      	cmp	r3, #39	; 0x27
    5830:	dd00      	ble.n	5834 <__aeabi_ddiv+0xe8>
    5832:	e1b3      	b.n	5b9c <__aeabi_ddiv+0x450>
    5834:	2128      	movs	r1, #40	; 0x28
    5836:	1a0d      	subs	r5, r1, r0
    5838:	1c21      	adds	r1, r4, #0
    583a:	3b08      	subs	r3, #8
    583c:	4642      	mov	r2, r8
    583e:	40e9      	lsrs	r1, r5
    5840:	409a      	lsls	r2, r3
    5842:	1c0d      	adds	r5, r1, #0
    5844:	4315      	orrs	r5, r2
    5846:	1c22      	adds	r2, r4, #0
    5848:	409a      	lsls	r2, r3
    584a:	46a8      	mov	r8, r5
    584c:	4691      	mov	r9, r2
    584e:	4b37      	ldr	r3, [pc, #220]	; (592c <__aeabi_ddiv+0x1e0>)
    5850:	2500      	movs	r5, #0
    5852:	1a1b      	subs	r3, r3, r0
    5854:	469a      	mov	sl, r3
    5856:	2400      	movs	r4, #0
    5858:	9502      	str	r5, [sp, #8]
    585a:	e79e      	b.n	579a <__aeabi_ddiv+0x4e>
    585c:	465a      	mov	r2, fp
    585e:	4316      	orrs	r6, r2
    5860:	2003      	movs	r0, #3
    5862:	2e00      	cmp	r6, #0
    5864:	d1b1      	bne.n	57ca <__aeabi_ddiv+0x7e>
    5866:	46b3      	mov	fp, r6
    5868:	2100      	movs	r1, #0
    586a:	2002      	movs	r0, #2
    586c:	e7ad      	b.n	57ca <__aeabi_ddiv+0x7e>
    586e:	465a      	mov	r2, fp
    5870:	4332      	orrs	r2, r6
    5872:	d01b      	beq.n	58ac <__aeabi_ddiv+0x160>
    5874:	465b      	mov	r3, fp
    5876:	2b00      	cmp	r3, #0
    5878:	d100      	bne.n	587c <__aeabi_ddiv+0x130>
    587a:	e18a      	b.n	5b92 <__aeabi_ddiv+0x446>
    587c:	4658      	mov	r0, fp
    587e:	f001 f911 	bl	6aa4 <__clzsi2>
    5882:	2827      	cmp	r0, #39	; 0x27
    5884:	dd00      	ble.n	5888 <__aeabi_ddiv+0x13c>
    5886:	e17d      	b.n	5b84 <__aeabi_ddiv+0x438>
    5888:	2228      	movs	r2, #40	; 0x28
    588a:	1a17      	subs	r7, r2, r0
    588c:	1c01      	adds	r1, r0, #0
    588e:	1c32      	adds	r2, r6, #0
    5890:	3908      	subs	r1, #8
    5892:	465b      	mov	r3, fp
    5894:	40fa      	lsrs	r2, r7
    5896:	408b      	lsls	r3, r1
    5898:	1c17      	adds	r7, r2, #0
    589a:	431f      	orrs	r7, r3
    589c:	1c33      	adds	r3, r6, #0
    589e:	408b      	lsls	r3, r1
    58a0:	46bb      	mov	fp, r7
    58a2:	1c19      	adds	r1, r3, #0
    58a4:	4b21      	ldr	r3, [pc, #132]	; (592c <__aeabi_ddiv+0x1e0>)
    58a6:	1a1b      	subs	r3, r3, r0
    58a8:	2000      	movs	r0, #0
    58aa:	e78e      	b.n	57ca <__aeabi_ddiv+0x7e>
    58ac:	2700      	movs	r7, #0
    58ae:	46bb      	mov	fp, r7
    58b0:	2100      	movs	r1, #0
    58b2:	2001      	movs	r0, #1
    58b4:	e789      	b.n	57ca <__aeabi_ddiv+0x7e>
    58b6:	2000      	movs	r0, #0
    58b8:	2501      	movs	r5, #1
    58ba:	2404      	movs	r4, #4
    58bc:	4680      	mov	r8, r0
    58be:	4681      	mov	r9, r0
    58c0:	9502      	str	r5, [sp, #8]
    58c2:	e76a      	b.n	579a <__aeabi_ddiv+0x4e>
    58c4:	2503      	movs	r5, #3
    58c6:	240c      	movs	r4, #12
    58c8:	9502      	str	r5, [sp, #8]
    58ca:	e766      	b.n	579a <__aeabi_ddiv+0x4e>
    58cc:	9c01      	ldr	r4, [sp, #4]
    58ce:	9403      	str	r4, [sp, #12]
    58d0:	9d03      	ldr	r5, [sp, #12]
    58d2:	2201      	movs	r2, #1
    58d4:	402a      	ands	r2, r5
    58d6:	2400      	movs	r4, #0
    58d8:	4d11      	ldr	r5, [pc, #68]	; (5920 <__aeabi_ddiv+0x1d4>)
    58da:	46a1      	mov	r9, r4
    58dc:	2000      	movs	r0, #0
    58de:	2100      	movs	r1, #0
    58e0:	0324      	lsls	r4, r4, #12
    58e2:	0b26      	lsrs	r6, r4, #12
    58e4:	0d0c      	lsrs	r4, r1, #20
    58e6:	0524      	lsls	r4, r4, #20
    58e8:	4b11      	ldr	r3, [pc, #68]	; (5930 <__aeabi_ddiv+0x1e4>)
    58ea:	4334      	orrs	r4, r6
    58ec:	052d      	lsls	r5, r5, #20
    58ee:	4023      	ands	r3, r4
    58f0:	432b      	orrs	r3, r5
    58f2:	005b      	lsls	r3, r3, #1
    58f4:	085b      	lsrs	r3, r3, #1
    58f6:	07d2      	lsls	r2, r2, #31
    58f8:	1c19      	adds	r1, r3, #0
    58fa:	4648      	mov	r0, r9
    58fc:	4311      	orrs	r1, r2
    58fe:	b007      	add	sp, #28
    5900:	bc3c      	pop	{r2, r3, r4, r5}
    5902:	4690      	mov	r8, r2
    5904:	4699      	mov	r9, r3
    5906:	46a2      	mov	sl, r4
    5908:	46ab      	mov	fp, r5
    590a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    590c:	2200      	movs	r2, #0
    590e:	2480      	movs	r4, #128	; 0x80
    5910:	0324      	lsls	r4, r4, #12
    5912:	4691      	mov	r9, r2
    5914:	4d02      	ldr	r5, [pc, #8]	; (5920 <__aeabi_ddiv+0x1d4>)
    5916:	e7e1      	b.n	58dc <__aeabi_ddiv+0x190>
    5918:	2400      	movs	r4, #0
    591a:	2500      	movs	r5, #0
    591c:	46a1      	mov	r9, r4
    591e:	e7dd      	b.n	58dc <__aeabi_ddiv+0x190>
    5920:	000007ff 	.word	0x000007ff
    5924:	fffffc01 	.word	0xfffffc01
    5928:	00007f74 	.word	0x00007f74
    592c:	fffffc0d 	.word	0xfffffc0d
    5930:	800fffff 	.word	0x800fffff
    5934:	4655      	mov	r5, sl
    5936:	1aed      	subs	r5, r5, r3
    5938:	9504      	str	r5, [sp, #16]
    593a:	45d8      	cmp	r8, fp
    593c:	d900      	bls.n	5940 <__aeabi_ddiv+0x1f4>
    593e:	e153      	b.n	5be8 <__aeabi_ddiv+0x49c>
    5940:	d100      	bne.n	5944 <__aeabi_ddiv+0x1f8>
    5942:	e14e      	b.n	5be2 <__aeabi_ddiv+0x496>
    5944:	9c04      	ldr	r4, [sp, #16]
    5946:	2500      	movs	r5, #0
    5948:	3c01      	subs	r4, #1
    594a:	464e      	mov	r6, r9
    594c:	9404      	str	r4, [sp, #16]
    594e:	4647      	mov	r7, r8
    5950:	46a9      	mov	r9, r5
    5952:	4658      	mov	r0, fp
    5954:	0203      	lsls	r3, r0, #8
    5956:	0e0c      	lsrs	r4, r1, #24
    5958:	431c      	orrs	r4, r3
    595a:	0209      	lsls	r1, r1, #8
    595c:	0c25      	lsrs	r5, r4, #16
    595e:	0423      	lsls	r3, r4, #16
    5960:	0c1b      	lsrs	r3, r3, #16
    5962:	9100      	str	r1, [sp, #0]
    5964:	1c38      	adds	r0, r7, #0
    5966:	1c29      	adds	r1, r5, #0
    5968:	9301      	str	r3, [sp, #4]
    596a:	f7ff faeb 	bl	4f44 <__aeabi_uidiv>
    596e:	9901      	ldr	r1, [sp, #4]
    5970:	4683      	mov	fp, r0
    5972:	4341      	muls	r1, r0
    5974:	1c38      	adds	r0, r7, #0
    5976:	468a      	mov	sl, r1
    5978:	1c29      	adds	r1, r5, #0
    597a:	f7ff fb27 	bl	4fcc <__aeabi_uidivmod>
    597e:	0c33      	lsrs	r3, r6, #16
    5980:	0409      	lsls	r1, r1, #16
    5982:	4319      	orrs	r1, r3
    5984:	458a      	cmp	sl, r1
    5986:	d90c      	bls.n	59a2 <__aeabi_ddiv+0x256>
    5988:	465b      	mov	r3, fp
    598a:	1909      	adds	r1, r1, r4
    598c:	3b01      	subs	r3, #1
    598e:	428c      	cmp	r4, r1
    5990:	d900      	bls.n	5994 <__aeabi_ddiv+0x248>
    5992:	e147      	b.n	5c24 <__aeabi_ddiv+0x4d8>
    5994:	458a      	cmp	sl, r1
    5996:	d800      	bhi.n	599a <__aeabi_ddiv+0x24e>
    5998:	e144      	b.n	5c24 <__aeabi_ddiv+0x4d8>
    599a:	2202      	movs	r2, #2
    599c:	4252      	negs	r2, r2
    599e:	4493      	add	fp, r2
    59a0:	1909      	adds	r1, r1, r4
    59a2:	4653      	mov	r3, sl
    59a4:	1acb      	subs	r3, r1, r3
    59a6:	1c18      	adds	r0, r3, #0
    59a8:	1c29      	adds	r1, r5, #0
    59aa:	4698      	mov	r8, r3
    59ac:	f7ff faca 	bl	4f44 <__aeabi_uidiv>
    59b0:	1c07      	adds	r7, r0, #0
    59b2:	9801      	ldr	r0, [sp, #4]
    59b4:	1c29      	adds	r1, r5, #0
    59b6:	4378      	muls	r0, r7
    59b8:	4682      	mov	sl, r0
    59ba:	4640      	mov	r0, r8
    59bc:	f7ff fb06 	bl	4fcc <__aeabi_uidivmod>
    59c0:	0436      	lsls	r6, r6, #16
    59c2:	040b      	lsls	r3, r1, #16
    59c4:	0c36      	lsrs	r6, r6, #16
    59c6:	4333      	orrs	r3, r6
    59c8:	459a      	cmp	sl, r3
    59ca:	d909      	bls.n	59e0 <__aeabi_ddiv+0x294>
    59cc:	191b      	adds	r3, r3, r4
    59ce:	1e7a      	subs	r2, r7, #1
    59d0:	429c      	cmp	r4, r3
    59d2:	d900      	bls.n	59d6 <__aeabi_ddiv+0x28a>
    59d4:	e124      	b.n	5c20 <__aeabi_ddiv+0x4d4>
    59d6:	459a      	cmp	sl, r3
    59d8:	d800      	bhi.n	59dc <__aeabi_ddiv+0x290>
    59da:	e121      	b.n	5c20 <__aeabi_ddiv+0x4d4>
    59dc:	3f02      	subs	r7, #2
    59de:	191b      	adds	r3, r3, r4
    59e0:	465e      	mov	r6, fp
    59e2:	0432      	lsls	r2, r6, #16
    59e4:	4317      	orrs	r7, r2
    59e6:	0c38      	lsrs	r0, r7, #16
    59e8:	46bb      	mov	fp, r7
    59ea:	9e00      	ldr	r6, [sp, #0]
    59ec:	9f00      	ldr	r7, [sp, #0]
    59ee:	4651      	mov	r1, sl
    59f0:	0c3f      	lsrs	r7, r7, #16
    59f2:	0432      	lsls	r2, r6, #16
    59f4:	1a5b      	subs	r3, r3, r1
    59f6:	4659      	mov	r1, fp
    59f8:	46ba      	mov	sl, r7
    59fa:	0c12      	lsrs	r2, r2, #16
    59fc:	040f      	lsls	r7, r1, #16
    59fe:	0c3f      	lsrs	r7, r7, #16
    5a00:	4690      	mov	r8, r2
    5a02:	4651      	mov	r1, sl
    5a04:	437a      	muls	r2, r7
    5a06:	434f      	muls	r7, r1
    5a08:	4641      	mov	r1, r8
    5a0a:	4341      	muls	r1, r0
    5a0c:	4656      	mov	r6, sl
    5a0e:	4370      	muls	r0, r6
    5a10:	19cf      	adds	r7, r1, r7
    5a12:	0c16      	lsrs	r6, r2, #16
    5a14:	19be      	adds	r6, r7, r6
    5a16:	42b1      	cmp	r1, r6
    5a18:	d902      	bls.n	5a20 <__aeabi_ddiv+0x2d4>
    5a1a:	2780      	movs	r7, #128	; 0x80
    5a1c:	027f      	lsls	r7, r7, #9
    5a1e:	19c0      	adds	r0, r0, r7
    5a20:	0c31      	lsrs	r1, r6, #16
    5a22:	0412      	lsls	r2, r2, #16
    5a24:	0436      	lsls	r6, r6, #16
    5a26:	0c12      	lsrs	r2, r2, #16
    5a28:	1840      	adds	r0, r0, r1
    5a2a:	18b6      	adds	r6, r6, r2
    5a2c:	4283      	cmp	r3, r0
    5a2e:	d200      	bcs.n	5a32 <__aeabi_ddiv+0x2e6>
    5a30:	e0c4      	b.n	5bbc <__aeabi_ddiv+0x470>
    5a32:	d100      	bne.n	5a36 <__aeabi_ddiv+0x2ea>
    5a34:	e0be      	b.n	5bb4 <__aeabi_ddiv+0x468>
    5a36:	1a19      	subs	r1, r3, r0
    5a38:	4648      	mov	r0, r9
    5a3a:	1b86      	subs	r6, r0, r6
    5a3c:	45b1      	cmp	r9, r6
    5a3e:	41bf      	sbcs	r7, r7
    5a40:	427f      	negs	r7, r7
    5a42:	1bcf      	subs	r7, r1, r7
    5a44:	42a7      	cmp	r7, r4
    5a46:	d100      	bne.n	5a4a <__aeabi_ddiv+0x2fe>
    5a48:	e113      	b.n	5c72 <__aeabi_ddiv+0x526>
    5a4a:	1c29      	adds	r1, r5, #0
    5a4c:	1c38      	adds	r0, r7, #0
    5a4e:	f7ff fa79 	bl	4f44 <__aeabi_uidiv>
    5a52:	9901      	ldr	r1, [sp, #4]
    5a54:	9002      	str	r0, [sp, #8]
    5a56:	4341      	muls	r1, r0
    5a58:	1c38      	adds	r0, r7, #0
    5a5a:	4689      	mov	r9, r1
    5a5c:	1c29      	adds	r1, r5, #0
    5a5e:	f7ff fab5 	bl	4fcc <__aeabi_uidivmod>
    5a62:	0c33      	lsrs	r3, r6, #16
    5a64:	0409      	lsls	r1, r1, #16
    5a66:	4319      	orrs	r1, r3
    5a68:	4589      	cmp	r9, r1
    5a6a:	d90c      	bls.n	5a86 <__aeabi_ddiv+0x33a>
    5a6c:	9b02      	ldr	r3, [sp, #8]
    5a6e:	1909      	adds	r1, r1, r4
    5a70:	3b01      	subs	r3, #1
    5a72:	428c      	cmp	r4, r1
    5a74:	d900      	bls.n	5a78 <__aeabi_ddiv+0x32c>
    5a76:	e0ff      	b.n	5c78 <__aeabi_ddiv+0x52c>
    5a78:	4589      	cmp	r9, r1
    5a7a:	d800      	bhi.n	5a7e <__aeabi_ddiv+0x332>
    5a7c:	e0fc      	b.n	5c78 <__aeabi_ddiv+0x52c>
    5a7e:	9f02      	ldr	r7, [sp, #8]
    5a80:	1909      	adds	r1, r1, r4
    5a82:	3f02      	subs	r7, #2
    5a84:	9702      	str	r7, [sp, #8]
    5a86:	464f      	mov	r7, r9
    5a88:	1bcf      	subs	r7, r1, r7
    5a8a:	1c38      	adds	r0, r7, #0
    5a8c:	1c29      	adds	r1, r5, #0
    5a8e:	9705      	str	r7, [sp, #20]
    5a90:	f7ff fa58 	bl	4f44 <__aeabi_uidiv>
    5a94:	1c07      	adds	r7, r0, #0
    5a96:	9801      	ldr	r0, [sp, #4]
    5a98:	1c29      	adds	r1, r5, #0
    5a9a:	4378      	muls	r0, r7
    5a9c:	4681      	mov	r9, r0
    5a9e:	9805      	ldr	r0, [sp, #20]
    5aa0:	f7ff fa94 	bl	4fcc <__aeabi_uidivmod>
    5aa4:	0436      	lsls	r6, r6, #16
    5aa6:	0409      	lsls	r1, r1, #16
    5aa8:	0c36      	lsrs	r6, r6, #16
    5aaa:	430e      	orrs	r6, r1
    5aac:	45b1      	cmp	r9, r6
    5aae:	d909      	bls.n	5ac4 <__aeabi_ddiv+0x378>
    5ab0:	1936      	adds	r6, r6, r4
    5ab2:	1e7b      	subs	r3, r7, #1
    5ab4:	42b4      	cmp	r4, r6
    5ab6:	d900      	bls.n	5aba <__aeabi_ddiv+0x36e>
    5ab8:	e0e0      	b.n	5c7c <__aeabi_ddiv+0x530>
    5aba:	45b1      	cmp	r9, r6
    5abc:	d800      	bhi.n	5ac0 <__aeabi_ddiv+0x374>
    5abe:	e0dd      	b.n	5c7c <__aeabi_ddiv+0x530>
    5ac0:	3f02      	subs	r7, #2
    5ac2:	1936      	adds	r6, r6, r4
    5ac4:	9d02      	ldr	r5, [sp, #8]
    5ac6:	4649      	mov	r1, r9
    5ac8:	1a76      	subs	r6, r6, r1
    5aca:	0429      	lsls	r1, r5, #16
    5acc:	4339      	orrs	r1, r7
    5ace:	040b      	lsls	r3, r1, #16
    5ad0:	4657      	mov	r7, sl
    5ad2:	0c0a      	lsrs	r2, r1, #16
    5ad4:	0c1b      	lsrs	r3, r3, #16
    5ad6:	4640      	mov	r0, r8
    5ad8:	4645      	mov	r5, r8
    5ada:	4358      	muls	r0, r3
    5adc:	4355      	muls	r5, r2
    5ade:	437b      	muls	r3, r7
    5ae0:	437a      	muls	r2, r7
    5ae2:	18eb      	adds	r3, r5, r3
    5ae4:	0c07      	lsrs	r7, r0, #16
    5ae6:	19db      	adds	r3, r3, r7
    5ae8:	429d      	cmp	r5, r3
    5aea:	d902      	bls.n	5af2 <__aeabi_ddiv+0x3a6>
    5aec:	2580      	movs	r5, #128	; 0x80
    5aee:	026d      	lsls	r5, r5, #9
    5af0:	1952      	adds	r2, r2, r5
    5af2:	0c1d      	lsrs	r5, r3, #16
    5af4:	0400      	lsls	r0, r0, #16
    5af6:	041b      	lsls	r3, r3, #16
    5af8:	0c00      	lsrs	r0, r0, #16
    5afa:	1952      	adds	r2, r2, r5
    5afc:	181b      	adds	r3, r3, r0
    5afe:	4296      	cmp	r6, r2
    5b00:	d335      	bcc.n	5b6e <__aeabi_ddiv+0x422>
    5b02:	d100      	bne.n	5b06 <__aeabi_ddiv+0x3ba>
    5b04:	e0fc      	b.n	5d00 <__aeabi_ddiv+0x5b4>
    5b06:	2301      	movs	r3, #1
    5b08:	4319      	orrs	r1, r3
    5b0a:	9e04      	ldr	r6, [sp, #16]
    5b0c:	4f99      	ldr	r7, [pc, #612]	; (5d74 <__aeabi_ddiv+0x628>)
    5b0e:	19f5      	adds	r5, r6, r7
    5b10:	2d00      	cmp	r5, #0
    5b12:	dc00      	bgt.n	5b16 <__aeabi_ddiv+0x3ca>
    5b14:	e0a1      	b.n	5c5a <__aeabi_ddiv+0x50e>
    5b16:	0748      	lsls	r0, r1, #29
    5b18:	d009      	beq.n	5b2e <__aeabi_ddiv+0x3e2>
    5b1a:	230f      	movs	r3, #15
    5b1c:	400b      	ands	r3, r1
    5b1e:	2b04      	cmp	r3, #4
    5b20:	d005      	beq.n	5b2e <__aeabi_ddiv+0x3e2>
    5b22:	1d0b      	adds	r3, r1, #4
    5b24:	428b      	cmp	r3, r1
    5b26:	4189      	sbcs	r1, r1
    5b28:	4249      	negs	r1, r1
    5b2a:	448b      	add	fp, r1
    5b2c:	1c19      	adds	r1, r3, #0
    5b2e:	465a      	mov	r2, fp
    5b30:	01d2      	lsls	r2, r2, #7
    5b32:	d507      	bpl.n	5b44 <__aeabi_ddiv+0x3f8>
    5b34:	4b90      	ldr	r3, [pc, #576]	; (5d78 <__aeabi_ddiv+0x62c>)
    5b36:	465c      	mov	r4, fp
    5b38:	9e04      	ldr	r6, [sp, #16]
    5b3a:	2780      	movs	r7, #128	; 0x80
    5b3c:	401c      	ands	r4, r3
    5b3e:	00ff      	lsls	r7, r7, #3
    5b40:	46a3      	mov	fp, r4
    5b42:	19f5      	adds	r5, r6, r7
    5b44:	4b8d      	ldr	r3, [pc, #564]	; (5d7c <__aeabi_ddiv+0x630>)
    5b46:	429d      	cmp	r5, r3
    5b48:	dd7a      	ble.n	5c40 <__aeabi_ddiv+0x4f4>
    5b4a:	9c03      	ldr	r4, [sp, #12]
    5b4c:	2201      	movs	r2, #1
    5b4e:	4022      	ands	r2, r4
    5b50:	2400      	movs	r4, #0
    5b52:	4d8b      	ldr	r5, [pc, #556]	; (5d80 <__aeabi_ddiv+0x634>)
    5b54:	46a1      	mov	r9, r4
    5b56:	e6c1      	b.n	58dc <__aeabi_ddiv+0x190>
    5b58:	2480      	movs	r4, #128	; 0x80
    5b5a:	0324      	lsls	r4, r4, #12
    5b5c:	4647      	mov	r7, r8
    5b5e:	4227      	tst	r7, r4
    5b60:	d14c      	bne.n	5bfc <__aeabi_ddiv+0x4b0>
    5b62:	433c      	orrs	r4, r7
    5b64:	0324      	lsls	r4, r4, #12
    5b66:	0b24      	lsrs	r4, r4, #12
    5b68:	9a00      	ldr	r2, [sp, #0]
    5b6a:	4d85      	ldr	r5, [pc, #532]	; (5d80 <__aeabi_ddiv+0x634>)
    5b6c:	e6b6      	b.n	58dc <__aeabi_ddiv+0x190>
    5b6e:	1936      	adds	r6, r6, r4
    5b70:	1e48      	subs	r0, r1, #1
    5b72:	42b4      	cmp	r4, r6
    5b74:	d95e      	bls.n	5c34 <__aeabi_ddiv+0x4e8>
    5b76:	1c01      	adds	r1, r0, #0
    5b78:	4296      	cmp	r6, r2
    5b7a:	d1c4      	bne.n	5b06 <__aeabi_ddiv+0x3ba>
    5b7c:	9e00      	ldr	r6, [sp, #0]
    5b7e:	429e      	cmp	r6, r3
    5b80:	d1c1      	bne.n	5b06 <__aeabi_ddiv+0x3ba>
    5b82:	e7c2      	b.n	5b0a <__aeabi_ddiv+0x3be>
    5b84:	1c03      	adds	r3, r0, #0
    5b86:	3b28      	subs	r3, #40	; 0x28
    5b88:	1c31      	adds	r1, r6, #0
    5b8a:	4099      	lsls	r1, r3
    5b8c:	468b      	mov	fp, r1
    5b8e:	2100      	movs	r1, #0
    5b90:	e688      	b.n	58a4 <__aeabi_ddiv+0x158>
    5b92:	1c30      	adds	r0, r6, #0
    5b94:	f000 ff86 	bl	6aa4 <__clzsi2>
    5b98:	3020      	adds	r0, #32
    5b9a:	e672      	b.n	5882 <__aeabi_ddiv+0x136>
    5b9c:	3b28      	subs	r3, #40	; 0x28
    5b9e:	1c21      	adds	r1, r4, #0
    5ba0:	4099      	lsls	r1, r3
    5ba2:	2200      	movs	r2, #0
    5ba4:	4688      	mov	r8, r1
    5ba6:	4691      	mov	r9, r2
    5ba8:	e651      	b.n	584e <__aeabi_ddiv+0x102>
    5baa:	1c20      	adds	r0, r4, #0
    5bac:	f000 ff7a 	bl	6aa4 <__clzsi2>
    5bb0:	3020      	adds	r0, #32
    5bb2:	e63b      	b.n	582c <__aeabi_ddiv+0xe0>
    5bb4:	2100      	movs	r1, #0
    5bb6:	45b1      	cmp	r9, r6
    5bb8:	d300      	bcc.n	5bbc <__aeabi_ddiv+0x470>
    5bba:	e73d      	b.n	5a38 <__aeabi_ddiv+0x2ec>
    5bbc:	9f00      	ldr	r7, [sp, #0]
    5bbe:	465a      	mov	r2, fp
    5bc0:	44b9      	add	r9, r7
    5bc2:	45b9      	cmp	r9, r7
    5bc4:	41bf      	sbcs	r7, r7
    5bc6:	427f      	negs	r7, r7
    5bc8:	193f      	adds	r7, r7, r4
    5bca:	18fb      	adds	r3, r7, r3
    5bcc:	3a01      	subs	r2, #1
    5bce:	429c      	cmp	r4, r3
    5bd0:	d21e      	bcs.n	5c10 <__aeabi_ddiv+0x4c4>
    5bd2:	4298      	cmp	r0, r3
    5bd4:	d900      	bls.n	5bd8 <__aeabi_ddiv+0x48c>
    5bd6:	e07e      	b.n	5cd6 <__aeabi_ddiv+0x58a>
    5bd8:	d100      	bne.n	5bdc <__aeabi_ddiv+0x490>
    5bda:	e0b5      	b.n	5d48 <__aeabi_ddiv+0x5fc>
    5bdc:	1a19      	subs	r1, r3, r0
    5bde:	4693      	mov	fp, r2
    5be0:	e72a      	b.n	5a38 <__aeabi_ddiv+0x2ec>
    5be2:	4589      	cmp	r9, r1
    5be4:	d800      	bhi.n	5be8 <__aeabi_ddiv+0x49c>
    5be6:	e6ad      	b.n	5944 <__aeabi_ddiv+0x1f8>
    5be8:	4648      	mov	r0, r9
    5bea:	4646      	mov	r6, r8
    5bec:	4642      	mov	r2, r8
    5bee:	0877      	lsrs	r7, r6, #1
    5bf0:	07d3      	lsls	r3, r2, #31
    5bf2:	0846      	lsrs	r6, r0, #1
    5bf4:	07c0      	lsls	r0, r0, #31
    5bf6:	431e      	orrs	r6, r3
    5bf8:	4681      	mov	r9, r0
    5bfa:	e6aa      	b.n	5952 <__aeabi_ddiv+0x206>
    5bfc:	4658      	mov	r0, fp
    5bfe:	4220      	tst	r0, r4
    5c00:	d112      	bne.n	5c28 <__aeabi_ddiv+0x4dc>
    5c02:	4304      	orrs	r4, r0
    5c04:	0324      	lsls	r4, r4, #12
    5c06:	1c2a      	adds	r2, r5, #0
    5c08:	0b24      	lsrs	r4, r4, #12
    5c0a:	4689      	mov	r9, r1
    5c0c:	4d5c      	ldr	r5, [pc, #368]	; (5d80 <__aeabi_ddiv+0x634>)
    5c0e:	e665      	b.n	58dc <__aeabi_ddiv+0x190>
    5c10:	42a3      	cmp	r3, r4
    5c12:	d1e3      	bne.n	5bdc <__aeabi_ddiv+0x490>
    5c14:	9f00      	ldr	r7, [sp, #0]
    5c16:	454f      	cmp	r7, r9
    5c18:	d9db      	bls.n	5bd2 <__aeabi_ddiv+0x486>
    5c1a:	1a21      	subs	r1, r4, r0
    5c1c:	4693      	mov	fp, r2
    5c1e:	e70b      	b.n	5a38 <__aeabi_ddiv+0x2ec>
    5c20:	1c17      	adds	r7, r2, #0
    5c22:	e6dd      	b.n	59e0 <__aeabi_ddiv+0x294>
    5c24:	469b      	mov	fp, r3
    5c26:	e6bc      	b.n	59a2 <__aeabi_ddiv+0x256>
    5c28:	433c      	orrs	r4, r7
    5c2a:	0324      	lsls	r4, r4, #12
    5c2c:	0b24      	lsrs	r4, r4, #12
    5c2e:	9a00      	ldr	r2, [sp, #0]
    5c30:	4d53      	ldr	r5, [pc, #332]	; (5d80 <__aeabi_ddiv+0x634>)
    5c32:	e653      	b.n	58dc <__aeabi_ddiv+0x190>
    5c34:	42b2      	cmp	r2, r6
    5c36:	d859      	bhi.n	5cec <__aeabi_ddiv+0x5a0>
    5c38:	d100      	bne.n	5c3c <__aeabi_ddiv+0x4f0>
    5c3a:	e08a      	b.n	5d52 <__aeabi_ddiv+0x606>
    5c3c:	1c01      	adds	r1, r0, #0
    5c3e:	e762      	b.n	5b06 <__aeabi_ddiv+0x3ba>
    5c40:	465f      	mov	r7, fp
    5c42:	08c9      	lsrs	r1, r1, #3
    5c44:	077b      	lsls	r3, r7, #29
    5c46:	9e03      	ldr	r6, [sp, #12]
    5c48:	430b      	orrs	r3, r1
    5c4a:	027c      	lsls	r4, r7, #9
    5c4c:	056d      	lsls	r5, r5, #21
    5c4e:	2201      	movs	r2, #1
    5c50:	4699      	mov	r9, r3
    5c52:	0b24      	lsrs	r4, r4, #12
    5c54:	0d6d      	lsrs	r5, r5, #21
    5c56:	4032      	ands	r2, r6
    5c58:	e640      	b.n	58dc <__aeabi_ddiv+0x190>
    5c5a:	4b4a      	ldr	r3, [pc, #296]	; (5d84 <__aeabi_ddiv+0x638>)
    5c5c:	9f04      	ldr	r7, [sp, #16]
    5c5e:	1bdb      	subs	r3, r3, r7
    5c60:	2b38      	cmp	r3, #56	; 0x38
    5c62:	dd10      	ble.n	5c86 <__aeabi_ddiv+0x53a>
    5c64:	9c03      	ldr	r4, [sp, #12]
    5c66:	2201      	movs	r2, #1
    5c68:	4022      	ands	r2, r4
    5c6a:	2400      	movs	r4, #0
    5c6c:	2500      	movs	r5, #0
    5c6e:	46a1      	mov	r9, r4
    5c70:	e634      	b.n	58dc <__aeabi_ddiv+0x190>
    5c72:	2101      	movs	r1, #1
    5c74:	4249      	negs	r1, r1
    5c76:	e748      	b.n	5b0a <__aeabi_ddiv+0x3be>
    5c78:	9302      	str	r3, [sp, #8]
    5c7a:	e704      	b.n	5a86 <__aeabi_ddiv+0x33a>
    5c7c:	1c1f      	adds	r7, r3, #0
    5c7e:	e721      	b.n	5ac4 <__aeabi_ddiv+0x378>
    5c80:	9c01      	ldr	r4, [sp, #4]
    5c82:	9403      	str	r4, [sp, #12]
    5c84:	e741      	b.n	5b0a <__aeabi_ddiv+0x3be>
    5c86:	2b1f      	cmp	r3, #31
    5c88:	dc40      	bgt.n	5d0c <__aeabi_ddiv+0x5c0>
    5c8a:	483f      	ldr	r0, [pc, #252]	; (5d88 <__aeabi_ddiv+0x63c>)
    5c8c:	9f04      	ldr	r7, [sp, #16]
    5c8e:	1c0c      	adds	r4, r1, #0
    5c90:	183a      	adds	r2, r7, r0
    5c92:	4658      	mov	r0, fp
    5c94:	4091      	lsls	r1, r2
    5c96:	40dc      	lsrs	r4, r3
    5c98:	4090      	lsls	r0, r2
    5c9a:	4320      	orrs	r0, r4
    5c9c:	1c0a      	adds	r2, r1, #0
    5c9e:	1e51      	subs	r1, r2, #1
    5ca0:	418a      	sbcs	r2, r1
    5ca2:	1c01      	adds	r1, r0, #0
    5ca4:	4311      	orrs	r1, r2
    5ca6:	465a      	mov	r2, fp
    5ca8:	40da      	lsrs	r2, r3
    5caa:	1c13      	adds	r3, r2, #0
    5cac:	0748      	lsls	r0, r1, #29
    5cae:	d009      	beq.n	5cc4 <__aeabi_ddiv+0x578>
    5cb0:	220f      	movs	r2, #15
    5cb2:	400a      	ands	r2, r1
    5cb4:	2a04      	cmp	r2, #4
    5cb6:	d005      	beq.n	5cc4 <__aeabi_ddiv+0x578>
    5cb8:	1d0a      	adds	r2, r1, #4
    5cba:	428a      	cmp	r2, r1
    5cbc:	4189      	sbcs	r1, r1
    5cbe:	4249      	negs	r1, r1
    5cc0:	185b      	adds	r3, r3, r1
    5cc2:	1c11      	adds	r1, r2, #0
    5cc4:	021a      	lsls	r2, r3, #8
    5cc6:	d534      	bpl.n	5d32 <__aeabi_ddiv+0x5e6>
    5cc8:	9c03      	ldr	r4, [sp, #12]
    5cca:	2201      	movs	r2, #1
    5ccc:	4022      	ands	r2, r4
    5cce:	2400      	movs	r4, #0
    5cd0:	2501      	movs	r5, #1
    5cd2:	46a1      	mov	r9, r4
    5cd4:	e602      	b.n	58dc <__aeabi_ddiv+0x190>
    5cd6:	9f00      	ldr	r7, [sp, #0]
    5cd8:	2102      	movs	r1, #2
    5cda:	4249      	negs	r1, r1
    5cdc:	44b9      	add	r9, r7
    5cde:	448b      	add	fp, r1
    5ce0:	45b9      	cmp	r9, r7
    5ce2:	4189      	sbcs	r1, r1
    5ce4:	4249      	negs	r1, r1
    5ce6:	1909      	adds	r1, r1, r4
    5ce8:	18cb      	adds	r3, r1, r3
    5cea:	e6a4      	b.n	5a36 <__aeabi_ddiv+0x2ea>
    5cec:	9d00      	ldr	r5, [sp, #0]
    5cee:	1e88      	subs	r0, r1, #2
    5cf0:	0069      	lsls	r1, r5, #1
    5cf2:	42a9      	cmp	r1, r5
    5cf4:	41ad      	sbcs	r5, r5
    5cf6:	426d      	negs	r5, r5
    5cf8:	192c      	adds	r4, r5, r4
    5cfa:	1936      	adds	r6, r6, r4
    5cfc:	9100      	str	r1, [sp, #0]
    5cfe:	e73a      	b.n	5b76 <__aeabi_ddiv+0x42a>
    5d00:	2b00      	cmp	r3, #0
    5d02:	d000      	beq.n	5d06 <__aeabi_ddiv+0x5ba>
    5d04:	e733      	b.n	5b6e <__aeabi_ddiv+0x422>
    5d06:	2400      	movs	r4, #0
    5d08:	9400      	str	r4, [sp, #0]
    5d0a:	e737      	b.n	5b7c <__aeabi_ddiv+0x430>
    5d0c:	4a1f      	ldr	r2, [pc, #124]	; (5d8c <__aeabi_ddiv+0x640>)
    5d0e:	9c04      	ldr	r4, [sp, #16]
    5d10:	465d      	mov	r5, fp
    5d12:	1b12      	subs	r2, r2, r4
    5d14:	40d5      	lsrs	r5, r2
    5d16:	1c2a      	adds	r2, r5, #0
    5d18:	2b20      	cmp	r3, #32
    5d1a:	d01f      	beq.n	5d5c <__aeabi_ddiv+0x610>
    5d1c:	4e1c      	ldr	r6, [pc, #112]	; (5d90 <__aeabi_ddiv+0x644>)
    5d1e:	465f      	mov	r7, fp
    5d20:	19a3      	adds	r3, r4, r6
    5d22:	409f      	lsls	r7, r3
    5d24:	1c3b      	adds	r3, r7, #0
    5d26:	4319      	orrs	r1, r3
    5d28:	1e4b      	subs	r3, r1, #1
    5d2a:	4199      	sbcs	r1, r3
    5d2c:	4311      	orrs	r1, r2
    5d2e:	2300      	movs	r3, #0
    5d30:	e7bc      	b.n	5cac <__aeabi_ddiv+0x560>
    5d32:	075a      	lsls	r2, r3, #29
    5d34:	08c9      	lsrs	r1, r1, #3
    5d36:	430a      	orrs	r2, r1
    5d38:	9f03      	ldr	r7, [sp, #12]
    5d3a:	4691      	mov	r9, r2
    5d3c:	025b      	lsls	r3, r3, #9
    5d3e:	2201      	movs	r2, #1
    5d40:	0b1c      	lsrs	r4, r3, #12
    5d42:	403a      	ands	r2, r7
    5d44:	2500      	movs	r5, #0
    5d46:	e5c9      	b.n	58dc <__aeabi_ddiv+0x190>
    5d48:	454e      	cmp	r6, r9
    5d4a:	d8c4      	bhi.n	5cd6 <__aeabi_ddiv+0x58a>
    5d4c:	4693      	mov	fp, r2
    5d4e:	2100      	movs	r1, #0
    5d50:	e672      	b.n	5a38 <__aeabi_ddiv+0x2ec>
    5d52:	9f00      	ldr	r7, [sp, #0]
    5d54:	429f      	cmp	r7, r3
    5d56:	d3c9      	bcc.n	5cec <__aeabi_ddiv+0x5a0>
    5d58:	1c01      	adds	r1, r0, #0
    5d5a:	e70f      	b.n	5b7c <__aeabi_ddiv+0x430>
    5d5c:	2300      	movs	r3, #0
    5d5e:	e7e2      	b.n	5d26 <__aeabi_ddiv+0x5da>
    5d60:	2480      	movs	r4, #128	; 0x80
    5d62:	0324      	lsls	r4, r4, #12
    5d64:	465f      	mov	r7, fp
    5d66:	433c      	orrs	r4, r7
    5d68:	0324      	lsls	r4, r4, #12
    5d6a:	0b24      	lsrs	r4, r4, #12
    5d6c:	9a01      	ldr	r2, [sp, #4]
    5d6e:	4689      	mov	r9, r1
    5d70:	4d03      	ldr	r5, [pc, #12]	; (5d80 <__aeabi_ddiv+0x634>)
    5d72:	e5b3      	b.n	58dc <__aeabi_ddiv+0x190>
    5d74:	000003ff 	.word	0x000003ff
    5d78:	feffffff 	.word	0xfeffffff
    5d7c:	000007fe 	.word	0x000007fe
    5d80:	000007ff 	.word	0x000007ff
    5d84:	fffffc02 	.word	0xfffffc02
    5d88:	0000041e 	.word	0x0000041e
    5d8c:	fffffbe2 	.word	0xfffffbe2
    5d90:	0000043e 	.word	0x0000043e

00005d94 <__aeabi_dmul>:
    5d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d96:	4656      	mov	r6, sl
    5d98:	4644      	mov	r4, r8
    5d9a:	465f      	mov	r7, fp
    5d9c:	464d      	mov	r5, r9
    5d9e:	b4f0      	push	{r4, r5, r6, r7}
    5da0:	1c1f      	adds	r7, r3, #0
    5da2:	030b      	lsls	r3, r1, #12
    5da4:	0b1b      	lsrs	r3, r3, #12
    5da6:	469a      	mov	sl, r3
    5da8:	004b      	lsls	r3, r1, #1
    5daa:	b087      	sub	sp, #28
    5dac:	1c04      	adds	r4, r0, #0
    5dae:	4680      	mov	r8, r0
    5db0:	0d5b      	lsrs	r3, r3, #21
    5db2:	0fc8      	lsrs	r0, r1, #31
    5db4:	1c16      	adds	r6, r2, #0
    5db6:	9302      	str	r3, [sp, #8]
    5db8:	4681      	mov	r9, r0
    5dba:	2b00      	cmp	r3, #0
    5dbc:	d068      	beq.n	5e90 <__aeabi_dmul+0xfc>
    5dbe:	4b69      	ldr	r3, [pc, #420]	; (5f64 <__aeabi_dmul+0x1d0>)
    5dc0:	9902      	ldr	r1, [sp, #8]
    5dc2:	4299      	cmp	r1, r3
    5dc4:	d032      	beq.n	5e2c <__aeabi_dmul+0x98>
    5dc6:	2280      	movs	r2, #128	; 0x80
    5dc8:	4653      	mov	r3, sl
    5dca:	0352      	lsls	r2, r2, #13
    5dcc:	431a      	orrs	r2, r3
    5dce:	00d2      	lsls	r2, r2, #3
    5dd0:	0f63      	lsrs	r3, r4, #29
    5dd2:	431a      	orrs	r2, r3
    5dd4:	4692      	mov	sl, r2
    5dd6:	4a64      	ldr	r2, [pc, #400]	; (5f68 <__aeabi_dmul+0x1d4>)
    5dd8:	00e0      	lsls	r0, r4, #3
    5dda:	1889      	adds	r1, r1, r2
    5ddc:	4680      	mov	r8, r0
    5dde:	9102      	str	r1, [sp, #8]
    5de0:	2400      	movs	r4, #0
    5de2:	2500      	movs	r5, #0
    5de4:	033b      	lsls	r3, r7, #12
    5de6:	0b1b      	lsrs	r3, r3, #12
    5de8:	469b      	mov	fp, r3
    5dea:	0078      	lsls	r0, r7, #1
    5dec:	0ffb      	lsrs	r3, r7, #31
    5dee:	1c32      	adds	r2, r6, #0
    5df0:	0d40      	lsrs	r0, r0, #21
    5df2:	9303      	str	r3, [sp, #12]
    5df4:	d100      	bne.n	5df8 <__aeabi_dmul+0x64>
    5df6:	e075      	b.n	5ee4 <__aeabi_dmul+0x150>
    5df8:	4b5a      	ldr	r3, [pc, #360]	; (5f64 <__aeabi_dmul+0x1d0>)
    5dfa:	4298      	cmp	r0, r3
    5dfc:	d069      	beq.n	5ed2 <__aeabi_dmul+0x13e>
    5dfe:	2280      	movs	r2, #128	; 0x80
    5e00:	4659      	mov	r1, fp
    5e02:	0352      	lsls	r2, r2, #13
    5e04:	430a      	orrs	r2, r1
    5e06:	0f73      	lsrs	r3, r6, #29
    5e08:	00d2      	lsls	r2, r2, #3
    5e0a:	431a      	orrs	r2, r3
    5e0c:	4b56      	ldr	r3, [pc, #344]	; (5f68 <__aeabi_dmul+0x1d4>)
    5e0e:	4693      	mov	fp, r2
    5e10:	18c0      	adds	r0, r0, r3
    5e12:	00f2      	lsls	r2, r6, #3
    5e14:	2300      	movs	r3, #0
    5e16:	9903      	ldr	r1, [sp, #12]
    5e18:	464e      	mov	r6, r9
    5e1a:	4071      	eors	r1, r6
    5e1c:	431c      	orrs	r4, r3
    5e1e:	2c0f      	cmp	r4, #15
    5e20:	d900      	bls.n	5e24 <__aeabi_dmul+0x90>
    5e22:	e0a9      	b.n	5f78 <__aeabi_dmul+0x1e4>
    5e24:	4e51      	ldr	r6, [pc, #324]	; (5f6c <__aeabi_dmul+0x1d8>)
    5e26:	00a4      	lsls	r4, r4, #2
    5e28:	5934      	ldr	r4, [r6, r4]
    5e2a:	46a7      	mov	pc, r4
    5e2c:	4653      	mov	r3, sl
    5e2e:	431c      	orrs	r4, r3
    5e30:	d000      	beq.n	5e34 <__aeabi_dmul+0xa0>
    5e32:	e087      	b.n	5f44 <__aeabi_dmul+0x1b0>
    5e34:	2500      	movs	r5, #0
    5e36:	46aa      	mov	sl, r5
    5e38:	46a8      	mov	r8, r5
    5e3a:	2408      	movs	r4, #8
    5e3c:	2502      	movs	r5, #2
    5e3e:	e7d1      	b.n	5de4 <__aeabi_dmul+0x50>
    5e40:	4649      	mov	r1, r9
    5e42:	2d02      	cmp	r5, #2
    5e44:	d06c      	beq.n	5f20 <__aeabi_dmul+0x18c>
    5e46:	2d03      	cmp	r5, #3
    5e48:	d100      	bne.n	5e4c <__aeabi_dmul+0xb8>
    5e4a:	e217      	b.n	627c <__aeabi_dmul+0x4e8>
    5e4c:	2d01      	cmp	r5, #1
    5e4e:	d000      	beq.n	5e52 <__aeabi_dmul+0xbe>
    5e50:	e158      	b.n	6104 <__aeabi_dmul+0x370>
    5e52:	400d      	ands	r5, r1
    5e54:	b2ed      	uxtb	r5, r5
    5e56:	2400      	movs	r4, #0
    5e58:	46a9      	mov	r9, r5
    5e5a:	2300      	movs	r3, #0
    5e5c:	46a0      	mov	r8, r4
    5e5e:	2000      	movs	r0, #0
    5e60:	2100      	movs	r1, #0
    5e62:	0325      	lsls	r5, r4, #12
    5e64:	0d0a      	lsrs	r2, r1, #20
    5e66:	051c      	lsls	r4, r3, #20
    5e68:	0b2d      	lsrs	r5, r5, #12
    5e6a:	0512      	lsls	r2, r2, #20
    5e6c:	4b40      	ldr	r3, [pc, #256]	; (5f70 <__aeabi_dmul+0x1dc>)
    5e6e:	432a      	orrs	r2, r5
    5e70:	4013      	ands	r3, r2
    5e72:	4323      	orrs	r3, r4
    5e74:	005b      	lsls	r3, r3, #1
    5e76:	464c      	mov	r4, r9
    5e78:	085b      	lsrs	r3, r3, #1
    5e7a:	07e2      	lsls	r2, r4, #31
    5e7c:	1c19      	adds	r1, r3, #0
    5e7e:	4640      	mov	r0, r8
    5e80:	4311      	orrs	r1, r2
    5e82:	b007      	add	sp, #28
    5e84:	bc3c      	pop	{r2, r3, r4, r5}
    5e86:	4690      	mov	r8, r2
    5e88:	4699      	mov	r9, r3
    5e8a:	46a2      	mov	sl, r4
    5e8c:	46ab      	mov	fp, r5
    5e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e90:	4653      	mov	r3, sl
    5e92:	4323      	orrs	r3, r4
    5e94:	d050      	beq.n	5f38 <__aeabi_dmul+0x1a4>
    5e96:	4653      	mov	r3, sl
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d100      	bne.n	5e9e <__aeabi_dmul+0x10a>
    5e9c:	e184      	b.n	61a8 <__aeabi_dmul+0x414>
    5e9e:	4650      	mov	r0, sl
    5ea0:	f000 fe00 	bl	6aa4 <__clzsi2>
    5ea4:	1e03      	subs	r3, r0, #0
    5ea6:	2b27      	cmp	r3, #39	; 0x27
    5ea8:	dd00      	ble.n	5eac <__aeabi_dmul+0x118>
    5eaa:	e176      	b.n	619a <__aeabi_dmul+0x406>
    5eac:	2128      	movs	r1, #40	; 0x28
    5eae:	1a0d      	subs	r5, r1, r0
    5eb0:	1c21      	adds	r1, r4, #0
    5eb2:	3b08      	subs	r3, #8
    5eb4:	4652      	mov	r2, sl
    5eb6:	40e9      	lsrs	r1, r5
    5eb8:	409a      	lsls	r2, r3
    5eba:	1c0d      	adds	r5, r1, #0
    5ebc:	4315      	orrs	r5, r2
    5ebe:	1c22      	adds	r2, r4, #0
    5ec0:	409a      	lsls	r2, r3
    5ec2:	46aa      	mov	sl, r5
    5ec4:	4690      	mov	r8, r2
    5ec6:	4b2b      	ldr	r3, [pc, #172]	; (5f74 <__aeabi_dmul+0x1e0>)
    5ec8:	2400      	movs	r4, #0
    5eca:	1a1b      	subs	r3, r3, r0
    5ecc:	9302      	str	r3, [sp, #8]
    5ece:	2500      	movs	r5, #0
    5ed0:	e788      	b.n	5de4 <__aeabi_dmul+0x50>
    5ed2:	465b      	mov	r3, fp
    5ed4:	431e      	orrs	r6, r3
    5ed6:	2303      	movs	r3, #3
    5ed8:	2e00      	cmp	r6, #0
    5eda:	d19c      	bne.n	5e16 <__aeabi_dmul+0x82>
    5edc:	46b3      	mov	fp, r6
    5ede:	2200      	movs	r2, #0
    5ee0:	2302      	movs	r3, #2
    5ee2:	e798      	b.n	5e16 <__aeabi_dmul+0x82>
    5ee4:	465b      	mov	r3, fp
    5ee6:	4333      	orrs	r3, r6
    5ee8:	d021      	beq.n	5f2e <__aeabi_dmul+0x19a>
    5eea:	4658      	mov	r0, fp
    5eec:	2800      	cmp	r0, #0
    5eee:	d100      	bne.n	5ef2 <__aeabi_dmul+0x15e>
    5ef0:	e14e      	b.n	6190 <__aeabi_dmul+0x3fc>
    5ef2:	f000 fdd7 	bl	6aa4 <__clzsi2>
    5ef6:	2827      	cmp	r0, #39	; 0x27
    5ef8:	dd00      	ble.n	5efc <__aeabi_dmul+0x168>
    5efa:	e142      	b.n	6182 <__aeabi_dmul+0x3ee>
    5efc:	2128      	movs	r1, #40	; 0x28
    5efe:	1a0f      	subs	r7, r1, r0
    5f00:	1c02      	adds	r2, r0, #0
    5f02:	1c31      	adds	r1, r6, #0
    5f04:	3a08      	subs	r2, #8
    5f06:	465b      	mov	r3, fp
    5f08:	40f9      	lsrs	r1, r7
    5f0a:	4093      	lsls	r3, r2
    5f0c:	1c0f      	adds	r7, r1, #0
    5f0e:	431f      	orrs	r7, r3
    5f10:	1c33      	adds	r3, r6, #0
    5f12:	4093      	lsls	r3, r2
    5f14:	46bb      	mov	fp, r7
    5f16:	1c1a      	adds	r2, r3, #0
    5f18:	4b16      	ldr	r3, [pc, #88]	; (5f74 <__aeabi_dmul+0x1e0>)
    5f1a:	1a18      	subs	r0, r3, r0
    5f1c:	2300      	movs	r3, #0
    5f1e:	e77a      	b.n	5e16 <__aeabi_dmul+0x82>
    5f20:	2301      	movs	r3, #1
    5f22:	400b      	ands	r3, r1
    5f24:	2400      	movs	r4, #0
    5f26:	4699      	mov	r9, r3
    5f28:	46a0      	mov	r8, r4
    5f2a:	4b0e      	ldr	r3, [pc, #56]	; (5f64 <__aeabi_dmul+0x1d0>)
    5f2c:	e797      	b.n	5e5e <__aeabi_dmul+0xca>
    5f2e:	2700      	movs	r7, #0
    5f30:	46bb      	mov	fp, r7
    5f32:	2200      	movs	r2, #0
    5f34:	2301      	movs	r3, #1
    5f36:	e76e      	b.n	5e16 <__aeabi_dmul+0x82>
    5f38:	2100      	movs	r1, #0
    5f3a:	2404      	movs	r4, #4
    5f3c:	468a      	mov	sl, r1
    5f3e:	4688      	mov	r8, r1
    5f40:	2501      	movs	r5, #1
    5f42:	e74f      	b.n	5de4 <__aeabi_dmul+0x50>
    5f44:	240c      	movs	r4, #12
    5f46:	2503      	movs	r5, #3
    5f48:	e74c      	b.n	5de4 <__aeabi_dmul+0x50>
    5f4a:	2500      	movs	r5, #0
    5f4c:	2480      	movs	r4, #128	; 0x80
    5f4e:	46a9      	mov	r9, r5
    5f50:	0324      	lsls	r4, r4, #12
    5f52:	46a8      	mov	r8, r5
    5f54:	4b03      	ldr	r3, [pc, #12]	; (5f64 <__aeabi_dmul+0x1d0>)
    5f56:	e782      	b.n	5e5e <__aeabi_dmul+0xca>
    5f58:	46da      	mov	sl, fp
    5f5a:	4690      	mov	r8, r2
    5f5c:	9903      	ldr	r1, [sp, #12]
    5f5e:	1c1d      	adds	r5, r3, #0
    5f60:	e76f      	b.n	5e42 <__aeabi_dmul+0xae>
    5f62:	46c0      	nop			; (mov r8, r8)
    5f64:	000007ff 	.word	0x000007ff
    5f68:	fffffc01 	.word	0xfffffc01
    5f6c:	00007fb4 	.word	0x00007fb4
    5f70:	800fffff 	.word	0x800fffff
    5f74:	fffffc0d 	.word	0xfffffc0d
    5f78:	9f02      	ldr	r7, [sp, #8]
    5f7a:	0c16      	lsrs	r6, r2, #16
    5f7c:	1838      	adds	r0, r7, r0
    5f7e:	9004      	str	r0, [sp, #16]
    5f80:	4640      	mov	r0, r8
    5f82:	0c07      	lsrs	r7, r0, #16
    5f84:	0400      	lsls	r0, r0, #16
    5f86:	0c00      	lsrs	r0, r0, #16
    5f88:	0412      	lsls	r2, r2, #16
    5f8a:	0c12      	lsrs	r2, r2, #16
    5f8c:	1c03      	adds	r3, r0, #0
    5f8e:	4353      	muls	r3, r2
    5f90:	1c04      	adds	r4, r0, #0
    5f92:	1c3d      	adds	r5, r7, #0
    5f94:	4374      	muls	r4, r6
    5f96:	4355      	muls	r5, r2
    5f98:	4698      	mov	r8, r3
    5f9a:	1c3b      	adds	r3, r7, #0
    5f9c:	4373      	muls	r3, r6
    5f9e:	1964      	adds	r4, r4, r5
    5fa0:	46a4      	mov	ip, r4
    5fa2:	4644      	mov	r4, r8
    5fa4:	9302      	str	r3, [sp, #8]
    5fa6:	0c23      	lsrs	r3, r4, #16
    5fa8:	4463      	add	r3, ip
    5faa:	429d      	cmp	r5, r3
    5fac:	d904      	bls.n	5fb8 <__aeabi_dmul+0x224>
    5fae:	9d02      	ldr	r5, [sp, #8]
    5fb0:	2480      	movs	r4, #128	; 0x80
    5fb2:	0264      	lsls	r4, r4, #9
    5fb4:	192d      	adds	r5, r5, r4
    5fb6:	9502      	str	r5, [sp, #8]
    5fb8:	0c1d      	lsrs	r5, r3, #16
    5fba:	9503      	str	r5, [sp, #12]
    5fbc:	4645      	mov	r5, r8
    5fbe:	042c      	lsls	r4, r5, #16
    5fc0:	041b      	lsls	r3, r3, #16
    5fc2:	0c24      	lsrs	r4, r4, #16
    5fc4:	191c      	adds	r4, r3, r4
    5fc6:	9405      	str	r4, [sp, #20]
    5fc8:	465c      	mov	r4, fp
    5fca:	0c23      	lsrs	r3, r4, #16
    5fcc:	1c05      	adds	r5, r0, #0
    5fce:	4358      	muls	r0, r3
    5fd0:	0424      	lsls	r4, r4, #16
    5fd2:	0c24      	lsrs	r4, r4, #16
    5fd4:	4684      	mov	ip, r0
    5fd6:	1c38      	adds	r0, r7, #0
    5fd8:	4360      	muls	r0, r4
    5fda:	4365      	muls	r5, r4
    5fdc:	435f      	muls	r7, r3
    5fde:	4681      	mov	r9, r0
    5fe0:	44cc      	add	ip, r9
    5fe2:	0c28      	lsrs	r0, r5, #16
    5fe4:	4460      	add	r0, ip
    5fe6:	46bb      	mov	fp, r7
    5fe8:	4581      	cmp	r9, r0
    5fea:	d902      	bls.n	5ff2 <__aeabi_dmul+0x25e>
    5fec:	2780      	movs	r7, #128	; 0x80
    5fee:	027f      	lsls	r7, r7, #9
    5ff0:	44bb      	add	fp, r7
    5ff2:	042d      	lsls	r5, r5, #16
    5ff4:	0c07      	lsrs	r7, r0, #16
    5ff6:	0c2d      	lsrs	r5, r5, #16
    5ff8:	0400      	lsls	r0, r0, #16
    5ffa:	1940      	adds	r0, r0, r5
    5ffc:	4655      	mov	r5, sl
    5ffe:	46bc      	mov	ip, r7
    6000:	042f      	lsls	r7, r5, #16
    6002:	44e3      	add	fp, ip
    6004:	4684      	mov	ip, r0
    6006:	0c28      	lsrs	r0, r5, #16
    6008:	0c3d      	lsrs	r5, r7, #16
    600a:	1c2f      	adds	r7, r5, #0
    600c:	4357      	muls	r7, r2
    600e:	46b8      	mov	r8, r7
    6010:	1c2f      	adds	r7, r5, #0
    6012:	4377      	muls	r7, r6
    6014:	4342      	muls	r2, r0
    6016:	46b9      	mov	r9, r7
    6018:	4647      	mov	r7, r8
    601a:	0c3f      	lsrs	r7, r7, #16
    601c:	4491      	add	r9, r2
    601e:	46ba      	mov	sl, r7
    6020:	44d1      	add	r9, sl
    6022:	4346      	muls	r6, r0
    6024:	454a      	cmp	r2, r9
    6026:	d902      	bls.n	602e <__aeabi_dmul+0x29a>
    6028:	2280      	movs	r2, #128	; 0x80
    602a:	0252      	lsls	r2, r2, #9
    602c:	18b6      	adds	r6, r6, r2
    602e:	464f      	mov	r7, r9
    6030:	0c3a      	lsrs	r2, r7, #16
    6032:	18b6      	adds	r6, r6, r2
    6034:	043a      	lsls	r2, r7, #16
    6036:	4647      	mov	r7, r8
    6038:	043f      	lsls	r7, r7, #16
    603a:	0c3f      	lsrs	r7, r7, #16
    603c:	46b8      	mov	r8, r7
    603e:	1c2f      	adds	r7, r5, #0
    6040:	4367      	muls	r7, r4
    6042:	435d      	muls	r5, r3
    6044:	4344      	muls	r4, r0
    6046:	4358      	muls	r0, r3
    6048:	1965      	adds	r5, r4, r5
    604a:	9001      	str	r0, [sp, #4]
    604c:	0c38      	lsrs	r0, r7, #16
    604e:	182d      	adds	r5, r5, r0
    6050:	4442      	add	r2, r8
    6052:	46b8      	mov	r8, r7
    6054:	42ac      	cmp	r4, r5
    6056:	d904      	bls.n	6062 <__aeabi_dmul+0x2ce>
    6058:	9801      	ldr	r0, [sp, #4]
    605a:	2380      	movs	r3, #128	; 0x80
    605c:	025b      	lsls	r3, r3, #9
    605e:	18c0      	adds	r0, r0, r3
    6060:	9001      	str	r0, [sp, #4]
    6062:	9c03      	ldr	r4, [sp, #12]
    6064:	9f02      	ldr	r7, [sp, #8]
    6066:	1c20      	adds	r0, r4, #0
    6068:	4460      	add	r0, ip
    606a:	19c0      	adds	r0, r0, r7
    606c:	4560      	cmp	r0, ip
    606e:	41a4      	sbcs	r4, r4
    6070:	4647      	mov	r7, r8
    6072:	4264      	negs	r4, r4
    6074:	46a4      	mov	ip, r4
    6076:	042b      	lsls	r3, r5, #16
    6078:	043c      	lsls	r4, r7, #16
    607a:	4699      	mov	r9, r3
    607c:	0c24      	lsrs	r4, r4, #16
    607e:	444c      	add	r4, r9
    6080:	46a0      	mov	r8, r4
    6082:	44d8      	add	r8, fp
    6084:	1880      	adds	r0, r0, r2
    6086:	46c2      	mov	sl, r8
    6088:	44e2      	add	sl, ip
    608a:	4290      	cmp	r0, r2
    608c:	4192      	sbcs	r2, r2
    608e:	4657      	mov	r7, sl
    6090:	4252      	negs	r2, r2
    6092:	4691      	mov	r9, r2
    6094:	19f2      	adds	r2, r6, r7
    6096:	45e2      	cmp	sl, ip
    6098:	41bf      	sbcs	r7, r7
    609a:	427f      	negs	r7, r7
    609c:	464b      	mov	r3, r9
    609e:	46bc      	mov	ip, r7
    60a0:	45d8      	cmp	r8, fp
    60a2:	41bf      	sbcs	r7, r7
    60a4:	18d4      	adds	r4, r2, r3
    60a6:	427f      	negs	r7, r7
    60a8:	4663      	mov	r3, ip
    60aa:	431f      	orrs	r7, r3
    60ac:	0c2d      	lsrs	r5, r5, #16
    60ae:	197f      	adds	r7, r7, r5
    60b0:	42b2      	cmp	r2, r6
    60b2:	4192      	sbcs	r2, r2
    60b4:	454c      	cmp	r4, r9
    60b6:	41ad      	sbcs	r5, r5
    60b8:	4252      	negs	r2, r2
    60ba:	426d      	negs	r5, r5
    60bc:	4315      	orrs	r5, r2
    60be:	9e01      	ldr	r6, [sp, #4]
    60c0:	197d      	adds	r5, r7, r5
    60c2:	19ab      	adds	r3, r5, r6
    60c4:	0de2      	lsrs	r2, r4, #23
    60c6:	025b      	lsls	r3, r3, #9
    60c8:	9f05      	ldr	r7, [sp, #20]
    60ca:	4313      	orrs	r3, r2
    60cc:	0242      	lsls	r2, r0, #9
    60ce:	433a      	orrs	r2, r7
    60d0:	469a      	mov	sl, r3
    60d2:	1e53      	subs	r3, r2, #1
    60d4:	419a      	sbcs	r2, r3
    60d6:	0dc3      	lsrs	r3, r0, #23
    60d8:	1c10      	adds	r0, r2, #0
    60da:	4318      	orrs	r0, r3
    60dc:	0264      	lsls	r4, r4, #9
    60de:	4320      	orrs	r0, r4
    60e0:	4680      	mov	r8, r0
    60e2:	4650      	mov	r0, sl
    60e4:	01c0      	lsls	r0, r0, #7
    60e6:	d50d      	bpl.n	6104 <__aeabi_dmul+0x370>
    60e8:	4645      	mov	r5, r8
    60ea:	2201      	movs	r2, #1
    60ec:	4656      	mov	r6, sl
    60ee:	9c04      	ldr	r4, [sp, #16]
    60f0:	086b      	lsrs	r3, r5, #1
    60f2:	402a      	ands	r2, r5
    60f4:	431a      	orrs	r2, r3
    60f6:	07f3      	lsls	r3, r6, #31
    60f8:	3401      	adds	r4, #1
    60fa:	431a      	orrs	r2, r3
    60fc:	0876      	lsrs	r6, r6, #1
    60fe:	9404      	str	r4, [sp, #16]
    6100:	4690      	mov	r8, r2
    6102:	46b2      	mov	sl, r6
    6104:	9e04      	ldr	r6, [sp, #16]
    6106:	4f63      	ldr	r7, [pc, #396]	; (6294 <__aeabi_dmul+0x500>)
    6108:	19f3      	adds	r3, r6, r7
    610a:	2b00      	cmp	r3, #0
    610c:	dd61      	ble.n	61d2 <__aeabi_dmul+0x43e>
    610e:	4640      	mov	r0, r8
    6110:	0740      	lsls	r0, r0, #29
    6112:	d00b      	beq.n	612c <__aeabi_dmul+0x398>
    6114:	220f      	movs	r2, #15
    6116:	4644      	mov	r4, r8
    6118:	4022      	ands	r2, r4
    611a:	2a04      	cmp	r2, #4
    611c:	d006      	beq.n	612c <__aeabi_dmul+0x398>
    611e:	4642      	mov	r2, r8
    6120:	3204      	adds	r2, #4
    6122:	4542      	cmp	r2, r8
    6124:	4180      	sbcs	r0, r0
    6126:	4240      	negs	r0, r0
    6128:	4482      	add	sl, r0
    612a:	4690      	mov	r8, r2
    612c:	4655      	mov	r5, sl
    612e:	01ed      	lsls	r5, r5, #7
    6130:	d507      	bpl.n	6142 <__aeabi_dmul+0x3ae>
    6132:	4b59      	ldr	r3, [pc, #356]	; (6298 <__aeabi_dmul+0x504>)
    6134:	4656      	mov	r6, sl
    6136:	9f04      	ldr	r7, [sp, #16]
    6138:	2080      	movs	r0, #128	; 0x80
    613a:	401e      	ands	r6, r3
    613c:	00c0      	lsls	r0, r0, #3
    613e:	46b2      	mov	sl, r6
    6140:	183b      	adds	r3, r7, r0
    6142:	4a56      	ldr	r2, [pc, #344]	; (629c <__aeabi_dmul+0x508>)
    6144:	4293      	cmp	r3, r2
    6146:	dd00      	ble.n	614a <__aeabi_dmul+0x3b6>
    6148:	e6ea      	b.n	5f20 <__aeabi_dmul+0x18c>
    614a:	4644      	mov	r4, r8
    614c:	4655      	mov	r5, sl
    614e:	08e2      	lsrs	r2, r4, #3
    6150:	0768      	lsls	r0, r5, #29
    6152:	4310      	orrs	r0, r2
    6154:	2201      	movs	r2, #1
    6156:	026c      	lsls	r4, r5, #9
    6158:	055b      	lsls	r3, r3, #21
    615a:	400a      	ands	r2, r1
    615c:	4680      	mov	r8, r0
    615e:	0b24      	lsrs	r4, r4, #12
    6160:	0d5b      	lsrs	r3, r3, #21
    6162:	4691      	mov	r9, r2
    6164:	e67b      	b.n	5e5e <__aeabi_dmul+0xca>
    6166:	46da      	mov	sl, fp
    6168:	4690      	mov	r8, r2
    616a:	1c1d      	adds	r5, r3, #0
    616c:	e669      	b.n	5e42 <__aeabi_dmul+0xae>
    616e:	2480      	movs	r4, #128	; 0x80
    6170:	0324      	lsls	r4, r4, #12
    6172:	4657      	mov	r7, sl
    6174:	4227      	tst	r7, r4
    6176:	d11c      	bne.n	61b2 <__aeabi_dmul+0x41e>
    6178:	433c      	orrs	r4, r7
    617a:	0324      	lsls	r4, r4, #12
    617c:	0b24      	lsrs	r4, r4, #12
    617e:	4b48      	ldr	r3, [pc, #288]	; (62a0 <__aeabi_dmul+0x50c>)
    6180:	e66d      	b.n	5e5e <__aeabi_dmul+0xca>
    6182:	1c03      	adds	r3, r0, #0
    6184:	3b28      	subs	r3, #40	; 0x28
    6186:	1c31      	adds	r1, r6, #0
    6188:	4099      	lsls	r1, r3
    618a:	468b      	mov	fp, r1
    618c:	2200      	movs	r2, #0
    618e:	e6c3      	b.n	5f18 <__aeabi_dmul+0x184>
    6190:	1c30      	adds	r0, r6, #0
    6192:	f000 fc87 	bl	6aa4 <__clzsi2>
    6196:	3020      	adds	r0, #32
    6198:	e6ad      	b.n	5ef6 <__aeabi_dmul+0x162>
    619a:	3b28      	subs	r3, #40	; 0x28
    619c:	1c21      	adds	r1, r4, #0
    619e:	4099      	lsls	r1, r3
    61a0:	2200      	movs	r2, #0
    61a2:	468a      	mov	sl, r1
    61a4:	4690      	mov	r8, r2
    61a6:	e68e      	b.n	5ec6 <__aeabi_dmul+0x132>
    61a8:	1c20      	adds	r0, r4, #0
    61aa:	f000 fc7b 	bl	6aa4 <__clzsi2>
    61ae:	3020      	adds	r0, #32
    61b0:	e678      	b.n	5ea4 <__aeabi_dmul+0x110>
    61b2:	4658      	mov	r0, fp
    61b4:	4220      	tst	r0, r4
    61b6:	d107      	bne.n	61c8 <__aeabi_dmul+0x434>
    61b8:	4304      	orrs	r4, r0
    61ba:	9903      	ldr	r1, [sp, #12]
    61bc:	0324      	lsls	r4, r4, #12
    61be:	0b24      	lsrs	r4, r4, #12
    61c0:	4689      	mov	r9, r1
    61c2:	4690      	mov	r8, r2
    61c4:	4b36      	ldr	r3, [pc, #216]	; (62a0 <__aeabi_dmul+0x50c>)
    61c6:	e64a      	b.n	5e5e <__aeabi_dmul+0xca>
    61c8:	433c      	orrs	r4, r7
    61ca:	0324      	lsls	r4, r4, #12
    61cc:	0b24      	lsrs	r4, r4, #12
    61ce:	4b34      	ldr	r3, [pc, #208]	; (62a0 <__aeabi_dmul+0x50c>)
    61d0:	e645      	b.n	5e5e <__aeabi_dmul+0xca>
    61d2:	4b34      	ldr	r3, [pc, #208]	; (62a4 <__aeabi_dmul+0x510>)
    61d4:	9e04      	ldr	r6, [sp, #16]
    61d6:	1b9b      	subs	r3, r3, r6
    61d8:	2b38      	cmp	r3, #56	; 0x38
    61da:	dd06      	ble.n	61ea <__aeabi_dmul+0x456>
    61dc:	2301      	movs	r3, #1
    61de:	400b      	ands	r3, r1
    61e0:	2400      	movs	r4, #0
    61e2:	4699      	mov	r9, r3
    61e4:	46a0      	mov	r8, r4
    61e6:	2300      	movs	r3, #0
    61e8:	e639      	b.n	5e5e <__aeabi_dmul+0xca>
    61ea:	2b1f      	cmp	r3, #31
    61ec:	dc25      	bgt.n	623a <__aeabi_dmul+0x4a6>
    61ee:	9c04      	ldr	r4, [sp, #16]
    61f0:	4d2d      	ldr	r5, [pc, #180]	; (62a8 <__aeabi_dmul+0x514>)
    61f2:	4646      	mov	r6, r8
    61f4:	1960      	adds	r0, r4, r5
    61f6:	4652      	mov	r2, sl
    61f8:	4644      	mov	r4, r8
    61fa:	4086      	lsls	r6, r0
    61fc:	40dc      	lsrs	r4, r3
    61fe:	4082      	lsls	r2, r0
    6200:	4657      	mov	r7, sl
    6202:	1c30      	adds	r0, r6, #0
    6204:	4322      	orrs	r2, r4
    6206:	40df      	lsrs	r7, r3
    6208:	1e44      	subs	r4, r0, #1
    620a:	41a0      	sbcs	r0, r4
    620c:	4302      	orrs	r2, r0
    620e:	1c3b      	adds	r3, r7, #0
    6210:	0754      	lsls	r4, r2, #29
    6212:	d009      	beq.n	6228 <__aeabi_dmul+0x494>
    6214:	200f      	movs	r0, #15
    6216:	4010      	ands	r0, r2
    6218:	2804      	cmp	r0, #4
    621a:	d005      	beq.n	6228 <__aeabi_dmul+0x494>
    621c:	1d10      	adds	r0, r2, #4
    621e:	4290      	cmp	r0, r2
    6220:	4192      	sbcs	r2, r2
    6222:	4252      	negs	r2, r2
    6224:	189b      	adds	r3, r3, r2
    6226:	1c02      	adds	r2, r0, #0
    6228:	021d      	lsls	r5, r3, #8
    622a:	d51a      	bpl.n	6262 <__aeabi_dmul+0x4ce>
    622c:	2301      	movs	r3, #1
    622e:	400b      	ands	r3, r1
    6230:	2400      	movs	r4, #0
    6232:	4699      	mov	r9, r3
    6234:	46a0      	mov	r8, r4
    6236:	2301      	movs	r3, #1
    6238:	e611      	b.n	5e5e <__aeabi_dmul+0xca>
    623a:	481c      	ldr	r0, [pc, #112]	; (62ac <__aeabi_dmul+0x518>)
    623c:	9c04      	ldr	r4, [sp, #16]
    623e:	4655      	mov	r5, sl
    6240:	1b00      	subs	r0, r0, r4
    6242:	40c5      	lsrs	r5, r0
    6244:	1c28      	adds	r0, r5, #0
    6246:	2b20      	cmp	r3, #32
    6248:	d016      	beq.n	6278 <__aeabi_dmul+0x4e4>
    624a:	4e19      	ldr	r6, [pc, #100]	; (62b0 <__aeabi_dmul+0x51c>)
    624c:	4657      	mov	r7, sl
    624e:	19a2      	adds	r2, r4, r6
    6250:	4097      	lsls	r7, r2
    6252:	1c3a      	adds	r2, r7, #0
    6254:	4643      	mov	r3, r8
    6256:	431a      	orrs	r2, r3
    6258:	1e53      	subs	r3, r2, #1
    625a:	419a      	sbcs	r2, r3
    625c:	4302      	orrs	r2, r0
    625e:	2300      	movs	r3, #0
    6260:	e7d6      	b.n	6210 <__aeabi_dmul+0x47c>
    6262:	0758      	lsls	r0, r3, #29
    6264:	025b      	lsls	r3, r3, #9
    6266:	08d2      	lsrs	r2, r2, #3
    6268:	0b1c      	lsrs	r4, r3, #12
    626a:	2301      	movs	r3, #1
    626c:	400b      	ands	r3, r1
    626e:	4310      	orrs	r0, r2
    6270:	4699      	mov	r9, r3
    6272:	4680      	mov	r8, r0
    6274:	2300      	movs	r3, #0
    6276:	e5f2      	b.n	5e5e <__aeabi_dmul+0xca>
    6278:	2200      	movs	r2, #0
    627a:	e7eb      	b.n	6254 <__aeabi_dmul+0x4c0>
    627c:	2480      	movs	r4, #128	; 0x80
    627e:	0324      	lsls	r4, r4, #12
    6280:	4650      	mov	r0, sl
    6282:	2301      	movs	r3, #1
    6284:	4304      	orrs	r4, r0
    6286:	4019      	ands	r1, r3
    6288:	0324      	lsls	r4, r4, #12
    628a:	0b24      	lsrs	r4, r4, #12
    628c:	4689      	mov	r9, r1
    628e:	4b04      	ldr	r3, [pc, #16]	; (62a0 <__aeabi_dmul+0x50c>)
    6290:	e5e5      	b.n	5e5e <__aeabi_dmul+0xca>
    6292:	46c0      	nop			; (mov r8, r8)
    6294:	000003ff 	.word	0x000003ff
    6298:	feffffff 	.word	0xfeffffff
    629c:	000007fe 	.word	0x000007fe
    62a0:	000007ff 	.word	0x000007ff
    62a4:	fffffc02 	.word	0xfffffc02
    62a8:	0000041e 	.word	0x0000041e
    62ac:	fffffbe2 	.word	0xfffffbe2
    62b0:	0000043e 	.word	0x0000043e

000062b4 <__aeabi_dsub>:
    62b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62b6:	465f      	mov	r7, fp
    62b8:	4656      	mov	r6, sl
    62ba:	4644      	mov	r4, r8
    62bc:	464d      	mov	r5, r9
    62be:	b4f0      	push	{r4, r5, r6, r7}
    62c0:	030c      	lsls	r4, r1, #12
    62c2:	004d      	lsls	r5, r1, #1
    62c4:	0fcf      	lsrs	r7, r1, #31
    62c6:	0a61      	lsrs	r1, r4, #9
    62c8:	0f44      	lsrs	r4, r0, #29
    62ca:	4321      	orrs	r1, r4
    62cc:	00c4      	lsls	r4, r0, #3
    62ce:	0318      	lsls	r0, r3, #12
    62d0:	0fde      	lsrs	r6, r3, #31
    62d2:	4680      	mov	r8, r0
    62d4:	46b4      	mov	ip, r6
    62d6:	4646      	mov	r6, r8
    62d8:	0058      	lsls	r0, r3, #1
    62da:	0a76      	lsrs	r6, r6, #9
    62dc:	0f53      	lsrs	r3, r2, #29
    62de:	4333      	orrs	r3, r6
    62e0:	00d6      	lsls	r6, r2, #3
    62e2:	4ad1      	ldr	r2, [pc, #836]	; (6628 <__aeabi_dsub+0x374>)
    62e4:	0d6d      	lsrs	r5, r5, #21
    62e6:	46ba      	mov	sl, r7
    62e8:	0d40      	lsrs	r0, r0, #21
    62ea:	46b3      	mov	fp, r6
    62ec:	4290      	cmp	r0, r2
    62ee:	d100      	bne.n	62f2 <__aeabi_dsub+0x3e>
    62f0:	e0f5      	b.n	64de <__aeabi_dsub+0x22a>
    62f2:	4662      	mov	r2, ip
    62f4:	2601      	movs	r6, #1
    62f6:	4072      	eors	r2, r6
    62f8:	4694      	mov	ip, r2
    62fa:	4567      	cmp	r7, ip
    62fc:	d100      	bne.n	6300 <__aeabi_dsub+0x4c>
    62fe:	e0ab      	b.n	6458 <__aeabi_dsub+0x1a4>
    6300:	1a2f      	subs	r7, r5, r0
    6302:	2f00      	cmp	r7, #0
    6304:	dc00      	bgt.n	6308 <__aeabi_dsub+0x54>
    6306:	e111      	b.n	652c <__aeabi_dsub+0x278>
    6308:	2800      	cmp	r0, #0
    630a:	d13e      	bne.n	638a <__aeabi_dsub+0xd6>
    630c:	4658      	mov	r0, fp
    630e:	4318      	orrs	r0, r3
    6310:	d000      	beq.n	6314 <__aeabi_dsub+0x60>
    6312:	e0f1      	b.n	64f8 <__aeabi_dsub+0x244>
    6314:	0760      	lsls	r0, r4, #29
    6316:	d100      	bne.n	631a <__aeabi_dsub+0x66>
    6318:	e097      	b.n	644a <__aeabi_dsub+0x196>
    631a:	230f      	movs	r3, #15
    631c:	4023      	ands	r3, r4
    631e:	2b04      	cmp	r3, #4
    6320:	d100      	bne.n	6324 <__aeabi_dsub+0x70>
    6322:	e122      	b.n	656a <__aeabi_dsub+0x2b6>
    6324:	1d22      	adds	r2, r4, #4
    6326:	42a2      	cmp	r2, r4
    6328:	41a4      	sbcs	r4, r4
    632a:	4264      	negs	r4, r4
    632c:	2380      	movs	r3, #128	; 0x80
    632e:	1909      	adds	r1, r1, r4
    6330:	041b      	lsls	r3, r3, #16
    6332:	2701      	movs	r7, #1
    6334:	4650      	mov	r0, sl
    6336:	400b      	ands	r3, r1
    6338:	4007      	ands	r7, r0
    633a:	1c14      	adds	r4, r2, #0
    633c:	2b00      	cmp	r3, #0
    633e:	d100      	bne.n	6342 <__aeabi_dsub+0x8e>
    6340:	e079      	b.n	6436 <__aeabi_dsub+0x182>
    6342:	4bb9      	ldr	r3, [pc, #740]	; (6628 <__aeabi_dsub+0x374>)
    6344:	3501      	adds	r5, #1
    6346:	429d      	cmp	r5, r3
    6348:	d100      	bne.n	634c <__aeabi_dsub+0x98>
    634a:	e10b      	b.n	6564 <__aeabi_dsub+0x2b0>
    634c:	4bb7      	ldr	r3, [pc, #732]	; (662c <__aeabi_dsub+0x378>)
    634e:	08e4      	lsrs	r4, r4, #3
    6350:	4019      	ands	r1, r3
    6352:	0748      	lsls	r0, r1, #29
    6354:	0249      	lsls	r1, r1, #9
    6356:	4304      	orrs	r4, r0
    6358:	0b0b      	lsrs	r3, r1, #12
    635a:	2000      	movs	r0, #0
    635c:	2100      	movs	r1, #0
    635e:	031b      	lsls	r3, r3, #12
    6360:	0b1a      	lsrs	r2, r3, #12
    6362:	0d0b      	lsrs	r3, r1, #20
    6364:	056d      	lsls	r5, r5, #21
    6366:	051b      	lsls	r3, r3, #20
    6368:	4313      	orrs	r3, r2
    636a:	086a      	lsrs	r2, r5, #1
    636c:	4db0      	ldr	r5, [pc, #704]	; (6630 <__aeabi_dsub+0x37c>)
    636e:	07ff      	lsls	r7, r7, #31
    6370:	401d      	ands	r5, r3
    6372:	4315      	orrs	r5, r2
    6374:	006d      	lsls	r5, r5, #1
    6376:	086d      	lsrs	r5, r5, #1
    6378:	1c29      	adds	r1, r5, #0
    637a:	4339      	orrs	r1, r7
    637c:	1c20      	adds	r0, r4, #0
    637e:	bc3c      	pop	{r2, r3, r4, r5}
    6380:	4690      	mov	r8, r2
    6382:	4699      	mov	r9, r3
    6384:	46a2      	mov	sl, r4
    6386:	46ab      	mov	fp, r5
    6388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    638a:	48a7      	ldr	r0, [pc, #668]	; (6628 <__aeabi_dsub+0x374>)
    638c:	4285      	cmp	r5, r0
    638e:	d0c1      	beq.n	6314 <__aeabi_dsub+0x60>
    6390:	2080      	movs	r0, #128	; 0x80
    6392:	0400      	lsls	r0, r0, #16
    6394:	4303      	orrs	r3, r0
    6396:	2f38      	cmp	r7, #56	; 0x38
    6398:	dd00      	ble.n	639c <__aeabi_dsub+0xe8>
    639a:	e0fd      	b.n	6598 <__aeabi_dsub+0x2e4>
    639c:	2f1f      	cmp	r7, #31
    639e:	dd00      	ble.n	63a2 <__aeabi_dsub+0xee>
    63a0:	e131      	b.n	6606 <__aeabi_dsub+0x352>
    63a2:	2020      	movs	r0, #32
    63a4:	1bc0      	subs	r0, r0, r7
    63a6:	1c1a      	adds	r2, r3, #0
    63a8:	465e      	mov	r6, fp
    63aa:	4082      	lsls	r2, r0
    63ac:	40fe      	lsrs	r6, r7
    63ae:	4332      	orrs	r2, r6
    63b0:	4694      	mov	ip, r2
    63b2:	465a      	mov	r2, fp
    63b4:	4082      	lsls	r2, r0
    63b6:	1c10      	adds	r0, r2, #0
    63b8:	1e42      	subs	r2, r0, #1
    63ba:	4190      	sbcs	r0, r2
    63bc:	40fb      	lsrs	r3, r7
    63be:	4662      	mov	r2, ip
    63c0:	4302      	orrs	r2, r0
    63c2:	1c1f      	adds	r7, r3, #0
    63c4:	1aa2      	subs	r2, r4, r2
    63c6:	4294      	cmp	r4, r2
    63c8:	41a4      	sbcs	r4, r4
    63ca:	4264      	negs	r4, r4
    63cc:	1bc9      	subs	r1, r1, r7
    63ce:	1b09      	subs	r1, r1, r4
    63d0:	1c14      	adds	r4, r2, #0
    63d2:	020a      	lsls	r2, r1, #8
    63d4:	d59e      	bpl.n	6314 <__aeabi_dsub+0x60>
    63d6:	0249      	lsls	r1, r1, #9
    63d8:	0a4f      	lsrs	r7, r1, #9
    63da:	2f00      	cmp	r7, #0
    63dc:	d100      	bne.n	63e0 <__aeabi_dsub+0x12c>
    63de:	e0d6      	b.n	658e <__aeabi_dsub+0x2da>
    63e0:	1c38      	adds	r0, r7, #0
    63e2:	f000 fb5f 	bl	6aa4 <__clzsi2>
    63e6:	1c02      	adds	r2, r0, #0
    63e8:	3a08      	subs	r2, #8
    63ea:	2a1f      	cmp	r2, #31
    63ec:	dd00      	ble.n	63f0 <__aeabi_dsub+0x13c>
    63ee:	e0c3      	b.n	6578 <__aeabi_dsub+0x2c4>
    63f0:	2128      	movs	r1, #40	; 0x28
    63f2:	1c23      	adds	r3, r4, #0
    63f4:	1a09      	subs	r1, r1, r0
    63f6:	4097      	lsls	r7, r2
    63f8:	40cb      	lsrs	r3, r1
    63fa:	431f      	orrs	r7, r3
    63fc:	4094      	lsls	r4, r2
    63fe:	4295      	cmp	r5, r2
    6400:	dd00      	ble.n	6404 <__aeabi_dsub+0x150>
    6402:	e0c0      	b.n	6586 <__aeabi_dsub+0x2d2>
    6404:	1b55      	subs	r5, r2, r5
    6406:	1c69      	adds	r1, r5, #1
    6408:	291f      	cmp	r1, #31
    640a:	dd00      	ble.n	640e <__aeabi_dsub+0x15a>
    640c:	e0ea      	b.n	65e4 <__aeabi_dsub+0x330>
    640e:	221f      	movs	r2, #31
    6410:	1b55      	subs	r5, r2, r5
    6412:	1c3b      	adds	r3, r7, #0
    6414:	1c22      	adds	r2, r4, #0
    6416:	40ab      	lsls	r3, r5
    6418:	40ca      	lsrs	r2, r1
    641a:	40ac      	lsls	r4, r5
    641c:	1e65      	subs	r5, r4, #1
    641e:	41ac      	sbcs	r4, r5
    6420:	4313      	orrs	r3, r2
    6422:	40cf      	lsrs	r7, r1
    6424:	431c      	orrs	r4, r3
    6426:	1c39      	adds	r1, r7, #0
    6428:	2500      	movs	r5, #0
    642a:	e773      	b.n	6314 <__aeabi_dsub+0x60>
    642c:	2180      	movs	r1, #128	; 0x80
    642e:	4d7e      	ldr	r5, [pc, #504]	; (6628 <__aeabi_dsub+0x374>)
    6430:	2700      	movs	r7, #0
    6432:	03c9      	lsls	r1, r1, #15
    6434:	2400      	movs	r4, #0
    6436:	4b7c      	ldr	r3, [pc, #496]	; (6628 <__aeabi_dsub+0x374>)
    6438:	0748      	lsls	r0, r1, #29
    643a:	08e4      	lsrs	r4, r4, #3
    643c:	4304      	orrs	r4, r0
    643e:	08c9      	lsrs	r1, r1, #3
    6440:	429d      	cmp	r5, r3
    6442:	d050      	beq.n	64e6 <__aeabi_dsub+0x232>
    6444:	0309      	lsls	r1, r1, #12
    6446:	0b0b      	lsrs	r3, r1, #12
    6448:	e787      	b.n	635a <__aeabi_dsub+0xa6>
    644a:	2380      	movs	r3, #128	; 0x80
    644c:	041b      	lsls	r3, r3, #16
    644e:	2701      	movs	r7, #1
    6450:	4652      	mov	r2, sl
    6452:	400b      	ands	r3, r1
    6454:	4017      	ands	r7, r2
    6456:	e771      	b.n	633c <__aeabi_dsub+0x88>
    6458:	1a2a      	subs	r2, r5, r0
    645a:	4694      	mov	ip, r2
    645c:	2a00      	cmp	r2, #0
    645e:	dc00      	bgt.n	6462 <__aeabi_dsub+0x1ae>
    6460:	e0a1      	b.n	65a6 <__aeabi_dsub+0x2f2>
    6462:	2800      	cmp	r0, #0
    6464:	d054      	beq.n	6510 <__aeabi_dsub+0x25c>
    6466:	4870      	ldr	r0, [pc, #448]	; (6628 <__aeabi_dsub+0x374>)
    6468:	4285      	cmp	r5, r0
    646a:	d100      	bne.n	646e <__aeabi_dsub+0x1ba>
    646c:	e752      	b.n	6314 <__aeabi_dsub+0x60>
    646e:	2080      	movs	r0, #128	; 0x80
    6470:	0400      	lsls	r0, r0, #16
    6472:	4303      	orrs	r3, r0
    6474:	4660      	mov	r0, ip
    6476:	2838      	cmp	r0, #56	; 0x38
    6478:	dd00      	ble.n	647c <__aeabi_dsub+0x1c8>
    647a:	e10e      	b.n	669a <__aeabi_dsub+0x3e6>
    647c:	281f      	cmp	r0, #31
    647e:	dd00      	ble.n	6482 <__aeabi_dsub+0x1ce>
    6480:	e157      	b.n	6732 <__aeabi_dsub+0x47e>
    6482:	4662      	mov	r2, ip
    6484:	2020      	movs	r0, #32
    6486:	1a80      	subs	r0, r0, r2
    6488:	1c1e      	adds	r6, r3, #0
    648a:	4086      	lsls	r6, r0
    648c:	46b1      	mov	r9, r6
    648e:	465e      	mov	r6, fp
    6490:	40d6      	lsrs	r6, r2
    6492:	464a      	mov	r2, r9
    6494:	4332      	orrs	r2, r6
    6496:	465e      	mov	r6, fp
    6498:	4086      	lsls	r6, r0
    649a:	4690      	mov	r8, r2
    649c:	1c30      	adds	r0, r6, #0
    649e:	1e42      	subs	r2, r0, #1
    64a0:	4190      	sbcs	r0, r2
    64a2:	4642      	mov	r2, r8
    64a4:	4302      	orrs	r2, r0
    64a6:	4660      	mov	r0, ip
    64a8:	40c3      	lsrs	r3, r0
    64aa:	1912      	adds	r2, r2, r4
    64ac:	42a2      	cmp	r2, r4
    64ae:	41a4      	sbcs	r4, r4
    64b0:	4264      	negs	r4, r4
    64b2:	1859      	adds	r1, r3, r1
    64b4:	1909      	adds	r1, r1, r4
    64b6:	1c14      	adds	r4, r2, #0
    64b8:	0208      	lsls	r0, r1, #8
    64ba:	d400      	bmi.n	64be <__aeabi_dsub+0x20a>
    64bc:	e72a      	b.n	6314 <__aeabi_dsub+0x60>
    64be:	4b5a      	ldr	r3, [pc, #360]	; (6628 <__aeabi_dsub+0x374>)
    64c0:	3501      	adds	r5, #1
    64c2:	429d      	cmp	r5, r3
    64c4:	d100      	bne.n	64c8 <__aeabi_dsub+0x214>
    64c6:	e131      	b.n	672c <__aeabi_dsub+0x478>
    64c8:	4b58      	ldr	r3, [pc, #352]	; (662c <__aeabi_dsub+0x378>)
    64ca:	0860      	lsrs	r0, r4, #1
    64cc:	4019      	ands	r1, r3
    64ce:	2301      	movs	r3, #1
    64d0:	4023      	ands	r3, r4
    64d2:	1c1c      	adds	r4, r3, #0
    64d4:	4304      	orrs	r4, r0
    64d6:	07cb      	lsls	r3, r1, #31
    64d8:	431c      	orrs	r4, r3
    64da:	0849      	lsrs	r1, r1, #1
    64dc:	e71a      	b.n	6314 <__aeabi_dsub+0x60>
    64de:	431e      	orrs	r6, r3
    64e0:	d000      	beq.n	64e4 <__aeabi_dsub+0x230>
    64e2:	e70a      	b.n	62fa <__aeabi_dsub+0x46>
    64e4:	e705      	b.n	62f2 <__aeabi_dsub+0x3e>
    64e6:	1c23      	adds	r3, r4, #0
    64e8:	430b      	orrs	r3, r1
    64ea:	d03b      	beq.n	6564 <__aeabi_dsub+0x2b0>
    64ec:	2380      	movs	r3, #128	; 0x80
    64ee:	031b      	lsls	r3, r3, #12
    64f0:	430b      	orrs	r3, r1
    64f2:	031b      	lsls	r3, r3, #12
    64f4:	0b1b      	lsrs	r3, r3, #12
    64f6:	e730      	b.n	635a <__aeabi_dsub+0xa6>
    64f8:	3f01      	subs	r7, #1
    64fa:	2f00      	cmp	r7, #0
    64fc:	d16d      	bne.n	65da <__aeabi_dsub+0x326>
    64fe:	465e      	mov	r6, fp
    6500:	1ba2      	subs	r2, r4, r6
    6502:	4294      	cmp	r4, r2
    6504:	41a4      	sbcs	r4, r4
    6506:	4264      	negs	r4, r4
    6508:	1ac9      	subs	r1, r1, r3
    650a:	1b09      	subs	r1, r1, r4
    650c:	1c14      	adds	r4, r2, #0
    650e:	e760      	b.n	63d2 <__aeabi_dsub+0x11e>
    6510:	4658      	mov	r0, fp
    6512:	4318      	orrs	r0, r3
    6514:	d100      	bne.n	6518 <__aeabi_dsub+0x264>
    6516:	e6fd      	b.n	6314 <__aeabi_dsub+0x60>
    6518:	2601      	movs	r6, #1
    651a:	4276      	negs	r6, r6
    651c:	44b4      	add	ip, r6
    651e:	4660      	mov	r0, ip
    6520:	2800      	cmp	r0, #0
    6522:	d000      	beq.n	6526 <__aeabi_dsub+0x272>
    6524:	e0d0      	b.n	66c8 <__aeabi_dsub+0x414>
    6526:	465e      	mov	r6, fp
    6528:	1932      	adds	r2, r6, r4
    652a:	e7bf      	b.n	64ac <__aeabi_dsub+0x1f8>
    652c:	2f00      	cmp	r7, #0
    652e:	d000      	beq.n	6532 <__aeabi_dsub+0x27e>
    6530:	e080      	b.n	6634 <__aeabi_dsub+0x380>
    6532:	1c68      	adds	r0, r5, #1
    6534:	0540      	lsls	r0, r0, #21
    6536:	0d40      	lsrs	r0, r0, #21
    6538:	2801      	cmp	r0, #1
    653a:	dc00      	bgt.n	653e <__aeabi_dsub+0x28a>
    653c:	e0e8      	b.n	6710 <__aeabi_dsub+0x45c>
    653e:	465a      	mov	r2, fp
    6540:	1aa2      	subs	r2, r4, r2
    6542:	4294      	cmp	r4, r2
    6544:	41bf      	sbcs	r7, r7
    6546:	1ac8      	subs	r0, r1, r3
    6548:	427f      	negs	r7, r7
    654a:	1bc7      	subs	r7, r0, r7
    654c:	023e      	lsls	r6, r7, #8
    654e:	d400      	bmi.n	6552 <__aeabi_dsub+0x29e>
    6550:	e098      	b.n	6684 <__aeabi_dsub+0x3d0>
    6552:	4658      	mov	r0, fp
    6554:	1b04      	subs	r4, r0, r4
    6556:	45a3      	cmp	fp, r4
    6558:	4192      	sbcs	r2, r2
    655a:	1a59      	subs	r1, r3, r1
    655c:	4252      	negs	r2, r2
    655e:	1a8f      	subs	r7, r1, r2
    6560:	46e2      	mov	sl, ip
    6562:	e73a      	b.n	63da <__aeabi_dsub+0x126>
    6564:	2300      	movs	r3, #0
    6566:	2400      	movs	r4, #0
    6568:	e6f7      	b.n	635a <__aeabi_dsub+0xa6>
    656a:	2380      	movs	r3, #128	; 0x80
    656c:	041b      	lsls	r3, r3, #16
    656e:	2701      	movs	r7, #1
    6570:	4656      	mov	r6, sl
    6572:	400b      	ands	r3, r1
    6574:	4037      	ands	r7, r6
    6576:	e6e1      	b.n	633c <__aeabi_dsub+0x88>
    6578:	1c27      	adds	r7, r4, #0
    657a:	3828      	subs	r0, #40	; 0x28
    657c:	4087      	lsls	r7, r0
    657e:	2400      	movs	r4, #0
    6580:	4295      	cmp	r5, r2
    6582:	dc00      	bgt.n	6586 <__aeabi_dsub+0x2d2>
    6584:	e73e      	b.n	6404 <__aeabi_dsub+0x150>
    6586:	4929      	ldr	r1, [pc, #164]	; (662c <__aeabi_dsub+0x378>)
    6588:	1aad      	subs	r5, r5, r2
    658a:	4039      	ands	r1, r7
    658c:	e6c2      	b.n	6314 <__aeabi_dsub+0x60>
    658e:	1c20      	adds	r0, r4, #0
    6590:	f000 fa88 	bl	6aa4 <__clzsi2>
    6594:	3020      	adds	r0, #32
    6596:	e726      	b.n	63e6 <__aeabi_dsub+0x132>
    6598:	465a      	mov	r2, fp
    659a:	431a      	orrs	r2, r3
    659c:	1e53      	subs	r3, r2, #1
    659e:	419a      	sbcs	r2, r3
    65a0:	b2d2      	uxtb	r2, r2
    65a2:	2700      	movs	r7, #0
    65a4:	e70e      	b.n	63c4 <__aeabi_dsub+0x110>
    65a6:	2a00      	cmp	r2, #0
    65a8:	d000      	beq.n	65ac <__aeabi_dsub+0x2f8>
    65aa:	e0de      	b.n	676a <__aeabi_dsub+0x4b6>
    65ac:	1c68      	adds	r0, r5, #1
    65ae:	0546      	lsls	r6, r0, #21
    65b0:	0d76      	lsrs	r6, r6, #21
    65b2:	2e01      	cmp	r6, #1
    65b4:	dc00      	bgt.n	65b8 <__aeabi_dsub+0x304>
    65b6:	e090      	b.n	66da <__aeabi_dsub+0x426>
    65b8:	4d1b      	ldr	r5, [pc, #108]	; (6628 <__aeabi_dsub+0x374>)
    65ba:	42a8      	cmp	r0, r5
    65bc:	d100      	bne.n	65c0 <__aeabi_dsub+0x30c>
    65be:	e0f5      	b.n	67ac <__aeabi_dsub+0x4f8>
    65c0:	465e      	mov	r6, fp
    65c2:	1932      	adds	r2, r6, r4
    65c4:	42a2      	cmp	r2, r4
    65c6:	41a4      	sbcs	r4, r4
    65c8:	4264      	negs	r4, r4
    65ca:	1859      	adds	r1, r3, r1
    65cc:	1909      	adds	r1, r1, r4
    65ce:	07cc      	lsls	r4, r1, #31
    65d0:	0852      	lsrs	r2, r2, #1
    65d2:	4314      	orrs	r4, r2
    65d4:	0849      	lsrs	r1, r1, #1
    65d6:	1c05      	adds	r5, r0, #0
    65d8:	e69c      	b.n	6314 <__aeabi_dsub+0x60>
    65da:	4813      	ldr	r0, [pc, #76]	; (6628 <__aeabi_dsub+0x374>)
    65dc:	4285      	cmp	r5, r0
    65de:	d000      	beq.n	65e2 <__aeabi_dsub+0x32e>
    65e0:	e6d9      	b.n	6396 <__aeabi_dsub+0xe2>
    65e2:	e697      	b.n	6314 <__aeabi_dsub+0x60>
    65e4:	1c2b      	adds	r3, r5, #0
    65e6:	3b1f      	subs	r3, #31
    65e8:	1c3e      	adds	r6, r7, #0
    65ea:	40de      	lsrs	r6, r3
    65ec:	1c33      	adds	r3, r6, #0
    65ee:	2920      	cmp	r1, #32
    65f0:	d06f      	beq.n	66d2 <__aeabi_dsub+0x41e>
    65f2:	223f      	movs	r2, #63	; 0x3f
    65f4:	1b55      	subs	r5, r2, r5
    65f6:	40af      	lsls	r7, r5
    65f8:	433c      	orrs	r4, r7
    65fa:	1e60      	subs	r0, r4, #1
    65fc:	4184      	sbcs	r4, r0
    65fe:	431c      	orrs	r4, r3
    6600:	2100      	movs	r1, #0
    6602:	2500      	movs	r5, #0
    6604:	e686      	b.n	6314 <__aeabi_dsub+0x60>
    6606:	1c38      	adds	r0, r7, #0
    6608:	3820      	subs	r0, #32
    660a:	1c1e      	adds	r6, r3, #0
    660c:	40c6      	lsrs	r6, r0
    660e:	1c30      	adds	r0, r6, #0
    6610:	2f20      	cmp	r7, #32
    6612:	d060      	beq.n	66d6 <__aeabi_dsub+0x422>
    6614:	2240      	movs	r2, #64	; 0x40
    6616:	1bd7      	subs	r7, r2, r7
    6618:	40bb      	lsls	r3, r7
    661a:	465a      	mov	r2, fp
    661c:	431a      	orrs	r2, r3
    661e:	1e53      	subs	r3, r2, #1
    6620:	419a      	sbcs	r2, r3
    6622:	4302      	orrs	r2, r0
    6624:	2700      	movs	r7, #0
    6626:	e6cd      	b.n	63c4 <__aeabi_dsub+0x110>
    6628:	000007ff 	.word	0x000007ff
    662c:	ff7fffff 	.word	0xff7fffff
    6630:	800fffff 	.word	0x800fffff
    6634:	2d00      	cmp	r5, #0
    6636:	d037      	beq.n	66a8 <__aeabi_dsub+0x3f4>
    6638:	4db6      	ldr	r5, [pc, #728]	; (6914 <__aeabi_dsub+0x660>)
    663a:	42a8      	cmp	r0, r5
    663c:	d100      	bne.n	6640 <__aeabi_dsub+0x38c>
    663e:	e08f      	b.n	6760 <__aeabi_dsub+0x4ac>
    6640:	2580      	movs	r5, #128	; 0x80
    6642:	042d      	lsls	r5, r5, #16
    6644:	427f      	negs	r7, r7
    6646:	4329      	orrs	r1, r5
    6648:	2f38      	cmp	r7, #56	; 0x38
    664a:	dd00      	ble.n	664e <__aeabi_dsub+0x39a>
    664c:	e0a8      	b.n	67a0 <__aeabi_dsub+0x4ec>
    664e:	2f1f      	cmp	r7, #31
    6650:	dd00      	ble.n	6654 <__aeabi_dsub+0x3a0>
    6652:	e124      	b.n	689e <__aeabi_dsub+0x5ea>
    6654:	2520      	movs	r5, #32
    6656:	1bed      	subs	r5, r5, r7
    6658:	1c0e      	adds	r6, r1, #0
    665a:	40ae      	lsls	r6, r5
    665c:	46b0      	mov	r8, r6
    665e:	1c26      	adds	r6, r4, #0
    6660:	40fe      	lsrs	r6, r7
    6662:	4642      	mov	r2, r8
    6664:	40ac      	lsls	r4, r5
    6666:	4316      	orrs	r6, r2
    6668:	1e65      	subs	r5, r4, #1
    666a:	41ac      	sbcs	r4, r5
    666c:	4334      	orrs	r4, r6
    666e:	40f9      	lsrs	r1, r7
    6670:	465a      	mov	r2, fp
    6672:	1b14      	subs	r4, r2, r4
    6674:	45a3      	cmp	fp, r4
    6676:	4192      	sbcs	r2, r2
    6678:	1a5b      	subs	r3, r3, r1
    667a:	4252      	negs	r2, r2
    667c:	1a99      	subs	r1, r3, r2
    667e:	1c05      	adds	r5, r0, #0
    6680:	46e2      	mov	sl, ip
    6682:	e6a6      	b.n	63d2 <__aeabi_dsub+0x11e>
    6684:	1c13      	adds	r3, r2, #0
    6686:	433b      	orrs	r3, r7
    6688:	1c14      	adds	r4, r2, #0
    668a:	2b00      	cmp	r3, #0
    668c:	d000      	beq.n	6690 <__aeabi_dsub+0x3dc>
    668e:	e6a4      	b.n	63da <__aeabi_dsub+0x126>
    6690:	2700      	movs	r7, #0
    6692:	2100      	movs	r1, #0
    6694:	2500      	movs	r5, #0
    6696:	2400      	movs	r4, #0
    6698:	e6cd      	b.n	6436 <__aeabi_dsub+0x182>
    669a:	465a      	mov	r2, fp
    669c:	431a      	orrs	r2, r3
    669e:	1e53      	subs	r3, r2, #1
    66a0:	419a      	sbcs	r2, r3
    66a2:	b2d2      	uxtb	r2, r2
    66a4:	2300      	movs	r3, #0
    66a6:	e700      	b.n	64aa <__aeabi_dsub+0x1f6>
    66a8:	1c0d      	adds	r5, r1, #0
    66aa:	4325      	orrs	r5, r4
    66ac:	d058      	beq.n	6760 <__aeabi_dsub+0x4ac>
    66ae:	43ff      	mvns	r7, r7
    66b0:	2f00      	cmp	r7, #0
    66b2:	d151      	bne.n	6758 <__aeabi_dsub+0x4a4>
    66b4:	465a      	mov	r2, fp
    66b6:	1b14      	subs	r4, r2, r4
    66b8:	45a3      	cmp	fp, r4
    66ba:	4192      	sbcs	r2, r2
    66bc:	1a59      	subs	r1, r3, r1
    66be:	4252      	negs	r2, r2
    66c0:	1a89      	subs	r1, r1, r2
    66c2:	1c05      	adds	r5, r0, #0
    66c4:	46e2      	mov	sl, ip
    66c6:	e684      	b.n	63d2 <__aeabi_dsub+0x11e>
    66c8:	4892      	ldr	r0, [pc, #584]	; (6914 <__aeabi_dsub+0x660>)
    66ca:	4285      	cmp	r5, r0
    66cc:	d000      	beq.n	66d0 <__aeabi_dsub+0x41c>
    66ce:	e6d1      	b.n	6474 <__aeabi_dsub+0x1c0>
    66d0:	e620      	b.n	6314 <__aeabi_dsub+0x60>
    66d2:	2700      	movs	r7, #0
    66d4:	e790      	b.n	65f8 <__aeabi_dsub+0x344>
    66d6:	2300      	movs	r3, #0
    66d8:	e79f      	b.n	661a <__aeabi_dsub+0x366>
    66da:	1c08      	adds	r0, r1, #0
    66dc:	4320      	orrs	r0, r4
    66de:	2d00      	cmp	r5, #0
    66e0:	d000      	beq.n	66e4 <__aeabi_dsub+0x430>
    66e2:	e0c2      	b.n	686a <__aeabi_dsub+0x5b6>
    66e4:	2800      	cmp	r0, #0
    66e6:	d100      	bne.n	66ea <__aeabi_dsub+0x436>
    66e8:	e0ef      	b.n	68ca <__aeabi_dsub+0x616>
    66ea:	4658      	mov	r0, fp
    66ec:	4318      	orrs	r0, r3
    66ee:	d100      	bne.n	66f2 <__aeabi_dsub+0x43e>
    66f0:	e610      	b.n	6314 <__aeabi_dsub+0x60>
    66f2:	4658      	mov	r0, fp
    66f4:	1902      	adds	r2, r0, r4
    66f6:	42a2      	cmp	r2, r4
    66f8:	41a4      	sbcs	r4, r4
    66fa:	4264      	negs	r4, r4
    66fc:	1859      	adds	r1, r3, r1
    66fe:	1909      	adds	r1, r1, r4
    6700:	1c14      	adds	r4, r2, #0
    6702:	020a      	lsls	r2, r1, #8
    6704:	d400      	bmi.n	6708 <__aeabi_dsub+0x454>
    6706:	e605      	b.n	6314 <__aeabi_dsub+0x60>
    6708:	4b83      	ldr	r3, [pc, #524]	; (6918 <__aeabi_dsub+0x664>)
    670a:	2501      	movs	r5, #1
    670c:	4019      	ands	r1, r3
    670e:	e601      	b.n	6314 <__aeabi_dsub+0x60>
    6710:	1c08      	adds	r0, r1, #0
    6712:	4320      	orrs	r0, r4
    6714:	2d00      	cmp	r5, #0
    6716:	d138      	bne.n	678a <__aeabi_dsub+0x4d6>
    6718:	2800      	cmp	r0, #0
    671a:	d16f      	bne.n	67fc <__aeabi_dsub+0x548>
    671c:	4659      	mov	r1, fp
    671e:	4319      	orrs	r1, r3
    6720:	d003      	beq.n	672a <__aeabi_dsub+0x476>
    6722:	1c19      	adds	r1, r3, #0
    6724:	465c      	mov	r4, fp
    6726:	46e2      	mov	sl, ip
    6728:	e5f4      	b.n	6314 <__aeabi_dsub+0x60>
    672a:	2700      	movs	r7, #0
    672c:	2100      	movs	r1, #0
    672e:	2400      	movs	r4, #0
    6730:	e681      	b.n	6436 <__aeabi_dsub+0x182>
    6732:	4660      	mov	r0, ip
    6734:	3820      	subs	r0, #32
    6736:	1c1a      	adds	r2, r3, #0
    6738:	40c2      	lsrs	r2, r0
    673a:	4666      	mov	r6, ip
    673c:	1c10      	adds	r0, r2, #0
    673e:	2e20      	cmp	r6, #32
    6740:	d100      	bne.n	6744 <__aeabi_dsub+0x490>
    6742:	e0aa      	b.n	689a <__aeabi_dsub+0x5e6>
    6744:	2240      	movs	r2, #64	; 0x40
    6746:	1b92      	subs	r2, r2, r6
    6748:	4093      	lsls	r3, r2
    674a:	465a      	mov	r2, fp
    674c:	431a      	orrs	r2, r3
    674e:	1e53      	subs	r3, r2, #1
    6750:	419a      	sbcs	r2, r3
    6752:	4302      	orrs	r2, r0
    6754:	2300      	movs	r3, #0
    6756:	e6a8      	b.n	64aa <__aeabi_dsub+0x1f6>
    6758:	4d6e      	ldr	r5, [pc, #440]	; (6914 <__aeabi_dsub+0x660>)
    675a:	42a8      	cmp	r0, r5
    675c:	d000      	beq.n	6760 <__aeabi_dsub+0x4ac>
    675e:	e773      	b.n	6648 <__aeabi_dsub+0x394>
    6760:	1c19      	adds	r1, r3, #0
    6762:	465c      	mov	r4, fp
    6764:	1c05      	adds	r5, r0, #0
    6766:	46e2      	mov	sl, ip
    6768:	e5d4      	b.n	6314 <__aeabi_dsub+0x60>
    676a:	2d00      	cmp	r5, #0
    676c:	d122      	bne.n	67b4 <__aeabi_dsub+0x500>
    676e:	1c0d      	adds	r5, r1, #0
    6770:	4325      	orrs	r5, r4
    6772:	d076      	beq.n	6862 <__aeabi_dsub+0x5ae>
    6774:	43d5      	mvns	r5, r2
    6776:	2d00      	cmp	r5, #0
    6778:	d170      	bne.n	685c <__aeabi_dsub+0x5a8>
    677a:	445c      	add	r4, fp
    677c:	455c      	cmp	r4, fp
    677e:	4192      	sbcs	r2, r2
    6780:	1859      	adds	r1, r3, r1
    6782:	4252      	negs	r2, r2
    6784:	1889      	adds	r1, r1, r2
    6786:	1c05      	adds	r5, r0, #0
    6788:	e696      	b.n	64b8 <__aeabi_dsub+0x204>
    678a:	2800      	cmp	r0, #0
    678c:	d14c      	bne.n	6828 <__aeabi_dsub+0x574>
    678e:	4659      	mov	r1, fp
    6790:	4319      	orrs	r1, r3
    6792:	d100      	bne.n	6796 <__aeabi_dsub+0x4e2>
    6794:	e64a      	b.n	642c <__aeabi_dsub+0x178>
    6796:	1c19      	adds	r1, r3, #0
    6798:	465c      	mov	r4, fp
    679a:	46e2      	mov	sl, ip
    679c:	4d5d      	ldr	r5, [pc, #372]	; (6914 <__aeabi_dsub+0x660>)
    679e:	e5b9      	b.n	6314 <__aeabi_dsub+0x60>
    67a0:	430c      	orrs	r4, r1
    67a2:	1e61      	subs	r1, r4, #1
    67a4:	418c      	sbcs	r4, r1
    67a6:	b2e4      	uxtb	r4, r4
    67a8:	2100      	movs	r1, #0
    67aa:	e761      	b.n	6670 <__aeabi_dsub+0x3bc>
    67ac:	1c05      	adds	r5, r0, #0
    67ae:	2100      	movs	r1, #0
    67b0:	2400      	movs	r4, #0
    67b2:	e640      	b.n	6436 <__aeabi_dsub+0x182>
    67b4:	4d57      	ldr	r5, [pc, #348]	; (6914 <__aeabi_dsub+0x660>)
    67b6:	42a8      	cmp	r0, r5
    67b8:	d053      	beq.n	6862 <__aeabi_dsub+0x5ae>
    67ba:	4255      	negs	r5, r2
    67bc:	2280      	movs	r2, #128	; 0x80
    67be:	0416      	lsls	r6, r2, #16
    67c0:	4331      	orrs	r1, r6
    67c2:	2d38      	cmp	r5, #56	; 0x38
    67c4:	dc7b      	bgt.n	68be <__aeabi_dsub+0x60a>
    67c6:	2d1f      	cmp	r5, #31
    67c8:	dd00      	ble.n	67cc <__aeabi_dsub+0x518>
    67ca:	e08c      	b.n	68e6 <__aeabi_dsub+0x632>
    67cc:	2220      	movs	r2, #32
    67ce:	1b56      	subs	r6, r2, r5
    67d0:	1c0a      	adds	r2, r1, #0
    67d2:	46b4      	mov	ip, r6
    67d4:	40b2      	lsls	r2, r6
    67d6:	1c26      	adds	r6, r4, #0
    67d8:	40ee      	lsrs	r6, r5
    67da:	4332      	orrs	r2, r6
    67dc:	4690      	mov	r8, r2
    67de:	4662      	mov	r2, ip
    67e0:	4094      	lsls	r4, r2
    67e2:	1e66      	subs	r6, r4, #1
    67e4:	41b4      	sbcs	r4, r6
    67e6:	4642      	mov	r2, r8
    67e8:	4314      	orrs	r4, r2
    67ea:	40e9      	lsrs	r1, r5
    67ec:	445c      	add	r4, fp
    67ee:	455c      	cmp	r4, fp
    67f0:	4192      	sbcs	r2, r2
    67f2:	18cb      	adds	r3, r1, r3
    67f4:	4252      	negs	r2, r2
    67f6:	1899      	adds	r1, r3, r2
    67f8:	1c05      	adds	r5, r0, #0
    67fa:	e65d      	b.n	64b8 <__aeabi_dsub+0x204>
    67fc:	4658      	mov	r0, fp
    67fe:	4318      	orrs	r0, r3
    6800:	d100      	bne.n	6804 <__aeabi_dsub+0x550>
    6802:	e587      	b.n	6314 <__aeabi_dsub+0x60>
    6804:	465e      	mov	r6, fp
    6806:	1ba7      	subs	r7, r4, r6
    6808:	42bc      	cmp	r4, r7
    680a:	4192      	sbcs	r2, r2
    680c:	1ac8      	subs	r0, r1, r3
    680e:	4252      	negs	r2, r2
    6810:	1a80      	subs	r0, r0, r2
    6812:	0206      	lsls	r6, r0, #8
    6814:	d560      	bpl.n	68d8 <__aeabi_dsub+0x624>
    6816:	4658      	mov	r0, fp
    6818:	1b04      	subs	r4, r0, r4
    681a:	45a3      	cmp	fp, r4
    681c:	4192      	sbcs	r2, r2
    681e:	1a59      	subs	r1, r3, r1
    6820:	4252      	negs	r2, r2
    6822:	1a89      	subs	r1, r1, r2
    6824:	46e2      	mov	sl, ip
    6826:	e575      	b.n	6314 <__aeabi_dsub+0x60>
    6828:	4658      	mov	r0, fp
    682a:	4318      	orrs	r0, r3
    682c:	d033      	beq.n	6896 <__aeabi_dsub+0x5e2>
    682e:	0748      	lsls	r0, r1, #29
    6830:	08e4      	lsrs	r4, r4, #3
    6832:	4304      	orrs	r4, r0
    6834:	2080      	movs	r0, #128	; 0x80
    6836:	08c9      	lsrs	r1, r1, #3
    6838:	0300      	lsls	r0, r0, #12
    683a:	4201      	tst	r1, r0
    683c:	d008      	beq.n	6850 <__aeabi_dsub+0x59c>
    683e:	08dd      	lsrs	r5, r3, #3
    6840:	4205      	tst	r5, r0
    6842:	d105      	bne.n	6850 <__aeabi_dsub+0x59c>
    6844:	4659      	mov	r1, fp
    6846:	08ca      	lsrs	r2, r1, #3
    6848:	075c      	lsls	r4, r3, #29
    684a:	4314      	orrs	r4, r2
    684c:	1c29      	adds	r1, r5, #0
    684e:	46e2      	mov	sl, ip
    6850:	0f63      	lsrs	r3, r4, #29
    6852:	00c9      	lsls	r1, r1, #3
    6854:	4319      	orrs	r1, r3
    6856:	00e4      	lsls	r4, r4, #3
    6858:	4d2e      	ldr	r5, [pc, #184]	; (6914 <__aeabi_dsub+0x660>)
    685a:	e55b      	b.n	6314 <__aeabi_dsub+0x60>
    685c:	4a2d      	ldr	r2, [pc, #180]	; (6914 <__aeabi_dsub+0x660>)
    685e:	4290      	cmp	r0, r2
    6860:	d1af      	bne.n	67c2 <__aeabi_dsub+0x50e>
    6862:	1c19      	adds	r1, r3, #0
    6864:	465c      	mov	r4, fp
    6866:	1c05      	adds	r5, r0, #0
    6868:	e554      	b.n	6314 <__aeabi_dsub+0x60>
    686a:	2800      	cmp	r0, #0
    686c:	d030      	beq.n	68d0 <__aeabi_dsub+0x61c>
    686e:	4658      	mov	r0, fp
    6870:	4318      	orrs	r0, r3
    6872:	d010      	beq.n	6896 <__aeabi_dsub+0x5e2>
    6874:	2580      	movs	r5, #128	; 0x80
    6876:	0748      	lsls	r0, r1, #29
    6878:	08e4      	lsrs	r4, r4, #3
    687a:	08c9      	lsrs	r1, r1, #3
    687c:	032d      	lsls	r5, r5, #12
    687e:	4304      	orrs	r4, r0
    6880:	4229      	tst	r1, r5
    6882:	d0e5      	beq.n	6850 <__aeabi_dsub+0x59c>
    6884:	08d8      	lsrs	r0, r3, #3
    6886:	4228      	tst	r0, r5
    6888:	d1e2      	bne.n	6850 <__aeabi_dsub+0x59c>
    688a:	465d      	mov	r5, fp
    688c:	08ea      	lsrs	r2, r5, #3
    688e:	075c      	lsls	r4, r3, #29
    6890:	4314      	orrs	r4, r2
    6892:	1c01      	adds	r1, r0, #0
    6894:	e7dc      	b.n	6850 <__aeabi_dsub+0x59c>
    6896:	4d1f      	ldr	r5, [pc, #124]	; (6914 <__aeabi_dsub+0x660>)
    6898:	e53c      	b.n	6314 <__aeabi_dsub+0x60>
    689a:	2300      	movs	r3, #0
    689c:	e755      	b.n	674a <__aeabi_dsub+0x496>
    689e:	1c3d      	adds	r5, r7, #0
    68a0:	3d20      	subs	r5, #32
    68a2:	1c0e      	adds	r6, r1, #0
    68a4:	40ee      	lsrs	r6, r5
    68a6:	1c35      	adds	r5, r6, #0
    68a8:	2f20      	cmp	r7, #32
    68aa:	d02e      	beq.n	690a <__aeabi_dsub+0x656>
    68ac:	2640      	movs	r6, #64	; 0x40
    68ae:	1bf7      	subs	r7, r6, r7
    68b0:	40b9      	lsls	r1, r7
    68b2:	430c      	orrs	r4, r1
    68b4:	1e61      	subs	r1, r4, #1
    68b6:	418c      	sbcs	r4, r1
    68b8:	432c      	orrs	r4, r5
    68ba:	2100      	movs	r1, #0
    68bc:	e6d8      	b.n	6670 <__aeabi_dsub+0x3bc>
    68be:	430c      	orrs	r4, r1
    68c0:	1e61      	subs	r1, r4, #1
    68c2:	418c      	sbcs	r4, r1
    68c4:	b2e4      	uxtb	r4, r4
    68c6:	2100      	movs	r1, #0
    68c8:	e790      	b.n	67ec <__aeabi_dsub+0x538>
    68ca:	1c19      	adds	r1, r3, #0
    68cc:	465c      	mov	r4, fp
    68ce:	e521      	b.n	6314 <__aeabi_dsub+0x60>
    68d0:	1c19      	adds	r1, r3, #0
    68d2:	465c      	mov	r4, fp
    68d4:	4d0f      	ldr	r5, [pc, #60]	; (6914 <__aeabi_dsub+0x660>)
    68d6:	e51d      	b.n	6314 <__aeabi_dsub+0x60>
    68d8:	1c03      	adds	r3, r0, #0
    68da:	433b      	orrs	r3, r7
    68dc:	d100      	bne.n	68e0 <__aeabi_dsub+0x62c>
    68de:	e724      	b.n	672a <__aeabi_dsub+0x476>
    68e0:	1c01      	adds	r1, r0, #0
    68e2:	1c3c      	adds	r4, r7, #0
    68e4:	e516      	b.n	6314 <__aeabi_dsub+0x60>
    68e6:	2620      	movs	r6, #32
    68e8:	4276      	negs	r6, r6
    68ea:	1976      	adds	r6, r6, r5
    68ec:	1c0a      	adds	r2, r1, #0
    68ee:	40f2      	lsrs	r2, r6
    68f0:	4690      	mov	r8, r2
    68f2:	2d20      	cmp	r5, #32
    68f4:	d00b      	beq.n	690e <__aeabi_dsub+0x65a>
    68f6:	2640      	movs	r6, #64	; 0x40
    68f8:	1b75      	subs	r5, r6, r5
    68fa:	40a9      	lsls	r1, r5
    68fc:	430c      	orrs	r4, r1
    68fe:	1e61      	subs	r1, r4, #1
    6900:	418c      	sbcs	r4, r1
    6902:	4645      	mov	r5, r8
    6904:	432c      	orrs	r4, r5
    6906:	2100      	movs	r1, #0
    6908:	e770      	b.n	67ec <__aeabi_dsub+0x538>
    690a:	2100      	movs	r1, #0
    690c:	e7d1      	b.n	68b2 <__aeabi_dsub+0x5fe>
    690e:	2100      	movs	r1, #0
    6910:	e7f4      	b.n	68fc <__aeabi_dsub+0x648>
    6912:	46c0      	nop			; (mov r8, r8)
    6914:	000007ff 	.word	0x000007ff
    6918:	ff7fffff 	.word	0xff7fffff

0000691c <__aeabi_d2iz>:
    691c:	b570      	push	{r4, r5, r6, lr}
    691e:	1c0b      	adds	r3, r1, #0
    6920:	4c12      	ldr	r4, [pc, #72]	; (696c <__aeabi_d2iz+0x50>)
    6922:	0309      	lsls	r1, r1, #12
    6924:	0b0e      	lsrs	r6, r1, #12
    6926:	0059      	lsls	r1, r3, #1
    6928:	1c02      	adds	r2, r0, #0
    692a:	0d49      	lsrs	r1, r1, #21
    692c:	0fdd      	lsrs	r5, r3, #31
    692e:	2000      	movs	r0, #0
    6930:	42a1      	cmp	r1, r4
    6932:	dd11      	ble.n	6958 <__aeabi_d2iz+0x3c>
    6934:	480e      	ldr	r0, [pc, #56]	; (6970 <__aeabi_d2iz+0x54>)
    6936:	4281      	cmp	r1, r0
    6938:	dc0f      	bgt.n	695a <__aeabi_d2iz+0x3e>
    693a:	2080      	movs	r0, #128	; 0x80
    693c:	0340      	lsls	r0, r0, #13
    693e:	4306      	orrs	r6, r0
    6940:	480c      	ldr	r0, [pc, #48]	; (6974 <__aeabi_d2iz+0x58>)
    6942:	1a40      	subs	r0, r0, r1
    6944:	281f      	cmp	r0, #31
    6946:	dd0b      	ble.n	6960 <__aeabi_d2iz+0x44>
    6948:	4a0b      	ldr	r2, [pc, #44]	; (6978 <__aeabi_d2iz+0x5c>)
    694a:	1a52      	subs	r2, r2, r1
    694c:	40d6      	lsrs	r6, r2
    694e:	1c32      	adds	r2, r6, #0
    6950:	4250      	negs	r0, r2
    6952:	2d00      	cmp	r5, #0
    6954:	d100      	bne.n	6958 <__aeabi_d2iz+0x3c>
    6956:	1c10      	adds	r0, r2, #0
    6958:	bd70      	pop	{r4, r5, r6, pc}
    695a:	4b08      	ldr	r3, [pc, #32]	; (697c <__aeabi_d2iz+0x60>)
    695c:	18e8      	adds	r0, r5, r3
    695e:	e7fb      	b.n	6958 <__aeabi_d2iz+0x3c>
    6960:	4b07      	ldr	r3, [pc, #28]	; (6980 <__aeabi_d2iz+0x64>)
    6962:	40c2      	lsrs	r2, r0
    6964:	18c9      	adds	r1, r1, r3
    6966:	408e      	lsls	r6, r1
    6968:	4332      	orrs	r2, r6
    696a:	e7f1      	b.n	6950 <__aeabi_d2iz+0x34>
    696c:	000003fe 	.word	0x000003fe
    6970:	0000041d 	.word	0x0000041d
    6974:	00000433 	.word	0x00000433
    6978:	00000413 	.word	0x00000413
    697c:	7fffffff 	.word	0x7fffffff
    6980:	fffffbed 	.word	0xfffffbed

00006984 <__aeabi_f2d>:
    6984:	0043      	lsls	r3, r0, #1
    6986:	0e1b      	lsrs	r3, r3, #24
    6988:	1c5a      	adds	r2, r3, #1
    698a:	0241      	lsls	r1, r0, #9
    698c:	b2d2      	uxtb	r2, r2
    698e:	b570      	push	{r4, r5, r6, lr}
    6990:	0a4c      	lsrs	r4, r1, #9
    6992:	0fc5      	lsrs	r5, r0, #31
    6994:	2a01      	cmp	r2, #1
    6996:	dd17      	ble.n	69c8 <__aeabi_f2d+0x44>
    6998:	22e0      	movs	r2, #224	; 0xe0
    699a:	0092      	lsls	r2, r2, #2
    699c:	0764      	lsls	r4, r4, #29
    699e:	0b09      	lsrs	r1, r1, #12
    69a0:	1898      	adds	r0, r3, r2
    69a2:	2200      	movs	r2, #0
    69a4:	2300      	movs	r3, #0
    69a6:	0d1e      	lsrs	r6, r3, #20
    69a8:	1c22      	adds	r2, r4, #0
    69aa:	0534      	lsls	r4, r6, #20
    69ac:	430c      	orrs	r4, r1
    69ae:	491b      	ldr	r1, [pc, #108]	; (6a1c <__aeabi_f2d+0x98>)
    69b0:	0540      	lsls	r0, r0, #21
    69b2:	0840      	lsrs	r0, r0, #1
    69b4:	4021      	ands	r1, r4
    69b6:	4301      	orrs	r1, r0
    69b8:	0049      	lsls	r1, r1, #1
    69ba:	0849      	lsrs	r1, r1, #1
    69bc:	07ed      	lsls	r5, r5, #31
    69be:	1c0b      	adds	r3, r1, #0
    69c0:	432b      	orrs	r3, r5
    69c2:	1c10      	adds	r0, r2, #0
    69c4:	1c19      	adds	r1, r3, #0
    69c6:	bd70      	pop	{r4, r5, r6, pc}
    69c8:	2b00      	cmp	r3, #0
    69ca:	d115      	bne.n	69f8 <__aeabi_f2d+0x74>
    69cc:	2c00      	cmp	r4, #0
    69ce:	d01c      	beq.n	6a0a <__aeabi_f2d+0x86>
    69d0:	1c20      	adds	r0, r4, #0
    69d2:	f000 f867 	bl	6aa4 <__clzsi2>
    69d6:	280a      	cmp	r0, #10
    69d8:	dc1a      	bgt.n	6a10 <__aeabi_f2d+0x8c>
    69da:	210b      	movs	r1, #11
    69dc:	1a09      	subs	r1, r1, r0
    69de:	1c23      	adds	r3, r4, #0
    69e0:	40cb      	lsrs	r3, r1
    69e2:	1c19      	adds	r1, r3, #0
    69e4:	1c03      	adds	r3, r0, #0
    69e6:	3315      	adds	r3, #21
    69e8:	409c      	lsls	r4, r3
    69ea:	4b0d      	ldr	r3, [pc, #52]	; (6a20 <__aeabi_f2d+0x9c>)
    69ec:	0309      	lsls	r1, r1, #12
    69ee:	1a18      	subs	r0, r3, r0
    69f0:	0540      	lsls	r0, r0, #21
    69f2:	0b09      	lsrs	r1, r1, #12
    69f4:	0d40      	lsrs	r0, r0, #21
    69f6:	e7d4      	b.n	69a2 <__aeabi_f2d+0x1e>
    69f8:	2c00      	cmp	r4, #0
    69fa:	d003      	beq.n	6a04 <__aeabi_f2d+0x80>
    69fc:	0764      	lsls	r4, r4, #29
    69fe:	0b09      	lsrs	r1, r1, #12
    6a00:	4808      	ldr	r0, [pc, #32]	; (6a24 <__aeabi_f2d+0xa0>)
    6a02:	e7ce      	b.n	69a2 <__aeabi_f2d+0x1e>
    6a04:	4807      	ldr	r0, [pc, #28]	; (6a24 <__aeabi_f2d+0xa0>)
    6a06:	2100      	movs	r1, #0
    6a08:	e7cb      	b.n	69a2 <__aeabi_f2d+0x1e>
    6a0a:	2000      	movs	r0, #0
    6a0c:	2100      	movs	r1, #0
    6a0e:	e7c8      	b.n	69a2 <__aeabi_f2d+0x1e>
    6a10:	1c01      	adds	r1, r0, #0
    6a12:	390b      	subs	r1, #11
    6a14:	408c      	lsls	r4, r1
    6a16:	1c21      	adds	r1, r4, #0
    6a18:	2400      	movs	r4, #0
    6a1a:	e7e6      	b.n	69ea <__aeabi_f2d+0x66>
    6a1c:	800fffff 	.word	0x800fffff
    6a20:	00000389 	.word	0x00000389
    6a24:	000007ff 	.word	0x000007ff

00006a28 <__aeabi_cdrcmple>:
    6a28:	4684      	mov	ip, r0
    6a2a:	1c10      	adds	r0, r2, #0
    6a2c:	4662      	mov	r2, ip
    6a2e:	468c      	mov	ip, r1
    6a30:	1c19      	adds	r1, r3, #0
    6a32:	4663      	mov	r3, ip
    6a34:	e000      	b.n	6a38 <__aeabi_cdcmpeq>
    6a36:	46c0      	nop			; (mov r8, r8)

00006a38 <__aeabi_cdcmpeq>:
    6a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6a3a:	f000 f919 	bl	6c70 <__ledf2>
    6a3e:	2800      	cmp	r0, #0
    6a40:	d401      	bmi.n	6a46 <__aeabi_cdcmpeq+0xe>
    6a42:	2100      	movs	r1, #0
    6a44:	42c8      	cmn	r0, r1
    6a46:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006a48 <__aeabi_dcmpeq>:
    6a48:	b510      	push	{r4, lr}
    6a4a:	f000 f849 	bl	6ae0 <__eqdf2>
    6a4e:	4240      	negs	r0, r0
    6a50:	3001      	adds	r0, #1
    6a52:	bd10      	pop	{r4, pc}

00006a54 <__aeabi_dcmplt>:
    6a54:	b510      	push	{r4, lr}
    6a56:	f000 f90b 	bl	6c70 <__ledf2>
    6a5a:	2800      	cmp	r0, #0
    6a5c:	db01      	blt.n	6a62 <__aeabi_dcmplt+0xe>
    6a5e:	2000      	movs	r0, #0
    6a60:	bd10      	pop	{r4, pc}
    6a62:	2001      	movs	r0, #1
    6a64:	bd10      	pop	{r4, pc}
    6a66:	46c0      	nop			; (mov r8, r8)

00006a68 <__aeabi_dcmple>:
    6a68:	b510      	push	{r4, lr}
    6a6a:	f000 f901 	bl	6c70 <__ledf2>
    6a6e:	2800      	cmp	r0, #0
    6a70:	dd01      	ble.n	6a76 <__aeabi_dcmple+0xe>
    6a72:	2000      	movs	r0, #0
    6a74:	bd10      	pop	{r4, pc}
    6a76:	2001      	movs	r0, #1
    6a78:	bd10      	pop	{r4, pc}
    6a7a:	46c0      	nop			; (mov r8, r8)

00006a7c <__aeabi_dcmpgt>:
    6a7c:	b510      	push	{r4, lr}
    6a7e:	f000 f879 	bl	6b74 <__gedf2>
    6a82:	2800      	cmp	r0, #0
    6a84:	dc01      	bgt.n	6a8a <__aeabi_dcmpgt+0xe>
    6a86:	2000      	movs	r0, #0
    6a88:	bd10      	pop	{r4, pc}
    6a8a:	2001      	movs	r0, #1
    6a8c:	bd10      	pop	{r4, pc}
    6a8e:	46c0      	nop			; (mov r8, r8)

00006a90 <__aeabi_dcmpge>:
    6a90:	b510      	push	{r4, lr}
    6a92:	f000 f86f 	bl	6b74 <__gedf2>
    6a96:	2800      	cmp	r0, #0
    6a98:	da01      	bge.n	6a9e <__aeabi_dcmpge+0xe>
    6a9a:	2000      	movs	r0, #0
    6a9c:	bd10      	pop	{r4, pc}
    6a9e:	2001      	movs	r0, #1
    6aa0:	bd10      	pop	{r4, pc}
    6aa2:	46c0      	nop			; (mov r8, r8)

00006aa4 <__clzsi2>:
    6aa4:	211c      	movs	r1, #28
    6aa6:	2301      	movs	r3, #1
    6aa8:	041b      	lsls	r3, r3, #16
    6aaa:	4298      	cmp	r0, r3
    6aac:	d301      	bcc.n	6ab2 <__clzsi2+0xe>
    6aae:	0c00      	lsrs	r0, r0, #16
    6ab0:	3910      	subs	r1, #16
    6ab2:	0a1b      	lsrs	r3, r3, #8
    6ab4:	4298      	cmp	r0, r3
    6ab6:	d301      	bcc.n	6abc <__clzsi2+0x18>
    6ab8:	0a00      	lsrs	r0, r0, #8
    6aba:	3908      	subs	r1, #8
    6abc:	091b      	lsrs	r3, r3, #4
    6abe:	4298      	cmp	r0, r3
    6ac0:	d301      	bcc.n	6ac6 <__clzsi2+0x22>
    6ac2:	0900      	lsrs	r0, r0, #4
    6ac4:	3904      	subs	r1, #4
    6ac6:	a202      	add	r2, pc, #8	; (adr r2, 6ad0 <__clzsi2+0x2c>)
    6ac8:	5c10      	ldrb	r0, [r2, r0]
    6aca:	1840      	adds	r0, r0, r1
    6acc:	4770      	bx	lr
    6ace:	46c0      	nop			; (mov r8, r8)
    6ad0:	02020304 	.word	0x02020304
    6ad4:	01010101 	.word	0x01010101
	...

00006ae0 <__eqdf2>:
    6ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ae2:	465f      	mov	r7, fp
    6ae4:	4656      	mov	r6, sl
    6ae6:	464d      	mov	r5, r9
    6ae8:	4644      	mov	r4, r8
    6aea:	b4f0      	push	{r4, r5, r6, r7}
    6aec:	1c0d      	adds	r5, r1, #0
    6aee:	1c04      	adds	r4, r0, #0
    6af0:	4680      	mov	r8, r0
    6af2:	0fe8      	lsrs	r0, r5, #31
    6af4:	4681      	mov	r9, r0
    6af6:	0318      	lsls	r0, r3, #12
    6af8:	030f      	lsls	r7, r1, #12
    6afa:	0b00      	lsrs	r0, r0, #12
    6afc:	0b3f      	lsrs	r7, r7, #12
    6afe:	b083      	sub	sp, #12
    6b00:	4684      	mov	ip, r0
    6b02:	481b      	ldr	r0, [pc, #108]	; (6b70 <__eqdf2+0x90>)
    6b04:	9700      	str	r7, [sp, #0]
    6b06:	0049      	lsls	r1, r1, #1
    6b08:	005e      	lsls	r6, r3, #1
    6b0a:	0fdf      	lsrs	r7, r3, #31
    6b0c:	0d49      	lsrs	r1, r1, #21
    6b0e:	4692      	mov	sl, r2
    6b10:	0d76      	lsrs	r6, r6, #21
    6b12:	46bb      	mov	fp, r7
    6b14:	4281      	cmp	r1, r0
    6b16:	d00c      	beq.n	6b32 <__eqdf2+0x52>
    6b18:	4815      	ldr	r0, [pc, #84]	; (6b70 <__eqdf2+0x90>)
    6b1a:	4286      	cmp	r6, r0
    6b1c:	d010      	beq.n	6b40 <__eqdf2+0x60>
    6b1e:	2001      	movs	r0, #1
    6b20:	42b1      	cmp	r1, r6
    6b22:	d015      	beq.n	6b50 <__eqdf2+0x70>
    6b24:	b003      	add	sp, #12
    6b26:	bc3c      	pop	{r2, r3, r4, r5}
    6b28:	4690      	mov	r8, r2
    6b2a:	4699      	mov	r9, r3
    6b2c:	46a2      	mov	sl, r4
    6b2e:	46ab      	mov	fp, r5
    6b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b32:	9f00      	ldr	r7, [sp, #0]
    6b34:	2001      	movs	r0, #1
    6b36:	4327      	orrs	r7, r4
    6b38:	d1f4      	bne.n	6b24 <__eqdf2+0x44>
    6b3a:	480d      	ldr	r0, [pc, #52]	; (6b70 <__eqdf2+0x90>)
    6b3c:	4286      	cmp	r6, r0
    6b3e:	d1ee      	bne.n	6b1e <__eqdf2+0x3e>
    6b40:	4660      	mov	r0, ip
    6b42:	4302      	orrs	r2, r0
    6b44:	2001      	movs	r0, #1
    6b46:	2a00      	cmp	r2, #0
    6b48:	d1ec      	bne.n	6b24 <__eqdf2+0x44>
    6b4a:	2001      	movs	r0, #1
    6b4c:	42b1      	cmp	r1, r6
    6b4e:	d1e9      	bne.n	6b24 <__eqdf2+0x44>
    6b50:	9b00      	ldr	r3, [sp, #0]
    6b52:	4563      	cmp	r3, ip
    6b54:	d1e6      	bne.n	6b24 <__eqdf2+0x44>
    6b56:	45d0      	cmp	r8, sl
    6b58:	d1e4      	bne.n	6b24 <__eqdf2+0x44>
    6b5a:	45d9      	cmp	r9, fp
    6b5c:	d006      	beq.n	6b6c <__eqdf2+0x8c>
    6b5e:	2900      	cmp	r1, #0
    6b60:	d1e0      	bne.n	6b24 <__eqdf2+0x44>
    6b62:	431c      	orrs	r4, r3
    6b64:	1c20      	adds	r0, r4, #0
    6b66:	1e44      	subs	r4, r0, #1
    6b68:	41a0      	sbcs	r0, r4
    6b6a:	e7db      	b.n	6b24 <__eqdf2+0x44>
    6b6c:	2000      	movs	r0, #0
    6b6e:	e7d9      	b.n	6b24 <__eqdf2+0x44>
    6b70:	000007ff 	.word	0x000007ff

00006b74 <__gedf2>:
    6b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b76:	465f      	mov	r7, fp
    6b78:	4656      	mov	r6, sl
    6b7a:	464d      	mov	r5, r9
    6b7c:	4644      	mov	r4, r8
    6b7e:	b4f0      	push	{r4, r5, r6, r7}
    6b80:	0fcd      	lsrs	r5, r1, #31
    6b82:	0fde      	lsrs	r6, r3, #31
    6b84:	46ac      	mov	ip, r5
    6b86:	031d      	lsls	r5, r3, #12
    6b88:	0b2d      	lsrs	r5, r5, #12
    6b8a:	46b1      	mov	r9, r6
    6b8c:	4e37      	ldr	r6, [pc, #220]	; (6c6c <__gedf2+0xf8>)
    6b8e:	030f      	lsls	r7, r1, #12
    6b90:	004c      	lsls	r4, r1, #1
    6b92:	46ab      	mov	fp, r5
    6b94:	005d      	lsls	r5, r3, #1
    6b96:	4680      	mov	r8, r0
    6b98:	0b3f      	lsrs	r7, r7, #12
    6b9a:	0d64      	lsrs	r4, r4, #21
    6b9c:	4692      	mov	sl, r2
    6b9e:	0d6d      	lsrs	r5, r5, #21
    6ba0:	42b4      	cmp	r4, r6
    6ba2:	d032      	beq.n	6c0a <__gedf2+0x96>
    6ba4:	4e31      	ldr	r6, [pc, #196]	; (6c6c <__gedf2+0xf8>)
    6ba6:	42b5      	cmp	r5, r6
    6ba8:	d035      	beq.n	6c16 <__gedf2+0xa2>
    6baa:	2c00      	cmp	r4, #0
    6bac:	d10e      	bne.n	6bcc <__gedf2+0x58>
    6bae:	4338      	orrs	r0, r7
    6bb0:	4241      	negs	r1, r0
    6bb2:	4141      	adcs	r1, r0
    6bb4:	1c08      	adds	r0, r1, #0
    6bb6:	2d00      	cmp	r5, #0
    6bb8:	d00b      	beq.n	6bd2 <__gedf2+0x5e>
    6bba:	2900      	cmp	r1, #0
    6bbc:	d119      	bne.n	6bf2 <__gedf2+0x7e>
    6bbe:	45cc      	cmp	ip, r9
    6bc0:	d02d      	beq.n	6c1e <__gedf2+0xaa>
    6bc2:	4665      	mov	r5, ip
    6bc4:	4268      	negs	r0, r5
    6bc6:	2301      	movs	r3, #1
    6bc8:	4318      	orrs	r0, r3
    6bca:	e018      	b.n	6bfe <__gedf2+0x8a>
    6bcc:	2d00      	cmp	r5, #0
    6bce:	d1f6      	bne.n	6bbe <__gedf2+0x4a>
    6bd0:	1c28      	adds	r0, r5, #0
    6bd2:	4659      	mov	r1, fp
    6bd4:	430a      	orrs	r2, r1
    6bd6:	4253      	negs	r3, r2
    6bd8:	4153      	adcs	r3, r2
    6bda:	2800      	cmp	r0, #0
    6bdc:	d106      	bne.n	6bec <__gedf2+0x78>
    6bde:	2b00      	cmp	r3, #0
    6be0:	d0ed      	beq.n	6bbe <__gedf2+0x4a>
    6be2:	4663      	mov	r3, ip
    6be4:	4258      	negs	r0, r3
    6be6:	2301      	movs	r3, #1
    6be8:	4318      	orrs	r0, r3
    6bea:	e008      	b.n	6bfe <__gedf2+0x8a>
    6bec:	2000      	movs	r0, #0
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d105      	bne.n	6bfe <__gedf2+0x8a>
    6bf2:	464a      	mov	r2, r9
    6bf4:	4250      	negs	r0, r2
    6bf6:	4150      	adcs	r0, r2
    6bf8:	4240      	negs	r0, r0
    6bfa:	2301      	movs	r3, #1
    6bfc:	4318      	orrs	r0, r3
    6bfe:	bc3c      	pop	{r2, r3, r4, r5}
    6c00:	4690      	mov	r8, r2
    6c02:	4699      	mov	r9, r3
    6c04:	46a2      	mov	sl, r4
    6c06:	46ab      	mov	fp, r5
    6c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c0a:	1c3e      	adds	r6, r7, #0
    6c0c:	4306      	orrs	r6, r0
    6c0e:	d0c9      	beq.n	6ba4 <__gedf2+0x30>
    6c10:	2002      	movs	r0, #2
    6c12:	4240      	negs	r0, r0
    6c14:	e7f3      	b.n	6bfe <__gedf2+0x8a>
    6c16:	465e      	mov	r6, fp
    6c18:	4316      	orrs	r6, r2
    6c1a:	d0c6      	beq.n	6baa <__gedf2+0x36>
    6c1c:	e7f8      	b.n	6c10 <__gedf2+0x9c>
    6c1e:	42ac      	cmp	r4, r5
    6c20:	dc07      	bgt.n	6c32 <__gedf2+0xbe>
    6c22:	da0b      	bge.n	6c3c <__gedf2+0xc8>
    6c24:	4661      	mov	r1, ip
    6c26:	4248      	negs	r0, r1
    6c28:	4148      	adcs	r0, r1
    6c2a:	4240      	negs	r0, r0
    6c2c:	2301      	movs	r3, #1
    6c2e:	4318      	orrs	r0, r3
    6c30:	e7e5      	b.n	6bfe <__gedf2+0x8a>
    6c32:	4666      	mov	r6, ip
    6c34:	4270      	negs	r0, r6
    6c36:	2301      	movs	r3, #1
    6c38:	4318      	orrs	r0, r3
    6c3a:	e7e0      	b.n	6bfe <__gedf2+0x8a>
    6c3c:	455f      	cmp	r7, fp
    6c3e:	d80a      	bhi.n	6c56 <__gedf2+0xe2>
    6c40:	d00e      	beq.n	6c60 <__gedf2+0xec>
    6c42:	2000      	movs	r0, #0
    6c44:	455f      	cmp	r7, fp
    6c46:	d2da      	bcs.n	6bfe <__gedf2+0x8a>
    6c48:	4665      	mov	r5, ip
    6c4a:	4268      	negs	r0, r5
    6c4c:	4168      	adcs	r0, r5
    6c4e:	4240      	negs	r0, r0
    6c50:	2301      	movs	r3, #1
    6c52:	4318      	orrs	r0, r3
    6c54:	e7d3      	b.n	6bfe <__gedf2+0x8a>
    6c56:	4662      	mov	r2, ip
    6c58:	4250      	negs	r0, r2
    6c5a:	2301      	movs	r3, #1
    6c5c:	4318      	orrs	r0, r3
    6c5e:	e7ce      	b.n	6bfe <__gedf2+0x8a>
    6c60:	45d0      	cmp	r8, sl
    6c62:	d8f8      	bhi.n	6c56 <__gedf2+0xe2>
    6c64:	2000      	movs	r0, #0
    6c66:	45d0      	cmp	r8, sl
    6c68:	d3ee      	bcc.n	6c48 <__gedf2+0xd4>
    6c6a:	e7c8      	b.n	6bfe <__gedf2+0x8a>
    6c6c:	000007ff 	.word	0x000007ff

00006c70 <__ledf2>:
    6c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c72:	4656      	mov	r6, sl
    6c74:	464d      	mov	r5, r9
    6c76:	4644      	mov	r4, r8
    6c78:	465f      	mov	r7, fp
    6c7a:	b4f0      	push	{r4, r5, r6, r7}
    6c7c:	1c0d      	adds	r5, r1, #0
    6c7e:	b083      	sub	sp, #12
    6c80:	1c04      	adds	r4, r0, #0
    6c82:	9001      	str	r0, [sp, #4]
    6c84:	0fe8      	lsrs	r0, r5, #31
    6c86:	4681      	mov	r9, r0
    6c88:	0318      	lsls	r0, r3, #12
    6c8a:	030f      	lsls	r7, r1, #12
    6c8c:	0b00      	lsrs	r0, r0, #12
    6c8e:	0b3f      	lsrs	r7, r7, #12
    6c90:	4684      	mov	ip, r0
    6c92:	4835      	ldr	r0, [pc, #212]	; (6d68 <__ledf2+0xf8>)
    6c94:	9700      	str	r7, [sp, #0]
    6c96:	0049      	lsls	r1, r1, #1
    6c98:	005e      	lsls	r6, r3, #1
    6c9a:	0fdf      	lsrs	r7, r3, #31
    6c9c:	0d49      	lsrs	r1, r1, #21
    6c9e:	4692      	mov	sl, r2
    6ca0:	0d76      	lsrs	r6, r6, #21
    6ca2:	46b8      	mov	r8, r7
    6ca4:	4281      	cmp	r1, r0
    6ca6:	d034      	beq.n	6d12 <__ledf2+0xa2>
    6ca8:	482f      	ldr	r0, [pc, #188]	; (6d68 <__ledf2+0xf8>)
    6caa:	4286      	cmp	r6, r0
    6cac:	d036      	beq.n	6d1c <__ledf2+0xac>
    6cae:	2900      	cmp	r1, #0
    6cb0:	d018      	beq.n	6ce4 <__ledf2+0x74>
    6cb2:	2e00      	cmp	r6, #0
    6cb4:	d11f      	bne.n	6cf6 <__ledf2+0x86>
    6cb6:	1c34      	adds	r4, r6, #0
    6cb8:	4667      	mov	r7, ip
    6cba:	433a      	orrs	r2, r7
    6cbc:	4253      	negs	r3, r2
    6cbe:	4153      	adcs	r3, r2
    6cc0:	2c00      	cmp	r4, #0
    6cc2:	d01f      	beq.n	6d04 <__ledf2+0x94>
    6cc4:	2000      	movs	r0, #0
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	d105      	bne.n	6cd6 <__ledf2+0x66>
    6cca:	4642      	mov	r2, r8
    6ccc:	4250      	negs	r0, r2
    6cce:	4150      	adcs	r0, r2
    6cd0:	4240      	negs	r0, r0
    6cd2:	2301      	movs	r3, #1
    6cd4:	4318      	orrs	r0, r3
    6cd6:	b003      	add	sp, #12
    6cd8:	bc3c      	pop	{r2, r3, r4, r5}
    6cda:	4690      	mov	r8, r2
    6cdc:	4699      	mov	r9, r3
    6cde:	46a2      	mov	sl, r4
    6ce0:	46ab      	mov	fp, r5
    6ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ce4:	9800      	ldr	r0, [sp, #0]
    6ce6:	4304      	orrs	r4, r0
    6ce8:	4260      	negs	r0, r4
    6cea:	4160      	adcs	r0, r4
    6cec:	1c04      	adds	r4, r0, #0
    6cee:	2e00      	cmp	r6, #0
    6cf0:	d0e2      	beq.n	6cb8 <__ledf2+0x48>
    6cf2:	2800      	cmp	r0, #0
    6cf4:	d1e9      	bne.n	6cca <__ledf2+0x5a>
    6cf6:	45c1      	cmp	r9, r8
    6cf8:	d015      	beq.n	6d26 <__ledf2+0xb6>
    6cfa:	464f      	mov	r7, r9
    6cfc:	4278      	negs	r0, r7
    6cfe:	2301      	movs	r3, #1
    6d00:	4318      	orrs	r0, r3
    6d02:	e7e8      	b.n	6cd6 <__ledf2+0x66>
    6d04:	2b00      	cmp	r3, #0
    6d06:	d0f6      	beq.n	6cf6 <__ledf2+0x86>
    6d08:	464b      	mov	r3, r9
    6d0a:	4258      	negs	r0, r3
    6d0c:	2301      	movs	r3, #1
    6d0e:	4318      	orrs	r0, r3
    6d10:	e7e1      	b.n	6cd6 <__ledf2+0x66>
    6d12:	9f00      	ldr	r7, [sp, #0]
    6d14:	2002      	movs	r0, #2
    6d16:	4327      	orrs	r7, r4
    6d18:	d1dd      	bne.n	6cd6 <__ledf2+0x66>
    6d1a:	e7c5      	b.n	6ca8 <__ledf2+0x38>
    6d1c:	4667      	mov	r7, ip
    6d1e:	2002      	movs	r0, #2
    6d20:	4317      	orrs	r7, r2
    6d22:	d1d8      	bne.n	6cd6 <__ledf2+0x66>
    6d24:	e7c3      	b.n	6cae <__ledf2+0x3e>
    6d26:	42b1      	cmp	r1, r6
    6d28:	dd04      	ble.n	6d34 <__ledf2+0xc4>
    6d2a:	464a      	mov	r2, r9
    6d2c:	4250      	negs	r0, r2
    6d2e:	2301      	movs	r3, #1
    6d30:	4318      	orrs	r0, r3
    6d32:	e7d0      	b.n	6cd6 <__ledf2+0x66>
    6d34:	42b1      	cmp	r1, r6
    6d36:	db07      	blt.n	6d48 <__ledf2+0xd8>
    6d38:	9800      	ldr	r0, [sp, #0]
    6d3a:	4560      	cmp	r0, ip
    6d3c:	d8e4      	bhi.n	6d08 <__ledf2+0x98>
    6d3e:	d00a      	beq.n	6d56 <__ledf2+0xe6>
    6d40:	9f00      	ldr	r7, [sp, #0]
    6d42:	2000      	movs	r0, #0
    6d44:	4567      	cmp	r7, ip
    6d46:	d2c6      	bcs.n	6cd6 <__ledf2+0x66>
    6d48:	464f      	mov	r7, r9
    6d4a:	4278      	negs	r0, r7
    6d4c:	4178      	adcs	r0, r7
    6d4e:	4240      	negs	r0, r0
    6d50:	2301      	movs	r3, #1
    6d52:	4318      	orrs	r0, r3
    6d54:	e7bf      	b.n	6cd6 <__ledf2+0x66>
    6d56:	9a01      	ldr	r2, [sp, #4]
    6d58:	4552      	cmp	r2, sl
    6d5a:	d8d5      	bhi.n	6d08 <__ledf2+0x98>
    6d5c:	9a01      	ldr	r2, [sp, #4]
    6d5e:	2000      	movs	r0, #0
    6d60:	4552      	cmp	r2, sl
    6d62:	d3f1      	bcc.n	6d48 <__ledf2+0xd8>
    6d64:	e7b7      	b.n	6cd6 <__ledf2+0x66>
    6d66:	46c0      	nop			; (mov r8, r8)
    6d68:	000007ff 	.word	0x000007ff

00006d6c <__libc_init_array>:
    6d6c:	b570      	push	{r4, r5, r6, lr}
    6d6e:	4b0e      	ldr	r3, [pc, #56]	; (6da8 <__libc_init_array+0x3c>)
    6d70:	4d0e      	ldr	r5, [pc, #56]	; (6dac <__libc_init_array+0x40>)
    6d72:	2400      	movs	r4, #0
    6d74:	1aed      	subs	r5, r5, r3
    6d76:	10ad      	asrs	r5, r5, #2
    6d78:	1c1e      	adds	r6, r3, #0
    6d7a:	42ac      	cmp	r4, r5
    6d7c:	d004      	beq.n	6d88 <__libc_init_array+0x1c>
    6d7e:	00a3      	lsls	r3, r4, #2
    6d80:	58f3      	ldr	r3, [r6, r3]
    6d82:	4798      	blx	r3
    6d84:	3401      	adds	r4, #1
    6d86:	e7f8      	b.n	6d7a <__libc_init_array+0xe>
    6d88:	f001 f982 	bl	8090 <_init>
    6d8c:	4b08      	ldr	r3, [pc, #32]	; (6db0 <__libc_init_array+0x44>)
    6d8e:	4d09      	ldr	r5, [pc, #36]	; (6db4 <__libc_init_array+0x48>)
    6d90:	2400      	movs	r4, #0
    6d92:	1aed      	subs	r5, r5, r3
    6d94:	10ad      	asrs	r5, r5, #2
    6d96:	1c1e      	adds	r6, r3, #0
    6d98:	42ac      	cmp	r4, r5
    6d9a:	d004      	beq.n	6da6 <__libc_init_array+0x3a>
    6d9c:	00a3      	lsls	r3, r4, #2
    6d9e:	58f3      	ldr	r3, [r6, r3]
    6da0:	4798      	blx	r3
    6da2:	3401      	adds	r4, #1
    6da4:	e7f8      	b.n	6d98 <__libc_init_array+0x2c>
    6da6:	bd70      	pop	{r4, r5, r6, pc}
    6da8:	0000809c 	.word	0x0000809c
    6dac:	0000809c 	.word	0x0000809c
    6db0:	0000809c 	.word	0x0000809c
    6db4:	000080a0 	.word	0x000080a0

00006db8 <memcpy>:
    6db8:	b510      	push	{r4, lr}
    6dba:	2300      	movs	r3, #0
    6dbc:	4293      	cmp	r3, r2
    6dbe:	d003      	beq.n	6dc8 <memcpy+0x10>
    6dc0:	5ccc      	ldrb	r4, [r1, r3]
    6dc2:	54c4      	strb	r4, [r0, r3]
    6dc4:	3301      	adds	r3, #1
    6dc6:	e7f9      	b.n	6dbc <memcpy+0x4>
    6dc8:	bd10      	pop	{r4, pc}

00006dca <memset>:
    6dca:	1c03      	adds	r3, r0, #0
    6dcc:	1882      	adds	r2, r0, r2
    6dce:	4293      	cmp	r3, r2
    6dd0:	d002      	beq.n	6dd8 <memset+0xe>
    6dd2:	7019      	strb	r1, [r3, #0]
    6dd4:	3301      	adds	r3, #1
    6dd6:	e7fa      	b.n	6dce <memset+0x4>
    6dd8:	4770      	bx	lr
	...

00006ddc <iprintf>:
    6ddc:	b40f      	push	{r0, r1, r2, r3}
    6dde:	4b0b      	ldr	r3, [pc, #44]	; (6e0c <iprintf+0x30>)
    6de0:	b513      	push	{r0, r1, r4, lr}
    6de2:	681c      	ldr	r4, [r3, #0]
    6de4:	2c00      	cmp	r4, #0
    6de6:	d005      	beq.n	6df4 <iprintf+0x18>
    6de8:	69a3      	ldr	r3, [r4, #24]
    6dea:	2b00      	cmp	r3, #0
    6dec:	d102      	bne.n	6df4 <iprintf+0x18>
    6dee:	1c20      	adds	r0, r4, #0
    6df0:	f000 fd68 	bl	78c4 <__sinit>
    6df4:	ab05      	add	r3, sp, #20
    6df6:	68a1      	ldr	r1, [r4, #8]
    6df8:	1c20      	adds	r0, r4, #0
    6dfa:	9a04      	ldr	r2, [sp, #16]
    6dfc:	9301      	str	r3, [sp, #4]
    6dfe:	f000 f8fb 	bl	6ff8 <_vfiprintf_r>
    6e02:	bc16      	pop	{r1, r2, r4}
    6e04:	bc08      	pop	{r3}
    6e06:	b004      	add	sp, #16
    6e08:	4718      	bx	r3
    6e0a:	46c0      	nop			; (mov r8, r8)
    6e0c:	2000006c 	.word	0x2000006c

00006e10 <rand>:
    6e10:	4b17      	ldr	r3, [pc, #92]	; (6e70 <rand+0x60>)
    6e12:	b510      	push	{r4, lr}
    6e14:	681c      	ldr	r4, [r3, #0]
    6e16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6e18:	2b00      	cmp	r3, #0
    6e1a:	d115      	bne.n	6e48 <rand+0x38>
    6e1c:	2018      	movs	r0, #24
    6e1e:	f000 fe11 	bl	7a44 <malloc>
    6e22:	4b14      	ldr	r3, [pc, #80]	; (6e74 <rand+0x64>)
    6e24:	63a0      	str	r0, [r4, #56]	; 0x38
    6e26:	8003      	strh	r3, [r0, #0]
    6e28:	4b13      	ldr	r3, [pc, #76]	; (6e78 <rand+0x68>)
    6e2a:	8043      	strh	r3, [r0, #2]
    6e2c:	4b13      	ldr	r3, [pc, #76]	; (6e7c <rand+0x6c>)
    6e2e:	8083      	strh	r3, [r0, #4]
    6e30:	4b13      	ldr	r3, [pc, #76]	; (6e80 <rand+0x70>)
    6e32:	80c3      	strh	r3, [r0, #6]
    6e34:	4b13      	ldr	r3, [pc, #76]	; (6e84 <rand+0x74>)
    6e36:	8103      	strh	r3, [r0, #8]
    6e38:	2305      	movs	r3, #5
    6e3a:	8143      	strh	r3, [r0, #10]
    6e3c:	230b      	movs	r3, #11
    6e3e:	8183      	strh	r3, [r0, #12]
    6e40:	2201      	movs	r2, #1
    6e42:	2300      	movs	r3, #0
    6e44:	6102      	str	r2, [r0, #16]
    6e46:	6143      	str	r3, [r0, #20]
    6e48:	4b08      	ldr	r3, [pc, #32]	; (6e6c <rand+0x5c>)
    6e4a:	4a07      	ldr	r2, [pc, #28]	; (6e68 <rand+0x58>)
    6e4c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    6e4e:	6920      	ldr	r0, [r4, #16]
    6e50:	6961      	ldr	r1, [r4, #20]
    6e52:	f7fe f8c7 	bl	4fe4 <__aeabi_lmul>
    6e56:	2201      	movs	r2, #1
    6e58:	2300      	movs	r3, #0
    6e5a:	1880      	adds	r0, r0, r2
    6e5c:	4159      	adcs	r1, r3
    6e5e:	6120      	str	r0, [r4, #16]
    6e60:	6161      	str	r1, [r4, #20]
    6e62:	0048      	lsls	r0, r1, #1
    6e64:	0840      	lsrs	r0, r0, #1
    6e66:	bd10      	pop	{r4, pc}
    6e68:	4c957f2d 	.word	0x4c957f2d
    6e6c:	5851f42d 	.word	0x5851f42d
    6e70:	2000006c 	.word	0x2000006c
    6e74:	0000330e 	.word	0x0000330e
    6e78:	ffffabcd 	.word	0xffffabcd
    6e7c:	00001234 	.word	0x00001234
    6e80:	ffffe66d 	.word	0xffffe66d
    6e84:	ffffdeec 	.word	0xffffdeec

00006e88 <setbuf>:
    6e88:	b508      	push	{r3, lr}
    6e8a:	424a      	negs	r2, r1
    6e8c:	414a      	adcs	r2, r1
    6e8e:	2380      	movs	r3, #128	; 0x80
    6e90:	0052      	lsls	r2, r2, #1
    6e92:	00db      	lsls	r3, r3, #3
    6e94:	f000 f802 	bl	6e9c <setvbuf>
    6e98:	bd08      	pop	{r3, pc}
	...

00006e9c <setvbuf>:
    6e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e9e:	1c1e      	adds	r6, r3, #0
    6ea0:	4b3c      	ldr	r3, [pc, #240]	; (6f94 <setvbuf+0xf8>)
    6ea2:	1c04      	adds	r4, r0, #0
    6ea4:	681d      	ldr	r5, [r3, #0]
    6ea6:	1c0f      	adds	r7, r1, #0
    6ea8:	9201      	str	r2, [sp, #4]
    6eaa:	2d00      	cmp	r5, #0
    6eac:	d005      	beq.n	6eba <setvbuf+0x1e>
    6eae:	69aa      	ldr	r2, [r5, #24]
    6eb0:	2a00      	cmp	r2, #0
    6eb2:	d102      	bne.n	6eba <setvbuf+0x1e>
    6eb4:	1c28      	adds	r0, r5, #0
    6eb6:	f000 fd05 	bl	78c4 <__sinit>
    6eba:	4b37      	ldr	r3, [pc, #220]	; (6f98 <setvbuf+0xfc>)
    6ebc:	429c      	cmp	r4, r3
    6ebe:	d101      	bne.n	6ec4 <setvbuf+0x28>
    6ec0:	686c      	ldr	r4, [r5, #4]
    6ec2:	e008      	b.n	6ed6 <setvbuf+0x3a>
    6ec4:	4b35      	ldr	r3, [pc, #212]	; (6f9c <setvbuf+0x100>)
    6ec6:	429c      	cmp	r4, r3
    6ec8:	d101      	bne.n	6ece <setvbuf+0x32>
    6eca:	68ac      	ldr	r4, [r5, #8]
    6ecc:	e003      	b.n	6ed6 <setvbuf+0x3a>
    6ece:	4b34      	ldr	r3, [pc, #208]	; (6fa0 <setvbuf+0x104>)
    6ed0:	429c      	cmp	r4, r3
    6ed2:	d100      	bne.n	6ed6 <setvbuf+0x3a>
    6ed4:	68ec      	ldr	r4, [r5, #12]
    6ed6:	9b01      	ldr	r3, [sp, #4]
    6ed8:	2b02      	cmp	r3, #2
    6eda:	d857      	bhi.n	6f8c <setvbuf+0xf0>
    6edc:	2e00      	cmp	r6, #0
    6ede:	db55      	blt.n	6f8c <setvbuf+0xf0>
    6ee0:	1c28      	adds	r0, r5, #0
    6ee2:	1c21      	adds	r1, r4, #0
    6ee4:	f000 fc6e 	bl	77c4 <_fflush_r>
    6ee8:	2300      	movs	r3, #0
    6eea:	6063      	str	r3, [r4, #4]
    6eec:	61a3      	str	r3, [r4, #24]
    6eee:	89a3      	ldrh	r3, [r4, #12]
    6ef0:	061a      	lsls	r2, r3, #24
    6ef2:	d503      	bpl.n	6efc <setvbuf+0x60>
    6ef4:	1c28      	adds	r0, r5, #0
    6ef6:	6921      	ldr	r1, [r4, #16]
    6ef8:	f000 fdba 	bl	7a70 <_free_r>
    6efc:	89a3      	ldrh	r3, [r4, #12]
    6efe:	2283      	movs	r2, #131	; 0x83
    6f00:	4393      	bics	r3, r2
    6f02:	81a3      	strh	r3, [r4, #12]
    6f04:	9b01      	ldr	r3, [sp, #4]
    6f06:	2b02      	cmp	r3, #2
    6f08:	d013      	beq.n	6f32 <setvbuf+0x96>
    6f0a:	2f00      	cmp	r7, #0
    6f0c:	d125      	bne.n	6f5a <setvbuf+0xbe>
    6f0e:	2e00      	cmp	r6, #0
    6f10:	d101      	bne.n	6f16 <setvbuf+0x7a>
    6f12:	2680      	movs	r6, #128	; 0x80
    6f14:	00f6      	lsls	r6, r6, #3
    6f16:	1c30      	adds	r0, r6, #0
    6f18:	f000 fd94 	bl	7a44 <malloc>
    6f1c:	1e07      	subs	r7, r0, #0
    6f1e:	d118      	bne.n	6f52 <setvbuf+0xb6>
    6f20:	2080      	movs	r0, #128	; 0x80
    6f22:	00c0      	lsls	r0, r0, #3
    6f24:	f000 fd8e 	bl	7a44 <malloc>
    6f28:	1e07      	subs	r7, r0, #0
    6f2a:	d110      	bne.n	6f4e <setvbuf+0xb2>
    6f2c:	2001      	movs	r0, #1
    6f2e:	4240      	negs	r0, r0
    6f30:	e000      	b.n	6f34 <setvbuf+0x98>
    6f32:	2000      	movs	r0, #0
    6f34:	89a3      	ldrh	r3, [r4, #12]
    6f36:	2202      	movs	r2, #2
    6f38:	4313      	orrs	r3, r2
    6f3a:	81a3      	strh	r3, [r4, #12]
    6f3c:	2300      	movs	r3, #0
    6f3e:	60a3      	str	r3, [r4, #8]
    6f40:	1c23      	adds	r3, r4, #0
    6f42:	3347      	adds	r3, #71	; 0x47
    6f44:	6023      	str	r3, [r4, #0]
    6f46:	6123      	str	r3, [r4, #16]
    6f48:	2301      	movs	r3, #1
    6f4a:	6163      	str	r3, [r4, #20]
    6f4c:	e020      	b.n	6f90 <setvbuf+0xf4>
    6f4e:	2680      	movs	r6, #128	; 0x80
    6f50:	00f6      	lsls	r6, r6, #3
    6f52:	89a3      	ldrh	r3, [r4, #12]
    6f54:	2280      	movs	r2, #128	; 0x80
    6f56:	4313      	orrs	r3, r2
    6f58:	81a3      	strh	r3, [r4, #12]
    6f5a:	9a01      	ldr	r2, [sp, #4]
    6f5c:	2a01      	cmp	r2, #1
    6f5e:	d104      	bne.n	6f6a <setvbuf+0xce>
    6f60:	89a3      	ldrh	r3, [r4, #12]
    6f62:	4313      	orrs	r3, r2
    6f64:	81a3      	strh	r3, [r4, #12]
    6f66:	4273      	negs	r3, r6
    6f68:	61a3      	str	r3, [r4, #24]
    6f6a:	4b0e      	ldr	r3, [pc, #56]	; (6fa4 <setvbuf+0x108>)
    6f6c:	2000      	movs	r0, #0
    6f6e:	62ab      	str	r3, [r5, #40]	; 0x28
    6f70:	89a3      	ldrh	r3, [r4, #12]
    6f72:	6027      	str	r7, [r4, #0]
    6f74:	6127      	str	r7, [r4, #16]
    6f76:	6166      	str	r6, [r4, #20]
    6f78:	071a      	lsls	r2, r3, #28
    6f7a:	d509      	bpl.n	6f90 <setvbuf+0xf4>
    6f7c:	2203      	movs	r2, #3
    6f7e:	4013      	ands	r3, r2
    6f80:	425a      	negs	r2, r3
    6f82:	4153      	adcs	r3, r2
    6f84:	425b      	negs	r3, r3
    6f86:	401e      	ands	r6, r3
    6f88:	60a6      	str	r6, [r4, #8]
    6f8a:	e001      	b.n	6f90 <setvbuf+0xf4>
    6f8c:	2001      	movs	r0, #1
    6f8e:	4240      	negs	r0, r0
    6f90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	2000006c 	.word	0x2000006c
    6f98:	00008030 	.word	0x00008030
    6f9c:	00008050 	.word	0x00008050
    6fa0:	00008070 	.word	0x00008070
    6fa4:	0000781d 	.word	0x0000781d

00006fa8 <__sfputc_r>:
    6fa8:	6893      	ldr	r3, [r2, #8]
    6faa:	b510      	push	{r4, lr}
    6fac:	3b01      	subs	r3, #1
    6fae:	6093      	str	r3, [r2, #8]
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	da05      	bge.n	6fc0 <__sfputc_r+0x18>
    6fb4:	6994      	ldr	r4, [r2, #24]
    6fb6:	42a3      	cmp	r3, r4
    6fb8:	db08      	blt.n	6fcc <__sfputc_r+0x24>
    6fba:	b2cb      	uxtb	r3, r1
    6fbc:	2b0a      	cmp	r3, #10
    6fbe:	d005      	beq.n	6fcc <__sfputc_r+0x24>
    6fc0:	6813      	ldr	r3, [r2, #0]
    6fc2:	1c58      	adds	r0, r3, #1
    6fc4:	6010      	str	r0, [r2, #0]
    6fc6:	7019      	strb	r1, [r3, #0]
    6fc8:	b2c8      	uxtb	r0, r1
    6fca:	e001      	b.n	6fd0 <__sfputc_r+0x28>
    6fcc:	f000 faa6 	bl	751c <__swbuf_r>
    6fd0:	bd10      	pop	{r4, pc}

00006fd2 <__sfputs_r>:
    6fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fd4:	1c06      	adds	r6, r0, #0
    6fd6:	1c0f      	adds	r7, r1, #0
    6fd8:	1c14      	adds	r4, r2, #0
    6fda:	18d5      	adds	r5, r2, r3
    6fdc:	42ac      	cmp	r4, r5
    6fde:	d008      	beq.n	6ff2 <__sfputs_r+0x20>
    6fe0:	7821      	ldrb	r1, [r4, #0]
    6fe2:	1c30      	adds	r0, r6, #0
    6fe4:	1c3a      	adds	r2, r7, #0
    6fe6:	f7ff ffdf 	bl	6fa8 <__sfputc_r>
    6fea:	3401      	adds	r4, #1
    6fec:	1c43      	adds	r3, r0, #1
    6fee:	d1f5      	bne.n	6fdc <__sfputs_r+0xa>
    6ff0:	e000      	b.n	6ff4 <__sfputs_r+0x22>
    6ff2:	2000      	movs	r0, #0
    6ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006ff8 <_vfiprintf_r>:
    6ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ffa:	b09f      	sub	sp, #124	; 0x7c
    6ffc:	1c06      	adds	r6, r0, #0
    6ffe:	1c0f      	adds	r7, r1, #0
    7000:	9203      	str	r2, [sp, #12]
    7002:	9305      	str	r3, [sp, #20]
    7004:	2800      	cmp	r0, #0
    7006:	d004      	beq.n	7012 <_vfiprintf_r+0x1a>
    7008:	6981      	ldr	r1, [r0, #24]
    700a:	2900      	cmp	r1, #0
    700c:	d101      	bne.n	7012 <_vfiprintf_r+0x1a>
    700e:	f000 fc59 	bl	78c4 <__sinit>
    7012:	4b75      	ldr	r3, [pc, #468]	; (71e8 <_vfiprintf_r+0x1f0>)
    7014:	429f      	cmp	r7, r3
    7016:	d101      	bne.n	701c <_vfiprintf_r+0x24>
    7018:	6877      	ldr	r7, [r6, #4]
    701a:	e008      	b.n	702e <_vfiprintf_r+0x36>
    701c:	4b73      	ldr	r3, [pc, #460]	; (71ec <_vfiprintf_r+0x1f4>)
    701e:	429f      	cmp	r7, r3
    7020:	d101      	bne.n	7026 <_vfiprintf_r+0x2e>
    7022:	68b7      	ldr	r7, [r6, #8]
    7024:	e003      	b.n	702e <_vfiprintf_r+0x36>
    7026:	4b72      	ldr	r3, [pc, #456]	; (71f0 <_vfiprintf_r+0x1f8>)
    7028:	429f      	cmp	r7, r3
    702a:	d100      	bne.n	702e <_vfiprintf_r+0x36>
    702c:	68f7      	ldr	r7, [r6, #12]
    702e:	89bb      	ldrh	r3, [r7, #12]
    7030:	071a      	lsls	r2, r3, #28
    7032:	d50a      	bpl.n	704a <_vfiprintf_r+0x52>
    7034:	693b      	ldr	r3, [r7, #16]
    7036:	2b00      	cmp	r3, #0
    7038:	d007      	beq.n	704a <_vfiprintf_r+0x52>
    703a:	ad06      	add	r5, sp, #24
    703c:	2300      	movs	r3, #0
    703e:	616b      	str	r3, [r5, #20]
    7040:	2320      	movs	r3, #32
    7042:	766b      	strb	r3, [r5, #25]
    7044:	2330      	movs	r3, #48	; 0x30
    7046:	76ab      	strb	r3, [r5, #26]
    7048:	e03b      	b.n	70c2 <_vfiprintf_r+0xca>
    704a:	1c30      	adds	r0, r6, #0
    704c:	1c39      	adds	r1, r7, #0
    704e:	f000 fabd 	bl	75cc <__swsetup_r>
    7052:	2800      	cmp	r0, #0
    7054:	d0f1      	beq.n	703a <_vfiprintf_r+0x42>
    7056:	2001      	movs	r0, #1
    7058:	4240      	negs	r0, r0
    705a:	e0c2      	b.n	71e2 <_vfiprintf_r+0x1ea>
    705c:	9a05      	ldr	r2, [sp, #20]
    705e:	1d11      	adds	r1, r2, #4
    7060:	6812      	ldr	r2, [r2, #0]
    7062:	9105      	str	r1, [sp, #20]
    7064:	2a00      	cmp	r2, #0
    7066:	db76      	blt.n	7156 <_vfiprintf_r+0x15e>
    7068:	9209      	str	r2, [sp, #36]	; 0x24
    706a:	3401      	adds	r4, #1
    706c:	7823      	ldrb	r3, [r4, #0]
    706e:	2b2e      	cmp	r3, #46	; 0x2e
    7070:	d100      	bne.n	7074 <_vfiprintf_r+0x7c>
    7072:	e081      	b.n	7178 <_vfiprintf_r+0x180>
    7074:	7821      	ldrb	r1, [r4, #0]
    7076:	485f      	ldr	r0, [pc, #380]	; (71f4 <_vfiprintf_r+0x1fc>)
    7078:	2203      	movs	r2, #3
    707a:	f000 fced 	bl	7a58 <memchr>
    707e:	2800      	cmp	r0, #0
    7080:	d007      	beq.n	7092 <_vfiprintf_r+0x9a>
    7082:	495c      	ldr	r1, [pc, #368]	; (71f4 <_vfiprintf_r+0x1fc>)
    7084:	682a      	ldr	r2, [r5, #0]
    7086:	1a43      	subs	r3, r0, r1
    7088:	2040      	movs	r0, #64	; 0x40
    708a:	4098      	lsls	r0, r3
    708c:	4310      	orrs	r0, r2
    708e:	6028      	str	r0, [r5, #0]
    7090:	3401      	adds	r4, #1
    7092:	7821      	ldrb	r1, [r4, #0]
    7094:	1c63      	adds	r3, r4, #1
    7096:	4858      	ldr	r0, [pc, #352]	; (71f8 <_vfiprintf_r+0x200>)
    7098:	2206      	movs	r2, #6
    709a:	9303      	str	r3, [sp, #12]
    709c:	7629      	strb	r1, [r5, #24]
    709e:	f000 fcdb 	bl	7a58 <memchr>
    70a2:	2800      	cmp	r0, #0
    70a4:	d100      	bne.n	70a8 <_vfiprintf_r+0xb0>
    70a6:	e08a      	b.n	71be <_vfiprintf_r+0x1c6>
    70a8:	4b54      	ldr	r3, [pc, #336]	; (71fc <_vfiprintf_r+0x204>)
    70aa:	2b00      	cmp	r3, #0
    70ac:	d17e      	bne.n	71ac <_vfiprintf_r+0x1b4>
    70ae:	9b05      	ldr	r3, [sp, #20]
    70b0:	2207      	movs	r2, #7
    70b2:	3307      	adds	r3, #7
    70b4:	4393      	bics	r3, r2
    70b6:	3308      	adds	r3, #8
    70b8:	9305      	str	r3, [sp, #20]
    70ba:	696a      	ldr	r2, [r5, #20]
    70bc:	9904      	ldr	r1, [sp, #16]
    70be:	1853      	adds	r3, r2, r1
    70c0:	616b      	str	r3, [r5, #20]
    70c2:	9c03      	ldr	r4, [sp, #12]
    70c4:	7823      	ldrb	r3, [r4, #0]
    70c6:	2b00      	cmp	r3, #0
    70c8:	d104      	bne.n	70d4 <_vfiprintf_r+0xdc>
    70ca:	9903      	ldr	r1, [sp, #12]
    70cc:	1a61      	subs	r1, r4, r1
    70ce:	9102      	str	r1, [sp, #8]
    70d0:	d010      	beq.n	70f4 <_vfiprintf_r+0xfc>
    70d2:	e003      	b.n	70dc <_vfiprintf_r+0xe4>
    70d4:	2b25      	cmp	r3, #37	; 0x25
    70d6:	d0f8      	beq.n	70ca <_vfiprintf_r+0xd2>
    70d8:	3401      	adds	r4, #1
    70da:	e7f3      	b.n	70c4 <_vfiprintf_r+0xcc>
    70dc:	1c30      	adds	r0, r6, #0
    70de:	1c39      	adds	r1, r7, #0
    70e0:	9a03      	ldr	r2, [sp, #12]
    70e2:	9b02      	ldr	r3, [sp, #8]
    70e4:	f7ff ff75 	bl	6fd2 <__sfputs_r>
    70e8:	3001      	adds	r0, #1
    70ea:	d075      	beq.n	71d8 <_vfiprintf_r+0x1e0>
    70ec:	696a      	ldr	r2, [r5, #20]
    70ee:	9902      	ldr	r1, [sp, #8]
    70f0:	1853      	adds	r3, r2, r1
    70f2:	616b      	str	r3, [r5, #20]
    70f4:	7823      	ldrb	r3, [r4, #0]
    70f6:	2b00      	cmp	r3, #0
    70f8:	d06e      	beq.n	71d8 <_vfiprintf_r+0x1e0>
    70fa:	2201      	movs	r2, #1
    70fc:	4252      	negs	r2, r2
    70fe:	606a      	str	r2, [r5, #4]
    7100:	466a      	mov	r2, sp
    7102:	2300      	movs	r3, #0
    7104:	325b      	adds	r2, #91	; 0x5b
    7106:	3401      	adds	r4, #1
    7108:	602b      	str	r3, [r5, #0]
    710a:	60eb      	str	r3, [r5, #12]
    710c:	60ab      	str	r3, [r5, #8]
    710e:	7013      	strb	r3, [r2, #0]
    7110:	65ab      	str	r3, [r5, #88]	; 0x58
    7112:	7821      	ldrb	r1, [r4, #0]
    7114:	483a      	ldr	r0, [pc, #232]	; (7200 <_vfiprintf_r+0x208>)
    7116:	2205      	movs	r2, #5
    7118:	f000 fc9e 	bl	7a58 <memchr>
    711c:	2800      	cmp	r0, #0
    711e:	d008      	beq.n	7132 <_vfiprintf_r+0x13a>
    7120:	4a37      	ldr	r2, [pc, #220]	; (7200 <_vfiprintf_r+0x208>)
    7122:	3401      	adds	r4, #1
    7124:	1a83      	subs	r3, r0, r2
    7126:	2001      	movs	r0, #1
    7128:	4098      	lsls	r0, r3
    712a:	682b      	ldr	r3, [r5, #0]
    712c:	4318      	orrs	r0, r3
    712e:	6028      	str	r0, [r5, #0]
    7130:	e7ef      	b.n	7112 <_vfiprintf_r+0x11a>
    7132:	682b      	ldr	r3, [r5, #0]
    7134:	06d9      	lsls	r1, r3, #27
    7136:	d503      	bpl.n	7140 <_vfiprintf_r+0x148>
    7138:	466a      	mov	r2, sp
    713a:	2120      	movs	r1, #32
    713c:	325b      	adds	r2, #91	; 0x5b
    713e:	7011      	strb	r1, [r2, #0]
    7140:	071a      	lsls	r2, r3, #28
    7142:	d503      	bpl.n	714c <_vfiprintf_r+0x154>
    7144:	466a      	mov	r2, sp
    7146:	212b      	movs	r1, #43	; 0x2b
    7148:	325b      	adds	r2, #91	; 0x5b
    714a:	7011      	strb	r1, [r2, #0]
    714c:	7822      	ldrb	r2, [r4, #0]
    714e:	2a2a      	cmp	r2, #42	; 0x2a
    7150:	d084      	beq.n	705c <_vfiprintf_r+0x64>
    7152:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7154:	e005      	b.n	7162 <_vfiprintf_r+0x16a>
    7156:	4252      	negs	r2, r2
    7158:	60ea      	str	r2, [r5, #12]
    715a:	2202      	movs	r2, #2
    715c:	4313      	orrs	r3, r2
    715e:	602b      	str	r3, [r5, #0]
    7160:	e783      	b.n	706a <_vfiprintf_r+0x72>
    7162:	7822      	ldrb	r2, [r4, #0]
    7164:	3a30      	subs	r2, #48	; 0x30
    7166:	2a09      	cmp	r2, #9
    7168:	d804      	bhi.n	7174 <_vfiprintf_r+0x17c>
    716a:	210a      	movs	r1, #10
    716c:	434b      	muls	r3, r1
    716e:	3401      	adds	r4, #1
    7170:	189b      	adds	r3, r3, r2
    7172:	e7f6      	b.n	7162 <_vfiprintf_r+0x16a>
    7174:	9309      	str	r3, [sp, #36]	; 0x24
    7176:	e779      	b.n	706c <_vfiprintf_r+0x74>
    7178:	7863      	ldrb	r3, [r4, #1]
    717a:	2b2a      	cmp	r3, #42	; 0x2a
    717c:	d109      	bne.n	7192 <_vfiprintf_r+0x19a>
    717e:	9b05      	ldr	r3, [sp, #20]
    7180:	3402      	adds	r4, #2
    7182:	1d1a      	adds	r2, r3, #4
    7184:	681b      	ldr	r3, [r3, #0]
    7186:	9205      	str	r2, [sp, #20]
    7188:	2b00      	cmp	r3, #0
    718a:	da0d      	bge.n	71a8 <_vfiprintf_r+0x1b0>
    718c:	2301      	movs	r3, #1
    718e:	425b      	negs	r3, r3
    7190:	e00a      	b.n	71a8 <_vfiprintf_r+0x1b0>
    7192:	3401      	adds	r4, #1
    7194:	2300      	movs	r3, #0
    7196:	7822      	ldrb	r2, [r4, #0]
    7198:	3a30      	subs	r2, #48	; 0x30
    719a:	2a09      	cmp	r2, #9
    719c:	d804      	bhi.n	71a8 <_vfiprintf_r+0x1b0>
    719e:	210a      	movs	r1, #10
    71a0:	434b      	muls	r3, r1
    71a2:	3401      	adds	r4, #1
    71a4:	189b      	adds	r3, r3, r2
    71a6:	e7f6      	b.n	7196 <_vfiprintf_r+0x19e>
    71a8:	9307      	str	r3, [sp, #28]
    71aa:	e763      	b.n	7074 <_vfiprintf_r+0x7c>
    71ac:	ab05      	add	r3, sp, #20
    71ae:	9300      	str	r3, [sp, #0]
    71b0:	1c30      	adds	r0, r6, #0
    71b2:	1c29      	adds	r1, r5, #0
    71b4:	1c3a      	adds	r2, r7, #0
    71b6:	4b13      	ldr	r3, [pc, #76]	; (7204 <_vfiprintf_r+0x20c>)
    71b8:	e000      	b.n	71bc <_vfiprintf_r+0x1c4>
    71ba:	bf00      	nop
    71bc:	e007      	b.n	71ce <_vfiprintf_r+0x1d6>
    71be:	ab05      	add	r3, sp, #20
    71c0:	9300      	str	r3, [sp, #0]
    71c2:	1c30      	adds	r0, r6, #0
    71c4:	1c29      	adds	r1, r5, #0
    71c6:	1c3a      	adds	r2, r7, #0
    71c8:	4b0e      	ldr	r3, [pc, #56]	; (7204 <_vfiprintf_r+0x20c>)
    71ca:	f000 f891 	bl	72f0 <_printf_i>
    71ce:	9004      	str	r0, [sp, #16]
    71d0:	9904      	ldr	r1, [sp, #16]
    71d2:	3101      	adds	r1, #1
    71d4:	d000      	beq.n	71d8 <_vfiprintf_r+0x1e0>
    71d6:	e770      	b.n	70ba <_vfiprintf_r+0xc2>
    71d8:	89bb      	ldrh	r3, [r7, #12]
    71da:	065a      	lsls	r2, r3, #25
    71dc:	d500      	bpl.n	71e0 <_vfiprintf_r+0x1e8>
    71de:	e73a      	b.n	7056 <_vfiprintf_r+0x5e>
    71e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    71e2:	b01f      	add	sp, #124	; 0x7c
    71e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71e6:	46c0      	nop			; (mov r8, r8)
    71e8:	00008030 	.word	0x00008030
    71ec:	00008050 	.word	0x00008050
    71f0:	00008070 	.word	0x00008070
    71f4:	00008002 	.word	0x00008002
    71f8:	00008006 	.word	0x00008006
    71fc:	00000000 	.word	0x00000000
    7200:	00007ffc 	.word	0x00007ffc
    7204:	00006fd3 	.word	0x00006fd3

00007208 <_printf_common>:
    7208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    720a:	1c15      	adds	r5, r2, #0
    720c:	9301      	str	r3, [sp, #4]
    720e:	690a      	ldr	r2, [r1, #16]
    7210:	688b      	ldr	r3, [r1, #8]
    7212:	1c06      	adds	r6, r0, #0
    7214:	1c0c      	adds	r4, r1, #0
    7216:	4293      	cmp	r3, r2
    7218:	da00      	bge.n	721c <_printf_common+0x14>
    721a:	1c13      	adds	r3, r2, #0
    721c:	1c22      	adds	r2, r4, #0
    721e:	602b      	str	r3, [r5, #0]
    7220:	3243      	adds	r2, #67	; 0x43
    7222:	7812      	ldrb	r2, [r2, #0]
    7224:	2a00      	cmp	r2, #0
    7226:	d001      	beq.n	722c <_printf_common+0x24>
    7228:	3301      	adds	r3, #1
    722a:	602b      	str	r3, [r5, #0]
    722c:	6820      	ldr	r0, [r4, #0]
    722e:	0680      	lsls	r0, r0, #26
    7230:	d502      	bpl.n	7238 <_printf_common+0x30>
    7232:	682b      	ldr	r3, [r5, #0]
    7234:	3302      	adds	r3, #2
    7236:	602b      	str	r3, [r5, #0]
    7238:	6821      	ldr	r1, [r4, #0]
    723a:	2706      	movs	r7, #6
    723c:	400f      	ands	r7, r1
    723e:	d01f      	beq.n	7280 <_printf_common+0x78>
    7240:	1c23      	adds	r3, r4, #0
    7242:	3343      	adds	r3, #67	; 0x43
    7244:	781b      	ldrb	r3, [r3, #0]
    7246:	1e5a      	subs	r2, r3, #1
    7248:	4193      	sbcs	r3, r2
    724a:	6822      	ldr	r2, [r4, #0]
    724c:	0692      	lsls	r2, r2, #26
    724e:	d51f      	bpl.n	7290 <_printf_common+0x88>
    7250:	18e1      	adds	r1, r4, r3
    7252:	3140      	adds	r1, #64	; 0x40
    7254:	2030      	movs	r0, #48	; 0x30
    7256:	70c8      	strb	r0, [r1, #3]
    7258:	1c21      	adds	r1, r4, #0
    725a:	1c5a      	adds	r2, r3, #1
    725c:	3145      	adds	r1, #69	; 0x45
    725e:	7809      	ldrb	r1, [r1, #0]
    7260:	18a2      	adds	r2, r4, r2
    7262:	3240      	adds	r2, #64	; 0x40
    7264:	3302      	adds	r3, #2
    7266:	70d1      	strb	r1, [r2, #3]
    7268:	e012      	b.n	7290 <_printf_common+0x88>
    726a:	1c22      	adds	r2, r4, #0
    726c:	1c30      	adds	r0, r6, #0
    726e:	9901      	ldr	r1, [sp, #4]
    7270:	3219      	adds	r2, #25
    7272:	2301      	movs	r3, #1
    7274:	9f08      	ldr	r7, [sp, #32]
    7276:	47b8      	blx	r7
    7278:	3001      	adds	r0, #1
    727a:	d011      	beq.n	72a0 <_printf_common+0x98>
    727c:	9f00      	ldr	r7, [sp, #0]
    727e:	3701      	adds	r7, #1
    7280:	9700      	str	r7, [sp, #0]
    7282:	68e0      	ldr	r0, [r4, #12]
    7284:	6829      	ldr	r1, [r5, #0]
    7286:	9f00      	ldr	r7, [sp, #0]
    7288:	1a43      	subs	r3, r0, r1
    728a:	429f      	cmp	r7, r3
    728c:	dbed      	blt.n	726a <_printf_common+0x62>
    728e:	e7d7      	b.n	7240 <_printf_common+0x38>
    7290:	1c22      	adds	r2, r4, #0
    7292:	1c30      	adds	r0, r6, #0
    7294:	9901      	ldr	r1, [sp, #4]
    7296:	3243      	adds	r2, #67	; 0x43
    7298:	9f08      	ldr	r7, [sp, #32]
    729a:	47b8      	blx	r7
    729c:	3001      	adds	r0, #1
    729e:	d102      	bne.n	72a6 <_printf_common+0x9e>
    72a0:	2001      	movs	r0, #1
    72a2:	4240      	negs	r0, r0
    72a4:	e023      	b.n	72ee <_printf_common+0xe6>
    72a6:	6820      	ldr	r0, [r4, #0]
    72a8:	2106      	movs	r1, #6
    72aa:	682b      	ldr	r3, [r5, #0]
    72ac:	68e2      	ldr	r2, [r4, #12]
    72ae:	4001      	ands	r1, r0
    72b0:	2500      	movs	r5, #0
    72b2:	2904      	cmp	r1, #4
    72b4:	d103      	bne.n	72be <_printf_common+0xb6>
    72b6:	1ad5      	subs	r5, r2, r3
    72b8:	43eb      	mvns	r3, r5
    72ba:	17db      	asrs	r3, r3, #31
    72bc:	401d      	ands	r5, r3
    72be:	68a2      	ldr	r2, [r4, #8]
    72c0:	6923      	ldr	r3, [r4, #16]
    72c2:	429a      	cmp	r2, r3
    72c4:	dd01      	ble.n	72ca <_printf_common+0xc2>
    72c6:	1ad3      	subs	r3, r2, r3
    72c8:	18ed      	adds	r5, r5, r3
    72ca:	2700      	movs	r7, #0
    72cc:	9700      	str	r7, [sp, #0]
    72ce:	9f00      	ldr	r7, [sp, #0]
    72d0:	42af      	cmp	r7, r5
    72d2:	da0b      	bge.n	72ec <_printf_common+0xe4>
    72d4:	1c22      	adds	r2, r4, #0
    72d6:	1c30      	adds	r0, r6, #0
    72d8:	9901      	ldr	r1, [sp, #4]
    72da:	321a      	adds	r2, #26
    72dc:	2301      	movs	r3, #1
    72de:	9f08      	ldr	r7, [sp, #32]
    72e0:	47b8      	blx	r7
    72e2:	3001      	adds	r0, #1
    72e4:	d0dc      	beq.n	72a0 <_printf_common+0x98>
    72e6:	9f00      	ldr	r7, [sp, #0]
    72e8:	3701      	adds	r7, #1
    72ea:	e7ef      	b.n	72cc <_printf_common+0xc4>
    72ec:	2000      	movs	r0, #0
    72ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000072f0 <_printf_i>:
    72f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    72f2:	1c0d      	adds	r5, r1, #0
    72f4:	b08b      	sub	sp, #44	; 0x2c
    72f6:	3543      	adds	r5, #67	; 0x43
    72f8:	9206      	str	r2, [sp, #24]
    72fa:	9005      	str	r0, [sp, #20]
    72fc:	9307      	str	r3, [sp, #28]
    72fe:	9504      	str	r5, [sp, #16]
    7300:	7e0b      	ldrb	r3, [r1, #24]
    7302:	1c0c      	adds	r4, r1, #0
    7304:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7306:	2b6e      	cmp	r3, #110	; 0x6e
    7308:	d100      	bne.n	730c <_printf_i+0x1c>
    730a:	e0a7      	b.n	745c <_printf_i+0x16c>
    730c:	d811      	bhi.n	7332 <_printf_i+0x42>
    730e:	2b63      	cmp	r3, #99	; 0x63
    7310:	d022      	beq.n	7358 <_printf_i+0x68>
    7312:	d809      	bhi.n	7328 <_printf_i+0x38>
    7314:	2b00      	cmp	r3, #0
    7316:	d100      	bne.n	731a <_printf_i+0x2a>
    7318:	e0b0      	b.n	747c <_printf_i+0x18c>
    731a:	2b58      	cmp	r3, #88	; 0x58
    731c:	d000      	beq.n	7320 <_printf_i+0x30>
    731e:	e0c0      	b.n	74a2 <_printf_i+0x1b2>
    7320:	3145      	adds	r1, #69	; 0x45
    7322:	700b      	strb	r3, [r1, #0]
    7324:	4d7b      	ldr	r5, [pc, #492]	; (7514 <_printf_i+0x224>)
    7326:	e04e      	b.n	73c6 <_printf_i+0xd6>
    7328:	2b64      	cmp	r3, #100	; 0x64
    732a:	d01c      	beq.n	7366 <_printf_i+0x76>
    732c:	2b69      	cmp	r3, #105	; 0x69
    732e:	d01a      	beq.n	7366 <_printf_i+0x76>
    7330:	e0b7      	b.n	74a2 <_printf_i+0x1b2>
    7332:	2b73      	cmp	r3, #115	; 0x73
    7334:	d100      	bne.n	7338 <_printf_i+0x48>
    7336:	e0a5      	b.n	7484 <_printf_i+0x194>
    7338:	d809      	bhi.n	734e <_printf_i+0x5e>
    733a:	2b6f      	cmp	r3, #111	; 0x6f
    733c:	d029      	beq.n	7392 <_printf_i+0xa2>
    733e:	2b70      	cmp	r3, #112	; 0x70
    7340:	d000      	beq.n	7344 <_printf_i+0x54>
    7342:	e0ae      	b.n	74a2 <_printf_i+0x1b2>
    7344:	680e      	ldr	r6, [r1, #0]
    7346:	2320      	movs	r3, #32
    7348:	4333      	orrs	r3, r6
    734a:	600b      	str	r3, [r1, #0]
    734c:	e036      	b.n	73bc <_printf_i+0xcc>
    734e:	2b75      	cmp	r3, #117	; 0x75
    7350:	d01f      	beq.n	7392 <_printf_i+0xa2>
    7352:	2b78      	cmp	r3, #120	; 0x78
    7354:	d032      	beq.n	73bc <_printf_i+0xcc>
    7356:	e0a4      	b.n	74a2 <_printf_i+0x1b2>
    7358:	6813      	ldr	r3, [r2, #0]
    735a:	1c0d      	adds	r5, r1, #0
    735c:	1d19      	adds	r1, r3, #4
    735e:	3542      	adds	r5, #66	; 0x42
    7360:	6011      	str	r1, [r2, #0]
    7362:	681b      	ldr	r3, [r3, #0]
    7364:	e09f      	b.n	74a6 <_printf_i+0x1b6>
    7366:	6821      	ldr	r1, [r4, #0]
    7368:	6813      	ldr	r3, [r2, #0]
    736a:	060e      	lsls	r6, r1, #24
    736c:	d503      	bpl.n	7376 <_printf_i+0x86>
    736e:	1d19      	adds	r1, r3, #4
    7370:	6011      	str	r1, [r2, #0]
    7372:	681e      	ldr	r6, [r3, #0]
    7374:	e005      	b.n	7382 <_printf_i+0x92>
    7376:	0648      	lsls	r0, r1, #25
    7378:	d5f9      	bpl.n	736e <_printf_i+0x7e>
    737a:	1d19      	adds	r1, r3, #4
    737c:	6011      	str	r1, [r2, #0]
    737e:	2100      	movs	r1, #0
    7380:	5e5e      	ldrsh	r6, [r3, r1]
    7382:	4b64      	ldr	r3, [pc, #400]	; (7514 <_printf_i+0x224>)
    7384:	2e00      	cmp	r6, #0
    7386:	da3b      	bge.n	7400 <_printf_i+0x110>
    7388:	9d04      	ldr	r5, [sp, #16]
    738a:	222d      	movs	r2, #45	; 0x2d
    738c:	4276      	negs	r6, r6
    738e:	702a      	strb	r2, [r5, #0]
    7390:	e036      	b.n	7400 <_printf_i+0x110>
    7392:	6821      	ldr	r1, [r4, #0]
    7394:	6813      	ldr	r3, [r2, #0]
    7396:	060e      	lsls	r6, r1, #24
    7398:	d503      	bpl.n	73a2 <_printf_i+0xb2>
    739a:	1d19      	adds	r1, r3, #4
    739c:	6011      	str	r1, [r2, #0]
    739e:	681e      	ldr	r6, [r3, #0]
    73a0:	e004      	b.n	73ac <_printf_i+0xbc>
    73a2:	0648      	lsls	r0, r1, #25
    73a4:	d5f9      	bpl.n	739a <_printf_i+0xaa>
    73a6:	1d19      	adds	r1, r3, #4
    73a8:	881e      	ldrh	r6, [r3, #0]
    73aa:	6011      	str	r1, [r2, #0]
    73ac:	4b59      	ldr	r3, [pc, #356]	; (7514 <_printf_i+0x224>)
    73ae:	7e22      	ldrb	r2, [r4, #24]
    73b0:	9303      	str	r3, [sp, #12]
    73b2:	2708      	movs	r7, #8
    73b4:	2a6f      	cmp	r2, #111	; 0x6f
    73b6:	d01e      	beq.n	73f6 <_printf_i+0x106>
    73b8:	270a      	movs	r7, #10
    73ba:	e01c      	b.n	73f6 <_printf_i+0x106>
    73bc:	1c23      	adds	r3, r4, #0
    73be:	2178      	movs	r1, #120	; 0x78
    73c0:	3345      	adds	r3, #69	; 0x45
    73c2:	4d55      	ldr	r5, [pc, #340]	; (7518 <_printf_i+0x228>)
    73c4:	7019      	strb	r1, [r3, #0]
    73c6:	6811      	ldr	r1, [r2, #0]
    73c8:	6823      	ldr	r3, [r4, #0]
    73ca:	1d08      	adds	r0, r1, #4
    73cc:	9503      	str	r5, [sp, #12]
    73ce:	6010      	str	r0, [r2, #0]
    73d0:	061e      	lsls	r6, r3, #24
    73d2:	d501      	bpl.n	73d8 <_printf_i+0xe8>
    73d4:	680e      	ldr	r6, [r1, #0]
    73d6:	e002      	b.n	73de <_printf_i+0xee>
    73d8:	0658      	lsls	r0, r3, #25
    73da:	d5fb      	bpl.n	73d4 <_printf_i+0xe4>
    73dc:	880e      	ldrh	r6, [r1, #0]
    73de:	07d9      	lsls	r1, r3, #31
    73e0:	d502      	bpl.n	73e8 <_printf_i+0xf8>
    73e2:	2220      	movs	r2, #32
    73e4:	4313      	orrs	r3, r2
    73e6:	6023      	str	r3, [r4, #0]
    73e8:	2710      	movs	r7, #16
    73ea:	2e00      	cmp	r6, #0
    73ec:	d103      	bne.n	73f6 <_printf_i+0x106>
    73ee:	6822      	ldr	r2, [r4, #0]
    73f0:	2320      	movs	r3, #32
    73f2:	439a      	bics	r2, r3
    73f4:	6022      	str	r2, [r4, #0]
    73f6:	1c23      	adds	r3, r4, #0
    73f8:	2200      	movs	r2, #0
    73fa:	3343      	adds	r3, #67	; 0x43
    73fc:	701a      	strb	r2, [r3, #0]
    73fe:	e001      	b.n	7404 <_printf_i+0x114>
    7400:	9303      	str	r3, [sp, #12]
    7402:	270a      	movs	r7, #10
    7404:	6863      	ldr	r3, [r4, #4]
    7406:	60a3      	str	r3, [r4, #8]
    7408:	2b00      	cmp	r3, #0
    740a:	db03      	blt.n	7414 <_printf_i+0x124>
    740c:	6825      	ldr	r5, [r4, #0]
    740e:	2204      	movs	r2, #4
    7410:	4395      	bics	r5, r2
    7412:	6025      	str	r5, [r4, #0]
    7414:	2e00      	cmp	r6, #0
    7416:	d102      	bne.n	741e <_printf_i+0x12e>
    7418:	9d04      	ldr	r5, [sp, #16]
    741a:	2b00      	cmp	r3, #0
    741c:	d00e      	beq.n	743c <_printf_i+0x14c>
    741e:	9d04      	ldr	r5, [sp, #16]
    7420:	1c30      	adds	r0, r6, #0
    7422:	1c39      	adds	r1, r7, #0
    7424:	f7fd fdd2 	bl	4fcc <__aeabi_uidivmod>
    7428:	9803      	ldr	r0, [sp, #12]
    742a:	3d01      	subs	r5, #1
    742c:	5c43      	ldrb	r3, [r0, r1]
    742e:	1c30      	adds	r0, r6, #0
    7430:	702b      	strb	r3, [r5, #0]
    7432:	1c39      	adds	r1, r7, #0
    7434:	f7fd fd86 	bl	4f44 <__aeabi_uidiv>
    7438:	1e06      	subs	r6, r0, #0
    743a:	d1f1      	bne.n	7420 <_printf_i+0x130>
    743c:	2f08      	cmp	r7, #8
    743e:	d109      	bne.n	7454 <_printf_i+0x164>
    7440:	6821      	ldr	r1, [r4, #0]
    7442:	07c9      	lsls	r1, r1, #31
    7444:	d506      	bpl.n	7454 <_printf_i+0x164>
    7446:	6862      	ldr	r2, [r4, #4]
    7448:	6923      	ldr	r3, [r4, #16]
    744a:	429a      	cmp	r2, r3
    744c:	dc02      	bgt.n	7454 <_printf_i+0x164>
    744e:	3d01      	subs	r5, #1
    7450:	2330      	movs	r3, #48	; 0x30
    7452:	702b      	strb	r3, [r5, #0]
    7454:	9e04      	ldr	r6, [sp, #16]
    7456:	1b73      	subs	r3, r6, r5
    7458:	6123      	str	r3, [r4, #16]
    745a:	e02a      	b.n	74b2 <_printf_i+0x1c2>
    745c:	6808      	ldr	r0, [r1, #0]
    745e:	6813      	ldr	r3, [r2, #0]
    7460:	6949      	ldr	r1, [r1, #20]
    7462:	0605      	lsls	r5, r0, #24
    7464:	d504      	bpl.n	7470 <_printf_i+0x180>
    7466:	1d18      	adds	r0, r3, #4
    7468:	6010      	str	r0, [r2, #0]
    746a:	681b      	ldr	r3, [r3, #0]
    746c:	6019      	str	r1, [r3, #0]
    746e:	e005      	b.n	747c <_printf_i+0x18c>
    7470:	0646      	lsls	r6, r0, #25
    7472:	d5f8      	bpl.n	7466 <_printf_i+0x176>
    7474:	1d18      	adds	r0, r3, #4
    7476:	6010      	str	r0, [r2, #0]
    7478:	681b      	ldr	r3, [r3, #0]
    747a:	8019      	strh	r1, [r3, #0]
    747c:	2300      	movs	r3, #0
    747e:	6123      	str	r3, [r4, #16]
    7480:	9d04      	ldr	r5, [sp, #16]
    7482:	e016      	b.n	74b2 <_printf_i+0x1c2>
    7484:	6813      	ldr	r3, [r2, #0]
    7486:	1d19      	adds	r1, r3, #4
    7488:	6011      	str	r1, [r2, #0]
    748a:	681d      	ldr	r5, [r3, #0]
    748c:	1c28      	adds	r0, r5, #0
    748e:	f000 fbe9 	bl	7c64 <strlen>
    7492:	6863      	ldr	r3, [r4, #4]
    7494:	6120      	str	r0, [r4, #16]
    7496:	4298      	cmp	r0, r3
    7498:	d900      	bls.n	749c <_printf_i+0x1ac>
    749a:	6123      	str	r3, [r4, #16]
    749c:	6920      	ldr	r0, [r4, #16]
    749e:	6060      	str	r0, [r4, #4]
    74a0:	e004      	b.n	74ac <_printf_i+0x1bc>
    74a2:	1c25      	adds	r5, r4, #0
    74a4:	3542      	adds	r5, #66	; 0x42
    74a6:	702b      	strb	r3, [r5, #0]
    74a8:	2301      	movs	r3, #1
    74aa:	6123      	str	r3, [r4, #16]
    74ac:	9e04      	ldr	r6, [sp, #16]
    74ae:	2300      	movs	r3, #0
    74b0:	7033      	strb	r3, [r6, #0]
    74b2:	9e07      	ldr	r6, [sp, #28]
    74b4:	9805      	ldr	r0, [sp, #20]
    74b6:	9600      	str	r6, [sp, #0]
    74b8:	1c21      	adds	r1, r4, #0
    74ba:	aa09      	add	r2, sp, #36	; 0x24
    74bc:	9b06      	ldr	r3, [sp, #24]
    74be:	f7ff fea3 	bl	7208 <_printf_common>
    74c2:	3001      	adds	r0, #1
    74c4:	d102      	bne.n	74cc <_printf_i+0x1dc>
    74c6:	2001      	movs	r0, #1
    74c8:	4240      	negs	r0, r0
    74ca:	e021      	b.n	7510 <_printf_i+0x220>
    74cc:	1c2a      	adds	r2, r5, #0
    74ce:	9805      	ldr	r0, [sp, #20]
    74d0:	9906      	ldr	r1, [sp, #24]
    74d2:	6923      	ldr	r3, [r4, #16]
    74d4:	9d07      	ldr	r5, [sp, #28]
    74d6:	47a8      	blx	r5
    74d8:	3001      	adds	r0, #1
    74da:	d0f4      	beq.n	74c6 <_printf_i+0x1d6>
    74dc:	6826      	ldr	r6, [r4, #0]
    74de:	07b6      	lsls	r6, r6, #30
    74e0:	d405      	bmi.n	74ee <_printf_i+0x1fe>
    74e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    74e4:	68e0      	ldr	r0, [r4, #12]
    74e6:	4298      	cmp	r0, r3
    74e8:	da12      	bge.n	7510 <_printf_i+0x220>
    74ea:	1c18      	adds	r0, r3, #0
    74ec:	e010      	b.n	7510 <_printf_i+0x220>
    74ee:	2500      	movs	r5, #0
    74f0:	68e0      	ldr	r0, [r4, #12]
    74f2:	9909      	ldr	r1, [sp, #36]	; 0x24
    74f4:	1a43      	subs	r3, r0, r1
    74f6:	429d      	cmp	r5, r3
    74f8:	daf3      	bge.n	74e2 <_printf_i+0x1f2>
    74fa:	1c22      	adds	r2, r4, #0
    74fc:	9805      	ldr	r0, [sp, #20]
    74fe:	9906      	ldr	r1, [sp, #24]
    7500:	3219      	adds	r2, #25
    7502:	2301      	movs	r3, #1
    7504:	9e07      	ldr	r6, [sp, #28]
    7506:	47b0      	blx	r6
    7508:	3001      	adds	r0, #1
    750a:	d0dc      	beq.n	74c6 <_printf_i+0x1d6>
    750c:	3501      	adds	r5, #1
    750e:	e7ef      	b.n	74f0 <_printf_i+0x200>
    7510:	b00b      	add	sp, #44	; 0x2c
    7512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7514:	0000800d 	.word	0x0000800d
    7518:	0000801e 	.word	0x0000801e

0000751c <__swbuf_r>:
    751c:	b570      	push	{r4, r5, r6, lr}
    751e:	1c05      	adds	r5, r0, #0
    7520:	1c0e      	adds	r6, r1, #0
    7522:	1c14      	adds	r4, r2, #0
    7524:	2800      	cmp	r0, #0
    7526:	d004      	beq.n	7532 <__swbuf_r+0x16>
    7528:	6982      	ldr	r2, [r0, #24]
    752a:	2a00      	cmp	r2, #0
    752c:	d101      	bne.n	7532 <__swbuf_r+0x16>
    752e:	f000 f9c9 	bl	78c4 <__sinit>
    7532:	4b23      	ldr	r3, [pc, #140]	; (75c0 <__swbuf_r+0xa4>)
    7534:	429c      	cmp	r4, r3
    7536:	d101      	bne.n	753c <__swbuf_r+0x20>
    7538:	686c      	ldr	r4, [r5, #4]
    753a:	e008      	b.n	754e <__swbuf_r+0x32>
    753c:	4b21      	ldr	r3, [pc, #132]	; (75c4 <__swbuf_r+0xa8>)
    753e:	429c      	cmp	r4, r3
    7540:	d101      	bne.n	7546 <__swbuf_r+0x2a>
    7542:	68ac      	ldr	r4, [r5, #8]
    7544:	e003      	b.n	754e <__swbuf_r+0x32>
    7546:	4b20      	ldr	r3, [pc, #128]	; (75c8 <__swbuf_r+0xac>)
    7548:	429c      	cmp	r4, r3
    754a:	d100      	bne.n	754e <__swbuf_r+0x32>
    754c:	68ec      	ldr	r4, [r5, #12]
    754e:	69a3      	ldr	r3, [r4, #24]
    7550:	60a3      	str	r3, [r4, #8]
    7552:	89a3      	ldrh	r3, [r4, #12]
    7554:	071a      	lsls	r2, r3, #28
    7556:	d50a      	bpl.n	756e <__swbuf_r+0x52>
    7558:	6923      	ldr	r3, [r4, #16]
    755a:	2b00      	cmp	r3, #0
    755c:	d007      	beq.n	756e <__swbuf_r+0x52>
    755e:	6822      	ldr	r2, [r4, #0]
    7560:	6923      	ldr	r3, [r4, #16]
    7562:	b2f6      	uxtb	r6, r6
    7564:	1ad0      	subs	r0, r2, r3
    7566:	6962      	ldr	r2, [r4, #20]
    7568:	4290      	cmp	r0, r2
    756a:	db0f      	blt.n	758c <__swbuf_r+0x70>
    756c:	e008      	b.n	7580 <__swbuf_r+0x64>
    756e:	1c28      	adds	r0, r5, #0
    7570:	1c21      	adds	r1, r4, #0
    7572:	f000 f82b 	bl	75cc <__swsetup_r>
    7576:	2800      	cmp	r0, #0
    7578:	d0f1      	beq.n	755e <__swbuf_r+0x42>
    757a:	2001      	movs	r0, #1
    757c:	4240      	negs	r0, r0
    757e:	e01d      	b.n	75bc <__swbuf_r+0xa0>
    7580:	1c28      	adds	r0, r5, #0
    7582:	1c21      	adds	r1, r4, #0
    7584:	f000 f91e 	bl	77c4 <_fflush_r>
    7588:	2800      	cmp	r0, #0
    758a:	d1f6      	bne.n	757a <__swbuf_r+0x5e>
    758c:	68a3      	ldr	r3, [r4, #8]
    758e:	3001      	adds	r0, #1
    7590:	3b01      	subs	r3, #1
    7592:	60a3      	str	r3, [r4, #8]
    7594:	6823      	ldr	r3, [r4, #0]
    7596:	1c5a      	adds	r2, r3, #1
    7598:	6022      	str	r2, [r4, #0]
    759a:	701e      	strb	r6, [r3, #0]
    759c:	6963      	ldr	r3, [r4, #20]
    759e:	4298      	cmp	r0, r3
    75a0:	d005      	beq.n	75ae <__swbuf_r+0x92>
    75a2:	89a3      	ldrh	r3, [r4, #12]
    75a4:	1c30      	adds	r0, r6, #0
    75a6:	07da      	lsls	r2, r3, #31
    75a8:	d508      	bpl.n	75bc <__swbuf_r+0xa0>
    75aa:	2e0a      	cmp	r6, #10
    75ac:	d106      	bne.n	75bc <__swbuf_r+0xa0>
    75ae:	1c28      	adds	r0, r5, #0
    75b0:	1c21      	adds	r1, r4, #0
    75b2:	f000 f907 	bl	77c4 <_fflush_r>
    75b6:	2800      	cmp	r0, #0
    75b8:	d1df      	bne.n	757a <__swbuf_r+0x5e>
    75ba:	1c30      	adds	r0, r6, #0
    75bc:	bd70      	pop	{r4, r5, r6, pc}
    75be:	46c0      	nop			; (mov r8, r8)
    75c0:	00008030 	.word	0x00008030
    75c4:	00008050 	.word	0x00008050
    75c8:	00008070 	.word	0x00008070

000075cc <__swsetup_r>:
    75cc:	4b34      	ldr	r3, [pc, #208]	; (76a0 <__swsetup_r+0xd4>)
    75ce:	b570      	push	{r4, r5, r6, lr}
    75d0:	681d      	ldr	r5, [r3, #0]
    75d2:	1c06      	adds	r6, r0, #0
    75d4:	1c0c      	adds	r4, r1, #0
    75d6:	2d00      	cmp	r5, #0
    75d8:	d005      	beq.n	75e6 <__swsetup_r+0x1a>
    75da:	69a9      	ldr	r1, [r5, #24]
    75dc:	2900      	cmp	r1, #0
    75de:	d102      	bne.n	75e6 <__swsetup_r+0x1a>
    75e0:	1c28      	adds	r0, r5, #0
    75e2:	f000 f96f 	bl	78c4 <__sinit>
    75e6:	4b2f      	ldr	r3, [pc, #188]	; (76a4 <__swsetup_r+0xd8>)
    75e8:	429c      	cmp	r4, r3
    75ea:	d101      	bne.n	75f0 <__swsetup_r+0x24>
    75ec:	686c      	ldr	r4, [r5, #4]
    75ee:	e008      	b.n	7602 <__swsetup_r+0x36>
    75f0:	4b2d      	ldr	r3, [pc, #180]	; (76a8 <__swsetup_r+0xdc>)
    75f2:	429c      	cmp	r4, r3
    75f4:	d101      	bne.n	75fa <__swsetup_r+0x2e>
    75f6:	68ac      	ldr	r4, [r5, #8]
    75f8:	e003      	b.n	7602 <__swsetup_r+0x36>
    75fa:	4b2c      	ldr	r3, [pc, #176]	; (76ac <__swsetup_r+0xe0>)
    75fc:	429c      	cmp	r4, r3
    75fe:	d100      	bne.n	7602 <__swsetup_r+0x36>
    7600:	68ec      	ldr	r4, [r5, #12]
    7602:	89a2      	ldrh	r2, [r4, #12]
    7604:	b293      	uxth	r3, r2
    7606:	0719      	lsls	r1, r3, #28
    7608:	d421      	bmi.n	764e <__swsetup_r+0x82>
    760a:	06d9      	lsls	r1, r3, #27
    760c:	d405      	bmi.n	761a <__swsetup_r+0x4e>
    760e:	2309      	movs	r3, #9
    7610:	6033      	str	r3, [r6, #0]
    7612:	2340      	movs	r3, #64	; 0x40
    7614:	431a      	orrs	r2, r3
    7616:	81a2      	strh	r2, [r4, #12]
    7618:	e03f      	b.n	769a <__swsetup_r+0xce>
    761a:	075a      	lsls	r2, r3, #29
    761c:	d513      	bpl.n	7646 <__swsetup_r+0x7a>
    761e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7620:	2900      	cmp	r1, #0
    7622:	d008      	beq.n	7636 <__swsetup_r+0x6a>
    7624:	1c23      	adds	r3, r4, #0
    7626:	3344      	adds	r3, #68	; 0x44
    7628:	4299      	cmp	r1, r3
    762a:	d002      	beq.n	7632 <__swsetup_r+0x66>
    762c:	1c30      	adds	r0, r6, #0
    762e:	f000 fa1f 	bl	7a70 <_free_r>
    7632:	2300      	movs	r3, #0
    7634:	6363      	str	r3, [r4, #52]	; 0x34
    7636:	89a3      	ldrh	r3, [r4, #12]
    7638:	2224      	movs	r2, #36	; 0x24
    763a:	4393      	bics	r3, r2
    763c:	81a3      	strh	r3, [r4, #12]
    763e:	2300      	movs	r3, #0
    7640:	6063      	str	r3, [r4, #4]
    7642:	6923      	ldr	r3, [r4, #16]
    7644:	6023      	str	r3, [r4, #0]
    7646:	89a3      	ldrh	r3, [r4, #12]
    7648:	2208      	movs	r2, #8
    764a:	4313      	orrs	r3, r2
    764c:	81a3      	strh	r3, [r4, #12]
    764e:	6921      	ldr	r1, [r4, #16]
    7650:	2900      	cmp	r1, #0
    7652:	d10b      	bne.n	766c <__swsetup_r+0xa0>
    7654:	89a3      	ldrh	r3, [r4, #12]
    7656:	22a0      	movs	r2, #160	; 0xa0
    7658:	0092      	lsls	r2, r2, #2
    765a:	401a      	ands	r2, r3
    765c:	2380      	movs	r3, #128	; 0x80
    765e:	009b      	lsls	r3, r3, #2
    7660:	429a      	cmp	r2, r3
    7662:	d003      	beq.n	766c <__swsetup_r+0xa0>
    7664:	1c30      	adds	r0, r6, #0
    7666:	1c21      	adds	r1, r4, #0
    7668:	f000 f99c 	bl	79a4 <__smakebuf_r>
    766c:	89a3      	ldrh	r3, [r4, #12]
    766e:	2201      	movs	r2, #1
    7670:	401a      	ands	r2, r3
    7672:	d005      	beq.n	7680 <__swsetup_r+0xb4>
    7674:	6961      	ldr	r1, [r4, #20]
    7676:	2200      	movs	r2, #0
    7678:	60a2      	str	r2, [r4, #8]
    767a:	424a      	negs	r2, r1
    767c:	61a2      	str	r2, [r4, #24]
    767e:	e003      	b.n	7688 <__swsetup_r+0xbc>
    7680:	0799      	lsls	r1, r3, #30
    7682:	d400      	bmi.n	7686 <__swsetup_r+0xba>
    7684:	6962      	ldr	r2, [r4, #20]
    7686:	60a2      	str	r2, [r4, #8]
    7688:	6922      	ldr	r2, [r4, #16]
    768a:	2000      	movs	r0, #0
    768c:	4282      	cmp	r2, r0
    768e:	d106      	bne.n	769e <__swsetup_r+0xd2>
    7690:	0619      	lsls	r1, r3, #24
    7692:	d504      	bpl.n	769e <__swsetup_r+0xd2>
    7694:	2240      	movs	r2, #64	; 0x40
    7696:	4313      	orrs	r3, r2
    7698:	81a3      	strh	r3, [r4, #12]
    769a:	2001      	movs	r0, #1
    769c:	4240      	negs	r0, r0
    769e:	bd70      	pop	{r4, r5, r6, pc}
    76a0:	2000006c 	.word	0x2000006c
    76a4:	00008030 	.word	0x00008030
    76a8:	00008050 	.word	0x00008050
    76ac:	00008070 	.word	0x00008070

000076b0 <__sflush_r>:
    76b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    76b2:	898b      	ldrh	r3, [r1, #12]
    76b4:	1c05      	adds	r5, r0, #0
    76b6:	1c0c      	adds	r4, r1, #0
    76b8:	0719      	lsls	r1, r3, #28
    76ba:	d45e      	bmi.n	777a <__sflush_r+0xca>
    76bc:	6862      	ldr	r2, [r4, #4]
    76be:	2a00      	cmp	r2, #0
    76c0:	dc02      	bgt.n	76c8 <__sflush_r+0x18>
    76c2:	6c27      	ldr	r7, [r4, #64]	; 0x40
    76c4:	2f00      	cmp	r7, #0
    76c6:	dd1a      	ble.n	76fe <__sflush_r+0x4e>
    76c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    76ca:	2f00      	cmp	r7, #0
    76cc:	d017      	beq.n	76fe <__sflush_r+0x4e>
    76ce:	2200      	movs	r2, #0
    76d0:	682e      	ldr	r6, [r5, #0]
    76d2:	602a      	str	r2, [r5, #0]
    76d4:	2280      	movs	r2, #128	; 0x80
    76d6:	0152      	lsls	r2, r2, #5
    76d8:	401a      	ands	r2, r3
    76da:	d001      	beq.n	76e0 <__sflush_r+0x30>
    76dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    76de:	e015      	b.n	770c <__sflush_r+0x5c>
    76e0:	1c28      	adds	r0, r5, #0
    76e2:	6a21      	ldr	r1, [r4, #32]
    76e4:	2301      	movs	r3, #1
    76e6:	47b8      	blx	r7
    76e8:	1c02      	adds	r2, r0, #0
    76ea:	1c41      	adds	r1, r0, #1
    76ec:	d10e      	bne.n	770c <__sflush_r+0x5c>
    76ee:	682b      	ldr	r3, [r5, #0]
    76f0:	2b00      	cmp	r3, #0
    76f2:	d00b      	beq.n	770c <__sflush_r+0x5c>
    76f4:	2b1d      	cmp	r3, #29
    76f6:	d001      	beq.n	76fc <__sflush_r+0x4c>
    76f8:	2b16      	cmp	r3, #22
    76fa:	d102      	bne.n	7702 <__sflush_r+0x52>
    76fc:	602e      	str	r6, [r5, #0]
    76fe:	2000      	movs	r0, #0
    7700:	e05e      	b.n	77c0 <__sflush_r+0x110>
    7702:	89a3      	ldrh	r3, [r4, #12]
    7704:	2140      	movs	r1, #64	; 0x40
    7706:	430b      	orrs	r3, r1
    7708:	81a3      	strh	r3, [r4, #12]
    770a:	e059      	b.n	77c0 <__sflush_r+0x110>
    770c:	89a3      	ldrh	r3, [r4, #12]
    770e:	075f      	lsls	r7, r3, #29
    7710:	d506      	bpl.n	7720 <__sflush_r+0x70>
    7712:	6861      	ldr	r1, [r4, #4]
    7714:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7716:	1a52      	subs	r2, r2, r1
    7718:	2b00      	cmp	r3, #0
    771a:	d001      	beq.n	7720 <__sflush_r+0x70>
    771c:	6c27      	ldr	r7, [r4, #64]	; 0x40
    771e:	1bd2      	subs	r2, r2, r7
    7720:	1c28      	adds	r0, r5, #0
    7722:	6a21      	ldr	r1, [r4, #32]
    7724:	2300      	movs	r3, #0
    7726:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7728:	47b8      	blx	r7
    772a:	89a2      	ldrh	r2, [r4, #12]
    772c:	1c41      	adds	r1, r0, #1
    772e:	d106      	bne.n	773e <__sflush_r+0x8e>
    7730:	682b      	ldr	r3, [r5, #0]
    7732:	2b00      	cmp	r3, #0
    7734:	d003      	beq.n	773e <__sflush_r+0x8e>
    7736:	2b1d      	cmp	r3, #29
    7738:	d001      	beq.n	773e <__sflush_r+0x8e>
    773a:	2b16      	cmp	r3, #22
    773c:	d119      	bne.n	7772 <__sflush_r+0xc2>
    773e:	2300      	movs	r3, #0
    7740:	6063      	str	r3, [r4, #4]
    7742:	6923      	ldr	r3, [r4, #16]
    7744:	6023      	str	r3, [r4, #0]
    7746:	04d7      	lsls	r7, r2, #19
    7748:	d505      	bpl.n	7756 <__sflush_r+0xa6>
    774a:	1c41      	adds	r1, r0, #1
    774c:	d102      	bne.n	7754 <__sflush_r+0xa4>
    774e:	682a      	ldr	r2, [r5, #0]
    7750:	2a00      	cmp	r2, #0
    7752:	d100      	bne.n	7756 <__sflush_r+0xa6>
    7754:	6560      	str	r0, [r4, #84]	; 0x54
    7756:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7758:	602e      	str	r6, [r5, #0]
    775a:	2900      	cmp	r1, #0
    775c:	d0cf      	beq.n	76fe <__sflush_r+0x4e>
    775e:	1c23      	adds	r3, r4, #0
    7760:	3344      	adds	r3, #68	; 0x44
    7762:	4299      	cmp	r1, r3
    7764:	d002      	beq.n	776c <__sflush_r+0xbc>
    7766:	1c28      	adds	r0, r5, #0
    7768:	f000 f982 	bl	7a70 <_free_r>
    776c:	2000      	movs	r0, #0
    776e:	6360      	str	r0, [r4, #52]	; 0x34
    7770:	e026      	b.n	77c0 <__sflush_r+0x110>
    7772:	2340      	movs	r3, #64	; 0x40
    7774:	431a      	orrs	r2, r3
    7776:	81a2      	strh	r2, [r4, #12]
    7778:	e022      	b.n	77c0 <__sflush_r+0x110>
    777a:	6926      	ldr	r6, [r4, #16]
    777c:	2e00      	cmp	r6, #0
    777e:	d0be      	beq.n	76fe <__sflush_r+0x4e>
    7780:	6827      	ldr	r7, [r4, #0]
    7782:	2200      	movs	r2, #0
    7784:	1bbf      	subs	r7, r7, r6
    7786:	9701      	str	r7, [sp, #4]
    7788:	6026      	str	r6, [r4, #0]
    778a:	0799      	lsls	r1, r3, #30
    778c:	d100      	bne.n	7790 <__sflush_r+0xe0>
    778e:	6962      	ldr	r2, [r4, #20]
    7790:	60a2      	str	r2, [r4, #8]
    7792:	9f01      	ldr	r7, [sp, #4]
    7794:	2f00      	cmp	r7, #0
    7796:	ddb2      	ble.n	76fe <__sflush_r+0x4e>
    7798:	1c28      	adds	r0, r5, #0
    779a:	6a21      	ldr	r1, [r4, #32]
    779c:	1c32      	adds	r2, r6, #0
    779e:	9b01      	ldr	r3, [sp, #4]
    77a0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    77a2:	47b8      	blx	r7
    77a4:	2800      	cmp	r0, #0
    77a6:	dc06      	bgt.n	77b6 <__sflush_r+0x106>
    77a8:	89a3      	ldrh	r3, [r4, #12]
    77aa:	2240      	movs	r2, #64	; 0x40
    77ac:	4313      	orrs	r3, r2
    77ae:	2001      	movs	r0, #1
    77b0:	81a3      	strh	r3, [r4, #12]
    77b2:	4240      	negs	r0, r0
    77b4:	e004      	b.n	77c0 <__sflush_r+0x110>
    77b6:	9f01      	ldr	r7, [sp, #4]
    77b8:	1836      	adds	r6, r6, r0
    77ba:	1a3f      	subs	r7, r7, r0
    77bc:	9701      	str	r7, [sp, #4]
    77be:	e7e8      	b.n	7792 <__sflush_r+0xe2>
    77c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000077c4 <_fflush_r>:
    77c4:	690a      	ldr	r2, [r1, #16]
    77c6:	b538      	push	{r3, r4, r5, lr}
    77c8:	1c05      	adds	r5, r0, #0
    77ca:	1c0c      	adds	r4, r1, #0
    77cc:	2a00      	cmp	r2, #0
    77ce:	d101      	bne.n	77d4 <_fflush_r+0x10>
    77d0:	2000      	movs	r0, #0
    77d2:	e01c      	b.n	780e <_fflush_r+0x4a>
    77d4:	2800      	cmp	r0, #0
    77d6:	d004      	beq.n	77e2 <_fflush_r+0x1e>
    77d8:	6983      	ldr	r3, [r0, #24]
    77da:	2b00      	cmp	r3, #0
    77dc:	d101      	bne.n	77e2 <_fflush_r+0x1e>
    77de:	f000 f871 	bl	78c4 <__sinit>
    77e2:	4b0b      	ldr	r3, [pc, #44]	; (7810 <_fflush_r+0x4c>)
    77e4:	429c      	cmp	r4, r3
    77e6:	d101      	bne.n	77ec <_fflush_r+0x28>
    77e8:	686c      	ldr	r4, [r5, #4]
    77ea:	e008      	b.n	77fe <_fflush_r+0x3a>
    77ec:	4b09      	ldr	r3, [pc, #36]	; (7814 <_fflush_r+0x50>)
    77ee:	429c      	cmp	r4, r3
    77f0:	d101      	bne.n	77f6 <_fflush_r+0x32>
    77f2:	68ac      	ldr	r4, [r5, #8]
    77f4:	e003      	b.n	77fe <_fflush_r+0x3a>
    77f6:	4b08      	ldr	r3, [pc, #32]	; (7818 <_fflush_r+0x54>)
    77f8:	429c      	cmp	r4, r3
    77fa:	d100      	bne.n	77fe <_fflush_r+0x3a>
    77fc:	68ec      	ldr	r4, [r5, #12]
    77fe:	220c      	movs	r2, #12
    7800:	5ea3      	ldrsh	r3, [r4, r2]
    7802:	2b00      	cmp	r3, #0
    7804:	d0e4      	beq.n	77d0 <_fflush_r+0xc>
    7806:	1c28      	adds	r0, r5, #0
    7808:	1c21      	adds	r1, r4, #0
    780a:	f7ff ff51 	bl	76b0 <__sflush_r>
    780e:	bd38      	pop	{r3, r4, r5, pc}
    7810:	00008030 	.word	0x00008030
    7814:	00008050 	.word	0x00008050
    7818:	00008070 	.word	0x00008070

0000781c <_cleanup_r>:
    781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    781e:	1c04      	adds	r4, r0, #0
    7820:	1c07      	adds	r7, r0, #0
    7822:	3448      	adds	r4, #72	; 0x48
    7824:	2c00      	cmp	r4, #0
    7826:	d012      	beq.n	784e <_cleanup_r+0x32>
    7828:	68a5      	ldr	r5, [r4, #8]
    782a:	6866      	ldr	r6, [r4, #4]
    782c:	3e01      	subs	r6, #1
    782e:	d40c      	bmi.n	784a <_cleanup_r+0x2e>
    7830:	89ab      	ldrh	r3, [r5, #12]
    7832:	2b01      	cmp	r3, #1
    7834:	d907      	bls.n	7846 <_cleanup_r+0x2a>
    7836:	220e      	movs	r2, #14
    7838:	5eab      	ldrsh	r3, [r5, r2]
    783a:	3301      	adds	r3, #1
    783c:	d003      	beq.n	7846 <_cleanup_r+0x2a>
    783e:	1c38      	adds	r0, r7, #0
    7840:	1c29      	adds	r1, r5, #0
    7842:	f7ff ffbf 	bl	77c4 <_fflush_r>
    7846:	3568      	adds	r5, #104	; 0x68
    7848:	e7f0      	b.n	782c <_cleanup_r+0x10>
    784a:	6824      	ldr	r4, [r4, #0]
    784c:	e7ea      	b.n	7824 <_cleanup_r+0x8>
    784e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007850 <std.isra.0>:
    7850:	2300      	movs	r3, #0
    7852:	b510      	push	{r4, lr}
    7854:	1c04      	adds	r4, r0, #0
    7856:	6003      	str	r3, [r0, #0]
    7858:	6043      	str	r3, [r0, #4]
    785a:	6083      	str	r3, [r0, #8]
    785c:	8181      	strh	r1, [r0, #12]
    785e:	6643      	str	r3, [r0, #100]	; 0x64
    7860:	81c2      	strh	r2, [r0, #14]
    7862:	6103      	str	r3, [r0, #16]
    7864:	6143      	str	r3, [r0, #20]
    7866:	6183      	str	r3, [r0, #24]
    7868:	1c19      	adds	r1, r3, #0
    786a:	2208      	movs	r2, #8
    786c:	305c      	adds	r0, #92	; 0x5c
    786e:	f7ff faac 	bl	6dca <memset>
    7872:	4b05      	ldr	r3, [pc, #20]	; (7888 <std.isra.0+0x38>)
    7874:	6224      	str	r4, [r4, #32]
    7876:	6263      	str	r3, [r4, #36]	; 0x24
    7878:	4b04      	ldr	r3, [pc, #16]	; (788c <std.isra.0+0x3c>)
    787a:	62a3      	str	r3, [r4, #40]	; 0x28
    787c:	4b04      	ldr	r3, [pc, #16]	; (7890 <std.isra.0+0x40>)
    787e:	62e3      	str	r3, [r4, #44]	; 0x2c
    7880:	4b04      	ldr	r3, [pc, #16]	; (7894 <std.isra.0+0x44>)
    7882:	6323      	str	r3, [r4, #48]	; 0x30
    7884:	bd10      	pop	{r4, pc}
    7886:	46c0      	nop			; (mov r8, r8)
    7888:	00007bcd 	.word	0x00007bcd
    788c:	00007bf5 	.word	0x00007bf5
    7890:	00007c2d 	.word	0x00007c2d
    7894:	00007c59 	.word	0x00007c59

00007898 <__sfmoreglue>:
    7898:	b570      	push	{r4, r5, r6, lr}
    789a:	1e4b      	subs	r3, r1, #1
    789c:	2568      	movs	r5, #104	; 0x68
    789e:	435d      	muls	r5, r3
    78a0:	1c0e      	adds	r6, r1, #0
    78a2:	1c29      	adds	r1, r5, #0
    78a4:	3174      	adds	r1, #116	; 0x74
    78a6:	f000 f92b 	bl	7b00 <_malloc_r>
    78aa:	1e04      	subs	r4, r0, #0
    78ac:	d008      	beq.n	78c0 <__sfmoreglue+0x28>
    78ae:	2100      	movs	r1, #0
    78b0:	6001      	str	r1, [r0, #0]
    78b2:	6046      	str	r6, [r0, #4]
    78b4:	1c2a      	adds	r2, r5, #0
    78b6:	300c      	adds	r0, #12
    78b8:	60a0      	str	r0, [r4, #8]
    78ba:	3268      	adds	r2, #104	; 0x68
    78bc:	f7ff fa85 	bl	6dca <memset>
    78c0:	1c20      	adds	r0, r4, #0
    78c2:	bd70      	pop	{r4, r5, r6, pc}

000078c4 <__sinit>:
    78c4:	6983      	ldr	r3, [r0, #24]
    78c6:	b513      	push	{r0, r1, r4, lr}
    78c8:	1c04      	adds	r4, r0, #0
    78ca:	2b00      	cmp	r3, #0
    78cc:	d127      	bne.n	791e <__sinit+0x5a>
    78ce:	6483      	str	r3, [r0, #72]	; 0x48
    78d0:	64c3      	str	r3, [r0, #76]	; 0x4c
    78d2:	6503      	str	r3, [r0, #80]	; 0x50
    78d4:	4b12      	ldr	r3, [pc, #72]	; (7920 <__sinit+0x5c>)
    78d6:	4a13      	ldr	r2, [pc, #76]	; (7924 <__sinit+0x60>)
    78d8:	681b      	ldr	r3, [r3, #0]
    78da:	6282      	str	r2, [r0, #40]	; 0x28
    78dc:	4298      	cmp	r0, r3
    78de:	d101      	bne.n	78e4 <__sinit+0x20>
    78e0:	2301      	movs	r3, #1
    78e2:	6183      	str	r3, [r0, #24]
    78e4:	1c20      	adds	r0, r4, #0
    78e6:	f000 f81f 	bl	7928 <__sfp>
    78ea:	6060      	str	r0, [r4, #4]
    78ec:	1c20      	adds	r0, r4, #0
    78ee:	f000 f81b 	bl	7928 <__sfp>
    78f2:	60a0      	str	r0, [r4, #8]
    78f4:	1c20      	adds	r0, r4, #0
    78f6:	f000 f817 	bl	7928 <__sfp>
    78fa:	2104      	movs	r1, #4
    78fc:	60e0      	str	r0, [r4, #12]
    78fe:	2200      	movs	r2, #0
    7900:	6860      	ldr	r0, [r4, #4]
    7902:	f7ff ffa5 	bl	7850 <std.isra.0>
    7906:	68a0      	ldr	r0, [r4, #8]
    7908:	2109      	movs	r1, #9
    790a:	2201      	movs	r2, #1
    790c:	f7ff ffa0 	bl	7850 <std.isra.0>
    7910:	68e0      	ldr	r0, [r4, #12]
    7912:	2112      	movs	r1, #18
    7914:	2202      	movs	r2, #2
    7916:	f7ff ff9b 	bl	7850 <std.isra.0>
    791a:	2301      	movs	r3, #1
    791c:	61a3      	str	r3, [r4, #24]
    791e:	bd13      	pop	{r0, r1, r4, pc}
    7920:	00007ff8 	.word	0x00007ff8
    7924:	0000781d 	.word	0x0000781d

00007928 <__sfp>:
    7928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    792a:	4b1d      	ldr	r3, [pc, #116]	; (79a0 <__sfp+0x78>)
    792c:	1c07      	adds	r7, r0, #0
    792e:	681e      	ldr	r6, [r3, #0]
    7930:	69b2      	ldr	r2, [r6, #24]
    7932:	2a00      	cmp	r2, #0
    7934:	d102      	bne.n	793c <__sfp+0x14>
    7936:	1c30      	adds	r0, r6, #0
    7938:	f7ff ffc4 	bl	78c4 <__sinit>
    793c:	3648      	adds	r6, #72	; 0x48
    793e:	68b4      	ldr	r4, [r6, #8]
    7940:	6873      	ldr	r3, [r6, #4]
    7942:	3b01      	subs	r3, #1
    7944:	d405      	bmi.n	7952 <__sfp+0x2a>
    7946:	220c      	movs	r2, #12
    7948:	5ea5      	ldrsh	r5, [r4, r2]
    794a:	2d00      	cmp	r5, #0
    794c:	d010      	beq.n	7970 <__sfp+0x48>
    794e:	3468      	adds	r4, #104	; 0x68
    7950:	e7f7      	b.n	7942 <__sfp+0x1a>
    7952:	6833      	ldr	r3, [r6, #0]
    7954:	2b00      	cmp	r3, #0
    7956:	d106      	bne.n	7966 <__sfp+0x3e>
    7958:	1c38      	adds	r0, r7, #0
    795a:	2104      	movs	r1, #4
    795c:	f7ff ff9c 	bl	7898 <__sfmoreglue>
    7960:	6030      	str	r0, [r6, #0]
    7962:	2800      	cmp	r0, #0
    7964:	d001      	beq.n	796a <__sfp+0x42>
    7966:	6836      	ldr	r6, [r6, #0]
    7968:	e7e9      	b.n	793e <__sfp+0x16>
    796a:	230c      	movs	r3, #12
    796c:	603b      	str	r3, [r7, #0]
    796e:	e016      	b.n	799e <__sfp+0x76>
    7970:	2301      	movs	r3, #1
    7972:	425b      	negs	r3, r3
    7974:	81e3      	strh	r3, [r4, #14]
    7976:	1c20      	adds	r0, r4, #0
    7978:	2301      	movs	r3, #1
    797a:	81a3      	strh	r3, [r4, #12]
    797c:	6665      	str	r5, [r4, #100]	; 0x64
    797e:	6025      	str	r5, [r4, #0]
    7980:	60a5      	str	r5, [r4, #8]
    7982:	6065      	str	r5, [r4, #4]
    7984:	6125      	str	r5, [r4, #16]
    7986:	6165      	str	r5, [r4, #20]
    7988:	61a5      	str	r5, [r4, #24]
    798a:	305c      	adds	r0, #92	; 0x5c
    798c:	1c29      	adds	r1, r5, #0
    798e:	2208      	movs	r2, #8
    7990:	f7ff fa1b 	bl	6dca <memset>
    7994:	6365      	str	r5, [r4, #52]	; 0x34
    7996:	63a5      	str	r5, [r4, #56]	; 0x38
    7998:	64a5      	str	r5, [r4, #72]	; 0x48
    799a:	64e5      	str	r5, [r4, #76]	; 0x4c
    799c:	1c20      	adds	r0, r4, #0
    799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79a0:	00007ff8 	.word	0x00007ff8

000079a4 <__smakebuf_r>:
    79a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    79a6:	898b      	ldrh	r3, [r1, #12]
    79a8:	b091      	sub	sp, #68	; 0x44
    79aa:	1c05      	adds	r5, r0, #0
    79ac:	1c0c      	adds	r4, r1, #0
    79ae:	079a      	lsls	r2, r3, #30
    79b0:	d425      	bmi.n	79fe <__smakebuf_r+0x5a>
    79b2:	230e      	movs	r3, #14
    79b4:	5ec9      	ldrsh	r1, [r1, r3]
    79b6:	2900      	cmp	r1, #0
    79b8:	da06      	bge.n	79c8 <__smakebuf_r+0x24>
    79ba:	89a7      	ldrh	r7, [r4, #12]
    79bc:	2380      	movs	r3, #128	; 0x80
    79be:	401f      	ands	r7, r3
    79c0:	d00f      	beq.n	79e2 <__smakebuf_r+0x3e>
    79c2:	2700      	movs	r7, #0
    79c4:	2640      	movs	r6, #64	; 0x40
    79c6:	e00e      	b.n	79e6 <__smakebuf_r+0x42>
    79c8:	aa01      	add	r2, sp, #4
    79ca:	f000 f979 	bl	7cc0 <_fstat_r>
    79ce:	2800      	cmp	r0, #0
    79d0:	dbf3      	blt.n	79ba <__smakebuf_r+0x16>
    79d2:	9b02      	ldr	r3, [sp, #8]
    79d4:	27f0      	movs	r7, #240	; 0xf0
    79d6:	023f      	lsls	r7, r7, #8
    79d8:	4a18      	ldr	r2, [pc, #96]	; (7a3c <__smakebuf_r+0x98>)
    79da:	401f      	ands	r7, r3
    79dc:	18bf      	adds	r7, r7, r2
    79de:	427b      	negs	r3, r7
    79e0:	415f      	adcs	r7, r3
    79e2:	2680      	movs	r6, #128	; 0x80
    79e4:	00f6      	lsls	r6, r6, #3
    79e6:	1c28      	adds	r0, r5, #0
    79e8:	1c31      	adds	r1, r6, #0
    79ea:	f000 f889 	bl	7b00 <_malloc_r>
    79ee:	2800      	cmp	r0, #0
    79f0:	d10c      	bne.n	7a0c <__smakebuf_r+0x68>
    79f2:	89a3      	ldrh	r3, [r4, #12]
    79f4:	059a      	lsls	r2, r3, #22
    79f6:	d41f      	bmi.n	7a38 <__smakebuf_r+0x94>
    79f8:	2202      	movs	r2, #2
    79fa:	4313      	orrs	r3, r2
    79fc:	81a3      	strh	r3, [r4, #12]
    79fe:	1c23      	adds	r3, r4, #0
    7a00:	3347      	adds	r3, #71	; 0x47
    7a02:	6023      	str	r3, [r4, #0]
    7a04:	6123      	str	r3, [r4, #16]
    7a06:	2301      	movs	r3, #1
    7a08:	6163      	str	r3, [r4, #20]
    7a0a:	e015      	b.n	7a38 <__smakebuf_r+0x94>
    7a0c:	4b0c      	ldr	r3, [pc, #48]	; (7a40 <__smakebuf_r+0x9c>)
    7a0e:	2280      	movs	r2, #128	; 0x80
    7a10:	62ab      	str	r3, [r5, #40]	; 0x28
    7a12:	89a3      	ldrh	r3, [r4, #12]
    7a14:	6020      	str	r0, [r4, #0]
    7a16:	4313      	orrs	r3, r2
    7a18:	81a3      	strh	r3, [r4, #12]
    7a1a:	6120      	str	r0, [r4, #16]
    7a1c:	6166      	str	r6, [r4, #20]
    7a1e:	2f00      	cmp	r7, #0
    7a20:	d00a      	beq.n	7a38 <__smakebuf_r+0x94>
    7a22:	230e      	movs	r3, #14
    7a24:	5ee1      	ldrsh	r1, [r4, r3]
    7a26:	1c28      	adds	r0, r5, #0
    7a28:	f000 f95c 	bl	7ce4 <_isatty_r>
    7a2c:	2800      	cmp	r0, #0
    7a2e:	d003      	beq.n	7a38 <__smakebuf_r+0x94>
    7a30:	89a3      	ldrh	r3, [r4, #12]
    7a32:	2201      	movs	r2, #1
    7a34:	4313      	orrs	r3, r2
    7a36:	81a3      	strh	r3, [r4, #12]
    7a38:	b011      	add	sp, #68	; 0x44
    7a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a3c:	ffffe000 	.word	0xffffe000
    7a40:	0000781d 	.word	0x0000781d

00007a44 <malloc>:
    7a44:	b508      	push	{r3, lr}
    7a46:	4b03      	ldr	r3, [pc, #12]	; (7a54 <malloc+0x10>)
    7a48:	1c01      	adds	r1, r0, #0
    7a4a:	6818      	ldr	r0, [r3, #0]
    7a4c:	f000 f858 	bl	7b00 <_malloc_r>
    7a50:	bd08      	pop	{r3, pc}
    7a52:	46c0      	nop			; (mov r8, r8)
    7a54:	2000006c 	.word	0x2000006c

00007a58 <memchr>:
    7a58:	b2c9      	uxtb	r1, r1
    7a5a:	1882      	adds	r2, r0, r2
    7a5c:	4290      	cmp	r0, r2
    7a5e:	d004      	beq.n	7a6a <memchr+0x12>
    7a60:	7803      	ldrb	r3, [r0, #0]
    7a62:	428b      	cmp	r3, r1
    7a64:	d002      	beq.n	7a6c <memchr+0x14>
    7a66:	3001      	adds	r0, #1
    7a68:	e7f8      	b.n	7a5c <memchr+0x4>
    7a6a:	2000      	movs	r0, #0
    7a6c:	4770      	bx	lr
	...

00007a70 <_free_r>:
    7a70:	b530      	push	{r4, r5, lr}
    7a72:	2900      	cmp	r1, #0
    7a74:	d040      	beq.n	7af8 <_free_r+0x88>
    7a76:	3904      	subs	r1, #4
    7a78:	680b      	ldr	r3, [r1, #0]
    7a7a:	2b00      	cmp	r3, #0
    7a7c:	da00      	bge.n	7a80 <_free_r+0x10>
    7a7e:	18c9      	adds	r1, r1, r3
    7a80:	4a1e      	ldr	r2, [pc, #120]	; (7afc <_free_r+0x8c>)
    7a82:	6813      	ldr	r3, [r2, #0]
    7a84:	1c14      	adds	r4, r2, #0
    7a86:	2b00      	cmp	r3, #0
    7a88:	d102      	bne.n	7a90 <_free_r+0x20>
    7a8a:	604b      	str	r3, [r1, #4]
    7a8c:	6011      	str	r1, [r2, #0]
    7a8e:	e033      	b.n	7af8 <_free_r+0x88>
    7a90:	4299      	cmp	r1, r3
    7a92:	d20f      	bcs.n	7ab4 <_free_r+0x44>
    7a94:	6808      	ldr	r0, [r1, #0]
    7a96:	180a      	adds	r2, r1, r0
    7a98:	429a      	cmp	r2, r3
    7a9a:	d105      	bne.n	7aa8 <_free_r+0x38>
    7a9c:	6813      	ldr	r3, [r2, #0]
    7a9e:	6852      	ldr	r2, [r2, #4]
    7aa0:	18c0      	adds	r0, r0, r3
    7aa2:	6008      	str	r0, [r1, #0]
    7aa4:	604a      	str	r2, [r1, #4]
    7aa6:	e000      	b.n	7aaa <_free_r+0x3a>
    7aa8:	604b      	str	r3, [r1, #4]
    7aaa:	6021      	str	r1, [r4, #0]
    7aac:	e024      	b.n	7af8 <_free_r+0x88>
    7aae:	428a      	cmp	r2, r1
    7ab0:	d803      	bhi.n	7aba <_free_r+0x4a>
    7ab2:	1c13      	adds	r3, r2, #0
    7ab4:	685a      	ldr	r2, [r3, #4]
    7ab6:	2a00      	cmp	r2, #0
    7ab8:	d1f9      	bne.n	7aae <_free_r+0x3e>
    7aba:	681d      	ldr	r5, [r3, #0]
    7abc:	195c      	adds	r4, r3, r5
    7abe:	428c      	cmp	r4, r1
    7ac0:	d10b      	bne.n	7ada <_free_r+0x6a>
    7ac2:	6809      	ldr	r1, [r1, #0]
    7ac4:	1869      	adds	r1, r5, r1
    7ac6:	1858      	adds	r0, r3, r1
    7ac8:	6019      	str	r1, [r3, #0]
    7aca:	4290      	cmp	r0, r2
    7acc:	d114      	bne.n	7af8 <_free_r+0x88>
    7ace:	6814      	ldr	r4, [r2, #0]
    7ad0:	6852      	ldr	r2, [r2, #4]
    7ad2:	1909      	adds	r1, r1, r4
    7ad4:	6019      	str	r1, [r3, #0]
    7ad6:	605a      	str	r2, [r3, #4]
    7ad8:	e00e      	b.n	7af8 <_free_r+0x88>
    7ada:	428c      	cmp	r4, r1
    7adc:	d902      	bls.n	7ae4 <_free_r+0x74>
    7ade:	230c      	movs	r3, #12
    7ae0:	6003      	str	r3, [r0, #0]
    7ae2:	e009      	b.n	7af8 <_free_r+0x88>
    7ae4:	6808      	ldr	r0, [r1, #0]
    7ae6:	180c      	adds	r4, r1, r0
    7ae8:	4294      	cmp	r4, r2
    7aea:	d103      	bne.n	7af4 <_free_r+0x84>
    7aec:	6814      	ldr	r4, [r2, #0]
    7aee:	6852      	ldr	r2, [r2, #4]
    7af0:	1900      	adds	r0, r0, r4
    7af2:	6008      	str	r0, [r1, #0]
    7af4:	604a      	str	r2, [r1, #4]
    7af6:	6059      	str	r1, [r3, #4]
    7af8:	bd30      	pop	{r4, r5, pc}
    7afa:	46c0      	nop			; (mov r8, r8)
    7afc:	20000860 	.word	0x20000860

00007b00 <_malloc_r>:
    7b00:	b570      	push	{r4, r5, r6, lr}
    7b02:	2303      	movs	r3, #3
    7b04:	1ccd      	adds	r5, r1, #3
    7b06:	439d      	bics	r5, r3
    7b08:	3508      	adds	r5, #8
    7b0a:	1c06      	adds	r6, r0, #0
    7b0c:	2d0c      	cmp	r5, #12
    7b0e:	d201      	bcs.n	7b14 <_malloc_r+0x14>
    7b10:	250c      	movs	r5, #12
    7b12:	e001      	b.n	7b18 <_malloc_r+0x18>
    7b14:	2d00      	cmp	r5, #0
    7b16:	db3f      	blt.n	7b98 <_malloc_r+0x98>
    7b18:	428d      	cmp	r5, r1
    7b1a:	d33d      	bcc.n	7b98 <_malloc_r+0x98>
    7b1c:	4b20      	ldr	r3, [pc, #128]	; (7ba0 <_malloc_r+0xa0>)
    7b1e:	681c      	ldr	r4, [r3, #0]
    7b20:	1c1a      	adds	r2, r3, #0
    7b22:	1c21      	adds	r1, r4, #0
    7b24:	2900      	cmp	r1, #0
    7b26:	d013      	beq.n	7b50 <_malloc_r+0x50>
    7b28:	6808      	ldr	r0, [r1, #0]
    7b2a:	1b43      	subs	r3, r0, r5
    7b2c:	d40d      	bmi.n	7b4a <_malloc_r+0x4a>
    7b2e:	2b0b      	cmp	r3, #11
    7b30:	d902      	bls.n	7b38 <_malloc_r+0x38>
    7b32:	600b      	str	r3, [r1, #0]
    7b34:	18cc      	adds	r4, r1, r3
    7b36:	e01e      	b.n	7b76 <_malloc_r+0x76>
    7b38:	428c      	cmp	r4, r1
    7b3a:	d102      	bne.n	7b42 <_malloc_r+0x42>
    7b3c:	6863      	ldr	r3, [r4, #4]
    7b3e:	6013      	str	r3, [r2, #0]
    7b40:	e01a      	b.n	7b78 <_malloc_r+0x78>
    7b42:	6848      	ldr	r0, [r1, #4]
    7b44:	6060      	str	r0, [r4, #4]
    7b46:	1c0c      	adds	r4, r1, #0
    7b48:	e016      	b.n	7b78 <_malloc_r+0x78>
    7b4a:	1c0c      	adds	r4, r1, #0
    7b4c:	6849      	ldr	r1, [r1, #4]
    7b4e:	e7e9      	b.n	7b24 <_malloc_r+0x24>
    7b50:	4c14      	ldr	r4, [pc, #80]	; (7ba4 <_malloc_r+0xa4>)
    7b52:	6820      	ldr	r0, [r4, #0]
    7b54:	2800      	cmp	r0, #0
    7b56:	d103      	bne.n	7b60 <_malloc_r+0x60>
    7b58:	1c30      	adds	r0, r6, #0
    7b5a:	f000 f825 	bl	7ba8 <_sbrk_r>
    7b5e:	6020      	str	r0, [r4, #0]
    7b60:	1c30      	adds	r0, r6, #0
    7b62:	1c29      	adds	r1, r5, #0
    7b64:	f000 f820 	bl	7ba8 <_sbrk_r>
    7b68:	1c43      	adds	r3, r0, #1
    7b6a:	d015      	beq.n	7b98 <_malloc_r+0x98>
    7b6c:	1cc4      	adds	r4, r0, #3
    7b6e:	2303      	movs	r3, #3
    7b70:	439c      	bics	r4, r3
    7b72:	4284      	cmp	r4, r0
    7b74:	d10a      	bne.n	7b8c <_malloc_r+0x8c>
    7b76:	6025      	str	r5, [r4, #0]
    7b78:	1c20      	adds	r0, r4, #0
    7b7a:	300b      	adds	r0, #11
    7b7c:	2207      	movs	r2, #7
    7b7e:	1d23      	adds	r3, r4, #4
    7b80:	4390      	bics	r0, r2
    7b82:	1ac3      	subs	r3, r0, r3
    7b84:	d00b      	beq.n	7b9e <_malloc_r+0x9e>
    7b86:	425a      	negs	r2, r3
    7b88:	50e2      	str	r2, [r4, r3]
    7b8a:	e008      	b.n	7b9e <_malloc_r+0x9e>
    7b8c:	1a21      	subs	r1, r4, r0
    7b8e:	1c30      	adds	r0, r6, #0
    7b90:	f000 f80a 	bl	7ba8 <_sbrk_r>
    7b94:	3001      	adds	r0, #1
    7b96:	d1ee      	bne.n	7b76 <_malloc_r+0x76>
    7b98:	230c      	movs	r3, #12
    7b9a:	6033      	str	r3, [r6, #0]
    7b9c:	2000      	movs	r0, #0
    7b9e:	bd70      	pop	{r4, r5, r6, pc}
    7ba0:	20000860 	.word	0x20000860
    7ba4:	2000085c 	.word	0x2000085c

00007ba8 <_sbrk_r>:
    7ba8:	b538      	push	{r3, r4, r5, lr}
    7baa:	4c07      	ldr	r4, [pc, #28]	; (7bc8 <_sbrk_r+0x20>)
    7bac:	2300      	movs	r3, #0
    7bae:	1c05      	adds	r5, r0, #0
    7bb0:	1c08      	adds	r0, r1, #0
    7bb2:	6023      	str	r3, [r4, #0]
    7bb4:	f7fa fcc0 	bl	2538 <_sbrk>
    7bb8:	1c43      	adds	r3, r0, #1
    7bba:	d103      	bne.n	7bc4 <_sbrk_r+0x1c>
    7bbc:	6823      	ldr	r3, [r4, #0]
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	d000      	beq.n	7bc4 <_sbrk_r+0x1c>
    7bc2:	602b      	str	r3, [r5, #0]
    7bc4:	bd38      	pop	{r3, r4, r5, pc}
    7bc6:	46c0      	nop			; (mov r8, r8)
    7bc8:	20000a00 	.word	0x20000a00

00007bcc <__sread>:
    7bcc:	b538      	push	{r3, r4, r5, lr}
    7bce:	1c0c      	adds	r4, r1, #0
    7bd0:	250e      	movs	r5, #14
    7bd2:	5f49      	ldrsh	r1, [r1, r5]
    7bd4:	f000 f8ac 	bl	7d30 <_read_r>
    7bd8:	2800      	cmp	r0, #0
    7bda:	db03      	blt.n	7be4 <__sread+0x18>
    7bdc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    7bde:	1813      	adds	r3, r2, r0
    7be0:	6563      	str	r3, [r4, #84]	; 0x54
    7be2:	e003      	b.n	7bec <__sread+0x20>
    7be4:	89a2      	ldrh	r2, [r4, #12]
    7be6:	4b02      	ldr	r3, [pc, #8]	; (7bf0 <__sread+0x24>)
    7be8:	4013      	ands	r3, r2
    7bea:	81a3      	strh	r3, [r4, #12]
    7bec:	bd38      	pop	{r3, r4, r5, pc}
    7bee:	46c0      	nop			; (mov r8, r8)
    7bf0:	ffffefff 	.word	0xffffefff

00007bf4 <__swrite>:
    7bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bf6:	1c1e      	adds	r6, r3, #0
    7bf8:	898b      	ldrh	r3, [r1, #12]
    7bfa:	1c05      	adds	r5, r0, #0
    7bfc:	1c0c      	adds	r4, r1, #0
    7bfe:	1c17      	adds	r7, r2, #0
    7c00:	05da      	lsls	r2, r3, #23
    7c02:	d505      	bpl.n	7c10 <__swrite+0x1c>
    7c04:	230e      	movs	r3, #14
    7c06:	5ec9      	ldrsh	r1, [r1, r3]
    7c08:	2200      	movs	r2, #0
    7c0a:	2302      	movs	r3, #2
    7c0c:	f000 f87c 	bl	7d08 <_lseek_r>
    7c10:	89a2      	ldrh	r2, [r4, #12]
    7c12:	4b05      	ldr	r3, [pc, #20]	; (7c28 <__swrite+0x34>)
    7c14:	1c28      	adds	r0, r5, #0
    7c16:	4013      	ands	r3, r2
    7c18:	81a3      	strh	r3, [r4, #12]
    7c1a:	220e      	movs	r2, #14
    7c1c:	5ea1      	ldrsh	r1, [r4, r2]
    7c1e:	1c33      	adds	r3, r6, #0
    7c20:	1c3a      	adds	r2, r7, #0
    7c22:	f000 f827 	bl	7c74 <_write_r>
    7c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c28:	ffffefff 	.word	0xffffefff

00007c2c <__sseek>:
    7c2c:	b538      	push	{r3, r4, r5, lr}
    7c2e:	1c0c      	adds	r4, r1, #0
    7c30:	250e      	movs	r5, #14
    7c32:	5f49      	ldrsh	r1, [r1, r5]
    7c34:	f000 f868 	bl	7d08 <_lseek_r>
    7c38:	89a3      	ldrh	r3, [r4, #12]
    7c3a:	1c42      	adds	r2, r0, #1
    7c3c:	d103      	bne.n	7c46 <__sseek+0x1a>
    7c3e:	4a05      	ldr	r2, [pc, #20]	; (7c54 <__sseek+0x28>)
    7c40:	4013      	ands	r3, r2
    7c42:	81a3      	strh	r3, [r4, #12]
    7c44:	e004      	b.n	7c50 <__sseek+0x24>
    7c46:	2280      	movs	r2, #128	; 0x80
    7c48:	0152      	lsls	r2, r2, #5
    7c4a:	4313      	orrs	r3, r2
    7c4c:	81a3      	strh	r3, [r4, #12]
    7c4e:	6560      	str	r0, [r4, #84]	; 0x54
    7c50:	bd38      	pop	{r3, r4, r5, pc}
    7c52:	46c0      	nop			; (mov r8, r8)
    7c54:	ffffefff 	.word	0xffffefff

00007c58 <__sclose>:
    7c58:	b508      	push	{r3, lr}
    7c5a:	230e      	movs	r3, #14
    7c5c:	5ec9      	ldrsh	r1, [r1, r3]
    7c5e:	f000 f81d 	bl	7c9c <_close_r>
    7c62:	bd08      	pop	{r3, pc}

00007c64 <strlen>:
    7c64:	2300      	movs	r3, #0
    7c66:	5cc2      	ldrb	r2, [r0, r3]
    7c68:	3301      	adds	r3, #1
    7c6a:	2a00      	cmp	r2, #0
    7c6c:	d1fb      	bne.n	7c66 <strlen+0x2>
    7c6e:	1e58      	subs	r0, r3, #1
    7c70:	4770      	bx	lr
	...

00007c74 <_write_r>:
    7c74:	b538      	push	{r3, r4, r5, lr}
    7c76:	4c08      	ldr	r4, [pc, #32]	; (7c98 <_write_r+0x24>)
    7c78:	1c05      	adds	r5, r0, #0
    7c7a:	2000      	movs	r0, #0
    7c7c:	6020      	str	r0, [r4, #0]
    7c7e:	1c08      	adds	r0, r1, #0
    7c80:	1c11      	adds	r1, r2, #0
    7c82:	1c1a      	adds	r2, r3, #0
    7c84:	f7fa fc2e 	bl	24e4 <_write>
    7c88:	1c43      	adds	r3, r0, #1
    7c8a:	d103      	bne.n	7c94 <_write_r+0x20>
    7c8c:	6823      	ldr	r3, [r4, #0]
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d000      	beq.n	7c94 <_write_r+0x20>
    7c92:	602b      	str	r3, [r5, #0]
    7c94:	bd38      	pop	{r3, r4, r5, pc}
    7c96:	46c0      	nop			; (mov r8, r8)
    7c98:	20000a00 	.word	0x20000a00

00007c9c <_close_r>:
    7c9c:	b538      	push	{r3, r4, r5, lr}
    7c9e:	4c07      	ldr	r4, [pc, #28]	; (7cbc <_close_r+0x20>)
    7ca0:	2300      	movs	r3, #0
    7ca2:	1c05      	adds	r5, r0, #0
    7ca4:	1c08      	adds	r0, r1, #0
    7ca6:	6023      	str	r3, [r4, #0]
    7ca8:	f7fa fc58 	bl	255c <_close>
    7cac:	1c43      	adds	r3, r0, #1
    7cae:	d103      	bne.n	7cb8 <_close_r+0x1c>
    7cb0:	6823      	ldr	r3, [r4, #0]
    7cb2:	2b00      	cmp	r3, #0
    7cb4:	d000      	beq.n	7cb8 <_close_r+0x1c>
    7cb6:	602b      	str	r3, [r5, #0]
    7cb8:	bd38      	pop	{r3, r4, r5, pc}
    7cba:	46c0      	nop			; (mov r8, r8)
    7cbc:	20000a00 	.word	0x20000a00

00007cc0 <_fstat_r>:
    7cc0:	b538      	push	{r3, r4, r5, lr}
    7cc2:	4c07      	ldr	r4, [pc, #28]	; (7ce0 <_fstat_r+0x20>)
    7cc4:	2300      	movs	r3, #0
    7cc6:	1c05      	adds	r5, r0, #0
    7cc8:	1c08      	adds	r0, r1, #0
    7cca:	1c11      	adds	r1, r2, #0
    7ccc:	6023      	str	r3, [r4, #0]
    7cce:	f7fa fc49 	bl	2564 <_fstat>
    7cd2:	1c43      	adds	r3, r0, #1
    7cd4:	d103      	bne.n	7cde <_fstat_r+0x1e>
    7cd6:	6823      	ldr	r3, [r4, #0]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d000      	beq.n	7cde <_fstat_r+0x1e>
    7cdc:	602b      	str	r3, [r5, #0]
    7cde:	bd38      	pop	{r3, r4, r5, pc}
    7ce0:	20000a00 	.word	0x20000a00

00007ce4 <_isatty_r>:
    7ce4:	b538      	push	{r3, r4, r5, lr}
    7ce6:	4c07      	ldr	r4, [pc, #28]	; (7d04 <_isatty_r+0x20>)
    7ce8:	2300      	movs	r3, #0
    7cea:	1c05      	adds	r5, r0, #0
    7cec:	1c08      	adds	r0, r1, #0
    7cee:	6023      	str	r3, [r4, #0]
    7cf0:	f7fa fc3e 	bl	2570 <_isatty>
    7cf4:	1c43      	adds	r3, r0, #1
    7cf6:	d103      	bne.n	7d00 <_isatty_r+0x1c>
    7cf8:	6823      	ldr	r3, [r4, #0]
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d000      	beq.n	7d00 <_isatty_r+0x1c>
    7cfe:	602b      	str	r3, [r5, #0]
    7d00:	bd38      	pop	{r3, r4, r5, pc}
    7d02:	46c0      	nop			; (mov r8, r8)
    7d04:	20000a00 	.word	0x20000a00

00007d08 <_lseek_r>:
    7d08:	b538      	push	{r3, r4, r5, lr}
    7d0a:	4c08      	ldr	r4, [pc, #32]	; (7d2c <_lseek_r+0x24>)
    7d0c:	1c05      	adds	r5, r0, #0
    7d0e:	2000      	movs	r0, #0
    7d10:	6020      	str	r0, [r4, #0]
    7d12:	1c08      	adds	r0, r1, #0
    7d14:	1c11      	adds	r1, r2, #0
    7d16:	1c1a      	adds	r2, r3, #0
    7d18:	f7fa fc2c 	bl	2574 <_lseek>
    7d1c:	1c43      	adds	r3, r0, #1
    7d1e:	d103      	bne.n	7d28 <_lseek_r+0x20>
    7d20:	6823      	ldr	r3, [r4, #0]
    7d22:	2b00      	cmp	r3, #0
    7d24:	d000      	beq.n	7d28 <_lseek_r+0x20>
    7d26:	602b      	str	r3, [r5, #0]
    7d28:	bd38      	pop	{r3, r4, r5, pc}
    7d2a:	46c0      	nop			; (mov r8, r8)
    7d2c:	20000a00 	.word	0x20000a00

00007d30 <_read_r>:
    7d30:	b538      	push	{r3, r4, r5, lr}
    7d32:	4c08      	ldr	r4, [pc, #32]	; (7d54 <_read_r+0x24>)
    7d34:	1c05      	adds	r5, r0, #0
    7d36:	2000      	movs	r0, #0
    7d38:	6020      	str	r0, [r4, #0]
    7d3a:	1c08      	adds	r0, r1, #0
    7d3c:	1c11      	adds	r1, r2, #0
    7d3e:	1c1a      	adds	r2, r3, #0
    7d40:	f7fa fbae 	bl	24a0 <_read>
    7d44:	1c43      	adds	r3, r0, #1
    7d46:	d103      	bne.n	7d50 <_read_r+0x20>
    7d48:	6823      	ldr	r3, [r4, #0]
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	d000      	beq.n	7d50 <_read_r+0x20>
    7d4e:	602b      	str	r3, [r5, #0]
    7d50:	bd38      	pop	{r3, r4, r5, pc}
    7d52:	46c0      	nop			; (mov r8, r8)
    7d54:	20000a00 	.word	0x20000a00
    7d58:	000004da 	.word	0x000004da
    7d5c:	00000720 	.word	0x00000720
    7d60:	00000720 	.word	0x00000720
    7d64:	00000720 	.word	0x00000720
    7d68:	00000720 	.word	0x00000720
    7d6c:	00000720 	.word	0x00000720
    7d70:	00000720 	.word	0x00000720
    7d74:	00000720 	.word	0x00000720
    7d78:	00000720 	.word	0x00000720
    7d7c:	00000720 	.word	0x00000720
    7d80:	00000720 	.word	0x00000720
    7d84:	00000720 	.word	0x00000720
    7d88:	00000720 	.word	0x00000720
    7d8c:	00000720 	.word	0x00000720
    7d90:	00000720 	.word	0x00000720
    7d94:	00000720 	.word	0x00000720
    7d98:	000004c2 	.word	0x000004c2
    7d9c:	00000720 	.word	0x00000720
    7da0:	00000720 	.word	0x00000720
    7da4:	00000720 	.word	0x00000720
    7da8:	00000720 	.word	0x00000720
    7dac:	00000720 	.word	0x00000720
    7db0:	00000720 	.word	0x00000720
    7db4:	00000720 	.word	0x00000720
    7db8:	00000720 	.word	0x00000720
    7dbc:	00000720 	.word	0x00000720
    7dc0:	00000720 	.word	0x00000720
    7dc4:	00000720 	.word	0x00000720
    7dc8:	00000720 	.word	0x00000720
    7dcc:	00000720 	.word	0x00000720
    7dd0:	00000720 	.word	0x00000720
    7dd4:	00000720 	.word	0x00000720
    7dd8:	000004d2 	.word	0x000004d2
    7ddc:	00000720 	.word	0x00000720
    7de0:	00000720 	.word	0x00000720
    7de4:	00000720 	.word	0x00000720
    7de8:	00000720 	.word	0x00000720
    7dec:	00000720 	.word	0x00000720
    7df0:	00000720 	.word	0x00000720
    7df4:	00000720 	.word	0x00000720
    7df8:	00000720 	.word	0x00000720
    7dfc:	00000720 	.word	0x00000720
    7e00:	00000720 	.word	0x00000720
    7e04:	00000720 	.word	0x00000720
    7e08:	00000720 	.word	0x00000720
    7e0c:	00000720 	.word	0x00000720
    7e10:	00000720 	.word	0x00000720
    7e14:	00000720 	.word	0x00000720
    7e18:	000004ca 	.word	0x000004ca
    7e1c:	000004aa 	.word	0x000004aa
    7e20:	000004e2 	.word	0x000004e2
    7e24:	000004ba 	.word	0x000004ba
    7e28:	000004b2 	.word	0x000004b2
    7e2c:	0000ffff 	.word	0x0000ffff
    7e30:	0000ffff 	.word	0x0000ffff
    7e34:	0000ffff 	.word	0x0000ffff
    7e38:	0000ffff 	.word	0x0000ffff
    7e3c:	00000004 	.word	0x00000004
    7e40:	00000005 	.word	0x00000005
    7e44:	00000006 	.word	0x00000006
    7e48:	00000007 	.word	0x00000007
    7e4c:	0000ffff 	.word	0x0000ffff
    7e50:	0000ffff 	.word	0x0000ffff
    7e54:	00000022 	.word	0x00000022
    7e58:	00000023 	.word	0x00000023
    7e5c:	0000ffff 	.word	0x0000ffff
    7e60:	0000ffff 	.word	0x0000ffff
    7e64:	0000ffff 	.word	0x0000ffff
    7e68:	0000ffff 	.word	0x0000ffff
    7e6c:	00000008 	.word	0x00000008
    7e70:	00000009 	.word	0x00000009
    7e74:	0000ffff 	.word	0x0000ffff
    7e78:	0000ffff 	.word	0x0000ffff
    7e7c:	42000800 	.word	0x42000800
    7e80:	42000c00 	.word	0x42000c00
    7e84:	42001000 	.word	0x42001000
    7e88:	42001400 	.word	0x42001400
    7e8c:	42001800 	.word	0x42001800
    7e90:	42001c00 	.word	0x42001c00
    7e94:	0c0b0a09 	.word	0x0c0b0a09
    7e98:	00000e0d 	.word	0x00000e0d
    7e9c:	000017e8 	.word	0x000017e8
    7ea0:	00001844 	.word	0x00001844
    7ea4:	00001844 	.word	0x00001844
    7ea8:	000017e2 	.word	0x000017e2
    7eac:	000017e2 	.word	0x000017e2
    7eb0:	000017fe 	.word	0x000017fe
    7eb4:	000017ee 	.word	0x000017ee
    7eb8:	00001804 	.word	0x00001804
    7ebc:	00001832 	.word	0x00001832
    7ec0:	00001a6c 	.word	0x00001a6c
    7ec4:	00001acc 	.word	0x00001acc
    7ec8:	00001acc 	.word	0x00001acc
    7ecc:	00001a4c 	.word	0x00001a4c
    7ed0:	00001a5e 	.word	0x00001a5e
    7ed4:	00001a7a 	.word	0x00001a7a
    7ed8:	00001a50 	.word	0x00001a50
    7edc:	00001a88 	.word	0x00001a88
    7ee0:	00001abc 	.word	0x00001abc
    7ee4:	42002c00 	.word	0x42002c00
    7ee8:	42003000 	.word	0x42003000
    7eec:	42003400 	.word	0x42003400
    7ef0:	001c1c1b 	.word	0x001c1c1b
    7ef4:	10000800 	.word	0x10000800
    7ef8:	00002000 	.word	0x00002000
    7efc:	00002d88 	.word	0x00002d88
    7f00:	00002efc 	.word	0x00002efc
    7f04:	00002f06 	.word	0x00002f06
    7f08:	0000309c 	.word	0x0000309c
    7f0c:	000030a4 	.word	0x000030a4
    7f10:	00003672 	.word	0x00003672
    7f14:	00003730 	.word	0x00003730
    7f18:	0000367c 	.word	0x0000367c
    7f1c:	0000369c 	.word	0x0000369c
    7f20:	00003730 	.word	0x00003730
    7f24:	000036be 	.word	0x000036be
    7f28:	00003730 	.word	0x00003730
    7f2c:	00003700 	.word	0x00003700

00007f30 <tc_interrupt_vectors.11766>:
    7f30:	00141312 20656854 706d6574 20736920     ....The temp is 
    7f40:	20206425 00202020 20656854 75736572     %d     .The resu
    7f50:	6920746c 64252073 20202020 00000020     lt is %d     ...
    7f60:	74736554 75636553 79746972 3079654b     TestSecurityKey0
    7f70:	00000000 00005934 000058d0 00005918     ....4Y...X...Y..
    7f80:	000057fe 00005918 0000590c 00005918     .W...Y...Y...Y..
    7f90:	000057fe 000058d0 000058d0 0000590c     .W...X...X...Y..
    7fa0:	000057fe 000057f4 000057f4 000057f4     .W...W...W...W..
    7fb0:	00005b58 00005f78 00006166 00006166     X[..x_..fa..fa..
    7fc0:	00005f58 00005e42 00005e42 00005f4a     X_..B^..B^..J_..
    7fd0:	00005f58 00005e42 00005f4a 00005e42     X_..B^..J_..B^..
    7fe0:	00005f58 00005e40 00005e40 00005e40     X_..@^..@^..@^..
    7ff0:	0000616e 00000043                       na..C...

00007ff8 <_global_impure_ptr>:
    7ff8:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    8008:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    8018:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    8028:	64636261 00006665                       abcdef..

00008030 <__sf_fake_stdin>:
	...

00008050 <__sf_fake_stdout>:
	...

00008070 <__sf_fake_stderr>:
	...

00008090 <_init>:
    8090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8092:	46c0      	nop			; (mov r8, r8)
    8094:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8096:	bc08      	pop	{r3}
    8098:	469e      	mov	lr, r3
    809a:	4770      	bx	lr

0000809c <__init_array_start>:
    809c:	000000dd 	.word	0x000000dd

000080a0 <_fini>:
    80a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80a2:	46c0      	nop			; (mov r8, r8)
    80a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    80a6:	bc08      	pop	{r3}
    80a8:	469e      	mov	lr, r3
    80aa:	4770      	bx	lr

000080ac <__fini_array_start>:
    80ac:	000000b5 	.word	0x000000b5
