
ADC_QUICK_START2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007dfc  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00007dfc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009ac  20000070  00007e6c  00010070  2**2
                  ALLOC
  3 .stack        00002004  20000a1c  00008818  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000008e  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00039a12  00000000  00000000  00010126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000065de  00000000  00000000  00049b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c80d  00000000  00000000  00050116  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bb8  00000000  00000000  0005c923  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001138  00000000  00000000  0005d4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f1fc  00000000  00000000  0005e613  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a890  00000000  00000000  0007d80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00086bc2  00000000  00000000  0009809f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000025f4  00000000  00000000  0011ec64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002a20 	.word	0x20002a20
       4:	00002189 	.word	0x00002189
       8:	00002185 	.word	0x00002185
       c:	00002185 	.word	0x00002185
	...
      2c:	00002185 	.word	0x00002185
	...
      38:	00002185 	.word	0x00002185
      3c:	00002185 	.word	0x00002185
      40:	00002185 	.word	0x00002185
      44:	00002185 	.word	0x00002185
      48:	00002185 	.word	0x00002185
      4c:	00002185 	.word	0x00002185
      50:	00000185 	.word	0x00000185
      54:	00002185 	.word	0x00002185
      58:	00002185 	.word	0x00002185
      5c:	00002185 	.word	0x00002185
      60:	00002185 	.word	0x00002185
      64:	00001589 	.word	0x00001589
      68:	00001599 	.word	0x00001599
      6c:	000015a9 	.word	0x000015a9
      70:	000015b9 	.word	0x000015b9
      74:	000015c9 	.word	0x000015c9
      78:	000015d9 	.word	0x000015d9
      7c:	00002185 	.word	0x00002185
      80:	00002185 	.word	0x00002185
      84:	00002185 	.word	0x00002185
      88:	00000bdd 	.word	0x00000bdd
      8c:	00000bed 	.word	0x00000bed
      90:	00000bfd 	.word	0x00000bfd
	...
      9c:	00002185 	.word	0x00002185
      a0:	00002185 	.word	0x00002185
      a4:	00000000 	.word	0x00000000
      a8:	00002185 	.word	0x00002185
      ac:	00002185 	.word	0x00002185
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00007dfc 	.word	0x00007dfc

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00007dfc 	.word	0x00007dfc
     108:	20000074 	.word	0x20000074
     10c:	00007dfc 	.word	0x00007dfc
     110:	00000000 	.word	0x00000000

00000114 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     114:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     116:	2a00      	cmp	r2, #0
     118:	d10f      	bne.n	13a <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     11a:	008b      	lsls	r3, r1, #2
     11c:	4a08      	ldr	r2, [pc, #32]	; (140 <extint_register_callback+0x2c>)
     11e:	589a      	ldr	r2, [r3, r2]
     120:	2a00      	cmp	r2, #0
     122:	d104      	bne.n	12e <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
     124:	1c19      	adds	r1, r3, #0
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <extint_register_callback+0x2c>)
     128:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     12a:	2300      	movs	r3, #0
     12c:	e005      	b.n	13a <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
     12e:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
     130:	1a12      	subs	r2, r2, r0
     132:	1e50      	subs	r0, r2, #1
     134:	4182      	sbcs	r2, r0
     136:	4252      	negs	r2, r2
     138:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     13a:	1c18      	adds	r0, r3, #0
     13c:	4770      	bx	lr
     13e:	46c0      	nop			; (mov r8, r8)
     140:	20000868 	.word	0x20000868

00000144 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     144:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     146:	2900      	cmp	r1, #0
     148:	d107      	bne.n	15a <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     14a:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     14c:	281f      	cmp	r0, #31
     14e:	d800      	bhi.n	152 <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     150:	4b03      	ldr	r3, [pc, #12]	; (160 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
     152:	2201      	movs	r2, #1
     154:	4082      	lsls	r2, r0
     156:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     158:	2300      	movs	r3, #0
}
     15a:	1c18      	adds	r0, r3, #0
     15c:	4770      	bx	lr
     15e:	46c0      	nop			; (mov r8, r8)
     160:	40001800 	.word	0x40001800

00000164 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     164:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     166:	2900      	cmp	r1, #0
     168:	d107      	bne.n	17a <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
     16a:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     16c:	281f      	cmp	r0, #31
     16e:	d800      	bhi.n	172 <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     170:	4b03      	ldr	r3, [pc, #12]	; (180 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
     172:	2201      	movs	r2, #1
     174:	4082      	lsls	r2, r0
     176:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     178:	2300      	movs	r3, #0
}
     17a:	1c18      	adds	r0, r3, #0
     17c:	4770      	bx	lr
     17e:	46c0      	nop			; (mov r8, r8)
     180:	40001800 	.word	0x40001800

00000184 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     184:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     186:	2200      	movs	r2, #0
     188:	4b16      	ldr	r3, [pc, #88]	; (1e4 <EIC_Handler+0x60>)
     18a:	701a      	strb	r2, [r3, #0]
     18c:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     18e:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     190:	4d15      	ldr	r5, [pc, #84]	; (1e8 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     192:	4c14      	ldr	r4, [pc, #80]	; (1e4 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     194:	2b1f      	cmp	r3, #31
     196:	d910      	bls.n	1ba <EIC_Handler+0x36>
     198:	e019      	b.n	1ce <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     19a:	4914      	ldr	r1, [pc, #80]	; (1ec <EIC_Handler+0x68>)
     19c:	e000      	b.n	1a0 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
     19e:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     1a0:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     1a2:	009b      	lsls	r3, r3, #2
     1a4:	595b      	ldr	r3, [r3, r5]
     1a6:	2b00      	cmp	r3, #0
     1a8:	d000      	beq.n	1ac <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     1aa:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     1ac:	7823      	ldrb	r3, [r4, #0]
     1ae:	3301      	adds	r3, #1
     1b0:	b2db      	uxtb	r3, r3
     1b2:	7023      	strb	r3, [r4, #0]
     1b4:	2b0f      	cmp	r3, #15
     1b6:	d814      	bhi.n	1e2 <EIC_Handler+0x5e>
     1b8:	e7ec      	b.n	194 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1ba:	1c32      	adds	r2, r6, #0
     1bc:	401a      	ands	r2, r3
     1be:	2101      	movs	r1, #1
     1c0:	4091      	lsls	r1, r2
     1c2:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     1c4:	4909      	ldr	r1, [pc, #36]	; (1ec <EIC_Handler+0x68>)
     1c6:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     1c8:	4211      	tst	r1, r2
     1ca:	d1e6      	bne.n	19a <EIC_Handler+0x16>
     1cc:	e7ee      	b.n	1ac <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     1ce:	1c32      	adds	r2, r6, #0
     1d0:	401a      	ands	r2, r3
     1d2:	2101      	movs	r1, #1
     1d4:	4091      	lsls	r1, r2
     1d6:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
     1d8:	2100      	movs	r1, #0
     1da:	6909      	ldr	r1, [r1, #16]
     1dc:	4211      	tst	r1, r2
     1de:	d1de      	bne.n	19e <EIC_Handler+0x1a>
     1e0:	e7e4      	b.n	1ac <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     1e2:	bd70      	pop	{r4, r5, r6, pc}
     1e4:	20000864 	.word	0x20000864
     1e8:	20000868 	.word	0x20000868
     1ec:	40001800 	.word	0x40001800

000001f0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     1f0:	4b05      	ldr	r3, [pc, #20]	; (208 <_extint_enable+0x18>)
     1f2:	7819      	ldrb	r1, [r3, #0]
     1f4:	2202      	movs	r2, #2
     1f6:	430a      	orrs	r2, r1
     1f8:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1fa:	1c1a      	adds	r2, r3, #0
     1fc:	7853      	ldrb	r3, [r2, #1]
     1fe:	b25b      	sxtb	r3, r3
     200:	2b00      	cmp	r3, #0
     202:	dbfb      	blt.n	1fc <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	40001800 	.word	0x40001800

0000020c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     20c:	b500      	push	{lr}
     20e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     210:	4b12      	ldr	r3, [pc, #72]	; (25c <_system_extint_init+0x50>)
     212:	6999      	ldr	r1, [r3, #24]
     214:	2240      	movs	r2, #64	; 0x40
     216:	430a      	orrs	r2, r1
     218:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     21a:	a901      	add	r1, sp, #4
     21c:	2300      	movs	r3, #0
     21e:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     220:	2005      	movs	r0, #5
     222:	4b0f      	ldr	r3, [pc, #60]	; (260 <_system_extint_init+0x54>)
     224:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     226:	2005      	movs	r0, #5
     228:	4b0e      	ldr	r3, [pc, #56]	; (264 <_system_extint_init+0x58>)
     22a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     22c:	4b0e      	ldr	r3, [pc, #56]	; (268 <_system_extint_init+0x5c>)
     22e:	7819      	ldrb	r1, [r3, #0]
     230:	2201      	movs	r2, #1
     232:	430a      	orrs	r2, r1
     234:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     236:	1c1a      	adds	r2, r3, #0
     238:	7853      	ldrb	r3, [r2, #1]
     23a:	b25b      	sxtb	r3, r3
     23c:	2b00      	cmp	r3, #0
     23e:	dbfb      	blt.n	238 <_system_extint_init+0x2c>
     240:	4b0a      	ldr	r3, [pc, #40]	; (26c <_system_extint_init+0x60>)
     242:	1c19      	adds	r1, r3, #0
     244:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
     246:	2200      	movs	r2, #0
     248:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     24a:	428b      	cmp	r3, r1
     24c:	d1fc      	bne.n	248 <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     24e:	2210      	movs	r2, #16
     250:	4b07      	ldr	r3, [pc, #28]	; (270 <_system_extint_init+0x64>)
     252:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
     254:	4b07      	ldr	r3, [pc, #28]	; (274 <_system_extint_init+0x68>)
     256:	4798      	blx	r3
}
     258:	b003      	add	sp, #12
     25a:	bd00      	pop	{pc}
     25c:	40000400 	.word	0x40000400
     260:	00002055 	.word	0x00002055
     264:	00001fc9 	.word	0x00001fc9
     268:	40001800 	.word	0x40001800
     26c:	20000868 	.word	0x20000868
     270:	e000e100 	.word	0xe000e100
     274:	000001f1 	.word	0x000001f1

00000278 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     278:	2300      	movs	r3, #0
     27a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     27c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     27e:	2201      	movs	r2, #1
     280:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     282:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     284:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     286:	2302      	movs	r3, #2
     288:	72c3      	strb	r3, [r0, #11]
}
     28a:	4770      	bx	lr

0000028c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     28c:	b5f0      	push	{r4, r5, r6, r7, lr}
     28e:	b083      	sub	sp, #12
     290:	1c05      	adds	r5, r0, #0
     292:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     294:	a901      	add	r1, sp, #4
     296:	2300      	movs	r3, #0
     298:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     29a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     29c:	6863      	ldr	r3, [r4, #4]
     29e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     2a0:	7a23      	ldrb	r3, [r4, #8]
     2a2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     2a4:	7820      	ldrb	r0, [r4, #0]
     2a6:	4b15      	ldr	r3, [pc, #84]	; (2fc <extint_chan_set_config+0x70>)
     2a8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     2aa:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     2ac:	2d1f      	cmp	r5, #31
     2ae:	d800      	bhi.n	2b2 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     2b0:	4b13      	ldr	r3, [pc, #76]	; (300 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     2b2:	2107      	movs	r1, #7
     2b4:	4029      	ands	r1, r5
     2b6:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     2b8:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     2ba:	7aa2      	ldrb	r2, [r4, #10]
     2bc:	2a00      	cmp	r2, #0
     2be:	d001      	beq.n	2c4 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
     2c0:	2208      	movs	r2, #8
     2c2:	4310      	orrs	r0, r2
     2c4:	08ea      	lsrs	r2, r5, #3
     2c6:	0092      	lsls	r2, r2, #2
     2c8:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     2ca:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
     2cc:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     2ce:	270f      	movs	r7, #15
     2d0:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     2d2:	43be      	bics	r6, r7
     2d4:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     2d6:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     2d8:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     2da:	7a62      	ldrb	r2, [r4, #9]
     2dc:	2a00      	cmp	r2, #0
     2de:	d006      	beq.n	2ee <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     2e0:	695a      	ldr	r2, [r3, #20]
     2e2:	2101      	movs	r1, #1
     2e4:	40a9      	lsls	r1, r5
     2e6:	1c0d      	adds	r5, r1, #0
     2e8:	4315      	orrs	r5, r2
     2ea:	615d      	str	r5, [r3, #20]
     2ec:	e004      	b.n	2f8 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     2ee:	695a      	ldr	r2, [r3, #20]
     2f0:	2101      	movs	r1, #1
     2f2:	40a9      	lsls	r1, r5
     2f4:	438a      	bics	r2, r1
     2f6:	615a      	str	r2, [r3, #20]
	}
}
     2f8:	b003      	add	sp, #12
     2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2fc:	00002131 	.word	0x00002131
     300:	40001800 	.word	0x40001800

00000304 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     304:	b510      	push	{r4, lr}
     306:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     308:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     30a:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     30c:	4299      	cmp	r1, r3
     30e:	d30c      	bcc.n	32a <_sercom_get_sync_baud_val+0x26>
     310:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     312:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     314:	1c60      	adds	r0, r4, #1
     316:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     318:	428b      	cmp	r3, r1
     31a:	d801      	bhi.n	320 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     31c:	1c04      	adds	r4, r0, #0
     31e:	e7f8      	b.n	312 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     320:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     322:	2cff      	cmp	r4, #255	; 0xff
     324:	d801      	bhi.n	32a <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     326:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     328:	2000      	movs	r0, #0
	}
}
     32a:	bd10      	pop	{r4, pc}
     32c:	0000      	movs	r0, r0
	...

00000330 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	465f      	mov	r7, fp
     334:	4656      	mov	r6, sl
     336:	464d      	mov	r5, r9
     338:	4644      	mov	r4, r8
     33a:	b4f0      	push	{r4, r5, r6, r7}
     33c:	b087      	sub	sp, #28
     33e:	1c06      	adds	r6, r0, #0
     340:	1c0d      	adds	r5, r1, #0
     342:	9204      	str	r2, [sp, #16]
     344:	aa10      	add	r2, sp, #64	; 0x40
     346:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     348:	1c32      	adds	r2, r6, #0
     34a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     34c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     34e:	428a      	cmp	r2, r1
     350:	d900      	bls.n	354 <_sercom_get_async_baud_val+0x24>
     352:	e0b3      	b.n	4bc <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     354:	2b00      	cmp	r3, #0
     356:	d14b      	bne.n	3f0 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     358:	2100      	movs	r1, #0
     35a:	1c32      	adds	r2, r6, #0
     35c:	4c5e      	ldr	r4, [pc, #376]	; (4d8 <_sercom_get_async_baud_val+0x1a8>)
     35e:	47a0      	blx	r4
     360:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     362:	1c2e      	adds	r6, r5, #0
     364:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     366:	2000      	movs	r0, #0
     368:	2100      	movs	r1, #0
     36a:	2200      	movs	r2, #0
     36c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     36e:	243f      	movs	r4, #63	; 0x3f
     370:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     372:	2501      	movs	r5, #1
     374:	46a8      	mov	r8, r5
     376:	9002      	str	r0, [sp, #8]
     378:	9103      	str	r1, [sp, #12]
     37a:	4661      	mov	r1, ip
     37c:	3920      	subs	r1, #32
     37e:	d403      	bmi.n	388 <_sercom_get_async_baud_val+0x58>
     380:	4640      	mov	r0, r8
     382:	4088      	lsls	r0, r1
     384:	4681      	mov	r9, r0
     386:	e005      	b.n	394 <_sercom_get_async_baud_val+0x64>
     388:	2120      	movs	r1, #32
     38a:	4665      	mov	r5, ip
     38c:	1b4c      	subs	r4, r1, r5
     38e:	4640      	mov	r0, r8
     390:	40e0      	lsrs	r0, r4
     392:	4681      	mov	r9, r0
     394:	4641      	mov	r1, r8
     396:	4664      	mov	r4, ip
     398:	40a1      	lsls	r1, r4
     39a:	468a      	mov	sl, r1

		r = r << 1;
     39c:	1c10      	adds	r0, r2, #0
     39e:	1c19      	adds	r1, r3, #0
     3a0:	1880      	adds	r0, r0, r2
     3a2:	4159      	adcs	r1, r3
     3a4:	1c02      	adds	r2, r0, #0
     3a6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     3a8:	465d      	mov	r5, fp
     3aa:	464c      	mov	r4, r9
     3ac:	4225      	tst	r5, r4
     3ae:	d002      	beq.n	3b6 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     3b0:	4642      	mov	r2, r8
     3b2:	4302      	orrs	r2, r0
     3b4:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     3b6:	429f      	cmp	r7, r3
     3b8:	d80c      	bhi.n	3d4 <_sercom_get_async_baud_val+0xa4>
     3ba:	d101      	bne.n	3c0 <_sercom_get_async_baud_val+0x90>
     3bc:	4296      	cmp	r6, r2
     3be:	d809      	bhi.n	3d4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     3c0:	1b92      	subs	r2, r2, r6
     3c2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     3c4:	4650      	mov	r0, sl
     3c6:	9d02      	ldr	r5, [sp, #8]
     3c8:	4328      	orrs	r0, r5
     3ca:	4649      	mov	r1, r9
     3cc:	9c03      	ldr	r4, [sp, #12]
     3ce:	4321      	orrs	r1, r4
     3d0:	9002      	str	r0, [sp, #8]
     3d2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     3d4:	4665      	mov	r5, ip
     3d6:	3d01      	subs	r5, #1
     3d8:	46ac      	mov	ip, r5
     3da:	d2ce      	bcs.n	37a <_sercom_get_async_baud_val+0x4a>
     3dc:	9802      	ldr	r0, [sp, #8]
     3de:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3e0:	4b3c      	ldr	r3, [pc, #240]	; (4d4 <_sercom_get_async_baud_val+0x1a4>)
     3e2:	4a3b      	ldr	r2, [pc, #236]	; (4d0 <_sercom_get_async_baud_val+0x1a0>)
     3e4:	1a12      	subs	r2, r2, r0
     3e6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3e8:	0c12      	lsrs	r2, r2, #16
     3ea:	041b      	lsls	r3, r3, #16
     3ec:	431a      	orrs	r2, r3
     3ee:	e062      	b.n	4b6 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     3f0:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3f2:	2b01      	cmp	r3, #1
     3f4:	d15f      	bne.n	4b6 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     3f6:	0f4f      	lsrs	r7, r1, #29
     3f8:	46b9      	mov	r9, r7
     3fa:	00cd      	lsls	r5, r1, #3
     3fc:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     3fe:	2100      	movs	r1, #0
     400:	1c32      	adds	r2, r6, #0
     402:	2300      	movs	r3, #0
     404:	4c34      	ldr	r4, [pc, #208]	; (4d8 <_sercom_get_async_baud_val+0x1a8>)
     406:	47a0      	blx	r4
     408:	1c06      	adds	r6, r0, #0
     40a:	1c0f      	adds	r7, r1, #0
     40c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     40e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     410:	9602      	str	r6, [sp, #8]
     412:	9703      	str	r7, [sp, #12]
     414:	469a      	mov	sl, r3
     416:	4650      	mov	r0, sl
     418:	b2c0      	uxtb	r0, r0
     41a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     41c:	2100      	movs	r1, #0
     41e:	4688      	mov	r8, r1
     420:	2200      	movs	r2, #0
     422:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     424:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     426:	1c27      	adds	r7, r4, #0
     428:	3f20      	subs	r7, #32
     42a:	d403      	bmi.n	434 <_sercom_get_async_baud_val+0x104>
     42c:	1c2e      	adds	r6, r5, #0
     42e:	40be      	lsls	r6, r7
     430:	9601      	str	r6, [sp, #4]
     432:	e004      	b.n	43e <_sercom_get_async_baud_val+0x10e>
     434:	2020      	movs	r0, #32
     436:	1b07      	subs	r7, r0, r4
     438:	1c29      	adds	r1, r5, #0
     43a:	40f9      	lsrs	r1, r7
     43c:	9101      	str	r1, [sp, #4]
     43e:	1c2e      	adds	r6, r5, #0
     440:	40a6      	lsls	r6, r4
     442:	9600      	str	r6, [sp, #0]

		r = r << 1;
     444:	1c10      	adds	r0, r2, #0
     446:	1c19      	adds	r1, r3, #0
     448:	1880      	adds	r0, r0, r2
     44a:	4159      	adcs	r1, r3
     44c:	1c02      	adds	r2, r0, #0
     44e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     450:	465f      	mov	r7, fp
     452:	4037      	ands	r7, r6
     454:	46bc      	mov	ip, r7
     456:	9e01      	ldr	r6, [sp, #4]
     458:	464f      	mov	r7, r9
     45a:	403e      	ands	r6, r7
     45c:	4667      	mov	r7, ip
     45e:	433e      	orrs	r6, r7
     460:	d002      	beq.n	468 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     462:	1c2a      	adds	r2, r5, #0
     464:	4302      	orrs	r2, r0
     466:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     468:	9803      	ldr	r0, [sp, #12]
     46a:	4298      	cmp	r0, r3
     46c:	d80b      	bhi.n	486 <_sercom_get_async_baud_val+0x156>
     46e:	d102      	bne.n	476 <_sercom_get_async_baud_val+0x146>
     470:	9902      	ldr	r1, [sp, #8]
     472:	4291      	cmp	r1, r2
     474:	d807      	bhi.n	486 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     476:	9e02      	ldr	r6, [sp, #8]
     478:	9f03      	ldr	r7, [sp, #12]
     47a:	1b92      	subs	r2, r2, r6
     47c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     47e:	4647      	mov	r7, r8
     480:	9800      	ldr	r0, [sp, #0]
     482:	4307      	orrs	r7, r0
     484:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     486:	3c01      	subs	r4, #1
     488:	d2cd      	bcs.n	426 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     48a:	4641      	mov	r1, r8
     48c:	4652      	mov	r2, sl
     48e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     490:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     492:	4c12      	ldr	r4, [pc, #72]	; (4dc <_sercom_get_async_baud_val+0x1ac>)
     494:	42a3      	cmp	r3, r4
     496:	d908      	bls.n	4aa <_sercom_get_async_baud_val+0x17a>
     498:	9a05      	ldr	r2, [sp, #20]
     49a:	3201      	adds	r2, #1
     49c:	b2d2      	uxtb	r2, r2
     49e:	9205      	str	r2, [sp, #20]
     4a0:	2601      	movs	r6, #1
     4a2:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     4a4:	4657      	mov	r7, sl
     4a6:	2f08      	cmp	r7, #8
     4a8:	d1b5      	bne.n	416 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4aa:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     4ac:	9805      	ldr	r0, [sp, #20]
     4ae:	2808      	cmp	r0, #8
     4b0:	d004      	beq.n	4bc <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     4b2:	0342      	lsls	r2, r0, #13
     4b4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     4b6:	9c04      	ldr	r4, [sp, #16]
     4b8:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     4ba:	2400      	movs	r4, #0
}
     4bc:	1c20      	adds	r0, r4, #0
     4be:	b007      	add	sp, #28
     4c0:	bc3c      	pop	{r2, r3, r4, r5}
     4c2:	4690      	mov	r8, r2
     4c4:	4699      	mov	r9, r3
     4c6:	46a2      	mov	sl, r4
     4c8:	46ab      	mov	fp, r5
     4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4cc:	46c0      	nop			; (mov r8, r8)
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00000000 	.word	0x00000000
     4d4:	00000001 	.word	0x00000001
     4d8:	00004d25 	.word	0x00004d25
     4dc:	00001fff 	.word	0x00001fff

000004e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4e0:	b510      	push	{r4, lr}
     4e2:	b082      	sub	sp, #8
     4e4:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     4e6:	4b0f      	ldr	r3, [pc, #60]	; (524 <sercom_set_gclk_generator+0x44>)
     4e8:	781b      	ldrb	r3, [r3, #0]
     4ea:	2b00      	cmp	r3, #0
     4ec:	d001      	beq.n	4f2 <sercom_set_gclk_generator+0x12>
     4ee:	2900      	cmp	r1, #0
     4f0:	d00d      	beq.n	50e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     4f2:	a901      	add	r1, sp, #4
     4f4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4f6:	2013      	movs	r0, #19
     4f8:	4b0b      	ldr	r3, [pc, #44]	; (528 <sercom_set_gclk_generator+0x48>)
     4fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4fc:	2013      	movs	r0, #19
     4fe:	4b0b      	ldr	r3, [pc, #44]	; (52c <sercom_set_gclk_generator+0x4c>)
     500:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     502:	4b08      	ldr	r3, [pc, #32]	; (524 <sercom_set_gclk_generator+0x44>)
     504:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     506:	2201      	movs	r2, #1
     508:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     50a:	2000      	movs	r0, #0
     50c:	e007      	b.n	51e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     50e:	4b05      	ldr	r3, [pc, #20]	; (524 <sercom_set_gclk_generator+0x44>)
     510:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     512:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     514:	1b14      	subs	r4, r2, r4
     516:	1e62      	subs	r2, r4, #1
     518:	4194      	sbcs	r4, r2
     51a:	4264      	negs	r4, r4
     51c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     51e:	b002      	add	sp, #8
     520:	bd10      	pop	{r4, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	2000008c 	.word	0x2000008c
     528:	00002055 	.word	0x00002055
     52c:	00001fc9 	.word	0x00001fc9

00000530 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     530:	4b44      	ldr	r3, [pc, #272]	; (644 <_sercom_get_default_pad+0x114>)
     532:	4298      	cmp	r0, r3
     534:	d033      	beq.n	59e <_sercom_get_default_pad+0x6e>
     536:	d806      	bhi.n	546 <_sercom_get_default_pad+0x16>
     538:	4b43      	ldr	r3, [pc, #268]	; (648 <_sercom_get_default_pad+0x118>)
     53a:	4298      	cmp	r0, r3
     53c:	d00d      	beq.n	55a <_sercom_get_default_pad+0x2a>
     53e:	4b43      	ldr	r3, [pc, #268]	; (64c <_sercom_get_default_pad+0x11c>)
     540:	4298      	cmp	r0, r3
     542:	d01b      	beq.n	57c <_sercom_get_default_pad+0x4c>
     544:	e06f      	b.n	626 <_sercom_get_default_pad+0xf6>
     546:	4b42      	ldr	r3, [pc, #264]	; (650 <_sercom_get_default_pad+0x120>)
     548:	4298      	cmp	r0, r3
     54a:	d04a      	beq.n	5e2 <_sercom_get_default_pad+0xb2>
     54c:	4b41      	ldr	r3, [pc, #260]	; (654 <_sercom_get_default_pad+0x124>)
     54e:	4298      	cmp	r0, r3
     550:	d058      	beq.n	604 <_sercom_get_default_pad+0xd4>
     552:	4b41      	ldr	r3, [pc, #260]	; (658 <_sercom_get_default_pad+0x128>)
     554:	4298      	cmp	r0, r3
     556:	d166      	bne.n	626 <_sercom_get_default_pad+0xf6>
     558:	e032      	b.n	5c0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     55a:	2901      	cmp	r1, #1
     55c:	d065      	beq.n	62a <_sercom_get_default_pad+0xfa>
     55e:	2900      	cmp	r1, #0
     560:	d004      	beq.n	56c <_sercom_get_default_pad+0x3c>
     562:	2902      	cmp	r1, #2
     564:	d006      	beq.n	574 <_sercom_get_default_pad+0x44>
     566:	2903      	cmp	r1, #3
     568:	d006      	beq.n	578 <_sercom_get_default_pad+0x48>
     56a:	e001      	b.n	570 <_sercom_get_default_pad+0x40>
     56c:	483b      	ldr	r0, [pc, #236]	; (65c <_sercom_get_default_pad+0x12c>)
     56e:	e067      	b.n	640 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     570:	2000      	movs	r0, #0
     572:	e065      	b.n	640 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     574:	483a      	ldr	r0, [pc, #232]	; (660 <_sercom_get_default_pad+0x130>)
     576:	e063      	b.n	640 <_sercom_get_default_pad+0x110>
     578:	483a      	ldr	r0, [pc, #232]	; (664 <_sercom_get_default_pad+0x134>)
     57a:	e061      	b.n	640 <_sercom_get_default_pad+0x110>
     57c:	2901      	cmp	r1, #1
     57e:	d056      	beq.n	62e <_sercom_get_default_pad+0xfe>
     580:	2900      	cmp	r1, #0
     582:	d004      	beq.n	58e <_sercom_get_default_pad+0x5e>
     584:	2902      	cmp	r1, #2
     586:	d006      	beq.n	596 <_sercom_get_default_pad+0x66>
     588:	2903      	cmp	r1, #3
     58a:	d006      	beq.n	59a <_sercom_get_default_pad+0x6a>
     58c:	e001      	b.n	592 <_sercom_get_default_pad+0x62>
     58e:	2003      	movs	r0, #3
     590:	e056      	b.n	640 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     592:	2000      	movs	r0, #0
     594:	e054      	b.n	640 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     596:	4834      	ldr	r0, [pc, #208]	; (668 <_sercom_get_default_pad+0x138>)
     598:	e052      	b.n	640 <_sercom_get_default_pad+0x110>
     59a:	4834      	ldr	r0, [pc, #208]	; (66c <_sercom_get_default_pad+0x13c>)
     59c:	e050      	b.n	640 <_sercom_get_default_pad+0x110>
     59e:	2901      	cmp	r1, #1
     5a0:	d047      	beq.n	632 <_sercom_get_default_pad+0x102>
     5a2:	2900      	cmp	r1, #0
     5a4:	d004      	beq.n	5b0 <_sercom_get_default_pad+0x80>
     5a6:	2902      	cmp	r1, #2
     5a8:	d006      	beq.n	5b8 <_sercom_get_default_pad+0x88>
     5aa:	2903      	cmp	r1, #3
     5ac:	d006      	beq.n	5bc <_sercom_get_default_pad+0x8c>
     5ae:	e001      	b.n	5b4 <_sercom_get_default_pad+0x84>
     5b0:	482f      	ldr	r0, [pc, #188]	; (670 <_sercom_get_default_pad+0x140>)
     5b2:	e045      	b.n	640 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5b4:	2000      	movs	r0, #0
     5b6:	e043      	b.n	640 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5b8:	482e      	ldr	r0, [pc, #184]	; (674 <_sercom_get_default_pad+0x144>)
     5ba:	e041      	b.n	640 <_sercom_get_default_pad+0x110>
     5bc:	482e      	ldr	r0, [pc, #184]	; (678 <_sercom_get_default_pad+0x148>)
     5be:	e03f      	b.n	640 <_sercom_get_default_pad+0x110>
     5c0:	2901      	cmp	r1, #1
     5c2:	d038      	beq.n	636 <_sercom_get_default_pad+0x106>
     5c4:	2900      	cmp	r1, #0
     5c6:	d004      	beq.n	5d2 <_sercom_get_default_pad+0xa2>
     5c8:	2902      	cmp	r1, #2
     5ca:	d006      	beq.n	5da <_sercom_get_default_pad+0xaa>
     5cc:	2903      	cmp	r1, #3
     5ce:	d006      	beq.n	5de <_sercom_get_default_pad+0xae>
     5d0:	e001      	b.n	5d6 <_sercom_get_default_pad+0xa6>
     5d2:	482a      	ldr	r0, [pc, #168]	; (67c <_sercom_get_default_pad+0x14c>)
     5d4:	e034      	b.n	640 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5d6:	2000      	movs	r0, #0
     5d8:	e032      	b.n	640 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5da:	4829      	ldr	r0, [pc, #164]	; (680 <_sercom_get_default_pad+0x150>)
     5dc:	e030      	b.n	640 <_sercom_get_default_pad+0x110>
     5de:	4829      	ldr	r0, [pc, #164]	; (684 <_sercom_get_default_pad+0x154>)
     5e0:	e02e      	b.n	640 <_sercom_get_default_pad+0x110>
     5e2:	2901      	cmp	r1, #1
     5e4:	d029      	beq.n	63a <_sercom_get_default_pad+0x10a>
     5e6:	2900      	cmp	r1, #0
     5e8:	d004      	beq.n	5f4 <_sercom_get_default_pad+0xc4>
     5ea:	2902      	cmp	r1, #2
     5ec:	d006      	beq.n	5fc <_sercom_get_default_pad+0xcc>
     5ee:	2903      	cmp	r1, #3
     5f0:	d006      	beq.n	600 <_sercom_get_default_pad+0xd0>
     5f2:	e001      	b.n	5f8 <_sercom_get_default_pad+0xc8>
     5f4:	4824      	ldr	r0, [pc, #144]	; (688 <_sercom_get_default_pad+0x158>)
     5f6:	e023      	b.n	640 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     5f8:	2000      	movs	r0, #0
     5fa:	e021      	b.n	640 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5fc:	4823      	ldr	r0, [pc, #140]	; (68c <_sercom_get_default_pad+0x15c>)
     5fe:	e01f      	b.n	640 <_sercom_get_default_pad+0x110>
     600:	4823      	ldr	r0, [pc, #140]	; (690 <_sercom_get_default_pad+0x160>)
     602:	e01d      	b.n	640 <_sercom_get_default_pad+0x110>
     604:	2901      	cmp	r1, #1
     606:	d01a      	beq.n	63e <_sercom_get_default_pad+0x10e>
     608:	2900      	cmp	r1, #0
     60a:	d004      	beq.n	616 <_sercom_get_default_pad+0xe6>
     60c:	2902      	cmp	r1, #2
     60e:	d006      	beq.n	61e <_sercom_get_default_pad+0xee>
     610:	2903      	cmp	r1, #3
     612:	d006      	beq.n	622 <_sercom_get_default_pad+0xf2>
     614:	e001      	b.n	61a <_sercom_get_default_pad+0xea>
     616:	481f      	ldr	r0, [pc, #124]	; (694 <_sercom_get_default_pad+0x164>)
     618:	e012      	b.n	640 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     61a:	2000      	movs	r0, #0
     61c:	e010      	b.n	640 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     61e:	481e      	ldr	r0, [pc, #120]	; (698 <_sercom_get_default_pad+0x168>)
     620:	e00e      	b.n	640 <_sercom_get_default_pad+0x110>
     622:	481e      	ldr	r0, [pc, #120]	; (69c <_sercom_get_default_pad+0x16c>)
     624:	e00c      	b.n	640 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     626:	2000      	movs	r0, #0
     628:	e00a      	b.n	640 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     62a:	481d      	ldr	r0, [pc, #116]	; (6a0 <_sercom_get_default_pad+0x170>)
     62c:	e008      	b.n	640 <_sercom_get_default_pad+0x110>
     62e:	481d      	ldr	r0, [pc, #116]	; (6a4 <_sercom_get_default_pad+0x174>)
     630:	e006      	b.n	640 <_sercom_get_default_pad+0x110>
     632:	481d      	ldr	r0, [pc, #116]	; (6a8 <_sercom_get_default_pad+0x178>)
     634:	e004      	b.n	640 <_sercom_get_default_pad+0x110>
     636:	481d      	ldr	r0, [pc, #116]	; (6ac <_sercom_get_default_pad+0x17c>)
     638:	e002      	b.n	640 <_sercom_get_default_pad+0x110>
     63a:	481d      	ldr	r0, [pc, #116]	; (6b0 <_sercom_get_default_pad+0x180>)
     63c:	e000      	b.n	640 <_sercom_get_default_pad+0x110>
     63e:	481d      	ldr	r0, [pc, #116]	; (6b4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     640:	4770      	bx	lr
     642:	46c0      	nop			; (mov r8, r8)
     644:	42001000 	.word	0x42001000
     648:	42000800 	.word	0x42000800
     64c:	42000c00 	.word	0x42000c00
     650:	42001800 	.word	0x42001800
     654:	42001c00 	.word	0x42001c00
     658:	42001400 	.word	0x42001400
     65c:	00040003 	.word	0x00040003
     660:	00060003 	.word	0x00060003
     664:	00070003 	.word	0x00070003
     668:	001e0003 	.word	0x001e0003
     66c:	001f0003 	.word	0x001f0003
     670:	000c0002 	.word	0x000c0002
     674:	000e0002 	.word	0x000e0002
     678:	000f0002 	.word	0x000f0002
     67c:	00100003 	.word	0x00100003
     680:	00120003 	.word	0x00120003
     684:	00130003 	.word	0x00130003
     688:	00530005 	.word	0x00530005
     68c:	003e0005 	.word	0x003e0005
     690:	00520005 	.word	0x00520005
     694:	00160003 	.word	0x00160003
     698:	00180003 	.word	0x00180003
     69c:	00190003 	.word	0x00190003
     6a0:	00050003 	.word	0x00050003
     6a4:	00010003 	.word	0x00010003
     6a8:	000d0002 	.word	0x000d0002
     6ac:	00110003 	.word	0x00110003
     6b0:	003f0005 	.word	0x003f0005
     6b4:	00170003 	.word	0x00170003

000006b8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6bc:	4a0c      	ldr	r2, [pc, #48]	; (6f0 <_sercom_get_sercom_inst_index+0x38>)
     6be:	466b      	mov	r3, sp
     6c0:	ca70      	ldmia	r2!, {r4, r5, r6}
     6c2:	c370      	stmia	r3!, {r4, r5, r6}
     6c4:	ca32      	ldmia	r2!, {r1, r4, r5}
     6c6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6c8:	9e00      	ldr	r6, [sp, #0]
     6ca:	4286      	cmp	r6, r0
     6cc:	d006      	beq.n	6dc <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6ce:	2301      	movs	r3, #1
     6d0:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6d2:	4669      	mov	r1, sp
     6d4:	5852      	ldr	r2, [r2, r1]
     6d6:	4282      	cmp	r2, r0
     6d8:	d103      	bne.n	6e2 <_sercom_get_sercom_inst_index+0x2a>
     6da:	e000      	b.n	6de <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6dc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     6de:	b2d8      	uxtb	r0, r3
     6e0:	e003      	b.n	6ea <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6e2:	3301      	adds	r3, #1
     6e4:	2b06      	cmp	r3, #6
     6e6:	d1f3      	bne.n	6d0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     6e8:	2000      	movs	r0, #0
}
     6ea:	b006      	add	sp, #24
     6ec:	bd70      	pop	{r4, r5, r6, pc}
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	00007a98 	.word	0x00007a98

000006f4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f6:	4647      	mov	r7, r8
     6f8:	b480      	push	{r7}
     6fa:	b088      	sub	sp, #32
     6fc:	1c05      	adds	r5, r0, #0
     6fe:	1c0c      	adds	r4, r1, #0
     700:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     702:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     704:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     706:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     708:	079a      	lsls	r2, r3, #30
     70a:	d500      	bpl.n	70e <spi_init+0x1a>
     70c:	e0c1      	b.n	892 <spi_init+0x19e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     70e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     710:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     712:	07da      	lsls	r2, r3, #31
     714:	d500      	bpl.n	718 <spi_init+0x24>
     716:	e0bc      	b.n	892 <spi_init+0x19e>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     718:	1c08      	adds	r0, r1, #0
     71a:	4b60      	ldr	r3, [pc, #384]	; (89c <spi_init+0x1a8>)
     71c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     71e:	4b60      	ldr	r3, [pc, #384]	; (8a0 <spi_init+0x1ac>)
     720:	6a19      	ldr	r1, [r3, #32]
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     722:	1c82      	adds	r2, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     724:	2701      	movs	r7, #1
     726:	4097      	lsls	r7, r2
     728:	1c3a      	adds	r2, r7, #0
     72a:	430a      	orrs	r2, r1
     72c:	621a      	str	r2, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     72e:	a907      	add	r1, sp, #28
     730:	2724      	movs	r7, #36	; 0x24
     732:	5df3      	ldrb	r3, [r6, r7]
     734:	700b      	strb	r3, [r1, #0]
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     736:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     738:	b2c0      	uxtb	r0, r0
     73a:	4680      	mov	r8, r0
     73c:	4b59      	ldr	r3, [pc, #356]	; (8a4 <spi_init+0x1b0>)
     73e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     740:	4640      	mov	r0, r8
     742:	4b59      	ldr	r3, [pc, #356]	; (8a8 <spi_init+0x1b4>)
     744:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     746:	5df0      	ldrb	r0, [r6, r7]
     748:	2100      	movs	r1, #0
     74a:	4b58      	ldr	r3, [pc, #352]	; (8ac <spi_init+0x1b8>)
     74c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     74e:	7833      	ldrb	r3, [r6, #0]
     750:	2b01      	cmp	r3, #1
     752:	d000      	beq.n	756 <spi_init+0x62>
     754:	e09a      	b.n	88c <spi_init+0x198>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     756:	6822      	ldr	r2, [r4, #0]
     758:	230c      	movs	r3, #12
     75a:	4313      	orrs	r3, r2
     75c:	6023      	str	r3, [r4, #0]
     75e:	e095      	b.n	88c <spi_init+0x198>
     760:	18ea      	adds	r2, r5, r3
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     762:	60d1      	str	r1, [r2, #12]
     764:	3304      	adds	r3, #4
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     766:	2b1c      	cmp	r3, #28
     768:	d1fa      	bne.n	760 <spi_init+0x6c>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
     76a:	2300      	movs	r3, #0
     76c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     76e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     770:	2400      	movs	r4, #0
     772:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     774:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     776:	2336      	movs	r3, #54	; 0x36
     778:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     77a:	2337      	movs	r3, #55	; 0x37
     77c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     77e:	2338      	movs	r3, #56	; 0x38
     780:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     782:	2303      	movs	r3, #3
     784:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     786:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     788:	6828      	ldr	r0, [r5, #0]
     78a:	4b44      	ldr	r3, [pc, #272]	; (89c <spi_init+0x1a8>)
     78c:	4798      	blx	r3
     78e:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     790:	4947      	ldr	r1, [pc, #284]	; (8b0 <spi_init+0x1bc>)
     792:	4b48      	ldr	r3, [pc, #288]	; (8b4 <spi_init+0x1c0>)
     794:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     796:	00bf      	lsls	r7, r7, #2
     798:	4b47      	ldr	r3, [pc, #284]	; (8b8 <spi_init+0x1c4>)
     79a:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     79c:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     79e:	ab02      	add	r3, sp, #8
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7a4:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     7a6:	2201      	movs	r2, #1
     7a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     7aa:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
     7ac:	7833      	ldrb	r3, [r6, #0]
     7ae:	2b00      	cmp	r3, #0
     7b0:	d102      	bne.n	7b8 <spi_init+0xc4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     7b2:	2200      	movs	r2, #0
     7b4:	ab02      	add	r3, sp, #8
     7b6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
     7b8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     7ba:	9303      	str	r3, [sp, #12]
     7bc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
     7be:	9004      	str	r0, [sp, #16]
     7c0:	6b32      	ldr	r2, [r6, #48]	; 0x30
     7c2:	9205      	str	r2, [sp, #20]
     7c4:	6b73      	ldr	r3, [r6, #52]	; 0x34
     7c6:	9306      	str	r3, [sp, #24]
     7c8:	2400      	movs	r4, #0
     7ca:	b2e1      	uxtb	r1, r4
     7cc:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     7ce:	aa03      	add	r2, sp, #12
     7d0:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     7d2:	2800      	cmp	r0, #0
     7d4:	d102      	bne.n	7dc <spi_init+0xe8>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7d6:	1c38      	adds	r0, r7, #0
     7d8:	4a38      	ldr	r2, [pc, #224]	; (8bc <spi_init+0x1c8>)
     7da:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     7dc:	1c43      	adds	r3, r0, #1
     7de:	d006      	beq.n	7ee <spi_init+0xfa>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7e0:	466a      	mov	r2, sp
     7e2:	7210      	strb	r0, [r2, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7e4:	0c00      	lsrs	r0, r0, #16
     7e6:	b2c0      	uxtb	r0, r0
     7e8:	a902      	add	r1, sp, #8
     7ea:	4b35      	ldr	r3, [pc, #212]	; (8c0 <spi_init+0x1cc>)
     7ec:	4798      	blx	r3
     7ee:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     7f0:	2c04      	cmp	r4, #4
     7f2:	d1ea      	bne.n	7ca <spi_init+0xd6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
     7f4:	7833      	ldrb	r3, [r6, #0]
     7f6:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     7f8:	7c33      	ldrb	r3, [r6, #16]
     7fa:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     7fc:	7cb3      	ldrb	r3, [r6, #18]
     7fe:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     800:	7d33      	ldrb	r3, [r6, #20]
     802:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     804:	2200      	movs	r2, #0
     806:	466b      	mov	r3, sp
     808:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     80a:	7833      	ldrb	r3, [r6, #0]
     80c:	2b01      	cmp	r3, #1
     80e:	d114      	bne.n	83a <spi_init+0x146>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     810:	6828      	ldr	r0, [r5, #0]
     812:	4b22      	ldr	r3, [pc, #136]	; (89c <spi_init+0x1a8>)
     814:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     816:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     818:	b2c0      	uxtb	r0, r0
     81a:	4b2a      	ldr	r3, [pc, #168]	; (8c4 <spi_init+0x1d0>)
     81c:	4798      	blx	r3
     81e:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     820:	69b0      	ldr	r0, [r6, #24]
     822:	466a      	mov	r2, sp
     824:	3206      	adds	r2, #6
     826:	4b28      	ldr	r3, [pc, #160]	; (8c8 <spi_init+0x1d4>)
     828:	4798      	blx	r3
     82a:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     82c:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     82e:	2b00      	cmp	r3, #0
     830:	d12f      	bne.n	892 <spi_init+0x19e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     832:	466b      	mov	r3, sp
     834:	3306      	adds	r3, #6
     836:	781b      	ldrb	r3, [r3, #0]
     838:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     83a:	68b2      	ldr	r2, [r6, #8]
     83c:	6870      	ldr	r0, [r6, #4]
     83e:	4302      	orrs	r2, r0

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     840:	68f3      	ldr	r3, [r6, #12]
     842:	431a      	orrs	r2, r3

	/* Set SPI character size */
	ctrlb |= config->character_size;
     844:	7c33      	ldrb	r3, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     846:	7c71      	ldrb	r1, [r6, #17]
     848:	2900      	cmp	r1, #0
     84a:	d103      	bne.n	854 <spi_init+0x160>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     84c:	491f      	ldr	r1, [pc, #124]	; (8cc <spi_init+0x1d8>)
     84e:	7889      	ldrb	r1, [r1, #2]
     850:	0788      	lsls	r0, r1, #30
     852:	d501      	bpl.n	858 <spi_init+0x164>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     854:	2180      	movs	r1, #128	; 0x80
     856:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
     858:	7cb1      	ldrb	r1, [r6, #18]
     85a:	2900      	cmp	r1, #0
     85c:	d002      	beq.n	864 <spi_init+0x170>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     85e:	2180      	movs	r1, #128	; 0x80
     860:	0289      	lsls	r1, r1, #10
     862:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     864:	7cf1      	ldrb	r1, [r6, #19]
     866:	2900      	cmp	r1, #0
     868:	d002      	beq.n	870 <spi_init+0x17c>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     86a:	2180      	movs	r1, #128	; 0x80
     86c:	0089      	lsls	r1, r1, #2
     86e:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     870:	7d31      	ldrb	r1, [r6, #20]
     872:	2900      	cmp	r1, #0
     874:	d002      	beq.n	87c <spi_init+0x188>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     876:	2180      	movs	r1, #128	; 0x80
     878:	0189      	lsls	r1, r1, #6
     87a:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     87c:	6839      	ldr	r1, [r7, #0]
     87e:	430a      	orrs	r2, r1
     880:	603a      	str	r2, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     882:	687a      	ldr	r2, [r7, #4]
     884:	4313      	orrs	r3, r2
     886:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
     888:	2000      	movs	r0, #0
     88a:	e002      	b.n	892 <spi_init+0x19e>
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     88c:	2300      	movs	r3, #0
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
     88e:	2100      	movs	r1, #0
     890:	e766      	b.n	760 <spi_init+0x6c>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     892:	b008      	add	sp, #32
     894:	bc04      	pop	{r2}
     896:	4690      	mov	r8, r2
     898:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	000006b9 	.word	0x000006b9
     8a0:	40000400 	.word	0x40000400
     8a4:	00002055 	.word	0x00002055
     8a8:	00001fc9 	.word	0x00001fc9
     8ac:	000004e1 	.word	0x000004e1
     8b0:	000009bd 	.word	0x000009bd
     8b4:	00001521 	.word	0x00001521
     8b8:	200008c4 	.word	0x200008c4
     8bc:	00000531 	.word	0x00000531
     8c0:	00002131 	.word	0x00002131
     8c4:	00002071 	.word	0x00002071
     8c8:	00000305 	.word	0x00000305
     8cc:	41002000 	.word	0x41002000

000008d0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     8d0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     8d2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     8d4:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     8d6:	2c01      	cmp	r4, #1
     8d8:	d16c      	bne.n	9b4 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     8da:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     8dc:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     8de:	2c00      	cmp	r4, #0
     8e0:	d168      	bne.n	9b4 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     8e2:	2a00      	cmp	r2, #0
     8e4:	d057      	beq.n	996 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     8e6:	784b      	ldrb	r3, [r1, #1]
     8e8:	2b00      	cmp	r3, #0
     8ea:	d044      	beq.n	976 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8ec:	6802      	ldr	r2, [r0, #0]
     8ee:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     8f0:	07dc      	lsls	r4, r3, #31
     8f2:	d40f      	bmi.n	914 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     8f4:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     8f6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     8f8:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     8fa:	2900      	cmp	r1, #0
     8fc:	d103      	bne.n	906 <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     8fe:	095a      	lsrs	r2, r3, #5
     900:	01d2      	lsls	r2, r2, #7
     902:	492d      	ldr	r1, [pc, #180]	; (9b8 <spi_select_slave+0xe8>)
     904:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     906:	211f      	movs	r1, #31
     908:	400b      	ands	r3, r1
     90a:	2101      	movs	r1, #1
     90c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     90e:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     910:	2305      	movs	r3, #5
     912:	e04f      	b.n	9b4 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     914:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     916:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     918:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     91a:	2c00      	cmp	r4, #0
     91c:	d103      	bne.n	926 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     91e:	095a      	lsrs	r2, r3, #5
     920:	01d2      	lsls	r2, r2, #7
     922:	4c25      	ldr	r4, [pc, #148]	; (9b8 <spi_select_slave+0xe8>)
     924:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     926:	241f      	movs	r4, #31
     928:	4023      	ands	r3, r4
     92a:	2401      	movs	r4, #1
     92c:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     92e:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     930:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     932:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     934:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     936:	07d4      	lsls	r4, r2, #31
     938:	d500      	bpl.n	93c <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     93a:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     93c:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     93e:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     940:	2a00      	cmp	r2, #0
     942:	d137      	bne.n	9b4 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     944:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     946:	2104      	movs	r1, #4
     948:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     94a:	420b      	tst	r3, r1
     94c:	d0fc      	beq.n	948 <spi_select_slave+0x78>
     94e:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     950:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     952:	074c      	lsls	r4, r1, #29
     954:	d52e      	bpl.n	9b4 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     956:	8b53      	ldrh	r3, [r2, #26]
     958:	0759      	lsls	r1, r3, #29
     95a:	d503      	bpl.n	964 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     95c:	8b51      	ldrh	r1, [r2, #26]
     95e:	2304      	movs	r3, #4
     960:	430b      	orrs	r3, r1
     962:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     964:	7983      	ldrb	r3, [r0, #6]
     966:	2b01      	cmp	r3, #1
     968:	d102      	bne.n	970 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     96a:	6a93      	ldr	r3, [r2, #40]	; 0x28
     96c:	2300      	movs	r3, #0
     96e:	e021      	b.n	9b4 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     970:	6a93      	ldr	r3, [r2, #40]	; 0x28
     972:	2300      	movs	r3, #0
     974:	e01e      	b.n	9b4 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     976:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     978:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     97a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     97c:	2900      	cmp	r1, #0
     97e:	d103      	bne.n	988 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     980:	095a      	lsrs	r2, r3, #5
     982:	01d2      	lsls	r2, r2, #7
     984:	4c0c      	ldr	r4, [pc, #48]	; (9b8 <spi_select_slave+0xe8>)
     986:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     988:	211f      	movs	r1, #31
     98a:	400b      	ands	r3, r1
     98c:	2101      	movs	r1, #1
     98e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     990:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     992:	2300      	movs	r3, #0
     994:	e00e      	b.n	9b4 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     996:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     998:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     99a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     99c:	2900      	cmp	r1, #0
     99e:	d103      	bne.n	9a8 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     9a0:	095a      	lsrs	r2, r3, #5
     9a2:	01d2      	lsls	r2, r2, #7
     9a4:	4904      	ldr	r1, [pc, #16]	; (9b8 <spi_select_slave+0xe8>)
     9a6:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9a8:	211f      	movs	r1, #31
     9aa:	400b      	ands	r3, r1
     9ac:	2101      	movs	r1, #1
     9ae:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     9b0:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     9b2:	2300      	movs	r3, #0
}
     9b4:	1c18      	adds	r0, r3, #0
     9b6:	bd10      	pop	{r4, pc}
     9b8:	41004400 	.word	0x41004400

000009bc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     9be:	0080      	lsls	r0, r0, #2
     9c0:	4b60      	ldr	r3, [pc, #384]	; (b44 <_spi_interrupt_handler+0x188>)
     9c2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     9c4:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     9c6:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
     9c8:	5ce3      	ldrb	r3, [r4, r3]
     9ca:	2237      	movs	r2, #55	; 0x37
     9cc:	5ca2      	ldrb	r2, [r4, r2]
     9ce:	1c17      	adds	r7, r2, #0
     9d0:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     9d2:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     9d4:	7dae      	ldrb	r6, [r5, #22]
     9d6:	401e      	ands	r6, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     9d8:	07f1      	lsls	r1, r6, #31
     9da:	d543      	bpl.n	a64 <_spi_interrupt_handler+0xa8>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     9dc:	7963      	ldrb	r3, [r4, #5]
     9de:	2b01      	cmp	r3, #1
     9e0:	d140      	bne.n	a64 <_spi_interrupt_handler+0xa8>
			(module->dir == SPI_DIRECTION_READ)) {
     9e2:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     9e4:	2b00      	cmp	r3, #0
     9e6:	d10f      	bne.n	a08 <_spi_interrupt_handler+0x4c>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
     9e8:	4b57      	ldr	r3, [pc, #348]	; (b48 <_spi_interrupt_handler+0x18c>)
     9ea:	881b      	ldrh	r3, [r3, #0]
     9ec:	62ab      	str	r3, [r5, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     9ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     9f0:	3b01      	subs	r3, #1
     9f2:	b29b      	uxth	r3, r3
     9f4:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
     9f6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     9f8:	b29b      	uxth	r3, r3
     9fa:	2b00      	cmp	r3, #0
     9fc:	d101      	bne.n	a02 <_spi_interrupt_handler+0x46>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     9fe:	2301      	movs	r3, #1
     a00:	752b      	strb	r3, [r5, #20]
			}
		}
#  endif

		if (0
     a02:	7963      	ldrb	r3, [r4, #5]
     a04:	2b01      	cmp	r3, #1
     a06:	d12d      	bne.n	a64 <_spi_interrupt_handler+0xa8>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
     a08:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
     a0a:	2b00      	cmp	r3, #0
     a0c:	d02a      	beq.n	a64 <_spi_interrupt_handler+0xa8>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     a0e:	6822      	ldr	r2, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a12:	7819      	ldrb	r1, [r3, #0]
     a14:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
     a16:	1c58      	adds	r0, r3, #1
     a18:	62e0      	str	r0, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a1a:	79a0      	ldrb	r0, [r4, #6]
     a1c:	2801      	cmp	r0, #1
     a1e:	d104      	bne.n	a2a <_spi_interrupt_handler+0x6e>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     a20:	7858      	ldrb	r0, [r3, #1]
     a22:	0200      	lsls	r0, r0, #8
     a24:	4301      	orrs	r1, r0
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
     a26:	3302      	adds	r3, #2
     a28:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     a2a:	05cb      	lsls	r3, r1, #23
     a2c:	0ddb      	lsrs	r3, r3, #23
     a2e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
     a30:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     a32:	3b01      	subs	r3, #1
     a34:	b29b      	uxth	r3, r3
     a36:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     a38:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     a3a:	b29b      	uxth	r3, r3
     a3c:	2b00      	cmp	r3, #0
     a3e:	d111      	bne.n	a64 <_spi_interrupt_handler+0xa8>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     a40:	2301      	movs	r3, #1
     a42:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     a44:	7a63      	ldrb	r3, [r4, #9]
     a46:	2b01      	cmp	r3, #1
     a48:	d10c      	bne.n	a64 <_spi_interrupt_handler+0xa8>
     a4a:	79e3      	ldrb	r3, [r4, #7]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d109      	bne.n	a64 <_spi_interrupt_handler+0xa8>
						!(module->receiver_enabled)) {
					/* Buffer sent with receiver disabled */
					module->dir = SPI_DIRECTION_IDLE;
     a50:	2303      	movs	r3, #3
     a52:	7263      	strb	r3, [r4, #9]
					module->status = STATUS_OK;
     a54:	2200      	movs	r2, #0
     a56:	2338      	movs	r3, #56	; 0x38
     a58:	54e2      	strb	r2, [r4, r3]
					/* Run callback if registered and enabled */
					if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     a5a:	07fa      	lsls	r2, r7, #31
     a5c:	d502      	bpl.n	a64 <_spi_interrupt_handler+0xa8>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
									(module);
     a5e:	1c20      	adds	r0, r4, #0
     a60:	68e3      	ldr	r3, [r4, #12]
     a62:	4798      	blx	r3
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     a64:	0771      	lsls	r1, r6, #29
     a66:	d561      	bpl.n	b2c <_spi_interrupt_handler+0x170>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a68:	8b6b      	ldrh	r3, [r5, #26]
     a6a:	075a      	lsls	r2, r3, #29
     a6c:	d514      	bpl.n	a98 <_spi_interrupt_handler+0xdc>
			if (module->dir != SPI_DIRECTION_WRITE) {
     a6e:	7a63      	ldrb	r3, [r4, #9]
     a70:	2b01      	cmp	r3, #1
     a72:	d00b      	beq.n	a8c <_spi_interrupt_handler+0xd0>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     a74:	221e      	movs	r2, #30
     a76:	2338      	movs	r3, #56	; 0x38
     a78:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     a7a:	2303      	movs	r3, #3
     a7c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     a7e:	2305      	movs	r3, #5
     a80:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     a82:	073b      	lsls	r3, r7, #28
     a84:	d502      	bpl.n	a8c <_spi_interrupt_handler+0xd0>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     a86:	1c20      	adds	r0, r4, #0
     a88:	69a1      	ldr	r1, [r4, #24]
     a8a:	4788      	blx	r1
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     a8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     a8e:	8b6a      	ldrh	r2, [r5, #26]
     a90:	2304      	movs	r3, #4
     a92:	4313      	orrs	r3, r2
     a94:	836b      	strh	r3, [r5, #26]
     a96:	e049      	b.n	b2c <_spi_interrupt_handler+0x170>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
     a98:	7a63      	ldrb	r3, [r4, #9]
     a9a:	2b01      	cmp	r3, #1
     a9c:	d116      	bne.n	acc <_spi_interrupt_handler+0x110>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     a9e:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
     aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
     aa2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     aa4:	3b01      	subs	r3, #1
     aa6:	b29b      	uxth	r3, r3
     aa8:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
     aaa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     aac:	b29b      	uxth	r3, r3
     aae:	2b00      	cmp	r3, #0
     ab0:	d13c      	bne.n	b2c <_spi_interrupt_handler+0x170>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     ab2:	2304      	movs	r3, #4
     ab4:	752b      	strb	r3, [r5, #20]
					module->status = STATUS_OK;
     ab6:	2200      	movs	r2, #0
     ab8:	2338      	movs	r3, #56	; 0x38
     aba:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     abc:	2303      	movs	r3, #3
     abe:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
     ac0:	07fa      	lsls	r2, r7, #31
     ac2:	d533      	bpl.n	b2c <_spi_interrupt_handler+0x170>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     ac4:	1c20      	adds	r0, r4, #0
     ac6:	68e3      	ldr	r3, [r4, #12]
     ac8:	4798      	blx	r3
     aca:	e02f      	b.n	b2c <_spi_interrupt_handler+0x170>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     acc:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ad0:	05d2      	lsls	r2, r2, #23
     ad2:	0dd2      	lsrs	r2, r2, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
     ad4:	b2d3      	uxtb	r3, r2
     ad6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     ad8:	700b      	strb	r3, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
     ada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     adc:	1c59      	adds	r1, r3, #1
     ade:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ae0:	79a1      	ldrb	r1, [r4, #6]
     ae2:	2901      	cmp	r1, #1
     ae4:	d104      	bne.n	af0 <_spi_interrupt_handler+0x134>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
     ae6:	0a12      	lsrs	r2, r2, #8
     ae8:	705a      	strb	r2, [r3, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
     aea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aec:	3301      	adds	r3, #1
     aee:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
     af0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     af2:	3b01      	subs	r3, #1
     af4:	b29b      	uxth	r3, r3
     af6:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
     af8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     afa:	b29b      	uxth	r3, r3
     afc:	2b00      	cmp	r3, #0
     afe:	d115      	bne.n	b2c <_spi_interrupt_handler+0x170>
					module->status = STATUS_OK;
     b00:	2200      	movs	r2, #0
     b02:	2338      	movs	r3, #56	; 0x38
     b04:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     b06:	2304      	movs	r3, #4
     b08:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     b0a:	7a63      	ldrb	r3, [r4, #9]
     b0c:	2b02      	cmp	r3, #2
     b0e:	d105      	bne.n	b1c <_spi_interrupt_handler+0x160>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     b10:	077a      	lsls	r2, r7, #29
     b12:	d50b      	bpl.n	b2c <_spi_interrupt_handler+0x170>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     b14:	1c20      	adds	r0, r4, #0
     b16:	6963      	ldr	r3, [r4, #20]
     b18:	4798      	blx	r3
     b1a:	e007      	b.n	b2c <_spi_interrupt_handler+0x170>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
     b1c:	7a63      	ldrb	r3, [r4, #9]
     b1e:	2b00      	cmp	r3, #0
     b20:	d104      	bne.n	b2c <_spi_interrupt_handler+0x170>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     b22:	07b9      	lsls	r1, r7, #30
     b24:	d502      	bpl.n	b2c <_spi_interrupt_handler+0x170>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     b26:	1c20      	adds	r0, r4, #0
     b28:	6922      	ldr	r2, [r4, #16]
     b2a:	4790      	blx	r2
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     b2c:	09f6      	lsrs	r6, r6, #7
     b2e:	d007      	beq.n	b40 <_spi_interrupt_handler+0x184>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     b30:	2380      	movs	r3, #128	; 0x80
     b32:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     b34:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     b36:	067b      	lsls	r3, r7, #25
     b38:	d502      	bpl.n	b40 <_spi_interrupt_handler+0x184>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     b3c:	1c20      	adds	r0, r4, #0
     b3e:	4798      	blx	r3
		}
	}
#  endif
}
     b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	200008c4 	.word	0x200008c4
     b48:	200008a8 	.word	0x200008a8

00000b4c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b4c:	1c93      	adds	r3, r2, #2
     b4e:	009b      	lsls	r3, r3, #2
     b50:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     b52:	2a02      	cmp	r2, #2
     b54:	d104      	bne.n	b60 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     b56:	7e02      	ldrb	r2, [r0, #24]
     b58:	2310      	movs	r3, #16
     b5a:	4313      	orrs	r3, r2
     b5c:	7603      	strb	r3, [r0, #24]
     b5e:	e00c      	b.n	b7a <tc_register_callback+0x2e>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     b60:	2a03      	cmp	r2, #3
     b62:	d104      	bne.n	b6e <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     b64:	7e02      	ldrb	r2, [r0, #24]
     b66:	2320      	movs	r3, #32
     b68:	4313      	orrs	r3, r2
     b6a:	7603      	strb	r3, [r0, #24]
     b6c:	e005      	b.n	b7a <tc_register_callback+0x2e>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     b6e:	2301      	movs	r3, #1
     b70:	4093      	lsls	r3, r2
     b72:	1c1a      	adds	r2, r3, #0
     b74:	7e03      	ldrb	r3, [r0, #24]
     b76:	431a      	orrs	r2, r3
     b78:	7602      	strb	r2, [r0, #24]
	}
	return STATUS_OK;
}
     b7a:	2000      	movs	r0, #0
     b7c:	4770      	bx	lr
     b7e:	46c0      	nop			; (mov r8, r8)

00000b80 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     b80:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     b82:	0080      	lsls	r0, r0, #2
     b84:	4b14      	ldr	r3, [pc, #80]	; (bd8 <_tc_interrupt_handler+0x58>)
     b86:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     b88:	6822      	ldr	r2, [r4, #0]
     b8a:	7b95      	ldrb	r5, [r2, #14]
     b8c:	7e23      	ldrb	r3, [r4, #24]
     b8e:	401d      	ands	r5, r3
     b90:	7e63      	ldrb	r3, [r4, #25]
     b92:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     b94:	07eb      	lsls	r3, r5, #31
     b96:	d505      	bpl.n	ba4 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     b98:	1c20      	adds	r0, r4, #0
     b9a:	68a2      	ldr	r2, [r4, #8]
     b9c:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     b9e:	2301      	movs	r3, #1
     ba0:	6822      	ldr	r2, [r4, #0]
     ba2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     ba4:	07ab      	lsls	r3, r5, #30
     ba6:	d505      	bpl.n	bb4 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     ba8:	1c20      	adds	r0, r4, #0
     baa:	68e2      	ldr	r2, [r4, #12]
     bac:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     bae:	2302      	movs	r3, #2
     bb0:	6822      	ldr	r2, [r4, #0]
     bb2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     bb4:	06eb      	lsls	r3, r5, #27
     bb6:	d505      	bpl.n	bc4 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     bb8:	1c20      	adds	r0, r4, #0
     bba:	6922      	ldr	r2, [r4, #16]
     bbc:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     bbe:	2310      	movs	r3, #16
     bc0:	6822      	ldr	r2, [r4, #0]
     bc2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     bc4:	06ab      	lsls	r3, r5, #26
     bc6:	d505      	bpl.n	bd4 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     bc8:	1c20      	adds	r0, r4, #0
     bca:	6962      	ldr	r2, [r4, #20]
     bcc:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     bce:	6823      	ldr	r3, [r4, #0]
     bd0:	2220      	movs	r2, #32
     bd2:	739a      	strb	r2, [r3, #14]
	}
}
     bd4:	bd38      	pop	{r3, r4, r5, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	200008ac 	.word	0x200008ac

00000bdc <TC3_Handler>:
#if (SAML21E) || (SAML21G)
_TC_INTERRUPT_HANDLER(0,0)
_TC_INTERRUPT_HANDLER(1,1)
_TC_INTERRUPT_HANDLER(4,2)
#else
MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     bdc:	b508      	push	{r3, lr}
     bde:	2000      	movs	r0, #0
     be0:	4b01      	ldr	r3, [pc, #4]	; (be8 <TC3_Handler+0xc>)
     be2:	4798      	blx	r3
     be4:	bd08      	pop	{r3, pc}
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	00000b81 	.word	0x00000b81

00000bec <TC4_Handler>:
     bec:	b508      	push	{r3, lr}
     bee:	2001      	movs	r0, #1
     bf0:	4b01      	ldr	r3, [pc, #4]	; (bf8 <TC4_Handler+0xc>)
     bf2:	4798      	blx	r3
     bf4:	bd08      	pop	{r3, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	00000b81 	.word	0x00000b81

00000bfc <TC5_Handler>:
     bfc:	b508      	push	{r3, lr}
     bfe:	2002      	movs	r0, #2
     c00:	4b01      	ldr	r3, [pc, #4]	; (c08 <TC5_Handler+0xc>)
     c02:	4798      	blx	r3
     c04:	bd08      	pop	{r3, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	00000b81 	.word	0x00000b81

00000c0c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     c0c:	b570      	push	{r4, r5, r6, lr}
     c0e:	b084      	sub	sp, #16
     c10:	1c01      	adds	r1, r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     c12:	ab01      	add	r3, sp, #4
     c14:	4a0a      	ldr	r2, [pc, #40]	; (c40 <_tc_get_inst_index+0x34>)
     c16:	ca70      	ldmia	r2!, {r4, r5, r6}
     c18:	c370      	stmia	r3!, {r4, r5, r6}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     c1a:	9b01      	ldr	r3, [sp, #4]
     c1c:	4283      	cmp	r3, r0
     c1e:	d00a      	beq.n	c36 <_tc_get_inst_index+0x2a>
     c20:	9c02      	ldr	r4, [sp, #8]
     c22:	4284      	cmp	r4, r0
     c24:	d005      	beq.n	c32 <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     c26:	2000      	movs	r0, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     c28:	9d03      	ldr	r5, [sp, #12]
     c2a:	428d      	cmp	r5, r1
     c2c:	d105      	bne.n	c3a <_tc_get_inst_index+0x2e>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     c2e:	2002      	movs	r0, #2
     c30:	e002      	b.n	c38 <_tc_get_inst_index+0x2c>
     c32:	2001      	movs	r0, #1
     c34:	e000      	b.n	c38 <_tc_get_inst_index+0x2c>
     c36:	2000      	movs	r0, #0
		if (hw == tc_modules[i]) {
			return i;
     c38:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     c3a:	b004      	add	sp, #16
     c3c:	bd70      	pop	{r4, r5, r6, pc}
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	00007ab0 	.word	0x00007ab0

00000c44 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     c44:	b5f0      	push	{r4, r5, r6, r7, lr}
     c46:	464f      	mov	r7, r9
     c48:	4646      	mov	r6, r8
     c4a:	b4c0      	push	{r6, r7}
     c4c:	b087      	sub	sp, #28
     c4e:	1c04      	adds	r4, r0, #0
     c50:	1c0d      	adds	r5, r1, #0
     c52:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     c54:	1c08      	adds	r0, r1, #0
     c56:	4b90      	ldr	r3, [pc, #576]	; (e98 <tc_init+0x254>)
     c58:	4798      	blx	r3
     c5a:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     c5c:	4f8f      	ldr	r7, [pc, #572]	; (e9c <tc_init+0x258>)
     c5e:	1c39      	adds	r1, r7, #0
     c60:	310c      	adds	r1, #12
     c62:	a805      	add	r0, sp, #20
     c64:	2203      	movs	r2, #3
     c66:	4e8e      	ldr	r6, [pc, #568]	; (ea0 <tc_init+0x25c>)
     c68:	47b0      	blx	r6
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     c6a:	1c39      	adds	r1, r7, #0
     c6c:	3110      	adds	r1, #16
     c6e:	a803      	add	r0, sp, #12
     c70:	2206      	movs	r2, #6
     c72:	47b0      	blx	r6
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     c74:	2300      	movs	r3, #0
     c76:	60a3      	str	r3, [r4, #8]
     c78:	60e3      	str	r3, [r4, #12]
     c7a:	6123      	str	r3, [r4, #16]
     c7c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     c7e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     c80:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     c82:	4648      	mov	r0, r9
     c84:	0082      	lsls	r2, r0, #2
     c86:	4b87      	ldr	r3, [pc, #540]	; (ea4 <tc_init+0x260>)
     c88:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     c8a:	6025      	str	r5, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     c8c:	4641      	mov	r1, r8
     c8e:	788b      	ldrb	r3, [r1, #2]
     c90:	2b08      	cmp	r3, #8
     c92:	d104      	bne.n	c9e <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c94:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     c96:	464a      	mov	r2, r9
     c98:	07d2      	lsls	r2, r2, #31
     c9a:	d400      	bmi.n	c9e <tc_init+0x5a>
     c9c:	e0f6      	b.n	e8c <tc_init+0x248>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     c9e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     ca0:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     ca2:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     ca4:	07d9      	lsls	r1, r3, #31
     ca6:	d500      	bpl.n	caa <tc_init+0x66>
     ca8:	e0f0      	b.n	e8c <tc_init+0x248>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     caa:	7beb      	ldrb	r3, [r5, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     cac:	201c      	movs	r0, #28
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     cae:	06da      	lsls	r2, r3, #27
     cb0:	d500      	bpl.n	cb4 <tc_init+0x70>
     cb2:	e0eb      	b.n	e8c <tc_init+0x248>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     cb4:	882b      	ldrh	r3, [r5, #0]
     cb6:	0799      	lsls	r1, r3, #30
     cb8:	d500      	bpl.n	cbc <tc_init+0x78>
     cba:	e0e7      	b.n	e8c <tc_init+0x248>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     cbc:	4642      	mov	r2, r8
     cbe:	7c13      	ldrb	r3, [r2, #16]
     cc0:	2b00      	cmp	r3, #0
     cc2:	d00c      	beq.n	cde <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     cc4:	a902      	add	r1, sp, #8
     cc6:	2301      	movs	r3, #1
     cc8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     cca:	2200      	movs	r2, #0
     ccc:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     cce:	4640      	mov	r0, r8
     cd0:	6980      	ldr	r0, [r0, #24]
     cd2:	7008      	strb	r0, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     cd4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     cd6:	4642      	mov	r2, r8
     cd8:	7d10      	ldrb	r0, [r2, #20]
     cda:	4b73      	ldr	r3, [pc, #460]	; (ea8 <tc_init+0x264>)
     cdc:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     cde:	4640      	mov	r0, r8
     ce0:	7f03      	ldrb	r3, [r0, #28]
     ce2:	2b00      	cmp	r3, #0
     ce4:	d00b      	beq.n	cfe <tc_init+0xba>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ce6:	a902      	add	r1, sp, #8
     ce8:	2301      	movs	r3, #1
     cea:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     cec:	2200      	movs	r2, #0
     cee:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     cf0:	6a42      	ldr	r2, [r0, #36]	; 0x24
     cf2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     cf4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     cf6:	6a03      	ldr	r3, [r0, #32]
     cf8:	b2d8      	uxtb	r0, r3
     cfa:	4b6b      	ldr	r3, [pc, #428]	; (ea8 <tc_init+0x264>)
     cfc:	4798      	blx	r3
     cfe:	4b6b      	ldr	r3, [pc, #428]	; (eac <tc_init+0x268>)
     d00:	6a19      	ldr	r1, [r3, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     d02:	4648      	mov	r0, r9
     d04:	0042      	lsls	r2, r0, #1
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     d06:	a803      	add	r0, sp, #12
     d08:	5a12      	ldrh	r2, [r2, r0]
     d0a:	430a      	orrs	r2, r1
     d0c:	621a      	str	r2, [r3, #32]
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     d0e:	4641      	mov	r1, r8
     d10:	788b      	ldrb	r3, [r1, #2]
     d12:	2b08      	cmp	r3, #8
     d14:	d108      	bne.n	d28 <tc_init+0xe4>
     d16:	4b65      	ldr	r3, [pc, #404]	; (eac <tc_init+0x268>)
     d18:	6a1a      	ldr	r2, [r3, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     d1a:	4648      	mov	r0, r9
     d1c:	3001      	adds	r0, #1
     d1e:	0040      	lsls	r0, r0, #1

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     d20:	a903      	add	r1, sp, #12
     d22:	5a41      	ldrh	r1, [r0, r1]
     d24:	430a      	orrs	r2, r1
     d26:	621a      	str	r2, [r3, #32]
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
     d28:	a901      	add	r1, sp, #4
     d2a:	4642      	mov	r2, r8
     d2c:	7813      	ldrb	r3, [r2, #0]
     d2e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     d30:	ab05      	add	r3, sp, #20
     d32:	4648      	mov	r0, r9
     d34:	5c1e      	ldrb	r6, [r3, r0]
     d36:	1c30      	adds	r0, r6, #0
     d38:	4b5d      	ldr	r3, [pc, #372]	; (eb0 <tc_init+0x26c>)
     d3a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     d3c:	1c30      	adds	r0, r6, #0
     d3e:	4b5d      	ldr	r3, [pc, #372]	; (eb4 <tc_init+0x270>)
     d40:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
     d42:	4641      	mov	r1, r8
     d44:	8888      	ldrh	r0, [r1, #4]
     d46:	890b      	ldrh	r3, [r1, #8]
     d48:	4303      	orrs	r3, r0
     d4a:	7988      	ldrb	r0, [r1, #6]
     d4c:	788a      	ldrb	r2, [r1, #2]
     d4e:	4310      	orrs	r0, r2
     d50:	4318      	orrs	r0, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     d52:	784b      	ldrb	r3, [r1, #1]
     d54:	2b00      	cmp	r3, #0
     d56:	d002      	beq.n	d5e <tc_init+0x11a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     d58:	2380      	movs	r3, #128	; 0x80
     d5a:	011b      	lsls	r3, r3, #4
     d5c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d5e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d60:	227f      	movs	r2, #127	; 0x7f
     d62:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     d64:	4393      	bics	r3, r2
     d66:	d1fc      	bne.n	d62 <tc_init+0x11e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     d68:	8028      	strh	r0, [r5, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     d6a:	4642      	mov	r2, r8
     d6c:	7b50      	ldrb	r0, [r2, #13]
	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     d6e:	1e43      	subs	r3, r0, #1
     d70:	4198      	sbcs	r0, r3
     d72:	0080      	lsls	r0, r0, #2
	/* Set ctrlb register */
	if (config->oneshot) {
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
	}

	if (config->count_direction) {
     d74:	7b93      	ldrb	r3, [r2, #14]
     d76:	2b00      	cmp	r3, #0
     d78:	d001      	beq.n	d7e <tc_init+0x13a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     d7a:	2301      	movs	r3, #1
     d7c:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d7e:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d80:	227f      	movs	r2, #127	; 0x7f
     d82:	7bcb      	ldrb	r3, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     d84:	4393      	bics	r3, r2
     d86:	d1fc      	bne.n	d82 <tc_init+0x13e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     d88:	23ff      	movs	r3, #255	; 0xff
     d8a:	712b      	strb	r3, [r5, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     d8c:	2800      	cmp	r0, #0
     d8e:	d005      	beq.n	d9c <tc_init+0x158>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d90:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d92:	227f      	movs	r2, #127	; 0x7f
     d94:	7bcb      	ldrb	r3, [r1, #15]
		while (tc_is_syncing(module_inst)) {
     d96:	4393      	bics	r3, r2
     d98:	d1fc      	bne.n	d94 <tc_init+0x150>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     d9a:	7168      	strb	r0, [r5, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     d9c:	4643      	mov	r3, r8
     d9e:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     da0:	7adb      	ldrb	r3, [r3, #11]
     da2:	2b00      	cmp	r3, #0
     da4:	d001      	beq.n	daa <tc_init+0x166>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     da6:	2310      	movs	r3, #16
     da8:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     daa:	4641      	mov	r1, r8
     dac:	7b0b      	ldrb	r3, [r1, #12]
     dae:	2b00      	cmp	r3, #0
     db0:	d001      	beq.n	db6 <tc_init+0x172>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     db2:	2320      	movs	r3, #32
     db4:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     db6:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     db8:	227f      	movs	r2, #127	; 0x7f
     dba:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     dbc:	4393      	bics	r3, r2
     dbe:	d1fc      	bne.n	dba <tc_init+0x176>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     dc0:	71a8      	strb	r0, [r5, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     dc2:	6822      	ldr	r2, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     dc4:	217f      	movs	r1, #127	; 0x7f
     dc6:	7bd3      	ldrb	r3, [r2, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     dc8:	438b      	bics	r3, r1
     dca:	d1fc      	bne.n	dc6 <tc_init+0x182>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     dcc:	7923      	ldrb	r3, [r4, #4]
     dce:	2b04      	cmp	r3, #4
     dd0:	d005      	beq.n	dde <tc_init+0x19a>
     dd2:	2b08      	cmp	r3, #8
     dd4:	d041      	beq.n	e5a <tc_init+0x216>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     dd6:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     dd8:	2b00      	cmp	r3, #0
     dda:	d157      	bne.n	e8c <tc_init+0x248>
     ddc:	e024      	b.n	e28 <tc_init+0x1e4>
     dde:	217f      	movs	r1, #127	; 0x7f
     de0:	7bd3      	ldrb	r3, [r2, #15]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     de2:	438b      	bics	r3, r1
     de4:	d1fc      	bne.n	de0 <tc_init+0x19c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     de6:	2328      	movs	r3, #40	; 0x28
     de8:	4642      	mov	r2, r8
     dea:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     dec:	742b      	strb	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     dee:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     df0:	227f      	movs	r2, #127	; 0x7f
     df2:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     df4:	4393      	bics	r3, r2
     df6:	d1fc      	bne.n	df2 <tc_init+0x1ae>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     df8:	2329      	movs	r3, #41	; 0x29
     dfa:	4640      	mov	r0, r8
     dfc:	5cc3      	ldrb	r3, [r0, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     dfe:	752b      	strb	r3, [r5, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e00:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e02:	227f      	movs	r2, #127	; 0x7f
     e04:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     e06:	4393      	bics	r3, r2
     e08:	d1fc      	bne.n	e04 <tc_init+0x1c0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     e0a:	232a      	movs	r3, #42	; 0x2a
     e0c:	4641      	mov	r1, r8
     e0e:	5ccb      	ldrb	r3, [r1, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     e10:	762b      	strb	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e12:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e14:	227f      	movs	r2, #127	; 0x7f
     e16:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     e18:	4393      	bics	r3, r2
     e1a:	d1fc      	bne.n	e16 <tc_init+0x1d2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     e1c:	232b      	movs	r3, #43	; 0x2b
     e1e:	4642      	mov	r2, r8
     e20:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     e22:	766b      	strb	r3, [r5, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     e24:	2000      	movs	r0, #0
     e26:	e031      	b.n	e8c <tc_init+0x248>
     e28:	217f      	movs	r1, #127	; 0x7f
     e2a:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     e2c:	438b      	bics	r3, r1
     e2e:	d1fc      	bne.n	e2a <tc_init+0x1e6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     e30:	4640      	mov	r0, r8
     e32:	8d03      	ldrh	r3, [r0, #40]	; 0x28
     e34:	822b      	strh	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e36:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e38:	227f      	movs	r2, #127	; 0x7f
     e3a:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
     e3c:	4393      	bics	r3, r2
     e3e:	d1fc      	bne.n	e3a <tc_init+0x1f6>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     e40:	4641      	mov	r1, r8
     e42:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     e44:	832b      	strh	r3, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e46:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e48:	227f      	movs	r2, #127	; 0x7f
     e4a:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     e4c:	4393      	bics	r3, r2
     e4e:	d1fc      	bne.n	e4a <tc_init+0x206>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     e50:	4642      	mov	r2, r8
     e52:	8d93      	ldrh	r3, [r2, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     e54:	836b      	strh	r3, [r5, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     e56:	2000      	movs	r0, #0
     e58:	e018      	b.n	e8c <tc_init+0x248>
     e5a:	217f      	movs	r1, #127	; 0x7f
     e5c:	7bd3      	ldrb	r3, [r2, #15]

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     e5e:	438b      	bics	r3, r1
     e60:	d1fc      	bne.n	e5c <tc_init+0x218>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     e62:	4643      	mov	r3, r8
     e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e66:	612b      	str	r3, [r5, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e68:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e6a:	227f      	movs	r2, #127	; 0x7f
     e6c:	7bcb      	ldrb	r3, [r1, #15]

			while (tc_is_syncing(module_inst)) {
     e6e:	4393      	bics	r3, r2
     e70:	d1fc      	bne.n	e6c <tc_init+0x228>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     e72:	4640      	mov	r0, r8
     e74:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     e76:	61a8      	str	r0, [r5, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     e78:	6821      	ldr	r1, [r4, #0]

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     e7a:	227f      	movs	r2, #127	; 0x7f
     e7c:	7bcb      	ldrb	r3, [r1, #15]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     e7e:	4393      	bics	r3, r2
     e80:	d1fc      	bne.n	e7c <tc_init+0x238>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     e82:	4641      	mov	r1, r8
     e84:	6b0b      	ldr	r3, [r1, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     e86:	61eb      	str	r3, [r5, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     e88:	2000      	movs	r0, #0
     e8a:	e7ff      	b.n	e8c <tc_init+0x248>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     e8c:	b007      	add	sp, #28
     e8e:	bc0c      	pop	{r2, r3}
     e90:	4690      	mov	r8, r2
     e92:	4699      	mov	r9, r3
     e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	00000c0d 	.word	0x00000c0d
     e9c:	00007ab0 	.word	0x00007ab0
     ea0:	00006af9 	.word	0x00006af9
     ea4:	200008ac 	.word	0x200008ac
     ea8:	00002131 	.word	0x00002131
     eac:	40000400 	.word	0x40000400
     eb0:	00002055 	.word	0x00002055
     eb4:	00001fc9 	.word	0x00001fc9

00000eb8 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     eb8:	6802      	ldr	r2, [r0, #0]
     eba:	217f      	movs	r1, #127	; 0x7f
     ebc:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     ebe:	438b      	bics	r3, r1
     ec0:	d1fc      	bne.n	ebc <tc_get_count_value+0x4>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     ec2:	7903      	ldrb	r3, [r0, #4]
     ec4:	2b04      	cmp	r3, #4
     ec6:	d005      	beq.n	ed4 <tc_get_count_value+0x1c>
     ec8:	2b08      	cmp	r3, #8
     eca:	d009      	beq.n	ee0 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     ecc:	2000      	movs	r0, #0
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     ece:	2b00      	cmp	r3, #0
     ed0:	d108      	bne.n	ee4 <tc_get_count_value+0x2c>
     ed2:	e002      	b.n	eda <tc_get_count_value+0x22>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     ed4:	7c10      	ldrb	r0, [r2, #16]
     ed6:	b2c0      	uxtb	r0, r0
     ed8:	e004      	b.n	ee4 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     eda:	8a10      	ldrh	r0, [r2, #16]
     edc:	b280      	uxth	r0, r0
     ede:	e001      	b.n	ee4 <tc_get_count_value+0x2c>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
     ee0:	6910      	ldr	r0, [r2, #16]
     ee2:	e7ff      	b.n	ee4 <tc_get_count_value+0x2c>
	}

	Assert(false);
	return 0;
}
     ee4:	4770      	bx	lr
     ee6:	46c0      	nop			; (mov r8, r8)

00000ee8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     ee8:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     eea:	6804      	ldr	r4, [r0, #0]
     eec:	257f      	movs	r5, #127	; 0x7f
     eee:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
     ef0:	43ab      	bics	r3, r5
     ef2:	d1fc      	bne.n	eee <tc_set_compare_value+0x6>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     ef4:	7903      	ldrb	r3, [r0, #4]
     ef6:	2b04      	cmp	r3, #4
     ef8:	d005      	beq.n	f06 <tc_set_compare_value+0x1e>
     efa:	2b08      	cmp	r3, #8
     efc:	d014      	beq.n	f28 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     efe:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     f00:	2b00      	cmp	r3, #0
     f02:	d119      	bne.n	f38 <tc_set_compare_value+0x50>
     f04:	e007      	b.n	f16 <tc_set_compare_value+0x2e>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     f06:	2017      	movs	r0, #23
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
     f08:	2901      	cmp	r1, #1
     f0a:	d815      	bhi.n	f38 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
						(uint8_t)compare;
     f0c:	b2d2      	uxtb	r2, r2
	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT8.CC[channel_index].reg  =
     f0e:	1861      	adds	r1, r4, r1
     f10:	760a      	strb	r2, [r1, #24]
						(uint8_t)compare;
				return STATUS_OK;
     f12:	2000      	movs	r0, #0
     f14:	e010      	b.n	f38 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     f16:	2017      	movs	r0, #23
						(uint8_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
     f18:	2901      	cmp	r1, #1
     f1a:	d80d      	bhi.n	f38 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
						(uint16_t)compare;
     f1c:	b292      	uxth	r2, r2
			}

		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT16.CC[channel_index].reg =
     f1e:	310c      	adds	r1, #12
     f20:	0049      	lsls	r1, r1, #1
     f22:	530a      	strh	r2, [r1, r4]
						(uint16_t)compare;
				return STATUS_OK;
     f24:	2000      	movs	r0, #0
     f26:	e007      	b.n	f38 <tc_set_compare_value+0x50>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     f28:	2017      	movs	r0, #23
						(uint16_t)compare;
				return STATUS_OK;
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
     f2a:	2901      	cmp	r1, #1
     f2c:	d804      	bhi.n	f38 <tc_set_compare_value+0x50>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				tc_module->COUNT32.CC[channel_index].reg =
     f2e:	3106      	adds	r1, #6
     f30:	0089      	lsls	r1, r1, #2
     f32:	510a      	str	r2, [r1, r4]
						(uint32_t)compare;
				return STATUS_OK;
     f34:	2000      	movs	r0, #0
     f36:	e7ff      	b.n	f38 <tc_set_compare_value+0x50>
			}
	}

	return STATUS_ERR_INVALID_ARG;
}
     f38:	bd30      	pop	{r4, r5, pc}
     f3a:	46c0      	nop			; (mov r8, r8)

00000f3c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f3e:	4647      	mov	r7, r8
     f40:	b480      	push	{r7}
     f42:	1c0c      	adds	r4, r1, #0
     f44:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     f46:	2800      	cmp	r0, #0
     f48:	d10c      	bne.n	f64 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     f4a:	2a00      	cmp	r2, #0
     f4c:	dd0d      	ble.n	f6a <_read+0x2e>
     f4e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     f50:	4e09      	ldr	r6, [pc, #36]	; (f78 <_read+0x3c>)
     f52:	4d0a      	ldr	r5, [pc, #40]	; (f7c <_read+0x40>)
     f54:	6830      	ldr	r0, [r6, #0]
     f56:	1c21      	adds	r1, r4, #0
     f58:	682b      	ldr	r3, [r5, #0]
     f5a:	4798      	blx	r3
		ptr++;
     f5c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     f5e:	42bc      	cmp	r4, r7
     f60:	d1f8      	bne.n	f54 <_read+0x18>
     f62:	e004      	b.n	f6e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     f64:	2001      	movs	r0, #1
     f66:	4240      	negs	r0, r0
     f68:	e002      	b.n	f70 <_read+0x34>
	}

	for (; len > 0; --len) {
     f6a:	2000      	movs	r0, #0
     f6c:	e000      	b.n	f70 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     f6e:	4640      	mov	r0, r8
	}
	return nChars;
}
     f70:	bc04      	pop	{r2}
     f72:	4690      	mov	r8, r2
     f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	200008c0 	.word	0x200008c0
     f7c:	200008b8 	.word	0x200008b8

00000f80 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     f80:	b5f0      	push	{r4, r5, r6, r7, lr}
     f82:	4647      	mov	r7, r8
     f84:	b480      	push	{r7}
     f86:	1c0e      	adds	r6, r1, #0
     f88:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     f8a:	3801      	subs	r0, #1
     f8c:	2802      	cmp	r0, #2
     f8e:	d810      	bhi.n	fb2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     f90:	2a00      	cmp	r2, #0
     f92:	d011      	beq.n	fb8 <_write+0x38>
     f94:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     f96:	4b0d      	ldr	r3, [pc, #52]	; (fcc <_write+0x4c>)
     f98:	4698      	mov	r8, r3
     f9a:	4f0d      	ldr	r7, [pc, #52]	; (fd0 <_write+0x50>)
     f9c:	4643      	mov	r3, r8
     f9e:	6818      	ldr	r0, [r3, #0]
     fa0:	5d31      	ldrb	r1, [r6, r4]
     fa2:	683b      	ldr	r3, [r7, #0]
     fa4:	4798      	blx	r3
     fa6:	2800      	cmp	r0, #0
     fa8:	db08      	blt.n	fbc <_write+0x3c>
			return -1;
		}
		++nChars;
     faa:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     fac:	42a5      	cmp	r5, r4
     fae:	d1f5      	bne.n	f9c <_write+0x1c>
     fb0:	e007      	b.n	fc2 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     fb2:	2001      	movs	r0, #1
     fb4:	4240      	negs	r0, r0
     fb6:	e005      	b.n	fc4 <_write+0x44>
	}

	for (; len != 0; --len) {
     fb8:	2000      	movs	r0, #0
     fba:	e003      	b.n	fc4 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     fbc:	2001      	movs	r0, #1
     fbe:	4240      	negs	r0, r0
     fc0:	e000      	b.n	fc4 <_write+0x44>
		}
		++nChars;
     fc2:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     fc4:	bc04      	pop	{r2}
     fc6:	4690      	mov	r8, r2
     fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	200008c0 	.word	0x200008c0
     fd0:	200008bc 	.word	0x200008bc

00000fd4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fd6:	465f      	mov	r7, fp
     fd8:	4656      	mov	r6, sl
     fda:	464d      	mov	r5, r9
     fdc:	4644      	mov	r4, r8
     fde:	b4f0      	push	{r4, r5, r6, r7}
     fe0:	b091      	sub	sp, #68	; 0x44
     fe2:	1c05      	adds	r5, r0, #0
     fe4:	1c0c      	adds	r4, r1, #0
     fe6:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     fe8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fea:	1c08      	adds	r0, r1, #0
     fec:	4bad      	ldr	r3, [pc, #692]	; (12a4 <usart_init+0x2d0>)
     fee:	4798      	blx	r3
     ff0:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ff2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ff4:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ff6:	07d9      	lsls	r1, r3, #31
     ff8:	d500      	bpl.n	ffc <usart_init+0x28>
     ffa:	e14b      	b.n	1294 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ffc:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     ffe:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1000:	079f      	lsls	r7, r3, #30
    1002:	d500      	bpl.n	1006 <usart_init+0x32>
    1004:	e146      	b.n	1294 <usart_init+0x2c0>
    1006:	4ba8      	ldr	r3, [pc, #672]	; (12a8 <usart_init+0x2d4>)
    1008:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    100a:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    100c:	2701      	movs	r7, #1
    100e:	408f      	lsls	r7, r1
    1010:	1c39      	adds	r1, r7, #0
    1012:	4301      	orrs	r1, r0
    1014:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1016:	a90f      	add	r1, sp, #60	; 0x3c
    1018:	272d      	movs	r7, #45	; 0x2d
    101a:	5df3      	ldrb	r3, [r6, r7]
    101c:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    101e:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1020:	b2d2      	uxtb	r2, r2
    1022:	4690      	mov	r8, r2
    1024:	1c10      	adds	r0, r2, #0
    1026:	4ba1      	ldr	r3, [pc, #644]	; (12ac <usart_init+0x2d8>)
    1028:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    102a:	4640      	mov	r0, r8
    102c:	4ba0      	ldr	r3, [pc, #640]	; (12b0 <usart_init+0x2dc>)
    102e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1030:	5df0      	ldrb	r0, [r6, r7]
    1032:	2100      	movs	r1, #0
    1034:	4b9f      	ldr	r3, [pc, #636]	; (12b4 <usart_init+0x2e0>)
    1036:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1038:	7af3      	ldrb	r3, [r6, #11]
    103a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    103c:	2324      	movs	r3, #36	; 0x24
    103e:	5cf3      	ldrb	r3, [r6, r3]
    1040:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1042:	2325      	movs	r3, #37	; 0x25
    1044:	5cf3      	ldrb	r3, [r6, r3]
    1046:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1048:	7ef3      	ldrb	r3, [r6, #27]
    104a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    104c:	7f33      	ldrb	r3, [r6, #28]
    104e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1050:	6829      	ldr	r1, [r5, #0]
    1052:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1054:	1c08      	adds	r0, r1, #0
    1056:	4b93      	ldr	r3, [pc, #588]	; (12a4 <usart_init+0x2d0>)
    1058:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    105a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    105c:	2200      	movs	r2, #0
    105e:	466b      	mov	r3, sp
    1060:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1062:	8a32      	ldrh	r2, [r6, #16]
    1064:	9202      	str	r2, [sp, #8]
    1066:	2380      	movs	r3, #128	; 0x80
    1068:	01db      	lsls	r3, r3, #7
    106a:	429a      	cmp	r2, r3
    106c:	d021      	beq.n	10b2 <usart_init+0xde>
    106e:	2380      	movs	r3, #128	; 0x80
    1070:	01db      	lsls	r3, r3, #7
    1072:	429a      	cmp	r2, r3
    1074:	d804      	bhi.n	1080 <usart_init+0xac>
    1076:	2380      	movs	r3, #128	; 0x80
    1078:	019b      	lsls	r3, r3, #6
    107a:	429a      	cmp	r2, r3
    107c:	d011      	beq.n	10a2 <usart_init+0xce>
    107e:	e008      	b.n	1092 <usart_init+0xbe>
    1080:	23c0      	movs	r3, #192	; 0xc0
    1082:	01db      	lsls	r3, r3, #7
    1084:	9f02      	ldr	r7, [sp, #8]
    1086:	429f      	cmp	r7, r3
    1088:	d00f      	beq.n	10aa <usart_init+0xd6>
    108a:	2380      	movs	r3, #128	; 0x80
    108c:	021b      	lsls	r3, r3, #8
    108e:	429f      	cmp	r7, r3
    1090:	d003      	beq.n	109a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1092:	2710      	movs	r7, #16
    1094:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1096:	2700      	movs	r7, #0
    1098:	e00e      	b.n	10b8 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    109a:	2703      	movs	r7, #3
    109c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    109e:	2700      	movs	r7, #0
    10a0:	e00a      	b.n	10b8 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10a2:	2710      	movs	r7, #16
    10a4:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    10a6:	2701      	movs	r7, #1
    10a8:	e006      	b.n	10b8 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10aa:	2708      	movs	r7, #8
    10ac:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    10ae:	2701      	movs	r7, #1
    10b0:	e002      	b.n	10b8 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10b2:	2708      	movs	r7, #8
    10b4:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10b6:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    10b8:	6831      	ldr	r1, [r6, #0]
    10ba:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    10bc:	68f2      	ldr	r2, [r6, #12]
    10be:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    10c0:	6973      	ldr	r3, [r6, #20]
    10c2:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10c4:	7e31      	ldrb	r1, [r6, #24]
    10c6:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10c8:	2326      	movs	r3, #38	; 0x26
    10ca:	5cf3      	ldrb	r3, [r6, r3]
    10cc:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    10ce:	6873      	ldr	r3, [r6, #4]
    10d0:	2b00      	cmp	r3, #0
    10d2:	d013      	beq.n	10fc <usart_init+0x128>
    10d4:	2280      	movs	r2, #128	; 0x80
    10d6:	0552      	lsls	r2, r2, #21
    10d8:	4293      	cmp	r3, r2
    10da:	d12e      	bne.n	113a <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    10dc:	2327      	movs	r3, #39	; 0x27
    10de:	5cf3      	ldrb	r3, [r6, r3]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d12e      	bne.n	1142 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    10e4:	6a37      	ldr	r7, [r6, #32]
    10e6:	b2c0      	uxtb	r0, r0
    10e8:	4b73      	ldr	r3, [pc, #460]	; (12b8 <usart_init+0x2e4>)
    10ea:	4798      	blx	r3
    10ec:	1c01      	adds	r1, r0, #0
    10ee:	1c38      	adds	r0, r7, #0
    10f0:	466a      	mov	r2, sp
    10f2:	3226      	adds	r2, #38	; 0x26
    10f4:	4b71      	ldr	r3, [pc, #452]	; (12bc <usart_init+0x2e8>)
    10f6:	4798      	blx	r3
    10f8:	1c03      	adds	r3, r0, #0
    10fa:	e01f      	b.n	113c <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    10fc:	2327      	movs	r3, #39	; 0x27
    10fe:	5cf3      	ldrb	r3, [r6, r3]
    1100:	2b00      	cmp	r3, #0
    1102:	d00a      	beq.n	111a <usart_init+0x146>
				status_code =
    1104:	9a06      	ldr	r2, [sp, #24]
    1106:	9200      	str	r2, [sp, #0]
    1108:	6a30      	ldr	r0, [r6, #32]
    110a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    110c:	466a      	mov	r2, sp
    110e:	3226      	adds	r2, #38	; 0x26
    1110:	1c3b      	adds	r3, r7, #0
    1112:	4f6b      	ldr	r7, [pc, #428]	; (12c0 <usart_init+0x2ec>)
    1114:	47b8      	blx	r7
    1116:	1c03      	adds	r3, r0, #0
    1118:	e010      	b.n	113c <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    111a:	6a31      	ldr	r1, [r6, #32]
    111c:	9107      	str	r1, [sp, #28]
    111e:	b2c0      	uxtb	r0, r0
    1120:	4b65      	ldr	r3, [pc, #404]	; (12b8 <usart_init+0x2e4>)
    1122:	4798      	blx	r3
    1124:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1126:	9a06      	ldr	r2, [sp, #24]
    1128:	9200      	str	r2, [sp, #0]
    112a:	9807      	ldr	r0, [sp, #28]
    112c:	466a      	mov	r2, sp
    112e:	3226      	adds	r2, #38	; 0x26
    1130:	1c3b      	adds	r3, r7, #0
    1132:	4f63      	ldr	r7, [pc, #396]	; (12c0 <usart_init+0x2ec>)
    1134:	47b8      	blx	r7
    1136:	1c03      	adds	r3, r0, #0
    1138:	e000      	b.n	113c <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    113a:	2300      	movs	r3, #0
    113c:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    113e:	d000      	beq.n	1142 <usart_init+0x16e>
    1140:	e0a8      	b.n	1294 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1142:	7e73      	ldrb	r3, [r6, #25]
    1144:	2b00      	cmp	r3, #0
    1146:	d002      	beq.n	114e <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1148:	7eb3      	ldrb	r3, [r6, #26]
    114a:	4641      	mov	r1, r8
    114c:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    114e:	682a      	ldr	r2, [r5, #0]
    1150:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1152:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1154:	2b00      	cmp	r3, #0
    1156:	d1fc      	bne.n	1152 <usart_init+0x17e>
    1158:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    115a:	466b      	mov	r3, sp
    115c:	3326      	adds	r3, #38	; 0x26
    115e:	881b      	ldrh	r3, [r3, #0]
    1160:	4642      	mov	r2, r8
    1162:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1164:	464b      	mov	r3, r9
    1166:	9f03      	ldr	r7, [sp, #12]
    1168:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    116a:	9f04      	ldr	r7, [sp, #16]
    116c:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    116e:	6871      	ldr	r1, [r6, #4]
    1170:	430b      	orrs	r3, r1
		config->sample_rate |
    1172:	9f02      	ldr	r7, [sp, #8]
    1174:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1176:	4652      	mov	r2, sl
    1178:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    117a:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    117c:	4659      	mov	r1, fp
    117e:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1180:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1182:	2327      	movs	r3, #39	; 0x27
    1184:	5cf3      	ldrb	r3, [r6, r3]
    1186:	2b00      	cmp	r3, #0
    1188:	d101      	bne.n	118e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    118a:	2304      	movs	r3, #4
    118c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    118e:	7e71      	ldrb	r1, [r6, #25]
    1190:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1192:	7f33      	ldrb	r3, [r6, #28]
    1194:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1196:	4319      	orrs	r1, r3
    1198:	7af2      	ldrb	r2, [r6, #11]
    119a:	7ab3      	ldrb	r3, [r6, #10]
    119c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    119e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    11a0:	7f73      	ldrb	r3, [r6, #29]
    11a2:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    11a4:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11a6:	2324      	movs	r3, #36	; 0x24
    11a8:	5cf3      	ldrb	r3, [r6, r3]
    11aa:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    11ac:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    11ae:	2325      	movs	r3, #37	; 0x25
    11b0:	5cf3      	ldrb	r3, [r6, r3]
    11b2:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    11b4:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    11b6:	8933      	ldrh	r3, [r6, #8]
    11b8:	2bff      	cmp	r3, #255	; 0xff
    11ba:	d00b      	beq.n	11d4 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    11bc:	7ef2      	ldrb	r2, [r6, #27]
    11be:	2a00      	cmp	r2, #0
    11c0:	d003      	beq.n	11ca <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    11c2:	22a0      	movs	r2, #160	; 0xa0
    11c4:	04d2      	lsls	r2, r2, #19
    11c6:	4317      	orrs	r7, r2
    11c8:	e002      	b.n	11d0 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    11ca:	2280      	movs	r2, #128	; 0x80
    11cc:	0452      	lsls	r2, r2, #17
    11ce:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    11d0:	4319      	orrs	r1, r3
    11d2:	e005      	b.n	11e0 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    11d4:	7ef3      	ldrb	r3, [r6, #27]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d002      	beq.n	11e0 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    11da:	2380      	movs	r3, #128	; 0x80
    11dc:	04db      	lsls	r3, r3, #19
    11de:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    11e0:	232c      	movs	r3, #44	; 0x2c
    11e2:	5cf3      	ldrb	r3, [r6, r3]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d103      	bne.n	11f0 <usart_init+0x21c>
    11e8:	4b36      	ldr	r3, [pc, #216]	; (12c4 <usart_init+0x2f0>)
    11ea:	789b      	ldrb	r3, [r3, #2]
    11ec:	079a      	lsls	r2, r3, #30
    11ee:	d501      	bpl.n	11f4 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    11f0:	2380      	movs	r3, #128	; 0x80
    11f2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    11f4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11f6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    11f8:	2b00      	cmp	r3, #0
    11fa:	d1fc      	bne.n	11f6 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    11fc:	4643      	mov	r3, r8
    11fe:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1200:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1202:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1204:	2b00      	cmp	r3, #0
    1206:	d1fc      	bne.n	1202 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1208:	4641      	mov	r1, r8
    120a:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    120c:	ab0e      	add	r3, sp, #56	; 0x38
    120e:	2280      	movs	r2, #128	; 0x80
    1210:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1212:	2200      	movs	r2, #0
    1214:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1216:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1218:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    121a:	6b32      	ldr	r2, [r6, #48]	; 0x30
    121c:	920a      	str	r2, [sp, #40]	; 0x28
    121e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1220:	930b      	str	r3, [sp, #44]	; 0x2c
    1222:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    1224:	970c      	str	r7, [sp, #48]	; 0x30
    1226:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    1228:	960d      	str	r6, [sp, #52]	; 0x34
    122a:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    122c:	ae0e      	add	r6, sp, #56	; 0x38
    122e:	b2f9      	uxtb	r1, r7
    1230:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1232:	aa0a      	add	r2, sp, #40	; 0x28
    1234:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1236:	2800      	cmp	r0, #0
    1238:	d102      	bne.n	1240 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    123a:	1c20      	adds	r0, r4, #0
    123c:	4a22      	ldr	r2, [pc, #136]	; (12c8 <usart_init+0x2f4>)
    123e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1240:	1c43      	adds	r3, r0, #1
    1242:	d005      	beq.n	1250 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1244:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1246:	0c00      	lsrs	r0, r0, #16
    1248:	b2c0      	uxtb	r0, r0
    124a:	1c31      	adds	r1, r6, #0
    124c:	4a1f      	ldr	r2, [pc, #124]	; (12cc <usart_init+0x2f8>)
    124e:	4790      	blx	r2
    1250:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1252:	2f04      	cmp	r7, #4
    1254:	d1eb      	bne.n	122e <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1256:	2300      	movs	r3, #0
    1258:	60eb      	str	r3, [r5, #12]
    125a:	612b      	str	r3, [r5, #16]
    125c:	616b      	str	r3, [r5, #20]
    125e:	61ab      	str	r3, [r5, #24]
    1260:	61eb      	str	r3, [r5, #28]
    1262:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1264:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1266:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1268:	2200      	movs	r2, #0
    126a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    126c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    126e:	2330      	movs	r3, #48	; 0x30
    1270:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1272:	2331      	movs	r3, #49	; 0x31
    1274:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1276:	2332      	movs	r3, #50	; 0x32
    1278:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    127a:	2333      	movs	r3, #51	; 0x33
    127c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    127e:	6828      	ldr	r0, [r5, #0]
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <usart_init+0x2d0>)
    1282:	4798      	blx	r3
    1284:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1286:	4912      	ldr	r1, [pc, #72]	; (12d0 <usart_init+0x2fc>)
    1288:	4b12      	ldr	r3, [pc, #72]	; (12d4 <usart_init+0x300>)
    128a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    128c:	00a4      	lsls	r4, r4, #2
    128e:	4b12      	ldr	r3, [pc, #72]	; (12d8 <usart_init+0x304>)
    1290:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1292:	2000      	movs	r0, #0
}
    1294:	b011      	add	sp, #68	; 0x44
    1296:	bc3c      	pop	{r2, r3, r4, r5}
    1298:	4690      	mov	r8, r2
    129a:	4699      	mov	r9, r3
    129c:	46a2      	mov	sl, r4
    129e:	46ab      	mov	fp, r5
    12a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	000006b9 	.word	0x000006b9
    12a8:	40000400 	.word	0x40000400
    12ac:	00002055 	.word	0x00002055
    12b0:	00001fc9 	.word	0x00001fc9
    12b4:	000004e1 	.word	0x000004e1
    12b8:	00002071 	.word	0x00002071
    12bc:	00000305 	.word	0x00000305
    12c0:	00000331 	.word	0x00000331
    12c4:	41002000 	.word	0x41002000
    12c8:	00000531 	.word	0x00000531
    12cc:	00002131 	.word	0x00002131
    12d0:	00001381 	.word	0x00001381
    12d4:	00001521 	.word	0x00001521
    12d8:	200008c4 	.word	0x200008c4

000012dc <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    12dc:	b510      	push	{r4, lr}
    12de:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12e0:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    12e2:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    12e4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    12e6:	2c00      	cmp	r4, #0
    12e8:	d00d      	beq.n	1306 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    12ea:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    12ec:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    12ee:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    12f0:	2a00      	cmp	r2, #0
    12f2:	d108      	bne.n	1306 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    12f4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    12f6:	2a00      	cmp	r2, #0
    12f8:	d1fc      	bne.n	12f4 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    12fa:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    12fc:	2102      	movs	r1, #2
    12fe:	7e1a      	ldrb	r2, [r3, #24]
    1300:	420a      	tst	r2, r1
    1302:	d0fc      	beq.n	12fe <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1304:	2000      	movs	r0, #0
}
    1306:	bd10      	pop	{r4, pc}

00001308 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1308:	b510      	push	{r4, lr}
    130a:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    130c:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    130e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1310:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1312:	2a00      	cmp	r2, #0
    1314:	d033      	beq.n	137e <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1316:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1318:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    131a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    131c:	2b00      	cmp	r3, #0
    131e:	d12e      	bne.n	137e <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1320:	7e23      	ldrb	r3, [r4, #24]
    1322:	075a      	lsls	r2, r3, #29
    1324:	d52b      	bpl.n	137e <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1326:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1328:	2b00      	cmp	r3, #0
    132a:	d1fc      	bne.n	1326 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    132c:	8b63      	ldrh	r3, [r4, #26]
    132e:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1330:	069a      	lsls	r2, r3, #26
    1332:	d021      	beq.n	1378 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1334:	079a      	lsls	r2, r3, #30
    1336:	d503      	bpl.n	1340 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1338:	2302      	movs	r3, #2
    133a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    133c:	201a      	movs	r0, #26
    133e:	e01e      	b.n	137e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1340:	075a      	lsls	r2, r3, #29
    1342:	d503      	bpl.n	134c <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1344:	2304      	movs	r3, #4
    1346:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    1348:	201e      	movs	r0, #30
    134a:	e018      	b.n	137e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    134c:	07da      	lsls	r2, r3, #31
    134e:	d503      	bpl.n	1358 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1350:	2301      	movs	r3, #1
    1352:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1354:	2013      	movs	r0, #19
    1356:	e012      	b.n	137e <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1358:	06da      	lsls	r2, r3, #27
    135a:	d505      	bpl.n	1368 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    135c:	8b62      	ldrh	r2, [r4, #26]
    135e:	2310      	movs	r3, #16
    1360:	4313      	orrs	r3, r2
    1362:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1364:	2042      	movs	r0, #66	; 0x42
    1366:	e00a      	b.n	137e <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1368:	069a      	lsls	r2, r3, #26
    136a:	d505      	bpl.n	1378 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    136c:	8b62      	ldrh	r2, [r4, #26]
    136e:	2320      	movs	r3, #32
    1370:	4313      	orrs	r3, r2
    1372:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1374:	2041      	movs	r0, #65	; 0x41
    1376:	e002      	b.n	137e <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1378:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    137a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    137c:	2000      	movs	r0, #0
}
    137e:	bd10      	pop	{r4, pc}

00001380 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1382:	0080      	lsls	r0, r0, #2
    1384:	4b64      	ldr	r3, [pc, #400]	; (1518 <_usart_interrupt_handler+0x198>)
    1386:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1388:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    138a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    138c:	2b00      	cmp	r3, #0
    138e:	d1fc      	bne.n	138a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1390:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1392:	7da6      	ldrb	r6, [r4, #22]
    1394:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    1396:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1398:	5ceb      	ldrb	r3, [r5, r3]
    139a:	2230      	movs	r2, #48	; 0x30
    139c:	5caf      	ldrb	r7, [r5, r2]
    139e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    13a0:	07f1      	lsls	r1, r6, #31
    13a2:	d520      	bpl.n	13e6 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    13a4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    13a6:	b29b      	uxth	r3, r3
    13a8:	2b00      	cmp	r3, #0
    13aa:	d01a      	beq.n	13e2 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    13ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
    13ae:	781a      	ldrb	r2, [r3, #0]
    13b0:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    13b2:	1c59      	adds	r1, r3, #1
    13b4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13b6:	7969      	ldrb	r1, [r5, #5]
    13b8:	2901      	cmp	r1, #1
    13ba:	d104      	bne.n	13c6 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    13bc:	7859      	ldrb	r1, [r3, #1]
    13be:	0209      	lsls	r1, r1, #8
    13c0:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    13c2:	3302      	adds	r3, #2
    13c4:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    13c6:	05d3      	lsls	r3, r2, #23
    13c8:	0ddb      	lsrs	r3, r3, #23
    13ca:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    13cc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    13ce:	3b01      	subs	r3, #1
    13d0:	b29b      	uxth	r3, r3
    13d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    13d4:	2b00      	cmp	r3, #0
    13d6:	d106      	bne.n	13e6 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    13d8:	2301      	movs	r3, #1
    13da:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    13dc:	2302      	movs	r3, #2
    13de:	75a3      	strb	r3, [r4, #22]
    13e0:	e001      	b.n	13e6 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    13e2:	2301      	movs	r3, #1
    13e4:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    13e6:	07b2      	lsls	r2, r6, #30
    13e8:	d509      	bpl.n	13fe <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    13ea:	2302      	movs	r3, #2
    13ec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    13ee:	2200      	movs	r2, #0
    13f0:	2333      	movs	r3, #51	; 0x33
    13f2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    13f4:	07fb      	lsls	r3, r7, #31
    13f6:	d502      	bpl.n	13fe <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    13f8:	1c28      	adds	r0, r5, #0
    13fa:	68e9      	ldr	r1, [r5, #12]
    13fc:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    13fe:	0772      	lsls	r2, r6, #29
    1400:	d56a      	bpl.n	14d8 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    1402:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1404:	b29b      	uxth	r3, r3
    1406:	2b00      	cmp	r3, #0
    1408:	d064      	beq.n	14d4 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    140a:	8b63      	ldrh	r3, [r4, #26]
    140c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    140e:	0719      	lsls	r1, r3, #28
    1410:	d402      	bmi.n	1418 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1412:	223f      	movs	r2, #63	; 0x3f
    1414:	4013      	ands	r3, r2
    1416:	e001      	b.n	141c <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1418:	2237      	movs	r2, #55	; 0x37
    141a:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    141c:	2b00      	cmp	r3, #0
    141e:	d037      	beq.n	1490 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1420:	079a      	lsls	r2, r3, #30
    1422:	d507      	bpl.n	1434 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1424:	221a      	movs	r2, #26
    1426:	2332      	movs	r3, #50	; 0x32
    1428:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    142a:	8b62      	ldrh	r2, [r4, #26]
    142c:	2302      	movs	r3, #2
    142e:	4313      	orrs	r3, r2
    1430:	8363      	strh	r3, [r4, #26]
    1432:	e027      	b.n	1484 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1434:	0759      	lsls	r1, r3, #29
    1436:	d507      	bpl.n	1448 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1438:	221e      	movs	r2, #30
    143a:	2332      	movs	r3, #50	; 0x32
    143c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    143e:	8b62      	ldrh	r2, [r4, #26]
    1440:	2304      	movs	r3, #4
    1442:	4313      	orrs	r3, r2
    1444:	8363      	strh	r3, [r4, #26]
    1446:	e01d      	b.n	1484 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1448:	07da      	lsls	r2, r3, #31
    144a:	d507      	bpl.n	145c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    144c:	2213      	movs	r2, #19
    144e:	2332      	movs	r3, #50	; 0x32
    1450:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1452:	8b62      	ldrh	r2, [r4, #26]
    1454:	2301      	movs	r3, #1
    1456:	4313      	orrs	r3, r2
    1458:	8363      	strh	r3, [r4, #26]
    145a:	e013      	b.n	1484 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    145c:	06d9      	lsls	r1, r3, #27
    145e:	d507      	bpl.n	1470 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1460:	2242      	movs	r2, #66	; 0x42
    1462:	2332      	movs	r3, #50	; 0x32
    1464:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1466:	8b62      	ldrh	r2, [r4, #26]
    1468:	2310      	movs	r3, #16
    146a:	4313      	orrs	r3, r2
    146c:	8363      	strh	r3, [r4, #26]
    146e:	e009      	b.n	1484 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1470:	2220      	movs	r2, #32
    1472:	421a      	tst	r2, r3
    1474:	d006      	beq.n	1484 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1476:	2241      	movs	r2, #65	; 0x41
    1478:	2332      	movs	r3, #50	; 0x32
    147a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    147c:	8b62      	ldrh	r2, [r4, #26]
    147e:	2320      	movs	r3, #32
    1480:	4313      	orrs	r3, r2
    1482:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1484:	077a      	lsls	r2, r7, #29
    1486:	d527      	bpl.n	14d8 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1488:	1c28      	adds	r0, r5, #0
    148a:	696b      	ldr	r3, [r5, #20]
    148c:	4798      	blx	r3
    148e:	e023      	b.n	14d8 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1490:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1492:	05d2      	lsls	r2, r2, #23
    1494:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1496:	b2d3      	uxtb	r3, r2
    1498:	6a69      	ldr	r1, [r5, #36]	; 0x24
    149a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    149c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    149e:	1c59      	adds	r1, r3, #1
    14a0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    14a2:	7969      	ldrb	r1, [r5, #5]
    14a4:	2901      	cmp	r1, #1
    14a6:	d104      	bne.n	14b2 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    14a8:	0a12      	lsrs	r2, r2, #8
    14aa:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    14ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    14ae:	3301      	adds	r3, #1
    14b0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    14b2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    14b4:	3b01      	subs	r3, #1
    14b6:	b29b      	uxth	r3, r3
    14b8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    14ba:	2b00      	cmp	r3, #0
    14bc:	d10c      	bne.n	14d8 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    14be:	2304      	movs	r3, #4
    14c0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    14c2:	2200      	movs	r2, #0
    14c4:	2332      	movs	r3, #50	; 0x32
    14c6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    14c8:	07ba      	lsls	r2, r7, #30
    14ca:	d505      	bpl.n	14d8 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    14cc:	1c28      	adds	r0, r5, #0
    14ce:	692b      	ldr	r3, [r5, #16]
    14d0:	4798      	blx	r3
    14d2:	e001      	b.n	14d8 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    14d4:	2304      	movs	r3, #4
    14d6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    14d8:	06f1      	lsls	r1, r6, #27
    14da:	d507      	bpl.n	14ec <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    14dc:	2310      	movs	r3, #16
    14de:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    14e0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    14e2:	06fa      	lsls	r2, r7, #27
    14e4:	d502      	bpl.n	14ec <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    14e6:	1c28      	adds	r0, r5, #0
    14e8:	69eb      	ldr	r3, [r5, #28]
    14ea:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    14ec:	06b1      	lsls	r1, r6, #26
    14ee:	d507      	bpl.n	1500 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    14f0:	2320      	movs	r3, #32
    14f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    14f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    14f6:	073a      	lsls	r2, r7, #28
    14f8:	d502      	bpl.n	1500 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    14fa:	1c28      	adds	r0, r5, #0
    14fc:	69ab      	ldr	r3, [r5, #24]
    14fe:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1500:	0731      	lsls	r1, r6, #28
    1502:	d507      	bpl.n	1514 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1504:	2308      	movs	r3, #8
    1506:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1508:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    150a:	06ba      	lsls	r2, r7, #26
    150c:	d502      	bpl.n	1514 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    150e:	6a2b      	ldr	r3, [r5, #32]
    1510:	1c28      	adds	r0, r5, #0
    1512:	4798      	blx	r3
		}
	}
#endif
}
    1514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	200008c4 	.word	0x200008c4

0000151c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    151c:	4770      	bx	lr
    151e:	46c0      	nop			; (mov r8, r8)

00001520 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1520:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    1522:	4b0a      	ldr	r3, [pc, #40]	; (154c <_sercom_set_handler+0x2c>)
    1524:	781b      	ldrb	r3, [r3, #0]
    1526:	2b00      	cmp	r3, #0
    1528:	d10c      	bne.n	1544 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    152a:	4f09      	ldr	r7, [pc, #36]	; (1550 <_sercom_set_handler+0x30>)
    152c:	4e09      	ldr	r6, [pc, #36]	; (1554 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    152e:	4d0a      	ldr	r5, [pc, #40]	; (1558 <_sercom_set_handler+0x38>)
    1530:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1532:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1534:	195a      	adds	r2, r3, r5
    1536:	6014      	str	r4, [r2, #0]
    1538:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    153a:	2b18      	cmp	r3, #24
    153c:	d1f9      	bne.n	1532 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    153e:	2201      	movs	r2, #1
    1540:	4b02      	ldr	r3, [pc, #8]	; (154c <_sercom_set_handler+0x2c>)
    1542:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1544:	0080      	lsls	r0, r0, #2
    1546:	4b02      	ldr	r3, [pc, #8]	; (1550 <_sercom_set_handler+0x30>)
    1548:	50c1      	str	r1, [r0, r3]
}
    154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    154c:	20000090 	.word	0x20000090
    1550:	20000094 	.word	0x20000094
    1554:	0000151d 	.word	0x0000151d
    1558:	200008c4 	.word	0x200008c4

0000155c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    155c:	b510      	push	{r4, lr}
    155e:	b082      	sub	sp, #8
    1560:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1562:	4668      	mov	r0, sp
    1564:	4905      	ldr	r1, [pc, #20]	; (157c <_sercom_get_interrupt_vector+0x20>)
    1566:	2206      	movs	r2, #6
    1568:	4b05      	ldr	r3, [pc, #20]	; (1580 <_sercom_get_interrupt_vector+0x24>)
    156a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    156c:	1c20      	adds	r0, r4, #0
    156e:	4b05      	ldr	r3, [pc, #20]	; (1584 <_sercom_get_interrupt_vector+0x28>)
    1570:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1572:	466b      	mov	r3, sp
    1574:	5618      	ldrsb	r0, [r3, r0]
}
    1576:	b002      	add	sp, #8
    1578:	bd10      	pop	{r4, pc}
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	00007ac8 	.word	0x00007ac8
    1580:	00006af9 	.word	0x00006af9
    1584:	000006b9 	.word	0x000006b9

00001588 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1588:	b508      	push	{r3, lr}
    158a:	4b02      	ldr	r3, [pc, #8]	; (1594 <SERCOM0_Handler+0xc>)
    158c:	681b      	ldr	r3, [r3, #0]
    158e:	2000      	movs	r0, #0
    1590:	4798      	blx	r3
    1592:	bd08      	pop	{r3, pc}
    1594:	20000094 	.word	0x20000094

00001598 <SERCOM1_Handler>:
    1598:	b508      	push	{r3, lr}
    159a:	4b02      	ldr	r3, [pc, #8]	; (15a4 <SERCOM1_Handler+0xc>)
    159c:	685b      	ldr	r3, [r3, #4]
    159e:	2001      	movs	r0, #1
    15a0:	4798      	blx	r3
    15a2:	bd08      	pop	{r3, pc}
    15a4:	20000094 	.word	0x20000094

000015a8 <SERCOM2_Handler>:
    15a8:	b508      	push	{r3, lr}
    15aa:	4b02      	ldr	r3, [pc, #8]	; (15b4 <SERCOM2_Handler+0xc>)
    15ac:	689b      	ldr	r3, [r3, #8]
    15ae:	2002      	movs	r0, #2
    15b0:	4798      	blx	r3
    15b2:	bd08      	pop	{r3, pc}
    15b4:	20000094 	.word	0x20000094

000015b8 <SERCOM3_Handler>:
    15b8:	b508      	push	{r3, lr}
    15ba:	4b02      	ldr	r3, [pc, #8]	; (15c4 <SERCOM3_Handler+0xc>)
    15bc:	68db      	ldr	r3, [r3, #12]
    15be:	2003      	movs	r0, #3
    15c0:	4798      	blx	r3
    15c2:	bd08      	pop	{r3, pc}
    15c4:	20000094 	.word	0x20000094

000015c8 <SERCOM4_Handler>:
    15c8:	b508      	push	{r3, lr}
    15ca:	4b02      	ldr	r3, [pc, #8]	; (15d4 <SERCOM4_Handler+0xc>)
    15cc:	691b      	ldr	r3, [r3, #16]
    15ce:	2004      	movs	r0, #4
    15d0:	4798      	blx	r3
    15d2:	bd08      	pop	{r3, pc}
    15d4:	20000094 	.word	0x20000094

000015d8 <SERCOM5_Handler>:
    15d8:	b508      	push	{r3, lr}
    15da:	4b02      	ldr	r3, [pc, #8]	; (15e4 <SERCOM5_Handler+0xc>)
    15dc:	695b      	ldr	r3, [r3, #20]
    15de:	2005      	movs	r0, #5
    15e0:	4798      	blx	r3
    15e2:	bd08      	pop	{r3, pc}
    15e4:	20000094 	.word	0x20000094

000015e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    15e8:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    15ea:	2000      	movs	r0, #0
    15ec:	4b08      	ldr	r3, [pc, #32]	; (1610 <delay_init+0x28>)
    15ee:	4798      	blx	r3
	cycles_per_ms /= 1000;
    15f0:	4c08      	ldr	r4, [pc, #32]	; (1614 <delay_init+0x2c>)
    15f2:	21fa      	movs	r1, #250	; 0xfa
    15f4:	0089      	lsls	r1, r1, #2
    15f6:	47a0      	blx	r4
    15f8:	4b07      	ldr	r3, [pc, #28]	; (1618 <delay_init+0x30>)
    15fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    15fc:	21fa      	movs	r1, #250	; 0xfa
    15fe:	0089      	lsls	r1, r1, #2
    1600:	47a0      	blx	r4
    1602:	4b06      	ldr	r3, [pc, #24]	; (161c <delay_init+0x34>)
    1604:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1606:	2205      	movs	r2, #5
    1608:	4b05      	ldr	r3, [pc, #20]	; (1620 <delay_init+0x38>)
    160a:	601a      	str	r2, [r3, #0]
}
    160c:	bd10      	pop	{r4, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	00001f3d 	.word	0x00001f3d
    1614:	00004c85 	.word	0x00004c85
    1618:	20000004 	.word	0x20000004
    161c:	20000000 	.word	0x20000000
    1620:	e000e010 	.word	0xe000e010

00001624 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1624:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1626:	4b08      	ldr	r3, [pc, #32]	; (1648 <delay_cycles_us+0x24>)
    1628:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    162a:	4a08      	ldr	r2, [pc, #32]	; (164c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    162c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    162e:	2180      	movs	r1, #128	; 0x80
    1630:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
    1632:	e006      	b.n	1642 <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    1634:	2c00      	cmp	r4, #0
    1636:	d004      	beq.n	1642 <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
    1638:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    163a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    163c:	6813      	ldr	r3, [r2, #0]
    163e:	420b      	tst	r3, r1
    1640:	d0fc      	beq.n	163c <delay_cycles_us+0x18>
    1642:	3801      	subs	r0, #1
    1644:	d2f6      	bcs.n	1634 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
    1646:	bd30      	pop	{r4, r5, pc}
    1648:	20000000 	.word	0x20000000
    164c:	e000e010 	.word	0xe000e010

00001650 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1650:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1652:	4b08      	ldr	r3, [pc, #32]	; (1674 <delay_cycles_ms+0x24>)
    1654:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1656:	4a08      	ldr	r2, [pc, #32]	; (1678 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1658:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    165a:	2180      	movs	r1, #128	; 0x80
    165c:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    165e:	e006      	b.n	166e <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    1660:	2c00      	cmp	r4, #0
    1662:	d004      	beq.n	166e <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    1664:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1666:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1668:	6813      	ldr	r3, [r2, #0]
    166a:	420b      	tst	r3, r1
    166c:	d0fc      	beq.n	1668 <delay_cycles_ms+0x18>
    166e:	3801      	subs	r0, #1
    1670:	d2f6      	bcs.n	1660 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    1672:	bd30      	pop	{r4, r5, pc}
    1674:	20000004 	.word	0x20000004
    1678:	e000e010 	.word	0xe000e010

0000167c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    167c:	4b0c      	ldr	r3, [pc, #48]	; (16b0 <cpu_irq_enter_critical+0x34>)
    167e:	681b      	ldr	r3, [r3, #0]
    1680:	2b00      	cmp	r3, #0
    1682:	d110      	bne.n	16a6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1684:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1688:	2b00      	cmp	r3, #0
    168a:	d109      	bne.n	16a0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    168c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    168e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1692:	2200      	movs	r2, #0
    1694:	4b07      	ldr	r3, [pc, #28]	; (16b4 <cpu_irq_enter_critical+0x38>)
    1696:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1698:	2201      	movs	r2, #1
    169a:	4b07      	ldr	r3, [pc, #28]	; (16b8 <cpu_irq_enter_critical+0x3c>)
    169c:	701a      	strb	r2, [r3, #0]
    169e:	e002      	b.n	16a6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    16a0:	2200      	movs	r2, #0
    16a2:	4b05      	ldr	r3, [pc, #20]	; (16b8 <cpu_irq_enter_critical+0x3c>)
    16a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    16a6:	4b02      	ldr	r3, [pc, #8]	; (16b0 <cpu_irq_enter_critical+0x34>)
    16a8:	681a      	ldr	r2, [r3, #0]
    16aa:	3201      	adds	r2, #1
    16ac:	601a      	str	r2, [r3, #0]
}
    16ae:	4770      	bx	lr
    16b0:	200000ac 	.word	0x200000ac
    16b4:	20000008 	.word	0x20000008
    16b8:	200000b0 	.word	0x200000b0

000016bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    16bc:	4b08      	ldr	r3, [pc, #32]	; (16e0 <cpu_irq_leave_critical+0x24>)
    16be:	681a      	ldr	r2, [r3, #0]
    16c0:	3a01      	subs	r2, #1
    16c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    16c4:	681b      	ldr	r3, [r3, #0]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d109      	bne.n	16de <cpu_irq_leave_critical+0x22>
    16ca:	4b06      	ldr	r3, [pc, #24]	; (16e4 <cpu_irq_leave_critical+0x28>)
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d005      	beq.n	16de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    16d2:	2201      	movs	r2, #1
    16d4:	4b04      	ldr	r3, [pc, #16]	; (16e8 <cpu_irq_leave_critical+0x2c>)
    16d6:	701a      	strb	r2, [r3, #0]
    16d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    16dc:	b662      	cpsie	i
	}
}
    16de:	4770      	bx	lr
    16e0:	200000ac 	.word	0x200000ac
    16e4:	200000b0 	.word	0x200000b0
    16e8:	20000008 	.word	0x20000008

000016ec <system_board_init>:




void system_board_init(void)
{
    16ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ee:	4647      	mov	r7, r8
    16f0:	b480      	push	{r7}
    16f2:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    16f4:	ac01      	add	r4, sp, #4
    16f6:	2601      	movs	r6, #1
    16f8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    16fa:	2700      	movs	r7, #0
    16fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    16fe:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1700:	2013      	movs	r0, #19
    1702:	1c21      	adds	r1, r4, #0
    1704:	4d27      	ldr	r5, [pc, #156]	; (17a4 <system_board_init+0xb8>)
    1706:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1708:	4a27      	ldr	r2, [pc, #156]	; (17a8 <system_board_init+0xbc>)
    170a:	4690      	mov	r8, r2
    170c:	2380      	movs	r3, #128	; 0x80
    170e:	031b      	lsls	r3, r3, #12
    1710:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1712:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1714:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1716:	201c      	movs	r0, #28
    1718:	1c21      	adds	r1, r4, #0
    171a:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    171c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    171e:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX	

	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1720:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    1722:	2052      	movs	r0, #82	; 0x52
    1724:	1c21      	adds	r1, r4, #0
    1726:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    1728:	203e      	movs	r0, #62	; 0x3e
    172a:	1c21      	adds	r1, r4, #0
    172c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    172e:	203f      	movs	r0, #63	; 0x3f
    1730:	1c21      	adds	r1, r4, #0
    1732:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    1734:	202f      	movs	r0, #47	; 0x2f
    1736:	1c21      	adds	r1, r4, #0
    1738:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    173a:	2014      	movs	r0, #20
    173c:	1c21      	adds	r1, r4, #0
    173e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1740:	2280      	movs	r2, #128	; 0x80
    1742:	02d2      	lsls	r2, r2, #11
    1744:	4b19      	ldr	r3, [pc, #100]	; (17ac <system_board_init+0xc0>)
    1746:	619a      	str	r2, [r3, #24]
    1748:	3b80      	subs	r3, #128	; 0x80
    174a:	2280      	movs	r2, #128	; 0x80
    174c:	05d2      	lsls	r2, r2, #23
    174e:	619a      	str	r2, [r3, #24]
    1750:	2280      	movs	r2, #128	; 0x80
    1752:	0612      	lsls	r2, r2, #24
    1754:	619a      	str	r2, [r3, #24]
    1756:	2280      	movs	r2, #128	; 0x80
    1758:	0212      	lsls	r2, r2, #8
    175a:	619a      	str	r2, [r3, #24]
    175c:	2380      	movs	r3, #128	; 0x80
    175e:	035b      	lsls	r3, r3, #13
    1760:	4642      	mov	r2, r8
    1762:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1764:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    1766:	2053      	movs	r0, #83	; 0x53
    1768:	1c21      	adds	r1, r4, #0
    176a:	47a8      	blx	r5
	
	/* SAMR21 Antenna Diversity Configuration */

	PM->APBCMASK.reg |= (1<<PM_APBCMASK_RFCTRL_Pos);
    176c:	4b10      	ldr	r3, [pc, #64]	; (17b0 <system_board_init+0xc4>)
    176e:	6a19      	ldr	r1, [r3, #32]
    1770:	2280      	movs	r2, #128	; 0x80
    1772:	0392      	lsls	r2, r2, #14
    1774:	430a      	orrs	r2, r1
    1776:	621a      	str	r2, [r3, #32]
		
	/*Pins  PA12/RFCTRL2 and PA09/RFCTRL1 are used as DIG1 and DIG2 pins respectively in SAMR21 Xplained Pro*/	
	
	/* FECTRL register is Written with value 4 => F2CFG = 00 and F1CFG = 01 */	
	REG_RFCTRL_FECFG = RFCTRL_CFG_ANT_DIV;
    1778:	2204      	movs	r2, #4
    177a:	4b0e      	ldr	r3, [pc, #56]	; (17b4 <system_board_init+0xc8>)
    177c:	801a      	strh	r2, [r3, #0]
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    177e:	466b      	mov	r3, sp
    1780:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    1782:	70df      	strb	r7, [r3, #3]
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	/*MUX Position is 'F' i.e 5 for FECTRL Function and is same for all  FECTRL supported pins
	 * as provided in the data sheet */
	config_pinmux.mux_position = MUX_PA09F_RFCTRL_FECTRL1 ;
    1784:	2305      	movs	r3, #5
    1786:	466a      	mov	r2, sp
    1788:	7013      	strb	r3, [r2, #0]
	
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
    178a:	7056      	strb	r6, [r2, #1]
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
    178c:	2009      	movs	r0, #9
    178e:	4669      	mov	r1, sp
    1790:	4c09      	ldr	r4, [pc, #36]	; (17b8 <system_board_init+0xcc>)
    1792:	47a0      	blx	r4
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
    1794:	200c      	movs	r0, #12
    1796:	4669      	mov	r1, sp
    1798:	47a0      	blx	r4
#endif

}
    179a:	b002      	add	sp, #8
    179c:	bc04      	pop	{r2}
    179e:	4690      	mov	r8, r2
    17a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17a2:	46c0      	nop			; (mov r8, r8)
    17a4:	00001bfd 	.word	0x00001bfd
    17a8:	41004400 	.word	0x41004400
    17ac:	41004500 	.word	0x41004500
    17b0:	40000400 	.word	0x40000400
    17b4:	42005400 	.word	0x42005400
    17b8:	00002131 	.word	0x00002131

000017bc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    17bc:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    17be:	2200      	movs	r2, #0
    17c0:	2300      	movs	r3, #0
    17c2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    17c4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    17c6:	2100      	movs	r1, #0
    17c8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    17ca:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    17cc:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    17ce:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    17d0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    17d2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
    17d4:	2406      	movs	r4, #6
    17d6:	7304      	strb	r4, [r0, #12]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    17d8:	24c0      	movs	r4, #192	; 0xc0
    17da:	0164      	lsls	r4, r4, #5
    17dc:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    17de:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    17e0:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    17e2:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    17e4:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    17e6:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    17e8:	242a      	movs	r4, #42	; 0x2a
    17ea:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    17ec:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    17ee:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    17f0:	2424      	movs	r4, #36	; 0x24
    17f2:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    17f4:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    17f6:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    17f8:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    17fa:	232b      	movs	r3, #43	; 0x2b
    17fc:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    17fe:	232c      	movs	r3, #44	; 0x2c
    1800:	54c1      	strb	r1, [r0, r3]
}
    1802:	bd10      	pop	{r4, pc}

00001804 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1804:	b5f0      	push	{r4, r5, r6, r7, lr}
    1806:	465f      	mov	r7, fp
    1808:	4656      	mov	r6, sl
    180a:	464d      	mov	r5, r9
    180c:	4644      	mov	r4, r8
    180e:	b4f0      	push	{r4, r5, r6, r7}
    1810:	b099      	sub	sp, #100	; 0x64
    1812:	1c06      	adds	r6, r0, #0
    1814:	1c15      	adds	r5, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1816:	6001      	str	r1, [r0, #0]
    1818:	4bb5      	ldr	r3, [pc, #724]	; (1af0 <adc_init+0x2ec>)
    181a:	6a18      	ldr	r0, [r3, #32]
    181c:	2280      	movs	r2, #128	; 0x80
    181e:	0252      	lsls	r2, r2, #9
    1820:	4302      	orrs	r2, r0
    1822:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1824:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1826:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1828:	07da      	lsls	r2, r3, #31
    182a:	d500      	bpl.n	182e <adc_init+0x2a>
    182c:	e1d9      	b.n	1be2 <adc_init+0x3de>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    182e:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    1830:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1832:	0799      	lsls	r1, r3, #30
    1834:	d500      	bpl.n	1838 <adc_init+0x34>
    1836:	e1d4      	b.n	1be2 <adc_init+0x3de>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    1838:	786b      	ldrb	r3, [r5, #1]
    183a:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    183c:	2b00      	cmp	r3, #0
    183e:	d104      	bne.n	184a <adc_init+0x46>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1840:	4bac      	ldr	r3, [pc, #688]	; (1af4 <adc_init+0x2f0>)
    1842:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1844:	2204      	movs	r2, #4
    1846:	430a      	orrs	r2, r1
    1848:	641a      	str	r2, [r3, #64]	; 0x40
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    184a:	6832      	ldr	r2, [r6, #0]
    184c:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    184e:	782b      	ldrb	r3, [r5, #0]
    1850:	4668      	mov	r0, sp
    1852:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1854:	201e      	movs	r0, #30
    1856:	a902      	add	r1, sp, #8
    1858:	4ba7      	ldr	r3, [pc, #668]	; (1af8 <adc_init+0x2f4>)
    185a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    185c:	201e      	movs	r0, #30
    185e:	4ba7      	ldr	r3, [pc, #668]	; (1afc <adc_init+0x2f8>)
    1860:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    1862:	232c      	movs	r3, #44	; 0x2c
    1864:	5ceb      	ldrb	r3, [r5, r3]
    1866:	2b00      	cmp	r3, #0
    1868:	d042      	beq.n	18f0 <adc_init+0xec>
		uint8_t offset = config->pin_scan.offset_start_scan;
    186a:	222b      	movs	r2, #43	; 0x2b
    186c:	5cac      	ldrb	r4, [r5, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    186e:	7b29      	ldrb	r1, [r5, #12]
    1870:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    1872:	190a      	adds	r2, r1, r4
    1874:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    1876:	18d3      	adds	r3, r2, r3
    1878:	b2db      	uxtb	r3, r3
    187a:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    187c:	429a      	cmp	r2, r3
    187e:	d221      	bcs.n	18c4 <adc_init+0xc0>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1880:	4a9f      	ldr	r2, [pc, #636]	; (1b00 <adc_init+0x2fc>)
    1882:	4693      	mov	fp, r2
    1884:	4b9f      	ldr	r3, [pc, #636]	; (1b04 <adc_init+0x300>)
    1886:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1888:	270f      	movs	r7, #15
    188a:	4027      	ands	r7, r4
    188c:	7b2b      	ldrb	r3, [r5, #12]
    188e:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    1890:	a804      	add	r0, sp, #16
    1892:	4659      	mov	r1, fp
    1894:	2250      	movs	r2, #80	; 0x50
    1896:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1898:	2f13      	cmp	r7, #19
    189a:	d80c      	bhi.n	18b6 <adc_init+0xb2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    189c:	00bf      	lsls	r7, r7, #2
    189e:	ab04      	add	r3, sp, #16
    18a0:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    18a2:	a903      	add	r1, sp, #12
    18a4:	2300      	movs	r3, #0
    18a6:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    18a8:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    18aa:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    18ac:	2301      	movs	r3, #1
    18ae:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    18b0:	b2c0      	uxtb	r0, r0
    18b2:	4a95      	ldr	r2, [pc, #596]	; (1b08 <adc_init+0x304>)
    18b4:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
    18b6:	3401      	adds	r4, #1
    18b8:	b2e4      	uxtb	r4, r4
    18ba:	4640      	mov	r0, r8
    18bc:	1903      	adds	r3, r0, r4
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    18be:	b2db      	uxtb	r3, r3
    18c0:	4599      	cmp	r9, r3
    18c2:	d8e1      	bhi.n	1888 <adc_init+0x84>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    18c4:	89ec      	ldrh	r4, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    18c6:	a804      	add	r0, sp, #16
    18c8:	498d      	ldr	r1, [pc, #564]	; (1b00 <adc_init+0x2fc>)
    18ca:	2250      	movs	r2, #80	; 0x50
    18cc:	4b8d      	ldr	r3, [pc, #564]	; (1b04 <adc_init+0x300>)
    18ce:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    18d0:	2c13      	cmp	r4, #19
    18d2:	d837      	bhi.n	1944 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    18d4:	00a4      	lsls	r4, r4, #2
    18d6:	ab04      	add	r3, sp, #16
    18d8:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    18da:	a903      	add	r1, sp, #12
    18dc:	2300      	movs	r3, #0
    18de:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    18e0:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    18e2:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    18e4:	2301      	movs	r3, #1
    18e6:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    18e8:	b2c0      	uxtb	r0, r0
    18ea:	4b87      	ldr	r3, [pc, #540]	; (1b08 <adc_init+0x304>)
    18ec:	4798      	blx	r3
    18ee:	e029      	b.n	1944 <adc_init+0x140>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
    18f0:	7b2c      	ldrb	r4, [r5, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    18f2:	a804      	add	r0, sp, #16
    18f4:	4982      	ldr	r1, [pc, #520]	; (1b00 <adc_init+0x2fc>)
    18f6:	2250      	movs	r2, #80	; 0x50
    18f8:	4b82      	ldr	r3, [pc, #520]	; (1b04 <adc_init+0x300>)
    18fa:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    18fc:	2c13      	cmp	r4, #19
    18fe:	d80c      	bhi.n	191a <adc_init+0x116>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1900:	00a4      	lsls	r4, r4, #2
    1902:	ab04      	add	r3, sp, #16
    1904:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1906:	a903      	add	r1, sp, #12
    1908:	2300      	movs	r3, #0
    190a:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    190c:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    190e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1910:	2301      	movs	r3, #1
    1912:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    1914:	b2c0      	uxtb	r0, r0
    1916:	4b7c      	ldr	r3, [pc, #496]	; (1b08 <adc_init+0x304>)
    1918:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
    191a:	89ec      	ldrh	r4, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    191c:	a804      	add	r0, sp, #16
    191e:	4978      	ldr	r1, [pc, #480]	; (1b00 <adc_init+0x2fc>)
    1920:	2250      	movs	r2, #80	; 0x50
    1922:	4b78      	ldr	r3, [pc, #480]	; (1b04 <adc_init+0x300>)
    1924:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    1926:	2c13      	cmp	r4, #19
    1928:	d80c      	bhi.n	1944 <adc_init+0x140>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    192a:	00a4      	lsls	r4, r4, #2
    192c:	ab04      	add	r3, sp, #16
    192e:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1930:	a903      	add	r1, sp, #12
    1932:	2300      	movs	r3, #0
    1934:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1936:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1938:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    193a:	2301      	movs	r3, #1
    193c:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    193e:	b2c0      	uxtb	r0, r0
    1940:	4b71      	ldr	r3, [pc, #452]	; (1b08 <adc_init+0x304>)
    1942:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1944:	7d6b      	ldrb	r3, [r5, #21]
    1946:	009b      	lsls	r3, r3, #2
    1948:	b2db      	uxtb	r3, r3
    194a:	9901      	ldr	r1, [sp, #4]
    194c:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    194e:	7dab      	ldrb	r3, [r5, #22]
    1950:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    1952:	786a      	ldrb	r2, [r5, #1]
    1954:	4313      	orrs	r3, r2
    1956:	b2db      	uxtb	r3, r3
    1958:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    195a:	792b      	ldrb	r3, [r5, #4]
    195c:	2b34      	cmp	r3, #52	; 0x34
    195e:	d900      	bls.n	1962 <adc_init+0x15e>
    1960:	e13e      	b.n	1be0 <adc_init+0x3dc>
    1962:	009b      	lsls	r3, r3, #2
    1964:	4a69      	ldr	r2, [pc, #420]	; (1b0c <adc_init+0x308>)
    1966:	58d3      	ldr	r3, [r2, r3]
    1968:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    196a:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    196c:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    196e:	2301      	movs	r3, #1
    1970:	e01a      	b.n	19a8 <adc_init+0x1a4>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    1972:	7c6b      	ldrb	r3, [r5, #17]
		accumulate = config->accumulate_samples;
    1974:	7c2a      	ldrb	r2, [r5, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1976:	2410      	movs	r4, #16
    1978:	e016      	b.n	19a8 <adc_init+0x1a4>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    197a:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    197c:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    197e:	2301      	movs	r3, #1
    1980:	e012      	b.n	19a8 <adc_init+0x1a4>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1982:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    1984:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1986:	2300      	movs	r3, #0
    1988:	e00e      	b.n	19a8 <adc_init+0x1a4>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    198a:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    198c:	2430      	movs	r4, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    198e:	2300      	movs	r3, #0
    1990:	e00a      	b.n	19a8 <adc_init+0x1a4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1992:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    1994:	2420      	movs	r4, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    1996:	2300      	movs	r3, #0
    1998:	e006      	b.n	19a8 <adc_init+0x1a4>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    199a:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    199c:	2400      	movs	r4, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
    199e:	2300      	movs	r3, #0
    19a0:	e002      	b.n	19a8 <adc_init+0x1a4>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    19a2:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    19a4:	2410      	movs	r4, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    19a6:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    19a8:	011b      	lsls	r3, r3, #4
    19aa:	2170      	movs	r1, #112	; 0x70
    19ac:	400b      	ands	r3, r1
    19ae:	4313      	orrs	r3, r2
    19b0:	9a01      	ldr	r2, [sp, #4]
    19b2:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    19b4:	7deb      	ldrb	r3, [r5, #23]
		return STATUS_ERR_INVALID_ARG;
    19b6:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    19b8:	2b3f      	cmp	r3, #63	; 0x3f
    19ba:	d900      	bls.n	19be <adc_init+0x1ba>
    19bc:	e111      	b.n	1be2 <adc_init+0x3de>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    19be:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    19c0:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    19c2:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    19c4:	b25b      	sxtb	r3, r3
    19c6:	2b00      	cmp	r3, #0
    19c8:	dbfb      	blt.n	19c2 <adc_init+0x1be>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    19ca:	7cea      	ldrb	r2, [r5, #19]
    19cc:	886b      	ldrh	r3, [r5, #2]
    19ce:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    19d0:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    19d2:	5caa      	ldrb	r2, [r5, r2]
    19d4:	00d2      	lsls	r2, r2, #3
    19d6:	4313      	orrs	r3, r2
    19d8:	7d2a      	ldrb	r2, [r5, #20]
    19da:	0092      	lsls	r2, r2, #2
    19dc:	4313      	orrs	r3, r2
    19de:	7caa      	ldrb	r2, [r5, #18]
    19e0:	0052      	lsls	r2, r2, #1
    19e2:	4313      	orrs	r3, r2
    19e4:	4323      	orrs	r3, r4
    19e6:	9801      	ldr	r0, [sp, #4]
    19e8:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    19ea:	7e2b      	ldrb	r3, [r5, #24]
    19ec:	2b00      	cmp	r3, #0
    19ee:	d101      	bne.n	19f4 <adc_init+0x1f0>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    19f0:	6831      	ldr	r1, [r6, #0]
    19f2:	e095      	b.n	1b20 <adc_init+0x31c>
		switch (resolution) {
    19f4:	2c10      	cmp	r4, #16
    19f6:	d05b      	beq.n	1ab0 <adc_init+0x2ac>
    19f8:	d802      	bhi.n	1a00 <adc_init+0x1fc>
    19fa:	2c00      	cmp	r4, #0
    19fc:	d038      	beq.n	1a70 <adc_init+0x26c>
    19fe:	e7f7      	b.n	19f0 <adc_init+0x1ec>
    1a00:	2c20      	cmp	r4, #32
    1a02:	d019      	beq.n	1a38 <adc_init+0x234>
    1a04:	2c30      	cmp	r4, #48	; 0x30
    1a06:	d1f3      	bne.n	19f0 <adc_init+0x1ec>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    1a08:	7cea      	ldrb	r2, [r5, #19]
    1a0a:	2a00      	cmp	r2, #0
    1a0c:	d00a      	beq.n	1a24 <adc_init+0x220>
					(config->window.window_lower_value > 127 ||
    1a0e:	69ea      	ldr	r2, [r5, #28]
    1a10:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1a12:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    1a14:	2aff      	cmp	r2, #255	; 0xff
    1a16:	d900      	bls.n	1a1a <adc_init+0x216>
    1a18:	e0e3      	b.n	1be2 <adc_init+0x3de>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    1a1a:	6a2a      	ldr	r2, [r5, #32]
    1a1c:	3280      	adds	r2, #128	; 0x80
    1a1e:	2aff      	cmp	r2, #255	; 0xff
    1a20:	d900      	bls.n	1a24 <adc_init+0x220>
    1a22:	e0de      	b.n	1be2 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1a24:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    1a26:	69e9      	ldr	r1, [r5, #28]
    1a28:	29ff      	cmp	r1, #255	; 0xff
    1a2a:	dd00      	ble.n	1a2e <adc_init+0x22a>
    1a2c:	e0d9      	b.n	1be2 <adc_init+0x3de>
    1a2e:	6a2a      	ldr	r2, [r5, #32]
    1a30:	2aff      	cmp	r2, #255	; 0xff
    1a32:	dd00      	ble.n	1a36 <adc_init+0x232>
    1a34:	e0d5      	b.n	1be2 <adc_init+0x3de>
    1a36:	e7db      	b.n	19f0 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    1a38:	7cea      	ldrb	r2, [r5, #19]
    1a3a:	2a00      	cmp	r2, #0
    1a3c:	d00d      	beq.n	1a5a <adc_init+0x256>
					(config->window.window_lower_value > 511 ||
    1a3e:	69e8      	ldr	r0, [r5, #28]
    1a40:	2280      	movs	r2, #128	; 0x80
    1a42:	0092      	lsls	r2, r2, #2
    1a44:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1a46:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    1a48:	4a31      	ldr	r2, [pc, #196]	; (1b10 <adc_init+0x30c>)
    1a4a:	4291      	cmp	r1, r2
    1a4c:	d900      	bls.n	1a50 <adc_init+0x24c>
    1a4e:	e0c8      	b.n	1be2 <adc_init+0x3de>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    1a50:	4a30      	ldr	r2, [pc, #192]	; (1b14 <adc_init+0x310>)
    1a52:	6a29      	ldr	r1, [r5, #32]
    1a54:	4291      	cmp	r1, r2
    1a56:	db00      	blt.n	1a5a <adc_init+0x256>
    1a58:	e0c3      	b.n	1be2 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1a5a:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    1a5c:	4a2c      	ldr	r2, [pc, #176]	; (1b10 <adc_init+0x30c>)
    1a5e:	69e9      	ldr	r1, [r5, #28]
    1a60:	4291      	cmp	r1, r2
    1a62:	dd00      	ble.n	1a66 <adc_init+0x262>
    1a64:	e0bd      	b.n	1be2 <adc_init+0x3de>
    1a66:	6a29      	ldr	r1, [r5, #32]
    1a68:	4291      	cmp	r1, r2
    1a6a:	dd00      	ble.n	1a6e <adc_init+0x26a>
    1a6c:	e0b9      	b.n	1be2 <adc_init+0x3de>
    1a6e:	e7bf      	b.n	19f0 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    1a70:	7cea      	ldrb	r2, [r5, #19]
    1a72:	2a00      	cmp	r2, #0
    1a74:	d011      	beq.n	1a9a <adc_init+0x296>
					(config->window.window_lower_value > 2047 ||
    1a76:	69ea      	ldr	r2, [r5, #28]
    1a78:	2080      	movs	r0, #128	; 0x80
    1a7a:	0100      	lsls	r0, r0, #4
    1a7c:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1a7e:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    1a80:	4a25      	ldr	r2, [pc, #148]	; (1b18 <adc_init+0x314>)
    1a82:	4291      	cmp	r1, r2
    1a84:	d900      	bls.n	1a88 <adc_init+0x284>
    1a86:	e0ac      	b.n	1be2 <adc_init+0x3de>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    1a88:	6a2a      	ldr	r2, [r5, #32]
    1a8a:	2080      	movs	r0, #128	; 0x80
    1a8c:	0100      	lsls	r0, r0, #4
    1a8e:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1a90:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    1a92:	4a21      	ldr	r2, [pc, #132]	; (1b18 <adc_init+0x314>)
    1a94:	4291      	cmp	r1, r2
    1a96:	d900      	bls.n	1a9a <adc_init+0x296>
    1a98:	e0a3      	b.n	1be2 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1a9a:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    1a9c:	4a1e      	ldr	r2, [pc, #120]	; (1b18 <adc_init+0x314>)
    1a9e:	69e9      	ldr	r1, [r5, #28]
    1aa0:	4291      	cmp	r1, r2
    1aa2:	dd00      	ble.n	1aa6 <adc_init+0x2a2>
    1aa4:	e09d      	b.n	1be2 <adc_init+0x3de>
    1aa6:	6a29      	ldr	r1, [r5, #32]
    1aa8:	4291      	cmp	r1, r2
    1aaa:	dd00      	ble.n	1aae <adc_init+0x2aa>
    1aac:	e099      	b.n	1be2 <adc_init+0x3de>
    1aae:	e79f      	b.n	19f0 <adc_init+0x1ec>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    1ab0:	7cea      	ldrb	r2, [r5, #19]
    1ab2:	2a00      	cmp	r2, #0
    1ab4:	d011      	beq.n	1ada <adc_init+0x2d6>
					(config->window.window_lower_value > 32767 ||
    1ab6:	69ea      	ldr	r2, [r5, #28]
    1ab8:	2080      	movs	r0, #128	; 0x80
    1aba:	0200      	lsls	r0, r0, #8
    1abc:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1abe:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    1ac0:	4a16      	ldr	r2, [pc, #88]	; (1b1c <adc_init+0x318>)
    1ac2:	4291      	cmp	r1, r2
    1ac4:	d900      	bls.n	1ac8 <adc_init+0x2c4>
    1ac6:	e08c      	b.n	1be2 <adc_init+0x3de>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    1ac8:	6a2a      	ldr	r2, [r5, #32]
    1aca:	2080      	movs	r0, #128	; 0x80
    1acc:	0200      	lsls	r0, r0, #8
    1ace:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1ad0:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    1ad2:	4a12      	ldr	r2, [pc, #72]	; (1b1c <adc_init+0x318>)
    1ad4:	4291      	cmp	r1, r2
    1ad6:	d900      	bls.n	1ada <adc_init+0x2d6>
    1ad8:	e083      	b.n	1be2 <adc_init+0x3de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    1ada:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    1adc:	4a0f      	ldr	r2, [pc, #60]	; (1b1c <adc_init+0x318>)
    1ade:	69e9      	ldr	r1, [r5, #28]
    1ae0:	4291      	cmp	r1, r2
    1ae2:	dd00      	ble.n	1ae6 <adc_init+0x2e2>
    1ae4:	e07d      	b.n	1be2 <adc_init+0x3de>
    1ae6:	6a29      	ldr	r1, [r5, #32]
    1ae8:	4291      	cmp	r1, r2
    1aea:	dd00      	ble.n	1aee <adc_init+0x2ea>
    1aec:	e079      	b.n	1be2 <adc_init+0x3de>
    1aee:	e77f      	b.n	19f0 <adc_init+0x1ec>
    1af0:	40000400 	.word	0x40000400
    1af4:	40000800 	.word	0x40000800
    1af8:	00002055 	.word	0x00002055
    1afc:	00001fc9 	.word	0x00001fc9
    1b00:	00007ba4 	.word	0x00007ba4
    1b04:	00006af9 	.word	0x00006af9
    1b08:	00002131 	.word	0x00002131
    1b0c:	00007ad0 	.word	0x00007ad0
    1b10:	000003ff 	.word	0x000003ff
    1b14:	fffffe01 	.word	0xfffffe01
    1b18:	00000fff 	.word	0x00000fff
    1b1c:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b20:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
    1b22:	b252      	sxtb	r2, r2
    1b24:	2a00      	cmp	r2, #0
    1b26:	dbfb      	blt.n	1b20 <adc_init+0x31c>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    1b28:	9a01      	ldr	r2, [sp, #4]
    1b2a:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1b2c:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b2e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1b30:	b25b      	sxtb	r3, r3
    1b32:	2b00      	cmp	r3, #0
    1b34:	dbfb      	blt.n	1b2e <adc_init+0x32a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    1b36:	8bab      	ldrh	r3, [r5, #28]
    1b38:	9801      	ldr	r0, [sp, #4]
    1b3a:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1b3c:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b3e:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    1b40:	b25b      	sxtb	r3, r3
    1b42:	2b00      	cmp	r3, #0
    1b44:	dbfb      	blt.n	1b3e <adc_init+0x33a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1b46:	8c2b      	ldrh	r3, [r5, #32]
    1b48:	9901      	ldr	r1, [sp, #4]
    1b4a:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1b4c:	232c      	movs	r3, #44	; 0x2c
    1b4e:	5ceb      	ldrb	r3, [r5, r3]
	if (inputs_to_scan > 0) {
    1b50:	2b00      	cmp	r3, #0
    1b52:	d004      	beq.n	1b5e <adc_init+0x35a>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    1b54:	3b01      	subs	r3, #1
    1b56:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    1b58:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1b5a:	2b0f      	cmp	r3, #15
    1b5c:	d841      	bhi.n	1be2 <adc_init+0x3de>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1b5e:	222b      	movs	r2, #43	; 0x2b
    1b60:	5caa      	ldrb	r2, [r5, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    1b62:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1b64:	2a0f      	cmp	r2, #15
    1b66:	d83c      	bhi.n	1be2 <adc_init+0x3de>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1b68:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b6a:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
    1b6c:	b240      	sxtb	r0, r0
    1b6e:	2800      	cmp	r0, #0
    1b70:	dbfb      	blt.n	1b6a <adc_init+0x366>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1b72:	89e8      	ldrh	r0, [r5, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1b74:	7b29      	ldrb	r1, [r5, #12]
			config->gain_factor |
    1b76:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    1b78:	68a8      	ldr	r0, [r5, #8]
    1b7a:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
    1b7c:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1b7e:	430a      	orrs	r2, r1
    1b80:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1b82:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    1b84:	9901      	ldr	r1, [sp, #4]
    1b86:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    1b88:	232a      	movs	r3, #42	; 0x2a
    1b8a:	5ceb      	ldrb	r3, [r5, r3]
    1b8c:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    1b8e:	230f      	movs	r3, #15
    1b90:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    1b92:	2324      	movs	r3, #36	; 0x24
    1b94:	5ceb      	ldrb	r3, [r5, r3]
    1b96:	2b00      	cmp	r3, #0
    1b98:	d010      	beq.n	1bbc <adc_init+0x3b8>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1b9a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
    1b9c:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1b9e:	4a14      	ldr	r2, [pc, #80]	; (1bf0 <adc_init+0x3ec>)
    1ba0:	4293      	cmp	r3, r2
    1ba2:	d81e      	bhi.n	1be2 <adc_init+0x3de>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1ba4:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    1ba6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    1ba8:	2080      	movs	r0, #128	; 0x80
    1baa:	0100      	lsls	r0, r0, #4
    1bac:	1819      	adds	r1, r3, r0
    1bae:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    1bb0:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    1bb2:	4a0f      	ldr	r2, [pc, #60]	; (1bf0 <adc_init+0x3ec>)
    1bb4:	4291      	cmp	r1, r2
    1bb6:	d814      	bhi.n	1be2 <adc_init+0x3de>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1bb8:	9901      	ldr	r1, [sp, #4]
    1bba:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    1bbc:	4b0d      	ldr	r3, [pc, #52]	; (1bf4 <adc_init+0x3f0>)
    1bbe:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1bc0:	0152      	lsls	r2, r2, #5
    1bc2:	23e0      	movs	r3, #224	; 0xe0
    1bc4:	00db      	lsls	r3, r3, #3
    1bc6:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    1bc8:	4b0b      	ldr	r3, [pc, #44]	; (1bf8 <adc_init+0x3f4>)
    1bca:	6858      	ldr	r0, [r3, #4]
    1bcc:	0141      	lsls	r1, r0, #5
    1bce:	681b      	ldr	r3, [r3, #0]
    1bd0:	0edb      	lsrs	r3, r3, #27
    1bd2:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    1bd4:	b2db      	uxtb	r3, r3
    1bd6:	4313      	orrs	r3, r2
    1bd8:	9901      	ldr	r1, [sp, #4]
    1bda:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    1bdc:	2000      	movs	r0, #0
    1bde:	e000      	b.n	1be2 <adc_init+0x3de>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    1be0:	2017      	movs	r0, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1be2:	b019      	add	sp, #100	; 0x64
    1be4:	bc3c      	pop	{r2, r3, r4, r5}
    1be6:	4690      	mov	r8, r2
    1be8:	4699      	mov	r9, r3
    1bea:	46a2      	mov	sl, r4
    1bec:	46ab      	mov	fp, r5
    1bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bf0:	00000fff 	.word	0x00000fff
    1bf4:	00806024 	.word	0x00806024
    1bf8:	00806020 	.word	0x00806020

00001bfc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1bfc:	b500      	push	{lr}
    1bfe:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c00:	ab01      	add	r3, sp, #4
    1c02:	2280      	movs	r2, #128	; 0x80
    1c04:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1c06:	780a      	ldrb	r2, [r1, #0]
    1c08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1c0a:	784a      	ldrb	r2, [r1, #1]
    1c0c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1c0e:	788a      	ldrb	r2, [r1, #2]
    1c10:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1c12:	1c19      	adds	r1, r3, #0
    1c14:	4b01      	ldr	r3, [pc, #4]	; (1c1c <port_pin_set_config+0x20>)
    1c16:	4798      	blx	r3
}
    1c18:	b003      	add	sp, #12
    1c1a:	bd00      	pop	{pc}
    1c1c:	00002131 	.word	0x00002131

00001c20 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1c20:	b508      	push	{r3, lr}
	switch (clock_source) {
    1c22:	2808      	cmp	r0, #8
    1c24:	d834      	bhi.n	1c90 <system_clock_source_get_hz+0x70>
    1c26:	0080      	lsls	r0, r0, #2
    1c28:	4b1b      	ldr	r3, [pc, #108]	; (1c98 <system_clock_source_get_hz+0x78>)
    1c2a:	581b      	ldr	r3, [r3, r0]
    1c2c:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1c2e:	2080      	movs	r0, #128	; 0x80
    1c30:	0200      	lsls	r0, r0, #8
    1c32:	e030      	b.n	1c96 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1c34:	4b19      	ldr	r3, [pc, #100]	; (1c9c <system_clock_source_get_hz+0x7c>)
    1c36:	6918      	ldr	r0, [r3, #16]
    1c38:	e02d      	b.n	1c96 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1c3a:	4b19      	ldr	r3, [pc, #100]	; (1ca0 <system_clock_source_get_hz+0x80>)
    1c3c:	6a18      	ldr	r0, [r3, #32]
    1c3e:	0580      	lsls	r0, r0, #22
    1c40:	0f80      	lsrs	r0, r0, #30
    1c42:	4b18      	ldr	r3, [pc, #96]	; (1ca4 <system_clock_source_get_hz+0x84>)
    1c44:	40c3      	lsrs	r3, r0
    1c46:	1c18      	adds	r0, r3, #0
    1c48:	e025      	b.n	1c96 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1c4a:	4b14      	ldr	r3, [pc, #80]	; (1c9c <system_clock_source_get_hz+0x7c>)
    1c4c:	6958      	ldr	r0, [r3, #20]
    1c4e:	e022      	b.n	1c96 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1c50:	4b12      	ldr	r3, [pc, #72]	; (1c9c <system_clock_source_get_hz+0x7c>)
    1c52:	681b      	ldr	r3, [r3, #0]
    1c54:	2002      	movs	r0, #2
    1c56:	4018      	ands	r0, r3
    1c58:	d01d      	beq.n	1c96 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c5a:	4911      	ldr	r1, [pc, #68]	; (1ca0 <system_clock_source_get_hz+0x80>)
    1c5c:	2210      	movs	r2, #16
    1c5e:	68cb      	ldr	r3, [r1, #12]
    1c60:	421a      	tst	r2, r3
    1c62:	d0fc      	beq.n	1c5e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1c64:	4b0d      	ldr	r3, [pc, #52]	; (1c9c <system_clock_source_get_hz+0x7c>)
    1c66:	681b      	ldr	r3, [r3, #0]
    1c68:	075a      	lsls	r2, r3, #29
    1c6a:	d513      	bpl.n	1c94 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c6c:	2000      	movs	r0, #0
    1c6e:	4b0e      	ldr	r3, [pc, #56]	; (1ca8 <system_clock_source_get_hz+0x88>)
    1c70:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1c72:	4b0a      	ldr	r3, [pc, #40]	; (1c9c <system_clock_source_get_hz+0x7c>)
    1c74:	689b      	ldr	r3, [r3, #8]
    1c76:	041b      	lsls	r3, r3, #16
    1c78:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c7a:	4358      	muls	r0, r3
    1c7c:	e00b      	b.n	1c96 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1c7e:	2350      	movs	r3, #80	; 0x50
    1c80:	4a07      	ldr	r2, [pc, #28]	; (1ca0 <system_clock_source_get_hz+0x80>)
    1c82:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1c84:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1c86:	075a      	lsls	r2, r3, #29
    1c88:	d505      	bpl.n	1c96 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1c8a:	4b04      	ldr	r3, [pc, #16]	; (1c9c <system_clock_source_get_hz+0x7c>)
    1c8c:	68d8      	ldr	r0, [r3, #12]
    1c8e:	e002      	b.n	1c96 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1c90:	2000      	movs	r0, #0
    1c92:	e000      	b.n	1c96 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1c94:	4805      	ldr	r0, [pc, #20]	; (1cac <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1c96:	bd08      	pop	{r3, pc}
    1c98:	00007bf4 	.word	0x00007bf4
    1c9c:	200000b4 	.word	0x200000b4
    1ca0:	40000800 	.word	0x40000800
    1ca4:	007a1200 	.word	0x007a1200
    1ca8:	00002071 	.word	0x00002071
    1cac:	02dc6c00 	.word	0x02dc6c00

00001cb0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1cb0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1cb2:	4b0c      	ldr	r3, [pc, #48]	; (1ce4 <system_clock_source_osc8m_set_config+0x34>)
    1cb4:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1cb6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1cb8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1cba:	7840      	ldrb	r0, [r0, #1]
    1cbc:	2201      	movs	r2, #1
    1cbe:	4010      	ands	r0, r2
    1cc0:	0180      	lsls	r0, r0, #6
    1cc2:	2640      	movs	r6, #64	; 0x40
    1cc4:	43b4      	bics	r4, r6
    1cc6:	4304      	orrs	r4, r0
    1cc8:	402a      	ands	r2, r5
    1cca:	01d0      	lsls	r0, r2, #7
    1ccc:	2280      	movs	r2, #128	; 0x80
    1cce:	4394      	bics	r4, r2
    1cd0:	1c22      	adds	r2, r4, #0
    1cd2:	4302      	orrs	r2, r0
    1cd4:	2003      	movs	r0, #3
    1cd6:	4001      	ands	r1, r0
    1cd8:	0209      	lsls	r1, r1, #8
    1cda:	4803      	ldr	r0, [pc, #12]	; (1ce8 <system_clock_source_osc8m_set_config+0x38>)
    1cdc:	4002      	ands	r2, r0
    1cde:	430a      	orrs	r2, r1
    1ce0:	621a      	str	r2, [r3, #32]
}
    1ce2:	bd70      	pop	{r4, r5, r6, pc}
    1ce4:	40000800 	.word	0x40000800
    1ce8:	fffffcff 	.word	0xfffffcff

00001cec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1cec:	2808      	cmp	r0, #8
    1cee:	d843      	bhi.n	1d78 <system_clock_source_enable+0x8c>
    1cf0:	0080      	lsls	r0, r0, #2
    1cf2:	4b22      	ldr	r3, [pc, #136]	; (1d7c <system_clock_source_enable+0x90>)
    1cf4:	581b      	ldr	r3, [r3, r0]
    1cf6:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1cf8:	2000      	movs	r0, #0
    1cfa:	e03e      	b.n	1d7a <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1cfc:	4b20      	ldr	r3, [pc, #128]	; (1d80 <system_clock_source_enable+0x94>)
    1cfe:	6a19      	ldr	r1, [r3, #32]
    1d00:	2202      	movs	r2, #2
    1d02:	430a      	orrs	r2, r1
    1d04:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1d06:	2000      	movs	r0, #0
    1d08:	e037      	b.n	1d7a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d0a:	4b1d      	ldr	r3, [pc, #116]	; (1d80 <system_clock_source_enable+0x94>)
    1d0c:	6999      	ldr	r1, [r3, #24]
    1d0e:	2202      	movs	r2, #2
    1d10:	430a      	orrs	r2, r1
    1d12:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d14:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1d16:	e030      	b.n	1d7a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d18:	4b19      	ldr	r3, [pc, #100]	; (1d80 <system_clock_source_enable+0x94>)
    1d1a:	8a19      	ldrh	r1, [r3, #16]
    1d1c:	2202      	movs	r2, #2
    1d1e:	430a      	orrs	r2, r1
    1d20:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d22:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1d24:	e029      	b.n	1d7a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d26:	4b16      	ldr	r3, [pc, #88]	; (1d80 <system_clock_source_enable+0x94>)
    1d28:	8a99      	ldrh	r1, [r3, #20]
    1d2a:	2202      	movs	r2, #2
    1d2c:	430a      	orrs	r2, r1
    1d2e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d30:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1d32:	e022      	b.n	1d7a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d34:	4b13      	ldr	r3, [pc, #76]	; (1d84 <system_clock_source_enable+0x98>)
    1d36:	6819      	ldr	r1, [r3, #0]
    1d38:	2202      	movs	r2, #2
    1d3a:	430a      	orrs	r2, r1
    1d3c:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1d3e:	681a      	ldr	r2, [r3, #0]
    1d40:	4b11      	ldr	r3, [pc, #68]	; (1d88 <system_clock_source_enable+0x9c>)
    1d42:	401a      	ands	r2, r3
    1d44:	4b0e      	ldr	r3, [pc, #56]	; (1d80 <system_clock_source_enable+0x94>)
    1d46:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d48:	1c19      	adds	r1, r3, #0
    1d4a:	2210      	movs	r2, #16
    1d4c:	68cb      	ldr	r3, [r1, #12]
    1d4e:	421a      	tst	r2, r3
    1d50:	d0fc      	beq.n	1d4c <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d52:	4a0c      	ldr	r2, [pc, #48]	; (1d84 <system_clock_source_enable+0x98>)
    1d54:	6891      	ldr	r1, [r2, #8]
    1d56:	4b0a      	ldr	r3, [pc, #40]	; (1d80 <system_clock_source_enable+0x94>)
    1d58:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d5a:	6851      	ldr	r1, [r2, #4]
    1d5c:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d5e:	6812      	ldr	r2, [r2, #0]
    1d60:	b292      	uxth	r2, r2
    1d62:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d64:	2000      	movs	r0, #0
    1d66:	e008      	b.n	1d7a <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d68:	4a05      	ldr	r2, [pc, #20]	; (1d80 <system_clock_source_enable+0x94>)
    1d6a:	2344      	movs	r3, #68	; 0x44
    1d6c:	5cd0      	ldrb	r0, [r2, r3]
    1d6e:	2102      	movs	r1, #2
    1d70:	4301      	orrs	r1, r0
    1d72:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d74:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1d76:	e000      	b.n	1d7a <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d78:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1d7a:	4770      	bx	lr
    1d7c:	00007c18 	.word	0x00007c18
    1d80:	40000800 	.word	0x40000800
    1d84:	200000b4 	.word	0x200000b4
    1d88:	0000ff7f 	.word	0x0000ff7f

00001d8c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1d8c:	b530      	push	{r4, r5, lr}
    1d8e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1d90:	22c2      	movs	r2, #194	; 0xc2
    1d92:	00d2      	lsls	r2, r2, #3
    1d94:	4b19      	ldr	r3, [pc, #100]	; (1dfc <system_clock_init+0x70>)
    1d96:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1d98:	4b19      	ldr	r3, [pc, #100]	; (1e00 <system_clock_init+0x74>)
    1d9a:	685a      	ldr	r2, [r3, #4]
    1d9c:	211e      	movs	r1, #30
    1d9e:	438a      	bics	r2, r1
    1da0:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1da2:	2301      	movs	r3, #1
    1da4:	466a      	mov	r2, sp
    1da6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1da8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1daa:	4d16      	ldr	r5, [pc, #88]	; (1e04 <system_clock_init+0x78>)
    1dac:	b2e0      	uxtb	r0, r4
    1dae:	4669      	mov	r1, sp
    1db0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1db2:	3401      	adds	r4, #1
    1db4:	2c25      	cmp	r4, #37	; 0x25
    1db6:	d1f9      	bne.n	1dac <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1db8:	a803      	add	r0, sp, #12
    1dba:	2400      	movs	r4, #0
    1dbc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1dbe:	2501      	movs	r5, #1
    1dc0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1dc2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1dc4:	4b10      	ldr	r3, [pc, #64]	; (1e08 <system_clock_init+0x7c>)
    1dc6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1dc8:	2006      	movs	r0, #6
    1dca:	4b10      	ldr	r3, [pc, #64]	; (1e0c <system_clock_init+0x80>)
    1dcc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1dce:	4b10      	ldr	r3, [pc, #64]	; (1e10 <system_clock_init+0x84>)
    1dd0:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1dd2:	4b10      	ldr	r3, [pc, #64]	; (1e14 <system_clock_init+0x88>)
    1dd4:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1dd6:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1dd8:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1dda:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1ddc:	466b      	mov	r3, sp
    1dde:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1de0:	2306      	movs	r3, #6
    1de2:	466a      	mov	r2, sp
    1de4:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1de6:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1de8:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1dea:	2000      	movs	r0, #0
    1dec:	4669      	mov	r1, sp
    1dee:	4b0a      	ldr	r3, [pc, #40]	; (1e18 <system_clock_init+0x8c>)
    1df0:	4798      	blx	r3
    1df2:	2000      	movs	r0, #0
    1df4:	4b09      	ldr	r3, [pc, #36]	; (1e1c <system_clock_init+0x90>)
    1df6:	4798      	blx	r3
#endif
}
    1df8:	b005      	add	sp, #20
    1dfa:	bd30      	pop	{r4, r5, pc}
    1dfc:	40000800 	.word	0x40000800
    1e00:	41004000 	.word	0x41004000
    1e04:	00002055 	.word	0x00002055
    1e08:	00001cb1 	.word	0x00001cb1
    1e0c:	00001ced 	.word	0x00001ced
    1e10:	00001e21 	.word	0x00001e21
    1e14:	40000400 	.word	0x40000400
    1e18:	00001e45 	.word	0x00001e45
    1e1c:	00001ef9 	.word	0x00001ef9

00001e20 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1e20:	4b06      	ldr	r3, [pc, #24]	; (1e3c <system_gclk_init+0x1c>)
    1e22:	6999      	ldr	r1, [r3, #24]
    1e24:	2208      	movs	r2, #8
    1e26:	430a      	orrs	r2, r1
    1e28:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1e2a:	2201      	movs	r2, #1
    1e2c:	4b04      	ldr	r3, [pc, #16]	; (1e40 <system_gclk_init+0x20>)
    1e2e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1e30:	1c19      	adds	r1, r3, #0
    1e32:	780b      	ldrb	r3, [r1, #0]
    1e34:	4213      	tst	r3, r2
    1e36:	d1fc      	bne.n	1e32 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1e38:	4770      	bx	lr
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	40000400 	.word	0x40000400
    1e40:	40000c00 	.word	0x40000c00

00001e44 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e46:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1e48:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1e4a:	780d      	ldrb	r5, [r1, #0]
    1e4c:	022d      	lsls	r5, r5, #8
    1e4e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1e50:	784b      	ldrb	r3, [r1, #1]
    1e52:	2b00      	cmp	r3, #0
    1e54:	d002      	beq.n	1e5c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1e56:	2380      	movs	r3, #128	; 0x80
    1e58:	02db      	lsls	r3, r3, #11
    1e5a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1e5c:	7a4b      	ldrb	r3, [r1, #9]
    1e5e:	2b00      	cmp	r3, #0
    1e60:	d002      	beq.n	1e68 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1e62:	2380      	movs	r3, #128	; 0x80
    1e64:	031b      	lsls	r3, r3, #12
    1e66:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1e68:	684c      	ldr	r4, [r1, #4]
    1e6a:	2c01      	cmp	r4, #1
    1e6c:	d917      	bls.n	1e9e <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1e6e:	1e63      	subs	r3, r4, #1
    1e70:	421c      	tst	r4, r3
    1e72:	d10f      	bne.n	1e94 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1e74:	2c02      	cmp	r4, #2
    1e76:	d906      	bls.n	1e86 <system_gclk_gen_set_config+0x42>
    1e78:	2302      	movs	r3, #2
    1e7a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1e7c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1e7e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1e80:	429c      	cmp	r4, r3
    1e82:	d8fb      	bhi.n	1e7c <system_gclk_gen_set_config+0x38>
    1e84:	e000      	b.n	1e88 <system_gclk_gen_set_config+0x44>
    1e86:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1e88:	0217      	lsls	r7, r2, #8
    1e8a:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1e8c:	2380      	movs	r3, #128	; 0x80
    1e8e:	035b      	lsls	r3, r3, #13
    1e90:	431d      	orrs	r5, r3
    1e92:	e004      	b.n	1e9e <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1e94:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1e96:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1e98:	2380      	movs	r3, #128	; 0x80
    1e9a:	029b      	lsls	r3, r3, #10
    1e9c:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1e9e:	7a0b      	ldrb	r3, [r1, #8]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d002      	beq.n	1eaa <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ea4:	2380      	movs	r3, #128	; 0x80
    1ea6:	039b      	lsls	r3, r3, #14
    1ea8:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1eaa:	4a0f      	ldr	r2, [pc, #60]	; (1ee8 <system_gclk_gen_set_config+0xa4>)
    1eac:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1eae:	b25b      	sxtb	r3, r3
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	dbfb      	blt.n	1eac <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1eb4:	4b0d      	ldr	r3, [pc, #52]	; (1eec <system_gclk_gen_set_config+0xa8>)
    1eb6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1eb8:	4b0d      	ldr	r3, [pc, #52]	; (1ef0 <system_gclk_gen_set_config+0xac>)
    1eba:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ebc:	4a0a      	ldr	r2, [pc, #40]	; (1ee8 <system_gclk_gen_set_config+0xa4>)
    1ebe:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1ec0:	b25b      	sxtb	r3, r3
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	dbfb      	blt.n	1ebe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ec6:	4b08      	ldr	r3, [pc, #32]	; (1ee8 <system_gclk_gen_set_config+0xa4>)
    1ec8:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1eca:	1c1a      	adds	r2, r3, #0
    1ecc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1ece:	b25b      	sxtb	r3, r3
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	dbfb      	blt.n	1ecc <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ed4:	4b04      	ldr	r3, [pc, #16]	; (1ee8 <system_gclk_gen_set_config+0xa4>)
    1ed6:	6859      	ldr	r1, [r3, #4]
    1ed8:	2280      	movs	r2, #128	; 0x80
    1eda:	0252      	lsls	r2, r2, #9
    1edc:	400a      	ands	r2, r1
    1ede:	4315      	orrs	r5, r2
    1ee0:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ee2:	4b04      	ldr	r3, [pc, #16]	; (1ef4 <system_gclk_gen_set_config+0xb0>)
    1ee4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ee8:	40000c00 	.word	0x40000c00
    1eec:	0000167d 	.word	0x0000167d
    1ef0:	40000c08 	.word	0x40000c08
    1ef4:	000016bd 	.word	0x000016bd

00001ef8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ef8:	b510      	push	{r4, lr}
    1efa:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1efc:	4a0b      	ldr	r2, [pc, #44]	; (1f2c <system_gclk_gen_enable+0x34>)
    1efe:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1f00:	b25b      	sxtb	r3, r3
    1f02:	2b00      	cmp	r3, #0
    1f04:	dbfb      	blt.n	1efe <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1f06:	4b0a      	ldr	r3, [pc, #40]	; (1f30 <system_gclk_gen_enable+0x38>)
    1f08:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f0a:	4b0a      	ldr	r3, [pc, #40]	; (1f34 <system_gclk_gen_enable+0x3c>)
    1f0c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f0e:	4a07      	ldr	r2, [pc, #28]	; (1f2c <system_gclk_gen_enable+0x34>)
    1f10:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1f12:	b25b      	sxtb	r3, r3
    1f14:	2b00      	cmp	r3, #0
    1f16:	dbfb      	blt.n	1f10 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1f18:	4b04      	ldr	r3, [pc, #16]	; (1f2c <system_gclk_gen_enable+0x34>)
    1f1a:	6859      	ldr	r1, [r3, #4]
    1f1c:	2280      	movs	r2, #128	; 0x80
    1f1e:	0252      	lsls	r2, r2, #9
    1f20:	430a      	orrs	r2, r1
    1f22:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f24:	4b04      	ldr	r3, [pc, #16]	; (1f38 <system_gclk_gen_enable+0x40>)
    1f26:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f28:	bd10      	pop	{r4, pc}
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	40000c00 	.word	0x40000c00
    1f30:	0000167d 	.word	0x0000167d
    1f34:	40000c04 	.word	0x40000c04
    1f38:	000016bd 	.word	0x000016bd

00001f3c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1f3c:	b570      	push	{r4, r5, r6, lr}
    1f3e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f40:	4a1a      	ldr	r2, [pc, #104]	; (1fac <system_gclk_gen_get_hz+0x70>)
    1f42:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1f44:	b25b      	sxtb	r3, r3
    1f46:	2b00      	cmp	r3, #0
    1f48:	dbfb      	blt.n	1f42 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1f4a:	4b19      	ldr	r3, [pc, #100]	; (1fb0 <system_gclk_gen_get_hz+0x74>)
    1f4c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f4e:	4b19      	ldr	r3, [pc, #100]	; (1fb4 <system_gclk_gen_get_hz+0x78>)
    1f50:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f52:	4a16      	ldr	r2, [pc, #88]	; (1fac <system_gclk_gen_get_hz+0x70>)
    1f54:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1f56:	b25b      	sxtb	r3, r3
    1f58:	2b00      	cmp	r3, #0
    1f5a:	dbfb      	blt.n	1f54 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1f5c:	4e13      	ldr	r6, [pc, #76]	; (1fac <system_gclk_gen_get_hz+0x70>)
    1f5e:	6870      	ldr	r0, [r6, #4]
    1f60:	04c0      	lsls	r0, r0, #19
    1f62:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1f64:	4b14      	ldr	r3, [pc, #80]	; (1fb8 <system_gclk_gen_get_hz+0x7c>)
    1f66:	4798      	blx	r3
    1f68:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f6a:	4b12      	ldr	r3, [pc, #72]	; (1fb4 <system_gclk_gen_get_hz+0x78>)
    1f6c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1f6e:	6876      	ldr	r6, [r6, #4]
    1f70:	02f6      	lsls	r6, r6, #11
    1f72:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1f74:	4b11      	ldr	r3, [pc, #68]	; (1fbc <system_gclk_gen_get_hz+0x80>)
    1f76:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f78:	4a0c      	ldr	r2, [pc, #48]	; (1fac <system_gclk_gen_get_hz+0x70>)
    1f7a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1f7c:	b25b      	sxtb	r3, r3
    1f7e:	2b00      	cmp	r3, #0
    1f80:	dbfb      	blt.n	1f7a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1f82:	4b0a      	ldr	r3, [pc, #40]	; (1fac <system_gclk_gen_get_hz+0x70>)
    1f84:	689c      	ldr	r4, [r3, #8]
    1f86:	0a24      	lsrs	r4, r4, #8
    1f88:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f8a:	4b0d      	ldr	r3, [pc, #52]	; (1fc0 <system_gclk_gen_get_hz+0x84>)
    1f8c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1f8e:	2e00      	cmp	r6, #0
    1f90:	d107      	bne.n	1fa2 <system_gclk_gen_get_hz+0x66>
    1f92:	2c01      	cmp	r4, #1
    1f94:	d907      	bls.n	1fa6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1f96:	1c28      	adds	r0, r5, #0
    1f98:	1c21      	adds	r1, r4, #0
    1f9a:	4b0a      	ldr	r3, [pc, #40]	; (1fc4 <system_gclk_gen_get_hz+0x88>)
    1f9c:	4798      	blx	r3
    1f9e:	1c05      	adds	r5, r0, #0
    1fa0:	e001      	b.n	1fa6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1fa2:	3401      	adds	r4, #1
    1fa4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1fa6:	1c28      	adds	r0, r5, #0
    1fa8:	bd70      	pop	{r4, r5, r6, pc}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	40000c00 	.word	0x40000c00
    1fb0:	0000167d 	.word	0x0000167d
    1fb4:	40000c04 	.word	0x40000c04
    1fb8:	00001c21 	.word	0x00001c21
    1fbc:	40000c08 	.word	0x40000c08
    1fc0:	000016bd 	.word	0x000016bd
    1fc4:	00004c85 	.word	0x00004c85

00001fc8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1fc8:	b510      	push	{r4, lr}
    1fca:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1fcc:	4b06      	ldr	r3, [pc, #24]	; (1fe8 <system_gclk_chan_enable+0x20>)
    1fce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1fd0:	4b06      	ldr	r3, [pc, #24]	; (1fec <system_gclk_chan_enable+0x24>)
    1fd2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1fd4:	4b06      	ldr	r3, [pc, #24]	; (1ff0 <system_gclk_chan_enable+0x28>)
    1fd6:	8859      	ldrh	r1, [r3, #2]
    1fd8:	2280      	movs	r2, #128	; 0x80
    1fda:	01d2      	lsls	r2, r2, #7
    1fdc:	430a      	orrs	r2, r1
    1fde:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1fe0:	4b04      	ldr	r3, [pc, #16]	; (1ff4 <system_gclk_chan_enable+0x2c>)
    1fe2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fe4:	bd10      	pop	{r4, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	0000167d 	.word	0x0000167d
    1fec:	40000c02 	.word	0x40000c02
    1ff0:	40000c00 	.word	0x40000c00
    1ff4:	000016bd 	.word	0x000016bd

00001ff8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ff8:	b510      	push	{r4, lr}
    1ffa:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ffc:	4b0f      	ldr	r3, [pc, #60]	; (203c <STACK_SIZE+0x3c>)
    1ffe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2000:	4b0f      	ldr	r3, [pc, #60]	; (2040 <STACK_SIZE+0x40>)
    2002:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2004:	4b0f      	ldr	r3, [pc, #60]	; (2044 <STACK_SIZE+0x44>)
    2006:	8858      	ldrh	r0, [r3, #2]
    2008:	0500      	lsls	r0, r0, #20
    200a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    200c:	8859      	ldrh	r1, [r3, #2]
    200e:	4a0e      	ldr	r2, [pc, #56]	; (2048 <STACK_SIZE+0x48>)
    2010:	400a      	ands	r2, r1
    2012:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2014:	8859      	ldrh	r1, [r3, #2]
    2016:	4a0d      	ldr	r2, [pc, #52]	; (204c <STACK_SIZE+0x4c>)
    2018:	400a      	ands	r2, r1
    201a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    201c:	1c19      	adds	r1, r3, #0
    201e:	2280      	movs	r2, #128	; 0x80
    2020:	01d2      	lsls	r2, r2, #7
    2022:	884b      	ldrh	r3, [r1, #2]
    2024:	4213      	tst	r3, r2
    2026:	d1fc      	bne.n	2022 <STACK_SIZE+0x22>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2028:	4b06      	ldr	r3, [pc, #24]	; (2044 <STACK_SIZE+0x44>)
    202a:	0201      	lsls	r1, r0, #8
    202c:	8858      	ldrh	r0, [r3, #2]
    202e:	4a06      	ldr	r2, [pc, #24]	; (2048 <STACK_SIZE+0x48>)
    2030:	4002      	ands	r2, r0
    2032:	430a      	orrs	r2, r1
    2034:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2036:	4b06      	ldr	r3, [pc, #24]	; (2050 <STACK_SIZE+0x50>)
    2038:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    203a:	bd10      	pop	{r4, pc}
    203c:	0000167d 	.word	0x0000167d
    2040:	40000c02 	.word	0x40000c02
    2044:	40000c00 	.word	0x40000c00
    2048:	fffff0ff 	.word	0xfffff0ff
    204c:	ffffbfff 	.word	0xffffbfff
    2050:	000016bd 	.word	0x000016bd

00002054 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2054:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2056:	780c      	ldrb	r4, [r1, #0]
    2058:	0224      	lsls	r4, r4, #8
    205a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    205c:	4b02      	ldr	r3, [pc, #8]	; (2068 <system_gclk_chan_set_config+0x14>)
    205e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2060:	b2a4      	uxth	r4, r4
    2062:	4b02      	ldr	r3, [pc, #8]	; (206c <system_gclk_chan_set_config+0x18>)
    2064:	805c      	strh	r4, [r3, #2]
}
    2066:	bd10      	pop	{r4, pc}
    2068:	00001ff9 	.word	0x00001ff9
    206c:	40000c00 	.word	0x40000c00

00002070 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2070:	b510      	push	{r4, lr}
    2072:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2074:	4b06      	ldr	r3, [pc, #24]	; (2090 <system_gclk_chan_get_hz+0x20>)
    2076:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2078:	4b06      	ldr	r3, [pc, #24]	; (2094 <system_gclk_chan_get_hz+0x24>)
    207a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    207c:	4b06      	ldr	r3, [pc, #24]	; (2098 <system_gclk_chan_get_hz+0x28>)
    207e:	885c      	ldrh	r4, [r3, #2]
    2080:	0524      	lsls	r4, r4, #20
    2082:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2084:	4b05      	ldr	r3, [pc, #20]	; (209c <system_gclk_chan_get_hz+0x2c>)
    2086:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2088:	1c20      	adds	r0, r4, #0
    208a:	4b05      	ldr	r3, [pc, #20]	; (20a0 <system_gclk_chan_get_hz+0x30>)
    208c:	4798      	blx	r3
}
    208e:	bd10      	pop	{r4, pc}
    2090:	0000167d 	.word	0x0000167d
    2094:	40000c02 	.word	0x40000c02
    2098:	40000c00 	.word	0x40000c00
    209c:	000016bd 	.word	0x000016bd
    20a0:	00001f3d 	.word	0x00001f3d

000020a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    20a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    20a6:	78d3      	ldrb	r3, [r2, #3]
    20a8:	2b00      	cmp	r3, #0
    20aa:	d11e      	bne.n	20ea <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    20ac:	7813      	ldrb	r3, [r2, #0]
    20ae:	2b80      	cmp	r3, #128	; 0x80
    20b0:	d004      	beq.n	20bc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    20b2:	061b      	lsls	r3, r3, #24
    20b4:	2480      	movs	r4, #128	; 0x80
    20b6:	0264      	lsls	r4, r4, #9
    20b8:	4323      	orrs	r3, r4
    20ba:	e000      	b.n	20be <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    20bc:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    20be:	7854      	ldrb	r4, [r2, #1]
    20c0:	2502      	movs	r5, #2
    20c2:	43ac      	bics	r4, r5
    20c4:	d10a      	bne.n	20dc <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    20c6:	7894      	ldrb	r4, [r2, #2]
    20c8:	2c00      	cmp	r4, #0
    20ca:	d103      	bne.n	20d4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    20cc:	2480      	movs	r4, #128	; 0x80
    20ce:	02a4      	lsls	r4, r4, #10
    20d0:	4323      	orrs	r3, r4
    20d2:	e002      	b.n	20da <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    20d4:	24c0      	movs	r4, #192	; 0xc0
    20d6:	02e4      	lsls	r4, r4, #11
    20d8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    20da:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    20dc:	7854      	ldrb	r4, [r2, #1]
    20de:	3c01      	subs	r4, #1
    20e0:	2c01      	cmp	r4, #1
    20e2:	d804      	bhi.n	20ee <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    20e4:	4c11      	ldr	r4, [pc, #68]	; (212c <_system_pinmux_config+0x88>)
    20e6:	4023      	ands	r3, r4
    20e8:	e001      	b.n	20ee <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    20ea:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    20ec:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    20ee:	040d      	lsls	r5, r1, #16
    20f0:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20f2:	24a0      	movs	r4, #160	; 0xa0
    20f4:	05e4      	lsls	r4, r4, #23
    20f6:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    20f8:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20fa:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    20fc:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20fe:	24d0      	movs	r4, #208	; 0xd0
    2100:	0624      	lsls	r4, r4, #24
    2102:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2104:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2106:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2108:	78d4      	ldrb	r4, [r2, #3]
    210a:	2c00      	cmp	r4, #0
    210c:	d10c      	bne.n	2128 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    210e:	035c      	lsls	r4, r3, #13
    2110:	d505      	bpl.n	211e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2112:	7893      	ldrb	r3, [r2, #2]
    2114:	2b01      	cmp	r3, #1
    2116:	d101      	bne.n	211c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    2118:	6181      	str	r1, [r0, #24]
    211a:	e000      	b.n	211e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    211c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    211e:	7853      	ldrb	r3, [r2, #1]
    2120:	3b01      	subs	r3, #1
    2122:	2b01      	cmp	r3, #1
    2124:	d800      	bhi.n	2128 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2126:	6081      	str	r1, [r0, #8]
		}
	}
}
    2128:	bd30      	pop	{r4, r5, pc}
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	fffbffff 	.word	0xfffbffff

00002130 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2130:	b508      	push	{r3, lr}
    2132:	1c03      	adds	r3, r0, #0
    2134:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2136:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2138:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    213a:	2900      	cmp	r1, #0
    213c:	d103      	bne.n	2146 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    213e:	0958      	lsrs	r0, r3, #5
    2140:	01c0      	lsls	r0, r0, #7
    2142:	4904      	ldr	r1, [pc, #16]	; (2154 <system_pinmux_pin_set_config+0x24>)
    2144:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2146:	211f      	movs	r1, #31
    2148:	400b      	ands	r3, r1
    214a:	2101      	movs	r1, #1
    214c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    214e:	4b02      	ldr	r3, [pc, #8]	; (2158 <system_pinmux_pin_set_config+0x28>)
    2150:	4798      	blx	r3
}
    2152:	bd08      	pop	{r3, pc}
    2154:	41004400 	.word	0x41004400
    2158:	000020a5 	.word	0x000020a5

0000215c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    215c:	4770      	bx	lr
    215e:	46c0      	nop			; (mov r8, r8)

00002160 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2160:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2162:	4b04      	ldr	r3, [pc, #16]	; (2174 <system_init+0x14>)
    2164:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2166:	4b04      	ldr	r3, [pc, #16]	; (2178 <system_init+0x18>)
    2168:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    216a:	4b04      	ldr	r3, [pc, #16]	; (217c <system_init+0x1c>)
    216c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    216e:	4b04      	ldr	r3, [pc, #16]	; (2180 <system_init+0x20>)
    2170:	4798      	blx	r3
}
    2172:	bd08      	pop	{r3, pc}
    2174:	00001d8d 	.word	0x00001d8d
    2178:	000016ed 	.word	0x000016ed
    217c:	0000215d 	.word	0x0000215d
    2180:	0000020d 	.word	0x0000020d

00002184 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2184:	e7fe      	b.n	2184 <Dummy_Handler>
    2186:	46c0      	nop			; (mov r8, r8)

00002188 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2188:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    218a:	4b1c      	ldr	r3, [pc, #112]	; (21fc <Reset_Handler+0x74>)
    218c:	4a1c      	ldr	r2, [pc, #112]	; (2200 <Reset_Handler+0x78>)
    218e:	429a      	cmp	r2, r3
    2190:	d003      	beq.n	219a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    2192:	4b1c      	ldr	r3, [pc, #112]	; (2204 <Reset_Handler+0x7c>)
    2194:	4a19      	ldr	r2, [pc, #100]	; (21fc <Reset_Handler+0x74>)
    2196:	429a      	cmp	r2, r3
    2198:	d304      	bcc.n	21a4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    219a:	4b1b      	ldr	r3, [pc, #108]	; (2208 <Reset_Handler+0x80>)
    219c:	4a1b      	ldr	r2, [pc, #108]	; (220c <Reset_Handler+0x84>)
    219e:	429a      	cmp	r2, r3
    21a0:	d310      	bcc.n	21c4 <Reset_Handler+0x3c>
    21a2:	e01b      	b.n	21dc <Reset_Handler+0x54>
    21a4:	4b1a      	ldr	r3, [pc, #104]	; (2210 <Reset_Handler+0x88>)
    21a6:	4817      	ldr	r0, [pc, #92]	; (2204 <Reset_Handler+0x7c>)
    21a8:	3003      	adds	r0, #3
    21aa:	1ac0      	subs	r0, r0, r3
    21ac:	0880      	lsrs	r0, r0, #2
    21ae:	3001      	adds	r0, #1
    21b0:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    21b2:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    21b4:	4911      	ldr	r1, [pc, #68]	; (21fc <Reset_Handler+0x74>)
    21b6:	4a12      	ldr	r2, [pc, #72]	; (2200 <Reset_Handler+0x78>)
    21b8:	58d4      	ldr	r4, [r2, r3]
    21ba:	50cc      	str	r4, [r1, r3]
    21bc:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    21be:	4283      	cmp	r3, r0
    21c0:	d1fa      	bne.n	21b8 <Reset_Handler+0x30>
    21c2:	e7ea      	b.n	219a <Reset_Handler+0x12>
    21c4:	4b11      	ldr	r3, [pc, #68]	; (220c <Reset_Handler+0x84>)
    21c6:	1d1a      	adds	r2, r3, #4
    21c8:	490f      	ldr	r1, [pc, #60]	; (2208 <Reset_Handler+0x80>)
    21ca:	3103      	adds	r1, #3
    21cc:	1a89      	subs	r1, r1, r2
    21ce:	0889      	lsrs	r1, r1, #2
    21d0:	0089      	lsls	r1, r1, #2
    21d2:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    21d4:	2100      	movs	r1, #0
    21d6:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    21d8:	4293      	cmp	r3, r2
    21da:	d1fc      	bne.n	21d6 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    21dc:	4b0d      	ldr	r3, [pc, #52]	; (2214 <Reset_Handler+0x8c>)
    21de:	217f      	movs	r1, #127	; 0x7f
    21e0:	4a0d      	ldr	r2, [pc, #52]	; (2218 <Reset_Handler+0x90>)
    21e2:	438a      	bics	r2, r1
    21e4:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    21e6:	4b0d      	ldr	r3, [pc, #52]	; (221c <Reset_Handler+0x94>)
    21e8:	6859      	ldr	r1, [r3, #4]
    21ea:	2280      	movs	r2, #128	; 0x80
    21ec:	430a      	orrs	r2, r1
    21ee:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    21f0:	4b0b      	ldr	r3, [pc, #44]	; (2220 <Reset_Handler+0x98>)
    21f2:	4798      	blx	r3

        /* Branch to main function */
        main();
    21f4:	4b0b      	ldr	r3, [pc, #44]	; (2224 <Reset_Handler+0x9c>)
    21f6:	4798      	blx	r3
    21f8:	e7fe      	b.n	21f8 <Reset_Handler+0x70>
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	20000000 	.word	0x20000000
    2200:	00007dfc 	.word	0x00007dfc
    2204:	20000070 	.word	0x20000070
    2208:	20000a1c 	.word	0x20000a1c
    220c:	20000070 	.word	0x20000070
    2210:	20000004 	.word	0x20000004
    2214:	e000ed00 	.word	0xe000ed00
    2218:	00000000 	.word	0x00000000
    221c:	41004000 	.word	0x41004000
    2220:	00006aad 	.word	0x00006aad
    2224:	000049e9 	.word	0x000049e9

00002228 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2228:	4b06      	ldr	r3, [pc, #24]	; (2244 <_sbrk+0x1c>)
    222a:	681b      	ldr	r3, [r3, #0]
    222c:	2b00      	cmp	r3, #0
    222e:	d102      	bne.n	2236 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    2230:	4a05      	ldr	r2, [pc, #20]	; (2248 <_sbrk+0x20>)
    2232:	4b04      	ldr	r3, [pc, #16]	; (2244 <_sbrk+0x1c>)
    2234:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2236:	4a03      	ldr	r2, [pc, #12]	; (2244 <_sbrk+0x1c>)
    2238:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    223a:	1818      	adds	r0, r3, r0
    223c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    223e:	1c18      	adds	r0, r3, #0
    2240:	4770      	bx	lr
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	200000cc 	.word	0x200000cc
    2248:	20002a20 	.word	0x20002a20

0000224c <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    224c:	2001      	movs	r0, #1
}
    224e:	4240      	negs	r0, r0
    2250:	4770      	bx	lr
    2252:	46c0      	nop			; (mov r8, r8)

00002254 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2254:	2380      	movs	r3, #128	; 0x80
    2256:	019b      	lsls	r3, r3, #6
    2258:	604b      	str	r3, [r1, #4]

	return 0;
}
    225a:	2000      	movs	r0, #0
    225c:	4770      	bx	lr
    225e:	46c0      	nop			; (mov r8, r8)

00002260 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2260:	2001      	movs	r0, #1
    2262:	4770      	bx	lr

00002264 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2264:	2000      	movs	r0, #0
    2266:	4770      	bx	lr

00002268 <NWK_Init>:

/*************************************************************************//**
*  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
    2268:	b508      	push	{r3, lr}
	nwkIb.nwkSeqNum = 0;
    226a:	490d      	ldr	r1, [pc, #52]	; (22a0 <NWK_Init+0x38>)
    226c:	2300      	movs	r3, #0
    226e:	710b      	strb	r3, [r1, #4]
	nwkIb.macSeqNum = 0;
    2270:	714b      	strb	r3, [r1, #5]
	nwkIb.addr = 0;
    2272:	800b      	strh	r3, [r1, #0]
	nwkIb.lock = 0;
    2274:	2258      	movs	r2, #88	; 0x58
    2276:	528b      	strh	r3, [r1, r2]
    2278:	1c0b      	adds	r3, r1, #0
    227a:	3308      	adds	r3, #8
    227c:	3148      	adds	r1, #72	; 0x48

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
		nwkIb.endpoint[i] = NULL;
    227e:	2200      	movs	r2, #0
    2280:	c304      	stmia	r3!, {r2}
	nwkIb.nwkSeqNum = 0;
	nwkIb.macSeqNum = 0;
	nwkIb.addr = 0;
	nwkIb.lock = 0;

	for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++) {
    2282:	428b      	cmp	r3, r1
    2284:	d1fc      	bne.n	2280 <NWK_Init+0x18>
		nwkIb.endpoint[i] = NULL;
	}

	nwkTxInit();
    2286:	4b07      	ldr	r3, [pc, #28]	; (22a4 <NWK_Init+0x3c>)
    2288:	4798      	blx	r3
	nwkRxInit();
    228a:	4b07      	ldr	r3, [pc, #28]	; (22a8 <NWK_Init+0x40>)
    228c:	4798      	blx	r3
	nwkFrameInit();
    228e:	4b07      	ldr	r3, [pc, #28]	; (22ac <NWK_Init+0x44>)
    2290:	4798      	blx	r3
	nwkDataReqInit();
    2292:	4b07      	ldr	r3, [pc, #28]	; (22b0 <NWK_Init+0x48>)
    2294:	4798      	blx	r3

#ifdef NWK_ENABLE_ROUTING
	nwkRouteInit();
    2296:	4b07      	ldr	r3, [pc, #28]	; (22b4 <NWK_Init+0x4c>)
    2298:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_SECURITY
	nwkSecurityInit();
    229a:	4b07      	ldr	r3, [pc, #28]	; (22b8 <NWK_Init+0x50>)
    229c:	4798      	blx	r3
#endif

#ifdef NWK_ENABLE_ROUTE_DISCOVERY
	nwkRouteDiscoveryInit();
#endif
}
    229e:	bd08      	pop	{r3, pc}
    22a0:	200008dc 	.word	0x200008dc
    22a4:	00003145 	.word	0x00003145
    22a8:	000029b1 	.word	0x000029b1
    22ac:	000024dd 	.word	0x000024dd
    22b0:	00002359 	.word	0x00002359
    22b4:	000025d1 	.word	0x000025d1
    22b8:	00002e11 	.word	0x00002e11

000022bc <NWK_SetAddr>:
/*************************************************************************//**
*  @brief Sets network address of the node
*  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
    22bc:	b508      	push	{r3, lr}
	nwkIb.addr = addr;
    22be:	4b02      	ldr	r3, [pc, #8]	; (22c8 <NWK_SetAddr+0xc>)
    22c0:	8018      	strh	r0, [r3, #0]
	PHY_SetShortAddr(addr);
    22c2:	4b02      	ldr	r3, [pc, #8]	; (22cc <NWK_SetAddr+0x10>)
    22c4:	4798      	blx	r3
}
    22c6:	bd08      	pop	{r3, pc}
    22c8:	200008dc 	.word	0x200008dc
    22cc:	0000356d 	.word	0x0000356d

000022d0 <NWK_SetPanId>:
/*************************************************************************//**
*  @brief Sets network identifier (PAN) of the node
*  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
    22d0:	b508      	push	{r3, lr}
	nwkIb.panId = panId;
    22d2:	4b02      	ldr	r3, [pc, #8]	; (22dc <NWK_SetPanId+0xc>)
    22d4:	8058      	strh	r0, [r3, #2]
	PHY_SetPanId(panId);
    22d6:	4b02      	ldr	r3, [pc, #8]	; (22e0 <NWK_SetPanId+0x10>)
    22d8:	4798      	blx	r3
}
    22da:	bd08      	pop	{r3, pc}
    22dc:	200008dc 	.word	0x200008dc
    22e0:	0000354d 	.word	0x0000354d

000022e4 <NWK_OpenEndpoint>:
*  @param[in] id Endpoint index (1-15)
*  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
	nwkIb.endpoint[id] = handler;
    22e4:	3002      	adds	r0, #2
    22e6:	0080      	lsls	r0, r0, #2
    22e8:	4b01      	ldr	r3, [pc, #4]	; (22f0 <NWK_OpenEndpoint+0xc>)
    22ea:	50c1      	str	r1, [r0, r3]
}
    22ec:	4770      	bx	lr
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	200008dc 	.word	0x200008dc

000022f4 <NWK_TaskHandler>:

/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
    22f4:	b508      	push	{r3, lr}
	nwkRxTaskHandler();
    22f6:	4b04      	ldr	r3, [pc, #16]	; (2308 <NWK_TaskHandler+0x14>)
    22f8:	4798      	blx	r3
	nwkTxTaskHandler();
    22fa:	4b04      	ldr	r3, [pc, #16]	; (230c <NWK_TaskHandler+0x18>)
    22fc:	4798      	blx	r3
	nwkDataReqTaskHandler();
    22fe:	4b04      	ldr	r3, [pc, #16]	; (2310 <NWK_TaskHandler+0x1c>)
    2300:	4798      	blx	r3
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    2302:	4b04      	ldr	r3, [pc, #16]	; (2314 <NWK_TaskHandler+0x20>)
    2304:	4798      	blx	r3
#endif
}
    2306:	bd08      	pop	{r3, pc}
    2308:	00002a4d 	.word	0x00002a4d
    230c:	00003349 	.word	0x00003349
    2310:	00002399 	.word	0x00002399
    2314:	00002f05 	.word	0x00002f05

00002318 <nwkDataReqTxConf>:
/*************************************************************************//**
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
    2318:	b508      	push	{r3, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    231a:	4b0d      	ldr	r3, [pc, #52]	; (2350 <nwkDataReqTxConf+0x38>)
    231c:	681b      	ldr	r3, [r3, #0]
    231e:	2b00      	cmp	r3, #0
    2320:	d012      	beq.n	2348 <nwkDataReqTxConf+0x30>
		if (req->frame == frame) {
    2322:	685a      	ldr	r2, [r3, #4]
    2324:	4282      	cmp	r2, r0
    2326:	d10c      	bne.n	2342 <nwkDataReqTxConf+0x2a>
    2328:	e002      	b.n	2330 <nwkDataReqTxConf+0x18>
    232a:	685a      	ldr	r2, [r3, #4]
    232c:	4282      	cmp	r2, r0
    232e:	d108      	bne.n	2342 <nwkDataReqTxConf+0x2a>
			req->status = frame->tx.status;
    2330:	2285      	movs	r2, #133	; 0x85
    2332:	5c82      	ldrb	r2, [r0, r2]
    2334:	771a      	strb	r2, [r3, #28]
			req->control = frame->tx.control;
    2336:	2288      	movs	r2, #136	; 0x88
    2338:	5c82      	ldrb	r2, [r0, r2]
    233a:	775a      	strb	r2, [r3, #29]
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    233c:	2202      	movs	r2, #2
    233e:	721a      	strb	r2, [r3, #8]
			break;
    2340:	e002      	b.n	2348 <nwkDataReqTxConf+0x30>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    2342:	681b      	ldr	r3, [r3, #0]
    2344:	2b00      	cmp	r3, #0
    2346:	d1f0      	bne.n	232a <nwkDataReqTxConf+0x12>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    2348:	4b02      	ldr	r3, [pc, #8]	; (2354 <nwkDataReqTxConf+0x3c>)
    234a:	4798      	blx	r3
}
    234c:	bd08      	pop	{r3, pc}
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	200000d0 	.word	0x200000d0
    2354:	00002561 	.word	0x00002561

00002358 <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    2358:	2200      	movs	r2, #0
    235a:	4b01      	ldr	r3, [pc, #4]	; (2360 <nwkDataReqInit+0x8>)
    235c:	601a      	str	r2, [r3, #0]
}
    235e:	4770      	bx	lr
    2360:	200000d0 	.word	0x200000d0

00002364 <NWK_DataReq>:
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    2364:	2300      	movs	r3, #0
    2366:	7203      	strb	r3, [r0, #8]
	req->status = NWK_SUCCESS_STATUS;
    2368:	7703      	strb	r3, [r0, #28]
	req->frame = NULL;
    236a:	6043      	str	r3, [r0, #4]

	nwkIb.lock++;
    236c:	4a08      	ldr	r2, [pc, #32]	; (2390 <NWK_DataReq+0x2c>)
    236e:	2358      	movs	r3, #88	; 0x58
    2370:	5ad1      	ldrh	r1, [r2, r3]
    2372:	3101      	adds	r1, #1
    2374:	52d1      	strh	r1, [r2, r3]

	if (NULL == nwkDataReqQueue) {
    2376:	4b07      	ldr	r3, [pc, #28]	; (2394 <NWK_DataReq+0x30>)
    2378:	681b      	ldr	r3, [r3, #0]
    237a:	2b00      	cmp	r3, #0
    237c:	d103      	bne.n	2386 <NWK_DataReq+0x22>
		req->next = NULL;
    237e:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2380:	4b04      	ldr	r3, [pc, #16]	; (2394 <NWK_DataReq+0x30>)
    2382:	6018      	str	r0, [r3, #0]
    2384:	e002      	b.n	238c <NWK_DataReq+0x28>
	} else {
		req->next = nwkDataReqQueue;
    2386:	6003      	str	r3, [r0, #0]
		nwkDataReqQueue = req;
    2388:	4b02      	ldr	r3, [pc, #8]	; (2394 <NWK_DataReq+0x30>)
    238a:	6018      	str	r0, [r3, #0]
	}
}
    238c:	4770      	bx	lr
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	200008dc 	.word	0x200008dc
    2394:	200000d0 	.word	0x200000d0

00002398 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    2398:	b538      	push	{r3, r4, r5, lr}
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    239a:	4b4a      	ldr	r3, [pc, #296]	; (24c4 <nwkDataReqTaskHandler+0x12c>)
    239c:	681a      	ldr	r2, [r3, #0]
    239e:	2a00      	cmp	r2, #0
    23a0:	d100      	bne.n	23a4 <nwkDataReqTaskHandler+0xc>
    23a2:	e08d      	b.n	24c0 <nwkDataReqTaskHandler+0x128>
    23a4:	1c14      	adds	r4, r2, #0
		switch (req->state) {
    23a6:	7a23      	ldrb	r3, [r4, #8]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d002      	beq.n	23b2 <nwkDataReqTaskHandler+0x1a>
    23ac:	2b02      	cmp	r3, #2
    23ae:	d06d      	beq.n	248c <nwkDataReqTaskHandler+0xf4>
    23b0:	e082      	b.n	24b8 <nwkDataReqTaskHandler+0x120>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    23b2:	4b45      	ldr	r3, [pc, #276]	; (24c8 <nwkDataReqTaskHandler+0x130>)
    23b4:	4798      	blx	r3
    23b6:	1e05      	subs	r5, r0, #0
    23b8:	d103      	bne.n	23c2 <nwkDataReqTaskHandler+0x2a>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    23ba:	2302      	movs	r3, #2
    23bc:	7223      	strb	r3, [r4, #8]
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    23be:	7723      	strb	r3, [r4, #28]
    23c0:	e07e      	b.n	24c0 <nwkDataReqTaskHandler+0x128>
		return;
	}

	req->frame = frame;
    23c2:	6060      	str	r0, [r4, #4]
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    23c4:	2201      	movs	r2, #1
    23c6:	7222      	strb	r2, [r4, #8]

	frame->tx.confirm = nwkDataReqTxConf;
    23c8:	4b40      	ldr	r3, [pc, #256]	; (24cc <nwkDataReqTaskHandler+0x134>)
    23ca:	2189      	movs	r1, #137	; 0x89
    23cc:	5443      	strb	r3, [r0, r1]
    23ce:	0a18      	lsrs	r0, r3, #8
    23d0:	218a      	movs	r1, #138	; 0x8a
    23d2:	5468      	strb	r0, [r5, r1]
    23d4:	0c18      	lsrs	r0, r3, #16
    23d6:	218b      	movs	r1, #139	; 0x8b
    23d8:	5468      	strb	r0, [r5, r1]
    23da:	0e1b      	lsrs	r3, r3, #24
    23dc:	218c      	movs	r1, #140	; 0x8c
    23de:	546b      	strb	r3, [r5, r1]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;
    23e0:	7ba0      	ldrb	r0, [r4, #14]
    23e2:	0880      	lsrs	r0, r0, #2
    23e4:	2301      	movs	r3, #1
    23e6:	4018      	ands	r0, r3

	req->frame = frame;
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;

	frame->tx.confirm = nwkDataReqTxConf;
	frame->tx.control = req->options &
    23e8:	2188      	movs	r1, #136	; 0x88
    23ea:	5468      	strb	r0, [r5, r1]
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
    23ec:	7ba1      	ldrb	r1, [r4, #14]
	frame->tx.control = req->options &
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    23ee:	4019      	ands	r1, r3
    23f0:	7ae8      	ldrb	r0, [r5, #11]
    23f2:	4390      	bics	r0, r2
    23f4:	1c02      	adds	r2, r0, #0
    23f6:	430a      	orrs	r2, r1
    23f8:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;
    23fa:	7ba1      	ldrb	r1, [r4, #14]
    23fc:	08c9      	lsrs	r1, r1, #3
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    23fe:	4019      	ands	r1, r3
    2400:	0089      	lsls	r1, r1, #2
    2402:	b2d2      	uxtb	r2, r2
    2404:	2004      	movs	r0, #4
    2406:	4382      	bics	r2, r0
    2408:	430a      	orrs	r2, r1
    240a:	72ea      	strb	r2, [r5, #11]
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
			NWK_OPT_ENABLE_SECURITY ? 1 : 0;
    240c:	7ba2      	ldrb	r2, [r4, #14]
    240e:	0852      	lsrs	r2, r2, #1
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    2410:	4013      	ands	r3, r2
    2412:	005a      	lsls	r2, r3, #1
    2414:	7aeb      	ldrb	r3, [r5, #11]
    2416:	2102      	movs	r1, #2
    2418:	438b      	bics	r3, r1
    241a:	4313      	orrs	r3, r2
    241c:	72eb      	strb	r3, [r5, #11]
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}

#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    241e:	4b2c      	ldr	r3, [pc, #176]	; (24d0 <nwkDataReqTaskHandler+0x138>)
    2420:	791a      	ldrb	r2, [r3, #4]
    2422:	3201      	adds	r2, #1
    2424:	b2d2      	uxtb	r2, r2
    2426:	711a      	strb	r2, [r3, #4]
    2428:	732a      	strb	r2, [r5, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    242a:	781a      	ldrb	r2, [r3, #0]
    242c:	736a      	strb	r2, [r5, #13]
    242e:	785b      	ldrb	r3, [r3, #1]
    2430:	73ab      	strb	r3, [r5, #14]
	frame->header.nwkDstAddr = req->dstAddr;
    2432:	8963      	ldrh	r3, [r4, #10]
    2434:	7aa2      	ldrb	r2, [r4, #10]
    2436:	73ea      	strb	r2, [r5, #15]
    2438:	0a1b      	lsrs	r3, r3, #8
    243a:	742b      	strb	r3, [r5, #16]
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    243c:	7b61      	ldrb	r1, [r4, #13]
    243e:	230f      	movs	r3, #15
    2440:	4019      	ands	r1, r3
    2442:	7c6a      	ldrb	r2, [r5, #17]
    2444:	200f      	movs	r0, #15
    2446:	4382      	bics	r2, r0
    2448:	430a      	orrs	r2, r1
    244a:	746a      	strb	r2, [r5, #17]
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    244c:	7b22      	ldrb	r2, [r4, #12]
    244e:	0112      	lsls	r2, r2, #4
    2450:	7c69      	ldrb	r1, [r5, #17]
    2452:	400b      	ands	r3, r1
    2454:	4313      	orrs	r3, r2
    2456:	746b      	strb	r3, [r5, #17]

	memcpy(frame->payload, req->data, req->size);
    2458:	2381      	movs	r3, #129	; 0x81
    245a:	5ceb      	ldrb	r3, [r5, r3]
    245c:	2282      	movs	r2, #130	; 0x82
    245e:	5ca8      	ldrb	r0, [r5, r2]
    2460:	0200      	lsls	r0, r0, #8
    2462:	4318      	orrs	r0, r3
    2464:	2383      	movs	r3, #131	; 0x83
    2466:	5ceb      	ldrb	r3, [r5, r3]
    2468:	041b      	lsls	r3, r3, #16
    246a:	4318      	orrs	r0, r3
    246c:	2384      	movs	r3, #132	; 0x84
    246e:	5ceb      	ldrb	r3, [r5, r3]
    2470:	061b      	lsls	r3, r3, #24
    2472:	4318      	orrs	r0, r3
    2474:	7d22      	ldrb	r2, [r4, #20]
    2476:	6921      	ldr	r1, [r4, #16]
    2478:	4b16      	ldr	r3, [pc, #88]	; (24d4 <nwkDataReqTaskHandler+0x13c>)
    247a:	4798      	blx	r3
	frame->size += req->size;
    247c:	7d22      	ldrb	r2, [r4, #20]
    247e:	786b      	ldrb	r3, [r5, #1]
    2480:	18d3      	adds	r3, r2, r3
    2482:	706b      	strb	r3, [r5, #1]

	nwkTxFrame(frame);
    2484:	1c28      	adds	r0, r5, #0
    2486:	4b14      	ldr	r3, [pc, #80]	; (24d8 <nwkDataReqTaskHandler+0x140>)
    2488:	4798      	blx	r3
    248a:	e019      	b.n	24c0 <nwkDataReqTaskHandler+0x128>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    248c:	4294      	cmp	r4, r2
    248e:	d103      	bne.n	2498 <nwkDataReqTaskHandler+0x100>
		nwkDataReqQueue = nwkDataReqQueue->next;
    2490:	4b0c      	ldr	r3, [pc, #48]	; (24c4 <nwkDataReqTaskHandler+0x12c>)
    2492:	6822      	ldr	r2, [r4, #0]
    2494:	601a      	str	r2, [r3, #0]
    2496:	e006      	b.n	24a6 <nwkDataReqTaskHandler+0x10e>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    2498:	6813      	ldr	r3, [r2, #0]
    249a:	429c      	cmp	r4, r3
    249c:	d001      	beq.n	24a2 <nwkDataReqTaskHandler+0x10a>
			prev = prev->next;
    249e:	1c1a      	adds	r2, r3, #0
    24a0:	e7fa      	b.n	2498 <nwkDataReqTaskHandler+0x100>
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    24a2:	6823      	ldr	r3, [r4, #0]
    24a4:	6013      	str	r3, [r2, #0]
	}

	nwkIb.lock--;
    24a6:	4a0a      	ldr	r2, [pc, #40]	; (24d0 <nwkDataReqTaskHandler+0x138>)
    24a8:	2358      	movs	r3, #88	; 0x58
    24aa:	5ad1      	ldrh	r1, [r2, r3]
    24ac:	3901      	subs	r1, #1
    24ae:	52d1      	strh	r1, [r2, r3]
	req->confirm(req);
    24b0:	69a3      	ldr	r3, [r4, #24]
    24b2:	1c20      	adds	r0, r4, #0
    24b4:	4798      	blx	r3
    24b6:	e003      	b.n	24c0 <nwkDataReqTaskHandler+0x128>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    24b8:	6824      	ldr	r4, [r4, #0]
    24ba:	2c00      	cmp	r4, #0
    24bc:	d000      	beq.n	24c0 <nwkDataReqTaskHandler+0x128>
    24be:	e772      	b.n	23a6 <nwkDataReqTaskHandler+0xe>

		default:
			break;
		}
	}
}
    24c0:	bd38      	pop	{r3, r4, r5, pc}
    24c2:	46c0      	nop			; (mov r8, r8)
    24c4:	200000d0 	.word	0x200000d0
    24c8:	000024f1 	.word	0x000024f1
    24cc:	00002319 	.word	0x00002319
    24d0:	200008dc 	.word	0x200008dc
    24d4:	00006af9 	.word	0x00006af9
    24d8:	00003179 	.word	0x00003179

000024dc <nwkFrameInit>:
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    24dc:	4b03      	ldr	r3, [pc, #12]	; (24ec <nwkFrameInit+0x10>)
    24de:	2200      	movs	r2, #0
    24e0:	701a      	strb	r2, [r3, #0]
    24e2:	218d      	movs	r1, #141	; 0x8d
    24e4:	545a      	strb	r2, [r3, r1]
    24e6:	0049      	lsls	r1, r1, #1
    24e8:	545a      	strb	r2, [r3, r1]
	}
}
    24ea:	4770      	bx	lr
    24ec:	200000d4 	.word	0x200000d4

000024f0 <nwkFrameAlloc>:
/*************************************************************************//**
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
    24f0:	b570      	push	{r4, r5, r6, lr}
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    24f2:	4b18      	ldr	r3, [pc, #96]	; (2554 <nwkFrameAlloc+0x64>)
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d00e      	beq.n	2518 <nwkFrameAlloc+0x28>
    24fa:	238d      	movs	r3, #141	; 0x8d
    24fc:	4a15      	ldr	r2, [pc, #84]	; (2554 <nwkFrameAlloc+0x64>)
    24fe:	5cd3      	ldrb	r3, [r2, r3]
    2500:	2b00      	cmp	r3, #0
    2502:	d007      	beq.n	2514 <nwkFrameAlloc+0x24>
    2504:	238d      	movs	r3, #141	; 0x8d
    2506:	005b      	lsls	r3, r3, #1
    2508:	5cd3      	ldrb	r3, [r2, r3]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    250a:	2400      	movs	r4, #0
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    250c:	2b00      	cmp	r3, #0
    250e:	d11f      	bne.n	2550 <nwkFrameAlloc+0x60>
    2510:	2302      	movs	r3, #2
    2512:	e002      	b.n	251a <nwkFrameAlloc+0x2a>
    2514:	2301      	movs	r3, #1
    2516:	e000      	b.n	251a <nwkFrameAlloc+0x2a>
    2518:	2300      	movs	r3, #0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    251a:	4e0e      	ldr	r6, [pc, #56]	; (2554 <nwkFrameAlloc+0x64>)
    251c:	258d      	movs	r5, #141	; 0x8d
    251e:	435d      	muls	r5, r3
    2520:	1974      	adds	r4, r6, r5
    2522:	1c20      	adds	r0, r4, #0
    2524:	2100      	movs	r1, #0
    2526:	228d      	movs	r2, #141	; 0x8d
    2528:	4b0b      	ldr	r3, [pc, #44]	; (2558 <nwkFrameAlloc+0x68>)
    252a:	4798      	blx	r3
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    252c:	2310      	movs	r3, #16
    252e:	7063      	strb	r3, [r4, #1]
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    2530:	1c23      	adds	r3, r4, #0
    2532:	3380      	adds	r3, #128	; 0x80
    2534:	1c22      	adds	r2, r4, #0
    2536:	3212      	adds	r2, #18
    2538:	705a      	strb	r2, [r3, #1]
    253a:	0a11      	lsrs	r1, r2, #8
    253c:	7099      	strb	r1, [r3, #2]
    253e:	0c11      	lsrs	r1, r2, #16
    2540:	70d9      	strb	r1, [r3, #3]
    2542:	0e12      	lsrs	r2, r2, #24
    2544:	711a      	strb	r2, [r3, #4]
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    2546:	4a05      	ldr	r2, [pc, #20]	; (255c <nwkFrameAlloc+0x6c>)
    2548:	2358      	movs	r3, #88	; 0x58
    254a:	5ad1      	ldrh	r1, [r2, r3]
    254c:	3101      	adds	r1, #1
    254e:	52d1      	strh	r1, [r2, r3]
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
}
    2550:	1c20      	adds	r0, r4, #0
    2552:	bd70      	pop	{r4, r5, r6, pc}
    2554:	200000d4 	.word	0x200000d4
    2558:	00006b0b 	.word	0x00006b0b
    255c:	200008dc 	.word	0x200008dc

00002560 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    2560:	2300      	movs	r3, #0
    2562:	7003      	strb	r3, [r0, #0]
	nwkIb.lock--;
    2564:	4a02      	ldr	r2, [pc, #8]	; (2570 <nwkFrameFree+0x10>)
    2566:	2358      	movs	r3, #88	; 0x58
    2568:	5ad1      	ldrh	r1, [r2, r3]
    256a:	3901      	subs	r1, #1
    256c:	52d1      	strh	r1, [r2, r3]
}
    256e:	4770      	bx	lr
    2570:	200008dc 	.word	0x200008dc

00002574 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    2574:	2800      	cmp	r0, #0
    2576:	d006      	beq.n	2586 <nwkFrameNext+0x12>
		frame = nwkFrameFrames;
	} else {
		frame++;
    2578:	308d      	adds	r0, #141	; 0x8d
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    257a:	4b0c      	ldr	r3, [pc, #48]	; (25ac <nwkFrameNext+0x38>)
    257c:	33a8      	adds	r3, #168	; 0xa8
    257e:	33ff      	adds	r3, #255	; 0xff
    2580:	4298      	cmp	r0, r3
    2582:	d301      	bcc.n	2588 <nwkFrameNext+0x14>
    2584:	e00f      	b.n	25a6 <nwkFrameNext+0x32>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    2586:	4809      	ldr	r0, [pc, #36]	; (25ac <nwkFrameNext+0x38>)
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2588:	7803      	ldrb	r3, [r0, #0]
    258a:	2b00      	cmp	r3, #0
    258c:	d10c      	bne.n	25a8 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    258e:	4a07      	ldr	r2, [pc, #28]	; (25ac <nwkFrameNext+0x38>)
    2590:	32a8      	adds	r2, #168	; 0xa8
    2592:	32ff      	adds	r2, #255	; 0xff
    2594:	e002      	b.n	259c <nwkFrameNext+0x28>
		if (NWK_FRAME_STATE_FREE != frame->state) {
    2596:	7803      	ldrb	r3, [r0, #0]
    2598:	2b00      	cmp	r3, #0
    259a:	d105      	bne.n	25a8 <nwkFrameNext+0x34>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    259c:	308d      	adds	r0, #141	; 0x8d
    259e:	4290      	cmp	r0, r2
    25a0:	d3f9      	bcc.n	2596 <nwkFrameNext+0x22>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    25a2:	2000      	movs	r0, #0
    25a4:	e000      	b.n	25a8 <nwkFrameNext+0x34>
    25a6:	2000      	movs	r0, #0
}
    25a8:	4770      	bx	lr
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	200000d4 	.word	0x200000d4

000025b0 <nwkFrameCommandInit>:
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
	frame->tx.status = NWK_SUCCESS_STATUS;
    25b0:	2200      	movs	r2, #0
    25b2:	2385      	movs	r3, #133	; 0x85
    25b4:	54c2      	strb	r2, [r0, r3]
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    25b6:	4b05      	ldr	r3, [pc, #20]	; (25cc <nwkFrameCommandInit+0x1c>)
    25b8:	791a      	ldrb	r2, [r3, #4]
    25ba:	3201      	adds	r2, #1
    25bc:	b2d2      	uxtb	r2, r2
    25be:	711a      	strb	r2, [r3, #4]
    25c0:	7302      	strb	r2, [r0, #12]
	frame->header.nwkSrcAddr = nwkIb.addr;
    25c2:	781a      	ldrb	r2, [r3, #0]
    25c4:	7342      	strb	r2, [r0, #13]
    25c6:	785b      	ldrb	r3, [r3, #1]
    25c8:	7383      	strb	r3, [r0, #14]
#ifdef NWK_ENABLE_SECURE_COMMANDS
	frame->header.nwkFcf.security = 1;
#endif
}
    25ca:	4770      	bx	lr
    25cc:	200008dc 	.word	0x200008dc

000025d0 <nwkRouteInit>:

/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
    25d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25d2:	4a09      	ldr	r2, [pc, #36]	; (25f8 <nwkRouteInit+0x28>)
    25d4:	3202      	adds	r2, #2
    25d6:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    25d8:	2701      	movs	r7, #1
    25da:	427f      	negs	r7, r7
		nwkRouteTable[i].fixed = 0;
    25dc:	4806      	ldr	r0, [pc, #24]	; (25f8 <nwkRouteInit+0x28>)
    25de:	2601      	movs	r6, #1
		nwkRouteTable[i].rank = 0;
    25e0:	2500      	movs	r5, #0
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
    25e2:	8017      	strh	r7, [r2, #0]
		nwkRouteTable[i].fixed = 0;
    25e4:	00d9      	lsls	r1, r3, #3
    25e6:	5c0c      	ldrb	r4, [r1, r0]
    25e8:	43b4      	bics	r4, r6
    25ea:	540c      	strb	r4, [r1, r0]
		nwkRouteTable[i].rank = 0;
    25ec:	7115      	strb	r5, [r2, #4]
    25ee:	3301      	adds	r3, #1
    25f0:	3208      	adds	r2, #8
/*************************************************************************//**
*  @brief Initializes the Routing module
*****************************************************************************/
void nwkRouteInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    25f2:	2b64      	cmp	r3, #100	; 0x64
    25f4:	d1f5      	bne.n	25e2 <nwkRouteInit+0x12>
		nwkRouteTable[i].dstAddr = NWK_ROUTE_UNKNOWN;
		nwkRouteTable[i].fixed = 0;
		nwkRouteTable[i].rank = 0;
	}
}
    25f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25f8:	2000027c 	.word	0x2000027c

000025fc <NWK_RouteFindEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
    25fc:	b570      	push	{r4, r5, r6, lr}
    25fe:	4a0b      	ldr	r2, [pc, #44]	; (262c <NWK_RouteFindEntry+0x30>)
    2600:	3202      	adds	r2, #2
    2602:	2300      	movs	r3, #0
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
				nwkRouteTable[i].multicast == multicast) {
    2604:	4e09      	ldr	r6, [pc, #36]	; (262c <NWK_RouteFindEntry+0x30>)
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2606:	8814      	ldrh	r4, [r2, #0]
    2608:	4284      	cmp	r4, r0
    260a:	d109      	bne.n	2620 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
    260c:	00dc      	lsls	r4, r3, #3
    260e:	5da4      	ldrb	r4, [r4, r6]
    2610:	07a4      	lsls	r4, r4, #30
    2612:	0fe4      	lsrs	r4, r4, #31
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		if (nwkRouteTable[i].dstAddr == dst &&
    2614:	428c      	cmp	r4, r1
    2616:	d103      	bne.n	2620 <NWK_RouteFindEntry+0x24>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
    2618:	00dd      	lsls	r5, r3, #3
    261a:	4804      	ldr	r0, [pc, #16]	; (262c <NWK_RouteFindEntry+0x30>)
    261c:	1940      	adds	r0, r0, r5
    261e:	e004      	b.n	262a <NWK_RouteFindEntry+0x2e>
    2620:	3301      	adds	r3, #1
    2622:	3208      	adds	r2, #8

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteFindEntry(uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    2624:	2b64      	cmp	r3, #100	; 0x64
    2626:	d1ee      	bne.n	2606 <NWK_RouteFindEntry+0xa>
				nwkRouteTable[i].multicast == multicast) {
			return &nwkRouteTable[i];
		}
	}

	return NULL;
    2628:	2000      	movs	r0, #0
}
    262a:	bd70      	pop	{r4, r5, r6, pc}
    262c:	2000027c 	.word	0x2000027c

00002630 <NWK_RouteNewEntry>:

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
    2630:	b510      	push	{r4, lr}
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;
    2632:	2200      	movs	r2, #0

/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
    2634:	4810      	ldr	r0, [pc, #64]	; (2678 <NWK_RouteNewEntry+0x48>)
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    2636:	24c8      	movs	r4, #200	; 0xc8
    2638:	00a4      	lsls	r4, r4, #2
    263a:	1901      	adds	r1, r0, r4
		if (iter->fixed) {
    263c:	7803      	ldrb	r3, [r0, #0]
    263e:	07dc      	lsls	r4, r3, #31
    2640:	d40b      	bmi.n	265a <NWK_RouteNewEntry+0x2a>
			continue;
		}

		if (0 == iter->rank) {
    2642:	7983      	ldrb	r3, [r0, #6]
    2644:	2b00      	cmp	r3, #0
    2646:	d00c      	beq.n	2662 <NWK_RouteNewEntry+0x32>
			entry = iter;
			break;
		}

		if (NULL == entry || iter->rank < entry->rank) {
    2648:	2a00      	cmp	r2, #0
    264a:	d003      	beq.n	2654 <NWK_RouteNewEntry+0x24>
    264c:	7994      	ldrb	r4, [r2, #6]
    264e:	429c      	cmp	r4, r3
    2650:	d802      	bhi.n	2658 <NWK_RouteNewEntry+0x28>
    2652:	e002      	b.n	265a <NWK_RouteNewEntry+0x2a>
    2654:	1c02      	adds	r2, r0, #0
    2656:	e000      	b.n	265a <NWK_RouteNewEntry+0x2a>
    2658:	1c02      	adds	r2, r0, #0
NWK_RouteTableEntry_t *NWK_RouteNewEntry(void)
{
	NWK_RouteTableEntry_t *iter = nwkRouteTable;
	NWK_RouteTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++, iter++) {
    265a:	3008      	adds	r0, #8
    265c:	4288      	cmp	r0, r1
    265e:	d1ed      	bne.n	263c <NWK_RouteNewEntry+0xc>
    2660:	1c10      	adds	r0, r2, #0
		if (NULL == entry || iter->rank < entry->rank) {
			entry = iter;
		}
	}

	entry->multicast = 0;
    2662:	7803      	ldrb	r3, [r0, #0]
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    2664:	2202      	movs	r2, #2
    2666:	4393      	bics	r3, r2
    2668:	220f      	movs	r2, #15
    266a:	4013      	ands	r3, r2
    266c:	2230      	movs	r2, #48	; 0x30
    266e:	4313      	orrs	r3, r2
    2670:	7003      	strb	r3, [r0, #0]
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    2672:	2380      	movs	r3, #128	; 0x80
    2674:	7183      	strb	r3, [r0, #6]

	return entry;
}
    2676:	bd10      	pop	{r4, pc}
    2678:	2000027c 	.word	0x2000027c

0000267c <NWK_RouteFreeEntry>:

/*************************************************************************//**
*****************************************************************************/
void NWK_RouteFreeEntry(NWK_RouteTableEntry_t *entry)
{
	if (entry->fixed) {
    267c:	7803      	ldrb	r3, [r0, #0]
    267e:	07da      	lsls	r2, r3, #31
    2680:	d404      	bmi.n	268c <NWK_RouteFreeEntry+0x10>
		return;
	}

	entry->dstAddr = NWK_ROUTE_UNKNOWN;
    2682:	2301      	movs	r3, #1
    2684:	425b      	negs	r3, r3
    2686:	8043      	strh	r3, [r0, #2]
	entry->rank = 0;
    2688:	2300      	movs	r3, #0
    268a:	7183      	strb	r3, [r0, #6]
}
    268c:	4770      	bx	lr
    268e:	46c0      	nop			; (mov r8, r8)

00002690 <NWK_RouteNextHop>:

/*************************************************************************//**
*****************************************************************************/
uint16_t NWK_RouteNextHop(uint16_t dst, uint8_t multicast)
{
    2690:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    2692:	4b04      	ldr	r3, [pc, #16]	; (26a4 <NWK_RouteNextHop+0x14>)
    2694:	4798      	blx	r3
	if (entry) {
    2696:	2800      	cmp	r0, #0
    2698:	d001      	beq.n	269e <NWK_RouteNextHop+0xe>
		return entry->nextHopAddr;
    269a:	8880      	ldrh	r0, [r0, #4]
    269c:	e000      	b.n	26a0 <NWK_RouteNextHop+0x10>
	}

	return NWK_ROUTE_UNKNOWN;
    269e:	4802      	ldr	r0, [pc, #8]	; (26a8 <NWK_RouteNextHop+0x18>)
}
    26a0:	bd08      	pop	{r3, pc}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	000025fd 	.word	0x000025fd
    26a8:	0000ffff 	.word	0x0000ffff

000026ac <nwkRouteRemove>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
    26ac:	b508      	push	{r3, lr}
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    26ae:	4b03      	ldr	r3, [pc, #12]	; (26bc <nwkRouteRemove+0x10>)
    26b0:	4798      	blx	r3
	if (entry) {
    26b2:	2800      	cmp	r0, #0
    26b4:	d001      	beq.n	26ba <nwkRouteRemove+0xe>
		NWK_RouteFreeEntry(entry);
    26b6:	4b02      	ldr	r3, [pc, #8]	; (26c0 <nwkRouteRemove+0x14>)
    26b8:	4798      	blx	r3
	}
}
    26ba:	bd08      	pop	{r3, pc}
    26bc:	000025fd 	.word	0x000025fd
    26c0:	0000267d 	.word	0x0000267d

000026c4 <nwkRouteFrameReceived>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    26c4:	b538      	push	{r3, r4, r5, lr}
    26c6:	1c04      	adds	r4, r0, #0
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    26c8:	7a42      	ldrb	r2, [r0, #9]
    26ca:	7a85      	ldrb	r5, [r0, #10]
    26cc:	022d      	lsls	r5, r5, #8
    26ce:	4315      	orrs	r5, r2
    26d0:	b22b      	sxth	r3, r5
    26d2:	2b00      	cmp	r3, #0
    26d4:	da05      	bge.n	26e2 <nwkRouteFrameReceived+0x1e>
			(header->macSrcAddr != header->nwkSrcAddr)) {
    26d6:	7b42      	ldrb	r2, [r0, #13]
    26d8:	7b83      	ldrb	r3, [r0, #14]
    26da:	021b      	lsls	r3, r3, #8
{
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
	NwkFrameHeader_t *header = &frame->header;
	NWK_RouteTableEntry_t *entry;

	if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    26dc:	4313      	orrs	r3, r2
    26de:	429d      	cmp	r5, r3
    26e0:	d141      	bne.n	2766 <nwkRouteFrameReceived+0xa2>
			(header->macSrcAddr != header->nwkSrcAddr)) {
		return;
	}

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    26e2:	7961      	ldrb	r1, [r4, #5]
    26e4:	79a2      	ldrb	r2, [r4, #6]
    26e6:	0212      	lsls	r2, r2, #8
    26e8:	430a      	orrs	r2, r1
    26ea:	4b1f      	ldr	r3, [pc, #124]	; (2768 <nwkRouteFrameReceived+0xa4>)
    26ec:	429a      	cmp	r2, r3
    26ee:	d03a      	beq.n	2766 <nwkRouteFrameReceived+0xa2>
		return;
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    26f0:	7b62      	ldrb	r2, [r4, #13]
    26f2:	7ba0      	ldrb	r0, [r4, #14]
    26f4:	0200      	lsls	r0, r0, #8
    26f6:	4310      	orrs	r0, r2
    26f8:	2100      	movs	r1, #0
    26fa:	4b1c      	ldr	r3, [pc, #112]	; (276c <nwkRouteFrameReceived+0xa8>)
    26fc:	4798      	blx	r3

	if (entry) {
    26fe:	2800      	cmp	r0, #0
    2700:	d022      	beq.n	2748 <nwkRouteFrameReceived+0x84>
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2702:	79e1      	ldrb	r1, [r4, #7]
    2704:	7a22      	ldrb	r2, [r4, #8]
    2706:	0212      	lsls	r2, r2, #8
    2708:	430a      	orrs	r2, r1
    270a:	2100      	movs	r1, #0
    270c:	4b16      	ldr	r3, [pc, #88]	; (2768 <nwkRouteFrameReceived+0xa4>)
    270e:	429a      	cmp	r2, r3
    2710:	d108      	bne.n	2724 <nwkRouteFrameReceived+0x60>
				nwkIb.addr == header->nwkDstAddr);
    2712:	7be2      	ldrb	r2, [r4, #15]
    2714:	7c21      	ldrb	r1, [r4, #16]
    2716:	0209      	lsls	r1, r1, #8
	}

	entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);

	if (entry) {
		bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    2718:	4b15      	ldr	r3, [pc, #84]	; (2770 <nwkRouteFrameReceived+0xac>)
    271a:	881b      	ldrh	r3, [r3, #0]
    271c:	4311      	orrs	r1, r2
    271e:	1a59      	subs	r1, r3, r1
    2720:	424b      	negs	r3, r1
    2722:	4159      	adcs	r1, r3
				nwkIb.addr == header->nwkDstAddr);

		if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi >
    2724:	8883      	ldrh	r3, [r0, #4]
    2726:	42ab      	cmp	r3, r5
    2728:	d004      	beq.n	2734 <nwkRouteFrameReceived+0x70>
    272a:	2385      	movs	r3, #133	; 0x85
    272c:	5ce2      	ldrb	r2, [r4, r3]
    272e:	79c3      	ldrb	r3, [r0, #7]
    2730:	429a      	cmp	r2, r3
    2732:	d801      	bhi.n	2738 <nwkRouteFrameReceived+0x74>
				entry->lqi) || discovery) {
    2734:	2900      	cmp	r1, #0
    2736:	d013      	beq.n	2760 <nwkRouteFrameReceived+0x9c>
			entry->nextHopAddr = header->macSrcAddr;
    2738:	8085      	strh	r5, [r0, #4]
			entry->score = NWK_ROUTE_DEFAULT_SCORE;
    273a:	7803      	ldrb	r3, [r0, #0]
    273c:	220f      	movs	r2, #15
    273e:	4013      	ands	r3, r2
    2740:	2230      	movs	r2, #48	; 0x30
    2742:	4313      	orrs	r3, r2
    2744:	7003      	strb	r3, [r0, #0]
    2746:	e00b      	b.n	2760 <nwkRouteFrameReceived+0x9c>
		}
	} else {
		entry = NWK_RouteNewEntry();
    2748:	4b0a      	ldr	r3, [pc, #40]	; (2774 <nwkRouteFrameReceived+0xb0>)
    274a:	4798      	blx	r3

		entry->dstAddr = header->nwkSrcAddr;
    274c:	7b61      	ldrb	r1, [r4, #13]
    274e:	7ba2      	ldrb	r2, [r4, #14]
    2750:	0212      	lsls	r2, r2, #8
    2752:	430a      	orrs	r2, r1
    2754:	8042      	strh	r2, [r0, #2]
		entry->nextHopAddr = header->macSrcAddr;
    2756:	7a62      	ldrb	r2, [r4, #9]
    2758:	7aa3      	ldrb	r3, [r4, #10]
    275a:	021b      	lsls	r3, r3, #8
    275c:	4313      	orrs	r3, r2
    275e:	8083      	strh	r3, [r0, #4]
	}

	entry->lqi = frame->rx.lqi;
    2760:	2385      	movs	r3, #133	; 0x85
    2762:	5ce3      	ldrb	r3, [r4, r3]
    2764:	71c3      	strb	r3, [r0, #7]
#else
	(void)frame;
#endif
}
    2766:	bd38      	pop	{r3, r4, r5, pc}
    2768:	0000ffff 	.word	0x0000ffff
    276c:	000025fd 	.word	0x000025fd
    2770:	200008dc 	.word	0x200008dc
    2774:	00002631 	.word	0x00002631

00002778 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    2778:	b510      	push	{r4, lr}
    277a:	1c04      	adds	r4, r0, #0
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    277c:	7bc3      	ldrb	r3, [r0, #15]
    277e:	7c00      	ldrb	r0, [r0, #16]
    2780:	0200      	lsls	r0, r0, #8
    2782:	4318      	orrs	r0, r3
    2784:	4b1b      	ldr	r3, [pc, #108]	; (27f4 <nwkRouteFrameSent+0x7c>)
    2786:	4298      	cmp	r0, r3
    2788:	d032      	beq.n	27f0 <nwkRouteFrameSent+0x78>
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    278a:	7ae1      	ldrb	r1, [r4, #11]
    278c:	0709      	lsls	r1, r1, #28

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    278e:	0fc9      	lsrs	r1, r1, #31
    2790:	4b19      	ldr	r3, [pc, #100]	; (27f8 <nwkRouteFrameSent+0x80>)
    2792:	4798      	blx	r3
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    2794:	2800      	cmp	r0, #0
    2796:	d02b      	beq.n	27f0 <nwkRouteFrameSent+0x78>
    2798:	7803      	ldrb	r3, [r0, #0]
    279a:	07da      	lsls	r2, r3, #31
    279c:	d428      	bmi.n	27f0 <nwkRouteFrameSent+0x78>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    279e:	2385      	movs	r3, #133	; 0x85
    27a0:	5ce3      	ldrb	r3, [r4, r3]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d117      	bne.n	27d6 <nwkRouteFrameSent+0x5e>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    27a6:	7803      	ldrb	r3, [r0, #0]
    27a8:	220f      	movs	r2, #15
    27aa:	4013      	ands	r3, r2
    27ac:	2230      	movs	r2, #48	; 0x30
    27ae:	4313      	orrs	r3, r2
    27b0:	7003      	strb	r3, [r0, #0]

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    27b2:	7983      	ldrb	r3, [r0, #6]
    27b4:	3301      	adds	r3, #1
    27b6:	b2db      	uxtb	r3, r3
    27b8:	7183      	strb	r3, [r0, #6]
    27ba:	2bff      	cmp	r3, #255	; 0xff
    27bc:	d118      	bne.n	27f0 <nwkRouteFrameSent+0x78>
    27be:	490f      	ldr	r1, [pc, #60]	; (27fc <nwkRouteFrameSent+0x84>)
    27c0:	1d8b      	adds	r3, r1, #6
    27c2:	4a0f      	ldr	r2, [pc, #60]	; (2800 <nwkRouteFrameSent+0x88>)
    27c4:	1889      	adds	r1, r1, r2
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    27c6:	781a      	ldrb	r2, [r3, #0]
    27c8:	0852      	lsrs	r2, r2, #1
    27ca:	3201      	adds	r2, #1
    27cc:	701a      	strb	r2, [r3, #0]
    27ce:	3308      	adds	r3, #8

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    27d0:	428b      	cmp	r3, r1
    27d2:	d1f8      	bne.n	27c6 <nwkRouteFrameSent+0x4e>
    27d4:	e00c      	b.n	27f0 <nwkRouteFrameSent+0x78>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    27d6:	7802      	ldrb	r2, [r0, #0]
    27d8:	0913      	lsrs	r3, r2, #4
    27da:	330f      	adds	r3, #15
    27dc:	210f      	movs	r1, #15
    27de:	400b      	ands	r3, r1
    27e0:	011c      	lsls	r4, r3, #4
    27e2:	400a      	ands	r2, r1
    27e4:	4322      	orrs	r2, r4
    27e6:	7002      	strb	r2, [r0, #0]
    27e8:	2b00      	cmp	r3, #0
    27ea:	d101      	bne.n	27f0 <nwkRouteFrameSent+0x78>
			NWK_RouteFreeEntry(entry);
    27ec:	4b05      	ldr	r3, [pc, #20]	; (2804 <nwkRouteFrameSent+0x8c>)
    27ee:	4798      	blx	r3
		}
	}
}
    27f0:	bd10      	pop	{r4, pc}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	0000ffff 	.word	0x0000ffff
    27f8:	000025fd 	.word	0x000025fd
    27fc:	2000027c 	.word	0x2000027c
    2800:	00000326 	.word	0x00000326
    2804:	0000267d 	.word	0x0000267d

00002808 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    2808:	b510      	push	{r4, lr}
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    280a:	7bc1      	ldrb	r1, [r0, #15]
    280c:	7c03      	ldrb	r3, [r0, #16]
    280e:	021b      	lsls	r3, r3, #8
    2810:	430b      	orrs	r3, r1
    2812:	4a0d      	ldr	r2, [pc, #52]	; (2848 <nwkRoutePrepareTx+0x40>)
    2814:	4293      	cmp	r3, r2
    2816:	d104      	bne.n	2822 <nwkRoutePrepareTx+0x1a>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    2818:	2301      	movs	r3, #1
    281a:	425b      	negs	r3, r3
    281c:	71c3      	strb	r3, [r0, #7]
    281e:	7203      	strb	r3, [r0, #8]
    2820:	e010      	b.n	2844 <nwkRoutePrepareTx+0x3c>
	} else if (header->nwkFcf.linkLocal) {
    2822:	7ac2      	ldrb	r2, [r0, #11]
    2824:	0751      	lsls	r1, r2, #29
    2826:	d503      	bpl.n	2830 <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    2828:	71c3      	strb	r3, [r0, #7]
    282a:	0a1b      	lsrs	r3, r3, #8
    282c:	7203      	strb	r3, [r0, #8]
    282e:	e009      	b.n	2844 <nwkRoutePrepareTx+0x3c>
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    2830:	1c84      	adds	r4, r0, #2
    2832:	7ac1      	ldrb	r1, [r0, #11]
    2834:	0709      	lsls	r1, r1, #28
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    2836:	0fc9      	lsrs	r1, r1, #31
    2838:	1c18      	adds	r0, r3, #0
    283a:	4b04      	ldr	r3, [pc, #16]	; (284c <nwkRoutePrepareTx+0x44>)
    283c:	4798      	blx	r3
    283e:	7160      	strb	r0, [r4, #5]
    2840:	0a00      	lsrs	r0, r0, #8
    2842:	71a0      	strb	r0, [r4, #6]
			nwkRouteDiscoveryRequest(frame);
		}

  #endif
	}
}
    2844:	bd10      	pop	{r4, pc}
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	0000ffff 	.word	0x0000ffff
    284c:	00002691 	.word	0x00002691

00002850 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    2850:	b5f0      	push	{r4, r5, r6, r7, lr}
    2852:	4647      	mov	r7, r8
    2854:	b480      	push	{r7}
    2856:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2858:	7bc2      	ldrb	r2, [r0, #15]
    285a:	7c06      	ldrb	r6, [r0, #16]
    285c:	0236      	lsls	r6, r6, #8
    285e:	4316      	orrs	r6, r2
			header->nwkFcf.multicast)) {
    2860:	7ac7      	ldrb	r7, [r0, #11]
    2862:	073f      	lsls	r7, r7, #28
    2864:	0fff      	lsrs	r7, r7, #31
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    2866:	b2f9      	uxtb	r1, r7
    2868:	1c30      	adds	r0, r6, #0
    286a:	4b28      	ldr	r3, [pc, #160]	; (290c <nwkRouteFrame+0xbc>)
    286c:	4798      	blx	r3
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    286e:	4b28      	ldr	r3, [pc, #160]	; (2910 <nwkRouteFrame+0xc0>)
    2870:	4298      	cmp	r0, r3
    2872:	d00f      	beq.n	2894 <nwkRouteFrame+0x44>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    2874:	2200      	movs	r2, #0
    2876:	2389      	movs	r3, #137	; 0x89
    2878:	54e2      	strb	r2, [r4, r3]
    287a:	238a      	movs	r3, #138	; 0x8a
    287c:	54e2      	strb	r2, [r4, r3]
    287e:	238b      	movs	r3, #139	; 0x8b
    2880:	54e2      	strb	r2, [r4, r3]
    2882:	238c      	movs	r3, #140	; 0x8c
    2884:	54e2      	strb	r2, [r4, r3]
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    2886:	2202      	movs	r2, #2
    2888:	2388      	movs	r3, #136	; 0x88
    288a:	54e2      	strb	r2, [r4, r3]
		nwkTxFrame(frame);
    288c:	1c20      	adds	r0, r4, #0
    288e:	4b21      	ldr	r3, [pc, #132]	; (2914 <nwkRouteFrame+0xc4>)
    2890:	4798      	blx	r3
    2892:	e038      	b.n	2906 <nwkRouteFrame+0xb6>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    2894:	7b62      	ldrb	r2, [r4, #13]
    2896:	7ba3      	ldrb	r3, [r4, #14]
    2898:	021b      	lsls	r3, r3, #8
    289a:	4313      	orrs	r3, r2
    289c:	4698      	mov	r8, r3
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    289e:	4b1e      	ldr	r3, [pc, #120]	; (2918 <nwkRouteFrame+0xc8>)
    28a0:	4798      	blx	r3
    28a2:	1e05      	subs	r5, r0, #0
    28a4:	d02c      	beq.n	2900 <nwkRouteFrame+0xb0>
		return;
	}

	nwkFrameCommandInit(frame);
    28a6:	4b1d      	ldr	r3, [pc, #116]	; (291c <nwkRouteFrame+0xcc>)
    28a8:	4798      	blx	r3

	frame->size += sizeof(NwkCommandRouteError_t);
    28aa:	786b      	ldrb	r3, [r5, #1]
    28ac:	3306      	adds	r3, #6
    28ae:	706b      	strb	r3, [r5, #1]
	frame->tx.confirm = NULL;
    28b0:	2200      	movs	r2, #0
    28b2:	2389      	movs	r3, #137	; 0x89
    28b4:	54ea      	strb	r2, [r5, r3]
    28b6:	238a      	movs	r3, #138	; 0x8a
    28b8:	54ea      	strb	r2, [r5, r3]
    28ba:	238b      	movs	r3, #139	; 0x8b
    28bc:	54ea      	strb	r2, [r5, r3]
    28be:	238c      	movs	r3, #140	; 0x8c
    28c0:	54ea      	strb	r2, [r5, r3]

	frame->header.nwkDstAddr = src;
    28c2:	21ff      	movs	r1, #255	; 0xff
    28c4:	4643      	mov	r3, r8
    28c6:	4019      	ands	r1, r3
    28c8:	73e9      	strb	r1, [r5, #15]
    28ca:	0a1a      	lsrs	r2, r3, #8
    28cc:	742a      	strb	r2, [r5, #16]

	command = (NwkCommandRouteError_t *)frame->payload;
    28ce:	2381      	movs	r3, #129	; 0x81
    28d0:	5ce8      	ldrb	r0, [r5, r3]
    28d2:	2382      	movs	r3, #130	; 0x82
    28d4:	5ceb      	ldrb	r3, [r5, r3]
    28d6:	021b      	lsls	r3, r3, #8
    28d8:	4303      	orrs	r3, r0
    28da:	2083      	movs	r0, #131	; 0x83
    28dc:	5c28      	ldrb	r0, [r5, r0]
    28de:	0400      	lsls	r0, r0, #16
    28e0:	4303      	orrs	r3, r0
    28e2:	2084      	movs	r0, #132	; 0x84
    28e4:	5c28      	ldrb	r0, [r5, r0]
    28e6:	0600      	lsls	r0, r0, #24
    28e8:	4303      	orrs	r3, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    28ea:	2001      	movs	r0, #1
    28ec:	7018      	strb	r0, [r3, #0]
	command->srcAddr = src;
    28ee:	7059      	strb	r1, [r3, #1]
    28f0:	709a      	strb	r2, [r3, #2]
	command->dstAddr = dst;
    28f2:	70de      	strb	r6, [r3, #3]
    28f4:	0a36      	lsrs	r6, r6, #8
    28f6:	711e      	strb	r6, [r3, #4]
	command->multicast = multicast;
    28f8:	715f      	strb	r7, [r3, #5]

	nwkTxFrame(frame);
    28fa:	1c28      	adds	r0, r5, #0
    28fc:	4b05      	ldr	r3, [pc, #20]	; (2914 <nwkRouteFrame+0xc4>)
    28fe:	4798      	blx	r3
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    2900:	1c20      	adds	r0, r4, #0
    2902:	4b07      	ldr	r3, [pc, #28]	; (2920 <nwkRouteFrame+0xd0>)
    2904:	4798      	blx	r3
	}
}
    2906:	bc04      	pop	{r2}
    2908:	4690      	mov	r8, r2
    290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    290c:	00002691 	.word	0x00002691
    2910:	0000ffff 	.word	0x0000ffff
    2914:	00003179 	.word	0x00003179
    2918:	000024f1 	.word	0x000024f1
    291c:	000025b1 	.word	0x000025b1
    2920:	00002561 	.word	0x00002561

00002924 <nwkRouteErrorReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
    2924:	b508      	push	{r3, lr}
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    2926:	6882      	ldr	r2, [r0, #8]

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    2928:	7b03      	ldrb	r3, [r0, #12]
		return false;
    292a:	2000      	movs	r0, #0
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    292c:	2b06      	cmp	r3, #6
    292e:	d107      	bne.n	2940 <nwkRouteErrorReceived+0x1c>
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    2930:	78d3      	ldrb	r3, [r2, #3]
    2932:	7910      	ldrb	r0, [r2, #4]
    2934:	0200      	lsls	r0, r0, #8
    2936:	4318      	orrs	r0, r3
    2938:	7951      	ldrb	r1, [r2, #5]
    293a:	4b02      	ldr	r3, [pc, #8]	; (2944 <nwkRouteErrorReceived+0x20>)
    293c:	4798      	blx	r3

	return true;
    293e:	2001      	movs	r0, #1
}
    2940:	bd08      	pop	{r3, pc}
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	000026ad 	.word	0x000026ad

00002948 <nwkRxSeriveDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool nwkRxSeriveDataInd(NWK_DataInd_t *ind)
{
    2948:	b508      	push	{r3, lr}
		return false;
	}

#endif

	if (ind->size < 1) {
    294a:	7b02      	ldrb	r2, [r0, #12]
		return false;
    294c:	2300      	movs	r3, #0
		return false;
	}

#endif

	if (ind->size < 1) {
    294e:	2a00      	cmp	r2, #0
    2950:	d00f      	beq.n	2972 <nwkRxSeriveDataInd+0x2a>
		return false;
	}

	switch (ind->data[0]) {
    2952:	6882      	ldr	r2, [r0, #8]
    2954:	7813      	ldrb	r3, [r2, #0]
    2956:	2b00      	cmp	r3, #0
    2958:	d002      	beq.n	2960 <nwkRxSeriveDataInd+0x18>
    295a:	2b01      	cmp	r3, #1
    295c:	d004      	beq.n	2968 <nwkRxSeriveDataInd+0x20>
    295e:	e007      	b.n	2970 <nwkRxSeriveDataInd+0x28>
	case NWK_COMMAND_ACK:
		return nwkTxAckReceived(ind);
    2960:	4b05      	ldr	r3, [pc, #20]	; (2978 <nwkRxSeriveDataInd+0x30>)
    2962:	4798      	blx	r3
    2964:	1c03      	adds	r3, r0, #0
    2966:	e004      	b.n	2972 <nwkRxSeriveDataInd+0x2a>

#ifdef NWK_ENABLE_ROUTING
	case NWK_COMMAND_ROUTE_ERROR:
		return nwkRouteErrorReceived(ind);
    2968:	4b04      	ldr	r3, [pc, #16]	; (297c <nwkRxSeriveDataInd+0x34>)
    296a:	4798      	blx	r3
    296c:	1c03      	adds	r3, r0, #0
    296e:	e000      	b.n	2972 <nwkRxSeriveDataInd+0x2a>
		return nwkRouteDiscoveryReplyReceived(ind);

#endif

	default:
		return false;
    2970:	2300      	movs	r3, #0
	}
}
    2972:	1c18      	adds	r0, r3, #0
    2974:	bd08      	pop	{r3, pc}
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	000032c5 	.word	0x000032c5
    297c:	00002925 	.word	0x00002925

00002980 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    2980:	b538      	push	{r3, r4, r5, lr}
    2982:	4909      	ldr	r1, [pc, #36]	; (29a8 <nwkRxDuplicateRejectionTimerHandler+0x28>)
    2984:	1d0b      	adds	r3, r1, #4
    2986:	3140      	adds	r1, #64	; 0x40
	bool restart = false;
    2988:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
    298a:	2501      	movs	r5, #1
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		if (nwkRxDuplicateRejectionTable[i].ttl) {
    298c:	781a      	ldrb	r2, [r3, #0]
    298e:	2a00      	cmp	r2, #0
    2990:	d002      	beq.n	2998 <nwkRxDuplicateRejectionTimerHandler+0x18>
			nwkRxDuplicateRejectionTable[i].ttl--;
    2992:	3a01      	subs	r2, #1
    2994:	701a      	strb	r2, [r3, #0]
			restart = true;
    2996:	1c2c      	adds	r4, r5, #0
    2998:	3306      	adds	r3, #6
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
	bool restart = false;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    299a:	428b      	cmp	r3, r1
    299c:	d1f6      	bne.n	298c <nwkRxDuplicateRejectionTimerHandler+0xc>
			nwkRxDuplicateRejectionTable[i].ttl--;
			restart = true;
		}
	}

	if (restart) {
    299e:	2c00      	cmp	r4, #0
    29a0:	d001      	beq.n	29a6 <nwkRxDuplicateRejectionTimerHandler+0x26>
		SYS_TimerStart(timer);
    29a2:	4b02      	ldr	r3, [pc, #8]	; (29ac <nwkRxDuplicateRejectionTimerHandler+0x2c>)
    29a4:	4798      	blx	r3
	}
}
    29a6:	bd38      	pop	{r3, r4, r5, pc}
    29a8:	2000059c 	.word	0x2000059c
    29ac:	00003829 	.word	0x00003829

000029b0 <nwkRxInit>:

/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    29b0:	b508      	push	{r3, lr}
    29b2:	490a      	ldr	r1, [pc, #40]	; (29dc <nwkRxInit+0x2c>)
    29b4:	1d0b      	adds	r3, r1, #4
    29b6:	3140      	adds	r1, #64	; 0x40
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		nwkRxDuplicateRejectionTable[i].ttl = 0;
    29b8:	2200      	movs	r2, #0
    29ba:	701a      	strb	r2, [r3, #0]
    29bc:	3306      	adds	r3, #6
/*************************************************************************//**
*  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    29be:	428b      	cmp	r3, r1
    29c0:	d1fb      	bne.n	29ba <nwkRxInit+0xa>
		nwkRxDuplicateRejectionTable[i].ttl = 0;
	}

	nwkRxDuplicateRejectionTimer.interval
		= NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    29c2:	4b07      	ldr	r3, [pc, #28]	; (29e0 <nwkRxInit+0x30>)
    29c4:	2264      	movs	r2, #100	; 0x64
    29c6:	609a      	str	r2, [r3, #8]
	nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    29c8:	2200      	movs	r2, #0
    29ca:	731a      	strb	r2, [r3, #12]
	nwkRxDuplicateRejectionTimer.handler
		= nwkRxDuplicateRejectionTimerHandler;
    29cc:	4a05      	ldr	r2, [pc, #20]	; (29e4 <nwkRxInit+0x34>)
    29ce:	611a      	str	r2, [r3, #16]

	NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxSeriveDataInd);
    29d0:	2000      	movs	r0, #0
    29d2:	4905      	ldr	r1, [pc, #20]	; (29e8 <nwkRxInit+0x38>)
    29d4:	4b05      	ldr	r3, [pc, #20]	; (29ec <nwkRxInit+0x3c>)
    29d6:	4798      	blx	r3
}
    29d8:	bd08      	pop	{r3, pc}
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	2000059c 	.word	0x2000059c
    29e0:	200005dc 	.word	0x200005dc
    29e4:	00002981 	.word	0x00002981
    29e8:	00002949 	.word	0x00002949
    29ec:	000022e5 	.word	0x000022e5

000029f0 <PHY_DataInd>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    29f0:	b510      	push	{r4, lr}
    29f2:	1c04      	adds	r4, r0, #0
	NwkFrame_t *frame;

	if (0x88 != ind->data[1] ||
    29f4:	6803      	ldr	r3, [r0, #0]
    29f6:	785a      	ldrb	r2, [r3, #1]
    29f8:	2a88      	cmp	r2, #136	; 0x88
    29fa:	d11a      	bne.n	2a32 <PHY_DataInd+0x42>
			(0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    29fc:	781b      	ldrb	r3, [r3, #0]
    29fe:	2220      	movs	r2, #32
    2a00:	4393      	bics	r3, r2
    2a02:	2b41      	cmp	r3, #65	; 0x41
    2a04:	d115      	bne.n	2a32 <PHY_DataInd+0x42>
    2a06:	7903      	ldrb	r3, [r0, #4]
    2a08:	2b0f      	cmp	r3, #15
    2a0a:	d912      	bls.n	2a32 <PHY_DataInd+0x42>
			ind->size < sizeof(NwkFrameHeader_t)) {
		return;
	}

	if (NULL == (frame = nwkFrameAlloc())) {
    2a0c:	4b09      	ldr	r3, [pc, #36]	; (2a34 <PHY_DataInd+0x44>)
    2a0e:	4798      	blx	r3
    2a10:	2800      	cmp	r0, #0
    2a12:	d00e      	beq.n	2a32 <PHY_DataInd+0x42>
		return;
	}

	frame->state = NWK_RX_STATE_RECEIVED;
    2a14:	2320      	movs	r3, #32
    2a16:	7003      	strb	r3, [r0, #0]
	frame->size = ind->size;
    2a18:	7923      	ldrb	r3, [r4, #4]
    2a1a:	7043      	strb	r3, [r0, #1]
	frame->rx.lqi = ind->lqi;
    2a1c:	7962      	ldrb	r2, [r4, #5]
    2a1e:	2385      	movs	r3, #133	; 0x85
    2a20:	54c2      	strb	r2, [r0, r3]
	frame->rx.rssi = ind->rssi;
    2a22:	79a2      	ldrb	r2, [r4, #6]
    2a24:	2386      	movs	r3, #134	; 0x86
    2a26:	54c2      	strb	r2, [r0, r3]
	memcpy(frame->data, ind->data, ind->size);
    2a28:	3002      	adds	r0, #2
    2a2a:	7922      	ldrb	r2, [r4, #4]
    2a2c:	6821      	ldr	r1, [r4, #0]
    2a2e:	4b02      	ldr	r3, [pc, #8]	; (2a38 <PHY_DataInd+0x48>)
    2a30:	4798      	blx	r3
}
    2a32:	bd10      	pop	{r4, pc}
    2a34:	000024f1 	.word	0x000024f1
    2a38:	00006af9 	.word	0x00006af9

00002a3c <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    2a3c:	2900      	cmp	r1, #0
    2a3e:	d002      	beq.n	2a46 <nwkRxDecryptConf+0xa>
		frame->state = NWK_RX_STATE_INDICATE;
    2a40:	2322      	movs	r3, #34	; 0x22
    2a42:	7003      	strb	r3, [r0, #0]
    2a44:	e001      	b.n	2a4a <nwkRxDecryptConf+0xe>
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    2a46:	2324      	movs	r3, #36	; 0x24
    2a48:	7003      	strb	r3, [r0, #0]
	}
}
    2a4a:	4770      	bx	lr

00002a4c <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    2a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a4e:	464f      	mov	r7, r9
    2a50:	4646      	mov	r6, r8
    2a52:	b4c0      	push	{r6, r7}
    2a54:	b085      	sub	sp, #20
	NwkFrame_t *frame = NULL;
    2a56:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    2a58:	4dd3      	ldr	r5, [pc, #844]	; (2da8 <nwkRxTaskHandler+0x35c>)
    2a5a:	48d4      	ldr	r0, [pc, #848]	; (2dac <nwkRxTaskHandler+0x360>)
    2a5c:	4681      	mov	r9, r0
    2a5e:	203c      	movs	r0, #60	; 0x3c
    2a60:	4481      	add	r9, r0
    2a62:	e19a      	b.n	2d9a <nwkRxTaskHandler+0x34e>
		switch (frame->state) {
    2a64:	7823      	ldrb	r3, [r4, #0]
    2a66:	3b20      	subs	r3, #32
    2a68:	b2da      	uxtb	r2, r3
    2a6a:	2a04      	cmp	r2, #4
    2a6c:	d900      	bls.n	2a70 <nwkRxTaskHandler+0x24>
    2a6e:	e194      	b.n	2d9a <nwkRxTaskHandler+0x34e>
    2a70:	0093      	lsls	r3, r2, #2
    2a72:	4acf      	ldr	r2, [pc, #828]	; (2db0 <nwkRxTaskHandler+0x364>)
    2a74:	58d3      	ldr	r3, [r2, r3]
    2a76:	469f      	mov	pc, r3
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2a78:	2324      	movs	r3, #36	; 0x24
    2a7a:	7023      	strb	r3, [r4, #0]
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2a7c:	7ae3      	ldrb	r3, [r4, #11]
    2a7e:	0719      	lsls	r1, r3, #28
    2a80:	d500      	bpl.n	2a84 <nwkRxTaskHandler+0x38>
    2a82:	e18a      	b.n	2d9a <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    2a84:	7961      	ldrb	r1, [r4, #5]
    2a86:	79a2      	ldrb	r2, [r4, #6]
    2a88:	0212      	lsls	r2, r2, #8
    2a8a:	430a      	orrs	r2, r1
    2a8c:	4bc9      	ldr	r3, [pc, #804]	; (2db4 <nwkRxTaskHandler+0x368>)
    2a8e:	429a      	cmp	r2, r3
    2a90:	d114      	bne.n	2abc <nwkRxTaskHandler+0x70>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2a92:	7be2      	ldrb	r2, [r4, #15]
    2a94:	7c23      	ldrb	r3, [r4, #16]
    2a96:	021b      	lsls	r3, r3, #8
    2a98:	4313      	orrs	r3, r2
    2a9a:	4ac7      	ldr	r2, [pc, #796]	; (2db8 <nwkRxTaskHandler+0x36c>)
    2a9c:	8812      	ldrh	r2, [r2, #0]
    2a9e:	429a      	cmp	r2, r3
    2aa0:	d003      	beq.n	2aaa <nwkRxTaskHandler+0x5e>
    2aa2:	4ac4      	ldr	r2, [pc, #784]	; (2db4 <nwkRxTaskHandler+0x368>)
    2aa4:	4293      	cmp	r3, r2
    2aa6:	d000      	beq.n	2aaa <nwkRxTaskHandler+0x5e>
    2aa8:	e177      	b.n	2d9a <nwkRxTaskHandler+0x34e>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2aaa:	7ae3      	ldrb	r3, [r4, #11]
    2aac:	079a      	lsls	r2, r3, #30
    2aae:	d502      	bpl.n	2ab6 <nwkRxTaskHandler+0x6a>
				frame->state = NWK_RX_STATE_DECRYPT;
    2ab0:	2321      	movs	r3, #33	; 0x21
    2ab2:	7023      	strb	r3, [r4, #0]
    2ab4:	e171      	b.n	2d9a <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2ab6:	2322      	movs	r3, #34	; 0x22
    2ab8:	7023      	strb	r3, [r4, #0]
    2aba:	e16e      	b.n	2d9a <nwkRxTaskHandler+0x34e>
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2abc:	7be1      	ldrb	r1, [r4, #15]
    2abe:	7c22      	ldrb	r2, [r4, #16]
    2ac0:	0212      	lsls	r2, r2, #8
    2ac2:	430a      	orrs	r2, r1
    2ac4:	4bbb      	ldr	r3, [pc, #748]	; (2db4 <nwkRxTaskHandler+0x368>)
    2ac6:	429a      	cmp	r2, r3
    2ac8:	d103      	bne.n	2ad2 <nwkRxTaskHandler+0x86>
			header->nwkFcf.ackRequest) {
    2aca:	7ae3      	ldrb	r3, [r4, #11]
		return;
	}

#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2acc:	07de      	lsls	r6, r3, #31
    2ace:	d500      	bpl.n	2ad2 <nwkRxTaskHandler+0x86>
    2ad0:	e163      	b.n	2d9a <nwkRxTaskHandler+0x34e>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    2ad2:	7b61      	ldrb	r1, [r4, #13]
    2ad4:	7ba3      	ldrb	r3, [r4, #14]
    2ad6:	021b      	lsls	r3, r3, #8
    2ad8:	4ab7      	ldr	r2, [pc, #732]	; (2db8 <nwkRxTaskHandler+0x36c>)
    2ada:	8812      	ldrh	r2, [r2, #0]
    2adc:	430b      	orrs	r3, r1
    2ade:	429a      	cmp	r2, r3
    2ae0:	d100      	bne.n	2ae4 <nwkRxTaskHandler+0x98>
    2ae2:	e15a      	b.n	2d9a <nwkRxTaskHandler+0x34e>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    2ae4:	1c20      	adds	r0, r4, #0
    2ae6:	4bb5      	ldr	r3, [pc, #724]	; (2dbc <nwkRxTaskHandler+0x370>)
    2ae8:	4798      	blx	r3
    2aea:	4bb0      	ldr	r3, [pc, #704]	; (2dac <nwkRxTaskHandler+0x360>)
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2aec:	2700      	movs	r7, #0

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2aee:	1ca1      	adds	r1, r4, #2
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2af0:	1c18      	adds	r0, r3, #0

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2af2:	791a      	ldrb	r2, [r3, #4]
    2af4:	2a00      	cmp	r2, #0
    2af6:	d037      	beq.n	2b68 <nwkRxTaskHandler+0x11c>
    2af8:	7ace      	ldrb	r6, [r1, #11]
    2afa:	7b0a      	ldrb	r2, [r1, #12]
    2afc:	0212      	lsls	r2, r2, #8
    2afe:	4690      	mov	r8, r2
    2b00:	881a      	ldrh	r2, [r3, #0]
    2b02:	4694      	mov	ip, r2
    2b04:	4642      	mov	r2, r8
    2b06:	4316      	orrs	r6, r2
    2b08:	45b4      	cmp	ip, r6
    2b0a:	d12e      	bne.n	2b6a <nwkRxTaskHandler+0x11e>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    2b0c:	7b22      	ldrb	r2, [r4, #12]
    2b0e:	789b      	ldrb	r3, [r3, #2]
    2b10:	1a9b      	subs	r3, r3, r2
    2b12:	b2db      	uxtb	r3, r3

			if (diff < 8) {
    2b14:	2b07      	cmp	r3, #7
    2b16:	d81c      	bhi.n	2b52 <nwkRxTaskHandler+0x106>
				if (entry->mask & (1 << diff)) {
    2b18:	78c2      	ldrb	r2, [r0, #3]
    2b1a:	1c11      	adds	r1, r2, #0
    2b1c:	4119      	asrs	r1, r3
    2b1e:	07ce      	lsls	r6, r1, #31
    2b20:	d512      	bpl.n	2b48 <nwkRxTaskHandler+0xfc>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    2b22:	79e1      	ldrb	r1, [r4, #7]
    2b24:	7a23      	ldrb	r3, [r4, #8]
    2b26:	021b      	lsls	r3, r3, #8
    2b28:	4aa3      	ldr	r2, [pc, #652]	; (2db8 <nwkRxTaskHandler+0x36c>)
    2b2a:	8812      	ldrh	r2, [r2, #0]
    2b2c:	430b      	orrs	r3, r1
    2b2e:	429a      	cmp	r2, r3
    2b30:	d000      	beq.n	2b34 <nwkRxTaskHandler+0xe8>
    2b32:	e132      	b.n	2d9a <nwkRxTaskHandler+0x34e>
						nwkRouteRemove(
    2b34:	7be2      	ldrb	r2, [r4, #15]
    2b36:	7c20      	ldrb	r0, [r4, #16]
    2b38:	0200      	lsls	r0, r0, #8
    2b3a:	4310      	orrs	r0, r2
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    2b3c:	7ae1      	ldrb	r1, [r4, #11]
    2b3e:	0709      	lsls	r1, r1, #28

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    2b40:	0fc9      	lsrs	r1, r1, #31
    2b42:	4b9f      	ldr	r3, [pc, #636]	; (2dc0 <nwkRxTaskHandler+0x374>)
    2b44:	4798      	blx	r3
    2b46:	e128      	b.n	2d9a <nwkRxTaskHandler+0x34e>

	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    2b48:	2101      	movs	r1, #1
    2b4a:	4099      	lsls	r1, r3
    2b4c:	430a      	orrs	r2, r1
    2b4e:	70c2      	strb	r2, [r0, #3]
    2b50:	e14e      	b.n	2df0 <nwkRxTaskHandler+0x3a4>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    2b52:	7082      	strb	r2, [r0, #2]
				entry->mask = (entry->mask << shift) | 1;
    2b54:	78c2      	ldrb	r2, [r0, #3]
				}

				entry->mask |= (1 << diff);
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;
    2b56:	425b      	negs	r3, r3

				entry->seq = header->nwkSeq;
				entry->mask = (entry->mask << shift) | 1;
    2b58:	b2db      	uxtb	r3, r3
    2b5a:	409a      	lsls	r2, r3
    2b5c:	2301      	movs	r3, #1
    2b5e:	4313      	orrs	r3, r2
    2b60:	70c3      	strb	r3, [r0, #3]
				entry->ttl = DUPLICATE_REJECTION_TTL;
    2b62:	231f      	movs	r3, #31
    2b64:	7103      	strb	r3, [r0, #4]
    2b66:	e143      	b.n	2df0 <nwkRxTaskHandler+0x3a4>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2b68:	1c1f      	adds	r7, r3, #0
    2b6a:	3306      	adds	r3, #6
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    2b6c:	454b      	cmp	r3, r9
    2b6e:	d1bf      	bne.n	2af0 <nwkRxTaskHandler+0xa4>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2b70:	2f00      	cmp	r7, #0
    2b72:	d100      	bne.n	2b76 <nwkRxTaskHandler+0x12a>
    2b74:	e111      	b.n	2d9a <nwkRxTaskHandler+0x34e>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    2b76:	7b61      	ldrb	r1, [r4, #13]
    2b78:	7ba2      	ldrb	r2, [r4, #14]
    2b7a:	0212      	lsls	r2, r2, #8
    2b7c:	430a      	orrs	r2, r1
    2b7e:	803a      	strh	r2, [r7, #0]
	freeEntry->seq = header->nwkSeq;
    2b80:	7b23      	ldrb	r3, [r4, #12]
    2b82:	70bb      	strb	r3, [r7, #2]
	freeEntry->mask = 1;
    2b84:	2301      	movs	r3, #1
    2b86:	70fb      	strb	r3, [r7, #3]
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    2b88:	231f      	movs	r3, #31
    2b8a:	713b      	strb	r3, [r7, #4]

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    2b8c:	488d      	ldr	r0, [pc, #564]	; (2dc4 <nwkRxTaskHandler+0x378>)
    2b8e:	4b8e      	ldr	r3, [pc, #568]	; (2dc8 <nwkRxTaskHandler+0x37c>)
    2b90:	4798      	blx	r3
    2b92:	e12d      	b.n	2df0 <nwkRxTaskHandler+0x3a4>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2b94:	4b88      	ldr	r3, [pc, #544]	; (2db8 <nwkRxTaskHandler+0x36c>)
    2b96:	881a      	ldrh	r2, [r3, #0]
				header->nwkDstAddr &&
    2b98:	7be0      	ldrb	r0, [r4, #15]
    2b9a:	7c23      	ldrb	r3, [r4, #16]
    2b9c:	021b      	lsls	r3, r3, #8
    2b9e:	4303      	orrs	r3, r0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2ba0:	429a      	cmp	r2, r3
    2ba2:	d010      	beq.n	2bc6 <nwkRxTaskHandler+0x17a>
				header->nwkDstAddr &&
				0 == header->nwkFcf.linkLocal) {
    2ba4:	7ae1      	ldrb	r1, [r4, #11]
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    2ba6:	074f      	lsls	r7, r1, #29
    2ba8:	d40a      	bmi.n	2bc0 <nwkRxTaskHandler+0x174>
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    2baa:	1c20      	adds	r0, r4, #0
    2bac:	4b87      	ldr	r3, [pc, #540]	; (2dcc <nwkRxTaskHandler+0x380>)
    2bae:	4798      	blx	r3
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2bb0:	4b81      	ldr	r3, [pc, #516]	; (2db8 <nwkRxTaskHandler+0x36c>)
    2bb2:	881a      	ldrh	r2, [r3, #0]
    2bb4:	7be0      	ldrb	r0, [r4, #15]
    2bb6:	7c23      	ldrb	r3, [r4, #16]
    2bb8:	021b      	lsls	r3, r3, #8
    2bba:	4303      	orrs	r3, r0
    2bbc:	429a      	cmp	r2, r3
    2bbe:	d002      	beq.n	2bc6 <nwkRxTaskHandler+0x17a>
    2bc0:	497c      	ldr	r1, [pc, #496]	; (2db4 <nwkRxTaskHandler+0x368>)
    2bc2:	428b      	cmp	r3, r1
    2bc4:	d108      	bne.n	2bd8 <nwkRxTaskHandler+0x18c>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2bc6:	7ae3      	ldrb	r3, [r4, #11]
    2bc8:	0798      	lsls	r0, r3, #30
    2bca:	d502      	bpl.n	2bd2 <nwkRxTaskHandler+0x186>
				frame->state = NWK_RX_STATE_DECRYPT;
    2bcc:	2321      	movs	r3, #33	; 0x21
    2bce:	7023      	strb	r3, [r4, #0]
    2bd0:	e0e3      	b.n	2d9a <nwkRxTaskHandler+0x34e>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2bd2:	2322      	movs	r3, #34	; 0x22
    2bd4:	7023      	strb	r3, [r4, #0]
    2bd6:	e0e0      	b.n	2d9a <nwkRxTaskHandler+0x34e>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    2bd8:	79e1      	ldrb	r1, [r4, #7]
    2bda:	7a23      	ldrb	r3, [r4, #8]
    2bdc:	021b      	lsls	r3, r3, #8
    2bde:	430b      	orrs	r3, r1
    2be0:	429a      	cmp	r2, r3
    2be2:	d000      	beq.n	2be6 <nwkRxTaskHandler+0x19a>
    2be4:	e0d9      	b.n	2d9a <nwkRxTaskHandler+0x34e>
			frame->state = NWK_RX_STATE_ROUTE;
    2be6:	2323      	movs	r3, #35	; 0x23
    2be8:	7023      	strb	r3, [r4, #0]
    2bea:	e0d6      	b.n	2d9a <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    2bec:	1c20      	adds	r0, r4, #0
    2bee:	2100      	movs	r1, #0
    2bf0:	4b77      	ldr	r3, [pc, #476]	; (2dd0 <nwkRxTaskHandler+0x384>)
    2bf2:	4798      	blx	r3
		}
		break;
    2bf4:	e0d1      	b.n	2d9a <nwkRxTaskHandler+0x34e>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    2bf6:	2200      	movs	r2, #0
    2bf8:	4b76      	ldr	r3, [pc, #472]	; (2dd4 <nwkRxTaskHandler+0x388>)
    2bfa:	701a      	strb	r2, [r3, #0]
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    2bfc:	7c61      	ldrb	r1, [r4, #17]
    2bfe:	0909      	lsrs	r1, r1, #4
    2c00:	b2ca      	uxtb	r2, r1
    2c02:	3202      	adds	r2, #2
    2c04:	0092      	lsls	r2, r2, #2
    2c06:	4b6c      	ldr	r3, [pc, #432]	; (2db8 <nwkRxTaskHandler+0x36c>)
    2c08:	58d2      	ldr	r2, [r2, r3]
    2c0a:	2a00      	cmp	r2, #0
    2c0c:	d05f      	beq.n	2cce <nwkRxTaskHandler+0x282>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    2c0e:	1ca3      	adds	r3, r4, #2
    2c10:	7b67      	ldrb	r7, [r4, #13]
    2c12:	7ba0      	ldrb	r0, [r4, #14]
    2c14:	0200      	lsls	r0, r0, #8
    2c16:	4338      	orrs	r0, r7
    2c18:	4680      	mov	r8, r0
    2c1a:	466e      	mov	r6, sp
    2c1c:	8030      	strh	r0, [r6, #0]
	ind.dstAddr = header->nwkDstAddr;
    2c1e:	7be0      	ldrb	r0, [r4, #15]
    2c20:	7c26      	ldrb	r6, [r4, #16]
    2c22:	0236      	lsls	r6, r6, #8
    2c24:	1c37      	adds	r7, r6, #0
    2c26:	4307      	orrs	r7, r0
    2c28:	4668      	mov	r0, sp
    2c2a:	8047      	strh	r7, [r0, #2]
	ind.srcEndpoint = header->nwkSrcEndpoint;
    2c2c:	7c66      	ldrb	r6, [r4, #17]
    2c2e:	0736      	lsls	r6, r6, #28
    2c30:	0f36      	lsrs	r6, r6, #28
    2c32:	7106      	strb	r6, [r0, #4]
	ind.dstEndpoint = header->nwkDstEndpoint;
    2c34:	7141      	strb	r1, [r0, #5]
	ind.data = frame->payload;
    2c36:	2181      	movs	r1, #129	; 0x81
    2c38:	5c61      	ldrb	r1, [r4, r1]
    2c3a:	2082      	movs	r0, #130	; 0x82
    2c3c:	5c26      	ldrb	r6, [r4, r0]
    2c3e:	0236      	lsls	r6, r6, #8
    2c40:	4331      	orrs	r1, r6
    2c42:	2083      	movs	r0, #131	; 0x83
    2c44:	5c26      	ldrb	r6, [r4, r0]
    2c46:	0436      	lsls	r6, r6, #16
    2c48:	4331      	orrs	r1, r6
    2c4a:	2084      	movs	r0, #132	; 0x84
    2c4c:	5c26      	ldrb	r6, [r4, r0]
    2c4e:	0636      	lsls	r6, r6, #24
    2c50:	4331      	orrs	r1, r6
    2c52:	9102      	str	r1, [sp, #8]

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    2c54:	1a59      	subs	r1, r3, r1
    2c56:	468c      	mov	ip, r1
    2c58:	7861      	ldrb	r1, [r4, #1]
    2c5a:	4461      	add	r1, ip
	ind.size = nwkFramePayloadSize(frame);
    2c5c:	4668      	mov	r0, sp
    2c5e:	7301      	strb	r1, [r0, #12]
	ind.lqi = frame->rx.lqi;
    2c60:	2185      	movs	r1, #133	; 0x85
    2c62:	5c61      	ldrb	r1, [r4, r1]
    2c64:	7341      	strb	r1, [r0, #13]
	ind.rssi = frame->rx.rssi;
    2c66:	2186      	movs	r1, #134	; 0x86
    2c68:	5c61      	ldrb	r1, [r4, r1]
    2c6a:	7381      	strb	r1, [r0, #14]

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2c6c:	7ae3      	ldrb	r3, [r4, #11]
    2c6e:	07d9      	lsls	r1, r3, #31
    2c70:	0fc9      	lsrs	r1, r1, #31
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    2c72:	2602      	movs	r6, #2
    2c74:	4033      	ands	r3, r6
    2c76:	430b      	orrs	r3, r1
    2c78:	b2db      	uxtb	r3, r3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    2c7a:	7ae1      	ldrb	r1, [r4, #11]
    2c7c:	0749      	lsls	r1, r1, #29
    2c7e:	0fc9      	lsrs	r1, r1, #31
    2c80:	0149      	lsls	r1, r1, #5
    2c82:	430b      	orrs	r3, r1
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    2c84:	7ae1      	ldrb	r1, [r4, #11]
    2c86:	0709      	lsls	r1, r1, #28
    2c88:	0fc9      	lsrs	r1, r1, #31
    2c8a:	0189      	lsls	r1, r1, #6
    2c8c:	430b      	orrs	r3, r1
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    2c8e:	4952      	ldr	r1, [pc, #328]	; (2dd8 <nwkRxTaskHandler+0x38c>)
    2c90:	187f      	adds	r7, r7, r1
    2c92:	4279      	negs	r1, r7
    2c94:	414f      	adcs	r7, r1
    2c96:	00bf      	lsls	r7, r7, #2
    2c98:	433b      	orrs	r3, r7
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    2c9a:	7a67      	ldrb	r7, [r4, #9]
    2c9c:	7aa1      	ldrb	r1, [r4, #10]
    2c9e:	0209      	lsls	r1, r1, #8
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    2ca0:	4339      	orrs	r1, r7
    2ca2:	4646      	mov	r6, r8
    2ca4:	1a70      	subs	r0, r6, r1
    2ca6:	4241      	negs	r1, r0
    2ca8:	4148      	adcs	r0, r1
    2caa:	00c0      	lsls	r0, r0, #3
    2cac:	4303      	orrs	r3, r0
    2cae:	466f      	mov	r7, sp
    2cb0:	71bb      	strb	r3, [r7, #6]
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    2cb2:	7960      	ldrb	r0, [r4, #5]
    2cb4:	79a1      	ldrb	r1, [r4, #6]
    2cb6:	0209      	lsls	r1, r1, #8
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    2cb8:	4301      	orrs	r1, r0
    2cba:	4847      	ldr	r0, [pc, #284]	; (2dd8 <nwkRxTaskHandler+0x38c>)
    2cbc:	1809      	adds	r1, r1, r0
    2cbe:	4248      	negs	r0, r1
    2cc0:	4141      	adcs	r1, r0
    2cc2:	0109      	lsls	r1, r1, #4
    2cc4:	430b      	orrs	r3, r1
    2cc6:	71bb      	strb	r3, [r7, #6]
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    2cc8:	4668      	mov	r0, sp
    2cca:	4790      	blx	r2
    2ccc:	e000      	b.n	2cd0 <nwkRxTaskHandler+0x284>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2cce:	2000      	movs	r0, #0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2cd0:	7ae3      	ldrb	r3, [r4, #11]
		ack = false;
    2cd2:	07db      	lsls	r3, r3, #31
    2cd4:	17db      	asrs	r3, r3, #31
    2cd6:	4018      	ands	r0, r3
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2cd8:	79e3      	ldrb	r3, [r4, #7]
    2cda:	7a22      	ldrb	r2, [r4, #8]
    2cdc:	0212      	lsls	r2, r2, #8
    2cde:	431a      	orrs	r2, r3
    2ce0:	4b34      	ldr	r3, [pc, #208]	; (2db4 <nwkRxTaskHandler+0x368>)
    2ce2:	429a      	cmp	r2, r3
    2ce4:	d10b      	bne.n	2cfe <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2ce6:	7be1      	ldrb	r1, [r4, #15]
    2ce8:	7c23      	ldrb	r3, [r4, #16]
    2cea:	021b      	lsls	r3, r3, #8

	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    2cec:	4a32      	ldr	r2, [pc, #200]	; (2db8 <nwkRxTaskHandler+0x36c>)
    2cee:	8812      	ldrh	r2, [r2, #0]
    2cf0:	430b      	orrs	r3, r1
    2cf2:	429a      	cmp	r2, r3
    2cf4:	d103      	bne.n	2cfe <nwkRxTaskHandler+0x2b2>
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
    2cf6:	7ae3      	ldrb	r3, [r4, #11]
	if (0 == frame->header.nwkFcf.ackRequest) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
    2cf8:	0719      	lsls	r1, r3, #28
    2cfa:	d400      	bmi.n	2cfe <nwkRxTaskHandler+0x2b2>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    2cfc:	2001      	movs	r0, #1
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    2cfe:	7963      	ldrb	r3, [r4, #5]
    2d00:	79a2      	ldrb	r2, [r4, #6]
    2d02:	0212      	lsls	r2, r2, #8
    2d04:	431a      	orrs	r2, r3
    2d06:	4b2b      	ldr	r3, [pc, #172]	; (2db4 <nwkRxTaskHandler+0x368>)
    2d08:	429a      	cmp	r2, r3
    2d0a:	d03c      	beq.n	2d86 <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2d0c:	4b2a      	ldr	r3, [pc, #168]	; (2db8 <nwkRxTaskHandler+0x36c>)
    2d0e:	881a      	ldrh	r2, [r3, #0]
    2d10:	4b28      	ldr	r3, [pc, #160]	; (2db4 <nwkRxTaskHandler+0x368>)
    2d12:	429a      	cmp	r2, r3
    2d14:	d037      	beq.n	2d86 <nwkRxTaskHandler+0x33a>
		ack = false;
	}

	if (ack) {
    2d16:	2800      	cmp	r0, #0
    2d18:	d035      	beq.n	2d86 <nwkRxTaskHandler+0x33a>
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    2d1a:	4b30      	ldr	r3, [pc, #192]	; (2ddc <nwkRxTaskHandler+0x390>)
    2d1c:	4798      	blx	r3
    2d1e:	1e07      	subs	r7, r0, #0
    2d20:	d031      	beq.n	2d86 <nwkRxTaskHandler+0x33a>
		return;
	}

	nwkFrameCommandInit(ack);
    2d22:	4b2f      	ldr	r3, [pc, #188]	; (2de0 <nwkRxTaskHandler+0x394>)
    2d24:	4798      	blx	r3

	ack->size += sizeof(NwkCommandAck_t);
    2d26:	787b      	ldrb	r3, [r7, #1]
    2d28:	3303      	adds	r3, #3
    2d2a:	707b      	strb	r3, [r7, #1]
	ack->tx.confirm = NULL;
    2d2c:	2200      	movs	r2, #0
    2d2e:	2389      	movs	r3, #137	; 0x89
    2d30:	54fa      	strb	r2, [r7, r3]
    2d32:	238a      	movs	r3, #138	; 0x8a
    2d34:	54fa      	strb	r2, [r7, r3]
    2d36:	238b      	movs	r3, #139	; 0x8b
    2d38:	54fa      	strb	r2, [r7, r3]
    2d3a:	238c      	movs	r3, #140	; 0x8c
    2d3c:	54fa      	strb	r2, [r7, r3]

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    2d3e:	7ae2      	ldrb	r2, [r4, #11]
    2d40:	2302      	movs	r3, #2
    2d42:	401a      	ands	r2, r3
    2d44:	7afb      	ldrb	r3, [r7, #11]
    2d46:	2102      	movs	r1, #2
    2d48:	438b      	bics	r3, r1
    2d4a:	4313      	orrs	r3, r2
    2d4c:	72fb      	strb	r3, [r7, #11]
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2d4e:	7b62      	ldrb	r2, [r4, #13]
    2d50:	7ba3      	ldrb	r3, [r4, #14]
    2d52:	73fa      	strb	r2, [r7, #15]
    2d54:	743b      	strb	r3, [r7, #16]

	command = (NwkCommandAck_t *)ack->payload;
    2d56:	2381      	movs	r3, #129	; 0x81
    2d58:	5cfa      	ldrb	r2, [r7, r3]
    2d5a:	2382      	movs	r3, #130	; 0x82
    2d5c:	5cfb      	ldrb	r3, [r7, r3]
    2d5e:	021b      	lsls	r3, r3, #8
    2d60:	4313      	orrs	r3, r2
    2d62:	2283      	movs	r2, #131	; 0x83
    2d64:	5cba      	ldrb	r2, [r7, r2]
    2d66:	0412      	lsls	r2, r2, #16
    2d68:	4313      	orrs	r3, r2
    2d6a:	2284      	movs	r2, #132	; 0x84
    2d6c:	5cba      	ldrb	r2, [r7, r2]
    2d6e:	0612      	lsls	r2, r2, #24
    2d70:	4313      	orrs	r3, r2
	command->id = NWK_COMMAND_ACK;
    2d72:	2200      	movs	r2, #0
    2d74:	701a      	strb	r2, [r3, #0]
	command->control = nwkRxAckControl;
    2d76:	4a17      	ldr	r2, [pc, #92]	; (2dd4 <nwkRxTaskHandler+0x388>)
    2d78:	7812      	ldrb	r2, [r2, #0]
    2d7a:	709a      	strb	r2, [r3, #2]
	command->seq = frame->header.nwkSeq;
    2d7c:	7b22      	ldrb	r2, [r4, #12]
    2d7e:	705a      	strb	r2, [r3, #1]

	nwkTxFrame(ack);
    2d80:	1c38      	adds	r0, r7, #0
    2d82:	4b18      	ldr	r3, [pc, #96]	; (2de4 <nwkRxTaskHandler+0x398>)
    2d84:	4798      	blx	r3

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    2d86:	2324      	movs	r3, #36	; 0x24
    2d88:	7023      	strb	r3, [r4, #0]
    2d8a:	e006      	b.n	2d9a <nwkRxTaskHandler+0x34e>
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    2d8c:	1c20      	adds	r0, r4, #0
    2d8e:	4b16      	ldr	r3, [pc, #88]	; (2de8 <nwkRxTaskHandler+0x39c>)
    2d90:	4798      	blx	r3
		}
		break;
    2d92:	e002      	b.n	2d9a <nwkRxTaskHandler+0x34e>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    2d94:	1c20      	adds	r0, r4, #0
    2d96:	4b15      	ldr	r3, [pc, #84]	; (2dec <nwkRxTaskHandler+0x3a0>)
    2d98:	4798      	blx	r3
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2d9a:	1c20      	adds	r0, r4, #0
    2d9c:	47a8      	blx	r5
    2d9e:	1e04      	subs	r4, r0, #0
    2da0:	d000      	beq.n	2da4 <nwkRxTaskHandler+0x358>
    2da2:	e65f      	b.n	2a64 <nwkRxTaskHandler+0x18>
    2da4:	e02d      	b.n	2e02 <nwkRxTaskHandler+0x3b6>
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	00002575 	.word	0x00002575
    2dac:	2000059c 	.word	0x2000059c
    2db0:	00007c3c 	.word	0x00007c3c
    2db4:	0000ffff 	.word	0x0000ffff
    2db8:	200008dc 	.word	0x200008dc
    2dbc:	000026c5 	.word	0x000026c5
    2dc0:	000026ad 	.word	0x000026ad
    2dc4:	200005dc 	.word	0x200005dc
    2dc8:	00003829 	.word	0x00003829
    2dcc:	00003239 	.word	0x00003239
    2dd0:	00002e3d 	.word	0x00002e3d
    2dd4:	200005d8 	.word	0x200005d8
    2dd8:	ffff0001 	.word	0xffff0001
    2ddc:	000024f1 	.word	0x000024f1
    2de0:	000025b1 	.word	0x000025b1
    2de4:	00003179 	.word	0x00003179
    2de8:	00002851 	.word	0x00002851
    2dec:	00002561 	.word	0x00002561
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    2df0:	79e1      	ldrb	r1, [r4, #7]
    2df2:	7a22      	ldrb	r2, [r4, #8]
    2df4:	0212      	lsls	r2, r2, #8
    2df6:	430a      	orrs	r2, r1
    2df8:	4b04      	ldr	r3, [pc, #16]	; (2e0c <nwkRxTaskHandler+0x3c0>)
    2dfa:	429a      	cmp	r2, r3
    2dfc:	d000      	beq.n	2e00 <nwkRxTaskHandler+0x3b4>
    2dfe:	e6d7      	b.n	2bb0 <nwkRxTaskHandler+0x164>
    2e00:	e6c8      	b.n	2b94 <nwkRxTaskHandler+0x148>
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    2e02:	b005      	add	sp, #20
    2e04:	bc0c      	pop	{r2, r3}
    2e06:	4690      	mov	r8, r2
    2e08:	4699      	mov	r9, r3
    2e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e0c:	0000ffff 	.word	0x0000ffff

00002e10 <nwkSecurityInit>:
/*************************************************************************//**
*  @brief Initializes the Security module
*****************************************************************************/
void nwkSecurityInit(void)
{
	nwkSecurityActiveFrames = 0;
    2e10:	2300      	movs	r3, #0
    2e12:	4a02      	ldr	r2, [pc, #8]	; (2e1c <nwkSecurityInit+0xc>)
    2e14:	7013      	strb	r3, [r2, #0]
	nwkSecurityActiveFrame = NULL;
    2e16:	4a02      	ldr	r2, [pc, #8]	; (2e20 <nwkSecurityInit+0x10>)
    2e18:	6013      	str	r3, [r2, #0]
}
    2e1a:	4770      	bx	lr
    2e1c:	200005f0 	.word	0x200005f0
    2e20:	200005f4 	.word	0x200005f4

00002e24 <NWK_SetSecurityKey>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
    2e24:	b508      	push	{r3, lr}
    2e26:	1c01      	adds	r1, r0, #0
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    2e28:	4802      	ldr	r0, [pc, #8]	; (2e34 <NWK_SetSecurityKey+0x10>)
    2e2a:	2210      	movs	r2, #16
    2e2c:	4b02      	ldr	r3, [pc, #8]	; (2e38 <NWK_SetSecurityKey+0x14>)
    2e2e:	4798      	blx	r3
}
    2e30:	bd08      	pop	{r3, pc}
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	20000924 	.word	0x20000924
    2e38:	00006af9 	.word	0x00006af9

00002e3c <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    2e3c:	2900      	cmp	r1, #0
    2e3e:	d002      	beq.n	2e46 <nwkSecurityProcess+0xa>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    2e40:	2330      	movs	r3, #48	; 0x30
    2e42:	7003      	strb	r3, [r0, #0]
    2e44:	e001      	b.n	2e4a <nwkSecurityProcess+0xe>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    2e46:	2331      	movs	r3, #49	; 0x31
    2e48:	7003      	strb	r3, [r0, #0]
	}

	++nwkSecurityActiveFrames;
    2e4a:	4b02      	ldr	r3, [pc, #8]	; (2e54 <nwkSecurityProcess+0x18>)
    2e4c:	781a      	ldrb	r2, [r3, #0]
    2e4e:	3201      	adds	r2, #1
    2e50:	701a      	strb	r2, [r3, #0]
}
    2e52:	4770      	bx	lr
    2e54:	200005f0 	.word	0x200005f0

00002e58 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    2e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e5a:	4647      	mov	r7, r8
    2e5c:	b480      	push	{r7}
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2e5e:	4b24      	ldr	r3, [pc, #144]	; (2ef0 <SYS_EncryptConf+0x98>)
    2e60:	681e      	ldr	r6, [r3, #0]
    2e62:	4b24      	ldr	r3, [pc, #144]	; (2ef4 <SYS_EncryptConf+0x9c>)
    2e64:	781b      	ldrb	r3, [r3, #0]
    2e66:	4698      	mov	r8, r3
    2e68:	2381      	movs	r3, #129	; 0x81
    2e6a:	5cf3      	ldrb	r3, [r6, r3]
    2e6c:	2282      	movs	r2, #130	; 0x82
    2e6e:	5cb1      	ldrb	r1, [r6, r2]
    2e70:	0209      	lsls	r1, r1, #8
    2e72:	4319      	orrs	r1, r3
    2e74:	2383      	movs	r3, #131	; 0x83
    2e76:	5cf4      	ldrb	r4, [r6, r3]
    2e78:	0424      	lsls	r4, r4, #16
    2e7a:	4321      	orrs	r1, r4
    2e7c:	2384      	movs	r3, #132	; 0x84
    2e7e:	5cf4      	ldrb	r4, [r6, r3]
    2e80:	0624      	lsls	r4, r4, #24
    2e82:	4321      	orrs	r1, r4
    2e84:	4441      	add	r1, r8
	uint8_t block;

	block
		= (nwkSecuritySize <
    2e86:	4b1c      	ldr	r3, [pc, #112]	; (2ef8 <SYS_EncryptConf+0xa0>)
    2e88:	781b      	ldrb	r3, [r3, #0]
    2e8a:	469c      	mov	ip, r3
    2e8c:	1c1f      	adds	r7, r3, #0
    2e8e:	2b10      	cmp	r3, #16
    2e90:	d900      	bls.n	2e94 <SYS_EncryptConf+0x3c>
    2e92:	2710      	movs	r7, #16
    2e94:	b2ff      	uxtb	r7, r7
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2e96:	2f00      	cmp	r7, #0
    2e98:	d016      	beq.n	2ec8 <SYS_EncryptConf+0x70>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    2e9a:	4b18      	ldr	r3, [pc, #96]	; (2efc <SYS_EncryptConf+0xa4>)
    2e9c:	781d      	ldrb	r5, [r3, #0]
    2e9e:	1c0b      	adds	r3, r1, #0
    2ea0:	4a17      	ldr	r2, [pc, #92]	; (2f00 <SYS_EncryptConf+0xa8>)
    2ea2:	1e7c      	subs	r4, r7, #1
    2ea4:	b2e4      	uxtb	r4, r4
    2ea6:	190c      	adds	r4, r1, r4
    2ea8:	3401      	adds	r4, #1
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    2eaa:	7810      	ldrb	r0, [r2, #0]
    2eac:	7819      	ldrb	r1, [r3, #0]
    2eae:	4041      	eors	r1, r0
    2eb0:	7019      	strb	r1, [r3, #0]

		if (nwkSecurityEncrypt) {
    2eb2:	2d00      	cmp	r5, #0
    2eb4:	d001      	beq.n	2eba <SYS_EncryptConf+0x62>
			vector[i] = text[i];
    2eb6:	7011      	strb	r1, [r2, #0]
    2eb8:	e002      	b.n	2ec0 <SYS_EncryptConf+0x68>
		} else {
			vector[i] ^= text[i];
    2eba:	7810      	ldrb	r0, [r2, #0]
    2ebc:	4041      	eors	r1, r0
    2ebe:	7011      	strb	r1, [r2, #0]
    2ec0:	3301      	adds	r3, #1
    2ec2:	3201      	adds	r2, #1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2ec4:	42a3      	cmp	r3, r4
    2ec6:	d1f0      	bne.n	2eaa <SYS_EncryptConf+0x52>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2ec8:	4643      	mov	r3, r8
    2eca:	18fa      	adds	r2, r7, r3
    2ecc:	4b09      	ldr	r3, [pc, #36]	; (2ef4 <SYS_EncryptConf+0x9c>)
    2ece:	701a      	strb	r2, [r3, #0]
	nwkSecuritySize -= block;
    2ed0:	4663      	mov	r3, ip
    2ed2:	1bdf      	subs	r7, r3, r7
    2ed4:	b2ff      	uxtb	r7, r7
    2ed6:	4b08      	ldr	r3, [pc, #32]	; (2ef8 <SYS_EncryptConf+0xa0>)
    2ed8:	701f      	strb	r7, [r3, #0]

	if (nwkSecuritySize > 0) {
    2eda:	2f00      	cmp	r7, #0
    2edc:	d002      	beq.n	2ee4 <SYS_EncryptConf+0x8c>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    2ede:	2332      	movs	r3, #50	; 0x32
    2ee0:	7033      	strb	r3, [r6, #0]
    2ee2:	e001      	b.n	2ee8 <SYS_EncryptConf+0x90>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    2ee4:	2334      	movs	r3, #52	; 0x34
    2ee6:	7033      	strb	r3, [r6, #0]
	}
}
    2ee8:	bc04      	pop	{r2}
    2eea:	4690      	mov	r8, r2
    2eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	200005f4 	.word	0x200005f4
    2ef4:	200005f8 	.word	0x200005f8
    2ef8:	200005f9 	.word	0x200005f9
    2efc:	200005fa 	.word	0x200005fa
    2f00:	200005fc 	.word	0x200005fc

00002f04 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    2f04:	b530      	push	{r4, r5, lr}
    2f06:	b083      	sub	sp, #12
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    2f08:	4b56      	ldr	r3, [pc, #344]	; (3064 <nwkSecurityTaskHandler+0x160>)
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d100      	bne.n	2f12 <nwkSecurityTaskHandler+0xe>
    2f10:	e0a5      	b.n	305e <nwkSecurityTaskHandler+0x15a>
		return;
	}

	if (nwkSecurityActiveFrame) {
    2f12:	4b55      	ldr	r3, [pc, #340]	; (3068 <nwkSecurityTaskHandler+0x164>)
    2f14:	681c      	ldr	r4, [r3, #0]
    2f16:	2c00      	cmp	r4, #0
    2f18:	d100      	bne.n	2f1c <nwkSecurityTaskHandler+0x18>
    2f1a:	e09b      	b.n	3054 <nwkSecurityTaskHandler+0x150>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    2f1c:	7823      	ldrb	r3, [r4, #0]
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    2f1e:	2b34      	cmp	r3, #52	; 0x34
    2f20:	d145      	bne.n	2fae <nwkSecurityTaskHandler+0xaa>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    2f22:	2381      	movs	r3, #129	; 0x81
    2f24:	5ce3      	ldrb	r3, [r4, r3]
    2f26:	2282      	movs	r2, #130	; 0x82
    2f28:	5ca1      	ldrb	r1, [r4, r2]
    2f2a:	0209      	lsls	r1, r1, #8
    2f2c:	4319      	orrs	r1, r3
    2f2e:	2383      	movs	r3, #131	; 0x83
    2f30:	5ce3      	ldrb	r3, [r4, r3]
    2f32:	041b      	lsls	r3, r3, #16
    2f34:	4319      	orrs	r1, r3
    2f36:	2384      	movs	r3, #132	; 0x84
    2f38:	5ce3      	ldrb	r3, [r4, r3]
    2f3a:	061b      	lsls	r3, r3, #24
    2f3c:	4319      	orrs	r1, r3
    2f3e:	4b4b      	ldr	r3, [pc, #300]	; (306c <nwkSecurityTaskHandler+0x168>)
    2f40:	781b      	ldrb	r3, [r3, #0]
    2f42:	18c9      	adds	r1, r1, r3
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2f44:	4b4a      	ldr	r3, [pc, #296]	; (3070 <nwkSecurityTaskHandler+0x16c>)
    2f46:	685d      	ldr	r5, [r3, #4]
    2f48:	681a      	ldr	r2, [r3, #0]
    2f4a:	4055      	eors	r5, r2
    2f4c:	689a      	ldr	r2, [r3, #8]
    2f4e:	4055      	eors	r5, r2
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    2f50:	68db      	ldr	r3, [r3, #12]
    2f52:	405d      	eors	r5, r3
/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    2f54:	9500      	str	r5, [sp, #0]
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    2f56:	4b47      	ldr	r3, [pc, #284]	; (3074 <nwkSecurityTaskHandler+0x170>)
    2f58:	781b      	ldrb	r3, [r3, #0]
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d009      	beq.n	2f72 <nwkSecurityTaskHandler+0x6e>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    2f5e:	1c08      	adds	r0, r1, #0
    2f60:	4669      	mov	r1, sp
    2f62:	2204      	movs	r2, #4
    2f64:	4b44      	ldr	r3, [pc, #272]	; (3078 <nwkSecurityTaskHandler+0x174>)
    2f66:	4798      	blx	r3
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    2f68:	7863      	ldrb	r3, [r4, #1]
    2f6a:	3304      	adds	r3, #4
    2f6c:	7063      	strb	r3, [r4, #1]
		return true;
    2f6e:	2101      	movs	r1, #1
    2f70:	e008      	b.n	2f84 <nwkSecurityTaskHandler+0x80>
	} else {
		memcpy((uint8_t *)&tmic, mic, NWK_SECURITY_MIC_SIZE);
    2f72:	a801      	add	r0, sp, #4
    2f74:	2204      	movs	r2, #4
    2f76:	4b40      	ldr	r3, [pc, #256]	; (3078 <nwkSecurityTaskHandler+0x174>)
    2f78:	4798      	blx	r3
		return vmic == tmic;
    2f7a:	9b01      	ldr	r3, [sp, #4]
    2f7c:	1ae9      	subs	r1, r5, r3
    2f7e:	424d      	negs	r5, r1
    2f80:	4169      	adcs	r1, r5
    2f82:	b2c9      	uxtb	r1, r1
	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
    2f84:	4b3b      	ldr	r3, [pc, #236]	; (3074 <nwkSecurityTaskHandler+0x170>)
    2f86:	781b      	ldrb	r3, [r3, #0]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d004      	beq.n	2f96 <nwkSecurityTaskHandler+0x92>
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    2f8c:	4b36      	ldr	r3, [pc, #216]	; (3068 <nwkSecurityTaskHandler+0x164>)
    2f8e:	6818      	ldr	r0, [r3, #0]
    2f90:	4b3a      	ldr	r3, [pc, #232]	; (307c <nwkSecurityTaskHandler+0x178>)
    2f92:	4798      	blx	r3
    2f94:	e003      	b.n	2f9e <nwkSecurityTaskHandler+0x9a>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    2f96:	4b34      	ldr	r3, [pc, #208]	; (3068 <nwkSecurityTaskHandler+0x164>)
    2f98:	6818      	ldr	r0, [r3, #0]
    2f9a:	4b39      	ldr	r3, [pc, #228]	; (3080 <nwkSecurityTaskHandler+0x17c>)
    2f9c:	4798      	blx	r3
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    2f9e:	2200      	movs	r2, #0
    2fa0:	4b31      	ldr	r3, [pc, #196]	; (3068 <nwkSecurityTaskHandler+0x164>)
    2fa2:	601a      	str	r2, [r3, #0]
			--nwkSecurityActiveFrames;
    2fa4:	4b2f      	ldr	r3, [pc, #188]	; (3064 <nwkSecurityTaskHandler+0x160>)
    2fa6:	781a      	ldrb	r2, [r3, #0]
    2fa8:	3a01      	subs	r2, #1
    2faa:	701a      	strb	r2, [r3, #0]
    2fac:	e057      	b.n	305e <nwkSecurityTaskHandler+0x15a>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    2fae:	2b32      	cmp	r3, #50	; 0x32
    2fb0:	d155      	bne.n	305e <nwkSecurityTaskHandler+0x15a>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    2fb2:	2333      	movs	r3, #51	; 0x33
    2fb4:	7023      	strb	r3, [r4, #0]
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    2fb6:	482e      	ldr	r0, [pc, #184]	; (3070 <nwkSecurityTaskHandler+0x16c>)
    2fb8:	4932      	ldr	r1, [pc, #200]	; (3084 <nwkSecurityTaskHandler+0x180>)
    2fba:	4b33      	ldr	r3, [pc, #204]	; (3088 <nwkSecurityTaskHandler+0x184>)
    2fbc:	4798      	blx	r3
    2fbe:	e04e      	b.n	305e <nwkSecurityTaskHandler+0x15a>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    2fc0:	7803      	ldrb	r3, [r0, #0]
    2fc2:	3b30      	subs	r3, #48	; 0x30
    2fc4:	2b01      	cmp	r3, #1
    2fc6:	d847      	bhi.n	3058 <nwkSecurityTaskHandler+0x154>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    2fc8:	4b27      	ldr	r3, [pc, #156]	; (3068 <nwkSecurityTaskHandler+0x164>)
    2fca:	6018      	str	r0, [r3, #0]
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    2fcc:	4a28      	ldr	r2, [pc, #160]	; (3070 <nwkSecurityTaskHandler+0x16c>)
    2fce:	7b01      	ldrb	r1, [r0, #12]
    2fd0:	6011      	str	r1, [r2, #0]
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2fd2:	7bc1      	ldrb	r1, [r0, #15]
    2fd4:	7c04      	ldrb	r4, [r0, #16]
    2fd6:	0224      	lsls	r4, r4, #8
    2fd8:	430c      	orrs	r4, r1
    2fda:	0424      	lsls	r4, r4, #16
			16) | header->nwkDstEndpoint;
    2fdc:	7c41      	ldrb	r1, [r0, #17]
    2fde:	0909      	lsrs	r1, r1, #4
    2fe0:	4321      	orrs	r1, r4
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    2fe2:	6051      	str	r1, [r2, #4]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2fe4:	7b41      	ldrb	r1, [r0, #13]
    2fe6:	7b84      	ldrb	r4, [r0, #14]
    2fe8:	0224      	lsls	r4, r4, #8
    2fea:	430c      	orrs	r4, r1
    2fec:	0424      	lsls	r4, r4, #16
			16) | header->nwkSrcEndpoint;
    2fee:	7c41      	ldrb	r1, [r0, #17]
    2ff0:	0709      	lsls	r1, r1, #28
    2ff2:	0f09      	lsrs	r1, r1, #28
    2ff4:	4321      	orrs	r1, r4
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    2ff6:	6091      	str	r1, [r2, #8]
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;
    2ff8:	7ac1      	ldrb	r1, [r0, #11]
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2ffa:	7944      	ldrb	r4, [r0, #5]
    2ffc:	7983      	ldrb	r3, [r0, #6]
    2ffe:	021b      	lsls	r3, r3, #8
    3000:	4323      	orrs	r3, r4
    3002:	041b      	lsls	r3, r3, #16
			16) | *(uint8_t *)&header->nwkFcf;
    3004:	430b      	orrs	r3, r1
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    3006:	60d3      	str	r3, [r2, #12]
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    3008:	7803      	ldrb	r3, [r0, #0]
    300a:	2b31      	cmp	r3, #49	; 0x31
    300c:	d102      	bne.n	3014 <nwkSecurityTaskHandler+0x110>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    300e:	7843      	ldrb	r3, [r0, #1]
    3010:	3b04      	subs	r3, #4
    3012:	7043      	strb	r3, [r0, #1]
    3014:	1c83      	adds	r3, r0, #2
    3016:	2281      	movs	r2, #129	; 0x81
    3018:	5c81      	ldrb	r1, [r0, r2]
    301a:	2282      	movs	r2, #130	; 0x82
    301c:	5c82      	ldrb	r2, [r0, r2]
    301e:	0212      	lsls	r2, r2, #8
    3020:	430a      	orrs	r2, r1
    3022:	2183      	movs	r1, #131	; 0x83
    3024:	5c41      	ldrb	r1, [r0, r1]
    3026:	0409      	lsls	r1, r1, #16
    3028:	430a      	orrs	r2, r1
    302a:	2184      	movs	r1, #132	; 0x84
    302c:	5c41      	ldrb	r1, [r0, r1]
    302e:	0609      	lsls	r1, r1, #24
    3030:	430a      	orrs	r2, r1
    3032:	1a9a      	subs	r2, r3, r2
    3034:	7843      	ldrb	r3, [r0, #1]
    3036:	18d2      	adds	r2, r2, r3
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    3038:	4b14      	ldr	r3, [pc, #80]	; (308c <nwkSecurityTaskHandler+0x188>)
    303a:	701a      	strb	r2, [r3, #0]
	nwkSecurityOffset = 0;
    303c:	2200      	movs	r2, #0
    303e:	4b0b      	ldr	r3, [pc, #44]	; (306c <nwkSecurityTaskHandler+0x168>)
    3040:	701a      	strb	r2, [r3, #0]
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    3042:	7802      	ldrb	r2, [r0, #0]
    3044:	3a30      	subs	r2, #48	; 0x30
    3046:	4253      	negs	r3, r2
    3048:	415a      	adcs	r2, r3
    304a:	4b0a      	ldr	r3, [pc, #40]	; (3074 <nwkSecurityTaskHandler+0x170>)
    304c:	701a      	strb	r2, [r3, #0]
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    304e:	2332      	movs	r3, #50	; 0x32
    3050:	7003      	strb	r3, [r0, #0]
    3052:	e004      	b.n	305e <nwkSecurityTaskHandler+0x15a>

	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
    3054:	2000      	movs	r0, #0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    3056:	4c0e      	ldr	r4, [pc, #56]	; (3090 <nwkSecurityTaskHandler+0x18c>)
    3058:	47a0      	blx	r4
    305a:	2800      	cmp	r0, #0
    305c:	d1b0      	bne.n	2fc0 <nwkSecurityTaskHandler+0xbc>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    305e:	b003      	add	sp, #12
    3060:	bd30      	pop	{r4, r5, pc}
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	200005f0 	.word	0x200005f0
    3068:	200005f4 	.word	0x200005f4
    306c:	200005f8 	.word	0x200005f8
    3070:	200005fc 	.word	0x200005fc
    3074:	200005fa 	.word	0x200005fa
    3078:	00006af9 	.word	0x00006af9
    307c:	00003301 	.word	0x00003301
    3080:	00002a3d 	.word	0x00002a3d
    3084:	20000924 	.word	0x20000924
    3088:	00003731 	.word	0x00003731
    308c:	200005f9 	.word	0x200005f9
    3090:	00002575 	.word	0x00002575

00003094 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    3094:	b5f0      	push	{r4, r5, r6, r7, lr}
    3096:	4647      	mov	r7, r8
    3098:	b480      	push	{r7}
    309a:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    309c:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    309e:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    30a0:	4c0f      	ldr	r4, [pc, #60]	; (30e0 <nwkTxDelayTimerHandler+0x4c>)
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    30a2:	2686      	movs	r6, #134	; 0x86
    30a4:	2587      	movs	r5, #135	; 0x87
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    30a6:	e010      	b.n	30ca <nwkTxDelayTimerHandler+0x36>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    30a8:	7803      	ldrb	r3, [r0, #0]
    30aa:	2b11      	cmp	r3, #17
    30ac:	d10d      	bne.n	30ca <nwkTxDelayTimerHandler+0x36>
			restart = true;

			if (0 == --frame->tx.timeout) {
    30ae:	5d82      	ldrb	r2, [r0, r6]
    30b0:	5d43      	ldrb	r3, [r0, r5]
    30b2:	021b      	lsls	r3, r3, #8
    30b4:	4313      	orrs	r3, r2
    30b6:	3b01      	subs	r3, #1
    30b8:	b29b      	uxth	r3, r3
    30ba:	5583      	strb	r3, [r0, r6]
    30bc:	0a1a      	lsrs	r2, r3, #8
    30be:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    30c0:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    30c2:	2b00      	cmp	r3, #0
    30c4:	d101      	bne.n	30ca <nwkTxDelayTimerHandler+0x36>
				frame->state = NWK_TX_STATE_SEND;
    30c6:	2313      	movs	r3, #19
    30c8:	7003      	strb	r3, [r0, #0]
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    30ca:	47a0      	blx	r4
    30cc:	2800      	cmp	r0, #0
    30ce:	d1eb      	bne.n	30a8 <nwkTxDelayTimerHandler+0x14>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    30d0:	2f00      	cmp	r7, #0
    30d2:	d002      	beq.n	30da <nwkTxDelayTimerHandler+0x46>
		SYS_TimerStart(timer);
    30d4:	4640      	mov	r0, r8
    30d6:	4b03      	ldr	r3, [pc, #12]	; (30e4 <nwkTxDelayTimerHandler+0x50>)
    30d8:	4798      	blx	r3
	}
}
    30da:	bc04      	pop	{r2}
    30dc:	4690      	mov	r8, r2
    30de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30e0:	00002575 	.word	0x00002575
    30e4:	00003829 	.word	0x00003829

000030e8 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    30e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ea:	4647      	mov	r7, r8
    30ec:	b480      	push	{r7}
    30ee:	4680      	mov	r8, r0
	NwkFrame_t *frame = NULL;
	bool restart = false;
    30f0:	2700      	movs	r7, #0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    30f2:	2000      	movs	r0, #0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    30f4:	4c11      	ldr	r4, [pc, #68]	; (313c <nwkTxAckWaitTimerHandler+0x54>)
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;

			if (0 == --frame->tx.timeout) {
    30f6:	2686      	movs	r6, #134	; 0x86
    30f8:	2587      	movs	r5, #135	; 0x87
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    30fa:	e013      	b.n	3124 <nwkTxAckWaitTimerHandler+0x3c>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    30fc:	7803      	ldrb	r3, [r0, #0]
    30fe:	2b16      	cmp	r3, #22
    3100:	d110      	bne.n	3124 <nwkTxAckWaitTimerHandler+0x3c>
			restart = true;

			if (0 == --frame->tx.timeout) {
    3102:	5d82      	ldrb	r2, [r0, r6]
    3104:	5d43      	ldrb	r3, [r0, r5]
    3106:	021b      	lsls	r3, r3, #8
    3108:	4313      	orrs	r3, r2
    310a:	3b01      	subs	r3, #1
    310c:	b29b      	uxth	r3, r3
    310e:	5583      	strb	r3, [r0, r6]
    3110:	0a1a      	lsrs	r2, r3, #8
    3112:	5542      	strb	r2, [r0, r5]
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    3114:	2701      	movs	r7, #1

			if (0 == --frame->tx.timeout) {
    3116:	2b00      	cmp	r3, #0
    3118:	d104      	bne.n	3124 <nwkTxAckWaitTimerHandler+0x3c>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    311a:	2317      	movs	r3, #23
    311c:	7003      	strb	r3, [r0, #0]
	frame->tx.status = status;
    311e:	2210      	movs	r2, #16
    3120:	2385      	movs	r3, #133	; 0x85
    3122:	54c2      	strb	r2, [r0, r3]
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3124:	47a0      	blx	r4
    3126:	2800      	cmp	r0, #0
    3128:	d1e8      	bne.n	30fc <nwkTxAckWaitTimerHandler+0x14>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    312a:	2f00      	cmp	r7, #0
    312c:	d002      	beq.n	3134 <nwkTxAckWaitTimerHandler+0x4c>
		SYS_TimerStart(timer);
    312e:	4640      	mov	r0, r8
    3130:	4b03      	ldr	r3, [pc, #12]	; (3140 <nwkTxAckWaitTimerHandler+0x58>)
    3132:	4798      	blx	r3
	}
}
    3134:	bc04      	pop	{r2}
    3136:	4690      	mov	r8, r2
    3138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	00002575 	.word	0x00002575
    3140:	00003829 	.word	0x00003829

00003144 <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    3144:	2200      	movs	r2, #0
    3146:	4b07      	ldr	r3, [pc, #28]	; (3164 <nwkTxInit+0x20>)
    3148:	601a      	str	r2, [r3, #0]

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    314a:	4b07      	ldr	r3, [pc, #28]	; (3168 <nwkTxInit+0x24>)
    314c:	2132      	movs	r1, #50	; 0x32
    314e:	6099      	str	r1, [r3, #8]
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    3150:	731a      	strb	r2, [r3, #12]
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    3152:	4906      	ldr	r1, [pc, #24]	; (316c <nwkTxInit+0x28>)
    3154:	6119      	str	r1, [r3, #16]

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    3156:	4b06      	ldr	r3, [pc, #24]	; (3170 <nwkTxInit+0x2c>)
    3158:	210a      	movs	r1, #10
    315a:	6099      	str	r1, [r3, #8]
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    315c:	731a      	strb	r2, [r3, #12]
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    315e:	4a05      	ldr	r2, [pc, #20]	; (3174 <nwkTxInit+0x30>)
    3160:	611a      	str	r2, [r3, #16]
}
    3162:	4770      	bx	lr
    3164:	20000620 	.word	0x20000620
    3168:	2000060c 	.word	0x2000060c
    316c:	000030e9 	.word	0x000030e9
    3170:	20000624 	.word	0x20000624
    3174:	00003095 	.word	0x00003095

00003178 <nwkTxFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    3178:	b510      	push	{r4, lr}
    317a:	1c04      	adds	r4, r0, #0
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    317c:	2388      	movs	r3, #136	; 0x88
    317e:	5cc3      	ldrb	r3, [r0, r3]
    3180:	0799      	lsls	r1, r3, #30
    3182:	d502      	bpl.n	318a <nwkTxFrame+0x12>
		frame->state = NWK_TX_STATE_DELAY;
    3184:	2212      	movs	r2, #18
    3186:	7002      	strb	r2, [r0, #0]
    3188:	e007      	b.n	319a <nwkTxFrame+0x22>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    318a:	7ac2      	ldrb	r2, [r0, #11]
    318c:	0791      	lsls	r1, r2, #30
    318e:	d502      	bpl.n	3196 <nwkTxFrame+0x1e>
			frame->state = NWK_TX_STATE_ENCRYPT;
    3190:	2210      	movs	r2, #16
    3192:	7002      	strb	r2, [r0, #0]
    3194:	e001      	b.n	319a <nwkTxFrame+0x22>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    3196:	2212      	movs	r2, #18
    3198:	7002      	strb	r2, [r0, #0]
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    319a:	2100      	movs	r1, #0
    319c:	2285      	movs	r2, #133	; 0x85
    319e:	54a1      	strb	r1, [r4, r2]

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    31a0:	07da      	lsls	r2, r3, #31
    31a2:	d504      	bpl.n	31ae <nwkTxFrame+0x36>
		header->macDstPanId = NWK_BROADCAST_PANID;
    31a4:	2101      	movs	r1, #1
    31a6:	4249      	negs	r1, r1
    31a8:	7161      	strb	r1, [r4, #5]
    31aa:	71a1      	strb	r1, [r4, #6]
    31ac:	e004      	b.n	31b8 <nwkTxFrame+0x40>
	} else {
		header->macDstPanId = nwkIb.panId;
    31ae:	491e      	ldr	r1, [pc, #120]	; (3228 <nwkTxFrame+0xb0>)
    31b0:	7888      	ldrb	r0, [r1, #2]
    31b2:	7160      	strb	r0, [r4, #5]
    31b4:	78c9      	ldrb	r1, [r1, #3]
    31b6:	71a1      	strb	r1, [r4, #6]
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    31b8:	2205      	movs	r2, #5
    31ba:	421a      	tst	r2, r3
    31bc:	d103      	bne.n	31c6 <nwkTxFrame+0x4e>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    31be:	1c20      	adds	r0, r4, #0
    31c0:	4b1a      	ldr	r3, [pc, #104]	; (322c <nwkTxFrame+0xb4>)
    31c2:	4798      	blx	r3
    31c4:	e003      	b.n	31ce <nwkTxFrame+0x56>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    31c6:	7be1      	ldrb	r1, [r4, #15]
    31c8:	7c22      	ldrb	r2, [r4, #16]
    31ca:	71e1      	strb	r1, [r4, #7]
    31cc:	7222      	strb	r2, [r4, #8]

	header->macSrcAddr = nwkIb.addr;
    31ce:	4a16      	ldr	r2, [pc, #88]	; (3228 <nwkTxFrame+0xb0>)
    31d0:	7811      	ldrb	r1, [r2, #0]
    31d2:	7261      	strb	r1, [r4, #9]
    31d4:	7851      	ldrb	r1, [r2, #1]
    31d6:	72a1      	strb	r1, [r4, #10]
	header->macSeq = ++nwkIb.macSeqNum;
    31d8:	7951      	ldrb	r1, [r2, #5]
    31da:	3101      	adds	r1, #1
    31dc:	b2c9      	uxtb	r1, r1
    31de:	7151      	strb	r1, [r2, #5]
    31e0:	7121      	strb	r1, [r4, #4]

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    31e2:	79e1      	ldrb	r1, [r4, #7]
    31e4:	7a22      	ldrb	r2, [r4, #8]
    31e6:	0212      	lsls	r2, r2, #8
    31e8:	430a      	orrs	r2, r1
    31ea:	4b11      	ldr	r3, [pc, #68]	; (3230 <nwkTxFrame+0xb8>)
    31ec:	429a      	cmp	r2, r3
    31ee:	d110      	bne.n	3212 <nwkTxFrame+0x9a>
		header->macFcf = 0x8841;
    31f0:	2341      	movs	r3, #65	; 0x41
    31f2:	70a3      	strb	r3, [r4, #2]
    31f4:	2378      	movs	r3, #120	; 0x78
    31f6:	425b      	negs	r3, r3
    31f8:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    31fa:	4b0e      	ldr	r3, [pc, #56]	; (3234 <nwkTxFrame+0xbc>)
    31fc:	4798      	blx	r3
    31fe:	2307      	movs	r3, #7
    3200:	4018      	ands	r0, r3
    3202:	3001      	adds	r0, #1
    3204:	2386      	movs	r3, #134	; 0x86
    3206:	54e0      	strb	r0, [r4, r3]
    3208:	0a00      	lsrs	r0, r0, #8
    320a:	b280      	uxth	r0, r0
    320c:	2387      	movs	r3, #135	; 0x87
    320e:	54e0      	strb	r0, [r4, r3]
    3210:	e009      	b.n	3226 <nwkTxFrame+0xae>
	} else {
		header->macFcf = 0x8861;
    3212:	2361      	movs	r3, #97	; 0x61
    3214:	70a3      	strb	r3, [r4, #2]
    3216:	2378      	movs	r3, #120	; 0x78
    3218:	425b      	negs	r3, r3
    321a:	70e3      	strb	r3, [r4, #3]
		frame->tx.timeout = 0;
    321c:	2200      	movs	r2, #0
    321e:	2386      	movs	r3, #134	; 0x86
    3220:	54e2      	strb	r2, [r4, r3]
    3222:	2387      	movs	r3, #135	; 0x87
    3224:	54e2      	strb	r2, [r4, r3]
	}
}
    3226:	bd10      	pop	{r4, pc}
    3228:	200008dc 	.word	0x200008dc
    322c:	00002809 	.word	0x00002809
    3230:	0000ffff 	.word	0x0000ffff
    3234:	00006b51 	.word	0x00006b51

00003238 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    3238:	b538      	push	{r3, r4, r5, lr}
    323a:	1c05      	adds	r5, r0, #0
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    323c:	4b1d      	ldr	r3, [pc, #116]	; (32b4 <nwkTxBroadcastFrame+0x7c>)
    323e:	4798      	blx	r3
    3240:	1e04      	subs	r4, r0, #0
    3242:	d036      	beq.n	32b2 <nwkTxBroadcastFrame+0x7a>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    3244:	2312      	movs	r3, #18
    3246:	7003      	strb	r3, [r0, #0]
	newFrame->size = frame->size;
    3248:	786b      	ldrb	r3, [r5, #1]
    324a:	7043      	strb	r3, [r0, #1]
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    324c:	2200      	movs	r2, #0
    324e:	2385      	movs	r3, #133	; 0x85
    3250:	54c2      	strb	r2, [r0, r3]
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    3252:	4b19      	ldr	r3, [pc, #100]	; (32b8 <nwkTxBroadcastFrame+0x80>)
    3254:	4798      	blx	r3
    3256:	2307      	movs	r3, #7
    3258:	4018      	ands	r0, r3
    325a:	3001      	adds	r0, #1
    325c:	2386      	movs	r3, #134	; 0x86
    325e:	54e0      	strb	r0, [r4, r3]
    3260:	0a00      	lsrs	r0, r0, #8
    3262:	b280      	uxth	r0, r0
    3264:	2387      	movs	r3, #135	; 0x87
    3266:	54e0      	strb	r0, [r4, r3]
	newFrame->tx.confirm = NULL;
    3268:	2200      	movs	r2, #0
    326a:	2389      	movs	r3, #137	; 0x89
    326c:	54e2      	strb	r2, [r4, r3]
    326e:	238a      	movs	r3, #138	; 0x8a
    3270:	54e2      	strb	r2, [r4, r3]
    3272:	238b      	movs	r3, #139	; 0x8b
    3274:	54e2      	strb	r2, [r4, r3]
    3276:	238c      	movs	r3, #140	; 0x8c
    3278:	54e2      	strb	r2, [r4, r3]
	memcpy(newFrame->data, frame->data, frame->size);
    327a:	1ca0      	adds	r0, r4, #2
    327c:	786a      	ldrb	r2, [r5, #1]
    327e:	1ca9      	adds	r1, r5, #2
    3280:	4b0e      	ldr	r3, [pc, #56]	; (32bc <nwkTxBroadcastFrame+0x84>)
    3282:	4798      	blx	r3

	newFrame->header.macFcf = 0x8841;
    3284:	2341      	movs	r3, #65	; 0x41
    3286:	70a3      	strb	r3, [r4, #2]
    3288:	2378      	movs	r3, #120	; 0x78
    328a:	425b      	negs	r3, r3
    328c:	70e3      	strb	r3, [r4, #3]
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    328e:	2301      	movs	r3, #1
    3290:	425b      	negs	r3, r3
    3292:	71e3      	strb	r3, [r4, #7]
    3294:	7223      	strb	r3, [r4, #8]
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    3296:	796a      	ldrb	r2, [r5, #5]
    3298:	79ab      	ldrb	r3, [r5, #6]
    329a:	7162      	strb	r2, [r4, #5]
    329c:	71a3      	strb	r3, [r4, #6]
	newFrame->header.macSrcAddr = nwkIb.addr;
    329e:	4b08      	ldr	r3, [pc, #32]	; (32c0 <nwkTxBroadcastFrame+0x88>)
    32a0:	781a      	ldrb	r2, [r3, #0]
    32a2:	7262      	strb	r2, [r4, #9]
    32a4:	785a      	ldrb	r2, [r3, #1]
    32a6:	72a2      	strb	r2, [r4, #10]
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    32a8:	795a      	ldrb	r2, [r3, #5]
    32aa:	3201      	adds	r2, #1
    32ac:	b2d2      	uxtb	r2, r2
    32ae:	715a      	strb	r2, [r3, #5]
    32b0:	7122      	strb	r2, [r4, #4]
}
    32b2:	bd38      	pop	{r3, r4, r5, pc}
    32b4:	000024f1 	.word	0x000024f1
    32b8:	00006b51 	.word	0x00006b51
    32bc:	00006af9 	.word	0x00006af9
    32c0:	200008dc 	.word	0x200008dc

000032c4 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    32c4:	b538      	push	{r3, r4, r5, lr}
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    32c6:	6885      	ldr	r5, [r0, #8]
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    32c8:	7b03      	ldrb	r3, [r0, #12]
		return false;
    32ca:	2000      	movs	r0, #0
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    32cc:	2b03      	cmp	r3, #3
    32ce:	d113      	bne.n	32f8 <nwkTxAckReceived+0x34>
    32d0:	e00d      	b.n	32ee <nwkTxAckReceived+0x2a>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    32d2:	7803      	ldrb	r3, [r0, #0]
    32d4:	2b16      	cmp	r3, #22
    32d6:	d10c      	bne.n	32f2 <nwkTxAckReceived+0x2e>
    32d8:	7b02      	ldrb	r2, [r0, #12]
    32da:	786b      	ldrb	r3, [r5, #1]
    32dc:	429a      	cmp	r2, r3
    32de:	d108      	bne.n	32f2 <nwkTxAckReceived+0x2e>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    32e0:	2317      	movs	r3, #23
    32e2:	7003      	strb	r3, [r0, #0]
			frame->tx.control = command->control;
    32e4:	78aa      	ldrb	r2, [r5, #2]
    32e6:	2388      	movs	r3, #136	; 0x88
    32e8:	54c2      	strb	r2, [r0, r3]
			return true;
    32ea:	2001      	movs	r0, #1
    32ec:	e004      	b.n	32f8 <nwkTxAckReceived+0x34>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    32ee:	2000      	movs	r0, #0
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    32f0:	4c02      	ldr	r4, [pc, #8]	; (32fc <nwkTxAckReceived+0x38>)
    32f2:	47a0      	blx	r4
    32f4:	2800      	cmp	r0, #0
    32f6:	d1ec      	bne.n	32d2 <nwkTxAckReceived+0xe>
			return true;
		}
	}

	return false;
}
    32f8:	bd38      	pop	{r3, r4, r5, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	00002575 	.word	0x00002575

00003300 <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    3300:	2312      	movs	r3, #18
    3302:	7003      	strb	r3, [r0, #0]
}
    3304:	4770      	bx	lr
    3306:	46c0      	nop			; (mov r8, r8)

00003308 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3308:	4b0d      	ldr	r3, [pc, #52]	; (3340 <PHY_DataConf+0x38>)
    330a:	681b      	ldr	r3, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    330c:	2801      	cmp	r0, #1
    330e:	d009      	beq.n	3324 <PHY_DataConf+0x1c>
    3310:	2800      	cmp	r0, #0
    3312:	d003      	beq.n	331c <PHY_DataConf+0x14>

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    3314:	2221      	movs	r2, #33	; 0x21

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    3316:	2802      	cmp	r0, #2
    3318:	d005      	beq.n	3326 <PHY_DataConf+0x1e>
    331a:	e001      	b.n	3320 <PHY_DataConf+0x18>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    331c:	2200      	movs	r2, #0
    331e:	e002      	b.n	3326 <PHY_DataConf+0x1e>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;

	default:
		return NWK_ERROR_STATUS;
    3320:	2201      	movs	r2, #1
    3322:	e000      	b.n	3326 <PHY_DataConf+0x1e>
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    3324:	2220      	movs	r2, #32

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    3326:	2185      	movs	r1, #133	; 0x85
    3328:	545a      	strb	r2, [r3, r1]
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    332a:	2215      	movs	r2, #21
    332c:	701a      	strb	r2, [r3, #0]
	nwkTxPhyActiveFrame = NULL;
    332e:	2200      	movs	r2, #0
    3330:	4b03      	ldr	r3, [pc, #12]	; (3340 <PHY_DataConf+0x38>)
    3332:	601a      	str	r2, [r3, #0]
	nwkIb.lock--;
    3334:	4a03      	ldr	r2, [pc, #12]	; (3344 <PHY_DataConf+0x3c>)
    3336:	2358      	movs	r3, #88	; 0x58
    3338:	5ad1      	ldrh	r1, [r2, r3]
    333a:	3901      	subs	r1, #1
    333c:	52d1      	strh	r1, [r2, r3]
}
    333e:	4770      	bx	lr
    3340:	20000620 	.word	0x20000620
    3344:	200008dc 	.word	0x200008dc

00003348 <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    3348:	b570      	push	{r4, r5, r6, lr}
	NwkFrame_t *frame = NULL;
    334a:	2400      	movs	r4, #0

	while (NULL != (frame = nwkFrameNext(frame))) {
    334c:	4d37      	ldr	r5, [pc, #220]	; (342c <nwkTxTaskHandler+0xe4>)
		switch (frame->state) {
    334e:	4e38      	ldr	r6, [pc, #224]	; (3430 <nwkTxTaskHandler+0xe8>)
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3350:	e066      	b.n	3420 <nwkTxTaskHandler+0xd8>
		switch (frame->state) {
    3352:	7823      	ldrb	r3, [r4, #0]
    3354:	3b10      	subs	r3, #16
    3356:	b2da      	uxtb	r2, r3
    3358:	2a07      	cmp	r2, #7
    335a:	d861      	bhi.n	3420 <nwkTxTaskHandler+0xd8>
    335c:	0093      	lsls	r3, r2, #2
    335e:	58f3      	ldr	r3, [r6, r3]
    3360:	469f      	mov	pc, r3
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    3362:	1c20      	adds	r0, r4, #0
    3364:	2101      	movs	r1, #1
    3366:	4b33      	ldr	r3, [pc, #204]	; (3434 <nwkTxTaskHandler+0xec>)
    3368:	4798      	blx	r3
		}
		break;
    336a:	e059      	b.n	3420 <nwkTxTaskHandler+0xd8>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    336c:	2386      	movs	r3, #134	; 0x86
    336e:	5ce2      	ldrb	r2, [r4, r3]
    3370:	2387      	movs	r3, #135	; 0x87
    3372:	5ce3      	ldrb	r3, [r4, r3]
    3374:	021b      	lsls	r3, r3, #8
    3376:	4313      	orrs	r3, r2
    3378:	d005      	beq.n	3386 <nwkTxTaskHandler+0x3e>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    337a:	2311      	movs	r3, #17
    337c:	7023      	strb	r3, [r4, #0]
				SYS_TimerStart(&nwkTxDelayTimer);
    337e:	482e      	ldr	r0, [pc, #184]	; (3438 <nwkTxTaskHandler+0xf0>)
    3380:	4b2e      	ldr	r3, [pc, #184]	; (343c <nwkTxTaskHandler+0xf4>)
    3382:	4798      	blx	r3
    3384:	e04c      	b.n	3420 <nwkTxTaskHandler+0xd8>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    3386:	2313      	movs	r3, #19
    3388:	7023      	strb	r3, [r4, #0]
    338a:	e049      	b.n	3420 <nwkTxTaskHandler+0xd8>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    338c:	4b2c      	ldr	r3, [pc, #176]	; (3440 <nwkTxTaskHandler+0xf8>)
    338e:	681b      	ldr	r3, [r3, #0]
    3390:	2b00      	cmp	r3, #0
    3392:	d145      	bne.n	3420 <nwkTxTaskHandler+0xd8>
				nwkTxPhyActiveFrame = frame;
    3394:	4b2a      	ldr	r3, [pc, #168]	; (3440 <nwkTxTaskHandler+0xf8>)
    3396:	601c      	str	r4, [r3, #0]
				frame->state = NWK_TX_STATE_WAIT_CONF;
    3398:	2314      	movs	r3, #20
    339a:	7023      	strb	r3, [r4, #0]
				PHY_DataReq(&(frame->size));
    339c:	1c60      	adds	r0, r4, #1
    339e:	4b29      	ldr	r3, [pc, #164]	; (3444 <nwkTxTaskHandler+0xfc>)
    33a0:	4798      	blx	r3
				nwkIb.lock++;
    33a2:	4a29      	ldr	r2, [pc, #164]	; (3448 <nwkTxTaskHandler+0x100>)
    33a4:	2358      	movs	r3, #88	; 0x58
    33a6:	5ad1      	ldrh	r1, [r2, r3]
    33a8:	3101      	adds	r1, #1
    33aa:	52d1      	strh	r1, [r2, r3]
    33ac:	e038      	b.n	3420 <nwkTxTaskHandler+0xd8>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    33ae:	2385      	movs	r3, #133	; 0x85
    33b0:	5ce3      	ldrb	r3, [r4, r3]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d119      	bne.n	33ea <nwkTxTaskHandler+0xa2>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    33b6:	7b61      	ldrb	r1, [r4, #13]
    33b8:	7ba3      	ldrb	r3, [r4, #14]
    33ba:	021b      	lsls	r3, r3, #8
    33bc:	4a22      	ldr	r2, [pc, #136]	; (3448 <nwkTxTaskHandler+0x100>)
    33be:	8812      	ldrh	r2, [r2, #0]
    33c0:	430b      	orrs	r3, r1
    33c2:	429a      	cmp	r2, r3
    33c4:	d10e      	bne.n	33e4 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
    33c6:	7ae3      	ldrb	r3, [r4, #11]
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    33c8:	07da      	lsls	r2, r3, #31
    33ca:	d50b      	bpl.n	33e4 <nwkTxTaskHandler+0x9c>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    33cc:	2316      	movs	r3, #22
    33ce:	7023      	strb	r3, [r4, #0]
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    33d0:	2215      	movs	r2, #21
    33d2:	2386      	movs	r3, #134	; 0x86
    33d4:	54e2      	strb	r2, [r4, r3]
    33d6:	2200      	movs	r2, #0
    33d8:	2387      	movs	r3, #135	; 0x87
    33da:	54e2      	strb	r2, [r4, r3]
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    33dc:	481b      	ldr	r0, [pc, #108]	; (344c <nwkTxTaskHandler+0x104>)
    33de:	4b17      	ldr	r3, [pc, #92]	; (343c <nwkTxTaskHandler+0xf4>)
    33e0:	4798      	blx	r3
    33e2:	e01d      	b.n	3420 <nwkTxTaskHandler+0xd8>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    33e4:	2317      	movs	r3, #23
    33e6:	7023      	strb	r3, [r4, #0]
    33e8:	e01a      	b.n	3420 <nwkTxTaskHandler+0xd8>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    33ea:	2317      	movs	r3, #23
    33ec:	7023      	strb	r3, [r4, #0]
    33ee:	e017      	b.n	3420 <nwkTxTaskHandler+0xd8>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    33f0:	1c20      	adds	r0, r4, #0
    33f2:	4b17      	ldr	r3, [pc, #92]	; (3450 <nwkTxTaskHandler+0x108>)
    33f4:	4798      	blx	r3
#endif
			if (NULL == frame->tx.confirm) {
    33f6:	2389      	movs	r3, #137	; 0x89
    33f8:	5ce2      	ldrb	r2, [r4, r3]
    33fa:	238a      	movs	r3, #138	; 0x8a
    33fc:	5ce3      	ldrb	r3, [r4, r3]
    33fe:	021b      	lsls	r3, r3, #8
    3400:	4313      	orrs	r3, r2
    3402:	228b      	movs	r2, #139	; 0x8b
    3404:	5ca2      	ldrb	r2, [r4, r2]
    3406:	0412      	lsls	r2, r2, #16
    3408:	4313      	orrs	r3, r2
    340a:	228c      	movs	r2, #140	; 0x8c
    340c:	5ca2      	ldrb	r2, [r4, r2]
    340e:	0612      	lsls	r2, r2, #24
    3410:	4313      	orrs	r3, r2
    3412:	d103      	bne.n	341c <nwkTxTaskHandler+0xd4>
				nwkFrameFree(frame);
    3414:	1c20      	adds	r0, r4, #0
    3416:	4b0f      	ldr	r3, [pc, #60]	; (3454 <nwkTxTaskHandler+0x10c>)
    3418:	4798      	blx	r3
    341a:	e001      	b.n	3420 <nwkTxTaskHandler+0xd8>
			} else {
				frame->tx.confirm(frame);
    341c:	1c20      	adds	r0, r4, #0
    341e:	4798      	blx	r3
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    3420:	1c20      	adds	r0, r4, #0
    3422:	47a8      	blx	r5
    3424:	1e04      	subs	r4, r0, #0
    3426:	d194      	bne.n	3352 <nwkTxTaskHandler+0xa>

		default:
			break;
		}
	}
}
    3428:	bd70      	pop	{r4, r5, r6, pc}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	00002575 	.word	0x00002575
    3430:	00007c50 	.word	0x00007c50
    3434:	00002e3d 	.word	0x00002e3d
    3438:	20000624 	.word	0x20000624
    343c:	00003829 	.word	0x00003829
    3440:	20000620 	.word	0x20000620
    3444:	000035bd 	.word	0x000035bd
    3448:	200008dc 	.word	0x200008dc
    344c:	2000060c 	.word	0x2000060c
    3450:	00002779 	.word	0x00002779
    3454:	00002561 	.word	0x00002561

00003458 <phyTrxSetState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
    3458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    345a:	1c04      	adds	r4, r0, #0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    345c:	4f0b      	ldr	r7, [pc, #44]	; (348c <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    345e:	4e0c      	ldr	r6, [pc, #48]	; (3490 <phyTrxSetState+0x38>)
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3460:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3462:	2002      	movs	r0, #2
    3464:	2103      	movs	r1, #3
    3466:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3468:	2001      	movs	r0, #1
    346a:	47b0      	blx	r6
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
	do { phyWriteRegister(TRX_STATE_REG, TRX_CMD_FORCE_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    346c:	4028      	ands	r0, r5
    346e:	2808      	cmp	r0, #8
    3470:	d1f7      	bne.n	3462 <phyTrxSetState+0xa>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3472:	4f06      	ldr	r7, [pc, #24]	; (348c <phyTrxSetState+0x34>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3474:	4e06      	ldr	r6, [pc, #24]	; (3490 <phyTrxSetState+0x38>)
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3476:	251f      	movs	r5, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3478:	2002      	movs	r0, #2
    347a:	1c21      	adds	r1, r4, #0
    347c:	47b8      	blx	r7
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    347e:	2001      	movs	r0, #1
    3480:	47b0      	blx	r6
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));

	do { phyWriteRegister(TRX_STATE_REG,
			     state); } while (state !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    3482:	4028      	ands	r0, r5
    3484:	4284      	cmp	r4, r0
    3486:	d1f7      	bne.n	3478 <phyTrxSetState+0x20>
}
    3488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	00003e6d 	.word	0x00003e6d
    3490:	00003d75 	.word	0x00003d75

00003494 <phySetRxState>:
}

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
    3494:	b508      	push	{r3, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    3496:	2008      	movs	r0, #8
    3498:	4b06      	ldr	r3, [pc, #24]	; (34b4 <phySetRxState+0x20>)
    349a:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    349c:	200f      	movs	r0, #15
    349e:	4b06      	ldr	r3, [pc, #24]	; (34b8 <phySetRxState+0x24>)
    34a0:	4798      	blx	r3
{
	phyTrxSetState(TRX_CMD_TRX_OFF);

	phyReadRegister(IRQ_STATUS_REG);

	if (phyRxState) {
    34a2:	4b06      	ldr	r3, [pc, #24]	; (34bc <phySetRxState+0x28>)
    34a4:	781b      	ldrb	r3, [r3, #0]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d002      	beq.n	34b0 <phySetRxState+0x1c>
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    34aa:	2016      	movs	r0, #22
    34ac:	4b01      	ldr	r3, [pc, #4]	; (34b4 <phySetRxState+0x20>)
    34ae:	4798      	blx	r3
	}
}
    34b0:	bd08      	pop	{r3, pc}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	00003459 	.word	0x00003459
    34b8:	00003d75 	.word	0x00003d75
    34bc:	200006b9 	.word	0x200006b9

000034c0 <PHY_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
    34c0:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    34c2:	4b0e      	ldr	r3, [pc, #56]	; (34fc <PHY_Init+0x3c>)
    34c4:	4798      	blx	r3
	PhyReset();
    34c6:	4b0e      	ldr	r3, [pc, #56]	; (3500 <PHY_Init+0x40>)
    34c8:	4798      	blx	r3
	phyRxState = false;
    34ca:	2200      	movs	r2, #0
    34cc:	4b0d      	ldr	r3, [pc, #52]	; (3504 <PHY_Init+0x44>)
    34ce:	701a      	strb	r2, [r3, #0]
	phyState = PHY_STATE_IDLE;
    34d0:	2201      	movs	r2, #1
    34d2:	4b0d      	ldr	r3, [pc, #52]	; (3508 <PHY_Init+0x48>)
    34d4:	701a      	strb	r2, [r3, #0]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    34d6:	4e0d      	ldr	r6, [pc, #52]	; (350c <PHY_Init+0x4c>)
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    34d8:	4d0d      	ldr	r5, [pc, #52]	; (3510 <PHY_Init+0x50>)
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    34da:	241f      	movs	r4, #31

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    34dc:	2002      	movs	r0, #2
    34de:	2108      	movs	r1, #8
    34e0:	47b0      	blx	r6
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    34e2:	2001      	movs	r0, #1
    34e4:	47a8      	blx	r5
	phyRxState = false;
	phyState = PHY_STATE_IDLE;

	do {phyWriteRegister(TRX_STATE_REG, TRX_CMD_TRX_OFF);
	} while (TRX_STATUS_TRX_OFF !=
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    34e6:	4020      	ands	r0, r4
    34e8:	2808      	cmp	r0, #8
    34ea:	d1f7      	bne.n	34dc <PHY_Init+0x1c>

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    34ec:	2004      	movs	r0, #4
    34ee:	212e      	movs	r1, #46	; 0x2e
    34f0:	4c06      	ldr	r4, [pc, #24]	; (350c <PHY_Init+0x4c>)
    34f2:	47a0      	blx	r4
    34f4:	200c      	movs	r0, #12
    34f6:	21a0      	movs	r1, #160	; 0xa0
    34f8:	47a0      	blx	r4
			(1 << TX_AUTO_CRC_ON) | (3 << SPI_CMD_MODE) |
			(1 << IRQ_MASK_MODE));

	phyWriteRegister(TRX_CTRL_2_REG,
			(1 << RX_SAFE_MODE) | (1 << OQPSK_SCRAM_EN));
}
    34fa:	bd70      	pop	{r4, r5, r6, pc}
    34fc:	00003c21 	.word	0x00003c21
    3500:	00003d45 	.word	0x00003d45
    3504:	200006b9 	.word	0x200006b9
    3508:	200006b8 	.word	0x200006b8
    350c:	00003e6d 	.word	0x00003e6d
    3510:	00003d75 	.word	0x00003d75

00003514 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
    3514:	b508      	push	{r3, lr}
	phyRxState = rx;
    3516:	4b02      	ldr	r3, [pc, #8]	; (3520 <PHY_SetRxState+0xc>)
    3518:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    351a:	4b02      	ldr	r3, [pc, #8]	; (3524 <PHY_SetRxState+0x10>)
    351c:	4798      	blx	r3
}
    351e:	bd08      	pop	{r3, pc}
    3520:	200006b9 	.word	0x200006b9
    3524:	00003495 	.word	0x00003495

00003528 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
    3528:	b510      	push	{r4, lr}
    352a:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    352c:	2008      	movs	r0, #8
    352e:	4b05      	ldr	r3, [pc, #20]	; (3544 <PHY_SetChannel+0x1c>)
    3530:	4798      	blx	r3
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    3532:	231f      	movs	r3, #31
    3534:	1c01      	adds	r1, r0, #0
    3536:	4399      	bics	r1, r3
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
    3538:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    353a:	b2e1      	uxtb	r1, r4
    353c:	2008      	movs	r0, #8
    353e:	4b02      	ldr	r3, [pc, #8]	; (3548 <PHY_SetChannel+0x20>)
    3540:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
	phyWriteRegister(PHY_CC_CCA_REG, reg | channel);
}
    3542:	bd10      	pop	{r4, pc}
    3544:	00003d75 	.word	0x00003d75
    3548:	00003e6d 	.word	0x00003e6d

0000354c <PHY_SetPanId>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    354c:	b530      	push	{r4, r5, lr}
    354e:	b083      	sub	sp, #12
    3550:	466c      	mov	r4, sp
    3552:	80e0      	strh	r0, [r4, #6]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3554:	b2c1      	uxtb	r1, r0
    3556:	2022      	movs	r0, #34	; 0x22
    3558:	4d03      	ldr	r5, [pc, #12]	; (3568 <PHY_SetPanId+0x1c>)
    355a:	47a8      	blx	r5
    355c:	79e1      	ldrb	r1, [r4, #7]
    355e:	2023      	movs	r0, #35	; 0x23
    3560:	47a8      	blx	r5
{
	uint8_t *d = (uint8_t *)&panId;

	phyWriteRegister(PAN_ID_0_REG, d[0]);
	phyWriteRegister(PAN_ID_1_REG, d[1]);
}
    3562:	b003      	add	sp, #12
    3564:	bd30      	pop	{r4, r5, pc}
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	00003e6d 	.word	0x00003e6d

0000356c <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    356c:	b570      	push	{r4, r5, r6, lr}
    356e:	b082      	sub	sp, #8
    3570:	466d      	mov	r5, sp
    3572:	80e8      	strh	r0, [r5, #6]
    3574:	3506      	adds	r5, #6
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    3576:	b2c6      	uxtb	r6, r0

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3578:	2020      	movs	r0, #32
    357a:	1c31      	adds	r1, r6, #0
    357c:	4c05      	ldr	r4, [pc, #20]	; (3594 <PHY_SetShortAddr+0x28>)
    357e:	47a0      	blx	r4
void PHY_SetShortAddr(uint16_t addr)
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    3580:	786d      	ldrb	r5, [r5, #1]

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    3582:	2021      	movs	r0, #33	; 0x21
    3584:	1c29      	adds	r1, r5, #0
    3586:	47a0      	blx	r4
{
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    3588:	19ae      	adds	r6, r5, r6

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    358a:	b2f1      	uxtb	r1, r6
    358c:	202d      	movs	r0, #45	; 0x2d
    358e:	47a0      	blx	r4
	uint8_t *d = (uint8_t *)&addr;

	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
}
    3590:	b002      	add	sp, #8
    3592:	bd70      	pop	{r4, r5, r6, pc}
    3594:	00003e6d 	.word	0x00003e6d

00003598 <PHY_SetTxPower>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
    3598:	b510      	push	{r4, lr}
    359a:	1c04      	adds	r4, r0, #0
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    359c:	2005      	movs	r0, #5
    359e:	4b05      	ldr	r3, [pc, #20]	; (35b4 <PHY_SetTxPower+0x1c>)
    35a0:	4798      	blx	r3
*****************************************************************************/
void PHY_SetTxPower(uint8_t txPower)
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
    35a2:	230f      	movs	r3, #15
    35a4:	1c01      	adds	r1, r0, #0
    35a6:	4399      	bics	r1, r3
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
    35a8:	430c      	orrs	r4, r1

/*************************************************************************//**
*****************************************************************************/
static void phyWriteRegister(uint8_t reg, uint8_t value)
{
	trx_reg_write(reg, value);
    35aa:	b2e1      	uxtb	r1, r4
    35ac:	2005      	movs	r0, #5
    35ae:	4b02      	ldr	r3, [pc, #8]	; (35b8 <PHY_SetTxPower+0x20>)
    35b0:	4798      	blx	r3
{
	uint8_t reg;

	reg = phyReadRegister(PHY_TX_PWR_REG) & ~0x0f;
	phyWriteRegister(PHY_TX_PWR_REG, reg | txPower);
}
    35b2:	bd10      	pop	{r4, pc}
    35b4:	00003d75 	.word	0x00003d75
    35b8:	00003e6d 	.word	0x00003e6d

000035bc <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data)
{
    35bc:	b510      	push	{r4, lr}
    35be:	1c04      	adds	r4, r0, #0
	phyTrxSetState(TRX_CMD_TX_ARET_ON);
    35c0:	2019      	movs	r0, #25
    35c2:	4b0c      	ldr	r3, [pc, #48]	; (35f4 <PHY_DataReq+0x38>)
    35c4:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    35c6:	200f      	movs	r0, #15
    35c8:	4b0b      	ldr	r3, [pc, #44]	; (35f8 <PHY_DataReq+0x3c>)
    35ca:	4798      	blx	r3
	phyReadRegister(IRQ_STATUS_REG);

	/* size of the buffer is sent as first byte of the data
	 * and data starts from second byte.
	 */
	data[0] += 2;
    35cc:	7821      	ldrb	r1, [r4, #0]
    35ce:	1c8b      	adds	r3, r1, #2
    35d0:	7023      	strb	r3, [r4, #0]
	trx_frame_write(data, (data[0] - 1) /* length value*/);
    35d2:	3101      	adds	r1, #1
    35d4:	b2c9      	uxtb	r1, r1
    35d6:	1c20      	adds	r0, r4, #0
    35d8:	4b08      	ldr	r3, [pc, #32]	; (35fc <PHY_DataReq+0x40>)
    35da:	4798      	blx	r3

	phyState = PHY_STATE_TX_WAIT_END;
    35dc:	2203      	movs	r2, #3
    35de:	4b08      	ldr	r3, [pc, #32]	; (3600 <PHY_DataReq+0x44>)
    35e0:	701a      	strb	r2, [r3, #0]
    35e2:	4b08      	ldr	r3, [pc, #32]	; (3604 <PHY_DataReq+0x48>)
    35e4:	2280      	movs	r2, #128	; 0x80
    35e6:	0352      	lsls	r2, r2, #13
    35e8:	619a      	str	r2, [r3, #24]

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    35ee:	615a      	str	r2, [r3, #20]

	TRX_SLP_TR_HIGH();
	TRX_TRIG_DELAY();
	TRX_SLP_TR_LOW();
}
    35f0:	bd10      	pop	{r4, pc}
    35f2:	46c0      	nop			; (mov r8, r8)
    35f4:	00003459 	.word	0x00003459
    35f8:	00003d75 	.word	0x00003d75
    35fc:	000040a9 	.word	0x000040a9
    3600:	200006b8 	.word	0x200006b8
    3604:	41004400 	.word	0x41004400

00003608 <PHY_EncryptReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_EncryptReq(uint8_t *text, uint8_t *key)
{
    3608:	b510      	push	{r4, lr}
    360a:	1c04      	adds	r4, r0, #0
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    360c:	1c08      	adds	r0, r1, #0
    360e:	2100      	movs	r1, #0
    3610:	2200      	movs	r2, #0
    3612:	4b05      	ldr	r3, [pc, #20]	; (3628 <PHY_EncryptReq+0x20>)
    3614:	4798      	blx	r3
#if (SAL_TYPE == AT86RF2xx)
	sal_aes_wrrd(text, NULL);
    3616:	1c20      	adds	r0, r4, #0
    3618:	2100      	movs	r1, #0
    361a:	4b04      	ldr	r3, [pc, #16]	; (362c <PHY_EncryptReq+0x24>)
    361c:	4798      	blx	r3
#else
	sal_aes_exec(text);
#endif
	sal_aes_read(text);
    361e:	1c20      	adds	r0, r4, #0
    3620:	4b03      	ldr	r3, [pc, #12]	; (3630 <PHY_EncryptReq+0x28>)
    3622:	4798      	blx	r3
}
    3624:	bd10      	pop	{r4, pc}
    3626:	46c0      	nop			; (mov r8, r8)
    3628:	00003ab9 	.word	0x00003ab9
    362c:	00003a4d 	.word	0x00003a4d
    3630:	00003bf1 	.word	0x00003bf1

00003634 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    3634:	b5f0      	push	{r4, r5, r6, r7, lr}
    3636:	b085      	sub	sp, #20
	if (PHY_STATE_SLEEP == phyState) {
    3638:	4b26      	ldr	r3, [pc, #152]	; (36d4 <PHY_TaskHandler+0xa0>)
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	2b02      	cmp	r3, #2
    363e:	d046      	beq.n	36ce <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3640:	200f      	movs	r0, #15
    3642:	4b25      	ldr	r3, [pc, #148]	; (36d8 <PHY_TaskHandler+0xa4>)
    3644:	4798      	blx	r3
{
	if (PHY_STATE_SLEEP == phyState) {
		return;
	}

	if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END)) {
    3646:	0703      	lsls	r3, r0, #28
    3648:	d541      	bpl.n	36ce <PHY_TaskHandler+0x9a>
		if (PHY_STATE_IDLE == phyState) {
    364a:	4b22      	ldr	r3, [pc, #136]	; (36d4 <PHY_TaskHandler+0xa0>)
    364c:	781b      	ldrb	r3, [r3, #0]
    364e:	2b01      	cmp	r3, #1
    3650:	d124      	bne.n	369c <PHY_TaskHandler+0x68>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3652:	2007      	movs	r0, #7
    3654:	4b20      	ldr	r3, [pc, #128]	; (36d8 <PHY_TaskHandler+0xa4>)
    3656:	4798      	blx	r3
    3658:	1c07      	adds	r7, r0, #0
			uint8_t size;
			int8_t rssi;

			rssi = (int8_t)phyReadRegister(PHY_ED_LEVEL_REG);

			trx_frame_read(&size, 1);
    365a:	466c      	mov	r4, sp
    365c:	3407      	adds	r4, #7
    365e:	1c20      	adds	r0, r4, #0
    3660:	2101      	movs	r1, #1
    3662:	4e1e      	ldr	r6, [pc, #120]	; (36dc <PHY_TaskHandler+0xa8>)
    3664:	47b0      	blx	r6

			trx_frame_read(phyRxBuffer, size + 2);
    3666:	4d1e      	ldr	r5, [pc, #120]	; (36e0 <PHY_TaskHandler+0xac>)
    3668:	7821      	ldrb	r1, [r4, #0]
    366a:	3102      	adds	r1, #2
    366c:	b2c9      	uxtb	r1, r1
    366e:	1c28      	adds	r0, r5, #0
    3670:	47b0      	blx	r6

			ind.data = phyRxBuffer + 1;
    3672:	a802      	add	r0, sp, #8
    3674:	1c6a      	adds	r2, r5, #1
    3676:	9202      	str	r2, [sp, #8]

			ind.size = size - PHY_CRC_SIZE;
    3678:	7822      	ldrb	r2, [r4, #0]
    367a:	1e91      	subs	r1, r2, #2
    367c:	7101      	strb	r1, [r0, #4]
			ind.lqi  = phyRxBuffer[size + 1];
    367e:	18ad      	adds	r5, r5, r2
    3680:	786a      	ldrb	r2, [r5, #1]
    3682:	7142      	strb	r2, [r0, #5]
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
    3684:	3f5b      	subs	r7, #91	; 0x5b
    3686:	7187      	strb	r7, [r0, #6]
			PHY_DataInd(&ind);
    3688:	4b16      	ldr	r3, [pc, #88]	; (36e4 <PHY_TaskHandler+0xb0>)
    368a:	4798      	blx	r3
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    368c:	4d12      	ldr	r5, [pc, #72]	; (36d8 <PHY_TaskHandler+0xa4>)

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    368e:	241f      	movs	r4, #31
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    3690:	2001      	movs	r0, #1
    3692:	47a8      	blx	r5

/*************************************************************************//**
*****************************************************************************/
static void phyWaitState(uint8_t state)
{
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    3694:	4020      	ands	r0, r4
    3696:	2816      	cmp	r0, #22
    3698:	d1fa      	bne.n	3690 <PHY_TaskHandler+0x5c>
    369a:	e018      	b.n	36ce <PHY_TaskHandler+0x9a>
			ind.lqi  = phyRxBuffer[size + 1];
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
    369c:	2b03      	cmp	r3, #3
    369e:	d116      	bne.n	36ce <PHY_TaskHandler+0x9a>
*****************************************************************************/
static uint8_t phyReadRegister(uint8_t reg)
{
	uint8_t value;

	value = trx_reg_read(reg);
    36a0:	2002      	movs	r0, #2
    36a2:	4b0d      	ldr	r3, [pc, #52]	; (36d8 <PHY_TaskHandler+0xa4>)
    36a4:	4798      	blx	r3
			ind.rssi = rssi + PHY_RSSI_BASE_VAL;
			PHY_DataInd(&ind);

			phyWaitState(TRX_STATUS_RX_AACK_ON);
		} else if (PHY_STATE_TX_WAIT_END == phyState) {
			uint8_t status
    36a6:	0944      	lsrs	r4, r0, #5
    36a8:	b2e4      	uxtb	r4, r4
				= (phyReadRegister(TRX_STATE_REG) >>
					TRAC_STATUS) & 7;

			if (TRAC_STATUS_SUCCESS == status) {
    36aa:	2c00      	cmp	r4, #0
    36ac:	d007      	beq.n	36be <PHY_TaskHandler+0x8a>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    36ae:	2c03      	cmp	r4, #3
    36b0:	d004      	beq.n	36bc <PHY_TaskHandler+0x88>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
				status = PHY_STATUS_NO_ACK;
    36b2:	3c05      	subs	r4, #5
    36b4:	1e63      	subs	r3, r4, #1
    36b6:	419c      	sbcs	r4, r3
    36b8:	3402      	adds	r4, #2
    36ba:	e000      	b.n	36be <PHY_TaskHandler+0x8a>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    36bc:	2401      	movs	r4, #1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    36be:	4b0a      	ldr	r3, [pc, #40]	; (36e8 <PHY_TaskHandler+0xb4>)
    36c0:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    36c2:	2201      	movs	r2, #1
    36c4:	4b03      	ldr	r3, [pc, #12]	; (36d4 <PHY_TaskHandler+0xa0>)
    36c6:	701a      	strb	r2, [r3, #0]

			PHY_DataConf(status);
    36c8:	1c20      	adds	r0, r4, #0
    36ca:	4b08      	ldr	r3, [pc, #32]	; (36ec <PHY_TaskHandler+0xb8>)
    36cc:	4798      	blx	r3
		}
	}
}
    36ce:	b005      	add	sp, #20
    36d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	200006b8 	.word	0x200006b8
    36d8:	00003d75 	.word	0x00003d75
    36dc:	00003f69 	.word	0x00003f69
    36e0:	20000638 	.word	0x20000638
    36e4:	000029f1 	.word	0x000029f1
    36e8:	00003495 	.word	0x00003495
    36ec:	00003309 	.word	0x00003309

000036f0 <SYS_Init>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
    36f0:	b508      	push	{r3, lr}
	SYS_TimerInit();
    36f2:	4b04      	ldr	r3, [pc, #16]	; (3704 <SYS_Init+0x14>)
    36f4:	4798      	blx	r3
#if SYS_SECURITY_MODE == 0
	sal_init();
    36f6:	4b04      	ldr	r3, [pc, #16]	; (3708 <SYS_Init+0x18>)
    36f8:	4798      	blx	r3
#endif
	PHY_Init();
    36fa:	4b04      	ldr	r3, [pc, #16]	; (370c <SYS_Init+0x1c>)
    36fc:	4798      	blx	r3
	NWK_Init();
    36fe:	4b04      	ldr	r3, [pc, #16]	; (3710 <SYS_Init+0x20>)
    3700:	4798      	blx	r3
}
    3702:	bd08      	pop	{r3, pc}
    3704:	000037c1 	.word	0x000037c1
    3708:	00003a49 	.word	0x00003a49
    370c:	000034c1 	.word	0x000034c1
    3710:	00002269 	.word	0x00002269

00003714 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
    3714:	b508      	push	{r3, lr}
	PHY_TaskHandler();
    3716:	4b03      	ldr	r3, [pc, #12]	; (3724 <SYS_TaskHandler+0x10>)
    3718:	4798      	blx	r3
	NWK_TaskHandler();
    371a:	4b03      	ldr	r3, [pc, #12]	; (3728 <SYS_TaskHandler+0x14>)
    371c:	4798      	blx	r3
	SYS_TimerTaskHandler();
    371e:	4b03      	ldr	r3, [pc, #12]	; (372c <SYS_TaskHandler+0x18>)
    3720:	4798      	blx	r3
}
    3722:	bd08      	pop	{r3, pc}
    3724:	00003635 	.word	0x00003635
    3728:	000022f5 	.word	0x000022f5
    372c:	00003845 	.word	0x00003845

00003730 <SYS_EncryptReq>:
#endif

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptReq(uint32_t *text, uint32_t *key)
{
    3730:	b508      	push	{r3, lr}
#if SYS_SECURITY_MODE == 0
	PHY_EncryptReq((uint8_t *)text, (uint8_t *)key);
    3732:	4b02      	ldr	r3, [pc, #8]	; (373c <SYS_EncryptReq+0xc>)
    3734:	4798      	blx	r3
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
    3736:	4b02      	ldr	r3, [pc, #8]	; (3740 <SYS_EncryptReq+0x10>)
    3738:	4798      	blx	r3
}
    373a:	bd08      	pop	{r3, pc}
    373c:	00003609 	.word	0x00003609
    3740:	00002e59 	.word	0x00002e59

00003744 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    3744:	b530      	push	{r4, r5, lr}
	if (timers) {
    3746:	4b15      	ldr	r3, [pc, #84]	; (379c <placeTimer+0x58>)
    3748:	681d      	ldr	r5, [r3, #0]
    374a:	2d00      	cmp	r5, #0
    374c:	d01e      	beq.n	378c <placeTimer+0x48>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    374e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    3750:	6869      	ldr	r1, [r5, #4]
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3752:	1c2c      	adds	r4, r5, #0
			if (timeout < t->timeout) {
    3754:	428a      	cmp	r2, r1
    3756:	d20a      	bcs.n	376e <placeTimer+0x2a>
    3758:	e004      	b.n	3764 <placeTimer+0x20>
    375a:	6859      	ldr	r1, [r3, #4]
    375c:	4291      	cmp	r1, r2
    375e:	d803      	bhi.n	3768 <placeTimer+0x24>
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3760:	1c1c      	adds	r4, r3, #0
    3762:	e004      	b.n	376e <placeTimer+0x2a>
    3764:	1c2b      	adds	r3, r5, #0
/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
    3766:	2400      	movs	r4, #0
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
				t->timeout -= timeout;
    3768:	1a89      	subs	r1, r1, r2
    376a:	6059      	str	r1, [r3, #4]
				break;
    376c:	e003      	b.n	3776 <placeTimer+0x32>
			} else {
				timeout -= t->timeout;
    376e:	1a52      	subs	r2, r2, r1
{
	if (timers) {
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;

		for (SYS_Timer_t *t = timers; t; t = t->next) {
    3770:	6823      	ldr	r3, [r4, #0]
    3772:	2b00      	cmp	r3, #0
    3774:	d1f1      	bne.n	375a <placeTimer+0x16>
			}

			prev = t;
		}

		timer->timeout = timeout;
    3776:	6042      	str	r2, [r0, #4]

		if (prev) {
    3778:	2c00      	cmp	r4, #0
    377a:	d003      	beq.n	3784 <placeTimer+0x40>
			timer->next = prev->next;
    377c:	6823      	ldr	r3, [r4, #0]
    377e:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    3780:	6020      	str	r0, [r4, #0]
    3782:	e009      	b.n	3798 <placeTimer+0x54>
		} else {
			timer->next = timers;
    3784:	6005      	str	r5, [r0, #0]
			timers = timer;
    3786:	4b05      	ldr	r3, [pc, #20]	; (379c <placeTimer+0x58>)
    3788:	6018      	str	r0, [r3, #0]
    378a:	e005      	b.n	3798 <placeTimer+0x54>
		}
	} else {
		timer->next = NULL;
    378c:	2300      	movs	r3, #0
    378e:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    3790:	6883      	ldr	r3, [r0, #8]
    3792:	6043      	str	r3, [r0, #4]
		timers = timer;
    3794:	4b01      	ldr	r3, [pc, #4]	; (379c <placeTimer+0x58>)
    3796:	6018      	str	r0, [r3, #0]
	}
}
    3798:	bd30      	pop	{r4, r5, pc}
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	200006bc 	.word	0x200006bc

000037a0 <SYS_HwExpiry_Cb>:

/*****************************************************************************
*****************************************************************************/
void SYS_HwExpiry_Cb(void)
{
    37a0:	b508      	push	{r3, lr}
	SysTimerIrqCount++;
    37a2:	4b04      	ldr	r3, [pc, #16]	; (37b4 <SYS_HwExpiry_Cb+0x14>)
    37a4:	781a      	ldrb	r2, [r3, #0]
    37a6:	3201      	adds	r2, #1
    37a8:	b2d2      	uxtb	r2, r2
    37aa:	701a      	strb	r2, [r3, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    37ac:	4802      	ldr	r0, [pc, #8]	; (37b8 <SYS_HwExpiry_Cb+0x18>)
    37ae:	4b03      	ldr	r3, [pc, #12]	; (37bc <SYS_HwExpiry_Cb+0x1c>)
    37b0:	4798      	blx	r3
}
    37b2:	bd08      	pop	{r3, pc}
    37b4:	20000938 	.word	0x20000938
    37b8:	00002710 	.word	0x00002710
    37bc:	00004b89 	.word	0x00004b89

000037c0 <SYS_TimerInit>:
/*- Implementations --------------------------------------------------------*/

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
    37c0:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    37c2:	2400      	movs	r4, #0
    37c4:	4b06      	ldr	r3, [pc, #24]	; (37e0 <SYS_TimerInit+0x20>)
    37c6:	701c      	strb	r4, [r3, #0]
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    37c8:	4806      	ldr	r0, [pc, #24]	; (37e4 <SYS_TimerInit+0x24>)
    37ca:	4b07      	ldr	r3, [pc, #28]	; (37e8 <SYS_TimerInit+0x28>)
    37cc:	4798      	blx	r3
	common_tc_init();
    37ce:	4b07      	ldr	r3, [pc, #28]	; (37ec <SYS_TimerInit+0x2c>)
    37d0:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    37d2:	4807      	ldr	r0, [pc, #28]	; (37f0 <SYS_TimerInit+0x30>)
    37d4:	4b07      	ldr	r3, [pc, #28]	; (37f4 <SYS_TimerInit+0x34>)
    37d6:	4798      	blx	r3
	timers = NULL;
    37d8:	4b07      	ldr	r3, [pc, #28]	; (37f8 <SYS_TimerInit+0x38>)
    37da:	601c      	str	r4, [r3, #0]
}
    37dc:	bd10      	pop	{r4, pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	20000938 	.word	0x20000938
    37e4:	000037a1 	.word	0x000037a1
    37e8:	00004c79 	.word	0x00004c79
    37ec:	00004bf5 	.word	0x00004bf5
    37f0:	00002710 	.word	0x00002710
    37f4:	00004b89 	.word	0x00004b89
    37f8:	200006bc 	.word	0x200006bc

000037fc <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    37fc:	4b09      	ldr	r3, [pc, #36]	; (3824 <SYS_TimerStarted+0x28>)
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	2b00      	cmp	r3, #0
    3802:	d009      	beq.n	3818 <SYS_TimerStarted+0x1c>
		if (t == timer) {
    3804:	4283      	cmp	r3, r0
    3806:	d102      	bne.n	380e <SYS_TimerStarted+0x12>
    3808:	e008      	b.n	381c <SYS_TimerStarted+0x20>
    380a:	4298      	cmp	r0, r3
    380c:	d008      	beq.n	3820 <SYS_TimerStarted+0x24>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    380e:	681b      	ldr	r3, [r3, #0]
    3810:	2b00      	cmp	r3, #0
    3812:	d1fa      	bne.n	380a <SYS_TimerStarted+0xe>
		if (t == timer) {
			return true;
		}
	}
	return false;
    3814:	2000      	movs	r0, #0
    3816:	e004      	b.n	3822 <SYS_TimerStarted+0x26>
    3818:	2000      	movs	r0, #0
    381a:	e002      	b.n	3822 <SYS_TimerStarted+0x26>
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    381c:	2001      	movs	r0, #1
    381e:	e000      	b.n	3822 <SYS_TimerStarted+0x26>
    3820:	2001      	movs	r0, #1
		}
	}
	return false;
}
    3822:	4770      	bx	lr
    3824:	200006bc 	.word	0x200006bc

00003828 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3828:	b510      	push	{r4, lr}
    382a:	1c04      	adds	r4, r0, #0
	if (!SYS_TimerStarted(timer)) {
    382c:	4b03      	ldr	r3, [pc, #12]	; (383c <SYS_TimerStart+0x14>)
    382e:	4798      	blx	r3
    3830:	2800      	cmp	r0, #0
    3832:	d102      	bne.n	383a <SYS_TimerStart+0x12>
		placeTimer(timer);
    3834:	1c20      	adds	r0, r4, #0
    3836:	4b02      	ldr	r3, [pc, #8]	; (3840 <SYS_TimerStart+0x18>)
    3838:	4798      	blx	r3
	}
}
    383a:	bd10      	pop	{r4, pc}
    383c:	000037fd 	.word	0x000037fd
    3840:	00003745 	.word	0x00003745

00003844 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    3844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    3846:	4b1a      	ldr	r3, [pc, #104]	; (38b0 <SYS_TimerTaskHandler+0x6c>)
    3848:	781b      	ldrb	r3, [r3, #0]
    384a:	2b00      	cmp	r3, #0
    384c:	d02f      	beq.n	38ae <SYS_TimerTaskHandler+0x6a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    384e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3852:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3854:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3858:	2100      	movs	r1, #0
    385a:	4b16      	ldr	r3, [pc, #88]	; (38b4 <SYS_TimerTaskHandler+0x70>)
    385c:	7019      	strb	r1, [r3, #0]
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    385e:	4a14      	ldr	r2, [pc, #80]	; (38b0 <SYS_TimerTaskHandler+0x6c>)
    3860:	7813      	ldrb	r3, [r2, #0]
    3862:	b2db      	uxtb	r3, r3
	SysTimerIrqCount = 0;
    3864:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3866:	2800      	cmp	r0, #0
    3868:	d105      	bne.n	3876 <SYS_TimerTaskHandler+0x32>
		cpu_irq_enable();
    386a:	2101      	movs	r1, #1
    386c:	4a11      	ldr	r2, [pc, #68]	; (38b4 <SYS_TimerTaskHandler+0x70>)
    386e:	7011      	strb	r1, [r2, #0]
    3870:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3874:	b662      	cpsie	i
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    3876:	009d      	lsls	r5, r3, #2
    3878:	18ed      	adds	r5, r5, r3
    387a:	006d      	lsls	r5, r5, #1

	while (timers && (timers->timeout <= elapsed)) {
    387c:	4e0e      	ldr	r6, [pc, #56]	; (38b8 <SYS_TimerTaskHandler+0x74>)
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
		timers = timers->next;
    387e:	1c37      	adds	r7, r6, #0
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    3880:	e00d      	b.n	389e <SYS_TimerTaskHandler+0x5a>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    3882:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    3884:	6823      	ldr	r3, [r4, #0]
    3886:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    3888:	7b23      	ldrb	r3, [r4, #12]
    388a:	2b01      	cmp	r3, #1
    388c:	d102      	bne.n	3894 <SYS_TimerTaskHandler+0x50>
			placeTimer(timer);
    388e:	1c20      	adds	r0, r4, #0
    3890:	4b0a      	ldr	r3, [pc, #40]	; (38bc <SYS_TimerTaskHandler+0x78>)
    3892:	4798      	blx	r3
		}
		if(timer->handler)
    3894:	6923      	ldr	r3, [r4, #16]
    3896:	2b00      	cmp	r3, #0
    3898:	d001      	beq.n	389e <SYS_TimerTaskHandler+0x5a>
		{
			timer->handler(timer);
    389a:	1c20      	adds	r0, r4, #0
    389c:	4798      	blx	r3
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    389e:	6834      	ldr	r4, [r6, #0]
    38a0:	2c00      	cmp	r4, #0
    38a2:	d004      	beq.n	38ae <SYS_TimerTaskHandler+0x6a>
    38a4:	6863      	ldr	r3, [r4, #4]
    38a6:	429d      	cmp	r5, r3
    38a8:	d2eb      	bcs.n	3882 <SYS_TimerTaskHandler+0x3e>
		}
		
	}

	if (timers) {
		timers->timeout -= elapsed;
    38aa:	1b5d      	subs	r5, r3, r5
    38ac:	6065      	str	r5, [r4, #4]
	}
}
    38ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    38b0:	20000938 	.word	0x20000938
    38b4:	20000008 	.word	0x20000008
    38b8:	200006bc 	.word	0x200006bc
    38bc:	00003745 	.word	0x00003745

000038c0 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    38c0:	b508      	push	{r3, lr}
	tmr_cca_callback();
    38c2:	4b01      	ldr	r3, [pc, #4]	; (38c8 <tc_cca_callback+0x8>)
    38c4:	4798      	blx	r3
}
    38c6:	bd08      	pop	{r3, pc}
    38c8:	00004c5d 	.word	0x00004c5d

000038cc <tc_ovf_callback>:
{
	cpu_irq_restore((uint32_t)flags);
}

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    38cc:	b508      	push	{r3, lr}
	tmr_ovf_callback();
    38ce:	4b01      	ldr	r3, [pc, #4]	; (38d4 <tc_ovf_callback+0x8>)
    38d0:	4798      	blx	r3
}
    38d2:	bd08      	pop	{r3, pc}
    38d4:	00004c15 	.word	0x00004c15

000038d8 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    38d8:	b508      	push	{r3, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    38da:	4802      	ldr	r0, [pc, #8]	; (38e4 <tmr_read_count+0xc>)
    38dc:	4b02      	ldr	r3, [pc, #8]	; (38e8 <tmr_read_count+0x10>)
    38de:	4798      	blx	r3
    38e0:	b280      	uxth	r0, r0
}
    38e2:	bd08      	pop	{r3, pc}
    38e4:	20000970 	.word	0x20000970
    38e8:	00000eb9 	.word	0x00000eb9

000038ec <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    38ec:	4b03      	ldr	r3, [pc, #12]	; (38fc <tmr_disable_cc_interrupt+0x10>)
    38ee:	2210      	movs	r2, #16
    38f0:	6819      	ldr	r1, [r3, #0]
    38f2:	730a      	strb	r2, [r1, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    38f4:	7e59      	ldrb	r1, [r3, #25]
    38f6:	4391      	bics	r1, r2
    38f8:	7659      	strb	r1, [r3, #25]
/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    38fa:	4770      	bx	lr
    38fc:	20000970 	.word	0x20000970

00003900 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    3900:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    3902:	4c0a      	ldr	r4, [pc, #40]	; (392c <tmr_enable_cc_interrupt+0x2c>)
    3904:	6820      	ldr	r0, [r4, #0]
    3906:	4b0a      	ldr	r3, [pc, #40]	; (3930 <tmr_enable_cc_interrupt+0x30>)
    3908:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    390a:	4b0a      	ldr	r3, [pc, #40]	; (3934 <tmr_enable_cc_interrupt+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    390c:	5c1b      	ldrb	r3, [r3, r0]
    390e:	221f      	movs	r2, #31
    3910:	401a      	ands	r2, r3
    3912:	2301      	movs	r3, #1
    3914:	4093      	lsls	r3, r2
    3916:	1c1a      	adds	r2, r3, #0
    3918:	4b07      	ldr	r3, [pc, #28]	; (3938 <tmr_enable_cc_interrupt+0x38>)
    391a:	601a      	str	r2, [r3, #0]
	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    391c:	7e62      	ldrb	r2, [r4, #25]
    391e:	2310      	movs	r3, #16
    3920:	4313      	orrs	r3, r2
    3922:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    3924:	6823      	ldr	r3, [r4, #0]
    3926:	2210      	movs	r2, #16
    3928:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
}
    392a:	bd10      	pop	{r4, pc}
    392c:	20000970 	.word	0x20000970
    3930:	00000c0d 	.word	0x00000c0d
    3934:	00007c70 	.word	0x00007c70
    3938:	e000e100 	.word	0xe000e100

0000393c <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    393c:	b508      	push	{r3, lr}
    393e:	1c02      	adds	r2, r0, #0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    3940:	4802      	ldr	r0, [pc, #8]	; (394c <tmr_write_cmpreg+0x10>)
    3942:	2100      	movs	r1, #0
    3944:	4b02      	ldr	r3, [pc, #8]	; (3950 <tmr_write_cmpreg+0x14>)
    3946:	4798      	blx	r3
			(uint32_t)compare_value);
}
    3948:	bd08      	pop	{r3, pc}
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	20000970 	.word	0x20000970
    3950:	00000ee9 	.word	0x00000ee9

00003954 <tmr_init>:
}

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    3954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3956:	464f      	mov	r7, r9
    3958:	4646      	mov	r6, r8
    395a:	b4c0      	push	{r6, r7}
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    395c:	4a2d      	ldr	r2, [pc, #180]	; (3a14 <tmr_init+0xc0>)
    395e:	2300      	movs	r3, #0
    3960:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3962:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    3964:	2100      	movs	r1, #0
    3966:	8093      	strh	r3, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3968:	7191      	strb	r1, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    396a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    396c:	7051      	strb	r1, [r2, #1]
#if (SAML21)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    396e:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3970:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3972:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3974:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3976:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3978:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    397a:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    397c:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    397e:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3980:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3982:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3984:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3986:	8593      	strh	r3, [r2, #44]	; 0x2c
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}

	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    3988:	2301      	movs	r3, #1
    398a:	425b      	negs	r3, r3
    398c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    398e:	4c22      	ldr	r4, [pc, #136]	; (3a18 <tmr_init+0xc4>)
    3990:	1c20      	adds	r0, r4, #0
    3992:	4922      	ldr	r1, [pc, #136]	; (3a1c <tmr_init+0xc8>)
    3994:	4b22      	ldr	r3, [pc, #136]	; (3a20 <tmr_init+0xcc>)
    3996:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    3998:	1c20      	adds	r0, r4, #0
    399a:	4922      	ldr	r1, [pc, #136]	; (3a24 <tmr_init+0xd0>)
    399c:	2200      	movs	r2, #0
    399e:	4d22      	ldr	r5, [pc, #136]	; (3a28 <tmr_init+0xd4>)
    39a0:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    39a2:	1c20      	adds	r0, r4, #0
    39a4:	4921      	ldr	r1, [pc, #132]	; (3a2c <tmr_init+0xd8>)
    39a6:	2202      	movs	r2, #2
    39a8:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    39aa:	6820      	ldr	r0, [r4, #0]
    39ac:	4a20      	ldr	r2, [pc, #128]	; (3a30 <tmr_init+0xdc>)
    39ae:	4691      	mov	r9, r2
    39b0:	4790      	blx	r2
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    39b2:	4b20      	ldr	r3, [pc, #128]	; (3a34 <tmr_init+0xe0>)
    39b4:	4698      	mov	r8, r3
    39b6:	5c1b      	ldrb	r3, [r3, r0]
    39b8:	271f      	movs	r7, #31
    39ba:	403b      	ands	r3, r7
    39bc:	2501      	movs	r5, #1
    39be:	1c2a      	adds	r2, r5, #0
    39c0:	409a      	lsls	r2, r3
    39c2:	4e1d      	ldr	r6, [pc, #116]	; (3a38 <tmr_init+0xe4>)
    39c4:	6032      	str	r2, [r6, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    39c6:	7e62      	ldrb	r2, [r4, #25]
    39c8:	2301      	movs	r3, #1
    39ca:	4313      	orrs	r3, r2
    39cc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    39ce:	6820      	ldr	r0, [r4, #0]
    39d0:	7345      	strb	r5, [r0, #13]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    39d2:	47c8      	blx	r9
    39d4:	4642      	mov	r2, r8
    39d6:	5c13      	ldrb	r3, [r2, r0]
    39d8:	401f      	ands	r7, r3
    39da:	40bd      	lsls	r5, r7
    39dc:	6035      	str	r5, [r6, #0]

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    39de:	7e62      	ldrb	r2, [r4, #25]
    39e0:	2310      	movs	r3, #16
    39e2:	4313      	orrs	r3, r2
    39e4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    39e6:	6822      	ldr	r2, [r4, #0]
    39e8:	2310      	movs	r3, #16
    39ea:	7353      	strb	r3, [r2, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    39ec:	217f      	movs	r1, #127	; 0x7f
    39ee:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
    39f0:	438b      	bics	r3, r1
    39f2:	d1fc      	bne.n	39ee <tmr_init+0x9a>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    39f4:	8811      	ldrh	r1, [r2, #0]
    39f6:	2302      	movs	r3, #2
    39f8:	430b      	orrs	r3, r1
    39fa:	8013      	strh	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / DEF_1MHZ;
    39fc:	2000      	movs	r0, #0
    39fe:	4b0f      	ldr	r3, [pc, #60]	; (3a3c <tmr_init+0xe8>)
    3a00:	4798      	blx	r3
    3a02:	490f      	ldr	r1, [pc, #60]	; (3a40 <tmr_init+0xec>)
    3a04:	4b0f      	ldr	r3, [pc, #60]	; (3a44 <tmr_init+0xf0>)
    3a06:	4798      	blx	r3
	#endif
	return timer_multiplier;
    3a08:	b2c0      	uxtb	r0, r0
}
    3a0a:	bc0c      	pop	{r2, r3}
    3a0c:	4690      	mov	r8, r2
    3a0e:	4699      	mov	r9, r3
    3a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a12:	46c0      	nop			; (mov r8, r8)
    3a14:	2000093c 	.word	0x2000093c
    3a18:	20000970 	.word	0x20000970
    3a1c:	42002c00 	.word	0x42002c00
    3a20:	00000c45 	.word	0x00000c45
    3a24:	000038cd 	.word	0x000038cd
    3a28:	00000b4d 	.word	0x00000b4d
    3a2c:	000038c1 	.word	0x000038c1
    3a30:	00000c0d 	.word	0x00000c0d
    3a34:	00007c70 	.word	0x00007c70
    3a38:	e000e100 	.word	0xe000e100
    3a3c:	00001f3d 	.word	0x00001f3d
    3a40:	000f4240 	.word	0x000f4240
    3a44:	00004c85 	.word	0x00004c85

00003a48 <sal_init>:
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
}
    3a48:	4770      	bx	lr
    3a4a:	46c0      	nop			; (mov r8, r8)

00003a4c <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    3a4c:	b538      	push	{r3, r4, r5, lr}
    3a4e:	1c03      	adds	r3, r0, #0
    3a50:	1c0d      	adds	r5, r1, #0
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    3a52:	4c14      	ldr	r4, [pc, #80]	; (3aa4 <sal_aes_wrrd+0x58>)
    3a54:	1c60      	adds	r0, r4, #1
    3a56:	1c19      	adds	r1, r3, #0
    3a58:	2210      	movs	r2, #16
    3a5a:	4b13      	ldr	r3, [pc, #76]	; (3aa8 <sal_aes_wrrd+0x5c>)
    3a5c:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    3a5e:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    3a60:	4b12      	ldr	r3, [pc, #72]	; (3aac <sal_aes_wrrd+0x60>)
    3a62:	781b      	ldrb	r3, [r3, #0]
    3a64:	2b00      	cmp	r3, #0
    3a66:	d008      	beq.n	3a7a <sal_aes_wrrd+0x2e>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3a68:	2083      	movs	r0, #131	; 0x83
    3a6a:	490e      	ldr	r1, [pc, #56]	; (3aa4 <sal_aes_wrrd+0x58>)
    3a6c:	2212      	movs	r2, #18
    3a6e:	4b10      	ldr	r3, [pc, #64]	; (3ab0 <sal_aes_wrrd+0x64>)
    3a70:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    3a72:	2200      	movs	r2, #0
    3a74:	4b0d      	ldr	r3, [pc, #52]	; (3aac <sal_aes_wrrd+0x60>)
    3a76:	701a      	strb	r2, [r3, #0]
    3a78:	e005      	b.n	3a86 <sal_aes_wrrd+0x3a>
	} else {
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    3a7a:	2084      	movs	r0, #132	; 0x84
    3a7c:	4909      	ldr	r1, [pc, #36]	; (3aa4 <sal_aes_wrrd+0x58>)
    3a7e:	3101      	adds	r1, #1
    3a80:	2211      	movs	r2, #17
    3a82:	4b0b      	ldr	r3, [pc, #44]	; (3ab0 <sal_aes_wrrd+0x64>)
    3a84:	4798      	blx	r3
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    3a86:	2d00      	cmp	r5, #0
    3a88:	d005      	beq.n	3a96 <sal_aes_wrrd+0x4a>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    3a8a:	1c28      	adds	r0, r5, #0
    3a8c:	4905      	ldr	r1, [pc, #20]	; (3aa4 <sal_aes_wrrd+0x58>)
    3a8e:	3101      	adds	r1, #1
    3a90:	2210      	movs	r2, #16
    3a92:	4b05      	ldr	r3, [pc, #20]	; (3aa8 <sal_aes_wrrd+0x5c>)
    3a94:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    3a96:	4b03      	ldr	r3, [pc, #12]	; (3aa4 <sal_aes_wrrd+0x58>)
    3a98:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    3a9a:	2018      	movs	r0, #24
    3a9c:	4b05      	ldr	r3, [pc, #20]	; (3ab4 <sal_aes_wrrd+0x68>)
    3a9e:	4798      	blx	r3
}
    3aa0:	bd38      	pop	{r3, r4, r5, pc}
    3aa2:	46c0      	nop			; (mov r8, r8)
    3aa4:	200006e4 	.word	0x200006e4
    3aa8:	00006af9 	.word	0x00006af9
    3aac:	200006f8 	.word	0x200006f8
    3ab0:	000044e1 	.word	0x000044e1
    3ab4:	00001625 	.word	0x00001625

00003ab8 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
    3ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aba:	4647      	mov	r7, r8
    3abc:	b480      	push	{r7}
    3abe:	b084      	sub	sp, #16
    3ac0:	1c05      	adds	r5, r0, #0
    3ac2:	1c0f      	adds	r7, r1, #0
    3ac4:	1c14      	adds	r4, r2, #0
	if (key != NULL) {
    3ac6:	2800      	cmp	r0, #0
    3ac8:	d017      	beq.n	3afa <sal_aes_setup+0x42>
		/* Setup key. */
		dec_initialized = false;
    3aca:	2200      	movs	r2, #0
    3acc:	4b3e      	ldr	r3, [pc, #248]	; (3bc8 <sal_aes_setup+0x110>)
    3ace:	701a      	strb	r2, [r3, #0]

		last_dir = AES_DIR_VOID;
    3ad0:	2202      	movs	r2, #2
    3ad2:	4b3e      	ldr	r3, [pc, #248]	; (3bcc <sal_aes_setup+0x114>)
    3ad4:	701a      	strb	r2, [r3, #0]

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
    3ad6:	483e      	ldr	r0, [pc, #248]	; (3bd0 <sal_aes_setup+0x118>)
    3ad8:	1c29      	adds	r1, r5, #0
    3ada:	2210      	movs	r2, #16
    3adc:	4b3d      	ldr	r3, [pc, #244]	; (3bd4 <sal_aes_setup+0x11c>)
    3ade:	4698      	mov	r8, r3
    3ae0:	4798      	blx	r3

		/* Set subregister AES_MODE (Bits 4:6 in AES_CON) to 1: KEY
		 * SETUP. */
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3ae2:	4e3d      	ldr	r6, [pc, #244]	; (3bd8 <sal_aes_setup+0x120>)
    3ae4:	2310      	movs	r3, #16
    3ae6:	7033      	strb	r3, [r6, #0]

		/* Fill in key. */
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    3ae8:	1c70      	adds	r0, r6, #1
    3aea:	1c29      	adds	r1, r5, #0
    3aec:	2210      	movs	r2, #16
    3aee:	47c0      	blx	r8

		/* Write to SRAM in one step. */
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    3af0:	2083      	movs	r0, #131	; 0x83
    3af2:	1c31      	adds	r1, r6, #0
    3af4:	2211      	movs	r2, #17
    3af6:	4b39      	ldr	r3, [pc, #228]	; (3bdc <sal_aes_setup+0x124>)
    3af8:	4798      	blx	r3
				AES_BLOCKSIZE + 1);
	}

	/* Set encryption direction. */
	switch (dir) {
    3afa:	2c00      	cmp	r4, #0
    3afc:	d002      	beq.n	3b04 <sal_aes_setup+0x4c>
    3afe:	2c01      	cmp	r4, #1
    3b00:	d012      	beq.n	3b28 <sal_aes_setup+0x70>
    3b02:	e05a      	b.n	3bba <sal_aes_setup+0x102>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
    3b04:	4b31      	ldr	r3, [pc, #196]	; (3bcc <sal_aes_setup+0x114>)
    3b06:	781b      	ldrb	r3, [r3, #0]
    3b08:	2b01      	cmp	r3, #1
    3b0a:	d13d      	bne.n	3b88 <sal_aes_setup+0xd0>
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3b0c:	4d32      	ldr	r5, [pc, #200]	; (3bd8 <sal_aes_setup+0x120>)
    3b0e:	2310      	movs	r3, #16
    3b10:	702b      	strb	r3, [r5, #0]

			/* Fill in key. */
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    3b12:	1c68      	adds	r0, r5, #1
    3b14:	492e      	ldr	r1, [pc, #184]	; (3bd0 <sal_aes_setup+0x118>)
    3b16:	2210      	movs	r2, #16
    3b18:	4b2e      	ldr	r3, [pc, #184]	; (3bd4 <sal_aes_setup+0x11c>)
    3b1a:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3b1c:	2083      	movs	r0, #131	; 0x83
    3b1e:	1c29      	adds	r1, r5, #0
    3b20:	2211      	movs	r2, #17
    3b22:	4b2e      	ldr	r3, [pc, #184]	; (3bdc <sal_aes_setup+0x124>)
    3b24:	4798      	blx	r3
    3b26:	e02f      	b.n	3b88 <sal_aes_setup+0xd0>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
    3b28:	4b28      	ldr	r3, [pc, #160]	; (3bcc <sal_aes_setup+0x114>)
    3b2a:	781b      	ldrb	r3, [r3, #0]
    3b2c:	2b01      	cmp	r3, #1
    3b2e:	d02b      	beq.n	3b88 <sal_aes_setup+0xd0>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3b30:	2210      	movs	r2, #16
    3b32:	4b29      	ldr	r3, [pc, #164]	; (3bd8 <sal_aes_setup+0x120>)
    3b34:	701a      	strb	r2, [r3, #0]

			if (!dec_initialized) {
    3b36:	4b24      	ldr	r3, [pc, #144]	; (3bc8 <sal_aes_setup+0x110>)
    3b38:	781b      	ldrb	r3, [r3, #0]
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d116      	bne.n	3b6c <sal_aes_setup+0xb4>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    3b3e:	4d26      	ldr	r5, [pc, #152]	; (3bd8 <sal_aes_setup+0x120>)
    3b40:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    3b42:	2380      	movs	r3, #128	; 0x80
    3b44:	746b      	strb	r3, [r5, #17]
						SR_AES_MODE, AES_MODE_ECB) |
						SR_MASK(SR_AES_REQUEST,
						AES_REQUEST);

				setup_flag = true; /* Needed in sal_aes_wrrd().
    3b46:	2201      	movs	r2, #1
    3b48:	4b25      	ldr	r3, [pc, #148]	; (3be0 <sal_aes_setup+0x128>)
    3b4a:	701a      	strb	r2, [r3, #0]
				                   **/
				sal_aes_wrrd(dummy, NULL);
    3b4c:	4668      	mov	r0, sp
    3b4e:	2100      	movs	r1, #0
    3b50:	4b24      	ldr	r3, [pc, #144]	; (3be4 <sal_aes_setup+0x12c>)
    3b52:	4798      	blx	r3

				/* Read last round key: */

				/* Set to key mode. */
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    3b54:	2310      	movs	r3, #16
    3b56:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    3b58:	2083      	movs	r0, #131	; 0x83
    3b5a:	1c29      	adds	r1, r5, #0
    3b5c:	2201      	movs	r2, #1
    3b5e:	4b1f      	ldr	r3, [pc, #124]	; (3bdc <sal_aes_setup+0x124>)
    3b60:	4798      	blx	r3
						(AES_BASE_ADDR + RG_AES_CTRL),
						aes_buf, 1);

				/* Read the key. */
				trx_sram_read((AES_BASE_ADDR +
    3b62:	2084      	movs	r0, #132	; 0x84
    3b64:	4920      	ldr	r1, [pc, #128]	; (3be8 <sal_aes_setup+0x130>)
    3b66:	2210      	movs	r2, #16
    3b68:	4b20      	ldr	r3, [pc, #128]	; (3bec <sal_aes_setup+0x134>)
    3b6a:	4798      	blx	r3
			 * simply re-initialize the unit;
			 * aes_buf[0] is AES_MODE_KEY
			 */

			/* Fill in key. */
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    3b6c:	4d1a      	ldr	r5, [pc, #104]	; (3bd8 <sal_aes_setup+0x120>)
    3b6e:	1c68      	adds	r0, r5, #1
    3b70:	491d      	ldr	r1, [pc, #116]	; (3be8 <sal_aes_setup+0x130>)
    3b72:	2210      	movs	r2, #16
    3b74:	4b17      	ldr	r3, [pc, #92]	; (3bd4 <sal_aes_setup+0x11c>)
    3b76:	4798      	blx	r3

			/* Write to SRAM in one step. */
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    3b78:	2083      	movs	r0, #131	; 0x83
    3b7a:	1c29      	adds	r1, r5, #0
    3b7c:	2211      	movs	r2, #17
    3b7e:	4b17      	ldr	r3, [pc, #92]	; (3bdc <sal_aes_setup+0x124>)
    3b80:	4798      	blx	r3
					aes_buf, AES_BLOCKSIZE + 1);

			dec_initialized = true;
    3b82:	4b11      	ldr	r3, [pc, #68]	; (3bc8 <sal_aes_setup+0x110>)
    3b84:	2201      	movs	r2, #1
    3b86:	701a      	strb	r2, [r3, #0]

	default:
		return false;
	}

	last_dir = dir;
    3b88:	4b10      	ldr	r3, [pc, #64]	; (3bcc <sal_aes_setup+0x114>)
    3b8a:	701c      	strb	r4, [r3, #0]

	/* Set encryption mode. */
	switch (enc_mode) {
    3b8c:	2f00      	cmp	r7, #0
    3b8e:	d002      	beq.n	3b96 <sal_aes_setup+0xde>
				SR_MASK(SR_AES_REQUEST, AES_REQUEST);
	}
	break;

	default:
		return (false);
    3b90:	2000      	movs	r0, #0
	}

	last_dir = dir;

	/* Set encryption mode. */
	switch (enc_mode) {
    3b92:	2f02      	cmp	r7, #2
    3b94:	d113      	bne.n	3bbe <sal_aes_setup+0x106>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
				SR_MASK(SR_AES_DIR, dir);
    3b96:	00e4      	lsls	r4, r4, #3
	/* Set encryption mode. */
	switch (enc_mode) {
	case AES_MODE_ECB:
	case AES_MODE_CBC:
	{
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    3b98:	2308      	movs	r3, #8
    3b9a:	401c      	ands	r4, r3
    3b9c:	013f      	lsls	r7, r7, #4
    3b9e:	2370      	movs	r3, #112	; 0x70
    3ba0:	401f      	ands	r7, r3
    3ba2:	433c      	orrs	r4, r7
    3ba4:	4b0c      	ldr	r3, [pc, #48]	; (3bd8 <sal_aes_setup+0x120>)
    3ba6:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir);
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    3ba8:	2780      	movs	r7, #128	; 0x80
    3baa:	427f      	negs	r7, r7
    3bac:	433c      	orrs	r4, r7
    3bae:	745c      	strb	r4, [r3, #17]

	default:
		return (false);
	}

	setup_flag = true;
    3bb0:	2201      	movs	r2, #1
    3bb2:	4b0b      	ldr	r3, [pc, #44]	; (3be0 <sal_aes_setup+0x128>)
    3bb4:	701a      	strb	r2, [r3, #0]

	return (true);
    3bb6:	2001      	movs	r0, #1
    3bb8:	e001      	b.n	3bbe <sal_aes_setup+0x106>
		}

		break;

	default:
		return false;
    3bba:	2000      	movs	r0, #0
    3bbc:	e7ff      	b.n	3bbe <sal_aes_setup+0x106>
	}

	setup_flag = true;

	return (true);
}
    3bbe:	b004      	add	sp, #16
    3bc0:	bc04      	pop	{r2}
    3bc2:	4690      	mov	r8, r2
    3bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bc6:	46c0      	nop			; (mov r8, r8)
    3bc8:	200006c0 	.word	0x200006c0
    3bcc:	20000009 	.word	0x20000009
    3bd0:	200006d4 	.word	0x200006d4
    3bd4:	00006af9 	.word	0x00006af9
    3bd8:	200006e4 	.word	0x200006e4
    3bdc:	000041cd 	.word	0x000041cd
    3be0:	200006f8 	.word	0x200006f8
    3be4:	00003a4d 	.word	0x00003a4d
    3be8:	200006c4 	.word	0x200006c4
    3bec:	00004345 	.word	0x00004345

00003bf0 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    3bf0:	b508      	push	{r3, lr}
    3bf2:	1c01      	adds	r1, r0, #0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    3bf4:	2084      	movs	r0, #132	; 0x84
    3bf6:	2210      	movs	r2, #16
    3bf8:	4b01      	ldr	r3, [pc, #4]	; (3c00 <sal_aes_read+0x10>)
    3bfa:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    3bfc:	bd08      	pop	{r3, pc}
    3bfe:	46c0      	nop			; (mov r8, r8)
    3c00:	00004345 	.word	0x00004345

00003c04 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    3c04:	b508      	push	{r3, lr}
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3c06:	2201      	movs	r2, #1
    3c08:	4b03      	ldr	r3, [pc, #12]	; (3c18 <AT86RFX_ISR+0x14>)
    3c0a:	611a      	str	r2, [r3, #16]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();

	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    3c0c:	4b03      	ldr	r3, [pc, #12]	; (3c1c <AT86RFX_ISR+0x18>)
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	2b00      	cmp	r3, #0
    3c12:	d000      	beq.n	3c16 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    3c14:	4798      	blx	r3
	}
}
    3c16:	bd08      	pop	{r3, pc}
    3c18:	40001800 	.word	0x40001800
    3c1c:	200006fc 	.word	0x200006fc

00003c20 <trx_spi_init>:

void trx_spi_init(void)
{
    3c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c22:	b085      	sub	sp, #20
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = 10;
	config->address_enabled = false;
    3c24:	4a35      	ldr	r2, [pc, #212]	; (3cfc <trx_spi_init+0xdc>)
    3c26:	2300      	movs	r3, #0
    3c28:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    3c2a:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    3c2c:	213f      	movs	r1, #63	; 0x3f
    3c2e:	7011      	strb	r1, [r2, #0]
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3c30:	4c33      	ldr	r4, [pc, #204]	; (3d00 <trx_spi_init+0xe0>)
    3c32:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3c34:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    3c36:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3c38:	2201      	movs	r2, #1
    3c3a:	4669      	mov	r1, sp
    3c3c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    3c3e:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3c40:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3c42:	203f      	movs	r0, #63	; 0x3f
    3c44:	4b2f      	ldr	r3, [pc, #188]	; (3d04 <trx_spi_init+0xe4>)
    3c46:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3c48:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c4a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3c4c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3c4e:	2900      	cmp	r1, #0
    3c50:	d103      	bne.n	3c5a <trx_spi_init+0x3a>
		return &(ports[port_index]->Group[group_index]);
    3c52:	095a      	lsrs	r2, r3, #5
    3c54:	01d2      	lsls	r2, r2, #7
    3c56:	492c      	ldr	r1, [pc, #176]	; (3d08 <trx_spi_init+0xe8>)
    3c58:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c5a:	271f      	movs	r7, #31
    3c5c:	403b      	ands	r3, r7
    3c5e:	2401      	movs	r4, #1
    3c60:	1c21      	adds	r1, r4, #0
    3c62:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3c64:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3c66:	4a29      	ldr	r2, [pc, #164]	; (3d0c <trx_spi_init+0xec>)
    3c68:	7014      	strb	r4, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3c6a:	2300      	movs	r3, #0
    3c6c:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3c6e:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3c70:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    3c72:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    3c74:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3c76:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3c78:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    3c7a:	2124      	movs	r1, #36	; 0x24
    3c7c:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3c7e:	61d3      	str	r3, [r2, #28]
    3c80:	6213      	str	r3, [r2, #32]
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    3c82:	2380      	movs	r3, #128	; 0x80
    3c84:	025b      	lsls	r3, r3, #9
    3c86:	60d3      	str	r3, [r2, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    3c88:	4b21      	ldr	r3, [pc, #132]	; (3d10 <trx_spi_init+0xf0>)
    3c8a:	6193      	str	r3, [r2, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    3c8c:	4b21      	ldr	r3, [pc, #132]	; (3d14 <trx_spi_init+0xf4>)
    3c8e:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    3c90:	2301      	movs	r3, #1
    3c92:	425b      	negs	r3, r3
    3c94:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    3c96:	4b20      	ldr	r3, [pc, #128]	; (3d18 <trx_spi_init+0xf8>)
    3c98:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    3c9a:	4b20      	ldr	r3, [pc, #128]	; (3d1c <trx_spi_init+0xfc>)
    3c9c:	6353      	str	r3, [r2, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    3c9e:	4e20      	ldr	r6, [pc, #128]	; (3d20 <trx_spi_init+0x100>)
    3ca0:	1c30      	adds	r0, r6, #0
    3ca2:	4920      	ldr	r1, [pc, #128]	; (3d24 <trx_spi_init+0x104>)
    3ca4:	4b20      	ldr	r3, [pc, #128]	; (3d28 <trx_spi_init+0x108>)
    3ca6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3ca8:	6835      	ldr	r5, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3caa:	1c28      	adds	r0, r5, #0
    3cac:	4b1f      	ldr	r3, [pc, #124]	; (3d2c <trx_spi_init+0x10c>)
    3cae:	4798      	blx	r3
    3cb0:	4007      	ands	r7, r0
    3cb2:	40bc      	lsls	r4, r7
    3cb4:	4b1e      	ldr	r3, [pc, #120]	; (3d30 <trx_spi_init+0x110>)
    3cb6:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3cb8:	6832      	ldr	r2, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    3cba:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d1fc      	bne.n	3cba <trx_spi_init+0x9a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3cc0:	682b      	ldr	r3, [r5, #0]
    3cc2:	2602      	movs	r6, #2
    3cc4:	4333      	orrs	r3, r6
    3cc6:	602b      	str	r3, [r5, #0]
	spi_enable(&master);
	   
	struct extint_chan_conf eint_chan_conf; 
	extint_chan_get_config_defaults(&eint_chan_conf); 
    3cc8:	ac01      	add	r4, sp, #4
    3cca:	1c20      	adds	r0, r4, #0
    3ccc:	4b19      	ldr	r3, [pc, #100]	; (3d34 <trx_spi_init+0x114>)
    3cce:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN; 
    3cd0:	2320      	movs	r3, #32
    3cd2:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX; 
    3cd4:	2380      	movs	r3, #128	; 0x80
    3cd6:	039b      	lsls	r3, r3, #14
    3cd8:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN; 
    3cda:	7226      	strb	r6, [r4, #8]
	eint_chan_conf.wake_if_sleeping    = true; 
    3cdc:	2301      	movs	r3, #1
    3cde:	7263      	strb	r3, [r4, #9]
	eint_chan_conf.filter_input_signal = false; 
    3ce0:	2200      	movs	r2, #0
    3ce2:	72a2      	strb	r2, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING; 
    3ce4:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf); 
    3ce6:	2000      	movs	r0, #0
    3ce8:	1c21      	adds	r1, r4, #0
    3cea:	4b13      	ldr	r3, [pc, #76]	; (3d38 <trx_spi_init+0x118>)
    3cec:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN, EXTINT_CALLBACK_TYPE_DETECT);
    3cee:	4813      	ldr	r0, [pc, #76]	; (3d3c <trx_spi_init+0x11c>)
    3cf0:	2100      	movs	r1, #0
    3cf2:	2200      	movs	r2, #0
    3cf4:	4b12      	ldr	r3, [pc, #72]	; (3d40 <trx_spi_init+0x120>)
    3cf6:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    3cf8:	b005      	add	sp, #20
    3cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cfc:	20000990 	.word	0x20000990
    3d00:	20000994 	.word	0x20000994
    3d04:	00001bfd 	.word	0x00001bfd
    3d08:	41004400 	.word	0x41004400
    3d0c:	20000998 	.word	0x20000998
    3d10:	003d0900 	.word	0x003d0900
    3d14:	00530005 	.word	0x00530005
    3d18:	003e0005 	.word	0x003e0005
    3d1c:	00520005 	.word	0x00520005
    3d20:	200009d0 	.word	0x200009d0
    3d24:	42001800 	.word	0x42001800
    3d28:	000006f5 	.word	0x000006f5
    3d2c:	0000155d 	.word	0x0000155d
    3d30:	e000e100 	.word	0xe000e100
    3d34:	00000279 	.word	0x00000279
    3d38:	0000028d 	.word	0x0000028d
    3d3c:	00003c05 	.word	0x00003c05
    3d40:	00000115 	.word	0x00000115

00003d44 <PhyReset>:

void PhyReset(void)
{
    3d44:	b570      	push	{r4, r5, r6, lr}
    3d46:	4b09      	ldr	r3, [pc, #36]	; (3d6c <PhyReset+0x28>)
    3d48:	1c1c      	adds	r4, r3, #0
    3d4a:	3480      	adds	r4, #128	; 0x80
    3d4c:	2580      	movs	r5, #128	; 0x80
    3d4e:	022d      	lsls	r5, r5, #8
    3d50:	61a5      	str	r5, [r4, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3d52:	2280      	movs	r2, #128	; 0x80
    3d54:	0352      	lsls	r2, r2, #13
    3d56:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    3d58:	20a5      	movs	r0, #165	; 0xa5
    3d5a:	0040      	lsls	r0, r0, #1
    3d5c:	4e04      	ldr	r6, [pc, #16]	; (3d70 <PhyReset+0x2c>)
    3d5e:	47b0      	blx	r6
    3d60:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    3d62:	200a      	movs	r0, #10
    3d64:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3d66:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    3d68:	bd70      	pop	{r4, r5, r6, pc}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	41004400 	.word	0x41004400
    3d70:	00001625 	.word	0x00001625

00003d74 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    3d74:	b570      	push	{r4, r5, r6, lr}
    3d76:	1c06      	adds	r6, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d78:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3d7c:	4263      	negs	r3, r4
    3d7e:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3d80:	b672      	cpsid	i
    3d82:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3d86:	2200      	movs	r2, #0
    3d88:	4b33      	ldr	r3, [pc, #204]	; (3e58 <trx_reg_read+0xe4>)
    3d8a:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3d8c:	4d33      	ldr	r5, [pc, #204]	; (3e5c <trx_reg_read+0xe8>)
    3d8e:	1c28      	adds	r0, r5, #0
    3d90:	4933      	ldr	r1, [pc, #204]	; (3e60 <trx_reg_read+0xec>)
    3d92:	2201      	movs	r2, #1
    3d94:	4b33      	ldr	r3, [pc, #204]	; (3e64 <trx_reg_read+0xf0>)
    3d96:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d98:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d9a:	2101      	movs	r1, #1
    3d9c:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3d9e:	420a      	tst	r2, r1
    3da0:	d0fc      	beq.n	3d9c <trx_reg_read+0x28>
    3da2:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3da4:	07d1      	lsls	r1, r2, #31
    3da6:	d502      	bpl.n	3dae <trx_reg_read+0x3a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3da8:	2280      	movs	r2, #128	; 0x80
    3daa:	4316      	orrs	r6, r2
    3dac:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3dae:	2102      	movs	r1, #2
    3db0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3db2:	420a      	tst	r2, r1
    3db4:	d0fc      	beq.n	3db0 <trx_reg_read+0x3c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3db6:	2104      	movs	r1, #4
    3db8:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3dba:	420a      	tst	r2, r1
    3dbc:	d0fc      	beq.n	3db8 <trx_reg_read+0x44>
    3dbe:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3dc0:	0751      	lsls	r1, r2, #29
    3dc2:	d514      	bpl.n	3dee <trx_reg_read+0x7a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3dc4:	8b5a      	ldrh	r2, [r3, #26]
    3dc6:	0751      	lsls	r1, r2, #29
    3dc8:	d503      	bpl.n	3dd2 <trx_reg_read+0x5e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3dca:	8b59      	ldrh	r1, [r3, #26]
    3dcc:	2204      	movs	r2, #4
    3dce:	430a      	orrs	r2, r1
    3dd0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3dd2:	4a22      	ldr	r2, [pc, #136]	; (3e5c <trx_reg_read+0xe8>)
    3dd4:	7992      	ldrb	r2, [r2, #6]
    3dd6:	2a01      	cmp	r2, #1
    3dd8:	d105      	bne.n	3de6 <trx_reg_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3dda:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ddc:	05c9      	lsls	r1, r1, #23
    3dde:	0dc9      	lsrs	r1, r1, #23
    3de0:	4a21      	ldr	r2, [pc, #132]	; (3e68 <trx_reg_read+0xf4>)
    3de2:	8011      	strh	r1, [r2, #0]
    3de4:	e003      	b.n	3dee <trx_reg_read+0x7a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3de6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3de8:	b2c9      	uxtb	r1, r1
    3dea:	4a1f      	ldr	r2, [pc, #124]	; (3e68 <trx_reg_read+0xf4>)
    3dec:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3dee:	2101      	movs	r1, #1
    3df0:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    3df2:	420a      	tst	r2, r1
    3df4:	d0fc      	beq.n	3df0 <trx_reg_read+0x7c>
    3df6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3df8:	07d1      	lsls	r1, r2, #31
    3dfa:	d501      	bpl.n	3e00 <trx_reg_read+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3dfc:	2200      	movs	r2, #0
    3dfe:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e00:	2102      	movs	r1, #2
    3e02:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    3e04:	420a      	tst	r2, r1
    3e06:	d0fc      	beq.n	3e02 <trx_reg_read+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e08:	2104      	movs	r1, #4
    3e0a:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    3e0c:	420a      	tst	r2, r1
    3e0e:	d0fc      	beq.n	3e0a <trx_reg_read+0x96>
    3e10:	7e1a      	ldrb	r2, [r3, #24]
}

uint8_t trx_reg_read(uint8_t addr)
{
#if SAMD || SAMR21
	uint16_t register_value = 0;
    3e12:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3e14:	0751      	lsls	r1, r2, #29
    3e16:	d510      	bpl.n	3e3a <trx_reg_read+0xc6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e18:	8b5a      	ldrh	r2, [r3, #26]
    3e1a:	0751      	lsls	r1, r2, #29
    3e1c:	d503      	bpl.n	3e26 <trx_reg_read+0xb2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3e1e:	8b59      	ldrh	r1, [r3, #26]
    3e20:	2204      	movs	r2, #4
    3e22:	430a      	orrs	r2, r1
    3e24:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e26:	4a0d      	ldr	r2, [pc, #52]	; (3e5c <trx_reg_read+0xe8>)
    3e28:	7992      	ldrb	r2, [r2, #6]
    3e2a:	2a01      	cmp	r2, #1
    3e2c:	d103      	bne.n	3e36 <trx_reg_read+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e2e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3e30:	05ed      	lsls	r5, r5, #23
    3e32:	0ded      	lsrs	r5, r5, #23
    3e34:	e001      	b.n	3e3a <trx_reg_read+0xc6>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e36:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    3e38:	b2ed      	uxtb	r5, r5
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3e3a:	4808      	ldr	r0, [pc, #32]	; (3e5c <trx_reg_read+0xe8>)
    3e3c:	4908      	ldr	r1, [pc, #32]	; (3e60 <trx_reg_read+0xec>)
    3e3e:	2200      	movs	r2, #0
    3e40:	4b08      	ldr	r3, [pc, #32]	; (3e64 <trx_reg_read+0xf0>)
    3e42:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3e44:	2c00      	cmp	r4, #0
    3e46:	d005      	beq.n	3e54 <trx_reg_read+0xe0>
		cpu_irq_enable();
    3e48:	2201      	movs	r2, #1
    3e4a:	4b03      	ldr	r3, [pc, #12]	; (3e58 <trx_reg_read+0xe4>)
    3e4c:	701a      	strb	r2, [r3, #0]
    3e4e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3e52:	b662      	cpsie	i
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    3e54:	b2e8      	uxtb	r0, r5
}
    3e56:	bd70      	pop	{r4, r5, r6, pc}
    3e58:	20000008 	.word	0x20000008
    3e5c:	200009d0 	.word	0x200009d0
    3e60:	20000994 	.word	0x20000994
    3e64:	000008d1 	.word	0x000008d1
    3e68:	2000098c 	.word	0x2000098c

00003e6c <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    3e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e6e:	1c07      	adds	r7, r0, #0
    3e70:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e72:	f3ef 8410 	mrs	r4, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3e76:	4263      	negs	r3, r4
    3e78:	415c      	adcs	r4, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3e7a:	b672      	cpsid	i
    3e7c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e80:	2200      	movs	r2, #0
    3e82:	4b34      	ldr	r3, [pc, #208]	; (3f54 <trx_reg_write+0xe8>)
    3e84:	701a      	strb	r2, [r3, #0]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3e86:	4e34      	ldr	r6, [pc, #208]	; (3f58 <trx_reg_write+0xec>)
    3e88:	1c30      	adds	r0, r6, #0
    3e8a:	4934      	ldr	r1, [pc, #208]	; (3f5c <trx_reg_write+0xf0>)
    3e8c:	2201      	movs	r2, #1
    3e8e:	4b34      	ldr	r3, [pc, #208]	; (3f60 <trx_reg_write+0xf4>)
    3e90:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e92:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e94:	2101      	movs	r1, #1
    3e96:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    3e98:	420a      	tst	r2, r1
    3e9a:	d0fc      	beq.n	3e96 <trx_reg_write+0x2a>
    3e9c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3e9e:	07d1      	lsls	r1, r2, #31
    3ea0:	d502      	bpl.n	3ea8 <trx_reg_write+0x3c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ea2:	22c0      	movs	r2, #192	; 0xc0
    3ea4:	4317      	orrs	r7, r2
    3ea6:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ea8:	2102      	movs	r1, #2
    3eaa:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    3eac:	420a      	tst	r2, r1
    3eae:	d0fc      	beq.n	3eaa <trx_reg_write+0x3e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3eb0:	2104      	movs	r1, #4
    3eb2:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3eb4:	420a      	tst	r2, r1
    3eb6:	d0fc      	beq.n	3eb2 <trx_reg_write+0x46>
    3eb8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3eba:	0751      	lsls	r1, r2, #29
    3ebc:	d514      	bpl.n	3ee8 <trx_reg_write+0x7c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ebe:	8b5a      	ldrh	r2, [r3, #26]
    3ec0:	0751      	lsls	r1, r2, #29
    3ec2:	d503      	bpl.n	3ecc <trx_reg_write+0x60>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ec4:	8b59      	ldrh	r1, [r3, #26]
    3ec6:	2204      	movs	r2, #4
    3ec8:	430a      	orrs	r2, r1
    3eca:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ecc:	4a22      	ldr	r2, [pc, #136]	; (3f58 <trx_reg_write+0xec>)
    3ece:	7992      	ldrb	r2, [r2, #6]
    3ed0:	2a01      	cmp	r2, #1
    3ed2:	d105      	bne.n	3ee0 <trx_reg_write+0x74>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ed4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ed6:	05c9      	lsls	r1, r1, #23
    3ed8:	0dc9      	lsrs	r1, r1, #23
    3eda:	4a22      	ldr	r2, [pc, #136]	; (3f64 <trx_reg_write+0xf8>)
    3edc:	8011      	strh	r1, [r2, #0]
    3ede:	e003      	b.n	3ee8 <trx_reg_write+0x7c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ee0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3ee2:	b2c9      	uxtb	r1, r1
    3ee4:	4a1f      	ldr	r2, [pc, #124]	; (3f64 <trx_reg_write+0xf8>)
    3ee6:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ee8:	2001      	movs	r0, #1
    3eea:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    3eec:	4202      	tst	r2, r0
    3eee:	d0fc      	beq.n	3eea <trx_reg_write+0x7e>
    3ef0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3ef2:	07d1      	lsls	r1, r2, #31
    3ef4:	d500      	bpl.n	3ef8 <trx_reg_write+0x8c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ef6:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ef8:	2102      	movs	r1, #2
    3efa:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    3efc:	420a      	tst	r2, r1
    3efe:	d0fc      	beq.n	3efa <trx_reg_write+0x8e>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3f00:	2104      	movs	r1, #4
    3f02:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3f04:	420a      	tst	r2, r1
    3f06:	d0fc      	beq.n	3f02 <trx_reg_write+0x96>
    3f08:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3f0a:	0751      	lsls	r1, r2, #29
    3f0c:	d514      	bpl.n	3f38 <trx_reg_write+0xcc>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3f0e:	8b5a      	ldrh	r2, [r3, #26]
    3f10:	0751      	lsls	r1, r2, #29
    3f12:	d503      	bpl.n	3f1c <trx_reg_write+0xb0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3f14:	8b59      	ldrh	r1, [r3, #26]
    3f16:	2204      	movs	r2, #4
    3f18:	430a      	orrs	r2, r1
    3f1a:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f1c:	4a0e      	ldr	r2, [pc, #56]	; (3f58 <trx_reg_write+0xec>)
    3f1e:	7992      	ldrb	r2, [r2, #6]
    3f20:	2a01      	cmp	r2, #1
    3f22:	d105      	bne.n	3f30 <trx_reg_write+0xc4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f26:	05d2      	lsls	r2, r2, #23
    3f28:	0dd2      	lsrs	r2, r2, #23
    3f2a:	4b0e      	ldr	r3, [pc, #56]	; (3f64 <trx_reg_write+0xf8>)
    3f2c:	801a      	strh	r2, [r3, #0]
    3f2e:	e003      	b.n	3f38 <trx_reg_write+0xcc>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3f32:	b2d2      	uxtb	r2, r2
    3f34:	4b0b      	ldr	r3, [pc, #44]	; (3f64 <trx_reg_write+0xf8>)
    3f36:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    3f38:	4807      	ldr	r0, [pc, #28]	; (3f58 <trx_reg_write+0xec>)
    3f3a:	4908      	ldr	r1, [pc, #32]	; (3f5c <trx_reg_write+0xf0>)
    3f3c:	2200      	movs	r2, #0
    3f3e:	4b08      	ldr	r3, [pc, #32]	; (3f60 <trx_reg_write+0xf4>)
    3f40:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3f42:	2c00      	cmp	r4, #0
    3f44:	d005      	beq.n	3f52 <trx_reg_write+0xe6>
		cpu_irq_enable();
    3f46:	2201      	movs	r2, #1
    3f48:	4b02      	ldr	r3, [pc, #8]	; (3f54 <trx_reg_write+0xe8>)
    3f4a:	701a      	strb	r2, [r3, #0]
    3f4c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3f50:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    3f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f54:	20000008 	.word	0x20000008
    3f58:	200009d0 	.word	0x200009d0
    3f5c:	20000994 	.word	0x20000994
    3f60:	000008d1 	.word	0x000008d1
    3f64:	2000098c 	.word	0x2000098c

00003f68 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    3f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f6a:	465f      	mov	r7, fp
    3f6c:	4656      	mov	r6, sl
    3f6e:	464d      	mov	r5, r9
    3f70:	4644      	mov	r4, r8
    3f72:	b4f0      	push	{r4, r5, r6, r7}
    3f74:	b083      	sub	sp, #12
    3f76:	1c06      	adds	r6, r0, #0
    3f78:	1c0c      	adds	r4, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f7a:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    3f7e:	4278      	negs	r0, r7
    3f80:	4178      	adcs	r0, r7
    3f82:	9001      	str	r0, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3f84:	b672      	cpsid	i
    3f86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3f8a:	2200      	movs	r2, #0
    3f8c:	4b41      	ldr	r3, [pc, #260]	; (4094 <trx_frame_read+0x12c>)
    3f8e:	701a      	strb	r2, [r3, #0]
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    3f90:	4d41      	ldr	r5, [pc, #260]	; (4098 <trx_frame_read+0x130>)
    3f92:	1c28      	adds	r0, r5, #0
    3f94:	4941      	ldr	r1, [pc, #260]	; (409c <trx_frame_read+0x134>)
    3f96:	2201      	movs	r2, #1
    3f98:	4b41      	ldr	r3, [pc, #260]	; (40a0 <trx_frame_read+0x138>)
    3f9a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3f9c:	682b      	ldr	r3, [r5, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3f9e:	2101      	movs	r1, #1
    3fa0:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    3fa2:	420a      	tst	r2, r1
    3fa4:	d0fc      	beq.n	3fa0 <trx_frame_read+0x38>
    3fa6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3fa8:	07d1      	lsls	r1, r2, #31
    3faa:	d501      	bpl.n	3fb0 <trx_frame_read+0x48>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3fac:	2220      	movs	r2, #32
    3fae:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3fb0:	2102      	movs	r1, #2
    3fb2:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    3fb4:	420a      	tst	r2, r1
    3fb6:	d0fc      	beq.n	3fb2 <trx_frame_read+0x4a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3fb8:	2004      	movs	r0, #4
    3fba:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    3fbc:	4202      	tst	r2, r0
    3fbe:	d0fc      	beq.n	3fba <trx_frame_read+0x52>
    3fc0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3fc2:	0750      	lsls	r0, r2, #29
    3fc4:	d50f      	bpl.n	3fe6 <trx_frame_read+0x7e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3fc6:	8b5a      	ldrh	r2, [r3, #26]
    3fc8:	0751      	lsls	r1, r2, #29
    3fca:	d503      	bpl.n	3fd4 <trx_frame_read+0x6c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3fcc:	8b59      	ldrh	r1, [r3, #26]
    3fce:	2204      	movs	r2, #4
    3fd0:	430a      	orrs	r2, r1
    3fd2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fd4:	4a30      	ldr	r2, [pc, #192]	; (4098 <trx_frame_read+0x130>)
    3fd6:	7992      	ldrb	r2, [r2, #6]
    3fd8:	2a01      	cmp	r2, #1
    3fda:	d109      	bne.n	3ff0 <trx_frame_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3fde:	05d2      	lsls	r2, r2, #23
    3fe0:	0dd2      	lsrs	r2, r2, #23
    3fe2:	4b30      	ldr	r3, [pc, #192]	; (40a4 <trx_frame_read+0x13c>)
    3fe4:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    3fe6:	1e63      	subs	r3, r4, #1
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	2c00      	cmp	r4, #0
    3fec:	d105      	bne.n	3ffa <trx_frame_read+0x92>
    3fee:	e03c      	b.n	406a <trx_frame_read+0x102>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3ff2:	b2d2      	uxtb	r2, r2
    3ff4:	4b2b      	ldr	r3, [pc, #172]	; (40a4 <trx_frame_read+0x13c>)
    3ff6:	801a      	strh	r2, [r3, #0]
    3ff8:	e7f5      	b.n	3fe6 <trx_frame_read+0x7e>
    3ffa:	3301      	adds	r3, #1
    3ffc:	199b      	adds	r3, r3, r6
    3ffe:	4699      	mov	r9, r3
    4000:	2020      	movs	r0, #32
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4002:	4a25      	ldr	r2, [pc, #148]	; (4098 <trx_frame_read+0x130>)
    4004:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4006:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4008:	2300      	movs	r3, #0
    400a:	469a      	mov	sl, r3
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    400c:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    400e:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4010:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4012:	2204      	movs	r2, #4
    4014:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4016:	4642      	mov	r2, r8
    4018:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    401a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    401c:	4222      	tst	r2, r4
    401e:	d0fc      	beq.n	401a <trx_frame_read+0xb2>
    4020:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4022:	4222      	tst	r2, r4
    4024:	d001      	beq.n	402a <trx_frame_read+0xc2>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4026:	4652      	mov	r2, sl
    4028:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    402a:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    402c:	422a      	tst	r2, r5
    402e:	d0fc      	beq.n	402a <trx_frame_read+0xc2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4030:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4032:	420a      	tst	r2, r1
    4034:	d0fc      	beq.n	4030 <trx_frame_read+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4036:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4038:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    403a:	420a      	tst	r2, r1
    403c:	d011      	beq.n	4062 <trx_frame_read+0xfa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    403e:	8b5a      	ldrh	r2, [r3, #26]
    4040:	420a      	tst	r2, r1
    4042:	d004      	beq.n	404e <trx_frame_read+0xe6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4044:	8b5a      	ldrh	r2, [r3, #26]
    4046:	4658      	mov	r0, fp
    4048:	4302      	orrs	r2, r0
    404a:	b292      	uxth	r2, r2
    404c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    404e:	4812      	ldr	r0, [pc, #72]	; (4098 <trx_frame_read+0x130>)
    4050:	7982      	ldrb	r2, [r0, #6]
    4052:	2a01      	cmp	r2, #1
    4054:	d103      	bne.n	405e <trx_frame_read+0xf6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4056:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4058:	05c0      	lsls	r0, r0, #23
    405a:	0dc0      	lsrs	r0, r0, #23
    405c:	e001      	b.n	4062 <trx_frame_read+0xfa>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    405e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4060:	b2c0      	uxtb	r0, r0
		}
		spi_read(&master, &temp);
		*data = temp;
    4062:	7030      	strb	r0, [r6, #0]
		data++;
    4064:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4066:	454e      	cmp	r6, r9
    4068:	d1d5      	bne.n	4016 <trx_frame_read+0xae>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    406a:	480b      	ldr	r0, [pc, #44]	; (4098 <trx_frame_read+0x130>)
    406c:	490b      	ldr	r1, [pc, #44]	; (409c <trx_frame_read+0x134>)
    406e:	2200      	movs	r2, #0
    4070:	4b0b      	ldr	r3, [pc, #44]	; (40a0 <trx_frame_read+0x138>)
    4072:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4074:	9901      	ldr	r1, [sp, #4]
    4076:	2900      	cmp	r1, #0
    4078:	d005      	beq.n	4086 <trx_frame_read+0x11e>
		cpu_irq_enable();
    407a:	2201      	movs	r2, #1
    407c:	4b05      	ldr	r3, [pc, #20]	; (4094 <trx_frame_read+0x12c>)
    407e:	701a      	strb	r2, [r3, #0]
    4080:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4084:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4086:	b003      	add	sp, #12
    4088:	bc3c      	pop	{r2, r3, r4, r5}
    408a:	4690      	mov	r8, r2
    408c:	4699      	mov	r9, r3
    408e:	46a2      	mov	sl, r4
    4090:	46ab      	mov	fp, r5
    4092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4094:	20000008 	.word	0x20000008
    4098:	200009d0 	.word	0x200009d0
    409c:	20000994 	.word	0x20000994
    40a0:	000008d1 	.word	0x000008d1
    40a4:	2000098c 	.word	0x2000098c

000040a8 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    40a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40aa:	464f      	mov	r7, r9
    40ac:	4646      	mov	r6, r8
    40ae:	b4c0      	push	{r6, r7}
    40b0:	1c04      	adds	r4, r0, #0
    40b2:	1c0d      	adds	r5, r1, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40b4:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    40b8:	4271      	negs	r1, r6
    40ba:	4171      	adcs	r1, r6
    40bc:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    40be:	b672      	cpsid	i
    40c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    40c4:	2200      	movs	r2, #0
    40c6:	4b3c      	ldr	r3, [pc, #240]	; (41b8 <trx_frame_write+0x110>)
    40c8:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    40ca:	4f3c      	ldr	r7, [pc, #240]	; (41bc <trx_frame_write+0x114>)
    40cc:	1c38      	adds	r0, r7, #0
    40ce:	493c      	ldr	r1, [pc, #240]	; (41c0 <trx_frame_write+0x118>)
    40d0:	2201      	movs	r2, #1
    40d2:	4b3c      	ldr	r3, [pc, #240]	; (41c4 <trx_frame_write+0x11c>)
    40d4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40d6:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    40d8:	2101      	movs	r1, #1
    40da:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    40dc:	420a      	tst	r2, r1
    40de:	d0fc      	beq.n	40da <trx_frame_write+0x32>
    40e0:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    40e2:	07d1      	lsls	r1, r2, #31
    40e4:	d501      	bpl.n	40ea <trx_frame_write+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    40e6:	2260      	movs	r2, #96	; 0x60
    40e8:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    40ea:	2102      	movs	r1, #2
    40ec:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    40ee:	420a      	tst	r2, r1
    40f0:	d0fc      	beq.n	40ec <trx_frame_write+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    40f2:	2104      	movs	r1, #4
    40f4:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    40f6:	420a      	tst	r2, r1
    40f8:	d0fc      	beq.n	40f4 <trx_frame_write+0x4c>
    40fa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    40fc:	0751      	lsls	r1, r2, #29
    40fe:	d50f      	bpl.n	4120 <trx_frame_write+0x78>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4100:	8b5a      	ldrh	r2, [r3, #26]
    4102:	0751      	lsls	r1, r2, #29
    4104:	d503      	bpl.n	410e <trx_frame_write+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4106:	8b59      	ldrh	r1, [r3, #26]
    4108:	2204      	movs	r2, #4
    410a:	430a      	orrs	r2, r1
    410c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    410e:	4a2b      	ldr	r2, [pc, #172]	; (41bc <trx_frame_write+0x114>)
    4110:	7992      	ldrb	r2, [r2, #6]
    4112:	2a01      	cmp	r2, #1
    4114:	d10e      	bne.n	4134 <trx_frame_write+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4116:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4118:	05c9      	lsls	r1, r1, #23
    411a:	0dc9      	lsrs	r1, r1, #23
    411c:	4a2a      	ldr	r2, [pc, #168]	; (41c8 <trx_frame_write+0x120>)
    411e:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4120:	4a26      	ldr	r2, [pc, #152]	; (41bc <trx_frame_write+0x114>)
    4122:	7992      	ldrb	r2, [r2, #6]
    4124:	4690      	mov	r8, r2
    4126:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4128:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    412a:	2002      	movs	r0, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    412c:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    412e:	2204      	movs	r2, #4
    4130:	4694      	mov	ip, r2
    4132:	e02b      	b.n	418c <trx_frame_write+0xe4>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4134:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4136:	b2c9      	uxtb	r1, r1
    4138:	4a23      	ldr	r2, [pc, #140]	; (41c8 <trx_frame_write+0x120>)
    413a:	8011      	strh	r1, [r2, #0]
    413c:	e7f0      	b.n	4120 <trx_frame_write+0x78>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    413e:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    4140:	423a      	tst	r2, r7
    4142:	d0fc      	beq.n	413e <trx_frame_write+0x96>
		}
		spi_write(&master, *data++);
    4144:	7831      	ldrb	r1, [r6, #0]
    4146:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4148:	423a      	tst	r2, r7
    414a:	d000      	beq.n	414e <trx_frame_write+0xa6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    414c:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    414e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    4150:	4202      	tst	r2, r0
    4152:	d0fc      	beq.n	414e <trx_frame_write+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4154:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4156:	4222      	tst	r2, r4
    4158:	d0fc      	beq.n	4154 <trx_frame_write+0xac>
    415a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    415c:	4222      	tst	r2, r4
    415e:	d014      	beq.n	418a <trx_frame_write+0xe2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4160:	8b5a      	ldrh	r2, [r3, #26]
    4162:	4222      	tst	r2, r4
    4164:	d004      	beq.n	4170 <trx_frame_write+0xc8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4166:	8b5a      	ldrh	r2, [r3, #26]
    4168:	4661      	mov	r1, ip
    416a:	430a      	orrs	r2, r1
    416c:	b292      	uxth	r2, r2
    416e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4170:	4642      	mov	r2, r8
    4172:	2a01      	cmp	r2, #1
    4174:	d105      	bne.n	4182 <trx_frame_write+0xda>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4178:	05d2      	lsls	r2, r2, #23
    417a:	0dd2      	lsrs	r2, r2, #23
    417c:	4912      	ldr	r1, [pc, #72]	; (41c8 <trx_frame_write+0x120>)
    417e:	800a      	strh	r2, [r1, #0]
    4180:	e003      	b.n	418a <trx_frame_write+0xe2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4184:	b2d2      	uxtb	r2, r2
    4186:	4910      	ldr	r1, [pc, #64]	; (41c8 <trx_frame_write+0x120>)
    4188:	800a      	strh	r2, [r1, #0]
    418a:	3601      	adds	r6, #1
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);
	while (length--) {
    418c:	3d01      	subs	r5, #1
    418e:	b2ed      	uxtb	r5, r5
    4190:	2dff      	cmp	r5, #255	; 0xff
    4192:	d1d4      	bne.n	413e <trx_frame_write+0x96>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    4194:	4809      	ldr	r0, [pc, #36]	; (41bc <trx_frame_write+0x114>)
    4196:	490a      	ldr	r1, [pc, #40]	; (41c0 <trx_frame_write+0x118>)
    4198:	2200      	movs	r2, #0
    419a:	4b0a      	ldr	r3, [pc, #40]	; (41c4 <trx_frame_write+0x11c>)
    419c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    419e:	464a      	mov	r2, r9
    41a0:	2a00      	cmp	r2, #0
    41a2:	d005      	beq.n	41b0 <trx_frame_write+0x108>
		cpu_irq_enable();
    41a4:	2201      	movs	r2, #1
    41a6:	4b04      	ldr	r3, [pc, #16]	; (41b8 <trx_frame_write+0x110>)
    41a8:	701a      	strb	r2, [r3, #0]
    41aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    41ae:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    41b0:	bc0c      	pop	{r2, r3}
    41b2:	4690      	mov	r8, r2
    41b4:	4699      	mov	r9, r3
    41b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b8:	20000008 	.word	0x20000008
    41bc:	200009d0 	.word	0x200009d0
    41c0:	20000994 	.word	0x20000994
    41c4:	000008d1 	.word	0x000008d1
    41c8:	2000098c 	.word	0x2000098c

000041cc <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    41cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ce:	464f      	mov	r7, r9
    41d0:	4646      	mov	r6, r8
    41d2:	b4c0      	push	{r6, r7}
    41d4:	1c07      	adds	r7, r0, #0
    41d6:	1c0c      	adds	r4, r1, #0
    41d8:	1c15      	adds	r5, r2, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    41da:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    41de:	4271      	negs	r1, r6
    41e0:	4171      	adcs	r1, r6
    41e2:	4689      	mov	r9, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    41e4:	b672      	cpsid	i
    41e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    41ea:	2200      	movs	r2, #0
    41ec:	4b50      	ldr	r3, [pc, #320]	; (4330 <trx_sram_write+0x164>)
    41ee:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    41f0:	4e50      	ldr	r6, [pc, #320]	; (4334 <trx_sram_write+0x168>)
    41f2:	1c30      	adds	r0, r6, #0
    41f4:	4950      	ldr	r1, [pc, #320]	; (4338 <trx_sram_write+0x16c>)
    41f6:	2201      	movs	r2, #1
    41f8:	4b50      	ldr	r3, [pc, #320]	; (433c <trx_sram_write+0x170>)
    41fa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    41fc:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    41fe:	2101      	movs	r1, #1
    4200:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4202:	420a      	tst	r2, r1
    4204:	d0fc      	beq.n	4200 <trx_sram_write+0x34>
    4206:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4208:	07d1      	lsls	r1, r2, #31
    420a:	d501      	bpl.n	4210 <trx_sram_write+0x44>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    420c:	2240      	movs	r2, #64	; 0x40
    420e:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4210:	2102      	movs	r1, #2
    4212:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4214:	420a      	tst	r2, r1
    4216:	d0fc      	beq.n	4212 <trx_sram_write+0x46>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4218:	2104      	movs	r1, #4
    421a:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    421c:	420a      	tst	r2, r1
    421e:	d0fc      	beq.n	421a <trx_sram_write+0x4e>
    4220:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4222:	0751      	lsls	r1, r2, #29
    4224:	d514      	bpl.n	4250 <trx_sram_write+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4226:	8b5a      	ldrh	r2, [r3, #26]
    4228:	0751      	lsls	r1, r2, #29
    422a:	d503      	bpl.n	4234 <trx_sram_write+0x68>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    422c:	8b59      	ldrh	r1, [r3, #26]
    422e:	2204      	movs	r2, #4
    4230:	430a      	orrs	r2, r1
    4232:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4234:	4a3f      	ldr	r2, [pc, #252]	; (4334 <trx_sram_write+0x168>)
    4236:	7992      	ldrb	r2, [r2, #6]
    4238:	2a01      	cmp	r2, #1
    423a:	d105      	bne.n	4248 <trx_sram_write+0x7c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    423c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    423e:	05c9      	lsls	r1, r1, #23
    4240:	0dc9      	lsrs	r1, r1, #23
    4242:	4a3f      	ldr	r2, [pc, #252]	; (4340 <trx_sram_write+0x174>)
    4244:	8011      	strh	r1, [r2, #0]
    4246:	e003      	b.n	4250 <trx_sram_write+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4248:	6a99      	ldr	r1, [r3, #40]	; 0x28
    424a:	b2c9      	uxtb	r1, r1
    424c:	4a3c      	ldr	r2, [pc, #240]	; (4340 <trx_sram_write+0x174>)
    424e:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4250:	2101      	movs	r1, #1
    4252:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    4254:	420a      	tst	r2, r1
    4256:	d0fc      	beq.n	4252 <trx_sram_write+0x86>
    4258:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    425a:	07d1      	lsls	r1, r2, #31
    425c:	d500      	bpl.n	4260 <trx_sram_write+0x94>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    425e:	629f      	str	r7, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4260:	2102      	movs	r1, #2
    4262:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4264:	420a      	tst	r2, r1
    4266:	d0fc      	beq.n	4262 <trx_sram_write+0x96>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4268:	2104      	movs	r1, #4
    426a:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    426c:	420a      	tst	r2, r1
    426e:	d0fc      	beq.n	426a <trx_sram_write+0x9e>
    4270:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4272:	0751      	lsls	r1, r2, #29
    4274:	d50f      	bpl.n	4296 <trx_sram_write+0xca>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4276:	8b5a      	ldrh	r2, [r3, #26]
    4278:	0751      	lsls	r1, r2, #29
    427a:	d503      	bpl.n	4284 <trx_sram_write+0xb8>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    427c:	8b59      	ldrh	r1, [r3, #26]
    427e:	2204      	movs	r2, #4
    4280:	430a      	orrs	r2, r1
    4282:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4284:	4a2b      	ldr	r2, [pc, #172]	; (4334 <trx_sram_write+0x168>)
    4286:	7992      	ldrb	r2, [r2, #6]
    4288:	2a01      	cmp	r2, #1
    428a:	d10e      	bne.n	42aa <trx_sram_write+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    428c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    428e:	05c9      	lsls	r1, r1, #23
    4290:	0dc9      	lsrs	r1, r1, #23
    4292:	4a2b      	ldr	r2, [pc, #172]	; (4340 <trx_sram_write+0x174>)
    4294:	8011      	strh	r1, [r2, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4296:	4a27      	ldr	r2, [pc, #156]	; (4334 <trx_sram_write+0x168>)
    4298:	7992      	ldrb	r2, [r2, #6]
    429a:	4690      	mov	r8, r2
    429c:	1c26      	adds	r6, r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    429e:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42a0:	2102      	movs	r1, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42a2:	2404      	movs	r4, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    42a4:	2204      	movs	r2, #4
    42a6:	4694      	mov	ip, r2
    42a8:	e02b      	b.n	4302 <trx_sram_write+0x136>

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    42ac:	b2c9      	uxtb	r1, r1
    42ae:	4a24      	ldr	r2, [pc, #144]	; (4340 <trx_sram_write+0x174>)
    42b0:	8011      	strh	r1, [r2, #0]
    42b2:	e7f0      	b.n	4296 <trx_sram_write+0xca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    42b4:	7e18      	ldrb	r0, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    42b6:	4238      	tst	r0, r7
    42b8:	d0fc      	beq.n	42b4 <trx_sram_write+0xe8>
		}
		spi_write(&master, *data++);
    42ba:	7832      	ldrb	r2, [r6, #0]
    42bc:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    42be:	4238      	tst	r0, r7
    42c0:	d000      	beq.n	42c4 <trx_sram_write+0xf8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    42c2:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    42c4:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    42c6:	4208      	tst	r0, r1
    42c8:	d0fc      	beq.n	42c4 <trx_sram_write+0xf8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42ca:	7e18      	ldrb	r0, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    42cc:	4220      	tst	r0, r4
    42ce:	d0fc      	beq.n	42ca <trx_sram_write+0xfe>
    42d0:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    42d2:	4220      	tst	r0, r4
    42d4:	d014      	beq.n	4300 <trx_sram_write+0x134>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    42d6:	8b58      	ldrh	r0, [r3, #26]
    42d8:	4220      	tst	r0, r4
    42da:	d004      	beq.n	42e6 <trx_sram_write+0x11a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    42dc:	8b58      	ldrh	r0, [r3, #26]
    42de:	4662      	mov	r2, ip
    42e0:	4310      	orrs	r0, r2
    42e2:	b280      	uxth	r0, r0
    42e4:	8358      	strh	r0, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42e6:	4642      	mov	r2, r8
    42e8:	2a01      	cmp	r2, #1
    42ea:	d105      	bne.n	42f8 <trx_sram_write+0x12c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    42ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
    42ee:	05c0      	lsls	r0, r0, #23
    42f0:	0dc0      	lsrs	r0, r0, #23
    42f2:	4a13      	ldr	r2, [pc, #76]	; (4340 <trx_sram_write+0x174>)
    42f4:	8010      	strh	r0, [r2, #0]
    42f6:	e003      	b.n	4300 <trx_sram_write+0x134>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    42f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    42fa:	b2c0      	uxtb	r0, r0
    42fc:	4a10      	ldr	r2, [pc, #64]	; (4340 <trx_sram_write+0x174>)
    42fe:	8010      	strh	r0, [r2, #0]
    4300:	3601      	adds	r6, #1
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    4302:	3d01      	subs	r5, #1
    4304:	b2ed      	uxtb	r5, r5
    4306:	2dff      	cmp	r5, #255	; 0xff
    4308:	d1d4      	bne.n	42b4 <trx_sram_write+0xe8>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    430a:	480a      	ldr	r0, [pc, #40]	; (4334 <trx_sram_write+0x168>)
    430c:	490a      	ldr	r1, [pc, #40]	; (4338 <trx_sram_write+0x16c>)
    430e:	2200      	movs	r2, #0
    4310:	4b0a      	ldr	r3, [pc, #40]	; (433c <trx_sram_write+0x170>)
    4312:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4314:	464b      	mov	r3, r9
    4316:	2b00      	cmp	r3, #0
    4318:	d005      	beq.n	4326 <trx_sram_write+0x15a>
		cpu_irq_enable();
    431a:	2201      	movs	r2, #1
    431c:	4b04      	ldr	r3, [pc, #16]	; (4330 <trx_sram_write+0x164>)
    431e:	701a      	strb	r2, [r3, #0]
    4320:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    4324:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    4326:	bc0c      	pop	{r2, r3}
    4328:	4690      	mov	r8, r2
    432a:	4699      	mov	r9, r3
    432c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	20000008 	.word	0x20000008
    4334:	200009d0 	.word	0x200009d0
    4338:	20000994 	.word	0x20000994
    433c:	000008d1 	.word	0x000008d1
    4340:	2000098c 	.word	0x2000098c

00004344 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    4344:	b5f0      	push	{r4, r5, r6, r7, lr}
    4346:	465f      	mov	r7, fp
    4348:	4656      	mov	r6, sl
    434a:	464d      	mov	r5, r9
    434c:	4644      	mov	r4, r8
    434e:	b4f0      	push	{r4, r5, r6, r7}
    4350:	b083      	sub	sp, #12
    4352:	1c05      	adds	r5, r0, #0
    4354:	1c0e      	adds	r6, r1, #0
    4356:	1c14      	adds	r4, r2, #0
	delay_us(1); /* wap_rf4ce */
    4358:	2001      	movs	r0, #1
    435a:	4b5b      	ldr	r3, [pc, #364]	; (44c8 <trx_sram_read+0x184>)
    435c:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    435e:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    4362:	4279      	negs	r1, r7
    4364:	4179      	adcs	r1, r7
    4366:	9101      	str	r1, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    4368:	b672      	cpsid	i
    436a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    436e:	2200      	movs	r2, #0
    4370:	4b56      	ldr	r3, [pc, #344]	; (44cc <trx_sram_read+0x188>)
    4372:	701a      	strb	r2, [r3, #0]
	 **/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4374:	4f56      	ldr	r7, [pc, #344]	; (44d0 <trx_sram_read+0x18c>)
    4376:	1c38      	adds	r0, r7, #0
    4378:	4956      	ldr	r1, [pc, #344]	; (44d4 <trx_sram_read+0x190>)
    437a:	2201      	movs	r2, #1
    437c:	4b56      	ldr	r3, [pc, #344]	; (44d8 <trx_sram_read+0x194>)
    437e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4380:	683b      	ldr	r3, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4382:	2101      	movs	r1, #1
    4384:	7e1a      	ldrb	r2, [r3, #24]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    4386:	420a      	tst	r2, r1
    4388:	d0fc      	beq.n	4384 <trx_sram_read+0x40>
    438a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    438c:	07d1      	lsls	r1, r2, #31
    438e:	d501      	bpl.n	4394 <trx_sram_read+0x50>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4390:	2200      	movs	r2, #0
    4392:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4394:	2102      	movs	r1, #2
    4396:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4398:	420a      	tst	r2, r1
    439a:	d0fc      	beq.n	4396 <trx_sram_read+0x52>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    439c:	2204      	movs	r2, #4
    439e:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    43a0:	4211      	tst	r1, r2
    43a2:	d0fc      	beq.n	439e <trx_sram_read+0x5a>
    43a4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    43a6:	0751      	lsls	r1, r2, #29
    43a8:	d514      	bpl.n	43d4 <trx_sram_read+0x90>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43aa:	8b5a      	ldrh	r2, [r3, #26]
    43ac:	0751      	lsls	r1, r2, #29
    43ae:	d503      	bpl.n	43b8 <trx_sram_read+0x74>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    43b0:	8b59      	ldrh	r1, [r3, #26]
    43b2:	2204      	movs	r2, #4
    43b4:	430a      	orrs	r2, r1
    43b6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    43b8:	4a45      	ldr	r2, [pc, #276]	; (44d0 <trx_sram_read+0x18c>)
    43ba:	7992      	ldrb	r2, [r2, #6]
    43bc:	2a01      	cmp	r2, #1
    43be:	d105      	bne.n	43cc <trx_sram_read+0x88>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    43c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    43c2:	05c9      	lsls	r1, r1, #23
    43c4:	0dc9      	lsrs	r1, r1, #23
    43c6:	4a45      	ldr	r2, [pc, #276]	; (44dc <trx_sram_read+0x198>)
    43c8:	8011      	strh	r1, [r2, #0]
    43ca:	e003      	b.n	43d4 <trx_sram_read+0x90>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    43cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    43ce:	b2c9      	uxtb	r1, r1
    43d0:	4a42      	ldr	r2, [pc, #264]	; (44dc <trx_sram_read+0x198>)
    43d2:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    43d4:	2201      	movs	r2, #1
    43d6:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    43d8:	4211      	tst	r1, r2
    43da:	d0fc      	beq.n	43d6 <trx_sram_read+0x92>
    43dc:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    43de:	07d1      	lsls	r1, r2, #31
    43e0:	d500      	bpl.n	43e4 <trx_sram_read+0xa0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    43e2:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    43e4:	2202      	movs	r2, #2
    43e6:	7e19      	ldrb	r1, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    43e8:	4211      	tst	r1, r2
    43ea:	d0fc      	beq.n	43e6 <trx_sram_read+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    43ec:	2204      	movs	r2, #4
    43ee:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    43f0:	4211      	tst	r1, r2
    43f2:	d0fc      	beq.n	43ee <trx_sram_read+0xaa>
    43f4:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    43f6:	0751      	lsls	r1, r2, #29
    43f8:	d50f      	bpl.n	441a <trx_sram_read+0xd6>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    43fa:	8b5a      	ldrh	r2, [r3, #26]
    43fc:	0751      	lsls	r1, r2, #29
    43fe:	d503      	bpl.n	4408 <trx_sram_read+0xc4>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4400:	8b59      	ldrh	r1, [r3, #26]
    4402:	2204      	movs	r2, #4
    4404:	430a      	orrs	r2, r1
    4406:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4408:	4a31      	ldr	r2, [pc, #196]	; (44d0 <trx_sram_read+0x18c>)
    440a:	7992      	ldrb	r2, [r2, #6]
    440c:	2a01      	cmp	r2, #1
    440e:	d109      	bne.n	4424 <trx_sram_read+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4412:	05d2      	lsls	r2, r2, #23
    4414:	0dd2      	lsrs	r2, r2, #23
    4416:	4b31      	ldr	r3, [pc, #196]	; (44dc <trx_sram_read+0x198>)
    4418:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    441a:	1e63      	subs	r3, r4, #1
    441c:	b2db      	uxtb	r3, r3
    441e:	2c00      	cmp	r4, #0
    4420:	d105      	bne.n	442e <trx_sram_read+0xea>
    4422:	e03b      	b.n	449c <trx_sram_read+0x158>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4426:	b2d2      	uxtb	r2, r2
    4428:	4b2c      	ldr	r3, [pc, #176]	; (44dc <trx_sram_read+0x198>)
    442a:	801a      	strh	r2, [r3, #0]
    442c:	e7f5      	b.n	441a <trx_sram_read+0xd6>
    442e:	3301      	adds	r3, #1
    4430:	199b      	adds	r3, r3, r6
    4432:	4699      	mov	r9, r3
    4434:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4436:	4a26      	ldr	r2, [pc, #152]	; (44d0 <trx_sram_read+0x18c>)
    4438:	4690      	mov	r8, r2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    443a:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    443c:	468a      	mov	sl, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    443e:	2502      	movs	r5, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4440:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4442:	1c17      	adds	r7, r2, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4444:	2204      	movs	r2, #4
    4446:	4693      	mov	fp, r2
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4448:	4642      	mov	r2, r8
    444a:	6813      	ldr	r3, [r2, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    444c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    444e:	4222      	tst	r2, r4
    4450:	d0fc      	beq.n	444c <trx_sram_read+0x108>
    4452:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4454:	4222      	tst	r2, r4
    4456:	d001      	beq.n	445c <trx_sram_read+0x118>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4458:	4652      	mov	r2, sl
    445a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    445c:	7e1a      	ldrb	r2, [r3, #24]
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    445e:	422a      	tst	r2, r5
    4460:	d0fc      	beq.n	445c <trx_sram_read+0x118>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4462:	7e1a      	ldrb	r2, [r3, #24]
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    4464:	4202      	tst	r2, r0
    4466:	d0fc      	beq.n	4462 <trx_sram_read+0x11e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4468:	683b      	ldr	r3, [r7, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    446a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    446c:	4202      	tst	r2, r0
    446e:	d011      	beq.n	4494 <trx_sram_read+0x150>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4470:	8b5a      	ldrh	r2, [r3, #26]
    4472:	4202      	tst	r2, r0
    4474:	d004      	beq.n	4480 <trx_sram_read+0x13c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4476:	8b5a      	ldrh	r2, [r3, #26]
    4478:	4659      	mov	r1, fp
    447a:	430a      	orrs	r2, r1
    447c:	b292      	uxth	r2, r2
    447e:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4480:	4913      	ldr	r1, [pc, #76]	; (44d0 <trx_sram_read+0x18c>)
    4482:	798a      	ldrb	r2, [r1, #6]
    4484:	2a01      	cmp	r2, #1
    4486:	d103      	bne.n	4490 <trx_sram_read+0x14c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4488:	6a99      	ldr	r1, [r3, #40]	; 0x28
    448a:	05c9      	lsls	r1, r1, #23
    448c:	0dc9      	lsrs	r1, r1, #23
    448e:	e001      	b.n	4494 <trx_sram_read+0x150>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4490:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4492:	b2c9      	uxtb	r1, r1
		}
		spi_read(&master, &temp);
		*data = temp;
    4494:	7031      	strb	r1, [r6, #0]
		data++;
    4496:	3601      	adds	r6, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    4498:	454e      	cmp	r6, r9
    449a:	d1d5      	bne.n	4448 <trx_sram_read+0x104>
		*data = temp;
		data++;
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    449c:	480c      	ldr	r0, [pc, #48]	; (44d0 <trx_sram_read+0x18c>)
    449e:	490d      	ldr	r1, [pc, #52]	; (44d4 <trx_sram_read+0x190>)
    44a0:	2200      	movs	r2, #0
    44a2:	4b0d      	ldr	r3, [pc, #52]	; (44d8 <trx_sram_read+0x194>)
    44a4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    44a6:	9a01      	ldr	r2, [sp, #4]
    44a8:	2a00      	cmp	r2, #0
    44aa:	d005      	beq.n	44b8 <trx_sram_read+0x174>
		cpu_irq_enable();
    44ac:	2201      	movs	r2, #1
    44ae:	4b07      	ldr	r3, [pc, #28]	; (44cc <trx_sram_read+0x188>)
    44b0:	701a      	strb	r2, [r3, #0]
    44b2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    44b6:	b662      	cpsie	i
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	/*Restoring the interrupt status which was stored & enabling the global
	 *interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    44b8:	b003      	add	sp, #12
    44ba:	bc3c      	pop	{r2, r3, r4, r5}
    44bc:	4690      	mov	r8, r2
    44be:	4699      	mov	r9, r3
    44c0:	46a2      	mov	sl, r4
    44c2:	46ab      	mov	fp, r5
    44c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	00001625 	.word	0x00001625
    44cc:	20000008 	.word	0x20000008
    44d0:	200009d0 	.word	0x200009d0
    44d4:	20000994 	.word	0x20000994
    44d8:	000008d1 	.word	0x000008d1
    44dc:	2000098c 	.word	0x2000098c

000044e0 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    44e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44e2:	465f      	mov	r7, fp
    44e4:	4656      	mov	r6, sl
    44e6:	464d      	mov	r5, r9
    44e8:	4644      	mov	r4, r8
    44ea:	b4f0      	push	{r4, r5, r6, r7}
    44ec:	b083      	sub	sp, #12
    44ee:	1c05      	adds	r5, r0, #0
    44f0:	4688      	mov	r8, r1
    44f2:	1c14      	adds	r4, r2, #0
#if SAMD || SAMR21
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    44f4:	2001      	movs	r0, #1
    44f6:	4b83      	ldr	r3, [pc, #524]	; (4704 <trx_aes_wrrd+0x224>)
    44f8:	4798      	blx	r3

	ENTER_TRX_REGION();
    44fa:	2000      	movs	r0, #0
    44fc:	2100      	movs	r1, #0
    44fe:	4b82      	ldr	r3, [pc, #520]	; (4708 <trx_aes_wrrd+0x228>)
    4500:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    4502:	4e82      	ldr	r6, [pc, #520]	; (470c <trx_aes_wrrd+0x22c>)
    4504:	1c30      	adds	r0, r6, #0
    4506:	4982      	ldr	r1, [pc, #520]	; (4710 <trx_aes_wrrd+0x230>)
    4508:	2201      	movs	r2, #1
    450a:	4b82      	ldr	r3, [pc, #520]	; (4714 <trx_aes_wrrd+0x234>)
    450c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    450e:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4510:	2101      	movs	r1, #1
    4512:	7e1a      	ldrb	r2, [r3, #24]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    4514:	420a      	tst	r2, r1
    4516:	d0fc      	beq.n	4512 <trx_aes_wrrd+0x32>
    4518:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    451a:	07d0      	lsls	r0, r2, #31
    451c:	d501      	bpl.n	4522 <trx_aes_wrrd+0x42>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    451e:	2240      	movs	r2, #64	; 0x40
    4520:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4522:	2102      	movs	r1, #2
    4524:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    4526:	420a      	tst	r2, r1
    4528:	d0fc      	beq.n	4524 <trx_aes_wrrd+0x44>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    452a:	2104      	movs	r1, #4
    452c:	7e1a      	ldrb	r2, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    452e:	420a      	tst	r2, r1
    4530:	d0fc      	beq.n	452c <trx_aes_wrrd+0x4c>
    4532:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4534:	0751      	lsls	r1, r2, #29
    4536:	d514      	bpl.n	4562 <trx_aes_wrrd+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4538:	8b5a      	ldrh	r2, [r3, #26]
    453a:	0756      	lsls	r6, r2, #29
    453c:	d503      	bpl.n	4546 <trx_aes_wrrd+0x66>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    453e:	8b59      	ldrh	r1, [r3, #26]
    4540:	2204      	movs	r2, #4
    4542:	430a      	orrs	r2, r1
    4544:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4546:	4a71      	ldr	r2, [pc, #452]	; (470c <trx_aes_wrrd+0x22c>)
    4548:	7992      	ldrb	r2, [r2, #6]
    454a:	2a01      	cmp	r2, #1
    454c:	d105      	bne.n	455a <trx_aes_wrrd+0x7a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    454e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4550:	05c9      	lsls	r1, r1, #23
    4552:	0dc9      	lsrs	r1, r1, #23
    4554:	4a70      	ldr	r2, [pc, #448]	; (4718 <trx_aes_wrrd+0x238>)
    4556:	8011      	strh	r1, [r2, #0]
    4558:	e003      	b.n	4562 <trx_aes_wrrd+0x82>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    455a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    455c:	b2c9      	uxtb	r1, r1
    455e:	4a6e      	ldr	r2, [pc, #440]	; (4718 <trx_aes_wrrd+0x238>)
    4560:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4562:	2101      	movs	r1, #1
    4564:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    4566:	420a      	tst	r2, r1
    4568:	d0fc      	beq.n	4564 <trx_aes_wrrd+0x84>
    456a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    456c:	07d0      	lsls	r0, r2, #31
    456e:	d500      	bpl.n	4572 <trx_aes_wrrd+0x92>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4570:	629d      	str	r5, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4572:	2102      	movs	r1, #2
    4574:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    4576:	420a      	tst	r2, r1
    4578:	d0fc      	beq.n	4574 <trx_aes_wrrd+0x94>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    457a:	2204      	movs	r2, #4
    457c:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    457e:	4211      	tst	r1, r2
    4580:	d0fc      	beq.n	457c <trx_aes_wrrd+0x9c>
    4582:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4584:	0751      	lsls	r1, r2, #29
    4586:	d514      	bpl.n	45b2 <trx_aes_wrrd+0xd2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4588:	8b5a      	ldrh	r2, [r3, #26]
    458a:	0756      	lsls	r6, r2, #29
    458c:	d503      	bpl.n	4596 <trx_aes_wrrd+0xb6>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    458e:	8b59      	ldrh	r1, [r3, #26]
    4590:	2204      	movs	r2, #4
    4592:	430a      	orrs	r2, r1
    4594:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4596:	4a5d      	ldr	r2, [pc, #372]	; (470c <trx_aes_wrrd+0x22c>)
    4598:	7992      	ldrb	r2, [r2, #6]
    459a:	2a01      	cmp	r2, #1
    459c:	d105      	bne.n	45aa <trx_aes_wrrd+0xca>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    459e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    45a0:	05c9      	lsls	r1, r1, #23
    45a2:	0dc9      	lsrs	r1, r1, #23
    45a4:	4a5c      	ldr	r2, [pc, #368]	; (4718 <trx_aes_wrrd+0x238>)
    45a6:	8011      	strh	r1, [r2, #0]
    45a8:	e003      	b.n	45b2 <trx_aes_wrrd+0xd2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    45aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
    45ac:	b2c9      	uxtb	r1, r1
    45ae:	4a5a      	ldr	r2, [pc, #360]	; (4718 <trx_aes_wrrd+0x238>)
    45b0:	8011      	strh	r1, [r2, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    45b2:	2201      	movs	r2, #1
    45b4:	7e19      	ldrb	r1, [r3, #24]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    45b6:	4211      	tst	r1, r2
    45b8:	d0fc      	beq.n	45b4 <trx_aes_wrrd+0xd4>
	}
	spi_write(&master, *idata++);
    45ba:	4640      	mov	r0, r8
    45bc:	7801      	ldrb	r1, [r0, #0]
    45be:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    45c0:	07d6      	lsls	r6, r2, #31
    45c2:	d500      	bpl.n	45c6 <trx_aes_wrrd+0xe6>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    45c4:	6299      	str	r1, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    45c6:	2202      	movs	r2, #2
    45c8:	7e19      	ldrb	r1, [r3, #24]
	while (!spi_is_write_complete(&master)) {
    45ca:	4211      	tst	r1, r2
    45cc:	d0fc      	beq.n	45c8 <trx_aes_wrrd+0xe8>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    45ce:	2204      	movs	r2, #4
    45d0:	7e19      	ldrb	r1, [r3, #24]
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    45d2:	4211      	tst	r1, r2
    45d4:	d0fc      	beq.n	45d0 <trx_aes_wrrd+0xf0>
    45d6:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    45d8:	0750      	lsls	r0, r2, #29
    45da:	d50f      	bpl.n	45fc <trx_aes_wrrd+0x11c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    45dc:	8b5a      	ldrh	r2, [r3, #26]
    45de:	0751      	lsls	r1, r2, #29
    45e0:	d503      	bpl.n	45ea <trx_aes_wrrd+0x10a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    45e2:	8b59      	ldrh	r1, [r3, #26]
    45e4:	2204      	movs	r2, #4
    45e6:	430a      	orrs	r2, r1
    45e8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    45ea:	4a48      	ldr	r2, [pc, #288]	; (470c <trx_aes_wrrd+0x22c>)
    45ec:	7992      	ldrb	r2, [r2, #6]
    45ee:	2a01      	cmp	r2, #1
    45f0:	d108      	bne.n	4604 <trx_aes_wrrd+0x124>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    45f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    45f4:	05d2      	lsls	r2, r2, #23
    45f6:	0dd2      	lsrs	r2, r2, #23
    45f8:	4b47      	ldr	r3, [pc, #284]	; (4718 <trx_aes_wrrd+0x238>)
    45fa:	801a      	strh	r2, [r3, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    45fc:	2100      	movs	r1, #0
    45fe:	2c00      	cmp	r4, #0
    4600:	d047      	beq.n	4692 <trx_aes_wrrd+0x1b2>
    4602:	e004      	b.n	460e <trx_aes_wrrd+0x12e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4606:	b2d2      	uxtb	r2, r2
    4608:	4b43      	ldr	r3, [pc, #268]	; (4718 <trx_aes_wrrd+0x238>)
    460a:	801a      	strh	r2, [r3, #0]
    460c:	e7f6      	b.n	45fc <trx_aes_wrrd+0x11c>
    460e:	4645      	mov	r5, r8
    4610:	3c01      	subs	r4, #1
    4612:	b2e4      	uxtb	r4, r4
    4614:	9401      	str	r4, [sp, #4]
    4616:	1c23      	adds	r3, r4, #0
    4618:	4443      	add	r3, r8
    461a:	3301      	adds	r3, #1
    461c:	469b      	mov	fp, r3
    461e:	2100      	movs	r1, #0
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4620:	4b3a      	ldr	r3, [pc, #232]	; (470c <trx_aes_wrrd+0x22c>)
    4622:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4624:	2001      	movs	r0, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4626:	2402      	movs	r4, #2
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4628:	2204      	movs	r2, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    462a:	4699      	mov	r9, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    462c:	465f      	mov	r7, fp
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    462e:	4656      	mov	r6, sl
    4630:	6833      	ldr	r3, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4632:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    4634:	4206      	tst	r6, r0
    4636:	d0fc      	beq.n	4632 <trx_aes_wrrd+0x152>
    4638:	46ac      	mov	ip, r5
		}
		spi_write(&master, *idata++);
    463a:	786e      	ldrb	r6, [r5, #1]
    463c:	46b3      	mov	fp, r6
    463e:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4640:	4206      	tst	r6, r0
    4642:	d001      	beq.n	4648 <trx_aes_wrrd+0x168>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4644:	465e      	mov	r6, fp
    4646:	629e      	str	r6, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4648:	7e1e      	ldrb	r6, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    464a:	4226      	tst	r6, r4
    464c:	d0fc      	beq.n	4648 <trx_aes_wrrd+0x168>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    464e:	7e1e      	ldrb	r6, [r3, #24]
		}
		while (!spi_is_ready_to_read(&master)) {
    4650:	4216      	tst	r6, r2
    4652:	d0fc      	beq.n	464e <trx_aes_wrrd+0x16e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4654:	464e      	mov	r6, r9
    4656:	6833      	ldr	r3, [r6, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4658:	7e1e      	ldrb	r6, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    465a:	4216      	tst	r6, r2
    465c:	d011      	beq.n	4682 <trx_aes_wrrd+0x1a2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    465e:	8b59      	ldrh	r1, [r3, #26]
    4660:	4211      	tst	r1, r2
    4662:	d004      	beq.n	466e <trx_aes_wrrd+0x18e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4664:	8b59      	ldrh	r1, [r3, #26]
    4666:	2604      	movs	r6, #4
    4668:	4331      	orrs	r1, r6
    466a:	b289      	uxth	r1, r1
    466c:	8359      	strh	r1, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    466e:	4e27      	ldr	r6, [pc, #156]	; (470c <trx_aes_wrrd+0x22c>)
    4670:	79b1      	ldrb	r1, [r6, #6]
    4672:	2901      	cmp	r1, #1
    4674:	d103      	bne.n	467e <trx_aes_wrrd+0x19e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4676:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4678:	05c9      	lsls	r1, r1, #23
    467a:	0dc9      	lsrs	r1, r1, #23
    467c:	e001      	b.n	4682 <trx_aes_wrrd+0x1a2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    467e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4680:	b2c9      	uxtb	r1, r1
		}

#if SAMD || SAMR21
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    4682:	4663      	mov	r3, ip
    4684:	7019      	strb	r1, [r3, #0]
    4686:	3501      	adds	r5, #1
	while (!spi_is_ready_to_read(&master)) {
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    4688:	42bd      	cmp	r5, r7
    468a:	d1d0      	bne.n	462e <trx_aes_wrrd+0x14e>
    468c:	9b01      	ldr	r3, [sp, #4]
    468e:	3301      	adds	r3, #1
    4690:	4498      	add	r8, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4692:	4b1e      	ldr	r3, [pc, #120]	; (470c <trx_aes_wrrd+0x22c>)
    4694:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4696:	2001      	movs	r0, #1
    4698:	7e1a      	ldrb	r2, [r3, #24]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    469a:	4202      	tst	r2, r0
    469c:	d0fc      	beq.n	4698 <trx_aes_wrrd+0x1b8>
    469e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    46a0:	07d6      	lsls	r6, r2, #31
    46a2:	d501      	bpl.n	46a8 <trx_aes_wrrd+0x1c8>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    46a4:	2200      	movs	r2, #0
    46a6:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    46a8:	2002      	movs	r0, #2
    46aa:	7e1a      	ldrb	r2, [r3, #24]
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    46ac:	4202      	tst	r2, r0
    46ae:	d0fc      	beq.n	46aa <trx_aes_wrrd+0x1ca>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    46b0:	2004      	movs	r0, #4
    46b2:	7e1a      	ldrb	r2, [r3, #24]
	}
	while (!spi_is_ready_to_read(&master)) {
    46b4:	4202      	tst	r2, r0
    46b6:	d0fc      	beq.n	46b2 <trx_aes_wrrd+0x1d2>
    46b8:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    46ba:	0750      	lsls	r0, r2, #29
    46bc:	d510      	bpl.n	46e0 <trx_aes_wrrd+0x200>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    46be:	8b5a      	ldrh	r2, [r3, #26]
    46c0:	0751      	lsls	r1, r2, #29
    46c2:	d503      	bpl.n	46cc <trx_aes_wrrd+0x1ec>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    46c4:	8b59      	ldrh	r1, [r3, #26]
    46c6:	2204      	movs	r2, #4
    46c8:	430a      	orrs	r2, r1
    46ca:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46cc:	4a0f      	ldr	r2, [pc, #60]	; (470c <trx_aes_wrrd+0x22c>)
    46ce:	7992      	ldrb	r2, [r2, #6]
    46d0:	2a01      	cmp	r2, #1
    46d2:	d103      	bne.n	46dc <trx_aes_wrrd+0x1fc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    46d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    46d6:	05c9      	lsls	r1, r1, #23
    46d8:	0dc9      	lsrs	r1, r1, #23
    46da:	e001      	b.n	46e0 <trx_aes_wrrd+0x200>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    46dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    46de:	b2c9      	uxtb	r1, r1
	}
#if SAMD || SAMR21
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    46e0:	4642      	mov	r2, r8
    46e2:	7011      	strb	r1, [r2, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    46e4:	4809      	ldr	r0, [pc, #36]	; (470c <trx_aes_wrrd+0x22c>)
    46e6:	490a      	ldr	r1, [pc, #40]	; (4710 <trx_aes_wrrd+0x230>)
    46e8:	2200      	movs	r2, #0
    46ea:	4b0a      	ldr	r3, [pc, #40]	; (4714 <trx_aes_wrrd+0x234>)
    46ec:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    46ee:	2000      	movs	r0, #0
    46f0:	2100      	movs	r1, #0
    46f2:	4b0a      	ldr	r3, [pc, #40]	; (471c <trx_aes_wrrd+0x23c>)
    46f4:	4798      	blx	r3
}
    46f6:	b003      	add	sp, #12
    46f8:	bc3c      	pop	{r2, r3, r4, r5}
    46fa:	4690      	mov	r8, r2
    46fc:	4699      	mov	r9, r3
    46fe:	46a2      	mov	sl, r4
    4700:	46ab      	mov	fp, r5
    4702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4704:	00001625 	.word	0x00001625
    4708:	00000165 	.word	0x00000165
    470c:	200009d0 	.word	0x200009d0
    4710:	20000994 	.word	0x20000994
    4714:	000008d1 	.word	0x000008d1
    4718:	2000098c 	.word	0x2000098c
    471c:	00000145 	.word	0x00000145

00004720 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	if (NWK_SUCCESS_STATUS == req->status){
    4720:	7f03      	ldrb	r3, [r0, #28]
    4722:	2b00      	cmp	r3, #0
    4724:	d106      	bne.n	4734 <appDataConf+0x14>
		appDataReqBusy = false;
    4726:	2200      	movs	r2, #0
    4728:	4b03      	ldr	r3, [pc, #12]	; (4738 <appDataConf+0x18>)
    472a:	701a      	strb	r2, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    472c:	2280      	movs	r2, #128	; 0x80
    472e:	0312      	lsls	r2, r2, #12
    4730:	4b02      	ldr	r3, [pc, #8]	; (473c <appDataConf+0x1c>)
    4732:	61da      	str	r2, [r3, #28]
		LED_Toggle(LED0);
	}
}		
    4734:	4770      	bx	lr
    4736:	46c0      	nop			; (mov r8, r8)
    4738:	200007b8 	.word	0x200007b8
    473c:	41004400 	.word	0x41004400

00004740 <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
    4740:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < ind->size; i++) {
    4742:	7b01      	ldrb	r1, [r0, #12]
    4744:	2900      	cmp	r1, #0
    4746:	d008      	beq.n	475a <appDataInd+0x1a>
		rx_data[i] = ind->data[i];
    4748:	6884      	ldr	r4, [r0, #8]
    474a:	2300      	movs	r3, #0
    474c:	4804      	ldr	r0, [pc, #16]	; (4760 <appDataInd+0x20>)
    474e:	5ce2      	ldrb	r2, [r4, r3]
    4750:	541a      	strb	r2, [r3, r0]
    4752:	3301      	adds	r3, #1

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++) {
    4754:	b2da      	uxtb	r2, r3
    4756:	428a      	cmp	r2, r1
    4758:	d3f9      	bcc.n	474e <appDataInd+0xe>
		rx_data[i] = ind->data[i];
	}
	//APP_TaskHandler();
	return true;
}
    475a:	2001      	movs	r0, #1
    475c:	bd10      	pop	{r4, pc}
    475e:	46c0      	nop			; (mov r8, r8)
    4760:	20000734 	.word	0x20000734

00004764 <appSendData>:
}		

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
    4764:	b570      	push	{r4, r5, r6, lr}

	memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
    4766:	4b0c      	ldr	r3, [pc, #48]	; (4798 <appSendData+0x34>)
    4768:	781d      	ldrb	r5, [r3, #0]
    476a:	4e0c      	ldr	r6, [pc, #48]	; (479c <appSendData+0x38>)
    476c:	1c30      	adds	r0, r6, #0
    476e:	490c      	ldr	r1, [pc, #48]	; (47a0 <appSendData+0x3c>)
    4770:	1c2a      	adds	r2, r5, #0
    4772:	4b0c      	ldr	r3, [pc, #48]	; (47a4 <appSendData+0x40>)
    4774:	4798      	blx	r3

	appDataReq.dstAddr = THERMOSTAT_ADDR;
    4776:	480c      	ldr	r0, [pc, #48]	; (47a8 <appSendData+0x44>)
    4778:	2300      	movs	r3, #0
    477a:	8143      	strh	r3, [r0, #10]
	appDataReq.dstEndpoint = THERMOSTAT_ENDPOINT;
    477c:	2401      	movs	r4, #1
    477e:	7304      	strb	r4, [r0, #12]
	appDataReq.srcEndpoint = APP_ENDPOINT;
    4780:	2302      	movs	r3, #2
    4782:	7343      	strb	r3, [r0, #13]
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
    4784:	7383      	strb	r3, [r0, #14]
	appDataReq.data = appDataReqBuffer;
    4786:	6106      	str	r6, [r0, #16]
	appDataReq.size = appUartBufferPtr;
    4788:	7505      	strb	r5, [r0, #20]
	appDataReq.confirm = appDataConf;
    478a:	4b08      	ldr	r3, [pc, #32]	; (47ac <appSendData+0x48>)
    478c:	6183      	str	r3, [r0, #24]
	NWK_DataReq(&appDataReq);
    478e:	4b08      	ldr	r3, [pc, #32]	; (47b0 <appSendData+0x4c>)
    4790:	4798      	blx	r3

	appDataReqBusy = true;
    4792:	4b08      	ldr	r3, [pc, #32]	; (47b4 <appSendData+0x50>)
    4794:	701c      	strb	r4, [r3, #0]
}
    4796:	bd70      	pop	{r4, r5, r6, pc}
    4798:	20000748 	.word	0x20000748
    479c:	200007bc 	.word	0x200007bc
    47a0:	2000074c 	.word	0x2000074c
    47a4:	00006af9 	.word	0x00006af9
    47a8:	20000828 	.word	0x20000828
    47ac:	00004721 	.word	0x00004721
    47b0:	00002365 	.word	0x00002365
    47b4:	200007b8 	.word	0x200007b8

000047b8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    47b8:	b570      	push	{r4, r5, r6, lr}
    47ba:	b082      	sub	sp, #8
    47bc:	1c05      	adds	r5, r0, #0
    47be:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    47c0:	2200      	movs	r2, #0
    47c2:	466b      	mov	r3, sp
    47c4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    47c6:	4c06      	ldr	r4, [pc, #24]	; (47e0 <usart_serial_getchar+0x28>)
    47c8:	1c28      	adds	r0, r5, #0
    47ca:	4669      	mov	r1, sp
    47cc:	3106      	adds	r1, #6
    47ce:	47a0      	blx	r4
    47d0:	2800      	cmp	r0, #0
    47d2:	d1f9      	bne.n	47c8 <usart_serial_getchar+0x10>

	*c = temp;
    47d4:	466b      	mov	r3, sp
    47d6:	3306      	adds	r3, #6
    47d8:	881b      	ldrh	r3, [r3, #0]
    47da:	7033      	strb	r3, [r6, #0]
}
    47dc:	b002      	add	sp, #8
    47de:	bd70      	pop	{r4, r5, r6, pc}
    47e0:	00001309 	.word	0x00001309

000047e4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    47e4:	b570      	push	{r4, r5, r6, lr}
    47e6:	1c06      	adds	r6, r0, #0
    47e8:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    47ea:	4c03      	ldr	r4, [pc, #12]	; (47f8 <usart_serial_putchar+0x14>)
    47ec:	1c30      	adds	r0, r6, #0
    47ee:	1c29      	adds	r1, r5, #0
    47f0:	47a0      	blx	r4
    47f2:	2800      	cmp	r0, #0
    47f4:	d1fa      	bne.n	47ec <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    47f6:	bd70      	pop	{r4, r5, r6, pc}
    47f8:	000012dd 	.word	0x000012dd

000047fc <configure_adc>:
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
}

void configure_adc(void)
{
    47fc:	b510      	push	{r4, lr}
    47fe:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    4800:	4668      	mov	r0, sp
    4802:	4b11      	ldr	r3, [pc, #68]	; (4848 <configure_adc+0x4c>)
    4804:	4798      	blx	r3

	config_adc.reference =  ADC_REFERENCE_INT1V;			//ADC_REFERENCE_INTVCC0;		//reference voltage on pin 9: PA04
    4806:	2300      	movs	r3, #0
    4808:	466a      	mov	r2, sp
    480a:	7053      	strb	r3, [r2, #1]
	config_adc.resolution = ADC_RESOLUTION_12BIT;			//12 bit resolution
    480c:	7113      	strb	r3, [r2, #4]
	config_adc.divide_result = ADC_DIVIDE_RESULT_DISABLE;	//Don't divide result register after accumulation
    480e:	7453      	strb	r3, [r2, #17]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN10;	//voltage positive input on pin 10: PB02
    4810:	230a      	movs	r3, #10
    4812:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_PIN7;	//voltage negative input as internal ground : PA07
    4814:	23e0      	movs	r3, #224	; 0xe0
    4816:	00db      	lsls	r3, r3, #3
    4818:	81d3      	strh	r3, [r2, #14]

	adc_init(&adc_instance, ADC, &config_adc);
    481a:	4c0c      	ldr	r4, [pc, #48]	; (484c <configure_adc+0x50>)
    481c:	1c20      	adds	r0, r4, #0
    481e:	490c      	ldr	r1, [pc, #48]	; (4850 <configure_adc+0x54>)
    4820:	4b0c      	ldr	r3, [pc, #48]	; (4854 <configure_adc+0x58>)
    4822:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4824:	6823      	ldr	r3, [r4, #0]
    4826:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    4828:	b252      	sxtb	r2, r2
    482a:	2a00      	cmp	r2, #0
    482c:	dbfb      	blt.n	4826 <configure_adc+0x2a>

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    482e:	7819      	ldrb	r1, [r3, #0]
    4830:	2202      	movs	r2, #2
    4832:	430a      	orrs	r2, r1
    4834:	701a      	strb	r2, [r3, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    4836:	4b05      	ldr	r3, [pc, #20]	; (484c <configure_adc+0x50>)
    4838:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    483a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    483c:	b25b      	sxtb	r3, r3
    483e:	2b00      	cmp	r3, #0
    4840:	dbfb      	blt.n	483a <configure_adc+0x3e>

	adc_enable(&adc_instance);
}
    4842:	b00c      	add	sp, #48	; 0x30
    4844:	bd10      	pop	{r4, pc}
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	000017bd 	.word	0x000017bd
    484c:	20000a0c 	.word	0x20000a0c
    4850:	42004000 	.word	0x42004000
    4854:	00001805 	.word	0x00001805

00004858 <read_send_temp>:


void read_send_temp(void)
{
    4858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    485a:	464f      	mov	r7, r9
    485c:	4646      	mov	r6, r8
    485e:	b4c0      	push	{r6, r7}
	uint32_t some_result=0;
	uint16_t result=0;
	if(!appDataReqBusy)
    4860:	4b51      	ldr	r3, [pc, #324]	; (49a8 <read_send_temp+0x150>)
    4862:	781b      	ldrb	r3, [r3, #0]
    4864:	2b00      	cmp	r3, #0
    4866:	d000      	beq.n	486a <read_send_temp+0x12>
    4868:	e086      	b.n	4978 <read_send_temp+0x120>
    486a:	250a      	movs	r5, #10
    486c:	2700      	movs	r7, #0
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    486e:	484f      	ldr	r0, [pc, #316]	; (49ac <read_send_temp+0x154>)
    4870:	4680      	mov	r8, r0
    4872:	4642      	mov	r2, r8
    4874:	6811      	ldr	r1, [r2, #0]
    4876:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    4878:	b25b      	sxtb	r3, r3
    487a:	2b00      	cmp	r3, #0
    487c:	dbfb      	blt.n	4876 <read_send_temp+0x1e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    487e:	7b0a      	ldrb	r2, [r1, #12]
    4880:	2302      	movs	r3, #2
    4882:	4313      	orrs	r3, r2
    4884:	730b      	strb	r3, [r1, #12]
    4886:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
    4888:	b25b      	sxtb	r3, r3
    488a:	2b00      	cmp	r3, #0
    488c:	dbfb      	blt.n	4886 <read_send_temp+0x2e>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    488e:	2001      	movs	r0, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    4890:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    4892:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    4894:	7e0a      	ldrb	r2, [r1, #24]
    4896:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4898:	1c03      	adds	r3, r0, #0
    489a:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    489c:	4216      	tst	r6, r2
    489e:	d000      	beq.n	48a2 <read_send_temp+0x4a>
		status_flags |= ADC_STATUS_WINDOW;
    48a0:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    48a2:	4214      	tst	r4, r2
    48a4:	d000      	beq.n	48a8 <read_send_temp+0x50>
		status_flags |= ADC_STATUS_OVERRUN;
    48a6:	4333      	orrs	r3, r6
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    48a8:	4218      	tst	r0, r3
    48aa:	d0f3      	beq.n	4894 <read_send_temp+0x3c>
    48ac:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    48ae:	b25b      	sxtb	r3, r3
    48b0:	2b00      	cmp	r3, #0
    48b2:	dbfb      	blt.n	48ac <read_send_temp+0x54>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    48b4:	8b4e      	ldrh	r6, [r1, #26]
    48b6:	b2b6      	uxth	r6, r6
    48b8:	46b1      	mov	r9, r6
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    48ba:	2301      	movs	r3, #1
    48bc:	760b      	strb	r3, [r1, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    48be:	7e0a      	ldrb	r2, [r1, #24]
    48c0:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    48c2:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    48c4:	0756      	lsls	r6, r2, #29
    48c6:	d501      	bpl.n	48cc <read_send_temp+0x74>
		status_flags |= ADC_STATUS_WINDOW;
    48c8:	2002      	movs	r0, #2
    48ca:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    48cc:	0790      	lsls	r0, r2, #30
    48ce:	d501      	bpl.n	48d4 <read_send_temp+0x7c>
		status_flags |= ADC_STATUS_OVERRUN;
    48d0:	2204      	movs	r2, #4
    48d2:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    48d4:	075a      	lsls	r2, r3, #29
    48d6:	d528      	bpl.n	492a <read_send_temp+0xd2>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    48d8:	2302      	movs	r3, #2
    48da:	760b      	strb	r3, [r1, #24]
    48dc:	e025      	b.n	492a <read_send_temp+0xd2>
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
		status_flags |= ADC_STATUS_WINDOW;
    48de:	2002      	movs	r0, #2
    48e0:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    48e2:	0796      	lsls	r6, r2, #30
    48e4:	d501      	bpl.n	48ea <read_send_temp+0x92>
		status_flags |= ADC_STATUS_OVERRUN;
    48e6:	2204      	movs	r2, #4
    48e8:	4313      	orrs	r3, r2
	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = 0;

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    48ea:	2201      	movs	r2, #1
    48ec:	401a      	ands	r2, r3
		int_flags |= ADC_INTFLAG_RESRDY;
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    48ee:	0798      	lsls	r0, r3, #30
    48f0:	d501      	bpl.n	48f6 <read_send_temp+0x9e>
		int_flags |= ADC_INTFLAG_WINMON;
    48f2:	2004      	movs	r0, #4
    48f4:	4302      	orrs	r2, r0
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    48f6:	075e      	lsls	r6, r3, #29
    48f8:	d501      	bpl.n	48fe <read_send_temp+0xa6>
		int_flags |= ADC_INTFLAG_OVERRUN;
    48fa:	2302      	movs	r3, #2
    48fc:	431a      	orrs	r2, r3
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    48fe:	b2d2      	uxtb	r2, r2
    4900:	760a      	strb	r2, [r1, #24]
			} while (adc_read(&adc_instance, &result) == STATUS_BUSY);

			uint32_t far = 9.0/5.0*((float)result*.0002441406*6.0/.01)+30.0;
			printf("The result is %d       ",result);
			adc_clear_status(&adc_instance,adc_get_status(&adc_instance));
			some_result += far;
    4902:	193f      	adds	r7, r7, r4
    4904:	3d01      	subs	r5, #1
{
	uint32_t some_result=0;
	uint16_t result=0;
	if(!appDataReqBusy)
	{
		for(int i=0; i < 10; i++)
    4906:	2d00      	cmp	r5, #0
    4908:	d1b3      	bne.n	4872 <read_send_temp+0x1a>
			printf("The result is %d       ",result);
			adc_clear_status(&adc_instance,adc_get_status(&adc_instance));
			some_result += far;
		}
		
		some_result = some_result/10;
    490a:	1c38      	adds	r0, r7, #0
    490c:	210a      	movs	r1, #10
    490e:	4b28      	ldr	r3, [pc, #160]	; (49b0 <read_send_temp+0x158>)
    4910:	4798      	blx	r3
    4912:	1c01      	adds	r1, r0, #0
				
		memcpy(appUartBuffer,&some_result, sizeof(some_result));
    4914:	4b27      	ldr	r3, [pc, #156]	; (49b4 <read_send_temp+0x15c>)
    4916:	6018      	str	r0, [r3, #0]
		appUartBufferPtr = sizeof(some_result);
    4918:	2204      	movs	r2, #4
    491a:	4b27      	ldr	r3, [pc, #156]	; (49b8 <read_send_temp+0x160>)
    491c:	701a      	strb	r2, [r3, #0]
		printf("The temp is %d                 ",some_result);
    491e:	4827      	ldr	r0, [pc, #156]	; (49bc <read_send_temp+0x164>)
    4920:	4b27      	ldr	r3, [pc, #156]	; (49c0 <read_send_temp+0x168>)
    4922:	4798      	blx	r3
		appSendData();
    4924:	4b27      	ldr	r3, [pc, #156]	; (49c4 <read_send_temp+0x16c>)
    4926:	4798      	blx	r3
    4928:	e026      	b.n	4978 <read_send_temp+0x120>
			adc_start_conversion(&adc_instance);
			do {
				/* Wait for conversion to be done and read out result */
			} while (adc_read(&adc_instance, &result) == STATUS_BUSY);

			uint32_t far = 9.0/5.0*((float)result*.0002441406*6.0/.01)+30.0;
    492a:	4648      	mov	r0, r9
    492c:	4b26      	ldr	r3, [pc, #152]	; (49c8 <read_send_temp+0x170>)
    492e:	4798      	blx	r3
    4930:	4b26      	ldr	r3, [pc, #152]	; (49cc <read_send_temp+0x174>)
    4932:	4798      	blx	r3
    4934:	4c26      	ldr	r4, [pc, #152]	; (49d0 <read_send_temp+0x178>)
    4936:	4b13      	ldr	r3, [pc, #76]	; (4984 <read_send_temp+0x12c>)
    4938:	4a11      	ldr	r2, [pc, #68]	; (4980 <read_send_temp+0x128>)
    493a:	47a0      	blx	r4
    493c:	4a12      	ldr	r2, [pc, #72]	; (4988 <read_send_temp+0x130>)
    493e:	4b13      	ldr	r3, [pc, #76]	; (498c <read_send_temp+0x134>)
    4940:	47a0      	blx	r4
    4942:	4a13      	ldr	r2, [pc, #76]	; (4990 <read_send_temp+0x138>)
    4944:	4b13      	ldr	r3, [pc, #76]	; (4994 <read_send_temp+0x13c>)
    4946:	4e23      	ldr	r6, [pc, #140]	; (49d4 <read_send_temp+0x17c>)
    4948:	47b0      	blx	r6
    494a:	4a13      	ldr	r2, [pc, #76]	; (4998 <read_send_temp+0x140>)
    494c:	4b13      	ldr	r3, [pc, #76]	; (499c <read_send_temp+0x144>)
    494e:	47a0      	blx	r4
    4950:	4a13      	ldr	r2, [pc, #76]	; (49a0 <read_send_temp+0x148>)
    4952:	4b14      	ldr	r3, [pc, #80]	; (49a4 <read_send_temp+0x14c>)
    4954:	4c20      	ldr	r4, [pc, #128]	; (49d8 <read_send_temp+0x180>)
    4956:	47a0      	blx	r4
    4958:	4b20      	ldr	r3, [pc, #128]	; (49dc <read_send_temp+0x184>)
    495a:	4798      	blx	r3
    495c:	1c04      	adds	r4, r0, #0
			printf("The result is %d       ",result);
    495e:	4820      	ldr	r0, [pc, #128]	; (49e0 <read_send_temp+0x188>)
    4960:	4649      	mov	r1, r9
    4962:	4b17      	ldr	r3, [pc, #92]	; (49c0 <read_send_temp+0x168>)
    4964:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4966:	4b11      	ldr	r3, [pc, #68]	; (49ac <read_send_temp+0x154>)
    4968:	6819      	ldr	r1, [r3, #0]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    496a:	7e0a      	ldrb	r2, [r1, #24]
    496c:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    496e:	2301      	movs	r3, #1
    4970:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    4972:	0750      	lsls	r0, r2, #29
    4974:	d4b3      	bmi.n	48de <read_send_temp+0x86>
    4976:	e7b4      	b.n	48e2 <read_send_temp+0x8a>
		memcpy(appUartBuffer,&some_result, sizeof(some_result));
		appUartBufferPtr = sizeof(some_result);
		printf("The temp is %d                 ",some_result);
		appSendData();
		}
}
    4978:	bc0c      	pop	{r2, r3}
    497a:	4690      	mov	r8, r2
    497c:	4699      	mov	r9, r3
    497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4980:	c906404c 	.word	0xc906404c
    4984:	3f2fffff 	.word	0x3f2fffff
    4988:	00000000 	.word	0x00000000
    498c:	40180000 	.word	0x40180000
    4990:	47ae147b 	.word	0x47ae147b
    4994:	3f847ae1 	.word	0x3f847ae1
    4998:	cccccccd 	.word	0xcccccccd
    499c:	3ffccccc 	.word	0x3ffccccc
    49a0:	00000000 	.word	0x00000000
    49a4:	403e0000 	.word	0x403e0000
    49a8:	200007b8 	.word	0x200007b8
    49ac:	20000a0c 	.word	0x20000a0c
    49b0:	00004c85 	.word	0x00004c85
    49b4:	2000074c 	.word	0x2000074c
    49b8:	20000748 	.word	0x20000748
    49bc:	00007c74 	.word	0x00007c74
    49c0:	00006b1d 	.word	0x00006b1d
    49c4:	00004765 	.word	0x00004765
    49c8:	00004da9 	.word	0x00004da9
    49cc:	000066c5 	.word	0x000066c5
    49d0:	00005ad5 	.word	0x00005ad5
    49d4:	0000548d 	.word	0x0000548d
    49d8:	00004e49 	.word	0x00004e49
    49dc:	00004d69 	.word	0x00004d69
    49e0:	00007c94 	.word	0x00007c94
    49e4:	46c0      	nop			; (mov r8, r8)
    49e6:	46c0      	nop			; (mov r8, r8)

000049e8 <main>:
	stdio_serial_init(&cdc_uart_module, USART_HOST, &usart_conf);
	usart_enable(&cdc_uart_module);
}

int main(void)
{
    49e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ea:	b091      	sub	sp, #68	; 0x44
	irq_initialize_vectors();
	system_init();
    49ec:	4b45      	ldr	r3, [pc, #276]	; (4b04 <main+0x11c>)
    49ee:	4798      	blx	r3
	delay_init();
    49f0:	4b45      	ldr	r3, [pc, #276]	; (4b08 <main+0x120>)
    49f2:	4798      	blx	r3
	SYS_Init();
    49f4:	4b45      	ldr	r3, [pc, #276]	; (4b0c <main+0x124>)
    49f6:	4798      	blx	r3

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
    49f8:	2002      	movs	r0, #2
    49fa:	4b45      	ldr	r3, [pc, #276]	; (4b10 <main+0x128>)
    49fc:	4798      	blx	r3
	NWK_SetPanId(APP_PANID);
    49fe:	4845      	ldr	r0, [pc, #276]	; (4b14 <main+0x12c>)
    4a00:	4b45      	ldr	r3, [pc, #276]	; (4b18 <main+0x130>)
    4a02:	4798      	blx	r3
	PHY_SetChannel(APP_CHANNEL);
    4a04:	200f      	movs	r0, #15
    4a06:	4b45      	ldr	r3, [pc, #276]	; (4b1c <main+0x134>)
    4a08:	4798      	blx	r3
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
    4a0a:	2001      	movs	r0, #1
    4a0c:	4b44      	ldr	r3, [pc, #272]	; (4b20 <main+0x138>)
    4a0e:	4798      	blx	r3
	PHY_SetTxPower(0x23);
    4a10:	2023      	movs	r0, #35	; 0x23
    4a12:	4b44      	ldr	r3, [pc, #272]	; (4b24 <main+0x13c>)
    4a14:	4798      	blx	r3
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
    4a16:	4844      	ldr	r0, [pc, #272]	; (4b28 <main+0x140>)
    4a18:	4b44      	ldr	r3, [pc, #272]	; (4b2c <main+0x144>)
    4a1a:	4798      	blx	r3
	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
    4a1c:	2002      	movs	r0, #2
    4a1e:	4944      	ldr	r1, [pc, #272]	; (4b30 <main+0x148>)
    4a20:	4b44      	ldr	r3, [pc, #272]	; (4b34 <main+0x14c>)
    4a22:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4a24:	2380      	movs	r3, #128	; 0x80
    4a26:	05db      	lsls	r3, r3, #23
    4a28:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4a2a:	2300      	movs	r3, #0
    4a2c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4a2e:	22ff      	movs	r2, #255	; 0xff
    4a30:	4668      	mov	r0, sp
    4a32:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    4a34:	2200      	movs	r2, #0
    4a36:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4a38:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    4a3a:	2196      	movs	r1, #150	; 0x96
    4a3c:	0189      	lsls	r1, r1, #6
    4a3e:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4a40:	2601      	movs	r6, #1
    4a42:	2124      	movs	r1, #36	; 0x24
    4a44:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    4a46:	2125      	movs	r1, #37	; 0x25
    4a48:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    4a4a:	2126      	movs	r1, #38	; 0x26
    4a4c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    4a4e:	2127      	movs	r1, #39	; 0x27
    4a50:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    4a52:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4a54:	212c      	movs	r1, #44	; 0x2c
    4a56:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4a58:	212d      	movs	r1, #45	; 0x2d
    4a5a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4a5c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4a5e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4a60:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    4a62:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    4a64:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    4a66:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    4a68:	2313      	movs	r3, #19
    4a6a:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    4a6c:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    4a6e:	2380      	movs	r3, #128	; 0x80
    4a70:	035b      	lsls	r3, r3, #13
    4a72:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    4a74:	4b30      	ldr	r3, [pc, #192]	; (4b38 <main+0x150>)
    4a76:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    4a78:	4b30      	ldr	r3, [pc, #192]	; (4b3c <main+0x154>)
    4a7a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    4a7c:	2301      	movs	r3, #1
    4a7e:	425b      	negs	r3, r3
    4a80:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    4a82:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    4a84:	4c2e      	ldr	r4, [pc, #184]	; (4b40 <main+0x158>)
    4a86:	4b2f      	ldr	r3, [pc, #188]	; (4b44 <main+0x15c>)
    4a88:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4a8a:	4a2f      	ldr	r2, [pc, #188]	; (4b48 <main+0x160>)
    4a8c:	4b2f      	ldr	r3, [pc, #188]	; (4b4c <main+0x164>)
    4a8e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4a90:	4a2f      	ldr	r2, [pc, #188]	; (4b50 <main+0x168>)
    4a92:	4b30      	ldr	r3, [pc, #192]	; (4b54 <main+0x16c>)
    4a94:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    4a96:	1c20      	adds	r0, r4, #0
    4a98:	492f      	ldr	r1, [pc, #188]	; (4b58 <main+0x170>)
    4a9a:	466a      	mov	r2, sp
    4a9c:	4b2f      	ldr	r3, [pc, #188]	; (4b5c <main+0x174>)
    4a9e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4aa0:	4f2f      	ldr	r7, [pc, #188]	; (4b60 <main+0x178>)
    4aa2:	683b      	ldr	r3, [r7, #0]
    4aa4:	6898      	ldr	r0, [r3, #8]
    4aa6:	2100      	movs	r1, #0
    4aa8:	4d2e      	ldr	r5, [pc, #184]	; (4b64 <main+0x17c>)
    4aaa:	47a8      	blx	r5
	setbuf(stdin, NULL);
    4aac:	683b      	ldr	r3, [r7, #0]
    4aae:	6858      	ldr	r0, [r3, #4]
    4ab0:	2100      	movs	r1, #0
    4ab2:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4ab4:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4ab6:	1c28      	adds	r0, r5, #0
    4ab8:	4b2b      	ldr	r3, [pc, #172]	; (4b68 <main+0x180>)
    4aba:	4798      	blx	r3
    4abc:	231f      	movs	r3, #31
    4abe:	4018      	ands	r0, r3
    4ac0:	4086      	lsls	r6, r0
    4ac2:	4b2a      	ldr	r3, [pc, #168]	; (4b6c <main+0x184>)
    4ac4:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4ac6:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4ac8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4aca:	2a00      	cmp	r2, #0
    4acc:	d1fc      	bne.n	4ac8 <main+0xe0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4ace:	682a      	ldr	r2, [r5, #0]
    4ad0:	2302      	movs	r3, #2
    4ad2:	4313      	orrs	r3, r2
    4ad4:	602b      	str	r3, [r5, #0]
	system_init();
	delay_init();
	SYS_Init();
	appInit();
	configure_console();
	cpu_irq_enable();
    4ad6:	2201      	movs	r2, #1
    4ad8:	4b25      	ldr	r3, [pc, #148]	; (4b70 <main+0x188>)
    4ada:	701a      	strb	r2, [r3, #0]
    4adc:	f3bf 8f5f 	dmb	sy
    4ae0:	b662      	cpsie	i
	configure_adc();
    4ae2:	4b24      	ldr	r3, [pc, #144]	; (4b74 <main+0x18c>)
    4ae4:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4ae6:	2280      	movs	r2, #128	; 0x80
    4ae8:	0312      	lsls	r2, r2, #12
    4aea:	4b23      	ldr	r3, [pc, #140]	; (4b78 <main+0x190>)
    4aec:	615a      	str	r2, [r3, #20]
	LED_On(LED0);

	while (1)
	{
		SYS_TaskHandler();
    4aee:	4c23      	ldr	r4, [pc, #140]	; (4b7c <main+0x194>)
		read_send_temp();
    4af0:	4e23      	ldr	r6, [pc, #140]	; (4b80 <main+0x198>)
		SYS_TaskHandler();
		delay_s(2);		
    4af2:	4d24      	ldr	r5, [pc, #144]	; (4b84 <main+0x19c>)
	configure_adc();
	LED_On(LED0);

	while (1)
	{
		SYS_TaskHandler();
    4af4:	47a0      	blx	r4
		read_send_temp();
    4af6:	47b0      	blx	r6
		SYS_TaskHandler();
    4af8:	47a0      	blx	r4
		delay_s(2);		
    4afa:	20fa      	movs	r0, #250	; 0xfa
    4afc:	00c0      	lsls	r0, r0, #3
    4afe:	47a8      	blx	r5
    4b00:	e7f8      	b.n	4af4 <main+0x10c>
    4b02:	46c0      	nop			; (mov r8, r8)
    4b04:	00002161 	.word	0x00002161
    4b08:	000015e9 	.word	0x000015e9
    4b0c:	000036f1 	.word	0x000036f1
    4b10:	000022bd 	.word	0x000022bd
    4b14:	00004567 	.word	0x00004567
    4b18:	000022d1 	.word	0x000022d1
    4b1c:	00003529 	.word	0x00003529
    4b20:	00003515 	.word	0x00003515
    4b24:	00003599 	.word	0x00003599
    4b28:	00007cac 	.word	0x00007cac
    4b2c:	00002e25 	.word	0x00002e25
    4b30:	00004741 	.word	0x00004741
    4b34:	000022e5 	.word	0x000022e5
    4b38:	00040003 	.word	0x00040003
    4b3c:	00050003 	.word	0x00050003
    4b40:	20000700 	.word	0x20000700
    4b44:	200008c0 	.word	0x200008c0
    4b48:	000047e5 	.word	0x000047e5
    4b4c:	200008bc 	.word	0x200008bc
    4b50:	000047b9 	.word	0x000047b9
    4b54:	200008b8 	.word	0x200008b8
    4b58:	42000800 	.word	0x42000800
    4b5c:	00000fd5 	.word	0x00000fd5
    4b60:	2000006c 	.word	0x2000006c
    4b64:	00006bc9 	.word	0x00006bc9
    4b68:	0000155d 	.word	0x0000155d
    4b6c:	e000e100 	.word	0xe000e100
    4b70:	20000008 	.word	0x20000008
    4b74:	000047fd 	.word	0x000047fd
    4b78:	41004400 	.word	0x41004400
    4b7c:	00003715 	.word	0x00003715
    4b80:	00004859 	.word	0x00004859
    4b84:	00001651 	.word	0x00001651

00004b88 <common_tc_delay>:
    4b88:	b510      	push	{r4, lr}
    4b8a:	1c04      	adds	r4, r0, #0
    4b8c:	4b13      	ldr	r3, [pc, #76]	; (4bdc <common_tc_delay+0x54>)
    4b8e:	4798      	blx	r3
    4b90:	4b13      	ldr	r3, [pc, #76]	; (4be0 <common_tc_delay+0x58>)
    4b92:	781a      	ldrb	r2, [r3, #0]
    4b94:	4362      	muls	r2, r4
    4b96:	1881      	adds	r1, r0, r2
    4b98:	4b12      	ldr	r3, [pc, #72]	; (4be4 <common_tc_delay+0x5c>)
    4b9a:	6059      	str	r1, [r3, #4]
    4b9c:	6859      	ldr	r1, [r3, #4]
    4b9e:	0c09      	lsrs	r1, r1, #16
    4ba0:	6059      	str	r1, [r3, #4]
    4ba2:	685b      	ldr	r3, [r3, #4]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d007      	beq.n	4bb8 <common_tc_delay+0x30>
    4ba8:	4b0e      	ldr	r3, [pc, #56]	; (4be4 <common_tc_delay+0x5c>)
    4baa:	6859      	ldr	r1, [r3, #4]
    4bac:	3201      	adds	r2, #1
    4bae:	1880      	adds	r0, r0, r2
    4bb0:	8118      	strh	r0, [r3, #8]
    4bb2:	4b0d      	ldr	r3, [pc, #52]	; (4be8 <common_tc_delay+0x60>)
    4bb4:	4798      	blx	r3
    4bb6:	e004      	b.n	4bc2 <common_tc_delay+0x3a>
    4bb8:	1882      	adds	r2, r0, r2
    4bba:	4b0a      	ldr	r3, [pc, #40]	; (4be4 <common_tc_delay+0x5c>)
    4bbc:	811a      	strh	r2, [r3, #8]
    4bbe:	4b0b      	ldr	r3, [pc, #44]	; (4bec <common_tc_delay+0x64>)
    4bc0:	4798      	blx	r3
    4bc2:	4b08      	ldr	r3, [pc, #32]	; (4be4 <common_tc_delay+0x5c>)
    4bc4:	891b      	ldrh	r3, [r3, #8]
    4bc6:	2b63      	cmp	r3, #99	; 0x63
    4bc8:	d802      	bhi.n	4bd0 <common_tc_delay+0x48>
    4bca:	3364      	adds	r3, #100	; 0x64
    4bcc:	4a05      	ldr	r2, [pc, #20]	; (4be4 <common_tc_delay+0x5c>)
    4bce:	8113      	strh	r3, [r2, #8]
    4bd0:	4b04      	ldr	r3, [pc, #16]	; (4be4 <common_tc_delay+0x5c>)
    4bd2:	8918      	ldrh	r0, [r3, #8]
    4bd4:	4b06      	ldr	r3, [pc, #24]	; (4bf0 <common_tc_delay+0x68>)
    4bd6:	4798      	blx	r3
    4bd8:	bd10      	pop	{r4, pc}
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	000038d9 	.word	0x000038d9
    4be0:	20000a14 	.word	0x20000a14
    4be4:	20000848 	.word	0x20000848
    4be8:	000038ed 	.word	0x000038ed
    4bec:	00003901 	.word	0x00003901
    4bf0:	0000393d 	.word	0x0000393d

00004bf4 <common_tc_init>:
    4bf4:	b508      	push	{r3, lr}
    4bf6:	2200      	movs	r2, #0
    4bf8:	4b03      	ldr	r3, [pc, #12]	; (4c08 <common_tc_init+0x14>)
    4bfa:	701a      	strb	r2, [r3, #0]
    4bfc:	4b03      	ldr	r3, [pc, #12]	; (4c0c <common_tc_init+0x18>)
    4bfe:	4798      	blx	r3
    4c00:	4b03      	ldr	r3, [pc, #12]	; (4c10 <common_tc_init+0x1c>)
    4c02:	7018      	strb	r0, [r3, #0]
    4c04:	bd08      	pop	{r3, pc}
    4c06:	46c0      	nop			; (mov r8, r8)
    4c08:	20000848 	.word	0x20000848
    4c0c:	00003955 	.word	0x00003955
    4c10:	20000a14 	.word	0x20000a14

00004c14 <tmr_ovf_callback>:
    4c14:	b508      	push	{r3, lr}
    4c16:	4b0e      	ldr	r3, [pc, #56]	; (4c50 <tmr_ovf_callback+0x3c>)
    4c18:	685b      	ldr	r3, [r3, #4]
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	d007      	beq.n	4c2e <tmr_ovf_callback+0x1a>
    4c1e:	4a0c      	ldr	r2, [pc, #48]	; (4c50 <tmr_ovf_callback+0x3c>)
    4c20:	6853      	ldr	r3, [r2, #4]
    4c22:	3b01      	subs	r3, #1
    4c24:	6053      	str	r3, [r2, #4]
    4c26:	2b00      	cmp	r3, #0
    4c28:	d101      	bne.n	4c2e <tmr_ovf_callback+0x1a>
    4c2a:	4b0a      	ldr	r3, [pc, #40]	; (4c54 <tmr_ovf_callback+0x40>)
    4c2c:	4798      	blx	r3
    4c2e:	4a08      	ldr	r2, [pc, #32]	; (4c50 <tmr_ovf_callback+0x3c>)
    4c30:	7813      	ldrb	r3, [r2, #0]
    4c32:	3301      	adds	r3, #1
    4c34:	b2db      	uxtb	r3, r3
    4c36:	7013      	strb	r3, [r2, #0]
    4c38:	4a07      	ldr	r2, [pc, #28]	; (4c58 <tmr_ovf_callback+0x44>)
    4c3a:	7812      	ldrb	r2, [r2, #0]
    4c3c:	429a      	cmp	r2, r3
    4c3e:	d806      	bhi.n	4c4e <tmr_ovf_callback+0x3a>
    4c40:	4b03      	ldr	r3, [pc, #12]	; (4c50 <tmr_ovf_callback+0x3c>)
    4c42:	2200      	movs	r2, #0
    4c44:	701a      	strb	r2, [r3, #0]
    4c46:	68db      	ldr	r3, [r3, #12]
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d000      	beq.n	4c4e <tmr_ovf_callback+0x3a>
    4c4c:	4798      	blx	r3
    4c4e:	bd08      	pop	{r3, pc}
    4c50:	20000848 	.word	0x20000848
    4c54:	00003901 	.word	0x00003901
    4c58:	20000a14 	.word	0x20000a14

00004c5c <tmr_cca_callback>:
    4c5c:	b508      	push	{r3, lr}
    4c5e:	4b04      	ldr	r3, [pc, #16]	; (4c70 <tmr_cca_callback+0x14>)
    4c60:	4798      	blx	r3
    4c62:	4b04      	ldr	r3, [pc, #16]	; (4c74 <tmr_cca_callback+0x18>)
    4c64:	691b      	ldr	r3, [r3, #16]
    4c66:	2b00      	cmp	r3, #0
    4c68:	d000      	beq.n	4c6c <tmr_cca_callback+0x10>
    4c6a:	4798      	blx	r3
    4c6c:	bd08      	pop	{r3, pc}
    4c6e:	46c0      	nop			; (mov r8, r8)
    4c70:	000038ed 	.word	0x000038ed
    4c74:	20000848 	.word	0x20000848

00004c78 <set_common_tc_expiry_callback>:
    4c78:	4b01      	ldr	r3, [pc, #4]	; (4c80 <set_common_tc_expiry_callback+0x8>)
    4c7a:	6118      	str	r0, [r3, #16]
    4c7c:	4770      	bx	lr
    4c7e:	46c0      	nop			; (mov r8, r8)
    4c80:	20000848 	.word	0x20000848

00004c84 <__aeabi_uidiv>:
    4c84:	2900      	cmp	r1, #0
    4c86:	d034      	beq.n	4cf2 <.udivsi3_skip_div0_test+0x6a>

00004c88 <.udivsi3_skip_div0_test>:
    4c88:	2301      	movs	r3, #1
    4c8a:	2200      	movs	r2, #0
    4c8c:	b410      	push	{r4}
    4c8e:	4288      	cmp	r0, r1
    4c90:	d32c      	bcc.n	4cec <.udivsi3_skip_div0_test+0x64>
    4c92:	2401      	movs	r4, #1
    4c94:	0724      	lsls	r4, r4, #28
    4c96:	42a1      	cmp	r1, r4
    4c98:	d204      	bcs.n	4ca4 <.udivsi3_skip_div0_test+0x1c>
    4c9a:	4281      	cmp	r1, r0
    4c9c:	d202      	bcs.n	4ca4 <.udivsi3_skip_div0_test+0x1c>
    4c9e:	0109      	lsls	r1, r1, #4
    4ca0:	011b      	lsls	r3, r3, #4
    4ca2:	e7f8      	b.n	4c96 <.udivsi3_skip_div0_test+0xe>
    4ca4:	00e4      	lsls	r4, r4, #3
    4ca6:	42a1      	cmp	r1, r4
    4ca8:	d204      	bcs.n	4cb4 <.udivsi3_skip_div0_test+0x2c>
    4caa:	4281      	cmp	r1, r0
    4cac:	d202      	bcs.n	4cb4 <.udivsi3_skip_div0_test+0x2c>
    4cae:	0049      	lsls	r1, r1, #1
    4cb0:	005b      	lsls	r3, r3, #1
    4cb2:	e7f8      	b.n	4ca6 <.udivsi3_skip_div0_test+0x1e>
    4cb4:	4288      	cmp	r0, r1
    4cb6:	d301      	bcc.n	4cbc <.udivsi3_skip_div0_test+0x34>
    4cb8:	1a40      	subs	r0, r0, r1
    4cba:	431a      	orrs	r2, r3
    4cbc:	084c      	lsrs	r4, r1, #1
    4cbe:	42a0      	cmp	r0, r4
    4cc0:	d302      	bcc.n	4cc8 <.udivsi3_skip_div0_test+0x40>
    4cc2:	1b00      	subs	r0, r0, r4
    4cc4:	085c      	lsrs	r4, r3, #1
    4cc6:	4322      	orrs	r2, r4
    4cc8:	088c      	lsrs	r4, r1, #2
    4cca:	42a0      	cmp	r0, r4
    4ccc:	d302      	bcc.n	4cd4 <.udivsi3_skip_div0_test+0x4c>
    4cce:	1b00      	subs	r0, r0, r4
    4cd0:	089c      	lsrs	r4, r3, #2
    4cd2:	4322      	orrs	r2, r4
    4cd4:	08cc      	lsrs	r4, r1, #3
    4cd6:	42a0      	cmp	r0, r4
    4cd8:	d302      	bcc.n	4ce0 <.udivsi3_skip_div0_test+0x58>
    4cda:	1b00      	subs	r0, r0, r4
    4cdc:	08dc      	lsrs	r4, r3, #3
    4cde:	4322      	orrs	r2, r4
    4ce0:	2800      	cmp	r0, #0
    4ce2:	d003      	beq.n	4cec <.udivsi3_skip_div0_test+0x64>
    4ce4:	091b      	lsrs	r3, r3, #4
    4ce6:	d001      	beq.n	4cec <.udivsi3_skip_div0_test+0x64>
    4ce8:	0909      	lsrs	r1, r1, #4
    4cea:	e7e3      	b.n	4cb4 <.udivsi3_skip_div0_test+0x2c>
    4cec:	1c10      	adds	r0, r2, #0
    4cee:	bc10      	pop	{r4}
    4cf0:	4770      	bx	lr
    4cf2:	2800      	cmp	r0, #0
    4cf4:	d001      	beq.n	4cfa <.udivsi3_skip_div0_test+0x72>
    4cf6:	2000      	movs	r0, #0
    4cf8:	43c0      	mvns	r0, r0
    4cfa:	b407      	push	{r0, r1, r2}
    4cfc:	4802      	ldr	r0, [pc, #8]	; (4d08 <.udivsi3_skip_div0_test+0x80>)
    4cfe:	a102      	add	r1, pc, #8	; (adr r1, 4d08 <.udivsi3_skip_div0_test+0x80>)
    4d00:	1840      	adds	r0, r0, r1
    4d02:	9002      	str	r0, [sp, #8]
    4d04:	bd03      	pop	{r0, r1, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	00000019 	.word	0x00000019

00004d0c <__aeabi_uidivmod>:
    4d0c:	2900      	cmp	r1, #0
    4d0e:	d0f0      	beq.n	4cf2 <.udivsi3_skip_div0_test+0x6a>
    4d10:	b503      	push	{r0, r1, lr}
    4d12:	f7ff ffb9 	bl	4c88 <.udivsi3_skip_div0_test>
    4d16:	bc0e      	pop	{r1, r2, r3}
    4d18:	4342      	muls	r2, r0
    4d1a:	1a89      	subs	r1, r1, r2
    4d1c:	4718      	bx	r3
    4d1e:	46c0      	nop			; (mov r8, r8)

00004d20 <__aeabi_idiv0>:
    4d20:	4770      	bx	lr
    4d22:	46c0      	nop			; (mov r8, r8)

00004d24 <__aeabi_lmul>:
    4d24:	469c      	mov	ip, r3
    4d26:	0403      	lsls	r3, r0, #16
    4d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d2a:	0c1b      	lsrs	r3, r3, #16
    4d2c:	0417      	lsls	r7, r2, #16
    4d2e:	0c3f      	lsrs	r7, r7, #16
    4d30:	0c15      	lsrs	r5, r2, #16
    4d32:	1c1e      	adds	r6, r3, #0
    4d34:	1c04      	adds	r4, r0, #0
    4d36:	0c00      	lsrs	r0, r0, #16
    4d38:	437e      	muls	r6, r7
    4d3a:	436b      	muls	r3, r5
    4d3c:	4347      	muls	r7, r0
    4d3e:	4345      	muls	r5, r0
    4d40:	18fb      	adds	r3, r7, r3
    4d42:	0c30      	lsrs	r0, r6, #16
    4d44:	1818      	adds	r0, r3, r0
    4d46:	4287      	cmp	r7, r0
    4d48:	d902      	bls.n	4d50 <__aeabi_lmul+0x2c>
    4d4a:	2380      	movs	r3, #128	; 0x80
    4d4c:	025b      	lsls	r3, r3, #9
    4d4e:	18ed      	adds	r5, r5, r3
    4d50:	0c03      	lsrs	r3, r0, #16
    4d52:	18ed      	adds	r5, r5, r3
    4d54:	4663      	mov	r3, ip
    4d56:	435c      	muls	r4, r3
    4d58:	434a      	muls	r2, r1
    4d5a:	0436      	lsls	r6, r6, #16
    4d5c:	0c36      	lsrs	r6, r6, #16
    4d5e:	18a1      	adds	r1, r4, r2
    4d60:	0400      	lsls	r0, r0, #16
    4d62:	1980      	adds	r0, r0, r6
    4d64:	1949      	adds	r1, r1, r5
    4d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d68 <__aeabi_d2uiz>:
    4d68:	b538      	push	{r3, r4, r5, lr}
    4d6a:	4b0e      	ldr	r3, [pc, #56]	; (4da4 <__aeabi_d2uiz+0x3c>)
    4d6c:	4a0c      	ldr	r2, [pc, #48]	; (4da0 <__aeabi_d2uiz+0x38>)
    4d6e:	1c04      	adds	r4, r0, #0
    4d70:	1c0d      	adds	r5, r1, #0
    4d72:	f001 fd2d 	bl	67d0 <__aeabi_dcmpge>
    4d76:	2800      	cmp	r0, #0
    4d78:	d104      	bne.n	4d84 <__aeabi_d2uiz+0x1c>
    4d7a:	1c20      	adds	r0, r4, #0
    4d7c:	1c29      	adds	r1, r5, #0
    4d7e:	f001 fc6d 	bl	665c <__aeabi_d2iz>
    4d82:	bd38      	pop	{r3, r4, r5, pc}
    4d84:	4b07      	ldr	r3, [pc, #28]	; (4da4 <__aeabi_d2uiz+0x3c>)
    4d86:	4a06      	ldr	r2, [pc, #24]	; (4da0 <__aeabi_d2uiz+0x38>)
    4d88:	1c20      	adds	r0, r4, #0
    4d8a:	1c29      	adds	r1, r5, #0
    4d8c:	f001 f932 	bl	5ff4 <__aeabi_dsub>
    4d90:	f001 fc64 	bl	665c <__aeabi_d2iz>
    4d94:	2380      	movs	r3, #128	; 0x80
    4d96:	061b      	lsls	r3, r3, #24
    4d98:	18c0      	adds	r0, r0, r3
    4d9a:	e7f2      	b.n	4d82 <__aeabi_d2uiz+0x1a>
    4d9c:	46c0      	nop			; (mov r8, r8)
    4d9e:	46c0      	nop			; (mov r8, r8)
    4da0:	00000000 	.word	0x00000000
    4da4:	41e00000 	.word	0x41e00000

00004da8 <__aeabi_ui2f>:
    4da8:	b510      	push	{r4, lr}
    4daa:	1e04      	subs	r4, r0, #0
    4dac:	d033      	beq.n	4e16 <__aeabi_ui2f+0x6e>
    4dae:	f001 fd19 	bl	67e4 <__clzsi2>
    4db2:	239e      	movs	r3, #158	; 0x9e
    4db4:	1a1b      	subs	r3, r3, r0
    4db6:	2b96      	cmp	r3, #150	; 0x96
    4db8:	dc09      	bgt.n	4dce <__aeabi_ui2f+0x26>
    4dba:	3808      	subs	r0, #8
    4dbc:	4084      	lsls	r4, r0
    4dbe:	0264      	lsls	r4, r4, #9
    4dc0:	0a64      	lsrs	r4, r4, #9
    4dc2:	b2db      	uxtb	r3, r3
    4dc4:	0264      	lsls	r4, r4, #9
    4dc6:	05db      	lsls	r3, r3, #23
    4dc8:	0a60      	lsrs	r0, r4, #9
    4dca:	4318      	orrs	r0, r3
    4dcc:	bd10      	pop	{r4, pc}
    4dce:	2b99      	cmp	r3, #153	; 0x99
    4dd0:	dd0a      	ble.n	4de8 <__aeabi_ui2f+0x40>
    4dd2:	2205      	movs	r2, #5
    4dd4:	1a12      	subs	r2, r2, r0
    4dd6:	1c21      	adds	r1, r4, #0
    4dd8:	40d1      	lsrs	r1, r2
    4dda:	1c0a      	adds	r2, r1, #0
    4ddc:	1c01      	adds	r1, r0, #0
    4dde:	311b      	adds	r1, #27
    4de0:	408c      	lsls	r4, r1
    4de2:	1e61      	subs	r1, r4, #1
    4de4:	418c      	sbcs	r4, r1
    4de6:	4314      	orrs	r4, r2
    4de8:	2805      	cmp	r0, #5
    4dea:	dd01      	ble.n	4df0 <__aeabi_ui2f+0x48>
    4dec:	1f42      	subs	r2, r0, #5
    4dee:	4094      	lsls	r4, r2
    4df0:	4a14      	ldr	r2, [pc, #80]	; (4e44 <__aeabi_ui2f+0x9c>)
    4df2:	4022      	ands	r2, r4
    4df4:	0761      	lsls	r1, r4, #29
    4df6:	d004      	beq.n	4e02 <__aeabi_ui2f+0x5a>
    4df8:	210f      	movs	r1, #15
    4dfa:	400c      	ands	r4, r1
    4dfc:	2c04      	cmp	r4, #4
    4dfe:	d000      	beq.n	4e02 <__aeabi_ui2f+0x5a>
    4e00:	3204      	adds	r2, #4
    4e02:	0151      	lsls	r1, r2, #5
    4e04:	d50a      	bpl.n	4e1c <__aeabi_ui2f+0x74>
    4e06:	239f      	movs	r3, #159	; 0x9f
    4e08:	1a18      	subs	r0, r3, r0
    4e0a:	28ff      	cmp	r0, #255	; 0xff
    4e0c:	d016      	beq.n	4e3c <__aeabi_ui2f+0x94>
    4e0e:	0194      	lsls	r4, r2, #6
    4e10:	0a64      	lsrs	r4, r4, #9
    4e12:	b2c3      	uxtb	r3, r0
    4e14:	e7d6      	b.n	4dc4 <__aeabi_ui2f+0x1c>
    4e16:	2300      	movs	r3, #0
    4e18:	2400      	movs	r4, #0
    4e1a:	e7d3      	b.n	4dc4 <__aeabi_ui2f+0x1c>
    4e1c:	08d2      	lsrs	r2, r2, #3
    4e1e:	2bff      	cmp	r3, #255	; 0xff
    4e20:	d003      	beq.n	4e2a <__aeabi_ui2f+0x82>
    4e22:	0254      	lsls	r4, r2, #9
    4e24:	0a64      	lsrs	r4, r4, #9
    4e26:	b2db      	uxtb	r3, r3
    4e28:	e7cc      	b.n	4dc4 <__aeabi_ui2f+0x1c>
    4e2a:	2a00      	cmp	r2, #0
    4e2c:	d006      	beq.n	4e3c <__aeabi_ui2f+0x94>
    4e2e:	2480      	movs	r4, #128	; 0x80
    4e30:	03e4      	lsls	r4, r4, #15
    4e32:	4314      	orrs	r4, r2
    4e34:	0264      	lsls	r4, r4, #9
    4e36:	0a64      	lsrs	r4, r4, #9
    4e38:	23ff      	movs	r3, #255	; 0xff
    4e3a:	e7c3      	b.n	4dc4 <__aeabi_ui2f+0x1c>
    4e3c:	23ff      	movs	r3, #255	; 0xff
    4e3e:	2400      	movs	r4, #0
    4e40:	e7c0      	b.n	4dc4 <__aeabi_ui2f+0x1c>
    4e42:	46c0      	nop			; (mov r8, r8)
    4e44:	fbffffff 	.word	0xfbffffff

00004e48 <__aeabi_dadd>:
    4e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e4a:	465f      	mov	r7, fp
    4e4c:	4656      	mov	r6, sl
    4e4e:	4644      	mov	r4, r8
    4e50:	464d      	mov	r5, r9
    4e52:	b4f0      	push	{r4, r5, r6, r7}
    4e54:	030c      	lsls	r4, r1, #12
    4e56:	004d      	lsls	r5, r1, #1
    4e58:	0fce      	lsrs	r6, r1, #31
    4e5a:	0a61      	lsrs	r1, r4, #9
    4e5c:	0f44      	lsrs	r4, r0, #29
    4e5e:	4321      	orrs	r1, r4
    4e60:	00c4      	lsls	r4, r0, #3
    4e62:	0318      	lsls	r0, r3, #12
    4e64:	4680      	mov	r8, r0
    4e66:	0058      	lsls	r0, r3, #1
    4e68:	0d40      	lsrs	r0, r0, #21
    4e6a:	4682      	mov	sl, r0
    4e6c:	0fd8      	lsrs	r0, r3, #31
    4e6e:	4684      	mov	ip, r0
    4e70:	4640      	mov	r0, r8
    4e72:	0a40      	lsrs	r0, r0, #9
    4e74:	0f53      	lsrs	r3, r2, #29
    4e76:	4303      	orrs	r3, r0
    4e78:	00d0      	lsls	r0, r2, #3
    4e7a:	0d6d      	lsrs	r5, r5, #21
    4e7c:	1c37      	adds	r7, r6, #0
    4e7e:	4683      	mov	fp, r0
    4e80:	4652      	mov	r2, sl
    4e82:	4566      	cmp	r6, ip
    4e84:	d100      	bne.n	4e88 <__aeabi_dadd+0x40>
    4e86:	e0a4      	b.n	4fd2 <__aeabi_dadd+0x18a>
    4e88:	1aaf      	subs	r7, r5, r2
    4e8a:	2f00      	cmp	r7, #0
    4e8c:	dc00      	bgt.n	4e90 <__aeabi_dadd+0x48>
    4e8e:	e109      	b.n	50a4 <__aeabi_dadd+0x25c>
    4e90:	2a00      	cmp	r2, #0
    4e92:	d13b      	bne.n	4f0c <__aeabi_dadd+0xc4>
    4e94:	4318      	orrs	r0, r3
    4e96:	d000      	beq.n	4e9a <__aeabi_dadd+0x52>
    4e98:	e0ea      	b.n	5070 <__aeabi_dadd+0x228>
    4e9a:	0763      	lsls	r3, r4, #29
    4e9c:	d100      	bne.n	4ea0 <__aeabi_dadd+0x58>
    4e9e:	e087      	b.n	4fb0 <__aeabi_dadd+0x168>
    4ea0:	230f      	movs	r3, #15
    4ea2:	4023      	ands	r3, r4
    4ea4:	2b04      	cmp	r3, #4
    4ea6:	d100      	bne.n	4eaa <__aeabi_dadd+0x62>
    4ea8:	e082      	b.n	4fb0 <__aeabi_dadd+0x168>
    4eaa:	1d22      	adds	r2, r4, #4
    4eac:	42a2      	cmp	r2, r4
    4eae:	41a4      	sbcs	r4, r4
    4eb0:	4264      	negs	r4, r4
    4eb2:	2380      	movs	r3, #128	; 0x80
    4eb4:	1909      	adds	r1, r1, r4
    4eb6:	041b      	lsls	r3, r3, #16
    4eb8:	400b      	ands	r3, r1
    4eba:	1c37      	adds	r7, r6, #0
    4ebc:	1c14      	adds	r4, r2, #0
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d100      	bne.n	4ec4 <__aeabi_dadd+0x7c>
    4ec2:	e07c      	b.n	4fbe <__aeabi_dadd+0x176>
    4ec4:	4bce      	ldr	r3, [pc, #824]	; (5200 <__aeabi_dadd+0x3b8>)
    4ec6:	3501      	adds	r5, #1
    4ec8:	429d      	cmp	r5, r3
    4eca:	d100      	bne.n	4ece <__aeabi_dadd+0x86>
    4ecc:	e105      	b.n	50da <__aeabi_dadd+0x292>
    4ece:	4bcd      	ldr	r3, [pc, #820]	; (5204 <__aeabi_dadd+0x3bc>)
    4ed0:	08e4      	lsrs	r4, r4, #3
    4ed2:	4019      	ands	r1, r3
    4ed4:	0748      	lsls	r0, r1, #29
    4ed6:	0249      	lsls	r1, r1, #9
    4ed8:	4304      	orrs	r4, r0
    4eda:	0b0b      	lsrs	r3, r1, #12
    4edc:	2000      	movs	r0, #0
    4ede:	2100      	movs	r1, #0
    4ee0:	031b      	lsls	r3, r3, #12
    4ee2:	0b1a      	lsrs	r2, r3, #12
    4ee4:	0d0b      	lsrs	r3, r1, #20
    4ee6:	056d      	lsls	r5, r5, #21
    4ee8:	051b      	lsls	r3, r3, #20
    4eea:	4313      	orrs	r3, r2
    4eec:	086a      	lsrs	r2, r5, #1
    4eee:	4dc6      	ldr	r5, [pc, #792]	; (5208 <__aeabi_dadd+0x3c0>)
    4ef0:	07ff      	lsls	r7, r7, #31
    4ef2:	401d      	ands	r5, r3
    4ef4:	4315      	orrs	r5, r2
    4ef6:	006d      	lsls	r5, r5, #1
    4ef8:	086d      	lsrs	r5, r5, #1
    4efa:	1c29      	adds	r1, r5, #0
    4efc:	4339      	orrs	r1, r7
    4efe:	1c20      	adds	r0, r4, #0
    4f00:	bc3c      	pop	{r2, r3, r4, r5}
    4f02:	4690      	mov	r8, r2
    4f04:	4699      	mov	r9, r3
    4f06:	46a2      	mov	sl, r4
    4f08:	46ab      	mov	fp, r5
    4f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f0c:	48bc      	ldr	r0, [pc, #752]	; (5200 <__aeabi_dadd+0x3b8>)
    4f0e:	4285      	cmp	r5, r0
    4f10:	d0c3      	beq.n	4e9a <__aeabi_dadd+0x52>
    4f12:	2080      	movs	r0, #128	; 0x80
    4f14:	0400      	lsls	r0, r0, #16
    4f16:	4303      	orrs	r3, r0
    4f18:	2f38      	cmp	r7, #56	; 0x38
    4f1a:	dd00      	ble.n	4f1e <__aeabi_dadd+0xd6>
    4f1c:	e0f0      	b.n	5100 <__aeabi_dadd+0x2b8>
    4f1e:	2f1f      	cmp	r7, #31
    4f20:	dd00      	ble.n	4f24 <__aeabi_dadd+0xdc>
    4f22:	e124      	b.n	516e <__aeabi_dadd+0x326>
    4f24:	2020      	movs	r0, #32
    4f26:	1bc0      	subs	r0, r0, r7
    4f28:	1c1a      	adds	r2, r3, #0
    4f2a:	4681      	mov	r9, r0
    4f2c:	4082      	lsls	r2, r0
    4f2e:	4658      	mov	r0, fp
    4f30:	40f8      	lsrs	r0, r7
    4f32:	4302      	orrs	r2, r0
    4f34:	4694      	mov	ip, r2
    4f36:	4658      	mov	r0, fp
    4f38:	464a      	mov	r2, r9
    4f3a:	4090      	lsls	r0, r2
    4f3c:	1e42      	subs	r2, r0, #1
    4f3e:	4190      	sbcs	r0, r2
    4f40:	40fb      	lsrs	r3, r7
    4f42:	4662      	mov	r2, ip
    4f44:	4302      	orrs	r2, r0
    4f46:	1c1f      	adds	r7, r3, #0
    4f48:	1aa2      	subs	r2, r4, r2
    4f4a:	4294      	cmp	r4, r2
    4f4c:	41a4      	sbcs	r4, r4
    4f4e:	4264      	negs	r4, r4
    4f50:	1bc9      	subs	r1, r1, r7
    4f52:	1b09      	subs	r1, r1, r4
    4f54:	1c14      	adds	r4, r2, #0
    4f56:	020b      	lsls	r3, r1, #8
    4f58:	d59f      	bpl.n	4e9a <__aeabi_dadd+0x52>
    4f5a:	0249      	lsls	r1, r1, #9
    4f5c:	0a4f      	lsrs	r7, r1, #9
    4f5e:	2f00      	cmp	r7, #0
    4f60:	d100      	bne.n	4f64 <__aeabi_dadd+0x11c>
    4f62:	e0c8      	b.n	50f6 <__aeabi_dadd+0x2ae>
    4f64:	1c38      	adds	r0, r7, #0
    4f66:	f001 fc3d 	bl	67e4 <__clzsi2>
    4f6a:	1c02      	adds	r2, r0, #0
    4f6c:	3a08      	subs	r2, #8
    4f6e:	2a1f      	cmp	r2, #31
    4f70:	dd00      	ble.n	4f74 <__aeabi_dadd+0x12c>
    4f72:	e0b5      	b.n	50e0 <__aeabi_dadd+0x298>
    4f74:	2128      	movs	r1, #40	; 0x28
    4f76:	1a09      	subs	r1, r1, r0
    4f78:	1c20      	adds	r0, r4, #0
    4f7a:	4097      	lsls	r7, r2
    4f7c:	40c8      	lsrs	r0, r1
    4f7e:	4307      	orrs	r7, r0
    4f80:	4094      	lsls	r4, r2
    4f82:	4295      	cmp	r5, r2
    4f84:	dd00      	ble.n	4f88 <__aeabi_dadd+0x140>
    4f86:	e0b2      	b.n	50ee <__aeabi_dadd+0x2a6>
    4f88:	1b55      	subs	r5, r2, r5
    4f8a:	1c69      	adds	r1, r5, #1
    4f8c:	291f      	cmp	r1, #31
    4f8e:	dd00      	ble.n	4f92 <__aeabi_dadd+0x14a>
    4f90:	e0dc      	b.n	514c <__aeabi_dadd+0x304>
    4f92:	221f      	movs	r2, #31
    4f94:	1b55      	subs	r5, r2, r5
    4f96:	1c3b      	adds	r3, r7, #0
    4f98:	1c22      	adds	r2, r4, #0
    4f9a:	40ab      	lsls	r3, r5
    4f9c:	40ca      	lsrs	r2, r1
    4f9e:	40ac      	lsls	r4, r5
    4fa0:	1e65      	subs	r5, r4, #1
    4fa2:	41ac      	sbcs	r4, r5
    4fa4:	4313      	orrs	r3, r2
    4fa6:	40cf      	lsrs	r7, r1
    4fa8:	431c      	orrs	r4, r3
    4faa:	1c39      	adds	r1, r7, #0
    4fac:	2500      	movs	r5, #0
    4fae:	e774      	b.n	4e9a <__aeabi_dadd+0x52>
    4fb0:	2380      	movs	r3, #128	; 0x80
    4fb2:	041b      	lsls	r3, r3, #16
    4fb4:	400b      	ands	r3, r1
    4fb6:	1c37      	adds	r7, r6, #0
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d000      	beq.n	4fbe <__aeabi_dadd+0x176>
    4fbc:	e782      	b.n	4ec4 <__aeabi_dadd+0x7c>
    4fbe:	4b90      	ldr	r3, [pc, #576]	; (5200 <__aeabi_dadd+0x3b8>)
    4fc0:	0748      	lsls	r0, r1, #29
    4fc2:	08e4      	lsrs	r4, r4, #3
    4fc4:	4304      	orrs	r4, r0
    4fc6:	08c9      	lsrs	r1, r1, #3
    4fc8:	429d      	cmp	r5, r3
    4fca:	d048      	beq.n	505e <__aeabi_dadd+0x216>
    4fcc:	0309      	lsls	r1, r1, #12
    4fce:	0b0b      	lsrs	r3, r1, #12
    4fd0:	e784      	b.n	4edc <__aeabi_dadd+0x94>
    4fd2:	1aaa      	subs	r2, r5, r2
    4fd4:	4694      	mov	ip, r2
    4fd6:	2a00      	cmp	r2, #0
    4fd8:	dc00      	bgt.n	4fdc <__aeabi_dadd+0x194>
    4fda:	e098      	b.n	510e <__aeabi_dadd+0x2c6>
    4fdc:	4650      	mov	r0, sl
    4fde:	2800      	cmp	r0, #0
    4fe0:	d052      	beq.n	5088 <__aeabi_dadd+0x240>
    4fe2:	4887      	ldr	r0, [pc, #540]	; (5200 <__aeabi_dadd+0x3b8>)
    4fe4:	4285      	cmp	r5, r0
    4fe6:	d100      	bne.n	4fea <__aeabi_dadd+0x1a2>
    4fe8:	e757      	b.n	4e9a <__aeabi_dadd+0x52>
    4fea:	2080      	movs	r0, #128	; 0x80
    4fec:	0400      	lsls	r0, r0, #16
    4fee:	4303      	orrs	r3, r0
    4ff0:	4662      	mov	r2, ip
    4ff2:	2a38      	cmp	r2, #56	; 0x38
    4ff4:	dd00      	ble.n	4ff8 <__aeabi_dadd+0x1b0>
    4ff6:	e0fc      	b.n	51f2 <__aeabi_dadd+0x3aa>
    4ff8:	2a1f      	cmp	r2, #31
    4ffa:	dd00      	ble.n	4ffe <__aeabi_dadd+0x1b6>
    4ffc:	e14a      	b.n	5294 <__aeabi_dadd+0x44c>
    4ffe:	2220      	movs	r2, #32
    5000:	4660      	mov	r0, ip
    5002:	1a10      	subs	r0, r2, r0
    5004:	1c1a      	adds	r2, r3, #0
    5006:	4082      	lsls	r2, r0
    5008:	4682      	mov	sl, r0
    500a:	4691      	mov	r9, r2
    500c:	4658      	mov	r0, fp
    500e:	4662      	mov	r2, ip
    5010:	40d0      	lsrs	r0, r2
    5012:	464a      	mov	r2, r9
    5014:	4302      	orrs	r2, r0
    5016:	4690      	mov	r8, r2
    5018:	4658      	mov	r0, fp
    501a:	4652      	mov	r2, sl
    501c:	4090      	lsls	r0, r2
    501e:	1e42      	subs	r2, r0, #1
    5020:	4190      	sbcs	r0, r2
    5022:	4642      	mov	r2, r8
    5024:	4302      	orrs	r2, r0
    5026:	4660      	mov	r0, ip
    5028:	40c3      	lsrs	r3, r0
    502a:	1912      	adds	r2, r2, r4
    502c:	42a2      	cmp	r2, r4
    502e:	41a4      	sbcs	r4, r4
    5030:	4264      	negs	r4, r4
    5032:	1859      	adds	r1, r3, r1
    5034:	1909      	adds	r1, r1, r4
    5036:	1c14      	adds	r4, r2, #0
    5038:	0208      	lsls	r0, r1, #8
    503a:	d400      	bmi.n	503e <__aeabi_dadd+0x1f6>
    503c:	e72d      	b.n	4e9a <__aeabi_dadd+0x52>
    503e:	4b70      	ldr	r3, [pc, #448]	; (5200 <__aeabi_dadd+0x3b8>)
    5040:	3501      	adds	r5, #1
    5042:	429d      	cmp	r5, r3
    5044:	d100      	bne.n	5048 <__aeabi_dadd+0x200>
    5046:	e122      	b.n	528e <__aeabi_dadd+0x446>
    5048:	4b6e      	ldr	r3, [pc, #440]	; (5204 <__aeabi_dadd+0x3bc>)
    504a:	0860      	lsrs	r0, r4, #1
    504c:	4019      	ands	r1, r3
    504e:	2301      	movs	r3, #1
    5050:	4023      	ands	r3, r4
    5052:	1c1c      	adds	r4, r3, #0
    5054:	4304      	orrs	r4, r0
    5056:	07cb      	lsls	r3, r1, #31
    5058:	431c      	orrs	r4, r3
    505a:	0849      	lsrs	r1, r1, #1
    505c:	e71d      	b.n	4e9a <__aeabi_dadd+0x52>
    505e:	1c23      	adds	r3, r4, #0
    5060:	430b      	orrs	r3, r1
    5062:	d03a      	beq.n	50da <__aeabi_dadd+0x292>
    5064:	2380      	movs	r3, #128	; 0x80
    5066:	031b      	lsls	r3, r3, #12
    5068:	430b      	orrs	r3, r1
    506a:	031b      	lsls	r3, r3, #12
    506c:	0b1b      	lsrs	r3, r3, #12
    506e:	e735      	b.n	4edc <__aeabi_dadd+0x94>
    5070:	3f01      	subs	r7, #1
    5072:	2f00      	cmp	r7, #0
    5074:	d165      	bne.n	5142 <__aeabi_dadd+0x2fa>
    5076:	4658      	mov	r0, fp
    5078:	1a22      	subs	r2, r4, r0
    507a:	4294      	cmp	r4, r2
    507c:	41a4      	sbcs	r4, r4
    507e:	4264      	negs	r4, r4
    5080:	1ac9      	subs	r1, r1, r3
    5082:	1b09      	subs	r1, r1, r4
    5084:	1c14      	adds	r4, r2, #0
    5086:	e766      	b.n	4f56 <__aeabi_dadd+0x10e>
    5088:	4658      	mov	r0, fp
    508a:	4318      	orrs	r0, r3
    508c:	d100      	bne.n	5090 <__aeabi_dadd+0x248>
    508e:	e704      	b.n	4e9a <__aeabi_dadd+0x52>
    5090:	2201      	movs	r2, #1
    5092:	4252      	negs	r2, r2
    5094:	4494      	add	ip, r2
    5096:	4660      	mov	r0, ip
    5098:	2800      	cmp	r0, #0
    509a:	d000      	beq.n	509e <__aeabi_dadd+0x256>
    509c:	e0c5      	b.n	522a <__aeabi_dadd+0x3e2>
    509e:	4658      	mov	r0, fp
    50a0:	1902      	adds	r2, r0, r4
    50a2:	e7c3      	b.n	502c <__aeabi_dadd+0x1e4>
    50a4:	2f00      	cmp	r7, #0
    50a6:	d173      	bne.n	5190 <__aeabi_dadd+0x348>
    50a8:	1c68      	adds	r0, r5, #1
    50aa:	0540      	lsls	r0, r0, #21
    50ac:	0d40      	lsrs	r0, r0, #21
    50ae:	2801      	cmp	r0, #1
    50b0:	dc00      	bgt.n	50b4 <__aeabi_dadd+0x26c>
    50b2:	e0de      	b.n	5272 <__aeabi_dadd+0x42a>
    50b4:	465a      	mov	r2, fp
    50b6:	1aa2      	subs	r2, r4, r2
    50b8:	4294      	cmp	r4, r2
    50ba:	41bf      	sbcs	r7, r7
    50bc:	1ac8      	subs	r0, r1, r3
    50be:	427f      	negs	r7, r7
    50c0:	1bc7      	subs	r7, r0, r7
    50c2:	0238      	lsls	r0, r7, #8
    50c4:	d400      	bmi.n	50c8 <__aeabi_dadd+0x280>
    50c6:	e089      	b.n	51dc <__aeabi_dadd+0x394>
    50c8:	465a      	mov	r2, fp
    50ca:	1b14      	subs	r4, r2, r4
    50cc:	45a3      	cmp	fp, r4
    50ce:	4192      	sbcs	r2, r2
    50d0:	1a59      	subs	r1, r3, r1
    50d2:	4252      	negs	r2, r2
    50d4:	1a8f      	subs	r7, r1, r2
    50d6:	4666      	mov	r6, ip
    50d8:	e741      	b.n	4f5e <__aeabi_dadd+0x116>
    50da:	2300      	movs	r3, #0
    50dc:	2400      	movs	r4, #0
    50de:	e6fd      	b.n	4edc <__aeabi_dadd+0x94>
    50e0:	1c27      	adds	r7, r4, #0
    50e2:	3828      	subs	r0, #40	; 0x28
    50e4:	4087      	lsls	r7, r0
    50e6:	2400      	movs	r4, #0
    50e8:	4295      	cmp	r5, r2
    50ea:	dc00      	bgt.n	50ee <__aeabi_dadd+0x2a6>
    50ec:	e74c      	b.n	4f88 <__aeabi_dadd+0x140>
    50ee:	4945      	ldr	r1, [pc, #276]	; (5204 <__aeabi_dadd+0x3bc>)
    50f0:	1aad      	subs	r5, r5, r2
    50f2:	4039      	ands	r1, r7
    50f4:	e6d1      	b.n	4e9a <__aeabi_dadd+0x52>
    50f6:	1c20      	adds	r0, r4, #0
    50f8:	f001 fb74 	bl	67e4 <__clzsi2>
    50fc:	3020      	adds	r0, #32
    50fe:	e734      	b.n	4f6a <__aeabi_dadd+0x122>
    5100:	465a      	mov	r2, fp
    5102:	431a      	orrs	r2, r3
    5104:	1e53      	subs	r3, r2, #1
    5106:	419a      	sbcs	r2, r3
    5108:	b2d2      	uxtb	r2, r2
    510a:	2700      	movs	r7, #0
    510c:	e71c      	b.n	4f48 <__aeabi_dadd+0x100>
    510e:	2a00      	cmp	r2, #0
    5110:	d000      	beq.n	5114 <__aeabi_dadd+0x2cc>
    5112:	e0dc      	b.n	52ce <__aeabi_dadd+0x486>
    5114:	1c68      	adds	r0, r5, #1
    5116:	0542      	lsls	r2, r0, #21
    5118:	0d52      	lsrs	r2, r2, #21
    511a:	2a01      	cmp	r2, #1
    511c:	dc00      	bgt.n	5120 <__aeabi_dadd+0x2d8>
    511e:	e08d      	b.n	523c <__aeabi_dadd+0x3f4>
    5120:	4d37      	ldr	r5, [pc, #220]	; (5200 <__aeabi_dadd+0x3b8>)
    5122:	42a8      	cmp	r0, r5
    5124:	d100      	bne.n	5128 <__aeabi_dadd+0x2e0>
    5126:	e0f3      	b.n	5310 <__aeabi_dadd+0x4c8>
    5128:	465d      	mov	r5, fp
    512a:	192a      	adds	r2, r5, r4
    512c:	42a2      	cmp	r2, r4
    512e:	41a4      	sbcs	r4, r4
    5130:	4264      	negs	r4, r4
    5132:	1859      	adds	r1, r3, r1
    5134:	1909      	adds	r1, r1, r4
    5136:	07cc      	lsls	r4, r1, #31
    5138:	0852      	lsrs	r2, r2, #1
    513a:	4314      	orrs	r4, r2
    513c:	0849      	lsrs	r1, r1, #1
    513e:	1c05      	adds	r5, r0, #0
    5140:	e6ab      	b.n	4e9a <__aeabi_dadd+0x52>
    5142:	482f      	ldr	r0, [pc, #188]	; (5200 <__aeabi_dadd+0x3b8>)
    5144:	4285      	cmp	r5, r0
    5146:	d000      	beq.n	514a <__aeabi_dadd+0x302>
    5148:	e6e6      	b.n	4f18 <__aeabi_dadd+0xd0>
    514a:	e6a6      	b.n	4e9a <__aeabi_dadd+0x52>
    514c:	1c2b      	adds	r3, r5, #0
    514e:	3b1f      	subs	r3, #31
    5150:	1c3a      	adds	r2, r7, #0
    5152:	40da      	lsrs	r2, r3
    5154:	1c13      	adds	r3, r2, #0
    5156:	2920      	cmp	r1, #32
    5158:	d06c      	beq.n	5234 <__aeabi_dadd+0x3ec>
    515a:	223f      	movs	r2, #63	; 0x3f
    515c:	1b55      	subs	r5, r2, r5
    515e:	40af      	lsls	r7, r5
    5160:	433c      	orrs	r4, r7
    5162:	1e60      	subs	r0, r4, #1
    5164:	4184      	sbcs	r4, r0
    5166:	431c      	orrs	r4, r3
    5168:	2100      	movs	r1, #0
    516a:	2500      	movs	r5, #0
    516c:	e695      	b.n	4e9a <__aeabi_dadd+0x52>
    516e:	1c38      	adds	r0, r7, #0
    5170:	3820      	subs	r0, #32
    5172:	1c1a      	adds	r2, r3, #0
    5174:	40c2      	lsrs	r2, r0
    5176:	1c10      	adds	r0, r2, #0
    5178:	2f20      	cmp	r7, #32
    517a:	d05d      	beq.n	5238 <__aeabi_dadd+0x3f0>
    517c:	2240      	movs	r2, #64	; 0x40
    517e:	1bd7      	subs	r7, r2, r7
    5180:	40bb      	lsls	r3, r7
    5182:	465a      	mov	r2, fp
    5184:	431a      	orrs	r2, r3
    5186:	1e53      	subs	r3, r2, #1
    5188:	419a      	sbcs	r2, r3
    518a:	4302      	orrs	r2, r0
    518c:	2700      	movs	r7, #0
    518e:	e6db      	b.n	4f48 <__aeabi_dadd+0x100>
    5190:	2d00      	cmp	r5, #0
    5192:	d03b      	beq.n	520c <__aeabi_dadd+0x3c4>
    5194:	4d1a      	ldr	r5, [pc, #104]	; (5200 <__aeabi_dadd+0x3b8>)
    5196:	45aa      	cmp	sl, r5
    5198:	d100      	bne.n	519c <__aeabi_dadd+0x354>
    519a:	e093      	b.n	52c4 <__aeabi_dadd+0x47c>
    519c:	2580      	movs	r5, #128	; 0x80
    519e:	042d      	lsls	r5, r5, #16
    51a0:	427f      	negs	r7, r7
    51a2:	4329      	orrs	r1, r5
    51a4:	2f38      	cmp	r7, #56	; 0x38
    51a6:	dd00      	ble.n	51aa <__aeabi_dadd+0x362>
    51a8:	e0ac      	b.n	5304 <__aeabi_dadd+0x4bc>
    51aa:	2f1f      	cmp	r7, #31
    51ac:	dd00      	ble.n	51b0 <__aeabi_dadd+0x368>
    51ae:	e129      	b.n	5404 <__aeabi_dadd+0x5bc>
    51b0:	2520      	movs	r5, #32
    51b2:	1bed      	subs	r5, r5, r7
    51b4:	1c08      	adds	r0, r1, #0
    51b6:	1c26      	adds	r6, r4, #0
    51b8:	40a8      	lsls	r0, r5
    51ba:	40fe      	lsrs	r6, r7
    51bc:	40ac      	lsls	r4, r5
    51be:	4306      	orrs	r6, r0
    51c0:	1e65      	subs	r5, r4, #1
    51c2:	41ac      	sbcs	r4, r5
    51c4:	4334      	orrs	r4, r6
    51c6:	40f9      	lsrs	r1, r7
    51c8:	465d      	mov	r5, fp
    51ca:	1b2c      	subs	r4, r5, r4
    51cc:	45a3      	cmp	fp, r4
    51ce:	4192      	sbcs	r2, r2
    51d0:	1a5b      	subs	r3, r3, r1
    51d2:	4252      	negs	r2, r2
    51d4:	1a99      	subs	r1, r3, r2
    51d6:	4655      	mov	r5, sl
    51d8:	4666      	mov	r6, ip
    51da:	e6bc      	b.n	4f56 <__aeabi_dadd+0x10e>
    51dc:	1c13      	adds	r3, r2, #0
    51de:	433b      	orrs	r3, r7
    51e0:	1c14      	adds	r4, r2, #0
    51e2:	2b00      	cmp	r3, #0
    51e4:	d000      	beq.n	51e8 <__aeabi_dadd+0x3a0>
    51e6:	e6ba      	b.n	4f5e <__aeabi_dadd+0x116>
    51e8:	2700      	movs	r7, #0
    51ea:	2100      	movs	r1, #0
    51ec:	2500      	movs	r5, #0
    51ee:	2400      	movs	r4, #0
    51f0:	e6e5      	b.n	4fbe <__aeabi_dadd+0x176>
    51f2:	465a      	mov	r2, fp
    51f4:	431a      	orrs	r2, r3
    51f6:	1e53      	subs	r3, r2, #1
    51f8:	419a      	sbcs	r2, r3
    51fa:	b2d2      	uxtb	r2, r2
    51fc:	2300      	movs	r3, #0
    51fe:	e714      	b.n	502a <__aeabi_dadd+0x1e2>
    5200:	000007ff 	.word	0x000007ff
    5204:	ff7fffff 	.word	0xff7fffff
    5208:	800fffff 	.word	0x800fffff
    520c:	1c0d      	adds	r5, r1, #0
    520e:	4325      	orrs	r5, r4
    5210:	d058      	beq.n	52c4 <__aeabi_dadd+0x47c>
    5212:	43ff      	mvns	r7, r7
    5214:	2f00      	cmp	r7, #0
    5216:	d151      	bne.n	52bc <__aeabi_dadd+0x474>
    5218:	1b04      	subs	r4, r0, r4
    521a:	45a3      	cmp	fp, r4
    521c:	4192      	sbcs	r2, r2
    521e:	1a59      	subs	r1, r3, r1
    5220:	4252      	negs	r2, r2
    5222:	1a89      	subs	r1, r1, r2
    5224:	4655      	mov	r5, sl
    5226:	4666      	mov	r6, ip
    5228:	e695      	b.n	4f56 <__aeabi_dadd+0x10e>
    522a:	4896      	ldr	r0, [pc, #600]	; (5484 <__aeabi_dadd+0x63c>)
    522c:	4285      	cmp	r5, r0
    522e:	d000      	beq.n	5232 <__aeabi_dadd+0x3ea>
    5230:	e6de      	b.n	4ff0 <__aeabi_dadd+0x1a8>
    5232:	e632      	b.n	4e9a <__aeabi_dadd+0x52>
    5234:	2700      	movs	r7, #0
    5236:	e793      	b.n	5160 <__aeabi_dadd+0x318>
    5238:	2300      	movs	r3, #0
    523a:	e7a2      	b.n	5182 <__aeabi_dadd+0x33a>
    523c:	1c08      	adds	r0, r1, #0
    523e:	4320      	orrs	r0, r4
    5240:	2d00      	cmp	r5, #0
    5242:	d000      	beq.n	5246 <__aeabi_dadd+0x3fe>
    5244:	e0c4      	b.n	53d0 <__aeabi_dadd+0x588>
    5246:	2800      	cmp	r0, #0
    5248:	d100      	bne.n	524c <__aeabi_dadd+0x404>
    524a:	e0f7      	b.n	543c <__aeabi_dadd+0x5f4>
    524c:	4658      	mov	r0, fp
    524e:	4318      	orrs	r0, r3
    5250:	d100      	bne.n	5254 <__aeabi_dadd+0x40c>
    5252:	e622      	b.n	4e9a <__aeabi_dadd+0x52>
    5254:	4658      	mov	r0, fp
    5256:	1902      	adds	r2, r0, r4
    5258:	42a2      	cmp	r2, r4
    525a:	41a4      	sbcs	r4, r4
    525c:	4264      	negs	r4, r4
    525e:	1859      	adds	r1, r3, r1
    5260:	1909      	adds	r1, r1, r4
    5262:	1c14      	adds	r4, r2, #0
    5264:	020a      	lsls	r2, r1, #8
    5266:	d400      	bmi.n	526a <__aeabi_dadd+0x422>
    5268:	e617      	b.n	4e9a <__aeabi_dadd+0x52>
    526a:	4b87      	ldr	r3, [pc, #540]	; (5488 <__aeabi_dadd+0x640>)
    526c:	2501      	movs	r5, #1
    526e:	4019      	ands	r1, r3
    5270:	e613      	b.n	4e9a <__aeabi_dadd+0x52>
    5272:	1c08      	adds	r0, r1, #0
    5274:	4320      	orrs	r0, r4
    5276:	2d00      	cmp	r5, #0
    5278:	d139      	bne.n	52ee <__aeabi_dadd+0x4a6>
    527a:	2800      	cmp	r0, #0
    527c:	d171      	bne.n	5362 <__aeabi_dadd+0x51a>
    527e:	4659      	mov	r1, fp
    5280:	4319      	orrs	r1, r3
    5282:	d003      	beq.n	528c <__aeabi_dadd+0x444>
    5284:	1c19      	adds	r1, r3, #0
    5286:	465c      	mov	r4, fp
    5288:	4666      	mov	r6, ip
    528a:	e606      	b.n	4e9a <__aeabi_dadd+0x52>
    528c:	2700      	movs	r7, #0
    528e:	2100      	movs	r1, #0
    5290:	2400      	movs	r4, #0
    5292:	e694      	b.n	4fbe <__aeabi_dadd+0x176>
    5294:	4660      	mov	r0, ip
    5296:	3820      	subs	r0, #32
    5298:	1c1a      	adds	r2, r3, #0
    529a:	40c2      	lsrs	r2, r0
    529c:	4660      	mov	r0, ip
    529e:	4691      	mov	r9, r2
    52a0:	2820      	cmp	r0, #32
    52a2:	d100      	bne.n	52a6 <__aeabi_dadd+0x45e>
    52a4:	e0ac      	b.n	5400 <__aeabi_dadd+0x5b8>
    52a6:	2240      	movs	r2, #64	; 0x40
    52a8:	1a12      	subs	r2, r2, r0
    52aa:	4093      	lsls	r3, r2
    52ac:	465a      	mov	r2, fp
    52ae:	431a      	orrs	r2, r3
    52b0:	1e53      	subs	r3, r2, #1
    52b2:	419a      	sbcs	r2, r3
    52b4:	464b      	mov	r3, r9
    52b6:	431a      	orrs	r2, r3
    52b8:	2300      	movs	r3, #0
    52ba:	e6b6      	b.n	502a <__aeabi_dadd+0x1e2>
    52bc:	4d71      	ldr	r5, [pc, #452]	; (5484 <__aeabi_dadd+0x63c>)
    52be:	45aa      	cmp	sl, r5
    52c0:	d000      	beq.n	52c4 <__aeabi_dadd+0x47c>
    52c2:	e76f      	b.n	51a4 <__aeabi_dadd+0x35c>
    52c4:	1c19      	adds	r1, r3, #0
    52c6:	465c      	mov	r4, fp
    52c8:	4655      	mov	r5, sl
    52ca:	4666      	mov	r6, ip
    52cc:	e5e5      	b.n	4e9a <__aeabi_dadd+0x52>
    52ce:	2d00      	cmp	r5, #0
    52d0:	d122      	bne.n	5318 <__aeabi_dadd+0x4d0>
    52d2:	1c0d      	adds	r5, r1, #0
    52d4:	4325      	orrs	r5, r4
    52d6:	d077      	beq.n	53c8 <__aeabi_dadd+0x580>
    52d8:	43d5      	mvns	r5, r2
    52da:	2d00      	cmp	r5, #0
    52dc:	d171      	bne.n	53c2 <__aeabi_dadd+0x57a>
    52de:	445c      	add	r4, fp
    52e0:	455c      	cmp	r4, fp
    52e2:	4192      	sbcs	r2, r2
    52e4:	1859      	adds	r1, r3, r1
    52e6:	4252      	negs	r2, r2
    52e8:	1889      	adds	r1, r1, r2
    52ea:	4655      	mov	r5, sl
    52ec:	e6a4      	b.n	5038 <__aeabi_dadd+0x1f0>
    52ee:	2800      	cmp	r0, #0
    52f0:	d14d      	bne.n	538e <__aeabi_dadd+0x546>
    52f2:	4659      	mov	r1, fp
    52f4:	4319      	orrs	r1, r3
    52f6:	d100      	bne.n	52fa <__aeabi_dadd+0x4b2>
    52f8:	e094      	b.n	5424 <__aeabi_dadd+0x5dc>
    52fa:	1c19      	adds	r1, r3, #0
    52fc:	465c      	mov	r4, fp
    52fe:	4666      	mov	r6, ip
    5300:	4d60      	ldr	r5, [pc, #384]	; (5484 <__aeabi_dadd+0x63c>)
    5302:	e5ca      	b.n	4e9a <__aeabi_dadd+0x52>
    5304:	430c      	orrs	r4, r1
    5306:	1e61      	subs	r1, r4, #1
    5308:	418c      	sbcs	r4, r1
    530a:	b2e4      	uxtb	r4, r4
    530c:	2100      	movs	r1, #0
    530e:	e75b      	b.n	51c8 <__aeabi_dadd+0x380>
    5310:	1c05      	adds	r5, r0, #0
    5312:	2100      	movs	r1, #0
    5314:	2400      	movs	r4, #0
    5316:	e652      	b.n	4fbe <__aeabi_dadd+0x176>
    5318:	4d5a      	ldr	r5, [pc, #360]	; (5484 <__aeabi_dadd+0x63c>)
    531a:	45aa      	cmp	sl, r5
    531c:	d054      	beq.n	53c8 <__aeabi_dadd+0x580>
    531e:	4255      	negs	r5, r2
    5320:	2280      	movs	r2, #128	; 0x80
    5322:	0410      	lsls	r0, r2, #16
    5324:	4301      	orrs	r1, r0
    5326:	2d38      	cmp	r5, #56	; 0x38
    5328:	dd00      	ble.n	532c <__aeabi_dadd+0x4e4>
    532a:	e081      	b.n	5430 <__aeabi_dadd+0x5e8>
    532c:	2d1f      	cmp	r5, #31
    532e:	dd00      	ble.n	5332 <__aeabi_dadd+0x4ea>
    5330:	e092      	b.n	5458 <__aeabi_dadd+0x610>
    5332:	2220      	movs	r2, #32
    5334:	1b50      	subs	r0, r2, r5
    5336:	1c0a      	adds	r2, r1, #0
    5338:	4684      	mov	ip, r0
    533a:	4082      	lsls	r2, r0
    533c:	1c20      	adds	r0, r4, #0
    533e:	40e8      	lsrs	r0, r5
    5340:	4302      	orrs	r2, r0
    5342:	4690      	mov	r8, r2
    5344:	4662      	mov	r2, ip
    5346:	4094      	lsls	r4, r2
    5348:	1e60      	subs	r0, r4, #1
    534a:	4184      	sbcs	r4, r0
    534c:	4642      	mov	r2, r8
    534e:	4314      	orrs	r4, r2
    5350:	40e9      	lsrs	r1, r5
    5352:	445c      	add	r4, fp
    5354:	455c      	cmp	r4, fp
    5356:	4192      	sbcs	r2, r2
    5358:	18cb      	adds	r3, r1, r3
    535a:	4252      	negs	r2, r2
    535c:	1899      	adds	r1, r3, r2
    535e:	4655      	mov	r5, sl
    5360:	e66a      	b.n	5038 <__aeabi_dadd+0x1f0>
    5362:	4658      	mov	r0, fp
    5364:	4318      	orrs	r0, r3
    5366:	d100      	bne.n	536a <__aeabi_dadd+0x522>
    5368:	e597      	b.n	4e9a <__aeabi_dadd+0x52>
    536a:	4658      	mov	r0, fp
    536c:	1a27      	subs	r7, r4, r0
    536e:	42bc      	cmp	r4, r7
    5370:	4192      	sbcs	r2, r2
    5372:	1ac8      	subs	r0, r1, r3
    5374:	4252      	negs	r2, r2
    5376:	1a80      	subs	r0, r0, r2
    5378:	0202      	lsls	r2, r0, #8
    537a:	d566      	bpl.n	544a <__aeabi_dadd+0x602>
    537c:	4658      	mov	r0, fp
    537e:	1b04      	subs	r4, r0, r4
    5380:	45a3      	cmp	fp, r4
    5382:	4192      	sbcs	r2, r2
    5384:	1a59      	subs	r1, r3, r1
    5386:	4252      	negs	r2, r2
    5388:	1a89      	subs	r1, r1, r2
    538a:	4666      	mov	r6, ip
    538c:	e585      	b.n	4e9a <__aeabi_dadd+0x52>
    538e:	4658      	mov	r0, fp
    5390:	4318      	orrs	r0, r3
    5392:	d033      	beq.n	53fc <__aeabi_dadd+0x5b4>
    5394:	0748      	lsls	r0, r1, #29
    5396:	08e4      	lsrs	r4, r4, #3
    5398:	4304      	orrs	r4, r0
    539a:	2080      	movs	r0, #128	; 0x80
    539c:	08c9      	lsrs	r1, r1, #3
    539e:	0300      	lsls	r0, r0, #12
    53a0:	4201      	tst	r1, r0
    53a2:	d008      	beq.n	53b6 <__aeabi_dadd+0x56e>
    53a4:	08dd      	lsrs	r5, r3, #3
    53a6:	4205      	tst	r5, r0
    53a8:	d105      	bne.n	53b6 <__aeabi_dadd+0x56e>
    53aa:	4659      	mov	r1, fp
    53ac:	08ca      	lsrs	r2, r1, #3
    53ae:	075c      	lsls	r4, r3, #29
    53b0:	4314      	orrs	r4, r2
    53b2:	1c29      	adds	r1, r5, #0
    53b4:	4666      	mov	r6, ip
    53b6:	0f63      	lsrs	r3, r4, #29
    53b8:	00c9      	lsls	r1, r1, #3
    53ba:	4319      	orrs	r1, r3
    53bc:	00e4      	lsls	r4, r4, #3
    53be:	4d31      	ldr	r5, [pc, #196]	; (5484 <__aeabi_dadd+0x63c>)
    53c0:	e56b      	b.n	4e9a <__aeabi_dadd+0x52>
    53c2:	4a30      	ldr	r2, [pc, #192]	; (5484 <__aeabi_dadd+0x63c>)
    53c4:	4592      	cmp	sl, r2
    53c6:	d1ae      	bne.n	5326 <__aeabi_dadd+0x4de>
    53c8:	1c19      	adds	r1, r3, #0
    53ca:	465c      	mov	r4, fp
    53cc:	4655      	mov	r5, sl
    53ce:	e564      	b.n	4e9a <__aeabi_dadd+0x52>
    53d0:	2800      	cmp	r0, #0
    53d2:	d036      	beq.n	5442 <__aeabi_dadd+0x5fa>
    53d4:	4658      	mov	r0, fp
    53d6:	4318      	orrs	r0, r3
    53d8:	d010      	beq.n	53fc <__aeabi_dadd+0x5b4>
    53da:	2580      	movs	r5, #128	; 0x80
    53dc:	0748      	lsls	r0, r1, #29
    53de:	08e4      	lsrs	r4, r4, #3
    53e0:	08c9      	lsrs	r1, r1, #3
    53e2:	032d      	lsls	r5, r5, #12
    53e4:	4304      	orrs	r4, r0
    53e6:	4229      	tst	r1, r5
    53e8:	d0e5      	beq.n	53b6 <__aeabi_dadd+0x56e>
    53ea:	08d8      	lsrs	r0, r3, #3
    53ec:	4228      	tst	r0, r5
    53ee:	d1e2      	bne.n	53b6 <__aeabi_dadd+0x56e>
    53f0:	465d      	mov	r5, fp
    53f2:	08ea      	lsrs	r2, r5, #3
    53f4:	075c      	lsls	r4, r3, #29
    53f6:	4314      	orrs	r4, r2
    53f8:	1c01      	adds	r1, r0, #0
    53fa:	e7dc      	b.n	53b6 <__aeabi_dadd+0x56e>
    53fc:	4d21      	ldr	r5, [pc, #132]	; (5484 <__aeabi_dadd+0x63c>)
    53fe:	e54c      	b.n	4e9a <__aeabi_dadd+0x52>
    5400:	2300      	movs	r3, #0
    5402:	e753      	b.n	52ac <__aeabi_dadd+0x464>
    5404:	1c3d      	adds	r5, r7, #0
    5406:	3d20      	subs	r5, #32
    5408:	1c0a      	adds	r2, r1, #0
    540a:	40ea      	lsrs	r2, r5
    540c:	1c15      	adds	r5, r2, #0
    540e:	2f20      	cmp	r7, #32
    5410:	d034      	beq.n	547c <__aeabi_dadd+0x634>
    5412:	2640      	movs	r6, #64	; 0x40
    5414:	1bf7      	subs	r7, r6, r7
    5416:	40b9      	lsls	r1, r7
    5418:	430c      	orrs	r4, r1
    541a:	1e61      	subs	r1, r4, #1
    541c:	418c      	sbcs	r4, r1
    541e:	432c      	orrs	r4, r5
    5420:	2100      	movs	r1, #0
    5422:	e6d1      	b.n	51c8 <__aeabi_dadd+0x380>
    5424:	2180      	movs	r1, #128	; 0x80
    5426:	2700      	movs	r7, #0
    5428:	03c9      	lsls	r1, r1, #15
    542a:	4d16      	ldr	r5, [pc, #88]	; (5484 <__aeabi_dadd+0x63c>)
    542c:	2400      	movs	r4, #0
    542e:	e5c6      	b.n	4fbe <__aeabi_dadd+0x176>
    5430:	430c      	orrs	r4, r1
    5432:	1e61      	subs	r1, r4, #1
    5434:	418c      	sbcs	r4, r1
    5436:	b2e4      	uxtb	r4, r4
    5438:	2100      	movs	r1, #0
    543a:	e78a      	b.n	5352 <__aeabi_dadd+0x50a>
    543c:	1c19      	adds	r1, r3, #0
    543e:	465c      	mov	r4, fp
    5440:	e52b      	b.n	4e9a <__aeabi_dadd+0x52>
    5442:	1c19      	adds	r1, r3, #0
    5444:	465c      	mov	r4, fp
    5446:	4d0f      	ldr	r5, [pc, #60]	; (5484 <__aeabi_dadd+0x63c>)
    5448:	e527      	b.n	4e9a <__aeabi_dadd+0x52>
    544a:	1c03      	adds	r3, r0, #0
    544c:	433b      	orrs	r3, r7
    544e:	d100      	bne.n	5452 <__aeabi_dadd+0x60a>
    5450:	e71c      	b.n	528c <__aeabi_dadd+0x444>
    5452:	1c01      	adds	r1, r0, #0
    5454:	1c3c      	adds	r4, r7, #0
    5456:	e520      	b.n	4e9a <__aeabi_dadd+0x52>
    5458:	2020      	movs	r0, #32
    545a:	4240      	negs	r0, r0
    545c:	1940      	adds	r0, r0, r5
    545e:	1c0a      	adds	r2, r1, #0
    5460:	40c2      	lsrs	r2, r0
    5462:	4690      	mov	r8, r2
    5464:	2d20      	cmp	r5, #32
    5466:	d00b      	beq.n	5480 <__aeabi_dadd+0x638>
    5468:	2040      	movs	r0, #64	; 0x40
    546a:	1b45      	subs	r5, r0, r5
    546c:	40a9      	lsls	r1, r5
    546e:	430c      	orrs	r4, r1
    5470:	1e61      	subs	r1, r4, #1
    5472:	418c      	sbcs	r4, r1
    5474:	4645      	mov	r5, r8
    5476:	432c      	orrs	r4, r5
    5478:	2100      	movs	r1, #0
    547a:	e76a      	b.n	5352 <__aeabi_dadd+0x50a>
    547c:	2100      	movs	r1, #0
    547e:	e7cb      	b.n	5418 <__aeabi_dadd+0x5d0>
    5480:	2100      	movs	r1, #0
    5482:	e7f4      	b.n	546e <__aeabi_dadd+0x626>
    5484:	000007ff 	.word	0x000007ff
    5488:	ff7fffff 	.word	0xff7fffff

0000548c <__aeabi_ddiv>:
    548c:	b5f0      	push	{r4, r5, r6, r7, lr}
    548e:	4656      	mov	r6, sl
    5490:	4644      	mov	r4, r8
    5492:	465f      	mov	r7, fp
    5494:	464d      	mov	r5, r9
    5496:	b4f0      	push	{r4, r5, r6, r7}
    5498:	1c1f      	adds	r7, r3, #0
    549a:	030b      	lsls	r3, r1, #12
    549c:	0b1b      	lsrs	r3, r3, #12
    549e:	4698      	mov	r8, r3
    54a0:	004b      	lsls	r3, r1, #1
    54a2:	b087      	sub	sp, #28
    54a4:	1c04      	adds	r4, r0, #0
    54a6:	4681      	mov	r9, r0
    54a8:	0d5b      	lsrs	r3, r3, #21
    54aa:	0fc8      	lsrs	r0, r1, #31
    54ac:	1c16      	adds	r6, r2, #0
    54ae:	469a      	mov	sl, r3
    54b0:	9000      	str	r0, [sp, #0]
    54b2:	2b00      	cmp	r3, #0
    54b4:	d051      	beq.n	555a <__aeabi_ddiv+0xce>
    54b6:	4b6a      	ldr	r3, [pc, #424]	; (5660 <__aeabi_ddiv+0x1d4>)
    54b8:	459a      	cmp	sl, r3
    54ba:	d031      	beq.n	5520 <__aeabi_ddiv+0x94>
    54bc:	2280      	movs	r2, #128	; 0x80
    54be:	4641      	mov	r1, r8
    54c0:	0352      	lsls	r2, r2, #13
    54c2:	430a      	orrs	r2, r1
    54c4:	0f63      	lsrs	r3, r4, #29
    54c6:	00d2      	lsls	r2, r2, #3
    54c8:	431a      	orrs	r2, r3
    54ca:	4b66      	ldr	r3, [pc, #408]	; (5664 <__aeabi_ddiv+0x1d8>)
    54cc:	4690      	mov	r8, r2
    54ce:	2500      	movs	r5, #0
    54d0:	00e2      	lsls	r2, r4, #3
    54d2:	4691      	mov	r9, r2
    54d4:	449a      	add	sl, r3
    54d6:	2400      	movs	r4, #0
    54d8:	9502      	str	r5, [sp, #8]
    54da:	033b      	lsls	r3, r7, #12
    54dc:	0b1b      	lsrs	r3, r3, #12
    54de:	469b      	mov	fp, r3
    54e0:	0ffd      	lsrs	r5, r7, #31
    54e2:	007b      	lsls	r3, r7, #1
    54e4:	1c31      	adds	r1, r6, #0
    54e6:	0d5b      	lsrs	r3, r3, #21
    54e8:	9501      	str	r5, [sp, #4]
    54ea:	d060      	beq.n	55ae <__aeabi_ddiv+0x122>
    54ec:	4a5c      	ldr	r2, [pc, #368]	; (5660 <__aeabi_ddiv+0x1d4>)
    54ee:	4293      	cmp	r3, r2
    54f0:	d054      	beq.n	559c <__aeabi_ddiv+0x110>
    54f2:	2180      	movs	r1, #128	; 0x80
    54f4:	4658      	mov	r0, fp
    54f6:	0349      	lsls	r1, r1, #13
    54f8:	4301      	orrs	r1, r0
    54fa:	0f72      	lsrs	r2, r6, #29
    54fc:	00c9      	lsls	r1, r1, #3
    54fe:	4311      	orrs	r1, r2
    5500:	4a58      	ldr	r2, [pc, #352]	; (5664 <__aeabi_ddiv+0x1d8>)
    5502:	468b      	mov	fp, r1
    5504:	189b      	adds	r3, r3, r2
    5506:	00f1      	lsls	r1, r6, #3
    5508:	2000      	movs	r0, #0
    550a:	9a00      	ldr	r2, [sp, #0]
    550c:	4304      	orrs	r4, r0
    550e:	406a      	eors	r2, r5
    5510:	9203      	str	r2, [sp, #12]
    5512:	2c0f      	cmp	r4, #15
    5514:	d900      	bls.n	5518 <__aeabi_ddiv+0x8c>
    5516:	e0ad      	b.n	5674 <__aeabi_ddiv+0x1e8>
    5518:	4e53      	ldr	r6, [pc, #332]	; (5668 <__aeabi_ddiv+0x1dc>)
    551a:	00a4      	lsls	r4, r4, #2
    551c:	5934      	ldr	r4, [r6, r4]
    551e:	46a7      	mov	pc, r4
    5520:	4640      	mov	r0, r8
    5522:	4304      	orrs	r4, r0
    5524:	d16e      	bne.n	5604 <__aeabi_ddiv+0x178>
    5526:	2100      	movs	r1, #0
    5528:	2502      	movs	r5, #2
    552a:	2408      	movs	r4, #8
    552c:	4688      	mov	r8, r1
    552e:	4689      	mov	r9, r1
    5530:	9502      	str	r5, [sp, #8]
    5532:	e7d2      	b.n	54da <__aeabi_ddiv+0x4e>
    5534:	9c00      	ldr	r4, [sp, #0]
    5536:	9802      	ldr	r0, [sp, #8]
    5538:	46c3      	mov	fp, r8
    553a:	4649      	mov	r1, r9
    553c:	9401      	str	r4, [sp, #4]
    553e:	2802      	cmp	r0, #2
    5540:	d064      	beq.n	560c <__aeabi_ddiv+0x180>
    5542:	2803      	cmp	r0, #3
    5544:	d100      	bne.n	5548 <__aeabi_ddiv+0xbc>
    5546:	e2ab      	b.n	5aa0 <__aeabi_ddiv+0x614>
    5548:	2801      	cmp	r0, #1
    554a:	d000      	beq.n	554e <__aeabi_ddiv+0xc2>
    554c:	e238      	b.n	59c0 <__aeabi_ddiv+0x534>
    554e:	9a01      	ldr	r2, [sp, #4]
    5550:	2400      	movs	r4, #0
    5552:	4002      	ands	r2, r0
    5554:	2500      	movs	r5, #0
    5556:	46a1      	mov	r9, r4
    5558:	e060      	b.n	561c <__aeabi_ddiv+0x190>
    555a:	4643      	mov	r3, r8
    555c:	4323      	orrs	r3, r4
    555e:	d04a      	beq.n	55f6 <__aeabi_ddiv+0x16a>
    5560:	4640      	mov	r0, r8
    5562:	2800      	cmp	r0, #0
    5564:	d100      	bne.n	5568 <__aeabi_ddiv+0xdc>
    5566:	e1c0      	b.n	58ea <__aeabi_ddiv+0x45e>
    5568:	f001 f93c 	bl	67e4 <__clzsi2>
    556c:	1e03      	subs	r3, r0, #0
    556e:	2b27      	cmp	r3, #39	; 0x27
    5570:	dd00      	ble.n	5574 <__aeabi_ddiv+0xe8>
    5572:	e1b3      	b.n	58dc <__aeabi_ddiv+0x450>
    5574:	2128      	movs	r1, #40	; 0x28
    5576:	1a0d      	subs	r5, r1, r0
    5578:	1c21      	adds	r1, r4, #0
    557a:	3b08      	subs	r3, #8
    557c:	4642      	mov	r2, r8
    557e:	40e9      	lsrs	r1, r5
    5580:	409a      	lsls	r2, r3
    5582:	1c0d      	adds	r5, r1, #0
    5584:	4315      	orrs	r5, r2
    5586:	1c22      	adds	r2, r4, #0
    5588:	409a      	lsls	r2, r3
    558a:	46a8      	mov	r8, r5
    558c:	4691      	mov	r9, r2
    558e:	4b37      	ldr	r3, [pc, #220]	; (566c <__aeabi_ddiv+0x1e0>)
    5590:	2500      	movs	r5, #0
    5592:	1a1b      	subs	r3, r3, r0
    5594:	469a      	mov	sl, r3
    5596:	2400      	movs	r4, #0
    5598:	9502      	str	r5, [sp, #8]
    559a:	e79e      	b.n	54da <__aeabi_ddiv+0x4e>
    559c:	465a      	mov	r2, fp
    559e:	4316      	orrs	r6, r2
    55a0:	2003      	movs	r0, #3
    55a2:	2e00      	cmp	r6, #0
    55a4:	d1b1      	bne.n	550a <__aeabi_ddiv+0x7e>
    55a6:	46b3      	mov	fp, r6
    55a8:	2100      	movs	r1, #0
    55aa:	2002      	movs	r0, #2
    55ac:	e7ad      	b.n	550a <__aeabi_ddiv+0x7e>
    55ae:	465a      	mov	r2, fp
    55b0:	4332      	orrs	r2, r6
    55b2:	d01b      	beq.n	55ec <__aeabi_ddiv+0x160>
    55b4:	465b      	mov	r3, fp
    55b6:	2b00      	cmp	r3, #0
    55b8:	d100      	bne.n	55bc <__aeabi_ddiv+0x130>
    55ba:	e18a      	b.n	58d2 <__aeabi_ddiv+0x446>
    55bc:	4658      	mov	r0, fp
    55be:	f001 f911 	bl	67e4 <__clzsi2>
    55c2:	2827      	cmp	r0, #39	; 0x27
    55c4:	dd00      	ble.n	55c8 <__aeabi_ddiv+0x13c>
    55c6:	e17d      	b.n	58c4 <__aeabi_ddiv+0x438>
    55c8:	2228      	movs	r2, #40	; 0x28
    55ca:	1a17      	subs	r7, r2, r0
    55cc:	1c01      	adds	r1, r0, #0
    55ce:	1c32      	adds	r2, r6, #0
    55d0:	3908      	subs	r1, #8
    55d2:	465b      	mov	r3, fp
    55d4:	40fa      	lsrs	r2, r7
    55d6:	408b      	lsls	r3, r1
    55d8:	1c17      	adds	r7, r2, #0
    55da:	431f      	orrs	r7, r3
    55dc:	1c33      	adds	r3, r6, #0
    55de:	408b      	lsls	r3, r1
    55e0:	46bb      	mov	fp, r7
    55e2:	1c19      	adds	r1, r3, #0
    55e4:	4b21      	ldr	r3, [pc, #132]	; (566c <__aeabi_ddiv+0x1e0>)
    55e6:	1a1b      	subs	r3, r3, r0
    55e8:	2000      	movs	r0, #0
    55ea:	e78e      	b.n	550a <__aeabi_ddiv+0x7e>
    55ec:	2700      	movs	r7, #0
    55ee:	46bb      	mov	fp, r7
    55f0:	2100      	movs	r1, #0
    55f2:	2001      	movs	r0, #1
    55f4:	e789      	b.n	550a <__aeabi_ddiv+0x7e>
    55f6:	2000      	movs	r0, #0
    55f8:	2501      	movs	r5, #1
    55fa:	2404      	movs	r4, #4
    55fc:	4680      	mov	r8, r0
    55fe:	4681      	mov	r9, r0
    5600:	9502      	str	r5, [sp, #8]
    5602:	e76a      	b.n	54da <__aeabi_ddiv+0x4e>
    5604:	2503      	movs	r5, #3
    5606:	240c      	movs	r4, #12
    5608:	9502      	str	r5, [sp, #8]
    560a:	e766      	b.n	54da <__aeabi_ddiv+0x4e>
    560c:	9c01      	ldr	r4, [sp, #4]
    560e:	9403      	str	r4, [sp, #12]
    5610:	9d03      	ldr	r5, [sp, #12]
    5612:	2201      	movs	r2, #1
    5614:	402a      	ands	r2, r5
    5616:	2400      	movs	r4, #0
    5618:	4d11      	ldr	r5, [pc, #68]	; (5660 <__aeabi_ddiv+0x1d4>)
    561a:	46a1      	mov	r9, r4
    561c:	2000      	movs	r0, #0
    561e:	2100      	movs	r1, #0
    5620:	0324      	lsls	r4, r4, #12
    5622:	0b26      	lsrs	r6, r4, #12
    5624:	0d0c      	lsrs	r4, r1, #20
    5626:	0524      	lsls	r4, r4, #20
    5628:	4b11      	ldr	r3, [pc, #68]	; (5670 <__aeabi_ddiv+0x1e4>)
    562a:	4334      	orrs	r4, r6
    562c:	052d      	lsls	r5, r5, #20
    562e:	4023      	ands	r3, r4
    5630:	432b      	orrs	r3, r5
    5632:	005b      	lsls	r3, r3, #1
    5634:	085b      	lsrs	r3, r3, #1
    5636:	07d2      	lsls	r2, r2, #31
    5638:	1c19      	adds	r1, r3, #0
    563a:	4648      	mov	r0, r9
    563c:	4311      	orrs	r1, r2
    563e:	b007      	add	sp, #28
    5640:	bc3c      	pop	{r2, r3, r4, r5}
    5642:	4690      	mov	r8, r2
    5644:	4699      	mov	r9, r3
    5646:	46a2      	mov	sl, r4
    5648:	46ab      	mov	fp, r5
    564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    564c:	2200      	movs	r2, #0
    564e:	2480      	movs	r4, #128	; 0x80
    5650:	0324      	lsls	r4, r4, #12
    5652:	4691      	mov	r9, r2
    5654:	4d02      	ldr	r5, [pc, #8]	; (5660 <__aeabi_ddiv+0x1d4>)
    5656:	e7e1      	b.n	561c <__aeabi_ddiv+0x190>
    5658:	2400      	movs	r4, #0
    565a:	2500      	movs	r5, #0
    565c:	46a1      	mov	r9, r4
    565e:	e7dd      	b.n	561c <__aeabi_ddiv+0x190>
    5660:	000007ff 	.word	0x000007ff
    5664:	fffffc01 	.word	0xfffffc01
    5668:	00007cc0 	.word	0x00007cc0
    566c:	fffffc0d 	.word	0xfffffc0d
    5670:	800fffff 	.word	0x800fffff
    5674:	4655      	mov	r5, sl
    5676:	1aed      	subs	r5, r5, r3
    5678:	9504      	str	r5, [sp, #16]
    567a:	45d8      	cmp	r8, fp
    567c:	d900      	bls.n	5680 <__aeabi_ddiv+0x1f4>
    567e:	e153      	b.n	5928 <__aeabi_ddiv+0x49c>
    5680:	d100      	bne.n	5684 <__aeabi_ddiv+0x1f8>
    5682:	e14e      	b.n	5922 <__aeabi_ddiv+0x496>
    5684:	9c04      	ldr	r4, [sp, #16]
    5686:	2500      	movs	r5, #0
    5688:	3c01      	subs	r4, #1
    568a:	464e      	mov	r6, r9
    568c:	9404      	str	r4, [sp, #16]
    568e:	4647      	mov	r7, r8
    5690:	46a9      	mov	r9, r5
    5692:	4658      	mov	r0, fp
    5694:	0203      	lsls	r3, r0, #8
    5696:	0e0c      	lsrs	r4, r1, #24
    5698:	431c      	orrs	r4, r3
    569a:	0209      	lsls	r1, r1, #8
    569c:	0c25      	lsrs	r5, r4, #16
    569e:	0423      	lsls	r3, r4, #16
    56a0:	0c1b      	lsrs	r3, r3, #16
    56a2:	9100      	str	r1, [sp, #0]
    56a4:	1c38      	adds	r0, r7, #0
    56a6:	1c29      	adds	r1, r5, #0
    56a8:	9301      	str	r3, [sp, #4]
    56aa:	f7ff faeb 	bl	4c84 <__aeabi_uidiv>
    56ae:	9901      	ldr	r1, [sp, #4]
    56b0:	4683      	mov	fp, r0
    56b2:	4341      	muls	r1, r0
    56b4:	1c38      	adds	r0, r7, #0
    56b6:	468a      	mov	sl, r1
    56b8:	1c29      	adds	r1, r5, #0
    56ba:	f7ff fb27 	bl	4d0c <__aeabi_uidivmod>
    56be:	0c33      	lsrs	r3, r6, #16
    56c0:	0409      	lsls	r1, r1, #16
    56c2:	4319      	orrs	r1, r3
    56c4:	458a      	cmp	sl, r1
    56c6:	d90c      	bls.n	56e2 <__aeabi_ddiv+0x256>
    56c8:	465b      	mov	r3, fp
    56ca:	1909      	adds	r1, r1, r4
    56cc:	3b01      	subs	r3, #1
    56ce:	428c      	cmp	r4, r1
    56d0:	d900      	bls.n	56d4 <__aeabi_ddiv+0x248>
    56d2:	e147      	b.n	5964 <__aeabi_ddiv+0x4d8>
    56d4:	458a      	cmp	sl, r1
    56d6:	d800      	bhi.n	56da <__aeabi_ddiv+0x24e>
    56d8:	e144      	b.n	5964 <__aeabi_ddiv+0x4d8>
    56da:	2202      	movs	r2, #2
    56dc:	4252      	negs	r2, r2
    56de:	4493      	add	fp, r2
    56e0:	1909      	adds	r1, r1, r4
    56e2:	4653      	mov	r3, sl
    56e4:	1acb      	subs	r3, r1, r3
    56e6:	1c18      	adds	r0, r3, #0
    56e8:	1c29      	adds	r1, r5, #0
    56ea:	4698      	mov	r8, r3
    56ec:	f7ff faca 	bl	4c84 <__aeabi_uidiv>
    56f0:	1c07      	adds	r7, r0, #0
    56f2:	9801      	ldr	r0, [sp, #4]
    56f4:	1c29      	adds	r1, r5, #0
    56f6:	4378      	muls	r0, r7
    56f8:	4682      	mov	sl, r0
    56fa:	4640      	mov	r0, r8
    56fc:	f7ff fb06 	bl	4d0c <__aeabi_uidivmod>
    5700:	0436      	lsls	r6, r6, #16
    5702:	040b      	lsls	r3, r1, #16
    5704:	0c36      	lsrs	r6, r6, #16
    5706:	4333      	orrs	r3, r6
    5708:	459a      	cmp	sl, r3
    570a:	d909      	bls.n	5720 <__aeabi_ddiv+0x294>
    570c:	191b      	adds	r3, r3, r4
    570e:	1e7a      	subs	r2, r7, #1
    5710:	429c      	cmp	r4, r3
    5712:	d900      	bls.n	5716 <__aeabi_ddiv+0x28a>
    5714:	e124      	b.n	5960 <__aeabi_ddiv+0x4d4>
    5716:	459a      	cmp	sl, r3
    5718:	d800      	bhi.n	571c <__aeabi_ddiv+0x290>
    571a:	e121      	b.n	5960 <__aeabi_ddiv+0x4d4>
    571c:	3f02      	subs	r7, #2
    571e:	191b      	adds	r3, r3, r4
    5720:	465e      	mov	r6, fp
    5722:	0432      	lsls	r2, r6, #16
    5724:	4317      	orrs	r7, r2
    5726:	0c38      	lsrs	r0, r7, #16
    5728:	46bb      	mov	fp, r7
    572a:	9e00      	ldr	r6, [sp, #0]
    572c:	9f00      	ldr	r7, [sp, #0]
    572e:	4651      	mov	r1, sl
    5730:	0c3f      	lsrs	r7, r7, #16
    5732:	0432      	lsls	r2, r6, #16
    5734:	1a5b      	subs	r3, r3, r1
    5736:	4659      	mov	r1, fp
    5738:	46ba      	mov	sl, r7
    573a:	0c12      	lsrs	r2, r2, #16
    573c:	040f      	lsls	r7, r1, #16
    573e:	0c3f      	lsrs	r7, r7, #16
    5740:	4690      	mov	r8, r2
    5742:	4651      	mov	r1, sl
    5744:	437a      	muls	r2, r7
    5746:	434f      	muls	r7, r1
    5748:	4641      	mov	r1, r8
    574a:	4341      	muls	r1, r0
    574c:	4656      	mov	r6, sl
    574e:	4370      	muls	r0, r6
    5750:	19cf      	adds	r7, r1, r7
    5752:	0c16      	lsrs	r6, r2, #16
    5754:	19be      	adds	r6, r7, r6
    5756:	42b1      	cmp	r1, r6
    5758:	d902      	bls.n	5760 <__aeabi_ddiv+0x2d4>
    575a:	2780      	movs	r7, #128	; 0x80
    575c:	027f      	lsls	r7, r7, #9
    575e:	19c0      	adds	r0, r0, r7
    5760:	0c31      	lsrs	r1, r6, #16
    5762:	0412      	lsls	r2, r2, #16
    5764:	0436      	lsls	r6, r6, #16
    5766:	0c12      	lsrs	r2, r2, #16
    5768:	1840      	adds	r0, r0, r1
    576a:	18b6      	adds	r6, r6, r2
    576c:	4283      	cmp	r3, r0
    576e:	d200      	bcs.n	5772 <__aeabi_ddiv+0x2e6>
    5770:	e0c4      	b.n	58fc <__aeabi_ddiv+0x470>
    5772:	d100      	bne.n	5776 <__aeabi_ddiv+0x2ea>
    5774:	e0be      	b.n	58f4 <__aeabi_ddiv+0x468>
    5776:	1a19      	subs	r1, r3, r0
    5778:	4648      	mov	r0, r9
    577a:	1b86      	subs	r6, r0, r6
    577c:	45b1      	cmp	r9, r6
    577e:	41bf      	sbcs	r7, r7
    5780:	427f      	negs	r7, r7
    5782:	1bcf      	subs	r7, r1, r7
    5784:	42a7      	cmp	r7, r4
    5786:	d100      	bne.n	578a <__aeabi_ddiv+0x2fe>
    5788:	e113      	b.n	59b2 <__aeabi_ddiv+0x526>
    578a:	1c29      	adds	r1, r5, #0
    578c:	1c38      	adds	r0, r7, #0
    578e:	f7ff fa79 	bl	4c84 <__aeabi_uidiv>
    5792:	9901      	ldr	r1, [sp, #4]
    5794:	9002      	str	r0, [sp, #8]
    5796:	4341      	muls	r1, r0
    5798:	1c38      	adds	r0, r7, #0
    579a:	4689      	mov	r9, r1
    579c:	1c29      	adds	r1, r5, #0
    579e:	f7ff fab5 	bl	4d0c <__aeabi_uidivmod>
    57a2:	0c33      	lsrs	r3, r6, #16
    57a4:	0409      	lsls	r1, r1, #16
    57a6:	4319      	orrs	r1, r3
    57a8:	4589      	cmp	r9, r1
    57aa:	d90c      	bls.n	57c6 <__aeabi_ddiv+0x33a>
    57ac:	9b02      	ldr	r3, [sp, #8]
    57ae:	1909      	adds	r1, r1, r4
    57b0:	3b01      	subs	r3, #1
    57b2:	428c      	cmp	r4, r1
    57b4:	d900      	bls.n	57b8 <__aeabi_ddiv+0x32c>
    57b6:	e0ff      	b.n	59b8 <__aeabi_ddiv+0x52c>
    57b8:	4589      	cmp	r9, r1
    57ba:	d800      	bhi.n	57be <__aeabi_ddiv+0x332>
    57bc:	e0fc      	b.n	59b8 <__aeabi_ddiv+0x52c>
    57be:	9f02      	ldr	r7, [sp, #8]
    57c0:	1909      	adds	r1, r1, r4
    57c2:	3f02      	subs	r7, #2
    57c4:	9702      	str	r7, [sp, #8]
    57c6:	464f      	mov	r7, r9
    57c8:	1bcf      	subs	r7, r1, r7
    57ca:	1c38      	adds	r0, r7, #0
    57cc:	1c29      	adds	r1, r5, #0
    57ce:	9705      	str	r7, [sp, #20]
    57d0:	f7ff fa58 	bl	4c84 <__aeabi_uidiv>
    57d4:	1c07      	adds	r7, r0, #0
    57d6:	9801      	ldr	r0, [sp, #4]
    57d8:	1c29      	adds	r1, r5, #0
    57da:	4378      	muls	r0, r7
    57dc:	4681      	mov	r9, r0
    57de:	9805      	ldr	r0, [sp, #20]
    57e0:	f7ff fa94 	bl	4d0c <__aeabi_uidivmod>
    57e4:	0436      	lsls	r6, r6, #16
    57e6:	0409      	lsls	r1, r1, #16
    57e8:	0c36      	lsrs	r6, r6, #16
    57ea:	430e      	orrs	r6, r1
    57ec:	45b1      	cmp	r9, r6
    57ee:	d909      	bls.n	5804 <__aeabi_ddiv+0x378>
    57f0:	1936      	adds	r6, r6, r4
    57f2:	1e7b      	subs	r3, r7, #1
    57f4:	42b4      	cmp	r4, r6
    57f6:	d900      	bls.n	57fa <__aeabi_ddiv+0x36e>
    57f8:	e0e0      	b.n	59bc <__aeabi_ddiv+0x530>
    57fa:	45b1      	cmp	r9, r6
    57fc:	d800      	bhi.n	5800 <__aeabi_ddiv+0x374>
    57fe:	e0dd      	b.n	59bc <__aeabi_ddiv+0x530>
    5800:	3f02      	subs	r7, #2
    5802:	1936      	adds	r6, r6, r4
    5804:	9d02      	ldr	r5, [sp, #8]
    5806:	4649      	mov	r1, r9
    5808:	1a76      	subs	r6, r6, r1
    580a:	0429      	lsls	r1, r5, #16
    580c:	4339      	orrs	r1, r7
    580e:	040b      	lsls	r3, r1, #16
    5810:	4657      	mov	r7, sl
    5812:	0c0a      	lsrs	r2, r1, #16
    5814:	0c1b      	lsrs	r3, r3, #16
    5816:	4640      	mov	r0, r8
    5818:	4645      	mov	r5, r8
    581a:	4358      	muls	r0, r3
    581c:	4355      	muls	r5, r2
    581e:	437b      	muls	r3, r7
    5820:	437a      	muls	r2, r7
    5822:	18eb      	adds	r3, r5, r3
    5824:	0c07      	lsrs	r7, r0, #16
    5826:	19db      	adds	r3, r3, r7
    5828:	429d      	cmp	r5, r3
    582a:	d902      	bls.n	5832 <__aeabi_ddiv+0x3a6>
    582c:	2580      	movs	r5, #128	; 0x80
    582e:	026d      	lsls	r5, r5, #9
    5830:	1952      	adds	r2, r2, r5
    5832:	0c1d      	lsrs	r5, r3, #16
    5834:	0400      	lsls	r0, r0, #16
    5836:	041b      	lsls	r3, r3, #16
    5838:	0c00      	lsrs	r0, r0, #16
    583a:	1952      	adds	r2, r2, r5
    583c:	181b      	adds	r3, r3, r0
    583e:	4296      	cmp	r6, r2
    5840:	d335      	bcc.n	58ae <__aeabi_ddiv+0x422>
    5842:	d100      	bne.n	5846 <__aeabi_ddiv+0x3ba>
    5844:	e0fc      	b.n	5a40 <__aeabi_ddiv+0x5b4>
    5846:	2301      	movs	r3, #1
    5848:	4319      	orrs	r1, r3
    584a:	9e04      	ldr	r6, [sp, #16]
    584c:	4f99      	ldr	r7, [pc, #612]	; (5ab4 <__aeabi_ddiv+0x628>)
    584e:	19f5      	adds	r5, r6, r7
    5850:	2d00      	cmp	r5, #0
    5852:	dc00      	bgt.n	5856 <__aeabi_ddiv+0x3ca>
    5854:	e0a1      	b.n	599a <__aeabi_ddiv+0x50e>
    5856:	0748      	lsls	r0, r1, #29
    5858:	d009      	beq.n	586e <__aeabi_ddiv+0x3e2>
    585a:	230f      	movs	r3, #15
    585c:	400b      	ands	r3, r1
    585e:	2b04      	cmp	r3, #4
    5860:	d005      	beq.n	586e <__aeabi_ddiv+0x3e2>
    5862:	1d0b      	adds	r3, r1, #4
    5864:	428b      	cmp	r3, r1
    5866:	4189      	sbcs	r1, r1
    5868:	4249      	negs	r1, r1
    586a:	448b      	add	fp, r1
    586c:	1c19      	adds	r1, r3, #0
    586e:	465a      	mov	r2, fp
    5870:	01d2      	lsls	r2, r2, #7
    5872:	d507      	bpl.n	5884 <__aeabi_ddiv+0x3f8>
    5874:	4b90      	ldr	r3, [pc, #576]	; (5ab8 <__aeabi_ddiv+0x62c>)
    5876:	465c      	mov	r4, fp
    5878:	9e04      	ldr	r6, [sp, #16]
    587a:	2780      	movs	r7, #128	; 0x80
    587c:	401c      	ands	r4, r3
    587e:	00ff      	lsls	r7, r7, #3
    5880:	46a3      	mov	fp, r4
    5882:	19f5      	adds	r5, r6, r7
    5884:	4b8d      	ldr	r3, [pc, #564]	; (5abc <__aeabi_ddiv+0x630>)
    5886:	429d      	cmp	r5, r3
    5888:	dd7a      	ble.n	5980 <__aeabi_ddiv+0x4f4>
    588a:	9c03      	ldr	r4, [sp, #12]
    588c:	2201      	movs	r2, #1
    588e:	4022      	ands	r2, r4
    5890:	2400      	movs	r4, #0
    5892:	4d8b      	ldr	r5, [pc, #556]	; (5ac0 <__aeabi_ddiv+0x634>)
    5894:	46a1      	mov	r9, r4
    5896:	e6c1      	b.n	561c <__aeabi_ddiv+0x190>
    5898:	2480      	movs	r4, #128	; 0x80
    589a:	0324      	lsls	r4, r4, #12
    589c:	4647      	mov	r7, r8
    589e:	4227      	tst	r7, r4
    58a0:	d14c      	bne.n	593c <__aeabi_ddiv+0x4b0>
    58a2:	433c      	orrs	r4, r7
    58a4:	0324      	lsls	r4, r4, #12
    58a6:	0b24      	lsrs	r4, r4, #12
    58a8:	9a00      	ldr	r2, [sp, #0]
    58aa:	4d85      	ldr	r5, [pc, #532]	; (5ac0 <__aeabi_ddiv+0x634>)
    58ac:	e6b6      	b.n	561c <__aeabi_ddiv+0x190>
    58ae:	1936      	adds	r6, r6, r4
    58b0:	1e48      	subs	r0, r1, #1
    58b2:	42b4      	cmp	r4, r6
    58b4:	d95e      	bls.n	5974 <__aeabi_ddiv+0x4e8>
    58b6:	1c01      	adds	r1, r0, #0
    58b8:	4296      	cmp	r6, r2
    58ba:	d1c4      	bne.n	5846 <__aeabi_ddiv+0x3ba>
    58bc:	9e00      	ldr	r6, [sp, #0]
    58be:	429e      	cmp	r6, r3
    58c0:	d1c1      	bne.n	5846 <__aeabi_ddiv+0x3ba>
    58c2:	e7c2      	b.n	584a <__aeabi_ddiv+0x3be>
    58c4:	1c03      	adds	r3, r0, #0
    58c6:	3b28      	subs	r3, #40	; 0x28
    58c8:	1c31      	adds	r1, r6, #0
    58ca:	4099      	lsls	r1, r3
    58cc:	468b      	mov	fp, r1
    58ce:	2100      	movs	r1, #0
    58d0:	e688      	b.n	55e4 <__aeabi_ddiv+0x158>
    58d2:	1c30      	adds	r0, r6, #0
    58d4:	f000 ff86 	bl	67e4 <__clzsi2>
    58d8:	3020      	adds	r0, #32
    58da:	e672      	b.n	55c2 <__aeabi_ddiv+0x136>
    58dc:	3b28      	subs	r3, #40	; 0x28
    58de:	1c21      	adds	r1, r4, #0
    58e0:	4099      	lsls	r1, r3
    58e2:	2200      	movs	r2, #0
    58e4:	4688      	mov	r8, r1
    58e6:	4691      	mov	r9, r2
    58e8:	e651      	b.n	558e <__aeabi_ddiv+0x102>
    58ea:	1c20      	adds	r0, r4, #0
    58ec:	f000 ff7a 	bl	67e4 <__clzsi2>
    58f0:	3020      	adds	r0, #32
    58f2:	e63b      	b.n	556c <__aeabi_ddiv+0xe0>
    58f4:	2100      	movs	r1, #0
    58f6:	45b1      	cmp	r9, r6
    58f8:	d300      	bcc.n	58fc <__aeabi_ddiv+0x470>
    58fa:	e73d      	b.n	5778 <__aeabi_ddiv+0x2ec>
    58fc:	9f00      	ldr	r7, [sp, #0]
    58fe:	465a      	mov	r2, fp
    5900:	44b9      	add	r9, r7
    5902:	45b9      	cmp	r9, r7
    5904:	41bf      	sbcs	r7, r7
    5906:	427f      	negs	r7, r7
    5908:	193f      	adds	r7, r7, r4
    590a:	18fb      	adds	r3, r7, r3
    590c:	3a01      	subs	r2, #1
    590e:	429c      	cmp	r4, r3
    5910:	d21e      	bcs.n	5950 <__aeabi_ddiv+0x4c4>
    5912:	4298      	cmp	r0, r3
    5914:	d900      	bls.n	5918 <__aeabi_ddiv+0x48c>
    5916:	e07e      	b.n	5a16 <__aeabi_ddiv+0x58a>
    5918:	d100      	bne.n	591c <__aeabi_ddiv+0x490>
    591a:	e0b5      	b.n	5a88 <__aeabi_ddiv+0x5fc>
    591c:	1a19      	subs	r1, r3, r0
    591e:	4693      	mov	fp, r2
    5920:	e72a      	b.n	5778 <__aeabi_ddiv+0x2ec>
    5922:	4589      	cmp	r9, r1
    5924:	d800      	bhi.n	5928 <__aeabi_ddiv+0x49c>
    5926:	e6ad      	b.n	5684 <__aeabi_ddiv+0x1f8>
    5928:	4648      	mov	r0, r9
    592a:	4646      	mov	r6, r8
    592c:	4642      	mov	r2, r8
    592e:	0877      	lsrs	r7, r6, #1
    5930:	07d3      	lsls	r3, r2, #31
    5932:	0846      	lsrs	r6, r0, #1
    5934:	07c0      	lsls	r0, r0, #31
    5936:	431e      	orrs	r6, r3
    5938:	4681      	mov	r9, r0
    593a:	e6aa      	b.n	5692 <__aeabi_ddiv+0x206>
    593c:	4658      	mov	r0, fp
    593e:	4220      	tst	r0, r4
    5940:	d112      	bne.n	5968 <__aeabi_ddiv+0x4dc>
    5942:	4304      	orrs	r4, r0
    5944:	0324      	lsls	r4, r4, #12
    5946:	1c2a      	adds	r2, r5, #0
    5948:	0b24      	lsrs	r4, r4, #12
    594a:	4689      	mov	r9, r1
    594c:	4d5c      	ldr	r5, [pc, #368]	; (5ac0 <__aeabi_ddiv+0x634>)
    594e:	e665      	b.n	561c <__aeabi_ddiv+0x190>
    5950:	42a3      	cmp	r3, r4
    5952:	d1e3      	bne.n	591c <__aeabi_ddiv+0x490>
    5954:	9f00      	ldr	r7, [sp, #0]
    5956:	454f      	cmp	r7, r9
    5958:	d9db      	bls.n	5912 <__aeabi_ddiv+0x486>
    595a:	1a21      	subs	r1, r4, r0
    595c:	4693      	mov	fp, r2
    595e:	e70b      	b.n	5778 <__aeabi_ddiv+0x2ec>
    5960:	1c17      	adds	r7, r2, #0
    5962:	e6dd      	b.n	5720 <__aeabi_ddiv+0x294>
    5964:	469b      	mov	fp, r3
    5966:	e6bc      	b.n	56e2 <__aeabi_ddiv+0x256>
    5968:	433c      	orrs	r4, r7
    596a:	0324      	lsls	r4, r4, #12
    596c:	0b24      	lsrs	r4, r4, #12
    596e:	9a00      	ldr	r2, [sp, #0]
    5970:	4d53      	ldr	r5, [pc, #332]	; (5ac0 <__aeabi_ddiv+0x634>)
    5972:	e653      	b.n	561c <__aeabi_ddiv+0x190>
    5974:	42b2      	cmp	r2, r6
    5976:	d859      	bhi.n	5a2c <__aeabi_ddiv+0x5a0>
    5978:	d100      	bne.n	597c <__aeabi_ddiv+0x4f0>
    597a:	e08a      	b.n	5a92 <__aeabi_ddiv+0x606>
    597c:	1c01      	adds	r1, r0, #0
    597e:	e762      	b.n	5846 <__aeabi_ddiv+0x3ba>
    5980:	465f      	mov	r7, fp
    5982:	08c9      	lsrs	r1, r1, #3
    5984:	077b      	lsls	r3, r7, #29
    5986:	9e03      	ldr	r6, [sp, #12]
    5988:	430b      	orrs	r3, r1
    598a:	027c      	lsls	r4, r7, #9
    598c:	056d      	lsls	r5, r5, #21
    598e:	2201      	movs	r2, #1
    5990:	4699      	mov	r9, r3
    5992:	0b24      	lsrs	r4, r4, #12
    5994:	0d6d      	lsrs	r5, r5, #21
    5996:	4032      	ands	r2, r6
    5998:	e640      	b.n	561c <__aeabi_ddiv+0x190>
    599a:	4b4a      	ldr	r3, [pc, #296]	; (5ac4 <__aeabi_ddiv+0x638>)
    599c:	9f04      	ldr	r7, [sp, #16]
    599e:	1bdb      	subs	r3, r3, r7
    59a0:	2b38      	cmp	r3, #56	; 0x38
    59a2:	dd10      	ble.n	59c6 <__aeabi_ddiv+0x53a>
    59a4:	9c03      	ldr	r4, [sp, #12]
    59a6:	2201      	movs	r2, #1
    59a8:	4022      	ands	r2, r4
    59aa:	2400      	movs	r4, #0
    59ac:	2500      	movs	r5, #0
    59ae:	46a1      	mov	r9, r4
    59b0:	e634      	b.n	561c <__aeabi_ddiv+0x190>
    59b2:	2101      	movs	r1, #1
    59b4:	4249      	negs	r1, r1
    59b6:	e748      	b.n	584a <__aeabi_ddiv+0x3be>
    59b8:	9302      	str	r3, [sp, #8]
    59ba:	e704      	b.n	57c6 <__aeabi_ddiv+0x33a>
    59bc:	1c1f      	adds	r7, r3, #0
    59be:	e721      	b.n	5804 <__aeabi_ddiv+0x378>
    59c0:	9c01      	ldr	r4, [sp, #4]
    59c2:	9403      	str	r4, [sp, #12]
    59c4:	e741      	b.n	584a <__aeabi_ddiv+0x3be>
    59c6:	2b1f      	cmp	r3, #31
    59c8:	dc40      	bgt.n	5a4c <__aeabi_ddiv+0x5c0>
    59ca:	483f      	ldr	r0, [pc, #252]	; (5ac8 <__aeabi_ddiv+0x63c>)
    59cc:	9f04      	ldr	r7, [sp, #16]
    59ce:	1c0c      	adds	r4, r1, #0
    59d0:	183a      	adds	r2, r7, r0
    59d2:	4658      	mov	r0, fp
    59d4:	4091      	lsls	r1, r2
    59d6:	40dc      	lsrs	r4, r3
    59d8:	4090      	lsls	r0, r2
    59da:	4320      	orrs	r0, r4
    59dc:	1c0a      	adds	r2, r1, #0
    59de:	1e51      	subs	r1, r2, #1
    59e0:	418a      	sbcs	r2, r1
    59e2:	1c01      	adds	r1, r0, #0
    59e4:	4311      	orrs	r1, r2
    59e6:	465a      	mov	r2, fp
    59e8:	40da      	lsrs	r2, r3
    59ea:	1c13      	adds	r3, r2, #0
    59ec:	0748      	lsls	r0, r1, #29
    59ee:	d009      	beq.n	5a04 <__aeabi_ddiv+0x578>
    59f0:	220f      	movs	r2, #15
    59f2:	400a      	ands	r2, r1
    59f4:	2a04      	cmp	r2, #4
    59f6:	d005      	beq.n	5a04 <__aeabi_ddiv+0x578>
    59f8:	1d0a      	adds	r2, r1, #4
    59fa:	428a      	cmp	r2, r1
    59fc:	4189      	sbcs	r1, r1
    59fe:	4249      	negs	r1, r1
    5a00:	185b      	adds	r3, r3, r1
    5a02:	1c11      	adds	r1, r2, #0
    5a04:	021a      	lsls	r2, r3, #8
    5a06:	d534      	bpl.n	5a72 <__aeabi_ddiv+0x5e6>
    5a08:	9c03      	ldr	r4, [sp, #12]
    5a0a:	2201      	movs	r2, #1
    5a0c:	4022      	ands	r2, r4
    5a0e:	2400      	movs	r4, #0
    5a10:	2501      	movs	r5, #1
    5a12:	46a1      	mov	r9, r4
    5a14:	e602      	b.n	561c <__aeabi_ddiv+0x190>
    5a16:	9f00      	ldr	r7, [sp, #0]
    5a18:	2102      	movs	r1, #2
    5a1a:	4249      	negs	r1, r1
    5a1c:	44b9      	add	r9, r7
    5a1e:	448b      	add	fp, r1
    5a20:	45b9      	cmp	r9, r7
    5a22:	4189      	sbcs	r1, r1
    5a24:	4249      	negs	r1, r1
    5a26:	1909      	adds	r1, r1, r4
    5a28:	18cb      	adds	r3, r1, r3
    5a2a:	e6a4      	b.n	5776 <__aeabi_ddiv+0x2ea>
    5a2c:	9d00      	ldr	r5, [sp, #0]
    5a2e:	1e88      	subs	r0, r1, #2
    5a30:	0069      	lsls	r1, r5, #1
    5a32:	42a9      	cmp	r1, r5
    5a34:	41ad      	sbcs	r5, r5
    5a36:	426d      	negs	r5, r5
    5a38:	192c      	adds	r4, r5, r4
    5a3a:	1936      	adds	r6, r6, r4
    5a3c:	9100      	str	r1, [sp, #0]
    5a3e:	e73a      	b.n	58b6 <__aeabi_ddiv+0x42a>
    5a40:	2b00      	cmp	r3, #0
    5a42:	d000      	beq.n	5a46 <__aeabi_ddiv+0x5ba>
    5a44:	e733      	b.n	58ae <__aeabi_ddiv+0x422>
    5a46:	2400      	movs	r4, #0
    5a48:	9400      	str	r4, [sp, #0]
    5a4a:	e737      	b.n	58bc <__aeabi_ddiv+0x430>
    5a4c:	4a1f      	ldr	r2, [pc, #124]	; (5acc <__aeabi_ddiv+0x640>)
    5a4e:	9c04      	ldr	r4, [sp, #16]
    5a50:	465d      	mov	r5, fp
    5a52:	1b12      	subs	r2, r2, r4
    5a54:	40d5      	lsrs	r5, r2
    5a56:	1c2a      	adds	r2, r5, #0
    5a58:	2b20      	cmp	r3, #32
    5a5a:	d01f      	beq.n	5a9c <__aeabi_ddiv+0x610>
    5a5c:	4e1c      	ldr	r6, [pc, #112]	; (5ad0 <__aeabi_ddiv+0x644>)
    5a5e:	465f      	mov	r7, fp
    5a60:	19a3      	adds	r3, r4, r6
    5a62:	409f      	lsls	r7, r3
    5a64:	1c3b      	adds	r3, r7, #0
    5a66:	4319      	orrs	r1, r3
    5a68:	1e4b      	subs	r3, r1, #1
    5a6a:	4199      	sbcs	r1, r3
    5a6c:	4311      	orrs	r1, r2
    5a6e:	2300      	movs	r3, #0
    5a70:	e7bc      	b.n	59ec <__aeabi_ddiv+0x560>
    5a72:	075a      	lsls	r2, r3, #29
    5a74:	08c9      	lsrs	r1, r1, #3
    5a76:	430a      	orrs	r2, r1
    5a78:	9f03      	ldr	r7, [sp, #12]
    5a7a:	4691      	mov	r9, r2
    5a7c:	025b      	lsls	r3, r3, #9
    5a7e:	2201      	movs	r2, #1
    5a80:	0b1c      	lsrs	r4, r3, #12
    5a82:	403a      	ands	r2, r7
    5a84:	2500      	movs	r5, #0
    5a86:	e5c9      	b.n	561c <__aeabi_ddiv+0x190>
    5a88:	454e      	cmp	r6, r9
    5a8a:	d8c4      	bhi.n	5a16 <__aeabi_ddiv+0x58a>
    5a8c:	4693      	mov	fp, r2
    5a8e:	2100      	movs	r1, #0
    5a90:	e672      	b.n	5778 <__aeabi_ddiv+0x2ec>
    5a92:	9f00      	ldr	r7, [sp, #0]
    5a94:	429f      	cmp	r7, r3
    5a96:	d3c9      	bcc.n	5a2c <__aeabi_ddiv+0x5a0>
    5a98:	1c01      	adds	r1, r0, #0
    5a9a:	e70f      	b.n	58bc <__aeabi_ddiv+0x430>
    5a9c:	2300      	movs	r3, #0
    5a9e:	e7e2      	b.n	5a66 <__aeabi_ddiv+0x5da>
    5aa0:	2480      	movs	r4, #128	; 0x80
    5aa2:	0324      	lsls	r4, r4, #12
    5aa4:	465f      	mov	r7, fp
    5aa6:	433c      	orrs	r4, r7
    5aa8:	0324      	lsls	r4, r4, #12
    5aaa:	0b24      	lsrs	r4, r4, #12
    5aac:	9a01      	ldr	r2, [sp, #4]
    5aae:	4689      	mov	r9, r1
    5ab0:	4d03      	ldr	r5, [pc, #12]	; (5ac0 <__aeabi_ddiv+0x634>)
    5ab2:	e5b3      	b.n	561c <__aeabi_ddiv+0x190>
    5ab4:	000003ff 	.word	0x000003ff
    5ab8:	feffffff 	.word	0xfeffffff
    5abc:	000007fe 	.word	0x000007fe
    5ac0:	000007ff 	.word	0x000007ff
    5ac4:	fffffc02 	.word	0xfffffc02
    5ac8:	0000041e 	.word	0x0000041e
    5acc:	fffffbe2 	.word	0xfffffbe2
    5ad0:	0000043e 	.word	0x0000043e

00005ad4 <__aeabi_dmul>:
    5ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ad6:	4656      	mov	r6, sl
    5ad8:	4644      	mov	r4, r8
    5ada:	465f      	mov	r7, fp
    5adc:	464d      	mov	r5, r9
    5ade:	b4f0      	push	{r4, r5, r6, r7}
    5ae0:	1c1f      	adds	r7, r3, #0
    5ae2:	030b      	lsls	r3, r1, #12
    5ae4:	0b1b      	lsrs	r3, r3, #12
    5ae6:	469a      	mov	sl, r3
    5ae8:	004b      	lsls	r3, r1, #1
    5aea:	b087      	sub	sp, #28
    5aec:	1c04      	adds	r4, r0, #0
    5aee:	4680      	mov	r8, r0
    5af0:	0d5b      	lsrs	r3, r3, #21
    5af2:	0fc8      	lsrs	r0, r1, #31
    5af4:	1c16      	adds	r6, r2, #0
    5af6:	9302      	str	r3, [sp, #8]
    5af8:	4681      	mov	r9, r0
    5afa:	2b00      	cmp	r3, #0
    5afc:	d068      	beq.n	5bd0 <__aeabi_dmul+0xfc>
    5afe:	4b69      	ldr	r3, [pc, #420]	; (5ca4 <__aeabi_dmul+0x1d0>)
    5b00:	9902      	ldr	r1, [sp, #8]
    5b02:	4299      	cmp	r1, r3
    5b04:	d032      	beq.n	5b6c <__aeabi_dmul+0x98>
    5b06:	2280      	movs	r2, #128	; 0x80
    5b08:	4653      	mov	r3, sl
    5b0a:	0352      	lsls	r2, r2, #13
    5b0c:	431a      	orrs	r2, r3
    5b0e:	00d2      	lsls	r2, r2, #3
    5b10:	0f63      	lsrs	r3, r4, #29
    5b12:	431a      	orrs	r2, r3
    5b14:	4692      	mov	sl, r2
    5b16:	4a64      	ldr	r2, [pc, #400]	; (5ca8 <__aeabi_dmul+0x1d4>)
    5b18:	00e0      	lsls	r0, r4, #3
    5b1a:	1889      	adds	r1, r1, r2
    5b1c:	4680      	mov	r8, r0
    5b1e:	9102      	str	r1, [sp, #8]
    5b20:	2400      	movs	r4, #0
    5b22:	2500      	movs	r5, #0
    5b24:	033b      	lsls	r3, r7, #12
    5b26:	0b1b      	lsrs	r3, r3, #12
    5b28:	469b      	mov	fp, r3
    5b2a:	0078      	lsls	r0, r7, #1
    5b2c:	0ffb      	lsrs	r3, r7, #31
    5b2e:	1c32      	adds	r2, r6, #0
    5b30:	0d40      	lsrs	r0, r0, #21
    5b32:	9303      	str	r3, [sp, #12]
    5b34:	d100      	bne.n	5b38 <__aeabi_dmul+0x64>
    5b36:	e075      	b.n	5c24 <__aeabi_dmul+0x150>
    5b38:	4b5a      	ldr	r3, [pc, #360]	; (5ca4 <__aeabi_dmul+0x1d0>)
    5b3a:	4298      	cmp	r0, r3
    5b3c:	d069      	beq.n	5c12 <__aeabi_dmul+0x13e>
    5b3e:	2280      	movs	r2, #128	; 0x80
    5b40:	4659      	mov	r1, fp
    5b42:	0352      	lsls	r2, r2, #13
    5b44:	430a      	orrs	r2, r1
    5b46:	0f73      	lsrs	r3, r6, #29
    5b48:	00d2      	lsls	r2, r2, #3
    5b4a:	431a      	orrs	r2, r3
    5b4c:	4b56      	ldr	r3, [pc, #344]	; (5ca8 <__aeabi_dmul+0x1d4>)
    5b4e:	4693      	mov	fp, r2
    5b50:	18c0      	adds	r0, r0, r3
    5b52:	00f2      	lsls	r2, r6, #3
    5b54:	2300      	movs	r3, #0
    5b56:	9903      	ldr	r1, [sp, #12]
    5b58:	464e      	mov	r6, r9
    5b5a:	4071      	eors	r1, r6
    5b5c:	431c      	orrs	r4, r3
    5b5e:	2c0f      	cmp	r4, #15
    5b60:	d900      	bls.n	5b64 <__aeabi_dmul+0x90>
    5b62:	e0a9      	b.n	5cb8 <__aeabi_dmul+0x1e4>
    5b64:	4e51      	ldr	r6, [pc, #324]	; (5cac <__aeabi_dmul+0x1d8>)
    5b66:	00a4      	lsls	r4, r4, #2
    5b68:	5934      	ldr	r4, [r6, r4]
    5b6a:	46a7      	mov	pc, r4
    5b6c:	4653      	mov	r3, sl
    5b6e:	431c      	orrs	r4, r3
    5b70:	d000      	beq.n	5b74 <__aeabi_dmul+0xa0>
    5b72:	e087      	b.n	5c84 <__aeabi_dmul+0x1b0>
    5b74:	2500      	movs	r5, #0
    5b76:	46aa      	mov	sl, r5
    5b78:	46a8      	mov	r8, r5
    5b7a:	2408      	movs	r4, #8
    5b7c:	2502      	movs	r5, #2
    5b7e:	e7d1      	b.n	5b24 <__aeabi_dmul+0x50>
    5b80:	4649      	mov	r1, r9
    5b82:	2d02      	cmp	r5, #2
    5b84:	d06c      	beq.n	5c60 <__aeabi_dmul+0x18c>
    5b86:	2d03      	cmp	r5, #3
    5b88:	d100      	bne.n	5b8c <__aeabi_dmul+0xb8>
    5b8a:	e217      	b.n	5fbc <__aeabi_dmul+0x4e8>
    5b8c:	2d01      	cmp	r5, #1
    5b8e:	d000      	beq.n	5b92 <__aeabi_dmul+0xbe>
    5b90:	e158      	b.n	5e44 <__aeabi_dmul+0x370>
    5b92:	400d      	ands	r5, r1
    5b94:	b2ed      	uxtb	r5, r5
    5b96:	2400      	movs	r4, #0
    5b98:	46a9      	mov	r9, r5
    5b9a:	2300      	movs	r3, #0
    5b9c:	46a0      	mov	r8, r4
    5b9e:	2000      	movs	r0, #0
    5ba0:	2100      	movs	r1, #0
    5ba2:	0325      	lsls	r5, r4, #12
    5ba4:	0d0a      	lsrs	r2, r1, #20
    5ba6:	051c      	lsls	r4, r3, #20
    5ba8:	0b2d      	lsrs	r5, r5, #12
    5baa:	0512      	lsls	r2, r2, #20
    5bac:	4b40      	ldr	r3, [pc, #256]	; (5cb0 <__aeabi_dmul+0x1dc>)
    5bae:	432a      	orrs	r2, r5
    5bb0:	4013      	ands	r3, r2
    5bb2:	4323      	orrs	r3, r4
    5bb4:	005b      	lsls	r3, r3, #1
    5bb6:	464c      	mov	r4, r9
    5bb8:	085b      	lsrs	r3, r3, #1
    5bba:	07e2      	lsls	r2, r4, #31
    5bbc:	1c19      	adds	r1, r3, #0
    5bbe:	4640      	mov	r0, r8
    5bc0:	4311      	orrs	r1, r2
    5bc2:	b007      	add	sp, #28
    5bc4:	bc3c      	pop	{r2, r3, r4, r5}
    5bc6:	4690      	mov	r8, r2
    5bc8:	4699      	mov	r9, r3
    5bca:	46a2      	mov	sl, r4
    5bcc:	46ab      	mov	fp, r5
    5bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bd0:	4653      	mov	r3, sl
    5bd2:	4323      	orrs	r3, r4
    5bd4:	d050      	beq.n	5c78 <__aeabi_dmul+0x1a4>
    5bd6:	4653      	mov	r3, sl
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d100      	bne.n	5bde <__aeabi_dmul+0x10a>
    5bdc:	e184      	b.n	5ee8 <__aeabi_dmul+0x414>
    5bde:	4650      	mov	r0, sl
    5be0:	f000 fe00 	bl	67e4 <__clzsi2>
    5be4:	1e03      	subs	r3, r0, #0
    5be6:	2b27      	cmp	r3, #39	; 0x27
    5be8:	dd00      	ble.n	5bec <__aeabi_dmul+0x118>
    5bea:	e176      	b.n	5eda <__aeabi_dmul+0x406>
    5bec:	2128      	movs	r1, #40	; 0x28
    5bee:	1a0d      	subs	r5, r1, r0
    5bf0:	1c21      	adds	r1, r4, #0
    5bf2:	3b08      	subs	r3, #8
    5bf4:	4652      	mov	r2, sl
    5bf6:	40e9      	lsrs	r1, r5
    5bf8:	409a      	lsls	r2, r3
    5bfa:	1c0d      	adds	r5, r1, #0
    5bfc:	4315      	orrs	r5, r2
    5bfe:	1c22      	adds	r2, r4, #0
    5c00:	409a      	lsls	r2, r3
    5c02:	46aa      	mov	sl, r5
    5c04:	4690      	mov	r8, r2
    5c06:	4b2b      	ldr	r3, [pc, #172]	; (5cb4 <__aeabi_dmul+0x1e0>)
    5c08:	2400      	movs	r4, #0
    5c0a:	1a1b      	subs	r3, r3, r0
    5c0c:	9302      	str	r3, [sp, #8]
    5c0e:	2500      	movs	r5, #0
    5c10:	e788      	b.n	5b24 <__aeabi_dmul+0x50>
    5c12:	465b      	mov	r3, fp
    5c14:	431e      	orrs	r6, r3
    5c16:	2303      	movs	r3, #3
    5c18:	2e00      	cmp	r6, #0
    5c1a:	d19c      	bne.n	5b56 <__aeabi_dmul+0x82>
    5c1c:	46b3      	mov	fp, r6
    5c1e:	2200      	movs	r2, #0
    5c20:	2302      	movs	r3, #2
    5c22:	e798      	b.n	5b56 <__aeabi_dmul+0x82>
    5c24:	465b      	mov	r3, fp
    5c26:	4333      	orrs	r3, r6
    5c28:	d021      	beq.n	5c6e <__aeabi_dmul+0x19a>
    5c2a:	4658      	mov	r0, fp
    5c2c:	2800      	cmp	r0, #0
    5c2e:	d100      	bne.n	5c32 <__aeabi_dmul+0x15e>
    5c30:	e14e      	b.n	5ed0 <__aeabi_dmul+0x3fc>
    5c32:	f000 fdd7 	bl	67e4 <__clzsi2>
    5c36:	2827      	cmp	r0, #39	; 0x27
    5c38:	dd00      	ble.n	5c3c <__aeabi_dmul+0x168>
    5c3a:	e142      	b.n	5ec2 <__aeabi_dmul+0x3ee>
    5c3c:	2128      	movs	r1, #40	; 0x28
    5c3e:	1a0f      	subs	r7, r1, r0
    5c40:	1c02      	adds	r2, r0, #0
    5c42:	1c31      	adds	r1, r6, #0
    5c44:	3a08      	subs	r2, #8
    5c46:	465b      	mov	r3, fp
    5c48:	40f9      	lsrs	r1, r7
    5c4a:	4093      	lsls	r3, r2
    5c4c:	1c0f      	adds	r7, r1, #0
    5c4e:	431f      	orrs	r7, r3
    5c50:	1c33      	adds	r3, r6, #0
    5c52:	4093      	lsls	r3, r2
    5c54:	46bb      	mov	fp, r7
    5c56:	1c1a      	adds	r2, r3, #0
    5c58:	4b16      	ldr	r3, [pc, #88]	; (5cb4 <__aeabi_dmul+0x1e0>)
    5c5a:	1a18      	subs	r0, r3, r0
    5c5c:	2300      	movs	r3, #0
    5c5e:	e77a      	b.n	5b56 <__aeabi_dmul+0x82>
    5c60:	2301      	movs	r3, #1
    5c62:	400b      	ands	r3, r1
    5c64:	2400      	movs	r4, #0
    5c66:	4699      	mov	r9, r3
    5c68:	46a0      	mov	r8, r4
    5c6a:	4b0e      	ldr	r3, [pc, #56]	; (5ca4 <__aeabi_dmul+0x1d0>)
    5c6c:	e797      	b.n	5b9e <__aeabi_dmul+0xca>
    5c6e:	2700      	movs	r7, #0
    5c70:	46bb      	mov	fp, r7
    5c72:	2200      	movs	r2, #0
    5c74:	2301      	movs	r3, #1
    5c76:	e76e      	b.n	5b56 <__aeabi_dmul+0x82>
    5c78:	2100      	movs	r1, #0
    5c7a:	2404      	movs	r4, #4
    5c7c:	468a      	mov	sl, r1
    5c7e:	4688      	mov	r8, r1
    5c80:	2501      	movs	r5, #1
    5c82:	e74f      	b.n	5b24 <__aeabi_dmul+0x50>
    5c84:	240c      	movs	r4, #12
    5c86:	2503      	movs	r5, #3
    5c88:	e74c      	b.n	5b24 <__aeabi_dmul+0x50>
    5c8a:	2500      	movs	r5, #0
    5c8c:	2480      	movs	r4, #128	; 0x80
    5c8e:	46a9      	mov	r9, r5
    5c90:	0324      	lsls	r4, r4, #12
    5c92:	46a8      	mov	r8, r5
    5c94:	4b03      	ldr	r3, [pc, #12]	; (5ca4 <__aeabi_dmul+0x1d0>)
    5c96:	e782      	b.n	5b9e <__aeabi_dmul+0xca>
    5c98:	46da      	mov	sl, fp
    5c9a:	4690      	mov	r8, r2
    5c9c:	9903      	ldr	r1, [sp, #12]
    5c9e:	1c1d      	adds	r5, r3, #0
    5ca0:	e76f      	b.n	5b82 <__aeabi_dmul+0xae>
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	000007ff 	.word	0x000007ff
    5ca8:	fffffc01 	.word	0xfffffc01
    5cac:	00007d00 	.word	0x00007d00
    5cb0:	800fffff 	.word	0x800fffff
    5cb4:	fffffc0d 	.word	0xfffffc0d
    5cb8:	9f02      	ldr	r7, [sp, #8]
    5cba:	0c16      	lsrs	r6, r2, #16
    5cbc:	1838      	adds	r0, r7, r0
    5cbe:	9004      	str	r0, [sp, #16]
    5cc0:	4640      	mov	r0, r8
    5cc2:	0c07      	lsrs	r7, r0, #16
    5cc4:	0400      	lsls	r0, r0, #16
    5cc6:	0c00      	lsrs	r0, r0, #16
    5cc8:	0412      	lsls	r2, r2, #16
    5cca:	0c12      	lsrs	r2, r2, #16
    5ccc:	1c03      	adds	r3, r0, #0
    5cce:	4353      	muls	r3, r2
    5cd0:	1c04      	adds	r4, r0, #0
    5cd2:	1c3d      	adds	r5, r7, #0
    5cd4:	4374      	muls	r4, r6
    5cd6:	4355      	muls	r5, r2
    5cd8:	4698      	mov	r8, r3
    5cda:	1c3b      	adds	r3, r7, #0
    5cdc:	4373      	muls	r3, r6
    5cde:	1964      	adds	r4, r4, r5
    5ce0:	46a4      	mov	ip, r4
    5ce2:	4644      	mov	r4, r8
    5ce4:	9302      	str	r3, [sp, #8]
    5ce6:	0c23      	lsrs	r3, r4, #16
    5ce8:	4463      	add	r3, ip
    5cea:	429d      	cmp	r5, r3
    5cec:	d904      	bls.n	5cf8 <__aeabi_dmul+0x224>
    5cee:	9d02      	ldr	r5, [sp, #8]
    5cf0:	2480      	movs	r4, #128	; 0x80
    5cf2:	0264      	lsls	r4, r4, #9
    5cf4:	192d      	adds	r5, r5, r4
    5cf6:	9502      	str	r5, [sp, #8]
    5cf8:	0c1d      	lsrs	r5, r3, #16
    5cfa:	9503      	str	r5, [sp, #12]
    5cfc:	4645      	mov	r5, r8
    5cfe:	042c      	lsls	r4, r5, #16
    5d00:	041b      	lsls	r3, r3, #16
    5d02:	0c24      	lsrs	r4, r4, #16
    5d04:	191c      	adds	r4, r3, r4
    5d06:	9405      	str	r4, [sp, #20]
    5d08:	465c      	mov	r4, fp
    5d0a:	0c23      	lsrs	r3, r4, #16
    5d0c:	1c05      	adds	r5, r0, #0
    5d0e:	4358      	muls	r0, r3
    5d10:	0424      	lsls	r4, r4, #16
    5d12:	0c24      	lsrs	r4, r4, #16
    5d14:	4684      	mov	ip, r0
    5d16:	1c38      	adds	r0, r7, #0
    5d18:	4360      	muls	r0, r4
    5d1a:	4365      	muls	r5, r4
    5d1c:	435f      	muls	r7, r3
    5d1e:	4681      	mov	r9, r0
    5d20:	44cc      	add	ip, r9
    5d22:	0c28      	lsrs	r0, r5, #16
    5d24:	4460      	add	r0, ip
    5d26:	46bb      	mov	fp, r7
    5d28:	4581      	cmp	r9, r0
    5d2a:	d902      	bls.n	5d32 <__aeabi_dmul+0x25e>
    5d2c:	2780      	movs	r7, #128	; 0x80
    5d2e:	027f      	lsls	r7, r7, #9
    5d30:	44bb      	add	fp, r7
    5d32:	042d      	lsls	r5, r5, #16
    5d34:	0c07      	lsrs	r7, r0, #16
    5d36:	0c2d      	lsrs	r5, r5, #16
    5d38:	0400      	lsls	r0, r0, #16
    5d3a:	1940      	adds	r0, r0, r5
    5d3c:	4655      	mov	r5, sl
    5d3e:	46bc      	mov	ip, r7
    5d40:	042f      	lsls	r7, r5, #16
    5d42:	44e3      	add	fp, ip
    5d44:	4684      	mov	ip, r0
    5d46:	0c28      	lsrs	r0, r5, #16
    5d48:	0c3d      	lsrs	r5, r7, #16
    5d4a:	1c2f      	adds	r7, r5, #0
    5d4c:	4357      	muls	r7, r2
    5d4e:	46b8      	mov	r8, r7
    5d50:	1c2f      	adds	r7, r5, #0
    5d52:	4377      	muls	r7, r6
    5d54:	4342      	muls	r2, r0
    5d56:	46b9      	mov	r9, r7
    5d58:	4647      	mov	r7, r8
    5d5a:	0c3f      	lsrs	r7, r7, #16
    5d5c:	4491      	add	r9, r2
    5d5e:	46ba      	mov	sl, r7
    5d60:	44d1      	add	r9, sl
    5d62:	4346      	muls	r6, r0
    5d64:	454a      	cmp	r2, r9
    5d66:	d902      	bls.n	5d6e <__aeabi_dmul+0x29a>
    5d68:	2280      	movs	r2, #128	; 0x80
    5d6a:	0252      	lsls	r2, r2, #9
    5d6c:	18b6      	adds	r6, r6, r2
    5d6e:	464f      	mov	r7, r9
    5d70:	0c3a      	lsrs	r2, r7, #16
    5d72:	18b6      	adds	r6, r6, r2
    5d74:	043a      	lsls	r2, r7, #16
    5d76:	4647      	mov	r7, r8
    5d78:	043f      	lsls	r7, r7, #16
    5d7a:	0c3f      	lsrs	r7, r7, #16
    5d7c:	46b8      	mov	r8, r7
    5d7e:	1c2f      	adds	r7, r5, #0
    5d80:	4367      	muls	r7, r4
    5d82:	435d      	muls	r5, r3
    5d84:	4344      	muls	r4, r0
    5d86:	4358      	muls	r0, r3
    5d88:	1965      	adds	r5, r4, r5
    5d8a:	9001      	str	r0, [sp, #4]
    5d8c:	0c38      	lsrs	r0, r7, #16
    5d8e:	182d      	adds	r5, r5, r0
    5d90:	4442      	add	r2, r8
    5d92:	46b8      	mov	r8, r7
    5d94:	42ac      	cmp	r4, r5
    5d96:	d904      	bls.n	5da2 <__aeabi_dmul+0x2ce>
    5d98:	9801      	ldr	r0, [sp, #4]
    5d9a:	2380      	movs	r3, #128	; 0x80
    5d9c:	025b      	lsls	r3, r3, #9
    5d9e:	18c0      	adds	r0, r0, r3
    5da0:	9001      	str	r0, [sp, #4]
    5da2:	9c03      	ldr	r4, [sp, #12]
    5da4:	9f02      	ldr	r7, [sp, #8]
    5da6:	1c20      	adds	r0, r4, #0
    5da8:	4460      	add	r0, ip
    5daa:	19c0      	adds	r0, r0, r7
    5dac:	4560      	cmp	r0, ip
    5dae:	41a4      	sbcs	r4, r4
    5db0:	4647      	mov	r7, r8
    5db2:	4264      	negs	r4, r4
    5db4:	46a4      	mov	ip, r4
    5db6:	042b      	lsls	r3, r5, #16
    5db8:	043c      	lsls	r4, r7, #16
    5dba:	4699      	mov	r9, r3
    5dbc:	0c24      	lsrs	r4, r4, #16
    5dbe:	444c      	add	r4, r9
    5dc0:	46a0      	mov	r8, r4
    5dc2:	44d8      	add	r8, fp
    5dc4:	1880      	adds	r0, r0, r2
    5dc6:	46c2      	mov	sl, r8
    5dc8:	44e2      	add	sl, ip
    5dca:	4290      	cmp	r0, r2
    5dcc:	4192      	sbcs	r2, r2
    5dce:	4657      	mov	r7, sl
    5dd0:	4252      	negs	r2, r2
    5dd2:	4691      	mov	r9, r2
    5dd4:	19f2      	adds	r2, r6, r7
    5dd6:	45e2      	cmp	sl, ip
    5dd8:	41bf      	sbcs	r7, r7
    5dda:	427f      	negs	r7, r7
    5ddc:	464b      	mov	r3, r9
    5dde:	46bc      	mov	ip, r7
    5de0:	45d8      	cmp	r8, fp
    5de2:	41bf      	sbcs	r7, r7
    5de4:	18d4      	adds	r4, r2, r3
    5de6:	427f      	negs	r7, r7
    5de8:	4663      	mov	r3, ip
    5dea:	431f      	orrs	r7, r3
    5dec:	0c2d      	lsrs	r5, r5, #16
    5dee:	197f      	adds	r7, r7, r5
    5df0:	42b2      	cmp	r2, r6
    5df2:	4192      	sbcs	r2, r2
    5df4:	454c      	cmp	r4, r9
    5df6:	41ad      	sbcs	r5, r5
    5df8:	4252      	negs	r2, r2
    5dfa:	426d      	negs	r5, r5
    5dfc:	4315      	orrs	r5, r2
    5dfe:	9e01      	ldr	r6, [sp, #4]
    5e00:	197d      	adds	r5, r7, r5
    5e02:	19ab      	adds	r3, r5, r6
    5e04:	0de2      	lsrs	r2, r4, #23
    5e06:	025b      	lsls	r3, r3, #9
    5e08:	9f05      	ldr	r7, [sp, #20]
    5e0a:	4313      	orrs	r3, r2
    5e0c:	0242      	lsls	r2, r0, #9
    5e0e:	433a      	orrs	r2, r7
    5e10:	469a      	mov	sl, r3
    5e12:	1e53      	subs	r3, r2, #1
    5e14:	419a      	sbcs	r2, r3
    5e16:	0dc3      	lsrs	r3, r0, #23
    5e18:	1c10      	adds	r0, r2, #0
    5e1a:	4318      	orrs	r0, r3
    5e1c:	0264      	lsls	r4, r4, #9
    5e1e:	4320      	orrs	r0, r4
    5e20:	4680      	mov	r8, r0
    5e22:	4650      	mov	r0, sl
    5e24:	01c0      	lsls	r0, r0, #7
    5e26:	d50d      	bpl.n	5e44 <__aeabi_dmul+0x370>
    5e28:	4645      	mov	r5, r8
    5e2a:	2201      	movs	r2, #1
    5e2c:	4656      	mov	r6, sl
    5e2e:	9c04      	ldr	r4, [sp, #16]
    5e30:	086b      	lsrs	r3, r5, #1
    5e32:	402a      	ands	r2, r5
    5e34:	431a      	orrs	r2, r3
    5e36:	07f3      	lsls	r3, r6, #31
    5e38:	3401      	adds	r4, #1
    5e3a:	431a      	orrs	r2, r3
    5e3c:	0876      	lsrs	r6, r6, #1
    5e3e:	9404      	str	r4, [sp, #16]
    5e40:	4690      	mov	r8, r2
    5e42:	46b2      	mov	sl, r6
    5e44:	9e04      	ldr	r6, [sp, #16]
    5e46:	4f63      	ldr	r7, [pc, #396]	; (5fd4 <__aeabi_dmul+0x500>)
    5e48:	19f3      	adds	r3, r6, r7
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	dd61      	ble.n	5f12 <__aeabi_dmul+0x43e>
    5e4e:	4640      	mov	r0, r8
    5e50:	0740      	lsls	r0, r0, #29
    5e52:	d00b      	beq.n	5e6c <__aeabi_dmul+0x398>
    5e54:	220f      	movs	r2, #15
    5e56:	4644      	mov	r4, r8
    5e58:	4022      	ands	r2, r4
    5e5a:	2a04      	cmp	r2, #4
    5e5c:	d006      	beq.n	5e6c <__aeabi_dmul+0x398>
    5e5e:	4642      	mov	r2, r8
    5e60:	3204      	adds	r2, #4
    5e62:	4542      	cmp	r2, r8
    5e64:	4180      	sbcs	r0, r0
    5e66:	4240      	negs	r0, r0
    5e68:	4482      	add	sl, r0
    5e6a:	4690      	mov	r8, r2
    5e6c:	4655      	mov	r5, sl
    5e6e:	01ed      	lsls	r5, r5, #7
    5e70:	d507      	bpl.n	5e82 <__aeabi_dmul+0x3ae>
    5e72:	4b59      	ldr	r3, [pc, #356]	; (5fd8 <__aeabi_dmul+0x504>)
    5e74:	4656      	mov	r6, sl
    5e76:	9f04      	ldr	r7, [sp, #16]
    5e78:	2080      	movs	r0, #128	; 0x80
    5e7a:	401e      	ands	r6, r3
    5e7c:	00c0      	lsls	r0, r0, #3
    5e7e:	46b2      	mov	sl, r6
    5e80:	183b      	adds	r3, r7, r0
    5e82:	4a56      	ldr	r2, [pc, #344]	; (5fdc <__aeabi_dmul+0x508>)
    5e84:	4293      	cmp	r3, r2
    5e86:	dd00      	ble.n	5e8a <__aeabi_dmul+0x3b6>
    5e88:	e6ea      	b.n	5c60 <__aeabi_dmul+0x18c>
    5e8a:	4644      	mov	r4, r8
    5e8c:	4655      	mov	r5, sl
    5e8e:	08e2      	lsrs	r2, r4, #3
    5e90:	0768      	lsls	r0, r5, #29
    5e92:	4310      	orrs	r0, r2
    5e94:	2201      	movs	r2, #1
    5e96:	026c      	lsls	r4, r5, #9
    5e98:	055b      	lsls	r3, r3, #21
    5e9a:	400a      	ands	r2, r1
    5e9c:	4680      	mov	r8, r0
    5e9e:	0b24      	lsrs	r4, r4, #12
    5ea0:	0d5b      	lsrs	r3, r3, #21
    5ea2:	4691      	mov	r9, r2
    5ea4:	e67b      	b.n	5b9e <__aeabi_dmul+0xca>
    5ea6:	46da      	mov	sl, fp
    5ea8:	4690      	mov	r8, r2
    5eaa:	1c1d      	adds	r5, r3, #0
    5eac:	e669      	b.n	5b82 <__aeabi_dmul+0xae>
    5eae:	2480      	movs	r4, #128	; 0x80
    5eb0:	0324      	lsls	r4, r4, #12
    5eb2:	4657      	mov	r7, sl
    5eb4:	4227      	tst	r7, r4
    5eb6:	d11c      	bne.n	5ef2 <__aeabi_dmul+0x41e>
    5eb8:	433c      	orrs	r4, r7
    5eba:	0324      	lsls	r4, r4, #12
    5ebc:	0b24      	lsrs	r4, r4, #12
    5ebe:	4b48      	ldr	r3, [pc, #288]	; (5fe0 <__aeabi_dmul+0x50c>)
    5ec0:	e66d      	b.n	5b9e <__aeabi_dmul+0xca>
    5ec2:	1c03      	adds	r3, r0, #0
    5ec4:	3b28      	subs	r3, #40	; 0x28
    5ec6:	1c31      	adds	r1, r6, #0
    5ec8:	4099      	lsls	r1, r3
    5eca:	468b      	mov	fp, r1
    5ecc:	2200      	movs	r2, #0
    5ece:	e6c3      	b.n	5c58 <__aeabi_dmul+0x184>
    5ed0:	1c30      	adds	r0, r6, #0
    5ed2:	f000 fc87 	bl	67e4 <__clzsi2>
    5ed6:	3020      	adds	r0, #32
    5ed8:	e6ad      	b.n	5c36 <__aeabi_dmul+0x162>
    5eda:	3b28      	subs	r3, #40	; 0x28
    5edc:	1c21      	adds	r1, r4, #0
    5ede:	4099      	lsls	r1, r3
    5ee0:	2200      	movs	r2, #0
    5ee2:	468a      	mov	sl, r1
    5ee4:	4690      	mov	r8, r2
    5ee6:	e68e      	b.n	5c06 <__aeabi_dmul+0x132>
    5ee8:	1c20      	adds	r0, r4, #0
    5eea:	f000 fc7b 	bl	67e4 <__clzsi2>
    5eee:	3020      	adds	r0, #32
    5ef0:	e678      	b.n	5be4 <__aeabi_dmul+0x110>
    5ef2:	4658      	mov	r0, fp
    5ef4:	4220      	tst	r0, r4
    5ef6:	d107      	bne.n	5f08 <__aeabi_dmul+0x434>
    5ef8:	4304      	orrs	r4, r0
    5efa:	9903      	ldr	r1, [sp, #12]
    5efc:	0324      	lsls	r4, r4, #12
    5efe:	0b24      	lsrs	r4, r4, #12
    5f00:	4689      	mov	r9, r1
    5f02:	4690      	mov	r8, r2
    5f04:	4b36      	ldr	r3, [pc, #216]	; (5fe0 <__aeabi_dmul+0x50c>)
    5f06:	e64a      	b.n	5b9e <__aeabi_dmul+0xca>
    5f08:	433c      	orrs	r4, r7
    5f0a:	0324      	lsls	r4, r4, #12
    5f0c:	0b24      	lsrs	r4, r4, #12
    5f0e:	4b34      	ldr	r3, [pc, #208]	; (5fe0 <__aeabi_dmul+0x50c>)
    5f10:	e645      	b.n	5b9e <__aeabi_dmul+0xca>
    5f12:	4b34      	ldr	r3, [pc, #208]	; (5fe4 <__aeabi_dmul+0x510>)
    5f14:	9e04      	ldr	r6, [sp, #16]
    5f16:	1b9b      	subs	r3, r3, r6
    5f18:	2b38      	cmp	r3, #56	; 0x38
    5f1a:	dd06      	ble.n	5f2a <__aeabi_dmul+0x456>
    5f1c:	2301      	movs	r3, #1
    5f1e:	400b      	ands	r3, r1
    5f20:	2400      	movs	r4, #0
    5f22:	4699      	mov	r9, r3
    5f24:	46a0      	mov	r8, r4
    5f26:	2300      	movs	r3, #0
    5f28:	e639      	b.n	5b9e <__aeabi_dmul+0xca>
    5f2a:	2b1f      	cmp	r3, #31
    5f2c:	dc25      	bgt.n	5f7a <__aeabi_dmul+0x4a6>
    5f2e:	9c04      	ldr	r4, [sp, #16]
    5f30:	4d2d      	ldr	r5, [pc, #180]	; (5fe8 <__aeabi_dmul+0x514>)
    5f32:	4646      	mov	r6, r8
    5f34:	1960      	adds	r0, r4, r5
    5f36:	4652      	mov	r2, sl
    5f38:	4644      	mov	r4, r8
    5f3a:	4086      	lsls	r6, r0
    5f3c:	40dc      	lsrs	r4, r3
    5f3e:	4082      	lsls	r2, r0
    5f40:	4657      	mov	r7, sl
    5f42:	1c30      	adds	r0, r6, #0
    5f44:	4322      	orrs	r2, r4
    5f46:	40df      	lsrs	r7, r3
    5f48:	1e44      	subs	r4, r0, #1
    5f4a:	41a0      	sbcs	r0, r4
    5f4c:	4302      	orrs	r2, r0
    5f4e:	1c3b      	adds	r3, r7, #0
    5f50:	0754      	lsls	r4, r2, #29
    5f52:	d009      	beq.n	5f68 <__aeabi_dmul+0x494>
    5f54:	200f      	movs	r0, #15
    5f56:	4010      	ands	r0, r2
    5f58:	2804      	cmp	r0, #4
    5f5a:	d005      	beq.n	5f68 <__aeabi_dmul+0x494>
    5f5c:	1d10      	adds	r0, r2, #4
    5f5e:	4290      	cmp	r0, r2
    5f60:	4192      	sbcs	r2, r2
    5f62:	4252      	negs	r2, r2
    5f64:	189b      	adds	r3, r3, r2
    5f66:	1c02      	adds	r2, r0, #0
    5f68:	021d      	lsls	r5, r3, #8
    5f6a:	d51a      	bpl.n	5fa2 <__aeabi_dmul+0x4ce>
    5f6c:	2301      	movs	r3, #1
    5f6e:	400b      	ands	r3, r1
    5f70:	2400      	movs	r4, #0
    5f72:	4699      	mov	r9, r3
    5f74:	46a0      	mov	r8, r4
    5f76:	2301      	movs	r3, #1
    5f78:	e611      	b.n	5b9e <__aeabi_dmul+0xca>
    5f7a:	481c      	ldr	r0, [pc, #112]	; (5fec <__aeabi_dmul+0x518>)
    5f7c:	9c04      	ldr	r4, [sp, #16]
    5f7e:	4655      	mov	r5, sl
    5f80:	1b00      	subs	r0, r0, r4
    5f82:	40c5      	lsrs	r5, r0
    5f84:	1c28      	adds	r0, r5, #0
    5f86:	2b20      	cmp	r3, #32
    5f88:	d016      	beq.n	5fb8 <__aeabi_dmul+0x4e4>
    5f8a:	4e19      	ldr	r6, [pc, #100]	; (5ff0 <__aeabi_dmul+0x51c>)
    5f8c:	4657      	mov	r7, sl
    5f8e:	19a2      	adds	r2, r4, r6
    5f90:	4097      	lsls	r7, r2
    5f92:	1c3a      	adds	r2, r7, #0
    5f94:	4643      	mov	r3, r8
    5f96:	431a      	orrs	r2, r3
    5f98:	1e53      	subs	r3, r2, #1
    5f9a:	419a      	sbcs	r2, r3
    5f9c:	4302      	orrs	r2, r0
    5f9e:	2300      	movs	r3, #0
    5fa0:	e7d6      	b.n	5f50 <__aeabi_dmul+0x47c>
    5fa2:	0758      	lsls	r0, r3, #29
    5fa4:	025b      	lsls	r3, r3, #9
    5fa6:	08d2      	lsrs	r2, r2, #3
    5fa8:	0b1c      	lsrs	r4, r3, #12
    5faa:	2301      	movs	r3, #1
    5fac:	400b      	ands	r3, r1
    5fae:	4310      	orrs	r0, r2
    5fb0:	4699      	mov	r9, r3
    5fb2:	4680      	mov	r8, r0
    5fb4:	2300      	movs	r3, #0
    5fb6:	e5f2      	b.n	5b9e <__aeabi_dmul+0xca>
    5fb8:	2200      	movs	r2, #0
    5fba:	e7eb      	b.n	5f94 <__aeabi_dmul+0x4c0>
    5fbc:	2480      	movs	r4, #128	; 0x80
    5fbe:	0324      	lsls	r4, r4, #12
    5fc0:	4650      	mov	r0, sl
    5fc2:	2301      	movs	r3, #1
    5fc4:	4304      	orrs	r4, r0
    5fc6:	4019      	ands	r1, r3
    5fc8:	0324      	lsls	r4, r4, #12
    5fca:	0b24      	lsrs	r4, r4, #12
    5fcc:	4689      	mov	r9, r1
    5fce:	4b04      	ldr	r3, [pc, #16]	; (5fe0 <__aeabi_dmul+0x50c>)
    5fd0:	e5e5      	b.n	5b9e <__aeabi_dmul+0xca>
    5fd2:	46c0      	nop			; (mov r8, r8)
    5fd4:	000003ff 	.word	0x000003ff
    5fd8:	feffffff 	.word	0xfeffffff
    5fdc:	000007fe 	.word	0x000007fe
    5fe0:	000007ff 	.word	0x000007ff
    5fe4:	fffffc02 	.word	0xfffffc02
    5fe8:	0000041e 	.word	0x0000041e
    5fec:	fffffbe2 	.word	0xfffffbe2
    5ff0:	0000043e 	.word	0x0000043e

00005ff4 <__aeabi_dsub>:
    5ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ff6:	465f      	mov	r7, fp
    5ff8:	4656      	mov	r6, sl
    5ffa:	4644      	mov	r4, r8
    5ffc:	464d      	mov	r5, r9
    5ffe:	b4f0      	push	{r4, r5, r6, r7}
    6000:	030c      	lsls	r4, r1, #12
    6002:	004d      	lsls	r5, r1, #1
    6004:	0fcf      	lsrs	r7, r1, #31
    6006:	0a61      	lsrs	r1, r4, #9
    6008:	0f44      	lsrs	r4, r0, #29
    600a:	4321      	orrs	r1, r4
    600c:	00c4      	lsls	r4, r0, #3
    600e:	0318      	lsls	r0, r3, #12
    6010:	0fde      	lsrs	r6, r3, #31
    6012:	4680      	mov	r8, r0
    6014:	46b4      	mov	ip, r6
    6016:	4646      	mov	r6, r8
    6018:	0058      	lsls	r0, r3, #1
    601a:	0a76      	lsrs	r6, r6, #9
    601c:	0f53      	lsrs	r3, r2, #29
    601e:	4333      	orrs	r3, r6
    6020:	00d6      	lsls	r6, r2, #3
    6022:	4ad1      	ldr	r2, [pc, #836]	; (6368 <__aeabi_dsub+0x374>)
    6024:	0d6d      	lsrs	r5, r5, #21
    6026:	46ba      	mov	sl, r7
    6028:	0d40      	lsrs	r0, r0, #21
    602a:	46b3      	mov	fp, r6
    602c:	4290      	cmp	r0, r2
    602e:	d100      	bne.n	6032 <__aeabi_dsub+0x3e>
    6030:	e0f5      	b.n	621e <__aeabi_dsub+0x22a>
    6032:	4662      	mov	r2, ip
    6034:	2601      	movs	r6, #1
    6036:	4072      	eors	r2, r6
    6038:	4694      	mov	ip, r2
    603a:	4567      	cmp	r7, ip
    603c:	d100      	bne.n	6040 <__aeabi_dsub+0x4c>
    603e:	e0ab      	b.n	6198 <__aeabi_dsub+0x1a4>
    6040:	1a2f      	subs	r7, r5, r0
    6042:	2f00      	cmp	r7, #0
    6044:	dc00      	bgt.n	6048 <__aeabi_dsub+0x54>
    6046:	e111      	b.n	626c <__aeabi_dsub+0x278>
    6048:	2800      	cmp	r0, #0
    604a:	d13e      	bne.n	60ca <__aeabi_dsub+0xd6>
    604c:	4658      	mov	r0, fp
    604e:	4318      	orrs	r0, r3
    6050:	d000      	beq.n	6054 <__aeabi_dsub+0x60>
    6052:	e0f1      	b.n	6238 <__aeabi_dsub+0x244>
    6054:	0760      	lsls	r0, r4, #29
    6056:	d100      	bne.n	605a <__aeabi_dsub+0x66>
    6058:	e097      	b.n	618a <__aeabi_dsub+0x196>
    605a:	230f      	movs	r3, #15
    605c:	4023      	ands	r3, r4
    605e:	2b04      	cmp	r3, #4
    6060:	d100      	bne.n	6064 <__aeabi_dsub+0x70>
    6062:	e122      	b.n	62aa <__aeabi_dsub+0x2b6>
    6064:	1d22      	adds	r2, r4, #4
    6066:	42a2      	cmp	r2, r4
    6068:	41a4      	sbcs	r4, r4
    606a:	4264      	negs	r4, r4
    606c:	2380      	movs	r3, #128	; 0x80
    606e:	1909      	adds	r1, r1, r4
    6070:	041b      	lsls	r3, r3, #16
    6072:	2701      	movs	r7, #1
    6074:	4650      	mov	r0, sl
    6076:	400b      	ands	r3, r1
    6078:	4007      	ands	r7, r0
    607a:	1c14      	adds	r4, r2, #0
    607c:	2b00      	cmp	r3, #0
    607e:	d100      	bne.n	6082 <__aeabi_dsub+0x8e>
    6080:	e079      	b.n	6176 <__aeabi_dsub+0x182>
    6082:	4bb9      	ldr	r3, [pc, #740]	; (6368 <__aeabi_dsub+0x374>)
    6084:	3501      	adds	r5, #1
    6086:	429d      	cmp	r5, r3
    6088:	d100      	bne.n	608c <__aeabi_dsub+0x98>
    608a:	e10b      	b.n	62a4 <__aeabi_dsub+0x2b0>
    608c:	4bb7      	ldr	r3, [pc, #732]	; (636c <__aeabi_dsub+0x378>)
    608e:	08e4      	lsrs	r4, r4, #3
    6090:	4019      	ands	r1, r3
    6092:	0748      	lsls	r0, r1, #29
    6094:	0249      	lsls	r1, r1, #9
    6096:	4304      	orrs	r4, r0
    6098:	0b0b      	lsrs	r3, r1, #12
    609a:	2000      	movs	r0, #0
    609c:	2100      	movs	r1, #0
    609e:	031b      	lsls	r3, r3, #12
    60a0:	0b1a      	lsrs	r2, r3, #12
    60a2:	0d0b      	lsrs	r3, r1, #20
    60a4:	056d      	lsls	r5, r5, #21
    60a6:	051b      	lsls	r3, r3, #20
    60a8:	4313      	orrs	r3, r2
    60aa:	086a      	lsrs	r2, r5, #1
    60ac:	4db0      	ldr	r5, [pc, #704]	; (6370 <__aeabi_dsub+0x37c>)
    60ae:	07ff      	lsls	r7, r7, #31
    60b0:	401d      	ands	r5, r3
    60b2:	4315      	orrs	r5, r2
    60b4:	006d      	lsls	r5, r5, #1
    60b6:	086d      	lsrs	r5, r5, #1
    60b8:	1c29      	adds	r1, r5, #0
    60ba:	4339      	orrs	r1, r7
    60bc:	1c20      	adds	r0, r4, #0
    60be:	bc3c      	pop	{r2, r3, r4, r5}
    60c0:	4690      	mov	r8, r2
    60c2:	4699      	mov	r9, r3
    60c4:	46a2      	mov	sl, r4
    60c6:	46ab      	mov	fp, r5
    60c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60ca:	48a7      	ldr	r0, [pc, #668]	; (6368 <__aeabi_dsub+0x374>)
    60cc:	4285      	cmp	r5, r0
    60ce:	d0c1      	beq.n	6054 <__aeabi_dsub+0x60>
    60d0:	2080      	movs	r0, #128	; 0x80
    60d2:	0400      	lsls	r0, r0, #16
    60d4:	4303      	orrs	r3, r0
    60d6:	2f38      	cmp	r7, #56	; 0x38
    60d8:	dd00      	ble.n	60dc <__aeabi_dsub+0xe8>
    60da:	e0fd      	b.n	62d8 <__aeabi_dsub+0x2e4>
    60dc:	2f1f      	cmp	r7, #31
    60de:	dd00      	ble.n	60e2 <__aeabi_dsub+0xee>
    60e0:	e131      	b.n	6346 <__aeabi_dsub+0x352>
    60e2:	2020      	movs	r0, #32
    60e4:	1bc0      	subs	r0, r0, r7
    60e6:	1c1a      	adds	r2, r3, #0
    60e8:	465e      	mov	r6, fp
    60ea:	4082      	lsls	r2, r0
    60ec:	40fe      	lsrs	r6, r7
    60ee:	4332      	orrs	r2, r6
    60f0:	4694      	mov	ip, r2
    60f2:	465a      	mov	r2, fp
    60f4:	4082      	lsls	r2, r0
    60f6:	1c10      	adds	r0, r2, #0
    60f8:	1e42      	subs	r2, r0, #1
    60fa:	4190      	sbcs	r0, r2
    60fc:	40fb      	lsrs	r3, r7
    60fe:	4662      	mov	r2, ip
    6100:	4302      	orrs	r2, r0
    6102:	1c1f      	adds	r7, r3, #0
    6104:	1aa2      	subs	r2, r4, r2
    6106:	4294      	cmp	r4, r2
    6108:	41a4      	sbcs	r4, r4
    610a:	4264      	negs	r4, r4
    610c:	1bc9      	subs	r1, r1, r7
    610e:	1b09      	subs	r1, r1, r4
    6110:	1c14      	adds	r4, r2, #0
    6112:	020a      	lsls	r2, r1, #8
    6114:	d59e      	bpl.n	6054 <__aeabi_dsub+0x60>
    6116:	0249      	lsls	r1, r1, #9
    6118:	0a4f      	lsrs	r7, r1, #9
    611a:	2f00      	cmp	r7, #0
    611c:	d100      	bne.n	6120 <__aeabi_dsub+0x12c>
    611e:	e0d6      	b.n	62ce <__aeabi_dsub+0x2da>
    6120:	1c38      	adds	r0, r7, #0
    6122:	f000 fb5f 	bl	67e4 <__clzsi2>
    6126:	1c02      	adds	r2, r0, #0
    6128:	3a08      	subs	r2, #8
    612a:	2a1f      	cmp	r2, #31
    612c:	dd00      	ble.n	6130 <__aeabi_dsub+0x13c>
    612e:	e0c3      	b.n	62b8 <__aeabi_dsub+0x2c4>
    6130:	2128      	movs	r1, #40	; 0x28
    6132:	1c23      	adds	r3, r4, #0
    6134:	1a09      	subs	r1, r1, r0
    6136:	4097      	lsls	r7, r2
    6138:	40cb      	lsrs	r3, r1
    613a:	431f      	orrs	r7, r3
    613c:	4094      	lsls	r4, r2
    613e:	4295      	cmp	r5, r2
    6140:	dd00      	ble.n	6144 <__aeabi_dsub+0x150>
    6142:	e0c0      	b.n	62c6 <__aeabi_dsub+0x2d2>
    6144:	1b55      	subs	r5, r2, r5
    6146:	1c69      	adds	r1, r5, #1
    6148:	291f      	cmp	r1, #31
    614a:	dd00      	ble.n	614e <__aeabi_dsub+0x15a>
    614c:	e0ea      	b.n	6324 <__aeabi_dsub+0x330>
    614e:	221f      	movs	r2, #31
    6150:	1b55      	subs	r5, r2, r5
    6152:	1c3b      	adds	r3, r7, #0
    6154:	1c22      	adds	r2, r4, #0
    6156:	40ab      	lsls	r3, r5
    6158:	40ca      	lsrs	r2, r1
    615a:	40ac      	lsls	r4, r5
    615c:	1e65      	subs	r5, r4, #1
    615e:	41ac      	sbcs	r4, r5
    6160:	4313      	orrs	r3, r2
    6162:	40cf      	lsrs	r7, r1
    6164:	431c      	orrs	r4, r3
    6166:	1c39      	adds	r1, r7, #0
    6168:	2500      	movs	r5, #0
    616a:	e773      	b.n	6054 <__aeabi_dsub+0x60>
    616c:	2180      	movs	r1, #128	; 0x80
    616e:	4d7e      	ldr	r5, [pc, #504]	; (6368 <__aeabi_dsub+0x374>)
    6170:	2700      	movs	r7, #0
    6172:	03c9      	lsls	r1, r1, #15
    6174:	2400      	movs	r4, #0
    6176:	4b7c      	ldr	r3, [pc, #496]	; (6368 <__aeabi_dsub+0x374>)
    6178:	0748      	lsls	r0, r1, #29
    617a:	08e4      	lsrs	r4, r4, #3
    617c:	4304      	orrs	r4, r0
    617e:	08c9      	lsrs	r1, r1, #3
    6180:	429d      	cmp	r5, r3
    6182:	d050      	beq.n	6226 <__aeabi_dsub+0x232>
    6184:	0309      	lsls	r1, r1, #12
    6186:	0b0b      	lsrs	r3, r1, #12
    6188:	e787      	b.n	609a <__aeabi_dsub+0xa6>
    618a:	2380      	movs	r3, #128	; 0x80
    618c:	041b      	lsls	r3, r3, #16
    618e:	2701      	movs	r7, #1
    6190:	4652      	mov	r2, sl
    6192:	400b      	ands	r3, r1
    6194:	4017      	ands	r7, r2
    6196:	e771      	b.n	607c <__aeabi_dsub+0x88>
    6198:	1a2a      	subs	r2, r5, r0
    619a:	4694      	mov	ip, r2
    619c:	2a00      	cmp	r2, #0
    619e:	dc00      	bgt.n	61a2 <__aeabi_dsub+0x1ae>
    61a0:	e0a1      	b.n	62e6 <__aeabi_dsub+0x2f2>
    61a2:	2800      	cmp	r0, #0
    61a4:	d054      	beq.n	6250 <__aeabi_dsub+0x25c>
    61a6:	4870      	ldr	r0, [pc, #448]	; (6368 <__aeabi_dsub+0x374>)
    61a8:	4285      	cmp	r5, r0
    61aa:	d100      	bne.n	61ae <__aeabi_dsub+0x1ba>
    61ac:	e752      	b.n	6054 <__aeabi_dsub+0x60>
    61ae:	2080      	movs	r0, #128	; 0x80
    61b0:	0400      	lsls	r0, r0, #16
    61b2:	4303      	orrs	r3, r0
    61b4:	4660      	mov	r0, ip
    61b6:	2838      	cmp	r0, #56	; 0x38
    61b8:	dd00      	ble.n	61bc <__aeabi_dsub+0x1c8>
    61ba:	e10e      	b.n	63da <__aeabi_dsub+0x3e6>
    61bc:	281f      	cmp	r0, #31
    61be:	dd00      	ble.n	61c2 <__aeabi_dsub+0x1ce>
    61c0:	e157      	b.n	6472 <__aeabi_dsub+0x47e>
    61c2:	4662      	mov	r2, ip
    61c4:	2020      	movs	r0, #32
    61c6:	1a80      	subs	r0, r0, r2
    61c8:	1c1e      	adds	r6, r3, #0
    61ca:	4086      	lsls	r6, r0
    61cc:	46b1      	mov	r9, r6
    61ce:	465e      	mov	r6, fp
    61d0:	40d6      	lsrs	r6, r2
    61d2:	464a      	mov	r2, r9
    61d4:	4332      	orrs	r2, r6
    61d6:	465e      	mov	r6, fp
    61d8:	4086      	lsls	r6, r0
    61da:	4690      	mov	r8, r2
    61dc:	1c30      	adds	r0, r6, #0
    61de:	1e42      	subs	r2, r0, #1
    61e0:	4190      	sbcs	r0, r2
    61e2:	4642      	mov	r2, r8
    61e4:	4302      	orrs	r2, r0
    61e6:	4660      	mov	r0, ip
    61e8:	40c3      	lsrs	r3, r0
    61ea:	1912      	adds	r2, r2, r4
    61ec:	42a2      	cmp	r2, r4
    61ee:	41a4      	sbcs	r4, r4
    61f0:	4264      	negs	r4, r4
    61f2:	1859      	adds	r1, r3, r1
    61f4:	1909      	adds	r1, r1, r4
    61f6:	1c14      	adds	r4, r2, #0
    61f8:	0208      	lsls	r0, r1, #8
    61fa:	d400      	bmi.n	61fe <__aeabi_dsub+0x20a>
    61fc:	e72a      	b.n	6054 <__aeabi_dsub+0x60>
    61fe:	4b5a      	ldr	r3, [pc, #360]	; (6368 <__aeabi_dsub+0x374>)
    6200:	3501      	adds	r5, #1
    6202:	429d      	cmp	r5, r3
    6204:	d100      	bne.n	6208 <__aeabi_dsub+0x214>
    6206:	e131      	b.n	646c <__aeabi_dsub+0x478>
    6208:	4b58      	ldr	r3, [pc, #352]	; (636c <__aeabi_dsub+0x378>)
    620a:	0860      	lsrs	r0, r4, #1
    620c:	4019      	ands	r1, r3
    620e:	2301      	movs	r3, #1
    6210:	4023      	ands	r3, r4
    6212:	1c1c      	adds	r4, r3, #0
    6214:	4304      	orrs	r4, r0
    6216:	07cb      	lsls	r3, r1, #31
    6218:	431c      	orrs	r4, r3
    621a:	0849      	lsrs	r1, r1, #1
    621c:	e71a      	b.n	6054 <__aeabi_dsub+0x60>
    621e:	431e      	orrs	r6, r3
    6220:	d000      	beq.n	6224 <__aeabi_dsub+0x230>
    6222:	e70a      	b.n	603a <__aeabi_dsub+0x46>
    6224:	e705      	b.n	6032 <__aeabi_dsub+0x3e>
    6226:	1c23      	adds	r3, r4, #0
    6228:	430b      	orrs	r3, r1
    622a:	d03b      	beq.n	62a4 <__aeabi_dsub+0x2b0>
    622c:	2380      	movs	r3, #128	; 0x80
    622e:	031b      	lsls	r3, r3, #12
    6230:	430b      	orrs	r3, r1
    6232:	031b      	lsls	r3, r3, #12
    6234:	0b1b      	lsrs	r3, r3, #12
    6236:	e730      	b.n	609a <__aeabi_dsub+0xa6>
    6238:	3f01      	subs	r7, #1
    623a:	2f00      	cmp	r7, #0
    623c:	d16d      	bne.n	631a <__aeabi_dsub+0x326>
    623e:	465e      	mov	r6, fp
    6240:	1ba2      	subs	r2, r4, r6
    6242:	4294      	cmp	r4, r2
    6244:	41a4      	sbcs	r4, r4
    6246:	4264      	negs	r4, r4
    6248:	1ac9      	subs	r1, r1, r3
    624a:	1b09      	subs	r1, r1, r4
    624c:	1c14      	adds	r4, r2, #0
    624e:	e760      	b.n	6112 <__aeabi_dsub+0x11e>
    6250:	4658      	mov	r0, fp
    6252:	4318      	orrs	r0, r3
    6254:	d100      	bne.n	6258 <__aeabi_dsub+0x264>
    6256:	e6fd      	b.n	6054 <__aeabi_dsub+0x60>
    6258:	2601      	movs	r6, #1
    625a:	4276      	negs	r6, r6
    625c:	44b4      	add	ip, r6
    625e:	4660      	mov	r0, ip
    6260:	2800      	cmp	r0, #0
    6262:	d000      	beq.n	6266 <__aeabi_dsub+0x272>
    6264:	e0d0      	b.n	6408 <__aeabi_dsub+0x414>
    6266:	465e      	mov	r6, fp
    6268:	1932      	adds	r2, r6, r4
    626a:	e7bf      	b.n	61ec <__aeabi_dsub+0x1f8>
    626c:	2f00      	cmp	r7, #0
    626e:	d000      	beq.n	6272 <__aeabi_dsub+0x27e>
    6270:	e080      	b.n	6374 <__aeabi_dsub+0x380>
    6272:	1c68      	adds	r0, r5, #1
    6274:	0540      	lsls	r0, r0, #21
    6276:	0d40      	lsrs	r0, r0, #21
    6278:	2801      	cmp	r0, #1
    627a:	dc00      	bgt.n	627e <__aeabi_dsub+0x28a>
    627c:	e0e8      	b.n	6450 <__aeabi_dsub+0x45c>
    627e:	465a      	mov	r2, fp
    6280:	1aa2      	subs	r2, r4, r2
    6282:	4294      	cmp	r4, r2
    6284:	41bf      	sbcs	r7, r7
    6286:	1ac8      	subs	r0, r1, r3
    6288:	427f      	negs	r7, r7
    628a:	1bc7      	subs	r7, r0, r7
    628c:	023e      	lsls	r6, r7, #8
    628e:	d400      	bmi.n	6292 <__aeabi_dsub+0x29e>
    6290:	e098      	b.n	63c4 <__aeabi_dsub+0x3d0>
    6292:	4658      	mov	r0, fp
    6294:	1b04      	subs	r4, r0, r4
    6296:	45a3      	cmp	fp, r4
    6298:	4192      	sbcs	r2, r2
    629a:	1a59      	subs	r1, r3, r1
    629c:	4252      	negs	r2, r2
    629e:	1a8f      	subs	r7, r1, r2
    62a0:	46e2      	mov	sl, ip
    62a2:	e73a      	b.n	611a <__aeabi_dsub+0x126>
    62a4:	2300      	movs	r3, #0
    62a6:	2400      	movs	r4, #0
    62a8:	e6f7      	b.n	609a <__aeabi_dsub+0xa6>
    62aa:	2380      	movs	r3, #128	; 0x80
    62ac:	041b      	lsls	r3, r3, #16
    62ae:	2701      	movs	r7, #1
    62b0:	4656      	mov	r6, sl
    62b2:	400b      	ands	r3, r1
    62b4:	4037      	ands	r7, r6
    62b6:	e6e1      	b.n	607c <__aeabi_dsub+0x88>
    62b8:	1c27      	adds	r7, r4, #0
    62ba:	3828      	subs	r0, #40	; 0x28
    62bc:	4087      	lsls	r7, r0
    62be:	2400      	movs	r4, #0
    62c0:	4295      	cmp	r5, r2
    62c2:	dc00      	bgt.n	62c6 <__aeabi_dsub+0x2d2>
    62c4:	e73e      	b.n	6144 <__aeabi_dsub+0x150>
    62c6:	4929      	ldr	r1, [pc, #164]	; (636c <__aeabi_dsub+0x378>)
    62c8:	1aad      	subs	r5, r5, r2
    62ca:	4039      	ands	r1, r7
    62cc:	e6c2      	b.n	6054 <__aeabi_dsub+0x60>
    62ce:	1c20      	adds	r0, r4, #0
    62d0:	f000 fa88 	bl	67e4 <__clzsi2>
    62d4:	3020      	adds	r0, #32
    62d6:	e726      	b.n	6126 <__aeabi_dsub+0x132>
    62d8:	465a      	mov	r2, fp
    62da:	431a      	orrs	r2, r3
    62dc:	1e53      	subs	r3, r2, #1
    62de:	419a      	sbcs	r2, r3
    62e0:	b2d2      	uxtb	r2, r2
    62e2:	2700      	movs	r7, #0
    62e4:	e70e      	b.n	6104 <__aeabi_dsub+0x110>
    62e6:	2a00      	cmp	r2, #0
    62e8:	d000      	beq.n	62ec <__aeabi_dsub+0x2f8>
    62ea:	e0de      	b.n	64aa <__aeabi_dsub+0x4b6>
    62ec:	1c68      	adds	r0, r5, #1
    62ee:	0546      	lsls	r6, r0, #21
    62f0:	0d76      	lsrs	r6, r6, #21
    62f2:	2e01      	cmp	r6, #1
    62f4:	dc00      	bgt.n	62f8 <__aeabi_dsub+0x304>
    62f6:	e090      	b.n	641a <__aeabi_dsub+0x426>
    62f8:	4d1b      	ldr	r5, [pc, #108]	; (6368 <__aeabi_dsub+0x374>)
    62fa:	42a8      	cmp	r0, r5
    62fc:	d100      	bne.n	6300 <__aeabi_dsub+0x30c>
    62fe:	e0f5      	b.n	64ec <__aeabi_dsub+0x4f8>
    6300:	465e      	mov	r6, fp
    6302:	1932      	adds	r2, r6, r4
    6304:	42a2      	cmp	r2, r4
    6306:	41a4      	sbcs	r4, r4
    6308:	4264      	negs	r4, r4
    630a:	1859      	adds	r1, r3, r1
    630c:	1909      	adds	r1, r1, r4
    630e:	07cc      	lsls	r4, r1, #31
    6310:	0852      	lsrs	r2, r2, #1
    6312:	4314      	orrs	r4, r2
    6314:	0849      	lsrs	r1, r1, #1
    6316:	1c05      	adds	r5, r0, #0
    6318:	e69c      	b.n	6054 <__aeabi_dsub+0x60>
    631a:	4813      	ldr	r0, [pc, #76]	; (6368 <__aeabi_dsub+0x374>)
    631c:	4285      	cmp	r5, r0
    631e:	d000      	beq.n	6322 <__aeabi_dsub+0x32e>
    6320:	e6d9      	b.n	60d6 <__aeabi_dsub+0xe2>
    6322:	e697      	b.n	6054 <__aeabi_dsub+0x60>
    6324:	1c2b      	adds	r3, r5, #0
    6326:	3b1f      	subs	r3, #31
    6328:	1c3e      	adds	r6, r7, #0
    632a:	40de      	lsrs	r6, r3
    632c:	1c33      	adds	r3, r6, #0
    632e:	2920      	cmp	r1, #32
    6330:	d06f      	beq.n	6412 <__aeabi_dsub+0x41e>
    6332:	223f      	movs	r2, #63	; 0x3f
    6334:	1b55      	subs	r5, r2, r5
    6336:	40af      	lsls	r7, r5
    6338:	433c      	orrs	r4, r7
    633a:	1e60      	subs	r0, r4, #1
    633c:	4184      	sbcs	r4, r0
    633e:	431c      	orrs	r4, r3
    6340:	2100      	movs	r1, #0
    6342:	2500      	movs	r5, #0
    6344:	e686      	b.n	6054 <__aeabi_dsub+0x60>
    6346:	1c38      	adds	r0, r7, #0
    6348:	3820      	subs	r0, #32
    634a:	1c1e      	adds	r6, r3, #0
    634c:	40c6      	lsrs	r6, r0
    634e:	1c30      	adds	r0, r6, #0
    6350:	2f20      	cmp	r7, #32
    6352:	d060      	beq.n	6416 <__aeabi_dsub+0x422>
    6354:	2240      	movs	r2, #64	; 0x40
    6356:	1bd7      	subs	r7, r2, r7
    6358:	40bb      	lsls	r3, r7
    635a:	465a      	mov	r2, fp
    635c:	431a      	orrs	r2, r3
    635e:	1e53      	subs	r3, r2, #1
    6360:	419a      	sbcs	r2, r3
    6362:	4302      	orrs	r2, r0
    6364:	2700      	movs	r7, #0
    6366:	e6cd      	b.n	6104 <__aeabi_dsub+0x110>
    6368:	000007ff 	.word	0x000007ff
    636c:	ff7fffff 	.word	0xff7fffff
    6370:	800fffff 	.word	0x800fffff
    6374:	2d00      	cmp	r5, #0
    6376:	d037      	beq.n	63e8 <__aeabi_dsub+0x3f4>
    6378:	4db6      	ldr	r5, [pc, #728]	; (6654 <__aeabi_dsub+0x660>)
    637a:	42a8      	cmp	r0, r5
    637c:	d100      	bne.n	6380 <__aeabi_dsub+0x38c>
    637e:	e08f      	b.n	64a0 <__aeabi_dsub+0x4ac>
    6380:	2580      	movs	r5, #128	; 0x80
    6382:	042d      	lsls	r5, r5, #16
    6384:	427f      	negs	r7, r7
    6386:	4329      	orrs	r1, r5
    6388:	2f38      	cmp	r7, #56	; 0x38
    638a:	dd00      	ble.n	638e <__aeabi_dsub+0x39a>
    638c:	e0a8      	b.n	64e0 <__aeabi_dsub+0x4ec>
    638e:	2f1f      	cmp	r7, #31
    6390:	dd00      	ble.n	6394 <__aeabi_dsub+0x3a0>
    6392:	e124      	b.n	65de <__aeabi_dsub+0x5ea>
    6394:	2520      	movs	r5, #32
    6396:	1bed      	subs	r5, r5, r7
    6398:	1c0e      	adds	r6, r1, #0
    639a:	40ae      	lsls	r6, r5
    639c:	46b0      	mov	r8, r6
    639e:	1c26      	adds	r6, r4, #0
    63a0:	40fe      	lsrs	r6, r7
    63a2:	4642      	mov	r2, r8
    63a4:	40ac      	lsls	r4, r5
    63a6:	4316      	orrs	r6, r2
    63a8:	1e65      	subs	r5, r4, #1
    63aa:	41ac      	sbcs	r4, r5
    63ac:	4334      	orrs	r4, r6
    63ae:	40f9      	lsrs	r1, r7
    63b0:	465a      	mov	r2, fp
    63b2:	1b14      	subs	r4, r2, r4
    63b4:	45a3      	cmp	fp, r4
    63b6:	4192      	sbcs	r2, r2
    63b8:	1a5b      	subs	r3, r3, r1
    63ba:	4252      	negs	r2, r2
    63bc:	1a99      	subs	r1, r3, r2
    63be:	1c05      	adds	r5, r0, #0
    63c0:	46e2      	mov	sl, ip
    63c2:	e6a6      	b.n	6112 <__aeabi_dsub+0x11e>
    63c4:	1c13      	adds	r3, r2, #0
    63c6:	433b      	orrs	r3, r7
    63c8:	1c14      	adds	r4, r2, #0
    63ca:	2b00      	cmp	r3, #0
    63cc:	d000      	beq.n	63d0 <__aeabi_dsub+0x3dc>
    63ce:	e6a4      	b.n	611a <__aeabi_dsub+0x126>
    63d0:	2700      	movs	r7, #0
    63d2:	2100      	movs	r1, #0
    63d4:	2500      	movs	r5, #0
    63d6:	2400      	movs	r4, #0
    63d8:	e6cd      	b.n	6176 <__aeabi_dsub+0x182>
    63da:	465a      	mov	r2, fp
    63dc:	431a      	orrs	r2, r3
    63de:	1e53      	subs	r3, r2, #1
    63e0:	419a      	sbcs	r2, r3
    63e2:	b2d2      	uxtb	r2, r2
    63e4:	2300      	movs	r3, #0
    63e6:	e700      	b.n	61ea <__aeabi_dsub+0x1f6>
    63e8:	1c0d      	adds	r5, r1, #0
    63ea:	4325      	orrs	r5, r4
    63ec:	d058      	beq.n	64a0 <__aeabi_dsub+0x4ac>
    63ee:	43ff      	mvns	r7, r7
    63f0:	2f00      	cmp	r7, #0
    63f2:	d151      	bne.n	6498 <__aeabi_dsub+0x4a4>
    63f4:	465a      	mov	r2, fp
    63f6:	1b14      	subs	r4, r2, r4
    63f8:	45a3      	cmp	fp, r4
    63fa:	4192      	sbcs	r2, r2
    63fc:	1a59      	subs	r1, r3, r1
    63fe:	4252      	negs	r2, r2
    6400:	1a89      	subs	r1, r1, r2
    6402:	1c05      	adds	r5, r0, #0
    6404:	46e2      	mov	sl, ip
    6406:	e684      	b.n	6112 <__aeabi_dsub+0x11e>
    6408:	4892      	ldr	r0, [pc, #584]	; (6654 <__aeabi_dsub+0x660>)
    640a:	4285      	cmp	r5, r0
    640c:	d000      	beq.n	6410 <__aeabi_dsub+0x41c>
    640e:	e6d1      	b.n	61b4 <__aeabi_dsub+0x1c0>
    6410:	e620      	b.n	6054 <__aeabi_dsub+0x60>
    6412:	2700      	movs	r7, #0
    6414:	e790      	b.n	6338 <__aeabi_dsub+0x344>
    6416:	2300      	movs	r3, #0
    6418:	e79f      	b.n	635a <__aeabi_dsub+0x366>
    641a:	1c08      	adds	r0, r1, #0
    641c:	4320      	orrs	r0, r4
    641e:	2d00      	cmp	r5, #0
    6420:	d000      	beq.n	6424 <__aeabi_dsub+0x430>
    6422:	e0c2      	b.n	65aa <__aeabi_dsub+0x5b6>
    6424:	2800      	cmp	r0, #0
    6426:	d100      	bne.n	642a <__aeabi_dsub+0x436>
    6428:	e0ef      	b.n	660a <__aeabi_dsub+0x616>
    642a:	4658      	mov	r0, fp
    642c:	4318      	orrs	r0, r3
    642e:	d100      	bne.n	6432 <__aeabi_dsub+0x43e>
    6430:	e610      	b.n	6054 <__aeabi_dsub+0x60>
    6432:	4658      	mov	r0, fp
    6434:	1902      	adds	r2, r0, r4
    6436:	42a2      	cmp	r2, r4
    6438:	41a4      	sbcs	r4, r4
    643a:	4264      	negs	r4, r4
    643c:	1859      	adds	r1, r3, r1
    643e:	1909      	adds	r1, r1, r4
    6440:	1c14      	adds	r4, r2, #0
    6442:	020a      	lsls	r2, r1, #8
    6444:	d400      	bmi.n	6448 <__aeabi_dsub+0x454>
    6446:	e605      	b.n	6054 <__aeabi_dsub+0x60>
    6448:	4b83      	ldr	r3, [pc, #524]	; (6658 <__aeabi_dsub+0x664>)
    644a:	2501      	movs	r5, #1
    644c:	4019      	ands	r1, r3
    644e:	e601      	b.n	6054 <__aeabi_dsub+0x60>
    6450:	1c08      	adds	r0, r1, #0
    6452:	4320      	orrs	r0, r4
    6454:	2d00      	cmp	r5, #0
    6456:	d138      	bne.n	64ca <__aeabi_dsub+0x4d6>
    6458:	2800      	cmp	r0, #0
    645a:	d16f      	bne.n	653c <__aeabi_dsub+0x548>
    645c:	4659      	mov	r1, fp
    645e:	4319      	orrs	r1, r3
    6460:	d003      	beq.n	646a <__aeabi_dsub+0x476>
    6462:	1c19      	adds	r1, r3, #0
    6464:	465c      	mov	r4, fp
    6466:	46e2      	mov	sl, ip
    6468:	e5f4      	b.n	6054 <__aeabi_dsub+0x60>
    646a:	2700      	movs	r7, #0
    646c:	2100      	movs	r1, #0
    646e:	2400      	movs	r4, #0
    6470:	e681      	b.n	6176 <__aeabi_dsub+0x182>
    6472:	4660      	mov	r0, ip
    6474:	3820      	subs	r0, #32
    6476:	1c1a      	adds	r2, r3, #0
    6478:	40c2      	lsrs	r2, r0
    647a:	4666      	mov	r6, ip
    647c:	1c10      	adds	r0, r2, #0
    647e:	2e20      	cmp	r6, #32
    6480:	d100      	bne.n	6484 <__aeabi_dsub+0x490>
    6482:	e0aa      	b.n	65da <__aeabi_dsub+0x5e6>
    6484:	2240      	movs	r2, #64	; 0x40
    6486:	1b92      	subs	r2, r2, r6
    6488:	4093      	lsls	r3, r2
    648a:	465a      	mov	r2, fp
    648c:	431a      	orrs	r2, r3
    648e:	1e53      	subs	r3, r2, #1
    6490:	419a      	sbcs	r2, r3
    6492:	4302      	orrs	r2, r0
    6494:	2300      	movs	r3, #0
    6496:	e6a8      	b.n	61ea <__aeabi_dsub+0x1f6>
    6498:	4d6e      	ldr	r5, [pc, #440]	; (6654 <__aeabi_dsub+0x660>)
    649a:	42a8      	cmp	r0, r5
    649c:	d000      	beq.n	64a0 <__aeabi_dsub+0x4ac>
    649e:	e773      	b.n	6388 <__aeabi_dsub+0x394>
    64a0:	1c19      	adds	r1, r3, #0
    64a2:	465c      	mov	r4, fp
    64a4:	1c05      	adds	r5, r0, #0
    64a6:	46e2      	mov	sl, ip
    64a8:	e5d4      	b.n	6054 <__aeabi_dsub+0x60>
    64aa:	2d00      	cmp	r5, #0
    64ac:	d122      	bne.n	64f4 <__aeabi_dsub+0x500>
    64ae:	1c0d      	adds	r5, r1, #0
    64b0:	4325      	orrs	r5, r4
    64b2:	d076      	beq.n	65a2 <__aeabi_dsub+0x5ae>
    64b4:	43d5      	mvns	r5, r2
    64b6:	2d00      	cmp	r5, #0
    64b8:	d170      	bne.n	659c <__aeabi_dsub+0x5a8>
    64ba:	445c      	add	r4, fp
    64bc:	455c      	cmp	r4, fp
    64be:	4192      	sbcs	r2, r2
    64c0:	1859      	adds	r1, r3, r1
    64c2:	4252      	negs	r2, r2
    64c4:	1889      	adds	r1, r1, r2
    64c6:	1c05      	adds	r5, r0, #0
    64c8:	e696      	b.n	61f8 <__aeabi_dsub+0x204>
    64ca:	2800      	cmp	r0, #0
    64cc:	d14c      	bne.n	6568 <__aeabi_dsub+0x574>
    64ce:	4659      	mov	r1, fp
    64d0:	4319      	orrs	r1, r3
    64d2:	d100      	bne.n	64d6 <__aeabi_dsub+0x4e2>
    64d4:	e64a      	b.n	616c <__aeabi_dsub+0x178>
    64d6:	1c19      	adds	r1, r3, #0
    64d8:	465c      	mov	r4, fp
    64da:	46e2      	mov	sl, ip
    64dc:	4d5d      	ldr	r5, [pc, #372]	; (6654 <__aeabi_dsub+0x660>)
    64de:	e5b9      	b.n	6054 <__aeabi_dsub+0x60>
    64e0:	430c      	orrs	r4, r1
    64e2:	1e61      	subs	r1, r4, #1
    64e4:	418c      	sbcs	r4, r1
    64e6:	b2e4      	uxtb	r4, r4
    64e8:	2100      	movs	r1, #0
    64ea:	e761      	b.n	63b0 <__aeabi_dsub+0x3bc>
    64ec:	1c05      	adds	r5, r0, #0
    64ee:	2100      	movs	r1, #0
    64f0:	2400      	movs	r4, #0
    64f2:	e640      	b.n	6176 <__aeabi_dsub+0x182>
    64f4:	4d57      	ldr	r5, [pc, #348]	; (6654 <__aeabi_dsub+0x660>)
    64f6:	42a8      	cmp	r0, r5
    64f8:	d053      	beq.n	65a2 <__aeabi_dsub+0x5ae>
    64fa:	4255      	negs	r5, r2
    64fc:	2280      	movs	r2, #128	; 0x80
    64fe:	0416      	lsls	r6, r2, #16
    6500:	4331      	orrs	r1, r6
    6502:	2d38      	cmp	r5, #56	; 0x38
    6504:	dc7b      	bgt.n	65fe <__aeabi_dsub+0x60a>
    6506:	2d1f      	cmp	r5, #31
    6508:	dd00      	ble.n	650c <__aeabi_dsub+0x518>
    650a:	e08c      	b.n	6626 <__aeabi_dsub+0x632>
    650c:	2220      	movs	r2, #32
    650e:	1b56      	subs	r6, r2, r5
    6510:	1c0a      	adds	r2, r1, #0
    6512:	46b4      	mov	ip, r6
    6514:	40b2      	lsls	r2, r6
    6516:	1c26      	adds	r6, r4, #0
    6518:	40ee      	lsrs	r6, r5
    651a:	4332      	orrs	r2, r6
    651c:	4690      	mov	r8, r2
    651e:	4662      	mov	r2, ip
    6520:	4094      	lsls	r4, r2
    6522:	1e66      	subs	r6, r4, #1
    6524:	41b4      	sbcs	r4, r6
    6526:	4642      	mov	r2, r8
    6528:	4314      	orrs	r4, r2
    652a:	40e9      	lsrs	r1, r5
    652c:	445c      	add	r4, fp
    652e:	455c      	cmp	r4, fp
    6530:	4192      	sbcs	r2, r2
    6532:	18cb      	adds	r3, r1, r3
    6534:	4252      	negs	r2, r2
    6536:	1899      	adds	r1, r3, r2
    6538:	1c05      	adds	r5, r0, #0
    653a:	e65d      	b.n	61f8 <__aeabi_dsub+0x204>
    653c:	4658      	mov	r0, fp
    653e:	4318      	orrs	r0, r3
    6540:	d100      	bne.n	6544 <__aeabi_dsub+0x550>
    6542:	e587      	b.n	6054 <__aeabi_dsub+0x60>
    6544:	465e      	mov	r6, fp
    6546:	1ba7      	subs	r7, r4, r6
    6548:	42bc      	cmp	r4, r7
    654a:	4192      	sbcs	r2, r2
    654c:	1ac8      	subs	r0, r1, r3
    654e:	4252      	negs	r2, r2
    6550:	1a80      	subs	r0, r0, r2
    6552:	0206      	lsls	r6, r0, #8
    6554:	d560      	bpl.n	6618 <__aeabi_dsub+0x624>
    6556:	4658      	mov	r0, fp
    6558:	1b04      	subs	r4, r0, r4
    655a:	45a3      	cmp	fp, r4
    655c:	4192      	sbcs	r2, r2
    655e:	1a59      	subs	r1, r3, r1
    6560:	4252      	negs	r2, r2
    6562:	1a89      	subs	r1, r1, r2
    6564:	46e2      	mov	sl, ip
    6566:	e575      	b.n	6054 <__aeabi_dsub+0x60>
    6568:	4658      	mov	r0, fp
    656a:	4318      	orrs	r0, r3
    656c:	d033      	beq.n	65d6 <__aeabi_dsub+0x5e2>
    656e:	0748      	lsls	r0, r1, #29
    6570:	08e4      	lsrs	r4, r4, #3
    6572:	4304      	orrs	r4, r0
    6574:	2080      	movs	r0, #128	; 0x80
    6576:	08c9      	lsrs	r1, r1, #3
    6578:	0300      	lsls	r0, r0, #12
    657a:	4201      	tst	r1, r0
    657c:	d008      	beq.n	6590 <__aeabi_dsub+0x59c>
    657e:	08dd      	lsrs	r5, r3, #3
    6580:	4205      	tst	r5, r0
    6582:	d105      	bne.n	6590 <__aeabi_dsub+0x59c>
    6584:	4659      	mov	r1, fp
    6586:	08ca      	lsrs	r2, r1, #3
    6588:	075c      	lsls	r4, r3, #29
    658a:	4314      	orrs	r4, r2
    658c:	1c29      	adds	r1, r5, #0
    658e:	46e2      	mov	sl, ip
    6590:	0f63      	lsrs	r3, r4, #29
    6592:	00c9      	lsls	r1, r1, #3
    6594:	4319      	orrs	r1, r3
    6596:	00e4      	lsls	r4, r4, #3
    6598:	4d2e      	ldr	r5, [pc, #184]	; (6654 <__aeabi_dsub+0x660>)
    659a:	e55b      	b.n	6054 <__aeabi_dsub+0x60>
    659c:	4a2d      	ldr	r2, [pc, #180]	; (6654 <__aeabi_dsub+0x660>)
    659e:	4290      	cmp	r0, r2
    65a0:	d1af      	bne.n	6502 <__aeabi_dsub+0x50e>
    65a2:	1c19      	adds	r1, r3, #0
    65a4:	465c      	mov	r4, fp
    65a6:	1c05      	adds	r5, r0, #0
    65a8:	e554      	b.n	6054 <__aeabi_dsub+0x60>
    65aa:	2800      	cmp	r0, #0
    65ac:	d030      	beq.n	6610 <__aeabi_dsub+0x61c>
    65ae:	4658      	mov	r0, fp
    65b0:	4318      	orrs	r0, r3
    65b2:	d010      	beq.n	65d6 <__aeabi_dsub+0x5e2>
    65b4:	2580      	movs	r5, #128	; 0x80
    65b6:	0748      	lsls	r0, r1, #29
    65b8:	08e4      	lsrs	r4, r4, #3
    65ba:	08c9      	lsrs	r1, r1, #3
    65bc:	032d      	lsls	r5, r5, #12
    65be:	4304      	orrs	r4, r0
    65c0:	4229      	tst	r1, r5
    65c2:	d0e5      	beq.n	6590 <__aeabi_dsub+0x59c>
    65c4:	08d8      	lsrs	r0, r3, #3
    65c6:	4228      	tst	r0, r5
    65c8:	d1e2      	bne.n	6590 <__aeabi_dsub+0x59c>
    65ca:	465d      	mov	r5, fp
    65cc:	08ea      	lsrs	r2, r5, #3
    65ce:	075c      	lsls	r4, r3, #29
    65d0:	4314      	orrs	r4, r2
    65d2:	1c01      	adds	r1, r0, #0
    65d4:	e7dc      	b.n	6590 <__aeabi_dsub+0x59c>
    65d6:	4d1f      	ldr	r5, [pc, #124]	; (6654 <__aeabi_dsub+0x660>)
    65d8:	e53c      	b.n	6054 <__aeabi_dsub+0x60>
    65da:	2300      	movs	r3, #0
    65dc:	e755      	b.n	648a <__aeabi_dsub+0x496>
    65de:	1c3d      	adds	r5, r7, #0
    65e0:	3d20      	subs	r5, #32
    65e2:	1c0e      	adds	r6, r1, #0
    65e4:	40ee      	lsrs	r6, r5
    65e6:	1c35      	adds	r5, r6, #0
    65e8:	2f20      	cmp	r7, #32
    65ea:	d02e      	beq.n	664a <__aeabi_dsub+0x656>
    65ec:	2640      	movs	r6, #64	; 0x40
    65ee:	1bf7      	subs	r7, r6, r7
    65f0:	40b9      	lsls	r1, r7
    65f2:	430c      	orrs	r4, r1
    65f4:	1e61      	subs	r1, r4, #1
    65f6:	418c      	sbcs	r4, r1
    65f8:	432c      	orrs	r4, r5
    65fa:	2100      	movs	r1, #0
    65fc:	e6d8      	b.n	63b0 <__aeabi_dsub+0x3bc>
    65fe:	430c      	orrs	r4, r1
    6600:	1e61      	subs	r1, r4, #1
    6602:	418c      	sbcs	r4, r1
    6604:	b2e4      	uxtb	r4, r4
    6606:	2100      	movs	r1, #0
    6608:	e790      	b.n	652c <__aeabi_dsub+0x538>
    660a:	1c19      	adds	r1, r3, #0
    660c:	465c      	mov	r4, fp
    660e:	e521      	b.n	6054 <__aeabi_dsub+0x60>
    6610:	1c19      	adds	r1, r3, #0
    6612:	465c      	mov	r4, fp
    6614:	4d0f      	ldr	r5, [pc, #60]	; (6654 <__aeabi_dsub+0x660>)
    6616:	e51d      	b.n	6054 <__aeabi_dsub+0x60>
    6618:	1c03      	adds	r3, r0, #0
    661a:	433b      	orrs	r3, r7
    661c:	d100      	bne.n	6620 <__aeabi_dsub+0x62c>
    661e:	e724      	b.n	646a <__aeabi_dsub+0x476>
    6620:	1c01      	adds	r1, r0, #0
    6622:	1c3c      	adds	r4, r7, #0
    6624:	e516      	b.n	6054 <__aeabi_dsub+0x60>
    6626:	2620      	movs	r6, #32
    6628:	4276      	negs	r6, r6
    662a:	1976      	adds	r6, r6, r5
    662c:	1c0a      	adds	r2, r1, #0
    662e:	40f2      	lsrs	r2, r6
    6630:	4690      	mov	r8, r2
    6632:	2d20      	cmp	r5, #32
    6634:	d00b      	beq.n	664e <__aeabi_dsub+0x65a>
    6636:	2640      	movs	r6, #64	; 0x40
    6638:	1b75      	subs	r5, r6, r5
    663a:	40a9      	lsls	r1, r5
    663c:	430c      	orrs	r4, r1
    663e:	1e61      	subs	r1, r4, #1
    6640:	418c      	sbcs	r4, r1
    6642:	4645      	mov	r5, r8
    6644:	432c      	orrs	r4, r5
    6646:	2100      	movs	r1, #0
    6648:	e770      	b.n	652c <__aeabi_dsub+0x538>
    664a:	2100      	movs	r1, #0
    664c:	e7d1      	b.n	65f2 <__aeabi_dsub+0x5fe>
    664e:	2100      	movs	r1, #0
    6650:	e7f4      	b.n	663c <__aeabi_dsub+0x648>
    6652:	46c0      	nop			; (mov r8, r8)
    6654:	000007ff 	.word	0x000007ff
    6658:	ff7fffff 	.word	0xff7fffff

0000665c <__aeabi_d2iz>:
    665c:	b570      	push	{r4, r5, r6, lr}
    665e:	1c0b      	adds	r3, r1, #0
    6660:	4c12      	ldr	r4, [pc, #72]	; (66ac <__aeabi_d2iz+0x50>)
    6662:	0309      	lsls	r1, r1, #12
    6664:	0b0e      	lsrs	r6, r1, #12
    6666:	0059      	lsls	r1, r3, #1
    6668:	1c02      	adds	r2, r0, #0
    666a:	0d49      	lsrs	r1, r1, #21
    666c:	0fdd      	lsrs	r5, r3, #31
    666e:	2000      	movs	r0, #0
    6670:	42a1      	cmp	r1, r4
    6672:	dd11      	ble.n	6698 <__aeabi_d2iz+0x3c>
    6674:	480e      	ldr	r0, [pc, #56]	; (66b0 <__aeabi_d2iz+0x54>)
    6676:	4281      	cmp	r1, r0
    6678:	dc0f      	bgt.n	669a <__aeabi_d2iz+0x3e>
    667a:	2080      	movs	r0, #128	; 0x80
    667c:	0340      	lsls	r0, r0, #13
    667e:	4306      	orrs	r6, r0
    6680:	480c      	ldr	r0, [pc, #48]	; (66b4 <__aeabi_d2iz+0x58>)
    6682:	1a40      	subs	r0, r0, r1
    6684:	281f      	cmp	r0, #31
    6686:	dd0b      	ble.n	66a0 <__aeabi_d2iz+0x44>
    6688:	4a0b      	ldr	r2, [pc, #44]	; (66b8 <__aeabi_d2iz+0x5c>)
    668a:	1a52      	subs	r2, r2, r1
    668c:	40d6      	lsrs	r6, r2
    668e:	1c32      	adds	r2, r6, #0
    6690:	4250      	negs	r0, r2
    6692:	2d00      	cmp	r5, #0
    6694:	d100      	bne.n	6698 <__aeabi_d2iz+0x3c>
    6696:	1c10      	adds	r0, r2, #0
    6698:	bd70      	pop	{r4, r5, r6, pc}
    669a:	4b08      	ldr	r3, [pc, #32]	; (66bc <__aeabi_d2iz+0x60>)
    669c:	18e8      	adds	r0, r5, r3
    669e:	e7fb      	b.n	6698 <__aeabi_d2iz+0x3c>
    66a0:	4b07      	ldr	r3, [pc, #28]	; (66c0 <__aeabi_d2iz+0x64>)
    66a2:	40c2      	lsrs	r2, r0
    66a4:	18c9      	adds	r1, r1, r3
    66a6:	408e      	lsls	r6, r1
    66a8:	4332      	orrs	r2, r6
    66aa:	e7f1      	b.n	6690 <__aeabi_d2iz+0x34>
    66ac:	000003fe 	.word	0x000003fe
    66b0:	0000041d 	.word	0x0000041d
    66b4:	00000433 	.word	0x00000433
    66b8:	00000413 	.word	0x00000413
    66bc:	7fffffff 	.word	0x7fffffff
    66c0:	fffffbed 	.word	0xfffffbed

000066c4 <__aeabi_f2d>:
    66c4:	0043      	lsls	r3, r0, #1
    66c6:	0e1b      	lsrs	r3, r3, #24
    66c8:	1c5a      	adds	r2, r3, #1
    66ca:	0241      	lsls	r1, r0, #9
    66cc:	b2d2      	uxtb	r2, r2
    66ce:	b570      	push	{r4, r5, r6, lr}
    66d0:	0a4c      	lsrs	r4, r1, #9
    66d2:	0fc5      	lsrs	r5, r0, #31
    66d4:	2a01      	cmp	r2, #1
    66d6:	dd17      	ble.n	6708 <__aeabi_f2d+0x44>
    66d8:	22e0      	movs	r2, #224	; 0xe0
    66da:	0092      	lsls	r2, r2, #2
    66dc:	0764      	lsls	r4, r4, #29
    66de:	0b09      	lsrs	r1, r1, #12
    66e0:	1898      	adds	r0, r3, r2
    66e2:	2200      	movs	r2, #0
    66e4:	2300      	movs	r3, #0
    66e6:	0d1e      	lsrs	r6, r3, #20
    66e8:	1c22      	adds	r2, r4, #0
    66ea:	0534      	lsls	r4, r6, #20
    66ec:	430c      	orrs	r4, r1
    66ee:	491b      	ldr	r1, [pc, #108]	; (675c <__aeabi_f2d+0x98>)
    66f0:	0540      	lsls	r0, r0, #21
    66f2:	0840      	lsrs	r0, r0, #1
    66f4:	4021      	ands	r1, r4
    66f6:	4301      	orrs	r1, r0
    66f8:	0049      	lsls	r1, r1, #1
    66fa:	0849      	lsrs	r1, r1, #1
    66fc:	07ed      	lsls	r5, r5, #31
    66fe:	1c0b      	adds	r3, r1, #0
    6700:	432b      	orrs	r3, r5
    6702:	1c10      	adds	r0, r2, #0
    6704:	1c19      	adds	r1, r3, #0
    6706:	bd70      	pop	{r4, r5, r6, pc}
    6708:	2b00      	cmp	r3, #0
    670a:	d115      	bne.n	6738 <__aeabi_f2d+0x74>
    670c:	2c00      	cmp	r4, #0
    670e:	d01c      	beq.n	674a <__aeabi_f2d+0x86>
    6710:	1c20      	adds	r0, r4, #0
    6712:	f000 f867 	bl	67e4 <__clzsi2>
    6716:	280a      	cmp	r0, #10
    6718:	dc1a      	bgt.n	6750 <__aeabi_f2d+0x8c>
    671a:	210b      	movs	r1, #11
    671c:	1a09      	subs	r1, r1, r0
    671e:	1c23      	adds	r3, r4, #0
    6720:	40cb      	lsrs	r3, r1
    6722:	1c19      	adds	r1, r3, #0
    6724:	1c03      	adds	r3, r0, #0
    6726:	3315      	adds	r3, #21
    6728:	409c      	lsls	r4, r3
    672a:	4b0d      	ldr	r3, [pc, #52]	; (6760 <__aeabi_f2d+0x9c>)
    672c:	0309      	lsls	r1, r1, #12
    672e:	1a18      	subs	r0, r3, r0
    6730:	0540      	lsls	r0, r0, #21
    6732:	0b09      	lsrs	r1, r1, #12
    6734:	0d40      	lsrs	r0, r0, #21
    6736:	e7d4      	b.n	66e2 <__aeabi_f2d+0x1e>
    6738:	2c00      	cmp	r4, #0
    673a:	d003      	beq.n	6744 <__aeabi_f2d+0x80>
    673c:	0764      	lsls	r4, r4, #29
    673e:	0b09      	lsrs	r1, r1, #12
    6740:	4808      	ldr	r0, [pc, #32]	; (6764 <__aeabi_f2d+0xa0>)
    6742:	e7ce      	b.n	66e2 <__aeabi_f2d+0x1e>
    6744:	4807      	ldr	r0, [pc, #28]	; (6764 <__aeabi_f2d+0xa0>)
    6746:	2100      	movs	r1, #0
    6748:	e7cb      	b.n	66e2 <__aeabi_f2d+0x1e>
    674a:	2000      	movs	r0, #0
    674c:	2100      	movs	r1, #0
    674e:	e7c8      	b.n	66e2 <__aeabi_f2d+0x1e>
    6750:	1c01      	adds	r1, r0, #0
    6752:	390b      	subs	r1, #11
    6754:	408c      	lsls	r4, r1
    6756:	1c21      	adds	r1, r4, #0
    6758:	2400      	movs	r4, #0
    675a:	e7e6      	b.n	672a <__aeabi_f2d+0x66>
    675c:	800fffff 	.word	0x800fffff
    6760:	00000389 	.word	0x00000389
    6764:	000007ff 	.word	0x000007ff

00006768 <__aeabi_cdrcmple>:
    6768:	4684      	mov	ip, r0
    676a:	1c10      	adds	r0, r2, #0
    676c:	4662      	mov	r2, ip
    676e:	468c      	mov	ip, r1
    6770:	1c19      	adds	r1, r3, #0
    6772:	4663      	mov	r3, ip
    6774:	e000      	b.n	6778 <__aeabi_cdcmpeq>
    6776:	46c0      	nop			; (mov r8, r8)

00006778 <__aeabi_cdcmpeq>:
    6778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    677a:	f000 f919 	bl	69b0 <__ledf2>
    677e:	2800      	cmp	r0, #0
    6780:	d401      	bmi.n	6786 <__aeabi_cdcmpeq+0xe>
    6782:	2100      	movs	r1, #0
    6784:	42c8      	cmn	r0, r1
    6786:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006788 <__aeabi_dcmpeq>:
    6788:	b510      	push	{r4, lr}
    678a:	f000 f849 	bl	6820 <__eqdf2>
    678e:	4240      	negs	r0, r0
    6790:	3001      	adds	r0, #1
    6792:	bd10      	pop	{r4, pc}

00006794 <__aeabi_dcmplt>:
    6794:	b510      	push	{r4, lr}
    6796:	f000 f90b 	bl	69b0 <__ledf2>
    679a:	2800      	cmp	r0, #0
    679c:	db01      	blt.n	67a2 <__aeabi_dcmplt+0xe>
    679e:	2000      	movs	r0, #0
    67a0:	bd10      	pop	{r4, pc}
    67a2:	2001      	movs	r0, #1
    67a4:	bd10      	pop	{r4, pc}
    67a6:	46c0      	nop			; (mov r8, r8)

000067a8 <__aeabi_dcmple>:
    67a8:	b510      	push	{r4, lr}
    67aa:	f000 f901 	bl	69b0 <__ledf2>
    67ae:	2800      	cmp	r0, #0
    67b0:	dd01      	ble.n	67b6 <__aeabi_dcmple+0xe>
    67b2:	2000      	movs	r0, #0
    67b4:	bd10      	pop	{r4, pc}
    67b6:	2001      	movs	r0, #1
    67b8:	bd10      	pop	{r4, pc}
    67ba:	46c0      	nop			; (mov r8, r8)

000067bc <__aeabi_dcmpgt>:
    67bc:	b510      	push	{r4, lr}
    67be:	f000 f879 	bl	68b4 <__gedf2>
    67c2:	2800      	cmp	r0, #0
    67c4:	dc01      	bgt.n	67ca <__aeabi_dcmpgt+0xe>
    67c6:	2000      	movs	r0, #0
    67c8:	bd10      	pop	{r4, pc}
    67ca:	2001      	movs	r0, #1
    67cc:	bd10      	pop	{r4, pc}
    67ce:	46c0      	nop			; (mov r8, r8)

000067d0 <__aeabi_dcmpge>:
    67d0:	b510      	push	{r4, lr}
    67d2:	f000 f86f 	bl	68b4 <__gedf2>
    67d6:	2800      	cmp	r0, #0
    67d8:	da01      	bge.n	67de <__aeabi_dcmpge+0xe>
    67da:	2000      	movs	r0, #0
    67dc:	bd10      	pop	{r4, pc}
    67de:	2001      	movs	r0, #1
    67e0:	bd10      	pop	{r4, pc}
    67e2:	46c0      	nop			; (mov r8, r8)

000067e4 <__clzsi2>:
    67e4:	211c      	movs	r1, #28
    67e6:	2301      	movs	r3, #1
    67e8:	041b      	lsls	r3, r3, #16
    67ea:	4298      	cmp	r0, r3
    67ec:	d301      	bcc.n	67f2 <__clzsi2+0xe>
    67ee:	0c00      	lsrs	r0, r0, #16
    67f0:	3910      	subs	r1, #16
    67f2:	0a1b      	lsrs	r3, r3, #8
    67f4:	4298      	cmp	r0, r3
    67f6:	d301      	bcc.n	67fc <__clzsi2+0x18>
    67f8:	0a00      	lsrs	r0, r0, #8
    67fa:	3908      	subs	r1, #8
    67fc:	091b      	lsrs	r3, r3, #4
    67fe:	4298      	cmp	r0, r3
    6800:	d301      	bcc.n	6806 <__clzsi2+0x22>
    6802:	0900      	lsrs	r0, r0, #4
    6804:	3904      	subs	r1, #4
    6806:	a202      	add	r2, pc, #8	; (adr r2, 6810 <__clzsi2+0x2c>)
    6808:	5c10      	ldrb	r0, [r2, r0]
    680a:	1840      	adds	r0, r0, r1
    680c:	4770      	bx	lr
    680e:	46c0      	nop			; (mov r8, r8)
    6810:	02020304 	.word	0x02020304
    6814:	01010101 	.word	0x01010101
	...

00006820 <__eqdf2>:
    6820:	b5f0      	push	{r4, r5, r6, r7, lr}
    6822:	465f      	mov	r7, fp
    6824:	4656      	mov	r6, sl
    6826:	464d      	mov	r5, r9
    6828:	4644      	mov	r4, r8
    682a:	b4f0      	push	{r4, r5, r6, r7}
    682c:	1c0d      	adds	r5, r1, #0
    682e:	1c04      	adds	r4, r0, #0
    6830:	4680      	mov	r8, r0
    6832:	0fe8      	lsrs	r0, r5, #31
    6834:	4681      	mov	r9, r0
    6836:	0318      	lsls	r0, r3, #12
    6838:	030f      	lsls	r7, r1, #12
    683a:	0b00      	lsrs	r0, r0, #12
    683c:	0b3f      	lsrs	r7, r7, #12
    683e:	b083      	sub	sp, #12
    6840:	4684      	mov	ip, r0
    6842:	481b      	ldr	r0, [pc, #108]	; (68b0 <__eqdf2+0x90>)
    6844:	9700      	str	r7, [sp, #0]
    6846:	0049      	lsls	r1, r1, #1
    6848:	005e      	lsls	r6, r3, #1
    684a:	0fdf      	lsrs	r7, r3, #31
    684c:	0d49      	lsrs	r1, r1, #21
    684e:	4692      	mov	sl, r2
    6850:	0d76      	lsrs	r6, r6, #21
    6852:	46bb      	mov	fp, r7
    6854:	4281      	cmp	r1, r0
    6856:	d00c      	beq.n	6872 <__eqdf2+0x52>
    6858:	4815      	ldr	r0, [pc, #84]	; (68b0 <__eqdf2+0x90>)
    685a:	4286      	cmp	r6, r0
    685c:	d010      	beq.n	6880 <__eqdf2+0x60>
    685e:	2001      	movs	r0, #1
    6860:	42b1      	cmp	r1, r6
    6862:	d015      	beq.n	6890 <__eqdf2+0x70>
    6864:	b003      	add	sp, #12
    6866:	bc3c      	pop	{r2, r3, r4, r5}
    6868:	4690      	mov	r8, r2
    686a:	4699      	mov	r9, r3
    686c:	46a2      	mov	sl, r4
    686e:	46ab      	mov	fp, r5
    6870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6872:	9f00      	ldr	r7, [sp, #0]
    6874:	2001      	movs	r0, #1
    6876:	4327      	orrs	r7, r4
    6878:	d1f4      	bne.n	6864 <__eqdf2+0x44>
    687a:	480d      	ldr	r0, [pc, #52]	; (68b0 <__eqdf2+0x90>)
    687c:	4286      	cmp	r6, r0
    687e:	d1ee      	bne.n	685e <__eqdf2+0x3e>
    6880:	4660      	mov	r0, ip
    6882:	4302      	orrs	r2, r0
    6884:	2001      	movs	r0, #1
    6886:	2a00      	cmp	r2, #0
    6888:	d1ec      	bne.n	6864 <__eqdf2+0x44>
    688a:	2001      	movs	r0, #1
    688c:	42b1      	cmp	r1, r6
    688e:	d1e9      	bne.n	6864 <__eqdf2+0x44>
    6890:	9b00      	ldr	r3, [sp, #0]
    6892:	4563      	cmp	r3, ip
    6894:	d1e6      	bne.n	6864 <__eqdf2+0x44>
    6896:	45d0      	cmp	r8, sl
    6898:	d1e4      	bne.n	6864 <__eqdf2+0x44>
    689a:	45d9      	cmp	r9, fp
    689c:	d006      	beq.n	68ac <__eqdf2+0x8c>
    689e:	2900      	cmp	r1, #0
    68a0:	d1e0      	bne.n	6864 <__eqdf2+0x44>
    68a2:	431c      	orrs	r4, r3
    68a4:	1c20      	adds	r0, r4, #0
    68a6:	1e44      	subs	r4, r0, #1
    68a8:	41a0      	sbcs	r0, r4
    68aa:	e7db      	b.n	6864 <__eqdf2+0x44>
    68ac:	2000      	movs	r0, #0
    68ae:	e7d9      	b.n	6864 <__eqdf2+0x44>
    68b0:	000007ff 	.word	0x000007ff

000068b4 <__gedf2>:
    68b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    68b6:	465f      	mov	r7, fp
    68b8:	4656      	mov	r6, sl
    68ba:	464d      	mov	r5, r9
    68bc:	4644      	mov	r4, r8
    68be:	b4f0      	push	{r4, r5, r6, r7}
    68c0:	0fcd      	lsrs	r5, r1, #31
    68c2:	0fde      	lsrs	r6, r3, #31
    68c4:	46ac      	mov	ip, r5
    68c6:	031d      	lsls	r5, r3, #12
    68c8:	0b2d      	lsrs	r5, r5, #12
    68ca:	46b1      	mov	r9, r6
    68cc:	4e37      	ldr	r6, [pc, #220]	; (69ac <__gedf2+0xf8>)
    68ce:	030f      	lsls	r7, r1, #12
    68d0:	004c      	lsls	r4, r1, #1
    68d2:	46ab      	mov	fp, r5
    68d4:	005d      	lsls	r5, r3, #1
    68d6:	4680      	mov	r8, r0
    68d8:	0b3f      	lsrs	r7, r7, #12
    68da:	0d64      	lsrs	r4, r4, #21
    68dc:	4692      	mov	sl, r2
    68de:	0d6d      	lsrs	r5, r5, #21
    68e0:	42b4      	cmp	r4, r6
    68e2:	d032      	beq.n	694a <__gedf2+0x96>
    68e4:	4e31      	ldr	r6, [pc, #196]	; (69ac <__gedf2+0xf8>)
    68e6:	42b5      	cmp	r5, r6
    68e8:	d035      	beq.n	6956 <__gedf2+0xa2>
    68ea:	2c00      	cmp	r4, #0
    68ec:	d10e      	bne.n	690c <__gedf2+0x58>
    68ee:	4338      	orrs	r0, r7
    68f0:	4241      	negs	r1, r0
    68f2:	4141      	adcs	r1, r0
    68f4:	1c08      	adds	r0, r1, #0
    68f6:	2d00      	cmp	r5, #0
    68f8:	d00b      	beq.n	6912 <__gedf2+0x5e>
    68fa:	2900      	cmp	r1, #0
    68fc:	d119      	bne.n	6932 <__gedf2+0x7e>
    68fe:	45cc      	cmp	ip, r9
    6900:	d02d      	beq.n	695e <__gedf2+0xaa>
    6902:	4665      	mov	r5, ip
    6904:	4268      	negs	r0, r5
    6906:	2301      	movs	r3, #1
    6908:	4318      	orrs	r0, r3
    690a:	e018      	b.n	693e <__gedf2+0x8a>
    690c:	2d00      	cmp	r5, #0
    690e:	d1f6      	bne.n	68fe <__gedf2+0x4a>
    6910:	1c28      	adds	r0, r5, #0
    6912:	4659      	mov	r1, fp
    6914:	430a      	orrs	r2, r1
    6916:	4253      	negs	r3, r2
    6918:	4153      	adcs	r3, r2
    691a:	2800      	cmp	r0, #0
    691c:	d106      	bne.n	692c <__gedf2+0x78>
    691e:	2b00      	cmp	r3, #0
    6920:	d0ed      	beq.n	68fe <__gedf2+0x4a>
    6922:	4663      	mov	r3, ip
    6924:	4258      	negs	r0, r3
    6926:	2301      	movs	r3, #1
    6928:	4318      	orrs	r0, r3
    692a:	e008      	b.n	693e <__gedf2+0x8a>
    692c:	2000      	movs	r0, #0
    692e:	2b00      	cmp	r3, #0
    6930:	d105      	bne.n	693e <__gedf2+0x8a>
    6932:	464a      	mov	r2, r9
    6934:	4250      	negs	r0, r2
    6936:	4150      	adcs	r0, r2
    6938:	4240      	negs	r0, r0
    693a:	2301      	movs	r3, #1
    693c:	4318      	orrs	r0, r3
    693e:	bc3c      	pop	{r2, r3, r4, r5}
    6940:	4690      	mov	r8, r2
    6942:	4699      	mov	r9, r3
    6944:	46a2      	mov	sl, r4
    6946:	46ab      	mov	fp, r5
    6948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    694a:	1c3e      	adds	r6, r7, #0
    694c:	4306      	orrs	r6, r0
    694e:	d0c9      	beq.n	68e4 <__gedf2+0x30>
    6950:	2002      	movs	r0, #2
    6952:	4240      	negs	r0, r0
    6954:	e7f3      	b.n	693e <__gedf2+0x8a>
    6956:	465e      	mov	r6, fp
    6958:	4316      	orrs	r6, r2
    695a:	d0c6      	beq.n	68ea <__gedf2+0x36>
    695c:	e7f8      	b.n	6950 <__gedf2+0x9c>
    695e:	42ac      	cmp	r4, r5
    6960:	dc07      	bgt.n	6972 <__gedf2+0xbe>
    6962:	da0b      	bge.n	697c <__gedf2+0xc8>
    6964:	4661      	mov	r1, ip
    6966:	4248      	negs	r0, r1
    6968:	4148      	adcs	r0, r1
    696a:	4240      	negs	r0, r0
    696c:	2301      	movs	r3, #1
    696e:	4318      	orrs	r0, r3
    6970:	e7e5      	b.n	693e <__gedf2+0x8a>
    6972:	4666      	mov	r6, ip
    6974:	4270      	negs	r0, r6
    6976:	2301      	movs	r3, #1
    6978:	4318      	orrs	r0, r3
    697a:	e7e0      	b.n	693e <__gedf2+0x8a>
    697c:	455f      	cmp	r7, fp
    697e:	d80a      	bhi.n	6996 <__gedf2+0xe2>
    6980:	d00e      	beq.n	69a0 <__gedf2+0xec>
    6982:	2000      	movs	r0, #0
    6984:	455f      	cmp	r7, fp
    6986:	d2da      	bcs.n	693e <__gedf2+0x8a>
    6988:	4665      	mov	r5, ip
    698a:	4268      	negs	r0, r5
    698c:	4168      	adcs	r0, r5
    698e:	4240      	negs	r0, r0
    6990:	2301      	movs	r3, #1
    6992:	4318      	orrs	r0, r3
    6994:	e7d3      	b.n	693e <__gedf2+0x8a>
    6996:	4662      	mov	r2, ip
    6998:	4250      	negs	r0, r2
    699a:	2301      	movs	r3, #1
    699c:	4318      	orrs	r0, r3
    699e:	e7ce      	b.n	693e <__gedf2+0x8a>
    69a0:	45d0      	cmp	r8, sl
    69a2:	d8f8      	bhi.n	6996 <__gedf2+0xe2>
    69a4:	2000      	movs	r0, #0
    69a6:	45d0      	cmp	r8, sl
    69a8:	d3ee      	bcc.n	6988 <__gedf2+0xd4>
    69aa:	e7c8      	b.n	693e <__gedf2+0x8a>
    69ac:	000007ff 	.word	0x000007ff

000069b0 <__ledf2>:
    69b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    69b2:	4656      	mov	r6, sl
    69b4:	464d      	mov	r5, r9
    69b6:	4644      	mov	r4, r8
    69b8:	465f      	mov	r7, fp
    69ba:	b4f0      	push	{r4, r5, r6, r7}
    69bc:	1c0d      	adds	r5, r1, #0
    69be:	b083      	sub	sp, #12
    69c0:	1c04      	adds	r4, r0, #0
    69c2:	9001      	str	r0, [sp, #4]
    69c4:	0fe8      	lsrs	r0, r5, #31
    69c6:	4681      	mov	r9, r0
    69c8:	0318      	lsls	r0, r3, #12
    69ca:	030f      	lsls	r7, r1, #12
    69cc:	0b00      	lsrs	r0, r0, #12
    69ce:	0b3f      	lsrs	r7, r7, #12
    69d0:	4684      	mov	ip, r0
    69d2:	4835      	ldr	r0, [pc, #212]	; (6aa8 <__ledf2+0xf8>)
    69d4:	9700      	str	r7, [sp, #0]
    69d6:	0049      	lsls	r1, r1, #1
    69d8:	005e      	lsls	r6, r3, #1
    69da:	0fdf      	lsrs	r7, r3, #31
    69dc:	0d49      	lsrs	r1, r1, #21
    69de:	4692      	mov	sl, r2
    69e0:	0d76      	lsrs	r6, r6, #21
    69e2:	46b8      	mov	r8, r7
    69e4:	4281      	cmp	r1, r0
    69e6:	d034      	beq.n	6a52 <__ledf2+0xa2>
    69e8:	482f      	ldr	r0, [pc, #188]	; (6aa8 <__ledf2+0xf8>)
    69ea:	4286      	cmp	r6, r0
    69ec:	d036      	beq.n	6a5c <__ledf2+0xac>
    69ee:	2900      	cmp	r1, #0
    69f0:	d018      	beq.n	6a24 <__ledf2+0x74>
    69f2:	2e00      	cmp	r6, #0
    69f4:	d11f      	bne.n	6a36 <__ledf2+0x86>
    69f6:	1c34      	adds	r4, r6, #0
    69f8:	4667      	mov	r7, ip
    69fa:	433a      	orrs	r2, r7
    69fc:	4253      	negs	r3, r2
    69fe:	4153      	adcs	r3, r2
    6a00:	2c00      	cmp	r4, #0
    6a02:	d01f      	beq.n	6a44 <__ledf2+0x94>
    6a04:	2000      	movs	r0, #0
    6a06:	2b00      	cmp	r3, #0
    6a08:	d105      	bne.n	6a16 <__ledf2+0x66>
    6a0a:	4642      	mov	r2, r8
    6a0c:	4250      	negs	r0, r2
    6a0e:	4150      	adcs	r0, r2
    6a10:	4240      	negs	r0, r0
    6a12:	2301      	movs	r3, #1
    6a14:	4318      	orrs	r0, r3
    6a16:	b003      	add	sp, #12
    6a18:	bc3c      	pop	{r2, r3, r4, r5}
    6a1a:	4690      	mov	r8, r2
    6a1c:	4699      	mov	r9, r3
    6a1e:	46a2      	mov	sl, r4
    6a20:	46ab      	mov	fp, r5
    6a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a24:	9800      	ldr	r0, [sp, #0]
    6a26:	4304      	orrs	r4, r0
    6a28:	4260      	negs	r0, r4
    6a2a:	4160      	adcs	r0, r4
    6a2c:	1c04      	adds	r4, r0, #0
    6a2e:	2e00      	cmp	r6, #0
    6a30:	d0e2      	beq.n	69f8 <__ledf2+0x48>
    6a32:	2800      	cmp	r0, #0
    6a34:	d1e9      	bne.n	6a0a <__ledf2+0x5a>
    6a36:	45c1      	cmp	r9, r8
    6a38:	d015      	beq.n	6a66 <__ledf2+0xb6>
    6a3a:	464f      	mov	r7, r9
    6a3c:	4278      	negs	r0, r7
    6a3e:	2301      	movs	r3, #1
    6a40:	4318      	orrs	r0, r3
    6a42:	e7e8      	b.n	6a16 <__ledf2+0x66>
    6a44:	2b00      	cmp	r3, #0
    6a46:	d0f6      	beq.n	6a36 <__ledf2+0x86>
    6a48:	464b      	mov	r3, r9
    6a4a:	4258      	negs	r0, r3
    6a4c:	2301      	movs	r3, #1
    6a4e:	4318      	orrs	r0, r3
    6a50:	e7e1      	b.n	6a16 <__ledf2+0x66>
    6a52:	9f00      	ldr	r7, [sp, #0]
    6a54:	2002      	movs	r0, #2
    6a56:	4327      	orrs	r7, r4
    6a58:	d1dd      	bne.n	6a16 <__ledf2+0x66>
    6a5a:	e7c5      	b.n	69e8 <__ledf2+0x38>
    6a5c:	4667      	mov	r7, ip
    6a5e:	2002      	movs	r0, #2
    6a60:	4317      	orrs	r7, r2
    6a62:	d1d8      	bne.n	6a16 <__ledf2+0x66>
    6a64:	e7c3      	b.n	69ee <__ledf2+0x3e>
    6a66:	42b1      	cmp	r1, r6
    6a68:	dd04      	ble.n	6a74 <__ledf2+0xc4>
    6a6a:	464a      	mov	r2, r9
    6a6c:	4250      	negs	r0, r2
    6a6e:	2301      	movs	r3, #1
    6a70:	4318      	orrs	r0, r3
    6a72:	e7d0      	b.n	6a16 <__ledf2+0x66>
    6a74:	42b1      	cmp	r1, r6
    6a76:	db07      	blt.n	6a88 <__ledf2+0xd8>
    6a78:	9800      	ldr	r0, [sp, #0]
    6a7a:	4560      	cmp	r0, ip
    6a7c:	d8e4      	bhi.n	6a48 <__ledf2+0x98>
    6a7e:	d00a      	beq.n	6a96 <__ledf2+0xe6>
    6a80:	9f00      	ldr	r7, [sp, #0]
    6a82:	2000      	movs	r0, #0
    6a84:	4567      	cmp	r7, ip
    6a86:	d2c6      	bcs.n	6a16 <__ledf2+0x66>
    6a88:	464f      	mov	r7, r9
    6a8a:	4278      	negs	r0, r7
    6a8c:	4178      	adcs	r0, r7
    6a8e:	4240      	negs	r0, r0
    6a90:	2301      	movs	r3, #1
    6a92:	4318      	orrs	r0, r3
    6a94:	e7bf      	b.n	6a16 <__ledf2+0x66>
    6a96:	9a01      	ldr	r2, [sp, #4]
    6a98:	4552      	cmp	r2, sl
    6a9a:	d8d5      	bhi.n	6a48 <__ledf2+0x98>
    6a9c:	9a01      	ldr	r2, [sp, #4]
    6a9e:	2000      	movs	r0, #0
    6aa0:	4552      	cmp	r2, sl
    6aa2:	d3f1      	bcc.n	6a88 <__ledf2+0xd8>
    6aa4:	e7b7      	b.n	6a16 <__ledf2+0x66>
    6aa6:	46c0      	nop			; (mov r8, r8)
    6aa8:	000007ff 	.word	0x000007ff

00006aac <__libc_init_array>:
    6aac:	b570      	push	{r4, r5, r6, lr}
    6aae:	4b0e      	ldr	r3, [pc, #56]	; (6ae8 <__libc_init_array+0x3c>)
    6ab0:	4d0e      	ldr	r5, [pc, #56]	; (6aec <__libc_init_array+0x40>)
    6ab2:	2400      	movs	r4, #0
    6ab4:	1aed      	subs	r5, r5, r3
    6ab6:	10ad      	asrs	r5, r5, #2
    6ab8:	1c1e      	adds	r6, r3, #0
    6aba:	42ac      	cmp	r4, r5
    6abc:	d004      	beq.n	6ac8 <__libc_init_array+0x1c>
    6abe:	00a3      	lsls	r3, r4, #2
    6ac0:	58f3      	ldr	r3, [r6, r3]
    6ac2:	4798      	blx	r3
    6ac4:	3401      	adds	r4, #1
    6ac6:	e7f8      	b.n	6aba <__libc_init_array+0xe>
    6ac8:	f001 f988 	bl	7ddc <_init>
    6acc:	4b08      	ldr	r3, [pc, #32]	; (6af0 <__libc_init_array+0x44>)
    6ace:	4d09      	ldr	r5, [pc, #36]	; (6af4 <__libc_init_array+0x48>)
    6ad0:	2400      	movs	r4, #0
    6ad2:	1aed      	subs	r5, r5, r3
    6ad4:	10ad      	asrs	r5, r5, #2
    6ad6:	1c1e      	adds	r6, r3, #0
    6ad8:	42ac      	cmp	r4, r5
    6ada:	d004      	beq.n	6ae6 <__libc_init_array+0x3a>
    6adc:	00a3      	lsls	r3, r4, #2
    6ade:	58f3      	ldr	r3, [r6, r3]
    6ae0:	4798      	blx	r3
    6ae2:	3401      	adds	r4, #1
    6ae4:	e7f8      	b.n	6ad8 <__libc_init_array+0x2c>
    6ae6:	bd70      	pop	{r4, r5, r6, pc}
    6ae8:	00007de8 	.word	0x00007de8
    6aec:	00007de8 	.word	0x00007de8
    6af0:	00007de8 	.word	0x00007de8
    6af4:	00007dec 	.word	0x00007dec

00006af8 <memcpy>:
    6af8:	b510      	push	{r4, lr}
    6afa:	2300      	movs	r3, #0
    6afc:	4293      	cmp	r3, r2
    6afe:	d003      	beq.n	6b08 <memcpy+0x10>
    6b00:	5ccc      	ldrb	r4, [r1, r3]
    6b02:	54c4      	strb	r4, [r0, r3]
    6b04:	3301      	adds	r3, #1
    6b06:	e7f9      	b.n	6afc <memcpy+0x4>
    6b08:	bd10      	pop	{r4, pc}

00006b0a <memset>:
    6b0a:	1c03      	adds	r3, r0, #0
    6b0c:	1882      	adds	r2, r0, r2
    6b0e:	4293      	cmp	r3, r2
    6b10:	d002      	beq.n	6b18 <memset+0xe>
    6b12:	7019      	strb	r1, [r3, #0]
    6b14:	3301      	adds	r3, #1
    6b16:	e7fa      	b.n	6b0e <memset+0x4>
    6b18:	4770      	bx	lr
	...

00006b1c <iprintf>:
    6b1c:	b40f      	push	{r0, r1, r2, r3}
    6b1e:	4b0b      	ldr	r3, [pc, #44]	; (6b4c <iprintf+0x30>)
    6b20:	b513      	push	{r0, r1, r4, lr}
    6b22:	681c      	ldr	r4, [r3, #0]
    6b24:	2c00      	cmp	r4, #0
    6b26:	d005      	beq.n	6b34 <iprintf+0x18>
    6b28:	69a3      	ldr	r3, [r4, #24]
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d102      	bne.n	6b34 <iprintf+0x18>
    6b2e:	1c20      	adds	r0, r4, #0
    6b30:	f000 fd68 	bl	7604 <__sinit>
    6b34:	ab05      	add	r3, sp, #20
    6b36:	68a1      	ldr	r1, [r4, #8]
    6b38:	1c20      	adds	r0, r4, #0
    6b3a:	9a04      	ldr	r2, [sp, #16]
    6b3c:	9301      	str	r3, [sp, #4]
    6b3e:	f000 f8fb 	bl	6d38 <_vfiprintf_r>
    6b42:	bc16      	pop	{r1, r2, r4}
    6b44:	bc08      	pop	{r3}
    6b46:	b004      	add	sp, #16
    6b48:	4718      	bx	r3
    6b4a:	46c0      	nop			; (mov r8, r8)
    6b4c:	2000006c 	.word	0x2000006c

00006b50 <rand>:
    6b50:	4b17      	ldr	r3, [pc, #92]	; (6bb0 <rand+0x60>)
    6b52:	b510      	push	{r4, lr}
    6b54:	681c      	ldr	r4, [r3, #0]
    6b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6b58:	2b00      	cmp	r3, #0
    6b5a:	d115      	bne.n	6b88 <rand+0x38>
    6b5c:	2018      	movs	r0, #24
    6b5e:	f000 fe11 	bl	7784 <malloc>
    6b62:	4b14      	ldr	r3, [pc, #80]	; (6bb4 <rand+0x64>)
    6b64:	63a0      	str	r0, [r4, #56]	; 0x38
    6b66:	8003      	strh	r3, [r0, #0]
    6b68:	4b13      	ldr	r3, [pc, #76]	; (6bb8 <rand+0x68>)
    6b6a:	8043      	strh	r3, [r0, #2]
    6b6c:	4b13      	ldr	r3, [pc, #76]	; (6bbc <rand+0x6c>)
    6b6e:	8083      	strh	r3, [r0, #4]
    6b70:	4b13      	ldr	r3, [pc, #76]	; (6bc0 <rand+0x70>)
    6b72:	80c3      	strh	r3, [r0, #6]
    6b74:	4b13      	ldr	r3, [pc, #76]	; (6bc4 <rand+0x74>)
    6b76:	8103      	strh	r3, [r0, #8]
    6b78:	2305      	movs	r3, #5
    6b7a:	8143      	strh	r3, [r0, #10]
    6b7c:	230b      	movs	r3, #11
    6b7e:	8183      	strh	r3, [r0, #12]
    6b80:	2201      	movs	r2, #1
    6b82:	2300      	movs	r3, #0
    6b84:	6102      	str	r2, [r0, #16]
    6b86:	6143      	str	r3, [r0, #20]
    6b88:	4b08      	ldr	r3, [pc, #32]	; (6bac <rand+0x5c>)
    6b8a:	4a07      	ldr	r2, [pc, #28]	; (6ba8 <rand+0x58>)
    6b8c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    6b8e:	6920      	ldr	r0, [r4, #16]
    6b90:	6961      	ldr	r1, [r4, #20]
    6b92:	f7fe f8c7 	bl	4d24 <__aeabi_lmul>
    6b96:	2201      	movs	r2, #1
    6b98:	2300      	movs	r3, #0
    6b9a:	1880      	adds	r0, r0, r2
    6b9c:	4159      	adcs	r1, r3
    6b9e:	6120      	str	r0, [r4, #16]
    6ba0:	6161      	str	r1, [r4, #20]
    6ba2:	0048      	lsls	r0, r1, #1
    6ba4:	0840      	lsrs	r0, r0, #1
    6ba6:	bd10      	pop	{r4, pc}
    6ba8:	4c957f2d 	.word	0x4c957f2d
    6bac:	5851f42d 	.word	0x5851f42d
    6bb0:	2000006c 	.word	0x2000006c
    6bb4:	0000330e 	.word	0x0000330e
    6bb8:	ffffabcd 	.word	0xffffabcd
    6bbc:	00001234 	.word	0x00001234
    6bc0:	ffffe66d 	.word	0xffffe66d
    6bc4:	ffffdeec 	.word	0xffffdeec

00006bc8 <setbuf>:
    6bc8:	b508      	push	{r3, lr}
    6bca:	424a      	negs	r2, r1
    6bcc:	414a      	adcs	r2, r1
    6bce:	2380      	movs	r3, #128	; 0x80
    6bd0:	0052      	lsls	r2, r2, #1
    6bd2:	00db      	lsls	r3, r3, #3
    6bd4:	f000 f802 	bl	6bdc <setvbuf>
    6bd8:	bd08      	pop	{r3, pc}
	...

00006bdc <setvbuf>:
    6bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6bde:	1c1e      	adds	r6, r3, #0
    6be0:	4b3c      	ldr	r3, [pc, #240]	; (6cd4 <setvbuf+0xf8>)
    6be2:	1c04      	adds	r4, r0, #0
    6be4:	681d      	ldr	r5, [r3, #0]
    6be6:	1c0f      	adds	r7, r1, #0
    6be8:	9201      	str	r2, [sp, #4]
    6bea:	2d00      	cmp	r5, #0
    6bec:	d005      	beq.n	6bfa <setvbuf+0x1e>
    6bee:	69aa      	ldr	r2, [r5, #24]
    6bf0:	2a00      	cmp	r2, #0
    6bf2:	d102      	bne.n	6bfa <setvbuf+0x1e>
    6bf4:	1c28      	adds	r0, r5, #0
    6bf6:	f000 fd05 	bl	7604 <__sinit>
    6bfa:	4b37      	ldr	r3, [pc, #220]	; (6cd8 <setvbuf+0xfc>)
    6bfc:	429c      	cmp	r4, r3
    6bfe:	d101      	bne.n	6c04 <setvbuf+0x28>
    6c00:	686c      	ldr	r4, [r5, #4]
    6c02:	e008      	b.n	6c16 <setvbuf+0x3a>
    6c04:	4b35      	ldr	r3, [pc, #212]	; (6cdc <setvbuf+0x100>)
    6c06:	429c      	cmp	r4, r3
    6c08:	d101      	bne.n	6c0e <setvbuf+0x32>
    6c0a:	68ac      	ldr	r4, [r5, #8]
    6c0c:	e003      	b.n	6c16 <setvbuf+0x3a>
    6c0e:	4b34      	ldr	r3, [pc, #208]	; (6ce0 <setvbuf+0x104>)
    6c10:	429c      	cmp	r4, r3
    6c12:	d100      	bne.n	6c16 <setvbuf+0x3a>
    6c14:	68ec      	ldr	r4, [r5, #12]
    6c16:	9b01      	ldr	r3, [sp, #4]
    6c18:	2b02      	cmp	r3, #2
    6c1a:	d857      	bhi.n	6ccc <setvbuf+0xf0>
    6c1c:	2e00      	cmp	r6, #0
    6c1e:	db55      	blt.n	6ccc <setvbuf+0xf0>
    6c20:	1c28      	adds	r0, r5, #0
    6c22:	1c21      	adds	r1, r4, #0
    6c24:	f000 fc6e 	bl	7504 <_fflush_r>
    6c28:	2300      	movs	r3, #0
    6c2a:	6063      	str	r3, [r4, #4]
    6c2c:	61a3      	str	r3, [r4, #24]
    6c2e:	89a3      	ldrh	r3, [r4, #12]
    6c30:	061a      	lsls	r2, r3, #24
    6c32:	d503      	bpl.n	6c3c <setvbuf+0x60>
    6c34:	1c28      	adds	r0, r5, #0
    6c36:	6921      	ldr	r1, [r4, #16]
    6c38:	f000 fdba 	bl	77b0 <_free_r>
    6c3c:	89a3      	ldrh	r3, [r4, #12]
    6c3e:	2283      	movs	r2, #131	; 0x83
    6c40:	4393      	bics	r3, r2
    6c42:	81a3      	strh	r3, [r4, #12]
    6c44:	9b01      	ldr	r3, [sp, #4]
    6c46:	2b02      	cmp	r3, #2
    6c48:	d013      	beq.n	6c72 <setvbuf+0x96>
    6c4a:	2f00      	cmp	r7, #0
    6c4c:	d125      	bne.n	6c9a <setvbuf+0xbe>
    6c4e:	2e00      	cmp	r6, #0
    6c50:	d101      	bne.n	6c56 <setvbuf+0x7a>
    6c52:	2680      	movs	r6, #128	; 0x80
    6c54:	00f6      	lsls	r6, r6, #3
    6c56:	1c30      	adds	r0, r6, #0
    6c58:	f000 fd94 	bl	7784 <malloc>
    6c5c:	1e07      	subs	r7, r0, #0
    6c5e:	d118      	bne.n	6c92 <setvbuf+0xb6>
    6c60:	2080      	movs	r0, #128	; 0x80
    6c62:	00c0      	lsls	r0, r0, #3
    6c64:	f000 fd8e 	bl	7784 <malloc>
    6c68:	1e07      	subs	r7, r0, #0
    6c6a:	d110      	bne.n	6c8e <setvbuf+0xb2>
    6c6c:	2001      	movs	r0, #1
    6c6e:	4240      	negs	r0, r0
    6c70:	e000      	b.n	6c74 <setvbuf+0x98>
    6c72:	2000      	movs	r0, #0
    6c74:	89a3      	ldrh	r3, [r4, #12]
    6c76:	2202      	movs	r2, #2
    6c78:	4313      	orrs	r3, r2
    6c7a:	81a3      	strh	r3, [r4, #12]
    6c7c:	2300      	movs	r3, #0
    6c7e:	60a3      	str	r3, [r4, #8]
    6c80:	1c23      	adds	r3, r4, #0
    6c82:	3347      	adds	r3, #71	; 0x47
    6c84:	6023      	str	r3, [r4, #0]
    6c86:	6123      	str	r3, [r4, #16]
    6c88:	2301      	movs	r3, #1
    6c8a:	6163      	str	r3, [r4, #20]
    6c8c:	e020      	b.n	6cd0 <setvbuf+0xf4>
    6c8e:	2680      	movs	r6, #128	; 0x80
    6c90:	00f6      	lsls	r6, r6, #3
    6c92:	89a3      	ldrh	r3, [r4, #12]
    6c94:	2280      	movs	r2, #128	; 0x80
    6c96:	4313      	orrs	r3, r2
    6c98:	81a3      	strh	r3, [r4, #12]
    6c9a:	9a01      	ldr	r2, [sp, #4]
    6c9c:	2a01      	cmp	r2, #1
    6c9e:	d104      	bne.n	6caa <setvbuf+0xce>
    6ca0:	89a3      	ldrh	r3, [r4, #12]
    6ca2:	4313      	orrs	r3, r2
    6ca4:	81a3      	strh	r3, [r4, #12]
    6ca6:	4273      	negs	r3, r6
    6ca8:	61a3      	str	r3, [r4, #24]
    6caa:	4b0e      	ldr	r3, [pc, #56]	; (6ce4 <setvbuf+0x108>)
    6cac:	2000      	movs	r0, #0
    6cae:	62ab      	str	r3, [r5, #40]	; 0x28
    6cb0:	89a3      	ldrh	r3, [r4, #12]
    6cb2:	6027      	str	r7, [r4, #0]
    6cb4:	6127      	str	r7, [r4, #16]
    6cb6:	6166      	str	r6, [r4, #20]
    6cb8:	071a      	lsls	r2, r3, #28
    6cba:	d509      	bpl.n	6cd0 <setvbuf+0xf4>
    6cbc:	2203      	movs	r2, #3
    6cbe:	4013      	ands	r3, r2
    6cc0:	425a      	negs	r2, r3
    6cc2:	4153      	adcs	r3, r2
    6cc4:	425b      	negs	r3, r3
    6cc6:	401e      	ands	r6, r3
    6cc8:	60a6      	str	r6, [r4, #8]
    6cca:	e001      	b.n	6cd0 <setvbuf+0xf4>
    6ccc:	2001      	movs	r0, #1
    6cce:	4240      	negs	r0, r0
    6cd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6cd2:	46c0      	nop			; (mov r8, r8)
    6cd4:	2000006c 	.word	0x2000006c
    6cd8:	00007d7c 	.word	0x00007d7c
    6cdc:	00007d9c 	.word	0x00007d9c
    6ce0:	00007dbc 	.word	0x00007dbc
    6ce4:	0000755d 	.word	0x0000755d

00006ce8 <__sfputc_r>:
    6ce8:	6893      	ldr	r3, [r2, #8]
    6cea:	b510      	push	{r4, lr}
    6cec:	3b01      	subs	r3, #1
    6cee:	6093      	str	r3, [r2, #8]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	da05      	bge.n	6d00 <__sfputc_r+0x18>
    6cf4:	6994      	ldr	r4, [r2, #24]
    6cf6:	42a3      	cmp	r3, r4
    6cf8:	db08      	blt.n	6d0c <__sfputc_r+0x24>
    6cfa:	b2cb      	uxtb	r3, r1
    6cfc:	2b0a      	cmp	r3, #10
    6cfe:	d005      	beq.n	6d0c <__sfputc_r+0x24>
    6d00:	6813      	ldr	r3, [r2, #0]
    6d02:	1c58      	adds	r0, r3, #1
    6d04:	6010      	str	r0, [r2, #0]
    6d06:	7019      	strb	r1, [r3, #0]
    6d08:	b2c8      	uxtb	r0, r1
    6d0a:	e001      	b.n	6d10 <__sfputc_r+0x28>
    6d0c:	f000 faa6 	bl	725c <__swbuf_r>
    6d10:	bd10      	pop	{r4, pc}

00006d12 <__sfputs_r>:
    6d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d14:	1c06      	adds	r6, r0, #0
    6d16:	1c0f      	adds	r7, r1, #0
    6d18:	1c14      	adds	r4, r2, #0
    6d1a:	18d5      	adds	r5, r2, r3
    6d1c:	42ac      	cmp	r4, r5
    6d1e:	d008      	beq.n	6d32 <__sfputs_r+0x20>
    6d20:	7821      	ldrb	r1, [r4, #0]
    6d22:	1c30      	adds	r0, r6, #0
    6d24:	1c3a      	adds	r2, r7, #0
    6d26:	f7ff ffdf 	bl	6ce8 <__sfputc_r>
    6d2a:	3401      	adds	r4, #1
    6d2c:	1c43      	adds	r3, r0, #1
    6d2e:	d1f5      	bne.n	6d1c <__sfputs_r+0xa>
    6d30:	e000      	b.n	6d34 <__sfputs_r+0x22>
    6d32:	2000      	movs	r0, #0
    6d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006d38 <_vfiprintf_r>:
    6d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d3a:	b09f      	sub	sp, #124	; 0x7c
    6d3c:	1c06      	adds	r6, r0, #0
    6d3e:	1c0f      	adds	r7, r1, #0
    6d40:	9203      	str	r2, [sp, #12]
    6d42:	9305      	str	r3, [sp, #20]
    6d44:	2800      	cmp	r0, #0
    6d46:	d004      	beq.n	6d52 <_vfiprintf_r+0x1a>
    6d48:	6981      	ldr	r1, [r0, #24]
    6d4a:	2900      	cmp	r1, #0
    6d4c:	d101      	bne.n	6d52 <_vfiprintf_r+0x1a>
    6d4e:	f000 fc59 	bl	7604 <__sinit>
    6d52:	4b75      	ldr	r3, [pc, #468]	; (6f28 <_vfiprintf_r+0x1f0>)
    6d54:	429f      	cmp	r7, r3
    6d56:	d101      	bne.n	6d5c <_vfiprintf_r+0x24>
    6d58:	6877      	ldr	r7, [r6, #4]
    6d5a:	e008      	b.n	6d6e <_vfiprintf_r+0x36>
    6d5c:	4b73      	ldr	r3, [pc, #460]	; (6f2c <_vfiprintf_r+0x1f4>)
    6d5e:	429f      	cmp	r7, r3
    6d60:	d101      	bne.n	6d66 <_vfiprintf_r+0x2e>
    6d62:	68b7      	ldr	r7, [r6, #8]
    6d64:	e003      	b.n	6d6e <_vfiprintf_r+0x36>
    6d66:	4b72      	ldr	r3, [pc, #456]	; (6f30 <_vfiprintf_r+0x1f8>)
    6d68:	429f      	cmp	r7, r3
    6d6a:	d100      	bne.n	6d6e <_vfiprintf_r+0x36>
    6d6c:	68f7      	ldr	r7, [r6, #12]
    6d6e:	89bb      	ldrh	r3, [r7, #12]
    6d70:	071a      	lsls	r2, r3, #28
    6d72:	d50a      	bpl.n	6d8a <_vfiprintf_r+0x52>
    6d74:	693b      	ldr	r3, [r7, #16]
    6d76:	2b00      	cmp	r3, #0
    6d78:	d007      	beq.n	6d8a <_vfiprintf_r+0x52>
    6d7a:	ad06      	add	r5, sp, #24
    6d7c:	2300      	movs	r3, #0
    6d7e:	616b      	str	r3, [r5, #20]
    6d80:	2320      	movs	r3, #32
    6d82:	766b      	strb	r3, [r5, #25]
    6d84:	2330      	movs	r3, #48	; 0x30
    6d86:	76ab      	strb	r3, [r5, #26]
    6d88:	e03b      	b.n	6e02 <_vfiprintf_r+0xca>
    6d8a:	1c30      	adds	r0, r6, #0
    6d8c:	1c39      	adds	r1, r7, #0
    6d8e:	f000 fabd 	bl	730c <__swsetup_r>
    6d92:	2800      	cmp	r0, #0
    6d94:	d0f1      	beq.n	6d7a <_vfiprintf_r+0x42>
    6d96:	2001      	movs	r0, #1
    6d98:	4240      	negs	r0, r0
    6d9a:	e0c2      	b.n	6f22 <_vfiprintf_r+0x1ea>
    6d9c:	9a05      	ldr	r2, [sp, #20]
    6d9e:	1d11      	adds	r1, r2, #4
    6da0:	6812      	ldr	r2, [r2, #0]
    6da2:	9105      	str	r1, [sp, #20]
    6da4:	2a00      	cmp	r2, #0
    6da6:	db76      	blt.n	6e96 <_vfiprintf_r+0x15e>
    6da8:	9209      	str	r2, [sp, #36]	; 0x24
    6daa:	3401      	adds	r4, #1
    6dac:	7823      	ldrb	r3, [r4, #0]
    6dae:	2b2e      	cmp	r3, #46	; 0x2e
    6db0:	d100      	bne.n	6db4 <_vfiprintf_r+0x7c>
    6db2:	e081      	b.n	6eb8 <_vfiprintf_r+0x180>
    6db4:	7821      	ldrb	r1, [r4, #0]
    6db6:	485f      	ldr	r0, [pc, #380]	; (6f34 <_vfiprintf_r+0x1fc>)
    6db8:	2203      	movs	r2, #3
    6dba:	f000 fced 	bl	7798 <memchr>
    6dbe:	2800      	cmp	r0, #0
    6dc0:	d007      	beq.n	6dd2 <_vfiprintf_r+0x9a>
    6dc2:	495c      	ldr	r1, [pc, #368]	; (6f34 <_vfiprintf_r+0x1fc>)
    6dc4:	682a      	ldr	r2, [r5, #0]
    6dc6:	1a43      	subs	r3, r0, r1
    6dc8:	2040      	movs	r0, #64	; 0x40
    6dca:	4098      	lsls	r0, r3
    6dcc:	4310      	orrs	r0, r2
    6dce:	6028      	str	r0, [r5, #0]
    6dd0:	3401      	adds	r4, #1
    6dd2:	7821      	ldrb	r1, [r4, #0]
    6dd4:	1c63      	adds	r3, r4, #1
    6dd6:	4858      	ldr	r0, [pc, #352]	; (6f38 <_vfiprintf_r+0x200>)
    6dd8:	2206      	movs	r2, #6
    6dda:	9303      	str	r3, [sp, #12]
    6ddc:	7629      	strb	r1, [r5, #24]
    6dde:	f000 fcdb 	bl	7798 <memchr>
    6de2:	2800      	cmp	r0, #0
    6de4:	d100      	bne.n	6de8 <_vfiprintf_r+0xb0>
    6de6:	e08a      	b.n	6efe <_vfiprintf_r+0x1c6>
    6de8:	4b54      	ldr	r3, [pc, #336]	; (6f3c <_vfiprintf_r+0x204>)
    6dea:	2b00      	cmp	r3, #0
    6dec:	d17e      	bne.n	6eec <_vfiprintf_r+0x1b4>
    6dee:	9b05      	ldr	r3, [sp, #20]
    6df0:	2207      	movs	r2, #7
    6df2:	3307      	adds	r3, #7
    6df4:	4393      	bics	r3, r2
    6df6:	3308      	adds	r3, #8
    6df8:	9305      	str	r3, [sp, #20]
    6dfa:	696a      	ldr	r2, [r5, #20]
    6dfc:	9904      	ldr	r1, [sp, #16]
    6dfe:	1853      	adds	r3, r2, r1
    6e00:	616b      	str	r3, [r5, #20]
    6e02:	9c03      	ldr	r4, [sp, #12]
    6e04:	7823      	ldrb	r3, [r4, #0]
    6e06:	2b00      	cmp	r3, #0
    6e08:	d104      	bne.n	6e14 <_vfiprintf_r+0xdc>
    6e0a:	9903      	ldr	r1, [sp, #12]
    6e0c:	1a61      	subs	r1, r4, r1
    6e0e:	9102      	str	r1, [sp, #8]
    6e10:	d010      	beq.n	6e34 <_vfiprintf_r+0xfc>
    6e12:	e003      	b.n	6e1c <_vfiprintf_r+0xe4>
    6e14:	2b25      	cmp	r3, #37	; 0x25
    6e16:	d0f8      	beq.n	6e0a <_vfiprintf_r+0xd2>
    6e18:	3401      	adds	r4, #1
    6e1a:	e7f3      	b.n	6e04 <_vfiprintf_r+0xcc>
    6e1c:	1c30      	adds	r0, r6, #0
    6e1e:	1c39      	adds	r1, r7, #0
    6e20:	9a03      	ldr	r2, [sp, #12]
    6e22:	9b02      	ldr	r3, [sp, #8]
    6e24:	f7ff ff75 	bl	6d12 <__sfputs_r>
    6e28:	3001      	adds	r0, #1
    6e2a:	d075      	beq.n	6f18 <_vfiprintf_r+0x1e0>
    6e2c:	696a      	ldr	r2, [r5, #20]
    6e2e:	9902      	ldr	r1, [sp, #8]
    6e30:	1853      	adds	r3, r2, r1
    6e32:	616b      	str	r3, [r5, #20]
    6e34:	7823      	ldrb	r3, [r4, #0]
    6e36:	2b00      	cmp	r3, #0
    6e38:	d06e      	beq.n	6f18 <_vfiprintf_r+0x1e0>
    6e3a:	2201      	movs	r2, #1
    6e3c:	4252      	negs	r2, r2
    6e3e:	606a      	str	r2, [r5, #4]
    6e40:	466a      	mov	r2, sp
    6e42:	2300      	movs	r3, #0
    6e44:	325b      	adds	r2, #91	; 0x5b
    6e46:	3401      	adds	r4, #1
    6e48:	602b      	str	r3, [r5, #0]
    6e4a:	60eb      	str	r3, [r5, #12]
    6e4c:	60ab      	str	r3, [r5, #8]
    6e4e:	7013      	strb	r3, [r2, #0]
    6e50:	65ab      	str	r3, [r5, #88]	; 0x58
    6e52:	7821      	ldrb	r1, [r4, #0]
    6e54:	483a      	ldr	r0, [pc, #232]	; (6f40 <_vfiprintf_r+0x208>)
    6e56:	2205      	movs	r2, #5
    6e58:	f000 fc9e 	bl	7798 <memchr>
    6e5c:	2800      	cmp	r0, #0
    6e5e:	d008      	beq.n	6e72 <_vfiprintf_r+0x13a>
    6e60:	4a37      	ldr	r2, [pc, #220]	; (6f40 <_vfiprintf_r+0x208>)
    6e62:	3401      	adds	r4, #1
    6e64:	1a83      	subs	r3, r0, r2
    6e66:	2001      	movs	r0, #1
    6e68:	4098      	lsls	r0, r3
    6e6a:	682b      	ldr	r3, [r5, #0]
    6e6c:	4318      	orrs	r0, r3
    6e6e:	6028      	str	r0, [r5, #0]
    6e70:	e7ef      	b.n	6e52 <_vfiprintf_r+0x11a>
    6e72:	682b      	ldr	r3, [r5, #0]
    6e74:	06d9      	lsls	r1, r3, #27
    6e76:	d503      	bpl.n	6e80 <_vfiprintf_r+0x148>
    6e78:	466a      	mov	r2, sp
    6e7a:	2120      	movs	r1, #32
    6e7c:	325b      	adds	r2, #91	; 0x5b
    6e7e:	7011      	strb	r1, [r2, #0]
    6e80:	071a      	lsls	r2, r3, #28
    6e82:	d503      	bpl.n	6e8c <_vfiprintf_r+0x154>
    6e84:	466a      	mov	r2, sp
    6e86:	212b      	movs	r1, #43	; 0x2b
    6e88:	325b      	adds	r2, #91	; 0x5b
    6e8a:	7011      	strb	r1, [r2, #0]
    6e8c:	7822      	ldrb	r2, [r4, #0]
    6e8e:	2a2a      	cmp	r2, #42	; 0x2a
    6e90:	d084      	beq.n	6d9c <_vfiprintf_r+0x64>
    6e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6e94:	e005      	b.n	6ea2 <_vfiprintf_r+0x16a>
    6e96:	4252      	negs	r2, r2
    6e98:	60ea      	str	r2, [r5, #12]
    6e9a:	2202      	movs	r2, #2
    6e9c:	4313      	orrs	r3, r2
    6e9e:	602b      	str	r3, [r5, #0]
    6ea0:	e783      	b.n	6daa <_vfiprintf_r+0x72>
    6ea2:	7822      	ldrb	r2, [r4, #0]
    6ea4:	3a30      	subs	r2, #48	; 0x30
    6ea6:	2a09      	cmp	r2, #9
    6ea8:	d804      	bhi.n	6eb4 <_vfiprintf_r+0x17c>
    6eaa:	210a      	movs	r1, #10
    6eac:	434b      	muls	r3, r1
    6eae:	3401      	adds	r4, #1
    6eb0:	189b      	adds	r3, r3, r2
    6eb2:	e7f6      	b.n	6ea2 <_vfiprintf_r+0x16a>
    6eb4:	9309      	str	r3, [sp, #36]	; 0x24
    6eb6:	e779      	b.n	6dac <_vfiprintf_r+0x74>
    6eb8:	7863      	ldrb	r3, [r4, #1]
    6eba:	2b2a      	cmp	r3, #42	; 0x2a
    6ebc:	d109      	bne.n	6ed2 <_vfiprintf_r+0x19a>
    6ebe:	9b05      	ldr	r3, [sp, #20]
    6ec0:	3402      	adds	r4, #2
    6ec2:	1d1a      	adds	r2, r3, #4
    6ec4:	681b      	ldr	r3, [r3, #0]
    6ec6:	9205      	str	r2, [sp, #20]
    6ec8:	2b00      	cmp	r3, #0
    6eca:	da0d      	bge.n	6ee8 <_vfiprintf_r+0x1b0>
    6ecc:	2301      	movs	r3, #1
    6ece:	425b      	negs	r3, r3
    6ed0:	e00a      	b.n	6ee8 <_vfiprintf_r+0x1b0>
    6ed2:	3401      	adds	r4, #1
    6ed4:	2300      	movs	r3, #0
    6ed6:	7822      	ldrb	r2, [r4, #0]
    6ed8:	3a30      	subs	r2, #48	; 0x30
    6eda:	2a09      	cmp	r2, #9
    6edc:	d804      	bhi.n	6ee8 <_vfiprintf_r+0x1b0>
    6ede:	210a      	movs	r1, #10
    6ee0:	434b      	muls	r3, r1
    6ee2:	3401      	adds	r4, #1
    6ee4:	189b      	adds	r3, r3, r2
    6ee6:	e7f6      	b.n	6ed6 <_vfiprintf_r+0x19e>
    6ee8:	9307      	str	r3, [sp, #28]
    6eea:	e763      	b.n	6db4 <_vfiprintf_r+0x7c>
    6eec:	ab05      	add	r3, sp, #20
    6eee:	9300      	str	r3, [sp, #0]
    6ef0:	1c30      	adds	r0, r6, #0
    6ef2:	1c29      	adds	r1, r5, #0
    6ef4:	1c3a      	adds	r2, r7, #0
    6ef6:	4b13      	ldr	r3, [pc, #76]	; (6f44 <_vfiprintf_r+0x20c>)
    6ef8:	e000      	b.n	6efc <_vfiprintf_r+0x1c4>
    6efa:	bf00      	nop
    6efc:	e007      	b.n	6f0e <_vfiprintf_r+0x1d6>
    6efe:	ab05      	add	r3, sp, #20
    6f00:	9300      	str	r3, [sp, #0]
    6f02:	1c30      	adds	r0, r6, #0
    6f04:	1c29      	adds	r1, r5, #0
    6f06:	1c3a      	adds	r2, r7, #0
    6f08:	4b0e      	ldr	r3, [pc, #56]	; (6f44 <_vfiprintf_r+0x20c>)
    6f0a:	f000 f891 	bl	7030 <_printf_i>
    6f0e:	9004      	str	r0, [sp, #16]
    6f10:	9904      	ldr	r1, [sp, #16]
    6f12:	3101      	adds	r1, #1
    6f14:	d000      	beq.n	6f18 <_vfiprintf_r+0x1e0>
    6f16:	e770      	b.n	6dfa <_vfiprintf_r+0xc2>
    6f18:	89bb      	ldrh	r3, [r7, #12]
    6f1a:	065a      	lsls	r2, r3, #25
    6f1c:	d500      	bpl.n	6f20 <_vfiprintf_r+0x1e8>
    6f1e:	e73a      	b.n	6d96 <_vfiprintf_r+0x5e>
    6f20:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6f22:	b01f      	add	sp, #124	; 0x7c
    6f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	00007d7c 	.word	0x00007d7c
    6f2c:	00007d9c 	.word	0x00007d9c
    6f30:	00007dbc 	.word	0x00007dbc
    6f34:	00007d4e 	.word	0x00007d4e
    6f38:	00007d52 	.word	0x00007d52
    6f3c:	00000000 	.word	0x00000000
    6f40:	00007d48 	.word	0x00007d48
    6f44:	00006d13 	.word	0x00006d13

00006f48 <_printf_common>:
    6f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f4a:	1c15      	adds	r5, r2, #0
    6f4c:	9301      	str	r3, [sp, #4]
    6f4e:	690a      	ldr	r2, [r1, #16]
    6f50:	688b      	ldr	r3, [r1, #8]
    6f52:	1c06      	adds	r6, r0, #0
    6f54:	1c0c      	adds	r4, r1, #0
    6f56:	4293      	cmp	r3, r2
    6f58:	da00      	bge.n	6f5c <_printf_common+0x14>
    6f5a:	1c13      	adds	r3, r2, #0
    6f5c:	1c22      	adds	r2, r4, #0
    6f5e:	602b      	str	r3, [r5, #0]
    6f60:	3243      	adds	r2, #67	; 0x43
    6f62:	7812      	ldrb	r2, [r2, #0]
    6f64:	2a00      	cmp	r2, #0
    6f66:	d001      	beq.n	6f6c <_printf_common+0x24>
    6f68:	3301      	adds	r3, #1
    6f6a:	602b      	str	r3, [r5, #0]
    6f6c:	6820      	ldr	r0, [r4, #0]
    6f6e:	0680      	lsls	r0, r0, #26
    6f70:	d502      	bpl.n	6f78 <_printf_common+0x30>
    6f72:	682b      	ldr	r3, [r5, #0]
    6f74:	3302      	adds	r3, #2
    6f76:	602b      	str	r3, [r5, #0]
    6f78:	6821      	ldr	r1, [r4, #0]
    6f7a:	2706      	movs	r7, #6
    6f7c:	400f      	ands	r7, r1
    6f7e:	d01f      	beq.n	6fc0 <_printf_common+0x78>
    6f80:	1c23      	adds	r3, r4, #0
    6f82:	3343      	adds	r3, #67	; 0x43
    6f84:	781b      	ldrb	r3, [r3, #0]
    6f86:	1e5a      	subs	r2, r3, #1
    6f88:	4193      	sbcs	r3, r2
    6f8a:	6822      	ldr	r2, [r4, #0]
    6f8c:	0692      	lsls	r2, r2, #26
    6f8e:	d51f      	bpl.n	6fd0 <_printf_common+0x88>
    6f90:	18e1      	adds	r1, r4, r3
    6f92:	3140      	adds	r1, #64	; 0x40
    6f94:	2030      	movs	r0, #48	; 0x30
    6f96:	70c8      	strb	r0, [r1, #3]
    6f98:	1c21      	adds	r1, r4, #0
    6f9a:	1c5a      	adds	r2, r3, #1
    6f9c:	3145      	adds	r1, #69	; 0x45
    6f9e:	7809      	ldrb	r1, [r1, #0]
    6fa0:	18a2      	adds	r2, r4, r2
    6fa2:	3240      	adds	r2, #64	; 0x40
    6fa4:	3302      	adds	r3, #2
    6fa6:	70d1      	strb	r1, [r2, #3]
    6fa8:	e012      	b.n	6fd0 <_printf_common+0x88>
    6faa:	1c22      	adds	r2, r4, #0
    6fac:	1c30      	adds	r0, r6, #0
    6fae:	9901      	ldr	r1, [sp, #4]
    6fb0:	3219      	adds	r2, #25
    6fb2:	2301      	movs	r3, #1
    6fb4:	9f08      	ldr	r7, [sp, #32]
    6fb6:	47b8      	blx	r7
    6fb8:	3001      	adds	r0, #1
    6fba:	d011      	beq.n	6fe0 <_printf_common+0x98>
    6fbc:	9f00      	ldr	r7, [sp, #0]
    6fbe:	3701      	adds	r7, #1
    6fc0:	9700      	str	r7, [sp, #0]
    6fc2:	68e0      	ldr	r0, [r4, #12]
    6fc4:	6829      	ldr	r1, [r5, #0]
    6fc6:	9f00      	ldr	r7, [sp, #0]
    6fc8:	1a43      	subs	r3, r0, r1
    6fca:	429f      	cmp	r7, r3
    6fcc:	dbed      	blt.n	6faa <_printf_common+0x62>
    6fce:	e7d7      	b.n	6f80 <_printf_common+0x38>
    6fd0:	1c22      	adds	r2, r4, #0
    6fd2:	1c30      	adds	r0, r6, #0
    6fd4:	9901      	ldr	r1, [sp, #4]
    6fd6:	3243      	adds	r2, #67	; 0x43
    6fd8:	9f08      	ldr	r7, [sp, #32]
    6fda:	47b8      	blx	r7
    6fdc:	3001      	adds	r0, #1
    6fde:	d102      	bne.n	6fe6 <_printf_common+0x9e>
    6fe0:	2001      	movs	r0, #1
    6fe2:	4240      	negs	r0, r0
    6fe4:	e023      	b.n	702e <_printf_common+0xe6>
    6fe6:	6820      	ldr	r0, [r4, #0]
    6fe8:	2106      	movs	r1, #6
    6fea:	682b      	ldr	r3, [r5, #0]
    6fec:	68e2      	ldr	r2, [r4, #12]
    6fee:	4001      	ands	r1, r0
    6ff0:	2500      	movs	r5, #0
    6ff2:	2904      	cmp	r1, #4
    6ff4:	d103      	bne.n	6ffe <_printf_common+0xb6>
    6ff6:	1ad5      	subs	r5, r2, r3
    6ff8:	43eb      	mvns	r3, r5
    6ffa:	17db      	asrs	r3, r3, #31
    6ffc:	401d      	ands	r5, r3
    6ffe:	68a2      	ldr	r2, [r4, #8]
    7000:	6923      	ldr	r3, [r4, #16]
    7002:	429a      	cmp	r2, r3
    7004:	dd01      	ble.n	700a <_printf_common+0xc2>
    7006:	1ad3      	subs	r3, r2, r3
    7008:	18ed      	adds	r5, r5, r3
    700a:	2700      	movs	r7, #0
    700c:	9700      	str	r7, [sp, #0]
    700e:	9f00      	ldr	r7, [sp, #0]
    7010:	42af      	cmp	r7, r5
    7012:	da0b      	bge.n	702c <_printf_common+0xe4>
    7014:	1c22      	adds	r2, r4, #0
    7016:	1c30      	adds	r0, r6, #0
    7018:	9901      	ldr	r1, [sp, #4]
    701a:	321a      	adds	r2, #26
    701c:	2301      	movs	r3, #1
    701e:	9f08      	ldr	r7, [sp, #32]
    7020:	47b8      	blx	r7
    7022:	3001      	adds	r0, #1
    7024:	d0dc      	beq.n	6fe0 <_printf_common+0x98>
    7026:	9f00      	ldr	r7, [sp, #0]
    7028:	3701      	adds	r7, #1
    702a:	e7ef      	b.n	700c <_printf_common+0xc4>
    702c:	2000      	movs	r0, #0
    702e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007030 <_printf_i>:
    7030:	b5f0      	push	{r4, r5, r6, r7, lr}
    7032:	1c0d      	adds	r5, r1, #0
    7034:	b08b      	sub	sp, #44	; 0x2c
    7036:	3543      	adds	r5, #67	; 0x43
    7038:	9206      	str	r2, [sp, #24]
    703a:	9005      	str	r0, [sp, #20]
    703c:	9307      	str	r3, [sp, #28]
    703e:	9504      	str	r5, [sp, #16]
    7040:	7e0b      	ldrb	r3, [r1, #24]
    7042:	1c0c      	adds	r4, r1, #0
    7044:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7046:	2b6e      	cmp	r3, #110	; 0x6e
    7048:	d100      	bne.n	704c <_printf_i+0x1c>
    704a:	e0a7      	b.n	719c <_printf_i+0x16c>
    704c:	d811      	bhi.n	7072 <_printf_i+0x42>
    704e:	2b63      	cmp	r3, #99	; 0x63
    7050:	d022      	beq.n	7098 <_printf_i+0x68>
    7052:	d809      	bhi.n	7068 <_printf_i+0x38>
    7054:	2b00      	cmp	r3, #0
    7056:	d100      	bne.n	705a <_printf_i+0x2a>
    7058:	e0b0      	b.n	71bc <_printf_i+0x18c>
    705a:	2b58      	cmp	r3, #88	; 0x58
    705c:	d000      	beq.n	7060 <_printf_i+0x30>
    705e:	e0c0      	b.n	71e2 <_printf_i+0x1b2>
    7060:	3145      	adds	r1, #69	; 0x45
    7062:	700b      	strb	r3, [r1, #0]
    7064:	4d7b      	ldr	r5, [pc, #492]	; (7254 <_printf_i+0x224>)
    7066:	e04e      	b.n	7106 <_printf_i+0xd6>
    7068:	2b64      	cmp	r3, #100	; 0x64
    706a:	d01c      	beq.n	70a6 <_printf_i+0x76>
    706c:	2b69      	cmp	r3, #105	; 0x69
    706e:	d01a      	beq.n	70a6 <_printf_i+0x76>
    7070:	e0b7      	b.n	71e2 <_printf_i+0x1b2>
    7072:	2b73      	cmp	r3, #115	; 0x73
    7074:	d100      	bne.n	7078 <_printf_i+0x48>
    7076:	e0a5      	b.n	71c4 <_printf_i+0x194>
    7078:	d809      	bhi.n	708e <_printf_i+0x5e>
    707a:	2b6f      	cmp	r3, #111	; 0x6f
    707c:	d029      	beq.n	70d2 <_printf_i+0xa2>
    707e:	2b70      	cmp	r3, #112	; 0x70
    7080:	d000      	beq.n	7084 <_printf_i+0x54>
    7082:	e0ae      	b.n	71e2 <_printf_i+0x1b2>
    7084:	680e      	ldr	r6, [r1, #0]
    7086:	2320      	movs	r3, #32
    7088:	4333      	orrs	r3, r6
    708a:	600b      	str	r3, [r1, #0]
    708c:	e036      	b.n	70fc <_printf_i+0xcc>
    708e:	2b75      	cmp	r3, #117	; 0x75
    7090:	d01f      	beq.n	70d2 <_printf_i+0xa2>
    7092:	2b78      	cmp	r3, #120	; 0x78
    7094:	d032      	beq.n	70fc <_printf_i+0xcc>
    7096:	e0a4      	b.n	71e2 <_printf_i+0x1b2>
    7098:	6813      	ldr	r3, [r2, #0]
    709a:	1c0d      	adds	r5, r1, #0
    709c:	1d19      	adds	r1, r3, #4
    709e:	3542      	adds	r5, #66	; 0x42
    70a0:	6011      	str	r1, [r2, #0]
    70a2:	681b      	ldr	r3, [r3, #0]
    70a4:	e09f      	b.n	71e6 <_printf_i+0x1b6>
    70a6:	6821      	ldr	r1, [r4, #0]
    70a8:	6813      	ldr	r3, [r2, #0]
    70aa:	060e      	lsls	r6, r1, #24
    70ac:	d503      	bpl.n	70b6 <_printf_i+0x86>
    70ae:	1d19      	adds	r1, r3, #4
    70b0:	6011      	str	r1, [r2, #0]
    70b2:	681e      	ldr	r6, [r3, #0]
    70b4:	e005      	b.n	70c2 <_printf_i+0x92>
    70b6:	0648      	lsls	r0, r1, #25
    70b8:	d5f9      	bpl.n	70ae <_printf_i+0x7e>
    70ba:	1d19      	adds	r1, r3, #4
    70bc:	6011      	str	r1, [r2, #0]
    70be:	2100      	movs	r1, #0
    70c0:	5e5e      	ldrsh	r6, [r3, r1]
    70c2:	4b64      	ldr	r3, [pc, #400]	; (7254 <_printf_i+0x224>)
    70c4:	2e00      	cmp	r6, #0
    70c6:	da3b      	bge.n	7140 <_printf_i+0x110>
    70c8:	9d04      	ldr	r5, [sp, #16]
    70ca:	222d      	movs	r2, #45	; 0x2d
    70cc:	4276      	negs	r6, r6
    70ce:	702a      	strb	r2, [r5, #0]
    70d0:	e036      	b.n	7140 <_printf_i+0x110>
    70d2:	6821      	ldr	r1, [r4, #0]
    70d4:	6813      	ldr	r3, [r2, #0]
    70d6:	060e      	lsls	r6, r1, #24
    70d8:	d503      	bpl.n	70e2 <_printf_i+0xb2>
    70da:	1d19      	adds	r1, r3, #4
    70dc:	6011      	str	r1, [r2, #0]
    70de:	681e      	ldr	r6, [r3, #0]
    70e0:	e004      	b.n	70ec <_printf_i+0xbc>
    70e2:	0648      	lsls	r0, r1, #25
    70e4:	d5f9      	bpl.n	70da <_printf_i+0xaa>
    70e6:	1d19      	adds	r1, r3, #4
    70e8:	881e      	ldrh	r6, [r3, #0]
    70ea:	6011      	str	r1, [r2, #0]
    70ec:	4b59      	ldr	r3, [pc, #356]	; (7254 <_printf_i+0x224>)
    70ee:	7e22      	ldrb	r2, [r4, #24]
    70f0:	9303      	str	r3, [sp, #12]
    70f2:	2708      	movs	r7, #8
    70f4:	2a6f      	cmp	r2, #111	; 0x6f
    70f6:	d01e      	beq.n	7136 <_printf_i+0x106>
    70f8:	270a      	movs	r7, #10
    70fa:	e01c      	b.n	7136 <_printf_i+0x106>
    70fc:	1c23      	adds	r3, r4, #0
    70fe:	2178      	movs	r1, #120	; 0x78
    7100:	3345      	adds	r3, #69	; 0x45
    7102:	4d55      	ldr	r5, [pc, #340]	; (7258 <_printf_i+0x228>)
    7104:	7019      	strb	r1, [r3, #0]
    7106:	6811      	ldr	r1, [r2, #0]
    7108:	6823      	ldr	r3, [r4, #0]
    710a:	1d08      	adds	r0, r1, #4
    710c:	9503      	str	r5, [sp, #12]
    710e:	6010      	str	r0, [r2, #0]
    7110:	061e      	lsls	r6, r3, #24
    7112:	d501      	bpl.n	7118 <_printf_i+0xe8>
    7114:	680e      	ldr	r6, [r1, #0]
    7116:	e002      	b.n	711e <_printf_i+0xee>
    7118:	0658      	lsls	r0, r3, #25
    711a:	d5fb      	bpl.n	7114 <_printf_i+0xe4>
    711c:	880e      	ldrh	r6, [r1, #0]
    711e:	07d9      	lsls	r1, r3, #31
    7120:	d502      	bpl.n	7128 <_printf_i+0xf8>
    7122:	2220      	movs	r2, #32
    7124:	4313      	orrs	r3, r2
    7126:	6023      	str	r3, [r4, #0]
    7128:	2710      	movs	r7, #16
    712a:	2e00      	cmp	r6, #0
    712c:	d103      	bne.n	7136 <_printf_i+0x106>
    712e:	6822      	ldr	r2, [r4, #0]
    7130:	2320      	movs	r3, #32
    7132:	439a      	bics	r2, r3
    7134:	6022      	str	r2, [r4, #0]
    7136:	1c23      	adds	r3, r4, #0
    7138:	2200      	movs	r2, #0
    713a:	3343      	adds	r3, #67	; 0x43
    713c:	701a      	strb	r2, [r3, #0]
    713e:	e001      	b.n	7144 <_printf_i+0x114>
    7140:	9303      	str	r3, [sp, #12]
    7142:	270a      	movs	r7, #10
    7144:	6863      	ldr	r3, [r4, #4]
    7146:	60a3      	str	r3, [r4, #8]
    7148:	2b00      	cmp	r3, #0
    714a:	db03      	blt.n	7154 <_printf_i+0x124>
    714c:	6825      	ldr	r5, [r4, #0]
    714e:	2204      	movs	r2, #4
    7150:	4395      	bics	r5, r2
    7152:	6025      	str	r5, [r4, #0]
    7154:	2e00      	cmp	r6, #0
    7156:	d102      	bne.n	715e <_printf_i+0x12e>
    7158:	9d04      	ldr	r5, [sp, #16]
    715a:	2b00      	cmp	r3, #0
    715c:	d00e      	beq.n	717c <_printf_i+0x14c>
    715e:	9d04      	ldr	r5, [sp, #16]
    7160:	1c30      	adds	r0, r6, #0
    7162:	1c39      	adds	r1, r7, #0
    7164:	f7fd fdd2 	bl	4d0c <__aeabi_uidivmod>
    7168:	9803      	ldr	r0, [sp, #12]
    716a:	3d01      	subs	r5, #1
    716c:	5c43      	ldrb	r3, [r0, r1]
    716e:	1c30      	adds	r0, r6, #0
    7170:	702b      	strb	r3, [r5, #0]
    7172:	1c39      	adds	r1, r7, #0
    7174:	f7fd fd86 	bl	4c84 <__aeabi_uidiv>
    7178:	1e06      	subs	r6, r0, #0
    717a:	d1f1      	bne.n	7160 <_printf_i+0x130>
    717c:	2f08      	cmp	r7, #8
    717e:	d109      	bne.n	7194 <_printf_i+0x164>
    7180:	6821      	ldr	r1, [r4, #0]
    7182:	07c9      	lsls	r1, r1, #31
    7184:	d506      	bpl.n	7194 <_printf_i+0x164>
    7186:	6862      	ldr	r2, [r4, #4]
    7188:	6923      	ldr	r3, [r4, #16]
    718a:	429a      	cmp	r2, r3
    718c:	dc02      	bgt.n	7194 <_printf_i+0x164>
    718e:	3d01      	subs	r5, #1
    7190:	2330      	movs	r3, #48	; 0x30
    7192:	702b      	strb	r3, [r5, #0]
    7194:	9e04      	ldr	r6, [sp, #16]
    7196:	1b73      	subs	r3, r6, r5
    7198:	6123      	str	r3, [r4, #16]
    719a:	e02a      	b.n	71f2 <_printf_i+0x1c2>
    719c:	6808      	ldr	r0, [r1, #0]
    719e:	6813      	ldr	r3, [r2, #0]
    71a0:	6949      	ldr	r1, [r1, #20]
    71a2:	0605      	lsls	r5, r0, #24
    71a4:	d504      	bpl.n	71b0 <_printf_i+0x180>
    71a6:	1d18      	adds	r0, r3, #4
    71a8:	6010      	str	r0, [r2, #0]
    71aa:	681b      	ldr	r3, [r3, #0]
    71ac:	6019      	str	r1, [r3, #0]
    71ae:	e005      	b.n	71bc <_printf_i+0x18c>
    71b0:	0646      	lsls	r6, r0, #25
    71b2:	d5f8      	bpl.n	71a6 <_printf_i+0x176>
    71b4:	1d18      	adds	r0, r3, #4
    71b6:	6010      	str	r0, [r2, #0]
    71b8:	681b      	ldr	r3, [r3, #0]
    71ba:	8019      	strh	r1, [r3, #0]
    71bc:	2300      	movs	r3, #0
    71be:	6123      	str	r3, [r4, #16]
    71c0:	9d04      	ldr	r5, [sp, #16]
    71c2:	e016      	b.n	71f2 <_printf_i+0x1c2>
    71c4:	6813      	ldr	r3, [r2, #0]
    71c6:	1d19      	adds	r1, r3, #4
    71c8:	6011      	str	r1, [r2, #0]
    71ca:	681d      	ldr	r5, [r3, #0]
    71cc:	1c28      	adds	r0, r5, #0
    71ce:	f000 fbe9 	bl	79a4 <strlen>
    71d2:	6863      	ldr	r3, [r4, #4]
    71d4:	6120      	str	r0, [r4, #16]
    71d6:	4298      	cmp	r0, r3
    71d8:	d900      	bls.n	71dc <_printf_i+0x1ac>
    71da:	6123      	str	r3, [r4, #16]
    71dc:	6920      	ldr	r0, [r4, #16]
    71de:	6060      	str	r0, [r4, #4]
    71e0:	e004      	b.n	71ec <_printf_i+0x1bc>
    71e2:	1c25      	adds	r5, r4, #0
    71e4:	3542      	adds	r5, #66	; 0x42
    71e6:	702b      	strb	r3, [r5, #0]
    71e8:	2301      	movs	r3, #1
    71ea:	6123      	str	r3, [r4, #16]
    71ec:	9e04      	ldr	r6, [sp, #16]
    71ee:	2300      	movs	r3, #0
    71f0:	7033      	strb	r3, [r6, #0]
    71f2:	9e07      	ldr	r6, [sp, #28]
    71f4:	9805      	ldr	r0, [sp, #20]
    71f6:	9600      	str	r6, [sp, #0]
    71f8:	1c21      	adds	r1, r4, #0
    71fa:	aa09      	add	r2, sp, #36	; 0x24
    71fc:	9b06      	ldr	r3, [sp, #24]
    71fe:	f7ff fea3 	bl	6f48 <_printf_common>
    7202:	3001      	adds	r0, #1
    7204:	d102      	bne.n	720c <_printf_i+0x1dc>
    7206:	2001      	movs	r0, #1
    7208:	4240      	negs	r0, r0
    720a:	e021      	b.n	7250 <_printf_i+0x220>
    720c:	1c2a      	adds	r2, r5, #0
    720e:	9805      	ldr	r0, [sp, #20]
    7210:	9906      	ldr	r1, [sp, #24]
    7212:	6923      	ldr	r3, [r4, #16]
    7214:	9d07      	ldr	r5, [sp, #28]
    7216:	47a8      	blx	r5
    7218:	3001      	adds	r0, #1
    721a:	d0f4      	beq.n	7206 <_printf_i+0x1d6>
    721c:	6826      	ldr	r6, [r4, #0]
    721e:	07b6      	lsls	r6, r6, #30
    7220:	d405      	bmi.n	722e <_printf_i+0x1fe>
    7222:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7224:	68e0      	ldr	r0, [r4, #12]
    7226:	4298      	cmp	r0, r3
    7228:	da12      	bge.n	7250 <_printf_i+0x220>
    722a:	1c18      	adds	r0, r3, #0
    722c:	e010      	b.n	7250 <_printf_i+0x220>
    722e:	2500      	movs	r5, #0
    7230:	68e0      	ldr	r0, [r4, #12]
    7232:	9909      	ldr	r1, [sp, #36]	; 0x24
    7234:	1a43      	subs	r3, r0, r1
    7236:	429d      	cmp	r5, r3
    7238:	daf3      	bge.n	7222 <_printf_i+0x1f2>
    723a:	1c22      	adds	r2, r4, #0
    723c:	9805      	ldr	r0, [sp, #20]
    723e:	9906      	ldr	r1, [sp, #24]
    7240:	3219      	adds	r2, #25
    7242:	2301      	movs	r3, #1
    7244:	9e07      	ldr	r6, [sp, #28]
    7246:	47b0      	blx	r6
    7248:	3001      	adds	r0, #1
    724a:	d0dc      	beq.n	7206 <_printf_i+0x1d6>
    724c:	3501      	adds	r5, #1
    724e:	e7ef      	b.n	7230 <_printf_i+0x200>
    7250:	b00b      	add	sp, #44	; 0x2c
    7252:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7254:	00007d59 	.word	0x00007d59
    7258:	00007d6a 	.word	0x00007d6a

0000725c <__swbuf_r>:
    725c:	b570      	push	{r4, r5, r6, lr}
    725e:	1c05      	adds	r5, r0, #0
    7260:	1c0e      	adds	r6, r1, #0
    7262:	1c14      	adds	r4, r2, #0
    7264:	2800      	cmp	r0, #0
    7266:	d004      	beq.n	7272 <__swbuf_r+0x16>
    7268:	6982      	ldr	r2, [r0, #24]
    726a:	2a00      	cmp	r2, #0
    726c:	d101      	bne.n	7272 <__swbuf_r+0x16>
    726e:	f000 f9c9 	bl	7604 <__sinit>
    7272:	4b23      	ldr	r3, [pc, #140]	; (7300 <__swbuf_r+0xa4>)
    7274:	429c      	cmp	r4, r3
    7276:	d101      	bne.n	727c <__swbuf_r+0x20>
    7278:	686c      	ldr	r4, [r5, #4]
    727a:	e008      	b.n	728e <__swbuf_r+0x32>
    727c:	4b21      	ldr	r3, [pc, #132]	; (7304 <__swbuf_r+0xa8>)
    727e:	429c      	cmp	r4, r3
    7280:	d101      	bne.n	7286 <__swbuf_r+0x2a>
    7282:	68ac      	ldr	r4, [r5, #8]
    7284:	e003      	b.n	728e <__swbuf_r+0x32>
    7286:	4b20      	ldr	r3, [pc, #128]	; (7308 <__swbuf_r+0xac>)
    7288:	429c      	cmp	r4, r3
    728a:	d100      	bne.n	728e <__swbuf_r+0x32>
    728c:	68ec      	ldr	r4, [r5, #12]
    728e:	69a3      	ldr	r3, [r4, #24]
    7290:	60a3      	str	r3, [r4, #8]
    7292:	89a3      	ldrh	r3, [r4, #12]
    7294:	071a      	lsls	r2, r3, #28
    7296:	d50a      	bpl.n	72ae <__swbuf_r+0x52>
    7298:	6923      	ldr	r3, [r4, #16]
    729a:	2b00      	cmp	r3, #0
    729c:	d007      	beq.n	72ae <__swbuf_r+0x52>
    729e:	6822      	ldr	r2, [r4, #0]
    72a0:	6923      	ldr	r3, [r4, #16]
    72a2:	b2f6      	uxtb	r6, r6
    72a4:	1ad0      	subs	r0, r2, r3
    72a6:	6962      	ldr	r2, [r4, #20]
    72a8:	4290      	cmp	r0, r2
    72aa:	db0f      	blt.n	72cc <__swbuf_r+0x70>
    72ac:	e008      	b.n	72c0 <__swbuf_r+0x64>
    72ae:	1c28      	adds	r0, r5, #0
    72b0:	1c21      	adds	r1, r4, #0
    72b2:	f000 f82b 	bl	730c <__swsetup_r>
    72b6:	2800      	cmp	r0, #0
    72b8:	d0f1      	beq.n	729e <__swbuf_r+0x42>
    72ba:	2001      	movs	r0, #1
    72bc:	4240      	negs	r0, r0
    72be:	e01d      	b.n	72fc <__swbuf_r+0xa0>
    72c0:	1c28      	adds	r0, r5, #0
    72c2:	1c21      	adds	r1, r4, #0
    72c4:	f000 f91e 	bl	7504 <_fflush_r>
    72c8:	2800      	cmp	r0, #0
    72ca:	d1f6      	bne.n	72ba <__swbuf_r+0x5e>
    72cc:	68a3      	ldr	r3, [r4, #8]
    72ce:	3001      	adds	r0, #1
    72d0:	3b01      	subs	r3, #1
    72d2:	60a3      	str	r3, [r4, #8]
    72d4:	6823      	ldr	r3, [r4, #0]
    72d6:	1c5a      	adds	r2, r3, #1
    72d8:	6022      	str	r2, [r4, #0]
    72da:	701e      	strb	r6, [r3, #0]
    72dc:	6963      	ldr	r3, [r4, #20]
    72de:	4298      	cmp	r0, r3
    72e0:	d005      	beq.n	72ee <__swbuf_r+0x92>
    72e2:	89a3      	ldrh	r3, [r4, #12]
    72e4:	1c30      	adds	r0, r6, #0
    72e6:	07da      	lsls	r2, r3, #31
    72e8:	d508      	bpl.n	72fc <__swbuf_r+0xa0>
    72ea:	2e0a      	cmp	r6, #10
    72ec:	d106      	bne.n	72fc <__swbuf_r+0xa0>
    72ee:	1c28      	adds	r0, r5, #0
    72f0:	1c21      	adds	r1, r4, #0
    72f2:	f000 f907 	bl	7504 <_fflush_r>
    72f6:	2800      	cmp	r0, #0
    72f8:	d1df      	bne.n	72ba <__swbuf_r+0x5e>
    72fa:	1c30      	adds	r0, r6, #0
    72fc:	bd70      	pop	{r4, r5, r6, pc}
    72fe:	46c0      	nop			; (mov r8, r8)
    7300:	00007d7c 	.word	0x00007d7c
    7304:	00007d9c 	.word	0x00007d9c
    7308:	00007dbc 	.word	0x00007dbc

0000730c <__swsetup_r>:
    730c:	4b34      	ldr	r3, [pc, #208]	; (73e0 <__swsetup_r+0xd4>)
    730e:	b570      	push	{r4, r5, r6, lr}
    7310:	681d      	ldr	r5, [r3, #0]
    7312:	1c06      	adds	r6, r0, #0
    7314:	1c0c      	adds	r4, r1, #0
    7316:	2d00      	cmp	r5, #0
    7318:	d005      	beq.n	7326 <__swsetup_r+0x1a>
    731a:	69a9      	ldr	r1, [r5, #24]
    731c:	2900      	cmp	r1, #0
    731e:	d102      	bne.n	7326 <__swsetup_r+0x1a>
    7320:	1c28      	adds	r0, r5, #0
    7322:	f000 f96f 	bl	7604 <__sinit>
    7326:	4b2f      	ldr	r3, [pc, #188]	; (73e4 <__swsetup_r+0xd8>)
    7328:	429c      	cmp	r4, r3
    732a:	d101      	bne.n	7330 <__swsetup_r+0x24>
    732c:	686c      	ldr	r4, [r5, #4]
    732e:	e008      	b.n	7342 <__swsetup_r+0x36>
    7330:	4b2d      	ldr	r3, [pc, #180]	; (73e8 <__swsetup_r+0xdc>)
    7332:	429c      	cmp	r4, r3
    7334:	d101      	bne.n	733a <__swsetup_r+0x2e>
    7336:	68ac      	ldr	r4, [r5, #8]
    7338:	e003      	b.n	7342 <__swsetup_r+0x36>
    733a:	4b2c      	ldr	r3, [pc, #176]	; (73ec <__swsetup_r+0xe0>)
    733c:	429c      	cmp	r4, r3
    733e:	d100      	bne.n	7342 <__swsetup_r+0x36>
    7340:	68ec      	ldr	r4, [r5, #12]
    7342:	89a2      	ldrh	r2, [r4, #12]
    7344:	b293      	uxth	r3, r2
    7346:	0719      	lsls	r1, r3, #28
    7348:	d421      	bmi.n	738e <__swsetup_r+0x82>
    734a:	06d9      	lsls	r1, r3, #27
    734c:	d405      	bmi.n	735a <__swsetup_r+0x4e>
    734e:	2309      	movs	r3, #9
    7350:	6033      	str	r3, [r6, #0]
    7352:	2340      	movs	r3, #64	; 0x40
    7354:	431a      	orrs	r2, r3
    7356:	81a2      	strh	r2, [r4, #12]
    7358:	e03f      	b.n	73da <__swsetup_r+0xce>
    735a:	075a      	lsls	r2, r3, #29
    735c:	d513      	bpl.n	7386 <__swsetup_r+0x7a>
    735e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7360:	2900      	cmp	r1, #0
    7362:	d008      	beq.n	7376 <__swsetup_r+0x6a>
    7364:	1c23      	adds	r3, r4, #0
    7366:	3344      	adds	r3, #68	; 0x44
    7368:	4299      	cmp	r1, r3
    736a:	d002      	beq.n	7372 <__swsetup_r+0x66>
    736c:	1c30      	adds	r0, r6, #0
    736e:	f000 fa1f 	bl	77b0 <_free_r>
    7372:	2300      	movs	r3, #0
    7374:	6363      	str	r3, [r4, #52]	; 0x34
    7376:	89a3      	ldrh	r3, [r4, #12]
    7378:	2224      	movs	r2, #36	; 0x24
    737a:	4393      	bics	r3, r2
    737c:	81a3      	strh	r3, [r4, #12]
    737e:	2300      	movs	r3, #0
    7380:	6063      	str	r3, [r4, #4]
    7382:	6923      	ldr	r3, [r4, #16]
    7384:	6023      	str	r3, [r4, #0]
    7386:	89a3      	ldrh	r3, [r4, #12]
    7388:	2208      	movs	r2, #8
    738a:	4313      	orrs	r3, r2
    738c:	81a3      	strh	r3, [r4, #12]
    738e:	6921      	ldr	r1, [r4, #16]
    7390:	2900      	cmp	r1, #0
    7392:	d10b      	bne.n	73ac <__swsetup_r+0xa0>
    7394:	89a3      	ldrh	r3, [r4, #12]
    7396:	22a0      	movs	r2, #160	; 0xa0
    7398:	0092      	lsls	r2, r2, #2
    739a:	401a      	ands	r2, r3
    739c:	2380      	movs	r3, #128	; 0x80
    739e:	009b      	lsls	r3, r3, #2
    73a0:	429a      	cmp	r2, r3
    73a2:	d003      	beq.n	73ac <__swsetup_r+0xa0>
    73a4:	1c30      	adds	r0, r6, #0
    73a6:	1c21      	adds	r1, r4, #0
    73a8:	f000 f99c 	bl	76e4 <__smakebuf_r>
    73ac:	89a3      	ldrh	r3, [r4, #12]
    73ae:	2201      	movs	r2, #1
    73b0:	401a      	ands	r2, r3
    73b2:	d005      	beq.n	73c0 <__swsetup_r+0xb4>
    73b4:	6961      	ldr	r1, [r4, #20]
    73b6:	2200      	movs	r2, #0
    73b8:	60a2      	str	r2, [r4, #8]
    73ba:	424a      	negs	r2, r1
    73bc:	61a2      	str	r2, [r4, #24]
    73be:	e003      	b.n	73c8 <__swsetup_r+0xbc>
    73c0:	0799      	lsls	r1, r3, #30
    73c2:	d400      	bmi.n	73c6 <__swsetup_r+0xba>
    73c4:	6962      	ldr	r2, [r4, #20]
    73c6:	60a2      	str	r2, [r4, #8]
    73c8:	6922      	ldr	r2, [r4, #16]
    73ca:	2000      	movs	r0, #0
    73cc:	4282      	cmp	r2, r0
    73ce:	d106      	bne.n	73de <__swsetup_r+0xd2>
    73d0:	0619      	lsls	r1, r3, #24
    73d2:	d504      	bpl.n	73de <__swsetup_r+0xd2>
    73d4:	2240      	movs	r2, #64	; 0x40
    73d6:	4313      	orrs	r3, r2
    73d8:	81a3      	strh	r3, [r4, #12]
    73da:	2001      	movs	r0, #1
    73dc:	4240      	negs	r0, r0
    73de:	bd70      	pop	{r4, r5, r6, pc}
    73e0:	2000006c 	.word	0x2000006c
    73e4:	00007d7c 	.word	0x00007d7c
    73e8:	00007d9c 	.word	0x00007d9c
    73ec:	00007dbc 	.word	0x00007dbc

000073f0 <__sflush_r>:
    73f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    73f2:	898b      	ldrh	r3, [r1, #12]
    73f4:	1c05      	adds	r5, r0, #0
    73f6:	1c0c      	adds	r4, r1, #0
    73f8:	0719      	lsls	r1, r3, #28
    73fa:	d45e      	bmi.n	74ba <__sflush_r+0xca>
    73fc:	6862      	ldr	r2, [r4, #4]
    73fe:	2a00      	cmp	r2, #0
    7400:	dc02      	bgt.n	7408 <__sflush_r+0x18>
    7402:	6c27      	ldr	r7, [r4, #64]	; 0x40
    7404:	2f00      	cmp	r7, #0
    7406:	dd1a      	ble.n	743e <__sflush_r+0x4e>
    7408:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    740a:	2f00      	cmp	r7, #0
    740c:	d017      	beq.n	743e <__sflush_r+0x4e>
    740e:	2200      	movs	r2, #0
    7410:	682e      	ldr	r6, [r5, #0]
    7412:	602a      	str	r2, [r5, #0]
    7414:	2280      	movs	r2, #128	; 0x80
    7416:	0152      	lsls	r2, r2, #5
    7418:	401a      	ands	r2, r3
    741a:	d001      	beq.n	7420 <__sflush_r+0x30>
    741c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    741e:	e015      	b.n	744c <__sflush_r+0x5c>
    7420:	1c28      	adds	r0, r5, #0
    7422:	6a21      	ldr	r1, [r4, #32]
    7424:	2301      	movs	r3, #1
    7426:	47b8      	blx	r7
    7428:	1c02      	adds	r2, r0, #0
    742a:	1c41      	adds	r1, r0, #1
    742c:	d10e      	bne.n	744c <__sflush_r+0x5c>
    742e:	682b      	ldr	r3, [r5, #0]
    7430:	2b00      	cmp	r3, #0
    7432:	d00b      	beq.n	744c <__sflush_r+0x5c>
    7434:	2b1d      	cmp	r3, #29
    7436:	d001      	beq.n	743c <__sflush_r+0x4c>
    7438:	2b16      	cmp	r3, #22
    743a:	d102      	bne.n	7442 <__sflush_r+0x52>
    743c:	602e      	str	r6, [r5, #0]
    743e:	2000      	movs	r0, #0
    7440:	e05e      	b.n	7500 <__sflush_r+0x110>
    7442:	89a3      	ldrh	r3, [r4, #12]
    7444:	2140      	movs	r1, #64	; 0x40
    7446:	430b      	orrs	r3, r1
    7448:	81a3      	strh	r3, [r4, #12]
    744a:	e059      	b.n	7500 <__sflush_r+0x110>
    744c:	89a3      	ldrh	r3, [r4, #12]
    744e:	075f      	lsls	r7, r3, #29
    7450:	d506      	bpl.n	7460 <__sflush_r+0x70>
    7452:	6861      	ldr	r1, [r4, #4]
    7454:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7456:	1a52      	subs	r2, r2, r1
    7458:	2b00      	cmp	r3, #0
    745a:	d001      	beq.n	7460 <__sflush_r+0x70>
    745c:	6c27      	ldr	r7, [r4, #64]	; 0x40
    745e:	1bd2      	subs	r2, r2, r7
    7460:	1c28      	adds	r0, r5, #0
    7462:	6a21      	ldr	r1, [r4, #32]
    7464:	2300      	movs	r3, #0
    7466:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7468:	47b8      	blx	r7
    746a:	89a2      	ldrh	r2, [r4, #12]
    746c:	1c41      	adds	r1, r0, #1
    746e:	d106      	bne.n	747e <__sflush_r+0x8e>
    7470:	682b      	ldr	r3, [r5, #0]
    7472:	2b00      	cmp	r3, #0
    7474:	d003      	beq.n	747e <__sflush_r+0x8e>
    7476:	2b1d      	cmp	r3, #29
    7478:	d001      	beq.n	747e <__sflush_r+0x8e>
    747a:	2b16      	cmp	r3, #22
    747c:	d119      	bne.n	74b2 <__sflush_r+0xc2>
    747e:	2300      	movs	r3, #0
    7480:	6063      	str	r3, [r4, #4]
    7482:	6923      	ldr	r3, [r4, #16]
    7484:	6023      	str	r3, [r4, #0]
    7486:	04d7      	lsls	r7, r2, #19
    7488:	d505      	bpl.n	7496 <__sflush_r+0xa6>
    748a:	1c41      	adds	r1, r0, #1
    748c:	d102      	bne.n	7494 <__sflush_r+0xa4>
    748e:	682a      	ldr	r2, [r5, #0]
    7490:	2a00      	cmp	r2, #0
    7492:	d100      	bne.n	7496 <__sflush_r+0xa6>
    7494:	6560      	str	r0, [r4, #84]	; 0x54
    7496:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7498:	602e      	str	r6, [r5, #0]
    749a:	2900      	cmp	r1, #0
    749c:	d0cf      	beq.n	743e <__sflush_r+0x4e>
    749e:	1c23      	adds	r3, r4, #0
    74a0:	3344      	adds	r3, #68	; 0x44
    74a2:	4299      	cmp	r1, r3
    74a4:	d002      	beq.n	74ac <__sflush_r+0xbc>
    74a6:	1c28      	adds	r0, r5, #0
    74a8:	f000 f982 	bl	77b0 <_free_r>
    74ac:	2000      	movs	r0, #0
    74ae:	6360      	str	r0, [r4, #52]	; 0x34
    74b0:	e026      	b.n	7500 <__sflush_r+0x110>
    74b2:	2340      	movs	r3, #64	; 0x40
    74b4:	431a      	orrs	r2, r3
    74b6:	81a2      	strh	r2, [r4, #12]
    74b8:	e022      	b.n	7500 <__sflush_r+0x110>
    74ba:	6926      	ldr	r6, [r4, #16]
    74bc:	2e00      	cmp	r6, #0
    74be:	d0be      	beq.n	743e <__sflush_r+0x4e>
    74c0:	6827      	ldr	r7, [r4, #0]
    74c2:	2200      	movs	r2, #0
    74c4:	1bbf      	subs	r7, r7, r6
    74c6:	9701      	str	r7, [sp, #4]
    74c8:	6026      	str	r6, [r4, #0]
    74ca:	0799      	lsls	r1, r3, #30
    74cc:	d100      	bne.n	74d0 <__sflush_r+0xe0>
    74ce:	6962      	ldr	r2, [r4, #20]
    74d0:	60a2      	str	r2, [r4, #8]
    74d2:	9f01      	ldr	r7, [sp, #4]
    74d4:	2f00      	cmp	r7, #0
    74d6:	ddb2      	ble.n	743e <__sflush_r+0x4e>
    74d8:	1c28      	adds	r0, r5, #0
    74da:	6a21      	ldr	r1, [r4, #32]
    74dc:	1c32      	adds	r2, r6, #0
    74de:	9b01      	ldr	r3, [sp, #4]
    74e0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    74e2:	47b8      	blx	r7
    74e4:	2800      	cmp	r0, #0
    74e6:	dc06      	bgt.n	74f6 <__sflush_r+0x106>
    74e8:	89a3      	ldrh	r3, [r4, #12]
    74ea:	2240      	movs	r2, #64	; 0x40
    74ec:	4313      	orrs	r3, r2
    74ee:	2001      	movs	r0, #1
    74f0:	81a3      	strh	r3, [r4, #12]
    74f2:	4240      	negs	r0, r0
    74f4:	e004      	b.n	7500 <__sflush_r+0x110>
    74f6:	9f01      	ldr	r7, [sp, #4]
    74f8:	1836      	adds	r6, r6, r0
    74fa:	1a3f      	subs	r7, r7, r0
    74fc:	9701      	str	r7, [sp, #4]
    74fe:	e7e8      	b.n	74d2 <__sflush_r+0xe2>
    7500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007504 <_fflush_r>:
    7504:	690a      	ldr	r2, [r1, #16]
    7506:	b538      	push	{r3, r4, r5, lr}
    7508:	1c05      	adds	r5, r0, #0
    750a:	1c0c      	adds	r4, r1, #0
    750c:	2a00      	cmp	r2, #0
    750e:	d101      	bne.n	7514 <_fflush_r+0x10>
    7510:	2000      	movs	r0, #0
    7512:	e01c      	b.n	754e <_fflush_r+0x4a>
    7514:	2800      	cmp	r0, #0
    7516:	d004      	beq.n	7522 <_fflush_r+0x1e>
    7518:	6983      	ldr	r3, [r0, #24]
    751a:	2b00      	cmp	r3, #0
    751c:	d101      	bne.n	7522 <_fflush_r+0x1e>
    751e:	f000 f871 	bl	7604 <__sinit>
    7522:	4b0b      	ldr	r3, [pc, #44]	; (7550 <_fflush_r+0x4c>)
    7524:	429c      	cmp	r4, r3
    7526:	d101      	bne.n	752c <_fflush_r+0x28>
    7528:	686c      	ldr	r4, [r5, #4]
    752a:	e008      	b.n	753e <_fflush_r+0x3a>
    752c:	4b09      	ldr	r3, [pc, #36]	; (7554 <_fflush_r+0x50>)
    752e:	429c      	cmp	r4, r3
    7530:	d101      	bne.n	7536 <_fflush_r+0x32>
    7532:	68ac      	ldr	r4, [r5, #8]
    7534:	e003      	b.n	753e <_fflush_r+0x3a>
    7536:	4b08      	ldr	r3, [pc, #32]	; (7558 <_fflush_r+0x54>)
    7538:	429c      	cmp	r4, r3
    753a:	d100      	bne.n	753e <_fflush_r+0x3a>
    753c:	68ec      	ldr	r4, [r5, #12]
    753e:	220c      	movs	r2, #12
    7540:	5ea3      	ldrsh	r3, [r4, r2]
    7542:	2b00      	cmp	r3, #0
    7544:	d0e4      	beq.n	7510 <_fflush_r+0xc>
    7546:	1c28      	adds	r0, r5, #0
    7548:	1c21      	adds	r1, r4, #0
    754a:	f7ff ff51 	bl	73f0 <__sflush_r>
    754e:	bd38      	pop	{r3, r4, r5, pc}
    7550:	00007d7c 	.word	0x00007d7c
    7554:	00007d9c 	.word	0x00007d9c
    7558:	00007dbc 	.word	0x00007dbc

0000755c <_cleanup_r>:
    755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    755e:	1c04      	adds	r4, r0, #0
    7560:	1c07      	adds	r7, r0, #0
    7562:	3448      	adds	r4, #72	; 0x48
    7564:	2c00      	cmp	r4, #0
    7566:	d012      	beq.n	758e <_cleanup_r+0x32>
    7568:	68a5      	ldr	r5, [r4, #8]
    756a:	6866      	ldr	r6, [r4, #4]
    756c:	3e01      	subs	r6, #1
    756e:	d40c      	bmi.n	758a <_cleanup_r+0x2e>
    7570:	89ab      	ldrh	r3, [r5, #12]
    7572:	2b01      	cmp	r3, #1
    7574:	d907      	bls.n	7586 <_cleanup_r+0x2a>
    7576:	220e      	movs	r2, #14
    7578:	5eab      	ldrsh	r3, [r5, r2]
    757a:	3301      	adds	r3, #1
    757c:	d003      	beq.n	7586 <_cleanup_r+0x2a>
    757e:	1c38      	adds	r0, r7, #0
    7580:	1c29      	adds	r1, r5, #0
    7582:	f7ff ffbf 	bl	7504 <_fflush_r>
    7586:	3568      	adds	r5, #104	; 0x68
    7588:	e7f0      	b.n	756c <_cleanup_r+0x10>
    758a:	6824      	ldr	r4, [r4, #0]
    758c:	e7ea      	b.n	7564 <_cleanup_r+0x8>
    758e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007590 <std.isra.0>:
    7590:	2300      	movs	r3, #0
    7592:	b510      	push	{r4, lr}
    7594:	1c04      	adds	r4, r0, #0
    7596:	6003      	str	r3, [r0, #0]
    7598:	6043      	str	r3, [r0, #4]
    759a:	6083      	str	r3, [r0, #8]
    759c:	8181      	strh	r1, [r0, #12]
    759e:	6643      	str	r3, [r0, #100]	; 0x64
    75a0:	81c2      	strh	r2, [r0, #14]
    75a2:	6103      	str	r3, [r0, #16]
    75a4:	6143      	str	r3, [r0, #20]
    75a6:	6183      	str	r3, [r0, #24]
    75a8:	1c19      	adds	r1, r3, #0
    75aa:	2208      	movs	r2, #8
    75ac:	305c      	adds	r0, #92	; 0x5c
    75ae:	f7ff faac 	bl	6b0a <memset>
    75b2:	4b05      	ldr	r3, [pc, #20]	; (75c8 <std.isra.0+0x38>)
    75b4:	6224      	str	r4, [r4, #32]
    75b6:	6263      	str	r3, [r4, #36]	; 0x24
    75b8:	4b04      	ldr	r3, [pc, #16]	; (75cc <std.isra.0+0x3c>)
    75ba:	62a3      	str	r3, [r4, #40]	; 0x28
    75bc:	4b04      	ldr	r3, [pc, #16]	; (75d0 <std.isra.0+0x40>)
    75be:	62e3      	str	r3, [r4, #44]	; 0x2c
    75c0:	4b04      	ldr	r3, [pc, #16]	; (75d4 <std.isra.0+0x44>)
    75c2:	6323      	str	r3, [r4, #48]	; 0x30
    75c4:	bd10      	pop	{r4, pc}
    75c6:	46c0      	nop			; (mov r8, r8)
    75c8:	0000790d 	.word	0x0000790d
    75cc:	00007935 	.word	0x00007935
    75d0:	0000796d 	.word	0x0000796d
    75d4:	00007999 	.word	0x00007999

000075d8 <__sfmoreglue>:
    75d8:	b570      	push	{r4, r5, r6, lr}
    75da:	1e4b      	subs	r3, r1, #1
    75dc:	2568      	movs	r5, #104	; 0x68
    75de:	435d      	muls	r5, r3
    75e0:	1c0e      	adds	r6, r1, #0
    75e2:	1c29      	adds	r1, r5, #0
    75e4:	3174      	adds	r1, #116	; 0x74
    75e6:	f000 f92b 	bl	7840 <_malloc_r>
    75ea:	1e04      	subs	r4, r0, #0
    75ec:	d008      	beq.n	7600 <__sfmoreglue+0x28>
    75ee:	2100      	movs	r1, #0
    75f0:	6001      	str	r1, [r0, #0]
    75f2:	6046      	str	r6, [r0, #4]
    75f4:	1c2a      	adds	r2, r5, #0
    75f6:	300c      	adds	r0, #12
    75f8:	60a0      	str	r0, [r4, #8]
    75fa:	3268      	adds	r2, #104	; 0x68
    75fc:	f7ff fa85 	bl	6b0a <memset>
    7600:	1c20      	adds	r0, r4, #0
    7602:	bd70      	pop	{r4, r5, r6, pc}

00007604 <__sinit>:
    7604:	6983      	ldr	r3, [r0, #24]
    7606:	b513      	push	{r0, r1, r4, lr}
    7608:	1c04      	adds	r4, r0, #0
    760a:	2b00      	cmp	r3, #0
    760c:	d127      	bne.n	765e <__sinit+0x5a>
    760e:	6483      	str	r3, [r0, #72]	; 0x48
    7610:	64c3      	str	r3, [r0, #76]	; 0x4c
    7612:	6503      	str	r3, [r0, #80]	; 0x50
    7614:	4b12      	ldr	r3, [pc, #72]	; (7660 <__sinit+0x5c>)
    7616:	4a13      	ldr	r2, [pc, #76]	; (7664 <__sinit+0x60>)
    7618:	681b      	ldr	r3, [r3, #0]
    761a:	6282      	str	r2, [r0, #40]	; 0x28
    761c:	4298      	cmp	r0, r3
    761e:	d101      	bne.n	7624 <__sinit+0x20>
    7620:	2301      	movs	r3, #1
    7622:	6183      	str	r3, [r0, #24]
    7624:	1c20      	adds	r0, r4, #0
    7626:	f000 f81f 	bl	7668 <__sfp>
    762a:	6060      	str	r0, [r4, #4]
    762c:	1c20      	adds	r0, r4, #0
    762e:	f000 f81b 	bl	7668 <__sfp>
    7632:	60a0      	str	r0, [r4, #8]
    7634:	1c20      	adds	r0, r4, #0
    7636:	f000 f817 	bl	7668 <__sfp>
    763a:	2104      	movs	r1, #4
    763c:	60e0      	str	r0, [r4, #12]
    763e:	2200      	movs	r2, #0
    7640:	6860      	ldr	r0, [r4, #4]
    7642:	f7ff ffa5 	bl	7590 <std.isra.0>
    7646:	68a0      	ldr	r0, [r4, #8]
    7648:	2109      	movs	r1, #9
    764a:	2201      	movs	r2, #1
    764c:	f7ff ffa0 	bl	7590 <std.isra.0>
    7650:	68e0      	ldr	r0, [r4, #12]
    7652:	2112      	movs	r1, #18
    7654:	2202      	movs	r2, #2
    7656:	f7ff ff9b 	bl	7590 <std.isra.0>
    765a:	2301      	movs	r3, #1
    765c:	61a3      	str	r3, [r4, #24]
    765e:	bd13      	pop	{r0, r1, r4, pc}
    7660:	00007d44 	.word	0x00007d44
    7664:	0000755d 	.word	0x0000755d

00007668 <__sfp>:
    7668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    766a:	4b1d      	ldr	r3, [pc, #116]	; (76e0 <__sfp+0x78>)
    766c:	1c07      	adds	r7, r0, #0
    766e:	681e      	ldr	r6, [r3, #0]
    7670:	69b2      	ldr	r2, [r6, #24]
    7672:	2a00      	cmp	r2, #0
    7674:	d102      	bne.n	767c <__sfp+0x14>
    7676:	1c30      	adds	r0, r6, #0
    7678:	f7ff ffc4 	bl	7604 <__sinit>
    767c:	3648      	adds	r6, #72	; 0x48
    767e:	68b4      	ldr	r4, [r6, #8]
    7680:	6873      	ldr	r3, [r6, #4]
    7682:	3b01      	subs	r3, #1
    7684:	d405      	bmi.n	7692 <__sfp+0x2a>
    7686:	220c      	movs	r2, #12
    7688:	5ea5      	ldrsh	r5, [r4, r2]
    768a:	2d00      	cmp	r5, #0
    768c:	d010      	beq.n	76b0 <__sfp+0x48>
    768e:	3468      	adds	r4, #104	; 0x68
    7690:	e7f7      	b.n	7682 <__sfp+0x1a>
    7692:	6833      	ldr	r3, [r6, #0]
    7694:	2b00      	cmp	r3, #0
    7696:	d106      	bne.n	76a6 <__sfp+0x3e>
    7698:	1c38      	adds	r0, r7, #0
    769a:	2104      	movs	r1, #4
    769c:	f7ff ff9c 	bl	75d8 <__sfmoreglue>
    76a0:	6030      	str	r0, [r6, #0]
    76a2:	2800      	cmp	r0, #0
    76a4:	d001      	beq.n	76aa <__sfp+0x42>
    76a6:	6836      	ldr	r6, [r6, #0]
    76a8:	e7e9      	b.n	767e <__sfp+0x16>
    76aa:	230c      	movs	r3, #12
    76ac:	603b      	str	r3, [r7, #0]
    76ae:	e016      	b.n	76de <__sfp+0x76>
    76b0:	2301      	movs	r3, #1
    76b2:	425b      	negs	r3, r3
    76b4:	81e3      	strh	r3, [r4, #14]
    76b6:	1c20      	adds	r0, r4, #0
    76b8:	2301      	movs	r3, #1
    76ba:	81a3      	strh	r3, [r4, #12]
    76bc:	6665      	str	r5, [r4, #100]	; 0x64
    76be:	6025      	str	r5, [r4, #0]
    76c0:	60a5      	str	r5, [r4, #8]
    76c2:	6065      	str	r5, [r4, #4]
    76c4:	6125      	str	r5, [r4, #16]
    76c6:	6165      	str	r5, [r4, #20]
    76c8:	61a5      	str	r5, [r4, #24]
    76ca:	305c      	adds	r0, #92	; 0x5c
    76cc:	1c29      	adds	r1, r5, #0
    76ce:	2208      	movs	r2, #8
    76d0:	f7ff fa1b 	bl	6b0a <memset>
    76d4:	6365      	str	r5, [r4, #52]	; 0x34
    76d6:	63a5      	str	r5, [r4, #56]	; 0x38
    76d8:	64a5      	str	r5, [r4, #72]	; 0x48
    76da:	64e5      	str	r5, [r4, #76]	; 0x4c
    76dc:	1c20      	adds	r0, r4, #0
    76de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76e0:	00007d44 	.word	0x00007d44

000076e4 <__smakebuf_r>:
    76e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76e6:	898b      	ldrh	r3, [r1, #12]
    76e8:	b091      	sub	sp, #68	; 0x44
    76ea:	1c05      	adds	r5, r0, #0
    76ec:	1c0c      	adds	r4, r1, #0
    76ee:	079a      	lsls	r2, r3, #30
    76f0:	d425      	bmi.n	773e <__smakebuf_r+0x5a>
    76f2:	230e      	movs	r3, #14
    76f4:	5ec9      	ldrsh	r1, [r1, r3]
    76f6:	2900      	cmp	r1, #0
    76f8:	da06      	bge.n	7708 <__smakebuf_r+0x24>
    76fa:	89a7      	ldrh	r7, [r4, #12]
    76fc:	2380      	movs	r3, #128	; 0x80
    76fe:	401f      	ands	r7, r3
    7700:	d00f      	beq.n	7722 <__smakebuf_r+0x3e>
    7702:	2700      	movs	r7, #0
    7704:	2640      	movs	r6, #64	; 0x40
    7706:	e00e      	b.n	7726 <__smakebuf_r+0x42>
    7708:	aa01      	add	r2, sp, #4
    770a:	f000 f979 	bl	7a00 <_fstat_r>
    770e:	2800      	cmp	r0, #0
    7710:	dbf3      	blt.n	76fa <__smakebuf_r+0x16>
    7712:	9b02      	ldr	r3, [sp, #8]
    7714:	27f0      	movs	r7, #240	; 0xf0
    7716:	023f      	lsls	r7, r7, #8
    7718:	4a18      	ldr	r2, [pc, #96]	; (777c <__smakebuf_r+0x98>)
    771a:	401f      	ands	r7, r3
    771c:	18bf      	adds	r7, r7, r2
    771e:	427b      	negs	r3, r7
    7720:	415f      	adcs	r7, r3
    7722:	2680      	movs	r6, #128	; 0x80
    7724:	00f6      	lsls	r6, r6, #3
    7726:	1c28      	adds	r0, r5, #0
    7728:	1c31      	adds	r1, r6, #0
    772a:	f000 f889 	bl	7840 <_malloc_r>
    772e:	2800      	cmp	r0, #0
    7730:	d10c      	bne.n	774c <__smakebuf_r+0x68>
    7732:	89a3      	ldrh	r3, [r4, #12]
    7734:	059a      	lsls	r2, r3, #22
    7736:	d41f      	bmi.n	7778 <__smakebuf_r+0x94>
    7738:	2202      	movs	r2, #2
    773a:	4313      	orrs	r3, r2
    773c:	81a3      	strh	r3, [r4, #12]
    773e:	1c23      	adds	r3, r4, #0
    7740:	3347      	adds	r3, #71	; 0x47
    7742:	6023      	str	r3, [r4, #0]
    7744:	6123      	str	r3, [r4, #16]
    7746:	2301      	movs	r3, #1
    7748:	6163      	str	r3, [r4, #20]
    774a:	e015      	b.n	7778 <__smakebuf_r+0x94>
    774c:	4b0c      	ldr	r3, [pc, #48]	; (7780 <__smakebuf_r+0x9c>)
    774e:	2280      	movs	r2, #128	; 0x80
    7750:	62ab      	str	r3, [r5, #40]	; 0x28
    7752:	89a3      	ldrh	r3, [r4, #12]
    7754:	6020      	str	r0, [r4, #0]
    7756:	4313      	orrs	r3, r2
    7758:	81a3      	strh	r3, [r4, #12]
    775a:	6120      	str	r0, [r4, #16]
    775c:	6166      	str	r6, [r4, #20]
    775e:	2f00      	cmp	r7, #0
    7760:	d00a      	beq.n	7778 <__smakebuf_r+0x94>
    7762:	230e      	movs	r3, #14
    7764:	5ee1      	ldrsh	r1, [r4, r3]
    7766:	1c28      	adds	r0, r5, #0
    7768:	f000 f95c 	bl	7a24 <_isatty_r>
    776c:	2800      	cmp	r0, #0
    776e:	d003      	beq.n	7778 <__smakebuf_r+0x94>
    7770:	89a3      	ldrh	r3, [r4, #12]
    7772:	2201      	movs	r2, #1
    7774:	4313      	orrs	r3, r2
    7776:	81a3      	strh	r3, [r4, #12]
    7778:	b011      	add	sp, #68	; 0x44
    777a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    777c:	ffffe000 	.word	0xffffe000
    7780:	0000755d 	.word	0x0000755d

00007784 <malloc>:
    7784:	b508      	push	{r3, lr}
    7786:	4b03      	ldr	r3, [pc, #12]	; (7794 <malloc+0x10>)
    7788:	1c01      	adds	r1, r0, #0
    778a:	6818      	ldr	r0, [r3, #0]
    778c:	f000 f858 	bl	7840 <_malloc_r>
    7790:	bd08      	pop	{r3, pc}
    7792:	46c0      	nop			; (mov r8, r8)
    7794:	2000006c 	.word	0x2000006c

00007798 <memchr>:
    7798:	b2c9      	uxtb	r1, r1
    779a:	1882      	adds	r2, r0, r2
    779c:	4290      	cmp	r0, r2
    779e:	d004      	beq.n	77aa <memchr+0x12>
    77a0:	7803      	ldrb	r3, [r0, #0]
    77a2:	428b      	cmp	r3, r1
    77a4:	d002      	beq.n	77ac <memchr+0x14>
    77a6:	3001      	adds	r0, #1
    77a8:	e7f8      	b.n	779c <memchr+0x4>
    77aa:	2000      	movs	r0, #0
    77ac:	4770      	bx	lr
	...

000077b0 <_free_r>:
    77b0:	b530      	push	{r4, r5, lr}
    77b2:	2900      	cmp	r1, #0
    77b4:	d040      	beq.n	7838 <_free_r+0x88>
    77b6:	3904      	subs	r1, #4
    77b8:	680b      	ldr	r3, [r1, #0]
    77ba:	2b00      	cmp	r3, #0
    77bc:	da00      	bge.n	77c0 <_free_r+0x10>
    77be:	18c9      	adds	r1, r1, r3
    77c0:	4a1e      	ldr	r2, [pc, #120]	; (783c <_free_r+0x8c>)
    77c2:	6813      	ldr	r3, [r2, #0]
    77c4:	1c14      	adds	r4, r2, #0
    77c6:	2b00      	cmp	r3, #0
    77c8:	d102      	bne.n	77d0 <_free_r+0x20>
    77ca:	604b      	str	r3, [r1, #4]
    77cc:	6011      	str	r1, [r2, #0]
    77ce:	e033      	b.n	7838 <_free_r+0x88>
    77d0:	4299      	cmp	r1, r3
    77d2:	d20f      	bcs.n	77f4 <_free_r+0x44>
    77d4:	6808      	ldr	r0, [r1, #0]
    77d6:	180a      	adds	r2, r1, r0
    77d8:	429a      	cmp	r2, r3
    77da:	d105      	bne.n	77e8 <_free_r+0x38>
    77dc:	6813      	ldr	r3, [r2, #0]
    77de:	6852      	ldr	r2, [r2, #4]
    77e0:	18c0      	adds	r0, r0, r3
    77e2:	6008      	str	r0, [r1, #0]
    77e4:	604a      	str	r2, [r1, #4]
    77e6:	e000      	b.n	77ea <_free_r+0x3a>
    77e8:	604b      	str	r3, [r1, #4]
    77ea:	6021      	str	r1, [r4, #0]
    77ec:	e024      	b.n	7838 <_free_r+0x88>
    77ee:	428a      	cmp	r2, r1
    77f0:	d803      	bhi.n	77fa <_free_r+0x4a>
    77f2:	1c13      	adds	r3, r2, #0
    77f4:	685a      	ldr	r2, [r3, #4]
    77f6:	2a00      	cmp	r2, #0
    77f8:	d1f9      	bne.n	77ee <_free_r+0x3e>
    77fa:	681d      	ldr	r5, [r3, #0]
    77fc:	195c      	adds	r4, r3, r5
    77fe:	428c      	cmp	r4, r1
    7800:	d10b      	bne.n	781a <_free_r+0x6a>
    7802:	6809      	ldr	r1, [r1, #0]
    7804:	1869      	adds	r1, r5, r1
    7806:	1858      	adds	r0, r3, r1
    7808:	6019      	str	r1, [r3, #0]
    780a:	4290      	cmp	r0, r2
    780c:	d114      	bne.n	7838 <_free_r+0x88>
    780e:	6814      	ldr	r4, [r2, #0]
    7810:	6852      	ldr	r2, [r2, #4]
    7812:	1909      	adds	r1, r1, r4
    7814:	6019      	str	r1, [r3, #0]
    7816:	605a      	str	r2, [r3, #4]
    7818:	e00e      	b.n	7838 <_free_r+0x88>
    781a:	428c      	cmp	r4, r1
    781c:	d902      	bls.n	7824 <_free_r+0x74>
    781e:	230c      	movs	r3, #12
    7820:	6003      	str	r3, [r0, #0]
    7822:	e009      	b.n	7838 <_free_r+0x88>
    7824:	6808      	ldr	r0, [r1, #0]
    7826:	180c      	adds	r4, r1, r0
    7828:	4294      	cmp	r4, r2
    782a:	d103      	bne.n	7834 <_free_r+0x84>
    782c:	6814      	ldr	r4, [r2, #0]
    782e:	6852      	ldr	r2, [r2, #4]
    7830:	1900      	adds	r0, r0, r4
    7832:	6008      	str	r0, [r1, #0]
    7834:	604a      	str	r2, [r1, #4]
    7836:	6059      	str	r1, [r3, #4]
    7838:	bd30      	pop	{r4, r5, pc}
    783a:	46c0      	nop			; (mov r8, r8)
    783c:	20000860 	.word	0x20000860

00007840 <_malloc_r>:
    7840:	b570      	push	{r4, r5, r6, lr}
    7842:	2303      	movs	r3, #3
    7844:	1ccd      	adds	r5, r1, #3
    7846:	439d      	bics	r5, r3
    7848:	3508      	adds	r5, #8
    784a:	1c06      	adds	r6, r0, #0
    784c:	2d0c      	cmp	r5, #12
    784e:	d201      	bcs.n	7854 <_malloc_r+0x14>
    7850:	250c      	movs	r5, #12
    7852:	e001      	b.n	7858 <_malloc_r+0x18>
    7854:	2d00      	cmp	r5, #0
    7856:	db3f      	blt.n	78d8 <_malloc_r+0x98>
    7858:	428d      	cmp	r5, r1
    785a:	d33d      	bcc.n	78d8 <_malloc_r+0x98>
    785c:	4b20      	ldr	r3, [pc, #128]	; (78e0 <_malloc_r+0xa0>)
    785e:	681c      	ldr	r4, [r3, #0]
    7860:	1c1a      	adds	r2, r3, #0
    7862:	1c21      	adds	r1, r4, #0
    7864:	2900      	cmp	r1, #0
    7866:	d013      	beq.n	7890 <_malloc_r+0x50>
    7868:	6808      	ldr	r0, [r1, #0]
    786a:	1b43      	subs	r3, r0, r5
    786c:	d40d      	bmi.n	788a <_malloc_r+0x4a>
    786e:	2b0b      	cmp	r3, #11
    7870:	d902      	bls.n	7878 <_malloc_r+0x38>
    7872:	600b      	str	r3, [r1, #0]
    7874:	18cc      	adds	r4, r1, r3
    7876:	e01e      	b.n	78b6 <_malloc_r+0x76>
    7878:	428c      	cmp	r4, r1
    787a:	d102      	bne.n	7882 <_malloc_r+0x42>
    787c:	6863      	ldr	r3, [r4, #4]
    787e:	6013      	str	r3, [r2, #0]
    7880:	e01a      	b.n	78b8 <_malloc_r+0x78>
    7882:	6848      	ldr	r0, [r1, #4]
    7884:	6060      	str	r0, [r4, #4]
    7886:	1c0c      	adds	r4, r1, #0
    7888:	e016      	b.n	78b8 <_malloc_r+0x78>
    788a:	1c0c      	adds	r4, r1, #0
    788c:	6849      	ldr	r1, [r1, #4]
    788e:	e7e9      	b.n	7864 <_malloc_r+0x24>
    7890:	4c14      	ldr	r4, [pc, #80]	; (78e4 <_malloc_r+0xa4>)
    7892:	6820      	ldr	r0, [r4, #0]
    7894:	2800      	cmp	r0, #0
    7896:	d103      	bne.n	78a0 <_malloc_r+0x60>
    7898:	1c30      	adds	r0, r6, #0
    789a:	f000 f825 	bl	78e8 <_sbrk_r>
    789e:	6020      	str	r0, [r4, #0]
    78a0:	1c30      	adds	r0, r6, #0
    78a2:	1c29      	adds	r1, r5, #0
    78a4:	f000 f820 	bl	78e8 <_sbrk_r>
    78a8:	1c43      	adds	r3, r0, #1
    78aa:	d015      	beq.n	78d8 <_malloc_r+0x98>
    78ac:	1cc4      	adds	r4, r0, #3
    78ae:	2303      	movs	r3, #3
    78b0:	439c      	bics	r4, r3
    78b2:	4284      	cmp	r4, r0
    78b4:	d10a      	bne.n	78cc <_malloc_r+0x8c>
    78b6:	6025      	str	r5, [r4, #0]
    78b8:	1c20      	adds	r0, r4, #0
    78ba:	300b      	adds	r0, #11
    78bc:	2207      	movs	r2, #7
    78be:	1d23      	adds	r3, r4, #4
    78c0:	4390      	bics	r0, r2
    78c2:	1ac3      	subs	r3, r0, r3
    78c4:	d00b      	beq.n	78de <_malloc_r+0x9e>
    78c6:	425a      	negs	r2, r3
    78c8:	50e2      	str	r2, [r4, r3]
    78ca:	e008      	b.n	78de <_malloc_r+0x9e>
    78cc:	1a21      	subs	r1, r4, r0
    78ce:	1c30      	adds	r0, r6, #0
    78d0:	f000 f80a 	bl	78e8 <_sbrk_r>
    78d4:	3001      	adds	r0, #1
    78d6:	d1ee      	bne.n	78b6 <_malloc_r+0x76>
    78d8:	230c      	movs	r3, #12
    78da:	6033      	str	r3, [r6, #0]
    78dc:	2000      	movs	r0, #0
    78de:	bd70      	pop	{r4, r5, r6, pc}
    78e0:	20000860 	.word	0x20000860
    78e4:	2000085c 	.word	0x2000085c

000078e8 <_sbrk_r>:
    78e8:	b538      	push	{r3, r4, r5, lr}
    78ea:	4c07      	ldr	r4, [pc, #28]	; (7908 <_sbrk_r+0x20>)
    78ec:	2300      	movs	r3, #0
    78ee:	1c05      	adds	r5, r0, #0
    78f0:	1c08      	adds	r0, r1, #0
    78f2:	6023      	str	r3, [r4, #0]
    78f4:	f7fa fc98 	bl	2228 <_sbrk>
    78f8:	1c43      	adds	r3, r0, #1
    78fa:	d103      	bne.n	7904 <_sbrk_r+0x1c>
    78fc:	6823      	ldr	r3, [r4, #0]
    78fe:	2b00      	cmp	r3, #0
    7900:	d000      	beq.n	7904 <_sbrk_r+0x1c>
    7902:	602b      	str	r3, [r5, #0]
    7904:	bd38      	pop	{r3, r4, r5, pc}
    7906:	46c0      	nop			; (mov r8, r8)
    7908:	20000a18 	.word	0x20000a18

0000790c <__sread>:
    790c:	b538      	push	{r3, r4, r5, lr}
    790e:	1c0c      	adds	r4, r1, #0
    7910:	250e      	movs	r5, #14
    7912:	5f49      	ldrsh	r1, [r1, r5]
    7914:	f000 f8ac 	bl	7a70 <_read_r>
    7918:	2800      	cmp	r0, #0
    791a:	db03      	blt.n	7924 <__sread+0x18>
    791c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    791e:	1813      	adds	r3, r2, r0
    7920:	6563      	str	r3, [r4, #84]	; 0x54
    7922:	e003      	b.n	792c <__sread+0x20>
    7924:	89a2      	ldrh	r2, [r4, #12]
    7926:	4b02      	ldr	r3, [pc, #8]	; (7930 <__sread+0x24>)
    7928:	4013      	ands	r3, r2
    792a:	81a3      	strh	r3, [r4, #12]
    792c:	bd38      	pop	{r3, r4, r5, pc}
    792e:	46c0      	nop			; (mov r8, r8)
    7930:	ffffefff 	.word	0xffffefff

00007934 <__swrite>:
    7934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7936:	1c1e      	adds	r6, r3, #0
    7938:	898b      	ldrh	r3, [r1, #12]
    793a:	1c05      	adds	r5, r0, #0
    793c:	1c0c      	adds	r4, r1, #0
    793e:	1c17      	adds	r7, r2, #0
    7940:	05da      	lsls	r2, r3, #23
    7942:	d505      	bpl.n	7950 <__swrite+0x1c>
    7944:	230e      	movs	r3, #14
    7946:	5ec9      	ldrsh	r1, [r1, r3]
    7948:	2200      	movs	r2, #0
    794a:	2302      	movs	r3, #2
    794c:	f000 f87c 	bl	7a48 <_lseek_r>
    7950:	89a2      	ldrh	r2, [r4, #12]
    7952:	4b05      	ldr	r3, [pc, #20]	; (7968 <__swrite+0x34>)
    7954:	1c28      	adds	r0, r5, #0
    7956:	4013      	ands	r3, r2
    7958:	81a3      	strh	r3, [r4, #12]
    795a:	220e      	movs	r2, #14
    795c:	5ea1      	ldrsh	r1, [r4, r2]
    795e:	1c33      	adds	r3, r6, #0
    7960:	1c3a      	adds	r2, r7, #0
    7962:	f000 f827 	bl	79b4 <_write_r>
    7966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7968:	ffffefff 	.word	0xffffefff

0000796c <__sseek>:
    796c:	b538      	push	{r3, r4, r5, lr}
    796e:	1c0c      	adds	r4, r1, #0
    7970:	250e      	movs	r5, #14
    7972:	5f49      	ldrsh	r1, [r1, r5]
    7974:	f000 f868 	bl	7a48 <_lseek_r>
    7978:	89a3      	ldrh	r3, [r4, #12]
    797a:	1c42      	adds	r2, r0, #1
    797c:	d103      	bne.n	7986 <__sseek+0x1a>
    797e:	4a05      	ldr	r2, [pc, #20]	; (7994 <__sseek+0x28>)
    7980:	4013      	ands	r3, r2
    7982:	81a3      	strh	r3, [r4, #12]
    7984:	e004      	b.n	7990 <__sseek+0x24>
    7986:	2280      	movs	r2, #128	; 0x80
    7988:	0152      	lsls	r2, r2, #5
    798a:	4313      	orrs	r3, r2
    798c:	81a3      	strh	r3, [r4, #12]
    798e:	6560      	str	r0, [r4, #84]	; 0x54
    7990:	bd38      	pop	{r3, r4, r5, pc}
    7992:	46c0      	nop			; (mov r8, r8)
    7994:	ffffefff 	.word	0xffffefff

00007998 <__sclose>:
    7998:	b508      	push	{r3, lr}
    799a:	230e      	movs	r3, #14
    799c:	5ec9      	ldrsh	r1, [r1, r3]
    799e:	f000 f81d 	bl	79dc <_close_r>
    79a2:	bd08      	pop	{r3, pc}

000079a4 <strlen>:
    79a4:	2300      	movs	r3, #0
    79a6:	5cc2      	ldrb	r2, [r0, r3]
    79a8:	3301      	adds	r3, #1
    79aa:	2a00      	cmp	r2, #0
    79ac:	d1fb      	bne.n	79a6 <strlen+0x2>
    79ae:	1e58      	subs	r0, r3, #1
    79b0:	4770      	bx	lr
	...

000079b4 <_write_r>:
    79b4:	b538      	push	{r3, r4, r5, lr}
    79b6:	4c08      	ldr	r4, [pc, #32]	; (79d8 <_write_r+0x24>)
    79b8:	1c05      	adds	r5, r0, #0
    79ba:	2000      	movs	r0, #0
    79bc:	6020      	str	r0, [r4, #0]
    79be:	1c08      	adds	r0, r1, #0
    79c0:	1c11      	adds	r1, r2, #0
    79c2:	1c1a      	adds	r2, r3, #0
    79c4:	f7f9 fadc 	bl	f80 <_write>
    79c8:	1c43      	adds	r3, r0, #1
    79ca:	d103      	bne.n	79d4 <_write_r+0x20>
    79cc:	6823      	ldr	r3, [r4, #0]
    79ce:	2b00      	cmp	r3, #0
    79d0:	d000      	beq.n	79d4 <_write_r+0x20>
    79d2:	602b      	str	r3, [r5, #0]
    79d4:	bd38      	pop	{r3, r4, r5, pc}
    79d6:	46c0      	nop			; (mov r8, r8)
    79d8:	20000a18 	.word	0x20000a18

000079dc <_close_r>:
    79dc:	b538      	push	{r3, r4, r5, lr}
    79de:	4c07      	ldr	r4, [pc, #28]	; (79fc <_close_r+0x20>)
    79e0:	2300      	movs	r3, #0
    79e2:	1c05      	adds	r5, r0, #0
    79e4:	1c08      	adds	r0, r1, #0
    79e6:	6023      	str	r3, [r4, #0]
    79e8:	f7fa fc30 	bl	224c <_close>
    79ec:	1c43      	adds	r3, r0, #1
    79ee:	d103      	bne.n	79f8 <_close_r+0x1c>
    79f0:	6823      	ldr	r3, [r4, #0]
    79f2:	2b00      	cmp	r3, #0
    79f4:	d000      	beq.n	79f8 <_close_r+0x1c>
    79f6:	602b      	str	r3, [r5, #0]
    79f8:	bd38      	pop	{r3, r4, r5, pc}
    79fa:	46c0      	nop			; (mov r8, r8)
    79fc:	20000a18 	.word	0x20000a18

00007a00 <_fstat_r>:
    7a00:	b538      	push	{r3, r4, r5, lr}
    7a02:	4c07      	ldr	r4, [pc, #28]	; (7a20 <_fstat_r+0x20>)
    7a04:	2300      	movs	r3, #0
    7a06:	1c05      	adds	r5, r0, #0
    7a08:	1c08      	adds	r0, r1, #0
    7a0a:	1c11      	adds	r1, r2, #0
    7a0c:	6023      	str	r3, [r4, #0]
    7a0e:	f7fa fc21 	bl	2254 <_fstat>
    7a12:	1c43      	adds	r3, r0, #1
    7a14:	d103      	bne.n	7a1e <_fstat_r+0x1e>
    7a16:	6823      	ldr	r3, [r4, #0]
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d000      	beq.n	7a1e <_fstat_r+0x1e>
    7a1c:	602b      	str	r3, [r5, #0]
    7a1e:	bd38      	pop	{r3, r4, r5, pc}
    7a20:	20000a18 	.word	0x20000a18

00007a24 <_isatty_r>:
    7a24:	b538      	push	{r3, r4, r5, lr}
    7a26:	4c07      	ldr	r4, [pc, #28]	; (7a44 <_isatty_r+0x20>)
    7a28:	2300      	movs	r3, #0
    7a2a:	1c05      	adds	r5, r0, #0
    7a2c:	1c08      	adds	r0, r1, #0
    7a2e:	6023      	str	r3, [r4, #0]
    7a30:	f7fa fc16 	bl	2260 <_isatty>
    7a34:	1c43      	adds	r3, r0, #1
    7a36:	d103      	bne.n	7a40 <_isatty_r+0x1c>
    7a38:	6823      	ldr	r3, [r4, #0]
    7a3a:	2b00      	cmp	r3, #0
    7a3c:	d000      	beq.n	7a40 <_isatty_r+0x1c>
    7a3e:	602b      	str	r3, [r5, #0]
    7a40:	bd38      	pop	{r3, r4, r5, pc}
    7a42:	46c0      	nop			; (mov r8, r8)
    7a44:	20000a18 	.word	0x20000a18

00007a48 <_lseek_r>:
    7a48:	b538      	push	{r3, r4, r5, lr}
    7a4a:	4c08      	ldr	r4, [pc, #32]	; (7a6c <_lseek_r+0x24>)
    7a4c:	1c05      	adds	r5, r0, #0
    7a4e:	2000      	movs	r0, #0
    7a50:	6020      	str	r0, [r4, #0]
    7a52:	1c08      	adds	r0, r1, #0
    7a54:	1c11      	adds	r1, r2, #0
    7a56:	1c1a      	adds	r2, r3, #0
    7a58:	f7fa fc04 	bl	2264 <_lseek>
    7a5c:	1c43      	adds	r3, r0, #1
    7a5e:	d103      	bne.n	7a68 <_lseek_r+0x20>
    7a60:	6823      	ldr	r3, [r4, #0]
    7a62:	2b00      	cmp	r3, #0
    7a64:	d000      	beq.n	7a68 <_lseek_r+0x20>
    7a66:	602b      	str	r3, [r5, #0]
    7a68:	bd38      	pop	{r3, r4, r5, pc}
    7a6a:	46c0      	nop			; (mov r8, r8)
    7a6c:	20000a18 	.word	0x20000a18

00007a70 <_read_r>:
    7a70:	b538      	push	{r3, r4, r5, lr}
    7a72:	4c08      	ldr	r4, [pc, #32]	; (7a94 <_read_r+0x24>)
    7a74:	1c05      	adds	r5, r0, #0
    7a76:	2000      	movs	r0, #0
    7a78:	6020      	str	r0, [r4, #0]
    7a7a:	1c08      	adds	r0, r1, #0
    7a7c:	1c11      	adds	r1, r2, #0
    7a7e:	1c1a      	adds	r2, r3, #0
    7a80:	f7f9 fa5c 	bl	f3c <_read>
    7a84:	1c43      	adds	r3, r0, #1
    7a86:	d103      	bne.n	7a90 <_read_r+0x20>
    7a88:	6823      	ldr	r3, [r4, #0]
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	d000      	beq.n	7a90 <_read_r+0x20>
    7a8e:	602b      	str	r3, [r5, #0]
    7a90:	bd38      	pop	{r3, r4, r5, pc}
    7a92:	46c0      	nop			; (mov r8, r8)
    7a94:	20000a18 	.word	0x20000a18
    7a98:	42000800 	.word	0x42000800
    7a9c:	42000c00 	.word	0x42000c00
    7aa0:	42001000 	.word	0x42001000
    7aa4:	42001400 	.word	0x42001400
    7aa8:	42001800 	.word	0x42001800
    7aac:	42001c00 	.word	0x42001c00
    7ab0:	42002c00 	.word	0x42002c00
    7ab4:	42003000 	.word	0x42003000
    7ab8:	42003400 	.word	0x42003400
    7abc:	001c1c1b 	.word	0x001c1c1b
    7ac0:	10000800 	.word	0x10000800
    7ac4:	00002000 	.word	0x00002000
    7ac8:	0c0b0a09 	.word	0x0c0b0a09
    7acc:	00000e0d 	.word	0x00000e0d
    7ad0:	0000199a 	.word	0x0000199a
    7ad4:	00001be0 	.word	0x00001be0
    7ad8:	00001be0 	.word	0x00001be0
    7adc:	00001be0 	.word	0x00001be0
    7ae0:	00001be0 	.word	0x00001be0
    7ae4:	00001be0 	.word	0x00001be0
    7ae8:	00001be0 	.word	0x00001be0
    7aec:	00001be0 	.word	0x00001be0
    7af0:	00001be0 	.word	0x00001be0
    7af4:	00001be0 	.word	0x00001be0
    7af8:	00001be0 	.word	0x00001be0
    7afc:	00001be0 	.word	0x00001be0
    7b00:	00001be0 	.word	0x00001be0
    7b04:	00001be0 	.word	0x00001be0
    7b08:	00001be0 	.word	0x00001be0
    7b0c:	00001be0 	.word	0x00001be0
    7b10:	00001982 	.word	0x00001982
    7b14:	00001be0 	.word	0x00001be0
    7b18:	00001be0 	.word	0x00001be0
    7b1c:	00001be0 	.word	0x00001be0
    7b20:	00001be0 	.word	0x00001be0
    7b24:	00001be0 	.word	0x00001be0
    7b28:	00001be0 	.word	0x00001be0
    7b2c:	00001be0 	.word	0x00001be0
    7b30:	00001be0 	.word	0x00001be0
    7b34:	00001be0 	.word	0x00001be0
    7b38:	00001be0 	.word	0x00001be0
    7b3c:	00001be0 	.word	0x00001be0
    7b40:	00001be0 	.word	0x00001be0
    7b44:	00001be0 	.word	0x00001be0
    7b48:	00001be0 	.word	0x00001be0
    7b4c:	00001be0 	.word	0x00001be0
    7b50:	00001992 	.word	0x00001992
    7b54:	00001be0 	.word	0x00001be0
    7b58:	00001be0 	.word	0x00001be0
    7b5c:	00001be0 	.word	0x00001be0
    7b60:	00001be0 	.word	0x00001be0
    7b64:	00001be0 	.word	0x00001be0
    7b68:	00001be0 	.word	0x00001be0
    7b6c:	00001be0 	.word	0x00001be0
    7b70:	00001be0 	.word	0x00001be0
    7b74:	00001be0 	.word	0x00001be0
    7b78:	00001be0 	.word	0x00001be0
    7b7c:	00001be0 	.word	0x00001be0
    7b80:	00001be0 	.word	0x00001be0
    7b84:	00001be0 	.word	0x00001be0
    7b88:	00001be0 	.word	0x00001be0
    7b8c:	00001be0 	.word	0x00001be0
    7b90:	0000198a 	.word	0x0000198a
    7b94:	0000196a 	.word	0x0000196a
    7b98:	000019a2 	.word	0x000019a2
    7b9c:	0000197a 	.word	0x0000197a
    7ba0:	00001972 	.word	0x00001972
    7ba4:	0000ffff 	.word	0x0000ffff
    7ba8:	0000ffff 	.word	0x0000ffff
    7bac:	0000ffff 	.word	0x0000ffff
    7bb0:	0000ffff 	.word	0x0000ffff
    7bb4:	00000004 	.word	0x00000004
    7bb8:	00000005 	.word	0x00000005
    7bbc:	00000006 	.word	0x00000006
    7bc0:	00000007 	.word	0x00000007
    7bc4:	0000ffff 	.word	0x0000ffff
    7bc8:	0000ffff 	.word	0x0000ffff
    7bcc:	00000022 	.word	0x00000022
    7bd0:	00000023 	.word	0x00000023
    7bd4:	0000ffff 	.word	0x0000ffff
    7bd8:	0000ffff 	.word	0x0000ffff
    7bdc:	0000ffff 	.word	0x0000ffff
    7be0:	0000ffff 	.word	0x0000ffff
    7be4:	00000008 	.word	0x00000008
    7be8:	00000009 	.word	0x00000009
    7bec:	0000ffff 	.word	0x0000ffff
    7bf0:	0000ffff 	.word	0x0000ffff
    7bf4:	00001c34 	.word	0x00001c34
    7bf8:	00001c90 	.word	0x00001c90
    7bfc:	00001c90 	.word	0x00001c90
    7c00:	00001c2e 	.word	0x00001c2e
    7c04:	00001c2e 	.word	0x00001c2e
    7c08:	00001c4a 	.word	0x00001c4a
    7c0c:	00001c3a 	.word	0x00001c3a
    7c10:	00001c50 	.word	0x00001c50
    7c14:	00001c7e 	.word	0x00001c7e
    7c18:	00001d18 	.word	0x00001d18
    7c1c:	00001d78 	.word	0x00001d78
    7c20:	00001d78 	.word	0x00001d78
    7c24:	00001cf8 	.word	0x00001cf8
    7c28:	00001d0a 	.word	0x00001d0a
    7c2c:	00001d26 	.word	0x00001d26
    7c30:	00001cfc 	.word	0x00001cfc
    7c34:	00001d34 	.word	0x00001d34
    7c38:	00001d68 	.word	0x00001d68
    7c3c:	00002a78 	.word	0x00002a78
    7c40:	00002bec 	.word	0x00002bec
    7c44:	00002bf6 	.word	0x00002bf6
    7c48:	00002d8c 	.word	0x00002d8c
    7c4c:	00002d94 	.word	0x00002d94
    7c50:	00003362 	.word	0x00003362
    7c54:	00003420 	.word	0x00003420
    7c58:	0000336c 	.word	0x0000336c
    7c5c:	0000338c 	.word	0x0000338c
    7c60:	00003420 	.word	0x00003420
    7c64:	000033ae 	.word	0x000033ae
    7c68:	00003420 	.word	0x00003420
    7c6c:	000033f0 	.word	0x000033f0

00007c70 <tc_interrupt_vectors.11766>:
    7c70:	00141312 20656854 706d6574 20736920     ....The temp is 
    7c80:	20206425 20202020 20202020 20202020     %d              
    7c90:	00202020 20656854 75736572 6920746c        .The result i
    7ca0:	64252073 20202020 00202020 74736554     s %d       .Test
    7cb0:	75636553 79746972 3079654b 00000000     SecurityKey0....
    7cc0:	00005674 00005610 00005658 0000553e     tV...V..XV..>U..
    7cd0:	00005658 0000564c 00005658 0000553e     XV..LV..XV..>U..
    7ce0:	00005610 00005610 0000564c 0000553e     .V...V..LV..>U..
    7cf0:	00005534 00005534 00005534 00005898     4U..4U..4U...X..
    7d00:	00005cb8 00005ea6 00005ea6 00005c98     .\...^...^...\..
    7d10:	00005b82 00005b82 00005c8a 00005c98     .[...[...\...\..
    7d20:	00005b82 00005c8a 00005b82 00005c98     .[...\...[...\..
    7d30:	00005b80 00005b80 00005b80 00005eae     .[...[...[...^..
    7d40:	00000043                                C...

00007d44 <_global_impure_ptr>:
    7d44:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    7d54:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    7d64:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    7d74:	64636261 00006665                       abcdef..

00007d7c <__sf_fake_stdin>:
	...

00007d9c <__sf_fake_stdout>:
	...

00007dbc <__sf_fake_stderr>:
	...

00007ddc <_init>:
    7ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dde:	46c0      	nop			; (mov r8, r8)
    7de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7de2:	bc08      	pop	{r3}
    7de4:	469e      	mov	lr, r3
    7de6:	4770      	bx	lr

00007de8 <__init_array_start>:
    7de8:	000000dd 	.word	0x000000dd

00007dec <_fini>:
    7dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dee:	46c0      	nop			; (mov r8, r8)
    7df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7df2:	bc08      	pop	{r3}
    7df4:	469e      	mov	lr, r3
    7df6:	4770      	bx	lr

00007df8 <__fini_array_start>:
    7df8:	000000b5 	.word	0x000000b5
