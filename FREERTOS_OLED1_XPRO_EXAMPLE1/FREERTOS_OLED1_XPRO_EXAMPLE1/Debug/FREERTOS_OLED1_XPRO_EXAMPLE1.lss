
FREERTOS_OLED1_XPRO_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005104  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000080  20000000  00005104  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003d80  20000080  00005184  00010080  2**2
                  ALLOC
  3 .stack        00002000  20003e00  00008f04  00010080  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000100a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002a2be  00000000  00000000  00010103  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004686  00000000  00000000  0003a3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000bb92  00000000  00000000  0003ea47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009d8  00000000  00000000  0004a5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c30  00000000  00000000  0004afb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b9ae  00000000  00000000  0004bbe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015e14  00000000  00000000  0006758f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a655  00000000  00000000  0007d3a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002120  00000000  00000000  001079f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20005e00 	.word	0x20005e00
       4:	000019a9 	.word	0x000019a9
       8:	000019a5 	.word	0x000019a5
       c:	000019a5 	.word	0x000019a5
	...
      2c:	00001b69 	.word	0x00001b69
	...
      38:	00001bd1 	.word	0x00001bd1
      3c:	00001c15 	.word	0x00001c15
      40:	000019a5 	.word	0x000019a5
      44:	000019a5 	.word	0x000019a5
      48:	000019a5 	.word	0x000019a5
      4c:	000019a5 	.word	0x000019a5
      50:	000019a5 	.word	0x000019a5
      54:	000019a5 	.word	0x000019a5
      58:	000019a5 	.word	0x000019a5
      5c:	000019a5 	.word	0x000019a5
      60:	000019a5 	.word	0x000019a5
      64:	00000cb9 	.word	0x00000cb9
      68:	00000cc9 	.word	0x00000cc9
      6c:	00000cd9 	.word	0x00000cd9
      70:	00000ce9 	.word	0x00000ce9
      74:	00000cf9 	.word	0x00000cf9
      78:	00000d09 	.word	0x00000d09
      7c:	000019a5 	.word	0x000019a5
      80:	000019a5 	.word	0x000019a5
      84:	000019a5 	.word	0x000019a5
      88:	000019a5 	.word	0x000019a5
      8c:	000019a5 	.word	0x000019a5
      90:	000019a5 	.word	0x000019a5
	...
      9c:	000019a5 	.word	0x000019a5
      a0:	000019a5 	.word	0x000019a5
      a4:	00000000 	.word	0x00000000
      a8:	000019a5 	.word	0x000019a5
      ac:	000019a5 	.word	0x000019a5
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000080 	.word	0x20000080
      d4:	00000000 	.word	0x00000000
      d8:	00005104 	.word	0x00005104

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d003      	beq.n	fc <frame_dummy+0x20>
      f4:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f6:	2b00      	cmp	r3, #0
      f8:	d000      	beq.n	fc <frame_dummy+0x20>
      fa:	4798      	blx	r3
      fc:	bd08      	pop	{r3, pc}
      fe:	46c0      	nop			; (mov r8, r8)
     100:	00000000 	.word	0x00000000
     104:	00005104 	.word	0x00005104
     108:	20000084 	.word	0x20000084
     10c:	00005104 	.word	0x00005104
     110:	00000000 	.word	0x00000000

00000114 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	4647      	mov	r7, r8
     118:	b480      	push	{r7}
     11a:	1c0c      	adds	r4, r1, #0
     11c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     11e:	2800      	cmp	r0, #0
     120:	d10c      	bne.n	13c <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     122:	2a00      	cmp	r2, #0
     124:	dd0d      	ble.n	142 <_read+0x2e>
     126:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     128:	4e09      	ldr	r6, [pc, #36]	; (150 <_read+0x3c>)
     12a:	4d0a      	ldr	r5, [pc, #40]	; (154 <_read+0x40>)
     12c:	6830      	ldr	r0, [r6, #0]
     12e:	1c21      	adds	r1, r4, #0
     130:	682b      	ldr	r3, [r5, #0]
     132:	4798      	blx	r3
		ptr++;
     134:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     136:	42bc      	cmp	r4, r7
     138:	d1f8      	bne.n	12c <_read+0x18>
     13a:	e004      	b.n	146 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     13c:	2001      	movs	r0, #1
     13e:	4240      	negs	r0, r0
     140:	e002      	b.n	148 <_read+0x34>
	}

	for (; len > 0; --len) {
     142:	2000      	movs	r0, #0
     144:	e000      	b.n	148 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     146:	4640      	mov	r0, r8
	}
	return nChars;
}
     148:	bc04      	pop	{r2}
     14a:	4690      	mov	r8, r2
     14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     14e:	46c0      	nop			; (mov r8, r8)
     150:	20003da0 	.word	0x20003da0
     154:	20003d98 	.word	0x20003d98

00000158 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	4647      	mov	r7, r8
     15c:	b480      	push	{r7}
     15e:	1c0e      	adds	r6, r1, #0
     160:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     162:	3801      	subs	r0, #1
     164:	2802      	cmp	r0, #2
     166:	d810      	bhi.n	18a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     168:	2a00      	cmp	r2, #0
     16a:	d011      	beq.n	190 <_write+0x38>
     16c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     16e:	4b0d      	ldr	r3, [pc, #52]	; (1a4 <_write+0x4c>)
     170:	4698      	mov	r8, r3
     172:	4f0d      	ldr	r7, [pc, #52]	; (1a8 <_write+0x50>)
     174:	4643      	mov	r3, r8
     176:	6818      	ldr	r0, [r3, #0]
     178:	5d31      	ldrb	r1, [r6, r4]
     17a:	683b      	ldr	r3, [r7, #0]
     17c:	4798      	blx	r3
     17e:	2800      	cmp	r0, #0
     180:	db08      	blt.n	194 <_write+0x3c>
			return -1;
		}
		++nChars;
     182:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     184:	42a5      	cmp	r5, r4
     186:	d1f5      	bne.n	174 <_write+0x1c>
     188:	e007      	b.n	19a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     18a:	2001      	movs	r0, #1
     18c:	4240      	negs	r0, r0
     18e:	e005      	b.n	19c <_write+0x44>
	}

	for (; len != 0; --len) {
     190:	2000      	movs	r0, #0
     192:	e003      	b.n	19c <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     194:	2001      	movs	r0, #1
     196:	4240      	negs	r0, r0
     198:	e000      	b.n	19c <_write+0x44>
		}
		++nChars;
     19a:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     19c:	bc04      	pop	{r2}
     19e:	4690      	mov	r8, r2
     1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	20003da0 	.word	0x20003da0
     1a8:	20003d9c 	.word	0x20003d9c

000001ac <ssd1306_write_command>:
	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
	ssd1306_write_command(0xF1);

	ssd1306_display_on();
}
     1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ae:	b083      	sub	sp, #12
     1b0:	466f      	mov	r7, sp
     1b2:	71f8      	strb	r0, [r7, #7]
     1b4:	3707      	adds	r7, #7
     1b6:	4c0b      	ldr	r4, [pc, #44]	; (1e4 <ssd1306_write_command+0x38>)
     1b8:	4e0b      	ldr	r6, [pc, #44]	; (1e8 <ssd1306_write_command+0x3c>)
     1ba:	1c20      	adds	r0, r4, #0
     1bc:	1c31      	adds	r1, r6, #0
     1be:	2201      	movs	r2, #1
     1c0:	4d0a      	ldr	r5, [pc, #40]	; (1ec <ssd1306_write_command+0x40>)
     1c2:	47a8      	blx	r5
     1c4:	2280      	movs	r2, #128	; 0x80
     1c6:	0192      	lsls	r2, r2, #6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1c8:	4b09      	ldr	r3, [pc, #36]	; (1f0 <ssd1306_write_command+0x44>)
     1ca:	615a      	str	r2, [r3, #20]
 */
void ssd1306_write_command(uint8_t command)
{
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
     1cc:	1c20      	adds	r0, r4, #0
     1ce:	1c39      	adds	r1, r7, #0
     1d0:	2201      	movs	r2, #1
     1d2:	4b08      	ldr	r3, [pc, #32]	; (1f4 <ssd1306_write_command+0x48>)
     1d4:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     1d6:	1c20      	adds	r0, r4, #0
     1d8:	1c31      	adds	r1, r6, #0
     1da:	2200      	movs	r2, #0
     1dc:	47a8      	blx	r5
}
     1de:	b003      	add	sp, #12
     1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1e2:	46c0      	nop			; (mov r8, r8)
     1e4:	20003da4 	.word	0x20003da4
     1e8:	20003de0 	.word	0x20003de0
     1ec:	00000d19 	.word	0x00000d19
     1f0:	41004400 	.word	0x41004400
     1f4:	00000e05 	.word	0x00000e05

000001f8 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	466f      	mov	r7, sp
     1fe:	71f8      	strb	r0, [r7, #7]
     200:	3707      	adds	r7, #7
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     202:	4c0b      	ldr	r4, [pc, #44]	; (230 <ssd1306_write_data+0x38>)
     204:	4e0b      	ldr	r6, [pc, #44]	; (234 <ssd1306_write_data+0x3c>)
     206:	1c20      	adds	r0, r4, #0
     208:	1c31      	adds	r1, r6, #0
     20a:	2201      	movs	r2, #1
     20c:	4d0a      	ldr	r5, [pc, #40]	; (238 <ssd1306_write_data+0x40>)
     20e:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     210:	2280      	movs	r2, #128	; 0x80
     212:	0192      	lsls	r2, r2, #6
     214:	4b09      	ldr	r3, [pc, #36]	; (23c <ssd1306_write_data+0x44>)
     216:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
     218:	1c20      	adds	r0, r4, #0
     21a:	1c39      	adds	r1, r7, #0
     21c:	2201      	movs	r2, #1
     21e:	4b08      	ldr	r3, [pc, #32]	; (240 <ssd1306_write_data+0x48>)
     220:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     222:	1c20      	adds	r0, r4, #0
     224:	1c31      	adds	r1, r6, #0
     226:	2200      	movs	r2, #0
     228:	47a8      	blx	r5
}
     22a:	b003      	add	sp, #12
     22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     22e:	46c0      	nop			; (mov r8, r8)
     230:	20003da4 	.word	0x20003da4
     234:	20003de0 	.word	0x20003de0
     238:	00000d19 	.word	0x00000d19
     23c:	41004400 	.word	0x41004400
     240:	00000e05 	.word	0x00000e05

00000244 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     244:	4b02      	ldr	r3, [pc, #8]	; (250 <gfx_mono_framebuffer_put_byte+0xc>)
     246:	681b      	ldr	r3, [r3, #0]
     248:	01c0      	lsls	r0, r0, #7
     24a:	1841      	adds	r1, r0, r1
     24c:	54ca      	strb	r2, [r1, r3]
}
     24e:	4770      	bx	lr
     250:	2000009c 	.word	0x2000009c

00000254 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     254:	4b02      	ldr	r3, [pc, #8]	; (260 <gfx_mono_framebuffer_get_byte+0xc>)
     256:	681b      	ldr	r3, [r3, #0]
     258:	01c0      	lsls	r0, r0, #7
     25a:	1840      	adds	r0, r0, r1
     25c:	5c18      	ldrb	r0, [r3, r0]
}
     25e:	4770      	bx	lr
     260:	2000009c 	.word	0x2000009c

00000264 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     264:	b5f0      	push	{r4, r5, r6, r7, lr}
     266:	4657      	mov	r7, sl
     268:	464e      	mov	r6, r9
     26a:	4645      	mov	r5, r8
     26c:	b4e0      	push	{r5, r6, r7}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
     26e:	1884      	adds	r4, r0, r2
     270:	2c80      	cmp	r4, #128	; 0x80
     272:	dd03      	ble.n	27c <gfx_mono_generic_draw_horizontal_line+0x18>
		length = GFX_MONO_LCD_WIDTH - x;
     274:	2280      	movs	r2, #128	; 0x80
     276:	4252      	negs	r2, r2
     278:	1a12      	subs	r2, r2, r0
     27a:	b2d2      	uxtb	r2, r2
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     27c:	2a00      	cmp	r2, #0
     27e:	d056      	beq.n	32e <gfx_mono_generic_draw_horizontal_line+0xca>
	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
		length = GFX_MONO_LCD_WIDTH - x;
	}

	page = y / 8;
     280:	08cc      	lsrs	r4, r1, #3
	pixelmask = (1 << (y - (page * 8)));
     282:	00e5      	lsls	r5, r4, #3
     284:	1b49      	subs	r1, r1, r5
     286:	2501      	movs	r5, #1
     288:	408d      	lsls	r5, r1
     28a:	46a8      	mov	r8, r5
     28c:	b2ef      	uxtb	r7, r5
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     28e:	2b01      	cmp	r3, #1
     290:	d00b      	beq.n	2aa <gfx_mono_generic_draw_horizontal_line+0x46>
     292:	2b00      	cmp	r3, #0
     294:	d011      	beq.n	2ba <gfx_mono_generic_draw_horizontal_line+0x56>
     296:	2b02      	cmp	r3, #2
     298:	d149      	bne.n	32e <gfx_mono_generic_draw_horizontal_line+0xca>
     29a:	1c15      	adds	r5, r2, #0
     29c:	3801      	subs	r0, #1
     29e:	4682      	mov	sl, r0
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     2a0:	4b25      	ldr	r3, [pc, #148]	; (338 <gfx_mono_generic_draw_horizontal_line+0xd4>)
     2a2:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     2a4:	4925      	ldr	r1, [pc, #148]	; (33c <gfx_mono_generic_draw_horizontal_line+0xd8>)
     2a6:	4688      	mov	r8, r1
     2a8:	e031      	b.n	30e <gfx_mono_generic_draw_horizontal_line+0xaa>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     2aa:	1c15      	adds	r5, r2, #0
     2ac:	3801      	subs	r0, #1
     2ae:	4682      	mov	sl, r0
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     2b0:	4b21      	ldr	r3, [pc, #132]	; (338 <gfx_mono_generic_draw_horizontal_line+0xd4>)
     2b2:	4699      	mov	r9, r3
			temp |= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     2b4:	4921      	ldr	r1, [pc, #132]	; (33c <gfx_mono_generic_draw_horizontal_line+0xd8>)
     2b6:	4688      	mov	r8, r1
     2b8:	e006      	b.n	2c8 <gfx_mono_generic_draw_horizontal_line+0x64>
	if (length == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     2ba:	1c15      	adds	r5, r2, #0
     2bc:	3801      	subs	r0, #1
     2be:	4682      	mov	sl, r0
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     2c0:	4b1d      	ldr	r3, [pc, #116]	; (338 <gfx_mono_generic_draw_horizontal_line+0xd4>)
     2c2:	4699      	mov	r9, r3
			temp &= ~pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
     2c4:	4f1d      	ldr	r7, [pc, #116]	; (33c <gfx_mono_generic_draw_horizontal_line+0xd8>)
     2c6:	e010      	b.n	2ea <gfx_mono_generic_draw_horizontal_line+0x86>
     2c8:	4651      	mov	r1, sl
     2ca:	186e      	adds	r6, r5, r1
     2cc:	b2f6      	uxtb	r6, r6
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     2ce:	1c20      	adds	r0, r4, #0
     2d0:	1c31      	adds	r1, r6, #0
     2d2:	47c8      	blx	r9
			temp |= pixelmask;
     2d4:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
     2d6:	b2c2      	uxtb	r2, r0
     2d8:	1c20      	adds	r0, r4, #0
     2da:	1c31      	adds	r1, r6, #0
     2dc:	2300      	movs	r3, #0
     2de:	47c0      	blx	r8
     2e0:	3d01      	subs	r5, #1
     2e2:	b2ed      	uxtb	r5, r5
		return;
	}

	switch (color) {
	case GFX_PIXEL_SET:
		while (length-- > 0) {
     2e4:	2d00      	cmp	r5, #0
     2e6:	d1ef      	bne.n	2c8 <gfx_mono_generic_draw_horizontal_line+0x64>
     2e8:	e021      	b.n	32e <gfx_mono_generic_draw_horizontal_line+0xca>
     2ea:	4653      	mov	r3, sl
     2ec:	18ee      	adds	r6, r5, r3
     2ee:	b2f6      	uxtb	r6, r6
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     2f0:	1c20      	adds	r0, r4, #0
     2f2:	1c31      	adds	r1, r6, #0
     2f4:	47c8      	blx	r9
			temp &= ~pixelmask;
     2f6:	4641      	mov	r1, r8
     2f8:	4388      	bics	r0, r1
			gfx_mono_put_byte(page, x + length, temp);
     2fa:	b2c2      	uxtb	r2, r0
     2fc:	1c20      	adds	r0, r4, #0
     2fe:	1c31      	adds	r1, r6, #0
     300:	2300      	movs	r3, #0
     302:	47b8      	blx	r7
     304:	3d01      	subs	r5, #1
     306:	b2ed      	uxtb	r5, r5
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
     308:	2d00      	cmp	r5, #0
     30a:	d1ee      	bne.n	2ea <gfx_mono_generic_draw_horizontal_line+0x86>
     30c:	e00f      	b.n	32e <gfx_mono_generic_draw_horizontal_line+0xca>
     30e:	4653      	mov	r3, sl
     310:	18ee      	adds	r6, r5, r3
     312:	b2f6      	uxtb	r6, r6
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
     314:	1c20      	adds	r0, r4, #0
     316:	1c31      	adds	r1, r6, #0
     318:	47c8      	blx	r9
			temp ^= pixelmask;
     31a:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
     31c:	b2c2      	uxtb	r2, r0
     31e:	1c20      	adds	r0, r4, #0
     320:	1c31      	adds	r1, r6, #0
     322:	2300      	movs	r3, #0
     324:	47c0      	blx	r8
     326:	3d01      	subs	r5, #1
     328:	b2ed      	uxtb	r5, r5
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
     32a:	2d00      	cmp	r5, #0
     32c:	d1ef      	bne.n	30e <gfx_mono_generic_draw_horizontal_line+0xaa>
		break;

	default:
		break;
	}
}
     32e:	bc1c      	pop	{r2, r3, r4}
     330:	4690      	mov	r8, r2
     332:	4699      	mov	r9, r3
     334:	46a2      	mov	sl, r4
     336:	bdf0      	pop	{r4, r5, r6, r7, pc}
     338:	00000735 	.word	0x00000735
     33c:	00000679 	.word	0x00000679

00000340 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
     340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     342:	464f      	mov	r7, r9
     344:	4646      	mov	r6, r8
     346:	b4c0      	push	{r6, r7}
     348:	1c06      	adds	r6, r0, #0
     34a:	1c1d      	adds	r5, r3, #0
	if (length == 0) {
     34c:	2a00      	cmp	r2, #0
     34e:	d03f      	beq.n	3d0 <gfx_mono_generic_draw_vertical_line+0x90>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
     350:	1e4b      	subs	r3, r1, #1
     352:	18d3      	adds	r3, r2, r3
     354:	b2db      	uxtb	r3, r3

	if (y == y2) {
     356:	4299      	cmp	r1, r3
     358:	d103      	bne.n	362 <gfx_mono_generic_draw_vertical_line+0x22>
		gfx_mono_draw_pixel(x, y, color);
     35a:	1c2a      	adds	r2, r5, #0
     35c:	4b1e      	ldr	r3, [pc, #120]	; (3d8 <gfx_mono_generic_draw_vertical_line+0x98>)
     35e:	4798      	blx	r3
		return;
     360:	e036      	b.n	3d0 <gfx_mono_generic_draw_vertical_line+0x90>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
     362:	2b3e      	cmp	r3, #62	; 0x3e
     364:	d900      	bls.n	368 <gfx_mono_generic_draw_vertical_line+0x28>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
     366:	233f      	movs	r3, #63	; 0x3f
	}

	gfx_coord_t y1page = y / 8;
     368:	08ca      	lsrs	r2, r1, #3
     36a:	4690      	mov	r8, r2
	gfx_coord_t y2page = y2 / 8;
     36c:	08df      	lsrs	r7, r3, #3

	uint8_t y1bitpos = y & 0x07;
     36e:	2207      	movs	r2, #7
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
     370:	1c0c      	adds	r4, r1, #0
     372:	4014      	ands	r4, r2
     374:	20ff      	movs	r0, #255	; 0xff
     376:	1c01      	adds	r1, r0, #0
     378:	40a1      	lsls	r1, r4
     37a:	b2cc      	uxtb	r4, r1
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
     37c:	4013      	ands	r3, r2
     37e:	1ad3      	subs	r3, r2, r3
     380:	4118      	asrs	r0, r3
     382:	b2c0      	uxtb	r0, r0
     384:	4681      	mov	r9, r0

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
     386:	45b8      	cmp	r8, r7
     388:	d107      	bne.n	39a <gfx_mono_generic_draw_vertical_line+0x5a>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
     38a:	1c22      	adds	r2, r4, #0
     38c:	4002      	ands	r2, r0
     38e:	4640      	mov	r0, r8
     390:	1c31      	adds	r1, r6, #0
     392:	1c2b      	adds	r3, r5, #0
     394:	4c11      	ldr	r4, [pc, #68]	; (3dc <gfx_mono_generic_draw_vertical_line+0x9c>)
     396:	47a0      	blx	r4
     398:	e01a      	b.n	3d0 <gfx_mono_generic_draw_vertical_line+0x90>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
     39a:	4640      	mov	r0, r8
     39c:	1c31      	adds	r1, r6, #0
     39e:	1c22      	adds	r2, r4, #0
     3a0:	1c2b      	adds	r3, r5, #0
     3a2:	4c0e      	ldr	r4, [pc, #56]	; (3dc <gfx_mono_generic_draw_vertical_line+0x9c>)
     3a4:	47a0      	blx	r4

		while (++y1page < y2page) {
     3a6:	4644      	mov	r4, r8
     3a8:	3401      	adds	r4, #1
     3aa:	42a7      	cmp	r7, r4
     3ac:	d90a      	bls.n	3c4 <gfx_mono_generic_draw_vertical_line+0x84>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
     3ae:	490b      	ldr	r1, [pc, #44]	; (3dc <gfx_mono_generic_draw_vertical_line+0x9c>)
     3b0:	4688      	mov	r8, r1
     3b2:	1c20      	adds	r0, r4, #0
     3b4:	1c31      	adds	r1, r6, #0
     3b6:	22ff      	movs	r2, #255	; 0xff
     3b8:	1c2b      	adds	r3, r5, #0
     3ba:	47c0      	blx	r8
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);

		while (++y1page < y2page) {
     3bc:	3401      	adds	r4, #1
     3be:	b2e4      	uxtb	r4, r4
     3c0:	42a7      	cmp	r7, r4
     3c2:	d8f6      	bhi.n	3b2 <gfx_mono_generic_draw_vertical_line+0x72>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
     3c4:	1c38      	adds	r0, r7, #0
     3c6:	1c31      	adds	r1, r6, #0
     3c8:	464a      	mov	r2, r9
     3ca:	1c2b      	adds	r3, r5, #0
     3cc:	4c03      	ldr	r4, [pc, #12]	; (3dc <gfx_mono_generic_draw_vertical_line+0x9c>)
     3ce:	47a0      	blx	r4
	}
}
     3d0:	bc0c      	pop	{r2, r3}
     3d2:	4690      	mov	r8, r2
     3d4:	4699      	mov	r9, r3
     3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3d8:	000006cd 	.word	0x000006cd
     3dc:	00000741 	.word	0x00000741

000003e0 <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
     3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3e2:	465f      	mov	r7, fp
     3e4:	4656      	mov	r6, sl
     3e6:	464d      	mov	r5, r9
     3e8:	4644      	mov	r4, r8
     3ea:	b4f0      	push	{r4, r5, r6, r7}
     3ec:	b083      	sub	sp, #12
     3ee:	1c04      	adds	r4, r0, #0
     3f0:	1c0d      	adds	r5, r1, #0
     3f2:	a90c      	add	r1, sp, #48	; 0x30
     3f4:	7809      	ldrb	r1, [r1, #0]
     3f6:	4688      	mov	r8, r1
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
     3f8:	4290      	cmp	r0, r2
     3fa:	d904      	bls.n	406 <gfx_mono_generic_draw_line+0x26>
     3fc:	1c29      	adds	r1, r5, #0
		dx = x1;
		x1 = x2;
		x2 = dx;
		dy = y1;
		y1 = y2;
     3fe:	1c1d      	adds	r5, r3, #0
		y2 = dy;
     400:	1c0b      	adds	r3, r1, #0
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
		dx = x1;
		x1 = x2;
     402:	1c14      	adds	r4, r2, #0
		x2 = dx;
     404:	1c02      	adds	r2, r0, #0
		dy = y1;
		y1 = y2;
		y2 = dy;
	}

	dx = x2 - x1;
     406:	1b12      	subs	r2, r2, r4
     408:	b2d0      	uxtb	r0, r2
     40a:	b2c2      	uxtb	r2, r0
	dy = y2 - y1;
     40c:	1b5b      	subs	r3, r3, r5
     40e:	b2d9      	uxtb	r1, r3
     410:	b2cb      	uxtb	r3, r1

	x = x1;
	y = y1;

	if (dx < 0) {
     412:	b256      	sxtb	r6, r2
		xinc = -1;
		dx = -dx;
	} else {
		xinc = 1;
     414:	2701      	movs	r7, #1
     416:	9700      	str	r7, [sp, #0]
	dy = y2 - y1;

	x = x1;
	y = y1;

	if (dx < 0) {
     418:	2e00      	cmp	r6, #0
     41a:	da03      	bge.n	424 <gfx_mono_generic_draw_line+0x44>
		xinc = -1;
		dx = -dx;
     41c:	4242      	negs	r2, r0
     41e:	b2d2      	uxtb	r2, r2

	x = x1;
	y = y1;

	if (dx < 0) {
		xinc = -1;
     420:	26ff      	movs	r6, #255	; 0xff
     422:	9600      	str	r6, [sp, #0]
		dx = -dx;
	} else {
		xinc = 1;
	}

	if (dy < 0) {
     424:	b258      	sxtb	r0, r3
		yinc = -1;
		dy = -dy;
	} else {
		yinc = 1;
     426:	2701      	movs	r7, #1
     428:	46b9      	mov	r9, r7
		dx = -dx;
	} else {
		xinc = 1;
	}

	if (dy < 0) {
     42a:	2800      	cmp	r0, #0
     42c:	da03      	bge.n	436 <gfx_mono_generic_draw_line+0x56>
		yinc = -1;
		dy = -dy;
     42e:	424b      	negs	r3, r1
     430:	b2db      	uxtb	r3, r3
	} else {
		xinc = 1;
	}

	if (dy < 0) {
		yinc = -1;
     432:	20ff      	movs	r0, #255	; 0xff
     434:	4681      	mov	r9, r0
		dy = -dy;
	} else {
		yinc = 1;
	}

	if (dx > dy) {
     436:	b251      	sxtb	r1, r2
     438:	b258      	sxtb	r0, r3
     43a:	4281      	cmp	r1, r0
     43c:	dd20      	ble.n	480 <gfx_mono_generic_draw_line+0xa0>
		e = dy - dx;
     43e:	b2db      	uxtb	r3, r3
     440:	469b      	mov	fp, r3
     442:	b2d6      	uxtb	r6, r2
     444:	9601      	str	r6, [sp, #4]
     446:	1b9e      	subs	r6, r3, r6
     448:	b2f6      	uxtb	r6, r6
		for (i = 0; i <= dx; i++) {
     44a:	468a      	mov	sl, r1
     44c:	2900      	cmp	r1, #0
     44e:	db38      	blt.n	4c2 <gfx_mono_generic_draw_line+0xe2>
     450:	2700      	movs	r7, #0
			gfx_mono_draw_pixel(x, y, color);
     452:	1c20      	adds	r0, r4, #0
     454:	1c29      	adds	r1, r5, #0
     456:	4642      	mov	r2, r8
     458:	4b1d      	ldr	r3, [pc, #116]	; (4d0 <gfx_mono_generic_draw_line+0xf0>)
     45a:	4798      	blx	r3
			if (e >= 0) {
     45c:	b273      	sxtb	r3, r6
     45e:	2b00      	cmp	r3, #0
     460:	db04      	blt.n	46c <gfx_mono_generic_draw_line+0x8c>
				e -= dx;
     462:	9801      	ldr	r0, [sp, #4]
     464:	1a36      	subs	r6, r6, r0
     466:	b2f6      	uxtb	r6, r6
				y += yinc;
     468:	444d      	add	r5, r9
     46a:	b2ed      	uxtb	r5, r5
			}

			e += dy;
     46c:	445e      	add	r6, fp
     46e:	b2f6      	uxtb	r6, r6
			x += xinc;
     470:	9900      	ldr	r1, [sp, #0]
     472:	1864      	adds	r4, r4, r1
     474:	b2e4      	uxtb	r4, r4
		yinc = 1;
	}

	if (dx > dy) {
		e = dy - dx;
		for (i = 0; i <= dx; i++) {
     476:	3701      	adds	r7, #1
     478:	b2ff      	uxtb	r7, r7
     47a:	4557      	cmp	r7, sl
     47c:	dde9      	ble.n	452 <gfx_mono_generic_draw_line+0x72>
     47e:	e020      	b.n	4c2 <gfx_mono_generic_draw_line+0xe2>

			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
     480:	b2d2      	uxtb	r2, r2
     482:	4692      	mov	sl, r2
     484:	b2de      	uxtb	r6, r3
     486:	9601      	str	r6, [sp, #4]
     488:	1b96      	subs	r6, r2, r6
     48a:	b2f6      	uxtb	r6, r6
		for (i = 0; i <= dy; i++) {
     48c:	b25b      	sxtb	r3, r3
     48e:	469b      	mov	fp, r3
     490:	2b00      	cmp	r3, #0
     492:	db16      	blt.n	4c2 <gfx_mono_generic_draw_line+0xe2>
     494:	2700      	movs	r7, #0
			gfx_mono_draw_pixel(x, y, color);
     496:	1c20      	adds	r0, r4, #0
     498:	1c29      	adds	r1, r5, #0
     49a:	4642      	mov	r2, r8
     49c:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <gfx_mono_generic_draw_line+0xf0>)
     49e:	4798      	blx	r3
			if (e >= 0) {
     4a0:	b273      	sxtb	r3, r6
     4a2:	2b00      	cmp	r3, #0
     4a4:	db05      	blt.n	4b2 <gfx_mono_generic_draw_line+0xd2>
				e -= dy;
     4a6:	9801      	ldr	r0, [sp, #4]
     4a8:	1a36      	subs	r6, r6, r0
     4aa:	b2f6      	uxtb	r6, r6
				x += xinc;
     4ac:	9900      	ldr	r1, [sp, #0]
     4ae:	1864      	adds	r4, r4, r1
     4b0:	b2e4      	uxtb	r4, r4
			}

			e += dx;
     4b2:	4456      	add	r6, sl
     4b4:	b2f6      	uxtb	r6, r6
			y += yinc;
     4b6:	444d      	add	r5, r9
     4b8:	b2ed      	uxtb	r5, r5
			e += dy;
			x += xinc;
		}
	} else {
		e = dx - dy;
		for (i = 0; i <= dy; i++) {
     4ba:	3701      	adds	r7, #1
     4bc:	b2ff      	uxtb	r7, r7
     4be:	455f      	cmp	r7, fp
     4c0:	dde9      	ble.n	496 <gfx_mono_generic_draw_line+0xb6>

			e += dx;
			y += yinc;
		}
	}
}
     4c2:	b003      	add	sp, #12
     4c4:	bc3c      	pop	{r2, r3, r4, r5}
     4c6:	4690      	mov	r8, r2
     4c8:	4699      	mov	r9, r3
     4ca:	46a2      	mov	sl, r4
     4cc:	46ab      	mov	fp, r5
     4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4d0:	000006cd 	.word	0x000006cd

000004d4 <gfx_mono_generic_draw_rect>:
 * \param[in] color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d6:	4657      	mov	r7, sl
     4d8:	464e      	mov	r6, r9
     4da:	4645      	mov	r5, r8
     4dc:	b4e0      	push	{r5, r6, r7}
     4de:	1c06      	adds	r6, r0, #0
     4e0:	1c0d      	adds	r5, r1, #0
     4e2:	4690      	mov	r8, r2
     4e4:	469a      	mov	sl, r3
     4e6:	ab08      	add	r3, sp, #32
     4e8:	781c      	ldrb	r4, [r3, #0]
	gfx_mono_draw_horizontal_line(x, y, width, color);
     4ea:	1c23      	adds	r3, r4, #0
     4ec:	4f0e      	ldr	r7, [pc, #56]	; (528 <gfx_mono_generic_draw_rect+0x54>)
     4ee:	47b8      	blx	r7
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
     4f0:	4651      	mov	r1, sl
     4f2:	3901      	subs	r1, #1
     4f4:	1869      	adds	r1, r5, r1
     4f6:	b2c9      	uxtb	r1, r1
     4f8:	1c30      	adds	r0, r6, #0
     4fa:	4642      	mov	r2, r8
     4fc:	1c23      	adds	r3, r4, #0
     4fe:	47b8      	blx	r7

	gfx_mono_draw_vertical_line(x, y, height, color);
     500:	1c30      	adds	r0, r6, #0
     502:	1c29      	adds	r1, r5, #0
     504:	4652      	mov	r2, sl
     506:	1c23      	adds	r3, r4, #0
     508:	4f08      	ldr	r7, [pc, #32]	; (52c <gfx_mono_generic_draw_rect+0x58>)
     50a:	47b8      	blx	r7
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
     50c:	4640      	mov	r0, r8
     50e:	3801      	subs	r0, #1
     510:	1836      	adds	r6, r6, r0
     512:	b2f0      	uxtb	r0, r6
     514:	1c29      	adds	r1, r5, #0
     516:	4652      	mov	r2, sl
     518:	1c23      	adds	r3, r4, #0
     51a:	47b8      	blx	r7
}
     51c:	bc1c      	pop	{r2, r3, r4}
     51e:	4690      	mov	r8, r2
     520:	4699      	mov	r9, r3
     522:	46a2      	mov	sl, r4
     524:	bdf0      	pop	{r4, r5, r6, r7, pc}
     526:	46c0      	nop			; (mov r8, r8)
     528:	00000265 	.word	0x00000265
     52c:	00000341 	.word	0x00000341

00000530 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     532:	464f      	mov	r7, r9
     534:	4646      	mov	r6, r8
     536:	b4c0      	push	{r6, r7}
     538:	1c05      	adds	r5, r0, #0
     53a:	1c16      	adds	r6, r2, #0
     53c:	aa08      	add	r2, sp, #32
     53e:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
     540:	2b00      	cmp	r3, #0
     542:	d00f      	beq.n	564 <gfx_mono_generic_draw_filled_rect+0x34>
     544:	1c1c      	adds	r4, r3, #0
     546:	3901      	subs	r1, #1
     548:	4689      	mov	r9, r1
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     54a:	4b08      	ldr	r3, [pc, #32]	; (56c <gfx_mono_generic_draw_filled_rect+0x3c>)
     54c:	4698      	mov	r8, r3
     54e:	464b      	mov	r3, r9
     550:	18e1      	adds	r1, r4, r3
     552:	b2c9      	uxtb	r1, r1
     554:	1c28      	adds	r0, r5, #0
     556:	1c32      	adds	r2, r6, #0
     558:	1c3b      	adds	r3, r7, #0
     55a:	47c0      	blx	r8
     55c:	3c01      	subs	r4, #1
     55e:	b2e4      	uxtb	r4, r4
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     560:	2c00      	cmp	r4, #0
     562:	d1f4      	bne.n	54e <gfx_mono_generic_draw_filled_rect+0x1e>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     564:	bc0c      	pop	{r2, r3}
     566:	4690      	mov	r8, r2
     568:	4699      	mov	r9, r3
     56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     56c:	00000265 	.word	0x00000265

00000570 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     570:	b5f0      	push	{r4, r5, r6, r7, lr}
     572:	465f      	mov	r7, fp
     574:	4656      	mov	r6, sl
     576:	464d      	mov	r5, r9
     578:	4644      	mov	r4, r8
     57a:	b4f0      	push	{r4, r5, r6, r7}
     57c:	b085      	sub	sp, #20
     57e:	1c06      	adds	r6, r0, #0
     580:	4688      	mov	r8, r1
     582:	1c14      	adds	r4, r2, #0
     584:	9303      	str	r3, [sp, #12]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     586:	7a1a      	ldrb	r2, [r3, #8]
     588:	7a5b      	ldrb	r3, [r3, #9]
     58a:	2100      	movs	r1, #0
     58c:	9100      	str	r1, [sp, #0]
     58e:	4640      	mov	r0, r8
     590:	1c21      	adds	r1, r4, #0
     592:	4d23      	ldr	r5, [pc, #140]	; (620 <gfx_mono_draw_char+0xb0>)
     594:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
     596:	9903      	ldr	r1, [sp, #12]
     598:	780b      	ldrb	r3, [r1, #0]
     59a:	2b00      	cmp	r3, #0
     59c:	d139      	bne.n	612 <gfx_mono_draw_char+0xa2>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     59e:	7a0a      	ldrb	r2, [r1, #8]
     5a0:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     5a2:	0751      	lsls	r1, r2, #29
     5a4:	d000      	beq.n	5a8 <gfx_mono_draw_char+0x38>
		char_row_size++;
     5a6:	3301      	adds	r3, #1
	}

	glyph_data_offset = char_row_size * font->height *
     5a8:	9a03      	ldr	r2, [sp, #12]
     5aa:	7a52      	ldrb	r2, [r2, #9]
     5ac:	4693      	mov	fp, r2
			((uint8_t)ch - font->first_char);
     5ae:	9903      	ldr	r1, [sp, #12]
     5b0:	7a8a      	ldrb	r2, [r1, #10]
     5b2:	1ab6      	subs	r6, r6, r2
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     5b4:	465a      	mov	r2, fp
     5b6:	4356      	muls	r6, r2
     5b8:	435e      	muls	r6, r3
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     5ba:	b2b6      	uxth	r6, r6
     5bc:	684b      	ldr	r3, [r1, #4]
     5be:	199e      	adds	r6, r3, r6

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;
     5c0:	46a2      	mov	sl, r4
	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     5c2:	2107      	movs	r1, #7
     5c4:	4689      	mov	r9, r1
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     5c6:	9a03      	ldr	r2, [sp, #12]
     5c8:	7a17      	ldrb	r7, [r2, #8]

		for (i = 0; i < pixelsToDraw; i++) {
     5ca:	2f00      	cmp	r7, #0
     5cc:	d017      	beq.n	5fe <gfx_mono_draw_char+0x8e>
     5ce:	2400      	movs	r4, #0
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
     5d0:	2500      	movs	r5, #0
     5d2:	b2e3      	uxtb	r3, r4
     5d4:	4641      	mov	r1, r8
     5d6:	1858      	adds	r0, r3, r1
     5d8:	b2c0      	uxtb	r0, r0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     5da:	464a      	mov	r2, r9
     5dc:	421a      	tst	r2, r3
     5de:	d101      	bne.n	5e4 <gfx_mono_draw_char+0x74>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     5e0:	7835      	ldrb	r5, [r6, #0]
				glyph_data++;
     5e2:	3601      	adds	r6, #1
			}

			if ((glyph_byte & 0x80)) {
     5e4:	b26b      	sxtb	r3, r5
     5e6:	2b00      	cmp	r3, #0
     5e8:	da03      	bge.n	5f2 <gfx_mono_draw_char+0x82>
				gfx_mono_draw_pixel(inc_x, inc_y,
     5ea:	4651      	mov	r1, sl
     5ec:	2201      	movs	r2, #1
     5ee:	4b0d      	ldr	r3, [pc, #52]	; (624 <gfx_mono_draw_char+0xb4>)
     5f0:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     5f2:	006d      	lsls	r5, r5, #1
     5f4:	b2ed      	uxtb	r5, r5
     5f6:	3401      	adds	r4, #1

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     5f8:	b2e3      	uxtb	r3, r4
     5fa:	429f      	cmp	r7, r3
     5fc:	d8e9      	bhi.n	5d2 <gfx_mono_draw_char+0x62>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     5fe:	4653      	mov	r3, sl
     600:	3301      	adds	r3, #1
     602:	b2db      	uxtb	r3, r3
     604:	469a      	mov	sl, r3
		inc_x = x;
		rows_left--;
     606:	465b      	mov	r3, fp
     608:	3b01      	subs	r3, #1
     60a:	b2db      	uxtb	r3, r3
     60c:	469b      	mov	fp, r3
	} while (rows_left > 0);
     60e:	2b00      	cmp	r3, #0
     610:	d1d9      	bne.n	5c6 <gfx_mono_draw_char+0x56>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     612:	b005      	add	sp, #20
     614:	bc3c      	pop	{r2, r3, r4, r5}
     616:	4690      	mov	r8, r2
     618:	4699      	mov	r9, r3
     61a:	46a2      	mov	sl, r4
     61c:	46ab      	mov	fp, r5
     61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     620:	00000531 	.word	0x00000531
     624:	000006cd 	.word	0x000006cd

00000628 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     62a:	464f      	mov	r7, r9
     62c:	4646      	mov	r6, r8
     62e:	b4c0      	push	{r6, r7}
     630:	1c04      	adds	r4, r0, #0
     632:	4688      	mov	r8, r1
     634:	4691      	mov	r9, r2
     636:	1c1f      	adds	r7, r3, #0
     638:	1c0e      	adds	r6, r1, #0
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     63a:	7820      	ldrb	r0, [r4, #0]
     63c:	280a      	cmp	r0, #10
     63e:	d106      	bne.n	64e <gfx_mono_draw_string+0x26>
			x = start_of_string_position_x;
			y += font->height + 1;
     640:	7a7b      	ldrb	r3, [r7, #9]
     642:	3301      	adds	r3, #1
     644:	444b      	add	r3, r9
     646:	b2db      	uxtb	r3, r3
     648:	4699      	mov	r9, r3

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     64a:	4646      	mov	r6, r8
     64c:	e009      	b.n	662 <gfx_mono_draw_string+0x3a>
			y += font->height + 1;
		} else if (*str == '\r') {
     64e:	280d      	cmp	r0, #13
     650:	d007      	beq.n	662 <gfx_mono_draw_string+0x3a>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     652:	1c31      	adds	r1, r6, #0
     654:	464a      	mov	r2, r9
     656:	1c3b      	adds	r3, r7, #0
     658:	4d06      	ldr	r5, [pc, #24]	; (674 <gfx_mono_draw_string+0x4c>)
     65a:	47a8      	blx	r5
			x += font->width;
     65c:	7a3b      	ldrb	r3, [r7, #8]
     65e:	18f6      	adds	r6, r6, r3
     660:	b2f6      	uxtb	r6, r6
		}
	} while (*(++str));
     662:	3401      	adds	r4, #1
     664:	7820      	ldrb	r0, [r4, #0]
     666:	2800      	cmp	r0, #0
     668:	d1e7      	bne.n	63a <gfx_mono_draw_string+0x12>
}
     66a:	bc0c      	pop	{r2, r3}
     66c:	4690      	mov	r8, r2
     66e:	4699      	mov	r9, r3
     670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     672:	46c0      	nop			; (mov r8, r8)
     674:	00000571 	.word	0x00000571

00000678 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
     678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     67a:	1c05      	adds	r5, r0, #0
     67c:	1c0c      	adds	r4, r1, #0
     67e:	1c16      	adds	r6, r2, #0
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     680:	2b00      	cmp	r3, #0
     682:	d103      	bne.n	68c <gfx_mono_ssd1306_put_byte+0x14>
     684:	4b0d      	ldr	r3, [pc, #52]	; (6bc <gfx_mono_ssd1306_put_byte+0x44>)
     686:	4798      	blx	r3
     688:	42b0      	cmp	r0, r6
     68a:	d016      	beq.n	6ba <gfx_mono_ssd1306_put_byte+0x42>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     68c:	1c28      	adds	r0, r5, #0
     68e:	1c21      	adds	r1, r4, #0
     690:	1c32      	adds	r2, r6, #0
     692:	4b0b      	ldr	r3, [pc, #44]	; (6c0 <gfx_mono_ssd1306_put_byte+0x48>)
     694:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
     696:	270f      	movs	r7, #15
     698:	403d      	ands	r5, r7
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     69a:	23b0      	movs	r3, #176	; 0xb0
     69c:	1c28      	adds	r0, r5, #0
     69e:	4318      	orrs	r0, r3
     6a0:	4d08      	ldr	r5, [pc, #32]	; (6c4 <gfx_mono_ssd1306_put_byte+0x4c>)
     6a2:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
     6a4:	0660      	lsls	r0, r4, #25
     6a6:	0f40      	lsrs	r0, r0, #29
     6a8:	2310      	movs	r3, #16
     6aa:	4318      	orrs	r0, r3
     6ac:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
     6ae:	1c38      	adds	r0, r7, #0
     6b0:	4020      	ands	r0, r4
     6b2:	47a8      	blx	r5
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
     6b4:	1c30      	adds	r0, r6, #0
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <gfx_mono_ssd1306_put_byte+0x50>)
     6b8:	4798      	blx	r3
}
     6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6bc:	00000255 	.word	0x00000255
     6c0:	00000245 	.word	0x00000245
     6c4:	000001ad 	.word	0x000001ad
     6c8:	000001f9 	.word	0x000001f9

000006cc <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ce:	4647      	mov	r7, r8
     6d0:	b480      	push	{r7}
     6d2:	1c04      	adds	r4, r0, #0
     6d4:	1c15      	adds	r5, r2, #0
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     6d6:	b243      	sxtb	r3, r0
     6d8:	2b00      	cmp	r3, #0
     6da:	db23      	blt.n	724 <gfx_mono_ssd1306_draw_pixel+0x58>
     6dc:	293f      	cmp	r1, #63	; 0x3f
     6de:	d821      	bhi.n	724 <gfx_mono_ssd1306_draw_pixel+0x58>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     6e0:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
     6e2:	00f7      	lsls	r7, r6, #3
     6e4:	1bc9      	subs	r1, r1, r7
     6e6:	2701      	movs	r7, #1
     6e8:	408f      	lsls	r7, r1
     6ea:	b2fb      	uxtb	r3, r7
     6ec:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     6ee:	1c30      	adds	r0, r6, #0
     6f0:	1c21      	adds	r1, r4, #0
     6f2:	4b0e      	ldr	r3, [pc, #56]	; (72c <gfx_mono_ssd1306_draw_pixel+0x60>)
     6f4:	4798      	blx	r3
     6f6:	1c02      	adds	r2, r0, #0
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     6f8:	2d01      	cmp	r5, #1
     6fa:	d004      	beq.n	706 <gfx_mono_ssd1306_draw_pixel+0x3a>
     6fc:	2d00      	cmp	r5, #0
     6fe:	d006      	beq.n	70e <gfx_mono_ssd1306_draw_pixel+0x42>
     700:	2d02      	cmp	r5, #2
     702:	d007      	beq.n	714 <gfx_mono_ssd1306_draw_pixel+0x48>
     704:	e009      	b.n	71a <gfx_mono_ssd1306_draw_pixel+0x4e>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     706:	4643      	mov	r3, r8
     708:	4318      	orrs	r0, r3
     70a:	b2c2      	uxtb	r2, r0
		break;
     70c:	e005      	b.n	71a <gfx_mono_ssd1306_draw_pixel+0x4e>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     70e:	43b8      	bics	r0, r7
     710:	b2c2      	uxtb	r2, r0
		break;
     712:	e002      	b.n	71a <gfx_mono_ssd1306_draw_pixel+0x4e>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     714:	4643      	mov	r3, r8
     716:	4058      	eors	r0, r3
     718:	b2c2      	uxtb	r2, r0

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     71a:	1c30      	adds	r0, r6, #0
     71c:	1c21      	adds	r1, r4, #0
     71e:	2300      	movs	r3, #0
     720:	4c03      	ldr	r4, [pc, #12]	; (730 <gfx_mono_ssd1306_draw_pixel+0x64>)
     722:	47a0      	blx	r4
}
     724:	bc04      	pop	{r2}
     726:	4690      	mov	r8, r2
     728:	bdf0      	pop	{r4, r5, r6, r7, pc}
     72a:	46c0      	nop			; (mov r8, r8)
     72c:	00000255 	.word	0x00000255
     730:	00000679 	.word	0x00000679

00000734 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     734:	b508      	push	{r3, lr}
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     736:	4b01      	ldr	r3, [pc, #4]	; (73c <gfx_mono_ssd1306_get_byte+0x8>)
     738:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
     73a:	bd08      	pop	{r3, pc}
     73c:	00000255 	.word	0x00000255

00000740 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	4647      	mov	r7, r8
     744:	b480      	push	{r7}
     746:	1c06      	adds	r6, r0, #0
     748:	1c0d      	adds	r5, r1, #0
     74a:	4690      	mov	r8, r2
     74c:	1c1c      	adds	r4, r3, #0
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     74e:	4f0e      	ldr	r7, [pc, #56]	; (788 <gfx_mono_ssd1306_mask_byte+0x48>)
     750:	47b8      	blx	r7
     752:	1c02      	adds	r2, r0, #0
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
     754:	2c01      	cmp	r4, #1
     756:	d004      	beq.n	762 <gfx_mono_ssd1306_mask_byte+0x22>
     758:	2c00      	cmp	r4, #0
     75a:	d006      	beq.n	76a <gfx_mono_ssd1306_mask_byte+0x2a>
     75c:	2c02      	cmp	r4, #2
     75e:	d008      	beq.n	772 <gfx_mono_ssd1306_mask_byte+0x32>
     760:	e00a      	b.n	778 <gfx_mono_ssd1306_mask_byte+0x38>
	case GFX_PIXEL_SET:
		temp |= pixel_mask;
     762:	4643      	mov	r3, r8
     764:	4318      	orrs	r0, r3
     766:	b2c2      	uxtb	r2, r0
		break;
     768:	e006      	b.n	778 <gfx_mono_ssd1306_mask_byte+0x38>

	case GFX_PIXEL_CLR:
		temp &= ~pixel_mask;
     76a:	4643      	mov	r3, r8
     76c:	4398      	bics	r0, r3
     76e:	b2c2      	uxtb	r2, r0
		break;
     770:	e002      	b.n	778 <gfx_mono_ssd1306_mask_byte+0x38>

	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
     772:	4643      	mov	r3, r8
     774:	4058      	eors	r0, r3
     776:	b2c2      	uxtb	r2, r0

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
     778:	1c30      	adds	r0, r6, #0
     77a:	1c29      	adds	r1, r5, #0
     77c:	2300      	movs	r3, #0
     77e:	4c03      	ldr	r4, [pc, #12]	; (78c <gfx_mono_ssd1306_mask_byte+0x4c>)
     780:	47a0      	blx	r4
}
     782:	bc04      	pop	{r2}
     784:	4690      	mov	r8, r2
     786:	bdf0      	pop	{r4, r5, r6, r7, pc}
     788:	00000255 	.word	0x00000255
     78c:	00000679 	.word	0x00000679

00000790 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     790:	4b0c      	ldr	r3, [pc, #48]	; (7c4 <cpu_irq_enter_critical+0x34>)
     792:	681b      	ldr	r3, [r3, #0]
     794:	2b00      	cmp	r3, #0
     796:	d110      	bne.n	7ba <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     798:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     79c:	2b00      	cmp	r3, #0
     79e:	d109      	bne.n	7b4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     7a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     7a6:	2200      	movs	r2, #0
     7a8:	4b07      	ldr	r3, [pc, #28]	; (7c8 <cpu_irq_enter_critical+0x38>)
     7aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     7ac:	2201      	movs	r2, #1
     7ae:	4b07      	ldr	r3, [pc, #28]	; (7cc <cpu_irq_enter_critical+0x3c>)
     7b0:	701a      	strb	r2, [r3, #0]
     7b2:	e002      	b.n	7ba <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     7b4:	2200      	movs	r2, #0
     7b6:	4b05      	ldr	r3, [pc, #20]	; (7cc <cpu_irq_enter_critical+0x3c>)
     7b8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     7ba:	4b02      	ldr	r3, [pc, #8]	; (7c4 <cpu_irq_enter_critical+0x34>)
     7bc:	681a      	ldr	r2, [r3, #0]
     7be:	3201      	adds	r2, #1
     7c0:	601a      	str	r2, [r3, #0]
}
     7c2:	4770      	bx	lr
     7c4:	200000a0 	.word	0x200000a0
     7c8:	2000000c 	.word	0x2000000c
     7cc:	200000a4 	.word	0x200000a4

000007d0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <cpu_irq_leave_critical+0x24>)
     7d2:	681a      	ldr	r2, [r3, #0]
     7d4:	3a01      	subs	r2, #1
     7d6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     7d8:	681b      	ldr	r3, [r3, #0]
     7da:	2b00      	cmp	r3, #0
     7dc:	d109      	bne.n	7f2 <cpu_irq_leave_critical+0x22>
     7de:	4b06      	ldr	r3, [pc, #24]	; (7f8 <cpu_irq_leave_critical+0x28>)
     7e0:	781b      	ldrb	r3, [r3, #0]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d005      	beq.n	7f2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     7e6:	2201      	movs	r2, #1
     7e8:	4b04      	ldr	r3, [pc, #16]	; (7fc <cpu_irq_leave_critical+0x2c>)
     7ea:	701a      	strb	r2, [r3, #0]
     7ec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     7f0:	b662      	cpsie	i
	}
}
     7f2:	4770      	bx	lr
     7f4:	200000a0 	.word	0x200000a0
     7f8:	200000a4 	.word	0x200000a4
     7fc:	2000000c 	.word	0x2000000c

00000800 <system_board_init>:




void system_board_init(void)
{
     800:	b5f0      	push	{r4, r5, r6, r7, lr}
     802:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     804:	ac01      	add	r4, sp, #4
     806:	2501      	movs	r5, #1
     808:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     80a:	2700      	movs	r7, #0
     80c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     80e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     810:	2013      	movs	r0, #19
     812:	1c21      	adds	r1, r4, #0
     814:	4e06      	ldr	r6, [pc, #24]	; (830 <system_board_init+0x30>)
     816:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     818:	2280      	movs	r2, #128	; 0x80
     81a:	0312      	lsls	r2, r2, #12
     81c:	4b05      	ldr	r3, [pc, #20]	; (834 <system_board_init+0x34>)
     81e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     820:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     822:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     824:	201c      	movs	r0, #28
     826:	1c21      	adds	r1, r4, #0
     828:	47b0      	blx	r6
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     82a:	b003      	add	sp, #12
     82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     82e:	46c0      	nop			; (mov r8, r8)
     830:	00000839 	.word	0x00000839
     834:	41004400 	.word	0x41004400

00000838 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     838:	b500      	push	{lr}
     83a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     83c:	ab01      	add	r3, sp, #4
     83e:	2280      	movs	r2, #128	; 0x80
     840:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     842:	780a      	ldrb	r2, [r1, #0]
     844:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     846:	784a      	ldrb	r2, [r1, #1]
     848:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     84a:	788a      	ldrb	r2, [r1, #2]
     84c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     84e:	1c19      	adds	r1, r3, #0
     850:	4b01      	ldr	r3, [pc, #4]	; (858 <port_pin_set_config+0x20>)
     852:	4798      	blx	r3
}
     854:	b003      	add	sp, #12
     856:	bd00      	pop	{pc}
     858:	00001951 	.word	0x00001951

0000085c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     85c:	b510      	push	{r4, lr}
     85e:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     860:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     862:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     864:	4299      	cmp	r1, r3
     866:	d30c      	bcc.n	882 <_sercom_get_sync_baud_val+0x26>
     868:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     86a:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     86c:	1c60      	adds	r0, r4, #1
     86e:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     870:	428b      	cmp	r3, r1
     872:	d801      	bhi.n	878 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     874:	1c04      	adds	r4, r0, #0
     876:	e7f8      	b.n	86a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     878:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     87a:	2cff      	cmp	r4, #255	; 0xff
     87c:	d801      	bhi.n	882 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     87e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     880:	2000      	movs	r0, #0
	}
}
     882:	bd10      	pop	{r4, pc}
     884:	0000      	movs	r0, r0
	...

00000888 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     888:	b5f0      	push	{r4, r5, r6, r7, lr}
     88a:	465f      	mov	r7, fp
     88c:	4656      	mov	r6, sl
     88e:	464d      	mov	r5, r9
     890:	4644      	mov	r4, r8
     892:	b4f0      	push	{r4, r5, r6, r7}
     894:	b087      	sub	sp, #28
     896:	1c06      	adds	r6, r0, #0
     898:	1c0d      	adds	r5, r1, #0
     89a:	9204      	str	r2, [sp, #16]
     89c:	aa10      	add	r2, sp, #64	; 0x40
     89e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     8a0:	1c32      	adds	r2, r6, #0
     8a2:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8a4:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     8a6:	428a      	cmp	r2, r1
     8a8:	d900      	bls.n	8ac <_sercom_get_async_baud_val+0x24>
     8aa:	e0b3      	b.n	a14 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     8ac:	2b00      	cmp	r3, #0
     8ae:	d14b      	bne.n	948 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     8b0:	2100      	movs	r1, #0
     8b2:	1c32      	adds	r2, r6, #0
     8b4:	4c5e      	ldr	r4, [pc, #376]	; (a30 <_sercom_get_async_baud_val+0x1a8>)
     8b6:	47a0      	blx	r4
     8b8:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     8ba:	1c2e      	adds	r6, r5, #0
     8bc:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     8be:	2000      	movs	r0, #0
     8c0:	2100      	movs	r1, #0
     8c2:	2200      	movs	r2, #0
     8c4:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     8c6:	243f      	movs	r4, #63	; 0x3f
     8c8:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     8ca:	2501      	movs	r5, #1
     8cc:	46a8      	mov	r8, r5
     8ce:	9002      	str	r0, [sp, #8]
     8d0:	9103      	str	r1, [sp, #12]
     8d2:	4661      	mov	r1, ip
     8d4:	3920      	subs	r1, #32
     8d6:	d403      	bmi.n	8e0 <_sercom_get_async_baud_val+0x58>
     8d8:	4640      	mov	r0, r8
     8da:	4088      	lsls	r0, r1
     8dc:	4681      	mov	r9, r0
     8de:	e005      	b.n	8ec <_sercom_get_async_baud_val+0x64>
     8e0:	2120      	movs	r1, #32
     8e2:	4665      	mov	r5, ip
     8e4:	1b4c      	subs	r4, r1, r5
     8e6:	4640      	mov	r0, r8
     8e8:	40e0      	lsrs	r0, r4
     8ea:	4681      	mov	r9, r0
     8ec:	4641      	mov	r1, r8
     8ee:	4664      	mov	r4, ip
     8f0:	40a1      	lsls	r1, r4
     8f2:	468a      	mov	sl, r1

		r = r << 1;
     8f4:	1c10      	adds	r0, r2, #0
     8f6:	1c19      	adds	r1, r3, #0
     8f8:	1880      	adds	r0, r0, r2
     8fa:	4159      	adcs	r1, r3
     8fc:	1c02      	adds	r2, r0, #0
     8fe:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     900:	465d      	mov	r5, fp
     902:	464c      	mov	r4, r9
     904:	4225      	tst	r5, r4
     906:	d002      	beq.n	90e <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     908:	4642      	mov	r2, r8
     90a:	4302      	orrs	r2, r0
     90c:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     90e:	429f      	cmp	r7, r3
     910:	d80c      	bhi.n	92c <_sercom_get_async_baud_val+0xa4>
     912:	d101      	bne.n	918 <_sercom_get_async_baud_val+0x90>
     914:	4296      	cmp	r6, r2
     916:	d809      	bhi.n	92c <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     918:	1b92      	subs	r2, r2, r6
     91a:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     91c:	4650      	mov	r0, sl
     91e:	9d02      	ldr	r5, [sp, #8]
     920:	4328      	orrs	r0, r5
     922:	4649      	mov	r1, r9
     924:	9c03      	ldr	r4, [sp, #12]
     926:	4321      	orrs	r1, r4
     928:	9002      	str	r0, [sp, #8]
     92a:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     92c:	4665      	mov	r5, ip
     92e:	3d01      	subs	r5, #1
     930:	46ac      	mov	ip, r5
     932:	d2ce      	bcs.n	8d2 <_sercom_get_async_baud_val+0x4a>
     934:	9802      	ldr	r0, [sp, #8]
     936:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     938:	4b3c      	ldr	r3, [pc, #240]	; (a2c <_sercom_get_async_baud_val+0x1a4>)
     93a:	4a3b      	ldr	r2, [pc, #236]	; (a28 <_sercom_get_async_baud_val+0x1a0>)
     93c:	1a12      	subs	r2, r2, r0
     93e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     940:	0c12      	lsrs	r2, r2, #16
     942:	041b      	lsls	r3, r3, #16
     944:	431a      	orrs	r2, r3
     946:	e062      	b.n	a0e <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     948:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     94a:	2b01      	cmp	r3, #1
     94c:	d15f      	bne.n	a0e <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     94e:	0f4f      	lsrs	r7, r1, #29
     950:	46b9      	mov	r9, r7
     952:	00cd      	lsls	r5, r1, #3
     954:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     956:	2100      	movs	r1, #0
     958:	1c32      	adds	r2, r6, #0
     95a:	2300      	movs	r3, #0
     95c:	4c34      	ldr	r4, [pc, #208]	; (a30 <_sercom_get_async_baud_val+0x1a8>)
     95e:	47a0      	blx	r4
     960:	1c06      	adds	r6, r0, #0
     962:	1c0f      	adds	r7, r1, #0
     964:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     966:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     968:	9602      	str	r6, [sp, #8]
     96a:	9703      	str	r7, [sp, #12]
     96c:	469a      	mov	sl, r3
     96e:	4650      	mov	r0, sl
     970:	b2c0      	uxtb	r0, r0
     972:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     974:	2100      	movs	r1, #0
     976:	4688      	mov	r8, r1
     978:	2200      	movs	r2, #0
     97a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     97c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     97e:	1c27      	adds	r7, r4, #0
     980:	3f20      	subs	r7, #32
     982:	d403      	bmi.n	98c <_sercom_get_async_baud_val+0x104>
     984:	1c2e      	adds	r6, r5, #0
     986:	40be      	lsls	r6, r7
     988:	9601      	str	r6, [sp, #4]
     98a:	e004      	b.n	996 <_sercom_get_async_baud_val+0x10e>
     98c:	2020      	movs	r0, #32
     98e:	1b07      	subs	r7, r0, r4
     990:	1c29      	adds	r1, r5, #0
     992:	40f9      	lsrs	r1, r7
     994:	9101      	str	r1, [sp, #4]
     996:	1c2e      	adds	r6, r5, #0
     998:	40a6      	lsls	r6, r4
     99a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     99c:	1c10      	adds	r0, r2, #0
     99e:	1c19      	adds	r1, r3, #0
     9a0:	1880      	adds	r0, r0, r2
     9a2:	4159      	adcs	r1, r3
     9a4:	1c02      	adds	r2, r0, #0
     9a6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     9a8:	465f      	mov	r7, fp
     9aa:	4037      	ands	r7, r6
     9ac:	46bc      	mov	ip, r7
     9ae:	9e01      	ldr	r6, [sp, #4]
     9b0:	464f      	mov	r7, r9
     9b2:	403e      	ands	r6, r7
     9b4:	4667      	mov	r7, ip
     9b6:	433e      	orrs	r6, r7
     9b8:	d002      	beq.n	9c0 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     9ba:	1c2a      	adds	r2, r5, #0
     9bc:	4302      	orrs	r2, r0
     9be:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     9c0:	9803      	ldr	r0, [sp, #12]
     9c2:	4298      	cmp	r0, r3
     9c4:	d80b      	bhi.n	9de <_sercom_get_async_baud_val+0x156>
     9c6:	d102      	bne.n	9ce <_sercom_get_async_baud_val+0x146>
     9c8:	9902      	ldr	r1, [sp, #8]
     9ca:	4291      	cmp	r1, r2
     9cc:	d807      	bhi.n	9de <_sercom_get_async_baud_val+0x156>
			r = r - d;
     9ce:	9e02      	ldr	r6, [sp, #8]
     9d0:	9f03      	ldr	r7, [sp, #12]
     9d2:	1b92      	subs	r2, r2, r6
     9d4:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     9d6:	4647      	mov	r7, r8
     9d8:	9800      	ldr	r0, [sp, #0]
     9da:	4307      	orrs	r7, r0
     9dc:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     9de:	3c01      	subs	r4, #1
     9e0:	d2cd      	bcs.n	97e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     9e2:	4641      	mov	r1, r8
     9e4:	4652      	mov	r2, sl
     9e6:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     9e8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     9ea:	4c12      	ldr	r4, [pc, #72]	; (a34 <_sercom_get_async_baud_val+0x1ac>)
     9ec:	42a3      	cmp	r3, r4
     9ee:	d908      	bls.n	a02 <_sercom_get_async_baud_val+0x17a>
     9f0:	9a05      	ldr	r2, [sp, #20]
     9f2:	3201      	adds	r2, #1
     9f4:	b2d2      	uxtb	r2, r2
     9f6:	9205      	str	r2, [sp, #20]
     9f8:	2601      	movs	r6, #1
     9fa:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     9fc:	4657      	mov	r7, sl
     9fe:	2f08      	cmp	r7, #8
     a00:	d1b5      	bne.n	96e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a02:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     a04:	9805      	ldr	r0, [sp, #20]
     a06:	2808      	cmp	r0, #8
     a08:	d004      	beq.n	a14 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     a0a:	0342      	lsls	r2, r0, #13
     a0c:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     a0e:	9c04      	ldr	r4, [sp, #16]
     a10:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     a12:	2400      	movs	r4, #0
}
     a14:	1c20      	adds	r0, r4, #0
     a16:	b007      	add	sp, #28
     a18:	bc3c      	pop	{r2, r3, r4, r5}
     a1a:	4690      	mov	r8, r2
     a1c:	4699      	mov	r9, r3
     a1e:	46a2      	mov	sl, r4
     a20:	46ab      	mov	fp, r5
     a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a24:	46c0      	nop			; (mov r8, r8)
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	00000000 	.word	0x00000000
     a2c:	00000001 	.word	0x00000001
     a30:	00003cd5 	.word	0x00003cd5
     a34:	00001fff 	.word	0x00001fff

00000a38 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     a38:	b510      	push	{r4, lr}
     a3a:	b082      	sub	sp, #8
     a3c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     a3e:	4b0f      	ldr	r3, [pc, #60]	; (a7c <sercom_set_gclk_generator+0x44>)
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	2b00      	cmp	r3, #0
     a44:	d001      	beq.n	a4a <sercom_set_gclk_generator+0x12>
     a46:	2900      	cmp	r1, #0
     a48:	d00d      	beq.n	a66 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     a4a:	a901      	add	r1, sp, #4
     a4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a4e:	2013      	movs	r0, #19
     a50:	4b0b      	ldr	r3, [pc, #44]	; (a80 <sercom_set_gclk_generator+0x48>)
     a52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a54:	2013      	movs	r0, #19
     a56:	4b0b      	ldr	r3, [pc, #44]	; (a84 <sercom_set_gclk_generator+0x4c>)
     a58:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     a5a:	4b08      	ldr	r3, [pc, #32]	; (a7c <sercom_set_gclk_generator+0x44>)
     a5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     a5e:	2201      	movs	r2, #1
     a60:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     a62:	2000      	movs	r0, #0
     a64:	e007      	b.n	a76 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     a66:	4b05      	ldr	r3, [pc, #20]	; (a7c <sercom_set_gclk_generator+0x44>)
     a68:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     a6a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     a6c:	1b14      	subs	r4, r2, r4
     a6e:	1e62      	subs	r2, r4, #1
     a70:	4194      	sbcs	r4, r2
     a72:	4264      	negs	r4, r4
     a74:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     a76:	b002      	add	sp, #8
     a78:	bd10      	pop	{r4, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	200000a8 	.word	0x200000a8
     a80:	00001875 	.word	0x00001875
     a84:	000017e9 	.word	0x000017e9

00000a88 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     a88:	4b44      	ldr	r3, [pc, #272]	; (b9c <_sercom_get_default_pad+0x114>)
     a8a:	4298      	cmp	r0, r3
     a8c:	d033      	beq.n	af6 <_sercom_get_default_pad+0x6e>
     a8e:	d806      	bhi.n	a9e <_sercom_get_default_pad+0x16>
     a90:	4b43      	ldr	r3, [pc, #268]	; (ba0 <_sercom_get_default_pad+0x118>)
     a92:	4298      	cmp	r0, r3
     a94:	d00d      	beq.n	ab2 <_sercom_get_default_pad+0x2a>
     a96:	4b43      	ldr	r3, [pc, #268]	; (ba4 <_sercom_get_default_pad+0x11c>)
     a98:	4298      	cmp	r0, r3
     a9a:	d01b      	beq.n	ad4 <_sercom_get_default_pad+0x4c>
     a9c:	e06f      	b.n	b7e <_sercom_get_default_pad+0xf6>
     a9e:	4b42      	ldr	r3, [pc, #264]	; (ba8 <_sercom_get_default_pad+0x120>)
     aa0:	4298      	cmp	r0, r3
     aa2:	d04a      	beq.n	b3a <_sercom_get_default_pad+0xb2>
     aa4:	4b41      	ldr	r3, [pc, #260]	; (bac <_sercom_get_default_pad+0x124>)
     aa6:	4298      	cmp	r0, r3
     aa8:	d058      	beq.n	b5c <_sercom_get_default_pad+0xd4>
     aaa:	4b41      	ldr	r3, [pc, #260]	; (bb0 <_sercom_get_default_pad+0x128>)
     aac:	4298      	cmp	r0, r3
     aae:	d166      	bne.n	b7e <_sercom_get_default_pad+0xf6>
     ab0:	e032      	b.n	b18 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ab2:	2901      	cmp	r1, #1
     ab4:	d065      	beq.n	b82 <_sercom_get_default_pad+0xfa>
     ab6:	2900      	cmp	r1, #0
     ab8:	d004      	beq.n	ac4 <_sercom_get_default_pad+0x3c>
     aba:	2902      	cmp	r1, #2
     abc:	d006      	beq.n	acc <_sercom_get_default_pad+0x44>
     abe:	2903      	cmp	r1, #3
     ac0:	d006      	beq.n	ad0 <_sercom_get_default_pad+0x48>
     ac2:	e001      	b.n	ac8 <_sercom_get_default_pad+0x40>
     ac4:	483b      	ldr	r0, [pc, #236]	; (bb4 <_sercom_get_default_pad+0x12c>)
     ac6:	e067      	b.n	b98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ac8:	2000      	movs	r0, #0
     aca:	e065      	b.n	b98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     acc:	483a      	ldr	r0, [pc, #232]	; (bb8 <_sercom_get_default_pad+0x130>)
     ace:	e063      	b.n	b98 <_sercom_get_default_pad+0x110>
     ad0:	483a      	ldr	r0, [pc, #232]	; (bbc <_sercom_get_default_pad+0x134>)
     ad2:	e061      	b.n	b98 <_sercom_get_default_pad+0x110>
     ad4:	2901      	cmp	r1, #1
     ad6:	d056      	beq.n	b86 <_sercom_get_default_pad+0xfe>
     ad8:	2900      	cmp	r1, #0
     ada:	d004      	beq.n	ae6 <_sercom_get_default_pad+0x5e>
     adc:	2902      	cmp	r1, #2
     ade:	d006      	beq.n	aee <_sercom_get_default_pad+0x66>
     ae0:	2903      	cmp	r1, #3
     ae2:	d006      	beq.n	af2 <_sercom_get_default_pad+0x6a>
     ae4:	e001      	b.n	aea <_sercom_get_default_pad+0x62>
     ae6:	2003      	movs	r0, #3
     ae8:	e056      	b.n	b98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     aea:	2000      	movs	r0, #0
     aec:	e054      	b.n	b98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aee:	4834      	ldr	r0, [pc, #208]	; (bc0 <_sercom_get_default_pad+0x138>)
     af0:	e052      	b.n	b98 <_sercom_get_default_pad+0x110>
     af2:	4834      	ldr	r0, [pc, #208]	; (bc4 <_sercom_get_default_pad+0x13c>)
     af4:	e050      	b.n	b98 <_sercom_get_default_pad+0x110>
     af6:	2901      	cmp	r1, #1
     af8:	d047      	beq.n	b8a <_sercom_get_default_pad+0x102>
     afa:	2900      	cmp	r1, #0
     afc:	d004      	beq.n	b08 <_sercom_get_default_pad+0x80>
     afe:	2902      	cmp	r1, #2
     b00:	d006      	beq.n	b10 <_sercom_get_default_pad+0x88>
     b02:	2903      	cmp	r1, #3
     b04:	d006      	beq.n	b14 <_sercom_get_default_pad+0x8c>
     b06:	e001      	b.n	b0c <_sercom_get_default_pad+0x84>
     b08:	482f      	ldr	r0, [pc, #188]	; (bc8 <_sercom_get_default_pad+0x140>)
     b0a:	e045      	b.n	b98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b0c:	2000      	movs	r0, #0
     b0e:	e043      	b.n	b98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b10:	482e      	ldr	r0, [pc, #184]	; (bcc <_sercom_get_default_pad+0x144>)
     b12:	e041      	b.n	b98 <_sercom_get_default_pad+0x110>
     b14:	482e      	ldr	r0, [pc, #184]	; (bd0 <_sercom_get_default_pad+0x148>)
     b16:	e03f      	b.n	b98 <_sercom_get_default_pad+0x110>
     b18:	2901      	cmp	r1, #1
     b1a:	d038      	beq.n	b8e <_sercom_get_default_pad+0x106>
     b1c:	2900      	cmp	r1, #0
     b1e:	d004      	beq.n	b2a <_sercom_get_default_pad+0xa2>
     b20:	2902      	cmp	r1, #2
     b22:	d006      	beq.n	b32 <_sercom_get_default_pad+0xaa>
     b24:	2903      	cmp	r1, #3
     b26:	d006      	beq.n	b36 <_sercom_get_default_pad+0xae>
     b28:	e001      	b.n	b2e <_sercom_get_default_pad+0xa6>
     b2a:	482a      	ldr	r0, [pc, #168]	; (bd4 <_sercom_get_default_pad+0x14c>)
     b2c:	e034      	b.n	b98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b2e:	2000      	movs	r0, #0
     b30:	e032      	b.n	b98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b32:	4829      	ldr	r0, [pc, #164]	; (bd8 <_sercom_get_default_pad+0x150>)
     b34:	e030      	b.n	b98 <_sercom_get_default_pad+0x110>
     b36:	4829      	ldr	r0, [pc, #164]	; (bdc <_sercom_get_default_pad+0x154>)
     b38:	e02e      	b.n	b98 <_sercom_get_default_pad+0x110>
     b3a:	2901      	cmp	r1, #1
     b3c:	d029      	beq.n	b92 <_sercom_get_default_pad+0x10a>
     b3e:	2900      	cmp	r1, #0
     b40:	d004      	beq.n	b4c <_sercom_get_default_pad+0xc4>
     b42:	2902      	cmp	r1, #2
     b44:	d006      	beq.n	b54 <_sercom_get_default_pad+0xcc>
     b46:	2903      	cmp	r1, #3
     b48:	d006      	beq.n	b58 <_sercom_get_default_pad+0xd0>
     b4a:	e001      	b.n	b50 <_sercom_get_default_pad+0xc8>
     b4c:	4824      	ldr	r0, [pc, #144]	; (be0 <_sercom_get_default_pad+0x158>)
     b4e:	e023      	b.n	b98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b50:	2000      	movs	r0, #0
     b52:	e021      	b.n	b98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b54:	4823      	ldr	r0, [pc, #140]	; (be4 <_sercom_get_default_pad+0x15c>)
     b56:	e01f      	b.n	b98 <_sercom_get_default_pad+0x110>
     b58:	4823      	ldr	r0, [pc, #140]	; (be8 <_sercom_get_default_pad+0x160>)
     b5a:	e01d      	b.n	b98 <_sercom_get_default_pad+0x110>
     b5c:	2901      	cmp	r1, #1
     b5e:	d01a      	beq.n	b96 <_sercom_get_default_pad+0x10e>
     b60:	2900      	cmp	r1, #0
     b62:	d004      	beq.n	b6e <_sercom_get_default_pad+0xe6>
     b64:	2902      	cmp	r1, #2
     b66:	d006      	beq.n	b76 <_sercom_get_default_pad+0xee>
     b68:	2903      	cmp	r1, #3
     b6a:	d006      	beq.n	b7a <_sercom_get_default_pad+0xf2>
     b6c:	e001      	b.n	b72 <_sercom_get_default_pad+0xea>
     b6e:	481f      	ldr	r0, [pc, #124]	; (bec <_sercom_get_default_pad+0x164>)
     b70:	e012      	b.n	b98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b72:	2000      	movs	r0, #0
     b74:	e010      	b.n	b98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b76:	481e      	ldr	r0, [pc, #120]	; (bf0 <_sercom_get_default_pad+0x168>)
     b78:	e00e      	b.n	b98 <_sercom_get_default_pad+0x110>
     b7a:	481e      	ldr	r0, [pc, #120]	; (bf4 <_sercom_get_default_pad+0x16c>)
     b7c:	e00c      	b.n	b98 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     b7e:	2000      	movs	r0, #0
     b80:	e00a      	b.n	b98 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b82:	481d      	ldr	r0, [pc, #116]	; (bf8 <_sercom_get_default_pad+0x170>)
     b84:	e008      	b.n	b98 <_sercom_get_default_pad+0x110>
     b86:	481d      	ldr	r0, [pc, #116]	; (bfc <_sercom_get_default_pad+0x174>)
     b88:	e006      	b.n	b98 <_sercom_get_default_pad+0x110>
     b8a:	481d      	ldr	r0, [pc, #116]	; (c00 <_sercom_get_default_pad+0x178>)
     b8c:	e004      	b.n	b98 <_sercom_get_default_pad+0x110>
     b8e:	481d      	ldr	r0, [pc, #116]	; (c04 <_sercom_get_default_pad+0x17c>)
     b90:	e002      	b.n	b98 <_sercom_get_default_pad+0x110>
     b92:	481d      	ldr	r0, [pc, #116]	; (c08 <_sercom_get_default_pad+0x180>)
     b94:	e000      	b.n	b98 <_sercom_get_default_pad+0x110>
     b96:	481d      	ldr	r0, [pc, #116]	; (c0c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     b98:	4770      	bx	lr
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	42001000 	.word	0x42001000
     ba0:	42000800 	.word	0x42000800
     ba4:	42000c00 	.word	0x42000c00
     ba8:	42001800 	.word	0x42001800
     bac:	42001c00 	.word	0x42001c00
     bb0:	42001400 	.word	0x42001400
     bb4:	00040003 	.word	0x00040003
     bb8:	00060003 	.word	0x00060003
     bbc:	00070003 	.word	0x00070003
     bc0:	001e0003 	.word	0x001e0003
     bc4:	001f0003 	.word	0x001f0003
     bc8:	000c0002 	.word	0x000c0002
     bcc:	000e0002 	.word	0x000e0002
     bd0:	000f0002 	.word	0x000f0002
     bd4:	00100003 	.word	0x00100003
     bd8:	00120003 	.word	0x00120003
     bdc:	00130003 	.word	0x00130003
     be0:	00530005 	.word	0x00530005
     be4:	003e0005 	.word	0x003e0005
     be8:	00520005 	.word	0x00520005
     bec:	00160003 	.word	0x00160003
     bf0:	00180003 	.word	0x00180003
     bf4:	00190003 	.word	0x00190003
     bf8:	00050003 	.word	0x00050003
     bfc:	00010003 	.word	0x00010003
     c00:	000d0002 	.word	0x000d0002
     c04:	00110003 	.word	0x00110003
     c08:	003f0005 	.word	0x003f0005
     c0c:	00170003 	.word	0x00170003

00000c10 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c10:	b570      	push	{r4, r5, r6, lr}
     c12:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c14:	4a0c      	ldr	r2, [pc, #48]	; (c48 <_sercom_get_sercom_inst_index+0x38>)
     c16:	466b      	mov	r3, sp
     c18:	ca70      	ldmia	r2!, {r4, r5, r6}
     c1a:	c370      	stmia	r3!, {r4, r5, r6}
     c1c:	ca32      	ldmia	r2!, {r1, r4, r5}
     c1e:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c20:	9e00      	ldr	r6, [sp, #0]
     c22:	4286      	cmp	r6, r0
     c24:	d006      	beq.n	c34 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c26:	2301      	movs	r3, #1
     c28:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c2a:	4669      	mov	r1, sp
     c2c:	5852      	ldr	r2, [r2, r1]
     c2e:	4282      	cmp	r2, r0
     c30:	d103      	bne.n	c3a <_sercom_get_sercom_inst_index+0x2a>
     c32:	e000      	b.n	c36 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c34:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     c36:	b2d8      	uxtb	r0, r3
     c38:	e003      	b.n	c42 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c3a:	3301      	adds	r3, #1
     c3c:	2b06      	cmp	r3, #6
     c3e:	d1f3      	bne.n	c28 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     c40:	2000      	movs	r0, #0
}
     c42:	b006      	add	sp, #24
     c44:	bd70      	pop	{r4, r5, r6, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00004f20 	.word	0x00004f20

00000c4c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c4c:	4770      	bx	lr
     c4e:	46c0      	nop			; (mov r8, r8)

00000c50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c50:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     c52:	4b0a      	ldr	r3, [pc, #40]	; (c7c <_sercom_set_handler+0x2c>)
     c54:	781b      	ldrb	r3, [r3, #0]
     c56:	2b00      	cmp	r3, #0
     c58:	d10c      	bne.n	c74 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c5a:	4f09      	ldr	r7, [pc, #36]	; (c80 <_sercom_set_handler+0x30>)
     c5c:	4e09      	ldr	r6, [pc, #36]	; (c84 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c5e:	4d0a      	ldr	r5, [pc, #40]	; (c88 <_sercom_set_handler+0x38>)
     c60:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c62:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c64:	195a      	adds	r2, r3, r5
     c66:	6014      	str	r4, [r2, #0]
     c68:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c6a:	2b18      	cmp	r3, #24
     c6c:	d1f9      	bne.n	c62 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     c6e:	2201      	movs	r2, #1
     c70:	4b02      	ldr	r3, [pc, #8]	; (c7c <_sercom_set_handler+0x2c>)
     c72:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c74:	0080      	lsls	r0, r0, #2
     c76:	4b02      	ldr	r3, [pc, #8]	; (c80 <_sercom_set_handler+0x30>)
     c78:	50c1      	str	r1, [r0, r3]
}
     c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c7c:	200000ac 	.word	0x200000ac
     c80:	200000b0 	.word	0x200000b0
     c84:	00000c4d 	.word	0x00000c4d
     c88:	20003de4 	.word	0x20003de4

00000c8c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c8c:	b510      	push	{r4, lr}
     c8e:	b082      	sub	sp, #8
     c90:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c92:	4668      	mov	r0, sp
     c94:	4905      	ldr	r1, [pc, #20]	; (cac <_sercom_get_interrupt_vector+0x20>)
     c96:	2206      	movs	r2, #6
     c98:	4b05      	ldr	r3, [pc, #20]	; (cb0 <_sercom_get_interrupt_vector+0x24>)
     c9a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c9c:	1c20      	adds	r0, r4, #0
     c9e:	4b05      	ldr	r3, [pc, #20]	; (cb4 <_sercom_get_interrupt_vector+0x28>)
     ca0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ca2:	466b      	mov	r3, sp
     ca4:	5618      	ldrsb	r0, [r3, r0]
}
     ca6:	b002      	add	sp, #8
     ca8:	bd10      	pop	{r4, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	00004f38 	.word	0x00004f38
     cb0:	00003d65 	.word	0x00003d65
     cb4:	00000c11 	.word	0x00000c11

00000cb8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     cb8:	b508      	push	{r3, lr}
     cba:	4b02      	ldr	r3, [pc, #8]	; (cc4 <SERCOM0_Handler+0xc>)
     cbc:	681b      	ldr	r3, [r3, #0]
     cbe:	2000      	movs	r0, #0
     cc0:	4798      	blx	r3
     cc2:	bd08      	pop	{r3, pc}
     cc4:	200000b0 	.word	0x200000b0

00000cc8 <SERCOM1_Handler>:
     cc8:	b508      	push	{r3, lr}
     cca:	4b02      	ldr	r3, [pc, #8]	; (cd4 <SERCOM1_Handler+0xc>)
     ccc:	685b      	ldr	r3, [r3, #4]
     cce:	2001      	movs	r0, #1
     cd0:	4798      	blx	r3
     cd2:	bd08      	pop	{r3, pc}
     cd4:	200000b0 	.word	0x200000b0

00000cd8 <SERCOM2_Handler>:
     cd8:	b508      	push	{r3, lr}
     cda:	4b02      	ldr	r3, [pc, #8]	; (ce4 <SERCOM2_Handler+0xc>)
     cdc:	689b      	ldr	r3, [r3, #8]
     cde:	2002      	movs	r0, #2
     ce0:	4798      	blx	r3
     ce2:	bd08      	pop	{r3, pc}
     ce4:	200000b0 	.word	0x200000b0

00000ce8 <SERCOM3_Handler>:
     ce8:	b508      	push	{r3, lr}
     cea:	4b02      	ldr	r3, [pc, #8]	; (cf4 <SERCOM3_Handler+0xc>)
     cec:	68db      	ldr	r3, [r3, #12]
     cee:	2003      	movs	r0, #3
     cf0:	4798      	blx	r3
     cf2:	bd08      	pop	{r3, pc}
     cf4:	200000b0 	.word	0x200000b0

00000cf8 <SERCOM4_Handler>:
     cf8:	b508      	push	{r3, lr}
     cfa:	4b02      	ldr	r3, [pc, #8]	; (d04 <SERCOM4_Handler+0xc>)
     cfc:	691b      	ldr	r3, [r3, #16]
     cfe:	2004      	movs	r0, #4
     d00:	4798      	blx	r3
     d02:	bd08      	pop	{r3, pc}
     d04:	200000b0 	.word	0x200000b0

00000d08 <SERCOM5_Handler>:
     d08:	b508      	push	{r3, lr}
     d0a:	4b02      	ldr	r3, [pc, #8]	; (d14 <SERCOM5_Handler+0xc>)
     d0c:	695b      	ldr	r3, [r3, #20]
     d0e:	2005      	movs	r0, #5
     d10:	4798      	blx	r3
     d12:	bd08      	pop	{r3, pc}
     d14:	200000b0 	.word	0x200000b0

00000d18 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     d18:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d1a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     d1c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     d1e:	2c01      	cmp	r4, #1
     d20:	d16c      	bne.n	dfc <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     d22:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d24:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
     d26:	2c00      	cmp	r4, #0
     d28:	d168      	bne.n	dfc <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
     d2a:	2a00      	cmp	r2, #0
     d2c:	d057      	beq.n	dde <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     d2e:	784b      	ldrb	r3, [r1, #1]
     d30:	2b00      	cmp	r3, #0
     d32:	d044      	beq.n	dbe <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d34:	6802      	ldr	r2, [r0, #0]
     d36:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     d38:	07dc      	lsls	r4, r3, #31
     d3a:	d40f      	bmi.n	d5c <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     d3c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d3e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d40:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d42:	2900      	cmp	r1, #0
     d44:	d103      	bne.n	d4e <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
     d46:	095a      	lsrs	r2, r3, #5
     d48:	01d2      	lsls	r2, r2, #7
     d4a:	492d      	ldr	r1, [pc, #180]	; (e00 <spi_select_slave+0xe8>)
     d4c:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d4e:	211f      	movs	r1, #31
     d50:	400b      	ands	r3, r1
     d52:	2101      	movs	r1, #1
     d54:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d56:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
     d58:	2305      	movs	r3, #5
     d5a:	e04f      	b.n	dfc <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     d5c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d5e:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d60:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d62:	2c00      	cmp	r4, #0
     d64:	d103      	bne.n	d6e <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
     d66:	095a      	lsrs	r2, r3, #5
     d68:	01d2      	lsls	r2, r2, #7
     d6a:	4c25      	ldr	r4, [pc, #148]	; (e00 <spi_select_slave+0xe8>)
     d6c:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d6e:	241f      	movs	r4, #31
     d70:	4023      	ands	r3, r4
     d72:	2401      	movs	r4, #1
     d74:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     d76:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
     d78:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d7a:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d7c:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     d7e:	07d4      	lsls	r4, r2, #31
     d80:	d500      	bpl.n	d84 <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     d82:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
     d84:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d86:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
     d88:	2a00      	cmp	r2, #0
     d8a:	d137      	bne.n	dfc <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d8c:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     d8e:	2104      	movs	r1, #4
     d90:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     d92:	420b      	tst	r3, r1
     d94:	d0fc      	beq.n	d90 <spi_select_slave+0x78>
     d96:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     d98:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     d9a:	074c      	lsls	r4, r1, #29
     d9c:	d52e      	bpl.n	dfc <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     d9e:	8b53      	ldrh	r3, [r2, #26]
     da0:	0759      	lsls	r1, r3, #29
     da2:	d503      	bpl.n	dac <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     da4:	8b51      	ldrh	r1, [r2, #26]
     da6:	2304      	movs	r3, #4
     da8:	430b      	orrs	r3, r1
     daa:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     dac:	7983      	ldrb	r3, [r0, #6]
     dae:	2b01      	cmp	r3, #1
     db0:	d102      	bne.n	db8 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     db2:	6a93      	ldr	r3, [r2, #40]	; 0x28
     db4:	2300      	movs	r3, #0
     db6:	e021      	b.n	dfc <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     db8:	6a93      	ldr	r3, [r2, #40]	; 0x28
     dba:	2300      	movs	r3, #0
     dbc:	e01e      	b.n	dfc <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     dbe:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dc0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     dc2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     dc4:	2900      	cmp	r1, #0
     dc6:	d103      	bne.n	dd0 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
     dc8:	095a      	lsrs	r2, r3, #5
     dca:	01d2      	lsls	r2, r2, #7
     dcc:	4c0c      	ldr	r4, [pc, #48]	; (e00 <spi_select_slave+0xe8>)
     dce:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     dd0:	211f      	movs	r1, #31
     dd2:	400b      	ands	r3, r1
     dd4:	2101      	movs	r1, #1
     dd6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     dd8:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
     dda:	2300      	movs	r3, #0
     ddc:	e00e      	b.n	dfc <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     dde:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     de0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     de2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     de4:	2900      	cmp	r1, #0
     de6:	d103      	bne.n	df0 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
     de8:	095a      	lsrs	r2, r3, #5
     dea:	01d2      	lsls	r2, r2, #7
     dec:	4904      	ldr	r1, [pc, #16]	; (e00 <spi_select_slave+0xe8>)
     dee:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     df0:	211f      	movs	r1, #31
     df2:	400b      	ands	r3, r1
     df4:	2101      	movs	r1, #1
     df6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     df8:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
     dfa:	2300      	movs	r3, #0
}
     dfc:	1c18      	adds	r0, r3, #0
     dfe:	bd10      	pop	{r4, pc}
     e00:	41004400 	.word	0x41004400

00000e04 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     e04:	b5f0      	push	{r4, r5, r6, r7, lr}
     e06:	465f      	mov	r7, fp
     e08:	4656      	mov	r6, sl
     e0a:	464d      	mov	r5, r9
     e0c:	4644      	mov	r4, r8
     e0e:	b4f0      	push	{r4, r5, r6, r7}
     e10:	1c06      	adds	r6, r0, #0
     e12:	468b      	mov	fp, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e14:	2338      	movs	r3, #56	; 0x38
     e16:	5cc0      	ldrb	r0, [r0, r3]
     e18:	b2c0      	uxtb	r0, r0
     e1a:	2805      	cmp	r0, #5
     e1c:	d052      	beq.n	ec4 <spi_write_buffer_wait+0xc0>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e1e:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     e20:	2a00      	cmp	r2, #0
     e22:	d04f      	beq.n	ec4 <spi_write_buffer_wait+0xc0>
     e24:	e044      	b.n	eb0 <spi_write_buffer_wait+0xac>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e26:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e28:	7e13      	ldrb	r3, [r2, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     e2a:	4223      	tst	r3, r4
     e2c:	d0fc      	beq.n	e28 <spi_write_buffer_wait+0x24>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     e2e:	1c43      	adds	r3, r0, #1
     e30:	b29b      	uxth	r3, r3
     e32:	469a      	mov	sl, r3
     e34:	4659      	mov	r1, fp
     e36:	5c09      	ldrb	r1, [r1, r0]
     e38:	4689      	mov	r9, r1

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e3a:	79b3      	ldrb	r3, [r6, #6]
     e3c:	2b01      	cmp	r3, #1
     e3e:	d001      	beq.n	e44 <spi_write_buffer_wait+0x40>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     e40:	4650      	mov	r0, sl
     e42:	e007      	b.n	e54 <spi_write_buffer_wait+0x50>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     e44:	3002      	adds	r0, #2
     e46:	b280      	uxth	r0, r0
     e48:	465b      	mov	r3, fp
     e4a:	4453      	add	r3, sl
     e4c:	781b      	ldrb	r3, [r3, #0]
     e4e:	021b      	lsls	r3, r3, #8
     e50:	4319      	orrs	r1, r3
     e52:	4689      	mov	r9, r1
     e54:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     e56:	4223      	tst	r3, r4
     e58:	d003      	beq.n	e62 <spi_write_buffer_wait+0x5e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     e5a:	464b      	mov	r3, r9
     e5c:	05db      	lsls	r3, r3, #23
     e5e:	0ddb      	lsrs	r3, r3, #23
     e60:	6293      	str	r3, [r2, #40]	; 0x28
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     e62:	79f3      	ldrb	r3, [r6, #7]
     e64:	2b00      	cmp	r3, #0
     e66:	d014      	beq.n	e92 <spi_write_buffer_wait+0x8e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e68:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e6a:	7e13      	ldrb	r3, [r2, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     e6c:	422b      	tst	r3, r5
     e6e:	d0fc      	beq.n	e6a <spi_write_buffer_wait+0x66>
     e70:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     e72:	422b      	tst	r3, r5
     e74:	d00d      	beq.n	e92 <spi_write_buffer_wait+0x8e>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     e76:	8b53      	ldrh	r3, [r2, #26]
     e78:	422b      	tst	r3, r5
     e7a:	d004      	beq.n	e86 <spi_write_buffer_wait+0x82>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     e7c:	8b51      	ldrh	r1, [r2, #26]
     e7e:	4643      	mov	r3, r8
     e80:	4319      	orrs	r1, r3
     e82:	b28b      	uxth	r3, r1
     e84:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     e86:	79b3      	ldrb	r3, [r6, #6]
     e88:	2b01      	cmp	r3, #1
     e8a:	d101      	bne.n	e90 <spi_write_buffer_wait+0x8c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     e8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
     e8e:	e000      	b.n	e92 <spi_write_buffer_wait+0x8e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     e90:	6a93      	ldr	r3, [r2, #40]	; 0x28

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     e92:	3f01      	subs	r7, #1
     e94:	b2bf      	uxth	r7, r7
     e96:	4567      	cmp	r7, ip
     e98:	d1c5      	bne.n	e26 <spi_write_buffer_wait+0x22>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     e9a:	7973      	ldrb	r3, [r6, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     e9c:	2000      	movs	r0, #0
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     e9e:	2b01      	cmp	r3, #1
     ea0:	d110      	bne.n	ec4 <spi_write_buffer_wait+0xc0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ea2:	6831      	ldr	r1, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     ea4:	2202      	movs	r2, #2
     ea6:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     ea8:	4213      	tst	r3, r2
     eaa:	d0fc      	beq.n	ea6 <spi_write_buffer_wait+0xa2>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     eac:	2000      	movs	r0, #0
     eae:	e009      	b.n	ec4 <spi_write_buffer_wait+0xc0>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     eb0:	3a01      	subs	r2, #1
     eb2:	b297      	uxth	r7, r2
     eb4:	2000      	movs	r0, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     eb6:	2401      	movs	r4, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     eb8:	2504      	movs	r5, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     eba:	2104      	movs	r1, #4
     ebc:	4688      	mov	r8, r1
     ebe:	4b04      	ldr	r3, [pc, #16]	; (ed0 <spi_write_buffer_wait+0xcc>)
     ec0:	469c      	mov	ip, r3
     ec2:	e7b0      	b.n	e26 <spi_write_buffer_wait+0x22>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     ec4:	bc3c      	pop	{r2, r3, r4, r5}
     ec6:	4690      	mov	r8, r2
     ec8:	4699      	mov	r9, r3
     eca:	46a2      	mov	sl, r4
     ecc:	46ab      	mov	fp, r5
     ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ed0:	0000ffff 	.word	0x0000ffff

00000ed4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed6:	465f      	mov	r7, fp
     ed8:	4656      	mov	r6, sl
     eda:	464d      	mov	r5, r9
     edc:	4644      	mov	r4, r8
     ede:	b4f0      	push	{r4, r5, r6, r7}
     ee0:	b091      	sub	sp, #68	; 0x44
     ee2:	1c05      	adds	r5, r0, #0
     ee4:	1c0c      	adds	r4, r1, #0
     ee6:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     ee8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     eea:	1c08      	adds	r0, r1, #0
     eec:	4bad      	ldr	r3, [pc, #692]	; (11a4 <usart_init+0x2d0>)
     eee:	4798      	blx	r3
     ef0:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ef2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ef4:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ef6:	07d9      	lsls	r1, r3, #31
     ef8:	d500      	bpl.n	efc <usart_init+0x28>
     efa:	e14b      	b.n	1194 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     efc:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     efe:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     f00:	079f      	lsls	r7, r3, #30
     f02:	d500      	bpl.n	f06 <usart_init+0x32>
     f04:	e146      	b.n	1194 <usart_init+0x2c0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     f06:	4ba8      	ldr	r3, [pc, #672]	; (11a8 <usart_init+0x2d4>)
     f08:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f0a:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f0c:	2701      	movs	r7, #1
     f0e:	408f      	lsls	r7, r1
     f10:	1c39      	adds	r1, r7, #0
     f12:	4301      	orrs	r1, r0
     f14:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     f16:	a90f      	add	r1, sp, #60	; 0x3c
     f18:	272d      	movs	r7, #45	; 0x2d
     f1a:	5df3      	ldrb	r3, [r6, r7]
     f1c:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f1e:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f20:	b2d2      	uxtb	r2, r2
     f22:	4690      	mov	r8, r2
     f24:	1c10      	adds	r0, r2, #0
     f26:	4ba1      	ldr	r3, [pc, #644]	; (11ac <usart_init+0x2d8>)
     f28:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f2a:	4640      	mov	r0, r8
     f2c:	4ba0      	ldr	r3, [pc, #640]	; (11b0 <usart_init+0x2dc>)
     f2e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f30:	5df0      	ldrb	r0, [r6, r7]
     f32:	2100      	movs	r1, #0
     f34:	4b9f      	ldr	r3, [pc, #636]	; (11b4 <usart_init+0x2e0>)
     f36:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     f38:	7af3      	ldrb	r3, [r6, #11]
     f3a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     f3c:	2324      	movs	r3, #36	; 0x24
     f3e:	5cf3      	ldrb	r3, [r6, r3]
     f40:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f42:	2325      	movs	r3, #37	; 0x25
     f44:	5cf3      	ldrb	r3, [r6, r3]
     f46:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     f48:	7ef3      	ldrb	r3, [r6, #27]
     f4a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f4c:	7f33      	ldrb	r3, [r6, #28]
     f4e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f50:	6829      	ldr	r1, [r5, #0]
     f52:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f54:	1c08      	adds	r0, r1, #0
     f56:	4b93      	ldr	r3, [pc, #588]	; (11a4 <usart_init+0x2d0>)
     f58:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f5a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     f5c:	2200      	movs	r2, #0
     f5e:	466b      	mov	r3, sp
     f60:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     f62:	8a32      	ldrh	r2, [r6, #16]
     f64:	9202      	str	r2, [sp, #8]
     f66:	2380      	movs	r3, #128	; 0x80
     f68:	01db      	lsls	r3, r3, #7
     f6a:	429a      	cmp	r2, r3
     f6c:	d021      	beq.n	fb2 <usart_init+0xde>
     f6e:	2380      	movs	r3, #128	; 0x80
     f70:	01db      	lsls	r3, r3, #7
     f72:	429a      	cmp	r2, r3
     f74:	d804      	bhi.n	f80 <usart_init+0xac>
     f76:	2380      	movs	r3, #128	; 0x80
     f78:	019b      	lsls	r3, r3, #6
     f7a:	429a      	cmp	r2, r3
     f7c:	d011      	beq.n	fa2 <usart_init+0xce>
     f7e:	e008      	b.n	f92 <usart_init+0xbe>
     f80:	23c0      	movs	r3, #192	; 0xc0
     f82:	01db      	lsls	r3, r3, #7
     f84:	9f02      	ldr	r7, [sp, #8]
     f86:	429f      	cmp	r7, r3
     f88:	d00f      	beq.n	faa <usart_init+0xd6>
     f8a:	2380      	movs	r3, #128	; 0x80
     f8c:	021b      	lsls	r3, r3, #8
     f8e:	429f      	cmp	r7, r3
     f90:	d003      	beq.n	f9a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f92:	2710      	movs	r7, #16
     f94:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f96:	2700      	movs	r7, #0
     f98:	e00e      	b.n	fb8 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f9a:	2703      	movs	r7, #3
     f9c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f9e:	2700      	movs	r7, #0
     fa0:	e00a      	b.n	fb8 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fa2:	2710      	movs	r7, #16
     fa4:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fa6:	2701      	movs	r7, #1
     fa8:	e006      	b.n	fb8 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     faa:	2708      	movs	r7, #8
     fac:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fae:	2701      	movs	r7, #1
     fb0:	e002      	b.n	fb8 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fb2:	2708      	movs	r7, #8
     fb4:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fb6:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     fb8:	6831      	ldr	r1, [r6, #0]
     fba:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     fbc:	68f2      	ldr	r2, [r6, #12]
     fbe:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     fc0:	6973      	ldr	r3, [r6, #20]
     fc2:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fc4:	7e31      	ldrb	r1, [r6, #24]
     fc6:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fc8:	2326      	movs	r3, #38	; 0x26
     fca:	5cf3      	ldrb	r3, [r6, r3]
     fcc:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     fce:	6873      	ldr	r3, [r6, #4]
     fd0:	2b00      	cmp	r3, #0
     fd2:	d013      	beq.n	ffc <usart_init+0x128>
     fd4:	2280      	movs	r2, #128	; 0x80
     fd6:	0552      	lsls	r2, r2, #21
     fd8:	4293      	cmp	r3, r2
     fda:	d12e      	bne.n	103a <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     fdc:	2327      	movs	r3, #39	; 0x27
     fde:	5cf3      	ldrb	r3, [r6, r3]
     fe0:	2b00      	cmp	r3, #0
     fe2:	d12e      	bne.n	1042 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     fe4:	6a37      	ldr	r7, [r6, #32]
     fe6:	b2c0      	uxtb	r0, r0
     fe8:	4b73      	ldr	r3, [pc, #460]	; (11b8 <usart_init+0x2e4>)
     fea:	4798      	blx	r3
     fec:	1c01      	adds	r1, r0, #0
     fee:	1c38      	adds	r0, r7, #0
     ff0:	466a      	mov	r2, sp
     ff2:	3226      	adds	r2, #38	; 0x26
     ff4:	4b71      	ldr	r3, [pc, #452]	; (11bc <usart_init+0x2e8>)
     ff6:	4798      	blx	r3
     ff8:	1c03      	adds	r3, r0, #0
     ffa:	e01f      	b.n	103c <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     ffc:	2327      	movs	r3, #39	; 0x27
     ffe:	5cf3      	ldrb	r3, [r6, r3]
    1000:	2b00      	cmp	r3, #0
    1002:	d00a      	beq.n	101a <usart_init+0x146>
				status_code =
    1004:	9a06      	ldr	r2, [sp, #24]
    1006:	9200      	str	r2, [sp, #0]
    1008:	6a30      	ldr	r0, [r6, #32]
    100a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    100c:	466a      	mov	r2, sp
    100e:	3226      	adds	r2, #38	; 0x26
    1010:	1c3b      	adds	r3, r7, #0
    1012:	4f6b      	ldr	r7, [pc, #428]	; (11c0 <usart_init+0x2ec>)
    1014:	47b8      	blx	r7
    1016:	1c03      	adds	r3, r0, #0
    1018:	e010      	b.n	103c <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    101a:	6a31      	ldr	r1, [r6, #32]
    101c:	9107      	str	r1, [sp, #28]
    101e:	b2c0      	uxtb	r0, r0
    1020:	4b65      	ldr	r3, [pc, #404]	; (11b8 <usart_init+0x2e4>)
    1022:	4798      	blx	r3
    1024:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1026:	9a06      	ldr	r2, [sp, #24]
    1028:	9200      	str	r2, [sp, #0]
    102a:	9807      	ldr	r0, [sp, #28]
    102c:	466a      	mov	r2, sp
    102e:	3226      	adds	r2, #38	; 0x26
    1030:	1c3b      	adds	r3, r7, #0
    1032:	4f63      	ldr	r7, [pc, #396]	; (11c0 <usart_init+0x2ec>)
    1034:	47b8      	blx	r7
    1036:	1c03      	adds	r3, r0, #0
    1038:	e000      	b.n	103c <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    103a:	2300      	movs	r3, #0
    103c:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    103e:	d000      	beq.n	1042 <usart_init+0x16e>
    1040:	e0a8      	b.n	1194 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1042:	7e73      	ldrb	r3, [r6, #25]
    1044:	2b00      	cmp	r3, #0
    1046:	d002      	beq.n	104e <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1048:	7eb3      	ldrb	r3, [r6, #26]
    104a:	4641      	mov	r1, r8
    104c:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    104e:	682a      	ldr	r2, [r5, #0]
    1050:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1052:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1054:	2b00      	cmp	r3, #0
    1056:	d1fc      	bne.n	1052 <usart_init+0x17e>
    1058:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    105a:	466b      	mov	r3, sp
    105c:	3326      	adds	r3, #38	; 0x26
    105e:	881b      	ldrh	r3, [r3, #0]
    1060:	4642      	mov	r2, r8
    1062:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1064:	464b      	mov	r3, r9
    1066:	9f03      	ldr	r7, [sp, #12]
    1068:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    106a:	9f04      	ldr	r7, [sp, #16]
    106c:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    106e:	6871      	ldr	r1, [r6, #4]
    1070:	430b      	orrs	r3, r1
		config->sample_rate |
    1072:	9f02      	ldr	r7, [sp, #8]
    1074:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1076:	4652      	mov	r2, sl
    1078:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    107a:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    107c:	4659      	mov	r1, fp
    107e:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1080:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1082:	2327      	movs	r3, #39	; 0x27
    1084:	5cf3      	ldrb	r3, [r6, r3]
    1086:	2b00      	cmp	r3, #0
    1088:	d101      	bne.n	108e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    108a:	2304      	movs	r3, #4
    108c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    108e:	7e71      	ldrb	r1, [r6, #25]
    1090:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1092:	7f33      	ldrb	r3, [r6, #28]
    1094:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1096:	4319      	orrs	r1, r3
    1098:	7af2      	ldrb	r2, [r6, #11]
    109a:	7ab3      	ldrb	r3, [r6, #10]
    109c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    109e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    10a0:	7f73      	ldrb	r3, [r6, #29]
    10a2:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    10a4:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    10a6:	2324      	movs	r3, #36	; 0x24
    10a8:	5cf3      	ldrb	r3, [r6, r3]
    10aa:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    10ac:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    10ae:	2325      	movs	r3, #37	; 0x25
    10b0:	5cf3      	ldrb	r3, [r6, r3]
    10b2:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    10b4:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    10b6:	8933      	ldrh	r3, [r6, #8]
    10b8:	2bff      	cmp	r3, #255	; 0xff
    10ba:	d00b      	beq.n	10d4 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    10bc:	7ef2      	ldrb	r2, [r6, #27]
    10be:	2a00      	cmp	r2, #0
    10c0:	d003      	beq.n	10ca <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    10c2:	22a0      	movs	r2, #160	; 0xa0
    10c4:	04d2      	lsls	r2, r2, #19
    10c6:	4317      	orrs	r7, r2
    10c8:	e002      	b.n	10d0 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    10ca:	2280      	movs	r2, #128	; 0x80
    10cc:	0452      	lsls	r2, r2, #17
    10ce:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    10d0:	4319      	orrs	r1, r3
    10d2:	e005      	b.n	10e0 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    10d4:	7ef3      	ldrb	r3, [r6, #27]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d002      	beq.n	10e0 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    10da:	2380      	movs	r3, #128	; 0x80
    10dc:	04db      	lsls	r3, r3, #19
    10de:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    10e0:	232c      	movs	r3, #44	; 0x2c
    10e2:	5cf3      	ldrb	r3, [r6, r3]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d103      	bne.n	10f0 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    10e8:	4b36      	ldr	r3, [pc, #216]	; (11c4 <usart_init+0x2f0>)
    10ea:	789b      	ldrb	r3, [r3, #2]
    10ec:	079a      	lsls	r2, r3, #30
    10ee:	d501      	bpl.n	10f4 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    10f0:	2380      	movs	r3, #128	; 0x80
    10f2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    10f4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10f6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    10f8:	2b00      	cmp	r3, #0
    10fa:	d1fc      	bne.n	10f6 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    10fc:	4643      	mov	r3, r8
    10fe:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1100:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1102:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1104:	2b00      	cmp	r3, #0
    1106:	d1fc      	bne.n	1102 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    1108:	4641      	mov	r1, r8
    110a:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    110c:	ab0e      	add	r3, sp, #56	; 0x38
    110e:	2280      	movs	r2, #128	; 0x80
    1110:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1112:	2200      	movs	r2, #0
    1114:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1116:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1118:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    111a:	6b32      	ldr	r2, [r6, #48]	; 0x30
    111c:	920a      	str	r2, [sp, #40]	; 0x28
    111e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1120:	930b      	str	r3, [sp, #44]	; 0x2c
    1122:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    1124:	970c      	str	r7, [sp, #48]	; 0x30
    1126:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    1128:	960d      	str	r6, [sp, #52]	; 0x34
    112a:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    112c:	ae0e      	add	r6, sp, #56	; 0x38
    112e:	b2f9      	uxtb	r1, r7
    1130:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1132:	aa0a      	add	r2, sp, #40	; 0x28
    1134:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1136:	2800      	cmp	r0, #0
    1138:	d102      	bne.n	1140 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    113a:	1c20      	adds	r0, r4, #0
    113c:	4a22      	ldr	r2, [pc, #136]	; (11c8 <usart_init+0x2f4>)
    113e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1140:	1c43      	adds	r3, r0, #1
    1142:	d005      	beq.n	1150 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1144:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1146:	0c00      	lsrs	r0, r0, #16
    1148:	b2c0      	uxtb	r0, r0
    114a:	1c31      	adds	r1, r6, #0
    114c:	4a1f      	ldr	r2, [pc, #124]	; (11cc <usart_init+0x2f8>)
    114e:	4790      	blx	r2
    1150:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1152:	2f04      	cmp	r7, #4
    1154:	d1eb      	bne.n	112e <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1156:	2300      	movs	r3, #0
    1158:	60eb      	str	r3, [r5, #12]
    115a:	612b      	str	r3, [r5, #16]
    115c:	616b      	str	r3, [r5, #20]
    115e:	61ab      	str	r3, [r5, #24]
    1160:	61eb      	str	r3, [r5, #28]
    1162:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1164:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1166:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1168:	2200      	movs	r2, #0
    116a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    116c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    116e:	2330      	movs	r3, #48	; 0x30
    1170:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1172:	2331      	movs	r3, #49	; 0x31
    1174:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1176:	2332      	movs	r3, #50	; 0x32
    1178:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    117a:	2333      	movs	r3, #51	; 0x33
    117c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    117e:	6828      	ldr	r0, [r5, #0]
    1180:	4b08      	ldr	r3, [pc, #32]	; (11a4 <usart_init+0x2d0>)
    1182:	4798      	blx	r3
    1184:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1186:	4912      	ldr	r1, [pc, #72]	; (11d0 <usart_init+0x2fc>)
    1188:	4b12      	ldr	r3, [pc, #72]	; (11d4 <usart_init+0x300>)
    118a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    118c:	00a4      	lsls	r4, r4, #2
    118e:	4b12      	ldr	r3, [pc, #72]	; (11d8 <usart_init+0x304>)
    1190:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1192:	2000      	movs	r0, #0
}
    1194:	b011      	add	sp, #68	; 0x44
    1196:	bc3c      	pop	{r2, r3, r4, r5}
    1198:	4690      	mov	r8, r2
    119a:	4699      	mov	r9, r3
    119c:	46a2      	mov	sl, r4
    119e:	46ab      	mov	fp, r5
    11a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	00000c11 	.word	0x00000c11
    11a8:	40000400 	.word	0x40000400
    11ac:	00001875 	.word	0x00001875
    11b0:	000017e9 	.word	0x000017e9
    11b4:	00000a39 	.word	0x00000a39
    11b8:	00001891 	.word	0x00001891
    11bc:	0000085d 	.word	0x0000085d
    11c0:	00000889 	.word	0x00000889
    11c4:	41002000 	.word	0x41002000
    11c8:	00000a89 	.word	0x00000a89
    11cc:	00001951 	.word	0x00001951
    11d0:	00001281 	.word	0x00001281
    11d4:	00000c51 	.word	0x00000c51
    11d8:	20003de4 	.word	0x20003de4

000011dc <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    11dc:	b510      	push	{r4, lr}
    11de:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    11e0:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11e2:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    11e4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11e6:	2c00      	cmp	r4, #0
    11e8:	d00d      	beq.n	1206 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    11ea:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    11ec:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11ee:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    11f0:	2a00      	cmp	r2, #0
    11f2:	d108      	bne.n	1206 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11f4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    11f6:	2a00      	cmp	r2, #0
    11f8:	d1fc      	bne.n	11f4 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    11fa:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    11fc:	2102      	movs	r1, #2
    11fe:	7e1a      	ldrb	r2, [r3, #24]
    1200:	420a      	tst	r2, r1
    1202:	d0fc      	beq.n	11fe <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1204:	2000      	movs	r0, #0
}
    1206:	bd10      	pop	{r4, pc}

00001208 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1208:	b510      	push	{r4, lr}
    120a:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    120c:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    120e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1210:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1212:	2a00      	cmp	r2, #0
    1214:	d033      	beq.n	127e <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1216:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1218:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    121a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    121c:	2b00      	cmp	r3, #0
    121e:	d12e      	bne.n	127e <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1220:	7e23      	ldrb	r3, [r4, #24]
    1222:	075a      	lsls	r2, r3, #29
    1224:	d52b      	bpl.n	127e <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1226:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1228:	2b00      	cmp	r3, #0
    122a:	d1fc      	bne.n	1226 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    122c:	8b63      	ldrh	r3, [r4, #26]
    122e:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1230:	069a      	lsls	r2, r3, #26
    1232:	d021      	beq.n	1278 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1234:	079a      	lsls	r2, r3, #30
    1236:	d503      	bpl.n	1240 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1238:	2302      	movs	r3, #2
    123a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    123c:	201a      	movs	r0, #26
    123e:	e01e      	b.n	127e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1240:	075a      	lsls	r2, r3, #29
    1242:	d503      	bpl.n	124c <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1244:	2304      	movs	r3, #4
    1246:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    1248:	201e      	movs	r0, #30
    124a:	e018      	b.n	127e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    124c:	07da      	lsls	r2, r3, #31
    124e:	d503      	bpl.n	1258 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1250:	2301      	movs	r3, #1
    1252:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1254:	2013      	movs	r0, #19
    1256:	e012      	b.n	127e <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1258:	06da      	lsls	r2, r3, #27
    125a:	d505      	bpl.n	1268 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    125c:	8b62      	ldrh	r2, [r4, #26]
    125e:	2310      	movs	r3, #16
    1260:	4313      	orrs	r3, r2
    1262:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1264:	2042      	movs	r0, #66	; 0x42
    1266:	e00a      	b.n	127e <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1268:	069a      	lsls	r2, r3, #26
    126a:	d505      	bpl.n	1278 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    126c:	8b62      	ldrh	r2, [r4, #26]
    126e:	2320      	movs	r3, #32
    1270:	4313      	orrs	r3, r2
    1272:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1274:	2041      	movs	r0, #65	; 0x41
    1276:	e002      	b.n	127e <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1278:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    127a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    127c:	2000      	movs	r0, #0
}
    127e:	bd10      	pop	{r4, pc}

00001280 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1282:	0080      	lsls	r0, r0, #2
    1284:	4b64      	ldr	r3, [pc, #400]	; (1418 <_usart_interrupt_handler+0x198>)
    1286:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1288:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    128a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    128c:	2b00      	cmp	r3, #0
    128e:	d1fc      	bne.n	128a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1290:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1292:	7da6      	ldrb	r6, [r4, #22]
    1294:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    1296:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1298:	5ceb      	ldrb	r3, [r5, r3]
    129a:	2230      	movs	r2, #48	; 0x30
    129c:	5caf      	ldrb	r7, [r5, r2]
    129e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    12a0:	07f1      	lsls	r1, r6, #31
    12a2:	d520      	bpl.n	12e6 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    12a4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    12a6:	b29b      	uxth	r3, r3
    12a8:	2b00      	cmp	r3, #0
    12aa:	d01a      	beq.n	12e2 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    12ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
    12ae:	781a      	ldrb	r2, [r3, #0]
    12b0:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    12b2:	1c59      	adds	r1, r3, #1
    12b4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12b6:	7969      	ldrb	r1, [r5, #5]
    12b8:	2901      	cmp	r1, #1
    12ba:	d104      	bne.n	12c6 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    12bc:	7859      	ldrb	r1, [r3, #1]
    12be:	0209      	lsls	r1, r1, #8
    12c0:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    12c2:	3302      	adds	r3, #2
    12c4:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    12c6:	05d3      	lsls	r3, r2, #23
    12c8:	0ddb      	lsrs	r3, r3, #23
    12ca:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    12cc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    12ce:	3b01      	subs	r3, #1
    12d0:	b29b      	uxth	r3, r3
    12d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    12d4:	2b00      	cmp	r3, #0
    12d6:	d106      	bne.n	12e6 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12d8:	2301      	movs	r3, #1
    12da:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    12dc:	2302      	movs	r3, #2
    12de:	75a3      	strb	r3, [r4, #22]
    12e0:	e001      	b.n	12e6 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12e2:	2301      	movs	r3, #1
    12e4:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    12e6:	07b2      	lsls	r2, r6, #30
    12e8:	d509      	bpl.n	12fe <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    12ea:	2302      	movs	r3, #2
    12ec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    12ee:	2200      	movs	r2, #0
    12f0:	2333      	movs	r3, #51	; 0x33
    12f2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    12f4:	07fb      	lsls	r3, r7, #31
    12f6:	d502      	bpl.n	12fe <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12f8:	1c28      	adds	r0, r5, #0
    12fa:	68e9      	ldr	r1, [r5, #12]
    12fc:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    12fe:	0772      	lsls	r2, r6, #29
    1300:	d56a      	bpl.n	13d8 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    1302:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1304:	b29b      	uxth	r3, r3
    1306:	2b00      	cmp	r3, #0
    1308:	d064      	beq.n	13d4 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    130a:	8b63      	ldrh	r3, [r4, #26]
    130c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    130e:	0719      	lsls	r1, r3, #28
    1310:	d402      	bmi.n	1318 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1312:	223f      	movs	r2, #63	; 0x3f
    1314:	4013      	ands	r3, r2
    1316:	e001      	b.n	131c <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1318:	2237      	movs	r2, #55	; 0x37
    131a:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    131c:	2b00      	cmp	r3, #0
    131e:	d037      	beq.n	1390 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1320:	079a      	lsls	r2, r3, #30
    1322:	d507      	bpl.n	1334 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1324:	221a      	movs	r2, #26
    1326:	2332      	movs	r3, #50	; 0x32
    1328:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    132a:	8b62      	ldrh	r2, [r4, #26]
    132c:	2302      	movs	r3, #2
    132e:	4313      	orrs	r3, r2
    1330:	8363      	strh	r3, [r4, #26]
    1332:	e027      	b.n	1384 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1334:	0759      	lsls	r1, r3, #29
    1336:	d507      	bpl.n	1348 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1338:	221e      	movs	r2, #30
    133a:	2332      	movs	r3, #50	; 0x32
    133c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    133e:	8b62      	ldrh	r2, [r4, #26]
    1340:	2304      	movs	r3, #4
    1342:	4313      	orrs	r3, r2
    1344:	8363      	strh	r3, [r4, #26]
    1346:	e01d      	b.n	1384 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1348:	07da      	lsls	r2, r3, #31
    134a:	d507      	bpl.n	135c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    134c:	2213      	movs	r2, #19
    134e:	2332      	movs	r3, #50	; 0x32
    1350:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1352:	8b62      	ldrh	r2, [r4, #26]
    1354:	2301      	movs	r3, #1
    1356:	4313      	orrs	r3, r2
    1358:	8363      	strh	r3, [r4, #26]
    135a:	e013      	b.n	1384 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    135c:	06d9      	lsls	r1, r3, #27
    135e:	d507      	bpl.n	1370 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1360:	2242      	movs	r2, #66	; 0x42
    1362:	2332      	movs	r3, #50	; 0x32
    1364:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1366:	8b62      	ldrh	r2, [r4, #26]
    1368:	2310      	movs	r3, #16
    136a:	4313      	orrs	r3, r2
    136c:	8363      	strh	r3, [r4, #26]
    136e:	e009      	b.n	1384 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1370:	2220      	movs	r2, #32
    1372:	421a      	tst	r2, r3
    1374:	d006      	beq.n	1384 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1376:	2241      	movs	r2, #65	; 0x41
    1378:	2332      	movs	r3, #50	; 0x32
    137a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    137c:	8b62      	ldrh	r2, [r4, #26]
    137e:	2320      	movs	r3, #32
    1380:	4313      	orrs	r3, r2
    1382:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1384:	077a      	lsls	r2, r7, #29
    1386:	d527      	bpl.n	13d8 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1388:	1c28      	adds	r0, r5, #0
    138a:	696b      	ldr	r3, [r5, #20]
    138c:	4798      	blx	r3
    138e:	e023      	b.n	13d8 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1390:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1392:	05d2      	lsls	r2, r2, #23
    1394:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1396:	b2d3      	uxtb	r3, r2
    1398:	6a69      	ldr	r1, [r5, #36]	; 0x24
    139a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    139c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    139e:	1c59      	adds	r1, r3, #1
    13a0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13a2:	7969      	ldrb	r1, [r5, #5]
    13a4:	2901      	cmp	r1, #1
    13a6:	d104      	bne.n	13b2 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    13a8:	0a12      	lsrs	r2, r2, #8
    13aa:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    13ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    13ae:	3301      	adds	r3, #1
    13b0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    13b2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    13b4:	3b01      	subs	r3, #1
    13b6:	b29b      	uxth	r3, r3
    13b8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    13ba:	2b00      	cmp	r3, #0
    13bc:	d10c      	bne.n	13d8 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13be:	2304      	movs	r3, #4
    13c0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    13c2:	2200      	movs	r2, #0
    13c4:	2332      	movs	r3, #50	; 0x32
    13c6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    13c8:	07ba      	lsls	r2, r7, #30
    13ca:	d505      	bpl.n	13d8 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    13cc:	1c28      	adds	r0, r5, #0
    13ce:	692b      	ldr	r3, [r5, #16]
    13d0:	4798      	blx	r3
    13d2:	e001      	b.n	13d8 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    13d4:	2304      	movs	r3, #4
    13d6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    13d8:	06f1      	lsls	r1, r6, #27
    13da:	d507      	bpl.n	13ec <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    13dc:	2310      	movs	r3, #16
    13de:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    13e0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    13e2:	06fa      	lsls	r2, r7, #27
    13e4:	d502      	bpl.n	13ec <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    13e6:	1c28      	adds	r0, r5, #0
    13e8:	69eb      	ldr	r3, [r5, #28]
    13ea:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    13ec:	06b1      	lsls	r1, r6, #26
    13ee:	d507      	bpl.n	1400 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    13f0:	2320      	movs	r3, #32
    13f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    13f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    13f6:	073a      	lsls	r2, r7, #28
    13f8:	d502      	bpl.n	1400 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    13fa:	1c28      	adds	r0, r5, #0
    13fc:	69ab      	ldr	r3, [r5, #24]
    13fe:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1400:	0731      	lsls	r1, r6, #28
    1402:	d507      	bpl.n	1414 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1404:	2308      	movs	r3, #8
    1406:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1408:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    140a:	06ba      	lsls	r2, r7, #26
    140c:	d502      	bpl.n	1414 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    140e:	6a2b      	ldr	r3, [r5, #32]
    1410:	1c28      	adds	r0, r5, #0
    1412:	4798      	blx	r3
		}
	}
#endif
}
    1414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	20003de4 	.word	0x20003de4

0000141c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    141c:	b508      	push	{r3, lr}
	switch (clock_source) {
    141e:	2808      	cmp	r0, #8
    1420:	d834      	bhi.n	148c <system_clock_source_get_hz+0x70>
    1422:	0080      	lsls	r0, r0, #2
    1424:	4b1b      	ldr	r3, [pc, #108]	; (1494 <system_clock_source_get_hz+0x78>)
    1426:	581b      	ldr	r3, [r3, r0]
    1428:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    142a:	2080      	movs	r0, #128	; 0x80
    142c:	0200      	lsls	r0, r0, #8
    142e:	e030      	b.n	1492 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1430:	4b19      	ldr	r3, [pc, #100]	; (1498 <system_clock_source_get_hz+0x7c>)
    1432:	6918      	ldr	r0, [r3, #16]
    1434:	e02d      	b.n	1492 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1436:	4b19      	ldr	r3, [pc, #100]	; (149c <system_clock_source_get_hz+0x80>)
    1438:	6a18      	ldr	r0, [r3, #32]
    143a:	0580      	lsls	r0, r0, #22
    143c:	0f80      	lsrs	r0, r0, #30
    143e:	4b18      	ldr	r3, [pc, #96]	; (14a0 <system_clock_source_get_hz+0x84>)
    1440:	40c3      	lsrs	r3, r0
    1442:	1c18      	adds	r0, r3, #0
    1444:	e025      	b.n	1492 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1446:	4b14      	ldr	r3, [pc, #80]	; (1498 <system_clock_source_get_hz+0x7c>)
    1448:	6958      	ldr	r0, [r3, #20]
    144a:	e022      	b.n	1492 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    144c:	4b12      	ldr	r3, [pc, #72]	; (1498 <system_clock_source_get_hz+0x7c>)
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	2002      	movs	r0, #2
    1452:	4018      	ands	r0, r3
    1454:	d01d      	beq.n	1492 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1456:	4911      	ldr	r1, [pc, #68]	; (149c <system_clock_source_get_hz+0x80>)
    1458:	2210      	movs	r2, #16
    145a:	68cb      	ldr	r3, [r1, #12]
    145c:	421a      	tst	r2, r3
    145e:	d0fc      	beq.n	145a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1460:	4b0d      	ldr	r3, [pc, #52]	; (1498 <system_clock_source_get_hz+0x7c>)
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	075a      	lsls	r2, r3, #29
    1466:	d513      	bpl.n	1490 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1468:	2000      	movs	r0, #0
    146a:	4b0e      	ldr	r3, [pc, #56]	; (14a4 <system_clock_source_get_hz+0x88>)
    146c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    146e:	4b0a      	ldr	r3, [pc, #40]	; (1498 <system_clock_source_get_hz+0x7c>)
    1470:	689b      	ldr	r3, [r3, #8]
    1472:	041b      	lsls	r3, r3, #16
    1474:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1476:	4358      	muls	r0, r3
    1478:	e00b      	b.n	1492 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    147a:	2350      	movs	r3, #80	; 0x50
    147c:	4a07      	ldr	r2, [pc, #28]	; (149c <system_clock_source_get_hz+0x80>)
    147e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1480:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1482:	075a      	lsls	r2, r3, #29
    1484:	d505      	bpl.n	1492 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1486:	4b04      	ldr	r3, [pc, #16]	; (1498 <system_clock_source_get_hz+0x7c>)
    1488:	68d8      	ldr	r0, [r3, #12]
    148a:	e002      	b.n	1492 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    148c:	2000      	movs	r0, #0
    148e:	e000      	b.n	1492 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1490:	4805      	ldr	r0, [pc, #20]	; (14a8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1492:	bd08      	pop	{r3, pc}
    1494:	00004f40 	.word	0x00004f40
    1498:	200000c8 	.word	0x200000c8
    149c:	40000800 	.word	0x40000800
    14a0:	007a1200 	.word	0x007a1200
    14a4:	00001891 	.word	0x00001891
    14a8:	02dc6c00 	.word	0x02dc6c00

000014ac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    14ac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    14ae:	4b0c      	ldr	r3, [pc, #48]	; (14e0 <system_clock_source_osc8m_set_config+0x34>)
    14b0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    14b2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    14b4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    14b6:	7840      	ldrb	r0, [r0, #1]
    14b8:	2201      	movs	r2, #1
    14ba:	4010      	ands	r0, r2
    14bc:	0180      	lsls	r0, r0, #6
    14be:	2640      	movs	r6, #64	; 0x40
    14c0:	43b4      	bics	r4, r6
    14c2:	4304      	orrs	r4, r0
    14c4:	402a      	ands	r2, r5
    14c6:	01d0      	lsls	r0, r2, #7
    14c8:	2280      	movs	r2, #128	; 0x80
    14ca:	4394      	bics	r4, r2
    14cc:	1c22      	adds	r2, r4, #0
    14ce:	4302      	orrs	r2, r0
    14d0:	2003      	movs	r0, #3
    14d2:	4001      	ands	r1, r0
    14d4:	0209      	lsls	r1, r1, #8
    14d6:	4803      	ldr	r0, [pc, #12]	; (14e4 <system_clock_source_osc8m_set_config+0x38>)
    14d8:	4002      	ands	r2, r0
    14da:	430a      	orrs	r2, r1
    14dc:	621a      	str	r2, [r3, #32]
}
    14de:	bd70      	pop	{r4, r5, r6, pc}
    14e0:	40000800 	.word	0x40000800
    14e4:	fffffcff 	.word	0xfffffcff

000014e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    14e8:	2808      	cmp	r0, #8
    14ea:	d843      	bhi.n	1574 <system_clock_source_enable+0x8c>
    14ec:	0080      	lsls	r0, r0, #2
    14ee:	4b22      	ldr	r3, [pc, #136]	; (1578 <system_clock_source_enable+0x90>)
    14f0:	581b      	ldr	r3, [r3, r0]
    14f2:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    14f4:	2000      	movs	r0, #0
    14f6:	e03e      	b.n	1576 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    14f8:	4b20      	ldr	r3, [pc, #128]	; (157c <system_clock_source_enable+0x94>)
    14fa:	6a19      	ldr	r1, [r3, #32]
    14fc:	2202      	movs	r2, #2
    14fe:	430a      	orrs	r2, r1
    1500:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1502:	2000      	movs	r0, #0
    1504:	e037      	b.n	1576 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1506:	4b1d      	ldr	r3, [pc, #116]	; (157c <system_clock_source_enable+0x94>)
    1508:	6999      	ldr	r1, [r3, #24]
    150a:	2202      	movs	r2, #2
    150c:	430a      	orrs	r2, r1
    150e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1510:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1512:	e030      	b.n	1576 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1514:	4b19      	ldr	r3, [pc, #100]	; (157c <system_clock_source_enable+0x94>)
    1516:	8a19      	ldrh	r1, [r3, #16]
    1518:	2202      	movs	r2, #2
    151a:	430a      	orrs	r2, r1
    151c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    151e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1520:	e029      	b.n	1576 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1522:	4b16      	ldr	r3, [pc, #88]	; (157c <system_clock_source_enable+0x94>)
    1524:	8a99      	ldrh	r1, [r3, #20]
    1526:	2202      	movs	r2, #2
    1528:	430a      	orrs	r2, r1
    152a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    152c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    152e:	e022      	b.n	1576 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1530:	4b13      	ldr	r3, [pc, #76]	; (1580 <system_clock_source_enable+0x98>)
    1532:	6819      	ldr	r1, [r3, #0]
    1534:	2202      	movs	r2, #2
    1536:	430a      	orrs	r2, r1
    1538:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    153a:	681a      	ldr	r2, [r3, #0]
    153c:	4b11      	ldr	r3, [pc, #68]	; (1584 <system_clock_source_enable+0x9c>)
    153e:	401a      	ands	r2, r3
    1540:	4b0e      	ldr	r3, [pc, #56]	; (157c <system_clock_source_enable+0x94>)
    1542:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1544:	1c19      	adds	r1, r3, #0
    1546:	2210      	movs	r2, #16
    1548:	68cb      	ldr	r3, [r1, #12]
    154a:	421a      	tst	r2, r3
    154c:	d0fc      	beq.n	1548 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    154e:	4a0c      	ldr	r2, [pc, #48]	; (1580 <system_clock_source_enable+0x98>)
    1550:	6891      	ldr	r1, [r2, #8]
    1552:	4b0a      	ldr	r3, [pc, #40]	; (157c <system_clock_source_enable+0x94>)
    1554:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1556:	6851      	ldr	r1, [r2, #4]
    1558:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    155a:	6812      	ldr	r2, [r2, #0]
    155c:	b292      	uxth	r2, r2
    155e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1560:	2000      	movs	r0, #0
    1562:	e008      	b.n	1576 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1564:	4a05      	ldr	r2, [pc, #20]	; (157c <system_clock_source_enable+0x94>)
    1566:	2344      	movs	r3, #68	; 0x44
    1568:	5cd0      	ldrb	r0, [r2, r3]
    156a:	2102      	movs	r1, #2
    156c:	4301      	orrs	r1, r0
    156e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1570:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1572:	e000      	b.n	1576 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1574:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1576:	4770      	bx	lr
    1578:	00004f64 	.word	0x00004f64
    157c:	40000800 	.word	0x40000800
    1580:	200000c8 	.word	0x200000c8
    1584:	0000ff7f 	.word	0x0000ff7f

00001588 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1588:	b5f0      	push	{r4, r5, r6, r7, lr}
    158a:	4647      	mov	r7, r8
    158c:	b480      	push	{r7}
    158e:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1590:	22c2      	movs	r2, #194	; 0xc2
    1592:	00d2      	lsls	r2, r2, #3
    1594:	4b21      	ldr	r3, [pc, #132]	; (161c <system_clock_init+0x94>)
    1596:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1598:	4b21      	ldr	r3, [pc, #132]	; (1620 <system_clock_init+0x98>)
    159a:	685a      	ldr	r2, [r3, #4]
    159c:	211e      	movs	r1, #30
    159e:	438a      	bics	r2, r1
    15a0:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    15a2:	2301      	movs	r3, #1
    15a4:	466a      	mov	r2, sp
    15a6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15a8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    15aa:	4d1e      	ldr	r5, [pc, #120]	; (1624 <system_clock_init+0x9c>)
    15ac:	b2e0      	uxtb	r0, r4
    15ae:	4669      	mov	r1, sp
    15b0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15b2:	3401      	adds	r4, #1
    15b4:	2c25      	cmp	r4, #37	; 0x25
    15b6:	d1f9      	bne.n	15ac <system_clock_init+0x24>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    15b8:	a803      	add	r0, sp, #12
    15ba:	2400      	movs	r4, #0
    15bc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    15be:	2301      	movs	r3, #1
    15c0:	4698      	mov	r8, r3
    15c2:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    15c4:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    15c6:	4b18      	ldr	r3, [pc, #96]	; (1628 <system_clock_init+0xa0>)
    15c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    15ca:	2006      	movs	r0, #6
    15cc:	4b17      	ldr	r3, [pc, #92]	; (162c <system_clock_init+0xa4>)
    15ce:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    15d0:	4b17      	ldr	r3, [pc, #92]	; (1630 <system_clock_init+0xa8>)
    15d2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    15d4:	466b      	mov	r3, sp
    15d6:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    15d8:	2706      	movs	r7, #6
    15da:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    15dc:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    15de:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    15e0:	2310      	movs	r3, #16
    15e2:	9301      	str	r3, [sp, #4]
    15e4:	2003      	movs	r0, #3
    15e6:	4669      	mov	r1, sp
    15e8:	4e12      	ldr	r6, [pc, #72]	; (1634 <system_clock_init+0xac>)
    15ea:	47b0      	blx	r6
    15ec:	2003      	movs	r0, #3
    15ee:	4d12      	ldr	r5, [pc, #72]	; (1638 <system_clock_init+0xb0>)
    15f0:	47a8      	blx	r5
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    15f2:	4b12      	ldr	r3, [pc, #72]	; (163c <system_clock_init+0xb4>)
    15f4:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    15f6:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    15f8:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    15fa:	4642      	mov	r2, r8
    15fc:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    15fe:	466b      	mov	r3, sp
    1600:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1602:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    1604:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1606:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1608:	2000      	movs	r0, #0
    160a:	4669      	mov	r1, sp
    160c:	47b0      	blx	r6
    160e:	2000      	movs	r0, #0
    1610:	47a8      	blx	r5
#endif
}
    1612:	b004      	add	sp, #16
    1614:	bc04      	pop	{r2}
    1616:	4690      	mov	r8, r2
    1618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	40000800 	.word	0x40000800
    1620:	41004000 	.word	0x41004000
    1624:	00001875 	.word	0x00001875
    1628:	000014ad 	.word	0x000014ad
    162c:	000014e9 	.word	0x000014e9
    1630:	00001641 	.word	0x00001641
    1634:	00001665 	.word	0x00001665
    1638:	00001719 	.word	0x00001719
    163c:	40000400 	.word	0x40000400

00001640 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1640:	4b06      	ldr	r3, [pc, #24]	; (165c <system_gclk_init+0x1c>)
    1642:	6999      	ldr	r1, [r3, #24]
    1644:	2208      	movs	r2, #8
    1646:	430a      	orrs	r2, r1
    1648:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    164a:	2201      	movs	r2, #1
    164c:	4b04      	ldr	r3, [pc, #16]	; (1660 <system_gclk_init+0x20>)
    164e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1650:	1c19      	adds	r1, r3, #0
    1652:	780b      	ldrb	r3, [r1, #0]
    1654:	4213      	tst	r3, r2
    1656:	d1fc      	bne.n	1652 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1658:	4770      	bx	lr
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	40000400 	.word	0x40000400
    1660:	40000c00 	.word	0x40000c00

00001664 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1666:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1668:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    166a:	780d      	ldrb	r5, [r1, #0]
    166c:	022d      	lsls	r5, r5, #8
    166e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1670:	784b      	ldrb	r3, [r1, #1]
    1672:	2b00      	cmp	r3, #0
    1674:	d002      	beq.n	167c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1676:	2380      	movs	r3, #128	; 0x80
    1678:	02db      	lsls	r3, r3, #11
    167a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    167c:	7a4b      	ldrb	r3, [r1, #9]
    167e:	2b00      	cmp	r3, #0
    1680:	d002      	beq.n	1688 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1682:	2380      	movs	r3, #128	; 0x80
    1684:	031b      	lsls	r3, r3, #12
    1686:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1688:	684c      	ldr	r4, [r1, #4]
    168a:	2c01      	cmp	r4, #1
    168c:	d917      	bls.n	16be <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    168e:	1e63      	subs	r3, r4, #1
    1690:	421c      	tst	r4, r3
    1692:	d10f      	bne.n	16b4 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1694:	2c02      	cmp	r4, #2
    1696:	d906      	bls.n	16a6 <system_gclk_gen_set_config+0x42>
    1698:	2302      	movs	r3, #2
    169a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    169c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    169e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    16a0:	429c      	cmp	r4, r3
    16a2:	d8fb      	bhi.n	169c <system_gclk_gen_set_config+0x38>
    16a4:	e000      	b.n	16a8 <system_gclk_gen_set_config+0x44>
    16a6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    16a8:	0217      	lsls	r7, r2, #8
    16aa:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    16ac:	2380      	movs	r3, #128	; 0x80
    16ae:	035b      	lsls	r3, r3, #13
    16b0:	431d      	orrs	r5, r3
    16b2:	e004      	b.n	16be <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    16b4:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    16b6:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    16b8:	2380      	movs	r3, #128	; 0x80
    16ba:	029b      	lsls	r3, r3, #10
    16bc:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    16be:	7a0b      	ldrb	r3, [r1, #8]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d002      	beq.n	16ca <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    16c4:	2380      	movs	r3, #128	; 0x80
    16c6:	039b      	lsls	r3, r3, #14
    16c8:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16ca:	4a0f      	ldr	r2, [pc, #60]	; (1708 <system_gclk_gen_set_config+0xa4>)
    16cc:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    16ce:	b25b      	sxtb	r3, r3
    16d0:	2b00      	cmp	r3, #0
    16d2:	dbfb      	blt.n	16cc <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16d4:	4b0d      	ldr	r3, [pc, #52]	; (170c <system_gclk_gen_set_config+0xa8>)
    16d6:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16d8:	4b0d      	ldr	r3, [pc, #52]	; (1710 <system_gclk_gen_set_config+0xac>)
    16da:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16dc:	4a0a      	ldr	r2, [pc, #40]	; (1708 <system_gclk_gen_set_config+0xa4>)
    16de:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    16e0:	b25b      	sxtb	r3, r3
    16e2:	2b00      	cmp	r3, #0
    16e4:	dbfb      	blt.n	16de <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    16e6:	4b08      	ldr	r3, [pc, #32]	; (1708 <system_gclk_gen_set_config+0xa4>)
    16e8:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16ea:	1c1a      	adds	r2, r3, #0
    16ec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    16ee:	b25b      	sxtb	r3, r3
    16f0:	2b00      	cmp	r3, #0
    16f2:	dbfb      	blt.n	16ec <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    16f4:	4b04      	ldr	r3, [pc, #16]	; (1708 <system_gclk_gen_set_config+0xa4>)
    16f6:	6859      	ldr	r1, [r3, #4]
    16f8:	2280      	movs	r2, #128	; 0x80
    16fa:	0252      	lsls	r2, r2, #9
    16fc:	400a      	ands	r2, r1
    16fe:	4315      	orrs	r5, r2
    1700:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1702:	4b04      	ldr	r3, [pc, #16]	; (1714 <system_gclk_gen_set_config+0xb0>)
    1704:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1708:	40000c00 	.word	0x40000c00
    170c:	00000791 	.word	0x00000791
    1710:	40000c08 	.word	0x40000c08
    1714:	000007d1 	.word	0x000007d1

00001718 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1718:	b510      	push	{r4, lr}
    171a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    171c:	4a0b      	ldr	r2, [pc, #44]	; (174c <system_gclk_gen_enable+0x34>)
    171e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1720:	b25b      	sxtb	r3, r3
    1722:	2b00      	cmp	r3, #0
    1724:	dbfb      	blt.n	171e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1726:	4b0a      	ldr	r3, [pc, #40]	; (1750 <system_gclk_gen_enable+0x38>)
    1728:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    172a:	4b0a      	ldr	r3, [pc, #40]	; (1754 <system_gclk_gen_enable+0x3c>)
    172c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    172e:	4a07      	ldr	r2, [pc, #28]	; (174c <system_gclk_gen_enable+0x34>)
    1730:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1732:	b25b      	sxtb	r3, r3
    1734:	2b00      	cmp	r3, #0
    1736:	dbfb      	blt.n	1730 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1738:	4b04      	ldr	r3, [pc, #16]	; (174c <system_gclk_gen_enable+0x34>)
    173a:	6859      	ldr	r1, [r3, #4]
    173c:	2280      	movs	r2, #128	; 0x80
    173e:	0252      	lsls	r2, r2, #9
    1740:	430a      	orrs	r2, r1
    1742:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1744:	4b04      	ldr	r3, [pc, #16]	; (1758 <system_gclk_gen_enable+0x40>)
    1746:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1748:	bd10      	pop	{r4, pc}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	40000c00 	.word	0x40000c00
    1750:	00000791 	.word	0x00000791
    1754:	40000c04 	.word	0x40000c04
    1758:	000007d1 	.word	0x000007d1

0000175c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1760:	4a1a      	ldr	r2, [pc, #104]	; (17cc <system_gclk_gen_get_hz+0x70>)
    1762:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1764:	b25b      	sxtb	r3, r3
    1766:	2b00      	cmp	r3, #0
    1768:	dbfb      	blt.n	1762 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    176a:	4b19      	ldr	r3, [pc, #100]	; (17d0 <system_gclk_gen_get_hz+0x74>)
    176c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    176e:	4b19      	ldr	r3, [pc, #100]	; (17d4 <system_gclk_gen_get_hz+0x78>)
    1770:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1772:	4a16      	ldr	r2, [pc, #88]	; (17cc <system_gclk_gen_get_hz+0x70>)
    1774:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1776:	b25b      	sxtb	r3, r3
    1778:	2b00      	cmp	r3, #0
    177a:	dbfb      	blt.n	1774 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    177c:	4e13      	ldr	r6, [pc, #76]	; (17cc <system_gclk_gen_get_hz+0x70>)
    177e:	6870      	ldr	r0, [r6, #4]
    1780:	04c0      	lsls	r0, r0, #19
    1782:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1784:	4b14      	ldr	r3, [pc, #80]	; (17d8 <system_gclk_gen_get_hz+0x7c>)
    1786:	4798      	blx	r3
    1788:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    178a:	4b12      	ldr	r3, [pc, #72]	; (17d4 <system_gclk_gen_get_hz+0x78>)
    178c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    178e:	6876      	ldr	r6, [r6, #4]
    1790:	02f6      	lsls	r6, r6, #11
    1792:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1794:	4b11      	ldr	r3, [pc, #68]	; (17dc <system_gclk_gen_get_hz+0x80>)
    1796:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1798:	4a0c      	ldr	r2, [pc, #48]	; (17cc <system_gclk_gen_get_hz+0x70>)
    179a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    179c:	b25b      	sxtb	r3, r3
    179e:	2b00      	cmp	r3, #0
    17a0:	dbfb      	blt.n	179a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    17a2:	4b0a      	ldr	r3, [pc, #40]	; (17cc <system_gclk_gen_get_hz+0x70>)
    17a4:	689c      	ldr	r4, [r3, #8]
    17a6:	0a24      	lsrs	r4, r4, #8
    17a8:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17aa:	4b0d      	ldr	r3, [pc, #52]	; (17e0 <system_gclk_gen_get_hz+0x84>)
    17ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    17ae:	2e00      	cmp	r6, #0
    17b0:	d107      	bne.n	17c2 <system_gclk_gen_get_hz+0x66>
    17b2:	2c01      	cmp	r4, #1
    17b4:	d907      	bls.n	17c6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    17b6:	1c28      	adds	r0, r5, #0
    17b8:	1c21      	adds	r1, r4, #0
    17ba:	4b0a      	ldr	r3, [pc, #40]	; (17e4 <system_gclk_gen_get_hz+0x88>)
    17bc:	4798      	blx	r3
    17be:	1c05      	adds	r5, r0, #0
    17c0:	e001      	b.n	17c6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    17c2:	3401      	adds	r4, #1
    17c4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    17c6:	1c28      	adds	r0, r5, #0
    17c8:	bd70      	pop	{r4, r5, r6, pc}
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	40000c00 	.word	0x40000c00
    17d0:	00000791 	.word	0x00000791
    17d4:	40000c04 	.word	0x40000c04
    17d8:	0000141d 	.word	0x0000141d
    17dc:	40000c08 	.word	0x40000c08
    17e0:	000007d1 	.word	0x000007d1
    17e4:	00003c35 	.word	0x00003c35

000017e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    17e8:	b510      	push	{r4, lr}
    17ea:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17ec:	4b06      	ldr	r3, [pc, #24]	; (1808 <system_gclk_chan_enable+0x20>)
    17ee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    17f0:	4b06      	ldr	r3, [pc, #24]	; (180c <system_gclk_chan_enable+0x24>)
    17f2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    17f4:	4b06      	ldr	r3, [pc, #24]	; (1810 <system_gclk_chan_enable+0x28>)
    17f6:	8859      	ldrh	r1, [r3, #2]
    17f8:	2280      	movs	r2, #128	; 0x80
    17fa:	01d2      	lsls	r2, r2, #7
    17fc:	430a      	orrs	r2, r1
    17fe:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1800:	4b04      	ldr	r3, [pc, #16]	; (1814 <system_gclk_chan_enable+0x2c>)
    1802:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1804:	bd10      	pop	{r4, pc}
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	00000791 	.word	0x00000791
    180c:	40000c02 	.word	0x40000c02
    1810:	40000c00 	.word	0x40000c00
    1814:	000007d1 	.word	0x000007d1

00001818 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1818:	b510      	push	{r4, lr}
    181a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    181c:	4b0f      	ldr	r3, [pc, #60]	; (185c <system_gclk_chan_disable+0x44>)
    181e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1820:	4b0f      	ldr	r3, [pc, #60]	; (1860 <system_gclk_chan_disable+0x48>)
    1822:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1824:	4b0f      	ldr	r3, [pc, #60]	; (1864 <system_gclk_chan_disable+0x4c>)
    1826:	8858      	ldrh	r0, [r3, #2]
    1828:	0500      	lsls	r0, r0, #20
    182a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    182c:	8859      	ldrh	r1, [r3, #2]
    182e:	4a0e      	ldr	r2, [pc, #56]	; (1868 <system_gclk_chan_disable+0x50>)
    1830:	400a      	ands	r2, r1
    1832:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1834:	8859      	ldrh	r1, [r3, #2]
    1836:	4a0d      	ldr	r2, [pc, #52]	; (186c <system_gclk_chan_disable+0x54>)
    1838:	400a      	ands	r2, r1
    183a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    183c:	1c19      	adds	r1, r3, #0
    183e:	2280      	movs	r2, #128	; 0x80
    1840:	01d2      	lsls	r2, r2, #7
    1842:	884b      	ldrh	r3, [r1, #2]
    1844:	4213      	tst	r3, r2
    1846:	d1fc      	bne.n	1842 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <system_gclk_chan_disable+0x4c>)
    184a:	0201      	lsls	r1, r0, #8
    184c:	8858      	ldrh	r0, [r3, #2]
    184e:	4a06      	ldr	r2, [pc, #24]	; (1868 <system_gclk_chan_disable+0x50>)
    1850:	4002      	ands	r2, r0
    1852:	430a      	orrs	r2, r1
    1854:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1856:	4b06      	ldr	r3, [pc, #24]	; (1870 <system_gclk_chan_disable+0x58>)
    1858:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    185a:	bd10      	pop	{r4, pc}
    185c:	00000791 	.word	0x00000791
    1860:	40000c02 	.word	0x40000c02
    1864:	40000c00 	.word	0x40000c00
    1868:	fffff0ff 	.word	0xfffff0ff
    186c:	ffffbfff 	.word	0xffffbfff
    1870:	000007d1 	.word	0x000007d1

00001874 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1874:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1876:	780c      	ldrb	r4, [r1, #0]
    1878:	0224      	lsls	r4, r4, #8
    187a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    187c:	4b02      	ldr	r3, [pc, #8]	; (1888 <system_gclk_chan_set_config+0x14>)
    187e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1880:	b2a4      	uxth	r4, r4
    1882:	4b02      	ldr	r3, [pc, #8]	; (188c <system_gclk_chan_set_config+0x18>)
    1884:	805c      	strh	r4, [r3, #2]
}
    1886:	bd10      	pop	{r4, pc}
    1888:	00001819 	.word	0x00001819
    188c:	40000c00 	.word	0x40000c00

00001890 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1890:	b510      	push	{r4, lr}
    1892:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1894:	4b06      	ldr	r3, [pc, #24]	; (18b0 <system_gclk_chan_get_hz+0x20>)
    1896:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1898:	4b06      	ldr	r3, [pc, #24]	; (18b4 <system_gclk_chan_get_hz+0x24>)
    189a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    189c:	4b06      	ldr	r3, [pc, #24]	; (18b8 <system_gclk_chan_get_hz+0x28>)
    189e:	885c      	ldrh	r4, [r3, #2]
    18a0:	0524      	lsls	r4, r4, #20
    18a2:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    18a4:	4b05      	ldr	r3, [pc, #20]	; (18bc <system_gclk_chan_get_hz+0x2c>)
    18a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    18a8:	1c20      	adds	r0, r4, #0
    18aa:	4b05      	ldr	r3, [pc, #20]	; (18c0 <system_gclk_chan_get_hz+0x30>)
    18ac:	4798      	blx	r3
}
    18ae:	bd10      	pop	{r4, pc}
    18b0:	00000791 	.word	0x00000791
    18b4:	40000c02 	.word	0x40000c02
    18b8:	40000c00 	.word	0x40000c00
    18bc:	000007d1 	.word	0x000007d1
    18c0:	0000175d 	.word	0x0000175d

000018c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    18c4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    18c6:	78d3      	ldrb	r3, [r2, #3]
    18c8:	2b00      	cmp	r3, #0
    18ca:	d11e      	bne.n	190a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    18cc:	7813      	ldrb	r3, [r2, #0]
    18ce:	2b80      	cmp	r3, #128	; 0x80
    18d0:	d004      	beq.n	18dc <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    18d2:	061b      	lsls	r3, r3, #24
    18d4:	2480      	movs	r4, #128	; 0x80
    18d6:	0264      	lsls	r4, r4, #9
    18d8:	4323      	orrs	r3, r4
    18da:	e000      	b.n	18de <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    18dc:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    18de:	7854      	ldrb	r4, [r2, #1]
    18e0:	2502      	movs	r5, #2
    18e2:	43ac      	bics	r4, r5
    18e4:	d10a      	bne.n	18fc <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    18e6:	7894      	ldrb	r4, [r2, #2]
    18e8:	2c00      	cmp	r4, #0
    18ea:	d103      	bne.n	18f4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    18ec:	2480      	movs	r4, #128	; 0x80
    18ee:	02a4      	lsls	r4, r4, #10
    18f0:	4323      	orrs	r3, r4
    18f2:	e002      	b.n	18fa <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    18f4:	24c0      	movs	r4, #192	; 0xc0
    18f6:	02e4      	lsls	r4, r4, #11
    18f8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    18fa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    18fc:	7854      	ldrb	r4, [r2, #1]
    18fe:	3c01      	subs	r4, #1
    1900:	2c01      	cmp	r4, #1
    1902:	d804      	bhi.n	190e <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1904:	4c11      	ldr	r4, [pc, #68]	; (194c <_system_pinmux_config+0x88>)
    1906:	4023      	ands	r3, r4
    1908:	e001      	b.n	190e <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    190a:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    190c:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    190e:	040d      	lsls	r5, r1, #16
    1910:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1912:	24a0      	movs	r4, #160	; 0xa0
    1914:	05e4      	lsls	r4, r4, #23
    1916:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1918:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    191a:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    191c:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    191e:	24d0      	movs	r4, #208	; 0xd0
    1920:	0624      	lsls	r4, r4, #24
    1922:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1924:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1926:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1928:	78d4      	ldrb	r4, [r2, #3]
    192a:	2c00      	cmp	r4, #0
    192c:	d10c      	bne.n	1948 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    192e:	035c      	lsls	r4, r3, #13
    1930:	d505      	bpl.n	193e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1932:	7893      	ldrb	r3, [r2, #2]
    1934:	2b01      	cmp	r3, #1
    1936:	d101      	bne.n	193c <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1938:	6181      	str	r1, [r0, #24]
    193a:	e000      	b.n	193e <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    193c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    193e:	7853      	ldrb	r3, [r2, #1]
    1940:	3b01      	subs	r3, #1
    1942:	2b01      	cmp	r3, #1
    1944:	d800      	bhi.n	1948 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1946:	6081      	str	r1, [r0, #8]
		}
	}
}
    1948:	bd30      	pop	{r4, r5, pc}
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	fffbffff 	.word	0xfffbffff

00001950 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1950:	b508      	push	{r3, lr}
    1952:	1c03      	adds	r3, r0, #0
    1954:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1956:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1958:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    195a:	2900      	cmp	r1, #0
    195c:	d103      	bne.n	1966 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    195e:	0958      	lsrs	r0, r3, #5
    1960:	01c0      	lsls	r0, r0, #7
    1962:	4904      	ldr	r1, [pc, #16]	; (1974 <system_pinmux_pin_set_config+0x24>)
    1964:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1966:	211f      	movs	r1, #31
    1968:	400b      	ands	r3, r1
    196a:	2101      	movs	r1, #1
    196c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    196e:	4b02      	ldr	r3, [pc, #8]	; (1978 <system_pinmux_pin_set_config+0x28>)
    1970:	4798      	blx	r3
}
    1972:	bd08      	pop	{r3, pc}
    1974:	41004400 	.word	0x41004400
    1978:	000018c5 	.word	0x000018c5

0000197c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    197c:	4770      	bx	lr
    197e:	46c0      	nop			; (mov r8, r8)

00001980 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1980:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1982:	4b04      	ldr	r3, [pc, #16]	; (1994 <system_init+0x14>)
    1984:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1986:	4b04      	ldr	r3, [pc, #16]	; (1998 <system_init+0x18>)
    1988:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    198a:	4b04      	ldr	r3, [pc, #16]	; (199c <system_init+0x1c>)
    198c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    198e:	4b04      	ldr	r3, [pc, #16]	; (19a0 <system_init+0x20>)
    1990:	4798      	blx	r3
}
    1992:	bd08      	pop	{r3, pc}
    1994:	00001589 	.word	0x00001589
    1998:	00000801 	.word	0x00000801
    199c:	0000197d 	.word	0x0000197d
    19a0:	0000197d 	.word	0x0000197d

000019a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    19a4:	e7fe      	b.n	19a4 <Dummy_Handler>
    19a6:	46c0      	nop			; (mov r8, r8)

000019a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    19a8:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    19aa:	4b1c      	ldr	r3, [pc, #112]	; (1a1c <Reset_Handler+0x74>)
    19ac:	4a1c      	ldr	r2, [pc, #112]	; (1a20 <Reset_Handler+0x78>)
    19ae:	429a      	cmp	r2, r3
    19b0:	d003      	beq.n	19ba <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    19b2:	4b1c      	ldr	r3, [pc, #112]	; (1a24 <Reset_Handler+0x7c>)
    19b4:	4a19      	ldr	r2, [pc, #100]	; (1a1c <Reset_Handler+0x74>)
    19b6:	429a      	cmp	r2, r3
    19b8:	d304      	bcc.n	19c4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    19ba:	4b1b      	ldr	r3, [pc, #108]	; (1a28 <Reset_Handler+0x80>)
    19bc:	4a1b      	ldr	r2, [pc, #108]	; (1a2c <Reset_Handler+0x84>)
    19be:	429a      	cmp	r2, r3
    19c0:	d310      	bcc.n	19e4 <Reset_Handler+0x3c>
    19c2:	e01b      	b.n	19fc <Reset_Handler+0x54>
    19c4:	4b1a      	ldr	r3, [pc, #104]	; (1a30 <Reset_Handler+0x88>)
    19c6:	4817      	ldr	r0, [pc, #92]	; (1a24 <Reset_Handler+0x7c>)
    19c8:	3003      	adds	r0, #3
    19ca:	1ac0      	subs	r0, r0, r3
    19cc:	0880      	lsrs	r0, r0, #2
    19ce:	3001      	adds	r0, #1
    19d0:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    19d2:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    19d4:	4911      	ldr	r1, [pc, #68]	; (1a1c <Reset_Handler+0x74>)
    19d6:	4a12      	ldr	r2, [pc, #72]	; (1a20 <Reset_Handler+0x78>)
    19d8:	58d4      	ldr	r4, [r2, r3]
    19da:	50cc      	str	r4, [r1, r3]
    19dc:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    19de:	4283      	cmp	r3, r0
    19e0:	d1fa      	bne.n	19d8 <Reset_Handler+0x30>
    19e2:	e7ea      	b.n	19ba <Reset_Handler+0x12>
    19e4:	4b11      	ldr	r3, [pc, #68]	; (1a2c <Reset_Handler+0x84>)
    19e6:	1d1a      	adds	r2, r3, #4
    19e8:	490f      	ldr	r1, [pc, #60]	; (1a28 <Reset_Handler+0x80>)
    19ea:	3103      	adds	r1, #3
    19ec:	1a89      	subs	r1, r1, r2
    19ee:	0889      	lsrs	r1, r1, #2
    19f0:	0089      	lsls	r1, r1, #2
    19f2:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    19f4:	2100      	movs	r1, #0
    19f6:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    19f8:	4293      	cmp	r3, r2
    19fa:	d1fc      	bne.n	19f6 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    19fc:	4b0d      	ldr	r3, [pc, #52]	; (1a34 <Reset_Handler+0x8c>)
    19fe:	217f      	movs	r1, #127	; 0x7f
    1a00:	4a0d      	ldr	r2, [pc, #52]	; (1a38 <Reset_Handler+0x90>)
    1a02:	438a      	bics	r2, r1
    1a04:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1a06:	4b0d      	ldr	r3, [pc, #52]	; (1a3c <Reset_Handler+0x94>)
    1a08:	6859      	ldr	r1, [r3, #4]
    1a0a:	2280      	movs	r2, #128	; 0x80
    1a0c:	430a      	orrs	r2, r1
    1a0e:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1a10:	4b0b      	ldr	r3, [pc, #44]	; (1a40 <Reset_Handler+0x98>)
    1a12:	4798      	blx	r3

        /* Branch to main function */
        main();
    1a14:	4b0b      	ldr	r3, [pc, #44]	; (1a44 <Reset_Handler+0x9c>)
    1a16:	4798      	blx	r3
    1a18:	e7fe      	b.n	1a18 <Reset_Handler+0x70>
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	20000000 	.word	0x20000000
    1a20:	00005104 	.word	0x00005104
    1a24:	20000080 	.word	0x20000080
    1a28:	20003e00 	.word	0x20003e00
    1a2c:	20000080 	.word	0x20000080
    1a30:	20000004 	.word	0x20000004
    1a34:	e000ed00 	.word	0xe000ed00
    1a38:	00000000 	.word	0x00000000
    1a3c:	41004000 	.word	0x41004000
    1a40:	00003d19 	.word	0x00003d19
    1a44:	00003b1d 	.word	0x00003b1d

00001a48 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a48:	4b06      	ldr	r3, [pc, #24]	; (1a64 <_sbrk+0x1c>)
    1a4a:	681b      	ldr	r3, [r3, #0]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d102      	bne.n	1a56 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1a50:	4a05      	ldr	r2, [pc, #20]	; (1a68 <_sbrk+0x20>)
    1a52:	4b04      	ldr	r3, [pc, #16]	; (1a64 <_sbrk+0x1c>)
    1a54:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1a56:	4a03      	ldr	r2, [pc, #12]	; (1a64 <_sbrk+0x1c>)
    1a58:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    1a5a:	1818      	adds	r0, r3, r0
    1a5c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a5e:	1c18      	adds	r0, r3, #0
    1a60:	4770      	bx	lr
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	200000e0 	.word	0x200000e0
    1a68:	20005e00 	.word	0x20005e00

00001a6c <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    1a6c:	2001      	movs	r0, #1
}
    1a6e:	4240      	negs	r0, r0
    1a70:	4770      	bx	lr
    1a72:	46c0      	nop			; (mov r8, r8)

00001a74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1a74:	2380      	movs	r3, #128	; 0x80
    1a76:	019b      	lsls	r3, r3, #6
    1a78:	604b      	str	r3, [r1, #4]

	return 0;
}
    1a7a:	2000      	movs	r0, #0
    1a7c:	4770      	bx	lr
    1a7e:	46c0      	nop			; (mov r8, r8)

00001a80 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1a80:	2001      	movs	r0, #1
    1a82:	4770      	bx	lr

00001a84 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1a84:	2000      	movs	r0, #0
    1a86:	4770      	bx	lr

00001a88 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a88:	1c03      	adds	r3, r0, #0
    1a8a:	3308      	adds	r3, #8
    1a8c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1a8e:	2201      	movs	r2, #1
    1a90:	4252      	negs	r2, r2
    1a92:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a94:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1a96:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1a98:	2300      	movs	r3, #0
    1a9a:	6003      	str	r3, [r0, #0]
}
    1a9c:	4770      	bx	lr
    1a9e:	46c0      	nop			; (mov r8, r8)

00001aa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1aa0:	2300      	movs	r3, #0
    1aa2:	6103      	str	r3, [r0, #16]
}
    1aa4:	4770      	bx	lr
    1aa6:	46c0      	nop			; (mov r8, r8)

00001aa8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    1aa8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1aaa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1aac:	689a      	ldr	r2, [r3, #8]
    1aae:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1ab0:	689a      	ldr	r2, [r3, #8]
    1ab2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    1ab4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1ab6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1ab8:	6803      	ldr	r3, [r0, #0]
    1aba:	3301      	adds	r3, #1
    1abc:	6003      	str	r3, [r0, #0]
}
    1abe:	4770      	bx	lr

00001ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ac0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1ac2:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ac4:	1c02      	adds	r2, r0, #0
    1ac6:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1ac8:	1c63      	adds	r3, r4, #1
    1aca:	d101      	bne.n	1ad0 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1acc:	6902      	ldr	r2, [r0, #16]
    1ace:	e005      	b.n	1adc <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ad0:	6853      	ldr	r3, [r2, #4]
    1ad2:	681d      	ldr	r5, [r3, #0]
    1ad4:	42ac      	cmp	r4, r5
    1ad6:	d301      	bcc.n	1adc <vListInsert+0x1c>
    1ad8:	1c1a      	adds	r2, r3, #0
    1ada:	e7f9      	b.n	1ad0 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1adc:	6853      	ldr	r3, [r2, #4]
    1ade:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1ae0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1ae2:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    1ae4:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1ae6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1ae8:	6803      	ldr	r3, [r0, #0]
    1aea:	3301      	adds	r3, #1
    1aec:	6003      	str	r3, [r0, #0]
}
    1aee:	bd30      	pop	{r4, r5, pc}

00001af0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1af0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1af2:	6842      	ldr	r2, [r0, #4]
    1af4:	6881      	ldr	r1, [r0, #8]
    1af6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1af8:	6882      	ldr	r2, [r0, #8]
    1afa:	6841      	ldr	r1, [r0, #4]
    1afc:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1afe:	685a      	ldr	r2, [r3, #4]
    1b00:	4282      	cmp	r2, r0
    1b02:	d101      	bne.n	1b08 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1b04:	6892      	ldr	r2, [r2, #8]
    1b06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1b08:	2200      	movs	r2, #0
    1b0a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1b0c:	6818      	ldr	r0, [r3, #0]
    1b0e:	3801      	subs	r0, #1
    1b10:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    1b12:	4770      	bx	lr

00001b14 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    1b14:	4b03      	ldr	r3, [pc, #12]	; (1b24 <prvTaskExitError+0x10>)
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	3301      	adds	r3, #1
    1b1a:	d001      	beq.n	1b20 <prvTaskExitError+0xc>
    1b1c:	b672      	cpsid	i
    1b1e:	e7fe      	b.n	1b1e <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
    1b20:	b672      	cpsid	i
    1b22:	e7fe      	b.n	1b22 <prvTaskExitError+0xe>
    1b24:	20000010 	.word	0x20000010

00001b28 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1b28:	4a06      	ldr	r2, [pc, #24]	; (1b44 <pxCurrentTCBConst2>)
    1b2a:	6813      	ldr	r3, [r2, #0]
    1b2c:	6818      	ldr	r0, [r3, #0]
    1b2e:	3020      	adds	r0, #32
    1b30:	f380 8809 	msr	PSP, r0
    1b34:	2002      	movs	r0, #2
    1b36:	f380 8814 	msr	CONTROL, r0
    1b3a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1b3c:	46ae      	mov	lr, r5
    1b3e:	b662      	cpsie	i
    1b40:	bd00      	pop	{pc}
    1b42:	46c0      	nop			; (mov r8, r8)

00001b44 <pxCurrentTCBConst2>:
    1b44:	20003c38 	.word	0x20003c38

00001b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1b48:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    1b4a:	1f03      	subs	r3, r0, #4
    1b4c:	2480      	movs	r4, #128	; 0x80
    1b4e:	0464      	lsls	r4, r4, #17
    1b50:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    1b52:	3b04      	subs	r3, #4
    1b54:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    1b56:	3b04      	subs	r3, #4
    1b58:	4902      	ldr	r1, [pc, #8]	; (1b64 <pxPortInitialiseStack+0x1c>)
    1b5a:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    1b5c:	3b14      	subs	r3, #20
    1b5e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
    1b60:	3840      	subs	r0, #64	; 0x40
}
    1b62:	bd10      	pop	{r4, pc}
    1b64:	00001b15 	.word	0x00001b15

00001b68 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    1b68:	4770      	bx	lr
    1b6a:	46c0      	nop			; (mov r8, r8)

00001b6c <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1b6c:	2280      	movs	r2, #128	; 0x80
    1b6e:	0552      	lsls	r2, r2, #21
    1b70:	4b03      	ldr	r3, [pc, #12]	; (1b80 <vPortYield+0x14>)
    1b72:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1b74:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1b78:	f3bf 8f6f 	isb	sy
}
    1b7c:	4770      	bx	lr
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	e000ed04 	.word	0xe000ed04

00001b84 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    1b84:	b672      	cpsid	i
    uxCriticalNesting++;
    1b86:	4b04      	ldr	r3, [pc, #16]	; (1b98 <vPortEnterCritical+0x14>)
    1b88:	681a      	ldr	r2, [r3, #0]
    1b8a:	3201      	adds	r2, #1
    1b8c:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    1b8e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1b92:	f3bf 8f6f 	isb	sy
}
    1b96:	4770      	bx	lr
    1b98:	20000010 	.word	0x20000010

00001b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    1b9c:	4b06      	ldr	r3, [pc, #24]	; (1bb8 <vPortExitCritical+0x1c>)
    1b9e:	681b      	ldr	r3, [r3, #0]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d101      	bne.n	1ba8 <vPortExitCritical+0xc>
    1ba4:	b672      	cpsid	i
    1ba6:	e7fe      	b.n	1ba6 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    1ba8:	3b01      	subs	r3, #1
    1baa:	4a03      	ldr	r2, [pc, #12]	; (1bb8 <vPortExitCritical+0x1c>)
    1bac:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d100      	bne.n	1bb4 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
    1bb2:	b662      	cpsie	i
    }
}
    1bb4:	4770      	bx	lr
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	20000010 	.word	0x20000010

00001bbc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    1bbc:	f3ef 8010 	mrs	r0, PRIMASK
    1bc0:	b672      	cpsid	i
    1bc2:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
    1bc4:	2000      	movs	r0, #0
    1bc6:	46c0      	nop			; (mov r8, r8)

00001bc8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    1bc8:	f380 8810 	msr	PRIMASK, r0
    1bcc:	4770      	bx	lr
    1bce:	46c0      	nop			; (mov r8, r8)

00001bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1bd0:	f3ef 8009 	mrs	r0, PSP
    1bd4:	4b0e      	ldr	r3, [pc, #56]	; (1c10 <pxCurrentTCBConst>)
    1bd6:	681a      	ldr	r2, [r3, #0]
    1bd8:	3820      	subs	r0, #32
    1bda:	6010      	str	r0, [r2, #0]
    1bdc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1bde:	4644      	mov	r4, r8
    1be0:	464d      	mov	r5, r9
    1be2:	4656      	mov	r6, sl
    1be4:	465f      	mov	r7, fp
    1be6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1be8:	b508      	push	{r3, lr}
    1bea:	b672      	cpsid	i
    1bec:	f000 ff6a 	bl	2ac4 <vTaskSwitchContext>
    1bf0:	b662      	cpsie	i
    1bf2:	bc0c      	pop	{r2, r3}
    1bf4:	6811      	ldr	r1, [r2, #0]
    1bf6:	6808      	ldr	r0, [r1, #0]
    1bf8:	3010      	adds	r0, #16
    1bfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1bfc:	46a0      	mov	r8, r4
    1bfe:	46a9      	mov	r9, r5
    1c00:	46b2      	mov	sl, r6
    1c02:	46bb      	mov	fp, r7
    1c04:	f380 8809 	msr	PSP, r0
    1c08:	3820      	subs	r0, #32
    1c0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1c0c:	4718      	bx	r3
    1c0e:	46c0      	nop			; (mov r8, r8)

00001c10 <pxCurrentTCBConst>:
    1c10:	20003c38 	.word	0x20003c38

00001c14 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1c14:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    1c16:	4b07      	ldr	r3, [pc, #28]	; (1c34 <SysTick_Handler+0x20>)
    1c18:	4798      	blx	r3
    1c1a:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    1c1c:	4b06      	ldr	r3, [pc, #24]	; (1c38 <SysTick_Handler+0x24>)
    1c1e:	4798      	blx	r3
    1c20:	2800      	cmp	r0, #0
    1c22:	d003      	beq.n	1c2c <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    1c24:	2280      	movs	r2, #128	; 0x80
    1c26:	0552      	lsls	r2, r2, #21
    1c28:	4b04      	ldr	r3, [pc, #16]	; (1c3c <SysTick_Handler+0x28>)
    1c2a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    1c2c:	1c20      	adds	r0, r4, #0
    1c2e:	4b04      	ldr	r3, [pc, #16]	; (1c40 <SysTick_Handler+0x2c>)
    1c30:	4798      	blx	r3
}
    1c32:	bd10      	pop	{r4, pc}
    1c34:	00001bbd 	.word	0x00001bbd
    1c38:	000027c1 	.word	0x000027c1
    1c3c:	e000ed04 	.word	0xe000ed04
    1c40:	00001bc9 	.word	0x00001bc9

00001c44 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    1c44:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    1c46:	2200      	movs	r2, #0
    1c48:	4b07      	ldr	r3, [pc, #28]	; (1c68 <vPortSetupTimerInterrupt+0x24>)
    1c4a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1c4c:	2000      	movs	r0, #0
    1c4e:	4b07      	ldr	r3, [pc, #28]	; (1c6c <vPortSetupTimerInterrupt+0x28>)
    1c50:	4798      	blx	r3
    1c52:	21c8      	movs	r1, #200	; 0xc8
    1c54:	4b06      	ldr	r3, [pc, #24]	; (1c70 <vPortSetupTimerInterrupt+0x2c>)
    1c56:	4798      	blx	r3
    1c58:	3801      	subs	r0, #1
    1c5a:	4b06      	ldr	r3, [pc, #24]	; (1c74 <vPortSetupTimerInterrupt+0x30>)
    1c5c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1c5e:	2207      	movs	r2, #7
    1c60:	4b05      	ldr	r3, [pc, #20]	; (1c78 <vPortSetupTimerInterrupt+0x34>)
    1c62:	601a      	str	r2, [r3, #0]
}
    1c64:	bd08      	pop	{r3, pc}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	e000e018 	.word	0xe000e018
    1c6c:	0000175d 	.word	0x0000175d
    1c70:	00003c35 	.word	0x00003c35
    1c74:	e000e014 	.word	0xe000e014
    1c78:	e000e010 	.word	0xe000e010

00001c7c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    1c7c:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    1c7e:	4b0a      	ldr	r3, [pc, #40]	; (1ca8 <xPortStartScheduler+0x2c>)
    1c80:	6819      	ldr	r1, [r3, #0]
    1c82:	22ff      	movs	r2, #255	; 0xff
    1c84:	0412      	lsls	r2, r2, #16
    1c86:	430a      	orrs	r2, r1
    1c88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    1c8a:	6819      	ldr	r1, [r3, #0]
    1c8c:	22ff      	movs	r2, #255	; 0xff
    1c8e:	0612      	lsls	r2, r2, #24
    1c90:	430a      	orrs	r2, r1
    1c92:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    1c94:	4b05      	ldr	r3, [pc, #20]	; (1cac <xPortStartScheduler+0x30>)
    1c96:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    1c98:	2200      	movs	r2, #0
    1c9a:	4b05      	ldr	r3, [pc, #20]	; (1cb0 <xPortStartScheduler+0x34>)
    1c9c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    1c9e:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <xPortStartScheduler+0x38>)
    1ca0:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    1ca2:	4b05      	ldr	r3, [pc, #20]	; (1cb8 <xPortStartScheduler+0x3c>)
    1ca4:	4798      	blx	r3
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	e000ed20 	.word	0xe000ed20
    1cac:	00001c45 	.word	0x00001c45
    1cb0:	20000010 	.word	0x20000010
    1cb4:	00001b29 	.word	0x00001b29
    1cb8:	00001b15 	.word	0x00001b15

00001cbc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1cbc:	b538      	push	{r3, r4, r5, lr}
    1cbe:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1cc0:	0743      	lsls	r3, r0, #29
    1cc2:	d002      	beq.n	1cca <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1cc4:	2307      	movs	r3, #7
    1cc6:	439c      	bics	r4, r3
    1cc8:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    1cca:	4b10      	ldr	r3, [pc, #64]	; (1d0c <pvPortMalloc+0x50>)
    1ccc:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1cce:	4b10      	ldr	r3, [pc, #64]	; (1d10 <pvPortMalloc+0x54>)
    1cd0:	681b      	ldr	r3, [r3, #0]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d105      	bne.n	1ce2 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1cd6:	2307      	movs	r3, #7
    1cd8:	4a0e      	ldr	r2, [pc, #56]	; (1d14 <pvPortMalloc+0x58>)
    1cda:	3208      	adds	r2, #8
    1cdc:	439a      	bics	r2, r3
    1cde:	4b0c      	ldr	r3, [pc, #48]	; (1d10 <pvPortMalloc+0x54>)
    1ce0:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1ce2:	4b0d      	ldr	r3, [pc, #52]	; (1d18 <pvPortMalloc+0x5c>)
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	18e4      	adds	r4, r4, r3
    1ce8:	4a0c      	ldr	r2, [pc, #48]	; (1d1c <pvPortMalloc+0x60>)
    1cea:	4294      	cmp	r4, r2
    1cec:	d807      	bhi.n	1cfe <pvPortMalloc+0x42>
    1cee:	42a3      	cmp	r3, r4
    1cf0:	d207      	bcs.n	1d02 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1cf2:	4a07      	ldr	r2, [pc, #28]	; (1d10 <pvPortMalloc+0x54>)
    1cf4:	6815      	ldr	r5, [r2, #0]
    1cf6:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    1cf8:	4b07      	ldr	r3, [pc, #28]	; (1d18 <pvPortMalloc+0x5c>)
    1cfa:	601c      	str	r4, [r3, #0]
    1cfc:	e002      	b.n	1d04 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1cfe:	2500      	movs	r5, #0
    1d00:	e000      	b.n	1d04 <pvPortMalloc+0x48>
    1d02:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1d04:	4b06      	ldr	r3, [pc, #24]	; (1d20 <pvPortMalloc+0x64>)
    1d06:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    1d08:	1c28      	adds	r0, r5, #0
    1d0a:	bd38      	pop	{r3, r4, r5, pc}
    1d0c:	00002791 	.word	0x00002791
    1d10:	20003b80 	.word	0x20003b80
    1d14:	200000e8 	.word	0x200000e8
    1d18:	200000e4 	.word	0x200000e4
    1d1c:	00003a8f 	.word	0x00003a8f
    1d20:	000028ed 	.word	0x000028ed

00001d24 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1d24:	2800      	cmp	r0, #0
    1d26:	d001      	beq.n	1d2c <vPortFree+0x8>
    1d28:	b672      	cpsid	i
    1d2a:	e7fe      	b.n	1d2a <vPortFree+0x6>
}
    1d2c:	4770      	bx	lr
    1d2e:	46c0      	nop			; (mov r8, r8)

00001d30 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1d30:	b538      	push	{r3, r4, r5, lr}
    1d32:	1c04      	adds	r4, r0, #0
    1d34:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1d36:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1d38:	2a00      	cmp	r2, #0
    1d3a:	d108      	bne.n	1d4e <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1d3c:	6801      	ldr	r1, [r0, #0]
    1d3e:	2900      	cmp	r1, #0
    1d40:	d12a      	bne.n	1d98 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1d42:	6840      	ldr	r0, [r0, #4]
    1d44:	4b16      	ldr	r3, [pc, #88]	; (1da0 <prvCopyDataToQueue+0x70>)
    1d46:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1d48:	2300      	movs	r3, #0
    1d4a:	6063      	str	r3, [r4, #4]
    1d4c:	e024      	b.n	1d98 <prvCopyDataToQueue+0x68>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1d4e:	2d00      	cmp	r5, #0
    1d50:	d10c      	bne.n	1d6c <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1d52:	6880      	ldr	r0, [r0, #8]
    1d54:	4b13      	ldr	r3, [pc, #76]	; (1da4 <prvCopyDataToQueue+0x74>)
    1d56:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1d58:	68a2      	ldr	r2, [r4, #8]
    1d5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1d5c:	1853      	adds	r3, r2, r1
    1d5e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1d60:	6862      	ldr	r2, [r4, #4]
    1d62:	4293      	cmp	r3, r2
    1d64:	d318      	bcc.n	1d98 <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1d66:	6823      	ldr	r3, [r4, #0]
    1d68:	60a3      	str	r3, [r4, #8]
    1d6a:	e015      	b.n	1d98 <prvCopyDataToQueue+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d6c:	68c0      	ldr	r0, [r0, #12]
    1d6e:	4b0d      	ldr	r3, [pc, #52]	; (1da4 <prvCopyDataToQueue+0x74>)
    1d70:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1d72:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1d74:	424a      	negs	r2, r1
    1d76:	68e1      	ldr	r1, [r4, #12]
    1d78:	188b      	adds	r3, r1, r2
    1d7a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1d7c:	6821      	ldr	r1, [r4, #0]
    1d7e:	428b      	cmp	r3, r1
    1d80:	d202      	bcs.n	1d88 <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1d82:	6863      	ldr	r3, [r4, #4]
    1d84:	189a      	adds	r2, r3, r2
    1d86:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1d88:	2d02      	cmp	r5, #2
    1d8a:	d105      	bne.n	1d98 <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1d8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d002      	beq.n	1d98 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
    1d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d94:	3b01      	subs	r3, #1
    1d96:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1d98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1d9a:	3301      	adds	r3, #1
    1d9c:	63a3      	str	r3, [r4, #56]	; 0x38
}
    1d9e:	bd38      	pop	{r3, r4, r5, pc}
    1da0:	00002e79 	.word	0x00002e79
    1da4:	00003d65 	.word	0x00003d65

00001da8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    1da8:	b510      	push	{r4, lr}
    1daa:	b082      	sub	sp, #8
    1dac:	9001      	str	r0, [sp, #4]
    1dae:	1c0a      	adds	r2, r1, #0
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    1db0:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    1db2:	2c00      	cmp	r4, #0
    1db4:	d101      	bne.n	1dba <prvNotifyQueueSetContainer+0x12>
    1db6:	b672      	cpsid	i
    1db8:	e7fe      	b.n	1db8 <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    1dba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1dbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1dbe:	4299      	cmp	r1, r3
    1dc0:	d301      	bcc.n	1dc6 <prvNotifyQueueSetContainer+0x1e>
    1dc2:	b672      	cpsid	i
    1dc4:	e7fe      	b.n	1dc4 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1dc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1dc8:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    1dca:	428b      	cmp	r3, r1
    1dcc:	d90d      	bls.n	1dea <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    1dce:	1c20      	adds	r0, r4, #0
    1dd0:	a901      	add	r1, sp, #4
    1dd2:	4b07      	ldr	r3, [pc, #28]	; (1df0 <prvNotifyQueueSetContainer+0x48>)
    1dd4:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1dd6:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    1dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d005      	beq.n	1dea <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    1dde:	1c20      	adds	r0, r4, #0
    1de0:	3024      	adds	r0, #36	; 0x24
    1de2:	4b04      	ldr	r3, [pc, #16]	; (1df4 <prvNotifyQueueSetContainer+0x4c>)
    1de4:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
    1de6:	1e43      	subs	r3, r0, #1
    1de8:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1dea:	b002      	add	sp, #8
    1dec:	bd10      	pop	{r4, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	00001d31 	.word	0x00001d31
    1df4:	00002ca9 	.word	0x00002ca9

00001df8 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1df8:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1dfa:	6804      	ldr	r4, [r0, #0]
    1dfc:	2c00      	cmp	r4, #0
    1dfe:	d00c      	beq.n	1e1a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1e00:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1e02:	68c5      	ldr	r5, [r0, #12]
    1e04:	18ab      	adds	r3, r5, r2
    1e06:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1e08:	6845      	ldr	r5, [r0, #4]
    1e0a:	42ab      	cmp	r3, r5
    1e0c:	d300      	bcc.n	1e10 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1e0e:	60c4      	str	r4, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1e10:	68c3      	ldr	r3, [r0, #12]
    1e12:	1c08      	adds	r0, r1, #0
    1e14:	1c19      	adds	r1, r3, #0
    1e16:	4b01      	ldr	r3, [pc, #4]	; (1e1c <prvCopyDataFromQueue+0x24>)
    1e18:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1e1a:	bd38      	pop	{r3, r4, r5, pc}
    1e1c:	00003d65 	.word	0x00003d65

00001e20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e22:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1e24:	4b23      	ldr	r3, [pc, #140]	; (1eb4 <prvUnlockQueue+0x94>)
    1e26:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1e28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	dd1c      	ble.n	1e68 <prvUnlockQueue+0x48>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1e2e:	4e22      	ldr	r6, [pc, #136]	; (1eb8 <prvUnlockQueue+0x98>)
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1e30:	4d22      	ldr	r5, [pc, #136]	; (1ebc <prvUnlockQueue+0x9c>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    1e32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1e34:	2b00      	cmp	r3, #0
    1e36:	d007      	beq.n	1e48 <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
    1e38:	1c20      	adds	r0, r4, #0
    1e3a:	2100      	movs	r1, #0
    1e3c:	47a8      	blx	r5
    1e3e:	2801      	cmp	r0, #1
    1e40:	d10c      	bne.n	1e5c <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    1e42:	4b1f      	ldr	r3, [pc, #124]	; (1ec0 <prvUnlockQueue+0xa0>)
    1e44:	4798      	blx	r3
    1e46:	e009      	b.n	1e5c <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d00c      	beq.n	1e68 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1e4e:	1c20      	adds	r0, r4, #0
    1e50:	3024      	adds	r0, #36	; 0x24
    1e52:	47b0      	blx	r6
    1e54:	2800      	cmp	r0, #0
    1e56:	d001      	beq.n	1e5c <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    1e58:	4b19      	ldr	r3, [pc, #100]	; (1ec0 <prvUnlockQueue+0xa0>)
    1e5a:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    1e5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e5e:	3b01      	subs	r3, #1
    1e60:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1e62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e64:	2b00      	cmp	r3, #0
    1e66:	dce4      	bgt.n	1e32 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1e68:	2301      	movs	r3, #1
    1e6a:	425b      	negs	r3, r3
    1e6c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    1e6e:	4b15      	ldr	r3, [pc, #84]	; (1ec4 <prvUnlockQueue+0xa4>)
    1e70:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1e72:	4b10      	ldr	r3, [pc, #64]	; (1eb4 <prvUnlockQueue+0x94>)
    1e74:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1e76:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1e78:	2b00      	cmp	r3, #0
    1e7a:	dd15      	ble.n	1ea8 <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e7c:	6923      	ldr	r3, [r4, #16]
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d012      	beq.n	1ea8 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1e82:	1c27      	adds	r7, r4, #0
    1e84:	3710      	adds	r7, #16
    1e86:	4e0c      	ldr	r6, [pc, #48]	; (1eb8 <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
    1e88:	4d0d      	ldr	r5, [pc, #52]	; (1ec0 <prvUnlockQueue+0xa0>)
    1e8a:	e002      	b.n	1e92 <prvUnlockQueue+0x72>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e8c:	6923      	ldr	r3, [r4, #16]
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d00a      	beq.n	1ea8 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1e92:	1c38      	adds	r0, r7, #0
    1e94:	47b0      	blx	r6
    1e96:	2800      	cmp	r0, #0
    1e98:	d000      	beq.n	1e9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    1e9a:	47a8      	blx	r5
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
    1e9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1e9e:	3b01      	subs	r3, #1
    1ea0:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	dcf1      	bgt.n	1e8c <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1ea8:	2301      	movs	r3, #1
    1eaa:	425b      	negs	r3, r3
    1eac:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    1eae:	4b05      	ldr	r3, [pc, #20]	; (1ec4 <prvUnlockQueue+0xa4>)
    1eb0:	4798      	blx	r3
}
    1eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1eb4:	00001b85 	.word	0x00001b85
    1eb8:	00002ca9 	.word	0x00002ca9
    1ebc:	00001da9 	.word	0x00001da9
    1ec0:	00002dc1 	.word	0x00002dc1
    1ec4:	00001b9d 	.word	0x00001b9d

00001ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1ec8:	b538      	push	{r3, r4, r5, lr}
    1eca:	1c04      	adds	r4, r0, #0
    1ecc:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1ece:	2800      	cmp	r0, #0
    1ed0:	d101      	bne.n	1ed6 <xQueueGenericReset+0xe>
    1ed2:	b672      	cpsid	i
    1ed4:	e7fe      	b.n	1ed4 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
    1ed6:	4b15      	ldr	r3, [pc, #84]	; (1f2c <xQueueGenericReset+0x64>)
    1ed8:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1eda:	6823      	ldr	r3, [r4, #0]
    1edc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1ede:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    1ee0:	4350      	muls	r0, r2
    1ee2:	1819      	adds	r1, r3, r0
    1ee4:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1ee6:	2100      	movs	r1, #0
    1ee8:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1eea:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1eec:	1a82      	subs	r2, r0, r2
    1eee:	189b      	adds	r3, r3, r2
    1ef0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    1ef2:	2301      	movs	r3, #1
    1ef4:	425b      	negs	r3, r3
    1ef6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    1ef8:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    1efa:	2d00      	cmp	r5, #0
    1efc:	d10b      	bne.n	1f16 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1efe:	6921      	ldr	r1, [r4, #16]
    1f00:	2900      	cmp	r1, #0
    1f02:	d00f      	beq.n	1f24 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1f04:	1c20      	adds	r0, r4, #0
    1f06:	3010      	adds	r0, #16
    1f08:	4b09      	ldr	r3, [pc, #36]	; (1f30 <xQueueGenericReset+0x68>)
    1f0a:	4798      	blx	r3
    1f0c:	2801      	cmp	r0, #1
    1f0e:	d109      	bne.n	1f24 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1f10:	4b08      	ldr	r3, [pc, #32]	; (1f34 <xQueueGenericReset+0x6c>)
    1f12:	4798      	blx	r3
    1f14:	e006      	b.n	1f24 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1f16:	1c20      	adds	r0, r4, #0
    1f18:	3010      	adds	r0, #16
    1f1a:	4d07      	ldr	r5, [pc, #28]	; (1f38 <xQueueGenericReset+0x70>)
    1f1c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1f1e:	1c20      	adds	r0, r4, #0
    1f20:	3024      	adds	r0, #36	; 0x24
    1f22:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    1f24:	4b05      	ldr	r3, [pc, #20]	; (1f3c <xQueueGenericReset+0x74>)
    1f26:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1f28:	2001      	movs	r0, #1
    1f2a:	bd38      	pop	{r3, r4, r5, pc}
    1f2c:	00001b85 	.word	0x00001b85
    1f30:	00002ca9 	.word	0x00002ca9
    1f34:	00001b6d 	.word	0x00001b6d
    1f38:	00001a89 	.word	0x00001a89
    1f3c:	00001b9d 	.word	0x00001b9d

00001f40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
    1f40:	b570      	push	{r4, r5, r6, lr}
    1f42:	1c05      	adds	r5, r0, #0
    1f44:	1c0e      	adds	r6, r1, #0
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
    1f46:	2800      	cmp	r0, #0
    1f48:	d011      	beq.n	1f6e <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    1f4a:	2050      	movs	r0, #80	; 0x50
    1f4c:	4b0e      	ldr	r3, [pc, #56]	; (1f88 <xQueueGenericCreate+0x48>)
    1f4e:	4798      	blx	r3
    1f50:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1f52:	d00c      	beq.n	1f6e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f54:	1c30      	adds	r0, r6, #0
    1f56:	4368      	muls	r0, r5
    1f58:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
    1f5a:	4b0b      	ldr	r3, [pc, #44]	; (1f88 <xQueueGenericCreate+0x48>)
    1f5c:	4798      	blx	r3
    1f5e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    1f60:	2800      	cmp	r0, #0
    1f62:	d106      	bne.n	1f72 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    1f64:	1c20      	adds	r0, r4, #0
    1f66:	4b09      	ldr	r3, [pc, #36]	; (1f8c <xQueueGenericCreate+0x4c>)
    1f68:	4798      	blx	r3
    1f6a:	e000      	b.n	1f6e <xQueueGenericCreate+0x2e>
    1f6c:	e7fe      	b.n	1f6c <xQueueGenericCreate+0x2c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    1f6e:	b672      	cpsid	i
    1f70:	e7fc      	b.n	1f6c <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    1f72:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    1f74:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1f76:	1c20      	adds	r0, r4, #0
    1f78:	2101      	movs	r1, #1
    1f7a:	4b05      	ldr	r3, [pc, #20]	; (1f90 <xQueueGenericCreate+0x50>)
    1f7c:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
    1f7e:	2300      	movs	r3, #0
    1f80:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
    1f82:	1c20      	adds	r0, r4, #0
    1f84:	bd70      	pop	{r4, r5, r6, pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	00001cbd 	.word	0x00001cbd
    1f8c:	00001d25 	.word	0x00001d25
    1f90:	00001ec9 	.word	0x00001ec9

00001f94 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f96:	4657      	mov	r7, sl
    1f98:	464e      	mov	r6, r9
    1f9a:	4645      	mov	r5, r8
    1f9c:	b4e0      	push	{r5, r6, r7}
    1f9e:	b084      	sub	sp, #16
    1fa0:	1c04      	adds	r4, r0, #0
    1fa2:	1c0e      	adds	r6, r1, #0
    1fa4:	9201      	str	r2, [sp, #4]
    1fa6:	1c1d      	adds	r5, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    1fa8:	2800      	cmp	r0, #0
    1faa:	d101      	bne.n	1fb0 <xQueueGenericSend+0x1c>
    1fac:	b672      	cpsid	i
    1fae:	e7fe      	b.n	1fae <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    1fb0:	2900      	cmp	r1, #0
    1fb2:	d104      	bne.n	1fbe <xQueueGenericSend+0x2a>
    1fb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1fb6:	2a00      	cmp	r2, #0
    1fb8:	d001      	beq.n	1fbe <xQueueGenericSend+0x2a>
    1fba:	b672      	cpsid	i
    1fbc:	e7fe      	b.n	1fbc <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    1fbe:	2d02      	cmp	r5, #2
    1fc0:	d104      	bne.n	1fcc <xQueueGenericSend+0x38>
    1fc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1fc4:	2b01      	cmp	r3, #1
    1fc6:	d001      	beq.n	1fcc <xQueueGenericSend+0x38>
    1fc8:	b672      	cpsid	i
    1fca:	e7fe      	b.n	1fca <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1fcc:	4b41      	ldr	r3, [pc, #260]	; (20d4 <STACK_SIZE+0xd4>)
    1fce:	4798      	blx	r3
    1fd0:	2800      	cmp	r0, #0
    1fd2:	d102      	bne.n	1fda <xQueueGenericSend+0x46>
    1fd4:	9a01      	ldr	r2, [sp, #4]
    1fd6:	2a00      	cmp	r2, #0
    1fd8:	d103      	bne.n	1fe2 <xQueueGenericSend+0x4e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1fda:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1fdc:	4b3e      	ldr	r3, [pc, #248]	; (20d8 <STACK_SIZE+0xd8>)
    1fde:	4698      	mov	r8, r3
    1fe0:	e001      	b.n	1fe6 <xQueueGenericSend+0x52>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    1fe2:	b672      	cpsid	i
    1fe4:	e7fe      	b.n	1fe4 <xQueueGenericSend+0x50>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1fe6:	47c0      	blx	r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1fe8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1fea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1fec:	4293      	cmp	r3, r2
    1fee:	d301      	bcc.n	1ff4 <xQueueGenericSend+0x60>
    1ff0:	2d02      	cmp	r5, #2
    1ff2:	d11f      	bne.n	2034 <STACK_SIZE+0x34>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1ff4:	1c20      	adds	r0, r4, #0
    1ff6:	1c31      	adds	r1, r6, #0
    1ff8:	1c2a      	adds	r2, r5, #0
    1ffa:	4b38      	ldr	r3, [pc, #224]	; (20dc <STACK_SIZE+0xdc>)
    1ffc:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    1ffe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2000:	2b00      	cmp	r3, #0
    2002:	d008      	beq.n	2016 <STACK_SIZE+0x16>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    2004:	1c20      	adds	r0, r4, #0
    2006:	1c29      	adds	r1, r5, #0
    2008:	4b35      	ldr	r3, [pc, #212]	; (20e0 <STACK_SIZE+0xe0>)
    200a:	4798      	blx	r3
    200c:	2801      	cmp	r0, #1
    200e:	d10d      	bne.n	202c <STACK_SIZE+0x2c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    2010:	4b34      	ldr	r3, [pc, #208]	; (20e4 <STACK_SIZE+0xe4>)
    2012:	4798      	blx	r3
    2014:	e00a      	b.n	202c <STACK_SIZE+0x2c>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2016:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2018:	2a00      	cmp	r2, #0
    201a:	d007      	beq.n	202c <STACK_SIZE+0x2c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    201c:	1c20      	adds	r0, r4, #0
    201e:	3024      	adds	r0, #36	; 0x24
    2020:	4b31      	ldr	r3, [pc, #196]	; (20e8 <STACK_SIZE+0xe8>)
    2022:	4798      	blx	r3
    2024:	2801      	cmp	r0, #1
    2026:	d101      	bne.n	202c <STACK_SIZE+0x2c>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    2028:	4b2e      	ldr	r3, [pc, #184]	; (20e4 <STACK_SIZE+0xe4>)
    202a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    202c:	4b2f      	ldr	r3, [pc, #188]	; (20ec <STACK_SIZE+0xec>)
    202e:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2030:	2001      	movs	r0, #1
    2032:	e049      	b.n	20c8 <STACK_SIZE+0xc8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2034:	9b01      	ldr	r3, [sp, #4]
    2036:	2b00      	cmp	r3, #0
    2038:	d103      	bne.n	2042 <STACK_SIZE+0x42>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    203a:	4b2c      	ldr	r3, [pc, #176]	; (20ec <STACK_SIZE+0xec>)
    203c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    203e:	2000      	movs	r0, #0
    2040:	e042      	b.n	20c8 <STACK_SIZE+0xc8>
				}
				else if( xEntryTimeSet == pdFALSE )
    2042:	2f00      	cmp	r7, #0
    2044:	d103      	bne.n	204e <STACK_SIZE+0x4e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2046:	a802      	add	r0, sp, #8
    2048:	4a29      	ldr	r2, [pc, #164]	; (20f0 <STACK_SIZE+0xf0>)
    204a:	4790      	blx	r2
					xEntryTimeSet = pdTRUE;
    204c:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    204e:	4b27      	ldr	r3, [pc, #156]	; (20ec <STACK_SIZE+0xec>)
    2050:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2052:	4b28      	ldr	r3, [pc, #160]	; (20f4 <STACK_SIZE+0xf4>)
    2054:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2056:	4b20      	ldr	r3, [pc, #128]	; (20d8 <STACK_SIZE+0xd8>)
    2058:	4798      	blx	r3
    205a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    205c:	3301      	adds	r3, #1
    205e:	d101      	bne.n	2064 <STACK_SIZE+0x64>
    2060:	2300      	movs	r3, #0
    2062:	6463      	str	r3, [r4, #68]	; 0x44
    2064:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2066:	3301      	adds	r3, #1
    2068:	d101      	bne.n	206e <STACK_SIZE+0x6e>
    206a:	2300      	movs	r3, #0
    206c:	64a3      	str	r3, [r4, #72]	; 0x48
    206e:	4b1f      	ldr	r3, [pc, #124]	; (20ec <STACK_SIZE+0xec>)
    2070:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2072:	a802      	add	r0, sp, #8
    2074:	a901      	add	r1, sp, #4
    2076:	4b20      	ldr	r3, [pc, #128]	; (20f8 <STACK_SIZE+0xf8>)
    2078:	4798      	blx	r3
    207a:	2800      	cmp	r0, #0
    207c:	d11e      	bne.n	20bc <STACK_SIZE+0xbc>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    207e:	4b16      	ldr	r3, [pc, #88]	; (20d8 <STACK_SIZE+0xd8>)
    2080:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2082:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2084:	4692      	mov	sl, r2
    2086:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2088:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    208a:	4b18      	ldr	r3, [pc, #96]	; (20ec <STACK_SIZE+0xec>)
    208c:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    208e:	45ca      	cmp	sl, r9
    2090:	d10e      	bne.n	20b0 <STACK_SIZE+0xb0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2092:	1c20      	adds	r0, r4, #0
    2094:	3010      	adds	r0, #16
    2096:	9901      	ldr	r1, [sp, #4]
    2098:	4b18      	ldr	r3, [pc, #96]	; (20fc <STACK_SIZE+0xfc>)
    209a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    209c:	1c20      	adds	r0, r4, #0
    209e:	4b18      	ldr	r3, [pc, #96]	; (2100 <STACK_SIZE+0x100>)
    20a0:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    20a2:	4b18      	ldr	r3, [pc, #96]	; (2104 <STACK_SIZE+0x104>)
    20a4:	4798      	blx	r3
    20a6:	2800      	cmp	r0, #0
    20a8:	d19d      	bne.n	1fe6 <xQueueGenericSend+0x52>
				{
					portYIELD_WITHIN_API();
    20aa:	4b0e      	ldr	r3, [pc, #56]	; (20e4 <STACK_SIZE+0xe4>)
    20ac:	4798      	blx	r3
    20ae:	e79a      	b.n	1fe6 <xQueueGenericSend+0x52>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    20b0:	1c20      	adds	r0, r4, #0
    20b2:	4b13      	ldr	r3, [pc, #76]	; (2100 <STACK_SIZE+0x100>)
    20b4:	4798      	blx	r3
				( void ) xTaskResumeAll();
    20b6:	4b13      	ldr	r3, [pc, #76]	; (2104 <STACK_SIZE+0x104>)
    20b8:	4798      	blx	r3
    20ba:	e794      	b.n	1fe6 <xQueueGenericSend+0x52>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    20bc:	1c20      	adds	r0, r4, #0
    20be:	4b10      	ldr	r3, [pc, #64]	; (2100 <STACK_SIZE+0x100>)
    20c0:	4798      	blx	r3
			( void ) xTaskResumeAll();
    20c2:	4b10      	ldr	r3, [pc, #64]	; (2104 <STACK_SIZE+0x104>)
    20c4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    20c6:	2000      	movs	r0, #0
		}
	}
}
    20c8:	b004      	add	sp, #16
    20ca:	bc1c      	pop	{r2, r3, r4}
    20cc:	4690      	mov	r8, r2
    20ce:	4699      	mov	r9, r3
    20d0:	46a2      	mov	sl, r4
    20d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20d4:	00002dd9 	.word	0x00002dd9
    20d8:	00001b85 	.word	0x00001b85
    20dc:	00001d31 	.word	0x00001d31
    20e0:	00001da9 	.word	0x00001da9
    20e4:	00001b6d 	.word	0x00001b6d
    20e8:	00002ca9 	.word	0x00002ca9
    20ec:	00001b9d 	.word	0x00001b9d
    20f0:	00002d31 	.word	0x00002d31
    20f4:	00002791 	.word	0x00002791
    20f8:	00002d51 	.word	0x00002d51
    20fc:	00002c11 	.word	0x00002c11
    2100:	00001e21 	.word	0x00001e21
    2104:	000028ed 	.word	0x000028ed

00002108 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    2108:	b538      	push	{r3, r4, r5, lr}
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
    210a:	2050      	movs	r0, #80	; 0x50
    210c:	4b11      	ldr	r3, [pc, #68]	; (2154 <xQueueCreateMutex+0x4c>)
    210e:	4798      	blx	r3
    2110:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    2112:	d001      	beq.n	2118 <xQueueCreateMutex+0x10>
    2114:	e002      	b.n	211c <xQueueCreateMutex+0x14>
    2116:	e7fe      	b.n	2116 <xQueueCreateMutex+0xe>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
    2118:	b672      	cpsid	i
    211a:	e7fc      	b.n	2116 <xQueueCreateMutex+0xe>
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    211c:	2300      	movs	r3, #0
    211e:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2120:	6003      	str	r3, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2122:	6083      	str	r3, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
    2124:	60c3      	str	r3, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2126:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
    2128:	2201      	movs	r2, #1
    212a:	63c2      	str	r2, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
    212c:	6403      	str	r3, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    212e:	4252      	negs	r2, r2
    2130:	6442      	str	r2, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2132:	6482      	str	r2, [r0, #72]	; 0x48
			}
			#endif

			#if ( configUSE_QUEUE_SETS == 1 )
			{
				pxNewQueue->pxQueueSetContainer = NULL;
    2134:	64c3      	str	r3, [r0, #76]	; 0x4c
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2136:	3010      	adds	r0, #16
    2138:	4d07      	ldr	r5, [pc, #28]	; (2158 <xQueueCreateMutex+0x50>)
    213a:	47a8      	blx	r5
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    213c:	1c20      	adds	r0, r4, #0
    213e:	3024      	adds	r0, #36	; 0x24
    2140:	47a8      	blx	r5

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    2142:	1c20      	adds	r0, r4, #0
    2144:	2100      	movs	r1, #0
    2146:	2200      	movs	r2, #0
    2148:	2300      	movs	r3, #0
    214a:	4d04      	ldr	r5, [pc, #16]	; (215c <xQueueCreateMutex+0x54>)
    214c:	47a8      	blx	r5
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    214e:	1c20      	adds	r0, r4, #0
    2150:	bd38      	pop	{r3, r4, r5, pc}
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	00001cbd 	.word	0x00001cbd
    2158:	00001a89 	.word	0x00001a89
    215c:	00001f95 	.word	0x00001f95

00002160 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2160:	b5f0      	push	{r4, r5, r6, r7, lr}
    2162:	4647      	mov	r7, r8
    2164:	b480      	push	{r7}
    2166:	1c04      	adds	r4, r0, #0
    2168:	4688      	mov	r8, r1
    216a:	1c16      	adds	r6, r2, #0
    216c:	1c1d      	adds	r5, r3, #0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    216e:	2800      	cmp	r0, #0
    2170:	d101      	bne.n	2176 <xQueueGenericSendFromISR+0x16>
    2172:	b672      	cpsid	i
    2174:	e7fe      	b.n	2174 <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2176:	2900      	cmp	r1, #0
    2178:	d104      	bne.n	2184 <xQueueGenericSendFromISR+0x24>
    217a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    217c:	2b00      	cmp	r3, #0
    217e:	d001      	beq.n	2184 <xQueueGenericSendFromISR+0x24>
    2180:	b672      	cpsid	i
    2182:	e7fe      	b.n	2182 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2184:	2d02      	cmp	r5, #2
    2186:	d133      	bne.n	21f0 <xQueueGenericSendFromISR+0x90>
    2188:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    218a:	2a01      	cmp	r2, #1
    218c:	d039      	beq.n	2202 <xQueueGenericSendFromISR+0xa2>
    218e:	b672      	cpsid	i
    2190:	e7fe      	b.n	2190 <xQueueGenericSendFromISR+0x30>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2192:	1c20      	adds	r0, r4, #0
    2194:	4641      	mov	r1, r8
    2196:	1c2a      	adds	r2, r5, #0
    2198:	4b20      	ldr	r3, [pc, #128]	; (221c <xQueueGenericSendFromISR+0xbc>)
    219a:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    219c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    219e:	3301      	adds	r3, #1
    21a0:	d11d      	bne.n	21de <xQueueGenericSendFromISR+0x7e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    21a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    21a4:	2b00      	cmp	r3, #0
    21a6:	d00b      	beq.n	21c0 <xQueueGenericSendFromISR+0x60>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    21a8:	1c20      	adds	r0, r4, #0
    21aa:	1c29      	adds	r1, r5, #0
    21ac:	4b1c      	ldr	r3, [pc, #112]	; (2220 <xQueueGenericSendFromISR+0xc0>)
    21ae:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    21b0:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
    21b2:	2801      	cmp	r0, #1
    21b4:	d12a      	bne.n	220c <xQueueGenericSendFromISR+0xac>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    21b6:	2e00      	cmp	r6, #0
    21b8:	d016      	beq.n	21e8 <xQueueGenericSendFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    21ba:	2301      	movs	r3, #1
    21bc:	6033      	str	r3, [r6, #0]
    21be:	e025      	b.n	220c <xQueueGenericSendFromISR+0xac>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    21c0:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    21c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    21c4:	2a00      	cmp	r2, #0
    21c6:	d021      	beq.n	220c <xQueueGenericSendFromISR+0xac>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    21c8:	1c20      	adds	r0, r4, #0
    21ca:	3024      	adds	r0, #36	; 0x24
    21cc:	4b15      	ldr	r3, [pc, #84]	; (2224 <xQueueGenericSendFromISR+0xc4>)
    21ce:	4798      	blx	r3
    21d0:	2800      	cmp	r0, #0
    21d2:	d01b      	beq.n	220c <xQueueGenericSendFromISR+0xac>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    21d4:	2e00      	cmp	r6, #0
    21d6:	d009      	beq.n	21ec <xQueueGenericSendFromISR+0x8c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    21d8:	2301      	movs	r3, #1
    21da:	6033      	str	r3, [r6, #0]
    21dc:	e016      	b.n	220c <xQueueGenericSendFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    21de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    21e0:	3301      	adds	r3, #1
    21e2:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    21e4:	2501      	movs	r5, #1
    21e6:	e011      	b.n	220c <xQueueGenericSendFromISR+0xac>
    21e8:	2501      	movs	r5, #1
    21ea:	e00f      	b.n	220c <xQueueGenericSendFromISR+0xac>
    21ec:	2501      	movs	r5, #1
    21ee:	e00d      	b.n	220c <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    21f0:	4b0d      	ldr	r3, [pc, #52]	; (2228 <xQueueGenericSendFromISR+0xc8>)
    21f2:	4798      	blx	r3
    21f4:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    21f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    21f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    21fa:	4293      	cmp	r3, r2
    21fc:	d3c9      	bcc.n	2192 <xQueueGenericSendFromISR+0x32>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    21fe:	2500      	movs	r5, #0
    2200:	e004      	b.n	220c <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2202:	4b09      	ldr	r3, [pc, #36]	; (2228 <xQueueGenericSendFromISR+0xc8>)
    2204:	4798      	blx	r3
    2206:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2208:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    220a:	e7c2      	b.n	2192 <xQueueGenericSendFromISR+0x32>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    220c:	1c38      	adds	r0, r7, #0
    220e:	4b07      	ldr	r3, [pc, #28]	; (222c <xQueueGenericSendFromISR+0xcc>)
    2210:	4798      	blx	r3

	return xReturn;
}
    2212:	1c28      	adds	r0, r5, #0
    2214:	bc04      	pop	{r2}
    2216:	4690      	mov	r8, r2
    2218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	00001d31 	.word	0x00001d31
    2220:	00001da9 	.word	0x00001da9
    2224:	00002ca9 	.word	0x00002ca9
    2228:	00001bbd 	.word	0x00001bbd
    222c:	00001bc9 	.word	0x00001bc9

00002230 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2230:	b5f0      	push	{r4, r5, r6, r7, lr}
    2232:	464f      	mov	r7, r9
    2234:	4646      	mov	r6, r8
    2236:	b4c0      	push	{r6, r7}
    2238:	b085      	sub	sp, #20
    223a:	1c04      	adds	r4, r0, #0
    223c:	1c0d      	adds	r5, r1, #0
    223e:	9201      	str	r2, [sp, #4]
    2240:	1c1f      	adds	r7, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
    2242:	2800      	cmp	r0, #0
    2244:	d101      	bne.n	224a <xQueueGenericReceive+0x1a>
    2246:	b672      	cpsid	i
    2248:	e7fe      	b.n	2248 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    224a:	2900      	cmp	r1, #0
    224c:	d104      	bne.n	2258 <xQueueGenericReceive+0x28>
    224e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2250:	2b00      	cmp	r3, #0
    2252:	d001      	beq.n	2258 <xQueueGenericReceive+0x28>
    2254:	b672      	cpsid	i
    2256:	e7fe      	b.n	2256 <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2258:	4b4a      	ldr	r3, [pc, #296]	; (2384 <xQueueGenericReceive+0x154>)
    225a:	4798      	blx	r3
    225c:	2800      	cmp	r0, #0
    225e:	d102      	bne.n	2266 <xQueueGenericReceive+0x36>
    2260:	9b01      	ldr	r3, [sp, #4]
    2262:	2b00      	cmp	r3, #0
    2264:	d103      	bne.n	226e <xQueueGenericReceive+0x3e>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2266:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2268:	4b47      	ldr	r3, [pc, #284]	; (2388 <xQueueGenericReceive+0x158>)
    226a:	4698      	mov	r8, r3
    226c:	e001      	b.n	2272 <xQueueGenericReceive+0x42>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    226e:	b672      	cpsid	i
    2270:	e7fe      	b.n	2270 <xQueueGenericReceive+0x40>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2272:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2274:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2276:	2b00      	cmp	r3, #0
    2278:	d02b      	beq.n	22d2 <xQueueGenericReceive+0xa2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    227a:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    227c:	1c20      	adds	r0, r4, #0
    227e:	1c29      	adds	r1, r5, #0
    2280:	4b42      	ldr	r3, [pc, #264]	; (238c <xQueueGenericReceive+0x15c>)
    2282:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    2284:	2f00      	cmp	r7, #0
    2286:	d114      	bne.n	22b2 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    2288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    228a:	3b01      	subs	r3, #1
    228c:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    228e:	6823      	ldr	r3, [r4, #0]
    2290:	2b00      	cmp	r3, #0
    2292:	d102      	bne.n	229a <xQueueGenericReceive+0x6a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    2294:	4b3e      	ldr	r3, [pc, #248]	; (2390 <xQueueGenericReceive+0x160>)
    2296:	4798      	blx	r3
    2298:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    229a:	6923      	ldr	r3, [r4, #16]
    229c:	2b00      	cmp	r3, #0
    229e:	d014      	beq.n	22ca <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    22a0:	1c20      	adds	r0, r4, #0
    22a2:	3010      	adds	r0, #16
    22a4:	4b3b      	ldr	r3, [pc, #236]	; (2394 <xQueueGenericReceive+0x164>)
    22a6:	4798      	blx	r3
    22a8:	2801      	cmp	r0, #1
    22aa:	d10e      	bne.n	22ca <xQueueGenericReceive+0x9a>
						{
							queueYIELD_IF_USING_PREEMPTION();
    22ac:	4b3a      	ldr	r3, [pc, #232]	; (2398 <xQueueGenericReceive+0x168>)
    22ae:	4798      	blx	r3
    22b0:	e00b      	b.n	22ca <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    22b2:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    22b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    22b6:	2b00      	cmp	r3, #0
    22b8:	d007      	beq.n	22ca <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    22ba:	1c20      	adds	r0, r4, #0
    22bc:	3024      	adds	r0, #36	; 0x24
    22be:	4b35      	ldr	r3, [pc, #212]	; (2394 <xQueueGenericReceive+0x164>)
    22c0:	4798      	blx	r3
    22c2:	2800      	cmp	r0, #0
    22c4:	d001      	beq.n	22ca <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    22c6:	4b34      	ldr	r3, [pc, #208]	; (2398 <xQueueGenericReceive+0x168>)
    22c8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    22ca:	4b34      	ldr	r3, [pc, #208]	; (239c <xQueueGenericReceive+0x16c>)
    22cc:	4798      	blx	r3
				return pdPASS;
    22ce:	2001      	movs	r0, #1
    22d0:	e052      	b.n	2378 <xQueueGenericReceive+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    22d2:	9b01      	ldr	r3, [sp, #4]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d103      	bne.n	22e0 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    22d8:	4b30      	ldr	r3, [pc, #192]	; (239c <xQueueGenericReceive+0x16c>)
    22da:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    22dc:	2000      	movs	r0, #0
    22de:	e04b      	b.n	2378 <xQueueGenericReceive+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
    22e0:	2e00      	cmp	r6, #0
    22e2:	d103      	bne.n	22ec <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    22e4:	a802      	add	r0, sp, #8
    22e6:	4b2e      	ldr	r3, [pc, #184]	; (23a0 <xQueueGenericReceive+0x170>)
    22e8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    22ea:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    22ec:	4b2b      	ldr	r3, [pc, #172]	; (239c <xQueueGenericReceive+0x16c>)
    22ee:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    22f0:	4b2c      	ldr	r3, [pc, #176]	; (23a4 <xQueueGenericReceive+0x174>)
    22f2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    22f4:	4b24      	ldr	r3, [pc, #144]	; (2388 <xQueueGenericReceive+0x158>)
    22f6:	4798      	blx	r3
    22f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    22fa:	3301      	adds	r3, #1
    22fc:	d101      	bne.n	2302 <xQueueGenericReceive+0xd2>
    22fe:	2300      	movs	r3, #0
    2300:	6463      	str	r3, [r4, #68]	; 0x44
    2302:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2304:	3301      	adds	r3, #1
    2306:	d101      	bne.n	230c <xQueueGenericReceive+0xdc>
    2308:	2300      	movs	r3, #0
    230a:	64a3      	str	r3, [r4, #72]	; 0x48
    230c:	4b23      	ldr	r3, [pc, #140]	; (239c <xQueueGenericReceive+0x16c>)
    230e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2310:	a802      	add	r0, sp, #8
    2312:	a901      	add	r1, sp, #4
    2314:	4b24      	ldr	r3, [pc, #144]	; (23a8 <xQueueGenericReceive+0x178>)
    2316:	4798      	blx	r3
    2318:	2800      	cmp	r0, #0
    231a:	d127      	bne.n	236c <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    231c:	4b1a      	ldr	r3, [pc, #104]	; (2388 <xQueueGenericReceive+0x158>)
    231e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2322:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2324:	4b1d      	ldr	r3, [pc, #116]	; (239c <xQueueGenericReceive+0x16c>)
    2326:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2328:	464b      	mov	r3, r9
    232a:	2b00      	cmp	r3, #0
    232c:	d118      	bne.n	2360 <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    232e:	6823      	ldr	r3, [r4, #0]
    2330:	2b00      	cmp	r3, #0
    2332:	d106      	bne.n	2342 <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
    2334:	4b14      	ldr	r3, [pc, #80]	; (2388 <xQueueGenericReceive+0x158>)
    2336:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2338:	6860      	ldr	r0, [r4, #4]
    233a:	4b1c      	ldr	r3, [pc, #112]	; (23ac <xQueueGenericReceive+0x17c>)
    233c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    233e:	4b17      	ldr	r3, [pc, #92]	; (239c <xQueueGenericReceive+0x16c>)
    2340:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2342:	1c20      	adds	r0, r4, #0
    2344:	3024      	adds	r0, #36	; 0x24
    2346:	9901      	ldr	r1, [sp, #4]
    2348:	4b19      	ldr	r3, [pc, #100]	; (23b0 <xQueueGenericReceive+0x180>)
    234a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    234c:	1c20      	adds	r0, r4, #0
    234e:	4b19      	ldr	r3, [pc, #100]	; (23b4 <xQueueGenericReceive+0x184>)
    2350:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2352:	4b19      	ldr	r3, [pc, #100]	; (23b8 <xQueueGenericReceive+0x188>)
    2354:	4798      	blx	r3
    2356:	2800      	cmp	r0, #0
    2358:	d18b      	bne.n	2272 <xQueueGenericReceive+0x42>
				{
					portYIELD_WITHIN_API();
    235a:	4b0f      	ldr	r3, [pc, #60]	; (2398 <xQueueGenericReceive+0x168>)
    235c:	4798      	blx	r3
    235e:	e788      	b.n	2272 <xQueueGenericReceive+0x42>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2360:	1c20      	adds	r0, r4, #0
    2362:	4b14      	ldr	r3, [pc, #80]	; (23b4 <xQueueGenericReceive+0x184>)
    2364:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2366:	4b14      	ldr	r3, [pc, #80]	; (23b8 <xQueueGenericReceive+0x188>)
    2368:	4798      	blx	r3
    236a:	e782      	b.n	2272 <xQueueGenericReceive+0x42>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    236c:	1c20      	adds	r0, r4, #0
    236e:	4b11      	ldr	r3, [pc, #68]	; (23b4 <xQueueGenericReceive+0x184>)
    2370:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2372:	4b11      	ldr	r3, [pc, #68]	; (23b8 <xQueueGenericReceive+0x188>)
    2374:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2376:	2000      	movs	r0, #0
		}
	}
}
    2378:	b005      	add	sp, #20
    237a:	bc0c      	pop	{r2, r3}
    237c:	4690      	mov	r8, r2
    237e:	4699      	mov	r9, r3
    2380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	00002dd9 	.word	0x00002dd9
    2388:	00001b85 	.word	0x00001b85
    238c:	00001df9 	.word	0x00001df9
    2390:	00002dcd 	.word	0x00002dcd
    2394:	00002ca9 	.word	0x00002ca9
    2398:	00001b6d 	.word	0x00001b6d
    239c:	00001b9d 	.word	0x00001b9d
    23a0:	00002d31 	.word	0x00002d31
    23a4:	00002791 	.word	0x00002791
    23a8:	00002d51 	.word	0x00002d51
    23ac:	00002df9 	.word	0x00002df9
    23b0:	00002c11 	.word	0x00002c11
    23b4:	00001e21 	.word	0x00001e21
    23b8:	000028ed 	.word	0x000028ed

000023bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
    23bc:	b538      	push	{r3, r4, r5, lr}
    23be:	1c04      	adds	r4, r0, #0
    23c0:	1c0d      	adds	r5, r1, #0
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    23c2:	4b0d      	ldr	r3, [pc, #52]	; (23f8 <vQueueWaitForMessageRestricted+0x3c>)
    23c4:	4798      	blx	r3
    23c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    23c8:	3301      	adds	r3, #1
    23ca:	d101      	bne.n	23d0 <vQueueWaitForMessageRestricted+0x14>
    23cc:	2300      	movs	r3, #0
    23ce:	6463      	str	r3, [r4, #68]	; 0x44
    23d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    23d2:	3301      	adds	r3, #1
    23d4:	d101      	bne.n	23da <vQueueWaitForMessageRestricted+0x1e>
    23d6:	2300      	movs	r3, #0
    23d8:	64a3      	str	r3, [r4, #72]	; 0x48
    23da:	4b08      	ldr	r3, [pc, #32]	; (23fc <vQueueWaitForMessageRestricted+0x40>)
    23dc:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    23de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    23e0:	2b00      	cmp	r3, #0
    23e2:	d104      	bne.n	23ee <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    23e4:	1c20      	adds	r0, r4, #0
    23e6:	3024      	adds	r0, #36	; 0x24
    23e8:	1c29      	adds	r1, r5, #0
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <vQueueWaitForMessageRestricted+0x44>)
    23ec:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    23ee:	1c20      	adds	r0, r4, #0
    23f0:	4b04      	ldr	r3, [pc, #16]	; (2404 <vQueueWaitForMessageRestricted+0x48>)
    23f2:	4798      	blx	r3
	}
    23f4:	bd38      	pop	{r3, r4, r5, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	00001b85 	.word	0x00001b85
    23fc:	00001b9d 	.word	0x00001b9d
    2400:	00002c69 	.word	0x00002c69
    2404:	00001e21 	.word	0x00001e21

00002408 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    2408:	2800      	cmp	r0, #0
    240a:	d101      	bne.n	2410 <prvTaskIsTaskSuspended+0x8>
    240c:	b672      	cpsid	i
    240e:	e7fe      	b.n	240e <prvTaskIsTaskSuspended+0x6>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    2410:	2300      	movs	r3, #0

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2412:	4a07      	ldr	r2, [pc, #28]	; (2430 <prvTaskIsTaskSuspended+0x28>)
    2414:	6941      	ldr	r1, [r0, #20]
    2416:	4291      	cmp	r1, r2
    2418:	d107      	bne.n	242a <prvTaskIsTaskSuspended+0x22>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    241a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    241c:	4a05      	ldr	r2, [pc, #20]	; (2434 <prvTaskIsTaskSuspended+0x2c>)
    241e:	4293      	cmp	r3, r2
    2420:	d002      	beq.n	2428 <prvTaskIsTaskSuspended+0x20>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    2422:	425a      	negs	r2, r3
    2424:	4153      	adcs	r3, r2
    2426:	e000      	b.n	242a <prvTaskIsTaskSuspended+0x22>
    2428:	2300      	movs	r3, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    242a:	1c18      	adds	r0, r3, #0
    242c:	4770      	bx	lr
    242e:	46c0      	nop			; (mov r8, r8)
    2430:	20003c64 	.word	0x20003c64
    2434:	20003c3c 	.word	0x20003c3c

00002438 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2438:	4b08      	ldr	r3, [pc, #32]	; (245c <prvResetNextTaskUnblockTime+0x24>)
    243a:	681b      	ldr	r3, [r3, #0]
    243c:	681b      	ldr	r3, [r3, #0]
    243e:	2b00      	cmp	r3, #0
    2440:	d104      	bne.n	244c <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    2442:	2201      	movs	r2, #1
    2444:	4252      	negs	r2, r2
    2446:	4b06      	ldr	r3, [pc, #24]	; (2460 <prvResetNextTaskUnblockTime+0x28>)
    2448:	601a      	str	r2, [r3, #0]
    244a:	e006      	b.n	245a <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    244c:	4b03      	ldr	r3, [pc, #12]	; (245c <prvResetNextTaskUnblockTime+0x24>)
    244e:	681b      	ldr	r3, [r3, #0]
    2450:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    2452:	68db      	ldr	r3, [r3, #12]
    2454:	685a      	ldr	r2, [r3, #4]
    2456:	4b02      	ldr	r3, [pc, #8]	; (2460 <prvResetNextTaskUnblockTime+0x28>)
    2458:	601a      	str	r2, [r3, #0]
	}
}
    245a:	4770      	bx	lr
    245c:	20003b88 	.word	0x20003b88
    2460:	20000014 	.word	0x20000014

00002464 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    2464:	b510      	push	{r4, lr}
    2466:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2468:	4b0e      	ldr	r3, [pc, #56]	; (24a4 <prvAddCurrentTaskToDelayedList+0x40>)
    246a:	681b      	ldr	r3, [r3, #0]
    246c:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    246e:	4b0e      	ldr	r3, [pc, #56]	; (24a8 <prvAddCurrentTaskToDelayedList+0x44>)
    2470:	681b      	ldr	r3, [r3, #0]
    2472:	4298      	cmp	r0, r3
    2474:	d207      	bcs.n	2486 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2476:	4b0d      	ldr	r3, [pc, #52]	; (24ac <prvAddCurrentTaskToDelayedList+0x48>)
    2478:	6818      	ldr	r0, [r3, #0]
    247a:	4b0a      	ldr	r3, [pc, #40]	; (24a4 <prvAddCurrentTaskToDelayedList+0x40>)
    247c:	6819      	ldr	r1, [r3, #0]
    247e:	3104      	adds	r1, #4
    2480:	4b0b      	ldr	r3, [pc, #44]	; (24b0 <prvAddCurrentTaskToDelayedList+0x4c>)
    2482:	4798      	blx	r3
    2484:	e00c      	b.n	24a0 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2486:	4b0b      	ldr	r3, [pc, #44]	; (24b4 <prvAddCurrentTaskToDelayedList+0x50>)
    2488:	6818      	ldr	r0, [r3, #0]
    248a:	4b06      	ldr	r3, [pc, #24]	; (24a4 <prvAddCurrentTaskToDelayedList+0x40>)
    248c:	6819      	ldr	r1, [r3, #0]
    248e:	3104      	adds	r1, #4
    2490:	4b07      	ldr	r3, [pc, #28]	; (24b0 <prvAddCurrentTaskToDelayedList+0x4c>)
    2492:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <prvAddCurrentTaskToDelayedList+0x54>)
    2496:	681b      	ldr	r3, [r3, #0]
    2498:	429c      	cmp	r4, r3
    249a:	d201      	bcs.n	24a0 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    249c:	4b06      	ldr	r3, [pc, #24]	; (24b8 <prvAddCurrentTaskToDelayedList+0x54>)
    249e:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    24a0:	bd10      	pop	{r4, pc}
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	20003c38 	.word	0x20003c38
    24a8:	20003c54 	.word	0x20003c54
    24ac:	20003c58 	.word	0x20003c58
    24b0:	00001ac1 	.word	0x00001ac1
    24b4:	20003b88 	.word	0x20003b88
    24b8:	20000014 	.word	0x20000014

000024bc <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    24bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24be:	465f      	mov	r7, fp
    24c0:	4656      	mov	r6, sl
    24c2:	464d      	mov	r5, r9
    24c4:	4644      	mov	r4, r8
    24c6:	b4f0      	push	{r4, r5, r6, r7}
    24c8:	1c07      	adds	r7, r0, #0
    24ca:	1c0e      	adds	r6, r1, #0
    24cc:	4691      	mov	r9, r2
    24ce:	469a      	mov	sl, r3
    24d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
    24d2:	2800      	cmp	r0, #0
    24d4:	d101      	bne.n	24da <xTaskGenericCreate+0x1e>
    24d6:	b672      	cpsid	i
    24d8:	e7fe      	b.n	24d8 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    24da:	2d04      	cmp	r5, #4
    24dc:	d901      	bls.n	24e2 <xTaskGenericCreate+0x26>
    24de:	b672      	cpsid	i
    24e0:	e7fe      	b.n	24e0 <xTaskGenericCreate+0x24>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    24e2:	2040      	movs	r0, #64	; 0x40
    24e4:	4b5b      	ldr	r3, [pc, #364]	; (2654 <xTaskGenericCreate+0x198>)
    24e6:	4798      	blx	r3
    24e8:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
    24ea:	d100      	bne.n	24ee <xTaskGenericCreate+0x32>
    24ec:	e0aa      	b.n	2644 <xTaskGenericCreate+0x188>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    24f0:	2a00      	cmp	r2, #0
    24f2:	d000      	beq.n	24f6 <xTaskGenericCreate+0x3a>
    24f4:	e092      	b.n	261c <xTaskGenericCreate+0x160>
    24f6:	464b      	mov	r3, r9
    24f8:	0098      	lsls	r0, r3, #2
    24fa:	4b56      	ldr	r3, [pc, #344]	; (2654 <xTaskGenericCreate+0x198>)
    24fc:	4798      	blx	r3
    24fe:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    2500:	2800      	cmp	r0, #0
    2502:	d000      	beq.n	2506 <xTaskGenericCreate+0x4a>
    2504:	e08c      	b.n	2620 <xTaskGenericCreate+0x164>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    2506:	1c20      	adds	r0, r4, #0
    2508:	4b53      	ldr	r3, [pc, #332]	; (2658 <xTaskGenericCreate+0x19c>)
    250a:	4798      	blx	r3
    250c:	e09a      	b.n	2644 <xTaskGenericCreate+0x188>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    250e:	5cf1      	ldrb	r1, [r6, r3]
    2510:	18e2      	adds	r2, r4, r3
    2512:	3234      	adds	r2, #52	; 0x34
    2514:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2516:	5cf2      	ldrb	r2, [r6, r3]
    2518:	2a00      	cmp	r2, #0
    251a:	d002      	beq.n	2522 <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    251c:	3301      	adds	r3, #1
    251e:	2b08      	cmp	r3, #8
    2520:	d1f5      	bne.n	250e <xTaskGenericCreate+0x52>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2522:	2200      	movs	r2, #0
    2524:	233b      	movs	r3, #59	; 0x3b
    2526:	54e2      	strb	r2, [r4, r3]
    2528:	1e2e      	subs	r6, r5, #0
    252a:	2e04      	cmp	r6, #4
    252c:	d900      	bls.n	2530 <xTaskGenericCreate+0x74>
    252e:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    2530:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    2532:	63e6      	str	r6, [r4, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2534:	1d22      	adds	r2, r4, #4
    2536:	4690      	mov	r8, r2
    2538:	1c10      	adds	r0, r2, #0
    253a:	4b48      	ldr	r3, [pc, #288]	; (265c <xTaskGenericCreate+0x1a0>)
    253c:	4699      	mov	r9, r3
    253e:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2540:	1c20      	adds	r0, r4, #0
    2542:	3018      	adds	r0, #24
    2544:	47c8      	blx	r9

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2546:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2548:	2305      	movs	r3, #5
    254a:	1b9e      	subs	r6, r3, r6
    254c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    254e:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2550:	4658      	mov	r0, fp
    2552:	1c39      	adds	r1, r7, #0
    2554:	4652      	mov	r2, sl
    2556:	4b42      	ldr	r3, [pc, #264]	; (2660 <xTaskGenericCreate+0x1a4>)
    2558:	4798      	blx	r3
    255a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    255c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    255e:	2a00      	cmp	r2, #0
    2560:	d000      	beq.n	2564 <xTaskGenericCreate+0xa8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2562:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    2564:	4b3f      	ldr	r3, [pc, #252]	; (2664 <xTaskGenericCreate+0x1a8>)
    2566:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    2568:	4b3f      	ldr	r3, [pc, #252]	; (2668 <xTaskGenericCreate+0x1ac>)
    256a:	681a      	ldr	r2, [r3, #0]
    256c:	3201      	adds	r2, #1
    256e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    2570:	4b3e      	ldr	r3, [pc, #248]	; (266c <xTaskGenericCreate+0x1b0>)
    2572:	681b      	ldr	r3, [r3, #0]
    2574:	2b00      	cmp	r3, #0
    2576:	d123      	bne.n	25c0 <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2578:	4b3c      	ldr	r3, [pc, #240]	; (266c <xTaskGenericCreate+0x1b0>)
    257a:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    257c:	4b3a      	ldr	r3, [pc, #232]	; (2668 <xTaskGenericCreate+0x1ac>)
    257e:	681b      	ldr	r3, [r3, #0]
    2580:	2b01      	cmp	r3, #1
    2582:	d128      	bne.n	25d6 <xTaskGenericCreate+0x11a>
    2584:	4e3a      	ldr	r6, [pc, #232]	; (2670 <xTaskGenericCreate+0x1b4>)
    2586:	2364      	movs	r3, #100	; 0x64
    2588:	199b      	adds	r3, r3, r6
    258a:	4699      	mov	r9, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    258c:	4f39      	ldr	r7, [pc, #228]	; (2674 <xTaskGenericCreate+0x1b8>)
    258e:	1c30      	adds	r0, r6, #0
    2590:	47b8      	blx	r7
    2592:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2594:	454e      	cmp	r6, r9
    2596:	d1fa      	bne.n	258e <xTaskGenericCreate+0xd2>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    2598:	4a37      	ldr	r2, [pc, #220]	; (2678 <xTaskGenericCreate+0x1bc>)
    259a:	4691      	mov	r9, r2
    259c:	1c10      	adds	r0, r2, #0
    259e:	4e35      	ldr	r6, [pc, #212]	; (2674 <xTaskGenericCreate+0x1b8>)
    25a0:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    25a2:	4f36      	ldr	r7, [pc, #216]	; (267c <xTaskGenericCreate+0x1c0>)
    25a4:	1c38      	adds	r0, r7, #0
    25a6:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    25a8:	4835      	ldr	r0, [pc, #212]	; (2680 <xTaskGenericCreate+0x1c4>)
    25aa:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    25ac:	4835      	ldr	r0, [pc, #212]	; (2684 <xTaskGenericCreate+0x1c8>)
    25ae:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    25b0:	4835      	ldr	r0, [pc, #212]	; (2688 <xTaskGenericCreate+0x1cc>)
    25b2:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    25b4:	4b35      	ldr	r3, [pc, #212]	; (268c <xTaskGenericCreate+0x1d0>)
    25b6:	464a      	mov	r2, r9
    25b8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    25ba:	4b35      	ldr	r3, [pc, #212]	; (2690 <xTaskGenericCreate+0x1d4>)
    25bc:	601f      	str	r7, [r3, #0]
    25be:	e00a      	b.n	25d6 <xTaskGenericCreate+0x11a>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    25c0:	4b34      	ldr	r3, [pc, #208]	; (2694 <xTaskGenericCreate+0x1d8>)
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	2b00      	cmp	r3, #0
    25c6:	d106      	bne.n	25d6 <xTaskGenericCreate+0x11a>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    25c8:	4b28      	ldr	r3, [pc, #160]	; (266c <xTaskGenericCreate+0x1b0>)
    25ca:	681b      	ldr	r3, [r3, #0]
    25cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25ce:	429d      	cmp	r5, r3
    25d0:	d301      	bcc.n	25d6 <xTaskGenericCreate+0x11a>
					{
						pxCurrentTCB = pxNewTCB;
    25d2:	4b26      	ldr	r3, [pc, #152]	; (266c <xTaskGenericCreate+0x1b0>)
    25d4:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    25d6:	4b30      	ldr	r3, [pc, #192]	; (2698 <xTaskGenericCreate+0x1dc>)
    25d8:	681a      	ldr	r2, [r3, #0]
    25da:	3201      	adds	r2, #1
    25dc:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    25de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    25e0:	4a2e      	ldr	r2, [pc, #184]	; (269c <xTaskGenericCreate+0x1e0>)
    25e2:	6812      	ldr	r2, [r2, #0]
    25e4:	4293      	cmp	r3, r2
    25e6:	d901      	bls.n	25ec <xTaskGenericCreate+0x130>
    25e8:	4a2c      	ldr	r2, [pc, #176]	; (269c <xTaskGenericCreate+0x1e0>)
    25ea:	6013      	str	r3, [r2, #0]
    25ec:	009a      	lsls	r2, r3, #2
    25ee:	18d3      	adds	r3, r2, r3
    25f0:	009b      	lsls	r3, r3, #2
    25f2:	481f      	ldr	r0, [pc, #124]	; (2670 <xTaskGenericCreate+0x1b4>)
    25f4:	18c0      	adds	r0, r0, r3
    25f6:	4641      	mov	r1, r8
    25f8:	4b29      	ldr	r3, [pc, #164]	; (26a0 <xTaskGenericCreate+0x1e4>)
    25fa:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    25fc:	4b29      	ldr	r3, [pc, #164]	; (26a4 <xTaskGenericCreate+0x1e8>)
    25fe:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    2600:	4b24      	ldr	r3, [pc, #144]	; (2694 <xTaskGenericCreate+0x1d8>)
    2602:	681b      	ldr	r3, [r3, #0]
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    2604:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    2606:	2b00      	cmp	r3, #0
    2608:	d01e      	beq.n	2648 <xTaskGenericCreate+0x18c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    260a:	4b18      	ldr	r3, [pc, #96]	; (266c <xTaskGenericCreate+0x1b0>)
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2610:	429d      	cmp	r5, r3
    2612:	d919      	bls.n	2648 <xTaskGenericCreate+0x18c>
			{
				taskYIELD_IF_USING_PREEMPTION();
    2614:	4b24      	ldr	r3, [pc, #144]	; (26a8 <xTaskGenericCreate+0x1ec>)
    2616:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
    2618:	2001      	movs	r0, #1
    261a:	e015      	b.n	2648 <xTaskGenericCreate+0x18c>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    261c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    261e:	6303      	str	r3, [r0, #48]	; 0x30
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    2620:	4a22      	ldr	r2, [pc, #136]	; (26ac <xTaskGenericCreate+0x1f0>)
    2622:	1c13      	adds	r3, r2, #0
    2624:	444b      	add	r3, r9
    2626:	009b      	lsls	r3, r3, #2
    2628:	6b22      	ldr	r2, [r4, #48]	; 0x30
    262a:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    262c:	2207      	movs	r2, #7
    262e:	4393      	bics	r3, r2
    2630:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    2632:	7832      	ldrb	r2, [r6, #0]
    2634:	2334      	movs	r3, #52	; 0x34
    2636:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2638:	7833      	ldrb	r3, [r6, #0]
    263a:	2b00      	cmp	r3, #0
    263c:	d100      	bne.n	2640 <xTaskGenericCreate+0x184>
    263e:	e770      	b.n	2522 <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2640:	2301      	movs	r3, #1
    2642:	e764      	b.n	250e <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2644:	2001      	movs	r0, #1
    2646:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    2648:	bc3c      	pop	{r2, r3, r4, r5}
    264a:	4690      	mov	r8, r2
    264c:	4699      	mov	r9, r3
    264e:	46a2      	mov	sl, r4
    2650:	46ab      	mov	fp, r5
    2652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2654:	00001cbd 	.word	0x00001cbd
    2658:	00001d25 	.word	0x00001d25
    265c:	00001aa1 	.word	0x00001aa1
    2660:	00001b49 	.word	0x00001b49
    2664:	00001b85 	.word	0x00001b85
    2668:	20003c60 	.word	0x20003c60
    266c:	20003c38 	.word	0x20003c38
    2670:	20003bc0 	.word	0x20003bc0
    2674:	00001a89 	.word	0x00001a89
    2678:	20003b94 	.word	0x20003b94
    267c:	20003ba8 	.word	0x20003ba8
    2680:	20003c3c 	.word	0x20003c3c
    2684:	20003c24 	.word	0x20003c24
    2688:	20003c64 	.word	0x20003c64
    268c:	20003b88 	.word	0x20003b88
    2690:	20003c58 	.word	0x20003c58
    2694:	20003b8c 	.word	0x20003b8c
    2698:	20003c5c 	.word	0x20003c5c
    269c:	20003c78 	.word	0x20003c78
    26a0:	00001aa9 	.word	0x00001aa9
    26a4:	00001b9d 	.word	0x00001b9d
    26a8:	00001b6d 	.word	0x00001b6d
    26ac:	3fffffff 	.word	0x3fffffff

000026b0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    26b0:	b538      	push	{r3, r4, r5, lr}
    26b2:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    26b4:	d101      	bne.n	26ba <vTaskResume+0xa>
    26b6:	b672      	cpsid	i
    26b8:	e7fe      	b.n	26b8 <vTaskResume+0x8>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    26ba:	4b14      	ldr	r3, [pc, #80]	; (270c <vTaskResume+0x5c>)
    26bc:	681b      	ldr	r3, [r3, #0]
    26be:	4298      	cmp	r0, r3
    26c0:	d023      	beq.n	270a <vTaskResume+0x5a>
		{
			taskENTER_CRITICAL();
    26c2:	4b13      	ldr	r3, [pc, #76]	; (2710 <vTaskResume+0x60>)
    26c4:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    26c6:	1c20      	adds	r0, r4, #0
    26c8:	4b12      	ldr	r3, [pc, #72]	; (2714 <vTaskResume+0x64>)
    26ca:	4798      	blx	r3
    26cc:	2801      	cmp	r0, #1
    26ce:	d11a      	bne.n	2706 <vTaskResume+0x56>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    26d0:	1d25      	adds	r5, r4, #4
    26d2:	1c28      	adds	r0, r5, #0
    26d4:	4b10      	ldr	r3, [pc, #64]	; (2718 <vTaskResume+0x68>)
    26d6:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    26d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    26da:	4a10      	ldr	r2, [pc, #64]	; (271c <vTaskResume+0x6c>)
    26dc:	6812      	ldr	r2, [r2, #0]
    26de:	4293      	cmp	r3, r2
    26e0:	d901      	bls.n	26e6 <vTaskResume+0x36>
    26e2:	4a0e      	ldr	r2, [pc, #56]	; (271c <vTaskResume+0x6c>)
    26e4:	6013      	str	r3, [r2, #0]
    26e6:	009a      	lsls	r2, r3, #2
    26e8:	18d3      	adds	r3, r2, r3
    26ea:	009b      	lsls	r3, r3, #2
    26ec:	480c      	ldr	r0, [pc, #48]	; (2720 <vTaskResume+0x70>)
    26ee:	18c0      	adds	r0, r0, r3
    26f0:	1c29      	adds	r1, r5, #0
    26f2:	4b0c      	ldr	r3, [pc, #48]	; (2724 <vTaskResume+0x74>)
    26f4:	4798      	blx	r3

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    26f6:	4b05      	ldr	r3, [pc, #20]	; (270c <vTaskResume+0x5c>)
    26f8:	681b      	ldr	r3, [r3, #0]
    26fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    26fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    26fe:	429a      	cmp	r2, r3
    2700:	d301      	bcc.n	2706 <vTaskResume+0x56>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    2702:	4b09      	ldr	r3, [pc, #36]	; (2728 <vTaskResume+0x78>)
    2704:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    2706:	4b09      	ldr	r3, [pc, #36]	; (272c <vTaskResume+0x7c>)
    2708:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    270a:	bd38      	pop	{r3, r4, r5, pc}
    270c:	20003c38 	.word	0x20003c38
    2710:	00001b85 	.word	0x00001b85
    2714:	00002409 	.word	0x00002409
    2718:	00001af1 	.word	0x00001af1
    271c:	20003c78 	.word	0x20003c78
    2720:	20003bc0 	.word	0x20003bc0
    2724:	00001aa9 	.word	0x00001aa9
    2728:	00001b6d 	.word	0x00001b6d
    272c:	00001b9d 	.word	0x00001b9d

00002730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2730:	b510      	push	{r4, lr}
    2732:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    2734:	2300      	movs	r3, #0
    2736:	9300      	str	r3, [sp, #0]
    2738:	9301      	str	r3, [sp, #4]
    273a:	9302      	str	r3, [sp, #8]
    273c:	9303      	str	r3, [sp, #12]
    273e:	480d      	ldr	r0, [pc, #52]	; (2774 <vTaskStartScheduler+0x44>)
    2740:	490d      	ldr	r1, [pc, #52]	; (2778 <vTaskStartScheduler+0x48>)
    2742:	2264      	movs	r2, #100	; 0x64
    2744:	4c0d      	ldr	r4, [pc, #52]	; (277c <vTaskStartScheduler+0x4c>)
    2746:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    2748:	2801      	cmp	r0, #1
    274a:	d10d      	bne.n	2768 <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
    274c:	4b0c      	ldr	r3, [pc, #48]	; (2780 <vTaskStartScheduler+0x50>)
    274e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2750:	2801      	cmp	r0, #1
    2752:	d109      	bne.n	2768 <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    2754:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
    2756:	2201      	movs	r2, #1
    2758:	4b0a      	ldr	r3, [pc, #40]	; (2784 <vTaskStartScheduler+0x54>)
    275a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    275c:	2200      	movs	r2, #0
    275e:	4b0a      	ldr	r3, [pc, #40]	; (2788 <vTaskStartScheduler+0x58>)
    2760:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2762:	4b0a      	ldr	r3, [pc, #40]	; (278c <vTaskStartScheduler+0x5c>)
    2764:	4798      	blx	r3
    2766:	e003      	b.n	2770 <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    2768:	2800      	cmp	r0, #0
    276a:	d101      	bne.n	2770 <vTaskStartScheduler+0x40>
    276c:	b672      	cpsid	i
    276e:	e7fe      	b.n	276e <vTaskStartScheduler+0x3e>
	}
}
    2770:	b004      	add	sp, #16
    2772:	bd10      	pop	{r4, pc}
    2774:	00002a41 	.word	0x00002a41
    2778:	00004f88 	.word	0x00004f88
    277c:	000024bd 	.word	0x000024bd
    2780:	00002f7d 	.word	0x00002f7d
    2784:	20003b8c 	.word	0x20003b8c
    2788:	20003c54 	.word	0x20003c54
    278c:	00001c7d 	.word	0x00001c7d

00002790 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2790:	4b02      	ldr	r3, [pc, #8]	; (279c <vTaskSuspendAll+0xc>)
    2792:	681a      	ldr	r2, [r3, #0]
    2794:	3201      	adds	r2, #1
    2796:	601a      	str	r2, [r3, #0]
}
    2798:	4770      	bx	lr
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	20003c50 	.word	0x20003c50

000027a0 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    27a0:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    27a2:	4b04      	ldr	r3, [pc, #16]	; (27b4 <xTaskGetTickCount+0x14>)
    27a4:	4798      	blx	r3
	{
		xTicks = xTickCount;
    27a6:	4b04      	ldr	r3, [pc, #16]	; (27b8 <xTaskGetTickCount+0x18>)
    27a8:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    27aa:	4b04      	ldr	r3, [pc, #16]	; (27bc <xTaskGetTickCount+0x1c>)
    27ac:	4798      	blx	r3

	return xTicks;
}
    27ae:	1c20      	adds	r0, r4, #0
    27b0:	bd10      	pop	{r4, pc}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	00001b85 	.word	0x00001b85
    27b8:	20003c54 	.word	0x20003c54
    27bc:	00001b9d 	.word	0x00001b9d

000027c0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    27c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27c2:	4647      	mov	r7, r8
    27c4:	b480      	push	{r7}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    27c6:	4b3b      	ldr	r3, [pc, #236]	; (28b4 <xTaskIncrementTick+0xf4>)
    27c8:	681b      	ldr	r3, [r3, #0]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d161      	bne.n	2892 <xTaskIncrementTick+0xd2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    27ce:	4b3a      	ldr	r3, [pc, #232]	; (28b8 <xTaskIncrementTick+0xf8>)
    27d0:	681a      	ldr	r2, [r3, #0]
    27d2:	3201      	adds	r2, #1
    27d4:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    27d6:	681f      	ldr	r7, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
    27d8:	2f00      	cmp	r7, #0
    27da:	d112      	bne.n	2802 <xTaskIncrementTick+0x42>
			{
				taskSWITCH_DELAYED_LISTS();
    27dc:	4b37      	ldr	r3, [pc, #220]	; (28bc <xTaskIncrementTick+0xfc>)
    27de:	681b      	ldr	r3, [r3, #0]
    27e0:	681b      	ldr	r3, [r3, #0]
    27e2:	2b00      	cmp	r3, #0
    27e4:	d001      	beq.n	27ea <xTaskIncrementTick+0x2a>
    27e6:	b672      	cpsid	i
    27e8:	e7fe      	b.n	27e8 <xTaskIncrementTick+0x28>
    27ea:	4a34      	ldr	r2, [pc, #208]	; (28bc <xTaskIncrementTick+0xfc>)
    27ec:	6811      	ldr	r1, [r2, #0]
    27ee:	4b34      	ldr	r3, [pc, #208]	; (28c0 <xTaskIncrementTick+0x100>)
    27f0:	6818      	ldr	r0, [r3, #0]
    27f2:	6010      	str	r0, [r2, #0]
    27f4:	6019      	str	r1, [r3, #0]
    27f6:	4b33      	ldr	r3, [pc, #204]	; (28c4 <xTaskIncrementTick+0x104>)
    27f8:	681a      	ldr	r2, [r3, #0]
    27fa:	3201      	adds	r2, #1
    27fc:	601a      	str	r2, [r3, #0]
    27fe:	4b32      	ldr	r3, [pc, #200]	; (28c8 <xTaskIncrementTick+0x108>)
    2800:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2802:	4b32      	ldr	r3, [pc, #200]	; (28cc <xTaskIncrementTick+0x10c>)
    2804:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    2806:	2400      	movs	r4, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    2808:	429f      	cmp	r7, r3
    280a:	d337      	bcc.n	287c <xTaskIncrementTick+0xbc>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    280c:	4e2b      	ldr	r6, [pc, #172]	; (28bc <xTaskIncrementTick+0xfc>)
    280e:	e000      	b.n	2812 <xTaskIncrementTick+0x52>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
    2810:	2401      	movs	r4, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2812:	6833      	ldr	r3, [r6, #0]
    2814:	681b      	ldr	r3, [r3, #0]
    2816:	2b00      	cmp	r3, #0
    2818:	d104      	bne.n	2824 <xTaskIncrementTick+0x64>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    281a:	2201      	movs	r2, #1
    281c:	4252      	negs	r2, r2
    281e:	4b2b      	ldr	r3, [pc, #172]	; (28cc <xTaskIncrementTick+0x10c>)
    2820:	601a      	str	r2, [r3, #0]
						break;
    2822:	e02b      	b.n	287c <xTaskIncrementTick+0xbc>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2824:	4a25      	ldr	r2, [pc, #148]	; (28bc <xTaskIncrementTick+0xfc>)
    2826:	6813      	ldr	r3, [r2, #0]
    2828:	68db      	ldr	r3, [r3, #12]
    282a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    282c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
    282e:	429f      	cmp	r7, r3
    2830:	d202      	bcs.n	2838 <xTaskIncrementTick+0x78>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
    2832:	4a26      	ldr	r2, [pc, #152]	; (28cc <xTaskIncrementTick+0x10c>)
    2834:	6013      	str	r3, [r2, #0]
							break;
    2836:	e021      	b.n	287c <xTaskIncrementTick+0xbc>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2838:	1d2b      	adds	r3, r5, #4
    283a:	4698      	mov	r8, r3
    283c:	1c18      	adds	r0, r3, #0
    283e:	4a24      	ldr	r2, [pc, #144]	; (28d0 <xTaskIncrementTick+0x110>)
    2840:	4790      	blx	r2

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2842:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2844:	2b00      	cmp	r3, #0
    2846:	d003      	beq.n	2850 <xTaskIncrementTick+0x90>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2848:	1c28      	adds	r0, r5, #0
    284a:	3018      	adds	r0, #24
    284c:	4b20      	ldr	r3, [pc, #128]	; (28d0 <xTaskIncrementTick+0x110>)
    284e:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    2850:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2852:	4a20      	ldr	r2, [pc, #128]	; (28d4 <xTaskIncrementTick+0x114>)
    2854:	6812      	ldr	r2, [r2, #0]
    2856:	4293      	cmp	r3, r2
    2858:	d901      	bls.n	285e <xTaskIncrementTick+0x9e>
    285a:	4a1e      	ldr	r2, [pc, #120]	; (28d4 <xTaskIncrementTick+0x114>)
    285c:	6013      	str	r3, [r2, #0]
    285e:	009a      	lsls	r2, r3, #2
    2860:	18d3      	adds	r3, r2, r3
    2862:	009b      	lsls	r3, r3, #2
    2864:	481c      	ldr	r0, [pc, #112]	; (28d8 <xTaskIncrementTick+0x118>)
    2866:	18c0      	adds	r0, r0, r3
    2868:	4641      	mov	r1, r8
    286a:	4b1c      	ldr	r3, [pc, #112]	; (28dc <xTaskIncrementTick+0x11c>)
    286c:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    286e:	4b1c      	ldr	r3, [pc, #112]	; (28e0 <xTaskIncrementTick+0x120>)
    2870:	681b      	ldr	r3, [r3, #0]
    2872:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2876:	429a      	cmp	r2, r3
    2878:	d2ca      	bcs.n	2810 <xTaskIncrementTick+0x50>
    287a:	e7ca      	b.n	2812 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    287c:	4b18      	ldr	r3, [pc, #96]	; (28e0 <xTaskIncrementTick+0x120>)
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2882:	009a      	lsls	r2, r3, #2
    2884:	18d3      	adds	r3, r2, r3
    2886:	009b      	lsls	r3, r3, #2
    2888:	4a13      	ldr	r2, [pc, #76]	; (28d8 <xTaskIncrementTick+0x118>)
    288a:	589b      	ldr	r3, [r3, r2]
    288c:	2b01      	cmp	r3, #1
    288e:	d806      	bhi.n	289e <xTaskIncrementTick+0xde>
    2890:	e006      	b.n	28a0 <xTaskIncrementTick+0xe0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    2892:	4b14      	ldr	r3, [pc, #80]	; (28e4 <xTaskIncrementTick+0x124>)
    2894:	681a      	ldr	r2, [r3, #0]
    2896:	3201      	adds	r2, #1
    2898:	601a      	str	r2, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    289a:	2400      	movs	r4, #0
    289c:	e000      	b.n	28a0 <xTaskIncrementTick+0xe0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
    289e:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    28a0:	4b11      	ldr	r3, [pc, #68]	; (28e8 <xTaskIncrementTick+0x128>)
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	2b00      	cmp	r3, #0
    28a6:	d000      	beq.n	28aa <xTaskIncrementTick+0xea>
		{
			xSwitchRequired = pdTRUE;
    28a8:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    28aa:	1c20      	adds	r0, r4, #0
    28ac:	bc04      	pop	{r2}
    28ae:	4690      	mov	r8, r2
    28b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	20003c50 	.word	0x20003c50
    28b8:	20003c54 	.word	0x20003c54
    28bc:	20003b88 	.word	0x20003b88
    28c0:	20003c58 	.word	0x20003c58
    28c4:	20003b84 	.word	0x20003b84
    28c8:	00002439 	.word	0x00002439
    28cc:	20000014 	.word	0x20000014
    28d0:	00001af1 	.word	0x00001af1
    28d4:	20003c78 	.word	0x20003c78
    28d8:	20003bc0 	.word	0x20003bc0
    28dc:	00001aa9 	.word	0x00001aa9
    28e0:	20003c38 	.word	0x20003c38
    28e4:	20003bbc 	.word	0x20003bbc
    28e8:	20003c7c 	.word	0x20003c7c

000028ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    28ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    28ee:	4b2f      	ldr	r3, [pc, #188]	; (29ac <xTaskResumeAll+0xc0>)
    28f0:	681b      	ldr	r3, [r3, #0]
    28f2:	2b00      	cmp	r3, #0
    28f4:	d101      	bne.n	28fa <xTaskResumeAll+0xe>
    28f6:	b672      	cpsid	i
    28f8:	e7fe      	b.n	28f8 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    28fa:	4b2d      	ldr	r3, [pc, #180]	; (29b0 <xTaskResumeAll+0xc4>)
    28fc:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    28fe:	4b2b      	ldr	r3, [pc, #172]	; (29ac <xTaskResumeAll+0xc0>)
    2900:	681a      	ldr	r2, [r3, #0]
    2902:	3a01      	subs	r2, #1
    2904:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2906:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2908:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    290a:	2b00      	cmp	r3, #0
    290c:	d149      	bne.n	29a2 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    290e:	4b29      	ldr	r3, [pc, #164]	; (29b4 <xTaskResumeAll+0xc8>)
    2910:	681b      	ldr	r3, [r3, #0]
    2912:	2b00      	cmp	r3, #0
    2914:	d045      	beq.n	29a2 <xTaskResumeAll+0xb6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2916:	4d28      	ldr	r5, [pc, #160]	; (29b8 <xTaskResumeAll+0xcc>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2918:	1c2f      	adds	r7, r5, #0
    291a:	e021      	b.n	2960 <xTaskResumeAll+0x74>
    291c:	68fb      	ldr	r3, [r7, #12]
    291e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2920:	1c20      	adds	r0, r4, #0
    2922:	3018      	adds	r0, #24
    2924:	4b25      	ldr	r3, [pc, #148]	; (29bc <xTaskResumeAll+0xd0>)
    2926:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2928:	1d26      	adds	r6, r4, #4
    292a:	1c30      	adds	r0, r6, #0
    292c:	4b23      	ldr	r3, [pc, #140]	; (29bc <xTaskResumeAll+0xd0>)
    292e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    2930:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2932:	4a23      	ldr	r2, [pc, #140]	; (29c0 <xTaskResumeAll+0xd4>)
    2934:	6812      	ldr	r2, [r2, #0]
    2936:	4293      	cmp	r3, r2
    2938:	d901      	bls.n	293e <xTaskResumeAll+0x52>
    293a:	4a21      	ldr	r2, [pc, #132]	; (29c0 <xTaskResumeAll+0xd4>)
    293c:	6013      	str	r3, [r2, #0]
    293e:	009a      	lsls	r2, r3, #2
    2940:	18d3      	adds	r3, r2, r3
    2942:	009b      	lsls	r3, r3, #2
    2944:	481f      	ldr	r0, [pc, #124]	; (29c4 <xTaskResumeAll+0xd8>)
    2946:	18c0      	adds	r0, r0, r3
    2948:	1c31      	adds	r1, r6, #0
    294a:	4b1f      	ldr	r3, [pc, #124]	; (29c8 <xTaskResumeAll+0xdc>)
    294c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    294e:	4b1f      	ldr	r3, [pc, #124]	; (29cc <xTaskResumeAll+0xe0>)
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2956:	429a      	cmp	r2, r3
    2958:	d302      	bcc.n	2960 <xTaskResumeAll+0x74>
					{
						xYieldPending = pdTRUE;
    295a:	2201      	movs	r2, #1
    295c:	4b1c      	ldr	r3, [pc, #112]	; (29d0 <xTaskResumeAll+0xe4>)
    295e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2960:	682b      	ldr	r3, [r5, #0]
    2962:	2b00      	cmp	r3, #0
    2964:	d1da      	bne.n	291c <xTaskResumeAll+0x30>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    2966:	4b1b      	ldr	r3, [pc, #108]	; (29d4 <xTaskResumeAll+0xe8>)
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	2b00      	cmp	r3, #0
    296c:	d011      	beq.n	2992 <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    296e:	4b19      	ldr	r3, [pc, #100]	; (29d4 <xTaskResumeAll+0xe8>)
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	2b00      	cmp	r3, #0
    2974:	d00d      	beq.n	2992 <xTaskResumeAll+0xa6>
					{
						if( xTaskIncrementTick() != pdFALSE )
    2976:	4e18      	ldr	r6, [pc, #96]	; (29d8 <xTaskResumeAll+0xec>)
						{
							xYieldPending = pdTRUE;
    2978:	4d15      	ldr	r5, [pc, #84]	; (29d0 <xTaskResumeAll+0xe4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    297a:	4c16      	ldr	r4, [pc, #88]	; (29d4 <xTaskResumeAll+0xe8>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    297c:	47b0      	blx	r6
    297e:	2800      	cmp	r0, #0
    2980:	d001      	beq.n	2986 <xTaskResumeAll+0x9a>
						{
							xYieldPending = pdTRUE;
    2982:	2301      	movs	r3, #1
    2984:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    2986:	6823      	ldr	r3, [r4, #0]
    2988:	3b01      	subs	r3, #1
    298a:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    298c:	6823      	ldr	r3, [r4, #0]
    298e:	2b00      	cmp	r3, #0
    2990:	d1f4      	bne.n	297c <xTaskResumeAll+0x90>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    2992:	4b0f      	ldr	r3, [pc, #60]	; (29d0 <xTaskResumeAll+0xe4>)
    2994:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2996:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    2998:	2b01      	cmp	r3, #1
    299a:	d102      	bne.n	29a2 <xTaskResumeAll+0xb6>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    299c:	4b0f      	ldr	r3, [pc, #60]	; (29dc <xTaskResumeAll+0xf0>)
    299e:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    29a0:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    29a2:	4b0f      	ldr	r3, [pc, #60]	; (29e0 <xTaskResumeAll+0xf4>)
    29a4:	4798      	blx	r3

	return xAlreadyYielded;
}
    29a6:	1c20      	adds	r0, r4, #0
    29a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	20003c50 	.word	0x20003c50
    29b0:	00001b85 	.word	0x00001b85
    29b4:	20003c60 	.word	0x20003c60
    29b8:	20003c3c 	.word	0x20003c3c
    29bc:	00001af1 	.word	0x00001af1
    29c0:	20003c78 	.word	0x20003c78
    29c4:	20003bc0 	.word	0x20003bc0
    29c8:	00001aa9 	.word	0x00001aa9
    29cc:	20003c38 	.word	0x20003c38
    29d0:	20003c7c 	.word	0x20003c7c
    29d4:	20003bbc 	.word	0x20003bbc
    29d8:	000027c1 	.word	0x000027c1
    29dc:	00001b6d 	.word	0x00001b6d
    29e0:	00001b9d 	.word	0x00001b9d

000029e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    29e4:	b510      	push	{r4, lr}
    29e6:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    29e8:	d016      	beq.n	2a18 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    29ea:	4b0d      	ldr	r3, [pc, #52]	; (2a20 <vTaskDelay+0x3c>)
    29ec:	681b      	ldr	r3, [r3, #0]
    29ee:	2b00      	cmp	r3, #0
    29f0:	d001      	beq.n	29f6 <vTaskDelay+0x12>
    29f2:	b672      	cpsid	i
    29f4:	e7fe      	b.n	29f4 <vTaskDelay+0x10>
			vTaskSuspendAll();
    29f6:	4b0b      	ldr	r3, [pc, #44]	; (2a24 <vTaskDelay+0x40>)
    29f8:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    29fa:	4b0b      	ldr	r3, [pc, #44]	; (2a28 <vTaskDelay+0x44>)
    29fc:	681b      	ldr	r3, [r3, #0]
    29fe:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2a00:	4b0a      	ldr	r3, [pc, #40]	; (2a2c <vTaskDelay+0x48>)
    2a02:	6818      	ldr	r0, [r3, #0]
    2a04:	3004      	adds	r0, #4
    2a06:	4b0a      	ldr	r3, [pc, #40]	; (2a30 <vTaskDelay+0x4c>)
    2a08:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2a0a:	1c20      	adds	r0, r4, #0
    2a0c:	4b09      	ldr	r3, [pc, #36]	; (2a34 <vTaskDelay+0x50>)
    2a0e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    2a10:	4b09      	ldr	r3, [pc, #36]	; (2a38 <vTaskDelay+0x54>)
    2a12:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2a14:	2800      	cmp	r0, #0
    2a16:	d101      	bne.n	2a1c <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    2a18:	4b08      	ldr	r3, [pc, #32]	; (2a3c <vTaskDelay+0x58>)
    2a1a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2a1c:	bd10      	pop	{r4, pc}
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	20003c50 	.word	0x20003c50
    2a24:	00002791 	.word	0x00002791
    2a28:	20003c54 	.word	0x20003c54
    2a2c:	20003c38 	.word	0x20003c38
    2a30:	00001af1 	.word	0x00001af1
    2a34:	00002465 	.word	0x00002465
    2a38:	000028ed 	.word	0x000028ed
    2a3c:	00001b6d 	.word	0x00001b6d

00002a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2a42:	4e15      	ldr	r6, [pc, #84]	; (2a98 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2a44:	4f15      	ldr	r7, [pc, #84]	; (2a9c <prvIdleTask+0x5c>)
    2a46:	e01e      	b.n	2a86 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    2a48:	4b15      	ldr	r3, [pc, #84]	; (2aa0 <prvIdleTask+0x60>)
    2a4a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2a4c:	4b15      	ldr	r3, [pc, #84]	; (2aa4 <prvIdleTask+0x64>)
    2a4e:	681c      	ldr	r4, [r3, #0]
			}
			( void ) xTaskResumeAll();
    2a50:	4b15      	ldr	r3, [pc, #84]	; (2aa8 <prvIdleTask+0x68>)
    2a52:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    2a54:	2c00      	cmp	r4, #0
    2a56:	d016      	beq.n	2a86 <prvIdleTask+0x46>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    2a58:	4b14      	ldr	r3, [pc, #80]	; (2aac <prvIdleTask+0x6c>)
    2a5a:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2a5c:	4b11      	ldr	r3, [pc, #68]	; (2aa4 <prvIdleTask+0x64>)
    2a5e:	68db      	ldr	r3, [r3, #12]
    2a60:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2a62:	1d20      	adds	r0, r4, #4
    2a64:	4b12      	ldr	r3, [pc, #72]	; (2ab0 <prvIdleTask+0x70>)
    2a66:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    2a68:	4b12      	ldr	r3, [pc, #72]	; (2ab4 <prvIdleTask+0x74>)
    2a6a:	681a      	ldr	r2, [r3, #0]
    2a6c:	3a01      	subs	r2, #1
    2a6e:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    2a70:	4b09      	ldr	r3, [pc, #36]	; (2a98 <prvIdleTask+0x58>)
    2a72:	681a      	ldr	r2, [r3, #0]
    2a74:	3a01      	subs	r2, #1
    2a76:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    2a78:	4b0f      	ldr	r3, [pc, #60]	; (2ab8 <prvIdleTask+0x78>)
    2a7a:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    2a7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2a7e:	4d0f      	ldr	r5, [pc, #60]	; (2abc <prvIdleTask+0x7c>)
    2a80:	47a8      	blx	r5
		vPortFree( pxTCB );
    2a82:	1c20      	adds	r0, r4, #0
    2a84:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2a86:	6833      	ldr	r3, [r6, #0]
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d1dd      	bne.n	2a48 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2a8c:	683b      	ldr	r3, [r7, #0]
    2a8e:	2b01      	cmp	r3, #1
    2a90:	d9f9      	bls.n	2a86 <prvIdleTask+0x46>
			{
				taskYIELD();
    2a92:	4b0b      	ldr	r3, [pc, #44]	; (2ac0 <prvIdleTask+0x80>)
    2a94:	4798      	blx	r3
    2a96:	e7f6      	b.n	2a86 <prvIdleTask+0x46>
    2a98:	20003b90 	.word	0x20003b90
    2a9c:	20003bc0 	.word	0x20003bc0
    2aa0:	00002791 	.word	0x00002791
    2aa4:	20003c24 	.word	0x20003c24
    2aa8:	000028ed 	.word	0x000028ed
    2aac:	00001b85 	.word	0x00001b85
    2ab0:	00001af1 	.word	0x00001af1
    2ab4:	20003c60 	.word	0x20003c60
    2ab8:	00001b9d 	.word	0x00001b9d
    2abc:	00001d25 	.word	0x00001d25
    2ac0:	00001b6d 	.word	0x00001b6d

00002ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2ac4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2ac6:	4b20      	ldr	r3, [pc, #128]	; (2b48 <vTaskSwitchContext+0x84>)
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d003      	beq.n	2ad6 <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2ace:	2201      	movs	r2, #1
    2ad0:	4b1e      	ldr	r3, [pc, #120]	; (2b4c <vTaskSwitchContext+0x88>)
    2ad2:	601a      	str	r2, [r3, #0]
    2ad4:	e036      	b.n	2b44 <vTaskSwitchContext+0x80>
	}
	else
	{
		xYieldPending = pdFALSE;
    2ad6:	2200      	movs	r2, #0
    2ad8:	4b1c      	ldr	r3, [pc, #112]	; (2b4c <vTaskSwitchContext+0x88>)
    2ada:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    2adc:	4b1c      	ldr	r3, [pc, #112]	; (2b50 <vTaskSwitchContext+0x8c>)
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	009a      	lsls	r2, r3, #2
    2ae2:	18d3      	adds	r3, r2, r3
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	4a1b      	ldr	r2, [pc, #108]	; (2b54 <vTaskSwitchContext+0x90>)
    2ae8:	589b      	ldr	r3, [r3, r2]
    2aea:	2b00      	cmp	r3, #0
    2aec:	d116      	bne.n	2b1c <vTaskSwitchContext+0x58>
    2aee:	4b18      	ldr	r3, [pc, #96]	; (2b50 <vTaskSwitchContext+0x8c>)
    2af0:	681b      	ldr	r3, [r3, #0]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d105      	bne.n	2b02 <vTaskSwitchContext+0x3e>
    2af6:	e002      	b.n	2afe <vTaskSwitchContext+0x3a>
    2af8:	6802      	ldr	r2, [r0, #0]
    2afa:	2a00      	cmp	r2, #0
    2afc:	d104      	bne.n	2b08 <vTaskSwitchContext+0x44>
    2afe:	b672      	cpsid	i
    2b00:	e7fe      	b.n	2b00 <vTaskSwitchContext+0x3c>
    2b02:	4b13      	ldr	r3, [pc, #76]	; (2b50 <vTaskSwitchContext+0x8c>)
    2b04:	4c13      	ldr	r4, [pc, #76]	; (2b54 <vTaskSwitchContext+0x90>)
    2b06:	1c18      	adds	r0, r3, #0
    2b08:	681a      	ldr	r2, [r3, #0]
    2b0a:	3a01      	subs	r2, #1
    2b0c:	601a      	str	r2, [r3, #0]
    2b0e:	681a      	ldr	r2, [r3, #0]
    2b10:	0091      	lsls	r1, r2, #2
    2b12:	188a      	adds	r2, r1, r2
    2b14:	0092      	lsls	r2, r2, #2
    2b16:	5912      	ldr	r2, [r2, r4]
    2b18:	2a00      	cmp	r2, #0
    2b1a:	d0ed      	beq.n	2af8 <vTaskSwitchContext+0x34>
    2b1c:	4b0c      	ldr	r3, [pc, #48]	; (2b50 <vTaskSwitchContext+0x8c>)
    2b1e:	681b      	ldr	r3, [r3, #0]
    2b20:	009a      	lsls	r2, r3, #2
    2b22:	18d3      	adds	r3, r2, r3
    2b24:	009b      	lsls	r3, r3, #2
    2b26:	4a0b      	ldr	r2, [pc, #44]	; (2b54 <vTaskSwitchContext+0x90>)
    2b28:	18d3      	adds	r3, r2, r3
    2b2a:	685a      	ldr	r2, [r3, #4]
    2b2c:	6852      	ldr	r2, [r2, #4]
    2b2e:	605a      	str	r2, [r3, #4]
    2b30:	1c19      	adds	r1, r3, #0
    2b32:	3108      	adds	r1, #8
    2b34:	428a      	cmp	r2, r1
    2b36:	d101      	bne.n	2b3c <vTaskSwitchContext+0x78>
    2b38:	6852      	ldr	r2, [r2, #4]
    2b3a:	605a      	str	r2, [r3, #4]
    2b3c:	685b      	ldr	r3, [r3, #4]
    2b3e:	68da      	ldr	r2, [r3, #12]
    2b40:	4b05      	ldr	r3, [pc, #20]	; (2b58 <vTaskSwitchContext+0x94>)
    2b42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    2b44:	bd10      	pop	{r4, pc}
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	20003c50 	.word	0x20003c50
    2b4c:	20003c7c 	.word	0x20003c7c
    2b50:	20003c78 	.word	0x20003c78
    2b54:	20003bc0 	.word	0x20003bc0
    2b58:	20003c38 	.word	0x20003c38

00002b5c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    2b5c:	b538      	push	{r3, r4, r5, lr}
    2b5e:	1c04      	adds	r4, r0, #0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2b60:	4b1f      	ldr	r3, [pc, #124]	; (2be0 <vTaskSuspend+0x84>)
    2b62:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    2b64:	2c00      	cmp	r4, #0
    2b66:	d101      	bne.n	2b6c <vTaskSuspend+0x10>
    2b68:	4b1e      	ldr	r3, [pc, #120]	; (2be4 <vTaskSuspend+0x88>)
    2b6a:	681c      	ldr	r4, [r3, #0]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2b6c:	1d25      	adds	r5, r4, #4
    2b6e:	1c28      	adds	r0, r5, #0
    2b70:	4b1d      	ldr	r3, [pc, #116]	; (2be8 <vTaskSuspend+0x8c>)
    2b72:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2b74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b76:	2b00      	cmp	r3, #0
    2b78:	d003      	beq.n	2b82 <vTaskSuspend+0x26>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2b7a:	1c20      	adds	r0, r4, #0
    2b7c:	3018      	adds	r0, #24
    2b7e:	4b1a      	ldr	r3, [pc, #104]	; (2be8 <vTaskSuspend+0x8c>)
    2b80:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    2b82:	481a      	ldr	r0, [pc, #104]	; (2bec <vTaskSuspend+0x90>)
    2b84:	1c29      	adds	r1, r5, #0
    2b86:	4b1a      	ldr	r3, [pc, #104]	; (2bf0 <vTaskSuspend+0x94>)
    2b88:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
    2b8a:	4b1a      	ldr	r3, [pc, #104]	; (2bf4 <vTaskSuspend+0x98>)
    2b8c:	4798      	blx	r3

		if( pxTCB == pxCurrentTCB )
    2b8e:	4b15      	ldr	r3, [pc, #84]	; (2be4 <vTaskSuspend+0x88>)
    2b90:	681b      	ldr	r3, [r3, #0]
    2b92:	429c      	cmp	r4, r3
    2b94:	d119      	bne.n	2bca <vTaskSuspend+0x6e>
		{
			if( xSchedulerRunning != pdFALSE )
    2b96:	4b18      	ldr	r3, [pc, #96]	; (2bf8 <vTaskSuspend+0x9c>)
    2b98:	681b      	ldr	r3, [r3, #0]
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d008      	beq.n	2bb0 <vTaskSuspend+0x54>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    2b9e:	4b17      	ldr	r3, [pc, #92]	; (2bfc <vTaskSuspend+0xa0>)
    2ba0:	681b      	ldr	r3, [r3, #0]
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d001      	beq.n	2baa <vTaskSuspend+0x4e>
    2ba6:	b672      	cpsid	i
    2ba8:	e7fe      	b.n	2ba8 <vTaskSuspend+0x4c>
				portYIELD_WITHIN_API();
    2baa:	4b15      	ldr	r3, [pc, #84]	; (2c00 <vTaskSuspend+0xa4>)
    2bac:	4798      	blx	r3
    2bae:	e016      	b.n	2bde <vTaskSuspend+0x82>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    2bb0:	4b14      	ldr	r3, [pc, #80]	; (2c04 <vTaskSuspend+0xa8>)
    2bb2:	681b      	ldr	r3, [r3, #0]
    2bb4:	4a0d      	ldr	r2, [pc, #52]	; (2bec <vTaskSuspend+0x90>)
    2bb6:	6812      	ldr	r2, [r2, #0]
    2bb8:	429a      	cmp	r2, r3
    2bba:	d103      	bne.n	2bc4 <vTaskSuspend+0x68>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    2bbc:	2200      	movs	r2, #0
    2bbe:	4b09      	ldr	r3, [pc, #36]	; (2be4 <vTaskSuspend+0x88>)
    2bc0:	601a      	str	r2, [r3, #0]
    2bc2:	e00c      	b.n	2bde <vTaskSuspend+0x82>
				}
				else
				{
					vTaskSwitchContext();
    2bc4:	4b10      	ldr	r3, [pc, #64]	; (2c08 <vTaskSuspend+0xac>)
    2bc6:	4798      	blx	r3
    2bc8:	e009      	b.n	2bde <vTaskSuspend+0x82>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
    2bca:	4b0b      	ldr	r3, [pc, #44]	; (2bf8 <vTaskSuspend+0x9c>)
    2bcc:	681b      	ldr	r3, [r3, #0]
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d005      	beq.n	2bde <vTaskSuspend+0x82>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
    2bd2:	4b03      	ldr	r3, [pc, #12]	; (2be0 <vTaskSuspend+0x84>)
    2bd4:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
    2bd6:	4b0d      	ldr	r3, [pc, #52]	; (2c0c <vTaskSuspend+0xb0>)
    2bd8:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
    2bda:	4b06      	ldr	r3, [pc, #24]	; (2bf4 <vTaskSuspend+0x98>)
    2bdc:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2bde:	bd38      	pop	{r3, r4, r5, pc}
    2be0:	00001b85 	.word	0x00001b85
    2be4:	20003c38 	.word	0x20003c38
    2be8:	00001af1 	.word	0x00001af1
    2bec:	20003c64 	.word	0x20003c64
    2bf0:	00001aa9 	.word	0x00001aa9
    2bf4:	00001b9d 	.word	0x00001b9d
    2bf8:	20003b8c 	.word	0x20003b8c
    2bfc:	20003c50 	.word	0x20003c50
    2c00:	00001b6d 	.word	0x00001b6d
    2c04:	20003c60 	.word	0x20003c60
    2c08:	00002ac5 	.word	0x00002ac5
    2c0c:	00002439 	.word	0x00002439

00002c10 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    2c10:	b538      	push	{r3, r4, r5, lr}
    2c12:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    2c14:	2800      	cmp	r0, #0
    2c16:	d101      	bne.n	2c1c <vTaskPlaceOnEventList+0xc>
    2c18:	b672      	cpsid	i
    2c1a:	e7fe      	b.n	2c1a <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2c1c:	4d0b      	ldr	r5, [pc, #44]	; (2c4c <vTaskPlaceOnEventList+0x3c>)
    2c1e:	6829      	ldr	r1, [r5, #0]
    2c20:	3118      	adds	r1, #24
    2c22:	4b0b      	ldr	r3, [pc, #44]	; (2c50 <vTaskPlaceOnEventList+0x40>)
    2c24:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2c26:	6828      	ldr	r0, [r5, #0]
    2c28:	3004      	adds	r0, #4
    2c2a:	4b0a      	ldr	r3, [pc, #40]	; (2c54 <vTaskPlaceOnEventList+0x44>)
    2c2c:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    2c2e:	1c63      	adds	r3, r4, #1
    2c30:	d106      	bne.n	2c40 <vTaskPlaceOnEventList+0x30>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2c32:	4b06      	ldr	r3, [pc, #24]	; (2c4c <vTaskPlaceOnEventList+0x3c>)
    2c34:	6819      	ldr	r1, [r3, #0]
    2c36:	3104      	adds	r1, #4
    2c38:	4807      	ldr	r0, [pc, #28]	; (2c58 <vTaskPlaceOnEventList+0x48>)
    2c3a:	4b08      	ldr	r3, [pc, #32]	; (2c5c <vTaskPlaceOnEventList+0x4c>)
    2c3c:	4798      	blx	r3
    2c3e:	e004      	b.n	2c4a <vTaskPlaceOnEventList+0x3a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    2c40:	4b07      	ldr	r3, [pc, #28]	; (2c60 <vTaskPlaceOnEventList+0x50>)
    2c42:	6818      	ldr	r0, [r3, #0]
    2c44:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2c46:	4b07      	ldr	r3, [pc, #28]	; (2c64 <vTaskPlaceOnEventList+0x54>)
    2c48:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2c4a:	bd38      	pop	{r3, r4, r5, pc}
    2c4c:	20003c38 	.word	0x20003c38
    2c50:	00001ac1 	.word	0x00001ac1
    2c54:	00001af1 	.word	0x00001af1
    2c58:	20003c64 	.word	0x20003c64
    2c5c:	00001aa9 	.word	0x00001aa9
    2c60:	20003c54 	.word	0x20003c54
    2c64:	00002465 	.word	0x00002465

00002c68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    2c68:	b538      	push	{r3, r4, r5, lr}
    2c6a:	1c0d      	adds	r5, r1, #0
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    2c6c:	2800      	cmp	r0, #0
    2c6e:	d101      	bne.n	2c74 <vTaskPlaceOnEventListRestricted+0xc>
    2c70:	b672      	cpsid	i
    2c72:	e7fe      	b.n	2c72 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2c74:	4c07      	ldr	r4, [pc, #28]	; (2c94 <vTaskPlaceOnEventListRestricted+0x2c>)
    2c76:	6821      	ldr	r1, [r4, #0]
    2c78:	3118      	adds	r1, #24
    2c7a:	4b07      	ldr	r3, [pc, #28]	; (2c98 <vTaskPlaceOnEventListRestricted+0x30>)
    2c7c:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2c7e:	6820      	ldr	r0, [r4, #0]
    2c80:	3004      	adds	r0, #4
    2c82:	4b06      	ldr	r3, [pc, #24]	; (2c9c <vTaskPlaceOnEventListRestricted+0x34>)
    2c84:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    2c86:	4b06      	ldr	r3, [pc, #24]	; (2ca0 <vTaskPlaceOnEventListRestricted+0x38>)
    2c88:	6818      	ldr	r0, [r3, #0]
    2c8a:	1828      	adds	r0, r5, r0

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    2c8c:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <vTaskPlaceOnEventListRestricted+0x3c>)
    2c8e:	4798      	blx	r3
	}
    2c90:	bd38      	pop	{r3, r4, r5, pc}
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	20003c38 	.word	0x20003c38
    2c98:	00001aa9 	.word	0x00001aa9
    2c9c:	00001af1 	.word	0x00001af1
    2ca0:	20003c54 	.word	0x20003c54
    2ca4:	00002465 	.word	0x00002465

00002ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    2ca8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2caa:	68c3      	ldr	r3, [r0, #12]
    2cac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2cae:	2c00      	cmp	r4, #0
    2cb0:	d101      	bne.n	2cb6 <xTaskRemoveFromEventList+0xe>
    2cb2:	b672      	cpsid	i
    2cb4:	e7fe      	b.n	2cb4 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2cb6:	1c25      	adds	r5, r4, #0
    2cb8:	3518      	adds	r5, #24
    2cba:	1c28      	adds	r0, r5, #0
    2cbc:	4b14      	ldr	r3, [pc, #80]	; (2d10 <xTaskRemoveFromEventList+0x68>)
    2cbe:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2cc0:	4b14      	ldr	r3, [pc, #80]	; (2d14 <xTaskRemoveFromEventList+0x6c>)
    2cc2:	681b      	ldr	r3, [r3, #0]
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d113      	bne.n	2cf0 <xTaskRemoveFromEventList+0x48>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2cc8:	1d25      	adds	r5, r4, #4
    2cca:	1c28      	adds	r0, r5, #0
    2ccc:	4b10      	ldr	r3, [pc, #64]	; (2d10 <xTaskRemoveFromEventList+0x68>)
    2cce:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    2cd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2cd2:	4a11      	ldr	r2, [pc, #68]	; (2d18 <xTaskRemoveFromEventList+0x70>)
    2cd4:	6812      	ldr	r2, [r2, #0]
    2cd6:	4293      	cmp	r3, r2
    2cd8:	d901      	bls.n	2cde <xTaskRemoveFromEventList+0x36>
    2cda:	4a0f      	ldr	r2, [pc, #60]	; (2d18 <xTaskRemoveFromEventList+0x70>)
    2cdc:	6013      	str	r3, [r2, #0]
    2cde:	009a      	lsls	r2, r3, #2
    2ce0:	18d3      	adds	r3, r2, r3
    2ce2:	009b      	lsls	r3, r3, #2
    2ce4:	480d      	ldr	r0, [pc, #52]	; (2d1c <xTaskRemoveFromEventList+0x74>)
    2ce6:	18c0      	adds	r0, r0, r3
    2ce8:	1c29      	adds	r1, r5, #0
    2cea:	4b0d      	ldr	r3, [pc, #52]	; (2d20 <xTaskRemoveFromEventList+0x78>)
    2cec:	4798      	blx	r3
    2cee:	e003      	b.n	2cf8 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2cf0:	480c      	ldr	r0, [pc, #48]	; (2d24 <xTaskRemoveFromEventList+0x7c>)
    2cf2:	1c29      	adds	r1, r5, #0
    2cf4:	4b0a      	ldr	r3, [pc, #40]	; (2d20 <xTaskRemoveFromEventList+0x78>)
    2cf6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2cf8:	4b0b      	ldr	r3, [pc, #44]	; (2d28 <xTaskRemoveFromEventList+0x80>)
    2cfa:	681b      	ldr	r3, [r3, #0]
    2cfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    2d00:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    2d02:	429a      	cmp	r2, r3
    2d04:	d903      	bls.n	2d0e <xTaskRemoveFromEventList+0x66>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    2d06:	2201      	movs	r2, #1
    2d08:	4b08      	ldr	r3, [pc, #32]	; (2d2c <xTaskRemoveFromEventList+0x84>)
    2d0a:	601a      	str	r2, [r3, #0]
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    2d0c:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    2d0e:	bd38      	pop	{r3, r4, r5, pc}
    2d10:	00001af1 	.word	0x00001af1
    2d14:	20003c50 	.word	0x20003c50
    2d18:	20003c78 	.word	0x20003c78
    2d1c:	20003bc0 	.word	0x20003bc0
    2d20:	00001aa9 	.word	0x00001aa9
    2d24:	20003c3c 	.word	0x20003c3c
    2d28:	20003c38 	.word	0x20003c38
    2d2c:	20003c7c 	.word	0x20003c7c

00002d30 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    2d30:	2800      	cmp	r0, #0
    2d32:	d101      	bne.n	2d38 <vTaskSetTimeOutState+0x8>
    2d34:	b672      	cpsid	i
    2d36:	e7fe      	b.n	2d36 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2d38:	4b03      	ldr	r3, [pc, #12]	; (2d48 <vTaskSetTimeOutState+0x18>)
    2d3a:	681b      	ldr	r3, [r3, #0]
    2d3c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    2d3e:	4b03      	ldr	r3, [pc, #12]	; (2d4c <vTaskSetTimeOutState+0x1c>)
    2d40:	681b      	ldr	r3, [r3, #0]
    2d42:	6043      	str	r3, [r0, #4]
}
    2d44:	4770      	bx	lr
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	20003b84 	.word	0x20003b84
    2d4c:	20003c54 	.word	0x20003c54

00002d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    2d50:	b570      	push	{r4, r5, r6, lr}
    2d52:	1c04      	adds	r4, r0, #0
    2d54:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    2d56:	2800      	cmp	r0, #0
    2d58:	d101      	bne.n	2d5e <xTaskCheckForTimeOut+0xe>
    2d5a:	b672      	cpsid	i
    2d5c:	e7fe      	b.n	2d5c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    2d5e:	2900      	cmp	r1, #0
    2d60:	d101      	bne.n	2d66 <xTaskCheckForTimeOut+0x16>
    2d62:	b672      	cpsid	i
    2d64:	e7fe      	b.n	2d64 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    2d66:	4b11      	ldr	r3, [pc, #68]	; (2dac <xTaskCheckForTimeOut+0x5c>)
    2d68:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2d6a:	4b11      	ldr	r3, [pc, #68]	; (2db0 <xTaskCheckForTimeOut+0x60>)
    2d6c:	681a      	ldr	r2, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    2d6e:	6833      	ldr	r3, [r6, #0]
    2d70:	1c58      	adds	r0, r3, #1
    2d72:	d015      	beq.n	2da0 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2d74:	490f      	ldr	r1, [pc, #60]	; (2db4 <xTaskCheckForTimeOut+0x64>)
    2d76:	6809      	ldr	r1, [r1, #0]
    2d78:	6820      	ldr	r0, [r4, #0]
    2d7a:	4288      	cmp	r0, r1
    2d7c:	d003      	beq.n	2d86 <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2d7e:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2d80:	6861      	ldr	r1, [r4, #4]
    2d82:	428a      	cmp	r2, r1
    2d84:	d20d      	bcs.n	2da2 <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2d86:	6861      	ldr	r1, [r4, #4]
    2d88:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2d8a:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2d8c:	4283      	cmp	r3, r0
    2d8e:	d908      	bls.n	2da2 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    2d90:	1a8a      	subs	r2, r1, r2
    2d92:	18d3      	adds	r3, r2, r3
    2d94:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    2d96:	1c20      	adds	r0, r4, #0
    2d98:	4b07      	ldr	r3, [pc, #28]	; (2db8 <xTaskCheckForTimeOut+0x68>)
    2d9a:	4798      	blx	r3
			xReturn = pdFALSE;
    2d9c:	2500      	movs	r5, #0
    2d9e:	e000      	b.n	2da2 <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    2da0:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    2da2:	4b06      	ldr	r3, [pc, #24]	; (2dbc <xTaskCheckForTimeOut+0x6c>)
    2da4:	4798      	blx	r3

	return xReturn;
}
    2da6:	1c28      	adds	r0, r5, #0
    2da8:	bd70      	pop	{r4, r5, r6, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	00001b85 	.word	0x00001b85
    2db0:	20003c54 	.word	0x20003c54
    2db4:	20003b84 	.word	0x20003b84
    2db8:	00002d31 	.word	0x00002d31
    2dbc:	00001b9d 	.word	0x00001b9d

00002dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    2dc0:	2201      	movs	r2, #1
    2dc2:	4b01      	ldr	r3, [pc, #4]	; (2dc8 <vTaskMissedYield+0x8>)
    2dc4:	601a      	str	r2, [r3, #0]
}
    2dc6:	4770      	bx	lr
    2dc8:	20003c7c 	.word	0x20003c7c

00002dcc <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2dcc:	4b01      	ldr	r3, [pc, #4]	; (2dd4 <xTaskGetCurrentTaskHandle+0x8>)
    2dce:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    2dd0:	4770      	bx	lr
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	20003c38 	.word	0x20003c38

00002dd8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2dd8:	4b05      	ldr	r3, [pc, #20]	; (2df0 <xTaskGetSchedulerState+0x18>)
    2dda:	681b      	ldr	r3, [r3, #0]
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    2ddc:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    2dde:	2b00      	cmp	r3, #0
    2de0:	d004      	beq.n	2dec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2de2:	4b04      	ldr	r3, [pc, #16]	; (2df4 <xTaskGetSchedulerState+0x1c>)
    2de4:	6818      	ldr	r0, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
    2de6:	4243      	negs	r3, r0
    2de8:	4158      	adcs	r0, r3
    2dea:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    2dec:	4770      	bx	lr
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	20003b8c 	.word	0x20003b8c
    2df4:	20003c50 	.word	0x20003c50

00002df8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    2df8:	b538      	push	{r3, r4, r5, lr}
    2dfa:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    2dfc:	d031      	beq.n	2e62 <vTaskPriorityInherit+0x6a>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2dfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2e00:	4a18      	ldr	r2, [pc, #96]	; (2e64 <vTaskPriorityInherit+0x6c>)
    2e02:	6812      	ldr	r2, [r2, #0]
    2e04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2e06:	4293      	cmp	r3, r2
    2e08:	d22b      	bcs.n	2e62 <vTaskPriorityInherit+0x6a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2e0a:	6982      	ldr	r2, [r0, #24]
    2e0c:	2a00      	cmp	r2, #0
    2e0e:	db05      	blt.n	2e1c <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e10:	4a14      	ldr	r2, [pc, #80]	; (2e64 <vTaskPriorityInherit+0x6c>)
    2e12:	6812      	ldr	r2, [r2, #0]
    2e14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2e16:	2105      	movs	r1, #5
    2e18:	1a8a      	subs	r2, r1, r2
    2e1a:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2e1c:	009a      	lsls	r2, r3, #2
    2e1e:	18d3      	adds	r3, r2, r3
    2e20:	009b      	lsls	r3, r3, #2
    2e22:	4a11      	ldr	r2, [pc, #68]	; (2e68 <vTaskPriorityInherit+0x70>)
    2e24:	18d3      	adds	r3, r2, r3
    2e26:	6962      	ldr	r2, [r4, #20]
    2e28:	429a      	cmp	r2, r3
    2e2a:	d116      	bne.n	2e5a <vTaskPriorityInherit+0x62>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e2c:	1d25      	adds	r5, r4, #4
    2e2e:	1c28      	adds	r0, r5, #0
    2e30:	4b0e      	ldr	r3, [pc, #56]	; (2e6c <vTaskPriorityInherit+0x74>)
    2e32:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2e34:	4b0b      	ldr	r3, [pc, #44]	; (2e64 <vTaskPriorityInherit+0x6c>)
    2e36:	681b      	ldr	r3, [r3, #0]
    2e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    2e3c:	4a0c      	ldr	r2, [pc, #48]	; (2e70 <vTaskPriorityInherit+0x78>)
    2e3e:	6812      	ldr	r2, [r2, #0]
    2e40:	4293      	cmp	r3, r2
    2e42:	d901      	bls.n	2e48 <vTaskPriorityInherit+0x50>
    2e44:	4a0a      	ldr	r2, [pc, #40]	; (2e70 <vTaskPriorityInherit+0x78>)
    2e46:	6013      	str	r3, [r2, #0]
    2e48:	0098      	lsls	r0, r3, #2
    2e4a:	18c3      	adds	r3, r0, r3
    2e4c:	009b      	lsls	r3, r3, #2
    2e4e:	4806      	ldr	r0, [pc, #24]	; (2e68 <vTaskPriorityInherit+0x70>)
    2e50:	18c0      	adds	r0, r0, r3
    2e52:	1c29      	adds	r1, r5, #0
    2e54:	4b07      	ldr	r3, [pc, #28]	; (2e74 <vTaskPriorityInherit+0x7c>)
    2e56:	4798      	blx	r3
    2e58:	e003      	b.n	2e62 <vTaskPriorityInherit+0x6a>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2e5a:	4b02      	ldr	r3, [pc, #8]	; (2e64 <vTaskPriorityInherit+0x6c>)
    2e5c:	681b      	ldr	r3, [r3, #0]
    2e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e60:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2e62:	bd38      	pop	{r3, r4, r5, pc}
    2e64:	20003c38 	.word	0x20003c38
    2e68:	20003bc0 	.word	0x20003bc0
    2e6c:	00001af1 	.word	0x00001af1
    2e70:	20003c78 	.word	0x20003c78
    2e74:	00001aa9 	.word	0x00001aa9

00002e78 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    2e78:	b538      	push	{r3, r4, r5, lr}
    2e7a:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2e7c:	d01d      	beq.n	2eba <vTaskPriorityDisinherit+0x42>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2e7e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2e80:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    2e82:	429a      	cmp	r2, r3
    2e84:	d019      	beq.n	2eba <vTaskPriorityDisinherit+0x42>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2e86:	1d05      	adds	r5, r0, #4
    2e88:	1c28      	adds	r0, r5, #0
    2e8a:	4b0c      	ldr	r3, [pc, #48]	; (2ebc <vTaskPriorityDisinherit+0x44>)
    2e8c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2e8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2e90:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    2e92:	69a2      	ldr	r2, [r4, #24]
    2e94:	2a00      	cmp	r2, #0
    2e96:	db02      	blt.n	2e9e <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e98:	2205      	movs	r2, #5
    2e9a:	1ad2      	subs	r2, r2, r3
    2e9c:	61a2      	str	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    2e9e:	4a08      	ldr	r2, [pc, #32]	; (2ec0 <vTaskPriorityDisinherit+0x48>)
    2ea0:	6812      	ldr	r2, [r2, #0]
    2ea2:	4293      	cmp	r3, r2
    2ea4:	d901      	bls.n	2eaa <vTaskPriorityDisinherit+0x32>
    2ea6:	4a06      	ldr	r2, [pc, #24]	; (2ec0 <vTaskPriorityDisinherit+0x48>)
    2ea8:	6013      	str	r3, [r2, #0]
    2eaa:	0098      	lsls	r0, r3, #2
    2eac:	18c3      	adds	r3, r0, r3
    2eae:	009b      	lsls	r3, r3, #2
    2eb0:	4804      	ldr	r0, [pc, #16]	; (2ec4 <vTaskPriorityDisinherit+0x4c>)
    2eb2:	18c0      	adds	r0, r0, r3
    2eb4:	1c29      	adds	r1, r5, #0
    2eb6:	4b04      	ldr	r3, [pc, #16]	; (2ec8 <vTaskPriorityDisinherit+0x50>)
    2eb8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2eba:	bd38      	pop	{r3, r4, r5, pc}
    2ebc:	00001af1 	.word	0x00001af1
    2ec0:	20003c78 	.word	0x20003c78
    2ec4:	20003bc0 	.word	0x20003bc0
    2ec8:	00001aa9 	.word	0x00001aa9

00002ecc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    2ecc:	b510      	push	{r4, lr}
    2ece:	1c04      	adds	r4, r0, #0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2ed0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2ed2:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    2ed4:	4291      	cmp	r1, r2
    2ed6:	d80b      	bhi.n	2ef0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    2ed8:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    2eda:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    2edc:	69a3      	ldr	r3, [r4, #24]
    2ede:	429a      	cmp	r2, r3
    2ee0:	d211      	bcs.n	2f06 <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2ee2:	4b09      	ldr	r3, [pc, #36]	; (2f08 <prvInsertTimerInActiveList+0x3c>)
    2ee4:	6818      	ldr	r0, [r3, #0]
    2ee6:	1d21      	adds	r1, r4, #4
    2ee8:	4b08      	ldr	r3, [pc, #32]	; (2f0c <prvInsertTimerInActiveList+0x40>)
    2eea:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2eec:	2000      	movs	r0, #0
    2eee:	e00a      	b.n	2f06 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2ef0:	429a      	cmp	r2, r3
    2ef2:	d202      	bcs.n	2efa <prvInsertTimerInActiveList+0x2e>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    2ef4:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2ef6:	4299      	cmp	r1, r3
    2ef8:	d205      	bcs.n	2f06 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2efa:	4b05      	ldr	r3, [pc, #20]	; (2f10 <prvInsertTimerInActiveList+0x44>)
    2efc:	6818      	ldr	r0, [r3, #0]
    2efe:	1d21      	adds	r1, r4, #4
    2f00:	4b02      	ldr	r3, [pc, #8]	; (2f0c <prvInsertTimerInActiveList+0x40>)
    2f02:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2f04:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    2f06:	bd10      	pop	{r4, pc}
    2f08:	20003cb4 	.word	0x20003cb4
    2f0c:	00001ac1 	.word	0x00001ac1
    2f10:	20003c80 	.word	0x20003c80

00002f14 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    2f14:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    2f16:	4b10      	ldr	r3, [pc, #64]	; (2f58 <prvCheckForValidListAndQueue+0x44>)
    2f18:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    2f1a:	4b10      	ldr	r3, [pc, #64]	; (2f5c <prvCheckForValidListAndQueue+0x48>)
    2f1c:	681b      	ldr	r3, [r3, #0]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d116      	bne.n	2f50 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    2f22:	4d0f      	ldr	r5, [pc, #60]	; (2f60 <prvCheckForValidListAndQueue+0x4c>)
    2f24:	1c28      	adds	r0, r5, #0
    2f26:	4e0f      	ldr	r6, [pc, #60]	; (2f64 <prvCheckForValidListAndQueue+0x50>)
    2f28:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    2f2a:	4c0f      	ldr	r4, [pc, #60]	; (2f68 <prvCheckForValidListAndQueue+0x54>)
    2f2c:	1c20      	adds	r0, r4, #0
    2f2e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    2f30:	4b0e      	ldr	r3, [pc, #56]	; (2f6c <prvCheckForValidListAndQueue+0x58>)
    2f32:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    2f34:	4b0e      	ldr	r3, [pc, #56]	; (2f70 <prvCheckForValidListAndQueue+0x5c>)
    2f36:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2f38:	2002      	movs	r0, #2
    2f3a:	210c      	movs	r1, #12
    2f3c:	2200      	movs	r2, #0
    2f3e:	4b0d      	ldr	r3, [pc, #52]	; (2f74 <prvCheckForValidListAndQueue+0x60>)
    2f40:	4798      	blx	r3
			configASSERT( xTimerQueue );
    2f42:	2800      	cmp	r0, #0
    2f44:	d002      	beq.n	2f4c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2f46:	4b05      	ldr	r3, [pc, #20]	; (2f5c <prvCheckForValidListAndQueue+0x48>)
    2f48:	6018      	str	r0, [r3, #0]
    2f4a:	e001      	b.n	2f50 <prvCheckForValidListAndQueue+0x3c>
			configASSERT( xTimerQueue );
    2f4c:	b672      	cpsid	i
    2f4e:	e7fe      	b.n	2f4e <prvCheckForValidListAndQueue+0x3a>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2f50:	4b09      	ldr	r3, [pc, #36]	; (2f78 <prvCheckForValidListAndQueue+0x64>)
    2f52:	4798      	blx	r3
}
    2f54:	bd70      	pop	{r4, r5, r6, pc}
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	00001b85 	.word	0x00001b85
    2f5c:	20003cb0 	.word	0x20003cb0
    2f60:	20003c84 	.word	0x20003c84
    2f64:	00001a89 	.word	0x00001a89
    2f68:	20003c98 	.word	0x20003c98
    2f6c:	20003c80 	.word	0x20003c80
    2f70:	20003cb4 	.word	0x20003cb4
    2f74:	00001f41 	.word	0x00001f41
    2f78:	00001b9d 	.word	0x00001b9d

00002f7c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2f7c:	b510      	push	{r4, lr}
    2f7e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    2f80:	4b0b      	ldr	r3, [pc, #44]	; (2fb0 <xTimerCreateTimerTask+0x34>)
    2f82:	4798      	blx	r3

	if( xTimerQueue != NULL )
    2f84:	4b0b      	ldr	r3, [pc, #44]	; (2fb4 <xTimerCreateTimerTask+0x38>)
    2f86:	681b      	ldr	r3, [r3, #0]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d00c      	beq.n	2fa6 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    2f8c:	2302      	movs	r3, #2
    2f8e:	9300      	str	r3, [sp, #0]
    2f90:	2300      	movs	r3, #0
    2f92:	9301      	str	r3, [sp, #4]
    2f94:	9302      	str	r3, [sp, #8]
    2f96:	9303      	str	r3, [sp, #12]
    2f98:	4807      	ldr	r0, [pc, #28]	; (2fb8 <xTimerCreateTimerTask+0x3c>)
    2f9a:	4908      	ldr	r1, [pc, #32]	; (2fbc <xTimerCreateTimerTask+0x40>)
    2f9c:	2250      	movs	r2, #80	; 0x50
    2f9e:	4c08      	ldr	r4, [pc, #32]	; (2fc0 <xTimerCreateTimerTask+0x44>)
    2fa0:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    2fa2:	2800      	cmp	r0, #0
    2fa4:	d101      	bne.n	2faa <xTimerCreateTimerTask+0x2e>
    2fa6:	b672      	cpsid	i
    2fa8:	e7fe      	b.n	2fa8 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
    2faa:	b004      	add	sp, #16
    2fac:	bd10      	pop	{r4, pc}
    2fae:	46c0      	nop			; (mov r8, r8)
    2fb0:	00002f15 	.word	0x00002f15
    2fb4:	20003cb0 	.word	0x20003cb0
    2fb8:	000030e5 	.word	0x000030e5
    2fbc:	00004fb8 	.word	0x00004fb8
    2fc0:	000024bd 	.word	0x000024bd

00002fc4 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2fc4:	b510      	push	{r4, lr}
    2fc6:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2fc8:	4c13      	ldr	r4, [pc, #76]	; (3018 <xTimerGenericCommand+0x54>)
    2fca:	6824      	ldr	r4, [r4, #0]
    2fcc:	2c00      	cmp	r4, #0
    2fce:	d01f      	beq.n	3010 <xTimerGenericCommand+0x4c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2fd0:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2fd2:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2fd4:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2fd6:	2905      	cmp	r1, #5
    2fd8:	dc13      	bgt.n	3002 <xTimerGenericCommand+0x3e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2fda:	4b10      	ldr	r3, [pc, #64]	; (301c <xTimerGenericCommand+0x58>)
    2fdc:	4798      	blx	r3
    2fde:	2802      	cmp	r0, #2
    2fe0:	d107      	bne.n	2ff2 <xTimerGenericCommand+0x2e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2fe2:	4b0d      	ldr	r3, [pc, #52]	; (3018 <xTimerGenericCommand+0x54>)
    2fe4:	6818      	ldr	r0, [r3, #0]
    2fe6:	a901      	add	r1, sp, #4
    2fe8:	9a06      	ldr	r2, [sp, #24]
    2fea:	2300      	movs	r3, #0
    2fec:	4c0c      	ldr	r4, [pc, #48]	; (3020 <xTimerGenericCommand+0x5c>)
    2fee:	47a0      	blx	r4
    2ff0:	e00f      	b.n	3012 <xTimerGenericCommand+0x4e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2ff2:	4b09      	ldr	r3, [pc, #36]	; (3018 <xTimerGenericCommand+0x54>)
    2ff4:	6818      	ldr	r0, [r3, #0]
    2ff6:	a901      	add	r1, sp, #4
    2ff8:	2200      	movs	r2, #0
    2ffa:	2300      	movs	r3, #0
    2ffc:	4c08      	ldr	r4, [pc, #32]	; (3020 <xTimerGenericCommand+0x5c>)
    2ffe:	47a0      	blx	r4
    3000:	e007      	b.n	3012 <xTimerGenericCommand+0x4e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3002:	1c20      	adds	r0, r4, #0
    3004:	a901      	add	r1, sp, #4
    3006:	1c1a      	adds	r2, r3, #0
    3008:	2300      	movs	r3, #0
    300a:	4c06      	ldr	r4, [pc, #24]	; (3024 <xTimerGenericCommand+0x60>)
    300c:	47a0      	blx	r4
    300e:	e000      	b.n	3012 <xTimerGenericCommand+0x4e>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    3010:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    3012:	b004      	add	sp, #16
    3014:	bd10      	pop	{r4, pc}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	20003cb0 	.word	0x20003cb0
    301c:	00002dd9 	.word	0x00002dd9
    3020:	00001f95 	.word	0x00001f95
    3024:	00002161 	.word	0x00002161

00003028 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3028:	b5f0      	push	{r4, r5, r6, r7, lr}
    302a:	4657      	mov	r7, sl
    302c:	464e      	mov	r6, r9
    302e:	4645      	mov	r5, r8
    3030:	b4e0      	push	{r5, r6, r7}
    3032:	b082      	sub	sp, #8
    3034:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    3036:	4b24      	ldr	r3, [pc, #144]	; (30c8 <prvSampleTimeNow+0xa0>)
    3038:	4798      	blx	r3
    303a:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    303c:	4b23      	ldr	r3, [pc, #140]	; (30cc <prvSampleTimeNow+0xa4>)
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	4298      	cmp	r0, r3
    3042:	d234      	bcs.n	30ae <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3044:	4e22      	ldr	r6, [pc, #136]	; (30d0 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3046:	4f23      	ldr	r7, [pc, #140]	; (30d4 <prvSampleTimeNow+0xac>)
    3048:	e024      	b.n	3094 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    304a:	68db      	ldr	r3, [r3, #12]
    304c:	6818      	ldr	r0, [r3, #0]
    304e:	4682      	mov	sl, r0

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    3050:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3052:	1d25      	adds	r5, r4, #4
    3054:	1c28      	adds	r0, r5, #0
    3056:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3058:	1c20      	adds	r0, r4, #0
    305a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    305c:	4788      	blx	r1

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    305e:	69e2      	ldr	r2, [r4, #28]
    3060:	2a01      	cmp	r2, #1
    3062:	d117      	bne.n	3094 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3064:	69a0      	ldr	r0, [r4, #24]
    3066:	1c03      	adds	r3, r0, #0
    3068:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    306a:	4553      	cmp	r3, sl
    306c:	d907      	bls.n	307e <prvSampleTimeNow+0x56>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    306e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3070:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3072:	4b17      	ldr	r3, [pc, #92]	; (30d0 <prvSampleTimeNow+0xa8>)
    3074:	6818      	ldr	r0, [r3, #0]
    3076:	1c29      	adds	r1, r5, #0
    3078:	4b17      	ldr	r3, [pc, #92]	; (30d8 <prvSampleTimeNow+0xb0>)
    307a:	4798      	blx	r3
    307c:	e00a      	b.n	3094 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    307e:	2300      	movs	r3, #0
    3080:	9300      	str	r3, [sp, #0]
    3082:	1c20      	adds	r0, r4, #0
    3084:	2100      	movs	r1, #0
    3086:	4652      	mov	r2, sl
    3088:	4c14      	ldr	r4, [pc, #80]	; (30dc <prvSampleTimeNow+0xb4>)
    308a:	47a0      	blx	r4
				configASSERT( xResult );
    308c:	2800      	cmp	r0, #0
    308e:	d101      	bne.n	3094 <prvSampleTimeNow+0x6c>
    3090:	b672      	cpsid	i
    3092:	e7fe      	b.n	3092 <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3094:	6833      	ldr	r3, [r6, #0]
    3096:	6818      	ldr	r0, [r3, #0]
    3098:	2800      	cmp	r0, #0
    309a:	d1d6      	bne.n	304a <prvSampleTimeNow+0x22>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    309c:	4a10      	ldr	r2, [pc, #64]	; (30e0 <prvSampleTimeNow+0xb8>)
    309e:	490c      	ldr	r1, [pc, #48]	; (30d0 <prvSampleTimeNow+0xa8>)
    30a0:	6814      	ldr	r4, [r2, #0]
    30a2:	600c      	str	r4, [r1, #0]
	pxOverflowTimerList = pxTemp;
    30a4:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    30a6:	2301      	movs	r3, #1
    30a8:	4648      	mov	r0, r9
    30aa:	6003      	str	r3, [r0, #0]
    30ac:	e002      	b.n	30b4 <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    30ae:	2300      	movs	r3, #0
    30b0:	4649      	mov	r1, r9
    30b2:	600b      	str	r3, [r1, #0]
	}

	xLastTime = xTimeNow;
    30b4:	4b05      	ldr	r3, [pc, #20]	; (30cc <prvSampleTimeNow+0xa4>)
    30b6:	4642      	mov	r2, r8
    30b8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
}
    30ba:	4640      	mov	r0, r8
    30bc:	b002      	add	sp, #8
    30be:	bc1c      	pop	{r2, r3, r4}
    30c0:	4690      	mov	r8, r2
    30c2:	4699      	mov	r9, r3
    30c4:	46a2      	mov	sl, r4
    30c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30c8:	000027a1 	.word	0x000027a1
    30cc:	20003cac 	.word	0x20003cac
    30d0:	20003c80 	.word	0x20003c80
    30d4:	00001af1 	.word	0x00001af1
    30d8:	00001ac1 	.word	0x00001ac1
    30dc:	00002fc5 	.word	0x00002fc5
    30e0:	20003cb4 	.word	0x20003cb4

000030e4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    30e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30e6:	4647      	mov	r7, r8
    30e8:	b480      	push	{r7}
    30ea:	b086      	sub	sp, #24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    30ec:	484e      	ldr	r0, [pc, #312]	; (3228 <prvTimerTask+0x144>)
    30ee:	4680      	mov	r8, r0
    30f0:	4641      	mov	r1, r8
    30f2:	680b      	ldr	r3, [r1, #0]
	if( *pxListWasEmpty == pdFALSE )
    30f4:	681a      	ldr	r2, [r3, #0]
    30f6:	2a00      	cmp	r2, #0
    30f8:	d100      	bne.n	30fc <prvTimerTask+0x18>
    30fa:	e08a      	b.n	3212 <prvTimerTask+0x12e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    30fc:	68db      	ldr	r3, [r3, #12]
    30fe:	681c      	ldr	r4, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3100:	4b4a      	ldr	r3, [pc, #296]	; (322c <prvTimerTask+0x148>)
    3102:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3104:	a803      	add	r0, sp, #12
    3106:	4b4a      	ldr	r3, [pc, #296]	; (3230 <prvTimerTask+0x14c>)
    3108:	4798      	blx	r3
    310a:	1c05      	adds	r5, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    310c:	9b03      	ldr	r3, [sp, #12]
    310e:	2b00      	cmp	r3, #0
    3110:	d131      	bne.n	3176 <prvTimerTask+0x92>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3112:	4284      	cmp	r4, r0
    3114:	d823      	bhi.n	315e <prvTimerTask+0x7a>
			{
				( void ) xTaskResumeAll();
    3116:	4b47      	ldr	r3, [pc, #284]	; (3234 <prvTimerTask+0x150>)
    3118:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    311a:	4b43      	ldr	r3, [pc, #268]	; (3228 <prvTimerTask+0x144>)
    311c:	681b      	ldr	r3, [r3, #0]
    311e:	68db      	ldr	r3, [r3, #12]
    3120:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3122:	1d30      	adds	r0, r6, #4
    3124:	4b44      	ldr	r3, [pc, #272]	; (3238 <prvTimerTask+0x154>)
    3126:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    3128:	69f7      	ldr	r7, [r6, #28]
    312a:	2f01      	cmp	r7, #1
    312c:	d113      	bne.n	3156 <prvTimerTask+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    312e:	69b0      	ldr	r0, [r6, #24]
    3130:	1821      	adds	r1, r4, r0
    3132:	1c30      	adds	r0, r6, #0
    3134:	1c2a      	adds	r2, r5, #0
    3136:	1c23      	adds	r3, r4, #0
    3138:	4d40      	ldr	r5, [pc, #256]	; (323c <prvTimerTask+0x158>)
    313a:	47a8      	blx	r5
    313c:	2801      	cmp	r0, #1
    313e:	d10a      	bne.n	3156 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3140:	2300      	movs	r3, #0
    3142:	9300      	str	r3, [sp, #0]
    3144:	1c30      	adds	r0, r6, #0
    3146:	2100      	movs	r1, #0
    3148:	1c22      	adds	r2, r4, #0
    314a:	4c3d      	ldr	r4, [pc, #244]	; (3240 <prvTimerTask+0x15c>)
    314c:	47a0      	blx	r4
			configASSERT( xResult );
    314e:	2800      	cmp	r0, #0
    3150:	d101      	bne.n	3156 <prvTimerTask+0x72>
    3152:	b672      	cpsid	i
    3154:	e7fe      	b.n	3154 <prvTimerTask+0x70>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3156:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3158:	1c30      	adds	r0, r6, #0
    315a:	4798      	blx	r3
    315c:	e00d      	b.n	317a <prvTimerTask+0x96>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    315e:	4b39      	ldr	r3, [pc, #228]	; (3244 <prvTimerTask+0x160>)
    3160:	6818      	ldr	r0, [r3, #0]
    3162:	1b61      	subs	r1, r4, r5
    3164:	4b38      	ldr	r3, [pc, #224]	; (3248 <prvTimerTask+0x164>)
    3166:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    3168:	4b32      	ldr	r3, [pc, #200]	; (3234 <prvTimerTask+0x150>)
    316a:	4798      	blx	r3
    316c:	2800      	cmp	r0, #0
    316e:	d104      	bne.n	317a <prvTimerTask+0x96>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    3170:	4b36      	ldr	r3, [pc, #216]	; (324c <prvTimerTask+0x168>)
    3172:	4798      	blx	r3
    3174:	e001      	b.n	317a <prvTimerTask+0x96>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    3176:	4b2f      	ldr	r3, [pc, #188]	; (3234 <prvTimerTask+0x150>)
    3178:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    317a:	4d32      	ldr	r5, [pc, #200]	; (3244 <prvTimerTask+0x160>)
    317c:	4c34      	ldr	r4, [pc, #208]	; (3250 <prvTimerTask+0x16c>)
    317e:	e040      	b.n	3202 <prvTimerTask+0x11e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3180:	9903      	ldr	r1, [sp, #12]
    3182:	2900      	cmp	r1, #0
    3184:	db3d      	blt.n	3202 <prvTimerTask+0x11e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3186:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    3188:	6972      	ldr	r2, [r6, #20]
    318a:	2a00      	cmp	r2, #0
    318c:	d002      	beq.n	3194 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    318e:	1d30      	adds	r0, r6, #4
    3190:	4b29      	ldr	r3, [pc, #164]	; (3238 <prvTimerTask+0x154>)
    3192:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3194:	a802      	add	r0, sp, #8
    3196:	4b26      	ldr	r3, [pc, #152]	; (3230 <prvTimerTask+0x14c>)
    3198:	4798      	blx	r3
    319a:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    319c:	9f03      	ldr	r7, [sp, #12]
    319e:	2f09      	cmp	r7, #9
    31a0:	d82f      	bhi.n	3202 <prvTimerTask+0x11e>
    31a2:	00ba      	lsls	r2, r7, #2
    31a4:	492b      	ldr	r1, [pc, #172]	; (3254 <prvTimerTask+0x170>)
    31a6:	588a      	ldr	r2, [r1, r2]
    31a8:	4697      	mov	pc, r2
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    31aa:	9f04      	ldr	r7, [sp, #16]
    31ac:	69b2      	ldr	r2, [r6, #24]
    31ae:	18b9      	adds	r1, r7, r2
    31b0:	1c30      	adds	r0, r6, #0
    31b2:	1c1a      	adds	r2, r3, #0
    31b4:	1c3b      	adds	r3, r7, #0
    31b6:	4f21      	ldr	r7, [pc, #132]	; (323c <prvTimerTask+0x158>)
    31b8:	47b8      	blx	r7
    31ba:	2801      	cmp	r0, #1
    31bc:	d121      	bne.n	3202 <prvTimerTask+0x11e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    31be:	1c30      	adds	r0, r6, #0
    31c0:	6a71      	ldr	r1, [r6, #36]	; 0x24
    31c2:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    31c4:	69f2      	ldr	r2, [r6, #28]
    31c6:	2a01      	cmp	r2, #1
    31c8:	d11b      	bne.n	3202 <prvTimerTask+0x11e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    31ca:	69b3      	ldr	r3, [r6, #24]
    31cc:	9f04      	ldr	r7, [sp, #16]
    31ce:	19da      	adds	r2, r3, r7
    31d0:	2300      	movs	r3, #0
    31d2:	9300      	str	r3, [sp, #0]
    31d4:	1c30      	adds	r0, r6, #0
    31d6:	2100      	movs	r1, #0
    31d8:	4e19      	ldr	r6, [pc, #100]	; (3240 <prvTimerTask+0x15c>)
    31da:	47b0      	blx	r6
							configASSERT( xResult );
    31dc:	2800      	cmp	r0, #0
    31de:	d110      	bne.n	3202 <prvTimerTask+0x11e>
    31e0:	b672      	cpsid	i
    31e2:	e7fe      	b.n	31e2 <prvTimerTask+0xfe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    31e4:	9904      	ldr	r1, [sp, #16]
    31e6:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    31e8:	2900      	cmp	r1, #0
    31ea:	d101      	bne.n	31f0 <prvTimerTask+0x10c>
    31ec:	b672      	cpsid	i
    31ee:	e7fe      	b.n	31ee <prvTimerTask+0x10a>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    31f0:	1859      	adds	r1, r3, r1
    31f2:	1c30      	adds	r0, r6, #0
    31f4:	1c1a      	adds	r2, r3, #0
    31f6:	4e11      	ldr	r6, [pc, #68]	; (323c <prvTimerTask+0x158>)
    31f8:	47b0      	blx	r6
    31fa:	e002      	b.n	3202 <prvTimerTask+0x11e>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    31fc:	1c30      	adds	r0, r6, #0
    31fe:	4b16      	ldr	r3, [pc, #88]	; (3258 <prvTimerTask+0x174>)
    3200:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3202:	6828      	ldr	r0, [r5, #0]
    3204:	a903      	add	r1, sp, #12
    3206:	2200      	movs	r2, #0
    3208:	2300      	movs	r3, #0
    320a:	47a0      	blx	r4
    320c:	2800      	cmp	r0, #0
    320e:	d1b7      	bne.n	3180 <prvTimerTask+0x9c>
    3210:	e76e      	b.n	30f0 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    3212:	4806      	ldr	r0, [pc, #24]	; (322c <prvTimerTask+0x148>)
    3214:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3216:	a803      	add	r0, sp, #12
    3218:	4905      	ldr	r1, [pc, #20]	; (3230 <prvTimerTask+0x14c>)
    321a:	4788      	blx	r1
    321c:	1c05      	adds	r5, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    321e:	2400      	movs	r4, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    3220:	9a03      	ldr	r2, [sp, #12]
    3222:	42a2      	cmp	r2, r4
    3224:	d09b      	beq.n	315e <prvTimerTask+0x7a>
    3226:	e7a6      	b.n	3176 <prvTimerTask+0x92>
    3228:	20003c80 	.word	0x20003c80
    322c:	00002791 	.word	0x00002791
    3230:	00003029 	.word	0x00003029
    3234:	000028ed 	.word	0x000028ed
    3238:	00001af1 	.word	0x00001af1
    323c:	00002ecd 	.word	0x00002ecd
    3240:	00002fc5 	.word	0x00002fc5
    3244:	20003cb0 	.word	0x20003cb0
    3248:	000023bd 	.word	0x000023bd
    324c:	00001b6d 	.word	0x00001b6d
    3250:	00002231 	.word	0x00002231
    3254:	00004f90 	.word	0x00004f90
    3258:	00001d25 	.word	0x00001d25

0000325c <cdc_rx_handler>:
 * to the sender.
 *
 * \param instance Instance number of SERCOM that generated interrupt.
 */
static void cdc_rx_handler(uint8_t instance)
{
    325c:	b530      	push	{r4, r5, lr}
    325e:	b083      	sub	sp, #12
	// Wait for synch to complete
#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	while (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY) {
	}
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	while (usart_hw->SYNCBUSY.reg) {
    3260:	4a17      	ldr	r2, [pc, #92]	; (32c0 <cdc_rx_handler+0x64>)
    3262:	69d3      	ldr	r3, [r2, #28]
    3264:	2b00      	cmp	r3, #0
    3266:	d1fc      	bne.n	3262 <cdc_rx_handler+0x6>
	}
#endif

	// Read and mask interrupt flag register
	interrupt_status = usart_hw->INTFLAG.reg;
    3268:	4b15      	ldr	r3, [pc, #84]	; (32c0 <cdc_rx_handler+0x64>)
    326a:	7e1c      	ldrb	r4, [r3, #24]
    326c:	b2e4      	uxtb	r4, r4

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    326e:	0762      	lsls	r2, r4, #29
    3270:	d523      	bpl.n	32ba <cdc_rx_handler+0x5e>
		// Check for errors
		error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    3272:	8b5b      	ldrh	r3, [r3, #26]
    3274:	b2db      	uxtb	r3, r3
		if (error_code) {
    3276:	069a      	lsls	r2, r3, #26
    3278:	d005      	beq.n	3286 <cdc_rx_handler+0x2a>
			// Only frame error and buffer overflow should be possible
			if (error_code &
    327a:	2206      	movs	r2, #6
    327c:	421a      	tst	r2, r3
    327e:	d01c      	beq.n	32ba <cdc_rx_handler+0x5e>
					(SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF)) {
				usart_hw->STATUS.reg =
    3280:	4b0f      	ldr	r3, [pc, #60]	; (32c0 <cdc_rx_handler+0x64>)
    3282:	835a      	strh	r2, [r3, #26]
    3284:	e019      	b.n	32ba <cdc_rx_handler+0x5e>
			} else {
				// Error: unknown failure
			}
		// All is fine, so push the received character into our queue
		} else {
			data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    3286:	4b0e      	ldr	r3, [pc, #56]	; (32c0 <cdc_rx_handler+0x64>)
    3288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    328a:	4669      	mov	r1, sp
    328c:	3106      	adds	r1, #6
    328e:	05db      	lsls	r3, r3, #23
    3290:	0ddb      	lsrs	r3, r3, #23
    3292:	800b      	strh	r3, [r1, #0]

			if (!xQueueSendFromISR(terminal_in_queue, (uint8_t *)&data,
    3294:	4b0b      	ldr	r3, [pc, #44]	; (32c4 <cdc_rx_handler+0x68>)
    3296:	6818      	ldr	r0, [r3, #0]
    3298:	2200      	movs	r2, #0
    329a:	2300      	movs	r3, #0
    329c:	4d0a      	ldr	r5, [pc, #40]	; (32c8 <cdc_rx_handler+0x6c>)
    329e:	47a8      	blx	r5
    32a0:	2800      	cmp	r0, #0
    32a2:	d00a      	beq.n	32ba <cdc_rx_handler+0x5e>
						NULL)) {
				// Error: could not enqueue character
			} else {
				// Echo back! Data reg. should empty fast since this is the
				// only place anything is sent.
				while (!(interrupt_status & SERCOM_USART_INTFLAG_DRE)) {
    32a4:	07e3      	lsls	r3, r4, #31
    32a6:	d404      	bmi.n	32b2 <cdc_rx_handler+0x56>
					interrupt_status = usart_hw->INTFLAG.reg;
    32a8:	4905      	ldr	r1, [pc, #20]	; (32c0 <cdc_rx_handler+0x64>)
						NULL)) {
				// Error: could not enqueue character
			} else {
				// Echo back! Data reg. should empty fast since this is the
				// only place anything is sent.
				while (!(interrupt_status & SERCOM_USART_INTFLAG_DRE)) {
    32aa:	2201      	movs	r2, #1
					interrupt_status = usart_hw->INTFLAG.reg;
    32ac:	7e0b      	ldrb	r3, [r1, #24]
						NULL)) {
				// Error: could not enqueue character
			} else {
				// Echo back! Data reg. should empty fast since this is the
				// only place anything is sent.
				while (!(interrupt_status & SERCOM_USART_INTFLAG_DRE)) {
    32ae:	4213      	tst	r3, r2
    32b0:	d0fc      	beq.n	32ac <cdc_rx_handler+0x50>
					interrupt_status = usart_hw->INTFLAG.reg;
				}
				usart_hw->DATA.reg = (uint8_t)data;
    32b2:	466b      	mov	r3, sp
    32b4:	799a      	ldrb	r2, [r3, #6]
    32b6:	4b02      	ldr	r3, [pc, #8]	; (32c0 <cdc_rx_handler+0x64>)
    32b8:	851a      	strh	r2, [r3, #40]	; 0x28
			}
		}
	} else {
		// Error: only RX interrupt should be enabled
	}
}
    32ba:	b003      	add	sp, #12
    32bc:	bd30      	pop	{r4, r5, pc}
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	42000800 	.word	0x42000800
    32c4:	20003d58 	.word	0x20003d58
    32c8:	00002161 	.word	0x00002161

000032cc <uart_task>:
 * anything to the display -- that is done by \ref terminal_task().
 *
 * \param params Parameters for the task. (Not used.)
 */
static void uart_task(void *params)
{
    32cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ce:	465f      	mov	r7, fp
    32d0:	4656      	mov	r6, sl
    32d2:	464d      	mov	r5, r9
    32d4:	4644      	mov	r4, r8
    32d6:	b4f0      	push	{r4, r5, r6, r7}
    32d8:	b083      	sub	sp, #12
	uint8_t *current_line_ptr;
	uint8_t *current_char_ptr;
	uint8_t current_column = 0;
    32da:	2500      	movs	r5, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    32dc:	4a2e      	ldr	r2, [pc, #184]	; (3398 <uart_task+0xcc>)
    32de:	4692      	mov	sl, r2
    32e0:	2480      	movs	r4, #128	; 0x80
    32e2:	02e4      	lsls	r4, r4, #11
    32e4:	9401      	str	r4, [sp, #4]
	for (;;) {
		// Show that task is executing
		oled1_set_led_state(&oled1, OLED1_LED1_ID, true);

		// Grab terminal mutex
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    32e6:	4a2d      	ldr	r2, [pc, #180]	; (339c <uart_task+0xd0>)
    32e8:	4693      	mov	fp, r2
    32ea:	9c01      	ldr	r4, [sp, #4]
    32ec:	4652      	mov	r2, sl
    32ee:	6154      	str	r4, [r2, #20]
    32f0:	465b      	mov	r3, fp
    32f2:	6818      	ldr	r0, [r3, #0]
    32f4:	2100      	movs	r1, #0
    32f6:	2201      	movs	r2, #1
    32f8:	4252      	negs	r2, r2
    32fa:	2300      	movs	r3, #0
    32fc:	4c28      	ldr	r4, [pc, #160]	; (33a0 <uart_task+0xd4>)
    32fe:	47a0      	blx	r4

		current_line_ptr = terminal_buffer[terminal_line_offset];
    3300:	4b28      	ldr	r3, [pc, #160]	; (33a4 <uart_task+0xd8>)
    3302:	781b      	ldrb	r3, [r3, #0]
    3304:	2216      	movs	r2, #22
    3306:	4353      	muls	r3, r2
    3308:	4a27      	ldr	r2, [pc, #156]	; (33a8 <uart_task+0xdc>)
    330a:	18d2      	adds	r2, r2, r3
    330c:	4690      	mov	r8, r2
		current_char_ptr = current_line_ptr + current_column;
    330e:	1954      	adds	r4, r2, r5

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) {
    3310:	4f26      	ldr	r7, [pc, #152]	; (33ac <uart_task+0xe0>)
    3312:	4e23      	ldr	r6, [pc, #140]	; (33a0 <uart_task+0xd4>)
			default:
				// For all other characters, just move head to next char
				current_column++;
				if (current_column >= TERMINAL_COLUMNS) {
					current_column = 0;
					terminal_line_offset = (terminal_line_offset + 1)
    3314:	4a23      	ldr	r2, [pc, #140]	; (33a4 <uart_task+0xd8>)
    3316:	4691      	mov	r9, r2

		current_line_ptr = terminal_buffer[terminal_line_offset];
		current_char_ptr = current_line_ptr + current_column;

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) {
    3318:	e027      	b.n	336a <uart_task+0x9e>
			/* Newline-handling is difficult because all terminal emulators
			 * seem to do it their own way. The method below seems to work
			 * with Putty and Realterm out of the box.
			 */
			switch (*current_char_ptr) {
    331a:	7823      	ldrb	r3, [r4, #0]
    331c:	2b0a      	cmp	r3, #10
    331e:	d022      	beq.n	3366 <uart_task+0x9a>
    3320:	2b0d      	cmp	r3, #13
    3322:	d10e      	bne.n	3342 <uart_task+0x76>
			case '\r':
				// Replace \r with \0 and move head to next line
				*current_char_ptr = '\0';
    3324:	2300      	movs	r3, #0
    3326:	7023      	strb	r3, [r4, #0]

				current_column = 0;
				terminal_line_offset = (terminal_line_offset + 1)
    3328:	4b1e      	ldr	r3, [pc, #120]	; (33a4 <uart_task+0xd8>)
    332a:	781c      	ldrb	r4, [r3, #0]
						% TERMINAL_BUFFER_LINES;
    332c:	3401      	adds	r4, #1
    332e:	2203      	movs	r2, #3
    3330:	4014      	ands	r4, r2
			case '\r':
				// Replace \r with \0 and move head to next line
				*current_char_ptr = '\0';

				current_column = 0;
				terminal_line_offset = (terminal_line_offset + 1)
    3332:	701c      	strb	r4, [r3, #0]
						% TERMINAL_BUFFER_LINES;
				current_line_ptr = terminal_buffer[terminal_line_offset];
    3334:	2316      	movs	r3, #22
    3336:	435c      	muls	r4, r3
    3338:	4b1b      	ldr	r3, [pc, #108]	; (33a8 <uart_task+0xdc>)
    333a:	191c      	adds	r4, r3, r4
				current_char_ptr = current_line_ptr + current_column;
    333c:	46a0      	mov	r8, r4
			switch (*current_char_ptr) {
			case '\r':
				// Replace \r with \0 and move head to next line
				*current_char_ptr = '\0';

				current_column = 0;
    333e:	2500      	movs	r5, #0
				terminal_line_offset = (terminal_line_offset + 1)
						% TERMINAL_BUFFER_LINES;
				current_line_ptr = terminal_buffer[terminal_line_offset];
				current_char_ptr = current_line_ptr + current_column;
				break;
    3340:	e011      	b.n	3366 <uart_task+0x9a>
				// For \n, do nothing -- it is replaced with \0 later
				break;

			default:
				// For all other characters, just move head to next char
				current_column++;
    3342:	3501      	adds	r5, #1
    3344:	b2ed      	uxtb	r5, r5
				if (current_column >= TERMINAL_COLUMNS) {
    3346:	2d14      	cmp	r5, #20
    3348:	d90b      	bls.n	3362 <uart_task+0x96>
					current_column = 0;
					terminal_line_offset = (terminal_line_offset + 1)
    334a:	464c      	mov	r4, r9
    334c:	7823      	ldrb	r3, [r4, #0]
							% TERMINAL_BUFFER_LINES;
    334e:	3301      	adds	r3, #1
    3350:	2203      	movs	r2, #3
    3352:	4013      	ands	r3, r2
			default:
				// For all other characters, just move head to next char
				current_column++;
				if (current_column >= TERMINAL_COLUMNS) {
					current_column = 0;
					terminal_line_offset = (terminal_line_offset + 1)
    3354:	7023      	strb	r3, [r4, #0]
							% TERMINAL_BUFFER_LINES;
					current_line_ptr = terminal_buffer[terminal_line_offset];
    3356:	2216      	movs	r2, #22
    3358:	4353      	muls	r3, r2
    335a:	4a13      	ldr	r2, [pc, #76]	; (33a8 <uart_task+0xdc>)
    335c:	18d2      	adds	r2, r2, r3
    335e:	4690      	mov	r8, r2

			default:
				// For all other characters, just move head to next char
				current_column++;
				if (current_column >= TERMINAL_COLUMNS) {
					current_column = 0;
    3360:	2500      	movs	r5, #0
					terminal_line_offset = (terminal_line_offset + 1)
							% TERMINAL_BUFFER_LINES;
					current_line_ptr = terminal_buffer[terminal_line_offset];
				}
				current_char_ptr = current_line_ptr + current_column;
    3362:	4642      	mov	r2, r8
    3364:	1954      	adds	r4, r2, r5
			}

			// Set zero-terminator at head
			*current_char_ptr = '\0';
    3366:	2300      	movs	r3, #0
    3368:	7023      	strb	r3, [r4, #0]

		current_line_ptr = terminal_buffer[terminal_line_offset];
		current_char_ptr = current_line_ptr + current_column;

		// Any characters queued? Handle them!
		while (xQueueReceive(terminal_in_queue, current_char_ptr, 0)) {
    336a:	6838      	ldr	r0, [r7, #0]
    336c:	1c21      	adds	r1, r4, #0
    336e:	2200      	movs	r2, #0
    3370:	2300      	movs	r3, #0
    3372:	47b0      	blx	r6
    3374:	2800      	cmp	r0, #0
    3376:	d1d0      	bne.n	331a <uart_task+0x4e>

			// Set zero-terminator at head
			*current_char_ptr = '\0';
		}

		xSemaphoreGive(terminal_mutex);
    3378:	4b08      	ldr	r3, [pc, #32]	; (339c <uart_task+0xd0>)
    337a:	6818      	ldr	r0, [r3, #0]
    337c:	2100      	movs	r1, #0
    337e:	2200      	movs	r2, #0
    3380:	2300      	movs	r3, #0
    3382:	4c0b      	ldr	r4, [pc, #44]	; (33b0 <uart_task+0xe4>)
    3384:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3386:	2380      	movs	r3, #128	; 0x80
    3388:	02db      	lsls	r3, r3, #11
    338a:	4654      	mov	r4, sl
    338c:	61a3      	str	r3, [r4, #24]

		oled1_set_led_state(&oled1, OLED1_LED1_ID, false);

		vTaskDelay(UART_TASK_DELAY);
    338e:	2002      	movs	r0, #2
    3390:	4b08      	ldr	r3, [pc, #32]	; (33b4 <uart_task+0xe8>)
    3392:	4798      	blx	r3
	}
    3394:	e7a9      	b.n	32ea <uart_task+0x1e>
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	41004400 	.word	0x41004400
    339c:	20003d48 	.word	0x20003d48
    33a0:	00002231 	.word	0x00002231
    33a4:	20003d50 	.word	0x20003d50
    33a8:	20003cb8 	.word	0x20003cb8
    33ac:	20003d58 	.word	0x20003d58
    33b0:	00001f95 	.word	0x00001f95
    33b4:	000029e5 	.word	0x000029e5

000033b8 <about_task>:
 * animation.
 *
 * \param params Parameters for the task. (Not used.)
 */
static void about_task(void *params)
{
    33b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ba:	465f      	mov	r7, fp
    33bc:	4656      	mov	r6, sl
    33be:	464d      	mov	r5, r9
    33c0:	4644      	mov	r4, r8
    33c2:	b4f0      	push	{r4, r5, r6, r7}
    33c4:	b083      	sub	sp, #12
	char c;
	gfx_coord_t x, y;
	uint8_t i, shift;

	const uint8_t max_shift = 8;
	shift = 1;
    33c6:	2401      	movs	r4, #1
    33c8:	9400      	str	r4, [sp, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    33ca:	2480      	movs	r4, #128	; 0x80
    33cc:	0324      	lsls	r4, r4, #12
    33ce:	9401      	str	r4, [sp, #4]
    33d0:	9c01      	ldr	r4, [sp, #4]
    33d2:	4a2e      	ldr	r2, [pc, #184]	; (348c <about_task+0xd4>)
    33d4:	6154      	str	r4, [r2, #20]

	for (;;) {
		oled1_set_led_state(&oled1, OLED1_LED2_ID, true);

		xSemaphoreTake(display_mutex, portMAX_DELAY);
    33d6:	4c2e      	ldr	r4, [pc, #184]	; (3490 <about_task+0xd8>)
    33d8:	6820      	ldr	r0, [r4, #0]
    33da:	2100      	movs	r1, #0
    33dc:	2201      	movs	r2, #1
    33de:	4252      	negs	r2, r2
    33e0:	2300      	movs	r3, #0
    33e2:	4c2c      	ldr	r4, [pc, #176]	; (3494 <about_task+0xdc>)
    33e4:	47a0      	blx	r4

		// Print the about text in an expanding area
		for (i = 0; i < (sizeof(about_text) - 1); i++) {
			c = about_text[i];
			x = (((i % TERMINAL_COLUMNS) * SYSFONT_WIDTH) * shift
					+ (CANVAS_WIDTH / 2) * (max_shift - shift))
    33e6:	2308      	movs	r3, #8
    33e8:	9e00      	ldr	r6, [sp, #0]
    33ea:	1b9b      	subs	r3, r3, r6
    33ec:	019a      	lsls	r2, r3, #6
    33ee:	4693      	mov	fp, r2
					/ max_shift;
			y = (((i / TERMINAL_COLUMNS) * SYSFONT_HEIGHT) * shift
					+ (CANVAS_HEIGHT / 2) * (max_shift - shift))
    33f0:	009a      	lsls	r2, r3, #2
    33f2:	18d2      	adds	r2, r2, r3
    33f4:	0052      	lsls	r2, r2, #1
    33f6:	18d2      	adds	r2, r2, r3
    33f8:	4692      	mov	sl, r2
    33fa:	2400      	movs	r4, #0

		xSemaphoreTake(display_mutex, portMAX_DELAY);

		// Print the about text in an expanding area
		for (i = 0; i < (sizeof(about_text) - 1); i++) {
			c = about_text[i];
    33fc:	4b26      	ldr	r3, [pc, #152]	; (3498 <about_task+0xe0>)
    33fe:	4699      	mov	r9, r3
    3400:	b2e5      	uxtb	r5, r4
					+ (CANVAS_WIDTH / 2) * (max_shift - shift))
					/ max_shift;
			y = (((i / TERMINAL_COLUMNS) * SYSFONT_HEIGHT) * shift
					+ (CANVAS_HEIGHT / 2) * (max_shift - shift))
					/ max_shift;
			gfx_mono_draw_char(c, x, y, &sysfont);
    3402:	464a      	mov	r2, r9
    3404:	5ca2      	ldrb	r2, [r4, r2]
    3406:	4690      	mov	r8, r2
		xSemaphoreTake(display_mutex, portMAX_DELAY);

		// Print the about text in an expanding area
		for (i = 0; i < (sizeof(about_text) - 1); i++) {
			c = about_text[i];
			x = (((i % TERMINAL_COLUMNS) * SYSFONT_WIDTH) * shift
    3408:	1c28      	adds	r0, r5, #0
    340a:	2115      	movs	r1, #21
    340c:	4b23      	ldr	r3, [pc, #140]	; (349c <about_task+0xe4>)
    340e:	4798      	blx	r3
    3410:	b2c9      	uxtb	r1, r1
    3412:	004b      	lsls	r3, r1, #1
    3414:	185b      	adds	r3, r3, r1
    3416:	005b      	lsls	r3, r3, #1
    3418:	4373      	muls	r3, r6
					+ (CANVAS_WIDTH / 2) * (max_shift - shift))
    341a:	445b      	add	r3, fp
					/ max_shift;
    341c:	17df      	asrs	r7, r3, #31
    341e:	0f7f      	lsrs	r7, r7, #29
    3420:	18ff      	adds	r7, r7, r3
    3422:	10ff      	asrs	r7, r7, #3
			y = (((i / TERMINAL_COLUMNS) * SYSFONT_HEIGHT) * shift
					+ (CANVAS_HEIGHT / 2) * (max_shift - shift))
					/ max_shift;
			gfx_mono_draw_char(c, x, y, &sysfont);
    3424:	b2ff      	uxtb	r7, r7
		for (i = 0; i < (sizeof(about_text) - 1); i++) {
			c = about_text[i];
			x = (((i % TERMINAL_COLUMNS) * SYSFONT_WIDTH) * shift
					+ (CANVAS_WIDTH / 2) * (max_shift - shift))
					/ max_shift;
			y = (((i / TERMINAL_COLUMNS) * SYSFONT_HEIGHT) * shift
    3426:	1c28      	adds	r0, r5, #0
    3428:	2115      	movs	r1, #21
    342a:	4a1d      	ldr	r2, [pc, #116]	; (34a0 <about_task+0xe8>)
    342c:	4790      	blx	r2
    342e:	b2c0      	uxtb	r0, r0
    3430:	00c3      	lsls	r3, r0, #3
    3432:	1a18      	subs	r0, r3, r0
    3434:	4370      	muls	r0, r6
					+ (CANVAS_HEIGHT / 2) * (max_shift - shift))
    3436:	4450      	add	r0, sl
					/ max_shift;
    3438:	17c2      	asrs	r2, r0, #31
    343a:	0f52      	lsrs	r2, r2, #29
    343c:	1812      	adds	r2, r2, r0
    343e:	10d2      	asrs	r2, r2, #3
			gfx_mono_draw_char(c, x, y, &sysfont);
    3440:	b2d2      	uxtb	r2, r2
    3442:	4640      	mov	r0, r8
    3444:	1c39      	adds	r1, r7, #0
    3446:	4b17      	ldr	r3, [pc, #92]	; (34a4 <about_task+0xec>)
    3448:	4d17      	ldr	r5, [pc, #92]	; (34a8 <about_task+0xf0>)
    344a:	47a8      	blx	r5
    344c:	3401      	adds	r4, #1
		oled1_set_led_state(&oled1, OLED1_LED2_ID, true);

		xSemaphoreTake(display_mutex, portMAX_DELAY);

		// Print the about text in an expanding area
		for (i = 0; i < (sizeof(about_text) - 1); i++) {
    344e:	2c3f      	cmp	r4, #63	; 0x3f
    3450:	d1d6      	bne.n	3400 <about_task+0x48>
					+ (CANVAS_HEIGHT / 2) * (max_shift - shift))
					/ max_shift;
			gfx_mono_draw_char(c, x, y, &sysfont);
		}

		xSemaphoreGive(display_mutex);
    3452:	4b0f      	ldr	r3, [pc, #60]	; (3490 <about_task+0xd8>)
    3454:	6818      	ldr	r0, [r3, #0]
    3456:	2100      	movs	r1, #0
    3458:	2200      	movs	r2, #0
    345a:	2300      	movs	r3, #0
    345c:	4c13      	ldr	r4, [pc, #76]	; (34ac <about_task+0xf4>)
    345e:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3460:	2380      	movs	r3, #128	; 0x80
    3462:	031b      	lsls	r3, r3, #12
    3464:	4c09      	ldr	r4, [pc, #36]	; (348c <about_task+0xd4>)
    3466:	61a3      	str	r3, [r4, #24]

		oled1_set_led_state(&oled1, OLED1_LED2_ID, false);

		// Repeat task until we're displaying the text in full size
		if (shift < max_shift) {
    3468:	9c00      	ldr	r4, [sp, #0]
    346a:	2c07      	cmp	r4, #7
    346c:	d807      	bhi.n	347e <about_task+0xc6>
			shift++;
    346e:	1c23      	adds	r3, r4, #0
    3470:	3301      	adds	r3, #1
    3472:	b2db      	uxtb	r3, r3
    3474:	9300      	str	r3, [sp, #0]
			vTaskDelay(ABOUT_TASK_DELAY);
    3476:	2006      	movs	r0, #6
    3478:	4b0d      	ldr	r3, [pc, #52]	; (34b0 <about_task+0xf8>)
    347a:	4798      	blx	r3
    347c:	e7a8      	b.n	33d0 <about_task+0x18>
		} else {
			shift = 0;
			vTaskSuspend(NULL);
    347e:	2000      	movs	r0, #0
    3480:	4b0c      	ldr	r3, [pc, #48]	; (34b4 <about_task+0xfc>)
    3482:	4798      	blx	r3
		// Repeat task until we're displaying the text in full size
		if (shift < max_shift) {
			shift++;
			vTaskDelay(ABOUT_TASK_DELAY);
		} else {
			shift = 0;
    3484:	2400      	movs	r4, #0
    3486:	9400      	str	r4, [sp, #0]
    3488:	e7a2      	b.n	33d0 <about_task+0x18>
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	41004400 	.word	0x41004400
    3490:	20003d44 	.word	0x20003d44
    3494:	00002231 	.word	0x00002231
    3498:	00004fd4 	.word	0x00004fd4
    349c:	00003cbd 	.word	0x00003cbd
    34a0:	00003c35 	.word	0x00003c35
    34a4:	20000000 	.word	0x20000000
    34a8:	00000571 	.word	0x00000571
    34ac:	00001f95 	.word	0x00001f95
    34b0:	000029e5 	.word	0x000029e5
    34b4:	00002b5d 	.word	0x00002b5d

000034b8 <graph_task>:
 * is selected again.
 *
 * \param params Parameters for the task. (Not used.)
 */
static void graph_task(void *params)
{
    34b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ba:	465f      	mov	r7, fp
    34bc:	4656      	mov	r6, sl
    34be:	464d      	mov	r5, r9
    34c0:	4644      	mov	r4, r8
    34c2:	b4f0      	push	{r4, r5, r6, r7}
    34c4:	b085      	sub	sp, #20
	gfx_coord_t x, y, old_y;
	uint8_t current_value;

	x = 0;
	current_value = graph_noise;
    34c6:	4b30      	ldr	r3, [pc, #192]	; (3588 <graph_task+0xd0>)
    34c8:	781b      	ldrb	r3, [r3, #0]
    34ca:	4698      	mov	r8, r3
static void graph_task(void *params)
{
	gfx_coord_t x, y, old_y;
	uint8_t current_value;

	x = 0;
    34cc:	2400      	movs	r4, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    34ce:	4f2f      	ldr	r7, [pc, #188]	; (358c <graph_task+0xd4>)
    34d0:	2380      	movs	r3, #128	; 0x80
    34d2:	02db      	lsls	r3, r3, #11
    34d4:	469a      	mov	sl, r3
    34d6:	9303      	str	r3, [sp, #12]

		// Compute new noise sample and value of current graph sample
		graph_noise = (graph_noise * 173) + 1;
		current_value = ((uint16_t)graph_noise + current_value) / 2;

		xSemaphoreTake(display_mutex, portMAX_DELAY);
    34d8:	4a2d      	ldr	r2, [pc, #180]	; (3590 <graph_task+0xd8>)
    34da:	4693      	mov	fp, r2
    34dc:	9e03      	ldr	r6, [sp, #12]
    34de:	617e      	str	r6, [r7, #20]

	for(;;) {
		oled1_set_led_state(&oled1, OLED1_LED1_ID, true);

		// Compute new noise sample and value of current graph sample
		graph_noise = (graph_noise * 173) + 1;
    34e0:	4e29      	ldr	r6, [pc, #164]	; (3588 <graph_task+0xd0>)
    34e2:	7833      	ldrb	r3, [r6, #0]
    34e4:	2553      	movs	r5, #83	; 0x53
    34e6:	426d      	negs	r5, r5
    34e8:	435d      	muls	r5, r3
    34ea:	3501      	adds	r5, #1
    34ec:	b2ed      	uxtb	r5, r5
    34ee:	7035      	strb	r5, [r6, #0]
		current_value = ((uint16_t)graph_noise + current_value) / 2;
    34f0:	4445      	add	r5, r8
    34f2:	106d      	asrs	r5, r5, #1
    34f4:	b2ea      	uxtb	r2, r5
    34f6:	4690      	mov	r8, r2

		xSemaphoreTake(display_mutex, portMAX_DELAY);
    34f8:	465b      	mov	r3, fp
    34fa:	6818      	ldr	r0, [r3, #0]
    34fc:	2100      	movs	r1, #0
    34fe:	2201      	movs	r2, #1
    3500:	4252      	negs	r2, r2
    3502:	2300      	movs	r3, #0
    3504:	4e23      	ldr	r6, [pc, #140]	; (3594 <graph_task+0xdc>)
    3506:	47b0      	blx	r6

		// Scale graph value so it fits within the canvas
		y = CANVAS_GRAPH_Y_OFFSET
				+ ((uint16_t)CANVAS_HEIGHT * current_value) / 256;
    3508:	23ff      	movs	r3, #255	; 0xff
    350a:	401d      	ands	r5, r3
    350c:	006b      	lsls	r3, r5, #1
    350e:	195b      	adds	r3, r3, r5
    3510:	00db      	lsls	r3, r3, #3
    3512:	1b5d      	subs	r5, r3, r5
    3514:	17eb      	asrs	r3, r5, #31
    3516:	0e1b      	lsrs	r3, r3, #24
    3518:	195d      	adds	r5, r3, r5
    351a:	122d      	asrs	r5, r5, #8
		current_value = ((uint16_t)graph_noise + current_value) / 2;

		xSemaphoreTake(display_mutex, portMAX_DELAY);

		// Scale graph value so it fits within the canvas
		y = CANVAS_GRAPH_Y_OFFSET
    351c:	3520      	adds	r5, #32
    351e:	b2ed      	uxtb	r5, r5
				+ ((uint16_t)CANVAS_HEIGHT * current_value) / 256;

		// Clear previous graph point..
		gfx_mono_draw_vertical_line(x, CANVAS_GRAPH_Y_OFFSET, CANVAS_HEIGHT,
    3520:	1c20      	adds	r0, r4, #0
    3522:	2120      	movs	r1, #32
    3524:	2217      	movs	r2, #23
    3526:	2300      	movs	r3, #0
    3528:	4e1b      	ldr	r6, [pc, #108]	; (3598 <graph_task+0xe0>)
    352a:	47b0      	blx	r6
				GFX_PIXEL_CLR);

		// ..and draw a continuous graph using lines
		if (x == 0) {
    352c:	2c00      	cmp	r4, #0
    352e:	d10d      	bne.n	354c <graph_task+0x94>
			gfx_mono_draw_pixel(x, y, GFX_PIXEL_SET);
    3530:	2000      	movs	r0, #0
    3532:	1c29      	adds	r1, r5, #0
    3534:	2201      	movs	r2, #1
    3536:	4b19      	ldr	r3, [pc, #100]	; (359c <graph_task+0xe4>)
    3538:	4798      	blx	r3
		} else {
			gfx_mono_draw_line(x - 1, old_y, x, y, GFX_PIXEL_SET);
		}

		xSemaphoreGive(display_mutex);
    353a:	4b15      	ldr	r3, [pc, #84]	; (3590 <graph_task+0xd8>)
    353c:	6818      	ldr	r0, [r3, #0]
    353e:	2100      	movs	r1, #0
    3540:	2200      	movs	r2, #0
    3542:	2300      	movs	r3, #0
    3544:	4c16      	ldr	r4, [pc, #88]	; (35a0 <graph_task+0xe8>)
    3546:	47a0      	blx	r4

		old_y = y;
		if (++x >= CANVAS_WIDTH) {
    3548:	2401      	movs	r4, #1
    354a:	e015      	b.n	3578 <graph_task+0xc0>

		// ..and draw a continuous graph using lines
		if (x == 0) {
			gfx_mono_draw_pixel(x, y, GFX_PIXEL_SET);
		} else {
			gfx_mono_draw_line(x - 1, old_y, x, y, GFX_PIXEL_SET);
    354c:	1e60      	subs	r0, r4, #1
    354e:	b2c0      	uxtb	r0, r0
    3550:	2301      	movs	r3, #1
    3552:	9300      	str	r3, [sp, #0]
    3554:	4649      	mov	r1, r9
    3556:	1c22      	adds	r2, r4, #0
    3558:	1c2b      	adds	r3, r5, #0
    355a:	4e12      	ldr	r6, [pc, #72]	; (35a4 <graph_task+0xec>)
    355c:	47b0      	blx	r6
		}

		xSemaphoreGive(display_mutex);
    355e:	4b0c      	ldr	r3, [pc, #48]	; (3590 <graph_task+0xd8>)
    3560:	6818      	ldr	r0, [r3, #0]
    3562:	2100      	movs	r1, #0
    3564:	2200      	movs	r2, #0
    3566:	2300      	movs	r3, #0
    3568:	4e0d      	ldr	r6, [pc, #52]	; (35a0 <graph_task+0xe8>)
    356a:	47b0      	blx	r6

		old_y = y;
		if (++x >= CANVAS_WIDTH) {
    356c:	3401      	adds	r4, #1
    356e:	b2e4      	uxtb	r4, r4
    3570:	b263      	sxtb	r3, r4
			x = 0;
    3572:	43db      	mvns	r3, r3
    3574:	17db      	asrs	r3, r3, #31
    3576:	401c      	ands	r4, r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3578:	4652      	mov	r2, sl
    357a:	61ba      	str	r2, [r7, #24]
		}

		oled1_set_led_state(&oled1, OLED1_LED1_ID, false);

		vTaskDelay(GRAPH_TASK_DELAY);
    357c:	200a      	movs	r0, #10
    357e:	4b0a      	ldr	r3, [pc, #40]	; (35a8 <graph_task+0xf0>)
    3580:	4798      	blx	r3
			gfx_mono_draw_line(x - 1, old_y, x, y, GFX_PIXEL_SET);
		}

		xSemaphoreGive(display_mutex);

		old_y = y;
    3582:	46a9      	mov	r9, r5
		}

		oled1_set_led_state(&oled1, OLED1_LED1_ID, false);

		vTaskDelay(GRAPH_TASK_DELAY);
	}
    3584:	e7aa      	b.n	34dc <graph_task+0x24>
    3586:	46c0      	nop			; (mov r8, r8)
    3588:	20000018 	.word	0x20000018
    358c:	41004400 	.word	0x41004400
    3590:	20003d44 	.word	0x20003d44
    3594:	00002231 	.word	0x00002231
    3598:	00000341 	.word	0x00000341
    359c:	000006cd 	.word	0x000006cd
    35a0:	00001f95 	.word	0x00001f95
    35a4:	000003e1 	.word	0x000003e1
    35a8:	000029e5 	.word	0x000029e5

000035ac <terminal_task>:
 * This task prints the terminal text buffer to the display.
 *
 * \param params Parameters for the task. (Not used.)
 */
static void terminal_task(void *params)
{
    35ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ae:	465f      	mov	r7, fp
    35b0:	4656      	mov	r6, sl
    35b2:	464d      	mov	r5, r9
    35b4:	4644      	mov	r4, r8
    35b6:	b4f0      	push	{r4, r5, r6, r7}
    35b8:	b085      	sub	sp, #20
	} else {
		port_base->OUTCLR.reg = pin_mask;
    35ba:	2480      	movs	r4, #128	; 0x80
    35bc:	0324      	lsls	r4, r4, #12
    35be:	9403      	str	r4, [sp, #12]
    35c0:	9d03      	ldr	r5, [sp, #12]
    35c2:	4a31      	ldr	r2, [pc, #196]	; (3688 <terminal_task+0xdc>)
    35c4:	6155      	str	r5, [r2, #20]

	for (;;) {
		oled1_set_led_state(&oled1, OLED1_LED2_ID, true);

		// Grab both display and terminal mutexes before doing anything
		xSemaphoreTake(display_mutex, portMAX_DELAY);
    35c6:	2401      	movs	r4, #1
    35c8:	4264      	negs	r4, r4
    35ca:	4d30      	ldr	r5, [pc, #192]	; (368c <terminal_task+0xe0>)
    35cc:	6828      	ldr	r0, [r5, #0]
    35ce:	2100      	movs	r1, #0
    35d0:	1c22      	adds	r2, r4, #0
    35d2:	2300      	movs	r3, #0
    35d4:	4d2e      	ldr	r5, [pc, #184]	; (3690 <terminal_task+0xe4>)
    35d6:	47a8      	blx	r5
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);
    35d8:	4b2e      	ldr	r3, [pc, #184]	; (3694 <terminal_task+0xe8>)
    35da:	6818      	ldr	r0, [r3, #0]
    35dc:	2100      	movs	r1, #0
    35de:	1c22      	adds	r2, r4, #0
    35e0:	2300      	movs	r3, #0
    35e2:	47a8      	blx	r5

		y = (TERMINAL_LINES - 1) * (SYSFONT_HEIGHT + 1);
		current_line = terminal_line_offset;
    35e4:	4b2c      	ldr	r3, [pc, #176]	; (3698 <terminal_task+0xec>)
    35e6:	781b      	ldrb	r3, [r3, #0]
    35e8:	469b      	mov	fp, r3

		// Grab both display and terminal mutexes before doing anything
		xSemaphoreTake(display_mutex, portMAX_DELAY);
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);

		y = (TERMINAL_LINES - 1) * (SYSFONT_HEIGHT + 1);
    35ea:	2610      	movs	r6, #16
			current_column = 0;

			// Print characters of string until zero terminator is encountered
			current_char = terminal_buffer[current_line][current_column];
			while (current_char != '\0') {
				gfx_mono_draw_char(current_char, x, y, &sysfont);
    35ec:	4a2b      	ldr	r2, [pc, #172]	; (369c <terminal_task+0xf0>)
    35ee:	4692      	mov	sl, r2
				{
			x = 0;
			current_column = 0;

			// Print characters of string until zero terminator is encountered
			current_char = terminal_buffer[current_line][current_column];
    35f0:	2316      	movs	r3, #22
    35f2:	465f      	mov	r7, fp
    35f4:	437b      	muls	r3, r7
    35f6:	4c2a      	ldr	r4, [pc, #168]	; (36a0 <terminal_task+0xf4>)
    35f8:	5d18      	ldrb	r0, [r3, r4]
			while (current_char != '\0') {
    35fa:	2800      	cmp	r0, #0
    35fc:	d017      	beq.n	362e <terminal_task+0x82>
		current_line = terminal_line_offset;

		for (printed_lines = 0; printed_lines < TERMINAL_LINES; printed_lines++)
				{
			x = 0;
			current_column = 0;
    35fe:	2400      	movs	r4, #0
		y = (TERMINAL_LINES - 1) * (SYSFONT_HEIGHT + 1);
		current_line = terminal_line_offset;

		for (printed_lines = 0; printed_lines < TERMINAL_LINES; printed_lines++)
				{
			x = 0;
    3600:	2500      	movs	r5, #0
			current_column = 0;

			// Print characters of string until zero terminator is encountered
			current_char = terminal_buffer[current_line][current_column];
			while (current_char != '\0') {
				gfx_mono_draw_char(current_char, x, y, &sysfont);
    3602:	4a28      	ldr	r2, [pc, #160]	; (36a4 <terminal_task+0xf8>)
    3604:	4691      	mov	r9, r2

				// Move to next character on display and in buffer
				x += SYSFONT_WIDTH;
				current_column++;
				current_char = terminal_buffer[current_line][current_column];
    3606:	4b26      	ldr	r3, [pc, #152]	; (36a0 <terminal_task+0xf4>)
    3608:	4698      	mov	r8, r3
			current_column = 0;

			// Print characters of string until zero terminator is encountered
			current_char = terminal_buffer[current_line][current_column];
			while (current_char != '\0') {
				gfx_mono_draw_char(current_char, x, y, &sysfont);
    360a:	1c29      	adds	r1, r5, #0
    360c:	1c32      	adds	r2, r6, #0
    360e:	4653      	mov	r3, sl
    3610:	47c8      	blx	r9

				// Move to next character on display and in buffer
				x += SYSFONT_WIDTH;
    3612:	3506      	adds	r5, #6
    3614:	b2ed      	uxtb	r5, r5
				current_column++;
    3616:	3401      	adds	r4, #1
    3618:	b2e4      	uxtb	r4, r4
				current_char = terminal_buffer[current_line][current_column];
    361a:	2316      	movs	r3, #22
    361c:	437b      	muls	r3, r7
    361e:	191b      	adds	r3, r3, r4
    3620:	4642      	mov	r2, r8
    3622:	5c98      	ldrb	r0, [r3, r2]
			x = 0;
			current_column = 0;

			// Print characters of string until zero terminator is encountered
			current_char = terminal_buffer[current_line][current_column];
			while (current_char != '\0') {
    3624:	2800      	cmp	r0, #0
    3626:	d1f0      	bne.n	360a <terminal_task+0x5e>
				current_column++;
				current_char = terminal_buffer[current_line][current_column];
			}

			// Erase remaining part of line on display
			if (current_column < TERMINAL_COLUMNS) {
    3628:	2c14      	cmp	r4, #20
    362a:	d80e      	bhi.n	364a <terminal_task+0x9e>
    362c:	e001      	b.n	3632 <terminal_task+0x86>
		y = (TERMINAL_LINES - 1) * (SYSFONT_HEIGHT + 1);
		current_line = terminal_line_offset;

		for (printed_lines = 0; printed_lines < TERMINAL_LINES; printed_lines++)
				{
			x = 0;
    362e:	2500      	movs	r5, #0
			current_column = 0;
    3630:	2400      	movs	r4, #0
				current_char = terminal_buffer[current_line][current_column];
			}

			// Erase remaining part of line on display
			if (current_column < TERMINAL_COLUMNS) {
				gfx_mono_draw_filled_rect(x, y,
    3632:	00a2      	lsls	r2, r4, #2
    3634:	1aa2      	subs	r2, r4, r2
    3636:	0052      	lsls	r2, r2, #1
    3638:	3a80      	subs	r2, #128	; 0x80
    363a:	b2d2      	uxtb	r2, r2
    363c:	2300      	movs	r3, #0
    363e:	9300      	str	r3, [sp, #0]
    3640:	1c28      	adds	r0, r5, #0
    3642:	1c31      	adds	r1, r6, #0
    3644:	2307      	movs	r3, #7
    3646:	4c18      	ldr	r4, [pc, #96]	; (36a8 <terminal_task+0xfc>)
    3648:	47a0      	blx	r4
						CANVAS_WIDTH - (current_column * SYSFONT_WIDTH),
						SYSFONT_HEIGHT, GFX_PIXEL_CLR);
			}

			// Move to previous line on display and in buffer
			y -= 1 + SYSFONT_HEIGHT;
    364a:	3e08      	subs	r6, #8
    364c:	b2f6      	uxtb	r6, r6
			current_line += TERMINAL_BUFFER_LINES - 1;
    364e:	465a      	mov	r2, fp
    3650:	3203      	adds	r2, #3
			current_line %= TERMINAL_BUFFER_LINES;
    3652:	2303      	movs	r3, #3
    3654:	401a      	ands	r2, r3
    3656:	4693      	mov	fp, r2
		xSemaphoreTake(terminal_mutex, portMAX_DELAY);

		y = (TERMINAL_LINES - 1) * (SYSFONT_HEIGHT + 1);
		current_line = terminal_line_offset;

		for (printed_lines = 0; printed_lines < TERMINAL_LINES; printed_lines++)
    3658:	2ef8      	cmp	r6, #248	; 0xf8
    365a:	d1c9      	bne.n	35f0 <terminal_task+0x44>
			y -= 1 + SYSFONT_HEIGHT;
			current_line += TERMINAL_BUFFER_LINES - 1;
			current_line %= TERMINAL_BUFFER_LINES;
		}

		xSemaphoreGive(terminal_mutex);
    365c:	4b0d      	ldr	r3, [pc, #52]	; (3694 <terminal_task+0xe8>)
    365e:	6818      	ldr	r0, [r3, #0]
    3660:	2100      	movs	r1, #0
    3662:	2200      	movs	r2, #0
    3664:	2300      	movs	r3, #0
    3666:	4c11      	ldr	r4, [pc, #68]	; (36ac <terminal_task+0x100>)
    3668:	47a0      	blx	r4
		xSemaphoreGive(display_mutex);
    366a:	4b08      	ldr	r3, [pc, #32]	; (368c <terminal_task+0xe0>)
    366c:	6818      	ldr	r0, [r3, #0]
    366e:	2100      	movs	r1, #0
    3670:	2200      	movs	r2, #0
    3672:	2300      	movs	r3, #0
    3674:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3676:	2580      	movs	r5, #128	; 0x80
    3678:	032d      	lsls	r5, r5, #12
    367a:	4a03      	ldr	r2, [pc, #12]	; (3688 <terminal_task+0xdc>)
    367c:	6195      	str	r5, [r2, #24]

		oled1_set_led_state(&oled1, OLED1_LED2_ID, false);

		vTaskDelay(TERMINAL_TASK_DELAY);
    367e:	20c8      	movs	r0, #200	; 0xc8
    3680:	4b0b      	ldr	r3, [pc, #44]	; (36b0 <terminal_task+0x104>)
    3682:	4798      	blx	r3
	}
    3684:	e79c      	b.n	35c0 <terminal_task+0x14>
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	41004400 	.word	0x41004400
    368c:	20003d44 	.word	0x20003d44
    3690:	00002231 	.word	0x00002231
    3694:	20003d48 	.word	0x20003d48
    3698:	20003d50 	.word	0x20003d50
    369c:	20000000 	.word	0x20000000
    36a0:	20003cb8 	.word	0x20003cb8
    36a4:	00000571 	.word	0x00000571
    36a8:	00000531 	.word	0x00000531
    36ac:	00001f95 	.word	0x00001f95
    36b0:	000029e5 	.word	0x000029e5

000036b4 <main_task>:
 * - \ref about_task() "about"
 *
 * \param params Parameters for the task. (Not used.)
 */
static void main_task(void *params)
{
    36b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36b6:	465f      	mov	r7, fp
    36b8:	4656      	mov	r6, sl
    36ba:	464d      	mov	r5, r9
    36bc:	4644      	mov	r4, r8
    36be:	b4f0      	push	{r4, r5, r6, r7}
    36c0:	b085      	sub	sp, #20
	bool graph_buffer_initialized = false;
	bool selection_changed = true;
	bool select_graph_buffer;
	enum menu_items current_selection = MENU_ITEM_GRAPH;
	gfx_coord_t x, y, display_y_offset;
	xTaskHandle temp_task_handle = NULL;
    36c2:	2200      	movs	r2, #0
    36c4:	4691      	mov	r9, r2
static void main_task(void *params)
{
	bool graph_buffer_initialized = false;
	bool selection_changed = true;
	bool select_graph_buffer;
	enum menu_items current_selection = MENU_ITEM_GRAPH;
    36c6:	2600      	movs	r6, #0
 * \param params Parameters for the task. (Not used.)
 */
static void main_task(void *params)
{
	bool graph_buffer_initialized = false;
	bool selection_changed = true;
    36c8:	2401      	movs	r4, #1
 *
 * \param params Parameters for the task. (Not used.)
 */
static void main_task(void *params)
{
	bool graph_buffer_initialized = false;
    36ca:	2500      	movs	r5, #0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    36cc:	4f60      	ldr	r7, [pc, #384]	; (3850 <main_task+0x19c>)
    36ce:	2380      	movs	r3, #128	; 0x80
    36d0:	055b      	lsls	r3, r3, #21
    36d2:	9303      	str	r3, [sp, #12]
    36d4:	9a03      	ldr	r2, [sp, #12]
    36d6:	617a      	str	r2, [r7, #20]
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    36d8:	6a3b      	ldr	r3, [r7, #32]
	for(;;) {
		// Show that task is executing
		oled1_set_led_state(&oled1, OLED1_LED3_ID, true);

		// Check buttons to see if user changed the selection
		if (oled1_get_button_state(&oled1, OLED1_BUTTON1_ID)
    36da:	025a      	lsls	r2, r3, #9
    36dc:	d403      	bmi.n	36e6 <main_task+0x32>
					&& (current_selection != MENU_ITEM_GRAPH)) {
    36de:	2e00      	cmp	r6, #0
    36e0:	d000      	beq.n	36e4 <main_task+0x30>
    36e2:	e091      	b.n	3808 <main_task+0x154>
    36e4:	e086      	b.n	37f4 <main_task+0x140>
    36e6:	6a3b      	ldr	r3, [r7, #32]
			current_selection = MENU_ITEM_GRAPH;
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON2_ID)
    36e8:	065a      	lsls	r2, r3, #25
    36ea:	d403      	bmi.n	36f4 <main_task+0x40>
					&& (current_selection != MENU_ITEM_TERMINAL)) {
    36ec:	2e01      	cmp	r6, #1
    36ee:	d000      	beq.n	36f2 <main_task+0x3e>
    36f0:	e08c      	b.n	380c <main_task+0x158>
    36f2:	e083      	b.n	37fc <main_task+0x148>
    36f4:	6a3b      	ldr	r3, [r7, #32]
			current_selection = MENU_ITEM_TERMINAL;
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON3_ID)
    36f6:	061a      	lsls	r2, r3, #24
    36f8:	d402      	bmi.n	3700 <main_task+0x4c>
					&& (current_selection != MENU_ITEM_ABOUT)) {
    36fa:	2e02      	cmp	r6, #2
    36fc:	d000      	beq.n	3700 <main_task+0x4c>
    36fe:	e087      	b.n	3810 <main_task+0x15c>
			current_selection = MENU_ITEM_ABOUT;
			selection_changed = true;
		}

		// If selection changed, handle the selection
		if (selection_changed) {
    3700:	2c00      	cmp	r4, #0
    3702:	d070      	beq.n	37e6 <main_task+0x132>
    3704:	e000      	b.n	3708 <main_task+0x54>
					&& (current_selection != MENU_ITEM_GRAPH)) {
			current_selection = MENU_ITEM_GRAPH;
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON2_ID)
					&& (current_selection != MENU_ITEM_TERMINAL)) {
			current_selection = MENU_ITEM_TERMINAL;
    3706:	2601      	movs	r6, #1
		}

		// If selection changed, handle the selection
		if (selection_changed) {
			// Wait for and take the display semaphore before doing any changes.
			xSemaphoreTake(display_mutex, portMAX_DELAY);
    3708:	4b52      	ldr	r3, [pc, #328]	; (3854 <main_task+0x1a0>)
    370a:	6818      	ldr	r0, [r3, #0]
    370c:	2100      	movs	r1, #0
    370e:	2201      	movs	r2, #1
    3710:	4252      	negs	r2, r2
    3712:	2300      	movs	r3, #0
    3714:	4c50      	ldr	r4, [pc, #320]	; (3858 <main_task+0x1a4>)
    3716:	47a0      	blx	r4

			// We can now safely suspend the previously resumed task
			if (temp_task_handle) {
    3718:	464a      	mov	r2, r9
    371a:	2a00      	cmp	r2, #0
    371c:	d002      	beq.n	3724 <main_task+0x70>
				vTaskSuspend(temp_task_handle);
    371e:	4648      	mov	r0, r9
    3720:	4b4e      	ldr	r3, [pc, #312]	; (385c <main_task+0x1a8>)
    3722:	4798      	blx	r3
				temp_task_handle = NULL;
			}

			// Select the new drawing task and corresponding display buffer
			switch (current_selection) {
    3724:	2e00      	cmp	r6, #0
    3726:	d07a      	beq.n	381e <main_task+0x16a>
    3728:	2e01      	cmp	r6, #1
    372a:	d103      	bne.n	3734 <main_task+0x80>
				// Graph task runs continuously, no need to set task handle
				select_graph_buffer = true;
				break;

			case MENU_ITEM_TERMINAL:
				temp_task_handle = terminal_task_handle;
    372c:	4b4c      	ldr	r3, [pc, #304]	; (3860 <main_task+0x1ac>)
    372e:	681a      	ldr	r2, [r3, #0]
    3730:	4691      	mov	r9, r2
				select_graph_buffer = false;
				break;
    3732:	e071      	b.n	3818 <main_task+0x164>

			default:
			case MENU_ITEM_ABOUT:
				temp_task_handle = about_task_handle;
    3734:	4b4b      	ldr	r3, [pc, #300]	; (3864 <main_task+0x1b0>)
    3736:	681a      	ldr	r2, [r3, #0]
    3738:	4691      	mov	r9, r2
    373a:	e06d      	b.n	3818 <main_task+0x164>
			display_y_offset = select_graph_buffer ? CANVAS_GRAPH_Y_OFFSET : 0;

			// Draw the menu bar (only needs to be done once for graph)
			if (!select_graph_buffer || !graph_buffer_initialized) {
				// Clear the selected display buffer first
				gfx_mono_draw_filled_rect(0, display_y_offset,
    373c:	2300      	movs	r3, #0
    373e:	9300      	str	r3, [sp, #0]
    3740:	2000      	movs	r0, #0
    3742:	4641      	mov	r1, r8
    3744:	2280      	movs	r2, #128	; 0x80
    3746:	2320      	movs	r3, #32
    3748:	4c47      	ldr	r4, [pc, #284]	; (3868 <main_task+0x1b4>)
    374a:	47a0      	blx	r4
						GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT / 2,
						GFX_PIXEL_CLR);

				// Draw menu lines, each item with height MENU_HEIGHT pixels
				y = display_y_offset + CANVAS_HEIGHT;
    374c:	4641      	mov	r1, r8
    374e:	3117      	adds	r1, #23
				gfx_mono_draw_horizontal_line(0, y, GFX_MONO_LCD_WIDTH,
    3750:	b2c9      	uxtb	r1, r1
    3752:	2000      	movs	r0, #0
    3754:	2280      	movs	r2, #128	; 0x80
    3756:	2301      	movs	r3, #1
    3758:	4c44      	ldr	r4, [pc, #272]	; (386c <main_task+0x1b8>)
    375a:	47a0      	blx	r4
						GFX_PIXEL_SET);

				x = MENU_ITEM_WIDTH;
				y++;
    375c:	4644      	mov	r4, r8
    375e:	3418      	adds	r4, #24
    3760:	b2e4      	uxtb	r4, r4

				for (uint8_t i = 0; i < (MENU_NUM_ITEMS - 1); i++) {
					gfx_mono_draw_vertical_line(x, y, MENU_HEIGHT,
    3762:	202a      	movs	r0, #42	; 0x2a
    3764:	1c21      	adds	r1, r4, #0
    3766:	2208      	movs	r2, #8
    3768:	2301      	movs	r3, #1
    376a:	4d41      	ldr	r5, [pc, #260]	; (3870 <main_task+0x1bc>)
    376c:	47a8      	blx	r5
    376e:	2055      	movs	r0, #85	; 0x55
    3770:	1c21      	adds	r1, r4, #0
    3772:	2208      	movs	r2, #8
    3774:	2301      	movs	r3, #1
    3776:	47a8      	blx	r5
							GFX_PIXEL_SET);
					x += 1 + MENU_ITEM_WIDTH;
				}

				// Highlight the current selection
				gfx_mono_draw_rect(current_selection * (1 + MENU_ITEM_WIDTH), y,
    3778:	202b      	movs	r0, #43	; 0x2b
    377a:	4370      	muls	r0, r6
    377c:	2301      	movs	r3, #1
    377e:	9300      	str	r3, [sp, #0]
    3780:	1c21      	adds	r1, r4, #0
    3782:	222a      	movs	r2, #42	; 0x2a
    3784:	2308      	movs	r3, #8
    3786:	4c3b      	ldr	r4, [pc, #236]	; (3874 <main_task+0x1c0>)
    3788:	47a0      	blx	r4
						MENU_ITEM_WIDTH, MENU_HEIGHT, GFX_PIXEL_SET);

				// Draw the menu item text
				x = (MENU_ITEM_WIDTH / 2) - ((5 * SYSFONT_WIDTH) / 2);
				y += (MENU_HEIGHT / 2) - (SYSFONT_HEIGHT / 2);
    378a:	4643      	mov	r3, r8
    378c:	3319      	adds	r3, #25
    378e:	b2db      	uxtb	r3, r3
    3790:	469b      	mov	fp, r3
    3792:	4d39      	ldr	r5, [pc, #228]	; (3878 <main_task+0x1c4>)
				// Highlight the current selection
				gfx_mono_draw_rect(current_selection * (1 + MENU_ITEM_WIDTH), y,
						MENU_ITEM_WIDTH, MENU_HEIGHT, GFX_PIXEL_SET);

				// Draw the menu item text
				x = (MENU_ITEM_WIDTH / 2) - ((5 * SYSFONT_WIDTH) / 2);
    3794:	2406      	movs	r4, #6
				y += (MENU_HEIGHT / 2) - (SYSFONT_HEIGHT / 2);

				for (uint8_t i = 0; i < MENU_NUM_ITEMS; i++) {
					gfx_mono_draw_string(menu_items_text[i], x, y, &sysfont);
    3796:	4b39      	ldr	r3, [pc, #228]	; (387c <main_task+0x1c8>)
    3798:	469a      	mov	sl, r3
    379a:	465b      	mov	r3, fp
    379c:	46b3      	mov	fp, r6
    379e:	9302      	str	r3, [sp, #8]
    37a0:	1c28      	adds	r0, r5, #0
    37a2:	1c21      	adds	r1, r4, #0
    37a4:	9a02      	ldr	r2, [sp, #8]
    37a6:	4653      	mov	r3, sl
    37a8:	4e35      	ldr	r6, [pc, #212]	; (3880 <main_task+0x1cc>)
    37aa:	47b0      	blx	r6
					x += 1 + MENU_ITEM_WIDTH;
    37ac:	342b      	adds	r4, #43	; 0x2b
    37ae:	b2e4      	uxtb	r4, r4
    37b0:	3506      	adds	r5, #6

				// Draw the menu item text
				x = (MENU_ITEM_WIDTH / 2) - ((5 * SYSFONT_WIDTH) / 2);
				y += (MENU_HEIGHT / 2) - (SYSFONT_HEIGHT / 2);

				for (uint8_t i = 0; i < MENU_NUM_ITEMS; i++) {
    37b2:	2c87      	cmp	r4, #135	; 0x87
    37b4:	d1f4      	bne.n	37a0 <main_task+0xec>
    37b6:	465e      	mov	r6, fp
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
    37b8:	2040      	movs	r0, #64	; 0x40
    37ba:	4642      	mov	r2, r8
    37bc:	4310      	orrs	r0, r2
    37be:	4b31      	ldr	r3, [pc, #196]	; (3884 <main_task+0x1d0>)
    37c0:	4798      	blx	r3

			// Set display controller to output the new buffer
			ssd1306_set_display_start_line_address(display_y_offset);

			// We are done modifying the display, so give back the mutex
			xSemaphoreGive(display_mutex);
    37c2:	4b24      	ldr	r3, [pc, #144]	; (3854 <main_task+0x1a0>)
    37c4:	6818      	ldr	r0, [r3, #0]
    37c6:	2100      	movs	r1, #0
    37c8:	2200      	movs	r2, #0
    37ca:	2300      	movs	r3, #0
    37cc:	4c2e      	ldr	r4, [pc, #184]	; (3888 <main_task+0x1d4>)
    37ce:	47a0      	blx	r4

			selection_changed = false;

			// If a task handle was specified, resume it now
			if (temp_task_handle) {
    37d0:	464b      	mov	r3, r9
    37d2:	2b00      	cmp	r3, #0
    37d4:	d005      	beq.n	37e2 <main_task+0x12e>
				vTaskResume(temp_task_handle);
    37d6:	4648      	mov	r0, r9
    37d8:	4b2c      	ldr	r3, [pc, #176]	; (388c <main_task+0x1d8>)
    37da:	4798      	blx	r3
			ssd1306_set_display_start_line_address(display_y_offset);

			// We are done modifying the display, so give back the mutex
			xSemaphoreGive(display_mutex);

			selection_changed = false;
    37dc:	2400      	movs	r4, #0
				for (uint8_t i = 0; i < MENU_NUM_ITEMS; i++) {
					gfx_mono_draw_string(menu_items_text[i], x, y, &sysfont);
					x += 1 + MENU_ITEM_WIDTH;
				}

				graph_buffer_initialized = true;
    37de:	2501      	movs	r5, #1
    37e0:	e001      	b.n	37e6 <main_task+0x132>
			ssd1306_set_display_start_line_address(display_y_offset);

			// We are done modifying the display, so give back the mutex
			xSemaphoreGive(display_mutex);

			selection_changed = false;
    37e2:	2400      	movs	r4, #0
				for (uint8_t i = 0; i < MENU_NUM_ITEMS; i++) {
					gfx_mono_draw_string(menu_items_text[i], x, y, &sysfont);
					x += 1 + MENU_ITEM_WIDTH;
				}

				graph_buffer_initialized = true;
    37e4:	2501      	movs	r5, #1
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    37e6:	2280      	movs	r2, #128	; 0x80
    37e8:	0552      	lsls	r2, r2, #21
    37ea:	61ba      	str	r2, [r7, #24]
		}

		// Show that task is done
		oled1_set_led_state(&oled1, OLED1_LED3_ID, false);

		vTaskDelay(MAIN_TASK_DELAY);
    37ec:	2014      	movs	r0, #20
    37ee:	4b28      	ldr	r3, [pc, #160]	; (3890 <main_task+0x1dc>)
    37f0:	4798      	blx	r3
	}
    37f2:	e76f      	b.n	36d4 <main_task+0x20>
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    37f4:	6a3b      	ldr	r3, [r7, #32]
		// Check buttons to see if user changed the selection
		if (oled1_get_button_state(&oled1, OLED1_BUTTON1_ID)
					&& (current_selection != MENU_ITEM_GRAPH)) {
			current_selection = MENU_ITEM_GRAPH;
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON2_ID)
    37f6:	065a      	lsls	r2, r3, #25
    37f8:	d585      	bpl.n	3706 <main_task+0x52>
    37fa:	e017      	b.n	382c <main_task+0x178>
    37fc:	6a3b      	ldr	r3, [r7, #32]
					&& (current_selection != MENU_ITEM_TERMINAL)) {
			current_selection = MENU_ITEM_TERMINAL;
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON3_ID)
    37fe:	061a      	lsls	r2, r3, #24
    3800:	d500      	bpl.n	3804 <main_task+0x150>
    3802:	e77d      	b.n	3700 <main_task+0x4c>
					&& (current_selection != MENU_ITEM_ABOUT)) {
			current_selection = MENU_ITEM_ABOUT;
    3804:	2602      	movs	r6, #2
    3806:	e77f      	b.n	3708 <main_task+0x54>
		oled1_set_led_state(&oled1, OLED1_LED3_ID, true);

		// Check buttons to see if user changed the selection
		if (oled1_get_button_state(&oled1, OLED1_BUTTON1_ID)
					&& (current_selection != MENU_ITEM_GRAPH)) {
			current_selection = MENU_ITEM_GRAPH;
    3808:	2600      	movs	r6, #0
    380a:	e77d      	b.n	3708 <main_task+0x54>
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON2_ID)
					&& (current_selection != MENU_ITEM_TERMINAL)) {
			current_selection = MENU_ITEM_TERMINAL;
    380c:	2601      	movs	r6, #1
    380e:	e77b      	b.n	3708 <main_task+0x54>
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON3_ID)
					&& (current_selection != MENU_ITEM_ABOUT)) {
			current_selection = MENU_ITEM_ABOUT;
    3810:	2602      	movs	r6, #2
    3812:	e779      	b.n	3708 <main_task+0x54>
    3814:	2602      	movs	r6, #2
    3816:	e777      	b.n	3708 <main_task+0x54>
					&& (current_selection != MENU_ITEM_GRAPH)) {
			current_selection = MENU_ITEM_GRAPH;
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON2_ID)
					&& (current_selection != MENU_ITEM_TERMINAL)) {
			current_selection = MENU_ITEM_TERMINAL;
    3818:	2300      	movs	r3, #0
    381a:	4698      	mov	r8, r3
    381c:	e78e      	b.n	373c <main_task+0x88>

			// Select and initialize display buffer to use.
			display_y_offset = select_graph_buffer ? CANVAS_GRAPH_Y_OFFSET : 0;

			// Draw the menu bar (only needs to be done once for graph)
			if (!select_graph_buffer || !graph_buffer_initialized) {
    381e:	2d00      	cmp	r5, #0
    3820:	d108      	bne.n	3834 <main_task+0x180>
				temp_task_handle = about_task_handle;
				select_graph_buffer = false;
			}

			// Select and initialize display buffer to use.
			display_y_offset = select_graph_buffer ? CANVAS_GRAPH_Y_OFFSET : 0;
    3822:	2220      	movs	r2, #32
    3824:	4690      	mov	r8, r2
    3826:	2300      	movs	r3, #0
    3828:	4699      	mov	r9, r3
    382a:	e787      	b.n	373c <main_task+0x88>
    382c:	6a3b      	ldr	r3, [r7, #32]
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON2_ID)
					&& (current_selection != MENU_ITEM_TERMINAL)) {
			current_selection = MENU_ITEM_TERMINAL;
			selection_changed = true;
		} else if (oled1_get_button_state(&oled1, OLED1_BUTTON3_ID)
    382e:	061a      	lsls	r2, r3, #24
    3830:	d5f0      	bpl.n	3814 <main_task+0x160>
    3832:	e765      	b.n	3700 <main_task+0x4c>
    3834:	2060      	movs	r0, #96	; 0x60
    3836:	4b13      	ldr	r3, [pc, #76]	; (3884 <main_task+0x1d0>)
    3838:	4798      	blx	r3

			// Set display controller to output the new buffer
			ssd1306_set_display_start_line_address(display_y_offset);

			// We are done modifying the display, so give back the mutex
			xSemaphoreGive(display_mutex);
    383a:	4b06      	ldr	r3, [pc, #24]	; (3854 <main_task+0x1a0>)
    383c:	6818      	ldr	r0, [r3, #0]
    383e:	2100      	movs	r1, #0
    3840:	2200      	movs	r2, #0
    3842:	2300      	movs	r3, #0
    3844:	4c10      	ldr	r4, [pc, #64]	; (3888 <main_task+0x1d4>)
    3846:	47a0      	blx	r4
    3848:	2300      	movs	r3, #0
    384a:	4699      	mov	r9, r3

			selection_changed = false;
    384c:	2400      	movs	r4, #0
    384e:	e7ca      	b.n	37e6 <main_task+0x132>
    3850:	41004400 	.word	0x41004400
    3854:	20003d44 	.word	0x20003d44
    3858:	00002231 	.word	0x00002231
    385c:	00002b5d 	.word	0x00002b5d
    3860:	20003d4c 	.word	0x20003d4c
    3864:	20003d54 	.word	0x20003d54
    3868:	00000531 	.word	0x00000531
    386c:	00000265 	.word	0x00000265
    3870:	00000341 	.word	0x00000341
    3874:	000004d5 	.word	0x000004d5
    3878:	00004fc0 	.word	0x00004fc0
    387c:	20000000 	.word	0x20000000
    3880:	00000629 	.word	0x00000629
    3884:	000001ad 	.word	0x000001ad
    3888:	00001f95 	.word	0x00001f95
    388c:	000026b1 	.word	0x000026b1
    3890:	000029e5 	.word	0x000029e5

00003894 <demotasks_init>:
 * This function initializes the \ref oled1_xpro_io_group instance and the
 * \ref edbg_cdc_rx_group instance for reception, then creates all
 * the objects for FreeRTOS to run the demo.
 */
void demotasks_init(void)
{
    3894:	b5f0      	push	{r4, r5, r6, r7, lr}
    3896:	4647      	mov	r7, r8
    3898:	b480      	push	{r7}
    389a:	b094      	sub	sp, #80	; 0x50
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    389c:	ac04      	add	r4, sp, #16
    389e:	2500      	movs	r5, #0
    38a0:	2700      	movs	r7, #0
    38a2:	70a5      	strb	r5, [r4, #2]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    38a4:	4b6d      	ldr	r3, [pc, #436]	; (3a5c <demotasks_init+0x1c8>)
    38a6:	2280      	movs	r2, #128	; 0x80
    38a8:	02d2      	lsls	r2, r2, #11
    38aa:	619a      	str	r2, [r3, #24]
    38ac:	2280      	movs	r2, #128	; 0x80
    38ae:	0312      	lsls	r2, r2, #12
    38b0:	619a      	str	r2, [r3, #24]
    38b2:	2280      	movs	r2, #128	; 0x80
    38b4:	0552      	lsls	r2, r2, #21
    38b6:	619a      	str	r2, [r3, #24]

	port_pin_set_output_level(oled1->led0_pin, !OLED1_LED_ACTIVE);
	port_pin_set_output_level(oled1->led1_pin, !OLED1_LED_ACTIVE);
	port_pin_set_output_level(oled1->led2_pin, !OLED1_LED_ACTIVE);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    38b8:	2302      	movs	r3, #2
    38ba:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    38bc:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(oled1->led0_pin, &pin_conf);
    38be:	2012      	movs	r0, #18
    38c0:	1c21      	adds	r1, r4, #0
    38c2:	4e67      	ldr	r6, [pc, #412]	; (3a60 <demotasks_init+0x1cc>)
    38c4:	47b0      	blx	r6
	port_pin_set_config(oled1->led1_pin, &pin_conf);
    38c6:	2013      	movs	r0, #19
    38c8:	1c21      	adds	r1, r4, #0
    38ca:	47b0      	blx	r6
	port_pin_set_config(oled1->led2_pin, &pin_conf);
    38cc:	201c      	movs	r0, #28
    38ce:	1c21      	adds	r1, r4, #0
    38d0:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    38d2:	7025      	strb	r5, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    38d4:	2201      	movs	r2, #1
    38d6:	4690      	mov	r8, r2
    38d8:	7062      	strb	r2, [r4, #1]
	port_pin_set_config(oled1->button0_pin, &pin_conf);
    38da:	2016      	movs	r0, #22
    38dc:	1c21      	adds	r1, r4, #0
    38de:	47b0      	blx	r6
	port_pin_set_config(oled1->button1_pin, &pin_conf);
    38e0:	2006      	movs	r0, #6
    38e2:	1c21      	adds	r1, r4, #0
    38e4:	47b0      	blx	r6
	port_pin_set_config(oled1->button2_pin, &pin_conf);
    38e6:	2007      	movs	r0, #7
    38e8:	1c21      	adds	r1, r4, #0
    38ea:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    38ec:	2380      	movs	r3, #128	; 0x80
    38ee:	05db      	lsls	r3, r3, #23
    38f0:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    38f2:	6065      	str	r5, [r4, #4]
	config->parity           = USART_PARITY_NONE;
    38f4:	23ff      	movs	r3, #255	; 0xff
    38f6:	8123      	strh	r3, [r4, #8]
	config->stopbits         = USART_STOPBITS_1;
    38f8:	72a5      	strb	r5, [r4, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    38fa:	72e5      	strb	r5, [r4, #11]
	config->baudrate         = 9600;
    38fc:	2396      	movs	r3, #150	; 0x96
    38fe:	019b      	lsls	r3, r3, #6
    3900:	6223      	str	r3, [r4, #32]
	config->receiver_enable  = true;
    3902:	2324      	movs	r3, #36	; 0x24
    3904:	4642      	mov	r2, r8
    3906:	54e2      	strb	r2, [r4, r3]
	config->transmitter_enable = true;
    3908:	2325      	movs	r3, #37	; 0x25
    390a:	54e2      	strb	r2, [r4, r3]
	config->clock_polarity_inverted = false;
    390c:	2326      	movs	r3, #38	; 0x26
    390e:	54e5      	strb	r5, [r4, r3]
	config->use_external_clock = false;
    3910:	2327      	movs	r3, #39	; 0x27
    3912:	54e5      	strb	r5, [r4, r3]
	config->ext_clock_freq   = 0;
    3914:	62a5      	str	r5, [r4, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3916:	232c      	movs	r3, #44	; 0x2c
    3918:	54e5      	strb	r5, [r4, r3]
	config->generator_source = GCLK_GENERATOR_0;
    391a:	232d      	movs	r3, #45	; 0x2d
    391c:	54e5      	strb	r5, [r4, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    391e:	6165      	str	r5, [r4, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3920:	8225      	strh	r5, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3922:	2300      	movs	r3, #0
    3924:	76e3      	strb	r3, [r4, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    3926:	7627      	strb	r7, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    3928:	7727      	strb	r7, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    392a:	7667      	strb	r7, [r4, #25]
	config->receive_pulse_length                        = 19;
    392c:	2313      	movs	r3, #19
    392e:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    3930:	7767      	strb	r7, [r4, #29]
	struct usart_config config_struct;
	uint8_t instance_index;

	usart_get_config_defaults(&config_struct);

	config_struct.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    3932:	2380      	movs	r3, #128	; 0x80
    3934:	035b      	lsls	r3, r3, #13
    3936:	60e3      	str	r3, [r4, #12]
	config_struct.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3938:	4b4a      	ldr	r3, [pc, #296]	; (3a64 <demotasks_init+0x1d0>)
    393a:	6323      	str	r3, [r4, #48]	; 0x30
	config_struct.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    393c:	4b4a      	ldr	r3, [pc, #296]	; (3a68 <demotasks_init+0x1d4>)
    393e:	6363      	str	r3, [r4, #52]	; 0x34
	config_struct.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    3940:	2301      	movs	r3, #1
    3942:	425b      	negs	r3, r3
    3944:	63a3      	str	r3, [r4, #56]	; 0x38
	config_struct.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3946:	63e3      	str	r3, [r4, #60]	; 0x3c

	while (usart_init(usart, EDBG_CDC_MODULE, &config_struct) != STATUS_OK) {
    3948:	4e48      	ldr	r6, [pc, #288]	; (3a6c <demotasks_init+0x1d8>)
    394a:	4d49      	ldr	r5, [pc, #292]	; (3a70 <demotasks_init+0x1dc>)
    394c:	4c49      	ldr	r4, [pc, #292]	; (3a74 <demotasks_init+0x1e0>)
    394e:	1c30      	adds	r0, r6, #0
    3950:	1c29      	adds	r1, r5, #0
    3952:	aa04      	add	r2, sp, #16
    3954:	47a0      	blx	r4
    3956:	2800      	cmp	r0, #0
    3958:	d1f9      	bne.n	394e <demotasks_init+0xba>
		// Intentionally left empty
	}

	// Inject our own interrupt handler
	instance_index = _sercom_get_sercom_inst_index(EDBG_CDC_MODULE);
    395a:	4845      	ldr	r0, [pc, #276]	; (3a70 <demotasks_init+0x1dc>)
    395c:	4b46      	ldr	r3, [pc, #280]	; (3a78 <demotasks_init+0x1e4>)
    395e:	4798      	blx	r3
	_sercom_set_handler(instance_index, cdc_rx_handler);
    3960:	4946      	ldr	r1, [pc, #280]	; (3a7c <demotasks_init+0x1e8>)
    3962:	4b47      	ldr	r3, [pc, #284]	; (3a80 <demotasks_init+0x1ec>)
    3964:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3966:	4d41      	ldr	r5, [pc, #260]	; (3a6c <demotasks_init+0x1d8>)
    3968:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    396a:	1c20      	adds	r0, r4, #0
    396c:	4b45      	ldr	r3, [pc, #276]	; (3a84 <demotasks_init+0x1f0>)
    396e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3970:	231f      	movs	r3, #31
    3972:	4018      	ands	r0, r3
    3974:	2301      	movs	r3, #1
    3976:	4083      	lsls	r3, r0
    3978:	1c18      	adds	r0, r3, #0
    397a:	4b43      	ldr	r3, [pc, #268]	; (3a88 <demotasks_init+0x1f4>)
    397c:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    397e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3980:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    3982:	2b00      	cmp	r3, #0
    3984:	d1fc      	bne.n	3980 <demotasks_init+0xec>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3986:	6822      	ldr	r2, [r4, #0]
    3988:	2302      	movs	r3, #2
    398a:	4313      	orrs	r3, r2
    398c:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    398e:	4b37      	ldr	r3, [pc, #220]	; (3a6c <demotasks_init+0x1d8>)
    3990:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3992:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    3994:	2a00      	cmp	r2, #0
    3996:	d1fc      	bne.n	3992 <demotasks_init+0xfe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3998:	6859      	ldr	r1, [r3, #4]
    399a:	2280      	movs	r2, #128	; 0x80
    399c:	0252      	lsls	r2, r2, #9
    399e:	430a      	orrs	r2, r1
    39a0:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    39a2:	2101      	movs	r1, #1
    39a4:	4a31      	ldr	r2, [pc, #196]	; (3a6c <demotasks_init+0x1d8>)
    39a6:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    39a8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    39aa:	2a00      	cmp	r2, #0
    39ac:	d1fc      	bne.n	39a8 <demotasks_init+0x114>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    39ae:	6859      	ldr	r1, [r3, #4]
    39b0:	2280      	movs	r2, #128	; 0x80
    39b2:	0292      	lsls	r2, r2, #10
    39b4:	430a      	orrs	r2, r1
    39b6:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    39b8:	2601      	movs	r6, #1
    39ba:	4b2c      	ldr	r3, [pc, #176]	; (3a6c <demotasks_init+0x1d8>)
    39bc:	719e      	strb	r6, [r3, #6]
	usart_enable(usart);
	usart_enable_transceiver(usart, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(usart, USART_TRANSCEIVER_RX);

	// ..and the RX Complete interrupt
	((SercomUsart *)EDBG_CDC_MODULE)->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    39be:	2204      	movs	r2, #4
    39c0:	4b2b      	ldr	r3, [pc, #172]	; (3a70 <demotasks_init+0x1dc>)
    39c2:	759a      	strb	r2, [r3, #22]
	oled1_init(&oled1);

	// Configure SERCOM USART for reception from EDBG Virtual COM Port
	cdc_rx_init(&cdc_usart, &cdc_rx_handler);

	display_mutex  = xSemaphoreCreateMutex();
    39c4:	2001      	movs	r0, #1
    39c6:	4c31      	ldr	r4, [pc, #196]	; (3a8c <demotasks_init+0x1f8>)
    39c8:	47a0      	blx	r4
    39ca:	4b31      	ldr	r3, [pc, #196]	; (3a90 <demotasks_init+0x1fc>)
    39cc:	6018      	str	r0, [r3, #0]
	terminal_mutex = xSemaphoreCreateMutex();
    39ce:	2001      	movs	r0, #1
    39d0:	47a0      	blx	r4
    39d2:	4b30      	ldr	r3, [pc, #192]	; (3a94 <demotasks_init+0x200>)
    39d4:	6018      	str	r0, [r3, #0]
	terminal_in_queue = xQueueCreate(64, sizeof(uint8_t));
    39d6:	2040      	movs	r0, #64	; 0x40
    39d8:	2101      	movs	r1, #1
    39da:	2200      	movs	r2, #0
    39dc:	4b2e      	ldr	r3, [pc, #184]	; (3a98 <demotasks_init+0x204>)
    39de:	4798      	blx	r3
    39e0:	4b2e      	ldr	r3, [pc, #184]	; (3a9c <demotasks_init+0x208>)
    39e2:	6018      	str	r0, [r3, #0]

	xTaskCreate(about_task,
    39e4:	9600      	str	r6, [sp, #0]
    39e6:	4f2e      	ldr	r7, [pc, #184]	; (3aa0 <demotasks_init+0x20c>)
    39e8:	9701      	str	r7, [sp, #4]
    39ea:	2400      	movs	r4, #0
    39ec:	9402      	str	r4, [sp, #8]
    39ee:	9403      	str	r4, [sp, #12]
    39f0:	482c      	ldr	r0, [pc, #176]	; (3aa4 <demotasks_init+0x210>)
    39f2:	492d      	ldr	r1, [pc, #180]	; (3aa8 <demotasks_init+0x214>)
    39f4:	2264      	movs	r2, #100	; 0x64
    39f6:	2300      	movs	r3, #0
    39f8:	4d2c      	ldr	r5, [pc, #176]	; (3aac <demotasks_init+0x218>)
    39fa:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			ABOUT_TASK_PRIORITY,
			&about_task_handle);

	xTaskCreate(graph_task,
    39fc:	9600      	str	r6, [sp, #0]
    39fe:	9401      	str	r4, [sp, #4]
    3a00:	9402      	str	r4, [sp, #8]
    3a02:	9403      	str	r4, [sp, #12]
    3a04:	482a      	ldr	r0, [pc, #168]	; (3ab0 <demotasks_init+0x21c>)
    3a06:	492b      	ldr	r1, [pc, #172]	; (3ab4 <demotasks_init+0x220>)
    3a08:	2264      	movs	r2, #100	; 0x64
    3a0a:	2300      	movs	r3, #0
    3a0c:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			GRAPH_TASK_PRIORITY,
			NULL);

	xTaskCreate(main_task,
    3a0e:	2302      	movs	r3, #2
    3a10:	9300      	str	r3, [sp, #0]
    3a12:	9401      	str	r4, [sp, #4]
    3a14:	9402      	str	r4, [sp, #8]
    3a16:	9403      	str	r4, [sp, #12]
    3a18:	4827      	ldr	r0, [pc, #156]	; (3ab8 <demotasks_init+0x224>)
    3a1a:	4928      	ldr	r1, [pc, #160]	; (3abc <demotasks_init+0x228>)
    3a1c:	2264      	movs	r2, #100	; 0x64
    3a1e:	2300      	movs	r3, #0
    3a20:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			MAIN_TASK_PRIORITY,
			NULL);

	xTaskCreate(terminal_task,
    3a22:	9600      	str	r6, [sp, #0]
    3a24:	4e26      	ldr	r6, [pc, #152]	; (3ac0 <demotasks_init+0x22c>)
    3a26:	9601      	str	r6, [sp, #4]
    3a28:	9402      	str	r4, [sp, #8]
    3a2a:	9403      	str	r4, [sp, #12]
    3a2c:	4825      	ldr	r0, [pc, #148]	; (3ac4 <demotasks_init+0x230>)
    3a2e:	4926      	ldr	r1, [pc, #152]	; (3ac8 <demotasks_init+0x234>)
    3a30:	2264      	movs	r2, #100	; 0x64
    3a32:	2300      	movs	r3, #0
    3a34:	47a8      	blx	r5
			configMINIMAL_STACK_SIZE,
			NULL,
			TERMINAL_TASK_PRIORITY,
			&terminal_task_handle);

	xTaskCreate(uart_task,
    3a36:	2303      	movs	r3, #3
    3a38:	9300      	str	r3, [sp, #0]
    3a3a:	9401      	str	r4, [sp, #4]
    3a3c:	9402      	str	r4, [sp, #8]
    3a3e:	9403      	str	r4, [sp, #12]
    3a40:	4822      	ldr	r0, [pc, #136]	; (3acc <demotasks_init+0x238>)
    3a42:	4923      	ldr	r1, [pc, #140]	; (3ad0 <demotasks_init+0x23c>)
    3a44:	2264      	movs	r2, #100	; 0x64
    3a46:	2300      	movs	r3, #0
    3a48:	47a8      	blx	r5
			NULL,
			UART_TASK_PRIORITY,
			NULL);

	// Suspend these since the main task will control their execution
	vTaskSuspend(about_task_handle);
    3a4a:	6838      	ldr	r0, [r7, #0]
    3a4c:	4c21      	ldr	r4, [pc, #132]	; (3ad4 <demotasks_init+0x240>)
    3a4e:	47a0      	blx	r4
	vTaskSuspend(terminal_task_handle);
    3a50:	6830      	ldr	r0, [r6, #0]
    3a52:	47a0      	blx	r4
}
    3a54:	b014      	add	sp, #80	; 0x50
    3a56:	bc04      	pop	{r2}
    3a58:	4690      	mov	r8, r2
    3a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a5c:	41004400 	.word	0x41004400
    3a60:	00000839 	.word	0x00000839
    3a64:	00040003 	.word	0x00040003
    3a68:	00050003 	.word	0x00050003
    3a6c:	20003d10 	.word	0x20003d10
    3a70:	42000800 	.word	0x42000800
    3a74:	00000ed5 	.word	0x00000ed5
    3a78:	00000c11 	.word	0x00000c11
    3a7c:	0000325d 	.word	0x0000325d
    3a80:	00000c51 	.word	0x00000c51
    3a84:	00000c8d 	.word	0x00000c8d
    3a88:	e000e100 	.word	0xe000e100
    3a8c:	00002109 	.word	0x00002109
    3a90:	20003d44 	.word	0x20003d44
    3a94:	20003d48 	.word	0x20003d48
    3a98:	00001f41 	.word	0x00001f41
    3a9c:	20003d58 	.word	0x20003d58
    3aa0:	20003d54 	.word	0x20003d54
    3aa4:	000033b9 	.word	0x000033b9
    3aa8:	00005014 	.word	0x00005014
    3aac:	000024bd 	.word	0x000024bd
    3ab0:	000034b9 	.word	0x000034b9
    3ab4:	0000501c 	.word	0x0000501c
    3ab8:	000036b5 	.word	0x000036b5
    3abc:	00005024 	.word	0x00005024
    3ac0:	20003d4c 	.word	0x20003d4c
    3ac4:	000035ad 	.word	0x000035ad
    3ac8:	0000502c 	.word	0x0000502c
    3acc:	000032cd 	.word	0x000032cd
    3ad0:	00005034 	.word	0x00005034
    3ad4:	00002b5d 	.word	0x00002b5d

00003ad8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3ad8:	b570      	push	{r4, r5, r6, lr}
    3ada:	b082      	sub	sp, #8
    3adc:	1c05      	adds	r5, r0, #0
    3ade:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    3ae0:	2200      	movs	r2, #0
    3ae2:	466b      	mov	r3, sp
    3ae4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3ae6:	4c06      	ldr	r4, [pc, #24]	; (3b00 <usart_serial_getchar+0x28>)
    3ae8:	1c28      	adds	r0, r5, #0
    3aea:	4669      	mov	r1, sp
    3aec:	3106      	adds	r1, #6
    3aee:	47a0      	blx	r4
    3af0:	2800      	cmp	r0, #0
    3af2:	d1f9      	bne.n	3ae8 <usart_serial_getchar+0x10>

	*c = temp;
    3af4:	466b      	mov	r3, sp
    3af6:	3306      	adds	r3, #6
    3af8:	881b      	ldrh	r3, [r3, #0]
    3afa:	7033      	strb	r3, [r6, #0]
}
    3afc:	b002      	add	sp, #8
    3afe:	bd70      	pop	{r4, r5, r6, pc}
    3b00:	00001209 	.word	0x00001209

00003b04 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    3b04:	b570      	push	{r4, r5, r6, lr}
    3b06:	1c06      	adds	r6, r0, #0
    3b08:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    3b0a:	4c03      	ldr	r4, [pc, #12]	; (3b18 <usart_serial_putchar+0x14>)
    3b0c:	1c30      	adds	r0, r6, #0
    3b0e:	1c29      	adds	r1, r5, #0
    3b10:	47a0      	blx	r4
    3b12:	2800      	cmp	r0, #0
    3b14:	d1fa      	bne.n	3b0c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    3b16:	bd70      	pop	{r4, r5, r6, pc}
    3b18:	000011dd 	.word	0x000011dd

00003b1c <main>:
	stdio_serial_init(&cdc_uart_module, USART_HOST, &usart_conf);
	usart_enable(&cdc_uart_module);
}

int main (void)
{
    3b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b1e:	b091      	sub	sp, #68	; 0x44
	system_init();
    3b20:	4b31      	ldr	r3, [pc, #196]	; (3be8 <main+0xcc>)
    3b22:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3b24:	2380      	movs	r3, #128	; 0x80
    3b26:	05db      	lsls	r3, r3, #23
    3b28:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3b2a:	2300      	movs	r3, #0
    3b2c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3b2e:	22ff      	movs	r2, #255	; 0xff
    3b30:	4668      	mov	r0, sp
    3b32:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    3b34:	2200      	movs	r2, #0
    3b36:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3b38:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    3b3a:	2196      	movs	r1, #150	; 0x96
    3b3c:	0189      	lsls	r1, r1, #6
    3b3e:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3b40:	2601      	movs	r6, #1
    3b42:	2124      	movs	r1, #36	; 0x24
    3b44:	5446      	strb	r6, [r0, r1]
	config->transmitter_enable = true;
    3b46:	2125      	movs	r1, #37	; 0x25
    3b48:	5446      	strb	r6, [r0, r1]
	config->clock_polarity_inverted = false;
    3b4a:	2126      	movs	r1, #38	; 0x26
    3b4c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3b4e:	2127      	movs	r1, #39	; 0x27
    3b50:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3b52:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3b54:	212c      	movs	r1, #44	; 0x2c
    3b56:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3b58:	212d      	movs	r1, #45	; 0x2d
    3b5a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3b5c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3b5e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3b60:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    3b62:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    3b64:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    3b66:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    3b68:	2313      	movs	r3, #19
    3b6a:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    3b6c:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = HOST_SERCOM_MUX_SETTING;
    3b6e:	2380      	movs	r3, #128	; 0x80
    3b70:	035b      	lsls	r3, r3, #13
    3b72:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3b74:	4b1d      	ldr	r3, [pc, #116]	; (3bec <main+0xd0>)
    3b76:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3b78:	4b1d      	ldr	r3, [pc, #116]	; (3bf0 <main+0xd4>)
    3b7a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3b7c:	2301      	movs	r3, #1
    3b7e:	425b      	negs	r3, r3
    3b80:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3b82:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3b84:	4c1b      	ldr	r4, [pc, #108]	; (3bf4 <main+0xd8>)
    3b86:	4b1c      	ldr	r3, [pc, #112]	; (3bf8 <main+0xdc>)
    3b88:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3b8a:	4a1c      	ldr	r2, [pc, #112]	; (3bfc <main+0xe0>)
    3b8c:	4b1c      	ldr	r3, [pc, #112]	; (3c00 <main+0xe4>)
    3b8e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3b90:	4a1c      	ldr	r2, [pc, #112]	; (3c04 <main+0xe8>)
    3b92:	4b1d      	ldr	r3, [pc, #116]	; (3c08 <main+0xec>)
    3b94:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    3b96:	1c20      	adds	r0, r4, #0
    3b98:	491c      	ldr	r1, [pc, #112]	; (3c0c <main+0xf0>)
    3b9a:	466a      	mov	r2, sp
    3b9c:	4b1c      	ldr	r3, [pc, #112]	; (3c10 <main+0xf4>)
    3b9e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3ba0:	4f1c      	ldr	r7, [pc, #112]	; (3c14 <main+0xf8>)
    3ba2:	683b      	ldr	r3, [r7, #0]
    3ba4:	6898      	ldr	r0, [r3, #8]
    3ba6:	2100      	movs	r1, #0
    3ba8:	4d1b      	ldr	r5, [pc, #108]	; (3c18 <main+0xfc>)
    3baa:	47a8      	blx	r5
	setbuf(stdin, NULL);
    3bac:	683b      	ldr	r3, [r7, #0]
    3bae:	6858      	ldr	r0, [r3, #4]
    3bb0:	2100      	movs	r1, #0
    3bb2:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bb4:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3bb6:	1c28      	adds	r0, r5, #0
    3bb8:	4b18      	ldr	r3, [pc, #96]	; (3c1c <main+0x100>)
    3bba:	4798      	blx	r3
    3bbc:	231f      	movs	r3, #31
    3bbe:	4018      	ands	r0, r3
    3bc0:	4086      	lsls	r6, r0
    3bc2:	4b17      	ldr	r3, [pc, #92]	; (3c20 <main+0x104>)
    3bc4:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3bc6:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3bc8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    3bca:	2a00      	cmp	r2, #0
    3bcc:	d1fc      	bne.n	3bc8 <main+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3bce:	682a      	ldr	r2, [r5, #0]
    3bd0:	2302      	movs	r3, #2
    3bd2:	4313      	orrs	r3, r2
    3bd4:	602b      	str	r3, [r5, #0]
int main (void)
{
	system_init();
	//gfx_mono_init();
	configure_console();
	printf("It works!");
    3bd6:	4813      	ldr	r0, [pc, #76]	; (3c24 <main+0x108>)
    3bd8:	4b13      	ldr	r3, [pc, #76]	; (3c28 <main+0x10c>)
    3bda:	4798      	blx	r3
	// Initialize the demo..
	demotasks_init();
    3bdc:	4b13      	ldr	r3, [pc, #76]	; (3c2c <main+0x110>)
    3bde:	4798      	blx	r3

	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    3be0:	4b13      	ldr	r3, [pc, #76]	; (3c30 <main+0x114>)
    3be2:	4798      	blx	r3
    3be4:	e7fe      	b.n	3be4 <main+0xc8>
    3be6:	46c0      	nop			; (mov r8, r8)
    3be8:	00001981 	.word	0x00001981
    3bec:	00040003 	.word	0x00040003
    3bf0:	00050003 	.word	0x00050003
    3bf4:	20003d5c 	.word	0x20003d5c
    3bf8:	20003da0 	.word	0x20003da0
    3bfc:	00003b05 	.word	0x00003b05
    3c00:	20003d9c 	.word	0x20003d9c
    3c04:	00003ad9 	.word	0x00003ad9
    3c08:	20003d98 	.word	0x20003d98
    3c0c:	42000800 	.word	0x42000800
    3c10:	00000ed5 	.word	0x00000ed5
    3c14:	2000007c 	.word	0x2000007c
    3c18:	00003dbd 	.word	0x00003dbd
    3c1c:	00000c8d 	.word	0x00000c8d
    3c20:	e000e100 	.word	0xe000e100
    3c24:	0000503c 	.word	0x0000503c
    3c28:	00003d89 	.word	0x00003d89
    3c2c:	00003895 	.word	0x00003895
    3c30:	00002731 	.word	0x00002731

00003c34 <__aeabi_uidiv>:
    3c34:	2900      	cmp	r1, #0
    3c36:	d034      	beq.n	3ca2 <.udivsi3_skip_div0_test+0x6a>

00003c38 <.udivsi3_skip_div0_test>:
    3c38:	2301      	movs	r3, #1
    3c3a:	2200      	movs	r2, #0
    3c3c:	b410      	push	{r4}
    3c3e:	4288      	cmp	r0, r1
    3c40:	d32c      	bcc.n	3c9c <.udivsi3_skip_div0_test+0x64>
    3c42:	2401      	movs	r4, #1
    3c44:	0724      	lsls	r4, r4, #28
    3c46:	42a1      	cmp	r1, r4
    3c48:	d204      	bcs.n	3c54 <.udivsi3_skip_div0_test+0x1c>
    3c4a:	4281      	cmp	r1, r0
    3c4c:	d202      	bcs.n	3c54 <.udivsi3_skip_div0_test+0x1c>
    3c4e:	0109      	lsls	r1, r1, #4
    3c50:	011b      	lsls	r3, r3, #4
    3c52:	e7f8      	b.n	3c46 <.udivsi3_skip_div0_test+0xe>
    3c54:	00e4      	lsls	r4, r4, #3
    3c56:	42a1      	cmp	r1, r4
    3c58:	d204      	bcs.n	3c64 <.udivsi3_skip_div0_test+0x2c>
    3c5a:	4281      	cmp	r1, r0
    3c5c:	d202      	bcs.n	3c64 <.udivsi3_skip_div0_test+0x2c>
    3c5e:	0049      	lsls	r1, r1, #1
    3c60:	005b      	lsls	r3, r3, #1
    3c62:	e7f8      	b.n	3c56 <.udivsi3_skip_div0_test+0x1e>
    3c64:	4288      	cmp	r0, r1
    3c66:	d301      	bcc.n	3c6c <.udivsi3_skip_div0_test+0x34>
    3c68:	1a40      	subs	r0, r0, r1
    3c6a:	431a      	orrs	r2, r3
    3c6c:	084c      	lsrs	r4, r1, #1
    3c6e:	42a0      	cmp	r0, r4
    3c70:	d302      	bcc.n	3c78 <.udivsi3_skip_div0_test+0x40>
    3c72:	1b00      	subs	r0, r0, r4
    3c74:	085c      	lsrs	r4, r3, #1
    3c76:	4322      	orrs	r2, r4
    3c78:	088c      	lsrs	r4, r1, #2
    3c7a:	42a0      	cmp	r0, r4
    3c7c:	d302      	bcc.n	3c84 <.udivsi3_skip_div0_test+0x4c>
    3c7e:	1b00      	subs	r0, r0, r4
    3c80:	089c      	lsrs	r4, r3, #2
    3c82:	4322      	orrs	r2, r4
    3c84:	08cc      	lsrs	r4, r1, #3
    3c86:	42a0      	cmp	r0, r4
    3c88:	d302      	bcc.n	3c90 <.udivsi3_skip_div0_test+0x58>
    3c8a:	1b00      	subs	r0, r0, r4
    3c8c:	08dc      	lsrs	r4, r3, #3
    3c8e:	4322      	orrs	r2, r4
    3c90:	2800      	cmp	r0, #0
    3c92:	d003      	beq.n	3c9c <.udivsi3_skip_div0_test+0x64>
    3c94:	091b      	lsrs	r3, r3, #4
    3c96:	d001      	beq.n	3c9c <.udivsi3_skip_div0_test+0x64>
    3c98:	0909      	lsrs	r1, r1, #4
    3c9a:	e7e3      	b.n	3c64 <.udivsi3_skip_div0_test+0x2c>
    3c9c:	1c10      	adds	r0, r2, #0
    3c9e:	bc10      	pop	{r4}
    3ca0:	4770      	bx	lr
    3ca2:	2800      	cmp	r0, #0
    3ca4:	d001      	beq.n	3caa <.udivsi3_skip_div0_test+0x72>
    3ca6:	2000      	movs	r0, #0
    3ca8:	43c0      	mvns	r0, r0
    3caa:	b407      	push	{r0, r1, r2}
    3cac:	4802      	ldr	r0, [pc, #8]	; (3cb8 <.udivsi3_skip_div0_test+0x80>)
    3cae:	a102      	add	r1, pc, #8	; (adr r1, 3cb8 <.udivsi3_skip_div0_test+0x80>)
    3cb0:	1840      	adds	r0, r0, r1
    3cb2:	9002      	str	r0, [sp, #8]
    3cb4:	bd03      	pop	{r0, r1, pc}
    3cb6:	46c0      	nop			; (mov r8, r8)
    3cb8:	00000019 	.word	0x00000019

00003cbc <__aeabi_uidivmod>:
    3cbc:	2900      	cmp	r1, #0
    3cbe:	d0f0      	beq.n	3ca2 <.udivsi3_skip_div0_test+0x6a>
    3cc0:	b503      	push	{r0, r1, lr}
    3cc2:	f7ff ffb9 	bl	3c38 <.udivsi3_skip_div0_test>
    3cc6:	bc0e      	pop	{r1, r2, r3}
    3cc8:	4342      	muls	r2, r0
    3cca:	1a89      	subs	r1, r1, r2
    3ccc:	4718      	bx	r3
    3cce:	46c0      	nop			; (mov r8, r8)

00003cd0 <__aeabi_idiv0>:
    3cd0:	4770      	bx	lr
    3cd2:	46c0      	nop			; (mov r8, r8)

00003cd4 <__aeabi_lmul>:
    3cd4:	469c      	mov	ip, r3
    3cd6:	0403      	lsls	r3, r0, #16
    3cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cda:	0c1b      	lsrs	r3, r3, #16
    3cdc:	0417      	lsls	r7, r2, #16
    3cde:	0c3f      	lsrs	r7, r7, #16
    3ce0:	0c15      	lsrs	r5, r2, #16
    3ce2:	1c1e      	adds	r6, r3, #0
    3ce4:	1c04      	adds	r4, r0, #0
    3ce6:	0c00      	lsrs	r0, r0, #16
    3ce8:	437e      	muls	r6, r7
    3cea:	436b      	muls	r3, r5
    3cec:	4347      	muls	r7, r0
    3cee:	4345      	muls	r5, r0
    3cf0:	18fb      	adds	r3, r7, r3
    3cf2:	0c30      	lsrs	r0, r6, #16
    3cf4:	1818      	adds	r0, r3, r0
    3cf6:	4287      	cmp	r7, r0
    3cf8:	d902      	bls.n	3d00 <__aeabi_lmul+0x2c>
    3cfa:	2380      	movs	r3, #128	; 0x80
    3cfc:	025b      	lsls	r3, r3, #9
    3cfe:	18ed      	adds	r5, r5, r3
    3d00:	0c03      	lsrs	r3, r0, #16
    3d02:	18ed      	adds	r5, r5, r3
    3d04:	4663      	mov	r3, ip
    3d06:	435c      	muls	r4, r3
    3d08:	434a      	muls	r2, r1
    3d0a:	0436      	lsls	r6, r6, #16
    3d0c:	0c36      	lsrs	r6, r6, #16
    3d0e:	18a1      	adds	r1, r4, r2
    3d10:	0400      	lsls	r0, r0, #16
    3d12:	1980      	adds	r0, r0, r6
    3d14:	1949      	adds	r1, r1, r5
    3d16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003d18 <__libc_init_array>:
    3d18:	b570      	push	{r4, r5, r6, lr}
    3d1a:	4b0e      	ldr	r3, [pc, #56]	; (3d54 <__libc_init_array+0x3c>)
    3d1c:	4d0e      	ldr	r5, [pc, #56]	; (3d58 <__libc_init_array+0x40>)
    3d1e:	2400      	movs	r4, #0
    3d20:	1aed      	subs	r5, r5, r3
    3d22:	10ad      	asrs	r5, r5, #2
    3d24:	1c1e      	adds	r6, r3, #0
    3d26:	42ac      	cmp	r4, r5
    3d28:	d004      	beq.n	3d34 <__libc_init_array+0x1c>
    3d2a:	00a3      	lsls	r3, r4, #2
    3d2c:	58f3      	ldr	r3, [r6, r3]
    3d2e:	4798      	blx	r3
    3d30:	3401      	adds	r4, #1
    3d32:	e7f8      	b.n	3d26 <__libc_init_array+0xe>
    3d34:	f001 f9d6 	bl	50e4 <_init>
    3d38:	4b08      	ldr	r3, [pc, #32]	; (3d5c <__libc_init_array+0x44>)
    3d3a:	4d09      	ldr	r5, [pc, #36]	; (3d60 <__libc_init_array+0x48>)
    3d3c:	2400      	movs	r4, #0
    3d3e:	1aed      	subs	r5, r5, r3
    3d40:	10ad      	asrs	r5, r5, #2
    3d42:	1c1e      	adds	r6, r3, #0
    3d44:	42ac      	cmp	r4, r5
    3d46:	d004      	beq.n	3d52 <__libc_init_array+0x3a>
    3d48:	00a3      	lsls	r3, r4, #2
    3d4a:	58f3      	ldr	r3, [r6, r3]
    3d4c:	4798      	blx	r3
    3d4e:	3401      	adds	r4, #1
    3d50:	e7f8      	b.n	3d44 <__libc_init_array+0x2c>
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	000050f0 	.word	0x000050f0
    3d58:	000050f0 	.word	0x000050f0
    3d5c:	000050f0 	.word	0x000050f0
    3d60:	000050f4 	.word	0x000050f4

00003d64 <memcpy>:
    3d64:	b510      	push	{r4, lr}
    3d66:	2300      	movs	r3, #0
    3d68:	4293      	cmp	r3, r2
    3d6a:	d003      	beq.n	3d74 <memcpy+0x10>
    3d6c:	5ccc      	ldrb	r4, [r1, r3]
    3d6e:	54c4      	strb	r4, [r0, r3]
    3d70:	3301      	adds	r3, #1
    3d72:	e7f9      	b.n	3d68 <memcpy+0x4>
    3d74:	bd10      	pop	{r4, pc}

00003d76 <memset>:
    3d76:	1c03      	adds	r3, r0, #0
    3d78:	1882      	adds	r2, r0, r2
    3d7a:	4293      	cmp	r3, r2
    3d7c:	d002      	beq.n	3d84 <memset+0xe>
    3d7e:	7019      	strb	r1, [r3, #0]
    3d80:	3301      	adds	r3, #1
    3d82:	e7fa      	b.n	3d7a <memset+0x4>
    3d84:	4770      	bx	lr
	...

00003d88 <iprintf>:
    3d88:	b40f      	push	{r0, r1, r2, r3}
    3d8a:	4b0b      	ldr	r3, [pc, #44]	; (3db8 <iprintf+0x30>)
    3d8c:	b513      	push	{r0, r1, r4, lr}
    3d8e:	681c      	ldr	r4, [r3, #0]
    3d90:	2c00      	cmp	r4, #0
    3d92:	d005      	beq.n	3da0 <iprintf+0x18>
    3d94:	69a3      	ldr	r3, [r4, #24]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d102      	bne.n	3da0 <iprintf+0x18>
    3d9a:	1c20      	adds	r0, r4, #0
    3d9c:	f000 fd2c 	bl	47f8 <__sinit>
    3da0:	ab05      	add	r3, sp, #20
    3da2:	68a1      	ldr	r1, [r4, #8]
    3da4:	1c20      	adds	r0, r4, #0
    3da6:	9a04      	ldr	r2, [sp, #16]
    3da8:	9301      	str	r3, [sp, #4]
    3daa:	f000 f8bf 	bl	3f2c <_vfiprintf_r>
    3dae:	bc16      	pop	{r1, r2, r4}
    3db0:	bc08      	pop	{r3}
    3db2:	b004      	add	sp, #16
    3db4:	4718      	bx	r3
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	2000007c 	.word	0x2000007c

00003dbc <setbuf>:
    3dbc:	b508      	push	{r3, lr}
    3dbe:	424a      	negs	r2, r1
    3dc0:	414a      	adcs	r2, r1
    3dc2:	2380      	movs	r3, #128	; 0x80
    3dc4:	0052      	lsls	r2, r2, #1
    3dc6:	00db      	lsls	r3, r3, #3
    3dc8:	f000 f802 	bl	3dd0 <setvbuf>
    3dcc:	bd08      	pop	{r3, pc}
	...

00003dd0 <setvbuf>:
    3dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3dd2:	1c1e      	adds	r6, r3, #0
    3dd4:	4b3c      	ldr	r3, [pc, #240]	; (3ec8 <setvbuf+0xf8>)
    3dd6:	1c04      	adds	r4, r0, #0
    3dd8:	681d      	ldr	r5, [r3, #0]
    3dda:	1c0f      	adds	r7, r1, #0
    3ddc:	9201      	str	r2, [sp, #4]
    3dde:	2d00      	cmp	r5, #0
    3de0:	d005      	beq.n	3dee <setvbuf+0x1e>
    3de2:	69aa      	ldr	r2, [r5, #24]
    3de4:	2a00      	cmp	r2, #0
    3de6:	d102      	bne.n	3dee <setvbuf+0x1e>
    3de8:	1c28      	adds	r0, r5, #0
    3dea:	f000 fd05 	bl	47f8 <__sinit>
    3dee:	4b37      	ldr	r3, [pc, #220]	; (3ecc <setvbuf+0xfc>)
    3df0:	429c      	cmp	r4, r3
    3df2:	d101      	bne.n	3df8 <setvbuf+0x28>
    3df4:	686c      	ldr	r4, [r5, #4]
    3df6:	e008      	b.n	3e0a <setvbuf+0x3a>
    3df8:	4b35      	ldr	r3, [pc, #212]	; (3ed0 <setvbuf+0x100>)
    3dfa:	429c      	cmp	r4, r3
    3dfc:	d101      	bne.n	3e02 <setvbuf+0x32>
    3dfe:	68ac      	ldr	r4, [r5, #8]
    3e00:	e003      	b.n	3e0a <setvbuf+0x3a>
    3e02:	4b34      	ldr	r3, [pc, #208]	; (3ed4 <setvbuf+0x104>)
    3e04:	429c      	cmp	r4, r3
    3e06:	d100      	bne.n	3e0a <setvbuf+0x3a>
    3e08:	68ec      	ldr	r4, [r5, #12]
    3e0a:	9b01      	ldr	r3, [sp, #4]
    3e0c:	2b02      	cmp	r3, #2
    3e0e:	d857      	bhi.n	3ec0 <setvbuf+0xf0>
    3e10:	2e00      	cmp	r6, #0
    3e12:	db55      	blt.n	3ec0 <setvbuf+0xf0>
    3e14:	1c28      	adds	r0, r5, #0
    3e16:	1c21      	adds	r1, r4, #0
    3e18:	f000 fc6e 	bl	46f8 <_fflush_r>
    3e1c:	2300      	movs	r3, #0
    3e1e:	6063      	str	r3, [r4, #4]
    3e20:	61a3      	str	r3, [r4, #24]
    3e22:	89a3      	ldrh	r3, [r4, #12]
    3e24:	061a      	lsls	r2, r3, #24
    3e26:	d503      	bpl.n	3e30 <setvbuf+0x60>
    3e28:	1c28      	adds	r0, r5, #0
    3e2a:	6921      	ldr	r1, [r4, #16]
    3e2c:	f000 fdba 	bl	49a4 <_free_r>
    3e30:	89a3      	ldrh	r3, [r4, #12]
    3e32:	2283      	movs	r2, #131	; 0x83
    3e34:	4393      	bics	r3, r2
    3e36:	81a3      	strh	r3, [r4, #12]
    3e38:	9b01      	ldr	r3, [sp, #4]
    3e3a:	2b02      	cmp	r3, #2
    3e3c:	d013      	beq.n	3e66 <setvbuf+0x96>
    3e3e:	2f00      	cmp	r7, #0
    3e40:	d125      	bne.n	3e8e <setvbuf+0xbe>
    3e42:	2e00      	cmp	r6, #0
    3e44:	d101      	bne.n	3e4a <setvbuf+0x7a>
    3e46:	2680      	movs	r6, #128	; 0x80
    3e48:	00f6      	lsls	r6, r6, #3
    3e4a:	1c30      	adds	r0, r6, #0
    3e4c:	f000 fd94 	bl	4978 <malloc>
    3e50:	1e07      	subs	r7, r0, #0
    3e52:	d118      	bne.n	3e86 <setvbuf+0xb6>
    3e54:	2080      	movs	r0, #128	; 0x80
    3e56:	00c0      	lsls	r0, r0, #3
    3e58:	f000 fd8e 	bl	4978 <malloc>
    3e5c:	1e07      	subs	r7, r0, #0
    3e5e:	d110      	bne.n	3e82 <setvbuf+0xb2>
    3e60:	2001      	movs	r0, #1
    3e62:	4240      	negs	r0, r0
    3e64:	e000      	b.n	3e68 <setvbuf+0x98>
    3e66:	2000      	movs	r0, #0
    3e68:	89a3      	ldrh	r3, [r4, #12]
    3e6a:	2202      	movs	r2, #2
    3e6c:	4313      	orrs	r3, r2
    3e6e:	81a3      	strh	r3, [r4, #12]
    3e70:	2300      	movs	r3, #0
    3e72:	60a3      	str	r3, [r4, #8]
    3e74:	1c23      	adds	r3, r4, #0
    3e76:	3347      	adds	r3, #71	; 0x47
    3e78:	6023      	str	r3, [r4, #0]
    3e7a:	6123      	str	r3, [r4, #16]
    3e7c:	2301      	movs	r3, #1
    3e7e:	6163      	str	r3, [r4, #20]
    3e80:	e020      	b.n	3ec4 <setvbuf+0xf4>
    3e82:	2680      	movs	r6, #128	; 0x80
    3e84:	00f6      	lsls	r6, r6, #3
    3e86:	89a3      	ldrh	r3, [r4, #12]
    3e88:	2280      	movs	r2, #128	; 0x80
    3e8a:	4313      	orrs	r3, r2
    3e8c:	81a3      	strh	r3, [r4, #12]
    3e8e:	9a01      	ldr	r2, [sp, #4]
    3e90:	2a01      	cmp	r2, #1
    3e92:	d104      	bne.n	3e9e <setvbuf+0xce>
    3e94:	89a3      	ldrh	r3, [r4, #12]
    3e96:	4313      	orrs	r3, r2
    3e98:	81a3      	strh	r3, [r4, #12]
    3e9a:	4273      	negs	r3, r6
    3e9c:	61a3      	str	r3, [r4, #24]
    3e9e:	4b0e      	ldr	r3, [pc, #56]	; (3ed8 <setvbuf+0x108>)
    3ea0:	2000      	movs	r0, #0
    3ea2:	62ab      	str	r3, [r5, #40]	; 0x28
    3ea4:	89a3      	ldrh	r3, [r4, #12]
    3ea6:	6027      	str	r7, [r4, #0]
    3ea8:	6127      	str	r7, [r4, #16]
    3eaa:	6166      	str	r6, [r4, #20]
    3eac:	071a      	lsls	r2, r3, #28
    3eae:	d509      	bpl.n	3ec4 <setvbuf+0xf4>
    3eb0:	2203      	movs	r2, #3
    3eb2:	4013      	ands	r3, r2
    3eb4:	425a      	negs	r2, r3
    3eb6:	4153      	adcs	r3, r2
    3eb8:	425b      	negs	r3, r3
    3eba:	401e      	ands	r6, r3
    3ebc:	60a6      	str	r6, [r4, #8]
    3ebe:	e001      	b.n	3ec4 <setvbuf+0xf4>
    3ec0:	2001      	movs	r0, #1
    3ec2:	4240      	negs	r0, r0
    3ec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ec6:	46c0      	nop			; (mov r8, r8)
    3ec8:	2000007c 	.word	0x2000007c
    3ecc:	00005084 	.word	0x00005084
    3ed0:	000050a4 	.word	0x000050a4
    3ed4:	000050c4 	.word	0x000050c4
    3ed8:	00004751 	.word	0x00004751

00003edc <__sfputc_r>:
    3edc:	6893      	ldr	r3, [r2, #8]
    3ede:	b510      	push	{r4, lr}
    3ee0:	3b01      	subs	r3, #1
    3ee2:	6093      	str	r3, [r2, #8]
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	da05      	bge.n	3ef4 <__sfputc_r+0x18>
    3ee8:	6994      	ldr	r4, [r2, #24]
    3eea:	42a3      	cmp	r3, r4
    3eec:	db08      	blt.n	3f00 <__sfputc_r+0x24>
    3eee:	b2cb      	uxtb	r3, r1
    3ef0:	2b0a      	cmp	r3, #10
    3ef2:	d005      	beq.n	3f00 <__sfputc_r+0x24>
    3ef4:	6813      	ldr	r3, [r2, #0]
    3ef6:	1c58      	adds	r0, r3, #1
    3ef8:	6010      	str	r0, [r2, #0]
    3efa:	7019      	strb	r1, [r3, #0]
    3efc:	b2c8      	uxtb	r0, r1
    3efe:	e001      	b.n	3f04 <__sfputc_r+0x28>
    3f00:	f000 faa6 	bl	4450 <__swbuf_r>
    3f04:	bd10      	pop	{r4, pc}

00003f06 <__sfputs_r>:
    3f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f08:	1c06      	adds	r6, r0, #0
    3f0a:	1c0f      	adds	r7, r1, #0
    3f0c:	1c14      	adds	r4, r2, #0
    3f0e:	18d5      	adds	r5, r2, r3
    3f10:	42ac      	cmp	r4, r5
    3f12:	d008      	beq.n	3f26 <__sfputs_r+0x20>
    3f14:	7821      	ldrb	r1, [r4, #0]
    3f16:	1c30      	adds	r0, r6, #0
    3f18:	1c3a      	adds	r2, r7, #0
    3f1a:	f7ff ffdf 	bl	3edc <__sfputc_r>
    3f1e:	3401      	adds	r4, #1
    3f20:	1c43      	adds	r3, r0, #1
    3f22:	d1f5      	bne.n	3f10 <__sfputs_r+0xa>
    3f24:	e000      	b.n	3f28 <__sfputs_r+0x22>
    3f26:	2000      	movs	r0, #0
    3f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003f2c <_vfiprintf_r>:
    3f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f2e:	b09f      	sub	sp, #124	; 0x7c
    3f30:	1c06      	adds	r6, r0, #0
    3f32:	1c0f      	adds	r7, r1, #0
    3f34:	9203      	str	r2, [sp, #12]
    3f36:	9305      	str	r3, [sp, #20]
    3f38:	2800      	cmp	r0, #0
    3f3a:	d004      	beq.n	3f46 <_vfiprintf_r+0x1a>
    3f3c:	6981      	ldr	r1, [r0, #24]
    3f3e:	2900      	cmp	r1, #0
    3f40:	d101      	bne.n	3f46 <_vfiprintf_r+0x1a>
    3f42:	f000 fc59 	bl	47f8 <__sinit>
    3f46:	4b75      	ldr	r3, [pc, #468]	; (411c <_vfiprintf_r+0x1f0>)
    3f48:	429f      	cmp	r7, r3
    3f4a:	d101      	bne.n	3f50 <_vfiprintf_r+0x24>
    3f4c:	6877      	ldr	r7, [r6, #4]
    3f4e:	e008      	b.n	3f62 <_vfiprintf_r+0x36>
    3f50:	4b73      	ldr	r3, [pc, #460]	; (4120 <_vfiprintf_r+0x1f4>)
    3f52:	429f      	cmp	r7, r3
    3f54:	d101      	bne.n	3f5a <_vfiprintf_r+0x2e>
    3f56:	68b7      	ldr	r7, [r6, #8]
    3f58:	e003      	b.n	3f62 <_vfiprintf_r+0x36>
    3f5a:	4b72      	ldr	r3, [pc, #456]	; (4124 <_vfiprintf_r+0x1f8>)
    3f5c:	429f      	cmp	r7, r3
    3f5e:	d100      	bne.n	3f62 <_vfiprintf_r+0x36>
    3f60:	68f7      	ldr	r7, [r6, #12]
    3f62:	89bb      	ldrh	r3, [r7, #12]
    3f64:	071a      	lsls	r2, r3, #28
    3f66:	d50a      	bpl.n	3f7e <_vfiprintf_r+0x52>
    3f68:	693b      	ldr	r3, [r7, #16]
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d007      	beq.n	3f7e <_vfiprintf_r+0x52>
    3f6e:	ad06      	add	r5, sp, #24
    3f70:	2300      	movs	r3, #0
    3f72:	616b      	str	r3, [r5, #20]
    3f74:	2320      	movs	r3, #32
    3f76:	766b      	strb	r3, [r5, #25]
    3f78:	2330      	movs	r3, #48	; 0x30
    3f7a:	76ab      	strb	r3, [r5, #26]
    3f7c:	e03b      	b.n	3ff6 <_vfiprintf_r+0xca>
    3f7e:	1c30      	adds	r0, r6, #0
    3f80:	1c39      	adds	r1, r7, #0
    3f82:	f000 fabd 	bl	4500 <__swsetup_r>
    3f86:	2800      	cmp	r0, #0
    3f88:	d0f1      	beq.n	3f6e <_vfiprintf_r+0x42>
    3f8a:	2001      	movs	r0, #1
    3f8c:	4240      	negs	r0, r0
    3f8e:	e0c2      	b.n	4116 <_vfiprintf_r+0x1ea>
    3f90:	9a05      	ldr	r2, [sp, #20]
    3f92:	1d11      	adds	r1, r2, #4
    3f94:	6812      	ldr	r2, [r2, #0]
    3f96:	9105      	str	r1, [sp, #20]
    3f98:	2a00      	cmp	r2, #0
    3f9a:	db76      	blt.n	408a <_vfiprintf_r+0x15e>
    3f9c:	9209      	str	r2, [sp, #36]	; 0x24
    3f9e:	3401      	adds	r4, #1
    3fa0:	7823      	ldrb	r3, [r4, #0]
    3fa2:	2b2e      	cmp	r3, #46	; 0x2e
    3fa4:	d100      	bne.n	3fa8 <_vfiprintf_r+0x7c>
    3fa6:	e081      	b.n	40ac <_vfiprintf_r+0x180>
    3fa8:	7821      	ldrb	r1, [r4, #0]
    3faa:	485f      	ldr	r0, [pc, #380]	; (4128 <_vfiprintf_r+0x1fc>)
    3fac:	2203      	movs	r2, #3
    3fae:	f000 fced 	bl	498c <memchr>
    3fb2:	2800      	cmp	r0, #0
    3fb4:	d007      	beq.n	3fc6 <_vfiprintf_r+0x9a>
    3fb6:	495c      	ldr	r1, [pc, #368]	; (4128 <_vfiprintf_r+0x1fc>)
    3fb8:	682a      	ldr	r2, [r5, #0]
    3fba:	1a43      	subs	r3, r0, r1
    3fbc:	2040      	movs	r0, #64	; 0x40
    3fbe:	4098      	lsls	r0, r3
    3fc0:	4310      	orrs	r0, r2
    3fc2:	6028      	str	r0, [r5, #0]
    3fc4:	3401      	adds	r4, #1
    3fc6:	7821      	ldrb	r1, [r4, #0]
    3fc8:	1c63      	adds	r3, r4, #1
    3fca:	4858      	ldr	r0, [pc, #352]	; (412c <_vfiprintf_r+0x200>)
    3fcc:	2206      	movs	r2, #6
    3fce:	9303      	str	r3, [sp, #12]
    3fd0:	7629      	strb	r1, [r5, #24]
    3fd2:	f000 fcdb 	bl	498c <memchr>
    3fd6:	2800      	cmp	r0, #0
    3fd8:	d100      	bne.n	3fdc <_vfiprintf_r+0xb0>
    3fda:	e08a      	b.n	40f2 <_vfiprintf_r+0x1c6>
    3fdc:	4b54      	ldr	r3, [pc, #336]	; (4130 <_vfiprintf_r+0x204>)
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d17e      	bne.n	40e0 <_vfiprintf_r+0x1b4>
    3fe2:	9b05      	ldr	r3, [sp, #20]
    3fe4:	2207      	movs	r2, #7
    3fe6:	3307      	adds	r3, #7
    3fe8:	4393      	bics	r3, r2
    3fea:	3308      	adds	r3, #8
    3fec:	9305      	str	r3, [sp, #20]
    3fee:	696a      	ldr	r2, [r5, #20]
    3ff0:	9904      	ldr	r1, [sp, #16]
    3ff2:	1853      	adds	r3, r2, r1
    3ff4:	616b      	str	r3, [r5, #20]
    3ff6:	9c03      	ldr	r4, [sp, #12]
    3ff8:	7823      	ldrb	r3, [r4, #0]
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	d104      	bne.n	4008 <_vfiprintf_r+0xdc>
    3ffe:	9903      	ldr	r1, [sp, #12]
    4000:	1a61      	subs	r1, r4, r1
    4002:	9102      	str	r1, [sp, #8]
    4004:	d010      	beq.n	4028 <_vfiprintf_r+0xfc>
    4006:	e003      	b.n	4010 <_vfiprintf_r+0xe4>
    4008:	2b25      	cmp	r3, #37	; 0x25
    400a:	d0f8      	beq.n	3ffe <_vfiprintf_r+0xd2>
    400c:	3401      	adds	r4, #1
    400e:	e7f3      	b.n	3ff8 <_vfiprintf_r+0xcc>
    4010:	1c30      	adds	r0, r6, #0
    4012:	1c39      	adds	r1, r7, #0
    4014:	9a03      	ldr	r2, [sp, #12]
    4016:	9b02      	ldr	r3, [sp, #8]
    4018:	f7ff ff75 	bl	3f06 <__sfputs_r>
    401c:	3001      	adds	r0, #1
    401e:	d075      	beq.n	410c <_vfiprintf_r+0x1e0>
    4020:	696a      	ldr	r2, [r5, #20]
    4022:	9902      	ldr	r1, [sp, #8]
    4024:	1853      	adds	r3, r2, r1
    4026:	616b      	str	r3, [r5, #20]
    4028:	7823      	ldrb	r3, [r4, #0]
    402a:	2b00      	cmp	r3, #0
    402c:	d06e      	beq.n	410c <_vfiprintf_r+0x1e0>
    402e:	2201      	movs	r2, #1
    4030:	4252      	negs	r2, r2
    4032:	606a      	str	r2, [r5, #4]
    4034:	466a      	mov	r2, sp
    4036:	2300      	movs	r3, #0
    4038:	325b      	adds	r2, #91	; 0x5b
    403a:	3401      	adds	r4, #1
    403c:	602b      	str	r3, [r5, #0]
    403e:	60eb      	str	r3, [r5, #12]
    4040:	60ab      	str	r3, [r5, #8]
    4042:	7013      	strb	r3, [r2, #0]
    4044:	65ab      	str	r3, [r5, #88]	; 0x58
    4046:	7821      	ldrb	r1, [r4, #0]
    4048:	483a      	ldr	r0, [pc, #232]	; (4134 <_vfiprintf_r+0x208>)
    404a:	2205      	movs	r2, #5
    404c:	f000 fc9e 	bl	498c <memchr>
    4050:	2800      	cmp	r0, #0
    4052:	d008      	beq.n	4066 <_vfiprintf_r+0x13a>
    4054:	4a37      	ldr	r2, [pc, #220]	; (4134 <_vfiprintf_r+0x208>)
    4056:	3401      	adds	r4, #1
    4058:	1a83      	subs	r3, r0, r2
    405a:	2001      	movs	r0, #1
    405c:	4098      	lsls	r0, r3
    405e:	682b      	ldr	r3, [r5, #0]
    4060:	4318      	orrs	r0, r3
    4062:	6028      	str	r0, [r5, #0]
    4064:	e7ef      	b.n	4046 <_vfiprintf_r+0x11a>
    4066:	682b      	ldr	r3, [r5, #0]
    4068:	06d9      	lsls	r1, r3, #27
    406a:	d503      	bpl.n	4074 <_vfiprintf_r+0x148>
    406c:	466a      	mov	r2, sp
    406e:	2120      	movs	r1, #32
    4070:	325b      	adds	r2, #91	; 0x5b
    4072:	7011      	strb	r1, [r2, #0]
    4074:	071a      	lsls	r2, r3, #28
    4076:	d503      	bpl.n	4080 <_vfiprintf_r+0x154>
    4078:	466a      	mov	r2, sp
    407a:	212b      	movs	r1, #43	; 0x2b
    407c:	325b      	adds	r2, #91	; 0x5b
    407e:	7011      	strb	r1, [r2, #0]
    4080:	7822      	ldrb	r2, [r4, #0]
    4082:	2a2a      	cmp	r2, #42	; 0x2a
    4084:	d084      	beq.n	3f90 <_vfiprintf_r+0x64>
    4086:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4088:	e005      	b.n	4096 <_vfiprintf_r+0x16a>
    408a:	4252      	negs	r2, r2
    408c:	60ea      	str	r2, [r5, #12]
    408e:	2202      	movs	r2, #2
    4090:	4313      	orrs	r3, r2
    4092:	602b      	str	r3, [r5, #0]
    4094:	e783      	b.n	3f9e <_vfiprintf_r+0x72>
    4096:	7822      	ldrb	r2, [r4, #0]
    4098:	3a30      	subs	r2, #48	; 0x30
    409a:	2a09      	cmp	r2, #9
    409c:	d804      	bhi.n	40a8 <_vfiprintf_r+0x17c>
    409e:	210a      	movs	r1, #10
    40a0:	434b      	muls	r3, r1
    40a2:	3401      	adds	r4, #1
    40a4:	189b      	adds	r3, r3, r2
    40a6:	e7f6      	b.n	4096 <_vfiprintf_r+0x16a>
    40a8:	9309      	str	r3, [sp, #36]	; 0x24
    40aa:	e779      	b.n	3fa0 <_vfiprintf_r+0x74>
    40ac:	7863      	ldrb	r3, [r4, #1]
    40ae:	2b2a      	cmp	r3, #42	; 0x2a
    40b0:	d109      	bne.n	40c6 <_vfiprintf_r+0x19a>
    40b2:	9b05      	ldr	r3, [sp, #20]
    40b4:	3402      	adds	r4, #2
    40b6:	1d1a      	adds	r2, r3, #4
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	9205      	str	r2, [sp, #20]
    40bc:	2b00      	cmp	r3, #0
    40be:	da0d      	bge.n	40dc <_vfiprintf_r+0x1b0>
    40c0:	2301      	movs	r3, #1
    40c2:	425b      	negs	r3, r3
    40c4:	e00a      	b.n	40dc <_vfiprintf_r+0x1b0>
    40c6:	3401      	adds	r4, #1
    40c8:	2300      	movs	r3, #0
    40ca:	7822      	ldrb	r2, [r4, #0]
    40cc:	3a30      	subs	r2, #48	; 0x30
    40ce:	2a09      	cmp	r2, #9
    40d0:	d804      	bhi.n	40dc <_vfiprintf_r+0x1b0>
    40d2:	210a      	movs	r1, #10
    40d4:	434b      	muls	r3, r1
    40d6:	3401      	adds	r4, #1
    40d8:	189b      	adds	r3, r3, r2
    40da:	e7f6      	b.n	40ca <_vfiprintf_r+0x19e>
    40dc:	9307      	str	r3, [sp, #28]
    40de:	e763      	b.n	3fa8 <_vfiprintf_r+0x7c>
    40e0:	ab05      	add	r3, sp, #20
    40e2:	9300      	str	r3, [sp, #0]
    40e4:	1c30      	adds	r0, r6, #0
    40e6:	1c29      	adds	r1, r5, #0
    40e8:	1c3a      	adds	r2, r7, #0
    40ea:	4b13      	ldr	r3, [pc, #76]	; (4138 <_vfiprintf_r+0x20c>)
    40ec:	e000      	b.n	40f0 <_vfiprintf_r+0x1c4>
    40ee:	bf00      	nop
    40f0:	e007      	b.n	4102 <_vfiprintf_r+0x1d6>
    40f2:	ab05      	add	r3, sp, #20
    40f4:	9300      	str	r3, [sp, #0]
    40f6:	1c30      	adds	r0, r6, #0
    40f8:	1c29      	adds	r1, r5, #0
    40fa:	1c3a      	adds	r2, r7, #0
    40fc:	4b0e      	ldr	r3, [pc, #56]	; (4138 <_vfiprintf_r+0x20c>)
    40fe:	f000 f891 	bl	4224 <_printf_i>
    4102:	9004      	str	r0, [sp, #16]
    4104:	9904      	ldr	r1, [sp, #16]
    4106:	3101      	adds	r1, #1
    4108:	d000      	beq.n	410c <_vfiprintf_r+0x1e0>
    410a:	e770      	b.n	3fee <_vfiprintf_r+0xc2>
    410c:	89bb      	ldrh	r3, [r7, #12]
    410e:	065a      	lsls	r2, r3, #25
    4110:	d500      	bpl.n	4114 <_vfiprintf_r+0x1e8>
    4112:	e73a      	b.n	3f8a <_vfiprintf_r+0x5e>
    4114:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4116:	b01f      	add	sp, #124	; 0x7c
    4118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	00005084 	.word	0x00005084
    4120:	000050a4 	.word	0x000050a4
    4124:	000050c4 	.word	0x000050c4
    4128:	00005056 	.word	0x00005056
    412c:	0000505a 	.word	0x0000505a
    4130:	00000000 	.word	0x00000000
    4134:	00005050 	.word	0x00005050
    4138:	00003f07 	.word	0x00003f07

0000413c <_printf_common>:
    413c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    413e:	1c15      	adds	r5, r2, #0
    4140:	9301      	str	r3, [sp, #4]
    4142:	690a      	ldr	r2, [r1, #16]
    4144:	688b      	ldr	r3, [r1, #8]
    4146:	1c06      	adds	r6, r0, #0
    4148:	1c0c      	adds	r4, r1, #0
    414a:	4293      	cmp	r3, r2
    414c:	da00      	bge.n	4150 <_printf_common+0x14>
    414e:	1c13      	adds	r3, r2, #0
    4150:	1c22      	adds	r2, r4, #0
    4152:	602b      	str	r3, [r5, #0]
    4154:	3243      	adds	r2, #67	; 0x43
    4156:	7812      	ldrb	r2, [r2, #0]
    4158:	2a00      	cmp	r2, #0
    415a:	d001      	beq.n	4160 <_printf_common+0x24>
    415c:	3301      	adds	r3, #1
    415e:	602b      	str	r3, [r5, #0]
    4160:	6820      	ldr	r0, [r4, #0]
    4162:	0680      	lsls	r0, r0, #26
    4164:	d502      	bpl.n	416c <_printf_common+0x30>
    4166:	682b      	ldr	r3, [r5, #0]
    4168:	3302      	adds	r3, #2
    416a:	602b      	str	r3, [r5, #0]
    416c:	6821      	ldr	r1, [r4, #0]
    416e:	2706      	movs	r7, #6
    4170:	400f      	ands	r7, r1
    4172:	d01f      	beq.n	41b4 <_printf_common+0x78>
    4174:	1c23      	adds	r3, r4, #0
    4176:	3343      	adds	r3, #67	; 0x43
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	1e5a      	subs	r2, r3, #1
    417c:	4193      	sbcs	r3, r2
    417e:	6822      	ldr	r2, [r4, #0]
    4180:	0692      	lsls	r2, r2, #26
    4182:	d51f      	bpl.n	41c4 <_printf_common+0x88>
    4184:	18e1      	adds	r1, r4, r3
    4186:	3140      	adds	r1, #64	; 0x40
    4188:	2030      	movs	r0, #48	; 0x30
    418a:	70c8      	strb	r0, [r1, #3]
    418c:	1c21      	adds	r1, r4, #0
    418e:	1c5a      	adds	r2, r3, #1
    4190:	3145      	adds	r1, #69	; 0x45
    4192:	7809      	ldrb	r1, [r1, #0]
    4194:	18a2      	adds	r2, r4, r2
    4196:	3240      	adds	r2, #64	; 0x40
    4198:	3302      	adds	r3, #2
    419a:	70d1      	strb	r1, [r2, #3]
    419c:	e012      	b.n	41c4 <_printf_common+0x88>
    419e:	1c22      	adds	r2, r4, #0
    41a0:	1c30      	adds	r0, r6, #0
    41a2:	9901      	ldr	r1, [sp, #4]
    41a4:	3219      	adds	r2, #25
    41a6:	2301      	movs	r3, #1
    41a8:	9f08      	ldr	r7, [sp, #32]
    41aa:	47b8      	blx	r7
    41ac:	3001      	adds	r0, #1
    41ae:	d011      	beq.n	41d4 <_printf_common+0x98>
    41b0:	9f00      	ldr	r7, [sp, #0]
    41b2:	3701      	adds	r7, #1
    41b4:	9700      	str	r7, [sp, #0]
    41b6:	68e0      	ldr	r0, [r4, #12]
    41b8:	6829      	ldr	r1, [r5, #0]
    41ba:	9f00      	ldr	r7, [sp, #0]
    41bc:	1a43      	subs	r3, r0, r1
    41be:	429f      	cmp	r7, r3
    41c0:	dbed      	blt.n	419e <_printf_common+0x62>
    41c2:	e7d7      	b.n	4174 <_printf_common+0x38>
    41c4:	1c22      	adds	r2, r4, #0
    41c6:	1c30      	adds	r0, r6, #0
    41c8:	9901      	ldr	r1, [sp, #4]
    41ca:	3243      	adds	r2, #67	; 0x43
    41cc:	9f08      	ldr	r7, [sp, #32]
    41ce:	47b8      	blx	r7
    41d0:	3001      	adds	r0, #1
    41d2:	d102      	bne.n	41da <_printf_common+0x9e>
    41d4:	2001      	movs	r0, #1
    41d6:	4240      	negs	r0, r0
    41d8:	e023      	b.n	4222 <_printf_common+0xe6>
    41da:	6820      	ldr	r0, [r4, #0]
    41dc:	2106      	movs	r1, #6
    41de:	682b      	ldr	r3, [r5, #0]
    41e0:	68e2      	ldr	r2, [r4, #12]
    41e2:	4001      	ands	r1, r0
    41e4:	2500      	movs	r5, #0
    41e6:	2904      	cmp	r1, #4
    41e8:	d103      	bne.n	41f2 <_printf_common+0xb6>
    41ea:	1ad5      	subs	r5, r2, r3
    41ec:	43eb      	mvns	r3, r5
    41ee:	17db      	asrs	r3, r3, #31
    41f0:	401d      	ands	r5, r3
    41f2:	68a2      	ldr	r2, [r4, #8]
    41f4:	6923      	ldr	r3, [r4, #16]
    41f6:	429a      	cmp	r2, r3
    41f8:	dd01      	ble.n	41fe <_printf_common+0xc2>
    41fa:	1ad3      	subs	r3, r2, r3
    41fc:	18ed      	adds	r5, r5, r3
    41fe:	2700      	movs	r7, #0
    4200:	9700      	str	r7, [sp, #0]
    4202:	9f00      	ldr	r7, [sp, #0]
    4204:	42af      	cmp	r7, r5
    4206:	da0b      	bge.n	4220 <_printf_common+0xe4>
    4208:	1c22      	adds	r2, r4, #0
    420a:	1c30      	adds	r0, r6, #0
    420c:	9901      	ldr	r1, [sp, #4]
    420e:	321a      	adds	r2, #26
    4210:	2301      	movs	r3, #1
    4212:	9f08      	ldr	r7, [sp, #32]
    4214:	47b8      	blx	r7
    4216:	3001      	adds	r0, #1
    4218:	d0dc      	beq.n	41d4 <_printf_common+0x98>
    421a:	9f00      	ldr	r7, [sp, #0]
    421c:	3701      	adds	r7, #1
    421e:	e7ef      	b.n	4200 <_printf_common+0xc4>
    4220:	2000      	movs	r0, #0
    4222:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004224 <_printf_i>:
    4224:	b5f0      	push	{r4, r5, r6, r7, lr}
    4226:	1c0d      	adds	r5, r1, #0
    4228:	b08b      	sub	sp, #44	; 0x2c
    422a:	3543      	adds	r5, #67	; 0x43
    422c:	9206      	str	r2, [sp, #24]
    422e:	9005      	str	r0, [sp, #20]
    4230:	9307      	str	r3, [sp, #28]
    4232:	9504      	str	r5, [sp, #16]
    4234:	7e0b      	ldrb	r3, [r1, #24]
    4236:	1c0c      	adds	r4, r1, #0
    4238:	9a10      	ldr	r2, [sp, #64]	; 0x40
    423a:	2b6e      	cmp	r3, #110	; 0x6e
    423c:	d100      	bne.n	4240 <_printf_i+0x1c>
    423e:	e0a7      	b.n	4390 <_printf_i+0x16c>
    4240:	d811      	bhi.n	4266 <_printf_i+0x42>
    4242:	2b63      	cmp	r3, #99	; 0x63
    4244:	d022      	beq.n	428c <_printf_i+0x68>
    4246:	d809      	bhi.n	425c <_printf_i+0x38>
    4248:	2b00      	cmp	r3, #0
    424a:	d100      	bne.n	424e <_printf_i+0x2a>
    424c:	e0b0      	b.n	43b0 <_printf_i+0x18c>
    424e:	2b58      	cmp	r3, #88	; 0x58
    4250:	d000      	beq.n	4254 <_printf_i+0x30>
    4252:	e0c0      	b.n	43d6 <_printf_i+0x1b2>
    4254:	3145      	adds	r1, #69	; 0x45
    4256:	700b      	strb	r3, [r1, #0]
    4258:	4d7b      	ldr	r5, [pc, #492]	; (4448 <_printf_i+0x224>)
    425a:	e04e      	b.n	42fa <_printf_i+0xd6>
    425c:	2b64      	cmp	r3, #100	; 0x64
    425e:	d01c      	beq.n	429a <_printf_i+0x76>
    4260:	2b69      	cmp	r3, #105	; 0x69
    4262:	d01a      	beq.n	429a <_printf_i+0x76>
    4264:	e0b7      	b.n	43d6 <_printf_i+0x1b2>
    4266:	2b73      	cmp	r3, #115	; 0x73
    4268:	d100      	bne.n	426c <_printf_i+0x48>
    426a:	e0a5      	b.n	43b8 <_printf_i+0x194>
    426c:	d809      	bhi.n	4282 <_printf_i+0x5e>
    426e:	2b6f      	cmp	r3, #111	; 0x6f
    4270:	d029      	beq.n	42c6 <_printf_i+0xa2>
    4272:	2b70      	cmp	r3, #112	; 0x70
    4274:	d000      	beq.n	4278 <_printf_i+0x54>
    4276:	e0ae      	b.n	43d6 <_printf_i+0x1b2>
    4278:	680e      	ldr	r6, [r1, #0]
    427a:	2320      	movs	r3, #32
    427c:	4333      	orrs	r3, r6
    427e:	600b      	str	r3, [r1, #0]
    4280:	e036      	b.n	42f0 <_printf_i+0xcc>
    4282:	2b75      	cmp	r3, #117	; 0x75
    4284:	d01f      	beq.n	42c6 <_printf_i+0xa2>
    4286:	2b78      	cmp	r3, #120	; 0x78
    4288:	d032      	beq.n	42f0 <_printf_i+0xcc>
    428a:	e0a4      	b.n	43d6 <_printf_i+0x1b2>
    428c:	6813      	ldr	r3, [r2, #0]
    428e:	1c0d      	adds	r5, r1, #0
    4290:	1d19      	adds	r1, r3, #4
    4292:	3542      	adds	r5, #66	; 0x42
    4294:	6011      	str	r1, [r2, #0]
    4296:	681b      	ldr	r3, [r3, #0]
    4298:	e09f      	b.n	43da <_printf_i+0x1b6>
    429a:	6821      	ldr	r1, [r4, #0]
    429c:	6813      	ldr	r3, [r2, #0]
    429e:	060e      	lsls	r6, r1, #24
    42a0:	d503      	bpl.n	42aa <_printf_i+0x86>
    42a2:	1d19      	adds	r1, r3, #4
    42a4:	6011      	str	r1, [r2, #0]
    42a6:	681e      	ldr	r6, [r3, #0]
    42a8:	e005      	b.n	42b6 <_printf_i+0x92>
    42aa:	0648      	lsls	r0, r1, #25
    42ac:	d5f9      	bpl.n	42a2 <_printf_i+0x7e>
    42ae:	1d19      	adds	r1, r3, #4
    42b0:	6011      	str	r1, [r2, #0]
    42b2:	2100      	movs	r1, #0
    42b4:	5e5e      	ldrsh	r6, [r3, r1]
    42b6:	4b64      	ldr	r3, [pc, #400]	; (4448 <_printf_i+0x224>)
    42b8:	2e00      	cmp	r6, #0
    42ba:	da3b      	bge.n	4334 <_printf_i+0x110>
    42bc:	9d04      	ldr	r5, [sp, #16]
    42be:	222d      	movs	r2, #45	; 0x2d
    42c0:	4276      	negs	r6, r6
    42c2:	702a      	strb	r2, [r5, #0]
    42c4:	e036      	b.n	4334 <_printf_i+0x110>
    42c6:	6821      	ldr	r1, [r4, #0]
    42c8:	6813      	ldr	r3, [r2, #0]
    42ca:	060e      	lsls	r6, r1, #24
    42cc:	d503      	bpl.n	42d6 <_printf_i+0xb2>
    42ce:	1d19      	adds	r1, r3, #4
    42d0:	6011      	str	r1, [r2, #0]
    42d2:	681e      	ldr	r6, [r3, #0]
    42d4:	e004      	b.n	42e0 <_printf_i+0xbc>
    42d6:	0648      	lsls	r0, r1, #25
    42d8:	d5f9      	bpl.n	42ce <_printf_i+0xaa>
    42da:	1d19      	adds	r1, r3, #4
    42dc:	881e      	ldrh	r6, [r3, #0]
    42de:	6011      	str	r1, [r2, #0]
    42e0:	4b59      	ldr	r3, [pc, #356]	; (4448 <_printf_i+0x224>)
    42e2:	7e22      	ldrb	r2, [r4, #24]
    42e4:	9303      	str	r3, [sp, #12]
    42e6:	2708      	movs	r7, #8
    42e8:	2a6f      	cmp	r2, #111	; 0x6f
    42ea:	d01e      	beq.n	432a <_printf_i+0x106>
    42ec:	270a      	movs	r7, #10
    42ee:	e01c      	b.n	432a <_printf_i+0x106>
    42f0:	1c23      	adds	r3, r4, #0
    42f2:	2178      	movs	r1, #120	; 0x78
    42f4:	3345      	adds	r3, #69	; 0x45
    42f6:	4d55      	ldr	r5, [pc, #340]	; (444c <_printf_i+0x228>)
    42f8:	7019      	strb	r1, [r3, #0]
    42fa:	6811      	ldr	r1, [r2, #0]
    42fc:	6823      	ldr	r3, [r4, #0]
    42fe:	1d08      	adds	r0, r1, #4
    4300:	9503      	str	r5, [sp, #12]
    4302:	6010      	str	r0, [r2, #0]
    4304:	061e      	lsls	r6, r3, #24
    4306:	d501      	bpl.n	430c <_printf_i+0xe8>
    4308:	680e      	ldr	r6, [r1, #0]
    430a:	e002      	b.n	4312 <_printf_i+0xee>
    430c:	0658      	lsls	r0, r3, #25
    430e:	d5fb      	bpl.n	4308 <_printf_i+0xe4>
    4310:	880e      	ldrh	r6, [r1, #0]
    4312:	07d9      	lsls	r1, r3, #31
    4314:	d502      	bpl.n	431c <_printf_i+0xf8>
    4316:	2220      	movs	r2, #32
    4318:	4313      	orrs	r3, r2
    431a:	6023      	str	r3, [r4, #0]
    431c:	2710      	movs	r7, #16
    431e:	2e00      	cmp	r6, #0
    4320:	d103      	bne.n	432a <_printf_i+0x106>
    4322:	6822      	ldr	r2, [r4, #0]
    4324:	2320      	movs	r3, #32
    4326:	439a      	bics	r2, r3
    4328:	6022      	str	r2, [r4, #0]
    432a:	1c23      	adds	r3, r4, #0
    432c:	2200      	movs	r2, #0
    432e:	3343      	adds	r3, #67	; 0x43
    4330:	701a      	strb	r2, [r3, #0]
    4332:	e001      	b.n	4338 <_printf_i+0x114>
    4334:	9303      	str	r3, [sp, #12]
    4336:	270a      	movs	r7, #10
    4338:	6863      	ldr	r3, [r4, #4]
    433a:	60a3      	str	r3, [r4, #8]
    433c:	2b00      	cmp	r3, #0
    433e:	db03      	blt.n	4348 <_printf_i+0x124>
    4340:	6825      	ldr	r5, [r4, #0]
    4342:	2204      	movs	r2, #4
    4344:	4395      	bics	r5, r2
    4346:	6025      	str	r5, [r4, #0]
    4348:	2e00      	cmp	r6, #0
    434a:	d102      	bne.n	4352 <_printf_i+0x12e>
    434c:	9d04      	ldr	r5, [sp, #16]
    434e:	2b00      	cmp	r3, #0
    4350:	d00e      	beq.n	4370 <_printf_i+0x14c>
    4352:	9d04      	ldr	r5, [sp, #16]
    4354:	1c30      	adds	r0, r6, #0
    4356:	1c39      	adds	r1, r7, #0
    4358:	f7ff fcb0 	bl	3cbc <__aeabi_uidivmod>
    435c:	9803      	ldr	r0, [sp, #12]
    435e:	3d01      	subs	r5, #1
    4360:	5c43      	ldrb	r3, [r0, r1]
    4362:	1c30      	adds	r0, r6, #0
    4364:	702b      	strb	r3, [r5, #0]
    4366:	1c39      	adds	r1, r7, #0
    4368:	f7ff fc64 	bl	3c34 <__aeabi_uidiv>
    436c:	1e06      	subs	r6, r0, #0
    436e:	d1f1      	bne.n	4354 <_printf_i+0x130>
    4370:	2f08      	cmp	r7, #8
    4372:	d109      	bne.n	4388 <_printf_i+0x164>
    4374:	6821      	ldr	r1, [r4, #0]
    4376:	07c9      	lsls	r1, r1, #31
    4378:	d506      	bpl.n	4388 <_printf_i+0x164>
    437a:	6862      	ldr	r2, [r4, #4]
    437c:	6923      	ldr	r3, [r4, #16]
    437e:	429a      	cmp	r2, r3
    4380:	dc02      	bgt.n	4388 <_printf_i+0x164>
    4382:	3d01      	subs	r5, #1
    4384:	2330      	movs	r3, #48	; 0x30
    4386:	702b      	strb	r3, [r5, #0]
    4388:	9e04      	ldr	r6, [sp, #16]
    438a:	1b73      	subs	r3, r6, r5
    438c:	6123      	str	r3, [r4, #16]
    438e:	e02a      	b.n	43e6 <_printf_i+0x1c2>
    4390:	6808      	ldr	r0, [r1, #0]
    4392:	6813      	ldr	r3, [r2, #0]
    4394:	6949      	ldr	r1, [r1, #20]
    4396:	0605      	lsls	r5, r0, #24
    4398:	d504      	bpl.n	43a4 <_printf_i+0x180>
    439a:	1d18      	adds	r0, r3, #4
    439c:	6010      	str	r0, [r2, #0]
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	6019      	str	r1, [r3, #0]
    43a2:	e005      	b.n	43b0 <_printf_i+0x18c>
    43a4:	0646      	lsls	r6, r0, #25
    43a6:	d5f8      	bpl.n	439a <_printf_i+0x176>
    43a8:	1d18      	adds	r0, r3, #4
    43aa:	6010      	str	r0, [r2, #0]
    43ac:	681b      	ldr	r3, [r3, #0]
    43ae:	8019      	strh	r1, [r3, #0]
    43b0:	2300      	movs	r3, #0
    43b2:	6123      	str	r3, [r4, #16]
    43b4:	9d04      	ldr	r5, [sp, #16]
    43b6:	e016      	b.n	43e6 <_printf_i+0x1c2>
    43b8:	6813      	ldr	r3, [r2, #0]
    43ba:	1d19      	adds	r1, r3, #4
    43bc:	6011      	str	r1, [r2, #0]
    43be:	681d      	ldr	r5, [r3, #0]
    43c0:	1c28      	adds	r0, r5, #0
    43c2:	f000 fbe9 	bl	4b98 <strlen>
    43c6:	6863      	ldr	r3, [r4, #4]
    43c8:	6120      	str	r0, [r4, #16]
    43ca:	4298      	cmp	r0, r3
    43cc:	d900      	bls.n	43d0 <_printf_i+0x1ac>
    43ce:	6123      	str	r3, [r4, #16]
    43d0:	6920      	ldr	r0, [r4, #16]
    43d2:	6060      	str	r0, [r4, #4]
    43d4:	e004      	b.n	43e0 <_printf_i+0x1bc>
    43d6:	1c25      	adds	r5, r4, #0
    43d8:	3542      	adds	r5, #66	; 0x42
    43da:	702b      	strb	r3, [r5, #0]
    43dc:	2301      	movs	r3, #1
    43de:	6123      	str	r3, [r4, #16]
    43e0:	9e04      	ldr	r6, [sp, #16]
    43e2:	2300      	movs	r3, #0
    43e4:	7033      	strb	r3, [r6, #0]
    43e6:	9e07      	ldr	r6, [sp, #28]
    43e8:	9805      	ldr	r0, [sp, #20]
    43ea:	9600      	str	r6, [sp, #0]
    43ec:	1c21      	adds	r1, r4, #0
    43ee:	aa09      	add	r2, sp, #36	; 0x24
    43f0:	9b06      	ldr	r3, [sp, #24]
    43f2:	f7ff fea3 	bl	413c <_printf_common>
    43f6:	3001      	adds	r0, #1
    43f8:	d102      	bne.n	4400 <_printf_i+0x1dc>
    43fa:	2001      	movs	r0, #1
    43fc:	4240      	negs	r0, r0
    43fe:	e021      	b.n	4444 <_printf_i+0x220>
    4400:	1c2a      	adds	r2, r5, #0
    4402:	9805      	ldr	r0, [sp, #20]
    4404:	9906      	ldr	r1, [sp, #24]
    4406:	6923      	ldr	r3, [r4, #16]
    4408:	9d07      	ldr	r5, [sp, #28]
    440a:	47a8      	blx	r5
    440c:	3001      	adds	r0, #1
    440e:	d0f4      	beq.n	43fa <_printf_i+0x1d6>
    4410:	6826      	ldr	r6, [r4, #0]
    4412:	07b6      	lsls	r6, r6, #30
    4414:	d405      	bmi.n	4422 <_printf_i+0x1fe>
    4416:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4418:	68e0      	ldr	r0, [r4, #12]
    441a:	4298      	cmp	r0, r3
    441c:	da12      	bge.n	4444 <_printf_i+0x220>
    441e:	1c18      	adds	r0, r3, #0
    4420:	e010      	b.n	4444 <_printf_i+0x220>
    4422:	2500      	movs	r5, #0
    4424:	68e0      	ldr	r0, [r4, #12]
    4426:	9909      	ldr	r1, [sp, #36]	; 0x24
    4428:	1a43      	subs	r3, r0, r1
    442a:	429d      	cmp	r5, r3
    442c:	daf3      	bge.n	4416 <_printf_i+0x1f2>
    442e:	1c22      	adds	r2, r4, #0
    4430:	9805      	ldr	r0, [sp, #20]
    4432:	9906      	ldr	r1, [sp, #24]
    4434:	3219      	adds	r2, #25
    4436:	2301      	movs	r3, #1
    4438:	9e07      	ldr	r6, [sp, #28]
    443a:	47b0      	blx	r6
    443c:	3001      	adds	r0, #1
    443e:	d0dc      	beq.n	43fa <_printf_i+0x1d6>
    4440:	3501      	adds	r5, #1
    4442:	e7ef      	b.n	4424 <_printf_i+0x200>
    4444:	b00b      	add	sp, #44	; 0x2c
    4446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4448:	00005061 	.word	0x00005061
    444c:	00005072 	.word	0x00005072

00004450 <__swbuf_r>:
    4450:	b570      	push	{r4, r5, r6, lr}
    4452:	1c05      	adds	r5, r0, #0
    4454:	1c0e      	adds	r6, r1, #0
    4456:	1c14      	adds	r4, r2, #0
    4458:	2800      	cmp	r0, #0
    445a:	d004      	beq.n	4466 <__swbuf_r+0x16>
    445c:	6982      	ldr	r2, [r0, #24]
    445e:	2a00      	cmp	r2, #0
    4460:	d101      	bne.n	4466 <__swbuf_r+0x16>
    4462:	f000 f9c9 	bl	47f8 <__sinit>
    4466:	4b23      	ldr	r3, [pc, #140]	; (44f4 <__swbuf_r+0xa4>)
    4468:	429c      	cmp	r4, r3
    446a:	d101      	bne.n	4470 <__swbuf_r+0x20>
    446c:	686c      	ldr	r4, [r5, #4]
    446e:	e008      	b.n	4482 <__swbuf_r+0x32>
    4470:	4b21      	ldr	r3, [pc, #132]	; (44f8 <__swbuf_r+0xa8>)
    4472:	429c      	cmp	r4, r3
    4474:	d101      	bne.n	447a <__swbuf_r+0x2a>
    4476:	68ac      	ldr	r4, [r5, #8]
    4478:	e003      	b.n	4482 <__swbuf_r+0x32>
    447a:	4b20      	ldr	r3, [pc, #128]	; (44fc <__swbuf_r+0xac>)
    447c:	429c      	cmp	r4, r3
    447e:	d100      	bne.n	4482 <__swbuf_r+0x32>
    4480:	68ec      	ldr	r4, [r5, #12]
    4482:	69a3      	ldr	r3, [r4, #24]
    4484:	60a3      	str	r3, [r4, #8]
    4486:	89a3      	ldrh	r3, [r4, #12]
    4488:	071a      	lsls	r2, r3, #28
    448a:	d50a      	bpl.n	44a2 <__swbuf_r+0x52>
    448c:	6923      	ldr	r3, [r4, #16]
    448e:	2b00      	cmp	r3, #0
    4490:	d007      	beq.n	44a2 <__swbuf_r+0x52>
    4492:	6822      	ldr	r2, [r4, #0]
    4494:	6923      	ldr	r3, [r4, #16]
    4496:	b2f6      	uxtb	r6, r6
    4498:	1ad0      	subs	r0, r2, r3
    449a:	6962      	ldr	r2, [r4, #20]
    449c:	4290      	cmp	r0, r2
    449e:	db0f      	blt.n	44c0 <__swbuf_r+0x70>
    44a0:	e008      	b.n	44b4 <__swbuf_r+0x64>
    44a2:	1c28      	adds	r0, r5, #0
    44a4:	1c21      	adds	r1, r4, #0
    44a6:	f000 f82b 	bl	4500 <__swsetup_r>
    44aa:	2800      	cmp	r0, #0
    44ac:	d0f1      	beq.n	4492 <__swbuf_r+0x42>
    44ae:	2001      	movs	r0, #1
    44b0:	4240      	negs	r0, r0
    44b2:	e01d      	b.n	44f0 <__swbuf_r+0xa0>
    44b4:	1c28      	adds	r0, r5, #0
    44b6:	1c21      	adds	r1, r4, #0
    44b8:	f000 f91e 	bl	46f8 <_fflush_r>
    44bc:	2800      	cmp	r0, #0
    44be:	d1f6      	bne.n	44ae <__swbuf_r+0x5e>
    44c0:	68a3      	ldr	r3, [r4, #8]
    44c2:	3001      	adds	r0, #1
    44c4:	3b01      	subs	r3, #1
    44c6:	60a3      	str	r3, [r4, #8]
    44c8:	6823      	ldr	r3, [r4, #0]
    44ca:	1c5a      	adds	r2, r3, #1
    44cc:	6022      	str	r2, [r4, #0]
    44ce:	701e      	strb	r6, [r3, #0]
    44d0:	6963      	ldr	r3, [r4, #20]
    44d2:	4298      	cmp	r0, r3
    44d4:	d005      	beq.n	44e2 <__swbuf_r+0x92>
    44d6:	89a3      	ldrh	r3, [r4, #12]
    44d8:	1c30      	adds	r0, r6, #0
    44da:	07da      	lsls	r2, r3, #31
    44dc:	d508      	bpl.n	44f0 <__swbuf_r+0xa0>
    44de:	2e0a      	cmp	r6, #10
    44e0:	d106      	bne.n	44f0 <__swbuf_r+0xa0>
    44e2:	1c28      	adds	r0, r5, #0
    44e4:	1c21      	adds	r1, r4, #0
    44e6:	f000 f907 	bl	46f8 <_fflush_r>
    44ea:	2800      	cmp	r0, #0
    44ec:	d1df      	bne.n	44ae <__swbuf_r+0x5e>
    44ee:	1c30      	adds	r0, r6, #0
    44f0:	bd70      	pop	{r4, r5, r6, pc}
    44f2:	46c0      	nop			; (mov r8, r8)
    44f4:	00005084 	.word	0x00005084
    44f8:	000050a4 	.word	0x000050a4
    44fc:	000050c4 	.word	0x000050c4

00004500 <__swsetup_r>:
    4500:	4b34      	ldr	r3, [pc, #208]	; (45d4 <__swsetup_r+0xd4>)
    4502:	b570      	push	{r4, r5, r6, lr}
    4504:	681d      	ldr	r5, [r3, #0]
    4506:	1c06      	adds	r6, r0, #0
    4508:	1c0c      	adds	r4, r1, #0
    450a:	2d00      	cmp	r5, #0
    450c:	d005      	beq.n	451a <__swsetup_r+0x1a>
    450e:	69a9      	ldr	r1, [r5, #24]
    4510:	2900      	cmp	r1, #0
    4512:	d102      	bne.n	451a <__swsetup_r+0x1a>
    4514:	1c28      	adds	r0, r5, #0
    4516:	f000 f96f 	bl	47f8 <__sinit>
    451a:	4b2f      	ldr	r3, [pc, #188]	; (45d8 <__swsetup_r+0xd8>)
    451c:	429c      	cmp	r4, r3
    451e:	d101      	bne.n	4524 <__swsetup_r+0x24>
    4520:	686c      	ldr	r4, [r5, #4]
    4522:	e008      	b.n	4536 <__swsetup_r+0x36>
    4524:	4b2d      	ldr	r3, [pc, #180]	; (45dc <__swsetup_r+0xdc>)
    4526:	429c      	cmp	r4, r3
    4528:	d101      	bne.n	452e <__swsetup_r+0x2e>
    452a:	68ac      	ldr	r4, [r5, #8]
    452c:	e003      	b.n	4536 <__swsetup_r+0x36>
    452e:	4b2c      	ldr	r3, [pc, #176]	; (45e0 <__swsetup_r+0xe0>)
    4530:	429c      	cmp	r4, r3
    4532:	d100      	bne.n	4536 <__swsetup_r+0x36>
    4534:	68ec      	ldr	r4, [r5, #12]
    4536:	89a2      	ldrh	r2, [r4, #12]
    4538:	b293      	uxth	r3, r2
    453a:	0719      	lsls	r1, r3, #28
    453c:	d421      	bmi.n	4582 <__swsetup_r+0x82>
    453e:	06d9      	lsls	r1, r3, #27
    4540:	d405      	bmi.n	454e <__swsetup_r+0x4e>
    4542:	2309      	movs	r3, #9
    4544:	6033      	str	r3, [r6, #0]
    4546:	2340      	movs	r3, #64	; 0x40
    4548:	431a      	orrs	r2, r3
    454a:	81a2      	strh	r2, [r4, #12]
    454c:	e03f      	b.n	45ce <__swsetup_r+0xce>
    454e:	075a      	lsls	r2, r3, #29
    4550:	d513      	bpl.n	457a <__swsetup_r+0x7a>
    4552:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4554:	2900      	cmp	r1, #0
    4556:	d008      	beq.n	456a <__swsetup_r+0x6a>
    4558:	1c23      	adds	r3, r4, #0
    455a:	3344      	adds	r3, #68	; 0x44
    455c:	4299      	cmp	r1, r3
    455e:	d002      	beq.n	4566 <__swsetup_r+0x66>
    4560:	1c30      	adds	r0, r6, #0
    4562:	f000 fa1f 	bl	49a4 <_free_r>
    4566:	2300      	movs	r3, #0
    4568:	6363      	str	r3, [r4, #52]	; 0x34
    456a:	89a3      	ldrh	r3, [r4, #12]
    456c:	2224      	movs	r2, #36	; 0x24
    456e:	4393      	bics	r3, r2
    4570:	81a3      	strh	r3, [r4, #12]
    4572:	2300      	movs	r3, #0
    4574:	6063      	str	r3, [r4, #4]
    4576:	6923      	ldr	r3, [r4, #16]
    4578:	6023      	str	r3, [r4, #0]
    457a:	89a3      	ldrh	r3, [r4, #12]
    457c:	2208      	movs	r2, #8
    457e:	4313      	orrs	r3, r2
    4580:	81a3      	strh	r3, [r4, #12]
    4582:	6921      	ldr	r1, [r4, #16]
    4584:	2900      	cmp	r1, #0
    4586:	d10b      	bne.n	45a0 <__swsetup_r+0xa0>
    4588:	89a3      	ldrh	r3, [r4, #12]
    458a:	22a0      	movs	r2, #160	; 0xa0
    458c:	0092      	lsls	r2, r2, #2
    458e:	401a      	ands	r2, r3
    4590:	2380      	movs	r3, #128	; 0x80
    4592:	009b      	lsls	r3, r3, #2
    4594:	429a      	cmp	r2, r3
    4596:	d003      	beq.n	45a0 <__swsetup_r+0xa0>
    4598:	1c30      	adds	r0, r6, #0
    459a:	1c21      	adds	r1, r4, #0
    459c:	f000 f99c 	bl	48d8 <__smakebuf_r>
    45a0:	89a3      	ldrh	r3, [r4, #12]
    45a2:	2201      	movs	r2, #1
    45a4:	401a      	ands	r2, r3
    45a6:	d005      	beq.n	45b4 <__swsetup_r+0xb4>
    45a8:	6961      	ldr	r1, [r4, #20]
    45aa:	2200      	movs	r2, #0
    45ac:	60a2      	str	r2, [r4, #8]
    45ae:	424a      	negs	r2, r1
    45b0:	61a2      	str	r2, [r4, #24]
    45b2:	e003      	b.n	45bc <__swsetup_r+0xbc>
    45b4:	0799      	lsls	r1, r3, #30
    45b6:	d400      	bmi.n	45ba <__swsetup_r+0xba>
    45b8:	6962      	ldr	r2, [r4, #20]
    45ba:	60a2      	str	r2, [r4, #8]
    45bc:	6922      	ldr	r2, [r4, #16]
    45be:	2000      	movs	r0, #0
    45c0:	4282      	cmp	r2, r0
    45c2:	d106      	bne.n	45d2 <__swsetup_r+0xd2>
    45c4:	0619      	lsls	r1, r3, #24
    45c6:	d504      	bpl.n	45d2 <__swsetup_r+0xd2>
    45c8:	2240      	movs	r2, #64	; 0x40
    45ca:	4313      	orrs	r3, r2
    45cc:	81a3      	strh	r3, [r4, #12]
    45ce:	2001      	movs	r0, #1
    45d0:	4240      	negs	r0, r0
    45d2:	bd70      	pop	{r4, r5, r6, pc}
    45d4:	2000007c 	.word	0x2000007c
    45d8:	00005084 	.word	0x00005084
    45dc:	000050a4 	.word	0x000050a4
    45e0:	000050c4 	.word	0x000050c4

000045e4 <__sflush_r>:
    45e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45e6:	898b      	ldrh	r3, [r1, #12]
    45e8:	1c05      	adds	r5, r0, #0
    45ea:	1c0c      	adds	r4, r1, #0
    45ec:	0719      	lsls	r1, r3, #28
    45ee:	d45e      	bmi.n	46ae <__sflush_r+0xca>
    45f0:	6862      	ldr	r2, [r4, #4]
    45f2:	2a00      	cmp	r2, #0
    45f4:	dc02      	bgt.n	45fc <__sflush_r+0x18>
    45f6:	6c27      	ldr	r7, [r4, #64]	; 0x40
    45f8:	2f00      	cmp	r7, #0
    45fa:	dd1a      	ble.n	4632 <__sflush_r+0x4e>
    45fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    45fe:	2f00      	cmp	r7, #0
    4600:	d017      	beq.n	4632 <__sflush_r+0x4e>
    4602:	2200      	movs	r2, #0
    4604:	682e      	ldr	r6, [r5, #0]
    4606:	602a      	str	r2, [r5, #0]
    4608:	2280      	movs	r2, #128	; 0x80
    460a:	0152      	lsls	r2, r2, #5
    460c:	401a      	ands	r2, r3
    460e:	d001      	beq.n	4614 <__sflush_r+0x30>
    4610:	6d62      	ldr	r2, [r4, #84]	; 0x54
    4612:	e015      	b.n	4640 <__sflush_r+0x5c>
    4614:	1c28      	adds	r0, r5, #0
    4616:	6a21      	ldr	r1, [r4, #32]
    4618:	2301      	movs	r3, #1
    461a:	47b8      	blx	r7
    461c:	1c02      	adds	r2, r0, #0
    461e:	1c41      	adds	r1, r0, #1
    4620:	d10e      	bne.n	4640 <__sflush_r+0x5c>
    4622:	682b      	ldr	r3, [r5, #0]
    4624:	2b00      	cmp	r3, #0
    4626:	d00b      	beq.n	4640 <__sflush_r+0x5c>
    4628:	2b1d      	cmp	r3, #29
    462a:	d001      	beq.n	4630 <__sflush_r+0x4c>
    462c:	2b16      	cmp	r3, #22
    462e:	d102      	bne.n	4636 <__sflush_r+0x52>
    4630:	602e      	str	r6, [r5, #0]
    4632:	2000      	movs	r0, #0
    4634:	e05e      	b.n	46f4 <__sflush_r+0x110>
    4636:	89a3      	ldrh	r3, [r4, #12]
    4638:	2140      	movs	r1, #64	; 0x40
    463a:	430b      	orrs	r3, r1
    463c:	81a3      	strh	r3, [r4, #12]
    463e:	e059      	b.n	46f4 <__sflush_r+0x110>
    4640:	89a3      	ldrh	r3, [r4, #12]
    4642:	075f      	lsls	r7, r3, #29
    4644:	d506      	bpl.n	4654 <__sflush_r+0x70>
    4646:	6861      	ldr	r1, [r4, #4]
    4648:	6b63      	ldr	r3, [r4, #52]	; 0x34
    464a:	1a52      	subs	r2, r2, r1
    464c:	2b00      	cmp	r3, #0
    464e:	d001      	beq.n	4654 <__sflush_r+0x70>
    4650:	6c27      	ldr	r7, [r4, #64]	; 0x40
    4652:	1bd2      	subs	r2, r2, r7
    4654:	1c28      	adds	r0, r5, #0
    4656:	6a21      	ldr	r1, [r4, #32]
    4658:	2300      	movs	r3, #0
    465a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    465c:	47b8      	blx	r7
    465e:	89a2      	ldrh	r2, [r4, #12]
    4660:	1c41      	adds	r1, r0, #1
    4662:	d106      	bne.n	4672 <__sflush_r+0x8e>
    4664:	682b      	ldr	r3, [r5, #0]
    4666:	2b00      	cmp	r3, #0
    4668:	d003      	beq.n	4672 <__sflush_r+0x8e>
    466a:	2b1d      	cmp	r3, #29
    466c:	d001      	beq.n	4672 <__sflush_r+0x8e>
    466e:	2b16      	cmp	r3, #22
    4670:	d119      	bne.n	46a6 <__sflush_r+0xc2>
    4672:	2300      	movs	r3, #0
    4674:	6063      	str	r3, [r4, #4]
    4676:	6923      	ldr	r3, [r4, #16]
    4678:	6023      	str	r3, [r4, #0]
    467a:	04d7      	lsls	r7, r2, #19
    467c:	d505      	bpl.n	468a <__sflush_r+0xa6>
    467e:	1c41      	adds	r1, r0, #1
    4680:	d102      	bne.n	4688 <__sflush_r+0xa4>
    4682:	682a      	ldr	r2, [r5, #0]
    4684:	2a00      	cmp	r2, #0
    4686:	d100      	bne.n	468a <__sflush_r+0xa6>
    4688:	6560      	str	r0, [r4, #84]	; 0x54
    468a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    468c:	602e      	str	r6, [r5, #0]
    468e:	2900      	cmp	r1, #0
    4690:	d0cf      	beq.n	4632 <__sflush_r+0x4e>
    4692:	1c23      	adds	r3, r4, #0
    4694:	3344      	adds	r3, #68	; 0x44
    4696:	4299      	cmp	r1, r3
    4698:	d002      	beq.n	46a0 <__sflush_r+0xbc>
    469a:	1c28      	adds	r0, r5, #0
    469c:	f000 f982 	bl	49a4 <_free_r>
    46a0:	2000      	movs	r0, #0
    46a2:	6360      	str	r0, [r4, #52]	; 0x34
    46a4:	e026      	b.n	46f4 <__sflush_r+0x110>
    46a6:	2340      	movs	r3, #64	; 0x40
    46a8:	431a      	orrs	r2, r3
    46aa:	81a2      	strh	r2, [r4, #12]
    46ac:	e022      	b.n	46f4 <__sflush_r+0x110>
    46ae:	6926      	ldr	r6, [r4, #16]
    46b0:	2e00      	cmp	r6, #0
    46b2:	d0be      	beq.n	4632 <__sflush_r+0x4e>
    46b4:	6827      	ldr	r7, [r4, #0]
    46b6:	2200      	movs	r2, #0
    46b8:	1bbf      	subs	r7, r7, r6
    46ba:	9701      	str	r7, [sp, #4]
    46bc:	6026      	str	r6, [r4, #0]
    46be:	0799      	lsls	r1, r3, #30
    46c0:	d100      	bne.n	46c4 <__sflush_r+0xe0>
    46c2:	6962      	ldr	r2, [r4, #20]
    46c4:	60a2      	str	r2, [r4, #8]
    46c6:	9f01      	ldr	r7, [sp, #4]
    46c8:	2f00      	cmp	r7, #0
    46ca:	ddb2      	ble.n	4632 <__sflush_r+0x4e>
    46cc:	1c28      	adds	r0, r5, #0
    46ce:	6a21      	ldr	r1, [r4, #32]
    46d0:	1c32      	adds	r2, r6, #0
    46d2:	9b01      	ldr	r3, [sp, #4]
    46d4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    46d6:	47b8      	blx	r7
    46d8:	2800      	cmp	r0, #0
    46da:	dc06      	bgt.n	46ea <__sflush_r+0x106>
    46dc:	89a3      	ldrh	r3, [r4, #12]
    46de:	2240      	movs	r2, #64	; 0x40
    46e0:	4313      	orrs	r3, r2
    46e2:	2001      	movs	r0, #1
    46e4:	81a3      	strh	r3, [r4, #12]
    46e6:	4240      	negs	r0, r0
    46e8:	e004      	b.n	46f4 <__sflush_r+0x110>
    46ea:	9f01      	ldr	r7, [sp, #4]
    46ec:	1836      	adds	r6, r6, r0
    46ee:	1a3f      	subs	r7, r7, r0
    46f0:	9701      	str	r7, [sp, #4]
    46f2:	e7e8      	b.n	46c6 <__sflush_r+0xe2>
    46f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000046f8 <_fflush_r>:
    46f8:	690a      	ldr	r2, [r1, #16]
    46fa:	b538      	push	{r3, r4, r5, lr}
    46fc:	1c05      	adds	r5, r0, #0
    46fe:	1c0c      	adds	r4, r1, #0
    4700:	2a00      	cmp	r2, #0
    4702:	d101      	bne.n	4708 <_fflush_r+0x10>
    4704:	2000      	movs	r0, #0
    4706:	e01c      	b.n	4742 <_fflush_r+0x4a>
    4708:	2800      	cmp	r0, #0
    470a:	d004      	beq.n	4716 <_fflush_r+0x1e>
    470c:	6983      	ldr	r3, [r0, #24]
    470e:	2b00      	cmp	r3, #0
    4710:	d101      	bne.n	4716 <_fflush_r+0x1e>
    4712:	f000 f871 	bl	47f8 <__sinit>
    4716:	4b0b      	ldr	r3, [pc, #44]	; (4744 <_fflush_r+0x4c>)
    4718:	429c      	cmp	r4, r3
    471a:	d101      	bne.n	4720 <_fflush_r+0x28>
    471c:	686c      	ldr	r4, [r5, #4]
    471e:	e008      	b.n	4732 <_fflush_r+0x3a>
    4720:	4b09      	ldr	r3, [pc, #36]	; (4748 <_fflush_r+0x50>)
    4722:	429c      	cmp	r4, r3
    4724:	d101      	bne.n	472a <_fflush_r+0x32>
    4726:	68ac      	ldr	r4, [r5, #8]
    4728:	e003      	b.n	4732 <_fflush_r+0x3a>
    472a:	4b08      	ldr	r3, [pc, #32]	; (474c <_fflush_r+0x54>)
    472c:	429c      	cmp	r4, r3
    472e:	d100      	bne.n	4732 <_fflush_r+0x3a>
    4730:	68ec      	ldr	r4, [r5, #12]
    4732:	220c      	movs	r2, #12
    4734:	5ea3      	ldrsh	r3, [r4, r2]
    4736:	2b00      	cmp	r3, #0
    4738:	d0e4      	beq.n	4704 <_fflush_r+0xc>
    473a:	1c28      	adds	r0, r5, #0
    473c:	1c21      	adds	r1, r4, #0
    473e:	f7ff ff51 	bl	45e4 <__sflush_r>
    4742:	bd38      	pop	{r3, r4, r5, pc}
    4744:	00005084 	.word	0x00005084
    4748:	000050a4 	.word	0x000050a4
    474c:	000050c4 	.word	0x000050c4

00004750 <_cleanup_r>:
    4750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4752:	1c04      	adds	r4, r0, #0
    4754:	1c07      	adds	r7, r0, #0
    4756:	3448      	adds	r4, #72	; 0x48
    4758:	2c00      	cmp	r4, #0
    475a:	d012      	beq.n	4782 <_cleanup_r+0x32>
    475c:	68a5      	ldr	r5, [r4, #8]
    475e:	6866      	ldr	r6, [r4, #4]
    4760:	3e01      	subs	r6, #1
    4762:	d40c      	bmi.n	477e <_cleanup_r+0x2e>
    4764:	89ab      	ldrh	r3, [r5, #12]
    4766:	2b01      	cmp	r3, #1
    4768:	d907      	bls.n	477a <_cleanup_r+0x2a>
    476a:	220e      	movs	r2, #14
    476c:	5eab      	ldrsh	r3, [r5, r2]
    476e:	3301      	adds	r3, #1
    4770:	d003      	beq.n	477a <_cleanup_r+0x2a>
    4772:	1c38      	adds	r0, r7, #0
    4774:	1c29      	adds	r1, r5, #0
    4776:	f7ff ffbf 	bl	46f8 <_fflush_r>
    477a:	3568      	adds	r5, #104	; 0x68
    477c:	e7f0      	b.n	4760 <_cleanup_r+0x10>
    477e:	6824      	ldr	r4, [r4, #0]
    4780:	e7ea      	b.n	4758 <_cleanup_r+0x8>
    4782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004784 <std.isra.0>:
    4784:	2300      	movs	r3, #0
    4786:	b510      	push	{r4, lr}
    4788:	1c04      	adds	r4, r0, #0
    478a:	6003      	str	r3, [r0, #0]
    478c:	6043      	str	r3, [r0, #4]
    478e:	6083      	str	r3, [r0, #8]
    4790:	8181      	strh	r1, [r0, #12]
    4792:	6643      	str	r3, [r0, #100]	; 0x64
    4794:	81c2      	strh	r2, [r0, #14]
    4796:	6103      	str	r3, [r0, #16]
    4798:	6143      	str	r3, [r0, #20]
    479a:	6183      	str	r3, [r0, #24]
    479c:	1c19      	adds	r1, r3, #0
    479e:	2208      	movs	r2, #8
    47a0:	305c      	adds	r0, #92	; 0x5c
    47a2:	f7ff fae8 	bl	3d76 <memset>
    47a6:	4b05      	ldr	r3, [pc, #20]	; (47bc <std.isra.0+0x38>)
    47a8:	6224      	str	r4, [r4, #32]
    47aa:	6263      	str	r3, [r4, #36]	; 0x24
    47ac:	4b04      	ldr	r3, [pc, #16]	; (47c0 <std.isra.0+0x3c>)
    47ae:	62a3      	str	r3, [r4, #40]	; 0x28
    47b0:	4b04      	ldr	r3, [pc, #16]	; (47c4 <std.isra.0+0x40>)
    47b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    47b4:	4b04      	ldr	r3, [pc, #16]	; (47c8 <std.isra.0+0x44>)
    47b6:	6323      	str	r3, [r4, #48]	; 0x30
    47b8:	bd10      	pop	{r4, pc}
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	00004b01 	.word	0x00004b01
    47c0:	00004b29 	.word	0x00004b29
    47c4:	00004b61 	.word	0x00004b61
    47c8:	00004b8d 	.word	0x00004b8d

000047cc <__sfmoreglue>:
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	1e4b      	subs	r3, r1, #1
    47d0:	2568      	movs	r5, #104	; 0x68
    47d2:	435d      	muls	r5, r3
    47d4:	1c0e      	adds	r6, r1, #0
    47d6:	1c29      	adds	r1, r5, #0
    47d8:	3174      	adds	r1, #116	; 0x74
    47da:	f000 f92b 	bl	4a34 <_malloc_r>
    47de:	1e04      	subs	r4, r0, #0
    47e0:	d008      	beq.n	47f4 <__sfmoreglue+0x28>
    47e2:	2100      	movs	r1, #0
    47e4:	6001      	str	r1, [r0, #0]
    47e6:	6046      	str	r6, [r0, #4]
    47e8:	1c2a      	adds	r2, r5, #0
    47ea:	300c      	adds	r0, #12
    47ec:	60a0      	str	r0, [r4, #8]
    47ee:	3268      	adds	r2, #104	; 0x68
    47f0:	f7ff fac1 	bl	3d76 <memset>
    47f4:	1c20      	adds	r0, r4, #0
    47f6:	bd70      	pop	{r4, r5, r6, pc}

000047f8 <__sinit>:
    47f8:	6983      	ldr	r3, [r0, #24]
    47fa:	b513      	push	{r0, r1, r4, lr}
    47fc:	1c04      	adds	r4, r0, #0
    47fe:	2b00      	cmp	r3, #0
    4800:	d127      	bne.n	4852 <__sinit+0x5a>
    4802:	6483      	str	r3, [r0, #72]	; 0x48
    4804:	64c3      	str	r3, [r0, #76]	; 0x4c
    4806:	6503      	str	r3, [r0, #80]	; 0x50
    4808:	4b12      	ldr	r3, [pc, #72]	; (4854 <__sinit+0x5c>)
    480a:	4a13      	ldr	r2, [pc, #76]	; (4858 <__sinit+0x60>)
    480c:	681b      	ldr	r3, [r3, #0]
    480e:	6282      	str	r2, [r0, #40]	; 0x28
    4810:	4298      	cmp	r0, r3
    4812:	d101      	bne.n	4818 <__sinit+0x20>
    4814:	2301      	movs	r3, #1
    4816:	6183      	str	r3, [r0, #24]
    4818:	1c20      	adds	r0, r4, #0
    481a:	f000 f81f 	bl	485c <__sfp>
    481e:	6060      	str	r0, [r4, #4]
    4820:	1c20      	adds	r0, r4, #0
    4822:	f000 f81b 	bl	485c <__sfp>
    4826:	60a0      	str	r0, [r4, #8]
    4828:	1c20      	adds	r0, r4, #0
    482a:	f000 f817 	bl	485c <__sfp>
    482e:	2104      	movs	r1, #4
    4830:	60e0      	str	r0, [r4, #12]
    4832:	2200      	movs	r2, #0
    4834:	6860      	ldr	r0, [r4, #4]
    4836:	f7ff ffa5 	bl	4784 <std.isra.0>
    483a:	68a0      	ldr	r0, [r4, #8]
    483c:	2109      	movs	r1, #9
    483e:	2201      	movs	r2, #1
    4840:	f7ff ffa0 	bl	4784 <std.isra.0>
    4844:	68e0      	ldr	r0, [r4, #12]
    4846:	2112      	movs	r1, #18
    4848:	2202      	movs	r2, #2
    484a:	f7ff ff9b 	bl	4784 <std.isra.0>
    484e:	2301      	movs	r3, #1
    4850:	61a3      	str	r3, [r4, #24]
    4852:	bd13      	pop	{r0, r1, r4, pc}
    4854:	0000504c 	.word	0x0000504c
    4858:	00004751 	.word	0x00004751

0000485c <__sfp>:
    485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    485e:	4b1d      	ldr	r3, [pc, #116]	; (48d4 <__sfp+0x78>)
    4860:	1c07      	adds	r7, r0, #0
    4862:	681e      	ldr	r6, [r3, #0]
    4864:	69b2      	ldr	r2, [r6, #24]
    4866:	2a00      	cmp	r2, #0
    4868:	d102      	bne.n	4870 <__sfp+0x14>
    486a:	1c30      	adds	r0, r6, #0
    486c:	f7ff ffc4 	bl	47f8 <__sinit>
    4870:	3648      	adds	r6, #72	; 0x48
    4872:	68b4      	ldr	r4, [r6, #8]
    4874:	6873      	ldr	r3, [r6, #4]
    4876:	3b01      	subs	r3, #1
    4878:	d405      	bmi.n	4886 <__sfp+0x2a>
    487a:	220c      	movs	r2, #12
    487c:	5ea5      	ldrsh	r5, [r4, r2]
    487e:	2d00      	cmp	r5, #0
    4880:	d010      	beq.n	48a4 <__sfp+0x48>
    4882:	3468      	adds	r4, #104	; 0x68
    4884:	e7f7      	b.n	4876 <__sfp+0x1a>
    4886:	6833      	ldr	r3, [r6, #0]
    4888:	2b00      	cmp	r3, #0
    488a:	d106      	bne.n	489a <__sfp+0x3e>
    488c:	1c38      	adds	r0, r7, #0
    488e:	2104      	movs	r1, #4
    4890:	f7ff ff9c 	bl	47cc <__sfmoreglue>
    4894:	6030      	str	r0, [r6, #0]
    4896:	2800      	cmp	r0, #0
    4898:	d001      	beq.n	489e <__sfp+0x42>
    489a:	6836      	ldr	r6, [r6, #0]
    489c:	e7e9      	b.n	4872 <__sfp+0x16>
    489e:	230c      	movs	r3, #12
    48a0:	603b      	str	r3, [r7, #0]
    48a2:	e016      	b.n	48d2 <__sfp+0x76>
    48a4:	2301      	movs	r3, #1
    48a6:	425b      	negs	r3, r3
    48a8:	81e3      	strh	r3, [r4, #14]
    48aa:	1c20      	adds	r0, r4, #0
    48ac:	2301      	movs	r3, #1
    48ae:	81a3      	strh	r3, [r4, #12]
    48b0:	6665      	str	r5, [r4, #100]	; 0x64
    48b2:	6025      	str	r5, [r4, #0]
    48b4:	60a5      	str	r5, [r4, #8]
    48b6:	6065      	str	r5, [r4, #4]
    48b8:	6125      	str	r5, [r4, #16]
    48ba:	6165      	str	r5, [r4, #20]
    48bc:	61a5      	str	r5, [r4, #24]
    48be:	305c      	adds	r0, #92	; 0x5c
    48c0:	1c29      	adds	r1, r5, #0
    48c2:	2208      	movs	r2, #8
    48c4:	f7ff fa57 	bl	3d76 <memset>
    48c8:	6365      	str	r5, [r4, #52]	; 0x34
    48ca:	63a5      	str	r5, [r4, #56]	; 0x38
    48cc:	64a5      	str	r5, [r4, #72]	; 0x48
    48ce:	64e5      	str	r5, [r4, #76]	; 0x4c
    48d0:	1c20      	adds	r0, r4, #0
    48d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48d4:	0000504c 	.word	0x0000504c

000048d8 <__smakebuf_r>:
    48d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48da:	898b      	ldrh	r3, [r1, #12]
    48dc:	b091      	sub	sp, #68	; 0x44
    48de:	1c05      	adds	r5, r0, #0
    48e0:	1c0c      	adds	r4, r1, #0
    48e2:	079a      	lsls	r2, r3, #30
    48e4:	d425      	bmi.n	4932 <__smakebuf_r+0x5a>
    48e6:	230e      	movs	r3, #14
    48e8:	5ec9      	ldrsh	r1, [r1, r3]
    48ea:	2900      	cmp	r1, #0
    48ec:	da06      	bge.n	48fc <__smakebuf_r+0x24>
    48ee:	89a7      	ldrh	r7, [r4, #12]
    48f0:	2380      	movs	r3, #128	; 0x80
    48f2:	401f      	ands	r7, r3
    48f4:	d00f      	beq.n	4916 <__smakebuf_r+0x3e>
    48f6:	2700      	movs	r7, #0
    48f8:	2640      	movs	r6, #64	; 0x40
    48fa:	e00e      	b.n	491a <__smakebuf_r+0x42>
    48fc:	aa01      	add	r2, sp, #4
    48fe:	f000 f979 	bl	4bf4 <_fstat_r>
    4902:	2800      	cmp	r0, #0
    4904:	dbf3      	blt.n	48ee <__smakebuf_r+0x16>
    4906:	9b02      	ldr	r3, [sp, #8]
    4908:	27f0      	movs	r7, #240	; 0xf0
    490a:	023f      	lsls	r7, r7, #8
    490c:	4a18      	ldr	r2, [pc, #96]	; (4970 <__smakebuf_r+0x98>)
    490e:	401f      	ands	r7, r3
    4910:	18bf      	adds	r7, r7, r2
    4912:	427b      	negs	r3, r7
    4914:	415f      	adcs	r7, r3
    4916:	2680      	movs	r6, #128	; 0x80
    4918:	00f6      	lsls	r6, r6, #3
    491a:	1c28      	adds	r0, r5, #0
    491c:	1c31      	adds	r1, r6, #0
    491e:	f000 f889 	bl	4a34 <_malloc_r>
    4922:	2800      	cmp	r0, #0
    4924:	d10c      	bne.n	4940 <__smakebuf_r+0x68>
    4926:	89a3      	ldrh	r3, [r4, #12]
    4928:	059a      	lsls	r2, r3, #22
    492a:	d41f      	bmi.n	496c <__smakebuf_r+0x94>
    492c:	2202      	movs	r2, #2
    492e:	4313      	orrs	r3, r2
    4930:	81a3      	strh	r3, [r4, #12]
    4932:	1c23      	adds	r3, r4, #0
    4934:	3347      	adds	r3, #71	; 0x47
    4936:	6023      	str	r3, [r4, #0]
    4938:	6123      	str	r3, [r4, #16]
    493a:	2301      	movs	r3, #1
    493c:	6163      	str	r3, [r4, #20]
    493e:	e015      	b.n	496c <__smakebuf_r+0x94>
    4940:	4b0c      	ldr	r3, [pc, #48]	; (4974 <__smakebuf_r+0x9c>)
    4942:	2280      	movs	r2, #128	; 0x80
    4944:	62ab      	str	r3, [r5, #40]	; 0x28
    4946:	89a3      	ldrh	r3, [r4, #12]
    4948:	6020      	str	r0, [r4, #0]
    494a:	4313      	orrs	r3, r2
    494c:	81a3      	strh	r3, [r4, #12]
    494e:	6120      	str	r0, [r4, #16]
    4950:	6166      	str	r6, [r4, #20]
    4952:	2f00      	cmp	r7, #0
    4954:	d00a      	beq.n	496c <__smakebuf_r+0x94>
    4956:	230e      	movs	r3, #14
    4958:	5ee1      	ldrsh	r1, [r4, r3]
    495a:	1c28      	adds	r0, r5, #0
    495c:	f000 f95c 	bl	4c18 <_isatty_r>
    4960:	2800      	cmp	r0, #0
    4962:	d003      	beq.n	496c <__smakebuf_r+0x94>
    4964:	89a3      	ldrh	r3, [r4, #12]
    4966:	2201      	movs	r2, #1
    4968:	4313      	orrs	r3, r2
    496a:	81a3      	strh	r3, [r4, #12]
    496c:	b011      	add	sp, #68	; 0x44
    496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4970:	ffffe000 	.word	0xffffe000
    4974:	00004751 	.word	0x00004751

00004978 <malloc>:
    4978:	b508      	push	{r3, lr}
    497a:	4b03      	ldr	r3, [pc, #12]	; (4988 <malloc+0x10>)
    497c:	1c01      	adds	r1, r0, #0
    497e:	6818      	ldr	r0, [r3, #0]
    4980:	f000 f858 	bl	4a34 <_malloc_r>
    4984:	bd08      	pop	{r3, pc}
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	2000007c 	.word	0x2000007c

0000498c <memchr>:
    498c:	b2c9      	uxtb	r1, r1
    498e:	1882      	adds	r2, r0, r2
    4990:	4290      	cmp	r0, r2
    4992:	d004      	beq.n	499e <memchr+0x12>
    4994:	7803      	ldrb	r3, [r0, #0]
    4996:	428b      	cmp	r3, r1
    4998:	d002      	beq.n	49a0 <memchr+0x14>
    499a:	3001      	adds	r0, #1
    499c:	e7f8      	b.n	4990 <memchr+0x4>
    499e:	2000      	movs	r0, #0
    49a0:	4770      	bx	lr
	...

000049a4 <_free_r>:
    49a4:	b530      	push	{r4, r5, lr}
    49a6:	2900      	cmp	r1, #0
    49a8:	d040      	beq.n	4a2c <_free_r+0x88>
    49aa:	3904      	subs	r1, #4
    49ac:	680b      	ldr	r3, [r1, #0]
    49ae:	2b00      	cmp	r3, #0
    49b0:	da00      	bge.n	49b4 <_free_r+0x10>
    49b2:	18c9      	adds	r1, r1, r3
    49b4:	4a1e      	ldr	r2, [pc, #120]	; (4a30 <_free_r+0x8c>)
    49b6:	6813      	ldr	r3, [r2, #0]
    49b8:	1c14      	adds	r4, r2, #0
    49ba:	2b00      	cmp	r3, #0
    49bc:	d102      	bne.n	49c4 <_free_r+0x20>
    49be:	604b      	str	r3, [r1, #4]
    49c0:	6011      	str	r1, [r2, #0]
    49c2:	e033      	b.n	4a2c <_free_r+0x88>
    49c4:	4299      	cmp	r1, r3
    49c6:	d20f      	bcs.n	49e8 <_free_r+0x44>
    49c8:	6808      	ldr	r0, [r1, #0]
    49ca:	180a      	adds	r2, r1, r0
    49cc:	429a      	cmp	r2, r3
    49ce:	d105      	bne.n	49dc <_free_r+0x38>
    49d0:	6813      	ldr	r3, [r2, #0]
    49d2:	6852      	ldr	r2, [r2, #4]
    49d4:	18c0      	adds	r0, r0, r3
    49d6:	6008      	str	r0, [r1, #0]
    49d8:	604a      	str	r2, [r1, #4]
    49da:	e000      	b.n	49de <_free_r+0x3a>
    49dc:	604b      	str	r3, [r1, #4]
    49de:	6021      	str	r1, [r4, #0]
    49e0:	e024      	b.n	4a2c <_free_r+0x88>
    49e2:	428a      	cmp	r2, r1
    49e4:	d803      	bhi.n	49ee <_free_r+0x4a>
    49e6:	1c13      	adds	r3, r2, #0
    49e8:	685a      	ldr	r2, [r3, #4]
    49ea:	2a00      	cmp	r2, #0
    49ec:	d1f9      	bne.n	49e2 <_free_r+0x3e>
    49ee:	681d      	ldr	r5, [r3, #0]
    49f0:	195c      	adds	r4, r3, r5
    49f2:	428c      	cmp	r4, r1
    49f4:	d10b      	bne.n	4a0e <_free_r+0x6a>
    49f6:	6809      	ldr	r1, [r1, #0]
    49f8:	1869      	adds	r1, r5, r1
    49fa:	1858      	adds	r0, r3, r1
    49fc:	6019      	str	r1, [r3, #0]
    49fe:	4290      	cmp	r0, r2
    4a00:	d114      	bne.n	4a2c <_free_r+0x88>
    4a02:	6814      	ldr	r4, [r2, #0]
    4a04:	6852      	ldr	r2, [r2, #4]
    4a06:	1909      	adds	r1, r1, r4
    4a08:	6019      	str	r1, [r3, #0]
    4a0a:	605a      	str	r2, [r3, #4]
    4a0c:	e00e      	b.n	4a2c <_free_r+0x88>
    4a0e:	428c      	cmp	r4, r1
    4a10:	d902      	bls.n	4a18 <_free_r+0x74>
    4a12:	230c      	movs	r3, #12
    4a14:	6003      	str	r3, [r0, #0]
    4a16:	e009      	b.n	4a2c <_free_r+0x88>
    4a18:	6808      	ldr	r0, [r1, #0]
    4a1a:	180c      	adds	r4, r1, r0
    4a1c:	4294      	cmp	r4, r2
    4a1e:	d103      	bne.n	4a28 <_free_r+0x84>
    4a20:	6814      	ldr	r4, [r2, #0]
    4a22:	6852      	ldr	r2, [r2, #4]
    4a24:	1900      	adds	r0, r0, r4
    4a26:	6008      	str	r0, [r1, #0]
    4a28:	604a      	str	r2, [r1, #4]
    4a2a:	6059      	str	r1, [r3, #4]
    4a2c:	bd30      	pop	{r4, r5, pc}
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	20003d94 	.word	0x20003d94

00004a34 <_malloc_r>:
    4a34:	b570      	push	{r4, r5, r6, lr}
    4a36:	2303      	movs	r3, #3
    4a38:	1ccd      	adds	r5, r1, #3
    4a3a:	439d      	bics	r5, r3
    4a3c:	3508      	adds	r5, #8
    4a3e:	1c06      	adds	r6, r0, #0
    4a40:	2d0c      	cmp	r5, #12
    4a42:	d201      	bcs.n	4a48 <_malloc_r+0x14>
    4a44:	250c      	movs	r5, #12
    4a46:	e001      	b.n	4a4c <_malloc_r+0x18>
    4a48:	2d00      	cmp	r5, #0
    4a4a:	db3f      	blt.n	4acc <_malloc_r+0x98>
    4a4c:	428d      	cmp	r5, r1
    4a4e:	d33d      	bcc.n	4acc <_malloc_r+0x98>
    4a50:	4b20      	ldr	r3, [pc, #128]	; (4ad4 <_malloc_r+0xa0>)
    4a52:	681c      	ldr	r4, [r3, #0]
    4a54:	1c1a      	adds	r2, r3, #0
    4a56:	1c21      	adds	r1, r4, #0
    4a58:	2900      	cmp	r1, #0
    4a5a:	d013      	beq.n	4a84 <_malloc_r+0x50>
    4a5c:	6808      	ldr	r0, [r1, #0]
    4a5e:	1b43      	subs	r3, r0, r5
    4a60:	d40d      	bmi.n	4a7e <_malloc_r+0x4a>
    4a62:	2b0b      	cmp	r3, #11
    4a64:	d902      	bls.n	4a6c <_malloc_r+0x38>
    4a66:	600b      	str	r3, [r1, #0]
    4a68:	18cc      	adds	r4, r1, r3
    4a6a:	e01e      	b.n	4aaa <_malloc_r+0x76>
    4a6c:	428c      	cmp	r4, r1
    4a6e:	d102      	bne.n	4a76 <_malloc_r+0x42>
    4a70:	6863      	ldr	r3, [r4, #4]
    4a72:	6013      	str	r3, [r2, #0]
    4a74:	e01a      	b.n	4aac <_malloc_r+0x78>
    4a76:	6848      	ldr	r0, [r1, #4]
    4a78:	6060      	str	r0, [r4, #4]
    4a7a:	1c0c      	adds	r4, r1, #0
    4a7c:	e016      	b.n	4aac <_malloc_r+0x78>
    4a7e:	1c0c      	adds	r4, r1, #0
    4a80:	6849      	ldr	r1, [r1, #4]
    4a82:	e7e9      	b.n	4a58 <_malloc_r+0x24>
    4a84:	4c14      	ldr	r4, [pc, #80]	; (4ad8 <_malloc_r+0xa4>)
    4a86:	6820      	ldr	r0, [r4, #0]
    4a88:	2800      	cmp	r0, #0
    4a8a:	d103      	bne.n	4a94 <_malloc_r+0x60>
    4a8c:	1c30      	adds	r0, r6, #0
    4a8e:	f000 f825 	bl	4adc <_sbrk_r>
    4a92:	6020      	str	r0, [r4, #0]
    4a94:	1c30      	adds	r0, r6, #0
    4a96:	1c29      	adds	r1, r5, #0
    4a98:	f000 f820 	bl	4adc <_sbrk_r>
    4a9c:	1c43      	adds	r3, r0, #1
    4a9e:	d015      	beq.n	4acc <_malloc_r+0x98>
    4aa0:	1cc4      	adds	r4, r0, #3
    4aa2:	2303      	movs	r3, #3
    4aa4:	439c      	bics	r4, r3
    4aa6:	4284      	cmp	r4, r0
    4aa8:	d10a      	bne.n	4ac0 <_malloc_r+0x8c>
    4aaa:	6025      	str	r5, [r4, #0]
    4aac:	1c20      	adds	r0, r4, #0
    4aae:	300b      	adds	r0, #11
    4ab0:	2207      	movs	r2, #7
    4ab2:	1d23      	adds	r3, r4, #4
    4ab4:	4390      	bics	r0, r2
    4ab6:	1ac3      	subs	r3, r0, r3
    4ab8:	d00b      	beq.n	4ad2 <_malloc_r+0x9e>
    4aba:	425a      	negs	r2, r3
    4abc:	50e2      	str	r2, [r4, r3]
    4abe:	e008      	b.n	4ad2 <_malloc_r+0x9e>
    4ac0:	1a21      	subs	r1, r4, r0
    4ac2:	1c30      	adds	r0, r6, #0
    4ac4:	f000 f80a 	bl	4adc <_sbrk_r>
    4ac8:	3001      	adds	r0, #1
    4aca:	d1ee      	bne.n	4aaa <_malloc_r+0x76>
    4acc:	230c      	movs	r3, #12
    4ace:	6033      	str	r3, [r6, #0]
    4ad0:	2000      	movs	r0, #0
    4ad2:	bd70      	pop	{r4, r5, r6, pc}
    4ad4:	20003d94 	.word	0x20003d94
    4ad8:	20003d90 	.word	0x20003d90

00004adc <_sbrk_r>:
    4adc:	b538      	push	{r3, r4, r5, lr}
    4ade:	4c07      	ldr	r4, [pc, #28]	; (4afc <_sbrk_r+0x20>)
    4ae0:	2300      	movs	r3, #0
    4ae2:	1c05      	adds	r5, r0, #0
    4ae4:	1c08      	adds	r0, r1, #0
    4ae6:	6023      	str	r3, [r4, #0]
    4ae8:	f7fc ffae 	bl	1a48 <_sbrk>
    4aec:	1c43      	adds	r3, r0, #1
    4aee:	d103      	bne.n	4af8 <_sbrk_r+0x1c>
    4af0:	6823      	ldr	r3, [r4, #0]
    4af2:	2b00      	cmp	r3, #0
    4af4:	d000      	beq.n	4af8 <_sbrk_r+0x1c>
    4af6:	602b      	str	r3, [r5, #0]
    4af8:	bd38      	pop	{r3, r4, r5, pc}
    4afa:	46c0      	nop			; (mov r8, r8)
    4afc:	20003dfc 	.word	0x20003dfc

00004b00 <__sread>:
    4b00:	b538      	push	{r3, r4, r5, lr}
    4b02:	1c0c      	adds	r4, r1, #0
    4b04:	250e      	movs	r5, #14
    4b06:	5f49      	ldrsh	r1, [r1, r5]
    4b08:	f000 f8ac 	bl	4c64 <_read_r>
    4b0c:	2800      	cmp	r0, #0
    4b0e:	db03      	blt.n	4b18 <__sread+0x18>
    4b10:	6d62      	ldr	r2, [r4, #84]	; 0x54
    4b12:	1813      	adds	r3, r2, r0
    4b14:	6563      	str	r3, [r4, #84]	; 0x54
    4b16:	e003      	b.n	4b20 <__sread+0x20>
    4b18:	89a2      	ldrh	r2, [r4, #12]
    4b1a:	4b02      	ldr	r3, [pc, #8]	; (4b24 <__sread+0x24>)
    4b1c:	4013      	ands	r3, r2
    4b1e:	81a3      	strh	r3, [r4, #12]
    4b20:	bd38      	pop	{r3, r4, r5, pc}
    4b22:	46c0      	nop			; (mov r8, r8)
    4b24:	ffffefff 	.word	0xffffefff

00004b28 <__swrite>:
    4b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b2a:	1c1e      	adds	r6, r3, #0
    4b2c:	898b      	ldrh	r3, [r1, #12]
    4b2e:	1c05      	adds	r5, r0, #0
    4b30:	1c0c      	adds	r4, r1, #0
    4b32:	1c17      	adds	r7, r2, #0
    4b34:	05da      	lsls	r2, r3, #23
    4b36:	d505      	bpl.n	4b44 <__swrite+0x1c>
    4b38:	230e      	movs	r3, #14
    4b3a:	5ec9      	ldrsh	r1, [r1, r3]
    4b3c:	2200      	movs	r2, #0
    4b3e:	2302      	movs	r3, #2
    4b40:	f000 f87c 	bl	4c3c <_lseek_r>
    4b44:	89a2      	ldrh	r2, [r4, #12]
    4b46:	4b05      	ldr	r3, [pc, #20]	; (4b5c <__swrite+0x34>)
    4b48:	1c28      	adds	r0, r5, #0
    4b4a:	4013      	ands	r3, r2
    4b4c:	81a3      	strh	r3, [r4, #12]
    4b4e:	220e      	movs	r2, #14
    4b50:	5ea1      	ldrsh	r1, [r4, r2]
    4b52:	1c33      	adds	r3, r6, #0
    4b54:	1c3a      	adds	r2, r7, #0
    4b56:	f000 f827 	bl	4ba8 <_write_r>
    4b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b5c:	ffffefff 	.word	0xffffefff

00004b60 <__sseek>:
    4b60:	b538      	push	{r3, r4, r5, lr}
    4b62:	1c0c      	adds	r4, r1, #0
    4b64:	250e      	movs	r5, #14
    4b66:	5f49      	ldrsh	r1, [r1, r5]
    4b68:	f000 f868 	bl	4c3c <_lseek_r>
    4b6c:	89a3      	ldrh	r3, [r4, #12]
    4b6e:	1c42      	adds	r2, r0, #1
    4b70:	d103      	bne.n	4b7a <__sseek+0x1a>
    4b72:	4a05      	ldr	r2, [pc, #20]	; (4b88 <__sseek+0x28>)
    4b74:	4013      	ands	r3, r2
    4b76:	81a3      	strh	r3, [r4, #12]
    4b78:	e004      	b.n	4b84 <__sseek+0x24>
    4b7a:	2280      	movs	r2, #128	; 0x80
    4b7c:	0152      	lsls	r2, r2, #5
    4b7e:	4313      	orrs	r3, r2
    4b80:	81a3      	strh	r3, [r4, #12]
    4b82:	6560      	str	r0, [r4, #84]	; 0x54
    4b84:	bd38      	pop	{r3, r4, r5, pc}
    4b86:	46c0      	nop			; (mov r8, r8)
    4b88:	ffffefff 	.word	0xffffefff

00004b8c <__sclose>:
    4b8c:	b508      	push	{r3, lr}
    4b8e:	230e      	movs	r3, #14
    4b90:	5ec9      	ldrsh	r1, [r1, r3]
    4b92:	f000 f81d 	bl	4bd0 <_close_r>
    4b96:	bd08      	pop	{r3, pc}

00004b98 <strlen>:
    4b98:	2300      	movs	r3, #0
    4b9a:	5cc2      	ldrb	r2, [r0, r3]
    4b9c:	3301      	adds	r3, #1
    4b9e:	2a00      	cmp	r2, #0
    4ba0:	d1fb      	bne.n	4b9a <strlen+0x2>
    4ba2:	1e58      	subs	r0, r3, #1
    4ba4:	4770      	bx	lr
	...

00004ba8 <_write_r>:
    4ba8:	b538      	push	{r3, r4, r5, lr}
    4baa:	4c08      	ldr	r4, [pc, #32]	; (4bcc <_write_r+0x24>)
    4bac:	1c05      	adds	r5, r0, #0
    4bae:	2000      	movs	r0, #0
    4bb0:	6020      	str	r0, [r4, #0]
    4bb2:	1c08      	adds	r0, r1, #0
    4bb4:	1c11      	adds	r1, r2, #0
    4bb6:	1c1a      	adds	r2, r3, #0
    4bb8:	f7fb face 	bl	158 <_write>
    4bbc:	1c43      	adds	r3, r0, #1
    4bbe:	d103      	bne.n	4bc8 <_write_r+0x20>
    4bc0:	6823      	ldr	r3, [r4, #0]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d000      	beq.n	4bc8 <_write_r+0x20>
    4bc6:	602b      	str	r3, [r5, #0]
    4bc8:	bd38      	pop	{r3, r4, r5, pc}
    4bca:	46c0      	nop			; (mov r8, r8)
    4bcc:	20003dfc 	.word	0x20003dfc

00004bd0 <_close_r>:
    4bd0:	b538      	push	{r3, r4, r5, lr}
    4bd2:	4c07      	ldr	r4, [pc, #28]	; (4bf0 <_close_r+0x20>)
    4bd4:	2300      	movs	r3, #0
    4bd6:	1c05      	adds	r5, r0, #0
    4bd8:	1c08      	adds	r0, r1, #0
    4bda:	6023      	str	r3, [r4, #0]
    4bdc:	f7fc ff46 	bl	1a6c <_close>
    4be0:	1c43      	adds	r3, r0, #1
    4be2:	d103      	bne.n	4bec <_close_r+0x1c>
    4be4:	6823      	ldr	r3, [r4, #0]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d000      	beq.n	4bec <_close_r+0x1c>
    4bea:	602b      	str	r3, [r5, #0]
    4bec:	bd38      	pop	{r3, r4, r5, pc}
    4bee:	46c0      	nop			; (mov r8, r8)
    4bf0:	20003dfc 	.word	0x20003dfc

00004bf4 <_fstat_r>:
    4bf4:	b538      	push	{r3, r4, r5, lr}
    4bf6:	4c07      	ldr	r4, [pc, #28]	; (4c14 <_fstat_r+0x20>)
    4bf8:	2300      	movs	r3, #0
    4bfa:	1c05      	adds	r5, r0, #0
    4bfc:	1c08      	adds	r0, r1, #0
    4bfe:	1c11      	adds	r1, r2, #0
    4c00:	6023      	str	r3, [r4, #0]
    4c02:	f7fc ff37 	bl	1a74 <_fstat>
    4c06:	1c43      	adds	r3, r0, #1
    4c08:	d103      	bne.n	4c12 <_fstat_r+0x1e>
    4c0a:	6823      	ldr	r3, [r4, #0]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d000      	beq.n	4c12 <_fstat_r+0x1e>
    4c10:	602b      	str	r3, [r5, #0]
    4c12:	bd38      	pop	{r3, r4, r5, pc}
    4c14:	20003dfc 	.word	0x20003dfc

00004c18 <_isatty_r>:
    4c18:	b538      	push	{r3, r4, r5, lr}
    4c1a:	4c07      	ldr	r4, [pc, #28]	; (4c38 <_isatty_r+0x20>)
    4c1c:	2300      	movs	r3, #0
    4c1e:	1c05      	adds	r5, r0, #0
    4c20:	1c08      	adds	r0, r1, #0
    4c22:	6023      	str	r3, [r4, #0]
    4c24:	f7fc ff2c 	bl	1a80 <_isatty>
    4c28:	1c43      	adds	r3, r0, #1
    4c2a:	d103      	bne.n	4c34 <_isatty_r+0x1c>
    4c2c:	6823      	ldr	r3, [r4, #0]
    4c2e:	2b00      	cmp	r3, #0
    4c30:	d000      	beq.n	4c34 <_isatty_r+0x1c>
    4c32:	602b      	str	r3, [r5, #0]
    4c34:	bd38      	pop	{r3, r4, r5, pc}
    4c36:	46c0      	nop			; (mov r8, r8)
    4c38:	20003dfc 	.word	0x20003dfc

00004c3c <_lseek_r>:
    4c3c:	b538      	push	{r3, r4, r5, lr}
    4c3e:	4c08      	ldr	r4, [pc, #32]	; (4c60 <_lseek_r+0x24>)
    4c40:	1c05      	adds	r5, r0, #0
    4c42:	2000      	movs	r0, #0
    4c44:	6020      	str	r0, [r4, #0]
    4c46:	1c08      	adds	r0, r1, #0
    4c48:	1c11      	adds	r1, r2, #0
    4c4a:	1c1a      	adds	r2, r3, #0
    4c4c:	f7fc ff1a 	bl	1a84 <_lseek>
    4c50:	1c43      	adds	r3, r0, #1
    4c52:	d103      	bne.n	4c5c <_lseek_r+0x20>
    4c54:	6823      	ldr	r3, [r4, #0]
    4c56:	2b00      	cmp	r3, #0
    4c58:	d000      	beq.n	4c5c <_lseek_r+0x20>
    4c5a:	602b      	str	r3, [r5, #0]
    4c5c:	bd38      	pop	{r3, r4, r5, pc}
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	20003dfc 	.word	0x20003dfc

00004c64 <_read_r>:
    4c64:	b538      	push	{r3, r4, r5, lr}
    4c66:	4c08      	ldr	r4, [pc, #32]	; (4c88 <_read_r+0x24>)
    4c68:	1c05      	adds	r5, r0, #0
    4c6a:	2000      	movs	r0, #0
    4c6c:	6020      	str	r0, [r4, #0]
    4c6e:	1c08      	adds	r0, r1, #0
    4c70:	1c11      	adds	r1, r2, #0
    4c72:	1c1a      	adds	r2, r3, #0
    4c74:	f7fb fa4e 	bl	114 <_read>
    4c78:	1c43      	adds	r3, r0, #1
    4c7a:	d103      	bne.n	4c84 <_read_r+0x20>
    4c7c:	6823      	ldr	r3, [r4, #0]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d000      	beq.n	4c84 <_read_r+0x20>
    4c82:	602b      	str	r3, [r5, #0]
    4c84:	bd38      	pop	{r3, r4, r5, pc}
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	20003dfc 	.word	0x20003dfc

00004c8c <sysfont_glyphs>:
    4c8c:	00000000 20000000 20202020 50502000     .......     . PP
    4c9c:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
    4cac:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
    4cbc:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
    4ccc:	10101020 50004020 5020f820 20200000      ... @.P . P..  
    4cdc:	002020f8 00000000 00402060 00f80000     .  .....` @.....
    4cec:	00000000 60000000 10080060 00804020     .......``... @..
    4cfc:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
    4d0c:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
    4d1c:	f81010f8 0808f080 40307088 8888f080     .........p0@....
    4d2c:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
    4d3c:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
    4d4c:	40206000 40201008 00081020 f800f800     .` @.. @ .......
    4d5c:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
    4d6c:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
    4d7c:	8888f088 808870f0 70888080 888890e0     .....p.....p....
    4d8c:	f8e09088 80f08080 80f8f880 8080e080     ................
    4d9c:	80887080 70889880 f8888888 70888888     .p.....p.......p
    4dac:	20202020 10387020 90101010 a0908860          p8.....`...
    4dbc:	8890a0c0 80808080 88f88080 8888a8d8     ................
    4dcc:	88888888 8898a8c8 88887088 70888888     .........p.....p
    4ddc:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
    4dec:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
    4dfc:	88202020 88888888 88887088 50888888        ......p.....P
    4e0c:	88888820 88d8a8a8 20508888 88888850      .........P P...
    4e1c:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
    4e2c:	38202020 20408000 e0000810 20202020        8..@ ....    
    4e3c:	5020e020 00000088 00000000 f8000000      . P............
    4e4c:	00102040 00000000 78087000 80807888     @ .......p.x.x..
    4e5c:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
    4e6c:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
    4e7c:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
    4e8c:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
    4e9c:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
    4eac:	00008888 8888c8b0 70000088 70888888     ...........p...p
    4ebc:	88f00000 008080f0 78986800 00000808     .........h.x....
    4ecc:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
    4edc:	00304840 88888800 00006898 50888888     @H0......h.....P
    4eec:	88000020 50a8a888 50880000 00885020      ......P...P P..
    4efc:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
    4f0c:	10202040 20202020 40202020 20102020     @  .       @  . 
    4f1c:	00004020 42000800 42000c00 42001000      @.....B...B...B
    4f2c:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    4f3c:	00000e0d 00001430 0000148c 0000148c     ....0...........
    4f4c:	0000142a 0000142a 00001446 00001436     *...*...F...6...
    4f5c:	0000144c 0000147a 00001514 00001574     L...z.......t...
    4f6c:	00001574 000014f4 00001506 00001522     t..........."...
    4f7c:	000014f8 00001530 00001564 454c4449     ....0...d...IDLE
    4f8c:	00000000 000031aa 000031aa 000031aa     .....1...1...1..
    4f9c:	00003202 000031e4 000031fc 000031aa     .2...1...1...1..
    4fac:	000031aa 00003202 000031e4 20726d54     .1...2...1..Tmr 
    4fbc:	00637653                                Svc.

00004fc0 <menu_items_text>:
    4fc0:	70617247 65540068 002e6d72 756f6241     Graph.Term..Abou
    4fd0:	00000074                                t...

00004fd4 <about_text>:
    4fd4:	65657246 534f5452 2e385620 20312e30     FreeRTOS V8.0.1 
    4fe4:	6f6d6564 2020202e 20202020 20202020     demo.           
    4ff4:	20202020 20202020 73552020 44432065               Use CD
    5004:	74612043 362e3920 61426b20 002e6475     C at 9.6 kBaud..
    5014:	756f6241 00000074 70617247 00000068     About...Graph...
    5024:	6e69614d 00000000 6d726554 0000002e     Main....Term....
    5034:	54524155 00000000 77207449 736b726f     UART....It works
    5044:	00000021 00000043                       !...C...

0000504c <_global_impure_ptr>:
    504c:	2000001c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    505c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    506c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    507c:	64636261 00006665                       abcdef..

00005084 <__sf_fake_stdin>:
	...

000050a4 <__sf_fake_stdout>:
	...

000050c4 <__sf_fake_stderr>:
	...

000050e4 <_init>:
    50e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50e6:	46c0      	nop			; (mov r8, r8)
    50e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    50ea:	bc08      	pop	{r3}
    50ec:	469e      	mov	lr, r3
    50ee:	4770      	bx	lr

000050f0 <__init_array_start>:
    50f0:	000000dd 	.word	0x000000dd

000050f4 <_fini>:
    50f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50f6:	46c0      	nop			; (mov r8, r8)
    50f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    50fa:	bc08      	pop	{r3}
    50fc:	469e      	mov	lr, r3
    50fe:	4770      	bx	lr

00005100 <__fini_array_start>:
    5100:	000000b5 	.word	0x000000b5
